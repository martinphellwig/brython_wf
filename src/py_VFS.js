__BRYTHON__.$py_VFS={
'/libs/_html.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmdW5jdGlvbiAkVGFnKHRhZ05hbWUsYXJncyl7dmFyIG9iaj0kRE9NTm9kZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpKTtvYmoucGFyZW50PXRoaXM7aWYoYXJncyE9dW5kZWZpbmVkJiZhcmdzLmxlbmd0aD4wKXskc3RhcnQ9MDskZmlyc3Q9YXJnc1swXTtpZigkZmlyc3QuX19jbGFzc19fIT09JEt3KXskc3RhcnQ9MTtpZihpc2luc3RhbmNlKCRmaXJzdCxbc3RyLGludCxmbG9hdF0pKXt0eHQ9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKCRmaXJzdCkpO29iai5lbHQuYXBwZW5kQ2hpbGQodHh0KTt9ZWxzZSBpZigkZmlyc3QuX19jbGFzc19fPT09JFRhZ1N1bURpY3QpZm9yKCRpPTA7JGk8JGZpcnN0LmNoaWxkcmVuLmxlbmd0aDskaSsrKW9iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmNoaWxkcmVuWyRpXS5lbHQpO2Vsc2UgdHJ5e29iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmVsdCk7fWNhdGNoKGVycil7Y29uc29sZS5sb2coJ2VycmV1ciAnK2Vycik7dGhyb3cgVmFsdWVFcnJvcignd3JvbmcgZWxlbWVudCAnKyRmaXJzdCk7fX1mb3IodmFyICRpPSRzdGFydDskaTxhcmdzLmxlbmd0aDskaSsrKXskYXJnPWFyZ3NbJGldO2lmKCRhcmcmJiRhcmcuX19jbGFzc19fPT09JEt3KWlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigwLDIpPT09Im9uIilldmFsKCdET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKTtlbHNlIGlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpPT0ic3R5bGUiKURPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKTtlbHNlIGlmKCRhcmcudmFsdWUhPT1mYWxzZSl0cnl7dmFyIGFyZz0kYXJnLm5hbWUudG9Mb3dlckNhc2UoKTtvYmouZWx0LnNldEF0dHJpYnV0ZShhcmcsJGFyZy52YWx1ZSk7aWYoYXJnPT0iY2xhc3MiKW9iai5lbHQuc2V0QXR0cmlidXRlKCJjbGFzc05hbWUiLCRhcmcudmFsdWUpO31jYXRjaChlcnIpe2NvbnNvbGUubG9nKCdlcnJldXIgJytlcnIpO3Rocm93IFZhbHVlRXJyb3IoImNhbid0IHNldCBhdHRyaWJ1dGUgIiskYXJnLm5hbWUpO319fXJldHVybiBvYmo7fWZ1bmN0aW9uIEEoKXt2YXIgb2JqPSRUYWcoJ0EnLGFyZ3VtZW50cyk7cmV0dXJuIG9iajt9QS5fX25hbWVfXz0naHRtbC5BJzt2YXIgJHNyYz1BKycnOyR0YWdzPVsnQScsJ0FCQlInLCdBQ1JPTllNJywnQUREUkVTUycsJ0FQUExFVCcsJ0InLCdCRE8nLCdCSUcnLCdCTE9DS1FVT1RFJywnQlVUVE9OJywnQ0FQVElPTicsJ0NFTlRFUicsJ0NJVEUnLCdDT0RFJywnREVMJywnREZOJywnRElSJywnRElWJywnREwnLCdFTScsJ0ZJRUxEU0VUJywnRk9OVCcsJ0ZPUk0nLCdGUkFNRVNFVCcsJ0gxJywnSDInLCdIMycsJ0g0JywnSDUnLCdINicsJ0knLCdJRlJBTUUnLCdJTlMnLCdLQkQnLCdMQUJFTCcsJ0xFR0VORCcsJ01BUCcsJ01FTlUnLCdOT0ZSQU1FUycsJ05PU0NSSVBUJywnT0JKRUNUJywnT0wnLCdPUFRHUk9VUCcsJ1BSRScsJ1EnLCdTJywnU0FNUCcsJ1NDUklQVCcsJ1NFTEVDVCcsJ1NNQUxMJywnU1BBTicsJ1NUUklLRScsJ1NUUk9ORycsJ1NUWUxFJywnU1VCJywnU1VQJywnVEFCTEUnLCdURVhUQVJFQScsJ1RJVExFJywnVFQnLCdVJywnVUwnLCdWQVInLCdCT0RZJywnQ09MR1JPVVAnLCdERCcsJ0RUJywnSEVBRCcsJ0hUTUwnLCdMSScsJ1AnLCdUQk9EWScsJ09QVElPTicsJ1REJywnVEZPT1QnLCdUSCcsJ1RIRUFEJywnVFInLCdBUkVBJywnQkFTRScsJ0JBU0VGT05UJywnQlInLCdDT0wnLCdGUkFNRScsJ0hSJywnSU1HJywnSU5QVVQnLCdJU0lOREVYJywnTElOSycsJ01FVEEnLCdQQVJBTSddOyR0YWdzPSR0YWdzLmNvbmNhdChbJ0FSVElDTEUnLCdBU0lERScsJ0FVRElPJywnQkRJJywnQ0FOVkFTJywnQ09NTUFORCcsJ0RBVEFMSVNUJywnREVUQUlMUycsJ0RJQUxPRycsJ0VNQkVEJywnRklHQ0FQVElPTicsJ0ZJR1VSRScsJ0ZPT1RFUicsJ0hFQURFUicsJ0tFWUdFTicsJ01BUksnLCdNRVRFUicsJ05BVicsJ09VVFBVVCcsJ1BST0dSRVNTJywnUlAnLCdSVCcsJ1JVQlknLCdTRUNUSU9OJywnU09VUkNFJywnU1VNTUFSWScsJ1RJTUUnLCdUUkFDSycsJ1ZJREVPJywnV0JSJ10pO3ZhciBvYmo9bmV3IE9iamVjdCgpO2ZvcigkaT0wOyRpPCR0YWdzLmxlbmd0aDskaSsrKXskY29kZT0kc3JjLnJlcGxhY2UoL0EvZ20sJHRhZ3NbJGldKTtldmFsKCJvYmouIiskdGFnc1skaV0rIj0iKyRjb2RlKTtldmFsKCJvYmouIiskdGFnc1skaV0rJy5fX25hbWVfXz0iaHRtbC4nKyR0YWdzWyRpXSsnIicpO31vYmouX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fTtyZXR1cm4gb2JqO30pKCk7',
'/libs/re.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtvYmo9e19fY2xhc3NfXzokbW9kdWxlLF9fc3RyX186ZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ3JlJz4iO319O29iai5BPW9iai5BU0NJST0yNTY7b2JqLkk9b2JqLklHTk9SRUNBU0U9J2knO29iai5NPW9iai5NVUxUSUxJTkU9J20nOyRTUkVfUGF0dGVybkRpY3Q9e19fY2xhc3NfXzokdHlwZSxfX25hbWVfXzonU1JFX1BhdHRlcm4nfTskU1JFX1BhdHRlcm5EaWN0Lm1hdGNoPWZ1bmN0aW9uKHNlbGYsc3RyaW5nKXtyZXR1cm4gb2JqLm1hdGNoKHNlbGYucGF0dGVybixzdHJpbmcsc2VsZi5mbGFncyk7fTskU1JFX1BhdHRlcm5EaWN0LnNlYXJjaD1mdW5jdGlvbihzZWxmLHN0cmluZyl7cmV0dXJuIG9iai5vYmooc2VsZi5wYXR0ZXJuLHN0cmluZyxzZWxmLmZsYWdzKTt9O29iai5jb21waWxlPWZ1bmN0aW9uKHBhdHRlcm4sZmxhZ3Mpe3JldHVybntfX2NsYXNzX186JFNSRV9QYXR0ZXJuRGljdCxwYXR0ZXJuOnBhdHRlcm4sZmxhZ3M6ZmxhZ3N9O307b2JqLmZpbmRhbGw9ZnVuY3Rpb24ocGF0dGVybixzdHJpbmcsZmxhZ3Mpe3ZhciAkbnM9JE1ha2VBcmdzKCdyZS5zZWFyY2gnLGFyZ3VtZW50cyxbJ3BhdHRlcm4nLCdzdHJpbmcnXSx7fSwnYXJncycsJ2t3Jyk7dmFyIGFyZ3M9JG5zLmFyZ3M7aWYoYXJncy5sZW5ndGg+MCl2YXIgZmxhZ3M9YXJnc1swXTtlbHNlIHZhciBmbGFncz0kbnMua3cuZ2V0KCdmbGFncycsJycpO2ZsYWdzKz0nZ20nO3ZhciBqc3A9bmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKTt2YXIganNtYXRjaD1zdHJpbmcubWF0Y2goanNwKTtpZihqc21hdGNoPT09bnVsbClyZXR1cm4gW107cmV0dXJuIGpzbWF0Y2g7fTtvYmouc2VhcmNoPWZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpO3ZhciBhcmdzPSRucy5hcmdzO2lmKGFyZ3MubGVuZ3RoPjApdmFyIGZsYWdzPWFyZ3NbMF07ZWxzZSB2YXIgZmxhZ3M9Z2V0YXR0cigkbnMua3csJ2dldCcpKCdmbGFncycsJycpO3ZhciBqc3A9bmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKTt2YXIganNtYXRjaD1zdHJpbmcubWF0Y2goanNwKTtpZihqc21hdGNoPT09bnVsbClyZXR1cm4gTm9uZTt2YXIgbW89bmV3IE9iamVjdCgpO21vLmdyb3VwPWZ1bmN0aW9uKCl7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKWlmKGpzbWF0Y2hbYXJndW1lbnRzW2ldXT09PXVuZGVmaW5lZClyZXMucHVzaChOb25lKTtlbHNlIHJlcy5wdXNoKGpzbWF0Y2hbYXJndW1lbnRzW2ldXSk7aWYoYXJndW1lbnRzLmxlbmd0aD09PTEpcmV0dXJuIHJlc1swXTtyZXR1cm4gdHVwbGUocmVzKTt9O21vLmdyb3Vwcz1mdW5jdGlvbihfZGVmYXVsdCl7aWYoX2RlZmF1bHQ9PT11bmRlZmluZWQpX2RlZmF1bHQ9Tm9uZTt2YXIgcmVzPVtdO2Zvcih2YXIgaT0xO2k8anNtYXRjaC5sZW5ndGg7aSsrKWlmKGpzbWF0Y2hbaV09PT11bmRlZmluZWQpcmVzLnB1c2goX2RlZmF1bHQpO2Vsc2UgcmVzLnB1c2goanNtYXRjaFtpXSk7cmV0dXJuIHR1cGxlKHJlcyk7fTttby5zdGFydD1mdW5jdGlvbigpe3JldHVybiBqc21hdGNoLmluZGV4O307bW8uc3RyaW5nPXN0cmluZztyZXR1cm4gSlNPYmplY3QobW8pO307b2JqLnN1Yj1mdW5jdGlvbihwYXR0ZXJuLHJlcGwsc3RyaW5nKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywncmVwbCcsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKTtmb3IoJHZhciBpbiAkbnMpZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpO3ZhciBhcmdzPSRucy5hcmdzO3ZhciBjb3VudD0kRGljdERpY3QuZ2V0KCRucy5rdywnY291bnQnLDApO3ZhciBmbGFncz0kRGljdERpY3QuZ2V0KCRucy5rdywnZmxhZ3MnLCcnKTtpZihhcmdzLmxlbmd0aD4wKXZhciBjb3VudD1hcmdzWzBdO2lmKGFyZ3MubGVuZ3RoPjEpdmFyIGZsYWdzPWFyZ3NbMV07aWYodHlwZW9mIHJlcGw9PT0ic3RyaW5nIilyZXBsPXJlcGwucmVwbGFjZSgvXFwoXGQrKS9nLCckJCQxJyk7ZWxzZSBpZih0eXBlb2YgcmVwbD09PSJmdW5jdGlvbiIpdmFyICRyZXBsMT1mdW5jdGlvbigpe3ZhciBtbz1PYmplY3QoKTttby5zdHJpbmc9YXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV07dmFyIHN0YXJ0PWFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTJdO3ZhciBlbmQ9c3RhcnQrYXJndW1lbnRzWzBdLmxlbmd0aDttby5zdGFydD1mdW5jdGlvbigpe3JldHVybiBzdGFydDt9O21vLmVuZD1mdW5jdGlvbigpe3JldHVybiBlbmQ7fTtncm91cHM9W107Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoLTI7aSsrKWdyb3Vwcy5wdXNoKGFyZ3VtZW50c1tpXSk7bW8uZ3JvdXBzPWZ1bmN0aW9uKF9kZWZhdWx0KXtpZihfZGVmYXVsdD09PXVuZGVmaW5lZClfZGVmYXVsdD1Ob25lO3ZhciByZXM9W107Zm9yKHZhciBpPTA7aTxncm91cHMubGVuZ3RoO2krKylpZihncm91cHNbaV09PT11bmRlZmluZWQpcmVzLnB1c2goX2RlZmF1bHQpO2Vsc2UgcmVzLnB1c2goZ3JvdXBzW2ldKTtyZXR1cm4gcmVzO307cmV0dXJuIHJlcGwoSlNPYmplY3QobW8pKTt9O2lmKGNvdW50PT0wKWZsYWdzKz0nZyc7dmFyIGpzcD1uZXcgUmVnRXhwKHBhdHRlcm4sZmxhZ3MpO2lmKHR5cGVvZiByZXBsPT09J2Z1bmN0aW9uJylyZXR1cm4gc3RyaW5nLnJlcGxhY2UoanNwLCRyZXBsMSk7ZWxzZSByZXR1cm4gc3RyaW5nLnJlcGxhY2UoanNwLHJlcGwpO307b2JqLm1hdGNoPShmdW5jdGlvbihzZWFyY2hfZnVuYyl7cmV0dXJuIGZ1bmN0aW9uKCl7cGF0dGVybj1hcmd1bWVudHNbMF07aWYocGF0dGVybi5jaGFyQXQoMCkhPT0nXicpcGF0dGVybj0nXicrcGF0dGVybjt2YXIgYXJncz1bcGF0dGVybl07Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKylhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtyZXR1cm4gc2VhcmNoX2Z1bmMuYXBwbHkobnVsbCxhcmdzKTt9O30pKG9iai5zZWFyY2gpO3JldHVybiBvYmo7fSkoKTs=',
'/libs/builtins.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgb2JqPXtfX2NsYXNzX186JE1vZHVsZURpY3QsX19uYW1lX186J2J1aWx0aW5zJ307dmFyIGJ1aWx0aW5fbmFtZXM9WydBcml0aG1ldGljRXJyb3InLCdBc3NlcnRpb25FcnJvcicsJ0F0dHJpYnV0ZUVycm9yJywnQmFzZUV4Y2VwdGlvbicsJ0Jsb2NraW5nSU9FcnJvcicsJ0Jyb2tlblBpcGVFcnJvcicsJ0J1ZmZlckVycm9yJywnQnl0ZXNXYXJuaW5nJywnQ2hpbGRQcm9jZXNzRXJyb3InLCdDb25uZWN0aW9uQWJvcnRlZEVycm9yJywnQ29ubmVjdGlvbkVycm9yJywnQ29ubmVjdGlvblJlZnVzZWRFcnJvcicsJ0Nvbm5lY3Rpb25SZXNldEVycm9yJywnRGVwcmVjYXRpb25XYXJuaW5nJywnRU9GRXJyb3InLCdFbGxpcHNpcycsJ0Vudmlyb25tZW50RXJyb3InLCdFeGNlcHRpb24nLCdGYWxzZScsJ0ZpbGVFeGlzdHNFcnJvcicsJ0ZpbGVOb3RGb3VuZEVycm9yJywnRmxvYXRpbmdQb2ludEVycm9yJywnRnV0dXJlV2FybmluZycsJ0dlbmVyYXRvckV4aXQnLCdJT0Vycm9yJywnSW1wb3J0RXJyb3InLCdJbXBvcnRXYXJuaW5nJywnSW5kZW50YXRpb25FcnJvcicsJ0luZGV4RXJyb3InLCdJbnRlcnJ1cHRlZEVycm9yJywnSXNBRGlyZWN0b3J5RXJyb3InLCdLZXlFcnJvcicsJ0tleWJvYXJkSW50ZXJydXB0JywnTG9va3VwRXJyb3InLCdNZW1vcnlFcnJvcicsJ05hbWVFcnJvcicsJ05vbmUnLCdOb3RBRGlyZWN0b3J5RXJyb3InLCdOb3RJbXBsZW1lbnRlZCcsJ05vdEltcGxlbWVudGVkRXJyb3InLCdPU0Vycm9yJywnT3ZlcmZsb3dFcnJvcicsJ1BlbmRpbmdEZXByZWNhdGlvbldhcm5pbmcnLCdQZXJtaXNzaW9uRXJyb3InLCdQcm9jZXNzTG9va3VwRXJyb3InLCdSZWZlcmVuY2VFcnJvcicsJ1Jlc291cmNlV2FybmluZycsJ1J1bnRpbWVFcnJvcicsJ1J1bnRpbWVXYXJuaW5nJywnU3RvcEl0ZXJhdGlvbicsJ1N5bnRheEVycm9yJywnU3ludGF4V2FybmluZycsJ1N5c3RlbUVycm9yJywnU3lzdGVtRXhpdCcsJ1RhYkVycm9yJywnVGltZW91dEVycm9yJywnVHJ1ZScsJ1R5cGVFcnJvcicsJ1VuYm91bmRMb2NhbEVycm9yJywnVW5pY29kZURlY29kZUVycm9yJywnVW5pY29kZUVuY29kZUVycm9yJywnVW5pY29kZUVycm9yJywnVW5pY29kZVRyYW5zbGF0ZUVycm9yJywnVW5pY29kZVdhcm5pbmcnLCdVc2VyV2FybmluZycsJ1ZhbHVlRXJyb3InLCdXYXJuaW5nJywnV2luZG93c0Vycm9yJywnWmVyb0RpdmlzaW9uRXJyb3InLCdfJywnX19idWlsZF9jbGFzc19fJywnX19kZWJ1Z19fJywnX19kb2NfXycsJ19faW1wb3J0X18nLCdfX25hbWVfXycsJ19fcGFja2FnZV9fJywnYWJzJywnYWxsJywnYW55JywnYXNjaWknLCdiaW4nLCdib29sJywnYnl0ZWFycmF5JywnYnl0ZXMnLCdjYWxsYWJsZScsJ2NocicsJ2NsYXNzbWV0aG9kJywnY29tcGlsZScsJ2NvbXBsZXgnLCdjb3B5cmlnaHQnLCdjcmVkaXRzJywnZGVsYXR0cicsJ2RpY3QnLCdkaXInLCdkaXZtb2QnLCdlbnVtZXJhdGUnLCdldmFsJywnZXhlYycsJ2V4aXQnLCdmaWx0ZXInLCdmbG9hdCcsJ2Zvcm1hdCcsJ2Zyb3plbnNldCcsJ2dldGF0dHInLCdnbG9iYWxzJywnaGFzYXR0cicsJ2hhc2gnLCdoZWxwJywnaGV4JywnaWQnLCdpbnB1dCcsJ2ludCcsJ2lzaW5zdGFuY2UnLCdpc3N1YmNsYXNzJywnaXRlcicsJ2xlbicsJ2xpY2Vuc2UnLCdsaXN0JywnbG9jYWxzJywnbWFwJywnbWF4JywnbWVtb3J5dmlldycsJ21pbicsJ25leHQnLCdvYmplY3QnLCdvY3QnLCdvcGVuJywnb3JkJywncG93JywncHJpbnQnLCdwcm9wZXJ0eScsJ3F1aXQnLCdyYW5nZScsJ3JlcHInLCdyZXZlcnNlZCcsJ3JvdW5kJywnc2V0Jywnc2V0YXR0cicsJ3NsaWNlJywnc29ydGVkJywnc3RhdGljbWV0aG9kJywnc3RyJywnc3VtJywnc3VwZXInLCd0dXBsZScsJ3R5cGUnLCd2YXJzJywnemlwJ107Zm9yKHZhciBpPTA7aTxidWlsdGluX25hbWVzLmxlbmd0aDtpKyspdHJ5e29ialtidWlsdGluX25hbWVzW2ldXT1ldmFsKGJ1aWx0aW5fbmFtZXNbaV0pO31jYXRjaChlcnIpe31yZXR1cm4gb2JqO30pKCk7',
'/libs/json.js':'ZnVuY3Rpb24gX3B5KG9iail7aWYob2JqPT09bnVsbClyZXR1cm4gTm9uZTtpZihpc2luc3RhbmNlKG9iaixsaXN0KSl7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXJlcy5wdXNoKF9weShvYmpbaV0pKTtyZXR1cm4gcmVzO31pZihvYmouX19jbGFzc19fIT09dW5kZWZpbmVkKXtpZihvYmouX19jbGFzc19fPT09bGlzdClmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKW9ialtpXT1fcHkob2JqW2ldKTtyZXR1cm4gb2JqO31pZih0eXBlb2Ygb2JqPT09J29iamVjdCcmJm9iai5fX2NsYXNzX189PT11bmRlZmluZWQpe3ZhciByZXM9ZGljdCgpO2Zvcih2YXIgYXR0ciBpbiBvYmopZ2V0YXR0cihyZXMsJ19fc2V0aXRlbV9fJykoYXR0cixfcHkob2JqW2F0dHJdKSk7cmV0dXJuIHJlczt9cmV0dXJuIEpTT2JqZWN0KG9iaik7fWZ1bmN0aW9uIF9qcyhvYmope2lmKGlzaW5zdGFuY2Uob2JqLFtpbnQsc3RyXSkpcmV0dXJuIG9iajtlbHNlIGlmKG9iaj09PU5vbmUpcmV0dXJuIG51bGw7ZWxzZSBpZihvYmo9PT1UcnVlKXJldHVybiB0cnVlO2Vsc2UgaWYob2JqPT09RmFsc2UpcmV0dXJuIGZhbHNlO2Vsc2UgaWYoaXNpbnN0YW5jZShvYmosZmxvYXQpKXJldHVybiBvYmoudmFsdWU7ZWxzZSBpZihpc2luc3RhbmNlKG9iaixbbGlzdCx0dXBsZV0pKXt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspcmVzLnB1c2goX2pzKG9ialtpXSkpO3JldHVybiByZXM7fWVsc2UgaWYoaXNpbnN0YW5jZShvYmosZGljdCkpe3ZhciByZXM9bmV3IE9iamVjdCgpO2Zvcih2YXIgaT0wO2k8b2JqLiRrZXlzLmxlbmd0aDtpKyspcmVzW19qcyhvYmouJGtleXNbaV0pXT1fanMob2JqLiR2YWx1ZXNbaV0pO3JldHVybiByZXM7fWVsc2UgdGhyb3cgVHlwZUVycm9yKHN0cihvYmopKycgaXMgbm90IEpTT04gc2VyaWFsaXphYmxlJyk7fSRtb2R1bGU9e2xvYWRzOmZ1bmN0aW9uKGpzb25fb2JqKXtyZXR1cm4gX3B5KEpTT04ucGFyc2UoanNvbl9vYmopKTt9LGR1bXBzOmZ1bmN0aW9uKG9iail7cmV0dXJuIEpTT04uc3RyaW5naWZ5KF9qcyhvYmopKTt9fTs=',
'/libs/_timer.js':'JG1vZHVsZT17X19uYW1lX186J3RpbWVyJyxjbGVhcl9pbnRlcnZhbDpmdW5jdGlvbihpbnRfaWQpe3dpbmRvdy5jbGVhckludGVydmFsKGludF9pZCk7fSxjbGVhcl90aW1lb3V0OmZ1bmN0aW9uKHRpbWVvdXRfaWQpe3dpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dF9pZCk7fSxzZXRfaW50ZXJ2YWw6ZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7cmV0dXJuIGludCh3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuYyxpbnRlcnZhbCkpO30sc2V0X3RpbWVvdXQ6ZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7d2luZG93LnNldFRpbWVvdXQoZnVuYyxpbnRlcnZhbCk7fX07',
'/libs/_svg.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXskc3ZnTlM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIjskeGxpbmtOUz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI7ZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXt2YXIgJGk9bnVsbDt2YXIgJG9iaj10aGlzO3ZhciBvYmo9JERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCRzdmdOUyx0YWdfbmFtZSkpO2lmKGFyZ3MhPXVuZGVmaW5lZCYmYXJncy5sZW5ndGg+MCl7JHN0YXJ0PTA7JGZpcnN0PWFyZ3NbMF07aWYoJGZpcnN0Ll9fY2xhc3NfXyE9PSRLdyl7JHN0YXJ0PTE7aWYoaXNpbnN0YW5jZSgkZmlyc3QsW3N0cixpbnQsZmxvYXRdKSl7dHh0PWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cigkZmlyc3QpKTtvYmouZWx0LmFwcGVuZENoaWxkKHR4dCk7fWVsc2UgaWYoJGZpcnN0Ll9fY2xhc3NfXz09PSRUYWdTdW1EaWN0KWZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKylvYmouZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5jaGlsZHJlblskaV0pO2Vsc2UgdHJ5e29iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmVsdCk7fWNhdGNoKGVycil7JHJhaXNlKCdWYWx1ZUVycm9yJywnd3JvbmcgZWxlbWVudCAnKyRmaXJzdCk7fX1mb3IoJGk9JHN0YXJ0OyRpPGFyZ3MubGVuZ3RoOyRpKyspeyRhcmc9YXJnc1skaV07aWYoJGFyZyYmJGFyZy5fX2NsYXNzX189PT0kS3cpaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PSJvbiIpZXZhbCgnRE9NTm9kZS5iaW5kKG9iaiwiJyskYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHIoMikrJyIsZnVuY3Rpb24oKXsnKyRhcmcudmFsdWUrJ30pJyk7ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKT09InN0eWxlIilET01Ob2RlLnNldF9zdHlsZShvYmosJGFyZy52YWx1ZSk7ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCJocmVmIikhPT0tMSlvYmouZWx0LnNldEF0dHJpYnV0ZU5TKCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiwiaHJlZiIsJGFyZy52YWx1ZSk7ZWxzZSBpZigkYXJnLnZhbHVlIT09ZmFsc2Upb2JqLmVsdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCRhcmcubmFtZS5yZXBsYWNlKCdfJywnLScpLCRhcmcudmFsdWUpO319cmV0dXJuIG9iajt9dmFyICRzdmdfdGFncz1bJ2EnLCdhbHRHbHlwaCcsJ2FsdEdseXBoRGVmJywnYWx0R2x5cGhJdGVtJywnYW5pbWF0ZScsJ2FuaW1hdGVDb2xvcicsJ2FuaW1hdGVNb3Rpb24nLCdhbmltYXRlVHJhbnNmb3JtJywnY2lyY2xlJywnY2xpcFBhdGgnLCdjb2xvcl9wcm9maWxlJywnY3Vyc29yJywnZGVmcycsJ2Rlc2MnLCdlbGxpcHNlJywnZmVCbGVuZCcsJ2cnLCdpbWFnZScsJ2xpbmUnLCdsaW5lYXJHcmFkaWVudCcsJ21hcmtlcicsJ21hc2snLCdwYXRoJywncGF0dGVybicsJ3BvbHlnb24nLCdwb2x5bGluZScsJ3JhZGlhbEdyYWRpZW50JywncmVjdCcsJ3N0b3AnLCdzdmcnLCd0ZXh0JywndHJlZicsJ3RzcGFuJywndXNlJ107JHN2Zz1mdW5jdGlvbigpe3JldHVybiAkU1ZHVGFnKCdYJyxhcmd1bWVudHMpO307JHN2Zys9Jyc7dmFyIG9iaj1uZXcgT2JqZWN0KCk7Zm9yKHZhciBpPTA7aTwkc3ZnX3RhZ3MubGVuZ3RoO2krKyl7dmFyIHRhZz0kc3ZnX3RhZ3NbaV07ZXZhbCgnb2JqLicrdGFnKyc9Jyskc3ZnLnJlcGxhY2UoJ1gnLHRhZykpO31vYmouX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fTtyZXR1cm4gb2JqO30pKCk7',
'/libs/javascript.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmdW5jdGlvbiAkYXBwbHlUb0NvbnN0cnVjdG9yKGNvbnN0cnVjdG9yLGFyZ0FycmF5KXt2YXIgYXJncz1bbnVsbF0uY29uY2F0KGFyZ0FycmF5KTt2YXIgZmFjdG9yeUZ1bmN0aW9uPWNvbnN0cnVjdG9yLmJpbmQuYXBwbHkoY29uc3RydWN0b3IsYXJncyk7cmV0dXJuIG5ldyBmYWN0b3J5RnVuY3Rpb24oKTt9JEpTQ29uc3RydWN0b3JEaWN0PXtfX2NsYXNzX186JHR5cGUsX19uYW1lX186J0pTQ29uc3RydWN0b3InfTskSlNDb25zdHJ1Y3RvckRpY3QuX19jYWxsX189ZnVuY3Rpb24oc2VsZil7dmFyIGFyZ3M9W107Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7dmFyIGFyZz1hcmd1bWVudHNbaV07aWYoYXJnJiYoYXJnLl9fY2xhc3NfXz09PSRKU09iamVjdERpY3R8fGFyZy5fX2NsYXNzX189PT0kSlNDb25zdHJ1Y3RvckRpY3QpKWFyZ3MucHVzaChhcmcuanMpO2Vsc2UgaWYoaXNpbnN0YW5jZShhcmcsZGljdCkpe3ZhciBvYmo9bmV3IE9iamVjdCgpO2Zvcih2YXIgaj0wO2o8YXJnLiRrZXlzLmxlbmd0aDtqKyspb2JqW2FyZy4ka2V5c1tqXV09YXJnLiR2YWx1ZXNbal07YXJncy5wdXNoKG9iaik7fWVsc2UgYXJncy5wdXNoKGFyZyk7fXZhciByZXM9JGFwcGx5VG9Db25zdHJ1Y3RvcihzZWxmLmpzLGFyZ3MpO3JldHVybiBKU09iamVjdChyZXMpO307JEpTQ29uc3RydWN0b3JEaWN0Ll9fbXJvX189WyRKU0NvbnN0cnVjdG9yRGljdCwkT2JqZWN0RGljdF07ZnVuY3Rpb24gSlNDb25zdHJ1Y3RvcihvYmope3JldHVybntfX2NsYXNzX186JEpTQ29uc3RydWN0b3JEaWN0LGpzOm9ian07fUpTQ29uc3RydWN0b3IuX19jbGFzc19fPSRmYWN0b3J5O0pTQ29uc3RydWN0b3IuJGRpY3Q9JEpTQ29uc3RydWN0b3JEaWN0O2Z1bmN0aW9uICRKU09iamVjdChqcyl7dGhpcy5qcz1qczt0aGlzLiRkaWN0PWpzO3RoaXMuX19jbGFzc19fPSRKU09iamVjdERpY3Q7dGhpcy5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8b2JqZWN0ICdKU09iamVjdCcgd3JhcHMgIit0aGlzLmpzKyI+Ijt9O3RoaXMudG9TdHJpbmc9dGhpcy5fX3N0cl9fO30kSlNPYmplY3REaWN0PXtfX2NsYXNzX186JHR5cGUsX19uYW1lX186J0pTT2JqZWN0Jyx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiAnKEpTT2JqZWN0KSc7fX07JEpTT2JqZWN0RGljdC5fX2Jvb2xfXz1mdW5jdGlvbihzZWxmKXtyZXR1cm4gbmV3IEJvb2xlYW4oc2VsZi5qcykudmFsdWVPZigpO307JEpTT2JqZWN0RGljdC5fX2dldGF0dHJpYnV0ZV9fPWZ1bmN0aW9uKG9iaixhdHRyKXtpZihvYmouanM9PT1udWxsKXJldHVybiAkT2JqZWN0RGljdC5fX2dldGF0dHJpYnV0ZV9fKE5vbmUsYXR0cik7aWYoYXR0cj09PSdfX2NsYXNzX18nKXJldHVybiAkSlNPYmplY3REaWN0O2lmKG9ialsnZ2V0XycrYXR0cl0hPT11bmRlZmluZWQpe3ZhciByZXM9b2JqWydnZXRfJythdHRyXTtpZih0eXBlb2YgcmVzPT09J2Z1bmN0aW9uJylyZXR1cm4oZnVuY3Rpb24ob2JqKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gb2JqWydnZXRfJythdHRyXS5hcHBseShvYmosYXJndW1lbnRzKTt9O30pKG9iaik7cmV0dXJuIG9ialsnZ2V0XycrYXR0cl07fWVsc2UgaWYob2JqLmpzW2F0dHJdIT09dW5kZWZpbmVkKWlmKHR5cGVvZiBvYmouanNbYXR0cl09PSdmdW5jdGlvbicpe3ZhciByZXM9ZnVuY3Rpb24oKXt2YXIgYXJncz1bXSxhcmc7Zm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJnPWFyZ3VtZW50c1tpXTtpZihhcmcmJihhcmcuX19jbGFzc19fPT09JEpTT2JqZWN0RGljdHx8YXJnLl9fY2xhc3NfXz09PSRKU0NvbnN0cnVjdG9yRGljdCkpYXJncy5wdXNoKGFyZy5qcyk7ZWxzZSBhcmdzLnB1c2goYXJnKTt9dmFyIHJlcz1vYmouanNbYXR0cl0uYXBwbHkob2JqLmpzLGFyZ3MpO2lmKHR5cGVvZiByZXM9PSdvYmplY3QnKXJldHVybiBKU09iamVjdChyZXMpO2Vsc2UgaWYocmVzPT09dW5kZWZpbmVkKXJldHVybiBOb25lO2Vsc2UgcmV0dXJuICRKUzJQeShyZXMpO307cmVzLl9fcmVwcl9fPWZ1bmN0aW9uKCl7cmV0dXJuICc8ZnVuY3Rpb24gJythdHRyKyc+Jzt9O3Jlcy5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICc8ZnVuY3Rpb24gJythdHRyKyc+Jzt9O3JldHVybiByZXM7fWVsc2UgcmV0dXJuICRKUzJQeShvYmouanNbYXR0cl0pO2Vsc2UgaWYob2JqLmpzPT09d2luZG93JiZhdHRyPT09JyQkbG9jYXRpb24nKXJldHVybiAkTG9jYXRpb24oKTt2YXIgcmVzO3ZhciBtcm89WyRKU09iamVjdERpY3QsJE9iamVjdERpY3RdO2Zvcih2YXIgaT0wO2k8bXJvLmxlbmd0aDtpKyspe3ZhciB2PW1yb1tpXVthdHRyXTtpZih2IT09dW5kZWZpbmVkKXtyZXM9djticmVhazt9fWlmKHJlcyE9PXVuZGVmaW5lZCl7aWYodHlwZW9mIHJlcz09PSdmdW5jdGlvbicpcmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGFyZ3M9W29ial0sYXJnO2Zvcih2YXIgaT0wO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe2FyZz1hcmd1bWVudHNbaV07aWYoYXJnJiYoYXJnLl9fY2xhc3NfXz09PSRKU09iamVjdERpY3R8fGFyZy5fX2NsYXNzX189PT0kSlNDb25zdHJ1Y3RvckRpY3QpKWFyZ3MucHVzaChhcmcuanMpO2Vsc2UgYXJncy5wdXNoKGFyZyk7fXJldHVybiByZXMuYXBwbHkob2JqLGFyZ3MpO307cmV0dXJuICRKUzJQeShyZXMpO31lbHNlIHRocm93IEF0dHJpYnV0ZUVycm9yKCJubyBhdHRyaWJ1dGUgIithdHRyKycgZm9yICcrdGhpcyk7fTskSlNPYmplY3REaWN0Ll9fZ2V0aXRlbV9fPWZ1bmN0aW9uKHNlbGYscmFuayl7dHJ5e3JldHVybiBnZXRhdHRyKHNlbGYuanMsJ19fZ2V0aXRlbV9fJykocmFuayk7fWNhdGNoKGVycil7Y29uc29sZS5sb2coJ2VyciBpbiBKU09iamVjdC5fX2dldGl0ZW1fXyA6ICcrZXJyKTt0aHJvdyBBdHRyaWJ1dGVFcnJvcihzZWxmKycgaGFzIG5vIGF0dHJpYnV0ZSBfX2dldGl0ZW1fXycpO319OyRKU09iamVjdERpY3QuX19pdGVyX189ZnVuY3Rpb24oc2VsZil7dmFyIHJlcz17X19jbGFzc19fOkpTT2JqZWN0LF9fZ2V0YXR0cl9fOmZ1bmN0aW9uKGF0dHIpe3JldHVybiByZXNbYXR0cl07fSxfX2l0ZXJfXzpmdW5jdGlvbigpe3JldHVybiByZXM7fSxfX25leHRfXzpmdW5jdGlvbigpe3Jlcy5jb3VudGVyKys7aWYocmVzLmNvdW50ZXI8c2VsZi5qcy5sZW5ndGgpcmV0dXJuIHNlbGYuanNbcmVzLmNvdW50ZXJdO2Vsc2UgdGhyb3cgU3RvcEl0ZXJhdGlvbigiU3RvcEl0ZXJhdGlvbiIpO30sX19yZXByX186ZnVuY3Rpb24oKXtyZXR1cm4gIjxKU09iamVjdCBpdGVyYXRvciBvYmplY3Q+Ijt9LF9fc3RyX186ZnVuY3Rpb24oKXtyZXR1cm4gIjxKU09iamVjdCBpdGVyYXRvciBvYmplY3Q+Ijt9LGNvdW50ZXI6LTF9O3JldHVybiByZXM7fTskSlNPYmplY3REaWN0Ll9fbGVuX189ZnVuY3Rpb24oc2VsZil7dHJ5e3JldHVybiBnZXRhdHRyKHNlbGYuanMsJ19fbGVuX18nKSgpO31jYXRjaChlcnIpe2NvbnNvbGUubG9nKCdlcnIgaW4gSlNPYmplY3QuX19sZW5fXyA6ICcrZXJyKTt0aHJvdyBBdHRyaWJ1dGVFcnJvcih0aGlzKycgaGFzIG5vIGF0dHJpYnV0ZSBfX2xlbl9fJyk7fX07JEpTT2JqZWN0RGljdC5fX21yb19fPVskSlNPYmplY3REaWN0LCRPYmplY3REaWN0XTskSlNPYmplY3REaWN0Ll9fc2V0YXR0cl9fPWZ1bmN0aW9uKHNlbGYsYXR0cix2YWx1ZSl7aWYoaXNpbnN0YW5jZSh2YWx1ZSxKU09iamVjdCkpc2VsZi5qc1thdHRyXT12YWx1ZS5qcztlbHNlIHNlbGYuanNbYXR0cl09dmFsdWU7fTtmdW5jdGlvbiBKU09iamVjdChvYmope2lmKG9iaj09PW51bGwpcmV0dXJuIG5ldyAkSlNPYmplY3Qob2JqKTtpZihvYmouX19jbGFzc19fPT09JExpc3REaWN0KWlmKG9iai5fX2JyeXRob25fXylyZXR1cm4gb2JqO2Vsc2UgcmV0dXJuIG5ldyAkSlNPYmplY3Qob2JqKTtpZihvYmouX19jbGFzc19fIT09dW5kZWZpbmVkJiYodHlwZW9mIG9iaiE9PSdmdW5jdGlvbicpKXJldHVybiBvYmo7cmV0dXJuIG5ldyAkSlNPYmplY3Qob2JqKTt9SlNPYmplY3QuX19jbGFzc19fPSRmYWN0b3J5O0pTT2JqZWN0LiRkaWN0PSRKU09iamVjdERpY3Q7cmV0dXJue0pTT2JqZWN0OkpTT2JqZWN0LEpTQ29uc3RydWN0b3I6SlNDb25zdHJ1Y3Rvcn07fSkoKTs=',
'/libs/time.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxfX25hbWVfXzondGltZScsY3RpbWU6ZnVuY3Rpb24odGltZXN0YW1wKXtpZih0aW1lc3RhbXA9PT11bmRlZmluZWQpdGltZXN0YW1wPWludChuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKTt2YXIgZD1uZXcgRGF0ZSgwKTtkLnNldFVUQ1NlY29uZHModGltZXN0YW1wKTtyZXR1cm4gZC50b1VUQ1N0cmluZygpO30sZ210aW1lOmZ1bmN0aW9uKCl7dmFyIGQ9bmV3IERhdGUoKTtyZXR1cm4gbGlzdChbZC5nZXRGdWxsWWVhcigpLGQuZ2V0TW9udGgoKSsxLGQuZ2V0RGF0ZSgpLGQuZ2V0SG91cnMoKSxkLmdldE1pbnV0ZXMoKSxkLmdldFNlY29uZHMoKSxkLmdldERheSgpLDAsMF0pO30scGVyZl9jb3VudGVyOmZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDAuMCk7fSxsb2NhbHRpbWU6ZnVuY3Rpb24oc2Vjcyl7dmFyIGQ9bmV3IERhdGUoKTtpZihzZWNzPT09dW5kZWZpbmVkfHxzZWNzPT09Tm9uZSlyZXR1cm4gZC5nZXRUaW1lKCk7dmFyIGphbj1uZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksMCwxKTt2YXIganVsPW5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSw2LDEpO3ZhciBkc3Q9aW50KGQuZ2V0VGltZXpvbmVPZmZzZXQoKTxNYXRoLm1heChqYW4uZ2V0VGltZXpvbmVPZmZzZXQoKSxqdWwuZ2V0VGltZXpvbmVPZmZzZXQoKSkpO3JldHVybiBsaXN0KFtkLmdldEZ1bGxZZWFyKCksZC5nZXRNb250aCgpKzEsZC5nZXREYXRlKCksZC5nZXRIb3VycygpLGQuZ2V0TWludXRlcygpLGQuZ2V0U2Vjb25kcygpLGQuZ2V0RGF5KCksMCxkc3RdKTt9LHRpbWU6ZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQoKG5ldyBEYXRlKCkuZ2V0VGltZSgpKS8xMDAwKTt9LHN0cmZ0aW1lOmZ1bmN0aW9uKGZvcm1hdCxhcmcpe2Z1bmN0aW9uIG5zKGFyZyxuYil7dmFyIHJlcz1hcmcudG9TdHJpbmcoKTt3aGlsZShyZXMubGVuZ3RoPG5iKXJlcz0nMCcrcmVzO3JldHVybiByZXM7fWlmKGFyZyl2YXIgb2JqPW5ldyBEYXRlKGFyZ1swXSxhcmdbMV0tMSxhcmdbMl0sYXJnWzNdLGFyZ1s0XSxhcmdbNV0sYXJnWzZdKTtlbHNlIHZhciBvYmo9bmV3IERhdGUoKTt2YXIgYWJiX3dlZWtkYXlzPVsnU3UnLCdNbycsJ1R1JywnV2UnLCdUaCcsJ0ZyJywnU2EnXTt2YXIgZnVsbF93ZWVrZGF5cz1bJ1N1bmRheScsJ01vbmRheScsJ1R1ZXNkYXknLCdXZWRuZXNkYXknLCdUaHVyc2RheScsJ0ZyaWRheScsJ1NhdHVyZGF5J107dmFyIGFiYl9tb250aHM9WydKYW4nLCdGZWInLCdNYXInLCdBcHInLCdNYXknLCdKdW4nLCdKdWwnLCdBdWcnLCdTZXAnLCdPY3QnLCdOb3YnLCdEZWMnXTt2YXIgZnVsbF9tb250aHM9WydKYW51YXJ5JywnRmVicnVhcnknLCdNYXJjaCcsJ0FwcmlsJywnTWF5JywnSnVuZScsJ0p1bHknLCdBdWd1c3QnLCdTZXB0ZW1iZXInLCdPY3RvYmVyJywnTm92ZW1iZXInLCdEZWNlbWJlciddO3ZhciByZXM9Zm9ybWF0O3Jlcz1yZXMucmVwbGFjZSgvJUgvLG5zKG9iai5nZXRIb3VycygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVNLyxucyhvYmouZ2V0TWludXRlcygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVTLyxucyhvYmouZ2V0U2Vjb25kcygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVZLyxucyhvYmouZ2V0RnVsbFllYXIoKSw0KSk7cmVzPXJlcy5yZXBsYWNlKC8leS8sbnMob2JqLmdldEZ1bGxZZWFyKCksNCkuc3Vic3RyKDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVtLyxucyhvYmouZ2V0TW9udGgoKSsxLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVkLyxucyhvYmouZ2V0RGF0ZSgpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVhLyxhYmJfd2Vla2RheXNbb2JqLmdldERheSgpXSk7cmVzPXJlcy5yZXBsYWNlKC8lQS8sZnVsbF93ZWVrZGF5c1tvYmouZ2V0RGF5KCldKTtyZXM9cmVzLnJlcGxhY2UoLyViLyxhYmJfbW9udGhzW29iai5nZXRNb250aCgpXSk7cmVzPXJlcy5yZXBsYWNlKC8lQi8sZnVsbF9tb250aHNbb2JqLmdldE1vbnRoKCldKTtyZXR1cm4gcmVzO30sc3RydWN0X3RpbWU6ZnVuY3Rpb24oYXJnKXtpZighaXNpbnN0YW5jZShhcmcsW3R1cGxlLGxpc3RdKSl0aHJvdyBUeXBlRXJyb3IoJ2NvbnN0cnVjdG9yIHJlcXVpcmVzIGEgc2VxdWVuY2UnKTtpZihsZW4oYXJnKSE9OSl0aHJvdyBUeXBlRXJyb3IoInRpbWUuc3RydWN0X3RpbWUoKSB0YWtlcyBhIDktc2VxdWVuY2UgKCIrbGVuKGFyZykrIi1zZXF1ZW5jZSBnaXZlbiIpO3ZhciByZXM9YXJnO3ZhciBuYW1lcz1bJ3RtX3llYXInLCd0bV9tb24nLCd0bV9tZGF5JywndG1faG91cicsJ3RtX21pbicsJ3RtX3NlYycsJ3RtX3dkYXknLCd0bV95ZGF5JywndG1faXNkc3QnLCd0bV96b25lJywndG1fZ210b2ZmJ107cmVzLl9fZ2V0YXR0cl9fPWZ1bmN0aW9uKGF0dHIpe3ZhciBpeD1uYW1lcy5pbmRleE9mKGF0dHIpO2lmKGl4Pi0xKXJldHVybiBhcmcuX19nZXRpdGVtX18oaXgpO2lmKHR5cGVvZiByZXNbYXR0cl09PT0nZnVuY3Rpb24nKXJldHVybihmdW5jdGlvbihvYmope3JldHVybiBmdW5jdGlvbigpe3JldHVybiBvYmpbYXR0cl0uYXBwbHkob2JqLGFyZ3VtZW50cyk7fTt9KShyZXMpO2Vsc2UgaWYocmVzW2F0dHJdIT09dW5kZWZpbmVkKXJldHVybiByZXNbYXR0cl07ZWxzZSB0aHJvdyBBdHRyaWJ1dGVFcnJvcigib2JqZWN0IGhhcyBubyBhdHRyaWJ1dGUgJyIrYXR0cisiJyIpO307cmV0dXJuIHJlczt9fTs=',
'/libs/_websocket.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXskV2ViU29ja2V0RGljdD17X19jbGFzc19fOiR0eXBlLF9fbmFtZV9fOidXZWJTb2NrZXQnfTskV2ViU29ja2V0RGljdC5iaW5kPWZ1bmN0aW9uKHNlbGYsZXZlbnQsY2FsbGJhY2spe3NlbGYuJHdzWydvbicrZXZlbnRdPWNhbGxiYWNrO307JFdlYlNvY2tldERpY3Quc2VuZD1mdW5jdGlvbihzZWxmLGRhdGEpe3NlbGYuJHdzLnNlbmQoZGF0YSk7fTskV2ViU29ja2V0RGljdC5jbG9zZT1mdW5jdGlvbihzZWxmKXtzZWxmLiR3cy5jbG9zZSgpO307JFdlYlNvY2tldERpY3QuX19tcm9fXz1bJFdlYlNvY2tldERpY3QsJE9iamVjdERpY3RdO2Z1bmN0aW9uIHdlYnNvY2tldChob3N0KXt2YXIgJHNvY2tldD1uZXcgV2ViU29ja2V0KGhvc3QpO3ZhciByZXM9e19fY2xhc3NfXzokV2ViU29ja2V0RGljdCwkd3M6JHNvY2tldH07cmVzLiR3ZWJzb2NrZXQ9JHNvY2tldDtyZXR1cm4gcmVzO313ZWJzb2NrZXQuX19jbGFzc19fPSRmYWN0b3J5O3dlYnNvY2tldC4kZGljdD0kV2ViU29ja2V0RGljdDtyZXR1cm57d2Vic29ja2V0OndlYnNvY2tldH07fSkoKTs=',
'/libs/_ajax.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXskWE1MSHR0cERpY3Q9e19fY2xhc3NfXzokdHlwZSxfX25hbWVfXzonWE1MSHR0cCd9OyRYTUxIdHRwRGljdC5fX2dldGF0dHJpYnV0ZV9fPWZ1bmN0aW9uKHNlbGYsYXR0cil7aWYoWydoZWFkZXJzJywndGV4dCcsJ3htbCddLmluZGV4T2YoYXR0cik+LTEpcmV0dXJuICRYTUxIdHRwRGljdFthdHRyXShzZWxmKTtyZXR1cm4gJE9iamVjdERpY3QuX19nZXRhdHRyaWJ1dGVfXyhzZWxmLGF0dHIpO307JFhNTEh0dHBEaWN0Ll9fbXJvX189WyRYTUxIdHRwRGljdCwkT2JqZWN0RGljdF07JFhNTEh0dHBEaWN0Ll9fcmVwcl9fPWZ1bmN0aW9uKHNlbGYpe3JldHVybiAnPG9iamVjdCBYTUxIdHRwPic7fTskWE1MSHR0cERpY3QuX19zdHJfXz0kWE1MSHR0cERpY3QudG9TdHJpbmc9JFhNTEh0dHBEaWN0Ll9fcmVwcl9fOyRYTUxIdHRwRGljdC50ZXh0PWZ1bmN0aW9uKHNlbGYpe3JldHVybiBzZWxmLnJlc3BvbnNlVGV4dDt9OyRYTUxIdHRwRGljdC54bWw9ZnVuY3Rpb24oc2VsZil7cmV0dXJuICREb21PYmplY3Qoc2VsZi5yZXNwb25zZVhNTCk7fTskWE1MSHR0cERpY3QuaGVhZGVycz1mdW5jdGlvbihzZWxmKXtyZXR1cm4gbGlzdChzZWxmLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnNwbGl0KCdcbicpKTt9OyRYTUxIdHRwRGljdC5nZXRfaGVhZGVyPWZ1bmN0aW9uKCl7dmFyIHJlcW9iaj1zZWxmO3JldHVybiBmdW5jdGlvbihoZWFkZXIpe3JldHVybiByZXFvYmouZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKTt9O307JEFqYXhEaWN0PXtfX2NsYXNzX186JHR5cGUsX19uYW1lX186J2FqYXgnfTskQWpheERpY3QuX19tcm9fXz1bJEFqYXhEaWN0LCRPYmplY3REaWN0XTskQWpheERpY3QuX19yZXByX189ZnVuY3Rpb24oc2VsZil7cmV0dXJuICc8b2JqZWN0IEFqYXg+Jzt9OyRBamF4RGljdC5fX3N0cl9fPSRBamF4RGljdC50b1N0cmluZz0kQWpheERpY3QuX19yZXByX187JEFqYXhEaWN0LmJpbmQ9ZnVuY3Rpb24oc2VsZixldnQsZnVuYyl7c2VsZlsnb25fJytldnRdPWZ1bmM7fTskQWpheERpY3Qub3Blbj1mdW5jdGlvbihzZWxmLG1ldGhvZCx1cmwsYXN5bmMpe3NlbGYuJHhtbGh0dHAub3BlbihtZXRob2QsdXJsLGFzeW5jKTt9OyRBamF4RGljdC5zZW5kPWZ1bmN0aW9uKHNlbGYscGFyYW1zKXt2YXIgcmVzPScnO2lmKCFwYXJhbXN8fHBhcmFtcy4ka2V5cy5sZW5ndGg9PTApe3NlbGYuJHhtbGh0dHAuc2VuZCgpO3JldHVybjt9ZWxzZSBpZihpc2luc3RhbmNlKHBhcmFtcyxzdHIpKXJlcz1wYXJhbXM7ZWxzZSBpZihpc2luc3RhbmNlKHBhcmFtcyxkaWN0KSl7Zm9yKGk9MDtpPHBhcmFtcy4ka2V5cy5sZW5ndGg7aSsrKXJlcys9ZW5jb2RlVVJJQ29tcG9uZW50KHN0cihwYXJhbXMuJGtleXNbaV0pKSsnPScrZW5jb2RlVVJJQ29tcG9uZW50KHN0cihwYXJhbXMuJHZhbHVlc1tpXSkpKycmJztyZXM9cmVzLnN1YnN0cigwLHJlcy5sZW5ndGgtMSk7fWVsc2UgdGhyb3cgVHlwZUVycm9yKCJzZW5kKCkgYXJndW1lbnQgbXVzdCBiZSBzdHJpbmcgb3IgZGljdG9uYXJ5LCBub3QgJyIrc3RyKHBhcmFtcy5fX2NsYXNzX18pKyInIik7c2VsZi4keG1saHR0cC5zZW5kKHJlcyk7fTskQWpheERpY3Quc2V0X2hlYWRlcj1mdW5jdGlvbihzZWxmLGtleSx2YWx1ZSl7c2VsZi4keG1saHR0cC5zZXRSZXF1ZXN0SGVhZGVyKGtleSx2YWx1ZSk7fTskQWpheERpY3Quc2V0X3RpbWVvdXQ9ZnVuY3Rpb24oc2VsZixzZWNvbmRzLGZ1bmMpe3NlbGYuJHhtbGh0dHAuJHJlcXVlc3RUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2VsZi4keG1saHR0cC5hYm9ydCgpO2Z1bmMoKTt9LHNlY29uZHMqMTAwMCk7fTtmdW5jdGlvbiBhamF4KCl7dmFyIHJlcz17X19jbGFzc19fOiRBamF4RGljdH07aWYod2luZG93LlhNTEh0dHBSZXF1ZXN0KXZhciAkeG1saHR0cD1uZXcgWE1MSHR0cFJlcXVlc3QoKTtlbHNlIHZhciAkeG1saHR0cD1uZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTskeG1saHR0cC4kcmVxdWVzdFRpbWVyPW51bGw7JHhtbGh0dHAuX19jbGFzc19fPSRYTUxIdHRwRGljdDskeG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXt2YXIgc3RhdGU9dGhpcy5yZWFkeVN0YXRlO3ZhciByZXE9dGhpcy4kYWpheDt2YXIgdGltZXI9dGhpcy4kcmVxdWVzdFRpbWVyO3ZhciBvYmo9dGhpcztpZihzdGF0ZT09PTAmJidvbl91bmluaXRpYWxpemVkJyBpbiByZXEpcmVxLm9uX3VuaW5pdGlhbGl6ZWQob2JqKTtlbHNlIGlmKHN0YXRlPT09MSYmJ29uX2xvYWRpbmcnIGluIHJlcSlyZXEub25fbG9hZGluZyhvYmopO2Vsc2UgaWYoc3RhdGU9PT0yJiYnb25fbG9hZGVkJyBpbiByZXEpcmVxLm9uX2xvYWRlZChvYmopO2Vsc2UgaWYoc3RhdGU9PT0zJiYnb25faW50ZXJhY3RpdmUnIGluIHJlcSlyZXEub25faW50ZXJhY3RpdmUob2JqKTtlbHNlIGlmKHN0YXRlPT09NCYmJ29uX2NvbXBsZXRlJyBpbiByZXEpe2lmKHRpbWVyIT09bnVsbCl3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtyZXEub25fY29tcGxldGUob2JqKTt9fTskeG1saHR0cC4kYWpheD1yZXM7cmVzLiR4bWxodHRwPSR4bWxodHRwO3JldHVybiByZXM7fWFqYXguX19jbGFzc19fPSRmYWN0b3J5O2FqYXguJGRpY3Q9JEFqYXhEaWN0O3JldHVybnthamF4OmFqYXh9O30pKCk7',
'/libs/_browser.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxhbGVydDpmdW5jdGlvbihtZXNzYWdlKXt3aW5kb3cuYWxlcnQobWVzc2FnZSk7fSxjb25maXJtOmZ1bmN0aW9uKG1lc3NhZ2Upe3JldHVybiBKU09iamVjdCh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7fSxkb2M6JERPTU5vZGUoZG9jdW1lbnQpLG1vdXNlQ29vcmRzOmZ1bmN0aW9uKGV2KXtyZXR1cm4gSlNPYmplY3QoJG1vdXNlQ29vcmRzKGV2KSk7fSxwcm9tcHQ6ZnVuY3Rpb24obWVzc2FnZSxkZWZhdWx0X3ZhbHVlKXtyZXR1cm4gSlNPYmplY3Qod2luZG93LnByb21wdChtZXNzYWdlLGRlZmF1bHRfdmFsdWUpKTt9LHdpbjpKU09iamVjdCh3aW5kb3cpfTskbW9kdWxlLl9fY2xhc3NfXz0kbW9kdWxlOyRtb2R1bGUuX19zdHJfXz1mdW5jdGlvbigpe3JldHVybiAiPG1vZHVsZSAnYnJvd3Nlcic+Ijt9Ow==',
'/libs/random.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxyYW5kb206ZnVuY3Rpb24oKXtpZihhcmd1bWVudHMubGVuZ3RoPjApdGhyb3cgVHlwZUVycm9yKCJyYW5kb20oKSB0YWtlcyBubyBhcmd1bWVudHMgKCIrYXJndW1lbnRzLmxlbmd0aCsiIGdpdmVuKSIpO2Vsc2UgcmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpO30scmFuZGludDpmdW5jdGlvbihhLGIpe3JldHVybiBpbnQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihiLWErMSkrYSkpO30scmFuZHJhbmdlOmZ1bmN0aW9uKHN0YXJ0LHN0b3Asc3RlcCl7aWYoc3RlcD09PXVuZGVmaW5lZClzdGVwPTE7ZWxzZSBpZihzdGVwPT0wKXt9aWYoc3RvcD09PXVuZGVmaW5lZCl7c3RvcD1zdGFydDtzdGFydD0wO312YXIgd2lkdGg9c3RvcC1zdGFydDtpZihzdGVwPT0xJiZ3aWR0aD4wKXJldHVybiBzdGFydCtpbnQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKndpZHRoKSk7ZWxzZXt9dmFyIG47aWYoc3RlcD4wKW49TWF0aC5mbG9vcigod2lkdGgrc3RlcC0xKS9zdGVwKTtlbHNlIG49TWF0aC5mbG9vcigod2lkdGgrc3RlcCsxKS9zdGVwKTtyZXR1cm4gc3RhcnQrc3RlcCppbnQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKm4pKTt9LHNodWZmbGU6ZnVuY3Rpb24oeCxybmQpe2lmKHgubGVuZ3RoPD0xKXJldHVybiB4O2lmKHJuZD09PXVuZGVmaW5lZClybmQ9TWF0aC5yYW5kb207Zm9yKHZhciBqLG8saT14Lmxlbmd0aDtpO2o9cGFyc2VJbnQocm5kKCkqaSksbz14Wy0taV0seFtpXT14W2pdLHhbal09byk7fX07JG1vZHVsZS5fX2NsYXNzX189JG1vZHVsZTskbW9kdWxlLl9fc3RyX189ZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ3JhbmRvbSc+Ijt9Ow==',
'/libs/math.js':'dmFyIGZsb2F0X2NoZWNrPWZ1bmN0aW9uKHgpe2lmKGlzaW5zdGFuY2UoeCxmbG9hdCkpcmV0dXJuIHgudmFsdWU7cmV0dXJuIHg7fTt2YXIgaXNpbmY9ZnVuY3Rpb24oeCl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO3JldHVybiB4MT09LUluZmluaXR5fHx4MT09SW5maW5pdHl8fHgxPT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFl8fHgxPT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7fTskbW9kdWxlPXtfX2dldGF0dHJfXzpmdW5jdGlvbihhdHRyKXt2YXIgcmVzPXRoaXNbYXR0cl07aWYocmVzPT09dW5kZWZpbmVkKSRyYWlzZSgnQXR0cmlidXRlRXJyb3InLCdtb2R1bGUgbWF0aCBoYXMgbm8gYXR0cmlidXRlICcrYXR0cik7cmV0dXJuIHJlczt9LGFjb3M6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguYWNvcyhmbG9hdF9jaGVjayh4KSkpO30sYWNvc2g6ZnVuY3Rpb24oeCl7aWYoaXNpbmYoeCkpcmV0dXJuIGZsb2F0KCdpbmYnKTt2YXIgeT1mbG9hdF9jaGVjayh4KTtyZXR1cm4gZmxvYXQoTWF0aC5sb2coeStNYXRoLnNxcnQoeSp5LTEpKSk7fSxhc2luOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmFzaW4oZmxvYXRfY2hlY2soeCkpKTt9LGFzaW5oOmZ1bmN0aW9uKHgpe2lmKGlzaW5mKHgpKXJldHVybiBmbG9hdCgnaW5mJyk7dmFyIHk9ZmxvYXRfY2hlY2soeCk7cmV0dXJuIGZsb2F0KE1hdGgubG9nKHkrTWF0aC5zcXJ0KHkqeSsxKSkpO30sYXRhbjpmdW5jdGlvbih4KXtpZihpc2luZih4KSlyZXR1cm4gZmxvYXQoTWF0aC5QSS8yKTtyZXR1cm4gZmxvYXQoTWF0aC5hdGFuKGZsb2F0X2NoZWNrKHgpKSk7fSxhdGFuMjpmdW5jdGlvbih5LHgpe3JldHVybiBmbG9hdChNYXRoLmF0YW4yKHkseCkpO30sYXRhbmg6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7aWYoeT09MClyZXR1cm4gMDtyZXR1cm4gZmxvYXQoMC41Kk1hdGgubG9nKCgxL3krMSkvKDEveS0xKSkpO30sY2VpbDpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTtpZighaXNOYU4ocGFyc2VGbG9hdCh5KSkmJmlzRmluaXRlKHkpKXJldHVybiBpbnQoTWF0aC5jZWlsKHkpKTt0cnl7cmV0dXJuIGdldGF0dHIoeSwnX19jZWlsX18nKSgpO31jYXRjaChlcnIpeyRwb3BfZXhjKCk7fSRyYWlzZSgnVmFsdWVFcnJvcicsJ29iamVjdCBpcyBub3QgYSBudW1iZXIgYW5kIGRvZXMgbm90IGNvbnRhaW4gX19jZWlsX18nKTt9LGNvcHlzaWduOmZ1bmN0aW9uKHgseSl7dmFyIHgxPU1hdGguYWJzKGZsb2F0X2NoZWNrKHgpKTt2YXIgeTE9ZmxvYXRfY2hlY2soeSk7dmFyIHNpZ249eTE/eTE8MD8tMToxOjE7aWYoaXNpbnN0YW5jZSh4LGludCkpcmV0dXJuIHgxKnNpZ247ZWxzZSByZXR1cm4gZmxvYXQoeDEqc2lnbik7fSxjb3M6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguY29zKGZsb2F0X2NoZWNrKHgpKSk7fSxkZWdyZWVzOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChmbG9hdF9jaGVjayh4KSoxODAvTWF0aC5QSSk7fSxlOmZsb2F0KE1hdGguRSksZXJmOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB0PTEuMC8oMS4wKzAuNSpNYXRoLmFicyh5KSk7dmFyIGFucz0xLXQqTWF0aC5leHAoLXkqeS0xLjI2NTUxMjIzK3QqKDEuMDAwMDIzNjgrdCooMC4zNzQwOTE5Nit0KigwLjA5Njc4NDE4K3QqKC0wLjE4NjI4ODA2K3QqKDAuMjc4ODY4MDcrdCooLTEuMTM1MjAzOTgrdCooMS40ODg1MTU4Nyt0KigtMC44MjIxNTIyMyt0KjAuMTcwODcyNzcpKSkpKSkpKSk7aWYoeT49MC4wKXJldHVybiBhbnM7cmV0dXJuIC1hbnM7fSxlcmZjOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB0PTEuMC8oMS4wKzAuNSpNYXRoLmFicyh5KSk7dmFyIGFucz0xLXQqTWF0aC5leHAoLXkqeS0xLjI2NTUxMjIzK3QqKDEuMDAwMDIzNjgrdCooMC4zNzQwOTE5Nit0KigwLjA5Njc4NDE4K3QqKC0wLjE4NjI4ODA2K3QqKDAuMjc4ODY4MDcrdCooLTEuMTM1MjAzOTgrdCooMS40ODg1MTU4Nyt0KigtMC44MjIxNTIyMyt0KjAuMTcwODcyNzcpKSkpKSkpKSk7aWYoeT49MC4wKXJldHVybiAxLWFucztyZXR1cm4gMSthbnM7fSxleHA6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguZXhwKGZsb2F0X2NoZWNrKHgpKSk7fSxleHBtMTpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5leHAoZmxvYXRfY2hlY2soeCkpLTEpO30sZmFiczpmdW5jdGlvbih4KXtyZXR1cm4geD4wP2Zsb2F0KHgpOmZsb2F0KC14KTt9LGZhY3RvcmlhbDpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTt2YXIgcj0xO2Zvcih2YXIgaT0yO2k8PXk7aSsrKXIqPWk7cmV0dXJuIHI7fSxmbG9vcjpmdW5jdGlvbih4KXtyZXR1cm4gTWF0aC5mbG9vcihmbG9hdF9jaGVjayh4KSk7fSxmbW9kOmZ1bmN0aW9uKHgseSl7cmV0dXJuIGZsb2F0KGZsb2F0X2NoZWNrKHgpJWZsb2F0X2NoZWNrKHkpKTt9LGZyZXhwOmZ1bmN0aW9uKHgpe3ZhciB4MT1mbG9hdF9jaGVjayh4KTt2YXIgZXg9TWF0aC5mbG9vcihNYXRoLmxvZyh4MSkvTWF0aC5sb2coMikpKzE7ZnJhYz14MS9NYXRoLnBvdygyLGV4KTtyZXR1cm4gW2ZyYWMsZXhdO30sZ2FtbWE6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7dmFyIHo9eSsxO3ZhciBkMT1NYXRoLnNxcnQoMipNYXRoLlBJKS96O3ZhciBkMj0xLjAwMDAwMDAwMDE5MDAxNTtkMis9NzYuMTgwMDkxNzI5NDcxNDYvKHorMSk7ZDIrPS04Ni41MDUzMjAzMjk0MTY3Ny8oeisyKTtkMis9MjQuMDE0MDk4MjQwODMwOTEvKHorMyk7ZDIrPS0xLjIzMTczOTU3MjQ1MDE1NS8oeis0KTtkMis9MS4yMDg2NTA5NzM4NjYxNzlFLTMvKHorNSk7ZDIrPS01LjM5NTIzOTM4NDk1M0UtNi8oeis2KTtyZXR1cm4gZDEqZDIqTWF0aC5wb3coeis1LjUseiswLjUpKk1hdGguZXhwKC0oeis1LjUpKTt9LGh5cG90OmZ1bmN0aW9uKHgseSl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO3ZhciB5MT1mbG9hdF9jaGVjayh5KTtyZXR1cm4gZmxvYXQoTWF0aC5zcXJ0KHgxKngxK3kxKnkxKSk7fSxpc2Zpbml0ZTpmdW5jdGlvbih4KXtyZXR1cm4gaXNGaW5pdGUoZmxvYXRfY2hlY2soeCkpO30saXNpbmY6ZnVuY3Rpb24oeCl7cmV0dXJuIGlzaW5mKHgpO30saXNuYW46ZnVuY3Rpb24oeCl7cmV0dXJuIGlzTmFOKGZsb2F0X2NoZWNrKHgpKTt9LGxkZXhwOmZ1bmN0aW9uKHgsaSl7dmFyIG11bD1NYXRoLnBvdygyLGZsb2F0X2NoZWNrKGkpKTtpZihpc2luc3RhbmNlKHgsaW50KSlyZXR1cm4geCptdWw7ZWxzZSByZXR1cm4gZmxvYXQoeC52YWx1ZSptdWwpO30sbGdhbW1hOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB6PXkrMTt2YXIgZDE9TWF0aC5zcXJ0KDIqTWF0aC5QSSkvejt2YXIgZDI9MS4wMDAwMDAwMDAxOTAwMTU7ZDIrPTc2LjE4MDA5MTcyOTQ3MTQ2Lyh6KzEpO2QyKz0tODYuNTA1MzIwMzI5NDE2NzcvKHorMik7ZDIrPTI0LjAxNDA5ODI0MDgzMDkxLyh6KzMpO2QyKz0tMS4yMzE3Mzk1NzI0NTAxNTUvKHorNCk7ZDIrPTEuMjA4NjUwOTczODY2MTc5RS0zLyh6KzUpO2QyKz0tNS4zOTUyMzkzODQ5NTNFLTYvKHorNik7cmV0dXJuIGZsb2F0KE1hdGgubG9nKE1hdGguYWJzKGQxKmQyKk1hdGgucG93KHorNS41LHorMC41KSpNYXRoLmV4cCgtKHorNS41KSkpKSk7fSxsb2c6ZnVuY3Rpb24oeCxiYXNlKXt2YXIgeDE9ZmxvYXRfY2hlY2soeCk7aWYoYmFzZT09PXVuZGVmaW5lZClyZXR1cm4gZmxvYXQoTWF0aC5sb2coeDEpKTtyZXR1cm4gZmxvYXQoTWF0aC5sb2coeDEpL01hdGgubG9nKGZsb2F0X2NoZWNrKGJhc2UpKSk7fSxsb2cxcDpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5sb2coMS4wK2Zsb2F0X2NoZWNrKHgpKSk7fSxsb2cyOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmxvZyhmbG9hdF9jaGVjayh4KSkvTWF0aC5MTjIpO30sbG9nMTA6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGgubG9nKGZsb2F0X2NoZWNrKHgpKS9NYXRoLkxOMTApO30sbW9kZjpmdW5jdGlvbih4KXt2YXIgeDE9ZmxvYXRfY2hlY2soeCk7aWYoeDE+MCl7dmFyIGk9ZmxvYXQoeDEtTWF0aC5mbG9vcih4MSkpO3JldHVybiBbaSxmbG9hdCh4MS1pKV07fXZhciBpPWZsb2F0KHgxLU1hdGguY2VpbCh4MSkpO3JldHVybiBbaSxmbG9hdChNYXRoLmNlaWwoeDEpKV07fSxwaTpmbG9hdChNYXRoLlBJKSxwb3c6ZnVuY3Rpb24oeCx5KXtpZihpc2luc3RhbmNlKHgsaW50KSlyZXR1cm4gTWF0aC5wb3coeCxmbG9hdF9jaGVjayh5KSk7ZWxzZSByZXR1cm4gZmxvYXQoTWF0aC5wb3coeC52YWx1ZSxmbG9hdF9jaGVjayh5KSkpO30scmFkaWFuczpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoZmxvYXRfY2hlY2soeCkqTWF0aC5QSS8xODApO30sc2luOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLnNpbihmbG9hdF9jaGVjayh4KSkpO30sc3FydDpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5zcXJ0KGZsb2F0X2NoZWNrKHgpKSk7fSx0cnVuYzpmdW5jdGlvbih4KXt0cnl7cmV0dXJuIGdldGF0dHIoeCwnX190cnVuY19fJykoKTt9Y2F0Y2goZXJyKXskcG9wX2V4YygpO312YXIgeDE9ZmxvYXRfY2hlY2soeCk7aWYoIWlzTmFOKHBhcnNlRmxvYXQoeDEpKSYmaXNGaW5pdGUoeDEpKXJldHVybiBpbnQoTWF0aC5mbG9vcih4MSkpOyRyYWlzZSgnVmFsdWVFcnJvcicsJ29iamVjdCBpcyBub3QgYSBudW1iZXIgYW5kIGRvZXMgbm90IGNvbnRhaW4gX190cnVuY19fJyk7fX07Zm9yKHZhciAkYXR0ciBpbiAkbW9kdWxlKWlmKHR5cGVvZiAkbW9kdWxlWyRhdHRyXT09PSdmdW5jdGlvbicpeyRtb2R1bGVbJGF0dHJdLl9fcmVwcl9fPShmdW5jdGlvbihmdW5jKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gJzxidWlsdC1pbiBmdW5jdGlvbiAnK2Z1bmMrJz4nO307fSkoJGF0dHIpOyRtb2R1bGVbJGF0dHJdLl9fc3RyX189KGZ1bmN0aW9uKGZ1bmMpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiAnPGJ1aWx0LWluIGZ1bmN0aW9uICcrZnVuYysnPic7fTt9KSgkYXR0cik7fQ==',
'/libs/hashlib.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7aWYoYXR0cj09J25ldycpcmV0dXJuICRoYXNobGliX25ldztyZXR1cm4gdGhpc1thdHRyXTt9LG1kNTpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ21kNScpO30sc2hhMTpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTEnKTt9LHNoYTIyNDpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTIyNCcpO30sc2hhMjU2OmZ1bmN0aW9uKCl7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjU2Jyk7fSxzaGEzODQ6ZnVuY3Rpb24oKXtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEzODQnKTt9LHNoYTUxMjpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTUxMicpO30sYWxnb3JpdGhtc19ndWFyYW50ZWVkOlsnbWQ1Jywnc2hhMScsJ3NoYTIyNCcsJ3NoYTI1NicsJ3NoYTM4NCcsJ3NoYTUxMiddLGFsZ29yaXRobXNfYXZhaWxhYmxlOlsnbWQ1Jywnc2hhMScsJ3NoYTIyNCcsJ3NoYTI1NicsJ3NoYTM4NCcsJ3NoYTUxMiddfTtmdW5jdGlvbiAkZ2V0X0NyeXB0b0pTX2xpYihhbGcpe3ZhciBpbXA9JGltcG9ydGVyKCk7dmFyICR4bWxodHRwPWltcFswXSxmYWtlX3FzPWltcFsxXSx0aW1lcj1pbXBbMl0scmVzPW51bGw7JHhtbGh0dHAub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aWYoJHhtbGh0dHAucmVhZHlTdGF0ZT09NCl7d2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7aWYoJHhtbGh0dHAuc3RhdHVzPT0yMDB8fCR4bWxodHRwLnN0YXR1cz09MClyZXM9JHhtbGh0dHAucmVzcG9uc2VUZXh0O2Vsc2V7cmVzPUVycm9yKCk7cmVzLm5hbWU9J05vdEZvdW5kRXJyb3InO3Jlcy5tZXNzYWdlPSJObyBDcnlwdG9KUyBsaWIgbmFtZWQgJyIrYWxnKyInIjt9fX07JHhtbGh0dHAub3BlbignR0VUJyxfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJ2xpYnMvY3J5cHRvX2pzL3JvbGx1cHMvJythbGcrJy5qcycrZmFrZV9xcyxmYWxzZSk7aWYoJ292ZXJyaWRlTWltZVR5cGUnIGluICR4bWxodHRwKSR4bWxodHRwLm92ZXJyaWRlTWltZVR5cGUoInRleHQvcGxhaW4iKTskeG1saHR0cC5zZW5kKCk7aWYocmVzLmNvbnN0cnVjdG9yPT09RXJyb3IpdGhyb3cgcmVzO3RyeXtldmFsKHJlcysiOyBfX0JSWVRIT05fXy5DcnlwdG9KUz1DcnlwdG9KUzsiKTt9Y2F0Y2goZXJyKXt0aHJvdyBFcnJvcigiSlMgRXZhbCBFcnJvciIsIkNhbm5vdCBldmFsIENyeXB0b0pTIGFsZ29yaXRobSAnIithbGcrIicgOiBlcnJvcjoiK2Vycik7fX1mdW5jdGlvbiAkaGFzaGxpYl9uZXcoYWxnKXtpZihhbGc9PSdtZDUnKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uTUQ1PT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdtZDUnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5NRDUuY3JlYXRlKCk7fWVsc2UgaWYoYWxnPT0nc2hhMScpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExPT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGExJyk7dGhpcy5oYXNoPV9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMS5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGEyMjQnKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjI0PT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyMjQnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQuY3JlYXRlKCk7fWVsc2UgaWYoYWxnPT0nc2hhMjU2Jyl7aWYoX19CUllUSE9OX18uQ3J5cHRvPT09dW5kZWZpbmVkfHxfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTI1Nj09PXVuZGVmaW5lZCkkZ2V0X0NyeXB0b0pTX2xpYignc2hhMjU2Jyk7dGhpcy5oYXNoPV9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO31lbHNlIGlmKGFsZz09J3NoYTM4NCcpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEzODQ9PT11bmRlZmluZWQpJGdldF9DcnlwdG9KU19saWIoJ3NoYTM4NCcpO3RoaXMuaGFzaD1fX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4NC5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGE1MTInKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBNTEyPT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGE1MTInKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTIuY3JlYXRlKCk7fWVsc2UgJHJhaXNlKCdBdHRyaWJ1dGVFcnJvcicsJ0ludmFsaWQgaGFzaCBhbGdvcml0aG06JythbGcpO3RoaXMuX19jbGFzc19fPSR0eXBlO3RoaXMuX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuICRnZXRhdHRyKHRoaXMsYXR0cik7fTt0aGlzLl9fc3RyX189ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZXhkaWdlc3QoKTt9O3RoaXMudXBkYXRlPWZ1bmN0aW9uKG1zZyl7dGhpcy5oYXNoLnVwZGF0ZShtc2cpO307dGhpcy5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzaC5jbG9uZSgpO307dGhpcy5oZXhkaWdlc3Q9ZnVuY3Rpb24oKXt2YXIgdGVtcD10aGlzLmhhc2guY2xvbmUoKTt0ZW1wPXRlbXAuZmluYWxpemUoKTtyZXR1cm4gdGVtcC50b1N0cmluZygpO307cmV0dXJuIHRoaXM7fSRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdoYXNobGliJz4iO307',
'/libs/_os.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxyYW5kb206ZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQoTWF0aC5yYW5kb20oKSk7fSxyYW5kaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGItYSkrYSkpO319OyRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdfb3MnPiI7fTs=',
'/libs/crypto_js/rollups/sha1.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihlLG0pe3ZhciBwPXt9LGo9cC5saWI9e30sbD1mdW5jdGlvbigpe30sZj1qLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtsLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBsKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0sbj1qLldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPW0/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fGgpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGI9MDtiPGE7Yis9NCljLnB1c2goNDI5NDk2NzI5NiplLnJhbmRvbSgpfDApO3JldHVybiBuZXcgbi5pbml0KGMsYSk7fX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGIuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsYj1bXSxkPTA7ZDxjO2QrPTIpYltkPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGQsMiksMTYpPDwyNC00KihkJTgpO3JldHVybiBuZXcgbi5pbml0KGIsYy8yKTt9fSxnPWIuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBiPVtdLGQ9MDtkPGE7ZCsrKWIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbZD4+PjJdPj4+MjQtOCooZCU0KSYyNTUpKTtyZXR1cm4gYi5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKTt9fSxyPWIuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShnLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZy5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSxrPWouQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBuLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ci5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZDt9cmV0dXJuIG5ldyBuLmluaXQoZyxkKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2ouSGFzaGVyPWsuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuIG5ldyBhLmluaXQoYikuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGYpe3JldHVybiBuZXcgcy5ITUFDLmluaXQoYSxmKS5maW5hbGl6ZShiKTt9O319KTt2YXIgcz1wLmFsZ289e307cmV0dXJuIHA7fShNYXRoKTsoZnVuY3Rpb24oKXt2YXIgZT1DcnlwdG9KUyxtPWUubGliLHA9bS5Xb3JkQXJyYXksaj1tLkhhc2hlcixsPVtdLG09ZS5hbGdvLlNIQTE9ai5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgcC5pbml0KFsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF0pO30sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGYsbil7Zm9yKHZhciBiPXRoaXMuX2hhc2gud29yZHMsaD1iWzBdLGc9YlsxXSxlPWJbMl0saz1iWzNdLGo9Yls0XSxhPTA7ODA+YTthKyspe2lmKDE2PmEpbFthXT1mW24rYV18MDtlbHNle3ZhciBjPWxbYS0zXV5sW2EtOF1ebFthLTE0XV5sW2EtMTZdO2xbYV09Yzw8MXxjPj4+MzE7fWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXmspLTg5OTQ5NzUxNCk7aj1rO2s9ZTtlPWc8PDMwfGc+Pj4yO2c9aDtoPWM7fWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGY9dGhpcy5fZGF0YSxlPWYud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsaD04KmYuc2lnQnl0ZXM7ZVtoPj4+NV18PTEyODw8MjQtaCUzMjtlWyhoKzY0Pj4+OTw8NCkrMTRdPU1hdGguZmxvb3IoYi80Mjk0OTY3Mjk2KTtlWyhoKzY0Pj4+OTw8NCkrMTVdPWI7Zi5zaWdCeXRlcz00KmUubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGU9ai5jbG9uZS5jYWxsKHRoaXMpO2UuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBlO319KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKTt9KSgpOw==',
'/libs/crypto_js/rollups/sha3.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbih2LHApe3ZhciBkPXt9LHU9ZC5saWI9e30scj1mdW5jdGlvbigpe30sZj11LkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtyLnByb3RvdHlwZT10aGlzO3ZhciBiPW5ldyByKCk7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtiLmluaXQucHJvdG90eXBlPWI7Yi4kc3VwZXI9dGhpcztyZXR1cm4gYjt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scz11LldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGIpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWIhPXA/Yjo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHkpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YVtiPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGE7Yys9NCliLnB1c2goNDI5NDk2NzI5Nip2LnJhbmRvbSgpfDApO3JldHVybiBuZXcgcy5pbml0KGIsYSk7fX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGMuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9YS5sZW5ndGgsYz1bXSxqPTA7ajxiO2orPTIpY1tqPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGosMiksMTYpPDwyNC00KihqJTgpO3JldHVybiBuZXcgcy5pbml0KGMsYi8yKTt9fSxlPXguTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGI9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBjPVtdLGo9MDtqPGE7aisrKWMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJbaj4+PjJdPj4+MjQtOCooaiU0KSYyNTUpKTtyZXR1cm4gYy5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKTt9fSxxPXguVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShlLnN0cmluZ2lmeShhKSkpO31jYXRjaChiKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx0PXUuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBzLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9cS5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09ajt9cmV0dXJuIG5ldyBzLmluaXQoZixqKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO3UuSGFzaGVyPXQuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuIG5ldyBhLmluaXQoYykuZmluYWxpemUoYik7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe3JldHVybiBuZXcgdy5ITUFDLmluaXQoYSxjKS5maW5hbGl6ZShiKTt9O319KTt2YXIgdz1kLmFsZ289e307cmV0dXJuIGQ7fShNYXRoKTsoZnVuY3Rpb24odil7dmFyIHA9Q3J5cHRvSlMsZD1wLmxpYix1PWQuQmFzZSxyPWQuV29yZEFycmF5LHA9cC54NjQ9e307cC5Xb3JkPXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7dGhpcy5oaWdoPWY7dGhpcy5sb3c9czt9fSk7cC5Xb3JkQXJyYXk9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXtmPXRoaXMud29yZHM9Znx8W107dGhpcy5zaWdCeXRlcz1zIT12P3M6OCpmLmxlbmd0aDt9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyk7fXJldHVybiByLmNyZWF0ZShkLHRoaXMuc2lnQnl0ZXMpO30sY2xvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIGY9dS5jbG9uZS5jYWxsKHRoaXMpLGQ9Zi53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApLHA9ZC5sZW5ndGgscj0wO3I8cDtyKyspZFtyXT1kW3JdLmNsb25lKCk7cmV0dXJuIGY7fX0pO30pKCk7KGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13O31mb3IoZT0wOzU+ZTtlKyspZm9yKHE9MDs1PnE7cSsrKXhbZSs1KnFdPXErNSooKDIqZSszKnEpJTUpO2U9MTtmb3IocT0wOzI0PnE7cSsrKXtmb3IodmFyIGE9dz10PTA7Nz5hO2ErKyl7aWYoZSYxKXt2YXIgYj0oMTw8YSktMTszMj5iP3dePTE8PGI6dF49MTw8Yi0zMjt9ZT1lJjEyOD9lPDwxXjExMzplPDwxO315W3FdPWYuY3JlYXRlKHQsdyk7fWZvcih2YXIgYz1bXSxlPTA7MjU+ZTtlKyspY1tlXT1mLmNyZWF0ZSgpO2Q9ZC5TSEEzPXIuZXh0ZW5kKHtjZmc6ci5jZmcuZXh0ZW5kKHtvdXRwdXRMZW5ndGg6NTEyfSksX2RvUmVzZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5fc3RhdGU9W10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdCgpO3RoaXMuYmxvY2tTaXplPSgxNjAwLTIqdGhpcy5jZmcub3V0cHV0TGVuZ3RoKS8zMjt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bDt9Zm9yKGY9MDsyND5mO2YrKyl7Zm9yKGg9MDs1Pmg7aCsrKXtmb3IodmFyIGQ9bD0wLGs9MDs1Pms7aysrKWc9ZVtoKzUqa10sbF49Zy5oaWdoLGRePWcubG93O2c9Y1toXTtnLmhpZ2g9bDtnLmxvdz1kO31mb3IoaD0wOzU+aDtoKyspe2c9Y1soaCs0KSU1XTtsPWNbKGgrMSklNV07bT1sLmhpZ2g7az1sLmxvdztsPWcuaGlnaF4obTw8MXxrPj4+MzEpO2Q9Zy5sb3deKGs8PDF8bT4+PjMxKTtmb3Ioaz0wOzU+aztrKyspZz1lW2grNSprXSxnLmhpZ2hePWwsZy5sb3dePWQ7fWZvcihtPTE7MjU+bTttKyspZz1lW21dLGg9Zy5oaWdoLGc9Zy5sb3csaz1zW21dLDMyPms/KGw9aDw8a3xnPj4+MzItayxkPWc8PGt8aD4+PjMyLWspOihsPWc8PGstMzJ8aD4+PjY0LWssZD1oPDxrLTMyfGc+Pj42NC1rKSxnPWNbeFttXV0sZy5oaWdoPWwsZy5sb3c9ZDtnPWNbMF07aD1lWzBdO2cuaGlnaD1oLmhpZ2g7Zy5sb3c9aC5sb3c7Zm9yKGg9MDs1Pmg7aCsrKWZvcihrPTA7NT5rO2srKyltPWgrNSprLGc9ZVttXSxsPWNbbV0sbT1jWyhoKzEpJTUrNSprXSxkPWNbKGgrMiklNSs1KmtdLGcuaGlnaD1sLmhpZ2hefm0uaGlnaCZkLmhpZ2gsZy5sb3c9bC5sb3defm0ubG93JmQubG93O2c9ZVswXTtoPXlbZl07Zy5oaWdoXj1oLmhpZ2g7Zy5sb3dePWgubG93O319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxiPWEud29yZHMsYz04KmEuc2lnQnl0ZXMsZT0zMip0aGlzLmJsb2NrU2l6ZTtiW2M+Pj41XXw9MTw8MjQtYyUzMjtiWyh2LmNlaWwoKGMrMSkvZSkqZT4+PjUpLTFdfD0xMjg7YS5zaWdCeXRlcz00KmIubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtmb3IodmFyIGE9dGhpcy5fc3RhdGUsYj10aGlzLmNmZy5vdXRwdXRMZW5ndGgvOCxjPWIvOCxlPVtdLGg9MDtoPGM7aCsrKXt2YXIgZD1hW2hdLGY9ZC5oaWdoLGQ9ZC5sb3csZj0oZjw8OHxmPj4+MjQpJjE2NzExOTM1fChmPDwyNHxmPj4+OCkmNDI3ODI1NTM2MCxkPShkPDw4fGQ+Pj4yNCkmMTY3MTE5MzV8KGQ8PDI0fGQ+Pj44KSY0Mjc4MjU1MzYwO2UucHVzaChkKTtlLnB1c2goZik7fXJldHVybiBuZXcgdS5pbml0KGUsYik7fSxjbG9uZTpmdW5jdGlvbigpe2Zvcih2YXIgYT1yLmNsb25lLmNhbGwodGhpcyksYj1hLl9zdGF0ZT10aGlzLl9zdGF0ZS5zbGljZSgwKSxjPTA7MjU+YztjKyspYltjXT1iW2NdLmNsb25lKCk7cmV0dXJuIGE7fX0pO3AuU0hBMz1yLl9jcmVhdGVIZWxwZXIoZCk7cC5IbWFjU0hBMz1yLl9jcmVhdGVIbWFjSGVscGVyKGQpO30pKE1hdGgpOw==',
'/libs/crypto_js/rollups/sha224.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihnLGwpe3ZhciBmPXt9LGs9Zi5saWI9e30saD1mdW5jdGlvbigpe30sbT1rLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtoLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBoKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scT1rLldvcmRBcnJheT1tLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPWw/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHMpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGQ9MDtkPGE7ZCs9NCljLnB1c2goNDI5NDk2NzI5NipnLnJhbmRvbSgpfDApO3JldHVybiBuZXcgcS5pbml0KGMsYSk7fX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGQuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsZD1bXSxiPTA7YjxjO2IrPTIpZFtiPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGIsMiksMTYpPDwyNC00KihiJTgpO3JldHVybiBuZXcgcS5pbml0KGQsYy8yKTt9fSxuPXQuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBkPVtdLGI9MDtiPGE7YisrKWQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbYj4+PjJdPj4+MjQtOCooYiU0KSYyNTUpKTtyZXR1cm4gZC5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKTt9fSxqPXQuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShuLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gbi5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx3PWsuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1tLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBxLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ai5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yjt9cmV0dXJuIG5ldyBxLmluaXQodSxiKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2suSGFzaGVyPXcuZXh0ZW5kKHtjZmc6bS5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuIG5ldyBhLmluaXQoZCkuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihjLGQpe3JldHVybiBuZXcgdi5ITUFDLmluaXQoYSxkKS5maW5hbGl6ZShjKTt9O319KTt2YXIgdj1mLmFsZ289e307cmV0dXJuIGY7fShNYXRoKTsoZnVuY3Rpb24oZyl7Zm9yKHZhciBsPUNyeXB0b0pTLGY9bC5saWIsaz1mLldvcmRBcnJheSxoPWYuSGFzaGVyLGY9bC5hbGdvLG09W10scT1bXSx0PWZ1bmN0aW9uKGEpe3JldHVybiA0Mjk0OTY3Mjk2KihhLShhfDApKXwwO30scz0yLG49MDs2ND5uOyl7dmFyIGo7YTp7aj1zO2Zvcih2YXIgdz1nLnNxcnQoaiksdj0yO3Y8PXc7disrKWlmKCEoaiV2KSl7aj0hMTticmVhayBhO31qPSEwO31qJiYoOD5uJiYobVtuXT10KGcucG93KHMsMC41KSkpLHFbbl09dChnLnBvdyhzLDEvMykpLG4rKyk7cysrO312YXIgYT1bXSxmPWYuU0hBMjU2PWguZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGsuaW5pdChtLnNsaWNlKDApKTt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09Y1tkK3BdfDA7ZWxzZXt2YXIgaj1hW3AtMTVdLHI9YVtwLTJdO2FbcF09KChqPDwyNXxqPj4+NyleKGo8PDE0fGo+Pj4xOCleaj4+PjMpK2FbcC03XSsoKHI8PDE1fHI+Pj4xNyleKHI8PDEzfHI+Pj4xOSlecj4+PjEwKSthW3AtMTZdO31qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDA7fWJbMF09YlswXStlfDA7YlsxXT1iWzFdK2Z8MDtiWzJdPWJbMl0rZ3wwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2h8MDtiWzVdPWJbNV0rbHwwO2JbNl09Yls2XSttfDA7Yls3XT1iWzddK258MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxkPWEud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsZT04KmEuc2lnQnl0ZXM7ZFtlPj4+NV18PTEyODw8MjQtZSUzMjtkWyhlKzY0Pj4+OTw8NCkrMTRdPWcuZmxvb3IoYi80Mjk0OTY3Mjk2KTtkWyhlKzY0Pj4+OTw8NCkrMTVdPWI7YS5zaWdCeXRlcz00KmQubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9aC5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhO319KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZik7fSkoTWF0aCk7KGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pO30sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj1rLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7Zi5zaWdCeXRlcy09NDtyZXR1cm4gZjt9fSk7Zy5TSEEyMjQ9ay5fY3JlYXRlSGVscGVyKGYpO2cuSG1hY1NIQTIyND1rLl9jcmVhdGVIbWFjSGVscGVyKGYpO30pKCk7',
'/libs/crypto_js/rollups/sha512.js':'',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/md5.js':'',
'/Lib/heapq.py':'',
'/Lib/calendar.py':'',
'/Lib/getopt.py':'',
'/Lib/_pyio.py':'',
'/Lib/_functools.py':'ZGVmIHBhcnRpYWwoZnVuYywgKmFyZ3MsICoqa2V5d29yZHMpOgogICAgZGVmIG5ld2Z1bmMoKmZhcmdzLCAqKmZrZXl3b3Jkcyk6CiAgICAgICAgbmV3a2V5d29yZHMgPSBrZXl3b3Jkcy5jb3B5KCkKICAgICAgICBuZXdrZXl3b3Jkcy51cGRhdGUoZmtleXdvcmRzKQogICAgICAgIHJldHVybiBmdW5jKCooYXJncyArIGZhcmdzKSwgKipuZXdrZXl3b3JkcykKICAgIG5ld2Z1bmMuZnVuYyA9IGZ1bmMKICAgIG5ld2Z1bmMuYXJncyA9IGFyZ3MKICAgIG5ld2Z1bmMua2V5d29yZHMgPSBrZXl3b3JkcwogICAgcmV0dXJuIG5ld2Z1bmMKCmRlZiByZWR1Y2UoZnVuYyxpdGVyYWJsZSxpbml0aWFsaXplcj1Ob25lKToKICAgIGFyZ3MgPSBpdGVyKGl0ZXJhYmxlKQogICAgaWYgaW5pdGlhbGl6ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgcmVzID0gaW5pdGlhbGl6ZXIKICAgIGVsc2U6CiAgICAgICAgcmVzID0gbmV4dChhcmcpCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzID0gZnVuYyhyZXMsbmV4dChhcmdzKSkKICAgICAgICBleGNlcHQgU3RvcEl0ZXJhdGlvbjoKICAgICAgICAgICAgcmV0dXJuIHJlcwo=',
'/Lib/fnmatch.py':'IiIiRmlsZW5hbWUgbWF0Y2hpbmcgd2l0aCBzaGVsbCBwYXR0ZXJucy4NCg0KZm5tYXRjaChGSUxFTkFNRSwgUEFUVEVSTikgbWF0Y2hlcyBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsIGNvbnZlbnRpb24uDQpmbm1hdGNoY2FzZShGSUxFTkFNRSwgUEFUVEVSTikgYWx3YXlzIHRha2VzIGNhc2UgaW4gYWNjb3VudC4NCg0KVGhlIGZ1bmN0aW9ucyBvcGVyYXRlIGJ5IHRyYW5zbGF0aW5nIHRoZSBwYXR0ZXJuIGludG8gYSByZWd1bGFyDQpleHByZXNzaW9uLiAgVGhleSBjYWNoZSB0aGUgY29tcGlsZWQgcmVndWxhciBleHByZXNzaW9ucyBmb3Igc3BlZWQuDQoNClRoZSBmdW5jdGlvbiB0cmFuc2xhdGUoUEFUVEVSTikgcmV0dXJucyBhIHJlZ3VsYXIgZXhwcmVzc2lvbg0KY29ycmVzcG9uZGluZyB0byBQQVRURVJOLiAgKEl0IGRvZXMgbm90IGNvbXBpbGUgaXQuKQ0KIiIiDQppbXBvcnQgb3MNCmltcG9ydCBwb3NpeHBhdGgNCmltcG9ydCByZQ0KaW1wb3J0IGZ1bmN0b29scw0KDQpfX2FsbF9fID0gWyJmaWx0ZXIiLCAiZm5tYXRjaCIsICJmbm1hdGNoY2FzZSIsICJ0cmFuc2xhdGUiXQ0KDQpkZWYgZm5tYXRjaChuYW1lLCBwYXQpOg0KICAgICIiIlRlc3Qgd2hldGhlciBGSUxFTkFNRSBtYXRjaGVzIFBBVFRFUk4uDQoNCiAgICBQYXR0ZXJucyBhcmUgVW5peCBzaGVsbCBzdHlsZToNCg0KICAgICogICAgICAgbWF0Y2hlcyBldmVyeXRoaW5nDQogICAgPyAgICAgICBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyDQogICAgW3NlcV0gICBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgaW4gc2VxDQogICAgWyFzZXFdICBtYXRjaGVzIGFueSBjaGFyIG5vdCBpbiBzZXENCg0KICAgIEFuIGluaXRpYWwgcGVyaW9kIGluIEZJTEVOQU1FIGlzIG5vdCBzcGVjaWFsLg0KICAgIEJvdGggRklMRU5BTUUgYW5kIFBBVFRFUk4gYXJlIGZpcnN0IGNhc2Utbm9ybWFsaXplZA0KICAgIGlmIHRoZSBvcGVyYXRpbmcgc3lzdGVtIHJlcXVpcmVzIGl0Lg0KICAgIElmIHlvdSBkb24ndCB3YW50IHRoaXMsIHVzZSBmbm1hdGNoY2FzZShGSUxFTkFNRSwgUEFUVEVSTikuDQogICAgIiIiDQogICAgbmFtZSA9IG9zLnBhdGgubm9ybWNhc2UobmFtZSkNCiAgICBwYXQgPSBvcy5wYXRoLm5vcm1jYXNlKHBhdCkNCiAgICByZXR1cm4gZm5tYXRjaGNhc2UobmFtZSwgcGF0KQ0KDQpAZnVuY3Rvb2xzLmxydV9jYWNoZShtYXhzaXplPTI1MCwgdHlwZWQ9VHJ1ZSkNCmRlZiBfY29tcGlsZV9wYXR0ZXJuKHBhdCk6DQogICAgaWYgaXNpbnN0YW5jZShwYXQsIGJ5dGVzKToNCiAgICAgICAgcGF0X3N0ciA9IHN0cihwYXQsICdJU08tODg1OS0xJykNCiAgICAgICAgcmVzX3N0ciA9IHRyYW5zbGF0ZShwYXRfc3RyKQ0KICAgICAgICByZXMgPSBieXRlcyhyZXNfc3RyLCAnSVNPLTg4NTktMScpDQogICAgZWxzZToNCiAgICAgICAgcmVzID0gdHJhbnNsYXRlKHBhdCkNCiAgICByZXR1cm4gcmUuY29tcGlsZShyZXMpLm1hdGNoDQoNCmRlZiBmaWx0ZXIobmFtZXMsIHBhdCk6DQogICAgIiIiUmV0dXJuIHRoZSBzdWJzZXQgb2YgdGhlIGxpc3QgTkFNRVMgdGhhdCBtYXRjaCBQQVQuIiIiDQogICAgcmVzdWx0ID0gW10NCiAgICBwYXQgPSBvcy5wYXRoLm5vcm1jYXNlKHBhdCkNCiAgICBtYXRjaCA9IF9jb21waWxlX3BhdHRlcm4ocGF0KQ0KICAgIGlmIG9zLnBhdGggaXMgcG9zaXhwYXRoOg0KICAgICAgICAjIG5vcm1jYXNlIG9uIHBvc2l4IGlzIE5PUC4gT3B0aW1pemUgaXQgYXdheSBmcm9tIHRoZSBsb29wLg0KICAgICAgICBmb3IgbmFtZSBpbiBuYW1lczoNCiAgICAgICAgICAgIGlmIG1hdGNoKG5hbWUpOg0KICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobmFtZSkNCiAgICBlbHNlOg0KICAgICAgICBmb3IgbmFtZSBpbiBuYW1lczoNCiAgICAgICAgICAgIGlmIG1hdGNoKG9zLnBhdGgubm9ybWNhc2UobmFtZSkpOg0KICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobmFtZSkNCiAgICByZXR1cm4gcmVzdWx0DQoNCmRlZiBmbm1hdGNoY2FzZShuYW1lLCBwYXQpOg0KICAgICIiIlRlc3Qgd2hldGhlciBGSUxFTkFNRSBtYXRjaGVzIFBBVFRFUk4sIGluY2x1ZGluZyBjYXNlLg0KDQogICAgVGhpcyBpcyBhIHZlcnNpb24gb2YgZm5tYXRjaCgpIHdoaWNoIGRvZXNuJ3QgY2FzZS1ub3JtYWxpemUNCiAgICBpdHMgYXJndW1lbnRzLg0KICAgICIiIg0KICAgIG1hdGNoID0gX2NvbXBpbGVfcGF0dGVybihwYXQpDQogICAgcmV0dXJuIG1hdGNoKG5hbWUpIGlzIG5vdCBOb25lDQoNCg0KZGVmIHRyYW5zbGF0ZShwYXQpOg0KICAgICIiIlRyYW5zbGF0ZSBhIHNoZWxsIFBBVFRFUk4gdG8gYSByZWd1bGFyIGV4cHJlc3Npb24uDQoNCiAgICBUaGVyZSBpcyBubyB3YXkgdG8gcXVvdGUgbWV0YS1jaGFyYWN0ZXJzLg0KICAgICIiIg0KDQogICAgaSwgbiA9IDAsIGxlbihwYXQpDQogICAgcmVzID0gJycNCiAgICB3aGlsZSBpIDwgbjoNCiAgICAgICAgYyA9IHBhdFtpXQ0KICAgICAgICBpID0gaSsxDQogICAgICAgIGlmIGMgPT0gJyonOg0KICAgICAgICAgICAgcmVzID0gcmVzICsgJy4qJw0KICAgICAgICBlbGlmIGMgPT0gJz8nOg0KICAgICAgICAgICAgcmVzID0gcmVzICsgJy4nDQogICAgICAgIGVsaWYgYyA9PSAnWyc6DQogICAgICAgICAgICBqID0gaQ0KICAgICAgICAgICAgaWYgaiA8IG4gYW5kIHBhdFtqXSA9PSAnISc6DQogICAgICAgICAgICAgICAgaiA9IGorMQ0KICAgICAgICAgICAgaWYgaiA8IG4gYW5kIHBhdFtqXSA9PSAnXSc6DQogICAgICAgICAgICAgICAgaiA9IGorMQ0KICAgICAgICAgICAgd2hpbGUgaiA8IG4gYW5kIHBhdFtqXSAhPSAnXSc6DQogICAgICAgICAgICAgICAgaiA9IGorMQ0KICAgICAgICAgICAgaWYgaiA+PSBuOg0KICAgICAgICAgICAgICAgIHJlcyA9IHJlcyArICdcXFsnDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHN0dWZmID0gcGF0W2k6al0ucmVwbGFjZSgnXFwnLCdcXFxcJykNCiAgICAgICAgICAgICAgICBpID0gaisxDQogICAgICAgICAgICAgICAgaWYgc3R1ZmZbMF0gPT0gJyEnOg0KICAgICAgICAgICAgICAgICAgICBzdHVmZiA9ICdeJyArIHN0dWZmWzE6XQ0KICAgICAgICAgICAgICAgIGVsaWYgc3R1ZmZbMF0gPT0gJ14nOg0KICAgICAgICAgICAgICAgICAgICBzdHVmZiA9ICdcXCcgKyBzdHVmZg0KICAgICAgICAgICAgICAgIHJlcyA9ICclc1slc10nICUgKHJlcywgc3R1ZmYpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXMgPSByZXMgKyByZS5lc2NhcGUoYykNCiAgICByZXR1cm4gcmVzICsgJ1xaKD9tcyknDQo=',
'/Lib/errno.py':'IlRoaXMgbW9kdWxlIG1ha2VzIGF2YWlsYWJsZSBzdGFuZGFyZCBlcnJubyBzeXN0ZW0gc3ltYm9scy5cblxuVGhlIHZhbHVlIG9mIGVhY2ggc3ltYm9sIGlzIHRoZSBjb3JyZXNwb25kaW5nIGludGVnZXIgdmFsdWUsXG5lLmcuLCBvbiBtb3N0IHN5c3RlbXMsIGVycm5vLkVOT0VOVCBlcXVhbHMgdGhlIGludGVnZXIgMi5cblxuVGhlIGRpY3Rpb25hcnkgZXJybm8uZXJyb3Jjb2RlIG1hcHMgbnVtZXJpYyBjb2RlcyB0byBzeW1ib2wgbmFtZXMsXG5lLmcuLCBlcnJuby5lcnJvcmNvZGVbMl0gY291bGQgYmUgdGhlIHN0cmluZyAnRU5PRU5UJy5cblxuU3ltYm9scyB0aGF0IGFyZSBub3QgcmVsZXZhbnQgdG8gdGhlIHVuZGVybHlpbmcgc3lzdGVtIGFyZSBub3QgZGVmaW5lZC5cblxuVG8gbWFwIGVycm9yIGNvZGVzIHRvIGVycm9yIG1lc3NhZ2VzLCB1c2UgdGhlIGZ1bmN0aW9uIG9zLnN0cmVycm9yKCksXG5lLmcuIG9zLnN0cmVycm9yKDIpIGNvdWxkIHJldHVybiAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScuIgoKRTJCSUcgPSA3CkVBQ0NFUyA9IDEzCkVBRERSSU5VU0UgPSA5OApFQUREUk5PVEFWQUlMID0gOTkKRUFEViA9IDY4CkVBRk5PU1VQUE9SVCA9IDk3CkVBR0FJTiA9IDExCkVBTFJFQURZID0gMTE0CkVCQURFID0gNTIKRUJBREYgPSA5CkVCQURGRCA9IDc3CkVCQURNU0cgPSA3NApFQkFEUiA9IDUzCkVCQURSUUMgPSA1NgpFQkFEU0xUID0gNTcKRUJGT05UID0gNTkKRUJVU1kgPSAxNgpFQ0hJTEQgPSAxMApFQ0hSTkcgPSA0NApFQ09NTSA9IDcwCkVDT05OQUJPUlRFRCA9IDEwMwpFQ09OTlJFRlVTRUQgPSAxMTEKRUNPTk5SRVNFVCA9IDEwNApFREVBRExLID0gMzUKRURFQURMT0NLID0gMzUKRURFU1RBRERSUkVRID0gODkKRURPTSA9IDMzCkVET1RET1QgPSA3MwpFRFFVT1QgPSAxMjIKRUVYSVNUID0gMTcKRUZBVUxUID0gMTQKRUZCSUcgPSAyNwpFSE9TVERPV04gPSAxMTIKRUhPU1RVTlJFQUNIID0gMTEzCkVJRFJNID0gNDMKRUlMU0VRID0gODQKRUlOUFJPR1JFU1MgPSAxMTUKRUlOVFIgPSA0CkVJTlZBTCA9IDIyCkVJTyA9IDUKRUlTQ09OTiA9IDEwNgpFSVNESVIgPSAyMQpFSVNOQU0gPSAxMjAKRUwySExUID0gNTEKRUwyTlNZTkMgPSA0NQpFTDNITFQgPSA0NgpFTDNSU1QgPSA0NwpFTElCQUNDID0gNzkKRUxJQkJBRCA9IDgwCkVMSUJFWEVDID0gODMKRUxJQk1BWCA9IDgyCkVMSUJTQ04gPSA4MQpFTE5STkcgPSA0OApFTE9PUCA9IDQwCkVNRklMRSA9IDI0CkVNTElOSyA9IDMxCkVNU0dTSVpFID0gOTAKRU1VTFRJSE9QID0gNzIKRU5BTUVUT09MT05HID0gMzYKRU5BVkFJTCA9IDExOQpFTkVURE9XTiA9IDEwMApFTkVUUkVTRVQgPSAxMDIKRU5FVFVOUkVBQ0ggPSAxMDEKRU5GSUxFID0gMjMKRU5PQU5PID0gNTUKRU5PQlVGUyA9IDEwNQpFTk9DU0kgPSA1MApFTk9EQVRBID0gNjEKRU5PREVWID0gMTkKRU5PRU5UID0gMgpFTk9FWEVDID0gOApFTk9MQ0sgPSAzNwpFTk9MSU5LID0gNjcKRU5PTUVNID0gMTIKRU5PTVNHID0gNDIKRU5PTkVUID0gNjQKRU5PUEtHID0gNjUKRU5PUFJPVE9PUFQgPSA5MgpFTk9TUEMgPSAyOApFTk9TUiA9IDYzCkVOT1NUUiA9IDYwCkVOT1NZUyA9IDM4CkVOT1RCTEsgPSAxNQpFTk9UQ09OTiA9IDEwNwpFTk9URElSID0gMjAKRU5PVEVNUFRZID0gMzkKRU5PVE5BTSA9IDExOApFTk9UU09DSyA9IDg4CkVOT1RUWSA9IDI1CkVOT1RVTklRID0gNzYKRU5YSU8gPSA2CkVPUE5PVFNVUFAgPSA5NQpFT1ZFUkZMT1cgPSA3NQpFUEVSTSA9IDEKRVBGTk9TVVBQT1JUID0gOTYKRVBJUEUgPSAzMgpFUFJPVE8gPSA3MQpFUFJPVE9OT1NVUFBPUlQgPSA5MwpFUFJPVE9UWVBFID0gOTEKRVJBTkdFID0gMzQKRVJFTUNIRyA9IDc4CkVSRU1PVEUgPSA2NgpFUkVNT1RFSU8gPSAxMjEKRVJFU1RBUlQgPSA4NQpFUk9GUyA9IDMwCkVTSFVURE9XTiA9IDEwOApFU09DS1ROT1NVUFBPUlQgPSA5NApFU1BJUEUgPSAyOQpFU1JDSCA9IDMKRVNSTU5UID0gNjkKRVNUQUxFID0gMTE2CkVTVFJQSVBFID0gODYKRVRJTUUgPSA2MgpFVElNRURPVVQgPSAxMTAKRVRPT01BTllSRUZTID0gMTA5CkVUWFRCU1kgPSAyNgpFVUNMRUFOID0gMTE3CkVVTkFUQ0ggPSA0OQpFVVNFUlMgPSA4NwpFV09VTERCTE9DSyA9IDExCkVYREVWID0gMTgKRVhGVUxMID0gNTQKIyBlcnJvcmNvZGUK',
'/Lib/itertools.py':'',
'/Lib/random.py':'IiIiUmFuZG9tIHZhcmlhYmxlIGdlbmVyYXRvcnMuCgogICAgaW50ZWdlcnMKICAgIC0tLS0tLS0tCiAgICAgICAgICAgdW5pZm9ybSB3aXRoaW4gcmFuZ2UKCiAgICBzZXF1ZW5jZXMKICAgIC0tLS0tLS0tLQogICAgICAgICAgIHBpY2sgcmFuZG9tIGVsZW1lbnQKICAgICAgICAgICBwaWNrIHJhbmRvbSBzYW1wbGUKICAgICAgICAgICBnZW5lcmF0ZSByYW5kb20gcGVybXV0YXRpb24KCiAgICBkaXN0cmlidXRpb25zIG9uIHRoZSByZWFsIGxpbmU6CiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICB1bmlmb3JtCiAgICAgICAgICAgdHJpYW5ndWxhcgogICAgICAgICAgIG5vcm1hbCAoR2F1c3NpYW4pCiAgICAgICAgICAgbG9nbm9ybWFsCiAgICAgICAgICAgbmVnYXRpdmUgZXhwb25lbnRpYWwKICAgICAgICAgICBnYW1tYQogICAgICAgICAgIGJldGEKICAgICAgICAgICBwYXJldG8KICAgICAgICAgICBXZWlidWxsCgogICAgZGlzdHJpYnV0aW9ucyBvbiB0aGUgY2lyY2xlIChhbmdsZXMgMCB0byAycGkpCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICBjaXJjdWxhciB1bmlmb3JtCiAgICAgICAgICAgdm9uIE1pc2VzCgpHZW5lcmFsIG5vdGVzIG9uIHRoZSB1bmRlcmx5aW5nIE1lcnNlbm5lIFR3aXN0ZXIgY29yZSBnZW5lcmF0b3I6CgoqIFRoZSBwZXJpb2QgaXMgMioqMTk5MzctMS4KKiBJdCBpcyBvbmUgb2YgdGhlIG1vc3QgZXh0ZW5zaXZlbHkgdGVzdGVkIGdlbmVyYXRvcnMgaW4gZXhpc3RlbmNlLgoqIFRoZSByYW5kb20oKSBtZXRob2QgaXMgaW1wbGVtZW50ZWQgaW4gQywgZXhlY3V0ZXMgaW4gYSBzaW5nbGUgUHl0aG9uIHN0ZXAsCiAgYW5kIGlzLCB0aGVyZWZvcmUsIHRocmVhZHNhZmUuCgoiIiIKCmZyb20gd2FybmluZ3MgaW1wb3J0IHdhcm4gYXMgX3dhcm4KZnJvbSB0eXBlcyBpbXBvcnQgTWV0aG9kVHlwZSBhcyBfTWV0aG9kVHlwZSwgQnVpbHRpbk1ldGhvZFR5cGUgYXMgX0J1aWx0aW5NZXRob2RUeXBlCmZyb20gbWF0aCBpbXBvcnQgbG9nIGFzIF9sb2csIGV4cCBhcyBfZXhwLCBwaSBhcyBfcGksIGUgYXMgX2UsIGNlaWwgYXMgX2NlaWwKZnJvbSBtYXRoIGltcG9ydCBzcXJ0IGFzIF9zcXJ0LCBhY29zIGFzIF9hY29zLCBjb3MgYXMgX2Nvcywgc2luIGFzIF9zaW4KZnJvbSBvcyBpbXBvcnQgdXJhbmRvbSBhcyBfdXJhbmRvbQpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBTZXQgYXMgX1NldCwgU2VxdWVuY2UgYXMgX1NlcXVlbmNlCmZyb20gaGFzaGxpYiBpbXBvcnQgc2hhNTEyIGFzIF9zaGE1MTIKCl9fYWxsX18gPSBbIlJhbmRvbSIsInNlZWQiLCJyYW5kb20iLCJ1bmlmb3JtIiwicmFuZGludCIsImNob2ljZSIsInNhbXBsZSIsCiAgICAgICAgICAgInJhbmRyYW5nZSIsInNodWZmbGUiLCJub3JtYWx2YXJpYXRlIiwibG9nbm9ybXZhcmlhdGUiLAogICAgICAgICAgICJleHBvdmFyaWF0ZSIsInZvbm1pc2VzdmFyaWF0ZSIsImdhbW1hdmFyaWF0ZSIsInRyaWFuZ3VsYXIiLAogICAgICAgICAgICJnYXVzcyIsImJldGF2YXJpYXRlIiwicGFyZXRvdmFyaWF0ZSIsIndlaWJ1bGx2YXJpYXRlIiwKICAgICAgICAgICAiZ2V0c3RhdGUiLCJzZXRzdGF0ZSIsICJnZXRyYW5kYml0cyIsCiAgICAgICAgICAgIlN5c3RlbVJhbmRvbSJdCgpOVl9NQUdJQ0NPTlNUID0gNCAqIF9leHAoLTAuNSkvX3NxcnQoMi4wKQpUV09QSSA9IDIuMCpfcGkKTE9HNCA9IF9sb2coNC4wKQpTR19NQUdJQ0NPTlNUID0gMS4wICsgX2xvZyg0LjUpCkJQRiA9IDUzICAgICAgICAjIE51bWJlciBvZiBiaXRzIGluIGEgZmxvYXQKUkVDSVBfQlBGID0gMioqLUJQRgoKCiMgVHJhbnNsYXRlZCBieSBHdWlkbyB2YW4gUm9zc3VtIGZyb20gQyBzb3VyY2UgcHJvdmlkZWQgYnkKIyBBZHJpYW4gQmFkZGVsZXkuICBBZGFwdGVkIGJ5IFJheW1vbmQgSGV0dGluZ2VyIGZvciB1c2Ugd2l0aAojIHRoZSBNZXJzZW5uZSBUd2lzdGVyICBhbmQgb3MudXJhbmRvbSgpIGNvcmUgZ2VuZXJhdG9ycy4KCmltcG9ydCBfcmFuZG9tCgpjbGFzcyBSYW5kb20oX3JhbmRvbS5SYW5kb20pOgogICAgIiIiUmFuZG9tIG51bWJlciBnZW5lcmF0b3IgYmFzZSBjbGFzcyB1c2VkIGJ5IGJvdW5kIG1vZHVsZSBmdW5jdGlvbnMuCgogICAgVXNlZCB0byBpbnN0YW50aWF0ZSBpbnN0YW5jZXMgb2YgUmFuZG9tIHRvIGdldCBnZW5lcmF0b3JzIHRoYXQgZG9uJ3QKICAgIHNoYXJlIHN0YXRlLgoKICAgIENsYXNzIFJhbmRvbSBjYW4gYWxzbyBiZSBzdWJjbGFzc2VkIGlmIHlvdSB3YW50IHRvIHVzZSBhIGRpZmZlcmVudCBiYXNpYwogICAgZ2VuZXJhdG9yIG9mIHlvdXIgb3duIGRldmlzaW5nOiBpbiB0aGF0IGNhc2UsIG92ZXJyaWRlIHRoZSBmb2xsb3dpbmcKICAgIG1ldGhvZHM6ICByYW5kb20oKSwgc2VlZCgpLCBnZXRzdGF0ZSgpLCBhbmQgc2V0c3RhdGUoKS4KICAgIE9wdGlvbmFsbHksIGltcGxlbWVudCBhIGdldHJhbmRiaXRzKCkgbWV0aG9kIHNvIHRoYXQgcmFuZHJhbmdlKCkKICAgIGNhbiBjb3ZlciBhcmJpdHJhcmlseSBsYXJnZSByYW5nZXMuCgogICAgIiIiCgogICAgVkVSU0lPTiA9IDMgICAgICMgdXNlZCBieSBnZXRzdGF0ZS9zZXRzdGF0ZQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB4PU5vbmUpOgogICAgICAgICIiIkluaXRpYWxpemUgYW4gaW5zdGFuY2UuCgogICAgICAgIE9wdGlvbmFsIGFyZ3VtZW50IHggY29udHJvbHMgc2VlZGluZywgYXMgZm9yIFJhbmRvbS5zZWVkKCkuCiAgICAgICAgIiIiCgogICAgICAgIHNlbGYuc2VlZCh4KQogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKCiAgICBkZWYgc2VlZChzZWxmLCBhPU5vbmUsIHZlcnNpb249Mik6CiAgICAgICAgIiIiSW5pdGlhbGl6ZSBpbnRlcm5hbCBzdGF0ZSBmcm9tIGhhc2hhYmxlIG9iamVjdC4KCiAgICAgICAgTm9uZSBvciBubyBhcmd1bWVudCBzZWVkcyBmcm9tIGN1cnJlbnQgdGltZSBvciBmcm9tIGFuIG9wZXJhdGluZwogICAgICAgIHN5c3RlbSBzcGVjaWZpYyByYW5kb21uZXNzIHNvdXJjZSBpZiBhdmFpbGFibGUuCgogICAgICAgIEZvciB2ZXJzaW9uIDIgKHRoZSBkZWZhdWx0KSwgYWxsIG9mIHRoZSBiaXRzIGFyZSB1c2VkIGlmICphKiBpcyBhIHN0ciwKICAgICAgICBieXRlcywgb3IgYnl0ZWFycmF5LiAgRm9yIHZlcnNpb24gMSwgdGhlIGhhc2goKSBvZiAqYSogaXMgdXNlZCBpbnN0ZWFkLgoKICAgICAgICBJZiAqYSogaXMgYW4gaW50LCBhbGwgYml0cyBhcmUgdXNlZC4KCiAgICAgICAgIiIiCgogICAgICAgIGlmIGEgaXMgTm9uZToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYSA9IGludC5mcm9tX2J5dGVzKF91cmFuZG9tKDMyKSwgJ2JpZycpCiAgICAgICAgICAgIGV4Y2VwdCBOb3RJbXBsZW1lbnRlZEVycm9yOgogICAgICAgICAgICAgICAgaW1wb3J0IHRpbWUKICAgICAgICAgICAgICAgIGEgPSBpbnQodGltZS50aW1lKCkgKiAyNTYpICMgdXNlIGZyYWN0aW9uYWwgc2Vjb25kcwoKICAgICAgICBpZiB2ZXJzaW9uID09IDI6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoYSwgKHN0ciwgYnl0ZXMsIGJ5dGVhcnJheSkpOgogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhLCBzdHIpOgogICAgICAgICAgICAgICAgICAgIGEgPSBhLmVuY29kZSgpCiAgICAgICAgICAgICAgICBhICs9IF9zaGE1MTIoYSkuZGlnZXN0KCkKICAgICAgICAgICAgICAgIGEgPSBpbnQuZnJvbV9ieXRlcyhhLCAnYmlnJykKCiAgICAgICAgI2ZpeG1lIGJyeXRob24KICAgICAgICAjc3VwZXIoKS5zZWVkKGEpCiAgICAgICAgX3JhbmRvbS5SYW5kb20uc2VlZChzZWxmLCBhKQogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKCiAgICBkZWYgZ2V0c3RhdGUoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGludGVybmFsIHN0YXRlOyBjYW4gYmUgcGFzc2VkIHRvIHNldHN0YXRlKCkgbGF0ZXIuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuVkVSU0lPTiwgc3VwZXIoKS5nZXRzdGF0ZSgpLCBzZWxmLmdhdXNzX25leHQKCiAgICBkZWYgc2V0c3RhdGUoc2VsZiwgc3RhdGUpOgogICAgICAgICIiIlJlc3RvcmUgaW50ZXJuYWwgc3RhdGUgZnJvbSBvYmplY3QgcmV0dXJuZWQgYnkgZ2V0c3RhdGUoKS4iIiIKICAgICAgICB2ZXJzaW9uID0gc3RhdGVbMF0KICAgICAgICBpZiB2ZXJzaW9uID09IDM6CiAgICAgICAgICAgIHZlcnNpb24sIGludGVybmFsc3RhdGUsIHNlbGYuZ2F1c3NfbmV4dCA9IHN0YXRlCiAgICAgICAgICAgIHN1cGVyKCkuc2V0c3RhdGUoaW50ZXJuYWxzdGF0ZSkKICAgICAgICBlbGlmIHZlcnNpb24gPT0gMjoKICAgICAgICAgICAgdmVyc2lvbiwgaW50ZXJuYWxzdGF0ZSwgc2VsZi5nYXVzc19uZXh0ID0gc3RhdGUKICAgICAgICAgICAgIyBJbiB2ZXJzaW9uIDIsIHRoZSBzdGF0ZSB3YXMgc2F2ZWQgYXMgc2lnbmVkIGludHMsIHdoaWNoIGNhdXNlcwogICAgICAgICAgICAjICAgaW5jb25zaXN0ZW5jaWVzIGJldHdlZW4gMzIvNjQtYml0IHN5c3RlbXMuIFRoZSBzdGF0ZSBpcwogICAgICAgICAgICAjICAgcmVhbGx5IHVuc2lnbmVkIDMyLWJpdCBpbnRzLCBzbyB3ZSBjb252ZXJ0IG5lZ2F0aXZlIGludHMgZnJvbQogICAgICAgICAgICAjICAgdmVyc2lvbiAyIHRvIHBvc2l0aXZlIGxvbmdzIGZvciB2ZXJzaW9uIDMuCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGludGVybmFsc3RhdGUgPSB0dXBsZSh4ICUgKDIqKjMyKSBmb3IgeCBpbiBpbnRlcm5hbHN0YXRlKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgI2ZpeG1lIGJyeXRob24KICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcihlKQogICAgICAgICAgICAgICAgI3JhaXNlIFR5cGVFcnJvciBmcm9tIGUKICAgICAgICAgICAgc3VwZXIoKS5zZXRzdGF0ZShpbnRlcm5hbHN0YXRlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoInN0YXRlIHdpdGggdmVyc2lvbiAlcyBwYXNzZWQgdG8gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICJSYW5kb20uc2V0c3RhdGUoKSBvZiB2ZXJzaW9uICVzIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHZlcnNpb24sIHNlbGYuVkVSU0lPTikpCgojIyAtLS0tIE1ldGhvZHMgYmVsb3cgdGhpcyBwb2ludCBkbyBub3QgbmVlZCB0byBiZSBvdmVycmlkZGVuIHdoZW4KIyMgLS0tLSBzdWJjbGFzc2luZyBmb3IgdGhlIHB1cnBvc2Ugb2YgdXNpbmcgYSBkaWZmZXJlbnQgY29yZSBnZW5lcmF0b3IuCgojIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSBwaWNrbGUgc3VwcG9ydCAgLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGRlZiBfX2dldHN0YXRlX18oc2VsZik6ICMgZm9yIHBpY2tsZQogICAgICAgIHJldHVybiBzZWxmLmdldHN0YXRlKCkKCiAgICBkZWYgX19zZXRzdGF0ZV9fKHNlbGYsIHN0YXRlKTogICMgZm9yIHBpY2tsZQogICAgICAgIHNlbGYuc2V0c3RhdGUoc3RhdGUpCgogICAgZGVmIF9fcmVkdWNlX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fLCAoKSwgc2VsZi5nZXRzdGF0ZSgpCgojIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSBpbnRlZ2VyIG1ldGhvZHMgIC0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICBkZWYgcmFuZHJhbmdlKHNlbGYsIHN0YXJ0LCBzdG9wPU5vbmUsIHN0ZXA9MSwgaW50PWludCk6CiAgICAgICAgIiIiQ2hvb3NlIGEgcmFuZG9tIGl0ZW0gZnJvbSByYW5nZShzdGFydCwgc3RvcFssIHN0ZXBdKS4KCiAgICAgICAgVGhpcyBmaXhlcyB0aGUgcHJvYmxlbSB3aXRoIHJhbmRpbnQoKSB3aGljaCBpbmNsdWRlcyB0aGUKICAgICAgICBlbmRwb2ludDsgaW4gUHl0aG9uIHRoaXMgaXMgdXN1YWxseSBub3Qgd2hhdCB5b3Ugd2FudC4KCiAgICAgICAgRG8gbm90IHN1cHBseSB0aGUgJ2ludCcgYXJndW1lbnQuCiAgICAgICAgIiIiCgogICAgICAgICMgVGhpcyBjb2RlIGlzIGEgYml0IG1lc3N5IHRvIG1ha2UgaXQgZmFzdCBmb3IgdGhlCiAgICAgICAgIyBjb21tb24gY2FzZSB3aGlsZSBzdGlsbCBkb2luZyBhZGVxdWF0ZSBlcnJvciBjaGVja2luZy4KICAgICAgICBpc3RhcnQgPSBpbnQoc3RhcnQpCiAgICAgICAgaWYgaXN0YXJ0ICE9IHN0YXJ0OgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJub24taW50ZWdlciBhcmcgMSBmb3IgcmFuZHJhbmdlKCkiKQogICAgICAgIGlmIHN0b3AgaXMgTm9uZToKICAgICAgICAgICAgaWYgaXN0YXJ0ID4gMDoKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9yYW5kYmVsb3coaXN0YXJ0KQogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJlbXB0eSByYW5nZSBmb3IgcmFuZHJhbmdlKCkiKQoKICAgICAgICAjIHN0b3AgYXJndW1lbnQgc3VwcGxpZWQuCiAgICAgICAgaXN0b3AgPSBpbnQoc3RvcCkKICAgICAgICBpZiBpc3RvcCAhPSBzdG9wOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJub24taW50ZWdlciBzdG9wIGZvciByYW5kcmFuZ2UoKSIpCiAgICAgICAgd2lkdGggPSBpc3RvcCAtIGlzdGFydAogICAgICAgIGlmIHN0ZXAgPT0gMSBhbmQgd2lkdGggPiAwOgogICAgICAgICAgICByZXR1cm4gaXN0YXJ0ICsgc2VsZi5fcmFuZGJlbG93KHdpZHRoKQogICAgICAgIGlmIHN0ZXAgPT0gMToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiZW1wdHkgcmFuZ2UgZm9yIHJhbmRyYW5nZSgpICglZCwlZCwgJWQpIiAlIChpc3RhcnQsIGlzdG9wLCB3aWR0aCkpCgogICAgICAgICMgTm9uLXVuaXQgc3RlcCBhcmd1bWVudCBzdXBwbGllZC4KICAgICAgICBpc3RlcCA9IGludChzdGVwKQogICAgICAgIGlmIGlzdGVwICE9IHN0ZXA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIm5vbi1pbnRlZ2VyIHN0ZXAgZm9yIHJhbmRyYW5nZSgpIikKICAgICAgICBpZiBpc3RlcCA+IDA6CiAgICAgICAgICAgIG4gPSAod2lkdGggKyBpc3RlcCAtIDEpIC8vIGlzdGVwCiAgICAgICAgZWxpZiBpc3RlcCA8IDA6CiAgICAgICAgICAgIG4gPSAod2lkdGggKyBpc3RlcCArIDEpIC8vIGlzdGVwCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiemVybyBzdGVwIGZvciByYW5kcmFuZ2UoKSIpCgogICAgICAgIGlmIG4gPD0gMDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiZW1wdHkgcmFuZ2UgZm9yIHJhbmRyYW5nZSgpIikKCiAgICAgICAgcmV0dXJuIGlzdGFydCArIGlzdGVwKnNlbGYuX3JhbmRiZWxvdyhuKQoKICAgIGRlZiByYW5kaW50KHNlbGYsIGEsIGIpOgogICAgICAgICIiIlJldHVybiByYW5kb20gaW50ZWdlciBpbiByYW5nZSBbYSwgYl0sIGluY2x1ZGluZyBib3RoIGVuZCBwb2ludHMuCiAgICAgICAgIiIiCgogICAgICAgIHJldHVybiBzZWxmLnJhbmRyYW5nZShhLCBiKzEpCgogICAgZGVmIF9yYW5kYmVsb3coc2VsZiwgbiwgaW50PWludCwgbWF4c2l6ZT0xPDxCUEYsIHR5cGU9dHlwZSwKICAgICAgICAgICAgICAgICAgIE1ldGhvZD1fTWV0aG9kVHlwZSwgQnVpbHRpbk1ldGhvZD1fQnVpbHRpbk1ldGhvZFR5cGUpOgogICAgICAgICJSZXR1cm4gYSByYW5kb20gaW50IGluIHRoZSByYW5nZSBbMCxuKS4gIFJhaXNlcyBWYWx1ZUVycm9yIGlmIG49PTAuIgoKICAgICAgICBnZXRyYW5kYml0cyA9IHNlbGYuZ2V0cmFuZGJpdHMKICAgICAgICAjIE9ubHkgY2FsbCBzZWxmLmdldHJhbmRiaXRzIGlmIHRoZSBvcmlnaW5hbCByYW5kb20oKSBidWlsdGluIG1ldGhvZAogICAgICAgICMgaGFzIG5vdCBiZWVuIG92ZXJyaWRkZW4gb3IgaWYgYSBuZXcgZ2V0cmFuZGJpdHMoKSB3YXMgc3VwcGxpZWQuCiAgICAgICAgaWYgdHlwZShzZWxmLnJhbmRvbSkgaXMgQnVpbHRpbk1ldGhvZCBvciB0eXBlKGdldHJhbmRiaXRzKSBpcyBNZXRob2Q6CiAgICAgICAgICAgIGsgPSBuLmJpdF9sZW5ndGgoKSAgIyBkb24ndCB1c2UgKG4tMSkgaGVyZSBiZWNhdXNlIG4gY2FuIGJlIDEKICAgICAgICAgICAgciA9IGdldHJhbmRiaXRzKGspICAgICAgICAgICMgMCA8PSByIDwgMioqawogICAgICAgICAgICB3aGlsZSByID49IG46CiAgICAgICAgICAgICAgICByID0gZ2V0cmFuZGJpdHMoaykKICAgICAgICAgICAgcmV0dXJuIHIKICAgICAgICAjIFRoZXJlJ3MgYW4gb3ZlcnJpZGVuIHJhbmRvbSgpIG1ldGhvZCBidXQgbm8gbmV3IGdldHJhbmRiaXRzKCkgbWV0aG9kLAogICAgICAgICMgc28gd2UgY2FuIG9ubHkgdXNlIHJhbmRvbSgpIGZyb20gaGVyZS4KICAgICAgICByYW5kb20gPSBzZWxmLnJhbmRvbQogICAgICAgIGlmIG4gPj0gbWF4c2l6ZToKICAgICAgICAgICAgX3dhcm4oIlVuZGVybHlpbmcgcmFuZG9tKCkgZ2VuZXJhdG9yIGRvZXMgbm90IHN1cHBseSBcbiIKICAgICAgICAgICAgICAgICJlbm91Z2ggYml0cyB0byBjaG9vc2UgZnJvbSBhIHBvcHVsYXRpb24gcmFuZ2UgdGhpcyBsYXJnZS5cbiIKICAgICAgICAgICAgICAgICJUbyByZW1vdmUgdGhlIHJhbmdlIGxpbWl0YXRpb24sIGFkZCBhIGdldHJhbmRiaXRzKCkgbWV0aG9kLiIpCiAgICAgICAgICAgIHJldHVybiBpbnQocmFuZG9tKCkgKiBuKQogICAgICAgIHJlbSA9IG1heHNpemUgJSBuCiAgICAgICAgbGltaXQgPSAobWF4c2l6ZSAtIHJlbSkgLyBtYXhzaXplICAgIyBpbnQobGltaXQgKiBtYXhzaXplKSAlIG4gPT0gMAogICAgICAgIHIgPSByYW5kb20oKQogICAgICAgIHdoaWxlIHIgPj0gbGltaXQ6CiAgICAgICAgICAgIHIgPSByYW5kb20oKQogICAgICAgIHJldHVybiBpbnQociptYXhzaXplKSAlIG4KCiMjIC0tLS0tLS0tLS0tLS0tLS0tLS0tIHNlcXVlbmNlIG1ldGhvZHMgIC0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICBkZWYgY2hvaWNlKHNlbGYsIHNlcSk6CiAgICAgICAgIiIiQ2hvb3NlIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBhIG5vbi1lbXB0eSBzZXF1ZW5jZS4iIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGkgPSBzZWxmLl9yYW5kYmVsb3cobGVuKHNlcSkpCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIHJhaXNlIEluZGV4RXJyb3IoJ0Nhbm5vdCBjaG9vc2UgZnJvbSBhbiBlbXB0eSBzZXF1ZW5jZScpCiAgICAgICAgcmV0dXJuIHNlcVtpXQoKICAgIGRlZiBzaHVmZmxlKHNlbGYsIHgsIHJhbmRvbT1Ob25lLCBpbnQ9aW50KToKICAgICAgICAiIiJ4LCByYW5kb209cmFuZG9tLnJhbmRvbSAtPiBzaHVmZmxlIGxpc3QgeCBpbiBwbGFjZTsgcmV0dXJuIE5vbmUuCgogICAgICAgIE9wdGlvbmFsIGFyZyByYW5kb20gaXMgYSAwLWFyZ3VtZW50IGZ1bmN0aW9uIHJldHVybmluZyBhIHJhbmRvbQogICAgICAgIGZsb2F0IGluIFswLjAsIDEuMCk7IGJ5IGRlZmF1bHQsIHRoZSBzdGFuZGFyZCByYW5kb20ucmFuZG9tLgogICAgICAgICIiIgoKICAgICAgICByYW5kYmVsb3cgPSBzZWxmLl9yYW5kYmVsb3cKICAgICAgICBmb3IgaSBpbiByZXZlcnNlZChyYW5nZSgxLCBsZW4oeCkpKToKICAgICAgICAgICAgIyBwaWNrIGFuIGVsZW1lbnQgaW4geFs6aSsxXSB3aXRoIHdoaWNoIHRvIGV4Y2hhbmdlIHhbaV0KICAgICAgICAgICAgaiA9IHJhbmRiZWxvdyhpKzEpIGlmIHJhbmRvbSBpcyBOb25lIGVsc2UgaW50KHJhbmRvbSgpICogKGkrMSkpCiAgICAgICAgICAgIHhbaV0sIHhbal0gPSB4W2pdLCB4W2ldCgogICAgZGVmIHNhbXBsZShzZWxmLCBwb3B1bGF0aW9uLCBrKToKICAgICAgICAiIiJDaG9vc2VzIGsgdW5pcXVlIHJhbmRvbSBlbGVtZW50cyBmcm9tIGEgcG9wdWxhdGlvbiBzZXF1ZW5jZSBvciBzZXQuCgogICAgICAgIFJldHVybnMgYSBuZXcgbGlzdCBjb250YWluaW5nIGVsZW1lbnRzIGZyb20gdGhlIHBvcHVsYXRpb24gd2hpbGUKICAgICAgICBsZWF2aW5nIHRoZSBvcmlnaW5hbCBwb3B1bGF0aW9uIHVuY2hhbmdlZC4gIFRoZSByZXN1bHRpbmcgbGlzdCBpcwogICAgICAgIGluIHNlbGVjdGlvbiBvcmRlciBzbyB0aGF0IGFsbCBzdWItc2xpY2VzIHdpbGwgYWxzbyBiZSB2YWxpZCByYW5kb20KICAgICAgICBzYW1wbGVzLiAgVGhpcyBhbGxvd3MgcmFmZmxlIHdpbm5lcnMgKHRoZSBzYW1wbGUpIHRvIGJlIHBhcnRpdGlvbmVkCiAgICAgICAgaW50byBncmFuZCBwcml6ZSBhbmQgc2Vjb25kIHBsYWNlIHdpbm5lcnMgKHRoZSBzdWJzbGljZXMpLgoKICAgICAgICBNZW1iZXJzIG9mIHRoZSBwb3B1bGF0aW9uIG5lZWQgbm90IGJlIGhhc2hhYmxlIG9yIHVuaXF1ZS4gIElmIHRoZQogICAgICAgIHBvcHVsYXRpb24gY29udGFpbnMgcmVwZWF0cywgdGhlbiBlYWNoIG9jY3VycmVuY2UgaXMgYSBwb3NzaWJsZQogICAgICAgIHNlbGVjdGlvbiBpbiB0aGUgc2FtcGxlLgoKICAgICAgICBUbyBjaG9vc2UgYSBzYW1wbGUgaW4gYSByYW5nZSBvZiBpbnRlZ2VycywgdXNlIHJhbmdlIGFzIGFuIGFyZ3VtZW50LgogICAgICAgIFRoaXMgaXMgZXNwZWNpYWxseSBmYXN0IGFuZCBzcGFjZSBlZmZpY2llbnQgZm9yIHNhbXBsaW5nIGZyb20gYQogICAgICAgIGxhcmdlIHBvcHVsYXRpb246ICAgc2FtcGxlKHJhbmdlKDEwMDAwMDAwKSwgNjApCiAgICAgICAgIiIiCgogICAgICAgICMgU2FtcGxpbmcgd2l0aG91dCByZXBsYWNlbWVudCBlbnRhaWxzIHRyYWNraW5nIGVpdGhlciBwb3RlbnRpYWwKICAgICAgICAjIHNlbGVjdGlvbnMgKHRoZSBwb29sKSBpbiBhIGxpc3Qgb3IgcHJldmlvdXMgc2VsZWN0aW9ucyBpbiBhIHNldC4KCiAgICAgICAgIyBXaGVuIHRoZSBudW1iZXIgb2Ygc2VsZWN0aW9ucyBpcyBzbWFsbCBjb21wYXJlZCB0byB0aGUKICAgICAgICAjIHBvcHVsYXRpb24sIHRoZW4gdHJhY2tpbmcgc2VsZWN0aW9ucyBpcyBlZmZpY2llbnQsIHJlcXVpcmluZwogICAgICAgICMgb25seSBhIHNtYWxsIHNldCBhbmQgYW4gb2NjYXNpb25hbCByZXNlbGVjdGlvbi4gIEZvcgogICAgICAgICMgYSBsYXJnZXIgbnVtYmVyIG9mIHNlbGVjdGlvbnMsIHRoZSBwb29sIHRyYWNraW5nIG1ldGhvZCBpcwogICAgICAgICMgcHJlZmVycmVkIHNpbmNlIHRoZSBsaXN0IHRha2VzIGxlc3Mgc3BhY2UgdGhhbiB0aGUKICAgICAgICAjIHNldCBhbmQgaXQgZG9lc24ndCBzdWZmZXIgZnJvbSBmcmVxdWVudCByZXNlbGVjdGlvbnMuCgogICAgICAgIGlmIGlzaW5zdGFuY2UocG9wdWxhdGlvbiwgX1NldCk6CiAgICAgICAgICAgIHBvcHVsYXRpb24gPSB0dXBsZShwb3B1bGF0aW9uKQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHBvcHVsYXRpb24sIF9TZXF1ZW5jZSk6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiUG9wdWxhdGlvbiBtdXN0IGJlIGEgc2VxdWVuY2Ugb3Igc2V0LiAgRm9yIGRpY3RzLCB1c2UgbGlzdChkKS4iKQogICAgICAgIHJhbmRiZWxvdyA9IHNlbGYuX3JhbmRiZWxvdwogICAgICAgIG4gPSBsZW4ocG9wdWxhdGlvbikKICAgICAgICBpZiBub3QgMCA8PSBrIDw9IG46CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIlNhbXBsZSBsYXJnZXIgdGhhbiBwb3B1bGF0aW9uIikKICAgICAgICByZXN1bHQgPSBbTm9uZV0gKiBrCiAgICAgICAgc2V0c2l6ZSA9IDIxICAgICAgICAjIHNpemUgb2YgYSBzbWFsbCBzZXQgbWludXMgc2l6ZSBvZiBhbiBlbXB0eSBsaXN0CiAgICAgICAgaWYgayA+IDU6CiAgICAgICAgICAgIHNldHNpemUgKz0gNCAqKiBfY2VpbChfbG9nKGsgKiAzLCA0KSkgIyB0YWJsZSBzaXplIGZvciBiaWcgc2V0cwogICAgICAgIGlmIG4gPD0gc2V0c2l6ZToKICAgICAgICAgICAgIyBBbiBuLWxlbmd0aCBsaXN0IGlzIHNtYWxsZXIgdGhhbiBhIGstbGVuZ3RoIHNldAogICAgICAgICAgICBwb29sID0gbGlzdChwb3B1bGF0aW9uKQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShrKTogICAgICAgICAjIGludmFyaWFudDogIG5vbi1zZWxlY3RlZCBhdCBbMCxuLWkpCiAgICAgICAgICAgICAgICBqID0gcmFuZGJlbG93KG4taSkKICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHBvb2xbal0KICAgICAgICAgICAgICAgIHBvb2xbal0gPSBwb29sW24taS0xXSAgICMgbW92ZSBub24tc2VsZWN0ZWQgaXRlbSBpbnRvIHZhY2FuY3kKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxlY3RlZCA9IHNldCgpCiAgICAgICAgICAgIHNlbGVjdGVkX2FkZCA9IHNlbGVjdGVkLmFkZAogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShrKToKICAgICAgICAgICAgICAgIGogPSByYW5kYmVsb3cobikKICAgICAgICAgICAgICAgIHdoaWxlIGogaW4gc2VsZWN0ZWQ6CiAgICAgICAgICAgICAgICAgICAgaiA9IHJhbmRiZWxvdyhuKQogICAgICAgICAgICAgICAgc2VsZWN0ZWRfYWRkKGopCiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBwb3B1bGF0aW9uW2pdCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKIyMgLS0tLS0tLS0tLS0tLS0tLS0tLS0gcmVhbC12YWx1ZWQgZGlzdHJpYnV0aW9ucyAgLS0tLS0tLS0tLS0tLS0tLS0tLQoKIyMgLS0tLS0tLS0tLS0tLS0tLS0tLS0gdW5pZm9ybSBkaXN0cmlidXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGRlZiB1bmlmb3JtKHNlbGYsIGEsIGIpOgogICAgICAgICJHZXQgYSByYW5kb20gbnVtYmVyIGluIHRoZSByYW5nZSBbYSwgYikgb3IgW2EsIGJdIGRlcGVuZGluZyBvbiByb3VuZGluZy4iCiAgICAgICAgcmV0dXJuIGEgKyAoYi1hKSAqIHNlbGYucmFuZG9tKCkKCiMjIC0tLS0tLS0tLS0tLS0tLS0tLS0tIHRyaWFuZ3VsYXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICBkZWYgdHJpYW5ndWxhcihzZWxmLCBsb3c9MC4wLCBoaWdoPTEuMCwgbW9kZT1Ob25lKToKICAgICAgICAiIiJUcmlhbmd1bGFyIGRpc3RyaWJ1dGlvbi4KCiAgICAgICAgQ29udGludW91cyBkaXN0cmlidXRpb24gYm91bmRlZCBieSBnaXZlbiBsb3dlciBhbmQgdXBwZXIgbGltaXRzLAogICAgICAgIGFuZCBoYXZpbmcgYSBnaXZlbiBtb2RlIHZhbHVlIGluLWJldHdlZW4uCgogICAgICAgIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVHJpYW5ndWxhcl9kaXN0cmlidXRpb24KCiAgICAgICAgIiIiCiAgICAgICAgdSA9IHNlbGYucmFuZG9tKCkKICAgICAgICBjID0gMC41IGlmIG1vZGUgaXMgTm9uZSBlbHNlIChtb2RlIC0gbG93KSAvIChoaWdoIC0gbG93KQogICAgICAgIGlmIHUgPiBjOgogICAgICAgICAgICB1ID0gMS4wIC0gdQogICAgICAgICAgICBjID0gMS4wIC0gYwogICAgICAgICAgICBsb3csIGhpZ2ggPSBoaWdoLCBsb3cKICAgICAgICByZXR1cm4gbG93ICsgKGhpZ2ggLSBsb3cpICogKHUgKiBjKSAqKiAwLjUKCiMjIC0tLS0tLS0tLS0tLS0tLS0tLS0tIG5vcm1hbCBkaXN0cmlidXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICBkZWYgbm9ybWFsdmFyaWF0ZShzZWxmLCBtdSwgc2lnbWEpOgogICAgICAgICIiIk5vcm1hbCBkaXN0cmlidXRpb24uCgogICAgICAgIG11IGlzIHRoZSBtZWFuLCBhbmQgc2lnbWEgaXMgdGhlIHN0YW5kYXJkIGRldmlhdGlvbi4KCiAgICAgICAgIiIiCiAgICAgICAgIyBtdSA9IG1lYW4sIHNpZ21hID0gc3RhbmRhcmQgZGV2aWF0aW9uCgogICAgICAgICMgVXNlcyBLaW5kZXJtYW4gYW5kIE1vbmFoYW4gbWV0aG9kLiBSZWZlcmVuY2U6IEtpbmRlcm1hbiwKICAgICAgICAjIEEuSi4gYW5kIE1vbmFoYW4sIEouRi4sICJDb21wdXRlciBnZW5lcmF0aW9uIG9mIHJhbmRvbQogICAgICAgICMgdmFyaWFibGVzIHVzaW5nIHRoZSByYXRpbyBvZiB1bmlmb3JtIGRldmlhdGVzIiwgQUNNIFRyYW5zCiAgICAgICAgIyBNYXRoIFNvZnR3YXJlLCAzLCAoMTk3NyksIHBwMjU3LTI2MC4KCiAgICAgICAgcmFuZG9tID0gc2VsZi5yYW5kb20KICAgICAgICB3aGlsZSAxOgogICAgICAgICAgICB1MSA9IHJhbmRvbSgpCiAgICAgICAgICAgIHUyID0gMS4wIC0gcmFuZG9tKCkKICAgICAgICAgICAgeiA9IE5WX01BR0lDQ09OU1QqKHUxLTAuNSkvdTIKICAgICAgICAgICAgenogPSB6KnovNC4wCiAgICAgICAgICAgIGlmIHp6IDw9IC1fbG9nKHUyKToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgcmV0dXJuIG11ICsgeipzaWdtYQoKIyMgLS0tLS0tLS0tLS0tLS0tLS0tLS0gbG9nbm9ybWFsIGRpc3RyaWJ1dGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGRlZiBsb2dub3JtdmFyaWF0ZShzZWxmLCBtdSwgc2lnbWEpOgogICAgICAgICIiIkxvZyBub3JtYWwgZGlzdHJpYnV0aW9uLgoKICAgICAgICBJZiB5b3UgdGFrZSB0aGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgdGhpcyBkaXN0cmlidXRpb24sIHlvdSdsbCBnZXQgYQogICAgICAgIG5vcm1hbCBkaXN0cmlidXRpb24gd2l0aCBtZWFuIG11IGFuZCBzdGFuZGFyZCBkZXZpYXRpb24gc2lnbWEuCiAgICAgICAgbXUgY2FuIGhhdmUgYW55IHZhbHVlLCBhbmQgc2lnbWEgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVyby4KCiAgICAgICAgIiIiCiAgICAgICAgcmV0dXJuIF9leHAoc2VsZi5ub3JtYWx2YXJpYXRlKG11LCBzaWdtYSkpCgojIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSBleHBvbmVudGlhbCBkaXN0cmlidXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICBkZWYgZXhwb3ZhcmlhdGUoc2VsZiwgbGFtYmQpOgogICAgICAgICIiIkV4cG9uZW50aWFsIGRpc3RyaWJ1dGlvbi4KCiAgICAgICAgbGFtYmQgaXMgMS4wIGRpdmlkZWQgYnkgdGhlIGRlc2lyZWQgbWVhbi4gIEl0IHNob3VsZCBiZQogICAgICAgIG5vbnplcm8uICAoVGhlIHBhcmFtZXRlciB3b3VsZCBiZSBjYWxsZWQgImxhbWJkYSIsIGJ1dCB0aGF0IGlzCiAgICAgICAgYSByZXNlcnZlZCB3b3JkIGluIFB5dGhvbi4pICBSZXR1cm5lZCB2YWx1ZXMgcmFuZ2UgZnJvbSAwIHRvCiAgICAgICAgcG9zaXRpdmUgaW5maW5pdHkgaWYgbGFtYmQgaXMgcG9zaXRpdmUsIGFuZCBmcm9tIG5lZ2F0aXZlCiAgICAgICAgaW5maW5pdHkgdG8gMCBpZiBsYW1iZCBpcyBuZWdhdGl2ZS4KCiAgICAgICAgIiIiCiAgICAgICAgIyBsYW1iZDogcmF0ZSBsYW1iZCA9IDEvbWVhbgogICAgICAgICMgKCdsYW1iZGEnIGlzIGEgUHl0aG9uIHJlc2VydmVkIHdvcmQpCgogICAgICAgICMgd2UgdXNlIDEtcmFuZG9tKCkgaW5zdGVhZCBvZiByYW5kb20oKSB0byBwcmVjbHVkZSB0aGUKICAgICAgICAjIHBvc3NpYmlsaXR5IG9mIHRha2luZyB0aGUgbG9nIG9mIHplcm8uCiAgICAgICAgcmV0dXJuIC1fbG9nKDEuMCAtIHNlbGYucmFuZG9tKCkpL2xhbWJkCgojIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSB2b24gTWlzZXMgZGlzdHJpYnV0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZGVmIHZvbm1pc2VzdmFyaWF0ZShzZWxmLCBtdSwga2FwcGEpOgogICAgICAgICIiIkNpcmN1bGFyIGRhdGEgZGlzdHJpYnV0aW9uLgoKICAgICAgICBtdSBpcyB0aGUgbWVhbiBhbmdsZSwgZXhwcmVzc2VkIGluIHJhZGlhbnMgYmV0d2VlbiAwIGFuZCAyKnBpLCBhbmQKICAgICAgICBrYXBwYSBpcyB0aGUgY29uY2VudHJhdGlvbiBwYXJhbWV0ZXIsIHdoaWNoIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yCiAgICAgICAgZXF1YWwgdG8gemVyby4gIElmIGthcHBhIGlzIGVxdWFsIHRvIHplcm8sIHRoaXMgZGlzdHJpYnV0aW9uIHJlZHVjZXMKICAgICAgICB0byBhIHVuaWZvcm0gcmFuZG9tIGFuZ2xlIG92ZXIgdGhlIHJhbmdlIDAgdG8gMipwaS4KCiAgICAgICAgIiIiCiAgICAgICAgIyBtdTogICAgbWVhbiBhbmdsZSAoaW4gcmFkaWFucyBiZXR3ZWVuIDAgYW5kIDIqcGkpCiAgICAgICAgIyBrYXBwYTogY29uY2VudHJhdGlvbiBwYXJhbWV0ZXIga2FwcGEgKD49IDApCiAgICAgICAgIyBpZiBrYXBwYSA9IDAgZ2VuZXJhdGUgdW5pZm9ybSByYW5kb20gYW5nbGUKCiAgICAgICAgIyBCYXNlZCB1cG9uIGFuIGFsZ29yaXRobSBwdWJsaXNoZWQgaW46IEZpc2hlciwgTi5JLiwKICAgICAgICAjICJTdGF0aXN0aWNhbCBBbmFseXNpcyBvZiBDaXJjdWxhciBEYXRhIiwgQ2FtYnJpZGdlCiAgICAgICAgIyBVbml2ZXJzaXR5IFByZXNzLCAxOTkzLgoKICAgICAgICAjIFRoYW5rcyB0byBNYWdudXMgS2Vzc2xlciBmb3IgYSBjb3JyZWN0aW9uIHRvIHRoZQogICAgICAgICMgaW1wbGVtZW50YXRpb24gb2Ygc3RlcCA0LgoKICAgICAgICByYW5kb20gPSBzZWxmLnJhbmRvbQogICAgICAgIGlmIGthcHBhIDw9IDFlLTY6CiAgICAgICAgICAgIHJldHVybiBUV09QSSAqIHJhbmRvbSgpCgogICAgICAgIGEgPSAxLjAgKyBfc3FydCgxLjAgKyA0LjAgKiBrYXBwYSAqIGthcHBhKQogICAgICAgIGIgPSAoYSAtIF9zcXJ0KDIuMCAqIGEpKS8oMi4wICoga2FwcGEpCiAgICAgICAgciA9ICgxLjAgKyBiICogYikvKDIuMCAqIGIpCgogICAgICAgIHdoaWxlIDE6CiAgICAgICAgICAgIHUxID0gcmFuZG9tKCkKCiAgICAgICAgICAgIHogPSBfY29zKF9waSAqIHUxKQogICAgICAgICAgICBmID0gKDEuMCArIHIgKiB6KS8ociArIHopCiAgICAgICAgICAgIGMgPSBrYXBwYSAqIChyIC0gZikKCiAgICAgICAgICAgIHUyID0gcmFuZG9tKCkKCiAgICAgICAgICAgIGlmIHUyIDwgYyAqICgyLjAgLSBjKSBvciB1MiA8PSBjICogX2V4cCgxLjAgLSBjKToKICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgIHUzID0gcmFuZG9tKCkKICAgICAgICBpZiB1MyA+IDAuNToKICAgICAgICAgICAgdGhldGEgPSAobXUgJSBUV09QSSkgKyBfYWNvcyhmKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHRoZXRhID0gKG11ICUgVFdPUEkpIC0gX2Fjb3MoZikKCiAgICAgICAgcmV0dXJuIHRoZXRhCgojIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSBnYW1tYSBkaXN0cmlidXRpb24gLS0tLS0tLS0tLS0tLS0tLS0tLS0KCiAgICBkZWYgZ2FtbWF2YXJpYXRlKHNlbGYsIGFscGhhLCBiZXRhKToKICAgICAgICAiIiJHYW1tYSBkaXN0cmlidXRpb24uICBOb3QgdGhlIGdhbW1hIGZ1bmN0aW9uIQoKICAgICAgICBDb25kaXRpb25zIG9uIHRoZSBwYXJhbWV0ZXJzIGFyZSBhbHBoYSA+IDAgYW5kIGJldGEgPiAwLgoKICAgICAgICBUaGUgcHJvYmFiaWxpdHkgZGlzdHJpYnV0aW9uIGZ1bmN0aW9uIGlzOgoKICAgICAgICAgICAgICAgICAgICB4ICoqIChhbHBoYSAtIDEpICogbWF0aC5leHAoLXggLyBiZXRhKQogICAgICAgICAgcGRmKHgpID0gIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgICAgICAgICAgICAgICAgICAgICBtYXRoLmdhbW1hKGFscGhhKSAqIGJldGEgKiogYWxwaGEKCiAgICAgICAgIiIiCgogICAgICAgICMgYWxwaGEgPiAwLCBiZXRhID4gMCwgbWVhbiBpcyBhbHBoYSpiZXRhLCB2YXJpYW5jZSBpcyBhbHBoYSpiZXRhKioyCgogICAgICAgICMgV2FybmluZzogYSBmZXcgb2xkZXIgc291cmNlcyBkZWZpbmUgdGhlIGdhbW1hIGRpc3RyaWJ1dGlvbiBpbiB0ZXJtcwogICAgICAgICMgb2YgYWxwaGEgPiAtMS4wCiAgICAgICAgaWYgYWxwaGEgPD0gMC4wIG9yIGJldGEgPD0gMC4wOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdnYW1tYXZhcmlhdGU6IGFscGhhIGFuZCBiZXRhIG11c3QgYmUgPiAwLjAnKQoKICAgICAgICByYW5kb20gPSBzZWxmLnJhbmRvbQogICAgICAgIGlmIGFscGhhID4gMS4wOgoKICAgICAgICAgICAgIyBVc2VzIFIuQy5ILiBDaGVuZywgIlRoZSBnZW5lcmF0aW9uIG9mIEdhbW1hCiAgICAgICAgICAgICMgdmFyaWFibGVzIHdpdGggbm9uLWludGVncmFsIHNoYXBlIHBhcmFtZXRlcnMiLAogICAgICAgICAgICAjIEFwcGxpZWQgU3RhdGlzdGljcywgKDE5NzcpLCAyNiwgTm8uIDEsIHA3MS03NAoKICAgICAgICAgICAgYWludiA9IF9zcXJ0KDIuMCAqIGFscGhhIC0gMS4wKQogICAgICAgICAgICBiYmIgPSBhbHBoYSAtIExPRzQKICAgICAgICAgICAgY2NjID0gYWxwaGEgKyBhaW52CgogICAgICAgICAgICB3aGlsZSAxOgogICAgICAgICAgICAgICAgdTEgPSByYW5kb20oKQogICAgICAgICAgICAgICAgI2ZpeG1lIGJyeXRob24KICAgICAgICAgICAgICAgICNpZiBub3QgMWUtNyA8IHUxIDwgLjk5OTk5OTk6CiAgICAgICAgICAgICAgICBpZiBub3QgMWUtNyA8IHUxIDwgMC45OTk5OTk5OgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICB1MiA9IDEuMCAtIHJhbmRvbSgpCiAgICAgICAgICAgICAgICB2ID0gX2xvZyh1MS8oMS4wLXUxKSkvYWludgogICAgICAgICAgICAgICAgeCA9IGFscGhhKl9leHAodikKICAgICAgICAgICAgICAgIHogPSB1MSp1MSp1MgogICAgICAgICAgICAgICAgciA9IGJiYitjY2Mqdi14CiAgICAgICAgICAgICAgICBpZiByICsgU0dfTUFHSUNDT05TVCAtIDQuNSp6ID49IDAuMCBvciByID49IF9sb2coeik6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHggKiBiZXRhCgogICAgICAgIGVsaWYgYWxwaGEgPT0gMS4wOgogICAgICAgICAgICAjIGV4cG92YXJpYXRlKDEpCiAgICAgICAgICAgIHUgPSByYW5kb20oKQogICAgICAgICAgICB3aGlsZSB1IDw9IDFlLTc6CiAgICAgICAgICAgICAgICB1ID0gcmFuZG9tKCkKICAgICAgICAgICAgcmV0dXJuIC1fbG9nKHUpICogYmV0YQoKICAgICAgICBlbHNlOiAgICMgYWxwaGEgaXMgYmV0d2VlbiAwIGFuZCAxIChleGNsdXNpdmUpCgogICAgICAgICAgICAjIFVzZXMgQUxHT1JJVEhNIEdTIG9mIFN0YXRpc3RpY2FsIENvbXB1dGluZyAtIEtlbm5lZHkgJiBHZW50bGUKCiAgICAgICAgICAgIHdoaWxlIDE6CiAgICAgICAgICAgICAgICB1ID0gcmFuZG9tKCkKICAgICAgICAgICAgICAgIGIgPSAoX2UgKyBhbHBoYSkvX2UKICAgICAgICAgICAgICAgIHAgPSBiKnUKICAgICAgICAgICAgICAgIGlmIHAgPD0gMS4wOgogICAgICAgICAgICAgICAgICAgIHggPSBwICoqICgxLjAvYWxwaGEpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHggPSAtX2xvZygoYi1wKS9hbHBoYSkKICAgICAgICAgICAgICAgIHUxID0gcmFuZG9tKCkKICAgICAgICAgICAgICAgIGlmIHAgPiAxLjA6CiAgICAgICAgICAgICAgICAgICAgaWYgdTEgPD0geCAqKiAoYWxwaGEgLSAxLjApOgogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiB1MSA8PSBfZXhwKC14KToKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICByZXR1cm4geCAqIGJldGEKCiMjIC0tLS0tLS0tLS0tLS0tLS0tLS0tIEdhdXNzIChmYXN0ZXIgYWx0ZXJuYXRpdmUpIC0tLS0tLS0tLS0tLS0tLS0tLS0tCgogICAgZGVmIGdhdXNzKHNlbGYsIG11LCBzaWdtYSk6CiAgICAgICAgIiIiR2F1c3NpYW4gZGlzdHJpYnV0aW9uLgoKICAgICAgICBtdSBpcyB0aGUgbWVhbiwgYW5kIHNpZ21hIGlzIHRoZSBzdGFuZGFyZCBkZXZpYXRpb24uICBUaGlzIGlzCiAgICAgICAgc2xpZ2h0bHkgZmFzdGVyIHRoYW4gdGhlIG5vcm1hbHZhcmlhdGUoKSBmdW5jdGlvbi4KCiAgICAgICAgTm90IHRocmVhZC1zYWZlIHdpdGhvdXQgYSBsb2NrIGFyb3VuZCBjYWxscy4KCiAgICAgICAgIiIiCgogICAgICAgICMgV2hlbiB4IGFuZCB5IGFyZSB0d28gdmFyaWFibGVzIGZyb20gWzAsIDEpLCB1bmlmb3JtbHkKICAgICAgICAjIGRpc3RyaWJ1dGVkLCB0aGVuCiAgICAgICAgIwogICAgICAgICMgICAgY29zKDIqcGkqeCkqc3FydCgtMipsb2coMS15KSkKICAgICAgICAjICAgIHNpbigyKnBpKngpKnNxcnQoLTIqbG9nKDEteSkpCiAgICAgICAgIwogICAgICAgICMgYXJlIHR3byAqaW5kZXBlbmRlbnQqIHZhcmlhYmxlcyB3aXRoIG5vcm1hbCBkaXN0cmlidXRpb24KICAgICAgICAjIChtdSA9IDAsIHNpZ21hID0gMSkuCiAgICAgICAgIyAoTGFtYmVydCBNZWVydGVucykKICAgICAgICAjIChjb3JyZWN0ZWQgdmVyc2lvbjsgYnVnIGRpc2NvdmVyZWQgYnkgTWlrZSBNaWxsZXIsIGZpeGVkIGJ5IExNKQoKICAgICAgICAjIE11bHRpdGhyZWFkaW5nIG5vdGU6IFdoZW4gdHdvIHRocmVhZHMgY2FsbCB0aGlzIGZ1bmN0aW9uCiAgICAgICAgIyBzaW11bHRhbmVvdXNseSwgaXQgaXMgcG9zc2libGUgdGhhdCB0aGV5IHdpbGwgcmVjZWl2ZSB0aGUKICAgICAgICAjIHNhbWUgcmV0dXJuIHZhbHVlLiAgVGhlIHdpbmRvdyBpcyB2ZXJ5IHNtYWxsIHRob3VnaC4gIFRvCiAgICAgICAgIyBhdm9pZCB0aGlzLCB5b3UgaGF2ZSB0byB1c2UgYSBsb2NrIGFyb3VuZCBhbGwgY2FsbHMuICAoSQogICAgICAgICMgZGlkbid0IHdhbnQgdG8gc2xvdyB0aGlzIGRvd24gaW4gdGhlIHNlcmlhbCBjYXNlIGJ5IHVzaW5nIGEKICAgICAgICAjIGxvY2sgaGVyZS4pCgogICAgICAgIHJhbmRvbSA9IHNlbGYucmFuZG9tCiAgICAgICAgeiA9IHNlbGYuZ2F1c3NfbmV4dAogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKICAgICAgICBpZiB6IGlzIE5vbmU6CiAgICAgICAgICAgIHgycGkgPSByYW5kb20oKSAqIFRXT1BJCiAgICAgICAgICAgIGcycmFkID0gX3NxcnQoLTIuMCAqIF9sb2coMS4wIC0gcmFuZG9tKCkpKQogICAgICAgICAgICB6ID0gX2Nvcyh4MnBpKSAqIGcycmFkCiAgICAgICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IF9zaW4oeDJwaSkgKiBnMnJhZAoKICAgICAgICByZXR1cm4gbXUgKyB6KnNpZ21hCgojIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSBiZXRhIC0tLS0tLS0tLS0tLS0tLS0tLS0tCiMjIFNlZQojIyBodHRwOi8vbWFpbC5weXRob24ub3JnL3BpcGVybWFpbC9weXRob24tYnVncy1saXN0LzIwMDEtSmFudWFyeS8wMDM3NTIuaHRtbAojIyBmb3IgSXZhbiBGcm9obmUncyBpbnNpZ2h0ZnVsIGFuYWx5c2lzIG9mIHdoeSB0aGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb246CiMjCiMjICAgIGRlZiBiZXRhdmFyaWF0ZShzZWxmLCBhbHBoYSwgYmV0YSk6CiMjICAgICAgICAjIERpc2NyZXRlIEV2ZW50IFNpbXVsYXRpb24gaW4gQywgcHAgODctODguCiMjCiMjICAgICAgICB5ID0gc2VsZi5leHBvdmFyaWF0ZShhbHBoYSkKIyMgICAgICAgIHogPSBzZWxmLmV4cG92YXJpYXRlKDEuMC9iZXRhKQojIyAgICAgICAgcmV0dXJuIHovKHkreikKIyMKIyMgd2FzIGRlYWQgd3JvbmcsIGFuZCBob3cgaXQgcHJvYmFibHkgZ290IHRoYXQgd2F5LgoKICAgIGRlZiBiZXRhdmFyaWF0ZShzZWxmLCBhbHBoYSwgYmV0YSk6CiAgICAgICAgIiIiQmV0YSBkaXN0cmlidXRpb24uCgogICAgICAgIENvbmRpdGlvbnMgb24gdGhlIHBhcmFtZXRlcnMgYXJlIGFscGhhID4gMCBhbmQgYmV0YSA+IDAuCiAgICAgICAgUmV0dXJuZWQgdmFsdWVzIHJhbmdlIGJldHdlZW4gMCBhbmQgMS4KCiAgICAgICAgIiIiCgogICAgICAgICMgVGhpcyB2ZXJzaW9uIGR1ZSB0byBKYW5uZSBTaW5ra29uZW4sIGFuZCBtYXRjaGVzIGFsbCB0aGUgc3RkCiAgICAgICAgIyB0ZXh0cyAoZS5nLiwgS251dGggVm9sIDIgRWQgMyBwZyAxMzQgInRoZSBiZXRhIGRpc3RyaWJ1dGlvbiIpLgogICAgICAgIHkgPSBzZWxmLmdhbW1hdmFyaWF0ZShhbHBoYSwgMS4pCiAgICAgICAgaWYgeSA9PSAwOgogICAgICAgICAgICByZXR1cm4gMC4wCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHkgLyAoeSArIHNlbGYuZ2FtbWF2YXJpYXRlKGJldGEsIDEuKSkKCiMjIC0tLS0tLS0tLS0tLS0tLS0tLS0tIFBhcmV0byAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGRlZiBwYXJldG92YXJpYXRlKHNlbGYsIGFscGhhKToKICAgICAgICAiIiJQYXJldG8gZGlzdHJpYnV0aW9uLiAgYWxwaGEgaXMgdGhlIHNoYXBlIHBhcmFtZXRlci4iIiIKICAgICAgICAjIEphaW4sIHBnLiA0OTUKCiAgICAgICAgdSA9IDEuMCAtIHNlbGYucmFuZG9tKCkKICAgICAgICByZXR1cm4gMS4wIC8gdSAqKiAoMS4wL2FscGhhKQoKIyMgLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2VpYnVsbCAtLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgIGRlZiB3ZWlidWxsdmFyaWF0ZShzZWxmLCBhbHBoYSwgYmV0YSk6CiAgICAgICAgIiIiV2VpYnVsbCBkaXN0cmlidXRpb24uCgogICAgICAgIGFscGhhIGlzIHRoZSBzY2FsZSBwYXJhbWV0ZXIgYW5kIGJldGEgaXMgdGhlIHNoYXBlIHBhcmFtZXRlci4KCiAgICAgICAgIiIiCiAgICAgICAgIyBKYWluLCBwZy4gNDk5OyBidWcgZml4IGNvdXJ0ZXN5IEJpbGwgQXJtcwoKICAgICAgICB1ID0gMS4wIC0gc2VsZi5yYW5kb20oKQogICAgICAgIHJldHVybiBhbHBoYSAqICgtX2xvZyh1KSkgKiogKDEuMC9iZXRhKQoKCiMjIC0tLS0tLS0tLS0tLS0tLSBPcGVyYXRpbmcgU3lzdGVtIFJhbmRvbSBTb3VyY2UgIC0tLS0tLS0tLS0tLS0tLS0tLQoKY2xhc3MgU3lzdGVtUmFuZG9tKFJhbmRvbSk6CiAgICAiIiJBbHRlcm5hdGUgcmFuZG9tIG51bWJlciBnZW5lcmF0b3IgdXNpbmcgc291cmNlcyBwcm92aWRlZAogICAgYnkgdGhlIG9wZXJhdGluZyBzeXN0ZW0gKHN1Y2ggYXMgL2Rldi91cmFuZG9tIG9uIFVuaXggb3IKICAgIENyeXB0R2VuUmFuZG9tIG9uIFdpbmRvd3MpLgoKICAgICBOb3QgYXZhaWxhYmxlIG9uIGFsbCBzeXN0ZW1zIChzZWUgb3MudXJhbmRvbSgpIGZvciBkZXRhaWxzKS4KICAgICIiIgoKICAgIGRlZiByYW5kb20oc2VsZik6CiAgICAgICAgIiIiR2V0IHRoZSBuZXh0IHJhbmRvbSBudW1iZXIgaW4gdGhlIHJhbmdlIFswLjAsIDEuMCkuIiIiCiAgICAgICAgcmV0dXJuIChpbnQuZnJvbV9ieXRlcyhfdXJhbmRvbSg3KSwgJ2JpZycpID4+IDMpICogUkVDSVBfQlBGCgogICAgZGVmIGdldHJhbmRiaXRzKHNlbGYsIGspOgogICAgICAgICIiImdldHJhbmRiaXRzKGspIC0+IHguICBHZW5lcmF0ZXMgYSBsb25nIGludCB3aXRoIGsgcmFuZG9tIGJpdHMuIiIiCiAgICAgICAgaWYgayA8PSAwOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdudW1iZXIgb2YgYml0cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvJykKICAgICAgICBpZiBrICE9IGludChrKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdudW1iZXIgb2YgYml0cyBzaG91bGQgYmUgYW4gaW50ZWdlcicpCiAgICAgICAgbnVtYnl0ZXMgPSAoayArIDcpIC8vIDggICAgICAgICAgICAgICAgICAgICAgICMgYml0cyAvIDggYW5kIHJvdW5kZWQgdXAKICAgICAgICB4ID0gaW50LmZyb21fYnl0ZXMoX3VyYW5kb20obnVtYnl0ZXMpLCAnYmlnJykKICAgICAgICByZXR1cm4geCA+PiAobnVtYnl0ZXMgKiA4IC0gaykgICAgICAgICAgICAgICAgIyB0cmltIGV4Y2VzcyBiaXRzCgogICAgZGVmIHNlZWQoc2VsZiwgKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgIlN0dWIgbWV0aG9kLiAgTm90IHVzZWQgZm9yIGEgc3lzdGVtIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLiIKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBfbm90aW1wbGVtZW50ZWQoc2VsZiwgKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgIk1ldGhvZCBzaG91bGQgbm90IGJlIGNhbGxlZCBmb3IgYSBzeXN0ZW0gcmFuZG9tIG51bWJlciBnZW5lcmF0b3IuIgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoJ1N5c3RlbSBlbnRyb3B5IHNvdXJjZSBkb2VzIG5vdCBoYXZlIHN0YXRlLicpCiAgICBnZXRzdGF0ZSA9IHNldHN0YXRlID0gX25vdGltcGxlbWVudGVkCgojIyAtLS0tLS0tLS0tLS0tLS0tLS0tLSB0ZXN0IHByb2dyYW0gLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmRlZiBfdGVzdF9nZW5lcmF0b3IobiwgZnVuYywgYXJncyk6CiAgICBpbXBvcnQgdGltZQogICAgcHJpbnQobiwgJ3RpbWVzJywgZnVuYy5fX25hbWVfXykKICAgIHRvdGFsID0gMC4wCiAgICBzcXN1bSA9IDAuMAogICAgc21hbGxlc3QgPSAxZTEwCiAgICBsYXJnZXN0ID0gLTFlMTAKICAgIHQwID0gdGltZS50aW1lKCkKICAgIGZvciBpIGluIHJhbmdlKG4pOgogICAgICAgIHggPSBmdW5jKCphcmdzKQogICAgICAgIHRvdGFsICs9IHgKICAgICAgICBzcXN1bSA9IHNxc3VtICsgeCp4CiAgICAgICAgc21hbGxlc3QgPSBtaW4oeCwgc21hbGxlc3QpCiAgICAgICAgbGFyZ2VzdCA9IG1heCh4LCBsYXJnZXN0KQogICAgdDEgPSB0aW1lLnRpbWUoKQogICAgcHJpbnQocm91bmQodDEtdDAsIDMpLCAnc2VjLCcsIGVuZD0nICcpCiAgICBhdmcgPSB0b3RhbC9uCiAgICBzdGRkZXYgPSBfc3FydChzcXN1bS9uIC0gYXZnKmF2ZykKICAgIHByaW50KCdhdmcgJWcsIHN0ZGRldiAlZywgbWluICVnLCBtYXggJWcnICUgXAogICAgICAgICAgICAgIChhdmcsIHN0ZGRldiwgc21hbGxlc3QsIGxhcmdlc3QpKQoKCmRlZiBfdGVzdChOPTIwMDApOgogICAgX3Rlc3RfZ2VuZXJhdG9yKE4sIHJhbmRvbSwgKCkpCiAgICBfdGVzdF9nZW5lcmF0b3IoTiwgbm9ybWFsdmFyaWF0ZSwgKDAuMCwgMS4wKSkKICAgIF90ZXN0X2dlbmVyYXRvcihOLCBsb2dub3JtdmFyaWF0ZSwgKDAuMCwgMS4wKSkKICAgIF90ZXN0X2dlbmVyYXRvcihOLCB2b25taXNlc3ZhcmlhdGUsICgwLjAsIDEuMCkpCiAgICBfdGVzdF9nZW5lcmF0b3IoTiwgZ2FtbWF2YXJpYXRlLCAoMC4wMSwgMS4wKSkKICAgIF90ZXN0X2dlbmVyYXRvcihOLCBnYW1tYXZhcmlhdGUsICgwLjEsIDEuMCkpCiAgICBfdGVzdF9nZW5lcmF0b3IoTiwgZ2FtbWF2YXJpYXRlLCAoMC4xLCAyLjApKQogICAgX3Rlc3RfZ2VuZXJhdG9yKE4sIGdhbW1hdmFyaWF0ZSwgKDAuNSwgMS4wKSkKICAgIF90ZXN0X2dlbmVyYXRvcihOLCBnYW1tYXZhcmlhdGUsICgwLjksIDEuMCkpCiAgICBfdGVzdF9nZW5lcmF0b3IoTiwgZ2FtbWF2YXJpYXRlLCAoMS4wLCAxLjApKQogICAgX3Rlc3RfZ2VuZXJhdG9yKE4sIGdhbW1hdmFyaWF0ZSwgKDIuMCwgMS4wKSkKICAgIF90ZXN0X2dlbmVyYXRvcihOLCBnYW1tYXZhcmlhdGUsICgyMC4wLCAxLjApKQogICAgX3Rlc3RfZ2VuZXJhdG9yKE4sIGdhbW1hdmFyaWF0ZSwgKDIwMC4wLCAxLjApKQogICAgX3Rlc3RfZ2VuZXJhdG9yKE4sIGdhdXNzLCAoMC4wLCAxLjApKQogICAgX3Rlc3RfZ2VuZXJhdG9yKE4sIGJldGF2YXJpYXRlLCAoMy4wLCAzLjApKQogICAgX3Rlc3RfZ2VuZXJhdG9yKE4sIHRyaWFuZ3VsYXIsICgwLjAsIDEuMCwgMS4wLzMuMCkpCgojIENyZWF0ZSBvbmUgaW5zdGFuY2UsIHNlZWRlZCBmcm9tIGN1cnJlbnQgdGltZSwgYW5kIGV4cG9ydCBpdHMgbWV0aG9kcwojIGFzIG1vZHVsZS1sZXZlbCBmdW5jdGlvbnMuICBUaGUgZnVuY3Rpb25zIHNoYXJlIHN0YXRlIGFjcm9zcyBhbGwgdXNlcwojKGJvdGggaW4gdGhlIHVzZXIncyBjb2RlIGFuZCBpbiB0aGUgUHl0aG9uIGxpYnJhcmllcyksIGJ1dCB0aGF0J3MgZmluZQojIGZvciBtb3N0IHByb2dyYW1zIGFuZCBpcyBlYXNpZXIgZm9yIHRoZSBjYXN1YWwgdXNlciB0aGFuIG1ha2luZyB0aGVtCiMgaW5zdGFudGlhdGUgdGhlaXIgb3duIFJhbmRvbSgpIGluc3RhbmNlLgoKX2luc3QgPSBSYW5kb20oKQpzZWVkID0gX2luc3Quc2VlZApyYW5kb20gPSBfaW5zdC5yYW5kb20KdW5pZm9ybSA9IF9pbnN0LnVuaWZvcm0KdHJpYW5ndWxhciA9IF9pbnN0LnRyaWFuZ3VsYXIKcmFuZGludCA9IF9pbnN0LnJhbmRpbnQKY2hvaWNlID0gX2luc3QuY2hvaWNlCnJhbmRyYW5nZSA9IF9pbnN0LnJhbmRyYW5nZQpzYW1wbGUgPSBfaW5zdC5zYW1wbGUKc2h1ZmZsZSA9IF9pbnN0LnNodWZmbGUKbm9ybWFsdmFyaWF0ZSA9IF9pbnN0Lm5vcm1hbHZhcmlhdGUKbG9nbm9ybXZhcmlhdGUgPSBfaW5zdC5sb2dub3JtdmFyaWF0ZQpleHBvdmFyaWF0ZSA9IF9pbnN0LmV4cG92YXJpYXRlCnZvbm1pc2VzdmFyaWF0ZSA9IF9pbnN0LnZvbm1pc2VzdmFyaWF0ZQpnYW1tYXZhcmlhdGUgPSBfaW5zdC5nYW1tYXZhcmlhdGUKZ2F1c3MgPSBfaW5zdC5nYXVzcwpiZXRhdmFyaWF0ZSA9IF9pbnN0LmJldGF2YXJpYXRlCnBhcmV0b3ZhcmlhdGUgPSBfaW5zdC5wYXJldG92YXJpYXRlCndlaWJ1bGx2YXJpYXRlID0gX2luc3Qud2VpYnVsbHZhcmlhdGUKZ2V0c3RhdGUgPSBfaW5zdC5nZXRzdGF0ZQpzZXRzdGF0ZSA9IF9pbnN0LnNldHN0YXRlCmdldHJhbmRiaXRzID0gX2luc3QuZ2V0cmFuZGJpdHMKCiNpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgojICAgIF90ZXN0KCkKCg==',
'/Lib/pprint.py':'',
'/Lib/textwrap.py':'',
'/Lib/posixpath.py':'',
'/Lib/struct.py':'X19hbGxfXyA9IFsKICAgICMgRnVuY3Rpb25zCiAgICAnY2FsY3NpemUnLCAncGFjaycsICdwYWNrX2ludG8nLCAndW5wYWNrJywgJ3VucGFja19mcm9tJywKCiAgICAjIENsYXNzZXMKICAgICdTdHJ1Y3QnLAoKICAgICMgRXhjZXB0aW9ucwogICAgJ2Vycm9yJwogICAgXQoKZnJvbSBfc3RydWN0IGltcG9ydCAqCmZyb20gX3N0cnVjdCBpbXBvcnQgX2NsZWFyY2FjaGUKZnJvbSBfc3RydWN0IGltcG9ydCBfX2RvY19fCg==',
'/Lib/_weakref.py':'Y2xhc3MgUHJveHlUeXBlOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLG9iaik6CiAgICAgICAgc2VsZi5vYmogPSBvYmoKCkNhbGxhYmxlUHJveHlUeXBlID0gUHJveHlUeXBlClByb3h5VHlwZXMgPSBbUHJveHlUeXBlLENhbGxhYmxlUHJveHlUeXBlXQoKY2xhc3MgUmVmZXJlbmNlVHlwZToKCiAgICBkZWYgX19pbml0X18oc2VsZixvYmosY2FsbGJhY2spOgogICAgICAgIHNlbGYub2JqID0gb2JqCiAgICAgICAgc2VsZi5jYWxsYmFjayA9IGNhbGxiYWNrCgpjbGFzcyByZWY6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsb2JqLGNhbGxiYWNrPU5vbmUpOgogICAgICAgIHNlbGYub2JqID0gUmVmZXJlbmNlVHlwZShvYmosY2FsbGJhY2spCiAgICAgICAgc2VsZi5jYWxsYmFjaz1jYWxsYmFjawoKZGVmIGdldHdlYWtyZWZjb3VudChvYmopOgogICAgcmV0dXJuIDEKCmRlZiBnZXR3ZWFrcmVmcyhvYmopOgogICAgcmV0dXJuIG9iagoKCmRlZiBwcm94eShvYmosY2FsbGJhY2spOgogICAgcmV0dXJuIFByb3h5VHlwZShvYmopCgo=',
'/Lib/_collections.py':'',
'/Lib/binascii.py':'',
'/Lib/antigravity.py':'aW1wb3J0IHdlYmJyb3dzZXIKaW1wb3J0IGhhc2hsaWIKCndlYmJyb3dzZXIub3BlbigiaHR0cDovL3hrY2QuY29tLzM1My8iKQoKZGVmIGdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgZGF0ZWRvdyk6CiAgICAnJydDb21wdXRlIGdlb2hhc2goKSB1c2luZyB0aGUgTXVucm9lIGFsZ29yaXRobS4KCiAgICA+Pj4gZ2VvaGFzaCgzNy40MjE1NDIsIC0xMjIuMDg1NTg5LCBiJzIwMDUtMDUtMjYtMTA0NTguNjgnKQogICAgMzcuODU3NzEzIC0xMjIuNTQ0NTQzCgogICAgJycnCiAgICAjIGh0dHA6Ly94a2NkLmNvbS80MjYvCiAgICBoID0gaGFzaGxpYi5tZDUoZGF0ZWRvdykuaGV4ZGlnZXN0KCkKICAgIHAsIHEgPSBbKCclZicgJSBmbG9hdC5mcm9taGV4KCcwLicgKyB4KSkgZm9yIHggaW4gKGhbOjE2XSwgaFsxNjozMl0pXQogICAgcHJpbnQoJyVkJXMgJWQlcycgJSAobGF0aXR1ZGUsIHBbMTpdLCBsb25naXR1ZGUsIHFbMTpdKSkK',
'/Lib/optparse.py':'',
'/Lib/base64.py':'',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/dis.py':'ZGVmIGRpcyhzcmMpOgogICAgcmV0dXJuIEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5MmpzKHNyYykpLnRvX2pzKCkK',
'/Lib/types.py':'IiIiCkRlZmluZSBuYW1lcyBmb3IgYnVpbHQtaW4gdHlwZXMgdGhhdCBhcmVuJ3QgZGlyZWN0bHkgYWNjZXNzaWJsZSBhcyBhIGJ1aWx0aW4uCiIiIgppbXBvcnQgc3lzCgojIEl0ZXJhdG9ycyBpbiBQeXRob24gYXJlbid0IGEgbWF0dGVyIG9mIHR5cGUgYnV0IG9mIHByb3RvY29sLiAgQSBsYXJnZQojIGFuZCBjaGFuZ2luZyBudW1iZXIgb2YgYnVpbHRpbiB0eXBlcyBpbXBsZW1lbnQgKnNvbWUqIGZsYXZvciBvZgojIGl0ZXJhdG9yLiAgRG9uJ3QgY2hlY2sgdGhlIHR5cGUhICBVc2UgaGFzYXR0ciB0byBjaGVjayBmb3IgYm90aAojICJfX2l0ZXJfXyIgYW5kICJfX25leHRfXyIgYXR0cmlidXRlcyBpbnN0ZWFkLgoKI2RlZiBfZigpOiBwYXNzCiNGdW5jdGlvblR5cGUgPSB0eXBlKF9mKQojTGFtYmRhVHlwZSA9IHR5cGUobGFtYmRhOiBOb25lKSAgICAgICAgICMgU2FtZSBhcyBGdW5jdGlvblR5cGUKI0NvZGVUeXBlID0gdHlwZShfZi5fX2NvZGVfXykKCiNkZWYgX2coKToKIyAgICB5aWVsZCAxCiNHZW5lcmF0b3JUeXBlID0gdHlwZShfZygpKQoKY2xhc3MgX0M6CiAgICBkZWYgX20oc2VsZik6IHBhc3MKTWV0aG9kVHlwZSA9IHR5cGUoX0MoKS5fbSkKCkJ1aWx0aW5GdW5jdGlvblR5cGUgPSB0eXBlKGxlbikKQnVpbHRpbk1ldGhvZFR5cGUgPSB0eXBlKFtdLmFwcGVuZCkgICAgICMgU2FtZSBhcyBCdWlsdGluRnVuY3Rpb25UeXBlCgpNb2R1bGVUeXBlID0gdHlwZShzeXMpCgojdHJ5OgojICAgIHJhaXNlIFR5cGVFcnJvcgojZXhjZXB0IFR5cGVFcnJvcjoKIyAgICB0YiA9IHN5cy5leGNfaW5mbygpWzJdCiMgICAgVHJhY2ViYWNrVHlwZSA9IHR5cGUodGIpCiMgICAgRnJhbWVUeXBlID0gdHlwZSh0Yi50Yl9mcmFtZSkKIyAgICB0YiA9IE5vbmU7IGRlbCB0YgoKIyBGb3IgSnl0aG9uLCB0aGUgZm9sbG93aW5nIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsCiNHZXRTZXREZXNjcmlwdG9yVHlwZSA9IHR5cGUoRnVuY3Rpb25UeXBlLl9fY29kZV9fKQojTWVtYmVyRGVzY3JpcHRvclR5cGUgPSB0eXBlKEZ1bmN0aW9uVHlwZS5fX2dsb2JhbHNfXykKCiNmaXhtZSBicnl0aG9uCiNkZWwgc3lzLCBfZiwgX2csIF9DLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTm90IGZvciBleHBvcnQK',
'/Lib/_weakrefset.py':'IyBBY2Nlc3MgV2Vha1NldCB0aHJvdWdoIHRoZSB3ZWFrcmVmIG1vZHVsZS4KIyBUaGlzIGNvZGUgaXMgc2VwYXJhdGVkLW91dCBiZWNhdXNlIGl0IGlzIG5lZWRlZAojIGJ5IGFiYy5weSB0byBsb2FkIGV2ZXJ5dGhpbmcgZWxzZSBhdCBzdGFydHVwLgoKZnJvbSBfd2Vha3JlZiBpbXBvcnQgcmVmCgpfX2FsbF9fID0gWydXZWFrU2V0J10KCgpjbGFzcyBfSXRlcmF0aW9uR3VhcmQ6CiAgICAjIFRoaXMgY29udGV4dCBtYW5hZ2VyIHJlZ2lzdGVycyBpdHNlbGYgaW4gdGhlIGN1cnJlbnQgaXRlcmF0b3JzIG9mIHRoZQogICAgIyB3ZWFrIGNvbnRhaW5lciwgc3VjaCBhcyB0byBkZWxheSBhbGwgcmVtb3ZhbHMgdW50aWwgdGhlIGNvbnRleHQgbWFuYWdlcgogICAgIyBleGl0cy4KICAgICMgVGhpcyB0ZWNobmlxdWUgc2hvdWxkIGJlIHJlbGF0aXZlbHkgdGhyZWFkLXNhZmUgKHNpbmNlIHNldHMgYXJlKS4KCiAgICBkZWYgX19pbml0X18oc2VsZiwgd2Vha2NvbnRhaW5lcik6CiAgICAgICAgIyBEb24ndCBjcmVhdGUgY3ljbGVzCiAgICAgICAgcHJpbnQoJ2NyZWF0ZSBpdGVyYXRpb24gZ3VhcmQnLCB3ZWFrY29udGFpbmVyKQogICAgICAgIHNlbGYud2Vha2NvbnRhaW5lciA9IHJlZih3ZWFrY29udGFpbmVyKQoKICAgIGRlZiBfX2VudGVyX18oc2VsZik6CiAgICAgICAgcHJpbnQoJ2VudGVyIGl0ZXJhdGlvbiBndWFyZCcpCiAgICAgICAgdyA9IHNlbGYud2Vha2NvbnRhaW5lcigpCiAgICAgICAgaWYgdyBpcyBub3QgTm9uZToKICAgICAgICAgICAgdy5faXRlcmF0aW5nLmFkZChzZWxmKQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXhpdF9fKHNlbGYsIGUsIHQsIGIpOgogICAgICAgIHcgPSBzZWxmLndlYWtjb250YWluZXIoKQogICAgICAgIGlmIHcgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHMgPSB3Ll9pdGVyYXRpbmcKICAgICAgICAgICAgcy5yZW1vdmUoc2VsZikKICAgICAgICAgICAgaWYgbm90IHM6CiAgICAgICAgICAgICAgICB3Ll9jb21taXRfcmVtb3ZhbHMoKQoKCmNsYXNzIFdlYWtTZXQ6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGF0YT1Ob25lKToKICAgICAgICBzZWxmLmRhdGEgPSBzZXQoKQogICAgICAgIGRlZiBfcmVtb3ZlKGl0ZW0sIHNlbGZyZWY9cmVmKHNlbGYpKToKICAgICAgICAgICAgc2VsZiA9IHNlbGZyZWYoKQogICAgICAgICAgICBpZiBzZWxmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgc2VsZi5faXRlcmF0aW5nOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMuYXBwZW5kKGl0ZW0pCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YS5kaXNjYXJkKGl0ZW0pCiAgICAgICAgc2VsZi5fcmVtb3ZlID0gX3JlbW92ZQogICAgICAgICMgQSBsaXN0IG9mIGtleXMgdG8gYmUgcmVtb3ZlZAogICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMgPSBbXQogICAgICAgIHNlbGYuX2l0ZXJhdGluZyA9IHNldCgpCiAgICAgICAgaWYgZGF0YSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi51cGRhdGUoZGF0YSkKCiAgICBkZWYgX2NvbW1pdF9yZW1vdmFscyhzZWxmKToKICAgICAgICBsID0gc2VsZi5fcGVuZGluZ19yZW1vdmFscwogICAgICAgIGRpc2NhcmQgPSBzZWxmLmRhdGEuZGlzY2FyZAogICAgICAgIHdoaWxlIGw6CiAgICAgICAgICAgIGRpc2NhcmQobC5wb3AoKSkKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgd2l0aCBfSXRlcmF0aW9uR3VhcmQoc2VsZik6CiAgICAgICAgICAgIGZvciBpdGVtcmVmIGluIHNlbGYuZGF0YToKICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtcmVmKCkKICAgICAgICAgICAgICAgIGlmIGl0ZW0gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgeWllbGQgaXRlbQoKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiBsZW4oc2VsZi5kYXRhKSAtIGxlbihzZWxmLl9wZW5kaW5nX3JlbW92YWxzKQoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwgaXRlbSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3ciA9IHJlZihpdGVtKQogICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHJldHVybiB3ciBpbiBzZWxmLmRhdGEKCiAgICBkZWYgX19yZWR1Y2VfXyhzZWxmKToKICAgICAgICByZXR1cm4gKHNlbGYuX19jbGFzc19fLCAobGlzdChzZWxmKSwpLAogICAgICAgICAgICAgICAgZ2V0YXR0cihzZWxmLCAnX19kaWN0X18nLCBOb25lKSkKCiAgICBkZWYgYWRkKHNlbGYsIGl0ZW0pOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgc2VsZi5kYXRhLmFkZChyZWYoaXRlbSwgc2VsZi5fcmVtb3ZlKSkKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBzZWxmLmRhdGEuY2xlYXIoKQoKICAgIGRlZiBjb3B5KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmKQoKICAgIGRlZiBwb3Aoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpdGVtcmVmID0gc2VsZi5kYXRhLnBvcCgpCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHJhaXNlIEtleUVycm9yKCdwb3AgZnJvbSBlbXB0eSBXZWFrU2V0JykKICAgICAgICAgICAgaXRlbSA9IGl0ZW1yZWYoKQogICAgICAgICAgICBpZiBpdGVtIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0KCiAgICBkZWYgcmVtb3ZlKHNlbGYsIGl0ZW0pOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgc2VsZi5kYXRhLnJlbW92ZShyZWYoaXRlbSkpCgogICAgZGVmIGRpc2NhcmQoc2VsZiwgaXRlbSk6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBzZWxmLmRhdGEuZGlzY2FyZChyZWYoaXRlbSkpCgogICAgZGVmIHVwZGF0ZShzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBmb3IgZWxlbWVudCBpbiBvdGhlcjoKICAgICAgICAgICAgc2VsZi5hZGQoZWxlbWVudCkKCiAgICBkZWYgX19pb3JfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgc2VsZi51cGRhdGUob3RoZXIpCiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgZGlmZmVyZW5jZShzZWxmLCBvdGhlcik6CiAgICAgICAgbmV3c2V0ID0gc2VsZi5jb3B5KCkKICAgICAgICBuZXdzZXQuZGlmZmVyZW5jZV91cGRhdGUob3RoZXIpCiAgICAgICAgcmV0dXJuIG5ld3NldAogICAgX19zdWJfXyA9IGRpZmZlcmVuY2UKCiAgICBkZWYgZGlmZmVyZW5jZV91cGRhdGUoc2VsZiwgb3RoZXIpOgogICAgICAgIHNlbGYuX19pc3ViX18ob3RoZXIpCiAgICBkZWYgX19pc3ViX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgaWYgc2VsZiBpcyBvdGhlcjoKICAgICAgICAgICAgc2VsZi5kYXRhLmNsZWFyKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmRhdGEuZGlmZmVyZW5jZV91cGRhdGUocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIGludGVyc2VjdGlvbihzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKGl0ZW0gZm9yIGl0ZW0gaW4gb3RoZXIgaWYgaXRlbSBpbiBzZWxmKQogICAgX19hbmRfXyA9IGludGVyc2VjdGlvbgoKICAgIGRlZiBpbnRlcnNlY3Rpb25fdXBkYXRlKHNlbGYsIG90aGVyKToKICAgICAgICBzZWxmLl9faWFuZF9fKG90aGVyKQogICAgZGVmIF9faWFuZF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOgogICAgICAgICAgICBzZWxmLl9jb21taXRfcmVtb3ZhbHMoKQogICAgICAgIHNlbGYuZGF0YS5pbnRlcnNlY3Rpb25fdXBkYXRlKHJlZihpdGVtKSBmb3IgaXRlbSBpbiBvdGhlcikKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBpc3N1YnNldChzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5pc3N1YnNldChyZWYoaXRlbSkgZm9yIGl0ZW0gaW4gb3RoZXIpCiAgICBfX2xlX18gPSBpc3N1YnNldAoKICAgIGRlZiBfX2x0X18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPCBzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQoKICAgIGRlZiBpc3N1cGVyc2V0KHNlbGYsIG90aGVyKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhLmlzc3VwZXJzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQogICAgX19nZV9fID0gaXNzdXBlcnNldAoKICAgIGRlZiBfX2d0X18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPiBzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQoKICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCBzZWxmLl9fY2xhc3NfXyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPT0gc2V0KHJlZihpdGVtKSBmb3IgaXRlbSBpbiBvdGhlcikKCiAgICBkZWYgc3ltbWV0cmljX2RpZmZlcmVuY2Uoc2VsZiwgb3RoZXIpOgogICAgICAgIG5ld3NldCA9IHNlbGYuY29weSgpCiAgICAgICAgbmV3c2V0LnN5bW1ldHJpY19kaWZmZXJlbmNlX3VwZGF0ZShvdGhlcikKICAgICAgICByZXR1cm4gbmV3c2V0CiAgICBfX3hvcl9fID0gc3ltbWV0cmljX2RpZmZlcmVuY2UKCiAgICBkZWYgc3ltbWV0cmljX2RpZmZlcmVuY2VfdXBkYXRlKHNlbGYsIG90aGVyKToKICAgICAgICBzZWxmLl9faXhvcl9fKG90aGVyKQogICAgZGVmIF9faXhvcl9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOgogICAgICAgICAgICBzZWxmLl9jb21taXRfcmVtb3ZhbHMoKQogICAgICAgIGlmIHNlbGYgaXMgb3RoZXI6CiAgICAgICAgICAgIHNlbGYuZGF0YS5jbGVhcigpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5kYXRhLnN5bW1ldHJpY19kaWZmZXJlbmNlX3VwZGF0ZShyZWYoaXRlbSwgc2VsZi5fcmVtb3ZlKSBmb3IgaXRlbSBpbiBvdGhlcikKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiB1bmlvbihzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKGUgZm9yIHMgaW4gKHNlbGYsIG90aGVyKSBmb3IgZSBpbiBzKQogICAgX19vcl9fID0gdW5pb24KCiAgICBkZWYgaXNkaXNqb2ludChzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIGxlbihzZWxmLmludGVyc2VjdGlvbihvdGhlcikpID09IDAK',
'/Lib/warnings.py':'',
'/Lib/_struct.py':'',
'/Lib/difflib.py':'',
'/Lib/string.py':'IyBTb21lIHN0cmluZ3MgZm9yIGN0eXBlLXN0eWxlIGNoYXJhY3RlciBjbGFzc2lmaWNhdGlvbgp3aGl0ZXNwYWNlID0gJyBcdFxuXHJcdlxmJwphc2NpaV9sb3dlcmNhc2UgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonCmFzY2lpX3VwcGVyY2FzZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicKYXNjaWlfbGV0dGVycyA9IGFzY2lpX2xvd2VyY2FzZSArIGFzY2lpX3VwcGVyY2FzZQpkaWdpdHMgPSAnMDEyMzQ1Njc4OScKaGV4ZGlnaXRzID0gZGlnaXRzICsgJ2FiY2RlZicgKyAnQUJDREVGJwpvY3RkaWdpdHMgPSAnMDEyMzQ1NjcnCnB1bmN0dWF0aW9uID0gIiIiISIjJCUmJygpKissLS4vOjs8PT4/QFtcXV5fYHt8fX4iIiIKcHJpbnRhYmxlID0gZGlnaXRzICsgYXNjaWlfbGV0dGVycyArIHB1bmN0dWF0aW9uICsgd2hpdGVzcGFjZQoKIyBGdW5jdGlvbnMgd2hpY2ggYXJlbid0IGF2YWlsYWJsZSBhcyBzdHJpbmcgbWV0aG9kcy4KCiMgQ2FwaXRhbGl6ZSB0aGUgd29yZHMgaW4gYSBzdHJpbmcsIGUuZy4gIiBhQmMgIGRFZiAiIC0+ICJBYmMgRGVmIi4KZGVmIGNhcHdvcmRzKHMsIHNlcD1Ob25lKToKICAgICIiImNhcHdvcmRzKHMgWyxzZXBdKSAtPiBzdHJpbmcKCiAgICBTcGxpdCB0aGUgYXJndW1lbnQgaW50byB3b3JkcyB1c2luZyBzcGxpdCwgY2FwaXRhbGl6ZSBlYWNoCiAgICB3b3JkIHVzaW5nIGNhcGl0YWxpemUsIGFuZCBqb2luIHRoZSBjYXBpdGFsaXplZCB3b3JkcyB1c2luZwogICAgam9pbi4gIElmIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgc2VwIGlzIGFic2VudCBvciBOb25lLAogICAgcnVucyBvZiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgYXJlIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIHNwYWNlCiAgICBhbmQgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcmUgcmVtb3ZlZCwgb3RoZXJ3aXNlCiAgICBzZXAgaXMgdXNlZCB0byBzcGxpdCBhbmQgam9pbiB0aGUgd29yZHMuCgogICAgIiIiCiAgICByZXR1cm4gKHNlcCBvciAnICcpLmpvaW4oeC5jYXBpdGFsaXplKCkgZm9yIHggaW4gcy5zcGxpdChzZXApKQo=',
'/Lib/genericpath.py':'IiIiDQpQYXRoIG9wZXJhdGlvbnMgY29tbW9uIHRvIG1vcmUgdGhhbiBvbmUgT1MNCkRvIG5vdCB1c2UgZGlyZWN0bHkuICBUaGUgT1Mgc3BlY2lmaWMgbW9kdWxlcyBpbXBvcnQgdGhlIGFwcHJvcHJpYXRlDQpmdW5jdGlvbnMgZnJvbSB0aGlzIG1vZHVsZSB0aGVtc2VsdmVzLg0KIiIiDQppbXBvcnQgb3MNCmltcG9ydCBzdGF0DQoNCl9fYWxsX18gPSBbJ2NvbW1vbnByZWZpeCcsICdleGlzdHMnLCAnZ2V0YXRpbWUnLCAnZ2V0Y3RpbWUnLCAnZ2V0bXRpbWUnLA0KICAgICAgICAgICAnZ2V0c2l6ZScsICdpc2RpcicsICdpc2ZpbGUnXQ0KDQoNCiMgRG9lcyBhIHBhdGggZXhpc3Q/DQojIFRoaXMgaXMgZmFsc2UgZm9yIGRhbmdsaW5nIHN5bWJvbGljIGxpbmtzIG9uIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHRoZW0uDQpkZWYgZXhpc3RzKHBhdGgpOg0KICAgICIiIlRlc3Qgd2hldGhlciBhIHBhdGggZXhpc3RzLiAgUmV0dXJucyBGYWxzZSBmb3IgYnJva2VuIHN5bWJvbGljIGxpbmtzIiIiDQogICAgdHJ5Og0KICAgICAgICBvcy5zdGF0KHBhdGgpDQogICAgZXhjZXB0IG9zLmVycm9yOg0KICAgICAgICByZXR1cm4gRmFsc2UNCiAgICByZXR1cm4gVHJ1ZQ0KDQoNCiMgVGhpcyBmb2xsb3dzIHN5bWJvbGljIGxpbmtzLCBzbyBib3RoIGlzbGluaygpIGFuZCBpc2RpcigpIGNhbiBiZSB0cnVlDQojIGZvciB0aGUgc2FtZSBwYXRoIG9ubyBzeXN0ZW1zIHRoYXQgc3VwcG9ydCBzeW1saW5rcw0KZGVmIGlzZmlsZShwYXRoKToNCiAgICAiIiJUZXN0IHdoZXRoZXIgYSBwYXRoIGlzIGEgcmVndWxhciBmaWxlIiIiDQogICAgdHJ5Og0KICAgICAgICBzdCA9IG9zLnN0YXQocGF0aCkNCiAgICBleGNlcHQgb3MuZXJyb3I6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIHJldHVybiBzdGF0LlNfSVNSRUcoc3Quc3RfbW9kZSkNCg0KDQojIElzIGEgcGF0aCBhIGRpcmVjdG9yeT8NCiMgVGhpcyBmb2xsb3dzIHN5bWJvbGljIGxpbmtzLCBzbyBib3RoIGlzbGluaygpIGFuZCBpc2RpcigpDQojIGNhbiBiZSB0cnVlIGZvciB0aGUgc2FtZSBwYXRoIG9uIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHN5bWxpbmtzDQpkZWYgaXNkaXIocyk6DQogICAgIiIiUmV0dXJuIHRydWUgaWYgdGhlIHBhdGhuYW1lIHJlZmVycyB0byBhbiBleGlzdGluZyBkaXJlY3RvcnkuIiIiDQogICAgdHJ5Og0KICAgICAgICBzdCA9IG9zLnN0YXQocykNCiAgICBleGNlcHQgb3MuZXJyb3I6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIHJldHVybiBzdGF0LlNfSVNESVIoc3Quc3RfbW9kZSkNCg0KDQpkZWYgZ2V0c2l6ZShmaWxlbmFtZSk6DQogICAgIiIiUmV0dXJuIHRoZSBzaXplIG9mIGEgZmlsZSwgcmVwb3J0ZWQgYnkgb3Muc3RhdCgpLiIiIg0KICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9zaXplDQoNCg0KZGVmIGdldG10aW1lKGZpbGVuYW1lKToNCiAgICAiIiJSZXR1cm4gdGhlIGxhc3QgbW9kaWZpY2F0aW9uIHRpbWUgb2YgYSBmaWxlLCByZXBvcnRlZCBieSBvcy5zdGF0KCkuIiIiDQogICAgcmV0dXJuIG9zLnN0YXQoZmlsZW5hbWUpLnN0X210aW1lDQoNCg0KZGVmIGdldGF0aW1lKGZpbGVuYW1lKToNCiAgICAiIiJSZXR1cm4gdGhlIGxhc3QgYWNjZXNzIHRpbWUgb2YgYSBmaWxlLCByZXBvcnRlZCBieSBvcy5zdGF0KCkuIiIiDQogICAgcmV0dXJuIG9zLnN0YXQoZmlsZW5hbWUpLnN0X2F0aW1lDQoNCg0KZGVmIGdldGN0aW1lKGZpbGVuYW1lKToNCiAgICAiIiJSZXR1cm4gdGhlIG1ldGFkYXRhIGNoYW5nZSB0aW1lIG9mIGEgZmlsZSwgcmVwb3J0ZWQgYnkgb3Muc3RhdCgpLiIiIg0KICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9jdGltZQ0KDQoNCiMgUmV0dXJuIHRoZSBsb25nZXN0IHByZWZpeCBvZiBhbGwgbGlzdCBlbGVtZW50cy4NCmRlZiBjb21tb25wcmVmaXgobSk6DQogICAgIkdpdmVuIGEgbGlzdCBvZiBwYXRobmFtZXMsIHJldHVybnMgdGhlIGxvbmdlc3QgY29tbW9uIGxlYWRpbmcgY29tcG9uZW50Ig0KICAgIGlmIG5vdCBtOiByZXR1cm4gJycNCiAgICBzMSA9IG1pbihtKQ0KICAgIHMyID0gbWF4KG0pDQogICAgZm9yIGksIGMgaW4gZW51bWVyYXRlKHMxKToNCiAgICAgICAgaWYgYyAhPSBzMltpXToNCiAgICAgICAgICAgIHJldHVybiBzMVs6aV0NCiAgICByZXR1cm4gczENCg0KIyBTcGxpdCBhIHBhdGggaW4gcm9vdCBhbmQgZXh0ZW5zaW9uLg0KIyBUaGUgZXh0ZW5zaW9uIGlzIGV2ZXJ5dGhpbmcgc3RhcnRpbmcgYXQgdGhlIGxhc3QgZG90IGluIHRoZSBsYXN0DQojIHBhdGhuYW1lIGNvbXBvbmVudDsgdGhlIHJvb3QgaXMgZXZlcnl0aGluZyBiZWZvcmUgdGhhdC4NCiMgSXQgaXMgYWx3YXlzIHRydWUgdGhhdCByb290ICsgZXh0ID09IHAuDQoNCiMgR2VuZXJpYyBpbXBsZW1lbnRhdGlvbiBvZiBzcGxpdGV4dCwgdG8gYmUgcGFyYW1ldHJpemVkIHdpdGgNCiMgdGhlIHNlcGFyYXRvcnMNCmRlZiBfc3BsaXRleHQocCwgc2VwLCBhbHRzZXAsIGV4dHNlcCk6DQogICAgIiIiU3BsaXQgdGhlIGV4dGVuc2lvbiBmcm9tIGEgcGF0aG5hbWUuDQoNCiAgICBFeHRlbnNpb24gaXMgZXZlcnl0aGluZyBmcm9tIHRoZSBsYXN0IGRvdCB0byB0aGUgZW5kLCBpZ25vcmluZw0KICAgIGxlYWRpbmcgZG90cy4gIFJldHVybnMgIihyb290LCBleHQpIjsgZXh0IG1heSBiZSBlbXB0eS4iIiINCiAgICAjIE5PVEU6IFRoaXMgY29kZSBtdXN0IHdvcmsgZm9yIHRleHQgYW5kIGJ5dGVzIHN0cmluZ3MuDQoNCiAgICBzZXBJbmRleCA9IHAucmZpbmQoc2VwKQ0KICAgIGlmIGFsdHNlcDoNCiAgICAgICAgYWx0c2VwSW5kZXggPSBwLnJmaW5kKGFsdHNlcCkNCiAgICAgICAgc2VwSW5kZXggPSBtYXgoc2VwSW5kZXgsIGFsdHNlcEluZGV4KQ0KDQogICAgZG90SW5kZXggPSBwLnJmaW5kKGV4dHNlcCkNCiAgICBpZiBkb3RJbmRleCA+IHNlcEluZGV4Og0KICAgICAgICAjIHNraXAgYWxsIGxlYWRpbmcgZG90cw0KICAgICAgICBmaWxlbmFtZUluZGV4ID0gc2VwSW5kZXggKyAxDQogICAgICAgIHdoaWxlIGZpbGVuYW1lSW5kZXggPCBkb3RJbmRleDoNCiAgICAgICAgICAgIGlmIHBbZmlsZW5hbWVJbmRleDpmaWxlbmFtZUluZGV4KzFdICE9IGV4dHNlcDoNCiAgICAgICAgICAgICAgICByZXR1cm4gcFs6ZG90SW5kZXhdLCBwW2RvdEluZGV4Ol0NCiAgICAgICAgICAgIGZpbGVuYW1lSW5kZXggKz0gMQ0KDQogICAgcmV0dXJuIHAsIHBbOjBdDQo=',
'/Lib/webbrowser.py':'X19hbGxfXyA9IFsiRXJyb3IiLCAib3BlbiIsICJvcGVuX25ldyIsICJvcGVuX25ld190YWIiXQoKY2xhc3MgRXJyb3IoRXhjZXB0aW9uKToKICAgIHBhc3MKCl90YXJnZXQgPSB7IDA6ICcnLCAxOiAnX2JsYW5rJywgMjogJ19uZXcnIH0gICMgaGFjay4uLgoKCmRlZiBvcGVuKHVybCwgbmV3PTAsIGF1dG9yYWlzZT1UcnVlKToKICAgICIiIiAKICAgIG5ldyB3aW5kb3cgb3IgdGFiIGlzIG5vdCBjb250cm9sbGFibGUKICAgIG9uIHRoZSBjbGllbnQgc2lkZS4gYXV0b3JhaXNlIG5vdCBhdmFpbGFibGUuCiAgICAiIiIKICAgIGlmIHdpbi5vcGVuKHVybCwgX3RhcmdldFtuZXddKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKZGVmIG9wZW5fbmV3KHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDEpCgpkZWYgb3Blbl9uZXdfdGFiKHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDIpCgoK',
'/Lib/this.py':'cyA9ICIiIkd1ciBNcmEgYnMgQ2xndWJhLCBvbCBHdnogQ3JncmVmCgpPcm5oZ3ZzaHkgdmYgb3JnZ3JlIGd1bmEgaHR5bC4KUmtjeXZwdmcgdmYgb3JnZ3JlIGd1bmEgdnpjeXZwdmcuCkZ2emN5ciB2ZiBvcmdncmUgZ3VuYSBwYnpjeXJrLgpQYnpjeXJrIHZmIG9yZ2dyZSBndW5hIHBiemN5dnBuZ3JxLgpTeW5nIHZmIG9yZ2dyZSBndW5hIGFyZmdycS4KRmNuZWZyIHZmIG9yZ2dyZSBndW5hIHFyYWZyLgpFcm5xbm92eXZnbCBwYmhhZ2YuCkZjcnB2bnkgcG5mcmYgbmVyYSdnIGZjcnB2bnkgcmFiaHR1IGdiIG9lcm54IGd1ciBlaHlyZi4KTnlndWJodHUgY2VucGd2cG55dmdsIG9ybmdmIGNoZXZnbC4KUmVlYmVmIGZ1Ymh5cSBhcmlyZSBjbmZmIGZ2eXJhZ3lsLgpIYXlyZmYgcmtjeXZwdmd5bCBmdnlyYXBycS4KVmEgZ3VyIHNucHIgYnMgbnpvdnRodmdsLCBlcnNoZnIgZ3VyIGdyemNnbmd2YmEgZ2IgdGhyZmYuCkd1cmVyIGZ1Ymh5cSBvciBiYXItLSBuYXEgY2Vyc3Jlbm95bCBiYXlsIGJhciAtLWJvaXZiaGYgam5sIGdiIHFiIHZnLgpOeWd1Ymh0dSBndW5nIGpubCB6bmwgYWJnIG9yIGJvaXZiaGYgbmcgc3ZlZmcgaGF5cmZmIGxiaCdlciBRaGdwdS4KQWJqIHZmIG9yZ2dyZSBndW5hIGFyaXJlLgpOeWd1Ymh0dSBhcmlyZSB2ZiBic2dyYSBvcmdncmUgZ3VuYSAqZXZ0dWcqIGFiai4KVnMgZ3VyIHZ6Y3lyenJhZ25ndmJhIHZmIHVuZXEgZ2IgcmtjeW52YSwgdmcnZiBuIG9ucSB2cXJuLgpWcyBndXIgdnpjeXJ6cmFnbmd2YmEgdmYgcm5mbCBnYiBya2N5bnZhLCB2ZyB6bmwgb3IgbiB0YmJxIHZxcm4uCkFuenJmY25wcmYgbmVyIGJhciB1YmF4dmF0IHRlcm5nIHZxcm4gLS0geXJnJ2YgcWIgemJlciBicyBndWJmciEiIiIKCmQgPSB7fQpmb3IgYyBpbiAoNjUsIDk3KToKICAgIGZvciBpIGluIHJhbmdlKDI2KToKICAgICAgICBkW2NocihpK2MpXSA9IGNocigoaSsxMykgJSAyNiArIGMpCgpwcmludCgiIi5qb2luKFtkLmdldChjLCBjKSBmb3IgYyBpbiBzXSkpCg==',
'/Lib/datetime.py':'',
'/Lib/colorsys.py':'IiIiQ29udmVyc2lvbiBmdW5jdGlvbnMgYmV0d2VlbiBSR0IgYW5kIG90aGVyIGNvbG9yIHN5c3RlbXMuCgpUaGlzIG1vZHVsZXMgcHJvdmlkZXMgdHdvIGZ1bmN0aW9ucyBmb3IgZWFjaCBjb2xvciBzeXN0ZW0gQUJDOgoKICByZ2JfdG9fYWJjKHIsIGcsIGIpIC0tPiBhLCBiLCBjCiAgYWJjX3RvX3JnYihhLCBiLCBjKSAtLT4gciwgZywgYgoKQWxsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgdHJpcGxlcyBvZiBmbG9hdHMgaW4gdGhlIHJhbmdlIFswLjAuLi4xLjBdCih3aXRoIHRoZSBleGNlcHRpb24gb2YgSSBhbmQgUSwgd2hpY2ggY292ZXJzIGEgc2xpZ2h0bHkgbGFyZ2VyIHJhbmdlKS4KSW5wdXRzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIG1heSBjYXVzZSBleGNlcHRpb25zIG9yIGludmFsaWQgb3V0cHV0cy4KClN1cHBvcnRlZCBjb2xvciBzeXN0ZW1zOgpSR0I6IFJlZCwgR3JlZW4sIEJsdWUgY29tcG9uZW50cwpZSVE6IEx1bWluYW5jZSwgQ2hyb21pbmFuY2UgKHVzZWQgYnkgY29tcG9zaXRlIHZpZGVvIHNpZ25hbHMpCkhMUzogSHVlLCBMdW1pbmFuY2UsIFNhdHVyYXRpb24KSFNWOiBIdWUsIFNhdHVyYXRpb24sIFZhbHVlCiIiIgoKIyBSZWZlcmVuY2VzOgojIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUlRCiMgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9ITFNfY29sb3Jfc3BhY2UKIyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTVl9jb2xvcl9zcGFjZQoKX19hbGxfXyA9IFsicmdiX3RvX3lpcSIsInlpcV90b19yZ2IiLCJyZ2JfdG9faGxzIiwiaGxzX3RvX3JnYiIsCiAgICAgICAgICAgInJnYl90b19oc3YiLCJoc3ZfdG9fcmdiIl0KCiMgU29tZSBmbG9hdGluZyBwb2ludCBjb25zdGFudHMKCk9ORV9USElSRCA9IDEuMC8zLjAKT05FX1NJWFRIID0gMS4wLzYuMApUV09fVEhJUkQgPSAyLjAvMy4wCgojIFlJUTogdXNlZCBieSBjb21wb3NpdGUgdmlkZW8gc2lnbmFscyAobGluZWFyIGNvbWJpbmF0aW9ucyBvZiBSR0IpCiMgWTogcGVyY2VpdmVkIGdyZXkgbGV2ZWwgKDAuMCA9PSBibGFjaywgMS4wID09IHdoaXRlKQojIEksIFE6IGNvbG9yIGNvbXBvbmVudHMKCmRlZiByZ2JfdG9feWlxKHIsIGcsIGIpOgogICAgeSA9IDAuMzAqciArIDAuNTkqZyArIDAuMTEqYgogICAgaSA9IDAuNjAqciAtIDAuMjgqZyAtIDAuMzIqYgogICAgcSA9IDAuMjEqciAtIDAuNTIqZyArIDAuMzEqYgogICAgcmV0dXJuICh5LCBpLCBxKQoKZGVmIHlpcV90b19yZ2IoeSwgaSwgcSk6CiAgICByID0geSArIDAuOTQ4MjYyKmkgKyAwLjYyNDAxMypxCiAgICBnID0geSAtIDAuMjc2MDY2KmkgLSAwLjYzOTgxMCpxCiAgICBiID0geSAtIDEuMTA1NDUwKmkgKyAxLjcyOTg2MCpxCiAgICBpZiByIDwgMC4wOgogICAgICAgIHIgPSAwLjAKICAgIGlmIGcgPCAwLjA6CiAgICAgICAgZyA9IDAuMAogICAgaWYgYiA8IDAuMDoKICAgICAgICBiID0gMC4wCiAgICBpZiByID4gMS4wOgogICAgICAgIHIgPSAxLjAKICAgIGlmIGcgPiAxLjA6CiAgICAgICAgZyA9IDEuMAogICAgaWYgYiA+IDEuMDoKICAgICAgICBiID0gMS4wCiAgICByZXR1cm4gKHIsIGcsIGIpCgoKIyBITFM6IEh1ZSwgTHVtaW5hbmNlLCBTYXR1cmF0aW9uCiMgSDogcG9zaXRpb24gaW4gdGhlIHNwZWN0cnVtCiMgTDogY29sb3IgbGlnaHRuZXNzCiMgUzogY29sb3Igc2F0dXJhdGlvbgoKZGVmIHJnYl90b19obHMociwgZywgYik6CiAgICBtYXhjID0gbWF4KHIsIGcsIGIpCiAgICBtaW5jID0gbWluKHIsIGcsIGIpCiAgICAjIFhYWCBDYW4gb3B0aW1pemUgKG1heGMrbWluYykgYW5kIChtYXhjLW1pbmMpCiAgICBsID0gKG1pbmMrbWF4YykvMi4wCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgbCwgMC4wCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAobWF4YyttaW5jKQogICAgZWxzZToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAoMi4wLW1heGMtbWluYykKICAgIHJjID0gKG1heGMtcikgLyAobWF4Yy1taW5jKQogICAgZ2MgPSAobWF4Yy1nKSAvIChtYXhjLW1pbmMpCiAgICBiYyA9IChtYXhjLWIpIC8gKG1heGMtbWluYykKICAgIGlmIHIgPT0gbWF4YzoKICAgICAgICBoID0gYmMtZ2MKICAgIGVsaWYgZyA9PSBtYXhjOgogICAgICAgIGggPSAyLjArcmMtYmMKICAgIGVsc2U6CiAgICAgICAgaCA9IDQuMCtnYy1yYwogICAgaCA9IChoLzYuMCkgJSAxLjAKICAgIHJldHVybiBoLCBsLCBzCgpkZWYgaGxzX3RvX3JnYihoLCBsLCBzKToKICAgIGlmIHMgPT0gMC4wOgogICAgICAgIHJldHVybiBsLCBsLCBsCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBtMiA9IGwgKiAoMS4wK3MpCiAgICBlbHNlOgogICAgICAgIG0yID0gbCtzLShsKnMpCiAgICBtMSA9IDIuMCpsIC0gbTIKICAgIHJldHVybiAoX3YobTEsIG0yLCBoK09ORV9USElSRCksIF92KG0xLCBtMiwgaCksIF92KG0xLCBtMiwgaC1PTkVfVEhJUkQpKQoKZGVmIF92KG0xLCBtMiwgaHVlKToKICAgIGh1ZSA9IGh1ZSAlIDEuMAogICAgaWYgaHVlIDwgT05FX1NJWFRIOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqaHVlKjYuMAogICAgaWYgaHVlIDwgMC41OgogICAgICAgIHJldHVybiBtMgogICAgaWYgaHVlIDwgVFdPX1RISVJEOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqKFRXT19USElSRC1odWUpKjYuMAogICAgcmV0dXJuIG0xCgoKIyBIU1Y6IEh1ZSwgU2F0dXJhdGlvbiwgVmFsdWUKIyBIOiBwb3NpdGlvbiBpbiB0aGUgc3BlY3RydW0KIyBTOiBjb2xvciBzYXR1cmF0aW9uICgicHVyaXR5IikKIyBWOiBjb2xvciBicmlnaHRuZXNzCgpkZWYgcmdiX3RvX2hzdihyLCBnLCBiKToKICAgIG1heGMgPSBtYXgociwgZywgYikKICAgIG1pbmMgPSBtaW4ociwgZywgYikKICAgIHYgPSBtYXhjCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgMC4wLCB2CiAgICBzID0gKG1heGMtbWluYykgLyBtYXhjCiAgICByYyA9IChtYXhjLXIpIC8gKG1heGMtbWluYykKICAgIGdjID0gKG1heGMtZykgLyAobWF4Yy1taW5jKQogICAgYmMgPSAobWF4Yy1iKSAvIChtYXhjLW1pbmMpCiAgICBpZiByID09IG1heGM6CiAgICAgICAgaCA9IGJjLWdjCiAgICBlbGlmIGcgPT0gbWF4YzoKICAgICAgICBoID0gMi4wK3JjLWJjCiAgICBlbHNlOgogICAgICAgIGggPSA0LjArZ2MtcmMKICAgIGggPSAoaC82LjApICUgMS4wCiAgICByZXR1cm4gaCwgcywgdgoKZGVmIGhzdl90b19yZ2IoaCwgcywgdik6CiAgICBpZiBzID09IDAuMDoKICAgICAgICByZXR1cm4gdiwgdiwgdgogICAgaSA9IGludChoKjYuMCkgIyBYWFggYXNzdW1lIGludCgpIHRydW5jYXRlcyEKICAgIGYgPSAoaCo2LjApIC0gaQogICAgcCA9IHYqKDEuMCAtIHMpCiAgICBxID0gdiooMS4wIC0gcypmKQogICAgdCA9IHYqKDEuMCAtIHMqKDEuMC1mKSkKICAgIGkgPSBpJTYKICAgIGlmIGkgPT0gMDoKICAgICAgICByZXR1cm4gdiwgdCwgcAogICAgaWYgaSA9PSAxOgogICAgICAgIHJldHVybiBxLCB2LCBwCiAgICBpZiBpID09IDI6CiAgICAgICAgcmV0dXJuIHAsIHYsIHQKICAgIGlmIGkgPT0gMzoKICAgICAgICByZXR1cm4gcCwgcSwgdgogICAgaWYgaSA9PSA0OgogICAgICAgIHJldHVybiB0LCBwLCB2CiAgICBpZiBpID09IDU6CiAgICAgICAgcmV0dXJuIHYsIHAsIHEKICAgICMgQ2Fubm90IGdldCBoZXJlCg==',
'/Lib/traceback.py':'aW1wb3J0IHN5cwpkZWYgcHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycik6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICBmaWxlLndyaXRlKGV4Yy5pbmZvKQogICAgZmlsZS53cml0ZSgnXG4nK2V4Yy5fX25hbWVfXykKICAgIGlmIGV4Yy5tZXNzYWdlOgogICAgICAgIGZpbGUud3JpdGUoJzogJytleGMubWVzc2FnZSkKICAgIGZpbGUud3JpdGUoJ1xuJykK',
'/Lib/_random.py':'aW1wb3J0IF9vcwpjbGFzcyBSYW5kb206CiAgICAiIiJSYW5kb20gbnVtYmVyIGdlbmVyYXRvciBiYXNlIGNsYXNzIHVzZWQgYnkgYm91bmQgbW9kdWxlIGZ1bmN0aW9ucy4KCiAgICBVc2VkIHRvIGluc3RhbnRpYXRlIGluc3RhbmNlcyBvZiBSYW5kb20gdG8gZ2V0IGdlbmVyYXRvcnMgdGhhdCBkb24ndAogICAgc2hhcmUgc3RhdGUuCgogICAgQ2xhc3MgUmFuZG9tIGNhbiBhbHNvIGJlIHN1YmNsYXNzZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgZGlmZmVyZW50IGJhc2ljCiAgICBnZW5lcmF0b3Igb2YgeW91ciBvd24gZGV2aXNpbmc6IGluIHRoYXQgY2FzZSwgb3ZlcnJpZGUgdGhlIGZvbGxvd2luZwogICAgbWV0aG9kczogIHJhbmRvbSgpLCBzZWVkKCksIGdldHN0YXRlKCksIGFuZCBzZXRzdGF0ZSgpLgogICAgT3B0aW9uYWxseSwgaW1wbGVtZW50IGEgZ2V0cmFuZGJpdHMoKSBtZXRob2Qgc28gdGhhdCByYW5kcmFuZ2UoKQogICAgY2FuIGNvdmVyIGFyYml0cmFyaWx5IGxhcmdlIHJhbmdlcy4KCiAgICAiIiIKICAgICNyYW5kb20KICAgICNzZWVkCiAgICAjZ2V0c3RhdGUKICAgICNzZXRzdGF0ZQoKCiAgICBWRVJTSU9OID0gMyAgICAgIyB1c2VkIGJ5IGdldHN0YXRlL3NldHN0YXRlCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHg9Tm9uZSk6CiAgICAgICAgIiIiSW5pdGlhbGl6ZSBhbiBpbnN0YW5jZS4KCiAgICAgICAgT3B0aW9uYWwgYXJndW1lbnQgeCBjb250cm9scyBzZWVkaW5nLCBhcyBmb3IgUmFuZG9tLnNlZWQoKS4KICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9eAoKICAgIGRlZiBzZWVkKHNlbGYsIGE9Tm9uZSwgdmVyc2lvbj0yKToKICAgICAgICAiIiJJbml0aWFsaXplIGludGVybmFsIHN0YXRlIGZyb20gaGFzaGFibGUgb2JqZWN0LgoKICAgICAgICBOb25lIG9yIG5vIGFyZ3VtZW50IHNlZWRzIGZyb20gY3VycmVudCB0aW1lIG9yIGZyb20gYW4gb3BlcmF0aW5nCiAgICAgICAgc3lzdGVtIHNwZWNpZmljIHJhbmRvbW5lc3Mgc291cmNlIGlmIGF2YWlsYWJsZS4KCiAgICAgICAgRm9yIHZlcnNpb24gMiAodGhlIGRlZmF1bHQpLCBhbGwgb2YgdGhlIGJpdHMgYXJlIHVzZWQgaWYgKmEqIGlzIGEgc3RyLAogICAgICAgIGJ5dGVzLCBvciBieXRlYXJyYXkuICBGb3IgdmVyc2lvbiAxLCB0aGUgaGFzaCgpIG9mICphKiBpcyB1c2VkIGluc3RlYWQuCgogICAgICAgIElmICphKiBpcyBhbiBpbnQsIGFsbCBiaXRzIGFyZSB1c2VkLgoKICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9YQogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKCiAgICBkZWYgZ2V0c3RhdGUoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGludGVybmFsIHN0YXRlOyBjYW4gYmUgcGFzc2VkIHRvIHNldHN0YXRlKCkgbGF0ZXIuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3N0YXRlCgogICAgZGVmIHNldHN0YXRlKHNlbGYsIHN0YXRlKToKICAgICAgICAiIiJSZXN0b3JlIGludGVybmFsIHN0YXRlIGZyb20gb2JqZWN0IHJldHVybmVkIGJ5IGdldHN0YXRlKCkuIiIiCiAgICAgICAgc2VsZi5fc3RhdGU9c3RhdGUKCiAgICBkZWYgcmFuZG9tKHNlbGYpOgogICAgICAgICIiIkdldCB0aGUgbmV4dCByYW5kb20gbnVtYmVyIGluIHRoZSByYW5nZSBbMC4wLCAxLjApLiIiIgogICAgICAgIHJldHVybiBfb3MucmFuZG9tKCkKCiAgICBkZWYgZ2V0cmFuZGJpdHMoc2VsZiwgayk6CiAgICAgICAgIiIiZ2V0cmFuZGJpdHMoaykgLT4geC4gIEdlbmVyYXRlcyBhIGxvbmcgaW50IHdpdGggayByYW5kb20gYml0cy4iIiIKICAgICAgICBpZiBrIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ251bWJlciBvZiBiaXRzIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKQogICAgICAgIGlmIGsgIT0gaW50KGspOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ251bWJlciBvZiBiaXRzIHNob3VsZCBiZSBhbiBpbnRlZ2VyJykKICAgICAgICBudW1ieXRlcyA9IChrICsgNykgLy8gOCAgICAgICAgICAgICAgICAgICAgICAgIyBiaXRzIC8gOCBhbmQgcm91bmRlZCB1cAogICAgICAgIHggPSBpbnQuZnJvbV9ieXRlcyhfdXJhbmRvbShudW1ieXRlcyksICdiaWcnKQogICAgICAgIHJldHVybiB4ID4+IChudW1ieXRlcyAqIDggLSBrKSAgICAgICAgICAgICAgICAjIHRyaW0gZXhjZXNzIGJpdHMK',
'/Lib/signal.py':'IiIiVGhpcyBtb2R1bGUgcHJvdmlkZXMgbWVjaGFuaXNtcyB0byB1c2Ugc2lnbmFsIGhhbmRsZXJzIGluIFB5dGhvbi4KCkZ1bmN0aW9uczoKCmFsYXJtKCkgLS0gY2F1c2UgU0lHQUxSTSBhZnRlciBhIHNwZWNpZmllZCB0aW1lIFtVbml4IG9ubHldCnNldGl0aW1lcigpIC0tIGNhdXNlIGEgc2lnbmFsIChkZXNjcmliZWQgYmVsb3cpIGFmdGVyIGEgc3BlY2lmaWVkCiAgICAgICAgICAgICAgIGZsb2F0IHRpbWUgYW5kIHRoZSB0aW1lciBtYXkgcmVzdGFydCB0aGVuIFtVbml4IG9ubHldCmdldGl0aW1lcigpIC0tIGdldCBjdXJyZW50IHZhbHVlIG9mIHRpbWVyIFtVbml4IG9ubHldCnNpZ25hbCgpIC0tIHNldCB0aGUgYWN0aW9uIGZvciBhIGdpdmVuIHNpZ25hbApnZXRzaWduYWwoKSAtLSBnZXQgdGhlIHNpZ25hbCBhY3Rpb24gZm9yIGEgZ2l2ZW4gc2lnbmFsCnBhdXNlKCkgLS0gd2FpdCB1bnRpbCBhIHNpZ25hbCBhcnJpdmVzIFtVbml4IG9ubHldCmRlZmF1bHRfaW50X2hhbmRsZXIoKSAtLSBkZWZhdWx0IFNJR0lOVCBoYW5kbGVyCgpzaWduYWwgY29uc3RhbnRzOgpTSUdfREZMIC0tIHVzZWQgdG8gcmVmZXIgdG8gdGhlIHN5c3RlbSBkZWZhdWx0IGhhbmRsZXIKU0lHX0lHTiAtLSB1c2VkIHRvIGlnbm9yZSB0aGUgc2lnbmFsCk5TSUcgLS0gbnVtYmVyIG9mIGRlZmluZWQgc2lnbmFscwpTSUdJTlQsIFNJR1RFUk0sIGV0Yy4gLS0gc2lnbmFsIG51bWJlcnMKCml0aW1lciBjb25zdGFudHM6CklUSU1FUl9SRUFMIC0tIGRlY3JlbWVudHMgaW4gcmVhbCB0aW1lLCBhbmQgZGVsaXZlcnMgU0lHQUxSTSB1cG9uCiAgICAgICAgICAgICAgIGV4cGlyYXRpb24KSVRJTUVSX1ZJUlRVQUwgLS0gZGVjcmVtZW50cyBvbmx5IHdoZW4gdGhlIHByb2Nlc3MgaXMgZXhlY3V0aW5nLAogICAgICAgICAgICAgICBhbmQgZGVsaXZlcnMgU0lHVlRBTFJNIHVwb24gZXhwaXJhdGlvbgpJVElNRVJfUFJPRiAtLSBkZWNyZW1lbnRzIGJvdGggd2hlbiB0aGUgcHJvY2VzcyBpcyBleGVjdXRpbmcgYW5kCiAgICAgICAgICAgICAgIHdoZW4gdGhlIHN5c3RlbSBpcyBleGVjdXRpbmcgb24gYmVoYWxmIG9mIHRoZSBwcm9jZXNzLgogICAgICAgICAgICAgICBDb3VwbGVkIHdpdGggSVRJTUVSX1ZJUlRVQUwsIHRoaXMgdGltZXIgaXMgdXN1YWxseQogICAgICAgICAgICAgICB1c2VkIHRvIHByb2ZpbGUgdGhlIHRpbWUgc3BlbnQgYnkgdGhlIGFwcGxpY2F0aW9uCiAgICAgICAgICAgICAgIGluIHVzZXIgYW5kIGtlcm5lbCBzcGFjZS4gU0lHUFJPRiBpcyBkZWxpdmVyZWQgdXBvbgogICAgICAgICAgICAgICBleHBpcmF0aW9uLgoKCioqKiBJTVBPUlRBTlQgTk9USUNFICoqKgpBIHNpZ25hbCBoYW5kbGVyIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHR3byBhcmd1bWVudHM6CnRoZSBmaXJzdCBpcyB0aGUgc2lnbmFsIG51bWJlciwgdGhlIHNlY29uZCBpcyB0aGUgaW50ZXJydXB0ZWQgc3RhY2sgZnJhbWUuIiIiCgpDVFJMX0JSRUFLX0VWRU5UPTEKQ1RSTF9DX0VWRU5UPTAKTlNJRz0yMwpTSUdBQlJUPTIyClNJR0JSRUFLPTIxClNJR0ZQRT04ClNJR0lMTD00ClNJR0lOVD0yClNJR1NFR1Y9MTEKU0lHVEVSTT0xNQpTSUdfREZMPTAKU0lHX0lHTj0xCgpkZWYgc2lnbmFsKHNpZ25hbG51bSwgaGFuZGxlcikgOgogICAgcGFzcwo=',
'/Lib/bisect.py':'IiIiQmlzZWN0aW9uIGFsZ29yaXRobXMuIiIiCgpkZWYgaW5zb3J0X3JpZ2h0KGEsIHgsIGxvPTAsIGhpPU5vbmUpOgogICAgIiIiSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBJZiB4IGlzIGFscmVhZHkgaW4gYSwgaW5zZXJ0IGl0IHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgeCA8IGFbbWlkXTogaGkgPSBtaWQKICAgICAgICBlbHNlOiBsbyA9IG1pZCsxCiAgICBhLmluc2VydChsbywgeCkKCmluc29ydCA9IGluc29ydF9yaWdodCAgICMgYmFja3dhcmQgY29tcGF0aWJpbGl0eQoKZGVmIGJpc2VjdF9yaWdodChhLCB4LCBsbz0wLCBoaT1Ob25lKToKICAgICIiIlJldHVybiB0aGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIFRoZSByZXR1cm4gdmFsdWUgaSBpcyBzdWNoIHRoYXQgYWxsIGUgaW4gYVs6aV0gaGF2ZSBlIDw9IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID4geC4gIFNvIGlmIHggYWxyZWFkeSBhcHBlYXJzIGluIHRoZSBsaXN0LCBhLmluc2VydCh4KSB3aWxsCiAgICBpbnNlcnQganVzdCBhZnRlciB0aGUgcmlnaHRtb3N0IHggYWxyZWFkeSB0aGVyZS4KCiAgICBPcHRpb25hbCBhcmdzIGxvIChkZWZhdWx0IDApIGFuZCBoaSAoZGVmYXVsdCBsZW4oYSkpIGJvdW5kIHRoZQogICAgc2xpY2Ugb2YgYSB0byBiZSBzZWFyY2hlZC4KICAgICIiIgoKICAgIGlmIGxvIDwgMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpCiAgICBpZiBoaSBpcyBOb25lOgogICAgICAgIGhpID0gbGVuKGEpCiAgICB3aGlsZSBsbyA8IGhpOgogICAgICAgIG1pZCA9IChsbytoaSkvLzIKICAgICAgICBpZiB4IDwgYVttaWRdOiBoaSA9IG1pZAogICAgICAgIGVsc2U6IGxvID0gbWlkKzEKICAgIHJldHVybiBsbwoKYmlzZWN0ID0gYmlzZWN0X3JpZ2h0ICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CgpkZWYgaW5zb3J0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJJbnNlcnQgaXRlbSB4IGluIGxpc3QgYSwgYW5kIGtlZXAgaXQgc29ydGVkIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIGxlZnQgb2YgdGhlIGxlZnRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICBhLmluc2VydChsbywgeCkKCgpkZWYgYmlzZWN0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJSZXR1cm4gdGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBUaGUgcmV0dXJuIHZhbHVlIGkgaXMgc3VjaCB0aGF0IGFsbCBlIGluIGFbOmldIGhhdmUgZSA8IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID49IHguICBTbyBpZiB4IGFscmVhZHkgYXBwZWFycyBpbiB0aGUgbGlzdCwgYS5pbnNlcnQoeCkgd2lsbAogICAgaW5zZXJ0IGp1c3QgYmVmb3JlIHRoZSBsZWZ0bW9zdCB4IGFscmVhZHkgdGhlcmUuCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICByZXR1cm4gbG8KCiMgZG9udCcgbmVlZCB0aGlzIGZvciBicnl0aG9uCiMgT3ZlcndyaXRlIGFib3ZlIGRlZmluaXRpb25zIHdpdGggYSBmYXN0IEMgaW1wbGVtZW50YXRpb24KI3RyeToKIyAgICBmcm9tIF9iaXNlY3QgaW1wb3J0ICoKI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgICBwYXNzCg==',
'/Lib/collections.py':'',
'/Lib/functools.py':'',
'/Lib/weakref.py':'',
'/Lib/codecs.py':'',
'/Lib/linecache.py':'IiIiQ2FjaGUgbGluZXMgZnJvbSBmaWxlcy4KClRoaXMgaXMgaW50ZW5kZWQgdG8gcmVhZCBsaW5lcyBmcm9tIG1vZHVsZXMgaW1wb3J0ZWQgLS0gaGVuY2UgaWYgYSBmaWxlbmFtZQppcyBub3QgZm91bmQsIGl0IHdpbGwgbG9vayBkb3duIHRoZSBtb2R1bGUgc2VhcmNoIHBhdGggZm9yIGEgZmlsZSBieQp0aGF0IG5hbWUuCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKI2ZpeG1lIGJyeXRob24KI2ltcG9ydCB0b2tlbml6ZQoKX19hbGxfXyA9IFsiZ2V0bGluZSIsICJjbGVhcmNhY2hlIiwgImNoZWNrY2FjaGUiXQoKZGVmIGdldGxpbmUoZmlsZW5hbWUsIGxpbmVubywgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICBsaW5lcyA9IGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscykKICAgIGlmIDEgPD0gbGluZW5vIDw9IGxlbihsaW5lcyk6CiAgICAgICAgcmV0dXJuIGxpbmVzW2xpbmVuby0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgojIFRoZSBjYWNoZQoKY2FjaGUgPSB7fSAjIFRoZSBjYWNoZQoKCmRlZiBjbGVhcmNhY2hlKCk6CiAgICAiIiJDbGVhciB0aGUgY2FjaGUgZW50aXJlbHkuIiIiCgogICAgZ2xvYmFsIGNhY2hlCiAgICBjYWNoZSA9IHt9CgoKZGVmIGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgICIiIkdldCB0aGUgbGluZXMgZm9yIGEgZmlsZSBmcm9tIHRoZSBjYWNoZS4KICAgIFVwZGF0ZSB0aGUgY2FjaGUgaWYgaXQgZG9lc24ndCBjb250YWluIGFuIGVudHJ5IGZvciB0aGlzIGZpbGUgYWxyZWFkeS4iIiIKCiAgICBpZiBmaWxlbmFtZSBpbiBjYWNoZToKICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCiAgICBlbHNlOgogICAgICAgIHJldHVybiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHMpCgoKZGVmIGNoZWNrY2FjaGUoZmlsZW5hbWU9Tm9uZSk6CiAgICAiIiJEaXNjYXJkIGNhY2hlIGVudHJpZXMgdGhhdCBhcmUgb3V0IG9mIGRhdGUuCiAgICAoVGhpcyBpcyBub3QgY2hlY2tlZCB1cG9uIGVhY2ggY2FsbCEpIiIiCgogICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICBmaWxlbmFtZXMgPSBsaXN0KGNhY2hlLmtleXMoKSkKICAgIGVsc2U6CiAgICAgICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgICAgIGZpbGVuYW1lcyA9IFtmaWxlbmFtZV0KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KCiAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgIHNpemUsIG10aW1lLCBsaW5lcywgZnVsbG5hbWUgPSBjYWNoZVtmaWxlbmFtZV0KICAgICAgICBpZiBtdGltZSBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZSAgICMgbm8tb3AgZm9yIGZpbGVzIGxvYWRlZCB2aWEgYSBfX2xvYWRlcl9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWwgY2FjaGVbZmlsZW5hbWVdCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2l6ZSAhPSBzdGF0LnN0X3NpemUgb3IgbXRpbWUgIT0gc3RhdC5zdF9tdGltZToKICAgICAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQoKCmRlZiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICAiIiJVcGRhdGUgYSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuIGl0cyBsaXN0IG9mIGxpbmVzLgogICAgSWYgc29tZXRoaW5nJ3Mgd3JvbmcsIHByaW50IGEgbWVzc2FnZSwgZGlzY2FyZCB0aGUgY2FjaGUgZW50cnksCiAgICBhbmQgcmV0dXJuIGFuIGVtcHR5IGxpc3QuIiIiCgogICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQogICAgaWYgbm90IGZpbGVuYW1lIG9yIChmaWxlbmFtZS5zdGFydHN3aXRoKCc8JykgYW5kIGZpbGVuYW1lLmVuZHN3aXRoKCc+JykpOgogICAgICAgIHJldHVybiBbXQoKICAgIGZ1bGxuYW1lID0gZmlsZW5hbWUKICAgIHRyeToKICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgIGJhc2VuYW1lID0gZmlsZW5hbWUKCiAgICAgICAgIyBUcnkgZm9yIGEgX19sb2FkZXJfXywgaWYgYXZhaWxhYmxlCiAgICAgICAgaWYgbW9kdWxlX2dsb2JhbHMgYW5kICdfX2xvYWRlcl9fJyBpbiBtb2R1bGVfZ2xvYmFsczoKICAgICAgICAgICAgbmFtZSA9IG1vZHVsZV9nbG9iYWxzLmdldCgnX19uYW1lX18nKQogICAgICAgICAgICBsb2FkZXIgPSBtb2R1bGVfZ2xvYmFsc1snX19sb2FkZXJfXyddCiAgICAgICAgICAgIGdldF9zb3VyY2UgPSBnZXRhdHRyKGxvYWRlciwgJ2dldF9zb3VyY2UnLCBOb25lKQoKICAgICAgICAgICAgaWYgbmFtZSBhbmQgZ2V0X3NvdXJjZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZ2V0X3NvdXJjZShuYW1lKQogICAgICAgICAgICAgICAgZXhjZXB0IChJbXBvcnRFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gbHVjaywgdGhlIFBFUDMwMiBsb2FkZXIgY2Fubm90IGZpbmQgdGhlIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAjIGZvciB0aGlzIG1vZHVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbZmlsZW5hbWVdID0gKAogICAgICAgICAgICAgICAgICAgICAgICBsZW4oZGF0YSksIE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIFtsaW5lKydcbicgZm9yIGxpbmUgaW4gZGF0YS5zcGxpdGxpbmVzKCldLCBmdWxsbmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCgogICAgICAgICMgVHJ5IGxvb2tpbmcgdGhyb3VnaCB0aGUgbW9kdWxlIHNlYXJjaCBwYXRoLCB3aGljaCBpcyBvbmx5IHVzZWZ1bAogICAgICAgICMgd2hlbiBoYW5kbGluZyBhIHJlbGF0aXZlIGZpbGVuYW1lLgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgIyBUYWtlIGNhcmUgdG8gaGFuZGxlIHBhY2thZ2VzLgogICAgICAgIGlmIGJhc2VuYW1lID09ICdfX2luaXRfXy5weSc6CiAgICAgICAgICAgICMgZmlsZW5hbWUgcmVmZXJlcyB0byBhIHBhY2thZ2UKICAgICAgICAgICAgYmFzZW5hbWUgPSBmaWxlbmFtZQoKICAgICAgICBmb3IgZGlybmFtZSBpbiBzeXMucGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgYmFzZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBBdHRyaWJ1dGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIE5vdCBzdWZmaWNpZW50bHkgc3RyaW5nLWxpa2UgdG8gZG8gYW55dGhpbmcgdXNlZnVsIHdpdGguCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICNmaXhtZSBicnl0aG9uLCBpbnZhbGlkIHN5bnRheCAKICAgICAgICAgICAgI2V4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICNmaXhtZSBicnl0aG9uIHVuZXhwZWN0ZWQgdG9rZW4gZWxzZQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgcmV0dXJuIFtdCiAgICB0cnk6CiAgICAgICAgZnA9b3BlbihmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICN3aXRoIHRva2VuaXplLm9wZW4oZnVsbG5hbWUpIGFzIGZwOgogICAgICAgIGxpbmVzID0gZnAucmVhZGxpbmVzKCkKICAgICAgICBmcC5jbG9zZSgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gW10KICAgIGlmIGxpbmVzIGFuZCBub3QgbGluZXNbLTFdLmVuZHN3aXRoKCdcbicpOgogICAgICAgIGxpbmVzWy0xXSArPSAnXG4nCiAgICBzaXplLCBtdGltZSA9IHN0YXQuc3Rfc2l6ZSwgc3RhdC5zdF9tdGltZQogICAgY2FjaGVbZmlsZW5hbWVdID0gc2l6ZSwgbXRpbWUsIGxpbmVzLCBmdWxsbmFtZQogICAgcmV0dXJuIGxpbmVzCg==',
'/Lib/_abcoll.py':'IyBDb3B5cmlnaHQgMjAwNyBHb29nbGUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIyBMaWNlbnNlZCB0byBQU0YgdW5kZXIgYSBDb250cmlidXRvciBBZ3JlZW1lbnQuCgoiIiJBYnN0cmFjdCBCYXNlIENsYXNzZXMgKEFCQ3MpIGZvciBjb2xsZWN0aW9ucywgYWNjb3JkaW5nIHRvIFBFUCAzMTE5LgoKRE9OJ1QgVVNFIFRISVMgTU9EVUxFIERJUkVDVExZISAgVGhlIGNsYXNzZXMgaGVyZSBzaG91bGQgYmUgaW1wb3J0ZWQKdmlhIGNvbGxlY3Rpb25zOyB0aGV5IGFyZSBkZWZpbmVkIGhlcmUgb25seSB0byBhbGxldmlhdGUgY2VydGFpbgpib290c3RyYXBwaW5nIGlzc3Vlcy4gIFVuaXQgdGVzdHMgYXJlIGluIHRlc3RfY29sbGVjdGlvbnMuCiIiIgoKI2Zyb20gYWJjIGltcG9ydCBBQkNNZXRhLCBhYnN0cmFjdG1ldGhvZAppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJIYXNoYWJsZSIsICJJdGVyYWJsZSIsICJJdGVyYXRvciIsCiAgICAgICAgICAgIlNpemVkIiwgIkNvbnRhaW5lciIsICJDYWxsYWJsZSIsCiAgICAgICAgICAgIlNldCIsICJNdXRhYmxlU2V0IiwKICAgICAgICAgICAiTWFwcGluZyIsICJNdXRhYmxlTWFwcGluZyIsCiAgICAgICAgICAgIk1hcHBpbmdWaWV3IiwgIktleXNWaWV3IiwgIkl0ZW1zVmlldyIsICJWYWx1ZXNWaWV3IiwKICAgICAgICAgICAiU2VxdWVuY2UiLCAiTXV0YWJsZVNlcXVlbmNlIiwKICAgICAgICAgICAiQnl0ZVN0cmluZyIsCiAgICAgICAgICAgXQoKIiIiCiMjIyBjb2xsZWN0aW9uIHJlbGF0ZWQgdHlwZXMgd2hpY2ggYXJlIG5vdCBleHBvc2VkIHRocm91Z2ggYnVpbHRpbiAjIyMKIyMgaXRlcmF0b3JzICMjCiNmaXhtZSBicnl0aG9uCiNieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcihiJycpKQpieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcignJykpCiNmaXhtZSBicnl0aG9uCiNieXRlYXJyYXlfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoYnl0ZWFycmF5KCkpKQojY2FsbGFibGVfaXRlcmF0b3IgPSA/Pz8KZGljdF9rZXlpdGVyYXRvciA9IHR5cGUoaXRlcih7fS5rZXlzKCkpKQpkaWN0X3ZhbHVlaXRlcmF0b3IgPSB0eXBlKGl0ZXIoe30udmFsdWVzKCkpKQpkaWN0X2l0ZW1pdGVyYXRvciA9IHR5cGUoaXRlcih7fS5pdGVtcygpKSkKbGlzdF9pdGVyYXRvciA9IHR5cGUoaXRlcihbXSkpCmxpc3RfcmV2ZXJzZWl0ZXJhdG9yID0gdHlwZShpdGVyKHJldmVyc2VkKFtdKSkpCnJhbmdlX2l0ZXJhdG9yID0gdHlwZShpdGVyKHJhbmdlKDApKSkKc2V0X2l0ZXJhdG9yID0gdHlwZShpdGVyKHNldCgpKSkKc3RyX2l0ZXJhdG9yID0gdHlwZShpdGVyKCIiKSkKdHVwbGVfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoKCkpKQp6aXBfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoemlwKCkpKQojIyB2aWV3cyAjIwpkaWN0X2tleXMgPSB0eXBlKHt9LmtleXMoKSkKZGljdF92YWx1ZXMgPSB0eXBlKHt9LnZhbHVlcygpKQpkaWN0X2l0ZW1zID0gdHlwZSh7fS5pdGVtcygpKQojIyBtaXNjICMjCmRpY3RfcHJveHkgPSB0eXBlKHR5cGUuX19kaWN0X18pCiIiIgoKZGVmIGFic3RyYWN0bWV0aG9kKHNlbGYpOgogICAgcmV0dXJuIHNlbGYKCiMjIyBPTkUtVFJJQ0sgUE9OSUVTICMjIwoKCiNjbGFzcyBJdGVyYWJsZShtZXRhY2xhc3M9QUJDTWV0YSk6CmNsYXNzIEl0ZXJhYmxlOgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHdoaWxlIEZhbHNlOgogICAgICAgICAgICB5aWVsZCBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBJdGVyYWJsZToKICAgICAgICAgICAgaWYgYW55KCJfX2l0ZXJfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCgojY2xhc3MgU2l6ZWQobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBTaXplZDoKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAwCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBTaXplZDoKICAgICAgICAgICAgaWYgYW55KCJfX2xlbl9fIiBpbiBCLl9fZGljdF9fIGZvciBCIGluIEMuX19tcm9fXyk6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKCiNjbGFzcyBDb250YWluZXIobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBDb250YWluZXI6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHgpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9fc3ViY2xhc3Nob29rX18oY2xzLCBDKToKICAgICAgICBpZiBjbHMgaXMgQ29udGFpbmVyOgogICAgICAgICAgICBpZiBhbnkoIl9fY29udGFpbnNfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiMjIyBNQVBQSU5HUyAjIyMKCgpjbGFzcyBNYXBwaW5nKFNpemVkLCBJdGVyYWJsZSwgQ29udGFpbmVyKToKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGZba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICByZXR1cm4gS2V5c1ZpZXcoc2VsZikKCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgcmV0dXJuIEl0ZW1zVmlldyhzZWxmKQoKICAgIGRlZiB2YWx1ZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIFZhbHVlc1ZpZXcoc2VsZikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgTWFwcGluZyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBkaWN0KHNlbGYuaXRlbXMoKSkgPT0gZGljdChvdGhlci5pdGVtcygpKQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3QgKHNlbGYgPT0gb3RoZXIpCgoKY2xhc3MgTXV0YWJsZU1hcHBpbmcoTWFwcGluZyk6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgcmFpc2UgS2V5RXJyb3IKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgX19tYXJrZXIgPSBvYmplY3QoKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCBkZWZhdWx0PV9fbWFya2VyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIHNlbGYuX19tYXJrZXI6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbCBzZWxmW2tleV0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBrZXkgPSBuZXh0KGl0ZXIoc2VsZikpCiAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yCiAgICAgICAgdmFsdWUgPSBzZWxmW2tleV0KICAgICAgICBkZWwgc2VsZltrZXldCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc2VsZi5wb3BpdGVtKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKCphcmdzLCAqKmt3ZHMpOgogICAgICAgIGlmIGxlbihhcmdzKSA+IDI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidXBkYXRlKCkgdGFrZXMgYXQgbW9zdCAyIHBvc2l0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyAoe30gZ2l2ZW4pIi5mb3JtYXQobGVuKGFyZ3MpKSkKICAgICAgICBlbGlmIG5vdCBhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInVwZGF0ZSgpIHRha2VzIGF0IGxlYXN0IDEgYXJndW1lbnQgKDAgZ2l2ZW4pIikKICAgICAgICBzZWxmID0gYXJnc1swXQogICAgICAgIG90aGVyID0gYXJnc1sxXSBpZiBsZW4oYXJncykgPj0gMiBlbHNlICgpCgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIE1hcHBpbmcpOgogICAgICAgICAgICBmb3Iga2V5IGluIG90aGVyOgogICAgICAgICAgICAgICAgc2VsZltrZXldID0gb3RoZXJba2V5XQogICAgICAgIGVsaWYgaGFzYXR0cihvdGhlciwgImtleXMiKToKICAgICAgICAgICAgZm9yIGtleSBpbiBvdGhlci5rZXlzKCk6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSBvdGhlcltrZXldCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gb3RoZXI6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3ZHMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWUKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmW2tleV0gPSBkZWZhdWx0CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiNNdXRhYmxlTWFwcGluZy5yZWdpc3RlcihkaWN0KQo=',
'/Lib/copy.py':'',
'/Lib/keyword.py':'a3dsaXN0ID0gWwojLS1zdGFydCBrZXl3b3Jkcy0tCiAgICAgICAgJ0ZhbHNlJywKICAgICAgICAnTm9uZScsCiAgICAgICAgJ1RydWUnLAogICAgICAgICdhbmQnLAogICAgICAgICdhcycsCiAgICAgICAgJ2Fzc2VydCcsCiAgICAgICAgJ2JyZWFrJywKICAgICAgICAnY2xhc3MnLAogICAgICAgICdjb250aW51ZScsCiAgICAgICAgJ2RlZicsCiAgICAgICAgJ2RlbCcsCiAgICAgICAgJ2VsaWYnLAogICAgICAgICdlbHNlJywKICAgICAgICAnZXhjZXB0JywKICAgICAgICAnZmluYWxseScsCiAgICAgICAgJ2ZvcicsCiAgICAgICAgJ2Zyb20nLAogICAgICAgICdnbG9iYWwnLAogICAgICAgICdpZicsCiAgICAgICAgJ2ltcG9ydCcsCiAgICAgICAgJ2luJywKICAgICAgICAnaXMnLAogICAgICAgICdsYW1iZGEnLAogICAgICAgICdub25sb2NhbCcsCiAgICAgICAgJ25vdCcsCiAgICAgICAgJ29yJywKICAgICAgICAncGFzcycsCiAgICAgICAgJ3JhaXNlJywKICAgICAgICAncmV0dXJuJywKICAgICAgICAndHJ5JywKICAgICAgICAnd2hpbGUnLAogICAgICAgICd3aXRoJywKICAgICAgICAneWllbGQnLAojLS1lbmQga2V5d29yZHMtLQogICAgICAgIF0KCmRlZiBpc2tleXdvcmQod29yZCk6CiAgICByZXR1cm4gd29yZCBpbiBrd2xpc3QK',
'/Lib/stat.py':'IiIiQ29uc3RhbnRzL2Z1bmN0aW9ucyBmb3IgaW50ZXJwcmV0aW5nIHJlc3VsdHMgb2Ygb3Muc3RhdCgpIGFuZCBvcy5sc3RhdCgpLg0KDQpTdWdnZXN0ZWQgdXNhZ2U6IGZyb20gc3RhdCBpbXBvcnQgKg0KIiIiDQoNCiMgSW5kaWNlcyBmb3Igc3RhdCBzdHJ1Y3QgbWVtYmVycyBpbiB0aGUgdHVwbGUgcmV0dXJuZWQgYnkgb3Muc3RhdCgpDQoNClNUX01PREUgID0gMA0KU1RfSU5PICAgPSAxDQpTVF9ERVYgICA9IDINClNUX05MSU5LID0gMw0KU1RfVUlEICAgPSA0DQpTVF9HSUQgICA9IDUNClNUX1NJWkUgID0gNg0KU1RfQVRJTUUgPSA3DQpTVF9NVElNRSA9IDgNClNUX0NUSU1FID0gOQ0KDQojIEV4dHJhY3QgYml0cyBmcm9tIHRoZSBtb2RlDQoNCmRlZiBTX0lNT0RFKG1vZGUpOg0KICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBjYW4gYmUgc2V0IGJ5DQogICAgb3MuY2htb2QoKS4NCiAgICAiIiINCiAgICByZXR1cm4gbW9kZSAmIDBvNzc3Nw0KDQpkZWYgU19JRk1UKG1vZGUpOg0KICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBkZXNjcmliZXMgdGhlDQogICAgZmlsZSB0eXBlLg0KICAgICIiIg0KICAgIHJldHVybiBtb2RlICYgMG8xNzAwMDANCg0KIyBDb25zdGFudHMgdXNlZCBhcyBTX0lGTVQoKSBmb3IgdmFyaW91cyBmaWxlIHR5cGVzDQojIChub3QgYWxsIGFyZSBpbXBsZW1lbnRlZCBvbiBhbGwgc3lzdGVtcykNCg0KU19JRkRJUiAgPSAwbzA0MDAwMCAgIyBkaXJlY3RvcnkNClNfSUZDSFIgID0gMG8wMjAwMDAgICMgY2hhcmFjdGVyIGRldmljZQ0KU19JRkJMSyAgPSAwbzA2MDAwMCAgIyBibG9jayBkZXZpY2UNClNfSUZSRUcgID0gMG8xMDAwMDAgICMgcmVndWxhciBmaWxlDQpTX0lGSUZPICA9IDBvMDEwMDAwICAjIGZpZm8gKG5hbWVkIHBpcGUpDQpTX0lGTE5LICA9IDBvMTIwMDAwICAjIHN5bWJvbGljIGxpbmsNClNfSUZTT0NLID0gMG8xNDAwMDAgICMgc29ja2V0IGZpbGUNCg0KIyBGdW5jdGlvbnMgdG8gdGVzdCBmb3IgZWFjaCBmaWxlIHR5cGUNCg0KZGVmIFNfSVNESVIobW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgZGlyZWN0b3J5LiIiIg0KICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRkRJUg0KDQpkZWYgU19JU0NIUihtb2RlKToNCiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSBjaGFyYWN0ZXIgc3BlY2lhbCBkZXZpY2UgZmlsZS4iIiINCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZDSFINCg0KZGVmIFNfSVNCTEsobW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgYmxvY2sgc3BlY2lhbCBkZXZpY2UgZmlsZS4iIiINCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZCTEsNCg0KZGVmIFNfSVNSRUcobW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgcmVndWxhciBmaWxlLiIiIg0KICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRlJFRw0KDQpkZWYgU19JU0ZJRk8obW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgRklGTyAobmFtZWQgcGlwZSkuIiIiDQogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGSUZPDQoNCmRlZiBTX0lTTE5LKG1vZGUpOg0KICAgICIiIlJldHVybiBUcnVlIGlmIG1vZGUgaXMgZnJvbSBhIHN5bWJvbGljIGxpbmsuIiIiDQogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGTE5LDQoNCmRlZiBTX0lTU09DSyhtb2RlKToNCiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSBzb2NrZXQuIiIiDQogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGU09DSw0KDQojIE5hbWVzIGZvciBwZXJtaXNzaW9uIGJpdHMNCg0KU19JU1VJRCA9IDBvNDAwMCAgIyBzZXQgVUlEIGJpdA0KU19JU0dJRCA9IDBvMjAwMCAgIyBzZXQgR0lEIGJpdA0KU19FTkZNVCA9IFNfSVNHSUQgIyBmaWxlIGxvY2tpbmcgZW5mb3JjZW1lbnQNClNfSVNWVFggPSAwbzEwMDAgICMgc3RpY2t5IGJpdA0KU19JUkVBRCA9IDBvMDQwMCAgIyBVbml4IFY3IHN5bm9ueW0gZm9yIFNfSVJVU1INClNfSVdSSVRFID0gMG8wMjAwICMgVW5peCBWNyBzeW5vbnltIGZvciBTX0lXVVNSDQpTX0lFWEVDID0gMG8wMTAwICAjIFVuaXggVjcgc3lub255bSBmb3IgU19JWFVTUg0KU19JUldYVSA9IDBvMDcwMCAgIyBtYXNrIGZvciBvd25lciBwZXJtaXNzaW9ucw0KU19JUlVTUiA9IDBvMDQwMCAgIyByZWFkIGJ5IG93bmVyDQpTX0lXVVNSID0gMG8wMjAwICAjIHdyaXRlIGJ5IG93bmVyDQpTX0lYVVNSID0gMG8wMTAwICAjIGV4ZWN1dGUgYnkgb3duZXINClNfSVJXWEcgPSAwbzAwNzAgICMgbWFzayBmb3IgZ3JvdXAgcGVybWlzc2lvbnMNClNfSVJHUlAgPSAwbzAwNDAgICMgcmVhZCBieSBncm91cA0KU19JV0dSUCA9IDBvMDAyMCAgIyB3cml0ZSBieSBncm91cA0KU19JWEdSUCA9IDBvMDAxMCAgIyBleGVjdXRlIGJ5IGdyb3VwDQpTX0lSV1hPID0gMG8wMDA3ICAjIG1hc2sgZm9yIG90aGVycyAobm90IGluIGdyb3VwKSBwZXJtaXNzaW9ucw0KU19JUk9USCA9IDBvMDAwNCAgIyByZWFkIGJ5IG90aGVycw0KU19JV09USCA9IDBvMDAwMiAgIyB3cml0ZSBieSBvdGhlcnMNClNfSVhPVEggPSAwbzAwMDEgICMgZXhlY3V0ZSBieSBvdGhlcnMNCg0KIyBOYW1lcyBmb3IgZmlsZSBmbGFncw0KDQpVRl9OT0RVTVAgICAgPSAweDAwMDAwMDAxICAjIGRvIG5vdCBkdW1wIGZpbGUNClVGX0lNTVVUQUJMRSA9IDB4MDAwMDAwMDIgICMgZmlsZSBtYXkgbm90IGJlIGNoYW5nZWQNClVGX0FQUEVORCAgICA9IDB4MDAwMDAwMDQgICMgZmlsZSBtYXkgb25seSBiZSBhcHBlbmRlZCB0bw0KVUZfT1BBUVVFICAgID0gMHgwMDAwMDAwOCAgIyBkaXJlY3RvcnkgaXMgb3BhcXVlIHdoZW4gdmlld2VkIHRocm91Z2ggYSB1bmlvbiBzdGFjaw0KVUZfTk9VTkxJTksgID0gMHgwMDAwMDAxMCAgIyBmaWxlIG1heSBub3QgYmUgcmVuYW1lZCBvciBkZWxldGVkDQpVRl9DT01QUkVTU0VEID0gMHgwMDAwMDAyMCAjIE9TIFg6IGZpbGUgaXMgaGZzLWNvbXByZXNzZWQNClVGX0hJRERFTiAgICA9IDB4MDAwMDgwMDAgICMgT1MgWDogZmlsZSBzaG91bGQgbm90IGJlIGRpc3BsYXllZA0KU0ZfQVJDSElWRUQgID0gMHgwMDAxMDAwMCAgIyBmaWxlIG1heSBiZSBhcmNoaXZlZA0KU0ZfSU1NVVRBQkxFID0gMHgwMDAyMDAwMCAgIyBmaWxlIG1heSBub3QgYmUgY2hhbmdlZA0KU0ZfQVBQRU5EICAgID0gMHgwMDA0MDAwMCAgIyBmaWxlIG1heSBvbmx5IGJlIGFwcGVuZGVkIHRvDQpTRl9OT1VOTElOSyAgPSAweDAwMTAwMDAwICAjIGZpbGUgbWF5IG5vdCBiZSByZW5hbWVkIG9yIGRlbGV0ZWQNClNGX1NOQVBTSE9UICA9IDB4MDAyMDAwMDAgICMgZmlsZSBpcyBhIHNuYXBzaG90IGZpbGUNCg0KDQpfZmlsZW1vZGVfdGFibGUgPSAoDQogICAgKChTX0lGTE5LLCAgICAgICAgICJsIiksDQogICAgIChTX0lGUkVHLCAgICAgICAgICItIiksDQogICAgIChTX0lGQkxLLCAgICAgICAgICJiIiksDQogICAgIChTX0lGRElSLCAgICAgICAgICJkIiksDQogICAgIChTX0lGQ0hSLCAgICAgICAgICJjIiksDQogICAgIChTX0lGSUZPLCAgICAgICAgICJwIikpLA0KDQogICAgKChTX0lSVVNSLCAgICAgICAgICJyIiksKSwNCiAgICAoKFNfSVdVU1IsICAgICAgICAgInciKSwpLA0KICAgICgoU19JWFVTUnxTX0lTVUlELCAicyIpLA0KICAgICAoU19JU1VJRCwgICAgICAgICAiUyIpLA0KICAgICAoU19JWFVTUiwgICAgICAgICAieCIpKSwNCg0KICAgICgoU19JUkdSUCwgICAgICAgICAiciIpLCksDQogICAgKChTX0lXR1JQLCAgICAgICAgICJ3IiksKSwNCiAgICAoKFNfSVhHUlB8U19JU0dJRCwgInMiKSwNCiAgICAgKFNfSVNHSUQsICAgICAgICAgIlMiKSwNCiAgICAgKFNfSVhHUlAsICAgICAgICAgIngiKSksDQoNCiAgICAoKFNfSVJPVEgsICAgICAgICAgInIiKSwpLA0KICAgICgoU19JV09USCwgICAgICAgICAidyIpLCksDQogICAgKChTX0lYT1RIfFNfSVNWVFgsICJ0IiksDQogICAgIChTX0lTVlRYLCAgICAgICAgICJUIiksDQogICAgIChTX0lYT1RILCAgICAgICAgICJ4IikpDQopDQoNCmRlZiBmaWxlbW9kZShtb2RlKToNCiAgICAiIiJDb252ZXJ0IGEgZmlsZSdzIG1vZGUgdG8gYSBzdHJpbmcgb2YgdGhlIGZvcm0gJy1yd3hyd3hyd3gnLiIiIg0KICAgIHBlcm0gPSBbXQ0KICAgIGZvciB0YWJsZSBpbiBfZmlsZW1vZGVfdGFibGU6DQogICAgICAgIGZvciBiaXQsIGNoYXIgaW4gdGFibGU6DQogICAgICAgICAgICBpZiBtb2RlICYgYml0ID09IGJpdDoNCiAgICAgICAgICAgICAgICBwZXJtLmFwcGVuZChjaGFyKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwZXJtLmFwcGVuZCgiLSIpDQogICAgcmV0dXJuICIiLmpvaW4ocGVybSkNCg==',
'/Lib/_dummy_thread.py':'IiIiRHJvcC1pbiByZXBsYWNlbWVudCBmb3IgdGhlIHRocmVhZCBtb2R1bGUuCgpNZWFudCB0byBiZSB1c2VkIGFzIGEgYnJhaW4tZGVhZCBzdWJzdGl0dXRlIHNvIHRoYXQgdGhyZWFkZWQgY29kZSBkb2VzCm5vdCBuZWVkIHRvIGJlIHJld3JpdHRlbiBmb3Igd2hlbiB0aGUgdGhyZWFkIG1vZHVsZSBpcyBub3QgcHJlc2VudC4KClN1Z2dlc3RlZCB1c2FnZSBpczo6CgogICAgdHJ5OgogICAgICAgIGltcG9ydCBfdGhyZWFkCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IF9kdW1teV90aHJlYWQgYXMgX3RocmVhZAoKIiIiCiMgRXhwb3J0cyBvbmx5IHRoaW5ncyBzcGVjaWZpZWQgYnkgdGhyZWFkIGRvY3VtZW50YXRpb247CiMgc2tpcHBpbmcgb2Jzb2xldGUgc3lub255bXMgYWxsb2NhdGUoKSwgc3RhcnRfbmV3KCksIGV4aXRfdGhyZWFkKCkuCl9fYWxsX18gPSBbJ2Vycm9yJywgJ3N0YXJ0X25ld190aHJlYWQnLCAnZXhpdCcsICdnZXRfaWRlbnQnLCAnYWxsb2NhdGVfbG9jaycsCiAgICAgICAgICAgJ2ludGVycnVwdF9tYWluJywgJ0xvY2tUeXBlJ10KCiMgQSBkdW1teSB2YWx1ZQpUSU1FT1VUX01BWCA9IDIqKjMxCgojIE5PVEU6IHRoaXMgbW9kdWxlIGNhbiBiZSBpbXBvcnRlZCBlYXJseSBpbiB0aGUgZXh0ZW5zaW9uIGJ1aWxkaW5nIHByb2Nlc3MsCiMgYW5kIHNvIHRvcCBsZXZlbCBpbXBvcnRzIG9mIG90aGVyIG1vZHVsZXMgc2hvdWxkIGJlIGF2b2lkZWQuICBJbnN0ZWFkLCBhbGwKIyBpbXBvcnRzIGFyZSBkb25lIHdoZW4gbmVlZGVkIG9uIGEgZnVuY3Rpb24tYnktZnVuY3Rpb24gYmFzaXMuICBTaW5jZSB0aHJlYWRzCiMgYXJlIGRpc2FibGVkLCB0aGUgaW1wb3J0IGxvY2sgc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZSBhbnl3YXkgKD8/KS4KCmVycm9yID0gUnVudGltZUVycm9yCgpkZWYgc3RhcnRfbmV3X3RocmVhZChmdW5jdGlvbiwgYXJncywga3dhcmdzPXt9KToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuc3RhcnRfbmV3X3RocmVhZCgpLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWtpbmcgc3VyZSB0aGF0IGBgYXJnc2BgIGlzIGEKICAgIHR1cGxlIGFuZCBgYGt3YXJnc2BgIGlzIGEgZGljdGlvbmFyeS4gIElmIGFuIGV4Y2VwdGlvbiBpcyByYWlzZWQKICAgIGFuZCBpdCBpcyBTeXN0ZW1FeGl0ICh3aGljaCBjYW4gYmUgZG9uZSBieSBfdGhyZWFkLmV4aXQoKSkgaXQgaXMKICAgIGNhdWdodCBhbmQgbm90aGluZyBpcyBkb25lOyBhbGwgb3RoZXIgZXhjZXB0aW9ucyBhcmUgcHJpbnRlZCBvdXQKICAgIGJ5IHVzaW5nIHRyYWNlYmFjay5wcmludF9leGMoKS4KCiAgICBJZiB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24gY2FsbHMgaW50ZXJydXB0X21haW4gdGhlIEtleWJvYXJkSW50ZXJydXB0IHdpbGwgYmUKICAgIHJhaXNlZCB3aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zLgoKICAgICIiIgogICAgaWYgdHlwZShhcmdzKSAhPSB0eXBlKHR1cGxlKCkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiMm5kIGFyZyBtdXN0IGJlIGEgdHVwbGUiKQogICAgaWYgdHlwZShrd2FyZ3MpICE9IHR5cGUoZGljdCgpKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoIjNyZCBhcmcgbXVzdCBiZSBhIGRpY3QiKQogICAgZ2xvYmFsIF9tYWluCiAgICBfbWFpbiA9IEZhbHNlCiAgICB0cnk6CiAgICAgICAgZnVuY3Rpb24oKmFyZ3MsICoqa3dhcmdzKQogICAgZXhjZXB0IFN5c3RlbUV4aXQ6CiAgICAgICAgcGFzcwogICAgZXhjZXB0OgogICAgICAgIGltcG9ydCB0cmFjZWJhY2sKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgIF9tYWluID0gVHJ1ZQogICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgIGlmIF9pbnRlcnJ1cHQ6CiAgICAgICAgX2ludGVycnVwdCA9IEZhbHNlCiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKCmRlZiBleGl0KCk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLmV4aXQoKS4iIiIKICAgIHJhaXNlIFN5c3RlbUV4aXQKCmRlZiBnZXRfaWRlbnQoKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuZ2V0X2lkZW50KCkuCgogICAgU2luY2UgdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIF90aHJlYWRtb2R1bGUgaXMgbm90CiAgICBhdmFpbGFibGUsIGl0IGlzIHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhlIGN1cnJlbnQgcHJvY2VzcyBpcyB0aGUKICAgIG9ubHkgdGhyZWFkLiAgVGh1cyBhIGNvbnN0YW50IGNhbiBiZSBzYWZlbHkgcmV0dXJuZWQuCiAgICAiIiIKICAgIHJldHVybiAtMQoKZGVmIGFsbG9jYXRlX2xvY2soKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuYWxsb2NhdGVfbG9jaygpLiIiIgogICAgcmV0dXJuIExvY2tUeXBlKCkKCmRlZiBzdGFja19zaXplKHNpemU9Tm9uZSk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLnN0YWNrX3NpemUoKS4iIiIKICAgIGlmIHNpemUgaXMgbm90IE5vbmU6CiAgICAgICAgcmFpc2UgZXJyb3IoInNldHRpbmcgdGhyZWFkIHN0YWNrIHNpemUgbm90IHN1cHBvcnRlZCIpCiAgICByZXR1cm4gMAoKY2xhc3MgTG9ja1R5cGUob2JqZWN0KToKICAgICIiIkNsYXNzIGltcGxlbWVudGluZyBkdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLkxvY2tUeXBlLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWludGFpbmluZyBzZWxmLmxvY2tlZF9zdGF0dXMKICAgIHdoaWNoIGlzIGEgYm9vbGVhbiB0aGF0IHN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxvY2suICBQaWNrbGluZyBvZgogICAgdGhlIGxvY2ssIHRob3VnaCwgc2hvdWxkIG5vdCBiZSBkb25lIHNpbmNlIGlmIHRoZSBfdGhyZWFkIG1vZHVsZSBpcwogICAgdGhlbiB1c2VkIHdpdGggYW4gdW5waWNrbGVkIGBgbG9jaygpYGAgZnJvbSBoZXJlIHByb2JsZW1zIGNvdWxkCiAgICBvY2N1ciBmcm9tIHRoaXMgY2xhc3Mgbm90IGhhdmluZyBhdG9taWMgbWV0aG9kcy4KCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gRmFsc2UKCiAgICBkZWYgYWNxdWlyZShzZWxmLCB3YWl0ZmxhZz1Ob25lLCB0aW1lb3V0PS0xKToKICAgICAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBhY3F1aXJlKCkuCgogICAgICAgIEZvciBibG9ja2luZyBjYWxscywgc2VsZi5sb2NrZWRfc3RhdHVzIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvCiAgICAgICAgVHJ1ZSBhbmQgcmV0dXJuZWQgYXBwcm9wcmlhdGVseSBiYXNlZCBvbiB2YWx1ZSBvZgogICAgICAgIGBgd2FpdGZsYWdgYC4gIElmIGl0IGlzIG5vbi1ibG9ja2luZywgdGhlbiB0aGUgdmFsdWUgaXMKICAgICAgICBhY3R1YWxseSBjaGVja2VkIGFuZCBub3Qgc2V0IGlmIGl0IGlzIGFscmVhZHkgYWNxdWlyZWQuICBUaGlzCiAgICAgICAgaXMgYWxsIGRvbmUgc28gdGhhdCB0aHJlYWRpbmcuQ29uZGl0aW9uJ3MgYXNzZXJ0IHN0YXRlbWVudHMKICAgICAgICBhcmVuJ3QgdHJpZ2dlcmVkIGFuZCB0aHJvdyBhIGxpdHRsZSBmaXQuCgogICAgICAgICIiIgogICAgICAgIGlmIHdhaXRmbGFnIGlzIE5vbmUgb3Igd2FpdGZsYWc6CiAgICAgICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IFRydWUKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gVHJ1ZQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIHRpbWVvdXQgPiAwOgogICAgICAgICAgICAgICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCh0aW1lb3V0KQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgX19lbnRlcl9fID0gYWNxdWlyZQoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCB0eXAsIHZhbCwgdGIpOgogICAgICAgIHNlbGYucmVsZWFzZSgpCgogICAgZGVmIHJlbGVhc2Uoc2VsZik6CiAgICAgICAgIiIiUmVsZWFzZSB0aGUgZHVtbXkgbG9jay4iIiIKICAgICAgICAjIFhYWCBQZXJoYXBzIHNob3VsZG4ndCBhY3R1YWxseSBib3RoZXIgdG8gdGVzdD8gIENvdWxkIGxlYWQKICAgICAgICAjICAgICB0byBwcm9ibGVtcyBmb3IgY29tcGxleCwgdGhyZWFkZWQgY29kZS4KICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICByYWlzZSBlcnJvcgogICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgbG9ja2VkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmxvY2tlZF9zdGF0dXMKCiMgVXNlZCB0byBzaWduYWwgdGhhdCBpbnRlcnJ1cHRfbWFpbiB3YXMgY2FsbGVkIGluIGEgInRocmVhZCIKX2ludGVycnVwdCA9IEZhbHNlCiMgVHJ1ZSB3aGVuIG5vdCBleGVjdXRpbmcgaW4gYSAidGhyZWFkIgpfbWFpbiA9IFRydWUKCmRlZiBpbnRlcnJ1cHRfbWFpbigpOgogICAgIiIiU2V0IF9pbnRlcnJ1cHQgZmxhZyB0byBUcnVlIHRvIGhhdmUgc3RhcnRfbmV3X3RocmVhZCByYWlzZQogICAgS2V5Ym9hcmRJbnRlcnJ1cHQgdXBvbiBleGl0aW5nLiIiIgogICAgaWYgX21haW46CiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKICAgIGVsc2U6CiAgICAgICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgICAgICBfaW50ZXJydXB0ID0gVHJ1ZQo=',
'/Lib/reprlib.py':'IiIiUmVkbyB0aGUgYnVpbHRpbiByZXByKCkgKHJlcHJlc2VudGF0aW9uKSBidXQgd2l0aCBsaW1pdHMgb24gbW9zdCBzaXplcy4iIiINCg0KX19hbGxfXyA9IFsiUmVwciIsICJyZXByIiwgInJlY3Vyc2l2ZV9yZXByIl0NCg0KaW1wb3J0IGJ1aWx0aW5zDQpmcm9tIGl0ZXJ0b29scyBpbXBvcnQgaXNsaWNlDQp0cnk6DQogICAgZnJvbSBfdGhyZWFkIGltcG9ydCBnZXRfaWRlbnQNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBmcm9tIF9kdW1teV90aHJlYWQgaW1wb3J0IGdldF9pZGVudA0KDQpkZWYgcmVjdXJzaXZlX3JlcHIoZmlsbHZhbHVlPScuLi4nKToNCiAgICAnRGVjb3JhdG9yIHRvIG1ha2UgYSByZXByIGZ1bmN0aW9uIHJldHVybiBmaWxsdmFsdWUgZm9yIGEgcmVjdXJzaXZlIGNhbGwnDQoNCiAgICBkZWYgZGVjb3JhdGluZ19mdW5jdGlvbih1c2VyX2Z1bmN0aW9uKToNCiAgICAgICAgcmVwcl9ydW5uaW5nID0gc2V0KCkNCg0KICAgICAgICBkZWYgd3JhcHBlcihzZWxmKToNCiAgICAgICAgICAgIGtleSA9IGlkKHNlbGYpLCBnZXRfaWRlbnQoKQ0KICAgICAgICAgICAgaWYga2V5IGluIHJlcHJfcnVubmluZzoNCiAgICAgICAgICAgICAgICByZXR1cm4gZmlsbHZhbHVlDQogICAgICAgICAgICByZXByX3J1bm5pbmcuYWRkKGtleSkNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXN1bHQgPSB1c2VyX2Z1bmN0aW9uKHNlbGYpDQogICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgIHJlcHJfcnVubmluZy5kaXNjYXJkKGtleSkNCiAgICAgICAgICAgIHJldHVybiByZXN1bHQNCg0KICAgICAgICAjIENhbid0IHVzZSBmdW5jdG9vbHMud3JhcHMoKSBoZXJlIGJlY2F1c2Ugb2YgYm9vdHN0cmFwIGlzc3Vlcw0KICAgICAgICB3cmFwcGVyLl9fbW9kdWxlX18gPSBnZXRhdHRyKHVzZXJfZnVuY3Rpb24sICdfX21vZHVsZV9fJykNCiAgICAgICAgd3JhcHBlci5fX2RvY19fID0gZ2V0YXR0cih1c2VyX2Z1bmN0aW9uLCAnX19kb2NfXycpDQogICAgICAgIHdyYXBwZXIuX19uYW1lX18gPSBnZXRhdHRyKHVzZXJfZnVuY3Rpb24sICdfX25hbWVfXycpDQogICAgICAgIHdyYXBwZXIuX19hbm5vdGF0aW9uc19fID0gZ2V0YXR0cih1c2VyX2Z1bmN0aW9uLCAnX19hbm5vdGF0aW9uc19fJywge30pDQogICAgICAgIHJldHVybiB3cmFwcGVyDQoNCiAgICByZXR1cm4gZGVjb3JhdGluZ19mdW5jdGlvbg0KDQpjbGFzcyBSZXByOg0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLm1heGxldmVsID0gNg0KICAgICAgICBzZWxmLm1heHR1cGxlID0gNg0KICAgICAgICBzZWxmLm1heGxpc3QgPSA2DQogICAgICAgIHNlbGYubWF4YXJyYXkgPSA1DQogICAgICAgIHNlbGYubWF4ZGljdCA9IDQNCiAgICAgICAgc2VsZi5tYXhzZXQgPSA2DQogICAgICAgIHNlbGYubWF4ZnJvemVuc2V0ID0gNg0KICAgICAgICBzZWxmLm1heGRlcXVlID0gNg0KICAgICAgICBzZWxmLm1heHN0cmluZyA9IDMwDQogICAgICAgIHNlbGYubWF4bG9uZyA9IDQwDQogICAgICAgIHNlbGYubWF4b3RoZXIgPSAzMA0KDQogICAgZGVmIHJlcHIoc2VsZiwgeCk6DQogICAgICAgIHJldHVybiBzZWxmLnJlcHIxKHgsIHNlbGYubWF4bGV2ZWwpDQoNCiAgICBkZWYgcmVwcjEoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICB0eXBlbmFtZSA9IHR5cGUoeCkuX19uYW1lX18NCiAgICAgICAgaWYgJyAnIGluIHR5cGVuYW1lOg0KICAgICAgICAgICAgcGFydHMgPSB0eXBlbmFtZS5zcGxpdCgpDQogICAgICAgICAgICB0eXBlbmFtZSA9ICdfJy5qb2luKHBhcnRzKQ0KICAgICAgICBpZiBoYXNhdHRyKHNlbGYsICdyZXByXycgKyB0eXBlbmFtZSk6DQogICAgICAgICAgICByZXR1cm4gZ2V0YXR0cihzZWxmLCAncmVwcl8nICsgdHlwZW5hbWUpKHgsIGxldmVsKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVwcl9pbnN0YW5jZSh4LCBsZXZlbCkNCg0KICAgIGRlZiBfcmVwcl9pdGVyYWJsZShzZWxmLCB4LCBsZXZlbCwgbGVmdCwgcmlnaHQsIG1heGl0ZXIsIHRyYWlsPScnKToNCiAgICAgICAgbiA9IGxlbih4KQ0KICAgICAgICBpZiBsZXZlbCA8PSAwIGFuZCBuOg0KICAgICAgICAgICAgcyA9ICcuLi4nDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBuZXdsZXZlbCA9IGxldmVsIC0gMQ0KICAgICAgICAgICAgcmVwcjEgPSBzZWxmLnJlcHIxDQogICAgICAgICAgICBwaWVjZXMgPSBbcmVwcjEoZWxlbSwgbmV3bGV2ZWwpIGZvciBlbGVtIGluIGlzbGljZSh4LCBtYXhpdGVyKV0NCiAgICAgICAgICAgIGlmIG4gPiBtYXhpdGVyOiAgcGllY2VzLmFwcGVuZCgnLi4uJykNCiAgICAgICAgICAgIHMgPSAnLCAnLmpvaW4ocGllY2VzKQ0KICAgICAgICAgICAgaWYgbiA9PSAxIGFuZCB0cmFpbDogIHJpZ2h0ID0gdHJhaWwgKyByaWdodA0KICAgICAgICByZXR1cm4gJyVzJXMlcycgJSAobGVmdCwgcywgcmlnaHQpDQoNCiAgICBkZWYgcmVwcl90dXBsZShzZWxmLCB4LCBsZXZlbCk6DQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCAnKCcsICcpJywgc2VsZi5tYXh0dXBsZSwgJywnKQ0KDQogICAgZGVmIHJlcHJfbGlzdChzZWxmLCB4LCBsZXZlbCk6DQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCAnWycsICddJywgc2VsZi5tYXhsaXN0KQ0KDQogICAgZGVmIHJlcHJfYXJyYXkoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICBoZWFkZXIgPSAiYXJyYXkoJyVzJywgWyIgJSB4LnR5cGVjb2RlDQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCBoZWFkZXIsICddKScsIHNlbGYubWF4YXJyYXkpDQoNCiAgICBkZWYgcmVwcl9zZXQoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICB4ID0gX3Bvc3NpYmx5X3NvcnRlZCh4KQ0KICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgJ3NldChbJywgJ10pJywgc2VsZi5tYXhzZXQpDQoNCiAgICBkZWYgcmVwcl9mcm96ZW5zZXQoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICB4ID0gX3Bvc3NpYmx5X3NvcnRlZCh4KQ0KICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgJ2Zyb3plbnNldChbJywgJ10pJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXhmcm96ZW5zZXQpDQoNCiAgICBkZWYgcmVwcl9kZXF1ZShzZWxmLCB4LCBsZXZlbCk6DQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCAnZGVxdWUoWycsICddKScsIHNlbGYubWF4ZGVxdWUpDQoNCiAgICBkZWYgcmVwcl9kaWN0KHNlbGYsIHgsIGxldmVsKToNCiAgICAgICAgbiA9IGxlbih4KQ0KICAgICAgICBpZiBuID09IDA6IHJldHVybiAne30nDQogICAgICAgIGlmIGxldmVsIDw9IDA6IHJldHVybiAney4uLn0nDQogICAgICAgIG5ld2xldmVsID0gbGV2ZWwgLSAxDQogICAgICAgIHJlcHIxID0gc2VsZi5yZXByMQ0KICAgICAgICBwaWVjZXMgPSBbXQ0KICAgICAgICBmb3Iga2V5IGluIGlzbGljZShfcG9zc2libHlfc29ydGVkKHgpLCBzZWxmLm1heGRpY3QpOg0KICAgICAgICAgICAga2V5cmVwciA9IHJlcHIxKGtleSwgbmV3bGV2ZWwpDQogICAgICAgICAgICB2YWxyZXByID0gcmVwcjEoeFtrZXldLCBuZXdsZXZlbCkNCiAgICAgICAgICAgIHBpZWNlcy5hcHBlbmQoJyVzOiAlcycgJSAoa2V5cmVwciwgdmFscmVwcikpDQogICAgICAgIGlmIG4gPiBzZWxmLm1heGRpY3Q6IHBpZWNlcy5hcHBlbmQoJy4uLicpDQogICAgICAgIHMgPSAnLCAnLmpvaW4ocGllY2VzKQ0KICAgICAgICByZXR1cm4gJ3slc30nICUgKHMsKQ0KDQogICAgZGVmIHJlcHJfc3RyKHNlbGYsIHgsIGxldmVsKToNCiAgICAgICAgcyA9IGJ1aWx0aW5zLnJlcHIoeFs6c2VsZi5tYXhzdHJpbmddKQ0KICAgICAgICBpZiBsZW4ocykgPiBzZWxmLm1heHN0cmluZzoNCiAgICAgICAgICAgIGkgPSBtYXgoMCwgKHNlbGYubWF4c3RyaW5nLTMpLy8yKQ0KICAgICAgICAgICAgaiA9IG1heCgwLCBzZWxmLm1heHN0cmluZy0zLWkpDQogICAgICAgICAgICBzID0gYnVpbHRpbnMucmVwcih4WzppXSArIHhbbGVuKHgpLWo6XSkNCiAgICAgICAgICAgIHMgPSBzWzppXSArICcuLi4nICsgc1tsZW4ocyktajpdDQogICAgICAgIHJldHVybiBzDQoNCiAgICBkZWYgcmVwcl9pbnQoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICBzID0gYnVpbHRpbnMucmVwcih4KSAjIFhYWCBIb3BlIHRoaXMgaXNuJ3QgdG9vIHNsb3cuLi4NCiAgICAgICAgaWYgbGVuKHMpID4gc2VsZi5tYXhsb25nOg0KICAgICAgICAgICAgaSA9IG1heCgwLCAoc2VsZi5tYXhsb25nLTMpLy8yKQ0KICAgICAgICAgICAgaiA9IG1heCgwLCBzZWxmLm1heGxvbmctMy1pKQ0KICAgICAgICAgICAgcyA9IHNbOmldICsgJy4uLicgKyBzW2xlbihzKS1qOl0NCiAgICAgICAgcmV0dXJuIHMNCg0KICAgIGRlZiByZXByX2luc3RhbmNlKHNlbGYsIHgsIGxldmVsKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcyA9IGJ1aWx0aW5zLnJlcHIoeCkNCiAgICAgICAgICAgICMgQnVncyBpbiB4Ll9fcmVwcl9fKCkgY2FuIGNhdXNlIGFyYml0cmFyeQ0KICAgICAgICAgICAgIyBleGNlcHRpb25zIC0tIHRoZW4gbWFrZSB1cCBzb21ldGhpbmcNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoNCiAgICAgICAgICAgIHJldHVybiAnPCVzIGluc3RhbmNlIGF0ICV4PicgJSAoeC5fX2NsYXNzX18uX19uYW1lX18sIGlkKHgpKQ0KICAgICAgICBpZiBsZW4ocykgPiBzZWxmLm1heG90aGVyOg0KICAgICAgICAgICAgaSA9IG1heCgwLCAoc2VsZi5tYXhvdGhlci0zKS8vMikNCiAgICAgICAgICAgIGogPSBtYXgoMCwgc2VsZi5tYXhvdGhlci0zLWkpDQogICAgICAgICAgICBzID0gc1s6aV0gKyAnLi4uJyArIHNbbGVuKHMpLWo6XQ0KICAgICAgICByZXR1cm4gcw0KDQoNCmRlZiBfcG9zc2libHlfc29ydGVkKHgpOg0KICAgICMgU2luY2Ugbm90IGFsbCBzZXF1ZW5jZXMgb2YgaXRlbXMgY2FuIGJlIHNvcnRlZCBhbmQgY29tcGFyaXNvbg0KICAgICMgZnVuY3Rpb25zIG1heSByYWlzZSBhcmJpdHJhcnkgZXhjZXB0aW9ucywgcmV0dXJuIGFuIHVuc29ydGVkDQogICAgIyBzZXF1ZW5jZSBpbiB0aGF0IGNhc2UuDQogICAgdHJ5Og0KICAgICAgICByZXR1cm4gc29ydGVkKHgpDQogICAgZXhjZXB0IEV4Y2VwdGlvbjoNCiAgICAgICAgcmV0dXJuIGxpc3QoeCkNCg0KYVJlcHIgPSBSZXByKCkNCnJlcHIgPSBhUmVwci5yZXByDQo=',
'/Lib/operator.py':'',
'/Lib/sys.py':'IyBoYWNrIHRvIHJldHVybiBzcGVjaWFsIGF0dHJpYnV0ZXMKZGVmIF9fZ2V0YXR0cl9fKE5vbmUsYXR0cik6CiAgICBpZiBhdHRyPT0nbW9kdWxlcyc6CiAgICAgICAgcmV0dXJuIGRpY3QoSlNPYmplY3QoX19CUllUSE9OX18uaW1wb3J0ZWQpKQogICAgZWxzZToKICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigiY2Fubm90IGltcG9ydCBuYW1lICIrYXR0cikKCmZyb20gYnJvd3NlciBpbXBvcnQgZG9jCl9fc3Rkb3V0X189Z2V0YXR0cihkb2MsIiRzdGRvdXQiKQpfX3N0ZGVycl9fPWdldGF0dHIoZG9jLCIkc3RkZXJyIikKCnN0ZG91dCA9IGdldGF0dHIoZG9jLCIkc3Rkb3V0IikKc3RkZXJyID0gZ2V0YXR0cihkb2MsIiRzdGRlcnIiKQoKaGFzX2xvY2FsX3N0b3JhZ2U9X19CUllUSE9OX18uaGFzX2xvY2FsX3N0b3JhZ2UKaGFzX2pzb249X19CUllUSE9OX18uaGFzX2pzb24KCmFyZ3YgPSBbJ19fbWFpbl9fJ10KCmNsYXNzIF9fdmVyc2lvbl9pbmZvKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgdmVyc2lvbl9pbmZvKToKICAgICAgICBzZWxmLnZlcnNpb25faW5mbyA9IHZlcnNpb25faW5mbwogICAgICAgIHNlbGYubWFqb3IgPSB2ZXJzaW9uX2luZm9bMF0KICAgICAgICBzZWxmLm1pbm9yID0gdmVyc2lvbl9pbmZvWzFdCiAgICAgICAgc2VsZi5taWNybyA9IHZlcnNpb25faW5mb1syXQogICAgICAgIHNlbGYucmVsZWFzZWxldmVsID0gdmVyc2lvbl9pbmZvWzNdCiAgICAgICAgc2VsZi5zZXJpYWwgPSB2ZXJzaW9uX2luZm9bNF0KCiAgICBkZWYgX19nZXRpdGVtX18oc2VsZiwgaW5kZXgpOgogICAgICAgIHJldHVybiBzZWxmLnZlcnNpb25faW5mb1tpbmRleF0KCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gc3RyKHNlbGYudmVyc2lvbl9pbmZvKQogICAgIAp2ZXJzaW9uX2luZm89X192ZXJzaW9uX2luZm8oX19CUllUSE9OX18udmVyc2lvbl9pbmZvKQpwYXRoPV9fQlJZVEhPTl9fLnBhdGgKYnVpbHRpbl9tb2R1bGVfbmFtZXM9Wydwb3NpeCddCgpieXRlb3JkZXI9J2xpdHRsZScKbWF4c2l6ZT05MDA3MTk5MjU0NzQwOTkyICAgI2xhcmdlc3QgaW50ZWdlci4uCm1heGludD05MDA3MTk5MjU0NzQwOTkyICAgI2xhcmdlc3QgaW50ZWdlci4uCm1heHVuaWNvZGU9MTExNDExMQoKcGxhdGZvcm09ImJyeXRob24iCndhcm5vcHRpb25zPVtdCgpjbGFzcyBmbGFnX2NsYXNzOgogIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgc2VsZi5kZWJ1Zz0wCiAgICAgIHNlbGYuaW5zcGVjdD0wCiAgICAgIHNlbGYuaW50ZXJhY3RpdmU9MAogICAgICBzZWxmLm9wdGltaXplPTAKICAgICAgc2VsZi5kb250X3dyaXRlX2J5dGVjb2RlPTAKICAgICAgc2VsZi5ub191c2VyX3NpdGU9MAogICAgICBzZWxmLm5vX3NpdGU9MAogICAgICBzZWxmLmlnbm9yZV9lbnZpcm9ubWVudD0wCiAgICAgIHNlbGYudmVyYm9zZT0wCiAgICAgIHNlbGYuYnl0ZXNfd2FybmluZz0wCiAgICAgIHNlbGYucXVpZXQ9MAogICAgICBzZWxmLmhhc2hfcmFuZG9taXphdGlvbj0xCgpmbGFncz1mbGFnX2NsYXNzKCkKCmRlZiBleGl0KGk9Tm9uZSk6CiAgICByYWlzZSBTeXN0ZW1FeGl0KCcnKQo=',
'/Lib/io.py':'aW1wb3J0IGJ1aWx0aW5zCgpvcGVuID0gYnVpbHRpbnMub3BlbgoKY2xhc3MgU3RyaW5nSU86CgogICAgZGVmIF9faW5pdF9fKHNlbGYsaW5pdGlhbF92YWx1ZT0nJyxuZXdsaW5lPU5vbmUpOgogICAgICAgIHNlbGYudmFsdWUgPSBpbml0aWFsX3ZhbHVlCiAgICAgICAgc2VsZi5uZXdsaW5lID0gbmV3bGluZQogICAgICAgIHNlbGYuX3BvcyA9IGxlbihpbml0aWFsX3ZhbHVlKQogICAgCiAgICBkZWYgd3JpdGUoc2VsZixkYXRhKToKICAgICAgICBzZWxmLnZhbHVlICs9IGRhdGEKICAgIAogICAgZGVmIHJlYWQoc2VsZixuYj0tMSk6CiAgICAgICAgaWYgbmIhPS0xOgogICAgICAgICAgICByZXMgPSBzZWxmLnZhbHVlW3NlbGYuX3BvczpzZWxmLl9wb3MrbmJdCiAgICAgICAgICAgIHNlbGYuX3BvcyA9IG1pbihzZWxmLl9wb3MrbmIsbGVuKHNlbGYudmFsdWUpLTEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzID0gc2VsZi52YWx1ZVtzZWxmLl9wb3M6XQogICAgICAgICAgICBzZWxmLl9wb3MgPSBsZW4oc2VsZi52YWx1ZSktMQogICAgICAgIHJldHVybiByZXMK',
'/Lib/os.py':'aW1wb3J0IF9vcwoKaW1wb3J0IHBvc2l4cGF0aCBhcyBwYXRoCgpuYW1lPSJicnl0aG9uIgoKI2FsdHNlcD1Ob25lCiNjdXJkaXI9Ii4iCgpkZWYgZGV2bnVsbCgpOgogICAgT1NFcnJvcignRnVuY3Rpb24gZGV2bnVsbCBub3Qgc3VwcG9ydGVkJykKCiNleHRzZXA9Jy4nCgpkZWYgZ2V0bG9hZGF2ZygpOgogICAgT1NFcnJvcignRnVuY3Rpb24gZ2V0bG9hZGF2ZyBub3Qgc3VwcG9ydGVkJykKCiNsaW5lc2VwPSJcbiIKI3BhdGhzZXA9IjsiCiNwYXJkaXI9Ii4uIgojc2VwPScvJwoKZGVmIHVyYW5kb20obGVuZ3RoKToKICAgIF9jPVtdCiAgICBmb3IgX2kgaW4gcmFuZ2UobGVuZ3RoKToKICAgICAgICBfYy5hcHBlbmQoY2hyKF9vcy5yYW5kaW50KDAsMjU1KSkpCiAgICAgICAgCiAgICByZXR1cm4gJycuam9pbihfYykKCiNpbXBvcnQgcG9zaXhwYXRoIGFzIHBhdGgKI3N5cy5tb2R1bGVzWydvcy5wYXRoJ10gPSBwYXRoCgojZnJvbSBvcy5wYXRoIGltcG9ydCAoY3VyZGlyLCBwYXJkaXIsIHNlcCwgcGF0aHNlcCwgZGVmcGF0aCwgZXh0c2VwLCBhbHRzZXApCgojIFB5dGhvbiB1c2VzIGZpeGVkIHZhbHVlcyBmb3IgdGhlIFNFRUtfIGNvbnN0YW50czsgdGhleSBhcmUgbWFwcGVkCiMgdG8gbmF0aXZlIGNvbnN0YW50cyBpZiBuZWNlc3NhcnkgaW4gcG9zaXhtb2R1bGUuYwpTRUVLX1NFVCA9IDAKU0VFS19DVVIgPSAxClNFRUtfRU5EID0gMgoKZGVmIHdhbGsodG9wLCB0b3Bkb3duPVRydWUsIG9uZXJyb3I9Tm9uZSwgZm9sbG93bGlua3M9RmFsc2UpOgogICAgI3JlY2VpdmUgc2NvcGUgZXJyb3IgaW4gYnJ5dGhvbgogICAgIyB3aHkgaGF2ZSBvcy53YWxrIGluIGJyeXRob24/ICBzZXJ2ZXIgc2lkZSBqYXZhc2NyaXB0IChub2RlanMpCiAgICAjIGltbWVkaWF0ZWx5IGNhbiB1c2Ugb3Mud2FsayB0byBjb21waWxlIGxpYnMgYW5kIExpYiBtb2R1bGVzCiAgICAjIHRvIGphdmFzY3JpcHQgZXF1aXZhbGVudC4uCiAgICBPU0Vycm9yKCdGdW5jdGlvbiBvcy53YWxrIG5vdCBzdXBwb3J0ZWQgeWV0JykKICAgIHJldHVybgoKICAgICIiIkRpcmVjdG9yeSB0cmVlIGdlbmVyYXRvci4KCiAgICBGb3IgZWFjaCBkaXJlY3RvcnkgaW4gdGhlIGRpcmVjdG9yeSB0cmVlIHJvb3RlZCBhdCB0b3AgKGluY2x1ZGluZyB0b3AKICAgIGl0c2VsZiwgYnV0IGV4Y2x1ZGluZyAnLicgYW5kICcuLicpLCB5aWVsZHMgYSAzLXR1cGxlCgogICAgICAgIGRpcnBhdGgsIGRpcm5hbWVzLCBmaWxlbmFtZXMKCiAgICBkaXJwYXRoIGlzIGEgc3RyaW5nLCB0aGUgcGF0aCB0byB0aGUgZGlyZWN0b3J5LiAgZGlybmFtZXMgaXMgYSBsaXN0IG9mCiAgICB0aGUgbmFtZXMgb2YgdGhlIHN1YmRpcmVjdG9yaWVzIGluIGRpcnBhdGggKGV4Y2x1ZGluZyAnLicgYW5kICcuLicpLgogICAgZmlsZW5hbWVzIGlzIGEgbGlzdCBvZiB0aGUgbmFtZXMgb2YgdGhlIG5vbi1kaXJlY3RvcnkgZmlsZXMgaW4gZGlycGF0aC4KICAgIE5vdGUgdGhhdCB0aGUgbmFtZXMgaW4gdGhlIGxpc3RzIGFyZSBqdXN0IG5hbWVzLCB3aXRoIG5vIHBhdGggY29tcG9uZW50cy4KICAgIFRvIGdldCBhIGZ1bGwgcGF0aCAod2hpY2ggYmVnaW5zIHdpdGggdG9wKSB0byBhIGZpbGUgb3IgZGlyZWN0b3J5IGluCiAgICBkaXJwYXRoLCBkbyBvcy5wYXRoLmpvaW4oZGlycGF0aCwgbmFtZSkuCgogICAgSWYgb3B0aW9uYWwgYXJnICd0b3Bkb3duJyBpcyB0cnVlIG9yIG5vdCBzcGVjaWZpZWQsIHRoZSB0cmlwbGUgZm9yIGEKICAgIGRpcmVjdG9yeSBpcyBnZW5lcmF0ZWQgYmVmb3JlIHRoZSB0cmlwbGVzIGZvciBhbnkgb2YgaXRzIHN1YmRpcmVjdG9yaWVzCiAgICAoZGlyZWN0b3JpZXMgYXJlIGdlbmVyYXRlZCB0b3AgZG93bikuICBJZiB0b3Bkb3duIGlzIGZhbHNlLCB0aGUgdHJpcGxlCiAgICBmb3IgYSBkaXJlY3RvcnkgaXMgZ2VuZXJhdGVkIGFmdGVyIHRoZSB0cmlwbGVzIGZvciBhbGwgb2YgaXRzCiAgICBzdWJkaXJlY3RvcmllcyAoZGlyZWN0b3JpZXMgYXJlIGdlbmVyYXRlZCBib3R0b20gdXApLgoKICAgIFdoZW4gdG9wZG93biBpcyB0cnVlLCB0aGUgY2FsbGVyIGNhbiBtb2RpZnkgdGhlIGRpcm5hbWVzIGxpc3QgaW4tcGxhY2UKICAgIChlLmcuLCB2aWEgZGVsIG9yIHNsaWNlIGFzc2lnbm1lbnQpLCBhbmQgd2FsayB3aWxsIG9ubHkgcmVjdXJzZSBpbnRvIHRoZQogICAgc3ViZGlyZWN0b3JpZXMgd2hvc2UgbmFtZXMgcmVtYWluIGluIGRpcm5hbWVzOyB0aGlzIGNhbiBiZSB1c2VkIHRvIHBydW5lCiAgICB0aGUgc2VhcmNoLCBvciB0byBpbXBvc2UgYSBzcGVjaWZpYyBvcmRlciBvZiB2aXNpdGluZy4gIE1vZGlmeWluZwogICAgZGlybmFtZXMgd2hlbiB0b3Bkb3duIGlzIGZhbHNlIGlzIGluZWZmZWN0aXZlLCBzaW5jZSB0aGUgZGlyZWN0b3JpZXMgaW4KICAgIGRpcm5hbWVzIGhhdmUgYWxyZWFkeSBiZWVuIGdlbmVyYXRlZCBieSB0aGUgdGltZSBkaXJuYW1lcyBpdHNlbGYgaXMKICAgIGdlbmVyYXRlZC4KCiAgICBCeSBkZWZhdWx0IGVycm9ycyBmcm9tIHRoZSBvcy5saXN0ZGlyKCkgY2FsbCBhcmUgaWdub3JlZC4gIElmCiAgICBvcHRpb25hbCBhcmcgJ29uZXJyb3InIGlzIHNwZWNpZmllZCwgaXQgc2hvdWxkIGJlIGEgZnVuY3Rpb247IGl0CiAgICB3aWxsIGJlIGNhbGxlZCB3aXRoIG9uZSBhcmd1bWVudCwgYW4gb3MuZXJyb3IgaW5zdGFuY2UuICBJdCBjYW4KICAgIHJlcG9ydCB0aGUgZXJyb3IgdG8gY29udGludWUgd2l0aCB0aGUgd2Fsaywgb3IgcmFpc2UgdGhlIGV4Y2VwdGlvbgogICAgdG8gYWJvcnQgdGhlIHdhbGsuICBOb3RlIHRoYXQgdGhlIGZpbGVuYW1lIGlzIGF2YWlsYWJsZSBhcyB0aGUKICAgIGZpbGVuYW1lIGF0dHJpYnV0ZSBvZiB0aGUgZXhjZXB0aW9uIG9iamVjdC4KCiAgICBCeSBkZWZhdWx0LCBvcy53YWxrIGRvZXMgbm90IGZvbGxvdyBzeW1ib2xpYyBsaW5rcyB0byBzdWJkaXJlY3RvcmllcyBvbgogICAgc3lzdGVtcyB0aGF0IHN1cHBvcnQgdGhlbS4gIEluIG9yZGVyIHRvIGdldCB0aGlzIGZ1bmN0aW9uYWxpdHksIHNldCB0aGUKICAgIG9wdGlvbmFsIGFyZ3VtZW50ICdmb2xsb3dsaW5rcycgdG8gdHJ1ZS4KCiAgICBDYXV0aW9uOiAgaWYgeW91IHBhc3MgYSByZWxhdGl2ZSBwYXRobmFtZSBmb3IgdG9wLCBkb24ndCBjaGFuZ2UgdGhlCiAgICBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IGJldHdlZW4gcmVzdW1wdGlvbnMgb2Ygd2Fsay4gIHdhbGsgbmV2ZXIKICAgIGNoYW5nZXMgdGhlIGN1cnJlbnQgZGlyZWN0b3J5LCBhbmQgYXNzdW1lcyB0aGF0IHRoZSBjbGllbnQgZG9lc24ndAogICAgZWl0aGVyLgoKICAgIEV4YW1wbGU6CgogICAgaW1wb3J0IG9zCiAgICBmcm9tIG9zLnBhdGggaW1wb3J0IGpvaW4sIGdldHNpemUKICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKCdweXRob24vTGliL2VtYWlsJyk6CiAgICAgICAgcHJpbnQocm9vdCwgImNvbnN1bWVzIiwgZW5kPSIiKQogICAgICAgIHByaW50KHN1bShbZ2V0c2l6ZShqb2luKHJvb3QsIG5hbWUpKSBmb3IgbmFtZSBpbiBmaWxlc10pLCBlbmQ9IiIpCiAgICAgICAgcHJpbnQoImJ5dGVzIGluIiwgbGVuKGZpbGVzKSwgIm5vbi1kaXJlY3RvcnkgZmlsZXMiKQogICAgICAgIGlmICdDVlMnIGluIGRpcnM6CiAgICAgICAgICAgIGRpcnMucmVtb3ZlKCdDVlMnKSAgIyBkb24ndCB2aXNpdCBDVlMgZGlyZWN0b3JpZXMKICAgICIiIgogICAgIiIiCiAgICAKICAgIGlzbGluaywgam9pbiwgaXNkaXIgPSBwYXRoLmlzbGluaywgcGF0aC5qb2luLCBwYXRoLmlzZGlyCgogICAgIyBXZSBtYXkgbm90IGhhdmUgcmVhZCBwZXJtaXNzaW9uIGZvciB0b3AsIGluIHdoaWNoIGNhc2Ugd2UgY2FuJ3QKICAgICMgZ2V0IGEgbGlzdCBvZiB0aGUgZmlsZXMgdGhlIGRpcmVjdG9yeSBjb250YWlucy4gIG9zLndhbGsKICAgICMgYWx3YXlzIHN1cHByZXNzZWQgdGhlIGV4Y2VwdGlvbiB0aGVuLCByYXRoZXIgdGhhbiBibG93IHVwIGZvciBhCiAgICAjIG1pbm9yIHJlYXNvbiB3aGVuIChzYXkpIGEgdGhvdXNhbmQgcmVhZGFibGUgZGlyZWN0b3JpZXMgYXJlIHN0aWxsCiAgICAjIGxlZnQgdG8gdmlzaXQuICBUaGF0IGxvZ2ljIGlzIGNvcGllZCBoZXJlLgogICAgdHJ5OgogICAgICAgICMgTm90ZSB0aGF0IGxpc3RkaXIgYW5kIGVycm9yIGFyZSBnbG9iYWxzIGluIHRoaXMgbW9kdWxlIGR1ZQogICAgICAgICMgdG8gZWFybGllciBpbXBvcnQtKi4KICAgICAgICBuYW1lcyA9IGxpc3RkaXIodG9wKQogICAgZXhjZXB0IGVycm9yIGFzIGVycjoKICAgICAgICBpZiBvbmVycm9yIGlzIG5vdCBOb25lOgogICAgICAgICAgICBvbmVycm9yKGVycikKICAgICAgICByZXR1cm4KICAgIAogICAgZGlycywgbm9uZGlycyA9IFtdLCBbXQogICAgZm9yIG5hbWUgaW4gbmFtZXM6CiAgICAgICAgaWYgaXNkaXIoam9pbih0b3AsIG5hbWUpKToKICAgICAgICAgICAgZGlycy5hcHBlbmQobmFtZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBub25kaXJzLmFwcGVuZChuYW1lKQogICAgCiAgICBpZiB0b3Bkb3duOgogICAgICAgIHlpZWxkIHRvcCwgZGlycywgbm9uZGlycwogICAgCiAgICBmb3IgbmFtZSBpbiBkaXJzOgogICAgICAgIG5ld19wYXRoID0gam9pbih0b3AsIG5hbWUpCiAgICAgICAgaWYgZm9sbG93bGlua3Mgb3Igbm90IGlzbGluayhuZXdfcGF0aCk6CiAgICAgICAgICAgIGZvciB4IGluIHdhbGsobmV3X3BhdGgsIHRvcGRvd24sIG9uZXJyb3IsIGZvbGxvd2xpbmtzKToKICAgICAgICAgICAgICAgIHlpZWxkIHgKICAgIGlmIG5vdCB0b3Bkb3duOgogICAgICAgIHlpZWxkIHRvcCwgZGlycywgbm9uZGlycwogICAgIiIiCgojY2xhc3MgX3BhdGg6CgojICAgIGRlZiBiYXNlbmFtZShzZWxmLGFyZyk6CiMgICAgICAgIHJldHVybiBhcmcKCiNwYXRoID0gX3BhdGgoKQplbnZpcm9uID0ge30K',
'/Lib/browser/markdown.py':'',
'/Lib/browser/timer.py':'ZnJvbSBfdGltZXIgaW1wb3J0ICo=',
'/Lib/browser/svg.py':'ZnJvbSBfc3ZnIGltcG9ydCAq',
'/Lib/browser/websocket.py':'ZnJvbSBfd2Vic29ja2V0IGltcG9ydCAq',
'/Lib/browser/local_storage.py':'IyBsb2NhbCBzdG9yYWdlIGluIGJyb3dzZXIKCmNsYXNzIExvY2FsU3RvcmFnZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgaWYgbm90IF9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlOgogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2xvY2FsIHN0b3JhZ2UgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcicpCiAgICAgICAgc2VsZi5zdG9yZSA9IF9fQlJZVEhPTl9fLmxvY2FsX3N0b3JhZ2UoKQogICAgICAgIAogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsa2V5KToKICAgICAgICBzZWxmLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiByZXMKICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsa2V5LHZhbHVlKToKICAgICAgICBzZWxmLnN0b3JlLnNldEl0ZW0oa2V5LHZhbHVlKQoKICAgICNpbXBsZW1lbnQgImluIiBmdW5jdGlvbmFsaXR5CiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBrZXlzKHNlbGYpOgogICAgICAgIHJldHVybiBsaXN0KHNlbGYuc3RvcmUpCgogICAgZGVmIHZhbHVlcyhzZWxmKToKICAgICAgICByZXR1cm4gW3NlbGYuX19nZXRpdGVtX18oaykgZm9yIGsgaW4gc2VsZi5rZXlzKCldCgogICAgZGVmIGl0ZW1zKHNlbGYpOgogICAgICAgIHJldHVybiB6aXAoc2VsZi5rZXlzKCksc2VsZi52YWx1ZXMoKSkKCnN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2UoKQoK',
'/Lib/browser/indexed_db.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBJbmRleGVkREI6CiAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICBpZiBub3QgX19CUllUSE9OX18uaGFzX2luZGV4ZWREQjoKICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJOb3RJbXBsZW1lbnRlZEVycm9yIiwgIllvdXIgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgaW5kZXhlZERCIikKICAgICAgICAgcmV0dXJuCgogICAgICBzZWxmLl9pbmRleGVkREI9X19CUllUSE9OX18uaW5kZXhlZERCKCkKICAgICAgc2VsZi5fZGI9Tm9uZQogICAgICBzZWxmLl92ZXJzaW9uPU5vbmUKCiAgZGVmIF9vbnN1Y2Nlc3Moc2VsZiwgZXZlbnQpOgogICAgICBzZWxmLl9kYj1ldmVudC50YXJnZXQucmVzdWx0CgogIGRlZiBvcGVuKHNlbGYsIG5hbWUsIG9uc3VjY2VzcywgdmVyc2lvbj0xLjAsIG9uZXJyb3I9Tm9uZSwgCiAgICAgICAgICAgb251cGdyYWRlbmVlZGVkPU5vbmUpOgogICAgICBzZWxmLl92ZXJzaW9uPXZlcnNpb24KICAgICAgX3Jlc3VsdD1zZWxmLl9pbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKQogICAgICBfc3VjY2Vzcz1FdmVudExpc3RlbmVyKFtzZWxmLl9vbnN1Y2Nlc3MsIG9uc3VjY2Vzc10pCiAgICAgIF9yZXN1bHQub25zdWNjZXNzPV9zdWNjZXNzLmZpcmUKICAgICAgX3Jlc3VsdC5vbnVwZ3JhZGVuZWVkZWQ9b251cGdyYWRlbmVlZGVkCgogICAgICAjaWYgb25lcnJvciBpcyBOb25lOgogICAgICBkZWYgb25lcnJvcihlKToKICAgICAgICAgIHByaW50KCJvbmVycm9yOiAlczolcyIgJSAgKGUudHlwZSwgZS50YXJnZXQucmVzdWx0KSkKCiAgICAgIGRlZiBvbmJsb2NrZWQoZSk6CiAgICAgICAgICBwcmludCgiYmxvY2tlZDogJXM6JXMiICUgIChlLnR5cGUsIGUucmVzdWx0KSkKCiAgICAgIF9yZXN1bHQub25lcnJvcj1vbmVycm9yCiAgICAgIF9yZXN1bHQub25ibG9ja2VkPW9uYmxvY2tlZAoKICBkZWYgdHJhbnNhY3Rpb24oc2VsZiwgZW50aXRpZXMsIG1vZGU9J3JlYWQnKToKICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uKHNlbGYuX2RiLnRyYW5zYWN0aW9uKGVudGl0aWVzLCBtb2RlKSkKCmNsYXNzIFRyYW5zYWN0aW9uOgogIGRlZiBfX2luaXRfXyhzZWxmLCB0cmFuc2FjdGlvbik6CiAgICAgIHNlbGYuX3RyYW5zYWN0aW9uPXRyYW5zYWN0aW9uCgogIGRlZiBvYmplY3RTdG9yZShzZWxmLCBuYW1lKToKICAgICAgcmV0dXJuIE9iamVjdFN0b3JlKHNlbGYuX3RyYW5zYWN0aW9uLm9iamVjdFN0b3JlKG5hbWUpKQoKY2xhc3MgT2JqZWN0U3RvcmU6CiAgZGVmIF9faW5pdF9fKHNlbGYsIG9iamVjdFN0b3JlKToKICAgICAgc2VsZi5fb2JqZWN0U3RvcmU9b2JqZWN0U3RvcmUKICAgICAgc2VsZi5fZGF0YT1bXQoKICBkZWYgY2xlYXIoc2VsZiwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9c2VsZi5fb2JqZWN0U3RvcmUuY2xlYXIoKQoKICAgICAgaWYgb25zdWNjZXNzIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgICAgIGlmIG9uZXJyb3IgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25lcnJvcj1vbmVycm9yCgogIGRlZiBfaGVscGVyKHNlbGYsIGZ1bmMsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9ZnVuYyhvYmplY3QpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIHB1dChzZWxmLCBvYmplY3QsIGtleT1Ob25lLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3I9c2VsZi5fb2JqZWN0U3RvcmUucHV0KG9iamVjdCwga2V5KQogICAgICBfci5vbnN1Y2Nlc3M9b25zdWNjZXNzCiAgICAgIF9yLm9uZXJyb3I9b25lcnJvcgoKICBkZWYgYWRkKHNlbGYsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5hZGQsIG9iamVjdCwgb25zdWNjZXNzLCBvbmVycm9yKQoKICBkZWYgZGVsZXRlKHNlbGYsIGluZGV4LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKTogCiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5kZWxldGUsIGluZGV4LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCiAgICAgCiAgZGVmIHF1ZXJ5KHNlbGYsICphcmdzKToKICAgICAgc2VsZi5fZGF0YT1bXQogICAgICBkZWYgb25zdWNjZXNzKGV2ZW50KToKICAgICAgICAgIGN1cnNvcj1ldmVudC50YXJnZXQucmVzdWx0CiAgICAgICAgICBpZiBjdXJzb3IgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICBzZWxmLl9kYXRhLmFwcGVuZChjdXJzb3IudmFsdWUpCiAgICAgICAgICAgICBjdXJzb3IuY29udGludWUoKQoKICAgICAgc2VsZi5fb2JqZWN0U3RvcmUub3BlbkN1cnNvcihhcmdzKS5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogIGRlZiBmZXRjaGFsbChzZWxmKToKICAgICAgeWllbGQgc2VsZi5fZGF0YQoKICBkZWYgZ2V0KHNlbGYsIGtleSwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5nZXQsIGtleSwgb25zdWNjZXNzLCBvbmVycm9yKQo=',
'/Lib/browser/__init__.py':'ZnJvbSBfYnJvd3NlciBpbXBvcnQgKgo=',
'/Lib/browser/ajax.py':'ZnJvbSBfYWpheCBpbXBvcnQgKg==',
'/Lib/browser/html.py':'ZnJvbSBfaHRtbCBpbXBvcnQgKg==',
'/Lib/browser/pydom.py':'',
'/Lib/unittest/mock.py':'IyBtb2NrLnB5DQojIFRlc3QgdG9vbHMgZm9yIG1vY2tpbmcgYW5kIHBhdGNoaW5nLg0KIyBNYWludGFpbmVkIGJ5IE1pY2hhZWwgRm9vcmQNCiMgQmFja3BvcnQgZm9yIG90aGVyIHZlcnNpb25zIG9mIFB5dGhvbiBhdmFpbGFibGUgZnJvbQ0KIyBodHRwOi8vcHlwaS5weXRob24ub3JnL3B5cGkvbW9jaw0KDQpfX2FsbF9fID0gKA0KICAgICdNb2NrJywNCiAgICAnTWFnaWNNb2NrJywNCiAgICAncGF0Y2gnLA0KICAgICdzZW50aW5lbCcsDQogICAgJ0RFRkFVTFQnLA0KICAgICdBTlknLA0KICAgICdjYWxsJywNCiAgICAnY3JlYXRlX2F1dG9zcGVjJywNCiAgICAnRklMVEVSX0RJUicsDQogICAgJ05vbkNhbGxhYmxlTW9jaycsDQogICAgJ05vbkNhbGxhYmxlTWFnaWNNb2NrJywNCiAgICAnbW9ja19vcGVuJywNCiAgICAnUHJvcGVydHlNb2NrJywNCikNCg0KDQpfX3ZlcnNpb25fXyA9ICcxLjAnDQoNCg0KaW1wb3J0IGluc3BlY3QNCmltcG9ydCBwcHJpbnQNCmltcG9ydCBzeXMNCmZyb20gZnVuY3Rvb2xzIGltcG9ydCB3cmFwcw0KDQoNCkJhc2VFeGNlcHRpb25zID0gKEJhc2VFeGNlcHRpb24sKQ0KaWYgJ2phdmEnIGluIHN5cy5wbGF0Zm9ybToNCiAgICAjIGp5dGhvbg0KICAgIGltcG9ydCBqYXZhDQogICAgQmFzZUV4Y2VwdGlvbnMgPSAoQmFzZUV4Y2VwdGlvbiwgamF2YS5sYW5nLlRocm93YWJsZSkNCg0KDQpGSUxURVJfRElSID0gVHJ1ZQ0KDQojIFdvcmthcm91bmQgZm9yIGlzc3VlICMxMjM3MA0KIyBXaXRob3V0IHRoaXMsIHRoZSBfX2NsYXNzX18gcHJvcGVydGllcyB3b3VsZG4ndCBiZSBzZXQgY29ycmVjdGx5DQpfc2FmZV9zdXBlciA9IHN1cGVyDQoNCmRlZiBfaXNfaW5zdGFuY2VfbW9jayhvYmopOg0KICAgICMgY2FuJ3QgdXNlIGlzaW5zdGFuY2Ugb24gTW9jayBvYmplY3RzIGJlY2F1c2UgdGhleSBvdmVycmlkZSBfX2NsYXNzX18NCiAgICAjIFRoZSBiYXNlIGNsYXNzIGZvciBhbGwgbW9ja3MgaXMgTm9uQ2FsbGFibGVNb2NrDQogICAgcmV0dXJuIGlzc3ViY2xhc3ModHlwZShvYmopLCBOb25DYWxsYWJsZU1vY2spDQoNCg0KZGVmIF9pc19leGNlcHRpb24ob2JqKToNCiAgICByZXR1cm4gKA0KICAgICAgICBpc2luc3RhbmNlKG9iaiwgQmFzZUV4Y2VwdGlvbnMpIG9yDQogICAgICAgIGlzaW5zdGFuY2Uob2JqLCB0eXBlKSBhbmQgaXNzdWJjbGFzcyhvYmosIEJhc2VFeGNlcHRpb25zKQ0KICAgICkNCg0KDQpjbGFzcyBfc2xvdHRlZChvYmplY3QpOg0KICAgIF9fc2xvdHNfXyA9IFsnYSddDQoNCg0KRGVzY3JpcHRvclR5cGVzID0gKA0KICAgIHR5cGUoX3Nsb3R0ZWQuYSksDQogICAgcHJvcGVydHksDQopDQoNCg0KZGVmIF9nZXRzaWduYXR1cmUoZnVuYywgc2tpcGZpcnN0LCBpbnN0YW5jZT1GYWxzZSk6DQogICAgaWYgaXNpbnN0YW5jZShmdW5jLCB0eXBlKSBhbmQgbm90IGluc3RhbmNlOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBmdW5jID0gZnVuYy5fX2luaXRfXw0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgc2tpcGZpcnN0ID0gVHJ1ZQ0KICAgIGVsaWYgbm90IGlzaW5zdGFuY2UoZnVuYywgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICMgZm9yIGNsYXNzZXMgd2hlcmUgaW5zdGFuY2UgaXMgVHJ1ZSB3ZSBlbmQgdXAgaGVyZSB0b28NCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZnVuYyA9IGZ1bmMuX19jYWxsX18NCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOg0KICAgICAgICAgICAgcmV0dXJuDQoNCiAgICB0cnk6DQogICAgICAgIGFyZ3NwZWMgPSBpbnNwZWN0LmdldGZ1bGxhcmdzcGVjKGZ1bmMpDQogICAgZXhjZXB0IFR5cGVFcnJvcjoNCiAgICAgICAgIyBDIGZ1bmN0aW9uIC8gbWV0aG9kLCBwb3NzaWJseSBpbmhlcml0ZWQgb2JqZWN0KCkuX19pbml0X18NCiAgICAgICAgcmV0dXJuDQoNCiAgICByZWdhcmdzLCB2YXJhcmdzLCB2YXJrdywgZGVmYXVsdHMsIGt3b25seSwga3dvbmx5ZGVmLCBhbm4gPSBhcmdzcGVjDQoNCg0KICAgICMgaW5zdGFuY2UgbWV0aG9kcyBhbmQgY2xhc3NtZXRob2RzIG5lZWQgdG8gbG9zZSB0aGUgc2VsZiBhcmd1bWVudA0KICAgIGlmIGdldGF0dHIoZnVuYywgJ19fc2VsZl9fJywgTm9uZSkgaXMgbm90IE5vbmU6DQogICAgICAgIHJlZ2FyZ3MgPSByZWdhcmdzWzE6XQ0KICAgIGlmIHNraXBmaXJzdDoNCiAgICAgICAgIyB0aGlzIGNvbmRpdGlvbiBhbmQgdGhlIGFib3ZlIG9uZSBhcmUgbmV2ZXIgYm90aCBUcnVlIC0gd2h5Pw0KICAgICAgICByZWdhcmdzID0gcmVnYXJnc1sxOl0NCg0KICAgIHNpZ25hdHVyZSA9IGluc3BlY3QuZm9ybWF0YXJnc3BlYygNCiAgICAgICAgcmVnYXJncywgdmFyYXJncywgdmFya3csIGRlZmF1bHRzLA0KICAgICAgICBrd29ubHksIGt3b25seWRlZiwgYW5uLCBmb3JtYXR2YWx1ZT1sYW1iZGEgdmFsdWU6ICIiKQ0KICAgIHJldHVybiBzaWduYXR1cmVbMTotMV0sIGZ1bmMNCg0KDQpkZWYgX2NoZWNrX3NpZ25hdHVyZShmdW5jLCBtb2NrLCBza2lwZmlyc3QsIGluc3RhbmNlPUZhbHNlKToNCiAgICBpZiBub3QgX2NhbGxhYmxlKGZ1bmMpOg0KICAgICAgICByZXR1cm4NCg0KICAgIHJlc3VsdCA9IF9nZXRzaWduYXR1cmUoZnVuYywgc2tpcGZpcnN0LCBpbnN0YW5jZSkNCiAgICBpZiByZXN1bHQgaXMgTm9uZToNCiAgICAgICAgcmV0dXJuDQogICAgc2lnbmF0dXJlLCBmdW5jID0gcmVzdWx0DQoNCiAgICAjIGNhbid0IHVzZSBzZWxmIGJlY2F1c2UgInNlbGYiIGlzIGNvbW1vbiBhcyBhbiBhcmd1bWVudCBuYW1lDQogICAgIyB1bmZvcnR1bmF0ZWx5IGV2ZW4gbm90IGluIHRoZSBmaXJzdCBwbGFjZQ0KICAgIHNyYyA9ICJsYW1iZGEgX21vY2tfc2VsZiwgJXM6IE5vbmUiICUgc2lnbmF0dXJlDQogICAgY2hlY2tzaWcgPSBldmFsKHNyYywge30pDQogICAgX2NvcHlfZnVuY19kZXRhaWxzKGZ1bmMsIGNoZWNrc2lnKQ0KICAgIHR5cGUobW9jaykuX21vY2tfY2hlY2tfc2lnID0gY2hlY2tzaWcNCg0KDQpkZWYgX2NvcHlfZnVuY19kZXRhaWxzKGZ1bmMsIGZ1bmNvcHkpOg0KICAgIGZ1bmNvcHkuX19uYW1lX18gPSBmdW5jLl9fbmFtZV9fDQogICAgZnVuY29weS5fX2RvY19fID0gZnVuYy5fX2RvY19fDQogICAgIyB3ZSBleHBsaWNpdGx5IGRvbid0IGNvcHkgZnVuYy5fX2RpY3RfXyBpbnRvIHRoaXMgY29weSBhcyBpdCB3b3VsZA0KICAgICMgZXhwb3NlIG9yaWdpbmFsIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgbW9ja2VkDQogICAgZnVuY29weS5fX21vZHVsZV9fID0gZnVuYy5fX21vZHVsZV9fDQogICAgZnVuY29weS5fX2RlZmF1bHRzX18gPSBmdW5jLl9fZGVmYXVsdHNfXw0KICAgIGZ1bmNvcHkuX19rd2RlZmF1bHRzX18gPSBmdW5jLl9fa3dkZWZhdWx0c19fDQoNCg0KZGVmIF9jYWxsYWJsZShvYmopOg0KICAgIGlmIGlzaW5zdGFuY2Uob2JqLCB0eXBlKToNCiAgICAgICAgcmV0dXJuIFRydWUNCiAgICBpZiBnZXRhdHRyKG9iaiwgJ19fY2FsbF9fJywgTm9uZSkgaXMgbm90IE5vbmU6DQogICAgICAgIHJldHVybiBUcnVlDQogICAgcmV0dXJuIEZhbHNlDQoNCg0KZGVmIF9pc19saXN0KG9iaik6DQogICAgIyBjaGVja3MgZm9yIGxpc3Qgb3IgdHVwbGVzDQogICAgIyBYWFhYIGJhZGx5IG5hbWVkIQ0KICAgIHJldHVybiB0eXBlKG9iaikgaW4gKGxpc3QsIHR1cGxlKQ0KDQoNCmRlZiBfaW5zdGFuY2VfY2FsbGFibGUob2JqKToNCiAgICAiIiJHaXZlbiBhbiBvYmplY3QsIHJldHVybiBUcnVlIGlmIHRoZSBvYmplY3QgaXMgY2FsbGFibGUuDQogICAgRm9yIGNsYXNzZXMsIHJldHVybiBUcnVlIGlmIGluc3RhbmNlcyB3b3VsZCBiZSBjYWxsYWJsZS4iIiINCiAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIHR5cGUpOg0KICAgICAgICAjIGFscmVhZHkgYW4gaW5zdGFuY2UNCiAgICAgICAgcmV0dXJuIGdldGF0dHIob2JqLCAnX19jYWxsX18nLCBOb25lKSBpcyBub3QgTm9uZQ0KDQogICAgIyAqY291bGQqIGJlIGJyb2tlbiBieSBhIGNsYXNzIG92ZXJyaWRpbmcgX19tcm9fXyBvciBfX2RpY3RfXyB2aWENCiAgICAjIGEgbWV0YWNsYXNzDQogICAgZm9yIGJhc2UgaW4gKG9iaiwpICsgb2JqLl9fbXJvX186DQogICAgICAgIGlmIGJhc2UuX19kaWN0X18uZ2V0KCdfX2NhbGxfXycpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICByZXR1cm4gRmFsc2UNCg0KDQpkZWYgX3NldF9zaWduYXR1cmUobW9jaywgb3JpZ2luYWwsIGluc3RhbmNlPUZhbHNlKToNCiAgICAjIGNyZWF0ZXMgYSBmdW5jdGlvbiB3aXRoIHNpZ25hdHVyZSAoKmFyZ3MsICoqa3dhcmdzKSB0aGF0IGRlbGVnYXRlcyB0byBhDQogICAgIyBtb2NrLiBJdCBzdGlsbCBkb2VzIHNpZ25hdHVyZSBjaGVja2luZyBieSBjYWxsaW5nIGEgbGFtYmRhIHdpdGggdGhlIHNhbWUNCiAgICAjIHNpZ25hdHVyZSBhcyB0aGUgb3JpZ2luYWwuDQogICAgaWYgbm90IF9jYWxsYWJsZShvcmlnaW5hbCk6DQogICAgICAgIHJldHVybg0KDQogICAgc2tpcGZpcnN0ID0gaXNpbnN0YW5jZShvcmlnaW5hbCwgdHlwZSkNCiAgICByZXN1bHQgPSBfZ2V0c2lnbmF0dXJlKG9yaWdpbmFsLCBza2lwZmlyc3QsIGluc3RhbmNlKQ0KICAgIGlmIHJlc3VsdCBpcyBOb25lOg0KICAgICAgICAjIHdhcyBhIEMgZnVuY3Rpb24gKGUuZy4gb2JqZWN0KCkuX19pbml0X18gKSB0aGF0IGNhbid0IGJlIG1vY2tlZA0KICAgICAgICByZXR1cm4NCg0KICAgIHNpZ25hdHVyZSwgZnVuYyA9IHJlc3VsdA0KDQogICAgc3JjID0gImxhbWJkYSAlczogTm9uZSIgJSBzaWduYXR1cmUNCiAgICBjaGVja3NpZyA9IGV2YWwoc3JjLCB7fSkNCiAgICBfY29weV9mdW5jX2RldGFpbHMoZnVuYywgY2hlY2tzaWcpDQoNCiAgICBuYW1lID0gb3JpZ2luYWwuX19uYW1lX18NCiAgICBpZiBub3QgbmFtZS5pc2lkZW50aWZpZXIoKToNCiAgICAgICAgbmFtZSA9ICdmdW5jb3B5Jw0KICAgIGNvbnRleHQgPSB7J19jaGVja3NpZ18nOiBjaGVja3NpZywgJ21vY2snOiBtb2NrfQ0KICAgIHNyYyA9ICIiImRlZiAlcygqYXJncywgKiprd2FyZ3MpOg0KICAgIF9jaGVja3NpZ18oKmFyZ3MsICoqa3dhcmdzKQ0KICAgIHJldHVybiBtb2NrKCphcmdzLCAqKmt3YXJncykiIiIgJSBuYW1lDQogICAgZXhlYyAoc3JjLCBjb250ZXh0KQ0KICAgIGZ1bmNvcHkgPSBjb250ZXh0W25hbWVdDQogICAgX3NldHVwX2Z1bmMoZnVuY29weSwgbW9jaykNCiAgICByZXR1cm4gZnVuY29weQ0KDQoNCmRlZiBfc2V0dXBfZnVuYyhmdW5jb3B5LCBtb2NrKToNCiAgICBmdW5jb3B5Lm1vY2sgPSBtb2NrDQoNCiAgICAjIGNhbid0IHVzZSBpc2luc3RhbmNlIHdpdGggbW9ja3MNCiAgICBpZiBub3QgX2lzX2luc3RhbmNlX21vY2sobW9jayk6DQogICAgICAgIHJldHVybg0KDQogICAgZGVmIGFzc2VydF9jYWxsZWRfd2l0aCgqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICByZXR1cm4gbW9jay5hc3NlcnRfY2FsbGVkX3dpdGgoKmFyZ3MsICoqa3dhcmdzKQ0KICAgIGRlZiBhc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICByZXR1cm4gbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgqYXJncywgKiprd2FyZ3MpDQogICAgZGVmIGFzc2VydF9oYXNfY2FsbHMoKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgcmV0dXJuIG1vY2suYXNzZXJ0X2hhc19jYWxscygqYXJncywgKiprd2FyZ3MpDQogICAgZGVmIGFzc2VydF9hbnlfY2FsbCgqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICByZXR1cm4gbW9jay5hc3NlcnRfYW55X2NhbGwoKmFyZ3MsICoqa3dhcmdzKQ0KICAgIGRlZiByZXNldF9tb2NrKCk6DQogICAgICAgIGZ1bmNvcHkubWV0aG9kX2NhbGxzID0gX0NhbGxMaXN0KCkNCiAgICAgICAgZnVuY29weS5tb2NrX2NhbGxzID0gX0NhbGxMaXN0KCkNCiAgICAgICAgbW9jay5yZXNldF9tb2NrKCkNCiAgICAgICAgcmV0ID0gZnVuY29weS5yZXR1cm5fdmFsdWUNCiAgICAgICAgaWYgX2lzX2luc3RhbmNlX21vY2socmV0KSBhbmQgbm90IHJldCBpcyBtb2NrOg0KICAgICAgICAgICAgcmV0LnJlc2V0X21vY2soKQ0KDQogICAgZnVuY29weS5jYWxsZWQgPSBGYWxzZQ0KICAgIGZ1bmNvcHkuY2FsbF9jb3VudCA9IDANCiAgICBmdW5jb3B5LmNhbGxfYXJncyA9IE5vbmUNCiAgICBmdW5jb3B5LmNhbGxfYXJnc19saXN0ID0gX0NhbGxMaXN0KCkNCiAgICBmdW5jb3B5Lm1ldGhvZF9jYWxscyA9IF9DYWxsTGlzdCgpDQogICAgZnVuY29weS5tb2NrX2NhbGxzID0gX0NhbGxMaXN0KCkNCg0KICAgIGZ1bmNvcHkucmV0dXJuX3ZhbHVlID0gbW9jay5yZXR1cm5fdmFsdWUNCiAgICBmdW5jb3B5LnNpZGVfZWZmZWN0ID0gbW9jay5zaWRlX2VmZmVjdA0KICAgIGZ1bmNvcHkuX21vY2tfY2hpbGRyZW4gPSBtb2NrLl9tb2NrX2NoaWxkcmVuDQoNCiAgICBmdW5jb3B5LmFzc2VydF9jYWxsZWRfd2l0aCA9IGFzc2VydF9jYWxsZWRfd2l0aA0KICAgIGZ1bmNvcHkuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGggPSBhc3NlcnRfY2FsbGVkX29uY2Vfd2l0aA0KICAgIGZ1bmNvcHkuYXNzZXJ0X2hhc19jYWxscyA9IGFzc2VydF9oYXNfY2FsbHMNCiAgICBmdW5jb3B5LmFzc2VydF9hbnlfY2FsbCA9IGFzc2VydF9hbnlfY2FsbA0KICAgIGZ1bmNvcHkucmVzZXRfbW9jayA9IHJlc2V0X21vY2sNCg0KICAgIG1vY2suX21vY2tfZGVsZWdhdGUgPSBmdW5jb3B5DQoNCg0KZGVmIF9pc19tYWdpYyhuYW1lKToNCiAgICByZXR1cm4gJ19fJXNfXycgJSBuYW1lWzI6LTJdID09IG5hbWUNCg0KDQpjbGFzcyBfU2VudGluZWxPYmplY3Qob2JqZWN0KToNCiAgICAiQSB1bmlxdWUsIG5hbWVkLCBzZW50aW5lbCBvYmplY3QuIg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lKToNCiAgICAgICAgc2VsZi5uYW1lID0gbmFtZQ0KDQogICAgZGVmIF9fcmVwcl9fKHNlbGYpOg0KICAgICAgICByZXR1cm4gJ3NlbnRpbmVsLiVzJyAlIHNlbGYubmFtZQ0KDQoNCmNsYXNzIF9TZW50aW5lbChvYmplY3QpOg0KICAgICIiIkFjY2VzcyBhdHRyaWJ1dGVzIHRvIHJldHVybiBhIG5hbWVkIG9iamVjdCwgdXNhYmxlIGFzIGEgc2VudGluZWwuIiIiDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLl9zZW50aW5lbHMgPSB7fQ0KDQogICAgZGVmIF9fZ2V0YXR0cl9fKHNlbGYsIG5hbWUpOg0KICAgICAgICBpZiBuYW1lID09ICdfX2Jhc2VzX18nOg0KICAgICAgICAgICAgIyBXaXRob3V0IHRoaXMgaGVscCh1bml0dGVzdC5tb2NrKSByYWlzZXMgYW4gZXhjZXB0aW9uDQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcg0KICAgICAgICByZXR1cm4gc2VsZi5fc2VudGluZWxzLnNldGRlZmF1bHQobmFtZSwgX1NlbnRpbmVsT2JqZWN0KG5hbWUpKQ0KDQoNCnNlbnRpbmVsID0gX1NlbnRpbmVsKCkNCg0KREVGQVVMVCA9IHNlbnRpbmVsLkRFRkFVTFQNCl9taXNzaW5nID0gc2VudGluZWwuTUlTU0lORw0KX2RlbGV0ZWQgPSBzZW50aW5lbC5ERUxFVEVEDQoNCg0KZGVmIF9jb3B5KHZhbHVlKToNCiAgICBpZiB0eXBlKHZhbHVlKSBpbiAoZGljdCwgbGlzdCwgdHVwbGUsIHNldCk6DQogICAgICAgIHJldHVybiB0eXBlKHZhbHVlKSh2YWx1ZSkNCiAgICByZXR1cm4gdmFsdWUNCg0KDQpfYWxsb3dlZF9uYW1lcyA9IHNldCgNCiAgICBbDQogICAgICAgICdyZXR1cm5fdmFsdWUnLCAnX21vY2tfcmV0dXJuX3ZhbHVlJywgJ3NpZGVfZWZmZWN0JywNCiAgICAgICAgJ19tb2NrX3NpZGVfZWZmZWN0JywgJ19tb2NrX3BhcmVudCcsICdfbW9ja19uZXdfcGFyZW50JywNCiAgICAgICAgJ19tb2NrX25hbWUnLCAnX21vY2tfbmV3X25hbWUnDQogICAgXQ0KKQ0KDQoNCmRlZiBfZGVsZWdhdGluZ19wcm9wZXJ0eShuYW1lKToNCiAgICBfYWxsb3dlZF9uYW1lcy5hZGQobmFtZSkNCiAgICBfdGhlX25hbWUgPSAnX21vY2tfJyArIG5hbWUNCiAgICBkZWYgX2dldChzZWxmLCBuYW1lPW5hbWUsIF90aGVfbmFtZT1fdGhlX25hbWUpOg0KICAgICAgICBzaWcgPSBzZWxmLl9tb2NrX2RlbGVnYXRlDQogICAgICAgIGlmIHNpZyBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIGdldGF0dHIoc2VsZiwgX3RoZV9uYW1lKQ0KICAgICAgICByZXR1cm4gZ2V0YXR0cihzaWcsIG5hbWUpDQogICAgZGVmIF9zZXQoc2VsZiwgdmFsdWUsIG5hbWU9bmFtZSwgX3RoZV9uYW1lPV90aGVfbmFtZSk6DQogICAgICAgIHNpZyA9IHNlbGYuX21vY2tfZGVsZWdhdGUNCiAgICAgICAgaWYgc2lnIGlzIE5vbmU6DQogICAgICAgICAgICBzZWxmLl9fZGljdF9fW190aGVfbmFtZV0gPSB2YWx1ZQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2V0YXR0cihzaWcsIG5hbWUsIHZhbHVlKQ0KDQogICAgcmV0dXJuIHByb3BlcnR5KF9nZXQsIF9zZXQpDQoNCg0KDQpjbGFzcyBfQ2FsbExpc3QobGlzdCk6DQoNCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHZhbHVlKToNCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UodmFsdWUsIGxpc3QpOg0KICAgICAgICAgICAgcmV0dXJuIGxpc3QuX19jb250YWluc19fKHNlbGYsIHZhbHVlKQ0KICAgICAgICBsZW5fdmFsdWUgPSBsZW4odmFsdWUpDQogICAgICAgIGxlbl9zZWxmID0gbGVuKHNlbGYpDQogICAgICAgIGlmIGxlbl92YWx1ZSA+IGxlbl9zZWxmOg0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCwgbGVuX3NlbGYgLSBsZW5fdmFsdWUgKyAxKToNCiAgICAgICAgICAgIHN1Yl9saXN0ID0gc2VsZltpOmkrbGVuX3ZhbHVlXQ0KICAgICAgICAgICAgaWYgc3ViX2xpc3QgPT0gdmFsdWU6DQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICBkZWYgX19yZXByX18oc2VsZik6DQogICAgICAgIHJldHVybiBwcHJpbnQucGZvcm1hdChsaXN0KHNlbGYpKQ0KDQoNCmRlZiBfY2hlY2tfYW5kX3NldF9wYXJlbnQocGFyZW50LCB2YWx1ZSwgbmFtZSwgbmV3X25hbWUpOg0KICAgIGlmIG5vdCBfaXNfaW5zdGFuY2VfbW9jayh2YWx1ZSk6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIGlmICgodmFsdWUuX21vY2tfbmFtZSBvciB2YWx1ZS5fbW9ja19uZXdfbmFtZSkgb3INCiAgICAgICAgKHZhbHVlLl9tb2NrX3BhcmVudCBpcyBub3QgTm9uZSkgb3INCiAgICAgICAgKHZhbHVlLl9tb2NrX25ld19wYXJlbnQgaXMgbm90IE5vbmUpKToNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICBfcGFyZW50ID0gcGFyZW50DQogICAgd2hpbGUgX3BhcmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgIyBzZXR0aW5nIGEgbW9jayAodmFsdWUpIGFzIGEgY2hpbGQgb3IgcmV0dXJuIHZhbHVlIG9mIGl0c2VsZg0KICAgICAgICAjIHNob3VsZCBub3QgbW9kaWZ5IHRoZSBtb2NrDQogICAgICAgIGlmIF9wYXJlbnQgaXMgdmFsdWU6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgX3BhcmVudCA9IF9wYXJlbnQuX21vY2tfbmV3X3BhcmVudA0KDQogICAgaWYgbmV3X25hbWU6DQogICAgICAgIHZhbHVlLl9tb2NrX25ld19wYXJlbnQgPSBwYXJlbnQNCiAgICAgICAgdmFsdWUuX21vY2tfbmV3X25hbWUgPSBuZXdfbmFtZQ0KICAgIGlmIG5hbWU6DQogICAgICAgIHZhbHVlLl9tb2NrX3BhcmVudCA9IHBhcmVudA0KICAgICAgICB2YWx1ZS5fbW9ja19uYW1lID0gbmFtZQ0KICAgIHJldHVybiBUcnVlDQoNCg0KDQpjbGFzcyBCYXNlKG9iamVjdCk6DQogICAgX21vY2tfcmV0dXJuX3ZhbHVlID0gREVGQVVMVA0KICAgIF9tb2NrX3NpZGVfZWZmZWN0ID0gTm9uZQ0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICBwYXNzDQoNCg0KDQpjbGFzcyBOb25DYWxsYWJsZU1vY2soQmFzZSk6DQogICAgIiIiQSBub24tY2FsbGFibGUgdmVyc2lvbiBvZiBgTW9ja2AiIiINCg0KICAgIGRlZiBfX25ld19fKGNscywgKmFyZ3MsICoqa3cpOg0KICAgICAgICAjIGV2ZXJ5IGluc3RhbmNlIGhhcyBpdHMgb3duIGNsYXNzDQogICAgICAgICMgc28gd2UgY2FuIGNyZWF0ZSBtYWdpYyBtZXRob2RzIG9uIHRoZQ0KICAgICAgICAjIGNsYXNzIHdpdGhvdXQgc3RvbXBpbmcgb24gb3RoZXIgbW9ja3MNCiAgICAgICAgbmV3ID0gdHlwZShjbHMuX19uYW1lX18sIChjbHMsKSwgeydfX2RvY19fJzogY2xzLl9fZG9jX199KQ0KICAgICAgICBpbnN0YW5jZSA9IG9iamVjdC5fX25ld19fKG5ldykNCiAgICAgICAgcmV0dXJuIGluc3RhbmNlDQoNCg0KICAgIGRlZiBfX2luaXRfXygNCiAgICAgICAgICAgIHNlbGYsIHNwZWM9Tm9uZSwgd3JhcHM9Tm9uZSwgbmFtZT1Ob25lLCBzcGVjX3NldD1Ob25lLA0KICAgICAgICAgICAgcGFyZW50PU5vbmUsIF9zcGVjX3N0YXRlPU5vbmUsIF9uZXdfbmFtZT0nJywgX25ld19wYXJlbnQ9Tm9uZSwNCiAgICAgICAgICAgICoqa3dhcmdzDQogICAgICAgICk6DQogICAgICAgIGlmIF9uZXdfcGFyZW50IGlzIE5vbmU6DQogICAgICAgICAgICBfbmV3X3BhcmVudCA9IHBhcmVudA0KDQogICAgICAgIF9fZGljdF9fID0gc2VsZi5fX2RpY3RfXw0KICAgICAgICBfX2RpY3RfX1snX21vY2tfcGFyZW50J10gPSBwYXJlbnQNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX25hbWUnXSA9IG5hbWUNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX25ld19uYW1lJ10gPSBfbmV3X25hbWUNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX25ld19wYXJlbnQnXSA9IF9uZXdfcGFyZW50DQoNCiAgICAgICAgaWYgc3BlY19zZXQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzcGVjID0gc3BlY19zZXQNCiAgICAgICAgICAgIHNwZWNfc2V0ID0gVHJ1ZQ0KDQogICAgICAgIHNlbGYuX21vY2tfYWRkX3NwZWMoc3BlYywgc3BlY19zZXQpDQoNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX2NoaWxkcmVuJ10gPSB7fQ0KICAgICAgICBfX2RpY3RfX1snX21vY2tfd3JhcHMnXSA9IHdyYXBzDQogICAgICAgIF9fZGljdF9fWydfbW9ja19kZWxlZ2F0ZSddID0gTm9uZQ0KDQogICAgICAgIF9fZGljdF9fWydfbW9ja19jYWxsZWQnXSA9IEZhbHNlDQogICAgICAgIF9fZGljdF9fWydfbW9ja19jYWxsX2FyZ3MnXSA9IE5vbmUNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX2NhbGxfY291bnQnXSA9IDANCiAgICAgICAgX19kaWN0X19bJ19tb2NrX2NhbGxfYXJnc19saXN0J10gPSBfQ2FsbExpc3QoKQ0KICAgICAgICBfX2RpY3RfX1snX21vY2tfbW9ja19jYWxscyddID0gX0NhbGxMaXN0KCkNCg0KICAgICAgICBfX2RpY3RfX1snbWV0aG9kX2NhbGxzJ10gPSBfQ2FsbExpc3QoKQ0KDQogICAgICAgIGlmIGt3YXJnczoNCiAgICAgICAgICAgIHNlbGYuY29uZmlndXJlX21vY2soKiprd2FyZ3MpDQoNCiAgICAgICAgX3NhZmVfc3VwZXIoTm9uQ2FsbGFibGVNb2NrLCBzZWxmKS5fX2luaXRfXygNCiAgICAgICAgICAgIHNwZWMsIHdyYXBzLCBuYW1lLCBzcGVjX3NldCwgcGFyZW50LA0KICAgICAgICAgICAgX3NwZWNfc3RhdGUNCiAgICAgICAgKQ0KDQoNCiAgICBkZWYgYXR0YWNoX21vY2soc2VsZiwgbW9jaywgYXR0cmlidXRlKToNCiAgICAgICAgIiIiDQogICAgICAgIEF0dGFjaCBhIG1vY2sgYXMgYW4gYXR0cmlidXRlIG9mIHRoaXMgb25lLCByZXBsYWNpbmcgaXRzIG5hbWUgYW5kDQogICAgICAgIHBhcmVudC4gQ2FsbHMgdG8gdGhlIGF0dGFjaGVkIG1vY2sgd2lsbCBiZSByZWNvcmRlZCBpbiB0aGUNCiAgICAgICAgYG1ldGhvZF9jYWxsc2AgYW5kIGBtb2NrX2NhbGxzYCBhdHRyaWJ1dGVzIG9mIHRoaXMgb25lLiIiIg0KICAgICAgICBtb2NrLl9tb2NrX3BhcmVudCA9IE5vbmUNCiAgICAgICAgbW9jay5fbW9ja19uZXdfcGFyZW50ID0gTm9uZQ0KICAgICAgICBtb2NrLl9tb2NrX25hbWUgPSAnJw0KICAgICAgICBtb2NrLl9tb2NrX25ld19uYW1lID0gTm9uZQ0KDQogICAgICAgIHNldGF0dHIoc2VsZiwgYXR0cmlidXRlLCBtb2NrKQ0KDQoNCiAgICBkZWYgbW9ja19hZGRfc3BlYyhzZWxmLCBzcGVjLCBzcGVjX3NldD1GYWxzZSk6DQogICAgICAgICIiIkFkZCBhIHNwZWMgdG8gYSBtb2NrLiBgc3BlY2AgY2FuIGVpdGhlciBiZSBhbiBvYmplY3Qgb3IgYQ0KICAgICAgICBsaXN0IG9mIHN0cmluZ3MuIE9ubHkgYXR0cmlidXRlcyBvbiB0aGUgYHNwZWNgIGNhbiBiZSBmZXRjaGVkIGFzDQogICAgICAgIGF0dHJpYnV0ZXMgZnJvbSB0aGUgbW9jay4NCg0KICAgICAgICBJZiBgc3BlY19zZXRgIGlzIFRydWUgdGhlbiBvbmx5IGF0dHJpYnV0ZXMgb24gdGhlIHNwZWMgY2FuIGJlIHNldC4iIiINCiAgICAgICAgc2VsZi5fbW9ja19hZGRfc3BlYyhzcGVjLCBzcGVjX3NldCkNCg0KDQogICAgZGVmIF9tb2NrX2FkZF9zcGVjKHNlbGYsIHNwZWMsIHNwZWNfc2V0KToNCiAgICAgICAgX3NwZWNfY2xhc3MgPSBOb25lDQoNCiAgICAgICAgaWYgc3BlYyBpcyBub3QgTm9uZSBhbmQgbm90IF9pc19saXN0KHNwZWMpOg0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzcGVjLCB0eXBlKToNCiAgICAgICAgICAgICAgICBfc3BlY19jbGFzcyA9IHNwZWMNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX3NwZWNfY2xhc3MgPSBfZ2V0X2NsYXNzKHNwZWMpDQoNCiAgICAgICAgICAgIHNwZWMgPSBkaXIoc3BlYykNCg0KICAgICAgICBfX2RpY3RfXyA9IHNlbGYuX19kaWN0X18NCiAgICAgICAgX19kaWN0X19bJ19zcGVjX2NsYXNzJ10gPSBfc3BlY19jbGFzcw0KICAgICAgICBfX2RpY3RfX1snX3NwZWNfc2V0J10gPSBzcGVjX3NldA0KICAgICAgICBfX2RpY3RfX1snX21vY2tfbWV0aG9kcyddID0gc3BlYw0KDQoNCiAgICBkZWYgX19nZXRfcmV0dXJuX3ZhbHVlKHNlbGYpOg0KICAgICAgICByZXQgPSBzZWxmLl9tb2NrX3JldHVybl92YWx1ZQ0KICAgICAgICBpZiBzZWxmLl9tb2NrX2RlbGVnYXRlIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0ID0gc2VsZi5fbW9ja19kZWxlZ2F0ZS5yZXR1cm5fdmFsdWUNCg0KICAgICAgICBpZiByZXQgaXMgREVGQVVMVDoNCiAgICAgICAgICAgIHJldCA9IHNlbGYuX2dldF9jaGlsZF9tb2NrKA0KICAgICAgICAgICAgICAgIF9uZXdfcGFyZW50PXNlbGYsIF9uZXdfbmFtZT0nKCknDQogICAgICAgICAgICApDQogICAgICAgICAgICBzZWxmLnJldHVybl92YWx1ZSA9IHJldA0KICAgICAgICByZXR1cm4gcmV0DQoNCg0KICAgIGRlZiBfX3NldF9yZXR1cm5fdmFsdWUoc2VsZiwgdmFsdWUpOg0KICAgICAgICBpZiBzZWxmLl9tb2NrX2RlbGVnYXRlIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5fbW9ja19kZWxlZ2F0ZS5yZXR1cm5fdmFsdWUgPSB2YWx1ZQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZi5fbW9ja19yZXR1cm5fdmFsdWUgPSB2YWx1ZQ0KICAgICAgICAgICAgX2NoZWNrX2FuZF9zZXRfcGFyZW50KHNlbGYsIHZhbHVlLCBOb25lLCAnKCknKQ0KDQogICAgX19yZXR1cm5fdmFsdWVfZG9jID0gIlRoZSB2YWx1ZSB0byBiZSByZXR1cm5lZCB3aGVuIHRoZSBtb2NrIGlzIGNhbGxlZC4iDQogICAgcmV0dXJuX3ZhbHVlID0gcHJvcGVydHkoX19nZXRfcmV0dXJuX3ZhbHVlLCBfX3NldF9yZXR1cm5fdmFsdWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgX19yZXR1cm5fdmFsdWVfZG9jKQ0KDQoNCiAgICBAcHJvcGVydHkNCiAgICBkZWYgX19jbGFzc19fKHNlbGYpOg0KICAgICAgICBpZiBzZWxmLl9zcGVjX2NsYXNzIGlzIE5vbmU6DQogICAgICAgICAgICByZXR1cm4gdHlwZShzZWxmKQ0KICAgICAgICByZXR1cm4gc2VsZi5fc3BlY19jbGFzcw0KDQogICAgY2FsbGVkID0gX2RlbGVnYXRpbmdfcHJvcGVydHkoJ2NhbGxlZCcpDQogICAgY2FsbF9jb3VudCA9IF9kZWxlZ2F0aW5nX3Byb3BlcnR5KCdjYWxsX2NvdW50JykNCiAgICBjYWxsX2FyZ3MgPSBfZGVsZWdhdGluZ19wcm9wZXJ0eSgnY2FsbF9hcmdzJykNCiAgICBjYWxsX2FyZ3NfbGlzdCA9IF9kZWxlZ2F0aW5nX3Byb3BlcnR5KCdjYWxsX2FyZ3NfbGlzdCcpDQogICAgbW9ja19jYWxscyA9IF9kZWxlZ2F0aW5nX3Byb3BlcnR5KCdtb2NrX2NhbGxzJykNCg0KDQogICAgZGVmIF9fZ2V0X3NpZGVfZWZmZWN0KHNlbGYpOg0KICAgICAgICBkZWxlZ2F0ZWQgPSBzZWxmLl9tb2NrX2RlbGVnYXRlDQogICAgICAgIGlmIGRlbGVnYXRlZCBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21vY2tfc2lkZV9lZmZlY3QNCiAgICAgICAgcmV0dXJuIGRlbGVnYXRlZC5zaWRlX2VmZmVjdA0KDQogICAgZGVmIF9fc2V0X3NpZGVfZWZmZWN0KHNlbGYsIHZhbHVlKToNCiAgICAgICAgdmFsdWUgPSBfdHJ5X2l0ZXIodmFsdWUpDQogICAgICAgIGRlbGVnYXRlZCA9IHNlbGYuX21vY2tfZGVsZWdhdGUNCiAgICAgICAgaWYgZGVsZWdhdGVkIGlzIE5vbmU6DQogICAgICAgICAgICBzZWxmLl9tb2NrX3NpZGVfZWZmZWN0ID0gdmFsdWUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGRlbGVnYXRlZC5zaWRlX2VmZmVjdCA9IHZhbHVlDQoNCiAgICBzaWRlX2VmZmVjdCA9IHByb3BlcnR5KF9fZ2V0X3NpZGVfZWZmZWN0LCBfX3NldF9zaWRlX2VmZmVjdCkNCg0KDQogICAgZGVmIHJlc2V0X21vY2soc2VsZik6DQogICAgICAgICJSZXN0b3JlIHRoZSBtb2NrIG9iamVjdCB0byBpdHMgaW5pdGlhbCBzdGF0ZS4iDQogICAgICAgIHNlbGYuY2FsbGVkID0gRmFsc2UNCiAgICAgICAgc2VsZi5jYWxsX2FyZ3MgPSBOb25lDQogICAgICAgIHNlbGYuY2FsbF9jb3VudCA9IDANCiAgICAgICAgc2VsZi5tb2NrX2NhbGxzID0gX0NhbGxMaXN0KCkNCiAgICAgICAgc2VsZi5jYWxsX2FyZ3NfbGlzdCA9IF9DYWxsTGlzdCgpDQogICAgICAgIHNlbGYubWV0aG9kX2NhbGxzID0gX0NhbGxMaXN0KCkNCg0KICAgICAgICBmb3IgY2hpbGQgaW4gc2VsZi5fbW9ja19jaGlsZHJlbi52YWx1ZXMoKToNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoY2hpbGQsIF9TcGVjU3RhdGUpOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBjaGlsZC5yZXNldF9tb2NrKCkNCg0KICAgICAgICByZXQgPSBzZWxmLl9tb2NrX3JldHVybl92YWx1ZQ0KICAgICAgICBpZiBfaXNfaW5zdGFuY2VfbW9jayhyZXQpIGFuZCByZXQgaXMgbm90IHNlbGY6DQogICAgICAgICAgICByZXQucmVzZXRfbW9jaygpDQoNCg0KICAgIGRlZiBjb25maWd1cmVfbW9jayhzZWxmLCAqKmt3YXJncyk6DQogICAgICAgICIiIlNldCBhdHRyaWJ1dGVzIG9uIHRoZSBtb2NrIHRocm91Z2gga2V5d29yZCBhcmd1bWVudHMuDQoNCiAgICAgICAgQXR0cmlidXRlcyBwbHVzIHJldHVybiB2YWx1ZXMgYW5kIHNpZGUgZWZmZWN0cyBjYW4gYmUgc2V0IG9uIGNoaWxkDQogICAgICAgIG1vY2tzIHVzaW5nIHN0YW5kYXJkIGRvdCBub3RhdGlvbiBhbmQgdW5wYWNraW5nIGEgZGljdGlvbmFyeSBpbiB0aGUNCiAgICAgICAgbWV0aG9kIGNhbGw6DQoNCiAgICAgICAgPj4+IGF0dHJzID0geydtZXRob2QucmV0dXJuX3ZhbHVlJzogMywgJ290aGVyLnNpZGVfZWZmZWN0JzogS2V5RXJyb3J9DQogICAgICAgID4+PiBtb2NrLmNvbmZpZ3VyZV9tb2NrKCoqYXR0cnMpIiIiDQogICAgICAgIGZvciBhcmcsIHZhbCBpbiBzb3J0ZWQoa3dhcmdzLml0ZW1zKCksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB3ZSBzb3J0IG9uIHRoZSBudW1iZXIgb2YgZG90cyBzbyB0aGF0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhdHRyaWJ1dGVzIGFyZSBzZXQgYmVmb3JlIHdlIHNldCBhdHRyaWJ1dGVzIG9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhdHRyaWJ1dGVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PWxhbWJkYSBlbnRyeTogZW50cnlbMF0uY291bnQoJy4nKSk6DQogICAgICAgICAgICBhcmdzID0gYXJnLnNwbGl0KCcuJykNCiAgICAgICAgICAgIGZpbmFsID0gYXJncy5wb3AoKQ0KICAgICAgICAgICAgb2JqID0gc2VsZg0KICAgICAgICAgICAgZm9yIGVudHJ5IGluIGFyZ3M6DQogICAgICAgICAgICAgICAgb2JqID0gZ2V0YXR0cihvYmosIGVudHJ5KQ0KICAgICAgICAgICAgc2V0YXR0cihvYmosIGZpbmFsLCB2YWwpDQoNCg0KICAgIGRlZiBfX2dldGF0dHJfXyhzZWxmLCBuYW1lKToNCiAgICAgICAgaWYgbmFtZSA9PSAnX21vY2tfbWV0aG9kcyc6DQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcihuYW1lKQ0KICAgICAgICBlbGlmIHNlbGYuX21vY2tfbWV0aG9kcyBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGlmIG5hbWUgbm90IGluIHNlbGYuX21vY2tfbWV0aG9kcyBvciBuYW1lIGluIF9hbGxfbWFnaWNzOg0KICAgICAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJNb2NrIG9iamVjdCBoYXMgbm8gYXR0cmlidXRlICVyIiAlIG5hbWUpDQogICAgICAgIGVsaWYgX2lzX21hZ2ljKG5hbWUpOg0KICAgICAgICAgICAgcmFpc2UgQXR0cmlidXRlRXJyb3IobmFtZSkNCg0KICAgICAgICByZXN1bHQgPSBzZWxmLl9tb2NrX2NoaWxkcmVuLmdldChuYW1lKQ0KICAgICAgICBpZiByZXN1bHQgaXMgX2RlbGV0ZWQ6DQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcihuYW1lKQ0KICAgICAgICBlbGlmIHJlc3VsdCBpcyBOb25lOg0KICAgICAgICAgICAgd3JhcHMgPSBOb25lDQogICAgICAgICAgICBpZiBzZWxmLl9tb2NrX3dyYXBzIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgICMgWFhYWCBzaG91bGQgd2UgZ2V0IHRoZSBhdHRyaWJ1dGUgd2l0aG91dCB0cmlnZ2VyaW5nIGNvZGUNCiAgICAgICAgICAgICAgICAjIGV4ZWN1dGlvbj8NCiAgICAgICAgICAgICAgICB3cmFwcyA9IGdldGF0dHIoc2VsZi5fbW9ja193cmFwcywgbmFtZSkNCg0KICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5fZ2V0X2NoaWxkX21vY2soDQogICAgICAgICAgICAgICAgcGFyZW50PXNlbGYsIG5hbWU9bmFtZSwgd3JhcHM9d3JhcHMsIF9uZXdfbmFtZT1uYW1lLA0KICAgICAgICAgICAgICAgIF9uZXdfcGFyZW50PXNlbGYNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIHNlbGYuX21vY2tfY2hpbGRyZW5bbmFtZV0gID0gcmVzdWx0DQoNCiAgICAgICAgZWxpZiBpc2luc3RhbmNlKHJlc3VsdCwgX1NwZWNTdGF0ZSk6DQogICAgICAgICAgICByZXN1bHQgPSBjcmVhdGVfYXV0b3NwZWMoDQogICAgICAgICAgICAgICAgcmVzdWx0LnNwZWMsIHJlc3VsdC5zcGVjX3NldCwgcmVzdWx0Lmluc3RhbmNlLA0KICAgICAgICAgICAgICAgIHJlc3VsdC5wYXJlbnQsIHJlc3VsdC5uYW1lDQogICAgICAgICAgICApDQogICAgICAgICAgICBzZWxmLl9tb2NrX2NoaWxkcmVuW25hbWVdICA9IHJlc3VsdA0KDQogICAgICAgIHJldHVybiByZXN1bHQNCg0KDQogICAgZGVmIF9fcmVwcl9fKHNlbGYpOg0KICAgICAgICBfbmFtZV9saXN0ID0gW3NlbGYuX21vY2tfbmV3X25hbWVdDQogICAgICAgIF9wYXJlbnQgPSBzZWxmLl9tb2NrX25ld19wYXJlbnQNCiAgICAgICAgbGFzdCA9IHNlbGYNCg0KICAgICAgICBkb3QgPSAnLicNCiAgICAgICAgaWYgX25hbWVfbGlzdCA9PSBbJygpJ106DQogICAgICAgICAgICBkb3QgPSAnJw0KICAgICAgICBzZWVuID0gc2V0KCkNCiAgICAgICAgd2hpbGUgX3BhcmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGxhc3QgPSBfcGFyZW50DQoNCiAgICAgICAgICAgIF9uYW1lX2xpc3QuYXBwZW5kKF9wYXJlbnQuX21vY2tfbmV3X25hbWUgKyBkb3QpDQogICAgICAgICAgICBkb3QgPSAnLicNCiAgICAgICAgICAgIGlmIF9wYXJlbnQuX21vY2tfbmV3X25hbWUgPT0gJygpJzoNCiAgICAgICAgICAgICAgICBkb3QgPSAnJw0KDQogICAgICAgICAgICBfcGFyZW50ID0gX3BhcmVudC5fbW9ja19uZXdfcGFyZW50DQoNCiAgICAgICAgICAgICMgdXNlIGlkcyBoZXJlIHNvIGFzIG5vdCB0byBjYWxsIF9faGFzaF9fIG9uIHRoZSBtb2Nrcw0KICAgICAgICAgICAgaWYgaWQoX3BhcmVudCkgaW4gc2VlbjoNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgc2Vlbi5hZGQoaWQoX3BhcmVudCkpDQoNCiAgICAgICAgX25hbWVfbGlzdCA9IGxpc3QocmV2ZXJzZWQoX25hbWVfbGlzdCkpDQogICAgICAgIF9maXJzdCA9IGxhc3QuX21vY2tfbmFtZSBvciAnbW9jaycNCiAgICAgICAgaWYgbGVuKF9uYW1lX2xpc3QpID4gMToNCiAgICAgICAgICAgIGlmIF9uYW1lX2xpc3RbMV0gbm90IGluICgnKCknLCAnKCkuJyk6DQogICAgICAgICAgICAgICAgX2ZpcnN0ICs9ICcuJw0KICAgICAgICBfbmFtZV9saXN0WzBdID0gX2ZpcnN0DQogICAgICAgIG5hbWUgPSAnJy5qb2luKF9uYW1lX2xpc3QpDQoNCiAgICAgICAgbmFtZV9zdHJpbmcgPSAnJw0KICAgICAgICBpZiBuYW1lIG5vdCBpbiAoJ21vY2snLCAnbW9jay4nKToNCiAgICAgICAgICAgIG5hbWVfc3RyaW5nID0gJyBuYW1lPSVyJyAlIG5hbWUNCg0KICAgICAgICBzcGVjX3N0cmluZyA9ICcnDQogICAgICAgIGlmIHNlbGYuX3NwZWNfY2xhc3MgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzcGVjX3N0cmluZyA9ICcgc3BlYz0lcicNCiAgICAgICAgICAgIGlmIHNlbGYuX3NwZWNfc2V0Og0KICAgICAgICAgICAgICAgIHNwZWNfc3RyaW5nID0gJyBzcGVjX3NldD0lcicNCiAgICAgICAgICAgIHNwZWNfc3RyaW5nID0gc3BlY19zdHJpbmcgJSBzZWxmLl9zcGVjX2NsYXNzLl9fbmFtZV9fDQogICAgICAgIHJldHVybiAiPCVzJXMlcyBpZD0nJXMnPiIgJSAoDQogICAgICAgICAgICB0eXBlKHNlbGYpLl9fbmFtZV9fLA0KICAgICAgICAgICAgbmFtZV9zdHJpbmcsDQogICAgICAgICAgICBzcGVjX3N0cmluZywNCiAgICAgICAgICAgIGlkKHNlbGYpDQogICAgICAgICkNCg0KDQogICAgZGVmIF9fZGlyX18oc2VsZik6DQogICAgICAgICIiIkZpbHRlciB0aGUgb3V0cHV0IG9mIGBkaXIobW9jaylgIHRvIG9ubHkgdXNlZnVsIG1lbWJlcnMuIiIiDQogICAgICAgIGlmIG5vdCBGSUxURVJfRElSOg0KICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5fX2Rpcl9fKHNlbGYpDQoNCiAgICAgICAgZXh0cmFzID0gc2VsZi5fbW9ja19tZXRob2RzIG9yIFtdDQogICAgICAgIGZyb21fdHlwZSA9IGRpcih0eXBlKHNlbGYpKQ0KICAgICAgICBmcm9tX2RpY3QgPSBsaXN0KHNlbGYuX19kaWN0X18pDQoNCiAgICAgICAgZnJvbV90eXBlID0gW2UgZm9yIGUgaW4gZnJvbV90eXBlIGlmIG5vdCBlLnN0YXJ0c3dpdGgoJ18nKV0NCiAgICAgICAgZnJvbV9kaWN0ID0gW2UgZm9yIGUgaW4gZnJvbV9kaWN0IGlmIG5vdCBlLnN0YXJ0c3dpdGgoJ18nKSBvcg0KICAgICAgICAgICAgICAgICAgICAgX2lzX21hZ2ljKGUpXQ0KICAgICAgICByZXR1cm4gc29ydGVkKHNldChleHRyYXMgKyBmcm9tX3R5cGUgKyBmcm9tX2RpY3QgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0KHNlbGYuX21vY2tfY2hpbGRyZW4pKSkNCg0KDQogICAgZGVmIF9fc2V0YXR0cl9fKHNlbGYsIG5hbWUsIHZhbHVlKToNCiAgICAgICAgaWYgbmFtZSBpbiBfYWxsb3dlZF9uYW1lczoNCiAgICAgICAgICAgICMgcHJvcGVydHkgc2V0dGVycyBnbyB0aHJvdWdoIGhlcmUNCiAgICAgICAgICAgIHJldHVybiBvYmplY3QuX19zZXRhdHRyX18oc2VsZiwgbmFtZSwgdmFsdWUpDQogICAgICAgIGVsaWYgKHNlbGYuX3NwZWNfc2V0IGFuZCBzZWxmLl9tb2NrX21ldGhvZHMgaXMgbm90IE5vbmUgYW5kDQogICAgICAgICAgICBuYW1lIG5vdCBpbiBzZWxmLl9tb2NrX21ldGhvZHMgYW5kDQogICAgICAgICAgICBuYW1lIG5vdCBpbiBzZWxmLl9fZGljdF9fKToNCiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJNb2NrIG9iamVjdCBoYXMgbm8gYXR0cmlidXRlICclcyciICUgbmFtZSkNCiAgICAgICAgZWxpZiBuYW1lIGluIF91bnN1cHBvcnRlZF9tYWdpY3M6DQogICAgICAgICAgICBtc2cgPSAnQXR0ZW1wdGluZyB0byBzZXQgdW5zdXBwb3J0ZWQgbWFnaWMgbWV0aG9kICVyLicgJSBuYW1lDQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcihtc2cpDQogICAgICAgIGVsaWYgbmFtZSBpbiBfYWxsX21hZ2ljczoNCiAgICAgICAgICAgIGlmIHNlbGYuX21vY2tfbWV0aG9kcyBpcyBub3QgTm9uZSBhbmQgbmFtZSBub3QgaW4gc2VsZi5fbW9ja19tZXRob2RzOg0KICAgICAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJNb2NrIG9iamVjdCBoYXMgbm8gYXR0cmlidXRlICclcyciICUgbmFtZSkNCg0KICAgICAgICAgICAgaWYgbm90IF9pc19pbnN0YW5jZV9tb2NrKHZhbHVlKToNCiAgICAgICAgICAgICAgICBzZXRhdHRyKHR5cGUoc2VsZiksIG5hbWUsIF9nZXRfbWV0aG9kKG5hbWUsIHZhbHVlKSkNCiAgICAgICAgICAgICAgICBvcmlnaW5hbCA9IHZhbHVlDQogICAgICAgICAgICAgICAgdmFsdWUgPSBsYW1iZGEgKmFyZ3MsICoqa3c6IG9yaWdpbmFsKHNlbGYsICphcmdzLCAqKmt3KQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAjIG9ubHkgc2V0IF9uZXdfbmFtZSBhbmQgbm90IG5hbWUgc28gdGhhdCBtb2NrX2NhbGxzIGlzIHRyYWNrZWQNCiAgICAgICAgICAgICAgICAjIGJ1dCBub3QgbWV0aG9kIGNhbGxzDQogICAgICAgICAgICAgICAgX2NoZWNrX2FuZF9zZXRfcGFyZW50KHNlbGYsIHZhbHVlLCBOb25lLCBuYW1lKQ0KICAgICAgICAgICAgICAgIHNldGF0dHIodHlwZShzZWxmKSwgbmFtZSwgdmFsdWUpDQogICAgICAgICAgICAgICAgc2VsZi5fbW9ja19jaGlsZHJlbltuYW1lXSA9IHZhbHVlDQogICAgICAgIGVsaWYgbmFtZSA9PSAnX19jbGFzc19fJzoNCiAgICAgICAgICAgIHNlbGYuX3NwZWNfY2xhc3MgPSB2YWx1ZQ0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBpZiBfY2hlY2tfYW5kX3NldF9wYXJlbnQoc2VsZiwgdmFsdWUsIG5hbWUsIG5hbWUpOg0KICAgICAgICAgICAgICAgIHNlbGYuX21vY2tfY2hpbGRyZW5bbmFtZV0gPSB2YWx1ZQ0KICAgICAgICByZXR1cm4gb2JqZWN0Ll9fc2V0YXR0cl9fKHNlbGYsIG5hbWUsIHZhbHVlKQ0KDQoNCiAgICBkZWYgX19kZWxhdHRyX18oc2VsZiwgbmFtZSk6DQogICAgICAgIGlmIG5hbWUgaW4gX2FsbF9tYWdpY3MgYW5kIG5hbWUgaW4gdHlwZShzZWxmKS5fX2RpY3RfXzoNCiAgICAgICAgICAgIGRlbGF0dHIodHlwZShzZWxmKSwgbmFtZSkNCiAgICAgICAgICAgIGlmIG5hbWUgbm90IGluIHNlbGYuX19kaWN0X186DQogICAgICAgICAgICAgICAgIyBmb3IgbWFnaWMgbWV0aG9kcyB0aGF0IGFyZSBzdGlsbCBNYWdpY1Byb3h5IG9iamVjdHMgYW5kDQogICAgICAgICAgICAgICAgIyBub3Qgc2V0IG9uIHRoZSBpbnN0YW5jZSBpdHNlbGYNCiAgICAgICAgICAgICAgICByZXR1cm4NCg0KICAgICAgICBpZiBuYW1lIGluIHNlbGYuX19kaWN0X186DQogICAgICAgICAgICBvYmplY3QuX19kZWxhdHRyX18oc2VsZiwgbmFtZSkNCg0KICAgICAgICBvYmogPSBzZWxmLl9tb2NrX2NoaWxkcmVuLmdldChuYW1lLCBfbWlzc2luZykNCiAgICAgICAgaWYgb2JqIGlzIF9kZWxldGVkOg0KICAgICAgICAgICAgcmFpc2UgQXR0cmlidXRlRXJyb3IobmFtZSkNCiAgICAgICAgaWYgb2JqIGlzIG5vdCBfbWlzc2luZzoNCiAgICAgICAgICAgIGRlbCBzZWxmLl9tb2NrX2NoaWxkcmVuW25hbWVdDQogICAgICAgIHNlbGYuX21vY2tfY2hpbGRyZW5bbmFtZV0gPSBfZGVsZXRlZA0KDQoNCg0KICAgIGRlZiBfZm9ybWF0X21vY2tfY2FsbF9zaWduYXR1cmUoc2VsZiwgYXJncywga3dhcmdzKToNCiAgICAgICAgbmFtZSA9IHNlbGYuX21vY2tfbmFtZSBvciAnbW9jaycNCiAgICAgICAgcmV0dXJuIF9mb3JtYXRfY2FsbF9zaWduYXR1cmUobmFtZSwgYXJncywga3dhcmdzKQ0KDQoNCiAgICBkZWYgX2Zvcm1hdF9tb2NrX2ZhaWx1cmVfbWVzc2FnZShzZWxmLCBhcmdzLCBrd2FyZ3MpOg0KICAgICAgICBtZXNzYWdlID0gJ0V4cGVjdGVkIGNhbGw6ICVzXG5BY3R1YWwgY2FsbDogJXMnDQogICAgICAgIGV4cGVjdGVkX3N0cmluZyA9IHNlbGYuX2Zvcm1hdF9tb2NrX2NhbGxfc2lnbmF0dXJlKGFyZ3MsIGt3YXJncykNCiAgICAgICAgY2FsbF9hcmdzID0gc2VsZi5jYWxsX2FyZ3MNCiAgICAgICAgaWYgbGVuKGNhbGxfYXJncykgPT0gMzoNCiAgICAgICAgICAgIGNhbGxfYXJncyA9IGNhbGxfYXJnc1sxOl0NCiAgICAgICAgYWN0dWFsX3N0cmluZyA9IHNlbGYuX2Zvcm1hdF9tb2NrX2NhbGxfc2lnbmF0dXJlKCpjYWxsX2FyZ3MpDQogICAgICAgIHJldHVybiBtZXNzYWdlICUgKGV4cGVjdGVkX3N0cmluZywgYWN0dWFsX3N0cmluZykNCg0KDQogICAgZGVmIGFzc2VydF9jYWxsZWRfd2l0aChfbW9ja19zZWxmLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICAiIiJhc3NlcnQgdGhhdCB0aGUgbW9jayB3YXMgY2FsbGVkIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuDQoNCiAgICAgICAgUmFpc2VzIGFuIEFzc2VydGlvbkVycm9yIGlmIHRoZSBhcmdzIGFuZCBrZXl3b3JkIGFyZ3MgcGFzc2VkIGluIGFyZQ0KICAgICAgICBkaWZmZXJlbnQgdG8gdGhlIGxhc3QgY2FsbCB0byB0aGUgbW9jay4iIiINCiAgICAgICAgc2VsZiA9IF9tb2NrX3NlbGYNCiAgICAgICAgaWYgc2VsZi5jYWxsX2FyZ3MgaXMgTm9uZToNCiAgICAgICAgICAgIGV4cGVjdGVkID0gc2VsZi5fZm9ybWF0X21vY2tfY2FsbF9zaWduYXR1cmUoYXJncywga3dhcmdzKQ0KICAgICAgICAgICAgcmFpc2UgQXNzZXJ0aW9uRXJyb3IoJ0V4cGVjdGVkIGNhbGw6ICVzXG5Ob3QgY2FsbGVkJyAlIChleHBlY3RlZCwpKQ0KDQogICAgICAgIGlmIHNlbGYuY2FsbF9hcmdzICE9IChhcmdzLCBrd2FyZ3MpOg0KICAgICAgICAgICAgbXNnID0gc2VsZi5fZm9ybWF0X21vY2tfZmFpbHVyZV9tZXNzYWdlKGFyZ3MsIGt3YXJncykNCiAgICAgICAgICAgIHJhaXNlIEFzc2VydGlvbkVycm9yKG1zZykNCg0KDQogICAgZGVmIGFzc2VydF9jYWxsZWRfb25jZV93aXRoKF9tb2NrX3NlbGYsICphcmdzLCAqKmt3YXJncyk6DQogICAgICAgICIiImFzc2VydCB0aGF0IHRoZSBtb2NrIHdhcyBjYWxsZWQgZXhhY3RseSBvbmNlIGFuZCB3aXRoIHRoZSBzcGVjaWZpZWQNCiAgICAgICAgYXJndW1lbnRzLiIiIg0KICAgICAgICBzZWxmID0gX21vY2tfc2VsZg0KICAgICAgICBpZiBub3Qgc2VsZi5jYWxsX2NvdW50ID09IDE6DQogICAgICAgICAgICBtc2cgPSAoIkV4cGVjdGVkIHRvIGJlIGNhbGxlZCBvbmNlLiBDYWxsZWQgJXMgdGltZXMuIiAlDQogICAgICAgICAgICAgICAgICAgc2VsZi5jYWxsX2NvdW50KQ0KICAgICAgICAgICAgcmFpc2UgQXNzZXJ0aW9uRXJyb3IobXNnKQ0KICAgICAgICByZXR1cm4gc2VsZi5hc3NlcnRfY2FsbGVkX3dpdGgoKmFyZ3MsICoqa3dhcmdzKQ0KDQoNCiAgICBkZWYgYXNzZXJ0X2hhc19jYWxscyhzZWxmLCBjYWxscywgYW55X29yZGVyPUZhbHNlKToNCiAgICAgICAgIiIiYXNzZXJ0IHRoZSBtb2NrIGhhcyBiZWVuIGNhbGxlZCB3aXRoIHRoZSBzcGVjaWZpZWQgY2FsbHMuDQogICAgICAgIFRoZSBgbW9ja19jYWxsc2AgbGlzdCBpcyBjaGVja2VkIGZvciB0aGUgY2FsbHMuDQoNCiAgICAgICAgSWYgYGFueV9vcmRlcmAgaXMgRmFsc2UgKHRoZSBkZWZhdWx0KSB0aGVuIHRoZSBjYWxscyBtdXN0IGJlDQogICAgICAgIHNlcXVlbnRpYWwuIFRoZXJlIGNhbiBiZSBleHRyYSBjYWxscyBiZWZvcmUgb3IgYWZ0ZXIgdGhlDQogICAgICAgIHNwZWNpZmllZCBjYWxscy4NCg0KICAgICAgICBJZiBgYW55X29yZGVyYCBpcyBUcnVlIHRoZW4gdGhlIGNhbGxzIGNhbiBiZSBpbiBhbnkgb3JkZXIsIGJ1dA0KICAgICAgICB0aGV5IG11c3QgYWxsIGFwcGVhciBpbiBgbW9ja19jYWxsc2AuIiIiDQogICAgICAgIGlmIG5vdCBhbnlfb3JkZXI6DQogICAgICAgICAgICBpZiBjYWxscyBub3QgaW4gc2VsZi5tb2NrX2NhbGxzOg0KICAgICAgICAgICAgICAgIHJhaXNlIEFzc2VydGlvbkVycm9yKA0KICAgICAgICAgICAgICAgICAgICAnQ2FsbHMgbm90IGZvdW5kLlxuRXhwZWN0ZWQ6ICVyXG4nDQogICAgICAgICAgICAgICAgICAgICdBY3R1YWw6ICVyJyAlIChjYWxscywgc2VsZi5tb2NrX2NhbGxzKQ0KICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgIHJldHVybg0KDQogICAgICAgIGFsbF9jYWxscyA9IGxpc3Qoc2VsZi5tb2NrX2NhbGxzKQ0KDQogICAgICAgIG5vdF9mb3VuZCA9IFtdDQogICAgICAgIGZvciBrYWxsIGluIGNhbGxzOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGFsbF9jYWxscy5yZW1vdmUoa2FsbCkNCiAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgICAgICAgICAgICAgIG5vdF9mb3VuZC5hcHBlbmQoa2FsbCkNCiAgICAgICAgaWYgbm90X2ZvdW5kOg0KICAgICAgICAgICAgcmFpc2UgQXNzZXJ0aW9uRXJyb3IoDQogICAgICAgICAgICAgICAgJyVyIG5vdCBhbGwgZm91bmQgaW4gY2FsbCBsaXN0JyAlICh0dXBsZShub3RfZm91bmQpLCkNCiAgICAgICAgICAgICkNCg0KDQogICAgZGVmIGFzc2VydF9hbnlfY2FsbChzZWxmLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICAiIiJhc3NlcnQgdGhlIG1vY2sgaGFzIGJlZW4gY2FsbGVkIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuDQoNCiAgICAgICAgVGhlIGFzc2VydCBwYXNzZXMgaWYgdGhlIG1vY2sgaGFzICpldmVyKiBiZWVuIGNhbGxlZCwgdW5saWtlDQogICAgICAgIGBhc3NlcnRfY2FsbGVkX3dpdGhgIGFuZCBgYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGhgIHRoYXQgb25seSBwYXNzIGlmDQogICAgICAgIHRoZSBjYWxsIGlzIHRoZSBtb3N0IHJlY2VudCBvbmUuIiIiDQogICAgICAgIGthbGwgPSBjYWxsKCphcmdzLCAqKmt3YXJncykNCiAgICAgICAgaWYga2FsbCBub3QgaW4gc2VsZi5jYWxsX2FyZ3NfbGlzdDoNCiAgICAgICAgICAgIGV4cGVjdGVkX3N0cmluZyA9IHNlbGYuX2Zvcm1hdF9tb2NrX2NhbGxfc2lnbmF0dXJlKGFyZ3MsIGt3YXJncykNCiAgICAgICAgICAgIHJhaXNlIEFzc2VydGlvbkVycm9yKA0KICAgICAgICAgICAgICAgICclcyBjYWxsIG5vdCBmb3VuZCcgJSBleHBlY3RlZF9zdHJpbmcNCiAgICAgICAgICAgICkNCg0KDQogICAgZGVmIF9nZXRfY2hpbGRfbW9jayhzZWxmLCAqKmt3KToNCiAgICAgICAgIiIiQ3JlYXRlIHRoZSBjaGlsZCBtb2NrcyBmb3IgYXR0cmlidXRlcyBhbmQgcmV0dXJuIHZhbHVlLg0KICAgICAgICBCeSBkZWZhdWx0IGNoaWxkIG1vY2tzIHdpbGwgYmUgdGhlIHNhbWUgdHlwZSBhcyB0aGUgcGFyZW50Lg0KICAgICAgICBTdWJjbGFzc2VzIG9mIE1vY2sgbWF5IHdhbnQgdG8gb3ZlcnJpZGUgdGhpcyB0byBjdXN0b21pemUgdGhlIHdheQ0KICAgICAgICBjaGlsZCBtb2NrcyBhcmUgbWFkZS4NCg0KICAgICAgICBGb3Igbm9uLWNhbGxhYmxlIG1vY2tzIHRoZSBjYWxsYWJsZSB2YXJpYW50IHdpbGwgYmUgdXNlZCAocmF0aGVyIHRoYW4NCiAgICAgICAgYW55IGN1c3RvbSBzdWJjbGFzcykuIiIiDQogICAgICAgIF90eXBlID0gdHlwZShzZWxmKQ0KICAgICAgICBpZiBub3QgaXNzdWJjbGFzcyhfdHlwZSwgQ2FsbGFibGVNaXhpbik6DQogICAgICAgICAgICBpZiBpc3N1YmNsYXNzKF90eXBlLCBOb25DYWxsYWJsZU1hZ2ljTW9jayk6DQogICAgICAgICAgICAgICAga2xhc3MgPSBNYWdpY01vY2sNCiAgICAgICAgICAgIGVsaWYgaXNzdWJjbGFzcyhfdHlwZSwgTm9uQ2FsbGFibGVNb2NrKSA6DQogICAgICAgICAgICAgICAga2xhc3MgPSBNb2NrDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBrbGFzcyA9IF90eXBlLl9fbXJvX19bMV0NCiAgICAgICAgcmV0dXJuIGtsYXNzKCoqa3cpDQoNCg0KDQpkZWYgX3RyeV9pdGVyKG9iaik6DQogICAgaWYgb2JqIGlzIE5vbmU6DQogICAgICAgIHJldHVybiBvYmoNCiAgICBpZiBfaXNfZXhjZXB0aW9uKG9iaik6DQogICAgICAgIHJldHVybiBvYmoNCiAgICBpZiBfY2FsbGFibGUob2JqKToNCiAgICAgICAgcmV0dXJuIG9iag0KICAgIHRyeToNCiAgICAgICAgcmV0dXJuIGl0ZXIob2JqKQ0KICAgIGV4Y2VwdCBUeXBlRXJyb3I6DQogICAgICAgICMgWFhYWCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQ0KICAgICAgICAjIGJ1dCB0aGlzIHdpbGwgYmxvdyB1cCBvbiBmaXJzdCBjYWxsIC0gc28gbWF5YmUgd2Ugc2hvdWxkIGZhaWwgZWFybHk/DQogICAgICAgIHJldHVybiBvYmoNCg0KDQoNCmNsYXNzIENhbGxhYmxlTWl4aW4oQmFzZSk6DQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgc3BlYz1Ob25lLCBzaWRlX2VmZmVjdD1Ob25lLCByZXR1cm5fdmFsdWU9REVGQVVMVCwNCiAgICAgICAgICAgICAgICAgd3JhcHM9Tm9uZSwgbmFtZT1Ob25lLCBzcGVjX3NldD1Ob25lLCBwYXJlbnQ9Tm9uZSwNCiAgICAgICAgICAgICAgICAgX3NwZWNfc3RhdGU9Tm9uZSwgX25ld19uYW1lPScnLCBfbmV3X3BhcmVudD1Ob25lLCAqKmt3YXJncyk6DQogICAgICAgIHNlbGYuX19kaWN0X19bJ19tb2NrX3JldHVybl92YWx1ZSddID0gcmV0dXJuX3ZhbHVlDQoNCiAgICAgICAgX3NhZmVfc3VwZXIoQ2FsbGFibGVNaXhpbiwgc2VsZikuX19pbml0X18oDQogICAgICAgICAgICBzcGVjLCB3cmFwcywgbmFtZSwgc3BlY19zZXQsIHBhcmVudCwNCiAgICAgICAgICAgIF9zcGVjX3N0YXRlLCBfbmV3X25hbWUsIF9uZXdfcGFyZW50LCAqKmt3YXJncw0KICAgICAgICApDQoNCiAgICAgICAgc2VsZi5zaWRlX2VmZmVjdCA9IHNpZGVfZWZmZWN0DQoNCg0KICAgIGRlZiBfbW9ja19jaGVja19zaWcoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgIyBzdHViIG1ldGhvZCB0aGF0IGNhbiBiZSByZXBsYWNlZCB3aXRoIG9uZSB3aXRoIGEgc3BlY2lmaWMgc2lnbmF0dXJlDQogICAgICAgIHBhc3MNCg0KDQogICAgZGVmIF9fY2FsbF9fKF9tb2NrX3NlbGYsICphcmdzLCAqKmt3YXJncyk6DQogICAgICAgICMgY2FuJ3QgdXNlIHNlbGYgaW4tY2FzZSBhIGZ1bmN0aW9uIC8gbWV0aG9kIHdlIGFyZSBtb2NraW5nIHVzZXMgc2VsZg0KICAgICAgICAjIGluIHRoZSBzaWduYXR1cmUNCiAgICAgICAgX21vY2tfc2VsZi5fbW9ja19jaGVja19zaWcoKmFyZ3MsICoqa3dhcmdzKQ0KICAgICAgICByZXR1cm4gX21vY2tfc2VsZi5fbW9ja19jYWxsKCphcmdzLCAqKmt3YXJncykNCg0KDQogICAgZGVmIF9tb2NrX2NhbGwoX21vY2tfc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgc2VsZiA9IF9tb2NrX3NlbGYNCiAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlDQogICAgICAgIHNlbGYuY2FsbF9jb3VudCArPSAxDQogICAgICAgIHNlbGYuY2FsbF9hcmdzID0gX0NhbGwoKGFyZ3MsIGt3YXJncyksIHR3bz1UcnVlKQ0KICAgICAgICBzZWxmLmNhbGxfYXJnc19saXN0LmFwcGVuZChfQ2FsbCgoYXJncywga3dhcmdzKSwgdHdvPVRydWUpKQ0KDQogICAgICAgIF9uZXdfbmFtZSA9IHNlbGYuX21vY2tfbmV3X25hbWUNCiAgICAgICAgX25ld19wYXJlbnQgPSBzZWxmLl9tb2NrX25ld19wYXJlbnQNCiAgICAgICAgc2VsZi5tb2NrX2NhbGxzLmFwcGVuZChfQ2FsbCgoJycsIGFyZ3MsIGt3YXJncykpKQ0KDQogICAgICAgIHNlZW4gPSBzZXQoKQ0KICAgICAgICBza2lwX25leHRfZG90ID0gX25ld19uYW1lID09ICcoKScNCiAgICAgICAgZG9fbWV0aG9kX2NhbGxzID0gc2VsZi5fbW9ja19wYXJlbnQgaXMgbm90IE5vbmUNCiAgICAgICAgbmFtZSA9IHNlbGYuX21vY2tfbmFtZQ0KICAgICAgICB3aGlsZSBfbmV3X3BhcmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHRoaXNfbW9ja19jYWxsID0gX0NhbGwoKF9uZXdfbmFtZSwgYXJncywga3dhcmdzKSkNCiAgICAgICAgICAgIGlmIF9uZXdfcGFyZW50Ll9tb2NrX25ld19uYW1lOg0KICAgICAgICAgICAgICAgIGRvdCA9ICcuJw0KICAgICAgICAgICAgICAgIGlmIHNraXBfbmV4dF9kb3Q6DQogICAgICAgICAgICAgICAgICAgIGRvdCA9ICcnDQoNCiAgICAgICAgICAgICAgICBza2lwX25leHRfZG90ID0gRmFsc2UNCiAgICAgICAgICAgICAgICBpZiBfbmV3X3BhcmVudC5fbW9ja19uZXdfbmFtZSA9PSAnKCknOg0KICAgICAgICAgICAgICAgICAgICBza2lwX25leHRfZG90ID0gVHJ1ZQ0KDQogICAgICAgICAgICAgICAgX25ld19uYW1lID0gX25ld19wYXJlbnQuX21vY2tfbmV3X25hbWUgKyBkb3QgKyBfbmV3X25hbWUNCg0KICAgICAgICAgICAgaWYgZG9fbWV0aG9kX2NhbGxzOg0KICAgICAgICAgICAgICAgIGlmIF9uZXdfbmFtZSA9PSBuYW1lOg0KICAgICAgICAgICAgICAgICAgICB0aGlzX21ldGhvZF9jYWxsID0gdGhpc19tb2NrX2NhbGwNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICB0aGlzX21ldGhvZF9jYWxsID0gX0NhbGwoKG5hbWUsIGFyZ3MsIGt3YXJncykpDQogICAgICAgICAgICAgICAgX25ld19wYXJlbnQubWV0aG9kX2NhbGxzLmFwcGVuZCh0aGlzX21ldGhvZF9jYWxsKQ0KDQogICAgICAgICAgICAgICAgZG9fbWV0aG9kX2NhbGxzID0gX25ld19wYXJlbnQuX21vY2tfcGFyZW50IGlzIG5vdCBOb25lDQogICAgICAgICAgICAgICAgaWYgZG9fbWV0aG9kX2NhbGxzOg0KICAgICAgICAgICAgICAgICAgICBuYW1lID0gX25ld19wYXJlbnQuX21vY2tfbmFtZSArICcuJyArIG5hbWUNCg0KICAgICAgICAgICAgX25ld19wYXJlbnQubW9ja19jYWxscy5hcHBlbmQodGhpc19tb2NrX2NhbGwpDQogICAgICAgICAgICBfbmV3X3BhcmVudCA9IF9uZXdfcGFyZW50Ll9tb2NrX25ld19wYXJlbnQNCg0KICAgICAgICAgICAgIyB1c2UgaWRzIGhlcmUgc28gYXMgbm90IHRvIGNhbGwgX19oYXNoX18gb24gdGhlIG1vY2tzDQogICAgICAgICAgICBfbmV3X3BhcmVudF9pZCA9IGlkKF9uZXdfcGFyZW50KQ0KICAgICAgICAgICAgaWYgX25ld19wYXJlbnRfaWQgaW4gc2VlbjoNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgc2Vlbi5hZGQoX25ld19wYXJlbnRfaWQpDQoNCiAgICAgICAgcmV0X3ZhbCA9IERFRkFVTFQNCiAgICAgICAgZWZmZWN0ID0gc2VsZi5zaWRlX2VmZmVjdA0KICAgICAgICBpZiBlZmZlY3QgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBpZiBfaXNfZXhjZXB0aW9uKGVmZmVjdCk6DQogICAgICAgICAgICAgICAgcmFpc2UgZWZmZWN0DQoNCiAgICAgICAgICAgIGlmIG5vdCBfY2FsbGFibGUoZWZmZWN0KToNCiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXh0KGVmZmVjdCkNCiAgICAgICAgICAgICAgICBpZiBfaXNfZXhjZXB0aW9uKHJlc3VsdCk6DQogICAgICAgICAgICAgICAgICAgIHJhaXNlIHJlc3VsdA0KICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQNCg0KICAgICAgICAgICAgcmV0X3ZhbCA9IGVmZmVjdCgqYXJncywgKiprd2FyZ3MpDQogICAgICAgICAgICBpZiByZXRfdmFsIGlzIERFRkFVTFQ6DQogICAgICAgICAgICAgICAgcmV0X3ZhbCA9IHNlbGYucmV0dXJuX3ZhbHVlDQoNCiAgICAgICAgaWYgKHNlbGYuX21vY2tfd3JhcHMgaXMgbm90IE5vbmUgYW5kDQogICAgICAgICAgICAgc2VsZi5fbW9ja19yZXR1cm5fdmFsdWUgaXMgREVGQVVMVCk6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbW9ja193cmFwcygqYXJncywgKiprd2FyZ3MpDQogICAgICAgIGlmIHJldF92YWwgaXMgREVGQVVMVDoNCiAgICAgICAgICAgIHJldF92YWwgPSBzZWxmLnJldHVybl92YWx1ZQ0KICAgICAgICByZXR1cm4gcmV0X3ZhbA0KDQoNCg0KY2xhc3MgTW9jayhDYWxsYWJsZU1peGluLCBOb25DYWxsYWJsZU1vY2spOg0KICAgICIiIg0KICAgIENyZWF0ZSBhIG5ldyBgTW9ja2Agb2JqZWN0LiBgTW9ja2AgdGFrZXMgc2V2ZXJhbCBvcHRpb25hbCBhcmd1bWVudHMNCiAgICB0aGF0IHNwZWNpZnkgdGhlIGJlaGF2aW91ciBvZiB0aGUgTW9jayBvYmplY3Q6DQoNCiAgICAqIGBzcGVjYDogVGhpcyBjYW4gYmUgZWl0aGVyIGEgbGlzdCBvZiBzdHJpbmdzIG9yIGFuIGV4aXN0aW5nIG9iamVjdCAoYQ0KICAgICAgY2xhc3Mgb3IgaW5zdGFuY2UpIHRoYXQgYWN0cyBhcyB0aGUgc3BlY2lmaWNhdGlvbiBmb3IgdGhlIG1vY2sgb2JqZWN0LiBJZg0KICAgICAgeW91IHBhc3MgaW4gYW4gb2JqZWN0IHRoZW4gYSBsaXN0IG9mIHN0cmluZ3MgaXMgZm9ybWVkIGJ5IGNhbGxpbmcgZGlyIG9uDQogICAgICB0aGUgb2JqZWN0IChleGNsdWRpbmcgdW5zdXBwb3J0ZWQgbWFnaWMgYXR0cmlidXRlcyBhbmQgbWV0aG9kcykuIEFjY2Vzc2luZw0KICAgICAgYW55IGF0dHJpYnV0ZSBub3QgaW4gdGhpcyBsaXN0IHdpbGwgcmFpc2UgYW4gYEF0dHJpYnV0ZUVycm9yYC4NCg0KICAgICAgSWYgYHNwZWNgIGlzIGFuIG9iamVjdCAocmF0aGVyIHRoYW4gYSBsaXN0IG9mIHN0cmluZ3MpIHRoZW4NCiAgICAgIGBtb2NrLl9fY2xhc3NfX2AgcmV0dXJucyB0aGUgY2xhc3Mgb2YgdGhlIHNwZWMgb2JqZWN0LiBUaGlzIGFsbG93cyBtb2Nrcw0KICAgICAgdG8gcGFzcyBgaXNpbnN0YW5jZWAgdGVzdHMuDQoNCiAgICAqIGBzcGVjX3NldGA6IEEgc3RyaWN0ZXIgdmFyaWFudCBvZiBgc3BlY2AuIElmIHVzZWQsIGF0dGVtcHRpbmcgdG8gKnNldCoNCiAgICAgIG9yIGdldCBhbiBhdHRyaWJ1dGUgb24gdGhlIG1vY2sgdGhhdCBpc24ndCBvbiB0aGUgb2JqZWN0IHBhc3NlZCBhcw0KICAgICAgYHNwZWNfc2V0YCB3aWxsIHJhaXNlIGFuIGBBdHRyaWJ1dGVFcnJvcmAuDQoNCiAgICAqIGBzaWRlX2VmZmVjdGA6IEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSBNb2NrIGlzIGNhbGxlZC4gU2VlDQogICAgICB0aGUgYHNpZGVfZWZmZWN0YCBhdHRyaWJ1dGUuIFVzZWZ1bCBmb3IgcmFpc2luZyBleGNlcHRpb25zIG9yDQogICAgICBkeW5hbWljYWxseSBjaGFuZ2luZyByZXR1cm4gdmFsdWVzLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIHNhbWUNCiAgICAgIGFyZ3VtZW50cyBhcyB0aGUgbW9jaywgYW5kIHVubGVzcyBpdCByZXR1cm5zIGBERUZBVUxUYCwgdGhlIHJldHVybg0KICAgICAgdmFsdWUgb2YgdGhpcyBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSByZXR1cm4gdmFsdWUuDQoNCiAgICAgIElmIGBzaWRlX2VmZmVjdGAgaXMgYW4gaXRlcmFibGUgdGhlbiBlYWNoIGNhbGwgdG8gdGhlIG1vY2sgd2lsbCByZXR1cm4NCiAgICAgIHRoZSBuZXh0IHZhbHVlIGZyb20gdGhlIGl0ZXJhYmxlLiBJZiBhbnkgb2YgdGhlIG1lbWJlcnMgb2YgdGhlIGl0ZXJhYmxlDQogICAgICBhcmUgZXhjZXB0aW9ucyB0aGV5IHdpbGwgYmUgcmFpc2VkIGluc3RlYWQgb2YgcmV0dXJuZWQuDQoNCiAgICAgIElmIGBzaWRlX2VmZmVjdGAgaXMgYW4gaXRlcmFibGUgdGhlbiBlYWNoIGNhbGwgdG8gdGhlIG1vY2sgd2lsbCByZXR1cm4NCiAgICAgIHRoZSBuZXh0IHZhbHVlIGZyb20gdGhlIGl0ZXJhYmxlLg0KDQogICAgKiBgcmV0dXJuX3ZhbHVlYDogVGhlIHZhbHVlIHJldHVybmVkIHdoZW4gdGhlIG1vY2sgaXMgY2FsbGVkLiBCeSBkZWZhdWx0DQogICAgICB0aGlzIGlzIGEgbmV3IE1vY2sgKGNyZWF0ZWQgb24gZmlyc3QgYWNjZXNzKS4gU2VlIHRoZQ0KICAgICAgYHJldHVybl92YWx1ZWAgYXR0cmlidXRlLg0KDQogICAgKiBgd3JhcHNgOiBJdGVtIGZvciB0aGUgbW9jayBvYmplY3QgdG8gd3JhcC4gSWYgYHdyYXBzYCBpcyBub3QgTm9uZSB0aGVuDQogICAgICBjYWxsaW5nIHRoZSBNb2NrIHdpbGwgcGFzcyB0aGUgY2FsbCB0aHJvdWdoIHRvIHRoZSB3cmFwcGVkIG9iamVjdA0KICAgICAgKHJldHVybmluZyB0aGUgcmVhbCByZXN1bHQpLiBBdHRyaWJ1dGUgYWNjZXNzIG9uIHRoZSBtb2NrIHdpbGwgcmV0dXJuIGENCiAgICAgIE1vY2sgb2JqZWN0IHRoYXQgd3JhcHMgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9mIHRoZSB3cmFwcGVkIG9iamVjdA0KICAgICAgKHNvIGF0dGVtcHRpbmcgdG8gYWNjZXNzIGFuIGF0dHJpYnV0ZSB0aGF0IGRvZXNuJ3QgZXhpc3Qgd2lsbCByYWlzZSBhbg0KICAgICAgYEF0dHJpYnV0ZUVycm9yYCkuDQoNCiAgICAgIElmIHRoZSBtb2NrIGhhcyBhbiBleHBsaWNpdCBgcmV0dXJuX3ZhbHVlYCBzZXQgdGhlbiBjYWxscyBhcmUgbm90IHBhc3NlZA0KICAgICAgdG8gdGhlIHdyYXBwZWQgb2JqZWN0IGFuZCB0aGUgYHJldHVybl92YWx1ZWAgaXMgcmV0dXJuZWQgaW5zdGVhZC4NCg0KICAgICogYG5hbWVgOiBJZiB0aGUgbW9jayBoYXMgYSBuYW1lIHRoZW4gaXQgd2lsbCBiZSB1c2VkIGluIHRoZSByZXByIG9mIHRoZQ0KICAgICAgbW9jay4gVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuIFRoZSBuYW1lIGlzIHByb3BhZ2F0ZWQgdG8gY2hpbGQNCiAgICAgIG1vY2tzLg0KDQogICAgTW9ja3MgY2FuIGFsc28gYmUgY2FsbGVkIHdpdGggYXJiaXRyYXJ5IGtleXdvcmQgYXJndW1lbnRzLiBUaGVzZSB3aWxsIGJlDQogICAgdXNlZCB0byBzZXQgYXR0cmlidXRlcyBvbiB0aGUgbW9jayBhZnRlciBpdCBpcyBjcmVhdGVkLg0KICAgICIiIg0KDQoNCg0KZGVmIF9kb3RfbG9va3VwKHRoaW5nLCBjb21wLCBpbXBvcnRfcGF0aCk6DQogICAgdHJ5Og0KICAgICAgICByZXR1cm4gZ2V0YXR0cih0aGluZywgY29tcCkNCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgIF9faW1wb3J0X18oaW1wb3J0X3BhdGgpDQogICAgICAgIHJldHVybiBnZXRhdHRyKHRoaW5nLCBjb21wKQ0KDQoNCmRlZiBfaW1wb3J0ZXIodGFyZ2V0KToNCiAgICBjb21wb25lbnRzID0gdGFyZ2V0LnNwbGl0KCcuJykNCiAgICBpbXBvcnRfcGF0aCA9IGNvbXBvbmVudHMucG9wKDApDQogICAgdGhpbmcgPSBfX2ltcG9ydF9fKGltcG9ydF9wYXRoKQ0KDQogICAgZm9yIGNvbXAgaW4gY29tcG9uZW50czoNCiAgICAgICAgaW1wb3J0X3BhdGggKz0gIi4lcyIgJSBjb21wDQogICAgICAgIHRoaW5nID0gX2RvdF9sb29rdXAodGhpbmcsIGNvbXAsIGltcG9ydF9wYXRoKQ0KICAgIHJldHVybiB0aGluZw0KDQoNCmRlZiBfaXNfc3RhcnRlZChwYXRjaGVyKToNCiAgICAjIFhYWFggaG9ycmlibGUNCiAgICByZXR1cm4gaGFzYXR0cihwYXRjaGVyLCAnaXNfbG9jYWwnKQ0KDQoNCmNsYXNzIF9wYXRjaChvYmplY3QpOg0KDQogICAgYXR0cmlidXRlX25hbWUgPSBOb25lDQogICAgX2FjdGl2ZV9wYXRjaGVzID0gc2V0KCkNCg0KICAgIGRlZiBfX2luaXRfXygNCiAgICAgICAgICAgIHNlbGYsIGdldHRlciwgYXR0cmlidXRlLCBuZXcsIHNwZWMsIGNyZWF0ZSwNCiAgICAgICAgICAgIHNwZWNfc2V0LCBhdXRvc3BlYywgbmV3X2NhbGxhYmxlLCBrd2FyZ3MNCiAgICAgICAgKToNCiAgICAgICAgaWYgbmV3X2NhbGxhYmxlIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgaWYgbmV3IGlzIG5vdCBERUZBVUxUOg0KICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoDQogICAgICAgICAgICAgICAgICAgICJDYW5ub3QgdXNlICduZXcnIGFuZCAnbmV3X2NhbGxhYmxlJyB0b2dldGhlciINCiAgICAgICAgICAgICAgICApDQogICAgICAgICAgICBpZiBhdXRvc3BlYyBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKA0KICAgICAgICAgICAgICAgICAgICAiQ2Fubm90IHVzZSAnYXV0b3NwZWMnIGFuZCAnbmV3X2NhbGxhYmxlJyB0b2dldGhlciINCiAgICAgICAgICAgICAgICApDQoNCiAgICAgICAgc2VsZi5nZXR0ZXIgPSBnZXR0ZXINCiAgICAgICAgc2VsZi5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGUNCiAgICAgICAgc2VsZi5uZXcgPSBuZXcNCiAgICAgICAgc2VsZi5uZXdfY2FsbGFibGUgPSBuZXdfY2FsbGFibGUNCiAgICAgICAgc2VsZi5zcGVjID0gc3BlYw0KICAgICAgICBzZWxmLmNyZWF0ZSA9IGNyZWF0ZQ0KICAgICAgICBzZWxmLmhhc19sb2NhbCA9IEZhbHNlDQogICAgICAgIHNlbGYuc3BlY19zZXQgPSBzcGVjX3NldA0KICAgICAgICBzZWxmLmF1dG9zcGVjID0gYXV0b3NwZWMNCiAgICAgICAgc2VsZi5rd2FyZ3MgPSBrd2FyZ3MNCiAgICAgICAgc2VsZi5hZGRpdGlvbmFsX3BhdGNoZXJzID0gW10NCg0KDQogICAgZGVmIGNvcHkoc2VsZik6DQogICAgICAgIHBhdGNoZXIgPSBfcGF0Y2goDQogICAgICAgICAgICBzZWxmLmdldHRlciwgc2VsZi5hdHRyaWJ1dGUsIHNlbGYubmV3LCBzZWxmLnNwZWMsDQogICAgICAgICAgICBzZWxmLmNyZWF0ZSwgc2VsZi5zcGVjX3NldCwNCiAgICAgICAgICAgIHNlbGYuYXV0b3NwZWMsIHNlbGYubmV3X2NhbGxhYmxlLCBzZWxmLmt3YXJncw0KICAgICAgICApDQogICAgICAgIHBhdGNoZXIuYXR0cmlidXRlX25hbWUgPSBzZWxmLmF0dHJpYnV0ZV9uYW1lDQogICAgICAgIHBhdGNoZXIuYWRkaXRpb25hbF9wYXRjaGVycyA9IFsNCiAgICAgICAgICAgIHAuY29weSgpIGZvciBwIGluIHNlbGYuYWRkaXRpb25hbF9wYXRjaGVycw0KICAgICAgICBdDQogICAgICAgIHJldHVybiBwYXRjaGVyDQoNCg0KICAgIGRlZiBfX2NhbGxfXyhzZWxmLCBmdW5jKToNCiAgICAgICAgaWYgaXNpbnN0YW5jZShmdW5jLCB0eXBlKToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLmRlY29yYXRlX2NsYXNzKGZ1bmMpDQogICAgICAgIHJldHVybiBzZWxmLmRlY29yYXRlX2NhbGxhYmxlKGZ1bmMpDQoNCg0KICAgIGRlZiBkZWNvcmF0ZV9jbGFzcyhzZWxmLCBrbGFzcyk6DQogICAgICAgIGZvciBhdHRyIGluIGRpcihrbGFzcyk6DQogICAgICAgICAgICBpZiBub3QgYXR0ci5zdGFydHN3aXRoKHBhdGNoLlRFU1RfUFJFRklYKToNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KDQogICAgICAgICAgICBhdHRyX3ZhbHVlID0gZ2V0YXR0cihrbGFzcywgYXR0cikNCiAgICAgICAgICAgIGlmIG5vdCBoYXNhdHRyKGF0dHJfdmFsdWUsICJfX2NhbGxfXyIpOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgICAgIHBhdGNoZXIgPSBzZWxmLmNvcHkoKQ0KICAgICAgICAgICAgc2V0YXR0cihrbGFzcywgYXR0ciwgcGF0Y2hlcihhdHRyX3ZhbHVlKSkNCiAgICAgICAgcmV0dXJuIGtsYXNzDQoNCg0KICAgIGRlZiBkZWNvcmF0ZV9jYWxsYWJsZShzZWxmLCBmdW5jKToNCiAgICAgICAgaWYgaGFzYXR0cihmdW5jLCAncGF0Y2hpbmdzJyk6DQogICAgICAgICAgICBmdW5jLnBhdGNoaW5ncy5hcHBlbmQoc2VsZikNCiAgICAgICAgICAgIHJldHVybiBmdW5jDQoNCiAgICAgICAgQHdyYXBzKGZ1bmMpDQogICAgICAgIGRlZiBwYXRjaGVkKCphcmdzLCAqKmtleXdhcmdzKToNCiAgICAgICAgICAgIGV4dHJhX2FyZ3MgPSBbXQ0KICAgICAgICAgICAgZW50ZXJlZF9wYXRjaGVycyA9IFtdDQoNCiAgICAgICAgICAgIGV4Y19pbmZvID0gdHVwbGUoKQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGZvciBwYXRjaGluZyBpbiBwYXRjaGVkLnBhdGNoaW5nczoNCiAgICAgICAgICAgICAgICAgICAgYXJnID0gcGF0Y2hpbmcuX19lbnRlcl9fKCkNCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZF9wYXRjaGVycy5hcHBlbmQocGF0Y2hpbmcpDQogICAgICAgICAgICAgICAgICAgIGlmIHBhdGNoaW5nLmF0dHJpYnV0ZV9uYW1lIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgICAgICAgICAga2V5d2FyZ3MudXBkYXRlKGFyZykNCiAgICAgICAgICAgICAgICAgICAgZWxpZiBwYXRjaGluZy5uZXcgaXMgREVGQVVMVDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhX2FyZ3MuYXBwZW5kKGFyZykNCg0KICAgICAgICAgICAgICAgIGFyZ3MgKz0gdHVwbGUoZXh0cmFfYXJncykNCiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYygqYXJncywgKiprZXl3YXJncykNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBpZiAocGF0Y2hpbmcgbm90IGluIGVudGVyZWRfcGF0Y2hlcnMgYW5kDQogICAgICAgICAgICAgICAgICAgIF9pc19zdGFydGVkKHBhdGNoaW5nKSk6DQogICAgICAgICAgICAgICAgICAgICMgdGhlIHBhdGNoZXIgbWF5IGhhdmUgYmVlbiBzdGFydGVkLCBidXQgYW4gZXhjZXB0aW9uDQogICAgICAgICAgICAgICAgICAgICMgcmFpc2VkIHdoaWxzdCBlbnRlcmluZyBvbmUgb2YgaXRzIGFkZGl0aW9uYWxfcGF0Y2hlcnMNCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZF9wYXRjaGVycy5hcHBlbmQocGF0Y2hpbmcpDQogICAgICAgICAgICAgICAgIyBQYXNzIHRoZSBleGNlcHRpb24gdG8gX19leGl0X18NCiAgICAgICAgICAgICAgICBleGNfaW5mbyA9IHN5cy5leGNfaW5mbygpDQogICAgICAgICAgICAgICAgIyByZS1yYWlzZSB0aGUgZXhjZXB0aW9uDQogICAgICAgICAgICAgICAgcmFpc2UNCiAgICAgICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICAgICAgZm9yIHBhdGNoaW5nIGluIHJldmVyc2VkKGVudGVyZWRfcGF0Y2hlcnMpOg0KICAgICAgICAgICAgICAgICAgICBwYXRjaGluZy5fX2V4aXRfXygqZXhjX2luZm8pDQoNCiAgICAgICAgcGF0Y2hlZC5wYXRjaGluZ3MgPSBbc2VsZl0NCiAgICAgICAgcmV0dXJuIHBhdGNoZWQNCg0KDQogICAgZGVmIGdldF9vcmlnaW5hbChzZWxmKToNCiAgICAgICAgdGFyZ2V0ID0gc2VsZi5nZXR0ZXIoKQ0KICAgICAgICBuYW1lID0gc2VsZi5hdHRyaWJ1dGUNCg0KICAgICAgICBvcmlnaW5hbCA9IERFRkFVTFQNCiAgICAgICAgbG9jYWwgPSBGYWxzZQ0KDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIG9yaWdpbmFsID0gdGFyZ2V0Ll9fZGljdF9fW25hbWVdDQogICAgICAgIGV4Y2VwdCAoQXR0cmlidXRlRXJyb3IsIEtleUVycm9yKToNCiAgICAgICAgICAgIG9yaWdpbmFsID0gZ2V0YXR0cih0YXJnZXQsIG5hbWUsIERFRkFVTFQpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBsb2NhbCA9IFRydWUNCg0KICAgICAgICBpZiBub3Qgc2VsZi5jcmVhdGUgYW5kIG9yaWdpbmFsIGlzIERFRkFVTFQ6DQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigNCiAgICAgICAgICAgICAgICAiJXMgZG9lcyBub3QgaGF2ZSB0aGUgYXR0cmlidXRlICVyIiAlICh0YXJnZXQsIG5hbWUpDQogICAgICAgICAgICApDQogICAgICAgIHJldHVybiBvcmlnaW5hbCwgbG9jYWwNCg0KDQogICAgZGVmIF9fZW50ZXJfXyhzZWxmKToNCiAgICAgICAgIiIiUGVyZm9ybSB0aGUgcGF0Y2guIiIiDQogICAgICAgIG5ldywgc3BlYywgc3BlY19zZXQgPSBzZWxmLm5ldywgc2VsZi5zcGVjLCBzZWxmLnNwZWNfc2V0DQogICAgICAgIGF1dG9zcGVjLCBrd2FyZ3MgPSBzZWxmLmF1dG9zcGVjLCBzZWxmLmt3YXJncw0KICAgICAgICBuZXdfY2FsbGFibGUgPSBzZWxmLm5ld19jYWxsYWJsZQ0KICAgICAgICBzZWxmLnRhcmdldCA9IHNlbGYuZ2V0dGVyKCkNCg0KICAgICAgICAjIG5vcm1hbGlzZSBGYWxzZSB0byBOb25lDQogICAgICAgIGlmIHNwZWMgaXMgRmFsc2U6DQogICAgICAgICAgICBzcGVjID0gTm9uZQ0KICAgICAgICBpZiBzcGVjX3NldCBpcyBGYWxzZToNCiAgICAgICAgICAgIHNwZWNfc2V0ID0gTm9uZQ0KICAgICAgICBpZiBhdXRvc3BlYyBpcyBGYWxzZToNCiAgICAgICAgICAgIGF1dG9zcGVjID0gTm9uZQ0KDQogICAgICAgIGlmIHNwZWMgaXMgbm90IE5vbmUgYW5kIGF1dG9zcGVjIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJDYW4ndCBzcGVjaWZ5IHNwZWMgYW5kIGF1dG9zcGVjIikNCiAgICAgICAgaWYgKChzcGVjIGlzIG5vdCBOb25lIG9yIGF1dG9zcGVjIGlzIG5vdCBOb25lKSBhbmQNCiAgICAgICAgICAgIHNwZWNfc2V0IG5vdCBpbiAoVHJ1ZSwgTm9uZSkpOg0KICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJDYW4ndCBwcm92aWRlIGV4cGxpY2l0IHNwZWNfc2V0ICphbmQqIHNwZWMgb3IgYXV0b3NwZWMiKQ0KDQogICAgICAgIG9yaWdpbmFsLCBsb2NhbCA9IHNlbGYuZ2V0X29yaWdpbmFsKCkNCg0KICAgICAgICBpZiBuZXcgaXMgREVGQVVMVCBhbmQgYXV0b3NwZWMgaXMgTm9uZToNCiAgICAgICAgICAgIGluaGVyaXQgPSBGYWxzZQ0KICAgICAgICAgICAgaWYgc3BlYyBpcyBUcnVlOg0KICAgICAgICAgICAgICAgICMgc2V0IHNwZWMgdG8gdGhlIG9iamVjdCB3ZSBhcmUgcmVwbGFjaW5nDQogICAgICAgICAgICAgICAgc3BlYyA9IG9yaWdpbmFsDQogICAgICAgICAgICAgICAgaWYgc3BlY19zZXQgaXMgVHJ1ZToNCiAgICAgICAgICAgICAgICAgICAgc3BlY19zZXQgPSBvcmlnaW5hbA0KICAgICAgICAgICAgICAgICAgICBzcGVjID0gTm9uZQ0KICAgICAgICAgICAgZWxpZiBzcGVjIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgIGlmIHNwZWNfc2V0IGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgIHNwZWNfc2V0ID0gc3BlYw0KICAgICAgICAgICAgICAgICAgICBzcGVjID0gTm9uZQ0KICAgICAgICAgICAgZWxpZiBzcGVjX3NldCBpcyBUcnVlOg0KICAgICAgICAgICAgICAgIHNwZWNfc2V0ID0gb3JpZ2luYWwNCg0KICAgICAgICAgICAgaWYgc3BlYyBpcyBub3QgTm9uZSBvciBzcGVjX3NldCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICBpZiBvcmlnaW5hbCBpcyBERUZBVUxUOg0KICAgICAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIkNhbid0IHVzZSAnc3BlYycgd2l0aCBjcmVhdGU9VHJ1ZSIpDQogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShvcmlnaW5hbCwgdHlwZSk6DQogICAgICAgICAgICAgICAgICAgICMgSWYgd2UncmUgcGF0Y2hpbmcgb3V0IGEgY2xhc3MgYW5kIHRoZXJlIGlzIGEgc3BlYw0KICAgICAgICAgICAgICAgICAgICBpbmhlcml0ID0gVHJ1ZQ0KDQogICAgICAgICAgICBLbGFzcyA9IE1hZ2ljTW9jaw0KICAgICAgICAgICAgX2t3YXJncyA9IHt9DQogICAgICAgICAgICBpZiBuZXdfY2FsbGFibGUgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgS2xhc3MgPSBuZXdfY2FsbGFibGUNCiAgICAgICAgICAgIGVsaWYgc3BlYyBpcyBub3QgTm9uZSBvciBzcGVjX3NldCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICB0aGlzX3NwZWMgPSBzcGVjDQogICAgICAgICAgICAgICAgaWYgc3BlY19zZXQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHRoaXNfc3BlYyA9IHNwZWNfc2V0DQogICAgICAgICAgICAgICAgaWYgX2lzX2xpc3QodGhpc19zcGVjKToNCiAgICAgICAgICAgICAgICAgICAgbm90X2NhbGxhYmxlID0gJ19fY2FsbF9fJyBub3QgaW4gdGhpc19zcGVjDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgbm90X2NhbGxhYmxlID0gbm90IGNhbGxhYmxlKHRoaXNfc3BlYykNCiAgICAgICAgICAgICAgICBpZiBub3RfY2FsbGFibGU6DQogICAgICAgICAgICAgICAgICAgIEtsYXNzID0gTm9uQ2FsbGFibGVNYWdpY01vY2sNCg0KICAgICAgICAgICAgaWYgc3BlYyBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICBfa3dhcmdzWydzcGVjJ10gPSBzcGVjDQogICAgICAgICAgICBpZiBzcGVjX3NldCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICBfa3dhcmdzWydzcGVjX3NldCddID0gc3BlY19zZXQNCg0KICAgICAgICAgICAgIyBhZGQgYSBuYW1lIHRvIG1vY2tzDQogICAgICAgICAgICBpZiAoaXNpbnN0YW5jZShLbGFzcywgdHlwZSkgYW5kDQogICAgICAgICAgICAgICAgaXNzdWJjbGFzcyhLbGFzcywgTm9uQ2FsbGFibGVNb2NrKSBhbmQgc2VsZi5hdHRyaWJ1dGUpOg0KICAgICAgICAgICAgICAgIF9rd2FyZ3NbJ25hbWUnXSA9IHNlbGYuYXR0cmlidXRlDQoNCiAgICAgICAgICAgIF9rd2FyZ3MudXBkYXRlKGt3YXJncykNCiAgICAgICAgICAgIG5ldyA9IEtsYXNzKCoqX2t3YXJncykNCg0KICAgICAgICAgICAgaWYgaW5oZXJpdCBhbmQgX2lzX2luc3RhbmNlX21vY2sobmV3KToNCiAgICAgICAgICAgICAgICAjIHdlIGNhbiBvbmx5IHRlbGwgaWYgdGhlIGluc3RhbmNlIHNob3VsZCBiZSBjYWxsYWJsZSBpZiB0aGUNCiAgICAgICAgICAgICAgICAjIHNwZWMgaXMgbm90IGEgbGlzdA0KICAgICAgICAgICAgICAgIHRoaXNfc3BlYyA9IHNwZWMNCiAgICAgICAgICAgICAgICBpZiBzcGVjX3NldCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgdGhpc19zcGVjID0gc3BlY19zZXQNCiAgICAgICAgICAgICAgICBpZiAobm90IF9pc19saXN0KHRoaXNfc3BlYykgYW5kIG5vdA0KICAgICAgICAgICAgICAgICAgICBfaW5zdGFuY2VfY2FsbGFibGUodGhpc19zcGVjKSk6DQogICAgICAgICAgICAgICAgICAgIEtsYXNzID0gTm9uQ2FsbGFibGVNYWdpY01vY2sNCg0KICAgICAgICAgICAgICAgIF9rd2FyZ3MucG9wKCduYW1lJykNCiAgICAgICAgICAgICAgICBuZXcucmV0dXJuX3ZhbHVlID0gS2xhc3MoX25ld19wYXJlbnQ9bmV3LCBfbmV3X25hbWU9JygpJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKipfa3dhcmdzKQ0KICAgICAgICBlbGlmIGF1dG9zcGVjIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgIyBzcGVjIGlzIGlnbm9yZWQsIG5ldyAqbXVzdCogYmUgZGVmYXVsdCwgc3BlY19zZXQgaXMgdHJlYXRlZA0KICAgICAgICAgICAgIyBhcyBhIGJvb2xlYW4uIFNob3VsZCB3ZSBjaGVjayBzcGVjIGlzIG5vdCBOb25lIGFuZCB0aGF0IHNwZWNfc2V0DQogICAgICAgICAgICAjIGlzIGEgYm9vbD8NCiAgICAgICAgICAgIGlmIG5ldyBpcyBub3QgREVGQVVMVDoNCiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoDQogICAgICAgICAgICAgICAgICAgICJhdXRvc3BlYyBjcmVhdGVzIHRoZSBtb2NrIGZvciB5b3UuIENhbid0IHNwZWNpZnkgIg0KICAgICAgICAgICAgICAgICAgICAiYXV0b3NwZWMgYW5kIG5ldy4iDQogICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgaWYgb3JpZ2luYWwgaXMgREVGQVVMVDoNCiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIkNhbid0IHVzZSAnYXV0b3NwZWMnIHdpdGggY3JlYXRlPVRydWUiKQ0KICAgICAgICAgICAgc3BlY19zZXQgPSBib29sKHNwZWNfc2V0KQ0KICAgICAgICAgICAgaWYgYXV0b3NwZWMgaXMgVHJ1ZToNCiAgICAgICAgICAgICAgICBhdXRvc3BlYyA9IG9yaWdpbmFsDQoNCiAgICAgICAgICAgIG5ldyA9IGNyZWF0ZV9hdXRvc3BlYyhhdXRvc3BlYywgc3BlY19zZXQ9c3BlY19zZXQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX25hbWU9c2VsZi5hdHRyaWJ1dGUsICoqa3dhcmdzKQ0KICAgICAgICBlbGlmIGt3YXJnczoNCiAgICAgICAgICAgICMgY2FuJ3Qgc2V0IGtleXdvcmQgYXJncyB3aGVuIHdlIGFyZW4ndCBjcmVhdGluZyB0aGUgbW9jaw0KICAgICAgICAgICAgIyBYWFhYIElmIG5ldyBpcyBhIE1vY2sgd2UgY291bGQgY2FsbCBuZXcuY29uZmlndXJlX21vY2soKiprd2FyZ3MpDQogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIkNhbid0IHBhc3Mga3dhcmdzIHRvIGEgbW9jayB3ZSBhcmVuJ3QgY3JlYXRpbmciKQ0KDQogICAgICAgIG5ld19hdHRyID0gbmV3DQoNCiAgICAgICAgc2VsZi50ZW1wX29yaWdpbmFsID0gb3JpZ2luYWwNCiAgICAgICAgc2VsZi5pc19sb2NhbCA9IGxvY2FsDQogICAgICAgIHNldGF0dHIoc2VsZi50YXJnZXQsIHNlbGYuYXR0cmlidXRlLCBuZXdfYXR0cikNCiAgICAgICAgaWYgc2VsZi5hdHRyaWJ1dGVfbmFtZSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV4dHJhX2FyZ3MgPSB7fQ0KICAgICAgICAgICAgaWYgc2VsZi5uZXcgaXMgREVGQVVMVDoNCiAgICAgICAgICAgICAgICBleHRyYV9hcmdzW3NlbGYuYXR0cmlidXRlX25hbWVdID0gIG5ldw0KICAgICAgICAgICAgZm9yIHBhdGNoaW5nIGluIHNlbGYuYWRkaXRpb25hbF9wYXRjaGVyczoNCiAgICAgICAgICAgICAgICBhcmcgPSBwYXRjaGluZy5fX2VudGVyX18oKQ0KICAgICAgICAgICAgICAgIGlmIHBhdGNoaW5nLm5ldyBpcyBERUZBVUxUOg0KICAgICAgICAgICAgICAgICAgICBleHRyYV9hcmdzLnVwZGF0ZShhcmcpDQogICAgICAgICAgICByZXR1cm4gZXh0cmFfYXJncw0KDQogICAgICAgIHJldHVybiBuZXcNCg0KDQogICAgZGVmIF9fZXhpdF9fKHNlbGYsICpleGNfaW5mbyk6DQogICAgICAgICIiIlVuZG8gdGhlIHBhdGNoLiIiIg0KICAgICAgICBpZiBub3QgX2lzX3N0YXJ0ZWQoc2VsZik6DQogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoJ3N0b3AgY2FsbGVkIG9uIHVuc3RhcnRlZCBwYXRjaGVyJykNCg0KICAgICAgICBpZiBzZWxmLmlzX2xvY2FsIGFuZCBzZWxmLnRlbXBfb3JpZ2luYWwgaXMgbm90IERFRkFVTFQ6DQogICAgICAgICAgICBzZXRhdHRyKHNlbGYudGFyZ2V0LCBzZWxmLmF0dHJpYnV0ZSwgc2VsZi50ZW1wX29yaWdpbmFsKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgZGVsYXR0cihzZWxmLnRhcmdldCwgc2VsZi5hdHRyaWJ1dGUpDQogICAgICAgICAgICBpZiBub3Qgc2VsZi5jcmVhdGUgYW5kIG5vdCBoYXNhdHRyKHNlbGYudGFyZ2V0LCBzZWxmLmF0dHJpYnV0ZSk6DQogICAgICAgICAgICAgICAgIyBuZWVkZWQgZm9yIHByb3h5IG9iamVjdHMgbGlrZSBkamFuZ28gc2V0dGluZ3MNCiAgICAgICAgICAgICAgICBzZXRhdHRyKHNlbGYudGFyZ2V0LCBzZWxmLmF0dHJpYnV0ZSwgc2VsZi50ZW1wX29yaWdpbmFsKQ0KDQogICAgICAgIGRlbCBzZWxmLnRlbXBfb3JpZ2luYWwNCiAgICAgICAgZGVsIHNlbGYuaXNfbG9jYWwNCiAgICAgICAgZGVsIHNlbGYudGFyZ2V0DQogICAgICAgIGZvciBwYXRjaGVyIGluIHJldmVyc2VkKHNlbGYuYWRkaXRpb25hbF9wYXRjaGVycyk6DQogICAgICAgICAgICBpZiBfaXNfc3RhcnRlZChwYXRjaGVyKToNCiAgICAgICAgICAgICAgICBwYXRjaGVyLl9fZXhpdF9fKCpleGNfaW5mbykNCg0KDQogICAgZGVmIHN0YXJ0KHNlbGYpOg0KICAgICAgICAiIiJBY3RpdmF0ZSBhIHBhdGNoLCByZXR1cm5pbmcgYW55IGNyZWF0ZWQgbW9jay4iIiINCiAgICAgICAgcmVzdWx0ID0gc2VsZi5fX2VudGVyX18oKQ0KICAgICAgICBzZWxmLl9hY3RpdmVfcGF0Y2hlcy5hZGQoc2VsZikNCiAgICAgICAgcmV0dXJuIHJlc3VsdA0KDQoNCiAgICBkZWYgc3RvcChzZWxmKToNCiAgICAgICAgIiIiU3RvcCBhbiBhY3RpdmUgcGF0Y2guIiIiDQogICAgICAgIHNlbGYuX2FjdGl2ZV9wYXRjaGVzLmRpc2NhcmQoc2VsZikNCiAgICAgICAgcmV0dXJuIHNlbGYuX19leGl0X18oKQ0KDQoNCg0KZGVmIF9nZXRfdGFyZ2V0KHRhcmdldCk6DQogICAgdHJ5Og0KICAgICAgICB0YXJnZXQsIGF0dHJpYnV0ZSA9IHRhcmdldC5yc3BsaXQoJy4nLCAxKQ0KICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBWYWx1ZUVycm9yKToNCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJOZWVkIGEgdmFsaWQgdGFyZ2V0IHRvIHBhdGNoLiBZb3Ugc3VwcGxpZWQ6ICVyIiAlDQogICAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0LCkpDQogICAgZ2V0dGVyID0gbGFtYmRhOiBfaW1wb3J0ZXIodGFyZ2V0KQ0KICAgIHJldHVybiBnZXR0ZXIsIGF0dHJpYnV0ZQ0KDQoNCmRlZiBfcGF0Y2hfb2JqZWN0KA0KICAgICAgICB0YXJnZXQsIGF0dHJpYnV0ZSwgbmV3PURFRkFVTFQsIHNwZWM9Tm9uZSwNCiAgICAgICAgY3JlYXRlPUZhbHNlLCBzcGVjX3NldD1Ob25lLCBhdXRvc3BlYz1Ob25lLA0KICAgICAgICBuZXdfY2FsbGFibGU9Tm9uZSwgKiprd2FyZ3MNCiAgICApOg0KICAgICIiIg0KICAgIHBhdGNoIHRoZSBuYW1lZCBtZW1iZXIgKGBhdHRyaWJ1dGVgKSBvbiBhbiBvYmplY3QgKGB0YXJnZXRgKSB3aXRoIGEgbW9jaw0KICAgIG9iamVjdC4NCg0KICAgIGBwYXRjaC5vYmplY3RgIGNhbiBiZSB1c2VkIGFzIGEgZGVjb3JhdG9yLCBjbGFzcyBkZWNvcmF0b3Igb3IgYSBjb250ZXh0DQogICAgbWFuYWdlci4gQXJndW1lbnRzIGBuZXdgLCBgc3BlY2AsIGBjcmVhdGVgLCBgc3BlY19zZXRgLA0KICAgIGBhdXRvc3BlY2AgYW5kIGBuZXdfY2FsbGFibGVgIGhhdmUgdGhlIHNhbWUgbWVhbmluZyBhcyBmb3IgYHBhdGNoYC4gTGlrZQ0KICAgIGBwYXRjaGAsIGBwYXRjaC5vYmplY3RgIHRha2VzIGFyYml0cmFyeSBrZXl3b3JkIGFyZ3VtZW50cyBmb3IgY29uZmlndXJpbmcNCiAgICB0aGUgbW9jayBvYmplY3QgaXQgY3JlYXRlcy4NCg0KICAgIFdoZW4gdXNlZCBhcyBhIGNsYXNzIGRlY29yYXRvciBgcGF0Y2gub2JqZWN0YCBob25vdXJzIGBwYXRjaC5URVNUX1BSRUZJWGANCiAgICBmb3IgY2hvb3Npbmcgd2hpY2ggbWV0aG9kcyB0byB3cmFwLg0KICAgICIiIg0KICAgIGdldHRlciA9IGxhbWJkYTogdGFyZ2V0DQogICAgcmV0dXJuIF9wYXRjaCgNCiAgICAgICAgZ2V0dGVyLCBhdHRyaWJ1dGUsIG5ldywgc3BlYywgY3JlYXRlLA0KICAgICAgICBzcGVjX3NldCwgYXV0b3NwZWMsIG5ld19jYWxsYWJsZSwga3dhcmdzDQogICAgKQ0KDQoNCmRlZiBfcGF0Y2hfbXVsdGlwbGUodGFyZ2V0LCBzcGVjPU5vbmUsIGNyZWF0ZT1GYWxzZSwgc3BlY19zZXQ9Tm9uZSwNCiAgICAgICAgICAgICAgICAgICAgYXV0b3NwZWM9Tm9uZSwgbmV3X2NhbGxhYmxlPU5vbmUsICoqa3dhcmdzKToNCiAgICAiIiJQZXJmb3JtIG11bHRpcGxlIHBhdGNoZXMgaW4gYSBzaW5nbGUgY2FsbC4gSXQgdGFrZXMgdGhlIG9iamVjdCB0byBiZQ0KICAgIHBhdGNoZWQgKGVpdGhlciBhcyBhbiBvYmplY3Qgb3IgYSBzdHJpbmcgdG8gZmV0Y2ggdGhlIG9iamVjdCBieSBpbXBvcnRpbmcpDQogICAgYW5kIGtleXdvcmQgYXJndW1lbnRzIGZvciB0aGUgcGF0Y2hlczo6DQoNCiAgICAgICAgd2l0aCBwYXRjaC5tdWx0aXBsZShzZXR0aW5ncywgRklSU1RfUEFUQ0g9J29uZScsIFNFQ09ORF9QQVRDSD0ndHdvJyk6DQogICAgICAgICAgICAuLi4NCg0KICAgIFVzZSBgREVGQVVMVGAgYXMgdGhlIHZhbHVlIGlmIHlvdSB3YW50IGBwYXRjaC5tdWx0aXBsZWAgdG8gY3JlYXRlDQogICAgbW9ja3MgZm9yIHlvdS4gSW4gdGhpcyBjYXNlIHRoZSBjcmVhdGVkIG1vY2tzIGFyZSBwYXNzZWQgaW50byBhIGRlY29yYXRlZA0KICAgIGZ1bmN0aW9uIGJ5IGtleXdvcmQsIGFuZCBhIGRpY3Rpb25hcnkgaXMgcmV0dXJuZWQgd2hlbiBgcGF0Y2gubXVsdGlwbGVgIGlzDQogICAgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlci4NCg0KICAgIGBwYXRjaC5tdWx0aXBsZWAgY2FuIGJlIHVzZWQgYXMgYSBkZWNvcmF0b3IsIGNsYXNzIGRlY29yYXRvciBvciBhIGNvbnRleHQNCiAgICBtYW5hZ2VyLiBUaGUgYXJndW1lbnRzIGBzcGVjYCwgYHNwZWNfc2V0YCwgYGNyZWF0ZWAsDQogICAgYGF1dG9zcGVjYCBhbmQgYG5ld19jYWxsYWJsZWAgaGF2ZSB0aGUgc2FtZSBtZWFuaW5nIGFzIGZvciBgcGF0Y2hgLiBUaGVzZQ0KICAgIGFyZ3VtZW50cyB3aWxsIGJlIGFwcGxpZWQgdG8gKmFsbCogcGF0Y2hlcyBkb25lIGJ5IGBwYXRjaC5tdWx0aXBsZWAuDQoNCiAgICBXaGVuIHVzZWQgYXMgYSBjbGFzcyBkZWNvcmF0b3IgYHBhdGNoLm11bHRpcGxlYCBob25vdXJzIGBwYXRjaC5URVNUX1BSRUZJWGANCiAgICBmb3IgY2hvb3Npbmcgd2hpY2ggbWV0aG9kcyB0byB3cmFwLg0KICAgICIiIg0KICAgIGlmIHR5cGUodGFyZ2V0KSBpcyBzdHI6DQogICAgICAgIGdldHRlciA9IGxhbWJkYTogX2ltcG9ydGVyKHRhcmdldCkNCiAgICBlbHNlOg0KICAgICAgICBnZXR0ZXIgPSBsYW1iZGE6IHRhcmdldA0KDQogICAgaWYgbm90IGt3YXJnczoNCiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigNCiAgICAgICAgICAgICdNdXN0IHN1cHBseSBhdCBsZWFzdCBvbmUga2V5d29yZCBhcmd1bWVudCB3aXRoIHBhdGNoLm11bHRpcGxlJw0KICAgICAgICApDQogICAgIyBuZWVkIHRvIHdyYXAgaW4gYSBsaXN0IGZvciBweXRob24gMywgd2hlcmUgaXRlbXMgaXMgYSB2aWV3DQogICAgaXRlbXMgPSBsaXN0KGt3YXJncy5pdGVtcygpKQ0KICAgIGF0dHJpYnV0ZSwgbmV3ID0gaXRlbXNbMF0NCiAgICBwYXRjaGVyID0gX3BhdGNoKA0KICAgICAgICBnZXR0ZXIsIGF0dHJpYnV0ZSwgbmV3LCBzcGVjLCBjcmVhdGUsIHNwZWNfc2V0LA0KICAgICAgICBhdXRvc3BlYywgbmV3X2NhbGxhYmxlLCB7fQ0KICAgICkNCiAgICBwYXRjaGVyLmF0dHJpYnV0ZV9uYW1lID0gYXR0cmlidXRlDQogICAgZm9yIGF0dHJpYnV0ZSwgbmV3IGluIGl0ZW1zWzE6XToNCiAgICAgICAgdGhpc19wYXRjaGVyID0gX3BhdGNoKA0KICAgICAgICAgICAgZ2V0dGVyLCBhdHRyaWJ1dGUsIG5ldywgc3BlYywgY3JlYXRlLCBzcGVjX3NldCwNCiAgICAgICAgICAgIGF1dG9zcGVjLCBuZXdfY2FsbGFibGUsIHt9DQogICAgICAgICkNCiAgICAgICAgdGhpc19wYXRjaGVyLmF0dHJpYnV0ZV9uYW1lID0gYXR0cmlidXRlDQogICAgICAgIHBhdGNoZXIuYWRkaXRpb25hbF9wYXRjaGVycy5hcHBlbmQodGhpc19wYXRjaGVyKQ0KICAgIHJldHVybiBwYXRjaGVyDQoNCg0KZGVmIHBhdGNoKA0KICAgICAgICB0YXJnZXQsIG5ldz1ERUZBVUxULCBzcGVjPU5vbmUsIGNyZWF0ZT1GYWxzZSwNCiAgICAgICAgc3BlY19zZXQ9Tm9uZSwgYXV0b3NwZWM9Tm9uZSwgbmV3X2NhbGxhYmxlPU5vbmUsICoqa3dhcmdzDQogICAgKToNCiAgICAiIiINCiAgICBgcGF0Y2hgIGFjdHMgYXMgYSBmdW5jdGlvbiBkZWNvcmF0b3IsIGNsYXNzIGRlY29yYXRvciBvciBhIGNvbnRleHQNCiAgICBtYW5hZ2VyLiBJbnNpZGUgdGhlIGJvZHkgb2YgdGhlIGZ1bmN0aW9uIG9yIHdpdGggc3RhdGVtZW50LCB0aGUgYHRhcmdldGANCiAgICBpcyBwYXRjaGVkIHdpdGggYSBgbmV3YCBvYmplY3QuIFdoZW4gdGhlIGZ1bmN0aW9uL3dpdGggc3RhdGVtZW50IGV4aXRzDQogICAgdGhlIHBhdGNoIGlzIHVuZG9uZS4NCg0KICAgIElmIGBuZXdgIGlzIG9taXR0ZWQsIHRoZW4gdGhlIHRhcmdldCBpcyByZXBsYWNlZCB3aXRoIGENCiAgICBgTWFnaWNNb2NrYC4gSWYgYHBhdGNoYCBpcyB1c2VkIGFzIGEgZGVjb3JhdG9yIGFuZCBgbmV3YCBpcw0KICAgIG9taXR0ZWQsIHRoZSBjcmVhdGVkIG1vY2sgaXMgcGFzc2VkIGluIGFzIGFuIGV4dHJhIGFyZ3VtZW50IHRvIHRoZQ0KICAgIGRlY29yYXRlZCBmdW5jdGlvbi4gSWYgYHBhdGNoYCBpcyB1c2VkIGFzIGEgY29udGV4dCBtYW5hZ2VyIHRoZSBjcmVhdGVkDQogICAgbW9jayBpcyByZXR1cm5lZCBieSB0aGUgY29udGV4dCBtYW5hZ2VyLg0KDQogICAgYHRhcmdldGAgc2hvdWxkIGJlIGEgc3RyaW5nIGluIHRoZSBmb3JtIGAncGFja2FnZS5tb2R1bGUuQ2xhc3NOYW1lJ2AuIFRoZQ0KICAgIGB0YXJnZXRgIGlzIGltcG9ydGVkIGFuZCB0aGUgc3BlY2lmaWVkIG9iamVjdCByZXBsYWNlZCB3aXRoIHRoZSBgbmV3YA0KICAgIG9iamVjdCwgc28gdGhlIGB0YXJnZXRgIG11c3QgYmUgaW1wb3J0YWJsZSBmcm9tIHRoZSBlbnZpcm9ubWVudCB5b3UgYXJlDQogICAgY2FsbGluZyBgcGF0Y2hgIGZyb20uIFRoZSB0YXJnZXQgaXMgaW1wb3J0ZWQgd2hlbiB0aGUgZGVjb3JhdGVkIGZ1bmN0aW9uDQogICAgaXMgZXhlY3V0ZWQsIG5vdCBhdCBkZWNvcmF0aW9uIHRpbWUuDQoNCiAgICBUaGUgYHNwZWNgIGFuZCBgc3BlY19zZXRgIGtleXdvcmQgYXJndW1lbnRzIGFyZSBwYXNzZWQgdG8gdGhlIGBNYWdpY01vY2tgDQogICAgaWYgcGF0Y2ggaXMgY3JlYXRpbmcgb25lIGZvciB5b3UuDQoNCiAgICBJbiBhZGRpdGlvbiB5b3UgY2FuIHBhc3MgYHNwZWM9VHJ1ZWAgb3IgYHNwZWNfc2V0PVRydWVgLCB3aGljaCBjYXVzZXMNCiAgICBwYXRjaCB0byBwYXNzIGluIHRoZSBvYmplY3QgYmVpbmcgbW9ja2VkIGFzIHRoZSBzcGVjL3NwZWNfc2V0IG9iamVjdC4NCg0KICAgIGBuZXdfY2FsbGFibGVgIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBhIGRpZmZlcmVudCBjbGFzcywgb3IgY2FsbGFibGUgb2JqZWN0LA0KICAgIHRoYXQgd2lsbCBiZSBjYWxsZWQgdG8gY3JlYXRlIHRoZSBgbmV3YCBvYmplY3QuIEJ5IGRlZmF1bHQgYE1hZ2ljTW9ja2AgaXMNCiAgICB1c2VkLg0KDQogICAgQSBtb3JlIHBvd2VyZnVsIGZvcm0gb2YgYHNwZWNgIGlzIGBhdXRvc3BlY2AuIElmIHlvdSBzZXQgYGF1dG9zcGVjPVRydWVgDQogICAgdGhlbiB0aGUgbW9jayB3aXRoIGJlIGNyZWF0ZWQgd2l0aCBhIHNwZWMgZnJvbSB0aGUgb2JqZWN0IGJlaW5nIHJlcGxhY2VkLg0KICAgIEFsbCBhdHRyaWJ1dGVzIG9mIHRoZSBtb2NrIHdpbGwgYWxzbyBoYXZlIHRoZSBzcGVjIG9mIHRoZSBjb3JyZXNwb25kaW5nDQogICAgYXR0cmlidXRlIG9mIHRoZSBvYmplY3QgYmVpbmcgcmVwbGFjZWQuIE1ldGhvZHMgYW5kIGZ1bmN0aW9ucyBiZWluZw0KICAgIG1vY2tlZCB3aWxsIGhhdmUgdGhlaXIgYXJndW1lbnRzIGNoZWNrZWQgYW5kIHdpbGwgcmFpc2UgYSBgVHlwZUVycm9yYCBpZg0KICAgIHRoZXkgYXJlIGNhbGxlZCB3aXRoIHRoZSB3cm9uZyBzaWduYXR1cmUuIEZvciBtb2NrcyByZXBsYWNpbmcgYSBjbGFzcywNCiAgICB0aGVpciByZXR1cm4gdmFsdWUgKHRoZSAnaW5zdGFuY2UnKSB3aWxsIGhhdmUgdGhlIHNhbWUgc3BlYyBhcyB0aGUgY2xhc3MuDQoNCiAgICBJbnN0ZWFkIG9mIGBhdXRvc3BlYz1UcnVlYCB5b3UgY2FuIHBhc3MgYGF1dG9zcGVjPXNvbWVfb2JqZWN0YCB0byB1c2UgYW4NCiAgICBhcmJpdHJhcnkgb2JqZWN0IGFzIHRoZSBzcGVjIGluc3RlYWQgb2YgdGhlIG9uZSBiZWluZyByZXBsYWNlZC4NCg0KICAgIEJ5IGRlZmF1bHQgYHBhdGNoYCB3aWxsIGZhaWwgdG8gcmVwbGFjZSBhdHRyaWJ1dGVzIHRoYXQgZG9uJ3QgZXhpc3QuIElmDQogICAgeW91IHBhc3MgaW4gYGNyZWF0ZT1UcnVlYCwgYW5kIHRoZSBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdCwgcGF0Y2ggd2lsbA0KICAgIGNyZWF0ZSB0aGUgYXR0cmlidXRlIGZvciB5b3Ugd2hlbiB0aGUgcGF0Y2hlZCBmdW5jdGlvbiBpcyBjYWxsZWQsIGFuZA0KICAgIGRlbGV0ZSBpdCBhZ2FpbiBhZnRlcndhcmRzLiBUaGlzIGlzIHVzZWZ1bCBmb3Igd3JpdGluZyB0ZXN0cyBhZ2FpbnN0DQogICAgYXR0cmlidXRlcyB0aGF0IHlvdXIgcHJvZHVjdGlvbiBjb2RlIGNyZWF0ZXMgYXQgcnVudGltZS4gSXQgaXMgb2ZmIGJ5IGJ5DQogICAgZGVmYXVsdCBiZWNhdXNlIGl0IGNhbiBiZSBkYW5nZXJvdXMuIFdpdGggaXQgc3dpdGNoZWQgb24geW91IGNhbiB3cml0ZQ0KICAgIHBhc3NpbmcgdGVzdHMgYWdhaW5zdCBBUElzIHRoYXQgZG9uJ3QgYWN0dWFsbHkgZXhpc3QhDQoNCiAgICBQYXRjaCBjYW4gYmUgdXNlZCBhcyBhIGBUZXN0Q2FzZWAgY2xhc3MgZGVjb3JhdG9yLiBJdCB3b3JrcyBieQ0KICAgIGRlY29yYXRpbmcgZWFjaCB0ZXN0IG1ldGhvZCBpbiB0aGUgY2xhc3MuIFRoaXMgcmVkdWNlcyB0aGUgYm9pbGVycGxhdGUNCiAgICBjb2RlIHdoZW4geW91ciB0ZXN0IG1ldGhvZHMgc2hhcmUgYSBjb21tb24gcGF0Y2hpbmdzIHNldC4gYHBhdGNoYCBmaW5kcw0KICAgIHRlc3RzIGJ5IGxvb2tpbmcgZm9yIG1ldGhvZCBuYW1lcyB0aGF0IHN0YXJ0IHdpdGggYHBhdGNoLlRFU1RfUFJFRklYYC4NCiAgICBCeSBkZWZhdWx0IHRoaXMgaXMgYHRlc3RgLCB3aGljaCBtYXRjaGVzIHRoZSB3YXkgYHVuaXR0ZXN0YCBmaW5kcyB0ZXN0cy4NCiAgICBZb3UgY2FuIHNwZWNpZnkgYW4gYWx0ZXJuYXRpdmUgcHJlZml4IGJ5IHNldHRpbmcgYHBhdGNoLlRFU1RfUFJFRklYYC4NCg0KICAgIFBhdGNoIGNhbiBiZSB1c2VkIGFzIGEgY29udGV4dCBtYW5hZ2VyLCB3aXRoIHRoZSB3aXRoIHN0YXRlbWVudC4gSGVyZSB0aGUNCiAgICBwYXRjaGluZyBhcHBsaWVzIHRvIHRoZSBpbmRlbnRlZCBibG9jayBhZnRlciB0aGUgd2l0aCBzdGF0ZW1lbnQuIElmIHlvdQ0KICAgIHVzZSAiYXMiIHRoZW4gdGhlIHBhdGNoZWQgb2JqZWN0IHdpbGwgYmUgYm91bmQgdG8gdGhlIG5hbWUgYWZ0ZXIgdGhlDQogICAgImFzIjsgdmVyeSB1c2VmdWwgaWYgYHBhdGNoYCBpcyBjcmVhdGluZyBhIG1vY2sgb2JqZWN0IGZvciB5b3UuDQoNCiAgICBgcGF0Y2hgIHRha2VzIGFyYml0cmFyeSBrZXl3b3JkIGFyZ3VtZW50cy4gVGhlc2Ugd2lsbCBiZSBwYXNzZWQgdG8NCiAgICB0aGUgYE1vY2tgIChvciBgbmV3X2NhbGxhYmxlYCkgb24gY29uc3RydWN0aW9uLg0KDQogICAgYHBhdGNoLmRpY3QoLi4uKWAsIGBwYXRjaC5tdWx0aXBsZSguLi4pYCBhbmQgYHBhdGNoLm9iamVjdCguLi4pYCBhcmUNCiAgICBhdmFpbGFibGUgZm9yIGFsdGVybmF0ZSB1c2UtY2FzZXMuDQogICAgIiIiDQogICAgZ2V0dGVyLCBhdHRyaWJ1dGUgPSBfZ2V0X3RhcmdldCh0YXJnZXQpDQogICAgcmV0dXJuIF9wYXRjaCgNCiAgICAgICAgZ2V0dGVyLCBhdHRyaWJ1dGUsIG5ldywgc3BlYywgY3JlYXRlLA0KICAgICAgICBzcGVjX3NldCwgYXV0b3NwZWMsIG5ld19jYWxsYWJsZSwga3dhcmdzDQogICAgKQ0KDQoNCmNsYXNzIF9wYXRjaF9kaWN0KG9iamVjdCk6DQogICAgIiIiDQogICAgUGF0Y2ggYSBkaWN0aW9uYXJ5LCBvciBkaWN0aW9uYXJ5IGxpa2Ugb2JqZWN0LCBhbmQgcmVzdG9yZSB0aGUgZGljdGlvbmFyeQ0KICAgIHRvIGl0cyBvcmlnaW5hbCBzdGF0ZSBhZnRlciB0aGUgdGVzdC4NCg0KICAgIGBpbl9kaWN0YCBjYW4gYmUgYSBkaWN0aW9uYXJ5IG9yIGEgbWFwcGluZyBsaWtlIGNvbnRhaW5lci4gSWYgaXQgaXMgYQ0KICAgIG1hcHBpbmcgdGhlbiBpdCBtdXN0IGF0IGxlYXN0IHN1cHBvcnQgZ2V0dGluZywgc2V0dGluZyBhbmQgZGVsZXRpbmcgaXRlbXMNCiAgICBwbHVzIGl0ZXJhdGluZyBvdmVyIGtleXMuDQoNCiAgICBgaW5fZGljdGAgY2FuIGFsc28gYmUgYSBzdHJpbmcgc3BlY2lmeWluZyB0aGUgbmFtZSBvZiB0aGUgZGljdGlvbmFyeSwgd2hpY2gNCiAgICB3aWxsIHRoZW4gYmUgZmV0Y2hlZCBieSBpbXBvcnRpbmcgaXQuDQoNCiAgICBgdmFsdWVzYCBjYW4gYmUgYSBkaWN0aW9uYXJ5IG9mIHZhbHVlcyB0byBzZXQgaW4gdGhlIGRpY3Rpb25hcnkuIGB2YWx1ZXNgDQogICAgY2FuIGFsc28gYmUgYW4gaXRlcmFibGUgb2YgYChrZXksIHZhbHVlKWAgcGFpcnMuDQoNCiAgICBJZiBgY2xlYXJgIGlzIFRydWUgdGhlbiB0aGUgZGljdGlvbmFyeSB3aWxsIGJlIGNsZWFyZWQgYmVmb3JlIHRoZSBuZXcNCiAgICB2YWx1ZXMgYXJlIHNldC4NCg0KICAgIGBwYXRjaC5kaWN0YCBjYW4gYWxzbyBiZSBjYWxsZWQgd2l0aCBhcmJpdHJhcnkga2V5d29yZCBhcmd1bWVudHMgdG8gc2V0DQogICAgdmFsdWVzIGluIHRoZSBkaWN0aW9uYXJ5OjoNCg0KICAgICAgICB3aXRoIHBhdGNoLmRpY3QoJ3N5cy5tb2R1bGVzJywgbXltb2R1bGU9TW9jaygpLCBvdGhlcl9tb2R1bGU9TW9jaygpKToNCiAgICAgICAgICAgIC4uLg0KDQogICAgYHBhdGNoLmRpY3RgIGNhbiBiZSB1c2VkIGFzIGEgY29udGV4dCBtYW5hZ2VyLCBkZWNvcmF0b3Igb3IgY2xhc3MNCiAgICBkZWNvcmF0b3IuIFdoZW4gdXNlZCBhcyBhIGNsYXNzIGRlY29yYXRvciBgcGF0Y2guZGljdGAgaG9ub3Vycw0KICAgIGBwYXRjaC5URVNUX1BSRUZJWGAgZm9yIGNob29zaW5nIHdoaWNoIG1ldGhvZHMgdG8gd3JhcC4NCiAgICAiIiINCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpbl9kaWN0LCB2YWx1ZXM9KCksIGNsZWFyPUZhbHNlLCAqKmt3YXJncyk6DQogICAgICAgIGlmIGlzaW5zdGFuY2UoaW5fZGljdCwgc3RyKToNCiAgICAgICAgICAgIGluX2RpY3QgPSBfaW1wb3J0ZXIoaW5fZGljdCkNCiAgICAgICAgc2VsZi5pbl9kaWN0ID0gaW5fZGljdA0KICAgICAgICAjIHN1cHBvcnQgYW55IGFyZ3VtZW50IHN1cHBvcnRlZCBieSBkaWN0KC4uLikgY29uc3RydWN0b3INCiAgICAgICAgc2VsZi52YWx1ZXMgPSBkaWN0KHZhbHVlcykNCiAgICAgICAgc2VsZi52YWx1ZXMudXBkYXRlKGt3YXJncykNCiAgICAgICAgc2VsZi5jbGVhciA9IGNsZWFyDQogICAgICAgIHNlbGYuX29yaWdpbmFsID0gTm9uZQ0KDQoNCiAgICBkZWYgX19jYWxsX18oc2VsZiwgZik6DQogICAgICAgIGlmIGlzaW5zdGFuY2UoZiwgdHlwZSk6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5kZWNvcmF0ZV9jbGFzcyhmKQ0KICAgICAgICBAd3JhcHMoZikNCiAgICAgICAgZGVmIF9pbm5lcigqYXJncywgKiprdyk6DQogICAgICAgICAgICBzZWxmLl9wYXRjaF9kaWN0KCkNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXR1cm4gZigqYXJncywgKiprdykNCiAgICAgICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICAgICAgc2VsZi5fdW5wYXRjaF9kaWN0KCkNCg0KICAgICAgICByZXR1cm4gX2lubmVyDQoNCg0KICAgIGRlZiBkZWNvcmF0ZV9jbGFzcyhzZWxmLCBrbGFzcyk6DQogICAgICAgIGZvciBhdHRyIGluIGRpcihrbGFzcyk6DQogICAgICAgICAgICBhdHRyX3ZhbHVlID0gZ2V0YXR0cihrbGFzcywgYXR0cikNCiAgICAgICAgICAgIGlmIChhdHRyLnN0YXJ0c3dpdGgocGF0Y2guVEVTVF9QUkVGSVgpIGFuZA0KICAgICAgICAgICAgICAgICBoYXNhdHRyKGF0dHJfdmFsdWUsICJfX2NhbGxfXyIpKToNCiAgICAgICAgICAgICAgICBkZWNvcmF0b3IgPSBfcGF0Y2hfZGljdChzZWxmLmluX2RpY3QsIHNlbGYudmFsdWVzLCBzZWxmLmNsZWFyKQ0KICAgICAgICAgICAgICAgIGRlY29yYXRlZCA9IGRlY29yYXRvcihhdHRyX3ZhbHVlKQ0KICAgICAgICAgICAgICAgIHNldGF0dHIoa2xhc3MsIGF0dHIsIGRlY29yYXRlZCkNCiAgICAgICAgcmV0dXJuIGtsYXNzDQoNCg0KICAgIGRlZiBfX2VudGVyX18oc2VsZik6DQogICAgICAgICIiIlBhdGNoIHRoZSBkaWN0LiIiIg0KICAgICAgICBzZWxmLl9wYXRjaF9kaWN0KCkNCg0KDQogICAgZGVmIF9wYXRjaF9kaWN0KHNlbGYpOg0KICAgICAgICB2YWx1ZXMgPSBzZWxmLnZhbHVlcw0KICAgICAgICBpbl9kaWN0ID0gc2VsZi5pbl9kaWN0DQogICAgICAgIGNsZWFyID0gc2VsZi5jbGVhcg0KDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIG9yaWdpbmFsID0gaW5fZGljdC5jb3B5KCkNCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOg0KICAgICAgICAgICAgIyBkaWN0IGxpa2Ugb2JqZWN0IHdpdGggbm8gY29weSBtZXRob2QNCiAgICAgICAgICAgICMgbXVzdCBzdXBwb3J0IGl0ZXJhdGlvbiBvdmVyIGtleXMNCiAgICAgICAgICAgIG9yaWdpbmFsID0ge30NCiAgICAgICAgICAgIGZvciBrZXkgaW4gaW5fZGljdDoNCiAgICAgICAgICAgICAgICBvcmlnaW5hbFtrZXldID0gaW5fZGljdFtrZXldDQogICAgICAgIHNlbGYuX29yaWdpbmFsID0gb3JpZ2luYWwNCg0KICAgICAgICBpZiBjbGVhcjoNCiAgICAgICAgICAgIF9jbGVhcl9kaWN0KGluX2RpY3QpDQoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaW5fZGljdC51cGRhdGUodmFsdWVzKQ0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICAjIGRpY3QgbGlrZSBvYmplY3Qgd2l0aCBubyB1cGRhdGUgbWV0aG9kDQogICAgICAgICAgICBmb3Iga2V5IGluIHZhbHVlczoNCiAgICAgICAgICAgICAgICBpbl9kaWN0W2tleV0gPSB2YWx1ZXNba2V5XQ0KDQoNCiAgICBkZWYgX3VucGF0Y2hfZGljdChzZWxmKToNCiAgICAgICAgaW5fZGljdCA9IHNlbGYuaW5fZGljdA0KICAgICAgICBvcmlnaW5hbCA9IHNlbGYuX29yaWdpbmFsDQoNCiAgICAgICAgX2NsZWFyX2RpY3QoaW5fZGljdCkNCg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpbl9kaWN0LnVwZGF0ZShvcmlnaW5hbCkNCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOg0KICAgICAgICAgICAgZm9yIGtleSBpbiBvcmlnaW5hbDoNCiAgICAgICAgICAgICAgICBpbl9kaWN0W2tleV0gPSBvcmlnaW5hbFtrZXldDQoNCg0KICAgIGRlZiBfX2V4aXRfXyhzZWxmLCAqYXJncyk6DQogICAgICAgICIiIlVucGF0Y2ggdGhlIGRpY3QuIiIiDQogICAgICAgIHNlbGYuX3VucGF0Y2hfZGljdCgpDQogICAgICAgIHJldHVybiBGYWxzZQ0KDQogICAgc3RhcnQgPSBfX2VudGVyX18NCiAgICBzdG9wID0gX19leGl0X18NCg0KDQpkZWYgX2NsZWFyX2RpY3QoaW5fZGljdCk6DQogICAgdHJ5Og0KICAgICAgICBpbl9kaWN0LmNsZWFyKCkNCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgIGtleXMgPSBsaXN0KGluX2RpY3QpDQogICAgICAgIGZvciBrZXkgaW4ga2V5czoNCiAgICAgICAgICAgIGRlbCBpbl9kaWN0W2tleV0NCg0KDQpkZWYgX3BhdGNoX3N0b3BhbGwoKToNCiAgICAiIiJTdG9wIGFsbCBhY3RpdmUgcGF0Y2hlcy4iIiINCiAgICBmb3IgcGF0Y2ggaW4gbGlzdChfcGF0Y2guX2FjdGl2ZV9wYXRjaGVzKToNCiAgICAgICAgcGF0Y2guc3RvcCgpDQoNCg0KcGF0Y2gub2JqZWN0ID0gX3BhdGNoX29iamVjdA0KcGF0Y2guZGljdCA9IF9wYXRjaF9kaWN0DQpwYXRjaC5tdWx0aXBsZSA9IF9wYXRjaF9tdWx0aXBsZQ0KcGF0Y2guc3RvcGFsbCA9IF9wYXRjaF9zdG9wYWxsDQpwYXRjaC5URVNUX1BSRUZJWCA9ICd0ZXN0Jw0KDQptYWdpY19tZXRob2RzID0gKA0KICAgICJsdCBsZSBndCBnZSBlcSBuZSAiDQogICAgImdldGl0ZW0gc2V0aXRlbSBkZWxpdGVtICINCiAgICAibGVuIGNvbnRhaW5zIGl0ZXIgIg0KICAgICJoYXNoIHN0ciBzaXplb2YgIg0KICAgICJlbnRlciBleGl0ICINCiAgICAiZGl2bW9kIG5lZyBwb3MgYWJzIGludmVydCAiDQogICAgImNvbXBsZXggaW50IGZsb2F0IGluZGV4ICINCiAgICAidHJ1bmMgZmxvb3IgY2VpbCAiDQogICAgImJvb2wgbmV4dCAiDQopDQoNCm51bWVyaWNzID0gImFkZCBzdWIgbXVsIGRpdiBmbG9vcmRpdiBtb2QgbHNoaWZ0IHJzaGlmdCBhbmQgeG9yIG9yIHBvdyAiDQppbnBsYWNlID0gJyAnLmpvaW4oJ2klcycgJSBuIGZvciBuIGluIG51bWVyaWNzLnNwbGl0KCkpDQpyaWdodCA9ICcgJy5qb2luKCdyJXMnICUgbiBmb3IgbiBpbiBudW1lcmljcy5zcGxpdCgpKQ0KDQojIG5vdCBpbmNsdWRpbmcgX19wcmVwYXJlX18sIF9faW5zdGFuY2VjaGVja19fLCBfX3N1YmNsYXNzY2hlY2tfXw0KIyAoYXMgdGhleSBhcmUgbWV0YWNsYXNzIG1ldGhvZHMpDQojIF9fZGVsX18gaXMgbm90IHN1cHBvcnRlZCBhdCBhbGwgYXMgaXQgY2F1c2VzIHByb2JsZW1zIGlmIGl0IGV4aXN0cw0KDQpfbm9uX2RlZmF1bHRzID0gc2V0KCdfXyVzX18nICUgbWV0aG9kIGZvciBtZXRob2QgaW4gWw0KICAgICdnZXQnLCAnc2V0JywgJ2RlbGV0ZScsICdyZXZlcnNlZCcsICdtaXNzaW5nJywgJ3JlZHVjZScsICdyZWR1Y2VfZXgnLA0KICAgICdnZXRpbml0YXJncycsICdnZXRuZXdhcmdzJywgJ2dldHN0YXRlJywgJ3NldHN0YXRlJywgJ2dldGZvcm1hdCcsDQogICAgJ3NldGZvcm1hdCcsICdyZXByJywgJ2RpcicsICdzdWJjbGFzc2VzJywgJ2Zvcm1hdCcsDQpdKQ0KDQoNCmRlZiBfZ2V0X21ldGhvZChuYW1lLCBmdW5jKToNCiAgICAiVHVybnMgYSBjYWxsYWJsZSBvYmplY3QgKGxpa2UgYSBtb2NrKSBpbnRvIGEgcmVhbCBmdW5jdGlvbiINCiAgICBkZWYgbWV0aG9kKHNlbGYsICphcmdzLCAqKmt3KToNCiAgICAgICAgcmV0dXJuIGZ1bmMoc2VsZiwgKmFyZ3MsICoqa3cpDQogICAgbWV0aG9kLl9fbmFtZV9fID0gbmFtZQ0KICAgIHJldHVybiBtZXRob2QNCg0KDQpfbWFnaWNzID0gc2V0KA0KICAgICdfXyVzX18nICUgbWV0aG9kIGZvciBtZXRob2QgaW4NCiAgICAnICcuam9pbihbbWFnaWNfbWV0aG9kcywgbnVtZXJpY3MsIGlucGxhY2UsIHJpZ2h0XSkuc3BsaXQoKQ0KKQ0KDQpfYWxsX21hZ2ljcyA9IF9tYWdpY3MgfCBfbm9uX2RlZmF1bHRzDQoNCl91bnN1cHBvcnRlZF9tYWdpY3MgPSBzZXQoWw0KICAgICdfX2dldGF0dHJfXycsICdfX3NldGF0dHJfXycsDQogICAgJ19faW5pdF9fJywgJ19fbmV3X18nLCAnX19wcmVwYXJlX18nDQogICAgJ19faW5zdGFuY2VjaGVja19fJywgJ19fc3ViY2xhc3NjaGVja19fJywNCiAgICAnX19kZWxfXycNCl0pDQoNCl9jYWxjdWxhdGVfcmV0dXJuX3ZhbHVlID0gew0KICAgICdfX2hhc2hfXyc6IGxhbWJkYSBzZWxmOiBvYmplY3QuX19oYXNoX18oc2VsZiksDQogICAgJ19fc3RyX18nOiBsYW1iZGEgc2VsZjogb2JqZWN0Ll9fc3RyX18oc2VsZiksDQogICAgJ19fc2l6ZW9mX18nOiBsYW1iZGEgc2VsZjogb2JqZWN0Ll9fc2l6ZW9mX18oc2VsZiksDQp9DQoNCl9yZXR1cm5fdmFsdWVzID0gew0KICAgICdfX2x0X18nOiBOb3RJbXBsZW1lbnRlZCwNCiAgICAnX19ndF9fJzogTm90SW1wbGVtZW50ZWQsDQogICAgJ19fbGVfXyc6IE5vdEltcGxlbWVudGVkLA0KICAgICdfX2dlX18nOiBOb3RJbXBsZW1lbnRlZCwNCiAgICAnX19pbnRfXyc6IDEsDQogICAgJ19fY29udGFpbnNfXyc6IEZhbHNlLA0KICAgICdfX2xlbl9fJzogMCwNCiAgICAnX19leGl0X18nOiBGYWxzZSwNCiAgICAnX19jb21wbGV4X18nOiAxaiwNCiAgICAnX19mbG9hdF9fJzogMS4wLA0KICAgICdfX2Jvb2xfXyc6IFRydWUsDQogICAgJ19faW5kZXhfXyc6IDEsDQp9DQoNCg0KZGVmIF9nZXRfZXEoc2VsZik6DQogICAgZGVmIF9fZXFfXyhvdGhlcik6DQogICAgICAgIHJldF92YWwgPSBzZWxmLl9fZXFfXy5fbW9ja19yZXR1cm5fdmFsdWUNCiAgICAgICAgaWYgcmV0X3ZhbCBpcyBub3QgREVGQVVMVDoNCiAgICAgICAgICAgIHJldHVybiByZXRfdmFsDQogICAgICAgIHJldHVybiBzZWxmIGlzIG90aGVyDQogICAgcmV0dXJuIF9fZXFfXw0KDQpkZWYgX2dldF9uZShzZWxmKToNCiAgICBkZWYgX19uZV9fKG90aGVyKToNCiAgICAgICAgaWYgc2VsZi5fX25lX18uX21vY2tfcmV0dXJuX3ZhbHVlIGlzIG5vdCBERUZBVUxUOg0KICAgICAgICAgICAgcmV0dXJuIERFRkFVTFQNCiAgICAgICAgcmV0dXJuIHNlbGYgaXMgbm90IG90aGVyDQogICAgcmV0dXJuIF9fbmVfXw0KDQpkZWYgX2dldF9pdGVyKHNlbGYpOg0KICAgIGRlZiBfX2l0ZXJfXygpOg0KICAgICAgICByZXRfdmFsID0gc2VsZi5fX2l0ZXJfXy5fbW9ja19yZXR1cm5fdmFsdWUNCiAgICAgICAgaWYgcmV0X3ZhbCBpcyBERUZBVUxUOg0KICAgICAgICAgICAgcmV0dXJuIGl0ZXIoW10pDQogICAgICAgICMgaWYgcmV0X3ZhbCB3YXMgYWxyZWFkeSBhbiBpdGVyYXRvciwgdGhlbiBjYWxsaW5nIGl0ZXIgb24gaXQgc2hvdWxkDQogICAgICAgICMgcmV0dXJuIHRoZSBpdGVyYXRvciB1bmNoYW5nZWQNCiAgICAgICAgcmV0dXJuIGl0ZXIocmV0X3ZhbCkNCiAgICByZXR1cm4gX19pdGVyX18NCg0KX3NpZGVfZWZmZWN0X21ldGhvZHMgPSB7DQogICAgJ19fZXFfXyc6IF9nZXRfZXEsDQogICAgJ19fbmVfXyc6IF9nZXRfbmUsDQogICAgJ19faXRlcl9fJzogX2dldF9pdGVyLA0KfQ0KDQoNCg0KZGVmIF9zZXRfcmV0dXJuX3ZhbHVlKG1vY2ssIG1ldGhvZCwgbmFtZSk6DQogICAgZml4ZWQgPSBfcmV0dXJuX3ZhbHVlcy5nZXQobmFtZSwgREVGQVVMVCkNCiAgICBpZiBmaXhlZCBpcyBub3QgREVGQVVMVDoNCiAgICAgICAgbWV0aG9kLnJldHVybl92YWx1ZSA9IGZpeGVkDQogICAgICAgIHJldHVybg0KDQogICAgcmV0dXJuX2NhbHVsYXRvciA9IF9jYWxjdWxhdGVfcmV0dXJuX3ZhbHVlLmdldChuYW1lKQ0KICAgIGlmIHJldHVybl9jYWx1bGF0b3IgaXMgbm90IE5vbmU6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHJldHVybl92YWx1ZSA9IHJldHVybl9jYWx1bGF0b3IobW9jaykNCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOg0KICAgICAgICAgICAgIyBYWFhYIHdoeSBkbyB3ZSByZXR1cm4gQXR0cmlidXRlRXJyb3IgaGVyZT8NCiAgICAgICAgICAgICMgICAgICBzZXQgaXQgYXMgYSBzaWRlX2VmZmVjdCBpbnN0ZWFkPw0KICAgICAgICAgICAgcmV0dXJuX3ZhbHVlID0gQXR0cmlidXRlRXJyb3IobmFtZSkNCiAgICAgICAgbWV0aG9kLnJldHVybl92YWx1ZSA9IHJldHVybl92YWx1ZQ0KICAgICAgICByZXR1cm4NCg0KICAgIHNpZGVfZWZmZWN0b3IgPSBfc2lkZV9lZmZlY3RfbWV0aG9kcy5nZXQobmFtZSkNCiAgICBpZiBzaWRlX2VmZmVjdG9yIGlzIG5vdCBOb25lOg0KICAgICAgICBtZXRob2Quc2lkZV9lZmZlY3QgPSBzaWRlX2VmZmVjdG9yKG1vY2spDQoNCg0KDQpjbGFzcyBNYWdpY01peGluKG9iamVjdCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3KToNCiAgICAgICAgX3NhZmVfc3VwZXIoTWFnaWNNaXhpbiwgc2VsZikuX19pbml0X18oKmFyZ3MsICoqa3cpDQogICAgICAgIHNlbGYuX21vY2tfc2V0X21hZ2ljcygpDQoNCg0KICAgIGRlZiBfbW9ja19zZXRfbWFnaWNzKHNlbGYpOg0KICAgICAgICB0aGVzZV9tYWdpY3MgPSBfbWFnaWNzDQoNCiAgICAgICAgaWYgc2VsZi5fbW9ja19tZXRob2RzIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgdGhlc2VfbWFnaWNzID0gX21hZ2ljcy5pbnRlcnNlY3Rpb24oc2VsZi5fbW9ja19tZXRob2RzKQ0KDQogICAgICAgICAgICByZW1vdmVfbWFnaWNzID0gc2V0KCkNCiAgICAgICAgICAgIHJlbW92ZV9tYWdpY3MgPSBfbWFnaWNzIC0gdGhlc2VfbWFnaWNzDQoNCiAgICAgICAgICAgIGZvciBlbnRyeSBpbiByZW1vdmVfbWFnaWNzOg0KICAgICAgICAgICAgICAgIGlmIGVudHJ5IGluIHR5cGUoc2VsZikuX19kaWN0X186DQogICAgICAgICAgICAgICAgICAgICMgcmVtb3ZlIHVubmVlZGVkIG1hZ2ljIG1ldGhvZHMNCiAgICAgICAgICAgICAgICAgICAgZGVsYXR0cihzZWxmLCBlbnRyeSkNCg0KICAgICAgICAjIGRvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBhdHRyaWJ1dGVzIGlmIGNhbGxlZCBhIHNlY29uZCB0aW1lDQogICAgICAgIHRoZXNlX21hZ2ljcyA9IHRoZXNlX21hZ2ljcyAtIHNldCh0eXBlKHNlbGYpLl9fZGljdF9fKQ0KDQogICAgICAgIF90eXBlID0gdHlwZShzZWxmKQ0KICAgICAgICBmb3IgZW50cnkgaW4gdGhlc2VfbWFnaWNzOg0KICAgICAgICAgICAgc2V0YXR0cihfdHlwZSwgZW50cnksIE1hZ2ljUHJveHkoZW50cnksIHNlbGYpKQ0KDQoNCg0KY2xhc3MgTm9uQ2FsbGFibGVNYWdpY01vY2soTWFnaWNNaXhpbiwgTm9uQ2FsbGFibGVNb2NrKToNCiAgICAiIiJBIHZlcnNpb24gb2YgYE1hZ2ljTW9ja2AgdGhhdCBpc24ndCBjYWxsYWJsZS4iIiINCiAgICBkZWYgbW9ja19hZGRfc3BlYyhzZWxmLCBzcGVjLCBzcGVjX3NldD1GYWxzZSk6DQogICAgICAgICIiIkFkZCBhIHNwZWMgdG8gYSBtb2NrLiBgc3BlY2AgY2FuIGVpdGhlciBiZSBhbiBvYmplY3Qgb3IgYQ0KICAgICAgICBsaXN0IG9mIHN0cmluZ3MuIE9ubHkgYXR0cmlidXRlcyBvbiB0aGUgYHNwZWNgIGNhbiBiZSBmZXRjaGVkIGFzDQogICAgICAgIGF0dHJpYnV0ZXMgZnJvbSB0aGUgbW9jay4NCg0KICAgICAgICBJZiBgc3BlY19zZXRgIGlzIFRydWUgdGhlbiBvbmx5IGF0dHJpYnV0ZXMgb24gdGhlIHNwZWMgY2FuIGJlIHNldC4iIiINCiAgICAgICAgc2VsZi5fbW9ja19hZGRfc3BlYyhzcGVjLCBzcGVjX3NldCkNCiAgICAgICAgc2VsZi5fbW9ja19zZXRfbWFnaWNzKCkNCg0KDQoNCmNsYXNzIE1hZ2ljTW9jayhNYWdpY01peGluLCBNb2NrKToNCiAgICAiIiINCiAgICBNYWdpY01vY2sgaXMgYSBzdWJjbGFzcyBvZiBNb2NrIHdpdGggZGVmYXVsdCBpbXBsZW1lbnRhdGlvbnMNCiAgICBvZiBtb3N0IG9mIHRoZSBtYWdpYyBtZXRob2RzLiBZb3UgY2FuIHVzZSBNYWdpY01vY2sgd2l0aG91dCBoYXZpbmcgdG8NCiAgICBjb25maWd1cmUgdGhlIG1hZ2ljIG1ldGhvZHMgeW91cnNlbGYuDQoNCiAgICBJZiB5b3UgdXNlIHRoZSBgc3BlY2Agb3IgYHNwZWNfc2V0YCBhcmd1bWVudHMgdGhlbiAqb25seSogbWFnaWMNCiAgICBtZXRob2RzIHRoYXQgZXhpc3QgaW4gdGhlIHNwZWMgd2lsbCBiZSBjcmVhdGVkLg0KDQogICAgQXR0cmlidXRlcyBhbmQgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGBNYWdpY01vY2tgIHdpbGwgYWxzbyBiZSBgTWFnaWNNb2Nrc2AuDQogICAgIiIiDQogICAgZGVmIG1vY2tfYWRkX3NwZWMoc2VsZiwgc3BlYywgc3BlY19zZXQ9RmFsc2UpOg0KICAgICAgICAiIiJBZGQgYSBzcGVjIHRvIGEgbW9jay4gYHNwZWNgIGNhbiBlaXRoZXIgYmUgYW4gb2JqZWN0IG9yIGENCiAgICAgICAgbGlzdCBvZiBzdHJpbmdzLiBPbmx5IGF0dHJpYnV0ZXMgb24gdGhlIGBzcGVjYCBjYW4gYmUgZmV0Y2hlZCBhcw0KICAgICAgICBhdHRyaWJ1dGVzIGZyb20gdGhlIG1vY2suDQoNCiAgICAgICAgSWYgYHNwZWNfc2V0YCBpcyBUcnVlIHRoZW4gb25seSBhdHRyaWJ1dGVzIG9uIHRoZSBzcGVjIGNhbiBiZSBzZXQuIiIiDQogICAgICAgIHNlbGYuX21vY2tfYWRkX3NwZWMoc3BlYywgc3BlY19zZXQpDQogICAgICAgIHNlbGYuX21vY2tfc2V0X21hZ2ljcygpDQoNCg0KDQpjbGFzcyBNYWdpY1Byb3h5KG9iamVjdCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUsIHBhcmVudCk6DQogICAgICAgIHNlbGYubmFtZSA9IG5hbWUNCiAgICAgICAgc2VsZi5wYXJlbnQgPSBwYXJlbnQNCg0KICAgIGRlZiBfX2NhbGxfXyhzZWxmLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICBtID0gc2VsZi5jcmVhdGVfbW9jaygpDQogICAgICAgIHJldHVybiBtKCphcmdzLCAqKmt3YXJncykNCg0KICAgIGRlZiBjcmVhdGVfbW9jayhzZWxmKToNCiAgICAgICAgZW50cnkgPSBzZWxmLm5hbWUNCiAgICAgICAgcGFyZW50ID0gc2VsZi5wYXJlbnQNCiAgICAgICAgbSA9IHBhcmVudC5fZ2V0X2NoaWxkX21vY2sobmFtZT1lbnRyeSwgX25ld19uYW1lPWVudHJ5LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbmV3X3BhcmVudD1wYXJlbnQpDQogICAgICAgIHNldGF0dHIocGFyZW50LCBlbnRyeSwgbSkNCiAgICAgICAgX3NldF9yZXR1cm5fdmFsdWUocGFyZW50LCBtLCBlbnRyeSkNCiAgICAgICAgcmV0dXJuIG0NCg0KICAgIGRlZiBfX2dldF9fKHNlbGYsIG9iaiwgX3R5cGU9Tm9uZSk6DQogICAgICAgIHJldHVybiBzZWxmLmNyZWF0ZV9tb2NrKCkNCg0KDQoNCmNsYXNzIF9BTlkob2JqZWN0KToNCiAgICAiQSBoZWxwZXIgb2JqZWN0IHRoYXQgY29tcGFyZXMgZXF1YWwgdG8gZXZlcnl0aGluZy4iDQoNCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToNCiAgICAgICAgcmV0dXJuIFRydWUNCg0KICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOg0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KICAgIGRlZiBfX3JlcHJfXyhzZWxmKToNCiAgICAgICAgcmV0dXJuICc8QU5ZPicNCg0KQU5ZID0gX0FOWSgpDQoNCg0KDQpkZWYgX2Zvcm1hdF9jYWxsX3NpZ25hdHVyZShuYW1lLCBhcmdzLCBrd2FyZ3MpOg0KICAgIG1lc3NhZ2UgPSAnJXMoJSVzKScgJSBuYW1lDQogICAgZm9ybWF0dGVkX2FyZ3MgPSAnJw0KICAgIGFyZ3Nfc3RyaW5nID0gJywgJy5qb2luKFtyZXByKGFyZykgZm9yIGFyZyBpbiBhcmdzXSkNCiAgICBrd2FyZ3Nfc3RyaW5nID0gJywgJy5qb2luKFsNCiAgICAgICAgJyVzPSVyJyAlIChrZXksIHZhbHVlKSBmb3Iga2V5LCB2YWx1ZSBpbiBrd2FyZ3MuaXRlbXMoKQ0KICAgIF0pDQogICAgaWYgYXJnc19zdHJpbmc6DQogICAgICAgIGZvcm1hdHRlZF9hcmdzID0gYXJnc19zdHJpbmcNCiAgICBpZiBrd2FyZ3Nfc3RyaW5nOg0KICAgICAgICBpZiBmb3JtYXR0ZWRfYXJnczoNCiAgICAgICAgICAgIGZvcm1hdHRlZF9hcmdzICs9ICcsICcNCiAgICAgICAgZm9ybWF0dGVkX2FyZ3MgKz0ga3dhcmdzX3N0cmluZw0KDQogICAgcmV0dXJuIG1lc3NhZ2UgJSBmb3JtYXR0ZWRfYXJncw0KDQoNCg0KY2xhc3MgX0NhbGwodHVwbGUpOg0KICAgICIiIg0KICAgIEEgdHVwbGUgZm9yIGhvbGRpbmcgdGhlIHJlc3VsdHMgb2YgYSBjYWxsIHRvIGEgbW9jaywgZWl0aGVyIGluIHRoZSBmb3JtDQogICAgYChhcmdzLCBrd2FyZ3MpYCBvciBgKG5hbWUsIGFyZ3MsIGt3YXJncylgLg0KDQogICAgSWYgYXJncyBvciBrd2FyZ3MgYXJlIGVtcHR5IHRoZW4gYSBjYWxsIHR1cGxlIHdpbGwgY29tcGFyZSBlcXVhbCB0bw0KICAgIGEgdHVwbGUgd2l0aG91dCB0aG9zZSB2YWx1ZXMuIFRoaXMgbWFrZXMgY29tcGFyaXNvbnMgbGVzcyB2ZXJib3NlOjoNCg0KICAgICAgICBfQ2FsbCgoJ25hbWUnLCAoKSwge30pKSA9PSAoJ25hbWUnLCkNCiAgICAgICAgX0NhbGwoKCduYW1lJywgKDEsKSwge30pKSA9PSAoJ25hbWUnLCAoMSwpKQ0KICAgICAgICBfQ2FsbCgoKCksIHsnYSc6ICdiJ30pKSA9PSAoeydhJzogJ2InfSwpDQoNCiAgICBUaGUgYF9DYWxsYCBvYmplY3QgcHJvdmlkZXMgYSB1c2VmdWwgc2hvcnRjdXQgZm9yIGNvbXBhcmluZyB3aXRoIGNhbGw6Og0KDQogICAgICAgIF9DYWxsKCgoMSwgMiksIHsnYSc6IDN9KSkgPT0gY2FsbCgxLCAyLCBhPTMpDQogICAgICAgIF9DYWxsKCgnZm9vJywgKDEsIDIpLCB7J2EnOiAzfSkpID09IGNhbGwuZm9vKDEsIDIsIGE9MykNCg0KICAgIElmIHRoZSBfQ2FsbCBoYXMgbm8gbmFtZSB0aGVuIGl0IHdpbGwgbWF0Y2ggYW55IG5hbWUuDQogICAgIiIiDQogICAgZGVmIF9fbmV3X18oY2xzLCB2YWx1ZT0oKSwgbmFtZT1Ob25lLCBwYXJlbnQ9Tm9uZSwgdHdvPUZhbHNlLA0KICAgICAgICAgICAgICAgIGZyb21fa2FsbD1UcnVlKToNCiAgICAgICAgbmFtZSA9ICcnDQogICAgICAgIGFyZ3MgPSAoKQ0KICAgICAgICBrd2FyZ3MgPSB7fQ0KICAgICAgICBfbGVuID0gbGVuKHZhbHVlKQ0KICAgICAgICBpZiBfbGVuID09IDM6DQogICAgICAgICAgICBuYW1lLCBhcmdzLCBrd2FyZ3MgPSB2YWx1ZQ0KICAgICAgICBlbGlmIF9sZW4gPT0gMjoNCiAgICAgICAgICAgIGZpcnN0LCBzZWNvbmQgPSB2YWx1ZQ0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShmaXJzdCwgc3RyKToNCiAgICAgICAgICAgICAgICBuYW1lID0gZmlyc3QNCiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNlY29uZCwgdHVwbGUpOg0KICAgICAgICAgICAgICAgICAgICBhcmdzID0gc2Vjb25kDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAga3dhcmdzID0gc2Vjb25kDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGFyZ3MsIGt3YXJncyA9IGZpcnN0LCBzZWNvbmQNCiAgICAgICAgZWxpZiBfbGVuID09IDE6DQogICAgICAgICAgICB2YWx1ZSwgPSB2YWx1ZQ0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyKToNCiAgICAgICAgICAgICAgICBuYW1lID0gdmFsdWUNCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgdHVwbGUpOg0KICAgICAgICAgICAgICAgIGFyZ3MgPSB2YWx1ZQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBrd2FyZ3MgPSB2YWx1ZQ0KDQogICAgICAgIGlmIHR3bzoNCiAgICAgICAgICAgIHJldHVybiB0dXBsZS5fX25ld19fKGNscywgKGFyZ3MsIGt3YXJncykpDQoNCiAgICAgICAgcmV0dXJuIHR1cGxlLl9fbmV3X18oY2xzLCAobmFtZSwgYXJncywga3dhcmdzKSkNCg0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYsIHZhbHVlPSgpLCBuYW1lPU5vbmUsIHBhcmVudD1Ob25lLCB0d289RmFsc2UsDQogICAgICAgICAgICAgICAgIGZyb21fa2FsbD1UcnVlKToNCiAgICAgICAgc2VsZi5uYW1lID0gbmFtZQ0KICAgICAgICBzZWxmLnBhcmVudCA9IHBhcmVudA0KICAgICAgICBzZWxmLmZyb21fa2FsbCA9IGZyb21fa2FsbA0KDQoNCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToNCiAgICAgICAgaWYgb3RoZXIgaXMgQU5ZOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgbGVuX290aGVyID0gbGVuKG90aGVyKQ0KICAgICAgICBleGNlcHQgVHlwZUVycm9yOg0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICAgICAgc2VsZl9uYW1lID0gJycNCiAgICAgICAgaWYgbGVuKHNlbGYpID09IDI6DQogICAgICAgICAgICBzZWxmX2FyZ3MsIHNlbGZfa3dhcmdzID0gc2VsZg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZl9uYW1lLCBzZWxmX2FyZ3MsIHNlbGZfa3dhcmdzID0gc2VsZg0KDQogICAgICAgIG90aGVyX25hbWUgPSAnJw0KICAgICAgICBpZiBsZW5fb3RoZXIgPT0gMDoNCiAgICAgICAgICAgIG90aGVyX2FyZ3MsIG90aGVyX2t3YXJncyA9ICgpLCB7fQ0KICAgICAgICBlbGlmIGxlbl9vdGhlciA9PSAzOg0KICAgICAgICAgICAgb3RoZXJfbmFtZSwgb3RoZXJfYXJncywgb3RoZXJfa3dhcmdzID0gb3RoZXINCiAgICAgICAgZWxpZiBsZW5fb3RoZXIgPT0gMToNCiAgICAgICAgICAgIHZhbHVlLCA9IG90aGVyDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCB0dXBsZSk6DQogICAgICAgICAgICAgICAgb3RoZXJfYXJncyA9IHZhbHVlDQogICAgICAgICAgICAgICAgb3RoZXJfa3dhcmdzID0ge30NCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyKToNCiAgICAgICAgICAgICAgICBvdGhlcl9uYW1lID0gdmFsdWUNCiAgICAgICAgICAgICAgICBvdGhlcl9hcmdzLCBvdGhlcl9rd2FyZ3MgPSAoKSwge30NCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb3RoZXJfYXJncyA9ICgpDQogICAgICAgICAgICAgICAgb3RoZXJfa3dhcmdzID0gdmFsdWUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgICMgbGVuIDINCiAgICAgICAgICAgICMgY291bGQgYmUgKG5hbWUsIGFyZ3MpIG9yIChuYW1lLCBrd2FyZ3MpIG9yIChhcmdzLCBrd2FyZ3MpDQogICAgICAgICAgICBmaXJzdCwgc2Vjb25kID0gb3RoZXINCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZmlyc3QsIHN0cik6DQogICAgICAgICAgICAgICAgb3RoZXJfbmFtZSA9IGZpcnN0DQogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzZWNvbmQsIHR1cGxlKToNCiAgICAgICAgICAgICAgICAgICAgb3RoZXJfYXJncywgb3RoZXJfa3dhcmdzID0gc2Vjb25kLCB7fQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIG90aGVyX2FyZ3MsIG90aGVyX2t3YXJncyA9ICgpLCBzZWNvbmQNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb3RoZXJfYXJncywgb3RoZXJfa3dhcmdzID0gZmlyc3QsIHNlY29uZA0KDQogICAgICAgIGlmIHNlbGZfbmFtZSBhbmQgb3RoZXJfbmFtZSAhPSBzZWxmX25hbWU6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCg0KICAgICAgICAjIHRoaXMgb3JkZXIgaXMgaW1wb3J0YW50IGZvciBBTlkgdG8gd29yayENCiAgICAgICAgcmV0dXJuIChvdGhlcl9hcmdzLCBvdGhlcl9rd2FyZ3MpID09IChzZWxmX2FyZ3MsIHNlbGZfa3dhcmdzKQ0KDQoNCiAgICBkZWYgX19uZV9fKHNlbGYsIG90aGVyKToNCiAgICAgICAgcmV0dXJuIG5vdCBzZWxmLl9fZXFfXyhvdGhlcikNCg0KDQogICAgZGVmIF9fY2FsbF9fKHNlbGYsICphcmdzLCAqKmt3YXJncyk6DQogICAgICAgIGlmIHNlbGYubmFtZSBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIF9DYWxsKCgnJywgYXJncywga3dhcmdzKSwgbmFtZT0nKCknKQ0KDQogICAgICAgIG5hbWUgPSBzZWxmLm5hbWUgKyAnKCknDQogICAgICAgIHJldHVybiBfQ2FsbCgoc2VsZi5uYW1lLCBhcmdzLCBrd2FyZ3MpLCBuYW1lPW5hbWUsIHBhcmVudD1zZWxmKQ0KDQoNCiAgICBkZWYgX19nZXRhdHRyX18oc2VsZiwgYXR0cik6DQogICAgICAgIGlmIHNlbGYubmFtZSBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIF9DYWxsKG5hbWU9YXR0ciwgZnJvbV9rYWxsPUZhbHNlKQ0KICAgICAgICBuYW1lID0gJyVzLiVzJyAlIChzZWxmLm5hbWUsIGF0dHIpDQogICAgICAgIHJldHVybiBfQ2FsbChuYW1lPW5hbWUsIHBhcmVudD1zZWxmLCBmcm9tX2thbGw9RmFsc2UpDQoNCg0KICAgIGRlZiBfX3JlcHJfXyhzZWxmKToNCiAgICAgICAgaWYgbm90IHNlbGYuZnJvbV9rYWxsOg0KICAgICAgICAgICAgbmFtZSA9IHNlbGYubmFtZSBvciAnY2FsbCcNCiAgICAgICAgICAgIGlmIG5hbWUuc3RhcnRzd2l0aCgnKCknKToNCiAgICAgICAgICAgICAgICBuYW1lID0gJ2NhbGwlcycgJSBuYW1lDQogICAgICAgICAgICByZXR1cm4gbmFtZQ0KDQogICAgICAgIGlmIGxlbihzZWxmKSA9PSAyOg0KICAgICAgICAgICAgbmFtZSA9ICdjYWxsJw0KICAgICAgICAgICAgYXJncywga3dhcmdzID0gc2VsZg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgbmFtZSwgYXJncywga3dhcmdzID0gc2VsZg0KICAgICAgICAgICAgaWYgbm90IG5hbWU6DQogICAgICAgICAgICAgICAgbmFtZSA9ICdjYWxsJw0KICAgICAgICAgICAgZWxpZiBub3QgbmFtZS5zdGFydHN3aXRoKCcoKScpOg0KICAgICAgICAgICAgICAgIG5hbWUgPSAnY2FsbC4lcycgJSBuYW1lDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG5hbWUgPSAnY2FsbCVzJyAlIG5hbWUNCiAgICAgICAgcmV0dXJuIF9mb3JtYXRfY2FsbF9zaWduYXR1cmUobmFtZSwgYXJncywga3dhcmdzKQ0KDQoNCiAgICBkZWYgY2FsbF9saXN0KHNlbGYpOg0KICAgICAgICAiIiJGb3IgYSBjYWxsIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgbXVsdGlwbGUgY2FsbHMsIGBjYWxsX2xpc3RgDQogICAgICAgIHJldHVybnMgYSBsaXN0IG9mIGFsbCB0aGUgaW50ZXJtZWRpYXRlIGNhbGxzIGFzIHdlbGwgYXMgdGhlDQogICAgICAgIGZpbmFsIGNhbGwuIiIiDQogICAgICAgIHZhbHMgPSBbXQ0KICAgICAgICB0aGluZyA9IHNlbGYNCiAgICAgICAgd2hpbGUgdGhpbmcgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBpZiB0aGluZy5mcm9tX2thbGw6DQogICAgICAgICAgICAgICAgdmFscy5hcHBlbmQodGhpbmcpDQogICAgICAgICAgICB0aGluZyA9IHRoaW5nLnBhcmVudA0KICAgICAgICByZXR1cm4gX0NhbGxMaXN0KHJldmVyc2VkKHZhbHMpKQ0KDQoNCmNhbGwgPSBfQ2FsbChmcm9tX2thbGw9RmFsc2UpDQoNCg0KDQpkZWYgY3JlYXRlX2F1dG9zcGVjKHNwZWMsIHNwZWNfc2V0PUZhbHNlLCBpbnN0YW5jZT1GYWxzZSwgX3BhcmVudD1Ob25lLA0KICAgICAgICAgICAgICAgICAgICBfbmFtZT1Ob25lLCAqKmt3YXJncyk6DQogICAgIiIiQ3JlYXRlIGEgbW9jayBvYmplY3QgdXNpbmcgYW5vdGhlciBvYmplY3QgYXMgYSBzcGVjLiBBdHRyaWJ1dGVzIG9uIHRoZQ0KICAgIG1vY2sgd2lsbCB1c2UgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9uIHRoZSBgc3BlY2Agb2JqZWN0IGFzIHRoZWlyDQogICAgc3BlYy4NCg0KICAgIEZ1bmN0aW9ucyBvciBtZXRob2RzIGJlaW5nIG1vY2tlZCB3aWxsIGhhdmUgdGhlaXIgYXJndW1lbnRzIGNoZWNrZWQNCiAgICB0byBjaGVjayB0aGF0IHRoZXkgYXJlIGNhbGxlZCB3aXRoIHRoZSBjb3JyZWN0IHNpZ25hdHVyZS4NCg0KICAgIElmIGBzcGVjX3NldGAgaXMgVHJ1ZSB0aGVuIGF0dGVtcHRpbmcgdG8gc2V0IGF0dHJpYnV0ZXMgdGhhdCBkb24ndCBleGlzdA0KICAgIG9uIHRoZSBzcGVjIG9iamVjdCB3aWxsIHJhaXNlIGFuIGBBdHRyaWJ1dGVFcnJvcmAuDQoNCiAgICBJZiBhIGNsYXNzIGlzIHVzZWQgYXMgYSBzcGVjIHRoZW4gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbW9jayAodGhlDQogICAgaW5zdGFuY2Ugb2YgdGhlIGNsYXNzKSB3aWxsIGhhdmUgdGhlIHNhbWUgc3BlYy4gWW91IGNhbiB1c2UgYSBjbGFzcyBhcyB0aGUNCiAgICBzcGVjIGZvciBhbiBpbnN0YW5jZSBvYmplY3QgYnkgcGFzc2luZyBgaW5zdGFuY2U9VHJ1ZWAuIFRoZSByZXR1cm5lZCBtb2NrDQogICAgd2lsbCBvbmx5IGJlIGNhbGxhYmxlIGlmIGluc3RhbmNlcyBvZiB0aGUgbW9jayBhcmUgY2FsbGFibGUuDQoNCiAgICBgY3JlYXRlX2F1dG9zcGVjYCBhbHNvIHRha2VzIGFyYml0cmFyeSBrZXl3b3JkIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8NCiAgICB0aGUgY29uc3RydWN0b3Igb2YgdGhlIGNyZWF0ZWQgbW9jay4iIiINCiAgICBpZiBfaXNfbGlzdChzcGVjKToNCiAgICAgICAgIyBjYW4ndCBwYXNzIGEgbGlzdCBpbnN0YW5jZSB0byB0aGUgbW9jayBjb25zdHJ1Y3RvciBhcyBpdCB3aWxsIGJlDQogICAgICAgICMgaW50ZXJwcmV0ZWQgYXMgYSBsaXN0IG9mIHN0cmluZ3MNCiAgICAgICAgc3BlYyA9IHR5cGUoc3BlYykNCg0KICAgIGlzX3R5cGUgPSBpc2luc3RhbmNlKHNwZWMsIHR5cGUpDQoNCiAgICBfa3dhcmdzID0geydzcGVjJzogc3BlY30NCiAgICBpZiBzcGVjX3NldDoNCiAgICAgICAgX2t3YXJncyA9IHsnc3BlY19zZXQnOiBzcGVjfQ0KICAgIGVsaWYgc3BlYyBpcyBOb25lOg0KICAgICAgICAjIE5vbmUgd2UgbW9jayB3aXRoIGEgbm9ybWFsIG1vY2sgd2l0aG91dCBhIHNwZWMNCiAgICAgICAgX2t3YXJncyA9IHt9DQoNCiAgICBfa3dhcmdzLnVwZGF0ZShrd2FyZ3MpDQoNCiAgICBLbGFzcyA9IE1hZ2ljTW9jaw0KICAgIGlmIHR5cGUoc3BlYykgaW4gRGVzY3JpcHRvclR5cGVzOg0KICAgICAgICAjIGRlc2NyaXB0b3JzIGRvbid0IGhhdmUgYSBzcGVjDQogICAgICAgICMgYmVjYXVzZSB3ZSBkb24ndCBrbm93IHdoYXQgdHlwZSB0aGV5IHJldHVybg0KICAgICAgICBfa3dhcmdzID0ge30NCiAgICBlbGlmIG5vdCBfY2FsbGFibGUoc3BlYyk6DQogICAgICAgIEtsYXNzID0gTm9uQ2FsbGFibGVNYWdpY01vY2sNCiAgICBlbGlmIGlzX3R5cGUgYW5kIGluc3RhbmNlIGFuZCBub3QgX2luc3RhbmNlX2NhbGxhYmxlKHNwZWMpOg0KICAgICAgICBLbGFzcyA9IE5vbkNhbGxhYmxlTWFnaWNNb2NrDQoNCiAgICBfbmV3X25hbWUgPSBfbmFtZQ0KICAgIGlmIF9wYXJlbnQgaXMgTm9uZToNCiAgICAgICAgIyBmb3IgYSB0b3AgbGV2ZWwgb2JqZWN0IG5vIF9uZXdfbmFtZSBzaG91bGQgYmUgc2V0DQogICAgICAgIF9uZXdfbmFtZSA9ICcnDQoNCiAgICBtb2NrID0gS2xhc3MocGFyZW50PV9wYXJlbnQsIF9uZXdfcGFyZW50PV9wYXJlbnQsIF9uZXdfbmFtZT1fbmV3X25hbWUsDQogICAgICAgICAgICAgICAgIG5hbWU9X25hbWUsICoqX2t3YXJncykNCg0KICAgIGlmIGlzaW5zdGFuY2Uoc3BlYywgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICMgc2hvdWxkIG9ubHkgaGFwcGVuIGF0IHRoZSB0b3AgbGV2ZWwgYmVjYXVzZSB3ZSBkb24ndA0KICAgICAgICAjIHJlY3Vyc2UgZm9yIGZ1bmN0aW9ucw0KICAgICAgICBtb2NrID0gX3NldF9zaWduYXR1cmUobW9jaywgc3BlYykNCiAgICBlbHNlOg0KICAgICAgICBfY2hlY2tfc2lnbmF0dXJlKHNwZWMsIG1vY2ssIGlzX3R5cGUsIGluc3RhbmNlKQ0KDQogICAgaWYgX3BhcmVudCBpcyBub3QgTm9uZSBhbmQgbm90IGluc3RhbmNlOg0KICAgICAgICBfcGFyZW50Ll9tb2NrX2NoaWxkcmVuW19uYW1lXSA9IG1vY2sNCg0KICAgIGlmIGlzX3R5cGUgYW5kIG5vdCBpbnN0YW5jZSBhbmQgJ3JldHVybl92YWx1ZScgbm90IGluIGt3YXJnczoNCiAgICAgICAgbW9jay5yZXR1cm5fdmFsdWUgPSBjcmVhdGVfYXV0b3NwZWMoc3BlYywgc3BlY19zZXQsIGluc3RhbmNlPVRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9uYW1lPScoKScsIF9wYXJlbnQ9bW9jaykNCg0KICAgIGZvciBlbnRyeSBpbiBkaXIoc3BlYyk6DQogICAgICAgIGlmIF9pc19tYWdpYyhlbnRyeSk6DQogICAgICAgICAgICAjIE1hZ2ljTW9jayBhbHJlYWR5IGRvZXMgdGhlIHVzZWZ1bCBtYWdpYyBtZXRob2RzIGZvciB1cw0KICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICAjIFhYWFggZG8gd2UgbmVlZCBhIGJldHRlciB3YXkgb2YgZ2V0dGluZyBhdHRyaWJ1dGVzIHdpdGhvdXQNCiAgICAgICAgIyB0cmlnZ2VyaW5nIGNvZGUgZXhlY3V0aW9uICg/KSBQcm9iYWJseSBub3QgLSB3ZSBuZWVkIHRoZSBhY3R1YWwNCiAgICAgICAgIyBvYmplY3QgdG8gbW9jayBpdCBzbyB3ZSB3b3VsZCByYXRoZXIgdHJpZ2dlciBhIHByb3BlcnR5IHRoYW4gbW9jaw0KICAgICAgICAjIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yLiBMaWtld2lzZSB3ZSB3YW50IHRvIG1vY2sgb3V0IGR5bmFtaWNhbGx5DQogICAgICAgICMgcHJvdmlkZWQgYXR0cmlidXRlcy4NCiAgICAgICAgIyBYWFhYIHdoYXQgYWJvdXQgYXR0cmlidXRlcyB0aGF0IHJhaXNlIGV4Y2VwdGlvbnMgb3RoZXIgdGhhbg0KICAgICAgICAjIEF0dHJpYnV0ZUVycm9yIG9uIGJlaW5nIGZldGNoZWQ/DQogICAgICAgICMgd2UgY291bGQgYmUgcmVzaWxpZW50IGFnYWluc3QgaXQsIG9yIGNhdGNoIGFuZCBwcm9wYWdhdGUgdGhlDQogICAgICAgICMgZXhjZXB0aW9uIHdoZW4gdGhlIGF0dHJpYnV0ZSBpcyBmZXRjaGVkIGZyb20gdGhlIG1vY2sNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgb3JpZ2luYWwgPSBnZXRhdHRyKHNwZWMsIGVudHJ5KQ0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICBjb250aW51ZQ0KDQogICAgICAgIGt3YXJncyA9IHsnc3BlYyc6IG9yaWdpbmFsfQ0KICAgICAgICBpZiBzcGVjX3NldDoNCiAgICAgICAgICAgIGt3YXJncyA9IHsnc3BlY19zZXQnOiBvcmlnaW5hbH0NCg0KICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvcmlnaW5hbCwgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICAgICBuZXcgPSBfU3BlY1N0YXRlKG9yaWdpbmFsLCBzcGVjX3NldCwgbW9jaywgZW50cnksIGluc3RhbmNlKQ0KICAgICAgICAgICAgbW9jay5fbW9ja19jaGlsZHJlbltlbnRyeV0gPSBuZXcNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHBhcmVudCA9IG1vY2sNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc3BlYywgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICAgICAgICAgcGFyZW50ID0gbW9jay5tb2NrDQoNCiAgICAgICAgICAgIG5ldyA9IE1hZ2ljTW9jayhwYXJlbnQ9cGFyZW50LCBuYW1lPWVudHJ5LCBfbmV3X25hbWU9ZW50cnksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgX25ld19wYXJlbnQ9cGFyZW50LCAqKmt3YXJncykNCiAgICAgICAgICAgIG1vY2suX21vY2tfY2hpbGRyZW5bZW50cnldID0gbmV3DQogICAgICAgICAgICBza2lwZmlyc3QgPSBfbXVzdF9za2lwKHNwZWMsIGVudHJ5LCBpc190eXBlKQ0KICAgICAgICAgICAgX2NoZWNrX3NpZ25hdHVyZShvcmlnaW5hbCwgbmV3LCBza2lwZmlyc3Q9c2tpcGZpcnN0KQ0KDQogICAgICAgICMgc28gZnVuY3Rpb25zIGNyZWF0ZWQgd2l0aCBfc2V0X3NpZ25hdHVyZSBiZWNvbWUgaW5zdGFuY2UgYXR0cmlidXRlcywNCiAgICAgICAgIyAqcGx1cyogdGhlaXIgdW5kZXJseWluZyBtb2NrIGV4aXN0cyBpbiBfbW9ja19jaGlsZHJlbiBvZiB0aGUgcGFyZW50DQogICAgICAgICMgbW9jay4gQWRkaW5nIHRvIF9tb2NrX2NoaWxkcmVuIG1heSBiZSB1bm5lY2Vzc2FyeSB3aGVyZSB3ZSBhcmUgYWxzbw0KICAgICAgICAjIHNldHRpbmcgYXMgYW4gaW5zdGFuY2UgYXR0cmlidXRlPw0KICAgICAgICBpZiBpc2luc3RhbmNlKG5ldywgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICAgICBzZXRhdHRyKG1vY2ssIGVudHJ5LCBuZXcpDQoNCiAgICByZXR1cm4gbW9jaw0KDQoNCmRlZiBfbXVzdF9za2lwKHNwZWMsIGVudHJ5LCBpc190eXBlKToNCiAgICBpZiBub3QgaXNpbnN0YW5jZShzcGVjLCB0eXBlKToNCiAgICAgICAgaWYgZW50cnkgaW4gZ2V0YXR0cihzcGVjLCAnX19kaWN0X18nLCB7fSk6DQogICAgICAgICAgICAjIGluc3RhbmNlIGF0dHJpYnV0ZSAtIHNob3VsZG4ndCBza2lwDQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgc3BlYyA9IHNwZWMuX19jbGFzc19fDQoNCiAgICBmb3Iga2xhc3MgaW4gc3BlYy5fX21yb19fOg0KICAgICAgICByZXN1bHQgPSBrbGFzcy5fX2RpY3RfXy5nZXQoZW50cnksIERFRkFVTFQpDQogICAgICAgIGlmIHJlc3VsdCBpcyBERUZBVUxUOg0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgaWYgaXNpbnN0YW5jZShyZXN1bHQsIChzdGF0aWNtZXRob2QsIGNsYXNzbWV0aG9kKSk6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgcmV0dXJuIGlzX3R5cGUNCg0KICAgICMgc2hvdWxkbid0IGdldCBoZXJlIHVubGVzcyBmdW5jdGlvbiBpcyBhIGR5bmFtaWNhbGx5IHByb3ZpZGVkIGF0dHJpYnV0ZQ0KICAgICMgWFhYWCB1bnRlc3RlZCBiZWhhdmlvdXINCiAgICByZXR1cm4gaXNfdHlwZQ0KDQoNCmRlZiBfZ2V0X2NsYXNzKG9iaik6DQogICAgdHJ5Og0KICAgICAgICByZXR1cm4gb2JqLl9fY2xhc3NfXw0KICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoNCiAgICAgICAgIyBpdCBpcyBwb3NzaWJsZSBmb3Igb2JqZWN0cyB0byBoYXZlIG5vIF9fY2xhc3NfXw0KICAgICAgICByZXR1cm4gdHlwZShvYmopDQoNCg0KY2xhc3MgX1NwZWNTdGF0ZShvYmplY3QpOg0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYsIHNwZWMsIHNwZWNfc2V0PUZhbHNlLCBwYXJlbnQ9Tm9uZSwNCiAgICAgICAgICAgICAgICAgbmFtZT1Ob25lLCBpZHM9Tm9uZSwgaW5zdGFuY2U9RmFsc2UpOg0KICAgICAgICBzZWxmLnNwZWMgPSBzcGVjDQogICAgICAgIHNlbGYuaWRzID0gaWRzDQogICAgICAgIHNlbGYuc3BlY19zZXQgPSBzcGVjX3NldA0KICAgICAgICBzZWxmLnBhcmVudCA9IHBhcmVudA0KICAgICAgICBzZWxmLmluc3RhbmNlID0gaW5zdGFuY2UNCiAgICAgICAgc2VsZi5uYW1lID0gbmFtZQ0KDQoNCkZ1bmN0aW9uVHlwZXMgPSAoDQogICAgIyBweXRob24gZnVuY3Rpb24NCiAgICB0eXBlKGNyZWF0ZV9hdXRvc3BlYyksDQogICAgIyBpbnN0YW5jZSBtZXRob2QNCiAgICB0eXBlKEFOWS5fX2VxX18pLA0KKQ0KDQoNCmZpbGVfc3BlYyA9IE5vbmUNCg0KDQpkZWYgbW9ja19vcGVuKG1vY2s9Tm9uZSwgcmVhZF9kYXRhPScnKToNCiAgICAiIiINCiAgICBBIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYSBtb2NrIHRvIHJlcGxhY2UgdGhlIHVzZSBvZiBgb3BlbmAuIEl0IHdvcmtzDQogICAgZm9yIGBvcGVuYCBjYWxsZWQgZGlyZWN0bHkgb3IgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlci4NCg0KICAgIFRoZSBgbW9ja2AgYXJndW1lbnQgaXMgdGhlIG1vY2sgb2JqZWN0IHRvIGNvbmZpZ3VyZS4gSWYgYE5vbmVgICh0aGUNCiAgICBkZWZhdWx0KSB0aGVuIGEgYE1hZ2ljTW9ja2Agd2lsbCBiZSBjcmVhdGVkIGZvciB5b3UsIHdpdGggdGhlIEFQSSBsaW1pdGVkDQogICAgdG8gbWV0aG9kcyBvciBhdHRyaWJ1dGVzIGF2YWlsYWJsZSBvbiBzdGFuZGFyZCBmaWxlIGhhbmRsZXMuDQoNCiAgICBgcmVhZF9kYXRhYCBpcyBhIHN0cmluZyBmb3IgdGhlIGByZWFkYCBtZXRob2Qgb2YgdGhlIGZpbGUgaGFuZGxlIHRvIHJldHVybi4NCiAgICBUaGlzIGlzIGFuIGVtcHR5IHN0cmluZyBieSBkZWZhdWx0Lg0KICAgICIiIg0KICAgIGdsb2JhbCBmaWxlX3NwZWMNCiAgICBpZiBmaWxlX3NwZWMgaXMgTm9uZToNCiAgICAgICAgaW1wb3J0IF9pbw0KICAgICAgICBmaWxlX3NwZWMgPSBsaXN0KHNldChkaXIoX2lvLlRleHRJT1dyYXBwZXIpKS51bmlvbihzZXQoZGlyKF9pby5CeXRlc0lPKSkpKQ0KDQogICAgaWYgbW9jayBpcyBOb25lOg0KICAgICAgICBtb2NrID0gTWFnaWNNb2NrKG5hbWU9J29wZW4nLCBzcGVjPW9wZW4pDQoNCiAgICBoYW5kbGUgPSBNYWdpY01vY2soc3BlYz1maWxlX3NwZWMpDQogICAgaGFuZGxlLndyaXRlLnJldHVybl92YWx1ZSA9IE5vbmUNCiAgICBoYW5kbGUuX19lbnRlcl9fLnJldHVybl92YWx1ZSA9IGhhbmRsZQ0KICAgIGhhbmRsZS5yZWFkLnJldHVybl92YWx1ZSA9IHJlYWRfZGF0YQ0KDQogICAgbW9jay5yZXR1cm5fdmFsdWUgPSBoYW5kbGUNCiAgICByZXR1cm4gbW9jaw0KDQoNCmNsYXNzIFByb3BlcnR5TW9jayhNb2NrKToNCiAgICAiIiINCiAgICBBIG1vY2sgaW50ZW5kZWQgdG8gYmUgdXNlZCBhcyBhIHByb3BlcnR5LCBvciBvdGhlciBkZXNjcmlwdG9yLCBvbiBhIGNsYXNzLg0KICAgIGBQcm9wZXJ0eU1vY2tgIHByb3ZpZGVzIGBfX2dldF9fYCBhbmQgYF9fc2V0X19gIG1ldGhvZHMgc28geW91IGNhbiBzcGVjaWZ5DQogICAgYSByZXR1cm4gdmFsdWUgd2hlbiBpdCBpcyBmZXRjaGVkLg0KDQogICAgRmV0Y2hpbmcgYSBgUHJvcGVydHlNb2NrYCBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCBjYWxscyB0aGUgbW9jaywgd2l0aA0KICAgIG5vIGFyZ3MuIFNldHRpbmcgaXQgY2FsbHMgdGhlIG1vY2sgd2l0aCB0aGUgdmFsdWUgYmVpbmcgc2V0Lg0KICAgICIiIg0KICAgIGRlZiBfZ2V0X2NoaWxkX21vY2soc2VsZiwgKiprd2FyZ3MpOg0KICAgICAgICByZXR1cm4gTWFnaWNNb2NrKCoqa3dhcmdzKQ0KDQogICAgZGVmIF9fZ2V0X18oc2VsZiwgb2JqLCBvYmpfdHlwZSk6DQogICAgICAgIHJldHVybiBzZWxmKCkNCiAgICBkZWYgX19zZXRfXyhzZWxmLCBvYmosIHZhbCk6DQogICAgICAgIHNlbGYodmFsKQ0K',
'/Lib/unittest/suite.py':'',
'/Lib/unittest/runner.py':'IiIiUnVubmluZyB0ZXN0cyIiIgoKaW1wb3J0IHN5cwppbXBvcnQgdGltZQppbXBvcnQgd2FybmluZ3MKCmZyb20gLiBpbXBvcnQgcmVzdWx0CmZyb20gLnNpZ25hbHMgaW1wb3J0IHJlZ2lzdGVyUmVzdWx0CgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCmNsYXNzIF9Xcml0ZWxuRGVjb3JhdG9yKG9iamVjdCk6CiAgICAiIiJVc2VkIHRvIGRlY29yYXRlIGZpbGUtbGlrZSBvYmplY3RzIHdpdGggYSBoYW5keSAnd3JpdGVsbicgbWV0aG9kIiIiCiAgICBkZWYgX19pbml0X18oc2VsZixzdHJlYW0pOgogICAgICAgIHNlbGYuc3RyZWFtID0gc3RyZWFtCgogICAgZGVmIF9fZ2V0YXR0cl9fKHNlbGYsIGF0dHIpOgogICAgICAgIGlmIGF0dHIgaW4gKCdzdHJlYW0nLCAnX19nZXRzdGF0ZV9fJyk6CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKGF0dHIpCiAgICAgICAgcmV0dXJuIGdldGF0dHIoc2VsZi5zdHJlYW0sYXR0cikKCiAgICBkZWYgd3JpdGVsbihzZWxmLCBhcmc9Tm9uZSk6CiAgICAgICAgaWYgYXJnOgogICAgICAgICAgICBzZWxmLndyaXRlKGFyZykKICAgICAgICBzZWxmLndyaXRlKCdcbicpICMgdGV4dC1tb2RlIHN0cmVhbXMgdHJhbnNsYXRlIHRvIFxyXG4gaWYgbmVlZGVkCgoKY2xhc3MgVGV4dFRlc3RSZXN1bHQocmVzdWx0LlRlc3RSZXN1bHQpOgogICAgIiIiQSB0ZXN0IHJlc3VsdCBjbGFzcyB0aGF0IGNhbiBwcmludCBmb3JtYXR0ZWQgdGV4dCByZXN1bHRzIHRvIGEgc3RyZWFtLgoKICAgIFVzZWQgYnkgVGV4dFRlc3RSdW5uZXIuCiAgICAiIiIKICAgIHNlcGFyYXRvcjEgPSAnPScgKiA3MAogICAgc2VwYXJhdG9yMiA9ICctJyAqIDcwCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHN0cmVhbSwgZGVzY3JpcHRpb25zLCB2ZXJib3NpdHkpOgogICAgICAgIHN1cGVyKFRleHRUZXN0UmVzdWx0LCBzZWxmKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5zdHJlYW0gPSBzdHJlYW0KICAgICAgICBzZWxmLnNob3dBbGwgPSB2ZXJib3NpdHkgPiAxCiAgICAgICAgc2VsZi5kb3RzID0gdmVyYm9zaXR5ID09IDEKICAgICAgICBzZWxmLmRlc2NyaXB0aW9ucyA9IGRlc2NyaXB0aW9ucwoKICAgIGRlZiBnZXREZXNjcmlwdGlvbihzZWxmLCB0ZXN0KToKICAgICAgICBkb2NfZmlyc3RfbGluZSA9IHRlc3Quc2hvcnREZXNjcmlwdGlvbigpCiAgICAgICAgaWYgc2VsZi5kZXNjcmlwdGlvbnMgYW5kIGRvY19maXJzdF9saW5lOgogICAgICAgICAgICByZXR1cm4gJ1xuJy5qb2luKChzdHIodGVzdCksIGRvY19maXJzdF9saW5lKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc3RyKHRlc3QpCgogICAgZGVmIHN0YXJ0VGVzdChzZWxmLCB0ZXN0KToKICAgICAgICBzdXBlcihUZXh0VGVzdFJlc3VsdCwgc2VsZikuc3RhcnRUZXN0KHRlc3QpCiAgICAgICAgaWYgc2VsZi5zaG93QWxsOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZShzZWxmLmdldERlc2NyaXB0aW9uKHRlc3QpKQogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZSgiIC4uLiAiKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZFN1Y2Nlc3Moc2VsZiwgdGVzdCk6CiAgICAgICAgc3VwZXIoVGV4dFRlc3RSZXN1bHQsIHNlbGYpLmFkZFN1Y2Nlc3ModGVzdCkKICAgICAgICBpZiBzZWxmLnNob3dBbGw6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oIm9rIikKICAgICAgICBlbGlmIHNlbGYuZG90czoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoJy4nKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZEVycm9yKHNlbGYsIHRlc3QsIGVycik6CiAgICAgICAgc3VwZXIoVGV4dFRlc3RSZXN1bHQsIHNlbGYpLmFkZEVycm9yKHRlc3QsIGVycikKICAgICAgICBpZiBzZWxmLnNob3dBbGw6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oIkVSUk9SIikKICAgICAgICBlbGlmIHNlbGYuZG90czoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoJ0UnKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZEZhaWx1cmUoc2VsZiwgdGVzdCwgZXJyKToKICAgICAgICBzdXBlcihUZXh0VGVzdFJlc3VsdCwgc2VsZikuYWRkRmFpbHVyZSh0ZXN0LCBlcnIpCiAgICAgICAgaWYgc2VsZi5zaG93QWxsOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKCJGQUlMIikKICAgICAgICBlbGlmIHNlbGYuZG90czoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoJ0YnKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZFNraXAoc2VsZiwgdGVzdCwgcmVhc29uKToKICAgICAgICBzdXBlcihUZXh0VGVzdFJlc3VsdCwgc2VsZikuYWRkU2tpcCh0ZXN0LCByZWFzb24pCiAgICAgICAgaWYgc2VsZi5zaG93QWxsOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKCJza2lwcGVkIHswIXJ9Ii5mb3JtYXQocmVhc29uKSkKICAgICAgICBlbGlmIHNlbGYuZG90czoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoInMiKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZEV4cGVjdGVkRmFpbHVyZShzZWxmLCB0ZXN0LCBlcnIpOgogICAgICAgIHN1cGVyKFRleHRUZXN0UmVzdWx0LCBzZWxmKS5hZGRFeHBlY3RlZEZhaWx1cmUodGVzdCwgZXJyKQogICAgICAgIGlmIHNlbGYuc2hvd0FsbDoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGVsbigiZXhwZWN0ZWQgZmFpbHVyZSIpCiAgICAgICAgZWxpZiBzZWxmLmRvdHM6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlKCJ4IikKICAgICAgICAgICAgc2VsZi5zdHJlYW0uZmx1c2goKQoKICAgIGRlZiBhZGRVbmV4cGVjdGVkU3VjY2VzcyhzZWxmLCB0ZXN0KToKICAgICAgICBzdXBlcihUZXh0VGVzdFJlc3VsdCwgc2VsZikuYWRkVW5leHBlY3RlZFN1Y2Nlc3ModGVzdCkKICAgICAgICBpZiBzZWxmLnNob3dBbGw6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oInVuZXhwZWN0ZWQgc3VjY2VzcyIpCiAgICAgICAgZWxpZiBzZWxmLmRvdHM6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlKCJ1IikKICAgICAgICAgICAgc2VsZi5zdHJlYW0uZmx1c2goKQoKICAgIGRlZiBwcmludEVycm9ycyhzZWxmKToKICAgICAgICBpZiBzZWxmLmRvdHMgb3Igc2VsZi5zaG93QWxsOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKCkKICAgICAgICBzZWxmLnByaW50RXJyb3JMaXN0KCdFUlJPUicsIHNlbGYuZXJyb3JzKQogICAgICAgIHNlbGYucHJpbnRFcnJvckxpc3QoJ0ZBSUwnLCBzZWxmLmZhaWx1cmVzKQoKICAgIGRlZiBwcmludEVycm9yTGlzdChzZWxmLCBmbGF2b3VyLCBlcnJvcnMpOgogICAgICAgIGZvciB0ZXN0LCBlcnIgaW4gZXJyb3JzOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKHNlbGYuc2VwYXJhdG9yMSkKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGVsbigiJXM6ICVzIiAlIChmbGF2b3VyLHNlbGYuZ2V0RGVzY3JpcHRpb24odGVzdCkpKQogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKHNlbGYuc2VwYXJhdG9yMikKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGVsbigiJXMiICUgZXJyKQoKCmNsYXNzIFRleHRUZXN0UnVubmVyKG9iamVjdCk6CiAgICAiIiJBIHRlc3QgcnVubmVyIGNsYXNzIHRoYXQgZGlzcGxheXMgcmVzdWx0cyBpbiB0ZXh0dWFsIGZvcm0uCgogICAgSXQgcHJpbnRzIG91dCB0aGUgbmFtZXMgb2YgdGVzdHMgYXMgdGhleSBhcmUgcnVuLCBlcnJvcnMgYXMgdGhleQogICAgb2NjdXIsIGFuZCBhIHN1bW1hcnkgb2YgdGhlIHJlc3VsdHMgYXQgdGhlIGVuZCBvZiB0aGUgdGVzdCBydW4uCiAgICAiIiIKICAgIHJlc3VsdGNsYXNzID0gVGV4dFRlc3RSZXN1bHQKCiAgICBkZWYgX19pbml0X18oc2VsZiwgc3RyZWFtPU5vbmUsIGRlc2NyaXB0aW9ucz1UcnVlLCB2ZXJib3NpdHk9MSwKICAgICAgICAgICAgICAgICBmYWlsZmFzdD1GYWxzZSwgYnVmZmVyPUZhbHNlLCByZXN1bHRjbGFzcz1Ob25lLCB3YXJuaW5ncz1Ob25lKToKICAgICAgICBpZiBzdHJlYW0gaXMgTm9uZToKICAgICAgICAgICAgc3RyZWFtID0gc3lzLnN0ZGVycgogICAgICAgIHNlbGYuc3RyZWFtID0gX1dyaXRlbG5EZWNvcmF0b3Ioc3RyZWFtKQogICAgICAgIHNlbGYuZGVzY3JpcHRpb25zID0gZGVzY3JpcHRpb25zCiAgICAgICAgc2VsZi52ZXJib3NpdHkgPSB2ZXJib3NpdHkKICAgICAgICBzZWxmLmZhaWxmYXN0ID0gZmFpbGZhc3QKICAgICAgICBzZWxmLmJ1ZmZlciA9IGJ1ZmZlcgogICAgICAgIHNlbGYud2FybmluZ3MgPSB3YXJuaW5ncwogICAgICAgIGlmIHJlc3VsdGNsYXNzIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLnJlc3VsdGNsYXNzID0gcmVzdWx0Y2xhc3MKCiAgICBkZWYgX21ha2VSZXN1bHQoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYucmVzdWx0Y2xhc3Moc2VsZi5zdHJlYW0sIHNlbGYuZGVzY3JpcHRpb25zLCBzZWxmLnZlcmJvc2l0eSkKCiAgICBkZWYgcnVuKHNlbGYsIHRlc3QpOgogICAgICAgICJSdW4gdGhlIGdpdmVuIHRlc3QgY2FzZSBvciB0ZXN0IHN1aXRlLiIKICAgICAgICByZXN1bHQgPSBzZWxmLl9tYWtlUmVzdWx0KCkKICAgICAgICByZWdpc3RlclJlc3VsdChyZXN1bHQpCiAgICAgICAgcmVzdWx0LmZhaWxmYXN0ID0gc2VsZi5mYWlsZmFzdAogICAgICAgIHJlc3VsdC5idWZmZXIgPSBzZWxmLmJ1ZmZlcgogICAgICAgIHdpdGggd2FybmluZ3MuY2F0Y2hfd2FybmluZ3MoKToKICAgICAgICAgICAgaWYgc2VsZi53YXJuaW5nczoKICAgICAgICAgICAgICAgICMgaWYgc2VsZi53YXJuaW5ncyBpcyBzZXQsIHVzZSBpdCB0byBmaWx0ZXIgYWxsIHRoZSB3YXJuaW5ncwogICAgICAgICAgICAgICAgd2FybmluZ3Muc2ltcGxlZmlsdGVyKHNlbGYud2FybmluZ3MpCiAgICAgICAgICAgICAgICAjIGlmIHRoZSBmaWx0ZXIgaXMgJ2RlZmF1bHQnIG9yICdhbHdheXMnLCBzcGVjaWFsLWNhc2UgdGhlCiAgICAgICAgICAgICAgICAjIHdhcm5pbmdzIGZyb20gdGhlIGRlcHJlY2F0ZWQgdW5pdHRlc3QgbWV0aG9kcyB0byBzaG93IHRoZW0KICAgICAgICAgICAgICAgICMgbm8gbW9yZSB0aGFuIG9uY2UgcGVyIG1vZHVsZSwgYmVjYXVzZSB0aGV5IGNhbiBiZSBmYWlybHkKICAgICAgICAgICAgICAgICMgbm9pc3kuICBUaGUgLVdkIGFuZCAtV2EgZmxhZ3MgY2FuIGJlIHVzZWQgdG8gYnlwYXNzIHRoaXMKICAgICAgICAgICAgICAgICMgb25seSB3aGVuIHNlbGYud2FybmluZ3MgaXMgTm9uZS4KICAgICAgICAgICAgICAgIGlmIHNlbGYud2FybmluZ3MgaW4gWydkZWZhdWx0JywgJ2Fsd2F5cyddOgogICAgICAgICAgICAgICAgICAgIHdhcm5pbmdzLmZpbHRlcndhcm5pbmdzKCdtb2R1bGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk9RGVwcmVjYXRpb25XYXJuaW5nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZT0nUGxlYXNlIHVzZSBhc3NlcnRcdysgaW5zdGVhZC4nKQogICAgICAgICAgICBzdGFydFRpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgICAgICBzdGFydFRlc3RSdW4gPSBnZXRhdHRyKHJlc3VsdCwgJ3N0YXJ0VGVzdFJ1bicsIE5vbmUpCiAgICAgICAgICAgIGlmIHN0YXJ0VGVzdFJ1biBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHN0YXJ0VGVzdFJ1bigpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHRlc3QocmVzdWx0KQogICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgc3RvcFRlc3RSdW4gPSBnZXRhdHRyKHJlc3VsdCwgJ3N0b3BUZXN0UnVuJywgTm9uZSkKICAgICAgICAgICAgICAgIGlmIHN0b3BUZXN0UnVuIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHN0b3BUZXN0UnVuKCkKICAgICAgICAgICAgc3RvcFRpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgIHRpbWVUYWtlbiA9IHN0b3BUaW1lIC0gc3RhcnRUaW1lCiAgICAgICAgcmVzdWx0LnByaW50RXJyb3JzKCkKICAgICAgICBpZiBoYXNhdHRyKHJlc3VsdCwgJ3NlcGFyYXRvcjInKToKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGVsbihyZXN1bHQuc2VwYXJhdG9yMikKICAgICAgICBydW4gPSByZXN1bHQudGVzdHNSdW4KICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKCJSYW4gJWQgdGVzdCVzIGluICUuM2ZzIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocnVuLCBydW4gIT0gMSBhbmQgInMiIG9yICIiLCB0aW1lVGFrZW4pKQogICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oKQoKICAgICAgICBleHBlY3RlZEZhaWxzID0gdW5leHBlY3RlZFN1Y2Nlc3NlcyA9IHNraXBwZWQgPSAwCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXN1bHRzID0gbWFwKGxlbiwgKHJlc3VsdC5leHBlY3RlZEZhaWx1cmVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC51bmV4cGVjdGVkU3VjY2Vzc2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5za2lwcGVkKSkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICBleHBlY3RlZEZhaWxzLCB1bmV4cGVjdGVkU3VjY2Vzc2VzLCBza2lwcGVkID0gcmVzdWx0cwoKICAgICAgICBpbmZvcyA9IFtdCiAgICAgICAgaWYgbm90IHJlc3VsdC53YXNTdWNjZXNzZnVsKCk6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlKCJGQUlMRUQiKQogICAgICAgICAgICBmYWlsZWQsIGVycm9yZWQgPSBsZW4ocmVzdWx0LmZhaWx1cmVzKSwgbGVuKHJlc3VsdC5lcnJvcnMpCiAgICAgICAgICAgIGlmIGZhaWxlZDoKICAgICAgICAgICAgICAgIGluZm9zLmFwcGVuZCgiZmFpbHVyZXM9JWQiICUgZmFpbGVkKQogICAgICAgICAgICBpZiBlcnJvcmVkOgogICAgICAgICAgICAgICAgaW5mb3MuYXBwZW5kKCJlcnJvcnM9JWQiICUgZXJyb3JlZCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZSgiT0siKQogICAgICAgIGlmIHNraXBwZWQ6CiAgICAgICAgICAgIGluZm9zLmFwcGVuZCgic2tpcHBlZD0lZCIgJSBza2lwcGVkKQogICAgICAgIGlmIGV4cGVjdGVkRmFpbHM6CiAgICAgICAgICAgIGluZm9zLmFwcGVuZCgiZXhwZWN0ZWQgZmFpbHVyZXM9JWQiICUgZXhwZWN0ZWRGYWlscykKICAgICAgICBpZiB1bmV4cGVjdGVkU3VjY2Vzc2VzOgogICAgICAgICAgICBpbmZvcy5hcHBlbmQoInVuZXhwZWN0ZWQgc3VjY2Vzc2VzPSVkIiAlIHVuZXhwZWN0ZWRTdWNjZXNzZXMpCiAgICAgICAgaWYgaW5mb3M6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oIiAoJXMpIiAlICgiLCAiLmpvaW4oaW5mb3MpLCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoIlxuIikKICAgICAgICByZXR1cm4gcmVzdWx0Cg==',
'/Lib/unittest/result.py':'',
'/Lib/unittest/__init__.py':'IiIiDQpQeXRob24gdW5pdCB0ZXN0aW5nIGZyYW1ld29yaywgYmFzZWQgb24gRXJpY2ggR2FtbWEncyBKVW5pdCBhbmQgS2VudCBCZWNrJ3MNClNtYWxsdGFsayB0ZXN0aW5nIGZyYW1ld29yay4NCg0KVGhpcyBtb2R1bGUgY29udGFpbnMgdGhlIGNvcmUgZnJhbWV3b3JrIGNsYXNzZXMgdGhhdCBmb3JtIHRoZSBiYXNpcyBvZg0Kc3BlY2lmaWMgdGVzdCBjYXNlcyBhbmQgc3VpdGVzIChUZXN0Q2FzZSwgVGVzdFN1aXRlIGV0Yy4pLCBhbmQgYWxzbyBhDQp0ZXh0LWJhc2VkIHV0aWxpdHkgY2xhc3MgZm9yIHJ1bm5pbmcgdGhlIHRlc3RzIGFuZCByZXBvcnRpbmcgdGhlIHJlc3VsdHMNCiAoVGV4dFRlc3RSdW5uZXIpLg0KDQpTaW1wbGUgdXNhZ2U6DQoNCiAgICBpbXBvcnQgdW5pdHRlc3QNCg0KICAgIGNsYXNzIEludGVnZXJBcml0aG1lbnRpY1Rlc3RDYXNlKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgZGVmIHRlc3RBZGQoc2VsZik6ICAjIyB0ZXN0IG1ldGhvZCBuYW1lcyBiZWdpbiAndGVzdConDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCgxICsgMiksIDMpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKDAgKyAxLCAxKQ0KICAgICAgICBkZWYgdGVzdE11bHRpcGx5KHNlbGYpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoMCAqIDEwKSwgMCkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoKDUgKiA4KSwgNDApDQoNCiAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgICAgICB1bml0dGVzdC5tYWluKCkNCg0KRnVydGhlciBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGJ1bmRsZWQgZG9jdW1lbnRhdGlvbiwgYW5kIGZyb20NCg0KICBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdW5pdHRlc3QuaHRtbA0KDQpDb3B5cmlnaHQgKGMpIDE5OTktMjAwMyBTdGV2ZSBQdXJjZWxsDQpDb3B5cmlnaHQgKGMpIDIwMDMtMjAxMCBQeXRob24gU29mdHdhcmUgRm91bmRhdGlvbg0KVGhpcyBtb2R1bGUgaXMgZnJlZSBzb2Z0d2FyZSwgYW5kIHlvdSBtYXkgcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkNCml0IHVuZGVyIHRoZSBzYW1lIHRlcm1zIGFzIFB5dGhvbiBpdHNlbGYsIHNvIGxvbmcgYXMgdGhpcyBjb3B5cmlnaHQgbWVzc2FnZQ0KYW5kIGRpc2NsYWltZXIgYXJlIHJldGFpbmVkIGluIHRoZWlyIG9yaWdpbmFsIGZvcm0uDQoNCklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIFRPIEFOWSBQQVJUWSBGT1IgRElSRUNULCBJTkRJUkVDVCwNClNQRUNJQUwsIElOQ0lERU5UQUwsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBBUklTSU5HIE9VVCBPRiBUSEUgVVNFIE9GDQpUSElTIENPREUsIEVWRU4gSUYgVEhFIEFVVEhPUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIDQpEQU1BR0UuDQoNClRIRSBBVVRIT1IgU1BFQ0lGSUNBTExZIERJU0NMQUlNUyBBTlkgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UDQpMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQQ0KUEFSVElDVUxBUiBQVVJQT1NFLiAgVEhFIENPREUgUFJPVklERUQgSEVSRVVOREVSIElTIE9OIEFOICJBUyBJUyIgQkFTSVMsDQpBTkQgVEhFUkUgSVMgTk8gT0JMSUdBVElPTiBXSEFUU09FVkVSIFRPIFBST1ZJREUgTUFJTlRFTkFOQ0UsDQpTVVBQT1JULCBVUERBVEVTLCBFTkhBTkNFTUVOVFMsIE9SIE1PRElGSUNBVElPTlMuDQoiIiINCg0KX19hbGxfXyA9IFsnVGVzdFJlc3VsdCcsICdUZXN0Q2FzZScsICdUZXN0U3VpdGUnLA0KICAgICAgICAgICAnVGV4dFRlc3RSdW5uZXInLCAnVGVzdExvYWRlcicsICdGdW5jdGlvblRlc3RDYXNlJywgJ21haW4nLA0KICAgICAgICAgICAnZGVmYXVsdFRlc3RMb2FkZXInLCAnU2tpcFRlc3QnLCAnc2tpcCcsICdza2lwSWYnLCAnc2tpcFVubGVzcycsDQogICAgICAgICAgICdleHBlY3RlZEZhaWx1cmUnLCAnVGV4dFRlc3RSZXN1bHQnLCAnaW5zdGFsbEhhbmRsZXInLA0KICAgICAgICAgICAncmVnaXN0ZXJSZXN1bHQnLCAncmVtb3ZlUmVzdWx0JywgJ3JlbW92ZUhhbmRsZXInXQ0KDQojIEV4cG9zZSBvYnNvbGV0ZSBmdW5jdGlvbnMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5DQpfX2FsbF9fLmV4dGVuZChbJ2dldFRlc3RDYXNlTmFtZXMnLCAnbWFrZVN1aXRlJywgJ2ZpbmRUZXN0Q2FzZXMnXSkNCg0KX191bml0dGVzdCA9IFRydWUNCg0KZnJvbSAucmVzdWx0IGltcG9ydCBUZXN0UmVzdWx0DQpmcm9tIC5jYXNlIGltcG9ydCAoVGVzdENhc2UsIEZ1bmN0aW9uVGVzdENhc2UsIFNraXBUZXN0LCBza2lwLCBza2lwSWYsDQogICAgICAgICAgICAgICAgICAgc2tpcFVubGVzcywgZXhwZWN0ZWRGYWlsdXJlKQ0KZnJvbSAuc3VpdGUgaW1wb3J0IEJhc2VUZXN0U3VpdGUsIFRlc3RTdWl0ZQ0KZnJvbSAubG9hZGVyIGltcG9ydCAoVGVzdExvYWRlciwgZGVmYXVsdFRlc3RMb2FkZXIsIG1ha2VTdWl0ZSwgZ2V0VGVzdENhc2VOYW1lcywNCiAgICAgICAgICAgICAgICAgICAgIGZpbmRUZXN0Q2FzZXMpDQpmcm9tIC5tYWluIGltcG9ydCBUZXN0UHJvZ3JhbSwgbWFpbg0KZnJvbSAucnVubmVyIGltcG9ydCBUZXh0VGVzdFJ1bm5lciwgVGV4dFRlc3RSZXN1bHQNCmZyb20gLnNpZ25hbHMgaW1wb3J0IGluc3RhbGxIYW5kbGVyLCByZWdpc3RlclJlc3VsdCwgcmVtb3ZlUmVzdWx0LCByZW1vdmVIYW5kbGVyDQoNCiMgZGVwcmVjYXRlZA0KX1RleHRUZXN0UmVzdWx0ID0gVGV4dFRlc3RSZXN1bHQNCg==',
'/Lib/unittest/__main__.py':'IiIiTWFpbiBlbnRyeSBwb2ludCIiIg0KDQppbXBvcnQgc3lzDQppZiBzeXMuYXJndlswXS5lbmRzd2l0aCgiX19tYWluX18ucHkiKToNCiAgICBzeXMuYXJndlswXSA9ICJweXRob24gLW0gdW5pdHRlc3QiDQoNCl9fdW5pdHRlc3QgPSBUcnVlDQoNCmZyb20gLm1haW4gaW1wb3J0IG1haW4sIFRlc3RQcm9ncmFtLCBVU0FHRV9BU19NQUlODQpUZXN0UHJvZ3JhbS5VU0FHRSA9IFVTQUdFX0FTX01BSU4NCg0KbWFpbihtb2R1bGU9Tm9uZSkNCg==',
'/Lib/unittest/util.py':'IiIiVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy4iIiINCg0KZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgbmFtZWR0dXBsZSwgT3JkZXJlZERpY3QNCg0KX191bml0dGVzdCA9IFRydWUNCg0KX01BWF9MRU5HVEggPSA4MA0KZGVmIHNhZmVfcmVwcihvYmosIHNob3J0PUZhbHNlKToNCiAgICB0cnk6DQogICAgICAgIHJlc3VsdCA9IHJlcHIob2JqKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb246DQogICAgICAgIHJlc3VsdCA9IG9iamVjdC5fX3JlcHJfXyhvYmopDQogICAgaWYgbm90IHNob3J0IG9yIGxlbihyZXN1bHQpIDwgX01BWF9MRU5HVEg6DQogICAgICAgIHJldHVybiByZXN1bHQNCiAgICByZXR1cm4gcmVzdWx0WzpfTUFYX0xFTkdUSF0gKyAnIFt0cnVuY2F0ZWRdLi4uJw0KDQpkZWYgc3RyY2xhc3MoY2xzKToNCiAgICByZXR1cm4gIiVzLiVzIiAlIChjbHMuX19tb2R1bGVfXywgY2xzLl9fbmFtZV9fKQ0KDQpkZWYgc29ydGVkX2xpc3RfZGlmZmVyZW5jZShleHBlY3RlZCwgYWN0dWFsKToNCiAgICAiIiJGaW5kcyBlbGVtZW50cyBpbiBvbmx5IG9uZSBvciB0aGUgb3RoZXIgb2YgdHdvLCBzb3J0ZWQgaW5wdXQgbGlzdHMuDQoNCiAgICBSZXR1cm5zIGEgdHdvLWVsZW1lbnQgdHVwbGUgb2YgbGlzdHMuICAgIFRoZSBmaXJzdCBsaXN0IGNvbnRhaW5zIHRob3NlDQogICAgZWxlbWVudHMgaW4gdGhlICJleHBlY3RlZCIgbGlzdCBidXQgbm90IGluIHRoZSAiYWN0dWFsIiBsaXN0LCBhbmQgdGhlDQogICAgc2Vjb25kIGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIGluIHRoZSAiYWN0dWFsIiBsaXN0IGJ1dCBub3QgaW4gdGhlDQogICAgImV4cGVjdGVkIiBsaXN0LiAgICBEdXBsaWNhdGUgZWxlbWVudHMgaW4gZWl0aGVyIGlucHV0IGxpc3QgYXJlIGlnbm9yZWQuDQogICAgIiIiDQogICAgaSA9IGogPSAwDQogICAgbWlzc2luZyA9IFtdDQogICAgdW5leHBlY3RlZCA9IFtdDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZSA9IGV4cGVjdGVkW2ldDQogICAgICAgICAgICBhID0gYWN0dWFsW2pdDQogICAgICAgICAgICBpZiBlIDwgYToNCiAgICAgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChlKQ0KICAgICAgICAgICAgICAgIGkgKz0gMQ0KICAgICAgICAgICAgICAgIHdoaWxlIGV4cGVjdGVkW2ldID09IGU6DQogICAgICAgICAgICAgICAgICAgIGkgKz0gMQ0KICAgICAgICAgICAgZWxpZiBlID4gYToNCiAgICAgICAgICAgICAgICB1bmV4cGVjdGVkLmFwcGVuZChhKQ0KICAgICAgICAgICAgICAgIGogKz0gMQ0KICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOg0KICAgICAgICAgICAgICAgICAgICBqICs9IDENCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgaSArPSAxDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICB3aGlsZSBleHBlY3RlZFtpXSA9PSBlOg0KICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxDQogICAgICAgICAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgICAgICAgICAgaiArPSAxDQogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOg0KICAgICAgICAgICAgICAgICAgICAgICAgaiArPSAxDQogICAgICAgIGV4Y2VwdCBJbmRleEVycm9yOg0KICAgICAgICAgICAgbWlzc2luZy5leHRlbmQoZXhwZWN0ZWRbaTpdKQ0KICAgICAgICAgICAgdW5leHBlY3RlZC5leHRlbmQoYWN0dWFsW2o6XSkNCiAgICAgICAgICAgIGJyZWFrDQogICAgcmV0dXJuIG1pc3NpbmcsIHVuZXhwZWN0ZWQNCg0KDQpkZWYgdW5vcmRlcmFibGVfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOg0KICAgICIiIlNhbWUgYmVoYXZpb3IgYXMgc29ydGVkX2xpc3RfZGlmZmVyZW5jZSBidXQNCiAgICBmb3IgbGlzdHMgb2YgdW5vcmRlcmFibGUgaXRlbXMgKGxpa2UgZGljdHMpLg0KDQogICAgQXMgaXQgZG9lcyBhIGxpbmVhciBzZWFyY2ggcGVyIGl0ZW0gKHJlbW92ZSkgaXQNCiAgICBoYXMgTyhuKm4pIHBlcmZvcm1hbmNlLiIiIg0KICAgIG1pc3NpbmcgPSBbXQ0KICAgIHdoaWxlIGV4cGVjdGVkOg0KICAgICAgICBpdGVtID0gZXhwZWN0ZWQucG9wKCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgYWN0dWFsLnJlbW92ZShpdGVtKQ0KICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoNCiAgICAgICAgICAgIG1pc3NpbmcuYXBwZW5kKGl0ZW0pDQoNCiAgICAjIGFueXRoaW5nIGxlZnQgaW4gYWN0dWFsIGlzIHVuZXhwZWN0ZWQNCiAgICByZXR1cm4gbWlzc2luZywgYWN0dWFsDQoNCmRlZiB0aHJlZV93YXlfY21wKHgsIHkpOg0KICAgICIiIlJldHVybiAtMSBpZiB4IDwgeSwgMCBpZiB4ID09IHkgYW5kIDEgaWYgeCA+IHkiIiINCiAgICByZXR1cm4gKHggPiB5KSAtICh4IDwgeSkNCg0KX01pc21hdGNoID0gbmFtZWR0dXBsZSgnTWlzbWF0Y2gnLCAnYWN0dWFsIGV4cGVjdGVkIHZhbHVlJykNCg0KZGVmIF9jb3VudF9kaWZmX2FsbF9wdXJwb3NlKGFjdHVhbCwgZXhwZWN0ZWQpOg0KICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInDQogICAgIyBlbGVtZW50cyBuZWVkIG5vdCBiZSBoYXNoYWJsZQ0KICAgIHMsIHQgPSBsaXN0KGFjdHVhbCksIGxpc3QoZXhwZWN0ZWQpDQogICAgbSwgbiA9IGxlbihzKSwgbGVuKHQpDQogICAgTlVMTCA9IG9iamVjdCgpDQogICAgcmVzdWx0ID0gW10NCiAgICBmb3IgaSwgZWxlbSBpbiBlbnVtZXJhdGUocyk6DQogICAgICAgIGlmIGVsZW0gaXMgTlVMTDoNCiAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGNudF9zID0gY250X3QgPSAwDQogICAgICAgIGZvciBqIGluIHJhbmdlKGksIG0pOg0KICAgICAgICAgICAgaWYgc1tqXSA9PSBlbGVtOg0KICAgICAgICAgICAgICAgIGNudF9zICs9IDENCiAgICAgICAgICAgICAgICBzW2pdID0gTlVMTA0KICAgICAgICBmb3Igaiwgb3RoZXJfZWxlbSBpbiBlbnVtZXJhdGUodCk6DQogICAgICAgICAgICBpZiBvdGhlcl9lbGVtID09IGVsZW06DQogICAgICAgICAgICAgICAgY250X3QgKz0gMQ0KICAgICAgICAgICAgICAgIHRbal0gPSBOVUxMDQogICAgICAgIGlmIGNudF9zICE9IGNudF90Og0KICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaChjbnRfcywgY250X3QsIGVsZW0pDQogICAgICAgICAgICByZXN1bHQuYXBwZW5kKGRpZmYpDQoNCiAgICBmb3IgaSwgZWxlbSBpbiBlbnVtZXJhdGUodCk6DQogICAgICAgIGlmIGVsZW0gaXMgTlVMTDoNCiAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGNudF90ID0gMA0KICAgICAgICBmb3IgaiBpbiByYW5nZShpLCBuKToNCiAgICAgICAgICAgIGlmIHRbal0gPT0gZWxlbToNCiAgICAgICAgICAgICAgICBjbnRfdCArPSAxDQogICAgICAgICAgICAgICAgdFtqXSA9IE5VTEwNCiAgICAgICAgZGlmZiA9IF9NaXNtYXRjaCgwLCBjbnRfdCwgZWxlbSkNCiAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQ0KICAgIHJldHVybiByZXN1bHQNCg0KZGVmIF9vcmRlcmVkX2NvdW50KGl0ZXJhYmxlKToNCiAgICAnUmV0dXJuIGRpY3Qgb2YgZWxlbWVudCBjb3VudHMsIGluIHRoZSBvcmRlciB0aGV5IHdlcmUgZmlyc3Qgc2VlbicNCiAgICBjID0gT3JkZXJlZERpY3QoKQ0KICAgIGZvciBlbGVtIGluIGl0ZXJhYmxlOg0KICAgICAgICBjW2VsZW1dID0gYy5nZXQoZWxlbSwgMCkgKyAxDQogICAgcmV0dXJuIGMNCg0KZGVmIF9jb3VudF9kaWZmX2hhc2hhYmxlKGFjdHVhbCwgZXhwZWN0ZWQpOg0KICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInDQogICAgIyBlbGVtZW50cyBtdXN0IGJlIGhhc2hhYmxlDQogICAgcywgdCA9IF9vcmRlcmVkX2NvdW50KGFjdHVhbCksIF9vcmRlcmVkX2NvdW50KGV4cGVjdGVkKQ0KICAgIHJlc3VsdCA9IFtdDQogICAgZm9yIGVsZW0sIGNudF9zIGluIHMuaXRlbXMoKToNCiAgICAgICAgY250X3QgPSB0LmdldChlbGVtLCAwKQ0KICAgICAgICBpZiBjbnRfcyAhPSBjbnRfdDoNCiAgICAgICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goY250X3MsIGNudF90LCBlbGVtKQ0KICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQ0KICAgIGZvciBlbGVtLCBjbnRfdCBpbiB0Lml0ZW1zKCk6DQogICAgICAgIGlmIGVsZW0gbm90IGluIHM6DQogICAgICAgICAgICBkaWZmID0gX01pc21hdGNoKDAsIGNudF90LCBlbGVtKQ0KICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQ0KICAgIHJldHVybiByZXN1bHQNCg==',
'/Lib/unittest/loader.py':'',
'/Lib/unittest/signals.py':'aW1wb3J0IHNpZ25hbA0KaW1wb3J0IHdlYWtyZWYNCg0KZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzDQoNCl9fdW5pdHRlc3QgPSBUcnVlDQoNCg0KY2xhc3MgX0ludGVycnVwdEhhbmRsZXIob2JqZWN0KToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVmYXVsdF9oYW5kbGVyKToNCiAgICAgICAgc2VsZi5jYWxsZWQgPSBGYWxzZQ0KICAgICAgICBzZWxmLmRlZmF1bHRfaGFuZGxlciA9IGRlZmF1bHRfaGFuZGxlcg0KDQogICAgZGVmIF9fY2FsbF9fKHNlbGYsIHNpZ251bSwgZnJhbWUpOg0KICAgICAgICBpbnN0YWxsZWRfaGFuZGxlciA9IHNpZ25hbC5nZXRzaWduYWwoc2lnbmFsLlNJR0lOVCkNCiAgICAgICAgaWYgaW5zdGFsbGVkX2hhbmRsZXIgaXMgbm90IHNlbGY6DQogICAgICAgICAgICAjIGlmIHdlIGFyZW4ndCB0aGUgaW5zdGFsbGVkIGhhbmRsZXIsIHRoZW4gZGVsZWdhdGUgaW1tZWRpYXRlbHkNCiAgICAgICAgICAgICMgdG8gdGhlIGRlZmF1bHQgaGFuZGxlcg0KICAgICAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIoc2lnbnVtLCBmcmFtZSkNCg0KICAgICAgICBpZiBzZWxmLmNhbGxlZDoNCiAgICAgICAgICAgIHNlbGYuZGVmYXVsdF9oYW5kbGVyKHNpZ251bSwgZnJhbWUpDQogICAgICAgIHNlbGYuY2FsbGVkID0gVHJ1ZQ0KICAgICAgICBmb3IgcmVzdWx0IGluIF9yZXN1bHRzLmtleXMoKToNCiAgICAgICAgICAgIHJlc3VsdC5zdG9wKCkNCg0KX3Jlc3VsdHMgPSB3ZWFrcmVmLldlYWtLZXlEaWN0aW9uYXJ5KCkNCmRlZiByZWdpc3RlclJlc3VsdChyZXN1bHQpOg0KICAgIF9yZXN1bHRzW3Jlc3VsdF0gPSAxDQoNCmRlZiByZW1vdmVSZXN1bHQocmVzdWx0KToNCiAgICByZXR1cm4gYm9vbChfcmVzdWx0cy5wb3AocmVzdWx0LCBOb25lKSkNCg0KX2ludGVycnVwdF9oYW5kbGVyID0gTm9uZQ0KZGVmIGluc3RhbGxIYW5kbGVyKCk6DQogICAgZ2xvYmFsIF9pbnRlcnJ1cHRfaGFuZGxlcg0KICAgIGlmIF9pbnRlcnJ1cHRfaGFuZGxlciBpcyBOb25lOg0KICAgICAgICBkZWZhdWx0X2hhbmRsZXIgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpDQogICAgICAgIF9pbnRlcnJ1cHRfaGFuZGxlciA9IF9JbnRlcnJ1cHRIYW5kbGVyKGRlZmF1bHRfaGFuZGxlcikNCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIpDQoNCg0KZGVmIHJlbW92ZUhhbmRsZXIobWV0aG9kPU5vbmUpOg0KICAgIGlmIG1ldGhvZCBpcyBub3QgTm9uZToNCiAgICAgICAgQHdyYXBzKG1ldGhvZCkNCiAgICAgICAgZGVmIGlubmVyKCphcmdzLCAqKmt3YXJncyk6DQogICAgICAgICAgICBpbml0aWFsID0gc2lnbmFsLmdldHNpZ25hbChzaWduYWwuU0lHSU5UKQ0KICAgICAgICAgICAgcmVtb3ZlSGFuZGxlcigpDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcmV0dXJuIG1ldGhvZCgqYXJncywgKiprd2FyZ3MpDQogICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW5pdGlhbCkNCiAgICAgICAgcmV0dXJuIGlubmVyDQoNCiAgICBnbG9iYWwgX2ludGVycnVwdF9oYW5kbGVyDQogICAgaWYgX2ludGVycnVwdF9oYW5kbGVyIGlzIG5vdCBOb25lOg0KICAgICAgICBzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdJTlQsIF9pbnRlcnJ1cHRfaGFuZGxlci5kZWZhdWx0X2hhbmRsZXIpDQo=',
'/Lib/unittest/case.py':'',
'/Lib/unittest/main.py':'IiIiVW5pdHRlc3QgbWFpbiBwcm9ncmFtIiIiCgppbXBvcnQgc3lzCmltcG9ydCBvcHRwYXJzZQppbXBvcnQgb3MKCmZyb20gLiBpbXBvcnQgbG9hZGVyLCBydW5uZXIKZnJvbSAuc2lnbmFscyBpbXBvcnQgaW5zdGFsbEhhbmRsZXIKCl9fdW5pdHRlc3QgPSBUcnVlCgpGQUlMRkFTVCAgICAgPSAiICAtZiwgLS1mYWlsZmFzdCAgIFN0b3Agb24gZmlyc3QgZmFpbHVyZVxuIgpDQVRDSEJSRUFLICAgPSAiICAtYywgLS1jYXRjaCAgICAgIENhdGNoIGNvbnRyb2wtQyBhbmQgZGlzcGxheSByZXN1bHRzXG4iCkJVRkZFUk9VVFBVVCA9ICIgIC1iLCAtLWJ1ZmZlciAgICAgQnVmZmVyIHN0ZG91dCBhbmQgc3RkZXJyIGR1cmluZyB0ZXN0IHJ1bnNcbiIKClVTQUdFX0FTX01BSU4gPSAiIiJcClVzYWdlOiAlKHByb2dOYW1lKXMgW29wdGlvbnNdIFt0ZXN0c10KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICBTaG93IHRoaXMgbWVzc2FnZQogIC12LCAtLXZlcmJvc2UgICAgVmVyYm9zZSBvdXRwdXQKICAtcSwgLS1xdWlldCAgICAgIE1pbmltYWwgb3V0cHV0CiUoZmFpbGZhc3QpcyUoY2F0Y2hicmVhaylzJShidWZmZXIpcwpFeGFtcGxlczoKICAlKHByb2dOYW1lKXMgdGVzdF9tb2R1bGUgICAgICAgICAgICAgICAtIHJ1biB0ZXN0cyBmcm9tIHRlc3RfbW9kdWxlCiAgJShwcm9nTmFtZSlzIG1vZHVsZS5UZXN0Q2xhc3MgICAgICAgICAgLSBydW4gdGVzdHMgZnJvbSBtb2R1bGUuVGVzdENsYXNzCiAgJShwcm9nTmFtZSlzIG1vZHVsZS5DbGFzcy50ZXN0X21ldGhvZCAgLSBydW4gc3BlY2lmaWVkIHRlc3QgbWV0aG9kCgpbdGVzdHNdIGNhbiBiZSBhIGxpc3Qgb2YgYW55IG51bWJlciBvZiB0ZXN0IG1vZHVsZXMsIGNsYXNzZXMgYW5kIHRlc3QKbWV0aG9kcy4KCkFsdGVybmF0aXZlIFVzYWdlOiAlKHByb2dOYW1lKXMgZGlzY292ZXIgW29wdGlvbnNdCgpPcHRpb25zOgogIC12LCAtLXZlcmJvc2UgICAgVmVyYm9zZSBvdXRwdXQKJShmYWlsZmFzdClzJShjYXRjaGJyZWFrKXMlKGJ1ZmZlcilzICAtcyBkaXJlY3RvcnkgICAgIERpcmVjdG9yeSB0byBzdGFydCBkaXNjb3ZlcnkgKCcuJyBkZWZhdWx0KQogIC1wIHBhdHRlcm4gICAgICAgUGF0dGVybiB0byBtYXRjaCB0ZXN0IGZpbGVzICgndGVzdCoucHknIGRlZmF1bHQpCiAgLXQgZGlyZWN0b3J5ICAgICBUb3AgbGV2ZWwgZGlyZWN0b3J5IG9mIHByb2plY3QgKGRlZmF1bHQgdG8KICAgICAgICAgICAgICAgICAgIHN0YXJ0IGRpcmVjdG9yeSkKCkZvciB0ZXN0IGRpc2NvdmVyeSBhbGwgdGVzdCBtb2R1bGVzIG11c3QgYmUgaW1wb3J0YWJsZSBmcm9tIHRoZSB0b3AKbGV2ZWwgZGlyZWN0b3J5IG9mIHRoZSBwcm9qZWN0LgoiIiIKClVTQUdFX0ZST01fTU9EVUxFID0gIiIiXApVc2FnZTogJShwcm9nTmFtZSlzIFtvcHRpb25zXSBbdGVzdF0gWy4uLl0KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICBTaG93IHRoaXMgbWVzc2FnZQogIC12LCAtLXZlcmJvc2UgICAgVmVyYm9zZSBvdXRwdXQKICAtcSwgLS1xdWlldCAgICAgIE1pbmltYWwgb3V0cHV0CiUoZmFpbGZhc3QpcyUoY2F0Y2hicmVhaylzJShidWZmZXIpcwpFeGFtcGxlczoKICAlKHByb2dOYW1lKXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBydW4gZGVmYXVsdCBzZXQgb2YgdGVzdHMKICAlKHByb2dOYW1lKXMgTXlUZXN0U3VpdGUgICAgICAgICAgICAgICAgICAgLSBydW4gc3VpdGUgJ015VGVzdFN1aXRlJwogICUocHJvZ05hbWUpcyBNeVRlc3RDYXNlLnRlc3RTb21ldGhpbmcgICAgICAtIHJ1biBNeVRlc3RDYXNlLnRlc3RTb21ldGhpbmcKICAlKHByb2dOYW1lKXMgTXlUZXN0Q2FzZSAgICAgICAgICAgICAgICAgICAgLSBydW4gYWxsICd0ZXN0KicgdGVzdCBtZXRob2RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gTXlUZXN0Q2FzZQoiIiIKCmRlZiBfY29udmVydF9uYW1lKG5hbWUpOgogICAgIyBvbiBMaW51eCAvIE1hYyBPUyBYICdmb28uUFknIGlzIG5vdCBpbXBvcnRhYmxlLCBidXQgb24KICAgICMgV2luZG93cyBpdCBpcy4gU2ltcGxlciB0byBkbyBhIGNhc2UgaW5zZW5zaXRpdmUgbWF0Y2gKICAgICMgYSBiZXR0ZXIgY2hlY2sgd291bGQgYmUgdG8gY2hlY2sgdGhhdCB0aGUgbmFtZSBpcyBhCiAgICAjIHZhbGlkIFB5dGhvbiBtb2R1bGUgbmFtZS4KICAgIGlmIG9zLnBhdGguaXNmaWxlKG5hbWUpIGFuZCBuYW1lLmxvd2VyKCkuZW5kc3dpdGgoJy5weScpOgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMobmFtZSk6CiAgICAgICAgICAgIHJlbF9wYXRoID0gb3MucGF0aC5yZWxwYXRoKG5hbWUsIG9zLmdldGN3ZCgpKQogICAgICAgICAgICBpZiBvcy5wYXRoLmlzYWJzKHJlbF9wYXRoKSBvciByZWxfcGF0aC5zdGFydHN3aXRoKG9zLnBhcmRpcik6CiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZQogICAgICAgICAgICBuYW1lID0gcmVsX3BhdGgKICAgICAgICAjIG9uIFdpbmRvd3MgYm90aCAnXCcgYW5kICcvJyBhcmUgdXNlZCBhcyBwYXRoCiAgICAgICAgIyBzZXBhcmF0b3JzLiBCZXR0ZXIgdG8gcmVwbGFjZSBib3RoIHRoYW4gcmVseSBvbiBvcy5wYXRoLnNlcAogICAgICAgIHJldHVybiBuYW1lWzotM10ucmVwbGFjZSgnXFwnLCAnLicpLnJlcGxhY2UoJy8nLCAnLicpCiAgICByZXR1cm4gbmFtZQoKZGVmIF9jb252ZXJ0X25hbWVzKG5hbWVzKToKICAgIHJldHVybiBbX2NvbnZlcnRfbmFtZShuYW1lKSBmb3IgbmFtZSBpbiBuYW1lc10KCgpjbGFzcyBUZXN0UHJvZ3JhbShvYmplY3QpOgogICAgIiIiQSBjb21tYW5kLWxpbmUgcHJvZ3JhbSB0aGF0IHJ1bnMgYSBzZXQgb2YgdGVzdHM7IHRoaXMgaXMgcHJpbWFyaWx5CiAgICAgICBmb3IgbWFraW5nIHRlc3QgbW9kdWxlcyBjb252ZW5pZW50bHkgZXhlY3V0YWJsZS4KICAgICIiIgogICAgVVNBR0UgPSBVU0FHRV9GUk9NX01PRFVMRQoKICAgICMgZGVmYXVsdHMgZm9yIHRlc3RpbmcKICAgIGZhaWxmYXN0ID0gY2F0Y2hicmVhayA9IGJ1ZmZlciA9IHByb2dOYW1lID0gd2FybmluZ3MgPSBOb25lCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG1vZHVsZT0nX19tYWluX18nLCBkZWZhdWx0VGVzdD1Ob25lLCBhcmd2PU5vbmUsCiAgICAgICAgICAgICAgICAgICAgdGVzdFJ1bm5lcj1Ob25lLCB0ZXN0TG9hZGVyPWxvYWRlci5kZWZhdWx0VGVzdExvYWRlciwKICAgICAgICAgICAgICAgICAgICBleGl0PVRydWUsIHZlcmJvc2l0eT0xLCBmYWlsZmFzdD1Ob25lLCBjYXRjaGJyZWFrPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgYnVmZmVyPU5vbmUsIHdhcm5pbmdzPU5vbmUpOgogICAgICAgIGlmIGlzaW5zdGFuY2UobW9kdWxlLCBzdHIpOgogICAgICAgICAgICBzZWxmLm1vZHVsZSA9IF9faW1wb3J0X18obW9kdWxlKQogICAgICAgICAgICBmb3IgcGFydCBpbiBtb2R1bGUuc3BsaXQoJy4nKVsxOl06CiAgICAgICAgICAgICAgICBzZWxmLm1vZHVsZSA9IGdldGF0dHIoc2VsZi5tb2R1bGUsIHBhcnQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5tb2R1bGUgPSBtb2R1bGUKICAgICAgICBpZiBhcmd2IGlzIE5vbmU6CiAgICAgICAgICAgIGFyZ3YgPSBzeXMuYXJndgoKICAgICAgICBzZWxmLmV4aXQgPSBleGl0CiAgICAgICAgc2VsZi5mYWlsZmFzdCA9IGZhaWxmYXN0CiAgICAgICAgc2VsZi5jYXRjaGJyZWFrID0gY2F0Y2hicmVhawogICAgICAgIHNlbGYudmVyYm9zaXR5ID0gdmVyYm9zaXR5CiAgICAgICAgc2VsZi5idWZmZXIgPSBidWZmZXIKICAgICAgICBpZiB3YXJuaW5ncyBpcyBOb25lIGFuZCBub3Qgc3lzLndhcm5vcHRpb25zOgogICAgICAgICAgICAjIGV2ZW4gaWYgRHJlcHJlY2F0aW9uV2FybmluZ3MgYXJlIGlnbm9yZWQgYnkgZGVmYXVsdAogICAgICAgICAgICAjIHByaW50IHRoZW0gYW55d2F5IHVubGVzcyBvdGhlciB3YXJuaW5ncyBzZXR0aW5ncyBhcmUKICAgICAgICAgICAgIyBzcGVjaWZpZWQgYnkgdGhlIHdhcm5pbmdzIGFyZyBvciB0aGUgLVcgcHl0aG9uIGZsYWcKICAgICAgICAgICAgc2VsZi53YXJuaW5ncyA9ICdkZWZhdWx0JwogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgaGVyZSBzZWxmLndhcm5pbmdzIGlzIHNldCBlaXRoZXIgdG8gdGhlIHZhbHVlIHBhc3NlZAogICAgICAgICAgICAjIHRvIHRoZSB3YXJuaW5ncyBhcmdzIG9yIHRvIE5vbmUuCiAgICAgICAgICAgICMgSWYgdGhlIHVzZXIgZGlkbid0IHBhc3MgYSB2YWx1ZSBzZWxmLndhcm5pbmdzIHdpbGwKICAgICAgICAgICAgIyBiZSBOb25lLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGJlaGF2aW9yIGlzIHVuY2hhbmdlZAogICAgICAgICAgICAjIGFuZCBkZXBlbmRzIG9uIHRoZSB2YWx1ZXMgcGFzc2VkIHRvIC1XLgogICAgICAgICAgICBzZWxmLndhcm5pbmdzID0gd2FybmluZ3MKICAgICAgICBzZWxmLmRlZmF1bHRUZXN0ID0gZGVmYXVsdFRlc3QKICAgICAgICBzZWxmLnRlc3RSdW5uZXIgPSB0ZXN0UnVubmVyCiAgICAgICAgc2VsZi50ZXN0TG9hZGVyID0gdGVzdExvYWRlcgogICAgICAgIHNlbGYucHJvZ05hbWUgPSBvcy5wYXRoLmJhc2VuYW1lKGFyZ3ZbMF0pCiAgICAgICAgc2VsZi5wYXJzZUFyZ3MoYXJndikKICAgICAgICBzZWxmLnJ1blRlc3RzKCkKCiAgICBkZWYgdXNhZ2VFeGl0KHNlbGYsIG1zZz1Ob25lKToKICAgICAgICBpZiBtc2c6CiAgICAgICAgICAgIHByaW50KG1zZykKICAgICAgICB1c2FnZSA9IHsncHJvZ05hbWUnOiBzZWxmLnByb2dOYW1lLCAnY2F0Y2hicmVhayc6ICcnLCAnZmFpbGZhc3QnOiAnJywKICAgICAgICAgICAgICAgICAnYnVmZmVyJzogJyd9CiAgICAgICAgaWYgc2VsZi5mYWlsZmFzdCAhPSBGYWxzZToKICAgICAgICAgICAgdXNhZ2VbJ2ZhaWxmYXN0J10gPSBGQUlMRkFTVAogICAgICAgIGlmIHNlbGYuY2F0Y2hicmVhayAhPSBGYWxzZToKICAgICAgICAgICAgdXNhZ2VbJ2NhdGNoYnJlYWsnXSA9IENBVENIQlJFQUsKICAgICAgICBpZiBzZWxmLmJ1ZmZlciAhPSBGYWxzZToKICAgICAgICAgICAgdXNhZ2VbJ2J1ZmZlciddID0gQlVGRkVST1VUUFVUCiAgICAgICAgcHJpbnQoc2VsZi5VU0FHRSAlIHVzYWdlKQogICAgICAgIHN5cy5leGl0KDIpCgogICAgZGVmIHBhcnNlQXJncyhzZWxmLCBhcmd2KToKICAgICAgICBpZiAoKGxlbihhcmd2KSA+IDEgYW5kIGFyZ3ZbMV0ubG93ZXIoKSA9PSAnZGlzY292ZXInKSBvcgogICAgICAgICAgICAobGVuKGFyZ3YpID09IDEgYW5kIHNlbGYubW9kdWxlIGlzIE5vbmUpKToKICAgICAgICAgICAgc2VsZi5fZG9fZGlzY292ZXJ5KGFyZ3ZbMjpdKQogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgcGFyc2VyID0gc2VsZi5fZ2V0T3B0UGFyc2VyKCkKICAgICAgICBvcHRpb25zLCBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoYXJndlsxOl0pCiAgICAgICAgc2VsZi5fc2V0QXR0cmlidXRlc0Zyb21PcHRpb25zKG9wdGlvbnMpCgogICAgICAgIGlmIGxlbihhcmdzKSA9PSAwIGFuZCBzZWxmLm1vZHVsZSBpcyBOb25lOgogICAgICAgICAgICAjIHRoaXMgYWxsb3dzICJweXRob24gLW0gdW5pdHRlc3QgLXYiIHRvIHN0aWxsIHdvcmsgZm9yCiAgICAgICAgICAgICMgdGVzdCBkaXNjb3ZlcnkuIFRoaXMgbWVhbnMgLWMgLyAtYiAvIC12IC8gLWYgb3B0aW9ucyB3aWxsCiAgICAgICAgICAgICMgYmUgaGFuZGxlZCB0d2ljZSwgd2hpY2ggaXMgaGFybWxlc3MgYnV0IG5vdCBpZGVhbC4KICAgICAgICAgICAgc2VsZi5fZG9fZGlzY292ZXJ5KGFyZ3ZbMTpdKQogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgaWYgbGVuKGFyZ3MpID09IDAgYW5kIHNlbGYuZGVmYXVsdFRlc3QgaXMgTm9uZToKICAgICAgICAgICAgIyBjcmVhdGVUZXN0cyB3aWxsIGxvYWQgdGVzdHMgZnJvbSBzZWxmLm1vZHVsZQogICAgICAgICAgICBzZWxmLnRlc3ROYW1lcyA9IE5vbmUKICAgICAgICBlbGlmIGxlbihhcmdzKSA+IDA6CiAgICAgICAgICAgIHNlbGYudGVzdE5hbWVzID0gX2NvbnZlcnRfbmFtZXMoYXJncykKICAgICAgICAgICAgaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgICAgICAgICAgICAgICMgdG8gc3VwcG9ydCBweXRob24gLW0gdW5pdHRlc3QgLi4uCiAgICAgICAgICAgICAgICBzZWxmLm1vZHVsZSA9IE5vbmUKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnRlc3ROYW1lcyA9IChzZWxmLmRlZmF1bHRUZXN0LCkKICAgICAgICBzZWxmLmNyZWF0ZVRlc3RzKCkKCiAgICBkZWYgY3JlYXRlVGVzdHMoc2VsZik6CiAgICAgICAgaWYgc2VsZi50ZXN0TmFtZXMgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi50ZXN0ID0gc2VsZi50ZXN0TG9hZGVyLmxvYWRUZXN0c0Zyb21Nb2R1bGUoc2VsZi5tb2R1bGUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi50ZXN0ID0gc2VsZi50ZXN0TG9hZGVyLmxvYWRUZXN0c0Zyb21OYW1lcyhzZWxmLnRlc3ROYW1lcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1vZHVsZSkKCiAgICBkZWYgX2dldE9wdFBhcnNlcihzZWxmKToKICAgICAgICBwYXJzZXIgPSBvcHRwYXJzZS5PcHRpb25QYXJzZXIoKQogICAgICAgIHBhcnNlci5wcm9nID0gc2VsZi5wcm9nTmFtZQogICAgICAgIHBhcnNlci5hZGRfb3B0aW9uKCctdicsICctLXZlcmJvc2UnLCBkZXN0PSd2ZXJib3NlJywgZGVmYXVsdD1GYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSdWZXJib3NlIG91dHB1dCcsIGFjdGlvbj0nc3RvcmVfdHJ1ZScpCiAgICAgICAgcGFyc2VyLmFkZF9vcHRpb24oJy1xJywgJy0tcXVpZXQnLCBkZXN0PSdxdWlldCcsIGRlZmF1bHQ9RmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0nUXVpZXQgb3V0cHV0JywgYWN0aW9uPSdzdG9yZV90cnVlJykKCiAgICAgICAgaWYgc2VsZi5mYWlsZmFzdCAhPSBGYWxzZToKICAgICAgICAgICAgcGFyc2VyLmFkZF9vcHRpb24oJy1mJywgJy0tZmFpbGZhc3QnLCBkZXN0PSdmYWlsZmFzdCcsIGRlZmF1bHQ9RmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9J1N0b3Agb24gZmlyc3QgZmFpbCBvciBlcnJvcicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbj0nc3RvcmVfdHJ1ZScpCiAgICAgICAgaWYgc2VsZi5jYXRjaGJyZWFrICE9IEZhbHNlOgogICAgICAgICAgICBwYXJzZXIuYWRkX29wdGlvbignLWMnLCAnLS1jYXRjaCcsIGRlc3Q9J2NhdGNoYnJlYWsnLCBkZWZhdWx0PUZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSdDYXRjaCBjdHJsLUMgYW5kIGRpc3BsYXkgcmVzdWx0cyBzbyBmYXInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb249J3N0b3JlX3RydWUnKQogICAgICAgIGlmIHNlbGYuYnVmZmVyICE9IEZhbHNlOgogICAgICAgICAgICBwYXJzZXIuYWRkX29wdGlvbignLWInLCAnLS1idWZmZXInLCBkZXN0PSdidWZmZXInLCBkZWZhdWx0PUZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSdCdWZmZXIgc3Rkb3V0IGFuZCBzdGRlcnIgZHVyaW5nIHRlc3RzJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uPSdzdG9yZV90cnVlJykKICAgICAgICByZXR1cm4gcGFyc2VyCgogICAgZGVmIF9zZXRBdHRyaWJ1dGVzRnJvbU9wdGlvbnMoc2VsZiwgb3B0aW9ucyk6CiAgICAgICAgIyBvbmx5IHNldCBvcHRpb25zIGZyb20gdGhlIHBhcnNpbmcgaGVyZQogICAgICAgICMgaWYgdGhleSB3ZXJlbid0IHNldCBleHBsaWNpdGx5IGluIHRoZSBjb25zdHJ1Y3RvcgogICAgICAgIGlmIHNlbGYuZmFpbGZhc3QgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5mYWlsZmFzdCA9IG9wdGlvbnMuZmFpbGZhc3QKICAgICAgICBpZiBzZWxmLmNhdGNoYnJlYWsgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5jYXRjaGJyZWFrID0gb3B0aW9ucy5jYXRjaGJyZWFrCiAgICAgICAgaWYgc2VsZi5idWZmZXIgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5idWZmZXIgPSBvcHRpb25zLmJ1ZmZlcgoKICAgICAgICBpZiBvcHRpb25zLnZlcmJvc2U6CiAgICAgICAgICAgIHNlbGYudmVyYm9zaXR5ID0gMgogICAgICAgIGVsaWYgb3B0aW9ucy5xdWlldDoKICAgICAgICAgICAgc2VsZi52ZXJib3NpdHkgPSAwCgogICAgZGVmIF9hZGREaXNjb3ZlcnlPcHRpb25zKHNlbGYsIHBhcnNlcik6CiAgICAgICAgcGFyc2VyLmFkZF9vcHRpb24oJy1zJywgJy0tc3RhcnQtZGlyZWN0b3J5JywgZGVzdD0nc3RhcnQnLCBkZWZhdWx0PScuJywKICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSJEaXJlY3RvcnkgdG8gc3RhcnQgZGlzY292ZXJ5ICgnLicgZGVmYXVsdCkiKQogICAgICAgIHBhcnNlci5hZGRfb3B0aW9uKCctcCcsICctLXBhdHRlcm4nLCBkZXN0PSdwYXR0ZXJuJywgZGVmYXVsdD0ndGVzdCoucHknLAogICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9IlBhdHRlcm4gdG8gbWF0Y2ggdGVzdHMgKCd0ZXN0Ki5weScgZGVmYXVsdCkiKQogICAgICAgIHBhcnNlci5hZGRfb3B0aW9uKCctdCcsICctLXRvcC1sZXZlbC1kaXJlY3RvcnknLCBkZXN0PSd0b3AnLCBkZWZhdWx0PU5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0nVG9wIGxldmVsIGRpcmVjdG9yeSBvZiBwcm9qZWN0IChkZWZhdWx0cyB0byBzdGFydCBkaXJlY3RvcnkpJykKCiAgICBkZWYgX2RvX2Rpc2NvdmVyeShzZWxmLCBhcmd2LCBMb2FkZXI9bG9hZGVyLlRlc3RMb2FkZXIpOgogICAgICAgICMgaGFuZGxlIGNvbW1hbmQgbGluZSBhcmdzIGZvciB0ZXN0IGRpc2NvdmVyeQogICAgICAgIHNlbGYucHJvZ05hbWUgPSAnJXMgZGlzY292ZXInICUgc2VsZi5wcm9nTmFtZQogICAgICAgIHBhcnNlciA9IHNlbGYuX2dldE9wdFBhcnNlcigpCiAgICAgICAgc2VsZi5fYWRkRGlzY292ZXJ5T3B0aW9ucyhwYXJzZXIpCgogICAgICAgIG9wdGlvbnMsIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncyhhcmd2KQogICAgICAgIGlmIGxlbihhcmdzKSA+IDM6CiAgICAgICAgICAgIHNlbGYudXNhZ2VFeGl0KCkKCiAgICAgICAgZm9yIG5hbWUsIHZhbHVlIGluIHppcCgoJ3N0YXJ0JywgJ3BhdHRlcm4nLCAndG9wJyksIGFyZ3MpOgogICAgICAgICAgICBzZXRhdHRyKG9wdGlvbnMsIG5hbWUsIHZhbHVlKQoKICAgICAgICBzZWxmLl9zZXRBdHRyaWJ1dGVzRnJvbU9wdGlvbnMob3B0aW9ucykKCiAgICAgICAgc3RhcnRfZGlyID0gb3B0aW9ucy5zdGFydAogICAgICAgIHBhdHRlcm4gPSBvcHRpb25zLnBhdHRlcm4KICAgICAgICB0b3BfbGV2ZWxfZGlyID0gb3B0aW9ucy50b3AKCiAgICAgICAgbG9hZGVyID0gTG9hZGVyKCkKICAgICAgICBzZWxmLnRlc3QgPSBsb2FkZXIuZGlzY292ZXIoc3RhcnRfZGlyLCBwYXR0ZXJuLCB0b3BfbGV2ZWxfZGlyKQoKICAgIGRlZiBydW5UZXN0cyhzZWxmKToKICAgICAgICBpZiBzZWxmLmNhdGNoYnJlYWs6CiAgICAgICAgICAgIGluc3RhbGxIYW5kbGVyKCkKICAgICAgICBpZiBzZWxmLnRlc3RSdW5uZXIgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi50ZXN0UnVubmVyID0gcnVubmVyLlRleHRUZXN0UnVubmVyCiAgICAgICAgaWYgaXNpbnN0YW5jZShzZWxmLnRlc3RSdW5uZXIsIHR5cGUpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB0ZXN0UnVubmVyID0gc2VsZi50ZXN0UnVubmVyKHZlcmJvc2l0eT1zZWxmLnZlcmJvc2l0eSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbGZhc3Q9c2VsZi5mYWlsZmFzdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyPXNlbGYuYnVmZmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncz1zZWxmLndhcm5pbmdzKQogICAgICAgICAgICBleGNlcHQgVHlwZUVycm9yOgogICAgICAgICAgICAgICAgIyBkaWRuJ3QgYWNjZXB0IHRoZSB2ZXJib3NpdHksIGJ1ZmZlciBvciBmYWlsZmFzdCBhcmd1bWVudHMKICAgICAgICAgICAgICAgIHRlc3RSdW5uZXIgPSBzZWxmLnRlc3RSdW5uZXIoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgaXQgaXMgYXNzdW1lZCB0byBiZSBhIFRlc3RSdW5uZXIgaW5zdGFuY2UKICAgICAgICAgICAgdGVzdFJ1bm5lciA9IHNlbGYudGVzdFJ1bm5lcgogICAgICAgIHNlbGYucmVzdWx0ID0gdGVzdFJ1bm5lci5ydW4oc2VsZi50ZXN0KQogICAgICAgIGlmIHNlbGYuZXhpdDoKICAgICAgICAgICAgc3lzLmV4aXQobm90IHNlbGYucmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkKCm1haW4gPSBUZXN0UHJvZ3JhbQo=',
'/Lib/unittest/test/support.py':'aW1wb3J0IHVuaXR0ZXN0DQoNCg0KY2xhc3MgVGVzdEVxdWFsaXR5KG9iamVjdCk6DQogICAgIiIiVXNlZCBhcyBhIG1peGluIGZvciBUZXN0Q2FzZSIiIg0KDQogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2VxX18gaW1wbGVtZW50YXRpb24NCiAgICBkZWYgdGVzdF9lcShzZWxmKToNCiAgICAgICAgZm9yIG9ial8xLCBvYmpfMiBpbiBzZWxmLmVxX3BhaXJzOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChvYmpfMSwgb2JqXzIpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG9ial8yLCBvYmpfMSkNCg0KICAgICMgQ2hlY2sgZm9yIGEgdmFsaWQgX19uZV9fIGltcGxlbWVudGF0aW9uDQogICAgZGVmIHRlc3RfbmUoc2VsZik6DQogICAgICAgIGZvciBvYmpfMSwgb2JqXzIgaW4gc2VsZi5uZV9wYWlyczoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwob2JqXzEsIG9ial8yKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnROb3RFcXVhbChvYmpfMiwgb2JqXzEpDQoNCmNsYXNzIFRlc3RIYXNoaW5nKG9iamVjdCk6DQogICAgIiIiVXNlZCBhcyBhIG1peGluIGZvciBUZXN0Q2FzZSIiIg0KDQogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2hhc2hfXyBpbXBsZW1lbnRhdGlvbg0KICAgIGRlZiB0ZXN0X2hhc2goc2VsZik6DQogICAgICAgIGZvciBvYmpfMSwgb2JqXzIgaW4gc2VsZi5lcV9wYWlyczoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBpZiBub3QgaGFzaChvYmpfMSkgPT0gaGFzaChvYmpfMik6DQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiJXIgYW5kICVyIGRvIG5vdCBoYXNoIGVxdWFsIiAlIChvYmpfMSwgb2JqXzIpKQ0KICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0Og0KICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgc2VsZi5mYWlsKCJQcm9ibGVtIGhhc2hpbmcgJXIgYW5kICVyOiAlcyIgJSAob2JqXzEsIG9ial8yLCBlKSkNCg0KICAgICAgICBmb3Igb2JqXzEsIG9ial8yIGluIHNlbGYubmVfcGFpcnM6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgaWYgaGFzaChvYmpfMSkgPT0gaGFzaChvYmpfMik6DQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiJXMgYW5kICVzIGhhc2ggZXF1YWwsIGJ1dCBzaG91bGRuJ3QiICUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvYmpfMSwgb2JqXzIpKQ0KICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0Og0KICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgc2VsZi5mYWlsKCJQcm9ibGVtIGhhc2hpbmcgJXMgYW5kICVzOiAlcyIgJSAob2JqXzEsIG9ial8yLCBlKSkNCg0KDQpjbGFzcyBMb2dnaW5nUmVzdWx0KHVuaXR0ZXN0LlRlc3RSZXN1bHQpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBsb2cpOg0KICAgICAgICBzZWxmLl9ldmVudHMgPSBsb2cNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpDQoNCiAgICBkZWYgc3RhcnRUZXN0KHNlbGYsIHRlc3QpOg0KICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdzdGFydFRlc3QnKQ0KICAgICAgICBzdXBlcigpLnN0YXJ0VGVzdCh0ZXN0KQ0KDQogICAgZGVmIHN0YXJ0VGVzdFJ1bihzZWxmKToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RhcnRUZXN0UnVuJykNCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuc3RhcnRUZXN0UnVuKCkNCg0KICAgIGRlZiBzdG9wVGVzdChzZWxmLCB0ZXN0KToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RvcFRlc3QnKQ0KICAgICAgICBzdXBlcigpLnN0b3BUZXN0KHRlc3QpDQoNCiAgICBkZWYgc3RvcFRlc3RSdW4oc2VsZik6DQogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ3N0b3BUZXN0UnVuJykNCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuc3RvcFRlc3RSdW4oKQ0KDQogICAgZGVmIGFkZEZhaWx1cmUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRGYWlsdXJlJykNCiAgICAgICAgc3VwZXIoKS5hZGRGYWlsdXJlKCphcmdzKQ0KDQogICAgZGVmIGFkZFN1Y2Nlc3Moc2VsZiwgKmFyZ3MpOg0KICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRTdWNjZXNzJykNCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuYWRkU3VjY2VzcygqYXJncykNCg0KICAgIGRlZiBhZGRFcnJvcihzZWxmLCAqYXJncyk6DQogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ2FkZEVycm9yJykNCiAgICAgICAgc3VwZXIoKS5hZGRFcnJvcigqYXJncykNCg0KICAgIGRlZiBhZGRTa2lwKHNlbGYsICphcmdzKToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkU2tpcCcpDQogICAgICAgIHN1cGVyKExvZ2dpbmdSZXN1bHQsIHNlbGYpLmFkZFNraXAoKmFyZ3MpDQoNCiAgICBkZWYgYWRkRXhwZWN0ZWRGYWlsdXJlKHNlbGYsICphcmdzKToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRXhwZWN0ZWRGYWlsdXJlJykNCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuYWRkRXhwZWN0ZWRGYWlsdXJlKCphcmdzKQ0KDQogICAgZGVmIGFkZFVuZXhwZWN0ZWRTdWNjZXNzKHNlbGYsICphcmdzKToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkVW5leHBlY3RlZFN1Y2Nlc3MnKQ0KICAgICAgICBzdXBlcihMb2dnaW5nUmVzdWx0LCBzZWxmKS5hZGRVbmV4cGVjdGVkU3VjY2VzcygqYXJncykNCg0KDQpjbGFzcyBSZXN1bHRXaXRoTm9TdGFydFRlc3RSdW5TdG9wVGVzdFJ1bihvYmplY3QpOg0KICAgICIiIkFuIG9iamVjdCBob25vdXJpbmcgVGVzdFJlc3VsdCBiZWZvcmUgc3RhcnRUZXN0UnVuL3N0b3BUZXN0UnVuLiIiIg0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLmZhaWx1cmVzID0gW10NCiAgICAgICAgc2VsZi5lcnJvcnMgPSBbXQ0KICAgICAgICBzZWxmLnRlc3RzUnVuID0gMA0KICAgICAgICBzZWxmLnNraXBwZWQgPSBbXQ0KICAgICAgICBzZWxmLmV4cGVjdGVkRmFpbHVyZXMgPSBbXQ0KICAgICAgICBzZWxmLnVuZXhwZWN0ZWRTdWNjZXNzZXMgPSBbXQ0KICAgICAgICBzZWxmLnNob3VsZFN0b3AgPSBGYWxzZQ0KDQogICAgZGVmIHN0YXJ0VGVzdChzZWxmLCB0ZXN0KToNCiAgICAgICAgcGFzcw0KDQogICAgZGVmIHN0b3BUZXN0KHNlbGYsIHRlc3QpOg0KICAgICAgICBwYXNzDQoNCiAgICBkZWYgYWRkRXJyb3Ioc2VsZiwgdGVzdCk6DQogICAgICAgIHBhc3MNCg0KICAgIGRlZiBhZGRGYWlsdXJlKHNlbGYsIHRlc3QpOg0KICAgICAgICBwYXNzDQoNCiAgICBkZWYgYWRkU3VjY2VzcyhzZWxmLCB0ZXN0KToNCiAgICAgICAgcGFzcw0KDQogICAgZGVmIHdhc1N1Y2Nlc3NmdWwoc2VsZik6DQogICAgICAgIHJldHVybiBUcnVlDQo=',
'/Lib/unittest/test/test_case.py':'',
'/Lib/unittest/test/test_skipping.py':'aW1wb3J0IHVuaXR0ZXN0DQoNCmZyb20gLnN1cHBvcnQgaW1wb3J0IExvZ2dpbmdSZXN1bHQNCg0KDQpjbGFzcyBUZXN0X1Rlc3RTa2lwcGluZyh1bml0dGVzdC5UZXN0Q2FzZSk6DQoNCiAgICBkZWYgdGVzdF9za2lwcGluZyhzZWxmKToNCiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIGRlZiB0ZXN0X3NraXBfbWUoc2VsZik6DQogICAgICAgICAgICAgICAgc2VsZi5za2lwVGVzdCgic2tpcCIpDQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0X3NraXBfbWUiKQ0KICAgICAgICB0ZXN0LnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLCBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0J10pDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdCwgInNraXAiKV0pDQoNCiAgICAgICAgIyBUcnkgbGV0dGluZyBzZXRVcCBza2lwIHRoZSB0ZXN0IG5vdy4NCiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIGRlZiBzZXRVcChzZWxmKToNCiAgICAgICAgICAgICAgICBzZWxmLnNraXBUZXN0KCJ0ZXN0aW5nIikNCiAgICAgICAgICAgIGRlZiB0ZXN0X25vdGhpbmcoc2VsZik6IHBhc3MNCiAgICAgICAgZXZlbnRzID0gW10NCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpDQogICAgICAgIHRlc3QgPSBGb28oInRlc3Rfbm90aGluZyIpDQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIFsnc3RhcnRUZXN0JywgJ2FkZFNraXAnLCAnc3RvcFRlc3QnXSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0LCAidGVzdGluZyIpXSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQudGVzdHNSdW4sIDEpDQoNCiAgICBkZWYgdGVzdF9za2lwcGluZ19kZWNvcmF0b3JzKHNlbGYpOg0KICAgICAgICBvcF90YWJsZSA9ICgodW5pdHRlc3Quc2tpcFVubGVzcywgRmFsc2UsIFRydWUpLA0KICAgICAgICAgICAgICAgICAgICAodW5pdHRlc3Quc2tpcElmLCBUcnVlLCBGYWxzZSkpDQogICAgICAgIGZvciBkZWNvLCBkb19za2lwLCBkb250X3NraXAgaW4gb3BfdGFibGU6DQogICAgICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgICAgIEBkZWNvKGRvX3NraXAsICJ0ZXN0aW5nIikNCiAgICAgICAgICAgICAgICBkZWYgdGVzdF9za2lwKHNlbGYpOiBwYXNzDQoNCiAgICAgICAgICAgICAgICBAZGVjbyhkb250X3NraXAsICJ0ZXN0aW5nIikNCiAgICAgICAgICAgICAgICBkZWYgdGVzdF9kb250X3NraXAoc2VsZik6IHBhc3MNCiAgICAgICAgICAgIHRlc3RfZG9fc2tpcCA9IEZvbygidGVzdF9za2lwIikNCiAgICAgICAgICAgIHRlc3RfZG9udF9za2lwID0gRm9vKCJ0ZXN0X2RvbnRfc2tpcCIpDQogICAgICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF9kb19za2lwLCB0ZXN0X2RvbnRfc2tpcF0pDQogICAgICAgICAgICBldmVudHMgPSBbXQ0KICAgICAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpDQogICAgICAgICAgICBzdWl0ZS5ydW4ocmVzdWx0KQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsZW4ocmVzdWx0LnNraXBwZWQpLCAxKQ0KICAgICAgICAgICAgZXhwZWN0ZWQgPSBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0JywNCiAgICAgICAgICAgICAgICAgICAgICAgICdzdGFydFRlc3QnLCAnYWRkU3VjY2VzcycsICdzdG9wVGVzdCddDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgZXhwZWN0ZWQpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC50ZXN0c1J1biwgMikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdF9kb19za2lwLCAidGVzdGluZyIpXSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShyZXN1bHQud2FzU3VjY2Vzc2Z1bCgpKQ0KDQogICAgZGVmIHRlc3Rfc2tpcF9jbGFzcyhzZWxmKToNCiAgICAgICAgQHVuaXR0ZXN0LnNraXAoInRlc3RpbmciKQ0KICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgZGVmIHRlc3RfMShzZWxmKToNCiAgICAgICAgICAgICAgICByZWNvcmQuYXBwZW5kKDEpDQogICAgICAgIHJlY29yZCA9IFtdDQogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQ0KICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0XzEiKQ0KICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pDQogICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdCwgInRlc3RpbmciKV0pDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVjb3JkLCBbXSkNCg0KICAgIGRlZiB0ZXN0X3NraXBfbm9uX3VuaXR0ZXN0X2NsYXNzKHNlbGYpOg0KICAgICAgICBAdW5pdHRlc3Quc2tpcCgidGVzdGluZyIpDQogICAgICAgIGNsYXNzIE1peGluOg0KICAgICAgICAgICAgZGVmIHRlc3RfMShzZWxmKToNCiAgICAgICAgICAgICAgICByZWNvcmQuYXBwZW5kKDEpDQogICAgICAgIGNsYXNzIEZvbyhNaXhpbiwgdW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgcGFzcw0KICAgICAgICByZWNvcmQgPSBbXQ0KICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkNCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW3Rlc3RdKQ0KICAgICAgICBzdWl0ZS5ydW4ocmVzdWx0KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlY29yZCwgW10pDQoNCiAgICBkZWYgdGVzdF9leHBlY3RlZF9mYWlsdXJlKHNlbGYpOg0KICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgQHVuaXR0ZXN0LmV4cGVjdGVkRmFpbHVyZQ0KICAgICAgICAgICAgZGVmIHRlc3RfZGllKHNlbGYpOg0KICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiaGVscCBtZSEiKQ0KICAgICAgICBldmVudHMgPSBbXQ0KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykNCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9kaWUiKQ0KICAgICAgICB0ZXN0LnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLA0KICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RhcnRUZXN0JywgJ2FkZEV4cGVjdGVkRmFpbHVyZScsICdzdG9wVGVzdCddKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5leHBlY3RlZEZhaWx1cmVzWzBdWzBdLCB0ZXN0KQ0KICAgICAgICBzZWxmLmFzc2VydFRydWUocmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkNCg0KICAgIGRlZiB0ZXN0X3VuZXhwZWN0ZWRfc3VjY2VzcyhzZWxmKToNCiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIEB1bml0dGVzdC5leHBlY3RlZEZhaWx1cmUNCiAgICAgICAgICAgIGRlZiB0ZXN0X2RpZShzZWxmKToNCiAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0X2RpZSIpDQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsDQogICAgICAgICAgICAgICAgICAgICAgICAgWydzdGFydFRlc3QnLCAnYWRkVW5leHBlY3RlZFN1Y2Nlc3MnLCAnc3RvcFRlc3QnXSkNCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShyZXN1bHQuZmFpbHVyZXMpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnVuZXhwZWN0ZWRTdWNjZXNzZXMsIFt0ZXN0XSkNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKHJlc3VsdC53YXNTdWNjZXNzZnVsKCkpDQoNCiAgICBkZWYgdGVzdF9za2lwX2RvZXNudF9ydW5fc2V0dXAoc2VsZik6DQogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6DQogICAgICAgICAgICB3YXNTZXRVcCA9IEZhbHNlDQogICAgICAgICAgICB3YXNUb3JuRG93biA9IEZhbHNlDQogICAgICAgICAgICBkZWYgc2V0VXAoc2VsZik6DQogICAgICAgICAgICAgICAgRm9vLndhc1NldFVwID0gVHJ1ZQ0KICAgICAgICAgICAgZGVmIHRvcm5Eb3duKHNlbGYpOg0KICAgICAgICAgICAgICAgIEZvby53YXNUb3JuRG93biA9IFRydWUNCiAgICAgICAgICAgIEB1bml0dGVzdC5za2lwKCd0ZXN0aW5nJykNCiAgICAgICAgICAgIGRlZiB0ZXN0XzEoc2VsZik6DQogICAgICAgICAgICAgICAgcGFzcw0KDQogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQ0KICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0XzEiKQ0KICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pDQogICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdCwgInRlc3RpbmciKV0pDQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoRm9vLndhc1NldFVwKQ0KICAgICAgICBzZWxmLmFzc2VydEZhbHNlKEZvby53YXNUb3JuRG93bikNCg0KICAgIGRlZiB0ZXN0X2RlY29yYXRlZF9za2lwKHNlbGYpOg0KICAgICAgICBkZWYgZGVjb3JhdG9yKGZ1bmMpOg0KICAgICAgICAgICAgZGVmIGlubmVyKCphKToNCiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYygqYSkNCiAgICAgICAgICAgIHJldHVybiBpbm5lcg0KDQogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6DQogICAgICAgICAgICBAZGVjb3JhdG9yDQogICAgICAgICAgICBAdW5pdHRlc3Quc2tpcCgndGVzdGluZycpDQogICAgICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOg0KICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkNCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW3Rlc3RdKQ0KICAgICAgICBzdWl0ZS5ydW4ocmVzdWx0KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQ0K',
'/Lib/unittest/test/test_program.py':'',
'/Lib/unittest/test/test_assertions.py':'',
'/Lib/unittest/test/test_break.py':'',
'/Lib/unittest/test/_test_warnings.py':'IyBoZWxwZXIgbW9kdWxlIGZvciB0ZXN0X3J1bm5lci5UZXN0X1RleHRUZXN0UnVubmVyLnRlc3Rfd2FybmluZ3MNCg0KIiIiDQpUaGlzIG1vZHVsZSBoYXMgYSBudW1iZXIgb2YgdGVzdHMgdGhhdCByYWlzZSBkaWZmZXJlbnQga2luZHMgb2Ygd2FybmluZ3MuDQpXaGVuIHRoZSB0ZXN0cyBhcmUgcnVuLCB0aGUgd2FybmluZ3MgYXJlIGNhdWdodCBhbmQgdGhlaXIgbWVzc2FnZXMgYXJlIHByaW50ZWQNCnRvIHN0ZG91dC4gIFRoaXMgbW9kdWxlIGFsc28gYWNjZXB0cyBhbiBhcmcgdGhhdCBpcyB0aGVuIHBhc3NlZCB0bw0KdW5pdHRlc3QubWFpbiB0byBhZmZlY3QgdGhlIGJlaGF2aW9yIG9mIHdhcm5pbmdzLg0KVGVzdF9UZXh0VGVzdFJ1bm5lci50ZXN0X3dhcm5pbmdzIGV4ZWN1dGVzIHRoaXMgc2NyaXB0IHdpdGggZGlmZmVyZW50DQpjb21iaW5hdGlvbnMgb2Ygd2FybmluZ3MgYXJncyBhbmQgLVcgZmxhZ3MgYW5kIGNoZWNrIHRoYXQgdGhlIG91dHB1dCBpcyBjb3JyZWN0Lg0KU2VlICMxMDUzNS4NCiIiIg0KDQppbXBvcnQgc3lzDQppbXBvcnQgdW5pdHRlc3QNCmltcG9ydCB3YXJuaW5ncw0KDQpkZWYgd2FybmZ1bigpOg0KICAgIHdhcm5pbmdzLndhcm4oJ3J3JywgUnVudGltZVdhcm5pbmcpDQoNCmNsYXNzIFRlc3RXYXJuaW5ncyh1bml0dGVzdC5UZXN0Q2FzZSk6DQogICAgIyB1bml0dGVzdCB3YXJuaW5ncyB3aWxsIGJlIHByaW50ZWQgYXQgbW9zdCBvbmNlIHBlciB0eXBlIChtYXggb25lIG1lc3NhZ2UNCiAgICAjIGZvciB0aGUgZmFpbCogbWV0aG9kcywgYW5kIG9uZSBmb3IgdGhlIGFzc2VydCogbWV0aG9kcykNCiAgICBkZWYgdGVzdF9hc3NlcnQoc2VsZik6DQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWxzKDIrMiwgNCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbHMoMioyLCA0KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFscygyKioyLCA0KQ0KDQogICAgZGVmIHRlc3RfZmFpbChzZWxmKToNCiAgICAgICAgc2VsZi5mYWlsVW5sZXNzKDEpDQogICAgICAgIHNlbGYuZmFpbFVubGVzcyhUcnVlKQ0KDQogICAgZGVmIHRlc3Rfb3RoZXJfdW5pdHRlc3Qoc2VsZik6DQogICAgICAgIHNlbGYuYXNzZXJ0QWxtb3N0RXF1YWwoMisyLCA0KQ0KICAgICAgICBzZWxmLmFzc2VydE5vdEFsbW9zdEVxdWFsKDQrNCwgMikNCg0KICAgICMgdGhlc2Ugd2FybmluZ3MgYXJlIG5vcm1hbGx5IHNpbGVuY2VkLCBidXQgdGhleSBhcmUgcHJpbnRlZCBpbiB1bml0dGVzdA0KICAgIGRlZiB0ZXN0X2RlcHJlY2F0aW9uKHNlbGYpOg0KICAgICAgICB3YXJuaW5ncy53YXJuKCdkdycsIERlcHJlY2F0aW9uV2FybmluZykNCiAgICAgICAgd2FybmluZ3Mud2FybignZHcnLCBEZXByZWNhdGlvbldhcm5pbmcpDQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQ0KDQogICAgZGVmIHRlc3RfaW1wb3J0KHNlbGYpOg0KICAgICAgICB3YXJuaW5ncy53YXJuKCdpdycsIEltcG9ydFdhcm5pbmcpDQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2l3JywgSW1wb3J0V2FybmluZykNCiAgICAgICAgd2FybmluZ3Mud2FybignaXcnLCBJbXBvcnRXYXJuaW5nKQ0KDQogICAgIyB1c2VyIHdhcm5pbmdzIHNob3VsZCBhbHdheXMgYmUgcHJpbnRlZA0KICAgIGRlZiB0ZXN0X3dhcm5pbmcoc2VsZik6DQogICAgICAgIHdhcm5pbmdzLndhcm4oJ3V3JykNCiAgICAgICAgd2FybmluZ3Mud2FybigndXcnKQ0KICAgICAgICB3YXJuaW5ncy53YXJuKCd1dycpDQoNCiAgICAjIHRoZXNlIHdhcm5pbmdzIGNvbWUgZnJvbSB0aGUgc2FtZSBwbGFjZTsgdGhleSB3aWxsIGJlIHByaW50ZWQNCiAgICAjIG9ubHkgb25jZSBieSBkZWZhdWx0IG9yIHRocmVlIHRpbWVzIGlmIHRoZSAnYWx3YXlzJyBmaWx0ZXIgaXMgdXNlZA0KICAgIGRlZiB0ZXN0X2Z1bmN0aW9uKHNlbGYpOg0KDQogICAgICAgIHdhcm5mdW4oKQ0KICAgICAgICB3YXJuZnVuKCkNCiAgICAgICAgd2FybmZ1bigpDQoNCg0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIHdpdGggd2FybmluZ3MuY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpIGFzIHdzOg0KICAgICAgICAjIGlmIGFuIGFyZyBpcyBwcm92aWRlZCBwYXNzIGl0IHRvIHVuaXR0ZXN0Lm1haW4gYXMgJ3dhcm5pbmdzJw0KICAgICAgICBpZiBsZW4oc3lzLmFyZ3YpID09IDI6DQogICAgICAgICAgICB1bml0dGVzdC5tYWluKGV4aXQ9RmFsc2UsIHdhcm5pbmdzPXN5cy5hcmd2LnBvcCgpKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgdW5pdHRlc3QubWFpbihleGl0PUZhbHNlKQ0KDQogICAgIyBwcmludCBhbGwgdGhlIHdhcm5pbmcgbWVzc2FnZXMgY29sbGVjdGVkDQogICAgZm9yIHcgaW4gd3M6DQogICAgICAgIHByaW50KHcubWVzc2FnZSkNCg==',
'/Lib/unittest/test/test_loader.py':'',
'/Lib/unittest/test/test_discovery.py':'',
'/Lib/unittest/test/__init__.py':'aW1wb3J0IG9zDQppbXBvcnQgc3lzDQppbXBvcnQgdW5pdHRlc3QNCg0KDQpoZXJlID0gb3MucGF0aC5kaXJuYW1lKF9fZmlsZV9fKQ0KbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXINCg0KZGVmIHN1aXRlKCk6DQogICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQ0KICAgIGZvciBmbiBpbiBvcy5saXN0ZGlyKGhlcmUpOg0KICAgICAgICBpZiBmbi5zdGFydHN3aXRoKCJ0ZXN0IikgYW5kIGZuLmVuZHN3aXRoKCIucHkiKToNCiAgICAgICAgICAgIG1vZG5hbWUgPSAidW5pdHRlc3QudGVzdC4iICsgZm5bOi0zXQ0KICAgICAgICAgICAgX19pbXBvcnRfXyhtb2RuYW1lKQ0KICAgICAgICAgICAgbW9kdWxlID0gc3lzLm1vZHVsZXNbbW9kbmFtZV0NCiAgICAgICAgICAgIHN1aXRlLmFkZFRlc3QobG9hZGVyLmxvYWRUZXN0c0Zyb21Nb2R1bGUobW9kdWxlKSkNCiAgICBzdWl0ZS5hZGRUZXN0KGxvYWRlci5sb2FkVGVzdHNGcm9tTmFtZSgndW5pdHRlc3QudGVzdC50ZXN0bW9jaycpKQ0KICAgIHJldHVybiBzdWl0ZQ0KDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgdW5pdHRlc3QubWFpbihkZWZhdWx0VGVzdD0ic3VpdGUiKQ0K',
'/Lib/unittest/test/test_result.py':'',
'/Lib/unittest/test/test_suite.py':'aW1wb3J0IHVuaXR0ZXN0DQoNCmltcG9ydCBzeXMNCmZyb20gLnN1cHBvcnQgaW1wb3J0IExvZ2dpbmdSZXN1bHQsIFRlc3RFcXVhbGl0eQ0KDQoNCiMjIyBTdXBwb3J0IGNvZGUgZm9yIFRlc3RfVGVzdFN1aXRlDQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCmNsYXNzIFRlc3Qob2JqZWN0KToNCiAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOiBwYXNzDQogICAgICAgIGRlZiB0ZXN0XzIoc2VsZik6IHBhc3MNCiAgICAgICAgZGVmIHRlc3RfMyhzZWxmKTogcGFzcw0KICAgICAgICBkZWYgcnVuVGVzdChzZWxmKTogcGFzcw0KDQpkZWYgX21rX1Rlc3RTdWl0ZSgqbmFtZXMpOg0KICAgIHJldHVybiB1bml0dGVzdC5UZXN0U3VpdGUoVGVzdC5Gb28obikgZm9yIG4gaW4gbmFtZXMpDQoNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCg0KDQpjbGFzcyBUZXN0X1Rlc3RTdWl0ZSh1bml0dGVzdC5UZXN0Q2FzZSwgVGVzdEVxdWFsaXR5KToNCg0KICAgICMjIyBTZXQgdXAgYXR0cmlidXRlcyBuZWVkZWQgYnkgaW5oZXJpdGVkIHRlc3RzDQogICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KDQogICAgIyBVc2VkIGJ5IFRlc3RFcXVhbGl0eS50ZXN0X2VxDQogICAgZXFfcGFpcnMgPSBbKHVuaXR0ZXN0LlRlc3RTdWl0ZSgpLCB1bml0dGVzdC5UZXN0U3VpdGUoKSkNCiAgICAgICAgICAgICAgICwodW5pdHRlc3QuVGVzdFN1aXRlKCksIHVuaXR0ZXN0LlRlc3RTdWl0ZShbXSkpDQogICAgICAgICAgICAgICAsKF9ta19UZXN0U3VpdGUoJ3Rlc3RfMScpLCBfbWtfVGVzdFN1aXRlKCd0ZXN0XzEnKSldDQoNCiAgICAjIFVzZWQgYnkgVGVzdEVxdWFsaXR5LnRlc3RfbmUNCiAgICBuZV9wYWlycyA9IFsodW5pdHRlc3QuVGVzdFN1aXRlKCksIF9ta19UZXN0U3VpdGUoJ3Rlc3RfMScpKQ0KICAgICAgICAgICAgICAgLCh1bml0dGVzdC5UZXN0U3VpdGUoW10pLCBfbWtfVGVzdFN1aXRlKCd0ZXN0XzEnKSkNCiAgICAgICAgICAgICAgICwoX21rX1Rlc3RTdWl0ZSgndGVzdF8xJywgJ3Rlc3RfMicpLCBfbWtfVGVzdFN1aXRlKCd0ZXN0XzEnLCAndGVzdF8zJykpDQogICAgICAgICAgICAgICAsKF9ta19UZXN0U3VpdGUoJ3Rlc3RfMScpLCBfbWtfVGVzdFN1aXRlKCd0ZXN0XzInKSldDQoNCiAgICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQogICAgIyMjIC9TZXQgdXAgYXR0cmlidXRlcyBuZWVkZWQgYnkgaW5oZXJpdGVkIHRlc3RzDQoNCiAgICAjIyMgVGVzdHMgZm9yIFRlc3RTdWl0ZS5fX2luaXRfXw0KICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCg0KICAgICMgImNsYXNzIFRlc3RTdWl0ZShbdGVzdHNdKSINCiAgICAjDQogICAgIyBUaGUgdGVzdHMgaXRlcmFibGUgc2hvdWxkIGJlIG9wdGlvbmFsDQogICAgZGVmIHRlc3RfaW5pdF9fdGVzdHNfb3B0aW9uYWwoc2VsZik6DQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN1aXRlLmNvdW50VGVzdENhc2VzKCksIDApDQoNCiAgICAjICJjbGFzcyBUZXN0U3VpdGUoW3Rlc3RzXSkiDQogICAgIyAuLi4NCiAgICAjICJJZiB0ZXN0cyBpcyBnaXZlbiwgaXQgbXVzdCBiZSBhbiBpdGVyYWJsZSBvZiBpbmRpdmlkdWFsIHRlc3QgY2FzZXMNCiAgICAjIG9yIG90aGVyIHRlc3Qgc3VpdGVzIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGJ1aWxkIHRoZSBzdWl0ZSBpbml0aWFsbHkiDQogICAgIw0KICAgICMgVGVzdFN1aXRlIHNob3VsZCBkZWFsIHdpdGggZW1wdHkgdGVzdHMgaXRlcmFibGVzIGJ5IGFsbG93aW5nIHRoZQ0KICAgICMgY3JlYXRpb24gb2YgYW4gZW1wdHkgc3VpdGUNCiAgICBkZWYgdGVzdF9pbml0X19lbXB0eV90ZXN0cyhzZWxmKToNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW10pDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdWl0ZS5jb3VudFRlc3RDYXNlcygpLCAwKQ0KDQogICAgIyAiY2xhc3MgVGVzdFN1aXRlKFt0ZXN0c10pIg0KICAgICMgLi4uDQogICAgIyAiSWYgdGVzdHMgaXMgZ2l2ZW4sIGl0IG11c3QgYmUgYW4gaXRlcmFibGUgb2YgaW5kaXZpZHVhbCB0ZXN0IGNhc2VzDQogICAgIyBvciBvdGhlciB0ZXN0IHN1aXRlcyB0aGF0IHdpbGwgYmUgdXNlZCB0byBidWlsZCB0aGUgc3VpdGUgaW5pdGlhbGx5Ig0KICAgICMNCiAgICAjIFRlc3RTdWl0ZSBzaG91bGQgYWxsb3cgYW55IGl0ZXJhYmxlIHRvIHByb3ZpZGUgdGVzdHMNCiAgICBkZWYgdGVzdF9pbml0X190ZXN0c19mcm9tX2FueV9pdGVyYWJsZShzZWxmKToNCiAgICAgICAgZGVmIHRlc3RzKCk6DQogICAgICAgICAgICB5aWVsZCB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkNCiAgICAgICAgICAgIHlpZWxkIHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQ0KDQogICAgICAgIHN1aXRlXzEgPSB1bml0dGVzdC5UZXN0U3VpdGUodGVzdHMoKSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdWl0ZV8xLmNvdW50VGVzdENhc2VzKCksIDIpDQoNCiAgICAgICAgc3VpdGVfMiA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShzdWl0ZV8xKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN1aXRlXzIuY291bnRUZXN0Q2FzZXMoKSwgMikNCg0KICAgICAgICBzdWl0ZV8zID0gdW5pdHRlc3QuVGVzdFN1aXRlKHNldChzdWl0ZV8xKSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdWl0ZV8zLmNvdW50VGVzdENhc2VzKCksIDIpDQoNCiAgICAjICJjbGFzcyBUZXN0U3VpdGUoW3Rlc3RzXSkiDQogICAgIyAuLi4NCiAgICAjICJJZiB0ZXN0cyBpcyBnaXZlbiwgaXQgbXVzdCBiZSBhbiBpdGVyYWJsZSBvZiBpbmRpdmlkdWFsIHRlc3QgY2FzZXMNCiAgICAjIG9yIG90aGVyIHRlc3Qgc3VpdGVzIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGJ1aWxkIHRoZSBzdWl0ZSBpbml0aWFsbHkiDQogICAgIw0KICAgICMgRG9lcyBUZXN0U3VpdGUoKSBhbHNvIGFsbG93IG90aGVyIFRlc3RTdWl0ZSgpIGluc3RhbmNlcyB0byBiZSBwcmVzZW50DQogICAgIyBpbiB0aGUgdGVzdHMgaXRlcmFibGU/DQogICAgZGVmIHRlc3RfaW5pdF9fVGVzdFN1aXRlX2luc3RhbmNlc19pbl90ZXN0cyhzZWxmKToNCiAgICAgICAgZGVmIHRlc3RzKCk6DQogICAgICAgICAgICBmdGMgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkNCiAgICAgICAgICAgIHlpZWxkIHVuaXR0ZXN0LlRlc3RTdWl0ZShbZnRjXSkNCiAgICAgICAgICAgIHlpZWxkIHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQ0KDQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKHRlc3RzKCkpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc3VpdGUuY291bnRUZXN0Q2FzZXMoKSwgMikNCg0KICAgICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNCiAgICAjIyMgL1Rlc3RzIGZvciBUZXN0U3VpdGUuX19pbml0X18NCg0KICAgICMgQ29udGFpbmVyIHR5cGVzIHNob3VsZCBzdXBwb3J0IHRoZSBpdGVyIHByb3RvY29sDQogICAgZGVmIHRlc3RfaXRlcihzZWxmKToNCiAgICAgICAgdGVzdDEgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkNCiAgICAgICAgdGVzdDIgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKHRlc3QxLCB0ZXN0MikpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsaXN0KHN1aXRlKSwgW3Rlc3QxLCB0ZXN0Ml0pDQoNCiAgICAjICJSZXR1cm4gdGhlIG51bWJlciBvZiB0ZXN0cyByZXByZXNlbnRlZCBieSB0aGUgdGhpcyB0ZXN0IG9iamVjdC4NCiAgICAjIC4uLnRoaXMgbWV0aG9kIGlzIGFsc28gaW1wbGVtZW50ZWQgYnkgdGhlIFRlc3RTdWl0ZSBjbGFzcywgd2hpY2ggY2FuDQogICAgIyByZXR1cm4gbGFyZ2VyIFtncmVhdGVyIHRoYW4gMV0gdmFsdWVzIg0KICAgICMNCiAgICAjIFByZXN1bWFibHkgYW4gZW1wdHkgVGVzdFN1aXRlIHJldHVybnMgMD8NCiAgICBkZWYgdGVzdF9jb3VudFRlc3RDYXNlc196ZXJvX3NpbXBsZShzZWxmKToNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc3VpdGUuY291bnRUZXN0Q2FzZXMoKSwgMCkNCg0KICAgICMgIlJldHVybiB0aGUgbnVtYmVyIG9mIHRlc3RzIHJlcHJlc2VudGVkIGJ5IHRoZSB0aGlzIHRlc3Qgb2JqZWN0Lg0KICAgICMgLi4udGhpcyBtZXRob2QgaXMgYWxzbyBpbXBsZW1lbnRlZCBieSB0aGUgVGVzdFN1aXRlIGNsYXNzLCB3aGljaCBjYW4NCiAgICAjIHJldHVybiBsYXJnZXIgW2dyZWF0ZXIgdGhhbiAxXSB2YWx1ZXMiDQogICAgIw0KICAgICMgUHJlc3VtYWJseSBhbiBlbXB0eSBUZXN0U3VpdGUgKGV2ZW4gaWYgaXQgY29udGFpbnMgb3RoZXIgZW1wdHkNCiAgICAjIFRlc3RTdWl0ZSBpbnN0YW5jZXMpIHJldHVybnMgMD8NCiAgICBkZWYgdGVzdF9jb3VudFRlc3RDYXNlc196ZXJvX25lc3RlZChzZWxmKToNCiAgICAgICAgY2xhc3MgVGVzdDEodW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgZGVmIHRlc3Qoc2VsZik6DQogICAgICAgICAgICAgICAgcGFzcw0KDQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKFt1bml0dGVzdC5UZXN0U3VpdGUoKV0pDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdWl0ZS5jb3VudFRlc3RDYXNlcygpLCAwKQ0KDQogICAgIyAiUmV0dXJuIHRoZSBudW1iZXIgb2YgdGVzdHMgcmVwcmVzZW50ZWQgYnkgdGhlIHRoaXMgdGVzdCBvYmplY3QuDQogICAgIyAuLi50aGlzIG1ldGhvZCBpcyBhbHNvIGltcGxlbWVudGVkIGJ5IHRoZSBUZXN0U3VpdGUgY2xhc3MsIHdoaWNoIGNhbg0KICAgICMgcmV0dXJuIGxhcmdlciBbZ3JlYXRlciB0aGFuIDFdIHZhbHVlcyINCiAgICBkZWYgdGVzdF9jb3VudFRlc3RDYXNlc19zaW1wbGUoc2VsZik6DQogICAgICAgIHRlc3QxID0gdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZShsYW1iZGE6IE5vbmUpDQogICAgICAgIHRlc3QyID0gdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZShsYW1iZGE6IE5vbmUpDQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKCh0ZXN0MSwgdGVzdDIpKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc3VpdGUuY291bnRUZXN0Q2FzZXMoKSwgMikNCg0KICAgICMgIlJldHVybiB0aGUgbnVtYmVyIG9mIHRlc3RzIHJlcHJlc2VudGVkIGJ5IHRoZSB0aGlzIHRlc3Qgb2JqZWN0Lg0KICAgICMgLi4udGhpcyBtZXRob2QgaXMgYWxzbyBpbXBsZW1lbnRlZCBieSB0aGUgVGVzdFN1aXRlIGNsYXNzLCB3aGljaCBjYW4NCiAgICAjIHJldHVybiBsYXJnZXIgW2dyZWF0ZXIgdGhhbiAxXSB2YWx1ZXMiDQogICAgIw0KICAgICMgTWFrZSBzdXJlIHRoaXMgaG9sZHMgZm9yIG5lc3RlZCBUZXN0U3VpdGUgaW5zdGFuY2VzLCB0b28NCiAgICBkZWYgdGVzdF9jb3VudFRlc3RDYXNlc19uZXN0ZWQoc2VsZik6DQogICAgICAgIGNsYXNzIFRlc3QxKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIGRlZiB0ZXN0MShzZWxmKTogcGFzcw0KICAgICAgICAgICAgZGVmIHRlc3QyKHNlbGYpOiBwYXNzDQoNCiAgICAgICAgdGVzdDIgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkNCiAgICAgICAgdGVzdDMgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkNCiAgICAgICAgY2hpbGQgPSB1bml0dGVzdC5UZXN0U3VpdGUoKFRlc3QxKCd0ZXN0MicpLCB0ZXN0MikpDQogICAgICAgIHBhcmVudCA9IHVuaXR0ZXN0LlRlc3RTdWl0ZSgodGVzdDMsIGNoaWxkLCBUZXN0MSgndGVzdDEnKSkpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwYXJlbnQuY291bnRUZXN0Q2FzZXMoKSwgNCkNCg0KICAgICMgIlJ1biB0aGUgdGVzdHMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgc3VpdGUsIGNvbGxlY3RpbmcgdGhlIHJlc3VsdCBpbnRvDQogICAgIyB0aGUgdGVzdCByZXN1bHQgb2JqZWN0IHBhc3NlZCBhcyByZXN1bHQuIg0KICAgICMNCiAgICAjIEFuZCBpZiB0aGVyZSBhcmUgbm8gdGVzdHM/IFdoYXQgdGhlbj8NCiAgICBkZWYgdGVzdF9ydW5fX2VtcHR5X3N1aXRlKHNlbGYpOg0KICAgICAgICBldmVudHMgPSBbXQ0KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykNCg0KICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZSgpDQoNCiAgICAgICAgc3VpdGUucnVuKHJlc3VsdCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgW10pDQoNCiAgICAjICJOb3RlIHRoYXQgdW5saWtlIFRlc3RDYXNlLnJ1bigpLCBUZXN0U3VpdGUucnVuKCkgcmVxdWlyZXMgdGhlDQogICAgIyAicmVzdWx0IG9iamVjdCB0byBiZSBwYXNzZWQgaW4uIg0KICAgIGRlZiB0ZXN0X3J1bl9fcmVxdWlyZXNfcmVzdWx0KHNlbGYpOg0KICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZSgpDQoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc3VpdGUucnVuKCkNCiAgICAgICAgZXhjZXB0IFR5cGVFcnJvcjoNCiAgICAgICAgICAgIHBhc3MNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHNlbGYuZmFpbCgiRmFpbGVkIHRvIHJhaXNlIFR5cGVFcnJvciIpDQoNCiAgICAjICJSdW4gdGhlIHRlc3RzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHN1aXRlLCBjb2xsZWN0aW5nIHRoZSByZXN1bHQgaW50bw0KICAgICMgdGhlIHRlc3QgcmVzdWx0IG9iamVjdCBwYXNzZWQgYXMgcmVzdWx0LiINCiAgICBkZWYgdGVzdF9ydW4oc2VsZik6DQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KDQogICAgICAgIGNsYXNzIExvZ2dpbmdDYXNlKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIGRlZiBydW4oc2VsZiwgcmVzdWx0KToNCiAgICAgICAgICAgICAgICBldmVudHMuYXBwZW5kKCdydW4gJXMnICUgc2VsZi5fdGVzdE1ldGhvZE5hbWUpDQoNCiAgICAgICAgICAgIGRlZiB0ZXN0MShzZWxmKTogcGFzcw0KICAgICAgICAgICAgZGVmIHRlc3QyKHNlbGYpOiBwYXNzDQoNCiAgICAgICAgdGVzdHMgPSBbTG9nZ2luZ0Nhc2UoJ3Rlc3QxJyksIExvZ2dpbmdDYXNlKCd0ZXN0MicpXQ0KDQogICAgICAgIHVuaXR0ZXN0LlRlc3RTdWl0ZSh0ZXN0cykucnVuKHJlc3VsdCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgWydydW4gdGVzdDEnLCAncnVuIHRlc3QyJ10pDQoNCiAgICAjICJBZGQgYSBUZXN0Q2FzZSAuLi4gdG8gdGhlIHN1aXRlIg0KICAgIGRlZiB0ZXN0X2FkZFRlc3RfX1Rlc3RDYXNlKHNlbGYpOg0KICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgZGVmIHRlc3Qoc2VsZik6IHBhc3MNCg0KICAgICAgICB0ZXN0ID0gRm9vKCd0ZXN0JykNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQ0KDQogICAgICAgIHN1aXRlLmFkZFRlc3QodGVzdCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN1aXRlLmNvdW50VGVzdENhc2VzKCksIDEpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGlzdChzdWl0ZSksIFt0ZXN0XSkNCg0KICAgICMgIkFkZCBhIC4uLiBUZXN0U3VpdGUgdG8gdGhlIHN1aXRlIg0KICAgIGRlZiB0ZXN0X2FkZFRlc3RfX1Rlc3RTdWl0ZShzZWxmKToNCiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIGRlZiB0ZXN0KHNlbGYpOiBwYXNzDQoNCiAgICAgICAgc3VpdGVfMiA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbRm9vKCd0ZXN0JyldKQ0KDQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKCkNCiAgICAgICAgc3VpdGUuYWRkVGVzdChzdWl0ZV8yKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc3VpdGUuY291bnRUZXN0Q2FzZXMoKSwgMSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsaXN0KHN1aXRlKSwgW3N1aXRlXzJdKQ0KDQogICAgIyAiQWRkIGFsbCB0aGUgdGVzdHMgZnJvbSBhbiBpdGVyYWJsZSBvZiBUZXN0Q2FzZSBhbmQgVGVzdFN1aXRlDQogICAgIyBpbnN0YW5jZXMgdG8gdGhpcyB0ZXN0IHN1aXRlLiINCiAgICAjDQogICAgIyAiVGhpcyBpcyBlcXVpdmFsZW50IHRvIGl0ZXJhdGluZyBvdmVyIHRlc3RzLCBjYWxsaW5nIGFkZFRlc3QoKSBmb3INCiAgICAjIGVhY2ggZWxlbWVudCINCiAgICBkZWYgdGVzdF9hZGRUZXN0cyhzZWxmKToNCiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIGRlZiB0ZXN0XzEoc2VsZik6IHBhc3MNCiAgICAgICAgICAgIGRlZiB0ZXN0XzIoc2VsZik6IHBhc3MNCg0KICAgICAgICB0ZXN0XzEgPSBGb28oJ3Rlc3RfMScpDQogICAgICAgIHRlc3RfMiA9IEZvbygndGVzdF8yJykNCiAgICAgICAgaW5uZXJfc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW3Rlc3RfMl0pDQoNCiAgICAgICAgZGVmIGdlbigpOg0KICAgICAgICAgICAgeWllbGQgdGVzdF8xDQogICAgICAgICAgICB5aWVsZCB0ZXN0XzINCiAgICAgICAgICAgIHlpZWxkIGlubmVyX3N1aXRlDQoNCiAgICAgICAgc3VpdGVfMSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZSgpDQogICAgICAgIHN1aXRlXzEuYWRkVGVzdHMoZ2VuKCkpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsaXN0KHN1aXRlXzEpLCBsaXN0KGdlbigpKSkNCg0KICAgICAgICAjICJUaGlzIGlzIGVxdWl2YWxlbnQgdG8gaXRlcmF0aW5nIG92ZXIgdGVzdHMsIGNhbGxpbmcgYWRkVGVzdCgpIGZvcg0KICAgICAgICAjIGVhY2ggZWxlbWVudCINCiAgICAgICAgc3VpdGVfMiA9IHVuaXR0ZXN0LlRlc3RTdWl0ZSgpDQogICAgICAgIGZvciB0IGluIGdlbigpOg0KICAgICAgICAgICAgc3VpdGVfMi5hZGRUZXN0KHQpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdWl0ZV8xLCBzdWl0ZV8yKQ0KDQogICAgIyAiQWRkIGFsbCB0aGUgdGVzdHMgZnJvbSBhbiBpdGVyYWJsZSBvZiBUZXN0Q2FzZSBhbmQgVGVzdFN1aXRlDQogICAgIyBpbnN0YW5jZXMgdG8gdGhpcyB0ZXN0IHN1aXRlLiINCiAgICAjDQogICAgIyBXaGF0IGhhcHBlbnMgaWYgaXQgZG9lc24ndCBnZXQgYW4gaXRlcmFibGU/DQogICAgZGVmIHRlc3RfYWRkVGVzdF9fbm9uaXRlcmFibGUoc2VsZik6DQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKCkNCg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzdWl0ZS5hZGRUZXN0cyg1KQ0KICAgICAgICBleGNlcHQgVHlwZUVycm9yOg0KICAgICAgICAgICAgcGFzcw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZi5mYWlsKCJGYWlsZWQgdG8gcmFpc2UgVHlwZUVycm9yIikNCg0KICAgIGRlZiB0ZXN0X2FkZFRlc3RfX25vbmNhbGxhYmxlKHNlbGYpOg0KICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZSgpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgc3VpdGUuYWRkVGVzdCwgNSkNCg0KICAgIGRlZiB0ZXN0X2FkZFRlc3RfX2Nhc2VzdWl0ZWNsYXNzKHNlbGYpOg0KICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZSgpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgc3VpdGUuYWRkVGVzdCwgVGVzdF9UZXN0U3VpdGUpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgc3VpdGUuYWRkVGVzdCwgdW5pdHRlc3QuVGVzdFN1aXRlKQ0KDQogICAgZGVmIHRlc3RfYWRkVGVzdHNfX3N0cmluZyhzZWxmKToNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQ0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIHN1aXRlLmFkZFRlc3RzLCAiZm9vIikNCg0KICAgIGRlZiB0ZXN0X2Z1bmN0aW9uX2luX3N1aXRlKHNlbGYpOg0KICAgICAgICBkZWYgZihfKToNCiAgICAgICAgICAgIHBhc3MNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQ0KICAgICAgICBzdWl0ZS5hZGRUZXN0KGYpDQoNCiAgICAgICAgIyB3aGVuIHRoZSBidWcgaXMgZml4ZWQgdGhpcyBsaW5lIHdpbGwgbm90IGNyYXNoDQogICAgICAgIHN1aXRlLnJ1bih1bml0dGVzdC5UZXN0UmVzdWx0KCkpDQoNCg0KDQogICAgZGVmIHRlc3RfYmFzZXRlc3RzdWl0ZShzZWxmKToNCiAgICAgICAgY2xhc3MgVGVzdCh1bml0dGVzdC5UZXN0Q2FzZSk6DQogICAgICAgICAgICB3YXNTZXRVcCA9IEZhbHNlDQogICAgICAgICAgICB3YXNUb3JuRG93biA9IEZhbHNlDQogICAgICAgICAgICBAY2xhc3NtZXRob2QNCiAgICAgICAgICAgIGRlZiBzZXRVcENsYXNzKGNscyk6DQogICAgICAgICAgICAgICAgY2xzLndhc1NldFVwID0gVHJ1ZQ0KICAgICAgICAgICAgQGNsYXNzbWV0aG9kDQogICAgICAgICAgICBkZWYgdGVhckRvd25DbGFzcyhjbHMpOg0KICAgICAgICAgICAgICAgIGNscy53YXNUb3JuRG93biA9IFRydWUNCiAgICAgICAgICAgIGRlZiB0ZXN0UGFzcyhzZWxmKToNCiAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICBkZWYgdGVzdEZhaWwoc2VsZik6DQogICAgICAgICAgICAgICAgZmFpbA0KICAgICAgICBjbGFzcyBNb2R1bGUob2JqZWN0KToNCiAgICAgICAgICAgIHdhc1NldFVwID0gRmFsc2UNCiAgICAgICAgICAgIHdhc1Rvcm5Eb3duID0gRmFsc2UNCiAgICAgICAgICAgIEBzdGF0aWNtZXRob2QNCiAgICAgICAgICAgIGRlZiBzZXRVcE1vZHVsZSgpOg0KICAgICAgICAgICAgICAgIE1vZHVsZS53YXNTZXRVcCA9IFRydWUNCiAgICAgICAgICAgIEBzdGF0aWNtZXRob2QNCiAgICAgICAgICAgIGRlZiB0ZWFyRG93bk1vZHVsZSgpOg0KICAgICAgICAgICAgICAgIE1vZHVsZS53YXNUb3JuRG93biA9IFRydWUNCg0KICAgICAgICBUZXN0Ll9fbW9kdWxlX18gPSAnTW9kdWxlJw0KICAgICAgICBzeXMubW9kdWxlc1snTW9kdWxlJ10gPSBNb2R1bGUNCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHN5cy5tb2R1bGVzLnBvcCwgJ01vZHVsZScpDQoNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5CYXNlVGVzdFN1aXRlKCkNCiAgICAgICAgc3VpdGUuYWRkVGVzdHMoW1Rlc3QoJ3Rlc3RQYXNzJyksIFRlc3QoJ3Rlc3RGYWlsJyldKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN1aXRlLmNvdW50VGVzdENhc2VzKCksIDIpDQoNCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpDQogICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoTW9kdWxlLndhc1NldFVwKQ0KICAgICAgICBzZWxmLmFzc2VydEZhbHNlKE1vZHVsZS53YXNUb3JuRG93bikNCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShUZXN0Lndhc1NldFVwKQ0KICAgICAgICBzZWxmLmFzc2VydEZhbHNlKFRlc3Qud2FzVG9ybkRvd24pDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5lcnJvcnMpLCAxKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZmFpbHVyZXMpLCAwKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC50ZXN0c1J1biwgMikNCg0KDQogICAgZGVmIHRlc3Rfb3ZlcnJpZGluZ19jYWxsKHNlbGYpOg0KICAgICAgICBjbGFzcyBNeVN1aXRlKHVuaXR0ZXN0LlRlc3RTdWl0ZSk6DQogICAgICAgICAgICBjYWxsZWQgPSBGYWxzZQ0KICAgICAgICAgICAgZGVmIF9fY2FsbF9fKHNlbGYsICphcmdzLCAqKmt3KToNCiAgICAgICAgICAgICAgICBzZWxmLmNhbGxlZCA9IFRydWUNCiAgICAgICAgICAgICAgICB1bml0dGVzdC5UZXN0U3VpdGUuX19jYWxsX18oc2VsZiwgKmFyZ3MsICoqa3cpDQoNCiAgICAgICAgc3VpdGUgPSBNeVN1aXRlKCkNCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpDQogICAgICAgIHdyYXBwZXIgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQ0KICAgICAgICB3cmFwcGVyLmFkZFRlc3Qoc3VpdGUpDQogICAgICAgIHdyYXBwZXIocmVzdWx0KQ0KICAgICAgICBzZWxmLmFzc2VydFRydWUoc3VpdGUuY2FsbGVkKQ0KDQogICAgICAgICMgcmV1c2luZyByZXN1bHRzIHNob3VsZCBiZSBwZXJtaXR0ZWQgZXZlbiBpZiBhYm9taW5hYmxlDQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UocmVzdWx0Ll90ZXN0UnVuRW50ZXJlZCkNCg0KDQoNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQogICAgdW5pdHRlc3QubWFpbigpDQo=',
'/Lib/unittest/test/dummy.py':'IyBFbXB0eSBtb2R1bGUgZm9yIHRlc3RpbmcgdGhlIGxvYWRpbmcgb2YgbW9kdWxlcw0K',
'/Lib/unittest/test/test_setups.py':'',
'/Lib/unittest/test/test_runner.py':'',
'/Lib/unittest/test/test_functiontestcase.py':'aW1wb3J0IHVuaXR0ZXN0DQoNCmZyb20gLnN1cHBvcnQgaW1wb3J0IExvZ2dpbmdSZXN1bHQNCg0KDQpjbGFzcyBUZXN0X0Z1bmN0aW9uVGVzdENhc2UodW5pdHRlc3QuVGVzdENhc2UpOg0KDQogICAgIyAiUmV0dXJuIHRoZSBudW1iZXIgb2YgdGVzdHMgcmVwcmVzZW50ZWQgYnkgdGhlIHRoaXMgdGVzdCBvYmplY3QuIEZvcg0KICAgICMgVGVzdENhc2UgaW5zdGFuY2VzLCB0aGlzIHdpbGwgYWx3YXlzIGJlIDEiDQogICAgZGVmIHRlc3RfY291bnRUZXN0Q2FzZXMoc2VsZik6DQogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3QuY291bnRUZXN0Q2FzZXMoKSwgMSkNCg0KICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QNCiAgICAjIHByaW9yIHRvIGVhY2ggdGVzdC4gTGlrZXdpc2UsIGlmIGEgdGVhckRvd24oKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlDQogICAgIyB0ZXN0IHJ1bm5lciB3aWxsIGludm9rZSB0aGF0IG1ldGhvZCBhZnRlciBlYWNoIHRlc3QuIEluIHRoZSBleGFtcGxlLA0KICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiINCiAgICAjDQogICAgIyBNYWtlIHN1cmUgdGhlIHByb3BlciBjYWxsIG9yZGVyIGlzIG1haW50YWluZWQsIGV2ZW4gaWYgc2V0VXAoKSByYWlzZXMNCiAgICAjIGFuIGV4Y2VwdGlvbi4NCiAgICBkZWYgdGVzdF9ydW5fY2FsbF9vcmRlcl9fZXJyb3JfaW5fc2V0VXAoc2VsZik6DQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KDQogICAgICAgIGRlZiBzZXRVcCgpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgnc2V0VXAnKQ0KICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKCdyYWlzZWQgYnkgc2V0VXAnKQ0KDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBldmVudHMuYXBwZW5kKCd0ZXN0JykNCg0KICAgICAgICBkZWYgdGVhckRvd24oKToNCiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3RlYXJEb3duJykNCg0KICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ2FkZEVycm9yJywgJ3N0b3BUZXN0J10NCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLCBleHBlY3RlZCkNCg0KICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QNCiAgICAjIHByaW9yIHRvIGVhY2ggdGVzdC4gTGlrZXdpc2UsIGlmIGEgdGVhckRvd24oKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlDQogICAgIyB0ZXN0IHJ1bm5lciB3aWxsIGludm9rZSB0aGF0IG1ldGhvZCBhZnRlciBlYWNoIHRlc3QuIEluIHRoZSBleGFtcGxlLA0KICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiINCiAgICAjDQogICAgIyBNYWtlIHN1cmUgdGhlIHByb3BlciBjYWxsIG9yZGVyIGlzIG1haW50YWluZWQsIGV2ZW4gaWYgdGhlIHRlc3QgcmFpc2VzDQogICAgIyBhbiBlcnJvciAoYXMgb3Bwb3NlZCB0byBhIGZhaWx1cmUpLg0KICAgIGRlZiB0ZXN0X3J1bl9jYWxsX29yZGVyX19lcnJvcl9pbl90ZXN0KHNlbGYpOg0KICAgICAgICBldmVudHMgPSBbXQ0KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykNCg0KICAgICAgICBkZWYgc2V0VXAoKToNCiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykNCg0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVzdCcpDQogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoJ3JhaXNlZCBieSB0ZXN0JykNCg0KICAgICAgICBkZWYgdGVhckRvd24oKToNCiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3RlYXJEb3duJykNCg0KICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLA0KICAgICAgICAgICAgICAgICAgICAnYWRkRXJyb3InLCAnc3RvcFRlc3QnXQ0KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQ0KDQogICAgIyAiV2hlbiBhIHNldFVwKCkgbWV0aG9kIGlzIGRlZmluZWQsIHRoZSB0ZXN0IHJ1bm5lciB3aWxsIHJ1biB0aGF0IG1ldGhvZA0KICAgICMgcHJpb3IgdG8gZWFjaCB0ZXN0LiBMaWtld2lzZSwgaWYgYSB0ZWFyRG93bigpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUNCiAgICAjIHRlc3QgcnVubmVyIHdpbGwgaW52b2tlIHRoYXQgbWV0aG9kIGFmdGVyIGVhY2ggdGVzdC4gSW4gdGhlIGV4YW1wbGUsDQogICAgIyBzZXRVcCgpIHdhcyB1c2VkIHRvIGNyZWF0ZSBhIGZyZXNoIHNlcXVlbmNlIGZvciBlYWNoIHRlc3QuIg0KICAgICMNCiAgICAjIE1ha2Ugc3VyZSB0aGUgcHJvcGVyIGNhbGwgb3JkZXIgaXMgbWFpbnRhaW5lZCwgZXZlbiBpZiB0aGUgdGVzdCBzaWduYWxzDQogICAgIyBhIGZhaWx1cmUgKGFzIG9wcG9zZWQgdG8gYW4gZXJyb3IpLg0KICAgIGRlZiB0ZXN0X3J1bl9jYWxsX29yZGVyX19mYWlsdXJlX2luX3Rlc3Qoc2VsZik6DQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KDQogICAgICAgIGRlZiBzZXRVcCgpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgnc2V0VXAnKQ0KDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBldmVudHMuYXBwZW5kKCd0ZXN0JykNCiAgICAgICAgICAgIHNlbGYuZmFpbCgncmFpc2VkIGJ5IHRlc3QnKQ0KDQogICAgICAgIGRlZiB0ZWFyRG93bigpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQ0KDQogICAgICAgIGV4cGVjdGVkID0gWydzdGFydFRlc3QnLCAnc2V0VXAnLCAndGVzdCcsICd0ZWFyRG93bicsDQogICAgICAgICAgICAgICAgICAgICdhZGRGYWlsdXJlJywgJ3N0b3BUZXN0J10NCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLCBleHBlY3RlZCkNCg0KICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QNCiAgICAjIHByaW9yIHRvIGVhY2ggdGVzdC4gTGlrZXdpc2UsIGlmIGEgdGVhckRvd24oKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlDQogICAgIyB0ZXN0IHJ1bm5lciB3aWxsIGludm9rZSB0aGF0IG1ldGhvZCBhZnRlciBlYWNoIHRlc3QuIEluIHRoZSBleGFtcGxlLA0KICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiINCiAgICAjDQogICAgIyBNYWtlIHN1cmUgdGhlIHByb3BlciBjYWxsIG9yZGVyIGlzIG1haW50YWluZWQsIGV2ZW4gaWYgdGVhckRvd24oKSByYWlzZXMNCiAgICAjIGFuIGV4Y2VwdGlvbi4NCiAgICBkZWYgdGVzdF9ydW5fY2FsbF9vcmRlcl9fZXJyb3JfaW5fdGVhckRvd24oc2VsZik6DQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KDQogICAgICAgIGRlZiBzZXRVcCgpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgnc2V0VXAnKQ0KDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBldmVudHMuYXBwZW5kKCd0ZXN0JykNCg0KICAgICAgICBkZWYgdGVhckRvd24oKToNCiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3RlYXJEb3duJykNCiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigncmFpc2VkIGJ5IHRlYXJEb3duJykNCg0KICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLCAnYWRkRXJyb3InLA0KICAgICAgICAgICAgICAgICAgICAnc3RvcFRlc3QnXQ0KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQ0KDQogICAgIyAiUmV0dXJuIGEgc3RyaW5nIGlkZW50aWZ5aW5nIHRoZSBzcGVjaWZpYyB0ZXN0IGNhc2UuIg0KICAgICMNCiAgICAjIEJlY2F1c2Ugb2YgdGhlIHZhZ3VlIG5hdHVyZSBvZiB0aGUgZG9jcywgSSdtIG5vdCBnb2luZyB0byBsb2NrIHRoaXMNCiAgICAjIHRlc3QgZG93biB0b28gbXVjaC4gUmVhbGx5IGFsbCB0aGF0IGNhbiBiZSBhc3NlcnRlZCBpcyB0aGF0IHRoZSBpZCgpDQogICAgIyB3aWxsIGJlIGEgc3RyaW5nIChlaXRoZXIgOC1ieXRlIG9yIHVuaWNvZGUgLS0gYWdhaW4sIGJlY2F1c2UgdGhlIGRvY3MNCiAgICAjIGp1c3Qgc2F5ICJzdHJpbmciKQ0KICAgIGRlZiB0ZXN0X2lkKHNlbGYpOg0KICAgICAgICB0ZXN0ID0gdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZShsYW1iZGE6IE5vbmUpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHRlc3QuaWQoKSwgc3RyKQ0KDQogICAgIyAiUmV0dXJucyBhIG9uZS1saW5lIGRlc2NyaXB0aW9uIG9mIHRoZSB0ZXN0LCBvciBOb25lIGlmIG5vIGRlc2NyaXB0aW9uDQogICAgIyBoYXMgYmVlbiBwcm92aWRlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucw0KICAgICMgdGhlIGZpcnN0IGxpbmUgb2YgdGhlIHRlc3QgbWV0aG9kJ3MgZG9jc3RyaW5nLCBpZiBhdmFpbGFibGUsIG9yIE5vbmUuIg0KICAgIGRlZiB0ZXN0X3Nob3J0RGVzY3JpcHRpb25fX25vX2RvY3N0cmluZyhzZWxmKToNCiAgICAgICAgdGVzdCA9IHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwodGVzdC5zaG9ydERlc2NyaXB0aW9uKCksIE5vbmUpDQoNCiAgICAjICJSZXR1cm5zIGEgb25lLWxpbmUgZGVzY3JpcHRpb24gb2YgdGhlIHRlc3QsIG9yIE5vbmUgaWYgbm8gZGVzY3JpcHRpb24NCiAgICAjIGhhcyBiZWVuIHByb3ZpZGVkLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIG1ldGhvZCByZXR1cm5zDQogICAgIyB0aGUgZmlyc3QgbGluZSBvZiB0aGUgdGVzdCBtZXRob2QncyBkb2NzdHJpbmcsIGlmIGF2YWlsYWJsZSwgb3IgTm9uZS4iDQogICAgZGVmIHRlc3Rfc2hvcnREZXNjcmlwdGlvbl9fc2luZ2xlbGluZV9kb2NzdHJpbmcoc2VsZik6DQogICAgICAgIGRlc2MgPSAidGhpcyB0ZXN0cyBmb28iDQogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSwgZGVzY3JpcHRpb249ZGVzYykNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3Quc2hvcnREZXNjcmlwdGlvbigpLCAidGhpcyB0ZXN0cyBmb28iKQ0K',
'/Lib/unittest/test/testmock/testsentinel.py':'aW1wb3J0IHVuaXR0ZXN0DQpmcm9tIHVuaXR0ZXN0Lm1vY2sgaW1wb3J0IHNlbnRpbmVsLCBERUZBVUxUDQoNCg0KY2xhc3MgU2VudGluZWxUZXN0KHVuaXR0ZXN0LlRlc3RDYXNlKToNCg0KICAgIGRlZiB0ZXN0U2VudGluZWxzKHNlbGYpOg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNlbnRpbmVsLndoYXRldmVyLCBzZW50aW5lbC53aGF0ZXZlciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAnc2VudGluZWwgbm90IHN0b3JlZCcpDQogICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwoc2VudGluZWwud2hhdGV2ZXIsIHNlbnRpbmVsLndoYXRldmVyZWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VudGluZWwgc2hvdWxkIGJlIHVuaXF1ZScpDQoNCg0KICAgIGRlZiB0ZXN0U2VudGluZWxOYW1lKHNlbGYpOg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN0cihzZW50aW5lbC53aGF0ZXZlciksICdzZW50aW5lbC53aGF0ZXZlcicsDQogICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbnRpbmVsIG5hbWUgaW5jb3JyZWN0JykNCg0KDQogICAgZGVmIHRlc3RERUZBVUxUKHNlbGYpOg0KICAgICAgICBzZWxmLmFzc2VydFRydWUoREVGQVVMVCBpcyBzZW50aW5lbC5ERUZBVUxUKQ0KDQogICAgZGVmIHRlc3RCYXNlcyhzZWxmKToNCiAgICAgICAgIyBJZiB0aGlzIGRvZXNuJ3QgcmFpc2UgYW4gQXR0cmlidXRlRXJyb3IgdGhlbiBoZWxwKG1vY2spIGlzIGJyb2tlbg0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgbGFtYmRhOiBzZW50aW5lbC5fX2Jhc2VzX18pDQoNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICB1bml0dGVzdC5tYWluKCkNCg==',
'/Lib/unittest/test/testmock/support.py':'aW1wb3J0IHN5cw0KDQpkZWYgaXNfaW5zdGFuY2Uob2JqLCBrbGFzcyk6DQogICAgIiIiVmVyc2lvbiBvZiBpc19pbnN0YW5jZSB0aGF0IGRvZXNuJ3QgYWNjZXNzIF9fY2xhc3NfXyIiIg0KICAgIHJldHVybiBpc3N1YmNsYXNzKHR5cGUob2JqKSwga2xhc3MpDQoNCg0KY2xhc3MgU29tZUNsYXNzKG9iamVjdCk6DQogICAgY2xhc3NfYXR0cmlidXRlID0gTm9uZQ0KDQogICAgZGVmIHdpYmJsZShzZWxmKToNCiAgICAgICAgcGFzcw0KDQoNCmNsYXNzIFgob2JqZWN0KToNCiAgICBwYXNzDQoNCg0KZGVmIGV4YW1pbmVfd2FybmluZ3MoZnVuYyk6DQogICAgZGVmIHdyYXBwZXIoKToNCiAgICAgICAgd2l0aCBjYXRjaF93YXJuaW5ncyhyZWNvcmQ9VHJ1ZSkgYXMgd3M6DQogICAgICAgICAgICBmdW5jKHdzKQ0KICAgIHJldHVybiB3cmFwcGVyDQo=',
'/Lib/unittest/test/testmock/testpatch.py':'IyBDb3B5cmlnaHQgKEMpIDIwMDctMjAxMiBNaWNoYWVsIEZvb3JkICYgdGhlIG1vY2sgdGVhbQ0KIyBFLW1haWw6IGZ1enp5bWFuIEFUIHZvaWRzcGFjZSBET1Qgb3JnIERPVCB1aw0KIyBodHRwOi8vd3d3LnZvaWRzcGFjZS5vcmcudWsvcHl0aG9uL21vY2svDQoNCmltcG9ydCBvcw0KaW1wb3J0IHN5cw0KDQppbXBvcnQgdW5pdHRlc3QNCmZyb20gdW5pdHRlc3QudGVzdC50ZXN0bW9jayBpbXBvcnQgc3VwcG9ydA0KZnJvbSB1bml0dGVzdC50ZXN0LnRlc3Rtb2NrLnN1cHBvcnQgaW1wb3J0IFNvbWVDbGFzcywgaXNfaW5zdGFuY2UNCg0KZnJvbSB1bml0dGVzdC5tb2NrIGltcG9ydCAoDQogICAgTm9uQ2FsbGFibGVNb2NrLCBDYWxsYWJsZU1peGluLCBwYXRjaCwgc2VudGluZWwsDQogICAgTWFnaWNNb2NrLCBNb2NrLCBOb25DYWxsYWJsZU1hZ2ljTW9jaywgcGF0Y2gsIF9wYXRjaCwNCiAgICBERUZBVUxULCBjYWxsLCBfZ2V0X3RhcmdldA0KKQ0KDQoNCmJ1aWx0aW5fc3RyaW5nID0gJ2J1aWx0aW5zJw0KDQpQVE1vZHVsZSA9IHN5cy5tb2R1bGVzW19fbmFtZV9fXQ0KTU9ETkFNRSA9ICclcy5QVE1vZHVsZScgJSBfX25hbWVfXw0KDQoNCmRlZiBfZ2V0X3Byb3h5KG9iaiwgZ2V0X29ubHk9VHJ1ZSk6DQogICAgY2xhc3MgUHJveHkob2JqZWN0KToNCiAgICAgICAgZGVmIF9fZ2V0YXR0cl9fKHNlbGYsIG5hbWUpOg0KICAgICAgICAgICAgcmV0dXJuIGdldGF0dHIob2JqLCBuYW1lKQ0KICAgIGlmIG5vdCBnZXRfb25seToNCiAgICAgICAgZGVmIF9fc2V0YXR0cl9fKHNlbGYsIG5hbWUsIHZhbHVlKToNCiAgICAgICAgICAgIHNldGF0dHIob2JqLCBuYW1lLCB2YWx1ZSkNCiAgICAgICAgZGVmIF9fZGVsYXR0cl9fKHNlbGYsIG5hbWUpOg0KICAgICAgICAgICAgZGVsYXR0cihvYmosIG5hbWUpDQogICAgICAgIFByb3h5Ll9fc2V0YXR0cl9fID0gX19zZXRhdHRyX18NCiAgICAgICAgUHJveHkuX19kZWxhdHRyX18gPSBfX2RlbGF0dHJfXw0KICAgIHJldHVybiBQcm94eSgpDQoNCg0KIyBmb3IgdXNlIGluIHRoZSB0ZXN0DQpzb21ldGhpbmcgID0gc2VudGluZWwuU29tZXRoaW5nDQpzb21ldGhpbmdfZWxzZSAgPSBzZW50aW5lbC5Tb21ldGhpbmdFbHNlDQoNCg0KY2xhc3MgRm9vKG9iamVjdCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGEpOg0KICAgICAgICBwYXNzDQogICAgZGVmIGYoc2VsZiwgYSk6DQogICAgICAgIHBhc3MNCiAgICBkZWYgZyhzZWxmKToNCiAgICAgICAgcGFzcw0KICAgIGZvbyA9ICdiYXInDQoNCiAgICBjbGFzcyBCYXIob2JqZWN0KToNCiAgICAgICAgZGVmIGEoc2VsZik6DQogICAgICAgICAgICBwYXNzDQoNCmZvb19uYW1lID0gJyVzLkZvbycgJSBfX25hbWVfXw0KDQoNCmRlZiBmdW5jdGlvbihhLCBiPUZvbyk6DQogICAgcGFzcw0KDQoNCmNsYXNzIENvbnRhaW5lcihvYmplY3QpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmKToNCiAgICAgICAgc2VsZi52YWx1ZXMgPSB7fQ0KDQogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIG5hbWUpOg0KICAgICAgICByZXR1cm4gc2VsZi52YWx1ZXNbbmFtZV0NCg0KICAgIGRlZiBfX3NldGl0ZW1fXyhzZWxmLCBuYW1lLCB2YWx1ZSk6DQogICAgICAgIHNlbGYudmFsdWVzW25hbWVdID0gdmFsdWUNCg0KICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBuYW1lKToNCiAgICAgICAgZGVsIHNlbGYudmFsdWVzW25hbWVdDQoNCiAgICBkZWYgX19pdGVyX18oc2VsZik6DQogICAgICAgIHJldHVybiBpdGVyKHNlbGYudmFsdWVzKQ0KDQoNCg0KY2xhc3MgUGF0Y2hUZXN0KHVuaXR0ZXN0LlRlc3RDYXNlKToNCg0KICAgIGRlZiBhc3NlcnROb3RDYWxsYWJsZShzZWxmLCBvYmosIG1hZ2ljPVRydWUpOg0KICAgICAgICBNb2NrQ2xhc3MgPSBOb25DYWxsYWJsZU1hZ2ljTW9jaw0KICAgICAgICBpZiBub3QgbWFnaWM6DQogICAgICAgICAgICBNb2NrQ2xhc3MgPSBOb25DYWxsYWJsZU1vY2sNCg0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG9iaikNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG9iaiwgTW9ja0NsYXNzKSkNCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShpc19pbnN0YW5jZShvYmosIENhbGxhYmxlTWl4aW4pKQ0KDQoNCiAgICBkZWYgdGVzdF9zaW5nbGVfcGF0Y2hvYmplY3Qoc2VsZik6DQogICAgICAgIGNsYXNzIFNvbWV0aGluZyhvYmplY3QpOg0KICAgICAgICAgICAgYXR0cmlidXRlID0gc2VudGluZWwuT3JpZ2luYWwNCg0KICAgICAgICBAcGF0Y2gub2JqZWN0KFNvbWV0aGluZywgJ2F0dHJpYnV0ZScsIHNlbnRpbmVsLlBhdGNoZWQpDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFNvbWV0aGluZy5hdHRyaWJ1dGUsIHNlbnRpbmVsLlBhdGNoZWQsICJ1bnBhdGNoZWQiKQ0KDQogICAgICAgIHRlc3QoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFNvbWV0aGluZy5hdHRyaWJ1dGUsIHNlbnRpbmVsLk9yaWdpbmFsLA0KICAgICAgICAgICAgICAgICAgICAgICAgICJwYXRjaCBub3QgcmVzdG9yZWQiKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaG9iamVjdF93aXRoX25vbmUoc2VsZik6DQogICAgICAgIGNsYXNzIFNvbWV0aGluZyhvYmplY3QpOg0KICAgICAgICAgICAgYXR0cmlidXRlID0gc2VudGluZWwuT3JpZ2luYWwNCg0KICAgICAgICBAcGF0Y2gub2JqZWN0KFNvbWV0aGluZywgJ2F0dHJpYnV0ZScsIE5vbmUpDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBzZWxmLmFzc2VydElzTm9uZShTb21ldGhpbmcuYXR0cmlidXRlLCAidW5wYXRjaGVkIikNCg0KICAgICAgICB0ZXN0KCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21ldGhpbmcuYXR0cmlidXRlLCBzZW50aW5lbC5PcmlnaW5hbCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAicGF0Y2ggbm90IHJlc3RvcmVkIikNCg0KDQogICAgZGVmIHRlc3RfbXVsdGlwbGVfcGF0Y2hvYmplY3Qoc2VsZik6DQogICAgICAgIGNsYXNzIFNvbWV0aGluZyhvYmplY3QpOg0KICAgICAgICAgICAgYXR0cmlidXRlID0gc2VudGluZWwuT3JpZ2luYWwNCiAgICAgICAgICAgIG5leHRfYXR0cmlidXRlID0gc2VudGluZWwuT3JpZ2luYWwyDQoNCiAgICAgICAgQHBhdGNoLm9iamVjdChTb21ldGhpbmcsICdhdHRyaWJ1dGUnLCBzZW50aW5lbC5QYXRjaGVkKQ0KICAgICAgICBAcGF0Y2gub2JqZWN0KFNvbWV0aGluZywgJ25leHRfYXR0cmlidXRlJywgc2VudGluZWwuUGF0Y2hlZDIpDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFNvbWV0aGluZy5hdHRyaWJ1dGUsIHNlbnRpbmVsLlBhdGNoZWQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bnBhdGNoZWQiKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21ldGhpbmcubmV4dF9hdHRyaWJ1dGUsIHNlbnRpbmVsLlBhdGNoZWQyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5wYXRjaGVkIikNCg0KICAgICAgICB0ZXN0KCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21ldGhpbmcuYXR0cmlidXRlLCBzZW50aW5lbC5PcmlnaW5hbCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAicGF0Y2ggbm90IHJlc3RvcmVkIikNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21ldGhpbmcubmV4dF9hdHRyaWJ1dGUsIHNlbnRpbmVsLk9yaWdpbmFsMiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAicGF0Y2ggbm90IHJlc3RvcmVkIikNCg0KDQogICAgZGVmIHRlc3Rfb2JqZWN0X2xvb2t1cF9pc19xdWl0ZV9sYXp5KHNlbGYpOg0KICAgICAgICBnbG9iYWwgc29tZXRoaW5nDQogICAgICAgIG9yaWdpbmFsID0gc29tZXRoaW5nDQogICAgICAgIEBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5Tb21ldGhpbmcyKQ0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgcGFzcw0KDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNvbWV0aGluZyA9IHNlbnRpbmVsLnJlcGxhY2VtZW50X3ZhbHVlDQogICAgICAgICAgICB0ZXN0KCkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5yZXBsYWNlbWVudF92YWx1ZSkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHNvbWV0aGluZyA9IG9yaWdpbmFsDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoKHNlbGYpOg0KICAgICAgICBAcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuU29tZXRoaW5nMikNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoUFRNb2R1bGUuc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5wYXRjaGVkIikNCg0KICAgICAgICB0ZXN0KCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChQVE1vZHVsZS5zb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZywNCiAgICAgICAgICAgICAgICAgICAgICAgICAicGF0Y2ggbm90IHJlc3RvcmVkIikNCg0KICAgICAgICBAcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuU29tZXRoaW5nMikNCiAgICAgICAgQHBhdGNoKCclcy5zb21ldGhpbmdfZWxzZScgJSBfX25hbWVfXywgc2VudGluZWwuU29tZXRoaW5nRWxzZSkNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoUFRNb2R1bGUuc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5wYXRjaGVkIikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoUFRNb2R1bGUuc29tZXRoaW5nX2Vsc2UsIHNlbnRpbmVsLlNvbWV0aGluZ0Vsc2UsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bnBhdGNoZWQiKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoUFRNb2R1bGUuc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcsDQogICAgICAgICAgICAgICAgICAgICAgICAgInBhdGNoIG5vdCByZXN0b3JlZCIpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoUFRNb2R1bGUuc29tZXRoaW5nX2Vsc2UsIHNlbnRpbmVsLlNvbWV0aGluZ0Vsc2UsDQogICAgICAgICAgICAgICAgICAgICAgICAgInBhdGNoIG5vdCByZXN0b3JlZCIpDQoNCiAgICAgICAgIyBUZXN0IHRoZSBwYXRjaGluZyBhbmQgcmVzdG9yaW5nIHdvcmtzIGEgc2Vjb25kIHRpbWUNCiAgICAgICAgdGVzdCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChQVE1vZHVsZS5zb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZywNCiAgICAgICAgICAgICAgICAgICAgICAgICAicGF0Y2ggbm90IHJlc3RvcmVkIikNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChQVE1vZHVsZS5zb21ldGhpbmdfZWxzZSwgc2VudGluZWwuU29tZXRoaW5nRWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAicGF0Y2ggbm90IHJlc3RvcmVkIikNCg0KICAgICAgICBtb2NrID0gTW9jaygpDQogICAgICAgIG1vY2sucmV0dXJuX3ZhbHVlID0gc2VudGluZWwuSGFuZGxlDQogICAgICAgIEBwYXRjaCgnJXMub3BlbicgJSBidWlsdGluX3N0cmluZywgbW9jaykNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwob3BlbignZmlsZW5hbWUnLCAncicpLCBzZW50aW5lbC5IYW5kbGUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICJvcGVuIG5vdCBwYXRjaGVkIikNCiAgICAgICAgdGVzdCgpDQogICAgICAgIHRlc3QoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwob3BlbiwgbW9jaywgInBhdGNoIG5vdCByZXN0b3JlZCIpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX2NsYXNzX2F0dHJpYnV0ZShzZWxmKToNCiAgICAgICAgQHBhdGNoKCclcy5Tb21lQ2xhc3MuY2xhc3NfYXR0cmlidXRlJyAlIF9fbmFtZV9fLA0KICAgICAgICAgICAgICAgc2VudGluZWwuQ2xhc3NBdHRyaWJ1dGUpDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFBUTW9kdWxlLlNvbWVDbGFzcy5jbGFzc19hdHRyaWJ1dGUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnRpbmVsLkNsYXNzQXR0cmlidXRlLCAidW5wYXRjaGVkIikNCiAgICAgICAgdGVzdCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRJc05vbmUoUFRNb2R1bGUuU29tZUNsYXNzLmNsYXNzX2F0dHJpYnV0ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgInBhdGNoIG5vdCByZXN0b3JlZCIpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNob2JqZWN0X3dpdGhfZGVmYXVsdF9tb2NrKHNlbGYpOg0KICAgICAgICBjbGFzcyBUZXN0KG9iamVjdCk6DQogICAgICAgICAgICBzb21ldGhpbmcgPSBzZW50aW5lbC5PcmlnaW5hbA0KICAgICAgICAgICAgc29tZXRoaW5nMiA9IHNlbnRpbmVsLk9yaWdpbmFsMg0KDQogICAgICAgIEBwYXRjaC5vYmplY3QoVGVzdCwgJ3NvbWV0aGluZycpDQogICAgICAgIGRlZiB0ZXN0KG1vY2spOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLCBUZXN0LnNvbWV0aGluZywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk1vY2sgbm90IHBhc3NlZCBpbnRvIHRlc3QgZnVuY3Rpb24iKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKG1vY2ssIE1hZ2ljTW9jaywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAicGF0Y2ggd2l0aCB0d28gYXJndW1lbnRzIGRpZCBub3QgY3JlYXRlIGEgbW9jayIpDQoNCiAgICAgICAgdGVzdCgpDQoNCiAgICAgICAgQHBhdGNoLm9iamVjdChUZXN0LCAnc29tZXRoaW5nJykNCiAgICAgICAgQHBhdGNoLm9iamVjdChUZXN0LCAnc29tZXRoaW5nMicpDQogICAgICAgIGRlZiB0ZXN0KHRoaXMxLCB0aGlzMiwgbW9jazEsIG1vY2syKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwodGhpczEsIHNlbnRpbmVsLnRoaXMxLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiUGF0Y2hlZCBmdW5jdGlvbiBkaWRuJ3QgcmVjZWl2ZSBpbml0aWFsIGFyZ3VtZW50IikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwodGhpczIsIHNlbnRpbmVsLnRoaXMyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiUGF0Y2hlZCBmdW5jdGlvbiBkaWRuJ3QgcmVjZWl2ZSBzZWNvbmQgYXJndW1lbnQiKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrMSwgVGVzdC5zb21ldGhpbmcyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTW9jayBub3QgcGFzc2VkIGludG8gdGVzdCBmdW5jdGlvbiIpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2syLCBUZXN0LnNvbWV0aGluZywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlNlY29uZCBNb2NrIG5vdCBwYXNzZWQgaW50byB0ZXN0IGZ1bmN0aW9uIikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShtb2NrMiwgTWFnaWNNb2NrLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYXRjaCB3aXRoIHR3byBhcmd1bWVudHMgZGlkIG5vdCBjcmVhdGUgYSBtb2NrIikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShtb2NrMiwgTWFnaWNNb2NrLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYXRjaCB3aXRoIHR3byBhcmd1bWVudHMgZGlkIG5vdCBjcmVhdGUgYSBtb2NrIikNCg0KICAgICAgICAgICAgIyBBIGhhY2sgdG8gdGVzdCB0aGF0IG5ldyBtb2NrcyBhcmUgcGFzc2VkIHRoZSBzZWNvbmQgdGltZQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnROb3RFcXVhbChvdXRlck1vY2sxLCBtb2NrMSwgInVuZXhwZWN0ZWQgdmFsdWUgZm9yIG1vY2sxIikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwob3V0ZXJNb2NrMiwgbW9jazIsICJ1bmV4cGVjdGVkIHZhbHVlIGZvciBtb2NrMSIpDQogICAgICAgICAgICByZXR1cm4gbW9jazEsIG1vY2syDQoNCiAgICAgICAgb3V0ZXJNb2NrMSA9IG91dGVyTW9jazIgPSBOb25lDQogICAgICAgIG91dGVyTW9jazEsIG91dGVyTW9jazIgPSB0ZXN0KHNlbnRpbmVsLnRoaXMxLCBzZW50aW5lbC50aGlzMikNCg0KICAgICAgICAjIFRlc3QgdGhhdCBleGVjdXRpbmcgYSBzZWNvbmQgdGltZSBjcmVhdGVzIG5ldyBtb2Nrcw0KICAgICAgICB0ZXN0KHNlbnRpbmVsLnRoaXMxLCBzZW50aW5lbC50aGlzMikNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfd2l0aF9zcGVjKHNlbGYpOg0KICAgICAgICBAcGF0Y2goJyVzLlNvbWVDbGFzcycgJSBfX25hbWVfXywgc3BlYz1Tb21lQ2xhc3MpDQogICAgICAgIGRlZiB0ZXN0KE1vY2tTb21lQ2xhc3MpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21lQ2xhc3MsIE1vY2tTb21lQ2xhc3MpDQogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNfaW5zdGFuY2UoU29tZUNsYXNzLndpYmJsZSwgTWFnaWNNb2NrKSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBsYW1iZGE6IFNvbWVDbGFzcy5ub3Rfd2liYmxlKQ0KDQogICAgICAgIHRlc3QoKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaG9iamVjdF93aXRoX3NwZWMoc2VsZik6DQogICAgICAgIEBwYXRjaC5vYmplY3QoU29tZUNsYXNzLCAnY2xhc3NfYXR0cmlidXRlJywgc3BlYz1Tb21lQ2xhc3MpDQogICAgICAgIGRlZiB0ZXN0KE1vY2tBdHRyaWJ1dGUpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21lQ2xhc3MuY2xhc3NfYXR0cmlidXRlLCBNb2NrQXR0cmlidXRlKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKFNvbWVDbGFzcy5jbGFzc19hdHRyaWJ1dGUud2liYmxlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFnaWNNb2NrKSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFtYmRhOiBTb21lQ2xhc3MuY2xhc3NfYXR0cmlidXRlLm5vdF93aWJibGUpDQoNCiAgICAgICAgdGVzdCgpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX3dpdGhfc3BlY19hc19saXN0KHNlbGYpOg0KICAgICAgICBAcGF0Y2goJyVzLlNvbWVDbGFzcycgJSBfX25hbWVfXywgc3BlYz1bJ3dpYmJsZSddKQ0KICAgICAgICBkZWYgdGVzdChNb2NrU29tZUNsYXNzKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoU29tZUNsYXNzLCBNb2NrU29tZUNsYXNzKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKFNvbWVDbGFzcy53aWJibGUsIE1hZ2ljTW9jaykpDQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgbGFtYmRhOiBTb21lQ2xhc3Mubm90X3dpYmJsZSkNCg0KICAgICAgICB0ZXN0KCkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hvYmplY3Rfd2l0aF9zcGVjX2FzX2xpc3Qoc2VsZik6DQogICAgICAgIEBwYXRjaC5vYmplY3QoU29tZUNsYXNzLCAnY2xhc3NfYXR0cmlidXRlJywgc3BlYz1bJ3dpYmJsZSddKQ0KICAgICAgICBkZWYgdGVzdChNb2NrQXR0cmlidXRlKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoU29tZUNsYXNzLmNsYXNzX2F0dHJpYnV0ZSwgTW9ja0F0dHJpYnV0ZSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc19pbnN0YW5jZShTb21lQ2xhc3MuY2xhc3NfYXR0cmlidXRlLndpYmJsZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hZ2ljTW9jaykpDQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbWJkYTogU29tZUNsYXNzLmNsYXNzX2F0dHJpYnV0ZS5ub3Rfd2liYmxlKQ0KDQogICAgICAgIHRlc3QoKQ0KDQoNCiAgICBkZWYgdGVzdF9uZXN0ZWRfcGF0Y2hfd2l0aF9zcGVjX2FzX2xpc3Qoc2VsZik6DQogICAgICAgICMgcmVncmVzc2lvbiB0ZXN0IGZvciBuZXN0ZWQgZGVjb3JhdG9ycw0KICAgICAgICBAcGF0Y2goJyVzLm9wZW4nICUgYnVpbHRpbl9zdHJpbmcpDQogICAgICAgIEBwYXRjaCgnJXMuU29tZUNsYXNzJyAlIF9fbmFtZV9fLCBzcGVjPVsnd2liYmxlJ10pDQogICAgICAgIGRlZiB0ZXN0KE1vY2tTb21lQ2xhc3MsIE1vY2tPcGVuKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoU29tZUNsYXNzLCBNb2NrU29tZUNsYXNzKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKFNvbWVDbGFzcy53aWJibGUsIE1hZ2ljTW9jaykpDQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgbGFtYmRhOiBTb21lQ2xhc3Mubm90X3dpYmJsZSkNCiAgICAgICAgdGVzdCgpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX3dpdGhfc3BlY19hc19ib29sZWFuKHNlbGYpOg0KICAgICAgICBAcGF0Y2goJyVzLlNvbWVDbGFzcycgJSBfX25hbWVfXywgc3BlYz1UcnVlKQ0KICAgICAgICBkZWYgdGVzdChNb2NrU29tZUNsYXNzKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoU29tZUNsYXNzLCBNb2NrU29tZUNsYXNzKQ0KICAgICAgICAgICAgIyBTaG91bGQgbm90IHJhaXNlIGF0dHJpYnV0ZSBlcnJvcg0KICAgICAgICAgICAgTW9ja1NvbWVDbGFzcy53aWJibGUNCg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGxhbWJkYTogTW9ja1NvbWVDbGFzcy5ub3Rfd2liYmxlKQ0KDQogICAgICAgIHRlc3QoKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9vYmplY3Rfd2l0aF9zcGVjX2FzX2Jvb2xlYW4oc2VsZik6DQogICAgICAgIEBwYXRjaC5vYmplY3QoUFRNb2R1bGUsICdTb21lQ2xhc3MnLCBzcGVjPVRydWUpDQogICAgICAgIGRlZiB0ZXN0KE1vY2tTb21lQ2xhc3MpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21lQ2xhc3MsIE1vY2tTb21lQ2xhc3MpDQogICAgICAgICAgICAjIFNob3VsZCBub3QgcmFpc2UgYXR0cmlidXRlIGVycm9yDQogICAgICAgICAgICBNb2NrU29tZUNsYXNzLndpYmJsZQ0KDQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgbGFtYmRhOiBNb2NrU29tZUNsYXNzLm5vdF93aWJibGUpDQoNCiAgICAgICAgdGVzdCgpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX2NsYXNzX2FjdHNfd2l0aF9zcGVjX2lzX2luaGVyaXRlZChzZWxmKToNCiAgICAgICAgQHBhdGNoKCclcy5Tb21lQ2xhc3MnICUgX19uYW1lX18sIHNwZWM9VHJ1ZSkNCiAgICAgICAgZGVmIHRlc3QoTW9ja1NvbWVDbGFzcyk6DQogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNfaW5zdGFuY2UoTW9ja1NvbWVDbGFzcywgTWFnaWNNb2NrKSkNCiAgICAgICAgICAgIGluc3RhbmNlID0gTW9ja1NvbWVDbGFzcygpDQogICAgICAgICAgICBzZWxmLmFzc2VydE5vdENhbGxhYmxlKGluc3RhbmNlKQ0KICAgICAgICAgICAgIyBTaG91bGQgbm90IHJhaXNlIGF0dHJpYnV0ZSBlcnJvcg0KICAgICAgICAgICAgaW5zdGFuY2Uud2liYmxlDQoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBsYW1iZGE6IGluc3RhbmNlLm5vdF93aWJibGUpDQoNCiAgICAgICAgdGVzdCgpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX3dpdGhfY3JlYXRlX21vY2tzX25vbl9leGlzdGVudF9hdHRyaWJ1dGVzKHNlbGYpOg0KICAgICAgICBAcGF0Y2goJyVzLmZyb29ibGUnICUgYnVpbHRpbl9zdHJpbmcsIHNlbnRpbmVsLkZyb29ibGUsIGNyZWF0ZT1UcnVlKQ0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmcm9vYmxlLCBzZW50aW5lbC5Gcm9vYmxlKQ0KDQogICAgICAgIHRlc3QoKQ0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhOYW1lRXJyb3IsIGxhbWJkYTogZnJvb2JsZSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hvYmplY3Rfd2l0aF9jcmVhdGVfbW9ja3Nfbm9uX2V4aXN0ZW50X2F0dHJpYnV0ZXMoc2VsZik6DQogICAgICAgIEBwYXRjaC5vYmplY3QoU29tZUNsYXNzLCAnZnJvb2JsZScsIHNlbnRpbmVsLkZyb29ibGUsIGNyZWF0ZT1UcnVlKQ0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21lQ2xhc3MuZnJvb2JsZSwgc2VudGluZWwuRnJvb2JsZSkNCg0KICAgICAgICB0ZXN0KCkNCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShoYXNhdHRyKFNvbWVDbGFzcywgJ2Zyb29ibGUnKSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfd29udF9jcmVhdGVfYnlfZGVmYXVsdChzZWxmKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgQHBhdGNoKCclcy5mcm9vYmxlJyAlIGJ1aWx0aW5fc3RyaW5nLCBzZW50aW5lbC5Gcm9vYmxlKQ0KICAgICAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZyb29ibGUsIHNlbnRpbmVsLkZyb29ibGUpDQoNCiAgICAgICAgICAgIHRlc3QoKQ0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICBwYXNzDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBzZWxmLmZhaWwoJ1BhdGNoaW5nIG5vbiBleGlzdGVudCBhdHRyaWJ1dGVzIHNob3VsZCBmYWlsJykNCg0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhOYW1lRXJyb3IsIGxhbWJkYTogZnJvb2JsZSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hvYmplY3Rfd29udF9jcmVhdGVfYnlfZGVmYXVsdChzZWxmKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgQHBhdGNoLm9iamVjdChTb21lQ2xhc3MsICdmcm9vYmxlJywgc2VudGluZWwuRnJvb2JsZSkNCiAgICAgICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICAgICAgc2VsZi5mYWlsKCdQYXRjaGluZyBub24gZXhpc3RlbnQgYXR0cmlidXRlcyBzaG91bGQgZmFpbCcpDQoNCiAgICAgICAgICAgIHRlc3QoKQ0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICBwYXNzDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBzZWxmLmZhaWwoJ1BhdGNoaW5nIG5vbiBleGlzdGVudCBhdHRyaWJ1dGVzIHNob3VsZCBmYWlsJykNCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShoYXNhdHRyKFNvbWVDbGFzcywgJ2Zyb29ibGUnKSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfd2l0aF9zdGF0aWNfbWV0aG9kcyhzZWxmKToNCiAgICAgICAgY2xhc3MgRm9vKG9iamVjdCk6DQogICAgICAgICAgICBAc3RhdGljbWV0aG9kDQogICAgICAgICAgICBkZWYgd29vdCgpOg0KICAgICAgICAgICAgICAgIHJldHVybiBzZW50aW5lbC5TdGF0aWMNCg0KICAgICAgICBAcGF0Y2gub2JqZWN0KEZvbywgJ3dvb3QnLCBzdGF0aWNtZXRob2QobGFtYmRhOiBzZW50aW5lbC5QYXRjaGVkKSkNCiAgICAgICAgZGVmIGFub255bW91cygpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28ud29vdCgpLCBzZW50aW5lbC5QYXRjaGVkKQ0KICAgICAgICBhbm9ueW1vdXMoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRm9vLndvb3QoKSwgc2VudGluZWwuU3RhdGljKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9sb2NhbChzZWxmKToNCiAgICAgICAgZm9vID0gc2VudGluZWwuRm9vDQogICAgICAgIEBwYXRjaC5vYmplY3Qoc2VudGluZWwsICdGb28nLCAnRm9vJykNCiAgICAgICAgZGVmIGFub255bW91cygpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzZW50aW5lbC5Gb28sICdGb28nKQ0KICAgICAgICBhbm9ueW1vdXMoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc2VudGluZWwuRm9vLCBmb28pDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX3Nsb3RzKHNlbGYpOg0KICAgICAgICBjbGFzcyBGb28ob2JqZWN0KToNCiAgICAgICAgICAgIF9fc2xvdHNfXyA9ICgnRm9vJywpDQoNCiAgICAgICAgZm9vID0gRm9vKCkNCiAgICAgICAgZm9vLkZvbyA9IHNlbnRpbmVsLkZvbw0KDQogICAgICAgIEBwYXRjaC5vYmplY3QoZm9vLCAnRm9vJywgJ0ZvbycpDQogICAgICAgIGRlZiBhbm9ueW1vdXMoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLkZvbywgJ0ZvbycpDQogICAgICAgIGFub255bW91cygpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28uRm9vLCBzZW50aW5lbC5Gb28pDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNob2JqZWN0X2NsYXNzX2RlY29yYXRvcihzZWxmKToNCiAgICAgICAgY2xhc3MgU29tZXRoaW5nKG9iamVjdCk6DQogICAgICAgICAgICBhdHRyaWJ1dGUgPSBzZW50aW5lbC5PcmlnaW5hbA0KDQogICAgICAgIGNsYXNzIEZvbyhvYmplY3QpOg0KICAgICAgICAgICAgZGVmIHRlc3RfbWV0aG9kKG90aGVyX3NlbGYpOg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoU29tZXRoaW5nLmF0dHJpYnV0ZSwgc2VudGluZWwuUGF0Y2hlZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bnBhdGNoZWQiKQ0KICAgICAgICAgICAgZGVmIG5vdF90ZXN0X21ldGhvZChvdGhlcl9zZWxmKToNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFNvbWV0aGluZy5hdHRyaWJ1dGUsIHNlbnRpbmVsLk9yaWdpbmFsLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm5vbi10ZXN0IG1ldGhvZCBwYXRjaGVkIikNCg0KICAgICAgICBGb28gPSBwYXRjaC5vYmplY3QoU29tZXRoaW5nLCAnYXR0cmlidXRlJywgc2VudGluZWwuUGF0Y2hlZCkoRm9vKQ0KDQogICAgICAgIGYgPSBGb28oKQ0KICAgICAgICBmLnRlc3RfbWV0aG9kKCkNCiAgICAgICAgZi5ub3RfdGVzdF9tZXRob2QoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoU29tZXRoaW5nLmF0dHJpYnV0ZSwgc2VudGluZWwuT3JpZ2luYWwsDQogICAgICAgICAgICAgICAgICAgICAgICAgInBhdGNoIG5vdCByZXN0b3JlZCIpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX2NsYXNzX2RlY29yYXRvcihzZWxmKToNCiAgICAgICAgY2xhc3MgU29tZXRoaW5nKG9iamVjdCk6DQogICAgICAgICAgICBhdHRyaWJ1dGUgPSBzZW50aW5lbC5PcmlnaW5hbA0KDQogICAgICAgIGNsYXNzIEZvbyhvYmplY3QpOg0KICAgICAgICAgICAgZGVmIHRlc3RfbWV0aG9kKG90aGVyX3NlbGYsIG1vY2tfc29tZXRoaW5nKToNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFBUTW9kdWxlLnNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5wYXRjaGVkIikNCiAgICAgICAgICAgIGRlZiBub3RfdGVzdF9tZXRob2Qob3RoZXJfc2VsZik6DQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChQVE1vZHVsZS5zb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJub24tdGVzdCBtZXRob2QgcGF0Y2hlZCIpDQogICAgICAgIEZvbyA9IHBhdGNoKCclcy5zb21ldGhpbmcnICUgX19uYW1lX18pKEZvbykNCg0KICAgICAgICBmID0gRm9vKCkNCiAgICAgICAgZi50ZXN0X21ldGhvZCgpDQogICAgICAgIGYubm90X3Rlc3RfbWV0aG9kKCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFNvbWV0aGluZy5hdHRyaWJ1dGUsIHNlbnRpbmVsLk9yaWdpbmFsLA0KICAgICAgICAgICAgICAgICAgICAgICAgICJwYXRjaCBub3QgcmVzdG9yZWQiKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFBUTW9kdWxlLnNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICJwYXRjaCBub3QgcmVzdG9yZWQiKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaG9iamVjdF90d2ljZShzZWxmKToNCiAgICAgICAgY2xhc3MgU29tZXRoaW5nKG9iamVjdCk6DQogICAgICAgICAgICBhdHRyaWJ1dGUgPSBzZW50aW5lbC5PcmlnaW5hbA0KICAgICAgICAgICAgbmV4dF9hdHRyaWJ1dGUgPSBzZW50aW5lbC5PcmlnaW5hbDINCg0KICAgICAgICBAcGF0Y2gub2JqZWN0KFNvbWV0aGluZywgJ2F0dHJpYnV0ZScsIHNlbnRpbmVsLlBhdGNoZWQpDQogICAgICAgIEBwYXRjaC5vYmplY3QoU29tZXRoaW5nLCAnYXR0cmlidXRlJywgc2VudGluZWwuUGF0Y2hlZCkNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoU29tZXRoaW5nLmF0dHJpYnV0ZSwgc2VudGluZWwuUGF0Y2hlZCwgInVucGF0Y2hlZCIpDQoNCiAgICAgICAgdGVzdCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21ldGhpbmcuYXR0cmlidXRlLCBzZW50aW5lbC5PcmlnaW5hbCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAicGF0Y2ggbm90IHJlc3RvcmVkIikNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfZGljdChzZWxmKToNCiAgICAgICAgZm9vID0geydpbml0aWFsJzogb2JqZWN0KCksICdvdGhlcic6ICdzb21ldGhpbmcnfQ0KICAgICAgICBvcmlnaW5hbCA9IGZvby5jb3B5KCkNCg0KICAgICAgICBAcGF0Y2guZGljdChmb28pDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBmb29bJ2EnXSA9IDMNCiAgICAgICAgICAgIGRlbCBmb29bJ2luaXRpYWwnXQ0KICAgICAgICAgICAgZm9vWydvdGhlciddID0gJ3NvbWV0aGluZyBlbHNlJw0KDQogICAgICAgIHRlc3QoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCBvcmlnaW5hbCkNCg0KICAgICAgICBAcGF0Y2guZGljdChmb28sIHsnYSc6ICdiJ30pDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihmb28pLCAzKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb29bJ2EnXSwgJ2InKQ0KDQogICAgICAgIHRlc3QoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCBvcmlnaW5hbCkNCg0KICAgICAgICBAcGF0Y2guZGljdChmb28sIFsoJ2EnLCAnYicpXSkNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKGZvbyksIDMpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvb1snYSddLCAnYicpDQoNCiAgICAgICAgdGVzdCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28sIG9yaWdpbmFsKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9kaWN0X3dpdGhfY29udGFpbmVyX29iamVjdChzZWxmKToNCiAgICAgICAgZm9vID0gQ29udGFpbmVyKCkNCiAgICAgICAgZm9vWydpbml0aWFsJ10gPSBvYmplY3QoKQ0KICAgICAgICBmb29bJ290aGVyJ10gPSAgJ3NvbWV0aGluZycNCg0KICAgICAgICBvcmlnaW5hbCA9IGZvby52YWx1ZXMuY29weSgpDQoNCiAgICAgICAgQHBhdGNoLmRpY3QoZm9vKQ0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgZm9vWydhJ10gPSAzDQogICAgICAgICAgICBkZWwgZm9vWydpbml0aWFsJ10NCiAgICAgICAgICAgIGZvb1snb3RoZXInXSA9ICdzb21ldGhpbmcgZWxzZScNCg0KICAgICAgICB0ZXN0KCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvby52YWx1ZXMsIG9yaWdpbmFsKQ0KDQogICAgICAgIEBwYXRjaC5kaWN0KGZvbywgeydhJzogJ2InfSkNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKGZvby52YWx1ZXMpLCAzKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb29bJ2EnXSwgJ2InKQ0KDQogICAgICAgIHRlc3QoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLnZhbHVlcywgb3JpZ2luYWwpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX2RpY3Rfd2l0aF9jbGVhcihzZWxmKToNCiAgICAgICAgZm9vID0geydpbml0aWFsJzogb2JqZWN0KCksICdvdGhlcic6ICdzb21ldGhpbmcnfQ0KICAgICAgICBvcmlnaW5hbCA9IGZvby5jb3B5KCkNCg0KICAgICAgICBAcGF0Y2guZGljdChmb28sIGNsZWFyPVRydWUpDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvbywge30pDQogICAgICAgICAgICBmb29bJ2EnXSA9IDMNCiAgICAgICAgICAgIGZvb1snb3RoZXInXSA9ICdzb21ldGhpbmcgZWxzZScNCg0KICAgICAgICB0ZXN0KCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvbywgb3JpZ2luYWwpDQoNCiAgICAgICAgQHBhdGNoLmRpY3QoZm9vLCB7J2EnOiAnYid9LCBjbGVhcj1UcnVlKQ0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28sIHsnYSc6ICdiJ30pDQoNCiAgICAgICAgdGVzdCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28sIG9yaWdpbmFsKQ0KDQogICAgICAgIEBwYXRjaC5kaWN0KGZvbywgWygnYScsICdiJyldLCBjbGVhcj1UcnVlKQ0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28sIHsnYSc6ICdiJ30pDQoNCiAgICAgICAgdGVzdCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28sIG9yaWdpbmFsKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9kaWN0X3dpdGhfY29udGFpbmVyX29iamVjdF9hbmRfY2xlYXIoc2VsZik6DQogICAgICAgIGZvbyA9IENvbnRhaW5lcigpDQogICAgICAgIGZvb1snaW5pdGlhbCddID0gb2JqZWN0KCkNCiAgICAgICAgZm9vWydvdGhlciddID0gICdzb21ldGhpbmcnDQoNCiAgICAgICAgb3JpZ2luYWwgPSBmb28udmFsdWVzLmNvcHkoKQ0KDQogICAgICAgIEBwYXRjaC5kaWN0KGZvbywgY2xlYXI9VHJ1ZSkNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLnZhbHVlcywge30pDQogICAgICAgICAgICBmb29bJ2EnXSA9IDMNCiAgICAgICAgICAgIGZvb1snb3RoZXInXSA9ICdzb21ldGhpbmcgZWxzZScNCg0KICAgICAgICB0ZXN0KCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvby52YWx1ZXMsIG9yaWdpbmFsKQ0KDQogICAgICAgIEBwYXRjaC5kaWN0KGZvbywgeydhJzogJ2InfSwgY2xlYXI9VHJ1ZSkNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLnZhbHVlcywgeydhJzogJ2InfSkNCg0KICAgICAgICB0ZXN0KCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvby52YWx1ZXMsIG9yaWdpbmFsKQ0KDQoNCiAgICBkZWYgdGVzdF9uYW1lX3ByZXNlcnZlZChzZWxmKToNCiAgICAgICAgZm9vID0ge30NCg0KICAgICAgICBAcGF0Y2goJyVzLlNvbWVDbGFzcycgJSBfX25hbWVfXywgb2JqZWN0KCkpDQogICAgICAgIEBwYXRjaCgnJXMuU29tZUNsYXNzJyAlIF9fbmFtZV9fLCBvYmplY3QoKSwgYXV0b3NwZWM9VHJ1ZSkNCiAgICAgICAgQHBhdGNoLm9iamVjdChTb21lQ2xhc3MsIG9iamVjdCgpKQ0KICAgICAgICBAcGF0Y2guZGljdChmb28pDQogICAgICAgIGRlZiBzb21lX25hbWUoKToNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWVfbmFtZS5fX25hbWVfXywgJ3NvbWVfbmFtZScpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX3dpdGhfZXhjZXB0aW9uKHNlbGYpOg0KICAgICAgICBmb28gPSB7fQ0KDQogICAgICAgIEBwYXRjaC5kaWN0KGZvbywgeydhJzogJ2InfSkNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHJhaXNlIE5hbWVFcnJvcignS29ucmFkJykNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgdGVzdCgpDQogICAgICAgIGV4Y2VwdCBOYW1lRXJyb3I6DQogICAgICAgICAgICBwYXNzDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBzZWxmLmZhaWwoJ05hbWVFcnJvciBub3QgcmFpc2VkIGJ5IHRlc3QnKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7fSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfZGljdF93aXRoX3N0cmluZyhzZWxmKToNCiAgICAgICAgQHBhdGNoLmRpY3QoJ29zLmVudmlyb24nLCB7J2tvbnJhZF9kZWxvbmcnOiAnc29tZSB2YWx1ZSd9KQ0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigna29ucmFkX2RlbG9uZycsIG9zLmVudmlyb24pDQoNCiAgICAgICAgdGVzdCgpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX2Rlc2NyaXB0b3Ioc2VsZik6DQogICAgICAgICMgd291bGQgYmUgc29tZSBlZmZvcnQgdG8gZml4IHRoaXMgLSB3ZSBjb3VsZCBzcGVjaWFsIGNhc2UgdGhlDQogICAgICAgICMgYnVpbHRpbiBkZXNjcmlwdG9yczogY2xhc3NtZXRob2QsIHByb3BlcnR5LCBzdGF0aWNtZXRob2QNCiAgICAgICAgcmV0dXJuDQogICAgICAgIGNsYXNzIE5vdGhpbmcob2JqZWN0KToNCiAgICAgICAgICAgIGZvbyA9IE5vbmUNCg0KICAgICAgICBjbGFzcyBTb21ldGhpbmcob2JqZWN0KToNCiAgICAgICAgICAgIGZvbyA9IHt9DQoNCiAgICAgICAgICAgIEBwYXRjaC5vYmplY3QoTm90aGluZywgJ2ZvbycsIDIpDQogICAgICAgICAgICBAY2xhc3NtZXRob2QNCiAgICAgICAgICAgIGRlZiBrbGFzcyhjbHMpOg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoY2xzLCBTb21ldGhpbmcpDQoNCiAgICAgICAgICAgIEBwYXRjaC5vYmplY3QoTm90aGluZywgJ2ZvbycsIDIpDQogICAgICAgICAgICBAc3RhdGljbWV0aG9kDQogICAgICAgICAgICBkZWYgc3RhdGljKGFyZyk6DQogICAgICAgICAgICAgICAgcmV0dXJuIGFyZw0KDQogICAgICAgICAgICBAcGF0Y2guZGljdChmb28pDQogICAgICAgICAgICBAY2xhc3NtZXRob2QNCiAgICAgICAgICAgIGRlZiBrbGFzc19kaWN0KGNscyk6DQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhjbHMsIFNvbWV0aGluZykNCg0KICAgICAgICAgICAgQHBhdGNoLmRpY3QoZm9vKQ0KICAgICAgICAgICAgQHN0YXRpY21ldGhvZA0KICAgICAgICAgICAgZGVmIHN0YXRpY19kaWN0KGFyZyk6DQogICAgICAgICAgICAgICAgcmV0dXJuIGFyZw0KDQogICAgICAgICMgdGhlc2Ugd2lsbCByYWlzZSBleGNlcHRpb25zIGlmIHBhdGNoaW5nIGRlc2NyaXB0b3JzIGlzIGJyb2tlbg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFNvbWV0aGluZy5zdGF0aWMoJ2YwMCcpLCAnZjAwJykNCiAgICAgICAgU29tZXRoaW5nLmtsYXNzKCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChTb21ldGhpbmcuc3RhdGljX2RpY3QoJ2YwMCcpLCAnZjAwJykNCiAgICAgICAgU29tZXRoaW5nLmtsYXNzX2RpY3QoKQ0KDQogICAgICAgIHNvbWV0aGluZyA9IFNvbWV0aGluZygpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLnN0YXRpYygnZjAwJyksICdmMDAnKQ0KICAgICAgICBzb21ldGhpbmcua2xhc3MoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZy5zdGF0aWNfZGljdCgnZjAwJyksICdmMDAnKQ0KICAgICAgICBzb21ldGhpbmcua2xhc3NfZGljdCgpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWNfc2V0KHNlbGYpOg0KICAgICAgICBAcGF0Y2goJyVzLlNvbWVDbGFzcycgJSBfX25hbWVfXywgc3BlYz1Tb21lQ2xhc3MsIHNwZWNfc2V0PVRydWUpDQogICAgICAgIGRlZiB0ZXN0KE1vY2tDbGFzcyk6DQogICAgICAgICAgICBNb2NrQ2xhc3MueiA9ICdmb28nDQoNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIHRlc3QpDQoNCiAgICAgICAgQHBhdGNoLm9iamVjdChzdXBwb3J0LCAnU29tZUNsYXNzJywgc3BlYz1Tb21lQ2xhc3MsIHNwZWNfc2V0PVRydWUpDQogICAgICAgIGRlZiB0ZXN0KE1vY2tDbGFzcyk6DQogICAgICAgICAgICBNb2NrQ2xhc3MueiA9ICdmb28nDQoNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIHRlc3QpDQogICAgICAgIEBwYXRjaCgnJXMuU29tZUNsYXNzJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1UcnVlKQ0KICAgICAgICBkZWYgdGVzdChNb2NrQ2xhc3MpOg0KICAgICAgICAgICAgTW9ja0NsYXNzLnogPSAnZm9vJw0KDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCB0ZXN0KQ0KDQogICAgICAgIEBwYXRjaC5vYmplY3Qoc3VwcG9ydCwgJ1NvbWVDbGFzcycsIHNwZWNfc2V0PVRydWUpDQogICAgICAgIGRlZiB0ZXN0KE1vY2tDbGFzcyk6DQogICAgICAgICAgICBNb2NrQ2xhc3MueiA9ICdmb28nDQoNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIHRlc3QpDQoNCg0KICAgIGRlZiB0ZXN0X3NwZWNfc2V0X2luaGVyaXQoc2VsZik6DQogICAgICAgIEBwYXRjaCgnJXMuU29tZUNsYXNzJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1UcnVlKQ0KICAgICAgICBkZWYgdGVzdChNb2NrQ2xhc3MpOg0KICAgICAgICAgICAgaW5zdGFuY2UgPSBNb2NrQ2xhc3MoKQ0KICAgICAgICAgICAgaW5zdGFuY2UueiA9ICdmb28nDQoNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIHRlc3QpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX3N0YXJ0X3N0b3Aoc2VsZik6DQogICAgICAgIG9yaWdpbmFsID0gc29tZXRoaW5nDQogICAgICAgIHBhdGNoZXIgPSBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fKQ0KICAgICAgICBzZWxmLmFzc2VydElzKHNvbWV0aGluZywgb3JpZ2luYWwpDQogICAgICAgIG1vY2sgPSBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJc05vdChtb2NrLCBvcmlnaW5hbCkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoc29tZXRoaW5nLCBtb2NrKQ0KICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgcGF0Y2hlci5zdG9wKCkNCiAgICAgICAgc2VsZi5hc3NlcnRJcyhzb21ldGhpbmcsIG9yaWdpbmFsKQ0KDQoNCiAgICBkZWYgdGVzdF9zdG9wX3dpdGhvdXRfc3RhcnQoc2VsZik6DQogICAgICAgIHBhdGNoZXIgPSBwYXRjaChmb29fbmFtZSwgJ2JhcicsIDMpDQoNCiAgICAgICAgIyBjYWxsaW5nIHN0b3Agd2l0aG91dCBzdGFydCB1c2VkIHRvIHByb2R1Y2UgYSB2ZXJ5IG9ic2N1cmUgZXJyb3INCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoUnVudGltZUVycm9yLCBwYXRjaGVyLnN0b3ApDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNob2JqZWN0X3N0YXJ0X3N0b3Aoc2VsZik6DQogICAgICAgIG9yaWdpbmFsID0gc29tZXRoaW5nDQogICAgICAgIHBhdGNoZXIgPSBwYXRjaC5vYmplY3QoUFRNb2R1bGUsICdzb21ldGhpbmcnLCAnZm9vJykNCiAgICAgICAgc2VsZi5hc3NlcnRJcyhzb21ldGhpbmcsIG9yaWdpbmFsKQ0KICAgICAgICByZXBsYWNlZCA9IHBhdGNoZXIuc3RhcnQoKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlcGxhY2VkLCAnZm9vJykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoc29tZXRoaW5nLCByZXBsYWNlZCkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHBhdGNoZXIuc3RvcCgpDQogICAgICAgIHNlbGYuYXNzZXJ0SXMoc29tZXRoaW5nLCBvcmlnaW5hbCkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfZGljdF9zdGFydF9zdG9wKHNlbGYpOg0KICAgICAgICBkID0geydmb28nOiAnYmFyJ30NCiAgICAgICAgb3JpZ2luYWwgPSBkLmNvcHkoKQ0KICAgICAgICBwYXRjaGVyID0gcGF0Y2guZGljdChkLCBbKCdzcGFtJywgJ2VnZ3MnKV0sIGNsZWFyPVRydWUpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZCwgb3JpZ2luYWwpDQoNCiAgICAgICAgcGF0Y2hlci5zdGFydCgpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZCwgeydzcGFtJzogJ2VnZ3MnfSkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHBhdGNoZXIuc3RvcCgpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZCwgb3JpZ2luYWwpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX2RpY3RfY2xhc3NfZGVjb3JhdG9yKHNlbGYpOg0KICAgICAgICB0aGlzID0gc2VsZg0KICAgICAgICBkID0geydzcGFtJzogJ2VnZ3MnfQ0KICAgICAgICBvcmlnaW5hbCA9IGQuY29weSgpDQoNCiAgICAgICAgY2xhc3MgVGVzdChvYmplY3QpOg0KICAgICAgICAgICAgZGVmIHRlc3RfZmlyc3Qoc2VsZik6DQogICAgICAgICAgICAgICAgdGhpcy5hc3NlcnRFcXVhbChkLCB7J2Zvbyc6ICdiYXInfSkNCiAgICAgICAgICAgIGRlZiB0ZXN0X3NlY29uZChzZWxmKToNCiAgICAgICAgICAgICAgICB0aGlzLmFzc2VydEVxdWFsKGQsIHsnZm9vJzogJ2Jhcid9KQ0KDQogICAgICAgIFRlc3QgPSBwYXRjaC5kaWN0KGQsIHsnZm9vJzogJ2Jhcid9LCBjbGVhcj1UcnVlKShUZXN0KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGQsIG9yaWdpbmFsKQ0KDQogICAgICAgIHRlc3QgPSBUZXN0KCkNCg0KICAgICAgICB0ZXN0LnRlc3RfZmlyc3QoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGQsIG9yaWdpbmFsKQ0KDQogICAgICAgIHRlc3QudGVzdF9zZWNvbmQoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGQsIG9yaWdpbmFsKQ0KDQogICAgICAgIHRlc3QgPSBUZXN0KCkNCg0KICAgICAgICB0ZXN0LnRlc3RfZmlyc3QoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGQsIG9yaWdpbmFsKQ0KDQogICAgICAgIHRlc3QudGVzdF9zZWNvbmQoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGQsIG9yaWdpbmFsKQ0KDQoNCiAgICBkZWYgdGVzdF9nZXRfb25seV9wcm94eShzZWxmKToNCiAgICAgICAgY2xhc3MgU29tZXRoaW5nKG9iamVjdCk6DQogICAgICAgICAgICBmb28gPSAnZm9vJw0KICAgICAgICBjbGFzcyBTb21ldGhpbmdFbHNlOg0KICAgICAgICAgICAgZm9vID0gJ2ZvbycNCg0KICAgICAgICBmb3IgdGhpbmcgaW4gU29tZXRoaW5nLCBTb21ldGhpbmdFbHNlLCBTb21ldGhpbmcoKSwgU29tZXRoaW5nRWxzZToNCiAgICAgICAgICAgIHByb3h5ID0gX2dldF9wcm94eSh0aGluZykNCg0KICAgICAgICAgICAgQHBhdGNoLm9iamVjdChwcm94eSwgJ2ZvbycsICdiYXInKQ0KICAgICAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHByb3h5LmZvbywgJ2JhcicpDQogICAgICAgICAgICB0ZXN0KCkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocHJveHkuZm9vLCAnZm9vJykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwodGhpbmcuZm9vLCAnZm9vJykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90SW4oJ2ZvbycsIHByb3h5Ll9fZGljdF9fKQ0KDQoNCiAgICBkZWYgdGVzdF9nZXRfc2V0X2RlbGV0ZV9wcm94eShzZWxmKToNCiAgICAgICAgY2xhc3MgU29tZXRoaW5nKG9iamVjdCk6DQogICAgICAgICAgICBmb28gPSAnZm9vJw0KICAgICAgICBjbGFzcyBTb21ldGhpbmdFbHNlOg0KICAgICAgICAgICAgZm9vID0gJ2ZvbycNCg0KICAgICAgICBmb3IgdGhpbmcgaW4gU29tZXRoaW5nLCBTb21ldGhpbmdFbHNlLCBTb21ldGhpbmcoKSwgU29tZXRoaW5nRWxzZToNCiAgICAgICAgICAgIHByb3h5ID0gX2dldF9wcm94eShTb21ldGhpbmcsIGdldF9vbmx5PUZhbHNlKQ0KDQogICAgICAgICAgICBAcGF0Y2gub2JqZWN0KHByb3h5LCAnZm9vJywgJ2JhcicpDQogICAgICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocHJveHkuZm9vLCAnYmFyJykNCiAgICAgICAgICAgIHRlc3QoKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwcm94eS5mb28sICdmb28nKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCh0aGluZy5mb28sICdmb28nKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnROb3RJbignZm9vJywgcHJveHkuX19kaWN0X18pDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX2tleXdvcmRfYXJncyhzZWxmKToNCiAgICAgICAga3dhcmdzID0geydzaWRlX2VmZmVjdCc6IEtleUVycm9yLCAnZm9vLmJhci5yZXR1cm5fdmFsdWUnOiAzMywNCiAgICAgICAgICAgICAgICAgICdmb28nOiBNYWdpY01vY2soKX0NCg0KICAgICAgICBwYXRjaGVyID0gcGF0Y2goZm9vX25hbWUsICoqa3dhcmdzKQ0KICAgICAgICBtb2NrID0gcGF0Y2hlci5zdGFydCgpDQogICAgICAgIHBhdGNoZXIuc3RvcCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoS2V5RXJyb3IsIG1vY2spDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5mb28uYmFyKCksIDMzKQ0KICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UobW9jay5mb28sIE1hZ2ljTW9jaykNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfb2JqZWN0X2tleXdvcmRfYXJncyhzZWxmKToNCiAgICAgICAga3dhcmdzID0geydzaWRlX2VmZmVjdCc6IEtleUVycm9yLCAnZm9vLmJhci5yZXR1cm5fdmFsdWUnOiAzMywNCiAgICAgICAgICAgICAgICAgICdmb28nOiBNYWdpY01vY2soKX0NCg0KICAgICAgICBwYXRjaGVyID0gcGF0Y2gub2JqZWN0KEZvbywgJ2YnLCAqKmt3YXJncykNCiAgICAgICAgbW9jayA9IHBhdGNoZXIuc3RhcnQoKQ0KICAgICAgICBwYXRjaGVyLnN0b3AoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEtleUVycm9yLCBtb2NrKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suZm9vLmJhcigpLCAzMykNCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKG1vY2suZm9vLCBNYWdpY01vY2spDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX2RpY3Rfa2V5d29yZF9hcmdzKHNlbGYpOg0KICAgICAgICBvcmlnaW5hbCA9IHsnZm9vJzogJ2Jhcid9DQogICAgICAgIGNvcHkgPSBvcmlnaW5hbC5jb3B5KCkNCg0KICAgICAgICBwYXRjaGVyID0gcGF0Y2guZGljdChvcmlnaW5hbCwgZm9vPTMsIGJhcj00LCBiYXo9NSkNCiAgICAgICAgcGF0Y2hlci5zdGFydCgpDQoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChvcmlnaW5hbCwgZGljdChmb289MywgYmFyPTQsIGJhej01KSkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHBhdGNoZXIuc3RvcCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChvcmlnaW5hbCwgY29weSkNCg0KDQogICAgZGVmIHRlc3RfYXV0b3NwZWMoc2VsZik6DQogICAgICAgIGNsYXNzIEJvbyhvYmplY3QpOg0KICAgICAgICAgICAgZGVmIF9faW5pdF9fKHNlbGYsIGEpOg0KICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgIGRlZiBmKHNlbGYsIGEpOg0KICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgIGRlZiBnKHNlbGYpOg0KICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgIGZvbyA9ICdiYXInDQoNCiAgICAgICAgICAgIGNsYXNzIEJhcihvYmplY3QpOg0KICAgICAgICAgICAgICAgIGRlZiBhKHNlbGYpOg0KICAgICAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgZGVmIF90ZXN0KG1vY2spOg0KICAgICAgICAgICAgbW9jaygxKQ0KICAgICAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX3dpdGgoMSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykNCg0KICAgICAgICBkZWYgX3Rlc3QyKG1vY2spOg0KICAgICAgICAgICAgbW9jay5mKDEpDQogICAgICAgICAgICBtb2NrLmYuYXNzZXJ0X2NhbGxlZF93aXRoKDEpDQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG1vY2suZikNCg0KICAgICAgICAgICAgbW9jay5nKCkNCiAgICAgICAgICAgIG1vY2suZy5hc3NlcnRfY2FsbGVkX3dpdGgoKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBtb2NrLmcsIDEpDQoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBnZXRhdHRyLCBtb2NrLCAnaCcpDQoNCiAgICAgICAgICAgIG1vY2suZm9vLmxvd2VyKCkNCiAgICAgICAgICAgIG1vY2suZm9vLmxvd2VyLmFzc2VydF9jYWxsZWRfd2l0aCgpDQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgZ2V0YXR0ciwgbW9jay5mb28sICdiYXInKQ0KDQogICAgICAgICAgICBtb2NrLkJhcigpDQogICAgICAgICAgICBtb2NrLkJhci5hc3NlcnRfY2FsbGVkX3dpdGgoKQ0KDQogICAgICAgICAgICBtb2NrLkJhci5hKCkNCiAgICAgICAgICAgIG1vY2suQmFyLmEuYXNzZXJ0X2NhbGxlZF93aXRoKCkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jay5CYXIuYSwgMSkNCg0KICAgICAgICAgICAgbW9jay5CYXIoKS5hKCkNCiAgICAgICAgICAgIG1vY2suQmFyKCkuYS5hc3NlcnRfY2FsbGVkX3dpdGgoKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBtb2NrLkJhcigpLmEsIDEpDQoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBnZXRhdHRyLCBtb2NrLkJhciwgJ2InKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIG1vY2suQmFyKCksICdiJykNCg0KICAgICAgICBkZWYgZnVuY3Rpb24obW9jayk6DQogICAgICAgICAgICBfdGVzdChtb2NrKQ0KICAgICAgICAgICAgX3Rlc3QyKG1vY2spDQogICAgICAgICAgICBfdGVzdDIobW9jaygxKSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMobW9jaywgRm9vKQ0KICAgICAgICAgICAgcmV0dXJuIG1vY2sNCg0KICAgICAgICB0ZXN0ID0gcGF0Y2goZm9vX25hbWUsIGF1dG9zcGVjPVRydWUpKGZ1bmN0aW9uKQ0KDQogICAgICAgIG1vY2sgPSB0ZXN0KCkNCiAgICAgICAgc2VsZi5hc3NlcnRJc05vdChGb28sIG1vY2spDQogICAgICAgICMgdGVzdCBwYXRjaGluZyBhIHNlY29uZCB0aW1lIHdvcmtzDQogICAgICAgIHRlc3QoKQ0KDQogICAgICAgIG1vZHVsZSA9IHN5cy5tb2R1bGVzW19fbmFtZV9fXQ0KICAgICAgICB0ZXN0ID0gcGF0Y2gub2JqZWN0KG1vZHVsZSwgJ0ZvbycsIGF1dG9zcGVjPVRydWUpKGZ1bmN0aW9uKQ0KDQogICAgICAgIG1vY2sgPSB0ZXN0KCkNCiAgICAgICAgc2VsZi5hc3NlcnRJc05vdChGb28sIG1vY2spDQogICAgICAgICMgdGVzdCBwYXRjaGluZyBhIHNlY29uZCB0aW1lIHdvcmtzDQogICAgICAgIHRlc3QoKQ0KDQoNCiAgICBkZWYgdGVzdF9hdXRvc3BlY19mdW5jdGlvbihzZWxmKToNCiAgICAgICAgQHBhdGNoKCclcy5mdW5jdGlvbicgJSBfX25hbWVfXywgYXV0b3NwZWM9VHJ1ZSkNCiAgICAgICAgZGVmIHRlc3QobW9jayk6DQogICAgICAgICAgICBmdW5jdGlvbigxKQ0KICAgICAgICAgICAgZnVuY3Rpb24uYXNzZXJ0X2NhbGxlZF93aXRoKDEpDQogICAgICAgICAgICBmdW5jdGlvbigyLCAzKQ0KICAgICAgICAgICAgZnVuY3Rpb24uYXNzZXJ0X2NhbGxlZF93aXRoKDIsIDMpDQoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgZnVuY3Rpb24pDQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgZ2V0YXR0ciwgZnVuY3Rpb24sICdmb28nKQ0KDQogICAgICAgIHRlc3QoKQ0KDQoNCiAgICBkZWYgdGVzdF9hdXRvc3BlY19rZXl3b3JkcyhzZWxmKToNCiAgICAgICAgQHBhdGNoKCclcy5mdW5jdGlvbicgJSBfX25hbWVfXywgYXV0b3NwZWM9VHJ1ZSwNCiAgICAgICAgICAgICAgIHJldHVybl92YWx1ZT0zKQ0KICAgICAgICBkZWYgdGVzdChtb2NrX2Z1bmN0aW9uKToNCiAgICAgICAgICAgICNzZWxmLmFzc2VydEVxdWFsKGZ1bmN0aW9uLmFiYywgJ2ZvbycpDQogICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oMSwgMikNCg0KICAgICAgICByZXN1bHQgPSB0ZXN0KCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQsIDMpDQoNCg0KICAgIGRlZiB0ZXN0X2F1dG9zcGVjX3dpdGhfbmV3KHNlbGYpOg0KICAgICAgICBwYXRjaGVyID0gcGF0Y2goJyVzLmZ1bmN0aW9uJyAlIF9fbmFtZV9fLCBuZXc9MywgYXV0b3NwZWM9VHJ1ZSkNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBwYXRjaGVyLnN0YXJ0KQ0KDQogICAgICAgIG1vZHVsZSA9IHN5cy5tb2R1bGVzW19fbmFtZV9fXQ0KICAgICAgICBwYXRjaGVyID0gcGF0Y2gub2JqZWN0KG1vZHVsZSwgJ2Z1bmN0aW9uJywgbmV3PTMsIGF1dG9zcGVjPVRydWUpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgcGF0Y2hlci5zdGFydCkNCg0KDQogICAgZGVmIHRlc3RfYXV0b3NwZWNfd2l0aF9vYmplY3Qoc2VsZik6DQogICAgICAgIGNsYXNzIEJhcihGb28pOg0KICAgICAgICAgICAgZXh0cmEgPSBbXQ0KDQogICAgICAgIHBhdGNoZXIgPSBwYXRjaChmb29fbmFtZSwgYXV0b3NwZWM9QmFyKQ0KICAgICAgICBtb2NrID0gcGF0Y2hlci5zdGFydCgpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShtb2NrLCBCYXIpDQogICAgICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UobW9jay5leHRyYSwgbGlzdCkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHBhdGNoZXIuc3RvcCgpDQoNCg0KICAgIGRlZiB0ZXN0X2F1dG9zcGVjX2luaGVyaXRzKHNlbGYpOg0KICAgICAgICBGb29DbGFzcyA9IEZvbw0KICAgICAgICBwYXRjaGVyID0gcGF0Y2goZm9vX25hbWUsIGF1dG9zcGVjPVRydWUpDQogICAgICAgIG1vY2sgPSBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKG1vY2ssIEZvb0NsYXNzKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKG1vY2soMyksIEZvb0NsYXNzKQ0KICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgcGF0Y2hlci5zdG9wKCkNCg0KDQogICAgZGVmIHRlc3RfYXV0b3NwZWNfbmFtZShzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKGZvb19uYW1lLCBhdXRvc3BlYz1UcnVlKQ0KICAgICAgICBtb2NrID0gcGF0Y2hlci5zdGFydCgpDQoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigiIG5hbWU9J0ZvbyciLCByZXByKG1vY2spKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigiIG5hbWU9J0Zvby5mJyIsIHJlcHIobW9jay5mKSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SW4oIiBuYW1lPSdGb28oKSciLCByZXByKG1vY2soTm9uZSkpKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigiIG5hbWU9J0ZvbygpLmYnIiwgcmVwcihtb2NrKE5vbmUpLmYpKQ0KICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgcGF0Y2hlci5zdG9wKCkNCg0KDQogICAgZGVmIHRlc3RfdHJhY2ViYWNrcyhzZWxmKToNCiAgICAgICAgQHBhdGNoLm9iamVjdChGb28sICdmJywgb2JqZWN0KCkpDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICByYWlzZSBBc3NlcnRpb25FcnJvcg0KICAgICAgICB0cnk6DQogICAgICAgICAgICB0ZXN0KCkNCiAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgZXJyID0gc3lzLmV4Y19pbmZvKCkNCg0KICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXh0VGVzdFJlc3VsdChOb25lLCBOb25lLCAwKQ0KICAgICAgICB0cmFjZWJhY2sgPSByZXN1bHQuX2V4Y19pbmZvX3RvX3N0cmluZyhlcnIsIHNlbGYpDQogICAgICAgIHNlbGYuYXNzZXJ0SW4oJ3JhaXNlIEFzc2VydGlvbkVycm9yJywgdHJhY2ViYWNrKQ0KDQoNCiAgICBkZWYgdGVzdF9uZXdfY2FsbGFibGVfcGF0Y2goc2VsZik6DQogICAgICAgIHBhdGNoZXIgPSBwYXRjaChmb29fbmFtZSwgbmV3X2NhbGxhYmxlPU5vbkNhbGxhYmxlTWFnaWNNb2NrKQ0KDQogICAgICAgIG0xID0gcGF0Y2hlci5zdGFydCgpDQogICAgICAgIHBhdGNoZXIuc3RvcCgpDQogICAgICAgIG0yID0gcGF0Y2hlci5zdGFydCgpDQogICAgICAgIHBhdGNoZXIuc3RvcCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRJc05vdChtMSwgbTIpDQogICAgICAgIGZvciBtb2NrIGluIG0xLCBtMjoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUobTEpDQoNCg0KICAgIGRlZiB0ZXN0X25ld19jYWxsYWJsZV9wYXRjaF9vYmplY3Qoc2VsZik6DQogICAgICAgIHBhdGNoZXIgPSBwYXRjaC5vYmplY3QoRm9vLCAnZicsIG5ld19jYWxsYWJsZT1Ob25DYWxsYWJsZU1hZ2ljTW9jaykNCg0KICAgICAgICBtMSA9IHBhdGNoZXIuc3RhcnQoKQ0KICAgICAgICBwYXRjaGVyLnN0b3AoKQ0KICAgICAgICBtMiA9IHBhdGNoZXIuc3RhcnQoKQ0KICAgICAgICBwYXRjaGVyLnN0b3AoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0SXNOb3QobTEsIG0yKQ0KICAgICAgICBmb3IgbW9jayBpbiBtMSwgbTI6DQogICAgICAgICAgICBzZWxmLmFzc2VydE5vdENhbGxhYmxlKG0xKQ0KDQoNCiAgICBkZWYgdGVzdF9uZXdfY2FsbGFibGVfa2V5d29yZF9hcmd1bWVudHMoc2VsZik6DQogICAgICAgIGNsYXNzIEJhcihvYmplY3QpOg0KICAgICAgICAgICAga3dhcmdzID0gTm9uZQ0KICAgICAgICAgICAgZGVmIF9faW5pdF9fKHNlbGYsICoqa3dhcmdzKToNCiAgICAgICAgICAgICAgICBCYXIua3dhcmdzID0ga3dhcmdzDQoNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKGZvb19uYW1lLCBuZXdfY2FsbGFibGU9QmFyLCBhcmcxPTEsIGFyZzI9MikNCiAgICAgICAgbSA9IHBhdGNoZXIuc3RhcnQoKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzZWxmLmFzc2VydElzKHR5cGUobSksIEJhcikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoQmFyLmt3YXJncywgZGljdChhcmcxPTEsIGFyZzI9MikpDQogICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICBwYXRjaGVyLnN0b3AoKQ0KDQoNCiAgICBkZWYgdGVzdF9uZXdfY2FsbGFibGVfc3BlYyhzZWxmKToNCiAgICAgICAgY2xhc3MgQmFyKG9iamVjdCk6DQogICAgICAgICAgICBrd2FyZ3MgPSBOb25lDQogICAgICAgICAgICBkZWYgX19pbml0X18oc2VsZiwgKiprd2FyZ3MpOg0KICAgICAgICAgICAgICAgIEJhci5rd2FyZ3MgPSBrd2FyZ3MNCg0KICAgICAgICBwYXRjaGVyID0gcGF0Y2goZm9vX25hbWUsIG5ld19jYWxsYWJsZT1CYXIsIHNwZWM9QmFyKQ0KICAgICAgICBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChCYXIua3dhcmdzLCBkaWN0KHNwZWM9QmFyKSkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHBhdGNoZXIuc3RvcCgpDQoNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKGZvb19uYW1lLCBuZXdfY2FsbGFibGU9QmFyLCBzcGVjX3NldD1CYXIpDQogICAgICAgIHBhdGNoZXIuc3RhcnQoKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEJhci5rd2FyZ3MsIGRpY3Qoc3BlY19zZXQ9QmFyKSkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHBhdGNoZXIuc3RvcCgpDQoNCg0KICAgIGRlZiB0ZXN0X25ld19jYWxsYWJsZV9jcmVhdGUoc2VsZik6DQogICAgICAgIG5vbl9leGlzdGVudF9hdHRyID0gJyVzLndlZWVlZScgJSBmb29fbmFtZQ0KICAgICAgICBwID0gcGF0Y2gobm9uX2V4aXN0ZW50X2F0dHIsIG5ld19jYWxsYWJsZT1Ob25DYWxsYWJsZU1vY2spDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBwLnN0YXJ0KQ0KDQogICAgICAgIHAgPSBwYXRjaChub25fZXhpc3RlbnRfYXR0ciwgbmV3X2NhbGxhYmxlPU5vbkNhbGxhYmxlTW9jaywNCiAgICAgICAgICAgICAgICAgIGNyZWF0ZT1UcnVlKQ0KICAgICAgICBtID0gcC5zdGFydCgpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUobSwgbWFnaWM9RmFsc2UpDQogICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICBwLnN0b3AoKQ0KDQoNCiAgICBkZWYgdGVzdF9uZXdfY2FsbGFibGVfaW5jb21wYXRpYmxlX3dpdGhfbmV3KHNlbGYpOg0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcygNCiAgICAgICAgICAgIFZhbHVlRXJyb3IsIHBhdGNoLCBmb29fbmFtZSwgbmV3PW9iamVjdCgpLCBuZXdfY2FsbGFibGU9TWFnaWNNb2NrDQogICAgICAgICkNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoDQogICAgICAgICAgICBWYWx1ZUVycm9yLCBwYXRjaC5vYmplY3QsIEZvbywgJ2YnLCBuZXc9b2JqZWN0KCksDQogICAgICAgICAgICBuZXdfY2FsbGFibGU9TWFnaWNNb2NrDQogICAgICAgICkNCg0KDQogICAgZGVmIHRlc3RfbmV3X2NhbGxhYmxlX2luY29tcGF0aWJsZV93aXRoX2F1dG9zcGVjKHNlbGYpOg0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcygNCiAgICAgICAgICAgIFZhbHVlRXJyb3IsIHBhdGNoLCBmb29fbmFtZSwgbmV3X2NhbGxhYmxlPU1hZ2ljTW9jaywNCiAgICAgICAgICAgIGF1dG9zcGVjPVRydWUNCiAgICAgICAgKQ0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcygNCiAgICAgICAgICAgIFZhbHVlRXJyb3IsIHBhdGNoLm9iamVjdCwgRm9vLCAnZicsIG5ld19jYWxsYWJsZT1NYWdpY01vY2ssDQogICAgICAgICAgICBhdXRvc3BlYz1UcnVlDQogICAgICAgICkNCg0KDQogICAgZGVmIHRlc3RfbmV3X2NhbGxhYmxlX2luaGVyaXRfZm9yX21vY2tzKHNlbGYpOg0KICAgICAgICBjbGFzcyBNb2NrU3ViKE1vY2spOg0KICAgICAgICAgICAgcGFzcw0KDQogICAgICAgIE1vY2tDbGFzc2VzID0gKA0KICAgICAgICAgICAgTm9uQ2FsbGFibGVNb2NrLCBOb25DYWxsYWJsZU1hZ2ljTW9jaywgTWFnaWNNb2NrLCBNb2NrLCBNb2NrU3ViDQogICAgICAgICkNCiAgICAgICAgZm9yIEtsYXNzIGluIE1vY2tDbGFzc2VzOg0KICAgICAgICAgICAgZm9yIGFyZyBpbiAnc3BlYycsICdzcGVjX3NldCc6DQogICAgICAgICAgICAgICAga3dhcmdzID0ge2FyZzogVHJ1ZX0NCiAgICAgICAgICAgICAgICBwID0gcGF0Y2goZm9vX25hbWUsIG5ld19jYWxsYWJsZT1LbGFzcywgKiprd2FyZ3MpDQogICAgICAgICAgICAgICAgbSA9IHAuc3RhcnQoKQ0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UgPSBtLnJldHVybl92YWx1ZQ0KICAgICAgICAgICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgZ2V0YXR0ciwgaW5zdGFuY2UsICd4JykNCiAgICAgICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgICAgICBwLnN0b3AoKQ0KDQoNCiAgICBkZWYgdGVzdF9uZXdfY2FsbGFibGVfaW5oZXJpdF9ub25fbW9jayhzZWxmKToNCiAgICAgICAgY2xhc3MgTm90QU1vY2sob2JqZWN0KToNCiAgICAgICAgICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzcGVjKToNCiAgICAgICAgICAgICAgICBzZWxmLnNwZWMgPSBzcGVjDQoNCiAgICAgICAgcCA9IHBhdGNoKGZvb19uYW1lLCBuZXdfY2FsbGFibGU9Tm90QU1vY2ssIHNwZWM9VHJ1ZSkNCiAgICAgICAgbSA9IHAuc3RhcnQoKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNfaW5zdGFuY2UobSwgTm90QU1vY2spKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIG0sICdyZXR1cm5fdmFsdWUnKQ0KICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgcC5zdG9wKCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG0uc3BlYywgRm9vKQ0KDQoNCiAgICBkZWYgdGVzdF9uZXdfY2FsbGFibGVfY2xhc3NfZGVjb3JhdGluZyhzZWxmKToNCiAgICAgICAgdGVzdCA9IHNlbGYNCiAgICAgICAgb3JpZ2luYWwgPSBGb28NCiAgICAgICAgY2xhc3MgU29tZVRlc3Qob2JqZWN0KToNCg0KICAgICAgICAgICAgZGVmIF90ZXN0KHNlbGYsIG1vY2tfZm9vKToNCiAgICAgICAgICAgICAgICB0ZXN0LmFzc2VydElzTm90KEZvbywgb3JpZ2luYWwpDQogICAgICAgICAgICAgICAgdGVzdC5hc3NlcnRJcyhGb28sIG1vY2tfZm9vKQ0KICAgICAgICAgICAgICAgIHRlc3QuYXNzZXJ0SXNJbnN0YW5jZShGb28sIFNvbWVDbGFzcykNCg0KICAgICAgICAgICAgZGVmIHRlc3RfdHdvKHNlbGYsIG1vY2tfZm9vKToNCiAgICAgICAgICAgICAgICBzZWxmLl90ZXN0KG1vY2tfZm9vKQ0KICAgICAgICAgICAgZGVmIHRlc3Rfb25lKHNlbGYsIG1vY2tfZm9vKToNCiAgICAgICAgICAgICAgICBzZWxmLl90ZXN0KG1vY2tfZm9vKQ0KDQogICAgICAgIFNvbWVUZXN0ID0gcGF0Y2goZm9vX25hbWUsIG5ld19jYWxsYWJsZT1Tb21lQ2xhc3MpKFNvbWVUZXN0KQ0KICAgICAgICBTb21lVGVzdCgpLnRlc3Rfb25lKCkNCiAgICAgICAgU29tZVRlc3QoKS50ZXN0X3R3bygpDQogICAgICAgIHNlbGYuYXNzZXJ0SXMoRm9vLCBvcmlnaW5hbCkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfbXVsdGlwbGUoc2VsZik6DQogICAgICAgIG9yaWdpbmFsX2ZvbyA9IEZvbw0KICAgICAgICBvcmlnaW5hbF9mID0gRm9vLmYNCiAgICAgICAgb3JpZ2luYWxfZyA9IEZvby5nDQoNCiAgICAgICAgcGF0Y2hlcjEgPSBwYXRjaC5tdWx0aXBsZShmb29fbmFtZSwgZj0xLCBnPTIpDQogICAgICAgIHBhdGNoZXIyID0gcGF0Y2gubXVsdGlwbGUoRm9vLCBmPTEsIGc9MikNCg0KICAgICAgICBmb3IgcGF0Y2hlciBpbiBwYXRjaGVyMSwgcGF0Y2hlcjI6DQogICAgICAgICAgICBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydElzKEZvbywgb3JpZ2luYWxfZm9vKQ0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRm9vLmYsIDEpDQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZywgMikNCiAgICAgICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICAgICAgcGF0Y2hlci5zdG9wKCkNCg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhGb28sIG9yaWdpbmFsX2ZvbykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRm9vLmYsIG9yaWdpbmFsX2YpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5nLCBvcmlnaW5hbF9nKQ0KDQoNCiAgICAgICAgQHBhdGNoLm11bHRpcGxlKGZvb19uYW1lLCBmPTMsIGc9NCkNCiAgICAgICAgZGVmIHRlc3QoKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoRm9vLCBvcmlnaW5hbF9mb28pDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5mLCAzKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZywgNCkNCg0KICAgICAgICB0ZXN0KCkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfbXVsdGlwbGVfbm9fa3dhcmdzKHNlbGYpOg0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhWYWx1ZUVycm9yLCBwYXRjaC5tdWx0aXBsZSwgZm9vX25hbWUpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFZhbHVlRXJyb3IsIHBhdGNoLm11bHRpcGxlLCBGb28pDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX211bHRpcGxlX2NyZWF0ZV9tb2NrcyhzZWxmKToNCiAgICAgICAgb3JpZ2luYWxfZm9vID0gRm9vDQogICAgICAgIG9yaWdpbmFsX2YgPSBGb28uZg0KICAgICAgICBvcmlnaW5hbF9nID0gRm9vLmcNCg0KICAgICAgICBAcGF0Y2gubXVsdGlwbGUoZm9vX25hbWUsIGY9REVGQVVMVCwgZz0zLCBmb289REVGQVVMVCkNCiAgICAgICAgZGVmIHRlc3QoZiwgZm9vKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoRm9vLCBvcmlnaW5hbF9mb28pDQogICAgICAgICAgICBzZWxmLmFzc2VydElzKEZvby5mLCBmKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZywgMykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoRm9vLmZvbywgZm9vKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKGYsIE1hZ2ljTW9jaykpDQogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNfaW5zdGFuY2UoZm9vLCBNYWdpY01vY2spKQ0KDQogICAgICAgIHRlc3QoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5mLCBvcmlnaW5hbF9mKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5nLCBvcmlnaW5hbF9nKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9tdWx0aXBsZV9jcmVhdGVfbW9ja3NfZGlmZmVyZW50X29yZGVyKHNlbGYpOg0KICAgICAgICAjIGJ1ZyByZXZlYWxlZCBieSBKeXRob24hDQogICAgICAgIG9yaWdpbmFsX2YgPSBGb28uZg0KICAgICAgICBvcmlnaW5hbF9nID0gRm9vLmcNCg0KICAgICAgICBwYXRjaGVyID0gcGF0Y2gub2JqZWN0KEZvbywgJ2YnLCAzKQ0KICAgICAgICBwYXRjaGVyLmF0dHJpYnV0ZV9uYW1lID0gJ2YnDQoNCiAgICAgICAgb3RoZXIgPSBwYXRjaC5vYmplY3QoRm9vLCAnZycsIERFRkFVTFQpDQogICAgICAgIG90aGVyLmF0dHJpYnV0ZV9uYW1lID0gJ2cnDQogICAgICAgIHBhdGNoZXIuYWRkaXRpb25hbF9wYXRjaGVycyA9IFtvdGhlcl0NCg0KICAgICAgICBAcGF0Y2hlcg0KICAgICAgICBkZWYgdGVzdChnKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoRm9vLmcsIGcpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5mLCAzKQ0KDQogICAgICAgIHRlc3QoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5mLCBvcmlnaW5hbF9mKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5nLCBvcmlnaW5hbF9nKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9tdWx0aXBsZV9zdGFja2VkX2RlY29yYXRvcnMoc2VsZik6DQogICAgICAgIG9yaWdpbmFsX2ZvbyA9IEZvbw0KICAgICAgICBvcmlnaW5hbF9mID0gRm9vLmYNCiAgICAgICAgb3JpZ2luYWxfZyA9IEZvby5nDQoNCiAgICAgICAgQHBhdGNoLm11bHRpcGxlKGZvb19uYW1lLCBmPURFRkFVTFQpDQogICAgICAgIEBwYXRjaC5tdWx0aXBsZShmb29fbmFtZSwgZm9vPURFRkFVTFQpDQogICAgICAgIEBwYXRjaChmb29fbmFtZSArICcuZycpDQogICAgICAgIGRlZiB0ZXN0MShnLCAqKmt3YXJncyk6DQogICAgICAgICAgICBfdGVzdChnLCAqKmt3YXJncykNCg0KICAgICAgICBAcGF0Y2gubXVsdGlwbGUoZm9vX25hbWUsIGY9REVGQVVMVCkNCiAgICAgICAgQHBhdGNoKGZvb19uYW1lICsgJy5nJykNCiAgICAgICAgQHBhdGNoLm11bHRpcGxlKGZvb19uYW1lLCBmb289REVGQVVMVCkNCiAgICAgICAgZGVmIHRlc3QyKGcsICoqa3dhcmdzKToNCiAgICAgICAgICAgIF90ZXN0KGcsICoqa3dhcmdzKQ0KDQogICAgICAgIEBwYXRjaChmb29fbmFtZSArICcuZycpDQogICAgICAgIEBwYXRjaC5tdWx0aXBsZShmb29fbmFtZSwgZj1ERUZBVUxUKQ0KICAgICAgICBAcGF0Y2gubXVsdGlwbGUoZm9vX25hbWUsIGZvbz1ERUZBVUxUKQ0KICAgICAgICBkZWYgdGVzdDMoZywgKiprd2FyZ3MpOg0KICAgICAgICAgICAgX3Rlc3QoZywgKiprd2FyZ3MpDQoNCiAgICAgICAgZGVmIF90ZXN0KGcsICoqa3dhcmdzKToNCiAgICAgICAgICAgIGYgPSBrd2FyZ3MucG9wKCdmJykNCiAgICAgICAgICAgIGZvbyA9IGt3YXJncy5wb3AoJ2ZvbycpDQogICAgICAgICAgICBzZWxmLmFzc2VydEZhbHNlKGt3YXJncykNCg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhGb28sIG9yaWdpbmFsX2ZvbykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoRm9vLmYsIGYpDQogICAgICAgICAgICBzZWxmLmFzc2VydElzKEZvby5nLCBnKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhGb28uZm9vLCBmb28pDQogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNfaW5zdGFuY2UoZiwgTWFnaWNNb2NrKSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc19pbnN0YW5jZShnLCBNYWdpY01vY2spKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKGZvbywgTWFnaWNNb2NrKSkNCg0KICAgICAgICB0ZXN0MSgpDQogICAgICAgIHRlc3QyKCkNCiAgICAgICAgdGVzdDMoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5mLCBvcmlnaW5hbF9mKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5nLCBvcmlnaW5hbF9nKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9tdWx0aXBsZV9jcmVhdGVfbW9ja3NfcGF0Y2hlcihzZWxmKToNCiAgICAgICAgb3JpZ2luYWxfZm9vID0gRm9vDQogICAgICAgIG9yaWdpbmFsX2YgPSBGb28uZg0KICAgICAgICBvcmlnaW5hbF9nID0gRm9vLmcNCg0KICAgICAgICBwYXRjaGVyID0gcGF0Y2gubXVsdGlwbGUoZm9vX25hbWUsIGY9REVGQVVMVCwgZz0zLCBmb289REVGQVVMVCkNCg0KICAgICAgICByZXN1bHQgPSBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZiA9IHJlc3VsdFsnZiddDQogICAgICAgICAgICBmb28gPSByZXN1bHRbJ2ZvbyddDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNldChyZXN1bHQpLCBzZXQoWydmJywgJ2ZvbyddKSkNCg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhGb28sIG9yaWdpbmFsX2ZvbykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoRm9vLmYsIGYpDQogICAgICAgICAgICBzZWxmLmFzc2VydElzKEZvby5mb28sIGZvbykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc19pbnN0YW5jZShmLCBNYWdpY01vY2spKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKGZvbywgTWFnaWNNb2NrKSkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHBhdGNoZXIuc3RvcCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZiwgb3JpZ2luYWxfZikNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZywgb3JpZ2luYWxfZykNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfbXVsdGlwbGVfZGVjb3JhdGluZ19jbGFzcyhzZWxmKToNCiAgICAgICAgdGVzdCA9IHNlbGYNCiAgICAgICAgb3JpZ2luYWxfZm9vID0gRm9vDQogICAgICAgIG9yaWdpbmFsX2YgPSBGb28uZg0KICAgICAgICBvcmlnaW5hbF9nID0gRm9vLmcNCg0KICAgICAgICBjbGFzcyBTb21lVGVzdChvYmplY3QpOg0KDQogICAgICAgICAgICBkZWYgX3Rlc3Qoc2VsZiwgZiwgZm9vKToNCiAgICAgICAgICAgICAgICB0ZXN0LmFzc2VydElzKEZvbywgb3JpZ2luYWxfZm9vKQ0KICAgICAgICAgICAgICAgIHRlc3QuYXNzZXJ0SXMoRm9vLmYsIGYpDQogICAgICAgICAgICAgICAgdGVzdC5hc3NlcnRFcXVhbChGb28uZywgMykNCiAgICAgICAgICAgICAgICB0ZXN0LmFzc2VydElzKEZvby5mb28sIGZvbykNCiAgICAgICAgICAgICAgICB0ZXN0LmFzc2VydFRydWUoaXNfaW5zdGFuY2UoZiwgTWFnaWNNb2NrKSkNCiAgICAgICAgICAgICAgICB0ZXN0LmFzc2VydFRydWUoaXNfaW5zdGFuY2UoZm9vLCBNYWdpY01vY2spKQ0KDQogICAgICAgICAgICBkZWYgdGVzdF90d28oc2VsZiwgZiwgZm9vKToNCiAgICAgICAgICAgICAgICBzZWxmLl90ZXN0KGYsIGZvbykNCiAgICAgICAgICAgIGRlZiB0ZXN0X29uZShzZWxmLCBmLCBmb28pOg0KICAgICAgICAgICAgICAgIHNlbGYuX3Rlc3QoZiwgZm9vKQ0KDQogICAgICAgIFNvbWVUZXN0ID0gcGF0Y2gubXVsdGlwbGUoDQogICAgICAgICAgICBmb29fbmFtZSwgZj1ERUZBVUxULCBnPTMsIGZvbz1ERUZBVUxUDQogICAgICAgICkoU29tZVRlc3QpDQoNCiAgICAgICAgdGhpbmcgPSBTb21lVGVzdCgpDQogICAgICAgIHRoaW5nLnRlc3Rfb25lKCkNCiAgICAgICAgdGhpbmcudGVzdF90d28oKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRm9vLmYsIG9yaWdpbmFsX2YpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRm9vLmcsIG9yaWdpbmFsX2cpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX211bHRpcGxlX2NyZWF0ZShzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoLm11bHRpcGxlKEZvbywgYmxhbT0nYmxhbScpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBwYXRjaGVyLnN0YXJ0KQ0KDQogICAgICAgIHBhdGNoZXIgPSBwYXRjaC5tdWx0aXBsZShGb28sIGJsYW09J2JsYW0nLCBjcmVhdGU9VHJ1ZSkNCiAgICAgICAgcGF0Y2hlci5zdGFydCgpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRm9vLmJsYW0sICdibGFtJykNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHBhdGNoZXIuc3RvcCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShoYXNhdHRyKEZvbywgJ2JsYW0nKSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfbXVsdGlwbGVfc3BlY19zZXQoc2VsZik6DQogICAgICAgICMgaWYgc3BlY19zZXQgd29ya3MgdGhlbiB3ZSBjYW4gYXNzdW1lIHRoYXQgc3BlYyBhbmQgYXV0b3NwZWMgYWxzbw0KICAgICAgICAjIHdvcmsgYXMgdGhlIHVuZGVybHlpbmcgbWFjaGluZXJ5IGlzIHRoZSBzYW1lDQogICAgICAgIHBhdGNoZXIgPSBwYXRjaC5tdWx0aXBsZShGb28sIGZvbz1ERUZBVUxULCBzcGVjX3NldD1bJ2EnLCAnYiddKQ0KICAgICAgICByZXN1bHQgPSBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZm9vLCByZXN1bHRbJ2ZvbyddKQ0KICAgICAgICAgICAgRm9vLmZvby5hKDEpDQogICAgICAgICAgICBGb28uZm9vLmIoMikNCiAgICAgICAgICAgIEZvby5mb28uYS5hc3NlcnRfY2FsbGVkX3dpdGgoMSkNCiAgICAgICAgICAgIEZvby5mb28uYi5hc3NlcnRfY2FsbGVkX3dpdGgoMikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBzZXRhdHRyLCBGb28uZm9vLCAnYycsIE5vbmUpDQogICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICBwYXRjaGVyLnN0b3AoKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9tdWx0aXBsZV9uZXdfY2FsbGFibGUoc2VsZik6DQogICAgICAgIGNsYXNzIFRoaW5nKG9iamVjdCk6DQogICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoLm11bHRpcGxlKA0KICAgICAgICAgICAgRm9vLCBmPURFRkFVTFQsIGc9REVGQVVMVCwgbmV3X2NhbGxhYmxlPVRoaW5nDQogICAgICAgICkNCiAgICAgICAgcmVzdWx0ID0gcGF0Y2hlci5zdGFydCgpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoRm9vLmYsIHJlc3VsdFsnZiddKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhGb28uZywgcmVzdWx0WydnJ10pDQogICAgICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UoRm9vLmYsIFRoaW5nKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKEZvby5nLCBUaGluZykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXNOb3QoRm9vLmYsIEZvby5nKQ0KICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgcGF0Y2hlci5zdG9wKCkNCg0KDQogICAgZGVmIHRlc3RfbmVzdGVkX3BhdGNoX2ZhaWx1cmUoc2VsZik6DQogICAgICAgIG9yaWdpbmFsX2YgPSBGb28uZg0KICAgICAgICBvcmlnaW5hbF9nID0gRm9vLmcNCg0KICAgICAgICBAcGF0Y2gub2JqZWN0KEZvbywgJ2cnLCAxKQ0KICAgICAgICBAcGF0Y2gub2JqZWN0KEZvbywgJ21pc3NpbmcnLCAxKQ0KICAgICAgICBAcGF0Y2gub2JqZWN0KEZvbywgJ2YnLCAxKQ0KICAgICAgICBkZWYgdGhpbmcxKCk6DQogICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgQHBhdGNoLm9iamVjdChGb28sICdtaXNzaW5nJywgMSkNCiAgICAgICAgQHBhdGNoLm9iamVjdChGb28sICdnJywgMSkNCiAgICAgICAgQHBhdGNoLm9iamVjdChGb28sICdmJywgMSkNCiAgICAgICAgZGVmIHRoaW5nMigpOg0KICAgICAgICAgICAgcGFzcw0KDQogICAgICAgIEBwYXRjaC5vYmplY3QoRm9vLCAnZycsIDEpDQogICAgICAgIEBwYXRjaC5vYmplY3QoRm9vLCAnZicsIDEpDQogICAgICAgIEBwYXRjaC5vYmplY3QoRm9vLCAnbWlzc2luZycsIDEpDQogICAgICAgIGRlZiB0aGluZzMoKToNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICBmb3IgZnVuYyBpbiB0aGluZzEsIHRoaW5nMiwgdGhpbmczOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGZ1bmMpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5mLCBvcmlnaW5hbF9mKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZywgb3JpZ2luYWxfZykNCg0KDQogICAgZGVmIHRlc3RfbmV3X2NhbGxhYmxlX2ZhaWx1cmUoc2VsZik6DQogICAgICAgIG9yaWdpbmFsX2YgPSBGb28uZg0KICAgICAgICBvcmlnaW5hbF9nID0gRm9vLmcNCiAgICAgICAgb3JpZ2luYWxfZm9vID0gRm9vLmZvbw0KDQogICAgICAgIGRlZiBjcmFzaGVyKCk6DQogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2NyYXNoZXInKQ0KDQogICAgICAgIEBwYXRjaC5vYmplY3QoRm9vLCAnZycsIDEpDQogICAgICAgIEBwYXRjaC5vYmplY3QoRm9vLCAnZm9vJywgbmV3X2NhbGxhYmxlPWNyYXNoZXIpDQogICAgICAgIEBwYXRjaC5vYmplY3QoRm9vLCAnZicsIDEpDQogICAgICAgIGRlZiB0aGluZzEoKToNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICBAcGF0Y2gub2JqZWN0KEZvbywgJ2ZvbycsIG5ld19jYWxsYWJsZT1jcmFzaGVyKQ0KICAgICAgICBAcGF0Y2gub2JqZWN0KEZvbywgJ2cnLCAxKQ0KICAgICAgICBAcGF0Y2gub2JqZWN0KEZvbywgJ2YnLCAxKQ0KICAgICAgICBkZWYgdGhpbmcyKCk6DQogICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgQHBhdGNoLm9iamVjdChGb28sICdnJywgMSkNCiAgICAgICAgQHBhdGNoLm9iamVjdChGb28sICdmJywgMSkNCiAgICAgICAgQHBhdGNoLm9iamVjdChGb28sICdmb28nLCBuZXdfY2FsbGFibGU9Y3Jhc2hlcikNCiAgICAgICAgZGVmIHRoaW5nMygpOg0KICAgICAgICAgICAgcGFzcw0KDQogICAgICAgIGZvciBmdW5jIGluIHRoaW5nMSwgdGhpbmcyLCB0aGluZzM6DQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhOYW1lRXJyb3IsIGZ1bmMpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5mLCBvcmlnaW5hbF9mKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZywgb3JpZ2luYWxfZykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRm9vLmZvbywgb3JpZ2luYWxfZm9vKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9tdWx0aXBsZV9mYWlsdXJlKHNlbGYpOg0KICAgICAgICBvcmlnaW5hbF9mID0gRm9vLmYNCiAgICAgICAgb3JpZ2luYWxfZyA9IEZvby5nDQoNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoLm9iamVjdChGb28sICdmJywgMSkNCiAgICAgICAgcGF0Y2hlci5hdHRyaWJ1dGVfbmFtZSA9ICdmJw0KDQogICAgICAgIGdvb2QgPSBwYXRjaC5vYmplY3QoRm9vLCAnZycsIDEpDQogICAgICAgIGdvb2QuYXR0cmlidXRlX25hbWUgPSAnZycNCg0KICAgICAgICBiYWQgPSBwYXRjaC5vYmplY3QoRm9vLCAnbWlzc2luZycsIDEpDQogICAgICAgIGJhZC5hdHRyaWJ1dGVfbmFtZSA9ICdtaXNzaW5nJw0KDQogICAgICAgIGZvciBhZGRpdGlvbmFscyBpbiBbZ29vZCwgYmFkXSwgW2JhZCwgZ29vZF06DQogICAgICAgICAgICBwYXRjaGVyLmFkZGl0aW9uYWxfcGF0Y2hlcnMgPSBhZGRpdGlvbmFscw0KDQogICAgICAgICAgICBAcGF0Y2hlcg0KICAgICAgICAgICAgZGVmIGZ1bmMoKToNCiAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBmdW5jKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZiwgb3JpZ2luYWxfZikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRm9vLmcsIG9yaWdpbmFsX2cpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX211bHRpcGxlX25ld19jYWxsYWJsZV9mYWlsdXJlKHNlbGYpOg0KICAgICAgICBvcmlnaW5hbF9mID0gRm9vLmYNCiAgICAgICAgb3JpZ2luYWxfZyA9IEZvby5nDQogICAgICAgIG9yaWdpbmFsX2ZvbyA9IEZvby5mb28NCg0KICAgICAgICBkZWYgY3Jhc2hlcigpOg0KICAgICAgICAgICAgcmFpc2UgTmFtZUVycm9yKCdjcmFzaGVyJykNCg0KICAgICAgICBwYXRjaGVyID0gcGF0Y2gub2JqZWN0KEZvbywgJ2YnLCAxKQ0KICAgICAgICBwYXRjaGVyLmF0dHJpYnV0ZV9uYW1lID0gJ2YnDQoNCiAgICAgICAgZ29vZCA9IHBhdGNoLm9iamVjdChGb28sICdnJywgMSkNCiAgICAgICAgZ29vZC5hdHRyaWJ1dGVfbmFtZSA9ICdnJw0KDQogICAgICAgIGJhZCA9IHBhdGNoLm9iamVjdChGb28sICdmb28nLCBuZXdfY2FsbGFibGU9Y3Jhc2hlcikNCiAgICAgICAgYmFkLmF0dHJpYnV0ZV9uYW1lID0gJ2ZvbycNCg0KICAgICAgICBmb3IgYWRkaXRpb25hbHMgaW4gW2dvb2QsIGJhZF0sIFtiYWQsIGdvb2RdOg0KICAgICAgICAgICAgcGF0Y2hlci5hZGRpdGlvbmFsX3BhdGNoZXJzID0gYWRkaXRpb25hbHMNCg0KICAgICAgICAgICAgQHBhdGNoZXINCiAgICAgICAgICAgIGRlZiBmdW5jKCk6DQogICAgICAgICAgICAgICAgcGFzcw0KDQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhOYW1lRXJyb3IsIGZ1bmMpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5mLCBvcmlnaW5hbF9mKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uZywgb3JpZ2luYWxfZykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRm9vLmZvbywgb3JpZ2luYWxfZm9vKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9tdWx0aXBsZV9zdHJpbmdfc3ViY2xhc3NlcyhzZWxmKToNCiAgICAgICAgRm9vID0gdHlwZSgnRm9vJywgKHN0ciwpLCB7J2Zpc2gnOiAndGFzdHknfSkNCiAgICAgICAgZm9vID0gRm9vKCkNCiAgICAgICAgQHBhdGNoLm11bHRpcGxlKGZvbywgZmlzaD0nbmVhcmx5IGdvbmUnKQ0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28uZmlzaCwgJ25lYXJseSBnb25lJykNCg0KICAgICAgICB0ZXN0KCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28uZmlzaCwgJ3Rhc3R5JykNCg0KDQogICAgQHBhdGNoKCd1bml0dGVzdC5tb2NrLnBhdGNoLlRFU1RfUFJFRklYJywgJ2ZvbycpDQogICAgZGVmIHRlc3RfcGF0Y2hfdGVzdF9wcmVmaXgoc2VsZik6DQogICAgICAgIGNsYXNzIEZvbyhvYmplY3QpOg0KICAgICAgICAgICAgdGhpbmcgPSAnb3JpZ2luYWwnDQoNCiAgICAgICAgICAgIGRlZiBmb29fb25lKHNlbGYpOg0KICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnRoaW5nDQogICAgICAgICAgICBkZWYgZm9vX3R3byhzZWxmKToNCiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi50aGluZw0KICAgICAgICAgICAgZGVmIHRlc3Rfb25lKHNlbGYpOg0KICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnRoaW5nDQogICAgICAgICAgICBkZWYgdGVzdF90d28oc2VsZik6DQogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYudGhpbmcNCg0KICAgICAgICBGb28gPSBwYXRjaC5vYmplY3QoRm9vLCAndGhpbmcnLCAnY2hhbmdlZCcpKEZvbykNCg0KICAgICAgICBmb28gPSBGb28oKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvby5mb29fb25lKCksICdjaGFuZ2VkJykNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28uZm9vX3R3bygpLCAnY2hhbmdlZCcpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLnRlc3Rfb25lKCksICdvcmlnaW5hbCcpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLnRlc3RfdHdvKCksICdvcmlnaW5hbCcpDQoNCg0KICAgIEBwYXRjaCgndW5pdHRlc3QubW9jay5wYXRjaC5URVNUX1BSRUZJWCcsICdiYXInKQ0KICAgIGRlZiB0ZXN0X3BhdGNoX2RpY3RfdGVzdF9wcmVmaXgoc2VsZik6DQogICAgICAgIGNsYXNzIEZvbyhvYmplY3QpOg0KICAgICAgICAgICAgZGVmIGJhcl9vbmUoc2VsZik6DQogICAgICAgICAgICAgICAgcmV0dXJuIGRpY3QodGhlX2RpY3QpDQogICAgICAgICAgICBkZWYgYmFyX3R3byhzZWxmKToNCiAgICAgICAgICAgICAgICByZXR1cm4gZGljdCh0aGVfZGljdCkNCiAgICAgICAgICAgIGRlZiB0ZXN0X29uZShzZWxmKToNCiAgICAgICAgICAgICAgICByZXR1cm4gZGljdCh0aGVfZGljdCkNCiAgICAgICAgICAgIGRlZiB0ZXN0X3R3byhzZWxmKToNCiAgICAgICAgICAgICAgICByZXR1cm4gZGljdCh0aGVfZGljdCkNCg0KICAgICAgICB0aGVfZGljdCA9IHsna2V5JzogJ29yaWdpbmFsJ30NCiAgICAgICAgRm9vID0gcGF0Y2guZGljdCh0aGVfZGljdCwga2V5PSdjaGFuZ2VkJykoRm9vKQ0KDQogICAgICAgIGZvbyA9Rm9vKCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28uYmFyX29uZSgpLCB7J2tleSc6ICdjaGFuZ2VkJ30pDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLmJhcl90d28oKSwgeydrZXknOiAnY2hhbmdlZCd9KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvby50ZXN0X29uZSgpLCB7J2tleSc6ICdvcmlnaW5hbCd9KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvby50ZXN0X3R3bygpLCB7J2tleSc6ICdvcmlnaW5hbCd9KQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF93aXRoX3NwZWNfbW9ja19yZXByKHNlbGYpOg0KICAgICAgICBmb3IgYXJnIGluICgnc3BlYycsICdhdXRvc3BlYycsICdzcGVjX3NldCcpOg0KICAgICAgICAgICAgcCA9IHBhdGNoKCclcy5Tb21lQ2xhc3MnICUgX19uYW1lX18sICoqe2FyZzogVHJ1ZX0pDQogICAgICAgICAgICBtID0gcC5zdGFydCgpDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigiIG5hbWU9J1NvbWVDbGFzcyciLCByZXByKG0pKQ0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0SW4oIiBuYW1lPSdTb21lQ2xhc3MuY2xhc3NfYXR0cmlidXRlJyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXByKG0uY2xhc3NfYXR0cmlidXRlKSkNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEluKCIgbmFtZT0nU29tZUNsYXNzKCknIiwgcmVwcihtKCkpKQ0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0SW4oIiBuYW1lPSdTb21lQ2xhc3MoKS5jbGFzc19hdHRyaWJ1dGUnIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcHIobSgpLmNsYXNzX2F0dHJpYnV0ZSkpDQogICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgIHAuc3RvcCgpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX25lc3RlZF9hdXRvc3BlY19yZXByKHNlbGYpOg0KICAgICAgICB3aXRoIHBhdGNoKCd1bml0dGVzdC50ZXN0LnRlc3Rtb2NrLnN1cHBvcnQnLCBhdXRvc3BlYz1UcnVlKSBhcyBtOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigiIG5hbWU9J3N1cHBvcnQuU29tZUNsYXNzLndpYmJsZSgpJyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgIHJlcHIobS5Tb21lQ2xhc3Mud2liYmxlKCkpKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigiIG5hbWU9J3N1cHBvcnQuU29tZUNsYXNzKCkud2liYmxlKCknIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwcihtLlNvbWVDbGFzcygpLndpYmJsZSgpKSkNCg0KDQoNCiAgICBkZWYgdGVzdF9tb2NrX2NhbGxzX3dpdGhfcGF0Y2goc2VsZik6DQogICAgICAgIGZvciBhcmcgaW4gKCdzcGVjJywgJ2F1dG9zcGVjJywgJ3NwZWNfc2V0Jyk6DQogICAgICAgICAgICBwID0gcGF0Y2goJyVzLlNvbWVDbGFzcycgJSBfX25hbWVfXywgKip7YXJnOiBUcnVlfSkNCiAgICAgICAgICAgIG0gPSBwLnN0YXJ0KCkNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBtLndpYmJsZSgpDQoNCiAgICAgICAgICAgICAgICBrYWxscyA9IFtjYWxsLndpYmJsZSgpXQ0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobS5tb2NrX2NhbGxzLCBrYWxscykNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG0ubWV0aG9kX2NhbGxzLCBrYWxscykNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG0ud2liYmxlLm1vY2tfY2FsbHMsIFtjYWxsKCldKQ0KDQogICAgICAgICAgICAgICAgcmVzdWx0ID0gbSgpDQogICAgICAgICAgICAgICAga2FsbHMuYXBwZW5kKGNhbGwoKSkNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG0ubW9ja19jYWxscywga2FsbHMpDQoNCiAgICAgICAgICAgICAgICByZXN1bHQud2liYmxlKCkNCiAgICAgICAgICAgICAgICBrYWxscy5hcHBlbmQoY2FsbCgpLndpYmJsZSgpKQ0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobS5tb2NrX2NhbGxzLCBrYWxscykNCg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0Lm1vY2tfY2FsbHMsIFtjYWxsLndpYmJsZSgpXSkNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC53aWJibGUubW9ja19jYWxscywgW2NhbGwoKV0pDQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQubWV0aG9kX2NhbGxzLCBbY2FsbC53aWJibGUoKV0pDQogICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgIHAuc3RvcCgpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX2ltcG9ydHNfbGF6aWx5KHNlbGYpOg0KICAgICAgICBzeXMubW9kdWxlcy5wb3AoJ3NxdWl6eicsIE5vbmUpDQoNCiAgICAgICAgcDEgPSBwYXRjaCgnc3F1aXp6LnNxdW96eicpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEltcG9ydEVycm9yLCBwMS5zdGFydCkNCg0KICAgICAgICBzcXVpenogPSBNb2NrKCkNCiAgICAgICAgc3F1aXp6LnNxdW96eiA9IDYNCiAgICAgICAgc3lzLm1vZHVsZXNbJ3NxdWl6eiddID0gc3F1aXp6DQogICAgICAgIHAxID0gcGF0Y2goJ3NxdWl6ei5zcXVvenonKQ0KICAgICAgICBzcXVpenouc3F1b3p6ID0gMw0KICAgICAgICBwMS5zdGFydCgpDQogICAgICAgIHAxLnN0b3AoKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNxdWl6ei5zcXVvenosIDMpDQoNCg0KICAgIGRlZiB0ZXN0X3BhdGNoX3Byb3BvZ3JhdGVzX2V4Y19vbl9leGl0KHNlbGYpOg0KICAgICAgICBjbGFzcyBob2xkZXI6DQogICAgICAgICAgICBleGNfaW5mbyA9IE5vbmUsIE5vbmUsIE5vbmUNCg0KICAgICAgICBjbGFzcyBjdXN0b21fcGF0Y2goX3BhdGNoKToNCiAgICAgICAgICAgIGRlZiBfX2V4aXRfXyhzZWxmLCBldHlwZT1Ob25lLCB2YWw9Tm9uZSwgdGI9Tm9uZSk6DQogICAgICAgICAgICAgICAgX3BhdGNoLl9fZXhpdF9fKHNlbGYsIGV0eXBlLCB2YWwsIHRiKQ0KICAgICAgICAgICAgICAgIGhvbGRlci5leGNfaW5mbyA9IGV0eXBlLCB2YWwsIHRiDQogICAgICAgICAgICBzdG9wID0gX19leGl0X18NCg0KICAgICAgICBkZWYgd2l0aF9jdXN0b21fcGF0Y2godGFyZ2V0KToNCiAgICAgICAgICAgIGdldHRlciwgYXR0cmlidXRlID0gX2dldF90YXJnZXQodGFyZ2V0KQ0KICAgICAgICAgICAgcmV0dXJuIGN1c3RvbV9wYXRjaCgNCiAgICAgICAgICAgICAgICBnZXR0ZXIsIGF0dHJpYnV0ZSwgREVGQVVMVCwgTm9uZSwgRmFsc2UsIE5vbmUsDQogICAgICAgICAgICAgICAgTm9uZSwgTm9uZSwge30NCiAgICAgICAgICAgICkNCg0KICAgICAgICBAd2l0aF9jdXN0b21fcGF0Y2goJ3NxdWl6ei5zcXVvenonKQ0KICAgICAgICBkZWYgdGVzdChtb2NrKToNCiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcg0KDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFJ1bnRpbWVFcnJvciwgdGVzdCkNCiAgICAgICAgc2VsZi5hc3NlcnRJcyhob2xkZXIuZXhjX2luZm9bMF0sIFJ1bnRpbWVFcnJvcikNCiAgICAgICAgc2VsZi5hc3NlcnRJc05vdE5vbmUoaG9sZGVyLmV4Y19pbmZvWzFdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdleGNlcHRpb24gdmFsdWUgbm90IHByb3BnYXRlZCcpDQogICAgICAgIHNlbGYuYXNzZXJ0SXNOb3ROb25lKGhvbGRlci5leGNfaW5mb1syXSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXhjZXB0aW9uIHRyYWNlYmFjayBub3QgcHJvcGdhdGVkJykNCg0KDQogICAgZGVmIHRlc3RfY3JlYXRlX2FuZF9zcGVjcyhzZWxmKToNCiAgICAgICAgZm9yIGt3YXJnIGluICgnc3BlYycsICdzcGVjX3NldCcsICdhdXRvc3BlYycpOg0KICAgICAgICAgICAgcCA9IHBhdGNoKCclcy5kb2Vzbm90ZXhpc3QnICUgX19uYW1lX18sIGNyZWF0ZT1UcnVlLA0KICAgICAgICAgICAgICAgICAgICAgICoqe2t3YXJnOiBUcnVlfSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgcC5zdGFydCkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKE5hbWVFcnJvciwgbGFtYmRhOiBkb2Vzbm90ZXhpc3QpDQoNCiAgICAgICAgICAgICMgY2hlY2sgdGhhdCBzcGVjIHdpdGggY3JlYXRlIGlzIGlubm9jdW91cyBpZiB0aGUgb3JpZ2luYWwgZXhpc3RzDQogICAgICAgICAgICBwID0gcGF0Y2goTU9ETkFNRSwgY3JlYXRlPVRydWUsICoqe2t3YXJnOiBUcnVlfSkNCiAgICAgICAgICAgIHAuc3RhcnQoKQ0KICAgICAgICAgICAgcC5zdG9wKCkNCg0KDQogICAgZGVmIHRlc3RfbXVsdGlwbGVfc3BlY3Moc2VsZik6DQogICAgICAgIG9yaWdpbmFsID0gUFRNb2R1bGUNCiAgICAgICAgZm9yIGt3YXJnIGluICgnc3BlYycsICdzcGVjX3NldCcpOg0KICAgICAgICAgICAgcCA9IHBhdGNoKE1PRE5BTUUsIGF1dG9zcGVjPTAsICoqe2t3YXJnOiAwfSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgcC5zdGFydCkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMoUFRNb2R1bGUsIG9yaWdpbmFsKQ0KDQogICAgICAgIGZvciBrd2FyZyBpbiAoJ3NwZWMnLCAnYXV0b3NwZWMnKToNCiAgICAgICAgICAgIHAgPSBwYXRjaChNT0ROQU1FLCBzcGVjX3NldD0wLCAqKntrd2FyZzogMH0pDQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIHAuc3RhcnQpDQogICAgICAgICAgICBzZWxmLmFzc2VydElzKFBUTW9kdWxlLCBvcmlnaW5hbCkNCg0KICAgICAgICBmb3Iga3dhcmcgaW4gKCdzcGVjX3NldCcsICdhdXRvc3BlYycpOg0KICAgICAgICAgICAgcCA9IHBhdGNoKE1PRE5BTUUsIHNwZWM9MCwgKip7a3dhcmc6IDB9KQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBwLnN0YXJ0KQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhQVE1vZHVsZSwgb3JpZ2luYWwpDQoNCg0KICAgIGRlZiB0ZXN0X3NwZWNzX2ZhbHNlX2luc3RlYWRfb2Zfbm9uZShzZWxmKToNCiAgICAgICAgcCA9IHBhdGNoKE1PRE5BTUUsIHNwZWM9RmFsc2UsIHNwZWNfc2V0PUZhbHNlLCBhdXRvc3BlYz1GYWxzZSkNCiAgICAgICAgbW9jayA9IHAuc3RhcnQoKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICAjIG5vIHNwZWMgc2hvdWxkIGhhdmUgYmVlbiBzZXQsIHNvIGF0dHJpYnV0ZSBhY2Nlc3Mgc2hvdWxkIG5vdCBmYWlsDQogICAgICAgICAgICBtb2NrLmRvZXNfbm90X2V4aXN0DQogICAgICAgICAgICBtb2NrLmRvZXNfbm90X2V4aXN0ID0gMw0KICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgcC5zdG9wKCkNCg0KDQogICAgZGVmIHRlc3RfZmFsc2V5X3NwZWMoc2VsZik6DQogICAgICAgIGZvciBrd2FyZyBpbiAoJ3NwZWMnLCAnYXV0b3NwZWMnLCAnc3BlY19zZXQnKToNCiAgICAgICAgICAgIHAgPSBwYXRjaChNT0ROQU1FLCAqKntrd2FyZzogMH0pDQogICAgICAgICAgICBtID0gcC5zdGFydCgpDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIG0sICdkb2Vzbm90ZXhpdCcpDQogICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgIHAuc3RvcCgpDQoNCg0KICAgIGRlZiB0ZXN0X3NwZWNfc2V0X3RydWUoc2VsZik6DQogICAgICAgIGZvciBrd2FyZyBpbiAoJ3NwZWMnLCAnYXV0b3NwZWMnKToNCiAgICAgICAgICAgIHAgPSBwYXRjaChNT0ROQU1FLCBzcGVjX3NldD1UcnVlLCAqKntrd2FyZzogVHJ1ZX0pDQogICAgICAgICAgICBtID0gcC5zdGFydCgpDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIHNldGF0dHIsIG0sDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RvZXNub3RleGlzdCcsICdzb21ldGhpbmcnKQ0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBnZXRhdHRyLCBtLCAnZG9lc25vdGV4aXN0JykNCiAgICAgICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICAgICAgcC5zdG9wKCkNCg0KDQogICAgZGVmIHRlc3RfY2FsbGFibGVfc3BlY19hc19saXN0KHNlbGYpOg0KICAgICAgICBzcGVjID0gKCdfX2NhbGxfXycsKQ0KICAgICAgICBwID0gcGF0Y2goTU9ETkFNRSwgc3BlYz1zcGVjKQ0KICAgICAgICBtID0gcC5zdGFydCgpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShjYWxsYWJsZShtKSkNCiAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgIHAuc3RvcCgpDQoNCg0KICAgIGRlZiB0ZXN0X25vdF9jYWxsYWJsZV9zcGVjX2FzX2xpc3Qoc2VsZik6DQogICAgICAgIHNwZWMgPSAoJ2ZvbycsICdiYXInKQ0KICAgICAgICBwID0gcGF0Y2goTU9ETkFNRSwgc3BlYz1zcGVjKQ0KICAgICAgICBtID0gcC5zdGFydCgpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoY2FsbGFibGUobSkpDQogICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICBwLnN0b3AoKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9zdG9wYWxsKHNlbGYpOg0KICAgICAgICB1bmxpbmsgPSBvcy51bmxpbmsNCiAgICAgICAgY2hkaXIgPSBvcy5jaGRpcg0KICAgICAgICBwYXRoID0gb3MucGF0aA0KICAgICAgICBwYXRjaCgnb3MudW5saW5rJywgc29tZXRoaW5nKS5zdGFydCgpDQogICAgICAgIHBhdGNoKCdvcy5jaGRpcicsIHNvbWV0aGluZ19lbHNlKS5zdGFydCgpDQoNCiAgICAgICAgQHBhdGNoKCdvcy5wYXRoJykNCiAgICAgICAgZGVmIHBhdGNoZWQobW9ja19wYXRoKToNCiAgICAgICAgICAgIHBhdGNoLnN0b3BhbGwoKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhvcy5wYXRoLCBtb2NrX3BhdGgpDQogICAgICAgICAgICBzZWxmLmFzc2VydElzKG9zLnVubGluaywgdW5saW5rKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhvcy5jaGRpciwgY2hkaXIpDQoNCiAgICAgICAgcGF0Y2hlZCgpDQogICAgICAgIHNlbGYuYXNzZXJ0SXMob3MucGF0aCwgcGF0aCkNCg0KDQoNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQogICAgdW5pdHRlc3QubWFpbigpDQo=',
'/Lib/unittest/test/testmock/testhelpers.py':'',
'/Lib/unittest/test/testmock/testmock.py':'',
'/Lib/unittest/test/testmock/testwith.py':'aW1wb3J0IHVuaXR0ZXN0DQpmcm9tIHdhcm5pbmdzIGltcG9ydCBjYXRjaF93YXJuaW5ncw0KDQpmcm9tIHVuaXR0ZXN0LnRlc3QudGVzdG1vY2suc3VwcG9ydCBpbXBvcnQgaXNfaW5zdGFuY2UNCmZyb20gdW5pdHRlc3QubW9jayBpbXBvcnQgTWFnaWNNb2NrLCBNb2NrLCBwYXRjaCwgc2VudGluZWwsIG1vY2tfb3BlbiwgY2FsbA0KDQoNCg0Kc29tZXRoaW5nICA9IHNlbnRpbmVsLlNvbWV0aGluZw0Kc29tZXRoaW5nX2Vsc2UgID0gc2VudGluZWwuU29tZXRoaW5nRWxzZQ0KDQoNCg0KY2xhc3MgV2l0aFRlc3QodW5pdHRlc3QuVGVzdENhc2UpOg0KDQogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnQoc2VsZik6DQogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuU29tZXRoaW5nMik6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nMiwgInVucGF0Y2hlZCIpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpDQoNCg0KICAgIGRlZiB0ZXN0X3dpdGhfc3RhdGVtZW50X2V4Y2VwdGlvbihzZWxmKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5Tb21ldGhpbmcyKToNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nMiwgInVucGF0Y2hlZCIpDQogICAgICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdwb3cnKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uOg0KICAgICAgICAgICAgcGFzcw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZi5mYWlsKCJwYXRjaCBzd2FsbG93ZWQgZXhjZXB0aW9uIikNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykNCg0KDQogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfYXMoc2VsZik6DQogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXykgYXMgbW9ja19zb21ldGhpbmc6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsICJ1bnBhdGNoZWQiKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2tfc29tZXRoaW5nLCBNYWdpY01vY2spLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYXRjaGluZyB3cm9uZyB0eXBlIikNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfb2JqZWN0X3dpdGhfc3RhdGVtZW50KHNlbGYpOg0KICAgICAgICBjbGFzcyBGb28ob2JqZWN0KToNCiAgICAgICAgICAgIHNvbWV0aGluZyA9ICdmb28nDQogICAgICAgIG9yaWdpbmFsID0gRm9vLnNvbWV0aGluZw0KICAgICAgICB3aXRoIHBhdGNoLm9iamVjdChGb28sICdzb21ldGhpbmcnKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwoRm9vLnNvbWV0aGluZywgb3JpZ2luYWwsICJ1bnBhdGNoZWQiKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5zb21ldGhpbmcsIG9yaWdpbmFsKQ0KDQoNCiAgICBkZWYgdGVzdF93aXRoX3N0YXRlbWVudF9uZXN0ZWQoc2VsZik6DQogICAgICAgIHdpdGggY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpOg0KICAgICAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZywgcGF0Y2goJyVzLnNvbWV0aGluZ19lbHNlJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZ19lbHNlOg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpDQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmdfZWxzZSwgbW9ja19zb21ldGhpbmdfZWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bnBhdGNoZWQiKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIHNlbnRpbmVsLlNvbWV0aGluZ0Vsc2UpDQoNCg0KICAgIGRlZiB0ZXN0X3dpdGhfc3RhdGVtZW50X3NwZWNpZmllZChzZWxmKToNCiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5QYXRjaGVkKSBhcyBtb2NrX3NvbWV0aGluZzoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2tfc29tZXRoaW5nLCBzZW50aW5lbC5QYXRjaGVkLCAid3JvbmcgcGF0Y2giKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nKQ0KDQoNCiAgICBkZWYgdGVzdENvbnRleHRNYW5hZ2VyTW9ja2luZyhzZWxmKToNCiAgICAgICAgbW9jayA9IE1vY2soKQ0KICAgICAgICBtb2NrLl9fZW50ZXJfXyA9IE1vY2soKQ0KICAgICAgICBtb2NrLl9fZXhpdF9fID0gTW9jaygpDQogICAgICAgIG1vY2suX19leGl0X18ucmV0dXJuX3ZhbHVlID0gRmFsc2UNCg0KICAgICAgICB3aXRoIG1vY2sgYXMgbToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobSwgbW9jay5fX2VudGVyX18ucmV0dXJuX3ZhbHVlKQ0KICAgICAgICBtb2NrLl9fZW50ZXJfXy5hc3NlcnRfY2FsbGVkX3dpdGgoKQ0KICAgICAgICBtb2NrLl9fZXhpdF9fLmFzc2VydF9jYWxsZWRfd2l0aChOb25lLCBOb25lLCBOb25lKQ0KDQoNCiAgICBkZWYgdGVzdF9jb250ZXh0X21hbmFnZXJfd2l0aF9tYWdpY19tb2NrKHNlbGYpOg0KICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCkNCg0KICAgICAgICB3aXRoIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvcik6DQogICAgICAgICAgICB3aXRoIG1vY2s6DQogICAgICAgICAgICAgICAgJ2ZvbycgKyAzDQogICAgICAgIG1vY2suX19lbnRlcl9fLmFzc2VydF9jYWxsZWRfd2l0aCgpDQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShtb2NrLl9fZXhpdF9fLmNhbGxlZCkNCg0KDQogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfc2FtZV9hdHRyaWJ1dGUoc2VsZik6DQogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuUGF0Y2hlZCkgYXMgbW9ja19zb21ldGhpbmc6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsICJ1bnBhdGNoZWQiKQ0KDQogICAgICAgICAgICB3aXRoIHBhdGNoKCclcy5zb21ldGhpbmcnICUgX19uYW1lX18pIGFzIG1vY2tfYWdhaW46DQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIG1vY2tfYWdhaW4sICJ1bnBhdGNoZWQiKQ0KDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXN0b3JlZCB3aXRoIHdyb25nIGluc3RhbmNlIikNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nLCAibm90IHJlc3RvcmVkIikNCg0KDQogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfaW1icmljYXRlZChzZWxmKToNCiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZzoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpDQoNCiAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZ19lbHNlJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZ19lbHNlOg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIG1vY2tfc29tZXRoaW5nX2Vsc2UsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5wYXRjaGVkIikNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZ19lbHNlLCBzZW50aW5lbC5Tb21ldGhpbmdFbHNlKQ0KDQoNCiAgICBkZWYgdGVzdF9kaWN0X2NvbnRleHRfbWFuYWdlcihzZWxmKToNCiAgICAgICAgZm9vID0ge30NCiAgICAgICAgd2l0aCBwYXRjaC5kaWN0KGZvbywgeydhJzogJ2InfSk6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvbywgeydhJzogJ2InfSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28sIHt9KQ0KDQogICAgICAgIHdpdGggc2VsZi5hc3NlcnRSYWlzZXMoTmFtZUVycm9yKToNCiAgICAgICAgICAgIHdpdGggcGF0Y2guZGljdChmb28sIHsnYSc6ICdiJ30pOg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7J2EnOiAnYid9KQ0KICAgICAgICAgICAgICAgIHJhaXNlIE5hbWVFcnJvcignS29ucmFkJykNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvbywge30pDQoNCg0KDQpjbGFzcyBUZXN0TW9ja09wZW4odW5pdHRlc3QuVGVzdENhc2UpOg0KDQogICAgZGVmIHRlc3RfbW9ja19vcGVuKHNlbGYpOg0KICAgICAgICBtb2NrID0gbW9ja19vcGVuKCkNCiAgICAgICAgd2l0aCBwYXRjaCgnJXMub3BlbicgJSBfX25hbWVfXywgbW9jaywgY3JlYXRlPVRydWUpIGFzIHBhdGNoZWQ6DQogICAgICAgICAgICBzZWxmLmFzc2VydElzKHBhdGNoZWQsIG1vY2spDQogICAgICAgICAgICBvcGVuKCdmb28nKQ0KDQogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoJ2ZvbycpDQoNCg0KICAgIGRlZiB0ZXN0X21vY2tfb3Blbl9jb250ZXh0X21hbmFnZXIoc2VsZik6DQogICAgICAgIG1vY2sgPSBtb2NrX29wZW4oKQ0KICAgICAgICBoYW5kbGUgPSBtb2NrLnJldHVybl92YWx1ZQ0KICAgICAgICB3aXRoIHBhdGNoKCclcy5vcGVuJyAlIF9fbmFtZV9fLCBtb2NrLCBjcmVhdGU9VHJ1ZSk6DQogICAgICAgICAgICB3aXRoIG9wZW4oJ2ZvbycpIGFzIGY6DQogICAgICAgICAgICAgICAgZi5yZWFkKCkNCg0KICAgICAgICBleHBlY3RlZF9jYWxscyA9IFtjYWxsKCdmb28nKSwgY2FsbCgpLl9fZW50ZXJfXygpLCBjYWxsKCkucmVhZCgpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsKCkuX19leGl0X18oTm9uZSwgTm9uZSwgTm9uZSldDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzLCBleHBlY3RlZF9jYWxscykNCiAgICAgICAgc2VsZi5hc3NlcnRJcyhmLCBoYW5kbGUpDQoNCg0KICAgIGRlZiB0ZXN0X2V4cGxpY2l0X21vY2soc2VsZik6DQogICAgICAgIG1vY2sgPSBNYWdpY01vY2soKQ0KICAgICAgICBtb2NrX29wZW4obW9jaykNCg0KICAgICAgICB3aXRoIHBhdGNoKCclcy5vcGVuJyAlIF9fbmFtZV9fLCBtb2NrLCBjcmVhdGU9VHJ1ZSkgYXMgcGF0Y2hlZDoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMocGF0Y2hlZCwgbW9jaykNCiAgICAgICAgICAgIG9wZW4oJ2ZvbycpDQoNCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgnZm9vJykNCg0KDQogICAgZGVmIHRlc3RfcmVhZF9kYXRhKHNlbGYpOg0KICAgICAgICBtb2NrID0gbW9ja19vcGVuKHJlYWRfZGF0YT0nZm9vJykNCiAgICAgICAgd2l0aCBwYXRjaCgnJXMub3BlbicgJSBfX25hbWVfXywgbW9jaywgY3JlYXRlPVRydWUpOg0KICAgICAgICAgICAgaCA9IG9wZW4oJ2JhcicpDQogICAgICAgICAgICByZXN1bHQgPSBoLnJlYWQoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LCAnZm9vJykNCg0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIHVuaXR0ZXN0Lm1haW4oKQ0K',
'/Lib/unittest/test/testmock/__init__.py':'aW1wb3J0IG9zDQppbXBvcnQgc3lzDQppbXBvcnQgdW5pdHRlc3QNCg0KDQpoZXJlID0gb3MucGF0aC5kaXJuYW1lKF9fZmlsZV9fKQ0KbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXINCg0KZGVmIGxvYWRfdGVzdHMoKmFyZ3MpOg0KICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKCkNCiAgICBmb3IgZm4gaW4gb3MubGlzdGRpcihoZXJlKToNCiAgICAgICAgaWYgZm4uc3RhcnRzd2l0aCgidGVzdCIpIGFuZCBmbi5lbmRzd2l0aCgiLnB5Iik6DQogICAgICAgICAgICBtb2RuYW1lID0gInVuaXR0ZXN0LnRlc3QudGVzdG1vY2suIiArIGZuWzotM10NCiAgICAgICAgICAgIF9faW1wb3J0X18obW9kbmFtZSkNCiAgICAgICAgICAgIG1vZHVsZSA9IHN5cy5tb2R1bGVzW21vZG5hbWVdDQogICAgICAgICAgICBzdWl0ZS5hZGRUZXN0KGxvYWRlci5sb2FkVGVzdHNGcm9tTW9kdWxlKG1vZHVsZSkpDQogICAgcmV0dXJuIHN1aXRlDQo=',
'/Lib/unittest/test/testmock/testcallable.py':'IyBDb3B5cmlnaHQgKEMpIDIwMDctMjAxMiBNaWNoYWVsIEZvb3JkICYgdGhlIG1vY2sgdGVhbQ0KIyBFLW1haWw6IGZ1enp5bWFuIEFUIHZvaWRzcGFjZSBET1Qgb3JnIERPVCB1aw0KIyBodHRwOi8vd3d3LnZvaWRzcGFjZS5vcmcudWsvcHl0aG9uL21vY2svDQoNCmltcG9ydCB1bml0dGVzdA0KZnJvbSB1bml0dGVzdC50ZXN0LnRlc3Rtb2NrLnN1cHBvcnQgaW1wb3J0IGlzX2luc3RhbmNlLCBYLCBTb21lQ2xhc3MNCg0KZnJvbSB1bml0dGVzdC5tb2NrIGltcG9ydCAoDQogICAgTW9jaywgTWFnaWNNb2NrLCBOb25DYWxsYWJsZU1hZ2ljTW9jaywNCiAgICBOb25DYWxsYWJsZU1vY2ssIHBhdGNoLCBjcmVhdGVfYXV0b3NwZWMsDQogICAgQ2FsbGFibGVNaXhpbg0KKQ0KDQoNCg0KY2xhc3MgVGVzdENhbGxhYmxlKHVuaXR0ZXN0LlRlc3RDYXNlKToNCg0KICAgIGRlZiBhc3NlcnROb3RDYWxsYWJsZShzZWxmLCBtb2NrKToNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2ssIE5vbkNhbGxhYmxlTWFnaWNNb2NrKSkNCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShpc19pbnN0YW5jZShtb2NrLCBDYWxsYWJsZU1peGluKSkNCg0KDQogICAgZGVmIHRlc3Rfbm9uX2NhbGxhYmxlKHNlbGYpOg0KICAgICAgICBmb3IgbW9jayBpbiBOb25DYWxsYWJsZU1hZ2ljTW9jaygpLCBOb25DYWxsYWJsZU1vY2soKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoaGFzYXR0cihtb2NrLCAnX19jYWxsX18nKSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SW4obW9jay5fX2NsYXNzX18uX19uYW1lX18sIHJlcHIobW9jaykpDQoNCg0KICAgIGRlZiB0ZXN0X2hlaXJhcmNoeShzZWxmKToNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3MoTWFnaWNNb2NrLCBNb2NrKSkNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3MoTm9uQ2FsbGFibGVNYWdpY01vY2ssIE5vbkNhbGxhYmxlTW9jaykpDQoNCg0KICAgIGRlZiB0ZXN0X2F0dHJpYnV0ZXMoc2VsZik6DQogICAgICAgIG9uZSA9IE5vbkNhbGxhYmxlTW9jaygpDQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUob25lLm9uZSksIE1vY2spKQ0KDQogICAgICAgIHR3byA9IE5vbkNhbGxhYmxlTWFnaWNNb2NrKCkNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3ModHlwZSh0d28udHdvKSwgTWFnaWNNb2NrKSkNCg0KDQogICAgZGVmIHRlc3Rfc3ViY2xhc3NlcyhzZWxmKToNCiAgICAgICAgY2xhc3MgTW9ja1N1YihNb2NrKToNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICBvbmUgPSBNb2NrU3ViKCkNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3ModHlwZShvbmUub25lKSwgTW9ja1N1YikpDQoNCiAgICAgICAgY2xhc3MgTWFnaWNTdWIoTWFnaWNNb2NrKToNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICB0d28gPSBNYWdpY1N1YigpDQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUodHdvLnR3byksIE1hZ2ljU3ViKSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfc3BlYyhzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVRydWUpDQogICAgICAgIG1vY2sgPSBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHBhdGNoZXIuc3RvcCkNCg0KICAgICAgICBpbnN0YW5jZSA9IG1vY2soKQ0KICAgICAgICBtb2NrLmFzc2VydF9jYWxsZWRfb25jZV93aXRoKCkNCg0KICAgICAgICBzZWxmLmFzc2VydE5vdENhbGxhYmxlKGluc3RhbmNlKQ0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIGluc3RhbmNlKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9zcGVjX3NldChzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1UcnVlKQ0KICAgICAgICBtb2NrID0gcGF0Y2hlci5zdGFydCgpDQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChwYXRjaGVyLnN0b3ApDQoNCiAgICAgICAgaW5zdGFuY2UgPSBtb2NrKCkNCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnROb3RDYWxsYWJsZShpbnN0YW5jZSkNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBpbnN0YW5jZSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19pbnN0YW5jZShzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVgoKSkNCiAgICAgICAgbW9jayA9IHBhdGNoZXIuc3RhcnQoKQ0KICAgICAgICBzZWxmLmFkZENsZWFudXAocGF0Y2hlci5zdG9wKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUobW9jaykNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBtb2NrKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9zcGVjX3NldF9pbnN0YW5jZShzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1YKCkpDQogICAgICAgIG1vY2sgPSBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHBhdGNoZXIuc3RvcCkNCg0KICAgICAgICBzZWxmLmFzc2VydE5vdENhbGxhYmxlKG1vY2spDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19jYWxsYWJsZV9jbGFzcyhzZWxmKToNCiAgICAgICAgY2xhc3MgQ2FsbGFibGVYKFgpOg0KICAgICAgICAgICAgZGVmIF9fY2FsbF9fKHNlbGYpOg0KICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICBjbGFzcyBTdWIoQ2FsbGFibGVYKToNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICBjbGFzcyBNdWx0aShTb21lQ2xhc3MsIFN1Yik6DQogICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgZm9yIGFyZyBpbiAnc3BlYycsICdzcGVjX3NldCc6DQogICAgICAgICAgICBmb3IgS2xhc3MgaW4gQ2FsbGFibGVYLCBTdWIsIE11bHRpOg0KICAgICAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLlgnICUgX19uYW1lX18sICoqe2FyZzogS2xhc3N9KSBhcyBtb2NrOg0KICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IG1vY2soKQ0KICAgICAgICAgICAgICAgICAgICBtb2NrLmFzc2VydF9jYWxsZWRfb25jZV93aXRoKCkNCg0KICAgICAgICAgICAgICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNfaW5zdGFuY2UoaW5zdGFuY2UsIE1hZ2ljTW9jaykpDQogICAgICAgICAgICAgICAgICAgICMgaW5oZXJpdGVkIHNwZWMNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIGluc3RhbmNlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9vYmFyYmF6JykNCg0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbnN0YW5jZSgpDQogICAgICAgICAgICAgICAgICAgICMgaW5zdGFuY2UgaXMgY2FsbGFibGUsIHJlc3VsdCBoYXMgbm8gc3BlYw0KICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpDQoNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0KDMsIDIsIDEpDQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgzLCAyLCAxKQ0KICAgICAgICAgICAgICAgICAgICByZXN1bHQuZm9vKDMsIDIsIDEpDQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5mb28uYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoMywgMiwgMSkNCg0KDQogICAgZGVmIHRlc3RfY3JlYXRlX2F1dG9wc2VjKHNlbGYpOg0KICAgICAgICBtb2NrID0gY3JlYXRlX2F1dG9zcGVjKFgpDQogICAgICAgIGluc3RhbmNlID0gbW9jaygpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgaW5zdGFuY2UpDQoNCiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhYKCkpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykNCg0KDQogICAgZGVmIHRlc3RfY3JlYXRlX2F1dG9zcGVjX2luc3RhbmNlKHNlbGYpOg0KICAgICAgICBtb2NrID0gY3JlYXRlX2F1dG9zcGVjKFNvbWVDbGFzcywgaW5zdGFuY2U9VHJ1ZSkNCg0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG1vY2spDQogICAgICAgIG1vY2sud2liYmxlKCkNCiAgICAgICAgbW9jay53aWJibGUuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jay53aWJibGUsICdzb21lJywgICdhcmdzJykNCg==',
'/Lib/unittest/test/testmock/testmagicmethods.py':'',
'/Lib/urllib/request.py':'aW1wb3J0IGFqYXgKCmNsYXNzIEZpbGVJTzoKICBkZWYgX19pbml0X18oc2VsZiwgZGF0YSk6CiAgICAgIHNlbGYuX2RhdGE9ZGF0YQoKICBkZWYgcmVhZChzZWxmKToKICAgICAgcmV0dXJuIHNlbGYuX2RhdGEKCmRlZiB1cmxvcGVuKHVybCwgZGF0YT1Ob25lLCB0aW1lb3V0PU5vbmUpOgogICAgZ2xvYmFsIHJlc3VsdAogICAgcmVzdWx0PU5vbmUKCiAgICBkZWYgb25fY29tcGxldGUocmVxKToKICAgICAgICBnbG9iYWwgcmVzdWx0CiAgICAgICAgcmVzdWx0PXJlcQoKICAgIF9hamF4PWFqYXguYWpheCgpCiAgICBfYWpheC5iaW5kKCdjb21wbGV0ZScsIG9uX2NvbXBsZXRlKQogICAgaWYgdGltZW91dCBpcyBub3QgTm9uZToKICAgICAgIF9hamF4LnNldF90aW1lb3V0KHRpbWVvdXQpCgogICAgX2FqYXgub3BlbignR0VUJywgdXJsLCBGYWxzZSkKICAgIGlmIGRhdGEgaXMgTm9uZToKICAgICAgIF9hamF4LnNlbmQoKQogICAgZWxzZToKICAgICAgIF9hamF4LnNlbmQoZGF0YSkKCiAgICByZXR1cm4gRmlsZUlPKHJlc3VsdC50ZXh0KSwgdXJsLCByZXN1bHQuaGVhZGVycwo=',
'/Lib/urllib/__init__.py':'',
'/Lib/ui/progressbar.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFByb2dyZXNzQmFyKFdpZGdldC5XaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiKQogICAgICBXaWRnZXQuV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIHNlbGYuX2Rpdl9zaGVsbCwgJ3Byb2dyZXNzYmFyJywgaWQpCgogICAgICBzZWxmLl9zaG93X2xhYmVsPWxhYmVsCiAgICAgIGlmIGxhYmVsOgogICAgICAgICBzZWxmLl9sYWJlbD1odG1sLkRJVihDbGFzcz0ncHJvZ3Jlc3MtbGFiZWwnKQogICAgICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fbGFiZWwKCiAgICAgIHNlbGYuX2Jhcj1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXItdmFsdWUgdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItbGVmdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17J3dpZHRoJzogJzBweCd9KQogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fYmFyCgogIGRlZiBzZXRfcHJvZ3Jlc3Moc2VsZiwgcGVyY2VudCk6CiAgICAgIHNlbGYuX2Jhci5zdHlsZS53aWR0aD0nJXMlJScgJSBwZXJjZW50CiAgICAgIGlmIHNlbGYuX3Nob3dfbGFiZWw6CiAgICAgICAgIHNlbGYuX2xhYmVsLnRleHQ9JyVzJSUnICUgcGVyY2VudAo=',
'/Lib/ui/Widget.py':'aW1wb3J0IHJhbmRvbQpmcm9tIGJyb3dzZXIgaW1wb3J0IGRvYyBhcyBkb2N1bWVudCAgIyA6KCBkb2N1bWVudCBkb2Vzbid0IHdvcmsKCmRlZiBnZXRNb3VzZVBvc2l0aW9uKGUpOgogICAgaWYgZSBpcyBOb25lOgogICAgICAgZT13aW4uZXZlbnQKCiAgICBpZiBlLnBhZ2VYIG9yIGUucGFnZVk6CiAgICAgICByZXR1cm4geyd4JzogZS5wYWdlWCwgJ3knOiBlLnBhZ2VZfQoKICAgIGlmIGUuY2xpZW50WCBvciBlLmNsaWVudFk6CiAgICAgICBfcG9zeD1lLmNsaWVudFggKyBkb2MuYm9keS5zY3JvbGxMZWZ0ICsgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0OwogICAgICAgX3Bvc3k9ZS5jbGllbnRZICsgZG9jLmJvZHkuc2Nyb2xsVG9wICsgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7CiAgICAgICByZXR1cm4geyd4JzogX3Bvc3gsICd5JzogX3Bvc3l9CiAgICAgIAogICAgcmV0dXJuIHsneCc6IDAsICd5JzogMH0KCmNsYXNzIFdpZGdldDoKICBkZWYgX19pbml0X18oc2VsZiwgZWxlbWVudCwgdHlwZSwgaWQ9Tm9uZSk6CiAgICAgIHNlbGYuX2VsZW1lbnQ9ZWxlbWVudAoKICAgICAgaWYgaWQgaXMgTm9uZToKICAgICAgICAgc2VsZi5fZWxlbWVudC5pZD0nJXNfJXMnICUgKHR5cGUsIGludCgxMDAwMDAqcmFuZG9tLnJhbmRvbSgpKSkKICAgICAgZWxzZToKICAgICAgICAgc2VsZi5fZWxlbWVudC5pZD1pZAoKICBkZWYgZ2V0X2lkKHNlbGYpOgogICAgICByZXR1cm4gc2VsZi5fZWxlbWVudC5pZAoKICBkZWYgYXR0YWNoKHNlbGYsIGVsZW1lbnRfaWQpOgogICAgICAiIiIgYXBwZW5kIHRoaXMgRE9NIGNvbXBvbmVudCB0byBET00gZWxlbWVudCBlbGVtZW50X2lkIiIiCiAgICAgICNkb2N1bWVudFtlbGVtZW50X2lkXSA8PSBzZWxmLl9lbGVtZW50ICAgI3RoaXMgZG9lc24ndCB3b3JrIDooCiAgICAgICNkb2MgaXMgYWN0dWFsbHkgdGhlIGdsb2JhbCAnZG9jJyBub3QgdGhlIG9uZSB3ZSBpbXBvcnRlZCBmcm9tIGJyb3dzZXIgOigKICAgICAgZG9jW2VsZW1lbnRfaWRdIDw9IHNlbGYuX2VsZW1lbnQKCiAgZGVmIHNob3coc2VsZik6CiAgICAgIHNlbGYuX2VsZW1lbnQuZGlzcGxheT0nYmxvY2snCgogIGRlZiBoaWRlKHNlbGYpOgogICAgICBzZWxmLl9lbGVtZW50LmRpc3BsYXk9J25vbmUnCgpjbGFzcyBEcmFnZ2FibGVXaWRnZXQoV2lkZ2V0KToKICBkZWYgX19pbml0X18oc2VsZiwgZWxlbWVudCwgdHlwZSwgaWQ9Tm9uZSk6CiAgICAgIFdpZGdldC5fX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZCkKCiAgICAgIGRlZiBkcmFnKGUpOgogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS50b3A9JyVzcHgnICUgKGUuY2xpZW50WSAtIHNlbGYuX2RlbHRhWSkKICAgICAgICAgIHNlbGYuX2VsZW1lbnQuc3R5bGUubGVmdD0nJXNweCcgJSAoZS5jbGllbnRYIC0gc2VsZi5fZGVsdGFYKQoKICAgICAgZGVmIG1vdXNlRG93bihlKToKICAgICAgICAgIHNlbGYuX2VsZW1lbnQuc3R5bGUucG9zaXRpb249J2Fic29sdXRlJwogICAgICAgICAgc2VsZi5fZGVsdGFYPWUuY2xpZW50WCAtIHNlbGYuX2VsZW1lbnQub2Zmc2V0TGVmdAogICAgICAgICAgc2VsZi5fZGVsdGFZPWUuY2xpZW50WSAtIHNlbGYuX2VsZW1lbnQub2Zmc2V0VG9wCiAgICAgICAgICBkb2MuYmluZCgnbW91c2Vtb3ZlJywgZHJhZykKCiAgICAgIGRlZiBtb3VzZVVwKGUpOgogICAgICAgICAgZG9jLnVuYmluZCgnbW91c2Vtb3ZlJykKCiAgICAgIHNlbGYuX2VsZW1lbnQuYmluZCgnbW91c2Vkb3duJywgbW91c2VEb3duKQogICAgICBzZWxmLl9lbGVtZW50LmJpbmQoJ21vdXNldXAnLCBtb3VzZVVwKQo=',
'/Lib/ui/slider.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFNsaWRlcihXaWRnZXQuV2lkZ2V0KToKICBkZWYgX19pbml0X18oc2VsZiwgaWQ9Tm9uZSwgZG9jdW1lbnQ9ZG9jLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktc2xpZGVyIHVpLXNsaWRlci1ob3Jpem9udGFsIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIikKCiAgICAgIFdpZGdldC5XaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnc2xpZGVyJywgaWQpCgogICAgICBzZWxmLl9oYW5kbGU9aHRtbC5BKENsYXNzPSJ1aS1zbGlkZXItaGFuZGxlIHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWFsbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgSHJlZj0nIycsIHN0eWxlPXsnbGVmdCc6ICcwcHgnfSkKICAgICAgc2VsZi5fdmFsdWU9MAogICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQoKICAgICAgZGVmIHN0YXJ0U2xpZGUoZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1UcnVlCiAgICAgICAgICBzZWxmLl91cHBlckJvdW5kID0gc2VsZi5fZGl2X3NoZWxsLm9mZnNldFdpZHRoIC0gc2VsZi5faGFuZGxlLm9mZnNldFdpZHRoCgogICAgICAgICAgcG9zID0gV2lkZ2V0LmdldE1vdXNlUG9zaXRpb24oZSkKICAgICAgICAgIHNlbGYuX3N0YXJ0TW91c2VYPXBvc1sneCddCgogICAgICAgICAgc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ID0gcGFyc2VJbnQoc2VsZi5faGFuZGxlLmVsdC5zdHlsZS5sZWZ0KSAjLSBwYXJzZUludChzZWxmLl9kaXZfc2hlbGwuZWx0LnN0eWxlLmxlZnQpCiAgICAgICAgICAjcHJpbnQoc2VsZi5fdXBwZXJCb3VuZCkKICAgICAgICAgIHVwZGF0ZVBvc2l0aW9uKGUpCgogICAgICBkZWYgdXBkYXRlUG9zaXRpb24oZSk6CiAgICAgICAgICBwb3MgPSBXaWRnZXQuZ2V0TW91c2VQb3NpdGlvbihlKQogICAgICAgICAgX25ld1BvcyA9IHNlbGYuX2xhc3RFbGVtZW50TGVmdCArIHBvc1sneCddIC0gc2VsZi5fc3RhcnRNb3VzZVgKICAgICAgICAgIAogICAgICAgICAgX25ld1BvcyA9IG1heCgwLCBfbmV3UG9zKQogICAgICAgICAgX25ld1BvcyA9IG1pbihfbmV3UG9zLCBzZWxmLl91cHBlckJvdW5kKQoKICAgICAgICAgICNwcmludChfbmV3UG9zKQogICAgICAgICAgc2VsZi5faGFuZGxlLmVsdC5zdHlsZS5sZWZ0ID0gJyVzcHgnICUgX25ld1BvcwogICAgICAgICAgc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ID0gX25ld1BvcwoKICAgICAgZGVmIG1vdmluZyhlKToKICAgICAgICAgIGlmIHNlbGYuX2lzTW91c2VEb3duOgogICAgICAgICAgICAgdXBkYXRlUG9zaXRpb24oZSkKCiAgICAgIGRlZiBkcm9wQ2FsbGJhY2soZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQogICAgICAgICAgc2VsZi5faGFuZGxlLnVuYmluZCgnbW91c2Vtb3ZlJywgbW92aW5nKQoKCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZW1vdmUnLCBtb3ZpbmcpCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZXVwJywgZHJvcENhbGxiYWNrKQogICAgICAjc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3V0JywgZHJvcENhbGxiYWNrKQogICAgICBzZWxmLl9oYW5kbGUuYmluZCgnbW91c2Vkb3duJywgc3RhcnRTbGlkZSkKCiAgICAgIGRlZiBtb3VzZW92ZXIoZSk6CiAgICAgICAgICBfY2xhc3M9c2VsZi5faGFuZGxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKQogICAgICAgICAgc2VsZi5faGFuZGxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnJXMgJXMnICUgKF9jbGFzcywgJ3VpLXN0YXRlLWhvdmVyJykpCgogICAgICBkZWYgbW91c2VvdXQoZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQogICAgICAgICAgX2NsYXNzPXNlbGYuX2hhbmRsZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykKICAgICAgICAgIHNlbGYuX2hhbmRsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgX2NsYXNzLnJlcGxhY2UoJ3VpLXN0YXRlLWhvdmVyJywgJycpKQoKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3ZlcicsIG1vdXNlb3ZlcikKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3V0JywgbW91c2VvdXQpCgogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5faGFuZGxlCgogIGRlZiBnZXRfdmFsdWUoc2VsZik6CiAgICAgIHJldHVybiBzZWxmLl92YWx1ZQoKICAjZGVmIHNldF92YWx1ZShzZWxmLCB2YWx1ZSk6CiAgIyAgICBzZWxmLl92YWx1ZT12YWx1ZQogICMgICBzZWxmLl9oYW5kbGUuc3R5bGUubGVmdD0nJXNweCcgJSB2YWx1ZQo=',
'/Lib/ui/__init__.py':'ZnJvbSBicm93c2VyIGltcG9ydCBodG1sLCBkb2MgYXMgZG9jdW1lbnQKZnJvbSBEaWFsb2cgaW1wb3J0ICoKZnJvbSBQcm9ncmVzc0JhciBpbXBvcnQgKgpmcm9tIFNsaWRlciBpbXBvcnQgKgoKZGVmIGFkZF9zdHlsZXNoZWV0KCk6CiAgICBfbGluaz1odG1sLkxJTksoSHJlZj0nL3NyYy9MaWIvdWkvY3NzL3Ntb290aG5lc3MvanF1ZXJ5LXVpLTEuMTAuMy5jdXN0b20ubWluLmNzcycpCiAgICBfbGluay5yZWw9J3N0eWxlc2hlZXQnCgogICAgZG9jIDw9IF9saW5rICAgICAjIGRvY3VtZW50IGRvZXNuJ3Qgd29yayBoZXJlLi4gOiggbXVzdCB1c2UgZG9jIAo=',
'/Lib/ui/dialog.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwsIGRvYyBhcyBkb2N1bWVudAoKY2xhc3MgRGlhbG9nKFdpZGdldC5EcmFnZ2FibGVXaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lKToKICAgICAgc2VsZi5fZGl2X3NoZWxsPWh0bWwuRElWKAogICAgICAgICBDbGFzcz0idWktZGlhbG9nIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIHVpLWZyb250IHVpLWRyYWdnYWJsZSB1aS1yZXNpemFibGUiLAogICAgICAgICBzdHlsZT17J3Bvc2l0aW9uJzogJ2Fic29sdXRlJywgJ2hlaWdodCc6ICdhdXRvJywgJ3dpZHRoJzogJzMwMHB4JywKICAgICAgICAgICAgICAgICd0b3AnOiAnOThweCcsICdsZWZ0JzogJzE0MHB4JywgJ2Rpc3BsYXknOiAnYmxvY2snfSkKCiAgICAgIFdpZGdldC5EcmFnZ2FibGVXaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnZGlhbG9nJywgaWQpCgogICAgICBfZGl2X3RpdGxlYmFyPWh0bWwuRElWKElkPSJ0aXRsZWJhciIsCiAgICAgICAgICAgQ2xhc3M9InVpLWRpYWxvZy10aXRsZWJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwgdWktaGVscGVyLWNsZWFyZml4IikKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IF9kaXZfdGl0bGViYXIKCiAgICAgIHNlbGYuX2Rpdl90aXRsZT1odG1sLlNQQU4oSWQ9InRpdGxlIiwgQ2xhc3M9InVpLWRpYWxvZy10aXRsZSIpCiAgICAgICAgCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fZGl2X3RpdGxlCgogICAgICBzZWxmLl90aXRsZV9idXR0b249aHRtbC5CVVRUT04oVGl0bGU9ImNsb3NlIiwKICAgICAgICAgICAgQ2xhc3M9InVpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIHVpLWJ1dHRvbi1pY29uLW9ubHkgdWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlIikKCiAgICAgIGRlZiBkaWFsb2dfY2xvc2UoZSk6CiAgICAgICAgICAjZGVsIGRvY3VtZW50W3NlbGYuX2Rpdl9zaGVsbC5pZF0KICAgICAgICAgIGRlbCBkb2Nbc2VsZi5fZGl2X3NoZWxsLmlkXQoKICAgICAgc2VsZi5fdGl0bGVfYnV0dG9uLmJpbmQoJ2NsaWNrJywgZGlhbG9nX2Nsb3NlKQogICAgICBfc3Bhbj1odG1sLlNQQU4oQ2xhc3M9InVpLWJ1dHRvbi1pY29uLXByaW1hcnkgdWktaWNvbiB1aS1pY29uLWNsb3NldGhpY2siKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9zcGFuPWh0bWwuU1BBTignY2xvc2UnLCBDbGFzcz0idWktYnV0dG9uLXRleHQiKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fdGl0bGVfYnV0dG9uCgogICAgICBzZWxmLl9kaXZfZGlhbG9nPWh0bWwuRElWKENsYXNzPSJ1aS1kaWFsb2ctY29udGVudCB1aS13aWRnZXQtY29udGVudCIsCiAgICAgICAgICAgc3R5bGU9eyd3aWR0aCc6ICdhdXRvJywgJ21pbi1oZWlnaHQnOiAnMTA1cHgnLCAKICAgICAgICAgICAgICAgICAgJ21heC1oZWlnaHQnOiAnbm9uZScsICdoZWlnaHQnOiAnYXV0byd9KQoKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IHNlbGYuX2Rpdl9kaWFsb2cKCiAgICAgIGZvciBfaSBpbiBbJ24nLCAnZScsICdzJywgJ3cnLCAnc2UnLCAnc3cnLCAnbmUnLCAnbncnXToKICAgICAgICAgIGlmIF9pID09ICdzZSc6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIHVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtJXMiICUgKF9pLCBfaSkKICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIiAlIF9pCgogICAgICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IGh0bWwuRElWKENsYXNzPV9jbGFzcywgc3R5bGU9eyd6LWluZGV4JzogJzkwJ30pCgogICAgICBkb2MgPD0gc2VsZi5fZGl2X3NoZWxsCgogIGRlZiBzZXRfdGl0bGUoc2VsZiwgdGl0bGUpOgogICAgICBzZWxmLl9kaXZfdGl0bGUuc2V0X3RleHQodGl0bGUpCgogIGRlZiBzZXRfYm9keShzZWxmLCBib2R5KToKICAgICAgc2VsZi5fZGl2X2RpYWxvZy5zZXRfaHRtbChib2R5KQo=',
'/Lib/http/cookies.py':'',
'/Lib/http/__init__.py':''
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.$py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.$py_VFS[lib])
}


function $import_pyj_module(module,alias,names,path,module_contents) {
    __BRYTHON__.$py_module_path[module]=path
    __BRYTHON__.$py_module_alias[module]=alias
    __BRYTHON__.scope[module+'.py']={}
    __BRYTHON__.scope[module+'.py'].__dict__={}

   try {
     eval(module_contents);
     // add names defined in the module as attributes of $module
     for(var attr in __BRYTHON__.scope[module].__dict__){
       $module[attr] = __BRYTHON__.scope[module].__dict__[attr]
     }
        
     // add class and __str__
     $module.__class__ = $type
     $module.__repr__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__str__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__file__ = path
     return $module
   } catch(err) {
     eval('throw '+err.name+'(err.message)')
   }
}

//define import procedure to look up module in VFS
$import_via_VFS=function(module,alias,names){
  var ext=['.js', '.pyj', '.py']
  var search_path=__BRYTHON__.path
  var root = __BRYTHON__.brython_path;
  if (root.endswith('/')) {
     root=root.substring(0,root.length-1); 
  }
  if (search_path.indexOf(root+'/libs') == -1) {
     search_path.unshift(root+'/libs')
  }

  if (search_path.indexOf(root+'/Lib') == -1) {
     search_path.unshift(root+'/Lib')
  }

  for(var i=0; i<search_path.length; i++) {
     for (var j=0; j<ext.length; j++) {
         var path=search_path[i].replace(root, '')
         path+='/'+module+ext[j]
         
         //console.log("searching for " + path + " in VFS");
         var module_contents=readFromVFS(path)
         if(module_contents !== undefined) {
           console.log("imported ("+module+") via VFS:" + path)
           if (ext[j] == '.js') {
              return $import_js_module(module,alias,names,path,module_contents)
           }
           if (ext[j] == '.pyj') {
              return $import_pyj_module(module,alias,names,path,module_contents)
           }
           return $import_py_module(module,alias,names,path,module_contents)
         }
     }
  }
  res = Error()
  res.name = 'NotFoundError'
  res.message = "No module named '"+module+"'"
  throw res
}

// since $import_funcs is now a local variable (import_funcs), we have
// to over write the $import_single function to get VFS to work
$import_single=function (module){
    var import_funcs = [$import_via_VFS, $import_js, $import_module_search_path]
    if(module.name.search(/\./)>-1){import_funcs = [$import_module_search_path]}
    for(var j=0;j<import_funcs.length;j++){
        try{
            return import_funcs[j](module)
        } catch(err){
            if(err.name==="NotFoundError"){
                if(j==import_funcs.length-1){
                    throw ImportError("no module named '"+module.name+"'")
                }else{
                    continue
                }
            }else{throw(err)}
        }
    }
}
  