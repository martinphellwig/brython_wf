__BRYTHON__.$py_VFS={
'/libs/ajax.js':'Ly8gYWpheAokbW9kdWxlID0gKGZ1bmN0aW9uKCl7CgokWE1MSHR0cERpY3QgPSB7CiAgICBfX2NsYXNzX186JHR5cGUsCiAgICBfX25hbWVfXzonWE1MSHR0cCcKfQoKJFhNTEh0dHBEaWN0Ll9fZ2V0YXR0cmlidXRlX18gPSBmdW5jdGlvbihzZWxmLGF0dHIpewogICAgaWYoWydoZWFkZXJzJywndGV4dCcsJ3htbCddLmluZGV4T2YoYXR0cik+LTEpewogICAgICAgIHJldHVybiAkWE1MSHR0cERpY3RbYXR0cl0oc2VsZikKICAgIH0KICAgIHJldHVybiAkT2JqZWN0RGljdC5fX2dldGF0dHJpYnV0ZV9fKHNlbGYsYXR0cikKfQoKJFhNTEh0dHBEaWN0Ll9fbXJvX18gPSBbJFhNTEh0dHBEaWN0LCRPYmplY3REaWN0XQoKJFhNTEh0dHBEaWN0Ll9fcmVwcl9fID0gZnVuY3Rpb24oc2VsZil7cmV0dXJuICc8b2JqZWN0IFhNTEh0dHA+J30KCiRYTUxIdHRwRGljdC5fX3N0cl9fID0gJFhNTEh0dHBEaWN0LnRvU3RyaW5nID0gJFhNTEh0dHBEaWN0Ll9fcmVwcl9fCgokWE1MSHR0cERpY3QudGV4dCA9IGZ1bmN0aW9uKHNlbGYpe3JldHVybiBzZWxmLnJlc3BvbnNlVGV4dH0KICAgIAokWE1MSHR0cERpY3QueG1sID0gZnVuY3Rpb24oc2VsZil7cmV0dXJuICREb21PYmplY3Qoc2VsZi5yZXNwb25zZVhNTCl9CiAgICAKJFhNTEh0dHBEaWN0LmhlYWRlcnMgPSBmdW5jdGlvbihzZWxmKXsKICAgIHJldHVybiBsaXN0KHNlbGYuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoJ1xuJykpCn0KCiRYTUxIdHRwRGljdC5nZXRfaGVhZGVyID0gZnVuY3Rpb24oKXsKICAgIHZhciByZXFvYmogPSBzZWxmOwogICAgcmV0dXJuIGZ1bmN0aW9uKGhlYWRlcil7IHJldHVybiByZXFvYmouZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKSB9Cn0KCiRBamF4RGljdCA9IHsKICAgIF9fY2xhc3NfXzokdHlwZSwKICAgIF9fbmFtZV9fOidhamF4Jwp9CgokQWpheERpY3QuX19tcm9fXyA9IFskQWpheERpY3QsJE9iamVjdERpY3RdCgokQWpheERpY3QuX19yZXByX18gPSBmdW5jdGlvbihzZWxmKXsKICAgIHJldHVybiAnPG9iamVjdCBBamF4PicKfQoKJEFqYXhEaWN0Ll9fc3RyX18gPSAkQWpheERpY3QudG9TdHJpbmcgPSAkQWpheERpY3QuX19yZXByX18KCiRBamF4RGljdC5iaW5kID0gZnVuY3Rpb24oc2VsZixldnQsZnVuYyl7CiAgICAvLyByZXEuYmluZChldnQsZnVuYykgaXMgdGhlIHNhbWUgYXMgcmVxLm9uX2V2dCA9IGZ1bmMKICAgIHNlbGZbJ29uXycrZXZ0XT1mdW5jCn0KCiRBamF4RGljdC5vcGVuID0gZnVuY3Rpb24oc2VsZixtZXRob2QsdXJsLGFzeW5jKXsKICAgIHNlbGYuJHhtbGh0dHAub3BlbihtZXRob2QsdXJsLGFzeW5jKQp9CgokQWpheERpY3Quc2VuZCA9IGZ1bmN0aW9uKHNlbGYscGFyYW1zKXsKICAgIC8vIHBhcmFtcyBpcyBhIFB5dGhvbiBkaWN0aW9uYXJ5CiAgICB2YXIgcmVzID0gJycKICAgIGlmKCFwYXJhbXMgfHwgcGFyYW1zLiRrZXlzLmxlbmd0aD09MCl7c2VsZi4keG1saHR0cC5zZW5kKCk7cmV0dXJufQogICAgZWxzZSBpZihpc2luc3RhbmNlKHBhcmFtcyxzdHIpKXsKICAgICAgICByZXMgPSBwYXJhbXMKICAgIH1lbHNlIGlmKGlzaW5zdGFuY2UocGFyYW1zLGRpY3QpKXsKICAgICAgICBmb3IoaT0wO2k8cGFyYW1zLiRrZXlzLmxlbmd0aDtpKyspewogICAgICAgICAgICByZXMgKz1lbmNvZGVVUklDb21wb25lbnQoc3RyKHBhcmFtcy4ka2V5c1tpXSkpKyc9JytlbmNvZGVVUklDb21wb25lbnQoc3RyKHBhcmFtcy4kdmFsdWVzW2ldKSkrJyYnCiAgICAgICAgfQogICAgICAgIHJlcyA9IHJlcy5zdWJzdHIoMCxyZXMubGVuZ3RoLTEpCiAgICB9ZWxzZXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3IoInNlbmQoKSBhcmd1bWVudCBtdXN0IGJlIHN0cmluZyBvciBkaWN0b25hcnksIG5vdCAnIitzdHIocGFyYW1zLl9fY2xhc3NfXykrIiciKQogICAgfQogICAgc2VsZi4keG1saHR0cC5zZW5kKHJlcykKfQoKJEFqYXhEaWN0LnNldF9oZWFkZXIgPSBmdW5jdGlvbihzZWxmLGtleSx2YWx1ZSl7CiAgICBzZWxmLiR4bWxodHRwLnNldFJlcXVlc3RIZWFkZXIoa2V5LHZhbHVlKQp9CgokQWpheERpY3Quc2V0X3RpbWVvdXQgPSBmdW5jdGlvbihzZWxmLHNlY29uZHMsZnVuYyl7CiAgICBzZWxmLiR4bWxodHRwLiRyZXF1ZXN0VGltZXIgPSBzZXRUaW1lb3V0KAogICAgICAgIGZ1bmN0aW9uKCkge3NlbGYuJHhtbGh0dHAuYWJvcnQoKTtmdW5jKCl9LCAKICAgICAgICBzZWNvbmRzKjEwMDApOyAKfQoKZnVuY3Rpb24gYWpheCgpewoKICAgIHZhciByZXMgPSB7CiAgICAgICAgX19jbGFzc19fOiRBamF4RGljdAogICAgfQoKICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3Qpey8vIGNvZGUgZm9yIElFNyssIEZpcmVmb3gsIENocm9tZSwgT3BlcmEsIFNhZmFyaQogICAgICAgIHZhciAkeG1saHR0cD1uZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgIH1lbHNley8vIGNvZGUgZm9yIElFNiwgSUU1CiAgICAgICAgdmFyICR4bWxodHRwPW5ldyBBY3RpdmVYT2JqZWN0KCJNaWNyb3NvZnQuWE1MSFRUUCIpOwogICAgfQogICAgJHhtbGh0dHAuJHJlcXVlc3RUaW1lciA9IG51bGwKICAgICR4bWxodHRwLl9fY2xhc3NfXyA9ICRYTUxIdHRwRGljdAogICAgCiAgICAkeG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpewogICAgICAgIC8vIGhlcmUsICJ0aGlzIiByZWZlcnMgdG8gJHhtbGh0dHAKICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnJlYWR5U3RhdGUKICAgICAgICB2YXIgcmVxID0gdGhpcy4kYWpheAogICAgICAgIHZhciB0aW1lciA9IHRoaXMuJHJlcXVlc3RUaW1lcgogICAgICAgIHZhciBvYmogPSB0aGlzCiAgICAgICAgaWYoc3RhdGU9PT0wICYmICdvbl91bmluaXRpYWxpemVkJyBpbiByZXEpe3JlcS5vbl91bmluaXRpYWxpemVkKG9iail9CiAgICAgICAgZWxzZSBpZihzdGF0ZT09PTEgJiYgJ29uX2xvYWRpbmcnIGluIHJlcSl7cmVxLm9uX2xvYWRpbmcob2JqKX0KICAgICAgICBlbHNlIGlmKHN0YXRlPT09MiAmJiAnb25fbG9hZGVkJyBpbiByZXEpe3JlcS5vbl9sb2FkZWQob2JqKX0KICAgICAgICBlbHNlIGlmKHN0YXRlPT09MyAmJiAnb25faW50ZXJhY3RpdmUnIGluIHJlcSl7cmVxLm9uX2ludGVyYWN0aXZlKG9iail9CiAgICAgICAgZWxzZSBpZihzdGF0ZT09PTQgJiYgJ29uX2NvbXBsZXRlJyBpbiByZXEpewogICAgICAgICAgICBpZih0aW1lciAhPT0gbnVsbCl7d2luZG93LmNsZWFyVGltZW91dCh0aW1lcil9CiAgICAgICAgICAgIHJlcS5vbl9jb21wbGV0ZShvYmopCiAgICAgICAgfQogICAgfQogICAgJHhtbGh0dHAuJGFqYXggPSByZXMKICAgIHJlcy4keG1saHR0cCA9ICR4bWxodHRwCiAgICByZXR1cm4gcmVzCn0KCmFqYXguX19jbGFzc19fID0gJGZhY3RvcnkKYWpheC4kZGljdCA9ICRBamF4RGljdAoKcmV0dXJuIHthamF4OmFqYXh9Cgp9KSgp',
'/libs/builtins.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewogICAgdmFyIG9iaiA9IHtfX2NsYXNzX186JE1vZHVsZURpY3QsX19uYW1lX186J2J1aWx0aW5zJ30KICAgIHZhciBidWlsdGluX25hbWVzID0gWydBcml0aG1ldGljRXJyb3InLCAnQXNzZXJ0aW9uRXJyb3InLCAnQXR0cmlidXRlRXJyb3InLCAKICAgICdCYXNlRXhjZXB0aW9uJywgJ0Jsb2NraW5nSU9FcnJvcicsICdCcm9rZW5QaXBlRXJyb3InLCAnQnVmZmVyRXJyb3InLCAKICAgICdCeXRlc1dhcm5pbmcnLCAnQ2hpbGRQcm9jZXNzRXJyb3InLCAnQ29ubmVjdGlvbkFib3J0ZWRFcnJvcicsIAogICAgJ0Nvbm5lY3Rpb25FcnJvcicsICdDb25uZWN0aW9uUmVmdXNlZEVycm9yJywgJ0Nvbm5lY3Rpb25SZXNldEVycm9yJywgCiAgICAnRGVwcmVjYXRpb25XYXJuaW5nJywgJ0VPRkVycm9yJywgJ0VsbGlwc2lzJywgJ0Vudmlyb25tZW50RXJyb3InLCAnRXhjZXB0aW9uJywgCiAgICAnRmFsc2UnLCAnRmlsZUV4aXN0c0Vycm9yJywgJ0ZpbGVOb3RGb3VuZEVycm9yJywgJ0Zsb2F0aW5nUG9pbnRFcnJvcicsIAogICAgJ0Z1dHVyZVdhcm5pbmcnLCAnR2VuZXJhdG9yRXhpdCcsICdJT0Vycm9yJywgJ0ltcG9ydEVycm9yJywgJ0ltcG9ydFdhcm5pbmcnLCAKICAgICdJbmRlbnRhdGlvbkVycm9yJywgJ0luZGV4RXJyb3InLCAnSW50ZXJydXB0ZWRFcnJvcicsICdJc0FEaXJlY3RvcnlFcnJvcicsCiAgICAnS2V5RXJyb3InLCAnS2V5Ym9hcmRJbnRlcnJ1cHQnLCAnTG9va3VwRXJyb3InLCAnTWVtb3J5RXJyb3InLCAnTmFtZUVycm9yJywgCiAgICAnTm9uZScsICdOb3RBRGlyZWN0b3J5RXJyb3InLCAnTm90SW1wbGVtZW50ZWQnLCAnTm90SW1wbGVtZW50ZWRFcnJvcicsIAogICAgJ09TRXJyb3InLCAnT3ZlcmZsb3dFcnJvcicsICdQZW5kaW5nRGVwcmVjYXRpb25XYXJuaW5nJywgJ1Blcm1pc3Npb25FcnJvcicsIAogICAgJ1Byb2Nlc3NMb29rdXBFcnJvcicsICdSZWZlcmVuY2VFcnJvcicsICdSZXNvdXJjZVdhcm5pbmcnLCAnUnVudGltZUVycm9yJywgCiAgICAnUnVudGltZVdhcm5pbmcnLCAnU3RvcEl0ZXJhdGlvbicsICdTeW50YXhFcnJvcicsICdTeW50YXhXYXJuaW5nJywgCiAgICAnU3lzdGVtRXJyb3InLCAnU3lzdGVtRXhpdCcsICdUYWJFcnJvcicsICdUaW1lb3V0RXJyb3InLCAnVHJ1ZScsICdUeXBlRXJyb3InLCAKICAgICdVbmJvdW5kTG9jYWxFcnJvcicsICdVbmljb2RlRGVjb2RlRXJyb3InLCAnVW5pY29kZUVuY29kZUVycm9yJywgCiAgICAnVW5pY29kZUVycm9yJywgJ1VuaWNvZGVUcmFuc2xhdGVFcnJvcicsICdVbmljb2RlV2FybmluZycsICdVc2VyV2FybmluZycsIAogICAgJ1ZhbHVlRXJyb3InLCAnV2FybmluZycsICdXaW5kb3dzRXJyb3InLCAnWmVyb0RpdmlzaW9uRXJyb3InLCAnXycsIAogICAgJ19fYnVpbGRfY2xhc3NfXycsICdfX2RlYnVnX18nLCAnX19kb2NfXycsICdfX2ltcG9ydF9fJywgJ19fbmFtZV9fJywgCiAgICAnX19wYWNrYWdlX18nLCAnYWJzJywgJ2FsbCcsICdhbnknLCAnYXNjaWknLCAnYmluJywgJ2Jvb2wnLCAnYnl0ZWFycmF5JywgCiAgICAnYnl0ZXMnLCdjYWxsYWJsZScsICdjaHInLCAnY2xhc3NtZXRob2QnLCAnY29tcGlsZScsICdjb21wbGV4JywgJ2NvcHlyaWdodCcsIAogICAgJ2NyZWRpdHMnLCdkZWxhdHRyJywgJ2RpY3QnLCAnZGlyJywgJ2Rpdm1vZCcsICdlbnVtZXJhdGUnLCAnZXZhbCcsICdleGVjJywgCiAgICAnZXhpdCcsICdmaWx0ZXInLCAnZmxvYXQnLCAnZm9ybWF0JywgJ2Zyb3plbnNldCcsICdnZXRhdHRyJywgJ2dsb2JhbHMnLCAKICAgICdoYXNhdHRyJywgJ2hhc2gnLCAnaGVscCcsICdoZXgnLCAnaWQnLCAnaW5wdXQnLCAnaW50JywgJ2lzaW5zdGFuY2UnLCAKICAgICdpc3N1YmNsYXNzJywgJ2l0ZXInLCAnbGVuJywgJ2xpY2Vuc2UnLCAnbGlzdCcsICdsb2NhbHMnLCAnbWFwJywgJ21heCcsIAogICAgJ21lbW9yeXZpZXcnLCAnbWluJywgJ25leHQnLCAnb2JqZWN0JywgJ29jdCcsICdvcGVuJywgJ29yZCcsICdwb3cnLCAncHJpbnQnLCAKICAgICdwcm9wZXJ0eScsICdxdWl0JywgJ3JhbmdlJywgJ3JlcHInLCAncmV2ZXJzZWQnLCAncm91bmQnLCAnc2V0JywgJ3NldGF0dHInLCAKICAgICdzbGljZScsICdzb3J0ZWQnLCAnc3RhdGljbWV0aG9kJywgJ3N0cicsICdzdW0nLCAnc3VwZXInLCAndHVwbGUnLCAndHlwZScsIAogICAgJ3ZhcnMnLCAnemlwJ10KICAgIGZvcih2YXIgaT0wO2k8YnVpbHRpbl9uYW1lcy5sZW5ndGg7aSsrKXsKICAgICAgICB0cnl7b2JqW2J1aWx0aW5fbmFtZXNbaV1dPWV2YWwoYnVpbHRpbl9uYW1lc1tpXSl9CiAgICAgICAgY2F0Y2goZXJyKXt9CiAgICB9CiAgICByZXR1cm4gb2JqCn0pKCkK',
'/libs/hashlib.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7CiAgICAgICAgaWYgKGF0dHIgPT0gJ25ldycpIHtyZXR1cm4gJGhhc2hsaWJfbmV3O30KICAgICAgICByZXR1cm4gdGhpc1thdHRyXQogICAgfSwKICAgIG1kNTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnbWQ1Jyl9LAogICAgc2hhMTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMScpfSwKICAgIHNoYTIyNDogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjI0Jyl9LAogICAgc2hhMjU2OiBmdW5jdGlvbigpIHtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEyNTYnKX0sCiAgICBzaGEzODQ6IGZ1bmN0aW9uKCkge3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTM4NCcpfSwKICAgIHNoYTUxMjogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhNTEyJyl9LAoKICAgIGFsZ29yaXRobXNfZ3VhcmFudGVlZDogWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXSwKICAgIGFsZ29yaXRobXNfYXZhaWxhYmxlOiAgWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXQp9CgoKLy90b2RvOiBldmVudHVhbGx5IG1vdmUgdGhpcyBmdW5jdGlvbiB0byBhICJ1dGlsaXR5IiBmaWxlIG9yIHVzZSBhamF4IG1vZHVsZT8KZnVuY3Rpb24gJGdldF9DcnlwdG9KU19saWIoYWxnKSB7CiAgIHZhciBpbXA9JGltcG9ydGVyKCkKICAgdmFyICR4bWxodHRwPWltcFswXSwgZmFrZV9xcz1pbXBbMV0sIHRpbWVyPWltcFsyXSwgcmVzPW51bGwKCiAgICR4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaWYoJHhtbGh0dHAucmVhZHlTdGF0ZT09NCl7CiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpCiAgICAgICAgICAgIGlmKCR4bWxodHRwLnN0YXR1cz09MjAwIHx8ICR4bWxodHRwLnN0YXR1cz09MCl7cmVzPSR4bWxodHRwLnJlc3BvbnNlVGV4dH0KICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgIC8vIGRvbid0IHRocm93IGFuIGV4Y2VwdGlvbiBoZXJlLCBpdCB3aWxsIG5vdCBiZSBjYXVnaHQgKGlzc3VlICMzMCkKICAgICAgICAgICAgICAgIHJlcyA9IEVycm9yKCkKICAgICAgICAgICAgICAgIHJlcy5uYW1lID0gJ05vdEZvdW5kRXJyb3InCiAgICAgICAgICAgICAgICByZXMubWVzc2FnZSA9ICJObyBDcnlwdG9KUyBsaWIgbmFtZWQgJyIrYWxnKyInIgogICAgICAgICAgICB9CiAgICAgICAgfQogICB9CgogICAkeG1saHR0cC5vcGVuKCdHRVQnLCBfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJ2xpYnMvY3J5cHRvX2pzL3JvbGx1cHMvJythbGcrJy5qcycrZmFrZV9xcyxmYWxzZSkKICAgaWYoJ292ZXJyaWRlTWltZVR5cGUnIGluICR4bWxodHRwKXskeG1saHR0cC5vdmVycmlkZU1pbWVUeXBlKCJ0ZXh0L3BsYWluIil9CiAgICR4bWxodHRwLnNlbmQoKQogICBpZihyZXMuY29uc3RydWN0b3I9PT1FcnJvcil7dGhyb3cgcmVzfSAvLyBtb2R1bGUgbm90IGZvdW5kCgogICB0cnl7CiAgICAgIGV2YWwocmVzICsgIjsgX19CUllUSE9OX18uQ3J5cHRvSlM9Q3J5cHRvSlM7IikKICAgfSBjYXRjaCAoZXJyKSB7IAogICAgICB0aHJvdyBFcnJvcigiSlMgRXZhbCBFcnJvciIsICJDYW5ub3QgZXZhbCBDcnlwdG9KUyBhbGdvcml0aG0gJyIgKyBhbGcgKyAiJyA6IGVycm9yOiIgKyBlcnIpOwogICB9Cn0KCmZ1bmN0aW9uICRoYXNobGliX25ldyhhbGcpIHsKICAgIGlmIChhbGcgPT0gJ21kNScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLk1ENSA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignbWQ1JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uTUQ1LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTEgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTEnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExLmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMjI0JykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjI0ID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyMjQnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQuY3JlYXRlKCkKICAgIH0gZWxzZSBpZiAoYWxnID09ICdzaGEyNTYnKSB7CiAgICAgICBpZiAoX19CUllUSE9OX18uQ3J5cHRvID09PSB1bmRlZmluZWQgfHwgCiAgICAgICAgICAgX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyNTYgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTI1NicpCiAgICAgICB0aGlzLmhhc2ggPSBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTI1Ni5jcmVhdGUoKQogICAgfSBlbHNlIGlmIChhbGcgPT0gJ3NoYTM4NCcpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4NCA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignc2hhMzg0JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMzg0LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhNTEyJykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBNTEyID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGE1MTInKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTIuY3JlYXRlKCkKICAgIH0gZWxzZSB7CiAgICAgICAkcmFpc2UoJ0F0dHJpYnV0ZUVycm9yJywgJ0ludmFsaWQgaGFzaCBhbGdvcml0aG06JyArIGFsZykKICAgIH0KIAogICAgdGhpcy5fX2NsYXNzX18gPSAkdHlwZQogICAgdGhpcy5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpe3JldHVybiAkZ2V0YXR0cih0aGlzLGF0dHIpfQogICAgdGhpcy5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZXhkaWdlc3QoKX0KICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24obXNnKXt0aGlzLmhhc2gudXBkYXRlKG1zZyl9CiAgICB0aGlzLmNvcHkgPSBmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc2guY2xvbmUoKX0KCiAgICB0aGlzLmhleGRpZ2VzdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB0ZW1wPXRoaXMuaGFzaC5jbG9uZSgpOwogICAgICAgIHRlbXA9dGVtcC5maW5hbGl6ZSgpOwogICAgICAgIHJldHVybiB0ZW1wLnRvU3RyaW5nKCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7Cn0KCiRtb2R1bGUuX19jbGFzc19fID0gJG1vZHVsZQokbW9kdWxlLl9fc3RyX18gPSBmdW5jdGlvbigpIHtyZXR1cm4gIjxtb2R1bGUgJ2hhc2hsaWInPiJ9Cg==',
'/libs/html.js':'Ly8gY3JlYXRpb24gb2YgYW4gSFRNTCBlbGVtZW50CiRtb2R1bGUgPSAoZnVuY3Rpb24oKXsKZnVuY3Rpb24gJFRhZyh0YWdOYW1lLGFyZ3MpewogICAgdmFyIG9iaiA9ICRET01Ob2RlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSkpCiAgICAvLyBvYmouZWx0IGlzIHRoZSBET00gZWxlbWVudAogICAgb2JqLnBhcmVudCA9IHRoaXMKICAgIGlmKGFyZ3MhPXVuZGVmaW5lZCAmJiBhcmdzLmxlbmd0aD4wKXsKICAgICAgICAkc3RhcnQgPSAwCiAgICAgICAgJGZpcnN0ID0gYXJnc1swXQogICAgICAgIC8vIGlmIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhIGtleXdvcmQsIGl0J3MgdGhlIHRhZyBjb250ZW50CiAgICAgICAgaWYoJGZpcnN0Ll9fY2xhc3NfXyE9PSRLdyl7CiAgICAgICAgICAgICRzdGFydCA9IDEKICAgICAgICAgICAgaWYoaXNpbnN0YW5jZSgkZmlyc3QsW3N0cixpbnQsZmxvYXRdKSl7CiAgICAgICAgICAgICAgICB0eHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIoJGZpcnN0KSkKICAgICAgICAgICAgICAgIG9iai5lbHQuYXBwZW5kQ2hpbGQodHh0KQogICAgICAgICAgICB9IGVsc2UgaWYoJGZpcnN0Ll9fY2xhc3NfXz09PSRUYWdTdW1EaWN0KXsKICAgICAgICAgICAgICAgIGZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKyl7CiAgICAgICAgICAgICAgICAgICAgb2JqLmVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuY2hpbGRyZW5bJGldLmVsdCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsgLy8gYXJndW1lbnQgaXMgYW5vdGhlciBET01Ob2RlIGluc3RhbmNlCiAgICAgICAgICAgICAgICB0cnl7b2JqLmVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuZWx0KX0KICAgICAgICAgICAgICAgIGNhdGNoKGVycil7Y29uc29sZS5sb2coJ2VycmV1ciAnK2Vycik7dGhyb3cgVmFsdWVFcnJvcignd3JvbmcgZWxlbWVudCAnKyRmaXJzdCl9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gYXR0cmlidXRlcwogICAgICAgIGZvcih2YXIgJGk9JHN0YXJ0OyRpPGFyZ3MubGVuZ3RoOyRpKyspewogICAgICAgICAgICAvLyBrZXl3b3JkIGFyZ3VtZW50cwogICAgICAgICAgICAkYXJnID0gYXJnc1skaV0KICAgICAgICAgICAgaWYoJGFyZyAmJiAkYXJnLl9fY2xhc3NfXz09PSRLdyl7CiAgICAgICAgICAgICAgICBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHIoMCwyKT09PSJvbiIpeyAvLyBldmVudHMKICAgICAgICAgICAgICAgICAgICBldmFsKCdET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCk9PSJzdHlsZSIpewogICAgICAgICAgICAgICAgICAgIERPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZigkYXJnLnZhbHVlIT09ZmFsc2UpewogICAgICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb24uc2VsZWN0ZWQ9ZmFsc2Ugc2V0cyBpdCB0byB0cnVlIDotKQogICAgICAgICAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJnID0gJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5lbHQuc2V0QXR0cmlidXRlKGFyZywkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXJnPT0iY2xhc3MiKXsgLy8gZm9yIElFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmVsdC5zZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIsJGFyZy52YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGVycil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyZXVyICcrZXJyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVmFsdWVFcnJvcigiY2FuJ3Qgc2V0IGF0dHJpYnV0ZSAiKyRhcmcubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBvYmoKfQoKLy8gdGhlIGNsYXNzZXMgdXNlZCBmb3IgdGFnIHN1bXMsICRUYWdTVW0gYW5kICRUYWdTdW1DbGFzcyAKLy8gYXJlIGRlZmluZWQgaW4gcHlfZG9tLmpzCgpmdW5jdGlvbiBBKCl7CiAgICB2YXIgb2JqID0gJFRhZygnQScsYXJndW1lbnRzKQogICAgcmV0dXJuIG9iagp9CkEuX19uYW1lX189J2h0bWwuQScKCnZhciAkc3JjID0gQSsnJyAvLyBzb3VyY2Ugb2YgZnVuY3Rpb24gQQovLyBIVE1MNCB0YWdzCiR0YWdzID0gWydBJywgJ0FCQlInLCAnQUNST05ZTScsICdBRERSRVNTJywgJ0FQUExFVCcsCiAgICAgICAgICAgICdCJywgJ0JETycsICdCSUcnLCAnQkxPQ0tRVU9URScsICdCVVRUT04nLAogICAgICAgICAgICAnQ0FQVElPTicsICdDRU5URVInLCAnQ0lURScsICdDT0RFJywKICAgICAgICAgICAgJ0RFTCcsICdERk4nLCAnRElSJywgJ0RJVicsICdETCcsCiAgICAgICAgICAgICdFTScsICdGSUVMRFNFVCcsICdGT05UJywgJ0ZPUk0nLCAnRlJBTUVTRVQnLAogICAgICAgICAgICAnSDEnLCAnSDInLCAnSDMnLCAnSDQnLCAnSDUnLCAnSDYnLAogICAgICAgICAgICAnSScsICdJRlJBTUUnLCAnSU5TJywgJ0tCRCcsICdMQUJFTCcsICdMRUdFTkQnLAogICAgICAgICAgICAnTUFQJywgJ01FTlUnLCAnTk9GUkFNRVMnLCAnTk9TQ1JJUFQnLCAnT0JKRUNUJywKICAgICAgICAgICAgJ09MJywgJ09QVEdST1VQJywgJ1BSRScsICdRJywgJ1MnLCAnU0FNUCcsCiAgICAgICAgICAgICdTQ1JJUFQnLCAnU0VMRUNUJywgJ1NNQUxMJywgJ1NQQU4nLCAnU1RSSUtFJywKICAgICAgICAgICAgJ1NUUk9ORycsICdTVFlMRScsICdTVUInLCAnU1VQJywgJ1RBQkxFJywKICAgICAgICAgICAgJ1RFWFRBUkVBJywgJ1RJVExFJywgJ1RUJywgJ1UnLCAnVUwnLAogICAgICAgICAgICAnVkFSJywgJ0JPRFknLCAnQ09MR1JPVVAnLCAnREQnLCAnRFQnLCAnSEVBRCcsCiAgICAgICAgICAgICdIVE1MJywgJ0xJJywgJ1AnLCAnVEJPRFknLCdPUFRJT04nLCAKICAgICAgICAgICAgJ1REJywgJ1RGT09UJywgJ1RIJywgJ1RIRUFEJywgJ1RSJywKICAgICAgICAgICAgJ0FSRUEnLCAnQkFTRScsICdCQVNFRk9OVCcsICdCUicsICdDT0wnLCAnRlJBTUUnLAogICAgICAgICAgICAnSFInLCAnSU1HJywgJ0lOUFVUJywgJ0lTSU5ERVgnLCAnTElOSycsCiAgICAgICAgICAgICdNRVRBJywgJ1BBUkFNJ10KCi8vIEhUTUw1IHRhZ3MKJHRhZ3MgPSAkdGFncy5jb25jYXQoWydBUlRJQ0xFJywnQVNJREUnLCdBVURJTycsJ0JESScsCiAgICAnQ0FOVkFTJywnQ09NTUFORCcsJ0RBVEFMSVNUJywnREVUQUlMUycsJ0RJQUxPRycsCiAgICAnRU1CRUQnLCdGSUdDQVBUSU9OJywnRklHVVJFJywnRk9PVEVSJywnSEVBREVSJywKICAgICdLRVlHRU4nLCdNQVJLJywnTUVURVInLCdOQVYnLCdPVVRQVVQnLAogICAgJ1BST0dSRVNTJywnUlAnLCdSVCcsJ1JVQlknLCdTRUNUSU9OJywnU09VUkNFJywKICAgICdTVU1NQVJZJywnVElNRScsJ1RSQUNLJywnVklERU8nLCdXQlInXSkKCi8vIGNyZWF0ZSBjbGFzc2VzCnZhciBvYmogPSBuZXcgT2JqZWN0KCkKZm9yKCRpPTA7JGk8JHRhZ3MubGVuZ3RoOyRpKyspewogICAgJGNvZGUgPSAkc3JjLnJlcGxhY2UoL0EvZ20sJHRhZ3NbJGldKQogICAgZXZhbCgib2JqLiIrJHRhZ3NbJGldKyI9IiskY29kZSkKICAgIGV2YWwoIm9iai4iKyR0YWdzWyRpXSsnLl9fbmFtZV9fPSJodG1sLicrJHRhZ3NbJGldKyciJykKfQpvYmouX19nZXRhdHRyX18gPSBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0KcmV0dXJuIG9iagp9KSgpCg==',
'/libs/json.js':'ZnVuY3Rpb24gX3B5KG9iail7CiAgICBpZihvYmo9PT1udWxsKXtyZXR1cm4gTm9uZX0KICAgIGlmKGlzaW5zdGFuY2Uob2JqLGxpc3QpKXsKICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICBmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgcmVzLnB1c2goX3B5KG9ialtpXSkpCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXMKICAgIH0KICAgIGlmKG9iai5fX2NsYXNzX18hPT11bmRlZmluZWQpewogICAgICAgIGlmKG9iai5fX2NsYXNzX189PT1saXN0KXsKICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBvYmpbaV0gPSBfcHkob2JqW2ldKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBvYmoKICAgIH0KICAgIGlmKHR5cGVvZiBvYmo9PT0nb2JqZWN0JyAmJiBvYmouX19jbGFzc19fPT09dW5kZWZpbmVkKXsKICAgICAgICAvLyB0cmFuc2Zvcm0gSlMgb2JqZWN0IGludG8gYSBQeXRob24gZGljdAogICAgICAgIHZhciByZXMgPSBkaWN0KCkKICAgICAgICBmb3IodmFyIGF0dHIgaW4gb2JqKXsKICAgICAgICAgICAgZ2V0YXR0cihyZXMsJ19fc2V0aXRlbV9fJykoYXR0cixfcHkob2JqW2F0dHJdKSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlcwogICAgfQogICAgcmV0dXJuIEpTT2JqZWN0KG9iaikKfQpmdW5jdGlvbiBfanMob2JqKXsKICAgIC8vIG9iaiBpcyBhIFB5dGhvbiBvYmplY3QKICAgIGlmIChpc2luc3RhbmNlKG9iaixbaW50LHN0cl0pKXtyZXR1cm4gb2JqfQogICAgZWxzZSBpZihvYmo9PT1Ob25lKXtyZXR1cm4gbnVsbH0KICAgIGVsc2UgaWYob2JqPT09VHJ1ZSl7cmV0dXJuIHRydWV9CiAgICBlbHNlIGlmKG9iaj09PUZhbHNlKXtyZXR1cm4gZmFsc2V9CiAgICBlbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGZsb2F0KSl7cmV0dXJuIG9iai52YWx1ZX0KICAgIGVsc2UgaWYoaXNpbnN0YW5jZShvYmosW2xpc3QsdHVwbGVdKSl7CiAgICAgICAgdmFyIHJlcyA9IFtdCiAgICAgICAgZm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKyl7cmVzLnB1c2goX2pzKG9ialtpXSkpfQogICAgICAgIHJldHVybiByZXMKICAgIH1lbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGRpY3QpKXsKICAgICAgICB2YXIgcmVzID0gbmV3IE9iamVjdCgpCiAgICAgICAgZm9yKHZhciBpPTA7aTxvYmouJGtleXMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIHJlc1tfanMob2JqLiRrZXlzW2ldKV09X2pzKG9iai4kdmFsdWVzW2ldKQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzCiAgICB9ZWxzZXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3Ioc3RyKG9iaikrJyBpcyBub3QgSlNPTiBzZXJpYWxpemFibGUnKQogICAgfQp9CgokbW9kdWxlID0gIHsKCiAgICBsb2FkcyA6IGZ1bmN0aW9uKGpzb25fb2JqKXtyZXR1cm4gX3B5KEpTT04ucGFyc2UoanNvbl9vYmopKX0sCgogICAgZHVtcHMgOiBmdW5jdGlvbihvYmope3JldHVybiBKU09OLnN0cmluZ2lmeShfanMob2JqKSl9LAp9',
'/libs/math.js':'',
'/libs/random.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgcmFuZG9tOmZ1bmN0aW9uKCl7CiAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAwKXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3IoInJhbmRvbSgpIHRha2VzIG5vIGFyZ3VtZW50cyAoIithcmd1bWVudHMubGVuZ3RoKyIgZ2l2ZW4pIikKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmxvYXQoTWF0aC5yYW5kb20oKSk7CiAgICAgIH0KICAgIH0sCiAgICByYW5kaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGItYSsxKSthKSl9LAogICAgcmFuZHJhbmdlOmZ1bmN0aW9uKHN0YXJ0LHN0b3Asc3RlcCl7CiAgICAgIGlmKHN0ZXAgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHN0ZXA9MTsKICAgICAgfSBlbHNlIGlmKHN0ZXAgPT0gMCkgeyAKICAgICAgICAvL3JhaXNlIFZhbHVlRXJyb3IoInplcm8gc3RlcCBmb3IgcmFuZHJhbmdlKCkiKTsKICAgICAgfQoKICAgICAgaWYoc3RvcCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgIHN0b3A9c3RhcnQ7CiAgICAgICAgIHN0YXJ0PTA7CiAgICAgIH0KICAgICAgdmFyIHdpZHRoPXN0b3Atc3RhcnQ7CiAgICAgIGlmIChzdGVwPT0xICYmIHdpZHRoID4gMCkgewogICAgICAgIHJldHVybiBzdGFydCArIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqd2lkdGgpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyByYWlzZSBWYWx1ZUVycm9yKCJlbXB0eSByYW5nZSBmb3IgcmFuZHJhbmdlKCkgKCIrc3RhcnQrIiwiK3N0b3ArJywnK3N0ZXArJyknKTsKICAgICAgfQogICAgICAKICAgICAgdmFyIG47CiAgICAgIGlmIChzdGVwID4gMCkgewogICAgICAgICBuPU1hdGguZmxvb3IoKHdpZHRoK3N0ZXAtMSkvc3RlcCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgIG49TWF0aC5mbG9vcigod2lkdGgrc3RlcCsxKS9zdGVwKTsKICAgICAgfQogICAgICByZXR1cm4gc3RhcnQgKyBzdGVwKmludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbikpCiAgICAgIC8vcmV0dXJuIGludChNYXRoLnJhbmRvbSgpKihzdG9wL3N0ZXAtc3RhcnQvc3RlcCkqc3RlcCArIHN0YXJ0KQogICAgfSwKICAgIHNodWZmbGU6ZnVuY3Rpb24oeCwgcm5kKXsKICAgICAgaWYgKHgubGVuZ3RoIDw9IDEpIHsgcmV0dXJuIHh9CgogICAgICBpZiAocm5kID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgcm5kPU1hdGgucmFuZG9tCiAgICAgIH0KCiAgICAgIGZvcih2YXIgaiwgbywgaSA9IHgubGVuZ3RoOyBpOyBqID0gcGFyc2VJbnQocm5kKCkgKiBpKSwgbyA9IHhbLS1pXSwgeFtpXSA9IHhbal0sIHhbal0gPSBvKTsKICAgIH0KfQokbW9kdWxlLl9fY2xhc3NfXyA9ICRtb2R1bGUgLy8gZGVmaW5lZCBpbiAkcHlfdXRpbHMKJG1vZHVsZS5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ3JhbmRvbSc+In0K',
'/libs/re.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewogICAgb2JqID0ge19fY2xhc3NfXzokbW9kdWxlLAogICAgICAgIF9fc3RyX186IGZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdyZSc+In0KICAgIH0KICAgIG9iai5BID0gb2JqLkFTQ0lJID0gMjU2CiAgICBvYmouSSA9IG9iai5JR05PUkVDQVNFID0gJ2knCiAgICBvYmouTSA9IG9iai5NVUxUSUxJTkUgPSAnbScKICAgICRTUkVfUGF0dGVybkRpY3QgPSB7CiAgICAgICAgX19jbGFzc19fOiR0eXBlLAogICAgICAgIF9fbmFtZV9fOidTUkVfUGF0dGVybicKICAgIH0KICAgICRTUkVfUGF0dGVybkRpY3QubWF0Y2ggPSBmdW5jdGlvbihzZWxmLHN0cmluZyl7CiAgICAgICAgcmV0dXJuIG9iai5tYXRjaChzZWxmLnBhdHRlcm4sc3RyaW5nLHNlbGYuZmxhZ3MpCiAgICB9CiAgICAkU1JFX1BhdHRlcm5EaWN0LnNlYXJjaCA9IGZ1bmN0aW9uKHNlbGYsc3RyaW5nKXsKICAgICAgICByZXR1cm4gb2JqLm9iaihzZWxmLnBhdHRlcm4sc3RyaW5nLHNlbGYuZmxhZ3MpCiAgICB9CiAgICBvYmouY29tcGlsZSA9IGZ1bmN0aW9uKHBhdHRlcm4sZmxhZ3MpewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIF9fY2xhc3NfXzokU1JFX1BhdHRlcm5EaWN0LAogICAgICAgICAgICBwYXR0ZXJuOnBhdHRlcm4sCiAgICAgICAgICAgIGZsYWdzOmZsYWdzCiAgICAgICAgfQogICAgfQogICAgb2JqLmZpbmRhbGwgPSBmdW5jdGlvbihwYXR0ZXJuLHN0cmluZyxmbGFncyl7CiAgICAgICAgdmFyICRucz0kTWFrZUFyZ3MoJ3JlLnNlYXJjaCcsYXJndW1lbnRzLFsncGF0dGVybicsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKQogICAgICAgIHZhciBhcmdzID0gJG5zWydhcmdzJ10KICAgICAgICBpZihhcmdzLmxlbmd0aD4wKXt2YXIgZmxhZ3M9YXJnc1swXX0KICAgICAgICBlbHNle3ZhciBmbGFncyA9ICRuc1sna3cnXS5nZXQoJ2ZsYWdzJywnJyl9CiAgICAgICAgZmxhZ3MgKz0gJ2dtJwogICAgICAgIHZhciBqc3AgPSBuZXcgUmVnRXhwKHBhdHRlcm4sZmxhZ3MpCiAgICAgICAgdmFyIGpzbWF0Y2ggPSBzdHJpbmcubWF0Y2goanNwKQogICAgICAgIGlmKGpzbWF0Y2g9PT1udWxsKXtyZXR1cm4gW119CiAgICAgICAgcmV0dXJuIGpzbWF0Y2gKICAgIH0KICAgIG9iai5zZWFyY2ggPSBmdW5jdGlvbihwYXR0ZXJuLHN0cmluZyl7CiAgICAgICAgdmFyICRucz0kTWFrZUFyZ3MoJ3JlLnNlYXJjaCcsYXJndW1lbnRzLFsncGF0dGVybicsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKQogICAgICAgIHZhciBhcmdzID0gJG5zWydhcmdzJ10KICAgICAgICBpZihhcmdzLmxlbmd0aD4wKXt2YXIgZmxhZ3M9YXJnc1swXX0KICAgICAgICBlbHNle3ZhciBmbGFncyA9IGdldGF0dHIoJG5zWydrdyddLCdnZXQnKSgnZmxhZ3MnLCcnKX0KICAgICAgICB2YXIganNwID0gbmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKQogICAgICAgIHZhciBqc21hdGNoID0gc3RyaW5nLm1hdGNoKGpzcCkKICAgICAgICBpZihqc21hdGNoPT09bnVsbCl7cmV0dXJuIE5vbmV9CiAgICAgICAgdmFyIG1vID0gbmV3IE9iamVjdCgpCiAgICAgICAgbW8uZ3JvdXAgPSBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBpZihqc21hdGNoW2FyZ3VtZW50c1tpXV09PT11bmRlZmluZWQpe3Jlcy5wdXNoKE5vbmUpfQogICAgICAgICAgICAgICAgZWxzZXtyZXMucHVzaChqc21hdGNoW2FyZ3VtZW50c1tpXV0pfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGg9PT0xKXtyZXR1cm4gcmVzWzBdfQogICAgICAgICAgICByZXR1cm4gdHVwbGUocmVzKQogICAgICAgIH0KICAgICAgICBtby5ncm91cHMgPSBmdW5jdGlvbihfZGVmYXVsdCl7CiAgICAgICAgICAgIGlmKF9kZWZhdWx0PT09dW5kZWZpbmVkKXtfZGVmYXVsdD1Ob25lfQogICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgZm9yKHZhciBpPTE7aTxqc21hdGNoLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgaWYoanNtYXRjaFtpXT09PXVuZGVmaW5lZCl7cmVzLnB1c2goX2RlZmF1bHQpfQogICAgICAgICAgICAgICAgZWxzZXtyZXMucHVzaChqc21hdGNoW2ldKX0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHVwbGUocmVzKQogICAgICAgIH0KICAgICAgICBtby5zdGFydCA9IGZ1bmN0aW9uKCl7cmV0dXJuIGpzbWF0Y2guaW5kZXh9CiAgICAgICAgbW8uc3RyaW5nID0gc3RyaW5nCiAgICAgICAgcmV0dXJuIEpTT2JqZWN0KG1vKQogICAgfQogICAgb2JqLnN1YiA9IGZ1bmN0aW9uKHBhdHRlcm4scmVwbCxzdHJpbmcpewogICAgICAgIHZhciAkbnM9JE1ha2VBcmdzKCdyZS5zZWFyY2gnLGFyZ3VtZW50cyxbJ3BhdHRlcm4nLCdyZXBsJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpCiAgICAgICAgZm9yKCR2YXIgaW4gJG5zKXtldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIil9CiAgICAgICAgdmFyIGFyZ3MgPSAkbnNbJ2FyZ3MnXQogICAgICAgIHZhciBjb3VudCA9ICREaWN0RGljdC5nZXQoJG5zWydrdyddLCdjb3VudCcsMCkKICAgICAgICB2YXIgZmxhZ3MgPSAkRGljdERpY3QuZ2V0KCRuc1sna3cnXSwnZmxhZ3MnLCcnKQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjApe3ZhciBjb3VudD1hcmdzWzBdfQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjEpe3ZhciBmbGFncz1hcmdzWzFdfQogICAgICAgIGlmKHR5cGVvZiByZXBsPT09InN0cmluZyIpewogICAgICAgICAgICAvLyBiYWNrcmVmZXJlbmNlcyBhcmUgXDEsIFwyLi4uIGluIFB5dGhvbiBidXQgJDEsJDIuLi4gaW4gSmF2YXNjcmlwdAogICAgICAgICAgICByZXBsID0gcmVwbC5yZXBsYWNlKC9cXChcZCspL2csJyQkJDEnKQogICAgICAgIH1lbHNlIGlmKHR5cGVvZiByZXBsPT09ImZ1bmN0aW9uIil7CiAgICAgICAgICAgIC8vIHRoZSBhcmd1bWVudCBwYXNzZWQgdG8gdGhlIFB5dGhvbiBmdW5jdGlvbiBpcyB0aGUgbWF0Y2ggb2JqZWN0CiAgICAgICAgICAgIC8vIHRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBKYXZhc2NyaXB0IGZ1bmN0aW9uIGFyZSA6CiAgICAgICAgICAgIC8vIC0gdGhlIG1hdGNoZWQgc3Vic3RyaW5nCiAgICAgICAgICAgIC8vIC0gdGhlIG1hdGNoZWQgZ3JvdXBzCiAgICAgICAgICAgIC8vIC0gdGhlIG9mZnNldCBvZiB0aGUgbWF0Y2hlZCBzdWJzdHJpbmcgaW5zaWRlIHRoZSBzdHJpbmcKICAgICAgICAgICAgLy8gLSB0aGUgc3RyaW5nIGJlaW5nIGV4YW1pbmVkCiAgICAgICAgICAgIHZhciAkcmVwbDEgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIG1vID0gT2JqZWN0KCkKICAgICAgICAgICAgICAgIG1vLnN0cmluZyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdCiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0yXQogICAgICAgICAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgYXJndW1lbnRzWzBdLmxlbmd0aAogICAgICAgICAgICAgICAgbW8uc3RhcnQgPSBmdW5jdGlvbigpe3JldHVybiBzdGFydH0KICAgICAgICAgICAgICAgIG1vLmVuZCA9IGZ1bmN0aW9uKCl7cmV0dXJuIGVuZH0KICAgICAgICAgICAgICAgIGdyb3VwcyA9IFtdCiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGgtMjtpKyspe2dyb3Vwcy5wdXNoKGFyZ3VtZW50c1tpXSl9CiAgICAgICAgICAgICAgICBtby5ncm91cHMgPSBmdW5jdGlvbihfZGVmYXVsdCl7CiAgICAgICAgICAgICAgICAgICAgaWYoX2RlZmF1bHQ9PT11bmRlZmluZWQpe19kZWZhdWx0PU5vbmV9CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IFtdCiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxncm91cHMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGdyb3Vwc1tpXT09PXVuZGVmaW5lZCl7cmVzLnB1c2goX2RlZmF1bHQpfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNle3Jlcy5wdXNoKGdyb3Vwc1tpXSl9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXBsKEpTT2JqZWN0KG1vKSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZihjb3VudD09MCl7ZmxhZ3MrPSdnJ30KICAgICAgICB2YXIganNwID0gbmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKQogICAgICAgIGlmKHR5cGVvZiByZXBsPT09J2Z1bmN0aW9uJyl7cmV0dXJuIHN0cmluZy5yZXBsYWNlKGpzcCwkcmVwbDEpfQogICAgICAgIGVsc2V7cmV0dXJuIHN0cmluZy5yZXBsYWNlKGpzcCxyZXBsKX0KICAgIH0KICAgIG9iai5tYXRjaCA9IChmdW5jdGlvbihzZWFyY2hfZnVuYyl7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIC8vIG1hdGNoIGlzIGxpa2Ugc2VhcmNoIGJ1dCBwYXR0ZXJuIG11c3Qgc3RhcnQgd2l0aCBeCiAgICAgICAgICAgIHBhdHRlcm4gPSBhcmd1bWVudHNbMF0KICAgICAgICAgICAgaWYocGF0dGVybi5jaGFyQXQoMCkhPT0nXicpe3BhdHRlcm4gPSAnXicrcGF0dGVybn0KICAgICAgICAgICAgdmFyIGFyZ3MgPSBbcGF0dGVybl0KICAgICAgICAgICAgZm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJncy5wdXNoKGFyZ3VtZW50c1tpXSl9CiAgICAgICAgICAgIHJldHVybiBzZWFyY2hfZnVuYy5hcHBseShudWxsLGFyZ3MpCiAgICAgICAgfQogICAgfSkob2JqLnNlYXJjaCkKCiAgICByZXR1cm4gb2JqCn0KKSgp',
'/libs/svg.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewoKJHN2Z05TID0gImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgokeGxpbmtOUyA9ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIgoKZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXsKICAgIC8vIHJlcHJlc2VudHMgYW4gU1ZHIHRhZwogICAgdmFyICRpID0gbnVsbAogICAgdmFyICRvYmogPSB0aGlzCiAgICB2YXIgb2JqID0gJERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCRzdmdOUyx0YWdfbmFtZSkpCiAgICBpZihhcmdzIT11bmRlZmluZWQgJiYgYXJncy5sZW5ndGg+MCl7CiAgICAgICAgJHN0YXJ0ID0gMAogICAgICAgICRmaXJzdCA9IGFyZ3NbMF0KICAgICAgICAvLyBpZiBmaXJzdCBhcmd1bWVudCBpcyBub3QgYSBrZXl3b3JkLCBpdCdzIHRoZSB0YWcgY29udGVudAogICAgICAgIGlmKCRmaXJzdC5fX2NsYXNzX18hPT0kS3cpewogICAgICAgICAgICAkc3RhcnQgPSAxCiAgICAgICAgICAgIGlmKGlzaW5zdGFuY2UoJGZpcnN0LFtzdHIsaW50LGZsb2F0XSkpewogICAgICAgICAgICAgICAgdHh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKCRmaXJzdCkpCiAgICAgICAgICAgICAgICBvYmouZWx0LmFwcGVuZENoaWxkKHR4dCkKICAgICAgICAgICAgfSBlbHNlIGlmKCRmaXJzdC5fX2NsYXNzX189PT0kVGFnU3VtRGljdCl7CiAgICAgICAgICAgICAgICBmb3IoJGk9MDskaTwkZmlyc3QuY2hpbGRyZW4ubGVuZ3RoOyRpKyspewogICAgICAgICAgICAgICAgICAgIG9iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmNoaWxkcmVuWyRpXSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRyeXtvYmouZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5lbHQpfQogICAgICAgICAgICAgICAgY2F0Y2goZXJyKXskcmFpc2UoJ1ZhbHVlRXJyb3InLCd3cm9uZyBlbGVtZW50ICcrJGZpcnN0KX0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyBhdHRyaWJ1dGVzCiAgICAgICAgZm9yKCRpPSRzdGFydDskaTxhcmdzLmxlbmd0aDskaSsrKXsKICAgICAgICAgICAgLy8ga2V5d29yZCBhcmd1bWVudHMKICAgICAgICAgICAgJGFyZyA9IGFyZ3NbJGldCiAgICAgICAgICAgIGlmKCRhcmcgJiYgJGFyZy5fX2NsYXNzX189PT0kS3cpewogICAgICAgICAgICAgICAgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PSJvbiIpeyAvLyBldmVudHMKICAgICAgICAgICAgICAgICAgICBldmFsKCdET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCk9PSJzdHlsZSIpewogICAgICAgICAgICAgICAgICAgIERPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigiaHJlZiIpICE9PSAtMSl7IC8vIHhsaW5rOmhyZWYKICAgICAgICAgICAgICAgICAgICBvYmouZWx0LnNldEF0dHJpYnV0ZU5TKCAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsImhyZWYiLCRhcmcudmFsdWUpCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmKCRhcmcudmFsdWUhPT1mYWxzZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9wdGlvbi5zZWxlY3RlZD1mYWxzZSBzZXRzIGl0IHRvIHRydWUgOi0pCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5lbHQuc2V0QXR0cmlidXRlTlMobnVsbCwkYXJnLm5hbWUucmVwbGFjZSgnXycsJy0nKSwkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBvYmoKfQoKLy8gU1ZHCnZhciAkc3ZnX3RhZ3MgPSBbJ2EnLAonYWx0R2x5cGgnLAonYWx0R2x5cGhEZWYnLAonYWx0R2x5cGhJdGVtJywKJ2FuaW1hdGUnLAonYW5pbWF0ZUNvbG9yJywKJ2FuaW1hdGVNb3Rpb24nLAonYW5pbWF0ZVRyYW5zZm9ybScsCidjaXJjbGUnLAonY2xpcFBhdGgnLAonY29sb3JfcHJvZmlsZScsIC8vIGluc3RlYWQgb2YgY29sb3ItcHJvZmlsZQonY3Vyc29yJywKJ2RlZnMnLAonZGVzYycsCidlbGxpcHNlJywKJ2ZlQmxlbmQnLAonZycsCidpbWFnZScsCidsaW5lJywKJ2xpbmVhckdyYWRpZW50JywKJ21hcmtlcicsCidtYXNrJywKJ3BhdGgnLAoncGF0dGVybicsCidwb2x5Z29uJywKJ3BvbHlsaW5lJywKJ3JhZGlhbEdyYWRpZW50JywKJ3JlY3QnLAonc3RvcCcsCidzdmcnLAondGV4dCcsCid0cmVmJywKJ3RzcGFuJywKJ3VzZSddCgokc3ZnID0gZnVuY3Rpb24oKXtyZXR1cm4gJFNWR1RhZygnWCcsYXJndW1lbnRzKX0KJHN2ZyArPSAnJyAvLyBzb3VyY2UgY29kZQoKdmFyIG9iaiA9IG5ldyBPYmplY3QoKQpmb3IodmFyIGk9MDtpPCRzdmdfdGFncy5sZW5ndGg7aSsrKXsKICAgIHZhciB0YWcgPSAkc3ZnX3RhZ3NbaV0KICAgIGV2YWwoJ29iai4nK3RhZysnPScrJHN2Zy5yZXBsYWNlKCdYJyx0YWcpKQp9Cm9iai5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdfQpyZXR1cm4gb2JqCn0pKCk=',
'/libs/time.js':'JG1vZHVsZSA9ICB7CgogICAgX19nZXRhdHRyX18gOiBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0sCiAgICAKICAgIF9fbmFtZV9fIDogJ3RpbWUnLAoKICAgIGNsZWFyX2ludGVydmFsIDogZnVuY3Rpb24oaW50X2lkKXt3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRfaWQpfSwKICAgIAogICAgY2xlYXJfdGltZW91dCA6IGZ1bmN0aW9uKHRpbWVvdXRfaWQpe3dpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dF9pZCl9LAoKICAgIGN0aW1lOiBmdW5jdGlvbih0aW1lc3RhbXApewogICAgICAgaWYgKHRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB0aW1lc3RhbXA9aW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDApOwogICAgICAgfQogICAgICAgdmFyIGQ9bmV3IERhdGUoMCk7ICAKICAgICAgIGQuc2V0VVRDU2Vjb25kcyh0aW1lc3RhbXApOwogICAgICAgcmV0dXJuIGQudG9VVENTdHJpbmcoKTsKICAgIH0sCiAgICBnbXRpbWU6IGZ1bmN0aW9uKCl7CiAgICAgICB2YXIgZD1uZXcgRGF0ZSgpOwogICAgICAgcmV0dXJuIGxpc3QoW2QuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKzEsIGQuZ2V0RGF0ZSgpLCBkLmdldEhvdXJzKCksCiAgICAgICAgICAgICAgICAgICAgZC5nZXRNaW51dGVzKCksIGQuZ2V0U2Vjb25kcygpLCBkLmdldERheSgpLCAwLCAwXSkKICAgIH0sCiAgICBwZXJmX2NvdW50ZXI6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBmbG9hdCgobmV3IERhdGUoKSkuZ2V0VGltZSgpLzEwMDAuMCk7CiAgICB9LAogICAgCiAgICBzZXRfaW50ZXJ2YWwgOiBmdW5jdGlvbihmdW5jLGludGVydmFsKXsKICAgICAgICByZXR1cm4gaW50KHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jLGludGVydmFsKSkKICAgIH0sCgogICAgc2V0X3RpbWVvdXQgOiBmdW5jdGlvbihmdW5jLGludGVydmFsKXt3aW5kb3cuc2V0VGltZW91dChmdW5jLGludGVydmFsKX0sCgogICAgbG9jYWx0aW1lIDogZnVuY3Rpb24oc2Vjcyl7IAogICAgICAgdmFyIGQ9bmV3IERhdGUoKTsKICAgICAgIGlmIChzZWNzID09PSB1bmRlZmluZWQgfHwgc2VjcyA9PT0gTm9uZSkge3JldHVybiBkLmdldFRpbWUoKX0KCiAgICAgICAvLyBjYWxjdWxhdGUgaWYgd2UgYXJlIGluIGRheWxpZ2h0IHNhdmluZ3MgdGltZSBvciBub3QuCiAgICAgICAvLyBib3Jyb3dlZCBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTE4ODc5MzQvY2hlY2staWYtZGF5bGlnaHQtc2F2aW5nLXRpbWUtaXMtaW4tZWZmZWN0LWFuZC1pZi1pdC1pcy1mb3ItaG93LW1hbnktaG91cnMKICAgICAgIHZhciBqYW4gPSBuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIDAsIDEpOwogICAgICAgdmFyIGp1bCA9IG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgNiwgMSk7CiAgICAgICB2YXIgZHN0PWludChkLmdldFRpbWV6b25lT2Zmc2V0KCkgPCBNYXRoLm1heChqYW4uZ2V0VGltZXpvbmVPZmZzZXQoKSwganVsLmdldFRpbWV6b25lT2Zmc2V0KCkpKTsKCiAgICAgICByZXR1cm4gbGlzdChbZC5nZXRGdWxsWWVhcigpLCBkLmdldE1vbnRoKCkrMSwgZC5nZXREYXRlKCksIGQuZ2V0SG91cnMoKSwKICAgICAgICAgICAgICAgICAgICBkLmdldE1pbnV0ZXMoKSwgZC5nZXRTZWNvbmRzKCksIGQuZ2V0RGF5KCksIDAsIGRzdF0pCiAgICAgICAvL2ZpeG1lICAoc2Vjb25kIHRvIGxhc3QgdmFsdWUgaXMgMCB3aGljaCBpcyB0aGUgbnVtYmVyIG9mIGRheXMgaW4gdGhpcyB5ZWFyLi4pCiAgICB9LAogICAgdGltZSA6IGZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KChuZXcgRGF0ZSgpLmdldFRpbWUoKSkvMTAwMCl9LAogICAgCiAgICBzdHJmdGltZSA6IGZ1bmN0aW9uKGZvcm1hdCxhcmcpewogICAgICAgIGZ1bmN0aW9uIG5zKGFyZyxuYil7CiAgICAgICAgICAgIC8vIGxlZnQgcGFkZGluZyB3aXRoIDAKICAgICAgICAgICAgdmFyIHJlcyA9IGFyZy50b1N0cmluZygpCiAgICAgICAgICAgIHdoaWxlKHJlcy5sZW5ndGg8bmIpe3JlcyA9ICcwJytyZXN9CiAgICAgICAgICAgIHJldHVybiByZXMKICAgICAgICB9CiAgICAgICAgaWYoYXJnKXsKICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyBEYXRlKGFyZ1swXSxhcmdbMV0tMSxhcmdbMl0sYXJnWzNdLGFyZ1s0XSxhcmdbNV0sYXJnWzZdKQogICAgICAgIH1lbHNlewogICAgICAgICAgICB2YXIgb2JqPW5ldyBEYXRlKCkKICAgICAgICB9CiAgICAgICAgdmFyIGFiYl93ZWVrZGF5cyA9IFsnU3UnLCdNbycsJ1R1JywnV2UnLCdUaCcsJ0ZyJywnU2EnXQogICAgICAgIHZhciBmdWxsX3dlZWtkYXlzID0gWydTdW5kYXknLCdNb25kYXknLCdUdWVzZGF5JywnV2VkbmVzZGF5JywKICAgICAgICAgICAgJ1RodXJzZGF5JywnRnJpZGF5JywnU2F0dXJkYXknXQogICAgICAgIHZhciBhYmJfbW9udGhzID0gWydKYW4nLCdGZWInLCdNYXInLCdBcHInLCdNYXknLCdKdW4nLAogICAgICAgICAgICAnSnVsJywnQXVnJywnU2VwJywnT2N0JywnTm92JywnRGVjJ10KICAgICAgICB2YXIgZnVsbF9tb250aHMgPSBbJ0phbnVhcnknLCdGZWJydWFyeScsJ01hcmNoJywnQXByaWwnLCdNYXknLCdKdW5lJywKICAgICAgICAgICAgJ0p1bHknLCdBdWd1c3QnLCdTZXB0ZW1iZXInLCdPY3RvYmVyJywnTm92ZW1iZXInLCdEZWNlbWJlciddCiAgICAgICAgdmFyIHJlcyA9IGZvcm1hdAogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lSC8sbnMob2JqLmdldEhvdXJzKCksMikpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVNLyxucyhvYmouZ2V0TWludXRlcygpLDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lUy8sbnMob2JqLmdldFNlY29uZHMoKSwyKSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJVkvLG5zKG9iai5nZXRGdWxsWWVhcigpLDQpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8leS8sbnMob2JqLmdldEZ1bGxZZWFyKCksNCkuc3Vic3RyKDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lbS8sbnMob2JqLmdldE1vbnRoKCkrMSwyKSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJWQvLG5zKG9iai5nZXREYXRlKCksMikpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVhLyxhYmJfd2Vla2RheXNbb2JqLmdldERheSgpXSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJUEvLGZ1bGxfd2Vla2RheXNbb2JqLmdldERheSgpXSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJWIvLGFiYl9tb250aHNbb2JqLmdldE1vbnRoKCldKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lQi8sZnVsbF9tb250aHNbb2JqLmdldE1vbnRoKCldKQogICAgICAgIHJldHVybiByZXMKICAgIH0sCiAgICAKICAgIHN0cnVjdF90aW1lIDogZnVuY3Rpb24oYXJnKXsKICAgICAgICBpZighaXNpbnN0YW5jZShhcmcsW3R1cGxlLGxpc3RdKSl7CiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcignY29uc3RydWN0b3IgcmVxdWlyZXMgYSBzZXF1ZW5jZScpCiAgICAgICAgfQogICAgICAgIGlmKGxlbihhcmcpIT05KXsKICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCJ0aW1lLnN0cnVjdF90aW1lKCkgdGFrZXMgYSA5LXNlcXVlbmNlICgiK2xlbihhcmcpKyItc2VxdWVuY2UgZ2l2ZW4iKQogICAgICAgIH0KICAgICAgICB2YXIgcmVzID0gYXJnCiAgICAgICAgdmFyIG5hbWVzID0gWyd0bV95ZWFyJywndG1fbW9uJywndG1fbWRheScsJ3RtX2hvdXInLCd0bV9taW4nLCd0bV9zZWMnLCd0bV93ZGF5JywKICAgICAgICAgICAgJ3RtX3lkYXknLCd0bV9pc2RzdCcsJ3RtX3pvbmUnLCd0bV9nbXRvZmYnXQogICAgICAgIHJlcy5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpewogICAgICAgICAgICB2YXIgaXggPSBuYW1lcy5pbmRleE9mKGF0dHIpCiAgICAgICAgICAgIGlmKGl4Pi0xKXtyZXR1cm4gYXJnLl9fZ2V0aXRlbV9fKGl4KX0KICAgICAgICAgICAgaWYodHlwZW9mIHJlc1thdHRyXT09PSdmdW5jdGlvbicpewogICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbihvYmopewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe3JldHVybiBvYmpbYXR0cl0uYXBwbHkob2JqLGFyZ3VtZW50cyl9CiAgICAgICAgICAgICAgICB9KShyZXMpCiAgICAgICAgICAgIH1lbHNlIGlmKHJlc1thdHRyXSE9PXVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzW2F0dHJdCiAgICAgICAgICAgIH1lbHNle3Rocm93IEF0dHJpYnV0ZUVycm9yKCJvYmplY3QgaGFzIG5vIGF0dHJpYnV0ZSAnIithdHRyKyInIil9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXMKICAgIH0KfQo=',
'/libs/websocket.js':'Ly8gd2Vic29ja2V0CiRtb2R1bGUgPSAoZnVuY3Rpb24oKXsKCiRXZWJTb2NrZXREaWN0ID0gewogICAgX19jbGFzc19fIDogJHR5cGUsCiAgICBfX25hbWVfXzonV2ViU29ja2V0Jwp9CgokV2ViU29ja2V0RGljdC5iaW5kID0gZnVuY3Rpb24oc2VsZixldmVudCxjYWxsYmFjayl7CiAgICBzZWxmLiR3c1snb24nK2V2ZW50XSA9IGNhbGxiYWNrCn0KCiRXZWJTb2NrZXREaWN0LnNlbmQgPSBmdW5jdGlvbihzZWxmLGRhdGEpewogICAgc2VsZi4kd3Muc2VuZChkYXRhKQp9CiAgICAKJFdlYlNvY2tldERpY3QuY2xvc2UgPSBmdW5jdGlvbihzZWxmKXsKICAgIHNlbGYuJHdzLmNsb3NlKCkKfQoKJFdlYlNvY2tldERpY3QuX19tcm9fXyA9IFskV2ViU29ja2V0RGljdCwkT2JqZWN0RGljdF0KCmZ1bmN0aW9uIHdlYnNvY2tldChob3N0KXsKICAgIHZhciAkc29ja2V0ID0gbmV3IFdlYlNvY2tldChob3N0KTsKICAgIHZhciByZXMgPSB7CiAgICAgICAgX19jbGFzc19fOiRXZWJTb2NrZXREaWN0LAogICAgICAgICR3cyA6ICRzb2NrZXQKICAgIH0KICAgIHJlcy4kd2Vic29ja2V0ID0gJHNvY2tldAogICAgcmV0dXJuIHJlcwp9CndlYnNvY2tldC5fX2NsYXNzX18gPSAkZmFjdG9yeQp3ZWJzb2NrZXQuJGRpY3QgPSAkV2ViU29ja2V0RGljdAoKcmV0dXJuIHt3ZWJzb2NrZXQ6d2Vic29ja2V0fQoKfSkoKQ==',
'/libs/_browser.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgYWxlcnQ6IGZ1bmN0aW9uKG1lc3NhZ2Upe3dpbmRvdy5hbGVydChtZXNzYWdlKX0sCiAgICBjb25maXJtOiBmdW5jdGlvbihtZXNzYWdlKXtyZXR1cm4gSlNPYmplY3Qod2luZG93LmNvbmZpcm0obWVzc2FnZSkpfSwKICAgIGRvYzogJERPTU5vZGUoZG9jdW1lbnQpLCAgIC8vd2FudCB0byB1c2UgZG9jdW1lbnQgaW5zdGVhZCBvZiBkb2MKICAgIG1vdXNlQ29vcmRzOiBmdW5jdGlvbihldil7cmV0dXJuIEpTT2JqZWN0KCRtb3VzZUNvb3JkcyhldikpfSwKICAgIHByb21wdDogZnVuY3Rpb24obWVzc2FnZSwgZGVmYXVsdF92YWx1ZSl7cmV0dXJuIEpTT2JqZWN0KHdpbmRvdy5wcm9tcHQobWVzc2FnZSwgZGVmYXVsdF92YWx1ZSkpfSwKICAgIHdpbjogSlNPYmplY3Qod2luZG93KSAgICAgLy93YW50IHRvIHVzZSB3aW5kb3cgaW5zdGVhZCBvZiB3aW4KfQokbW9kdWxlLl9fY2xhc3NfXyA9ICRtb2R1bGUgLy8gZGVmaW5lZCBpbiAkcHlfdXRpbHMKJG1vZHVsZS5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ2Jyb3dzZXInPiJ9Cg==',
'/libs/_os.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgcmFuZG9tOmZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpfSwKICAgIHJhbmRpbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooYi1hKSthKSl9Cn0KJG1vZHVsZS5fX2NsYXNzX18gPSAkbW9kdWxlIC8vIGRlZmluZWQgaW4gJHB5X3V0aWxzCiRtb2R1bGUuX19zdHJfXyA9IGZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdfb3MnPiJ9Cg==',
'/libs/crypto_js/rollups/md5.js':'',
'/libs/crypto_js/rollups/sha1.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGUsbSl7dmFyIHA9e30saj1wLmxpYj17fSxsPWZ1bmN0aW9uKCl7fSxmPWouQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2wucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGw7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApuPWouV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bT9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxoKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxiPTA7YjxhO2IrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZS5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IG4uaW5pdChjLGEpfX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYi5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGI9W10sZD0wO2Q8YztkKz0yKWJbZD4+PjNdfD1wYXJzZUludChhLnN1YnN0cihkLAoyKSwxNik8PDI0LTQqKGQlOCk7cmV0dXJuIG5ldyBuLmluaXQoYixjLzIpfX0sZz1iLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyliLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2Q+Pj4yXT4+PjI0LTgqKGQlNCkmMjU1KSk7cmV0dXJuIGIuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKX19LHI9Yi5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGcuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGcucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKaz1qLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgbi5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXIucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZH1yZXR1cm4gbmV3IG4uaW5pdChnLGQpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtqLkhhc2hlcj1rLmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuKG5ldyBhLmluaXQoYikpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsZil7cmV0dXJuKG5ldyBzLkhNQUMuaW5pdChhLApmKSkuZmluYWxpemUoYil9fX0pO3ZhciBzPXAuYWxnbz17fTtyZXR1cm4gcH0oTWF0aCk7CihmdW5jdGlvbigpe3ZhciBlPUNyeXB0b0pTLG09ZS5saWIscD1tLldvcmRBcnJheSxqPW0uSGFzaGVyLGw9W10sbT1lLmFsZ28uU0hBMT1qLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBwLmluaXQoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihmLG4pe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGg9YlswXSxnPWJbMV0sZT1iWzJdLGs9YlszXSxqPWJbNF0sYT0wOzgwPmE7YSsrKXtpZigxNj5hKWxbYV09ZltuK2FdfDA7ZWxzZXt2YXIgYz1sW2EtM11ebFthLThdXmxbYS0xNF1ebFthLTE2XTtsW2FdPWM8PDF8Yz4+PjMxfWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXgprKS04OTk0OTc1MTQpO2o9aztrPWU7ZT1nPDwzMHxnPj4+MjtnPWg7aD1jfWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj10aGlzLl9kYXRhLGU9Zi53b3JkcyxiPTgqdGhpcy5fbkRhdGFCeXRlcyxoPTgqZi5zaWdCeXRlcztlW2g+Pj41XXw9MTI4PDwyNC1oJTMyO2VbKGgrNjQ+Pj45PDw0KSsxNF09TWF0aC5mbG9vcihiLzQyOTQ5NjcyOTYpO2VbKGgrNjQ+Pj45PDw0KSsxNV09YjtmLnNpZ0J5dGVzPTQqZS5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBlPWouY2xvbmUuY2FsbCh0aGlzKTtlLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gZX19KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha224.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGcsbCl7dmFyIGY9e30saz1mLmxpYj17fSxoPWZ1bmN0aW9uKCl7fSxtPWsuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2gucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGg7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApxPWsuV29yZEFycmF5PW0uZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bD9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxzKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhO2QrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZy5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHEuaW5pdChjLGEpfX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gZC5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9W10sYj0wO2I8YztiKz0yKWRbYj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihiLAoyKSwxNik8PDI0LTQqKGIlOCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjLzIpfX0sbj10LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKylkLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2I+Pj4yXT4+PjI0LTgqKGIlNCkmMjU1KSk7cmV0dXJuIGQuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKX19LGo9dC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKG4uc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG4ucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdz1rLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09bS5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcS5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPWoucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yn1yZXR1cm4gbmV3IHEuaW5pdCh1LGIpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtrLkhhc2hlcj13LmV4dGVuZCh7Y2ZnOm0uZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyBhLmluaXQoZCkpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyB2LkhNQUMuaW5pdChhLApkKSkuZmluYWxpemUoYyl9fX0pO3ZhciB2PWYuYWxnbz17fTtyZXR1cm4gZn0oTWF0aCk7CihmdW5jdGlvbihnKXtmb3IodmFyIGw9Q3J5cHRvSlMsZj1sLmxpYixrPWYuV29yZEFycmF5LGg9Zi5IYXNoZXIsZj1sLmFsZ28sbT1bXSxxPVtdLHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIDQyOTQ5NjcyOTYqKGEtKGF8MCkpfDB9LHM9MixuPTA7NjQ+bjspe3ZhciBqO2E6e2o9cztmb3IodmFyIHc9Zy5zcXJ0KGopLHY9Mjt2PD13O3YrKylpZighKGoldikpe2o9ITE7YnJlYWsgYX1qPSEwfWomJig4Pm4mJihtW25dPXQoZy5wb3cocywwLjUpKSkscVtuXT10KGcucG93KHMsMS8zKSksbisrKTtzKyt9dmFyIGE9W10sZj1mLlNIQTI1Nj1oLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBrLmluaXQobS5zbGljZSgwKSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09CmNbZCtwXXwwO2Vsc2V7dmFyIGo9YVtwLTE1XSxyPWFbcC0yXTthW3BdPSgoajw8MjV8aj4+PjcpXihqPDwxNHxqPj4+MTgpXmo+Pj4zKSthW3AtN10rKChyPDwxNXxyPj4+MTcpXihyPDwxM3xyPj4+MTkpXnI+Pj4xMCkrYVtwLTE2XX1qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDB9YlswXT1iWzBdK2V8MDtiWzFdPWJbMV0rZnwwO2JbMl09YlsyXStnfDA7YlszXT1iWzNdK2t8MDtiWzRdPWJbNF0raHwwO2JbNV09Yls1XStsfDA7Yls2XT1iWzZdK218MDtiWzddPWJbN10rbnwwfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGI9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzOwpkW2U+Pj41XXw9MTI4PDwyNC1lJTMyO2RbKGUrNjQ+Pj45PDw0KSsxNF09Zy5mbG9vcihiLzQyOTQ5NjcyOTYpO2RbKGUrNjQ+Pj45PDw0KSsxNV09YjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWguY2xvbmUuY2FsbCh0aGlzKTthLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYX19KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZil9KShNYXRoKTsKKGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBmPWsuX2RvRmluYWxpemUuY2FsbCh0aGlzKTtmLnNpZ0J5dGVzLT00O3JldHVybiBmfX0pO2cuU0hBMjI0PWsuX2NyZWF0ZUhlbHBlcihmKTtnLkhtYWNTSEEyMjQ9ay5fY3JlYXRlSG1hY0hlbHBlcihmKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha3.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKHYscCl7dmFyIGQ9e30sdT1kLmxpYj17fSxyPWZ1bmN0aW9uKCl7fSxmPXUuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe3IucHJvdG90eXBlPXRoaXM7dmFyIGI9bmV3IHI7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2IuaW5pdC5wcm90b3R5cGU9YjtiLiRzdXBlcj10aGlzO3JldHVybiBifSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApzPXUuV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYil7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YiE9cD9iOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHx5KS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGI9dGhpcy5zaWdCeXRlczthW2I+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTA7YzxhO2MrPTQpYi5wdXNoKDQyOTQ5NjcyOTYqdi5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHMuaW5pdChiLGEpfX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYy5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoLGM9W10saj0wO2o8YjtqKz0yKWNbaj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihqLAoyKSwxNik8PDI0LTQqKGolOCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiLzIpfX0sZT14LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyljLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShiW2o+Pj4yXT4+PjI0LTgqKGolNCkmMjU1KSk7cmV0dXJuIGMuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKX19LHE9eC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGUuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYil7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGUucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdD11LkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcy5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXEucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09an1yZXR1cm4gbmV3IHMuaW5pdChmLGopfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTt1Lkhhc2hlcj10LmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyBhLmluaXQoYykpLmZpbmFsaXplKGIpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyB3LkhNQUMuaW5pdChhLApjKSkuZmluYWxpemUoYil9fX0pO3ZhciB3PWQuYWxnbz17fTtyZXR1cm4gZH0oTWF0aCk7CihmdW5jdGlvbih2KXt2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5CYXNlLHI9ZC5Xb3JkQXJyYXkscD1wLng2ND17fTtwLldvcmQ9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXt0aGlzLmhpZ2g9Zjt0aGlzLmxvdz1zfX0pO3AuV29yZEFycmF5PXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7Zj10aGlzLndvcmRzPWZ8fFtdO3RoaXMuc2lnQnl0ZXM9cyE9dj9zOjgqZi5sZW5ndGh9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyl9cmV0dXJuIHIuY3JlYXRlKGQsdGhpcy5zaWdCeXRlcyl9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXUuY2xvbmUuY2FsbCh0aGlzKSxkPWYud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKSxwPWQubGVuZ3RoLHI9MDtyPHA7cisrKWRbcl09ZFtyXS5jbG9uZSgpO3JldHVybiBmfX0pfSkoKTsKKGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13fWZvcihlPTA7NT5lO2UrKylmb3IocT0wOzU+cTtxKyspeFtlKzUqcV09cSs1KigoMiplKzMqcSklNSk7ZT0xO2ZvcihxPTA7MjQ+cTtxKyspe2Zvcih2YXIgYT13PXQ9MDs3PmE7YSsrKXtpZihlJjEpe3ZhciBiPSgxPDxhKS0xOzMyPmI/d149MTw8Yjp0Xj0xPDxiLTMyfWU9ZSYxMjg/ZTw8MV4xMTM6ZTw8MX15W3FdPWYuY3JlYXRlKHQsdyl9Zm9yKHZhciBjPVtdLGU9MDsyNT5lO2UrKyljW2VdPWYuY3JlYXRlKCk7ZD1kLlNIQTM9ci5leHRlbmQoe2NmZzpyLmNmZy5leHRlbmQoe291dHB1dExlbmd0aDo1MTJ9KSxfZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl9zdGF0ZT0KW10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdDt0aGlzLmJsb2NrU2l6ZT0oMTYwMC0yKnRoaXMuY2ZnLm91dHB1dExlbmd0aCkvMzJ9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bH1mb3IoZj0wOzI0PmY7ZisrKXtmb3IoaD0wOzU+aDtoKyspe2Zvcih2YXIgZD1sPTAsaz0wOzU+aztrKyspZz1lW2grNSprXSxsXj1nLmhpZ2gsZF49Zy5sb3c7Zz1jW2hdO2cuaGlnaD1sO2cubG93PWR9Zm9yKGg9MDs1Pmg7aCsrKXtnPWNbKGgrNCklNV07bD1jWyhoKzEpJTVdO209bC5oaWdoO2s9bC5sb3c7bD1nLmhpZ2heCihtPDwxfGs+Pj4zMSk7ZD1nLmxvd14oazw8MXxtPj4+MzEpO2ZvcihrPTA7NT5rO2srKylnPWVbaCs1KmtdLGcuaGlnaF49bCxnLmxvd149ZH1mb3IobT0xOzI1Pm07bSsrKWc9ZVttXSxoPWcuaGlnaCxnPWcubG93LGs9c1ttXSwzMj5rPyhsPWg8PGt8Zz4+PjMyLWssZD1nPDxrfGg+Pj4zMi1rKToobD1nPDxrLTMyfGg+Pj42NC1rLGQ9aDw8ay0zMnxnPj4+NjQtayksZz1jW3hbbV1dLGcuaGlnaD1sLGcubG93PWQ7Zz1jWzBdO2g9ZVswXTtnLmhpZ2g9aC5oaWdoO2cubG93PWgubG93O2ZvcihoPTA7NT5oO2grKylmb3Ioaz0wOzU+aztrKyspbT1oKzUqayxnPWVbbV0sbD1jW21dLG09Y1soaCsxKSU1KzUqa10sZD1jWyhoKzIpJTUrNSprXSxnLmhpZ2g9bC5oaWdoXn5tLmhpZ2gmZC5oaWdoLGcubG93PWwubG93Xn5tLmxvdyZkLmxvdztnPWVbMF07aD15W2ZdO2cuaGlnaF49aC5oaWdoO2cubG93Xj1oLmxvd319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSwKYj1hLndvcmRzLGM9OCphLnNpZ0J5dGVzLGU9MzIqdGhpcy5ibG9ja1NpemU7YltjPj4+NV18PTE8PDI0LWMlMzI7Ylsodi5jZWlsKChjKzEpL2UpKmU+Pj41KS0xXXw9MTI4O2Euc2lnQnl0ZXM9NCpiLmxlbmd0aDt0aGlzLl9wcm9jZXNzKCk7Zm9yKHZhciBhPXRoaXMuX3N0YXRlLGI9dGhpcy5jZmcub3V0cHV0TGVuZ3RoLzgsYz1iLzgsZT1bXSxoPTA7aDxjO2grKyl7dmFyIGQ9YVtoXSxmPWQuaGlnaCxkPWQubG93LGY9KGY8PDh8Zj4+PjI0KSYxNjcxMTkzNXwoZjw8MjR8Zj4+PjgpJjQyNzgyNTUzNjAsZD0oZDw8OHxkPj4+MjQpJjE2NzExOTM1fChkPDwyNHxkPj4+OCkmNDI3ODI1NTM2MDtlLnB1c2goZCk7ZS5wdXNoKGYpfXJldHVybiBuZXcgdS5pbml0KGUsYil9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXIuY2xvbmUuY2FsbCh0aGlzKSxiPWEuX3N0YXRlPXRoaXMuX3N0YXRlLnNsaWNlKDApLGM9MDsyNT5jO2MrKyliW2NdPWJbY10uY2xvbmUoKTtyZXR1cm4gYX19KTsKcC5TSEEzPXIuX2NyZWF0ZUhlbHBlcihkKTtwLkhtYWNTSEEzPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZCl9KShNYXRoKTsK',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/sha512.js':'',
'/Lib/antigravity.py':'aW1wb3J0IHdlYmJyb3dzZXIKaW1wb3J0IGhhc2hsaWIKCndlYmJyb3dzZXIub3BlbigiaHR0cDovL3hrY2QuY29tLzM1My8iKQoKZGVmIGdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgZGF0ZWRvdyk6CiAgICAnJydDb21wdXRlIGdlb2hhc2goKSB1c2luZyB0aGUgTXVucm9lIGFsZ29yaXRobS4KCiAgICA+Pj4gZ2VvaGFzaCgzNy40MjE1NDIsIC0xMjIuMDg1NTg5LCBiJzIwMDUtMDUtMjYtMTA0NTguNjgnKQogICAgMzcuODU3NzEzIC0xMjIuNTQ0NTQzCgogICAgJycnCiAgICAjIGh0dHA6Ly94a2NkLmNvbS80MjYvCiAgICBoID0gaGFzaGxpYi5tZDUoZGF0ZWRvdykuaGV4ZGlnZXN0KCkKICAgIHAsIHEgPSBbKCclZicgJSBmbG9hdC5mcm9taGV4KCcwLicgKyB4KSkgZm9yIHggaW4gKGhbOjE2XSwgaFsxNjozMl0pXQogICAgcHJpbnQoJyVkJXMgJWQlcycgJSAobGF0aXR1ZGUsIHBbMTpdLCBsb25naXR1ZGUsIHFbMTpdKSkK',
'/Lib/bisect.py':'IiIiQmlzZWN0aW9uIGFsZ29yaXRobXMuIiIiCgpkZWYgaW5zb3J0X3JpZ2h0KGEsIHgsIGxvPTAsIGhpPU5vbmUpOgogICAgIiIiSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBJZiB4IGlzIGFscmVhZHkgaW4gYSwgaW5zZXJ0IGl0IHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgeCA8IGFbbWlkXTogaGkgPSBtaWQKICAgICAgICBlbHNlOiBsbyA9IG1pZCsxCiAgICBhLmluc2VydChsbywgeCkKCmluc29ydCA9IGluc29ydF9yaWdodCAgICMgYmFja3dhcmQgY29tcGF0aWJpbGl0eQoKZGVmIGJpc2VjdF9yaWdodChhLCB4LCBsbz0wLCBoaT1Ob25lKToKICAgICIiIlJldHVybiB0aGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIFRoZSByZXR1cm4gdmFsdWUgaSBpcyBzdWNoIHRoYXQgYWxsIGUgaW4gYVs6aV0gaGF2ZSBlIDw9IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID4geC4gIFNvIGlmIHggYWxyZWFkeSBhcHBlYXJzIGluIHRoZSBsaXN0LCBhLmluc2VydCh4KSB3aWxsCiAgICBpbnNlcnQganVzdCBhZnRlciB0aGUgcmlnaHRtb3N0IHggYWxyZWFkeSB0aGVyZS4KCiAgICBPcHRpb25hbCBhcmdzIGxvIChkZWZhdWx0IDApIGFuZCBoaSAoZGVmYXVsdCBsZW4oYSkpIGJvdW5kIHRoZQogICAgc2xpY2Ugb2YgYSB0byBiZSBzZWFyY2hlZC4KICAgICIiIgoKICAgIGlmIGxvIDwgMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpCiAgICBpZiBoaSBpcyBOb25lOgogICAgICAgIGhpID0gbGVuKGEpCiAgICB3aGlsZSBsbyA8IGhpOgogICAgICAgIG1pZCA9IChsbytoaSkvLzIKICAgICAgICBpZiB4IDwgYVttaWRdOiBoaSA9IG1pZAogICAgICAgIGVsc2U6IGxvID0gbWlkKzEKICAgIHJldHVybiBsbwoKYmlzZWN0ID0gYmlzZWN0X3JpZ2h0ICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CgpkZWYgaW5zb3J0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJJbnNlcnQgaXRlbSB4IGluIGxpc3QgYSwgYW5kIGtlZXAgaXQgc29ydGVkIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIGxlZnQgb2YgdGhlIGxlZnRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICBhLmluc2VydChsbywgeCkKCgpkZWYgYmlzZWN0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJSZXR1cm4gdGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBUaGUgcmV0dXJuIHZhbHVlIGkgaXMgc3VjaCB0aGF0IGFsbCBlIGluIGFbOmldIGhhdmUgZSA8IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID49IHguICBTbyBpZiB4IGFscmVhZHkgYXBwZWFycyBpbiB0aGUgbGlzdCwgYS5pbnNlcnQoeCkgd2lsbAogICAgaW5zZXJ0IGp1c3QgYmVmb3JlIHRoZSBsZWZ0bW9zdCB4IGFscmVhZHkgdGhlcmUuCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICByZXR1cm4gbG8KCiMgZG9udCcgbmVlZCB0aGlzIGZvciBicnl0aG9uCiMgT3ZlcndyaXRlIGFib3ZlIGRlZmluaXRpb25zIHdpdGggYSBmYXN0IEMgaW1wbGVtZW50YXRpb24KI3RyeToKIyAgICBmcm9tIF9iaXNlY3QgaW1wb3J0ICoKI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgICBwYXNzCg==',
'/Lib/calendar.py':'',
'/Lib/collections.py':'',
'/Lib/colorsys.py':'IiIiQ29udmVyc2lvbiBmdW5jdGlvbnMgYmV0d2VlbiBSR0IgYW5kIG90aGVyIGNvbG9yIHN5c3RlbXMuCgpUaGlzIG1vZHVsZXMgcHJvdmlkZXMgdHdvIGZ1bmN0aW9ucyBmb3IgZWFjaCBjb2xvciBzeXN0ZW0gQUJDOgoKICByZ2JfdG9fYWJjKHIsIGcsIGIpIC0tPiBhLCBiLCBjCiAgYWJjX3RvX3JnYihhLCBiLCBjKSAtLT4gciwgZywgYgoKQWxsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgdHJpcGxlcyBvZiBmbG9hdHMgaW4gdGhlIHJhbmdlIFswLjAuLi4xLjBdCih3aXRoIHRoZSBleGNlcHRpb24gb2YgSSBhbmQgUSwgd2hpY2ggY292ZXJzIGEgc2xpZ2h0bHkgbGFyZ2VyIHJhbmdlKS4KSW5wdXRzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIG1heSBjYXVzZSBleGNlcHRpb25zIG9yIGludmFsaWQgb3V0cHV0cy4KClN1cHBvcnRlZCBjb2xvciBzeXN0ZW1zOgpSR0I6IFJlZCwgR3JlZW4sIEJsdWUgY29tcG9uZW50cwpZSVE6IEx1bWluYW5jZSwgQ2hyb21pbmFuY2UgKHVzZWQgYnkgY29tcG9zaXRlIHZpZGVvIHNpZ25hbHMpCkhMUzogSHVlLCBMdW1pbmFuY2UsIFNhdHVyYXRpb24KSFNWOiBIdWUsIFNhdHVyYXRpb24sIFZhbHVlCiIiIgoKIyBSZWZlcmVuY2VzOgojIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUlRCiMgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9ITFNfY29sb3Jfc3BhY2UKIyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTVl9jb2xvcl9zcGFjZQoKX19hbGxfXyA9IFsicmdiX3RvX3lpcSIsInlpcV90b19yZ2IiLCJyZ2JfdG9faGxzIiwiaGxzX3RvX3JnYiIsCiAgICAgICAgICAgInJnYl90b19oc3YiLCJoc3ZfdG9fcmdiIl0KCiMgU29tZSBmbG9hdGluZyBwb2ludCBjb25zdGFudHMKCk9ORV9USElSRCA9IDEuMC8zLjAKT05FX1NJWFRIID0gMS4wLzYuMApUV09fVEhJUkQgPSAyLjAvMy4wCgojIFlJUTogdXNlZCBieSBjb21wb3NpdGUgdmlkZW8gc2lnbmFscyAobGluZWFyIGNvbWJpbmF0aW9ucyBvZiBSR0IpCiMgWTogcGVyY2VpdmVkIGdyZXkgbGV2ZWwgKDAuMCA9PSBibGFjaywgMS4wID09IHdoaXRlKQojIEksIFE6IGNvbG9yIGNvbXBvbmVudHMKCmRlZiByZ2JfdG9feWlxKHIsIGcsIGIpOgogICAgeSA9IDAuMzAqciArIDAuNTkqZyArIDAuMTEqYgogICAgaSA9IDAuNjAqciAtIDAuMjgqZyAtIDAuMzIqYgogICAgcSA9IDAuMjEqciAtIDAuNTIqZyArIDAuMzEqYgogICAgcmV0dXJuICh5LCBpLCBxKQoKZGVmIHlpcV90b19yZ2IoeSwgaSwgcSk6CiAgICByID0geSArIDAuOTQ4MjYyKmkgKyAwLjYyNDAxMypxCiAgICBnID0geSAtIDAuMjc2MDY2KmkgLSAwLjYzOTgxMCpxCiAgICBiID0geSAtIDEuMTA1NDUwKmkgKyAxLjcyOTg2MCpxCiAgICBpZiByIDwgMC4wOgogICAgICAgIHIgPSAwLjAKICAgIGlmIGcgPCAwLjA6CiAgICAgICAgZyA9IDAuMAogICAgaWYgYiA8IDAuMDoKICAgICAgICBiID0gMC4wCiAgICBpZiByID4gMS4wOgogICAgICAgIHIgPSAxLjAKICAgIGlmIGcgPiAxLjA6CiAgICAgICAgZyA9IDEuMAogICAgaWYgYiA+IDEuMDoKICAgICAgICBiID0gMS4wCiAgICByZXR1cm4gKHIsIGcsIGIpCgoKIyBITFM6IEh1ZSwgTHVtaW5hbmNlLCBTYXR1cmF0aW9uCiMgSDogcG9zaXRpb24gaW4gdGhlIHNwZWN0cnVtCiMgTDogY29sb3IgbGlnaHRuZXNzCiMgUzogY29sb3Igc2F0dXJhdGlvbgoKZGVmIHJnYl90b19obHMociwgZywgYik6CiAgICBtYXhjID0gbWF4KHIsIGcsIGIpCiAgICBtaW5jID0gbWluKHIsIGcsIGIpCiAgICAjIFhYWCBDYW4gb3B0aW1pemUgKG1heGMrbWluYykgYW5kIChtYXhjLW1pbmMpCiAgICBsID0gKG1pbmMrbWF4YykvMi4wCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgbCwgMC4wCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAobWF4YyttaW5jKQogICAgZWxzZToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAoMi4wLW1heGMtbWluYykKICAgIHJjID0gKG1heGMtcikgLyAobWF4Yy1taW5jKQogICAgZ2MgPSAobWF4Yy1nKSAvIChtYXhjLW1pbmMpCiAgICBiYyA9IChtYXhjLWIpIC8gKG1heGMtbWluYykKICAgIGlmIHIgPT0gbWF4YzoKICAgICAgICBoID0gYmMtZ2MKICAgIGVsaWYgZyA9PSBtYXhjOgogICAgICAgIGggPSAyLjArcmMtYmMKICAgIGVsc2U6CiAgICAgICAgaCA9IDQuMCtnYy1yYwogICAgaCA9IChoLzYuMCkgJSAxLjAKICAgIHJldHVybiBoLCBsLCBzCgpkZWYgaGxzX3RvX3JnYihoLCBsLCBzKToKICAgIGlmIHMgPT0gMC4wOgogICAgICAgIHJldHVybiBsLCBsLCBsCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBtMiA9IGwgKiAoMS4wK3MpCiAgICBlbHNlOgogICAgICAgIG0yID0gbCtzLShsKnMpCiAgICBtMSA9IDIuMCpsIC0gbTIKICAgIHJldHVybiAoX3YobTEsIG0yLCBoK09ORV9USElSRCksIF92KG0xLCBtMiwgaCksIF92KG0xLCBtMiwgaC1PTkVfVEhJUkQpKQoKZGVmIF92KG0xLCBtMiwgaHVlKToKICAgIGh1ZSA9IGh1ZSAlIDEuMAogICAgaWYgaHVlIDwgT05FX1NJWFRIOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqaHVlKjYuMAogICAgaWYgaHVlIDwgMC41OgogICAgICAgIHJldHVybiBtMgogICAgaWYgaHVlIDwgVFdPX1RISVJEOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqKFRXT19USElSRC1odWUpKjYuMAogICAgcmV0dXJuIG0xCgoKIyBIU1Y6IEh1ZSwgU2F0dXJhdGlvbiwgVmFsdWUKIyBIOiBwb3NpdGlvbiBpbiB0aGUgc3BlY3RydW0KIyBTOiBjb2xvciBzYXR1cmF0aW9uICgicHVyaXR5IikKIyBWOiBjb2xvciBicmlnaHRuZXNzCgpkZWYgcmdiX3RvX2hzdihyLCBnLCBiKToKICAgIG1heGMgPSBtYXgociwgZywgYikKICAgIG1pbmMgPSBtaW4ociwgZywgYikKICAgIHYgPSBtYXhjCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgMC4wLCB2CiAgICBzID0gKG1heGMtbWluYykgLyBtYXhjCiAgICByYyA9IChtYXhjLXIpIC8gKG1heGMtbWluYykKICAgIGdjID0gKG1heGMtZykgLyAobWF4Yy1taW5jKQogICAgYmMgPSAobWF4Yy1iKSAvIChtYXhjLW1pbmMpCiAgICBpZiByID09IG1heGM6CiAgICAgICAgaCA9IGJjLWdjCiAgICBlbGlmIGcgPT0gbWF4YzoKICAgICAgICBoID0gMi4wK3JjLWJjCiAgICBlbHNlOgogICAgICAgIGggPSA0LjArZ2MtcmMKICAgIGggPSAoaC82LjApICUgMS4wCiAgICByZXR1cm4gaCwgcywgdgoKZGVmIGhzdl90b19yZ2IoaCwgcywgdik6CiAgICBpZiBzID09IDAuMDoKICAgICAgICByZXR1cm4gdiwgdiwgdgogICAgaSA9IGludChoKjYuMCkgIyBYWFggYXNzdW1lIGludCgpIHRydW5jYXRlcyEKICAgIGYgPSAoaCo2LjApIC0gaQogICAgcCA9IHYqKDEuMCAtIHMpCiAgICBxID0gdiooMS4wIC0gcypmKQogICAgdCA9IHYqKDEuMCAtIHMqKDEuMC1mKSkKICAgIGkgPSBpJTYKICAgIGlmIGkgPT0gMDoKICAgICAgICByZXR1cm4gdiwgdCwgcAogICAgaWYgaSA9PSAxOgogICAgICAgIHJldHVybiBxLCB2LCBwCiAgICBpZiBpID09IDI6CiAgICAgICAgcmV0dXJuIHAsIHYsIHQKICAgIGlmIGkgPT0gMzoKICAgICAgICByZXR1cm4gcCwgcSwgdgogICAgaWYgaSA9PSA0OgogICAgICAgIHJldHVybiB0LCBwLCB2CiAgICBpZiBpID09IDU6CiAgICAgICAgcmV0dXJuIHYsIHAsIHEKICAgICMgQ2Fubm90IGdldCBoZXJlCg==',
'/Lib/datetime.py':'',
'/Lib/difflib.py':'',
'/Lib/dis.py':'ZGVmIGRpcyhzcmMpOgogICAgcmV0dXJuIEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5MmpzKHNyYykpLnRvX2pzKCkK',
'/Lib/errno.py':'IlRoaXMgbW9kdWxlIG1ha2VzIGF2YWlsYWJsZSBzdGFuZGFyZCBlcnJubyBzeXN0ZW0gc3ltYm9scy5cblxuVGhlIHZhbHVlIG9mIGVhY2ggc3ltYm9sIGlzIHRoZSBjb3JyZXNwb25kaW5nIGludGVnZXIgdmFsdWUsXG5lLmcuLCBvbiBtb3N0IHN5c3RlbXMsIGVycm5vLkVOT0VOVCBlcXVhbHMgdGhlIGludGVnZXIgMi5cblxuVGhlIGRpY3Rpb25hcnkgZXJybm8uZXJyb3Jjb2RlIG1hcHMgbnVtZXJpYyBjb2RlcyB0byBzeW1ib2wgbmFtZXMsXG5lLmcuLCBlcnJuby5lcnJvcmNvZGVbMl0gY291bGQgYmUgdGhlIHN0cmluZyAnRU5PRU5UJy5cblxuU3ltYm9scyB0aGF0IGFyZSBub3QgcmVsZXZhbnQgdG8gdGhlIHVuZGVybHlpbmcgc3lzdGVtIGFyZSBub3QgZGVmaW5lZC5cblxuVG8gbWFwIGVycm9yIGNvZGVzIHRvIGVycm9yIG1lc3NhZ2VzLCB1c2UgdGhlIGZ1bmN0aW9uIG9zLnN0cmVycm9yKCksXG5lLmcuIG9zLnN0cmVycm9yKDIpIGNvdWxkIHJldHVybiAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScuIgoKRTJCSUcgPSA3CkVBQ0NFUyA9IDEzCkVBRERSSU5VU0UgPSA5OApFQUREUk5PVEFWQUlMID0gOTkKRUFEViA9IDY4CkVBRk5PU1VQUE9SVCA9IDk3CkVBR0FJTiA9IDExCkVBTFJFQURZID0gMTE0CkVCQURFID0gNTIKRUJBREYgPSA5CkVCQURGRCA9IDc3CkVCQURNU0cgPSA3NApFQkFEUiA9IDUzCkVCQURSUUMgPSA1NgpFQkFEU0xUID0gNTcKRUJGT05UID0gNTkKRUJVU1kgPSAxNgpFQ0hJTEQgPSAxMApFQ0hSTkcgPSA0NApFQ09NTSA9IDcwCkVDT05OQUJPUlRFRCA9IDEwMwpFQ09OTlJFRlVTRUQgPSAxMTEKRUNPTk5SRVNFVCA9IDEwNApFREVBRExLID0gMzUKRURFQURMT0NLID0gMzUKRURFU1RBRERSUkVRID0gODkKRURPTSA9IDMzCkVET1RET1QgPSA3MwpFRFFVT1QgPSAxMjIKRUVYSVNUID0gMTcKRUZBVUxUID0gMTQKRUZCSUcgPSAyNwpFSE9TVERPV04gPSAxMTIKRUhPU1RVTlJFQUNIID0gMTEzCkVJRFJNID0gNDMKRUlMU0VRID0gODQKRUlOUFJPR1JFU1MgPSAxMTUKRUlOVFIgPSA0CkVJTlZBTCA9IDIyCkVJTyA9IDUKRUlTQ09OTiA9IDEwNgpFSVNESVIgPSAyMQpFSVNOQU0gPSAxMjAKRUwySExUID0gNTEKRUwyTlNZTkMgPSA0NQpFTDNITFQgPSA0NgpFTDNSU1QgPSA0NwpFTElCQUNDID0gNzkKRUxJQkJBRCA9IDgwCkVMSUJFWEVDID0gODMKRUxJQk1BWCA9IDgyCkVMSUJTQ04gPSA4MQpFTE5STkcgPSA0OApFTE9PUCA9IDQwCkVNRklMRSA9IDI0CkVNTElOSyA9IDMxCkVNU0dTSVpFID0gOTAKRU1VTFRJSE9QID0gNzIKRU5BTUVUT09MT05HID0gMzYKRU5BVkFJTCA9IDExOQpFTkVURE9XTiA9IDEwMApFTkVUUkVTRVQgPSAxMDIKRU5FVFVOUkVBQ0ggPSAxMDEKRU5GSUxFID0gMjMKRU5PQU5PID0gNTUKRU5PQlVGUyA9IDEwNQpFTk9DU0kgPSA1MApFTk9EQVRBID0gNjEKRU5PREVWID0gMTkKRU5PRU5UID0gMgpFTk9FWEVDID0gOApFTk9MQ0sgPSAzNwpFTk9MSU5LID0gNjcKRU5PTUVNID0gMTIKRU5PTVNHID0gNDIKRU5PTkVUID0gNjQKRU5PUEtHID0gNjUKRU5PUFJPVE9PUFQgPSA5MgpFTk9TUEMgPSAyOApFTk9TUiA9IDYzCkVOT1NUUiA9IDYwCkVOT1NZUyA9IDM4CkVOT1RCTEsgPSAxNQpFTk9UQ09OTiA9IDEwNwpFTk9URElSID0gMjAKRU5PVEVNUFRZID0gMzkKRU5PVE5BTSA9IDExOApFTk9UU09DSyA9IDg4CkVOT1RUWSA9IDI1CkVOT1RVTklRID0gNzYKRU5YSU8gPSA2CkVPUE5PVFNVUFAgPSA5NQpFT1ZFUkZMT1cgPSA3NQpFUEVSTSA9IDEKRVBGTk9TVVBQT1JUID0gOTYKRVBJUEUgPSAzMgpFUFJPVE8gPSA3MQpFUFJPVE9OT1NVUFBPUlQgPSA5MwpFUFJPVE9UWVBFID0gOTEKRVJBTkdFID0gMzQKRVJFTUNIRyA9IDc4CkVSRU1PVEUgPSA2NgpFUkVNT1RFSU8gPSAxMjEKRVJFU1RBUlQgPSA4NQpFUk9GUyA9IDMwCkVTSFVURE9XTiA9IDEwOApFU09DS1ROT1NVUFBPUlQgPSA5NApFU1BJUEUgPSAyOQpFU1JDSCA9IDMKRVNSTU5UID0gNjkKRVNUQUxFID0gMTE2CkVTVFJQSVBFID0gODYKRVRJTUUgPSA2MgpFVElNRURPVVQgPSAxMTAKRVRPT01BTllSRUZTID0gMTA5CkVUWFRCU1kgPSAyNgpFVUNMRUFOID0gMTE3CkVVTkFUQ0ggPSA0OQpFVVNFUlMgPSA4NwpFV09VTERCTE9DSyA9IDExCkVYREVWID0gMTgKRVhGVUxMID0gNTQKIyBlcnJvcmNvZGUK',
'/Lib/fnmatch.py':'IiIiRmlsZW5hbWUgbWF0Y2hpbmcgd2l0aCBzaGVsbCBwYXR0ZXJucy4KCmZubWF0Y2goRklMRU5BTUUsIFBBVFRFUk4pIG1hdGNoZXMgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbCBjb252ZW50aW9uLgpmbm1hdGNoY2FzZShGSUxFTkFNRSwgUEFUVEVSTikgYWx3YXlzIHRha2VzIGNhc2UgaW4gYWNjb3VudC4KClRoZSBmdW5jdGlvbnMgb3BlcmF0ZSBieSB0cmFuc2xhdGluZyB0aGUgcGF0dGVybiBpbnRvIGEgcmVndWxhcgpleHByZXNzaW9uLiAgVGhleSBjYWNoZSB0aGUgY29tcGlsZWQgcmVndWxhciBleHByZXNzaW9ucyBmb3Igc3BlZWQuCgpUaGUgZnVuY3Rpb24gdHJhbnNsYXRlKFBBVFRFUk4pIHJldHVybnMgYSByZWd1bGFyIGV4cHJlc3Npb24KY29ycmVzcG9uZGluZyB0byBQQVRURVJOLiAgKEl0IGRvZXMgbm90IGNvbXBpbGUgaXQuKQoiIiIKaW1wb3J0IG9zCmltcG9ydCBwb3NpeHBhdGgKaW1wb3J0IHJlCmltcG9ydCBmdW5jdG9vbHMKCl9fYWxsX18gPSBbImZpbHRlciIsICJmbm1hdGNoIiwgImZubWF0Y2hjYXNlIiwgInRyYW5zbGF0ZSJdCgpkZWYgZm5tYXRjaChuYW1lLCBwYXQpOgogICAgIiIiVGVzdCB3aGV0aGVyIEZJTEVOQU1FIG1hdGNoZXMgUEFUVEVSTi4KCiAgICBQYXR0ZXJucyBhcmUgVW5peCBzaGVsbCBzdHlsZToKCiAgICAqICAgICAgIG1hdGNoZXMgZXZlcnl0aGluZwogICAgPyAgICAgICBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyCiAgICBbc2VxXSAgIG1hdGNoZXMgYW55IGNoYXJhY3RlciBpbiBzZXEKICAgIFshc2VxXSAgbWF0Y2hlcyBhbnkgY2hhciBub3QgaW4gc2VxCgogICAgQW4gaW5pdGlhbCBwZXJpb2QgaW4gRklMRU5BTUUgaXMgbm90IHNwZWNpYWwuCiAgICBCb3RoIEZJTEVOQU1FIGFuZCBQQVRURVJOIGFyZSBmaXJzdCBjYXNlLW5vcm1hbGl6ZWQKICAgIGlmIHRoZSBvcGVyYXRpbmcgc3lzdGVtIHJlcXVpcmVzIGl0LgogICAgSWYgeW91IGRvbid0IHdhbnQgdGhpcywgdXNlIGZubWF0Y2hjYXNlKEZJTEVOQU1FLCBQQVRURVJOKS4KICAgICIiIgogICAgbmFtZSA9IG9zLnBhdGgubm9ybWNhc2UobmFtZSkKICAgIHBhdCA9IG9zLnBhdGgubm9ybWNhc2UocGF0KQogICAgcmV0dXJuIGZubWF0Y2hjYXNlKG5hbWUsIHBhdCkKCkBmdW5jdG9vbHMubHJ1X2NhY2hlKG1heHNpemU9MjUwLCB0eXBlZD1UcnVlKQpkZWYgX2NvbXBpbGVfcGF0dGVybihwYXQpOgogICAgaWYgaXNpbnN0YW5jZShwYXQsIGJ5dGVzKToKICAgICAgICBwYXRfc3RyID0gc3RyKHBhdCwgJ0lTTy04ODU5LTEnKQogICAgICAgIHJlc19zdHIgPSB0cmFuc2xhdGUocGF0X3N0cikKICAgICAgICByZXMgPSBieXRlcyhyZXNfc3RyLCAnSVNPLTg4NTktMScpCiAgICBlbHNlOgogICAgICAgIHJlcyA9IHRyYW5zbGF0ZShwYXQpCiAgICByZXR1cm4gcmUuY29tcGlsZShyZXMpLm1hdGNoCgpkZWYgZmlsdGVyKG5hbWVzLCBwYXQpOgogICAgIiIiUmV0dXJuIHRoZSBzdWJzZXQgb2YgdGhlIGxpc3QgTkFNRVMgdGhhdCBtYXRjaCBQQVQuIiIiCiAgICByZXN1bHQgPSBbXQogICAgcGF0ID0gb3MucGF0aC5ub3JtY2FzZShwYXQpCiAgICBtYXRjaCA9IF9jb21waWxlX3BhdHRlcm4ocGF0KQogICAgaWYgb3MucGF0aCBpcyBwb3NpeHBhdGg6CiAgICAgICAgIyBub3JtY2FzZSBvbiBwb3NpeCBpcyBOT1AuIE9wdGltaXplIGl0IGF3YXkgZnJvbSB0aGUgbG9vcC4KICAgICAgICBmb3IgbmFtZSBpbiBuYW1lczoKICAgICAgICAgICAgaWYgbWF0Y2gobmFtZSk6CiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKG5hbWUpCiAgICBlbHNlOgogICAgICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgICAgICBpZiBtYXRjaChvcy5wYXRoLm5vcm1jYXNlKG5hbWUpKToKICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobmFtZSkKICAgIHJldHVybiByZXN1bHQKCmRlZiBmbm1hdGNoY2FzZShuYW1lLCBwYXQpOgogICAgIiIiVGVzdCB3aGV0aGVyIEZJTEVOQU1FIG1hdGNoZXMgUEFUVEVSTiwgaW5jbHVkaW5nIGNhc2UuCgogICAgVGhpcyBpcyBhIHZlcnNpb24gb2YgZm5tYXRjaCgpIHdoaWNoIGRvZXNuJ3QgY2FzZS1ub3JtYWxpemUKICAgIGl0cyBhcmd1bWVudHMuCiAgICAiIiIKICAgIG1hdGNoID0gX2NvbXBpbGVfcGF0dGVybihwYXQpCiAgICByZXR1cm4gbWF0Y2gobmFtZSkgaXMgbm90IE5vbmUKCgpkZWYgdHJhbnNsYXRlKHBhdCk6CiAgICAiIiJUcmFuc2xhdGUgYSBzaGVsbCBQQVRURVJOIHRvIGEgcmVndWxhciBleHByZXNzaW9uLgoKICAgIFRoZXJlIGlzIG5vIHdheSB0byBxdW90ZSBtZXRhLWNoYXJhY3RlcnMuCiAgICAiIiIKCiAgICBpLCBuID0gMCwgbGVuKHBhdCkKICAgIHJlcyA9ICcnCiAgICB3aGlsZSBpIDwgbjoKICAgICAgICBjID0gcGF0W2ldCiAgICAgICAgaSA9IGkrMQogICAgICAgIGlmIGMgPT0gJyonOgogICAgICAgICAgICByZXMgPSByZXMgKyAnLionCiAgICAgICAgZWxpZiBjID09ICc/JzoKICAgICAgICAgICAgcmVzID0gcmVzICsgJy4nCiAgICAgICAgZWxpZiBjID09ICdbJzoKICAgICAgICAgICAgaiA9IGkKICAgICAgICAgICAgaWYgaiA8IG4gYW5kIHBhdFtqXSA9PSAnISc6CiAgICAgICAgICAgICAgICBqID0gaisxCiAgICAgICAgICAgIGlmIGogPCBuIGFuZCBwYXRbal0gPT0gJ10nOgogICAgICAgICAgICAgICAgaiA9IGorMQogICAgICAgICAgICB3aGlsZSBqIDwgbiBhbmQgcGF0W2pdICE9ICddJzoKICAgICAgICAgICAgICAgIGogPSBqKzEKICAgICAgICAgICAgaWYgaiA+PSBuOgogICAgICAgICAgICAgICAgcmVzID0gcmVzICsgJ1xcWycKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN0dWZmID0gcGF0W2k6al0ucmVwbGFjZSgnXFwnLCdcXFxcJykKICAgICAgICAgICAgICAgIGkgPSBqKzEKICAgICAgICAgICAgICAgIGlmIHN0dWZmWzBdID09ICchJzoKICAgICAgICAgICAgICAgICAgICBzdHVmZiA9ICdeJyArIHN0dWZmWzE6XQogICAgICAgICAgICAgICAgZWxpZiBzdHVmZlswXSA9PSAnXic6CiAgICAgICAgICAgICAgICAgICAgc3R1ZmYgPSAnXFwnICsgc3R1ZmYKICAgICAgICAgICAgICAgIHJlcyA9ICclc1slc10nICUgKHJlcywgc3R1ZmYpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzID0gcmVzICsgcmUuZXNjYXBlKGMpCiAgICByZXR1cm4gcmVzICsgJ1xaKD9tcyknCg==',
'/Lib/functools.py':'',
'/Lib/genericpath.py':'IiIiClBhdGggb3BlcmF0aW9ucyBjb21tb24gdG8gbW9yZSB0aGFuIG9uZSBPUwpEbyBub3QgdXNlIGRpcmVjdGx5LiAgVGhlIE9TIHNwZWNpZmljIG1vZHVsZXMgaW1wb3J0IHRoZSBhcHByb3ByaWF0ZQpmdW5jdGlvbnMgZnJvbSB0aGlzIG1vZHVsZSB0aGVtc2VsdmVzLgoiIiIKaW1wb3J0IG9zCmltcG9ydCBzdGF0CgpfX2FsbF9fID0gWydjb21tb25wcmVmaXgnLCAnZXhpc3RzJywgJ2dldGF0aW1lJywgJ2dldGN0aW1lJywgJ2dldG10aW1lJywKICAgICAgICAgICAnZ2V0c2l6ZScsICdpc2RpcicsICdpc2ZpbGUnXQoKCiMgRG9lcyBhIHBhdGggZXhpc3Q/CiMgVGhpcyBpcyBmYWxzZSBmb3IgZGFuZ2xpbmcgc3ltYm9saWMgbGlua3Mgb24gc3lzdGVtcyB0aGF0IHN1cHBvcnQgdGhlbS4KZGVmIGV4aXN0cyhwYXRoKToKICAgICIiIlRlc3Qgd2hldGhlciBhIHBhdGggZXhpc3RzLiAgUmV0dXJucyBGYWxzZSBmb3IgYnJva2VuIHN5bWJvbGljIGxpbmtzIiIiCiAgICB0cnk6CiAgICAgICAgb3Muc3RhdChwYXRoKQogICAgZXhjZXB0IG9zLmVycm9yOgogICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIFRydWUKCgojIFRoaXMgZm9sbG93cyBzeW1ib2xpYyBsaW5rcywgc28gYm90aCBpc2xpbmsoKSBhbmQgaXNkaXIoKSBjYW4gYmUgdHJ1ZQojIGZvciB0aGUgc2FtZSBwYXRoIG9ubyBzeXN0ZW1zIHRoYXQgc3VwcG9ydCBzeW1saW5rcwpkZWYgaXNmaWxlKHBhdGgpOgogICAgIiIiVGVzdCB3aGV0aGVyIGEgcGF0aCBpcyBhIHJlZ3VsYXIgZmlsZSIiIgogICAgdHJ5OgogICAgICAgIHN0ID0gb3Muc3RhdChwYXRoKQogICAgZXhjZXB0IG9zLmVycm9yOgogICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIHN0YXQuU19JU1JFRyhzdC5zdF9tb2RlKQoKCiMgSXMgYSBwYXRoIGEgZGlyZWN0b3J5PwojIFRoaXMgZm9sbG93cyBzeW1ib2xpYyBsaW5rcywgc28gYm90aCBpc2xpbmsoKSBhbmQgaXNkaXIoKQojIGNhbiBiZSB0cnVlIGZvciB0aGUgc2FtZSBwYXRoIG9uIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHN5bWxpbmtzCmRlZiBpc2RpcihzKToKICAgICIiIlJldHVybiB0cnVlIGlmIHRoZSBwYXRobmFtZSByZWZlcnMgdG8gYW4gZXhpc3RpbmcgZGlyZWN0b3J5LiIiIgogICAgdHJ5OgogICAgICAgIHN0ID0gb3Muc3RhdChzKQogICAgZXhjZXB0IG9zLmVycm9yOgogICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIHN0YXQuU19JU0RJUihzdC5zdF9tb2RlKQoKCmRlZiBnZXRzaXplKGZpbGVuYW1lKToKICAgICIiIlJldHVybiB0aGUgc2l6ZSBvZiBhIGZpbGUsIHJlcG9ydGVkIGJ5IG9zLnN0YXQoKS4iIiIKICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9zaXplCgoKZGVmIGdldG10aW1lKGZpbGVuYW1lKToKICAgICIiIlJldHVybiB0aGUgbGFzdCBtb2RpZmljYXRpb24gdGltZSBvZiBhIGZpbGUsIHJlcG9ydGVkIGJ5IG9zLnN0YXQoKS4iIiIKICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9tdGltZQoKCmRlZiBnZXRhdGltZShmaWxlbmFtZSk6CiAgICAiIiJSZXR1cm4gdGhlIGxhc3QgYWNjZXNzIHRpbWUgb2YgYSBmaWxlLCByZXBvcnRlZCBieSBvcy5zdGF0KCkuIiIiCiAgICByZXR1cm4gb3Muc3RhdChmaWxlbmFtZSkuc3RfYXRpbWUKCgpkZWYgZ2V0Y3RpbWUoZmlsZW5hbWUpOgogICAgIiIiUmV0dXJuIHRoZSBtZXRhZGF0YSBjaGFuZ2UgdGltZSBvZiBhIGZpbGUsIHJlcG9ydGVkIGJ5IG9zLnN0YXQoKS4iIiIKICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9jdGltZQoKCiMgUmV0dXJuIHRoZSBsb25nZXN0IHByZWZpeCBvZiBhbGwgbGlzdCBlbGVtZW50cy4KZGVmIGNvbW1vbnByZWZpeChtKToKICAgICJHaXZlbiBhIGxpc3Qgb2YgcGF0aG5hbWVzLCByZXR1cm5zIHRoZSBsb25nZXN0IGNvbW1vbiBsZWFkaW5nIGNvbXBvbmVudCIKICAgIGlmIG5vdCBtOiByZXR1cm4gJycKICAgIHMxID0gbWluKG0pCiAgICBzMiA9IG1heChtKQogICAgZm9yIGksIGMgaW4gZW51bWVyYXRlKHMxKToKICAgICAgICBpZiBjICE9IHMyW2ldOgogICAgICAgICAgICByZXR1cm4gczFbOmldCiAgICByZXR1cm4gczEKCiMgU3BsaXQgYSBwYXRoIGluIHJvb3QgYW5kIGV4dGVuc2lvbi4KIyBUaGUgZXh0ZW5zaW9uIGlzIGV2ZXJ5dGhpbmcgc3RhcnRpbmcgYXQgdGhlIGxhc3QgZG90IGluIHRoZSBsYXN0CiMgcGF0aG5hbWUgY29tcG9uZW50OyB0aGUgcm9vdCBpcyBldmVyeXRoaW5nIGJlZm9yZSB0aGF0LgojIEl0IGlzIGFsd2F5cyB0cnVlIHRoYXQgcm9vdCArIGV4dCA9PSBwLgoKIyBHZW5lcmljIGltcGxlbWVudGF0aW9uIG9mIHNwbGl0ZXh0LCB0byBiZSBwYXJhbWV0cml6ZWQgd2l0aAojIHRoZSBzZXBhcmF0b3JzCmRlZiBfc3BsaXRleHQocCwgc2VwLCBhbHRzZXAsIGV4dHNlcCk6CiAgICAiIiJTcGxpdCB0aGUgZXh0ZW5zaW9uIGZyb20gYSBwYXRobmFtZS4KCiAgICBFeHRlbnNpb24gaXMgZXZlcnl0aGluZyBmcm9tIHRoZSBsYXN0IGRvdCB0byB0aGUgZW5kLCBpZ25vcmluZwogICAgbGVhZGluZyBkb3RzLiAgUmV0dXJucyAiKHJvb3QsIGV4dCkiOyBleHQgbWF5IGJlIGVtcHR5LiIiIgogICAgIyBOT1RFOiBUaGlzIGNvZGUgbXVzdCB3b3JrIGZvciB0ZXh0IGFuZCBieXRlcyBzdHJpbmdzLgoKICAgIHNlcEluZGV4ID0gcC5yZmluZChzZXApCiAgICBpZiBhbHRzZXA6CiAgICAgICAgYWx0c2VwSW5kZXggPSBwLnJmaW5kKGFsdHNlcCkKICAgICAgICBzZXBJbmRleCA9IG1heChzZXBJbmRleCwgYWx0c2VwSW5kZXgpCgogICAgZG90SW5kZXggPSBwLnJmaW5kKGV4dHNlcCkKICAgIGlmIGRvdEluZGV4ID4gc2VwSW5kZXg6CiAgICAgICAgIyBza2lwIGFsbCBsZWFkaW5nIGRvdHMKICAgICAgICBmaWxlbmFtZUluZGV4ID0gc2VwSW5kZXggKyAxCiAgICAgICAgd2hpbGUgZmlsZW5hbWVJbmRleCA8IGRvdEluZGV4OgogICAgICAgICAgICBpZiBwW2ZpbGVuYW1lSW5kZXg6ZmlsZW5hbWVJbmRleCsxXSAhPSBleHRzZXA6CiAgICAgICAgICAgICAgICByZXR1cm4gcFs6ZG90SW5kZXhdLCBwW2RvdEluZGV4Ol0KICAgICAgICAgICAgZmlsZW5hbWVJbmRleCArPSAxCgogICAgcmV0dXJuIHAsIHBbOjBdCg==',
'/Lib/heapq.py':'IiIiSGVhcCBxdWV1ZSBhbGdvcml0aG0gKGEuay5hLiBwcmlvcml0eSBxdWV1ZSkuCgpIZWFwcyBhcmUgYXJyYXlzIGZvciB3aGljaCBhW2tdIDw9IGFbMiprKzFdIGFuZCBhW2tdIDw9IGFbMiprKzJdIGZvcgphbGwgaywgY291bnRpbmcgZWxlbWVudHMgZnJvbSAwLiAgRm9yIHRoZSBzYWtlIG9mIGNvbXBhcmlzb24sCm5vbi1leGlzdGluZyBlbGVtZW50cyBhcmUgY29uc2lkZXJlZCB0byBiZSBpbmZpbml0ZS4gIFRoZSBpbnRlcmVzdGluZwpwcm9wZXJ0eSBvZiBhIGhlYXAgaXMgdGhhdCBhWzBdIGlzIGFsd2F5cyBpdHMgc21hbGxlc3QgZWxlbWVudC4KClVzYWdlOgoKaGVhcCA9IFtdICAgICAgICAgICAgIyBjcmVhdGVzIGFuIGVtcHR5IGhlYXAKaGVhcHB1c2goaGVhcCwgaXRlbSkgIyBwdXNoZXMgYSBuZXcgaXRlbSBvbiB0aGUgaGVhcAppdGVtID0gaGVhcHBvcChoZWFwKSAjIHBvcHMgdGhlIHNtYWxsZXN0IGl0ZW0gZnJvbSB0aGUgaGVhcAppdGVtID0gaGVhcFswXSAgICAgICAjIHNtYWxsZXN0IGl0ZW0gb24gdGhlIGhlYXAgd2l0aG91dCBwb3BwaW5nIGl0CmhlYXBpZnkoeCkgICAgICAgICAgICMgdHJhbnNmb3JtcyBsaXN0IGludG8gYSBoZWFwLCBpbi1wbGFjZSwgaW4gbGluZWFyIHRpbWUKaXRlbSA9IGhlYXByZXBsYWNlKGhlYXAsIGl0ZW0pICMgcG9wcyBhbmQgcmV0dXJucyBzbWFsbGVzdCBpdGVtLCBhbmQgYWRkcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBuZXcgaXRlbTsgdGhlIGhlYXAgc2l6ZSBpcyB1bmNoYW5nZWQKCk91ciBBUEkgZGlmZmVycyBmcm9tIHRleHRib29rIGhlYXAgYWxnb3JpdGhtcyBhcyBmb2xsb3dzOgoKLSBXZSB1c2UgMC1iYXNlZCBpbmRleGluZy4gIFRoaXMgbWFrZXMgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZQogIGluZGV4IGZvciBhIG5vZGUgYW5kIHRoZSBpbmRleGVzIGZvciBpdHMgY2hpbGRyZW4gc2xpZ2h0bHkgbGVzcwogIG9idmlvdXMsIGJ1dCBpcyBtb3JlIHN1aXRhYmxlIHNpbmNlIFB5dGhvbiB1c2VzIDAtYmFzZWQgaW5kZXhpbmcuCgotIE91ciBoZWFwcG9wKCkgbWV0aG9kIHJldHVybnMgdGhlIHNtYWxsZXN0IGl0ZW0sIG5vdCB0aGUgbGFyZ2VzdC4KClRoZXNlIHR3byBtYWtlIGl0IHBvc3NpYmxlIHRvIHZpZXcgdGhlIGhlYXAgYXMgYSByZWd1bGFyIFB5dGhvbiBsaXN0CndpdGhvdXQgc3VycHJpc2VzOiBoZWFwWzBdIGlzIHRoZSBzbWFsbGVzdCBpdGVtLCBhbmQgaGVhcC5zb3J0KCkKbWFpbnRhaW5zIHRoZSBoZWFwIGludmFyaWFudCEKIiIiCgojIE9yaWdpbmFsIGNvZGUgYnkgS2V2aW4gTydDb25ub3IsIGF1Z21lbnRlZCBieSBUaW0gUGV0ZXJzIGFuZCBSYXltb25kIEhldHRpbmdlcgoKX19hYm91dF9fID0gIiIiSGVhcCBxdWV1ZXMKCltleHBsYW5hdGlvbiBieSBGcmFuw6dvaXMgUGluYXJkXQoKSGVhcHMgYXJlIGFycmF5cyBmb3Igd2hpY2ggYVtrXSA8PSBhWzIqaysxXSBhbmQgYVtrXSA8PSBhWzIqaysyXSBmb3IKYWxsIGssIGNvdW50aW5nIGVsZW1lbnRzIGZyb20gMC4gIEZvciB0aGUgc2FrZSBvZiBjb21wYXJpc29uLApub24tZXhpc3RpbmcgZWxlbWVudHMgYXJlIGNvbnNpZGVyZWQgdG8gYmUgaW5maW5pdGUuICBUaGUgaW50ZXJlc3RpbmcKcHJvcGVydHkgb2YgYSBoZWFwIGlzIHRoYXQgYVswXSBpcyBhbHdheXMgaXRzIHNtYWxsZXN0IGVsZW1lbnQuCgpUaGUgc3RyYW5nZSBpbnZhcmlhbnQgYWJvdmUgaXMgbWVhbnQgdG8gYmUgYW4gZWZmaWNpZW50IG1lbW9yeQpyZXByZXNlbnRhdGlvbiBmb3IgYSB0b3VybmFtZW50LiAgVGhlIG51bWJlcnMgYmVsb3cgYXJlIGBrJywgbm90IGFba106CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKCiAgICAgICAgICAgICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyCgogICAgICAgICAgMyAgICAgICAgICAgICAgIDQgICAgICAgICAgICAgICAgNSAgICAgICAgICAgICAgIDYKCiAgICAgIDcgICAgICAgOCAgICAgICA5ICAgICAgIDEwICAgICAgMTEgICAgICAxMiAgICAgIDEzICAgICAgMTQKCiAgICAxNSAxNiAgIDE3IDE4ICAgMTkgMjAgICAyMSAyMiAgIDIzIDI0ICAgMjUgMjYgICAyNyAyOCAgIDI5IDMwCgoKSW4gdGhlIHRyZWUgYWJvdmUsIGVhY2ggY2VsbCBgaycgaXMgdG9wcGluZyBgMiprKzEnIGFuZCBgMiprKzInLiAgSW4KYW4gdXN1YWwgYmluYXJ5IHRvdXJuYW1lbnQgd2Ugc2VlIGluIHNwb3J0cywgZWFjaCBjZWxsIGlzIHRoZSB3aW5uZXIKb3ZlciB0aGUgdHdvIGNlbGxzIGl0IHRvcHMsIGFuZCB3ZSBjYW4gdHJhY2UgdGhlIHdpbm5lciBkb3duIHRoZSB0cmVlCnRvIHNlZSBhbGwgb3Bwb25lbnRzIHMvaGUgaGFkLiAgSG93ZXZlciwgaW4gbWFueSBjb21wdXRlciBhcHBsaWNhdGlvbnMKb2Ygc3VjaCB0b3VybmFtZW50cywgd2UgZG8gbm90IG5lZWQgdG8gdHJhY2UgdGhlIGhpc3Rvcnkgb2YgYSB3aW5uZXIuClRvIGJlIG1vcmUgbWVtb3J5IGVmZmljaWVudCwgd2hlbiBhIHdpbm5lciBpcyBwcm9tb3RlZCwgd2UgdHJ5IHRvCnJlcGxhY2UgaXQgYnkgc29tZXRoaW5nIGVsc2UgYXQgYSBsb3dlciBsZXZlbCwgYW5kIHRoZSBydWxlIGJlY29tZXMKdGhhdCBhIGNlbGwgYW5kIHRoZSB0d28gY2VsbHMgaXQgdG9wcyBjb250YWluIHRocmVlIGRpZmZlcmVudCBpdGVtcywKYnV0IHRoZSB0b3AgY2VsbCAid2lucyIgb3ZlciB0aGUgdHdvIHRvcHBlZCBjZWxscy4KCklmIHRoaXMgaGVhcCBpbnZhcmlhbnQgaXMgcHJvdGVjdGVkIGF0IGFsbCB0aW1lLCBpbmRleCAwIGlzIGNsZWFybHkKdGhlIG92ZXJhbGwgd2lubmVyLiAgVGhlIHNpbXBsZXN0IGFsZ29yaXRobWljIHdheSB0byByZW1vdmUgaXQgYW5kCmZpbmQgdGhlICJuZXh0IiB3aW5uZXIgaXMgdG8gbW92ZSBzb21lIGxvc2VyIChsZXQncyBzYXkgY2VsbCAzMCBpbiB0aGUKZGlhZ3JhbSBhYm92ZSkgaW50byB0aGUgMCBwb3NpdGlvbiwgYW5kIHRoZW4gcGVyY29sYXRlIHRoaXMgbmV3IDAgZG93bgp0aGUgdHJlZSwgZXhjaGFuZ2luZyB2YWx1ZXMsIHVudGlsIHRoZSBpbnZhcmlhbnQgaXMgcmUtZXN0YWJsaXNoZWQuClRoaXMgaXMgY2xlYXJseSBsb2dhcml0aG1pYyBvbiB0aGUgdG90YWwgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSB0cmVlLgpCeSBpdGVyYXRpbmcgb3ZlciBhbGwgaXRlbXMsIHlvdSBnZXQgYW4gTyhuIGxuIG4pIHNvcnQuCgpBIG5pY2UgZmVhdHVyZSBvZiB0aGlzIHNvcnQgaXMgdGhhdCB5b3UgY2FuIGVmZmljaWVudGx5IGluc2VydCBuZXcKaXRlbXMgd2hpbGUgdGhlIHNvcnQgaXMgZ29pbmcgb24sIHByb3ZpZGVkIHRoYXQgdGhlIGluc2VydGVkIGl0ZW1zIGFyZQpub3QgImJldHRlciIgdGhhbiB0aGUgbGFzdCAwJ3RoIGVsZW1lbnQgeW91IGV4dHJhY3RlZC4gIFRoaXMgaXMKZXNwZWNpYWxseSB1c2VmdWwgaW4gc2ltdWxhdGlvbiBjb250ZXh0cywgd2hlcmUgdGhlIHRyZWUgaG9sZHMgYWxsCmluY29taW5nIGV2ZW50cywgYW5kIHRoZSAid2luIiBjb25kaXRpb24gbWVhbnMgdGhlIHNtYWxsZXN0IHNjaGVkdWxlZAp0aW1lLiAgV2hlbiBhbiBldmVudCBzY2hlZHVsZSBvdGhlciBldmVudHMgZm9yIGV4ZWN1dGlvbiwgdGhleSBhcmUKc2NoZWR1bGVkIGludG8gdGhlIGZ1dHVyZSwgc28gdGhleSBjYW4gZWFzaWx5IGdvIGludG8gdGhlIGhlYXAuICBTbywgYQpoZWFwIGlzIGEgZ29vZCBzdHJ1Y3R1cmUgZm9yIGltcGxlbWVudGluZyBzY2hlZHVsZXJzICh0aGlzIGlzIHdoYXQgSQp1c2VkIGZvciBteSBNSURJIHNlcXVlbmNlciA6LSkuCgpWYXJpb3VzIHN0cnVjdHVyZXMgZm9yIGltcGxlbWVudGluZyBzY2hlZHVsZXJzIGhhdmUgYmVlbiBleHRlbnNpdmVseQpzdHVkaWVkLCBhbmQgaGVhcHMgYXJlIGdvb2QgZm9yIHRoaXMsIGFzIHRoZXkgYXJlIHJlYXNvbmFibHkgc3BlZWR5LAp0aGUgc3BlZWQgaXMgYWxtb3N0IGNvbnN0YW50LCBhbmQgdGhlIHdvcnN0IGNhc2UgaXMgbm90IG11Y2ggZGlmZmVyZW50CnRoYW4gdGhlIGF2ZXJhZ2UgY2FzZS4gIEhvd2V2ZXIsIHRoZXJlIGFyZSBvdGhlciByZXByZXNlbnRhdGlvbnMgd2hpY2gKYXJlIG1vcmUgZWZmaWNpZW50IG92ZXJhbGwsIHlldCB0aGUgd29yc3QgY2FzZXMgbWlnaHQgYmUgdGVycmlibGUuCgpIZWFwcyBhcmUgYWxzbyB2ZXJ5IHVzZWZ1bCBpbiBiaWcgZGlzayBzb3J0cy4gIFlvdSBtb3N0IHByb2JhYmx5IGFsbAprbm93IHRoYXQgYSBiaWcgc29ydCBpbXBsaWVzIHByb2R1Y2luZyAicnVucyIgKHdoaWNoIGFyZSBwcmUtc29ydGVkCnNlcXVlbmNlcywgd2hpY2ggc2l6ZSBpcyB1c3VhbGx5IHJlbGF0ZWQgdG8gdGhlIGFtb3VudCBvZiBDUFUgbWVtb3J5KSwKZm9sbG93ZWQgYnkgYSBtZXJnaW5nIHBhc3NlcyBmb3IgdGhlc2UgcnVucywgd2hpY2ggbWVyZ2luZyBpcyBvZnRlbgp2ZXJ5IGNsZXZlcmx5IG9yZ2FuaXNlZFsxXS4gIEl0IGlzIHZlcnkgaW1wb3J0YW50IHRoYXQgdGhlIGluaXRpYWwKc29ydCBwcm9kdWNlcyB0aGUgbG9uZ2VzdCBydW5zIHBvc3NpYmxlLiAgVG91cm5hbWVudHMgYXJlIGEgZ29vZCB3YXkKdG8gdGhhdC4gIElmLCB1c2luZyBhbGwgdGhlIG1lbW9yeSBhdmFpbGFibGUgdG8gaG9sZCBhIHRvdXJuYW1lbnQsIHlvdQpyZXBsYWNlIGFuZCBwZXJjb2xhdGUgaXRlbXMgdGhhdCBoYXBwZW4gdG8gZml0IHRoZSBjdXJyZW50IHJ1biwgeW91J2xsCnByb2R1Y2UgcnVucyB3aGljaCBhcmUgdHdpY2UgdGhlIHNpemUgb2YgdGhlIG1lbW9yeSBmb3IgcmFuZG9tIGlucHV0LAphbmQgbXVjaCBiZXR0ZXIgZm9yIGlucHV0IGZ1enppbHkgb3JkZXJlZC4KCk1vcmVvdmVyLCBpZiB5b3Ugb3V0cHV0IHRoZSAwJ3RoIGl0ZW0gb24gZGlzayBhbmQgZ2V0IGFuIGlucHV0IHdoaWNoCm1heSBub3QgZml0IGluIHRoZSBjdXJyZW50IHRvdXJuYW1lbnQgKGJlY2F1c2UgdGhlIHZhbHVlICJ3aW5zIiBvdmVyCnRoZSBsYXN0IG91dHB1dCB2YWx1ZSksIGl0IGNhbm5vdCBmaXQgaW4gdGhlIGhlYXAsIHNvIHRoZSBzaXplIG9mIHRoZQpoZWFwIGRlY3JlYXNlcy4gIFRoZSBmcmVlZCBtZW1vcnkgY291bGQgYmUgY2xldmVybHkgcmV1c2VkIGltbWVkaWF0ZWx5CmZvciBwcm9ncmVzc2l2ZWx5IGJ1aWxkaW5nIGEgc2Vjb25kIGhlYXAsIHdoaWNoIGdyb3dzIGF0IGV4YWN0bHkgdGhlCnNhbWUgcmF0ZSB0aGUgZmlyc3QgaGVhcCBpcyBtZWx0aW5nLiAgV2hlbiB0aGUgZmlyc3QgaGVhcCBjb21wbGV0ZWx5CnZhbmlzaGVzLCB5b3Ugc3dpdGNoIGhlYXBzIGFuZCBzdGFydCBhIG5ldyBydW4uICBDbGV2ZXIgYW5kIHF1aXRlCmVmZmVjdGl2ZSEKCkluIGEgd29yZCwgaGVhcHMgYXJlIHVzZWZ1bCBtZW1vcnkgc3RydWN0dXJlcyB0byBrbm93LiAgSSB1c2UgdGhlbSBpbgphIGZldyBhcHBsaWNhdGlvbnMsIGFuZCBJIHRoaW5rIGl0IGlzIGdvb2QgdG8ga2VlcCBhIGBoZWFwJyBtb2R1bGUKYXJvdW5kLiA6LSkKCi0tLS0tLS0tLS0tLS0tLS0tLS0tClsxXSBUaGUgZGlzayBiYWxhbmNpbmcgYWxnb3JpdGhtcyB3aGljaCBhcmUgY3VycmVudCwgbm93YWRheXMsIGFyZQptb3JlIGFubm95aW5nIHRoYW4gY2xldmVyLCBhbmQgdGhpcyBpcyBhIGNvbnNlcXVlbmNlIG9mIHRoZSBzZWVraW5nCmNhcGFiaWxpdGllcyBvZiB0aGUgZGlza3MuICBPbiBkZXZpY2VzIHdoaWNoIGNhbm5vdCBzZWVrLCBsaWtlIGJpZwp0YXBlIGRyaXZlcywgdGhlIHN0b3J5IHdhcyBxdWl0ZSBkaWZmZXJlbnQsIGFuZCBvbmUgaGFkIHRvIGJlIHZlcnkKY2xldmVyIHRvIGVuc3VyZSAoZmFyIGluIGFkdmFuY2UpIHRoYXQgZWFjaCB0YXBlIG1vdmVtZW50IHdpbGwgYmUgdGhlCm1vc3QgZWZmZWN0aXZlIHBvc3NpYmxlICh0aGF0IGlzLCB3aWxsIGJlc3QgcGFydGljaXBhdGUgYXQKInByb2dyZXNzaW5nIiB0aGUgbWVyZ2UpLiAgU29tZSB0YXBlcyB3ZXJlIGV2ZW4gYWJsZSB0byByZWFkCmJhY2t3YXJkcywgYW5kIHRoaXMgd2FzIGFsc28gdXNlZCB0byBhdm9pZCB0aGUgcmV3aW5kaW5nIHRpbWUuCkJlbGlldmUgbWUsIHJlYWwgZ29vZCB0YXBlIHNvcnRzIHdlcmUgcXVpdGUgc3BlY3RhY3VsYXIgdG8gd2F0Y2ghCkZyb20gYWxsIHRpbWVzLCBzb3J0aW5nIGhhcyBhbHdheXMgYmVlbiBhIEdyZWF0IEFydCEgOi0pCiIiIgoKX19hbGxfXyA9IFsnaGVhcHB1c2gnLCAnaGVhcHBvcCcsICdoZWFwaWZ5JywgJ2hlYXByZXBsYWNlJywgJ21lcmdlJywKICAgICAgICAgICAnbmxhcmdlc3QnLCAnbnNtYWxsZXN0JywgJ2hlYXBwdXNocG9wJ10KCmZyb20gaXRlcnRvb2xzIGltcG9ydCBpc2xpY2UsIHJlcGVhdCwgY291bnQsIHRlZSwgY2hhaW4KaW1wb3J0IGJpc2VjdAoKZGVmIGhlYXBwdXNoKGhlYXAsIGl0ZW0pOgogICAgIiIiUHVzaCBpdGVtIG9udG8gaGVhcCwgbWFpbnRhaW5pbmcgdGhlIGhlYXAgaW52YXJpYW50LiIiIgogICAgaGVhcC5hcHBlbmQoaXRlbSkKICAgIF9zaWZ0ZG93bihoZWFwLCAwLCBsZW4oaGVhcCktMSkKCmRlZiBoZWFwcG9wKGhlYXApOgogICAgIiIiUG9wIHRoZSBzbWFsbGVzdCBpdGVtIG9mZiB0aGUgaGVhcCwgbWFpbnRhaW5pbmcgdGhlIGhlYXAgaW52YXJpYW50LiIiIgogICAgbGFzdGVsdCA9IGhlYXAucG9wKCkgICAgIyByYWlzZXMgYXBwcm9wcmlhdGUgSW5kZXhFcnJvciBpZiBoZWFwIGlzIGVtcHR5CiAgICBpZiBoZWFwOgogICAgICAgIHJldHVybml0ZW0gPSBoZWFwWzBdCiAgICAgICAgaGVhcFswXSA9IGxhc3RlbHQKICAgICAgICBfc2lmdHVwKGhlYXAsIDApCiAgICBlbHNlOgogICAgICAgIHJldHVybml0ZW0gPSBsYXN0ZWx0CiAgICByZXR1cm4gcmV0dXJuaXRlbQoKZGVmIGhlYXByZXBsYWNlKGhlYXAsIGl0ZW0pOgogICAgIiIiUG9wIGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgc21hbGxlc3QgdmFsdWUsIGFuZCBhZGQgdGhlIG5ldyBpdGVtLgoKICAgIFRoaXMgaXMgbW9yZSBlZmZpY2llbnQgdGhhbiBoZWFwcG9wKCkgZm9sbG93ZWQgYnkgaGVhcHB1c2goKSwgYW5kIGNhbiBiZQogICAgbW9yZSBhcHByb3ByaWF0ZSB3aGVuIHVzaW5nIGEgZml4ZWQtc2l6ZSBoZWFwLiAgTm90ZSB0aGF0IHRoZSB2YWx1ZQogICAgcmV0dXJuZWQgbWF5IGJlIGxhcmdlciB0aGFuIGl0ZW0hICBUaGF0IGNvbnN0cmFpbnMgcmVhc29uYWJsZSB1c2VzIG9mCiAgICB0aGlzIHJvdXRpbmUgdW5sZXNzIHdyaXR0ZW4gYXMgcGFydCBvZiBhIGNvbmRpdGlvbmFsIHJlcGxhY2VtZW50OgoKICAgICAgICBpZiBpdGVtID4gaGVhcFswXToKICAgICAgICAgICAgaXRlbSA9IGhlYXByZXBsYWNlKGhlYXAsIGl0ZW0pCiAgICAiIiIKICAgIHJldHVybml0ZW0gPSBoZWFwWzBdICAgICMgcmFpc2VzIGFwcHJvcHJpYXRlIEluZGV4RXJyb3IgaWYgaGVhcCBpcyBlbXB0eQogICAgaGVhcFswXSA9IGl0ZW0KICAgIF9zaWZ0dXAoaGVhcCwgMCkKICAgIHJldHVybiByZXR1cm5pdGVtCgpkZWYgaGVhcHB1c2hwb3AoaGVhcCwgaXRlbSk6CiAgICAiIiJGYXN0IHZlcnNpb24gb2YgYSBoZWFwcHVzaCBmb2xsb3dlZCBieSBhIGhlYXBwb3AuIiIiCiAgICBpZiBoZWFwIGFuZCBoZWFwWzBdIDwgaXRlbToKICAgICAgICBpdGVtLCBoZWFwWzBdID0gaGVhcFswXSwgaXRlbQogICAgICAgIF9zaWZ0dXAoaGVhcCwgMCkKICAgIHJldHVybiBpdGVtCgpkZWYgaGVhcGlmeSh4KToKICAgICIiIlRyYW5zZm9ybSBsaXN0IGludG8gYSBoZWFwLCBpbi1wbGFjZSwgaW4gTyhsZW4oeCkpIHRpbWUuIiIiCiAgICBuID0gbGVuKHgpCiAgICAjIFRyYW5zZm9ybSBib3R0b20tdXAuICBUaGUgbGFyZ2VzdCBpbmRleCB0aGVyZSdzIGFueSBwb2ludCB0byBsb29raW5nIGF0CiAgICAjIGlzIHRoZSBsYXJnZXN0IHdpdGggYSBjaGlsZCBpbmRleCBpbi1yYW5nZSwgc28gbXVzdCBoYXZlIDIqaSArIDEgPCBuLAogICAgIyBvciBpIDwgKG4tMSkvMi4gIElmIG4gaXMgZXZlbiA9IDIqaiwgdGhpcyBpcyAoMipqLTEpLzIgPSBqLTEvMiBzbwogICAgIyBqLTEgaXMgdGhlIGxhcmdlc3QsIHdoaWNoIGlzIG4vLzIgLSAxLiAgSWYgbiBpcyBvZGQgPSAyKmorMSwgdGhpcyBpcwogICAgIyAoMipqKzEtMSkvMiA9IGogc28gai0xIGlzIHRoZSBsYXJnZXN0LCBhbmQgdGhhdCdzIGFnYWluIG4vLzItMS4KICAgIGZvciBpIGluIHJldmVyc2VkKHJhbmdlKG4vLzIpKToKICAgICAgICBfc2lmdHVwKHgsIGkpCgpkZWYgbmxhcmdlc3QobiwgaXRlcmFibGUpOgogICAgIiIiRmluZCB0aGUgbiBsYXJnZXN0IGVsZW1lbnRzIGluIGEgZGF0YXNldC4KCiAgICBFcXVpdmFsZW50IHRvOiAgc29ydGVkKGl0ZXJhYmxlLCByZXZlcnNlPVRydWUpWzpuXQogICAgIiIiCiAgICBpZiBuIDwgMDoKICAgICAgICByZXR1cm4gW10KICAgIGl0ID0gaXRlcihpdGVyYWJsZSkKICAgIHJlc3VsdCA9IGxpc3QoaXNsaWNlKGl0LCBuKSkKICAgIGlmIG5vdCByZXN1bHQ6CiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgaGVhcGlmeShyZXN1bHQpCiAgICBfaGVhcHB1c2hwb3AgPSBoZWFwcHVzaHBvcAogICAgZm9yIGVsZW0gaW4gaXQ6CiAgICAgICAgX2hlYXBwdXNocG9wKHJlc3VsdCwgZWxlbSkKICAgIHJlc3VsdC5zb3J0KHJldmVyc2U9VHJ1ZSkKICAgIHJldHVybiByZXN1bHQKCmRlZiBuc21hbGxlc3QobiwgaXRlcmFibGUpOgogICAgIiIiRmluZCB0aGUgbiBzbWFsbGVzdCBlbGVtZW50cyBpbiBhIGRhdGFzZXQuCgogICAgRXF1aXZhbGVudCB0bzogIHNvcnRlZChpdGVyYWJsZSlbOm5dCiAgICAiIiIKICAgIGlmIG4gPCAwOgogICAgICAgIHJldHVybiBbXQogICAgaWYgaGFzYXR0cihpdGVyYWJsZSwgJ19fbGVuX18nKSBhbmQgbiAqIDEwIDw9IGxlbihpdGVyYWJsZSk6CiAgICAgICAgIyBGb3Igc21hbGxlciB2YWx1ZXMgb2YgbiwgdGhlIGJpc2VjdCBtZXRob2QgaXMgZmFzdGVyIHRoYW4gYSBtaW5oZWFwLgogICAgICAgICMgSXQgaXMgYWxzbyBtZW1vcnkgZWZmaWNpZW50LCBjb25zdW1pbmcgb25seSBuIGVsZW1lbnRzIG9mIHNwYWNlLgogICAgICAgIGl0ID0gaXRlcihpdGVyYWJsZSkKICAgICAgICByZXN1bHQgPSBzb3J0ZWQoaXNsaWNlKGl0LCAwLCBuKSkKICAgICAgICBpZiBub3QgcmVzdWx0OgogICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgaW5zb3J0ID0gYmlzZWN0Lmluc29ydAogICAgICAgIHBvcCA9IHJlc3VsdC5wb3AKICAgICAgICBsb3MgPSByZXN1bHRbLTFdICAgICMgbG9zIC0tPiBMYXJnZXN0IG9mIHRoZSBuc21hbGxlc3QKICAgICAgICBmb3IgZWxlbSBpbiBpdDoKICAgICAgICAgICAgaWYgZWxlbSA8IGxvczoKICAgICAgICAgICAgICAgIGluc29ydChyZXN1bHQsIGVsZW0pCiAgICAgICAgICAgICAgICBwb3AoKQogICAgICAgICAgICAgICAgbG9zID0gcmVzdWx0Wy0xXQogICAgICAgIHJldHVybiByZXN1bHQKICAgICMgQW4gYWx0ZXJuYXRpdmUgYXBwcm9hY2ggbWFuaWZlc3RzIHRoZSB3aG9sZSBpdGVyYWJsZSBpbiBtZW1vcnkgYnV0CiAgICAjIHNhdmVzIGNvbXBhcmlzb25zIGJ5IGhlYXBpZnlpbmcgYWxsIGF0IG9uY2UuICBBbHNvLCBzYXZlcyB0aW1lCiAgICAjIG92ZXIgYmlzZWN0Lmluc29ydCgpIHdoaWNoIGhhcyBPKG4pIGRhdGEgbW92ZW1lbnQgdGltZSBmb3IgZXZlcnkKICAgICMgaW5zZXJ0aW9uLiAgRmluZGluZyB0aGUgbiBzbWFsbGVzdCBvZiBhbiBtIGxlbmd0aCBpdGVyYWJsZSByZXF1aXJlcwogICAgIyAgICBPKG0pICsgTyhuIGxvZyBtKSBjb21wYXJpc29ucy4KICAgIGggPSBsaXN0KGl0ZXJhYmxlKQogICAgaGVhcGlmeShoKQogICAgcmV0dXJuIGxpc3QobWFwKGhlYXBwb3AsIHJlcGVhdChoLCBtaW4obiwgbGVuKGgpKSkpKQoKIyAnaGVhcCcgaXMgYSBoZWFwIGF0IGFsbCBpbmRpY2VzID49IHN0YXJ0cG9zLCBleGNlcHQgcG9zc2libHkgZm9yIHBvcy4gIHBvcwojIGlzIHRoZSBpbmRleCBvZiBhIGxlYWYgd2l0aCBhIHBvc3NpYmx5IG91dC1vZi1vcmRlciB2YWx1ZS4gIFJlc3RvcmUgdGhlCiMgaGVhcCBpbnZhcmlhbnQuCmRlZiBfc2lmdGRvd24oaGVhcCwgc3RhcnRwb3MsIHBvcyk6CiAgICBuZXdpdGVtID0gaGVhcFtwb3NdCiAgICAjIEZvbGxvdyB0aGUgcGF0aCB0byB0aGUgcm9vdCwgbW92aW5nIHBhcmVudHMgZG93biB1bnRpbCBmaW5kaW5nIGEgcGxhY2UKICAgICMgbmV3aXRlbSBmaXRzLgogICAgd2hpbGUgcG9zID4gc3RhcnRwb3M6CiAgICAgICAgcGFyZW50cG9zID0gKHBvcyAtIDEpID4+IDEKICAgICAgICBwYXJlbnQgPSBoZWFwW3BhcmVudHBvc10KICAgICAgICBpZiBuZXdpdGVtIDwgcGFyZW50OgogICAgICAgICAgICBoZWFwW3Bvc10gPSBwYXJlbnQKICAgICAgICAgICAgcG9zID0gcGFyZW50cG9zCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgYnJlYWsKICAgIGhlYXBbcG9zXSA9IG5ld2l0ZW0KCiMgVGhlIGNoaWxkIGluZGljZXMgb2YgaGVhcCBpbmRleCBwb3MgYXJlIGFscmVhZHkgaGVhcHMsIGFuZCB3ZSB3YW50IHRvIG1ha2UKIyBhIGhlYXAgYXQgaW5kZXggcG9zIHRvby4gIFdlIGRvIHRoaXMgYnkgYnViYmxpbmcgdGhlIHNtYWxsZXIgY2hpbGQgb2YKIyBwb3MgdXAgKGFuZCBzbyBvbiB3aXRoIHRoYXQgY2hpbGQncyBjaGlsZHJlbiwgZXRjKSB1bnRpbCBoaXR0aW5nIGEgbGVhZiwKIyB0aGVuIHVzaW5nIF9zaWZ0ZG93biB0byBtb3ZlIHRoZSBvZGRiYWxsIG9yaWdpbmFsbHkgYXQgaW5kZXggcG9zIGludG8gcGxhY2UuCiMKIyBXZSAqY291bGQqIGJyZWFrIG91dCBvZiB0aGUgbG9vcCBhcyBzb29uIGFzIHdlIGZpbmQgYSBwb3Mgd2hlcmUgbmV3aXRlbSA8PQojIGJvdGggaXRzIGNoaWxkcmVuLCBidXQgdHVybnMgb3V0IHRoYXQncyBub3QgYSBnb29kIGlkZWEsIGFuZCBkZXNwaXRlIHRoYXQKIyBtYW55IGJvb2tzIHdyaXRlIHRoZSBhbGdvcml0aG0gdGhhdCB3YXkuICBEdXJpbmcgYSBoZWFwIHBvcCwgdGhlIGxhc3QgYXJyYXkKIyBlbGVtZW50IGlzIHNpZnRlZCBpbiwgYW5kIHRoYXQgdGVuZHMgdG8gYmUgbGFyZ2UsIHNvIHRoYXQgY29tcGFyaW5nIGl0CiMgYWdhaW5zdCB2YWx1ZXMgc3RhcnRpbmcgZnJvbSB0aGUgcm9vdCB1c3VhbGx5IGRvZXNuJ3QgcGF5ICg9IHVzdWFsbHkgZG9lc24ndAojIGdldCB1cyBvdXQgb2YgdGhlIGxvb3AgZWFybHkpLiAgU2VlIEtudXRoLCBWb2x1bWUgMywgd2hlcmUgdGhpcyBpcwojIGV4cGxhaW5lZCBhbmQgcXVhbnRpZmllZCBpbiBhbiBleGVyY2lzZS4KIwojIEN1dHRpbmcgdGhlICMgb2YgY29tcGFyaXNvbnMgaXMgaW1wb3J0YW50LCBzaW5jZSB0aGVzZSByb3V0aW5lcyBoYXZlIG5vCiMgd2F5IHRvIGV4dHJhY3QgInRoZSBwcmlvcml0eSIgZnJvbSBhbiBhcnJheSBlbGVtZW50LCBzbyB0aGF0IGludGVsbGlnZW5jZQojIGlzIGxpa2VseSB0byBiZSBoaWRpbmcgaW4gY3VzdG9tIGNvbXBhcmlzb24gbWV0aG9kcywgb3IgaW4gYXJyYXkgZWxlbWVudHMKIyBzdG9yaW5nIChwcmlvcml0eSwgcmVjb3JkKSB0dXBsZXMuICBDb21wYXJpc29ucyBhcmUgdGh1cyBwb3RlbnRpYWxseQojIGV4cGVuc2l2ZS4KIwojIE9uIHJhbmRvbSBhcnJheXMgb2YgbGVuZ3RoIDEwMDAsIG1ha2luZyB0aGlzIGNoYW5nZSBjdXQgdGhlIG51bWJlciBvZgojIGNvbXBhcmlzb25zIG1hZGUgYnkgaGVhcGlmeSgpIGEgbGl0dGxlLCBhbmQgdGhvc2UgbWFkZSBieSBleGhhdXN0aXZlCiMgaGVhcHBvcCgpIGEgbG90LCBpbiBhY2NvcmQgd2l0aCB0aGVvcnkuICBIZXJlIGFyZSB0eXBpY2FsIHJlc3VsdHMgZnJvbSAzCiMgcnVucyAoMyBqdXN0IHRvIGRlbW9uc3RyYXRlIGhvdyBzbWFsbCB0aGUgdmFyaWFuY2UgaXMpOgojCiMgQ29tcGFyZXMgbmVlZGVkIGJ5IGhlYXBpZnkgICAgIENvbXBhcmVzIG5lZWRlZCBieSAxMDAwIGhlYXBwb3BzCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgMTgzNyBjdXQgdG8gMTY2MyAgICAgICAgICAgICAgIDE0OTk2IGN1dCB0byA4NjgwCiMgMTg1NSBjdXQgdG8gMTY1OSAgICAgICAgICAgICAgIDE0OTY2IGN1dCB0byA4Njc4CiMgMTg0NyBjdXQgdG8gMTY2MCAgICAgICAgICAgICAgIDE1MDI0IGN1dCB0byA4NzAzCiMKIyBCdWlsZGluZyB0aGUgaGVhcCBieSB1c2luZyBoZWFwcHVzaCgpIDEwMDAgdGltZXMgaW5zdGVhZCByZXF1aXJlZAojIDIxOTgsIDIxNDgsIGFuZCAyMjE5IGNvbXBhcmVzOiAgaGVhcGlmeSgpIGlzIG1vcmUgZWZmaWNpZW50LCB3aGVuCiMgeW91IGNhbiB1c2UgaXQuCiMKIyBUaGUgdG90YWwgY29tcGFyZXMgbmVlZGVkIGJ5IGxpc3Quc29ydCgpIG9uIHRoZSBzYW1lIGxpc3RzIHdlcmUgODYyNywKIyA4NjI3LCBhbmQgODYzMiAodGhpcyBzaG91bGQgYmUgY29tcGFyZWQgdG8gdGhlIHN1bSBvZiBoZWFwaWZ5KCkgYW5kCiMgaGVhcHBvcCgpIGNvbXBhcmVzKTogIGxpc3Quc29ydCgpIGlzICh1bnN1cnByaXNpbmdseSEpIG1vcmUgZWZmaWNpZW50CiMgZm9yIHNvcnRpbmcuCgpkZWYgX3NpZnR1cChoZWFwLCBwb3MpOgogICAgZW5kcG9zID0gbGVuKGhlYXApCiAgICBzdGFydHBvcyA9IHBvcwogICAgbmV3aXRlbSA9IGhlYXBbcG9zXQogICAgIyBCdWJibGUgdXAgdGhlIHNtYWxsZXIgY2hpbGQgdW50aWwgaGl0dGluZyBhIGxlYWYuCiAgICBjaGlsZHBvcyA9IDIqcG9zICsgMSAgICAjIGxlZnRtb3N0IGNoaWxkIHBvc2l0aW9uCiAgICB3aGlsZSBjaGlsZHBvcyA8IGVuZHBvczoKICAgICAgICAjIFNldCBjaGlsZHBvcyB0byBpbmRleCBvZiBzbWFsbGVyIGNoaWxkLgogICAgICAgIHJpZ2h0cG9zID0gY2hpbGRwb3MgKyAxCiAgICAgICAgaWYgcmlnaHRwb3MgPCBlbmRwb3MgYW5kIG5vdCBoZWFwW2NoaWxkcG9zXSA8IGhlYXBbcmlnaHRwb3NdOgogICAgICAgICAgICBjaGlsZHBvcyA9IHJpZ2h0cG9zCiAgICAgICAgIyBNb3ZlIHRoZSBzbWFsbGVyIGNoaWxkIHVwLgogICAgICAgIGhlYXBbcG9zXSA9IGhlYXBbY2hpbGRwb3NdCiAgICAgICAgcG9zID0gY2hpbGRwb3MKICAgICAgICBjaGlsZHBvcyA9IDIqcG9zICsgMQogICAgIyBUaGUgbGVhZiBhdCBwb3MgaXMgZW1wdHkgbm93LiAgUHV0IG5ld2l0ZW0gdGhlcmUsIGFuZCBidWJibGUgaXQgdXAKICAgICMgdG8gaXRzIGZpbmFsIHJlc3RpbmcgcGxhY2UgKGJ5IHNpZnRpbmcgaXRzIHBhcmVudHMgZG93bikuCiAgICBoZWFwW3Bvc10gPSBuZXdpdGVtCiAgICBfc2lmdGRvd24oaGVhcCwgc3RhcnRwb3MsIHBvcykKCiMgbm90IGF2YWlsYWJsZSBpbiBicnl0aG9uCiMgSWYgYXZhaWxhYmxlLCB1c2UgQyBpbXBsZW1lbnRhdGlvbgojdHJ5OgojICAgIGZyb20gX2hlYXBxIGltcG9ydCAqCiNleGNlcHQgSW1wb3J0RXJyb3I6CiMgICAgcGFzcwoKZGVmIG1lcmdlKCppdGVyYWJsZXMpOgogICAgJycnTWVyZ2UgbXVsdGlwbGUgc29ydGVkIGlucHV0cyBpbnRvIGEgc2luZ2xlIHNvcnRlZCBvdXRwdXQuCgogICAgU2ltaWxhciB0byBzb3J0ZWQoaXRlcnRvb2xzLmNoYWluKCppdGVyYWJsZXMpKSBidXQgcmV0dXJucyBhIGdlbmVyYXRvciwKICAgIGRvZXMgbm90IHB1bGwgdGhlIGRhdGEgaW50byBtZW1vcnkgYWxsIGF0IG9uY2UsIGFuZCBhc3N1bWVzIHRoYXQgZWFjaCBvZgogICAgdGhlIGlucHV0IHN0cmVhbXMgaXMgYWxyZWFkeSBzb3J0ZWQgKHNtYWxsZXN0IHRvIGxhcmdlc3QpLgoKICAgID4+PiBsaXN0KG1lcmdlKFsxLDMsNSw3XSwgWzAsMiw0LDhdLCBbNSwxMCwxNSwyMF0sIFtdLCBbMjVdKSkKICAgIFswLCAxLCAyLCAzLCA0LCA1LCA1LCA3LCA4LCAxMCwgMTUsIDIwLCAyNV0KCiAgICAnJycKICAgIF9oZWFwcG9wLCBfaGVhcHJlcGxhY2UsIF9TdG9wSXRlcmF0aW9uID0gaGVhcHBvcCwgaGVhcHJlcGxhY2UsIFN0b3BJdGVyYXRpb24KCiAgICBoID0gW10KICAgIGhfYXBwZW5kID0gaC5hcHBlbmQKICAgIGZvciBpdG51bSwgaXQgaW4gZW51bWVyYXRlKG1hcChpdGVyLCBpdGVyYWJsZXMpKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIG5leHQgPSBpdC5fX25leHRfXwogICAgICAgICAgICBoX2FwcGVuZChbbmV4dCgpLCBpdG51bSwgbmV4dF0pCiAgICAgICAgZXhjZXB0IF9TdG9wSXRlcmF0aW9uOgogICAgICAgICAgICBwYXNzCiAgICBoZWFwaWZ5KGgpCgogICAgd2hpbGUgMToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdoaWxlIDE6CiAgICAgICAgICAgICAgICB2LCBpdG51bSwgbmV4dCA9IHMgPSBoWzBdICAgIyByYWlzZXMgSW5kZXhFcnJvciB3aGVuIGggaXMgZW1wdHkKICAgICAgICAgICAgICAgIHlpZWxkIHYKICAgICAgICAgICAgICAgIHNbMF0gPSBuZXh0KCkgICAgICAgICAgICAgICAjIHJhaXNlcyBTdG9wSXRlcmF0aW9uIHdoZW4gZXhoYXVzdGVkCiAgICAgICAgICAgICAgICBfaGVhcHJlcGxhY2UoaCwgcykgICAgICAgICAgIyByZXN0b3JlIGhlYXAgY29uZGl0aW9uCiAgICAgICAgZXhjZXB0IF9TdG9wSXRlcmF0aW9uOgogICAgICAgICAgICBfaGVhcHBvcChoKSAgICAgICAgICAgICAgICAgICAgICMgcmVtb3ZlIGVtcHR5IGl0ZXJhdG9yCiAgICAgICAgZXhjZXB0IEluZGV4RXJyb3I6CiAgICAgICAgICAgIHJldHVybgoKIyBFeHRlbmQgdGhlIGltcGxlbWVudGF0aW9ucyBvZiBuc21hbGxlc3QgYW5kIG5sYXJnZXN0IHRvIHVzZSBhIGtleT0gYXJndW1lbnQKX25zbWFsbGVzdCA9IG5zbWFsbGVzdApkZWYgbnNtYWxsZXN0KG4sIGl0ZXJhYmxlLCBrZXk9Tm9uZSk6CiAgICAiIiJGaW5kIHRoZSBuIHNtYWxsZXN0IGVsZW1lbnRzIGluIGEgZGF0YXNldC4KCiAgICBFcXVpdmFsZW50IHRvOiAgc29ydGVkKGl0ZXJhYmxlLCBrZXk9a2V5KVs6bl0KICAgICIiIgogICAgIyBTaG9ydC1jdXQgZm9yIG49PTEgaXMgdG8gdXNlIG1pbigpIHdoZW4gbGVuKGl0ZXJhYmxlKT4wCiAgICBpZiBuID09IDE6CiAgICAgICAgaXQgPSBpdGVyKGl0ZXJhYmxlKQogICAgICAgIGhlYWQgPSBsaXN0KGlzbGljZShpdCwgMSkpCiAgICAgICAgaWYgbm90IGhlYWQ6CiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgIGlmIGtleSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gW21pbihjaGFpbihoZWFkLCBpdCkpXQogICAgICAgIHJldHVybiBbbWluKGNoYWluKGhlYWQsIGl0KSwga2V5PWtleSldCgogICAgIyBXaGVuIG4+PXNpemUsIGl0J3MgZmFzdGVyIHRvIHVzZSBzb3J0ZWQoKQogICAgdHJ5OgogICAgICAgIHNpemUgPSBsZW4oaXRlcmFibGUpCiAgICBleGNlcHQgKFR5cGVFcnJvciwgQXR0cmlidXRlRXJyb3IpOgogICAgICAgIHBhc3MKICAgIGVsc2U6CiAgICAgICAgaWYgbiA+PSBzaXplOgogICAgICAgICAgICByZXR1cm4gc29ydGVkKGl0ZXJhYmxlLCBrZXk9a2V5KVs6bl0KCiAgICAjIFdoZW4ga2V5IGlzIG5vbmUsIHVzZSBzaW1wbGVyIGRlY29yYXRpb24KICAgIGlmIGtleSBpcyBOb25lOgogICAgICAgIGl0ID0gemlwKGl0ZXJhYmxlLCBjb3VudCgpKSAgICAgICAgICAgICAgICAgICAgICAgICAjIGRlY29yYXRlCiAgICAgICAgcmVzdWx0ID0gX25zbWFsbGVzdChuLCBpdCkKICAgICAgICByZXR1cm4gW3JbMF0gZm9yIHIgaW4gcmVzdWx0XSAgICAgICAgICAgICAgICAgICAgICAgIyB1bmRlY29yYXRlCgogICAgIyBHZW5lcmFsIGNhc2UsIHNsb3dlc3QgbWV0aG9kCiAgICBpbjEsIGluMiA9IHRlZShpdGVyYWJsZSkKICAgIGl0ID0gemlwKG1hcChrZXksIGluMSksIGNvdW50KCksIGluMikgICAgICAgICAgICAgICAgICAgIyBkZWNvcmF0ZQogICAgcmVzdWx0ID0gX25zbWFsbGVzdChuLCBpdCkKICAgIHJldHVybiBbclsyXSBmb3IgciBpbiByZXN1bHRdICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB1bmRlY29yYXRlCgoKX25sYXJnZXN0ID0gbmxhcmdlc3QKZGVmIG5sYXJnZXN0KG4sIGl0ZXJhYmxlLCBrZXk9Tm9uZSk6CiAgICAiIiJGaW5kIHRoZSBuIGxhcmdlc3QgZWxlbWVudHMgaW4gYSBkYXRhc2V0LgogICAgCiAgICAgRXF1aXZhbGVudCB0bzogIHNvcnRlZChpdGVyYWJsZSwga2V5PWtleSwgcmV2ZXJzZT1UcnVlKVs6bl0KCiAgICAgU2hvcnQtY3V0IGZvciBuPT0xIGlzIHRvIHVzZSBtYXgoKSB3aGVuIGxlbihpdGVyYWJsZSk+MAogICAgIiIiCiAgICBpZiBuID09IDE6CiAgICAgICAgaXQgPSBpdGVyKGl0ZXJhYmxlKQogICAgICAgIGhlYWQgPSBsaXN0KGlzbGljZShpdCwgMSkpCiAgICAgICAgaWYgbm90IGhlYWQ6CiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgIGlmIGtleSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gW21heChjaGFpbihoZWFkLCBpdCkpXQogICAgICAgIHJldHVybiBbbWF4KGNoYWluKGhlYWQsIGl0KSwga2V5PWtleSldCgogICAgIyBXaGVuIG4+PXNpemUsIGl0J3MgZmFzdGVyIHRvIHVzZSBzb3J0ZWQoKQogICAgdHJ5OgogICAgICAgIHNpemUgPSBsZW4oaXRlcmFibGUpCiAgICBleGNlcHQgKFR5cGVFcnJvciwgQXR0cmlidXRlRXJyb3IpOgogICAgICAgIHBhc3MKICAgIGVsc2U6CiAgICAgICAgaWYgbiA+PSBzaXplOgogICAgICAgICAgICByZXR1cm4gc29ydGVkKGl0ZXJhYmxlLCBrZXk9a2V5LCByZXZlcnNlPVRydWUpWzpuXQoKICAgICMgV2hlbiBrZXkgaXMgbm9uZSwgdXNlIHNpbXBsZXIgZGVjb3JhdGlvbgogICAgaWYga2V5IGlzIE5vbmU6CiAgICAgICAgaXQgPSB6aXAoaXRlcmFibGUsIGNvdW50KDAsLTEpKSAgICAgICAgICAgICAgICAgICAgICMgZGVjb3JhdGUKICAgICAgICByZXN1bHQgPSBfbmxhcmdlc3QobiwgaXQpCiAgICAgICAgcmV0dXJuIFtyWzBdIGZvciByIGluIHJlc3VsdF0gICAgICAgICAgICAgICAgICAgICAgICMgdW5kZWNvcmF0ZQoKICAgICMgR2VuZXJhbCBjYXNlLCBzbG93ZXN0IG1ldGhvZAogICAgaW4xLCBpbjIgPSB0ZWUoaXRlcmFibGUpCiAgICBpdCA9IHppcChtYXAoa2V5LCBpbjEpLCBjb3VudCgwLC0xKSwgaW4yKSAgICAgICAgICAgICAgICMgZGVjb3JhdGUKICAgIHJlc3VsdCA9IF9ubGFyZ2VzdChuLCBpdCkKICAgIHJldHVybiBbclsyXSBmb3IgciBpbiByZXN1bHRdICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB1bmRlY29yYXRlCg==',
'/Lib/io.py':'aW1wb3J0IGJ1aWx0aW5zCgpvcGVuID0gYnVpbHRpbnMub3BlbgoKY2xhc3MgU3RyaW5nSU86CgogICAgZGVmIF9faW5pdF9fKHNlbGYsaW5pdGlhbF92YWx1ZT0nJyxuZXdsaW5lPU5vbmUpOgogICAgICAgIHNlbGYudmFsdWUgPSBpbml0aWFsX3ZhbHVlCiAgICAgICAgc2VsZi5uZXdsaW5lID0gbmV3bGluZQogICAgICAgIHNlbGYuX3BvcyA9IGxlbihpbml0aWFsX3ZhbHVlKQogICAgCiAgICBkZWYgd3JpdGUoc2VsZixkYXRhKToKICAgICAgICBzZWxmLnZhbHVlICs9IGRhdGEKICAgIAogICAgZGVmIHJlYWQoc2VsZixuYj0tMSk6CiAgICAgICAgaWYgbmIhPS0xOgogICAgICAgICAgICByZXMgPSBzZWxmLnZhbHVlW3NlbGYuX3BvczpzZWxmLl9wb3MrbmJdCiAgICAgICAgICAgIHNlbGYuX3BvcyA9IG1pbihzZWxmLl9wb3MrbmIsbGVuKHNlbGYudmFsdWUpLTEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzID0gc2VsZi52YWx1ZVtzZWxmLl9wb3M6XQogICAgICAgICAgICBzZWxmLl9wb3MgPSBsZW4oc2VsZi52YWx1ZSktMQogICAgICAgIHJldHVybiByZXMK',
'/Lib/itertools.py':'',
'/Lib/keyword.py':'a3dsaXN0ID0gWwojLS1zdGFydCBrZXl3b3Jkcy0tCiAgICAgICAgJ0ZhbHNlJywKICAgICAgICAnTm9uZScsCiAgICAgICAgJ1RydWUnLAogICAgICAgICdhbmQnLAogICAgICAgICdhcycsCiAgICAgICAgJ2Fzc2VydCcsCiAgICAgICAgJ2JyZWFrJywKICAgICAgICAnY2xhc3MnLAogICAgICAgICdjb250aW51ZScsCiAgICAgICAgJ2RlZicsCiAgICAgICAgJ2RlbCcsCiAgICAgICAgJ2VsaWYnLAogICAgICAgICdlbHNlJywKICAgICAgICAnZXhjZXB0JywKICAgICAgICAnZmluYWxseScsCiAgICAgICAgJ2ZvcicsCiAgICAgICAgJ2Zyb20nLAogICAgICAgICdnbG9iYWwnLAogICAgICAgICdpZicsCiAgICAgICAgJ2ltcG9ydCcsCiAgICAgICAgJ2luJywKICAgICAgICAnaXMnLAogICAgICAgICdsYW1iZGEnLAogICAgICAgICdub25sb2NhbCcsCiAgICAgICAgJ25vdCcsCiAgICAgICAgJ29yJywKICAgICAgICAncGFzcycsCiAgICAgICAgJ3JhaXNlJywKICAgICAgICAncmV0dXJuJywKICAgICAgICAndHJ5JywKICAgICAgICAnd2hpbGUnLAogICAgICAgICd3aXRoJywKICAgICAgICAneWllbGQnLAojLS1lbmQga2V5d29yZHMtLQogICAgICAgIF0KCmRlZiBpc2tleXdvcmQod29yZCk6CiAgICByZXR1cm4gd29yZCBpbiBrd2xpc3QK',
'/Lib/linecache.py':'IiIiQ2FjaGUgbGluZXMgZnJvbSBmaWxlcy4KClRoaXMgaXMgaW50ZW5kZWQgdG8gcmVhZCBsaW5lcyBmcm9tIG1vZHVsZXMgaW1wb3J0ZWQgLS0gaGVuY2UgaWYgYSBmaWxlbmFtZQppcyBub3QgZm91bmQsIGl0IHdpbGwgbG9vayBkb3duIHRoZSBtb2R1bGUgc2VhcmNoIHBhdGggZm9yIGEgZmlsZSBieQp0aGF0IG5hbWUuCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKI2ZpeG1lIGJyeXRob24KI2ltcG9ydCB0b2tlbml6ZQoKX19hbGxfXyA9IFsiZ2V0bGluZSIsICJjbGVhcmNhY2hlIiwgImNoZWNrY2FjaGUiXQoKZGVmIGdldGxpbmUoZmlsZW5hbWUsIGxpbmVubywgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICBsaW5lcyA9IGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscykKICAgIGlmIDEgPD0gbGluZW5vIDw9IGxlbihsaW5lcyk6CiAgICAgICAgcmV0dXJuIGxpbmVzW2xpbmVuby0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgojIFRoZSBjYWNoZQoKY2FjaGUgPSB7fSAjIFRoZSBjYWNoZQoKCmRlZiBjbGVhcmNhY2hlKCk6CiAgICAiIiJDbGVhciB0aGUgY2FjaGUgZW50aXJlbHkuIiIiCgogICAgZ2xvYmFsIGNhY2hlCiAgICBjYWNoZSA9IHt9CgoKZGVmIGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgICIiIkdldCB0aGUgbGluZXMgZm9yIGEgZmlsZSBmcm9tIHRoZSBjYWNoZS4KICAgIFVwZGF0ZSB0aGUgY2FjaGUgaWYgaXQgZG9lc24ndCBjb250YWluIGFuIGVudHJ5IGZvciB0aGlzIGZpbGUgYWxyZWFkeS4iIiIKCiAgICBpZiBmaWxlbmFtZSBpbiBjYWNoZToKICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCiAgICBlbHNlOgogICAgICAgIHJldHVybiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHMpCgoKZGVmIGNoZWNrY2FjaGUoZmlsZW5hbWU9Tm9uZSk6CiAgICAiIiJEaXNjYXJkIGNhY2hlIGVudHJpZXMgdGhhdCBhcmUgb3V0IG9mIGRhdGUuCiAgICAoVGhpcyBpcyBub3QgY2hlY2tlZCB1cG9uIGVhY2ggY2FsbCEpIiIiCgogICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICBmaWxlbmFtZXMgPSBsaXN0KGNhY2hlLmtleXMoKSkKICAgIGVsc2U6CiAgICAgICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgICAgIGZpbGVuYW1lcyA9IFtmaWxlbmFtZV0KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KCiAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgIHNpemUsIG10aW1lLCBsaW5lcywgZnVsbG5hbWUgPSBjYWNoZVtmaWxlbmFtZV0KICAgICAgICBpZiBtdGltZSBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZSAgICMgbm8tb3AgZm9yIGZpbGVzIGxvYWRlZCB2aWEgYSBfX2xvYWRlcl9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWwgY2FjaGVbZmlsZW5hbWVdCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2l6ZSAhPSBzdGF0LnN0X3NpemUgb3IgbXRpbWUgIT0gc3RhdC5zdF9tdGltZToKICAgICAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQoKCmRlZiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICAiIiJVcGRhdGUgYSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuIGl0cyBsaXN0IG9mIGxpbmVzLgogICAgSWYgc29tZXRoaW5nJ3Mgd3JvbmcsIHByaW50IGEgbWVzc2FnZSwgZGlzY2FyZCB0aGUgY2FjaGUgZW50cnksCiAgICBhbmQgcmV0dXJuIGFuIGVtcHR5IGxpc3QuIiIiCgogICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQogICAgaWYgbm90IGZpbGVuYW1lIG9yIChmaWxlbmFtZS5zdGFydHN3aXRoKCc8JykgYW5kIGZpbGVuYW1lLmVuZHN3aXRoKCc+JykpOgogICAgICAgIHJldHVybiBbXQoKICAgIGZ1bGxuYW1lID0gZmlsZW5hbWUKICAgIHRyeToKICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgIGJhc2VuYW1lID0gZmlsZW5hbWUKCiAgICAgICAgIyBUcnkgZm9yIGEgX19sb2FkZXJfXywgaWYgYXZhaWxhYmxlCiAgICAgICAgaWYgbW9kdWxlX2dsb2JhbHMgYW5kICdfX2xvYWRlcl9fJyBpbiBtb2R1bGVfZ2xvYmFsczoKICAgICAgICAgICAgbmFtZSA9IG1vZHVsZV9nbG9iYWxzLmdldCgnX19uYW1lX18nKQogICAgICAgICAgICBsb2FkZXIgPSBtb2R1bGVfZ2xvYmFsc1snX19sb2FkZXJfXyddCiAgICAgICAgICAgIGdldF9zb3VyY2UgPSBnZXRhdHRyKGxvYWRlciwgJ2dldF9zb3VyY2UnLCBOb25lKQoKICAgICAgICAgICAgaWYgbmFtZSBhbmQgZ2V0X3NvdXJjZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZ2V0X3NvdXJjZShuYW1lKQogICAgICAgICAgICAgICAgZXhjZXB0IChJbXBvcnRFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gbHVjaywgdGhlIFBFUDMwMiBsb2FkZXIgY2Fubm90IGZpbmQgdGhlIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAjIGZvciB0aGlzIG1vZHVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbZmlsZW5hbWVdID0gKAogICAgICAgICAgICAgICAgICAgICAgICBsZW4oZGF0YSksIE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIFtsaW5lKydcbicgZm9yIGxpbmUgaW4gZGF0YS5zcGxpdGxpbmVzKCldLCBmdWxsbmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCgogICAgICAgICMgVHJ5IGxvb2tpbmcgdGhyb3VnaCB0aGUgbW9kdWxlIHNlYXJjaCBwYXRoLCB3aGljaCBpcyBvbmx5IHVzZWZ1bAogICAgICAgICMgd2hlbiBoYW5kbGluZyBhIHJlbGF0aXZlIGZpbGVuYW1lLgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgIyBUYWtlIGNhcmUgdG8gaGFuZGxlIHBhY2thZ2VzLgogICAgICAgIGlmIGJhc2VuYW1lID09ICdfX2luaXRfXy5weSc6CiAgICAgICAgICAgICMgZmlsZW5hbWUgcmVmZXJlcyB0byBhIHBhY2thZ2UKICAgICAgICAgICAgYmFzZW5hbWUgPSBmaWxlbmFtZQoKICAgICAgICBmb3IgZGlybmFtZSBpbiBzeXMucGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgYmFzZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBBdHRyaWJ1dGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIE5vdCBzdWZmaWNpZW50bHkgc3RyaW5nLWxpa2UgdG8gZG8gYW55dGhpbmcgdXNlZnVsIHdpdGguCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICNmaXhtZSBicnl0aG9uLCBpbnZhbGlkIHN5bnRheCAKICAgICAgICAgICAgI2V4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICNmaXhtZSBicnl0aG9uIHVuZXhwZWN0ZWQgdG9rZW4gZWxzZQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgcmV0dXJuIFtdCiAgICB0cnk6CiAgICAgICAgZnA9b3BlbihmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICN3aXRoIHRva2VuaXplLm9wZW4oZnVsbG5hbWUpIGFzIGZwOgogICAgICAgIGxpbmVzID0gZnAucmVhZGxpbmVzKCkKICAgICAgICBmcC5jbG9zZSgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gW10KICAgIGlmIGxpbmVzIGFuZCBub3QgbGluZXNbLTFdLmVuZHN3aXRoKCdcbicpOgogICAgICAgIGxpbmVzWy0xXSArPSAnXG4nCiAgICBzaXplLCBtdGltZSA9IHN0YXQuc3Rfc2l6ZSwgc3RhdC5zdF9tdGltZQogICAgY2FjaGVbZmlsZW5hbWVdID0gc2l6ZSwgbXRpbWUsIGxpbmVzLCBmdWxsbmFtZQogICAgcmV0dXJuIGxpbmVzCg==',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/local_storage.py':'IyBsb2NhbCBzdG9yYWdlIGluIGJyb3dzZXIKCmNsYXNzIExvY2FsU3RvcmFnZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgaWYgbm90IF9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlOgogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2xvY2FsIHN0b3JhZ2UgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcicpCiAgICAgICAgc2VsZi5zdG9yZSA9IF9fQlJZVEhPTl9fLmxvY2FsX3N0b3JhZ2UoKQogICAgICAgIAogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsa2V5KToKICAgICAgICBzZWxmLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiByZXMKICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsa2V5LHZhbHVlKToKICAgICAgICBzZWxmLnN0b3JlLnNldEl0ZW0oa2V5LHZhbHVlKQoKICAgICNpbXBsZW1lbnQgImluIiBmdW5jdGlvbmFsaXR5CiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBrZXlzKHNlbGYpOgogICAgICAgIHJldHVybiBsaXN0KHNlbGYuc3RvcmUpCgogICAgZGVmIHZhbHVlcyhzZWxmKToKICAgICAgICByZXR1cm4gW3NlbGYuX19nZXRpdGVtX18oaykgZm9yIGsgaW4gc2VsZi5rZXlzKCldCgogICAgZGVmIGl0ZW1zKHNlbGYpOgogICAgICAgIHJldHVybiB6aXAoc2VsZi5rZXlzKCksc2VsZi52YWx1ZXMoKSkKCnN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2UoKQoK',
'/Lib/markdown.py':'',
'/Lib/operator.py':'',
'/Lib/optparse.py':'',
'/Lib/os.py':'aW1wb3J0IF9vcwoKbmFtZT0iYnJ5dGhvbiIKCiNhbHRzZXA9Tm9uZQojY3VyZGlyPSIuIgoKZGVmIGRldm51bGwoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGRldm51bGwgbm90IHN1cHBvcnRlZCcpCgojZXh0c2VwPScuJwoKZGVmIGdldGxvYWRhdmcoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGdldGxvYWRhdmcgbm90IHN1cHBvcnRlZCcpCgojbGluZXNlcD0iXG4iCiNwYXRoc2VwPSI7IgojcGFyZGlyPSIuLiIKI3NlcD0nLycKCmRlZiB1cmFuZG9tKGxlbmd0aCk6CiAgICBfYz1bXQogICAgZm9yIF9pIGluIHJhbmdlKGxlbmd0aCk6CiAgICAgICAgX2MuYXBwZW5kKGNocihfb3MucmFuZGludCgwLDI1NSkpKQogICAgICAgIAogICAgcmV0dXJuICcnLmpvaW4oX2MpCgojaW1wb3J0IHBvc2l4cGF0aCBhcyBwYXRoCiNzeXMubW9kdWxlc1snb3MucGF0aCddID0gcGF0aAoKI2Zyb20gb3MucGF0aCBpbXBvcnQgKGN1cmRpciwgcGFyZGlyLCBzZXAsIHBhdGhzZXAsIGRlZnBhdGgsIGV4dHNlcCwgYWx0c2VwKQoKIyBQeXRob24gdXNlcyBmaXhlZCB2YWx1ZXMgZm9yIHRoZSBTRUVLXyBjb25zdGFudHM7IHRoZXkgYXJlIG1hcHBlZAojIHRvIG5hdGl2ZSBjb25zdGFudHMgaWYgbmVjZXNzYXJ5IGluIHBvc2l4bW9kdWxlLmMKU0VFS19TRVQgPSAwClNFRUtfQ1VSID0gMQpTRUVLX0VORCA9IDIKCmRlZiB3YWxrKHRvcCwgdG9wZG93bj1UcnVlLCBvbmVycm9yPU5vbmUsIGZvbGxvd2xpbmtzPUZhbHNlKToKICAgICNyZWNlaXZlIHNjb3BlIGVycm9yIGluIGJyeXRob24KICAgICMgd2h5IGhhdmUgb3Mud2FsayBpbiBicnl0aG9uPyAgc2VydmVyIHNpZGUgamF2YXNjcmlwdCAobm9kZWpzKQogICAgIyBpbW1lZGlhdGVseSBjYW4gdXNlIG9zLndhbGsgdG8gY29tcGlsZSBsaWJzIGFuZCBMaWIgbW9kdWxlcwogICAgIyB0byBqYXZhc2NyaXB0IGVxdWl2YWxlbnQuLgogICAgT1NFcnJvcignRnVuY3Rpb24gb3Mud2FsayBub3Qgc3VwcG9ydGVkIHlldCcpCiAgICByZXR1cm4KCiAgICAiIiJEaXJlY3RvcnkgdHJlZSBnZW5lcmF0b3IuCgogICAgRm9yIGVhY2ggZGlyZWN0b3J5IGluIHRoZSBkaXJlY3RvcnkgdHJlZSByb290ZWQgYXQgdG9wIChpbmNsdWRpbmcgdG9wCiAgICBpdHNlbGYsIGJ1dCBleGNsdWRpbmcgJy4nIGFuZCAnLi4nKSwgeWllbGRzIGEgMy10dXBsZQoKICAgICAgICBkaXJwYXRoLCBkaXJuYW1lcywgZmlsZW5hbWVzCgogICAgZGlycGF0aCBpcyBhIHN0cmluZywgdGhlIHBhdGggdG8gdGhlIGRpcmVjdG9yeS4gIGRpcm5hbWVzIGlzIGEgbGlzdCBvZgogICAgdGhlIG5hbWVzIG9mIHRoZSBzdWJkaXJlY3RvcmllcyBpbiBkaXJwYXRoIChleGNsdWRpbmcgJy4nIGFuZCAnLi4nKS4KICAgIGZpbGVuYW1lcyBpcyBhIGxpc3Qgb2YgdGhlIG5hbWVzIG9mIHRoZSBub24tZGlyZWN0b3J5IGZpbGVzIGluIGRpcnBhdGguCiAgICBOb3RlIHRoYXQgdGhlIG5hbWVzIGluIHRoZSBsaXN0cyBhcmUganVzdCBuYW1lcywgd2l0aCBubyBwYXRoIGNvbXBvbmVudHMuCiAgICBUbyBnZXQgYSBmdWxsIHBhdGggKHdoaWNoIGJlZ2lucyB3aXRoIHRvcCkgdG8gYSBmaWxlIG9yIGRpcmVjdG9yeSBpbgogICAgZGlycGF0aCwgZG8gb3MucGF0aC5qb2luKGRpcnBhdGgsIG5hbWUpLgoKICAgIElmIG9wdGlvbmFsIGFyZyAndG9wZG93bicgaXMgdHJ1ZSBvciBub3Qgc3BlY2lmaWVkLCB0aGUgdHJpcGxlIGZvciBhCiAgICBkaXJlY3RvcnkgaXMgZ2VuZXJhdGVkIGJlZm9yZSB0aGUgdHJpcGxlcyBmb3IgYW55IG9mIGl0cyBzdWJkaXJlY3RvcmllcwogICAgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgdG9wIGRvd24pLiAgSWYgdG9wZG93biBpcyBmYWxzZSwgdGhlIHRyaXBsZQogICAgZm9yIGEgZGlyZWN0b3J5IGlzIGdlbmVyYXRlZCBhZnRlciB0aGUgdHJpcGxlcyBmb3IgYWxsIG9mIGl0cwogICAgc3ViZGlyZWN0b3JpZXMgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgYm90dG9tIHVwKS4KCiAgICBXaGVuIHRvcGRvd24gaXMgdHJ1ZSwgdGhlIGNhbGxlciBjYW4gbW9kaWZ5IHRoZSBkaXJuYW1lcyBsaXN0IGluLXBsYWNlCiAgICAoZS5nLiwgdmlhIGRlbCBvciBzbGljZSBhc3NpZ25tZW50KSwgYW5kIHdhbGsgd2lsbCBvbmx5IHJlY3Vyc2UgaW50byB0aGUKICAgIHN1YmRpcmVjdG9yaWVzIHdob3NlIG5hbWVzIHJlbWFpbiBpbiBkaXJuYW1lczsgdGhpcyBjYW4gYmUgdXNlZCB0byBwcnVuZQogICAgdGhlIHNlYXJjaCwgb3IgdG8gaW1wb3NlIGEgc3BlY2lmaWMgb3JkZXIgb2YgdmlzaXRpbmcuICBNb2RpZnlpbmcKICAgIGRpcm5hbWVzIHdoZW4gdG9wZG93biBpcyBmYWxzZSBpcyBpbmVmZmVjdGl2ZSwgc2luY2UgdGhlIGRpcmVjdG9yaWVzIGluCiAgICBkaXJuYW1lcyBoYXZlIGFscmVhZHkgYmVlbiBnZW5lcmF0ZWQgYnkgdGhlIHRpbWUgZGlybmFtZXMgaXRzZWxmIGlzCiAgICBnZW5lcmF0ZWQuCgogICAgQnkgZGVmYXVsdCBlcnJvcnMgZnJvbSB0aGUgb3MubGlzdGRpcigpIGNhbGwgYXJlIGlnbm9yZWQuICBJZgogICAgb3B0aW9uYWwgYXJnICdvbmVycm9yJyBpcyBzcGVjaWZpZWQsIGl0IHNob3VsZCBiZSBhIGZ1bmN0aW9uOyBpdAogICAgd2lsbCBiZSBjYWxsZWQgd2l0aCBvbmUgYXJndW1lbnQsIGFuIG9zLmVycm9yIGluc3RhbmNlLiAgSXQgY2FuCiAgICByZXBvcnQgdGhlIGVycm9yIHRvIGNvbnRpbnVlIHdpdGggdGhlIHdhbGssIG9yIHJhaXNlIHRoZSBleGNlcHRpb24KICAgIHRvIGFib3J0IHRoZSB3YWxrLiAgTm90ZSB0aGF0IHRoZSBmaWxlbmFtZSBpcyBhdmFpbGFibGUgYXMgdGhlCiAgICBmaWxlbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGV4Y2VwdGlvbiBvYmplY3QuCgogICAgQnkgZGVmYXVsdCwgb3Mud2FsayBkb2VzIG5vdCBmb2xsb3cgc3ltYm9saWMgbGlua3MgdG8gc3ViZGlyZWN0b3JpZXMgb24KICAgIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHRoZW0uICBJbiBvcmRlciB0byBnZXQgdGhpcyBmdW5jdGlvbmFsaXR5LCBzZXQgdGhlCiAgICBvcHRpb25hbCBhcmd1bWVudCAnZm9sbG93bGlua3MnIHRvIHRydWUuCgogICAgQ2F1dGlvbjogIGlmIHlvdSBwYXNzIGEgcmVsYXRpdmUgcGF0aG5hbWUgZm9yIHRvcCwgZG9uJ3QgY2hhbmdlIHRoZQogICAgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBiZXR3ZWVuIHJlc3VtcHRpb25zIG9mIHdhbGsuICB3YWxrIG5ldmVyCiAgICBjaGFuZ2VzIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgYW5kIGFzc3VtZXMgdGhhdCB0aGUgY2xpZW50IGRvZXNuJ3QKICAgIGVpdGhlci4KCiAgICBFeGFtcGxlOgoKICAgIGltcG9ydCBvcwogICAgZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luLCBnZXRzaXplCiAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsaygncHl0aG9uL0xpYi9lbWFpbCcpOgogICAgICAgIHByaW50KHJvb3QsICJjb25zdW1lcyIsIGVuZD0iIikKICAgICAgICBwcmludChzdW0oW2dldHNpemUoam9pbihyb290LCBuYW1lKSkgZm9yIG5hbWUgaW4gZmlsZXNdKSwgZW5kPSIiKQogICAgICAgIHByaW50KCJieXRlcyBpbiIsIGxlbihmaWxlcyksICJub24tZGlyZWN0b3J5IGZpbGVzIikKICAgICAgICBpZiAnQ1ZTJyBpbiBkaXJzOgogICAgICAgICAgICBkaXJzLnJlbW92ZSgnQ1ZTJykgICMgZG9uJ3QgdmlzaXQgQ1ZTIGRpcmVjdG9yaWVzCiAgICAiIiIKICAgICIiIgogICAgCiAgICBpc2xpbmssIGpvaW4sIGlzZGlyID0gcGF0aC5pc2xpbmssIHBhdGguam9pbiwgcGF0aC5pc2RpcgoKICAgICMgV2UgbWF5IG5vdCBoYXZlIHJlYWQgcGVybWlzc2lvbiBmb3IgdG9wLCBpbiB3aGljaCBjYXNlIHdlIGNhbid0CiAgICAjIGdldCBhIGxpc3Qgb2YgdGhlIGZpbGVzIHRoZSBkaXJlY3RvcnkgY29udGFpbnMuICBvcy53YWxrCiAgICAjIGFsd2F5cyBzdXBwcmVzc2VkIHRoZSBleGNlcHRpb24gdGhlbiwgcmF0aGVyIHRoYW4gYmxvdyB1cCBmb3IgYQogICAgIyBtaW5vciByZWFzb24gd2hlbiAoc2F5KSBhIHRob3VzYW5kIHJlYWRhYmxlIGRpcmVjdG9yaWVzIGFyZSBzdGlsbAogICAgIyBsZWZ0IHRvIHZpc2l0LiAgVGhhdCBsb2dpYyBpcyBjb3BpZWQgaGVyZS4KICAgIHRyeToKICAgICAgICAjIE5vdGUgdGhhdCBsaXN0ZGlyIGFuZCBlcnJvciBhcmUgZ2xvYmFscyBpbiB0aGlzIG1vZHVsZSBkdWUKICAgICAgICAjIHRvIGVhcmxpZXIgaW1wb3J0LSouCiAgICAgICAgbmFtZXMgPSBsaXN0ZGlyKHRvcCkKICAgIGV4Y2VwdCBlcnJvciBhcyBlcnI6CiAgICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgb25lcnJvcihlcnIpCiAgICAgICAgcmV0dXJuCiAgICAKICAgIGRpcnMsIG5vbmRpcnMgPSBbXSwgW10KICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgIGlmIGlzZGlyKGpvaW4odG9wLCBuYW1lKSk6CiAgICAgICAgICAgIGRpcnMuYXBwZW5kKG5hbWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbm9uZGlycy5hcHBlbmQobmFtZSkKICAgIAogICAgaWYgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgIAogICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICBuZXdfcGF0aCA9IGpvaW4odG9wLCBuYW1lKQogICAgICAgIGlmIGZvbGxvd2xpbmtzIG9yIG5vdCBpc2xpbmsobmV3X3BhdGgpOgogICAgICAgICAgICBmb3IgeCBpbiB3YWxrKG5ld19wYXRoLCB0b3Bkb3duLCBvbmVycm9yLCBmb2xsb3dsaW5rcyk6CiAgICAgICAgICAgICAgICB5aWVsZCB4CiAgICBpZiBub3QgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgICIiIgoKY2xhc3MgX3BhdGg6CgogICAgZGVmIGJhc2VuYW1lKHNlbGYsYXJnKToKICAgICAgICByZXR1cm4gYXJnCgpwYXRoID0gX3BhdGgoKQplbnZpcm9uID0ge30=',
'/Lib/posixpath.py':'',
'/Lib/pprint.py':'',
'/Lib/pydom.py':'Y2xhc3MgTm9kZUNvbGxlY3Rpb25TZWxlY3RvcihTZWxlY3Rvcik6CiAgZGVmIF9faW5pdF9fKHNlbGYsIHNlbGVjdG9yLCBjb2xsZWN0aW9uKToKICAgICAgU2VsZWN0b3IuX19pbml0X18oc2VsZiwgc2VsZWN0b3IpCiAgICAgIHNlbGYuX2NvbGxlY3Rpb249Y29sbGVjdGlvbgoKICAgICAgaWYgc2VsZi5fc2VsZWN0b3JfdHlwZSA9PSAnaWQnOgogICAgICAgICBzZWxmLl9tYXRjaD1zZWxmLl9tYXRjaF9pZAogICAgICBlbGlmIHNlbGYuX3NlbGVjdG9yX3R5cGUgPT0ndGFnJzoKICAgICAgICAgc2VsZi5fbWF0Y2g9c2VsZi5fbWF0Y2hfdGFnCiAgICAgIGVsaWYgc2VsZi5fc2VsZWN0b3JfdHlwZSA9PSAnY2xhc3NuYW1lJzoKICAgICAgICAgc2VsZi5fbWF0Y2g9c2VsZi5fbWF0Y2hfY2xhc3NuYW1lCgogIGRlZiBfbWF0Y2hfaWQoc2VsZiwgbm9kZSk6CiAgICAgIGlmIG5vZGUuaWQgaXMgTm9uZTogcmV0dXJuIEZhbHNlCiAgICAgIHJldHVybiBub2RlLmlkID09IHNlbGYuX3NlbGVjdG9yCgogIGRlZiBfbWF0Y2hfdGFnKHNlbGYsIG5vZGUpOgogICAgICByZXR1cm4gbm9kZS50YWdOYW1lID09IHNlbGYuX3NlbGVjdG9yCgogIGRlZiBfbWF0Y2hfY2xhc3NuYW1lKHNlbGYsIG5vZGUpOgogICAgICByZXR1cm4gc2VsZi5fc2VsZWN0b3IgaW4gbm9kZS5jbGFzc25hbWUKCiAgZGVmIGdldChzZWxmKToKICAgICAgX2MxPU5vZGVDb2xsZWN0aW9uKCkKICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX2NvbGxlY3Rpb246CiAgICAgICAgICBpZiBzZWxmLl9tYXRjaChfbm9kZSk6CiAgICAgICAgICAgICBfYzEuYXBwZW5kKF9ub2RlKQoKICAgICAgcmV0dXJuIF9jMQoKY2xhc3MgU2VsZWN0b3I6CiAgdGFncz1bJ0EnLCdBQkJSJywnQUNST05ZTScsJ0FERFJFU1MnLCdBUFBMRVQnLCdCJywnQkRPJywnQklHJywnQkxPQ0tRVU9URScsCiAgICAgICAgJ0JVVFRPTicsJ0NBUFRJT04nLCdDRU5URVInLCdDSVRFJywnQ09ERScsJ0RFTCcsJ0RGTicsJ0RJUicsJ0RJVicsJ0RMJywKICAgICAgICAnRU0nLCdGSUVMRFNFVCcsJ0ZPTlQnLCdGT1JNJywnRlJBTUVTRVQnLCdIMScsJ0gyJywnSDMnLCdINCcsJ0g1JywnSDYnLAogICAgICAgICdJJywnSUZSQU1FJywnSU5TJywnS0JEJywnTEFCRUwnLCdMRUdFTkQnLCdNQVAnLCdNRU5VJywnTk9GUkFNRVMnLCAKICAgICAgICAnTk9TQ1JJUFQnLCdPQkpFQ1QnLCdPTCcsJ09QVEdST1VQJywnUFJFJywnUScsJ1MnLCdTQU1QJywnU0NSSVBUJywgCiAgICAgICAgJ1NFTEVDVCcsJ1NNQUxMJywnU1BBTicsJ1NUUklLRScsJ1NUUk9ORycsJ1NUWUxFJywnU1VCJywnU1VQJywnVEFCTEUnLAogICAgICAgICdURVhUQVJFQScsJ1RJVExFJywnVFQnLCdVJywnVUwnLCdWQVInLCdCT0RZJywnQ09MR1JPVVAnLCdERCcsJ0RUJywKICAgICAgICAnSEVBRCcsJ0hUTUwnLCdMSScsJ1AnLCdUQk9EWScsJ09QVElPTicsJ1REJywnVEZPT1QnLCdUSCcsJ1RIRUFEJywnVFInLAogICAgICAgICdBUkVBJywnQkFTRScsJ0JBU0VGT05UJywnQlInLCdDT0wnLCdGUkFNRScsJ0hSJywnSU1HJywnSU5QVVQnLAogICAgICAgICdJU0lOREVYJywnTElOSycsJ01FVEEnLCdQQVJBTScsICAjSFRNTCA1IGVsZW1lbnRzLi4uCiAgICAgICAgJ0FSVElDTEUnLCdBU0lERScsJ0FVRElPJywnQkRJJywnQ0FOVkFTJywnQ09NTUFORCcsJ0RBVEFMSVNUJywKICAgICAgICAnREVUQUlMUycsJ0RJQUxPRycsJ0VNQkVEJywnRklHQ0FQVElPTicsJ0ZJR1VSRScsJ0ZPT1RFUicsJ0hFQURFUicsCiAgICAgICAgJ0tFWUdFTicsJ01BUksnLCdNRVRFUicsJ05BVicsJ09VVFBVVCcsJ1BST0dSRVNTJywnUlAnLCdSVCcsCiAgICAgICAgJ1JVQlknLCdTRUNUSU9OJywnU09VUkNFJywnU1VNTUFSWScsJ1RJTUUnLCdUUkFDSycsJ1ZJREVPJywnV0JSJ10KCiAgZGVmIF9faW5pdF9fKHNlbGYsIHNlbGVjdG9yLCBzdGFydF9ub2RlPWRvYyk6CiAgICAgIHNlbGYuX2RvYz1zdGFydF9ub2RlCgogICAgICBpZiAoaXNpbnN0YW5jZShzZWxlY3Rvciwgc3RyKSk6CiAgICAgICAgIGlmIHNlbGVjdG9yLnN0YXJ0c3dpdGgoIi4iKTogICAjY2xhc3Mgc2VsZWN0b3IKICAgICAgICAgICAgc2VsZi5fc2VsZWN0b3I9c2VsZWN0b3JbMTpdCiAgICAgICAgICAgIHNlbGYuX3NlbGVjdG9yX3R5cGU9ImNsYXNzbmFtZSIKICAgICAgICAgZWxpZiBzZWxlY3Rvci5zdGFydHN3aXRoKCIjIik6ICAjaWQgc2VsZWN0b3IKICAgICAgICAgICAgc2VsZi5fc2VsZWN0b3I9c2VsZWN0b3JbMTpdCiAgICAgICAgICAgIHNlbGYuX3NlbGVjdG9yX3R5cGU9ImlkIgogICAgICAgICBlbGlmIHNlbGVjdG9yLnVwcGVyKCkgaW4gdGFnczoKICAgICAgICAgICAgc2VsZi5fc2VsZWN0b3I9c2VsZWN0b3IudXBwZXIoKQogICAgICAgICAgICBzZWxmLl9zZWxlY3Rvcl90eXBlPSJ0YWciCiAgICAgICAgIGVsc2U6ICAKICAgICAgICAgICAgc2VsZi5fc2VsZWN0b3I9c2VsZWN0b3IKICAgICAgICAgICAgc2VsZi5fc2VsZWN0b3JfdHlwZT0ic2VsZWN0b3IiCiAgICAgIGVsc2U6ICAjdGhpcyBpcyBhIGZ1bmN0aW9uCiAgICAgICAgIHNlbGYuX3NlbGVjdG9yX3R5cGU9InNlbGVjdG9yIgogICAgICAgICBzZWxmLl9mdW5jdGlvbj1zZWxlY3RvcgogICAgICAgICBzZWxmLmdldD1zZWxmLl9mdW5jdGlvbl9nZXQKCiAgZGVmIF9mdW5jdGlvbl9nZXQoc2VsZik6CiAgICAgIGRlZiByZWN1cnNlKG5vZGUpOgogICAgICAgICAgX2xpc3Q9W10KICAgICAgICAgIGlmIHNlbGYuX2Z1bmN0aW9uKG5vZGUpOgogICAgICAgICAgICAgX2xpc3QuYXBwZW5kKG5vZGUpCgogICAgICAgICAgZm9yIF9ub2RlIGluIG5vZGUuY2hpbGROb2RlczoKICAgICAgICAgICAgICBfbGlzdCs9cmVjdXJzZShfbm9kZSkKCiAgICAgICAgICByZXR1cm4gX2xpc3QKCiAgICAgIF9tYXRjaGVkX25vZGVzPXJlY3Vyc2Uoc2VsZi5fZG9jKQogICAgICByZXR1cm4gTm9kZUNvbGxlY3Rpb24oX21hdGNoZWRfbm9kZXMpCgogIGRlZiBnZXQoc2VsZik6CiAgICAgIGlmIHNlbGYuX3NlbGVjdG9yX3R5cGU9PSJpZCI6CiAgICAgICAgIF9tYXRjaGVkX25vZGVzPXNlbGYuX2RvYy5nZXQoaWQ9c2VsZi5fc2VsZWN0b3IpCiAgICAgIGVsaWYgc2VsZi5fc2VsZWN0b3JfdHlwZT09ImNsYXNzbmFtZSI6CiAgICAgICAgIF9tYXRjaGVkX25vZGVzPXNlbGYuX2RvYy5nZXQoY2xhc3NuYW1lPXNlbGYuX3NlbGVjdG9yKQogICAgICBlbGlmIHNlbGYuX3NlbGVjdG9yX3R5cGUgPT0gInRhZyI6CiAgICAgICAgIF9tYXRjaGVkX25vZGVzPXNlbGYuX2RvYy5nZXQodGFnPXNlbGYuX3NlbGVjdG9yKQogICAgICBlbGlmIHNlbGYuX3NlbGVjdG9yX3R5cGU9PSJzZWxlY3RvciI6CiAgICAgICAgIF9tYXRjaGVkX25vZGVzPXNlbGYuX2RvYy5nZXQoc2VsZWN0b3I9c2VsZi5fc2VsZWN0b3IpCiAgICAgIGVsc2U6CiAgICAgICAgIF9tYXRjaGVkX25vZGVzPVtdCiAgICAgIHJldHVybiBOb2RlQ29sbGVjdGlvbihfbWF0Y2hlZF9ub2RlcykKCmNsYXNzIE5vZGVDb2xsZWN0aW9uOgogIGRlZiBfX2luaXRfXyhzZWxmLCBub2Rlcz1bXSk6CiAgICAgIHNlbGYuX25vZGVzPW5vZGVzCgogIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICByZXR1cm4gbGVuKHNlbGYuX25vZGVzKQoKICBkZWYgX19pdGVtX18oc2VsZiwgaSk6CiAgICAgIHJldHVybiBzZWxmLl9ub2Rlc1tpXQoKICBkZWYgX19nZXRpdGVtX18oc2VsZiwgaSk6CiAgICAgIHJldHVybiBzZWxmLl9ub2Rlc1tpXQoKICBkZWYgX19hZGRfXyhzZWxmLCBub2Rlcyk6CiAgICAgIHNlbGYuX25vZGVzKz1ub2RlcwoKICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgX3N0cj1bXQogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBfc3RyLmFwcGVuZChfbm9kZS5fX3N0cl9fKCkpCgogICAgICByZXR1cm4gJzxicj4nLmpvaW4oX3N0cikKCiAgZGVmIGFwcGVuZChzZWxmLCBub2RlKTogICAgICAgIAogICAgICBzZWxmLl9ub2Rlcy5hcHBlbmQobm9kZSkKCiAgZGVmIG5leHQoc2VsZik6CiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIHlpZWxkIF9ub2RlCgogIGRlZiBhZGQoc2VsZiwgc2VsZWN0b3IsIGNvbnRleHQpOgogICAgICBfbnM9Tm9kZUNvbGxlY3Rpb25TZWxlY3RvcihzZWxlY3Rvciwgc2VsZikKICAgICAgc2VsZi5fbm9kZXMrPV9ucy5nZXQoKQoKICBkZWYgYWRkQmFjayhzZWxmKToKICAgICAgcGFzcwoKICBkZWYgYWRkQ2xhc3Moc2VsZiwgY2xhc3NuYW1lKToKICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgX25vZGUuYWRkQ2xhc3MoY2xhc3NuYW1lKQoKICBkZWYgYWZ0ZXIoc2VsZiwgY29udGVudCk6CiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIF9ub2RlLmFmdGVyKGNvbnRlbnQpCgogIGRlZiBhcHBlbmRfY29udGVudChzZWxmLCBjb250ZW50KToKICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgX25vZGUuYXBwZW5kKGNvbnRlbnQpCgogIGRlZiBhcHBlbmRUbyhzZWxmLCBzZWxlY3Rvcik6CiAgICAgIF9zPVNlbGVjdG9yKHNlbGVjdG9yKQoKICAgICAgZm9yIF9ub2RlIGluIF9zLmdldCgpOgogICAgICAgICAgX25vZGUuYXBwZW5kKHNlbGYuX25vZGVbMF0uY2xvbmUoKSkKCiAgZGVmIGF0dHIoc2VsZiwgcHJvcGVydHksIHZhbHVlPU5vbmUpOgogICAgICBpZiB2YWx1ZSBpcyBOb25lOgogICAgICAgICByZXR1cm4gc2VsZi5fbm9kZXNbMF1bcHJvcGVydHldCgogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBfbm9kZVtwcm9wZXJ0eV09dmFsdWUKCiAgZGVmIGJlZm9yZShzZWxmLCBjb250ZW50KToKICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgX25vZGUuYmVmb3JlKGNvbnRlbnQpCgogIGRlZiBiaW5kKHNlbGYsIGV2ZW50LCBoYW5kbGVyKToKICAgICAgaWYgJyAnIGluIGV2ZW50OgogICAgICAgICBfZXZlbnRzPScgJy5zcGxpdChldmVudCkKICAgICAgICAgZm9yIF9ldmVudCBpbiBfZXZlbnRzOgogICAgICAgICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgICAgICAgIF9ub2RlWydvbiVzJyAlIGV2ZW50XT1oYW5kbGVyCiAgICAgICAgIHJldHVybgoKICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgX25vZGVbJ29uJXMnICUgZXZlbnRdPWhhbmRsZXIKCiAgZGVmIGJsdXIoc2VsZiwgaGFuZGxlcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgY2hhbmdlKHNlbGYsIGhhbmRsZXI9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIGNoaWxkcmVuKHNlbGYsIHNlbGVjdG9yPU5vbmUpOgogICAgICBfYz1Ob2RlQ29sbGVjdGlvbigpCiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIGZvciBfY2hpbGQgaW4gX25vZGUuZ2V0X2NoaWxkcmVuKCk6CiAgICAgICAgICAgICAgX2MuYXBwZW5kKF9jaGlsZCkKCiAgICAgIGlmIHNlbGVjdG9yIGlzIE5vbmU6CiAgICAgICAgIHJldHVybiBfYwoKICAgICAgI3NlbGVjdG9yIGlzIG5vdCBOb25lCiAgICAgIF9ucz1Ob2RlQ29sbGVjdGlvblNlbGVjdG9yKHNlbGVjdG9yLCBfYykKICAgICAgcmV0dXJuIF9ucy5nZXQoKQoKICBkZWYgY2xpY2soc2VsZiwgaGFuZGxlcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgY2xvbmUoc2VsZik6CiAgICAgIHJldHVybiBOb2RlQ29sbGVjdGlvbihbX25vZGUuY2xvbmUoKSBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXNdKQoKICBkZWYgY2xvc2VzdChzZWxmLCBzZWxlY3Rvcik6CiAgICAgIGlmIGlzaW5zdGFuY2Uoc2VsZWN0b3IsIHN0cik6CiAgICAgICAgIF9ucz1TZWxlY3RvcihzZWxlY3RvcikKICAgICAgICAgc2VsZWN0b3I9X25zLmdldCgpCgogICAgICBfYz1Ob2RlQ29sbGVjdGlvbigpCiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIF9jLmFwcGVuZChfbm9kZS5jbG9zZXN0KHNlbGVjdG9yKSkKCiAgICAgIHJldHVybiBfYwoKICBkZWYgY29udGFpbnMoc2VsZiwgdGV4dCk6CiAgICAgIHBhc3MKCiAgZGVmIGNvbnRlbnRzKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBjc3Moc2VsZiwgcHJvcGVydHksIHZhbHVlPU5vbmUpOgogICAgICBpZiB2YWx1ZSBpcyBOb25lIGFuZCBub3QgaXNpbnN0YW5jZShwcm9wZXJ0eSwgZGljdCk6CiAgICAgICAgIHJldHVybiBzZWxmLl9ub2Rlc1swXS5jc3MocHJvcGVydHkpCgogICAgICBpZiBpc2luc3RhbmNlKHByb3BlcnR5LCBkaWN0KToKICAgICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgICAgX25vZGUuY3NzKHByb3BlcnR5KQogICAgICBlbHNlOgogICAgICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICAgICBfbm9kZS5jc3MocHJvcGVydHksIHZhbHVlKQoKICBkZWYgZGF0YShzZWxmKToKICAgICAgcGFzcwoKICBkZWYgZGJsY2xpY2soc2VsZiwgaGFuZGxlcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgZGV0YWNoKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBlYWNoKHNlbGYsIGZ1bmMpOgogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBmdW5jKF9ub2RlKQoKICBkZWYgZW1wdHkoc2VsZik6CiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIF9ub2RlLmVtcHR5KCkKCiAgZGVmIGVxKHNlbGYsIGluZGV4KToKICAgICAgaWYgaW5kZXggPCBsZW4oc2VsZi5fbm9kZXMpOgogICAgICAgICByZXR1cm4gTm9kZUNvbGxlY3Rpb25zKHNlbGYuX25vZGVzW2luZGV4XSkKCiAgICAgIHJldHVybiBOb2RlQ29sbGVjdGlvbnMoKQoKICBkZWYgZXJyb3Ioc2VsZiwgaGFuZGxlcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgZmFkZUluKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBmYWRlT3V0KHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBmYWRlVG8oc2VsZik6CiAgICAgIHBhc3MKCiAgZGVmIGZhZGVUb2dnbGUoc2VsZik6CiAgICAgIHBhc3MKCiAgZGVmIGZpbHRlcihzZWxmLCBzZWxlY3Rvcik6CiAgICAgIF9ucz1Ob2RlQ29sbGVjdGlvblNlbGVjdG9yKHNlbGVjdG9yLCBzZWxmKQogICAgICByZXR1cm4gX25zLmdldCgpCgogIGRlZiBmaW5kKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBmaXJzdChzZWxmKToKICAgICAgaWYgbGVuKHNlbGYuX25vZGVzKSA9PSAwOgogICAgICAgICByZXR1cm4gTm9kZUNvbGxlY3Rpb24oKQoKICAgICAgcmV0dXJuIE5vZGVDb2xsZWN0aW9uKFtzZWxmLl9ub2Rlc1swXV0pCgogIGRlZiBmb2N1cyhzZWxmLCBoYW5kbGVyPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBmb2N1c2luKHNlbGYsIGhhbmRsZXI9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIGZvY3Vzb3V0KHNlbGYsIGhhbmRsZXI9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIGdldChzZWxmLCBpbmRleD1Ob25lKToKICAgICAgaWYgaW5kZXggaXMgTm9uZToKICAgICAgICAgcmV0dXJuIFtfbm9kZSBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXNdCgogICAgICByZXR1cm4gc2VsZi5fbm9kZXNbaW5kZXhdCgogIGRlZiBndChzZWxmLCBpbmRleCk6CiAgICAgIHJldHVybiBOb2RlQ29sbGVjdGlvbihbc2VsZi5fbm9kZXNbaW5kZXg6XV0pCgogIGRlZiBoYXMoc2VsZiwgc2VsZWN0b3IpOgogICAgICBwYXNzCiAgCiAgZGVmIGhhc0NsYXNzKHNlbGYsIG5hbWUpOgogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBpZiBfbm9kZS5oYXNDbGFzcyhuYW1lKToKICAgICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICByZXR1cm4gRmFsc2UKCiAgZGVmIGhlaWdodChzZWxmLCB2YWx1ZT1Ob25lKToKICAgICAgaWYgdmFsdWUgaXMgTm9uZToKICAgICAgICAgcmV0dXJuIHNlbGYuX25vZGVzWzBdLmNzcygnaGVpZ2h0JykKCiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIF9ub2RlLnNldF9zdHlsZSh7J2hlaWdodCc6IHZhbHVlfSkKCiAgZGVmIGhpZGUoc2VsZik6CiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIF9ub2RlLnNldF9zdHlsZSh7J2Rpc3BsYXknOiAnbm9uZSd9KQoKICBkZWYgaG92ZXIoc2VsZiwgaGFuZGxlcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgaHRtbChzZWxmLCBjb250ZW50PU5vbmUpOgogICAgICBpZiBjb250ZW50IGlzIE5vbmU6CiAgICAgICAgIHJldHVybiBzZWxmLl9ub2Rlc1swXS5nZXRfaHRtbCgpCgogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBfbm9kZS5zZXRfaHRtbChjb250ZW50KQoKICBkZWYgaW5uZXJIZWlnaHQoc2VsZik6CiAgICAgIHBhc3MKCiAgZGVmIGlubmVyV2lkdGgoc2VsZik6CiAgICAgIHBhc3MKCiAgZGVmIGluc2VydEFmdGVyKHNlbGYsIHRhcmdldCk6CiAgICAgIHBhc3MKCiAgZGVmIGluc2VydEJlZm9yZShzZWxmLCB0YXJnZXQpOgogICAgICBwYXNzCgogICNkZWYgaXMoc2VsZiwgc2VsZWN0b3IpOgogICMgICAgcGFzcwoKICBkZWYga2V5ZG93bihzZWxmLCBoYW5kbGVyPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBrZXlwcmVzcyhzZWxmLCBoYW5kbGVyPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBrZXl1cChzZWxmLCBoYW5kbGVyPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBsYXN0KHNlbGYpOgogICAgICByZXR1cm4gc2VsZi5fbm9kZXNbLTFdCgogIEBwcm9wZXJ0eQogIGRlZiBsZW5ndGgoc2VsZik6CiAgICAgIHJldHVybiBsZW4oc2VsZi5fbm9kZXMpCgogIGRlZiBtb3VzZWRvd24oc2VsZiwgaGFuZGxlcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgbW91c2VlbnRlcihzZWxmLCBoYW5kbGVyPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBtb3VzZWxlYXZlKHNlbGYsIGhhbmRsZXI9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIG1vdXNlbW92ZShzZWxmLCBoYW5kbGVyPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBtb3VzZW91dChzZWxmLCBoYW5kbGVyPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBtb3VzZW92ZXIoc2VsZiwgaGFuZGxlcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgbW91c2V1cChzZWxmLCBoYW5kbGVyPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBuZXh0KHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBuZXh0QWxsKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBuZXh0VXRpbChzZWxmKToKICAgICAgcGFzcwoKICBkZWYgb2ZmKHNlbGYsIGhhbmRsZXIpOgogICAgICBwYXNzCgogIGRlZiBvZmZzZXQoc2VsZik6CiAgICAgIHBhc3MKCiAgZGVmIG9mZnNldFBhcmVudChzZWxmKToKICAgICAgcGFzcwoKICBkZWYgb24oc2VsZiwgaGFuZGxlcik6CiAgICAgIHBhc3MKCiAgZGVmIG91dGVySGVpZ2h0KHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBvdXRlcldpZHRoKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBwYXJlbnQoc2VsZik6CiAgICAgIF9wPU5vZGVDb2xsZWN0aW9uKCkKICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgX3AuYXBwZW5kKF9ub2RlLmdldF9wYXJlbnQoKSkKCiAgZGVmIHBhcmVudHMoc2VsZiwgc2VsZWN0b3I9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIHBhcmVudHNVbnRpbChzZWxmLCBzZWxlY3Rvcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgcG9zaXRpb24oc2VsZik6CiAgICAgIHBhc3MKCiAgZGVmIHByZXBlbmQoc2VsZiwgY29udGVudCk6CiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIF9ub2RlLnByZXBlbmQoY29udGVudCkKCiAgZGVmIHByZXBlbmRUbyhzZWxmLCB0YXJnZXQpOgogICAgICBwYXNzCgogIGRlZiBwcmV2KHNlbGYpOgogICAgICBfcDE9Tm9kZUNvbGxlY3Rpb24oKQogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBfcGFyZW50PV9ub2RlLmdldF9wYXJlbnQoKQogICAgICAgICAgZm9yIF9pIGluIHJhbmdlKGxlbihfcGFyZW50LmNoaWxkTm9kZXMpKToKICAgICAgICAgICAgICBpZiBfcGFyZW50LmNoaWxkTm9kZXNbX2ldID09IF9ub2RlOgogICAgICAgICAgICAgICAgIGlmIF9pID4gMDoKICAgICAgICAgICAgICAgICAgICBfcDEuYXBwZW5kKF9wYXJlbnQuY2hpbGROb2Rlc1tfaS0xXSkKICAgICAgICAgICAgICAgICBicmVhawoKICAgICAgcmV0dXJuIF9wMQoKICBkZWYgcHJldkFsbChzZWxmLCBzZWxlY3Rvcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgcHJldlVudGlsKHNlbGYsIHNlbGVjdG9yPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBwcm9wKHNlbGYsIHByb3BlcnR5LCB2YWx1ZT1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgcmVhZHkoc2VsZiwgZnVuYyk6CiAgICAgIHBhc3MKCiAgZGVmIHJlbW92ZShzZWxmKToKICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgX25vZGUuZ2V0X3BhcmVudCgpLnJlbW92ZUNoaWxkKF9ub2RlKSAKCiAgZGVmIHJlbW92ZUF0dHIoc2VsZiwgYXR0cik6CiAgICAgIHBhc3MKCiAgZGVmIHJlbW92ZUNsYXNzKHNlbGYsIG5hbWUpOgogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBfbm9kZS5yZW1vdmVDbGFzcyhuYW1lKQoKICBkZWYgcmVtb3ZlUHJvcChzZWxmLCBwcm9wZXJ0eSk6CiAgICAgIHBhc3MKCiAgZGVmIHJlcGxhY2VBbGwoc2VsZik6CiAgICAgIHBhc3MKCiAgZGVmIHJlcGxhY2VXaXRoKHNlbGYsIGNvbnRlbnQpOgogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBfbm9kZS5nZXRfcGFyZW50KCkucmVwbGFjZVdpdGgoY29udGVudCwgX25vZGUpCgogIGRlZiByZXNpemUoc2VsZiwgaGFuZGxlcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgc2Nyb2xsKHNlbGYsIGhhbmRsZXI9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIHNjcm9sbExlZnQoc2VsZiwgdmFsdWU9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIHNjcm9sbFRvcChzZWxmLCB2YWx1ZT1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgc2VsZWN0KHNlbGYsIGhhbmRsZXI9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIHNob3coc2VsZik6CiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIF9ub2RlLnNldF9zdHlsZSh7J2Rpc3BsYXknOiAnYmxvY2snfSkKCiAgZGVmIHNpYmxpbmdzKHNlbGYsIHNlbGVjdG9yPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiBzaXplKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBzbGljZShzZWxmLCBpbmRleDE9Tm9uZSwgaW5kZXgyPU5vbmUpOgogICAgICBpZiBpbmRleDEgaXMgTm9uZSBhbmQgaW5kZXgyIGlzIE5vbmU6CiAgICAgICAgIHJldHVybiBOb2RlQ29sbGVjdGlvbigpCgogICAgICByZXR1cm4gTm9kZUNvbGxlY3Rpb24oc2VsZi5fbm9kZXNbaW5kZXgxOmluZGV4Ml0pCgogIGRlZiBzbGlkZURvd24oc2VsZik6CiAgICAgIHBhc3MKCiAgZGVmIHNsaWRlVG9nZ2xlKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBzbGlkZVVwKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiBzdWJtaXQoc2VsZiwgaGFuZGxlcj1Ob25lKToKICAgICAgcGFzcwoKICBkZWYgdGV4dChzZWxmLCBjb250ZW50PU5vbmUpOgogICAgICBpZiBjb250ZW50IGlzIE5vbmU6CiAgICAgICAgIHJldHVybiBzZWxmLl9ub2Rlc1swXS5nZXRfdGV4dCgpCgogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBfbm9kZS5zZXRfdGV4dChjb250ZW50KSAKCiAgZGVmIHRvZ2dsZShzZWxmLCBGdW5jdGlvbj1Ob25lKToKICAgICAgaWYgRnVuY3Rpb24gaXMgTm9uZToKICAgICAgICAgX3Nob3c9VHJ1ZQogICAgICAgICBpZiBzZWxmLl9ub2Rlc1swXS5jc3MoJ2Rpc3BsYXknKSAhPSAnbm9uZSc6CiAgICAgICAgICAgIF9zaG93PUZhbHNlCiAgICAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgICAgIGlmIF9zaG93OgogICAgICAgICAgICAgICAgX25vZGUuc2V0X3N0eWxlKHsnZGlzcGxheSc6ICdibG9jayd9KQogICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9ub2RlLnNldF9zdHlsZSh7J2Rpc3BsYXknOiAnbm9uZSd9KQogIAogICAgICAgICAgICAgX3Nob3c9bm90IF9zaG93CgogICAgICAgICByZXR1cm4KCiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIGlmIEZ1bmN0aW9uKF9ub2RlKToKICAgICAgICAgICAgIF9ub2RlLnNldF9zdHlsZSh7J2Rpc3BsYXknOiAnYmxvY2snfSkKICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICBfbm9kZS5zZXRfc3R5bGUoeydkaXNwbGF5JzogJ25vbmUnfSkKCiAgZGVmIHRvZ2dsZUNsYXNzKHNlbGYpOgogICAgICBwYXNzCgogIGRlZiB0b0xpc3Qoc2VsZik6CiAgICAgIHJldHVybiBzZWxmLl9ub2RlcwoKICB0b0FycmF5PXRvTGlzdCAgICNmb3IgalF1ZXJ5IGNvbXBhdGliaWxpdHkKCiAgZGVmIHRvdWNoZW5kKHNlbGYsIGhhbmRsZXI9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIHRvdWNobW92ZShzZWxmLCBoYW5kbGVyPU5vbmUpOgogICAgICBwYXNzCgogIGRlZiB0b3VjaHN0YXJ0KHNlbGYsIGhhbmRsZXI9Tm9uZSk6CiAgICAgIHBhc3MKCiAgZGVmIHRyaWdnZXIoc2VsZiwgZXZlbnRfdHlwZSk6CiAgICAgIHBhc3MKCiAgZGVmIHRyaWdnZXJIYW5kbGVyKHNlbGYsIGV2ZW50X3R5cGUpOgogICAgICBwYXNzCgoKICBkZWYgdW5iaW5kKHNlbGYsIGV2ZW50LCBoYW5kbGVyKToKICAgICAgaWYgJyAnIGluIGV2ZW50OgogICAgICAgICBfZXZlbnRzPScgJy5zcGxpdChldmVudCkKICAgICAgICAgZm9yIF9ldmVudCBpbiBfZXZlbnRzOgogICAgICAgICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgICAgICAgIHByaW50KCJmaXggbWUhIikKICAgICAgICAgcmV0dXJuCgogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICAjbG9vayBpbnRvIGhvdyB0byBkZXRhY2ggYW4gZXZlbnQKICAgICAgICAgIHByaW50KCJmaXggbWUiKQoKCiAgZGVmIHVubG9hZChzZWxmLCBoYW5kbGVyKToKICAgICAgcGFzcwoKICBkZWYgdW53cmFwKHNlbGYpOgogICAgICBmb3IgX25vZGUgaW4gc2VsZi5fbm9kZXM6CiAgICAgICAgICBfcGFyZW50PV9ub2RlLmdldF9wYXJlbnQoKQogICAgICAgICAgX2dyYW5kcGFyZW50PV9wYXJlbnQuZ2V0X3BhcmVudCgpCiAgICAgICAgICBfZ3JhbmRwYXJlbnQucmVwbGFjZUNoaWxkKF9ub2RlLCBfcGFyZW50KQoKICAgICAgICAgIF9wYXJlbnQucmVtb3ZlKCkKCiAgZGVmIHZhbChzZWxmLCB2YWx1ZT1Ob25lKToKICAgICAgaWYgdmFsdWUgaXMgTm9uZToKICAgICAgICAgcmV0dXJuIHNlbGYuX25vZGVzWzBdWyd0ZXh0J10gICAjaXMgdGV4dCB0aGUgYmVzdCBoZXJlPwoKICAgICAgZm9yIF9ub2RlIGluIHNlbGYuX25vZGVzOgogICAgICAgICAgX25vZGVbJ3RleHQnXT12YWx1ZQoKICBkZWYgd2lkdGgoc2VsZiwgd2lkdGg9Tm9uZSk6CiAgICAgIGlmIHdpZHRoIGlzIE5vbmU6CiAgICAgICAgIHJldHVybiBzZWxmLl9ub2Rlc1swXS5jc3MoJ3dpZHRoJykKCiAgICAgIGZvciBfbm9kZSBpbiBzZWxmLl9ub2RlczoKICAgICAgICAgIF9ub2RlLnNldF9zdHlsZSh7J3dpZHRoJzogd2lkdGh9KQoKICBkZWYgd3JhcChzZWxmKToKICAgICAgcGFzcwoKICBkZWYgd3JhcEFsbChzZWxmKToKICAgICAgcGFzcwoKICBkZWYgd3JhcElubmVyKHNlbGYpOgogICAgICBwYXNzCgpkZWYgYnlJZChpZCk6CiAgICBfcmVzdWx0PWRvYy5nZXQoaWQ9aWQpCiAgICByZXR1cm4gX3Jlc3VsdFswXQoKZGVmIGNyZWF0ZUNTU0NsYXNzKGNzc3RleHQpOgogICAgX3N0eWxlPWRvYy5jcmVhdGVFbGVtZW50KCdzdHlsZScpCiAgICBfc3R5bGUudHlwZT0ndGV4dC9jc3MnCiAgICBfc3R5bGUuaW5uZXJIVE1MID0gY3NzdGV4dAogICAgZG9jLmdldCh0YWc9J2hlYWQnKVswXS5hcHBlbmRDaGlsZChfc3R5bGUpCg==',
'/Lib/pyindexedDB.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBweWluZGV4ZWREQjoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIGlmIG5vdCBfX0JSWVRIT05fXy5oYXNfaW5kZXhlZERCOgogICAgICAgICByYWlzZSBFeGNlcHRpb24oIk5vdEltcGxlbWVudGVkRXJyb3IiLCAiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpbmRleGVkREIiKQogICAgICAgICByZXR1cm4KCiAgICAgIHNlbGYuX2luZGV4ZWREQj1fX0JSWVRIT05fXy5pbmRleGVkREIoKQogICAgICBzZWxmLl9kYj1Ob25lCiAgICAgIHNlbGYuX3ZlcnNpb249Tm9uZQoKICBkZWYgX29uc3VjY2VzcyhzZWxmLCBldmVudCk6CiAgICAgIHNlbGYuX2RiPWV2ZW50LnRhcmdldC5yZXN1bHQKCiAgZGVmIG9wZW4oc2VsZiwgbmFtZSwgb25zdWNjZXNzLCB2ZXJzaW9uPTEuMCwgb25lcnJvcj1Ob25lLCAKICAgICAgICAgICBvbnVwZ3JhZGVuZWVkZWQ9Tm9uZSk6CiAgICAgIHNlbGYuX3ZlcnNpb249dmVyc2lvbgogICAgICBfcmVzdWx0PXNlbGYuX2luZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pCiAgICAgIF9zdWNjZXNzPUV2ZW50TGlzdGVuZXIoW3NlbGYuX29uc3VjY2Vzcywgb25zdWNjZXNzXSkKICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9X3N1Y2Nlc3MuZmlyZQogICAgICBfcmVzdWx0Lm9udXBncmFkZW5lZWRlZD1vbnVwZ3JhZGVuZWVkZWQKCiAgICAgICNpZiBvbmVycm9yIGlzIE5vbmU6CiAgICAgIGRlZiBvbmVycm9yKGUpOgogICAgICAgICAgcHJpbnQoIm9uZXJyb3I6ICVzOiVzIiAlICAoZS50eXBlLCBlLnRhcmdldC5yZXN1bHQpKQoKICAgICAgZGVmIG9uYmxvY2tlZChlKToKICAgICAgICAgIHByaW50KCJibG9ja2VkOiAlczolcyIgJSAgKGUudHlwZSwgZS5yZXN1bHQpKQoKICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKICAgICAgX3Jlc3VsdC5vbmJsb2NrZWQ9b25ibG9ja2VkCgogIGRlZiB0cmFuc2FjdGlvbihzZWxmLCBlbnRpdGllcywgbW9kZT0ncmVhZCcpOgogICAgICByZXR1cm4gVHJhbnNhY3Rpb24oc2VsZi5fZGIudHJhbnNhY3Rpb24oZW50aXRpZXMsIG1vZGUpKQoKY2xhc3MgVHJhbnNhY3Rpb246CiAgZGVmIF9faW5pdF9fKHNlbGYsIHRyYW5zYWN0aW9uKToKICAgICAgc2VsZi5fdHJhbnNhY3Rpb249dHJhbnNhY3Rpb24KCiAgZGVmIG9iamVjdFN0b3JlKHNlbGYsIG5hbWUpOgogICAgICByZXR1cm4gT2JqZWN0U3RvcmUoc2VsZi5fdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUobmFtZSkpCgpjbGFzcyBPYmplY3RTdG9yZToKICBkZWYgX19pbml0X18oc2VsZiwgb2JqZWN0U3RvcmUpOgogICAgICBzZWxmLl9vYmplY3RTdG9yZT1vYmplY3RTdG9yZQogICAgICBzZWxmLl9kYXRhPVtdCgogIGRlZiBjbGVhcihzZWxmLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1zZWxmLl9vYmplY3RTdG9yZS5jbGVhcigpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIF9oZWxwZXIoc2VsZiwgZnVuYywgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1mdW5jKG9iamVjdCkKCiAgICAgIGlmIG9uc3VjY2VzcyBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogICAgICBpZiBvbmVycm9yIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uZXJyb3I9b25lcnJvcgoKICBkZWYgcHV0KHNlbGYsIG9iamVjdCwga2V5PU5vbmUsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOgogICAgICBfcj1zZWxmLl9vYmplY3RTdG9yZS5wdXQob2JqZWN0LCBrZXkpCiAgICAgIF9yLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKICAgICAgX3Iub25lcnJvcj1vbmVycm9yCgogIGRlZiBhZGQoc2VsZiwgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmFkZCwgb2JqZWN0LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCgogIGRlZiBkZWxldGUoc2VsZiwgaW5kZXgsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOiAKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmRlbGV0ZSwgaW5kZXgsIG9uc3VjY2Vzcywgb25lcnJvcikKICAgICAKICBkZWYgcXVlcnkoc2VsZiwgKmFyZ3MpOgogICAgICBzZWxmLl9kYXRhPVtdCiAgICAgIGRlZiBvbnN1Y2Nlc3MoZXZlbnQpOgogICAgICAgICAgY3Vyc29yPWV2ZW50LnRhcmdldC5yZXN1bHQKICAgICAgICAgIGlmIGN1cnNvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgIHNlbGYuX2RhdGEuYXBwZW5kKGN1cnNvci52YWx1ZSkKICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpCgogICAgICBzZWxmLl9vYmplY3RTdG9yZS5vcGVuQ3Vyc29yKGFyZ3MpLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgZGVmIGZldGNoYWxsKHNlbGYpOgogICAgICB5aWVsZCBzZWxmLl9kYXRhCgogIGRlZiBnZXQoc2VsZiwga2V5LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmdldCwga2V5LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCg==',
'/Lib/random.py':'',
'/Lib/signal.py':'IiIiVGhpcyBtb2R1bGUgcHJvdmlkZXMgbWVjaGFuaXNtcyB0byB1c2Ugc2lnbmFsIGhhbmRsZXJzIGluIFB5dGhvbi4KCkZ1bmN0aW9uczoKCmFsYXJtKCkgLS0gY2F1c2UgU0lHQUxSTSBhZnRlciBhIHNwZWNpZmllZCB0aW1lIFtVbml4IG9ubHldCnNldGl0aW1lcigpIC0tIGNhdXNlIGEgc2lnbmFsIChkZXNjcmliZWQgYmVsb3cpIGFmdGVyIGEgc3BlY2lmaWVkCiAgICAgICAgICAgICAgIGZsb2F0IHRpbWUgYW5kIHRoZSB0aW1lciBtYXkgcmVzdGFydCB0aGVuIFtVbml4IG9ubHldCmdldGl0aW1lcigpIC0tIGdldCBjdXJyZW50IHZhbHVlIG9mIHRpbWVyIFtVbml4IG9ubHldCnNpZ25hbCgpIC0tIHNldCB0aGUgYWN0aW9uIGZvciBhIGdpdmVuIHNpZ25hbApnZXRzaWduYWwoKSAtLSBnZXQgdGhlIHNpZ25hbCBhY3Rpb24gZm9yIGEgZ2l2ZW4gc2lnbmFsCnBhdXNlKCkgLS0gd2FpdCB1bnRpbCBhIHNpZ25hbCBhcnJpdmVzIFtVbml4IG9ubHldCmRlZmF1bHRfaW50X2hhbmRsZXIoKSAtLSBkZWZhdWx0IFNJR0lOVCBoYW5kbGVyCgpzaWduYWwgY29uc3RhbnRzOgpTSUdfREZMIC0tIHVzZWQgdG8gcmVmZXIgdG8gdGhlIHN5c3RlbSBkZWZhdWx0IGhhbmRsZXIKU0lHX0lHTiAtLSB1c2VkIHRvIGlnbm9yZSB0aGUgc2lnbmFsCk5TSUcgLS0gbnVtYmVyIG9mIGRlZmluZWQgc2lnbmFscwpTSUdJTlQsIFNJR1RFUk0sIGV0Yy4gLS0gc2lnbmFsIG51bWJlcnMKCml0aW1lciBjb25zdGFudHM6CklUSU1FUl9SRUFMIC0tIGRlY3JlbWVudHMgaW4gcmVhbCB0aW1lLCBhbmQgZGVsaXZlcnMgU0lHQUxSTSB1cG9uCiAgICAgICAgICAgICAgIGV4cGlyYXRpb24KSVRJTUVSX1ZJUlRVQUwgLS0gZGVjcmVtZW50cyBvbmx5IHdoZW4gdGhlIHByb2Nlc3MgaXMgZXhlY3V0aW5nLAogICAgICAgICAgICAgICBhbmQgZGVsaXZlcnMgU0lHVlRBTFJNIHVwb24gZXhwaXJhdGlvbgpJVElNRVJfUFJPRiAtLSBkZWNyZW1lbnRzIGJvdGggd2hlbiB0aGUgcHJvY2VzcyBpcyBleGVjdXRpbmcgYW5kCiAgICAgICAgICAgICAgIHdoZW4gdGhlIHN5c3RlbSBpcyBleGVjdXRpbmcgb24gYmVoYWxmIG9mIHRoZSBwcm9jZXNzLgogICAgICAgICAgICAgICBDb3VwbGVkIHdpdGggSVRJTUVSX1ZJUlRVQUwsIHRoaXMgdGltZXIgaXMgdXN1YWxseQogICAgICAgICAgICAgICB1c2VkIHRvIHByb2ZpbGUgdGhlIHRpbWUgc3BlbnQgYnkgdGhlIGFwcGxpY2F0aW9uCiAgICAgICAgICAgICAgIGluIHVzZXIgYW5kIGtlcm5lbCBzcGFjZS4gU0lHUFJPRiBpcyBkZWxpdmVyZWQgdXBvbgogICAgICAgICAgICAgICBleHBpcmF0aW9uLgoKCioqKiBJTVBPUlRBTlQgTk9USUNFICoqKgpBIHNpZ25hbCBoYW5kbGVyIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHR3byBhcmd1bWVudHM6CnRoZSBmaXJzdCBpcyB0aGUgc2lnbmFsIG51bWJlciwgdGhlIHNlY29uZCBpcyB0aGUgaW50ZXJydXB0ZWQgc3RhY2sgZnJhbWUuIiIiCgpDVFJMX0JSRUFLX0VWRU5UPTEKQ1RSTF9DX0VWRU5UPTAKTlNJRz0yMwpTSUdBQlJUPTIyClNJR0JSRUFLPTIxClNJR0ZQRT04ClNJR0lMTD00ClNJR0lOVD0yClNJR1NFR1Y9MTEKU0lHVEVSTT0xNQpTSUdfREZMPTAKU0lHX0lHTj0xCgpkZWYgc2lnbmFsKHNpZ25hbG51bSwgaGFuZGxlcikgOgogICAgcGFzcwo=',
'/Lib/stat.py':'IiIiQ29uc3RhbnRzL2Z1bmN0aW9ucyBmb3IgaW50ZXJwcmV0aW5nIHJlc3VsdHMgb2Ygb3Muc3RhdCgpIGFuZCBvcy5sc3RhdCgpLgoKU3VnZ2VzdGVkIHVzYWdlOiBmcm9tIHN0YXQgaW1wb3J0ICoKIiIiCgojIEluZGljZXMgZm9yIHN0YXQgc3RydWN0IG1lbWJlcnMgaW4gdGhlIHR1cGxlIHJldHVybmVkIGJ5IG9zLnN0YXQoKQoKU1RfTU9ERSAgPSAwClNUX0lOTyAgID0gMQpTVF9ERVYgICA9IDIKU1RfTkxJTksgPSAzClNUX1VJRCAgID0gNApTVF9HSUQgICA9IDUKU1RfU0laRSAgPSA2ClNUX0FUSU1FID0gNwpTVF9NVElNRSA9IDgKU1RfQ1RJTUUgPSA5CgojIEV4dHJhY3QgYml0cyBmcm9tIHRoZSBtb2RlCgpkZWYgU19JTU9ERShtb2RlKToKICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBjYW4gYmUgc2V0IGJ5CiAgICBvcy5jaG1vZCgpLgogICAgIiIiCiAgICByZXR1cm4gbW9kZSAmIDBvNzc3NwoKZGVmIFNfSUZNVChtb2RlKToKICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBkZXNjcmliZXMgdGhlCiAgICBmaWxlIHR5cGUuCiAgICAiIiIKICAgIHJldHVybiBtb2RlICYgMG8xNzAwMDAKCiMgQ29uc3RhbnRzIHVzZWQgYXMgU19JRk1UKCkgZm9yIHZhcmlvdXMgZmlsZSB0eXBlcwojIChub3QgYWxsIGFyZSBpbXBsZW1lbnRlZCBvbiBhbGwgc3lzdGVtcykKClNfSUZESVIgID0gMG8wNDAwMDAgICMgZGlyZWN0b3J5ClNfSUZDSFIgID0gMG8wMjAwMDAgICMgY2hhcmFjdGVyIGRldmljZQpTX0lGQkxLICA9IDBvMDYwMDAwICAjIGJsb2NrIGRldmljZQpTX0lGUkVHICA9IDBvMTAwMDAwICAjIHJlZ3VsYXIgZmlsZQpTX0lGSUZPICA9IDBvMDEwMDAwICAjIGZpZm8gKG5hbWVkIHBpcGUpClNfSUZMTksgID0gMG8xMjAwMDAgICMgc3ltYm9saWMgbGluawpTX0lGU09DSyA9IDBvMTQwMDAwICAjIHNvY2tldCBmaWxlCgojIEZ1bmN0aW9ucyB0byB0ZXN0IGZvciBlYWNoIGZpbGUgdHlwZQoKZGVmIFNfSVNESVIobW9kZSk6CiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSBkaXJlY3RvcnkuIiIiCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZESVIKCmRlZiBTX0lTQ0hSKG1vZGUpOgogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgY2hhcmFjdGVyIHNwZWNpYWwgZGV2aWNlIGZpbGUuIiIiCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZDSFIKCmRlZiBTX0lTQkxLKG1vZGUpOgogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgYmxvY2sgc3BlY2lhbCBkZXZpY2UgZmlsZS4iIiIKICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRkJMSwoKZGVmIFNfSVNSRUcobW9kZSk6CiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSByZWd1bGFyIGZpbGUuIiIiCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZSRUcKCmRlZiBTX0lTRklGTyhtb2RlKToKICAgICIiIlJldHVybiBUcnVlIGlmIG1vZGUgaXMgZnJvbSBhIEZJRk8gKG5hbWVkIHBpcGUpLiIiIgogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGSUZPCgpkZWYgU19JU0xOSyhtb2RlKToKICAgICIiIlJldHVybiBUcnVlIGlmIG1vZGUgaXMgZnJvbSBhIHN5bWJvbGljIGxpbmsuIiIiCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZMTksKCmRlZiBTX0lTU09DSyhtb2RlKToKICAgICIiIlJldHVybiBUcnVlIGlmIG1vZGUgaXMgZnJvbSBhIHNvY2tldC4iIiIKICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRlNPQ0sKCiMgTmFtZXMgZm9yIHBlcm1pc3Npb24gYml0cwoKU19JU1VJRCA9IDBvNDAwMCAgIyBzZXQgVUlEIGJpdApTX0lTR0lEID0gMG8yMDAwICAjIHNldCBHSUQgYml0ClNfRU5GTVQgPSBTX0lTR0lEICMgZmlsZSBsb2NraW5nIGVuZm9yY2VtZW50ClNfSVNWVFggPSAwbzEwMDAgICMgc3RpY2t5IGJpdApTX0lSRUFEID0gMG8wNDAwICAjIFVuaXggVjcgc3lub255bSBmb3IgU19JUlVTUgpTX0lXUklURSA9IDBvMDIwMCAjIFVuaXggVjcgc3lub255bSBmb3IgU19JV1VTUgpTX0lFWEVDID0gMG8wMTAwICAjIFVuaXggVjcgc3lub255bSBmb3IgU19JWFVTUgpTX0lSV1hVID0gMG8wNzAwICAjIG1hc2sgZm9yIG93bmVyIHBlcm1pc3Npb25zClNfSVJVU1IgPSAwbzA0MDAgICMgcmVhZCBieSBvd25lcgpTX0lXVVNSID0gMG8wMjAwICAjIHdyaXRlIGJ5IG93bmVyClNfSVhVU1IgPSAwbzAxMDAgICMgZXhlY3V0ZSBieSBvd25lcgpTX0lSV1hHID0gMG8wMDcwICAjIG1hc2sgZm9yIGdyb3VwIHBlcm1pc3Npb25zClNfSVJHUlAgPSAwbzAwNDAgICMgcmVhZCBieSBncm91cApTX0lXR1JQID0gMG8wMDIwICAjIHdyaXRlIGJ5IGdyb3VwClNfSVhHUlAgPSAwbzAwMTAgICMgZXhlY3V0ZSBieSBncm91cApTX0lSV1hPID0gMG8wMDA3ICAjIG1hc2sgZm9yIG90aGVycyAobm90IGluIGdyb3VwKSBwZXJtaXNzaW9ucwpTX0lST1RIID0gMG8wMDA0ICAjIHJlYWQgYnkgb3RoZXJzClNfSVdPVEggPSAwbzAwMDIgICMgd3JpdGUgYnkgb3RoZXJzClNfSVhPVEggPSAwbzAwMDEgICMgZXhlY3V0ZSBieSBvdGhlcnMKCiMgTmFtZXMgZm9yIGZpbGUgZmxhZ3MKClVGX05PRFVNUCAgICA9IDB4MDAwMDAwMDEgICMgZG8gbm90IGR1bXAgZmlsZQpVRl9JTU1VVEFCTEUgPSAweDAwMDAwMDAyICAjIGZpbGUgbWF5IG5vdCBiZSBjaGFuZ2VkClVGX0FQUEVORCAgICA9IDB4MDAwMDAwMDQgICMgZmlsZSBtYXkgb25seSBiZSBhcHBlbmRlZCB0bwpVRl9PUEFRVUUgICAgPSAweDAwMDAwMDA4ICAjIGRpcmVjdG9yeSBpcyBvcGFxdWUgd2hlbiB2aWV3ZWQgdGhyb3VnaCBhIHVuaW9uIHN0YWNrClVGX05PVU5MSU5LICA9IDB4MDAwMDAwMTAgICMgZmlsZSBtYXkgbm90IGJlIHJlbmFtZWQgb3IgZGVsZXRlZApVRl9DT01QUkVTU0VEID0gMHgwMDAwMDAyMCAjIE9TIFg6IGZpbGUgaXMgaGZzLWNvbXByZXNzZWQKVUZfSElEREVOICAgID0gMHgwMDAwODAwMCAgIyBPUyBYOiBmaWxlIHNob3VsZCBub3QgYmUgZGlzcGxheWVkClNGX0FSQ0hJVkVEICA9IDB4MDAwMTAwMDAgICMgZmlsZSBtYXkgYmUgYXJjaGl2ZWQKU0ZfSU1NVVRBQkxFID0gMHgwMDAyMDAwMCAgIyBmaWxlIG1heSBub3QgYmUgY2hhbmdlZApTRl9BUFBFTkQgICAgPSAweDAwMDQwMDAwICAjIGZpbGUgbWF5IG9ubHkgYmUgYXBwZW5kZWQgdG8KU0ZfTk9VTkxJTksgID0gMHgwMDEwMDAwMCAgIyBmaWxlIG1heSBub3QgYmUgcmVuYW1lZCBvciBkZWxldGVkClNGX1NOQVBTSE9UICA9IDB4MDAyMDAwMDAgICMgZmlsZSBpcyBhIHNuYXBzaG90IGZpbGUKCgpfZmlsZW1vZGVfdGFibGUgPSAoCiAgICAoKFNfSUZMTkssICAgICAgICAgImwiKSwKICAgICAoU19JRlJFRywgICAgICAgICAiLSIpLAogICAgIChTX0lGQkxLLCAgICAgICAgICJiIiksCiAgICAgKFNfSUZESVIsICAgICAgICAgImQiKSwKICAgICAoU19JRkNIUiwgICAgICAgICAiYyIpLAogICAgIChTX0lGSUZPLCAgICAgICAgICJwIikpLAoKICAgICgoU19JUlVTUiwgICAgICAgICAiciIpLCksCiAgICAoKFNfSVdVU1IsICAgICAgICAgInciKSwpLAogICAgKChTX0lYVVNSfFNfSVNVSUQsICJzIiksCiAgICAgKFNfSVNVSUQsICAgICAgICAgIlMiKSwKICAgICAoU19JWFVTUiwgICAgICAgICAieCIpKSwKCiAgICAoKFNfSVJHUlAsICAgICAgICAgInIiKSwpLAogICAgKChTX0lXR1JQLCAgICAgICAgICJ3IiksKSwKICAgICgoU19JWEdSUHxTX0lTR0lELCAicyIpLAogICAgIChTX0lTR0lELCAgICAgICAgICJTIiksCiAgICAgKFNfSVhHUlAsICAgICAgICAgIngiKSksCgogICAgKChTX0lST1RILCAgICAgICAgICJyIiksKSwKICAgICgoU19JV09USCwgICAgICAgICAidyIpLCksCiAgICAoKFNfSVhPVEh8U19JU1ZUWCwgInQiKSwKICAgICAoU19JU1ZUWCwgICAgICAgICAiVCIpLAogICAgIChTX0lYT1RILCAgICAgICAgICJ4IikpCikKCmRlZiBmaWxlbW9kZShtb2RlKToKICAgICIiIkNvbnZlcnQgYSBmaWxlJ3MgbW9kZSB0byBhIHN0cmluZyBvZiB0aGUgZm9ybSAnLXJ3eHJ3eHJ3eCcuIiIiCiAgICBwZXJtID0gW10KICAgIGZvciB0YWJsZSBpbiBfZmlsZW1vZGVfdGFibGU6CiAgICAgICAgZm9yIGJpdCwgY2hhciBpbiB0YWJsZToKICAgICAgICAgICAgaWYgbW9kZSAmIGJpdCA9PSBiaXQ6CiAgICAgICAgICAgICAgICBwZXJtLmFwcGVuZChjaGFyKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbHNlOgogICAgICAgICAgICBwZXJtLmFwcGVuZCgiLSIpCiAgICByZXR1cm4gIiIuam9pbihwZXJtKQo=',
'/Lib/string.py':'IyBTb21lIHN0cmluZ3MgZm9yIGN0eXBlLXN0eWxlIGNoYXJhY3RlciBjbGFzc2lmaWNhdGlvbgp3aGl0ZXNwYWNlID0gJyBcdFxuXHJcdlxmJwphc2NpaV9sb3dlcmNhc2UgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonCmFzY2lpX3VwcGVyY2FzZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicKYXNjaWlfbGV0dGVycyA9IGFzY2lpX2xvd2VyY2FzZSArIGFzY2lpX3VwcGVyY2FzZQpkaWdpdHMgPSAnMDEyMzQ1Njc4OScKaGV4ZGlnaXRzID0gZGlnaXRzICsgJ2FiY2RlZicgKyAnQUJDREVGJwpvY3RkaWdpdHMgPSAnMDEyMzQ1NjcnCnB1bmN0dWF0aW9uID0gIiIiISIjJCUmJygpKissLS4vOjs8PT4/QFtcXV5fYHt8fX4iIiIKcHJpbnRhYmxlID0gZGlnaXRzICsgYXNjaWlfbGV0dGVycyArIHB1bmN0dWF0aW9uICsgd2hpdGVzcGFjZQoKIyBGdW5jdGlvbnMgd2hpY2ggYXJlbid0IGF2YWlsYWJsZSBhcyBzdHJpbmcgbWV0aG9kcy4KCiMgQ2FwaXRhbGl6ZSB0aGUgd29yZHMgaW4gYSBzdHJpbmcsIGUuZy4gIiBhQmMgIGRFZiAiIC0+ICJBYmMgRGVmIi4KZGVmIGNhcHdvcmRzKHMsIHNlcD1Ob25lKToKICAgICIiImNhcHdvcmRzKHMgWyxzZXBdKSAtPiBzdHJpbmcKCiAgICBTcGxpdCB0aGUgYXJndW1lbnQgaW50byB3b3JkcyB1c2luZyBzcGxpdCwgY2FwaXRhbGl6ZSBlYWNoCiAgICB3b3JkIHVzaW5nIGNhcGl0YWxpemUsIGFuZCBqb2luIHRoZSBjYXBpdGFsaXplZCB3b3JkcyB1c2luZwogICAgam9pbi4gIElmIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgc2VwIGlzIGFic2VudCBvciBOb25lLAogICAgcnVucyBvZiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgYXJlIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIHNwYWNlCiAgICBhbmQgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcmUgcmVtb3ZlZCwgb3RoZXJ3aXNlCiAgICBzZXAgaXMgdXNlZCB0byBzcGxpdCBhbmQgam9pbiB0aGUgd29yZHMuCgogICAgIiIiCiAgICByZXR1cm4gKHNlcCBvciAnICcpLmpvaW4oeC5jYXBpdGFsaXplKCkgZm9yIHggaW4gcy5zcGxpdChzZXApKQo=',
'/Lib/sys.py':'X19zdGRvdXRfXz1nZXRhdHRyKGRvYywiJHN0ZG91dCIpCl9fc3RkZXJyX189Z2V0YXR0cihkb2MsIiRzdGRlcnIiKQoKc3Rkb3V0ID0gZ2V0YXR0cihkb2MsIiRzdGRvdXQiKQpzdGRlcnIgPSBnZXRhdHRyKGRvYywiJHN0ZGVyciIpCgpoYXNfbG9jYWxfc3RvcmFnZT1fX0JSWVRIT05fXy5oYXNfbG9jYWxfc3RvcmFnZQpoYXNfanNvbj1fX0JSWVRIT05fXy5oYXNfanNvbgoKbW9kdWxlcyA9IF9fQlJZVEhPTl9fLmltcG9ydGVkCgphcmd2ID0gWydfX21haW5fXyddCgpjbGFzcyBfX3ZlcnNpb25faW5mbyhvYmplY3QpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHZlcnNpb25faW5mbyk6CiAgICAgICAgc2VsZi52ZXJzaW9uX2luZm8gPSB2ZXJzaW9uX2luZm8KICAgICAgICBzZWxmLm1ham9yID0gdmVyc2lvbl9pbmZvWzBdCiAgICAgICAgc2VsZi5taW5vciA9IHZlcnNpb25faW5mb1sxXQogICAgICAgIHNlbGYubWljcm8gPSB2ZXJzaW9uX2luZm9bMl0KICAgICAgICBzZWxmLnJlbGVhc2VsZXZlbCA9IHZlcnNpb25faW5mb1szXQogICAgICAgIHNlbGYuc2VyaWFsID0gdmVyc2lvbl9pbmZvWzRdCgogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGluZGV4KToKICAgICAgICByZXR1cm4gc2VsZi52ZXJzaW9uX2luZm9baW5kZXhdCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHN0cihzZWxmLnZlcnNpb25faW5mbykKICAgICAKdmVyc2lvbl9pbmZvPV9fdmVyc2lvbl9pbmZvKF9fQlJZVEhPTl9fLnZlcnNpb25faW5mbykKcGF0aD1fX0JSWVRIT05fXy5wYXRoCmJ1aWx0aW5fbW9kdWxlX25hbWVzPVsncG9zaXgnXQoKYnl0ZW9yZGVyPSdsaXR0bGUnCm1heHNpemU9OTAwNzE5OTI1NDc0MDk5MiAgICNsYXJnZXN0IGludGVnZXIuLgptYXhpbnQ9OTAwNzE5OTI1NDc0MDk5MiAgICNsYXJnZXN0IGludGVnZXIuLgptYXh1bmljb2RlPTExMTQxMTEKCnBsYXRmb3JtPSJicnl0aG9uIgp3YXJub3B0aW9ucz1bXQoKY2xhc3MgZmxhZ19jbGFzczoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIHNlbGYuZGVidWc9MAogICAgICBzZWxmLmluc3BlY3Q9MAogICAgICBzZWxmLmludGVyYWN0aXZlPTAKICAgICAgc2VsZi5vcHRpbWl6ZT0wCiAgICAgIHNlbGYuZG9udF93cml0ZV9ieXRlY29kZT0wCiAgICAgIHNlbGYubm9fdXNlcl9zaXRlPTAKICAgICAgc2VsZi5ub19zaXRlPTAKICAgICAgc2VsZi5pZ25vcmVfZW52aXJvbm1lbnQ9MAogICAgICBzZWxmLnZlcmJvc2U9MAogICAgICBzZWxmLmJ5dGVzX3dhcm5pbmc9MAogICAgICBzZWxmLnF1aWV0PTAKICAgICAgc2VsZi5oYXNoX3JhbmRvbWl6YXRpb249MQoKZmxhZ3M9ZmxhZ19jbGFzcygpCgo=',
'/Lib/textwrap.py':'',
'/Lib/this.py':'cyA9ICIiIkd1ciBNcmEgYnMgQ2xndWJhLCBvbCBHdnogQ3JncmVmCgpPcm5oZ3ZzaHkgdmYgb3JnZ3JlIGd1bmEgaHR5bC4KUmtjeXZwdmcgdmYgb3JnZ3JlIGd1bmEgdnpjeXZwdmcuCkZ2emN5ciB2ZiBvcmdncmUgZ3VuYSBwYnpjeXJrLgpQYnpjeXJrIHZmIG9yZ2dyZSBndW5hIHBiemN5dnBuZ3JxLgpTeW5nIHZmIG9yZ2dyZSBndW5hIGFyZmdycS4KRmNuZWZyIHZmIG9yZ2dyZSBndW5hIHFyYWZyLgpFcm5xbm92eXZnbCBwYmhhZ2YuCkZjcnB2bnkgcG5mcmYgbmVyYSdnIGZjcnB2bnkgcmFiaHR1IGdiIG9lcm54IGd1ciBlaHlyZi4KTnlndWJodHUgY2VucGd2cG55dmdsIG9ybmdmIGNoZXZnbC4KUmVlYmVmIGZ1Ymh5cSBhcmlyZSBjbmZmIGZ2eXJhZ3lsLgpIYXlyZmYgcmtjeXZwdmd5bCBmdnlyYXBycS4KVmEgZ3VyIHNucHIgYnMgbnpvdnRodmdsLCBlcnNoZnIgZ3VyIGdyemNnbmd2YmEgZ2IgdGhyZmYuCkd1cmVyIGZ1Ymh5cSBvciBiYXItLSBuYXEgY2Vyc3Jlbm95bCBiYXlsIGJhciAtLWJvaXZiaGYgam5sIGdiIHFiIHZnLgpOeWd1Ymh0dSBndW5nIGpubCB6bmwgYWJnIG9yIGJvaXZiaGYgbmcgc3ZlZmcgaGF5cmZmIGxiaCdlciBRaGdwdS4KQWJqIHZmIG9yZ2dyZSBndW5hIGFyaXJlLgpOeWd1Ymh0dSBhcmlyZSB2ZiBic2dyYSBvcmdncmUgZ3VuYSAqZXZ0dWcqIGFiai4KVnMgZ3VyIHZ6Y3lyenJhZ25ndmJhIHZmIHVuZXEgZ2IgcmtjeW52YSwgdmcnZiBuIG9ucSB2cXJuLgpWcyBndXIgdnpjeXJ6cmFnbmd2YmEgdmYgcm5mbCBnYiBya2N5bnZhLCB2ZyB6bmwgb3IgbiB0YmJxIHZxcm4uCkFuenJmY25wcmYgbmVyIGJhciB1YmF4dmF0IHRlcm5nIHZxcm4gLS0geXJnJ2YgcWIgemJlciBicyBndWJmciEiIiIKCmQgPSB7fQpmb3IgYyBpbiAoNjUsIDk3KToKICAgIGZvciBpIGluIHJhbmdlKDI2KToKICAgICAgICBkW2NocihpK2MpXSA9IGNocigoaSsxMykgJSAyNiArIGMpCgpwcmludCgiIi5qb2luKFtkLmdldChjLCBjKSBmb3IgYyBpbiBzXSkpCg==',
'/Lib/traceback.py':'aW1wb3J0IHN5cwpkZWYgcHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycik6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICBmaWxlLndyaXRlKGV4Yy5pbmZvKQogICAgZmlsZS53cml0ZSgnXG4nK2V4Yy5fX25hbWVfXykKICAgIGlmIGV4Yy5tZXNzYWdlOgogICAgICAgIGZpbGUud3JpdGUoJzogJytleGMubWVzc2FnZSkKICAgIGZpbGUud3JpdGUoJ1xuJykK',
'/Lib/types.py':'IiIiCkRlZmluZSBuYW1lcyBmb3IgYnVpbHQtaW4gdHlwZXMgdGhhdCBhcmVuJ3QgZGlyZWN0bHkgYWNjZXNzaWJsZSBhcyBhIGJ1aWx0aW4uCiIiIgppbXBvcnQgc3lzCgojIEl0ZXJhdG9ycyBpbiBQeXRob24gYXJlbid0IGEgbWF0dGVyIG9mIHR5cGUgYnV0IG9mIHByb3RvY29sLiAgQSBsYXJnZQojIGFuZCBjaGFuZ2luZyBudW1iZXIgb2YgYnVpbHRpbiB0eXBlcyBpbXBsZW1lbnQgKnNvbWUqIGZsYXZvciBvZgojIGl0ZXJhdG9yLiAgRG9uJ3QgY2hlY2sgdGhlIHR5cGUhICBVc2UgaGFzYXR0ciB0byBjaGVjayBmb3IgYm90aAojICJfX2l0ZXJfXyIgYW5kICJfX25leHRfXyIgYXR0cmlidXRlcyBpbnN0ZWFkLgoKI2RlZiBfZigpOiBwYXNzCiNGdW5jdGlvblR5cGUgPSB0eXBlKF9mKQojTGFtYmRhVHlwZSA9IHR5cGUobGFtYmRhOiBOb25lKSAgICAgICAgICMgU2FtZSBhcyBGdW5jdGlvblR5cGUKI0NvZGVUeXBlID0gdHlwZShfZi5fX2NvZGVfXykKCiNkZWYgX2coKToKIyAgICB5aWVsZCAxCiNHZW5lcmF0b3JUeXBlID0gdHlwZShfZygpKQoKY2xhc3MgX0M6CiAgICBkZWYgX20oc2VsZik6IHBhc3MKTWV0aG9kVHlwZSA9IHR5cGUoX0MoKS5fbSkKCkJ1aWx0aW5GdW5jdGlvblR5cGUgPSB0eXBlKGxlbikKQnVpbHRpbk1ldGhvZFR5cGUgPSB0eXBlKFtdLmFwcGVuZCkgICAgICMgU2FtZSBhcyBCdWlsdGluRnVuY3Rpb25UeXBlCgpNb2R1bGVUeXBlID0gdHlwZShzeXMpCgojdHJ5OgojICAgIHJhaXNlIFR5cGVFcnJvcgojZXhjZXB0IFR5cGVFcnJvcjoKIyAgICB0YiA9IHN5cy5leGNfaW5mbygpWzJdCiMgICAgVHJhY2ViYWNrVHlwZSA9IHR5cGUodGIpCiMgICAgRnJhbWVUeXBlID0gdHlwZSh0Yi50Yl9mcmFtZSkKIyAgICB0YiA9IE5vbmU7IGRlbCB0YgoKIyBGb3IgSnl0aG9uLCB0aGUgZm9sbG93aW5nIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsCiNHZXRTZXREZXNjcmlwdG9yVHlwZSA9IHR5cGUoRnVuY3Rpb25UeXBlLl9fY29kZV9fKQojTWVtYmVyRGVzY3JpcHRvclR5cGUgPSB0eXBlKEZ1bmN0aW9uVHlwZS5fX2dsb2JhbHNfXykKCiNmaXhtZSBicnl0aG9uCiNkZWwgc3lzLCBfZiwgX2csIF9DLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTm90IGZvciBleHBvcnQK',
'/Lib/warnings.py':'',
'/Lib/weakref.py':'IiIiV2VhayByZWZlcmVuY2Ugc3VwcG9ydCBmb3IgUHl0aG9uLgoKVGhpcyBtb2R1bGUgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgUEVQIDIwNToKCmh0dHA6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXAtMDIwNS8KIiIiCgojIE5hbWluZyBjb252ZW50aW9uOiBWYXJpYWJsZXMgbmFtZWQgIndyIiBhcmUgd2VhayByZWZlcmVuY2Ugb2JqZWN0czsKIyB0aGV5IGFyZSBjYWxsZWQgdGhpcyBpbnN0ZWFkIG9mICJyZWYiIHRvIGF2b2lkIG5hbWUgY29sbGlzaW9ucyB3aXRoCiMgdGhlIG1vZHVsZS1nbG9iYWwgcmVmKCkgZnVuY3Rpb24gaW1wb3J0ZWQgZnJvbSBfd2Vha3JlZi4KCmZyb20gX3dlYWtyZWYgaW1wb3J0ICgKICAgICBnZXR3ZWFrcmVmY291bnQsCiAgICAgZ2V0d2Vha3JlZnMsCiAgICAgcmVmLAogICAgIHByb3h5LAogICAgIENhbGxhYmxlUHJveHlUeXBlLAogICAgIFByb3h5VHlwZSwKICAgICBSZWZlcmVuY2VUeXBlKQoKZnJvbSBfd2Vha3JlZnNldCBpbXBvcnQgV2Vha1NldCwgX0l0ZXJhdGlvbkd1YXJkCgppbXBvcnQgY29sbGVjdGlvbnMgICMgSW1wb3J0IGFmdGVyIF93ZWFrcmVmIHRvIGF2b2lkIGNpcmN1bGFyIGltcG9ydC4KClByb3h5VHlwZXMgPSAoUHJveHlUeXBlLCBDYWxsYWJsZVByb3h5VHlwZSkKCl9fYWxsX18gPSBbInJlZiIsICJwcm94eSIsICJnZXR3ZWFrcmVmY291bnQiLCAiZ2V0d2Vha3JlZnMiLAogICAgICAgICAgICJXZWFrS2V5RGljdGlvbmFyeSIsICJSZWZlcmVuY2VUeXBlIiwgIlByb3h5VHlwZSIsCiAgICAgICAgICAgIkNhbGxhYmxlUHJveHlUeXBlIiwgIlByb3h5VHlwZXMiLCAiV2Vha1ZhbHVlRGljdGlvbmFyeSIsCiAgICAgICAgICAgIldlYWtTZXQiXQoKCmNsYXNzIFdlYWtWYWx1ZURpY3Rpb25hcnkoY29sbGVjdGlvbnMuTXV0YWJsZU1hcHBpbmcpOgogICAgIiIiTWFwcGluZyBjbGFzcyB0aGF0IHJlZmVyZW5jZXMgdmFsdWVzIHdlYWtseS4KCiAgICBFbnRyaWVzIGluIHRoZSBkaWN0aW9uYXJ5IHdpbGwgYmUgZGlzY2FyZGVkIHdoZW4gbm8gc3Ryb25nCiAgICByZWZlcmVuY2UgdG8gdGhlIHZhbHVlIGV4aXN0cyBhbnltb3JlCiAgICAiIiIKICAgICMgV2UgaW5oZXJpdCB0aGUgY29uc3RydWN0b3Igd2l0aG91dCB3b3JyeWluZyBhYm91dCB0aGUgaW5wdXQKICAgICMgZGljdGlvbmFyeTsgc2luY2UgaXQgdXNlcyBvdXIgLnVwZGF0ZSgpIG1ldGhvZCwgd2UgZ2V0IHRoZSByaWdodAogICAgIyBjaGVja3MgKGlmIHRoZSBvdGhlciBkaWN0aW9uYXJ5IGlzIGEgV2Vha1ZhbHVlRGljdGlvbmFyeSwKICAgICMgb2JqZWN0cyBhcmUgdW53cmFwcGVkIG9uIHRoZSB3YXkgb3V0LCBhbmQgd2UgYWx3YXlzIHdyYXAgb24gdGhlCiAgICAjIHdheSBpbikuCgogICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3KToKICAgICAgICBkZWYgcmVtb3ZlKHdyLCBzZWxmcmVmPXJlZihzZWxmKSk6CiAgICAgICAgICAgIHNlbGYgPSBzZWxmcmVmKCkKICAgICAgICAgICAgaWYgc2VsZiBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIGlmIHNlbGYuX2l0ZXJhdGluZzoKICAgICAgICAgICAgICAgICAgICBzZWxmLl9wZW5kaW5nX3JlbW92YWxzLmFwcGVuZCh3ci5rZXkpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRlbCBzZWxmLmRhdGFbd3Iua2V5XQogICAgICAgIHNlbGYuX3JlbW92ZSA9IHJlbW92ZQogICAgICAgICMgQSBsaXN0IG9mIGtleXMgdG8gYmUgcmVtb3ZlZAogICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMgPSBbXQogICAgICAgIHNlbGYuX2l0ZXJhdGluZyA9IHNldCgpCiAgICAgICAgc2VsZi5kYXRhID0gZCA9IHt9CiAgICAgICAgc2VsZi51cGRhdGUoKmFyZ3MsICoqa3cpCgogICAgZGVmIF9jb21taXRfcmVtb3ZhbHMoc2VsZik6CiAgICAgICAgbCA9IHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMKICAgICAgICBkID0gc2VsZi5kYXRhCiAgICAgICAgIyBXZSBzaG91bGRuJ3QgZW5jb3VudGVyIGFueSBLZXlFcnJvciwgYmVjYXVzZSB0aGlzIG1ldGhvZCBzaG91bGQKICAgICAgICAjIGFsd2F5cyBiZSBjYWxsZWQgKmJlZm9yZSogbXV0YXRpbmcgdGhlIGRpY3QuCiAgICAgICAgd2hpbGUgbDoKICAgICAgICAgICAgZGVsIGRbbC5wb3AoKV0KCiAgICBkZWYgX19nZXRpdGVtX18oc2VsZiwga2V5KToKICAgICAgICBvID0gc2VsZi5kYXRhW2tleV0oKQogICAgICAgIGlmIG8gaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgS2V5RXJyb3Ioa2V5KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBvCgogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsIGtleSk6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBkZWwgc2VsZi5kYXRhW2tleV0KCiAgICBkZWYgX19sZW5fXyhzZWxmKToKICAgICAgICByZXR1cm4gbGVuKHNlbGYuZGF0YSkgLSBsZW4oc2VsZi5fcGVuZGluZ19yZW1vdmFscykKCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBvID0gc2VsZi5kYXRhW2tleV0oKQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcmV0dXJuIG8gaXMgbm90IE5vbmUKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgcmV0dXJuICI8V2Vha1ZhbHVlRGljdGlvbmFyeSBhdCAlcz4iICUgaWQoc2VsZikKCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBzZWxmLmRhdGFba2V5XSA9IEtleWVkUmVmKHZhbHVlLCBzZWxmLl9yZW1vdmUsIGtleSkKCiAgICBkZWYgY29weShzZWxmKToKICAgICAgICBuZXcgPSBXZWFrVmFsdWVEaWN0aW9uYXJ5KCkKICAgICAgICBmb3Iga2V5LCB3ciBpbiBzZWxmLmRhdGEuaXRlbXMoKToKICAgICAgICAgICAgbyA9IHdyKCkKICAgICAgICAgICAgaWYgbyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIG5ld1trZXldID0gbwogICAgICAgIHJldHVybiBuZXcKCiAgICBfX2NvcHlfXyA9IGNvcHkKCiAgICBkZWYgX19kZWVwY29weV9fKHNlbGYsIG1lbW8pOgogICAgICAgIGZyb20gY29weSBpbXBvcnQgZGVlcGNvcHkKICAgICAgICBuZXcgPSBzZWxmLl9fY2xhc3NfXygpCiAgICAgICAgZm9yIGtleSwgd3IgaW4gc2VsZi5kYXRhLml0ZW1zKCk6CiAgICAgICAgICAgIG8gPSB3cigpCiAgICAgICAgICAgIGlmIG8gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBuZXdbZGVlcGNvcHkoa2V5LCBtZW1vKV0gPSBvCiAgICAgICAgcmV0dXJuIG5ldwoKICAgIGRlZiBnZXQoc2VsZiwga2V5LCBkZWZhdWx0PU5vbmUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgd3IgPSBzZWxmLmRhdGFba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHQKICAgICAgICBlbHNlOgogICAgICAgICAgICBvID0gd3IoKQogICAgICAgICAgICBpZiBvIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAjIFRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuCiAgICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcmV0dXJuIG8KCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgd2l0aCBfSXRlcmF0aW9uR3VhcmQoc2VsZik6CiAgICAgICAgICAgIGZvciBrLCB3ciBpbiBzZWxmLmRhdGEuaXRlbXMoKToKICAgICAgICAgICAgICAgIHYgPSB3cigpCiAgICAgICAgICAgICAgICBpZiB2IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHlpZWxkIGssIHYKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICB3aXRoIF9JdGVyYXRpb25HdWFyZChzZWxmKToKICAgICAgICAgICAgZm9yIGssIHdyIGluIHNlbGYuZGF0YS5pdGVtcygpOgogICAgICAgICAgICAgICAgaWYgd3IoKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICB5aWVsZCBrCgogICAgX19pdGVyX18gPSBrZXlzCgogICAgZGVmIGl0ZXJ2YWx1ZXJlZnMoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGFuIGl0ZXJhdG9yIHRoYXQgeWllbGRzIHRoZSB3ZWFrIHJlZmVyZW5jZXMgdG8gdGhlIHZhbHVlcy4KCiAgICAgICAgVGhlIHJlZmVyZW5jZXMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlICdsaXZlJyBhdCB0aGUgdGltZQogICAgICAgIHRoZXkgYXJlIHVzZWQsIHNvIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgcmVmZXJlbmNlcyBuZWVkcwogICAgICAgIHRvIGJlIGNoZWNrZWQgYmVmb3JlIGJlaW5nIHVzZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGF2b2lkCiAgICAgICAgY3JlYXRpbmcgcmVmZXJlbmNlcyB0aGF0IHdpbGwgY2F1c2UgdGhlIGdhcmJhZ2UgY29sbGVjdG9yIHRvCiAgICAgICAga2VlcCB0aGUgdmFsdWVzIGFyb3VuZCBsb25nZXIgdGhhbiBuZWVkZWQuCgogICAgICAgICIiIgogICAgICAgIHdpdGggX0l0ZXJhdGlvbkd1YXJkKHNlbGYpOgogICAgICAgICAgICBmb3Igd3IgaW4gc2VsZi5kYXRhLnZhbHVlcygpOgogICAgICAgICAgICAgICAgeWllbGQgd3IKCiAgICBkZWYgdmFsdWVzKHNlbGYpOgogICAgICAgIHdpdGggX0l0ZXJhdGlvbkd1YXJkKHNlbGYpOgogICAgICAgICAgICBmb3Igd3IgaW4gc2VsZi5kYXRhLnZhbHVlcygpOgogICAgICAgICAgICAgICAgb2JqID0gd3IoKQogICAgICAgICAgICAgICAgaWYgb2JqIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHlpZWxkIG9iagoKICAgIGRlZiBwb3BpdGVtKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAga2V5LCB3ciA9IHNlbGYuZGF0YS5wb3BpdGVtKCkKICAgICAgICAgICAgbyA9IHdyKCkKICAgICAgICAgICAgaWYgbyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHJldHVybiBrZXksIG8KCiAgICBkZWYgcG9wKHNlbGYsIGtleSwgKmFyZ3MpOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvID0gc2VsZi5kYXRhLnBvcChrZXkpKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIGlmIGFyZ3M6CiAgICAgICAgICAgICAgICByZXR1cm4gYXJnc1swXQogICAgICAgICAgICByYWlzZQogICAgICAgIGlmIG8gaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgS2V5RXJyb3Ioa2V5KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBvCgogICAgZGVmIHNldGRlZmF1bHQoc2VsZiwga2V5LCBkZWZhdWx0PU5vbmUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgd3IgPSBzZWxmLmRhdGFba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgICAgIHNlbGYuZGF0YVtrZXldID0gS2V5ZWRSZWYoZGVmYXVsdCwgc2VsZi5fcmVtb3ZlLCBrZXkpCiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHdyKCkKCiAgICBkZWYgdXBkYXRlKHNlbGYsIGRpY3Q9Tm9uZSwgKiprd2FyZ3MpOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgZCA9IHNlbGYuZGF0YQogICAgICAgIGlmIGRpY3QgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIG5vdCBoYXNhdHRyKGRpY3QsICJpdGVtcyIpOgogICAgICAgICAgICAgICAgZGljdCA9IHR5cGUoe30pKGRpY3QpCiAgICAgICAgICAgIGZvciBrZXksIG8gaW4gZGljdC5pdGVtcygpOgogICAgICAgICAgICAgICAgZFtrZXldID0gS2V5ZWRSZWYobywgc2VsZi5fcmVtb3ZlLCBrZXkpCiAgICAgICAgaWYgbGVuKGt3YXJncyk6CiAgICAgICAgICAgIHNlbGYudXBkYXRlKGt3YXJncykKCiAgICBkZWYgdmFsdWVyZWZzKHNlbGYpOgogICAgICAgICIiIlJldHVybiBhIGxpc3Qgb2Ygd2VhayByZWZlcmVuY2VzIHRvIHRoZSB2YWx1ZXMuCgogICAgICAgIFRoZSByZWZlcmVuY2VzIGFyZSBub3QgZ3VhcmFudGVlZCB0byBiZSAnbGl2ZScgYXQgdGhlIHRpbWUKICAgICAgICB0aGV5IGFyZSB1c2VkLCBzbyB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIHJlZmVyZW5jZXMgbmVlZHMKICAgICAgICB0byBiZSBjaGVja2VkIGJlZm9yZSBiZWluZyB1c2VkLiAgVGhpcyBjYW4gYmUgdXNlZCB0byBhdm9pZAogICAgICAgIGNyZWF0aW5nIHJlZmVyZW5jZXMgdGhhdCB3aWxsIGNhdXNlIHRoZSBnYXJiYWdlIGNvbGxlY3RvciB0bwogICAgICAgIGtlZXAgdGhlIHZhbHVlcyBhcm91bmQgbG9uZ2VyIHRoYW4gbmVlZGVkLgoKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmRhdGEudmFsdWVzKCkpCgoKY2xhc3MgS2V5ZWRSZWYocmVmKToKICAgICIiIlNwZWNpYWxpemVkIHJlZmVyZW5jZSB0aGF0IGluY2x1ZGVzIGEga2V5IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHZhbHVlLgoKICAgIFRoaXMgaXMgdXNlZCBpbiB0aGUgV2Vha1ZhbHVlRGljdGlvbmFyeSB0byBhdm9pZCBoYXZpbmcgdG8gY3JlYXRlCiAgICBhIGZ1bmN0aW9uIG9iamVjdCBmb3IgZWFjaCBrZXkgc3RvcmVkIGluIHRoZSBtYXBwaW5nLiAgQSBzaGFyZWQKICAgIGNhbGxiYWNrIG9iamVjdCBjYW4gdXNlIHRoZSAna2V5JyBhdHRyaWJ1dGUgb2YgYSBLZXllZFJlZiBpbnN0ZWFkCiAgICBvZiBnZXR0aW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBrZXkgZnJvbSBhbiBlbmNsb3Npbmcgc2NvcGUuCgogICAgIiIiCgogICAgX19zbG90c19fID0gImtleSIsCgogICAgZGVmIF9fbmV3X18odHlwZSwgb2IsIGNhbGxiYWNrLCBrZXkpOgogICAgICAgIHNlbGYgPSByZWYuX19uZXdfXyh0eXBlLCBvYiwgY2FsbGJhY2spCiAgICAgICAgc2VsZi5rZXkgPSBrZXkKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBvYiwgY2FsbGJhY2ssIGtleSk6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhvYiwgY2FsbGJhY2spCgoKY2xhc3MgV2Vha0tleURpY3Rpb25hcnkoY29sbGVjdGlvbnMuTXV0YWJsZU1hcHBpbmcpOgogICAgIiIiIE1hcHBpbmcgY2xhc3MgdGhhdCByZWZlcmVuY2VzIGtleXMgd2Vha2x5LgoKICAgIEVudHJpZXMgaW4gdGhlIGRpY3Rpb25hcnkgd2lsbCBiZSBkaXNjYXJkZWQgd2hlbiB0aGVyZSBpcyBubwogICAgbG9uZ2VyIGEgc3Ryb25nIHJlZmVyZW5jZSB0byB0aGUga2V5LiBUaGlzIGNhbiBiZSB1c2VkIHRvCiAgICBhc3NvY2lhdGUgYWRkaXRpb25hbCBkYXRhIHdpdGggYW4gb2JqZWN0IG93bmVkIGJ5IG90aGVyIHBhcnRzIG9mCiAgICBhbiBhcHBsaWNhdGlvbiB3aXRob3V0IGFkZGluZyBhdHRyaWJ1dGVzIHRvIHRob3NlIG9iamVjdHMuIFRoaXMKICAgIGNhbiBiZSBlc3BlY2lhbGx5IHVzZWZ1bCB3aXRoIG9iamVjdHMgdGhhdCBvdmVycmlkZSBhdHRyaWJ1dGUKICAgIGFjY2Vzc2VzLgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRpY3Q9Tm9uZSk6CiAgICAgICAgc2VsZi5kYXRhID0ge30KICAgICAgICBkZWYgcmVtb3ZlKGssIHNlbGZyZWY9cmVmKHNlbGYpKToKICAgICAgICAgICAgc2VsZiA9IHNlbGZyZWYoKQogICAgICAgICAgICBpZiBzZWxmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgc2VsZi5faXRlcmF0aW5nOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMuYXBwZW5kKGspCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRlbCBzZWxmLmRhdGFba10KICAgICAgICBzZWxmLl9yZW1vdmUgPSByZW1vdmUKICAgICAgICAjIEEgbGlzdCBvZiBkZWFkIHdlYWtyZWZzIChrZXlzIHRvIGJlIHJlbW92ZWQpCiAgICAgICAgc2VsZi5fcGVuZGluZ19yZW1vdmFscyA9IFtdCiAgICAgICAgc2VsZi5faXRlcmF0aW5nID0gc2V0KCkKICAgICAgICBpZiBkaWN0IGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLnVwZGF0ZShkaWN0KQoKICAgIGRlZiBfY29tbWl0X3JlbW92YWxzKHNlbGYpOgogICAgICAgICMgTk9URTogV2UgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgbWV0aG9kIGJlZm9yZSBtdXRhdGluZyB0aGUgZGljdCwKICAgICAgICAjIGJlY2F1c2UgYSBkZWFkIHdlYWtyZWYgbmV2ZXIgY29tcGFyZXMgZXF1YWwgdG8gYSBsaXZlIHdlYWtyZWYsCiAgICAgICAgIyBldmVuIGlmIHRoZXkgaGFwcGVuZWQgdG8gcmVmZXIgdG8gZXF1YWwgb2JqZWN0cy4KICAgICAgICAjIEhvd2V2ZXIsIGl0IG1lYW5zIGtleXMgbWF5IGFscmVhZHkgaGF2ZSBiZWVuIHJlbW92ZWQuCiAgICAgICAgbCA9IHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMKICAgICAgICBkID0gc2VsZi5kYXRhCiAgICAgICAgd2hpbGUgbDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGVsIGRbbC5wb3AoKV0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAgICAgcGFzcwoKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIGRlbCBzZWxmLmRhdGFbcmVmKGtleSldCgogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGtleSk6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YVtyZWYoa2V5KV0KCiAgICBkZWYgX19sZW5fXyhzZWxmKToKICAgICAgICByZXR1cm4gbGVuKHNlbGYuZGF0YSkgLSBsZW4oc2VsZi5fcGVuZGluZ19yZW1vdmFscykKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgcmV0dXJuICI8V2Vha0tleURpY3Rpb25hcnkgYXQgJXM+IiAlIGlkKHNlbGYpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsIGtleSwgdmFsdWUpOgogICAgICAgIHNlbGYuZGF0YVtyZWYoa2V5LCBzZWxmLl9yZW1vdmUpXSA9IHZhbHVlCgogICAgZGVmIGNvcHkoc2VsZik6CiAgICAgICAgbmV3ID0gV2Vha0tleURpY3Rpb25hcnkoKQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIHNlbGYuZGF0YS5pdGVtcygpOgogICAgICAgICAgICBvID0ga2V5KCkKICAgICAgICAgICAgaWYgbyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIG5ld1tvXSA9IHZhbHVlCiAgICAgICAgcmV0dXJuIG5ldwoKICAgIF9fY29weV9fID0gY29weQoKICAgIGRlZiBfX2RlZXBjb3B5X18oc2VsZiwgbWVtbyk6CiAgICAgICAgZnJvbSBjb3B5IGltcG9ydCBkZWVwY29weQogICAgICAgIG5ldyA9IHNlbGYuX19jbGFzc19fKCkKICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBzZWxmLmRhdGEuaXRlbXMoKToKICAgICAgICAgICAgbyA9IGtleSgpCiAgICAgICAgICAgIGlmIG8gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBuZXdbb10gPSBkZWVwY29weSh2YWx1ZSwgbWVtbykKICAgICAgICByZXR1cm4gbmV3CgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5nZXQocmVmKGtleSksZGVmYXVsdCkKCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3ciA9IHJlZihrZXkpCiAgICAgICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgcmV0dXJuIHdyIGluIHNlbGYuZGF0YQoKICAgIGRlZiBpdGVtcyhzZWxmKToKICAgICAgICB3aXRoIF9JdGVyYXRpb25HdWFyZChzZWxmKToKICAgICAgICAgICAgZm9yIHdyLCB2YWx1ZSBpbiBzZWxmLmRhdGEuaXRlbXMoKToKICAgICAgICAgICAgICAgIGtleSA9IHdyKCkKICAgICAgICAgICAgICAgIGlmIGtleSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICB5aWVsZCBrZXksIHZhbHVlCgogICAgZGVmIGtleXMoc2VsZik6CiAgICAgICAgd2l0aCBfSXRlcmF0aW9uR3VhcmQoc2VsZik6CiAgICAgICAgICAgIGZvciB3ciBpbiBzZWxmLmRhdGE6CiAgICAgICAgICAgICAgICBvYmogPSB3cigpCiAgICAgICAgICAgICAgICBpZiBvYmogaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgeWllbGQgb2JqCgogICAgX19pdGVyX18gPSBrZXlzCgogICAgZGVmIHZhbHVlcyhzZWxmKToKICAgICAgICB3aXRoIF9JdGVyYXRpb25HdWFyZChzZWxmKToKICAgICAgICAgICAgZm9yIHdyLCB2YWx1ZSBpbiBzZWxmLmRhdGEuaXRlbXMoKToKICAgICAgICAgICAgICAgIGlmIHdyKCkgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgeWllbGQgdmFsdWUKCiAgICBkZWYga2V5cmVmcyhzZWxmKToKICAgICAgICAiIiJSZXR1cm4gYSBsaXN0IG9mIHdlYWsgcmVmZXJlbmNlcyB0byB0aGUga2V5cy4KCiAgICAgICAgVGhlIHJlZmVyZW5jZXMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlICdsaXZlJyBhdCB0aGUgdGltZQogICAgICAgIHRoZXkgYXJlIHVzZWQsIHNvIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgcmVmZXJlbmNlcyBuZWVkcwogICAgICAgIHRvIGJlIGNoZWNrZWQgYmVmb3JlIGJlaW5nIHVzZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGF2b2lkCiAgICAgICAgY3JlYXRpbmcgcmVmZXJlbmNlcyB0aGF0IHdpbGwgY2F1c2UgdGhlIGdhcmJhZ2UgY29sbGVjdG9yIHRvCiAgICAgICAga2VlcCB0aGUga2V5cyBhcm91bmQgbG9uZ2VyIHRoYW4gbmVlZGVkLgoKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gbGlzdChzZWxmLmRhdGEpCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAga2V5LCB2YWx1ZSA9IHNlbGYuZGF0YS5wb3BpdGVtKCkKICAgICAgICAgICAgbyA9IGtleSgpCiAgICAgICAgICAgIGlmIG8gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICByZXR1cm4gbywgdmFsdWUKCiAgICBkZWYgcG9wKHNlbGYsIGtleSwgKmFyZ3MpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEucG9wKHJlZihrZXkpLCAqYXJncykKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5zZXRkZWZhdWx0KHJlZihrZXksIHNlbGYuX3JlbW92ZSksZGVmYXVsdCkKCiAgICBkZWYgdXBkYXRlKHNlbGYsIGRpY3Q9Tm9uZSwgKiprd2FyZ3MpOgogICAgICAgIGQgPSBzZWxmLmRhdGEKICAgICAgICBpZiBkaWN0IGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBub3QgaGFzYXR0cihkaWN0LCAiaXRlbXMiKToKICAgICAgICAgICAgICAgIGRpY3QgPSB0eXBlKHt9KShkaWN0KQogICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBkaWN0Lml0ZW1zKCk6CiAgICAgICAgICAgICAgICBkW3JlZihrZXksIHNlbGYuX3JlbW92ZSldID0gdmFsdWUKICAgICAgICBpZiBsZW4oa3dhcmdzKToKICAgICAgICAgICAgc2VsZi51cGRhdGUoa3dhcmdzKQo=',
'/Lib/webbrowser.py':'X19hbGxfXyA9IFsiRXJyb3IiLCAib3BlbiIsICJvcGVuX25ldyIsICJvcGVuX25ld190YWIiXQoKY2xhc3MgRXJyb3IoRXhjZXB0aW9uKToKICAgIHBhc3MKCl90YXJnZXQgPSB7IDA6ICcnLCAxOiAnX2JsYW5rJywgMjogJ19uZXcnIH0gICMgaGFjay4uLgoKCmRlZiBvcGVuKHVybCwgbmV3PTAsIGF1dG9yYWlzZT1UcnVlKToKICAgICIiIiAKICAgIG5ldyB3aW5kb3cgb3IgdGFiIGlzIG5vdCBjb250cm9sbGFibGUKICAgIG9uIHRoZSBjbGllbnQgc2lkZS4gYXV0b3JhaXNlIG5vdCBhdmFpbGFibGUuCiAgICAiIiIKICAgIGlmIHdpbi5vcGVuKHVybCwgX3RhcmdldFtuZXddKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKZGVmIG9wZW5fbmV3KHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDEpCgpkZWYgb3Blbl9uZXdfdGFiKHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDIpCgoK',
'/Lib/_abcoll.py':'IyBDb3B5cmlnaHQgMjAwNyBHb29nbGUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIyBMaWNlbnNlZCB0byBQU0YgdW5kZXIgYSBDb250cmlidXRvciBBZ3JlZW1lbnQuCgoiIiJBYnN0cmFjdCBCYXNlIENsYXNzZXMgKEFCQ3MpIGZvciBjb2xsZWN0aW9ucywgYWNjb3JkaW5nIHRvIFBFUCAzMTE5LgoKRE9OJ1QgVVNFIFRISVMgTU9EVUxFIERJUkVDVExZISAgVGhlIGNsYXNzZXMgaGVyZSBzaG91bGQgYmUgaW1wb3J0ZWQKdmlhIGNvbGxlY3Rpb25zOyB0aGV5IGFyZSBkZWZpbmVkIGhlcmUgb25seSB0byBhbGxldmlhdGUgY2VydGFpbgpib290c3RyYXBwaW5nIGlzc3Vlcy4gIFVuaXQgdGVzdHMgYXJlIGluIHRlc3RfY29sbGVjdGlvbnMuCiIiIgoKI2Zyb20gYWJjIGltcG9ydCBBQkNNZXRhLCBhYnN0cmFjdG1ldGhvZAppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJIYXNoYWJsZSIsICJJdGVyYWJsZSIsICJJdGVyYXRvciIsCiAgICAgICAgICAgIlNpemVkIiwgIkNvbnRhaW5lciIsICJDYWxsYWJsZSIsCiAgICAgICAgICAgIlNldCIsICJNdXRhYmxlU2V0IiwKICAgICAgICAgICAiTWFwcGluZyIsICJNdXRhYmxlTWFwcGluZyIsCiAgICAgICAgICAgIk1hcHBpbmdWaWV3IiwgIktleXNWaWV3IiwgIkl0ZW1zVmlldyIsICJWYWx1ZXNWaWV3IiwKICAgICAgICAgICAiU2VxdWVuY2UiLCAiTXV0YWJsZVNlcXVlbmNlIiwKICAgICAgICAgICAiQnl0ZVN0cmluZyIsCiAgICAgICAgICAgXQoKIiIiCiMjIyBjb2xsZWN0aW9uIHJlbGF0ZWQgdHlwZXMgd2hpY2ggYXJlIG5vdCBleHBvc2VkIHRocm91Z2ggYnVpbHRpbiAjIyMKIyMgaXRlcmF0b3JzICMjCiNmaXhtZSBicnl0aG9uCiNieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcihiJycpKQpieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcignJykpCiNmaXhtZSBicnl0aG9uCiNieXRlYXJyYXlfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoYnl0ZWFycmF5KCkpKQojY2FsbGFibGVfaXRlcmF0b3IgPSA/Pz8KZGljdF9rZXlpdGVyYXRvciA9IHR5cGUoaXRlcih7fS5rZXlzKCkpKQpkaWN0X3ZhbHVlaXRlcmF0b3IgPSB0eXBlKGl0ZXIoe30udmFsdWVzKCkpKQpkaWN0X2l0ZW1pdGVyYXRvciA9IHR5cGUoaXRlcih7fS5pdGVtcygpKSkKbGlzdF9pdGVyYXRvciA9IHR5cGUoaXRlcihbXSkpCmxpc3RfcmV2ZXJzZWl0ZXJhdG9yID0gdHlwZShpdGVyKHJldmVyc2VkKFtdKSkpCnJhbmdlX2l0ZXJhdG9yID0gdHlwZShpdGVyKHJhbmdlKDApKSkKc2V0X2l0ZXJhdG9yID0gdHlwZShpdGVyKHNldCgpKSkKc3RyX2l0ZXJhdG9yID0gdHlwZShpdGVyKCIiKSkKdHVwbGVfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoKCkpKQp6aXBfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoemlwKCkpKQojIyB2aWV3cyAjIwpkaWN0X2tleXMgPSB0eXBlKHt9LmtleXMoKSkKZGljdF92YWx1ZXMgPSB0eXBlKHt9LnZhbHVlcygpKQpkaWN0X2l0ZW1zID0gdHlwZSh7fS5pdGVtcygpKQojIyBtaXNjICMjCmRpY3RfcHJveHkgPSB0eXBlKHR5cGUuX19kaWN0X18pCiIiIgoKZGVmIGFic3RyYWN0bWV0aG9kKHNlbGYpOgogICAgcmV0dXJuIHNlbGYKCiMjIyBPTkUtVFJJQ0sgUE9OSUVTICMjIwoKCiNjbGFzcyBJdGVyYWJsZShtZXRhY2xhc3M9QUJDTWV0YSk6CmNsYXNzIEl0ZXJhYmxlOgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHdoaWxlIEZhbHNlOgogICAgICAgICAgICB5aWVsZCBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBJdGVyYWJsZToKICAgICAgICAgICAgaWYgYW55KCJfX2l0ZXJfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCgojY2xhc3MgU2l6ZWQobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBTaXplZDoKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAwCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBTaXplZDoKICAgICAgICAgICAgaWYgYW55KCJfX2xlbl9fIiBpbiBCLl9fZGljdF9fIGZvciBCIGluIEMuX19tcm9fXyk6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKCiNjbGFzcyBDb250YWluZXIobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBDb250YWluZXI6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHgpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9fc3ViY2xhc3Nob29rX18oY2xzLCBDKToKICAgICAgICBpZiBjbHMgaXMgQ29udGFpbmVyOgogICAgICAgICAgICBpZiBhbnkoIl9fY29udGFpbnNfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiMjIyBNQVBQSU5HUyAjIyMKCgpjbGFzcyBNYXBwaW5nKFNpemVkLCBJdGVyYWJsZSwgQ29udGFpbmVyKToKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGZba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICByZXR1cm4gS2V5c1ZpZXcoc2VsZikKCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgcmV0dXJuIEl0ZW1zVmlldyhzZWxmKQoKICAgIGRlZiB2YWx1ZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIFZhbHVlc1ZpZXcoc2VsZikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgTWFwcGluZyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBkaWN0KHNlbGYuaXRlbXMoKSkgPT0gZGljdChvdGhlci5pdGVtcygpKQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3QgKHNlbGYgPT0gb3RoZXIpCgoKY2xhc3MgTXV0YWJsZU1hcHBpbmcoTWFwcGluZyk6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgcmFpc2UgS2V5RXJyb3IKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgX19tYXJrZXIgPSBvYmplY3QoKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCBkZWZhdWx0PV9fbWFya2VyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIHNlbGYuX19tYXJrZXI6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbCBzZWxmW2tleV0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBrZXkgPSBuZXh0KGl0ZXIoc2VsZikpCiAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yCiAgICAgICAgdmFsdWUgPSBzZWxmW2tleV0KICAgICAgICBkZWwgc2VsZltrZXldCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc2VsZi5wb3BpdGVtKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKCphcmdzLCAqKmt3ZHMpOgogICAgICAgIGlmIGxlbihhcmdzKSA+IDI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidXBkYXRlKCkgdGFrZXMgYXQgbW9zdCAyIHBvc2l0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyAoe30gZ2l2ZW4pIi5mb3JtYXQobGVuKGFyZ3MpKSkKICAgICAgICBlbGlmIG5vdCBhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInVwZGF0ZSgpIHRha2VzIGF0IGxlYXN0IDEgYXJndW1lbnQgKDAgZ2l2ZW4pIikKICAgICAgICBzZWxmID0gYXJnc1swXQogICAgICAgIG90aGVyID0gYXJnc1sxXSBpZiBsZW4oYXJncykgPj0gMiBlbHNlICgpCgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIE1hcHBpbmcpOgogICAgICAgICAgICBmb3Iga2V5IGluIG90aGVyOgogICAgICAgICAgICAgICAgc2VsZltrZXldID0gb3RoZXJba2V5XQogICAgICAgIGVsaWYgaGFzYXR0cihvdGhlciwgImtleXMiKToKICAgICAgICAgICAgZm9yIGtleSBpbiBvdGhlci5rZXlzKCk6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSBvdGhlcltrZXldCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gb3RoZXI6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3ZHMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWUKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmW2tleV0gPSBkZWZhdWx0CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiNNdXRhYmxlTWFwcGluZy5yZWdpc3RlcihkaWN0KQo=',
'/Lib/_collections.py':'',
'/Lib/_dummy_thread.py':'IiIiRHJvcC1pbiByZXBsYWNlbWVudCBmb3IgdGhlIHRocmVhZCBtb2R1bGUuCgpNZWFudCB0byBiZSB1c2VkIGFzIGEgYnJhaW4tZGVhZCBzdWJzdGl0dXRlIHNvIHRoYXQgdGhyZWFkZWQgY29kZSBkb2VzCm5vdCBuZWVkIHRvIGJlIHJld3JpdHRlbiBmb3Igd2hlbiB0aGUgdGhyZWFkIG1vZHVsZSBpcyBub3QgcHJlc2VudC4KClN1Z2dlc3RlZCB1c2FnZSBpczo6CgogICAgdHJ5OgogICAgICAgIGltcG9ydCBfdGhyZWFkCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IF9kdW1teV90aHJlYWQgYXMgX3RocmVhZAoKIiIiCiMgRXhwb3J0cyBvbmx5IHRoaW5ncyBzcGVjaWZpZWQgYnkgdGhyZWFkIGRvY3VtZW50YXRpb247CiMgc2tpcHBpbmcgb2Jzb2xldGUgc3lub255bXMgYWxsb2NhdGUoKSwgc3RhcnRfbmV3KCksIGV4aXRfdGhyZWFkKCkuCl9fYWxsX18gPSBbJ2Vycm9yJywgJ3N0YXJ0X25ld190aHJlYWQnLCAnZXhpdCcsICdnZXRfaWRlbnQnLCAnYWxsb2NhdGVfbG9jaycsCiAgICAgICAgICAgJ2ludGVycnVwdF9tYWluJywgJ0xvY2tUeXBlJ10KCiMgQSBkdW1teSB2YWx1ZQpUSU1FT1VUX01BWCA9IDIqKjMxCgojIE5PVEU6IHRoaXMgbW9kdWxlIGNhbiBiZSBpbXBvcnRlZCBlYXJseSBpbiB0aGUgZXh0ZW5zaW9uIGJ1aWxkaW5nIHByb2Nlc3MsCiMgYW5kIHNvIHRvcCBsZXZlbCBpbXBvcnRzIG9mIG90aGVyIG1vZHVsZXMgc2hvdWxkIGJlIGF2b2lkZWQuICBJbnN0ZWFkLCBhbGwKIyBpbXBvcnRzIGFyZSBkb25lIHdoZW4gbmVlZGVkIG9uIGEgZnVuY3Rpb24tYnktZnVuY3Rpb24gYmFzaXMuICBTaW5jZSB0aHJlYWRzCiMgYXJlIGRpc2FibGVkLCB0aGUgaW1wb3J0IGxvY2sgc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZSBhbnl3YXkgKD8/KS4KCmVycm9yID0gUnVudGltZUVycm9yCgpkZWYgc3RhcnRfbmV3X3RocmVhZChmdW5jdGlvbiwgYXJncywga3dhcmdzPXt9KToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuc3RhcnRfbmV3X3RocmVhZCgpLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWtpbmcgc3VyZSB0aGF0IGBgYXJnc2BgIGlzIGEKICAgIHR1cGxlIGFuZCBgYGt3YXJnc2BgIGlzIGEgZGljdGlvbmFyeS4gIElmIGFuIGV4Y2VwdGlvbiBpcyByYWlzZWQKICAgIGFuZCBpdCBpcyBTeXN0ZW1FeGl0ICh3aGljaCBjYW4gYmUgZG9uZSBieSBfdGhyZWFkLmV4aXQoKSkgaXQgaXMKICAgIGNhdWdodCBhbmQgbm90aGluZyBpcyBkb25lOyBhbGwgb3RoZXIgZXhjZXB0aW9ucyBhcmUgcHJpbnRlZCBvdXQKICAgIGJ5IHVzaW5nIHRyYWNlYmFjay5wcmludF9leGMoKS4KCiAgICBJZiB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24gY2FsbHMgaW50ZXJydXB0X21haW4gdGhlIEtleWJvYXJkSW50ZXJydXB0IHdpbGwgYmUKICAgIHJhaXNlZCB3aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zLgoKICAgICIiIgogICAgaWYgdHlwZShhcmdzKSAhPSB0eXBlKHR1cGxlKCkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiMm5kIGFyZyBtdXN0IGJlIGEgdHVwbGUiKQogICAgaWYgdHlwZShrd2FyZ3MpICE9IHR5cGUoZGljdCgpKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoIjNyZCBhcmcgbXVzdCBiZSBhIGRpY3QiKQogICAgZ2xvYmFsIF9tYWluCiAgICBfbWFpbiA9IEZhbHNlCiAgICB0cnk6CiAgICAgICAgZnVuY3Rpb24oKmFyZ3MsICoqa3dhcmdzKQogICAgZXhjZXB0IFN5c3RlbUV4aXQ6CiAgICAgICAgcGFzcwogICAgZXhjZXB0OgogICAgICAgIGltcG9ydCB0cmFjZWJhY2sKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgIF9tYWluID0gVHJ1ZQogICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgIGlmIF9pbnRlcnJ1cHQ6CiAgICAgICAgX2ludGVycnVwdCA9IEZhbHNlCiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKCmRlZiBleGl0KCk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLmV4aXQoKS4iIiIKICAgIHJhaXNlIFN5c3RlbUV4aXQKCmRlZiBnZXRfaWRlbnQoKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuZ2V0X2lkZW50KCkuCgogICAgU2luY2UgdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIF90aHJlYWRtb2R1bGUgaXMgbm90CiAgICBhdmFpbGFibGUsIGl0IGlzIHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhlIGN1cnJlbnQgcHJvY2VzcyBpcyB0aGUKICAgIG9ubHkgdGhyZWFkLiAgVGh1cyBhIGNvbnN0YW50IGNhbiBiZSBzYWZlbHkgcmV0dXJuZWQuCiAgICAiIiIKICAgIHJldHVybiAtMQoKZGVmIGFsbG9jYXRlX2xvY2soKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuYWxsb2NhdGVfbG9jaygpLiIiIgogICAgcmV0dXJuIExvY2tUeXBlKCkKCmRlZiBzdGFja19zaXplKHNpemU9Tm9uZSk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLnN0YWNrX3NpemUoKS4iIiIKICAgIGlmIHNpemUgaXMgbm90IE5vbmU6CiAgICAgICAgcmFpc2UgZXJyb3IoInNldHRpbmcgdGhyZWFkIHN0YWNrIHNpemUgbm90IHN1cHBvcnRlZCIpCiAgICByZXR1cm4gMAoKY2xhc3MgTG9ja1R5cGUob2JqZWN0KToKICAgICIiIkNsYXNzIGltcGxlbWVudGluZyBkdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLkxvY2tUeXBlLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWludGFpbmluZyBzZWxmLmxvY2tlZF9zdGF0dXMKICAgIHdoaWNoIGlzIGEgYm9vbGVhbiB0aGF0IHN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxvY2suICBQaWNrbGluZyBvZgogICAgdGhlIGxvY2ssIHRob3VnaCwgc2hvdWxkIG5vdCBiZSBkb25lIHNpbmNlIGlmIHRoZSBfdGhyZWFkIG1vZHVsZSBpcwogICAgdGhlbiB1c2VkIHdpdGggYW4gdW5waWNrbGVkIGBgbG9jaygpYGAgZnJvbSBoZXJlIHByb2JsZW1zIGNvdWxkCiAgICBvY2N1ciBmcm9tIHRoaXMgY2xhc3Mgbm90IGhhdmluZyBhdG9taWMgbWV0aG9kcy4KCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gRmFsc2UKCiAgICBkZWYgYWNxdWlyZShzZWxmLCB3YWl0ZmxhZz1Ob25lLCB0aW1lb3V0PS0xKToKICAgICAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBhY3F1aXJlKCkuCgogICAgICAgIEZvciBibG9ja2luZyBjYWxscywgc2VsZi5sb2NrZWRfc3RhdHVzIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvCiAgICAgICAgVHJ1ZSBhbmQgcmV0dXJuZWQgYXBwcm9wcmlhdGVseSBiYXNlZCBvbiB2YWx1ZSBvZgogICAgICAgIGBgd2FpdGZsYWdgYC4gIElmIGl0IGlzIG5vbi1ibG9ja2luZywgdGhlbiB0aGUgdmFsdWUgaXMKICAgICAgICBhY3R1YWxseSBjaGVja2VkIGFuZCBub3Qgc2V0IGlmIGl0IGlzIGFscmVhZHkgYWNxdWlyZWQuICBUaGlzCiAgICAgICAgaXMgYWxsIGRvbmUgc28gdGhhdCB0aHJlYWRpbmcuQ29uZGl0aW9uJ3MgYXNzZXJ0IHN0YXRlbWVudHMKICAgICAgICBhcmVuJ3QgdHJpZ2dlcmVkIGFuZCB0aHJvdyBhIGxpdHRsZSBmaXQuCgogICAgICAgICIiIgogICAgICAgIGlmIHdhaXRmbGFnIGlzIE5vbmUgb3Igd2FpdGZsYWc6CiAgICAgICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IFRydWUKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gVHJ1ZQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIHRpbWVvdXQgPiAwOgogICAgICAgICAgICAgICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCh0aW1lb3V0KQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgX19lbnRlcl9fID0gYWNxdWlyZQoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCB0eXAsIHZhbCwgdGIpOgogICAgICAgIHNlbGYucmVsZWFzZSgpCgogICAgZGVmIHJlbGVhc2Uoc2VsZik6CiAgICAgICAgIiIiUmVsZWFzZSB0aGUgZHVtbXkgbG9jay4iIiIKICAgICAgICAjIFhYWCBQZXJoYXBzIHNob3VsZG4ndCBhY3R1YWxseSBib3RoZXIgdG8gdGVzdD8gIENvdWxkIGxlYWQKICAgICAgICAjICAgICB0byBwcm9ibGVtcyBmb3IgY29tcGxleCwgdGhyZWFkZWQgY29kZS4KICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICByYWlzZSBlcnJvcgogICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgbG9ja2VkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmxvY2tlZF9zdGF0dXMKCiMgVXNlZCB0byBzaWduYWwgdGhhdCBpbnRlcnJ1cHRfbWFpbiB3YXMgY2FsbGVkIGluIGEgInRocmVhZCIKX2ludGVycnVwdCA9IEZhbHNlCiMgVHJ1ZSB3aGVuIG5vdCBleGVjdXRpbmcgaW4gYSAidGhyZWFkIgpfbWFpbiA9IFRydWUKCmRlZiBpbnRlcnJ1cHRfbWFpbigpOgogICAgIiIiU2V0IF9pbnRlcnJ1cHQgZmxhZyB0byBUcnVlIHRvIGhhdmUgc3RhcnRfbmV3X3RocmVhZCByYWlzZQogICAgS2V5Ym9hcmRJbnRlcnJ1cHQgdXBvbiBleGl0aW5nLiIiIgogICAgaWYgX21haW46CiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKICAgIGVsc2U6CiAgICAgICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgICAgICBfaW50ZXJydXB0ID0gVHJ1ZQo=',
'/Lib/_functools.py':'ZGVmIHBhcnRpYWwoZnVuYywgKmFyZ3MsICoqa2V5d29yZHMpOgogICAgZGVmIG5ld2Z1bmMoKmZhcmdzLCAqKmZrZXl3b3Jkcyk6CiAgICAgICAgbmV3a2V5d29yZHMgPSBrZXl3b3Jkcy5jb3B5KCkKICAgICAgICBuZXdrZXl3b3Jkcy51cGRhdGUoZmtleXdvcmRzKQogICAgICAgIHJldHVybiBmdW5jKCooYXJncyArIGZhcmdzKSwgKipuZXdrZXl3b3JkcykKICAgIG5ld2Z1bmMuZnVuYyA9IGZ1bmMKICAgIG5ld2Z1bmMuYXJncyA9IGFyZ3MKICAgIG5ld2Z1bmMua2V5d29yZHMgPSBrZXl3b3JkcwogICAgcmV0dXJuIG5ld2Z1bmMKCmRlZiByZWR1Y2UoZnVuYyxpdGVyYWJsZSxpbml0aWFsaXplcj1Ob25lKToKICAgIGFyZ3MgPSBpdGVyKGl0ZXJhYmxlKQogICAgaWYgaW5pdGlhbGl6ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgcmVzID0gaW5pdGlhbGl6ZXIKICAgIGVsc2U6CiAgICAgICAgcmVzID0gbmV4dChhcmcpCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzID0gZnVuYyhyZXMsbmV4dChhcmdzKSkKICAgICAgICBleGNlcHQgU3RvcEl0ZXJhdGlvbjoKICAgICAgICAgICAgcmV0dXJuIHJlcwoKZGVmIGNtcF90b19rZXkoZnVuYyk6CiAgICAiIiJUcmFuc2Zvcm0gYW4gb2xkLXN0eWxlIGNvbXBhcmlzb24gZnVuY3Rpb24gdG8gYSBrZXkgZnVuY3Rpb24uIAogICAgCiAgICBBIGNvbXBhcmlzb24gZnVuY3Rpb24gaXMgYW55IGNhbGxhYmxlIHRoYXQgYWNjZXB0IHR3byBhcmd1bWVudHMsIAogICAgY29tcGFyZXMgdGhlbSwgYW5kIHJldHVybnMgYSBuZWdhdGl2ZSBudW1iZXIgZm9yIGxlc3MtdGhhbiwgemVybyBmb3IgCiAgICBlcXVhbGl0eSwgb3IgYSBwb3NpdGl2ZSBudW1iZXIgZm9yIGdyZWF0ZXItdGhhbi4gQSBrZXkgZnVuY3Rpb24gaXMgYSAKICAgIGNhbGxhYmxlIHRoYXQgYWNjZXB0cyBvbmUgYXJndW1lbnQgYW5kIHJldHVybnMgYW5vdGhlciB2YWx1ZSBpbmRpY2F0aW5nIAogICAgdGhlIHBvc2l0aW9uIGluIHRoZSBkZXNpcmVkIGNvbGxhdGlvbiBzZXF1ZW5jZS4iIiIKCiAgICAjIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTYzNjI3NDQvaG93LWRvZXMtcHl0aG9ucy1jbXAtdG8ta2V5LWZ1bmN0aW9uLXdvcmsKICAgICMgYnkgTWFydGlqbiBQaWV0ZXJzCiAgICBjbGFzcyBLOgogICAgICAgIF9fc2xvdHNfXyA9IFsnb2JqJ10KICAgICAgICBkZWYgX19pbml0X18oc2VsZiwgb2JqLCAqYXJncyk6CiAgICAgICAgICAgIHNlbGYub2JqID0gb2JqCiAgICAgICAgZGVmIF9fbHRfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgICAgIHJldHVybiBteWNtcChzZWxmLm9iaiwgb3RoZXIub2JqKSA8IDAKICAgICAgICBkZWYgX19ndF9fKHNlbGYsIG90aGVyKToKICAgICAgICAgICAgcmV0dXJuIG15Y21wKHNlbGYub2JqLCBvdGhlci5vYmopID4gMAogICAgICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgICAgICByZXR1cm4gbXljbXAoc2VsZi5vYmosIG90aGVyLm9iaikgPT0gMAogICAgICAgIGRlZiBfX2xlX18oc2VsZiwgb3RoZXIpOgogICAgICAgICAgICByZXR1cm4gbXljbXAoc2VsZi5vYmosIG90aGVyLm9iaikgPD0gMAogICAgICAgIGRlZiBfX2dlX18oc2VsZiwgb3RoZXIpOgogICAgICAgICAgICByZXR1cm4gbXljbXAoc2VsZi5vYmosIG90aGVyLm9iaikgPj0gMAogICAgICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgICAgICByZXR1cm4gbXljbXAoc2VsZi5vYmosIG90aGVyLm9iaikgIT0gMAogICAgICAgIGRlZiBfX2hhc2hfXyhzZWxmKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdoYXNoIG5vdCBpbXBsZW1lbnRlZCcpCiAgICAgICAgCiAgICByZXR1cm4gSyhmdW5jKQ==',
'/Lib/_random.py':'aW1wb3J0IF9vcwpjbGFzcyBSYW5kb206CiAgICAiIiJSYW5kb20gbnVtYmVyIGdlbmVyYXRvciBiYXNlIGNsYXNzIHVzZWQgYnkgYm91bmQgbW9kdWxlIGZ1bmN0aW9ucy4KCiAgICBVc2VkIHRvIGluc3RhbnRpYXRlIGluc3RhbmNlcyBvZiBSYW5kb20gdG8gZ2V0IGdlbmVyYXRvcnMgdGhhdCBkb24ndAogICAgc2hhcmUgc3RhdGUuCgogICAgQ2xhc3MgUmFuZG9tIGNhbiBhbHNvIGJlIHN1YmNsYXNzZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgZGlmZmVyZW50IGJhc2ljCiAgICBnZW5lcmF0b3Igb2YgeW91ciBvd24gZGV2aXNpbmc6IGluIHRoYXQgY2FzZSwgb3ZlcnJpZGUgdGhlIGZvbGxvd2luZwogICAgbWV0aG9kczogIHJhbmRvbSgpLCBzZWVkKCksIGdldHN0YXRlKCksIGFuZCBzZXRzdGF0ZSgpLgogICAgT3B0aW9uYWxseSwgaW1wbGVtZW50IGEgZ2V0cmFuZGJpdHMoKSBtZXRob2Qgc28gdGhhdCByYW5kcmFuZ2UoKQogICAgY2FuIGNvdmVyIGFyYml0cmFyaWx5IGxhcmdlIHJhbmdlcy4KCiAgICAiIiIKICAgICNyYW5kb20KICAgICNzZWVkCiAgICAjZ2V0c3RhdGUKICAgICNzZXRzdGF0ZQoKCiAgICBWRVJTSU9OID0gMyAgICAgIyB1c2VkIGJ5IGdldHN0YXRlL3NldHN0YXRlCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHg9Tm9uZSk6CiAgICAgICAgIiIiSW5pdGlhbGl6ZSBhbiBpbnN0YW5jZS4KCiAgICAgICAgT3B0aW9uYWwgYXJndW1lbnQgeCBjb250cm9scyBzZWVkaW5nLCBhcyBmb3IgUmFuZG9tLnNlZWQoKS4KICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9eAoKICAgIGRlZiBzZWVkKHNlbGYsIGE9Tm9uZSwgdmVyc2lvbj0yKToKICAgICAgICAiIiJJbml0aWFsaXplIGludGVybmFsIHN0YXRlIGZyb20gaGFzaGFibGUgb2JqZWN0LgoKICAgICAgICBOb25lIG9yIG5vIGFyZ3VtZW50IHNlZWRzIGZyb20gY3VycmVudCB0aW1lIG9yIGZyb20gYW4gb3BlcmF0aW5nCiAgICAgICAgc3lzdGVtIHNwZWNpZmljIHJhbmRvbW5lc3Mgc291cmNlIGlmIGF2YWlsYWJsZS4KCiAgICAgICAgRm9yIHZlcnNpb24gMiAodGhlIGRlZmF1bHQpLCBhbGwgb2YgdGhlIGJpdHMgYXJlIHVzZWQgaWYgKmEqIGlzIGEgc3RyLAogICAgICAgIGJ5dGVzLCBvciBieXRlYXJyYXkuICBGb3IgdmVyc2lvbiAxLCB0aGUgaGFzaCgpIG9mICphKiBpcyB1c2VkIGluc3RlYWQuCgogICAgICAgIElmICphKiBpcyBhbiBpbnQsIGFsbCBiaXRzIGFyZSB1c2VkLgoKICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9YQogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKCiAgICBkZWYgZ2V0c3RhdGUoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGludGVybmFsIHN0YXRlOyBjYW4gYmUgcGFzc2VkIHRvIHNldHN0YXRlKCkgbGF0ZXIuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3N0YXRlCgogICAgZGVmIHNldHN0YXRlKHNlbGYsIHN0YXRlKToKICAgICAgICAiIiJSZXN0b3JlIGludGVybmFsIHN0YXRlIGZyb20gb2JqZWN0IHJldHVybmVkIGJ5IGdldHN0YXRlKCkuIiIiCiAgICAgICAgc2VsZi5fc3RhdGU9c3RhdGUKCiAgICBkZWYgcmFuZG9tKHNlbGYpOgogICAgICAgICIiIkdldCB0aGUgbmV4dCByYW5kb20gbnVtYmVyIGluIHRoZSByYW5nZSBbMC4wLCAxLjApLiIiIgogICAgICAgIHJldHVybiBfb3MucmFuZG9tKCkKCiAgICBkZWYgZ2V0cmFuZGJpdHMoc2VsZiwgayk6CiAgICAgICAgIiIiZ2V0cmFuZGJpdHMoaykgLT4geC4gIEdlbmVyYXRlcyBhIGxvbmcgaW50IHdpdGggayByYW5kb20gYml0cy4iIiIKICAgICAgICBpZiBrIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ251bWJlciBvZiBiaXRzIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKQogICAgICAgIGlmIGsgIT0gaW50KGspOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ251bWJlciBvZiBiaXRzIHNob3VsZCBiZSBhbiBpbnRlZ2VyJykKICAgICAgICBudW1ieXRlcyA9IChrICsgNykgLy8gOCAgICAgICAgICAgICAgICAgICAgICAgIyBiaXRzIC8gOCBhbmQgcm91bmRlZCB1cAogICAgICAgIHggPSBpbnQuZnJvbV9ieXRlcyhfdXJhbmRvbShudW1ieXRlcyksICdiaWcnKQogICAgICAgIHJldHVybiB4ID4+IChudW1ieXRlcyAqIDggLSBrKSAgICAgICAgICAgICAgICAjIHRyaW0gZXhjZXNzIGJpdHMK',
'/Lib/_weakref.py':'Y2xhc3MgUHJveHlUeXBlOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLG9iaik6CiAgICAgICAgc2VsZi5vYmogPSBvYmoKCkNhbGxhYmxlUHJveHlUeXBlID0gUHJveHlUeXBlClByb3h5VHlwZXMgPSBbUHJveHlUeXBlLENhbGxhYmxlUHJveHlUeXBlXQoKY2xhc3MgUmVmZXJlbmNlVHlwZToKCiAgICBkZWYgX19pbml0X18oc2VsZixvYmosY2FsbGJhY2spOgogICAgICAgIHNlbGYub2JqID0gb2JqCiAgICAgICAgc2VsZi5jYWxsYmFjayA9IGNhbGxiYWNrCgpjbGFzcyByZWY6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsb2JqLGNhbGxiYWNrKToKICAgICAgICBzZWxmLm9iaiA9IFJlZmVyZW5jZVR5cGUob2JqLGNhbGxiYWNrKQoKZGVmIGdldHdlYWtyZWZjb3VudChvYmopOgogICAgcmV0dXJuIDEKCmRlZiBnZXR3ZWFrcmVmcyhvYmopOgogICAgcmV0dXJuIG9iagoKCmRlZiBwcm94eShvYmosY2FsbGJhY2spOgogICAgcmV0dXJuIFByb3h5VHlwZShvYmopCgo=',
'/Lib/_weakrefset.py':'IyBBY2Nlc3MgV2Vha1NldCB0aHJvdWdoIHRoZSB3ZWFrcmVmIG1vZHVsZS4KIyBUaGlzIGNvZGUgaXMgc2VwYXJhdGVkLW91dCBiZWNhdXNlIGl0IGlzIG5lZWRlZAojIGJ5IGFiYy5weSB0byBsb2FkIGV2ZXJ5dGhpbmcgZWxzZSBhdCBzdGFydHVwLgoKZnJvbSBfd2Vha3JlZiBpbXBvcnQgcmVmCgpfX2FsbF9fID0gWydXZWFrU2V0J10KCgpjbGFzcyBfSXRlcmF0aW9uR3VhcmQ6CiAgICAjIFRoaXMgY29udGV4dCBtYW5hZ2VyIHJlZ2lzdGVycyBpdHNlbGYgaW4gdGhlIGN1cnJlbnQgaXRlcmF0b3JzIG9mIHRoZQogICAgIyB3ZWFrIGNvbnRhaW5lciwgc3VjaCBhcyB0byBkZWxheSBhbGwgcmVtb3ZhbHMgdW50aWwgdGhlIGNvbnRleHQgbWFuYWdlcgogICAgIyBleGl0cy4KICAgICMgVGhpcyB0ZWNobmlxdWUgc2hvdWxkIGJlIHJlbGF0aXZlbHkgdGhyZWFkLXNhZmUgKHNpbmNlIHNldHMgYXJlKS4KCiAgICBkZWYgX19pbml0X18oc2VsZiwgd2Vha2NvbnRhaW5lcik6CiAgICAgICAgIyBEb24ndCBjcmVhdGUgY3ljbGVzCiAgICAgICAgcHJpbnQoJ2NyZWF0ZSBpdGVyYXRpb24gZ3VhcmQnLCB3ZWFrY29udGFpbmVyKQogICAgICAgIHNlbGYud2Vha2NvbnRhaW5lciA9IHJlZih3ZWFrY29udGFpbmVyKQoKICAgIGRlZiBfX2VudGVyX18oc2VsZik6CiAgICAgICAgcHJpbnQoJ2VudGVyIGl0ZXJhdGlvbiBndWFyZCcpCiAgICAgICAgdyA9IHNlbGYud2Vha2NvbnRhaW5lcigpCiAgICAgICAgaWYgdyBpcyBub3QgTm9uZToKICAgICAgICAgICAgdy5faXRlcmF0aW5nLmFkZChzZWxmKQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXhpdF9fKHNlbGYsIGUsIHQsIGIpOgogICAgICAgIHcgPSBzZWxmLndlYWtjb250YWluZXIoKQogICAgICAgIGlmIHcgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHMgPSB3Ll9pdGVyYXRpbmcKICAgICAgICAgICAgcy5yZW1vdmUoc2VsZikKICAgICAgICAgICAgaWYgbm90IHM6CiAgICAgICAgICAgICAgICB3Ll9jb21taXRfcmVtb3ZhbHMoKQoKCmNsYXNzIFdlYWtTZXQ6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGF0YT1Ob25lKToKICAgICAgICBzZWxmLmRhdGEgPSBzZXQoKQogICAgICAgIGRlZiBfcmVtb3ZlKGl0ZW0sIHNlbGZyZWY9cmVmKHNlbGYpKToKICAgICAgICAgICAgc2VsZiA9IHNlbGZyZWYoKQogICAgICAgICAgICBpZiBzZWxmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgc2VsZi5faXRlcmF0aW5nOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMuYXBwZW5kKGl0ZW0pCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YS5kaXNjYXJkKGl0ZW0pCiAgICAgICAgc2VsZi5fcmVtb3ZlID0gX3JlbW92ZQogICAgICAgICMgQSBsaXN0IG9mIGtleXMgdG8gYmUgcmVtb3ZlZAogICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMgPSBbXQogICAgICAgIHNlbGYuX2l0ZXJhdGluZyA9IHNldCgpCiAgICAgICAgaWYgZGF0YSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi51cGRhdGUoZGF0YSkKCiAgICBkZWYgX2NvbW1pdF9yZW1vdmFscyhzZWxmKToKICAgICAgICBsID0gc2VsZi5fcGVuZGluZ19yZW1vdmFscwogICAgICAgIGRpc2NhcmQgPSBzZWxmLmRhdGEuZGlzY2FyZAogICAgICAgIHdoaWxlIGw6CiAgICAgICAgICAgIGRpc2NhcmQobC5wb3AoKSkKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgd2l0aCBfSXRlcmF0aW9uR3VhcmQoc2VsZik6CiAgICAgICAgICAgIGZvciBpdGVtcmVmIGluIHNlbGYuZGF0YToKICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtcmVmKCkKICAgICAgICAgICAgICAgIGlmIGl0ZW0gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgeWllbGQgaXRlbQoKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiBsZW4oc2VsZi5kYXRhKSAtIGxlbihzZWxmLl9wZW5kaW5nX3JlbW92YWxzKQoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwgaXRlbSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3ciA9IHJlZihpdGVtKQogICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHJldHVybiB3ciBpbiBzZWxmLmRhdGEKCiAgICBkZWYgX19yZWR1Y2VfXyhzZWxmKToKICAgICAgICByZXR1cm4gKHNlbGYuX19jbGFzc19fLCAobGlzdChzZWxmKSwpLAogICAgICAgICAgICAgICAgZ2V0YXR0cihzZWxmLCAnX19kaWN0X18nLCBOb25lKSkKCiAgICBkZWYgYWRkKHNlbGYsIGl0ZW0pOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgc2VsZi5kYXRhLmFkZChyZWYoaXRlbSwgc2VsZi5fcmVtb3ZlKSkKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBzZWxmLmRhdGEuY2xlYXIoKQoKICAgIGRlZiBjb3B5KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmKQoKICAgIGRlZiBwb3Aoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpdGVtcmVmID0gc2VsZi5kYXRhLnBvcCgpCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHJhaXNlIEtleUVycm9yKCdwb3AgZnJvbSBlbXB0eSBXZWFrU2V0JykKICAgICAgICAgICAgaXRlbSA9IGl0ZW1yZWYoKQogICAgICAgICAgICBpZiBpdGVtIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0KCiAgICBkZWYgcmVtb3ZlKHNlbGYsIGl0ZW0pOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgc2VsZi5kYXRhLnJlbW92ZShyZWYoaXRlbSkpCgogICAgZGVmIGRpc2NhcmQoc2VsZiwgaXRlbSk6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBzZWxmLmRhdGEuZGlzY2FyZChyZWYoaXRlbSkpCgogICAgZGVmIHVwZGF0ZShzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBmb3IgZWxlbWVudCBpbiBvdGhlcjoKICAgICAgICAgICAgc2VsZi5hZGQoZWxlbWVudCkKCiAgICBkZWYgX19pb3JfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgc2VsZi51cGRhdGUob3RoZXIpCiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgZGlmZmVyZW5jZShzZWxmLCBvdGhlcik6CiAgICAgICAgbmV3c2V0ID0gc2VsZi5jb3B5KCkKICAgICAgICBuZXdzZXQuZGlmZmVyZW5jZV91cGRhdGUob3RoZXIpCiAgICAgICAgcmV0dXJuIG5ld3NldAogICAgX19zdWJfXyA9IGRpZmZlcmVuY2UKCiAgICBkZWYgZGlmZmVyZW5jZV91cGRhdGUoc2VsZiwgb3RoZXIpOgogICAgICAgIHNlbGYuX19pc3ViX18ob3RoZXIpCiAgICBkZWYgX19pc3ViX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgaWYgc2VsZiBpcyBvdGhlcjoKICAgICAgICAgICAgc2VsZi5kYXRhLmNsZWFyKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmRhdGEuZGlmZmVyZW5jZV91cGRhdGUocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIGludGVyc2VjdGlvbihzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKGl0ZW0gZm9yIGl0ZW0gaW4gb3RoZXIgaWYgaXRlbSBpbiBzZWxmKQogICAgX19hbmRfXyA9IGludGVyc2VjdGlvbgoKICAgIGRlZiBpbnRlcnNlY3Rpb25fdXBkYXRlKHNlbGYsIG90aGVyKToKICAgICAgICBzZWxmLl9faWFuZF9fKG90aGVyKQogICAgZGVmIF9faWFuZF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOgogICAgICAgICAgICBzZWxmLl9jb21taXRfcmVtb3ZhbHMoKQogICAgICAgIHNlbGYuZGF0YS5pbnRlcnNlY3Rpb25fdXBkYXRlKHJlZihpdGVtKSBmb3IgaXRlbSBpbiBvdGhlcikKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBpc3N1YnNldChzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5pc3N1YnNldChyZWYoaXRlbSkgZm9yIGl0ZW0gaW4gb3RoZXIpCiAgICBfX2xlX18gPSBpc3N1YnNldAoKICAgIGRlZiBfX2x0X18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPCBzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQoKICAgIGRlZiBpc3N1cGVyc2V0KHNlbGYsIG90aGVyKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhLmlzc3VwZXJzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQogICAgX19nZV9fID0gaXNzdXBlcnNldAoKICAgIGRlZiBfX2d0X18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPiBzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQoKICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCBzZWxmLl9fY2xhc3NfXyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPT0gc2V0KHJlZihpdGVtKSBmb3IgaXRlbSBpbiBvdGhlcikKCiAgICBkZWYgc3ltbWV0cmljX2RpZmZlcmVuY2Uoc2VsZiwgb3RoZXIpOgogICAgICAgIG5ld3NldCA9IHNlbGYuY29weSgpCiAgICAgICAgbmV3c2V0LnN5bW1ldHJpY19kaWZmZXJlbmNlX3VwZGF0ZShvdGhlcikKICAgICAgICByZXR1cm4gbmV3c2V0CiAgICBfX3hvcl9fID0gc3ltbWV0cmljX2RpZmZlcmVuY2UKCiAgICBkZWYgc3ltbWV0cmljX2RpZmZlcmVuY2VfdXBkYXRlKHNlbGYsIG90aGVyKToKICAgICAgICBzZWxmLl9faXhvcl9fKG90aGVyKQogICAgZGVmIF9faXhvcl9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOgogICAgICAgICAgICBzZWxmLl9jb21taXRfcmVtb3ZhbHMoKQogICAgICAgIGlmIHNlbGYgaXMgb3RoZXI6CiAgICAgICAgICAgIHNlbGYuZGF0YS5jbGVhcigpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5kYXRhLnN5bW1ldHJpY19kaWZmZXJlbmNlX3VwZGF0ZShyZWYoaXRlbSwgc2VsZi5fcmVtb3ZlKSBmb3IgaXRlbSBpbiBvdGhlcikKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiB1bmlvbihzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKGUgZm9yIHMgaW4gKHNlbGYsIG90aGVyKSBmb3IgZSBpbiBzKQogICAgX19vcl9fID0gdW5pb24KCiAgICBkZWYgaXNkaXNqb2ludChzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIGxlbihzZWxmLmludGVyc2VjdGlvbihvdGhlcikpID09IDAK',
'/Lib/browser/__init__.py':'ZnJvbSBfYnJvd3NlciBpbXBvcnQgKgppbXBvcnQgaHRtbAppbXBvcnQgYWpheAppbXBvcnQgd2Vic29ja2V0Cg==',
'/Lib/http/cookies.py':'',
'/Lib/http/__init__.py':'',
'/Lib/lib_migration/unittest/case.py':'',
'/Lib/lib_migration/unittest/loader.py':'',
'/Lib/lib_migration/unittest/main.py':'IiIiVW5pdHRlc3QgbWFpbiBwcm9ncmFtIiIiCgppbXBvcnQgc3lzCmltcG9ydCBvcwojaW1wb3J0IHR5cGVzICAgIDwtLSBpcyB0aGlzIG1vZHVsZSBuZWVkZWQgZm9yIHRoaXMgbW9kdWxlPwoKI2Zyb20gLiBpbXBvcnQgbG9hZGVyLCBydW5uZXIKZnJvbSAuc2lnbmFscyBpbXBvcnQgaW5zdGFsbEhhbmRsZXIKCl9fdW5pdHRlc3QgPSBUcnVlCgpGQUlMRkFTVCAgICAgPSAiICAtZiwgLS1mYWlsZmFzdCAgIFN0b3Agb24gZmlyc3QgZmFpbHVyZVxuIgpDQVRDSEJSRUFLICAgPSAiICAtYywgLS1jYXRjaCAgICAgIENhdGNoIGNvbnRyb2wtQyBhbmQgZGlzcGxheSByZXN1bHRzXG4iCkJVRkZFUk9VVFBVVCA9ICIgIC1iLCAtLWJ1ZmZlciAgICAgQnVmZmVyIHN0ZG91dCBhbmQgc3RkZXJyIGR1cmluZyB0ZXN0IHJ1bnNcbiIKClVTQUdFX0FTX01BSU4gPSAiIiJcClVzYWdlOiAlKHByb2dOYW1lKXMgW29wdGlvbnNdIFt0ZXN0c10KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICBTaG93IHRoaXMgbWVzc2FnZQogIC12LCAtLXZlcmJvc2UgICAgVmVyYm9zZSBvdXRwdXQKICAtcSwgLS1xdWlldCAgICAgIE1pbmltYWwgb3V0cHV0CiUoZmFpbGZhc3QpcyUoY2F0Y2hicmVhaylzJShidWZmZXIpcwpFeGFtcGxlczoKICAlKHByb2dOYW1lKXMgdGVzdF9tb2R1bGUgICAgICAgICAgICAgICAtIHJ1biB0ZXN0cyBmcm9tIHRlc3RfbW9kdWxlCiAgJShwcm9nTmFtZSlzIG1vZHVsZS5UZXN0Q2xhc3MgICAgICAgICAgLSBydW4gdGVzdHMgZnJvbSBtb2R1bGUuVGVzdENsYXNzCiAgJShwcm9nTmFtZSlzIG1vZHVsZS5DbGFzcy50ZXN0X21ldGhvZCAgLSBydW4gc3BlY2lmaWVkIHRlc3QgbWV0aG9kCgpbdGVzdHNdIGNhbiBiZSBhIGxpc3Qgb2YgYW55IG51bWJlciBvZiB0ZXN0IG1vZHVsZXMsIGNsYXNzZXMgYW5kIHRlc3QKbWV0aG9kcy4KCkFsdGVybmF0aXZlIFVzYWdlOiAlKHByb2dOYW1lKXMgZGlzY292ZXIgW29wdGlvbnNdCgpPcHRpb25zOgogIC12LCAtLXZlcmJvc2UgICAgVmVyYm9zZSBvdXRwdXQKJShmYWlsZmFzdClzJShjYXRjaGJyZWFrKXMlKGJ1ZmZlcilzICAtcyBkaXJlY3RvcnkgICAgIERpcmVjdG9yeSB0byBzdGFydCBkaXNjb3ZlcnkgKCcuJyBkZWZhdWx0KQogIC1wIHBhdHRlcm4gICAgICAgUGF0dGVybiB0byBtYXRjaCB0ZXN0IGZpbGVzICgndGVzdCoucHknIGRlZmF1bHQpCiAgLXQgZGlyZWN0b3J5ICAgICBUb3AgbGV2ZWwgZGlyZWN0b3J5IG9mIHByb2plY3QgKGRlZmF1bHQgdG8KICAgICAgICAgICAgICAgICAgIHN0YXJ0IGRpcmVjdG9yeSkKCkZvciB0ZXN0IGRpc2NvdmVyeSBhbGwgdGVzdCBtb2R1bGVzIG11c3QgYmUgaW1wb3J0YWJsZSBmcm9tIHRoZSB0b3AKbGV2ZWwgZGlyZWN0b3J5IG9mIHRoZSBwcm9qZWN0LgoiIiIKClVTQUdFX0ZST01fTU9EVUxFID0gIiIiXApVc2FnZTogJShwcm9nTmFtZSlzIFtvcHRpb25zXSBbdGVzdF0gWy4uLl0KCk9wdGlvbnM6CiAgLWgsIC0taGVscCAgICAgICBTaG93IHRoaXMgbWVzc2FnZQogIC12LCAtLXZlcmJvc2UgICAgVmVyYm9zZSBvdXRwdXQKICAtcSwgLS1xdWlldCAgICAgIE1pbmltYWwgb3V0cHV0CiUoZmFpbGZhc3QpcyUoY2F0Y2hicmVhaylzJShidWZmZXIpcwpFeGFtcGxlczoKICAlKHByb2dOYW1lKXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBydW4gZGVmYXVsdCBzZXQgb2YgdGVzdHMKICAlKHByb2dOYW1lKXMgTXlUZXN0U3VpdGUgICAgICAgICAgICAgICAgICAgLSBydW4gc3VpdGUgJ015VGVzdFN1aXRlJwogICUocHJvZ05hbWUpcyBNeVRlc3RDYXNlLnRlc3RTb21ldGhpbmcgICAgICAtIHJ1biBNeVRlc3RDYXNlLnRlc3RTb21ldGhpbmcKICAlKHByb2dOYW1lKXMgTXlUZXN0Q2FzZSAgICAgICAgICAgICAgICAgICAgLSBydW4gYWxsICd0ZXN0KicgdGVzdCBtZXRob2RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gTXlUZXN0Q2FzZQoiIiIKCmRlZiBfY29udmVydF9uYW1lKG5hbWUpOgogICAgIyBvbiBMaW51eCAvIE1hYyBPUyBYICdmb28uUFknIGlzIG5vdCBpbXBvcnRhYmxlLCBidXQgb24KICAgICMgV2luZG93cyBpdCBpcy4gU2ltcGxlciB0byBkbyBhIGNhc2UgaW5zZW5zaXRpdmUgbWF0Y2gKICAgICMgYSBiZXR0ZXIgY2hlY2sgd291bGQgYmUgdG8gY2hlY2sgdGhhdCB0aGUgbmFtZSBpcyBhCiAgICAjIHZhbGlkIFB5dGhvbiBtb2R1bGUgbmFtZS4KICAgIGlmIG9zLnBhdGguaXNmaWxlKG5hbWUpIGFuZCBuYW1lLmxvd2VyKCkuZW5kc3dpdGgoJy5weScpOgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMobmFtZSk6CiAgICAgICAgICAgIHJlbF9wYXRoID0gb3MucGF0aC5yZWxwYXRoKG5hbWUsIG9zLmdldGN3ZCgpKQogICAgICAgICAgICBpZiBvcy5wYXRoLmlzYWJzKHJlbF9wYXRoKSBvciByZWxfcGF0aC5zdGFydHN3aXRoKG9zLnBhcmRpcik6CiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZQogICAgICAgICAgICBuYW1lID0gcmVsX3BhdGgKICAgICAgICAjIG9uIFdpbmRvd3MgYm90aCAnXCcgYW5kICcvJyBhcmUgdXNlZCBhcyBwYXRoCiAgICAgICAgIyBzZXBhcmF0b3JzLiBCZXR0ZXIgdG8gcmVwbGFjZSBib3RoIHRoYW4gcmVseSBvbiBvcy5wYXRoLnNlcAogICAgICAgIHJldHVybiBuYW1lWzotM10ucmVwbGFjZSgnXFwnLCAnLicpLnJlcGxhY2UoJy8nLCAnLicpCiAgICByZXR1cm4gbmFtZQoKZGVmIF9jb252ZXJ0X25hbWVzKG5hbWVzKToKICAgIHJldHVybiBbX2NvbnZlcnRfbmFtZShuYW1lKSBmb3IgbmFtZSBpbiBuYW1lc10KCmNsYXNzIFRlc3RQcm9ncmFtKG9iamVjdCk6CiAgICAiIiJBIGNvbW1hbmQtbGluZSBwcm9ncmFtIHRoYXQgcnVucyBhIHNldCBvZiB0ZXN0czsgdGhpcyBpcyBwcmltYXJpbHkKICAgICAgIGZvciBtYWtpbmcgdGVzdCBtb2R1bGVzIGNvbnZlbmllbnRseSBleGVjdXRhYmxlLgogICAgIiIiCiAgICBVU0FHRSA9IFVTQUdFX0ZST01fTU9EVUxFCgogICAgIyBkZWZhdWx0cyBmb3IgdGVzdGluZwogICAgZmFpbGZhc3QgPSBjYXRjaGJyZWFrID0gYnVmZmVyID0gcHJvZ05hbWUgPSB3YXJuaW5ncyA9IE5vbmUKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbW9kdWxlPSdfX21haW5fXycsIGRlZmF1bHRUZXN0PU5vbmUsIGFyZ3Y9Tm9uZSwKICAgICAgICAgICAgICAgICAgICB0ZXN0UnVubmVyPU5vbmUsIHRlc3RMb2FkZXI9bG9hZGVyLmRlZmF1bHRUZXN0TG9hZGVyLAogICAgICAgICAgICAgICAgICAgIGV4aXQ9VHJ1ZSwgdmVyYm9zaXR5PTEsIGZhaWxmYXN0PU5vbmUsIGNhdGNoYnJlYWs9Tm9uZSwKICAgICAgICAgICAgICAgICAgICBidWZmZXI9Tm9uZSwgd2FybmluZ3M9Tm9uZSk6CiAgICAgICAgaWYgaXNpbnN0YW5jZShtb2R1bGUsIHN0cik6CiAgICAgICAgICAgIHNlbGYubW9kdWxlID0gX19pbXBvcnRfXyhtb2R1bGUpCiAgICAgICAgICAgIGZvciBwYXJ0IGluIG1vZHVsZS5zcGxpdCgnLicpWzE6XToKICAgICAgICAgICAgICAgIHNlbGYubW9kdWxlID0gZ2V0YXR0cihzZWxmLm1vZHVsZSwgcGFydCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLm1vZHVsZSA9IG1vZHVsZQogICAgICAgIGlmIGFyZ3YgaXMgTm9uZToKICAgICAgICAgICAgYXJndiA9IHN5cy5hcmd2CgogICAgICAgIHNlbGYuZXhpdCA9IGV4aXQKICAgICAgICBzZWxmLmZhaWxmYXN0ID0gZmFpbGZhc3QKICAgICAgICBzZWxmLmNhdGNoYnJlYWsgPSBjYXRjaGJyZWFrCiAgICAgICAgc2VsZi52ZXJib3NpdHkgPSB2ZXJib3NpdHkKICAgICAgICBzZWxmLmJ1ZmZlciA9IGJ1ZmZlcgogICAgICAgIGlmIHdhcm5pbmdzIGlzIE5vbmUgYW5kIG5vdCBzeXMud2Fybm9wdGlvbnM6CiAgICAgICAgICAgICMgZXZlbiBpZiBEcmVwcmVjYXRpb25XYXJuaW5ncyBhcmUgaWdub3JlZCBieSBkZWZhdWx0CiAgICAgICAgICAgICMgcHJpbnQgdGhlbSBhbnl3YXkgdW5sZXNzIG90aGVyIHdhcm5pbmdzIHNldHRpbmdzIGFyZQogICAgICAgICAgICAjIHNwZWNpZmllZCBieSB0aGUgd2FybmluZ3MgYXJnIG9yIHRoZSAtVyBweXRob24gZmxhZwogICAgICAgICAgICBzZWxmLndhcm5pbmdzID0gJ2RlZmF1bHQnCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBoZXJlIHNlbGYud2FybmluZ3MgaXMgc2V0IGVpdGhlciB0byB0aGUgdmFsdWUgcGFzc2VkCiAgICAgICAgICAgICMgdG8gdGhlIHdhcm5pbmdzIGFyZ3Mgb3IgdG8gTm9uZS4KICAgICAgICAgICAgIyBJZiB0aGUgdXNlciBkaWRuJ3QgcGFzcyBhIHZhbHVlIHNlbGYud2FybmluZ3Mgd2lsbAogICAgICAgICAgICAjIGJlIE5vbmUuIFRoaXMgbWVhbnMgdGhhdCB0aGUgYmVoYXZpb3IgaXMgdW5jaGFuZ2VkCiAgICAgICAgICAgICMgYW5kIGRlcGVuZHMgb24gdGhlIHZhbHVlcyBwYXNzZWQgdG8gLVcuCiAgICAgICAgICAgIHNlbGYud2FybmluZ3MgPSB3YXJuaW5ncwogICAgICAgIHNlbGYuZGVmYXVsdFRlc3QgPSBkZWZhdWx0VGVzdAogICAgICAgIHNlbGYudGVzdFJ1bm5lciA9IHRlc3RSdW5uZXIKICAgICAgICBzZWxmLnRlc3RMb2FkZXIgPSB0ZXN0TG9hZGVyCiAgICAgICAgc2VsZi5wcm9nTmFtZSA9IG9zLnBhdGguYmFzZW5hbWUoYXJndlswXSkKICAgICAgICBzZWxmLnBhcnNlQXJncyhhcmd2KQogICAgICAgIHNlbGYucnVuVGVzdHMoKQoKICAgIGRlZiB1c2FnZUV4aXQoc2VsZiwgbXNnPU5vbmUpOgogICAgICAgIGlmIG1zZzoKICAgICAgICAgICAgcHJpbnQobXNnKQogICAgICAgIHVzYWdlID0geydwcm9nTmFtZSc6IHNlbGYucHJvZ05hbWUsICdjYXRjaGJyZWFrJzogJycsICdmYWlsZmFzdCc6ICcnLAogICAgICAgICAgICAgICAgICdidWZmZXInOiAnJ30KICAgICAgICBpZiBzZWxmLmZhaWxmYXN0ICE9IEZhbHNlOgogICAgICAgICAgICB1c2FnZVsnZmFpbGZhc3QnXSA9IEZBSUxGQVNUCiAgICAgICAgaWYgc2VsZi5jYXRjaGJyZWFrICE9IEZhbHNlOgogICAgICAgICAgICB1c2FnZVsnY2F0Y2hicmVhayddID0gQ0FUQ0hCUkVBSwogICAgICAgIGlmIHNlbGYuYnVmZmVyICE9IEZhbHNlOgogICAgICAgICAgICB1c2FnZVsnYnVmZmVyJ10gPSBCVUZGRVJPVVRQVVQKICAgICAgICBwcmludChzZWxmLlVTQUdFICUgdXNhZ2UpCiAgICAgICAgc3lzLmV4aXQoMikKCiAgICBkZWYgcGFyc2VBcmdzKHNlbGYsIGFyZ3YpOgogICAgICAgIGlmICgobGVuKGFyZ3YpID4gMSBhbmQgYXJndlsxXS5sb3dlcigpID09ICdkaXNjb3ZlcicpIG9yCiAgICAgICAgICAgIChsZW4oYXJndikgPT0gMSBhbmQgc2VsZi5tb2R1bGUgaXMgTm9uZSkpOgogICAgICAgICAgICBzZWxmLl9kb19kaXNjb3ZlcnkoYXJndlsyOl0pCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBpbXBvcnQgZ2V0b3B0CiAgICAgICAgI2ZpeG1lIGJyeXRob24sIGV4Y2VwdCBzdGF0ZW1lbnQgYmVsb3cgZG9uJ3QgbGlrZSBnZXRvcHQuCiAgICAgICAgZ2V0b3B0X2Vycm9yPWdldG9wdC5lcnJvcgogICAgICAgIGxvbmdfb3B0cyA9IFsnaGVscCcsICd2ZXJib3NlJywgJ3F1aWV0JywgJ2ZhaWxmYXN0JywgJ2NhdGNoJywgJ2J1ZmZlciddCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcHRpb25zLCBhcmdzID0gZ2V0b3B0LmdldG9wdChhcmd2WzE6XSwgJ2hIdnFmY2InLCBsb25nX29wdHMpCiAgICAgICAgI2ZpeG1lIGJyeXRob24gaW52YWxpZCBzeW50YXgKICAgICAgICAjZXhjZXB0IGdldG9wdC5lcnJvciBhcyBtc2c6CiAgICAgICAgZXhjZXB0IGdldG9wdF9lcnJvciBhcyBtc2c6CiAgICAgICAgICAgIHNlbGYudXNhZ2VFeGl0KG1zZykKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIGZvciBvcHQsIHZhbHVlIGluIG9wdGlvbnM6CiAgICAgICAgICAgIGlmIG9wdCBpbiAoJy1oJywnLUgnLCctLWhlbHAnKToKICAgICAgICAgICAgICAgIHNlbGYudXNhZ2VFeGl0KCkKICAgICAgICAgICAgaWYgb3B0IGluICgnLXEnLCctLXF1aWV0Jyk6CiAgICAgICAgICAgICAgICBzZWxmLnZlcmJvc2l0eSA9IDAKICAgICAgICAgICAgaWYgb3B0IGluICgnLXYnLCctLXZlcmJvc2UnKToKICAgICAgICAgICAgICAgIHNlbGYudmVyYm9zaXR5ID0gMgogICAgICAgICAgICBpZiBvcHQgaW4gKCctZicsJy0tZmFpbGZhc3QnKToKICAgICAgICAgICAgICAgIGlmIHNlbGYuZmFpbGZhc3QgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWxmYXN0ID0gVHJ1ZQogICAgICAgICAgICAgICAgIyBTaG91bGQgdGhpcyByYWlzZSBhbiBleGNlcHRpb24gaWYgLWYgaXMgbm90IHZhbGlkPwogICAgICAgICAgICBpZiBvcHQgaW4gKCctYycsJy0tY2F0Y2gnKToKICAgICAgICAgICAgICAgIGlmIHNlbGYuY2F0Y2hicmVhayBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIHNlbGYuY2F0Y2hicmVhayA9IFRydWUKICAgICAgICAgICAgICAgICMgU2hvdWxkIHRoaXMgcmFpc2UgYW4gZXhjZXB0aW9uIGlmIC1jIGlzIG5vdCB2YWxpZD8KICAgICAgICAgICAgaWYgb3B0IGluICgnLWInLCctLWJ1ZmZlcicpOgogICAgICAgICAgICAgICAgaWYgc2VsZi5idWZmZXIgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmJ1ZmZlciA9IFRydWUKICAgICAgICAgICAgICAgICMgU2hvdWxkIHRoaXMgcmFpc2UgYW4gZXhjZXB0aW9uIGlmIC1iIGlzIG5vdCB2YWxpZD8KCiAgICAgICAgaWYgbGVuKGFyZ3MpID09IDAgYW5kIHNlbGYubW9kdWxlIGlzIE5vbmU6CiAgICAgICAgICAgICMgdGhpcyBhbGxvd3MgInB5dGhvbiAtbSB1bml0dGVzdCAtdiIgdG8gc3RpbGwgd29yayBmb3IKICAgICAgICAgICAgIyB0ZXN0IGRpc2NvdmVyeS4gVGhpcyBtZWFucyAtYyAvIC1iIC8gLXYgLyAtZiBvcHRpb25zIHdpbGwKICAgICAgICAgICAgIyBiZSBoYW5kbGVkIHR3aWNlLCB3aGljaCBpcyBoYXJtbGVzcyBidXQgbm90IGlkZWFsLgogICAgICAgICAgICBzZWxmLl9kb19kaXNjb3ZlcnkoYXJndlsxOl0pCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBpZiBsZW4oYXJncykgPT0gMCBhbmQgc2VsZi5kZWZhdWx0VGVzdCBpcyBOb25lOgogICAgICAgICAgICAjIGNyZWF0ZVRlc3RzIHdpbGwgbG9hZCB0ZXN0cyBmcm9tIHNlbGYubW9kdWxlCiAgICAgICAgICAgIHNlbGYudGVzdE5hbWVzID0gTm9uZQogICAgICAgIGVsaWYgbGVuKGFyZ3MpID4gMDoKICAgICAgICAgICAgc2VsZi50ZXN0TmFtZXMgPSBfY29udmVydF9uYW1lcyhhcmdzKQogICAgICAgICAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgICAgICAgICAgICAgIyB0byBzdXBwb3J0IHB5dGhvbiAtbSB1bml0dGVzdCAuLi4KICAgICAgICAgICAgICAgIHNlbGYubW9kdWxlID0gTm9uZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYudGVzdE5hbWVzID0gKHNlbGYuZGVmYXVsdFRlc3QsKQogICAgICAgIHNlbGYuY3JlYXRlVGVzdHMoKQoKICAgIGRlZiBjcmVhdGVUZXN0cyhzZWxmKToKICAgICAgICBpZiBzZWxmLnRlc3ROYW1lcyBpcyBOb25lOgogICAgICAgICAgICBzZWxmLnRlc3QgPSBzZWxmLnRlc3RMb2FkZXIubG9hZFRlc3RzRnJvbU1vZHVsZShzZWxmLm1vZHVsZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnRlc3QgPSBzZWxmLnRlc3RMb2FkZXIubG9hZFRlc3RzRnJvbU5hbWVzKHNlbGYudGVzdE5hbWVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubW9kdWxlKQoKICAgIGRlZiBfZG9fZGlzY292ZXJ5KHNlbGYsIGFyZ3YsIExvYWRlcj1sb2FkZXIuVGVzdExvYWRlcik6CiAgICAgICAgIyBoYW5kbGUgY29tbWFuZCBsaW5lIGFyZ3MgZm9yIHRlc3QgZGlzY292ZXJ5CiAgICAgICAgc2VsZi5wcm9nTmFtZSA9ICclcyBkaXNjb3ZlcicgJSBzZWxmLnByb2dOYW1lCiAgICAgICAgaW1wb3J0IG9wdHBhcnNlCiAgICAgICAgcGFyc2VyID0gb3B0cGFyc2UuT3B0aW9uUGFyc2VyKCkKICAgICAgICBwYXJzZXIucHJvZyA9IHNlbGYucHJvZ05hbWUKICAgICAgICBwYXJzZXIuYWRkX29wdGlvbignLXYnLCAnLS12ZXJib3NlJywgZGVzdD0ndmVyYm9zZScsIGRlZmF1bHQ9RmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0nVmVyYm9zZSBvdXRwdXQnLCBhY3Rpb249J3N0b3JlX3RydWUnKQogICAgICAgIGlmIHNlbGYuZmFpbGZhc3QgIT0gRmFsc2U6CiAgICAgICAgICAgIHBhcnNlci5hZGRfb3B0aW9uKCctZicsICctLWZhaWxmYXN0JywgZGVzdD0nZmFpbGZhc3QnLCBkZWZhdWx0PUZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSdTdG9wIG9uIGZpcnN0IGZhaWwgb3IgZXJyb3InLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb249J3N0b3JlX3RydWUnKQogICAgICAgIGlmIHNlbGYuY2F0Y2hicmVhayAhPSBGYWxzZToKICAgICAgICAgICAgcGFyc2VyLmFkZF9vcHRpb24oJy1jJywgJy0tY2F0Y2gnLCBkZXN0PSdjYXRjaGJyZWFrJywgZGVmYXVsdD1GYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0nQ2F0Y2ggY3RybC1DIGFuZCBkaXNwbGF5IHJlc3VsdHMgc28gZmFyJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uPSdzdG9yZV90cnVlJykKICAgICAgICBpZiBzZWxmLmJ1ZmZlciAhPSBGYWxzZToKICAgICAgICAgICAgcGFyc2VyLmFkZF9vcHRpb24oJy1iJywgJy0tYnVmZmVyJywgZGVzdD0nYnVmZmVyJywgZGVmYXVsdD1GYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0nQnVmZmVyIHN0ZG91dCBhbmQgc3RkZXJyIGR1cmluZyB0ZXN0cycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbj0nc3RvcmVfdHJ1ZScpCiAgICAgICAgcGFyc2VyLmFkZF9vcHRpb24oJy1zJywgJy0tc3RhcnQtZGlyZWN0b3J5JywgZGVzdD0nc3RhcnQnLCBkZWZhdWx0PScuJywKICAgICAgICAgICAgICAgICAgICAgICAgICBoZWxwPSJEaXJlY3RvcnkgdG8gc3RhcnQgZGlzY292ZXJ5ICgnLicgZGVmYXVsdCkiKQogICAgICAgIHBhcnNlci5hZGRfb3B0aW9uKCctcCcsICctLXBhdHRlcm4nLCBkZXN0PSdwYXR0ZXJuJywgZGVmYXVsdD0ndGVzdCoucHknLAogICAgICAgICAgICAgICAgICAgICAgICAgIGhlbHA9IlBhdHRlcm4gdG8gbWF0Y2ggdGVzdHMgKCd0ZXN0Ki5weScgZGVmYXVsdCkiKQogICAgICAgIHBhcnNlci5hZGRfb3B0aW9uKCctdCcsICctLXRvcC1sZXZlbC1kaXJlY3RvcnknLCBkZXN0PSd0b3AnLCBkZWZhdWx0PU5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVscD0nVG9wIGxldmVsIGRpcmVjdG9yeSBvZiBwcm9qZWN0IChkZWZhdWx0cyB0byBzdGFydCBkaXJlY3RvcnkpJykKCiAgICAgICAgb3B0aW9ucywgYXJncyA9IHBhcnNlci5wYXJzZV9hcmdzKGFyZ3YpCiAgICAgICAgaWYgbGVuKGFyZ3MpID4gMzoKICAgICAgICAgICAgc2VsZi51c2FnZUV4aXQoKQoKICAgICAgICBmb3IgbmFtZSwgdmFsdWUgaW4gemlwKCgnc3RhcnQnLCAncGF0dGVybicsICd0b3AnKSwgYXJncyk6CiAgICAgICAgICAgIHNldGF0dHIob3B0aW9ucywgbmFtZSwgdmFsdWUpCgogICAgICAgICMgb25seSBzZXQgb3B0aW9ucyBmcm9tIHRoZSBwYXJzaW5nIGhlcmUKICAgICAgICAjIGlmIHRoZXkgd2VyZW4ndCBzZXQgZXhwbGljaXRseSBpbiB0aGUgY29uc3RydWN0b3IKICAgICAgICBpZiBzZWxmLmZhaWxmYXN0IGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuZmFpbGZhc3QgPSBvcHRpb25zLmZhaWxmYXN0CiAgICAgICAgaWYgc2VsZi5jYXRjaGJyZWFrIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuY2F0Y2hicmVhayA9IG9wdGlvbnMuY2F0Y2hicmVhawogICAgICAgIGlmIHNlbGYuYnVmZmVyIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuYnVmZmVyID0gb3B0aW9ucy5idWZmZXIKCiAgICAgICAgaWYgb3B0aW9ucy52ZXJib3NlOgogICAgICAgICAgICBzZWxmLnZlcmJvc2l0eSA9IDIKCiAgICAgICAgc3RhcnRfZGlyID0gb3B0aW9ucy5zdGFydAogICAgICAgIHBhdHRlcm4gPSBvcHRpb25zLnBhdHRlcm4KICAgICAgICB0b3BfbGV2ZWxfZGlyID0gb3B0aW9ucy50b3AKCiAgICAgICAgbG9hZGVyID0gTG9hZGVyKCkKICAgICAgICBzZWxmLnRlc3QgPSBsb2FkZXIuZGlzY292ZXIoc3RhcnRfZGlyLCBwYXR0ZXJuLCB0b3BfbGV2ZWxfZGlyKQoKICAgIGRlZiBydW5UZXN0cyhzZWxmKToKICAgICAgICBpZiBzZWxmLmNhdGNoYnJlYWs6CiAgICAgICAgICAgIGluc3RhbGxIYW5kbGVyKCkKICAgICAgICBpZiBzZWxmLnRlc3RSdW5uZXIgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi50ZXN0UnVubmVyID0gcnVubmVyLlRleHRUZXN0UnVubmVyCiAgICAgICAgaWYgaXNpbnN0YW5jZShzZWxmLnRlc3RSdW5uZXIsIHR5cGUpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB0ZXN0UnVubmVyID0gc2VsZi50ZXN0UnVubmVyKHZlcmJvc2l0eT1zZWxmLnZlcmJvc2l0eSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbGZhc3Q9c2VsZi5mYWlsZmFzdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyPXNlbGYuYnVmZmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncz1zZWxmLndhcm5pbmdzKQogICAgICAgICAgICBleGNlcHQgVHlwZUVycm9yOgogICAgICAgICAgICAgICAgIyBkaWRuJ3QgYWNjZXB0IHRoZSB2ZXJib3NpdHksIGJ1ZmZlciBvciBmYWlsZmFzdCBhcmd1bWVudHMKICAgICAgICAgICAgICAgIHRlc3RSdW5uZXIgPSBzZWxmLnRlc3RSdW5uZXIoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgaXQgaXMgYXNzdW1lZCB0byBiZSBhIFRlc3RSdW5uZXIgaW5zdGFuY2UKICAgICAgICAgICAgdGVzdFJ1bm5lciA9IHNlbGYudGVzdFJ1bm5lcgogICAgICAgIHNlbGYucmVzdWx0ID0gdGVzdFJ1bm5lci5ydW4oc2VsZi50ZXN0KQogICAgICAgIGlmIHNlbGYuZXhpdDoKICAgICAgICAgICAgc3lzLmV4aXQobm90IHNlbGYucmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkKCm1haW4gPSBUZXN0UHJvZ3JhbQo=',
'/Lib/lib_migration/unittest/result.py':'',
'/Lib/lib_migration/unittest/runner.py':'',
'/Lib/lib_migration/unittest/signals.py':'aW1wb3J0IHNpZ25hbAppbXBvcnQgd2Vha3JlZgoKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCmNsYXNzIF9JbnRlcnJ1cHRIYW5kbGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVmYXVsdF9oYW5kbGVyKToKICAgICAgICBzZWxmLmNhbGxlZCA9IEZhbHNlCiAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIgPSBkZWZhdWx0X2hhbmRsZXIKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgc2lnbnVtLCBmcmFtZSk6CiAgICAgICAgaW5zdGFsbGVkX2hhbmRsZXIgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgaWYgaW5zdGFsbGVkX2hhbmRsZXIgaXMgbm90IHNlbGY6CiAgICAgICAgICAgICMgaWYgd2UgYXJlbid0IHRoZSBpbnN0YWxsZWQgaGFuZGxlciwgdGhlbiBkZWxlZ2F0ZSBpbW1lZGlhdGVseQogICAgICAgICAgICAjIHRvIHRoZSBkZWZhdWx0IGhhbmRsZXIKICAgICAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIoc2lnbnVtLCBmcmFtZSkKCiAgICAgICAgaWYgc2VsZi5jYWxsZWQ6CiAgICAgICAgICAgIHNlbGYuZGVmYXVsdF9oYW5kbGVyKHNpZ251bSwgZnJhbWUpCiAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlCiAgICAgICAgZm9yIHJlc3VsdCBpbiBfcmVzdWx0cy5rZXlzKCk6CiAgICAgICAgICAgIHJlc3VsdC5zdG9wKCkKCl9yZXN1bHRzID0gd2Vha3JlZi5XZWFrS2V5RGljdGlvbmFyeSgpCmRlZiByZWdpc3RlclJlc3VsdChyZXN1bHQpOgogICAgX3Jlc3VsdHNbcmVzdWx0XSA9IDEKCmRlZiByZW1vdmVSZXN1bHQocmVzdWx0KToKICAgIHJldHVybiBib29sKF9yZXN1bHRzLnBvcChyZXN1bHQsIE5vbmUpKQoKX2ludGVycnVwdF9oYW5kbGVyID0gTm9uZQpkZWYgaW5zdGFsbEhhbmRsZXIoKToKICAgIGdsb2JhbCBfaW50ZXJydXB0X2hhbmRsZXIKICAgIGlmIF9pbnRlcnJ1cHRfaGFuZGxlciBpcyBOb25lOgogICAgICAgIGRlZmF1bHRfaGFuZGxlciA9IHNpZ25hbC5nZXRzaWduYWwoc2lnbmFsLlNJR0lOVCkKICAgICAgICBfaW50ZXJydXB0X2hhbmRsZXIgPSBfSW50ZXJydXB0SGFuZGxlcihkZWZhdWx0X2hhbmRsZXIpCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIpCgoKZGVmIHJlbW92ZUhhbmRsZXIobWV0aG9kPU5vbmUpOgogICAgaWYgbWV0aG9kIGlzIG5vdCBOb25lOgogICAgICAgIEB3cmFwcyhtZXRob2QpCiAgICAgICAgZGVmIGlubmVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIGluaXRpYWwgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgICAgIHJlbW92ZUhhbmRsZXIoKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kKCphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW5pdGlhbCkKICAgICAgICByZXR1cm4gaW5uZXIKCiAgICBnbG9iYWwgX2ludGVycnVwdF9oYW5kbGVyCiAgICBpZiBfaW50ZXJydXB0X2hhbmRsZXIgaXMgbm90IE5vbmU6CiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIuZGVmYXVsdF9oYW5kbGVyKQo=',
'/Lib/lib_migration/unittest/suite.py':'',
'/Lib/lib_migration/unittest/util.py':'IyAiVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy4iCgojZml4bWUsIGJyeXRob24sIG5lZWQgdG8gZml4IG5hbWVkdHVwbGUKI2Zyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUsIE9yZGVyZWREaWN0CmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IE9yZGVyZWREaWN0CgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKX01BWF9MRU5HVEggPSA4MApkZWYgc2FmZV9yZXByKG9iaiwgc2hvcnQ9RmFsc2UpOgogICAgdHJ5OgogICAgICAgIHJlc3VsdCA9IHJlcHIob2JqKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXN1bHQgPSBvYmplY3QuX19yZXByX18ob2JqKQogICAgaWYgbm90IHNob3J0IG9yIGxlbihyZXN1bHQpIDwgX01BWF9MRU5HVEg6CiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgcmV0dXJuIHJlc3VsdFs6X01BWF9MRU5HVEhdICsgJyBbdHJ1bmNhdGVkXS4uLicKCmRlZiBzdHJjbGFzcyhjbHMpOgogICAgcmV0dXJuICIlcy4lcyIgJSAoY2xzLl9fbW9kdWxlX18sIGNscy5fX25hbWVfXykKCmRlZiBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiRmluZHMgZWxlbWVudHMgaW4gb25seSBvbmUgb3IgdGhlIG90aGVyIG9mIHR3bywgc29ydGVkIGlucHV0IGxpc3RzLgoKICAgIFJldHVybnMgYSB0d28tZWxlbWVudCB0dXBsZSBvZiBsaXN0cy4gICAgVGhlIGZpcnN0IGxpc3QgY29udGFpbnMgdGhvc2UKICAgIGVsZW1lbnRzIGluIHRoZSAiZXhwZWN0ZWQiIGxpc3QgYnV0IG5vdCBpbiB0aGUgImFjdHVhbCIgbGlzdCwgYW5kIHRoZQogICAgc2Vjb25kIGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIGluIHRoZSAiYWN0dWFsIiBsaXN0IGJ1dCBub3QgaW4gdGhlCiAgICAiZXhwZWN0ZWQiIGxpc3QuICAgIER1cGxpY2F0ZSBlbGVtZW50cyBpbiBlaXRoZXIgaW5wdXQgbGlzdCBhcmUgaWdub3JlZC4KICAgICIiIgogICAgaSA9IGogPSAwCiAgICBtaXNzaW5nID0gW10KICAgIHVuZXhwZWN0ZWQgPSBbXQogICAgd2hpbGUgVHJ1ZToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGUgPSBleHBlY3RlZFtpXQogICAgICAgICAgICBhID0gYWN0dWFsW2pdCiAgICAgICAgICAgIGlmIGUgPCBhOgogICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoZSkKICAgICAgICAgICAgICAgIGkgKz0gMQogICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICBpICs9IDEKICAgICAgICAgICAgZWxpZiBlID4gYToKICAgICAgICAgICAgICAgIHVuZXhwZWN0ZWQuYXBwZW5kKGEpCiAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgbWlzc2luZy5leHRlbmQoZXhwZWN0ZWRbaTpdKQogICAgICAgICAgICB1bmV4cGVjdGVkLmV4dGVuZChhY3R1YWxbajpdKQogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIG1pc3NpbmcsIHVuZXhwZWN0ZWQKCgpkZWYgdW5vcmRlcmFibGVfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiU2FtZSBiZWhhdmlvciBhcyBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlIGJ1dAogICAgZm9yIGxpc3RzIG9mIHVub3JkZXJhYmxlIGl0ZW1zIChsaWtlIGRpY3RzKS4KCiAgICBBcyBpdCBkb2VzIGEgbGluZWFyIHNlYXJjaCBwZXIgaXRlbSAocmVtb3ZlKSBpdAogICAgaGFzIE8obipuKSBwZXJmb3JtYW5jZS4iIiIKICAgIG1pc3NpbmcgPSBbXQogICAgd2hpbGUgZXhwZWN0ZWQ6CiAgICAgICAgaXRlbSA9IGV4cGVjdGVkLnBvcCgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhY3R1YWwucmVtb3ZlKGl0ZW0pCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIG1pc3NpbmcuYXBwZW5kKGl0ZW0pCgogICAgIyBhbnl0aGluZyBsZWZ0IGluIGFjdHVhbCBpcyB1bmV4cGVjdGVkCiAgICByZXR1cm4gbWlzc2luZywgYWN0dWFsCgojZGVmIHRocmVlX3dheV9jbXAoeCwgeSk6CiMgICAgIiIiUmV0dXJuIC0xIGlmIHggPCB5LCAwIGlmIHggPT0geSBhbmQgMSBpZiB4ID4geSIiIgojICAgIHJldHVybiAoeCA+IHkpIC0gKHggPCB5KQoKIyBmaXhtZSwgYnJ5dGhvbgojbmFtZWR0dXBsZSBpc3N1ZXMgaW4gY29sbGVjdGlvbnMucHkKI19NaXNtYXRjaCA9IG5hbWVkdHVwbGUoJ01pc21hdGNoJywgJ2FjdHVhbCBleHBlY3RlZCB2YWx1ZScpCgpkZWYgX2NvdW50X2RpZmZfYWxsX3B1cnBvc2UoYWN0dWFsLCBleHBlY3RlZCk6CiAgICAnUmV0dXJucyBsaXN0IG9mIChjbnRfYWN0LCBjbnRfZXhwLCBlbGVtKSB0cmlwbGVzIHdoZXJlIHRoZSBjb3VudHMgZGlmZmVyJwogICAgIyBlbGVtZW50cyBuZWVkIG5vdCBiZSBoYXNoYWJsZQogICAgcywgdCA9IGxpc3QoYWN0dWFsKSwgbGlzdChleHBlY3RlZCkKICAgIG0sIG4gPSBsZW4ocyksIGxlbih0KQogICAgTlVMTCA9IG9iamVjdCgpCiAgICByZXN1bHQgPSBbXQogICAgZm9yIGksIGVsZW0gaW4gZW51bWVyYXRlKHMpOgogICAgICAgIGlmIGVsZW0gaXMgTlVMTDoKICAgICAgICAgICAgY29udGludWUKICAgICAgICBjbnRfcyA9IGNudF90ID0gMAogICAgICAgIGZvciBqIGluIHJhbmdlKGksIG0pOgogICAgICAgICAgICBpZiBzW2pdID09IGVsZW06CiAgICAgICAgICAgICAgICBjbnRfcyArPSAxCiAgICAgICAgICAgICAgICBzW2pdID0gTlVMTAogICAgICAgIGZvciBqLCBvdGhlcl9lbGVtIGluIGVudW1lcmF0ZSh0KToKICAgICAgICAgICAgaWYgb3RoZXJfZWxlbSA9PSBlbGVtOgogICAgICAgICAgICAgICAgY250X3QgKz0gMQogICAgICAgICAgICAgICAgdFtqXSA9IE5VTEwKICAgICAgICBpZiBjbnRfcyAhPSBjbnRfdDoKICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaChjbnRfcywgY250X3QsIGVsZW0pCiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZGlmZikKCiAgICBmb3IgaSwgZWxlbSBpbiBlbnVtZXJhdGUodCk6CiAgICAgICAgaWYgZWxlbSBpcyBOVUxMOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGNudF90ID0gMAogICAgICAgIGZvciBqIGluIHJhbmdlKGksIG4pOgogICAgICAgICAgICBpZiB0W2pdID09IGVsZW06CiAgICAgICAgICAgICAgICBjbnRfdCArPSAxCiAgICAgICAgICAgICAgICB0W2pdID0gTlVMTAogICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goMCwgY250X3QsIGVsZW0pCiAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQogICAgcmV0dXJuIHJlc3VsdAoKZGVmIF9vcmRlcmVkX2NvdW50KGl0ZXJhYmxlKToKICAgICdSZXR1cm4gZGljdCBvZiBlbGVtZW50IGNvdW50cywgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBmaXJzdCBzZWVuJwogICAgYyA9IE9yZGVyZWREaWN0KCkKICAgIGZvciBlbGVtIGluIGl0ZXJhYmxlOgogICAgICAgIGNbZWxlbV0gPSBjLmdldChlbGVtLCAwKSArIDEKICAgIHJldHVybiBjCgpkZWYgX2NvdW50X2RpZmZfaGFzaGFibGUoYWN0dWFsLCBleHBlY3RlZCk6CiAgICAnUmV0dXJucyBsaXN0IG9mIChjbnRfYWN0LCBjbnRfZXhwLCBlbGVtKSB0cmlwbGVzIHdoZXJlIHRoZSBjb3VudHMgZGlmZmVyJwogICAgIyBlbGVtZW50cyBtdXN0IGJlIGhhc2hhYmxlCiAgICBzLCB0ID0gX29yZGVyZWRfY291bnQoYWN0dWFsKSwgX29yZGVyZWRfY291bnQoZXhwZWN0ZWQpCiAgICByZXN1bHQgPSBbXQogICAgZm9yIGVsZW0sIGNudF9zIGluIHMuaXRlbXMoKToKICAgICAgICBjbnRfdCA9IHQuZ2V0KGVsZW0sIDApCiAgICAgICAgaWYgY250X3MgIT0gY250X3Q6CiAgICAgICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goY250X3MsIGNudF90LCBlbGVtKQogICAgICAgICAgICByZXN1bHQuYXBwZW5kKGRpZmYpCiAgICBmb3IgZWxlbSwgY250X3QgaW4gdC5pdGVtcygpOgogICAgICAgIGlmIGVsZW0gbm90IGluIHM6CiAgICAgICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goMCwgY250X3QsIGVsZW0pCiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZGlmZikKICAgIHJldHVybiByZXN1bHQK',
'/Lib/lib_migration/unittest/__init__.py':'IiIiClB5dGhvbiB1bml0IHRlc3RpbmcgZnJhbWV3b3JrLCBiYXNlZCBvbiBFcmljaCBHYW1tYSdzIEpVbml0IGFuZCBLZW50IEJlY2sncwpTbWFsbHRhbGsgdGVzdGluZyBmcmFtZXdvcmsuCgpUaGlzIG1vZHVsZSBjb250YWlucyB0aGUgY29yZSBmcmFtZXdvcmsgY2xhc3NlcyB0aGF0IGZvcm0gdGhlIGJhc2lzIG9mCnNwZWNpZmljIHRlc3QgY2FzZXMgYW5kIHN1aXRlcyAoVGVzdENhc2UsIFRlc3RTdWl0ZSBldGMuKSwgYW5kIGFsc28gYQp0ZXh0LWJhc2VkIHV0aWxpdHkgY2xhc3MgZm9yIHJ1bm5pbmcgdGhlIHRlc3RzIGFuZCByZXBvcnRpbmcgdGhlIHJlc3VsdHMKIChUZXh0VGVzdFJ1bm5lcikuCgpTaW1wbGUgdXNhZ2U6CgogICAgaW1wb3J0IHVuaXR0ZXN0CgogICAgY2xhc3MgSW50ZWdlckFyaXRobWVudGljVGVzdENhc2UodW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgIGRlZiB0ZXN0QWRkKHNlbGYpOiAgIyMgdGVzdCBtZXRob2QgbmFtZXMgYmVnaW4gJ3Rlc3QqJwogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCgxICsgMiksIDMpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoMCArIDEsIDEpCiAgICAgICAgZGVmIHRlc3RNdWx0aXBseShzZWxmKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoMCAqIDEwKSwgMCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoNSAqIDgpLCA0MCkKCiAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgICAgIHVuaXR0ZXN0Lm1haW4oKQoKRnVydGhlciBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGJ1bmRsZWQgZG9jdW1lbnRhdGlvbiwgYW5kIGZyb20KCiAgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3VuaXR0ZXN0Lmh0bWwKCkNvcHlyaWdodCAoYykgMTk5OS0yMDAzIFN0ZXZlIFB1cmNlbGwKQ29weXJpZ2h0IChjKSAyMDAzLTIwMTAgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24KVGhpcyBtb2R1bGUgaXMgZnJlZSBzb2Z0d2FyZSwgYW5kIHlvdSBtYXkgcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUHl0aG9uIGl0c2VsZiwgc28gbG9uZyBhcyB0aGlzIGNvcHlyaWdodCBtZXNzYWdlCmFuZCBkaXNjbGFpbWVyIGFyZSByZXRhaW5lZCBpbiB0aGVpciBvcmlnaW5hbCBmb3JtLgoKSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgVE8gQU5ZIFBBUlRZIEZPUiBESVJFQ1QsIElORElSRUNULApTUEVDSUFMLCBJTkNJREVOVEFMLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhFIFVTRSBPRgpUSElTIENPREUsIEVWRU4gSUYgVEhFIEFVVEhPUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNICkRBTUFHRS4KClRIRSBBVVRIT1IgU1BFQ0lGSUNBTExZIERJU0NMQUlNUyBBTlkgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UCkxJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBClBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRIRSBDT0RFIFBST1ZJREVEIEhFUkVVTkRFUiBJUyBPTiBBTiAiQVMgSVMiIEJBU0lTLApBTkQgVEhFUkUgSVMgTk8gT0JMSUdBVElPTiBXSEFUU09FVkVSIFRPIFBST1ZJREUgTUFJTlRFTkFOQ0UsClNVUFBPUlQsIFVQREFURVMsIEVOSEFOQ0VNRU5UUywgT1IgTU9ESUZJQ0FUSU9OUy4KIiIiCgojX19hbGxfXyA9IFsnVGVzdFJlc3VsdCcsICdUZXN0Q2FzZScsICdUZXN0U3VpdGUnLAojICAgICAgICAgICAnVGV4dFRlc3RSdW5uZXInLCAnVGVzdExvYWRlcicsICdGdW5jdGlvblRlc3RDYXNlJywgJ21haW4nLAojICAgICAgICAgICAnZGVmYXVsdFRlc3RMb2FkZXInLCAnU2tpcFRlc3QnLCAnc2tpcCcsICdza2lwSWYnLCAnc2tpcFVubGVzcycsCiMgICAgICAgICAgICdleHBlY3RlZEZhaWx1cmUnLCAnVGV4dFRlc3RSZXN1bHQnLCAnaW5zdGFsbEhhbmRsZXInLAojICAgICAgICAgICAncmVnaXN0ZXJSZXN1bHQnLCAncmVtb3ZlUmVzdWx0JywgJ3JlbW92ZUhhbmRsZXInXQoKIyBFeHBvc2Ugb2Jzb2xldGUgZnVuY3Rpb25zIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQojX19hbGxfXy5leHRlbmQoWydnZXRUZXN0Q2FzZU5hbWVzJywgJ21ha2VTdWl0ZScsICdmaW5kVGVzdENhc2VzJ10pCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKI2Zyb20gLnJlc3VsdCBpbXBvcnQgVGVzdFJlc3VsdAojZml4bWUgYnJ5dGhvbiBzeW50YXggZXJyb3IKZnJvbSAuY2FzZSBpbXBvcnQgVGVzdENhc2UKZnJvbSAubWFpbiBpbXBvcnQgVGVzdFByb2dyYW0sIG1haW4KI2Zyb20gLmNhc2UgaW1wb3J0IChUZXN0Q2FzZSwgRnVuY3Rpb25UZXN0Q2FzZSwgU2tpcFRlc3QsIHNraXAsIHNraXBJZiwKIyAgICAgICAgICAgICAgICAgICBza2lwVW5sZXNzLCBleHBlY3RlZEZhaWx1cmUpCiNmcm9tIC5zdWl0ZSBpbXBvcnQgQmFzZVRlc3RTdWl0ZSwgVGVzdFN1aXRlCiNmcm9tIC5sb2FkZXIgaW1wb3J0IChUZXN0TG9hZGVyLCBkZWZhdWx0VGVzdExvYWRlciwgbWFrZVN1aXRlLCBnZXRUZXN0Q2FzZU5hbWVzLAojICAgICAgICAgICAgICAgICAgICAgZmluZFRlc3RDYXNlcykKI2Zyb20gLm1haW4gaW1wb3J0IFRlc3RQcm9ncmFtLCBtYWluCiNmcm9tIC5ydW5uZXIgaW1wb3J0IFRleHRUZXN0UnVubmVyLCBUZXh0VGVzdFJlc3VsdAojZnJvbSAuc2lnbmFscyBpbXBvcnQgaW5zdGFsbEhhbmRsZXIsIHJlZ2lzdGVyUmVzdWx0LCByZW1vdmVSZXN1bHQsIHJlbW92ZUhhbmRsZXIKCiMgZGVwcmVjYXRlZAojX1RleHRUZXN0UmVzdWx0ID0gVGV4dFRlc3RSZXN1bHQK',
'/Lib/lib_migration/unittest/__main__.py':'IiIiTWFpbiBlbnRyeSBwb2ludCIiIgoKaW1wb3J0IHN5cwppZiBzeXMuYXJndlswXS5lbmRzd2l0aCgiX19tYWluX18ucHkiKToKICAgIHN5cy5hcmd2WzBdID0gInB5dGhvbiAtbSB1bml0dGVzdCIKCl9fdW5pdHRlc3QgPSBUcnVlCgpmcm9tIC5tYWluIGltcG9ydCBtYWluLCBUZXN0UHJvZ3JhbSwgVVNBR0VfQVNfTUFJTgpUZXN0UHJvZ3JhbS5VU0FHRSA9IFVTQUdFX0FTX01BSU4KCm1haW4obW9kdWxlPU5vbmUpCg==',
'/Lib/ui/BaseUI.py':'aW1wb3J0IHJhbmRvbQoKY2xhc3MgQmFzZVVJOgogIGRlZiBfX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZD1Ob25lLCBkcmFnZ2FibGU9RmFsc2UpOgogICAgICBzZWxmLl9lbGVtZW50PWVsZW1lbnQKCiAgICAgIGlmIGlkIGlzIE5vbmU6CiAgICAgICAgIHNlbGYuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsJyVzXyVzJyAlICh0eXBlLCBpbnQoMTAwMDAwKnJhbmRvbS5yYW5kb20oKSkpKQogICAgICBlbHNlOgogICAgICAgICBzZWxmLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLGlkKQoKICAgICAgaWYgZHJhZ2dhYmxlOgogICAgICAgICBzZWxmLmRyYWdnYWJsZSgpCgogICAgICBzZWxmLmF0dGFjaD1zZWxmLmFwcGVuZAoKICBkZWYgZ2V0X2lkKHNlbGYpOgogICAgICByZXR1cm4gc2VsZi5fZWxlbWVudC5pZAoKICBkZWYgYXBwZW5kKHNlbGYsIGVsZW1lbnRfaWQpOgogICAgICAiIiIgYXBwZW5kIHRoaXMgRE9NIGNvbXBvbmVudCB0byBET00gZWxlbWVudCBlbGVtZW50X2lkIiIiCiAgICAgIGRvYy5nZXQoaWQ9ZWxlbWVudF9pZClbMF0uYXBwZW5kQ2hpbGQoc2VsZi5fZWxlbWVudCkKCiAgZGVmIGRyYWdnYWJsZShzZWxmKToKICAgICAgZGVmIGRyYWcoZSk6CiAgICAgICAgICBzZWxmLl9lbGVtZW50LnN0eWxlLnRvcD0nJXNweCcgJSAoZS5jbGllbnRZIC0gc2VsZi5fZGVsdGFZKQogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS5sZWZ0PSclc3B4JyAlIChlLmNsaWVudFggLSBzZWxmLl9kZWx0YVgpCgogICAgICBkZWYgbW91c2VEb3duKGUpOgogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS5wb3NpdGlvbj0nYWJzb2x1dGUnCiAgICAgICAgICBzZWxmLl9kZWx0YVg9ZS5jbGllbnRYIC0gc2VsZi5fZWxlbWVudC5vZmZzZXRMZWZ0CiAgICAgICAgICBzZWxmLl9kZWx0YVk9ZS5jbGllbnRZIC0gc2VsZi5fZWxlbWVudC5vZmZzZXRUb3AKICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkcmFnLCB0cnVlKQoKICAgICAgZGVmIG1vdXNlVXAoZSk6CiAgICAgICAgICB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZHJhZywgdHJ1ZSkKCiAgICAgIHNlbGYuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbW91c2VEb3duLCBGYWxzZSkKICAgICAgc2VsZi5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcCwgRmFsc2UpCgogIGRlZiBzaG93KHNlbGYpOgogICAgICBzZWxmLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGlzcGxheScsICdibG9jaycpCgogIGRlZiBoaWRlKHNlbGYpOgogICAgICBzZWxmLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGlzcGxheScsICdub25lJykK',
'/Lib/ui/dialog.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwsIGRvYyBhcyBkb2N1bWVudAoKY2xhc3MgRGlhbG9nKFdpZGdldC5EcmFnZ2FibGVXaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lKToKICAgICAgc2VsZi5fZGl2X3NoZWxsPWh0bWwuRElWKAogICAgICAgICBDbGFzcz0idWktZGlhbG9nIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIHVpLWZyb250IHVpLWRyYWdnYWJsZSB1aS1yZXNpemFibGUiLAogICAgICAgICBzdHlsZT17J3Bvc2l0aW9uJzogJ2Fic29sdXRlJywgJ2hlaWdodCc6ICdhdXRvJywgJ3dpZHRoJzogJzMwMHB4JywKICAgICAgICAgICAgICAgICd0b3AnOiAnOThweCcsICdsZWZ0JzogJzE0MHB4JywgJ2Rpc3BsYXknOiAnYmxvY2snfSkKCiAgICAgIFdpZGdldC5EcmFnZ2FibGVXaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnZGlhbG9nJywgaWQpCgogICAgICBfZGl2X3RpdGxlYmFyPWh0bWwuRElWKElkPSJ0aXRsZWJhciIsCiAgICAgICAgICAgQ2xhc3M9InVpLWRpYWxvZy10aXRsZWJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwgdWktaGVscGVyLWNsZWFyZml4IikKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IF9kaXZfdGl0bGViYXIKCiAgICAgIHNlbGYuX2Rpdl90aXRsZT1odG1sLlNQQU4oSWQ9InRpdGxlIiwgQ2xhc3M9InVpLWRpYWxvZy10aXRsZSIpCiAgICAgICAgCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fZGl2X3RpdGxlCgogICAgICBzZWxmLl90aXRsZV9idXR0b249aHRtbC5CVVRUT04oVGl0bGU9ImNsb3NlIiwKICAgICAgICAgICAgQ2xhc3M9InVpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIHVpLWJ1dHRvbi1pY29uLW9ubHkgdWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlIikKCiAgICAgIGRlZiBkaWFsb2dfY2xvc2UoZSk6CiAgICAgICAgICAjZGVsIGRvY3VtZW50W3NlbGYuX2Rpdl9zaGVsbC5pZF0KICAgICAgICAgIGRlbCBkb2Nbc2VsZi5fZGl2X3NoZWxsLmlkXQoKICAgICAgc2VsZi5fdGl0bGVfYnV0dG9uLmJpbmQoJ2NsaWNrJywgZGlhbG9nX2Nsb3NlKQogICAgICBfc3Bhbj1odG1sLlNQQU4oQ2xhc3M9InVpLWJ1dHRvbi1pY29uLXByaW1hcnkgdWktaWNvbiB1aS1pY29uLWNsb3NldGhpY2siKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9zcGFuPWh0bWwuU1BBTignY2xvc2UnLCBDbGFzcz0idWktYnV0dG9uLXRleHQiKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fdGl0bGVfYnV0dG9uCgogICAgICBzZWxmLl9kaXZfZGlhbG9nPWh0bWwuRElWKENsYXNzPSJ1aS1kaWFsb2ctY29udGVudCB1aS13aWRnZXQtY29udGVudCIsCiAgICAgICAgICAgc3R5bGU9eyd3aWR0aCc6ICdhdXRvJywgJ21pbi1oZWlnaHQnOiAnMTA1cHgnLCAKICAgICAgICAgICAgICAgICAgJ21heC1oZWlnaHQnOiAnbm9uZScsICdoZWlnaHQnOiAnYXV0byd9KQoKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IHNlbGYuX2Rpdl9kaWFsb2cKCiAgICAgIGZvciBfaSBpbiBbJ24nLCAnZScsICdzJywgJ3cnLCAnc2UnLCAnc3cnLCAnbmUnLCAnbncnXToKICAgICAgICAgIGlmIF9pID09ICdzZSc6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIHVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtJXMiICUgKF9pLCBfaSkKICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIiAlIF9pCgogICAgICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IGh0bWwuRElWKENsYXNzPV9jbGFzcywgc3R5bGU9eyd6LWluZGV4JzogJzkwJ30pCgogICAgICBkb2MgPD0gc2VsZi5fZGl2X3NoZWxsCgogIGRlZiBzZXRfdGl0bGUoc2VsZiwgdGl0bGUpOgogICAgICBzZWxmLl9kaXZfdGl0bGUuc2V0X3RleHQodGl0bGUpCgogIGRlZiBzZXRfYm9keShzZWxmLCBib2R5KToKICAgICAgc2VsZi5fZGl2X2RpYWxvZy5zZXRfaHRtbChib2R5KQo=',
'/Lib/ui/progressbar.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFByb2dyZXNzQmFyKFdpZGdldC5XaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiKQogICAgICBXaWRnZXQuV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIHNlbGYuX2Rpdl9zaGVsbCwgJ3Byb2dyZXNzYmFyJywgaWQpCgogICAgICBzZWxmLl9zaG93X2xhYmVsPWxhYmVsCiAgICAgIGlmIGxhYmVsOgogICAgICAgICBzZWxmLl9sYWJlbD1odG1sLkRJVihDbGFzcz0ncHJvZ3Jlc3MtbGFiZWwnKQogICAgICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fbGFiZWwKCiAgICAgIHNlbGYuX2Jhcj1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXItdmFsdWUgdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItbGVmdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17J3dpZHRoJzogJzBweCd9KQogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fYmFyCgogIGRlZiBzZXRfcHJvZ3Jlc3Moc2VsZiwgcGVyY2VudCk6CiAgICAgIHNlbGYuX2Jhci5zdHlsZS53aWR0aD0nJXMlJScgJSBwZXJjZW50CiAgICAgIGlmIHNlbGYuX3Nob3dfbGFiZWw6CiAgICAgICAgIHNlbGYuX2xhYmVsLnRleHQ9JyVzJSUnICUgcGVyY2VudAo=',
'/Lib/ui/slider.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFNsaWRlcihXaWRnZXQuV2lkZ2V0KToKICBkZWYgX19pbml0X18oc2VsZiwgaWQ9Tm9uZSwgZG9jdW1lbnQ9ZG9jLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktc2xpZGVyIHVpLXNsaWRlci1ob3Jpem9udGFsIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIikKCiAgICAgIFdpZGdldC5XaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnc2xpZGVyJywgaWQpCgogICAgICBzZWxmLl9oYW5kbGU9aHRtbC5BKENsYXNzPSJ1aS1zbGlkZXItaGFuZGxlIHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWFsbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgSHJlZj0nIycsIHN0eWxlPXsnbGVmdCc6ICcwcHgnfSkKICAgICAgc2VsZi5fdmFsdWU9MAogICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQoKICAgICAgZGVmIHN0YXJ0U2xpZGUoZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1UcnVlCiAgICAgICAgICBzZWxmLl91cHBlckJvdW5kID0gc2VsZi5fZGl2X3NoZWxsLm9mZnNldFdpZHRoIC0gc2VsZi5faGFuZGxlLm9mZnNldFdpZHRoCgogICAgICAgICAgcG9zID0gV2lkZ2V0LmdldE1vdXNlUG9zaXRpb24oZSkKICAgICAgICAgIHNlbGYuX3N0YXJ0TW91c2VYPXBvc1sneCddCgogICAgICAgICAgc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ID0gcGFyc2VJbnQoc2VsZi5faGFuZGxlLmVsdC5zdHlsZS5sZWZ0KSAjLSBwYXJzZUludChzZWxmLl9kaXZfc2hlbGwuZWx0LnN0eWxlLmxlZnQpCiAgICAgICAgICAjcHJpbnQoc2VsZi5fdXBwZXJCb3VuZCkKICAgICAgICAgIHVwZGF0ZVBvc2l0aW9uKGUpCgogICAgICBkZWYgdXBkYXRlUG9zaXRpb24oZSk6CiAgICAgICAgICBwb3MgPSBXaWRnZXQuZ2V0TW91c2VQb3NpdGlvbihlKQogICAgICAgICAgX25ld1BvcyA9IHNlbGYuX2xhc3RFbGVtZW50TGVmdCArIHBvc1sneCddIC0gc2VsZi5fc3RhcnRNb3VzZVgKICAgICAgICAgIAogICAgICAgICAgX25ld1BvcyA9IG1heCgwLCBfbmV3UG9zKQogICAgICAgICAgX25ld1BvcyA9IG1pbihfbmV3UG9zLCBzZWxmLl91cHBlckJvdW5kKQoKICAgICAgICAgICNwcmludChfbmV3UG9zKQogICAgICAgICAgc2VsZi5faGFuZGxlLmVsdC5zdHlsZS5sZWZ0ID0gJyVzcHgnICUgX25ld1BvcwogICAgICAgICAgc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ID0gX25ld1BvcwoKICAgICAgZGVmIG1vdmluZyhlKToKICAgICAgICAgIGlmIHNlbGYuX2lzTW91c2VEb3duOgogICAgICAgICAgICAgdXBkYXRlUG9zaXRpb24oZSkKCiAgICAgIGRlZiBkcm9wQ2FsbGJhY2soZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQogICAgICAgICAgc2VsZi5faGFuZGxlLnVuYmluZCgnbW91c2Vtb3ZlJywgbW92aW5nKQoKCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZW1vdmUnLCBtb3ZpbmcpCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZXVwJywgZHJvcENhbGxiYWNrKQogICAgICAjc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3V0JywgZHJvcENhbGxiYWNrKQogICAgICBzZWxmLl9oYW5kbGUuYmluZCgnbW91c2Vkb3duJywgc3RhcnRTbGlkZSkKCiAgICAgIGRlZiBtb3VzZW92ZXIoZSk6CiAgICAgICAgICBfY2xhc3M9c2VsZi5faGFuZGxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKQogICAgICAgICAgc2VsZi5faGFuZGxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnJXMgJXMnICUgKF9jbGFzcywgJ3VpLXN0YXRlLWhvdmVyJykpCgogICAgICBkZWYgbW91c2VvdXQoZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQogICAgICAgICAgX2NsYXNzPXNlbGYuX2hhbmRsZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykKICAgICAgICAgIHNlbGYuX2hhbmRsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgX2NsYXNzLnJlcGxhY2UoJ3VpLXN0YXRlLWhvdmVyJywgJycpKQoKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3ZlcicsIG1vdXNlb3ZlcikKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3V0JywgbW91c2VvdXQpCgogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5faGFuZGxlCgogIGRlZiBnZXRfdmFsdWUoc2VsZik6CiAgICAgIHJldHVybiBzZWxmLl92YWx1ZQoKICAjZGVmIHNldF92YWx1ZShzZWxmLCB2YWx1ZSk6CiAgIyAgICBzZWxmLl92YWx1ZT12YWx1ZQogICMgICBzZWxmLl9oYW5kbGUuc3R5bGUubGVmdD0nJXNweCcgJSB2YWx1ZQo=',
'/Lib/ui/Widget.py':'aW1wb3J0IHJhbmRvbQpmcm9tIGJyb3dzZXIgaW1wb3J0IGRvYyBhcyBkb2N1bWVudCAgIyA6KCBkb2N1bWVudCBkb2Vzbid0IHdvcmsKCmRlZiBnZXRNb3VzZVBvc2l0aW9uKGUpOgogICAgaWYgZSBpcyBOb25lOgogICAgICAgZT13aW4uZXZlbnQKCiAgICBpZiBlLnBhZ2VYIG9yIGUucGFnZVk6CiAgICAgICByZXR1cm4geyd4JzogZS5wYWdlWCwgJ3knOiBlLnBhZ2VZfQoKICAgIGlmIGUuY2xpZW50WCBvciBlLmNsaWVudFk6CiAgICAgICBfcG9zeD1lLmNsaWVudFggKyBkb2MuYm9keS5zY3JvbGxMZWZ0ICsgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0OwogICAgICAgX3Bvc3k9ZS5jbGllbnRZICsgZG9jLmJvZHkuc2Nyb2xsVG9wICsgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7CiAgICAgICByZXR1cm4geyd4JzogX3Bvc3gsICd5JzogX3Bvc3l9CiAgICAgIAogICAgcmV0dXJuIHsneCc6IDAsICd5JzogMH0KCmNsYXNzIFdpZGdldDoKICBkZWYgX19pbml0X18oc2VsZiwgZWxlbWVudCwgdHlwZSwgaWQ9Tm9uZSk6CiAgICAgIHNlbGYuX2VsZW1lbnQ9ZWxlbWVudAoKICAgICAgaWYgaWQgaXMgTm9uZToKICAgICAgICAgc2VsZi5fZWxlbWVudC5pZD0nJXNfJXMnICUgKHR5cGUsIGludCgxMDAwMDAqcmFuZG9tLnJhbmRvbSgpKSkKICAgICAgZWxzZToKICAgICAgICAgc2VsZi5fZWxlbWVudC5pZD1pZAoKICBkZWYgZ2V0X2lkKHNlbGYpOgogICAgICByZXR1cm4gc2VsZi5fZWxlbWVudC5pZAoKICBkZWYgYXR0YWNoKHNlbGYsIGVsZW1lbnRfaWQpOgogICAgICAiIiIgYXBwZW5kIHRoaXMgRE9NIGNvbXBvbmVudCB0byBET00gZWxlbWVudCBlbGVtZW50X2lkIiIiCiAgICAgICNkb2N1bWVudFtlbGVtZW50X2lkXSA8PSBzZWxmLl9lbGVtZW50ICAgI3RoaXMgZG9lc24ndCB3b3JrIDooCiAgICAgICNkb2MgaXMgYWN0dWFsbHkgdGhlIGdsb2JhbCAnZG9jJyBub3QgdGhlIG9uZSB3ZSBpbXBvcnRlZCBmcm9tIGJyb3dzZXIgOigKICAgICAgZG9jW2VsZW1lbnRfaWRdIDw9IHNlbGYuX2VsZW1lbnQKCiAgZGVmIHNob3coc2VsZik6CiAgICAgIHNlbGYuX2VsZW1lbnQuZGlzcGxheT0nYmxvY2snCgogIGRlZiBoaWRlKHNlbGYpOgogICAgICBzZWxmLl9lbGVtZW50LmRpc3BsYXk9J25vbmUnCgpjbGFzcyBEcmFnZ2FibGVXaWRnZXQoV2lkZ2V0KToKICBkZWYgX19pbml0X18oc2VsZiwgZWxlbWVudCwgdHlwZSwgaWQ9Tm9uZSk6CiAgICAgIFdpZGdldC5fX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZCkKCiAgICAgIGRlZiBkcmFnKGUpOgogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS50b3A9JyVzcHgnICUgKGUuY2xpZW50WSAtIHNlbGYuX2RlbHRhWSkKICAgICAgICAgIHNlbGYuX2VsZW1lbnQuc3R5bGUubGVmdD0nJXNweCcgJSAoZS5jbGllbnRYIC0gc2VsZi5fZGVsdGFYKQoKICAgICAgZGVmIG1vdXNlRG93bihlKToKICAgICAgICAgIHNlbGYuX2VsZW1lbnQuc3R5bGUucG9zaXRpb249J2Fic29sdXRlJwogICAgICAgICAgc2VsZi5fZGVsdGFYPWUuY2xpZW50WCAtIHNlbGYuX2VsZW1lbnQub2Zmc2V0TGVmdAogICAgICAgICAgc2VsZi5fZGVsdGFZPWUuY2xpZW50WSAtIHNlbGYuX2VsZW1lbnQub2Zmc2V0VG9wCiAgICAgICAgICBkb2MuYmluZCgnbW91c2Vtb3ZlJywgZHJhZykKCiAgICAgIGRlZiBtb3VzZVVwKGUpOgogICAgICAgICAgZG9jLnVuYmluZCgnbW91c2Vtb3ZlJykKCiAgICAgIHNlbGYuX2VsZW1lbnQuYmluZCgnbW91c2Vkb3duJywgbW91c2VEb3duKQogICAgICBzZWxmLl9lbGVtZW50LmJpbmQoJ21vdXNldXAnLCBtb3VzZVVwKQo=',
'/Lib/ui/__init__.py':'ZnJvbSBicm93c2VyIGltcG9ydCBodG1sLCBkb2MgYXMgZG9jdW1lbnQKZnJvbSBEaWFsb2cgaW1wb3J0ICoKZnJvbSBQcm9ncmVzc0JhciBpbXBvcnQgKgpmcm9tIFNsaWRlciBpbXBvcnQgKgoKZGVmIGFkZF9zdHlsZXNoZWV0KCk6CiAgICBfbGluaz1odG1sLkxJTksoSHJlZj0nL3NyYy9MaWIvdWkvY3NzL3Ntb290aG5lc3MvanF1ZXJ5LXVpLTEuMTAuMy5jdXN0b20ubWluLmNzcycpCiAgICBfbGluay5yZWw9J3N0eWxlc2hlZXQnCgogICAgZG9jIDw9IF9saW5rICAgICAjIGRvY3VtZW50IGRvZXNuJ3Qgd29yayBoZXJlLi4gOiggbXVzdCB1c2UgZG9jIAo=',
'/Lib/unittest/case.py':'',
'/Lib/unittest/loader.py':'',
'/Lib/unittest/main.py':'',
'/Lib/unittest/mock.py':'IyBtb2NrLnB5CiMgVGVzdCB0b29scyBmb3IgbW9ja2luZyBhbmQgcGF0Y2hpbmcuCiMgTWFpbnRhaW5lZCBieSBNaWNoYWVsIEZvb3JkCiMgQmFja3BvcnQgZm9yIG90aGVyIHZlcnNpb25zIG9mIFB5dGhvbiBhdmFpbGFibGUgZnJvbQojIGh0dHA6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS9tb2NrCgpfX2FsbF9fID0gKAogICAgJ01vY2snLAogICAgJ01hZ2ljTW9jaycsCiAgICAncGF0Y2gnLAogICAgJ3NlbnRpbmVsJywKICAgICdERUZBVUxUJywKICAgICdBTlknLAogICAgJ2NhbGwnLAogICAgJ2NyZWF0ZV9hdXRvc3BlYycsCiAgICAnRklMVEVSX0RJUicsCiAgICAnTm9uQ2FsbGFibGVNb2NrJywKICAgICdOb25DYWxsYWJsZU1hZ2ljTW9jaycsCiAgICAnbW9ja19vcGVuJywKICAgICdQcm9wZXJ0eU1vY2snLAopCgoKX192ZXJzaW9uX18gPSAnMS4wJwoKCmltcG9ydCBpbnNwZWN0CmltcG9ydCBwcHJpbnQKaW1wb3J0IHN5cwpmcm9tIGZ1bmN0b29scyBpbXBvcnQgd3JhcHMKCgpCYXNlRXhjZXB0aW9ucyA9IChCYXNlRXhjZXB0aW9uLCkKaWYgJ2phdmEnIGluIHN5cy5wbGF0Zm9ybToKICAgICMganl0aG9uCiAgICBpbXBvcnQgamF2YQogICAgQmFzZUV4Y2VwdGlvbnMgPSAoQmFzZUV4Y2VwdGlvbiwgamF2YS5sYW5nLlRocm93YWJsZSkKCgpGSUxURVJfRElSID0gVHJ1ZQoKIyBXb3JrYXJvdW5kIGZvciBpc3N1ZSAjMTIzNzAKIyBXaXRob3V0IHRoaXMsIHRoZSBfX2NsYXNzX18gcHJvcGVydGllcyB3b3VsZG4ndCBiZSBzZXQgY29ycmVjdGx5Cl9zYWZlX3N1cGVyID0gc3VwZXIKCmRlZiBfaXNfaW5zdGFuY2VfbW9jayhvYmopOgogICAgIyBjYW4ndCB1c2UgaXNpbnN0YW5jZSBvbiBNb2NrIG9iamVjdHMgYmVjYXVzZSB0aGV5IG92ZXJyaWRlIF9fY2xhc3NfXwogICAgIyBUaGUgYmFzZSBjbGFzcyBmb3IgYWxsIG1vY2tzIGlzIE5vbkNhbGxhYmxlTW9jawogICAgcmV0dXJuIGlzc3ViY2xhc3ModHlwZShvYmopLCBOb25DYWxsYWJsZU1vY2spCgoKZGVmIF9pc19leGNlcHRpb24ob2JqKToKICAgIHJldHVybiAoCiAgICAgICAgaXNpbnN0YW5jZShvYmosIEJhc2VFeGNlcHRpb25zKSBvcgogICAgICAgIGlzaW5zdGFuY2Uob2JqLCB0eXBlKSBhbmQgaXNzdWJjbGFzcyhvYmosIEJhc2VFeGNlcHRpb25zKQogICAgKQoKCmNsYXNzIF9zbG90dGVkKG9iamVjdCk6CiAgICBfX3Nsb3RzX18gPSBbJ2EnXQoKCkRlc2NyaXB0b3JUeXBlcyA9ICgKICAgIHR5cGUoX3Nsb3R0ZWQuYSksCiAgICBwcm9wZXJ0eSwKKQoKCmRlZiBfZ2V0c2lnbmF0dXJlKGZ1bmMsIHNraXBmaXJzdCwgaW5zdGFuY2U9RmFsc2UpOgogICAgaWYgaXNpbnN0YW5jZShmdW5jLCB0eXBlKSBhbmQgbm90IGluc3RhbmNlOgogICAgICAgIHRyeToKICAgICAgICAgICAgZnVuYyA9IGZ1bmMuX19pbml0X18KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIHNraXBmaXJzdCA9IFRydWUKICAgIGVsaWYgbm90IGlzaW5zdGFuY2UoZnVuYywgRnVuY3Rpb25UeXBlcyk6CiAgICAgICAgIyBmb3IgY2xhc3NlcyB3aGVyZSBpbnN0YW5jZSBpcyBUcnVlIHdlIGVuZCB1cCBoZXJlIHRvbwogICAgICAgIHRyeToKICAgICAgICAgICAgZnVuYyA9IGZ1bmMuX19jYWxsX18KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHJldHVybgoKICAgIHRyeToKICAgICAgICBhcmdzcGVjID0gaW5zcGVjdC5nZXRmdWxsYXJnc3BlYyhmdW5jKQogICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAjIEMgZnVuY3Rpb24gLyBtZXRob2QsIHBvc3NpYmx5IGluaGVyaXRlZCBvYmplY3QoKS5fX2luaXRfXwogICAgICAgIHJldHVybgoKICAgIHJlZ2FyZ3MsIHZhcmFyZ3MsIHZhcmt3LCBkZWZhdWx0cywga3dvbmx5LCBrd29ubHlkZWYsIGFubiA9IGFyZ3NwZWMKCgogICAgIyBpbnN0YW5jZSBtZXRob2RzIGFuZCBjbGFzc21ldGhvZHMgbmVlZCB0byBsb3NlIHRoZSBzZWxmIGFyZ3VtZW50CiAgICBpZiBnZXRhdHRyKGZ1bmMsICdfX3NlbGZfXycsIE5vbmUpIGlzIG5vdCBOb25lOgogICAgICAgIHJlZ2FyZ3MgPSByZWdhcmdzWzE6XQogICAgaWYgc2tpcGZpcnN0OgogICAgICAgICMgdGhpcyBjb25kaXRpb24gYW5kIHRoZSBhYm92ZSBvbmUgYXJlIG5ldmVyIGJvdGggVHJ1ZSAtIHdoeT8KICAgICAgICByZWdhcmdzID0gcmVnYXJnc1sxOl0KCiAgICBzaWduYXR1cmUgPSBpbnNwZWN0LmZvcm1hdGFyZ3NwZWMoCiAgICAgICAgcmVnYXJncywgdmFyYXJncywgdmFya3csIGRlZmF1bHRzLAogICAgICAgIGt3b25seSwga3dvbmx5ZGVmLCBhbm4sIGZvcm1hdHZhbHVlPWxhbWJkYSB2YWx1ZTogIiIpCiAgICByZXR1cm4gc2lnbmF0dXJlWzE6LTFdLCBmdW5jCgoKZGVmIF9jaGVja19zaWduYXR1cmUoZnVuYywgbW9jaywgc2tpcGZpcnN0LCBpbnN0YW5jZT1GYWxzZSk6CiAgICBpZiBub3QgX2NhbGxhYmxlKGZ1bmMpOgogICAgICAgIHJldHVybgoKICAgIHJlc3VsdCA9IF9nZXRzaWduYXR1cmUoZnVuYywgc2tpcGZpcnN0LCBpbnN0YW5jZSkKICAgIGlmIHJlc3VsdCBpcyBOb25lOgogICAgICAgIHJldHVybgogICAgc2lnbmF0dXJlLCBmdW5jID0gcmVzdWx0CgogICAgIyBjYW4ndCB1c2Ugc2VsZiBiZWNhdXNlICJzZWxmIiBpcyBjb21tb24gYXMgYW4gYXJndW1lbnQgbmFtZQogICAgIyB1bmZvcnR1bmF0ZWx5IGV2ZW4gbm90IGluIHRoZSBmaXJzdCBwbGFjZQogICAgc3JjID0gImxhbWJkYSBfbW9ja19zZWxmLCAlczogTm9uZSIgJSBzaWduYXR1cmUKICAgIGNoZWNrc2lnID0gZXZhbChzcmMsIHt9KQogICAgX2NvcHlfZnVuY19kZXRhaWxzKGZ1bmMsIGNoZWNrc2lnKQogICAgdHlwZShtb2NrKS5fbW9ja19jaGVja19zaWcgPSBjaGVja3NpZwoKCmRlZiBfY29weV9mdW5jX2RldGFpbHMoZnVuYywgZnVuY29weSk6CiAgICBmdW5jb3B5Ll9fbmFtZV9fID0gZnVuYy5fX25hbWVfXwogICAgZnVuY29weS5fX2RvY19fID0gZnVuYy5fX2RvY19fCiAgICAjIHdlIGV4cGxpY2l0bHkgZG9uJ3QgY29weSBmdW5jLl9fZGljdF9fIGludG8gdGhpcyBjb3B5IGFzIGl0IHdvdWxkCiAgICAjIGV4cG9zZSBvcmlnaW5hbCBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIG1vY2tlZAogICAgZnVuY29weS5fX21vZHVsZV9fID0gZnVuYy5fX21vZHVsZV9fCiAgICBmdW5jb3B5Ll9fZGVmYXVsdHNfXyA9IGZ1bmMuX19kZWZhdWx0c19fCiAgICBmdW5jb3B5Ll9fa3dkZWZhdWx0c19fID0gZnVuYy5fX2t3ZGVmYXVsdHNfXwoKCmRlZiBfY2FsbGFibGUob2JqKToKICAgIGlmIGlzaW5zdGFuY2Uob2JqLCB0eXBlKToKICAgICAgICByZXR1cm4gVHJ1ZQogICAgaWYgZ2V0YXR0cihvYmosICdfX2NhbGxfXycsIE5vbmUpIGlzIG5vdCBOb25lOgogICAgICAgIHJldHVybiBUcnVlCiAgICByZXR1cm4gRmFsc2UKCgpkZWYgX2lzX2xpc3Qob2JqKToKICAgICMgY2hlY2tzIGZvciBsaXN0IG9yIHR1cGxlcwogICAgIyBYWFhYIGJhZGx5IG5hbWVkIQogICAgcmV0dXJuIHR5cGUob2JqKSBpbiAobGlzdCwgdHVwbGUpCgoKZGVmIF9pbnN0YW5jZV9jYWxsYWJsZShvYmopOgogICAgIiIiR2l2ZW4gYW4gb2JqZWN0LCByZXR1cm4gVHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGNhbGxhYmxlLgogICAgRm9yIGNsYXNzZXMsIHJldHVybiBUcnVlIGlmIGluc3RhbmNlcyB3b3VsZCBiZSBjYWxsYWJsZS4iIiIKICAgIGlmIG5vdCBpc2luc3RhbmNlKG9iaiwgdHlwZSk6CiAgICAgICAgIyBhbHJlYWR5IGFuIGluc3RhbmNlCiAgICAgICAgcmV0dXJuIGdldGF0dHIob2JqLCAnX19jYWxsX18nLCBOb25lKSBpcyBub3QgTm9uZQoKICAgICMgKmNvdWxkKiBiZSBicm9rZW4gYnkgYSBjbGFzcyBvdmVycmlkaW5nIF9fbXJvX18gb3IgX19kaWN0X18gdmlhCiAgICAjIGEgbWV0YWNsYXNzCiAgICBmb3IgYmFzZSBpbiAob2JqLCkgKyBvYmouX19tcm9fXzoKICAgICAgICBpZiBiYXNlLl9fZGljdF9fLmdldCgnX19jYWxsX18nKSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKCmRlZiBfc2V0X3NpZ25hdHVyZShtb2NrLCBvcmlnaW5hbCwgaW5zdGFuY2U9RmFsc2UpOgogICAgIyBjcmVhdGVzIGEgZnVuY3Rpb24gd2l0aCBzaWduYXR1cmUgKCphcmdzLCAqKmt3YXJncykgdGhhdCBkZWxlZ2F0ZXMgdG8gYQogICAgIyBtb2NrLiBJdCBzdGlsbCBkb2VzIHNpZ25hdHVyZSBjaGVja2luZyBieSBjYWxsaW5nIGEgbGFtYmRhIHdpdGggdGhlIHNhbWUKICAgICMgc2lnbmF0dXJlIGFzIHRoZSBvcmlnaW5hbC4KICAgIGlmIG5vdCBfY2FsbGFibGUob3JpZ2luYWwpOgogICAgICAgIHJldHVybgoKICAgIHNraXBmaXJzdCA9IGlzaW5zdGFuY2Uob3JpZ2luYWwsIHR5cGUpCiAgICByZXN1bHQgPSBfZ2V0c2lnbmF0dXJlKG9yaWdpbmFsLCBza2lwZmlyc3QsIGluc3RhbmNlKQogICAgaWYgcmVzdWx0IGlzIE5vbmU6CiAgICAgICAgIyB3YXMgYSBDIGZ1bmN0aW9uIChlLmcuIG9iamVjdCgpLl9faW5pdF9fICkgdGhhdCBjYW4ndCBiZSBtb2NrZWQKICAgICAgICByZXR1cm4KCiAgICBzaWduYXR1cmUsIGZ1bmMgPSByZXN1bHQKCiAgICBzcmMgPSAibGFtYmRhICVzOiBOb25lIiAlIHNpZ25hdHVyZQogICAgY2hlY2tzaWcgPSBldmFsKHNyYywge30pCiAgICBfY29weV9mdW5jX2RldGFpbHMoZnVuYywgY2hlY2tzaWcpCgogICAgbmFtZSA9IG9yaWdpbmFsLl9fbmFtZV9fCiAgICBpZiBub3QgbmFtZS5pc2lkZW50aWZpZXIoKToKICAgICAgICBuYW1lID0gJ2Z1bmNvcHknCiAgICBjb250ZXh0ID0geydfY2hlY2tzaWdfJzogY2hlY2tzaWcsICdtb2NrJzogbW9ja30KICAgIHNyYyA9ICIiImRlZiAlcygqYXJncywgKiprd2FyZ3MpOgogICAgX2NoZWNrc2lnXygqYXJncywgKiprd2FyZ3MpCiAgICByZXR1cm4gbW9jaygqYXJncywgKiprd2FyZ3MpIiIiICUgbmFtZQogICAgZXhlYyAoc3JjLCBjb250ZXh0KQogICAgZnVuY29weSA9IGNvbnRleHRbbmFtZV0KICAgIF9zZXR1cF9mdW5jKGZ1bmNvcHksIG1vY2spCiAgICByZXR1cm4gZnVuY29weQoKCmRlZiBfc2V0dXBfZnVuYyhmdW5jb3B5LCBtb2NrKToKICAgIGZ1bmNvcHkubW9jayA9IG1vY2sKCiAgICAjIGNhbid0IHVzZSBpc2luc3RhbmNlIHdpdGggbW9ja3MKICAgIGlmIG5vdCBfaXNfaW5zdGFuY2VfbW9jayhtb2NrKToKICAgICAgICByZXR1cm4KCiAgICBkZWYgYXNzZXJ0X2NhbGxlZF93aXRoKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgcmV0dXJuIG1vY2suYXNzZXJ0X2NhbGxlZF93aXRoKCphcmdzLCAqKmt3YXJncykKICAgIGRlZiBhc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgqYXJncywgKiprd2FyZ3MpOgogICAgICAgIHJldHVybiBtb2NrLmFzc2VydF9jYWxsZWRfb25jZV93aXRoKCphcmdzLCAqKmt3YXJncykKICAgIGRlZiBhc3NlcnRfaGFzX2NhbGxzKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgcmV0dXJuIG1vY2suYXNzZXJ0X2hhc19jYWxscygqYXJncywgKiprd2FyZ3MpCiAgICBkZWYgYXNzZXJ0X2FueV9jYWxsKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgcmV0dXJuIG1vY2suYXNzZXJ0X2FueV9jYWxsKCphcmdzLCAqKmt3YXJncykKICAgIGRlZiByZXNldF9tb2NrKCk6CiAgICAgICAgZnVuY29weS5tZXRob2RfY2FsbHMgPSBfQ2FsbExpc3QoKQogICAgICAgIGZ1bmNvcHkubW9ja19jYWxscyA9IF9DYWxsTGlzdCgpCiAgICAgICAgbW9jay5yZXNldF9tb2NrKCkKICAgICAgICByZXQgPSBmdW5jb3B5LnJldHVybl92YWx1ZQogICAgICAgIGlmIF9pc19pbnN0YW5jZV9tb2NrKHJldCkgYW5kIG5vdCByZXQgaXMgbW9jazoKICAgICAgICAgICAgcmV0LnJlc2V0X21vY2soKQoKICAgIGZ1bmNvcHkuY2FsbGVkID0gRmFsc2UKICAgIGZ1bmNvcHkuY2FsbF9jb3VudCA9IDAKICAgIGZ1bmNvcHkuY2FsbF9hcmdzID0gTm9uZQogICAgZnVuY29weS5jYWxsX2FyZ3NfbGlzdCA9IF9DYWxsTGlzdCgpCiAgICBmdW5jb3B5Lm1ldGhvZF9jYWxscyA9IF9DYWxsTGlzdCgpCiAgICBmdW5jb3B5Lm1vY2tfY2FsbHMgPSBfQ2FsbExpc3QoKQoKICAgIGZ1bmNvcHkucmV0dXJuX3ZhbHVlID0gbW9jay5yZXR1cm5fdmFsdWUKICAgIGZ1bmNvcHkuc2lkZV9lZmZlY3QgPSBtb2NrLnNpZGVfZWZmZWN0CiAgICBmdW5jb3B5Ll9tb2NrX2NoaWxkcmVuID0gbW9jay5fbW9ja19jaGlsZHJlbgoKICAgIGZ1bmNvcHkuYXNzZXJ0X2NhbGxlZF93aXRoID0gYXNzZXJ0X2NhbGxlZF93aXRoCiAgICBmdW5jb3B5LmFzc2VydF9jYWxsZWRfb25jZV93aXRoID0gYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgKICAgIGZ1bmNvcHkuYXNzZXJ0X2hhc19jYWxscyA9IGFzc2VydF9oYXNfY2FsbHMKICAgIGZ1bmNvcHkuYXNzZXJ0X2FueV9jYWxsID0gYXNzZXJ0X2FueV9jYWxsCiAgICBmdW5jb3B5LnJlc2V0X21vY2sgPSByZXNldF9tb2NrCgogICAgbW9jay5fbW9ja19kZWxlZ2F0ZSA9IGZ1bmNvcHkKCgpkZWYgX2lzX21hZ2ljKG5hbWUpOgogICAgcmV0dXJuICdfXyVzX18nICUgbmFtZVsyOi0yXSA9PSBuYW1lCgoKY2xhc3MgX1NlbnRpbmVsT2JqZWN0KG9iamVjdCk6CiAgICAiQSB1bmlxdWUsIG5hbWVkLCBzZW50aW5lbCBvYmplY3QuIgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUpOgogICAgICAgIHNlbGYubmFtZSA9IG5hbWUKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgcmV0dXJuICdzZW50aW5lbC4lcycgJSBzZWxmLm5hbWUKCgpjbGFzcyBfU2VudGluZWwob2JqZWN0KToKICAgICIiIkFjY2VzcyBhdHRyaWJ1dGVzIHRvIHJldHVybiBhIG5hbWVkIG9iamVjdCwgdXNhYmxlIGFzIGEgc2VudGluZWwuIiIiCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5fc2VudGluZWxzID0ge30KCiAgICBkZWYgX19nZXRhdHRyX18oc2VsZiwgbmFtZSk6CiAgICAgICAgaWYgbmFtZSA9PSAnX19iYXNlc19fJzoKICAgICAgICAgICAgIyBXaXRob3V0IHRoaXMgaGVscCh1bml0dGVzdC5tb2NrKSByYWlzZXMgYW4gZXhjZXB0aW9uCiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yCiAgICAgICAgcmV0dXJuIHNlbGYuX3NlbnRpbmVscy5zZXRkZWZhdWx0KG5hbWUsIF9TZW50aW5lbE9iamVjdChuYW1lKSkKCgpzZW50aW5lbCA9IF9TZW50aW5lbCgpCgpERUZBVUxUID0gc2VudGluZWwuREVGQVVMVApfbWlzc2luZyA9IHNlbnRpbmVsLk1JU1NJTkcKX2RlbGV0ZWQgPSBzZW50aW5lbC5ERUxFVEVECgoKZGVmIF9jb3B5KHZhbHVlKToKICAgIGlmIHR5cGUodmFsdWUpIGluIChkaWN0LCBsaXN0LCB0dXBsZSwgc2V0KToKICAgICAgICByZXR1cm4gdHlwZSh2YWx1ZSkodmFsdWUpCiAgICByZXR1cm4gdmFsdWUKCgpfYWxsb3dlZF9uYW1lcyA9IHNldCgKICAgIFsKICAgICAgICAncmV0dXJuX3ZhbHVlJywgJ19tb2NrX3JldHVybl92YWx1ZScsICdzaWRlX2VmZmVjdCcsCiAgICAgICAgJ19tb2NrX3NpZGVfZWZmZWN0JywgJ19tb2NrX3BhcmVudCcsICdfbW9ja19uZXdfcGFyZW50JywKICAgICAgICAnX21vY2tfbmFtZScsICdfbW9ja19uZXdfbmFtZScKICAgIF0KKQoKCmRlZiBfZGVsZWdhdGluZ19wcm9wZXJ0eShuYW1lKToKICAgIF9hbGxvd2VkX25hbWVzLmFkZChuYW1lKQogICAgX3RoZV9uYW1lID0gJ19tb2NrXycgKyBuYW1lCiAgICBkZWYgX2dldChzZWxmLCBuYW1lPW5hbWUsIF90aGVfbmFtZT1fdGhlX25hbWUpOgogICAgICAgIHNpZyA9IHNlbGYuX21vY2tfZGVsZWdhdGUKICAgICAgICBpZiBzaWcgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGdldGF0dHIoc2VsZiwgX3RoZV9uYW1lKQogICAgICAgIHJldHVybiBnZXRhdHRyKHNpZywgbmFtZSkKICAgIGRlZiBfc2V0KHNlbGYsIHZhbHVlLCBuYW1lPW5hbWUsIF90aGVfbmFtZT1fdGhlX25hbWUpOgogICAgICAgIHNpZyA9IHNlbGYuX21vY2tfZGVsZWdhdGUKICAgICAgICBpZiBzaWcgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5fX2RpY3RfX1tfdGhlX25hbWVdID0gdmFsdWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZXRhdHRyKHNpZywgbmFtZSwgdmFsdWUpCgogICAgcmV0dXJuIHByb3BlcnR5KF9nZXQsIF9zZXQpCgoKCmNsYXNzIF9DYWxsTGlzdChsaXN0KToKCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHZhbHVlKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZSh2YWx1ZSwgbGlzdCk6CiAgICAgICAgICAgIHJldHVybiBsaXN0Ll9fY29udGFpbnNfXyhzZWxmLCB2YWx1ZSkKICAgICAgICBsZW5fdmFsdWUgPSBsZW4odmFsdWUpCiAgICAgICAgbGVuX3NlbGYgPSBsZW4oc2VsZikKICAgICAgICBpZiBsZW5fdmFsdWUgPiBsZW5fc2VsZjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbl9zZWxmIC0gbGVuX3ZhbHVlICsgMSk6CiAgICAgICAgICAgIHN1Yl9saXN0ID0gc2VsZltpOmkrbGVuX3ZhbHVlXQogICAgICAgICAgICBpZiBzdWJfbGlzdCA9PSB2YWx1ZToKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgICAgIHJldHVybiBwcHJpbnQucGZvcm1hdChsaXN0KHNlbGYpKQoKCmRlZiBfY2hlY2tfYW5kX3NldF9wYXJlbnQocGFyZW50LCB2YWx1ZSwgbmFtZSwgbmV3X25hbWUpOgogICAgaWYgbm90IF9pc19pbnN0YW5jZV9tb2NrKHZhbHVlKToKICAgICAgICByZXR1cm4gRmFsc2UKICAgIGlmICgodmFsdWUuX21vY2tfbmFtZSBvciB2YWx1ZS5fbW9ja19uZXdfbmFtZSkgb3IKICAgICAgICAodmFsdWUuX21vY2tfcGFyZW50IGlzIG5vdCBOb25lKSBvcgogICAgICAgICh2YWx1ZS5fbW9ja19uZXdfcGFyZW50IGlzIG5vdCBOb25lKSk6CiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgX3BhcmVudCA9IHBhcmVudAogICAgd2hpbGUgX3BhcmVudCBpcyBub3QgTm9uZToKICAgICAgICAjIHNldHRpbmcgYSBtb2NrICh2YWx1ZSkgYXMgYSBjaGlsZCBvciByZXR1cm4gdmFsdWUgb2YgaXRzZWxmCiAgICAgICAgIyBzaG91bGQgbm90IG1vZGlmeSB0aGUgbW9jawogICAgICAgIGlmIF9wYXJlbnQgaXMgdmFsdWU6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIF9wYXJlbnQgPSBfcGFyZW50Ll9tb2NrX25ld19wYXJlbnQKCiAgICBpZiBuZXdfbmFtZToKICAgICAgICB2YWx1ZS5fbW9ja19uZXdfcGFyZW50ID0gcGFyZW50CiAgICAgICAgdmFsdWUuX21vY2tfbmV3X25hbWUgPSBuZXdfbmFtZQogICAgaWYgbmFtZToKICAgICAgICB2YWx1ZS5fbW9ja19wYXJlbnQgPSBwYXJlbnQKICAgICAgICB2YWx1ZS5fbW9ja19uYW1lID0gbmFtZQogICAgcmV0dXJuIFRydWUKCgoKY2xhc3MgQmFzZShvYmplY3QpOgogICAgX21vY2tfcmV0dXJuX3ZhbHVlID0gREVGQVVMVAogICAgX21vY2tfc2lkZV9lZmZlY3QgPSBOb25lCiAgICBkZWYgX19pbml0X18oc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBwYXNzCgoKCmNsYXNzIE5vbkNhbGxhYmxlTW9jayhCYXNlKToKICAgICIiIkEgbm9uLWNhbGxhYmxlIHZlcnNpb24gb2YgYE1vY2tgIiIiCgogICAgZGVmIF9fbmV3X18oY2xzLCAqYXJncywgKiprdyk6CiAgICAgICAgIyBldmVyeSBpbnN0YW5jZSBoYXMgaXRzIG93biBjbGFzcwogICAgICAgICMgc28gd2UgY2FuIGNyZWF0ZSBtYWdpYyBtZXRob2RzIG9uIHRoZQogICAgICAgICMgY2xhc3Mgd2l0aG91dCBzdG9tcGluZyBvbiBvdGhlciBtb2NrcwogICAgICAgIG5ldyA9IHR5cGUoY2xzLl9fbmFtZV9fLCAoY2xzLCksIHsnX19kb2NfXyc6IGNscy5fX2RvY19ffSkKICAgICAgICBpbnN0YW5jZSA9IG9iamVjdC5fX25ld19fKG5ldykKICAgICAgICByZXR1cm4gaW5zdGFuY2UKCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgICAgICBzZWxmLCBzcGVjPU5vbmUsIHdyYXBzPU5vbmUsIG5hbWU9Tm9uZSwgc3BlY19zZXQ9Tm9uZSwKICAgICAgICAgICAgcGFyZW50PU5vbmUsIF9zcGVjX3N0YXRlPU5vbmUsIF9uZXdfbmFtZT0nJywgX25ld19wYXJlbnQ9Tm9uZSwKICAgICAgICAgICAgKiprd2FyZ3MKICAgICAgICApOgogICAgICAgIGlmIF9uZXdfcGFyZW50IGlzIE5vbmU6CiAgICAgICAgICAgIF9uZXdfcGFyZW50ID0gcGFyZW50CgogICAgICAgIF9fZGljdF9fID0gc2VsZi5fX2RpY3RfXwogICAgICAgIF9fZGljdF9fWydfbW9ja19wYXJlbnQnXSA9IHBhcmVudAogICAgICAgIF9fZGljdF9fWydfbW9ja19uYW1lJ10gPSBuYW1lCiAgICAgICAgX19kaWN0X19bJ19tb2NrX25ld19uYW1lJ10gPSBfbmV3X25hbWUKICAgICAgICBfX2RpY3RfX1snX21vY2tfbmV3X3BhcmVudCddID0gX25ld19wYXJlbnQKCiAgICAgICAgaWYgc3BlY19zZXQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNwZWMgPSBzcGVjX3NldAogICAgICAgICAgICBzcGVjX3NldCA9IFRydWUKCiAgICAgICAgc2VsZi5fbW9ja19hZGRfc3BlYyhzcGVjLCBzcGVjX3NldCkKCiAgICAgICAgX19kaWN0X19bJ19tb2NrX2NoaWxkcmVuJ10gPSB7fQogICAgICAgIF9fZGljdF9fWydfbW9ja193cmFwcyddID0gd3JhcHMKICAgICAgICBfX2RpY3RfX1snX21vY2tfZGVsZWdhdGUnXSA9IE5vbmUKCiAgICAgICAgX19kaWN0X19bJ19tb2NrX2NhbGxlZCddID0gRmFsc2UKICAgICAgICBfX2RpY3RfX1snX21vY2tfY2FsbF9hcmdzJ10gPSBOb25lCiAgICAgICAgX19kaWN0X19bJ19tb2NrX2NhbGxfY291bnQnXSA9IDAKICAgICAgICBfX2RpY3RfX1snX21vY2tfY2FsbF9hcmdzX2xpc3QnXSA9IF9DYWxsTGlzdCgpCiAgICAgICAgX19kaWN0X19bJ19tb2NrX21vY2tfY2FsbHMnXSA9IF9DYWxsTGlzdCgpCgogICAgICAgIF9fZGljdF9fWydtZXRob2RfY2FsbHMnXSA9IF9DYWxsTGlzdCgpCgogICAgICAgIGlmIGt3YXJnczoKICAgICAgICAgICAgc2VsZi5jb25maWd1cmVfbW9jaygqKmt3YXJncykKCiAgICAgICAgX3NhZmVfc3VwZXIoTm9uQ2FsbGFibGVNb2NrLCBzZWxmKS5fX2luaXRfXygKICAgICAgICAgICAgc3BlYywgd3JhcHMsIG5hbWUsIHNwZWNfc2V0LCBwYXJlbnQsCiAgICAgICAgICAgIF9zcGVjX3N0YXRlCiAgICAgICAgKQoKCiAgICBkZWYgYXR0YWNoX21vY2soc2VsZiwgbW9jaywgYXR0cmlidXRlKToKICAgICAgICAiIiIKICAgICAgICBBdHRhY2ggYSBtb2NrIGFzIGFuIGF0dHJpYnV0ZSBvZiB0aGlzIG9uZSwgcmVwbGFjaW5nIGl0cyBuYW1lIGFuZAogICAgICAgIHBhcmVudC4gQ2FsbHMgdG8gdGhlIGF0dGFjaGVkIG1vY2sgd2lsbCBiZSByZWNvcmRlZCBpbiB0aGUKICAgICAgICBgbWV0aG9kX2NhbGxzYCBhbmQgYG1vY2tfY2FsbHNgIGF0dHJpYnV0ZXMgb2YgdGhpcyBvbmUuIiIiCiAgICAgICAgbW9jay5fbW9ja19wYXJlbnQgPSBOb25lCiAgICAgICAgbW9jay5fbW9ja19uZXdfcGFyZW50ID0gTm9uZQogICAgICAgIG1vY2suX21vY2tfbmFtZSA9ICcnCiAgICAgICAgbW9jay5fbW9ja19uZXdfbmFtZSA9IE5vbmUKCiAgICAgICAgc2V0YXR0cihzZWxmLCBhdHRyaWJ1dGUsIG1vY2spCgoKICAgIGRlZiBtb2NrX2FkZF9zcGVjKHNlbGYsIHNwZWMsIHNwZWNfc2V0PUZhbHNlKToKICAgICAgICAiIiJBZGQgYSBzcGVjIHRvIGEgbW9jay4gYHNwZWNgIGNhbiBlaXRoZXIgYmUgYW4gb2JqZWN0IG9yIGEKICAgICAgICBsaXN0IG9mIHN0cmluZ3MuIE9ubHkgYXR0cmlidXRlcyBvbiB0aGUgYHNwZWNgIGNhbiBiZSBmZXRjaGVkIGFzCiAgICAgICAgYXR0cmlidXRlcyBmcm9tIHRoZSBtb2NrLgoKICAgICAgICBJZiBgc3BlY19zZXRgIGlzIFRydWUgdGhlbiBvbmx5IGF0dHJpYnV0ZXMgb24gdGhlIHNwZWMgY2FuIGJlIHNldC4iIiIKICAgICAgICBzZWxmLl9tb2NrX2FkZF9zcGVjKHNwZWMsIHNwZWNfc2V0KQoKCiAgICBkZWYgX21vY2tfYWRkX3NwZWMoc2VsZiwgc3BlYywgc3BlY19zZXQpOgogICAgICAgIF9zcGVjX2NsYXNzID0gTm9uZQoKICAgICAgICBpZiBzcGVjIGlzIG5vdCBOb25lIGFuZCBub3QgX2lzX2xpc3Qoc3BlYyk6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc3BlYywgdHlwZSk6CiAgICAgICAgICAgICAgICBfc3BlY19jbGFzcyA9IHNwZWMKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9zcGVjX2NsYXNzID0gX2dldF9jbGFzcyhzcGVjKQoKICAgICAgICAgICAgc3BlYyA9IGRpcihzcGVjKQoKICAgICAgICBfX2RpY3RfXyA9IHNlbGYuX19kaWN0X18KICAgICAgICBfX2RpY3RfX1snX3NwZWNfY2xhc3MnXSA9IF9zcGVjX2NsYXNzCiAgICAgICAgX19kaWN0X19bJ19zcGVjX3NldCddID0gc3BlY19zZXQKICAgICAgICBfX2RpY3RfX1snX21vY2tfbWV0aG9kcyddID0gc3BlYwoKCiAgICBkZWYgX19nZXRfcmV0dXJuX3ZhbHVlKHNlbGYpOgogICAgICAgIHJldCA9IHNlbGYuX21vY2tfcmV0dXJuX3ZhbHVlCiAgICAgICAgaWYgc2VsZi5fbW9ja19kZWxlZ2F0ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0ID0gc2VsZi5fbW9ja19kZWxlZ2F0ZS5yZXR1cm5fdmFsdWUKCiAgICAgICAgaWYgcmV0IGlzIERFRkFVTFQ6CiAgICAgICAgICAgIHJldCA9IHNlbGYuX2dldF9jaGlsZF9tb2NrKAogICAgICAgICAgICAgICAgX25ld19wYXJlbnQ9c2VsZiwgX25ld19uYW1lPScoKScKICAgICAgICAgICAgKQogICAgICAgICAgICBzZWxmLnJldHVybl92YWx1ZSA9IHJldAogICAgICAgIHJldHVybiByZXQKCgogICAgZGVmIF9fc2V0X3JldHVybl92YWx1ZShzZWxmLCB2YWx1ZSk6CiAgICAgICAgaWYgc2VsZi5fbW9ja19kZWxlZ2F0ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi5fbW9ja19kZWxlZ2F0ZS5yZXR1cm5fdmFsdWUgPSB2YWx1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuX21vY2tfcmV0dXJuX3ZhbHVlID0gdmFsdWUKICAgICAgICAgICAgX2NoZWNrX2FuZF9zZXRfcGFyZW50KHNlbGYsIHZhbHVlLCBOb25lLCAnKCknKQoKICAgIF9fcmV0dXJuX3ZhbHVlX2RvYyA9ICJUaGUgdmFsdWUgdG8gYmUgcmV0dXJuZWQgd2hlbiB0aGUgbW9jayBpcyBjYWxsZWQuIgogICAgcmV0dXJuX3ZhbHVlID0gcHJvcGVydHkoX19nZXRfcmV0dXJuX3ZhbHVlLCBfX3NldF9yZXR1cm5fdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3JldHVybl92YWx1ZV9kb2MpCgoKICAgIEBwcm9wZXJ0eQogICAgZGVmIF9fY2xhc3NfXyhzZWxmKToKICAgICAgICBpZiBzZWxmLl9zcGVjX2NsYXNzIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiB0eXBlKHNlbGYpCiAgICAgICAgcmV0dXJuIHNlbGYuX3NwZWNfY2xhc3MKCiAgICBjYWxsZWQgPSBfZGVsZWdhdGluZ19wcm9wZXJ0eSgnY2FsbGVkJykKICAgIGNhbGxfY291bnQgPSBfZGVsZWdhdGluZ19wcm9wZXJ0eSgnY2FsbF9jb3VudCcpCiAgICBjYWxsX2FyZ3MgPSBfZGVsZWdhdGluZ19wcm9wZXJ0eSgnY2FsbF9hcmdzJykKICAgIGNhbGxfYXJnc19saXN0ID0gX2RlbGVnYXRpbmdfcHJvcGVydHkoJ2NhbGxfYXJnc19saXN0JykKICAgIG1vY2tfY2FsbHMgPSBfZGVsZWdhdGluZ19wcm9wZXJ0eSgnbW9ja19jYWxscycpCgoKICAgIGRlZiBfX2dldF9zaWRlX2VmZmVjdChzZWxmKToKICAgICAgICBkZWxlZ2F0ZWQgPSBzZWxmLl9tb2NrX2RlbGVnYXRlCiAgICAgICAgaWYgZGVsZWdhdGVkIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9tb2NrX3NpZGVfZWZmZWN0CiAgICAgICAgcmV0dXJuIGRlbGVnYXRlZC5zaWRlX2VmZmVjdAoKICAgIGRlZiBfX3NldF9zaWRlX2VmZmVjdChzZWxmLCB2YWx1ZSk6CiAgICAgICAgdmFsdWUgPSBfdHJ5X2l0ZXIodmFsdWUpCiAgICAgICAgZGVsZWdhdGVkID0gc2VsZi5fbW9ja19kZWxlZ2F0ZQogICAgICAgIGlmIGRlbGVnYXRlZCBpcyBOb25lOgogICAgICAgICAgICBzZWxmLl9tb2NrX3NpZGVfZWZmZWN0ID0gdmFsdWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBkZWxlZ2F0ZWQuc2lkZV9lZmZlY3QgPSB2YWx1ZQoKICAgIHNpZGVfZWZmZWN0ID0gcHJvcGVydHkoX19nZXRfc2lkZV9lZmZlY3QsIF9fc2V0X3NpZGVfZWZmZWN0KQoKCiAgICBkZWYgcmVzZXRfbW9jayhzZWxmKToKICAgICAgICAiUmVzdG9yZSB0aGUgbW9jayBvYmplY3QgdG8gaXRzIGluaXRpYWwgc3RhdGUuIgogICAgICAgIHNlbGYuY2FsbGVkID0gRmFsc2UKICAgICAgICBzZWxmLmNhbGxfYXJncyA9IE5vbmUKICAgICAgICBzZWxmLmNhbGxfY291bnQgPSAwCiAgICAgICAgc2VsZi5tb2NrX2NhbGxzID0gX0NhbGxMaXN0KCkKICAgICAgICBzZWxmLmNhbGxfYXJnc19saXN0ID0gX0NhbGxMaXN0KCkKICAgICAgICBzZWxmLm1ldGhvZF9jYWxscyA9IF9DYWxsTGlzdCgpCgogICAgICAgIGZvciBjaGlsZCBpbiBzZWxmLl9tb2NrX2NoaWxkcmVuLnZhbHVlcygpOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGNoaWxkLCBfU3BlY1N0YXRlKToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGNoaWxkLnJlc2V0X21vY2soKQoKICAgICAgICByZXQgPSBzZWxmLl9tb2NrX3JldHVybl92YWx1ZQogICAgICAgIGlmIF9pc19pbnN0YW5jZV9tb2NrKHJldCkgYW5kIHJldCBpcyBub3Qgc2VsZjoKICAgICAgICAgICAgcmV0LnJlc2V0X21vY2soKQoKCiAgICBkZWYgY29uZmlndXJlX21vY2soc2VsZiwgKiprd2FyZ3MpOgogICAgICAgICIiIlNldCBhdHRyaWJ1dGVzIG9uIHRoZSBtb2NrIHRocm91Z2gga2V5d29yZCBhcmd1bWVudHMuCgogICAgICAgIEF0dHJpYnV0ZXMgcGx1cyByZXR1cm4gdmFsdWVzIGFuZCBzaWRlIGVmZmVjdHMgY2FuIGJlIHNldCBvbiBjaGlsZAogICAgICAgIG1vY2tzIHVzaW5nIHN0YW5kYXJkIGRvdCBub3RhdGlvbiBhbmQgdW5wYWNraW5nIGEgZGljdGlvbmFyeSBpbiB0aGUKICAgICAgICBtZXRob2QgY2FsbDoKCiAgICAgICAgPj4+IGF0dHJzID0geydtZXRob2QucmV0dXJuX3ZhbHVlJzogMywgJ290aGVyLnNpZGVfZWZmZWN0JzogS2V5RXJyb3J9CiAgICAgICAgPj4+IG1vY2suY29uZmlndXJlX21vY2soKiphdHRycykiIiIKICAgICAgICBmb3IgYXJnLCB2YWwgaW4gc29ydGVkKGt3YXJncy5pdGVtcygpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB3ZSBzb3J0IG9uIHRoZSBudW1iZXIgb2YgZG90cyBzbyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIGF0dHJpYnV0ZXMgYXJlIHNldCBiZWZvcmUgd2Ugc2V0IGF0dHJpYnV0ZXMgb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgYXR0cmlidXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PWxhbWJkYSBlbnRyeTogZW50cnlbMF0uY291bnQoJy4nKSk6CiAgICAgICAgICAgIGFyZ3MgPSBhcmcuc3BsaXQoJy4nKQogICAgICAgICAgICBmaW5hbCA9IGFyZ3MucG9wKCkKICAgICAgICAgICAgb2JqID0gc2VsZgogICAgICAgICAgICBmb3IgZW50cnkgaW4gYXJnczoKICAgICAgICAgICAgICAgIG9iaiA9IGdldGF0dHIob2JqLCBlbnRyeSkKICAgICAgICAgICAgc2V0YXR0cihvYmosIGZpbmFsLCB2YWwpCgoKICAgIGRlZiBfX2dldGF0dHJfXyhzZWxmLCBuYW1lKToKICAgICAgICBpZiBuYW1lID09ICdfbW9ja19tZXRob2RzJzoKICAgICAgICAgICAgcmFpc2UgQXR0cmlidXRlRXJyb3IobmFtZSkKICAgICAgICBlbGlmIHNlbGYuX21vY2tfbWV0aG9kcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgbmFtZSBub3QgaW4gc2VsZi5fbW9ja19tZXRob2RzIG9yIG5hbWUgaW4gX2FsbF9tYWdpY3M6CiAgICAgICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigiTW9jayBvYmplY3QgaGFzIG5vIGF0dHJpYnV0ZSAlciIgJSBuYW1lKQogICAgICAgIGVsaWYgX2lzX21hZ2ljKG5hbWUpOgogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcihuYW1lKQoKICAgICAgICByZXN1bHQgPSBzZWxmLl9tb2NrX2NoaWxkcmVuLmdldChuYW1lKQogICAgICAgIGlmIHJlc3VsdCBpcyBfZGVsZXRlZDoKICAgICAgICAgICAgcmFpc2UgQXR0cmlidXRlRXJyb3IobmFtZSkKICAgICAgICBlbGlmIHJlc3VsdCBpcyBOb25lOgogICAgICAgICAgICB3cmFwcyA9IE5vbmUKICAgICAgICAgICAgaWYgc2VsZi5fbW9ja193cmFwcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICMgWFhYWCBzaG91bGQgd2UgZ2V0IHRoZSBhdHRyaWJ1dGUgd2l0aG91dCB0cmlnZ2VyaW5nIGNvZGUKICAgICAgICAgICAgICAgICMgZXhlY3V0aW9uPwogICAgICAgICAgICAgICAgd3JhcHMgPSBnZXRhdHRyKHNlbGYuX21vY2tfd3JhcHMsIG5hbWUpCgogICAgICAgICAgICByZXN1bHQgPSBzZWxmLl9nZXRfY2hpbGRfbW9jaygKICAgICAgICAgICAgICAgIHBhcmVudD1zZWxmLCBuYW1lPW5hbWUsIHdyYXBzPXdyYXBzLCBfbmV3X25hbWU9bmFtZSwKICAgICAgICAgICAgICAgIF9uZXdfcGFyZW50PXNlbGYKICAgICAgICAgICAgKQogICAgICAgICAgICBzZWxmLl9tb2NrX2NoaWxkcmVuW25hbWVdICA9IHJlc3VsdAoKICAgICAgICBlbGlmIGlzaW5zdGFuY2UocmVzdWx0LCBfU3BlY1N0YXRlKToKICAgICAgICAgICAgcmVzdWx0ID0gY3JlYXRlX2F1dG9zcGVjKAogICAgICAgICAgICAgICAgcmVzdWx0LnNwZWMsIHJlc3VsdC5zcGVjX3NldCwgcmVzdWx0Lmluc3RhbmNlLAogICAgICAgICAgICAgICAgcmVzdWx0LnBhcmVudCwgcmVzdWx0Lm5hbWUKICAgICAgICAgICAgKQogICAgICAgICAgICBzZWxmLl9tb2NrX2NoaWxkcmVuW25hbWVdICA9IHJlc3VsdAoKICAgICAgICByZXR1cm4gcmVzdWx0CgoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICBfbmFtZV9saXN0ID0gW3NlbGYuX21vY2tfbmV3X25hbWVdCiAgICAgICAgX3BhcmVudCA9IHNlbGYuX21vY2tfbmV3X3BhcmVudAogICAgICAgIGxhc3QgPSBzZWxmCgogICAgICAgIGRvdCA9ICcuJwogICAgICAgIGlmIF9uYW1lX2xpc3QgPT0gWycoKSddOgogICAgICAgICAgICBkb3QgPSAnJwogICAgICAgIHNlZW4gPSBzZXQoKQogICAgICAgIHdoaWxlIF9wYXJlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGxhc3QgPSBfcGFyZW50CgogICAgICAgICAgICBfbmFtZV9saXN0LmFwcGVuZChfcGFyZW50Ll9tb2NrX25ld19uYW1lICsgZG90KQogICAgICAgICAgICBkb3QgPSAnLicKICAgICAgICAgICAgaWYgX3BhcmVudC5fbW9ja19uZXdfbmFtZSA9PSAnKCknOgogICAgICAgICAgICAgICAgZG90ID0gJycKCiAgICAgICAgICAgIF9wYXJlbnQgPSBfcGFyZW50Ll9tb2NrX25ld19wYXJlbnQKCiAgICAgICAgICAgICMgdXNlIGlkcyBoZXJlIHNvIGFzIG5vdCB0byBjYWxsIF9faGFzaF9fIG9uIHRoZSBtb2NrcwogICAgICAgICAgICBpZiBpZChfcGFyZW50KSBpbiBzZWVuOgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgc2Vlbi5hZGQoaWQoX3BhcmVudCkpCgogICAgICAgIF9uYW1lX2xpc3QgPSBsaXN0KHJldmVyc2VkKF9uYW1lX2xpc3QpKQogICAgICAgIF9maXJzdCA9IGxhc3QuX21vY2tfbmFtZSBvciAnbW9jaycKICAgICAgICBpZiBsZW4oX25hbWVfbGlzdCkgPiAxOgogICAgICAgICAgICBpZiBfbmFtZV9saXN0WzFdIG5vdCBpbiAoJygpJywgJygpLicpOgogICAgICAgICAgICAgICAgX2ZpcnN0ICs9ICcuJwogICAgICAgIF9uYW1lX2xpc3RbMF0gPSBfZmlyc3QKICAgICAgICBuYW1lID0gJycuam9pbihfbmFtZV9saXN0KQoKICAgICAgICBuYW1lX3N0cmluZyA9ICcnCiAgICAgICAgaWYgbmFtZSBub3QgaW4gKCdtb2NrJywgJ21vY2suJyk6CiAgICAgICAgICAgIG5hbWVfc3RyaW5nID0gJyBuYW1lPSVyJyAlIG5hbWUKCiAgICAgICAgc3BlY19zdHJpbmcgPSAnJwogICAgICAgIGlmIHNlbGYuX3NwZWNfY2xhc3MgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNwZWNfc3RyaW5nID0gJyBzcGVjPSVyJwogICAgICAgICAgICBpZiBzZWxmLl9zcGVjX3NldDoKICAgICAgICAgICAgICAgIHNwZWNfc3RyaW5nID0gJyBzcGVjX3NldD0lcicKICAgICAgICAgICAgc3BlY19zdHJpbmcgPSBzcGVjX3N0cmluZyAlIHNlbGYuX3NwZWNfY2xhc3MuX19uYW1lX18KICAgICAgICByZXR1cm4gIjwlcyVzJXMgaWQ9JyVzJz4iICUgKAogICAgICAgICAgICB0eXBlKHNlbGYpLl9fbmFtZV9fLAogICAgICAgICAgICBuYW1lX3N0cmluZywKICAgICAgICAgICAgc3BlY19zdHJpbmcsCiAgICAgICAgICAgIGlkKHNlbGYpCiAgICAgICAgKQoKCiAgICBkZWYgX19kaXJfXyhzZWxmKToKICAgICAgICAiIiJGaWx0ZXIgdGhlIG91dHB1dCBvZiBgZGlyKG1vY2spYCB0byBvbmx5IHVzZWZ1bCBtZW1iZXJzLiIiIgogICAgICAgIGlmIG5vdCBGSUxURVJfRElSOgogICAgICAgICAgICByZXR1cm4gb2JqZWN0Ll9fZGlyX18oc2VsZikKCiAgICAgICAgZXh0cmFzID0gc2VsZi5fbW9ja19tZXRob2RzIG9yIFtdCiAgICAgICAgZnJvbV90eXBlID0gZGlyKHR5cGUoc2VsZikpCiAgICAgICAgZnJvbV9kaWN0ID0gbGlzdChzZWxmLl9fZGljdF9fKQoKICAgICAgICBmcm9tX3R5cGUgPSBbZSBmb3IgZSBpbiBmcm9tX3R5cGUgaWYgbm90IGUuc3RhcnRzd2l0aCgnXycpXQogICAgICAgIGZyb21fZGljdCA9IFtlIGZvciBlIGluIGZyb21fZGljdCBpZiBub3QgZS5zdGFydHN3aXRoKCdfJykgb3IKICAgICAgICAgICAgICAgICAgICAgX2lzX21hZ2ljKGUpXQogICAgICAgIHJldHVybiBzb3J0ZWQoc2V0KGV4dHJhcyArIGZyb21fdHlwZSArIGZyb21fZGljdCArCiAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdChzZWxmLl9tb2NrX2NoaWxkcmVuKSkpCgoKICAgIGRlZiBfX3NldGF0dHJfXyhzZWxmLCBuYW1lLCB2YWx1ZSk6CiAgICAgICAgaWYgbmFtZSBpbiBfYWxsb3dlZF9uYW1lczoKICAgICAgICAgICAgIyBwcm9wZXJ0eSBzZXR0ZXJzIGdvIHRocm91Z2ggaGVyZQogICAgICAgICAgICByZXR1cm4gb2JqZWN0Ll9fc2V0YXR0cl9fKHNlbGYsIG5hbWUsIHZhbHVlKQogICAgICAgIGVsaWYgKHNlbGYuX3NwZWNfc2V0IGFuZCBzZWxmLl9tb2NrX21ldGhvZHMgaXMgbm90IE5vbmUgYW5kCiAgICAgICAgICAgIG5hbWUgbm90IGluIHNlbGYuX21vY2tfbWV0aG9kcyBhbmQKICAgICAgICAgICAgbmFtZSBub3QgaW4gc2VsZi5fX2RpY3RfXyk6CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJNb2NrIG9iamVjdCBoYXMgbm8gYXR0cmlidXRlICclcyciICUgbmFtZSkKICAgICAgICBlbGlmIG5hbWUgaW4gX3Vuc3VwcG9ydGVkX21hZ2ljczoKICAgICAgICAgICAgbXNnID0gJ0F0dGVtcHRpbmcgdG8gc2V0IHVuc3VwcG9ydGVkIG1hZ2ljIG1ldGhvZCAlci4nICUgbmFtZQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcihtc2cpCiAgICAgICAgZWxpZiBuYW1lIGluIF9hbGxfbWFnaWNzOgogICAgICAgICAgICBpZiBzZWxmLl9tb2NrX21ldGhvZHMgaXMgbm90IE5vbmUgYW5kIG5hbWUgbm90IGluIHNlbGYuX21vY2tfbWV0aG9kczoKICAgICAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJNb2NrIG9iamVjdCBoYXMgbm8gYXR0cmlidXRlICclcyciICUgbmFtZSkKCiAgICAgICAgICAgIGlmIG5vdCBfaXNfaW5zdGFuY2VfbW9jayh2YWx1ZSk6CiAgICAgICAgICAgICAgICBzZXRhdHRyKHR5cGUoc2VsZiksIG5hbWUsIF9nZXRfbWV0aG9kKG5hbWUsIHZhbHVlKSkKICAgICAgICAgICAgICAgIG9yaWdpbmFsID0gdmFsdWUKICAgICAgICAgICAgICAgIHZhbHVlID0gbGFtYmRhICphcmdzLCAqKmt3OiBvcmlnaW5hbChzZWxmLCAqYXJncywgKiprdykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgb25seSBzZXQgX25ld19uYW1lIGFuZCBub3QgbmFtZSBzbyB0aGF0IG1vY2tfY2FsbHMgaXMgdHJhY2tlZAogICAgICAgICAgICAgICAgIyBidXQgbm90IG1ldGhvZCBjYWxscwogICAgICAgICAgICAgICAgX2NoZWNrX2FuZF9zZXRfcGFyZW50KHNlbGYsIHZhbHVlLCBOb25lLCBuYW1lKQogICAgICAgICAgICAgICAgc2V0YXR0cih0eXBlKHNlbGYpLCBuYW1lLCB2YWx1ZSkKICAgICAgICAgICAgICAgIHNlbGYuX21vY2tfY2hpbGRyZW5bbmFtZV0gPSB2YWx1ZQogICAgICAgIGVsaWYgbmFtZSA9PSAnX19jbGFzc19fJzoKICAgICAgICAgICAgc2VsZi5fc3BlY19jbGFzcyA9IHZhbHVlCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIF9jaGVja19hbmRfc2V0X3BhcmVudChzZWxmLCB2YWx1ZSwgbmFtZSwgbmFtZSk6CiAgICAgICAgICAgICAgICBzZWxmLl9tb2NrX2NoaWxkcmVuW25hbWVdID0gdmFsdWUKICAgICAgICByZXR1cm4gb2JqZWN0Ll9fc2V0YXR0cl9fKHNlbGYsIG5hbWUsIHZhbHVlKQoKCiAgICBkZWYgX19kZWxhdHRyX18oc2VsZiwgbmFtZSk6CiAgICAgICAgaWYgbmFtZSBpbiBfYWxsX21hZ2ljcyBhbmQgbmFtZSBpbiB0eXBlKHNlbGYpLl9fZGljdF9fOgogICAgICAgICAgICBkZWxhdHRyKHR5cGUoc2VsZiksIG5hbWUpCiAgICAgICAgICAgIGlmIG5hbWUgbm90IGluIHNlbGYuX19kaWN0X186CiAgICAgICAgICAgICAgICAjIGZvciBtYWdpYyBtZXRob2RzIHRoYXQgYXJlIHN0aWxsIE1hZ2ljUHJveHkgb2JqZWN0cyBhbmQKICAgICAgICAgICAgICAgICMgbm90IHNldCBvbiB0aGUgaW5zdGFuY2UgaXRzZWxmCiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgaWYgbmFtZSBpbiBzZWxmLl9fZGljdF9fOgogICAgICAgICAgICBvYmplY3QuX19kZWxhdHRyX18oc2VsZiwgbmFtZSkKCiAgICAgICAgb2JqID0gc2VsZi5fbW9ja19jaGlsZHJlbi5nZXQobmFtZSwgX21pc3NpbmcpCiAgICAgICAgaWYgb2JqIGlzIF9kZWxldGVkOgogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcihuYW1lKQogICAgICAgIGlmIG9iaiBpcyBub3QgX21pc3Npbmc6CiAgICAgICAgICAgIGRlbCBzZWxmLl9tb2NrX2NoaWxkcmVuW25hbWVdCiAgICAgICAgc2VsZi5fbW9ja19jaGlsZHJlbltuYW1lXSA9IF9kZWxldGVkCgoKCiAgICBkZWYgX2Zvcm1hdF9tb2NrX2NhbGxfc2lnbmF0dXJlKHNlbGYsIGFyZ3MsIGt3YXJncyk6CiAgICAgICAgbmFtZSA9IHNlbGYuX21vY2tfbmFtZSBvciAnbW9jaycKICAgICAgICByZXR1cm4gX2Zvcm1hdF9jYWxsX3NpZ25hdHVyZShuYW1lLCBhcmdzLCBrd2FyZ3MpCgoKICAgIGRlZiBfZm9ybWF0X21vY2tfZmFpbHVyZV9tZXNzYWdlKHNlbGYsIGFyZ3MsIGt3YXJncyk6CiAgICAgICAgbWVzc2FnZSA9ICdFeHBlY3RlZCBjYWxsOiAlc1xuQWN0dWFsIGNhbGw6ICVzJwogICAgICAgIGV4cGVjdGVkX3N0cmluZyA9IHNlbGYuX2Zvcm1hdF9tb2NrX2NhbGxfc2lnbmF0dXJlKGFyZ3MsIGt3YXJncykKICAgICAgICBjYWxsX2FyZ3MgPSBzZWxmLmNhbGxfYXJncwogICAgICAgIGlmIGxlbihjYWxsX2FyZ3MpID09IDM6CiAgICAgICAgICAgIGNhbGxfYXJncyA9IGNhbGxfYXJnc1sxOl0KICAgICAgICBhY3R1YWxfc3RyaW5nID0gc2VsZi5fZm9ybWF0X21vY2tfY2FsbF9zaWduYXR1cmUoKmNhbGxfYXJncykKICAgICAgICByZXR1cm4gbWVzc2FnZSAlIChleHBlY3RlZF9zdHJpbmcsIGFjdHVhbF9zdHJpbmcpCgoKICAgIGRlZiBhc3NlcnRfY2FsbGVkX3dpdGgoX21vY2tfc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAiIiJhc3NlcnQgdGhhdCB0aGUgbW9jayB3YXMgY2FsbGVkIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuCgogICAgICAgIFJhaXNlcyBhbiBBc3NlcnRpb25FcnJvciBpZiB0aGUgYXJncyBhbmQga2V5d29yZCBhcmdzIHBhc3NlZCBpbiBhcmUKICAgICAgICBkaWZmZXJlbnQgdG8gdGhlIGxhc3QgY2FsbCB0byB0aGUgbW9jay4iIiIKICAgICAgICBzZWxmID0gX21vY2tfc2VsZgogICAgICAgIGlmIHNlbGYuY2FsbF9hcmdzIGlzIE5vbmU6CiAgICAgICAgICAgIGV4cGVjdGVkID0gc2VsZi5fZm9ybWF0X21vY2tfY2FsbF9zaWduYXR1cmUoYXJncywga3dhcmdzKQogICAgICAgICAgICByYWlzZSBBc3NlcnRpb25FcnJvcignRXhwZWN0ZWQgY2FsbDogJXNcbk5vdCBjYWxsZWQnICUgKGV4cGVjdGVkLCkpCgogICAgICAgIGlmIHNlbGYuY2FsbF9hcmdzICE9IChhcmdzLCBrd2FyZ3MpOgogICAgICAgICAgICBtc2cgPSBzZWxmLl9mb3JtYXRfbW9ja19mYWlsdXJlX21lc3NhZ2UoYXJncywga3dhcmdzKQogICAgICAgICAgICByYWlzZSBBc3NlcnRpb25FcnJvcihtc2cpCgoKICAgIGRlZiBhc3NlcnRfY2FsbGVkX29uY2Vfd2l0aChfbW9ja19zZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgICIiImFzc2VydCB0aGF0IHRoZSBtb2NrIHdhcyBjYWxsZWQgZXhhY3RseSBvbmNlIGFuZCB3aXRoIHRoZSBzcGVjaWZpZWQKICAgICAgICBhcmd1bWVudHMuIiIiCiAgICAgICAgc2VsZiA9IF9tb2NrX3NlbGYKICAgICAgICBpZiBub3Qgc2VsZi5jYWxsX2NvdW50ID09IDE6CiAgICAgICAgICAgIG1zZyA9ICgiRXhwZWN0ZWQgdG8gYmUgY2FsbGVkIG9uY2UuIENhbGxlZCAlcyB0aW1lcy4iICUKICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsbF9jb3VudCkKICAgICAgICAgICAgcmFpc2UgQXNzZXJ0aW9uRXJyb3IobXNnKQogICAgICAgIHJldHVybiBzZWxmLmFzc2VydF9jYWxsZWRfd2l0aCgqYXJncywgKiprd2FyZ3MpCgoKICAgIGRlZiBhc3NlcnRfaGFzX2NhbGxzKHNlbGYsIGNhbGxzLCBhbnlfb3JkZXI9RmFsc2UpOgogICAgICAgICIiImFzc2VydCB0aGUgbW9jayBoYXMgYmVlbiBjYWxsZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGNhbGxzLgogICAgICAgIFRoZSBgbW9ja19jYWxsc2AgbGlzdCBpcyBjaGVja2VkIGZvciB0aGUgY2FsbHMuCgogICAgICAgIElmIGBhbnlfb3JkZXJgIGlzIEZhbHNlICh0aGUgZGVmYXVsdCkgdGhlbiB0aGUgY2FsbHMgbXVzdCBiZQogICAgICAgIHNlcXVlbnRpYWwuIFRoZXJlIGNhbiBiZSBleHRyYSBjYWxscyBiZWZvcmUgb3IgYWZ0ZXIgdGhlCiAgICAgICAgc3BlY2lmaWVkIGNhbGxzLgoKICAgICAgICBJZiBgYW55X29yZGVyYCBpcyBUcnVlIHRoZW4gdGhlIGNhbGxzIGNhbiBiZSBpbiBhbnkgb3JkZXIsIGJ1dAogICAgICAgIHRoZXkgbXVzdCBhbGwgYXBwZWFyIGluIGBtb2NrX2NhbGxzYC4iIiIKICAgICAgICBpZiBub3QgYW55X29yZGVyOgogICAgICAgICAgICBpZiBjYWxscyBub3QgaW4gc2VsZi5tb2NrX2NhbGxzOgogICAgICAgICAgICAgICAgcmFpc2UgQXNzZXJ0aW9uRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgJ0NhbGxzIG5vdCBmb3VuZC5cbkV4cGVjdGVkOiAlclxuJwogICAgICAgICAgICAgICAgICAgICdBY3R1YWw6ICVyJyAlIChjYWxscywgc2VsZi5tb2NrX2NhbGxzKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgYWxsX2NhbGxzID0gbGlzdChzZWxmLm1vY2tfY2FsbHMpCgogICAgICAgIG5vdF9mb3VuZCA9IFtdCiAgICAgICAgZm9yIGthbGwgaW4gY2FsbHM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGFsbF9jYWxscy5yZW1vdmUoa2FsbCkKICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICBub3RfZm91bmQuYXBwZW5kKGthbGwpCiAgICAgICAgaWYgbm90X2ZvdW5kOgogICAgICAgICAgICByYWlzZSBBc3NlcnRpb25FcnJvcigKICAgICAgICAgICAgICAgICclciBub3QgYWxsIGZvdW5kIGluIGNhbGwgbGlzdCcgJSAodHVwbGUobm90X2ZvdW5kKSwpCiAgICAgICAgICAgICkKCgogICAgZGVmIGFzc2VydF9hbnlfY2FsbChzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgICIiImFzc2VydCB0aGUgbW9jayBoYXMgYmVlbiBjYWxsZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGFyZ3VtZW50cy4KCiAgICAgICAgVGhlIGFzc2VydCBwYXNzZXMgaWYgdGhlIG1vY2sgaGFzICpldmVyKiBiZWVuIGNhbGxlZCwgdW5saWtlCiAgICAgICAgYGFzc2VydF9jYWxsZWRfd2l0aGAgYW5kIGBhc3NlcnRfY2FsbGVkX29uY2Vfd2l0aGAgdGhhdCBvbmx5IHBhc3MgaWYKICAgICAgICB0aGUgY2FsbCBpcyB0aGUgbW9zdCByZWNlbnQgb25lLiIiIgogICAgICAgIGthbGwgPSBjYWxsKCphcmdzLCAqKmt3YXJncykKICAgICAgICBpZiBrYWxsIG5vdCBpbiBzZWxmLmNhbGxfYXJnc19saXN0OgogICAgICAgICAgICBleHBlY3RlZF9zdHJpbmcgPSBzZWxmLl9mb3JtYXRfbW9ja19jYWxsX3NpZ25hdHVyZShhcmdzLCBrd2FyZ3MpCiAgICAgICAgICAgIHJhaXNlIEFzc2VydGlvbkVycm9yKAogICAgICAgICAgICAgICAgJyVzIGNhbGwgbm90IGZvdW5kJyAlIGV4cGVjdGVkX3N0cmluZwogICAgICAgICAgICApCgoKICAgIGRlZiBfZ2V0X2NoaWxkX21vY2soc2VsZiwgKiprdyk6CiAgICAgICAgIiIiQ3JlYXRlIHRoZSBjaGlsZCBtb2NrcyBmb3IgYXR0cmlidXRlcyBhbmQgcmV0dXJuIHZhbHVlLgogICAgICAgIEJ5IGRlZmF1bHQgY2hpbGQgbW9ja3Mgd2lsbCBiZSB0aGUgc2FtZSB0eXBlIGFzIHRoZSBwYXJlbnQuCiAgICAgICAgU3ViY2xhc3NlcyBvZiBNb2NrIG1heSB3YW50IHRvIG92ZXJyaWRlIHRoaXMgdG8gY3VzdG9taXplIHRoZSB3YXkKICAgICAgICBjaGlsZCBtb2NrcyBhcmUgbWFkZS4KCiAgICAgICAgRm9yIG5vbi1jYWxsYWJsZSBtb2NrcyB0aGUgY2FsbGFibGUgdmFyaWFudCB3aWxsIGJlIHVzZWQgKHJhdGhlciB0aGFuCiAgICAgICAgYW55IGN1c3RvbSBzdWJjbGFzcykuIiIiCiAgICAgICAgX3R5cGUgPSB0eXBlKHNlbGYpCiAgICAgICAgaWYgbm90IGlzc3ViY2xhc3MoX3R5cGUsIENhbGxhYmxlTWl4aW4pOgogICAgICAgICAgICBpZiBpc3N1YmNsYXNzKF90eXBlLCBOb25DYWxsYWJsZU1hZ2ljTW9jayk6CiAgICAgICAgICAgICAgICBrbGFzcyA9IE1hZ2ljTW9jawogICAgICAgICAgICBlbGlmIGlzc3ViY2xhc3MoX3R5cGUsIE5vbkNhbGxhYmxlTW9jaykgOgogICAgICAgICAgICAgICAga2xhc3MgPSBNb2NrCiAgICAgICAgZWxzZToKICAgICAgICAgICAga2xhc3MgPSBfdHlwZS5fX21yb19fWzFdCiAgICAgICAgcmV0dXJuIGtsYXNzKCoqa3cpCgoKCmRlZiBfdHJ5X2l0ZXIob2JqKToKICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgIHJldHVybiBvYmoKICAgIGlmIF9pc19leGNlcHRpb24ob2JqKToKICAgICAgICByZXR1cm4gb2JqCiAgICBpZiBfY2FsbGFibGUob2JqKToKICAgICAgICByZXR1cm4gb2JqCiAgICB0cnk6CiAgICAgICAgcmV0dXJuIGl0ZXIob2JqKQogICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAjIFhYWFggYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKICAgICAgICAjIGJ1dCB0aGlzIHdpbGwgYmxvdyB1cCBvbiBmaXJzdCBjYWxsIC0gc28gbWF5YmUgd2Ugc2hvdWxkIGZhaWwgZWFybHk/CiAgICAgICAgcmV0dXJuIG9iagoKCgpjbGFzcyBDYWxsYWJsZU1peGluKEJhc2UpOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzcGVjPU5vbmUsIHNpZGVfZWZmZWN0PU5vbmUsIHJldHVybl92YWx1ZT1ERUZBVUxULAogICAgICAgICAgICAgICAgIHdyYXBzPU5vbmUsIG5hbWU9Tm9uZSwgc3BlY19zZXQ9Tm9uZSwgcGFyZW50PU5vbmUsCiAgICAgICAgICAgICAgICAgX3NwZWNfc3RhdGU9Tm9uZSwgX25ld19uYW1lPScnLCBfbmV3X3BhcmVudD1Ob25lLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZi5fX2RpY3RfX1snX21vY2tfcmV0dXJuX3ZhbHVlJ10gPSByZXR1cm5fdmFsdWUKCiAgICAgICAgX3NhZmVfc3VwZXIoQ2FsbGFibGVNaXhpbiwgc2VsZikuX19pbml0X18oCiAgICAgICAgICAgIHNwZWMsIHdyYXBzLCBuYW1lLCBzcGVjX3NldCwgcGFyZW50LAogICAgICAgICAgICBfc3BlY19zdGF0ZSwgX25ld19uYW1lLCBfbmV3X3BhcmVudCwgKiprd2FyZ3MKICAgICAgICApCgogICAgICAgIHNlbGYuc2lkZV9lZmZlY3QgPSBzaWRlX2VmZmVjdAoKCiAgICBkZWYgX21vY2tfY2hlY2tfc2lnKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIyBzdHViIG1ldGhvZCB0aGF0IGNhbiBiZSByZXBsYWNlZCB3aXRoIG9uZSB3aXRoIGEgc3BlY2lmaWMgc2lnbmF0dXJlCiAgICAgICAgcGFzcwoKCiAgICBkZWYgX19jYWxsX18oX21vY2tfc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAjIGNhbid0IHVzZSBzZWxmIGluLWNhc2UgYSBmdW5jdGlvbiAvIG1ldGhvZCB3ZSBhcmUgbW9ja2luZyB1c2VzIHNlbGYKICAgICAgICAjIGluIHRoZSBzaWduYXR1cmUKICAgICAgICBfbW9ja19zZWxmLl9tb2NrX2NoZWNrX3NpZygqYXJncywgKiprd2FyZ3MpCiAgICAgICAgcmV0dXJuIF9tb2NrX3NlbGYuX21vY2tfY2FsbCgqYXJncywgKiprd2FyZ3MpCgoKICAgIGRlZiBfbW9ja19jYWxsKF9tb2NrX3NlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgc2VsZiA9IF9tb2NrX3NlbGYKICAgICAgICBzZWxmLmNhbGxlZCA9IFRydWUKICAgICAgICBzZWxmLmNhbGxfY291bnQgKz0gMQogICAgICAgIHNlbGYuY2FsbF9hcmdzID0gX0NhbGwoKGFyZ3MsIGt3YXJncyksIHR3bz1UcnVlKQogICAgICAgIHNlbGYuY2FsbF9hcmdzX2xpc3QuYXBwZW5kKF9DYWxsKChhcmdzLCBrd2FyZ3MpLCB0d289VHJ1ZSkpCgogICAgICAgIF9uZXdfbmFtZSA9IHNlbGYuX21vY2tfbmV3X25hbWUKICAgICAgICBfbmV3X3BhcmVudCA9IHNlbGYuX21vY2tfbmV3X3BhcmVudAogICAgICAgIHNlbGYubW9ja19jYWxscy5hcHBlbmQoX0NhbGwoKCcnLCBhcmdzLCBrd2FyZ3MpKSkKCiAgICAgICAgc2VlbiA9IHNldCgpCiAgICAgICAgc2tpcF9uZXh0X2RvdCA9IF9uZXdfbmFtZSA9PSAnKCknCiAgICAgICAgZG9fbWV0aG9kX2NhbGxzID0gc2VsZi5fbW9ja19wYXJlbnQgaXMgbm90IE5vbmUKICAgICAgICBuYW1lID0gc2VsZi5fbW9ja19uYW1lCiAgICAgICAgd2hpbGUgX25ld19wYXJlbnQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHRoaXNfbW9ja19jYWxsID0gX0NhbGwoKF9uZXdfbmFtZSwgYXJncywga3dhcmdzKSkKICAgICAgICAgICAgaWYgX25ld19wYXJlbnQuX21vY2tfbmV3X25hbWU6CiAgICAgICAgICAgICAgICBkb3QgPSAnLicKICAgICAgICAgICAgICAgIGlmIHNraXBfbmV4dF9kb3Q6CiAgICAgICAgICAgICAgICAgICAgZG90ID0gJycKCiAgICAgICAgICAgICAgICBza2lwX25leHRfZG90ID0gRmFsc2UKICAgICAgICAgICAgICAgIGlmIF9uZXdfcGFyZW50Ll9tb2NrX25ld19uYW1lID09ICcoKSc6CiAgICAgICAgICAgICAgICAgICAgc2tpcF9uZXh0X2RvdCA9IFRydWUKCiAgICAgICAgICAgICAgICBfbmV3X25hbWUgPSBfbmV3X3BhcmVudC5fbW9ja19uZXdfbmFtZSArIGRvdCArIF9uZXdfbmFtZQoKICAgICAgICAgICAgaWYgZG9fbWV0aG9kX2NhbGxzOgogICAgICAgICAgICAgICAgaWYgX25ld19uYW1lID09IG5hbWU6CiAgICAgICAgICAgICAgICAgICAgdGhpc19tZXRob2RfY2FsbCA9IHRoaXNfbW9ja19jYWxsCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHRoaXNfbWV0aG9kX2NhbGwgPSBfQ2FsbCgobmFtZSwgYXJncywga3dhcmdzKSkKICAgICAgICAgICAgICAgIF9uZXdfcGFyZW50Lm1ldGhvZF9jYWxscy5hcHBlbmQodGhpc19tZXRob2RfY2FsbCkKCiAgICAgICAgICAgICAgICBkb19tZXRob2RfY2FsbHMgPSBfbmV3X3BhcmVudC5fbW9ja19wYXJlbnQgaXMgbm90IE5vbmUKICAgICAgICAgICAgICAgIGlmIGRvX21ldGhvZF9jYWxsczoKICAgICAgICAgICAgICAgICAgICBuYW1lID0gX25ld19wYXJlbnQuX21vY2tfbmFtZSArICcuJyArIG5hbWUKCiAgICAgICAgICAgIF9uZXdfcGFyZW50Lm1vY2tfY2FsbHMuYXBwZW5kKHRoaXNfbW9ja19jYWxsKQogICAgICAgICAgICBfbmV3X3BhcmVudCA9IF9uZXdfcGFyZW50Ll9tb2NrX25ld19wYXJlbnQKCiAgICAgICAgICAgICMgdXNlIGlkcyBoZXJlIHNvIGFzIG5vdCB0byBjYWxsIF9faGFzaF9fIG9uIHRoZSBtb2NrcwogICAgICAgICAgICBfbmV3X3BhcmVudF9pZCA9IGlkKF9uZXdfcGFyZW50KQogICAgICAgICAgICBpZiBfbmV3X3BhcmVudF9pZCBpbiBzZWVuOgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgc2Vlbi5hZGQoX25ld19wYXJlbnRfaWQpCgogICAgICAgIHJldF92YWwgPSBERUZBVUxUCiAgICAgICAgZWZmZWN0ID0gc2VsZi5zaWRlX2VmZmVjdAogICAgICAgIGlmIGVmZmVjdCBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgX2lzX2V4Y2VwdGlvbihlZmZlY3QpOgogICAgICAgICAgICAgICAgcmFpc2UgZWZmZWN0CgogICAgICAgICAgICBpZiBub3QgX2NhbGxhYmxlKGVmZmVjdCk6CiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXh0KGVmZmVjdCkKICAgICAgICAgICAgICAgIGlmIF9pc19leGNlcHRpb24ocmVzdWx0KToKICAgICAgICAgICAgICAgICAgICByYWlzZSByZXN1bHQKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKCiAgICAgICAgICAgIHJldF92YWwgPSBlZmZlY3QoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgICAgICBpZiByZXRfdmFsIGlzIERFRkFVTFQ6CiAgICAgICAgICAgICAgICByZXRfdmFsID0gc2VsZi5yZXR1cm5fdmFsdWUKCiAgICAgICAgaWYgKHNlbGYuX21vY2tfd3JhcHMgaXMgbm90IE5vbmUgYW5kCiAgICAgICAgICAgICBzZWxmLl9tb2NrX3JldHVybl92YWx1ZSBpcyBERUZBVUxUKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21vY2tfd3JhcHMoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgIGlmIHJldF92YWwgaXMgREVGQVVMVDoKICAgICAgICAgICAgcmV0X3ZhbCA9IHNlbGYucmV0dXJuX3ZhbHVlCiAgICAgICAgcmV0dXJuIHJldF92YWwKCgoKY2xhc3MgTW9jayhDYWxsYWJsZU1peGluLCBOb25DYWxsYWJsZU1vY2spOgogICAgIiIiCiAgICBDcmVhdGUgYSBuZXcgYE1vY2tgIG9iamVjdC4gYE1vY2tgIHRha2VzIHNldmVyYWwgb3B0aW9uYWwgYXJndW1lbnRzCiAgICB0aGF0IHNwZWNpZnkgdGhlIGJlaGF2aW91ciBvZiB0aGUgTW9jayBvYmplY3Q6CgogICAgKiBgc3BlY2A6IFRoaXMgY2FuIGJlIGVpdGhlciBhIGxpc3Qgb2Ygc3RyaW5ncyBvciBhbiBleGlzdGluZyBvYmplY3QgKGEKICAgICAgY2xhc3Mgb3IgaW5zdGFuY2UpIHRoYXQgYWN0cyBhcyB0aGUgc3BlY2lmaWNhdGlvbiBmb3IgdGhlIG1vY2sgb2JqZWN0LiBJZgogICAgICB5b3UgcGFzcyBpbiBhbiBvYmplY3QgdGhlbiBhIGxpc3Qgb2Ygc3RyaW5ncyBpcyBmb3JtZWQgYnkgY2FsbGluZyBkaXIgb24KICAgICAgdGhlIG9iamVjdCAoZXhjbHVkaW5nIHVuc3VwcG9ydGVkIG1hZ2ljIGF0dHJpYnV0ZXMgYW5kIG1ldGhvZHMpLiBBY2Nlc3NpbmcKICAgICAgYW55IGF0dHJpYnV0ZSBub3QgaW4gdGhpcyBsaXN0IHdpbGwgcmFpc2UgYW4gYEF0dHJpYnV0ZUVycm9yYC4KCiAgICAgIElmIGBzcGVjYCBpcyBhbiBvYmplY3QgKHJhdGhlciB0aGFuIGEgbGlzdCBvZiBzdHJpbmdzKSB0aGVuCiAgICAgIGBtb2NrLl9fY2xhc3NfX2AgcmV0dXJucyB0aGUgY2xhc3Mgb2YgdGhlIHNwZWMgb2JqZWN0LiBUaGlzIGFsbG93cyBtb2NrcwogICAgICB0byBwYXNzIGBpc2luc3RhbmNlYCB0ZXN0cy4KCiAgICAqIGBzcGVjX3NldGA6IEEgc3RyaWN0ZXIgdmFyaWFudCBvZiBgc3BlY2AuIElmIHVzZWQsIGF0dGVtcHRpbmcgdG8gKnNldCoKICAgICAgb3IgZ2V0IGFuIGF0dHJpYnV0ZSBvbiB0aGUgbW9jayB0aGF0IGlzbid0IG9uIHRoZSBvYmplY3QgcGFzc2VkIGFzCiAgICAgIGBzcGVjX3NldGAgd2lsbCByYWlzZSBhbiBgQXR0cmlidXRlRXJyb3JgLgoKICAgICogYHNpZGVfZWZmZWN0YDogQSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbmV2ZXIgdGhlIE1vY2sgaXMgY2FsbGVkLiBTZWUKICAgICAgdGhlIGBzaWRlX2VmZmVjdGAgYXR0cmlidXRlLiBVc2VmdWwgZm9yIHJhaXNpbmcgZXhjZXB0aW9ucyBvcgogICAgICBkeW5hbWljYWxseSBjaGFuZ2luZyByZXR1cm4gdmFsdWVzLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIHNhbWUKICAgICAgYXJndW1lbnRzIGFzIHRoZSBtb2NrLCBhbmQgdW5sZXNzIGl0IHJldHVybnMgYERFRkFVTFRgLCB0aGUgcmV0dXJuCiAgICAgIHZhbHVlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgcmV0dXJuIHZhbHVlLgoKICAgICAgSWYgYHNpZGVfZWZmZWN0YCBpcyBhbiBpdGVyYWJsZSB0aGVuIGVhY2ggY2FsbCB0byB0aGUgbW9jayB3aWxsIHJldHVybgogICAgICB0aGUgbmV4dCB2YWx1ZSBmcm9tIHRoZSBpdGVyYWJsZS4gSWYgYW55IG9mIHRoZSBtZW1iZXJzIG9mIHRoZSBpdGVyYWJsZQogICAgICBhcmUgZXhjZXB0aW9ucyB0aGV5IHdpbGwgYmUgcmFpc2VkIGluc3RlYWQgb2YgcmV0dXJuZWQuCgogICAgICBJZiBgc2lkZV9lZmZlY3RgIGlzIGFuIGl0ZXJhYmxlIHRoZW4gZWFjaCBjYWxsIHRvIHRoZSBtb2NrIHdpbGwgcmV0dXJuCiAgICAgIHRoZSBuZXh0IHZhbHVlIGZyb20gdGhlIGl0ZXJhYmxlLgoKICAgICogYHJldHVybl92YWx1ZWA6IFRoZSB2YWx1ZSByZXR1cm5lZCB3aGVuIHRoZSBtb2NrIGlzIGNhbGxlZC4gQnkgZGVmYXVsdAogICAgICB0aGlzIGlzIGEgbmV3IE1vY2sgKGNyZWF0ZWQgb24gZmlyc3QgYWNjZXNzKS4gU2VlIHRoZQogICAgICBgcmV0dXJuX3ZhbHVlYCBhdHRyaWJ1dGUuCgogICAgKiBgd3JhcHNgOiBJdGVtIGZvciB0aGUgbW9jayBvYmplY3QgdG8gd3JhcC4gSWYgYHdyYXBzYCBpcyBub3QgTm9uZSB0aGVuCiAgICAgIGNhbGxpbmcgdGhlIE1vY2sgd2lsbCBwYXNzIHRoZSBjYWxsIHRocm91Z2ggdG8gdGhlIHdyYXBwZWQgb2JqZWN0CiAgICAgIChyZXR1cm5pbmcgdGhlIHJlYWwgcmVzdWx0KS4gQXR0cmlidXRlIGFjY2VzcyBvbiB0aGUgbW9jayB3aWxsIHJldHVybiBhCiAgICAgIE1vY2sgb2JqZWN0IHRoYXQgd3JhcHMgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9mIHRoZSB3cmFwcGVkIG9iamVjdAogICAgICAoc28gYXR0ZW1wdGluZyB0byBhY2Nlc3MgYW4gYXR0cmlidXRlIHRoYXQgZG9lc24ndCBleGlzdCB3aWxsIHJhaXNlIGFuCiAgICAgIGBBdHRyaWJ1dGVFcnJvcmApLgoKICAgICAgSWYgdGhlIG1vY2sgaGFzIGFuIGV4cGxpY2l0IGByZXR1cm5fdmFsdWVgIHNldCB0aGVuIGNhbGxzIGFyZSBub3QgcGFzc2VkCiAgICAgIHRvIHRoZSB3cmFwcGVkIG9iamVjdCBhbmQgdGhlIGByZXR1cm5fdmFsdWVgIGlzIHJldHVybmVkIGluc3RlYWQuCgogICAgKiBgbmFtZWA6IElmIHRoZSBtb2NrIGhhcyBhIG5hbWUgdGhlbiBpdCB3aWxsIGJlIHVzZWQgaW4gdGhlIHJlcHIgb2YgdGhlCiAgICAgIG1vY2suIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgZGVidWdnaW5nLiBUaGUgbmFtZSBpcyBwcm9wYWdhdGVkIHRvIGNoaWxkCiAgICAgIG1vY2tzLgoKICAgIE1vY2tzIGNhbiBhbHNvIGJlIGNhbGxlZCB3aXRoIGFyYml0cmFyeSBrZXl3b3JkIGFyZ3VtZW50cy4gVGhlc2Ugd2lsbCBiZQogICAgdXNlZCB0byBzZXQgYXR0cmlidXRlcyBvbiB0aGUgbW9jayBhZnRlciBpdCBpcyBjcmVhdGVkLgogICAgIiIiCgoKCmRlZiBfZG90X2xvb2t1cCh0aGluZywgY29tcCwgaW1wb3J0X3BhdGgpOgogICAgdHJ5OgogICAgICAgIHJldHVybiBnZXRhdHRyKHRoaW5nLCBjb21wKQogICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgIF9faW1wb3J0X18oaW1wb3J0X3BhdGgpCiAgICAgICAgcmV0dXJuIGdldGF0dHIodGhpbmcsIGNvbXApCgoKZGVmIF9pbXBvcnRlcih0YXJnZXQpOgogICAgY29tcG9uZW50cyA9IHRhcmdldC5zcGxpdCgnLicpCiAgICBpbXBvcnRfcGF0aCA9IGNvbXBvbmVudHMucG9wKDApCiAgICB0aGluZyA9IF9faW1wb3J0X18oaW1wb3J0X3BhdGgpCgogICAgZm9yIGNvbXAgaW4gY29tcG9uZW50czoKICAgICAgICBpbXBvcnRfcGF0aCArPSAiLiVzIiAlIGNvbXAKICAgICAgICB0aGluZyA9IF9kb3RfbG9va3VwKHRoaW5nLCBjb21wLCBpbXBvcnRfcGF0aCkKICAgIHJldHVybiB0aGluZwoKCmRlZiBfaXNfc3RhcnRlZChwYXRjaGVyKToKICAgICMgWFhYWCBob3JyaWJsZQogICAgcmV0dXJuIGhhc2F0dHIocGF0Y2hlciwgJ2lzX2xvY2FsJykKCgpjbGFzcyBfcGF0Y2gob2JqZWN0KToKCiAgICBhdHRyaWJ1dGVfbmFtZSA9IE5vbmUKICAgIF9hY3RpdmVfcGF0Y2hlcyA9IHNldCgpCgogICAgZGVmIF9faW5pdF9fKAogICAgICAgICAgICBzZWxmLCBnZXR0ZXIsIGF0dHJpYnV0ZSwgbmV3LCBzcGVjLCBjcmVhdGUsCiAgICAgICAgICAgIHNwZWNfc2V0LCBhdXRvc3BlYywgbmV3X2NhbGxhYmxlLCBrd2FyZ3MKICAgICAgICApOgogICAgICAgIGlmIG5ld19jYWxsYWJsZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgbmV3IGlzIG5vdCBERUZBVUxUOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgICAgICAgICAiQ2Fubm90IHVzZSAnbmV3JyBhbmQgJ25ld19jYWxsYWJsZScgdG9nZXRoZXIiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIGlmIGF1dG9zcGVjIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigKICAgICAgICAgICAgICAgICAgICAiQ2Fubm90IHVzZSAnYXV0b3NwZWMnIGFuZCAnbmV3X2NhbGxhYmxlJyB0b2dldGhlciIKICAgICAgICAgICAgICAgICkKCiAgICAgICAgc2VsZi5nZXR0ZXIgPSBnZXR0ZXIKICAgICAgICBzZWxmLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZQogICAgICAgIHNlbGYubmV3ID0gbmV3CiAgICAgICAgc2VsZi5uZXdfY2FsbGFibGUgPSBuZXdfY2FsbGFibGUKICAgICAgICBzZWxmLnNwZWMgPSBzcGVjCiAgICAgICAgc2VsZi5jcmVhdGUgPSBjcmVhdGUKICAgICAgICBzZWxmLmhhc19sb2NhbCA9IEZhbHNlCiAgICAgICAgc2VsZi5zcGVjX3NldCA9IHNwZWNfc2V0CiAgICAgICAgc2VsZi5hdXRvc3BlYyA9IGF1dG9zcGVjCiAgICAgICAgc2VsZi5rd2FyZ3MgPSBrd2FyZ3MKICAgICAgICBzZWxmLmFkZGl0aW9uYWxfcGF0Y2hlcnMgPSBbXQoKCiAgICBkZWYgY29weShzZWxmKToKICAgICAgICBwYXRjaGVyID0gX3BhdGNoKAogICAgICAgICAgICBzZWxmLmdldHRlciwgc2VsZi5hdHRyaWJ1dGUsIHNlbGYubmV3LCBzZWxmLnNwZWMsCiAgICAgICAgICAgIHNlbGYuY3JlYXRlLCBzZWxmLnNwZWNfc2V0LAogICAgICAgICAgICBzZWxmLmF1dG9zcGVjLCBzZWxmLm5ld19jYWxsYWJsZSwgc2VsZi5rd2FyZ3MKICAgICAgICApCiAgICAgICAgcGF0Y2hlci5hdHRyaWJ1dGVfbmFtZSA9IHNlbGYuYXR0cmlidXRlX25hbWUKICAgICAgICBwYXRjaGVyLmFkZGl0aW9uYWxfcGF0Y2hlcnMgPSBbCiAgICAgICAgICAgIHAuY29weSgpIGZvciBwIGluIHNlbGYuYWRkaXRpb25hbF9wYXRjaGVycwogICAgICAgIF0KICAgICAgICByZXR1cm4gcGF0Y2hlcgoKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgZnVuYyk6CiAgICAgICAgaWYgaXNpbnN0YW5jZShmdW5jLCB0eXBlKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuZGVjb3JhdGVfY2xhc3MoZnVuYykKICAgICAgICByZXR1cm4gc2VsZi5kZWNvcmF0ZV9jYWxsYWJsZShmdW5jKQoKCiAgICBkZWYgZGVjb3JhdGVfY2xhc3Moc2VsZiwga2xhc3MpOgogICAgICAgIGZvciBhdHRyIGluIGRpcihrbGFzcyk6CiAgICAgICAgICAgIGlmIG5vdCBhdHRyLnN0YXJ0c3dpdGgocGF0Y2guVEVTVF9QUkVGSVgpOgogICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgIGF0dHJfdmFsdWUgPSBnZXRhdHRyKGtsYXNzLCBhdHRyKQogICAgICAgICAgICBpZiBub3QgaGFzYXR0cihhdHRyX3ZhbHVlLCAiX19jYWxsX18iKToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICBwYXRjaGVyID0gc2VsZi5jb3B5KCkKICAgICAgICAgICAgc2V0YXR0cihrbGFzcywgYXR0ciwgcGF0Y2hlcihhdHRyX3ZhbHVlKSkKICAgICAgICByZXR1cm4ga2xhc3MKCgogICAgZGVmIGRlY29yYXRlX2NhbGxhYmxlKHNlbGYsIGZ1bmMpOgogICAgICAgIGlmIGhhc2F0dHIoZnVuYywgJ3BhdGNoaW5ncycpOgogICAgICAgICAgICBmdW5jLnBhdGNoaW5ncy5hcHBlbmQoc2VsZikKICAgICAgICAgICAgcmV0dXJuIGZ1bmMKCiAgICAgICAgQHdyYXBzKGZ1bmMpCiAgICAgICAgZGVmIHBhdGNoZWQoKmFyZ3MsICoqa2V5d2FyZ3MpOgogICAgICAgICAgICBleHRyYV9hcmdzID0gW10KICAgICAgICAgICAgZW50ZXJlZF9wYXRjaGVycyA9IFtdCgogICAgICAgICAgICBleGNfaW5mbyA9IHR1cGxlKCkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZm9yIHBhdGNoaW5nIGluIHBhdGNoZWQucGF0Y2hpbmdzOgogICAgICAgICAgICAgICAgICAgIGFyZyA9IHBhdGNoaW5nLl9fZW50ZXJfXygpCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZF9wYXRjaGVycy5hcHBlbmQocGF0Y2hpbmcpCiAgICAgICAgICAgICAgICAgICAgaWYgcGF0Y2hpbmcuYXR0cmlidXRlX25hbWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIGtleXdhcmdzLnVwZGF0ZShhcmcpCiAgICAgICAgICAgICAgICAgICAgZWxpZiBwYXRjaGluZy5uZXcgaXMgREVGQVVMVDoKICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFfYXJncy5hcHBlbmQoYXJnKQoKICAgICAgICAgICAgICAgIGFyZ3MgKz0gdHVwbGUoZXh0cmFfYXJncykKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKCphcmdzLCAqKmtleXdhcmdzKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBpZiAocGF0Y2hpbmcgbm90IGluIGVudGVyZWRfcGF0Y2hlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgX2lzX3N0YXJ0ZWQocGF0Y2hpbmcpKToKICAgICAgICAgICAgICAgICAgICAjIHRoZSBwYXRjaGVyIG1heSBoYXZlIGJlZW4gc3RhcnRlZCwgYnV0IGFuIGV4Y2VwdGlvbgogICAgICAgICAgICAgICAgICAgICMgcmFpc2VkIHdoaWxzdCBlbnRlcmluZyBvbmUgb2YgaXRzIGFkZGl0aW9uYWxfcGF0Y2hlcnMKICAgICAgICAgICAgICAgICAgICBlbnRlcmVkX3BhdGNoZXJzLmFwcGVuZChwYXRjaGluZykKICAgICAgICAgICAgICAgICMgUGFzcyB0aGUgZXhjZXB0aW9uIHRvIF9fZXhpdF9fCiAgICAgICAgICAgICAgICBleGNfaW5mbyA9IHN5cy5leGNfaW5mbygpCiAgICAgICAgICAgICAgICAjIHJlLXJhaXNlIHRoZSBleGNlcHRpb24KICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgICAgICBmb3IgcGF0Y2hpbmcgaW4gcmV2ZXJzZWQoZW50ZXJlZF9wYXRjaGVycyk6CiAgICAgICAgICAgICAgICAgICAgcGF0Y2hpbmcuX19leGl0X18oKmV4Y19pbmZvKQoKICAgICAgICBwYXRjaGVkLnBhdGNoaW5ncyA9IFtzZWxmXQogICAgICAgIHJldHVybiBwYXRjaGVkCgoKICAgIGRlZiBnZXRfb3JpZ2luYWwoc2VsZik6CiAgICAgICAgdGFyZ2V0ID0gc2VsZi5nZXR0ZXIoKQogICAgICAgIG5hbWUgPSBzZWxmLmF0dHJpYnV0ZQoKICAgICAgICBvcmlnaW5hbCA9IERFRkFVTFQKICAgICAgICBsb2NhbCA9IEZhbHNlCgogICAgICAgIHRyeToKICAgICAgICAgICAgb3JpZ2luYWwgPSB0YXJnZXQuX19kaWN0X19bbmFtZV0KICAgICAgICBleGNlcHQgKEF0dHJpYnV0ZUVycm9yLCBLZXlFcnJvcik6CiAgICAgICAgICAgIG9yaWdpbmFsID0gZ2V0YXR0cih0YXJnZXQsIG5hbWUsIERFRkFVTFQpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbG9jYWwgPSBUcnVlCgogICAgICAgIGlmIG5vdCBzZWxmLmNyZWF0ZSBhbmQgb3JpZ2luYWwgaXMgREVGQVVMVDoKICAgICAgICAgICAgcmFpc2UgQXR0cmlidXRlRXJyb3IoCiAgICAgICAgICAgICAgICAiJXMgZG9lcyBub3QgaGF2ZSB0aGUgYXR0cmlidXRlICVyIiAlICh0YXJnZXQsIG5hbWUpCiAgICAgICAgICAgICkKICAgICAgICByZXR1cm4gb3JpZ2luYWwsIGxvY2FsCgoKICAgIGRlZiBfX2VudGVyX18oc2VsZik6CiAgICAgICAgIiIiUGVyZm9ybSB0aGUgcGF0Y2guIiIiCiAgICAgICAgbmV3LCBzcGVjLCBzcGVjX3NldCA9IHNlbGYubmV3LCBzZWxmLnNwZWMsIHNlbGYuc3BlY19zZXQKICAgICAgICBhdXRvc3BlYywga3dhcmdzID0gc2VsZi5hdXRvc3BlYywgc2VsZi5rd2FyZ3MKICAgICAgICBuZXdfY2FsbGFibGUgPSBzZWxmLm5ld19jYWxsYWJsZQogICAgICAgIHNlbGYudGFyZ2V0ID0gc2VsZi5nZXR0ZXIoKQoKICAgICAgICAjIG5vcm1hbGlzZSBGYWxzZSB0byBOb25lCiAgICAgICAgaWYgc3BlYyBpcyBGYWxzZToKICAgICAgICAgICAgc3BlYyA9IE5vbmUKICAgICAgICBpZiBzcGVjX3NldCBpcyBGYWxzZToKICAgICAgICAgICAgc3BlY19zZXQgPSBOb25lCiAgICAgICAgaWYgYXV0b3NwZWMgaXMgRmFsc2U6CiAgICAgICAgICAgIGF1dG9zcGVjID0gTm9uZQoKICAgICAgICBpZiBzcGVjIGlzIG5vdCBOb25lIGFuZCBhdXRvc3BlYyBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJDYW4ndCBzcGVjaWZ5IHNwZWMgYW5kIGF1dG9zcGVjIikKICAgICAgICBpZiAoKHNwZWMgaXMgbm90IE5vbmUgb3IgYXV0b3NwZWMgaXMgbm90IE5vbmUpIGFuZAogICAgICAgICAgICBzcGVjX3NldCBub3QgaW4gKFRydWUsIE5vbmUpKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJDYW4ndCBwcm92aWRlIGV4cGxpY2l0IHNwZWNfc2V0ICphbmQqIHNwZWMgb3IgYXV0b3NwZWMiKQoKICAgICAgICBvcmlnaW5hbCwgbG9jYWwgPSBzZWxmLmdldF9vcmlnaW5hbCgpCgogICAgICAgIGlmIG5ldyBpcyBERUZBVUxUIGFuZCBhdXRvc3BlYyBpcyBOb25lOgogICAgICAgICAgICBpbmhlcml0ID0gRmFsc2UKICAgICAgICAgICAgaWYgc3BlYyBpcyBUcnVlOgogICAgICAgICAgICAgICAgIyBzZXQgc3BlYyB0byB0aGUgb2JqZWN0IHdlIGFyZSByZXBsYWNpbmcKICAgICAgICAgICAgICAgIHNwZWMgPSBvcmlnaW5hbAogICAgICAgICAgICAgICAgaWYgc3BlY19zZXQgaXMgVHJ1ZToKICAgICAgICAgICAgICAgICAgICBzcGVjX3NldCA9IG9yaWdpbmFsCiAgICAgICAgICAgICAgICAgICAgc3BlYyA9IE5vbmUKICAgICAgICAgICAgZWxpZiBzcGVjIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgc3BlY19zZXQgaXMgVHJ1ZToKICAgICAgICAgICAgICAgICAgICBzcGVjX3NldCA9IHNwZWMKICAgICAgICAgICAgICAgICAgICBzcGVjID0gTm9uZQogICAgICAgICAgICBlbGlmIHNwZWNfc2V0IGlzIFRydWU6CiAgICAgICAgICAgICAgICBzcGVjX3NldCA9IG9yaWdpbmFsCgogICAgICAgICAgICBpZiBzcGVjIGlzIG5vdCBOb25lIG9yIHNwZWNfc2V0IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgb3JpZ2luYWwgaXMgREVGQVVMVDoKICAgICAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIkNhbid0IHVzZSAnc3BlYycgd2l0aCBjcmVhdGU9VHJ1ZSIpCiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKG9yaWdpbmFsLCB0eXBlKToKICAgICAgICAgICAgICAgICAgICAjIElmIHdlJ3JlIHBhdGNoaW5nIG91dCBhIGNsYXNzIGFuZCB0aGVyZSBpcyBhIHNwZWMKICAgICAgICAgICAgICAgICAgICBpbmhlcml0ID0gVHJ1ZQoKICAgICAgICAgICAgS2xhc3MgPSBNYWdpY01vY2sKICAgICAgICAgICAgX2t3YXJncyA9IHt9CiAgICAgICAgICAgIGlmIG5ld19jYWxsYWJsZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIEtsYXNzID0gbmV3X2NhbGxhYmxlCiAgICAgICAgICAgIGVsaWYgc3BlYyBpcyBub3QgTm9uZSBvciBzcGVjX3NldCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHRoaXNfc3BlYyA9IHNwZWMKICAgICAgICAgICAgICAgIGlmIHNwZWNfc2V0IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHRoaXNfc3BlYyA9IHNwZWNfc2V0CiAgICAgICAgICAgICAgICBpZiBfaXNfbGlzdCh0aGlzX3NwZWMpOgogICAgICAgICAgICAgICAgICAgIG5vdF9jYWxsYWJsZSA9ICdfX2NhbGxfXycgbm90IGluIHRoaXNfc3BlYwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBub3RfY2FsbGFibGUgPSBub3QgY2FsbGFibGUodGhpc19zcGVjKQogICAgICAgICAgICAgICAgaWYgbm90X2NhbGxhYmxlOgogICAgICAgICAgICAgICAgICAgIEtsYXNzID0gTm9uQ2FsbGFibGVNYWdpY01vY2sKCiAgICAgICAgICAgIGlmIHNwZWMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBfa3dhcmdzWydzcGVjJ10gPSBzcGVjCiAgICAgICAgICAgIGlmIHNwZWNfc2V0IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgX2t3YXJnc1snc3BlY19zZXQnXSA9IHNwZWNfc2V0CgogICAgICAgICAgICAjIGFkZCBhIG5hbWUgdG8gbW9ja3MKICAgICAgICAgICAgaWYgKGlzaW5zdGFuY2UoS2xhc3MsIHR5cGUpIGFuZAogICAgICAgICAgICAgICAgaXNzdWJjbGFzcyhLbGFzcywgTm9uQ2FsbGFibGVNb2NrKSBhbmQgc2VsZi5hdHRyaWJ1dGUpOgogICAgICAgICAgICAgICAgX2t3YXJnc1snbmFtZSddID0gc2VsZi5hdHRyaWJ1dGUKCiAgICAgICAgICAgIF9rd2FyZ3MudXBkYXRlKGt3YXJncykKICAgICAgICAgICAgbmV3ID0gS2xhc3MoKipfa3dhcmdzKQoKICAgICAgICAgICAgaWYgaW5oZXJpdCBhbmQgX2lzX2luc3RhbmNlX21vY2sobmV3KToKICAgICAgICAgICAgICAgICMgd2UgY2FuIG9ubHkgdGVsbCBpZiB0aGUgaW5zdGFuY2Ugc2hvdWxkIGJlIGNhbGxhYmxlIGlmIHRoZQogICAgICAgICAgICAgICAgIyBzcGVjIGlzIG5vdCBhIGxpc3QKICAgICAgICAgICAgICAgIHRoaXNfc3BlYyA9IHNwZWMKICAgICAgICAgICAgICAgIGlmIHNwZWNfc2V0IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHRoaXNfc3BlYyA9IHNwZWNfc2V0CiAgICAgICAgICAgICAgICBpZiAobm90IF9pc19saXN0KHRoaXNfc3BlYykgYW5kIG5vdAogICAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZV9jYWxsYWJsZSh0aGlzX3NwZWMpKToKICAgICAgICAgICAgICAgICAgICBLbGFzcyA9IE5vbkNhbGxhYmxlTWFnaWNNb2NrCgogICAgICAgICAgICAgICAgX2t3YXJncy5wb3AoJ25hbWUnKQogICAgICAgICAgICAgICAgbmV3LnJldHVybl92YWx1ZSA9IEtsYXNzKF9uZXdfcGFyZW50PW5ldywgX25ld19uYW1lPScoKScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKipfa3dhcmdzKQogICAgICAgIGVsaWYgYXV0b3NwZWMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICMgc3BlYyBpcyBpZ25vcmVkLCBuZXcgKm11c3QqIGJlIGRlZmF1bHQsIHNwZWNfc2V0IGlzIHRyZWF0ZWQKICAgICAgICAgICAgIyBhcyBhIGJvb2xlYW4uIFNob3VsZCB3ZSBjaGVjayBzcGVjIGlzIG5vdCBOb25lIGFuZCB0aGF0IHNwZWNfc2V0CiAgICAgICAgICAgICMgaXMgYSBib29sPwogICAgICAgICAgICBpZiBuZXcgaXMgbm90IERFRkFVTFQ6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgImF1dG9zcGVjIGNyZWF0ZXMgdGhlIG1vY2sgZm9yIHlvdS4gQ2FuJ3Qgc3BlY2lmeSAiCiAgICAgICAgICAgICAgICAgICAgImF1dG9zcGVjIGFuZCBuZXcuIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICBpZiBvcmlnaW5hbCBpcyBERUZBVUxUOgogICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJDYW4ndCB1c2UgJ2F1dG9zcGVjJyB3aXRoIGNyZWF0ZT1UcnVlIikKICAgICAgICAgICAgc3BlY19zZXQgPSBib29sKHNwZWNfc2V0KQogICAgICAgICAgICBpZiBhdXRvc3BlYyBpcyBUcnVlOgogICAgICAgICAgICAgICAgYXV0b3NwZWMgPSBvcmlnaW5hbAoKICAgICAgICAgICAgbmV3ID0gY3JlYXRlX2F1dG9zcGVjKGF1dG9zcGVjLCBzcGVjX3NldD1zcGVjX3NldCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9uYW1lPXNlbGYuYXR0cmlidXRlLCAqKmt3YXJncykKICAgICAgICBlbGlmIGt3YXJnczoKICAgICAgICAgICAgIyBjYW4ndCBzZXQga2V5d29yZCBhcmdzIHdoZW4gd2UgYXJlbid0IGNyZWF0aW5nIHRoZSBtb2NrCiAgICAgICAgICAgICMgWFhYWCBJZiBuZXcgaXMgYSBNb2NrIHdlIGNvdWxkIGNhbGwgbmV3LmNvbmZpZ3VyZV9tb2NrKCoqa3dhcmdzKQogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIkNhbid0IHBhc3Mga3dhcmdzIHRvIGEgbW9jayB3ZSBhcmVuJ3QgY3JlYXRpbmciKQoKICAgICAgICBuZXdfYXR0ciA9IG5ldwoKICAgICAgICBzZWxmLnRlbXBfb3JpZ2luYWwgPSBvcmlnaW5hbAogICAgICAgIHNlbGYuaXNfbG9jYWwgPSBsb2NhbAogICAgICAgIHNldGF0dHIoc2VsZi50YXJnZXQsIHNlbGYuYXR0cmlidXRlLCBuZXdfYXR0cikKICAgICAgICBpZiBzZWxmLmF0dHJpYnV0ZV9uYW1lIGlzIG5vdCBOb25lOgogICAgICAgICAgICBleHRyYV9hcmdzID0ge30KICAgICAgICAgICAgaWYgc2VsZi5uZXcgaXMgREVGQVVMVDoKICAgICAgICAgICAgICAgIGV4dHJhX2FyZ3Nbc2VsZi5hdHRyaWJ1dGVfbmFtZV0gPSAgbmV3CiAgICAgICAgICAgIGZvciBwYXRjaGluZyBpbiBzZWxmLmFkZGl0aW9uYWxfcGF0Y2hlcnM6CiAgICAgICAgICAgICAgICBhcmcgPSBwYXRjaGluZy5fX2VudGVyX18oKQogICAgICAgICAgICAgICAgaWYgcGF0Y2hpbmcubmV3IGlzIERFRkFVTFQ6CiAgICAgICAgICAgICAgICAgICAgZXh0cmFfYXJncy51cGRhdGUoYXJnKQogICAgICAgICAgICByZXR1cm4gZXh0cmFfYXJncwoKICAgICAgICByZXR1cm4gbmV3CgoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCAqZXhjX2luZm8pOgogICAgICAgICIiIlVuZG8gdGhlIHBhdGNoLiIiIgogICAgICAgIGlmIG5vdCBfaXNfc3RhcnRlZChzZWxmKToKICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKCdzdG9wIGNhbGxlZCBvbiB1bnN0YXJ0ZWQgcGF0Y2hlcicpCgogICAgICAgIGlmIHNlbGYuaXNfbG9jYWwgYW5kIHNlbGYudGVtcF9vcmlnaW5hbCBpcyBub3QgREVGQVVMVDoKICAgICAgICAgICAgc2V0YXR0cihzZWxmLnRhcmdldCwgc2VsZi5hdHRyaWJ1dGUsIHNlbGYudGVtcF9vcmlnaW5hbCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBkZWxhdHRyKHNlbGYudGFyZ2V0LCBzZWxmLmF0dHJpYnV0ZSkKICAgICAgICAgICAgaWYgbm90IHNlbGYuY3JlYXRlIGFuZCBub3QgaGFzYXR0cihzZWxmLnRhcmdldCwgc2VsZi5hdHRyaWJ1dGUpOgogICAgICAgICAgICAgICAgIyBuZWVkZWQgZm9yIHByb3h5IG9iamVjdHMgbGlrZSBkamFuZ28gc2V0dGluZ3MKICAgICAgICAgICAgICAgIHNldGF0dHIoc2VsZi50YXJnZXQsIHNlbGYuYXR0cmlidXRlLCBzZWxmLnRlbXBfb3JpZ2luYWwpCgogICAgICAgIGRlbCBzZWxmLnRlbXBfb3JpZ2luYWwKICAgICAgICBkZWwgc2VsZi5pc19sb2NhbAogICAgICAgIGRlbCBzZWxmLnRhcmdldAogICAgICAgIGZvciBwYXRjaGVyIGluIHJldmVyc2VkKHNlbGYuYWRkaXRpb25hbF9wYXRjaGVycyk6CiAgICAgICAgICAgIGlmIF9pc19zdGFydGVkKHBhdGNoZXIpOgogICAgICAgICAgICAgICAgcGF0Y2hlci5fX2V4aXRfXygqZXhjX2luZm8pCgoKICAgIGRlZiBzdGFydChzZWxmKToKICAgICAgICAiIiJBY3RpdmF0ZSBhIHBhdGNoLCByZXR1cm5pbmcgYW55IGNyZWF0ZWQgbW9jay4iIiIKICAgICAgICByZXN1bHQgPSBzZWxmLl9fZW50ZXJfXygpCiAgICAgICAgc2VsZi5fYWN0aXZlX3BhdGNoZXMuYWRkKHNlbGYpCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKCiAgICBkZWYgc3RvcChzZWxmKToKICAgICAgICAiIiJTdG9wIGFuIGFjdGl2ZSBwYXRjaC4iIiIKICAgICAgICBzZWxmLl9hY3RpdmVfcGF0Y2hlcy5kaXNjYXJkKHNlbGYpCiAgICAgICAgcmV0dXJuIHNlbGYuX19leGl0X18oKQoKCgpkZWYgX2dldF90YXJnZXQodGFyZ2V0KToKICAgIHRyeToKICAgICAgICB0YXJnZXQsIGF0dHJpYnV0ZSA9IHRhcmdldC5yc3BsaXQoJy4nLCAxKQogICAgZXhjZXB0IChUeXBlRXJyb3IsIFZhbHVlRXJyb3IpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiTmVlZCBhIHZhbGlkIHRhcmdldCB0byBwYXRjaC4gWW91IHN1cHBsaWVkOiAlciIgJQogICAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0LCkpCiAgICBnZXR0ZXIgPSBsYW1iZGE6IF9pbXBvcnRlcih0YXJnZXQpCiAgICByZXR1cm4gZ2V0dGVyLCBhdHRyaWJ1dGUKCgpkZWYgX3BhdGNoX29iamVjdCgKICAgICAgICB0YXJnZXQsIGF0dHJpYnV0ZSwgbmV3PURFRkFVTFQsIHNwZWM9Tm9uZSwKICAgICAgICBjcmVhdGU9RmFsc2UsIHNwZWNfc2V0PU5vbmUsIGF1dG9zcGVjPU5vbmUsCiAgICAgICAgbmV3X2NhbGxhYmxlPU5vbmUsICoqa3dhcmdzCiAgICApOgogICAgIiIiCiAgICBwYXRjaCB0aGUgbmFtZWQgbWVtYmVyIChgYXR0cmlidXRlYCkgb24gYW4gb2JqZWN0IChgdGFyZ2V0YCkgd2l0aCBhIG1vY2sKICAgIG9iamVjdC4KCiAgICBgcGF0Y2gub2JqZWN0YCBjYW4gYmUgdXNlZCBhcyBhIGRlY29yYXRvciwgY2xhc3MgZGVjb3JhdG9yIG9yIGEgY29udGV4dAogICAgbWFuYWdlci4gQXJndW1lbnRzIGBuZXdgLCBgc3BlY2AsIGBjcmVhdGVgLCBgc3BlY19zZXRgLAogICAgYGF1dG9zcGVjYCBhbmQgYG5ld19jYWxsYWJsZWAgaGF2ZSB0aGUgc2FtZSBtZWFuaW5nIGFzIGZvciBgcGF0Y2hgLiBMaWtlCiAgICBgcGF0Y2hgLCBgcGF0Y2gub2JqZWN0YCB0YWtlcyBhcmJpdHJhcnkga2V5d29yZCBhcmd1bWVudHMgZm9yIGNvbmZpZ3VyaW5nCiAgICB0aGUgbW9jayBvYmplY3QgaXQgY3JlYXRlcy4KCiAgICBXaGVuIHVzZWQgYXMgYSBjbGFzcyBkZWNvcmF0b3IgYHBhdGNoLm9iamVjdGAgaG9ub3VycyBgcGF0Y2guVEVTVF9QUkVGSVhgCiAgICBmb3IgY2hvb3Npbmcgd2hpY2ggbWV0aG9kcyB0byB3cmFwLgogICAgIiIiCiAgICBnZXR0ZXIgPSBsYW1iZGE6IHRhcmdldAogICAgcmV0dXJuIF9wYXRjaCgKICAgICAgICBnZXR0ZXIsIGF0dHJpYnV0ZSwgbmV3LCBzcGVjLCBjcmVhdGUsCiAgICAgICAgc3BlY19zZXQsIGF1dG9zcGVjLCBuZXdfY2FsbGFibGUsIGt3YXJncwogICAgKQoKCmRlZiBfcGF0Y2hfbXVsdGlwbGUodGFyZ2V0LCBzcGVjPU5vbmUsIGNyZWF0ZT1GYWxzZSwgc3BlY19zZXQ9Tm9uZSwKICAgICAgICAgICAgICAgICAgICBhdXRvc3BlYz1Ob25lLCBuZXdfY2FsbGFibGU9Tm9uZSwgKiprd2FyZ3MpOgogICAgIiIiUGVyZm9ybSBtdWx0aXBsZSBwYXRjaGVzIGluIGEgc2luZ2xlIGNhbGwuIEl0IHRha2VzIHRoZSBvYmplY3QgdG8gYmUKICAgIHBhdGNoZWQgKGVpdGhlciBhcyBhbiBvYmplY3Qgb3IgYSBzdHJpbmcgdG8gZmV0Y2ggdGhlIG9iamVjdCBieSBpbXBvcnRpbmcpCiAgICBhbmQga2V5d29yZCBhcmd1bWVudHMgZm9yIHRoZSBwYXRjaGVzOjoKCiAgICAgICAgd2l0aCBwYXRjaC5tdWx0aXBsZShzZXR0aW5ncywgRklSU1RfUEFUQ0g9J29uZScsIFNFQ09ORF9QQVRDSD0ndHdvJyk6CiAgICAgICAgICAgIC4uLgoKICAgIFVzZSBgREVGQVVMVGAgYXMgdGhlIHZhbHVlIGlmIHlvdSB3YW50IGBwYXRjaC5tdWx0aXBsZWAgdG8gY3JlYXRlCiAgICBtb2NrcyBmb3IgeW91LiBJbiB0aGlzIGNhc2UgdGhlIGNyZWF0ZWQgbW9ja3MgYXJlIHBhc3NlZCBpbnRvIGEgZGVjb3JhdGVkCiAgICBmdW5jdGlvbiBieSBrZXl3b3JkLCBhbmQgYSBkaWN0aW9uYXJ5IGlzIHJldHVybmVkIHdoZW4gYHBhdGNoLm11bHRpcGxlYCBpcwogICAgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlci4KCiAgICBgcGF0Y2gubXVsdGlwbGVgIGNhbiBiZSB1c2VkIGFzIGEgZGVjb3JhdG9yLCBjbGFzcyBkZWNvcmF0b3Igb3IgYSBjb250ZXh0CiAgICBtYW5hZ2VyLiBUaGUgYXJndW1lbnRzIGBzcGVjYCwgYHNwZWNfc2V0YCwgYGNyZWF0ZWAsCiAgICBgYXV0b3NwZWNgIGFuZCBgbmV3X2NhbGxhYmxlYCBoYXZlIHRoZSBzYW1lIG1lYW5pbmcgYXMgZm9yIGBwYXRjaGAuIFRoZXNlCiAgICBhcmd1bWVudHMgd2lsbCBiZSBhcHBsaWVkIHRvICphbGwqIHBhdGNoZXMgZG9uZSBieSBgcGF0Y2gubXVsdGlwbGVgLgoKICAgIFdoZW4gdXNlZCBhcyBhIGNsYXNzIGRlY29yYXRvciBgcGF0Y2gubXVsdGlwbGVgIGhvbm91cnMgYHBhdGNoLlRFU1RfUFJFRklYYAogICAgZm9yIGNob29zaW5nIHdoaWNoIG1ldGhvZHMgdG8gd3JhcC4KICAgICIiIgogICAgaWYgdHlwZSh0YXJnZXQpIGlzIHN0cjoKICAgICAgICBnZXR0ZXIgPSBsYW1iZGE6IF9pbXBvcnRlcih0YXJnZXQpCiAgICBlbHNlOgogICAgICAgIGdldHRlciA9IGxhbWJkYTogdGFyZ2V0CgogICAgaWYgbm90IGt3YXJnczoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKAogICAgICAgICAgICAnTXVzdCBzdXBwbHkgYXQgbGVhc3Qgb25lIGtleXdvcmQgYXJndW1lbnQgd2l0aCBwYXRjaC5tdWx0aXBsZScKICAgICAgICApCiAgICAjIG5lZWQgdG8gd3JhcCBpbiBhIGxpc3QgZm9yIHB5dGhvbiAzLCB3aGVyZSBpdGVtcyBpcyBhIHZpZXcKICAgIGl0ZW1zID0gbGlzdChrd2FyZ3MuaXRlbXMoKSkKICAgIGF0dHJpYnV0ZSwgbmV3ID0gaXRlbXNbMF0KICAgIHBhdGNoZXIgPSBfcGF0Y2goCiAgICAgICAgZ2V0dGVyLCBhdHRyaWJ1dGUsIG5ldywgc3BlYywgY3JlYXRlLCBzcGVjX3NldCwKICAgICAgICBhdXRvc3BlYywgbmV3X2NhbGxhYmxlLCB7fQogICAgKQogICAgcGF0Y2hlci5hdHRyaWJ1dGVfbmFtZSA9IGF0dHJpYnV0ZQogICAgZm9yIGF0dHJpYnV0ZSwgbmV3IGluIGl0ZW1zWzE6XToKICAgICAgICB0aGlzX3BhdGNoZXIgPSBfcGF0Y2goCiAgICAgICAgICAgIGdldHRlciwgYXR0cmlidXRlLCBuZXcsIHNwZWMsIGNyZWF0ZSwgc3BlY19zZXQsCiAgICAgICAgICAgIGF1dG9zcGVjLCBuZXdfY2FsbGFibGUsIHt9CiAgICAgICAgKQogICAgICAgIHRoaXNfcGF0Y2hlci5hdHRyaWJ1dGVfbmFtZSA9IGF0dHJpYnV0ZQogICAgICAgIHBhdGNoZXIuYWRkaXRpb25hbF9wYXRjaGVycy5hcHBlbmQodGhpc19wYXRjaGVyKQogICAgcmV0dXJuIHBhdGNoZXIKCgpkZWYgcGF0Y2goCiAgICAgICAgdGFyZ2V0LCBuZXc9REVGQVVMVCwgc3BlYz1Ob25lLCBjcmVhdGU9RmFsc2UsCiAgICAgICAgc3BlY19zZXQ9Tm9uZSwgYXV0b3NwZWM9Tm9uZSwgbmV3X2NhbGxhYmxlPU5vbmUsICoqa3dhcmdzCiAgICApOgogICAgIiIiCiAgICBgcGF0Y2hgIGFjdHMgYXMgYSBmdW5jdGlvbiBkZWNvcmF0b3IsIGNsYXNzIGRlY29yYXRvciBvciBhIGNvbnRleHQKICAgIG1hbmFnZXIuIEluc2lkZSB0aGUgYm9keSBvZiB0aGUgZnVuY3Rpb24gb3Igd2l0aCBzdGF0ZW1lbnQsIHRoZSBgdGFyZ2V0YAogICAgaXMgcGF0Y2hlZCB3aXRoIGEgYG5ld2Agb2JqZWN0LiBXaGVuIHRoZSBmdW5jdGlvbi93aXRoIHN0YXRlbWVudCBleGl0cwogICAgdGhlIHBhdGNoIGlzIHVuZG9uZS4KCiAgICBJZiBgbmV3YCBpcyBvbWl0dGVkLCB0aGVuIHRoZSB0YXJnZXQgaXMgcmVwbGFjZWQgd2l0aCBhCiAgICBgTWFnaWNNb2NrYC4gSWYgYHBhdGNoYCBpcyB1c2VkIGFzIGEgZGVjb3JhdG9yIGFuZCBgbmV3YCBpcwogICAgb21pdHRlZCwgdGhlIGNyZWF0ZWQgbW9jayBpcyBwYXNzZWQgaW4gYXMgYW4gZXh0cmEgYXJndW1lbnQgdG8gdGhlCiAgICBkZWNvcmF0ZWQgZnVuY3Rpb24uIElmIGBwYXRjaGAgaXMgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlciB0aGUgY3JlYXRlZAogICAgbW9jayBpcyByZXR1cm5lZCBieSB0aGUgY29udGV4dCBtYW5hZ2VyLgoKICAgIGB0YXJnZXRgIHNob3VsZCBiZSBhIHN0cmluZyBpbiB0aGUgZm9ybSBgJ3BhY2thZ2UubW9kdWxlLkNsYXNzTmFtZSdgLiBUaGUKICAgIGB0YXJnZXRgIGlzIGltcG9ydGVkIGFuZCB0aGUgc3BlY2lmaWVkIG9iamVjdCByZXBsYWNlZCB3aXRoIHRoZSBgbmV3YAogICAgb2JqZWN0LCBzbyB0aGUgYHRhcmdldGAgbXVzdCBiZSBpbXBvcnRhYmxlIGZyb20gdGhlIGVudmlyb25tZW50IHlvdSBhcmUKICAgIGNhbGxpbmcgYHBhdGNoYCBmcm9tLiBUaGUgdGFyZ2V0IGlzIGltcG9ydGVkIHdoZW4gdGhlIGRlY29yYXRlZCBmdW5jdGlvbgogICAgaXMgZXhlY3V0ZWQsIG5vdCBhdCBkZWNvcmF0aW9uIHRpbWUuCgogICAgVGhlIGBzcGVjYCBhbmQgYHNwZWNfc2V0YCBrZXl3b3JkIGFyZ3VtZW50cyBhcmUgcGFzc2VkIHRvIHRoZSBgTWFnaWNNb2NrYAogICAgaWYgcGF0Y2ggaXMgY3JlYXRpbmcgb25lIGZvciB5b3UuCgogICAgSW4gYWRkaXRpb24geW91IGNhbiBwYXNzIGBzcGVjPVRydWVgIG9yIGBzcGVjX3NldD1UcnVlYCwgd2hpY2ggY2F1c2VzCiAgICBwYXRjaCB0byBwYXNzIGluIHRoZSBvYmplY3QgYmVpbmcgbW9ja2VkIGFzIHRoZSBzcGVjL3NwZWNfc2V0IG9iamVjdC4KCiAgICBgbmV3X2NhbGxhYmxlYCBhbGxvd3MgeW91IHRvIHNwZWNpZnkgYSBkaWZmZXJlbnQgY2xhc3MsIG9yIGNhbGxhYmxlIG9iamVjdCwKICAgIHRoYXQgd2lsbCBiZSBjYWxsZWQgdG8gY3JlYXRlIHRoZSBgbmV3YCBvYmplY3QuIEJ5IGRlZmF1bHQgYE1hZ2ljTW9ja2AgaXMKICAgIHVzZWQuCgogICAgQSBtb3JlIHBvd2VyZnVsIGZvcm0gb2YgYHNwZWNgIGlzIGBhdXRvc3BlY2AuIElmIHlvdSBzZXQgYGF1dG9zcGVjPVRydWVgCiAgICB0aGVuIHRoZSBtb2NrIHdpdGggYmUgY3JlYXRlZCB3aXRoIGEgc3BlYyBmcm9tIHRoZSBvYmplY3QgYmVpbmcgcmVwbGFjZWQuCiAgICBBbGwgYXR0cmlidXRlcyBvZiB0aGUgbW9jayB3aWxsIGFsc28gaGF2ZSB0aGUgc3BlYyBvZiB0aGUgY29ycmVzcG9uZGluZwogICAgYXR0cmlidXRlIG9mIHRoZSBvYmplY3QgYmVpbmcgcmVwbGFjZWQuIE1ldGhvZHMgYW5kIGZ1bmN0aW9ucyBiZWluZwogICAgbW9ja2VkIHdpbGwgaGF2ZSB0aGVpciBhcmd1bWVudHMgY2hlY2tlZCBhbmQgd2lsbCByYWlzZSBhIGBUeXBlRXJyb3JgIGlmCiAgICB0aGV5IGFyZSBjYWxsZWQgd2l0aCB0aGUgd3Jvbmcgc2lnbmF0dXJlLiBGb3IgbW9ja3MgcmVwbGFjaW5nIGEgY2xhc3MsCiAgICB0aGVpciByZXR1cm4gdmFsdWUgKHRoZSAnaW5zdGFuY2UnKSB3aWxsIGhhdmUgdGhlIHNhbWUgc3BlYyBhcyB0aGUgY2xhc3MuCgogICAgSW5zdGVhZCBvZiBgYXV0b3NwZWM9VHJ1ZWAgeW91IGNhbiBwYXNzIGBhdXRvc3BlYz1zb21lX29iamVjdGAgdG8gdXNlIGFuCiAgICBhcmJpdHJhcnkgb2JqZWN0IGFzIHRoZSBzcGVjIGluc3RlYWQgb2YgdGhlIG9uZSBiZWluZyByZXBsYWNlZC4KCiAgICBCeSBkZWZhdWx0IGBwYXRjaGAgd2lsbCBmYWlsIHRvIHJlcGxhY2UgYXR0cmlidXRlcyB0aGF0IGRvbid0IGV4aXN0LiBJZgogICAgeW91IHBhc3MgaW4gYGNyZWF0ZT1UcnVlYCwgYW5kIHRoZSBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdCwgcGF0Y2ggd2lsbAogICAgY3JlYXRlIHRoZSBhdHRyaWJ1dGUgZm9yIHlvdSB3aGVuIHRoZSBwYXRjaGVkIGZ1bmN0aW9uIGlzIGNhbGxlZCwgYW5kCiAgICBkZWxldGUgaXQgYWdhaW4gYWZ0ZXJ3YXJkcy4gVGhpcyBpcyB1c2VmdWwgZm9yIHdyaXRpbmcgdGVzdHMgYWdhaW5zdAogICAgYXR0cmlidXRlcyB0aGF0IHlvdXIgcHJvZHVjdGlvbiBjb2RlIGNyZWF0ZXMgYXQgcnVudGltZS4gSXQgaXMgb2ZmIGJ5IGJ5CiAgICBkZWZhdWx0IGJlY2F1c2UgaXQgY2FuIGJlIGRhbmdlcm91cy4gV2l0aCBpdCBzd2l0Y2hlZCBvbiB5b3UgY2FuIHdyaXRlCiAgICBwYXNzaW5nIHRlc3RzIGFnYWluc3QgQVBJcyB0aGF0IGRvbid0IGFjdHVhbGx5IGV4aXN0IQoKICAgIFBhdGNoIGNhbiBiZSB1c2VkIGFzIGEgYFRlc3RDYXNlYCBjbGFzcyBkZWNvcmF0b3IuIEl0IHdvcmtzIGJ5CiAgICBkZWNvcmF0aW5nIGVhY2ggdGVzdCBtZXRob2QgaW4gdGhlIGNsYXNzLiBUaGlzIHJlZHVjZXMgdGhlIGJvaWxlcnBsYXRlCiAgICBjb2RlIHdoZW4geW91ciB0ZXN0IG1ldGhvZHMgc2hhcmUgYSBjb21tb24gcGF0Y2hpbmdzIHNldC4gYHBhdGNoYCBmaW5kcwogICAgdGVzdHMgYnkgbG9va2luZyBmb3IgbWV0aG9kIG5hbWVzIHRoYXQgc3RhcnQgd2l0aCBgcGF0Y2guVEVTVF9QUkVGSVhgLgogICAgQnkgZGVmYXVsdCB0aGlzIGlzIGB0ZXN0YCwgd2hpY2ggbWF0Y2hlcyB0aGUgd2F5IGB1bml0dGVzdGAgZmluZHMgdGVzdHMuCiAgICBZb3UgY2FuIHNwZWNpZnkgYW4gYWx0ZXJuYXRpdmUgcHJlZml4IGJ5IHNldHRpbmcgYHBhdGNoLlRFU1RfUFJFRklYYC4KCiAgICBQYXRjaCBjYW4gYmUgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlciwgd2l0aCB0aGUgd2l0aCBzdGF0ZW1lbnQuIEhlcmUgdGhlCiAgICBwYXRjaGluZyBhcHBsaWVzIHRvIHRoZSBpbmRlbnRlZCBibG9jayBhZnRlciB0aGUgd2l0aCBzdGF0ZW1lbnQuIElmIHlvdQogICAgdXNlICJhcyIgdGhlbiB0aGUgcGF0Y2hlZCBvYmplY3Qgd2lsbCBiZSBib3VuZCB0byB0aGUgbmFtZSBhZnRlciB0aGUKICAgICJhcyI7IHZlcnkgdXNlZnVsIGlmIGBwYXRjaGAgaXMgY3JlYXRpbmcgYSBtb2NrIG9iamVjdCBmb3IgeW91LgoKICAgIGBwYXRjaGAgdGFrZXMgYXJiaXRyYXJ5IGtleXdvcmQgYXJndW1lbnRzLiBUaGVzZSB3aWxsIGJlIHBhc3NlZCB0bwogICAgdGhlIGBNb2NrYCAob3IgYG5ld19jYWxsYWJsZWApIG9uIGNvbnN0cnVjdGlvbi4KCiAgICBgcGF0Y2guZGljdCguLi4pYCwgYHBhdGNoLm11bHRpcGxlKC4uLilgIGFuZCBgcGF0Y2gub2JqZWN0KC4uLilgIGFyZQogICAgYXZhaWxhYmxlIGZvciBhbHRlcm5hdGUgdXNlLWNhc2VzLgogICAgIiIiCiAgICBnZXR0ZXIsIGF0dHJpYnV0ZSA9IF9nZXRfdGFyZ2V0KHRhcmdldCkKICAgIHJldHVybiBfcGF0Y2goCiAgICAgICAgZ2V0dGVyLCBhdHRyaWJ1dGUsIG5ldywgc3BlYywgY3JlYXRlLAogICAgICAgIHNwZWNfc2V0LCBhdXRvc3BlYywgbmV3X2NhbGxhYmxlLCBrd2FyZ3MKICAgICkKCgpjbGFzcyBfcGF0Y2hfZGljdChvYmplY3QpOgogICAgIiIiCiAgICBQYXRjaCBhIGRpY3Rpb25hcnksIG9yIGRpY3Rpb25hcnkgbGlrZSBvYmplY3QsIGFuZCByZXN0b3JlIHRoZSBkaWN0aW9uYXJ5CiAgICB0byBpdHMgb3JpZ2luYWwgc3RhdGUgYWZ0ZXIgdGhlIHRlc3QuCgogICAgYGluX2RpY3RgIGNhbiBiZSBhIGRpY3Rpb25hcnkgb3IgYSBtYXBwaW5nIGxpa2UgY29udGFpbmVyLiBJZiBpdCBpcyBhCiAgICBtYXBwaW5nIHRoZW4gaXQgbXVzdCBhdCBsZWFzdCBzdXBwb3J0IGdldHRpbmcsIHNldHRpbmcgYW5kIGRlbGV0aW5nIGl0ZW1zCiAgICBwbHVzIGl0ZXJhdGluZyBvdmVyIGtleXMuCgogICAgYGluX2RpY3RgIGNhbiBhbHNvIGJlIGEgc3RyaW5nIHNwZWNpZnlpbmcgdGhlIG5hbWUgb2YgdGhlIGRpY3Rpb25hcnksIHdoaWNoCiAgICB3aWxsIHRoZW4gYmUgZmV0Y2hlZCBieSBpbXBvcnRpbmcgaXQuCgogICAgYHZhbHVlc2AgY2FuIGJlIGEgZGljdGlvbmFyeSBvZiB2YWx1ZXMgdG8gc2V0IGluIHRoZSBkaWN0aW9uYXJ5LiBgdmFsdWVzYAogICAgY2FuIGFsc28gYmUgYW4gaXRlcmFibGUgb2YgYChrZXksIHZhbHVlKWAgcGFpcnMuCgogICAgSWYgYGNsZWFyYCBpcyBUcnVlIHRoZW4gdGhlIGRpY3Rpb25hcnkgd2lsbCBiZSBjbGVhcmVkIGJlZm9yZSB0aGUgbmV3CiAgICB2YWx1ZXMgYXJlIHNldC4KCiAgICBgcGF0Y2guZGljdGAgY2FuIGFsc28gYmUgY2FsbGVkIHdpdGggYXJiaXRyYXJ5IGtleXdvcmQgYXJndW1lbnRzIHRvIHNldAogICAgdmFsdWVzIGluIHRoZSBkaWN0aW9uYXJ5OjoKCiAgICAgICAgd2l0aCBwYXRjaC5kaWN0KCdzeXMubW9kdWxlcycsIG15bW9kdWxlPU1vY2soKSwgb3RoZXJfbW9kdWxlPU1vY2soKSk6CiAgICAgICAgICAgIC4uLgoKICAgIGBwYXRjaC5kaWN0YCBjYW4gYmUgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlciwgZGVjb3JhdG9yIG9yIGNsYXNzCiAgICBkZWNvcmF0b3IuIFdoZW4gdXNlZCBhcyBhIGNsYXNzIGRlY29yYXRvciBgcGF0Y2guZGljdGAgaG9ub3VycwogICAgYHBhdGNoLlRFU1RfUFJFRklYYCBmb3IgY2hvb3Npbmcgd2hpY2ggbWV0aG9kcyB0byB3cmFwLgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGluX2RpY3QsIHZhbHVlcz0oKSwgY2xlYXI9RmFsc2UsICoqa3dhcmdzKToKICAgICAgICBpZiBpc2luc3RhbmNlKGluX2RpY3QsIHN0cik6CiAgICAgICAgICAgIGluX2RpY3QgPSBfaW1wb3J0ZXIoaW5fZGljdCkKICAgICAgICBzZWxmLmluX2RpY3QgPSBpbl9kaWN0CiAgICAgICAgIyBzdXBwb3J0IGFueSBhcmd1bWVudCBzdXBwb3J0ZWQgYnkgZGljdCguLi4pIGNvbnN0cnVjdG9yCiAgICAgICAgc2VsZi52YWx1ZXMgPSBkaWN0KHZhbHVlcykKICAgICAgICBzZWxmLnZhbHVlcy51cGRhdGUoa3dhcmdzKQogICAgICAgIHNlbGYuY2xlYXIgPSBjbGVhcgogICAgICAgIHNlbGYuX29yaWdpbmFsID0gTm9uZQoKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgZik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShmLCB0eXBlKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuZGVjb3JhdGVfY2xhc3MoZikKICAgICAgICBAd3JhcHMoZikKICAgICAgICBkZWYgX2lubmVyKCphcmdzLCAqKmt3KToKICAgICAgICAgICAgc2VsZi5fcGF0Y2hfZGljdCgpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJldHVybiBmKCphcmdzLCAqKmt3KQogICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgc2VsZi5fdW5wYXRjaF9kaWN0KCkKCiAgICAgICAgcmV0dXJuIF9pbm5lcgoKCiAgICBkZWYgZGVjb3JhdGVfY2xhc3Moc2VsZiwga2xhc3MpOgogICAgICAgIGZvciBhdHRyIGluIGRpcihrbGFzcyk6CiAgICAgICAgICAgIGF0dHJfdmFsdWUgPSBnZXRhdHRyKGtsYXNzLCBhdHRyKQogICAgICAgICAgICBpZiAoYXR0ci5zdGFydHN3aXRoKHBhdGNoLlRFU1RfUFJFRklYKSBhbmQKICAgICAgICAgICAgICAgICBoYXNhdHRyKGF0dHJfdmFsdWUsICJfX2NhbGxfXyIpKToKICAgICAgICAgICAgICAgIGRlY29yYXRvciA9IF9wYXRjaF9kaWN0KHNlbGYuaW5fZGljdCwgc2VsZi52YWx1ZXMsIHNlbGYuY2xlYXIpCiAgICAgICAgICAgICAgICBkZWNvcmF0ZWQgPSBkZWNvcmF0b3IoYXR0cl92YWx1ZSkKICAgICAgICAgICAgICAgIHNldGF0dHIoa2xhc3MsIGF0dHIsIGRlY29yYXRlZCkKICAgICAgICByZXR1cm4ga2xhc3MKCgogICAgZGVmIF9fZW50ZXJfXyhzZWxmKToKICAgICAgICAiIiJQYXRjaCB0aGUgZGljdC4iIiIKICAgICAgICBzZWxmLl9wYXRjaF9kaWN0KCkKCgogICAgZGVmIF9wYXRjaF9kaWN0KHNlbGYpOgogICAgICAgIHZhbHVlcyA9IHNlbGYudmFsdWVzCiAgICAgICAgaW5fZGljdCA9IHNlbGYuaW5fZGljdAogICAgICAgIGNsZWFyID0gc2VsZi5jbGVhcgoKICAgICAgICB0cnk6CiAgICAgICAgICAgIG9yaWdpbmFsID0gaW5fZGljdC5jb3B5KCkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgICMgZGljdCBsaWtlIG9iamVjdCB3aXRoIG5vIGNvcHkgbWV0aG9kCiAgICAgICAgICAgICMgbXVzdCBzdXBwb3J0IGl0ZXJhdGlvbiBvdmVyIGtleXMKICAgICAgICAgICAgb3JpZ2luYWwgPSB7fQogICAgICAgICAgICBmb3Iga2V5IGluIGluX2RpY3Q6CiAgICAgICAgICAgICAgICBvcmlnaW5hbFtrZXldID0gaW5fZGljdFtrZXldCiAgICAgICAgc2VsZi5fb3JpZ2luYWwgPSBvcmlnaW5hbAoKICAgICAgICBpZiBjbGVhcjoKICAgICAgICAgICAgX2NsZWFyX2RpY3QoaW5fZGljdCkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpbl9kaWN0LnVwZGF0ZSh2YWx1ZXMpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICAjIGRpY3QgbGlrZSBvYmplY3Qgd2l0aCBubyB1cGRhdGUgbWV0aG9kCiAgICAgICAgICAgIGZvciBrZXkgaW4gdmFsdWVzOgogICAgICAgICAgICAgICAgaW5fZGljdFtrZXldID0gdmFsdWVzW2tleV0KCgogICAgZGVmIF91bnBhdGNoX2RpY3Qoc2VsZik6CiAgICAgICAgaW5fZGljdCA9IHNlbGYuaW5fZGljdAogICAgICAgIG9yaWdpbmFsID0gc2VsZi5fb3JpZ2luYWwKCiAgICAgICAgX2NsZWFyX2RpY3QoaW5fZGljdCkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpbl9kaWN0LnVwZGF0ZShvcmlnaW5hbCkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIGZvciBrZXkgaW4gb3JpZ2luYWw6CiAgICAgICAgICAgICAgICBpbl9kaWN0W2tleV0gPSBvcmlnaW5hbFtrZXldCgoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCAqYXJncyk6CiAgICAgICAgIiIiVW5wYXRjaCB0aGUgZGljdC4iIiIKICAgICAgICBzZWxmLl91bnBhdGNoX2RpY3QoKQogICAgICAgIHJldHVybiBGYWxzZQoKICAgIHN0YXJ0ID0gX19lbnRlcl9fCiAgICBzdG9wID0gX19leGl0X18KCgpkZWYgX2NsZWFyX2RpY3QoaW5fZGljdCk6CiAgICB0cnk6CiAgICAgICAgaW5fZGljdC5jbGVhcigpCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAga2V5cyA9IGxpc3QoaW5fZGljdCkKICAgICAgICBmb3Iga2V5IGluIGtleXM6CiAgICAgICAgICAgIGRlbCBpbl9kaWN0W2tleV0KCgpkZWYgX3BhdGNoX3N0b3BhbGwoKToKICAgICIiIlN0b3AgYWxsIGFjdGl2ZSBwYXRjaGVzLiIiIgogICAgZm9yIHBhdGNoIGluIGxpc3QoX3BhdGNoLl9hY3RpdmVfcGF0Y2hlcyk6CiAgICAgICAgcGF0Y2guc3RvcCgpCgoKcGF0Y2gub2JqZWN0ID0gX3BhdGNoX29iamVjdApwYXRjaC5kaWN0ID0gX3BhdGNoX2RpY3QKcGF0Y2gubXVsdGlwbGUgPSBfcGF0Y2hfbXVsdGlwbGUKcGF0Y2guc3RvcGFsbCA9IF9wYXRjaF9zdG9wYWxsCnBhdGNoLlRFU1RfUFJFRklYID0gJ3Rlc3QnCgptYWdpY19tZXRob2RzID0gKAogICAgImx0IGxlIGd0IGdlIGVxIG5lICIKICAgICJnZXRpdGVtIHNldGl0ZW0gZGVsaXRlbSAiCiAgICAibGVuIGNvbnRhaW5zIGl0ZXIgIgogICAgImhhc2ggc3RyIHNpemVvZiAiCiAgICAiZW50ZXIgZXhpdCAiCiAgICAiZGl2bW9kIG5lZyBwb3MgYWJzIGludmVydCAiCiAgICAiY29tcGxleCBpbnQgZmxvYXQgaW5kZXggIgogICAgInRydW5jIGZsb29yIGNlaWwgIgogICAgImJvb2wgbmV4dCAiCikKCm51bWVyaWNzID0gImFkZCBzdWIgbXVsIGRpdiBmbG9vcmRpdiBtb2QgbHNoaWZ0IHJzaGlmdCBhbmQgeG9yIG9yIHBvdyAiCmlucGxhY2UgPSAnICcuam9pbignaSVzJyAlIG4gZm9yIG4gaW4gbnVtZXJpY3Muc3BsaXQoKSkKcmlnaHQgPSAnICcuam9pbignciVzJyAlIG4gZm9yIG4gaW4gbnVtZXJpY3Muc3BsaXQoKSkKCiMgbm90IGluY2x1ZGluZyBfX3ByZXBhcmVfXywgX19pbnN0YW5jZWNoZWNrX18sIF9fc3ViY2xhc3NjaGVja19fCiMgKGFzIHRoZXkgYXJlIG1ldGFjbGFzcyBtZXRob2RzKQojIF9fZGVsX18gaXMgbm90IHN1cHBvcnRlZCBhdCBhbGwgYXMgaXQgY2F1c2VzIHByb2JsZW1zIGlmIGl0IGV4aXN0cwoKX25vbl9kZWZhdWx0cyA9IHNldCgnX18lc19fJyAlIG1ldGhvZCBmb3IgbWV0aG9kIGluIFsKICAgICdnZXQnLCAnc2V0JywgJ2RlbGV0ZScsICdyZXZlcnNlZCcsICdtaXNzaW5nJywgJ3JlZHVjZScsICdyZWR1Y2VfZXgnLAogICAgJ2dldGluaXRhcmdzJywgJ2dldG5ld2FyZ3MnLCAnZ2V0c3RhdGUnLCAnc2V0c3RhdGUnLCAnZ2V0Zm9ybWF0JywKICAgICdzZXRmb3JtYXQnLCAncmVwcicsICdkaXInLCAnc3ViY2xhc3NlcycsICdmb3JtYXQnLApdKQoKCmRlZiBfZ2V0X21ldGhvZChuYW1lLCBmdW5jKToKICAgICJUdXJucyBhIGNhbGxhYmxlIG9iamVjdCAobGlrZSBhIG1vY2spIGludG8gYSByZWFsIGZ1bmN0aW9uIgogICAgZGVmIG1ldGhvZChzZWxmLCAqYXJncywgKiprdyk6CiAgICAgICAgcmV0dXJuIGZ1bmMoc2VsZiwgKmFyZ3MsICoqa3cpCiAgICBtZXRob2QuX19uYW1lX18gPSBuYW1lCiAgICByZXR1cm4gbWV0aG9kCgoKX21hZ2ljcyA9IHNldCgKICAgICdfXyVzX18nICUgbWV0aG9kIGZvciBtZXRob2QgaW4KICAgICcgJy5qb2luKFttYWdpY19tZXRob2RzLCBudW1lcmljcywgaW5wbGFjZSwgcmlnaHRdKS5zcGxpdCgpCikKCl9hbGxfbWFnaWNzID0gX21hZ2ljcyB8IF9ub25fZGVmYXVsdHMKCl91bnN1cHBvcnRlZF9tYWdpY3MgPSBzZXQoWwogICAgJ19fZ2V0YXR0cl9fJywgJ19fc2V0YXR0cl9fJywKICAgICdfX2luaXRfXycsICdfX25ld19fJywgJ19fcHJlcGFyZV9fJwogICAgJ19faW5zdGFuY2VjaGVja19fJywgJ19fc3ViY2xhc3NjaGVja19fJywKICAgICdfX2RlbF9fJwpdKQoKX2NhbGN1bGF0ZV9yZXR1cm5fdmFsdWUgPSB7CiAgICAnX19oYXNoX18nOiBsYW1iZGEgc2VsZjogb2JqZWN0Ll9faGFzaF9fKHNlbGYpLAogICAgJ19fc3RyX18nOiBsYW1iZGEgc2VsZjogb2JqZWN0Ll9fc3RyX18oc2VsZiksCiAgICAnX19zaXplb2ZfXyc6IGxhbWJkYSBzZWxmOiBvYmplY3QuX19zaXplb2ZfXyhzZWxmKSwKfQoKX3JldHVybl92YWx1ZXMgPSB7CiAgICAnX19sdF9fJzogTm90SW1wbGVtZW50ZWQsCiAgICAnX19ndF9fJzogTm90SW1wbGVtZW50ZWQsCiAgICAnX19sZV9fJzogTm90SW1wbGVtZW50ZWQsCiAgICAnX19nZV9fJzogTm90SW1wbGVtZW50ZWQsCiAgICAnX19pbnRfXyc6IDEsCiAgICAnX19jb250YWluc19fJzogRmFsc2UsCiAgICAnX19sZW5fXyc6IDAsCiAgICAnX19leGl0X18nOiBGYWxzZSwKICAgICdfX2NvbXBsZXhfXyc6IDFqLAogICAgJ19fZmxvYXRfXyc6IDEuMCwKICAgICdfX2Jvb2xfXyc6IFRydWUsCiAgICAnX19pbmRleF9fJzogMSwKfQoKCmRlZiBfZ2V0X2VxKHNlbGYpOgogICAgZGVmIF9fZXFfXyhvdGhlcik6CiAgICAgICAgcmV0X3ZhbCA9IHNlbGYuX19lcV9fLl9tb2NrX3JldHVybl92YWx1ZQogICAgICAgIGlmIHJldF92YWwgaXMgbm90IERFRkFVTFQ6CiAgICAgICAgICAgIHJldHVybiByZXRfdmFsCiAgICAgICAgcmV0dXJuIHNlbGYgaXMgb3RoZXIKICAgIHJldHVybiBfX2VxX18KCmRlZiBfZ2V0X25lKHNlbGYpOgogICAgZGVmIF9fbmVfXyhvdGhlcik6CiAgICAgICAgaWYgc2VsZi5fX25lX18uX21vY2tfcmV0dXJuX3ZhbHVlIGlzIG5vdCBERUZBVUxUOgogICAgICAgICAgICByZXR1cm4gREVGQVVMVAogICAgICAgIHJldHVybiBzZWxmIGlzIG5vdCBvdGhlcgogICAgcmV0dXJuIF9fbmVfXwoKZGVmIF9nZXRfaXRlcihzZWxmKToKICAgIGRlZiBfX2l0ZXJfXygpOgogICAgICAgIHJldF92YWwgPSBzZWxmLl9faXRlcl9fLl9tb2NrX3JldHVybl92YWx1ZQogICAgICAgIGlmIHJldF92YWwgaXMgREVGQVVMVDoKICAgICAgICAgICAgcmV0dXJuIGl0ZXIoW10pCiAgICAgICAgIyBpZiByZXRfdmFsIHdhcyBhbHJlYWR5IGFuIGl0ZXJhdG9yLCB0aGVuIGNhbGxpbmcgaXRlciBvbiBpdCBzaG91bGQKICAgICAgICAjIHJldHVybiB0aGUgaXRlcmF0b3IgdW5jaGFuZ2VkCiAgICAgICAgcmV0dXJuIGl0ZXIocmV0X3ZhbCkKICAgIHJldHVybiBfX2l0ZXJfXwoKX3NpZGVfZWZmZWN0X21ldGhvZHMgPSB7CiAgICAnX19lcV9fJzogX2dldF9lcSwKICAgICdfX25lX18nOiBfZ2V0X25lLAogICAgJ19faXRlcl9fJzogX2dldF9pdGVyLAp9CgoKCmRlZiBfc2V0X3JldHVybl92YWx1ZShtb2NrLCBtZXRob2QsIG5hbWUpOgogICAgZml4ZWQgPSBfcmV0dXJuX3ZhbHVlcy5nZXQobmFtZSwgREVGQVVMVCkKICAgIGlmIGZpeGVkIGlzIG5vdCBERUZBVUxUOgogICAgICAgIG1ldGhvZC5yZXR1cm5fdmFsdWUgPSBmaXhlZAogICAgICAgIHJldHVybgoKICAgIHJldHVybl9jYWx1bGF0b3IgPSBfY2FsY3VsYXRlX3JldHVybl92YWx1ZS5nZXQobmFtZSkKICAgIGlmIHJldHVybl9jYWx1bGF0b3IgaXMgbm90IE5vbmU6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm5fdmFsdWUgPSByZXR1cm5fY2FsdWxhdG9yKG1vY2spCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICAjIFhYWFggd2h5IGRvIHdlIHJldHVybiBBdHRyaWJ1dGVFcnJvciBoZXJlPwogICAgICAgICAgICAjICAgICAgc2V0IGl0IGFzIGEgc2lkZV9lZmZlY3QgaW5zdGVhZD8KICAgICAgICAgICAgcmV0dXJuX3ZhbHVlID0gQXR0cmlidXRlRXJyb3IobmFtZSkKICAgICAgICBtZXRob2QucmV0dXJuX3ZhbHVlID0gcmV0dXJuX3ZhbHVlCiAgICAgICAgcmV0dXJuCgogICAgc2lkZV9lZmZlY3RvciA9IF9zaWRlX2VmZmVjdF9tZXRob2RzLmdldChuYW1lKQogICAgaWYgc2lkZV9lZmZlY3RvciBpcyBub3QgTm9uZToKICAgICAgICBtZXRob2Quc2lkZV9lZmZlY3QgPSBzaWRlX2VmZmVjdG9yKG1vY2spCgoKCmNsYXNzIE1hZ2ljTWl4aW4ob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqYXJncywgKiprdyk6CiAgICAgICAgX3NhZmVfc3VwZXIoTWFnaWNNaXhpbiwgc2VsZikuX19pbml0X18oKmFyZ3MsICoqa3cpCiAgICAgICAgc2VsZi5fbW9ja19zZXRfbWFnaWNzKCkKCgogICAgZGVmIF9tb2NrX3NldF9tYWdpY3Moc2VsZik6CiAgICAgICAgdGhlc2VfbWFnaWNzID0gX21hZ2ljcwoKICAgICAgICBpZiBzZWxmLl9tb2NrX21ldGhvZHMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHRoZXNlX21hZ2ljcyA9IF9tYWdpY3MuaW50ZXJzZWN0aW9uKHNlbGYuX21vY2tfbWV0aG9kcykKCiAgICAgICAgICAgIHJlbW92ZV9tYWdpY3MgPSBzZXQoKQogICAgICAgICAgICByZW1vdmVfbWFnaWNzID0gX21hZ2ljcyAtIHRoZXNlX21hZ2ljcwoKICAgICAgICAgICAgZm9yIGVudHJ5IGluIHJlbW92ZV9tYWdpY3M6CiAgICAgICAgICAgICAgICBpZiBlbnRyeSBpbiB0eXBlKHNlbGYpLl9fZGljdF9fOgogICAgICAgICAgICAgICAgICAgICMgcmVtb3ZlIHVubmVlZGVkIG1hZ2ljIG1ldGhvZHMKICAgICAgICAgICAgICAgICAgICBkZWxhdHRyKHNlbGYsIGVudHJ5KQoKICAgICAgICAjIGRvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBhdHRyaWJ1dGVzIGlmIGNhbGxlZCBhIHNlY29uZCB0aW1lCiAgICAgICAgdGhlc2VfbWFnaWNzID0gdGhlc2VfbWFnaWNzIC0gc2V0KHR5cGUoc2VsZikuX19kaWN0X18pCgogICAgICAgIF90eXBlID0gdHlwZShzZWxmKQogICAgICAgIGZvciBlbnRyeSBpbiB0aGVzZV9tYWdpY3M6CiAgICAgICAgICAgIHNldGF0dHIoX3R5cGUsIGVudHJ5LCBNYWdpY1Byb3h5KGVudHJ5LCBzZWxmKSkKCgoKY2xhc3MgTm9uQ2FsbGFibGVNYWdpY01vY2soTWFnaWNNaXhpbiwgTm9uQ2FsbGFibGVNb2NrKToKICAgICIiIkEgdmVyc2lvbiBvZiBgTWFnaWNNb2NrYCB0aGF0IGlzbid0IGNhbGxhYmxlLiIiIgogICAgZGVmIG1vY2tfYWRkX3NwZWMoc2VsZiwgc3BlYywgc3BlY19zZXQ9RmFsc2UpOgogICAgICAgICIiIkFkZCBhIHNwZWMgdG8gYSBtb2NrLiBgc3BlY2AgY2FuIGVpdGhlciBiZSBhbiBvYmplY3Qgb3IgYQogICAgICAgIGxpc3Qgb2Ygc3RyaW5ncy4gT25seSBhdHRyaWJ1dGVzIG9uIHRoZSBgc3BlY2AgY2FuIGJlIGZldGNoZWQgYXMKICAgICAgICBhdHRyaWJ1dGVzIGZyb20gdGhlIG1vY2suCgogICAgICAgIElmIGBzcGVjX3NldGAgaXMgVHJ1ZSB0aGVuIG9ubHkgYXR0cmlidXRlcyBvbiB0aGUgc3BlYyBjYW4gYmUgc2V0LiIiIgogICAgICAgIHNlbGYuX21vY2tfYWRkX3NwZWMoc3BlYywgc3BlY19zZXQpCiAgICAgICAgc2VsZi5fbW9ja19zZXRfbWFnaWNzKCkKCgoKY2xhc3MgTWFnaWNNb2NrKE1hZ2ljTWl4aW4sIE1vY2spOgogICAgIiIiCiAgICBNYWdpY01vY2sgaXMgYSBzdWJjbGFzcyBvZiBNb2NrIHdpdGggZGVmYXVsdCBpbXBsZW1lbnRhdGlvbnMKICAgIG9mIG1vc3Qgb2YgdGhlIG1hZ2ljIG1ldGhvZHMuIFlvdSBjYW4gdXNlIE1hZ2ljTW9jayB3aXRob3V0IGhhdmluZyB0bwogICAgY29uZmlndXJlIHRoZSBtYWdpYyBtZXRob2RzIHlvdXJzZWxmLgoKICAgIElmIHlvdSB1c2UgdGhlIGBzcGVjYCBvciBgc3BlY19zZXRgIGFyZ3VtZW50cyB0aGVuICpvbmx5KiBtYWdpYwogICAgbWV0aG9kcyB0aGF0IGV4aXN0IGluIHRoZSBzcGVjIHdpbGwgYmUgY3JlYXRlZC4KCiAgICBBdHRyaWJ1dGVzIGFuZCB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgYE1hZ2ljTW9ja2Agd2lsbCBhbHNvIGJlIGBNYWdpY01vY2tzYC4KICAgICIiIgogICAgZGVmIG1vY2tfYWRkX3NwZWMoc2VsZiwgc3BlYywgc3BlY19zZXQ9RmFsc2UpOgogICAgICAgICIiIkFkZCBhIHNwZWMgdG8gYSBtb2NrLiBgc3BlY2AgY2FuIGVpdGhlciBiZSBhbiBvYmplY3Qgb3IgYQogICAgICAgIGxpc3Qgb2Ygc3RyaW5ncy4gT25seSBhdHRyaWJ1dGVzIG9uIHRoZSBgc3BlY2AgY2FuIGJlIGZldGNoZWQgYXMKICAgICAgICBhdHRyaWJ1dGVzIGZyb20gdGhlIG1vY2suCgogICAgICAgIElmIGBzcGVjX3NldGAgaXMgVHJ1ZSB0aGVuIG9ubHkgYXR0cmlidXRlcyBvbiB0aGUgc3BlYyBjYW4gYmUgc2V0LiIiIgogICAgICAgIHNlbGYuX21vY2tfYWRkX3NwZWMoc3BlYywgc3BlY19zZXQpCiAgICAgICAgc2VsZi5fbW9ja19zZXRfbWFnaWNzKCkKCgoKY2xhc3MgTWFnaWNQcm94eShvYmplY3QpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUsIHBhcmVudCk6CiAgICAgICAgc2VsZi5uYW1lID0gbmFtZQogICAgICAgIHNlbGYucGFyZW50ID0gcGFyZW50CgogICAgZGVmIF9fY2FsbF9fKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgbSA9IHNlbGYuY3JlYXRlX21vY2soKQogICAgICAgIHJldHVybiBtKCphcmdzLCAqKmt3YXJncykKCiAgICBkZWYgY3JlYXRlX21vY2soc2VsZik6CiAgICAgICAgZW50cnkgPSBzZWxmLm5hbWUKICAgICAgICBwYXJlbnQgPSBzZWxmLnBhcmVudAogICAgICAgIG0gPSBwYXJlbnQuX2dldF9jaGlsZF9tb2NrKG5hbWU9ZW50cnksIF9uZXdfbmFtZT1lbnRyeSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbmV3X3BhcmVudD1wYXJlbnQpCiAgICAgICAgc2V0YXR0cihwYXJlbnQsIGVudHJ5LCBtKQogICAgICAgIF9zZXRfcmV0dXJuX3ZhbHVlKHBhcmVudCwgbSwgZW50cnkpCiAgICAgICAgcmV0dXJuIG0KCiAgICBkZWYgX19nZXRfXyhzZWxmLCBvYmosIF90eXBlPU5vbmUpOgogICAgICAgIHJldHVybiBzZWxmLmNyZWF0ZV9tb2NrKCkKCgoKY2xhc3MgX0FOWShvYmplY3QpOgogICAgIkEgaGVscGVyIG9iamVjdCB0aGF0IGNvbXBhcmVzIGVxdWFsIHRvIGV2ZXJ5dGhpbmcuIgoKICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIF9fbmVfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgICAgIHJldHVybiAnPEFOWT4nCgpBTlkgPSBfQU5ZKCkKCgoKZGVmIF9mb3JtYXRfY2FsbF9zaWduYXR1cmUobmFtZSwgYXJncywga3dhcmdzKToKICAgIG1lc3NhZ2UgPSAnJXMoJSVzKScgJSBuYW1lCiAgICBmb3JtYXR0ZWRfYXJncyA9ICcnCiAgICBhcmdzX3N0cmluZyA9ICcsICcuam9pbihbcmVwcihhcmcpIGZvciBhcmcgaW4gYXJnc10pCiAgICBrd2FyZ3Nfc3RyaW5nID0gJywgJy5qb2luKFsKICAgICAgICAnJXM9JXInICUgKGtleSwgdmFsdWUpIGZvciBrZXksIHZhbHVlIGluIGt3YXJncy5pdGVtcygpCiAgICBdKQogICAgaWYgYXJnc19zdHJpbmc6CiAgICAgICAgZm9ybWF0dGVkX2FyZ3MgPSBhcmdzX3N0cmluZwogICAgaWYga3dhcmdzX3N0cmluZzoKICAgICAgICBpZiBmb3JtYXR0ZWRfYXJnczoKICAgICAgICAgICAgZm9ybWF0dGVkX2FyZ3MgKz0gJywgJwogICAgICAgIGZvcm1hdHRlZF9hcmdzICs9IGt3YXJnc19zdHJpbmcKCiAgICByZXR1cm4gbWVzc2FnZSAlIGZvcm1hdHRlZF9hcmdzCgoKCmNsYXNzIF9DYWxsKHR1cGxlKToKICAgICIiIgogICAgQSB0dXBsZSBmb3IgaG9sZGluZyB0aGUgcmVzdWx0cyBvZiBhIGNhbGwgdG8gYSBtb2NrLCBlaXRoZXIgaW4gdGhlIGZvcm0KICAgIGAoYXJncywga3dhcmdzKWAgb3IgYChuYW1lLCBhcmdzLCBrd2FyZ3MpYC4KCiAgICBJZiBhcmdzIG9yIGt3YXJncyBhcmUgZW1wdHkgdGhlbiBhIGNhbGwgdHVwbGUgd2lsbCBjb21wYXJlIGVxdWFsIHRvCiAgICBhIHR1cGxlIHdpdGhvdXQgdGhvc2UgdmFsdWVzLiBUaGlzIG1ha2VzIGNvbXBhcmlzb25zIGxlc3MgdmVyYm9zZTo6CgogICAgICAgIF9DYWxsKCgnbmFtZScsICgpLCB7fSkpID09ICgnbmFtZScsKQogICAgICAgIF9DYWxsKCgnbmFtZScsICgxLCksIHt9KSkgPT0gKCduYW1lJywgKDEsKSkKICAgICAgICBfQ2FsbCgoKCksIHsnYSc6ICdiJ30pKSA9PSAoeydhJzogJ2InfSwpCgogICAgVGhlIGBfQ2FsbGAgb2JqZWN0IHByb3ZpZGVzIGEgdXNlZnVsIHNob3J0Y3V0IGZvciBjb21wYXJpbmcgd2l0aCBjYWxsOjoKCiAgICAgICAgX0NhbGwoKCgxLCAyKSwgeydhJzogM30pKSA9PSBjYWxsKDEsIDIsIGE9MykKICAgICAgICBfQ2FsbCgoJ2ZvbycsICgxLCAyKSwgeydhJzogM30pKSA9PSBjYWxsLmZvbygxLCAyLCBhPTMpCgogICAgSWYgdGhlIF9DYWxsIGhhcyBubyBuYW1lIHRoZW4gaXQgd2lsbCBtYXRjaCBhbnkgbmFtZS4KICAgICIiIgogICAgZGVmIF9fbmV3X18oY2xzLCB2YWx1ZT0oKSwgbmFtZT1Ob25lLCBwYXJlbnQ9Tm9uZSwgdHdvPUZhbHNlLAogICAgICAgICAgICAgICAgZnJvbV9rYWxsPVRydWUpOgogICAgICAgIG5hbWUgPSAnJwogICAgICAgIGFyZ3MgPSAoKQogICAgICAgIGt3YXJncyA9IHt9CiAgICAgICAgX2xlbiA9IGxlbih2YWx1ZSkKICAgICAgICBpZiBfbGVuID09IDM6CiAgICAgICAgICAgIG5hbWUsIGFyZ3MsIGt3YXJncyA9IHZhbHVlCiAgICAgICAgZWxpZiBfbGVuID09IDI6CiAgICAgICAgICAgIGZpcnN0LCBzZWNvbmQgPSB2YWx1ZQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGZpcnN0LCBzdHIpOgogICAgICAgICAgICAgICAgbmFtZSA9IGZpcnN0CiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNlY29uZCwgdHVwbGUpOgogICAgICAgICAgICAgICAgICAgIGFyZ3MgPSBzZWNvbmQKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAga3dhcmdzID0gc2Vjb25kCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBhcmdzLCBrd2FyZ3MgPSBmaXJzdCwgc2Vjb25kCiAgICAgICAgZWxpZiBfbGVuID09IDE6CiAgICAgICAgICAgIHZhbHVlLCA9IHZhbHVlCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHN0cik6CiAgICAgICAgICAgICAgICBuYW1lID0gdmFsdWUKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCB0dXBsZSk6CiAgICAgICAgICAgICAgICBhcmdzID0gdmFsdWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGt3YXJncyA9IHZhbHVlCgogICAgICAgIGlmIHR3bzoKICAgICAgICAgICAgcmV0dXJuIHR1cGxlLl9fbmV3X18oY2xzLCAoYXJncywga3dhcmdzKSkKCiAgICAgICAgcmV0dXJuIHR1cGxlLl9fbmV3X18oY2xzLCAobmFtZSwgYXJncywga3dhcmdzKSkKCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHZhbHVlPSgpLCBuYW1lPU5vbmUsIHBhcmVudD1Ob25lLCB0d289RmFsc2UsCiAgICAgICAgICAgICAgICAgZnJvbV9rYWxsPVRydWUpOgogICAgICAgIHNlbGYubmFtZSA9IG5hbWUKICAgICAgICBzZWxmLnBhcmVudCA9IHBhcmVudAogICAgICAgIHNlbGYuZnJvbV9rYWxsID0gZnJvbV9rYWxsCgoKICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIG90aGVyIGlzIEFOWToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICB0cnk6CiAgICAgICAgICAgIGxlbl9vdGhlciA9IGxlbihvdGhlcikKICAgICAgICBleGNlcHQgVHlwZUVycm9yOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgc2VsZl9uYW1lID0gJycKICAgICAgICBpZiBsZW4oc2VsZikgPT0gMjoKICAgICAgICAgICAgc2VsZl9hcmdzLCBzZWxmX2t3YXJncyA9IHNlbGYKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmX25hbWUsIHNlbGZfYXJncywgc2VsZl9rd2FyZ3MgPSBzZWxmCgogICAgICAgIG90aGVyX25hbWUgPSAnJwogICAgICAgIGlmIGxlbl9vdGhlciA9PSAwOgogICAgICAgICAgICBvdGhlcl9hcmdzLCBvdGhlcl9rd2FyZ3MgPSAoKSwge30KICAgICAgICBlbGlmIGxlbl9vdGhlciA9PSAzOgogICAgICAgICAgICBvdGhlcl9uYW1lLCBvdGhlcl9hcmdzLCBvdGhlcl9rd2FyZ3MgPSBvdGhlcgogICAgICAgIGVsaWYgbGVuX290aGVyID09IDE6CiAgICAgICAgICAgIHZhbHVlLCA9IG90aGVyCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIHR1cGxlKToKICAgICAgICAgICAgICAgIG90aGVyX2FyZ3MgPSB2YWx1ZQogICAgICAgICAgICAgICAgb3RoZXJfa3dhcmdzID0ge30KICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBzdHIpOgogICAgICAgICAgICAgICAgb3RoZXJfbmFtZSA9IHZhbHVlCiAgICAgICAgICAgICAgICBvdGhlcl9hcmdzLCBvdGhlcl9rd2FyZ3MgPSAoKSwge30KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG90aGVyX2FyZ3MgPSAoKQogICAgICAgICAgICAgICAgb3RoZXJfa3dhcmdzID0gdmFsdWUKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIGxlbiAyCiAgICAgICAgICAgICMgY291bGQgYmUgKG5hbWUsIGFyZ3MpIG9yIChuYW1lLCBrd2FyZ3MpIG9yIChhcmdzLCBrd2FyZ3MpCiAgICAgICAgICAgIGZpcnN0LCBzZWNvbmQgPSBvdGhlcgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGZpcnN0LCBzdHIpOgogICAgICAgICAgICAgICAgb3RoZXJfbmFtZSA9IGZpcnN0CiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNlY29uZCwgdHVwbGUpOgogICAgICAgICAgICAgICAgICAgIG90aGVyX2FyZ3MsIG90aGVyX2t3YXJncyA9IHNlY29uZCwge30KICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgb3RoZXJfYXJncywgb3RoZXJfa3dhcmdzID0gKCksIHNlY29uZAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb3RoZXJfYXJncywgb3RoZXJfa3dhcmdzID0gZmlyc3QsIHNlY29uZAoKICAgICAgICBpZiBzZWxmX25hbWUgYW5kIG90aGVyX25hbWUgIT0gc2VsZl9uYW1lOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAgICAgIyB0aGlzIG9yZGVyIGlzIGltcG9ydGFudCBmb3IgQU5ZIHRvIHdvcmshCiAgICAgICAgcmV0dXJuIChvdGhlcl9hcmdzLCBvdGhlcl9rd2FyZ3MpID09IChzZWxmX2FyZ3MsIHNlbGZfa3dhcmdzKQoKCiAgICBkZWYgX19uZV9fKHNlbGYsIG90aGVyKToKICAgICAgICByZXR1cm4gbm90IHNlbGYuX19lcV9fKG90aGVyKQoKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICBpZiBzZWxmLm5hbWUgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIF9DYWxsKCgnJywgYXJncywga3dhcmdzKSwgbmFtZT0nKCknKQoKICAgICAgICBuYW1lID0gc2VsZi5uYW1lICsgJygpJwogICAgICAgIHJldHVybiBfQ2FsbCgoc2VsZi5uYW1lLCBhcmdzLCBrd2FyZ3MpLCBuYW1lPW5hbWUsIHBhcmVudD1zZWxmKQoKCiAgICBkZWYgX19nZXRhdHRyX18oc2VsZiwgYXR0cik6CiAgICAgICAgaWYgc2VsZi5uYW1lIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBfQ2FsbChuYW1lPWF0dHIsIGZyb21fa2FsbD1GYWxzZSkKICAgICAgICBuYW1lID0gJyVzLiVzJyAlIChzZWxmLm5hbWUsIGF0dHIpCiAgICAgICAgcmV0dXJuIF9DYWxsKG5hbWU9bmFtZSwgcGFyZW50PXNlbGYsIGZyb21fa2FsbD1GYWxzZSkKCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgICAgIGlmIG5vdCBzZWxmLmZyb21fa2FsbDoKICAgICAgICAgICAgbmFtZSA9IHNlbGYubmFtZSBvciAnY2FsbCcKICAgICAgICAgICAgaWYgbmFtZS5zdGFydHN3aXRoKCcoKScpOgogICAgICAgICAgICAgICAgbmFtZSA9ICdjYWxsJXMnICUgbmFtZQogICAgICAgICAgICByZXR1cm4gbmFtZQoKICAgICAgICBpZiBsZW4oc2VsZikgPT0gMjoKICAgICAgICAgICAgbmFtZSA9ICdjYWxsJwogICAgICAgICAgICBhcmdzLCBrd2FyZ3MgPSBzZWxmCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbmFtZSwgYXJncywga3dhcmdzID0gc2VsZgogICAgICAgICAgICBpZiBub3QgbmFtZToKICAgICAgICAgICAgICAgIG5hbWUgPSAnY2FsbCcKICAgICAgICAgICAgZWxpZiBub3QgbmFtZS5zdGFydHN3aXRoKCcoKScpOgogICAgICAgICAgICAgICAgbmFtZSA9ICdjYWxsLiVzJyAlIG5hbWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG5hbWUgPSAnY2FsbCVzJyAlIG5hbWUKICAgICAgICByZXR1cm4gX2Zvcm1hdF9jYWxsX3NpZ25hdHVyZShuYW1lLCBhcmdzLCBrd2FyZ3MpCgoKICAgIGRlZiBjYWxsX2xpc3Qoc2VsZik6CiAgICAgICAgIiIiRm9yIGEgY2FsbCBvYmplY3QgdGhhdCByZXByZXNlbnRzIG11bHRpcGxlIGNhbGxzLCBgY2FsbF9saXN0YAogICAgICAgIHJldHVybnMgYSBsaXN0IG9mIGFsbCB0aGUgaW50ZXJtZWRpYXRlIGNhbGxzIGFzIHdlbGwgYXMgdGhlCiAgICAgICAgZmluYWwgY2FsbC4iIiIKICAgICAgICB2YWxzID0gW10KICAgICAgICB0aGluZyA9IHNlbGYKICAgICAgICB3aGlsZSB0aGluZyBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgdGhpbmcuZnJvbV9rYWxsOgogICAgICAgICAgICAgICAgdmFscy5hcHBlbmQodGhpbmcpCiAgICAgICAgICAgIHRoaW5nID0gdGhpbmcucGFyZW50CiAgICAgICAgcmV0dXJuIF9DYWxsTGlzdChyZXZlcnNlZCh2YWxzKSkKCgpjYWxsID0gX0NhbGwoZnJvbV9rYWxsPUZhbHNlKQoKCgpkZWYgY3JlYXRlX2F1dG9zcGVjKHNwZWMsIHNwZWNfc2V0PUZhbHNlLCBpbnN0YW5jZT1GYWxzZSwgX3BhcmVudD1Ob25lLAogICAgICAgICAgICAgICAgICAgIF9uYW1lPU5vbmUsICoqa3dhcmdzKToKICAgICIiIkNyZWF0ZSBhIG1vY2sgb2JqZWN0IHVzaW5nIGFub3RoZXIgb2JqZWN0IGFzIGEgc3BlYy4gQXR0cmlidXRlcyBvbiB0aGUKICAgIG1vY2sgd2lsbCB1c2UgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9uIHRoZSBgc3BlY2Agb2JqZWN0IGFzIHRoZWlyCiAgICBzcGVjLgoKICAgIEZ1bmN0aW9ucyBvciBtZXRob2RzIGJlaW5nIG1vY2tlZCB3aWxsIGhhdmUgdGhlaXIgYXJndW1lbnRzIGNoZWNrZWQKICAgIHRvIGNoZWNrIHRoYXQgdGhleSBhcmUgY2FsbGVkIHdpdGggdGhlIGNvcnJlY3Qgc2lnbmF0dXJlLgoKICAgIElmIGBzcGVjX3NldGAgaXMgVHJ1ZSB0aGVuIGF0dGVtcHRpbmcgdG8gc2V0IGF0dHJpYnV0ZXMgdGhhdCBkb24ndCBleGlzdAogICAgb24gdGhlIHNwZWMgb2JqZWN0IHdpbGwgcmFpc2UgYW4gYEF0dHJpYnV0ZUVycm9yYC4KCiAgICBJZiBhIGNsYXNzIGlzIHVzZWQgYXMgYSBzcGVjIHRoZW4gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbW9jayAodGhlCiAgICBpbnN0YW5jZSBvZiB0aGUgY2xhc3MpIHdpbGwgaGF2ZSB0aGUgc2FtZSBzcGVjLiBZb3UgY2FuIHVzZSBhIGNsYXNzIGFzIHRoZQogICAgc3BlYyBmb3IgYW4gaW5zdGFuY2Ugb2JqZWN0IGJ5IHBhc3NpbmcgYGluc3RhbmNlPVRydWVgLiBUaGUgcmV0dXJuZWQgbW9jawogICAgd2lsbCBvbmx5IGJlIGNhbGxhYmxlIGlmIGluc3RhbmNlcyBvZiB0aGUgbW9jayBhcmUgY2FsbGFibGUuCgogICAgYGNyZWF0ZV9hdXRvc3BlY2AgYWxzbyB0YWtlcyBhcmJpdHJhcnkga2V5d29yZCBhcmd1bWVudHMgdGhhdCBhcmUgcGFzc2VkIHRvCiAgICB0aGUgY29uc3RydWN0b3Igb2YgdGhlIGNyZWF0ZWQgbW9jay4iIiIKICAgIGlmIF9pc19saXN0KHNwZWMpOgogICAgICAgICMgY2FuJ3QgcGFzcyBhIGxpc3QgaW5zdGFuY2UgdG8gdGhlIG1vY2sgY29uc3RydWN0b3IgYXMgaXQgd2lsbCBiZQogICAgICAgICMgaW50ZXJwcmV0ZWQgYXMgYSBsaXN0IG9mIHN0cmluZ3MKICAgICAgICBzcGVjID0gdHlwZShzcGVjKQoKICAgIGlzX3R5cGUgPSBpc2luc3RhbmNlKHNwZWMsIHR5cGUpCgogICAgX2t3YXJncyA9IHsnc3BlYyc6IHNwZWN9CiAgICBpZiBzcGVjX3NldDoKICAgICAgICBfa3dhcmdzID0geydzcGVjX3NldCc6IHNwZWN9CiAgICBlbGlmIHNwZWMgaXMgTm9uZToKICAgICAgICAjIE5vbmUgd2UgbW9jayB3aXRoIGEgbm9ybWFsIG1vY2sgd2l0aG91dCBhIHNwZWMKICAgICAgICBfa3dhcmdzID0ge30KCiAgICBfa3dhcmdzLnVwZGF0ZShrd2FyZ3MpCgogICAgS2xhc3MgPSBNYWdpY01vY2sKICAgIGlmIHR5cGUoc3BlYykgaW4gRGVzY3JpcHRvclR5cGVzOgogICAgICAgICMgZGVzY3JpcHRvcnMgZG9uJ3QgaGF2ZSBhIHNwZWMKICAgICAgICAjIGJlY2F1c2Ugd2UgZG9uJ3Qga25vdyB3aGF0IHR5cGUgdGhleSByZXR1cm4KICAgICAgICBfa3dhcmdzID0ge30KICAgIGVsaWYgbm90IF9jYWxsYWJsZShzcGVjKToKICAgICAgICBLbGFzcyA9IE5vbkNhbGxhYmxlTWFnaWNNb2NrCiAgICBlbGlmIGlzX3R5cGUgYW5kIGluc3RhbmNlIGFuZCBub3QgX2luc3RhbmNlX2NhbGxhYmxlKHNwZWMpOgogICAgICAgIEtsYXNzID0gTm9uQ2FsbGFibGVNYWdpY01vY2sKCiAgICBfbmV3X25hbWUgPSBfbmFtZQogICAgaWYgX3BhcmVudCBpcyBOb25lOgogICAgICAgICMgZm9yIGEgdG9wIGxldmVsIG9iamVjdCBubyBfbmV3X25hbWUgc2hvdWxkIGJlIHNldAogICAgICAgIF9uZXdfbmFtZSA9ICcnCgogICAgbW9jayA9IEtsYXNzKHBhcmVudD1fcGFyZW50LCBfbmV3X3BhcmVudD1fcGFyZW50LCBfbmV3X25hbWU9X25ld19uYW1lLAogICAgICAgICAgICAgICAgIG5hbWU9X25hbWUsICoqX2t3YXJncykKCiAgICBpZiBpc2luc3RhbmNlKHNwZWMsIEZ1bmN0aW9uVHlwZXMpOgogICAgICAgICMgc2hvdWxkIG9ubHkgaGFwcGVuIGF0IHRoZSB0b3AgbGV2ZWwgYmVjYXVzZSB3ZSBkb24ndAogICAgICAgICMgcmVjdXJzZSBmb3IgZnVuY3Rpb25zCiAgICAgICAgbW9jayA9IF9zZXRfc2lnbmF0dXJlKG1vY2ssIHNwZWMpCiAgICBlbHNlOgogICAgICAgIF9jaGVja19zaWduYXR1cmUoc3BlYywgbW9jaywgaXNfdHlwZSwgaW5zdGFuY2UpCgogICAgaWYgX3BhcmVudCBpcyBub3QgTm9uZSBhbmQgbm90IGluc3RhbmNlOgogICAgICAgIF9wYXJlbnQuX21vY2tfY2hpbGRyZW5bX25hbWVdID0gbW9jawoKICAgIGlmIGlzX3R5cGUgYW5kIG5vdCBpbnN0YW5jZSBhbmQgJ3JldHVybl92YWx1ZScgbm90IGluIGt3YXJnczoKICAgICAgICBtb2NrLnJldHVybl92YWx1ZSA9IGNyZWF0ZV9hdXRvc3BlYyhzcGVjLCBzcGVjX3NldCwgaW5zdGFuY2U9VHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbmFtZT0nKCknLCBfcGFyZW50PW1vY2spCgogICAgZm9yIGVudHJ5IGluIGRpcihzcGVjKToKICAgICAgICBpZiBfaXNfbWFnaWMoZW50cnkpOgogICAgICAgICAgICAjIE1hZ2ljTW9jayBhbHJlYWR5IGRvZXMgdGhlIHVzZWZ1bCBtYWdpYyBtZXRob2RzIGZvciB1cwogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAjIFhYWFggZG8gd2UgbmVlZCBhIGJldHRlciB3YXkgb2YgZ2V0dGluZyBhdHRyaWJ1dGVzIHdpdGhvdXQKICAgICAgICAjIHRyaWdnZXJpbmcgY29kZSBleGVjdXRpb24gKD8pIFByb2JhYmx5IG5vdCAtIHdlIG5lZWQgdGhlIGFjdHVhbAogICAgICAgICMgb2JqZWN0IHRvIG1vY2sgaXQgc28gd2Ugd291bGQgcmF0aGVyIHRyaWdnZXIgYSBwcm9wZXJ0eSB0aGFuIG1vY2sKICAgICAgICAjIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yLiBMaWtld2lzZSB3ZSB3YW50IHRvIG1vY2sgb3V0IGR5bmFtaWNhbGx5CiAgICAgICAgIyBwcm92aWRlZCBhdHRyaWJ1dGVzLgogICAgICAgICMgWFhYWCB3aGF0IGFib3V0IGF0dHJpYnV0ZXMgdGhhdCByYWlzZSBleGNlcHRpb25zIG90aGVyIHRoYW4KICAgICAgICAjIEF0dHJpYnV0ZUVycm9yIG9uIGJlaW5nIGZldGNoZWQ/CiAgICAgICAgIyB3ZSBjb3VsZCBiZSByZXNpbGllbnQgYWdhaW5zdCBpdCwgb3IgY2F0Y2ggYW5kIHByb3BhZ2F0ZSB0aGUKICAgICAgICAjIGV4Y2VwdGlvbiB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgZmV0Y2hlZCBmcm9tIHRoZSBtb2NrCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcmlnaW5hbCA9IGdldGF0dHIoc3BlYywgZW50cnkpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBrd2FyZ3MgPSB7J3NwZWMnOiBvcmlnaW5hbH0KICAgICAgICBpZiBzcGVjX3NldDoKICAgICAgICAgICAga3dhcmdzID0geydzcGVjX3NldCc6IG9yaWdpbmFsfQoKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvcmlnaW5hbCwgRnVuY3Rpb25UeXBlcyk6CiAgICAgICAgICAgIG5ldyA9IF9TcGVjU3RhdGUob3JpZ2luYWwsIHNwZWNfc2V0LCBtb2NrLCBlbnRyeSwgaW5zdGFuY2UpCiAgICAgICAgICAgIG1vY2suX21vY2tfY2hpbGRyZW5bZW50cnldID0gbmV3CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcGFyZW50ID0gbW9jawogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNwZWMsIEZ1bmN0aW9uVHlwZXMpOgogICAgICAgICAgICAgICAgcGFyZW50ID0gbW9jay5tb2NrCgogICAgICAgICAgICBuZXcgPSBNYWdpY01vY2socGFyZW50PXBhcmVudCwgbmFtZT1lbnRyeSwgX25ld19uYW1lPWVudHJ5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX25ld19wYXJlbnQ9cGFyZW50LCAqKmt3YXJncykKICAgICAgICAgICAgbW9jay5fbW9ja19jaGlsZHJlbltlbnRyeV0gPSBuZXcKICAgICAgICAgICAgc2tpcGZpcnN0ID0gX211c3Rfc2tpcChzcGVjLCBlbnRyeSwgaXNfdHlwZSkKICAgICAgICAgICAgX2NoZWNrX3NpZ25hdHVyZShvcmlnaW5hbCwgbmV3LCBza2lwZmlyc3Q9c2tpcGZpcnN0KQoKICAgICAgICAjIHNvIGZ1bmN0aW9ucyBjcmVhdGVkIHdpdGggX3NldF9zaWduYXR1cmUgYmVjb21lIGluc3RhbmNlIGF0dHJpYnV0ZXMsCiAgICAgICAgIyAqcGx1cyogdGhlaXIgdW5kZXJseWluZyBtb2NrIGV4aXN0cyBpbiBfbW9ja19jaGlsZHJlbiBvZiB0aGUgcGFyZW50CiAgICAgICAgIyBtb2NrLiBBZGRpbmcgdG8gX21vY2tfY2hpbGRyZW4gbWF5IGJlIHVubmVjZXNzYXJ5IHdoZXJlIHdlIGFyZSBhbHNvCiAgICAgICAgIyBzZXR0aW5nIGFzIGFuIGluc3RhbmNlIGF0dHJpYnV0ZT8KICAgICAgICBpZiBpc2luc3RhbmNlKG5ldywgRnVuY3Rpb25UeXBlcyk6CiAgICAgICAgICAgIHNldGF0dHIobW9jaywgZW50cnksIG5ldykKCiAgICByZXR1cm4gbW9jawoKCmRlZiBfbXVzdF9za2lwKHNwZWMsIGVudHJ5LCBpc190eXBlKToKICAgIGlmIG5vdCBpc2luc3RhbmNlKHNwZWMsIHR5cGUpOgogICAgICAgIGlmIGVudHJ5IGluIGdldGF0dHIoc3BlYywgJ19fZGljdF9fJywge30pOgogICAgICAgICAgICAjIGluc3RhbmNlIGF0dHJpYnV0ZSAtIHNob3VsZG4ndCBza2lwCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHNwZWMgPSBzcGVjLl9fY2xhc3NfXwoKICAgIGZvciBrbGFzcyBpbiBzcGVjLl9fbXJvX186CiAgICAgICAgcmVzdWx0ID0ga2xhc3MuX19kaWN0X18uZ2V0KGVudHJ5LCBERUZBVUxUKQogICAgICAgIGlmIHJlc3VsdCBpcyBERUZBVUxUOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGlmIGlzaW5zdGFuY2UocmVzdWx0LCAoc3RhdGljbWV0aG9kLCBjbGFzc21ldGhvZCkpOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICByZXR1cm4gaXNfdHlwZQoKICAgICMgc2hvdWxkbid0IGdldCBoZXJlIHVubGVzcyBmdW5jdGlvbiBpcyBhIGR5bmFtaWNhbGx5IHByb3ZpZGVkIGF0dHJpYnV0ZQogICAgIyBYWFhYIHVudGVzdGVkIGJlaGF2aW91cgogICAgcmV0dXJuIGlzX3R5cGUKCgpkZWYgX2dldF9jbGFzcyhvYmopOgogICAgdHJ5OgogICAgICAgIHJldHVybiBvYmouX19jbGFzc19fCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgIyBpdCBpcyBwb3NzaWJsZSBmb3Igb2JqZWN0cyB0byBoYXZlIG5vIF9fY2xhc3NfXwogICAgICAgIHJldHVybiB0eXBlKG9iaikKCgpjbGFzcyBfU3BlY1N0YXRlKG9iamVjdCk6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHNwZWMsIHNwZWNfc2V0PUZhbHNlLCBwYXJlbnQ9Tm9uZSwKICAgICAgICAgICAgICAgICBuYW1lPU5vbmUsIGlkcz1Ob25lLCBpbnN0YW5jZT1GYWxzZSk6CiAgICAgICAgc2VsZi5zcGVjID0gc3BlYwogICAgICAgIHNlbGYuaWRzID0gaWRzCiAgICAgICAgc2VsZi5zcGVjX3NldCA9IHNwZWNfc2V0CiAgICAgICAgc2VsZi5wYXJlbnQgPSBwYXJlbnQKICAgICAgICBzZWxmLmluc3RhbmNlID0gaW5zdGFuY2UKICAgICAgICBzZWxmLm5hbWUgPSBuYW1lCgoKRnVuY3Rpb25UeXBlcyA9ICgKICAgICMgcHl0aG9uIGZ1bmN0aW9uCiAgICB0eXBlKGNyZWF0ZV9hdXRvc3BlYyksCiAgICAjIGluc3RhbmNlIG1ldGhvZAogICAgdHlwZShBTlkuX19lcV9fKSwKKQoKCmZpbGVfc3BlYyA9IE5vbmUKCgpkZWYgbW9ja19vcGVuKG1vY2s9Tm9uZSwgcmVhZF9kYXRhPScnKToKICAgICIiIgogICAgQSBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGEgbW9jayB0byByZXBsYWNlIHRoZSB1c2Ugb2YgYG9wZW5gLiBJdCB3b3JrcwogICAgZm9yIGBvcGVuYCBjYWxsZWQgZGlyZWN0bHkgb3IgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlci4KCiAgICBUaGUgYG1vY2tgIGFyZ3VtZW50IGlzIHRoZSBtb2NrIG9iamVjdCB0byBjb25maWd1cmUuIElmIGBOb25lYCAodGhlCiAgICBkZWZhdWx0KSB0aGVuIGEgYE1hZ2ljTW9ja2Agd2lsbCBiZSBjcmVhdGVkIGZvciB5b3UsIHdpdGggdGhlIEFQSSBsaW1pdGVkCiAgICB0byBtZXRob2RzIG9yIGF0dHJpYnV0ZXMgYXZhaWxhYmxlIG9uIHN0YW5kYXJkIGZpbGUgaGFuZGxlcy4KCiAgICBgcmVhZF9kYXRhYCBpcyBhIHN0cmluZyBmb3IgdGhlIGByZWFkYCBtZXRob2Qgb2YgdGhlIGZpbGUgaGFuZGxlIHRvIHJldHVybi4KICAgIFRoaXMgaXMgYW4gZW1wdHkgc3RyaW5nIGJ5IGRlZmF1bHQuCiAgICAiIiIKICAgIGdsb2JhbCBmaWxlX3NwZWMKICAgIGlmIGZpbGVfc3BlYyBpcyBOb25lOgogICAgICAgIGltcG9ydCBfaW8KICAgICAgICBmaWxlX3NwZWMgPSBsaXN0KHNldChkaXIoX2lvLlRleHRJT1dyYXBwZXIpKS51bmlvbihzZXQoZGlyKF9pby5CeXRlc0lPKSkpKQoKICAgIGlmIG1vY2sgaXMgTm9uZToKICAgICAgICBtb2NrID0gTWFnaWNNb2NrKG5hbWU9J29wZW4nLCBzcGVjPW9wZW4pCgogICAgaGFuZGxlID0gTWFnaWNNb2NrKHNwZWM9ZmlsZV9zcGVjKQogICAgaGFuZGxlLndyaXRlLnJldHVybl92YWx1ZSA9IE5vbmUKICAgIGhhbmRsZS5fX2VudGVyX18ucmV0dXJuX3ZhbHVlID0gaGFuZGxlCiAgICBoYW5kbGUucmVhZC5yZXR1cm5fdmFsdWUgPSByZWFkX2RhdGEKCiAgICBtb2NrLnJldHVybl92YWx1ZSA9IGhhbmRsZQogICAgcmV0dXJuIG1vY2sKCgpjbGFzcyBQcm9wZXJ0eU1vY2soTW9jayk6CiAgICAiIiIKICAgIEEgbW9jayBpbnRlbmRlZCB0byBiZSB1c2VkIGFzIGEgcHJvcGVydHksIG9yIG90aGVyIGRlc2NyaXB0b3IsIG9uIGEgY2xhc3MuCiAgICBgUHJvcGVydHlNb2NrYCBwcm92aWRlcyBgX19nZXRfX2AgYW5kIGBfX3NldF9fYCBtZXRob2RzIHNvIHlvdSBjYW4gc3BlY2lmeQogICAgYSByZXR1cm4gdmFsdWUgd2hlbiBpdCBpcyBmZXRjaGVkLgoKICAgIEZldGNoaW5nIGEgYFByb3BlcnR5TW9ja2AgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgY2FsbHMgdGhlIG1vY2ssIHdpdGgKICAgIG5vIGFyZ3MuIFNldHRpbmcgaXQgY2FsbHMgdGhlIG1vY2sgd2l0aCB0aGUgdmFsdWUgYmVpbmcgc2V0LgogICAgIiIiCiAgICBkZWYgX2dldF9jaGlsZF9tb2NrKHNlbGYsICoqa3dhcmdzKToKICAgICAgICByZXR1cm4gTWFnaWNNb2NrKCoqa3dhcmdzKQoKICAgIGRlZiBfX2dldF9fKHNlbGYsIG9iaiwgb2JqX3R5cGUpOgogICAgICAgIHJldHVybiBzZWxmKCkKICAgIGRlZiBfX3NldF9fKHNlbGYsIG9iaiwgdmFsKToKICAgICAgICBzZWxmKHZhbCkK',
'/Lib/unittest/result.py':'IiIiVGVzdCByZXN1bHQgb2JqZWN0IiIiCgppbXBvcnQgaW8KaW1wb3J0IHN5cwppbXBvcnQgdHJhY2ViYWNrCgpmcm9tIC4gaW1wb3J0IHV0aWwKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKZGVmIGZhaWxmYXN0KG1ldGhvZCk6CiAgICBAd3JhcHMobWV0aG9kKQogICAgZGVmIGlubmVyKHNlbGYsICphcmdzLCAqKmt3KToKICAgICAgICBpZiBnZXRhdHRyKHNlbGYsICdmYWlsZmFzdCcsIEZhbHNlKToKICAgICAgICAgICAgc2VsZi5zdG9wKCkKICAgICAgICByZXR1cm4gbWV0aG9kKHNlbGYsICphcmdzLCAqKmt3KQogICAgcmV0dXJuIGlubmVyCgpTVERPVVRfTElORSA9ICdcblN0ZG91dDpcbiVzJwpTVERFUlJfTElORSA9ICdcblN0ZGVycjpcbiVzJwoKCmNsYXNzIFRlc3RSZXN1bHQob2JqZWN0KToKICAgICIiIkhvbGRlciBmb3IgdGVzdCByZXN1bHQgaW5mb3JtYXRpb24uCgogICAgVGVzdCByZXN1bHRzIGFyZSBhdXRvbWF0aWNhbGx5IG1hbmFnZWQgYnkgdGhlIFRlc3RDYXNlIGFuZCBUZXN0U3VpdGUKICAgIGNsYXNzZXMsIGFuZCBkbyBub3QgbmVlZCB0byBiZSBleHBsaWNpdGx5IG1hbmlwdWxhdGVkIGJ5IHdyaXRlcnMgb2YgdGVzdHMuCgogICAgRWFjaCBpbnN0YW5jZSBob2xkcyB0aGUgdG90YWwgbnVtYmVyIG9mIHRlc3RzIHJ1biwgYW5kIGNvbGxlY3Rpb25zIG9mCiAgICBmYWlsdXJlcyBhbmQgZXJyb3JzIHRoYXQgb2NjdXJyZWQgYW1vbmcgdGhvc2UgdGVzdCBydW5zLiBUaGUgY29sbGVjdGlvbnMKICAgIGNvbnRhaW4gdHVwbGVzIG9mICh0ZXN0Y2FzZSwgZXhjZXB0aW9uaW5mbyksIHdoZXJlIGV4Y2VwdGlvbmluZm8gaXMgdGhlCiAgICBmb3JtYXR0ZWQgdHJhY2ViYWNrIG9mIHRoZSBlcnJvciB0aGF0IG9jY3VycmVkLgogICAgIiIiCiAgICBfcHJldmlvdXNUZXN0Q2xhc3MgPSBOb25lCiAgICBfdGVzdFJ1bkVudGVyZWQgPSBGYWxzZQogICAgX21vZHVsZVNldFVwRmFpbGVkID0gRmFsc2UKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzdHJlYW09Tm9uZSwgZGVzY3JpcHRpb25zPU5vbmUsIHZlcmJvc2l0eT1Ob25lKToKICAgICAgICBzZWxmLmZhaWxmYXN0ID0gRmFsc2UKICAgICAgICBzZWxmLmZhaWx1cmVzID0gW10KICAgICAgICBzZWxmLmVycm9ycyA9IFtdCiAgICAgICAgc2VsZi50ZXN0c1J1biA9IDAKICAgICAgICBzZWxmLnNraXBwZWQgPSBbXQogICAgICAgIHNlbGYuZXhwZWN0ZWRGYWlsdXJlcyA9IFtdCiAgICAgICAgc2VsZi51bmV4cGVjdGVkU3VjY2Vzc2VzID0gW10KICAgICAgICBzZWxmLnNob3VsZFN0b3AgPSBGYWxzZQogICAgICAgIHNlbGYuYnVmZmVyID0gRmFsc2UKICAgICAgICBzZWxmLl9zdGRvdXRfYnVmZmVyID0gTm9uZQogICAgICAgIHNlbGYuX3N0ZGVycl9idWZmZXIgPSBOb25lCiAgICAgICAgc2VsZi5fb3JpZ2luYWxfc3Rkb3V0ID0gc3lzLnN0ZG91dAogICAgICAgIHNlbGYuX29yaWdpbmFsX3N0ZGVyciA9IHN5cy5zdGRlcnIKICAgICAgICBzZWxmLl9taXJyb3JPdXRwdXQgPSBGYWxzZQoKICAgIGRlZiBwcmludEVycm9ycyhzZWxmKToKICAgICAgICAiQ2FsbGVkIGJ5IFRlc3RSdW5uZXIgYWZ0ZXIgdGVzdCBydW4iCgogICAgZGVmIHN0YXJ0VGVzdChzZWxmLCB0ZXN0KToKICAgICAgICAiQ2FsbGVkIHdoZW4gdGhlIGdpdmVuIHRlc3QgaXMgYWJvdXQgdG8gYmUgcnVuIgogICAgICAgIHNlbGYudGVzdHNSdW4gKz0gMQogICAgICAgIHNlbGYuX21pcnJvck91dHB1dCA9IEZhbHNlCiAgICAgICAgc2VsZi5fc2V0dXBTdGRvdXQoKQoKICAgIGRlZiBfc2V0dXBTdGRvdXQoc2VsZik6CiAgICAgICAgaWYgc2VsZi5idWZmZXI6CiAgICAgICAgICAgIGlmIHNlbGYuX3N0ZGVycl9idWZmZXIgaXMgTm9uZToKICAgICAgICAgICAgICAgIHNlbGYuX3N0ZGVycl9idWZmZXIgPSBpby5TdHJpbmdJTygpCiAgICAgICAgICAgICAgICBzZWxmLl9zdGRvdXRfYnVmZmVyID0gaW8uU3RyaW5nSU8oKQogICAgICAgICAgICBzeXMuc3Rkb3V0ID0gc2VsZi5fc3Rkb3V0X2J1ZmZlcgogICAgICAgICAgICBzeXMuc3RkZXJyID0gc2VsZi5fc3RkZXJyX2J1ZmZlcgoKICAgIGRlZiBzdGFydFRlc3RSdW4oc2VsZik6CiAgICAgICAgIiIiQ2FsbGVkIG9uY2UgYmVmb3JlIGFueSB0ZXN0cyBhcmUgZXhlY3V0ZWQuCgogICAgICAgIFNlZSBzdGFydFRlc3QgZm9yIGEgbWV0aG9kIGNhbGxlZCBiZWZvcmUgZWFjaCB0ZXN0LgogICAgICAgICIiIgoKICAgIGRlZiBzdG9wVGVzdChzZWxmLCB0ZXN0KToKICAgICAgICAiIiJDYWxsZWQgd2hlbiB0aGUgZ2l2ZW4gdGVzdCBoYXMgYmVlbiBydW4iIiIKICAgICAgICBzZWxmLl9yZXN0b3JlU3Rkb3V0KCkKICAgICAgICBzZWxmLl9taXJyb3JPdXRwdXQgPSBGYWxzZQoKICAgIGRlZiBfcmVzdG9yZVN0ZG91dChzZWxmKToKICAgICAgICBpZiBzZWxmLmJ1ZmZlcjoKICAgICAgICAgICAgaWYgc2VsZi5fbWlycm9yT3V0cHV0OgogICAgICAgICAgICAgICAgb3V0cHV0ID0gc3lzLnN0ZG91dC5nZXR2YWx1ZSgpCiAgICAgICAgICAgICAgICBlcnJvciA9IHN5cy5zdGRlcnIuZ2V0dmFsdWUoKQogICAgICAgICAgICAgICAgaWYgb3V0cHV0OgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBvdXRwdXQuZW5kc3dpdGgoJ1xuJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSAnXG4nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fb3JpZ2luYWxfc3Rkb3V0LndyaXRlKFNURE9VVF9MSU5FICUgb3V0cHV0KQogICAgICAgICAgICAgICAgaWYgZXJyb3I6CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGVycm9yLmVuZHN3aXRoKCdcbicpOgogICAgICAgICAgICAgICAgICAgICAgICBlcnJvciArPSAnXG4nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fb3JpZ2luYWxfc3RkZXJyLndyaXRlKFNUREVSUl9MSU5FICUgZXJyb3IpCgogICAgICAgICAgICBzeXMuc3Rkb3V0ID0gc2VsZi5fb3JpZ2luYWxfc3Rkb3V0CiAgICAgICAgICAgIHN5cy5zdGRlcnIgPSBzZWxmLl9vcmlnaW5hbF9zdGRlcnIKICAgICAgICAgICAgc2VsZi5fc3Rkb3V0X2J1ZmZlci5zZWVrKDApCiAgICAgICAgICAgIHNlbGYuX3N0ZG91dF9idWZmZXIudHJ1bmNhdGUoKQogICAgICAgICAgICBzZWxmLl9zdGRlcnJfYnVmZmVyLnNlZWsoMCkKICAgICAgICAgICAgc2VsZi5fc3RkZXJyX2J1ZmZlci50cnVuY2F0ZSgpCgogICAgZGVmIHN0b3BUZXN0UnVuKHNlbGYpOgogICAgICAgICIiIkNhbGxlZCBvbmNlIGFmdGVyIGFsbCB0ZXN0cyBhcmUgZXhlY3V0ZWQuCgogICAgICAgIFNlZSBzdG9wVGVzdCBmb3IgYSBtZXRob2QgY2FsbGVkIGFmdGVyIGVhY2ggdGVzdC4KICAgICAgICAiIiIKCiAgICBAZmFpbGZhc3QKICAgIGRlZiBhZGRFcnJvcihzZWxmLCB0ZXN0LCBlcnIpOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4gJ2VycicgaXMgYSB0dXBsZSBvZiB2YWx1ZXMgYXMKICAgICAgICByZXR1cm5lZCBieSBzeXMuZXhjX2luZm8oKS4KICAgICAgICAiIiIKICAgICAgICBzZWxmLmVycm9ycy5hcHBlbmQoKHRlc3QsIHNlbGYuX2V4Y19pbmZvX3RvX3N0cmluZyhlcnIsIHRlc3QpKSkKICAgICAgICBzZWxmLl9taXJyb3JPdXRwdXQgPSBUcnVlCgogICAgQGZhaWxmYXN0CiAgICBkZWYgYWRkRmFpbHVyZShzZWxmLCB0ZXN0LCBlcnIpOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4gJ2VycicgaXMgYSB0dXBsZSBvZiB2YWx1ZXMgYXMKICAgICAgICByZXR1cm5lZCBieSBzeXMuZXhjX2luZm8oKS4iIiIKICAgICAgICBzZWxmLmZhaWx1cmVzLmFwcGVuZCgodGVzdCwgc2VsZi5fZXhjX2luZm9fdG9fc3RyaW5nKGVyciwgdGVzdCkpKQogICAgICAgIHNlbGYuX21pcnJvck91dHB1dCA9IFRydWUKCiAgICBkZWYgYWRkU3VjY2VzcyhzZWxmLCB0ZXN0KToKICAgICAgICAiQ2FsbGVkIHdoZW4gYSB0ZXN0IGhhcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgIHBhc3MKCiAgICBkZWYgYWRkU2tpcChzZWxmLCB0ZXN0LCByZWFzb24pOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGEgdGVzdCBpcyBza2lwcGVkLiIiIgogICAgICAgIHNlbGYuc2tpcHBlZC5hcHBlbmQoKHRlc3QsIHJlYXNvbikpCgogICAgZGVmIGFkZEV4cGVjdGVkRmFpbHVyZShzZWxmLCB0ZXN0LCBlcnIpOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGFuIGV4cGVjdGVkIGZhaWx1cmUvZXJyb3Igb2NjdXJlZC4iIiIKICAgICAgICBzZWxmLmV4cGVjdGVkRmFpbHVyZXMuYXBwZW5kKAogICAgICAgICAgICAodGVzdCwgc2VsZi5fZXhjX2luZm9fdG9fc3RyaW5nKGVyciwgdGVzdCkpKQoKICAgIEBmYWlsZmFzdAogICAgZGVmIGFkZFVuZXhwZWN0ZWRTdWNjZXNzKHNlbGYsIHRlc3QpOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGEgdGVzdCB3YXMgZXhwZWN0ZWQgdG8gZmFpbCwgYnV0IHN1Y2NlZWQuIiIiCiAgICAgICAgc2VsZi51bmV4cGVjdGVkU3VjY2Vzc2VzLmFwcGVuZCh0ZXN0KQoKICAgIGRlZiB3YXNTdWNjZXNzZnVsKHNlbGYpOgogICAgICAgICJUZWxscyB3aGV0aGVyIG9yIG5vdCB0aGlzIHJlc3VsdCB3YXMgYSBzdWNjZXNzIgogICAgICAgIHJldHVybiBsZW4oc2VsZi5mYWlsdXJlcykgPT0gbGVuKHNlbGYuZXJyb3JzKSA9PSAwCgogICAgZGVmIHN0b3Aoc2VsZik6CiAgICAgICAgIkluZGljYXRlcyB0aGF0IHRoZSB0ZXN0cyBzaG91bGQgYmUgYWJvcnRlZCIKICAgICAgICBzZWxmLnNob3VsZFN0b3AgPSBUcnVlCgogICAgZGVmIF9leGNfaW5mb190b19zdHJpbmcoc2VsZiwgZXJyLCB0ZXN0KToKICAgICAgICAiIiJDb252ZXJ0cyBhIHN5cy5leGNfaW5mbygpLXN0eWxlIHR1cGxlIG9mIHZhbHVlcyBpbnRvIGEgc3RyaW5nLiIiIgogICAgICAgIGV4Y3R5cGUsIHZhbHVlLCB0YiA9IGVycgogICAgICAgICMgU2tpcCB0ZXN0IHJ1bm5lciB0cmFjZWJhY2sgbGV2ZWxzCiAgICAgICAgd2hpbGUgdGIgYW5kIHNlbGYuX2lzX3JlbGV2YW50X3RiX2xldmVsKHRiKToKICAgICAgICAgICAgdGIgPSB0Yi50Yl9uZXh0CgogICAgICAgIGlmIGV4Y3R5cGUgaXMgdGVzdC5mYWlsdXJlRXhjZXB0aW9uOgogICAgICAgICAgICAjIFNraXAgYXNzZXJ0KigpIHRyYWNlYmFjayBsZXZlbHMKICAgICAgICAgICAgbGVuZ3RoID0gc2VsZi5fY291bnRfcmVsZXZhbnRfdGJfbGV2ZWxzKHRiKQogICAgICAgICAgICBtc2dMaW5lcyA9IHRyYWNlYmFjay5mb3JtYXRfZXhjZXB0aW9uKGV4Y3R5cGUsIHZhbHVlLCB0YiwgbGVuZ3RoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1zZ0xpbmVzID0gdHJhY2ViYWNrLmZvcm1hdF9leGNlcHRpb24oZXhjdHlwZSwgdmFsdWUsIHRiKQoKICAgICAgICBpZiBzZWxmLmJ1ZmZlcjoKICAgICAgICAgICAgb3V0cHV0ID0gc3lzLnN0ZG91dC5nZXR2YWx1ZSgpCiAgICAgICAgICAgIGVycm9yID0gc3lzLnN0ZGVyci5nZXR2YWx1ZSgpCiAgICAgICAgICAgIGlmIG91dHB1dDoKICAgICAgICAgICAgICAgIGlmIG5vdCBvdXRwdXQuZW5kc3dpdGgoJ1xuJyk6CiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9ICdcbicKICAgICAgICAgICAgICAgIG1zZ0xpbmVzLmFwcGVuZChTVERPVVRfTElORSAlIG91dHB1dCkKICAgICAgICAgICAgaWYgZXJyb3I6CiAgICAgICAgICAgICAgICBpZiBub3QgZXJyb3IuZW5kc3dpdGgoJ1xuJyk6CiAgICAgICAgICAgICAgICAgICAgZXJyb3IgKz0gJ1xuJwogICAgICAgICAgICAgICAgbXNnTGluZXMuYXBwZW5kKFNUREVSUl9MSU5FICUgZXJyb3IpCiAgICAgICAgcmV0dXJuICcnLmpvaW4obXNnTGluZXMpCgoKICAgIGRlZiBfaXNfcmVsZXZhbnRfdGJfbGV2ZWwoc2VsZiwgdGIpOgogICAgICAgIHJldHVybiAnX191bml0dGVzdCcgaW4gdGIudGJfZnJhbWUuZl9nbG9iYWxzCgogICAgZGVmIF9jb3VudF9yZWxldmFudF90Yl9sZXZlbHMoc2VsZiwgdGIpOgogICAgICAgIGxlbmd0aCA9IDAKICAgICAgICB3aGlsZSB0YiBhbmQgbm90IHNlbGYuX2lzX3JlbGV2YW50X3RiX2xldmVsKHRiKToKICAgICAgICAgICAgbGVuZ3RoICs9IDEKICAgICAgICAgICAgdGIgPSB0Yi50Yl9uZXh0CiAgICAgICAgcmV0dXJuIGxlbmd0aAoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gKCI8JXMgcnVuPSVpIGVycm9ycz0laSBmYWlsdXJlcz0laT4iICUKICAgICAgICAgICAgICAgKHV0aWwuc3RyY2xhc3Moc2VsZi5fX2NsYXNzX18pLCBzZWxmLnRlc3RzUnVuLCBsZW4oc2VsZi5lcnJvcnMpLAogICAgICAgICAgICAgICAgbGVuKHNlbGYuZmFpbHVyZXMpKSkK',
'/Lib/unittest/runner.py':'IiIiUnVubmluZyB0ZXN0cyIiIgoKaW1wb3J0IHN5cwppbXBvcnQgdGltZQppbXBvcnQgd2FybmluZ3MKCmZyb20gLiBpbXBvcnQgcmVzdWx0CmZyb20gLnNpZ25hbHMgaW1wb3J0IHJlZ2lzdGVyUmVzdWx0CgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCmNsYXNzIF9Xcml0ZWxuRGVjb3JhdG9yKG9iamVjdCk6CiAgICAiIiJVc2VkIHRvIGRlY29yYXRlIGZpbGUtbGlrZSBvYmplY3RzIHdpdGggYSBoYW5keSAnd3JpdGVsbicgbWV0aG9kIiIiCiAgICBkZWYgX19pbml0X18oc2VsZixzdHJlYW0pOgogICAgICAgIHNlbGYuc3RyZWFtID0gc3RyZWFtCgogICAgZGVmIF9fZ2V0YXR0cl9fKHNlbGYsIGF0dHIpOgogICAgICAgIGlmIGF0dHIgaW4gKCdzdHJlYW0nLCAnX19nZXRzdGF0ZV9fJyk6CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKGF0dHIpCiAgICAgICAgcmV0dXJuIGdldGF0dHIoc2VsZi5zdHJlYW0sYXR0cikKCiAgICBkZWYgd3JpdGVsbihzZWxmLCBhcmc9Tm9uZSk6CiAgICAgICAgaWYgYXJnOgogICAgICAgICAgICBzZWxmLndyaXRlKGFyZykKICAgICAgICBzZWxmLndyaXRlKCdcbicpICMgdGV4dC1tb2RlIHN0cmVhbXMgdHJhbnNsYXRlIHRvIFxyXG4gaWYgbmVlZGVkCgoKY2xhc3MgVGV4dFRlc3RSZXN1bHQocmVzdWx0LlRlc3RSZXN1bHQpOgogICAgIiIiQSB0ZXN0IHJlc3VsdCBjbGFzcyB0aGF0IGNhbiBwcmludCBmb3JtYXR0ZWQgdGV4dCByZXN1bHRzIHRvIGEgc3RyZWFtLgoKICAgIFVzZWQgYnkgVGV4dFRlc3RSdW5uZXIuCiAgICAiIiIKICAgIHNlcGFyYXRvcjEgPSAnPScgKiA3MAogICAgc2VwYXJhdG9yMiA9ICctJyAqIDcwCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHN0cmVhbSwgZGVzY3JpcHRpb25zLCB2ZXJib3NpdHkpOgogICAgICAgIHN1cGVyKFRleHRUZXN0UmVzdWx0LCBzZWxmKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5zdHJlYW0gPSBzdHJlYW0KICAgICAgICBzZWxmLnNob3dBbGwgPSB2ZXJib3NpdHkgPiAxCiAgICAgICAgc2VsZi5kb3RzID0gdmVyYm9zaXR5ID09IDEKICAgICAgICBzZWxmLmRlc2NyaXB0aW9ucyA9IGRlc2NyaXB0aW9ucwoKICAgIGRlZiBnZXREZXNjcmlwdGlvbihzZWxmLCB0ZXN0KToKICAgICAgICBkb2NfZmlyc3RfbGluZSA9IHRlc3Quc2hvcnREZXNjcmlwdGlvbigpCiAgICAgICAgaWYgc2VsZi5kZXNjcmlwdGlvbnMgYW5kIGRvY19maXJzdF9saW5lOgogICAgICAgICAgICByZXR1cm4gJ1xuJy5qb2luKChzdHIodGVzdCksIGRvY19maXJzdF9saW5lKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gc3RyKHRlc3QpCgogICAgZGVmIHN0YXJ0VGVzdChzZWxmLCB0ZXN0KToKICAgICAgICBzdXBlcihUZXh0VGVzdFJlc3VsdCwgc2VsZikuc3RhcnRUZXN0KHRlc3QpCiAgICAgICAgaWYgc2VsZi5zaG93QWxsOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZShzZWxmLmdldERlc2NyaXB0aW9uKHRlc3QpKQogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZSgiIC4uLiAiKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZFN1Y2Nlc3Moc2VsZiwgdGVzdCk6CiAgICAgICAgc3VwZXIoVGV4dFRlc3RSZXN1bHQsIHNlbGYpLmFkZFN1Y2Nlc3ModGVzdCkKICAgICAgICBpZiBzZWxmLnNob3dBbGw6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oIm9rIikKICAgICAgICBlbGlmIHNlbGYuZG90czoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoJy4nKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZEVycm9yKHNlbGYsIHRlc3QsIGVycik6CiAgICAgICAgc3VwZXIoVGV4dFRlc3RSZXN1bHQsIHNlbGYpLmFkZEVycm9yKHRlc3QsIGVycikKICAgICAgICBpZiBzZWxmLnNob3dBbGw6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oIkVSUk9SIikKICAgICAgICBlbGlmIHNlbGYuZG90czoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoJ0UnKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZEZhaWx1cmUoc2VsZiwgdGVzdCwgZXJyKToKICAgICAgICBzdXBlcihUZXh0VGVzdFJlc3VsdCwgc2VsZikuYWRkRmFpbHVyZSh0ZXN0LCBlcnIpCiAgICAgICAgaWYgc2VsZi5zaG93QWxsOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKCJGQUlMIikKICAgICAgICBlbGlmIHNlbGYuZG90czoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoJ0YnKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZFNraXAoc2VsZiwgdGVzdCwgcmVhc29uKToKICAgICAgICBzdXBlcihUZXh0VGVzdFJlc3VsdCwgc2VsZikuYWRkU2tpcCh0ZXN0LCByZWFzb24pCiAgICAgICAgaWYgc2VsZi5zaG93QWxsOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKCJza2lwcGVkIHswIXJ9Ii5mb3JtYXQocmVhc29uKSkKICAgICAgICBlbGlmIHNlbGYuZG90czoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoInMiKQogICAgICAgICAgICBzZWxmLnN0cmVhbS5mbHVzaCgpCgogICAgZGVmIGFkZEV4cGVjdGVkRmFpbHVyZShzZWxmLCB0ZXN0LCBlcnIpOgogICAgICAgIHN1cGVyKFRleHRUZXN0UmVzdWx0LCBzZWxmKS5hZGRFeHBlY3RlZEZhaWx1cmUodGVzdCwgZXJyKQogICAgICAgIGlmIHNlbGYuc2hvd0FsbDoKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGVsbigiZXhwZWN0ZWQgZmFpbHVyZSIpCiAgICAgICAgZWxpZiBzZWxmLmRvdHM6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlKCJ4IikKICAgICAgICAgICAgc2VsZi5zdHJlYW0uZmx1c2goKQoKICAgIGRlZiBhZGRVbmV4cGVjdGVkU3VjY2VzcyhzZWxmLCB0ZXN0KToKICAgICAgICBzdXBlcihUZXh0VGVzdFJlc3VsdCwgc2VsZikuYWRkVW5leHBlY3RlZFN1Y2Nlc3ModGVzdCkKICAgICAgICBpZiBzZWxmLnNob3dBbGw6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oInVuZXhwZWN0ZWQgc3VjY2VzcyIpCiAgICAgICAgZWxpZiBzZWxmLmRvdHM6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlKCJ1IikKICAgICAgICAgICAgc2VsZi5zdHJlYW0uZmx1c2goKQoKICAgIGRlZiBwcmludEVycm9ycyhzZWxmKToKICAgICAgICBpZiBzZWxmLmRvdHMgb3Igc2VsZi5zaG93QWxsOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKCkKICAgICAgICBzZWxmLnByaW50RXJyb3JMaXN0KCdFUlJPUicsIHNlbGYuZXJyb3JzKQogICAgICAgIHNlbGYucHJpbnRFcnJvckxpc3QoJ0ZBSUwnLCBzZWxmLmZhaWx1cmVzKQoKICAgIGRlZiBwcmludEVycm9yTGlzdChzZWxmLCBmbGF2b3VyLCBlcnJvcnMpOgogICAgICAgIGZvciB0ZXN0LCBlcnIgaW4gZXJyb3JzOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKHNlbGYuc2VwYXJhdG9yMSkKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGVsbigiJXM6ICVzIiAlIChmbGF2b3VyLHNlbGYuZ2V0RGVzY3JpcHRpb24odGVzdCkpKQogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKHNlbGYuc2VwYXJhdG9yMikKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGVsbigiJXMiICUgZXJyKQoKCmNsYXNzIFRleHRUZXN0UnVubmVyKG9iamVjdCk6CiAgICAiIiJBIHRlc3QgcnVubmVyIGNsYXNzIHRoYXQgZGlzcGxheXMgcmVzdWx0cyBpbiB0ZXh0dWFsIGZvcm0uCgogICAgSXQgcHJpbnRzIG91dCB0aGUgbmFtZXMgb2YgdGVzdHMgYXMgdGhleSBhcmUgcnVuLCBlcnJvcnMgYXMgdGhleQogICAgb2NjdXIsIGFuZCBhIHN1bW1hcnkgb2YgdGhlIHJlc3VsdHMgYXQgdGhlIGVuZCBvZiB0aGUgdGVzdCBydW4uCiAgICAiIiIKICAgIHJlc3VsdGNsYXNzID0gVGV4dFRlc3RSZXN1bHQKCiAgICBkZWYgX19pbml0X18oc2VsZiwgc3RyZWFtPU5vbmUsIGRlc2NyaXB0aW9ucz1UcnVlLCB2ZXJib3NpdHk9MSwKICAgICAgICAgICAgICAgICBmYWlsZmFzdD1GYWxzZSwgYnVmZmVyPUZhbHNlLCByZXN1bHRjbGFzcz1Ob25lLCB3YXJuaW5ncz1Ob25lKToKICAgICAgICBpZiBzdHJlYW0gaXMgTm9uZToKICAgICAgICAgICAgc3RyZWFtID0gc3lzLnN0ZGVycgogICAgICAgIHNlbGYuc3RyZWFtID0gX1dyaXRlbG5EZWNvcmF0b3Ioc3RyZWFtKQogICAgICAgIHNlbGYuZGVzY3JpcHRpb25zID0gZGVzY3JpcHRpb25zCiAgICAgICAgc2VsZi52ZXJib3NpdHkgPSB2ZXJib3NpdHkKICAgICAgICBzZWxmLmZhaWxmYXN0ID0gZmFpbGZhc3QKICAgICAgICBzZWxmLmJ1ZmZlciA9IGJ1ZmZlcgogICAgICAgIHNlbGYud2FybmluZ3MgPSB3YXJuaW5ncwogICAgICAgIGlmIHJlc3VsdGNsYXNzIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLnJlc3VsdGNsYXNzID0gcmVzdWx0Y2xhc3MKCiAgICBkZWYgX21ha2VSZXN1bHQoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYucmVzdWx0Y2xhc3Moc2VsZi5zdHJlYW0sIHNlbGYuZGVzY3JpcHRpb25zLCBzZWxmLnZlcmJvc2l0eSkKCiAgICBkZWYgcnVuKHNlbGYsIHRlc3QpOgogICAgICAgICJSdW4gdGhlIGdpdmVuIHRlc3QgY2FzZSBvciB0ZXN0IHN1aXRlLiIKICAgICAgICByZXN1bHQgPSBzZWxmLl9tYWtlUmVzdWx0KCkKICAgICAgICByZWdpc3RlclJlc3VsdChyZXN1bHQpCiAgICAgICAgcmVzdWx0LmZhaWxmYXN0ID0gc2VsZi5mYWlsZmFzdAogICAgICAgIHJlc3VsdC5idWZmZXIgPSBzZWxmLmJ1ZmZlcgogICAgICAgIHdpdGggd2FybmluZ3MuY2F0Y2hfd2FybmluZ3MoKToKICAgICAgICAgICAgcHJpbnQoIndpdGggY2F0Y2ggd2FybmluZ3MiKQogICAgICAgICAgICBpZiBzZWxmLndhcm5pbmdzOgogICAgICAgICAgICAgICAgIyBpZiBzZWxmLndhcm5pbmdzIGlzIHNldCwgdXNlIGl0IHRvIGZpbHRlciBhbGwgdGhlIHdhcm5pbmdzCiAgICAgICAgICAgICAgICB3YXJuaW5ncy5zaW1wbGVmaWx0ZXIoc2VsZi53YXJuaW5ncykKICAgICAgICAgICAgICAgICMgaWYgdGhlIGZpbHRlciBpcyAnZGVmYXVsdCcgb3IgJ2Fsd2F5cycsIHNwZWNpYWwtY2FzZSB0aGUKICAgICAgICAgICAgICAgICMgd2FybmluZ3MgZnJvbSB0aGUgZGVwcmVjYXRlZCB1bml0dGVzdCBtZXRob2RzIHRvIHNob3cgdGhlbQogICAgICAgICAgICAgICAgIyBubyBtb3JlIHRoYW4gb25jZSBwZXIgbW9kdWxlLCBiZWNhdXNlIHRoZXkgY2FuIGJlIGZhaXJseQogICAgICAgICAgICAgICAgIyBub2lzeS4gIFRoZSAtV2QgYW5kIC1XYSBmbGFncyBjYW4gYmUgdXNlZCB0byBieXBhc3MgdGhpcwogICAgICAgICAgICAgICAgIyBvbmx5IHdoZW4gc2VsZi53YXJuaW5ncyBpcyBOb25lLgogICAgICAgICAgICAgICAgaWYgc2VsZi53YXJuaW5ncyBpbiBbJ2RlZmF1bHQnLCAnYWx3YXlzJ106CiAgICAgICAgICAgICAgICAgICAgd2FybmluZ3MuZmlsdGVyd2FybmluZ3MoJ21vZHVsZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeT1EZXByZWNhdGlvbldhcm5pbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlPSdQbGVhc2UgdXNlIGFzc2VydFx3KyBpbnN0ZWFkLicpCiAgICAgICAgICAgIHN0YXJ0VGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgICAgIHN0YXJ0VGVzdFJ1biA9IGdldGF0dHIocmVzdWx0LCAnc3RhcnRUZXN0UnVuJywgTm9uZSkKICAgICAgICAgICAgaWYgc3RhcnRUZXN0UnVuIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgc3RhcnRUZXN0UnVuKCkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdGVzdChyZXN1bHQpCiAgICAgICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgICAgICBzdG9wVGVzdFJ1biA9IGdldGF0dHIocmVzdWx0LCAnc3RvcFRlc3RSdW4nLCBOb25lKQogICAgICAgICAgICAgICAgaWYgc3RvcFRlc3RSdW4gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgc3RvcFRlc3RSdW4oKQogICAgICAgICAgICBzdG9wVGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgcHJpbnQoJ3dpdGggY2F0Y2ggd2FybmluZ3Mgb2snKQogICAgICAgIHRpbWVUYWtlbiA9IHN0b3BUaW1lIC0gc3RhcnRUaW1lCiAgICAgICAgcmVzdWx0LnByaW50RXJyb3JzKCkKICAgICAgICBpZiBoYXNhdHRyKHJlc3VsdCwgJ3NlcGFyYXRvcjInKToKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGVsbihyZXN1bHQuc2VwYXJhdG9yMikKICAgICAgICBydW4gPSByZXN1bHQudGVzdHNSdW4KICAgICAgICBzZWxmLnN0cmVhbS53cml0ZWxuKCJSYW4gJWQgdGVzdCVzIGluICUuM2ZzIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocnVuLCBydW4gIT0gMSBhbmQgInMiIG9yICIiLCB0aW1lVGFrZW4pKQogICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oKQoKICAgICAgICBleHBlY3RlZEZhaWxzID0gdW5leHBlY3RlZFN1Y2Nlc3NlcyA9IHNraXBwZWQgPSAwCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXN1bHRzID0gbWFwKGxlbiwgKHJlc3VsdC5leHBlY3RlZEZhaWx1cmVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC51bmV4cGVjdGVkU3VjY2Vzc2VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5za2lwcGVkKSkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHBhc3MKICAgICAgICBlbHNlOgogICAgICAgICAgICBleHBlY3RlZEZhaWxzLCB1bmV4cGVjdGVkU3VjY2Vzc2VzLCBza2lwcGVkID0gcmVzdWx0cwoKICAgICAgICBpbmZvcyA9IFtdCiAgICAgICAgaWYgbm90IHJlc3VsdC53YXNTdWNjZXNzZnVsKCk6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlKCJGQUlMRUQiKQogICAgICAgICAgICBmYWlsZWQsIGVycm9yZWQgPSBsZW4ocmVzdWx0LmZhaWx1cmVzKSwgbGVuKHJlc3VsdC5lcnJvcnMpCiAgICAgICAgICAgIGlmIGZhaWxlZDoKICAgICAgICAgICAgICAgIGluZm9zLmFwcGVuZCgiZmFpbHVyZXM9JWQiICUgZmFpbGVkKQogICAgICAgICAgICBpZiBlcnJvcmVkOgogICAgICAgICAgICAgICAgaW5mb3MuYXBwZW5kKCJlcnJvcnM9JWQiICUgZXJyb3JlZCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLnN0cmVhbS53cml0ZSgiT0siKQogICAgICAgIGlmIHNraXBwZWQ6CiAgICAgICAgICAgIGluZm9zLmFwcGVuZCgic2tpcHBlZD0lZCIgJSBza2lwcGVkKQogICAgICAgIGlmIGV4cGVjdGVkRmFpbHM6CiAgICAgICAgICAgIGluZm9zLmFwcGVuZCgiZXhwZWN0ZWQgZmFpbHVyZXM9JWQiICUgZXhwZWN0ZWRGYWlscykKICAgICAgICBpZiB1bmV4cGVjdGVkU3VjY2Vzc2VzOgogICAgICAgICAgICBpbmZvcy5hcHBlbmQoInVuZXhwZWN0ZWQgc3VjY2Vzc2VzPSVkIiAlIHVuZXhwZWN0ZWRTdWNjZXNzZXMpCiAgICAgICAgaWYgaW5mb3M6CiAgICAgICAgICAgIHNlbGYuc3RyZWFtLndyaXRlbG4oIiAoJXMpIiAlICgiLCAiLmpvaW4oaW5mb3MpLCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5zdHJlYW0ud3JpdGUoIlxuIikKICAgICAgICByZXR1cm4gcmVzdWx0Cg==',
'/Lib/unittest/signals.py':'aW1wb3J0IHNpZ25hbAppbXBvcnQgd2Vha3JlZgoKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCmNsYXNzIF9JbnRlcnJ1cHRIYW5kbGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVmYXVsdF9oYW5kbGVyKToKICAgICAgICBzZWxmLmNhbGxlZCA9IEZhbHNlCiAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIgPSBkZWZhdWx0X2hhbmRsZXIKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgc2lnbnVtLCBmcmFtZSk6CiAgICAgICAgaW5zdGFsbGVkX2hhbmRsZXIgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgaWYgaW5zdGFsbGVkX2hhbmRsZXIgaXMgbm90IHNlbGY6CiAgICAgICAgICAgICMgaWYgd2UgYXJlbid0IHRoZSBpbnN0YWxsZWQgaGFuZGxlciwgdGhlbiBkZWxlZ2F0ZSBpbW1lZGlhdGVseQogICAgICAgICAgICAjIHRvIHRoZSBkZWZhdWx0IGhhbmRsZXIKICAgICAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIoc2lnbnVtLCBmcmFtZSkKCiAgICAgICAgaWYgc2VsZi5jYWxsZWQ6CiAgICAgICAgICAgIHNlbGYuZGVmYXVsdF9oYW5kbGVyKHNpZ251bSwgZnJhbWUpCiAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlCiAgICAgICAgZm9yIHJlc3VsdCBpbiBfcmVzdWx0cy5rZXlzKCk6CiAgICAgICAgICAgIHJlc3VsdC5zdG9wKCkKCl9yZXN1bHRzID0gd2Vha3JlZi5XZWFrS2V5RGljdGlvbmFyeSgpCmRlZiByZWdpc3RlclJlc3VsdChyZXN1bHQpOgogICAgX3Jlc3VsdHNbcmVzdWx0XSA9IDEKCmRlZiByZW1vdmVSZXN1bHQocmVzdWx0KToKICAgIHJldHVybiBib29sKF9yZXN1bHRzLnBvcChyZXN1bHQsIE5vbmUpKQoKX2ludGVycnVwdF9oYW5kbGVyID0gTm9uZQpkZWYgaW5zdGFsbEhhbmRsZXIoKToKICAgIGdsb2JhbCBfaW50ZXJydXB0X2hhbmRsZXIKICAgIGlmIF9pbnRlcnJ1cHRfaGFuZGxlciBpcyBOb25lOgogICAgICAgIGRlZmF1bHRfaGFuZGxlciA9IHNpZ25hbC5nZXRzaWduYWwoc2lnbmFsLlNJR0lOVCkKICAgICAgICBfaW50ZXJydXB0X2hhbmRsZXIgPSBfSW50ZXJydXB0SGFuZGxlcihkZWZhdWx0X2hhbmRsZXIpCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIpCgoKZGVmIHJlbW92ZUhhbmRsZXIobWV0aG9kPU5vbmUpOgogICAgaWYgbWV0aG9kIGlzIG5vdCBOb25lOgogICAgICAgIEB3cmFwcyhtZXRob2QpCiAgICAgICAgZGVmIGlubmVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIGluaXRpYWwgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgICAgIHJlbW92ZUhhbmRsZXIoKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kKCphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW5pdGlhbCkKICAgICAgICByZXR1cm4gaW5uZXIKCiAgICBnbG9iYWwgX2ludGVycnVwdF9oYW5kbGVyCiAgICBpZiBfaW50ZXJydXB0X2hhbmRsZXIgaXMgbm90IE5vbmU6CiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIuZGVmYXVsdF9oYW5kbGVyKQo=',
'/Lib/unittest/suite.py':'',
'/Lib/unittest/util.py':'IiIiVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy4iIiIKCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUsIE9yZGVyZWREaWN0CgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKX01BWF9MRU5HVEggPSA4MApkZWYgc2FmZV9yZXByKG9iaiwgc2hvcnQ9RmFsc2UpOgogICAgdHJ5OgogICAgICAgIHJlc3VsdCA9IHJlcHIob2JqKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXN1bHQgPSBvYmplY3QuX19yZXByX18ob2JqKQogICAgaWYgbm90IHNob3J0IG9yIGxlbihyZXN1bHQpIDwgX01BWF9MRU5HVEg6CiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgcmV0dXJuIHJlc3VsdFs6X01BWF9MRU5HVEhdICsgJyBbdHJ1bmNhdGVkXS4uLicKCmRlZiBzdHJjbGFzcyhjbHMpOgogICAgcmV0dXJuICIlcy4lcyIgJSAoY2xzLl9fbW9kdWxlX18sIGNscy5fX25hbWVfXykKCmRlZiBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiRmluZHMgZWxlbWVudHMgaW4gb25seSBvbmUgb3IgdGhlIG90aGVyIG9mIHR3bywgc29ydGVkIGlucHV0IGxpc3RzLgoKICAgIFJldHVybnMgYSB0d28tZWxlbWVudCB0dXBsZSBvZiBsaXN0cy4gICAgVGhlIGZpcnN0IGxpc3QgY29udGFpbnMgdGhvc2UKICAgIGVsZW1lbnRzIGluIHRoZSAiZXhwZWN0ZWQiIGxpc3QgYnV0IG5vdCBpbiB0aGUgImFjdHVhbCIgbGlzdCwgYW5kIHRoZQogICAgc2Vjb25kIGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIGluIHRoZSAiYWN0dWFsIiBsaXN0IGJ1dCBub3QgaW4gdGhlCiAgICAiZXhwZWN0ZWQiIGxpc3QuICAgIER1cGxpY2F0ZSBlbGVtZW50cyBpbiBlaXRoZXIgaW5wdXQgbGlzdCBhcmUgaWdub3JlZC4KICAgICIiIgogICAgaSA9IGogPSAwCiAgICBtaXNzaW5nID0gW10KICAgIHVuZXhwZWN0ZWQgPSBbXQogICAgd2hpbGUgVHJ1ZToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGUgPSBleHBlY3RlZFtpXQogICAgICAgICAgICBhID0gYWN0dWFsW2pdCiAgICAgICAgICAgIGlmIGUgPCBhOgogICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoZSkKICAgICAgICAgICAgICAgIGkgKz0gMQogICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICBpICs9IDEKICAgICAgICAgICAgZWxpZiBlID4gYToKICAgICAgICAgICAgICAgIHVuZXhwZWN0ZWQuYXBwZW5kKGEpCiAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgbWlzc2luZy5leHRlbmQoZXhwZWN0ZWRbaTpdKQogICAgICAgICAgICB1bmV4cGVjdGVkLmV4dGVuZChhY3R1YWxbajpdKQogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIG1pc3NpbmcsIHVuZXhwZWN0ZWQKCgpkZWYgdW5vcmRlcmFibGVfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiU2FtZSBiZWhhdmlvciBhcyBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlIGJ1dAogICAgZm9yIGxpc3RzIG9mIHVub3JkZXJhYmxlIGl0ZW1zIChsaWtlIGRpY3RzKS4KCiAgICBBcyBpdCBkb2VzIGEgbGluZWFyIHNlYXJjaCBwZXIgaXRlbSAocmVtb3ZlKSBpdAogICAgaGFzIE8obipuKSBwZXJmb3JtYW5jZS4iIiIKICAgIG1pc3NpbmcgPSBbXQogICAgd2hpbGUgZXhwZWN0ZWQ6CiAgICAgICAgaXRlbSA9IGV4cGVjdGVkLnBvcCgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhY3R1YWwucmVtb3ZlKGl0ZW0pCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIG1pc3NpbmcuYXBwZW5kKGl0ZW0pCgogICAgIyBhbnl0aGluZyBsZWZ0IGluIGFjdHVhbCBpcyB1bmV4cGVjdGVkCiAgICByZXR1cm4gbWlzc2luZywgYWN0dWFsCgpkZWYgdGhyZWVfd2F5X2NtcCh4LCB5KToKICAgICIiIlJldHVybiAtMSBpZiB4IDwgeSwgMCBpZiB4ID09IHkgYW5kIDEgaWYgeCA+IHkiIiIKICAgIHJldHVybiAoeCA+IHkpIC0gKHggPCB5KQoKX01pc21hdGNoID0gbmFtZWR0dXBsZSgnTWlzbWF0Y2gnLCAnYWN0dWFsIGV4cGVjdGVkIHZhbHVlJykKCmRlZiBfY291bnRfZGlmZl9hbGxfcHVycG9zZShhY3R1YWwsIGV4cGVjdGVkKToKICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInCiAgICAjIGVsZW1lbnRzIG5lZWQgbm90IGJlIGhhc2hhYmxlCiAgICBzLCB0ID0gbGlzdChhY3R1YWwpLCBsaXN0KGV4cGVjdGVkKQogICAgbSwgbiA9IGxlbihzKSwgbGVuKHQpCiAgICBOVUxMID0gb2JqZWN0KCkKICAgIHJlc3VsdCA9IFtdCiAgICBmb3IgaSwgZWxlbSBpbiBlbnVtZXJhdGUocyk6CiAgICAgICAgaWYgZWxlbSBpcyBOVUxMOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGNudF9zID0gY250X3QgPSAwCiAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSwgbSk6CiAgICAgICAgICAgIGlmIHNbal0gPT0gZWxlbToKICAgICAgICAgICAgICAgIGNudF9zICs9IDEKICAgICAgICAgICAgICAgIHNbal0gPSBOVUxMCiAgICAgICAgZm9yIGosIG90aGVyX2VsZW0gaW4gZW51bWVyYXRlKHQpOgogICAgICAgICAgICBpZiBvdGhlcl9lbGVtID09IGVsZW06CiAgICAgICAgICAgICAgICBjbnRfdCArPSAxCiAgICAgICAgICAgICAgICB0W2pdID0gTlVMTAogICAgICAgIGlmIGNudF9zICE9IGNudF90OgogICAgICAgICAgICBkaWZmID0gX01pc21hdGNoKGNudF9zLCBjbnRfdCwgZWxlbSkKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQoKICAgIGZvciBpLCBlbGVtIGluIGVudW1lcmF0ZSh0KToKICAgICAgICBpZiBlbGVtIGlzIE5VTEw6CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgY250X3QgPSAwCiAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSwgbik6CiAgICAgICAgICAgIGlmIHRbal0gPT0gZWxlbToKICAgICAgICAgICAgICAgIGNudF90ICs9IDEKICAgICAgICAgICAgICAgIHRbal0gPSBOVUxMCiAgICAgICAgZGlmZiA9IF9NaXNtYXRjaCgwLCBjbnRfdCwgZWxlbSkKICAgICAgICByZXN1bHQuYXBwZW5kKGRpZmYpCiAgICByZXR1cm4gcmVzdWx0CgpkZWYgX29yZGVyZWRfY291bnQoaXRlcmFibGUpOgogICAgJ1JldHVybiBkaWN0IG9mIGVsZW1lbnQgY291bnRzLCBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIGZpcnN0IHNlZW4nCiAgICBjID0gT3JkZXJlZERpY3QoKQogICAgZm9yIGVsZW0gaW4gaXRlcmFibGU6CiAgICAgICAgY1tlbGVtXSA9IGMuZ2V0KGVsZW0sIDApICsgMQogICAgcmV0dXJuIGMKCmRlZiBfY291bnRfZGlmZl9oYXNoYWJsZShhY3R1YWwsIGV4cGVjdGVkKToKICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInCiAgICAjIGVsZW1lbnRzIG11c3QgYmUgaGFzaGFibGUKICAgIHMsIHQgPSBfb3JkZXJlZF9jb3VudChhY3R1YWwpLCBfb3JkZXJlZF9jb3VudChleHBlY3RlZCkKICAgIHJlc3VsdCA9IFtdCiAgICBmb3IgZWxlbSwgY250X3MgaW4gcy5pdGVtcygpOgogICAgICAgIGNudF90ID0gdC5nZXQoZWxlbSwgMCkKICAgICAgICBpZiBjbnRfcyAhPSBjbnRfdDoKICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaChjbnRfcywgY250X3QsIGVsZW0pCiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZGlmZikKICAgIGZvciBlbGVtLCBjbnRfdCBpbiB0Lml0ZW1zKCk6CiAgICAgICAgaWYgZWxlbSBub3QgaW4gczoKICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaCgwLCBjbnRfdCwgZWxlbSkKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQogICAgcmV0dXJuIHJlc3VsdAo=',
'/Lib/unittest/__init__.py':'IiIiClB5dGhvbiB1bml0IHRlc3RpbmcgZnJhbWV3b3JrLCBiYXNlZCBvbiBFcmljaCBHYW1tYSdzIEpVbml0IGFuZCBLZW50IEJlY2sncwpTbWFsbHRhbGsgdGVzdGluZyBmcmFtZXdvcmsuCgpUaGlzIG1vZHVsZSBjb250YWlucyB0aGUgY29yZSBmcmFtZXdvcmsgY2xhc3NlcyB0aGF0IGZvcm0gdGhlIGJhc2lzIG9mCnNwZWNpZmljIHRlc3QgY2FzZXMgYW5kIHN1aXRlcyAoVGVzdENhc2UsIFRlc3RTdWl0ZSBldGMuKSwgYW5kIGFsc28gYQp0ZXh0LWJhc2VkIHV0aWxpdHkgY2xhc3MgZm9yIHJ1bm5pbmcgdGhlIHRlc3RzIGFuZCByZXBvcnRpbmcgdGhlIHJlc3VsdHMKIChUZXh0VGVzdFJ1bm5lcikuCgpTaW1wbGUgdXNhZ2U6CgogICAgaW1wb3J0IHVuaXR0ZXN0CgogICAgY2xhc3MgSW50ZWdlckFyaXRobWVudGljVGVzdENhc2UodW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgIGRlZiB0ZXN0QWRkKHNlbGYpOiAgIyMgdGVzdCBtZXRob2QgbmFtZXMgYmVnaW4gJ3Rlc3QqJwogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCgxICsgMiksIDMpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoMCArIDEsIDEpCiAgICAgICAgZGVmIHRlc3RNdWx0aXBseShzZWxmKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoMCAqIDEwKSwgMCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoNSAqIDgpLCA0MCkKCiAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgICAgIHVuaXR0ZXN0Lm1haW4oKQoKRnVydGhlciBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGJ1bmRsZWQgZG9jdW1lbnRhdGlvbiwgYW5kIGZyb20KCiAgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3VuaXR0ZXN0Lmh0bWwKCkNvcHlyaWdodCAoYykgMTk5OS0yMDAzIFN0ZXZlIFB1cmNlbGwKQ29weXJpZ2h0IChjKSAyMDAzLTIwMTAgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24KVGhpcyBtb2R1bGUgaXMgZnJlZSBzb2Z0d2FyZSwgYW5kIHlvdSBtYXkgcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUHl0aG9uIGl0c2VsZiwgc28gbG9uZyBhcyB0aGlzIGNvcHlyaWdodCBtZXNzYWdlCmFuZCBkaXNjbGFpbWVyIGFyZSByZXRhaW5lZCBpbiB0aGVpciBvcmlnaW5hbCBmb3JtLgoKSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgVE8gQU5ZIFBBUlRZIEZPUiBESVJFQ1QsIElORElSRUNULApTUEVDSUFMLCBJTkNJREVOVEFMLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhFIFVTRSBPRgpUSElTIENPREUsIEVWRU4gSUYgVEhFIEFVVEhPUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNICkRBTUFHRS4KClRIRSBBVVRIT1IgU1BFQ0lGSUNBTExZIERJU0NMQUlNUyBBTlkgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UCkxJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBClBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRIRSBDT0RFIFBST1ZJREVEIEhFUkVVTkRFUiBJUyBPTiBBTiAiQVMgSVMiIEJBU0lTLApBTkQgVEhFUkUgSVMgTk8gT0JMSUdBVElPTiBXSEFUU09FVkVSIFRPIFBST1ZJREUgTUFJTlRFTkFOQ0UsClNVUFBPUlQsIFVQREFURVMsIEVOSEFOQ0VNRU5UUywgT1IgTU9ESUZJQ0FUSU9OUy4KIiIiCgpfX2FsbF9fID0gWydUZXN0UmVzdWx0JywgJ1Rlc3RDYXNlJywgJ1Rlc3RTdWl0ZScsCiAgICAgICAgICAgJ1RleHRUZXN0UnVubmVyJywgJ1Rlc3RMb2FkZXInLCAnRnVuY3Rpb25UZXN0Q2FzZScsICdtYWluJywKICAgICAgICAgICAnZGVmYXVsdFRlc3RMb2FkZXInLCAnU2tpcFRlc3QnLCAnc2tpcCcsICdza2lwSWYnLCAnc2tpcFVubGVzcycsCiAgICAgICAgICAgJ2V4cGVjdGVkRmFpbHVyZScsICdUZXh0VGVzdFJlc3VsdCcsICdpbnN0YWxsSGFuZGxlcicsCiAgICAgICAgICAgJ3JlZ2lzdGVyUmVzdWx0JywgJ3JlbW92ZVJlc3VsdCcsICdyZW1vdmVIYW5kbGVyJ10KCiMgRXhwb3NlIG9ic29sZXRlIGZ1bmN0aW9ucyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKX19hbGxfXy5leHRlbmQoWydnZXRUZXN0Q2FzZU5hbWVzJywgJ21ha2VTdWl0ZScsICdmaW5kVGVzdENhc2VzJ10pCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKZnJvbSAucmVzdWx0IGltcG9ydCBUZXN0UmVzdWx0CmZyb20gLmNhc2UgaW1wb3J0IChUZXN0Q2FzZSwgRnVuY3Rpb25UZXN0Q2FzZSwgU2tpcFRlc3QsIHNraXAsIHNraXBJZiwKICAgICAgICAgICAgICAgICAgIHNraXBVbmxlc3MsIGV4cGVjdGVkRmFpbHVyZSkKZnJvbSAuc3VpdGUgaW1wb3J0IEJhc2VUZXN0U3VpdGUsIFRlc3RTdWl0ZQpmcm9tIC5sb2FkZXIgaW1wb3J0IChUZXN0TG9hZGVyLCBkZWZhdWx0VGVzdExvYWRlciwgbWFrZVN1aXRlLCBnZXRUZXN0Q2FzZU5hbWVzLAogICAgICAgICAgICAgICAgICAgICBmaW5kVGVzdENhc2VzKQpmcm9tIC5tYWluIGltcG9ydCBUZXN0UHJvZ3JhbSwgbWFpbgpmcm9tIC5ydW5uZXIgaW1wb3J0IFRleHRUZXN0UnVubmVyLCBUZXh0VGVzdFJlc3VsdApmcm9tIC5zaWduYWxzIGltcG9ydCBpbnN0YWxsSGFuZGxlciwgcmVnaXN0ZXJSZXN1bHQsIHJlbW92ZVJlc3VsdCwgcmVtb3ZlSGFuZGxlcgoKIyBkZXByZWNhdGVkCl9UZXh0VGVzdFJlc3VsdCA9IFRleHRUZXN0UmVzdWx0Cg==',
'/Lib/unittest/__main__.py':'IiIiTWFpbiBlbnRyeSBwb2ludCIiIgoKaW1wb3J0IHN5cwppZiBzeXMuYXJndlswXS5lbmRzd2l0aCgiX19tYWluX18ucHkiKToKICAgIHN5cy5hcmd2WzBdID0gInB5dGhvbiAtbSB1bml0dGVzdCIKCl9fdW5pdHRlc3QgPSBUcnVlCgpmcm9tIC5tYWluIGltcG9ydCBtYWluLCBUZXN0UHJvZ3JhbSwgVVNBR0VfQVNfTUFJTgpUZXN0UHJvZ3JhbS5VU0FHRSA9IFVTQUdFX0FTX01BSU4KCm1haW4obW9kdWxlPU5vbmUpCg==',
'/Lib/unittest/test/dummy.py':'IyBFbXB0eSBtb2R1bGUgZm9yIHRlc3RpbmcgdGhlIGxvYWRpbmcgb2YgbW9kdWxlcwo=',
'/Lib/unittest/test/support.py':'aW1wb3J0IHVuaXR0ZXN0CgoKY2xhc3MgVGVzdEVxdWFsaXR5KG9iamVjdCk6CiAgICAiIiJVc2VkIGFzIGEgbWl4aW4gZm9yIFRlc3RDYXNlIiIiCgogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2VxX18gaW1wbGVtZW50YXRpb24KICAgIGRlZiB0ZXN0X2VxKHNlbGYpOgogICAgICAgIGZvciBvYmpfMSwgb2JqXzIgaW4gc2VsZi5lcV9wYWlyczoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChvYmpfMSwgb2JqXzIpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwob2JqXzIsIG9ial8xKQoKICAgICMgQ2hlY2sgZm9yIGEgdmFsaWQgX19uZV9fIGltcGxlbWVudGF0aW9uCiAgICBkZWYgdGVzdF9uZShzZWxmKToKICAgICAgICBmb3Igb2JqXzEsIG9ial8yIGluIHNlbGYubmVfcGFpcnM6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwob2JqXzEsIG9ial8yKQogICAgICAgICAgICBzZWxmLmFzc2VydE5vdEVxdWFsKG9ial8yLCBvYmpfMSkKCmNsYXNzIFRlc3RIYXNoaW5nKG9iamVjdCk6CiAgICAiIiJVc2VkIGFzIGEgbWl4aW4gZm9yIFRlc3RDYXNlIiIiCgogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2hhc2hfXyBpbXBsZW1lbnRhdGlvbgogICAgZGVmIHRlc3RfaGFzaChzZWxmKToKICAgICAgICBmb3Igb2JqXzEsIG9ial8yIGluIHNlbGYuZXFfcGFpcnM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIG5vdCBoYXNoKG9ial8xKSA9PSBoYXNoKG9ial8yKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIiVyIGFuZCAlciBkbyBub3QgaGFzaCBlcXVhbCIgJSAob2JqXzEsIG9ial8yKSkKICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsKCJQcm9ibGVtIGhhc2hpbmcgJXIgYW5kICVyOiAlcyIgJSAob2JqXzEsIG9ial8yLCBlKSkKCiAgICAgICAgZm9yIG9ial8xLCBvYmpfMiBpbiBzZWxmLm5lX3BhaXJzOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBoYXNoKG9ial8xKSA9PSBoYXNoKG9ial8yKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIiVzIGFuZCAlcyBoYXNoIGVxdWFsLCBidXQgc2hvdWxkbid0IiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvYmpfMSwgb2JqXzIpKQogICAgICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIlByb2JsZW0gaGFzaGluZyAlcyBhbmQgJXM6ICVzIiAlIChvYmpfMSwgb2JqXzIsIGUpKQoKCmNsYXNzIExvZ2dpbmdSZXN1bHQodW5pdHRlc3QuVGVzdFJlc3VsdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgbG9nKToKICAgICAgICBzZWxmLl9ldmVudHMgPSBsb2cKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICBkZWYgc3RhcnRUZXN0KHNlbGYsIHRlc3QpOgogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ3N0YXJ0VGVzdCcpCiAgICAgICAgc3VwZXIoKS5zdGFydFRlc3QodGVzdCkKCiAgICBkZWYgc3RhcnRUZXN0UnVuKHNlbGYpOgogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ3N0YXJ0VGVzdFJ1bicpCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuc3RhcnRUZXN0UnVuKCkKCiAgICBkZWYgc3RvcFRlc3Qoc2VsZiwgdGVzdCk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RvcFRlc3QnKQogICAgICAgIHN1cGVyKCkuc3RvcFRlc3QodGVzdCkKCiAgICBkZWYgc3RvcFRlc3RSdW4oc2VsZik6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RvcFRlc3RSdW4nKQogICAgICAgIHN1cGVyKExvZ2dpbmdSZXN1bHQsIHNlbGYpLnN0b3BUZXN0UnVuKCkKCiAgICBkZWYgYWRkRmFpbHVyZShzZWxmLCAqYXJncyk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRmFpbHVyZScpCiAgICAgICAgc3VwZXIoKS5hZGRGYWlsdXJlKCphcmdzKQoKICAgIGRlZiBhZGRTdWNjZXNzKHNlbGYsICphcmdzKToKICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRTdWNjZXNzJykKICAgICAgICBzdXBlcihMb2dnaW5nUmVzdWx0LCBzZWxmKS5hZGRTdWNjZXNzKCphcmdzKQoKICAgIGRlZiBhZGRFcnJvcihzZWxmLCAqYXJncyk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRXJyb3InKQogICAgICAgIHN1cGVyKCkuYWRkRXJyb3IoKmFyZ3MpCgogICAgZGVmIGFkZFNraXAoc2VsZiwgKmFyZ3MpOgogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ2FkZFNraXAnKQogICAgICAgIHN1cGVyKExvZ2dpbmdSZXN1bHQsIHNlbGYpLmFkZFNraXAoKmFyZ3MpCgogICAgZGVmIGFkZEV4cGVjdGVkRmFpbHVyZShzZWxmLCAqYXJncyk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRXhwZWN0ZWRGYWlsdXJlJykKICAgICAgICBzdXBlcihMb2dnaW5nUmVzdWx0LCBzZWxmKS5hZGRFeHBlY3RlZEZhaWx1cmUoKmFyZ3MpCgogICAgZGVmIGFkZFVuZXhwZWN0ZWRTdWNjZXNzKHNlbGYsICphcmdzKToKICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRVbmV4cGVjdGVkU3VjY2VzcycpCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuYWRkVW5leHBlY3RlZFN1Y2Nlc3MoKmFyZ3MpCgoKY2xhc3MgUmVzdWx0V2l0aE5vU3RhcnRUZXN0UnVuU3RvcFRlc3RSdW4ob2JqZWN0KToKICAgICIiIkFuIG9iamVjdCBob25vdXJpbmcgVGVzdFJlc3VsdCBiZWZvcmUgc3RhcnRUZXN0UnVuL3N0b3BUZXN0UnVuLiIiIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmZhaWx1cmVzID0gW10KICAgICAgICBzZWxmLmVycm9ycyA9IFtdCiAgICAgICAgc2VsZi50ZXN0c1J1biA9IDAKICAgICAgICBzZWxmLnNraXBwZWQgPSBbXQogICAgICAgIHNlbGYuZXhwZWN0ZWRGYWlsdXJlcyA9IFtdCiAgICAgICAgc2VsZi51bmV4cGVjdGVkU3VjY2Vzc2VzID0gW10KICAgICAgICBzZWxmLnNob3VsZFN0b3AgPSBGYWxzZQoKICAgIGRlZiBzdGFydFRlc3Qoc2VsZiwgdGVzdCk6CiAgICAgICAgcGFzcwoKICAgIGRlZiBzdG9wVGVzdChzZWxmLCB0ZXN0KToKICAgICAgICBwYXNzCgogICAgZGVmIGFkZEVycm9yKHNlbGYsIHRlc3QpOgogICAgICAgIHBhc3MKCiAgICBkZWYgYWRkRmFpbHVyZShzZWxmLCB0ZXN0KToKICAgICAgICBwYXNzCgogICAgZGVmIGFkZFN1Y2Nlc3Moc2VsZiwgdGVzdCk6CiAgICAgICAgcGFzcwoKICAgIGRlZiB3YXNTdWNjZXNzZnVsKHNlbGYpOgogICAgICAgIHJldHVybiBUcnVlCg==',
'/Lib/unittest/test/test_assertions.py':'',
'/Lib/unittest/test/test_break.py':'',
'/Lib/unittest/test/test_case.py':'',
'/Lib/unittest/test/test_discovery.py':'',
'/Lib/unittest/test/test_functiontestcase.py':'aW1wb3J0IHVuaXR0ZXN0Cgpmcm9tIC5zdXBwb3J0IGltcG9ydCBMb2dnaW5nUmVzdWx0CgoKY2xhc3MgVGVzdF9GdW5jdGlvblRlc3RDYXNlKHVuaXR0ZXN0LlRlc3RDYXNlKToKCiAgICAjICJSZXR1cm4gdGhlIG51bWJlciBvZiB0ZXN0cyByZXByZXNlbnRlZCBieSB0aGUgdGhpcyB0ZXN0IG9iamVjdC4gRm9yCiAgICAjIFRlc3RDYXNlIGluc3RhbmNlcywgdGhpcyB3aWxsIGFsd2F5cyBiZSAxIgogICAgZGVmIHRlc3RfY291bnRUZXN0Q2FzZXMoc2VsZik6CiAgICAgICAgdGVzdCA9IHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3QuY291bnRUZXN0Q2FzZXMoKSwgMSkKCiAgICAjICJXaGVuIGEgc2V0VXAoKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlIHRlc3QgcnVubmVyIHdpbGwgcnVuIHRoYXQgbWV0aG9kCiAgICAjIHByaW9yIHRvIGVhY2ggdGVzdC4gTGlrZXdpc2UsIGlmIGEgdGVhckRvd24oKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlCiAgICAjIHRlc3QgcnVubmVyIHdpbGwgaW52b2tlIHRoYXQgbWV0aG9kIGFmdGVyIGVhY2ggdGVzdC4gSW4gdGhlIGV4YW1wbGUsCiAgICAjIHNldFVwKCkgd2FzIHVzZWQgdG8gY3JlYXRlIGEgZnJlc2ggc2VxdWVuY2UgZm9yIGVhY2ggdGVzdC4iCiAgICAjCiAgICAjIE1ha2Ugc3VyZSB0aGUgcHJvcGVyIGNhbGwgb3JkZXIgaXMgbWFpbnRhaW5lZCwgZXZlbiBpZiBzZXRVcCgpIHJhaXNlcwogICAgIyBhbiBleGNlcHRpb24uCiAgICBkZWYgdGVzdF9ydW5fY2FsbF9vcmRlcl9fZXJyb3JfaW5fc2V0VXAoc2VsZik6CiAgICAgICAgZXZlbnRzID0gW10KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykKCiAgICAgICAgZGVmIHNldFVwKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykKICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKCdyYWlzZWQgYnkgc2V0VXAnKQoKICAgICAgICBkZWYgdGVzdCgpOgogICAgICAgICAgICBldmVudHMuYXBwZW5kKCd0ZXN0JykKCiAgICAgICAgZGVmIHRlYXJEb3duKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3RlYXJEb3duJykKCiAgICAgICAgZXhwZWN0ZWQgPSBbJ3N0YXJ0VGVzdCcsICdzZXRVcCcsICdhZGRFcnJvcicsICdzdG9wVGVzdCddCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQoKICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QKICAgICMgcHJpb3IgdG8gZWFjaCB0ZXN0LiBMaWtld2lzZSwgaWYgYSB0ZWFyRG93bigpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUKICAgICMgdGVzdCBydW5uZXIgd2lsbCBpbnZva2UgdGhhdCBtZXRob2QgYWZ0ZXIgZWFjaCB0ZXN0LiBJbiB0aGUgZXhhbXBsZSwKICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiIKICAgICMKICAgICMgTWFrZSBzdXJlIHRoZSBwcm9wZXIgY2FsbCBvcmRlciBpcyBtYWludGFpbmVkLCBldmVuIGlmIHRoZSB0ZXN0IHJhaXNlcwogICAgIyBhbiBlcnJvciAoYXMgb3Bwb3NlZCB0byBhIGZhaWx1cmUpLgogICAgZGVmIHRlc3RfcnVuX2NhbGxfb3JkZXJfX2Vycm9yX2luX3Rlc3Qoc2VsZik6CiAgICAgICAgZXZlbnRzID0gW10KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykKCiAgICAgICAgZGVmIHNldFVwKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykKCiAgICAgICAgZGVmIHRlc3QoKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVzdCcpCiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigncmFpc2VkIGJ5IHRlc3QnKQoKICAgICAgICBkZWYgdGVhckRvd24oKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQoKICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLAogICAgICAgICAgICAgICAgICAgICdhZGRFcnJvcicsICdzdG9wVGVzdCddCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQoKICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QKICAgICMgcHJpb3IgdG8gZWFjaCB0ZXN0LiBMaWtld2lzZSwgaWYgYSB0ZWFyRG93bigpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUKICAgICMgdGVzdCBydW5uZXIgd2lsbCBpbnZva2UgdGhhdCBtZXRob2QgYWZ0ZXIgZWFjaCB0ZXN0LiBJbiB0aGUgZXhhbXBsZSwKICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiIKICAgICMKICAgICMgTWFrZSBzdXJlIHRoZSBwcm9wZXIgY2FsbCBvcmRlciBpcyBtYWludGFpbmVkLCBldmVuIGlmIHRoZSB0ZXN0IHNpZ25hbHMKICAgICMgYSBmYWlsdXJlIChhcyBvcHBvc2VkIHRvIGFuIGVycm9yKS4KICAgIGRlZiB0ZXN0X3J1bl9jYWxsX29yZGVyX19mYWlsdXJlX2luX3Rlc3Qoc2VsZik6CiAgICAgICAgZXZlbnRzID0gW10KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykKCiAgICAgICAgZGVmIHNldFVwKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykKCiAgICAgICAgZGVmIHRlc3QoKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVzdCcpCiAgICAgICAgICAgIHNlbGYuZmFpbCgncmFpc2VkIGJ5IHRlc3QnKQoKICAgICAgICBkZWYgdGVhckRvd24oKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQoKICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLAogICAgICAgICAgICAgICAgICAgICdhZGRGYWlsdXJlJywgJ3N0b3BUZXN0J10KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgZXhwZWN0ZWQpCgogICAgIyAiV2hlbiBhIHNldFVwKCkgbWV0aG9kIGlzIGRlZmluZWQsIHRoZSB0ZXN0IHJ1bm5lciB3aWxsIHJ1biB0aGF0IG1ldGhvZAogICAgIyBwcmlvciB0byBlYWNoIHRlc3QuIExpa2V3aXNlLCBpZiBhIHRlYXJEb3duKCkgbWV0aG9kIGlzIGRlZmluZWQsIHRoZQogICAgIyB0ZXN0IHJ1bm5lciB3aWxsIGludm9rZSB0aGF0IG1ldGhvZCBhZnRlciBlYWNoIHRlc3QuIEluIHRoZSBleGFtcGxlLAogICAgIyBzZXRVcCgpIHdhcyB1c2VkIHRvIGNyZWF0ZSBhIGZyZXNoIHNlcXVlbmNlIGZvciBlYWNoIHRlc3QuIgogICAgIwogICAgIyBNYWtlIHN1cmUgdGhlIHByb3BlciBjYWxsIG9yZGVyIGlzIG1haW50YWluZWQsIGV2ZW4gaWYgdGVhckRvd24oKSByYWlzZXMKICAgICMgYW4gZXhjZXB0aW9uLgogICAgZGVmIHRlc3RfcnVuX2NhbGxfb3JkZXJfX2Vycm9yX2luX3RlYXJEb3duKHNlbGYpOgogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCgogICAgICAgIGRlZiBzZXRVcCgpOgogICAgICAgICAgICBldmVudHMuYXBwZW5kKCdzZXRVcCcpCgogICAgICAgIGRlZiB0ZXN0KCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3Rlc3QnKQoKICAgICAgICBkZWYgdGVhckRvd24oKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoJ3JhaXNlZCBieSB0ZWFyRG93bicpCgogICAgICAgIGV4cGVjdGVkID0gWydzdGFydFRlc3QnLCAnc2V0VXAnLCAndGVzdCcsICd0ZWFyRG93bicsICdhZGRFcnJvcicsCiAgICAgICAgICAgICAgICAgICAgJ3N0b3BUZXN0J10KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgZXhwZWN0ZWQpCgogICAgIyAiUmV0dXJuIGEgc3RyaW5nIGlkZW50aWZ5aW5nIHRoZSBzcGVjaWZpYyB0ZXN0IGNhc2UuIgogICAgIwogICAgIyBCZWNhdXNlIG9mIHRoZSB2YWd1ZSBuYXR1cmUgb2YgdGhlIGRvY3MsIEknbSBub3QgZ29pbmcgdG8gbG9jayB0aGlzCiAgICAjIHRlc3QgZG93biB0b28gbXVjaC4gUmVhbGx5IGFsbCB0aGF0IGNhbiBiZSBhc3NlcnRlZCBpcyB0aGF0IHRoZSBpZCgpCiAgICAjIHdpbGwgYmUgYSBzdHJpbmcgKGVpdGhlciA4LWJ5dGUgb3IgdW5pY29kZSAtLSBhZ2FpbiwgYmVjYXVzZSB0aGUgZG9jcwogICAgIyBqdXN0IHNheSAic3RyaW5nIikKICAgIGRlZiB0ZXN0X2lkKHNlbGYpOgogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkKCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHRlc3QuaWQoKSwgc3RyKQoKICAgICMgIlJldHVybnMgYSBvbmUtbGluZSBkZXNjcmlwdGlvbiBvZiB0aGUgdGVzdCwgb3IgTm9uZSBpZiBubyBkZXNjcmlwdGlvbgogICAgIyBoYXMgYmVlbiBwcm92aWRlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucwogICAgIyB0aGUgZmlyc3QgbGluZSBvZiB0aGUgdGVzdCBtZXRob2QncyBkb2NzdHJpbmcsIGlmIGF2YWlsYWJsZSwgb3IgTm9uZS4iCiAgICBkZWYgdGVzdF9zaG9ydERlc2NyaXB0aW9uX19ub19kb2NzdHJpbmcoc2VsZik6CiAgICAgICAgdGVzdCA9IHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3Quc2hvcnREZXNjcmlwdGlvbigpLCBOb25lKQoKICAgICMgIlJldHVybnMgYSBvbmUtbGluZSBkZXNjcmlwdGlvbiBvZiB0aGUgdGVzdCwgb3IgTm9uZSBpZiBubyBkZXNjcmlwdGlvbgogICAgIyBoYXMgYmVlbiBwcm92aWRlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucwogICAgIyB0aGUgZmlyc3QgbGluZSBvZiB0aGUgdGVzdCBtZXRob2QncyBkb2NzdHJpbmcsIGlmIGF2YWlsYWJsZSwgb3IgTm9uZS4iCiAgICBkZWYgdGVzdF9zaG9ydERlc2NyaXB0aW9uX19zaW5nbGVsaW5lX2RvY3N0cmluZyhzZWxmKToKICAgICAgICBkZXNjID0gInRoaXMgdGVzdHMgZm9vIgogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSwgZGVzY3JpcHRpb249ZGVzYykKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCh0ZXN0LnNob3J0RGVzY3JpcHRpb24oKSwgInRoaXMgdGVzdHMgZm9vIikK',
'/Lib/unittest/test/test_loader.py':'',
'/Lib/unittest/test/test_program.py':'',
'/Lib/unittest/test/test_result.py':'aW1wb3J0IGlvCmltcG9ydCBzeXMKaW1wb3J0IHRleHR3cmFwCgpmcm9tIHRlc3QgaW1wb3J0IHN1cHBvcnQKCmltcG9ydCB0cmFjZWJhY2sKaW1wb3J0IHVuaXR0ZXN0CgoKY2xhc3MgVGVzdF9UZXN0UmVzdWx0KHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICMgTm90ZTogdGhlcmUgYXJlIG5vdCBzZXBhcmF0ZSB0ZXN0cyBmb3IgVGVzdFJlc3VsdC53YXNTdWNjZXNzZnVsKCksCiAgICAjIFRlc3RSZXN1bHQuZXJyb3JzLCBUZXN0UmVzdWx0LmZhaWx1cmVzLCBUZXN0UmVzdWx0LnRlc3RzUnVuIG9yCiAgICAjIFRlc3RSZXN1bHQuc2hvdWxkU3RvcCBiZWNhdXNlIHRoZXNlIG9ubHkgaGF2ZSBtZWFuaW5nIGluIHRlcm1zIG9mCiAgICAjIG90aGVyIFRlc3RSZXN1bHQgbWV0aG9kcy4KICAgICMKICAgICMgQWNjb3JkaW5nbHksIHRlc3RzIGZvciB0aGUgYWZvcmVuYW1lZCBhdHRyaWJ1dGVzIGFyZSBpbmNvcnBvcmF0ZWQKICAgICMgaW4gd2l0aCB0aGUgdGVzdHMgZm9yIHRoZSBkZWZpbmluZyBtZXRob2RzLgogICAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKICAgIGRlZiB0ZXN0X2luaXQoc2VsZik6CiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCgogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShyZXN1bHQud2FzU3VjY2Vzc2Z1bCgpKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5lcnJvcnMpLCAwKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5mYWlsdXJlcyksIDApCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQudGVzdHNSdW4sIDApCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2hvdWxkU3RvcCwgRmFsc2UpCiAgICAgICAgc2VsZi5hc3NlcnRJc05vbmUocmVzdWx0Ll9zdGRvdXRfYnVmZmVyKQogICAgICAgIHNlbGYuYXNzZXJ0SXNOb25lKHJlc3VsdC5fc3RkZXJyX2J1ZmZlcikKCiAgICAjICJUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHNpZ25hbCB0aGF0IHRoZSBzZXQgb2YgdGVzdHMgYmVpbmcKICAgICMgcnVuIHNob3VsZCBiZSBhYm9ydGVkIGJ5IHNldHRpbmcgdGhlIFRlc3RSZXN1bHQncyBzaG91bGRTdG9wCiAgICAjIGF0dHJpYnV0ZSB0byBUcnVlLiIKICAgIGRlZiB0ZXN0X3N0b3Aoc2VsZik6CiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCgogICAgICAgIHJlc3VsdC5zdG9wKCkKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2hvdWxkU3RvcCwgVHJ1ZSkKCiAgICAjICJDYWxsZWQgd2hlbiB0aGUgdGVzdCBjYXNlIHRlc3QgaXMgYWJvdXQgdG8gYmUgcnVuLiBUaGUgZGVmYXVsdAogICAgIyBpbXBsZW1lbnRhdGlvbiBzaW1wbHkgaW5jcmVtZW50cyB0aGUgaW5zdGFuY2UncyB0ZXN0c1J1biBjb3VudGVyLiIKICAgIGRlZiB0ZXN0X3N0YXJ0VGVzdChzZWxmKToKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICB0ZXN0ID0gRm9vKCd0ZXN0XzEnKQoKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkKCiAgICAgICAgcmVzdWx0LnN0YXJ0VGVzdCh0ZXN0KQoKICAgICAgICBzZWxmLmFzc2VydFRydWUocmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZXJyb3JzKSwgMCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZmFpbHVyZXMpLCAwKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnRlc3RzUnVuLCAxKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNob3VsZFN0b3AsIEZhbHNlKQoKICAgICAgICByZXN1bHQuc3RvcFRlc3QodGVzdCkKCiAgICAjICJDYWxsZWQgYWZ0ZXIgdGhlIHRlc3QgY2FzZSB0ZXN0IGhhcyBiZWVuIGV4ZWN1dGVkLCByZWdhcmRsZXNzIG9mCiAgICAjIHRoZSBvdXRjb21lLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdGhpbmcuIgogICAgZGVmIHRlc3Rfc3RvcFRlc3Qoc2VsZik6CiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICAgICAgICAgZGVmIHRlc3RfMShzZWxmKToKICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgdGVzdCA9IEZvbygndGVzdF8xJykKCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCgogICAgICAgIHJlc3VsdC5zdGFydFRlc3QodGVzdCkKCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKHJlc3VsdC53YXNTdWNjZXNzZnVsKCkpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsZW4ocmVzdWx0LmVycm9ycyksIDApCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsZW4ocmVzdWx0LmZhaWx1cmVzKSwgMCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC50ZXN0c1J1biwgMSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5zaG91bGRTdG9wLCBGYWxzZSkKCiAgICAgICAgcmVzdWx0LnN0b3BUZXN0KHRlc3QpCgogICAgICAgICMgU2FtZSB0ZXN0cyBhcyBhYm92ZTsgbWFrZSBzdXJlIG5vdGhpbmcgaGFzIGNoYW5nZWQKICAgICAgICBzZWxmLmFzc2VydFRydWUocmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZXJyb3JzKSwgMCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZmFpbHVyZXMpLCAwKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnRlc3RzUnVuLCAxKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNob3VsZFN0b3AsIEZhbHNlKQoKICAgICMgIkNhbGxlZCBiZWZvcmUgYW5kIGFmdGVyIHRlc3RzIGFyZSBydW4uIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZy4iCiAgICBkZWYgdGVzdF9zdGFydFRlc3RSdW5fc3RvcFRlc3RSdW4oc2VsZik6CiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCiAgICAgICAgcmVzdWx0LnN0YXJ0VGVzdFJ1bigpCiAgICAgICAgcmVzdWx0LnN0b3BUZXN0UnVuKCkKCiAgICAjICJhZGRTdWNjZXNzKHRlc3QpIgogICAgIyAuLi4KICAgICMgIkNhbGxlZCB3aGVuIHRoZSB0ZXN0IGNhc2UgdGVzdCBzdWNjZWVkcyIKICAgICMgLi4uCiAgICAjICJ3YXNTdWNjZXNzZnVsKCkgLSBSZXR1cm5zIFRydWUgaWYgYWxsIHRlc3RzIHJ1biBzbyBmYXIgaGF2ZSBwYXNzZWQsCiAgICAjIG90aGVyd2lzZSByZXR1cm5zIEZhbHNlIgogICAgIyAuLi4KICAgICMgInRlc3RzUnVuIC0gVGhlIHRvdGFsIG51bWJlciBvZiB0ZXN0cyBydW4gc28gZmFyLiIKICAgICMgLi4uCiAgICAjICJlcnJvcnMgLSBBIGxpc3QgY29udGFpbmluZyAyLXR1cGxlcyBvZiBUZXN0Q2FzZSBpbnN0YW5jZXMgYW5kCiAgICAjIGZvcm1hdHRlZCB0cmFjZWJhY2tzLiBFYWNoIHR1cGxlIHJlcHJlc2VudHMgYSB0ZXN0IHdoaWNoIHJhaXNlZCBhbgogICAgIyB1bmV4cGVjdGVkIGV4Y2VwdGlvbi4gQ29udGFpbnMgZm9ybWF0dGVkCiAgICAjIHRyYWNlYmFja3MgaW5zdGVhZCBvZiBzeXMuZXhjX2luZm8oKSByZXN1bHRzLiIKICAgICMgLi4uCiAgICAjICJmYWlsdXJlcyAtIEEgbGlzdCBjb250YWluaW5nIDItdHVwbGVzIG9mIFRlc3RDYXNlIGluc3RhbmNlcyBhbmQKICAgICMgZm9ybWF0dGVkIHRyYWNlYmFja3MuIEVhY2ggdHVwbGUgcmVwcmVzZW50cyBhIHRlc3Qgd2hlcmUgYSBmYWlsdXJlIHdhcwogICAgIyBleHBsaWNpdGx5IHNpZ25hbGxlZCB1c2luZyB0aGUgVGVzdENhc2UuZmFpbCooKSBvciBUZXN0Q2FzZS5hc3NlcnQqKCkKICAgICMgbWV0aG9kcy4gQ29udGFpbnMgZm9ybWF0dGVkIHRyYWNlYmFja3MgaW5zdGVhZAogICAgIyBvZiBzeXMuZXhjX2luZm8oKSByZXN1bHRzLiIKICAgIGRlZiB0ZXN0X2FkZFN1Y2Nlc3Moc2VsZik6CiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICAgICAgICAgZGVmIHRlc3RfMShzZWxmKToKICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgdGVzdCA9IEZvbygndGVzdF8xJykKCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCgogICAgICAgIHJlc3VsdC5zdGFydFRlc3QodGVzdCkKICAgICAgICByZXN1bHQuYWRkU3VjY2Vzcyh0ZXN0KQogICAgICAgIHJlc3VsdC5zdG9wVGVzdCh0ZXN0KQoKICAgICAgICBzZWxmLmFzc2VydFRydWUocmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZXJyb3JzKSwgMCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZmFpbHVyZXMpLCAwKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnRlc3RzUnVuLCAxKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNob3VsZFN0b3AsIEZhbHNlKQoKICAgICMgImFkZEZhaWx1cmUodGVzdCwgZXJyKSIKICAgICMgLi4uCiAgICAjICJDYWxsZWQgd2hlbiB0aGUgdGVzdCBjYXNlIHRlc3Qgc2lnbmFscyBhIGZhaWx1cmUuIGVyciBpcyBhIHR1cGxlIG9mCiAgICAjIHRoZSBmb3JtIHJldHVybmVkIGJ5IHN5cy5leGNfaW5mbygpOiAodHlwZSwgdmFsdWUsIHRyYWNlYmFjaykiCiAgICAjIC4uLgogICAgIyAid2FzU3VjY2Vzc2Z1bCgpIC0gUmV0dXJucyBUcnVlIGlmIGFsbCB0ZXN0cyBydW4gc28gZmFyIGhhdmUgcGFzc2VkLAogICAgIyBvdGhlcndpc2UgcmV0dXJucyBGYWxzZSIKICAgICMgLi4uCiAgICAjICJ0ZXN0c1J1biAtIFRoZSB0b3RhbCBudW1iZXIgb2YgdGVzdHMgcnVuIHNvIGZhci4iCiAgICAjIC4uLgogICAgIyAiZXJyb3JzIC0gQSBsaXN0IGNvbnRhaW5pbmcgMi10dXBsZXMgb2YgVGVzdENhc2UgaW5zdGFuY2VzIGFuZAogICAgIyBmb3JtYXR0ZWQgdHJhY2ViYWNrcy4gRWFjaCB0dXBsZSByZXByZXNlbnRzIGEgdGVzdCB3aGljaCByYWlzZWQgYW4KICAgICMgdW5leHBlY3RlZCBleGNlcHRpb24uIENvbnRhaW5zIGZvcm1hdHRlZAogICAgIyB0cmFjZWJhY2tzIGluc3RlYWQgb2Ygc3lzLmV4Y19pbmZvKCkgcmVzdWx0cy4iCiAgICAjIC4uLgogICAgIyAiZmFpbHVyZXMgLSBBIGxpc3QgY29udGFpbmluZyAyLXR1cGxlcyBvZiBUZXN0Q2FzZSBpbnN0YW5jZXMgYW5kCiAgICAjIGZvcm1hdHRlZCB0cmFjZWJhY2tzLiBFYWNoIHR1cGxlIHJlcHJlc2VudHMgYSB0ZXN0IHdoZXJlIGEgZmFpbHVyZSB3YXMKICAgICMgZXhwbGljaXRseSBzaWduYWxsZWQgdXNpbmcgdGhlIFRlc3RDYXNlLmZhaWwqKCkgb3IgVGVzdENhc2UuYXNzZXJ0KigpCiAgICAjIG1ldGhvZHMuIENvbnRhaW5zIGZvcm1hdHRlZCB0cmFjZWJhY2tzIGluc3RlYWQKICAgICMgb2Ygc3lzLmV4Y19pbmZvKCkgcmVzdWx0cy4iCiAgICBkZWYgdGVzdF9hZGRGYWlsdXJlKHNlbGYpOgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIGRlZiB0ZXN0XzEoc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCgogICAgICAgIHRlc3QgPSBGb28oJ3Rlc3RfMScpCiAgICAgICAgdHJ5OgogICAgICAgICAgICB0ZXN0LmZhaWwoImZvbyIpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBleGNfaW5mb190dXBsZSA9IHN5cy5leGNfaW5mbygpCgogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQoKICAgICAgICByZXN1bHQuc3RhcnRUZXN0KHRlc3QpCiAgICAgICAgcmVzdWx0LmFkZEZhaWx1cmUodGVzdCwgZXhjX2luZm9fdHVwbGUpCiAgICAgICAgcmVzdWx0LnN0b3BUZXN0KHRlc3QpCgogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UocmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZXJyb3JzKSwgMCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZmFpbHVyZXMpLCAxKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnRlc3RzUnVuLCAxKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNob3VsZFN0b3AsIEZhbHNlKQoKICAgICAgICB0ZXN0X2Nhc2UsIGZvcm1hdHRlZF9leGMgPSByZXN1bHQuZmFpbHVyZXNbMF0KICAgICAgICBzZWxmLmFzc2VydFRydWUodGVzdF9jYXNlIGlzIHRlc3QpCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKGZvcm1hdHRlZF9leGMsIHN0cikKCiAgICAjICJhZGRFcnJvcih0ZXN0LCBlcnIpIgogICAgIyAuLi4KICAgICMgIkNhbGxlZCB3aGVuIHRoZSB0ZXN0IGNhc2UgdGVzdCByYWlzZXMgYW4gdW5leHBlY3RlZCBleGNlcHRpb24gZXJyCiAgICAjIGlzIGEgdHVwbGUgb2YgdGhlIGZvcm0gcmV0dXJuZWQgYnkgc3lzLmV4Y19pbmZvKCk6CiAgICAjICh0eXBlLCB2YWx1ZSwgdHJhY2ViYWNrKSIKICAgICMgLi4uCiAgICAjICJ3YXNTdWNjZXNzZnVsKCkgLSBSZXR1cm5zIFRydWUgaWYgYWxsIHRlc3RzIHJ1biBzbyBmYXIgaGF2ZSBwYXNzZWQsCiAgICAjIG90aGVyd2lzZSByZXR1cm5zIEZhbHNlIgogICAgIyAuLi4KICAgICMgInRlc3RzUnVuIC0gVGhlIHRvdGFsIG51bWJlciBvZiB0ZXN0cyBydW4gc28gZmFyLiIKICAgICMgLi4uCiAgICAjICJlcnJvcnMgLSBBIGxpc3QgY29udGFpbmluZyAyLXR1cGxlcyBvZiBUZXN0Q2FzZSBpbnN0YW5jZXMgYW5kCiAgICAjIGZvcm1hdHRlZCB0cmFjZWJhY2tzLiBFYWNoIHR1cGxlIHJlcHJlc2VudHMgYSB0ZXN0IHdoaWNoIHJhaXNlZCBhbgogICAgIyB1bmV4cGVjdGVkIGV4Y2VwdGlvbi4gQ29udGFpbnMgZm9ybWF0dGVkCiAgICAjIHRyYWNlYmFja3MgaW5zdGVhZCBvZiBzeXMuZXhjX2luZm8oKSByZXN1bHRzLiIKICAgICMgLi4uCiAgICAjICJmYWlsdXJlcyAtIEEgbGlzdCBjb250YWluaW5nIDItdHVwbGVzIG9mIFRlc3RDYXNlIGluc3RhbmNlcyBhbmQKICAgICMgZm9ybWF0dGVkIHRyYWNlYmFja3MuIEVhY2ggdHVwbGUgcmVwcmVzZW50cyBhIHRlc3Qgd2hlcmUgYSBmYWlsdXJlIHdhcwogICAgIyBleHBsaWNpdGx5IHNpZ25hbGxlZCB1c2luZyB0aGUgVGVzdENhc2UuZmFpbCooKSBvciBUZXN0Q2FzZS5hc3NlcnQqKCkKICAgICMgbWV0aG9kcy4gQ29udGFpbnMgZm9ybWF0dGVkIHRyYWNlYmFja3MgaW5zdGVhZAogICAgIyBvZiBzeXMuZXhjX2luZm8oKSByZXN1bHRzLiIKICAgIGRlZiB0ZXN0X2FkZEVycm9yKHNlbGYpOgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIGRlZiB0ZXN0XzEoc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCgogICAgICAgIHRlc3QgPSBGb28oJ3Rlc3RfMScpCiAgICAgICAgdHJ5OgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgZXhjX2luZm9fdHVwbGUgPSBzeXMuZXhjX2luZm8oKQoKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkKCiAgICAgICAgcmVzdWx0LnN0YXJ0VGVzdCh0ZXN0KQogICAgICAgIHJlc3VsdC5hZGRFcnJvcih0ZXN0LCBleGNfaW5mb190dXBsZSkKICAgICAgICByZXN1bHQuc3RvcFRlc3QodGVzdCkKCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShyZXN1bHQud2FzU3VjY2Vzc2Z1bCgpKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5lcnJvcnMpLCAxKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5mYWlsdXJlcyksIDApCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQudGVzdHNSdW4sIDEpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2hvdWxkU3RvcCwgRmFsc2UpCgogICAgICAgIHRlc3RfY2FzZSwgZm9ybWF0dGVkX2V4YyA9IHJlc3VsdC5lcnJvcnNbMF0KICAgICAgICBzZWxmLmFzc2VydFRydWUodGVzdF9jYXNlIGlzIHRlc3QpCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKGZvcm1hdHRlZF9leGMsIHN0cikKCiAgICBkZWYgdGVzdEdldERlc2NyaXB0aW9uV2l0aG91dERvY3N0cmluZyhzZWxmKToKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXh0VGVzdFJlc3VsdChOb25lLCBUcnVlLCAxKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoCiAgICAgICAgICAgICAgICByZXN1bHQuZ2V0RGVzY3JpcHRpb24oc2VsZiksCiAgICAgICAgICAgICAgICAndGVzdEdldERlc2NyaXB0aW9uV2l0aG91dERvY3N0cmluZyAoJyArIF9fbmFtZV9fICsKICAgICAgICAgICAgICAgICcuVGVzdF9UZXN0UmVzdWx0KScpCgogICAgQHVuaXR0ZXN0LnNraXBJZihzeXMuZmxhZ3Mub3B0aW1pemUgPj0gMiwKICAgICAgICAgICAgICAgICAgICAgIkRvY3N0cmluZ3MgYXJlIG9taXR0ZWQgd2l0aCAtTzIgYW5kIGFib3ZlIikKICAgIGRlZiB0ZXN0R2V0RGVzY3JpcHRpb25XaXRoT25lTGluZURvY3N0cmluZyhzZWxmKToKICAgICAgICAiIiJUZXN0cyBnZXREZXNjcmlwdGlvbigpIGZvciBhIG1ldGhvZCB3aXRoIGEgZG9jc3RyaW5nLiIiIgogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRleHRUZXN0UmVzdWx0KE5vbmUsIFRydWUsIDEpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgKICAgICAgICAgICAgICAgIHJlc3VsdC5nZXREZXNjcmlwdGlvbihzZWxmKSwKICAgICAgICAgICAgICAgKCd0ZXN0R2V0RGVzY3JpcHRpb25XaXRoT25lTGluZURvY3N0cmluZyAnCiAgICAgICAgICAgICAgICAnKCcgKyBfX25hbWVfXyArICcuVGVzdF9UZXN0UmVzdWx0KVxuJwogICAgICAgICAgICAgICAgJ1Rlc3RzIGdldERlc2NyaXB0aW9uKCkgZm9yIGEgbWV0aG9kIHdpdGggYSBkb2NzdHJpbmcuJykpCgogICAgQHVuaXR0ZXN0LnNraXBJZihzeXMuZmxhZ3Mub3B0aW1pemUgPj0gMiwKICAgICAgICAgICAgICAgICAgICAgIkRvY3N0cmluZ3MgYXJlIG9taXR0ZWQgd2l0aCAtTzIgYW5kIGFib3ZlIikKICAgIGRlZiB0ZXN0R2V0RGVzY3JpcHRpb25XaXRoTXVsdGlMaW5lRG9jc3RyaW5nKHNlbGYpOgogICAgICAgICIiIlRlc3RzIGdldERlc2NyaXB0aW9uKCkgZm9yIGEgbWV0aG9kIHdpdGggYSBsb25nZXIgZG9jc3RyaW5nLgogICAgICAgIFRoZSBzZWNvbmQgbGluZSBvZiB0aGUgZG9jc3RyaW5nLgogICAgICAgICIiIgogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRleHRUZXN0UmVzdWx0KE5vbmUsIFRydWUsIDEpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgKICAgICAgICAgICAgICAgIHJlc3VsdC5nZXREZXNjcmlwdGlvbihzZWxmKSwKICAgICAgICAgICAgICAgKCd0ZXN0R2V0RGVzY3JpcHRpb25XaXRoTXVsdGlMaW5lRG9jc3RyaW5nICcKICAgICAgICAgICAgICAgICcoJyArIF9fbmFtZV9fICsgJy5UZXN0X1Rlc3RSZXN1bHQpXG4nCiAgICAgICAgICAgICAgICAnVGVzdHMgZ2V0RGVzY3JpcHRpb24oKSBmb3IgYSBtZXRob2Qgd2l0aCBhIGxvbmdlciAnCiAgICAgICAgICAgICAgICAnZG9jc3RyaW5nLicpKQoKICAgIGRlZiB0ZXN0U3RhY2tGcmFtZVRyaW1taW5nKHNlbGYpOgogICAgICAgIGNsYXNzIEZyYW1lKG9iamVjdCk6CiAgICAgICAgICAgIGNsYXNzIHRiX2ZyYW1lKG9iamVjdCk6CiAgICAgICAgICAgICAgICBmX2dsb2JhbHMgPSB7fQogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UocmVzdWx0Ll9pc19yZWxldmFudF90Yl9sZXZlbChGcmFtZSkpCgogICAgICAgIEZyYW1lLnRiX2ZyYW1lLmZfZ2xvYmFsc1snX191bml0dGVzdCddID0gVHJ1ZQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShyZXN1bHQuX2lzX3JlbGV2YW50X3RiX2xldmVsKEZyYW1lKSkKCiAgICBkZWYgdGVzdEZhaWxGYXN0KHNlbGYpOgogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQogICAgICAgIHJlc3VsdC5fZXhjX2luZm9fdG9fc3RyaW5nID0gbGFtYmRhICpfOiAnJwogICAgICAgIHJlc3VsdC5mYWlsZmFzdCA9IFRydWUKICAgICAgICByZXN1bHQuYWRkRXJyb3IoTm9uZSwgTm9uZSkKICAgICAgICBzZWxmLmFzc2VydFRydWUocmVzdWx0LnNob3VsZFN0b3ApCgogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQogICAgICAgIHJlc3VsdC5fZXhjX2luZm9fdG9fc3RyaW5nID0gbGFtYmRhICpfOiAnJwogICAgICAgIHJlc3VsdC5mYWlsZmFzdCA9IFRydWUKICAgICAgICByZXN1bHQuYWRkRmFpbHVyZShOb25lLCBOb25lKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShyZXN1bHQuc2hvdWxkU3RvcCkKCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCiAgICAgICAgcmVzdWx0Ll9leGNfaW5mb190b19zdHJpbmcgPSBsYW1iZGEgKl86ICcnCiAgICAgICAgcmVzdWx0LmZhaWxmYXN0ID0gVHJ1ZQogICAgICAgIHJlc3VsdC5hZGRVbmV4cGVjdGVkU3VjY2VzcyhOb25lKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShyZXN1bHQuc2hvdWxkU3RvcCkKCiAgICBkZWYgdGVzdEZhaWxGYXN0U2V0QnlSdW5uZXIoc2VsZik6CiAgICAgICAgcnVubmVyID0gdW5pdHRlc3QuVGV4dFRlc3RSdW5uZXIoc3RyZWFtPWlvLlN0cmluZ0lPKCksIGZhaWxmYXN0PVRydWUpCiAgICAgICAgZGVmIHRlc3QocmVzdWx0KToKICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKHJlc3VsdC5mYWlsZmFzdCkKICAgICAgICByZXN1bHQgPSBydW5uZXIucnVuKHRlc3QpCgoKY2xhc3NEaWN0ID0gZGljdCh1bml0dGVzdC5UZXN0UmVzdWx0Ll9fZGljdF9fKQpmb3IgbSBpbiAoJ2FkZFNraXAnLCAnYWRkRXhwZWN0ZWRGYWlsdXJlJywgJ2FkZFVuZXhwZWN0ZWRTdWNjZXNzJywKICAgICAgICAgICAnX19pbml0X18nKToKICAgIGRlbCBjbGFzc0RpY3RbbV0KCmRlZiBfX2luaXRfXyhzZWxmLCBzdHJlYW09Tm9uZSwgZGVzY3JpcHRpb25zPU5vbmUsIHZlcmJvc2l0eT1Ob25lKToKICAgIHNlbGYuZmFpbHVyZXMgPSBbXQogICAgc2VsZi5lcnJvcnMgPSBbXQogICAgc2VsZi50ZXN0c1J1biA9IDAKICAgIHNlbGYuc2hvdWxkU3RvcCA9IEZhbHNlCiAgICBzZWxmLmJ1ZmZlciA9IEZhbHNlCgpjbGFzc0RpY3RbJ19faW5pdF9fJ10gPSBfX2luaXRfXwpPbGRSZXN1bHQgPSB0eXBlKCdPbGRSZXN1bHQnLCAob2JqZWN0LCksIGNsYXNzRGljdCkKCmNsYXNzIFRlc3RfT2xkVGVzdFJlc3VsdCh1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIGFzc2VydE9sZFJlc3VsdFdhcm5pbmcoc2VsZiwgdGVzdCwgZmFpbHVyZXMpOgogICAgICAgIHdpdGggc3VwcG9ydC5jaGVja193YXJuaW5ncygoIlRlc3RSZXN1bHQgaGFzIG5vIGFkZC4rIG1ldGhvZCwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUnVudGltZVdhcm5pbmcpKToKICAgICAgICAgICAgcmVzdWx0ID0gT2xkUmVzdWx0KCkKICAgICAgICAgICAgdGVzdC5ydW4ocmVzdWx0KQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZmFpbHVyZXMpLCBmYWlsdXJlcykKCiAgICBkZWYgdGVzdE9sZFRlc3RSZXN1bHQoc2VsZik6CiAgICAgICAgY2xhc3MgVGVzdCh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIGRlZiB0ZXN0U2tpcChzZWxmKToKICAgICAgICAgICAgICAgIHNlbGYuc2tpcFRlc3QoJ2Zvb2JhcicpCiAgICAgICAgICAgIEB1bml0dGVzdC5leHBlY3RlZEZhaWx1cmUKICAgICAgICAgICAgZGVmIHRlc3RFeHBlY3RlZEZhaWwoc2VsZik6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IKICAgICAgICAgICAgQHVuaXR0ZXN0LmV4cGVjdGVkRmFpbHVyZQogICAgICAgICAgICBkZWYgdGVzdFVuZXhwZWN0ZWRTdWNjZXNzKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICBmb3IgdGVzdF9uYW1lLCBzaG91bGRfcGFzcyBpbiAoKCd0ZXN0U2tpcCcsIFRydWUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJ3Rlc3RFeHBlY3RlZEZhaWwnLCBUcnVlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCd0ZXN0VW5leHBlY3RlZFN1Y2Nlc3MnLCBGYWxzZSkpOgogICAgICAgICAgICB0ZXN0ID0gVGVzdCh0ZXN0X25hbWUpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0T2xkUmVzdWx0V2FybmluZyh0ZXN0LCBpbnQobm90IHNob3VsZF9wYXNzKSkKCiAgICBkZWYgdGVzdE9sZFRlc3RUZXN1bHRTZXR1cChzZWxmKToKICAgICAgICBjbGFzcyBUZXN0KHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICAgICAgICAgZGVmIHNldFVwKHNlbGYpOgogICAgICAgICAgICAgICAgc2VsZi5za2lwVGVzdCgnbm8gcmVhc29uJykKICAgICAgICAgICAgZGVmIHRlc3RGb28oc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgc2VsZi5hc3NlcnRPbGRSZXN1bHRXYXJuaW5nKFRlc3QoJ3Rlc3RGb28nKSwgMCkKCiAgICBkZWYgdGVzdE9sZFRlc3RSZXN1bHRDbGFzcyhzZWxmKToKICAgICAgICBAdW5pdHRlc3Quc2tpcCgnbm8gcmVhc29uJykKICAgICAgICBjbGFzcyBUZXN0KHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICAgICAgICAgZGVmIHRlc3RGb28oc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgc2VsZi5hc3NlcnRPbGRSZXN1bHRXYXJuaW5nKFRlc3QoJ3Rlc3RGb28nKSwgMCkKCiAgICBkZWYgdGVzdE9sZFJlc3VsdFdpdGhSdW5uZXIoc2VsZik6CiAgICAgICAgY2xhc3MgVGVzdCh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIGRlZiB0ZXN0Rm9vKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIHJ1bm5lciA9IHVuaXR0ZXN0LlRleHRUZXN0UnVubmVyKHJlc3VsdGNsYXNzPU9sZFJlc3VsdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtPWlvLlN0cmluZ0lPKCkpCiAgICAgICAgIyBUaGlzIHdpbGwgcmFpc2UgYW4gZXhjZXB0aW9uIGlmIFRleHRUZXN0UnVubmVyIGNhbid0IGhhbmRsZSBvbGQKICAgICAgICAjIHRlc3QgcmVzdWx0IG9iamVjdHMKICAgICAgICBydW5uZXIucnVuKFRlc3QoJ3Rlc3RGb28nKSkKCgpjbGFzcyBNb2NrVHJhY2ViYWNrKG9iamVjdCk6CiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgZm9ybWF0X2V4Y2VwdGlvbigqXyk6CiAgICAgICAgcmV0dXJuIFsnQSB0cmFjZWJhY2snXQoKZGVmIHJlc3RvcmVfdHJhY2ViYWNrKCk6CiAgICB1bml0dGVzdC5yZXN1bHQudHJhY2ViYWNrID0gdHJhY2ViYWNrCgoKY2xhc3MgVGVzdE91dHB1dEJ1ZmZlcmluZyh1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHNldFVwKHNlbGYpOgogICAgICAgIHNlbGYuX3JlYWxfb3V0ID0gc3lzLnN0ZG91dAogICAgICAgIHNlbGYuX3JlYWxfZXJyID0gc3lzLnN0ZGVycgoKICAgIGRlZiB0ZWFyRG93bihzZWxmKToKICAgICAgICBzeXMuc3Rkb3V0ID0gc2VsZi5fcmVhbF9vdXQKICAgICAgICBzeXMuc3RkZXJyID0gc2VsZi5fcmVhbF9lcnIKCiAgICBkZWYgdGVzdEJ1ZmZlck91dHB1dE9mZihzZWxmKToKICAgICAgICByZWFsX291dCA9IHNlbGYuX3JlYWxfb3V0CiAgICAgICAgcmVhbF9lcnIgPSBzZWxmLl9yZWFsX2VycgoKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkKICAgICAgICBzZWxmLmFzc2VydEZhbHNlKHJlc3VsdC5idWZmZXIpCgogICAgICAgIHNlbGYuYXNzZXJ0SXMocmVhbF9vdXQsIHN5cy5zdGRvdXQpCiAgICAgICAgc2VsZi5hc3NlcnRJcyhyZWFsX2Vyciwgc3lzLnN0ZGVycikKCiAgICAgICAgcmVzdWx0LnN0YXJ0VGVzdChzZWxmKQoKICAgICAgICBzZWxmLmFzc2VydElzKHJlYWxfb3V0LCBzeXMuc3Rkb3V0KQogICAgICAgIHNlbGYuYXNzZXJ0SXMocmVhbF9lcnIsIHN5cy5zdGRlcnIpCgogICAgZGVmIHRlc3RCdWZmZXJPdXRwdXRTdGFydFRlc3RBZGRTdWNjZXNzKHNlbGYpOgogICAgICAgIHJlYWxfb3V0ID0gc2VsZi5fcmVhbF9vdXQKICAgICAgICByZWFsX2VyciA9IHNlbGYuX3JlYWxfZXJyCgogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UocmVzdWx0LmJ1ZmZlcikKCiAgICAgICAgcmVzdWx0LmJ1ZmZlciA9IFRydWUKCiAgICAgICAgc2VsZi5hc3NlcnRJcyhyZWFsX291dCwgc3lzLnN0ZG91dCkKICAgICAgICBzZWxmLmFzc2VydElzKHJlYWxfZXJyLCBzeXMuc3RkZXJyKQoKICAgICAgICByZXN1bHQuc3RhcnRUZXN0KHNlbGYpCgogICAgICAgIHNlbGYuYXNzZXJ0SXNOb3QocmVhbF9vdXQsIHN5cy5zdGRvdXQpCiAgICAgICAgc2VsZi5hc3NlcnRJc05vdChyZWFsX2Vyciwgc3lzLnN0ZGVycikKICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2Uoc3lzLnN0ZG91dCwgaW8uU3RyaW5nSU8pCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHN5cy5zdGRlcnIsIGlvLlN0cmluZ0lPKQogICAgICAgIHNlbGYuYXNzZXJ0SXNOb3Qoc3lzLnN0ZG91dCwgc3lzLnN0ZGVycikKCiAgICAgICAgb3V0X3N0cmVhbSA9IHN5cy5zdGRvdXQKICAgICAgICBlcnJfc3RyZWFtID0gc3lzLnN0ZGVycgoKICAgICAgICByZXN1bHQuX29yaWdpbmFsX3N0ZG91dCA9IGlvLlN0cmluZ0lPKCkKICAgICAgICByZXN1bHQuX29yaWdpbmFsX3N0ZGVyciA9IGlvLlN0cmluZ0lPKCkKCiAgICAgICAgcHJpbnQoJ2ZvbycpCiAgICAgICAgcHJpbnQoJ2JhcicsIGZpbGU9c3lzLnN0ZGVycikKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChvdXRfc3RyZWFtLmdldHZhbHVlKCksICdmb29cbicpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChlcnJfc3RyZWFtLmdldHZhbHVlKCksICdiYXJcbicpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0Ll9vcmlnaW5hbF9zdGRvdXQuZ2V0dmFsdWUoKSwgJycpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuX29yaWdpbmFsX3N0ZGVyci5nZXR2YWx1ZSgpLCAnJykKCiAgICAgICAgcmVzdWx0LmFkZFN1Y2Nlc3Moc2VsZikKICAgICAgICByZXN1bHQuc3RvcFRlc3Qoc2VsZikKCiAgICAgICAgc2VsZi5hc3NlcnRJcyhzeXMuc3Rkb3V0LCByZXN1bHQuX29yaWdpbmFsX3N0ZG91dCkKICAgICAgICBzZWxmLmFzc2VydElzKHN5cy5zdGRlcnIsIHJlc3VsdC5fb3JpZ2luYWxfc3RkZXJyKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5fb3JpZ2luYWxfc3Rkb3V0LmdldHZhbHVlKCksICcnKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0Ll9vcmlnaW5hbF9zdGRlcnIuZ2V0dmFsdWUoKSwgJycpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwob3V0X3N0cmVhbS5nZXR2YWx1ZSgpLCAnJykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGVycl9zdHJlYW0uZ2V0dmFsdWUoKSwgJycpCgoKICAgIGRlZiBnZXRTdGFydGVkUmVzdWx0KHNlbGYpOgogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQogICAgICAgIHJlc3VsdC5idWZmZXIgPSBUcnVlCiAgICAgICAgcmVzdWx0LnN0YXJ0VGVzdChzZWxmKQogICAgICAgIHJldHVybiByZXN1bHQKCiAgICBkZWYgdGVzdEJ1ZmZlck91dHB1dEFkZEVycm9yT3JGYWlsdXJlKHNlbGYpOgogICAgICAgIHVuaXR0ZXN0LnJlc3VsdC50cmFjZWJhY2sgPSBNb2NrVHJhY2ViYWNrCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHJlc3RvcmVfdHJhY2ViYWNrKQoKICAgICAgICBmb3IgbWVzc2FnZV9hdHRyLCBhZGRfYXR0ciwgaW5jbHVkZV9lcnJvciBpbiBbCiAgICAgICAgICAgICgnZXJyb3JzJywgJ2FkZEVycm9yJywgVHJ1ZSksCiAgICAgICAgICAgICgnZmFpbHVyZXMnLCAnYWRkRmFpbHVyZScsIEZhbHNlKSwKICAgICAgICAgICAgKCdlcnJvcnMnLCAnYWRkRXJyb3InLCBUcnVlKSwKICAgICAgICAgICAgKCdmYWlsdXJlcycsICdhZGRGYWlsdXJlJywgRmFsc2UpCiAgICAgICAgXToKICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5nZXRTdGFydGVkUmVzdWx0KCkKICAgICAgICAgICAgYnVmZmVyZWRfb3V0ID0gc3lzLnN0ZG91dAogICAgICAgICAgICBidWZmZXJlZF9lcnIgPSBzeXMuc3RkZXJyCiAgICAgICAgICAgIHJlc3VsdC5fb3JpZ2luYWxfc3Rkb3V0ID0gaW8uU3RyaW5nSU8oKQogICAgICAgICAgICByZXN1bHQuX29yaWdpbmFsX3N0ZGVyciA9IGlvLlN0cmluZ0lPKCkKCiAgICAgICAgICAgIHByaW50KCdmb28nLCBmaWxlPXN5cy5zdGRvdXQpCiAgICAgICAgICAgIGlmIGluY2x1ZGVfZXJyb3I6CiAgICAgICAgICAgICAgICBwcmludCgnYmFyJywgZmlsZT1zeXMuc3RkZXJyKQoKCiAgICAgICAgICAgIGFkZEZ1bmN0aW9uID0gZ2V0YXR0cihyZXN1bHQsIGFkZF9hdHRyKQogICAgICAgICAgICBhZGRGdW5jdGlvbihzZWxmLCAoTm9uZSwgTm9uZSwgTm9uZSkpCiAgICAgICAgICAgIHJlc3VsdC5zdG9wVGVzdChzZWxmKQoKICAgICAgICAgICAgcmVzdWx0X2xpc3QgPSBnZXRhdHRyKHJlc3VsdCwgbWVzc2FnZV9hdHRyKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHRfbGlzdCksIDEpCgogICAgICAgICAgICB0ZXN0LCBtZXNzYWdlID0gcmVzdWx0X2xpc3RbMF0KICAgICAgICAgICAgZXhwZWN0ZWRPdXRNZXNzYWdlID0gdGV4dHdyYXAuZGVkZW50KCIiIgogICAgICAgICAgICAgICAgU3Rkb3V0OgogICAgICAgICAgICAgICAgZm9vCiAgICAgICAgICAgICIiIikKICAgICAgICAgICAgZXhwZWN0ZWRFcnJNZXNzYWdlID0gJycKICAgICAgICAgICAgaWYgaW5jbHVkZV9lcnJvcjoKICAgICAgICAgICAgICAgIGV4cGVjdGVkRXJyTWVzc2FnZSA9IHRleHR3cmFwLmRlZGVudCgiIiIKICAgICAgICAgICAgICAgIFN0ZGVycjoKICAgICAgICAgICAgICAgIGJhcgogICAgICAgICAgICAiIiIpCgogICAgICAgICAgICBleHBlY3RlZEZ1bGxNZXNzYWdlID0gJ0EgdHJhY2ViYWNrJXMlcycgJSAoZXhwZWN0ZWRPdXRNZXNzYWdlLCBleHBlY3RlZEVyck1lc3NhZ2UpCgogICAgICAgICAgICBzZWxmLmFzc2VydElzKHRlc3QsIHNlbGYpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0Ll9vcmlnaW5hbF9zdGRvdXQuZ2V0dmFsdWUoKSwgZXhwZWN0ZWRPdXRNZXNzYWdlKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5fb3JpZ2luYWxfc3RkZXJyLmdldHZhbHVlKCksIGV4cGVjdGVkRXJyTWVzc2FnZSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRNdWx0aUxpbmVFcXVhbChtZXNzYWdlLCBleHBlY3RlZEZ1bGxNZXNzYWdlKQoKICAgIGRlZiB0ZXN0QnVmZmVyU2V0dXBDbGFzcyhzZWxmKToKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkKICAgICAgICByZXN1bHQuYnVmZmVyID0gVHJ1ZQoKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBAY2xhc3NtZXRob2QKICAgICAgICAgICAgZGVmIHNldFVwQ2xhc3MoY2xzKToKICAgICAgICAgICAgICAgIDEvMAogICAgICAgICAgICBkZWYgdGVzdF9mb28oc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW0ZvbygndGVzdF9mb28nKV0pCiAgICAgICAgc3VpdGUocmVzdWx0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5lcnJvcnMpLCAxKQoKICAgIGRlZiB0ZXN0QnVmZmVyVGVhckRvd25DbGFzcyhzZWxmKToKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkKICAgICAgICByZXN1bHQuYnVmZmVyID0gVHJ1ZQoKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBAY2xhc3NtZXRob2QKICAgICAgICAgICAgZGVmIHRlYXJEb3duQ2xhc3MoY2xzKToKICAgICAgICAgICAgICAgIDEvMAogICAgICAgICAgICBkZWYgdGVzdF9mb28oc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW0ZvbygndGVzdF9mb28nKV0pCiAgICAgICAgc3VpdGUocmVzdWx0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5lcnJvcnMpLCAxKQoKICAgIGRlZiB0ZXN0QnVmZmVyU2V0VXBNb2R1bGUoc2VsZik6CiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCiAgICAgICAgcmVzdWx0LmJ1ZmZlciA9IFRydWUKCiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICAgICAgICAgZGVmIHRlc3RfZm9vKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIGNsYXNzIE1vZHVsZShvYmplY3QpOgogICAgICAgICAgICBAc3RhdGljbWV0aG9kCiAgICAgICAgICAgIGRlZiBzZXRVcE1vZHVsZSgpOgogICAgICAgICAgICAgICAgMS8wCgogICAgICAgIEZvby5fX21vZHVsZV9fID0gJ01vZHVsZScKICAgICAgICBzeXMubW9kdWxlc1snTW9kdWxlJ10gPSBNb2R1bGUKICAgICAgICBzZWxmLmFkZENsZWFudXAoc3lzLm1vZHVsZXMucG9wLCAnTW9kdWxlJykKICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbRm9vKCd0ZXN0X2ZvbycpXSkKICAgICAgICBzdWl0ZShyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsZW4ocmVzdWx0LmVycm9ycyksIDEpCgogICAgZGVmIHRlc3RCdWZmZXJUZWFyRG93bk1vZHVsZShzZWxmKToKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkKICAgICAgICByZXN1bHQuYnVmZmVyID0gVHJ1ZQoKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBkZWYgdGVzdF9mb28oc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgY2xhc3MgTW9kdWxlKG9iamVjdCk6CiAgICAgICAgICAgIEBzdGF0aWNtZXRob2QKICAgICAgICAgICAgZGVmIHRlYXJEb3duTW9kdWxlKCk6CiAgICAgICAgICAgICAgICAxLzAKCiAgICAgICAgRm9vLl9fbW9kdWxlX18gPSAnTW9kdWxlJwogICAgICAgIHN5cy5tb2R1bGVzWydNb2R1bGUnXSA9IE1vZHVsZQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChzeXMubW9kdWxlcy5wb3AsICdNb2R1bGUnKQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKFtGb28oJ3Rlc3RfZm9vJyldKQogICAgICAgIHN1aXRlKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGxlbihyZXN1bHQuZXJyb3JzKSwgMSkKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgdW5pdHRlc3QubWFpbigpCg==',
'/Lib/unittest/test/test_runner.py':'',
'/Lib/unittest/test/test_setups.py':'',
'/Lib/unittest/test/test_skipping.py':'aW1wb3J0IHVuaXR0ZXN0Cgpmcm9tIC5zdXBwb3J0IGltcG9ydCBMb2dnaW5nUmVzdWx0CgoKY2xhc3MgVGVzdF9UZXN0U2tpcHBpbmcodW5pdHRlc3QuVGVzdENhc2UpOgoKICAgIGRlZiB0ZXN0X3NraXBwaW5nKHNlbGYpOgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIGRlZiB0ZXN0X3NraXBfbWUoc2VsZik6CiAgICAgICAgICAgICAgICBzZWxmLnNraXBUZXN0KCJza2lwIikKICAgICAgICBldmVudHMgPSBbXQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQogICAgICAgIHRlc3QgPSBGb28oInRlc3Rfc2tpcF9tZSIpCiAgICAgICAgdGVzdC5ydW4ocmVzdWx0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLCBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0J10pCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0LCAic2tpcCIpXSkKCiAgICAgICAgIyBUcnkgbGV0dGluZyBzZXRVcCBza2lwIHRoZSB0ZXN0IG5vdy4KICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBkZWYgc2V0VXAoc2VsZik6CiAgICAgICAgICAgICAgICBzZWxmLnNraXBUZXN0KCJ0ZXN0aW5nIikKICAgICAgICAgICAgZGVmIHRlc3Rfbm90aGluZyhzZWxmKTogcGFzcwogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9ub3RoaW5nIikKICAgICAgICB0ZXN0LnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIFsnc3RhcnRUZXN0JywgJ2FkZFNraXAnLCAnc3RvcFRlc3QnXSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnRlc3RzUnVuLCAxKQoKICAgIGRlZiB0ZXN0X3NraXBwaW5nX2RlY29yYXRvcnMoc2VsZik6CiAgICAgICAgb3BfdGFibGUgPSAoKHVuaXR0ZXN0LnNraXBVbmxlc3MsIEZhbHNlLCBUcnVlKSwKICAgICAgICAgICAgICAgICAgICAodW5pdHRlc3Quc2tpcElmLCBUcnVlLCBGYWxzZSkpCiAgICAgICAgZm9yIGRlY28sIGRvX3NraXAsIGRvbnRfc2tpcCBpbiBvcF90YWJsZToKICAgICAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICAgICAgICAgICAgIEBkZWNvKGRvX3NraXAsICJ0ZXN0aW5nIikKICAgICAgICAgICAgICAgIGRlZiB0ZXN0X3NraXAoc2VsZik6IHBhc3MKCiAgICAgICAgICAgICAgICBAZGVjbyhkb250X3NraXAsICJ0ZXN0aW5nIikKICAgICAgICAgICAgICAgIGRlZiB0ZXN0X2RvbnRfc2tpcChzZWxmKTogcGFzcwogICAgICAgICAgICB0ZXN0X2RvX3NraXAgPSBGb28oInRlc3Rfc2tpcCIpCiAgICAgICAgICAgIHRlc3RfZG9udF9za2lwID0gRm9vKCJ0ZXN0X2RvbnRfc2tpcCIpCiAgICAgICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKFt0ZXN0X2RvX3NraXAsIHRlc3RfZG9udF9za2lwXSkKICAgICAgICAgICAgZXZlbnRzID0gW10KICAgICAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5za2lwcGVkKSwgMSkKICAgICAgICAgICAgZXhwZWN0ZWQgPSBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0VGVzdCcsICdhZGRTdWNjZXNzJywgJ3N0b3BUZXN0J10KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC50ZXN0c1J1biwgMikKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0X2RvX3NraXAsICJ0ZXN0aW5nIildKQogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUocmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkKCiAgICBkZWYgdGVzdF9za2lwX2NsYXNzKHNlbGYpOgogICAgICAgIEB1bml0dGVzdC5za2lwKCJ0ZXN0aW5nIikKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOgogICAgICAgICAgICAgICAgcmVjb3JkLmFwcGVuZCgxKQogICAgICAgIHJlY29yZCA9IFtdCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikKICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pCiAgICAgICAgc3VpdGUucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVjb3JkLCBbXSkKCiAgICBkZWYgdGVzdF9za2lwX25vbl91bml0dGVzdF9jbGFzcyhzZWxmKToKICAgICAgICBAdW5pdHRlc3Quc2tpcCgidGVzdGluZyIpCiAgICAgICAgY2xhc3MgTWl4aW46CiAgICAgICAgICAgIGRlZiB0ZXN0XzEoc2VsZik6CiAgICAgICAgICAgICAgICByZWNvcmQuYXBwZW5kKDEpCiAgICAgICAgY2xhc3MgRm9vKE1peGluLCB1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIHBhc3MKICAgICAgICByZWNvcmQgPSBbXQogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQogICAgICAgIHRlc3QgPSBGb28oInRlc3RfMSIpCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW3Rlc3RdKQogICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0LCAidGVzdGluZyIpXSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlY29yZCwgW10pCgogICAgZGVmIHRlc3RfZXhwZWN0ZWRfZmFpbHVyZShzZWxmKToKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBAdW5pdHRlc3QuZXhwZWN0ZWRGYWlsdXJlCiAgICAgICAgICAgIGRlZiB0ZXN0X2RpZShzZWxmKToKICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiaGVscCBtZSEiKQogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9kaWUiKQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RhcnRUZXN0JywgJ2FkZEV4cGVjdGVkRmFpbHVyZScsICdzdG9wVGVzdCddKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LmV4cGVjdGVkRmFpbHVyZXNbMF1bMF0sIHRlc3QpCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKHJlc3VsdC53YXNTdWNjZXNzZnVsKCkpCgogICAgZGVmIHRlc3RfdW5leHBlY3RlZF9zdWNjZXNzKHNlbGYpOgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIEB1bml0dGVzdC5leHBlY3RlZEZhaWx1cmUKICAgICAgICAgICAgZGVmIHRlc3RfZGllKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9kaWUiKQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RhcnRUZXN0JywgJ2FkZFVuZXhwZWN0ZWRTdWNjZXNzJywgJ3N0b3BUZXN0J10pCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShyZXN1bHQuZmFpbHVyZXMpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQudW5leHBlY3RlZFN1Y2Nlc3NlcywgW3Rlc3RdKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShyZXN1bHQud2FzU3VjY2Vzc2Z1bCgpKQoKICAgIGRlZiB0ZXN0X3NraXBfZG9lc250X3J1bl9zZXR1cChzZWxmKToKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICB3YXNTZXRVcCA9IEZhbHNlCiAgICAgICAgICAgIHdhc1Rvcm5Eb3duID0gRmFsc2UKICAgICAgICAgICAgZGVmIHNldFVwKHNlbGYpOgogICAgICAgICAgICAgICAgRm9vLndhc1NldFVwID0gVHJ1ZQogICAgICAgICAgICBkZWYgdG9ybkRvd24oc2VsZik6CiAgICAgICAgICAgICAgICBGb28ud2FzVG9ybkRvd24gPSBUcnVlCiAgICAgICAgICAgIEB1bml0dGVzdC5za2lwKCd0ZXN0aW5nJykKICAgICAgICAgICAgZGVmIHRlc3RfMShzZWxmKToKICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikKICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pCiAgICAgICAgc3VpdGUucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoRm9vLndhc1NldFVwKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoRm9vLndhc1Rvcm5Eb3duKQoKICAgIGRlZiB0ZXN0X2RlY29yYXRlZF9za2lwKHNlbGYpOgogICAgICAgIGRlZiBkZWNvcmF0b3IoZnVuYyk6CiAgICAgICAgICAgIGRlZiBpbm5lcigqYSk6CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYygqYSkKICAgICAgICAgICAgcmV0dXJuIGlubmVyCgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIEBkZWNvcmF0b3IKICAgICAgICAgICAgQHVuaXR0ZXN0LnNraXAoJ3Rlc3RpbmcnKQogICAgICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkKICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0XzEiKQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKFt0ZXN0XSkKICAgICAgICBzdWl0ZS5ydW4ocmVzdWx0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdCwgInRlc3RpbmciKV0pCg==',
'/Lib/unittest/test/test_suite.py':'',
'/Lib/unittest/test/_test_warnings.py':'IyBoZWxwZXIgbW9kdWxlIGZvciB0ZXN0X3J1bm5lci5UZXN0X1RleHRUZXN0UnVubmVyLnRlc3Rfd2FybmluZ3MKCiIiIgpUaGlzIG1vZHVsZSBoYXMgYSBudW1iZXIgb2YgdGVzdHMgdGhhdCByYWlzZSBkaWZmZXJlbnQga2luZHMgb2Ygd2FybmluZ3MuCldoZW4gdGhlIHRlc3RzIGFyZSBydW4sIHRoZSB3YXJuaW5ncyBhcmUgY2F1Z2h0IGFuZCB0aGVpciBtZXNzYWdlcyBhcmUgcHJpbnRlZAp0byBzdGRvdXQuICBUaGlzIG1vZHVsZSBhbHNvIGFjY2VwdHMgYW4gYXJnIHRoYXQgaXMgdGhlbiBwYXNzZWQgdG8KdW5pdHRlc3QubWFpbiB0byBhZmZlY3QgdGhlIGJlaGF2aW9yIG9mIHdhcm5pbmdzLgpUZXN0X1RleHRUZXN0UnVubmVyLnRlc3Rfd2FybmluZ3MgZXhlY3V0ZXMgdGhpcyBzY3JpcHQgd2l0aCBkaWZmZXJlbnQKY29tYmluYXRpb25zIG9mIHdhcm5pbmdzIGFyZ3MgYW5kIC1XIGZsYWdzIGFuZCBjaGVjayB0aGF0IHRoZSBvdXRwdXQgaXMgY29ycmVjdC4KU2VlICMxMDUzNS4KIiIiCgppbXBvcnQgc3lzCmltcG9ydCB1bml0dGVzdAppbXBvcnQgd2FybmluZ3MKCmRlZiB3YXJuZnVuKCk6CiAgICB3YXJuaW5ncy53YXJuKCdydycsIFJ1bnRpbWVXYXJuaW5nKQoKY2xhc3MgVGVzdFdhcm5pbmdzKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICMgdW5pdHRlc3Qgd2FybmluZ3Mgd2lsbCBiZSBwcmludGVkIGF0IG1vc3Qgb25jZSBwZXIgdHlwZSAobWF4IG9uZSBtZXNzYWdlCiAgICAjIGZvciB0aGUgZmFpbCogbWV0aG9kcywgYW5kIG9uZSBmb3IgdGhlIGFzc2VydCogbWV0aG9kcykKICAgIGRlZiB0ZXN0X2Fzc2VydChzZWxmKToKICAgICAgICBzZWxmLmFzc2VydEVxdWFscygyKzIsIDQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbHMoMioyLCA0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWxzKDIqKjIsIDQpCgogICAgZGVmIHRlc3RfZmFpbChzZWxmKToKICAgICAgICBzZWxmLmZhaWxVbmxlc3MoMSkKICAgICAgICBzZWxmLmZhaWxVbmxlc3MoVHJ1ZSkKCiAgICBkZWYgdGVzdF9vdGhlcl91bml0dGVzdChzZWxmKToKICAgICAgICBzZWxmLmFzc2VydEFsbW9zdEVxdWFsKDIrMiwgNCkKICAgICAgICBzZWxmLmFzc2VydE5vdEFsbW9zdEVxdWFsKDQrNCwgMikKCiAgICAjIHRoZXNlIHdhcm5pbmdzIGFyZSBub3JtYWxseSBzaWxlbmNlZCwgYnV0IHRoZXkgYXJlIHByaW50ZWQgaW4gdW5pdHRlc3QKICAgIGRlZiB0ZXN0X2RlcHJlY2F0aW9uKHNlbGYpOgogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQoKICAgIGRlZiB0ZXN0X2ltcG9ydChzZWxmKToKICAgICAgICB3YXJuaW5ncy53YXJuKCdpdycsIEltcG9ydFdhcm5pbmcpCiAgICAgICAgd2FybmluZ3Mud2FybignaXcnLCBJbXBvcnRXYXJuaW5nKQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2l3JywgSW1wb3J0V2FybmluZykKCiAgICAjIHVzZXIgd2FybmluZ3Mgc2hvdWxkIGFsd2F5cyBiZSBwcmludGVkCiAgICBkZWYgdGVzdF93YXJuaW5nKHNlbGYpOgogICAgICAgIHdhcm5pbmdzLndhcm4oJ3V3JykKICAgICAgICB3YXJuaW5ncy53YXJuKCd1dycpCiAgICAgICAgd2FybmluZ3Mud2FybigndXcnKQoKICAgICMgdGhlc2Ugd2FybmluZ3MgY29tZSBmcm9tIHRoZSBzYW1lIHBsYWNlOyB0aGV5IHdpbGwgYmUgcHJpbnRlZAogICAgIyBvbmx5IG9uY2UgYnkgZGVmYXVsdCBvciB0aHJlZSB0aW1lcyBpZiB0aGUgJ2Fsd2F5cycgZmlsdGVyIGlzIHVzZWQKICAgIGRlZiB0ZXN0X2Z1bmN0aW9uKHNlbGYpOgoKICAgICAgICB3YXJuZnVuKCkKICAgICAgICB3YXJuZnVuKCkKICAgICAgICB3YXJuZnVuKCkKCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHdpdGggd2FybmluZ3MuY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpIGFzIHdzOgogICAgICAgICMgaWYgYW4gYXJnIGlzIHByb3ZpZGVkIHBhc3MgaXQgdG8gdW5pdHRlc3QubWFpbiBhcyAnd2FybmluZ3MnCiAgICAgICAgaWYgbGVuKHN5cy5hcmd2KSA9PSAyOgogICAgICAgICAgICB1bml0dGVzdC5tYWluKGV4aXQ9RmFsc2UsIHdhcm5pbmdzPXN5cy5hcmd2LnBvcCgpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHVuaXR0ZXN0Lm1haW4oZXhpdD1GYWxzZSkKCiAgICAjIHByaW50IGFsbCB0aGUgd2FybmluZyBtZXNzYWdlcyBjb2xsZWN0ZWQKICAgIGZvciB3IGluIHdzOgogICAgICAgIHByaW50KHcubWVzc2FnZSkK',
'/Lib/unittest/test/__init__.py':'aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHVuaXR0ZXN0CgoKaGVyZSA9IG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykKbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXIKCmRlZiBzdWl0ZSgpOgogICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQogICAgZm9yIGZuIGluIG9zLmxpc3RkaXIoaGVyZSk6CiAgICAgICAgaWYgZm4uc3RhcnRzd2l0aCgidGVzdCIpIGFuZCBmbi5lbmRzd2l0aCgiLnB5Iik6CiAgICAgICAgICAgIG1vZG5hbWUgPSAidW5pdHRlc3QudGVzdC4iICsgZm5bOi0zXQogICAgICAgICAgICBfX2ltcG9ydF9fKG1vZG5hbWUpCiAgICAgICAgICAgIG1vZHVsZSA9IHN5cy5tb2R1bGVzW21vZG5hbWVdCiAgICAgICAgICAgIHN1aXRlLmFkZFRlc3QobG9hZGVyLmxvYWRUZXN0c0Zyb21Nb2R1bGUobW9kdWxlKSkKICAgIHN1aXRlLmFkZFRlc3QobG9hZGVyLmxvYWRUZXN0c0Zyb21OYW1lKCd1bml0dGVzdC50ZXN0LnRlc3Rtb2NrJykpCiAgICByZXR1cm4gc3VpdGUKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgdW5pdHRlc3QubWFpbihkZWZhdWx0VGVzdD0ic3VpdGUiKQo=',
'/Lib/unittest/test/testmock/support.py':'aW1wb3J0IHN5cwoKZGVmIGlzX2luc3RhbmNlKG9iaiwga2xhc3MpOgogICAgIiIiVmVyc2lvbiBvZiBpc19pbnN0YW5jZSB0aGF0IGRvZXNuJ3QgYWNjZXNzIF9fY2xhc3NfXyIiIgogICAgcmV0dXJuIGlzc3ViY2xhc3ModHlwZShvYmopLCBrbGFzcykKCgpjbGFzcyBTb21lQ2xhc3Mob2JqZWN0KToKICAgIGNsYXNzX2F0dHJpYnV0ZSA9IE5vbmUKCiAgICBkZWYgd2liYmxlKHNlbGYpOgogICAgICAgIHBhc3MKCgpjbGFzcyBYKG9iamVjdCk6CiAgICBwYXNzCgoKZGVmIGV4YW1pbmVfd2FybmluZ3MoZnVuYyk6CiAgICBkZWYgd3JhcHBlcigpOgogICAgICAgIHdpdGggY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpIGFzIHdzOgogICAgICAgICAgICBmdW5jKHdzKQogICAgcmV0dXJuIHdyYXBwZXIK',
'/Lib/unittest/test/testmock/testcallable.py':'IyBDb3B5cmlnaHQgKEMpIDIwMDctMjAxMiBNaWNoYWVsIEZvb3JkICYgdGhlIG1vY2sgdGVhbQojIEUtbWFpbDogZnV6enltYW4gQVQgdm9pZHNwYWNlIERPVCBvcmcgRE9UIHVrCiMgaHR0cDovL3d3dy52b2lkc3BhY2Uub3JnLnVrL3B5dGhvbi9tb2NrLwoKaW1wb3J0IHVuaXR0ZXN0CmZyb20gdW5pdHRlc3QudGVzdC50ZXN0bW9jay5zdXBwb3J0IGltcG9ydCBpc19pbnN0YW5jZSwgWCwgU29tZUNsYXNzCgpmcm9tIHVuaXR0ZXN0Lm1vY2sgaW1wb3J0ICgKICAgIE1vY2ssIE1hZ2ljTW9jaywgTm9uQ2FsbGFibGVNYWdpY01vY2ssCiAgICBOb25DYWxsYWJsZU1vY2ssIHBhdGNoLCBjcmVhdGVfYXV0b3NwZWMsCiAgICBDYWxsYWJsZU1peGluCikKCgoKY2xhc3MgVGVzdENhbGxhYmxlKHVuaXR0ZXN0LlRlc3RDYXNlKToKCiAgICBkZWYgYXNzZXJ0Tm90Q2FsbGFibGUoc2VsZiwgbW9jayk6CiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2ssIE5vbkNhbGxhYmxlTWFnaWNNb2NrKSkKICAgICAgICBzZWxmLmFzc2VydEZhbHNlKGlzX2luc3RhbmNlKG1vY2ssIENhbGxhYmxlTWl4aW4pKQoKCiAgICBkZWYgdGVzdF9ub25fY2FsbGFibGUoc2VsZik6CiAgICAgICAgZm9yIG1vY2sgaW4gTm9uQ2FsbGFibGVNYWdpY01vY2soKSwgTm9uQ2FsbGFibGVNb2NrKCk6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykKICAgICAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShoYXNhdHRyKG1vY2ssICdfX2NhbGxfXycpKQogICAgICAgICAgICBzZWxmLmFzc2VydEluKG1vY2suX19jbGFzc19fLl9fbmFtZV9fLCByZXByKG1vY2spKQoKCiAgICBkZWYgdGVzdF9oZWlyYXJjaHkoc2VsZik6CiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3MoTWFnaWNNb2NrLCBNb2NrKSkKICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNzdWJjbGFzcyhOb25DYWxsYWJsZU1hZ2ljTW9jaywgTm9uQ2FsbGFibGVNb2NrKSkKCgogICAgZGVmIHRlc3RfYXR0cmlidXRlcyhzZWxmKToKICAgICAgICBvbmUgPSBOb25DYWxsYWJsZU1vY2soKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUob25lLm9uZSksIE1vY2spKQoKICAgICAgICB0d28gPSBOb25DYWxsYWJsZU1hZ2ljTW9jaygpCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3ModHlwZSh0d28udHdvKSwgTWFnaWNNb2NrKSkKCgogICAgZGVmIHRlc3Rfc3ViY2xhc3NlcyhzZWxmKToKICAgICAgICBjbGFzcyBNb2NrU3ViKE1vY2spOgogICAgICAgICAgICBwYXNzCgogICAgICAgIG9uZSA9IE1vY2tTdWIoKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUob25lLm9uZSksIE1vY2tTdWIpKQoKICAgICAgICBjbGFzcyBNYWdpY1N1YihNYWdpY01vY2spOgogICAgICAgICAgICBwYXNzCgogICAgICAgIHR3byA9IE1hZ2ljU3ViKCkKICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNzdWJjbGFzcyh0eXBlKHR3by50d28pLCBNYWdpY1N1YikpCgoKICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWMoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVRydWUpCiAgICAgICAgbW9jayA9IHBhdGNoZXIuc3RhcnQoKQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChwYXRjaGVyLnN0b3ApCgogICAgICAgIGluc3RhbmNlID0gbW9jaygpCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpCgogICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUoaW5zdGFuY2UpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBpbnN0YW5jZSkKCgogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19zZXQoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1UcnVlKQogICAgICAgIG1vY2sgPSBwYXRjaGVyLnN0YXJ0KCkKICAgICAgICBzZWxmLmFkZENsZWFudXAocGF0Y2hlci5zdG9wKQoKICAgICAgICBpbnN0YW5jZSA9IG1vY2soKQogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICBzZWxmLmFzc2VydE5vdENhbGxhYmxlKGluc3RhbmNlKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgaW5zdGFuY2UpCgoKICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWNfaW5zdGFuY2Uoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVgoKSkKICAgICAgICBtb2NrID0gcGF0Y2hlci5zdGFydCgpCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHBhdGNoZXIuc3RvcCkKCiAgICAgICAgc2VsZi5hc3NlcnROb3RDYWxsYWJsZShtb2NrKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykKCgogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19zZXRfaW5zdGFuY2Uoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1YKCkpCiAgICAgICAgbW9jayA9IHBhdGNoZXIuc3RhcnQoKQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChwYXRjaGVyLnN0b3ApCgogICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUobW9jaykKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG1vY2spCgoKICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWNfY2FsbGFibGVfY2xhc3Moc2VsZik6CiAgICAgICAgY2xhc3MgQ2FsbGFibGVYKFgpOgogICAgICAgICAgICBkZWYgX19jYWxsX18oc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCgogICAgICAgIGNsYXNzIFN1YihDYWxsYWJsZVgpOgogICAgICAgICAgICBwYXNzCgogICAgICAgIGNsYXNzIE11bHRpKFNvbWVDbGFzcywgU3ViKToKICAgICAgICAgICAgcGFzcwoKICAgICAgICBmb3IgYXJnIGluICdzcGVjJywgJ3NwZWNfc2V0JzoKICAgICAgICAgICAgZm9yIEtsYXNzIGluIENhbGxhYmxlWCwgU3ViLCBNdWx0aToKICAgICAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLlgnICUgX19uYW1lX18sICoqe2FyZzogS2xhc3N9KSBhcyBtb2NrOgogICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbW9jaygpCiAgICAgICAgICAgICAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpCgogICAgICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc19pbnN0YW5jZShpbnN0YW5jZSwgTWFnaWNNb2NrKSkKICAgICAgICAgICAgICAgICAgICAjIGluaGVyaXRlZCBzcGVjCiAgICAgICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIGluc3RhbmNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb29iYXJiYXonKQoKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbnN0YW5jZSgpCiAgICAgICAgICAgICAgICAgICAgIyBpbnN0YW5jZSBpcyBjYWxsYWJsZSwgcmVzdWx0IGhhcyBubyBzcGVjCiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICAgICAgICAgICAgICByZXN1bHQoMywgMiwgMSkKICAgICAgICAgICAgICAgICAgICByZXN1bHQuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoMywgMiwgMSkKICAgICAgICAgICAgICAgICAgICByZXN1bHQuZm9vKDMsIDIsIDEpCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmZvby5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgzLCAyLCAxKQoKCiAgICBkZWYgdGVzdF9jcmVhdGVfYXV0b3BzZWMoc2VsZik6CiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhYKQogICAgICAgIGluc3RhbmNlID0gbW9jaygpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBpbnN0YW5jZSkKCiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhYKCkpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBtb2NrKQoKCiAgICBkZWYgdGVzdF9jcmVhdGVfYXV0b3NwZWNfaW5zdGFuY2Uoc2VsZik6CiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhTb21lQ2xhc3MsIGluc3RhbmNlPVRydWUpCgogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykKICAgICAgICBtb2NrLndpYmJsZSgpCiAgICAgICAgbW9jay53aWJibGUuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG1vY2sud2liYmxlLCAnc29tZScsICAnYXJncycpCg==',
'/Lib/unittest/test/testmock/testhelpers.py':'',
'/Lib/unittest/test/testmock/testmagicmethods.py':'',
'/Lib/unittest/test/testmock/testmock.py':'aW1wb3J0IGNvcHkKaW1wb3J0IHN5cwoKaW1wb3J0IHVuaXR0ZXN0CmZyb20gdW5pdHRlc3QudGVzdC50ZXN0bW9jay5zdXBwb3J0IGltcG9ydCBpc19pbnN0YW5jZQpmcm9tIHVuaXR0ZXN0IGltcG9ydCBtb2NrCmZyb20gdW5pdHRlc3QubW9jayBpbXBvcnQgKAogICAgY2FsbCwgREVGQVVMVCwgcGF0Y2gsIHNlbnRpbmVsLAogICAgTWFnaWNNb2NrLCBNb2NrLCBOb25DYWxsYWJsZU1vY2ssCiAgICBOb25DYWxsYWJsZU1hZ2ljTW9jaywgX0NhbGxMaXN0LAogICAgY3JlYXRlX2F1dG9zcGVjCikKCgpjbGFzcyBJdGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi50aGluZyA9IGl0ZXIoWyd0aGlzJywgJ2lzJywgJ2FuJywgJ2l0ZXInXSkKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgbmV4dChzZWxmKToKICAgICAgICByZXR1cm4gbmV4dChzZWxmLnRoaW5nKQoKICAgIF9fbmV4dF9fID0gbmV4dAoKCgpjbGFzcyBNb2NrVGVzdCh1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHRlc3RfYWxsKHNlbGYpOgogICAgICAgICMgaWYgX19hbGxfXyBpcyBiYWRseSBkZWZpbmVkIHRoZW4gaW1wb3J0ICogd2lsbCByYWlzZSBhbiBlcnJvcgogICAgICAgICMgV2UgaGF2ZSB0byBleGVjIGl0IGJlY2F1c2UgeW91IGNhbid0IGltcG9ydCAqIGluc2lkZSBhIG1ldGhvZAogICAgICAgICMgaW4gUHl0aG9uIDMKICAgICAgICBleGVjKCJmcm9tIHVuaXR0ZXN0Lm1vY2sgaW1wb3J0ICoiKQoKCiAgICBkZWYgdGVzdF9jb25zdHJ1Y3RvcihzZWxmKToKICAgICAgICBtb2NrID0gTW9jaygpCgogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UobW9jay5jYWxsZWQsICJjYWxsZWQgbm90IGluaXRpYWxpc2VkIGNvcnJlY3RseSIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLmNhbGxfY291bnQsIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAiY2FsbF9jb3VudCBub3QgaW5pdGlhbGlzZWQgY29ycmVjdGx5IikKICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNfaW5zdGFuY2UobW9jay5yZXR1cm5fdmFsdWUsIE1vY2spLAogICAgICAgICAgICAgICAgICAgICAgICAicmV0dXJuX3ZhbHVlIG5vdCBpbml0aWFsaXNlZCBjb3JyZWN0bHkiKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suY2FsbF9hcmdzLCBOb25lLAogICAgICAgICAgICAgICAgICAgICAgICAgImNhbGxfYXJncyBub3QgaW5pdGlhbGlzZWQgY29ycmVjdGx5IikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suY2FsbF9hcmdzX2xpc3QsIFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgImNhbGxfYXJnc19saXN0IG5vdCBpbml0aWFsaXNlZCBjb3JyZWN0bHkiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tZXRob2RfY2FsbHMsIFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgICJtZXRob2RfY2FsbHMgbm90IGluaXRpYWxpc2VkIGNvcnJlY3RseSIpCgogICAgICAgICMgQ2FuJ3QgdXNlIGhhc2F0dHIgZm9yIHRoaXMgdGVzdCBhcyBpdCBhbHdheXMgcmV0dXJucyBUcnVlIG9uIGEgbW9jawogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoJ19pdGVtcycgaW4gbW9jay5fX2RpY3RfXywKICAgICAgICAgICAgICAgICAgICAgICAgICJkZWZhdWx0IG1vY2sgc2hvdWxkIG5vdCBoYXZlICdfaXRlbXMnIGF0dHJpYnV0ZSIpCgogICAgICAgIHNlbGYuYXNzZXJ0SXNOb25lKG1vY2suX21vY2tfcGFyZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICJwYXJlbnQgbm90IGluaXRpYWxpc2VkIGNvcnJlY3RseSIpCiAgICAgICAgc2VsZi5hc3NlcnRJc05vbmUobW9jay5fbW9ja19tZXRob2RzLAogICAgICAgICAgICAgICAgICAgICAgICAgICJtZXRob2RzIG5vdCBpbml0aWFsaXNlZCBjb3JyZWN0bHkiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5fbW9ja19jaGlsZHJlbiwge30sCiAgICAgICAgICAgICAgICAgICAgICAgICAiY2hpbGRyZW4gbm90IGluaXRpYWxpc2VkIGluY29ycmVjdGx5IikKCgogICAgZGVmIHRlc3RfcmV0dXJuX3ZhbHVlX2luX2NvbnN0cnVjdG9yKHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKHJldHVybl92YWx1ZT1Ob25lKQogICAgICAgIHNlbGYuYXNzZXJ0SXNOb25lKG1vY2sucmV0dXJuX3ZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXR1cm4gdmFsdWUgaW4gY29uc3RydWN0b3Igbm90IGhvbm91cmVkIikKCgogICAgZGVmIHRlc3RfcmVwcihzZWxmKToKICAgICAgICBtb2NrID0gTW9jayhuYW1lPSdmb28nKQogICAgICAgIHNlbGYuYXNzZXJ0SW4oJ2ZvbycsIHJlcHIobW9jaykpCiAgICAgICAgc2VsZi5hc3NlcnRJbigiJyVzJyIgJSBpZChtb2NrKSwgcmVwcihtb2NrKSkKCiAgICAgICAgbW9ja3MgPSBbKE1vY2soKSwgJ21vY2snKSwgKE1vY2sobmFtZT0nYmFyJyksICdiYXInKV0KICAgICAgICBmb3IgbW9jaywgbmFtZSBpbiBtb2NrczoKICAgICAgICAgICAgc2VsZi5hc3NlcnRJbignJXMuYmFyJyAlIG5hbWUsIHJlcHIobW9jay5iYXIpKQogICAgICAgICAgICBzZWxmLmFzc2VydEluKCclcy5mb28oKScgJSBuYW1lLCByZXByKG1vY2suZm9vKCkpKQogICAgICAgICAgICBzZWxmLmFzc2VydEluKCclcy5mb28oKS5iaW5nJyAlIG5hbWUsIHJlcHIobW9jay5mb28oKS5iaW5nKSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRJbignJXMoKScgJSBuYW1lLCByZXByKG1vY2soKSkpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SW4oJyVzKCkoKScgJSBuYW1lLCByZXByKG1vY2soKSgpKSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRJbignJXMoKSgpLmZvby5iYXIuYmF6KCkuYmluZycgJSBuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJlcHIobW9jaygpKCkuZm9vLmJhci5iYXooKS5iaW5nKSkKCgogICAgZGVmIHRlc3RfcmVwcl93aXRoX3NwZWMoc2VsZik6CiAgICAgICAgY2xhc3MgWChvYmplY3QpOgogICAgICAgICAgICBwYXNzCgogICAgICAgIG1vY2sgPSBNb2NrKHNwZWM9WCkKICAgICAgICBzZWxmLmFzc2VydEluKCIgc3BlYz0nWCcgIiwgcmVwcihtb2NrKSkKCiAgICAgICAgbW9jayA9IE1vY2soc3BlYz1YKCkpCiAgICAgICAgc2VsZi5hc3NlcnRJbigiIHNwZWM9J1gnICIsIHJlcHIobW9jaykpCgogICAgICAgIG1vY2sgPSBNb2NrKHNwZWNfc2V0PVgpCiAgICAgICAgc2VsZi5hc3NlcnRJbigiIHNwZWNfc2V0PSdYJyAiLCByZXByKG1vY2spKQoKICAgICAgICBtb2NrID0gTW9jayhzcGVjX3NldD1YKCkpCiAgICAgICAgc2VsZi5hc3NlcnRJbigiIHNwZWNfc2V0PSdYJyAiLCByZXByKG1vY2spKQoKICAgICAgICBtb2NrID0gTW9jayhzcGVjPVgsIG5hbWU9J2ZvbycpCiAgICAgICAgc2VsZi5hc3NlcnRJbigiIHNwZWM9J1gnICIsIHJlcHIobW9jaykpCiAgICAgICAgc2VsZi5hc3NlcnRJbigiIG5hbWU9J2ZvbycgIiwgcmVwcihtb2NrKSkKCiAgICAgICAgbW9jayA9IE1vY2sobmFtZT0nZm9vJykKICAgICAgICBzZWxmLmFzc2VydE5vdEluKCJzcGVjIiwgcmVwcihtb2NrKSkKCiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIHNlbGYuYXNzZXJ0Tm90SW4oInNwZWMiLCByZXByKG1vY2spKQoKICAgICAgICBtb2NrID0gTW9jayhzcGVjPVsnZm9vJ10pCiAgICAgICAgc2VsZi5hc3NlcnROb3RJbigic3BlYyIsIHJlcHIobW9jaykpCgoKICAgIGRlZiB0ZXN0X3NpZGVfZWZmZWN0KHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKCkKCiAgICAgICAgZGVmIGVmZmVjdCgqYXJncywgKiprd2FyZ3MpOgogICAgICAgICAgICByYWlzZSBTeXN0ZW1FcnJvcigna2FibG9vaWUnKQoKICAgICAgICBtb2NrLnNpZGVfZWZmZWN0ID0gZWZmZWN0CiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoU3lzdGVtRXJyb3IsIG1vY2ssIDEsIDIsIGZpc2g9MykKICAgICAgICBtb2NrLmFzc2VydF9jYWxsZWRfd2l0aCgxLCAyLCBmaXNoPTMpCgogICAgICAgIHJlc3VsdHMgPSBbMSwgMiwgM10KICAgICAgICBkZWYgZWZmZWN0KCk6CiAgICAgICAgICAgIHJldHVybiByZXN1bHRzLnBvcCgpCiAgICAgICAgbW9jay5zaWRlX2VmZmVjdCA9IGVmZmVjdAoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFttb2NrKCksIG1vY2soKSwgbW9jaygpXSwgWzMsIDIsIDFdLAogICAgICAgICAgICAgICAgICAgICAgICAgICJzaWRlIGVmZmVjdCBub3QgdXNlZCBjb3JyZWN0bHkiKQoKICAgICAgICBtb2NrID0gTW9jayhzaWRlX2VmZmVjdD1zZW50aW5lbC5TaWRlRWZmZWN0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5zaWRlX2VmZmVjdCwgc2VudGluZWwuU2lkZUVmZmVjdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAic2lkZSBlZmZlY3QgaW4gY29uc3RydWN0b3Igbm90IHVzZWQiKQoKICAgICAgICBkZWYgc2lkZV9lZmZlY3QoKToKICAgICAgICAgICAgcmV0dXJuIERFRkFVTFQKICAgICAgICBtb2NrID0gTW9jayhzaWRlX2VmZmVjdD1zaWRlX2VmZmVjdCwgcmV0dXJuX3ZhbHVlPXNlbnRpbmVsLlJFVFVSTikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2soKSwgc2VudGluZWwuUkVUVVJOKQoKCiAgICBAdW5pdHRlc3Quc2tpcFVubGVzcygnamF2YScgaW4gc3lzLnBsYXRmb3JtLAogICAgICAgICAgICAgICAgICAgICAgICAgICdUaGlzIHRlc3Qgb25seSBhcHBsaWVzIHRvIEp5dGhvbicpCiAgICBkZWYgdGVzdF9qYXZhX2V4Y2VwdGlvbl9zaWRlX2VmZmVjdChzZWxmKToKICAgICAgICBpbXBvcnQgamF2YQogICAgICAgIG1vY2sgPSBNb2NrKHNpZGVfZWZmZWN0PWphdmEubGFuZy5SdW50aW1lRXhjZXB0aW9uKCJCb29tISIpKQoKICAgICAgICAjIGNhbid0IHVzZSBhc3NlcnRSYWlzZXMgd2l0aCBqYXZhIGV4Y2VwdGlvbnMKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1vY2soMSwgMiwgZmlzaD0zKQogICAgICAgIGV4Y2VwdCBqYXZhLmxhbmcuUnVudGltZUV4Y2VwdGlvbjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZmFpbCgnamF2YSBleGNlcHRpb24gbm90IHJhaXNlZCcpCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX3dpdGgoMSwyLCBmaXNoPTMpCgoKICAgIGRlZiB0ZXN0X3Jlc2V0X21vY2soc2VsZik6CiAgICAgICAgcGFyZW50ID0gTW9jaygpCiAgICAgICAgc3BlYyA9IFsic29tZXRoaW5nIl0KICAgICAgICBtb2NrID0gTW9jayhuYW1lPSJjaGlsZCIsIHBhcmVudD1wYXJlbnQsIHNwZWM9c3BlYykKICAgICAgICBtb2NrKHNlbnRpbmVsLlNvbWV0aGluZywgc29tZXRoaW5nPXNlbnRpbmVsLlNvbWV0aGluZ0Vsc2UpCiAgICAgICAgc29tZXRoaW5nID0gbW9jay5zb21ldGhpbmcKICAgICAgICBtb2NrLnNvbWV0aGluZygpCiAgICAgICAgbW9jay5zaWRlX2VmZmVjdCA9IHNlbnRpbmVsLlNpZGVFZmZlY3QKICAgICAgICByZXR1cm5fdmFsdWUgPSBtb2NrLnJldHVybl92YWx1ZQogICAgICAgIHJldHVybl92YWx1ZSgpCgogICAgICAgIG1vY2sucmVzZXRfbW9jaygpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5fbW9ja19uYW1lLCAiY2hpbGQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUgaW5jb3JyZWN0bHkgcmVzZXQiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5fbW9ja19wYXJlbnQsIHBhcmVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICJwYXJlbnQgaW5jb3JyZWN0bHkgcmVzZXQiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5fbW9ja19tZXRob2RzLCBzcGVjLAogICAgICAgICAgICAgICAgICAgICAgICAgIm1ldGhvZHMgaW5jb3JyZWN0bHkgcmVzZXQiKQoKICAgICAgICBzZWxmLmFzc2VydEZhbHNlKG1vY2suY2FsbGVkLCAiY2FsbGVkIG5vdCByZXNldCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLmNhbGxfY291bnQsIDAsICJjYWxsX2NvdW50IG5vdCByZXNldCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLmNhbGxfYXJncywgTm9uZSwgImNhbGxfYXJncyBub3QgcmVzZXQiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5jYWxsX2FyZ3NfbGlzdCwgW10sICJjYWxsX2FyZ3NfbGlzdCBub3QgcmVzZXQiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tZXRob2RfY2FsbHMsIFtdLAogICAgICAgICAgICAgICAgICAgICAgICAibWV0aG9kX2NhbGxzIG5vdCBpbml0aWFsaXNlZCBjb3JyZWN0bHk6ICVyICE9ICVyIiAlCiAgICAgICAgICAgICAgICAgICAgICAgIChtb2NrLm1ldGhvZF9jYWxscywgW10pKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzLCBbXSkKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLnNpZGVfZWZmZWN0LCBzZW50aW5lbC5TaWRlRWZmZWN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICJzaWRlX2VmZmVjdCBpbmNvcnJlY3RseSByZXNldCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLnJldHVybl92YWx1ZSwgcmV0dXJuX3ZhbHVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZXR1cm5fdmFsdWUgaW5jb3JyZWN0bHkgcmVzZXQiKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UocmV0dXJuX3ZhbHVlLmNhbGxlZCwgInJldHVybiB2YWx1ZSBtb2NrIG5vdCByZXNldCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLl9tb2NrX2NoaWxkcmVuLCB7J3NvbWV0aGluZyc6IHNvbWV0aGluZ30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgImNoaWxkcmVuIHJlc2V0IGluY29ycmVjdGx5IikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suc29tZXRoaW5nLCBzb21ldGhpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImNoaWxkcmVuIGluY29ycmVjdGx5IGNsZWFyZWQiKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UobW9jay5zb21ldGhpbmcuY2FsbGVkLCAiY2hpbGQgbm90IHJlc2V0IikKCgogICAgZGVmIHRlc3RfcmVzZXRfbW9ja19yZWN1cnNpb24oc2VsZik6CiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2sucmV0dXJuX3ZhbHVlID0gbW9jawoKICAgICAgICAjIHVzZWQgdG8gY2F1c2UgcmVjdXJzaW9uCiAgICAgICAgbW9jay5yZXNldF9tb2NrKCkKCgogICAgZGVmIHRlc3RfY2FsbChzZWxmKToKICAgICAgICBtb2NrID0gTW9jaygpCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2sucmV0dXJuX3ZhbHVlLCBNb2NrKSwKICAgICAgICAgICAgICAgICAgICAgICAgIkRlZmF1bHQgcmV0dXJuX3ZhbHVlIHNob3VsZCBiZSBhIE1vY2siKQoKICAgICAgICByZXN1bHQgPSBtb2NrKCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2soKSwgcmVzdWx0LAogICAgICAgICAgICAgICAgICAgICAgICAgImRpZmZlcmVudCByZXN1bHQgZnJvbSBjb25zZWN1dGl2ZSBjYWxscyIpCiAgICAgICAgbW9jay5yZXNldF9tb2NrKCkKCiAgICAgICAgcmV0X3ZhbCA9IG1vY2soc2VudGluZWwuQXJnKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShtb2NrLmNhbGxlZCwgImNhbGxlZCBub3Qgc2V0IikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suY2FsbF9jb3VudCwgMSwgImNhbGxfY291bnQgaW5jb3JlZWN0IikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suY2FsbF9hcmdzLCAoKHNlbnRpbmVsLkFyZywpLCB7fSksCiAgICAgICAgICAgICAgICAgICAgICAgICAiY2FsbF9hcmdzIG5vdCBzZXQiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5jYWxsX2FyZ3NfbGlzdCwgWygoc2VudGluZWwuQXJnLCksIHt9KV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAiY2FsbF9hcmdzX2xpc3Qgbm90IGluaXRpYWxpc2VkIGNvcnJlY3RseSIpCgogICAgICAgIG1vY2sucmV0dXJuX3ZhbHVlID0gc2VudGluZWwuUmV0dXJuVmFsdWUKICAgICAgICByZXRfdmFsID0gbW9jayhzZW50aW5lbC5BcmcsIGtleT1zZW50aW5lbC5LZXlBcmcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXRfdmFsLCBzZW50aW5lbC5SZXR1cm5WYWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICJpbmNvcnJlY3QgcmV0dXJuIHZhbHVlIikKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLmNhbGxfY291bnQsIDIsICJjYWxsX2NvdW50IGluY29ycmVjdCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLmNhbGxfYXJncywKICAgICAgICAgICAgICAgICAgICAgICAgICgoc2VudGluZWwuQXJnLCksIHsna2V5Jzogc2VudGluZWwuS2V5QXJnfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAiY2FsbF9hcmdzIG5vdCBzZXQiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5jYWxsX2FyZ3NfbGlzdCwgWwogICAgICAgICAgICAoKHNlbnRpbmVsLkFyZywpLCB7fSksCiAgICAgICAgICAgICgoc2VudGluZWwuQXJnLCksIHsna2V5Jzogc2VudGluZWwuS2V5QXJnfSkKICAgICAgICBdLAogICAgICAgICAgICAiY2FsbF9hcmdzX2xpc3Qgbm90IHNldCIpCgoKICAgIGRlZiB0ZXN0X2NhbGxfYXJnc19jb21wYXJpc29uKHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKCkKICAgICAgICBtb2NrKCkKICAgICAgICBtb2NrKHNlbnRpbmVsLkFyZykKICAgICAgICBtb2NrKGt3PXNlbnRpbmVsLkt3YXJnKQogICAgICAgIG1vY2soc2VudGluZWwuQXJnLCBrdz1zZW50aW5lbC5Ld2FyZykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suY2FsbF9hcmdzX2xpc3QsIFsKICAgICAgICAgICAgKCksCiAgICAgICAgICAgICgoc2VudGluZWwuQXJnLCksKSwKICAgICAgICAgICAgKHsia3ciOiBzZW50aW5lbC5Ld2FyZ30sKSwKICAgICAgICAgICAgKChzZW50aW5lbC5BcmcsKSwgeyJrdyI6IHNlbnRpbmVsLkt3YXJnfSkKICAgICAgICBdKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5jYWxsX2FyZ3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAoKHNlbnRpbmVsLkFyZywpLCB7Imt3Ijogc2VudGluZWwuS3dhcmd9KSkKCgogICAgZGVmIHRlc3RfYXNzZXJ0X2NhbGxlZF93aXRoKHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKCkKICAgICAgICBtb2NrKCkKCiAgICAgICAgIyBXaWxsIHJhaXNlIGFuIGV4Y2VwdGlvbiBpZiBpdCBmYWlscwogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF93aXRoKCkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBc3NlcnRpb25FcnJvciwgbW9jay5hc3NlcnRfY2FsbGVkX3dpdGgsIDEpCgogICAgICAgIG1vY2sucmVzZXRfbW9jaygpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXNzZXJ0aW9uRXJyb3IsIG1vY2suYXNzZXJ0X2NhbGxlZF93aXRoKQoKICAgICAgICBtb2NrKDEsIDIsIDMsIGE9J2Zpc2gnLCBiPSdub3RoaW5nJykKICAgICAgICBtb2NrLmFzc2VydF9jYWxsZWRfd2l0aCgxLCAyLCAzLCBhPSdmaXNoJywgYj0nbm90aGluZycpCgoKICAgIGRlZiB0ZXN0X2Fzc2VydF9jYWxsZWRfb25jZV93aXRoKHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKCkKICAgICAgICBtb2NrKCkKCiAgICAgICAgIyBXaWxsIHJhaXNlIGFuIGV4Y2VwdGlvbiBpZiBpdCBmYWlscwogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICBtb2NrKCkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBc3NlcnRpb25FcnJvciwgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCkKCiAgICAgICAgbW9jay5yZXNldF9tb2NrKCkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBc3NlcnRpb25FcnJvciwgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCkKCiAgICAgICAgbW9jaygnZm9vJywgJ2JhcicsIGJhej0yKQogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoJ2ZvbycsICdiYXInLCBiYXo9MikKCiAgICAgICAgbW9jay5yZXNldF9tb2NrKCkKICAgICAgICBtb2NrKCdmb28nLCAnYmFyJywgYmF6PTIpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoCiAgICAgICAgICAgIEFzc2VydGlvbkVycm9yLAogICAgICAgICAgICBsYW1iZGE6IG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoJ2JvYicsICdiYXInLCBiYXo9MikKICAgICAgICApCgoKICAgIGRlZiB0ZXN0X2F0dHJpYnV0ZV9hY2Nlc3NfcmV0dXJuc19tb2NrcyhzZWxmKToKICAgICAgICBtb2NrID0gTW9jaygpCiAgICAgICAgc29tZXRoaW5nID0gbW9jay5zb21ldGhpbmcKICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNfaW5zdGFuY2Uoc29tZXRoaW5nLCBNb2NrKSwgImF0dHJpYnV0ZSBpc24ndCBhIG1vY2siKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5zb21ldGhpbmcsIHNvbWV0aGluZywKICAgICAgICAgICAgICAgICAgICAgICAgICJkaWZmZXJlbnQgYXR0cmlidXRlcyByZXR1cm5lZCBmb3Igc2FtZSBuYW1lIikKCiAgICAgICAgIyBVc2FnZSBleGFtcGxlCiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2suc29tZXRoaW5nLnJldHVybl92YWx1ZSA9IDMKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLnNvbWV0aGluZygpLCAzLCAibWV0aG9kIHJldHVybmVkIHdyb25nIHZhbHVlIikKICAgICAgICBzZWxmLmFzc2VydFRydWUobW9jay5zb21ldGhpbmcuY2FsbGVkLAogICAgICAgICAgICAgICAgICAgICAgICAibWV0aG9kIGRpZG4ndCByZWNvcmQgYmVpbmcgY2FsbGVkIikKCgogICAgZGVmIHRlc3RfYXR0cmlidXRlc19oYXZlX25hbWVfYW5kX3BhcmVudF9zZXQoc2VsZik6CiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIHNvbWV0aGluZyA9IG1vY2suc29tZXRoaW5nCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLl9tb2NrX25hbWUsICJzb21ldGhpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgImF0dHJpYnV0ZSBuYW1lIG5vdCBzZXQgY29ycmVjdGx5IikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZy5fbW9ja19wYXJlbnQsIG1vY2ssCiAgICAgICAgICAgICAgICAgICAgICAgICAiYXR0cmlidXRlIHBhcmVudCBub3Qgc2V0IGNvcnJlY3RseSIpCgoKICAgIGRlZiB0ZXN0X21ldGhvZF9jYWxsc19yZWNvcmRlZChzZWxmKToKICAgICAgICBtb2NrID0gTW9jaygpCiAgICAgICAgbW9jay5zb21ldGhpbmcoMywgZmlzaD1Ob25lKQogICAgICAgIG1vY2suc29tZXRoaW5nX2Vsc2Uuc29tZXRoaW5nKDYsIGNha2U9c2VudGluZWwuQ2FrZSkKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLnNvbWV0aGluZ19lbHNlLm1ldGhvZF9jYWxscywKICAgICAgICAgICAgICAgICAgICAgICAgICBbKCJzb21ldGhpbmciLCAoNiwpLCB7J2Nha2UnOiBzZW50aW5lbC5DYWtlfSldLAogICAgICAgICAgICAgICAgICAgICAgICAgICJtZXRob2QgY2FsbHMgbm90IHJlY29yZGVkIGNvcnJlY3RseSIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLm1ldGhvZF9jYWxscywgWwogICAgICAgICAgICAoInNvbWV0aGluZyIsICgzLCksIHsnZmlzaCc6IE5vbmV9KSwKICAgICAgICAgICAgKCJzb21ldGhpbmdfZWxzZS5zb21ldGhpbmciLCAoNiwpLCB7J2Nha2UnOiBzZW50aW5lbC5DYWtlfSkKICAgICAgICBdLAogICAgICAgICAgICAibWV0aG9kIGNhbGxzIG5vdCByZWNvcmRlZCBjb3JyZWN0bHkiKQoKCiAgICBkZWYgdGVzdF9tZXRob2RfY2FsbHNfY29tcGFyZV9lYXNpbHkoc2VsZik6CiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2suc29tZXRoaW5nKCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subWV0aG9kX2NhbGxzLCBbKCdzb21ldGhpbmcnLCldKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tZXRob2RfY2FsbHMsIFsoJ3NvbWV0aGluZycsICgpLCB7fSldKQoKICAgICAgICBtb2NrID0gTW9jaygpCiAgICAgICAgbW9jay5zb21ldGhpbmcoJ2RpZmZlcmVudCcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLm1ldGhvZF9jYWxscywgWygnc29tZXRoaW5nJywgKCdkaWZmZXJlbnQnLCkpXSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subWV0aG9kX2NhbGxzLAogICAgICAgICAgICAgICAgICAgICAgICAgWygnc29tZXRoaW5nJywgKCdkaWZmZXJlbnQnLCksIHt9KV0pCgogICAgICAgIG1vY2sgPSBNb2NrKCkKICAgICAgICBtb2NrLnNvbWV0aGluZyh4PTEpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLm1ldGhvZF9jYWxscywgWygnc29tZXRoaW5nJywgeyd4JzogMX0pXSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subWV0aG9kX2NhbGxzLCBbKCdzb21ldGhpbmcnLCAoKSwgeyd4JzogMX0pXSkKCiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2suc29tZXRoaW5nKCdkaWZmZXJlbnQnLCBzb21lPSdtb3JlJykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subWV0aG9kX2NhbGxzLCBbCiAgICAgICAgICAgICgnc29tZXRoaW5nJywgKCdkaWZmZXJlbnQnLCksIHsnc29tZSc6ICdtb3JlJ30pCiAgICAgICAgXSkKCgogICAgZGVmIHRlc3Rfb25seV9hbGxvd2VkX21ldGhvZHNfZXhpc3Qoc2VsZik6CiAgICAgICAgZm9yIHNwZWMgaW4gWydzb21ldGhpbmcnXSwgKCdzb21ldGhpbmcnLCk6CiAgICAgICAgICAgIGZvciBhcmcgaW4gJ3NwZWMnLCAnc3BlY19zZXQnOgogICAgICAgICAgICAgICAgbW9jayA9IE1vY2soKip7YXJnOiBzcGVjfSkKCiAgICAgICAgICAgICAgICAjIHRoaXMgc2hvdWxkIGJlIGFsbG93ZWQKICAgICAgICAgICAgICAgIG1vY2suc29tZXRoaW5nCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlc1JlZ2V4KAogICAgICAgICAgICAgICAgICAgIEF0dHJpYnV0ZUVycm9yLAogICAgICAgICAgICAgICAgICAgICJNb2NrIG9iamVjdCBoYXMgbm8gYXR0cmlidXRlICdzb21ldGhpbmdfZWxzZSciLAogICAgICAgICAgICAgICAgICAgIGdldGF0dHIsIG1vY2ssICdzb21ldGhpbmdfZWxzZScKICAgICAgICAgICAgICAgICkKCgogICAgZGVmIHRlc3RfZnJvbV9zcGVjKHNlbGYpOgogICAgICAgIGNsYXNzIFNvbWV0aGluZyhvYmplY3QpOgogICAgICAgICAgICB4ID0gMwogICAgICAgICAgICBfX3NvbWV0aGluZ19fID0gTm9uZQogICAgICAgICAgICBkZWYgeShzZWxmKToKICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgZGVmIHRlc3RfYXR0cmlidXRlcyhtb2NrKToKICAgICAgICAgICAgIyBzaG91bGQgd29yawogICAgICAgICAgICBtb2NrLngKICAgICAgICAgICAgbW9jay55CiAgICAgICAgICAgIG1vY2suX19zb21ldGhpbmdfXwogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlc1JlZ2V4KAogICAgICAgICAgICAgICAgQXR0cmlidXRlRXJyb3IsCiAgICAgICAgICAgICAgICAiTW9jayBvYmplY3QgaGFzIG5vIGF0dHJpYnV0ZSAneiciLAogICAgICAgICAgICAgICAgZ2V0YXR0ciwgbW9jaywgJ3onCiAgICAgICAgICAgICkKICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXNSZWdleCgKICAgICAgICAgICAgICAgIEF0dHJpYnV0ZUVycm9yLAogICAgICAgICAgICAgICAgIk1vY2sgb2JqZWN0IGhhcyBubyBhdHRyaWJ1dGUgJ19fZm9vYmFyX18nIiwKICAgICAgICAgICAgICAgIGdldGF0dHIsIG1vY2ssICdfX2Zvb2Jhcl9fJwogICAgICAgICAgICApCgogICAgICAgIHRlc3RfYXR0cmlidXRlcyhNb2NrKHNwZWM9U29tZXRoaW5nKSkKICAgICAgICB0ZXN0X2F0dHJpYnV0ZXMoTW9jayhzcGVjPVNvbWV0aGluZygpKSkKCgogICAgZGVmIHRlc3Rfd3JhcHNfY2FsbHMoc2VsZik6CiAgICAgICAgcmVhbCA9IE1vY2soKQoKICAgICAgICBtb2NrID0gTW9jayh3cmFwcz1yZWFsKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jaygpLCByZWFsKCkpCgogICAgICAgIHJlYWwucmVzZXRfbW9jaygpCgogICAgICAgIG1vY2soMSwgMiwgZmlzaD0zKQogICAgICAgIHJlYWwuYXNzZXJ0X2NhbGxlZF93aXRoKDEsIDIsIGZpc2g9MykKCgogICAgZGVmIHRlc3Rfd3JhcHNfY2FsbF93aXRoX25vbmRlZmF1bHRfcmV0dXJuX3ZhbHVlKHNlbGYpOgogICAgICAgIHJlYWwgPSBNb2NrKCkKCiAgICAgICAgbW9jayA9IE1vY2sod3JhcHM9cmVhbCkKICAgICAgICBtb2NrLnJldHVybl92YWx1ZSA9IDMKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrKCksIDMpCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShyZWFsLmNhbGxlZCkKCgogICAgZGVmIHRlc3Rfd3JhcHNfYXR0cmlidXRlcyhzZWxmKToKICAgICAgICBjbGFzcyBSZWFsKG9iamVjdCk6CiAgICAgICAgICAgIGF0dHJpYnV0ZSA9IE1vY2soKQoKICAgICAgICByZWFsID0gUmVhbCgpCgogICAgICAgIG1vY2sgPSBNb2NrKHdyYXBzPXJlYWwpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLmF0dHJpYnV0ZSgpLCByZWFsLmF0dHJpYnV0ZSgpKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBsYW1iZGE6IG1vY2suZmlzaCkKCiAgICAgICAgc2VsZi5hc3NlcnROb3RFcXVhbChtb2NrLmF0dHJpYnV0ZSwgcmVhbC5hdHRyaWJ1dGUpCiAgICAgICAgcmVzdWx0ID0gbW9jay5hdHRyaWJ1dGUuZnJvZygxLCAyLCBmaXNoPTMpCiAgICAgICAgUmVhbC5hdHRyaWJ1dGUuZnJvZy5hc3NlcnRfY2FsbGVkX3dpdGgoMSwgMiwgZmlzaD0zKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LCBSZWFsLmF0dHJpYnV0ZS5mcm9nKCkpCgoKICAgIGRlZiB0ZXN0X2V4Y2VwdGlvbmFsX3NpZGVfZWZmZWN0KHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKHNpZGVfZWZmZWN0PUF0dHJpYnV0ZUVycm9yKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBtb2NrKQoKICAgICAgICBtb2NrID0gTW9jayhzaWRlX2VmZmVjdD1BdHRyaWJ1dGVFcnJvcignZm9vJykpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIG1vY2spCgoKICAgIGRlZiB0ZXN0X2Jhc2VleGNlcHRpb25hbF9zaWRlX2VmZmVjdChzZWxmKToKICAgICAgICBtb2NrID0gTW9jayhzaWRlX2VmZmVjdD1LZXlib2FyZEludGVycnVwdCkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhLZXlib2FyZEludGVycnVwdCwgbW9jaykKCiAgICAgICAgbW9jayA9IE1vY2soc2lkZV9lZmZlY3Q9S2V5Ym9hcmRJbnRlcnJ1cHQoJ2ZvbycpKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEtleWJvYXJkSW50ZXJydXB0LCBtb2NrKQoKCiAgICBkZWYgdGVzdF9hc3NlcnRfY2FsbGVkX3dpdGhfbWVzc2FnZShzZWxmKToKICAgICAgICBtb2NrID0gTW9jaygpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXNSZWdleChBc3NlcnRpb25FcnJvciwgJ05vdCBjYWxsZWQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF93aXRoKQoKCiAgICBkZWYgdGVzdF9fbmFtZV9fKHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKCkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgbGFtYmRhOiBtb2NrLl9fbmFtZV9fKQoKICAgICAgICBtb2NrLl9fbmFtZV9fID0gJ2ZvbycKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suX19uYW1lX18sICdmb28nKQoKCiAgICBkZWYgdGVzdF9zcGVjX2xpc3Rfc3ViY2xhc3Moc2VsZik6CiAgICAgICAgY2xhc3MgU3ViKGxpc3QpOgogICAgICAgICAgICBwYXNzCiAgICAgICAgbW9jayA9IE1vY2soc3BlYz1TdWIoWydmb28nXSkpCgogICAgICAgIG1vY2suYXBwZW5kKDMpCiAgICAgICAgbW9jay5hcHBlbmQuYXNzZXJ0X2NhbGxlZF93aXRoKDMpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIG1vY2ssICdmb28nKQoKCiAgICBkZWYgdGVzdF9zcGVjX2NsYXNzKHNlbGYpOgogICAgICAgIGNsYXNzIFgob2JqZWN0KToKICAgICAgICAgICAgcGFzcwoKICAgICAgICBtb2NrID0gTW9jayhzcGVjPVgpCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzaW5zdGFuY2UobW9jaywgWCkpCgogICAgICAgIG1vY2sgPSBNb2NrKHNwZWM9WCgpKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc2luc3RhbmNlKG1vY2ssIFgpKQoKICAgICAgICBzZWxmLmFzc2VydElzKG1vY2suX19jbGFzc19fLCBYKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoTW9jaygpLl9fY2xhc3NfXy5fX25hbWVfXywgJ01vY2snKQoKICAgICAgICBtb2NrID0gTW9jayhzcGVjX3NldD1YKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc2luc3RhbmNlKG1vY2ssIFgpKQoKICAgICAgICBtb2NrID0gTW9jayhzcGVjX3NldD1YKCkpCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzaW5zdGFuY2UobW9jaywgWCkpCgoKICAgIGRlZiB0ZXN0X3NldHRpbmdfYXR0cmlidXRlX3dpdGhfc3BlY19zZXQoc2VsZik6CiAgICAgICAgY2xhc3MgWChvYmplY3QpOgogICAgICAgICAgICB5ID0gMwoKICAgICAgICBtb2NrID0gTW9jayhzcGVjPVgpCiAgICAgICAgbW9jay54ID0gJ2ZvbycKCiAgICAgICAgbW9jayA9IE1vY2soc3BlY19zZXQ9WCkKICAgICAgICBkZWYgc2V0X2F0dHIoKToKICAgICAgICAgICAgbW9jay54ID0gJ2ZvbycKCiAgICAgICAgbW9jay55ID0gJ2ZvbycKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgc2V0X2F0dHIpCgoKICAgIGRlZiB0ZXN0X2NvcHkoc2VsZik6CiAgICAgICAgY3VycmVudCA9IHN5cy5nZXRyZWN1cnNpb25saW1pdCgpCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHN5cy5zZXRyZWN1cnNpb25saW1pdCwgY3VycmVudCkKCiAgICAgICAgIyBjYW4ndCB1c2Ugc3lzLm1heGludCBhcyB0aGlzIGRvZXNuJ3QgZXhpc3QgaW4gUHl0aG9uIDMKICAgICAgICBzeXMuc2V0cmVjdXJzaW9ubGltaXQoaW50KDEwZTgpKQogICAgICAgICMgdGhpcyBzZWdmYXVsdHMgd2l0aG91dCB0aGUgZml4IGluIHBsYWNlCiAgICAgICAgY29weS5jb3B5KE1vY2soKSkKCgogICAgZGVmIHRlc3Rfc3ViY2xhc3Nfd2l0aF9wcm9wZXJ0aWVzKHNlbGYpOgogICAgICAgIGNsYXNzIFN1YkNsYXNzKE1vY2spOgogICAgICAgICAgICBkZWYgX2dldChzZWxmKToKICAgICAgICAgICAgICAgIHJldHVybiAzCiAgICAgICAgICAgIGRlZiBfc2V0KHNlbGYsIHZhbHVlKToKICAgICAgICAgICAgICAgIHJhaXNlIE5hbWVFcnJvcignc3RyYW5nZSBlcnJvcicpCiAgICAgICAgICAgIHNvbWVfYXR0cmlidXRlID0gcHJvcGVydHkoX2dldCwgX3NldCkKCiAgICAgICAgcyA9IFN1YkNsYXNzKHNwZWNfc2V0PVN1YkNsYXNzKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocy5zb21lX2F0dHJpYnV0ZSwgMykKCiAgICAgICAgZGVmIHRlc3QoKToKICAgICAgICAgICAgcy5zb21lX2F0dHJpYnV0ZSA9IDMKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhOYW1lRXJyb3IsIHRlc3QpCgogICAgICAgIGRlZiB0ZXN0KCk6CiAgICAgICAgICAgIHMuZm9vID0gJ2JhcicKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgdGVzdCkKCgogICAgZGVmIHRlc3Rfc2V0dGluZ19jYWxsKHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKCkKICAgICAgICBkZWYgX19jYWxsX18oc2VsZiwgYSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9tb2NrX2NhbGwoYSkKCiAgICAgICAgdHlwZShtb2NrKS5fX2NhbGxfXyA9IF9fY2FsbF9fCiAgICAgICAgbW9jaygnb25lJykKICAgICAgICBtb2NrLmFzc2VydF9jYWxsZWRfd2l0aCgnb25lJykKCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBtb2NrLCAnb25lJywgJ3R3bycpCgoKICAgIGRlZiB0ZXN0X2RpcihzZWxmKToKICAgICAgICBtb2NrID0gTW9jaygpCiAgICAgICAgYXR0cnMgPSBzZXQoZGlyKG1vY2spKQogICAgICAgIHR5cGVfYXR0cnMgPSBzZXQoW20gZm9yIG0gaW4gZGlyKE1vY2spIGlmIG5vdCBtLnN0YXJ0c3dpdGgoJ18nKV0pCgogICAgICAgICMgYWxsIHB1YmxpYyBhdHRyaWJ1dGVzIGZyb20gdGhlIHR5cGUgYXJlIGluY2x1ZGVkCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzZXQoKSwgdHlwZV9hdHRycyAtIGF0dHJzKQoKICAgICAgICAjIGNyZWF0ZXMgdGhlc2UgYXR0cmlidXRlcwogICAgICAgIG1vY2suYSwgbW9jay5iCiAgICAgICAgc2VsZi5hc3NlcnRJbignYScsIGRpcihtb2NrKSkKICAgICAgICBzZWxmLmFzc2VydEluKCdiJywgZGlyKG1vY2spKQoKICAgICAgICAjIGluc3RhbmNlIGF0dHJpYnV0ZXMKICAgICAgICBtb2NrLmMgPSBtb2NrLmQgPSBOb25lCiAgICAgICAgc2VsZi5hc3NlcnRJbignYycsIGRpcihtb2NrKSkKICAgICAgICBzZWxmLmFzc2VydEluKCdkJywgZGlyKG1vY2spKQoKICAgICAgICAjIG1hZ2ljIG1ldGhvZHMKICAgICAgICBtb2NrLl9faXRlcl9fID0gbGFtYmRhIHM6IGl0ZXIoW10pCiAgICAgICAgc2VsZi5hc3NlcnRJbignX19pdGVyX18nLCBkaXIobW9jaykpCgoKICAgIGRlZiB0ZXN0X2Rpcl9mcm9tX3NwZWMoc2VsZik6CiAgICAgICAgbW9jayA9IE1vY2soc3BlYz11bml0dGVzdC5UZXN0Q2FzZSkKICAgICAgICB0ZXN0Y2FzZV9hdHRycyA9IHNldChkaXIodW5pdHRlc3QuVGVzdENhc2UpKQogICAgICAgIGF0dHJzID0gc2V0KGRpcihtb2NrKSkKCiAgICAgICAgIyBhbGwgYXR0cmlidXRlcyBmcm9tIHRoZSBzcGVjIGFyZSBpbmNsdWRlZAogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc2V0KCksIHRlc3RjYXNlX2F0dHJzIC0gYXR0cnMpCgogICAgICAgICMgc2hhZG93IGEgc3lzIGF0dHJpYnV0ZQogICAgICAgIG1vY2sudmVyc2lvbiA9IDMKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGRpcihtb2NrKS5jb3VudCgndmVyc2lvbicpLCAxKQoKCiAgICBkZWYgdGVzdF9maWx0ZXJfZGlyKHNlbGYpOgogICAgICAgIHBhdGNoZXIgPSBwYXRjaC5vYmplY3QobW9jaywgJ0ZJTFRFUl9ESVInLCBGYWxzZSkKICAgICAgICBwYXRjaGVyLnN0YXJ0KCkKICAgICAgICB0cnk6CiAgICAgICAgICAgIGF0dHJzID0gc2V0KGRpcihNb2NrKCkpKQogICAgICAgICAgICB0eXBlX2F0dHJzID0gc2V0KGRpcihNb2NrKSkKCiAgICAgICAgICAgICMgQUxMIGF0dHJpYnV0ZXMgZnJvbSB0aGUgdHlwZSBhcmUgaW5jbHVkZWQKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzZXQoKSwgdHlwZV9hdHRycyAtIGF0dHJzKQogICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgIHBhdGNoZXIuc3RvcCgpCgoKICAgIGRlZiB0ZXN0X2NvbmZpZ3VyZV9tb2NrKHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKGZvbz0nYmFyJykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suZm9vLCAnYmFyJykKCiAgICAgICAgbW9jayA9IE1hZ2ljTW9jayhmb289J2JhcicpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLmZvbywgJ2JhcicpCgogICAgICAgIGt3YXJncyA9IHsnc2lkZV9lZmZlY3QnOiBLZXlFcnJvciwgJ2Zvby5iYXIucmV0dXJuX3ZhbHVlJzogMzMsCiAgICAgICAgICAgICAgICAgICdmb28nOiBNYWdpY01vY2soKX0KICAgICAgICBtb2NrID0gTW9jaygqKmt3YXJncykKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhLZXlFcnJvciwgbW9jaykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suZm9vLmJhcigpLCAzMykKICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UobW9jay5mb28sIE1hZ2ljTW9jaykKCiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2suY29uZmlndXJlX21vY2soKiprd2FyZ3MpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoS2V5RXJyb3IsIG1vY2spCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLmZvby5iYXIoKSwgMzMpCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKG1vY2suZm9vLCBNYWdpY01vY2spCgoKICAgIGRlZiBhc3NlcnRSYWlzZXNXaXRoTXNnKHNlbGYsIGV4Y2VwdGlvbiwgbWVzc2FnZSwgZnVuYywgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAjIG5lZWRlZCBiZWNhdXNlIGFzc2VydFJhaXNlc1JlZ2V4IGRvZXNuJ3Qgd29yayBlYXNpbHkgd2l0aCBuZXdsaW5lcwogICAgICAgIHRyeToKICAgICAgICAgICAgZnVuYygqYXJncywgKiprd2FyZ3MpCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBpbnN0YW5jZSA9IHN5cy5leGNfaW5mbygpWzFdCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShpbnN0YW5jZSwgZXhjZXB0aW9uKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZmFpbCgnRXhjZXB0aW9uICVyIG5vdCByYWlzZWQnICUgKGV4Y2VwdGlvbiwpKQoKICAgICAgICBtc2cgPSBzdHIoaW5zdGFuY2UpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtc2csIG1lc3NhZ2UpCgoKICAgIGRlZiB0ZXN0X2Fzc2VydF9jYWxsZWRfd2l0aF9mYWlsdXJlX21lc3NhZ2Uoc2VsZik6CiAgICAgICAgbW9jayA9IE5vbkNhbGxhYmxlTW9jaygpCgogICAgICAgIGV4cGVjdGVkID0gIm1vY2soMSwgJzInLCAzLCBiYXI9J2ZvbycpIgogICAgICAgIG1lc3NhZ2UgPSAnRXhwZWN0ZWQgY2FsbDogJXNcbk5vdCBjYWxsZWQnCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXNXaXRoTXNnKAogICAgICAgICAgICBBc3NlcnRpb25FcnJvciwgbWVzc2FnZSAlIChleHBlY3RlZCwpLAogICAgICAgICAgICBtb2NrLmFzc2VydF9jYWxsZWRfd2l0aCwgMSwgJzInLCAzLCBiYXI9J2ZvbycKICAgICAgICApCgogICAgICAgIG1vY2suZm9vKDEsICcyJywgMywgZm9vPSdmb28nKQoKCiAgICAgICAgYXNzZXJ0ZXJzID0gWwogICAgICAgICAgICBtb2NrLmZvby5hc3NlcnRfY2FsbGVkX3dpdGgsIG1vY2suZm9vLmFzc2VydF9jYWxsZWRfb25jZV93aXRoCiAgICAgICAgXQogICAgICAgIGZvciBtZXRoIGluIGFzc2VydGVyczoKICAgICAgICAgICAgYWN0dWFsID0gImZvbygxLCAnMicsIDMsIGZvbz0nZm9vJykiCiAgICAgICAgICAgIGV4cGVjdGVkID0gImZvbygxLCAnMicsIDMsIGJhcj0nZm9vJykiCiAgICAgICAgICAgIG1lc3NhZ2UgPSAnRXhwZWN0ZWQgY2FsbDogJXNcbkFjdHVhbCBjYWxsOiAlcycKICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXNXaXRoTXNnKAogICAgICAgICAgICAgICAgQXNzZXJ0aW9uRXJyb3IsIG1lc3NhZ2UgJSAoZXhwZWN0ZWQsIGFjdHVhbCksCiAgICAgICAgICAgICAgICBtZXRoLCAxLCAnMicsIDMsIGJhcj0nZm9vJwogICAgICAgICAgICApCgogICAgICAgICMganVzdCBrd2FyZ3MKICAgICAgICBmb3IgbWV0aCBpbiBhc3NlcnRlcnM6CiAgICAgICAgICAgIGFjdHVhbCA9ICJmb28oMSwgJzInLCAzLCBmb289J2ZvbycpIgogICAgICAgICAgICBleHBlY3RlZCA9ICJmb28oYmFyPSdmb28nKSIKICAgICAgICAgICAgbWVzc2FnZSA9ICdFeHBlY3RlZCBjYWxsOiAlc1xuQWN0dWFsIGNhbGw6ICVzJwogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlc1dpdGhNc2coCiAgICAgICAgICAgICAgICBBc3NlcnRpb25FcnJvciwgbWVzc2FnZSAlIChleHBlY3RlZCwgYWN0dWFsKSwKICAgICAgICAgICAgICAgIG1ldGgsIGJhcj0nZm9vJwogICAgICAgICAgICApCgogICAgICAgICMganVzdCBhcmdzCiAgICAgICAgZm9yIG1ldGggaW4gYXNzZXJ0ZXJzOgogICAgICAgICAgICBhY3R1YWwgPSAiZm9vKDEsICcyJywgMywgZm9vPSdmb28nKSIKICAgICAgICAgICAgZXhwZWN0ZWQgPSAiZm9vKDEsIDIsIDMpIgogICAgICAgICAgICBtZXNzYWdlID0gJ0V4cGVjdGVkIGNhbGw6ICVzXG5BY3R1YWwgY2FsbDogJXMnCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzV2l0aE1zZygKICAgICAgICAgICAgICAgIEFzc2VydGlvbkVycm9yLCBtZXNzYWdlICUgKGV4cGVjdGVkLCBhY3R1YWwpLAogICAgICAgICAgICAgICAgbWV0aCwgMSwgMiwgMwogICAgICAgICAgICApCgogICAgICAgICMgZW1wdHkKICAgICAgICBmb3IgbWV0aCBpbiBhc3NlcnRlcnM6CiAgICAgICAgICAgIGFjdHVhbCA9ICJmb28oMSwgJzInLCAzLCBmb289J2ZvbycpIgogICAgICAgICAgICBleHBlY3RlZCA9ICJmb28oKSIKICAgICAgICAgICAgbWVzc2FnZSA9ICdFeHBlY3RlZCBjYWxsOiAlc1xuQWN0dWFsIGNhbGw6ICVzJwogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlc1dpdGhNc2coCiAgICAgICAgICAgICAgICBBc3NlcnRpb25FcnJvciwgbWVzc2FnZSAlIChleHBlY3RlZCwgYWN0dWFsKSwgbWV0aAogICAgICAgICAgICApCgoKICAgIGRlZiB0ZXN0X21vY2tfY2FsbHMoc2VsZik6CiAgICAgICAgbW9jayA9IE1hZ2ljTW9jaygpCgogICAgICAgICMgbmVlZCB0byBkbyB0aGlzIGJlY2F1c2UgTWFnaWNNb2NrLm1vY2tfY2FsbHMgdXNlZCB0byBqdXN0IHJldHVybgogICAgICAgICMgYSBNYWdpY01vY2sgd2hpY2ggYWxzbyByZXR1cm5lZCBhIE1hZ2ljTW9jayB3aGVuIF9fZXFfXyB3YXMgY2FsbGVkCiAgICAgICAgc2VsZi5hc3NlcnRJcyhtb2NrLm1vY2tfY2FsbHMgPT0gW10sIFRydWUpCgogICAgICAgIG1vY2sgPSBNYWdpY01vY2soKQogICAgICAgIG1vY2soKQogICAgICAgIGV4cGVjdGVkID0gWygnJywgKCksIHt9KV0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subW9ja19jYWxscywgZXhwZWN0ZWQpCgogICAgICAgIG1vY2suZm9vKCkKICAgICAgICBleHBlY3RlZC5hcHBlbmQoY2FsbC5mb28oKSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subW9ja19jYWxscywgZXhwZWN0ZWQpCiAgICAgICAgIyBpbnRlcm1lZGlhdGUgbW9ja19jYWxscyB3b3JrIHRvbwogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5mb28ubW9ja19jYWxscywgWygnJywgKCksIHt9KV0pCgogICAgICAgIG1vY2sgPSBNYWdpY01vY2soKQogICAgICAgIG1vY2soKS5mb28oMSwgMiwgMywgYT00LCBiPTUpCiAgICAgICAgZXhwZWN0ZWQgPSBbCiAgICAgICAgICAgICgnJywgKCksIHt9KSwgKCcoKS5mb28nLCAoMSwgMiwgMyksIGRpY3QoYT00LCBiPTUpKQogICAgICAgIF0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subW9ja19jYWxscywgZXhwZWN0ZWQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLnJldHVybl92YWx1ZS5mb28ubW9ja19jYWxscywKICAgICAgICAgICAgICAgICAgICAgICAgIFsoJycsICgxLCAyLCAzKSwgZGljdChhPTQsIGI9NSkpXSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2sucmV0dXJuX3ZhbHVlLm1vY2tfY2FsbHMsCiAgICAgICAgICAgICAgICAgICAgICAgICBbKCdmb28nLCAoMSwgMiwgMyksIGRpY3QoYT00LCBiPTUpKV0pCgogICAgICAgIG1vY2sgPSBNYWdpY01vY2soKQogICAgICAgIG1vY2soKS5mb28uYmFyKCkuYmF6KCkKICAgICAgICBleHBlY3RlZCA9IFsKICAgICAgICAgICAgKCcnLCAoKSwge30pLCAoJygpLmZvby5iYXInLCAoKSwge30pLAogICAgICAgICAgICAoJygpLmZvby5iYXIoKS5iYXonLCAoKSwge30pCiAgICAgICAgXQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzLCBleHBlY3RlZCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2soKS5tb2NrX2NhbGxzLAogICAgICAgICAgICAgICAgICAgICAgICAgY2FsbC5mb28uYmFyKCkuYmF6KCkuY2FsbF9saXN0KCkpCgogICAgICAgIGZvciBrd2FyZ3MgaW4gZGljdCgpLCBkaWN0KG5hbWU9J2JhcicpOgogICAgICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCoqa3dhcmdzKQogICAgICAgICAgICBpbnQobW9jay5mb28pCiAgICAgICAgICAgIGV4cGVjdGVkID0gWygnZm9vLl9faW50X18nLCAoKSwge30pXQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subW9ja19jYWxscywgZXhwZWN0ZWQpCgogICAgICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCoqa3dhcmdzKQogICAgICAgICAgICBtb2NrLmEoKSgpCiAgICAgICAgICAgIGV4cGVjdGVkID0gWygnYScsICgpLCB7fSksICgnYSgpJywgKCksIHt9KV0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLm1vY2tfY2FsbHMsIGV4cGVjdGVkKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2suYSgpLm1vY2tfY2FsbHMsIFtjYWxsKCldKQoKICAgICAgICAgICAgbW9jayA9IE1hZ2ljTW9jaygqKmt3YXJncykKICAgICAgICAgICAgbW9jaygxKSgyKSgzKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subW9ja19jYWxscywgY2FsbCgxKSgyKSgzKS5jYWxsX2xpc3QoKSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrKCkubW9ja19jYWxscywgY2FsbCgyKSgzKS5jYWxsX2xpc3QoKSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrKCkoKS5tb2NrX2NhbGxzLCBjYWxsKDMpLmNhbGxfbGlzdCgpKQoKICAgICAgICAgICAgbW9jayA9IE1hZ2ljTW9jaygqKmt3YXJncykKICAgICAgICAgICAgbW9jaygxKSgyKSgzKS5hLmIuYyg0KQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subW9ja19jYWxscywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsKDEpKDIpKDMpLmEuYi5jKDQpLmNhbGxfbGlzdCgpKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2soKS5tb2NrX2NhbGxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGwoMikoMykuYS5iLmMoNCkuY2FsbF9saXN0KCkpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jaygpKCkubW9ja19jYWxscywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsKDMpLmEuYi5jKDQpLmNhbGxfbGlzdCgpKQoKICAgICAgICAgICAgbW9jayA9IE1hZ2ljTW9jaygqKmt3YXJncykKICAgICAgICAgICAgaW50KG1vY2soKS5mb28uYmFyKCkuYmF6KCkpCiAgICAgICAgICAgIGxhc3RfY2FsbCA9ICgnKCkuZm9vLmJhcigpLmJheigpLl9faW50X18nLCAoKSwge30pCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzWy0xXSwgbGFzdF9jYWxsKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2soKS5tb2NrX2NhbGxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGwuZm9vLmJhcigpLmJheigpLl9faW50X18oKS5jYWxsX2xpc3QoKSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrKCkuZm9vLmJhcigpLm1vY2tfY2FsbHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbC5iYXooKS5fX2ludF9fKCkuY2FsbF9saXN0KCkpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jaygpLmZvby5iYXIoKS5iYXoubW9ja19jYWxscywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsKCkuX19pbnRfXygpLmNhbGxfbGlzdCgpKQoKCiAgICBkZWYgdGVzdF9zdWJjbGFzc2luZyhzZWxmKToKICAgICAgICBjbGFzcyBTdWJjbGFzcyhNb2NrKToKICAgICAgICAgICAgcGFzcwoKICAgICAgICBtb2NrID0gU3ViY2xhc3MoKQogICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShtb2NrLmZvbywgU3ViY2xhc3MpCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKG1vY2soKSwgU3ViY2xhc3MpCgogICAgICAgIGNsYXNzIFN1YmNsYXNzKE1vY2spOgogICAgICAgICAgICBkZWYgX2dldF9jaGlsZF9tb2NrKHNlbGYsICoqa3dhcmdzKToKICAgICAgICAgICAgICAgIHJldHVybiBNb2NrKCoqa3dhcmdzKQoKICAgICAgICBtb2NrID0gU3ViY2xhc3MoKQogICAgICAgIHNlbGYuYXNzZXJ0Tm90SXNJbnN0YW5jZShtb2NrLmZvbywgU3ViY2xhc3MpCiAgICAgICAgc2VsZi5hc3NlcnROb3RJc0luc3RhbmNlKG1vY2soKSwgU3ViY2xhc3MpCgoKICAgIGRlZiB0ZXN0X2FyZ19saXN0cyhzZWxmKToKICAgICAgICBtb2NrcyA9IFsKICAgICAgICAgICAgTW9jaygpLAogICAgICAgICAgICBNYWdpY01vY2soKSwKICAgICAgICAgICAgTm9uQ2FsbGFibGVNb2NrKCksCiAgICAgICAgICAgIE5vbkNhbGxhYmxlTWFnaWNNb2NrKCkKICAgICAgICBdCgogICAgICAgIGRlZiBhc3NlcnRfYXR0cnMobW9jayk6CiAgICAgICAgICAgIG5hbWVzID0gJ2NhbGxfYXJnc19saXN0JywgJ21ldGhvZF9jYWxscycsICdtb2NrX2NhbGxzJwogICAgICAgICAgICBmb3IgbmFtZSBpbiBuYW1lczoKICAgICAgICAgICAgICAgIGF0dHIgPSBnZXRhdHRyKG1vY2ssIG5hbWUpCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UoYXR0ciwgX0NhbGxMaXN0KQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKGF0dHIsIGxpc3QpCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGF0dHIsIFtdKQoKICAgICAgICBmb3IgbW9jayBpbiBtb2NrczoKICAgICAgICAgICAgYXNzZXJ0X2F0dHJzKG1vY2spCgogICAgICAgICAgICBpZiBjYWxsYWJsZShtb2NrKToKICAgICAgICAgICAgICAgIG1vY2soKQogICAgICAgICAgICAgICAgbW9jaygxLCAyKQogICAgICAgICAgICAgICAgbW9jayhhPTMpCgogICAgICAgICAgICAgICAgbW9jay5yZXNldF9tb2NrKCkKICAgICAgICAgICAgICAgIGFzc2VydF9hdHRycyhtb2NrKQoKICAgICAgICAgICAgbW9jay5mb28oKQogICAgICAgICAgICBtb2NrLmZvby5iYXIoMSwgYT0zKQogICAgICAgICAgICBtb2NrLmZvbygxKS5iYXIoKS5iYXooMykKCiAgICAgICAgICAgIG1vY2sucmVzZXRfbW9jaygpCiAgICAgICAgICAgIGFzc2VydF9hdHRycyhtb2NrKQoKCiAgICBkZWYgdGVzdF9jYWxsX2FyZ3NfdHdvX3R1cGxlKHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKCkKICAgICAgICBtb2NrKDEsIGE9MykKICAgICAgICBtb2NrKDIsIGI9NCkKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsZW4obW9jay5jYWxsX2FyZ3MpLCAyKQogICAgICAgIGFyZ3MsIGt3YXJncyA9IG1vY2suY2FsbF9hcmdzCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChhcmdzLCAoMiwpKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoa3dhcmdzLCBkaWN0KGI9NCkpCgogICAgICAgIGV4cGVjdGVkX2xpc3QgPSBbKCgxLCksIGRpY3QoYT0zKSksICgoMiwpLCBkaWN0KGI9NCkpXQogICAgICAgIGZvciBleHBlY3RlZCwgY2FsbF9hcmdzIGluIHppcChleHBlY3RlZF9saXN0LCBtb2NrLmNhbGxfYXJnc19saXN0KToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsZW4oY2FsbF9hcmdzKSwgMikKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChleHBlY3RlZFswXSwgY2FsbF9hcmdzWzBdKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV4cGVjdGVkWzFdLCBjYWxsX2FyZ3NbMV0pCgoKICAgIGRlZiB0ZXN0X3NpZGVfZWZmZWN0X2l0ZXJhdG9yKHNlbGYpOgogICAgICAgIG1vY2sgPSBNb2NrKHNpZGVfZWZmZWN0PWl0ZXIoWzEsIDIsIDNdKSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFttb2NrKCksIG1vY2soKSwgbW9jaygpXSwgWzEsIDIsIDNdKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFN0b3BJdGVyYXRpb24sIG1vY2spCgogICAgICAgIG1vY2sgPSBNYWdpY01vY2soc2lkZV9lZmZlY3Q9WydhJywgJ2InLCAnYyddKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoW21vY2soKSwgbW9jaygpLCBtb2NrKCldLCBbJ2EnLCAnYicsICdjJ10pCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoU3RvcEl0ZXJhdGlvbiwgbW9jaykKCiAgICAgICAgbW9jayA9IE1vY2soc2lkZV9lZmZlY3Q9J2doaScpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChbbW9jaygpLCBtb2NrKCksIG1vY2soKV0sIFsnZycsICdoJywgJ2knXSkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhTdG9wSXRlcmF0aW9uLCBtb2NrKQoKICAgICAgICBjbGFzcyBGb28ob2JqZWN0KToKICAgICAgICAgICAgcGFzcwogICAgICAgIG1vY2sgPSBNYWdpY01vY2soc2lkZV9lZmZlY3Q9Rm9vKQogICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShtb2NrKCksIEZvbykKCiAgICAgICAgbW9jayA9IE1vY2soc2lkZV9lZmZlY3Q9SXRlcigpKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoW21vY2soKSwgbW9jaygpLCBtb2NrKCksIG1vY2soKV0sCiAgICAgICAgICAgICAgICAgICAgICAgICBbJ3RoaXMnLCAnaXMnLCAnYW4nLCAnaXRlciddKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFN0b3BJdGVyYXRpb24sIG1vY2spCgoKICAgIGRlZiB0ZXN0X3NpZGVfZWZmZWN0X2l0ZXJhdG9yX2V4Y2VwdGlvbnMoc2VsZik6CiAgICAgICAgZm9yIEtsYXNzIGluIE1vY2ssIE1hZ2ljTW9jazoKICAgICAgICAgICAgaXRlcmFibGUgPSAoVmFsdWVFcnJvciwgMywgS2V5RXJyb3IsIDYpCiAgICAgICAgICAgIG0gPSBLbGFzcyhzaWRlX2VmZmVjdD1pdGVyYWJsZSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVmFsdWVFcnJvciwgbSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtKCksIDMpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEtleUVycm9yLCBtKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG0oKSwgNikKCgogICAgZGVmIHRlc3Rfc2lkZV9lZmZlY3Rfc2V0dGluZ19pdGVyYXRvcihzZWxmKToKICAgICAgICBtb2NrID0gTW9jaygpCiAgICAgICAgbW9jay5zaWRlX2VmZmVjdCA9IGl0ZXIoWzEsIDIsIDNdKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoW21vY2soKSwgbW9jaygpLCBtb2NrKCldLCBbMSwgMiwgM10pCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoU3RvcEl0ZXJhdGlvbiwgbW9jaykKICAgICAgICBzaWRlX2VmZmVjdCA9IG1vY2suc2lkZV9lZmZlY3QKICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2Uoc2lkZV9lZmZlY3QsIHR5cGUoaXRlcihbXSkpKQoKICAgICAgICBtb2NrLnNpZGVfZWZmZWN0ID0gWydhJywgJ2InLCAnYyddCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChbbW9jaygpLCBtb2NrKCksIG1vY2soKV0sIFsnYScsICdiJywgJ2MnXSkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhTdG9wSXRlcmF0aW9uLCBtb2NrKQogICAgICAgIHNpZGVfZWZmZWN0ID0gbW9jay5zaWRlX2VmZmVjdAogICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShzaWRlX2VmZmVjdCwgdHlwZShpdGVyKFtdKSkpCgogICAgICAgIHRoaXNfaXRlciA9IEl0ZXIoKQogICAgICAgIG1vY2suc2lkZV9lZmZlY3QgPSB0aGlzX2l0ZXIKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKFttb2NrKCksIG1vY2soKSwgbW9jaygpLCBtb2NrKCldLAogICAgICAgICAgICAgICAgICAgICAgICAgWyd0aGlzJywgJ2lzJywgJ2FuJywgJ2l0ZXInXSkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhTdG9wSXRlcmF0aW9uLCBtb2NrKQogICAgICAgIHNlbGYuYXNzZXJ0SXMobW9jay5zaWRlX2VmZmVjdCwgdGhpc19pdGVyKQoKCiAgICBkZWYgdGVzdF9hc3NlcnRfaGFzX2NhbGxzX2FueV9vcmRlcihzZWxmKToKICAgICAgICBtb2NrID0gTW9jaygpCiAgICAgICAgbW9jaygxLCAyKQogICAgICAgIG1vY2soYT0zKQogICAgICAgIG1vY2soMywgNCkKICAgICAgICBtb2NrKGI9NikKICAgICAgICBtb2NrKGI9NikKCiAgICAgICAga2FsbHMgPSBbCiAgICAgICAgICAgIGNhbGwoMSwgMiksICh7J2EnOiAzfSwpLAogICAgICAgICAgICAoKDMsIDQpLCksICgoKSwgeydhJzogM30pLAogICAgICAgICAgICAoJycsICgxLCAyKSksICgnJywgeydhJzogM30pLAogICAgICAgICAgICAoJycsICgxLCAyKSwge30pLCAoJycsICgpLCB7J2EnOiAzfSkKICAgICAgICBdCiAgICAgICAgZm9yIGthbGwgaW4ga2FsbHM6CiAgICAgICAgICAgIG1vY2suYXNzZXJ0X2hhc19jYWxscyhba2FsbF0sIGFueV9vcmRlcj1UcnVlKQoKICAgICAgICBmb3Iga2FsbCBpbiBjYWxsKDEsICcyJyksIGNhbGwoYj0zKSwgY2FsbCgpLCAzLCBOb25lLCAnZm9vJzoKICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoCiAgICAgICAgICAgICAgICBBc3NlcnRpb25FcnJvciwgbW9jay5hc3NlcnRfaGFzX2NhbGxzLAogICAgICAgICAgICAgICAgW2thbGxdLCBhbnlfb3JkZXI9VHJ1ZQogICAgICAgICAgICApCgogICAgICAgIGthbGxfbGlzdHMgPSBbCiAgICAgICAgICAgIFtjYWxsKDEsIDIpLCBjYWxsKGI9NildLAogICAgICAgICAgICBbY2FsbCgzLCA0KSwgY2FsbCgxLCAyKV0sCiAgICAgICAgICAgIFtjYWxsKGI9NiksIGNhbGwoYj02KV0sCiAgICAgICAgXQoKICAgICAgICBmb3Iga2FsbF9saXN0IGluIGthbGxfbGlzdHM6CiAgICAgICAgICAgIG1vY2suYXNzZXJ0X2hhc19jYWxscyhrYWxsX2xpc3QsIGFueV9vcmRlcj1UcnVlKQoKICAgICAgICBrYWxsX2xpc3RzID0gWwogICAgICAgICAgICBbY2FsbChiPTYpLCBjYWxsKGI9NiksIGNhbGwoYj02KV0sCiAgICAgICAgICAgIFtjYWxsKDEsIDIpLCBjYWxsKDEsIDIpXSwKICAgICAgICAgICAgW2NhbGwoMywgNCksIGNhbGwoMSwgMiksIGNhbGwoNSwgNyldLAogICAgICAgICAgICBbY2FsbChiPTYpLCBjYWxsKDMsIDQpLCBjYWxsKGI9NiksIGNhbGwoMSwgMiksIGNhbGwoYj02KV0sCiAgICAgICAgXQogICAgICAgIGZvciBrYWxsX2xpc3QgaW4ga2FsbF9saXN0czoKICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoCiAgICAgICAgICAgICAgICBBc3NlcnRpb25FcnJvciwgbW9jay5hc3NlcnRfaGFzX2NhbGxzLAogICAgICAgICAgICAgICAga2FsbF9saXN0LCBhbnlfb3JkZXI9VHJ1ZQogICAgICAgICAgICApCgogICAgZGVmIHRlc3RfYXNzZXJ0X2hhc19jYWxscyhzZWxmKToKICAgICAgICBrYWxsczEgPSBbCiAgICAgICAgICAgICAgICBjYWxsKDEsIDIpLCAoeydhJzogM30sKSwKICAgICAgICAgICAgICAgICgoMywgNCksKSwgY2FsbChiPTYpLAogICAgICAgICAgICAgICAgKCcnLCAoMSwpLCB7J2InOiA2fSksCiAgICAgICAgXQogICAgICAgIGthbGxzMiA9IFtjYWxsLmZvbygpLCBjYWxsLmJhcigxKV0KICAgICAgICBrYWxsczIuZXh0ZW5kKGNhbGwuc3BhbSgpLmJheihhPTMpLmNhbGxfbGlzdCgpKQogICAgICAgIGthbGxzMi5leHRlbmQoY2FsbC5iYW0oc2V0KCksIGZvbz17fSkuZmlzaChbMV0pLmNhbGxfbGlzdCgpKQoKICAgICAgICBtb2NrcyA9IFtdCiAgICAgICAgZm9yIG1vY2sgaW4gTW9jaygpLCBNYWdpY01vY2soKToKICAgICAgICAgICAgbW9jaygxLCAyKQogICAgICAgICAgICBtb2NrKGE9MykKICAgICAgICAgICAgbW9jaygzLCA0KQogICAgICAgICAgICBtb2NrKGI9NikKICAgICAgICAgICAgbW9jaygxLCBiPTYpCiAgICAgICAgICAgIG1vY2tzLmFwcGVuZCgobW9jaywga2FsbHMxKSkKCiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2suZm9vKCkKICAgICAgICBtb2NrLmJhcigxKQogICAgICAgIG1vY2suc3BhbSgpLmJheihhPTMpCiAgICAgICAgbW9jay5iYW0oc2V0KCksIGZvbz17fSkuZmlzaChbMV0pCiAgICAgICAgbW9ja3MuYXBwZW5kKChtb2NrLCBrYWxsczIpKQoKICAgICAgICBmb3IgbW9jaywga2FsbHMgaW4gbW9ja3M6CiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihrYWxscykpOgogICAgICAgICAgICAgICAgZm9yIHN0ZXAgaW4gMSwgMiwgMzoKICAgICAgICAgICAgICAgICAgICB0aGVzZSA9IGthbGxzW2k6aStzdGVwXQogICAgICAgICAgICAgICAgICAgIG1vY2suYXNzZXJ0X2hhc19jYWxscyh0aGVzZSkKCiAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHRoZXNlKSA+IDE6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXNzZXJ0aW9uRXJyb3IsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2NrLmFzc2VydF9oYXNfY2FsbHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0KHJldmVyc2VkKHRoZXNlKSkKICAgICAgICAgICAgICAgICAgICAgICAgKQoKCiAgICBkZWYgdGVzdF9hc3NlcnRfYW55X2NhbGwoc2VsZik6CiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2soMSwgMikKICAgICAgICBtb2NrKGE9MykKICAgICAgICBtb2NrKDEsIGI9NikKCiAgICAgICAgbW9jay5hc3NlcnRfYW55X2NhbGwoMSwgMikKICAgICAgICBtb2NrLmFzc2VydF9hbnlfY2FsbChhPTMpCiAgICAgICAgbW9jay5hc3NlcnRfYW55X2NhbGwoMSwgYj02KQoKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcygKICAgICAgICAgICAgQXNzZXJ0aW9uRXJyb3IsCiAgICAgICAgICAgIG1vY2suYXNzZXJ0X2FueV9jYWxsCiAgICAgICAgKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKAogICAgICAgICAgICBBc3NlcnRpb25FcnJvciwKICAgICAgICAgICAgbW9jay5hc3NlcnRfYW55X2NhbGwsCiAgICAgICAgICAgIDEsIDMKICAgICAgICApCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoCiAgICAgICAgICAgIEFzc2VydGlvbkVycm9yLAogICAgICAgICAgICBtb2NrLmFzc2VydF9hbnlfY2FsbCwKICAgICAgICAgICAgYT00CiAgICAgICAgKQoKCiAgICBkZWYgdGVzdF9tb2NrX2NhbGxzX2NyZWF0ZV9hdXRvc3BlYyhzZWxmKToKICAgICAgICBkZWYgZihhLCBiKToKICAgICAgICAgICAgcGFzcwogICAgICAgIG9iaiA9IEl0ZXIoKQogICAgICAgIG9iai5mID0gZgoKICAgICAgICBmdW5jcyA9IFsKICAgICAgICAgICAgY3JlYXRlX2F1dG9zcGVjKGYpLAogICAgICAgICAgICBjcmVhdGVfYXV0b3NwZWMob2JqKS5mCiAgICAgICAgXQogICAgICAgIGZvciBmdW5jIGluIGZ1bmNzOgogICAgICAgICAgICBmdW5jKDEsIDIpCiAgICAgICAgICAgIGZ1bmMoMywgNCkKCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoCiAgICAgICAgICAgICAgICBmdW5jLm1vY2tfY2FsbHMsIFtjYWxsKDEsIDIpLCBjYWxsKDMsIDQpXQogICAgICAgICAgICApCgoKICAgIGRlZiB0ZXN0X21vY2tfYWRkX3NwZWMoc2VsZik6CiAgICAgICAgY2xhc3MgX09uZShvYmplY3QpOgogICAgICAgICAgICBvbmUgPSAxCiAgICAgICAgY2xhc3MgX1R3byhvYmplY3QpOgogICAgICAgICAgICB0d28gPSAyCiAgICAgICAgY2xhc3MgQW55dGhpbmcob2JqZWN0KToKICAgICAgICAgICAgb25lID0gdHdvID0gdGhyZWUgPSAnZm91cicKCiAgICAgICAga2xhc3NlcyA9IFsKICAgICAgICAgICAgTW9jaywgTWFnaWNNb2NrLCBOb25DYWxsYWJsZU1vY2ssIE5vbkNhbGxhYmxlTWFnaWNNb2NrCiAgICAgICAgXQogICAgICAgIGZvciBLbGFzcyBpbiBsaXN0KGtsYXNzZXMpOgogICAgICAgICAgICBrbGFzc2VzLmFwcGVuZChsYW1iZGEgSz1LbGFzczogSyhzcGVjPUFueXRoaW5nKSkKICAgICAgICAgICAga2xhc3Nlcy5hcHBlbmQobGFtYmRhIEs9S2xhc3M6IEsoc3BlY19zZXQ9QW55dGhpbmcpKQoKICAgICAgICBmb3IgS2xhc3MgaW4ga2xhc3NlczoKICAgICAgICAgICAgZm9yIGt3YXJncyBpbiBkaWN0KCksIGRpY3Qoc3BlY19zZXQ9VHJ1ZSk6CiAgICAgICAgICAgICAgICBtb2NrID0gS2xhc3MoKQogICAgICAgICAgICAgICAgI25vIGVycm9yCiAgICAgICAgICAgICAgICBtb2NrLm9uZSwgbW9jay50d28sIG1vY2sudGhyZWUKCiAgICAgICAgICAgICAgICBmb3IgT25lLCBUd28gaW4gWyhfT25lLCBfVHdvKSwgKFsnb25lJ10sIFsndHdvJ10pXToKICAgICAgICAgICAgICAgICAgICBmb3Iga3dhcmdzIGluIGRpY3QoKSwgZGljdChzcGVjX3NldD1UcnVlKToKICAgICAgICAgICAgICAgICAgICAgICAgbW9jay5tb2NrX2FkZF9zcGVjKE9uZSwgKiprd2FyZ3MpCgogICAgICAgICAgICAgICAgICAgICAgICBtb2NrLm9uZQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF0dHJpYnV0ZUVycm9yLCBnZXRhdHRyLCBtb2NrLCAndHdvJwogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIG1vY2ssICd0aHJlZScKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAnc3BlY19zZXQnIGluIGt3YXJnczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF0dHJpYnV0ZUVycm9yLCBzZXRhdHRyLCBtb2NrLCAndGhyZWUnLCBOb25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCgogICAgICAgICAgICAgICAgICAgICAgICBtb2NrLm1vY2tfYWRkX3NwZWMoVHdvLCAqKmt3YXJncykKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdHRyaWJ1dGVFcnJvciwgZ2V0YXR0ciwgbW9jaywgJ29uZScKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBtb2NrLnR3bwogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF0dHJpYnV0ZUVycm9yLCBnZXRhdHRyLCBtb2NrLCAndGhyZWUnCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3NwZWNfc2V0JyBpbiBrd2FyZ3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdHRyaWJ1dGVFcnJvciwgc2V0YXR0ciwgbW9jaywgJ3RocmVlJywgTm9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAjIG5vdGUgdGhhdCBjcmVhdGluZyBhIG1vY2ssIHNldHRpbmcgYW4gaW5zdGFuY2UgYXR0cmlidXRlLCBhbmQKICAgICAgICAgICAgIyAqdGhlbiogc2V0dGluZyBhIHNwZWMgZG9lc24ndCB3b3JrLiBOb3QgdGhlIGludGVuZGVkIHVzZSBjYXNlCgoKICAgIGRlZiB0ZXN0X21vY2tfYWRkX3NwZWNfbWFnaWNfbWV0aG9kcyhzZWxmKToKICAgICAgICBmb3IgS2xhc3MgaW4gTWFnaWNNb2NrLCBOb25DYWxsYWJsZU1hZ2ljTW9jazoKICAgICAgICAgICAgbW9jayA9IEtsYXNzKCkKICAgICAgICAgICAgaW50KG1vY2spCgogICAgICAgICAgICBtb2NrLm1vY2tfYWRkX3NwZWMob2JqZWN0KQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIGludCwgbW9jaykKCiAgICAgICAgICAgIG1vY2sgPSBLbGFzcygpCiAgICAgICAgICAgIG1vY2tbJ2ZvbyddCiAgICAgICAgICAgIG1vY2suX19pbnRfXy5yZXR1cm5fdmFsdWUgPTQKCiAgICAgICAgICAgIG1vY2subW9ja19hZGRfc3BlYyhpbnQpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KG1vY2spLCA0KQogICAgICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIGxhbWJkYTogbW9ja1snZm9vJ10pCgoKICAgIGRlZiB0ZXN0X2FkZGluZ19jaGlsZF9tb2NrKHNlbGYpOgogICAgICAgIGZvciBLbGFzcyBpbiBOb25DYWxsYWJsZU1vY2ssIE1vY2ssIE1hZ2ljTW9jaywgTm9uQ2FsbGFibGVNYWdpY01vY2s6CiAgICAgICAgICAgIG1vY2sgPSBLbGFzcygpCgogICAgICAgICAgICBtb2NrLmZvbyA9IE1vY2soKQogICAgICAgICAgICBtb2NrLmZvbygpCgogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subWV0aG9kX2NhbGxzLCBbY2FsbC5mb28oKV0pCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzLCBbY2FsbC5mb28oKV0pCgogICAgICAgICAgICBtb2NrID0gS2xhc3MoKQogICAgICAgICAgICBtb2NrLmJhciA9IE1vY2sobmFtZT0nbmFtZScpCiAgICAgICAgICAgIG1vY2suYmFyKCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtb2NrLm1ldGhvZF9jYWxscywgW10pCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzLCBbXSkKCiAgICAgICAgICAgICMgbW9jayB3aXRoIGFuIGV4aXN0aW5nIF9uZXdfcGFyZW50IGJ1dCBubyBuYW1lCiAgICAgICAgICAgIG1vY2sgPSBLbGFzcygpCiAgICAgICAgICAgIG1vY2suYmF6ID0gTWFnaWNNb2NrKCkoKQogICAgICAgICAgICBtb2NrLmJheigpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tZXRob2RfY2FsbHMsIFtdKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subW9ja19jYWxscywgW10pCgoKICAgIGRlZiB0ZXN0X2FkZGluZ19yZXR1cm5fdmFsdWVfbW9jayhzZWxmKToKICAgICAgICBmb3IgS2xhc3MgaW4gTW9jaywgTWFnaWNNb2NrOgogICAgICAgICAgICBtb2NrID0gS2xhc3MoKQogICAgICAgICAgICBtb2NrLnJldHVybl92YWx1ZSA9IE1hZ2ljTW9jaygpCgogICAgICAgICAgICBtb2NrKCkoKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2subW9ja19jYWxscywgW2NhbGwoKSwgY2FsbCgpKCldKQoKCiAgICBkZWYgdGVzdF9tYW5hZ2VyX21vY2soc2VsZik6CiAgICAgICAgY2xhc3MgRm9vKG9iamVjdCk6CiAgICAgICAgICAgIG9uZSA9ICdvbmUnCiAgICAgICAgICAgIHR3byA9ICd0d28nCiAgICAgICAgbWFuYWdlciA9IE1vY2soKQogICAgICAgIHAxID0gcGF0Y2gub2JqZWN0KEZvbywgJ29uZScpCiAgICAgICAgcDIgPSBwYXRjaC5vYmplY3QoRm9vLCAndHdvJykKCiAgICAgICAgbW9ja19vbmUgPSBwMS5zdGFydCgpCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHAxLnN0b3ApCiAgICAgICAgbW9ja190d28gPSBwMi5zdGFydCgpCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHAyLnN0b3ApCgogICAgICAgIG1hbmFnZXIuYXR0YWNoX21vY2sobW9ja19vbmUsICdvbmUnKQogICAgICAgIG1hbmFnZXIuYXR0YWNoX21vY2sobW9ja190d28sICd0d28nKQoKICAgICAgICBGb28udHdvKCkKICAgICAgICBGb28ub25lKCkKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtYW5hZ2VyLm1vY2tfY2FsbHMsIFtjYWxsLnR3bygpLCBjYWxsLm9uZSgpXSkKCgogICAgZGVmIHRlc3RfbWFnaWNfbWV0aG9kc19tb2NrX2NhbGxzKHNlbGYpOgogICAgICAgIGZvciBLbGFzcyBpbiBNb2NrLCBNYWdpY01vY2s6CiAgICAgICAgICAgIG0gPSBLbGFzcygpCiAgICAgICAgICAgIG0uX19pbnRfXyA9IE1vY2socmV0dXJuX3ZhbHVlPTMpCiAgICAgICAgICAgIG0uX19mbG9hdF9fID0gTWFnaWNNb2NrKHJldHVybl92YWx1ZT0zLjApCiAgICAgICAgICAgIGludChtKQogICAgICAgICAgICBmbG9hdChtKQoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChtLm1vY2tfY2FsbHMsIFtjYWxsLl9faW50X18oKSwgY2FsbC5fX2Zsb2F0X18oKV0pCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobS5tZXRob2RfY2FsbHMsIFtdKQoKCiAgICBkZWYgdGVzdF9hdHRyaWJ1dGVfZGVsZXRpb24oc2VsZik6CiAgICAgICAgIyB0aGlzIGJlaGF2aW91ciBpc24ndCAqdXNlZnVsKiwgYnV0IGF0IGxlYXN0IGl0J3Mgbm93IHRlc3RlZC4uLgogICAgICAgIGZvciBLbGFzcyBpbiBNb2NrLCBNYWdpY01vY2ssIE5vbkNhbGxhYmxlTWFnaWNNb2NrLCBOb25DYWxsYWJsZU1vY2s6CiAgICAgICAgICAgIG0gPSBLbGFzcygpCiAgICAgICAgICAgIG9yaWdpbmFsID0gbS5mb28KICAgICAgICAgICAgbS5mb28gPSAzCiAgICAgICAgICAgIGRlbCBtLmZvbwogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG0uZm9vLCBvcmlnaW5hbCkKCiAgICAgICAgICAgIG5ldyA9IG0uZm9vID0gTW9jaygpCiAgICAgICAgICAgIGRlbCBtLmZvbwogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG0uZm9vLCBuZXcpCgoKICAgIGRlZiB0ZXN0X21vY2tfcGFyZW50cyhzZWxmKToKICAgICAgICBmb3IgS2xhc3MgaW4gTW9jaywgTWFnaWNNb2NrOgogICAgICAgICAgICBtID0gS2xhc3MoKQogICAgICAgICAgICBvcmlnaW5hbF9yZXByID0gcmVwcihtKQogICAgICAgICAgICBtLnJldHVybl92YWx1ZSA9IG0KICAgICAgICAgICAgc2VsZi5hc3NlcnRJcyhtKCksIG0pCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVwcihtKSwgb3JpZ2luYWxfcmVwcikKCiAgICAgICAgICAgIG0ucmVzZXRfbW9jaygpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMobSgpLCBtKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlcHIobSksIG9yaWdpbmFsX3JlcHIpCgogICAgICAgICAgICBtID0gS2xhc3MoKQogICAgICAgICAgICBtLmIgPSBtLmEKICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigibmFtZT0nbW9jay5hJyIsIHJlcHIobS5iKSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigibmFtZT0nbW9jay5hJyIsIHJlcHIobS5hKSkKICAgICAgICAgICAgbS5yZXNldF9tb2NrKCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigibmFtZT0nbW9jay5hJyIsIHJlcHIobS5iKSkKICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigibmFtZT0nbW9jay5hJyIsIHJlcHIobS5hKSkKCiAgICAgICAgICAgIG0gPSBLbGFzcygpCiAgICAgICAgICAgIG9yaWdpbmFsX3JlcHIgPSByZXByKG0pCiAgICAgICAgICAgIG0uYSA9IG0oKQogICAgICAgICAgICBtLmEucmV0dXJuX3ZhbHVlID0gbQoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXByKG0pLCBvcmlnaW5hbF9yZXByKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlcHIobS5hKCkpLCBvcmlnaW5hbF9yZXByKQoKCiAgICBkZWYgdGVzdF9hdHRhY2hfbW9jayhzZWxmKToKICAgICAgICBjbGFzc2VzID0gTW9jaywgTWFnaWNNb2NrLCBOb25DYWxsYWJsZU1hZ2ljTW9jaywgTm9uQ2FsbGFibGVNb2NrCiAgICAgICAgZm9yIEtsYXNzIGluIGNsYXNzZXM6CiAgICAgICAgICAgIGZvciBLbGFzczIgaW4gY2xhc3NlczoKICAgICAgICAgICAgICAgIG0gPSBLbGFzcygpCgogICAgICAgICAgICAgICAgbTIgPSBLbGFzczIobmFtZT0nZm9vJykKICAgICAgICAgICAgICAgIG0uYXR0YWNoX21vY2sobTIsICdiYXInKQoKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMobS5iYXIsIG0yKQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRJbigibmFtZT0nbW9jay5iYXInIiwgcmVwcihtMikpCgogICAgICAgICAgICAgICAgbS5iYXIuYmF6KDEpCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG0ubW9ja19jYWxscywgW2NhbGwuYmFyLmJheigxKV0pCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG0ubWV0aG9kX2NhbGxzLCBbY2FsbC5iYXIuYmF6KDEpXSkKCgogICAgZGVmIHRlc3RfYXR0YWNoX21vY2tfcmV0dXJuX3ZhbHVlKHNlbGYpOgogICAgICAgIGNsYXNzZXMgPSBNb2NrLCBNYWdpY01vY2ssIE5vbkNhbGxhYmxlTWFnaWNNb2NrLCBOb25DYWxsYWJsZU1vY2sKICAgICAgICBmb3IgS2xhc3MgaW4gTW9jaywgTWFnaWNNb2NrOgogICAgICAgICAgICBmb3IgS2xhc3MyIGluIGNsYXNzZXM6CiAgICAgICAgICAgICAgICBtID0gS2xhc3MoKQoKICAgICAgICAgICAgICAgIG0yID0gS2xhc3MyKG5hbWU9J2ZvbycpCiAgICAgICAgICAgICAgICBtLmF0dGFjaF9tb2NrKG0yLCAncmV0dXJuX3ZhbHVlJykKCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydElzKG0oKSwgbTIpCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEluKCJuYW1lPSdtb2NrKCknIiwgcmVwcihtMikpCgogICAgICAgICAgICAgICAgbTIuZm9vKCkKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobS5tb2NrX2NhbGxzLCBjYWxsKCkuZm9vKCkuY2FsbF9saXN0KCkpCgoKICAgIGRlZiB0ZXN0X2F0dHJpYnV0ZV9kZWxldGlvbihzZWxmKToKICAgICAgICBmb3IgbW9jayBpbiBNb2NrKCksIE1hZ2ljTW9jaygpOgogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUoaGFzYXR0cihtb2NrLCAnbScpKQoKICAgICAgICAgICAgZGVsIG1vY2subQogICAgICAgICAgICBzZWxmLmFzc2VydEZhbHNlKGhhc2F0dHIobW9jaywgJ20nKSkKCiAgICAgICAgICAgIGRlbCBtb2NrLmYKICAgICAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShoYXNhdHRyKG1vY2ssICdmJykpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKEF0dHJpYnV0ZUVycm9yLCBnZXRhdHRyLCBtb2NrLCAnZicpCgoKICAgIGRlZiB0ZXN0X2NsYXNzX2Fzc2lnbmFibGUoc2VsZik6CiAgICAgICAgZm9yIG1vY2sgaW4gTW9jaygpLCBNYWdpY01vY2soKToKICAgICAgICAgICAgc2VsZi5hc3NlcnROb3RJc0luc3RhbmNlKG1vY2ssIGludCkKCiAgICAgICAgICAgIG1vY2suX19jbGFzc19fID0gaW50CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShtb2NrLCBpbnQpCiAgICAgICAgICAgIG1vY2suZm9vCgoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICB1bml0dGVzdC5tYWluKCkK',
'/Lib/unittest/test/testmock/testpatch.py':'',
'/Lib/unittest/test/testmock/testsentinel.py':'aW1wb3J0IHVuaXR0ZXN0CmZyb20gdW5pdHRlc3QubW9jayBpbXBvcnQgc2VudGluZWwsIERFRkFVTFQKCgpjbGFzcyBTZW50aW5lbFRlc3QodW5pdHRlc3QuVGVzdENhc2UpOgoKICAgIGRlZiB0ZXN0U2VudGluZWxzKHNlbGYpOgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc2VudGluZWwud2hhdGV2ZXIsIHNlbnRpbmVsLndoYXRldmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbnRpbmVsIG5vdCBzdG9yZWQnKQogICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwoc2VudGluZWwud2hhdGV2ZXIsIHNlbnRpbmVsLndoYXRldmVyZWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzZW50aW5lbCBzaG91bGQgYmUgdW5pcXVlJykKCgogICAgZGVmIHRlc3RTZW50aW5lbE5hbWUoc2VsZik6CiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdHIoc2VudGluZWwud2hhdGV2ZXIpLCAnc2VudGluZWwud2hhdGV2ZXInLAogICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbnRpbmVsIG5hbWUgaW5jb3JyZWN0JykKCgogICAgZGVmIHRlc3RERUZBVUxUKHNlbGYpOgogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShERUZBVUxUIGlzIHNlbnRpbmVsLkRFRkFVTFQpCgogICAgZGVmIHRlc3RCYXNlcyhzZWxmKToKICAgICAgICAjIElmIHRoaXMgZG9lc24ndCByYWlzZSBhbiBBdHRyaWJ1dGVFcnJvciB0aGVuIGhlbHAobW9jaykgaXMgYnJva2VuCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGxhbWJkYTogc2VudGluZWwuX19iYXNlc19fKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICB1bml0dGVzdC5tYWluKCkK',
'/Lib/unittest/test/testmock/testwith.py':'aW1wb3J0IHVuaXR0ZXN0CmZyb20gd2FybmluZ3MgaW1wb3J0IGNhdGNoX3dhcm5pbmdzCgpmcm9tIHVuaXR0ZXN0LnRlc3QudGVzdG1vY2suc3VwcG9ydCBpbXBvcnQgaXNfaW5zdGFuY2UKZnJvbSB1bml0dGVzdC5tb2NrIGltcG9ydCBNYWdpY01vY2ssIE1vY2ssIHBhdGNoLCBzZW50aW5lbCwgbW9ja19vcGVuLCBjYWxsCgoKCnNvbWV0aGluZyAgPSBzZW50aW5lbC5Tb21ldGhpbmcKc29tZXRoaW5nX2Vsc2UgID0gc2VudGluZWwuU29tZXRoaW5nRWxzZQoKCgpjbGFzcyBXaXRoVGVzdCh1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnQoc2VsZik6CiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5Tb21ldGhpbmcyKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZzIsICJ1bnBhdGNoZWQiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpCgoKICAgIGRlZiB0ZXN0X3dpdGhfc3RhdGVtZW50X2V4Y2VwdGlvbihzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuU29tZXRoaW5nMik6CiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nMiwgInVucGF0Y2hlZCIpCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ3BvdycpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZmFpbCgicGF0Y2ggc3dhbGxvd2VkIGV4Y2VwdGlvbiIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfYXMoc2VsZik6CiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZzoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIG1vY2tfc29tZXRoaW5nLCAidW5wYXRjaGVkIikKICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2tfc29tZXRoaW5nLCBNYWdpY01vY2spLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInBhdGNoaW5nIHdyb25nIHR5cGUiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpCgoKICAgIGRlZiB0ZXN0X3BhdGNoX29iamVjdF93aXRoX3N0YXRlbWVudChzZWxmKToKICAgICAgICBjbGFzcyBGb28ob2JqZWN0KToKICAgICAgICAgICAgc29tZXRoaW5nID0gJ2ZvbycKICAgICAgICBvcmlnaW5hbCA9IEZvby5zb21ldGhpbmcKICAgICAgICB3aXRoIHBhdGNoLm9iamVjdChGb28sICdzb21ldGhpbmcnKToKICAgICAgICAgICAgc2VsZi5hc3NlcnROb3RFcXVhbChGb28uc29tZXRoaW5nLCBvcmlnaW5hbCwgInVucGF0Y2hlZCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uc29tZXRoaW5nLCBvcmlnaW5hbCkKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfbmVzdGVkKHNlbGYpOgogICAgICAgIHdpdGggY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpOgogICAgICAgICAgICB3aXRoIHBhdGNoKCclcy5zb21ldGhpbmcnICUgX19uYW1lX18pIGFzIG1vY2tfc29tZXRoaW5nLCBwYXRjaCgnJXMuc29tZXRoaW5nX2Vsc2UnICUgX19uYW1lX18pIGFzIG1vY2tfc29tZXRoaW5nX2Vsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsICJ1bnBhdGNoZWQiKQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmdfZWxzZSwgbW9ja19zb21ldGhpbmdfZWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVucGF0Y2hlZCIpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmdfZWxzZSwgc2VudGluZWwuU29tZXRoaW5nRWxzZSkKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfc3BlY2lmaWVkKHNlbGYpOgogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuUGF0Y2hlZCkgYXMgbW9ja19zb21ldGhpbmc6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9ja19zb21ldGhpbmcsIHNlbnRpbmVsLlBhdGNoZWQsICJ3cm9uZyBwYXRjaCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykKCgogICAgZGVmIHRlc3RDb250ZXh0TWFuYWdlck1vY2tpbmcoc2VsZik6CiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2suX19lbnRlcl9fID0gTW9jaygpCiAgICAgICAgbW9jay5fX2V4aXRfXyA9IE1vY2soKQogICAgICAgIG1vY2suX19leGl0X18ucmV0dXJuX3ZhbHVlID0gRmFsc2UKCiAgICAgICAgd2l0aCBtb2NrIGFzIG06CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobSwgbW9jay5fX2VudGVyX18ucmV0dXJuX3ZhbHVlKQogICAgICAgIG1vY2suX19lbnRlcl9fLmFzc2VydF9jYWxsZWRfd2l0aCgpCiAgICAgICAgbW9jay5fX2V4aXRfXy5hc3NlcnRfY2FsbGVkX3dpdGgoTm9uZSwgTm9uZSwgTm9uZSkKCgogICAgZGVmIHRlc3RfY29udGV4dF9tYW5hZ2VyX3dpdGhfbWFnaWNfbW9jayhzZWxmKToKICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCkKCiAgICAgICAgd2l0aCBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IpOgogICAgICAgICAgICB3aXRoIG1vY2s6CiAgICAgICAgICAgICAgICAnZm9vJyArIDMKICAgICAgICBtb2NrLl9fZW50ZXJfXy5hc3NlcnRfY2FsbGVkX3dpdGgoKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShtb2NrLl9fZXhpdF9fLmNhbGxlZCkKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfc2FtZV9hdHRyaWJ1dGUoc2VsZik6CiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5QYXRjaGVkKSBhcyBtb2NrX3NvbWV0aGluZzoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIG1vY2tfc29tZXRoaW5nLCAidW5wYXRjaGVkIikKCiAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXykgYXMgbW9ja19hZ2FpbjoKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX2FnYWluLCAidW5wYXRjaGVkIikKCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVzdG9yZWQgd2l0aCB3cm9uZyBpbnN0YW5jZSIpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcsICJub3QgcmVzdG9yZWQiKQoKCiAgICBkZWYgdGVzdF93aXRoX3N0YXRlbWVudF9pbWJyaWNhdGVkKHNlbGYpOgogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXykgYXMgbW9ja19zb21ldGhpbmc6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpCgogICAgICAgICAgICB3aXRoIHBhdGNoKCclcy5zb21ldGhpbmdfZWxzZScgJSBfX25hbWVfXykgYXMgbW9ja19zb21ldGhpbmdfZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIG1vY2tfc29tZXRoaW5nX2Vsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bnBhdGNoZWQiKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIHNlbnRpbmVsLlNvbWV0aGluZ0Vsc2UpCgoKICAgIGRlZiB0ZXN0X2RpY3RfY29udGV4dF9tYW5hZ2VyKHNlbGYpOgogICAgICAgIGZvbyA9IHt9CiAgICAgICAgd2l0aCBwYXRjaC5kaWN0KGZvbywgeydhJzogJ2InfSk6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7J2EnOiAnYid9KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7fSkKCiAgICAgICAgd2l0aCBzZWxmLmFzc2VydFJhaXNlcyhOYW1lRXJyb3IpOgogICAgICAgICAgICB3aXRoIHBhdGNoLmRpY3QoZm9vLCB7J2EnOiAnYid9KToKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7J2EnOiAnYid9KQogICAgICAgICAgICAgICAgcmFpc2UgTmFtZUVycm9yKCdLb25yYWQnKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvbywge30pCgoKCmNsYXNzIFRlc3RNb2NrT3Blbih1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHRlc3RfbW9ja19vcGVuKHNlbGYpOgogICAgICAgIG1vY2sgPSBtb2NrX29wZW4oKQogICAgICAgIHdpdGggcGF0Y2goJyVzLm9wZW4nICUgX19uYW1lX18sIG1vY2ssIGNyZWF0ZT1UcnVlKSBhcyBwYXRjaGVkOgogICAgICAgICAgICBzZWxmLmFzc2VydElzKHBhdGNoZWQsIG1vY2spCiAgICAgICAgICAgIG9wZW4oJ2ZvbycpCgogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoJ2ZvbycpCgoKICAgIGRlZiB0ZXN0X21vY2tfb3Blbl9jb250ZXh0X21hbmFnZXIoc2VsZik6CiAgICAgICAgbW9jayA9IG1vY2tfb3BlbigpCiAgICAgICAgaGFuZGxlID0gbW9jay5yZXR1cm5fdmFsdWUKICAgICAgICB3aXRoIHBhdGNoKCclcy5vcGVuJyAlIF9fbmFtZV9fLCBtb2NrLCBjcmVhdGU9VHJ1ZSk6CiAgICAgICAgICAgIHdpdGggb3BlbignZm9vJykgYXMgZjoKICAgICAgICAgICAgICAgIGYucmVhZCgpCgogICAgICAgIGV4cGVjdGVkX2NhbGxzID0gW2NhbGwoJ2ZvbycpLCBjYWxsKCkuX19lbnRlcl9fKCksIGNhbGwoKS5yZWFkKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbCgpLl9fZXhpdF9fKE5vbmUsIE5vbmUsIE5vbmUpXQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzLCBleHBlY3RlZF9jYWxscykKICAgICAgICBzZWxmLmFzc2VydElzKGYsIGhhbmRsZSkKCgogICAgZGVmIHRlc3RfZXhwbGljaXRfbW9jayhzZWxmKToKICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCkKICAgICAgICBtb2NrX29wZW4obW9jaykKCiAgICAgICAgd2l0aCBwYXRjaCgnJXMub3BlbicgJSBfX25hbWVfXywgbW9jaywgY3JlYXRlPVRydWUpIGFzIHBhdGNoZWQ6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMocGF0Y2hlZCwgbW9jaykKICAgICAgICAgICAgb3BlbignZm9vJykKCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgnZm9vJykKCgogICAgZGVmIHRlc3RfcmVhZF9kYXRhKHNlbGYpOgogICAgICAgIG1vY2sgPSBtb2NrX29wZW4ocmVhZF9kYXRhPSdmb28nKQogICAgICAgIHdpdGggcGF0Y2goJyVzLm9wZW4nICUgX19uYW1lX18sIG1vY2ssIGNyZWF0ZT1UcnVlKToKICAgICAgICAgICAgaCA9IG9wZW4oJ2JhcicpCiAgICAgICAgICAgIHJlc3VsdCA9IGgucmVhZCgpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LCAnZm9vJykKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgdW5pdHRlc3QubWFpbigpCg==',
'/Lib/unittest/test/testmock/__init__.py':'aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHVuaXR0ZXN0CgoKaGVyZSA9IG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykKbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXIKCmRlZiBsb2FkX3Rlc3RzKCphcmdzKToKICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKCkKICAgIGZvciBmbiBpbiBvcy5saXN0ZGlyKGhlcmUpOgogICAgICAgIGlmIGZuLnN0YXJ0c3dpdGgoInRlc3QiKSBhbmQgZm4uZW5kc3dpdGgoIi5weSIpOgogICAgICAgICAgICBtb2RuYW1lID0gInVuaXR0ZXN0LnRlc3QudGVzdG1vY2suIiArIGZuWzotM10KICAgICAgICAgICAgX19pbXBvcnRfXyhtb2RuYW1lKQogICAgICAgICAgICBtb2R1bGUgPSBzeXMubW9kdWxlc1ttb2RuYW1lXQogICAgICAgICAgICBzdWl0ZS5hZGRUZXN0KGxvYWRlci5sb2FkVGVzdHNGcm9tTW9kdWxlKG1vZHVsZSkpCiAgICByZXR1cm4gc3VpdGUK'
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.$py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.$py_VFS[lib])
}


function $import_pyj_module(module,alias,names,path,module_contents) {
    __BRYTHON__.$py_module_path[module]=path
    __BRYTHON__.$py_module_alias[module]=alias
    __BRYTHON__.scope[module+'.py']={}
    __BRYTHON__.scope[module+'.py'].__dict__={}

   try {
     eval(module_contents);
     // add names defined in the module as attributes of $module
     for(var attr in __BRYTHON__.scope[module].__dict__){
       $module[attr] = __BRYTHON__.scope[module].__dict__[attr]
     }
        
     // add class and __str__
     $module.__class__ = $type
     $module.__repr__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__str__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__file__ = path
     return $module
   } catch(err) {
     eval('throw '+err.name+'(err.message)')
   }
}

//define import procedure to look up module in VFS
$import_via_VFS=function(module,alias,names){
  var ext=['.js', '.pyj', '.py']
  var search_path=__BRYTHON__.path
  var root = __BRYTHON__.brython_path;
  if (root.endswith('/')) {
     root=root.substring(0,root.length-1); 
  }
  if (search_path.indexOf(root+'/libs') == -1) {
     search_path.unshift(root+'/libs')
  }

  if (search_path.indexOf(root+'/Lib') == -1) {
     search_path.unshift(root+'/Lib')
  }

  for(var i=0; i<search_path.length; i++) {
     for (var j=0; j<ext.length; j++) {
         var path=search_path[i].replace(root, '')
         path+='/'+module+ext[j]
         
         //console.log("searching for " + path + " in VFS");
         var module_contents=readFromVFS(path)
         if(module_contents !== undefined) {
           console.log("imported ("+module+") via VFS:" + path)
           if (ext[j] == '.js') {
              return $import_js_module(module,alias,names,path,module_contents)
           }
           if (ext[j] == '.pyj') {
              return $import_pyj_module(module,alias,names,path,module_contents)
           }
           return $import_py_module(module,alias,names,path,module_contents)
         }
     }
  }
  res = Error()
  res.name = 'NotFoundError'
  res.message = "No module named '"+module+"'"
  throw res
}

// since $import_funcs is now a local variable (import_funcs), we have
// to over write the $import_single function to get VFS to work
$import_single=function (module){
    var import_funcs = [$import_via_VFS, $import_js, $import_module_search_path]
    if(module.name.search(/\./)>-1){import_funcs = [$import_module_search_path]}
    for(var j=0;j<import_funcs.length;j++){
        try{
            return import_funcs[j](module)
        } catch(err){
            if(err.name==="NotFoundError"){
                if(j==import_funcs.length-1){
                    throw ImportError("no module named '"+module.name+"'")
                }else{
                    continue
                }
            }else{throw(err)}
        }
    }
}
  