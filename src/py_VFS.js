__BRYTHON__.py_VFS={
'/libs/_html.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmb3IodmFyICRweV9idWlsdGluIGluIF9fYnVpbHRpbnNfXylldmFsKCJ2YXIgIiskcHlfYnVpbHRpbisiPV9fYnVpbHRpbnNfX1skcHlfYnVpbHRpbl0iKTtmdW5jdGlvbiAkVGFnKHRhZ05hbWUsYXJncyl7dmFyIG9iaj1fX0JSWVRIT05fXy4kRE9NTm9kZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpKTtvYmoucGFyZW50PXRoaXM7aWYoYXJncyE9dW5kZWZpbmVkJiZhcmdzLmxlbmd0aD4wKXskc3RhcnQ9MDskZmlyc3Q9YXJnc1swXTtpZigkZmlyc3QuX19jbGFzc19fIT09JEt3RGljdCl7JHN0YXJ0PTE7aWYoaXNpbnN0YW5jZSgkZmlyc3QsW3N0cixpbnQsZmxvYXRdKSl7dHh0PWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cigkZmlyc3QpKTtvYmouZWx0LmFwcGVuZENoaWxkKHR4dCk7fWVsc2UgaWYoJGZpcnN0Ll9fY2xhc3NfXz09PSRUYWdTdW1EaWN0KWZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKylvYmouZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5jaGlsZHJlblskaV0uZWx0KTtlbHNlIHRyeXtvYmouZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5lbHQpO31jYXRjaChlcnIpe2NvbnNvbGUubG9nKCdlcnJldXIgJytlcnIpO3Rocm93IFZhbHVlRXJyb3IoJ3dyb25nIGVsZW1lbnQgJyskZmlyc3QpO319Zm9yKHZhciAkaT0kc3RhcnQ7JGk8YXJncy5sZW5ndGg7JGkrKyl7JGFyZz1hcmdzWyRpXTtpZigkYXJnJiYkYXJnLl9fY2xhc3NfXz09PSRLd0RpY3QpaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PT0ib24iKWV2YWwoJ19fQlJZVEhPTl9fLkRPTU5vZGUuYmluZChvYmosIicrJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDIpKyciLGZ1bmN0aW9uKCl7JyskYXJnLnZhbHVlKyd9KScpO2Vsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCk9PSJzdHlsZSIpX19CUllUSE9OX18uRE9NTm9kZS5zZXRfc3R5bGUob2JqLCRhcmcudmFsdWUpO2Vsc2UgaWYoJGFyZy52YWx1ZSE9PWZhbHNlKXRyeXt2YXIgYXJnPSRhcmcubmFtZS50b0xvd2VyQ2FzZSgpO29iai5lbHQuc2V0QXR0cmlidXRlKGFyZywkYXJnLnZhbHVlKTtpZihhcmc9PSJjbGFzcyIpb2JqLmVsdC5zZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIsJGFyZy52YWx1ZSk7fWNhdGNoKGVycil7Y29uc29sZS5sb2coJ2VycmV1ciAnK2Vycik7dGhyb3cgVmFsdWVFcnJvcigiY2FuJ3Qgc2V0IGF0dHJpYnV0ZSAiKyRhcmcubmFtZSk7fX19cmV0dXJuIG9iajt9ZnVuY3Rpb24gQSgpe3ZhciBvYmo9JFRhZygnQScsYXJndW1lbnRzKTtyZXR1cm4gb2JqO31BLl9fbmFtZV9fPSdodG1sLkEnO3ZhciAkc3JjPUErJyc7JHRhZ3M9WydBJywnQUJCUicsJ0FDUk9OWU0nLCdBRERSRVNTJywnQVBQTEVUJywnQicsJ0JETycsJ0JJRycsJ0JMT0NLUVVPVEUnLCdCVVRUT04nLCdDQVBUSU9OJywnQ0VOVEVSJywnQ0lURScsJ0NPREUnLCdERUwnLCdERk4nLCdESVInLCdESVYnLCdETCcsJ0VNJywnRklFTERTRVQnLCdGT05UJywnRk9STScsJ0ZSQU1FU0VUJywnSDEnLCdIMicsJ0gzJywnSDQnLCdINScsJ0g2JywnSScsJ0lGUkFNRScsJ0lOUycsJ0tCRCcsJ0xBQkVMJywnTEVHRU5EJywnTUFQJywnTUVOVScsJ05PRlJBTUVTJywnTk9TQ1JJUFQnLCdPQkpFQ1QnLCdPTCcsJ09QVEdST1VQJywnUFJFJywnUScsJ1MnLCdTQU1QJywnU0NSSVBUJywnU0VMRUNUJywnU01BTEwnLCdTUEFOJywnU1RSSUtFJywnU1RST05HJywnU1RZTEUnLCdTVUInLCdTVVAnLCdUQUJMRScsJ1RFWFRBUkVBJywnVElUTEUnLCdUVCcsJ1UnLCdVTCcsJ1ZBUicsJ0JPRFknLCdDT0xHUk9VUCcsJ0REJywnRFQnLCdIRUFEJywnSFRNTCcsJ0xJJywnUCcsJ1RCT0RZJywnT1BUSU9OJywnVEQnLCdURk9PVCcsJ1RIJywnVEhFQUQnLCdUUicsJ0FSRUEnLCdCQVNFJywnQkFTRUZPTlQnLCdCUicsJ0NPTCcsJ0ZSQU1FJywnSFInLCdJTUcnLCdJTlBVVCcsJ0lTSU5ERVgnLCdMSU5LJywnTUVUQScsJ1BBUkFNJ107JHRhZ3M9JHRhZ3MuY29uY2F0KFsnQVJUSUNMRScsJ0FTSURFJywnQVVESU8nLCdCREknLCdDQU5WQVMnLCdDT01NQU5EJywnREFUQUxJU1QnLCdERVRBSUxTJywnRElBTE9HJywnRU1CRUQnLCdGSUdDQVBUSU9OJywnRklHVVJFJywnRk9PVEVSJywnSEVBREVSJywnS0VZR0VOJywnTUFSSycsJ01FVEVSJywnTkFWJywnT1VUUFVUJywnUFJPR1JFU1MnLCdSUCcsJ1JUJywnUlVCWScsJ1NFQ1RJT04nLCdTT1VSQ0UnLCdTVU1NQVJZJywnVElNRScsJ1RSQUNLJywnVklERU8nLCdXQlInXSk7dmFyIG9iaj1uZXcgT2JqZWN0KCk7Zm9yKCRpPTA7JGk8JHRhZ3MubGVuZ3RoOyRpKyspeyRjb2RlPSRzcmMucmVwbGFjZSgvQS9nbSwkdGFnc1skaV0pO2V2YWwoIm9iai4iKyR0YWdzWyRpXSsiPSIrJGNvZGUpO2V2YWwoIm9iai4iKyR0YWdzWyRpXSsnLl9fbmFtZV9fPSJodG1sLicrJHRhZ3NbJGldKyciJyk7fW9iai5fX2dldGF0dHJfXz1mdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXTt9O3JldHVybiBvYmo7fSkoKTs=',
'/libs/re.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmb3IodmFyICRweV9idWlsdGluIGluIF9fYnVpbHRpbnNfXylldmFsKCJ2YXIgIiskcHlfYnVpbHRpbisiPV9fYnVpbHRpbnNfX1skcHlfYnVpbHRpbl0iKTt2YXIgJEpTT2JqZWN0PV9fQlJZVEhPTl9fLiRKU09iamVjdDt2YXIgSlNPYmplY3Q9X19CUllUSE9OX18uSlNPYmplY3Q7b2JqPXtfX2NsYXNzX186JG1vZHVsZSxfX3N0cl9fOmZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdyZSc+Ijt9fTtvYmouQT1vYmouQVNDSUk9MjU2O29iai5JPW9iai5JR05PUkVDQVNFPSdpJztvYmouTT1vYmouTVVMVElMSU5FPSdtJztvYmouVkVSQk9TRT02NDskU1JFX1BhdHRlcm5EaWN0PXtfX2NsYXNzX186JHR5cGUsX19uYW1lX186J1NSRV9QYXR0ZXJuJ307JFNSRV9QYXR0ZXJuRGljdC5fX21yb19fPVskU1JFX1BhdHRlcm5EaWN0LG9iamVjdC4kZGljdF07JFNSRV9QYXR0ZXJuRGljdC5tYXRjaD1mdW5jdGlvbihzZWxmLHN0cmluZyl7cmV0dXJuIG9iai5tYXRjaChzZWxmLnBhdHRlcm4sc3RyaW5nLHNlbGYuZmxhZ3MpO307JFNSRV9QYXR0ZXJuRGljdC5zZWFyY2g9ZnVuY3Rpb24oc2VsZixzdHJpbmcpe3JldHVybiBvYmoub2JqKHNlbGYucGF0dGVybixzdHJpbmcsc2VsZi5mbGFncyk7fTtvYmouY29tcGlsZT1mdW5jdGlvbihwYXR0ZXJuLGZsYWdzKXtyZXR1cm57X19jbGFzc19fOiRTUkVfUGF0dGVybkRpY3QscGF0dGVybjpwYXR0ZXJuLGZsYWdzOmZsYWdzfTt9O29iai5lc2NhcGU9ZnVuY3Rpb24oc3RyaW5nKXt2YXIgcmVzPScnO3ZhciBvaz0nYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjAxMjM0NTY3ODlfJztmb3IodmFyIGk9MDtpPHN0cmluZy5sZW5ndGg7aSsrKWlmKG9rLnNlYXJjaChzdHJpbmcuY2hhckF0KGkpKT4tMSlyZXMrPXN0cmluZy5jaGFyQXQoaSk7cmV0dXJuIHJlczt9O29iai5maW5kYWxsPWZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nLGZsYWdzKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10sW10sJ2FyZ3MnLCdrdycpO3ZhciBhcmdzPSRucy5hcmdzO2lmKGFyZ3MubGVuZ3RoPjApdmFyIGZsYWdzPWFyZ3NbMF07ZWxzZSB2YXIgZmxhZ3M9JG5zLmt3LmdldCgnZmxhZ3MnLCcnKTtmbGFncys9J2dtJzt2YXIganNwPW5ldyBSZWdFeHAocGF0dGVybixmbGFncyk7dmFyIGpzbWF0Y2g9c3RyaW5nLm1hdGNoKGpzcCk7aWYoanNtYXRjaD09PW51bGwpcmV0dXJuIFtdO3JldHVybiBqc21hdGNoO307b2JqLnNlYXJjaD1mdW5jdGlvbihwYXR0ZXJuLHN0cmluZyl7dmFyICRucz0kTWFrZUFyZ3MoJ3JlLnNlYXJjaCcsYXJndW1lbnRzLFsncGF0dGVybicsJ3N0cmluZyddLFtdLCdhcmdzJywna3cnKTt2YXIgYXJncz0kbnMuYXJncztpZihhcmdzLmxlbmd0aD4wKXZhciBmbGFncz1hcmdzWzBdO2Vsc2UgdmFyIGZsYWdzPWdldGF0dHIoJG5zLmt3LCdnZXQnKSgnZmxhZ3MnLCcnKTt2YXIganNwPW5ldyBSZWdFeHAocGF0dGVybixmbGFncyk7dmFyIGpzbWF0Y2g9c3RyaW5nLm1hdGNoKGpzcCk7aWYoanNtYXRjaD09PW51bGwpcmV0dXJuIE5vbmU7dmFyIG1vPW5ldyBPYmplY3QoKTttby5ncm91cD1mdW5jdGlvbigpe3ZhciByZXM9W107Zm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKylpZihqc21hdGNoW2FyZ3VtZW50c1tpXV09PT11bmRlZmluZWQpcmVzLnB1c2goTm9uZSk7ZWxzZSByZXMucHVzaChqc21hdGNoW2FyZ3VtZW50c1tpXV0pO2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0xKXJldHVybiByZXNbMF07cmV0dXJuIHR1cGxlKHJlcyk7fTttby5ncm91cHM9ZnVuY3Rpb24oX2RlZmF1bHQpe2lmKF9kZWZhdWx0PT09dW5kZWZpbmVkKV9kZWZhdWx0PU5vbmU7dmFyIHJlcz1bXTtmb3IodmFyIGk9MTtpPGpzbWF0Y2gubGVuZ3RoO2krKylpZihqc21hdGNoW2ldPT09dW5kZWZpbmVkKXJlcy5wdXNoKF9kZWZhdWx0KTtlbHNlIHJlcy5wdXNoKGpzbWF0Y2hbaV0pO3JldHVybiB0dXBsZShyZXMpO307bW8uc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNtYXRjaC5pbmRleDt9O21vLnN0cmluZz1zdHJpbmc7cmV0dXJuIEpTT2JqZWN0KG1vKTt9O29iai5zdWI9ZnVuY3Rpb24ocGF0dGVybixyZXBsLHN0cmluZyl7dmFyICRucz0kTWFrZUFyZ3MoJ3JlLnNlYXJjaCcsYXJndW1lbnRzLFsncGF0dGVybicsJ3JlcGwnLCdzdHJpbmcnXSxbXSwnYXJncycsJ2t3Jyk7Zm9yKCR2YXIgaW4gJG5zKWV2YWwoInZhciAiKyR2YXIrIj0kbnNbJHZhcl0iKTt2YXIgYXJncz0kbnMuYXJnczt2YXIgY291bnQ9X19idWlsdGluc19fLmRpY3QuJGRpY3QuZ2V0KCRucy5rdywnY291bnQnLDApO3ZhciBmbGFncz1fX2J1aWx0aW5zX18uZGljdC4kZGljdC5nZXQoJG5zLmt3LCdmbGFncycsJycpO2lmKGFyZ3MubGVuZ3RoPjApdmFyIGNvdW50PWFyZ3NbMF07aWYoYXJncy5sZW5ndGg+MSl2YXIgZmxhZ3M9YXJnc1sxXTtpZih0eXBlb2YgcmVwbD09PSJzdHJpbmciKXJlcGw9cmVwbC5yZXBsYWNlKC9cXChcZCspL2csJyQkJDEnKTtlbHNlIGlmKHR5cGVvZiByZXBsPT09ImZ1bmN0aW9uIil2YXIgJHJlcGwxPWZ1bmN0aW9uKCl7dmFyIG1vPU9iamVjdCgpO21vLnN0cmluZz1hcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXTt2YXIgc3RhcnQ9YXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMl07dmFyIGVuZD1zdGFydCthcmd1bWVudHNbMF0ubGVuZ3RoO21vLnN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIHN0YXJ0O307bW8uZW5kPWZ1bmN0aW9uKCl7cmV0dXJuIGVuZDt9O2dyb3Vwcz1bXTtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGgtMjtpKyspZ3JvdXBzLnB1c2goYXJndW1lbnRzW2ldKTttby5ncm91cHM9ZnVuY3Rpb24oX2RlZmF1bHQpe2lmKF9kZWZhdWx0PT09dW5kZWZpbmVkKV9kZWZhdWx0PU5vbmU7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPGdyb3Vwcy5sZW5ndGg7aSsrKWlmKGdyb3Vwc1tpXT09PXVuZGVmaW5lZClyZXMucHVzaChfZGVmYXVsdCk7ZWxzZSByZXMucHVzaChncm91cHNbaV0pO3JldHVybiByZXM7fTtyZXR1cm4gcmVwbChKU09iamVjdChtbykpO307aWYoY291bnQ9PTApZmxhZ3MrPSdnJzt2YXIganNwPW5ldyBSZWdFeHAocGF0dGVybixmbGFncyk7aWYodHlwZW9mIHJlcGw9PT0nZnVuY3Rpb24nKXJldHVybiBzdHJpbmcucmVwbGFjZShqc3AsJHJlcGwxKTtlbHNlIHJldHVybiBzdHJpbmcucmVwbGFjZShqc3AscmVwbCk7fTtvYmoubWF0Y2g9KGZ1bmN0aW9uKHNlYXJjaF9mdW5jKXtyZXR1cm4gZnVuY3Rpb24oKXtwYXR0ZXJuPWFyZ3VtZW50c1swXTtpZihwYXR0ZXJuLmNoYXJBdCgwKSE9PSdeJylwYXR0ZXJuPSdeJytwYXR0ZXJuO3ZhciBhcmdzPVtwYXR0ZXJuXTtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKWFyZ3MucHVzaChhcmd1bWVudHNbaV0pO3JldHVybiBzZWFyY2hfZnVuYy5hcHBseShudWxsLGFyZ3MpO307fSkob2JqLnNlYXJjaCk7cmV0dXJuIG9iajt9KSgpOw==',
'/libs/marshal.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmb3IodmFyICRweV9idWlsdGluIGluIF9fYnVpbHRpbnNfXylldmFsKCJ2YXIgIiskcHlfYnVpbHRpbisiPV9fYnVpbHRpbnNfX1skcHlfYnVpbHRpbl0iKTtmdW5jdGlvbiBfcHkob2JqKXtpZihvYmo9PT1udWxsKXJldHVybiBOb25lO2lmKGlzaW5zdGFuY2Uob2JqLGxpc3QpKXt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspcmVzLnB1c2goX3B5KG9ialtpXSkpO3JldHVybiByZXM7fWlmKG9iai5fX2NsYXNzX18hPT11bmRlZmluZWQpe2lmKG9iai5fX2NsYXNzX189PT1saXN0KWZvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspb2JqW2ldPV9weShvYmpbaV0pO3JldHVybiBvYmo7fWlmKHR5cGVvZiBvYmo9PT0nb2JqZWN0JyYmb2JqLl9fY2xhc3NfXz09PXVuZGVmaW5lZCl7dmFyIHJlcz1kaWN0KCk7Zm9yKHZhciBhdHRyIGluIG9iailnZXRhdHRyKHJlcywnX19zZXRpdGVtX18nKShhdHRyLF9weShvYmpbYXR0cl0pKTtyZXR1cm4gcmVzO31yZXR1cm4gX19CUllUSE9OX18uSlNPYmplY3Qob2JqKTt9ZnVuY3Rpb24gX2pzKG9iail7aWYoaXNpbnN0YW5jZShvYmosW2ludCxzdHJdKSlyZXR1cm4gb2JqO2Vsc2UgaWYob2JqPT09Tm9uZSlyZXR1cm4gbnVsbDtlbHNlIGlmKG9iaj09PVRydWUpcmV0dXJuIHRydWU7ZWxzZSBpZihvYmo9PT1GYWxzZSlyZXR1cm4gZmFsc2U7ZWxzZSBpZihpc2luc3RhbmNlKG9iaixmbG9hdCkpcmV0dXJuIG9iai52YWx1ZTtlbHNlIGlmKGlzaW5zdGFuY2Uob2JqLFtsaXN0LHR1cGxlXSkpe3ZhciByZXM9W107Zm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKylyZXMucHVzaChfanMob2JqW2ldKSk7cmV0dXJuIHJlczt9ZWxzZSBpZihpc2luc3RhbmNlKG9iaixkaWN0KSl7dmFyIHJlcz1uZXcgT2JqZWN0KCk7Zm9yKHZhciBpPTA7aTxvYmouJGtleXMubGVuZ3RoO2krKylyZXNbX2pzKG9iai4ka2V5c1tpXSldPV9qcyhvYmouJHZhbHVlc1tpXSk7cmV0dXJuIHJlczt9ZWxzZSB0aHJvdyBUeXBlRXJyb3Ioc3RyKG9iaikrJyBpcyBub3QgSlNPTiBzZXJpYWxpemFibGUnKTt9cmV0dXJue2xvYWRzOmZ1bmN0aW9uKGpzb25fb2JqKXtyZXR1cm4gX3B5KEpTT04ucGFyc2UoanNvbl9vYmopKTt9LGR1bXBzOmZ1bmN0aW9uKG9iail7cmV0dXJuIEpTT04uc3RyaW5naWZ5KF9qcyhvYmopKTt9fTt9KSgpOw==',
'/libs/builtins.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgb2JqPXtfX2NsYXNzX186JE1vZHVsZURpY3QsX19uYW1lX186J2J1aWx0aW5zJ307dmFyIGJ1aWx0aW5fbmFtZXM9WydBcml0aG1ldGljRXJyb3InLCdBc3NlcnRpb25FcnJvcicsJ0F0dHJpYnV0ZUVycm9yJywnQmFzZUV4Y2VwdGlvbicsJ0Jsb2NraW5nSU9FcnJvcicsJ0Jyb2tlblBpcGVFcnJvcicsJ0J1ZmZlckVycm9yJywnQnl0ZXNXYXJuaW5nJywnQ2hpbGRQcm9jZXNzRXJyb3InLCdDb25uZWN0aW9uQWJvcnRlZEVycm9yJywnQ29ubmVjdGlvbkVycm9yJywnQ29ubmVjdGlvblJlZnVzZWRFcnJvcicsJ0Nvbm5lY3Rpb25SZXNldEVycm9yJywnRGVwcmVjYXRpb25XYXJuaW5nJywnRU9GRXJyb3InLCdFbGxpcHNpcycsJ0Vudmlyb25tZW50RXJyb3InLCdFeGNlcHRpb24nLCdGYWxzZScsJ0ZpbGVFeGlzdHNFcnJvcicsJ0ZpbGVOb3RGb3VuZEVycm9yJywnRmxvYXRpbmdQb2ludEVycm9yJywnRnV0dXJlV2FybmluZycsJ0dlbmVyYXRvckV4aXQnLCdJT0Vycm9yJywnSW1wb3J0RXJyb3InLCdJbXBvcnRXYXJuaW5nJywnSW5kZW50YXRpb25FcnJvcicsJ0luZGV4RXJyb3InLCdJbnRlcnJ1cHRlZEVycm9yJywnSXNBRGlyZWN0b3J5RXJyb3InLCdLZXlFcnJvcicsJ0tleWJvYXJkSW50ZXJydXB0JywnTG9va3VwRXJyb3InLCdNZW1vcnlFcnJvcicsJ05hbWVFcnJvcicsJ05vbmUnLCdOb3RBRGlyZWN0b3J5RXJyb3InLCdOb3RJbXBsZW1lbnRlZCcsJ05vdEltcGxlbWVudGVkRXJyb3InLCdPU0Vycm9yJywnT3ZlcmZsb3dFcnJvcicsJ1BlbmRpbmdEZXByZWNhdGlvbldhcm5pbmcnLCdQZXJtaXNzaW9uRXJyb3InLCdQcm9jZXNzTG9va3VwRXJyb3InLCdSZWZlcmVuY2VFcnJvcicsJ1Jlc291cmNlV2FybmluZycsJ1J1bnRpbWVFcnJvcicsJ1J1bnRpbWVXYXJuaW5nJywnU3RvcEl0ZXJhdGlvbicsJ1N5bnRheEVycm9yJywnU3ludGF4V2FybmluZycsJ1N5c3RlbUVycm9yJywnU3lzdGVtRXhpdCcsJ1RhYkVycm9yJywnVGltZW91dEVycm9yJywnVHJ1ZScsJ1R5cGVFcnJvcicsJ1VuYm91bmRMb2NhbEVycm9yJywnVW5pY29kZURlY29kZUVycm9yJywnVW5pY29kZUVuY29kZUVycm9yJywnVW5pY29kZUVycm9yJywnVW5pY29kZVRyYW5zbGF0ZUVycm9yJywnVW5pY29kZVdhcm5pbmcnLCdVc2VyV2FybmluZycsJ1ZhbHVlRXJyb3InLCdXYXJuaW5nJywnV2luZG93c0Vycm9yJywnWmVyb0RpdmlzaW9uRXJyb3InLCdfJywnX19idWlsZF9jbGFzc19fJywnX19kZWJ1Z19fJywnX19kb2NfXycsJ19faW1wb3J0X18nLCdfX25hbWVfXycsJ19fcGFja2FnZV9fJywnYWJzJywnYWxsJywnYW55JywnYXNjaWknLCdiaW4nLCdib29sJywnYnl0ZWFycmF5JywnYnl0ZXMnLCdjYWxsYWJsZScsJ2NocicsJ2NsYXNzbWV0aG9kJywnY29tcGlsZScsJ2NvbXBsZXgnLCdjb3B5cmlnaHQnLCdjcmVkaXRzJywnZGVsYXR0cicsJ2RpY3QnLCdkaXInLCdkaXZtb2QnLCdlbnVtZXJhdGUnLCdldmFsJywnZXhlYycsJ2V4aXQnLCdmaWx0ZXInLCdmbG9hdCcsJ2Zvcm1hdCcsJ2Zyb3plbnNldCcsJ2dldGF0dHInLCdnbG9iYWxzJywnaGFzYXR0cicsJ2hhc2gnLCdoZWxwJywnaGV4JywnaWQnLCdpbnB1dCcsJ2ludCcsJ2lzaW5zdGFuY2UnLCdpc3N1YmNsYXNzJywnaXRlcicsJ2xlbicsJ2xpY2Vuc2UnLCdsaXN0JywnbG9jYWxzJywnbWFwJywnbWF4JywnbWVtb3J5dmlldycsJ21pbicsJ25leHQnLCdvYmplY3QnLCdvY3QnLCdvcGVuJywnb3JkJywncG93JywncHJpbnQnLCdwcm9wZXJ0eScsJ3F1aXQnLCdyYW5nZScsJ3JlcHInLCdyZXZlcnNlZCcsJ3JvdW5kJywnc2V0Jywnc2V0YXR0cicsJ3NsaWNlJywnc29ydGVkJywnc3RhdGljbWV0aG9kJywnc3RyJywnc3VtJywnc3VwZXInLCd0dXBsZScsJ3R5cGUnLCd2YXJzJywnemlwJ107Zm9yKHZhciBpPTA7aTxidWlsdGluX25hbWVzLmxlbmd0aDtpKyspdHJ5e29ialtidWlsdGluX25hbWVzW2ldXT1ldmFsKGJ1aWx0aW5fbmFtZXNbaV0pO31jYXRjaChlcnIpe31yZXR1cm4gb2JqO30pKCk7',
'/libs/json.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmb3IodmFyICRweV9idWlsdGluIGluIF9fYnVpbHRpbnNfXylldmFsKCJ2YXIgIiskcHlfYnVpbHRpbisiPV9fYnVpbHRpbnNfX1skcHlfYnVpbHRpbl0iKTtmdW5jdGlvbiBfcHkob2JqKXtpZihvYmo9PT1udWxsKXJldHVybiBOb25lO2lmKGlzaW5zdGFuY2Uob2JqLGxpc3QpKXt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspcmVzLnB1c2goX3B5KG9ialtpXSkpO3JldHVybiByZXM7fWlmKG9iai5fX2NsYXNzX18hPT11bmRlZmluZWQpe2lmKG9iai5fX2NsYXNzX189PT1saXN0KWZvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspb2JqW2ldPV9weShvYmpbaV0pO3JldHVybiBvYmo7fWlmKHR5cGVvZiBvYmo9PT0nb2JqZWN0JyYmb2JqLl9fY2xhc3NfXz09PXVuZGVmaW5lZCl7dmFyIHJlcz1kaWN0KCk7Zm9yKHZhciBhdHRyIGluIG9iailnZXRhdHRyKHJlcywnX19zZXRpdGVtX18nKShhdHRyLF9weShvYmpbYXR0cl0pKTtyZXR1cm4gcmVzO31yZXR1cm4gX19CUllUSE9OX18uSlNPYmplY3Qob2JqKTt9ZnVuY3Rpb24gX2pzKG9iail7aWYoaXNpbnN0YW5jZShvYmosW2ludCxzdHJdKSlyZXR1cm4gb2JqO2Vsc2UgaWYob2JqPT09Tm9uZSlyZXR1cm4gbnVsbDtlbHNlIGlmKG9iaj09PVRydWUpcmV0dXJuIHRydWU7ZWxzZSBpZihvYmo9PT1GYWxzZSlyZXR1cm4gZmFsc2U7ZWxzZSBpZihpc2luc3RhbmNlKG9iaixmbG9hdCkpcmV0dXJuIG9iai52YWx1ZTtlbHNlIGlmKGlzaW5zdGFuY2Uob2JqLFtsaXN0LHR1cGxlXSkpe3ZhciByZXM9W107Zm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKylyZXMucHVzaChfanMob2JqW2ldKSk7cmV0dXJuIHJlczt9ZWxzZSBpZihpc2luc3RhbmNlKG9iaixkaWN0KSl7dmFyIHJlcz1uZXcgT2JqZWN0KCk7Zm9yKHZhciBpPTA7aTxvYmouJGtleXMubGVuZ3RoO2krKylyZXNbX2pzKG9iai4ka2V5c1tpXSldPV9qcyhvYmouJHZhbHVlc1tpXSk7cmV0dXJuIHJlczt9ZWxzZSB0aHJvdyBUeXBlRXJyb3Ioc3RyKG9iaikrJyBpcyBub3QgSlNPTiBzZXJpYWxpemFibGUnKTt9cmV0dXJue2xvYWRzOmZ1bmN0aW9uKGpzb25fb2JqKXtyZXR1cm4gX3B5KEpTT04ucGFyc2UoanNvbl9vYmopKTt9LGR1bXBzOmZ1bmN0aW9uKG9iail7cmV0dXJuIEpTT04uc3RyaW5naWZ5KF9qcyhvYmopKTt9fTt9KSgpOw==',
'/libs/__random.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewoKZm9yKHZhciAkcHlfYnVpbHRpbiBpbiBfX2J1aWx0aW5zX18pe2V2YWwoInZhciAiKyRweV9idWlsdGluKyI9X19idWlsdGluc19fWyRweV9idWlsdGluXSIpfQp2YXIgJEpTT2JqZWN0ID0gX19CUllUSE9OX18uJEpTT2JqZWN0CnZhciBKU09iamVjdCA9IF9fQlJZVEhPTl9fLkpTT2JqZWN0CgpyZXR1cm4gewogICAgdmFyIG9iaiA9IHsKICAgIGNob2ljZTpmdW5jdGlvbihzZXEpewogICAgICAgIHJldHVybiBnZXRhdHRyKHNlcSwnX19nZXRpdGVtX18nKShnZXRhdHRyKHNlcSwnX19sZW5fXycpKCkqTWF0aC5yYW5kb20oKSkKICAgIH0sCiAgICByYW5kb206ZnVuY3Rpb24oKXsKICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+IDApewogICAgICAgIHRocm93IFR5cGVFcnJvcigicmFuZG9tKCkgdGFrZXMgbm8gYXJndW1lbnRzICgiK2FyZ3VtZW50cy5sZW5ndGgrIiBnaXZlbikiKQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBmbG9hdChNYXRoLnJhbmRvbSgpKTsKICAgICAgfQogICAgfSwKICAgIHJhbmRpbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooYi1hKzEpK2EpKX0sCiAgICByYW5kcmFuZ2U6ZnVuY3Rpb24oc3RhcnQsc3RvcCxzdGVwKXsKICAgICAgaWYoc3RlcCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgc3RlcD0xOwogICAgICB9IGVsc2UgaWYoc3RlcCA9PSAwKSB7IAogICAgICAgIC8vcmFpc2UgVmFsdWVFcnJvcigiemVybyBzdGVwIGZvciByYW5kcmFuZ2UoKSIpOwogICAgICB9CgogICAgICBpZihzdG9wID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgc3RvcD1zdGFydDsKICAgICAgICAgc3RhcnQ9MDsKICAgICAgfQogICAgICB2YXIgd2lkdGg9c3RvcC1zdGFydDsKICAgICAgaWYgKHN0ZXA9PTEgJiYgd2lkdGggPiAwKSB7CiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp3aWR0aCkpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHJhaXNlIFZhbHVlRXJyb3IoImVtcHR5IHJhbmdlIGZvciByYW5kcmFuZ2UoKSAoIitzdGFydCsiLCIrc3RvcCsnLCcrc3RlcCsnKScpOwogICAgICB9CiAgICAgIAogICAgICB2YXIgbjsKICAgICAgaWYgKHN0ZXAgPiAwKSB7CiAgICAgICAgIG49TWF0aC5mbG9vcigod2lkdGgrc3RlcC0xKS9zdGVwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAgbj1NYXRoLmZsb29yKCh3aWR0aCtzdGVwKzEpL3N0ZXApOwogICAgICB9CiAgICAgIHJldHVybiBzdGFydCArIHN0ZXAqaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpuKSkKICAgICAgLy9yZXR1cm4gaW50KE1hdGgucmFuZG9tKCkqKHN0b3Avc3RlcC1zdGFydC9zdGVwKSpzdGVwICsgc3RhcnQpCiAgICB9LAogICAgc2h1ZmZsZTpmdW5jdGlvbih4LCBybmQpewogICAgICBpZiAoeC5sZW5ndGggPD0gMSkgeyByZXR1cm4geH0KCiAgICAgIGlmIChybmQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICBybmQ9TWF0aC5yYW5kb20KICAgICAgfQoKICAgICAgZm9yKHZhciBqLCBvLCBpID0geC5sZW5ndGg7IGk7IGogPSBwYXJzZUludChybmQoKSAqIGkpLCBvID0geFstLWldLCB4W2ldID0geFtqXSwgeFtqXSA9IG8pOwogICAgfQp9Cgp9KSgpCgo=',
'/libs/_timer.js':'JG1vZHVsZT17X19uYW1lX186J3RpbWVyJyxjbGVhcl9pbnRlcnZhbDpmdW5jdGlvbihpbnRfaWQpe3dpbmRvdy5jbGVhckludGVydmFsKGludF9pZCk7fSxjbGVhcl90aW1lb3V0OmZ1bmN0aW9uKHRpbWVvdXRfaWQpe3dpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dF9pZCk7fSxzZXRfaW50ZXJ2YWw6ZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7cmV0dXJuIF9fYnVpbHRpbnNfXy5pbnQod2luZG93LnNldEludGVydmFsKGZ1bmMsaW50ZXJ2YWwpKTt9LHNldF90aW1lb3V0OmZ1bmN0aW9uKGZ1bmMsaW50ZXJ2YWwpe3dpbmRvdy5zZXRUaW1lb3V0KGZ1bmMsaW50ZXJ2YWwpO30scmVxdWVzdF9hbmltYXRpb25fZnJhbWU6ZnVuY3Rpb24oZnVuYyl7cmV0dXJuIF9fYnVpbHRpbnNfXy5pbnQod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jKSk7fSxjYW5jZWxfYW5pbWF0aW9uX2ZyYW1lOmZ1bmN0aW9uKGludF9pZCl7d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGludF9pZCk7fX07',
'/libs/_svg.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmb3IodmFyICRweV9idWlsdGluIGluIF9fYnVpbHRpbnNfXylldmFsKCJ2YXIgIiskcHlfYnVpbHRpbisiPV9fYnVpbHRpbnNfX1skcHlfYnVpbHRpbl0iKTskc3ZnTlM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIjskeGxpbmtOUz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI7ZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXt2YXIgJGk9bnVsbDt2YXIgJG9iaj10aGlzO3ZhciBvYmo9X19CUllUSE9OX18uJERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCRzdmdOUyx0YWdfbmFtZSkpO2lmKGFyZ3MhPXVuZGVmaW5lZCYmYXJncy5sZW5ndGg+MCl7JHN0YXJ0PTA7JGZpcnN0PWFyZ3NbMF07aWYoJGZpcnN0Ll9fY2xhc3NfXyE9PSRLd0RpY3QpeyRzdGFydD0xO2lmKGlzaW5zdGFuY2UoJGZpcnN0LFtzdHIsaW50LGZsb2F0XSkpe3R4dD1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIoJGZpcnN0KSk7b2JqLmVsdC5hcHBlbmRDaGlsZCh0eHQpO31lbHNlIGlmKCRmaXJzdC5fX2NsYXNzX189PT0kVGFnU3VtRGljdClmb3IoJGk9MDskaTwkZmlyc3QuY2hpbGRyZW4ubGVuZ3RoOyRpKyspb2JqLmVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuY2hpbGRyZW5bJGldKTtlbHNlIHRyeXtvYmouZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5lbHQpO31jYXRjaChlcnIpeyRyYWlzZSgnVmFsdWVFcnJvcicsJ3dyb25nIGVsZW1lbnQgJyskZmlyc3QpO319Zm9yKCRpPSRzdGFydDskaTxhcmdzLmxlbmd0aDskaSsrKXskYXJnPWFyZ3NbJGldO2lmKCRhcmcmJiRhcmcuX19jbGFzc19fPT09JEt3RGljdClpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHIoMCwyKT09Im9uIilldmFsKCdfX0JSWVRIT05fXy5ET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKTtlbHNlIGlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpPT0ic3R5bGUiKV9fQlJZVEhPTl9fLkRPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKTtlbHNlIGlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoImhyZWYiKSE9PS0xKW9iai5lbHQuc2V0QXR0cmlidXRlTlMoImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiLCJocmVmIiwkYXJnLnZhbHVlKTtlbHNlIGlmKCRhcmcudmFsdWUhPT1mYWxzZSlvYmouZWx0LnNldEF0dHJpYnV0ZU5TKG51bGwsJGFyZy5uYW1lLnJlcGxhY2UoJ18nLCctJyksJGFyZy52YWx1ZSk7fX1yZXR1cm4gb2JqO312YXIgJHN2Z190YWdzPVsnYScsJ2FsdEdseXBoJywnYWx0R2x5cGhEZWYnLCdhbHRHbHlwaEl0ZW0nLCdhbmltYXRlJywnYW5pbWF0ZUNvbG9yJywnYW5pbWF0ZU1vdGlvbicsJ2FuaW1hdGVUcmFuc2Zvcm0nLCdjaXJjbGUnLCdjbGlwUGF0aCcsJ2NvbG9yX3Byb2ZpbGUnLCdjdXJzb3InLCdkZWZzJywnZGVzYycsJ2VsbGlwc2UnLCdmZUJsZW5kJywnZycsJ2ltYWdlJywnbGluZScsJ2xpbmVhckdyYWRpZW50JywnbWFya2VyJywnbWFzaycsJ3BhdGgnLCdwYXR0ZXJuJywncG9seWdvbicsJ3BvbHlsaW5lJywncmFkaWFsR3JhZGllbnQnLCdyZWN0Jywnc3RvcCcsJ3N2ZycsJ3RleHQnLCd0cmVmJywndHNwYW4nLCd1c2UnXTskc3ZnPWZ1bmN0aW9uKCl7cmV0dXJuICRTVkdUYWcoJ1gnLGFyZ3VtZW50cyk7fTskc3ZnKz0nJzt2YXIgb2JqPW5ldyBPYmplY3QoKTtmb3IodmFyIGk9MDtpPCRzdmdfdGFncy5sZW5ndGg7aSsrKXt2YXIgdGFnPSRzdmdfdGFnc1tpXTtldmFsKCdvYmouJyt0YWcrJz0nKyRzdmcucmVwbGFjZSgnWCcsdGFnKSk7fW9iai5fX2dldGF0dHJfXz1mdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXTt9O3JldHVybiBvYmo7fSkoKTs=',
'/libs/javascript.js':'JG1vZHVsZT17SlNPYmplY3Q6X19CUllUSE9OX18uSlNPYmplY3QsSlNDb25zdHJ1Y3RvcjpfX0JSWVRIT05fXy5KU0NvbnN0cnVjdG9yLGNvbnNvbGU6X19CUllUSE9OX18uSlNPYmplY3Qod2luZG93LmNvbnNvbGUpLGV4cG9zZTpmdW5jdGlvbihmdW5jKXt3aW5kb3dbZnVuYy5fX25hbWVfX109ZnVuYztyZXR1cm4gZnVuYzt9fTs=',
'/libs/zlib1.js':'LyoKdmFyIF96bGliPShmdW5jdGlvbigpIHsndXNlIHN0cmljdCc7ZnVuY3Rpb24gbChkKXt0aHJvdyBkO312YXIgdT12b2lkIDAseD0hMCxhYT10aGlzO2Z1bmN0aW9uIHooZCxhKXt2YXIgYz1kLnNwbGl0KCIuIiksZj1hYTshKGNbMF1pbiBmKSYmZi5leGVjU2NyaXB0JiZmLmV4ZWNTY3JpcHQoInZhciAiK2NbMF0pO2Zvcih2YXIgYjtjLmxlbmd0aCYmKGI9Yy5zaGlmdCgpKTspIWMubGVuZ3RoJiZhIT09dT9mW2JdPWE6Zj1mW2JdP2ZbYl06ZltiXT17fX07dmFyIEU9InVuZGVmaW5lZCIhPT10eXBlb2YgVWludDhBcnJheSYmInVuZGVmaW5lZCIhPT10eXBlb2YgVWludDE2QXJyYXkmJiJ1bmRlZmluZWQiIT09dHlwZW9mIFVpbnQzMkFycmF5O2Z1bmN0aW9uIEcoZCxhKXt0aGlzLmluZGV4PSJudW1iZXIiPT09dHlwZW9mIGE/YTowO3RoaXMuaT0wO3RoaXMuYnVmZmVyPWQgaW5zdGFuY2VvZihFP1VpbnQ4QXJyYXk6QXJyYXkpP2Q6bmV3IChFP1VpbnQ4QXJyYXk6QXJyYXkpKDMyNzY4KTsyKnRoaXMuYnVmZmVyLmxlbmd0aDw9dGhpcy5pbmRleCYmbChFcnJvcigiaW52YWxpZCBpbmRleCIpKTt0aGlzLmJ1ZmZlci5sZW5ndGg8PXRoaXMuaW5kZXgmJnRoaXMuZigpfUcucHJvdG90eXBlLmY9ZnVuY3Rpb24oKXt2YXIgZD10aGlzLmJ1ZmZlcixhLGM9ZC5sZW5ndGgsZj1uZXcgKEU/VWludDhBcnJheTpBcnJheSkoYzw8MSk7aWYoRSlmLnNldChkKTtlbHNlIGZvcihhPTA7YTxjOysrYSlmW2FdPWRbYV07cmV0dXJuIHRoaXMuYnVmZmVyPWZ9OwpHLnByb3RvdHlwZS5kPWZ1bmN0aW9uKGQsYSxjKXt2YXIgZj10aGlzLmJ1ZmZlcixiPXRoaXMuaW5kZXgsZT10aGlzLmksZz1mW2JdLGg7YyYmMTxhJiYoZD04PGE/KE5bZCYyNTVdPDwyNHxOW2Q+Pj44JjI1NV08PDE2fE5bZD4+PjE2JjI1NV08PDh8TltkPj4+MjQmMjU1XSk+PjMyLWE6TltkXT4+OC1hKTtpZig4PmErZSlnPWc8PGF8ZCxlKz1hO2Vsc2UgZm9yKGg9MDtoPGE7KytoKWc9Zzw8MXxkPj5hLWgtMSYxLDg9PT0rK2UmJihlPTAsZltiKytdPU5bZ10sZz0wLGI9PT1mLmxlbmd0aCYmKGY9dGhpcy5mKCkpKTtmW2JdPWc7dGhpcy5idWZmZXI9Zjt0aGlzLmk9ZTt0aGlzLmluZGV4PWJ9O0cucHJvdG90eXBlLmZpbmlzaD1mdW5jdGlvbigpe3ZhciBkPXRoaXMuYnVmZmVyLGE9dGhpcy5pbmRleCxjOzA8dGhpcy5pJiYoZFthXTw8PTgtdGhpcy5pLGRbYV09TltkW2FdXSxhKyspO0U/Yz1kLnN1YmFycmF5KDAsYSk6KGQubGVuZ3RoPWEsYz1kKTtyZXR1cm4gY307CnZhciBmYT1uZXcgKEU/VWludDhBcnJheTpBcnJheSkoMjU2KSxPO2ZvcihPPTA7MjU2Pk87KytPKXtmb3IodmFyIFA9TyxRPVAsZ2E9NyxQPVA+Pj4xO1A7UD4+Pj0xKVE8PD0xLFF8PVAmMSwtLWdhO2ZhW09dPShRPDxnYSYyNTUpPj4+MH12YXIgTj1mYTtmdW5jdGlvbiBoYShkKXt0aGlzLmJ1ZmZlcj1uZXcgKEU/VWludDE2QXJyYXk6QXJyYXkpKDIqZCk7dGhpcy5sZW5ndGg9MH1oYS5wcm90b3R5cGUuZ2V0UGFyZW50PWZ1bmN0aW9uKGQpe3JldHVybiAyKigoZC0yKS80fDApfTtoYS5wcm90b3R5cGUucHVzaD1mdW5jdGlvbihkLGEpe3ZhciBjLGYsYj10aGlzLmJ1ZmZlcixlO2M9dGhpcy5sZW5ndGg7Ylt0aGlzLmxlbmd0aCsrXT1hO2ZvcihiW3RoaXMubGVuZ3RoKytdPWQ7MDxjOylpZihmPXRoaXMuZ2V0UGFyZW50KGMpLGJbY10+YltmXSllPWJbY10sYltjXT1iW2ZdLGJbZl09ZSxlPWJbYysxXSxiW2MrMV09YltmKzFdLGJbZisxXT1lLGM9ZjtlbHNlIGJyZWFrO3JldHVybiB0aGlzLmxlbmd0aH07CmhhLnByb3RvdHlwZS5wb3A9ZnVuY3Rpb24oKXt2YXIgZCxhLGM9dGhpcy5idWZmZXIsZixiLGU7YT1jWzBdO2Q9Y1sxXTt0aGlzLmxlbmd0aC09MjtjWzBdPWNbdGhpcy5sZW5ndGhdO2NbMV09Y1t0aGlzLmxlbmd0aCsxXTtmb3IoZT0wOzspe2I9MiplKzI7aWYoYj49dGhpcy5sZW5ndGgpYnJlYWs7YisyPHRoaXMubGVuZ3RoJiZjW2IrMl0+Y1tiXSYmKGIrPTIpO2lmKGNbYl0+Y1tlXSlmPWNbZV0sY1tlXT1jW2JdLGNbYl09ZixmPWNbZSsxXSxjW2UrMV09Y1tiKzFdLGNbYisxXT1mO2Vsc2UgYnJlYWs7ZT1ifXJldHVybntpbmRleDpkLHZhbHVlOmEsbGVuZ3RoOnRoaXMubGVuZ3RofX07ZnVuY3Rpb24gUihkKXt2YXIgYT1kLmxlbmd0aCxjPTAsZj1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksYixlLGcsaCxrLG4scSxyLHA7Zm9yKHI9MDtyPGE7KytyKWRbcl0+YyYmKGM9ZFtyXSksZFtyXTxmJiYoZj1kW3JdKTtiPTE8PGM7ZT1uZXcgKEU/VWludDMyQXJyYXk6QXJyYXkpKGIpO2c9MTtoPTA7Zm9yKGs9MjtnPD1jOyl7Zm9yKHI9MDtyPGE7KytyKWlmKGRbcl09PT1nKXtuPTA7cT1oO2ZvcihwPTA7cDxnOysrcCluPW48PDF8cSYxLHE+Pj0xO2ZvcihwPW47cDxiO3ArPWspZVtwXT1nPDwxNnxyOysraH0rK2c7aDw8PTE7azw8PTF9cmV0dXJuW2UsYyxmXX07ZnVuY3Rpb24gaWEoZCxhKXt0aGlzLmg9bWE7dGhpcy53PTA7dGhpcy5pbnB1dD1FJiZkIGluc3RhbmNlb2YgQXJyYXk/bmV3IFVpbnQ4QXJyYXkoZCk6ZDt0aGlzLmI9MDthJiYoYS5sYXp5JiYodGhpcy53PWEubGF6eSksIm51bWJlciI9PT10eXBlb2YgYS5jb21wcmVzc2lvblR5cGUmJih0aGlzLmg9YS5jb21wcmVzc2lvblR5cGUpLGEub3V0cHV0QnVmZmVyJiYodGhpcy5hPUUmJmEub3V0cHV0QnVmZmVyIGluc3RhbmNlb2YgQXJyYXk/bmV3IFVpbnQ4QXJyYXkoYS5vdXRwdXRCdWZmZXIpOmEub3V0cHV0QnVmZmVyKSwibnVtYmVyIj09PXR5cGVvZiBhLm91dHB1dEluZGV4JiYodGhpcy5iPWEub3V0cHV0SW5kZXgpKTt0aGlzLmF8fCh0aGlzLmE9bmV3IChFP1VpbnQ4QXJyYXk6QXJyYXkpKDMyNzY4KSl9dmFyIG1hPTIsbmE9e05PTkU6MCxyOjEsazptYSxOOjN9LG9hPVtdLFM7CmZvcihTPTA7Mjg4PlM7UysrKXN3aXRjaCh4KXtjYXNlIDE0Mz49UzpvYS5wdXNoKFtTKzQ4LDhdKTticmVhaztjYXNlIDI1NT49UzpvYS5wdXNoKFtTLTE0NCs0MDAsOV0pO2JyZWFrO2Nhc2UgMjc5Pj1TOm9hLnB1c2goW1MtMjU2KzAsN10pO2JyZWFrO2Nhc2UgMjg3Pj1TOm9hLnB1c2goW1MtMjgwKzE5Miw4XSk7YnJlYWs7ZGVmYXVsdDpsKCJpbnZhbGlkIGxpdGVyYWw6ICIrUyl9CmlhLnByb3RvdHlwZS5qPWZ1bmN0aW9uKCl7dmFyIGQsYSxjLGYsYj10aGlzLmlucHV0O3N3aXRjaCh0aGlzLmgpe2Nhc2UgMDpjPTA7Zm9yKGY9Yi5sZW5ndGg7YzxmOyl7YT1FP2Iuc3ViYXJyYXkoYyxjKzY1NTM1KTpiLnNsaWNlKGMsYys2NTUzNSk7Yys9YS5sZW5ndGg7dmFyIGU9YSxnPWM9PT1mLGg9dSxrPXUsbj11LHE9dSxyPXUscD10aGlzLmEsbT10aGlzLmI7aWYoRSl7Zm9yKHA9bmV3IFVpbnQ4QXJyYXkodGhpcy5hLmJ1ZmZlcik7cC5sZW5ndGg8PW0rZS5sZW5ndGgrNTspcD1uZXcgVWludDhBcnJheShwLmxlbmd0aDw8MSk7cC5zZXQodGhpcy5hKX1oPWc/MTowO3BbbSsrXT1ofDA7az1lLmxlbmd0aDtuPX5rKzY1NTM2JjY1NTM1O3BbbSsrXT1rJjI1NTtwW20rK109az4+PjgmMjU1O3BbbSsrXT1uJjI1NTtwW20rK109bj4+PjgmMjU1O2lmKEUpcC5zZXQoZSxtKSxtKz1lLmxlbmd0aCxwPXAuc3ViYXJyYXkoMCxtKTtlbHNle3E9MDtmb3Iocj1lLmxlbmd0aDtxPHI7KytxKXBbbSsrXT0KZVtxXTtwLmxlbmd0aD1tfXRoaXMuYj1tO3RoaXMuYT1wfWJyZWFrO2Nhc2UgMTp2YXIgcz1uZXcgRyhFP25ldyBVaW50OEFycmF5KHRoaXMuYS5idWZmZXIpOnRoaXMuYSx0aGlzLmIpO3MuZCgxLDEseCk7cy5kKDEsMix4KTt2YXIgdz1wYSh0aGlzLGIpLHksamEsQjt5PTA7Zm9yKGphPXcubGVuZ3RoO3k8amE7eSsrKWlmKEI9d1t5XSxHLnByb3RvdHlwZS5kLmFwcGx5KHMsb2FbQl0pLDI1NjxCKXMuZCh3WysreV0sd1srK3ldLHgpLHMuZCh3WysreV0sNSkscy5kKHdbKyt5XSx3WysreV0seCk7ZWxzZSBpZigyNTY9PT1CKWJyZWFrO3RoaXMuYT1zLmZpbmlzaCgpO3RoaXMuYj10aGlzLmEubGVuZ3RoO2JyZWFrO2Nhc2UgbWE6dmFyIEQ9bmV3IEcoRT9uZXcgVWludDhBcnJheSh0aGlzLmEuYnVmZmVyKTp0aGlzLmEsdGhpcy5iKSxEYSxNLFUsVixXLGdiPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XSxiYSxFYSxjYSxGYSxrYSxyYT1BcnJheSgxOSksCkdhLFgsbGEsQSxIYTtEYT1tYTtELmQoMSwxLHgpO0QuZChEYSwyLHgpO009cGEodGhpcyxiKTtiYT1xYSh0aGlzLkwsMTUpO0VhPXNhKGJhKTtjYT1xYSh0aGlzLkssNyk7RmE9c2EoY2EpO2ZvcihVPTI4NjsyNTc8VSYmMD09PWJhW1UtMV07VS0tKTtmb3IoVj0zMDsxPFYmJjA9PT1jYVtWLTFdO1YtLSk7dmFyIElhPVUsSmE9VixJPW5ldyAoRT9VaW50MzJBcnJheTpBcnJheSkoSWErSmEpLHQsSix2LGRhLEg9bmV3IChFP1VpbnQzMkFycmF5OkFycmF5KSgzMTYpLEYsQyxLPW5ldyAoRT9VaW50OEFycmF5OkFycmF5KSgxOSk7Zm9yKHQ9Sj0wO3Q8SWE7dCsrKUlbSisrXT1iYVt0XTtmb3IodD0wO3Q8SmE7dCsrKUlbSisrXT1jYVt0XTtpZighRSl7dD0wO2ZvcihkYT1LLmxlbmd0aDt0PGRhOysrdClLW3RdPTB9dD1GPTA7Zm9yKGRhPUkubGVuZ3RoO3Q8ZGE7dCs9Sil7Zm9yKEo9MTt0K0o8ZGEmJklbdCtKXT09PUlbdF07KytKKTt2PUo7aWYoMD09PUlbdF0paWYoMz52KWZvcig7MDwKdi0tOylIW0YrK109MCxLWzBdKys7ZWxzZSBmb3IoOzA8djspQz0xMzg+dj92OjEzOCxDPnYtMyYmQzx2JiYoQz12LTMpLDEwPj1DPyhIW0YrK109MTcsSFtGKytdPUMtMyxLWzE3XSsrKTooSFtGKytdPTE4LEhbRisrXT1DLTExLEtbMThdKyspLHYtPUM7ZWxzZSBpZihIW0YrK109SVt0XSxLW0lbdF1dKyssdi0tLDM+dilmb3IoOzA8di0tOylIW0YrK109SVt0XSxLW0lbdF1dKys7ZWxzZSBmb3IoOzA8djspQz02PnY/djo2LEM+di0zJiZDPHYmJihDPXYtMyksSFtGKytdPTE2LEhbRisrXT1DLTMsS1sxNl0rKyx2LT1DfWQ9RT9ILnN1YmFycmF5KDAsRik6SC5zbGljZSgwLEYpO2thPXFhKEssNyk7Zm9yKEE9MDsxOT5BO0ErKylyYVtBXT1rYVtnYltBXV07Zm9yKFc9MTk7NDxXJiYwPT09cmFbVy0xXTtXLS0pO0dhPXNhKGthKTtELmQoVS0yNTcsNSx4KTtELmQoVi0xLDUseCk7RC5kKFctNCw0LHgpO2ZvcihBPTA7QTxXO0ErKylELmQocmFbQV0sMyx4KTtBPTA7Zm9yKEhhPWQubGVuZ3RoO0E8CkhhO0ErKylpZihYPWRbQV0sRC5kKEdhW1hdLGthW1hdLHgpLDE2PD1YKXtBKys7c3dpdGNoKFgpe2Nhc2UgMTY6bGE9MjticmVhaztjYXNlIDE3OmxhPTM7YnJlYWs7Y2FzZSAxODpsYT03O2JyZWFrO2RlZmF1bHQ6bCgiaW52YWxpZCBjb2RlOiAiK1gpfUQuZChkW0FdLGxhLHgpfXZhciBLYT1bRWEsYmFdLExhPVtGYSxjYV0sTCxNYSxlYSx1YSxOYSxPYSxQYSxRYTtOYT1LYVswXTtPYT1LYVsxXTtQYT1MYVswXTtRYT1MYVsxXTtMPTA7Zm9yKE1hPU0ubGVuZ3RoO0w8TWE7KytMKWlmKGVhPU1bTF0sRC5kKE5hW2VhXSxPYVtlYV0seCksMjU2PGVhKUQuZChNWysrTF0sTVsrK0xdLHgpLHVhPU1bKytMXSxELmQoUGFbdWFdLFFhW3VhXSx4KSxELmQoTVsrK0xdLE1bKytMXSx4KTtlbHNlIGlmKDI1Nj09PWVhKWJyZWFrO3RoaXMuYT1ELmZpbmlzaCgpO3RoaXMuYj10aGlzLmEubGVuZ3RoO2JyZWFrO2RlZmF1bHQ6bCgiaW52YWxpZCBjb21wcmVzc2lvbiB0eXBlIil9cmV0dXJuIHRoaXMuYX07CmZ1bmN0aW9uIHRhKGQsYSl7dGhpcy5sZW5ndGg9ZDt0aGlzLkc9YX0KdmFyIHZhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZChiKXtzd2l0Y2goeCl7Y2FzZSAzPT09YjpyZXR1cm5bMjU3LGItMywwXTtjYXNlIDQ9PT1iOnJldHVyblsyNTgsYi00LDBdO2Nhc2UgNT09PWI6cmV0dXJuWzI1OSxiLTUsMF07Y2FzZSA2PT09YjpyZXR1cm5bMjYwLGItNiwwXTtjYXNlIDc9PT1iOnJldHVyblsyNjEsYi03LDBdO2Nhc2UgOD09PWI6cmV0dXJuWzI2MixiLTgsMF07Y2FzZSA5PT09YjpyZXR1cm5bMjYzLGItOSwwXTtjYXNlIDEwPT09YjpyZXR1cm5bMjY0LGItMTAsMF07Y2FzZSAxMj49YjpyZXR1cm5bMjY1LGItMTEsMV07Y2FzZSAxND49YjpyZXR1cm5bMjY2LGItMTMsMV07Y2FzZSAxNj49YjpyZXR1cm5bMjY3LGItMTUsMV07Y2FzZSAxOD49YjpyZXR1cm5bMjY4LGItMTcsMV07Y2FzZSAyMj49YjpyZXR1cm5bMjY5LGItMTksMl07Y2FzZSAyNj49YjpyZXR1cm5bMjcwLGItMjMsMl07Y2FzZSAzMD49YjpyZXR1cm5bMjcxLGItMjcsMl07Y2FzZSAzND49YjpyZXR1cm5bMjcyLApiLTMxLDJdO2Nhc2UgNDI+PWI6cmV0dXJuWzI3MyxiLTM1LDNdO2Nhc2UgNTA+PWI6cmV0dXJuWzI3NCxiLTQzLDNdO2Nhc2UgNTg+PWI6cmV0dXJuWzI3NSxiLTUxLDNdO2Nhc2UgNjY+PWI6cmV0dXJuWzI3NixiLTU5LDNdO2Nhc2UgODI+PWI6cmV0dXJuWzI3NyxiLTY3LDRdO2Nhc2UgOTg+PWI6cmV0dXJuWzI3OCxiLTgzLDRdO2Nhc2UgMTE0Pj1iOnJldHVyblsyNzksYi05OSw0XTtjYXNlIDEzMD49YjpyZXR1cm5bMjgwLGItMTE1LDRdO2Nhc2UgMTYyPj1iOnJldHVyblsyODEsYi0xMzEsNV07Y2FzZSAxOTQ+PWI6cmV0dXJuWzI4MixiLTE2Myw1XTtjYXNlIDIyNj49YjpyZXR1cm5bMjgzLGItMTk1LDVdO2Nhc2UgMjU3Pj1iOnJldHVyblsyODQsYi0yMjcsNV07Y2FzZSAyNTg9PT1iOnJldHVyblsyODUsYi0yNTgsMF07ZGVmYXVsdDpsKCJpbnZhbGlkIGxlbmd0aDogIitiKX19dmFyIGE9W10sYyxmO2ZvcihjPTM7MjU4Pj1jO2MrKylmPWQoYyksYVtjXT1mWzJdPDwyNHxmWzFdPDwKMTZ8ZlswXTtyZXR1cm4gYX0oKSx3YT1FP25ldyBVaW50MzJBcnJheSh2YSk6dmE7CmZ1bmN0aW9uIHBhKGQsYSl7ZnVuY3Rpb24gYyhiLGMpe3ZhciBhPWIuRyxkPVtdLGU9MCxmO2Y9d2FbYi5sZW5ndGhdO2RbZSsrXT1mJjY1NTM1O2RbZSsrXT1mPj4xNiYyNTU7ZFtlKytdPWY+PjI0O3ZhciBnO3N3aXRjaCh4KXtjYXNlIDE9PT1hOmc9WzAsYS0xLDBdO2JyZWFrO2Nhc2UgMj09PWE6Zz1bMSxhLTIsMF07YnJlYWs7Y2FzZSAzPT09YTpnPVsyLGEtMywwXTticmVhaztjYXNlIDQ9PT1hOmc9WzMsYS00LDBdO2JyZWFrO2Nhc2UgNj49YTpnPVs0LGEtNSwxXTticmVhaztjYXNlIDg+PWE6Zz1bNSxhLTcsMV07YnJlYWs7Y2FzZSAxMj49YTpnPVs2LGEtOSwyXTticmVhaztjYXNlIDE2Pj1hOmc9WzcsYS0xMywyXTticmVhaztjYXNlIDI0Pj1hOmc9WzgsYS0xNywzXTticmVhaztjYXNlIDMyPj1hOmc9WzksYS0yNSwzXTticmVhaztjYXNlIDQ4Pj1hOmc9WzEwLGEtMzMsNF07YnJlYWs7Y2FzZSA2ND49YTpnPVsxMSxhLTQ5LDRdO2JyZWFrO2Nhc2UgOTY+PWE6Zz1bMTIsYS0KNjUsNV07YnJlYWs7Y2FzZSAxMjg+PWE6Zz1bMTMsYS05Nyw1XTticmVhaztjYXNlIDE5Mj49YTpnPVsxNCxhLTEyOSw2XTticmVhaztjYXNlIDI1Nj49YTpnPVsxNSxhLTE5Myw2XTticmVhaztjYXNlIDM4ND49YTpnPVsxNixhLTI1Nyw3XTticmVhaztjYXNlIDUxMj49YTpnPVsxNyxhLTM4NSw3XTticmVhaztjYXNlIDc2OD49YTpnPVsxOCxhLTUxMyw4XTticmVhaztjYXNlIDEwMjQ+PWE6Zz1bMTksYS03NjksOF07YnJlYWs7Y2FzZSAxNTM2Pj1hOmc9WzIwLGEtMTAyNSw5XTticmVhaztjYXNlIDIwNDg+PWE6Zz1bMjEsYS0xNTM3LDldO2JyZWFrO2Nhc2UgMzA3Mj49YTpnPVsyMixhLTIwNDksMTBdO2JyZWFrO2Nhc2UgNDA5Nj49YTpnPVsyMyxhLTMwNzMsMTBdO2JyZWFrO2Nhc2UgNjE0ND49YTpnPVsyNCxhLTQwOTcsMTFdO2JyZWFrO2Nhc2UgODE5Mj49YTpnPVsyNSxhLTYxNDUsMTFdO2JyZWFrO2Nhc2UgMTIyODg+PWE6Zz1bMjYsYS04MTkzLDEyXTticmVhaztjYXNlIDE2Mzg0Pj0KYTpnPVsyNyxhLTEyMjg5LDEyXTticmVhaztjYXNlIDI0NTc2Pj1hOmc9WzI4LGEtMTYzODUsMTNdO2JyZWFrO2Nhc2UgMzI3Njg+PWE6Zz1bMjksYS0yNDU3NywxM107YnJlYWs7ZGVmYXVsdDpsKCJpbnZhbGlkIGRpc3RhbmNlIil9Zj1nO2RbZSsrXT1mWzBdO2RbZSsrXT1mWzFdO2RbZSsrXT1mWzJdO3ZhciBoLGs7aD0wO2ZvcihrPWQubGVuZ3RoO2g8azsrK2gpcFttKytdPWRbaF07d1tkWzBdXSsrO3lbZFszXV0rKztzPWIubGVuZ3RoK2MtMTtyPW51bGx9dmFyIGYsYixlLGcsaCxrPXt9LG4scSxyLHA9RT9uZXcgVWludDE2QXJyYXkoMiphLmxlbmd0aCk6W10sbT0wLHM9MCx3PW5ldyAoRT9VaW50MzJBcnJheTpBcnJheSkoMjg2KSx5PW5ldyAoRT9VaW50MzJBcnJheTpBcnJheSkoMzApLGphPWQudyxCO2lmKCFFKXtmb3IoZT0wOzI4NT49ZTspd1tlKytdPTA7Zm9yKGU9MDsyOT49ZTspeVtlKytdPTB9d1syNTZdPTE7Zj0wO2ZvcihiPWEubGVuZ3RoO2Y8YjsrK2Ype2U9aD0wOwpmb3IoZz0zO2U8ZyYmZitlIT09YjsrK2UpaD1oPDw4fGFbZitlXTtrW2hdPT09dSYmKGtbaF09W10pO249a1toXTtpZighKDA8cy0tKSl7Zm9yKDswPG4ubGVuZ3RoJiYzMjc2ODxmLW5bMF07KW4uc2hpZnQoKTtpZihmKzM+PWIpe3ImJmMociwtMSk7ZT0wO2ZvcihnPWItZjtlPGc7KytlKUI9YVtmK2VdLHBbbSsrXT1CLCsrd1tCXTticmVha30wPG4ubGVuZ3RoPyhxPXhhKGEsZixuKSxyP3IubGVuZ3RoPHEubGVuZ3RoPyhCPWFbZi0xXSxwW20rK109QiwrK3dbQl0sYyhxLDApKTpjKHIsLTEpOnEubGVuZ3RoPGphP3I9cTpjKHEsMCkpOnI/YyhyLC0xKTooQj1hW2ZdLHBbbSsrXT1CLCsrd1tCXSl9bi5wdXNoKGYpfXBbbSsrXT0yNTY7d1syNTZdKys7ZC5MPXc7ZC5LPXk7cmV0dXJuIEU/cC5zdWJhcnJheSgwLG0pOnB9CmZ1bmN0aW9uIHhhKGQsYSxjKXt2YXIgZixiLGU9MCxnLGgsayxuLHE9ZC5sZW5ndGg7aD0wO249Yy5sZW5ndGg7YTpmb3IoO2g8bjtoKyspe2Y9Y1tuLWgtMV07Zz0zO2lmKDM8ZSl7Zm9yKGs9ZTszPGs7ay0tKWlmKGRbZitrLTFdIT09ZFthK2stMV0pY29udGludWUgYTtnPWV9Zm9yKDsyNTg+ZyYmYStnPHEmJmRbZitnXT09PWRbYStnXTspKytnO2c+ZSYmKGI9ZixlPWcpO2lmKDI1OD09PWcpYnJlYWt9cmV0dXJuIG5ldyB0YShlLGEtYil9CmZ1bmN0aW9uIHFhKGQsYSl7dmFyIGM9ZC5sZW5ndGgsZj1uZXcgaGEoNTcyKSxiPW5ldyAoRT9VaW50OEFycmF5OkFycmF5KShjKSxlLGcsaCxrLG47aWYoIUUpZm9yKGs9MDtrPGM7aysrKWJba109MDtmb3Ioaz0wO2s8YzsrK2spMDxkW2tdJiZmLnB1c2goayxkW2tdKTtlPUFycmF5KGYubGVuZ3RoLzIpO2c9bmV3IChFP1VpbnQzMkFycmF5OkFycmF5KShmLmxlbmd0aC8yKTtpZigxPT09ZS5sZW5ndGgpcmV0dXJuIGJbZi5wb3AoKS5pbmRleF09MSxiO2s9MDtmb3Iobj1mLmxlbmd0aC8yO2s8bjsrK2spZVtrXT1mLnBvcCgpLGdba109ZVtrXS52YWx1ZTtoPXlhKGcsZy5sZW5ndGgsYSk7az0wO2ZvcihuPWUubGVuZ3RoO2s8bjsrK2spYltlW2tdLmluZGV4XT1oW2tdO3JldHVybiBifQpmdW5jdGlvbiB5YShkLGEsYyl7ZnVuY3Rpb24gZihiKXt2YXIgYz1rW2JdW25bYl1dO2M9PT1hPyhmKGIrMSksZihiKzEpKTotLWdbY107KytuW2JdfXZhciBiPW5ldyAoRT9VaW50MTZBcnJheTpBcnJheSkoYyksZT1uZXcgKEU/VWludDhBcnJheTpBcnJheSkoYyksZz1uZXcgKEU/VWludDhBcnJheTpBcnJheSkoYSksaD1BcnJheShjKSxrPUFycmF5KGMpLG49QXJyYXkoYykscT0oMTw8YyktYSxyPTE8PGMtMSxwLG0scyx3LHk7YltjLTFdPWE7Zm9yKG09MDttPGM7KyttKXE8cj9lW21dPTA6KGVbbV09MSxxLT1yKSxxPDw9MSxiW2MtMi1tXT0oYltjLTEtbV0vMnwwKSthO2JbMF09ZVswXTtoWzBdPUFycmF5KGJbMF0pO2tbMF09QXJyYXkoYlswXSk7Zm9yKG09MTttPGM7KyttKWJbbV0+MipiW20tMV0rZVttXSYmKGJbbV09MipiW20tMV0rZVttXSksaFttXT1BcnJheShiW21dKSxrW21dPUFycmF5KGJbbV0pO2ZvcihwPTA7cDxhOysrcClnW3BdPWM7Zm9yKHM9MDtzPGJbYy0xXTsrK3MpaFtjLQoxXVtzXT1kW3NdLGtbYy0xXVtzXT1zO2ZvcihwPTA7cDxjOysrcCluW3BdPTA7MT09PWVbYy0xXSYmKC0tZ1swXSwrK25bYy0xXSk7Zm9yKG09Yy0yOzA8PW07LS1tKXt3PXA9MDt5PW5bbSsxXTtmb3Iocz0wO3M8YlttXTtzKyspdz1oW20rMV1beV0raFttKzFdW3krMV0sdz5kW3BdPyhoW21dW3NdPXcsa1ttXVtzXT1hLHkrPTIpOihoW21dW3NdPWRbcF0sa1ttXVtzXT1wLCsrcCk7blttXT0wOzE9PT1lW21dJiZmKG0pfXJldHVybiBnfQpmdW5jdGlvbiBzYShkKXt2YXIgYT1uZXcgKEU/VWludDE2QXJyYXk6QXJyYXkpKGQubGVuZ3RoKSxjPVtdLGY9W10sYj0wLGUsZyxoLGs7ZT0wO2ZvcihnPWQubGVuZ3RoO2U8ZztlKyspY1tkW2VdXT0oY1tkW2VdXXwwKSsxO2U9MTtmb3IoZz0xNjtlPD1nO2UrKylmW2VdPWIsYis9Y1tlXXwwLGI8PD0xO2U9MDtmb3IoZz1kLmxlbmd0aDtlPGc7ZSsrKXtiPWZbZFtlXV07ZltkW2VdXSs9MTtoPWFbZV09MDtmb3Ioaz1kW2VdO2g8aztoKyspYVtlXT1hW2VdPDwxfGImMSxiPj4+PTF9cmV0dXJuIGF9O2Z1bmN0aW9uIFQoZCxhKXt0aGlzLmw9W107dGhpcy5tPTMyNzY4O3RoaXMuZT10aGlzLmc9dGhpcy5jPXRoaXMucT0wO3RoaXMuaW5wdXQ9RT9uZXcgVWludDhBcnJheShkKTpkO3RoaXMucz0hMTt0aGlzLm49emE7dGhpcy5CPSExO2lmKGF8fCEoYT17fSkpYS5pbmRleCYmKHRoaXMuYz1hLmluZGV4KSxhLmJ1ZmZlclNpemUmJih0aGlzLm09YS5idWZmZXJTaXplKSxhLmJ1ZmZlclR5cGUmJih0aGlzLm49YS5idWZmZXJUeXBlKSxhLnJlc2l6ZSYmKHRoaXMuQj1hLnJlc2l6ZSk7c3dpdGNoKHRoaXMubil7Y2FzZSBBYTp0aGlzLmI9MzI3Njg7dGhpcy5hPW5ldyAoRT9VaW50OEFycmF5OkFycmF5KSgzMjc2OCt0aGlzLm0rMjU4KTticmVhaztjYXNlIHphOnRoaXMuYj0wO3RoaXMuYT1uZXcgKEU/VWludDhBcnJheTpBcnJheSkodGhpcy5tKTt0aGlzLmY9dGhpcy5KO3RoaXMudD10aGlzLkg7dGhpcy5vPXRoaXMuSTticmVhaztkZWZhdWx0OmwoRXJyb3IoImludmFsaWQgaW5mbGF0ZSBtb2RlIikpfX0KdmFyIEFhPTAsemE9MSxCYT17RDpBYSxDOnphfTsKVC5wcm90b3R5cGUucD1mdW5jdGlvbigpe2Zvcig7IXRoaXMuczspe3ZhciBkPVkodGhpcywzKTtkJjEmJih0aGlzLnM9eCk7ZD4+Pj0xO3N3aXRjaChkKXtjYXNlIDA6dmFyIGE9dGhpcy5pbnB1dCxjPXRoaXMuYyxmPXRoaXMuYSxiPXRoaXMuYixlPXUsZz11LGg9dSxrPWYubGVuZ3RoLG49dTt0aGlzLmU9dGhpcy5nPTA7ZT1hW2MrK107ZT09PXUmJmwoRXJyb3IoImludmFsaWQgdW5jb21wcmVzc2VkIGJsb2NrIGhlYWRlcjogTEVOIChmaXJzdCBieXRlKSIpKTtnPWU7ZT1hW2MrK107ZT09PXUmJmwoRXJyb3IoImludmFsaWQgdW5jb21wcmVzc2VkIGJsb2NrIGhlYWRlcjogTEVOIChzZWNvbmQgYnl0ZSkiKSk7Z3w9ZTw8ODtlPWFbYysrXTtlPT09dSYmbChFcnJvcigiaW52YWxpZCB1bmNvbXByZXNzZWQgYmxvY2sgaGVhZGVyOiBOTEVOIChmaXJzdCBieXRlKSIpKTtoPWU7ZT1hW2MrK107ZT09PXUmJmwoRXJyb3IoImludmFsaWQgdW5jb21wcmVzc2VkIGJsb2NrIGhlYWRlcjogTkxFTiAoc2Vjb25kIGJ5dGUpIikpO2h8PQplPDw4O2c9PT1+aCYmbChFcnJvcigiaW52YWxpZCB1bmNvbXByZXNzZWQgYmxvY2sgaGVhZGVyOiBsZW5ndGggdmVyaWZ5IikpO2MrZz5hLmxlbmd0aCYmbChFcnJvcigiaW5wdXQgYnVmZmVyIGlzIGJyb2tlbiIpKTtzd2l0Y2godGhpcy5uKXtjYXNlIEFhOmZvcig7YitnPmYubGVuZ3RoOyl7bj1rLWI7Zy09bjtpZihFKWYuc2V0KGEuc3ViYXJyYXkoYyxjK24pLGIpLGIrPW4sYys9bjtlbHNlIGZvcig7bi0tOylmW2IrK109YVtjKytdO3RoaXMuYj1iO2Y9dGhpcy5mKCk7Yj10aGlzLmJ9YnJlYWs7Y2FzZSB6YTpmb3IoO2IrZz5mLmxlbmd0aDspZj10aGlzLmYoe3Y6Mn0pO2JyZWFrO2RlZmF1bHQ6bChFcnJvcigiaW52YWxpZCBpbmZsYXRlIG1vZGUiKSl9aWYoRSlmLnNldChhLnN1YmFycmF5KGMsYytnKSxiKSxiKz1nLGMrPWc7ZWxzZSBmb3IoO2ctLTspZltiKytdPWFbYysrXTt0aGlzLmM9Yzt0aGlzLmI9Yjt0aGlzLmE9ZjticmVhaztjYXNlIDE6dGhpcy5vKENhLFJhKTticmVhazsKY2FzZSAyOlNhKHRoaXMpO2JyZWFrO2RlZmF1bHQ6bChFcnJvcigidW5rbm93biBCVFlQRTogIitkKSl9fXJldHVybiB0aGlzLnQoKX07CnZhciBUYT1bMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV0sVWE9RT9uZXcgVWludDE2QXJyYXkoVGEpOlRhLFZhPVszLDQsNSw2LDcsOCw5LDEwLDExLDEzLDE1LDE3LDE5LDIzLDI3LDMxLDM1LDQzLDUxLDU5LDY3LDgzLDk5LDExNSwxMzEsMTYzLDE5NSwyMjcsMjU4LDI1OCwyNThdLFdhPUU/bmV3IFVpbnQxNkFycmF5KFZhKTpWYSxYYT1bMCwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMiwyLDIsMiwzLDMsMywzLDQsNCw0LDQsNSw1LDUsNSwwLDAsMF0sWWE9RT9uZXcgVWludDhBcnJheShYYSk6WGEsWmE9WzEsMiwzLDQsNSw3LDksMTMsMTcsMjUsMzMsNDksNjUsOTcsMTI5LDE5MywyNTcsMzg1LDUxMyw3NjksMTAyNSwxNTM3LDIwNDksMzA3Myw0MDk3LDYxNDUsODE5MywxMjI4OSwxNjM4NSwyNDU3N10sJGE9RT9uZXcgVWludDE2QXJyYXkoWmEpOlphLGFiPVswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLAoxMCwxMSwxMSwxMiwxMiwxMywxM10sYmI9RT9uZXcgVWludDhBcnJheShhYik6YWIsY2I9bmV3IChFP1VpbnQ4QXJyYXk6QXJyYXkpKDI4OCksWixkYjtaPTA7Zm9yKGRiPWNiLmxlbmd0aDtaPGRiOysrWiljYltaXT0xNDM+PVo/ODoyNTU+PVo/OToyNzk+PVo/Nzo4O3ZhciBDYT1SKGNiKSxlYj1uZXcgKEU/VWludDhBcnJheTpBcnJheSkoMzApLGZiLGhiO2ZiPTA7Zm9yKGhiPWViLmxlbmd0aDtmYjxoYjsrK2ZiKWViW2ZiXT01O3ZhciBSYT1SKGViKTtmdW5jdGlvbiBZKGQsYSl7Zm9yKHZhciBjPWQuZyxmPWQuZSxiPWQuaW5wdXQsZT1kLmMsZztmPGE7KWc9YltlKytdLGc9PT11JiZsKEVycm9yKCJpbnB1dCBidWZmZXIgaXMgYnJva2VuIikpLGN8PWc8PGYsZis9ODtnPWMmKDE8PGEpLTE7ZC5nPWM+Pj5hO2QuZT1mLWE7ZC5jPWU7cmV0dXJuIGd9CmZ1bmN0aW9uIGliKGQsYSl7Zm9yKHZhciBjPWQuZyxmPWQuZSxiPWQuaW5wdXQsZT1kLmMsZz1hWzBdLGg9YVsxXSxrLG4scTtmPGg7KXtrPWJbZSsrXTtpZihrPT09dSlicmVhaztjfD1rPDxmO2YrPTh9bj1nW2MmKDE8PGgpLTFdO3E9bj4+PjE2O2QuZz1jPj5xO2QuZT1mLXE7ZC5jPWU7cmV0dXJuIG4mNjU1MzV9CmZ1bmN0aW9uIFNhKGQpe2Z1bmN0aW9uIGEoYSxiLGMpe3ZhciBkLGYsZSxnO2ZvcihnPTA7ZzxhOylzd2l0Y2goZD1pYih0aGlzLGIpLGQpe2Nhc2UgMTY6Zm9yKGU9MytZKHRoaXMsMik7ZS0tOyljW2crK109ZjticmVhaztjYXNlIDE3OmZvcihlPTMrWSh0aGlzLDMpO2UtLTspY1tnKytdPTA7Zj0wO2JyZWFrO2Nhc2UgMTg6Zm9yKGU9MTErWSh0aGlzLDcpO2UtLTspY1tnKytdPTA7Zj0wO2JyZWFrO2RlZmF1bHQ6Zj1jW2crK109ZH1yZXR1cm4gY312YXIgYz1ZKGQsNSkrMjU3LGY9WShkLDUpKzEsYj1ZKGQsNCkrNCxlPW5ldyAoRT9VaW50OEFycmF5OkFycmF5KShVYS5sZW5ndGgpLGcsaCxrLG47Zm9yKG49MDtuPGI7KytuKWVbVWFbbl1dPVkoZCwzKTtnPVIoZSk7aD1uZXcgKEU/VWludDhBcnJheTpBcnJheSkoYyk7az1uZXcgKEU/VWludDhBcnJheTpBcnJheSkoZik7ZC5vKFIoYS5jYWxsKGQsYyxnLGgpKSxSKGEuY2FsbChkLGYsZyxrKSkpfQpULnByb3RvdHlwZS5vPWZ1bmN0aW9uKGQsYSl7dmFyIGM9dGhpcy5hLGY9dGhpcy5iO3RoaXMudT1kO2Zvcih2YXIgYj1jLmxlbmd0aC0yNTgsZSxnLGgsazsyNTYhPT0oZT1pYih0aGlzLGQpKTspaWYoMjU2PmUpZj49YiYmKHRoaXMuYj1mLGM9dGhpcy5mKCksZj10aGlzLmIpLGNbZisrXT1lO2Vsc2V7Zz1lLTI1NztrPVdhW2ddOzA8WWFbZ10mJihrKz1ZKHRoaXMsWWFbZ10pKTtlPWliKHRoaXMsYSk7aD0kYVtlXTswPGJiW2VdJiYoaCs9WSh0aGlzLGJiW2VdKSk7Zj49YiYmKHRoaXMuYj1mLGM9dGhpcy5mKCksZj10aGlzLmIpO2Zvcig7ay0tOyljW2ZdPWNbZisrLWhdfWZvcig7ODw9dGhpcy5lOyl0aGlzLmUtPTgsdGhpcy5jLS07dGhpcy5iPWZ9OwpULnByb3RvdHlwZS5JPWZ1bmN0aW9uKGQsYSl7dmFyIGM9dGhpcy5hLGY9dGhpcy5iO3RoaXMudT1kO2Zvcih2YXIgYj1jLmxlbmd0aCxlLGcsaCxrOzI1NiE9PShlPWliKHRoaXMsZCkpOylpZigyNTY+ZSlmPj1iJiYoYz10aGlzLmYoKSxiPWMubGVuZ3RoKSxjW2YrK109ZTtlbHNle2c9ZS0yNTc7az1XYVtnXTswPFlhW2ddJiYoays9WSh0aGlzLFlhW2ddKSk7ZT1pYih0aGlzLGEpO2g9JGFbZV07MDxiYltlXSYmKGgrPVkodGhpcyxiYltlXSkpO2Yraz5iJiYoYz10aGlzLmYoKSxiPWMubGVuZ3RoKTtmb3IoO2stLTspY1tmXT1jW2YrKy1oXX1mb3IoOzg8PXRoaXMuZTspdGhpcy5lLT04LHRoaXMuYy0tO3RoaXMuYj1mfTsKVC5wcm90b3R5cGUuZj1mdW5jdGlvbigpe3ZhciBkPW5ldyAoRT9VaW50OEFycmF5OkFycmF5KSh0aGlzLmItMzI3NjgpLGE9dGhpcy5iLTMyNzY4LGMsZixiPXRoaXMuYTtpZihFKWQuc2V0KGIuc3ViYXJyYXkoMzI3NjgsZC5sZW5ndGgpKTtlbHNle2M9MDtmb3IoZj1kLmxlbmd0aDtjPGY7KytjKWRbY109YltjKzMyNzY4XX10aGlzLmwucHVzaChkKTt0aGlzLnErPWQubGVuZ3RoO2lmKEUpYi5zZXQoYi5zdWJhcnJheShhLGErMzI3NjgpKTtlbHNlIGZvcihjPTA7MzI3Njg+YzsrK2MpYltjXT1iW2ErY107dGhpcy5iPTMyNzY4O3JldHVybiBifTsKVC5wcm90b3R5cGUuSj1mdW5jdGlvbihkKXt2YXIgYSxjPXRoaXMuaW5wdXQubGVuZ3RoL3RoaXMuYysxfDAsZixiLGUsZz10aGlzLmlucHV0LGg9dGhpcy5hO2QmJigibnVtYmVyIj09PXR5cGVvZiBkLnYmJihjPWQudiksIm51bWJlciI9PT10eXBlb2YgZC5GJiYoYys9ZC5GKSk7Mj5jPyhmPShnLmxlbmd0aC10aGlzLmMpL3RoaXMudVsyXSxlPTI1OCooZi8yKXwwLGI9ZTxoLmxlbmd0aD9oLmxlbmd0aCtlOmgubGVuZ3RoPDwxKTpiPWgubGVuZ3RoKmM7RT8oYT1uZXcgVWludDhBcnJheShiKSxhLnNldChoKSk6YT1oO3JldHVybiB0aGlzLmE9YX07ClQucHJvdG90eXBlLnQ9ZnVuY3Rpb24oKXt2YXIgZD0wLGE9dGhpcy5hLGM9dGhpcy5sLGYsYj1uZXcgKEU/VWludDhBcnJheTpBcnJheSkodGhpcy5xKyh0aGlzLmItMzI3NjgpKSxlLGcsaCxrO2lmKDA9PT1jLmxlbmd0aClyZXR1cm4gRT90aGlzLmEuc3ViYXJyYXkoMzI3NjgsdGhpcy5iKTp0aGlzLmEuc2xpY2UoMzI3NjgsdGhpcy5iKTtlPTA7Zm9yKGc9Yy5sZW5ndGg7ZTxnOysrZSl7Zj1jW2VdO2g9MDtmb3Ioaz1mLmxlbmd0aDtoPGs7KytoKWJbZCsrXT1mW2hdfWU9MzI3Njg7Zm9yKGc9dGhpcy5iO2U8ZzsrK2UpYltkKytdPWFbZV07dGhpcy5sPVtdO3JldHVybiB0aGlzLmJ1ZmZlcj1ifTsKVC5wcm90b3R5cGUuSD1mdW5jdGlvbigpe3ZhciBkLGE9dGhpcy5iO0U/dGhpcy5CPyhkPW5ldyBVaW50OEFycmF5KGEpLGQuc2V0KHRoaXMuYS5zdWJhcnJheSgwLGEpKSk6ZD10aGlzLmEuc3ViYXJyYXkoMCxhKToodGhpcy5hLmxlbmd0aD5hJiYodGhpcy5hLmxlbmd0aD1hKSxkPXRoaXMuYSk7cmV0dXJuIHRoaXMuYnVmZmVyPWR9O2Z1bmN0aW9uIGpiKGQpe2lmKCJzdHJpbmciPT09dHlwZW9mIGQpe3ZhciBhPWQuc3BsaXQoIiIpLGMsZjtjPTA7Zm9yKGY9YS5sZW5ndGg7YzxmO2MrKylhW2NdPShhW2NdLmNoYXJDb2RlQXQoMCkmMjU1KT4+PjA7ZD1hfWZvcih2YXIgYj0xLGU9MCxnPWQubGVuZ3RoLGgsaz0wOzA8Zzspe2g9MTAyNDxnPzEwMjQ6ZztnLT1oO2RvIGIrPWRbaysrXSxlKz1iO3doaWxlKC0taCk7YiU9NjU1MjE7ZSU9NjU1MjF9cmV0dXJuKGU8PDE2fGIpPj4+MH07ZnVuY3Rpb24ga2IoZCxhKXt2YXIgYyxmO3RoaXMuaW5wdXQ9ZDt0aGlzLmM9MDtpZihhfHwhKGE9e30pKWEuaW5kZXgmJih0aGlzLmM9YS5pbmRleCksYS52ZXJpZnkmJih0aGlzLk09YS52ZXJpZnkpO2M9ZFt0aGlzLmMrK107Zj1kW3RoaXMuYysrXTtzd2l0Y2goYyYxNSl7Y2FzZSBsYjp0aGlzLm1ldGhvZD1sYjticmVhaztkZWZhdWx0OmwoRXJyb3IoInVuc3VwcG9ydGVkIGNvbXByZXNzaW9uIG1ldGhvZCIpKX0wIT09KChjPDw4KStmKSUzMSYmbChFcnJvcigiaW52YWxpZCBmY2hlY2sgZmxhZzoiKygoYzw8OCkrZiklMzEpKTtmJjMyJiZsKEVycm9yKCJmZGljdCBmbGFnIGlzIG5vdCBzdXBwb3J0ZWQiKSk7dGhpcy5BPW5ldyBUKGQse2luZGV4OnRoaXMuYyxidWZmZXJTaXplOmEuYnVmZmVyU2l6ZSxidWZmZXJUeXBlOmEuYnVmZmVyVHlwZSxyZXNpemU6YS5yZXNpemV9KX0Ka2IucHJvdG90eXBlLnA9ZnVuY3Rpb24oKXt2YXIgZD10aGlzLmlucHV0LGEsYzthPXRoaXMuQS5wKCk7dGhpcy5jPXRoaXMuQS5jO3RoaXMuTSYmKGM9KGRbdGhpcy5jKytdPDwyNHxkW3RoaXMuYysrXTw8MTZ8ZFt0aGlzLmMrK108PDh8ZFt0aGlzLmMrK10pPj4+MCxjIT09amIoYSkmJmwoRXJyb3IoImludmFsaWQgYWRsZXItMzIgY2hlY2tzdW0iKSkpO3JldHVybiBhfTt2YXIgbGI9ODtmdW5jdGlvbiBtYihkLGEpe3RoaXMuaW5wdXQ9ZDt0aGlzLmE9bmV3IChFP1VpbnQ4QXJyYXk6QXJyYXkpKDMyNzY4KTt0aGlzLmg9JC5rO3ZhciBjPXt9LGY7aWYoKGF8fCEoYT17fSkpJiYibnVtYmVyIj09PXR5cGVvZiBhLmNvbXByZXNzaW9uVHlwZSl0aGlzLmg9YS5jb21wcmVzc2lvblR5cGU7Zm9yKGYgaW4gYSljW2ZdPWFbZl07Yy5vdXRwdXRCdWZmZXI9dGhpcy5hO3RoaXMuej1uZXcgaWEodGhpcy5pbnB1dCxjKX12YXIgJD1uYTsKbWIucHJvdG90eXBlLmo9ZnVuY3Rpb24oKXt2YXIgZCxhLGMsZixiLGUsZyxoPTA7Zz10aGlzLmE7ZD1sYjtzd2l0Y2goZCl7Y2FzZSBsYjphPU1hdGguTE9HMkUqTWF0aC5sb2coMzI3NjgpLTg7YnJlYWs7ZGVmYXVsdDpsKEVycm9yKCJpbnZhbGlkIGNvbXByZXNzaW9uIG1ldGhvZCIpKX1jPWE8PDR8ZDtnW2grK109Yztzd2l0Y2goZCl7Y2FzZSBsYjpzd2l0Y2godGhpcy5oKXtjYXNlICQuTk9ORTpiPTA7YnJlYWs7Y2FzZSAkLnI6Yj0xO2JyZWFrO2Nhc2UgJC5rOmI9MjticmVhaztkZWZhdWx0OmwoRXJyb3IoInVuc3VwcG9ydGVkIGNvbXByZXNzaW9uIHR5cGUiKSl9YnJlYWs7ZGVmYXVsdDpsKEVycm9yKCJpbnZhbGlkIGNvbXByZXNzaW9uIG1ldGhvZCIpKX1mPWI8PDZ8MDtnW2grK109ZnwzMS0oMjU2KmMrZiklMzE7ZT1qYih0aGlzLmlucHV0KTt0aGlzLnouYj1oO2c9dGhpcy56LmooKTtoPWcubGVuZ3RoO0UmJihnPW5ldyBVaW50OEFycmF5KGcuYnVmZmVyKSxnLmxlbmd0aDw9CmgrNCYmKHRoaXMuYT1uZXcgVWludDhBcnJheShnLmxlbmd0aCs0KSx0aGlzLmEuc2V0KGcpLGc9dGhpcy5hKSxnPWcuc3ViYXJyYXkoMCxoKzQpKTtnW2grK109ZT4+MjQmMjU1O2dbaCsrXT1lPj4xNiYyNTU7Z1toKytdPWU+PjgmMjU1O2dbaCsrXT1lJjI1NTtyZXR1cm4gZ307ZnVuY3Rpb24gbmIoZCxhKXt2YXIgYyxmLGIsZTtpZihPYmplY3Qua2V5cyljPU9iamVjdC5rZXlzKGEpO2Vsc2UgZm9yKGYgaW4gYz1bXSxiPTAsYSljW2IrK109ZjtiPTA7Zm9yKGU9Yy5sZW5ndGg7YjxlOysrYilmPWNbYl0seihkKyIuIitmLGFbZl0pfTt6KCJabGliLkluZmxhdGUiLGtiKTt6KCJabGliLkluZmxhdGUucHJvdG90eXBlLmRlY29tcHJlc3MiLGtiLnByb3RvdHlwZS5wKTtuYigiWmxpYi5JbmZsYXRlLkJ1ZmZlclR5cGUiLHtBREFQVElWRTpCYS5DLEJMT0NLOkJhLkR9KTt6KCJabGliLkRlZmxhdGUiLG1iKTt6KCJabGliLkRlZmxhdGUuY29tcHJlc3MiLGZ1bmN0aW9uKGQsYSl7cmV0dXJuKG5ldyBtYihkLGEpKS5qKCl9KTt6KCJabGliLkRlZmxhdGUucHJvdG90eXBlLmNvbXByZXNzIixtYi5wcm90b3R5cGUuaik7bmIoIlpsaWIuRGVmbGF0ZS5Db21wcmVzc2lvblR5cGUiLHtOT05FOiQuTk9ORSxGSVhFRDokLnIsRFlOQU1JQzokLmt9KTt9KS5jYWxsKHRoaXMpOwoqLwoKJG1vZHVsZSA9IHsKCi8qKiBAbGljZW5zZSB6bGliLmpzIDIwMTIgLSBpbWF5YSBbIGh0dHBzOi8vZ2l0aHViLmNvbS9pbWF5YS96bGliLmpzIF0gVGhlIE1JVCBMaWNlbnNlICovCgoKZGVjb21wcmVzcz0gZnVuY3Rpb24gKGRhdGEpIHsKICAgdmFyIF9pbmZsYXRlID0gbmV3IF96bGliLkluZmxhdGUoZGF0YSkKICAgcmV0dXJuIF9pbmZsYXRlLmRlY29tcHJlc3MoKQp9Cgpjb21wcmVzcz0gZnVuY3Rpb24gKGRhdGEpIHsKICAgdmFyIF9kZWZsYXRlID0gbmV3IF96bGliLkRlZmxhdGUoZGF0YSkKICAgcmV0dXJuIF9kZWZsYXRlLmNvbXByZXNzKCkKfQoKCn0gLy8gZW5kICRtb2R1bGUK',
'/libs/time.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmb3IodmFyICRweV9idWlsdGluIGluIF9fYnVpbHRpbnNfXylldmFsKCJ2YXIgIiskcHlfYnVpbHRpbisiPV9fYnVpbHRpbnNfX1skcHlfYnVpbHRpbl0iKTt2YXIgJEpTT2JqZWN0PV9fQlJZVEhPTl9fLiRKU09iamVjdDt2YXIgSlNPYmplY3Q9X19CUllUSE9OX18uSlNPYmplY3Q7cmV0dXJue19fbmFtZV9fOid0aW1lJyxjdGltZTpmdW5jdGlvbih0aW1lc3RhbXApe2lmKHRpbWVzdGFtcD09PXVuZGVmaW5lZCl0aW1lc3RhbXA9aW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDApO3ZhciBkPW5ldyBEYXRlKDApO2Quc2V0VVRDU2Vjb25kcyh0aW1lc3RhbXApO3JldHVybiBkLnRvVVRDU3RyaW5nKCk7fSxnbXRpbWU6ZnVuY3Rpb24oKXt2YXIgZD1uZXcgRGF0ZSgpO3JldHVybiBbZC5nZXRGdWxsWWVhcigpLGQuZ2V0TW9udGgoKSsxLGQuZ2V0RGF0ZSgpLGQuZ2V0SG91cnMoKSxkLmdldE1pbnV0ZXMoKSxkLmdldFNlY29uZHMoKSxkLmdldERheSgpLDAsMF07fSxwZXJmX2NvdW50ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQobmV3IERhdGUoKS5nZXRUaW1lKCkvMTAwMC4wKTt9LGxvY2FsdGltZTpmdW5jdGlvbihzZWNzKXt2YXIgZD1uZXcgRGF0ZSgpO2lmKHNlY3M9PT11bmRlZmluZWR8fHNlY3M9PT1Ob25lKXJldHVybiBkLmdldFRpbWUoKTt2YXIgamFuPW5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwwLDEpO3ZhciBqdWw9bmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLDYsMSk7dmFyIGRzdD1pbnQoZC5nZXRUaW1lem9uZU9mZnNldCgpPE1hdGgubWF4KGphbi5nZXRUaW1lem9uZU9mZnNldCgpLGp1bC5nZXRUaW1lem9uZU9mZnNldCgpKSk7cmV0dXJuIFtkLmdldEZ1bGxZZWFyKCksZC5nZXRNb250aCgpKzEsZC5nZXREYXRlKCksZC5nZXRIb3VycygpLGQuZ2V0TWludXRlcygpLGQuZ2V0U2Vjb25kcygpLGQuZ2V0RGF5KCksMCxkc3RdO30sdGltZTpmdW5jdGlvbigpe3JldHVybiBmbG9hdCgobmV3IERhdGUoKS5nZXRUaW1lKCkpLzEwMDApO30sc2xlZXA6ZnVuY3Rpb24oc2Vjcyl7fSxzdHJmdGltZTpmdW5jdGlvbihmb3JtYXQsYXJnKXtmdW5jdGlvbiBucyhhcmcsbmIpe3ZhciByZXM9YXJnLnRvU3RyaW5nKCk7d2hpbGUocmVzLmxlbmd0aDxuYilyZXM9JzAnK3JlcztyZXR1cm4gcmVzO31pZihhcmcpdmFyIG9iaj1uZXcgRGF0ZShhcmdbMF0sYXJnWzFdLTEsYXJnWzJdLGFyZ1szXSxhcmdbNF0sYXJnWzVdLGFyZ1s2XSk7ZWxzZSB2YXIgb2JqPW5ldyBEYXRlKCk7dmFyIGFiYl93ZWVrZGF5cz1bJ1N1JywnTW8nLCdUdScsJ1dlJywnVGgnLCdGcicsJ1NhJ107dmFyIGZ1bGxfd2Vla2RheXM9WydTdW5kYXknLCdNb25kYXknLCdUdWVzZGF5JywnV2VkbmVzZGF5JywnVGh1cnNkYXknLCdGcmlkYXknLCdTYXR1cmRheSddO3ZhciBhYmJfbW9udGhzPVsnSmFuJywnRmViJywnTWFyJywnQXByJywnTWF5JywnSnVuJywnSnVsJywnQXVnJywnU2VwJywnT2N0JywnTm92JywnRGVjJ107dmFyIGZ1bGxfbW9udGhzPVsnSmFudWFyeScsJ0ZlYnJ1YXJ5JywnTWFyY2gnLCdBcHJpbCcsJ01heScsJ0p1bmUnLCdKdWx5JywnQXVndXN0JywnU2VwdGVtYmVyJywnT2N0b2JlcicsJ05vdmVtYmVyJywnRGVjZW1iZXInXTt2YXIgcmVzPWZvcm1hdDtyZXM9cmVzLnJlcGxhY2UoLyVILyxucyhvYmouZ2V0SG91cnMoKSwyKSk7cmVzPXJlcy5yZXBsYWNlKC8lTS8sbnMob2JqLmdldE1pbnV0ZXMoKSwyKSk7cmVzPXJlcy5yZXBsYWNlKC8lUy8sbnMob2JqLmdldFNlY29uZHMoKSwyKSk7cmVzPXJlcy5yZXBsYWNlKC8lWS8sbnMob2JqLmdldEZ1bGxZZWFyKCksNCkpO3Jlcz1yZXMucmVwbGFjZSgvJXkvLG5zKG9iai5nZXRGdWxsWWVhcigpLDQpLnN1YnN0cigyKSk7cmVzPXJlcy5yZXBsYWNlKC8lbS8sbnMob2JqLmdldE1vbnRoKCkrMSwyKSk7cmVzPXJlcy5yZXBsYWNlKC8lZC8sbnMob2JqLmdldERhdGUoKSwyKSk7cmVzPXJlcy5yZXBsYWNlKC8lYS8sYWJiX3dlZWtkYXlzW29iai5nZXREYXkoKV0pO3Jlcz1yZXMucmVwbGFjZSgvJUEvLGZ1bGxfd2Vla2RheXNbb2JqLmdldERheSgpXSk7cmVzPXJlcy5yZXBsYWNlKC8lYi8sYWJiX21vbnRoc1tvYmouZ2V0TW9udGgoKV0pO3Jlcz1yZXMucmVwbGFjZSgvJUIvLGZ1bGxfbW9udGhzW29iai5nZXRNb250aCgpXSk7cmV0dXJuIHJlczt9LHN0cnVjdF90aW1lOmZ1bmN0aW9uKGFyZyl7Y29uc29sZS5sb2coJ3N0cnVjdCB0aW1lJyk7Y29uc29sZS5sb2coJ2xpc3QgJytsaXN0KTtpZighaXNpbnN0YW5jZShhcmcsW3R1cGxlLGxpc3RdKSl0aHJvdyBUeXBlRXJyb3IoJ2NvbnN0cnVjdG9yIHJlcXVpcmVzIGEgc2VxdWVuY2UnKTtpZihsZW4oYXJnKSE9OSl0aHJvdyBUeXBlRXJyb3IoInRpbWUuc3RydWN0X3RpbWUoKSB0YWtlcyBhIDktc2VxdWVuY2UgKCIrbGVuKGFyZykrIi1zZXF1ZW5jZSBnaXZlbiIpO3ZhciByZXM9YXJnO3ZhciBuYW1lcz1bJ3RtX3llYXInLCd0bV9tb24nLCd0bV9tZGF5JywndG1faG91cicsJ3RtX21pbicsJ3RtX3NlYycsJ3RtX3dkYXknLCd0bV95ZGF5JywndG1faXNkc3QnLCd0bV96b25lJywndG1fZ210b2ZmJ107cmVzLl9fZ2V0YXR0cl9fPWZ1bmN0aW9uKGF0dHIpe3ZhciBpeD1uYW1lcy5pbmRleE9mKGF0dHIpO2lmKGl4Pi0xKXJldHVybiBhcmcuX19nZXRpdGVtX18oaXgpO2lmKHR5cGVvZiByZXNbYXR0cl09PT0nZnVuY3Rpb24nKXJldHVybihmdW5jdGlvbihvYmope3JldHVybiBmdW5jdGlvbigpe3JldHVybiBvYmpbYXR0cl0uYXBwbHkob2JqLGFyZ3VtZW50cyk7fTt9KShyZXMpO2Vsc2UgaWYocmVzW2F0dHJdIT09dW5kZWZpbmVkKXJldHVybiByZXNbYXR0cl07ZWxzZSB0aHJvdyBBdHRyaWJ1dGVFcnJvcigib2JqZWN0IGhhcyBubyBhdHRyaWJ1dGUgJyIrYXR0cisiJyIpO307cmV0dXJuIHJlczt9fTt9KSgpOw==',
'/libs/_websocket.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXskV2ViU29ja2V0RGljdD17X19jbGFzc19fOiR0eXBlLF9fbmFtZV9fOidXZWJTb2NrZXQnfTskV2ViU29ja2V0RGljdC5iaW5kPWZ1bmN0aW9uKHNlbGYsZXZlbnQsY2FsbGJhY2spe3NlbGYuJHdzWydvbicrZXZlbnRdPWNhbGxiYWNrO307JFdlYlNvY2tldERpY3Quc2VuZD1mdW5jdGlvbihzZWxmLGRhdGEpe3NlbGYuJHdzLnNlbmQoZGF0YSk7fTskV2ViU29ja2V0RGljdC5jbG9zZT1mdW5jdGlvbihzZWxmKXtzZWxmLiR3cy5jbG9zZSgpO307JFdlYlNvY2tldERpY3QuX19tcm9fXz1bJFdlYlNvY2tldERpY3QsX19idWlsdGluc19fLm9iamVjdC4kZGljdF07ZnVuY3Rpb24gd2Vic29ja2V0KGhvc3Qpe3ZhciAkc29ja2V0PW5ldyBXZWJTb2NrZXQoaG9zdCk7dmFyIHJlcz17X19jbGFzc19fOiRXZWJTb2NrZXREaWN0LCR3czokc29ja2V0fTtyZXMuJHdlYnNvY2tldD0kc29ja2V0O3JldHVybiByZXM7fXdlYnNvY2tldC5fX2NsYXNzX189JGZhY3Rvcnk7d2Vic29ja2V0LiRkaWN0PSRXZWJTb2NrZXREaWN0O3JldHVybnt3ZWJzb2NrZXQ6d2Vic29ja2V0fTt9KSgpOw==',
'/libs/_ajax.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmb3IodmFyICRweV9idWlsdGluIGluIF9fYnVpbHRpbnNfXylldmFsKCJ2YXIgIiskcHlfYnVpbHRpbisiPV9fYnVpbHRpbnNfX1skcHlfYnVpbHRpbl0iKTskWE1MSHR0cERpY3Q9e19fY2xhc3NfXzokdHlwZSxfX25hbWVfXzonWE1MSHR0cCd9OyRYTUxIdHRwRGljdC5fX2dldGF0dHJpYnV0ZV9fPWZ1bmN0aW9uKHNlbGYsYXR0cil7aWYoWydoZWFkZXJzJywndGV4dCcsJ3htbCddLmluZGV4T2YoYXR0cik+LTEpcmV0dXJuICRYTUxIdHRwRGljdFthdHRyXShzZWxmKTtyZXR1cm4gJE9iamVjdERpY3QuX19nZXRhdHRyaWJ1dGVfXyhzZWxmLGF0dHIpO307JFhNTEh0dHBEaWN0Ll9fbXJvX189WyRYTUxIdHRwRGljdCwkT2JqZWN0RGljdF07JFhNTEh0dHBEaWN0Ll9fcmVwcl9fPWZ1bmN0aW9uKHNlbGYpe3JldHVybiAnPG9iamVjdCBYTUxIdHRwPic7fTskWE1MSHR0cERpY3QuX19zdHJfXz0kWE1MSHR0cERpY3QudG9TdHJpbmc9JFhNTEh0dHBEaWN0Ll9fcmVwcl9fOyRYTUxIdHRwRGljdC50ZXh0PWZ1bmN0aW9uKHNlbGYpe3JldHVybiBzZWxmLnJlc3BvbnNlVGV4dDt9OyRYTUxIdHRwRGljdC54bWw9ZnVuY3Rpb24oc2VsZil7cmV0dXJuICREb21PYmplY3Qoc2VsZi5yZXNwb25zZVhNTCk7fTskWE1MSHR0cERpY3QuaGVhZGVycz1mdW5jdGlvbihzZWxmKXtyZXR1cm4gbGlzdChzZWxmLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnNwbGl0KCdcbicpKTt9OyRYTUxIdHRwRGljdC5nZXRfaGVhZGVyPWZ1bmN0aW9uKCl7dmFyIHJlcW9iaj1zZWxmO3JldHVybiBmdW5jdGlvbihoZWFkZXIpe3JldHVybiByZXFvYmouZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKTt9O307JEFqYXhEaWN0PXtfX2NsYXNzX186JHR5cGUsX19uYW1lX186J2FqYXgnfTskQWpheERpY3QuX19tcm9fXz1bJEFqYXhEaWN0LCRPYmplY3REaWN0XTskQWpheERpY3QuX19yZXByX189ZnVuY3Rpb24oc2VsZil7cmV0dXJuICc8b2JqZWN0IEFqYXg+Jzt9OyRBamF4RGljdC5fX3N0cl9fPSRBamF4RGljdC50b1N0cmluZz0kQWpheERpY3QuX19yZXByX187JEFqYXhEaWN0LmJpbmQ9ZnVuY3Rpb24oc2VsZixldnQsZnVuYyl7c2VsZlsnb25fJytldnRdPWZ1bmM7fTskQWpheERpY3Qub3Blbj1mdW5jdGlvbihzZWxmLG1ldGhvZCx1cmwsYXN5bmMpe3NlbGYuJHhtbGh0dHAub3BlbihtZXRob2QsdXJsLGFzeW5jKTt9OyRBamF4RGljdC5zZW5kPWZ1bmN0aW9uKHNlbGYscGFyYW1zKXt2YXIgcmVzPScnO2lmKCFwYXJhbXN8fHBhcmFtcy4ka2V5cy5sZW5ndGg9PTApe3NlbGYuJHhtbGh0dHAuc2VuZCgpO3JldHVybjt9ZWxzZSBpZihpc2luc3RhbmNlKHBhcmFtcyxzdHIpKXJlcz1wYXJhbXM7ZWxzZSBpZihpc2luc3RhbmNlKHBhcmFtcyxkaWN0KSl7Zm9yKGk9MDtpPHBhcmFtcy4ka2V5cy5sZW5ndGg7aSsrKXJlcys9ZW5jb2RlVVJJQ29tcG9uZW50KHN0cihwYXJhbXMuJGtleXNbaV0pKSsnPScrZW5jb2RlVVJJQ29tcG9uZW50KHN0cihwYXJhbXMuJHZhbHVlc1tpXSkpKycmJztyZXM9cmVzLnN1YnN0cigwLHJlcy5sZW5ndGgtMSk7fWVsc2UgdGhyb3cgVHlwZUVycm9yKCJzZW5kKCkgYXJndW1lbnQgbXVzdCBiZSBzdHJpbmcgb3IgZGljdG9uYXJ5LCBub3QgJyIrc3RyKHBhcmFtcy5fX2NsYXNzX18pKyInIik7c2VsZi4keG1saHR0cC5zZW5kKHJlcyk7fTskQWpheERpY3Quc2V0X2hlYWRlcj1mdW5jdGlvbihzZWxmLGtleSx2YWx1ZSl7c2VsZi4keG1saHR0cC5zZXRSZXF1ZXN0SGVhZGVyKGtleSx2YWx1ZSk7fTskQWpheERpY3Quc2V0X3RpbWVvdXQ9ZnVuY3Rpb24oc2VsZixzZWNvbmRzLGZ1bmMpe3NlbGYuJHhtbGh0dHAuJHJlcXVlc3RUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2VsZi4keG1saHR0cC5hYm9ydCgpO2Z1bmMoKTt9LHNlY29uZHMqMTAwMCk7fTtmdW5jdGlvbiBhamF4KCl7dmFyIHJlcz17X19jbGFzc19fOiRBamF4RGljdH07aWYod2luZG93LlhNTEh0dHBSZXF1ZXN0KXZhciAkeG1saHR0cD1uZXcgWE1MSHR0cFJlcXVlc3QoKTtlbHNlIHZhciAkeG1saHR0cD1uZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTskeG1saHR0cC4kcmVxdWVzdFRpbWVyPW51bGw7JHhtbGh0dHAuX19jbGFzc19fPSRYTUxIdHRwRGljdDskeG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXt2YXIgc3RhdGU9dGhpcy5yZWFkeVN0YXRlO3ZhciByZXE9dGhpcy4kYWpheDt2YXIgdGltZXI9dGhpcy4kcmVxdWVzdFRpbWVyO3ZhciBvYmo9dGhpcztpZihzdGF0ZT09PTAmJidvbl91bmluaXRpYWxpemVkJyBpbiByZXEpcmVxLm9uX3VuaW5pdGlhbGl6ZWQob2JqKTtlbHNlIGlmKHN0YXRlPT09MSYmJ29uX2xvYWRpbmcnIGluIHJlcSlyZXEub25fbG9hZGluZyhvYmopO2Vsc2UgaWYoc3RhdGU9PT0yJiYnb25fbG9hZGVkJyBpbiByZXEpcmVxLm9uX2xvYWRlZChvYmopO2Vsc2UgaWYoc3RhdGU9PT0zJiYnb25faW50ZXJhY3RpdmUnIGluIHJlcSlyZXEub25faW50ZXJhY3RpdmUob2JqKTtlbHNlIGlmKHN0YXRlPT09NCYmJ29uX2NvbXBsZXRlJyBpbiByZXEpe2lmKHRpbWVyIT09bnVsbCl3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtyZXEub25fY29tcGxldGUob2JqKTt9fTskeG1saHR0cC4kYWpheD1yZXM7cmVzLiR4bWxodHRwPSR4bWxodHRwO3JldHVybiByZXM7fWFqYXguX19jbGFzc19fPSRmYWN0b3J5O2FqYXguJGRpY3Q9JEFqYXhEaWN0O3JldHVybnthamF4OmFqYXh9O30pKCk7',
'/libs/_io.js':'JG1vZHVsZT17fTs=',
'/libs/zlib.js':'',
'/libs/_browser.js':'JG1vZHVsZT17JCRhbGVydDpfX0JSWVRIT05fXy5fYWxlcnQsY29uZmlybTpmdW5jdGlvbihtZXNzYWdlKXtyZXR1cm4gX19CUllUSE9OX18uSlNPYmplY3Qod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO30sJCRkb2N1bWVudDpfX0JSWVRIT05fXy4kRE9NTm9kZShkb2N1bWVudCksZG9jOl9fQlJZVEhPTl9fLiRET01Ob2RlKGRvY3VtZW50KSxtb3VzZUNvb3JkczpmdW5jdGlvbihldil7cmV0dXJuIF9fQlJZVEhPTl9fLkpTT2JqZWN0KCRtb3VzZUNvb3JkcyhldikpO30scHJvbXB0OmZ1bmN0aW9uKG1lc3NhZ2UsZGVmYXVsdF92YWx1ZSl7cmV0dXJuIF9fQlJZVEhPTl9fLkpTT2JqZWN0KHdpbmRvdy5wcm9tcHQobWVzc2FnZSxkZWZhdWx0X3ZhbHVlfHwnJykpO30sd2luOl9fQlJZVEhPTl9fLndpbiwkJHdpbmRvdzpfX0JSWVRIT05fXy53aW59OyRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdicm93c2VyJz4iO307',
'/libs/math.js':'dmFyICRtb2R1bGU9KGZ1bmN0aW9uKCl7Zm9yKHZhciAkcHlfYnVpbHRpbiBpbiBfX2J1aWx0aW5zX18pZXZhbCgidmFyICIrJHB5X2J1aWx0aW4rIj1fX2J1aWx0aW5zX19bJHB5X2J1aWx0aW5dIik7dmFyIGZsb2F0X2NoZWNrPWZ1bmN0aW9uKHgpe2lmKGlzaW5zdGFuY2UoeCxmbG9hdCkpcmV0dXJuIHgudmFsdWU7cmV0dXJuIHg7fTt2YXIgaXNpbmY9ZnVuY3Rpb24oeCl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO3JldHVybiB4MT09LUluZmluaXR5fHx4MT09SW5maW5pdHl8fHgxPT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFl8fHgxPT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7fTt2YXIgX21vZD17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7dmFyIHJlcz10aGlzW2F0dHJdO2lmKHJlcz09PXVuZGVmaW5lZCkkcmFpc2UoJ0F0dHJpYnV0ZUVycm9yJywnbW9kdWxlIG1hdGggaGFzIG5vIGF0dHJpYnV0ZSAnK2F0dHIpO3JldHVybiByZXM7fSxhY29zOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmFjb3MoZmxvYXRfY2hlY2soeCkpKTt9LGFjb3NoOmZ1bmN0aW9uKHgpe2lmKGlzaW5mKHgpKXJldHVybiBmbG9hdCgnaW5mJyk7dmFyIHk9ZmxvYXRfY2hlY2soeCk7cmV0dXJuIGZsb2F0KE1hdGgubG9nKHkrTWF0aC5zcXJ0KHkqeS0xKSkpO30sYXNpbjpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5hc2luKGZsb2F0X2NoZWNrKHgpKSk7fSxhc2luaDpmdW5jdGlvbih4KXtpZihpc2luZih4KSlyZXR1cm4gZmxvYXQoJ2luZicpO3ZhciB5PWZsb2F0X2NoZWNrKHgpO3JldHVybiBmbG9hdChNYXRoLmxvZyh5K01hdGguc3FydCh5KnkrMSkpKTt9LGF0YW46ZnVuY3Rpb24oeCl7aWYoaXNpbmYoeCkpcmV0dXJuIGZsb2F0KE1hdGguUEkvMik7cmV0dXJuIGZsb2F0KE1hdGguYXRhbihmbG9hdF9jaGVjayh4KSkpO30sYXRhbjI6ZnVuY3Rpb24oeSx4KXtyZXR1cm4gZmxvYXQoTWF0aC5hdGFuMih5LHgpKTt9LGF0YW5oOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO2lmKHk9PTApcmV0dXJuIDA7cmV0dXJuIGZsb2F0KDAuNSpNYXRoLmxvZygoMS95KzEpLygxL3ktMSkpKTt9LGNlaWw6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7aWYoIWlzTmFOKHBhcnNlRmxvYXQoeSkpJiZpc0Zpbml0ZSh5KSlyZXR1cm4gaW50KE1hdGguY2VpbCh5KSk7dHJ5e3JldHVybiBnZXRhdHRyKHksJ19fY2VpbF9fJykoKTt9Y2F0Y2goZXJyKXskcG9wX2V4YygpO30kcmFpc2UoJ1ZhbHVlRXJyb3InLCdvYmplY3QgaXMgbm90IGEgbnVtYmVyIGFuZCBkb2VzIG5vdCBjb250YWluIF9fY2VpbF9fJyk7fSxjb3B5c2lnbjpmdW5jdGlvbih4LHkpe3ZhciB4MT1NYXRoLmFicyhmbG9hdF9jaGVjayh4KSk7dmFyIHkxPWZsb2F0X2NoZWNrKHkpO3ZhciBzaWduPXkxP3kxPDA/LTE6MToxO2lmKGlzaW5zdGFuY2UoeCxpbnQpKXJldHVybiB4MSpzaWduO2Vsc2UgcmV0dXJuIGZsb2F0KHgxKnNpZ24pO30sY29zOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmNvcyhmbG9hdF9jaGVjayh4KSkpO30sZGVncmVlczpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoZmxvYXRfY2hlY2soeCkqMTgwL01hdGguUEkpO30sZTpmbG9hdChNYXRoLkUpLGVyZjpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTt2YXIgdD0xLjAvKDEuMCswLjUqTWF0aC5hYnMoeSkpO3ZhciBhbnM9MS10Kk1hdGguZXhwKC15KnktMS4yNjU1MTIyMyt0KigxLjAwMDAyMzY4K3QqKDAuMzc0MDkxOTYrdCooMC4wOTY3ODQxOCt0KigtMC4xODYyODgwNit0KigwLjI3ODg2ODA3K3QqKC0xLjEzNTIwMzk4K3QqKDEuNDg4NTE1ODcrdCooLTAuODIyMTUyMjMrdCowLjE3MDg3Mjc3KSkpKSkpKSkpO2lmKHk+PTAuMClyZXR1cm4gYW5zO3JldHVybiAtYW5zO30sZXJmYzpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTt2YXIgdD0xLjAvKDEuMCswLjUqTWF0aC5hYnMoeSkpO3ZhciBhbnM9MS10Kk1hdGguZXhwKC15KnktMS4yNjU1MTIyMyt0KigxLjAwMDAyMzY4K3QqKDAuMzc0MDkxOTYrdCooMC4wOTY3ODQxOCt0KigtMC4xODYyODgwNit0KigwLjI3ODg2ODA3K3QqKC0xLjEzNTIwMzk4K3QqKDEuNDg4NTE1ODcrdCooLTAuODIyMTUyMjMrdCowLjE3MDg3Mjc3KSkpKSkpKSkpO2lmKHk+PTAuMClyZXR1cm4gMS1hbnM7cmV0dXJuIDErYW5zO30sZXhwOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmV4cChmbG9hdF9jaGVjayh4KSkpO30sZXhwbTE6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguZXhwKGZsb2F0X2NoZWNrKHgpKS0xKTt9LGZhYnM6ZnVuY3Rpb24oeCl7cmV0dXJuIHg+MD9mbG9hdCh4KTpmbG9hdCgteCk7fSxmYWN0b3JpYWw6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7dmFyIHI9MTtmb3IodmFyIGk9MjtpPD15O2krKylyKj1pO3JldHVybiByO30sZmxvb3I6ZnVuY3Rpb24oeCl7cmV0dXJuIE1hdGguZmxvb3IoZmxvYXRfY2hlY2soeCkpO30sZm1vZDpmdW5jdGlvbih4LHkpe3JldHVybiBmbG9hdChmbG9hdF9jaGVjayh4KSVmbG9hdF9jaGVjayh5KSk7fSxmcmV4cDpmdW5jdGlvbih4KXt2YXIgeDE9ZmxvYXRfY2hlY2soeCk7dmFyIGV4PU1hdGguZmxvb3IoTWF0aC5sb2coeDEpL01hdGgubG9nKDIpKSsxO2ZyYWM9eDEvTWF0aC5wb3coMixleCk7cmV0dXJuIFtmcmFjLGV4XTt9LGdhbW1hOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB6PXkrMTt2YXIgZDE9TWF0aC5zcXJ0KDIqTWF0aC5QSSkvejt2YXIgZDI9MS4wMDAwMDAwMDAxOTAwMTU7ZDIrPTc2LjE4MDA5MTcyOTQ3MTQ2Lyh6KzEpO2QyKz0tODYuNTA1MzIwMzI5NDE2NzcvKHorMik7ZDIrPTI0LjAxNDA5ODI0MDgzMDkxLyh6KzMpO2QyKz0tMS4yMzE3Mzk1NzI0NTAxNTUvKHorNCk7ZDIrPTEuMjA4NjUwOTczODY2MTc5RS0zLyh6KzUpO2QyKz0tNS4zOTUyMzkzODQ5NTNFLTYvKHorNik7cmV0dXJuIGQxKmQyKk1hdGgucG93KHorNS41LHorMC41KSpNYXRoLmV4cCgtKHorNS41KSk7fSxoeXBvdDpmdW5jdGlvbih4LHkpe3ZhciB4MT1mbG9hdF9jaGVjayh4KTt2YXIgeTE9ZmxvYXRfY2hlY2soeSk7cmV0dXJuIGZsb2F0KE1hdGguc3FydCh4MSp4MSt5MSp5MSkpO30saXNmaW5pdGU6ZnVuY3Rpb24oeCl7cmV0dXJuIGlzRmluaXRlKGZsb2F0X2NoZWNrKHgpKTt9LGlzaW5mOmZ1bmN0aW9uKHgpe3JldHVybiBpc2luZih4KTt9LGlzbmFuOmZ1bmN0aW9uKHgpe3JldHVybiBpc05hTihmbG9hdF9jaGVjayh4KSk7fSxsZGV4cDpmdW5jdGlvbih4LGkpe3ZhciBtdWw9TWF0aC5wb3coMixmbG9hdF9jaGVjayhpKSk7aWYoaXNpbnN0YW5jZSh4LGludCkpcmV0dXJuIHgqbXVsO2Vsc2UgcmV0dXJuIGZsb2F0KHgudmFsdWUqbXVsKTt9LGxnYW1tYTpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTt2YXIgej15KzE7dmFyIGQxPU1hdGguc3FydCgyKk1hdGguUEkpL3o7dmFyIGQyPTEuMDAwMDAwMDAwMTkwMDE1O2QyKz03Ni4xODAwOTE3Mjk0NzE0Ni8oeisxKTtkMis9LTg2LjUwNTMyMDMyOTQxNjc3Lyh6KzIpO2QyKz0yNC4wMTQwOTgyNDA4MzA5MS8oeiszKTtkMis9LTEuMjMxNzM5NTcyNDUwMTU1Lyh6KzQpO2QyKz0xLjIwODY1MDk3Mzg2NjE3OUUtMy8oeis1KTtkMis9LTUuMzk1MjM5Mzg0OTUzRS02Lyh6KzYpO3JldHVybiBmbG9hdChNYXRoLmxvZyhNYXRoLmFicyhkMSpkMipNYXRoLnBvdyh6KzUuNSx6KzAuNSkqTWF0aC5leHAoLSh6KzUuNSkpKSkpO30sbG9nOmZ1bmN0aW9uKHgsYmFzZSl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO2lmKGJhc2U9PT11bmRlZmluZWQpcmV0dXJuIGZsb2F0KE1hdGgubG9nKHgxKSk7cmV0dXJuIGZsb2F0KE1hdGgubG9nKHgxKS9NYXRoLmxvZyhmbG9hdF9jaGVjayhiYXNlKSkpO30sbG9nMXA6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGgubG9nKDEuMCtmbG9hdF9jaGVjayh4KSkpO30sbG9nMjpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5sb2coZmxvYXRfY2hlY2soeCkpL01hdGguTE4yKTt9LGxvZzEwOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmxvZyhmbG9hdF9jaGVjayh4KSkvTWF0aC5MTjEwKTt9LG1vZGY6ZnVuY3Rpb24oeCl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO2lmKHgxPjApe3ZhciBpPWZsb2F0KHgxLU1hdGguZmxvb3IoeDEpKTtyZXR1cm4gW2ksZmxvYXQoeDEtaSldO312YXIgaT1mbG9hdCh4MS1NYXRoLmNlaWwoeDEpKTtyZXR1cm4gW2ksZmxvYXQoTWF0aC5jZWlsKHgxKSldO30scGk6ZmxvYXQoTWF0aC5QSSkscG93OmZ1bmN0aW9uKHgseSl7aWYoaXNpbnN0YW5jZSh4LGludCkpcmV0dXJuIE1hdGgucG93KHgsZmxvYXRfY2hlY2soeSkpO2Vsc2UgcmV0dXJuIGZsb2F0KE1hdGgucG93KHgudmFsdWUsZmxvYXRfY2hlY2soeSkpKTt9LHJhZGlhbnM6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KGZsb2F0X2NoZWNrKHgpKk1hdGguUEkvMTgwKTt9LHNpbjpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5zaW4oZmxvYXRfY2hlY2soeCkpKTt9LHNxcnQ6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguc3FydChmbG9hdF9jaGVjayh4KSkpO30sdHJ1bmM6ZnVuY3Rpb24oeCl7Y29uc29sZS5sb2coJ3RydW5jJyk7dHJ5e3JldHVybiBnZXRhdHRyKHgsJ19fdHJ1bmNfXycpKCk7fWNhdGNoKGVycil7JHBvcF9leGMoKTt9dmFyIHgxPWZsb2F0X2NoZWNrKHgpO2lmKCFpc05hTihwYXJzZUZsb2F0KHgxKSkmJmlzRmluaXRlKHgxKSlyZXR1cm4gaW50KE1hdGguZmxvb3IoeDEpKTskcmFpc2UoJ1ZhbHVlRXJyb3InLCdvYmplY3QgaXMgbm90IGEgbnVtYmVyIGFuZCBkb2VzIG5vdCBjb250YWluIF9fdHJ1bmNfXycpO319O2Zvcih2YXIgJGF0dHIgaW4gX21vZClpZih0eXBlb2YgX21vZFskYXR0cl09PT0nZnVuY3Rpb24nKXtfbW9kWyRhdHRyXS5fX3JlcHJfXz0oZnVuY3Rpb24oZnVuYyl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuICc8YnVpbHQtaW4gZnVuY3Rpb24gJytmdW5jKyc+Jzt9O30pKCRhdHRyKTtfbW9kWyRhdHRyXS5fX3N0cl9fPShmdW5jdGlvbihmdW5jKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gJzxidWlsdC1pbiBmdW5jdGlvbiAnK2Z1bmMrJz4nO307fSkoJGF0dHIpO31yZXR1cm4gX21vZDt9KSgpOw==',
'/libs/hashlib.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmb3IodmFyICRweV9idWlsdGluIGluIF9fYnVpbHRpbnNfXylldmFsKCJ2YXIgIiskcHlfYnVpbHRpbisiPV9fYnVpbHRpbnNfX1skcHlfYnVpbHRpbl0iKTskbW9kPXtfX2dldGF0dHJfXzpmdW5jdGlvbihhdHRyKXtpZihhdHRyPT0nbmV3JylyZXR1cm4gJGhhc2hsaWJfbmV3O3JldHVybiB0aGlzW2F0dHJdO30sbWQ1OmZ1bmN0aW9uKCl7cmV0dXJuICRoYXNobGliX25ldygnbWQ1Jyk7fSxzaGExOmZ1bmN0aW9uKCl7cmV0dXJuICRoYXNobGliX25ldygnc2hhMScpO30sc2hhMjI0OmZ1bmN0aW9uKCl7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjI0Jyk7fSxzaGEyNTY6ZnVuY3Rpb24oKXtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEyNTYnKTt9LHNoYTM4NDpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTM4NCcpO30sc2hhNTEyOmZ1bmN0aW9uKCl7cmV0dXJuICRoYXNobGliX25ldygnc2hhNTEyJyk7fSxhbGdvcml0aG1zX2d1YXJhbnRlZWQ6WydtZDUnLCdzaGExJywnc2hhMjI0Jywnc2hhMjU2Jywnc2hhMzg0Jywnc2hhNTEyJ10sYWxnb3JpdGhtc19hdmFpbGFibGU6WydtZDUnLCdzaGExJywnc2hhMjI0Jywnc2hhMjU2Jywnc2hhMzg0Jywnc2hhNTEyJ119O2Z1bmN0aW9uICRnZXRfQ3J5cHRvSlNfbGliKGFsZyl7dmFyIGltcD0kaW1wb3J0ZXIoKTt2YXIgJHhtbGh0dHA9aW1wWzBdLGZha2VfcXM9aW1wWzFdLHRpbWVyPWltcFsyXSxyZXM9bnVsbDskeG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtpZigkeG1saHR0cC5yZWFkeVN0YXRlPT00KXt3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtpZigkeG1saHR0cC5zdGF0dXM9PTIwMHx8JHhtbGh0dHAuc3RhdHVzPT0wKXJlcz0keG1saHR0cC5yZXNwb25zZVRleHQ7ZWxzZXtyZXM9RXJyb3IoKTtyZXMubmFtZT0nTm90Rm91bmRFcnJvcic7cmVzLm1lc3NhZ2U9Ik5vIENyeXB0b0pTIGxpYiBuYW1lZCAnIithbGcrIiciO319fTskeG1saHR0cC5vcGVuKCdHRVQnLF9fQlJZVEhPTl9fLmJyeXRob25fcGF0aCsnbGlicy9jcnlwdG9fanMvcm9sbHVwcy8nK2FsZysnLmpzJytmYWtlX3FzLGZhbHNlKTtpZignb3ZlcnJpZGVNaW1lVHlwZScgaW4gJHhtbGh0dHApJHhtbGh0dHAub3ZlcnJpZGVNaW1lVHlwZSgidGV4dC9wbGFpbiIpOyR4bWxodHRwLnNlbmQoKTtpZihyZXMuY29uc3RydWN0b3I9PT1FcnJvcil0aHJvdyByZXM7dHJ5e2V2YWwocmVzKyI7IF9fQlJZVEhPTl9fLkNyeXB0b0pTPUNyeXB0b0pTOyIpO31jYXRjaChlcnIpe3Rocm93IEVycm9yKCJKUyBFdmFsIEVycm9yIiwiQ2Fubm90IGV2YWwgQ3J5cHRvSlMgYWxnb3JpdGhtICciK2FsZysiJyA6IGVycm9yOiIrZXJyKTt9fWZ1bmN0aW9uICRoYXNobGliX25ldyhhbGcpe2lmKGFsZz09J21kNScpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5NRDU9PT11bmRlZmluZWQpJGdldF9DcnlwdG9KU19saWIoJ21kNScpO3RoaXMuaGFzaD1fX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLk1ENS5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGExJyl7aWYoX19CUllUSE9OX18uQ3J5cHRvPT09dW5kZWZpbmVkfHxfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTE9PT11bmRlZmluZWQpJGdldF9DcnlwdG9KU19saWIoJ3NoYTEnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExLmNyZWF0ZSgpO31lbHNlIGlmKGFsZz09J3NoYTIyNCcpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQ9PT11bmRlZmluZWQpJGdldF9DcnlwdG9KU19saWIoJ3NoYTIyNCcpO3RoaXMuaGFzaD1fX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTIyNC5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGEyNTYnKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjU2PT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyNTYnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyNTYuY3JlYXRlKCk7fWVsc2UgaWYoYWxnPT0nc2hhMzg0Jyl7aWYoX19CUllUSE9OX18uQ3J5cHRvPT09dW5kZWZpbmVkfHxfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4ND09PXVuZGVmaW5lZCkkZ2V0X0NyeXB0b0pTX2xpYignc2hhMzg0Jyk7dGhpcy5oYXNoPV9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMzg0LmNyZWF0ZSgpO31lbHNlIGlmKGFsZz09J3NoYTUxMicpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTI9PT11bmRlZmluZWQpJGdldF9DcnlwdG9KU19saWIoJ3NoYTUxMicpO3RoaXMuaGFzaD1fX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTUxMi5jcmVhdGUoKTt9ZWxzZSAkcmFpc2UoJ0F0dHJpYnV0ZUVycm9yJywnSW52YWxpZCBoYXNoIGFsZ29yaXRobTonK2FsZyk7dGhpcy5fX2NsYXNzX189JHR5cGU7dGhpcy5fX2dldGF0dHJfXz1mdW5jdGlvbihhdHRyKXtyZXR1cm4gJGdldGF0dHIodGhpcyxhdHRyKTt9O3RoaXMuX19zdHJfXz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhleGRpZ2VzdCgpO307dGhpcy51cGRhdGU9ZnVuY3Rpb24obXNnKXt0aGlzLmhhc2gudXBkYXRlKG1zZyk7fTt0aGlzLmNvcHk9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYXNoLmNsb25lKCk7fTt0aGlzLmhleGRpZ2VzdD1mdW5jdGlvbigpe3ZhciB0ZW1wPXRoaXMuaGFzaC5jbG9uZSgpO3RlbXA9dGVtcC5maW5hbGl6ZSgpO3JldHVybiB0ZW1wLnRvU3RyaW5nKCk7fTtyZXR1cm4gdGhpczt9cmV0dXJuICRtb2Q7fSkoKTs=',
'/libs/_os.js':'JG1vZHVsZT17cmFuZG9tOmZ1bmN0aW9uKCl7cmV0dXJuIF9fYnVpbHRpbnNfXy5mbG9hdChNYXRoLnJhbmRvbSgpKTt9LHJhbmRpbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gX19idWlsdGluc19fLmludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGItYSkrYSkpO319Ow==',
'/libs/_sys.js':'JG1vZHVsZT17bW9kdWxlczp7J19fZ2V0X18nOmZ1bmN0aW9uKCl7cmV0dXJuIF9fYnVpbHRpbnNfXy5kaWN0KF9fQlJZVEhPTl9fLkpTT2JqZWN0KF9fQlJZVEhPTl9fLmltcG9ydGVkKSk7fSwnX19zZXRfXyc6MH19Ow==',
'/libs/crypto_js/rollups/sha1.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihlLG0pe3ZhciBwPXt9LGo9cC5saWI9e30sbD1mdW5jdGlvbigpe30sZj1qLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtsLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBsKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0sbj1qLldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPW0/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fGgpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGI9MDtiPGE7Yis9NCljLnB1c2goNDI5NDk2NzI5NiplLnJhbmRvbSgpfDApO3JldHVybiBuZXcgbi5pbml0KGMsYSk7fX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGIuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsYj1bXSxkPTA7ZDxjO2QrPTIpYltkPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGQsMiksMTYpPDwyNC00KihkJTgpO3JldHVybiBuZXcgbi5pbml0KGIsYy8yKTt9fSxnPWIuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBiPVtdLGQ9MDtkPGE7ZCsrKWIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbZD4+PjJdPj4+MjQtOCooZCU0KSYyNTUpKTtyZXR1cm4gYi5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKTt9fSxyPWIuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShnLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZy5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSxrPWouQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBuLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ci5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZDt9cmV0dXJuIG5ldyBuLmluaXQoZyxkKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2ouSGFzaGVyPWsuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuIG5ldyBhLmluaXQoYikuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGYpe3JldHVybiBuZXcgcy5ITUFDLmluaXQoYSxmKS5maW5hbGl6ZShiKTt9O319KTt2YXIgcz1wLmFsZ289e307cmV0dXJuIHA7fShNYXRoKTsoZnVuY3Rpb24oKXt2YXIgZT1DcnlwdG9KUyxtPWUubGliLHA9bS5Xb3JkQXJyYXksaj1tLkhhc2hlcixsPVtdLG09ZS5hbGdvLlNIQTE9ai5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgcC5pbml0KFsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF0pO30sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGYsbil7Zm9yKHZhciBiPXRoaXMuX2hhc2gud29yZHMsaD1iWzBdLGc9YlsxXSxlPWJbMl0saz1iWzNdLGo9Yls0XSxhPTA7ODA+YTthKyspe2lmKDE2PmEpbFthXT1mW24rYV18MDtlbHNle3ZhciBjPWxbYS0zXV5sW2EtOF1ebFthLTE0XV5sW2EtMTZdO2xbYV09Yzw8MXxjPj4+MzE7fWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXmspLTg5OTQ5NzUxNCk7aj1rO2s9ZTtlPWc8PDMwfGc+Pj4yO2c9aDtoPWM7fWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGY9dGhpcy5fZGF0YSxlPWYud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsaD04KmYuc2lnQnl0ZXM7ZVtoPj4+NV18PTEyODw8MjQtaCUzMjtlWyhoKzY0Pj4+OTw8NCkrMTRdPU1hdGguZmxvb3IoYi80Mjk0OTY3Mjk2KTtlWyhoKzY0Pj4+OTw8NCkrMTVdPWI7Zi5zaWdCeXRlcz00KmUubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGU9ai5jbG9uZS5jYWxsKHRoaXMpO2UuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBlO319KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKTt9KSgpOw==',
'/libs/crypto_js/rollups/sha3.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbih2LHApe3ZhciBkPXt9LHU9ZC5saWI9e30scj1mdW5jdGlvbigpe30sZj11LkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtyLnByb3RvdHlwZT10aGlzO3ZhciBiPW5ldyByKCk7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtiLmluaXQucHJvdG90eXBlPWI7Yi4kc3VwZXI9dGhpcztyZXR1cm4gYjt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scz11LldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGIpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWIhPXA/Yjo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHkpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YVtiPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGE7Yys9NCliLnB1c2goNDI5NDk2NzI5Nip2LnJhbmRvbSgpfDApO3JldHVybiBuZXcgcy5pbml0KGIsYSk7fX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGMuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9YS5sZW5ndGgsYz1bXSxqPTA7ajxiO2orPTIpY1tqPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGosMiksMTYpPDwyNC00KihqJTgpO3JldHVybiBuZXcgcy5pbml0KGMsYi8yKTt9fSxlPXguTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGI9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBjPVtdLGo9MDtqPGE7aisrKWMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJbaj4+PjJdPj4+MjQtOCooaiU0KSYyNTUpKTtyZXR1cm4gYy5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKTt9fSxxPXguVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShlLnN0cmluZ2lmeShhKSkpO31jYXRjaChiKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx0PXUuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBzLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9cS5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09ajt9cmV0dXJuIG5ldyBzLmluaXQoZixqKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO3UuSGFzaGVyPXQuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuIG5ldyBhLmluaXQoYykuZmluYWxpemUoYik7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe3JldHVybiBuZXcgdy5ITUFDLmluaXQoYSxjKS5maW5hbGl6ZShiKTt9O319KTt2YXIgdz1kLmFsZ289e307cmV0dXJuIGQ7fShNYXRoKTsoZnVuY3Rpb24odil7dmFyIHA9Q3J5cHRvSlMsZD1wLmxpYix1PWQuQmFzZSxyPWQuV29yZEFycmF5LHA9cC54NjQ9e307cC5Xb3JkPXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7dGhpcy5oaWdoPWY7dGhpcy5sb3c9czt9fSk7cC5Xb3JkQXJyYXk9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXtmPXRoaXMud29yZHM9Znx8W107dGhpcy5zaWdCeXRlcz1zIT12P3M6OCpmLmxlbmd0aDt9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyk7fXJldHVybiByLmNyZWF0ZShkLHRoaXMuc2lnQnl0ZXMpO30sY2xvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIGY9dS5jbG9uZS5jYWxsKHRoaXMpLGQ9Zi53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApLHA9ZC5sZW5ndGgscj0wO3I8cDtyKyspZFtyXT1kW3JdLmNsb25lKCk7cmV0dXJuIGY7fX0pO30pKCk7KGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13O31mb3IoZT0wOzU+ZTtlKyspZm9yKHE9MDs1PnE7cSsrKXhbZSs1KnFdPXErNSooKDIqZSszKnEpJTUpO2U9MTtmb3IocT0wOzI0PnE7cSsrKXtmb3IodmFyIGE9dz10PTA7Nz5hO2ErKyl7aWYoZSYxKXt2YXIgYj0oMTw8YSktMTszMj5iP3dePTE8PGI6dF49MTw8Yi0zMjt9ZT1lJjEyOD9lPDwxXjExMzplPDwxO315W3FdPWYuY3JlYXRlKHQsdyk7fWZvcih2YXIgYz1bXSxlPTA7MjU+ZTtlKyspY1tlXT1mLmNyZWF0ZSgpO2Q9ZC5TSEEzPXIuZXh0ZW5kKHtjZmc6ci5jZmcuZXh0ZW5kKHtvdXRwdXRMZW5ndGg6NTEyfSksX2RvUmVzZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5fc3RhdGU9W10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdCgpO3RoaXMuYmxvY2tTaXplPSgxNjAwLTIqdGhpcy5jZmcub3V0cHV0TGVuZ3RoKS8zMjt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bDt9Zm9yKGY9MDsyND5mO2YrKyl7Zm9yKGg9MDs1Pmg7aCsrKXtmb3IodmFyIGQ9bD0wLGs9MDs1Pms7aysrKWc9ZVtoKzUqa10sbF49Zy5oaWdoLGRePWcubG93O2c9Y1toXTtnLmhpZ2g9bDtnLmxvdz1kO31mb3IoaD0wOzU+aDtoKyspe2c9Y1soaCs0KSU1XTtsPWNbKGgrMSklNV07bT1sLmhpZ2g7az1sLmxvdztsPWcuaGlnaF4obTw8MXxrPj4+MzEpO2Q9Zy5sb3deKGs8PDF8bT4+PjMxKTtmb3Ioaz0wOzU+aztrKyspZz1lW2grNSprXSxnLmhpZ2hePWwsZy5sb3dePWQ7fWZvcihtPTE7MjU+bTttKyspZz1lW21dLGg9Zy5oaWdoLGc9Zy5sb3csaz1zW21dLDMyPms/KGw9aDw8a3xnPj4+MzItayxkPWc8PGt8aD4+PjMyLWspOihsPWc8PGstMzJ8aD4+PjY0LWssZD1oPDxrLTMyfGc+Pj42NC1rKSxnPWNbeFttXV0sZy5oaWdoPWwsZy5sb3c9ZDtnPWNbMF07aD1lWzBdO2cuaGlnaD1oLmhpZ2g7Zy5sb3c9aC5sb3c7Zm9yKGg9MDs1Pmg7aCsrKWZvcihrPTA7NT5rO2srKyltPWgrNSprLGc9ZVttXSxsPWNbbV0sbT1jWyhoKzEpJTUrNSprXSxkPWNbKGgrMiklNSs1KmtdLGcuaGlnaD1sLmhpZ2hefm0uaGlnaCZkLmhpZ2gsZy5sb3c9bC5sb3defm0ubG93JmQubG93O2c9ZVswXTtoPXlbZl07Zy5oaWdoXj1oLmhpZ2g7Zy5sb3dePWgubG93O319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxiPWEud29yZHMsYz04KmEuc2lnQnl0ZXMsZT0zMip0aGlzLmJsb2NrU2l6ZTtiW2M+Pj41XXw9MTw8MjQtYyUzMjtiWyh2LmNlaWwoKGMrMSkvZSkqZT4+PjUpLTFdfD0xMjg7YS5zaWdCeXRlcz00KmIubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtmb3IodmFyIGE9dGhpcy5fc3RhdGUsYj10aGlzLmNmZy5vdXRwdXRMZW5ndGgvOCxjPWIvOCxlPVtdLGg9MDtoPGM7aCsrKXt2YXIgZD1hW2hdLGY9ZC5oaWdoLGQ9ZC5sb3csZj0oZjw8OHxmPj4+MjQpJjE2NzExOTM1fChmPDwyNHxmPj4+OCkmNDI3ODI1NTM2MCxkPShkPDw4fGQ+Pj4yNCkmMTY3MTE5MzV8KGQ8PDI0fGQ+Pj44KSY0Mjc4MjU1MzYwO2UucHVzaChkKTtlLnB1c2goZik7fXJldHVybiBuZXcgdS5pbml0KGUsYik7fSxjbG9uZTpmdW5jdGlvbigpe2Zvcih2YXIgYT1yLmNsb25lLmNhbGwodGhpcyksYj1hLl9zdGF0ZT10aGlzLl9zdGF0ZS5zbGljZSgwKSxjPTA7MjU+YztjKyspYltjXT1iW2NdLmNsb25lKCk7cmV0dXJuIGE7fX0pO3AuU0hBMz1yLl9jcmVhdGVIZWxwZXIoZCk7cC5IbWFjU0hBMz1yLl9jcmVhdGVIbWFjSGVscGVyKGQpO30pKE1hdGgpOw==',
'/libs/crypto_js/rollups/sha224.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihnLGwpe3ZhciBmPXt9LGs9Zi5saWI9e30saD1mdW5jdGlvbigpe30sbT1rLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtoLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBoKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scT1rLldvcmRBcnJheT1tLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPWw/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHMpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGQ9MDtkPGE7ZCs9NCljLnB1c2goNDI5NDk2NzI5NipnLnJhbmRvbSgpfDApO3JldHVybiBuZXcgcS5pbml0KGMsYSk7fX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGQuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsZD1bXSxiPTA7YjxjO2IrPTIpZFtiPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGIsMiksMTYpPDwyNC00KihiJTgpO3JldHVybiBuZXcgcS5pbml0KGQsYy8yKTt9fSxuPXQuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBkPVtdLGI9MDtiPGE7YisrKWQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbYj4+PjJdPj4+MjQtOCooYiU0KSYyNTUpKTtyZXR1cm4gZC5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKTt9fSxqPXQuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShuLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gbi5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx3PWsuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1tLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBxLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ai5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yjt9cmV0dXJuIG5ldyBxLmluaXQodSxiKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2suSGFzaGVyPXcuZXh0ZW5kKHtjZmc6bS5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuIG5ldyBhLmluaXQoZCkuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihjLGQpe3JldHVybiBuZXcgdi5ITUFDLmluaXQoYSxkKS5maW5hbGl6ZShjKTt9O319KTt2YXIgdj1mLmFsZ289e307cmV0dXJuIGY7fShNYXRoKTsoZnVuY3Rpb24oZyl7Zm9yKHZhciBsPUNyeXB0b0pTLGY9bC5saWIsaz1mLldvcmRBcnJheSxoPWYuSGFzaGVyLGY9bC5hbGdvLG09W10scT1bXSx0PWZ1bmN0aW9uKGEpe3JldHVybiA0Mjk0OTY3Mjk2KihhLShhfDApKXwwO30scz0yLG49MDs2ND5uOyl7dmFyIGo7YTp7aj1zO2Zvcih2YXIgdz1nLnNxcnQoaiksdj0yO3Y8PXc7disrKWlmKCEoaiV2KSl7aj0hMTticmVhayBhO31qPSEwO31qJiYoOD5uJiYobVtuXT10KGcucG93KHMsMC41KSkpLHFbbl09dChnLnBvdyhzLDEvMykpLG4rKyk7cysrO312YXIgYT1bXSxmPWYuU0hBMjU2PWguZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGsuaW5pdChtLnNsaWNlKDApKTt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09Y1tkK3BdfDA7ZWxzZXt2YXIgaj1hW3AtMTVdLHI9YVtwLTJdO2FbcF09KChqPDwyNXxqPj4+NyleKGo8PDE0fGo+Pj4xOCleaj4+PjMpK2FbcC03XSsoKHI8PDE1fHI+Pj4xNyleKHI8PDEzfHI+Pj4xOSlecj4+PjEwKSthW3AtMTZdO31qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDA7fWJbMF09YlswXStlfDA7YlsxXT1iWzFdK2Z8MDtiWzJdPWJbMl0rZ3wwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2h8MDtiWzVdPWJbNV0rbHwwO2JbNl09Yls2XSttfDA7Yls3XT1iWzddK258MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxkPWEud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsZT04KmEuc2lnQnl0ZXM7ZFtlPj4+NV18PTEyODw8MjQtZSUzMjtkWyhlKzY0Pj4+OTw8NCkrMTRdPWcuZmxvb3IoYi80Mjk0OTY3Mjk2KTtkWyhlKzY0Pj4+OTw8NCkrMTVdPWI7YS5zaWdCeXRlcz00KmQubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9aC5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhO319KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZik7fSkoTWF0aCk7KGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pO30sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj1rLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7Zi5zaWdCeXRlcy09NDtyZXR1cm4gZjt9fSk7Zy5TSEEyMjQ9ay5fY3JlYXRlSGVscGVyKGYpO2cuSG1hY1NIQTIyND1rLl9jcmVhdGVIbWFjSGVscGVyKGYpO30pKCk7',
'/libs/crypto_js/rollups/sha512.js':'',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/md5.js':'',
'/Lib/threading.py':'',
'/Lib/heapq.py':'',
'/Lib/socket.py':'',
'/Lib/sysconfig.py':'IiIiQWNjZXNzIHRvIFB5dGhvbidzIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uIiIiDQoNCmltcG9ydCBvcw0KaW1wb3J0IHJlDQppbXBvcnQgc3lzDQpmcm9tIG9zLnBhdGggaW1wb3J0IHBhcmRpciwgcmVhbHBhdGgNCg0KX19hbGxfXyA9IFsNCiAgICAnZ2V0X2NvbmZpZ19oX2ZpbGVuYW1lJywNCiAgICAnZ2V0X2NvbmZpZ192YXInLA0KICAgICdnZXRfY29uZmlnX3ZhcnMnLA0KICAgICdnZXRfbWFrZWZpbGVfZmlsZW5hbWUnLA0KICAgICdnZXRfcGF0aCcsDQogICAgJ2dldF9wYXRoX25hbWVzJywNCiAgICAnZ2V0X3BhdGhzJywNCiAgICAnZ2V0X3BsYXRmb3JtJywNCiAgICAnZ2V0X3B5dGhvbl92ZXJzaW9uJywNCiAgICAnZ2V0X3NjaGVtZV9uYW1lcycsDQogICAgJ3BhcnNlX2NvbmZpZ19oJywNCl0NCg0KX0lOU1RBTExfU0NIRU1FUyA9IHsNCiAgICAncG9zaXhfcHJlZml4Jzogew0KICAgICAgICAnc3RkbGliJzogJ3tpbnN0YWxsZWRfYmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fScsDQogICAgICAgICdwbGF0c3RkbGliJzogJ3twbGF0YmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fScsDQogICAgICAgICdwdXJlbGliJzogJ3tiYXNlfS9saWIvcHl0aG9ue3B5X3ZlcnNpb25fc2hvcnR9L3NpdGUtcGFja2FnZXMnLA0KICAgICAgICAncGxhdGxpYic6ICd7cGxhdGJhc2V9L2xpYi9weXRob257cHlfdmVyc2lvbl9zaG9ydH0vc2l0ZS1wYWNrYWdlcycsDQogICAgICAgICdpbmNsdWRlJzoNCiAgICAgICAgICAgICd7aW5zdGFsbGVkX2Jhc2V9L2luY2x1ZGUvcHl0aG9ue3B5X3ZlcnNpb25fc2hvcnR9e2FiaWZsYWdzfScsDQogICAgICAgICdwbGF0aW5jbHVkZSc6DQogICAgICAgICAgICAne2luc3RhbGxlZF9wbGF0YmFzZX0vaW5jbHVkZS9weXRob257cHlfdmVyc2lvbl9zaG9ydH17YWJpZmxhZ3N9JywNCiAgICAgICAgJ3NjcmlwdHMnOiAne2Jhc2V9L2JpbicsDQogICAgICAgICdkYXRhJzogJ3tiYXNlfScsDQogICAgICAgIH0sDQogICAgJ3Bvc2l4X2hvbWUnOiB7DQogICAgICAgICdzdGRsaWInOiAne2luc3RhbGxlZF9iYXNlfS9saWIvcHl0aG9uJywNCiAgICAgICAgJ3BsYXRzdGRsaWInOiAne2Jhc2V9L2xpYi9weXRob24nLA0KICAgICAgICAncHVyZWxpYic6ICd7YmFzZX0vbGliL3B5dGhvbicsDQogICAgICAgICdwbGF0bGliJzogJ3tiYXNlfS9saWIvcHl0aG9uJywNCiAgICAgICAgJ2luY2x1ZGUnOiAne2luc3RhbGxlZF9iYXNlfS9pbmNsdWRlL3B5dGhvbicsDQogICAgICAgICdwbGF0aW5jbHVkZSc6ICd7aW5zdGFsbGVkX2Jhc2V9L2luY2x1ZGUvcHl0aG9uJywNCiAgICAgICAgJ3NjcmlwdHMnOiAne2Jhc2V9L2JpbicsDQogICAgICAgICdkYXRhJzogJ3tiYXNlfScsDQogICAgICAgIH0sDQogICAgJ250Jzogew0KICAgICAgICAnc3RkbGliJzogJ3tpbnN0YWxsZWRfYmFzZX0vTGliJywNCiAgICAgICAgJ3BsYXRzdGRsaWInOiAne2Jhc2V9L0xpYicsDQogICAgICAgICdwdXJlbGliJzogJ3tiYXNlfS9MaWIvc2l0ZS1wYWNrYWdlcycsDQogICAgICAgICdwbGF0bGliJzogJ3tiYXNlfS9MaWIvc2l0ZS1wYWNrYWdlcycsDQogICAgICAgICdpbmNsdWRlJzogJ3tpbnN0YWxsZWRfYmFzZX0vSW5jbHVkZScsDQogICAgICAgICdwbGF0aW5jbHVkZSc6ICd7aW5zdGFsbGVkX2Jhc2V9L0luY2x1ZGUnLA0KICAgICAgICAnc2NyaXB0cyc6ICd7YmFzZX0vU2NyaXB0cycsDQogICAgICAgICdkYXRhJzogJ3tiYXNlfScsDQogICAgICAgIH0sDQogICAgJ29zMic6IHsNCiAgICAgICAgJ3N0ZGxpYic6ICd7aW5zdGFsbGVkX2Jhc2V9L0xpYicsDQogICAgICAgICdwbGF0c3RkbGliJzogJ3tiYXNlfS9MaWInLA0KICAgICAgICAncHVyZWxpYic6ICd7YmFzZX0vTGliL3NpdGUtcGFja2FnZXMnLA0KICAgICAgICAncGxhdGxpYic6ICd7YmFzZX0vTGliL3NpdGUtcGFja2FnZXMnLA0KICAgICAgICAnaW5jbHVkZSc6ICd7aW5zdGFsbGVkX2Jhc2V9L0luY2x1ZGUnLA0KICAgICAgICAncGxhdGluY2x1ZGUnOiAne2luc3RhbGxlZF9iYXNlfS9JbmNsdWRlJywNCiAgICAgICAgJ3NjcmlwdHMnOiAne2Jhc2V9L1NjcmlwdHMnLA0KICAgICAgICAnZGF0YSc6ICd7YmFzZX0nLA0KICAgICAgICB9LA0KICAgICdvczJfaG9tZSc6IHsNCiAgICAgICAgJ3N0ZGxpYic6ICd7dXNlcmJhc2V9L2xpYi9weXRob257cHlfdmVyc2lvbl9zaG9ydH0nLA0KICAgICAgICAncGxhdHN0ZGxpYic6ICd7dXNlcmJhc2V9L2xpYi9weXRob257cHlfdmVyc2lvbl9zaG9ydH0nLA0KICAgICAgICAncHVyZWxpYic6ICd7dXNlcmJhc2V9L2xpYi9weXRob257cHlfdmVyc2lvbl9zaG9ydH0vc2l0ZS1wYWNrYWdlcycsDQogICAgICAgICdwbGF0bGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fS9zaXRlLXBhY2thZ2VzJywNCiAgICAgICAgJ2luY2x1ZGUnOiAne3VzZXJiYXNlfS9pbmNsdWRlL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fScsDQogICAgICAgICdzY3JpcHRzJzogJ3t1c2VyYmFzZX0vYmluJywNCiAgICAgICAgJ2RhdGEnOiAne3VzZXJiYXNlfScsDQogICAgICAgIH0sDQogICAgJ250X3VzZXInOiB7DQogICAgICAgICdzdGRsaWInOiAne3VzZXJiYXNlfS9QeXRob257cHlfdmVyc2lvbl9ub2RvdH0nLA0KICAgICAgICAncGxhdHN0ZGxpYic6ICd7dXNlcmJhc2V9L1B5dGhvbntweV92ZXJzaW9uX25vZG90fScsDQogICAgICAgICdwdXJlbGliJzogJ3t1c2VyYmFzZX0vUHl0aG9ue3B5X3ZlcnNpb25fbm9kb3R9L3NpdGUtcGFja2FnZXMnLA0KICAgICAgICAncGxhdGxpYic6ICd7dXNlcmJhc2V9L1B5dGhvbntweV92ZXJzaW9uX25vZG90fS9zaXRlLXBhY2thZ2VzJywNCiAgICAgICAgJ2luY2x1ZGUnOiAne3VzZXJiYXNlfS9QeXRob257cHlfdmVyc2lvbl9ub2RvdH0vSW5jbHVkZScsDQogICAgICAgICdzY3JpcHRzJzogJ3t1c2VyYmFzZX0vU2NyaXB0cycsDQogICAgICAgICdkYXRhJzogJ3t1c2VyYmFzZX0nLA0KICAgICAgICB9LA0KICAgICdwb3NpeF91c2VyJzogew0KICAgICAgICAnc3RkbGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fScsDQogICAgICAgICdwbGF0c3RkbGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fScsDQogICAgICAgICdwdXJlbGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fS9zaXRlLXBhY2thZ2VzJywNCiAgICAgICAgJ3BsYXRsaWInOiAne3VzZXJiYXNlfS9saWIvcHl0aG9ue3B5X3ZlcnNpb25fc2hvcnR9L3NpdGUtcGFja2FnZXMnLA0KICAgICAgICAnaW5jbHVkZSc6ICd7dXNlcmJhc2V9L2luY2x1ZGUvcHl0aG9ue3B5X3ZlcnNpb25fc2hvcnR9JywNCiAgICAgICAgJ3NjcmlwdHMnOiAne3VzZXJiYXNlfS9iaW4nLA0KICAgICAgICAnZGF0YSc6ICd7dXNlcmJhc2V9JywNCiAgICAgICAgfSwNCiAgICAnb3N4X2ZyYW1ld29ya191c2VyJzogew0KICAgICAgICAnc3RkbGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbicsDQogICAgICAgICdwbGF0c3RkbGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbicsDQogICAgICAgICdwdXJlbGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbi9zaXRlLXBhY2thZ2VzJywNCiAgICAgICAgJ3BsYXRsaWInOiAne3VzZXJiYXNlfS9saWIvcHl0aG9uL3NpdGUtcGFja2FnZXMnLA0KICAgICAgICAnaW5jbHVkZSc6ICd7dXNlcmJhc2V9L2luY2x1ZGUnLA0KICAgICAgICAnc2NyaXB0cyc6ICd7dXNlcmJhc2V9L2JpbicsDQogICAgICAgICdkYXRhJzogJ3t1c2VyYmFzZX0nLA0KICAgICAgICB9LA0KICAgIH0NCg0KX1NDSEVNRV9LRVlTID0gKCdzdGRsaWInLCAncGxhdHN0ZGxpYicsICdwdXJlbGliJywgJ3BsYXRsaWInLCAnaW5jbHVkZScsDQogICAgICAgICAgICAgICAgJ3NjcmlwdHMnLCAnZGF0YScpDQoNCiAjIEZJWE1FIGRvbid0IHJlbHkgb24gc3lzLnZlcnNpb24gaGVyZSwgaXRzIGZvcm1hdCBpcyBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwNCiAjIG9mIENQeXRob24sIHVzZSBzeXMudmVyc2lvbl9pbmZvIG9yIHN5cy5oZXh2ZXJzaW9uDQpfUFlfVkVSU0lPTiA9IHN5cy52ZXJzaW9uLnNwbGl0KClbMF0NCl9QWV9WRVJTSU9OX1NIT1JUID0gc3lzLnZlcnNpb25bOjNdDQpfUFlfVkVSU0lPTl9TSE9SVF9OT19ET1QgPSBfUFlfVkVSU0lPTlswXSArIF9QWV9WRVJTSU9OWzJdDQpfUFJFRklYID0gb3MucGF0aC5ub3JtcGF0aChzeXMucHJlZml4KQ0KX0JBU0VfUFJFRklYID0gb3MucGF0aC5ub3JtcGF0aChzeXMuYmFzZV9wcmVmaXgpDQpfRVhFQ19QUkVGSVggPSBvcy5wYXRoLm5vcm1wYXRoKHN5cy5leGVjX3ByZWZpeCkNCl9CQVNFX0VYRUNfUFJFRklYID0gb3MucGF0aC5ub3JtcGF0aChzeXMuYmFzZV9leGVjX3ByZWZpeCkNCl9DT05GSUdfVkFSUyA9IE5vbmUNCl9VU0VSX0JBU0UgPSBOb25lDQoNCg0KZGVmIF9zYWZlX3JlYWxwYXRoKHBhdGgpOg0KICAgIHRyeToNCiAgICAgICAgcmV0dXJuIHJlYWxwYXRoKHBhdGgpDQogICAgZXhjZXB0IE9TRXJyb3I6DQogICAgICAgIHJldHVybiBwYXRoDQoNCmlmIHN5cy5leGVjdXRhYmxlOg0KICAgIF9QUk9KRUNUX0JBU0UgPSBvcy5wYXRoLmRpcm5hbWUoX3NhZmVfcmVhbHBhdGgoc3lzLmV4ZWN1dGFibGUpKQ0KZWxzZToNCiAgICAjIHN5cy5leGVjdXRhYmxlIGNhbiBiZSBlbXB0eSBpZiBhcmd2WzBdIGhhcyBiZWVuIGNoYW5nZWQgYW5kIFB5dGhvbiBpcw0KICAgICMgdW5hYmxlIHRvIHJldHJpZXZlIHRoZSByZWFsIHByb2dyYW0gbmFtZQ0KICAgIF9QUk9KRUNUX0JBU0UgPSBfc2FmZV9yZWFscGF0aChvcy5nZXRjd2QoKSkNCg0KaWYgb3MubmFtZSA9PSAibnQiIGFuZCAicGNidWlsZCIgaW4gX1BST0pFQ1RfQkFTRVstODpdLmxvd2VyKCk6DQogICAgX1BST0pFQ1RfQkFTRSA9IF9zYWZlX3JlYWxwYXRoKG9zLnBhdGguam9pbihfUFJPSkVDVF9CQVNFLCBwYXJkaXIpKQ0KIyBQQy9WUzcuMQ0KaWYgb3MubmFtZSA9PSAibnQiIGFuZCAiXFxwY1xcdiIgaW4gX1BST0pFQ1RfQkFTRVstMTA6XS5sb3dlcigpOg0KICAgIF9QUk9KRUNUX0JBU0UgPSBfc2FmZV9yZWFscGF0aChvcy5wYXRoLmpvaW4oX1BST0pFQ1RfQkFTRSwgcGFyZGlyLCBwYXJkaXIpKQ0KIyBQQy9BTUQ2NA0KaWYgb3MubmFtZSA9PSAibnQiIGFuZCAiXFxwY2J1aWxkXFxhbWQ2NCIgaW4gX1BST0pFQ1RfQkFTRVstMTQ6XS5sb3dlcigpOg0KICAgIF9QUk9KRUNUX0JBU0UgPSBfc2FmZV9yZWFscGF0aChvcy5wYXRoLmpvaW4oX1BST0pFQ1RfQkFTRSwgcGFyZGlyLCBwYXJkaXIpKQ0KDQojIHNldCBmb3IgY3Jvc3MgYnVpbGRzDQppZiAiX1BZVEhPTl9QUk9KRUNUX0JBU0UiIGluIG9zLmVudmlyb246DQogICAgX1BST0pFQ1RfQkFTRSA9IF9zYWZlX3JlYWxwYXRoKG9zLmVudmlyb25bIl9QWVRIT05fUFJPSkVDVF9CQVNFIl0pDQoNCmRlZiBfaXNfcHl0aG9uX3NvdXJjZV9kaXIoZCk6DQogICAgZm9yIGZuIGluICgiU2V0dXAuZGlzdCIsICJTZXR1cC5sb2NhbCIpOg0KICAgICAgICBpZiBvcy5wYXRoLmlzZmlsZShvcy5wYXRoLmpvaW4oZCwgIk1vZHVsZXMiLCBmbikpOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICByZXR1cm4gRmFsc2UNCg0KX3N5c19ob21lID0gZ2V0YXR0cihzeXMsICdfaG9tZScsIE5vbmUpDQppZiBfc3lzX2hvbWUgYW5kIG9zLm5hbWUgPT0gJ250JyBhbmQgXA0KICAgIF9zeXNfaG9tZS5sb3dlcigpLmVuZHN3aXRoKCgncGNidWlsZCcsICdwY2J1aWxkXFxhbWQ2NCcpKToNCiAgICBfc3lzX2hvbWUgPSBvcy5wYXRoLmRpcm5hbWUoX3N5c19ob21lKQ0KICAgIGlmIF9zeXNfaG9tZS5lbmRzd2l0aCgncGNidWlsZCcpOiAgICMgbXVzdCBiZSBhbWQ2NA0KICAgICAgICBfc3lzX2hvbWUgPSBvcy5wYXRoLmRpcm5hbWUoX3N5c19ob21lKQ0KZGVmIGlzX3B5dGhvbl9idWlsZChjaGVja19ob21lPUZhbHNlKToNCiAgICBpZiBjaGVja19ob21lIGFuZCBfc3lzX2hvbWU6DQogICAgICAgIHJldHVybiBfaXNfcHl0aG9uX3NvdXJjZV9kaXIoX3N5c19ob21lKQ0KICAgIHJldHVybiBfaXNfcHl0aG9uX3NvdXJjZV9kaXIoX1BST0pFQ1RfQkFTRSkNCg0KX1BZVEhPTl9CVUlMRCA9IGlzX3B5dGhvbl9idWlsZChUcnVlKQ0KDQppZiBfUFlUSE9OX0JVSUxEOg0KICAgIGZvciBzY2hlbWUgaW4gKCdwb3NpeF9wcmVmaXgnLCAncG9zaXhfaG9tZScpOg0KICAgICAgICBfSU5TVEFMTF9TQ0hFTUVTW3NjaGVtZV1bJ2luY2x1ZGUnXSA9ICd7c3JjZGlyfS9JbmNsdWRlJw0KICAgICAgICBfSU5TVEFMTF9TQ0hFTUVTW3NjaGVtZV1bJ3BsYXRpbmNsdWRlJ10gPSAne3Byb2plY3RiYXNlfS8uJw0KDQoNCmRlZiBfc3Vic3RfdmFycyhzLCBsb2NhbF92YXJzKToNCiAgICB0cnk6DQogICAgICAgIHJldHVybiBzLmZvcm1hdCgqKmxvY2FsX3ZhcnMpDQogICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICByZXR1cm4gcy5mb3JtYXQoKipvcy5lbnZpcm9uKQ0KICAgICAgICBleGNlcHQgS2V5RXJyb3IgYXMgdmFyOg0KICAgICAgICAgICAgcmFpc2UgQXR0cmlidXRlRXJyb3IoJ3slc30nICUgdmFyKQ0KDQpkZWYgX2V4dGVuZF9kaWN0KHRhcmdldF9kaWN0LCBvdGhlcl9kaWN0KToNCiAgICB0YXJnZXRfa2V5cyA9IHRhcmdldF9kaWN0LmtleXMoKQ0KICAgIGZvciBrZXksIHZhbHVlIGluIG90aGVyX2RpY3QuaXRlbXMoKToNCiAgICAgICAgaWYga2V5IGluIHRhcmdldF9rZXlzOg0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgdGFyZ2V0X2RpY3Rba2V5XSA9IHZhbHVlDQoNCg0KZGVmIF9leHBhbmRfdmFycyhzY2hlbWUsIHZhcnMpOg0KICAgIHJlcyA9IHt9DQogICAgaWYgdmFycyBpcyBOb25lOg0KICAgICAgICB2YXJzID0ge30NCiAgICBfZXh0ZW5kX2RpY3QodmFycywgZ2V0X2NvbmZpZ192YXJzKCkpDQoNCiAgICBmb3Iga2V5LCB2YWx1ZSBpbiBfSU5TVEFMTF9TQ0hFTUVTW3NjaGVtZV0uaXRlbXMoKToNCiAgICAgICAgaWYgb3MubmFtZSBpbiAoJ3Bvc2l4JywgJ250Jyk6DQogICAgICAgICAgICB2YWx1ZSA9IG9zLnBhdGguZXhwYW5kdXNlcih2YWx1ZSkNCiAgICAgICAgcmVzW2tleV0gPSBvcy5wYXRoLm5vcm1wYXRoKF9zdWJzdF92YXJzKHZhbHVlLCB2YXJzKSkNCiAgICByZXR1cm4gcmVzDQoNCg0KZGVmIF9nZXRfZGVmYXVsdF9zY2hlbWUoKToNCiAgICBpZiBvcy5uYW1lID09ICdwb3NpeCc6DQogICAgICAgICMgdGhlIGRlZmF1bHQgc2NoZW1lIGZvciBwb3NpeCBpcyBwb3NpeF9wcmVmaXgNCiAgICAgICAgcmV0dXJuICdwb3NpeF9wcmVmaXgnDQogICAgcmV0dXJuIG9zLm5hbWUNCg0KDQpkZWYgX2dldHVzZXJiYXNlKCk6DQogICAgZW52X2Jhc2UgPSBvcy5lbnZpcm9uLmdldCgiUFlUSE9OVVNFUkJBU0UiLCBOb25lKQ0KDQogICAgZGVmIGpvaW51c2VyKCphcmdzKToNCiAgICAgICAgcmV0dXJuIG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmpvaW4oKmFyZ3MpKQ0KDQogICAgIyB3aGF0IGFib3V0ICdvczJlbXgnLCAncmlzY29zJyA/DQogICAgaWYgb3MubmFtZSA9PSAibnQiOg0KICAgICAgICBiYXNlID0gb3MuZW52aXJvbi5nZXQoIkFQUERBVEEiKSBvciAifiINCiAgICAgICAgaWYgZW52X2Jhc2U6DQogICAgICAgICAgICByZXR1cm4gZW52X2Jhc2UNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBqb2ludXNlcihiYXNlLCAiUHl0aG9uIikNCg0KICAgIGlmIHN5cy5wbGF0Zm9ybSA9PSAiZGFyd2luIjoNCiAgICAgICAgZnJhbWV3b3JrID0gZ2V0X2NvbmZpZ192YXIoIlBZVEhPTkZSQU1FV09SSyIpDQogICAgICAgIGlmIGZyYW1ld29yazoNCiAgICAgICAgICAgIGlmIGVudl9iYXNlOg0KICAgICAgICAgICAgICAgIHJldHVybiBlbnZfYmFzZQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICByZXR1cm4gam9pbnVzZXIoIn4iLCAiTGlicmFyeSIsIGZyYW1ld29yaywgIiVkLiVkIiAlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5cy52ZXJzaW9uX2luZm9bOjJdKQ0KDQogICAgaWYgZW52X2Jhc2U6DQogICAgICAgIHJldHVybiBlbnZfYmFzZQ0KICAgIGVsc2U6DQogICAgICAgIHJldHVybiBqb2ludXNlcigifiIsICIubG9jYWwiKQ0KDQoNCmRlZiBfcGFyc2VfbWFrZWZpbGUoZmlsZW5hbWUsIHZhcnM9Tm9uZSk6DQogICAgIiIiUGFyc2UgYSBNYWtlZmlsZS1zdHlsZSBmaWxlLg0KDQogICAgQSBkaWN0aW9uYXJ5IGNvbnRhaW5pbmcgbmFtZS92YWx1ZSBwYWlycyBpcyByZXR1cm5lZC4gIElmIGFuDQogICAgb3B0aW9uYWwgZGljdGlvbmFyeSBpcyBwYXNzZWQgaW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgaXQgaXMNCiAgICB1c2VkIGluc3RlYWQgb2YgYSBuZXcgZGljdGlvbmFyeS4NCiAgICAiIiINCiAgICAjIFJlZ2V4ZXMgbmVlZGVkIGZvciBwYXJzaW5nIE1ha2VmaWxlIChhbmQgc2ltaWxhciBzeW50YXhlcywNCiAgICAjIGxpa2Ugb2xkLXN0eWxlIFNldHVwIGZpbGVzKS4NCiAgICBfdmFyaWFibGVfcnggPSByZS5jb21waWxlKCIoW2EtekEtWl1bYS16QS1aMC05X10rKVxzKj1ccyooLiopIikNCiAgICBfZmluZHZhcjFfcnggPSByZS5jb21waWxlKHIiXCRcKChbQS1aYS16XVtBLVphLXowLTlfXSopXCkiKQ0KICAgIF9maW5kdmFyMl9yeCA9IHJlLmNvbXBpbGUociJcJHsoW0EtWmEtel1bQS1aYS16MC05X10qKX0iKQ0KDQogICAgaWYgdmFycyBpcyBOb25lOg0KICAgICAgICB2YXJzID0ge30NCiAgICBkb25lID0ge30NCiAgICBub3Rkb25lID0ge30NCg0KICAgIHdpdGggb3BlbihmaWxlbmFtZSwgZXJyb3JzPSJzdXJyb2dhdGVlc2NhcGUiKSBhcyBmOg0KICAgICAgICBsaW5lcyA9IGYucmVhZGxpbmVzKCkNCg0KICAgIGZvciBsaW5lIGluIGxpbmVzOg0KICAgICAgICBpZiBsaW5lLnN0YXJ0c3dpdGgoJyMnKSBvciBsaW5lLnN0cmlwKCkgPT0gJyc6DQogICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICBtID0gX3ZhcmlhYmxlX3J4Lm1hdGNoKGxpbmUpDQogICAgICAgIGlmIG06DQogICAgICAgICAgICBuLCB2ID0gbS5ncm91cCgxLCAyKQ0KICAgICAgICAgICAgdiA9IHYuc3RyaXAoKQ0KICAgICAgICAgICAgIyBgJCQnIGlzIGEgbGl0ZXJhbCBgJCcgaW4gbWFrZQ0KICAgICAgICAgICAgdG1wdiA9IHYucmVwbGFjZSgnJCQnLCAnJykNCg0KICAgICAgICAgICAgaWYgIiQiIGluIHRtcHY6DQogICAgICAgICAgICAgICAgbm90ZG9uZVtuXSA9IHYNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICB2ID0gaW50KHYpDQogICAgICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICMgaW5zZXJ0IGxpdGVyYWwgYCQnDQogICAgICAgICAgICAgICAgICAgIGRvbmVbbl0gPSB2LnJlcGxhY2UoJyQkJywgJyQnKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGRvbmVbbl0gPSB2DQoNCiAgICAjIGRvIHZhcmlhYmxlIGludGVycG9sYXRpb24gaGVyZQ0KICAgIHZhcmlhYmxlcyA9IGxpc3Qobm90ZG9uZS5rZXlzKCkpDQoNCiAgICAjIFZhcmlhYmxlcyB3aXRoIGEgJ1BZXycgcHJlZml4IGluIHRoZSBtYWtlZmlsZS4gVGhlc2UgbmVlZCB0bw0KICAgICMgYmUgbWFkZSBhdmFpbGFibGUgd2l0aG91dCB0aGF0IHByZWZpeCB0aHJvdWdoIHN5c2NvbmZpZy4NCiAgICAjIFNwZWNpYWwgY2FyZSBpcyBuZWVkZWQgdG8gZW5zdXJlIHRoYXQgdmFyaWFibGUgZXhwYW5zaW9uIHdvcmtzLCBldmVuDQogICAgIyBpZiB0aGUgZXhwYW5zaW9uIHVzZXMgdGhlIG5hbWUgd2l0aG91dCBhIHByZWZpeC4NCiAgICByZW5hbWVkX3ZhcmlhYmxlcyA9ICgnQ0ZMQUdTJywgJ0xERkxBR1MnLCAnQ1BQRkxBR1MnKQ0KDQogICAgd2hpbGUgbGVuKHZhcmlhYmxlcykgPiAwOg0KICAgICAgICBmb3IgbmFtZSBpbiB0dXBsZSh2YXJpYWJsZXMpOg0KICAgICAgICAgICAgdmFsdWUgPSBub3Rkb25lW25hbWVdDQogICAgICAgICAgICBtID0gX2ZpbmR2YXIxX3J4LnNlYXJjaCh2YWx1ZSkgb3IgX2ZpbmR2YXIyX3J4LnNlYXJjaCh2YWx1ZSkNCiAgICAgICAgICAgIGlmIG0gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgbiA9IG0uZ3JvdXAoMSkNCiAgICAgICAgICAgICAgICBmb3VuZCA9IFRydWUNCiAgICAgICAgICAgICAgICBpZiBuIGluIGRvbmU6DQogICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBzdHIoZG9uZVtuXSkNCiAgICAgICAgICAgICAgICBlbGlmIG4gaW4gbm90ZG9uZToNCiAgICAgICAgICAgICAgICAgICAgIyBnZXQgaXQgb24gYSBzdWJzZXF1ZW50IHJvdW5kDQogICAgICAgICAgICAgICAgICAgIGZvdW5kID0gRmFsc2UNCiAgICAgICAgICAgICAgICBlbGlmIG4gaW4gb3MuZW52aXJvbjoNCiAgICAgICAgICAgICAgICAgICAgIyBkbyBpdCBsaWtlIG1ha2U6IGZhbGwgYmFjayB0byBlbnZpcm9ubWVudA0KICAgICAgICAgICAgICAgICAgICBpdGVtID0gb3MuZW52aXJvbltuXQ0KDQogICAgICAgICAgICAgICAgZWxpZiBuIGluIHJlbmFtZWRfdmFyaWFibGVzOg0KICAgICAgICAgICAgICAgICAgICBpZiAobmFtZS5zdGFydHN3aXRoKCdQWV8nKSBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVbMzpdIGluIHJlbmFtZWRfdmFyaWFibGVzKToNCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSAiIg0KDQogICAgICAgICAgICAgICAgICAgIGVsaWYgJ1BZXycgKyBuIGluIG5vdGRvbmU6DQogICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IEZhbHNlDQoNCiAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBzdHIoZG9uZVsnUFlfJyArIG5dKQ0KDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgZG9uZVtuXSA9IGl0ZW0gPSAiIg0KDQogICAgICAgICAgICAgICAgaWYgZm91bmQ6DQogICAgICAgICAgICAgICAgICAgIGFmdGVyID0gdmFsdWVbbS5lbmQoKTpdDQogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbOm0uc3RhcnQoKV0gKyBpdGVtICsgYWZ0ZXINCiAgICAgICAgICAgICAgICAgICAgaWYgIiQiIGluIGFmdGVyOg0KICAgICAgICAgICAgICAgICAgICAgICAgbm90ZG9uZVtuYW1lXSA9IHZhbHVlDQogICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBpbnQodmFsdWUpDQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lW25hbWVdID0gdmFsdWUuc3RyaXAoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lW25hbWVdID0gdmFsdWUNCiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlcy5yZW1vdmUobmFtZSkNCg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbmFtZS5zdGFydHN3aXRoKCdQWV8nKSBcDQogICAgICAgICAgICAgICAgICAgICAgICBhbmQgbmFtZVszOl0gaW4gcmVuYW1lZF92YXJpYWJsZXM6DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gbmFtZVszOl0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBuYW1lIG5vdCBpbiBkb25lOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lW25hbWVdID0gdmFsdWUNCg0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAjIGJvZ3VzIHZhcmlhYmxlIHJlZmVyZW5jZSAoZS5nLiAicHJlZml4PSQvb3B0L3B5dGhvbiIpOw0KICAgICAgICAgICAgICAgICMganVzdCBkcm9wIGl0IHNpbmNlIHdlIGNhbid0IGRlYWwNCiAgICAgICAgICAgICAgICBkb25lW25hbWVdID0gdmFsdWUNCiAgICAgICAgICAgICAgICB2YXJpYWJsZXMucmVtb3ZlKG5hbWUpDQoNCiAgICAjIHN0cmlwIHNwdXJpb3VzIHNwYWNlcw0KICAgIGZvciBrLCB2IGluIGRvbmUuaXRlbXMoKToNCiAgICAgICAgaWYgaXNpbnN0YW5jZSh2LCBzdHIpOg0KICAgICAgICAgICAgZG9uZVtrXSA9IHYuc3RyaXAoKQ0KDQogICAgIyBzYXZlIHRoZSByZXN1bHRzIGluIHRoZSBnbG9iYWwgZGljdGlvbmFyeQ0KICAgIHZhcnMudXBkYXRlKGRvbmUpDQogICAgcmV0dXJuIHZhcnMNCg0KDQpkZWYgZ2V0X21ha2VmaWxlX2ZpbGVuYW1lKCk6DQogICAgIiIiUmV0dXJuIHRoZSBwYXRoIG9mIHRoZSBNYWtlZmlsZS4iIiINCiAgICBpZiBfUFlUSE9OX0JVSUxEOg0KICAgICAgICByZXR1cm4gb3MucGF0aC5qb2luKF9zeXNfaG9tZSBvciBfUFJPSkVDVF9CQVNFLCAiTWFrZWZpbGUiKQ0KICAgIGlmIGhhc2F0dHIoc3lzLCAnYWJpZmxhZ3MnKToNCiAgICAgICAgY29uZmlnX2Rpcl9uYW1lID0gJ2NvbmZpZy0lcyVzJyAlIChfUFlfVkVSU0lPTl9TSE9SVCwgc3lzLmFiaWZsYWdzKQ0KICAgIGVsc2U6DQogICAgICAgIGNvbmZpZ19kaXJfbmFtZSA9ICdjb25maWcnDQogICAgcmV0dXJuIG9zLnBhdGguam9pbihnZXRfcGF0aCgnc3RkbGliJyksIGNvbmZpZ19kaXJfbmFtZSwgJ01ha2VmaWxlJykNCg0KZGVmIF9nZW5lcmF0ZV9wb3NpeF92YXJzKCk6DQogICAgIiIiR2VuZXJhdGUgdGhlIFB5dGhvbiBtb2R1bGUgY29udGFpbmluZyBidWlsZC10aW1lIHZhcmlhYmxlcy4iIiINCiAgICBpbXBvcnQgcHByaW50DQogICAgdmFycyA9IHt9DQogICAgIyBsb2FkIHRoZSBpbnN0YWxsZWQgTWFrZWZpbGU6DQogICAgbWFrZWZpbGUgPSBnZXRfbWFrZWZpbGVfZmlsZW5hbWUoKQ0KICAgIHRyeToNCiAgICAgICAgX3BhcnNlX21ha2VmaWxlKG1ha2VmaWxlLCB2YXJzKQ0KICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6DQogICAgICAgIG1zZyA9ICJpbnZhbGlkIFB5dGhvbiBpbnN0YWxsYXRpb246IHVuYWJsZSB0byBvcGVuICVzIiAlIG1ha2VmaWxlDQogICAgICAgIGlmIGhhc2F0dHIoZSwgInN0cmVycm9yIik6DQogICAgICAgICAgICBtc2cgPSBtc2cgKyAiICglcykiICUgZS5zdHJlcnJvcg0KICAgICAgICByYWlzZSBJT0Vycm9yKG1zZykNCiAgICAjIGxvYWQgdGhlIGluc3RhbGxlZCBweWNvbmZpZy5oOg0KICAgIGNvbmZpZ19oID0gZ2V0X2NvbmZpZ19oX2ZpbGVuYW1lKCkNCiAgICB0cnk6DQogICAgICAgIHdpdGggb3Blbihjb25maWdfaCkgYXMgZjoNCiAgICAgICAgICAgIHBhcnNlX2NvbmZpZ19oKGYsIHZhcnMpDQogICAgZXhjZXB0IElPRXJyb3IgYXMgZToNCiAgICAgICAgbXNnID0gImludmFsaWQgUHl0aG9uIGluc3RhbGxhdGlvbjogdW5hYmxlIHRvIG9wZW4gJXMiICUgY29uZmlnX2gNCiAgICAgICAgaWYgaGFzYXR0cihlLCAic3RyZXJyb3IiKToNCiAgICAgICAgICAgIG1zZyA9IG1zZyArICIgKCVzKSIgJSBlLnN0cmVycm9yDQogICAgICAgIHJhaXNlIElPRXJyb3IobXNnKQ0KICAgICMgT24gQUlYLCB0aGVyZSBhcmUgd3JvbmcgcGF0aHMgdG8gdGhlIGxpbmtlciBzY3JpcHRzIGluIHRoZSBNYWtlZmlsZQ0KICAgICMgLS0gdGhlc2UgcGF0aHMgYXJlIHJlbGF0aXZlIHRvIHRoZSBQeXRob24gc291cmNlLCBidXQgd2hlbiBpbnN0YWxsZWQNCiAgICAjIHRoZSBzY3JpcHRzIGFyZSBpbiBhbm90aGVyIGRpcmVjdG9yeS4NCiAgICBpZiBfUFlUSE9OX0JVSUxEOg0KICAgICAgICB2YXJzWydMRFNIQVJFRCddID0gdmFyc1snQkxEU0hBUkVEJ10NCg0KICAgIGRlc3RmaWxlID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXyksICdfc3lzY29uZmlnZGF0YS5weScpDQogICAgd2l0aCBvcGVuKGRlc3RmaWxlLCAndycsIGVuY29kaW5nPSd1dGY4JykgYXMgZjoNCiAgICAgICAgZi53cml0ZSgnIyBzeXN0ZW0gY29uZmlndXJhdGlvbiBnZW5lcmF0ZWQgYW5kIHVzZWQgYnknDQogICAgICAgICAgICAgICAgJyB0aGUgc3lzY29uZmlnIG1vZHVsZVxuJykNCiAgICAgICAgZi53cml0ZSgnYnVpbGRfdGltZV92YXJzID0gJykNCiAgICAgICAgcHByaW50LnBwcmludCh2YXJzLCBzdHJlYW09ZikNCg0KZGVmIF9pbml0X3Bvc2l4KHZhcnMpOg0KICAgICIiIkluaXRpYWxpemUgdGhlIG1vZHVsZSBhcyBhcHByb3ByaWF0ZSBmb3IgUE9TSVggc3lzdGVtcy4iIiINCiAgICAjIF9zeXNjb25maWdkYXRhIGlzIGdlbmVyYXRlZCBhdCBidWlsZCB0aW1lLCBzZWUgX2dlbmVyYXRlX3Bvc2l4X3ZhcnMoKQ0KICAgIGZyb20gX3N5c2NvbmZpZ2RhdGEgaW1wb3J0IGJ1aWxkX3RpbWVfdmFycw0KICAgIHZhcnMudXBkYXRlKGJ1aWxkX3RpbWVfdmFycykNCg0KZGVmIF9pbml0X25vbl9wb3NpeCh2YXJzKToNCiAgICAiIiJJbml0aWFsaXplIHRoZSBtb2R1bGUgYXMgYXBwcm9wcmlhdGUgZm9yIE5UIiIiDQogICAgIyBzZXQgYmFzaWMgaW5zdGFsbCBkaXJlY3Rvcmllcw0KICAgIHZhcnNbJ0xJQkRFU1QnXSA9IGdldF9wYXRoKCdzdGRsaWInKQ0KICAgIHZhcnNbJ0JJTkxJQkRFU1QnXSA9IGdldF9wYXRoKCdwbGF0c3RkbGliJykNCiAgICB2YXJzWydJTkNMVURFUFknXSA9IGdldF9wYXRoKCdpbmNsdWRlJykNCiAgICB2YXJzWydTTyddID0gJy5weWQnDQogICAgdmFyc1snRVhFJ10gPSAnLmV4ZScNCiAgICB2YXJzWydWRVJTSU9OJ10gPSBfUFlfVkVSU0lPTl9TSE9SVF9OT19ET1QNCiAgICB2YXJzWydCSU5ESVInXSA9IG9zLnBhdGguZGlybmFtZShfc2FmZV9yZWFscGF0aChzeXMuZXhlY3V0YWJsZSkpDQoNCiMNCiMgcHVibGljIEFQSXMNCiMNCg0KDQpkZWYgcGFyc2VfY29uZmlnX2goZnAsIHZhcnM9Tm9uZSk6DQogICAgIiIiUGFyc2UgYSBjb25maWcuaC1zdHlsZSBmaWxlLg0KDQogICAgQSBkaWN0aW9uYXJ5IGNvbnRhaW5pbmcgbmFtZS92YWx1ZSBwYWlycyBpcyByZXR1cm5lZC4gIElmIGFuDQogICAgb3B0aW9uYWwgZGljdGlvbmFyeSBpcyBwYXNzZWQgaW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCwgaXQgaXMNCiAgICB1c2VkIGluc3RlYWQgb2YgYSBuZXcgZGljdGlvbmFyeS4NCiAgICAiIiINCiAgICBpZiB2YXJzIGlzIE5vbmU6DQogICAgICAgIHZhcnMgPSB7fQ0KICAgIGRlZmluZV9yeCA9IHJlLmNvbXBpbGUoIiNkZWZpbmUgKFtBLVpdW0EtWmEtejAtOV9dKykgKC4qKVxuIikNCiAgICB1bmRlZl9yeCA9IHJlLmNvbXBpbGUoIi9bKl0gI3VuZGVmIChbQS1aXVtBLVphLXowLTlfXSspIFsqXS9cbiIpDQoNCiAgICB3aGlsZSBUcnVlOg0KICAgICAgICBsaW5lID0gZnAucmVhZGxpbmUoKQ0KICAgICAgICBpZiBub3QgbGluZToNCiAgICAgICAgICAgIGJyZWFrDQogICAgICAgIG0gPSBkZWZpbmVfcngubWF0Y2gobGluZSkNCiAgICAgICAgaWYgbToNCiAgICAgICAgICAgIG4sIHYgPSBtLmdyb3VwKDEsIDIpDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgdiA9IGludCh2KQ0KICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgdmFyc1tuXSA9IHYNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIG0gPSB1bmRlZl9yeC5tYXRjaChsaW5lKQ0KICAgICAgICAgICAgaWYgbToNCiAgICAgICAgICAgICAgICB2YXJzW20uZ3JvdXAoMSldID0gMA0KICAgIHJldHVybiB2YXJzDQoNCg0KZGVmIGdldF9jb25maWdfaF9maWxlbmFtZSgpOg0KICAgICIiIlJldHVybiB0aGUgcGF0aCBvZiBweWNvbmZpZy5oLiIiIg0KICAgIGlmIF9QWVRIT05fQlVJTEQ6DQogICAgICAgIGlmIG9zLm5hbWUgPT0gIm50IjoNCiAgICAgICAgICAgIGluY19kaXIgPSBvcy5wYXRoLmpvaW4oX3N5c19ob21lIG9yIF9QUk9KRUNUX0JBU0UsICJQQyIpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBpbmNfZGlyID0gX3N5c19ob21lIG9yIF9QUk9KRUNUX0JBU0UNCiAgICBlbHNlOg0KICAgICAgICBpbmNfZGlyID0gZ2V0X3BhdGgoJ3BsYXRpbmNsdWRlJykNCiAgICByZXR1cm4gb3MucGF0aC5qb2luKGluY19kaXIsICdweWNvbmZpZy5oJykNCg0KDQpkZWYgZ2V0X3NjaGVtZV9uYW1lcygpOg0KICAgICIiIlJldHVybiBhIHR1cGxlIGNvbnRhaW5pbmcgdGhlIHNjaGVtZXMgbmFtZXMuIiIiDQogICAgcmV0dXJuIHR1cGxlKHNvcnRlZChfSU5TVEFMTF9TQ0hFTUVTKSkNCg0KDQpkZWYgZ2V0X3BhdGhfbmFtZXMoKToNCiAgICAiIiJSZXR1cm4gYSB0dXBsZSBjb250YWluaW5nIHRoZSBwYXRocyBuYW1lcy4iIiINCiAgICByZXR1cm4gX1NDSEVNRV9LRVlTDQoNCg0KZGVmIGdldF9wYXRocyhzY2hlbWU9X2dldF9kZWZhdWx0X3NjaGVtZSgpLCB2YXJzPU5vbmUsIGV4cGFuZD1UcnVlKToNCiAgICAiIiJSZXR1cm4gYSBtYXBwaW5nIGNvbnRhaW5pbmcgYW4gaW5zdGFsbCBzY2hlbWUuDQoNCiAgICBgYHNjaGVtZWBgIGlzIHRoZSBpbnN0YWxsIHNjaGVtZSBuYW1lLiBJZiBub3QgcHJvdmlkZWQsIGl0IHdpbGwNCiAgICByZXR1cm4gdGhlIGRlZmF1bHQgc2NoZW1lIGZvciB0aGUgY3VycmVudCBwbGF0Zm9ybS4NCiAgICAiIiINCiAgICBpZiBleHBhbmQ6DQogICAgICAgIHJldHVybiBfZXhwYW5kX3ZhcnMoc2NoZW1lLCB2YXJzKQ0KICAgIGVsc2U6DQogICAgICAgIHJldHVybiBfSU5TVEFMTF9TQ0hFTUVTW3NjaGVtZV0NCg0KDQpkZWYgZ2V0X3BhdGgobmFtZSwgc2NoZW1lPV9nZXRfZGVmYXVsdF9zY2hlbWUoKSwgdmFycz1Ob25lLCBleHBhbmQ9VHJ1ZSk6DQogICAgIiIiUmV0dXJuIGEgcGF0aCBjb3JyZXNwb25kaW5nIHRvIHRoZSBzY2hlbWUuDQoNCiAgICBgYHNjaGVtZWBgIGlzIHRoZSBpbnN0YWxsIHNjaGVtZSBuYW1lLg0KICAgICIiIg0KICAgIHJldHVybiBnZXRfcGF0aHMoc2NoZW1lLCB2YXJzLCBleHBhbmQpW25hbWVdDQoNCg0KZGVmIGdldF9jb25maWdfdmFycygqYXJncyk6DQogICAgIiIiV2l0aCBubyBhcmd1bWVudHMsIHJldHVybiBhIGRpY3Rpb25hcnkgb2YgYWxsIGNvbmZpZ3VyYXRpb24NCiAgICB2YXJpYWJsZXMgcmVsZXZhbnQgZm9yIHRoZSBjdXJyZW50IHBsYXRmb3JtLg0KDQogICAgT24gVW5peCwgdGhpcyBtZWFucyBldmVyeSB2YXJpYWJsZSBkZWZpbmVkIGluIFB5dGhvbidzIGluc3RhbGxlZCBNYWtlZmlsZTsNCiAgICBPbiBXaW5kb3dzIGl0J3MgYSBtdWNoIHNtYWxsZXIgc2V0Lg0KDQogICAgV2l0aCBhcmd1bWVudHMsIHJldHVybiBhIGxpc3Qgb2YgdmFsdWVzIHRoYXQgcmVzdWx0IGZyb20gbG9va2luZyB1cA0KICAgIGVhY2ggYXJndW1lbnQgaW4gdGhlIGNvbmZpZ3VyYXRpb24gdmFyaWFibGUgZGljdGlvbmFyeS4NCiAgICAiIiINCiAgICBnbG9iYWwgX0NPTkZJR19WQVJTDQogICAgaWYgX0NPTkZJR19WQVJTIGlzIE5vbmU6DQogICAgICAgIF9DT05GSUdfVkFSUyA9IHt9DQogICAgICAgICMgTm9ybWFsaXplZCB2ZXJzaW9ucyBvZiBwcmVmaXggYW5kIGV4ZWNfcHJlZml4IGFyZSBoYW5keSB0byBoYXZlOw0KICAgICAgICAjIGluIGZhY3QsIHRoZXNlIGFyZSB0aGUgc3RhbmRhcmQgdmVyc2lvbnMgdXNlZCBtb3N0IHBsYWNlcyBpbiB0aGUNCiAgICAgICAgIyBEaXN0dXRpbHMuDQogICAgICAgIF9DT05GSUdfVkFSU1sncHJlZml4J10gPSBfUFJFRklYDQogICAgICAgIF9DT05GSUdfVkFSU1snZXhlY19wcmVmaXgnXSA9IF9FWEVDX1BSRUZJWA0KICAgICAgICBfQ09ORklHX1ZBUlNbJ3B5X3ZlcnNpb24nXSA9IF9QWV9WRVJTSU9ODQogICAgICAgIF9DT05GSUdfVkFSU1sncHlfdmVyc2lvbl9zaG9ydCddID0gX1BZX1ZFUlNJT05fU0hPUlQNCiAgICAgICAgX0NPTkZJR19WQVJTWydweV92ZXJzaW9uX25vZG90J10gPSBfUFlfVkVSU0lPTlswXSArIF9QWV9WRVJTSU9OWzJdDQogICAgICAgIF9DT05GSUdfVkFSU1snaW5zdGFsbGVkX2Jhc2UnXSA9IF9CQVNFX1BSRUZJWA0KICAgICAgICBfQ09ORklHX1ZBUlNbJ2Jhc2UnXSA9IF9QUkVGSVgNCiAgICAgICAgX0NPTkZJR19WQVJTWydpbnN0YWxsZWRfcGxhdGJhc2UnXSA9IF9CQVNFX0VYRUNfUFJFRklYDQogICAgICAgIF9DT05GSUdfVkFSU1sncGxhdGJhc2UnXSA9IF9FWEVDX1BSRUZJWA0KICAgICAgICBfQ09ORklHX1ZBUlNbJ3Byb2plY3RiYXNlJ10gPSBfUFJPSkVDVF9CQVNFDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIF9DT05GSUdfVkFSU1snYWJpZmxhZ3MnXSA9IHN5cy5hYmlmbGFncw0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICAjIHN5cy5hYmlmbGFncyBtYXkgbm90IGJlIGRlZmluZWQgb24gYWxsIHBsYXRmb3Jtcy4NCiAgICAgICAgICAgIF9DT05GSUdfVkFSU1snYWJpZmxhZ3MnXSA9ICcnDQoNCiAgICAgICAgaWYgb3MubmFtZSBpbiAoJ250JywgJ29zMicpOg0KICAgICAgICAgICAgX2luaXRfbm9uX3Bvc2l4KF9DT05GSUdfVkFSUykNCiAgICAgICAgaWYgb3MubmFtZSA9PSAncG9zaXgnOg0KICAgICAgICAgICAgX2luaXRfcG9zaXgoX0NPTkZJR19WQVJTKQ0KICAgICAgICAjIFNldHRpbmcgJ3VzZXJiYXNlJyBpcyBkb25lIGJlbG93IHRoZSBjYWxsIHRvIHRoZQ0KICAgICAgICAjIGluaXQgZnVuY3Rpb24gdG8gZW5hYmxlIHVzaW5nICdnZXRfY29uZmlnX3ZhcicgaW4NCiAgICAgICAgIyB0aGUgaW5pdC1mdW5jdGlvbi4NCiAgICAgICAgX0NPTkZJR19WQVJTWyd1c2VyYmFzZSddID0gX2dldHVzZXJiYXNlKCkNCg0KICAgICAgICAjIEFsd2F5cyBjb252ZXJ0IHNyY2RpciB0byBhbiBhYnNvbHV0ZSBwYXRoDQogICAgICAgIHNyY2RpciA9IF9DT05GSUdfVkFSUy5nZXQoJ3NyY2RpcicsIF9QUk9KRUNUX0JBU0UpDQogICAgICAgIGlmIG9zLm5hbWUgPT0gJ3Bvc2l4JzoNCiAgICAgICAgICAgIGlmIF9QWVRIT05fQlVJTEQ6DQogICAgICAgICAgICAgICAgIyBJZiBzcmNkaXIgaXMgYSByZWxhdGl2ZSBwYXRoICh0eXBpY2FsbHkgJy4nIG9yICcuLicpDQogICAgICAgICAgICAgICAgIyB0aGVuIGl0IHNob3VsZCBiZSBpbnRlcnByZXRlZCByZWxhdGl2ZSB0byB0aGUgZGlyZWN0b3J5DQogICAgICAgICAgICAgICAgIyBjb250YWluaW5nIE1ha2VmaWxlLg0KICAgICAgICAgICAgICAgIGJhc2UgPSBvcy5wYXRoLmRpcm5hbWUoZ2V0X21ha2VmaWxlX2ZpbGVuYW1lKCkpDQogICAgICAgICAgICAgICAgc3JjZGlyID0gb3MucGF0aC5qb2luKGJhc2UsIHNyY2RpcikNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgIyBzcmNkaXIgaXMgbm90IG1lYW5pbmdmdWwgc2luY2UgdGhlIGluc3RhbGxhdGlvbiBpcw0KICAgICAgICAgICAgICAgICMgc3ByZWFkIGFib3V0IHRoZSBmaWxlc3lzdGVtLiAgV2UgY2hvb3NlIHRoZQ0KICAgICAgICAgICAgICAgICMgZGlyZWN0b3J5IGNvbnRhaW5pbmcgdGhlIE1ha2VmaWxlIHNpbmNlIHdlIGtub3cgaXQNCiAgICAgICAgICAgICAgICAjIGV4aXN0cy4NCiAgICAgICAgICAgICAgICBzcmNkaXIgPSBvcy5wYXRoLmRpcm5hbWUoZ2V0X21ha2VmaWxlX2ZpbGVuYW1lKCkpDQogICAgICAgIF9DT05GSUdfVkFSU1snc3JjZGlyJ10gPSBfc2FmZV9yZWFscGF0aChzcmNkaXIpDQoNCiAgICAgICAgIyBPUyBYIHBsYXRmb3JtcyByZXF1aXJlIHNwZWNpYWwgY3VzdG9taXphdGlvbiB0byBoYW5kbGUNCiAgICAgICAgIyBtdWx0aS1hcmNoaXRlY3R1cmUsIG11bHRpLW9zLXZlcnNpb24gaW5zdGFsbGVycw0KICAgICAgICBpZiBzeXMucGxhdGZvcm0gPT0gJ2Rhcndpbic6DQogICAgICAgICAgICBpbXBvcnQgX29zeF9zdXBwb3J0DQogICAgICAgICAgICBfb3N4X3N1cHBvcnQuY3VzdG9taXplX2NvbmZpZ192YXJzKF9DT05GSUdfVkFSUykNCg0KICAgIGlmIGFyZ3M6DQogICAgICAgIHZhbHMgPSBbXQ0KICAgICAgICBmb3IgbmFtZSBpbiBhcmdzOg0KICAgICAgICAgICAgdmFscy5hcHBlbmQoX0NPTkZJR19WQVJTLmdldChuYW1lKSkNCiAgICAgICAgcmV0dXJuIHZhbHMNCiAgICBlbHNlOg0KICAgICAgICByZXR1cm4gX0NPTkZJR19WQVJTDQoNCg0KZGVmIGdldF9jb25maWdfdmFyKG5hbWUpOg0KICAgICIiIlJldHVybiB0aGUgdmFsdWUgb2YgYSBzaW5nbGUgdmFyaWFibGUgdXNpbmcgdGhlIGRpY3Rpb25hcnkgcmV0dXJuZWQgYnkNCiAgICAnZ2V0X2NvbmZpZ192YXJzKCknLg0KDQogICAgRXF1aXZhbGVudCB0byBnZXRfY29uZmlnX3ZhcnMoKS5nZXQobmFtZSkNCiAgICAiIiINCiAgICByZXR1cm4gZ2V0X2NvbmZpZ192YXJzKCkuZ2V0KG5hbWUpDQoNCg0KZGVmIGdldF9wbGF0Zm9ybSgpOg0KICAgICIiIlJldHVybiBhIHN0cmluZyB0aGF0IGlkZW50aWZpZXMgdGhlIGN1cnJlbnQgcGxhdGZvcm0uDQoNCiAgICBUaGlzIGlzIHVzZWQgbWFpbmx5IHRvIGRpc3Rpbmd1aXNoIHBsYXRmb3JtLXNwZWNpZmljIGJ1aWxkIGRpcmVjdG9yaWVzIGFuZA0KICAgIHBsYXRmb3JtLXNwZWNpZmljIGJ1aWx0IGRpc3RyaWJ1dGlvbnMuICBUeXBpY2FsbHkgaW5jbHVkZXMgdGhlIE9TIG5hbWUNCiAgICBhbmQgdmVyc2lvbiBhbmQgdGhlIGFyY2hpdGVjdHVyZSAoYXMgc3VwcGxpZWQgYnkgJ29zLnVuYW1lKCknKSwNCiAgICBhbHRob3VnaCB0aGUgZXhhY3QgaW5mb3JtYXRpb24gaW5jbHVkZWQgZGVwZW5kcyBvbiB0aGUgT1M7IGVnLiBmb3IgSVJJWA0KICAgIHRoZSBhcmNoaXRlY3R1cmUgaXNuJ3QgcGFydGljdWxhcmx5IGltcG9ydGFudCAoSVJJWCBvbmx5IHJ1bnMgb24gU0dJDQogICAgaGFyZHdhcmUpLCBidXQgZm9yIExpbnV4IHRoZSBrZXJuZWwgdmVyc2lvbiBpc24ndCBwYXJ0aWN1bGFybHkNCiAgICBpbXBvcnRhbnQuDQoNCiAgICBFeGFtcGxlcyBvZiByZXR1cm5lZCB2YWx1ZXM6DQogICAgICAgbGludXgtaTU4Ng0KICAgICAgIGxpbnV4LWFscGhhICg/KQ0KICAgICAgIHNvbGFyaXMtMi42LXN1bjR1DQogICAgICAgaXJpeC01LjMNCiAgICAgICBpcml4NjQtNi4yDQoNCiAgICBXaW5kb3dzIHdpbGwgcmV0dXJuIG9uZSBvZjoNCiAgICAgICB3aW4tYW1kNjQgKDY0Yml0IFdpbmRvd3Mgb24gQU1ENjQgKGFrYSB4ODZfNjQsIEludGVsNjQsIEVNNjRULCBldGMpDQogICAgICAgd2luLWlhNjQgKDY0Yml0IFdpbmRvd3Mgb24gSXRhbml1bSkNCiAgICAgICB3aW4zMiAoYWxsIG90aGVycyAtIHNwZWNpZmljYWxseSwgc3lzLnBsYXRmb3JtIGlzIHJldHVybmVkKQ0KDQogICAgRm9yIG90aGVyIG5vbi1QT1NJWCBwbGF0Zm9ybXMsIGN1cnJlbnRseSBqdXN0IHJldHVybnMgJ3N5cy5wbGF0Zm9ybScuDQogICAgIiIiDQogICAgaWYgb3MubmFtZSA9PSAnbnQnOg0KICAgICAgICAjIHNuaWZmIHN5cy52ZXJzaW9uIGZvciBhcmNoaXRlY3R1cmUuDQogICAgICAgIHByZWZpeCA9ICIgYml0ICgiDQogICAgICAgIGkgPSBzeXMudmVyc2lvbi5maW5kKHByZWZpeCkNCiAgICAgICAgaWYgaSA9PSAtMToNCiAgICAgICAgICAgIHJldHVybiBzeXMucGxhdGZvcm0NCiAgICAgICAgaiA9IHN5cy52ZXJzaW9uLmZpbmQoIikiLCBpKQ0KICAgICAgICBsb29rID0gc3lzLnZlcnNpb25baStsZW4ocHJlZml4KTpqXS5sb3dlcigpDQogICAgICAgIGlmIGxvb2sgPT0gJ2FtZDY0JzoNCiAgICAgICAgICAgIHJldHVybiAnd2luLWFtZDY0Jw0KICAgICAgICBpZiBsb29rID09ICdpdGFuaXVtJzoNCiAgICAgICAgICAgIHJldHVybiAnd2luLWlhNjQnDQogICAgICAgIHJldHVybiBzeXMucGxhdGZvcm0NCg0KICAgIGlmIG9zLm5hbWUgIT0gInBvc2l4IiBvciBub3QgaGFzYXR0cihvcywgJ3VuYW1lJyk6DQogICAgICAgICMgWFhYIHdoYXQgYWJvdXQgdGhlIGFyY2hpdGVjdHVyZT8gTlQgaXMgSW50ZWwgb3IgQWxwaGENCiAgICAgICAgcmV0dXJuIHN5cy5wbGF0Zm9ybQ0KDQogICAgIyBTZXQgZm9yIGNyb3NzIGJ1aWxkcyBleHBsaWNpdGx5DQogICAgaWYgIl9QWVRIT05fSE9TVF9QTEFURk9STSIgaW4gb3MuZW52aXJvbjoNCiAgICAgICAgcmV0dXJuIG9zLmVudmlyb25bIl9QWVRIT05fSE9TVF9QTEFURk9STSJdDQoNCiAgICAjIFRyeSB0byBkaXN0aW5ndWlzaCB2YXJpb3VzIGZsYXZvdXJzIG9mIFVuaXgNCiAgICBvc25hbWUsIGhvc3QsIHJlbGVhc2UsIHZlcnNpb24sIG1hY2hpbmUgPSBvcy51bmFtZSgpDQoNCiAgICAjIENvbnZlcnQgdGhlIE9TIG5hbWUgdG8gbG93ZXJjYXNlLCByZW1vdmUgJy8nIGNoYXJhY3RlcnMNCiAgICAjICh0byBhY2NvbW1vZGF0ZSBCU0QvT1MpLCBhbmQgdHJhbnNsYXRlIHNwYWNlcyAoZm9yICJQb3dlciBNYWNpbnRvc2giKQ0KICAgIG9zbmFtZSA9IG9zbmFtZS5sb3dlcigpLnJlcGxhY2UoJy8nLCAnJykNCiAgICBtYWNoaW5lID0gbWFjaGluZS5yZXBsYWNlKCcgJywgJ18nKQ0KICAgIG1hY2hpbmUgPSBtYWNoaW5lLnJlcGxhY2UoJy8nLCAnLScpDQoNCiAgICBpZiBvc25hbWVbOjVdID09ICJsaW51eCI6DQogICAgICAgICMgQXQgbGVhc3Qgb24gTGludXgvSW50ZWwsICdtYWNoaW5lJyBpcyB0aGUgcHJvY2Vzc29yIC0tDQogICAgICAgICMgaTM4NiwgZXRjLg0KICAgICAgICAjIFhYWCB3aGF0IGFib3V0IEFscGhhLCBTUEFSQywgZXRjPw0KICAgICAgICByZXR1cm4gICIlcy0lcyIgJSAob3NuYW1lLCBtYWNoaW5lKQ0KICAgIGVsaWYgb3NuYW1lWzo1XSA9PSAic3Vub3MiOg0KICAgICAgICBpZiByZWxlYXNlWzBdID49ICI1IjogICAgICAgICAgICMgU3VuT1MgNSA9PSBTb2xhcmlzIDINCiAgICAgICAgICAgIG9zbmFtZSA9ICJzb2xhcmlzIg0KICAgICAgICAgICAgcmVsZWFzZSA9ICIlZC4lcyIgJSAoaW50KHJlbGVhc2VbMF0pIC0gMywgcmVsZWFzZVsyOl0pDQogICAgICAgICAgICAjIFdlIGNhbid0IHVzZSAicGxhdGZvcm0uYXJjaGl0ZWN0dXJlKClbMF0iIGJlY2F1c2UgYQ0KICAgICAgICAgICAgIyBib290c3RyYXAgcHJvYmxlbS4gV2UgdXNlIGEgZGljdCB0byBnZXQgYW4gZXJyb3INCiAgICAgICAgICAgICMgaWYgc29tZSBzdXNwaWNpb3VzIGhhcHBlbnMuDQogICAgICAgICAgICBiaXRuZXNzID0gezIxNDc0ODM2NDc6IjMyYml0IiwgOTIyMzM3MjAzNjg1NDc3NTgwNzoiNjRiaXQifQ0KICAgICAgICAgICAgbWFjaGluZSArPSAiLiVzIiAlIGJpdG5lc3Nbc3lzLm1heHNpemVdDQogICAgICAgICMgZmFsbCB0aHJvdWdoIHRvIHN0YW5kYXJkIG9zbmFtZS1yZWxlYXNlLW1hY2hpbmUgcmVwcmVzZW50YXRpb24NCiAgICBlbGlmIG9zbmFtZVs6NF0gPT0gImlyaXgiOiAgICAgICAgICAgICAgIyBjb3VsZCBiZSAiaXJpeDY0IiENCiAgICAgICAgcmV0dXJuICIlcy0lcyIgJSAob3NuYW1lLCByZWxlYXNlKQ0KICAgIGVsaWYgb3NuYW1lWzozXSA9PSAiYWl4IjoNCiAgICAgICAgcmV0dXJuICIlcy0lcy4lcyIgJSAob3NuYW1lLCB2ZXJzaW9uLCByZWxlYXNlKQ0KICAgIGVsaWYgb3NuYW1lWzo2XSA9PSAiY3lnd2luIjoNCiAgICAgICAgb3NuYW1lID0gImN5Z3dpbiINCiAgICAgICAgcmVsX3JlID0gcmUuY29tcGlsZShyJ1tcZC5dKycpDQogICAgICAgIG0gPSByZWxfcmUubWF0Y2gocmVsZWFzZSkNCiAgICAgICAgaWYgbToNCiAgICAgICAgICAgIHJlbGVhc2UgPSBtLmdyb3VwKCkNCiAgICBlbGlmIG9zbmFtZVs6Nl0gPT0gImRhcndpbiI6DQogICAgICAgIGltcG9ydCBfb3N4X3N1cHBvcnQNCiAgICAgICAgb3NuYW1lLCByZWxlYXNlLCBtYWNoaW5lID0gX29zeF9zdXBwb3J0LmdldF9wbGF0Zm9ybV9vc3goDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldF9jb25maWdfdmFycygpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvc25hbWUsIHJlbGVhc2UsIG1hY2hpbmUpDQoNCiAgICByZXR1cm4gIiVzLSVzLSVzIiAlIChvc25hbWUsIHJlbGVhc2UsIG1hY2hpbmUpDQoNCg0KZGVmIGdldF9weXRob25fdmVyc2lvbigpOg0KICAgIHJldHVybiBfUFlfVkVSU0lPTl9TSE9SVA0KDQoNCmRlZiBfcHJpbnRfZGljdCh0aXRsZSwgZGF0YSk6DQogICAgZm9yIGluZGV4LCAoa2V5LCB2YWx1ZSkgaW4gZW51bWVyYXRlKHNvcnRlZChkYXRhLml0ZW1zKCkpKToNCiAgICAgICAgaWYgaW5kZXggPT0gMDoNCiAgICAgICAgICAgIHByaW50KCclczogJyAlICh0aXRsZSkpDQogICAgICAgIHByaW50KCdcdCVzID0gIiVzIicgJSAoa2V5LCB2YWx1ZSkpDQoNCg0KZGVmIF9tYWluKCk6DQogICAgIiIiRGlzcGxheSBhbGwgaW5mb3JtYXRpb24gc3lzY29uZmlnIGRldGFpbnMuIiIiDQogICAgaWYgJy0tZ2VuZXJhdGUtcG9zaXgtdmFycycgaW4gc3lzLmFyZ3Y6DQogICAgICAgIF9nZW5lcmF0ZV9wb3NpeF92YXJzKCkNCiAgICAgICAgcmV0dXJuDQogICAgcHJpbnQoJ1BsYXRmb3JtOiAiJXMiJyAlIGdldF9wbGF0Zm9ybSgpKQ0KICAgIHByaW50KCdQeXRob24gdmVyc2lvbjogIiVzIicgJSBnZXRfcHl0aG9uX3ZlcnNpb24oKSkNCiAgICBwcmludCgnQ3VycmVudCBpbnN0YWxsYXRpb24gc2NoZW1lOiAiJXMiJyAlIF9nZXRfZGVmYXVsdF9zY2hlbWUoKSkNCiAgICBwcmludCgpDQogICAgX3ByaW50X2RpY3QoJ1BhdGhzJywgZ2V0X3BhdGhzKCkpDQogICAgcHJpbnQoKQ0KICAgIF9wcmludF9kaWN0KCdWYXJpYWJsZXMnLCBnZXRfY29uZmlnX3ZhcnMoKSkNCg0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIF9tYWluKCkNCg==',
'/Lib/_socket.py':'',
'/Lib/calendar.py':'IiIiQ2FsZW5kYXIgcHJpbnRpbmcgZnVuY3Rpb25zCgpOb3RlIHdoZW4gY29tcGFyaW5nIHRoZXNlIGNhbGVuZGFycyB0byB0aGUgb25lcyBwcmludGVkIGJ5IGNhbCgxKTogQnkKZGVmYXVsdCwgdGhlc2UgY2FsZW5kYXJzIGhhdmUgTW9uZGF5IGFzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWssIGFuZApTdW5kYXkgYXMgdGhlIGxhc3QgKHRoZSBFdXJvcGVhbiBjb252ZW50aW9uKS4gVXNlIHNldGZpcnN0d2Vla2RheSgpIHRvCnNldCB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwPU1vbmRheSwgNj1TdW5kYXkpLiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGxvY2FsZSBhcyBfbG9jYWxlCgpfX2FsbF9fID0gWyJJbGxlZ2FsTW9udGhFcnJvciIsICJJbGxlZ2FsV2Vla2RheUVycm9yIiwgInNldGZpcnN0d2Vla2RheSIsCiAgICAgICAgICAgImZpcnN0d2Vla2RheSIsICJpc2xlYXAiLCAibGVhcGRheXMiLCAid2Vla2RheSIsICJtb250aHJhbmdlIiwKICAgICAgICAgICAibW9udGhjYWxlbmRhciIsICJwcm1vbnRoIiwgIm1vbnRoIiwgInByY2FsIiwgImNhbGVuZGFyIiwKICAgICAgICAgICAidGltZWdtIiwgIm1vbnRoX25hbWUiLCAibW9udGhfYWJiciIsICJkYXlfbmFtZSIsICJkYXlfYWJiciJdCgojIEV4Y2VwdGlvbiByYWlzZWQgZm9yIGJhZCBpbnB1dCAod2l0aCBzdHJpbmcgcGFyYW1ldGVyIGZvciBkZXRhaWxzKQplcnJvciA9IFZhbHVlRXJyb3IKCiMgRXhjZXB0aW9ucyByYWlzZWQgZm9yIGJhZCBpbnB1dApjbGFzcyBJbGxlZ2FsTW9udGhFcnJvcihWYWx1ZUVycm9yKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBtb250aCk6CiAgICAgICAgc2VsZi5tb250aCA9IG1vbnRoCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gImJhZCBtb250aCBudW1iZXIgJXI7IG11c3QgYmUgMS0xMiIgJSBzZWxmLm1vbnRoCgoKY2xhc3MgSWxsZWdhbFdlZWtkYXlFcnJvcihWYWx1ZUVycm9yKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB3ZWVrZGF5KToKICAgICAgICBzZWxmLndlZWtkYXkgPSB3ZWVrZGF5CiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gImJhZCB3ZWVrZGF5IG51bWJlciAlcjsgbXVzdCBiZSAwIChNb25kYXkpIHRvIDYgKFN1bmRheSkiICUgc2VsZi53ZWVrZGF5CgoKIyBDb25zdGFudHMgZm9yIG1vbnRocyByZWZlcmVuY2VkIGxhdGVyCkphbnVhcnkgPSAxCkZlYnJ1YXJ5ID0gMgoKIyBOdW1iZXIgb2YgZGF5cyBwZXIgbW9udGggKGV4Y2VwdCBmb3IgRmVicnVhcnkgaW4gbGVhcCB5ZWFycykKbWRheXMgPSBbMCwgMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV0KCiMgVGhpcyBtb2R1bGUgdXNlZCB0byBoYXZlIGhhcmQtY29kZWQgbGlzdHMgb2YgZGF5IGFuZCBtb250aCBuYW1lcywgYXMKIyBFbmdsaXNoIHN0cmluZ3MuICBUaGUgY2xhc3NlcyBmb2xsb3dpbmcgZW11bGF0ZSBhIHJlYWQtb25seSB2ZXJzaW9uIG9mCiMgdGhhdCwgYnV0IHN1cHBseSBsb2NhbGl6ZWQgbmFtZXMuICBOb3RlIHRoYXQgdGhlIHZhbHVlcyBhcmUgY29tcHV0ZWQKIyBmcmVzaCBvbiBlYWNoIGNhbGwsIGluIGNhc2UgdGhlIHVzZXIgY2hhbmdlcyBsb2NhbGUgYmV0d2VlbiBjYWxscy4KCmNsYXNzIF9sb2NhbGl6ZWRfbW9udGg6CgogICAgX21vbnRocyA9IFtkYXRldGltZS5kYXRlKDIwMDEsIGkrMSwgMSkuc3RyZnRpbWUgZm9yIGkgaW4gcmFuZ2UoMTIpXQogICAgX21vbnRocy5pbnNlcnQoMCwgbGFtYmRhIHg6ICIiKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBmb3JtYXQpOgogICAgICAgIHNlbGYuZm9ybWF0ID0gZm9ybWF0CgogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGkpOgogICAgICAgIGZ1bmNzID0gc2VsZi5fbW9udGhzW2ldCiAgICAgICAgaWYgaXNpbnN0YW5jZShpLCBzbGljZSk6CiAgICAgICAgICAgIHJldHVybiBbZihzZWxmLmZvcm1hdCkgZm9yIGYgaW4gZnVuY3NdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIGZ1bmNzKHNlbGYuZm9ybWF0KQoKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAxMwoKCmNsYXNzIF9sb2NhbGl6ZWRfZGF5OgoKICAgICMgSmFudWFyeSAxLCAyMDAxLCB3YXMgYSBNb25kYXkuCiAgICBfZGF5cyA9IFtkYXRldGltZS5kYXRlKDIwMDEsIDEsIGkrMSkuc3RyZnRpbWUgZm9yIGkgaW4gcmFuZ2UoNyldCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGZvcm1hdCk6CiAgICAgICAgc2VsZi5mb3JtYXQgPSBmb3JtYXQKCiAgICBkZWYgX19nZXRpdGVtX18oc2VsZiwgaSk6CiAgICAgICAgZnVuY3MgPSBzZWxmLl9kYXlzW2ldCiAgICAgICAgaWYgaXNpbnN0YW5jZShpLCBzbGljZSk6CiAgICAgICAgICAgIHJldHVybiBbZihzZWxmLmZvcm1hdCkgZm9yIGYgaW4gZnVuY3NdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIGZ1bmNzKHNlbGYuZm9ybWF0KQoKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiA3CgoKIyBGdWxsIGFuZCBhYmJyZXZpYXRlZCBuYW1lcyBvZiB3ZWVrZGF5cwpkYXlfbmFtZSA9IF9sb2NhbGl6ZWRfZGF5KCclQScpCmRheV9hYmJyID0gX2xvY2FsaXplZF9kYXkoJyVhJykKCiMgRnVsbCBhbmQgYWJicmV2aWF0ZWQgbmFtZXMgb2YgbW9udGhzICgxLWJhc2VkIGFycmF5cyEhISkKbW9udGhfbmFtZSA9IF9sb2NhbGl6ZWRfbW9udGgoJyVCJykKbW9udGhfYWJiciA9IF9sb2NhbGl6ZWRfbW9udGgoJyViJykKCiMgQ29uc3RhbnRzIGZvciB3ZWVrZGF5cwooTU9OREFZLCBUVUVTREFZLCBXRURORVNEQVksIFRIVVJTREFZLCBGUklEQVksIFNBVFVSREFZLCBTVU5EQVkpID0gcmFuZ2UoNykKCgpkZWYgaXNsZWFwKHllYXIpOgogICAgIiIiUmV0dXJuIFRydWUgZm9yIGxlYXAgeWVhcnMsIEZhbHNlIGZvciBub24tbGVhcCB5ZWFycy4iIiIKICAgIHJldHVybiB5ZWFyICUgNCA9PSAwIGFuZCAoeWVhciAlIDEwMCAhPSAwIG9yIHllYXIgJSA0MDAgPT0gMCkKCgpkZWYgbGVhcGRheXMoeTEsIHkyKToKICAgICIiIlJldHVybiBudW1iZXIgb2YgbGVhcCB5ZWFycyBpbiByYW5nZSBbeTEsIHkyKS4KICAgICAgIEFzc3VtZSB5MSA8PSB5Mi4iIiIKICAgIHkxIC09IDEKICAgIHkyIC09IDEKICAgIHJldHVybiAoeTIvLzQgLSB5MS8vNCkgLSAoeTIvLzEwMCAtIHkxLy8xMDApICsgKHkyLy80MDAgLSB5MS8vNDAwKQoKCmRlZiB3ZWVrZGF5KHllYXIsIG1vbnRoLCBkYXkpOgogICAgIiIiUmV0dXJuIHdlZWtkYXkgKDAtNiB+IE1vbi1TdW4pIGZvciB5ZWFyICgxOTcwLS4uLiksIG1vbnRoICgxLTEyKSwKICAgICAgIGRheSAoMS0zMSkuIiIiCiAgICByZXR1cm4gZGF0ZXRpbWUuZGF0ZSh5ZWFyLCBtb250aCwgZGF5KS53ZWVrZGF5KCkKCgpkZWYgbW9udGhyYW5nZSh5ZWFyLCBtb250aCk6CiAgICAiIiJSZXR1cm4gd2Vla2RheSAoMC02IH4gTW9uLVN1bikgYW5kIG51bWJlciBvZiBkYXlzICgyOC0zMSkgZm9yCiAgICAgICB5ZWFyLCBtb250aC4iIiIKICAgIGlmIG5vdCAxIDw9IG1vbnRoIDw9IDEyOgogICAgICAgIHJhaXNlIElsbGVnYWxNb250aEVycm9yKG1vbnRoKQogICAgZGF5MSA9IHdlZWtkYXkoeWVhciwgbW9udGgsIDEpCiAgICBuZGF5cyA9IG1kYXlzW21vbnRoXSArIChtb250aCA9PSBGZWJydWFyeSBhbmQgaXNsZWFwKHllYXIpKQogICAgcmV0dXJuIGRheTEsIG5kYXlzCgoKY2xhc3MgQ2FsZW5kYXIob2JqZWN0KToKICAgICIiIgogICAgQmFzZSBjYWxlbmRhciBjbGFzcy4gVGhpcyBjbGFzcyBkb2Vzbid0IGRvIGFueSBmb3JtYXR0aW5nLiBJdCBzaW1wbHkKICAgIHByb3ZpZGVzIGRhdGEgdG8gc3ViY2xhc3Nlcy4KICAgICIiIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBmaXJzdHdlZWtkYXk9MCk6CiAgICAgICAgc2VsZi5maXJzdHdlZWtkYXkgPSBmaXJzdHdlZWtkYXkgIyAwID0gTW9uZGF5LCA2ID0gU3VuZGF5CgogICAgZGVmIGdldGZpcnN0d2Vla2RheShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fZmlyc3R3ZWVrZGF5ICUgNwoKICAgIGRlZiBzZXRmaXJzdHdlZWtkYXkoc2VsZiwgZmlyc3R3ZWVrZGF5KToKICAgICAgICBzZWxmLl9maXJzdHdlZWtkYXkgPSBmaXJzdHdlZWtkYXkKCiAgICBmaXJzdHdlZWtkYXkgPSBwcm9wZXJ0eShnZXRmaXJzdHdlZWtkYXksIHNldGZpcnN0d2Vla2RheSkKCiAgICBkZWYgaXRlcndlZWtkYXlzKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIFJldHVybiBhIGl0ZXJhdG9yIGZvciBvbmUgd2VlayBvZiB3ZWVrZGF5IG51bWJlcnMgc3RhcnRpbmcgd2l0aCB0aGUKICAgICAgICBjb25maWd1cmVkIGZpcnN0IG9uZS4KICAgICAgICAiIiIKICAgICAgICBmb3IgaSBpbiByYW5nZShzZWxmLmZpcnN0d2Vla2RheSwgc2VsZi5maXJzdHdlZWtkYXkgKyA3KToKICAgICAgICAgICAgeWllbGQgaSU3CgogICAgZGVmIGl0ZXJtb250aGRhdGVzKHNlbGYsIHllYXIsIG1vbnRoKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm4gYW4gaXRlcmF0b3IgZm9yIG9uZSBtb250aC4gVGhlIGl0ZXJhdG9yIHdpbGwgeWllbGQgZGF0ZXRpbWUuZGF0ZQogICAgICAgIHZhbHVlcyBhbmQgd2lsbCBhbHdheXMgaXRlcmF0ZSB0aHJvdWdoIGNvbXBsZXRlIHdlZWtzLCBzbyBpdCB3aWxsIHlpZWxkCiAgICAgICAgZGF0ZXMgb3V0c2lkZSB0aGUgc3BlY2lmaWVkIG1vbnRoLgogICAgICAgICIiIgogICAgICAgIGRhdGUgPSBkYXRldGltZS5kYXRlKHllYXIsIG1vbnRoLCAxKQogICAgICAgICMgR28gYmFjayB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSB3ZWVrCiAgICAgICAgZGF5cyA9IChkYXRlLndlZWtkYXkoKSAtIHNlbGYuZmlyc3R3ZWVrZGF5KSAlIDcKICAgICAgICBkYXRlIC09IGRhdGV0aW1lLnRpbWVkZWx0YShkYXlzPWRheXMpCiAgICAgICAgb25lZGF5ID0gZGF0ZXRpbWUudGltZWRlbHRhKGRheXM9MSkKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICB5aWVsZCBkYXRlCiAgICAgICAgICAgIGRhdGUgKz0gb25lZGF5CiAgICAgICAgICAgIGlmIGRhdGUubW9udGggIT0gbW9udGggYW5kIGRhdGUud2Vla2RheSgpID09IHNlbGYuZmlyc3R3ZWVrZGF5OgogICAgICAgICAgICAgICAgYnJlYWsKCiAgICBkZWYgaXRlcm1vbnRoZGF5czIoc2VsZiwgeWVhciwgbW9udGgpOgogICAgICAgICIiIgogICAgICAgIExpa2UgaXRlcm1vbnRoZGF0ZXMoKSwgYnV0IHdpbGwgeWllbGQgKGRheSBudW1iZXIsIHdlZWtkYXkgbnVtYmVyKQogICAgICAgIHR1cGxlcy4gRm9yIGRheXMgb3V0c2lkZSB0aGUgc3BlY2lmaWVkIG1vbnRoIHRoZSBkYXkgbnVtYmVyIGlzIDAuCiAgICAgICAgIiIiCiAgICAgICAgZm9yIGRhdGUgaW4gc2VsZi5pdGVybW9udGhkYXRlcyh5ZWFyLCBtb250aCk6CiAgICAgICAgICAgIGlmIGRhdGUubW9udGggIT0gbW9udGg6CiAgICAgICAgICAgICAgICB5aWVsZCAoMCwgZGF0ZS53ZWVrZGF5KCkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB5aWVsZCAoZGF0ZS5kYXksIGRhdGUud2Vla2RheSgpKQoKICAgIGRlZiBpdGVybW9udGhkYXlzKHNlbGYsIHllYXIsIG1vbnRoKToKICAgICAgICAiIiIKICAgICAgICBMaWtlIGl0ZXJtb250aGRhdGVzKCksIGJ1dCB3aWxsIHlpZWxkIGRheSBudW1iZXJzLiBGb3IgZGF5cyBvdXRzaWRlCiAgICAgICAgdGhlIHNwZWNpZmllZCBtb250aCB0aGUgZGF5IG51bWJlciBpcyAwLgogICAgICAgICIiIgogICAgICAgIGZvciBkYXRlIGluIHNlbGYuaXRlcm1vbnRoZGF0ZXMoeWVhciwgbW9udGgpOgogICAgICAgICAgICBpZiBkYXRlLm1vbnRoICE9IG1vbnRoOgogICAgICAgICAgICAgICAgeWllbGQgMAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgeWllbGQgZGF0ZS5kYXkKCiAgICBkZWYgbW9udGhkYXRlc2NhbGVuZGFyKHNlbGYsIHllYXIsIG1vbnRoKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm4gYSBtYXRyaXggKGxpc3Qgb2YgbGlzdHMpIHJlcHJlc2VudGluZyBhIG1vbnRoJ3MgY2FsZW5kYXIuCiAgICAgICAgRWFjaCByb3cgcmVwcmVzZW50cyBhIHdlZWs7IHdlZWsgZW50cmllcyBhcmUgZGF0ZXRpbWUuZGF0ZSB2YWx1ZXMuCiAgICAgICAgIiIiCiAgICAgICAgZGF0ZXMgPSBsaXN0KHNlbGYuaXRlcm1vbnRoZGF0ZXMoeWVhciwgbW9udGgpKQogICAgICAgIHJldHVybiBbIGRhdGVzW2k6aSs3XSBmb3IgaSBpbiByYW5nZSgwLCBsZW4oZGF0ZXMpLCA3KSBdCgogICAgZGVmIG1vbnRoZGF5czJjYWxlbmRhcihzZWxmLCB5ZWFyLCBtb250aCk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJuIGEgbWF0cml4IHJlcHJlc2VudGluZyBhIG1vbnRoJ3MgY2FsZW5kYXIuCiAgICAgICAgRWFjaCByb3cgcmVwcmVzZW50cyBhIHdlZWs7IHdlZWsgZW50cmllcyBhcmUKICAgICAgICAoZGF5IG51bWJlciwgd2Vla2RheSBudW1iZXIpIHR1cGxlcy4gRGF5IG51bWJlcnMgb3V0c2lkZSB0aGlzIG1vbnRoCiAgICAgICAgYXJlIHplcm8uCiAgICAgICAgIiIiCiAgICAgICAgZGF5cyA9IGxpc3Qoc2VsZi5pdGVybW9udGhkYXlzMih5ZWFyLCBtb250aCkpCiAgICAgICAgcmV0dXJuIFsgZGF5c1tpOmkrN10gZm9yIGkgaW4gcmFuZ2UoMCwgbGVuKGRheXMpLCA3KSBdCgogICAgZGVmIG1vbnRoZGF5c2NhbGVuZGFyKHNlbGYsIHllYXIsIG1vbnRoKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm4gYSBtYXRyaXggcmVwcmVzZW50aW5nIGEgbW9udGgncyBjYWxlbmRhci4KICAgICAgICBFYWNoIHJvdyByZXByZXNlbnRzIGEgd2VlazsgZGF5cyBvdXRzaWRlIHRoaXMgbW9udGggYXJlIHplcm8uCiAgICAgICAgIiIiCiAgICAgICAgZGF5cyA9IGxpc3Qoc2VsZi5pdGVybW9udGhkYXlzKHllYXIsIG1vbnRoKSkKICAgICAgICByZXR1cm4gWyBkYXlzW2k6aSs3XSBmb3IgaSBpbiByYW5nZSgwLCBsZW4oZGF5cyksIDcpIF0KCiAgICBkZWYgeWVhcmRhdGVzY2FsZW5kYXIoc2VsZiwgeWVhciwgd2lkdGg9Myk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJuIHRoZSBkYXRhIGZvciB0aGUgc3BlY2lmaWVkIHllYXIgcmVhZHkgZm9yIGZvcm1hdHRpbmcuIFRoZSByZXR1cm4KICAgICAgICB2YWx1ZSBpcyBhIGxpc3Qgb2YgbW9udGggcm93cy4gRWFjaCBtb250aCByb3cgY29udGFpbnMgdXB0byB3aWR0aCBtb250aHMuCiAgICAgICAgRWFjaCBtb250aCBjb250YWlucyBiZXR3ZWVuIDQgYW5kIDYgd2Vla3MgYW5kIGVhY2ggd2VlayBjb250YWlucyAxLTcKICAgICAgICBkYXlzLiBEYXlzIGFyZSBkYXRldGltZS5kYXRlIG9iamVjdHMuCiAgICAgICAgIiIiCiAgICAgICAgbW9udGhzID0gWwogICAgICAgICAgICBzZWxmLm1vbnRoZGF0ZXNjYWxlbmRhcih5ZWFyLCBpKQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShKYW51YXJ5LCBKYW51YXJ5KzEyKQogICAgICAgIF0KICAgICAgICByZXR1cm4gW21vbnRoc1tpOmkrd2lkdGhdIGZvciBpIGluIHJhbmdlKDAsIGxlbihtb250aHMpLCB3aWR0aCkgXQoKICAgIGRlZiB5ZWFyZGF5czJjYWxlbmRhcihzZWxmLCB5ZWFyLCB3aWR0aD0zKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm4gdGhlIGRhdGEgZm9yIHRoZSBzcGVjaWZpZWQgeWVhciByZWFkeSBmb3IgZm9ybWF0dGluZyAoc2ltaWxhciB0bwogICAgICAgIHllYXJkYXRlc2NhbGVuZGFyKCkpLiBFbnRyaWVzIGluIHRoZSB3ZWVrIGxpc3RzIGFyZQogICAgICAgIChkYXkgbnVtYmVyLCB3ZWVrZGF5IG51bWJlcikgdHVwbGVzLiBEYXkgbnVtYmVycyBvdXRzaWRlIHRoaXMgbW9udGggYXJlCiAgICAgICAgemVyby4KICAgICAgICAiIiIKICAgICAgICBtb250aHMgPSBbCiAgICAgICAgICAgIHNlbGYubW9udGhkYXlzMmNhbGVuZGFyKHllYXIsIGkpCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKEphbnVhcnksIEphbnVhcnkrMTIpCiAgICAgICAgXQogICAgICAgIHJldHVybiBbbW9udGhzW2k6aSt3aWR0aF0gZm9yIGkgaW4gcmFuZ2UoMCwgbGVuKG1vbnRocyksIHdpZHRoKSBdCgogICAgZGVmIHllYXJkYXlzY2FsZW5kYXIoc2VsZiwgeWVhciwgd2lkdGg9Myk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJuIHRoZSBkYXRhIGZvciB0aGUgc3BlY2lmaWVkIHllYXIgcmVhZHkgZm9yIGZvcm1hdHRpbmcgKHNpbWlsYXIgdG8KICAgICAgICB5ZWFyZGF0ZXNjYWxlbmRhcigpKS4gRW50cmllcyBpbiB0aGUgd2VlayBsaXN0cyBhcmUgZGF5IG51bWJlcnMuCiAgICAgICAgRGF5IG51bWJlcnMgb3V0c2lkZSB0aGlzIG1vbnRoIGFyZSB6ZXJvLgogICAgICAgICIiIgogICAgICAgIG1vbnRocyA9IFsKICAgICAgICAgICAgc2VsZi5tb250aGRheXNjYWxlbmRhcih5ZWFyLCBpKQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShKYW51YXJ5LCBKYW51YXJ5KzEyKQogICAgICAgIF0KICAgICAgICByZXR1cm4gW21vbnRoc1tpOmkrd2lkdGhdIGZvciBpIGluIHJhbmdlKDAsIGxlbihtb250aHMpLCB3aWR0aCkgXQoKCmNsYXNzIFRleHRDYWxlbmRhcihDYWxlbmRhcik6CiAgICAiIiIKICAgIFN1YmNsYXNzIG9mIENhbGVuZGFyIHRoYXQgb3V0cHV0cyBhIGNhbGVuZGFyIGFzIGEgc2ltcGxlIHBsYWluIHRleHQKICAgIHNpbWlsYXIgdG8gdGhlIFVOSVggcHJvZ3JhbSBjYWwuCiAgICAiIiIKCiAgICBkZWYgcHJ3ZWVrKHNlbGYsIHRoZXdlZWssIHdpZHRoKToKICAgICAgICAiIiIKICAgICAgICBQcmludCBhIHNpbmdsZSB3ZWVrIChubyBuZXdsaW5lKS4KICAgICAgICAiIiIKICAgICAgICBwcmludChzZWxmLmZvcm1hdHdlZWsodGhld2Vlaywgd2lkdGgpLCBlbmQ9JyAnKQoKICAgIGRlZiBmb3JtYXRkYXkoc2VsZiwgZGF5LCB3ZWVrZGF5LCB3aWR0aCk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJucyBhIGZvcm1hdHRlZCBkYXkuCiAgICAgICAgIiIiCiAgICAgICAgaWYgZGF5ID09IDA6CiAgICAgICAgICAgIHMgPSAnJwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHMgPSAnJTJpJyAlIGRheSAgICAgICAgICAgICAjIHJpZ2h0LWFsaWduIHNpbmdsZS1kaWdpdCBkYXlzCiAgICAgICAgcmV0dXJuIHMuY2VudGVyKHdpZHRoKQoKICAgIGRlZiBmb3JtYXR3ZWVrKHNlbGYsIHRoZXdlZWssIHdpZHRoKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm5zIGEgc2luZ2xlIHdlZWsgaW4gYSBzdHJpbmcgKG5vIG5ld2xpbmUpLgogICAgICAgICIiIgogICAgICAgIHJldHVybiAnICcuam9pbihzZWxmLmZvcm1hdGRheShkLCB3ZCwgd2lkdGgpIGZvciAoZCwgd2QpIGluIHRoZXdlZWspCgogICAgZGVmIGZvcm1hdHdlZWtkYXkoc2VsZiwgZGF5LCB3aWR0aCk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJucyBhIGZvcm1hdHRlZCB3ZWVrIGRheSBuYW1lLgogICAgICAgICIiIgogICAgICAgIGlmIHdpZHRoID49IDk6CiAgICAgICAgICAgIG5hbWVzID0gZGF5X25hbWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBuYW1lcyA9IGRheV9hYmJyCiAgICAgICAgcmV0dXJuIG5hbWVzW2RheV1bOndpZHRoXS5jZW50ZXIod2lkdGgpCgogICAgZGVmIGZvcm1hdHdlZWtoZWFkZXIoc2VsZiwgd2lkdGgpOgogICAgICAgICIiIgogICAgICAgIFJldHVybiBhIGhlYWRlciBmb3IgYSB3ZWVrLgogICAgICAgICIiIgogICAgICAgIHJldHVybiAnICcuam9pbihzZWxmLmZvcm1hdHdlZWtkYXkoaSwgd2lkdGgpIGZvciBpIGluIHNlbGYuaXRlcndlZWtkYXlzKCkpCgogICAgZGVmIGZvcm1hdG1vbnRobmFtZShzZWxmLCB0aGV5ZWFyLCB0aGVtb250aCwgd2lkdGgsIHdpdGh5ZWFyPVRydWUpOgogICAgICAgICIiIgogICAgICAgIFJldHVybiBhIGZvcm1hdHRlZCBtb250aCBuYW1lLgogICAgICAgICIiIgogICAgICAgIHMgPSBtb250aF9uYW1lW3RoZW1vbnRoXQogICAgICAgIGlmIHdpdGh5ZWFyOgogICAgICAgICAgICBzID0gIiVzICVyIiAlIChzLCB0aGV5ZWFyKQogICAgICAgIHJldHVybiBzLmNlbnRlcih3aWR0aCkKCiAgICBkZWYgcHJtb250aChzZWxmLCB0aGV5ZWFyLCB0aGVtb250aCwgdz0wLCBsPTApOgogICAgICAgICIiIgogICAgICAgIFByaW50IGEgbW9udGgncyBjYWxlbmRhci4KICAgICAgICAiIiIKICAgICAgICBwcmludChzZWxmLmZvcm1hdG1vbnRoKHRoZXllYXIsIHRoZW1vbnRoLCB3LCBsKSwgZW5kPScgJykKCiAgICBkZWYgZm9ybWF0bW9udGgoc2VsZiwgdGhleWVhciwgdGhlbW9udGgsIHc9MCwgbD0wKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm4gYSBtb250aCdzIGNhbGVuZGFyIHN0cmluZyAobXVsdGktbGluZSkuCiAgICAgICAgIiIiCiAgICAgICAgdyA9IG1heCgyLCB3KQogICAgICAgIGwgPSBtYXgoMSwgbCkKICAgICAgICBzID0gc2VsZi5mb3JtYXRtb250aG5hbWUodGhleWVhciwgdGhlbW9udGgsIDcgKiAodyArIDEpIC0gMSkKICAgICAgICBzID0gcy5yc3RyaXAoKQogICAgICAgIHMgKz0gJ1xuJyAqIGwKICAgICAgICBzICs9IHNlbGYuZm9ybWF0d2Vla2hlYWRlcih3KS5yc3RyaXAoKQogICAgICAgIHMgKz0gJ1xuJyAqIGwKICAgICAgICBmb3Igd2VlayBpbiBzZWxmLm1vbnRoZGF5czJjYWxlbmRhcih0aGV5ZWFyLCB0aGVtb250aCk6CiAgICAgICAgICAgIHMgKz0gc2VsZi5mb3JtYXR3ZWVrKHdlZWssIHcpLnJzdHJpcCgpCiAgICAgICAgICAgIHMgKz0gJ1xuJyAqIGwKICAgICAgICByZXR1cm4gcwoKICAgIGRlZiBmb3JtYXR5ZWFyKHNlbGYsIHRoZXllYXIsIHc9MiwgbD0xLCBjPTYsIG09Myk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJucyBhIHllYXIncyBjYWxlbmRhciBhcyBhIG11bHRpLWxpbmUgc3RyaW5nLgogICAgICAgICIiIgogICAgICAgIHcgPSBtYXgoMiwgdykKICAgICAgICBsID0gbWF4KDEsIGwpCiAgICAgICAgYyA9IG1heCgyLCBjKQogICAgICAgIGNvbHdpZHRoID0gKHcgKyAxKSAqIDcgLSAxCiAgICAgICAgdiA9IFtdCiAgICAgICAgYSA9IHYuYXBwZW5kCiAgICAgICAgYShyZXByKHRoZXllYXIpLmNlbnRlcihjb2x3aWR0aCptK2MqKG0tMSkpLnJzdHJpcCgpKQogICAgICAgIGEoJ1xuJypsKQogICAgICAgIGhlYWRlciA9IHNlbGYuZm9ybWF0d2Vla2hlYWRlcih3KQogICAgICAgIGZvciAoaSwgcm93KSBpbiBlbnVtZXJhdGUoc2VsZi55ZWFyZGF5czJjYWxlbmRhcih0aGV5ZWFyLCBtKSk6CiAgICAgICAgICAgICMgbW9udGhzIGluIHRoaXMgcm93CiAgICAgICAgICAgIG1vbnRocyA9IHJhbmdlKG0qaSsxLCBtaW4obSooaSsxKSsxLCAxMykpCiAgICAgICAgICAgIGEoJ1xuJypsKQogICAgICAgICAgICBuYW1lcyA9IChzZWxmLmZvcm1hdG1vbnRobmFtZSh0aGV5ZWFyLCBrLCBjb2x3aWR0aCwgRmFsc2UpCiAgICAgICAgICAgICAgICAgICAgIGZvciBrIGluIG1vbnRocykKICAgICAgICAgICAgYShmb3JtYXRzdHJpbmcobmFtZXMsIGNvbHdpZHRoLCBjKS5yc3RyaXAoKSkKICAgICAgICAgICAgYSgnXG4nKmwpCiAgICAgICAgICAgIGhlYWRlcnMgPSAoaGVhZGVyIGZvciBrIGluIG1vbnRocykKICAgICAgICAgICAgYShmb3JtYXRzdHJpbmcoaGVhZGVycywgY29sd2lkdGgsIGMpLnJzdHJpcCgpKQogICAgICAgICAgICBhKCdcbicqbCkKICAgICAgICAgICAgIyBtYXggbnVtYmVyIG9mIHdlZWtzIGZvciB0aGlzIHJvdwogICAgICAgICAgICBoZWlnaHQgPSBtYXgobGVuKGNhbCkgZm9yIGNhbCBpbiByb3cpCiAgICAgICAgICAgIGZvciBqIGluIHJhbmdlKGhlaWdodCk6CiAgICAgICAgICAgICAgICB3ZWVrcyA9IFtdCiAgICAgICAgICAgICAgICBmb3IgY2FsIGluIHJvdzoKICAgICAgICAgICAgICAgICAgICBpZiBqID49IGxlbihjYWwpOgogICAgICAgICAgICAgICAgICAgICAgICB3ZWVrcy5hcHBlbmQoJycpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgd2Vla3MuYXBwZW5kKHNlbGYuZm9ybWF0d2VlayhjYWxbal0sIHcpKQogICAgICAgICAgICAgICAgYShmb3JtYXRzdHJpbmcod2Vla3MsIGNvbHdpZHRoLCBjKS5yc3RyaXAoKSkKICAgICAgICAgICAgICAgIGEoJ1xuJyAqIGwpCiAgICAgICAgcmV0dXJuICcnLmpvaW4odikKCiAgICBkZWYgcHJ5ZWFyKHNlbGYsIHRoZXllYXIsIHc9MCwgbD0wLCBjPTYsIG09Myk6CiAgICAgICAgIiIiUHJpbnQgYSB5ZWFyJ3MgY2FsZW5kYXIuIiIiCiAgICAgICAgcHJpbnQoc2VsZi5mb3JtYXR5ZWFyKHRoZXllYXIsIHcsIGwsIGMsIG0pKQoKCmNsYXNzIEhUTUxDYWxlbmRhcihDYWxlbmRhcik6CiAgICAiIiIKICAgIFRoaXMgY2FsZW5kYXIgcmV0dXJucyBjb21wbGV0ZSBIVE1MIHBhZ2VzLgogICAgIiIiCgogICAgIyBDU1MgY2xhc3NlcyBmb3IgdGhlIGRheSA8dGQ+cwogICAgY3NzY2xhc3NlcyA9IFsibW9uIiwgInR1ZSIsICJ3ZWQiLCAidGh1IiwgImZyaSIsICJzYXQiLCAic3VuIl0KCiAgICBkZWYgZm9ybWF0ZGF5KHNlbGYsIGRheSwgd2Vla2RheSk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJuIGEgZGF5IGFzIGEgdGFibGUgY2VsbC4KICAgICAgICAiIiIKICAgICAgICBpZiBkYXkgPT0gMDoKICAgICAgICAgICAgcmV0dXJuICc8dGQgY2xhc3M9Im5vZGF5Ij4mbmJzcDs8L3RkPicgIyBkYXkgb3V0c2lkZSBtb250aAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiAnPHRkIGNsYXNzPSIlcyI+JWQ8L3RkPicgJSAoc2VsZi5jc3NjbGFzc2VzW3dlZWtkYXldLCBkYXkpCgogICAgZGVmIGZvcm1hdHdlZWsoc2VsZiwgdGhld2Vlayk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJuIGEgY29tcGxldGUgd2VlayBhcyBhIHRhYmxlIHJvdy4KICAgICAgICAiIiIKICAgICAgICBzID0gJycuam9pbihzZWxmLmZvcm1hdGRheShkLCB3ZCkgZm9yIChkLCB3ZCkgaW4gdGhld2VlaykKICAgICAgICByZXR1cm4gJzx0cj4lczwvdHI+JyAlIHMKCiAgICBkZWYgZm9ybWF0d2Vla2RheShzZWxmLCBkYXkpOgogICAgICAgICIiIgogICAgICAgIFJldHVybiBhIHdlZWtkYXkgbmFtZSBhcyBhIHRhYmxlIGhlYWRlci4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gJzx0aCBjbGFzcz0iJXMiPiVzPC90aD4nICUgKHNlbGYuY3NzY2xhc3Nlc1tkYXldLCBkYXlfYWJicltkYXldKQoKICAgIGRlZiBmb3JtYXR3ZWVraGVhZGVyKHNlbGYpOgogICAgICAgICIiIgogICAgICAgIFJldHVybiBhIGhlYWRlciBmb3IgYSB3ZWVrIGFzIGEgdGFibGUgcm93LgogICAgICAgICIiIgogICAgICAgIHMgPSAnJy5qb2luKHNlbGYuZm9ybWF0d2Vla2RheShpKSBmb3IgaSBpbiBzZWxmLml0ZXJ3ZWVrZGF5cygpKQogICAgICAgIHJldHVybiAnPHRyPiVzPC90cj4nICUgcwoKICAgIGRlZiBmb3JtYXRtb250aG5hbWUoc2VsZiwgdGhleWVhciwgdGhlbW9udGgsIHdpdGh5ZWFyPVRydWUpOgogICAgICAgICIiIgogICAgICAgIFJldHVybiBhIG1vbnRoIG5hbWUgYXMgYSB0YWJsZSByb3cuCiAgICAgICAgIiIiCiAgICAgICAgaWYgd2l0aHllYXI6CiAgICAgICAgICAgIHMgPSAnJXMgJXMnICUgKG1vbnRoX25hbWVbdGhlbW9udGhdLCB0aGV5ZWFyKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHMgPSAnJXMnICUgbW9udGhfbmFtZVt0aGVtb250aF0KICAgICAgICByZXR1cm4gJzx0cj48dGggY29sc3Bhbj0iNyIgY2xhc3M9Im1vbnRoIj4lczwvdGg+PC90cj4nICUgcwoKICAgIGRlZiBmb3JtYXRtb250aChzZWxmLCB0aGV5ZWFyLCB0aGVtb250aCwgd2l0aHllYXI9VHJ1ZSk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJuIGEgZm9ybWF0dGVkIG1vbnRoIGFzIGEgdGFibGUuCiAgICAgICAgIiIiCiAgICAgICAgdiA9IFtdCiAgICAgICAgYSA9IHYuYXBwZW5kCiAgICAgICAgYSgnPHRhYmxlIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIiBjbGFzcz0ibW9udGgiPicpCiAgICAgICAgYSgnXG4nKQogICAgICAgIGEoc2VsZi5mb3JtYXRtb250aG5hbWUodGhleWVhciwgdGhlbW9udGgsIHdpdGh5ZWFyPXdpdGh5ZWFyKSkKICAgICAgICBhKCdcbicpCiAgICAgICAgYShzZWxmLmZvcm1hdHdlZWtoZWFkZXIoKSkKICAgICAgICBhKCdcbicpCiAgICAgICAgZm9yIHdlZWsgaW4gc2VsZi5tb250aGRheXMyY2FsZW5kYXIodGhleWVhciwgdGhlbW9udGgpOgogICAgICAgICAgICBhKHNlbGYuZm9ybWF0d2Vlayh3ZWVrKSkKICAgICAgICAgICAgYSgnXG4nKQogICAgICAgIGEoJzwvdGFibGU+JykKICAgICAgICBhKCdcbicpCiAgICAgICAgcmV0dXJuICcnLmpvaW4odikKCiAgICBkZWYgZm9ybWF0eWVhcihzZWxmLCB0aGV5ZWFyLCB3aWR0aD0zKToKICAgICAgICAiIiIKICAgICAgICBSZXR1cm4gYSBmb3JtYXR0ZWQgeWVhciBhcyBhIHRhYmxlIG9mIHRhYmxlcy4KICAgICAgICAiIiIKICAgICAgICB2ID0gW10KICAgICAgICBhID0gdi5hcHBlbmQKICAgICAgICB3aWR0aCA9IG1heCh3aWR0aCwgMSkKICAgICAgICBhKCc8dGFibGUgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMCIgY2VsbHNwYWNpbmc9IjAiIGNsYXNzPSJ5ZWFyIj4nKQogICAgICAgIGEoJ1xuJykKICAgICAgICBhKCc8dHI+PHRoIGNvbHNwYW49IiVkIiBjbGFzcz0ieWVhciI+JXM8L3RoPjwvdHI+JyAlICh3aWR0aCwgdGhleWVhcikpCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoSmFudWFyeSwgSmFudWFyeSsxMiwgd2lkdGgpOgogICAgICAgICAgICAjIG1vbnRocyBpbiB0aGlzIHJvdwogICAgICAgICAgICBtb250aHMgPSByYW5nZShpLCBtaW4oaSt3aWR0aCwgMTMpKQogICAgICAgICAgICBhKCc8dHI+JykKICAgICAgICAgICAgZm9yIG0gaW4gbW9udGhzOgogICAgICAgICAgICAgICAgYSgnPHRkPicpCiAgICAgICAgICAgICAgICBhKHNlbGYuZm9ybWF0bW9udGgodGhleWVhciwgbSwgd2l0aHllYXI9RmFsc2UpKQogICAgICAgICAgICAgICAgYSgnPC90ZD4nKQogICAgICAgICAgICBhKCc8L3RyPicpCiAgICAgICAgYSgnPC90YWJsZT4nKQogICAgICAgIHJldHVybiAnJy5qb2luKHYpCgogICAgZGVmIGZvcm1hdHllYXJwYWdlKHNlbGYsIHRoZXllYXIsIHdpZHRoPTMsIGNzcz0nY2FsZW5kYXIuY3NzJywgZW5jb2Rpbmc9Tm9uZSk6CiAgICAgICAgIiIiCiAgICAgICAgUmV0dXJuIGEgZm9ybWF0dGVkIHllYXIgYXMgYSBjb21wbGV0ZSBIVE1MIHBhZ2UuCiAgICAgICAgIiIiCiAgICAgICAgaWYgZW5jb2RpbmcgaXMgTm9uZToKICAgICAgICAgICAgZW5jb2RpbmcgPSBzeXMuZ2V0ZGVmYXVsdGVuY29kaW5nKCkKICAgICAgICB2ID0gW10KICAgICAgICBhID0gdi5hcHBlbmQKICAgICAgICBhKCc8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSIlcyI/PlxuJyAlIGVuY29kaW5nKQogICAgICAgIGEoJzwhRE9DVFlQRSBodG1sIFBVQkxJQyAiLS8vVzNDLy9EVEQgWEhUTUwgMS4wIFN0cmljdC8vRU4iICJodHRwOi8vd3d3LnczLm9yZy9UUi94aHRtbDEvRFREL3hodG1sMS1zdHJpY3QuZHRkIj5cbicpCiAgICAgICAgYSgnPGh0bWw+XG4nKQogICAgICAgIGEoJzxoZWFkPlxuJykKICAgICAgICBhKCc8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD0lcyIgLz5cbicgJSBlbmNvZGluZykKICAgICAgICBpZiBjc3MgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGEoJzxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9IiVzIiAvPlxuJyAlIGNzcykKICAgICAgICBhKCc8dGl0bGU+Q2FsZW5kYXIgZm9yICVkPC90aXRsZT5cbicgJSB0aGV5ZWFyKQogICAgICAgIGEoJzwvaGVhZD5cbicpCiAgICAgICAgYSgnPGJvZHk+XG4nKQogICAgICAgIGEoc2VsZi5mb3JtYXR5ZWFyKHRoZXllYXIsIHdpZHRoKSkKICAgICAgICBhKCc8L2JvZHk+XG4nKQogICAgICAgIGEoJzwvaHRtbD5cbicpCiAgICAgICAgcmV0dXJuICcnLmpvaW4odikuZW5jb2RlKGVuY29kaW5nLCAieG1sY2hhcnJlZnJlcGxhY2UiKQoKCmNsYXNzIGRpZmZlcmVudF9sb2NhbGU6CiAgICBkZWYgX19pbml0X18oc2VsZiwgbG9jYWxlKToKICAgICAgICBzZWxmLmxvY2FsZSA9IGxvY2FsZQoKICAgIGRlZiBfX2VudGVyX18oc2VsZik6CiAgICAgICAgc2VsZi5vbGRsb2NhbGUgPSBfbG9jYWxlLmdldGxvY2FsZShfbG9jYWxlLkxDX1RJTUUpCiAgICAgICAgX2xvY2FsZS5zZXRsb2NhbGUoX2xvY2FsZS5MQ19USU1FLCBzZWxmLmxvY2FsZSkKCiAgICBkZWYgX19leGl0X18oc2VsZiwgKmFyZ3MpOgogICAgICAgIF9sb2NhbGUuc2V0bG9jYWxlKF9sb2NhbGUuTENfVElNRSwgc2VsZi5vbGRsb2NhbGUpCgoKY2xhc3MgTG9jYWxlVGV4dENhbGVuZGFyKFRleHRDYWxlbmRhcik6CiAgICAiIiIKICAgIFRoaXMgY2xhc3MgY2FuIGJlIHBhc3NlZCBhIGxvY2FsZSBuYW1lIGluIHRoZSBjb25zdHJ1Y3RvciBhbmQgd2lsbCByZXR1cm4KICAgIG1vbnRoIGFuZCB3ZWVrZGF5IG5hbWVzIGluIHRoZSBzcGVjaWZpZWQgbG9jYWxlLiBJZiB0aGlzIGxvY2FsZSBpbmNsdWRlcwogICAgYW4gZW5jb2RpbmcgYWxsIHN0cmluZ3MgY29udGFpbmluZyBtb250aCBhbmQgd2Vla2RheSBuYW1lcyB3aWxsIGJlIHJldHVybmVkCiAgICBhcyB1bmljb2RlLgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGZpcnN0d2Vla2RheT0wLCBsb2NhbGU9Tm9uZSk6CiAgICAgICAgVGV4dENhbGVuZGFyLl9faW5pdF9fKHNlbGYsIGZpcnN0d2Vla2RheSkKICAgICAgICBpZiBsb2NhbGUgaXMgTm9uZToKICAgICAgICAgICAgbG9jYWxlID0gX2xvY2FsZS5nZXRkZWZhdWx0bG9jYWxlKCkKICAgICAgICBzZWxmLmxvY2FsZSA9IGxvY2FsZQoKICAgIGRlZiBmb3JtYXR3ZWVrZGF5KHNlbGYsIGRheSwgd2lkdGgpOgogICAgICAgIHdpdGggZGlmZmVyZW50X2xvY2FsZShzZWxmLmxvY2FsZSk6CiAgICAgICAgICAgIGlmIHdpZHRoID49IDk6CiAgICAgICAgICAgICAgICBuYW1lcyA9IGRheV9uYW1lCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBuYW1lcyA9IGRheV9hYmJyCiAgICAgICAgICAgIG5hbWUgPSBuYW1lc1tkYXldCiAgICAgICAgICAgIHJldHVybiBuYW1lWzp3aWR0aF0uY2VudGVyKHdpZHRoKQoKICAgIGRlZiBmb3JtYXRtb250aG5hbWUoc2VsZiwgdGhleWVhciwgdGhlbW9udGgsIHdpZHRoLCB3aXRoeWVhcj1UcnVlKToKICAgICAgICB3aXRoIGRpZmZlcmVudF9sb2NhbGUoc2VsZi5sb2NhbGUpOgogICAgICAgICAgICBzID0gbW9udGhfbmFtZVt0aGVtb250aF0KICAgICAgICAgICAgaWYgd2l0aHllYXI6CiAgICAgICAgICAgICAgICBzID0gIiVzICVyIiAlIChzLCB0aGV5ZWFyKQogICAgICAgICAgICByZXR1cm4gcy5jZW50ZXIod2lkdGgpCgoKY2xhc3MgTG9jYWxlSFRNTENhbGVuZGFyKEhUTUxDYWxlbmRhcik6CiAgICAiIiIKICAgIFRoaXMgY2xhc3MgY2FuIGJlIHBhc3NlZCBhIGxvY2FsZSBuYW1lIGluIHRoZSBjb25zdHJ1Y3RvciBhbmQgd2lsbCByZXR1cm4KICAgIG1vbnRoIGFuZCB3ZWVrZGF5IG5hbWVzIGluIHRoZSBzcGVjaWZpZWQgbG9jYWxlLiBJZiB0aGlzIGxvY2FsZSBpbmNsdWRlcwogICAgYW4gZW5jb2RpbmcgYWxsIHN0cmluZ3MgY29udGFpbmluZyBtb250aCBhbmQgd2Vla2RheSBuYW1lcyB3aWxsIGJlIHJldHVybmVkCiAgICBhcyB1bmljb2RlLgogICAgIiIiCiAgICBkZWYgX19pbml0X18oc2VsZiwgZmlyc3R3ZWVrZGF5PTAsIGxvY2FsZT1Ob25lKToKICAgICAgICBIVE1MQ2FsZW5kYXIuX19pbml0X18oc2VsZiwgZmlyc3R3ZWVrZGF5KQogICAgICAgIGlmIGxvY2FsZSBpcyBOb25lOgogICAgICAgICAgICBsb2NhbGUgPSBfbG9jYWxlLmdldGRlZmF1bHRsb2NhbGUoKQogICAgICAgIHNlbGYubG9jYWxlID0gbG9jYWxlCgogICAgZGVmIGZvcm1hdHdlZWtkYXkoc2VsZiwgZGF5KToKICAgICAgICB3aXRoIGRpZmZlcmVudF9sb2NhbGUoc2VsZi5sb2NhbGUpOgogICAgICAgICAgICBzID0gZGF5X2FiYnJbZGF5XQogICAgICAgICAgICByZXR1cm4gJzx0aCBjbGFzcz0iJXMiPiVzPC90aD4nICUgKHNlbGYuY3NzY2xhc3Nlc1tkYXldLCBzKQoKICAgIGRlZiBmb3JtYXRtb250aG5hbWUoc2VsZiwgdGhleWVhciwgdGhlbW9udGgsIHdpdGh5ZWFyPVRydWUpOgogICAgICAgIHdpdGggZGlmZmVyZW50X2xvY2FsZShzZWxmLmxvY2FsZSk6CiAgICAgICAgICAgIHMgPSBtb250aF9uYW1lW3RoZW1vbnRoXQogICAgICAgICAgICBpZiB3aXRoeWVhcjoKICAgICAgICAgICAgICAgIHMgPSAnJXMgJXMnICUgKHMsIHRoZXllYXIpCiAgICAgICAgICAgIHJldHVybiAnPHRyPjx0aCBjb2xzcGFuPSI3IiBjbGFzcz0ibW9udGgiPiVzPC90aD48L3RyPicgJSBzCgoKIyBTdXBwb3J0IGZvciBvbGQgbW9kdWxlIGxldmVsIGludGVyZmFjZQpjID0gVGV4dENhbGVuZGFyKCkKCmZpcnN0d2Vla2RheSA9IGMuZ2V0Zmlyc3R3ZWVrZGF5CgpkZWYgc2V0Zmlyc3R3ZWVrZGF5KGZpcnN0d2Vla2RheSk6CiAgICBpZiBub3QgTU9OREFZIDw9IGZpcnN0d2Vla2RheSA8PSBTVU5EQVk6CiAgICAgICAgcmFpc2UgSWxsZWdhbFdlZWtkYXlFcnJvcihmaXJzdHdlZWtkYXkpCiAgICBjLmZpcnN0d2Vla2RheSA9IGZpcnN0d2Vla2RheQoKbW9udGhjYWxlbmRhciA9IGMubW9udGhkYXlzY2FsZW5kYXIKcHJ3ZWVrID0gYy5wcndlZWsKd2VlayA9IGMuZm9ybWF0d2Vlawp3ZWVraGVhZGVyID0gYy5mb3JtYXR3ZWVraGVhZGVyCnBybW9udGggPSBjLnBybW9udGgKbW9udGggPSBjLmZvcm1hdG1vbnRoCmNhbGVuZGFyID0gYy5mb3JtYXR5ZWFyCnByY2FsID0gYy5wcnllYXIKCgojIFNwYWNpbmcgb2YgbW9udGggY29sdW1ucyBmb3IgbXVsdGktY29sdW1uIHllYXIgY2FsZW5kYXIKX2NvbHdpZHRoID0gNyozIC0gMSAgICAgICAgICMgQW1vdW50IHByaW50ZWQgYnkgcHJ3ZWVrKCkKX3NwYWNpbmcgPSA2ICAgICAgICAgICAgICAgICMgTnVtYmVyIG9mIHNwYWNlcyBiZXR3ZWVuIGNvbHVtbnMKCgpkZWYgZm9ybWF0KGNvbHMsIGNvbHdpZHRoPV9jb2x3aWR0aCwgc3BhY2luZz1fc3BhY2luZyk6CiAgICAiIiJQcmludHMgbXVsdGktY29sdW1uIGZvcm1hdHRpbmcgZm9yIHllYXIgY2FsZW5kYXJzIiIiCiAgICBwcmludChmb3JtYXRzdHJpbmcoY29scywgY29sd2lkdGgsIHNwYWNpbmcpKQoKCmRlZiBmb3JtYXRzdHJpbmcoY29scywgY29sd2lkdGg9X2NvbHdpZHRoLCBzcGFjaW5nPV9zcGFjaW5nKToKICAgICIiIlJldHVybnMgYSBzdHJpbmcgZm9ybWF0dGVkIGZyb20gbiBzdHJpbmdzLCBjZW50ZXJlZCB3aXRoaW4gbiBjb2x1bW5zLiIiIgogICAgc3BhY2luZyAqPSAnICcKICAgIHJldHVybiBzcGFjaW5nLmpvaW4oYy5jZW50ZXIoY29sd2lkdGgpIGZvciBjIGluIGNvbHMpCgoKRVBPQ0ggPSAxOTcwCl9FUE9DSF9PUkQgPSBkYXRldGltZS5kYXRlKEVQT0NILCAxLCAxKS50b29yZGluYWwoKQoKCmRlZiB0aW1lZ20odHVwbGUpOgogICAgIiIiVW5yZWxhdGVkIGJ1dCBoYW5keSBmdW5jdGlvbiB0byBjYWxjdWxhdGUgVW5peCB0aW1lc3RhbXAgZnJvbSBHTVQuIiIiCiAgICB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCA9IHR1cGxlWzo2XQogICAgZGF5cyA9IGRhdGV0aW1lLmRhdGUoeWVhciwgbW9udGgsIDEpLnRvb3JkaW5hbCgpIC0gX0VQT0NIX09SRCArIGRheSAtIDEKICAgIGhvdXJzID0gZGF5cyoyNCArIGhvdXIKICAgIG1pbnV0ZXMgPSBob3Vycyo2MCArIG1pbnV0ZQogICAgc2Vjb25kcyA9IG1pbnV0ZXMqNjAgKyBzZWNvbmQKICAgIHJldHVybiBzZWNvbmRzCgoKZGVmIG1haW4oYXJncyk6CiAgICBpbXBvcnQgb3B0cGFyc2UKICAgIHBhcnNlciA9IG9wdHBhcnNlLk9wdGlvblBhcnNlcih1c2FnZT0idXNhZ2U6ICVwcm9nIFtvcHRpb25zXSBbeWVhciBbbW9udGhdXSIpCiAgICBwYXJzZXIuYWRkX29wdGlvbigKICAgICAgICAiLXciLCAiLS13aWR0aCIsCiAgICAgICAgZGVzdD0id2lkdGgiLCB0eXBlPSJpbnQiLCBkZWZhdWx0PTIsCiAgICAgICAgaGVscD0id2lkdGggb2YgZGF0ZSBjb2x1bW4gKGRlZmF1bHQgMiwgdGV4dCBvbmx5KSIKICAgICkKICAgIHBhcnNlci5hZGRfb3B0aW9uKAogICAgICAgICItbCIsICItLWxpbmVzIiwKICAgICAgICBkZXN0PSJsaW5lcyIsIHR5cGU9ImludCIsIGRlZmF1bHQ9MSwKICAgICAgICBoZWxwPSJudW1iZXIgb2YgbGluZXMgZm9yIGVhY2ggd2VlayAoZGVmYXVsdCAxLCB0ZXh0IG9ubHkpIgogICAgKQogICAgcGFyc2VyLmFkZF9vcHRpb24oCiAgICAgICAgIi1zIiwgIi0tc3BhY2luZyIsCiAgICAgICAgZGVzdD0ic3BhY2luZyIsIHR5cGU9ImludCIsIGRlZmF1bHQ9NiwKICAgICAgICBoZWxwPSJzcGFjaW5nIGJldHdlZW4gbW9udGhzIChkZWZhdWx0IDYsIHRleHQgb25seSkiCiAgICApCiAgICBwYXJzZXIuYWRkX29wdGlvbigKICAgICAgICAiLW0iLCAiLS1tb250aHMiLAogICAgICAgIGRlc3Q9Im1vbnRocyIsIHR5cGU9ImludCIsIGRlZmF1bHQ9MywKICAgICAgICBoZWxwPSJtb250aHMgcGVyIHJvdyAoZGVmYXVsdCAzLCB0ZXh0IG9ubHkpIgogICAgKQogICAgcGFyc2VyLmFkZF9vcHRpb24oCiAgICAgICAgIi1jIiwgIi0tY3NzIiwKICAgICAgICBkZXN0PSJjc3MiLCBkZWZhdWx0PSJjYWxlbmRhci5jc3MiLAogICAgICAgIGhlbHA9IkNTUyB0byB1c2UgZm9yIHBhZ2UgKGh0bWwgb25seSkiCiAgICApCiAgICBwYXJzZXIuYWRkX29wdGlvbigKICAgICAgICAiLUwiLCAiLS1sb2NhbGUiLAogICAgICAgIGRlc3Q9ImxvY2FsZSIsIGRlZmF1bHQ9Tm9uZSwKICAgICAgICBoZWxwPSJsb2NhbGUgdG8gYmUgdXNlZCBmcm9tIG1vbnRoIGFuZCB3ZWVrZGF5IG5hbWVzIgogICAgKQogICAgcGFyc2VyLmFkZF9vcHRpb24oCiAgICAgICAgIi1lIiwgIi0tZW5jb2RpbmciLAogICAgICAgIGRlc3Q9ImVuY29kaW5nIiwgZGVmYXVsdD1Ob25lLAogICAgICAgIGhlbHA9IkVuY29kaW5nIHRvIHVzZSBmb3Igb3V0cHV0LiIKICAgICkKICAgIHBhcnNlci5hZGRfb3B0aW9uKAogICAgICAgICItdCIsICItLXR5cGUiLAogICAgICAgIGRlc3Q9InR5cGUiLCBkZWZhdWx0PSJ0ZXh0IiwKICAgICAgICBjaG9pY2VzPSgidGV4dCIsICJodG1sIiksCiAgICAgICAgaGVscD0ib3V0cHV0IHR5cGUgKHRleHQgb3IgaHRtbCkiCiAgICApCgogICAgKG9wdGlvbnMsIGFyZ3MpID0gcGFyc2VyLnBhcnNlX2FyZ3MoYXJncykKCiAgICBpZiBvcHRpb25zLmxvY2FsZSBhbmQgbm90IG9wdGlvbnMuZW5jb2Rpbmc6CiAgICAgICAgcGFyc2VyLmVycm9yKCJpZiAtLWxvY2FsZSBpcyBzcGVjaWZpZWQgLS1lbmNvZGluZyBpcyByZXF1aXJlZCIpCiAgICAgICAgc3lzLmV4aXQoMSkKCiAgICBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSwgb3B0aW9ucy5lbmNvZGluZwoKICAgIGlmIG9wdGlvbnMudHlwZSA9PSAiaHRtbCI6CiAgICAgICAgaWYgb3B0aW9ucy5sb2NhbGU6CiAgICAgICAgICAgIGNhbCA9IExvY2FsZUhUTUxDYWxlbmRhcihsb2NhbGU9bG9jYWxlKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNhbCA9IEhUTUxDYWxlbmRhcigpCiAgICAgICAgZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nCiAgICAgICAgaWYgZW5jb2RpbmcgaXMgTm9uZToKICAgICAgICAgICAgZW5jb2RpbmcgPSBzeXMuZ2V0ZGVmYXVsdGVuY29kaW5nKCkKICAgICAgICBvcHRkaWN0ID0gZGljdChlbmNvZGluZz1lbmNvZGluZywgY3NzPW9wdGlvbnMuY3NzKQogICAgICAgIHdyaXRlID0gc3lzLnN0ZG91dC5idWZmZXIud3JpdGUKICAgICAgICBpZiBsZW4oYXJncykgPT0gMToKICAgICAgICAgICAgd3JpdGUoY2FsLmZvcm1hdHllYXJwYWdlKGRhdGV0aW1lLmRhdGUudG9kYXkoKS55ZWFyLCAqKm9wdGRpY3QpKQogICAgICAgIGVsaWYgbGVuKGFyZ3MpID09IDI6CiAgICAgICAgICAgIHdyaXRlKGNhbC5mb3JtYXR5ZWFycGFnZShpbnQoYXJnc1sxXSksICoqb3B0ZGljdCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcGFyc2VyLmVycm9yKCJpbmNvcnJlY3QgbnVtYmVyIG9mIGFyZ3VtZW50cyIpCiAgICAgICAgICAgIHN5cy5leGl0KDEpCiAgICBlbHNlOgogICAgICAgIGlmIG9wdGlvbnMubG9jYWxlOgogICAgICAgICAgICBjYWwgPSBMb2NhbGVUZXh0Q2FsZW5kYXIobG9jYWxlPWxvY2FsZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBjYWwgPSBUZXh0Q2FsZW5kYXIoKQogICAgICAgIG9wdGRpY3QgPSBkaWN0KHc9b3B0aW9ucy53aWR0aCwgbD1vcHRpb25zLmxpbmVzKQogICAgICAgIGlmIGxlbihhcmdzKSAhPSAzOgogICAgICAgICAgICBvcHRkaWN0WyJjIl0gPSBvcHRpb25zLnNwYWNpbmcKICAgICAgICAgICAgb3B0ZGljdFsibSJdID0gb3B0aW9ucy5tb250aHMKICAgICAgICBpZiBsZW4oYXJncykgPT0gMToKICAgICAgICAgICAgcmVzdWx0ID0gY2FsLmZvcm1hdHllYXIoZGF0ZXRpbWUuZGF0ZS50b2RheSgpLnllYXIsICoqb3B0ZGljdCkKICAgICAgICBlbGlmIGxlbihhcmdzKSA9PSAyOgogICAgICAgICAgICByZXN1bHQgPSBjYWwuZm9ybWF0eWVhcihpbnQoYXJnc1sxXSksICoqb3B0ZGljdCkKICAgICAgICBlbGlmIGxlbihhcmdzKSA9PSAzOgogICAgICAgICAgICByZXN1bHQgPSBjYWwuZm9ybWF0bW9udGgoaW50KGFyZ3NbMV0pLCBpbnQoYXJnc1syXSksICoqb3B0ZGljdCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBwYXJzZXIuZXJyb3IoImluY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzIikKICAgICAgICAgICAgc3lzLmV4aXQoMSkKICAgICAgICB3cml0ZSA9IHN5cy5zdGRvdXQud3JpdGUKICAgICAgICBpZiBvcHRpb25zLmVuY29kaW5nOgogICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuZW5jb2RlKG9wdGlvbnMuZW5jb2RpbmcpCiAgICAgICAgICAgIHdyaXRlID0gc3lzLnN0ZG91dC5idWZmZXIud3JpdGUKICAgICAgICB3cml0ZShyZXN1bHQpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oc3lzLmFyZ3YpCg==',
'/Lib/getopt.py':'',
'/Lib/shutil.py':'IiIiVXRpbGl0eSBmdW5jdGlvbnMgZm9yIGNvcHlpbmcgYW5kIGFyY2hpdmluZyBmaWxlcyBhbmQgZGlyZWN0b3J5IHRyZWVzLgoKWFhYIFRoZSBmdW5jdGlvbnMgaGVyZSBkb24ndCBjb3B5IHRoZSByZXNvdXJjZSBmb3JrIG9yIG90aGVyIG1ldGFkYXRhIG9uIE1hYy4KCiIiIgoKaW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHN0YXQKZnJvbSBvcy5wYXRoIGltcG9ydCBhYnNwYXRoCmltcG9ydCBmbm1hdGNoCmltcG9ydCBjb2xsZWN0aW9ucwppbXBvcnQgZXJybm8KaW1wb3J0IHRhcmZpbGUKCnRyeToKICAgIGltcG9ydCBiejIKICAgIGRlbCBiejIKICAgIF9CWjJfU1VQUE9SVEVEID0gVHJ1ZQpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBfQloyX1NVUFBPUlRFRCA9IEZhbHNlCgp0cnk6CiAgICBmcm9tIHB3ZCBpbXBvcnQgZ2V0cHduYW0KZXhjZXB0IEltcG9ydEVycm9yOgogICAgZ2V0cHduYW0gPSBOb25lCgp0cnk6CiAgICBmcm9tIGdycCBpbXBvcnQgZ2V0Z3JuYW0KZXhjZXB0IEltcG9ydEVycm9yOgogICAgZ2V0Z3JuYW0gPSBOb25lCgpfX2FsbF9fID0gWyJjb3B5ZmlsZW9iaiIsICJjb3B5ZmlsZSIsICJjb3B5bW9kZSIsICJjb3B5c3RhdCIsICJjb3B5IiwgImNvcHkyIiwKICAgICAgICAgICAiY29weXRyZWUiLCAibW92ZSIsICJybXRyZWUiLCAiRXJyb3IiLCAiU3BlY2lhbEZpbGVFcnJvciIsCiAgICAgICAgICAgIkV4ZWNFcnJvciIsICJtYWtlX2FyY2hpdmUiLCAiZ2V0X2FyY2hpdmVfZm9ybWF0cyIsCiAgICAgICAgICAgInJlZ2lzdGVyX2FyY2hpdmVfZm9ybWF0IiwgInVucmVnaXN0ZXJfYXJjaGl2ZV9mb3JtYXQiLAogICAgICAgICAgICJnZXRfdW5wYWNrX2Zvcm1hdHMiLCAicmVnaXN0ZXJfdW5wYWNrX2Zvcm1hdCIsCiAgICAgICAgICAgInVucmVnaXN0ZXJfdW5wYWNrX2Zvcm1hdCIsICJ1bnBhY2tfYXJjaGl2ZSIsCiAgICAgICAgICAgImlnbm9yZV9wYXR0ZXJucyIsICJjaG93biIsICJ3aGljaCJdCiAgICAgICAgICAgIyBkaXNrX3VzYWdlIGlzIGFkZGVkIGxhdGVyLCBpZiBhdmFpbGFibGUgb24gdGhlIHBsYXRmb3JtCgpjbGFzcyBFcnJvcihFbnZpcm9ubWVudEVycm9yKToKICAgIHBhc3MKCmNsYXNzIFNwZWNpYWxGaWxlRXJyb3IoRW52aXJvbm1lbnRFcnJvcik6CiAgICAiIiJSYWlzZWQgd2hlbiB0cnlpbmcgdG8gZG8gYSBraW5kIG9mIG9wZXJhdGlvbiAoZS5nLiBjb3B5aW5nKSB3aGljaCBpcwogICAgbm90IHN1cHBvcnRlZCBvbiBhIHNwZWNpYWwgZmlsZSAoZS5nLiBhIG5hbWVkIHBpcGUpIiIiCgpjbGFzcyBFeGVjRXJyb3IoRW52aXJvbm1lbnRFcnJvcik6CiAgICAiIiJSYWlzZWQgd2hlbiBhIGNvbW1hbmQgY291bGQgbm90IGJlIGV4ZWN1dGVkIiIiCgpjbGFzcyBSZWFkRXJyb3IoRW52aXJvbm1lbnRFcnJvcik6CiAgICAiIiJSYWlzZWQgd2hlbiBhbiBhcmNoaXZlIGNhbm5vdCBiZSByZWFkIiIiCgpjbGFzcyBSZWdpc3RyeUVycm9yKEV4Y2VwdGlvbik6CiAgICAiIiJSYWlzZWQgd2hlbiBhIHJlZ2lzdGVyeSBvcGVyYXRpb24gd2l0aCB0aGUgYXJjaGl2aW5nCiAgICBhbmQgdW5wYWNraW5nIHJlZ2lzdGVyaWVzIGZhaWxzIiIiCgoKdHJ5OgogICAgV2luZG93c0Vycm9yCmV4Y2VwdCBOYW1lRXJyb3I6CiAgICBXaW5kb3dzRXJyb3IgPSBOb25lCgpkZWYgY29weWZpbGVvYmooZnNyYywgZmRzdCwgbGVuZ3RoPTE2KjEwMjQpOgogICAgIiIiY29weSBkYXRhIGZyb20gZmlsZS1saWtlIG9iamVjdCBmc3JjIHRvIGZpbGUtbGlrZSBvYmplY3QgZmRzdCIiIgogICAgd2hpbGUgMToKICAgICAgICBidWYgPSBmc3JjLnJlYWQobGVuZ3RoKQogICAgICAgIGlmIG5vdCBidWY6CiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZmRzdC53cml0ZShidWYpCgpkZWYgX3NhbWVmaWxlKHNyYywgZHN0KToKICAgICMgTWFjaW50b3NoLCBVbml4LgogICAgaWYgaGFzYXR0cihvcy5wYXRoLCAnc2FtZWZpbGUnKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBvcy5wYXRoLnNhbWVmaWxlKHNyYywgZHN0KQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKCiAgICAjIEFsbCBvdGhlciBwbGF0Zm9ybXM6IGNoZWNrIGZvciBzYW1lIHBhdGhuYW1lLgogICAgcmV0dXJuIChvcy5wYXRoLm5vcm1jYXNlKG9zLnBhdGguYWJzcGF0aChzcmMpKSA9PQogICAgICAgICAgICBvcy5wYXRoLm5vcm1jYXNlKG9zLnBhdGguYWJzcGF0aChkc3QpKSkKCmRlZiBjb3B5ZmlsZShzcmMsIGRzdCwgKiwgZm9sbG93X3N5bWxpbmtzPVRydWUpOgogICAgIiIiQ29weSBkYXRhIGZyb20gc3JjIHRvIGRzdC4KCiAgICBJZiBmb2xsb3dfc3ltbGlua3MgaXMgbm90IHNldCBhbmQgc3JjIGlzIGEgc3ltYm9saWMgbGluaywgYSBuZXcKICAgIHN5bWxpbmsgd2lsbCBiZSBjcmVhdGVkIGluc3RlYWQgb2YgY29weWluZyB0aGUgZmlsZSBpdCBwb2ludHMgdG8uCgogICAgIiIiCiAgICBpZiBfc2FtZWZpbGUoc3JjLCBkc3QpOgogICAgICAgIHJhaXNlIEVycm9yKCJgJXNgIGFuZCBgJXNgIGFyZSB0aGUgc2FtZSBmaWxlIiAlIChzcmMsIGRzdCkpCgogICAgZm9yIGZuIGluIFtzcmMsIGRzdF06CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdCA9IG9zLnN0YXQoZm4pCiAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICMgRmlsZSBtb3N0IGxpa2VseSBkb2VzIG5vdCBleGlzdAogICAgICAgICAgICBwYXNzCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBYWFggV2hhdCBhYm91dCBvdGhlciBzcGVjaWFsIGZpbGVzPyAoc29ja2V0cywgZGV2aWNlcy4uLikKICAgICAgICAgICAgaWYgc3RhdC5TX0lTRklGTyhzdC5zdF9tb2RlKToKICAgICAgICAgICAgICAgIHJhaXNlIFNwZWNpYWxGaWxlRXJyb3IoImAlc2AgaXMgYSBuYW1lZCBwaXBlIiAlIGZuKQoKICAgIGlmIG5vdCBmb2xsb3dfc3ltbGlua3MgYW5kIG9zLnBhdGguaXNsaW5rKHNyYyk6CiAgICAgICAgb3Muc3ltbGluayhvcy5yZWFkbGluayhzcmMpLCBkc3QpCiAgICBlbHNlOgogICAgICAgIHdpdGggb3BlbihzcmMsICdyYicpIGFzIGZzcmM6CiAgICAgICAgICAgIHdpdGggb3Blbihkc3QsICd3YicpIGFzIGZkc3Q6CiAgICAgICAgICAgICAgICBjb3B5ZmlsZW9iaihmc3JjLCBmZHN0KQogICAgcmV0dXJuIGRzdAoKZGVmIGNvcHltb2RlKHNyYywgZHN0LCAqLCBmb2xsb3dfc3ltbGlua3M9VHJ1ZSk6CiAgICAiIiJDb3B5IG1vZGUgYml0cyBmcm9tIHNyYyB0byBkc3QuCgogICAgSWYgZm9sbG93X3N5bWxpbmtzIGlzIG5vdCBzZXQsIHN5bWxpbmtzIGFyZW4ndCBmb2xsb3dlZCBpZiBhbmQgb25seQogICAgaWYgYm90aCBgc3JjYCBhbmQgYGRzdGAgYXJlIHN5bWxpbmtzLiAgSWYgYGxjaG1vZGAgaXNuJ3QgYXZhaWxhYmxlCiAgICAoZS5nLiBMaW51eCkgdGhpcyBtZXRob2QgZG9lcyBub3RoaW5nLgoKICAgICIiIgogICAgaWYgbm90IGZvbGxvd19zeW1saW5rcyBhbmQgb3MucGF0aC5pc2xpbmsoc3JjKSBhbmQgb3MucGF0aC5pc2xpbmsoZHN0KToKICAgICAgICBpZiBoYXNhdHRyKG9zLCAnbGNobW9kJyk6CiAgICAgICAgICAgIHN0YXRfZnVuYywgY2htb2RfZnVuYyA9IG9zLmxzdGF0LCBvcy5sY2htb2QKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KICAgIGVsaWYgaGFzYXR0cihvcywgJ2NobW9kJyk6CiAgICAgICAgc3RhdF9mdW5jLCBjaG1vZF9mdW5jID0gb3Muc3RhdCwgb3MuY2htb2QKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuCgogICAgc3QgPSBzdGF0X2Z1bmMoc3JjKQogICAgY2htb2RfZnVuYyhkc3QsIHN0YXQuU19JTU9ERShzdC5zdF9tb2RlKSkKCmlmIGhhc2F0dHIob3MsICdsaXN0eGF0dHInKToKICAgIGRlZiBfY29weXhhdHRyKHNyYywgZHN0LCAqLCBmb2xsb3dfc3ltbGlua3M9VHJ1ZSk6CiAgICAgICAgIiIiQ29weSBleHRlbmRlZCBmaWxlc3lzdGVtIGF0dHJpYnV0ZXMgZnJvbSBgc3JjYCB0byBgZHN0YC4KCiAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIGF0dHJpYnV0ZXMuCgogICAgICAgIElmIGBmb2xsb3dfc3ltbGlua3NgIGlzIGZhbHNlLCBzeW1saW5rcyB3b24ndCBiZSBmb2xsb3dlZC4KCiAgICAgICAgIiIiCgogICAgICAgIHRyeToKICAgICAgICAgICAgbmFtZXMgPSBvcy5saXN0eGF0dHIoc3JjLCBmb2xsb3dfc3ltbGlua3M9Zm9sbG93X3N5bWxpbmtzKQogICAgICAgIGV4Y2VwdCBPU0Vycm9yIGFzIGU6CiAgICAgICAgICAgIGlmIGUuZXJybm8gbm90IGluIChlcnJuby5FTk9UU1VQLCBlcnJuby5FTk9EQVRBKToKICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IG9zLmdldHhhdHRyKHNyYywgbmFtZSwgZm9sbG93X3N5bWxpbmtzPWZvbGxvd19zeW1saW5rcykKICAgICAgICAgICAgICAgIG9zLnNldHhhdHRyKGRzdCwgbmFtZSwgdmFsdWUsIGZvbGxvd19zeW1saW5rcz1mb2xsb3dfc3ltbGlua3MpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yIGFzIGU6CiAgICAgICAgICAgICAgICBpZiBlLmVycm5vIG5vdCBpbiAoZXJybm8uRVBFUk0sIGVycm5vLkVOT1RTVVAsIGVycm5vLkVOT0RBVEEpOgogICAgICAgICAgICAgICAgICAgIHJhaXNlCmVsc2U6CiAgICBkZWYgX2NvcHl4YXR0cigqYXJncywgKiprd2FyZ3MpOgogICAgICAgIHBhc3MKCmRlZiBjb3B5c3RhdChzcmMsIGRzdCwgKiwgZm9sbG93X3N5bWxpbmtzPVRydWUpOgogICAgIiIiQ29weSBhbGwgc3RhdCBpbmZvIChtb2RlIGJpdHMsIGF0aW1lLCBtdGltZSwgZmxhZ3MpIGZyb20gc3JjIHRvIGRzdC4KCiAgICBJZiB0aGUgb3B0aW9uYWwgZmxhZyBgZm9sbG93X3N5bWxpbmtzYCBpcyBub3Qgc2V0LCBzeW1saW5rcyBhcmVuJ3QgZm9sbG93ZWQgaWYgYW5kCiAgICBvbmx5IGlmIGJvdGggYHNyY2AgYW5kIGBkc3RgIGFyZSBzeW1saW5rcy4KCiAgICAiIiIKICAgIGRlZiBfbm9wKCphcmdzLCBucz1Ob25lLCBmb2xsb3dfc3ltbGlua3M9Tm9uZSk6CiAgICAgICAgcGFzcwoKICAgICMgZm9sbG93IHN5bWxpbmtzIChha2EgZG9uJ3Qgbm90IGZvbGxvdyBzeW1saW5rcykKICAgIGZvbGxvdyA9IGZvbGxvd19zeW1saW5rcyBvciBub3QgKG9zLnBhdGguaXNsaW5rKHNyYykgYW5kIG9zLnBhdGguaXNsaW5rKGRzdCkpCiAgICBpZiBmb2xsb3c6CiAgICAgICAgIyB1c2UgdGhlIHJlYWwgZnVuY3Rpb24gaWYgaXQgZXhpc3RzCiAgICAgICAgZGVmIGxvb2t1cChuYW1lKToKICAgICAgICAgICAgcmV0dXJuIGdldGF0dHIob3MsIG5hbWUsIF9ub3ApCiAgICBlbHNlOgogICAgICAgICMgdXNlIHRoZSByZWFsIGZ1bmN0aW9uIG9ubHkgaWYgaXQgZXhpc3RzCiAgICAgICAgIyAqYW5kKiBpdCBzdXBwb3J0cyBmb2xsb3dfc3ltbGlua3MKICAgICAgICBkZWYgbG9va3VwKG5hbWUpOgogICAgICAgICAgICBmbiA9IGdldGF0dHIob3MsIG5hbWUsIF9ub3ApCiAgICAgICAgICAgIGlmIGZuIGluIG9zLnN1cHBvcnRzX2ZvbGxvd19zeW1saW5rczoKICAgICAgICAgICAgICAgIHJldHVybiBmbgogICAgICAgICAgICByZXR1cm4gX25vcAoKICAgIHN0ID0gbG9va3VwKCJzdGF0Iikoc3JjLCBmb2xsb3dfc3ltbGlua3M9Zm9sbG93KQogICAgbW9kZSA9IHN0YXQuU19JTU9ERShzdC5zdF9tb2RlKQogICAgbG9va3VwKCJ1dGltZSIpKGRzdCwgbnM9KHN0LnN0X2F0aW1lX25zLCBzdC5zdF9tdGltZV9ucyksCiAgICAgICAgZm9sbG93X3N5bWxpbmtzPWZvbGxvdykKICAgIHRyeToKICAgICAgICBsb29rdXAoImNobW9kIikoZHN0LCBtb2RlLCBmb2xsb3dfc3ltbGlua3M9Zm9sbG93KQogICAgZXhjZXB0IE5vdEltcGxlbWVudGVkRXJyb3I6CiAgICAgICAgIyBpZiB3ZSBnb3QgYSBOb3RJbXBsZW1lbnRlZEVycm9yLCBpdCdzIGJlY2F1c2UKICAgICAgICAjICAgKiBmb2xsb3dfc3ltbGlua3M9RmFsc2UsCiAgICAgICAgIyAgICogbGNob3duKCkgaXMgdW5hdmFpbGFibGUsIGFuZAogICAgICAgICMgICAqIGVpdGhlcgogICAgICAgICMgICAgICAgKiBmY2hvd25hdCgpIGlzIHVudmFpbGFibGUgb3IKICAgICAgICAjICAgICAgICogZmNob3duYXQoKSBkb2Vzbid0IGltcGxlbWVudCBBVF9TWU1MSU5LX05PRk9MTE9XLgogICAgICAgICMgICAgICAgICAoaXQgcmV0dXJuZWQgRU5PU1VQLikKICAgICAgICAjIHRoZXJlZm9yZSB3ZSdyZSBvdXQgb2Ygb3B0aW9ucy0td2Ugc2ltcGx5IGNhbm5vdCBjaG93biB0aGUKICAgICAgICAjIHN5bWxpbmsuICBnaXZlIHVwLCBzdXBwcmVzcyB0aGUgZXJyb3IuCiAgICAgICAgIyAod2hpY2ggaXMgd2hhdCBzaHV0aWwgYWx3YXlzIGRpZCBpbiB0aGlzIGNpcmN1bXN0YW5jZS4pCiAgICAgICAgcGFzcwogICAgaWYgaGFzYXR0cihzdCwgJ3N0X2ZsYWdzJyk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBsb29rdXAoImNoZmxhZ3MiKShkc3QsIHN0LnN0X2ZsYWdzLCBmb2xsb3dfc3ltbGlua3M9Zm9sbG93KQogICAgICAgIGV4Y2VwdCBPU0Vycm9yIGFzIHdoeToKICAgICAgICAgICAgZm9yIGVyciBpbiAnRU9QTk9UU1VQUCcsICdFTk9UU1VQJzoKICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIoZXJybm8sIGVycikgYW5kIHdoeS5lcnJubyA9PSBnZXRhdHRyKGVycm5vLCBlcnIpOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByYWlzZQogICAgX2NvcHl4YXR0cihzcmMsIGRzdCwgZm9sbG93X3N5bWxpbmtzPWZvbGxvdykKCmRlZiBjb3B5KHNyYywgZHN0LCAqLCBmb2xsb3dfc3ltbGlua3M9VHJ1ZSk6CiAgICAiIiJDb3B5IGRhdGEgYW5kIG1vZGUgYml0cyAoImNwIHNyYyBkc3QiKS4gUmV0dXJuIHRoZSBmaWxlJ3MgZGVzdGluYXRpb24uCgogICAgVGhlIGRlc3RpbmF0aW9uIG1heSBiZSBhIGRpcmVjdG9yeS4KCiAgICBJZiBmb2xsb3dfc3ltbGlua3MgaXMgZmFsc2UsIHN5bWxpbmtzIHdvbid0IGJlIGZvbGxvd2VkLiBUaGlzCiAgICByZXNlbWJsZXMgR05VJ3MgImNwIC1QIHNyYyBkc3QiLgoKICAgICIiIgogICAgaWYgb3MucGF0aC5pc2Rpcihkc3QpOgogICAgICAgIGRzdCA9IG9zLnBhdGguam9pbihkc3QsIG9zLnBhdGguYmFzZW5hbWUoc3JjKSkKICAgIGNvcHlmaWxlKHNyYywgZHN0LCBmb2xsb3dfc3ltbGlua3M9Zm9sbG93X3N5bWxpbmtzKQogICAgY29weW1vZGUoc3JjLCBkc3QsIGZvbGxvd19zeW1saW5rcz1mb2xsb3dfc3ltbGlua3MpCiAgICByZXR1cm4gZHN0CgpkZWYgY29weTIoc3JjLCBkc3QsICosIGZvbGxvd19zeW1saW5rcz1UcnVlKToKICAgICIiIkNvcHkgZGF0YSBhbmQgYWxsIHN0YXQgaW5mbyAoImNwIC1wIHNyYyBkc3QiKS4gUmV0dXJuIHRoZSBmaWxlJ3MKICAgIGRlc3RpbmF0aW9uLiIKCiAgICBUaGUgZGVzdGluYXRpb24gbWF5IGJlIGEgZGlyZWN0b3J5LgoKICAgIElmIGZvbGxvd19zeW1saW5rcyBpcyBmYWxzZSwgc3ltbGlua3Mgd29uJ3QgYmUgZm9sbG93ZWQuIFRoaXMKICAgIHJlc2VtYmxlcyBHTlUncyAiY3AgLVAgc3JjIGRzdCIuCgogICAgIiIiCiAgICBpZiBvcy5wYXRoLmlzZGlyKGRzdCk6CiAgICAgICAgZHN0ID0gb3MucGF0aC5qb2luKGRzdCwgb3MucGF0aC5iYXNlbmFtZShzcmMpKQogICAgY29weWZpbGUoc3JjLCBkc3QsIGZvbGxvd19zeW1saW5rcz1mb2xsb3dfc3ltbGlua3MpCiAgICBjb3B5c3RhdChzcmMsIGRzdCwgZm9sbG93X3N5bWxpbmtzPWZvbGxvd19zeW1saW5rcykKICAgIHJldHVybiBkc3QKCmRlZiBpZ25vcmVfcGF0dGVybnMoKnBhdHRlcm5zKToKICAgICIiIkZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgYXMgY29weXRyZWUoKSBpZ25vcmUgcGFyYW1ldGVyLgoKICAgIFBhdHRlcm5zIGlzIGEgc2VxdWVuY2Ugb2YgZ2xvYi1zdHlsZSBwYXR0ZXJucwogICAgdGhhdCBhcmUgdXNlZCB0byBleGNsdWRlIGZpbGVzIiIiCiAgICBkZWYgX2lnbm9yZV9wYXR0ZXJucyhwYXRoLCBuYW1lcyk6CiAgICAgICAgaWdub3JlZF9uYW1lcyA9IFtdCiAgICAgICAgZm9yIHBhdHRlcm4gaW4gcGF0dGVybnM6CiAgICAgICAgICAgIGlnbm9yZWRfbmFtZXMuZXh0ZW5kKGZubWF0Y2guZmlsdGVyKG5hbWVzLCBwYXR0ZXJuKSkKICAgICAgICByZXR1cm4gc2V0KGlnbm9yZWRfbmFtZXMpCiAgICByZXR1cm4gX2lnbm9yZV9wYXR0ZXJucwoKZGVmIGNvcHl0cmVlKHNyYywgZHN0LCBzeW1saW5rcz1GYWxzZSwgaWdub3JlPU5vbmUsIGNvcHlfZnVuY3Rpb249Y29weTIsCiAgICAgICAgICAgICBpZ25vcmVfZGFuZ2xpbmdfc3ltbGlua3M9RmFsc2UpOgogICAgIiIiUmVjdXJzaXZlbHkgY29weSBhIGRpcmVjdG9yeSB0cmVlLgoKICAgIFRoZSBkZXN0aW5hdGlvbiBkaXJlY3RvcnkgbXVzdCBub3QgYWxyZWFkeSBleGlzdC4KICAgIElmIGV4Y2VwdGlvbihzKSBvY2N1ciwgYW4gRXJyb3IgaXMgcmFpc2VkIHdpdGggYSBsaXN0IG9mIHJlYXNvbnMuCgogICAgSWYgdGhlIG9wdGlvbmFsIHN5bWxpbmtzIGZsYWcgaXMgdHJ1ZSwgc3ltYm9saWMgbGlua3MgaW4gdGhlCiAgICBzb3VyY2UgdHJlZSByZXN1bHQgaW4gc3ltYm9saWMgbGlua3MgaW4gdGhlIGRlc3RpbmF0aW9uIHRyZWU7IGlmCiAgICBpdCBpcyBmYWxzZSwgdGhlIGNvbnRlbnRzIG9mIHRoZSBmaWxlcyBwb2ludGVkIHRvIGJ5IHN5bWJvbGljCiAgICBsaW5rcyBhcmUgY29waWVkLiBJZiB0aGUgZmlsZSBwb2ludGVkIGJ5IHRoZSBzeW1saW5rIGRvZXNuJ3QKICAgIGV4aXN0LCBhbiBleGNlcHRpb24gd2lsbCBiZSBhZGRlZCBpbiB0aGUgbGlzdCBvZiBlcnJvcnMgcmFpc2VkIGluCiAgICBhbiBFcnJvciBleGNlcHRpb24gYXQgdGhlIGVuZCBvZiB0aGUgY29weSBwcm9jZXNzLgoKICAgIFlvdSBjYW4gc2V0IHRoZSBvcHRpb25hbCBpZ25vcmVfZGFuZ2xpbmdfc3ltbGlua3MgZmxhZyB0byB0cnVlIGlmIHlvdQogICAgd2FudCB0byBzaWxlbmNlIHRoaXMgZXhjZXB0aW9uLiBOb3RpY2UgdGhhdCB0aGlzIGhhcyBubyBlZmZlY3Qgb24KICAgIHBsYXRmb3JtcyB0aGF0IGRvbid0IHN1cHBvcnQgb3Muc3ltbGluay4KCiAgICBUaGUgb3B0aW9uYWwgaWdub3JlIGFyZ3VtZW50IGlzIGEgY2FsbGFibGUuIElmIGdpdmVuLCBpdAogICAgaXMgY2FsbGVkIHdpdGggdGhlIGBzcmNgIHBhcmFtZXRlciwgd2hpY2ggaXMgdGhlIGRpcmVjdG9yeQogICAgYmVpbmcgdmlzaXRlZCBieSBjb3B5dHJlZSgpLCBhbmQgYG5hbWVzYCB3aGljaCBpcyB0aGUgbGlzdCBvZgogICAgYHNyY2AgY29udGVudHMsIGFzIHJldHVybmVkIGJ5IG9zLmxpc3RkaXIoKToKCiAgICAgICAgY2FsbGFibGUoc3JjLCBuYW1lcykgLT4gaWdub3JlZF9uYW1lcwoKICAgIFNpbmNlIGNvcHl0cmVlKCkgaXMgY2FsbGVkIHJlY3Vyc2l2ZWx5LCB0aGUgY2FsbGFibGUgd2lsbCBiZQogICAgY2FsbGVkIG9uY2UgZm9yIGVhY2ggZGlyZWN0b3J5IHRoYXQgaXMgY29waWVkLiBJdCByZXR1cm5zIGEKICAgIGxpc3Qgb2YgbmFtZXMgcmVsYXRpdmUgdG8gdGhlIGBzcmNgIGRpcmVjdG9yeSB0aGF0IHNob3VsZAogICAgbm90IGJlIGNvcGllZC4KCiAgICBUaGUgb3B0aW9uYWwgY29weV9mdW5jdGlvbiBhcmd1bWVudCBpcyBhIGNhbGxhYmxlIHRoYXQgd2lsbCBiZSB1c2VkCiAgICB0byBjb3B5IGVhY2ggZmlsZS4gSXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgc291cmNlIHBhdGggYW5kIHRoZQogICAgZGVzdGluYXRpb24gcGF0aCBhcyBhcmd1bWVudHMuIEJ5IGRlZmF1bHQsIGNvcHkyKCkgaXMgdXNlZCwgYnV0IGFueQogICAgZnVuY3Rpb24gdGhhdCBzdXBwb3J0cyB0aGUgc2FtZSBzaWduYXR1cmUgKGxpa2UgY29weSgpKSBjYW4gYmUgdXNlZC4KCiAgICAiIiIKICAgIG5hbWVzID0gb3MubGlzdGRpcihzcmMpCiAgICBpZiBpZ25vcmUgaXMgbm90IE5vbmU6CiAgICAgICAgaWdub3JlZF9uYW1lcyA9IGlnbm9yZShzcmMsIG5hbWVzKQogICAgZWxzZToKICAgICAgICBpZ25vcmVkX25hbWVzID0gc2V0KCkKCiAgICBvcy5tYWtlZGlycyhkc3QpCiAgICBlcnJvcnMgPSBbXQogICAgZm9yIG5hbWUgaW4gbmFtZXM6CiAgICAgICAgaWYgbmFtZSBpbiBpZ25vcmVkX25hbWVzOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIHNyY25hbWUgPSBvcy5wYXRoLmpvaW4oc3JjLCBuYW1lKQogICAgICAgIGRzdG5hbWUgPSBvcy5wYXRoLmpvaW4oZHN0LCBuYW1lKQogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgb3MucGF0aC5pc2xpbmsoc3JjbmFtZSk6CiAgICAgICAgICAgICAgICBsaW5rdG8gPSBvcy5yZWFkbGluayhzcmNuYW1lKQogICAgICAgICAgICAgICAgaWYgc3ltbGlua3M6CiAgICAgICAgICAgICAgICAgICAgIyBXZSBjYW4ndCBqdXN0IGxlYXZlIGl0IHRvIGBjb3B5X2Z1bmN0aW9uYCBiZWNhdXNlIGxlZ2FjeQogICAgICAgICAgICAgICAgICAgICMgY29kZSB3aXRoIGEgY3VzdG9tIGBjb3B5X2Z1bmN0aW9uYCBtYXkgcmVseSBvbiBjb3B5dHJlZQogICAgICAgICAgICAgICAgICAgICMgZG9pbmcgdGhlIHJpZ2h0IHRoaW5nLgogICAgICAgICAgICAgICAgICAgIG9zLnN5bWxpbmsobGlua3RvLCBkc3RuYW1lKQogICAgICAgICAgICAgICAgICAgIGNvcHlzdGF0KHNyY25hbWUsIGRzdG5hbWUsIGZvbGxvd19zeW1saW5rcz1ub3Qgc3ltbGlua3MpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICMgaWdub3JlIGRhbmdsaW5nIHN5bWxpbmsgaWYgdGhlIGZsYWcgaXMgb24KICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMobGlua3RvKSBhbmQgaWdub3JlX2RhbmdsaW5nX3N5bWxpbmtzOgogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgICMgb3RoZXJ3aXNlIGxldCB0aGUgY29weSBvY2N1cnMuIGNvcHkyIHdpbGwgcmFpc2UgYW4gZXJyb3IKICAgICAgICAgICAgICAgICAgICBjb3B5X2Z1bmN0aW9uKHNyY25hbWUsIGRzdG5hbWUpCiAgICAgICAgICAgIGVsaWYgb3MucGF0aC5pc2RpcihzcmNuYW1lKToKICAgICAgICAgICAgICAgIGNvcHl0cmVlKHNyY25hbWUsIGRzdG5hbWUsIHN5bWxpbmtzLCBpZ25vcmUsIGNvcHlfZnVuY3Rpb24pCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFdpbGwgcmFpc2UgYSBTcGVjaWFsRmlsZUVycm9yIGZvciB1bnN1cHBvcnRlZCBmaWxlIHR5cGVzCiAgICAgICAgICAgICAgICBjb3B5X2Z1bmN0aW9uKHNyY25hbWUsIGRzdG5hbWUpCiAgICAgICAgIyBjYXRjaCB0aGUgRXJyb3IgZnJvbSB0aGUgcmVjdXJzaXZlIGNvcHl0cmVlIHNvIHRoYXQgd2UgY2FuCiAgICAgICAgIyBjb250aW51ZSB3aXRoIG90aGVyIGZpbGVzCiAgICAgICAgZXhjZXB0IEVycm9yIGFzIGVycjoKICAgICAgICAgICAgZXJyb3JzLmV4dGVuZChlcnIuYXJnc1swXSkKICAgICAgICBleGNlcHQgRW52aXJvbm1lbnRFcnJvciBhcyB3aHk6CiAgICAgICAgICAgIGVycm9ycy5hcHBlbmQoKHNyY25hbWUsIGRzdG5hbWUsIHN0cih3aHkpKSkKICAgIHRyeToKICAgICAgICBjb3B5c3RhdChzcmMsIGRzdCkKICAgIGV4Y2VwdCBPU0Vycm9yIGFzIHdoeToKICAgICAgICBpZiBXaW5kb3dzRXJyb3IgaXMgbm90IE5vbmUgYW5kIGlzaW5zdGFuY2Uod2h5LCBXaW5kb3dzRXJyb3IpOgogICAgICAgICAgICAjIENvcHlpbmcgZmlsZSBhY2Nlc3MgdGltZXMgbWF5IGZhaWwgb24gV2luZG93cwogICAgICAgICAgICBwYXNzCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZXJyb3JzLmFwcGVuZCgoc3JjLCBkc3QsIHN0cih3aHkpKSkKICAgIGlmIGVycm9yczoKICAgICAgICByYWlzZSBFcnJvcihlcnJvcnMpCiAgICByZXR1cm4gZHN0CgojIHZlcnNpb24gdnVsbmVyYWJsZSB0byByYWNlIGNvbmRpdGlvbnMKZGVmIF9ybXRyZWVfdW5zYWZlKHBhdGgsIG9uZXJyb3IpOgogICAgdHJ5OgogICAgICAgIGlmIG9zLnBhdGguaXNsaW5rKHBhdGgpOgogICAgICAgICAgICAjIHN5bWxpbmtzIHRvIGRpcmVjdG9yaWVzIGFyZSBmb3JiaWRkZW4sIHNlZSBidWcgIzE2NjkKICAgICAgICAgICAgcmFpc2UgT1NFcnJvcigiQ2Fubm90IGNhbGwgcm10cmVlIG9uIGEgc3ltYm9saWMgbGluayIpCiAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICBvbmVycm9yKG9zLnBhdGguaXNsaW5rLCBwYXRoLCBzeXMuZXhjX2luZm8oKSkKICAgICAgICAjIGNhbid0IGNvbnRpbnVlIGV2ZW4gaWYgb25lcnJvciBob29rIHJldHVybnMKICAgICAgICByZXR1cm4KICAgIG5hbWVzID0gW10KICAgIHRyeToKICAgICAgICBuYW1lcyA9IG9zLmxpc3RkaXIocGF0aCkKICAgIGV4Y2VwdCBvcy5lcnJvcjoKICAgICAgICBvbmVycm9yKG9zLmxpc3RkaXIsIHBhdGgsIHN5cy5leGNfaW5mbygpKQogICAgZm9yIG5hbWUgaW4gbmFtZXM6CiAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4ocGF0aCwgbmFtZSkKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1vZGUgPSBvcy5sc3RhdChmdWxsbmFtZSkuc3RfbW9kZQogICAgICAgIGV4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgbW9kZSA9IDAKICAgICAgICBpZiBzdGF0LlNfSVNESVIobW9kZSk6CiAgICAgICAgICAgIF9ybXRyZWVfdW5zYWZlKGZ1bGxuYW1lLCBvbmVycm9yKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLnVubGluayhmdWxsbmFtZSkKICAgICAgICAgICAgZXhjZXB0IG9zLmVycm9yOgogICAgICAgICAgICAgICAgb25lcnJvcihvcy51bmxpbmssIGZ1bGxuYW1lLCBzeXMuZXhjX2luZm8oKSkKICAgIHRyeToKICAgICAgICBvcy5ybWRpcihwYXRoKQogICAgZXhjZXB0IG9zLmVycm9yOgogICAgICAgIG9uZXJyb3Iob3Mucm1kaXIsIHBhdGgsIHN5cy5leGNfaW5mbygpKQoKIyBWZXJzaW9uIHVzaW5nIGZkLWJhc2VkIEFQSXMgdG8gcHJvdGVjdCBhZ2FpbnN0IHJhY2VzCmRlZiBfcm10cmVlX3NhZmVfZmQodG9wZmQsIHBhdGgsIG9uZXJyb3IpOgogICAgbmFtZXMgPSBbXQogICAgdHJ5OgogICAgICAgIG5hbWVzID0gb3MubGlzdGRpcih0b3BmZCkKICAgIGV4Y2VwdCBPU0Vycm9yIGFzIGVycjoKICAgICAgICBlcnIuZmlsZW5hbWUgPSBwYXRoCiAgICAgICAgb25lcnJvcihvcy5saXN0ZGlyLCBwYXRoLCBzeXMuZXhjX2luZm8oKSkKICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgIGZ1bGxuYW1lID0gb3MucGF0aC5qb2luKHBhdGgsIG5hbWUpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcmlnX3N0ID0gb3Muc3RhdChuYW1lLCBkaXJfZmQ9dG9wZmQsIGZvbGxvd19zeW1saW5rcz1GYWxzZSkKICAgICAgICAgICAgbW9kZSA9IG9yaWdfc3Quc3RfbW9kZQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICBtb2RlID0gMAogICAgICAgIGlmIHN0YXQuU19JU0RJUihtb2RlKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGlyZmQgPSBvcy5vcGVuKG5hbWUsIG9zLk9fUkRPTkxZLCBkaXJfZmQ9dG9wZmQpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgb25lcnJvcihvcy5vcGVuLCBmdWxsbmFtZSwgc3lzLmV4Y19pbmZvKCkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgaWYgb3MucGF0aC5zYW1lc3RhdChvcmlnX3N0LCBvcy5mc3RhdChkaXJmZCkpOgogICAgICAgICAgICAgICAgICAgICAgICBfcm10cmVlX3NhZmVfZmQoZGlyZmQsIGZ1bGxuYW1lLCBvbmVycm9yKQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5ybWRpcihuYW1lLCBkaXJfZmQ9dG9wZmQpCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb25lcnJvcihvcy5ybWRpciwgZnVsbG5hbWUsIHN5cy5leGNfaW5mbygpKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVGhpcyBjYW4gb25seSBoYXBwZW4gaWYgc29tZW9uZSByZXBsYWNlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhIGRpcmVjdG9yeSB3aXRoIGEgc3ltbGluayBhZnRlciB0aGUgY2FsbCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBzdGF0LlNfSVNESVIgYWJvdmUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBPU0Vycm9yKCJDYW5ub3QgY2FsbCBybXRyZWUgb24gYSBzeW1ib2xpYyAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsaW5rIikKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmVycm9yKG9zLnBhdGguaXNsaW5rLCBmdWxsbmFtZSwgc3lzLmV4Y19pbmZvKCkpCiAgICAgICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgICAgIG9zLmNsb3NlKGRpcmZkKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLnVubGluayhuYW1lLCBkaXJfZmQ9dG9wZmQpCiAgICAgICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICAgICAgb25lcnJvcihvcy51bmxpbmssIGZ1bGxuYW1lLCBzeXMuZXhjX2luZm8oKSkKCl91c2VfZmRfZnVuY3Rpb25zID0gKHtvcy5vcGVuLCBvcy5zdGF0LCBvcy51bmxpbmssIG9zLnJtZGlyfSA8PQogICAgICAgICAgICAgICAgICAgICBvcy5zdXBwb3J0c19kaXJfZmQgYW5kCiAgICAgICAgICAgICAgICAgICAgIG9zLmxpc3RkaXIgaW4gb3Muc3VwcG9ydHNfZmQgYW5kCiAgICAgICAgICAgICAgICAgICAgIG9zLnN0YXQgaW4gb3Muc3VwcG9ydHNfZm9sbG93X3N5bWxpbmtzKQoKZGVmIHJtdHJlZShwYXRoLCBpZ25vcmVfZXJyb3JzPUZhbHNlLCBvbmVycm9yPU5vbmUpOgogICAgIiIiUmVjdXJzaXZlbHkgZGVsZXRlIGEgZGlyZWN0b3J5IHRyZWUuCgogICAgSWYgaWdub3JlX2Vycm9ycyBpcyBzZXQsIGVycm9ycyBhcmUgaWdub3JlZDsgb3RoZXJ3aXNlLCBpZiBvbmVycm9yCiAgICBpcyBzZXQsIGl0IGlzIGNhbGxlZCB0byBoYW5kbGUgdGhlIGVycm9yIHdpdGggYXJndW1lbnRzIChmdW5jLAogICAgcGF0aCwgZXhjX2luZm8pIHdoZXJlIGZ1bmMgaXMgcGxhdGZvcm0gYW5kIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudDsKICAgIHBhdGggaXMgdGhlIGFyZ3VtZW50IHRvIHRoYXQgZnVuY3Rpb24gdGhhdCBjYXVzZWQgaXQgdG8gZmFpbDsgYW5kCiAgICBleGNfaW5mbyBpcyBhIHR1cGxlIHJldHVybmVkIGJ5IHN5cy5leGNfaW5mbygpLiAgSWYgaWdub3JlX2Vycm9ycwogICAgaXMgZmFsc2UgYW5kIG9uZXJyb3IgaXMgTm9uZSwgYW4gZXhjZXB0aW9uIGlzIHJhaXNlZC4KCiAgICAiIiIKICAgIGlmIGlnbm9yZV9lcnJvcnM6CiAgICAgICAgZGVmIG9uZXJyb3IoKmFyZ3MpOgogICAgICAgICAgICBwYXNzCiAgICBlbGlmIG9uZXJyb3IgaXMgTm9uZToKICAgICAgICBkZWYgb25lcnJvcigqYXJncyk6CiAgICAgICAgICAgIHJhaXNlCiAgICBpZiBfdXNlX2ZkX2Z1bmN0aW9uczoKICAgICAgICAjIFdoaWxlIHRoZSB1bnNhZmUgcm10cmVlIHdvcmtzIGZpbmUgb24gYnl0ZXMsIHRoZSBmZCBiYXNlZCBkb2VzIG5vdC4KICAgICAgICBpZiBpc2luc3RhbmNlKHBhdGgsIGJ5dGVzKToKICAgICAgICAgICAgcGF0aCA9IG9zLmZzZGVjb2RlKHBhdGgpCiAgICAgICAgIyBOb3RlOiBUbyBndWFyZCBhZ2FpbnN0IHN5bWxpbmsgcmFjZXMsIHdlIHVzZSB0aGUgc3RhbmRhcmQKICAgICAgICAjIGxzdGF0KCkvb3BlbigpL2ZzdGF0KCkgdHJpY2suCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcmlnX3N0ID0gb3MubHN0YXQocGF0aCkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBvbmVycm9yKG9zLmxzdGF0LCBwYXRoLCBzeXMuZXhjX2luZm8oKSkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgdHJ5OgogICAgICAgICAgICBmZCA9IG9zLm9wZW4ocGF0aCwgb3MuT19SRE9OTFkpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgb25lcnJvcihvcy5sc3RhdCwgcGF0aCwgc3lzLmV4Y19pbmZvKCkpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgb3MucGF0aC5zYW1lc3RhdChvcmlnX3N0LCBvcy5mc3RhdChmZCkpOgogICAgICAgICAgICAgICAgX3JtdHJlZV9zYWZlX2ZkKGZkLCBwYXRoLCBvbmVycm9yKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIG9zLnJtZGlyKHBhdGgpCiAgICAgICAgICAgICAgICBleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgICAgICAgICAgICAgb25lcnJvcihvcy5ybWRpciwgcGF0aCwgc3lzLmV4Y19pbmZvKCkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgIyBzeW1saW5rcyB0byBkaXJlY3RvcmllcyBhcmUgZm9yYmlkZGVuLCBzZWUgYnVnICMxNjY5CiAgICAgICAgICAgICAgICAgICAgcmFpc2UgT1NFcnJvcigiQ2Fubm90IGNhbGwgcm10cmVlIG9uIGEgc3ltYm9saWMgbGluayIpCiAgICAgICAgICAgICAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICAgICAgICAgICAgICBvbmVycm9yKG9zLnBhdGguaXNsaW5rLCBwYXRoLCBzeXMuZXhjX2luZm8oKSkKICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICBvcy5jbG9zZShmZCkKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIF9ybXRyZWVfdW5zYWZlKHBhdGgsIG9uZXJyb3IpCgojIEFsbG93IGludHJvc3BlY3Rpb24gb2Ygd2hldGhlciBvciBub3QgdGhlIGhhcmRlbmluZyBhZ2FpbnN0IHN5bWxpbmsKIyBhdHRhY2tzIGlzIHN1cHBvcnRlZCBvbiB0aGUgY3VycmVudCBwbGF0Zm9ybQpybXRyZWUuYXZvaWRzX3N5bWxpbmtfYXR0YWNrcyA9IF91c2VfZmRfZnVuY3Rpb25zCgpkZWYgX2Jhc2VuYW1lKHBhdGgpOgogICAgIyBBIGJhc2VuYW1lKCkgdmFyaWFudCB3aGljaCBmaXJzdCBzdHJpcHMgdGhlIHRyYWlsaW5nIHNsYXNoLCBpZiBwcmVzZW50LgogICAgIyBUaHVzIHdlIGFsd2F5cyBnZXQgdGhlIGxhc3QgY29tcG9uZW50IG9mIHRoZSBwYXRoLCBldmVuIGZvciBkaXJlY3Rvcmllcy4KICAgIHJldHVybiBvcy5wYXRoLmJhc2VuYW1lKHBhdGgucnN0cmlwKG9zLnBhdGguc2VwKSkKCmRlZiBtb3ZlKHNyYywgZHN0KToKICAgICIiIlJlY3Vyc2l2ZWx5IG1vdmUgYSBmaWxlIG9yIGRpcmVjdG9yeSB0byBhbm90aGVyIGxvY2F0aW9uLiBUaGlzIGlzCiAgICBzaW1pbGFyIHRvIHRoZSBVbml4ICJtdiIgY29tbWFuZC4gUmV0dXJuIHRoZSBmaWxlIG9yIGRpcmVjdG9yeSdzCiAgICBkZXN0aW5hdGlvbi4KCiAgICBJZiB0aGUgZGVzdGluYXRpb24gaXMgYSBkaXJlY3Rvcnkgb3IgYSBzeW1saW5rIHRvIGEgZGlyZWN0b3J5LCB0aGUgc291cmNlCiAgICBpcyBtb3ZlZCBpbnNpZGUgdGhlIGRpcmVjdG9yeS4gVGhlIGRlc3RpbmF0aW9uIHBhdGggbXVzdCBub3QgYWxyZWFkeQogICAgZXhpc3QuCgogICAgSWYgdGhlIGRlc3RpbmF0aW9uIGFscmVhZHkgZXhpc3RzIGJ1dCBpcyBub3QgYSBkaXJlY3RvcnksIGl0IG1heSBiZQogICAgb3ZlcndyaXR0ZW4gZGVwZW5kaW5nIG9uIG9zLnJlbmFtZSgpIHNlbWFudGljcy4KCiAgICBJZiB0aGUgZGVzdGluYXRpb24gaXMgb24gb3VyIGN1cnJlbnQgZmlsZXN5c3RlbSwgdGhlbiByZW5hbWUoKSBpcyB1c2VkLgogICAgT3RoZXJ3aXNlLCBzcmMgaXMgY29waWVkIHRvIHRoZSBkZXN0aW5hdGlvbiBhbmQgdGhlbiByZW1vdmVkLiBTeW1saW5rcyBhcmUKICAgIHJlY3JlYXRlZCB1bmRlciB0aGUgbmV3IG5hbWUgaWYgb3MucmVuYW1lKCkgZmFpbHMgYmVjYXVzZSBvZiBjcm9zcwogICAgZmlsZXN5c3RlbSByZW5hbWVzLgoKICAgIEEgbG90IG1vcmUgY291bGQgYmUgZG9uZSBoZXJlLi4uICBBIGxvb2sgYXQgYSBtdi5jIHNob3dzIGEgbG90IG9mCiAgICB0aGUgaXNzdWVzIHRoaXMgaW1wbGVtZW50YXRpb24gZ2xvc3NlcyBvdmVyLgoKICAgICIiIgogICAgcmVhbF9kc3QgPSBkc3QKICAgIGlmIG9zLnBhdGguaXNkaXIoZHN0KToKICAgICAgICBpZiBfc2FtZWZpbGUoc3JjLCBkc3QpOgogICAgICAgICAgICAjIFdlIG1pZ2h0IGJlIG9uIGEgY2FzZSBpbnNlbnNpdGl2ZSBmaWxlc3lzdGVtLAogICAgICAgICAgICAjIHBlcmZvcm0gdGhlIHJlbmFtZSBhbnl3YXkuCiAgICAgICAgICAgIG9zLnJlbmFtZShzcmMsIGRzdCkKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIHJlYWxfZHN0ID0gb3MucGF0aC5qb2luKGRzdCwgX2Jhc2VuYW1lKHNyYykpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMocmVhbF9kc3QpOgogICAgICAgICAgICByYWlzZSBFcnJvcigiRGVzdGluYXRpb24gcGF0aCAnJXMnIGFscmVhZHkgZXhpc3RzIiAlIHJlYWxfZHN0KQogICAgdHJ5OgogICAgICAgIG9zLnJlbmFtZShzcmMsIHJlYWxfZHN0KQogICAgZXhjZXB0IE9TRXJyb3I6CiAgICAgICAgaWYgb3MucGF0aC5pc2xpbmsoc3JjKToKICAgICAgICAgICAgbGlua3RvID0gb3MucmVhZGxpbmsoc3JjKQogICAgICAgICAgICBvcy5zeW1saW5rKGxpbmt0bywgcmVhbF9kc3QpCiAgICAgICAgICAgIG9zLnVubGluayhzcmMpCiAgICAgICAgZWxpZiBvcy5wYXRoLmlzZGlyKHNyYyk6CiAgICAgICAgICAgIGlmIF9kZXN0aW5zcmMoc3JjLCBkc3QpOgogICAgICAgICAgICAgICAgcmFpc2UgRXJyb3IoIkNhbm5vdCBtb3ZlIGEgZGlyZWN0b3J5ICclcycgaW50byBpdHNlbGYgJyVzJy4iICUgKHNyYywgZHN0KSkKICAgICAgICAgICAgY29weXRyZWUoc3JjLCByZWFsX2RzdCwgc3ltbGlua3M9VHJ1ZSkKICAgICAgICAgICAgcm10cmVlKHNyYykKICAgICAgICBlbHNlOgogICAgICAgICAgICBjb3B5MihzcmMsIHJlYWxfZHN0KQogICAgICAgICAgICBvcy51bmxpbmsoc3JjKQogICAgcmV0dXJuIHJlYWxfZHN0CgpkZWYgX2Rlc3RpbnNyYyhzcmMsIGRzdCk6CiAgICBzcmMgPSBhYnNwYXRoKHNyYykKICAgIGRzdCA9IGFic3BhdGgoZHN0KQogICAgaWYgbm90IHNyYy5lbmRzd2l0aChvcy5wYXRoLnNlcCk6CiAgICAgICAgc3JjICs9IG9zLnBhdGguc2VwCiAgICBpZiBub3QgZHN0LmVuZHN3aXRoKG9zLnBhdGguc2VwKToKICAgICAgICBkc3QgKz0gb3MucGF0aC5zZXAKICAgIHJldHVybiBkc3Quc3RhcnRzd2l0aChzcmMpCgpkZWYgX2dldF9naWQobmFtZSk6CiAgICAiIiJSZXR1cm5zIGEgZ2lkLCBnaXZlbiBhIGdyb3VwIG5hbWUuIiIiCiAgICBpZiBnZXRncm5hbSBpcyBOb25lIG9yIG5hbWUgaXMgTm9uZToKICAgICAgICByZXR1cm4gTm9uZQogICAgdHJ5OgogICAgICAgIHJlc3VsdCA9IGdldGdybmFtKG5hbWUpCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgcmVzdWx0ID0gTm9uZQogICAgaWYgcmVzdWx0IGlzIG5vdCBOb25lOgogICAgICAgIHJldHVybiByZXN1bHRbMl0KICAgIHJldHVybiBOb25lCgpkZWYgX2dldF91aWQobmFtZSk6CiAgICAiIiJSZXR1cm5zIGFuIHVpZCwgZ2l2ZW4gYSB1c2VyIG5hbWUuIiIiCiAgICBpZiBnZXRwd25hbSBpcyBOb25lIG9yIG5hbWUgaXMgTm9uZToKICAgICAgICByZXR1cm4gTm9uZQogICAgdHJ5OgogICAgICAgIHJlc3VsdCA9IGdldHB3bmFtKG5hbWUpCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgcmVzdWx0ID0gTm9uZQogICAgaWYgcmVzdWx0IGlzIG5vdCBOb25lOgogICAgICAgIHJldHVybiByZXN1bHRbMl0KICAgIHJldHVybiBOb25lCgpkZWYgX21ha2VfdGFyYmFsbChiYXNlX25hbWUsIGJhc2VfZGlyLCBjb21wcmVzcz0iZ3ppcCIsIHZlcmJvc2U9MCwgZHJ5X3J1bj0wLAogICAgICAgICAgICAgICAgICBvd25lcj1Ob25lLCBncm91cD1Ob25lLCBsb2dnZXI9Tm9uZSk6CiAgICAiIiJDcmVhdGUgYSAocG9zc2libHkgY29tcHJlc3NlZCkgdGFyIGZpbGUgZnJvbSBhbGwgdGhlIGZpbGVzIHVuZGVyCiAgICAnYmFzZV9kaXInLgoKICAgICdjb21wcmVzcycgbXVzdCBiZSAiZ3ppcCIgKHRoZSBkZWZhdWx0KSwgImJ6aXAyIiwgb3IgTm9uZS4KCiAgICAnb3duZXInIGFuZCAnZ3JvdXAnIGNhbiBiZSB1c2VkIHRvIGRlZmluZSBhbiBvd25lciBhbmQgYSBncm91cCBmb3IgdGhlCiAgICBhcmNoaXZlIHRoYXQgaXMgYmVpbmcgYnVpbHQuIElmIG5vdCBwcm92aWRlZCwgdGhlIGN1cnJlbnQgb3duZXIgYW5kIGdyb3VwCiAgICB3aWxsIGJlIHVzZWQuCgogICAgVGhlIG91dHB1dCB0YXIgZmlsZSB3aWxsIGJlIG5hbWVkICdiYXNlX25hbWUnICsgICIudGFyIiwgcG9zc2libHkgcGx1cwogICAgdGhlIGFwcHJvcHJpYXRlIGNvbXByZXNzaW9uIGV4dGVuc2lvbiAoIi5neiIsIG9yICIuYnoyIikuCgogICAgUmV0dXJucyB0aGUgb3V0cHV0IGZpbGVuYW1lLgogICAgIiIiCiAgICB0YXJfY29tcHJlc3Npb24gPSB7J2d6aXAnOiAnZ3onLCBOb25lOiAnJ30KICAgIGNvbXByZXNzX2V4dCA9IHsnZ3ppcCc6ICcuZ3onfQoKICAgIGlmIF9CWjJfU1VQUE9SVEVEOgogICAgICAgIHRhcl9jb21wcmVzc2lvblsnYnppcDInXSA9ICdiejInCiAgICAgICAgY29tcHJlc3NfZXh0WydiemlwMiddID0gJy5iejInCgogICAgIyBmbGFncyBmb3IgY29tcHJlc3Npb24gcHJvZ3JhbSwgZWFjaCBlbGVtZW50IG9mIGxpc3Qgd2lsbCBiZSBhbiBhcmd1bWVudAogICAgaWYgY29tcHJlc3MgaXMgbm90IE5vbmUgYW5kIGNvbXByZXNzIG5vdCBpbiBjb21wcmVzc19leHQ6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiYmFkIHZhbHVlIGZvciAnY29tcHJlc3MnLCBvciBjb21wcmVzc2lvbiBmb3JtYXQgbm90ICIKICAgICAgICAgICAgICAgICAgICAgICAgICJzdXBwb3J0ZWQgOiB7MH0iLmZvcm1hdChjb21wcmVzcykpCgogICAgYXJjaGl2ZV9uYW1lID0gYmFzZV9uYW1lICsgJy50YXInICsgY29tcHJlc3NfZXh0LmdldChjb21wcmVzcywgJycpCiAgICBhcmNoaXZlX2RpciA9IG9zLnBhdGguZGlybmFtZShhcmNoaXZlX25hbWUpCgogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGFyY2hpdmVfZGlyKToKICAgICAgICBpZiBsb2dnZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJjcmVhdGluZyAlcyIsIGFyY2hpdmVfZGlyKQogICAgICAgIGlmIG5vdCBkcnlfcnVuOgogICAgICAgICAgICBvcy5tYWtlZGlycyhhcmNoaXZlX2RpcikKCiAgICAjIGNyZWF0aW5nIHRoZSB0YXJiYWxsCiAgICBpZiBsb2dnZXIgaXMgbm90IE5vbmU6CiAgICAgICAgbG9nZ2VyLmluZm8oJ0NyZWF0aW5nIHRhciBhcmNoaXZlJykKCiAgICB1aWQgPSBfZ2V0X3VpZChvd25lcikKICAgIGdpZCA9IF9nZXRfZ2lkKGdyb3VwKQoKICAgIGRlZiBfc2V0X3VpZF9naWQodGFyaW5mbyk6CiAgICAgICAgaWYgZ2lkIGlzIG5vdCBOb25lOgogICAgICAgICAgICB0YXJpbmZvLmdpZCA9IGdpZAogICAgICAgICAgICB0YXJpbmZvLmduYW1lID0gZ3JvdXAKICAgICAgICBpZiB1aWQgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHRhcmluZm8udWlkID0gdWlkCiAgICAgICAgICAgIHRhcmluZm8udW5hbWUgPSBvd25lcgogICAgICAgIHJldHVybiB0YXJpbmZvCgogICAgaWYgbm90IGRyeV9ydW46CiAgICAgICAgdGFyID0gdGFyZmlsZS5vcGVuKGFyY2hpdmVfbmFtZSwgJ3d8JXMnICUgdGFyX2NvbXByZXNzaW9uW2NvbXByZXNzXSkKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRhci5hZGQoYmFzZV9kaXIsIGZpbHRlcj1fc2V0X3VpZF9naWQpCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgdGFyLmNsb3NlKCkKCiAgICByZXR1cm4gYXJjaGl2ZV9uYW1lCgpkZWYgX2NhbGxfZXh0ZXJuYWxfemlwKGJhc2VfZGlyLCB6aXBfZmlsZW5hbWUsIHZlcmJvc2U9RmFsc2UsIGRyeV9ydW49RmFsc2UpOgogICAgIyBYWFggc2VlIGlmIHdlIHdhbnQgdG8ga2VlcCBhbiBleHRlcm5hbCBjYWxsIGhlcmUKICAgIGlmIHZlcmJvc2U6CiAgICAgICAgemlwb3B0aW9ucyA9ICItciIKICAgIGVsc2U6CiAgICAgICAgemlwb3B0aW9ucyA9ICItcnEiCiAgICBmcm9tIGRpc3R1dGlscy5lcnJvcnMgaW1wb3J0IERpc3R1dGlsc0V4ZWNFcnJvcgogICAgZnJvbSBkaXN0dXRpbHMuc3Bhd24gaW1wb3J0IHNwYXduCiAgICB0cnk6CiAgICAgICAgc3Bhd24oWyJ6aXAiLCB6aXBvcHRpb25zLCB6aXBfZmlsZW5hbWUsIGJhc2VfZGlyXSwgZHJ5X3J1bj1kcnlfcnVuKQogICAgZXhjZXB0IERpc3R1dGlsc0V4ZWNFcnJvcjoKICAgICAgICAjIFhYWCByZWFsbHkgc2hvdWxkIGRpc3Rpbmd1aXNoIGJldHdlZW4gImNvdWxkbid0IGZpbmQKICAgICAgICAjIGV4dGVybmFsICd6aXAnIGNvbW1hbmQiIGFuZCAiemlwIGZhaWxlZCIuCiAgICAgICAgcmFpc2UgRXhlY0Vycm9yKCJ1bmFibGUgdG8gY3JlYXRlIHppcCBmaWxlICclcyc6ICIKICAgICAgICAgICAgImNvdWxkIG5laXRoZXIgaW1wb3J0IHRoZSAnemlwZmlsZScgbW9kdWxlIG5vciAiCiAgICAgICAgICAgICJmaW5kIGEgc3RhbmRhbG9uZSB6aXAgdXRpbGl0eSIpICUgemlwX2ZpbGVuYW1lCgpkZWYgX21ha2VfemlwZmlsZShiYXNlX25hbWUsIGJhc2VfZGlyLCB2ZXJib3NlPTAsIGRyeV9ydW49MCwgbG9nZ2VyPU5vbmUpOgogICAgIiIiQ3JlYXRlIGEgemlwIGZpbGUgZnJvbSBhbGwgdGhlIGZpbGVzIHVuZGVyICdiYXNlX2RpcicuCgogICAgVGhlIG91dHB1dCB6aXAgZmlsZSB3aWxsIGJlIG5hbWVkICdiYXNlX25hbWUnICsgIi56aXAiLiAgVXNlcyBlaXRoZXIgdGhlCiAgICAiemlwZmlsZSIgUHl0aG9uIG1vZHVsZSAoaWYgYXZhaWxhYmxlKSBvciB0aGUgSW5mb1pJUCAiemlwIiB1dGlsaXR5CiAgICAoaWYgaW5zdGFsbGVkIGFuZCBmb3VuZCBvbiB0aGUgZGVmYXVsdCBzZWFyY2ggcGF0aCkuICBJZiBuZWl0aGVyIHRvb2wgaXMKICAgIGF2YWlsYWJsZSwgcmFpc2VzIEV4ZWNFcnJvci4gIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIG91dHB1dCB6aXAKICAgIGZpbGUuCiAgICAiIiIKICAgIHppcF9maWxlbmFtZSA9IGJhc2VfbmFtZSArICIuemlwIgogICAgYXJjaGl2ZV9kaXIgPSBvcy5wYXRoLmRpcm5hbWUoYmFzZV9uYW1lKQoKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhhcmNoaXZlX2Rpcik6CiAgICAgICAgaWYgbG9nZ2VyIGlzIG5vdCBOb25lOgogICAgICAgICAgICBsb2dnZXIuaW5mbygiY3JlYXRpbmcgJXMiLCBhcmNoaXZlX2RpcikKICAgICAgICBpZiBub3QgZHJ5X3J1bjoKICAgICAgICAgICAgb3MubWFrZWRpcnMoYXJjaGl2ZV9kaXIpCgogICAgIyBJZiB6aXBmaWxlIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlLCB0cnkgc3Bhd25pbmcgYW4gZXh0ZXJuYWwgJ3ppcCcKICAgICMgY29tbWFuZC4KICAgIHRyeToKICAgICAgICBpbXBvcnQgemlwZmlsZQogICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgIHppcGZpbGUgPSBOb25lCgogICAgaWYgemlwZmlsZSBpcyBOb25lOgogICAgICAgIF9jYWxsX2V4dGVybmFsX3ppcChiYXNlX2RpciwgemlwX2ZpbGVuYW1lLCB2ZXJib3NlLCBkcnlfcnVuKQogICAgZWxzZToKICAgICAgICBpZiBsb2dnZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJjcmVhdGluZyAnJXMnIGFuZCBhZGRpbmcgJyVzJyB0byBpdCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHppcF9maWxlbmFtZSwgYmFzZV9kaXIpCgogICAgICAgIGlmIG5vdCBkcnlfcnVuOgogICAgICAgICAgICB6aXAgPSB6aXBmaWxlLlppcEZpbGUoemlwX2ZpbGVuYW1lLCAidyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wcmVzc2lvbj16aXBmaWxlLlpJUF9ERUZMQVRFRCkKCiAgICAgICAgICAgIGZvciBkaXJwYXRoLCBkaXJuYW1lcywgZmlsZW5hbWVzIGluIG9zLndhbGsoYmFzZV9kaXIpOgogICAgICAgICAgICAgICAgZm9yIG5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgICAgICAgICAgICAgIHBhdGggPSBvcy5wYXRoLm5vcm1wYXRoKG9zLnBhdGguam9pbihkaXJwYXRoLCBuYW1lKSkKICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmlzZmlsZShwYXRoKToKICAgICAgICAgICAgICAgICAgICAgICAgemlwLndyaXRlKHBhdGgsIHBhdGgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxvZ2dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCJhZGRpbmcgJyVzJyIsIHBhdGgpCiAgICAgICAgICAgIHppcC5jbG9zZSgpCgogICAgcmV0dXJuIHppcF9maWxlbmFtZQoKX0FSQ0hJVkVfRk9STUFUUyA9IHsKICAgICdnenRhcic6IChfbWFrZV90YXJiYWxsLCBbKCdjb21wcmVzcycsICdnemlwJyldLCAiZ3ppcCdlZCB0YXItZmlsZSIpLAogICAgJ3Rhcic6ICAgKF9tYWtlX3RhcmJhbGwsIFsoJ2NvbXByZXNzJywgTm9uZSldLCAidW5jb21wcmVzc2VkIHRhciBmaWxlIiksCiAgICAnemlwJzogICAoX21ha2VfemlwZmlsZSwgW10sICJaSVAgZmlsZSIpCiAgICB9CgppZiBfQloyX1NVUFBPUlRFRDoKICAgIF9BUkNISVZFX0ZPUk1BVFNbJ2J6dGFyJ10gPSAoX21ha2VfdGFyYmFsbCwgWygnY29tcHJlc3MnLCAnYnppcDInKV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ6aXAyJ2VkIHRhci1maWxlIikKCmRlZiBnZXRfYXJjaGl2ZV9mb3JtYXRzKCk6CiAgICAiIiJSZXR1cm5zIGEgbGlzdCBvZiBzdXBwb3J0ZWQgZm9ybWF0cyBmb3IgYXJjaGl2aW5nIGFuZCB1bmFyY2hpdmluZy4KCiAgICBFYWNoIGVsZW1lbnQgb2YgdGhlIHJldHVybmVkIHNlcXVlbmNlIGlzIGEgdHVwbGUgKG5hbWUsIGRlc2NyaXB0aW9uKQogICAgIiIiCiAgICBmb3JtYXRzID0gWyhuYW1lLCByZWdpc3RyeVsyXSkgZm9yIG5hbWUsIHJlZ2lzdHJ5IGluCiAgICAgICAgICAgICAgIF9BUkNISVZFX0ZPUk1BVFMuaXRlbXMoKV0KICAgIGZvcm1hdHMuc29ydCgpCiAgICByZXR1cm4gZm9ybWF0cwoKZGVmIHJlZ2lzdGVyX2FyY2hpdmVfZm9ybWF0KG5hbWUsIGZ1bmN0aW9uLCBleHRyYV9hcmdzPU5vbmUsIGRlc2NyaXB0aW9uPScnKToKICAgICIiIlJlZ2lzdGVycyBhbiBhcmNoaXZlIGZvcm1hdC4KCiAgICBuYW1lIGlzIHRoZSBuYW1lIG9mIHRoZSBmb3JtYXQuIGZ1bmN0aW9uIGlzIHRoZSBjYWxsYWJsZSB0aGF0IHdpbGwgYmUKICAgIHVzZWQgdG8gY3JlYXRlIGFyY2hpdmVzLiBJZiBwcm92aWRlZCwgZXh0cmFfYXJncyBpcyBhIHNlcXVlbmNlIG9mCiAgICAobmFtZSwgdmFsdWUpIHR1cGxlcyB0aGF0IHdpbGwgYmUgcGFzc2VkIGFzIGFyZ3VtZW50cyB0byB0aGUgY2FsbGFibGUuCiAgICBkZXNjcmlwdGlvbiBjYW4gYmUgcHJvdmlkZWQgdG8gZGVzY3JpYmUgdGhlIGZvcm1hdCwgYW5kIHdpbGwgYmUgcmV0dXJuZWQKICAgIGJ5IHRoZSBnZXRfYXJjaGl2ZV9mb3JtYXRzKCkgZnVuY3Rpb24uCiAgICAiIiIKICAgIGlmIGV4dHJhX2FyZ3MgaXMgTm9uZToKICAgICAgICBleHRyYV9hcmdzID0gW10KICAgIGlmIG5vdCBjYWxsYWJsZShmdW5jdGlvbik6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdUaGUgJXMgb2JqZWN0IGlzIG5vdCBjYWxsYWJsZScgJSBmdW5jdGlvbikKICAgIGlmIG5vdCBpc2luc3RhbmNlKGV4dHJhX2FyZ3MsICh0dXBsZSwgbGlzdCkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignZXh0cmFfYXJncyBuZWVkcyB0byBiZSBhIHNlcXVlbmNlJykKICAgIGZvciBlbGVtZW50IGluIGV4dHJhX2FyZ3M6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoZWxlbWVudCwgKHR1cGxlLCBsaXN0KSkgb3IgbGVuKGVsZW1lbnQpICE9MjoKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdleHRyYV9hcmdzIGVsZW1lbnRzIGFyZSA6IChhcmdfbmFtZSwgdmFsdWUpJykKCiAgICBfQVJDSElWRV9GT1JNQVRTW25hbWVdID0gKGZ1bmN0aW9uLCBleHRyYV9hcmdzLCBkZXNjcmlwdGlvbikKCmRlZiB1bnJlZ2lzdGVyX2FyY2hpdmVfZm9ybWF0KG5hbWUpOgogICAgZGVsIF9BUkNISVZFX0ZPUk1BVFNbbmFtZV0KCmRlZiBtYWtlX2FyY2hpdmUoYmFzZV9uYW1lLCBmb3JtYXQsIHJvb3RfZGlyPU5vbmUsIGJhc2VfZGlyPU5vbmUsIHZlcmJvc2U9MCwKICAgICAgICAgICAgICAgICBkcnlfcnVuPTAsIG93bmVyPU5vbmUsIGdyb3VwPU5vbmUsIGxvZ2dlcj1Ob25lKToKICAgICIiIkNyZWF0ZSBhbiBhcmNoaXZlIGZpbGUgKGVnLiB6aXAgb3IgdGFyKS4KCiAgICAnYmFzZV9uYW1lJyBpcyB0aGUgbmFtZSBvZiB0aGUgZmlsZSB0byBjcmVhdGUsIG1pbnVzIGFueSBmb3JtYXQtc3BlY2lmaWMKICAgIGV4dGVuc2lvbjsgJ2Zvcm1hdCcgaXMgdGhlIGFyY2hpdmUgZm9ybWF0OiBvbmUgb2YgInppcCIsICJ0YXIiLCAiYnp0YXIiCiAgICBvciAiZ3p0YXIiLgoKICAgICdyb290X2RpcicgaXMgYSBkaXJlY3RvcnkgdGhhdCB3aWxsIGJlIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGUKICAgIGFyY2hpdmU7IGllLiB3ZSB0eXBpY2FsbHkgY2hkaXIgaW50byAncm9vdF9kaXInIGJlZm9yZSBjcmVhdGluZyB0aGUKICAgIGFyY2hpdmUuICAnYmFzZV9kaXInIGlzIHRoZSBkaXJlY3Rvcnkgd2hlcmUgd2Ugc3RhcnQgYXJjaGl2aW5nIGZyb207CiAgICBpZS4gJ2Jhc2VfZGlyJyB3aWxsIGJlIHRoZSBjb21tb24gcHJlZml4IG9mIGFsbCBmaWxlcyBhbmQKICAgIGRpcmVjdG9yaWVzIGluIHRoZSBhcmNoaXZlLiAgJ3Jvb3RfZGlyJyBhbmQgJ2Jhc2VfZGlyJyBib3RoIGRlZmF1bHQKICAgIHRvIHRoZSBjdXJyZW50IGRpcmVjdG9yeS4gIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGFyY2hpdmUgZmlsZS4KCiAgICAnb3duZXInIGFuZCAnZ3JvdXAnIGFyZSB1c2VkIHdoZW4gY3JlYXRpbmcgYSB0YXIgYXJjaGl2ZS4gQnkgZGVmYXVsdCwKICAgIHVzZXMgdGhlIGN1cnJlbnQgb3duZXIgYW5kIGdyb3VwLgogICAgIiIiCiAgICBzYXZlX2N3ZCA9IG9zLmdldGN3ZCgpCiAgICBpZiByb290X2RpciBpcyBub3QgTm9uZToKICAgICAgICBpZiBsb2dnZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygiY2hhbmdpbmcgaW50byAnJXMnIiwgcm9vdF9kaXIpCiAgICAgICAgYmFzZV9uYW1lID0gb3MucGF0aC5hYnNwYXRoKGJhc2VfbmFtZSkKICAgICAgICBpZiBub3QgZHJ5X3J1bjoKICAgICAgICAgICAgb3MuY2hkaXIocm9vdF9kaXIpCgogICAgaWYgYmFzZV9kaXIgaXMgTm9uZToKICAgICAgICBiYXNlX2RpciA9IG9zLmN1cmRpcgoKICAgIGt3YXJncyA9IHsnZHJ5X3J1bic6IGRyeV9ydW4sICdsb2dnZXInOiBsb2dnZXJ9CgogICAgdHJ5OgogICAgICAgIGZvcm1hdF9pbmZvID0gX0FSQ0hJVkVfRk9STUFUU1tmb3JtYXRdCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigidW5rbm93biBhcmNoaXZlIGZvcm1hdCAnJXMnIiAlIGZvcm1hdCkKCiAgICBmdW5jID0gZm9ybWF0X2luZm9bMF0KICAgIGZvciBhcmcsIHZhbCBpbiBmb3JtYXRfaW5mb1sxXToKICAgICAgICBrd2FyZ3NbYXJnXSA9IHZhbAoKICAgIGlmIGZvcm1hdCAhPSAnemlwJzoKICAgICAgICBrd2FyZ3NbJ293bmVyJ10gPSBvd25lcgogICAgICAgIGt3YXJnc1snZ3JvdXAnXSA9IGdyb3VwCgogICAgdHJ5OgogICAgICAgIGZpbGVuYW1lID0gZnVuYyhiYXNlX25hbWUsIGJhc2VfZGlyLCAqKmt3YXJncykKICAgIGZpbmFsbHk6CiAgICAgICAgaWYgcm9vdF9kaXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIGxvZ2dlciBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygiY2hhbmdpbmcgYmFjayB0byAnJXMnIiwgc2F2ZV9jd2QpCiAgICAgICAgICAgIG9zLmNoZGlyKHNhdmVfY3dkKQoKICAgIHJldHVybiBmaWxlbmFtZQoKCmRlZiBnZXRfdW5wYWNrX2Zvcm1hdHMoKToKICAgICIiIlJldHVybnMgYSBsaXN0IG9mIHN1cHBvcnRlZCBmb3JtYXRzIGZvciB1bnBhY2tpbmcuCgogICAgRWFjaCBlbGVtZW50IG9mIHRoZSByZXR1cm5lZCBzZXF1ZW5jZSBpcyBhIHR1cGxlCiAgICAobmFtZSwgZXh0ZW5zaW9ucywgZGVzY3JpcHRpb24pCiAgICAiIiIKICAgIGZvcm1hdHMgPSBbKG5hbWUsIGluZm9bMF0sIGluZm9bM10pIGZvciBuYW1lLCBpbmZvIGluCiAgICAgICAgICAgICAgIF9VTlBBQ0tfRk9STUFUUy5pdGVtcygpXQogICAgZm9ybWF0cy5zb3J0KCkKICAgIHJldHVybiBmb3JtYXRzCgpkZWYgX2NoZWNrX3VucGFja19vcHRpb25zKGV4dGVuc2lvbnMsIGZ1bmN0aW9uLCBleHRyYV9hcmdzKToKICAgICIiIkNoZWNrcyB3aGF0IGdldHMgcmVnaXN0ZXJlZCBhcyBhbiB1bnBhY2tlci4iIiIKICAgICMgZmlyc3QgbWFrZSBzdXJlIG5vIG90aGVyIHVucGFja2VyIGlzIHJlZ2lzdGVyZWQgZm9yIHRoaXMgZXh0ZW5zaW9uCiAgICBleGlzdGluZ19leHRlbnNpb25zID0ge30KICAgIGZvciBuYW1lLCBpbmZvIGluIF9VTlBBQ0tfRk9STUFUUy5pdGVtcygpOgogICAgICAgIGZvciBleHQgaW4gaW5mb1swXToKICAgICAgICAgICAgZXhpc3RpbmdfZXh0ZW5zaW9uc1tleHRdID0gbmFtZQoKICAgIGZvciBleHRlbnNpb24gaW4gZXh0ZW5zaW9uczoKICAgICAgICBpZiBleHRlbnNpb24gaW4gZXhpc3RpbmdfZXh0ZW5zaW9uczoKICAgICAgICAgICAgbXNnID0gJyVzIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBmb3IgIiVzIicKICAgICAgICAgICAgcmFpc2UgUmVnaXN0cnlFcnJvcihtc2cgJSAoZXh0ZW5zaW9uLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ19leHRlbnNpb25zW2V4dGVuc2lvbl0pKQoKICAgIGlmIG5vdCBjYWxsYWJsZShmdW5jdGlvbik6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdUaGUgcmVnaXN0ZXJlZCBmdW5jdGlvbiBtdXN0IGJlIGEgY2FsbGFibGUnKQoKCmRlZiByZWdpc3Rlcl91bnBhY2tfZm9ybWF0KG5hbWUsIGV4dGVuc2lvbnMsIGZ1bmN0aW9uLCBleHRyYV9hcmdzPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPScnKToKICAgICIiIlJlZ2lzdGVycyBhbiB1bnBhY2sgZm9ybWF0LgoKICAgIGBuYW1lYCBpcyB0aGUgbmFtZSBvZiB0aGUgZm9ybWF0LiBgZXh0ZW5zaW9uc2AgaXMgYSBsaXN0IG9mIGV4dGVuc2lvbnMKICAgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGZvcm1hdC4KCiAgICBgZnVuY3Rpb25gIGlzIHRoZSBjYWxsYWJsZSB0aGF0IHdpbGwgYmUKICAgIHVzZWQgdG8gdW5wYWNrIGFyY2hpdmVzLiBUaGUgY2FsbGFibGUgd2lsbCByZWNlaXZlIGFyY2hpdmVzIHRvIHVucGFjay4KICAgIElmIGl0J3MgdW5hYmxlIHRvIGhhbmRsZSBhbiBhcmNoaXZlLCBpdCBuZWVkcyB0byByYWlzZSBhIFJlYWRFcnJvcgogICAgZXhjZXB0aW9uLgoKICAgIElmIHByb3ZpZGVkLCBgZXh0cmFfYXJnc2AgaXMgYSBzZXF1ZW5jZSBvZgogICAgKG5hbWUsIHZhbHVlKSB0dXBsZXMgdGhhdCB3aWxsIGJlIHBhc3NlZCBhcyBhcmd1bWVudHMgdG8gdGhlIGNhbGxhYmxlLgogICAgZGVzY3JpcHRpb24gY2FuIGJlIHByb3ZpZGVkIHRvIGRlc2NyaWJlIHRoZSBmb3JtYXQsIGFuZCB3aWxsIGJlIHJldHVybmVkCiAgICBieSB0aGUgZ2V0X3VucGFja19mb3JtYXRzKCkgZnVuY3Rpb24uCiAgICAiIiIKICAgIGlmIGV4dHJhX2FyZ3MgaXMgTm9uZToKICAgICAgICBleHRyYV9hcmdzID0gW10KICAgIF9jaGVja191bnBhY2tfb3B0aW9ucyhleHRlbnNpb25zLCBmdW5jdGlvbiwgZXh0cmFfYXJncykKICAgIF9VTlBBQ0tfRk9STUFUU1tuYW1lXSA9IGV4dGVuc2lvbnMsIGZ1bmN0aW9uLCBleHRyYV9hcmdzLCBkZXNjcmlwdGlvbgoKZGVmIHVucmVnaXN0ZXJfdW5wYWNrX2Zvcm1hdChuYW1lKToKICAgICIiIlJlbW92ZXMgdGhlIHBhY2sgZm9ybWF0IGZyb20gdGhlIHJlZ2lzdGVyeS4iIiIKICAgIGRlbCBfVU5QQUNLX0ZPUk1BVFNbbmFtZV0KCmRlZiBfZW5zdXJlX2RpcmVjdG9yeShwYXRoKToKICAgICIiIkVuc3VyZSB0aGF0IHRoZSBwYXJlbnQgZGlyZWN0b3J5IG9mIGBwYXRoYCBleGlzdHMiIiIKICAgIGRpcm5hbWUgPSBvcy5wYXRoLmRpcm5hbWUocGF0aCkKICAgIGlmIG5vdCBvcy5wYXRoLmlzZGlyKGRpcm5hbWUpOgogICAgICAgIG9zLm1ha2VkaXJzKGRpcm5hbWUpCgpkZWYgX3VucGFja196aXBmaWxlKGZpbGVuYW1lLCBleHRyYWN0X2Rpcik6CiAgICAiIiJVbnBhY2sgemlwIGBmaWxlbmFtZWAgdG8gYGV4dHJhY3RfZGlyYAogICAgIiIiCiAgICB0cnk6CiAgICAgICAgaW1wb3J0IHppcGZpbGUKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICByYWlzZSBSZWFkRXJyb3IoJ3psaWIgbm90IHN1cHBvcnRlZCwgY2Fubm90IHVucGFjayB0aGlzIGFyY2hpdmUuJykKCiAgICBpZiBub3QgemlwZmlsZS5pc196aXBmaWxlKGZpbGVuYW1lKToKICAgICAgICByYWlzZSBSZWFkRXJyb3IoIiVzIGlzIG5vdCBhIHppcCBmaWxlIiAlIGZpbGVuYW1lKQoKICAgIHppcCA9IHppcGZpbGUuWmlwRmlsZShmaWxlbmFtZSkKICAgIHRyeToKICAgICAgICBmb3IgaW5mbyBpbiB6aXAuaW5mb2xpc3QoKToKICAgICAgICAgICAgbmFtZSA9IGluZm8uZmlsZW5hbWUKCiAgICAgICAgICAgICMgZG9uJ3QgZXh0cmFjdCBhYnNvbHV0ZSBwYXRocyBvciBvbmVzIHdpdGggLi4gaW4gdGhlbQogICAgICAgICAgICBpZiBuYW1lLnN0YXJ0c3dpdGgoJy8nKSBvciAnLi4nIGluIG5hbWU6CiAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgdGFyZ2V0ID0gb3MucGF0aC5qb2luKGV4dHJhY3RfZGlyLCAqbmFtZS5zcGxpdCgnLycpKQogICAgICAgICAgICBpZiBub3QgdGFyZ2V0OgogICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgIF9lbnN1cmVfZGlyZWN0b3J5KHRhcmdldCkKICAgICAgICAgICAgaWYgbm90IG5hbWUuZW5kc3dpdGgoJy8nKToKICAgICAgICAgICAgICAgICMgZmlsZQogICAgICAgICAgICAgICAgZGF0YSA9IHppcC5yZWFkKGluZm8uZmlsZW5hbWUpCiAgICAgICAgICAgICAgICBmID0gb3Blbih0YXJnZXQsICd3YicpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgZi53cml0ZShkYXRhKQogICAgICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgICAgICBmLmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICBkZWwgZGF0YQogICAgZmluYWxseToKICAgICAgICB6aXAuY2xvc2UoKQoKZGVmIF91bnBhY2tfdGFyZmlsZShmaWxlbmFtZSwgZXh0cmFjdF9kaXIpOgogICAgIiIiVW5wYWNrIHRhci90YXIuZ3ovdGFyLmJ6MiBgZmlsZW5hbWVgIHRvIGBleHRyYWN0X2RpcmAKICAgICIiIgogICAgdHJ5OgogICAgICAgIHRhcm9iaiA9IHRhcmZpbGUub3BlbihmaWxlbmFtZSkKICAgIGV4Y2VwdCB0YXJmaWxlLlRhckVycm9yOgogICAgICAgIHJhaXNlIFJlYWRFcnJvcigKICAgICAgICAgICAgIiVzIGlzIG5vdCBhIGNvbXByZXNzZWQgb3IgdW5jb21wcmVzc2VkIHRhciBmaWxlIiAlIGZpbGVuYW1lKQogICAgdHJ5OgogICAgICAgIHRhcm9iai5leHRyYWN0YWxsKGV4dHJhY3RfZGlyKQogICAgZmluYWxseToKICAgICAgICB0YXJvYmouY2xvc2UoKQoKX1VOUEFDS19GT1JNQVRTID0gewogICAgJ2d6dGFyJzogKFsnLnRhci5neicsICcudGd6J10sIF91bnBhY2tfdGFyZmlsZSwgW10sICJnemlwJ2VkIHRhci1maWxlIiksCiAgICAndGFyJzogICAoWycudGFyJ10sIF91bnBhY2tfdGFyZmlsZSwgW10sICJ1bmNvbXByZXNzZWQgdGFyIGZpbGUiKSwKICAgICd6aXAnOiAgIChbJy56aXAnXSwgX3VucGFja196aXBmaWxlLCBbXSwgIlpJUCBmaWxlIikKICAgIH0KCmlmIF9CWjJfU1VQUE9SVEVEOgogICAgX1VOUEFDS19GT1JNQVRTWydienRhciddID0gKFsnLmJ6MiddLCBfdW5wYWNrX3RhcmZpbGUsIFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJiemlwMidlZCB0YXItZmlsZSIpCgpkZWYgX2ZpbmRfdW5wYWNrX2Zvcm1hdChmaWxlbmFtZSk6CiAgICBmb3IgbmFtZSwgaW5mbyBpbiBfVU5QQUNLX0ZPUk1BVFMuaXRlbXMoKToKICAgICAgICBmb3IgZXh0ZW5zaW9uIGluIGluZm9bMF06CiAgICAgICAgICAgIGlmIGZpbGVuYW1lLmVuZHN3aXRoKGV4dGVuc2lvbik6CiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZQogICAgcmV0dXJuIE5vbmUKCmRlZiB1bnBhY2tfYXJjaGl2ZShmaWxlbmFtZSwgZXh0cmFjdF9kaXI9Tm9uZSwgZm9ybWF0PU5vbmUpOgogICAgIiIiVW5wYWNrIGFuIGFyY2hpdmUuCgogICAgYGZpbGVuYW1lYCBpcyB0aGUgbmFtZSBvZiB0aGUgYXJjaGl2ZS4KCiAgICBgZXh0cmFjdF9kaXJgIGlzIHRoZSBuYW1lIG9mIHRoZSB0YXJnZXQgZGlyZWN0b3J5LCB3aGVyZSB0aGUgYXJjaGl2ZQogICAgaXMgdW5wYWNrZWQuIElmIG5vdCBwcm92aWRlZCwgdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkgaXMgdXNlZC4KCiAgICBgZm9ybWF0YCBpcyB0aGUgYXJjaGl2ZSBmb3JtYXQ6IG9uZSBvZiAiemlwIiwgInRhciIsIG9yICJnenRhciIuIE9yIGFueQogICAgb3RoZXIgcmVnaXN0ZXJlZCBmb3JtYXQuIElmIG5vdCBwcm92aWRlZCwgdW5wYWNrX2FyY2hpdmUgd2lsbCB1c2UgdGhlCiAgICBmaWxlbmFtZSBleHRlbnNpb24gYW5kIHNlZSBpZiBhbiB1bnBhY2tlciB3YXMgcmVnaXN0ZXJlZCBmb3IgdGhhdAogICAgZXh0ZW5zaW9uLgoKICAgIEluIGNhc2Ugbm9uZSBpcyBmb3VuZCwgYSBWYWx1ZUVycm9yIGlzIHJhaXNlZC4KICAgICIiIgogICAgaWYgZXh0cmFjdF9kaXIgaXMgTm9uZToKICAgICAgICBleHRyYWN0X2RpciA9IG9zLmdldGN3ZCgpCgogICAgaWYgZm9ybWF0IGlzIG5vdCBOb25lOgogICAgICAgIHRyeToKICAgICAgICAgICAgZm9ybWF0X2luZm8gPSBfVU5QQUNLX0ZPUk1BVFNbZm9ybWF0XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiVW5rbm93biB1bnBhY2sgZm9ybWF0ICd7MH0nIi5mb3JtYXQoZm9ybWF0KSkKCiAgICAgICAgZnVuYyA9IGZvcm1hdF9pbmZvWzFdCiAgICAgICAgZnVuYyhmaWxlbmFtZSwgZXh0cmFjdF9kaXIsICoqZGljdChmb3JtYXRfaW5mb1syXSkpCiAgICBlbHNlOgogICAgICAgICMgd2UgbmVlZCB0byBsb29rIGF0IHRoZSByZWdpc3RlcmVkIHVucGFja2VycyBzdXBwb3J0ZWQgZXh0ZW5zaW9ucwogICAgICAgIGZvcm1hdCA9IF9maW5kX3VucGFja19mb3JtYXQoZmlsZW5hbWUpCiAgICAgICAgaWYgZm9ybWF0IGlzIE5vbmU6CiAgICAgICAgICAgIHJhaXNlIFJlYWRFcnJvcigiVW5rbm93biBhcmNoaXZlIGZvcm1hdCAnezB9JyIuZm9ybWF0KGZpbGVuYW1lKSkKCiAgICAgICAgZnVuYyA9IF9VTlBBQ0tfRk9STUFUU1tmb3JtYXRdWzFdCiAgICAgICAga3dhcmdzID0gZGljdChfVU5QQUNLX0ZPUk1BVFNbZm9ybWF0XVsyXSkKICAgICAgICBmdW5jKGZpbGVuYW1lLCBleHRyYWN0X2RpciwgKiprd2FyZ3MpCgoKaWYgaGFzYXR0cihvcywgJ3N0YXR2ZnMnKToKCiAgICBfX2FsbF9fLmFwcGVuZCgnZGlza191c2FnZScpCiAgICBfbnR1cGxlX2Rpc2t1c2FnZSA9IGNvbGxlY3Rpb25zLm5hbWVkdHVwbGUoJ3VzYWdlJywgJ3RvdGFsIHVzZWQgZnJlZScpCgogICAgZGVmIGRpc2tfdXNhZ2UocGF0aCk6CiAgICAgICAgIiIiUmV0dXJuIGRpc2sgdXNhZ2Ugc3RhdGlzdGljcyBhYm91dCB0aGUgZ2l2ZW4gcGF0aC4KCiAgICAgICAgUmV0dXJuZWQgdmFsdWUgaXMgYSBuYW1lZCB0dXBsZSB3aXRoIGF0dHJpYnV0ZXMgJ3RvdGFsJywgJ3VzZWQnIGFuZAogICAgICAgICdmcmVlJywgd2hpY2ggYXJlIHRoZSBhbW91bnQgb2YgdG90YWwsIHVzZWQgYW5kIGZyZWUgc3BhY2UsIGluIGJ5dGVzLgogICAgICAgICIiIgogICAgICAgIHN0ID0gb3Muc3RhdHZmcyhwYXRoKQogICAgICAgIGZyZWUgPSBzdC5mX2JhdmFpbCAqIHN0LmZfZnJzaXplCiAgICAgICAgdG90YWwgPSBzdC5mX2Jsb2NrcyAqIHN0LmZfZnJzaXplCiAgICAgICAgdXNlZCA9IChzdC5mX2Jsb2NrcyAtIHN0LmZfYmZyZWUpICogc3QuZl9mcnNpemUKICAgICAgICByZXR1cm4gX250dXBsZV9kaXNrdXNhZ2UodG90YWwsIHVzZWQsIGZyZWUpCgplbGlmIG9zLm5hbWUgPT0gJ250JzoKCiAgICBpbXBvcnQgbnQKICAgIF9fYWxsX18uYXBwZW5kKCdkaXNrX3VzYWdlJykKICAgIF9udHVwbGVfZGlza3VzYWdlID0gY29sbGVjdGlvbnMubmFtZWR0dXBsZSgndXNhZ2UnLCAndG90YWwgdXNlZCBmcmVlJykKCiAgICBkZWYgZGlza191c2FnZShwYXRoKToKICAgICAgICAiIiJSZXR1cm4gZGlzayB1c2FnZSBzdGF0aXN0aWNzIGFib3V0IHRoZSBnaXZlbiBwYXRoLgoKICAgICAgICBSZXR1cm5lZCB2YWx1cyBpcyBhIG5hbWVkIHR1cGxlIHdpdGggYXR0cmlidXRlcyAndG90YWwnLCAndXNlZCcgYW5kCiAgICAgICAgJ2ZyZWUnLCB3aGljaCBhcmUgdGhlIGFtb3VudCBvZiB0b3RhbCwgdXNlZCBhbmQgZnJlZSBzcGFjZSwgaW4gYnl0ZXMuCiAgICAgICAgIiIiCiAgICAgICAgdG90YWwsIGZyZWUgPSBudC5fZ2V0ZGlza3VzYWdlKHBhdGgpCiAgICAgICAgdXNlZCA9IHRvdGFsIC0gZnJlZQogICAgICAgIHJldHVybiBfbnR1cGxlX2Rpc2t1c2FnZSh0b3RhbCwgdXNlZCwgZnJlZSkKCgpkZWYgY2hvd24ocGF0aCwgdXNlcj1Ob25lLCBncm91cD1Ob25lKToKICAgICIiIkNoYW5nZSBvd25lciB1c2VyIGFuZCBncm91cCBvZiB0aGUgZ2l2ZW4gcGF0aC4KCiAgICB1c2VyIGFuZCBncm91cCBjYW4gYmUgdGhlIHVpZC9naWQgb3IgdGhlIHVzZXIvZ3JvdXAgbmFtZXMsIGFuZCBpbiB0aGF0IGNhc2UsCiAgICB0aGV5IGFyZSBjb252ZXJ0ZWQgdG8gdGhlaXIgcmVzcGVjdGl2ZSB1aWQvZ2lkLgogICAgIiIiCgogICAgaWYgdXNlciBpcyBOb25lIGFuZCBncm91cCBpcyBOb25lOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoInVzZXIgYW5kL29yIGdyb3VwIG11c3QgYmUgc2V0IikKCiAgICBfdXNlciA9IHVzZXIKICAgIF9ncm91cCA9IGdyb3VwCgogICAgIyAtMSBtZWFucyBkb24ndCBjaGFuZ2UgaXQKICAgIGlmIHVzZXIgaXMgTm9uZToKICAgICAgICBfdXNlciA9IC0xCiAgICAjIHVzZXIgY2FuIGVpdGhlciBiZSBhbiBpbnQgKHRoZSB1aWQpIG9yIGEgc3RyaW5nICh0aGUgc3lzdGVtIHVzZXJuYW1lKQogICAgZWxpZiBpc2luc3RhbmNlKHVzZXIsIHN0cik6CiAgICAgICAgX3VzZXIgPSBfZ2V0X3VpZCh1c2VyKQogICAgICAgIGlmIF91c2VyIGlzIE5vbmU6CiAgICAgICAgICAgIHJhaXNlIExvb2t1cEVycm9yKCJubyBzdWNoIHVzZXI6IHshcn0iLmZvcm1hdCh1c2VyKSkKCiAgICBpZiBncm91cCBpcyBOb25lOgogICAgICAgIF9ncm91cCA9IC0xCiAgICBlbGlmIG5vdCBpc2luc3RhbmNlKGdyb3VwLCBpbnQpOgogICAgICAgIF9ncm91cCA9IF9nZXRfZ2lkKGdyb3VwKQogICAgICAgIGlmIF9ncm91cCBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBMb29rdXBFcnJvcigibm8gc3VjaCBncm91cDogeyFyfSIuZm9ybWF0KGdyb3VwKSkKCiAgICBvcy5jaG93bihwYXRoLCBfdXNlciwgX2dyb3VwKQoKZGVmIGdldF90ZXJtaW5hbF9zaXplKGZhbGxiYWNrPSg4MCwgMjQpKToKICAgICIiIkdldCB0aGUgc2l6ZSBvZiB0aGUgdGVybWluYWwgd2luZG93LgoKICAgIEZvciBlYWNoIG9mIHRoZSB0d28gZGltZW5zaW9ucywgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlLCBDT0xVTU5TCiAgICBhbmQgTElORVMgcmVzcGVjdGl2ZWx5LCBpcyBjaGVja2VkLiBJZiB0aGUgdmFyaWFibGUgaXMgZGVmaW5lZCBhbmQKICAgIHRoZSB2YWx1ZSBpcyBhIHBvc2l0aXZlIGludGVnZXIsIGl0IGlzIHVzZWQuCgogICAgV2hlbiBDT0xVTU5TIG9yIExJTkVTIGlzIG5vdCBkZWZpbmVkLCB3aGljaCBpcyB0aGUgY29tbW9uIGNhc2UsCiAgICB0aGUgdGVybWluYWwgY29ubmVjdGVkIHRvIHN5cy5fX3N0ZG91dF9fIGlzIHF1ZXJpZWQKICAgIGJ5IGludm9raW5nIG9zLmdldF90ZXJtaW5hbF9zaXplLgoKICAgIElmIHRoZSB0ZXJtaW5hbCBzaXplIGNhbm5vdCBiZSBzdWNjZXNzZnVsbHkgcXVlcmllZCwgZWl0aGVyIGJlY2F1c2UKICAgIHRoZSBzeXN0ZW0gZG9lc24ndCBzdXBwb3J0IHF1ZXJ5aW5nLCBvciBiZWNhdXNlIHdlIGFyZSBub3QKICAgIGNvbm5lY3RlZCB0byBhIHRlcm1pbmFsLCB0aGUgdmFsdWUgZ2l2ZW4gaW4gZmFsbGJhY2sgcGFyYW1ldGVyCiAgICBpcyB1c2VkLiBGYWxsYmFjayBkZWZhdWx0cyB0byAoODAsIDI0KSB3aGljaCBpcyB0aGUgZGVmYXVsdAogICAgc2l6ZSB1c2VkIGJ5IG1hbnkgdGVybWluYWwgZW11bGF0b3JzLgoKICAgIFRoZSB2YWx1ZSByZXR1cm5lZCBpcyBhIG5hbWVkIHR1cGxlIG9mIHR5cGUgb3MudGVybWluYWxfc2l6ZS4KICAgICIiIgogICAgIyBjb2x1bW5zLCBsaW5lcyBhcmUgdGhlIHdvcmtpbmcgdmFsdWVzCiAgICB0cnk6CiAgICAgICAgY29sdW1ucyA9IGludChvcy5lbnZpcm9uWydDT0xVTU5TJ10pCiAgICBleGNlcHQgKEtleUVycm9yLCBWYWx1ZUVycm9yKToKICAgICAgICBjb2x1bW5zID0gMAoKICAgIHRyeToKICAgICAgICBsaW5lcyA9IGludChvcy5lbnZpcm9uWydMSU5FUyddKQogICAgZXhjZXB0IChLZXlFcnJvciwgVmFsdWVFcnJvcik6CiAgICAgICAgbGluZXMgPSAwCgogICAgIyBvbmx5IHF1ZXJ5IGlmIG5lY2Vzc2FyeQogICAgaWYgY29sdW1ucyA8PSAwIG9yIGxpbmVzIDw9IDA6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzaXplID0gb3MuZ2V0X3Rlcm1pbmFsX3NpemUoc3lzLl9fc3Rkb3V0X18uZmlsZW5vKCkpCiAgICAgICAgZXhjZXB0IChOYW1lRXJyb3IsIE9TRXJyb3IpOgogICAgICAgICAgICBzaXplID0gb3MudGVybWluYWxfc2l6ZShmYWxsYmFjaykKICAgICAgICBpZiBjb2x1bW5zIDw9IDA6CiAgICAgICAgICAgIGNvbHVtbnMgPSBzaXplLmNvbHVtbnMKICAgICAgICBpZiBsaW5lcyA8PSAwOgogICAgICAgICAgICBsaW5lcyA9IHNpemUubGluZXMKCiAgICByZXR1cm4gb3MudGVybWluYWxfc2l6ZSgoY29sdW1ucywgbGluZXMpKQoKZGVmIHdoaWNoKGNtZCwgbW9kZT1vcy5GX09LIHwgb3MuWF9PSywgcGF0aD1Ob25lKToKICAgICIiIkdpdmVuIGEgY29tbWFuZCwgbW9kZSwgYW5kIGEgUEFUSCBzdHJpbmcsIHJldHVybiB0aGUgcGF0aCB3aGljaAogICAgY29uZm9ybXMgdG8gdGhlIGdpdmVuIG1vZGUgb24gdGhlIFBBVEgsIG9yIE5vbmUgaWYgdGhlcmUgaXMgbm8gc3VjaAogICAgZmlsZS4KCiAgICBgbW9kZWAgZGVmYXVsdHMgdG8gb3MuRl9PSyB8IG9zLlhfT0suIGBwYXRoYCBkZWZhdWx0cyB0byB0aGUgcmVzdWx0CiAgICBvZiBvcy5lbnZpcm9uLmdldCgiUEFUSCIpLCBvciBjYW4gYmUgb3ZlcnJpZGRlbiB3aXRoIGEgY3VzdG9tIHNlYXJjaAogICAgcGF0aC4KCiAgICAiIiIKICAgICMgQ2hlY2sgdGhhdCBhIGdpdmVuIGZpbGUgY2FuIGJlIGFjY2Vzc2VkIHdpdGggdGhlIGNvcnJlY3QgbW9kZS4KICAgICMgQWRkaXRpb25hbGx5IGNoZWNrIHRoYXQgYGZpbGVgIGlzIG5vdCBhIGRpcmVjdG9yeSwgYXMgb24gV2luZG93cwogICAgIyBkaXJlY3RvcmllcyBwYXNzIHRoZSBvcy5hY2Nlc3MgY2hlY2suCiAgICBkZWYgX2FjY2Vzc19jaGVjayhmbiwgbW9kZSk6CiAgICAgICAgcmV0dXJuIChvcy5wYXRoLmV4aXN0cyhmbikgYW5kIG9zLmFjY2VzcyhmbiwgbW9kZSkKICAgICAgICAgICAgICAgIGFuZCBub3Qgb3MucGF0aC5pc2RpcihmbikpCgogICAgIyBJZiB3ZSdyZSBnaXZlbiBhIHBhdGggd2l0aCBhIGRpcmVjdG9yeSBwYXJ0LCBsb29rIGl0IHVwIGRpcmVjdGx5IHJhdGhlcgogICAgIyB0aGFuIHJlZmVycmluZyB0byBQQVRIIGRpcmVjdG9yaWVzLiBUaGlzIGluY2x1ZGVzIGNoZWNraW5nIHJlbGF0aXZlIHRvIHRoZQogICAgIyBjdXJyZW50IGRpcmVjdG9yeSwgZS5nLiAuL3NjcmlwdAogICAgaWYgb3MucGF0aC5kaXJuYW1lKGNtZCk6CiAgICAgICAgaWYgX2FjY2Vzc19jaGVjayhjbWQsIG1vZGUpOgogICAgICAgICAgICByZXR1cm4gY21kCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBpZiBwYXRoIGlzIE5vbmU6CiAgICAgICAgcGF0aCA9IG9zLmVudmlyb24uZ2V0KCJQQVRIIiwgb3MuZGVmcGF0aCkKICAgIGlmIG5vdCBwYXRoOgogICAgICAgIHJldHVybiBOb25lCiAgICBwYXRoID0gcGF0aC5zcGxpdChvcy5wYXRoc2VwKQoKICAgIGlmIHN5cy5wbGF0Zm9ybSA9PSAid2luMzIiOgogICAgICAgICMgVGhlIGN1cnJlbnQgZGlyZWN0b3J5IHRha2VzIHByZWNlZGVuY2Ugb24gV2luZG93cy4KICAgICAgICBpZiBub3Qgb3MuY3VyZGlyIGluIHBhdGg6CiAgICAgICAgICAgIHBhdGguaW5zZXJ0KDAsIG9zLmN1cmRpcikKCiAgICAgICAgIyBQQVRIRVhUIGlzIG5lY2Vzc2FyeSB0byBjaGVjayBvbiBXaW5kb3dzLgogICAgICAgIHBhdGhleHQgPSBvcy5lbnZpcm9uLmdldCgiUEFUSEVYVCIsICIiKS5zcGxpdChvcy5wYXRoc2VwKQogICAgICAgICMgU2VlIGlmIHRoZSBnaXZlbiBmaWxlIG1hdGNoZXMgYW55IG9mIHRoZSBleHBlY3RlZCBwYXRoIGV4dGVuc2lvbnMuCiAgICAgICAgIyBUaGlzIHdpbGwgYWxsb3cgdXMgdG8gc2hvcnQgY2lyY3VpdCB3aGVuIGdpdmVuICJweXRob24uZXhlIi4KICAgICAgICAjIElmIGl0IGRvZXMgbWF0Y2gsIG9ubHkgdGVzdCB0aGF0IG9uZSwgb3RoZXJ3aXNlIHdlIGhhdmUgdG8gdHJ5CiAgICAgICAgIyBvdGhlcnMuCiAgICAgICAgaWYgYW55KGNtZC5sb3dlcigpLmVuZHN3aXRoKGV4dC5sb3dlcigpKSBmb3IgZXh0IGluIHBhdGhleHQpOgogICAgICAgICAgICBmaWxlcyA9IFtjbWRdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZmlsZXMgPSBbY21kICsgZXh0IGZvciBleHQgaW4gcGF0aGV4dF0KICAgIGVsc2U6CiAgICAgICAgIyBPbiBvdGhlciBwbGF0Zm9ybXMgeW91IGRvbid0IGhhdmUgdGhpbmdzIGxpa2UgUEFUSEVYVCB0byB0ZWxsIHlvdQogICAgICAgICMgd2hhdCBmaWxlIHN1ZmZpeGVzIGFyZSBleGVjdXRhYmxlLCBzbyBqdXN0IHBhc3Mgb24gY21kIGFzLWlzLgogICAgICAgIGZpbGVzID0gW2NtZF0KCiAgICBzZWVuID0gc2V0KCkKICAgIGZvciBkaXIgaW4gcGF0aDoKICAgICAgICBub3JtZGlyID0gb3MucGF0aC5ub3JtY2FzZShkaXIpCiAgICAgICAgaWYgbm90IG5vcm1kaXIgaW4gc2VlbjoKICAgICAgICAgICAgc2Vlbi5hZGQobm9ybWRpcikKICAgICAgICAgICAgZm9yIHRoZWZpbGUgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICBuYW1lID0gb3MucGF0aC5qb2luKGRpciwgdGhlZmlsZSkKICAgICAgICAgICAgICAgIGlmIF9hY2Nlc3NfY2hlY2sobmFtZSwgbW9kZSk6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUKICAgIHJldHVybiBOb25lCg==',
'/Lib/_pyio.py':'',
'/Lib/_functools.py':'ZGVmIHBhcnRpYWwoZnVuYywgKmFyZ3MsICoqa2V5d29yZHMpOgogICAgZGVmIG5ld2Z1bmMoKmZhcmdzLCAqKmZrZXl3b3Jkcyk6CiAgICAgICAgbmV3a2V5d29yZHMgPSBrZXl3b3Jkcy5jb3B5KCkKICAgICAgICBuZXdrZXl3b3Jkcy51cGRhdGUoZmtleXdvcmRzKQogICAgICAgIHJldHVybiBmdW5jKCooYXJncyArIGZhcmdzKSwgKipuZXdrZXl3b3JkcykKICAgIG5ld2Z1bmMuZnVuYyA9IGZ1bmMKICAgIG5ld2Z1bmMuYXJncyA9IGFyZ3MKICAgIG5ld2Z1bmMua2V5d29yZHMgPSBrZXl3b3JkcwogICAgcmV0dXJuIG5ld2Z1bmMKCmRlZiByZWR1Y2UoZnVuYyxpdGVyYWJsZSxpbml0aWFsaXplcj1Ob25lKToKICAgIGFyZ3MgPSBpdGVyKGl0ZXJhYmxlKQogICAgaWYgaW5pdGlhbGl6ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgcmVzID0gaW5pdGlhbGl6ZXIKICAgIGVsc2U6CiAgICAgICAgcmVzID0gbmV4dChhcmcpCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzID0gZnVuYyhyZXMsbmV4dChhcmdzKSkKICAgICAgICBleGNlcHQgU3RvcEl0ZXJhdGlvbjoKICAgICAgICAgICAgcmV0dXJuIHJlcwo=',
'/Lib/fnmatch.py':'IiIiRmlsZW5hbWUgbWF0Y2hpbmcgd2l0aCBzaGVsbCBwYXR0ZXJucy4NCg0KZm5tYXRjaChGSUxFTkFNRSwgUEFUVEVSTikgbWF0Y2hlcyBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsIGNvbnZlbnRpb24uDQpmbm1hdGNoY2FzZShGSUxFTkFNRSwgUEFUVEVSTikgYWx3YXlzIHRha2VzIGNhc2UgaW4gYWNjb3VudC4NCg0KVGhlIGZ1bmN0aW9ucyBvcGVyYXRlIGJ5IHRyYW5zbGF0aW5nIHRoZSBwYXR0ZXJuIGludG8gYSByZWd1bGFyDQpleHByZXNzaW9uLiAgVGhleSBjYWNoZSB0aGUgY29tcGlsZWQgcmVndWxhciBleHByZXNzaW9ucyBmb3Igc3BlZWQuDQoNClRoZSBmdW5jdGlvbiB0cmFuc2xhdGUoUEFUVEVSTikgcmV0dXJucyBhIHJlZ3VsYXIgZXhwcmVzc2lvbg0KY29ycmVzcG9uZGluZyB0byBQQVRURVJOLiAgKEl0IGRvZXMgbm90IGNvbXBpbGUgaXQuKQ0KIiIiDQppbXBvcnQgb3MNCmltcG9ydCBwb3NpeHBhdGgNCmltcG9ydCByZQ0KaW1wb3J0IGZ1bmN0b29scw0KDQpfX2FsbF9fID0gWyJmaWx0ZXIiLCAiZm5tYXRjaCIsICJmbm1hdGNoY2FzZSIsICJ0cmFuc2xhdGUiXQ0KDQpkZWYgZm5tYXRjaChuYW1lLCBwYXQpOg0KICAgICIiIlRlc3Qgd2hldGhlciBGSUxFTkFNRSBtYXRjaGVzIFBBVFRFUk4uDQoNCiAgICBQYXR0ZXJucyBhcmUgVW5peCBzaGVsbCBzdHlsZToNCg0KICAgICogICAgICAgbWF0Y2hlcyBldmVyeXRoaW5nDQogICAgPyAgICAgICBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyDQogICAgW3NlcV0gICBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgaW4gc2VxDQogICAgWyFzZXFdICBtYXRjaGVzIGFueSBjaGFyIG5vdCBpbiBzZXENCg0KICAgIEFuIGluaXRpYWwgcGVyaW9kIGluIEZJTEVOQU1FIGlzIG5vdCBzcGVjaWFsLg0KICAgIEJvdGggRklMRU5BTUUgYW5kIFBBVFRFUk4gYXJlIGZpcnN0IGNhc2Utbm9ybWFsaXplZA0KICAgIGlmIHRoZSBvcGVyYXRpbmcgc3lzdGVtIHJlcXVpcmVzIGl0Lg0KICAgIElmIHlvdSBkb24ndCB3YW50IHRoaXMsIHVzZSBmbm1hdGNoY2FzZShGSUxFTkFNRSwgUEFUVEVSTikuDQogICAgIiIiDQogICAgbmFtZSA9IG9zLnBhdGgubm9ybWNhc2UobmFtZSkNCiAgICBwYXQgPSBvcy5wYXRoLm5vcm1jYXNlKHBhdCkNCiAgICByZXR1cm4gZm5tYXRjaGNhc2UobmFtZSwgcGF0KQ0KDQpAZnVuY3Rvb2xzLmxydV9jYWNoZShtYXhzaXplPTI1MCwgdHlwZWQ9VHJ1ZSkNCmRlZiBfY29tcGlsZV9wYXR0ZXJuKHBhdCk6DQogICAgaWYgaXNpbnN0YW5jZShwYXQsIGJ5dGVzKToNCiAgICAgICAgcGF0X3N0ciA9IHN0cihwYXQsICdJU08tODg1OS0xJykNCiAgICAgICAgcmVzX3N0ciA9IHRyYW5zbGF0ZShwYXRfc3RyKQ0KICAgICAgICByZXMgPSBieXRlcyhyZXNfc3RyLCAnSVNPLTg4NTktMScpDQogICAgZWxzZToNCiAgICAgICAgcmVzID0gdHJhbnNsYXRlKHBhdCkNCiAgICByZXR1cm4gcmUuY29tcGlsZShyZXMpLm1hdGNoDQoNCmRlZiBmaWx0ZXIobmFtZXMsIHBhdCk6DQogICAgIiIiUmV0dXJuIHRoZSBzdWJzZXQgb2YgdGhlIGxpc3QgTkFNRVMgdGhhdCBtYXRjaCBQQVQuIiIiDQogICAgcmVzdWx0ID0gW10NCiAgICBwYXQgPSBvcy5wYXRoLm5vcm1jYXNlKHBhdCkNCiAgICBtYXRjaCA9IF9jb21waWxlX3BhdHRlcm4ocGF0KQ0KICAgIGlmIG9zLnBhdGggaXMgcG9zaXhwYXRoOg0KICAgICAgICAjIG5vcm1jYXNlIG9uIHBvc2l4IGlzIE5PUC4gT3B0aW1pemUgaXQgYXdheSBmcm9tIHRoZSBsb29wLg0KICAgICAgICBmb3IgbmFtZSBpbiBuYW1lczoNCiAgICAgICAgICAgIGlmIG1hdGNoKG5hbWUpOg0KICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobmFtZSkNCiAgICBlbHNlOg0KICAgICAgICBmb3IgbmFtZSBpbiBuYW1lczoNCiAgICAgICAgICAgIGlmIG1hdGNoKG9zLnBhdGgubm9ybWNhc2UobmFtZSkpOg0KICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobmFtZSkNCiAgICByZXR1cm4gcmVzdWx0DQoNCmRlZiBmbm1hdGNoY2FzZShuYW1lLCBwYXQpOg0KICAgICIiIlRlc3Qgd2hldGhlciBGSUxFTkFNRSBtYXRjaGVzIFBBVFRFUk4sIGluY2x1ZGluZyBjYXNlLg0KDQogICAgVGhpcyBpcyBhIHZlcnNpb24gb2YgZm5tYXRjaCgpIHdoaWNoIGRvZXNuJ3QgY2FzZS1ub3JtYWxpemUNCiAgICBpdHMgYXJndW1lbnRzLg0KICAgICIiIg0KICAgIG1hdGNoID0gX2NvbXBpbGVfcGF0dGVybihwYXQpDQogICAgcmV0dXJuIG1hdGNoKG5hbWUpIGlzIG5vdCBOb25lDQoNCg0KZGVmIHRyYW5zbGF0ZShwYXQpOg0KICAgICIiIlRyYW5zbGF0ZSBhIHNoZWxsIFBBVFRFUk4gdG8gYSByZWd1bGFyIGV4cHJlc3Npb24uDQoNCiAgICBUaGVyZSBpcyBubyB3YXkgdG8gcXVvdGUgbWV0YS1jaGFyYWN0ZXJzLg0KICAgICIiIg0KDQogICAgaSwgbiA9IDAsIGxlbihwYXQpDQogICAgcmVzID0gJycNCiAgICB3aGlsZSBpIDwgbjoNCiAgICAgICAgYyA9IHBhdFtpXQ0KICAgICAgICBpID0gaSsxDQogICAgICAgIGlmIGMgPT0gJyonOg0KICAgICAgICAgICAgcmVzID0gcmVzICsgJy4qJw0KICAgICAgICBlbGlmIGMgPT0gJz8nOg0KICAgICAgICAgICAgcmVzID0gcmVzICsgJy4nDQogICAgICAgIGVsaWYgYyA9PSAnWyc6DQogICAgICAgICAgICBqID0gaQ0KICAgICAgICAgICAgaWYgaiA8IG4gYW5kIHBhdFtqXSA9PSAnISc6DQogICAgICAgICAgICAgICAgaiA9IGorMQ0KICAgICAgICAgICAgaWYgaiA8IG4gYW5kIHBhdFtqXSA9PSAnXSc6DQogICAgICAgICAgICAgICAgaiA9IGorMQ0KICAgICAgICAgICAgd2hpbGUgaiA8IG4gYW5kIHBhdFtqXSAhPSAnXSc6DQogICAgICAgICAgICAgICAgaiA9IGorMQ0KICAgICAgICAgICAgaWYgaiA+PSBuOg0KICAgICAgICAgICAgICAgIHJlcyA9IHJlcyArICdcXFsnDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHN0dWZmID0gcGF0W2k6al0ucmVwbGFjZSgnXFwnLCdcXFxcJykNCiAgICAgICAgICAgICAgICBpID0gaisxDQogICAgICAgICAgICAgICAgaWYgc3R1ZmZbMF0gPT0gJyEnOg0KICAgICAgICAgICAgICAgICAgICBzdHVmZiA9ICdeJyArIHN0dWZmWzE6XQ0KICAgICAgICAgICAgICAgIGVsaWYgc3R1ZmZbMF0gPT0gJ14nOg0KICAgICAgICAgICAgICAgICAgICBzdHVmZiA9ICdcXCcgKyBzdHVmZg0KICAgICAgICAgICAgICAgIHJlcyA9ICclc1slc10nICUgKHJlcywgc3R1ZmYpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXMgPSByZXMgKyByZS5lc2NhcGUoYykNCiAgICByZXR1cm4gcmVzICsgJ1xaKD9tcyknDQo=',
'/Lib/errno.py':'IlRoaXMgbW9kdWxlIG1ha2VzIGF2YWlsYWJsZSBzdGFuZGFyZCBlcnJubyBzeXN0ZW0gc3ltYm9scy5cblxuVGhlIHZhbHVlIG9mIGVhY2ggc3ltYm9sIGlzIHRoZSBjb3JyZXNwb25kaW5nIGludGVnZXIgdmFsdWUsXG5lLmcuLCBvbiBtb3N0IHN5c3RlbXMsIGVycm5vLkVOT0VOVCBlcXVhbHMgdGhlIGludGVnZXIgMi5cblxuVGhlIGRpY3Rpb25hcnkgZXJybm8uZXJyb3Jjb2RlIG1hcHMgbnVtZXJpYyBjb2RlcyB0byBzeW1ib2wgbmFtZXMsXG5lLmcuLCBlcnJuby5lcnJvcmNvZGVbMl0gY291bGQgYmUgdGhlIHN0cmluZyAnRU5PRU5UJy5cblxuU3ltYm9scyB0aGF0IGFyZSBub3QgcmVsZXZhbnQgdG8gdGhlIHVuZGVybHlpbmcgc3lzdGVtIGFyZSBub3QgZGVmaW5lZC5cblxuVG8gbWFwIGVycm9yIGNvZGVzIHRvIGVycm9yIG1lc3NhZ2VzLCB1c2UgdGhlIGZ1bmN0aW9uIG9zLnN0cmVycm9yKCksXG5lLmcuIG9zLnN0cmVycm9yKDIpIGNvdWxkIHJldHVybiAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScuIgoKRTJCSUcgPSA3CkVBQ0NFUyA9IDEzCkVBRERSSU5VU0UgPSA5OApFQUREUk5PVEFWQUlMID0gOTkKRUFEViA9IDY4CkVBRk5PU1VQUE9SVCA9IDk3CkVBR0FJTiA9IDExCkVBTFJFQURZID0gMTE0CkVCQURFID0gNTIKRUJBREYgPSA5CkVCQURGRCA9IDc3CkVCQURNU0cgPSA3NApFQkFEUiA9IDUzCkVCQURSUUMgPSA1NgpFQkFEU0xUID0gNTcKRUJGT05UID0gNTkKRUJVU1kgPSAxNgpFQ0hJTEQgPSAxMApFQ0hSTkcgPSA0NApFQ09NTSA9IDcwCkVDT05OQUJPUlRFRCA9IDEwMwpFQ09OTlJFRlVTRUQgPSAxMTEKRUNPTk5SRVNFVCA9IDEwNApFREVBRExLID0gMzUKRURFQURMT0NLID0gMzUKRURFU1RBRERSUkVRID0gODkKRURPTSA9IDMzCkVET1RET1QgPSA3MwpFRFFVT1QgPSAxMjIKRUVYSVNUID0gMTcKRUZBVUxUID0gMTQKRUZCSUcgPSAyNwpFSE9TVERPV04gPSAxMTIKRUhPU1RVTlJFQUNIID0gMTEzCkVJRFJNID0gNDMKRUlMU0VRID0gODQKRUlOUFJPR1JFU1MgPSAxMTUKRUlOVFIgPSA0CkVJTlZBTCA9IDIyCkVJTyA9IDUKRUlTQ09OTiA9IDEwNgpFSVNESVIgPSAyMQpFSVNOQU0gPSAxMjAKRUwySExUID0gNTEKRUwyTlNZTkMgPSA0NQpFTDNITFQgPSA0NgpFTDNSU1QgPSA0NwpFTElCQUNDID0gNzkKRUxJQkJBRCA9IDgwCkVMSUJFWEVDID0gODMKRUxJQk1BWCA9IDgyCkVMSUJTQ04gPSA4MQpFTE5STkcgPSA0OApFTE9PUCA9IDQwCkVNRklMRSA9IDI0CkVNTElOSyA9IDMxCkVNU0dTSVpFID0gOTAKRU1VTFRJSE9QID0gNzIKRU5BTUVUT09MT05HID0gMzYKRU5BVkFJTCA9IDExOQpFTkVURE9XTiA9IDEwMApFTkVUUkVTRVQgPSAxMDIKRU5FVFVOUkVBQ0ggPSAxMDEKRU5GSUxFID0gMjMKRU5PQU5PID0gNTUKRU5PQlVGUyA9IDEwNQpFTk9DU0kgPSA1MApFTk9EQVRBID0gNjEKRU5PREVWID0gMTkKRU5PRU5UID0gMgpFTk9FWEVDID0gOApFTk9MQ0sgPSAzNwpFTk9MSU5LID0gNjcKRU5PTUVNID0gMTIKRU5PTVNHID0gNDIKRU5PTkVUID0gNjQKRU5PUEtHID0gNjUKRU5PUFJPVE9PUFQgPSA5MgpFTk9TUEMgPSAyOApFTk9TUiA9IDYzCkVOT1NUUiA9IDYwCkVOT1NZUyA9IDM4CkVOT1RCTEsgPSAxNQpFTk9UQ09OTiA9IDEwNwpFTk9URElSID0gMjAKRU5PVEVNUFRZID0gMzkKRU5PVE5BTSA9IDExOApFTk9UU09DSyA9IDg4CkVOT1RUWSA9IDI1CkVOT1RVTklRID0gNzYKRU5YSU8gPSA2CkVPUE5PVFNVUFAgPSA5NQpFT1ZFUkZMT1cgPSA3NQpFUEVSTSA9IDEKRVBGTk9TVVBQT1JUID0gOTYKRVBJUEUgPSAzMgpFUFJPVE8gPSA3MQpFUFJPVE9OT1NVUFBPUlQgPSA5MwpFUFJPVE9UWVBFID0gOTEKRVJBTkdFID0gMzQKRVJFTUNIRyA9IDc4CkVSRU1PVEUgPSA2NgpFUkVNT1RFSU8gPSAxMjEKRVJFU1RBUlQgPSA4NQpFUk9GUyA9IDMwCkVTSFVURE9XTiA9IDEwOApFU09DS1ROT1NVUFBPUlQgPSA5NApFU1BJUEUgPSAyOQpFU1JDSCA9IDMKRVNSTU5UID0gNjkKRVNUQUxFID0gMTE2CkVTVFJQSVBFID0gODYKRVRJTUUgPSA2MgpFVElNRURPVVQgPSAxMTAKRVRPT01BTllSRUZTID0gMTA5CkVUWFRCU1kgPSAyNgpFVUNMRUFOID0gMTE3CkVVTkFUQ0ggPSA0OQpFVVNFUlMgPSA4NwpFV09VTERCTE9DSyA9IDExCkVYREVWID0gMTgKRVhGVUxMID0gNTQKIyBlcnJvcmNvZGUK',
'/Lib/itertools.py':'',
'/Lib/gc.py':'IiIiVGhpcyBtb2R1bGUgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBnYXJiYWdlIGNvbGxlY3RvciBmb3IgcmVmZXJlbmNlIGN5Y2xlcy4KCmVuYWJsZSgpIC0tIEVuYWJsZSBhdXRvbWF0aWMgZ2FyYmFnZSBjb2xsZWN0aW9uLgpkaXNhYmxlKCkgLS0gRGlzYWJsZSBhdXRvbWF0aWMgZ2FyYmFnZSBjb2xsZWN0aW9uLgppc2VuYWJsZWQoKSAtLSBSZXR1cm5zIHRydWUgaWYgYXV0b21hdGljIGNvbGxlY3Rpb24gaXMgZW5hYmxlZC4KY29sbGVjdCgpIC0tIERvIGEgZnVsbCBjb2xsZWN0aW9uIHJpZ2h0IG5vdy4KZ2V0X2NvdW50KCkgLS0gUmV0dXJuIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gY291bnRzLgpzZXRfZGVidWcoKSAtLSBTZXQgZGVidWdnaW5nIGZsYWdzLgpnZXRfZGVidWcoKSAtLSBHZXQgZGVidWdnaW5nIGZsYWdzLgpzZXRfdGhyZXNob2xkKCkgLS0gU2V0IHRoZSBjb2xsZWN0aW9uIHRocmVzaG9sZHMuCmdldF90aHJlc2hvbGQoKSAtLSBSZXR1cm4gdGhlIGN1cnJlbnQgdGhlIGNvbGxlY3Rpb24gdGhyZXNob2xkcy4KZ2V0X29iamVjdHMoKSAtLSBSZXR1cm4gYSBsaXN0IG9mIGFsbCBvYmplY3RzIHRyYWNrZWQgYnkgdGhlIGNvbGxlY3Rvci4KaXNfdHJhY2tlZCgpIC0tIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIG9iamVjdCBpcyB0cmFja2VkLgpnZXRfcmVmZXJyZXJzKCkgLS0gUmV0dXJuIHRoZSBsaXN0IG9mIG9iamVjdHMgdGhhdCByZWZlciB0byBhbiBvYmplY3QuCmdldF9yZWZlcmVudHMoKSAtLSBSZXR1cm4gdGhlIGxpc3Qgb2Ygb2JqZWN0cyB0aGF0IGFuIG9iamVjdCByZWZlcnMgdG8uCiIiIgoKCkRFQlVHX0NPTExFQ1RBQkxFID0gMgoKREVCVUdfTEVBSyA9IDM4CgpERUJVR19TQVZFQUxMID0gMzIKCkRFQlVHX1NUQVRTID0gMQoKREVCVUdfVU5DT0xMRUNUQUJMRSA9IDQKCmNsYXNzIF9fbG9hZGVyX186CiAgICBwYXNzCgpjYWxsYmFja3MgPSBbXQoKZGVmIGNvbGxlY3QoKmFyZ3MsKiprdyk6CiAgICAiIiJjb2xsZWN0KFtnZW5lcmF0aW9uXSkgLT4gbiAgICAKICAgIFdpdGggbm8gYXJndW1lbnRzLCBydW4gYSBmdWxsIGNvbGxlY3Rpb24uICBUaGUgb3B0aW9uYWwgYXJndW1lbnQKICAgIG1heSBiZSBhbiBpbnRlZ2VyIHNwZWNpZnlpbmcgd2hpY2ggZ2VuZXJhdGlvbiB0byBjb2xsZWN0LiAgQSBWYWx1ZUVycm9yCiAgICBpcyByYWlzZWQgaWYgdGhlIGdlbmVyYXRpb24gbnVtYmVyIGlzIGludmFsaWQuCiAgICAKICAgIFRoZSBudW1iZXIgb2YgdW5yZWFjaGFibGUgb2JqZWN0cyBpcyByZXR1cm5lZC4KICAgICIiIgogICAgcGFzcwoKZGVmIGRpc2FibGUoKmFyZ3MsKiprdyk6CiAgICAiIiJkaXNhYmxlKCkgLT4gTm9uZSAgICAKICAgIERpc2FibGUgYXV0b21hdGljIGdhcmJhZ2UgY29sbGVjdGlvbi4KICAgICIiIgogICAgcGFzcwoKZGVmIGVuYWJsZSgqYXJncywqKmt3KToKICAgICIiImVuYWJsZSgpIC0+IE5vbmUgICAgCiAgICBFbmFibGUgYXV0b21hdGljIGdhcmJhZ2UgY29sbGVjdGlvbi4KICAgICIiIgogICAgcGFzcwoKZ2FyYmFnZSA9IFtdCgpkZWYgZ2V0X2NvdW50KCphcmdzLCoqa3cpOgogICAgIiIiZ2V0X2NvdW50KCkgLT4gKGNvdW50MCwgY291bnQxLCBjb3VudDIpICAgIAogICAgUmV0dXJuIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gY291bnRzCiAgICAiIiIKICAgIHBhc3MKCmRlZiBnZXRfZGVidWcoKmFyZ3MsKiprdyk6CiAgICAiIiJnZXRfZGVidWcoKSAtPiBmbGFncyAgICAKICAgIEdldCB0aGUgZ2FyYmFnZSBjb2xsZWN0aW9uIGRlYnVnZ2luZyBmbGFncy4KICAgICIiIgogICAgcGFzcwoKZGVmIGdldF9vYmplY3RzKCphcmdzLCoqa3cpOgogICAgIiIiZ2V0X29iamVjdHMoKSAtPiBbLi4uXSAgICAKICAgIFJldHVybiBhIGxpc3Qgb2Ygb2JqZWN0cyB0cmFja2VkIGJ5IHRoZSBjb2xsZWN0b3IgKGV4Y2x1ZGluZyB0aGUgbGlzdAogICAgcmV0dXJuZWQpLgogICAgIiIiCiAgICBwYXNzCgpkZWYgZ2V0X3JlZmVyZW50cygqYXJncywqKmt3KToKICAgICIiImdldF9yZWZlcmVudHMoKm9ianMpIC0+IGxpc3QgICAgUmV0dXJuIHRoZSBsaXN0IG9mIG9iamVjdHMgdGhhdCBhcmUgZGlyZWN0bHkgcmVmZXJyZWQgdG8gYnkgb2Jqcy4iIiIKICAgIHBhc3MKCmRlZiBnZXRfcmVmZXJyZXJzKCphcmdzLCoqa3cpOgogICAgIiIiZ2V0X3JlZmVycmVycygqb2JqcykgLT4gbGlzdCAgICBSZXR1cm4gdGhlIGxpc3Qgb2Ygb2JqZWN0cyB0aGF0IGRpcmVjdGx5IHJlZmVyIHRvIGFueSBvZiBvYmpzLiIiIgogICAgcGFzcwoKZGVmIGdldF90aHJlc2hvbGQoKmFyZ3MsKiprdyk6CiAgICAiIiJnZXRfdGhyZXNob2xkKCkgLT4gKHRocmVzaG9sZDAsIHRocmVzaG9sZDEsIHRocmVzaG9sZDIpICAgIAogICAgUmV0dXJuIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gdGhyZXNob2xkcwogICAgIiIiCiAgICBwYXNzCgpkZWYgaXNfdHJhY2tlZCgqYXJncywqKmt3KToKICAgICIiImlzX3RyYWNrZWQob2JqKSAtPiBib29sICAgIAogICAgUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgdHJhY2tlZCBieSB0aGUgZ2FyYmFnZSBjb2xsZWN0b3IuCiAgICBTaW1wbGUgYXRvbWljIG9iamVjdHMgd2lsbCByZXR1cm4gZmFsc2UuCiAgICAiIiIKICAgIHBhc3MKCmRlZiBpc2VuYWJsZWQoKmFyZ3MsKiprdyk6CiAgICAiIiJpc2VuYWJsZWQoKSAtPiBzdGF0dXMgICAgCiAgICBSZXR1cm5zIHRydWUgaWYgYXV0b21hdGljIGdhcmJhZ2UgY29sbGVjdGlvbiBpcyBlbmFibGVkLgogICAgIiIiCiAgICBwYXNzCgpkZWYgc2V0X2RlYnVnKCphcmdzLCoqa3cpOgogICAgIiIic2V0X2RlYnVnKGZsYWdzKSAtPiBOb25lICAgIAogICAgU2V0IHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24gZGVidWdnaW5nIGZsYWdzLiBEZWJ1Z2dpbmcgaW5mb3JtYXRpb24gaXMKICAgIHdyaXR0ZW4gdG8gc3lzLnN0ZGVyci4KICAgIAogICAgZmxhZ3MgaXMgYW4gaW50ZWdlciBhbmQgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBiaXRzIHR1cm5lZCBvbjoKICAgIAogICAgICBERUJVR19TVEFUUyAtIFByaW50IHN0YXRpc3RpY3MgZHVyaW5nIGNvbGxlY3Rpb24uCiAgICAgIERFQlVHX0NPTExFQ1RBQkxFIC0gUHJpbnQgY29sbGVjdGFibGUgb2JqZWN0cyBmb3VuZC4KICAgICAgREVCVUdfVU5DT0xMRUNUQUJMRSAtIFByaW50IHVucmVhY2hhYmxlIGJ1dCB1bmNvbGxlY3RhYmxlIG9iamVjdHMgZm91bmQuCiAgICAgIERFQlVHX1NBVkVBTEwgLSBTYXZlIG9iamVjdHMgdG8gZ2MuZ2FyYmFnZSByYXRoZXIgdGhhbiBmcmVlaW5nIHRoZW0uCiAgICAgIERFQlVHX0xFQUsgLSBEZWJ1ZyBsZWFraW5nIHByb2dyYW1zIChldmVyeXRoaW5nIGJ1dCBTVEFUUykuCiAgICAiIiIKICAgIHBhc3MKCmRlZiBzZXRfdGhyZXNob2xkKCphcmdzLCoqa3cpOgogICAgIiIic2V0X3RocmVzaG9sZCh0aHJlc2hvbGQwLCBbdGhyZXNob2xkMSwgdGhyZXNob2xkMl0pIC0+IE5vbmUgICAgCiAgICBTZXRzIHRoZSBjb2xsZWN0aW9uIHRocmVzaG9sZHMuICBTZXR0aW5nIHRocmVzaG9sZDAgdG8gemVybyBkaXNhYmxlcwogICAgY29sbGVjdGlvbi4KICAgICIiIgogICAgcGFzcwo=',
'/Lib/_string.py':'IiIic3RyaW5nIGhlbHBlciBtb2R1bGUiIiIKCgpjbGFzcyBfX2xvYWRlcl9fKG9iamVjdCk6CiAgICBwYXNzCgpkZWYgZm9ybWF0dGVyX2ZpZWxkX25hbWVfc3BsaXQoKmFyZ3MsKiprdyk6CiAgICAiIiJzcGxpdCB0aGUgYXJndW1lbnQgYXMgYSBmaWVsZCBuYW1lIiIiCiAgICBwYXNzCgpkZWYgZm9ybWF0dGVyX3BhcnNlcigqYXJncywqKmt3KToKICAgICIiInBhcnNlIHRoZSBhcmd1bWVudCBhcyBhIGZvcm1hdCBzdHJpbmciIiIKICAgIHBhc3MK',
'/Lib/tarfile.py':'',
'/Lib/random.py':'',
'/Lib/site.py':'aW1wb3J0IHN5cwppbXBvcnQgZXh0ZXJuYWxfaW1wb3J0CnN5cy5wYXRoX2hvb2tzLmluc2VydCgwLGV4dGVybmFsX2ltcG9ydC5Nb2R1bGVGaW5kZXIpCg==',
'/Lib/pprint.py':'',
'/Lib/textwrap.py':'',
'/Lib/posixpath.py':'',
'/Lib/struct.py':'X19hbGxfXyA9IFsKICAgICMgRnVuY3Rpb25zCiAgICAnY2FsY3NpemUnLCAncGFjaycsICdwYWNrX2ludG8nLCAndW5wYWNrJywgJ3VucGFja19mcm9tJywKCiAgICAjIENsYXNzZXMKICAgICdTdHJ1Y3QnLAoKICAgICMgRXhjZXB0aW9ucwogICAgJ2Vycm9yJwogICAgXQoKZnJvbSBfc3RydWN0IGltcG9ydCAqCmZyb20gX3N0cnVjdCBpbXBvcnQgX2NsZWFyY2FjaGUKZnJvbSBfc3RydWN0IGltcG9ydCBfX2RvY19fCg==',
'/Lib/_weakref.py':'Y2xhc3MgUHJveHlUeXBlOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLG9iaik6CiAgICAgICAgc2VsZi5vYmogPSBvYmoKCkNhbGxhYmxlUHJveHlUeXBlID0gUHJveHlUeXBlClByb3h5VHlwZXMgPSBbUHJveHlUeXBlLENhbGxhYmxlUHJveHlUeXBlXQoKY2xhc3MgUmVmZXJlbmNlVHlwZToKCiAgICBkZWYgX19pbml0X18oc2VsZixvYmosY2FsbGJhY2spOgogICAgICAgIHNlbGYub2JqID0gb2JqCiAgICAgICAgc2VsZi5jYWxsYmFjayA9IGNhbGxiYWNrCgpjbGFzcyByZWY6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsb2JqLGNhbGxiYWNrPU5vbmUpOgogICAgICAgIHNlbGYub2JqID0gUmVmZXJlbmNlVHlwZShvYmosY2FsbGJhY2spCiAgICAgICAgc2VsZi5jYWxsYmFjaz1jYWxsYmFjawoKZGVmIGdldHdlYWtyZWZjb3VudChvYmopOgogICAgcmV0dXJuIDEKCmRlZiBnZXR3ZWFrcmVmcyhvYmopOgogICAgcmV0dXJuIG9iagoKCmRlZiBwcm94eShvYmosY2FsbGJhY2spOgogICAgcmV0dXJuIFByb3h5VHlwZShvYmopCgo=',
'/Lib/_collections.py':'',
'/Lib/binascii.py':'',
'/Lib/antigravity.py':'aW1wb3J0IHdlYmJyb3dzZXIKaW1wb3J0IGhhc2hsaWIKCndlYmJyb3dzZXIub3BlbigiaHR0cDovL3hrY2QuY29tLzM1My8iKQoKZGVmIGdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgZGF0ZWRvdyk6CiAgICAnJydDb21wdXRlIGdlb2hhc2goKSB1c2luZyB0aGUgTXVucm9lIGFsZ29yaXRobS4KCiAgICA+Pj4gZ2VvaGFzaCgzNy40MjE1NDIsIC0xMjIuMDg1NTg5LCBiJzIwMDUtMDUtMjYtMTA0NTguNjgnKQogICAgMzcuODU3NzEzIC0xMjIuNTQ0NTQzCgogICAgJycnCiAgICAjIGh0dHA6Ly94a2NkLmNvbS80MjYvCiAgICBoID0gaGFzaGxpYi5tZDUoZGF0ZWRvdykuaGV4ZGlnZXN0KCkKICAgIHAsIHEgPSBbKCclZicgJSBmbG9hdC5mcm9taGV4KCcwLicgKyB4KSkgZm9yIHggaW4gKGhbOjE2XSwgaFsxNjozMl0pXQogICAgcHJpbnQoJyVkJXMgJWQlcycgJSAobGF0aXR1ZGUsIHBbMTpdLCBsb25naXR1ZGUsIHFbMTpdKSkK',
'/Lib/platform.py':'',
'/Lib/optparse.py':'',
'/Lib/tokenize.py':'',
'/Lib/_codecs.py':'CmRlZiBhc2NpaV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgYXNjaWlfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGNoYXJidWZmZXJfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGNoYXJtYXBfYnVpbGQoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgY2hhcm1hcF9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgY2hhcm1hcF9lbmNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZGVjb2RlKCphcmdzLCoqa3cpOgogICAgIiIiZGVjb2RlKG9iaiwgW2VuY29kaW5nWyxlcnJvcnNdXSkgLT4gb2JqZWN0ICAgIAogICAgRGVjb2RlcyBvYmogdXNpbmcgdGhlIGNvZGVjIHJlZ2lzdGVyZWQgZm9yIGVuY29kaW5nLiBlbmNvZGluZyBkZWZhdWx0cwogICAgdG8gdGhlIGRlZmF1bHQgZW5jb2RpbmcuIGVycm9ycyBtYXkgYmUgZ2l2ZW4gdG8gc2V0IGEgZGlmZmVyZW50IGVycm9yCiAgICBoYW5kbGluZyBzY2hlbWUuIERlZmF1bHQgaXMgJ3N0cmljdCcgbWVhbmluZyB0aGF0IGVuY29kaW5nIGVycm9ycyByYWlzZQogICAgYSBWYWx1ZUVycm9yLiBPdGhlciBwb3NzaWJsZSB2YWx1ZXMgYXJlICdpZ25vcmUnIGFuZCAncmVwbGFjZScKICAgIGFzIHdlbGwgYXMgYW55IG90aGVyIG5hbWUgcmVnaXN0ZXJlZCB3aXRoIGNvZGVjcy5yZWdpc3Rlcl9lcnJvciB0aGF0IGlzCiAgICBhYmxlIHRvIGhhbmRsZSBWYWx1ZUVycm9ycy4iIiIKICAgIHBhc3MKCmRlZiBlbmNvZGUoKmFyZ3MsKiprdyk6CiAgICAiIiJlbmNvZGUob2JqLCBbZW5jb2RpbmdbLGVycm9yc11dKSAtPiBvYmplY3QgICAgCiAgICBFbmNvZGVzIG9iaiB1c2luZyB0aGUgY29kZWMgcmVnaXN0ZXJlZCBmb3IgZW5jb2RpbmcuIGVuY29kaW5nIGRlZmF1bHRzCiAgICB0byB0aGUgZGVmYXVsdCBlbmNvZGluZy4gZXJyb3JzIG1heSBiZSBnaXZlbiB0byBzZXQgYSBkaWZmZXJlbnQgZXJyb3IKICAgIGhhbmRsaW5nIHNjaGVtZS4gRGVmYXVsdCBpcyAnc3RyaWN0JyBtZWFuaW5nIHRoYXQgZW5jb2RpbmcgZXJyb3JzIHJhaXNlCiAgICBhIFZhbHVlRXJyb3IuIE90aGVyIHBvc3NpYmxlIHZhbHVlcyBhcmUgJ2lnbm9yZScsICdyZXBsYWNlJyBhbmQKICAgICd4bWxjaGFycmVmcmVwbGFjZScgYXMgd2VsbCBhcyBhbnkgb3RoZXIgbmFtZSByZWdpc3RlcmVkIHdpdGgKICAgIGNvZGVjcy5yZWdpc3Rlcl9lcnJvciB0aGF0IGNhbiBoYW5kbGUgVmFsdWVFcnJvcnMuIiIiCiAgICBwYXNzCgpkZWYgZXNjYXBlX2RlY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBlc2NhcGVfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGxhdGluXzFfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGxhdGluXzFfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGxvb2t1cChlbmNvZGluZyk6CiAgICAiIiJsb29rdXAoZW5jb2RpbmcpIC0+IENvZGVjSW5mbyAgICAKICAgIExvb2tzIHVwIGEgY29kZWMgdHVwbGUgaW4gdGhlIFB5dGhvbiBjb2RlYyByZWdpc3RyeSBhbmQgcmV0dXJucwogICAgYSBDb2RlY0luZm8gb2JqZWN0LiIiIgogICAgcHJpbnQoJ19jb2RlY3MgbG9va3VwJyxlbmNvZGluZykKICAgIHJldHVybiBlbmNvZGluZwoKZGVmIGxvb2t1cF9lcnJvcigqYXJncywqKmt3KToKICAgICIiImxvb2t1cF9lcnJvcihlcnJvcnMpIC0+IGhhbmRsZXIgICAgCiAgICBSZXR1cm4gdGhlIGVycm9yIGhhbmRsZXIgZm9yIHRoZSBzcGVjaWZpZWQgZXJyb3IgaGFuZGxpbmcgbmFtZQogICAgb3IgcmFpc2UgYSBMb29rdXBFcnJvciwgaWYgbm8gaGFuZGxlciBleGlzdHMgdW5kZXIgdGhpcyBuYW1lLiIiIgogICAgcGFzcwoKZGVmIG1iY3NfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIG1iY3NfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHJhd191bmljb2RlX2VzY2FwZV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgcmF3X3VuaWNvZGVfZXNjYXBlX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiByZWFkYnVmZmVyX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiByZWdpc3RlcigqYXJncywqKmt3KToKICAgICIiInJlZ2lzdGVyKHNlYXJjaF9mdW5jdGlvbikgICAgCiAgICBSZWdpc3RlciBhIGNvZGVjIHNlYXJjaCBmdW5jdGlvbi4gU2VhcmNoIGZ1bmN0aW9ucyBhcmUgZXhwZWN0ZWQgdG8gdGFrZQogICAgb25lIGFyZ3VtZW50LCB0aGUgZW5jb2RpbmcgbmFtZSBpbiBhbGwgbG93ZXIgY2FzZSBsZXR0ZXJzLCBhbmQgcmV0dXJuCiAgICBhIHR1cGxlIG9mIGZ1bmN0aW9ucyAoZW5jb2RlciwgZGVjb2Rlciwgc3RyZWFtX3JlYWRlciwgc3RyZWFtX3dyaXRlcikKICAgIChvciBhIENvZGVjSW5mbyBvYmplY3QpLiIiIgogICAgcGFzcwoKZGVmIHJlZ2lzdGVyX2Vycm9yKCphcmdzLCoqa3cpOgogICAgIiIicmVnaXN0ZXJfZXJyb3IoZXJyb3JzLCBoYW5kbGVyKSAgICAKICAgIFJlZ2lzdGVyIHRoZSBzcGVjaWZpZWQgZXJyb3IgaGFuZGxlciB1bmRlciB0aGUgbmFtZQogICAgZXJyb3JzLiBoYW5kbGVyIG11c3QgYmUgYSBjYWxsYWJsZSBvYmplY3QsIHRoYXQKICAgIHdpbGwgYmUgY2FsbGVkIHdpdGggYW4gZXhjZXB0aW9uIGluc3RhbmNlIGNvbnRhaW5pbmcKICAgIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsb2NhdGlvbiBvZiB0aGUgZW5jb2RpbmcvZGVjb2RpbmcKICAgIGVycm9yIGFuZCBtdXN0IHJldHVybiBhIChyZXBsYWNlbWVudCwgbmV3IHBvc2l0aW9uKSB0dXBsZS4iIiIKICAgIHBhc3MKCmRlZiB1bmljb2RlX2VzY2FwZV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdW5pY29kZV9lc2NhcGVfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHVuaWNvZGVfaW50ZXJuYWxfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHVuaWNvZGVfaW50ZXJuYWxfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8xNl9iZV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzE2X2JlX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfMTZfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8xNl9lbmNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzE2X2V4X2RlY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfMTZfbGVfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8xNl9sZV9lbmNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzMyX2JlX2RlY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfMzJfYmVfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8zMl9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzMyX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfMzJfZXhfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8zMl9sZV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzMyX2xlX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfN19kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzdfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl84X2RlY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfOF9lbmNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCg==',
'/Lib/_markupbase.py':'',
'/Lib/copyreg.py':'',
'/Lib/base64.py':'',
'/Lib/pickle.py':'ZnJvbSBqc29uIGltcG9ydCAq',
'/Lib/token.py':'IiIiVG9rZW4gY29uc3RhbnRzIChmcm9tICJ0b2tlbi5oIikuIiIiDQoNCl9fYWxsX18gPSBbJ3Rva19uYW1lJywgJ0lTVEVSTUlOQUwnLCAnSVNOT05URVJNSU5BTCcsICdJU0VPRiddDQoNCiMgIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZDsgcGxlYXNlIGRvbid0IG11Y2sgaXQgdXAhDQojDQojICBUbyB1cGRhdGUgdGhlIHN5bWJvbHMgaW4gdGhpcyBmaWxlLCAnY2QnIHRvIHRoZSB0b3AgZGlyZWN0b3J5IG9mDQojICB0aGUgcHl0aG9uIHNvdXJjZSB0cmVlIGFmdGVyIGJ1aWxkaW5nIHRoZSBpbnRlcnByZXRlciBhbmQgcnVuOg0KIw0KIyAgICAuL3B5dGhvbiBMaWIvdG9rZW4ucHkNCg0KIy0tc3RhcnQgY29uc3RhbnRzLS0NCkVORE1BUktFUiA9IDANCk5BTUUgPSAxDQpOVU1CRVIgPSAyDQpTVFJJTkcgPSAzDQpORVdMSU5FID0gNA0KSU5ERU5UID0gNQ0KREVERU5UID0gNg0KTFBBUiA9IDcNClJQQVIgPSA4DQpMU1FCID0gOQ0KUlNRQiA9IDEwDQpDT0xPTiA9IDExDQpDT01NQSA9IDEyDQpTRU1JID0gMTMNClBMVVMgPSAxNA0KTUlOVVMgPSAxNQ0KU1RBUiA9IDE2DQpTTEFTSCA9IDE3DQpWQkFSID0gMTgNCkFNUEVSID0gMTkNCkxFU1MgPSAyMA0KR1JFQVRFUiA9IDIxDQpFUVVBTCA9IDIyDQpET1QgPSAyMw0KUEVSQ0VOVCA9IDI0DQpMQlJBQ0UgPSAyNQ0KUkJSQUNFID0gMjYNCkVRRVFVQUwgPSAyNw0KTk9URVFVQUwgPSAyOA0KTEVTU0VRVUFMID0gMjkNCkdSRUFURVJFUVVBTCA9IDMwDQpUSUxERSA9IDMxDQpDSVJDVU1GTEVYID0gMzINCkxFRlRTSElGVCA9IDMzDQpSSUdIVFNISUZUID0gMzQNCkRPVUJMRVNUQVIgPSAzNQ0KUExVU0VRVUFMID0gMzYNCk1JTkVRVUFMID0gMzcNClNUQVJFUVVBTCA9IDM4DQpTTEFTSEVRVUFMID0gMzkNClBFUkNFTlRFUVVBTCA9IDQwDQpBTVBFUkVRVUFMID0gNDENClZCQVJFUVVBTCA9IDQyDQpDSVJDVU1GTEVYRVFVQUwgPSA0Mw0KTEVGVFNISUZURVFVQUwgPSA0NA0KUklHSFRTSElGVEVRVUFMID0gNDUNCkRPVUJMRVNUQVJFUVVBTCA9IDQ2DQpET1VCTEVTTEFTSCA9IDQ3DQpET1VCTEVTTEFTSEVRVUFMID0gNDgNCkFUID0gNDkNClJBUlJPVyA9IDUwDQpFTExJUFNJUyA9IDUxDQpPUCA9IDUyDQpFUlJPUlRPS0VOID0gNTMNCk5fVE9LRU5TID0gNTQNCk5UX09GRlNFVCA9IDI1Ng0KIy0tZW5kIGNvbnN0YW50cy0tDQoNCnRva19uYW1lID0ge3ZhbHVlOiBuYW1lDQogICAgICAgICAgICBmb3IgbmFtZSwgdmFsdWUgaW4gZ2xvYmFscygpLml0ZW1zKCkNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGludCkgYW5kIG5vdCBuYW1lLnN0YXJ0c3dpdGgoJ18nKX0NCl9fYWxsX18uZXh0ZW5kKHRva19uYW1lLnZhbHVlcygpKQ0KDQpkZWYgSVNURVJNSU5BTCh4KToNCiAgICByZXR1cm4geCA8IE5UX09GRlNFVA0KDQpkZWYgSVNOT05URVJNSU5BTCh4KToNCiAgICByZXR1cm4geCA+PSBOVF9PRkZTRVQNCg0KZGVmIElTRU9GKHgpOg0KICAgIHJldHVybiB4ID09IEVORE1BUktFUg0KDQoNCmRlZiBfbWFpbigpOg0KICAgIGltcG9ydCByZQ0KICAgIGltcG9ydCBzeXMNCiAgICBhcmdzID0gc3lzLmFyZ3ZbMTpdDQogICAgaW5GaWxlTmFtZSA9IGFyZ3MgYW5kIGFyZ3NbMF0gb3IgIkluY2x1ZGUvdG9rZW4uaCINCiAgICBvdXRGaWxlTmFtZSA9ICJMaWIvdG9rZW4ucHkiDQogICAgaWYgbGVuKGFyZ3MpID4gMToNCiAgICAgICAgb3V0RmlsZU5hbWUgPSBhcmdzWzFdDQogICAgdHJ5Og0KICAgICAgICBmcCA9IG9wZW4oaW5GaWxlTmFtZSkNCiAgICBleGNlcHQgSU9FcnJvciBhcyBlcnI6DQogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoIkkvTyBlcnJvcjogJXNcbiIgJSBzdHIoZXJyKSkNCiAgICAgICAgc3lzLmV4aXQoMSkNCiAgICBsaW5lcyA9IGZwLnJlYWQoKS5zcGxpdCgiXG4iKQ0KICAgIGZwLmNsb3NlKCkNCiAgICBwcm9nID0gcmUuY29tcGlsZSgNCiAgICAgICAgIiNkZWZpbmVbIFx0XVsgXHRdKihbQS1aMC05XVtBLVowLTlfXSopWyBcdF1bIFx0XSooWzAtOV1bMC05XSopIiwNCiAgICAgICAgcmUuSUdOT1JFQ0FTRSkNCiAgICB0b2tlbnMgPSB7fQ0KICAgIGZvciBsaW5lIGluIGxpbmVzOg0KICAgICAgICBtYXRjaCA9IHByb2cubWF0Y2gobGluZSkNCiAgICAgICAgaWYgbWF0Y2g6DQogICAgICAgICAgICBuYW1lLCB2YWwgPSBtYXRjaC5ncm91cCgxLCAyKQ0KICAgICAgICAgICAgdmFsID0gaW50KHZhbCkNCiAgICAgICAgICAgIHRva2Vuc1t2YWxdID0gbmFtZSAgICAgICAgICAjIHJldmVyc2Ugc28gd2UgY2FuIHNvcnQgdGhlbS4uLg0KICAgIGtleXMgPSBzb3J0ZWQodG9rZW5zLmtleXMoKSkNCiAgICAjIGxvYWQgdGhlIG91dHB1dCBza2VsZXRvbiBmcm9tIHRoZSB0YXJnZXQ6DQogICAgdHJ5Og0KICAgICAgICBmcCA9IG9wZW4ob3V0RmlsZU5hbWUpDQogICAgZXhjZXB0IElPRXJyb3IgYXMgZXJyOg0KICAgICAgICBzeXMuc3RkZXJyLndyaXRlKCJJL08gZXJyb3I6ICVzXG4iICUgc3RyKGVycikpDQogICAgICAgIHN5cy5leGl0KDIpDQogICAgZm9ybWF0ID0gZnAucmVhZCgpLnNwbGl0KCJcbiIpDQogICAgZnAuY2xvc2UoKQ0KICAgIHRyeToNCiAgICAgICAgc3RhcnQgPSBmb3JtYXQuaW5kZXgoIiMtLXN0YXJ0IGNvbnN0YW50cy0tIikgKyAxDQogICAgICAgIGVuZCA9IGZvcm1hdC5pbmRleCgiIy0tZW5kIGNvbnN0YW50cy0tIikNCiAgICBleGNlcHQgVmFsdWVFcnJvcjoNCiAgICAgICAgc3lzLnN0ZGVyci53cml0ZSgidGFyZ2V0IGRvZXMgbm90IGNvbnRhaW4gZm9ybWF0IG1hcmtlcnMiKQ0KICAgICAgICBzeXMuZXhpdCgzKQ0KICAgIGxpbmVzID0gW10NCiAgICBmb3IgdmFsIGluIGtleXM6DQogICAgICAgIGxpbmVzLmFwcGVuZCgiJXMgPSAlZCIgJSAodG9rZW5zW3ZhbF0sIHZhbCkpDQogICAgZm9ybWF0W3N0YXJ0OmVuZF0gPSBsaW5lcw0KICAgIHRyeToNCiAgICAgICAgZnAgPSBvcGVuKG91dEZpbGVOYW1lLCAndycpDQogICAgZXhjZXB0IElPRXJyb3IgYXMgZXJyOg0KICAgICAgICBzeXMuc3RkZXJyLndyaXRlKCJJL08gZXJyb3I6ICVzXG4iICUgc3RyKGVycikpDQogICAgICAgIHN5cy5leGl0KDQpDQogICAgZnAud3JpdGUoIlxuIi5qb2luKGZvcm1hdCkpDQogICAgZnAuY2xvc2UoKQ0KDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgX21haW4oKQ0K',
'/Lib/tempfile.py':'',
'/Lib/posix.py':'',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/atexit.py':'IiIiYWxsb3cgcHJvZ3JhbW1lciB0byBkZWZpbmUgbXVsdGlwbGUgZXhpdCBmdW5jdGlvbnMgdG8gYmUgZXhlY3V0ZWR1cG9uIG5vcm1hbCBwcm9ncmFtIHRlcm1pbmF0aW9uLgoKVHdvIHB1YmxpYyBmdW5jdGlvbnMsIHJlZ2lzdGVyIGFuZCB1bnJlZ2lzdGVyLCBhcmUgZGVmaW5lZC4KIiIiCgoKY2xhc3MgX19sb2FkZXJfXyhvYmplY3QpOgogICAgcGFzcwoKZGVmIF9jbGVhcigqYXJncywqKmt3KToKICAgICIiIl9jbGVhcigpIC0+IE5vbmUgICAgCiAgICBDbGVhciB0aGUgbGlzdCBvZiBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZXhpdCBmdW5jdGlvbnMuIiIiCiAgICBwYXNzCgpkZWYgX3J1bl9leGl0ZnVuY3MoKmFyZ3MsKiprdyk6CiAgICAiIiJfcnVuX2V4aXRmdW5jcygpIC0+IE5vbmUgICAgCiAgICBSdW4gYWxsIHJlZ2lzdGVyZWQgZXhpdCBmdW5jdGlvbnMuIiIiCiAgICBwYXNzCgpkZWYgcmVnaXN0ZXIoKmFyZ3MsKiprdyk6CiAgICAiIiJyZWdpc3RlcihmdW5jLCAqYXJncywgKiprd2FyZ3MpIC0+IGZ1bmMgICAgCiAgICBSZWdpc3RlciBhIGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkIHVwb24gbm9ybWFsIHByb2dyYW0gdGVybWluYXRpb24KICAgIAogICAgICAgIGZ1bmMgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYXQgZXhpdAogICAgICAgIGFyZ3MgLSBvcHRpb25hbCBhcmd1bWVudHMgdG8gcGFzcyB0byBmdW5jCiAgICAgICAga3dhcmdzIC0gb3B0aW9uYWwga2V5d29yZCBhcmd1bWVudHMgdG8gcGFzcyB0byBmdW5jCiAgICAKICAgICAgICBmdW5jIGlzIHJldHVybmVkIHRvIGZhY2lsaXRhdGUgdXNhZ2UgYXMgYSBkZWNvcmF0b3IuIiIiCiAgICBwYXNzCgpkZWYgdW5yZWdpc3RlcigqYXJncywqKmt3KToKICAgICIiInVucmVnaXN0ZXIoZnVuYykgLT4gTm9uZSAgICAKICAgIFVucmVnaXN0ZXIgYSBleGl0IGZ1bmN0aW9uIHdoaWNoIHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgdXNpbmcKICAgIGF0ZXhpdC5yZWdpc3RlcgogICAgCiAgICAgICAgZnVuYyAtIGZ1bmN0aW9uIHRvIGJlIHVucmVnaXN0ZXJlZCIiIgogICAgcGFzcwo=',
'/Lib/dis.py':'ZGVmIGRpcyhzcmMpOgogICAgcmV0dXJuIF9fQlJZVEhPTl9fLkpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5MmpzKHNyYykpLnRvX2pzKCkK',
'/Lib/types.py':'IiIiCkRlZmluZSBuYW1lcyBmb3IgYnVpbHQtaW4gdHlwZXMgdGhhdCBhcmVuJ3QgZGlyZWN0bHkgYWNjZXNzaWJsZSBhcyBhIGJ1aWx0aW4uCiIiIgppbXBvcnQgc3lzCgojIEl0ZXJhdG9ycyBpbiBQeXRob24gYXJlbid0IGEgbWF0dGVyIG9mIHR5cGUgYnV0IG9mIHByb3RvY29sLiAgQSBsYXJnZQojIGFuZCBjaGFuZ2luZyBudW1iZXIgb2YgYnVpbHRpbiB0eXBlcyBpbXBsZW1lbnQgKnNvbWUqIGZsYXZvciBvZgojIGl0ZXJhdG9yLiAgRG9uJ3QgY2hlY2sgdGhlIHR5cGUhICBVc2UgaGFzYXR0ciB0byBjaGVjayBmb3IgYm90aAojICJfX2l0ZXJfXyIgYW5kICJfX25leHRfXyIgYXR0cmlidXRlcyBpbnN0ZWFkLgoKI2RlZiBfZigpOiBwYXNzCiNGdW5jdGlvblR5cGUgPSB0eXBlKF9mKQojTGFtYmRhVHlwZSA9IHR5cGUobGFtYmRhOiBOb25lKSAgICAgICAgICMgU2FtZSBhcyBGdW5jdGlvblR5cGUKI0NvZGVUeXBlID0gdHlwZShfZi5fX2NvZGVfXykKCiNkZWYgX2coKToKIyAgICB5aWVsZCAxCiNHZW5lcmF0b3JUeXBlID0gdHlwZShfZygpKQoKY2xhc3MgX0M6CiAgICBkZWYgX20oc2VsZik6IHBhc3MKTWV0aG9kVHlwZSA9IHR5cGUoX0MoKS5fbSkKCkJ1aWx0aW5GdW5jdGlvblR5cGUgPSB0eXBlKGxlbikKQnVpbHRpbk1ldGhvZFR5cGUgPSB0eXBlKFtdLmFwcGVuZCkgICAgICMgU2FtZSBhcyBCdWlsdGluRnVuY3Rpb25UeXBlCgpNb2R1bGVUeXBlID0gdHlwZShzeXMpCmRlZiBmb28oKTpwYXNzCkZ1bmN0aW9uVHlwZSA9IHR5cGUoZm9vKQojdHJ5OgojICAgIHJhaXNlIFR5cGVFcnJvcgojZXhjZXB0IFR5cGVFcnJvcjoKIyAgICB0YiA9IHN5cy5leGNfaW5mbygpWzJdCiMgICAgVHJhY2ViYWNrVHlwZSA9IHR5cGUodGIpCiMgICAgRnJhbWVUeXBlID0gdHlwZSh0Yi50Yl9mcmFtZSkKIyAgICB0YiA9IE5vbmU7IGRlbCB0YgoKIyBGb3IgSnl0aG9uLCB0aGUgZm9sbG93aW5nIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsCiNHZXRTZXREZXNjcmlwdG9yVHlwZSA9IHR5cGUoRnVuY3Rpb25UeXBlLl9fY29kZV9fKQojTWVtYmVyRGVzY3JpcHRvclR5cGUgPSB0eXBlKEZ1bmN0aW9uVHlwZS5fX2dsb2JhbHNfXykKCiNmaXhtZSBicnl0aG9uCiNkZWwgc3lzLCBfZiwgX2csIF9DLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTm90IGZvciBleHBvcnQK',
'/Lib/_testcapi.py':'CkNIQVJfTUFYID0gMTI3CgpDSEFSX01JTiA9IC0xMjgKCkRCTF9NQVggPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOAoKREJMX01JTiA9IDIuMjI1MDczODU4NTA3MjAxNGUtMzA4CgpGTFRfTUFYID0gMy40MDI4MjM0NjYzODUyODg2ZSszOAoKRkxUX01JTiA9IDEuMTc1NDk0MzUwODIyMjg3NWUtMzgKCklOVF9NQVggPSAyMTQ3NDgzNjQ3CgpJTlRfTUlOID0gLTIxNDc0ODM2NDgKCkxMT05HX01BWCA9IDkyMjMzNzIwMzY4NTQ3NzU4MDcKCkxMT05HX01JTiA9IC05MjIzMzcyMDM2ODU0Nzc1ODA4CgpMT05HX01BWCA9IDIxNDc0ODM2NDcKCkxPTkdfTUlOID0gLTIxNDc0ODM2NDgKClBZX1NTSVpFX1RfTUFYID0gMjE0NzQ4MzY0NwoKUFlfU1NJWkVfVF9NSU4gPSAtMjE0NzQ4MzY0OAoKU0hSVF9NQVggPSAzMjc2NwoKU0hSVF9NSU4gPSAtMzI3NjgKClNJWkVPRl9QWUdDX0hFQUQgPSAxNgoKVUNIQVJfTUFYID0gMjU1CgpVSU5UX01BWCA9IDQyOTQ5NjcyOTUKClVMTE9OR19NQVggPSAxODQ0Njc0NDA3MzcwOTU1MTYxNQoKVUxPTkdfTUFYID0gNDI5NDk2NzI5NQoKVVNIUlRfTUFYID0gNjU1MzUKCl9fbG9hZGVyX18gPSAiPF9mcm96ZW5faW1wb3J0bGliLkV4dGVuc2lvbkZpbGVMb2FkZXIgb2JqZWN0IGF0IDB4MDBDOThERDA+IgoKZGVmIF9wZW5kaW5nX3RocmVhZGZ1bmMoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpjbGFzcyBfdGVzdF9zdHJ1Y3RtZW1iZXJzVHlwZShvYmplY3QpOgogICAgcGFzcwoKZGVmIF90ZXN0X3RocmVhZF9zdGF0ZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBhcmdwYXJzaW5nKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGNvZGVfbmV3ZW1wdHkoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgY29kZWNfaW5jcmVtZW50YWxkZWNvZGVyKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGNvZGVjX2luY3JlbWVudGFsZW5jb2RlcigqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBjcmFzaF9ub19jdXJyZW50X3RocmVhZCgqYXJncywqKmt3KToKICAgIHBhc3MKCmNsYXNzIGVycm9yKEV4Y2VwdGlvbik6CiAgICBwYXNzCgpkZWYgZXhjZXB0aW9uX3ByaW50KCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGdldGFyZ3NfQigqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBnZXRhcmdzX0goKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc19JKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGdldGFyZ3NfSygqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBnZXRhcmdzX0woKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc19aKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGdldGFyZ3NfWl9oYXNoKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGdldGFyZ3NfYigqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBnZXRhcmdzX2MoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc19oKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGdldGFyZ3NfaSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBnZXRhcmdzX2soKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc19rZXl3b3JkX29ubHkoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc19rZXl3b3JkcygqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBnZXRhcmdzX2woKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc19uKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGdldGFyZ3NfcCgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBnZXRhcmdzX3MoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc19zX2hhc2goKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc19zX3N0YXIoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc190dXBsZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBnZXRhcmdzX3UoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc191X2hhc2goKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc193X3N0YXIoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZ2V0YXJnc195KCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGdldGFyZ3NfeV9oYXNoKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGdldGFyZ3NfeV9zdGFyKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGdldGFyZ3NfeigqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBnZXRhcmdzX3pfaGFzaCgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBnZXRhcmdzX3pfc3RhcigqYXJncywqKmt3KToKICAgIHBhc3MKCmNsYXNzIGluc3RhbmNlbWV0aG9kKG9iamVjdCk6CiAgICBwYXNzCgpkZWYgbWFrZV9leGNlcHRpb25fd2l0aF9kb2MoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgbWFrZV9tZW1vcnl2aWV3X2Zyb21fTlVMTF9wb2ludGVyKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHBhcnNlX3R1cGxlX2FuZF9rZXl3b3JkcygqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBweXRpbWVfb2JqZWN0X3RvX3RpbWVfdCgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBweXRpbWVfb2JqZWN0X3RvX3RpbWVzcGVjKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHB5dGltZV9vYmplY3RfdG9fdGltZXZhbCgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiByYWlzZV9leGNlcHRpb24oKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgcmFpc2VfbWVtb3J5ZXJyb3IoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgcnVuX2luX3N1YmludGVycCgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBzZXRfZXhjX2luZm8oKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdGVzdF9MX2NvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdGVzdF9aX2NvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdGVzdF9jYXBzdWxlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHRlc3RfY29uZmlnKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHRlc3RfZGF0ZXRpbWVfY2FwaSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X2RpY3RfaXRlcmF0aW9uKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHRlc3RfZW1wdHlfYXJncGFyc2UoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdGVzdF9rX2NvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdGVzdF9sYXp5X2hhc2hfaW5oZXJpdGFuY2UoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdGVzdF9saXN0X2FwaSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X2xvbmdfYW5kX292ZXJmbG93KCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHRlc3RfbG9uZ19hcGkoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdGVzdF9sb25nX2FzX2RvdWJsZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X2xvbmdfYXNfc2l6ZV90KCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHRlc3RfbG9uZ19sb25nX2FuZF9vdmVyZmxvdygqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X2xvbmdfbnVtYml0cygqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X2xvbmdsb25nX2FwaSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X251bGxfc3RyaW5ncygqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X3NfY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X3N0cmluZ19mcm9tX2Zvcm1hdCgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X3N0cmluZ190b19kb3VibGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdGVzdF91X2NvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdGVzdF91bmljb2RlX2NvbXBhcmVfd2l0aF9hc2NpaSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB0ZXN0X3dpZGVjaGFyKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHRlc3Rfd2l0aF9kb2NzdHJpbmcoKmFyZ3MsKiprdyk6CiAgICAiIiJUaGlzIGlzIGEgcHJldHR5IG5vcm1hbCBkb2NzdHJpbmcuIiIiCiAgICBwYXNzCgpkZWYgdHJhY2ViYWNrX3ByaW50KCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHVuaWNvZGVfYXN3aWRlY2hhcigqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1bmljb2RlX2Fzd2lkZWNoYXJzdHJpbmcoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdW5pY29kZV9lbmNvZGVkZWNpbWFsKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHVuaWNvZGVfdHJhbnNmb3JtZGVjaW1hbHRvYXNjaWkoKmFyZ3MsKiprdyk6CiAgICBwYXNzCg==',
'/Lib/_weakrefset.py':'IyBBY2Nlc3MgV2Vha1NldCB0aHJvdWdoIHRoZSB3ZWFrcmVmIG1vZHVsZS4KIyBUaGlzIGNvZGUgaXMgc2VwYXJhdGVkLW91dCBiZWNhdXNlIGl0IGlzIG5lZWRlZAojIGJ5IGFiYy5weSB0byBsb2FkIGV2ZXJ5dGhpbmcgZWxzZSBhdCBzdGFydHVwLgoKZnJvbSBfd2Vha3JlZiBpbXBvcnQgcmVmCgpfX2FsbF9fID0gWydXZWFrU2V0J10KCgpjbGFzcyBfSXRlcmF0aW9uR3VhcmQ6CiAgICAjIFRoaXMgY29udGV4dCBtYW5hZ2VyIHJlZ2lzdGVycyBpdHNlbGYgaW4gdGhlIGN1cnJlbnQgaXRlcmF0b3JzIG9mIHRoZQogICAgIyB3ZWFrIGNvbnRhaW5lciwgc3VjaCBhcyB0byBkZWxheSBhbGwgcmVtb3ZhbHMgdW50aWwgdGhlIGNvbnRleHQgbWFuYWdlcgogICAgIyBleGl0cy4KICAgICMgVGhpcyB0ZWNobmlxdWUgc2hvdWxkIGJlIHJlbGF0aXZlbHkgdGhyZWFkLXNhZmUgKHNpbmNlIHNldHMgYXJlKS4KCiAgICBkZWYgX19pbml0X18oc2VsZiwgd2Vha2NvbnRhaW5lcik6CiAgICAgICAgIyBEb24ndCBjcmVhdGUgY3ljbGVzCiAgICAgICAgcHJpbnQoJ2NyZWF0ZSBpdGVyYXRpb24gZ3VhcmQnLCB3ZWFrY29udGFpbmVyKQogICAgICAgIHNlbGYud2Vha2NvbnRhaW5lciA9IHJlZih3ZWFrY29udGFpbmVyKQoKICAgIGRlZiBfX2VudGVyX18oc2VsZik6CiAgICAgICAgcHJpbnQoJ2VudGVyIGl0ZXJhdGlvbiBndWFyZCcpCiAgICAgICAgdyA9IHNlbGYud2Vha2NvbnRhaW5lcigpCiAgICAgICAgaWYgdyBpcyBub3QgTm9uZToKICAgICAgICAgICAgdy5faXRlcmF0aW5nLmFkZChzZWxmKQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXhpdF9fKHNlbGYsIGUsIHQsIGIpOgogICAgICAgIHcgPSBzZWxmLndlYWtjb250YWluZXIoKQogICAgICAgIGlmIHcgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHMgPSB3Ll9pdGVyYXRpbmcKICAgICAgICAgICAgcy5yZW1vdmUoc2VsZikKICAgICAgICAgICAgaWYgbm90IHM6CiAgICAgICAgICAgICAgICB3Ll9jb21taXRfcmVtb3ZhbHMoKQoKCmNsYXNzIFdlYWtTZXQ6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGF0YT1Ob25lKToKICAgICAgICBzZWxmLmRhdGEgPSBzZXQoKQogICAgICAgIGRlZiBfcmVtb3ZlKGl0ZW0sIHNlbGZyZWY9cmVmKHNlbGYpKToKICAgICAgICAgICAgc2VsZiA9IHNlbGZyZWYoKQogICAgICAgICAgICBpZiBzZWxmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgc2VsZi5faXRlcmF0aW5nOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMuYXBwZW5kKGl0ZW0pCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YS5kaXNjYXJkKGl0ZW0pCiAgICAgICAgc2VsZi5fcmVtb3ZlID0gX3JlbW92ZQogICAgICAgICMgQSBsaXN0IG9mIGtleXMgdG8gYmUgcmVtb3ZlZAogICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMgPSBbXQogICAgICAgIHNlbGYuX2l0ZXJhdGluZyA9IHNldCgpCiAgICAgICAgaWYgZGF0YSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi51cGRhdGUoZGF0YSkKCiAgICBkZWYgX2NvbW1pdF9yZW1vdmFscyhzZWxmKToKICAgICAgICBsID0gc2VsZi5fcGVuZGluZ19yZW1vdmFscwogICAgICAgIGRpc2NhcmQgPSBzZWxmLmRhdGEuZGlzY2FyZAogICAgICAgIHdoaWxlIGw6CiAgICAgICAgICAgIGRpc2NhcmQobC5wb3AoKSkKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgd2l0aCBfSXRlcmF0aW9uR3VhcmQoc2VsZik6CiAgICAgICAgICAgIGZvciBpdGVtcmVmIGluIHNlbGYuZGF0YToKICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtcmVmKCkKICAgICAgICAgICAgICAgIGlmIGl0ZW0gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgeWllbGQgaXRlbQoKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiBsZW4oc2VsZi5kYXRhKSAtIGxlbihzZWxmLl9wZW5kaW5nX3JlbW92YWxzKQoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwgaXRlbSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3ciA9IHJlZihpdGVtKQogICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHJldHVybiB3ciBpbiBzZWxmLmRhdGEKCiAgICBkZWYgX19yZWR1Y2VfXyhzZWxmKToKICAgICAgICByZXR1cm4gKHNlbGYuX19jbGFzc19fLCAobGlzdChzZWxmKSwpLAogICAgICAgICAgICAgICAgZ2V0YXR0cihzZWxmLCAnX19kaWN0X18nLCBOb25lKSkKCiAgICBkZWYgYWRkKHNlbGYsIGl0ZW0pOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgc2VsZi5kYXRhLmFkZChyZWYoaXRlbSwgc2VsZi5fcmVtb3ZlKSkKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBzZWxmLmRhdGEuY2xlYXIoKQoKICAgIGRlZiBjb3B5KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmKQoKICAgIGRlZiBwb3Aoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpdGVtcmVmID0gc2VsZi5kYXRhLnBvcCgpCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHJhaXNlIEtleUVycm9yKCdwb3AgZnJvbSBlbXB0eSBXZWFrU2V0JykKICAgICAgICAgICAgaXRlbSA9IGl0ZW1yZWYoKQogICAgICAgICAgICBpZiBpdGVtIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0KCiAgICBkZWYgcmVtb3ZlKHNlbGYsIGl0ZW0pOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgc2VsZi5kYXRhLnJlbW92ZShyZWYoaXRlbSkpCgogICAgZGVmIGRpc2NhcmQoc2VsZiwgaXRlbSk6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBzZWxmLmRhdGEuZGlzY2FyZChyZWYoaXRlbSkpCgogICAgZGVmIHVwZGF0ZShzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBmb3IgZWxlbWVudCBpbiBvdGhlcjoKICAgICAgICAgICAgc2VsZi5hZGQoZWxlbWVudCkKCiAgICBkZWYgX19pb3JfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgc2VsZi51cGRhdGUob3RoZXIpCiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgZGlmZmVyZW5jZShzZWxmLCBvdGhlcik6CiAgICAgICAgbmV3c2V0ID0gc2VsZi5jb3B5KCkKICAgICAgICBuZXdzZXQuZGlmZmVyZW5jZV91cGRhdGUob3RoZXIpCiAgICAgICAgcmV0dXJuIG5ld3NldAogICAgX19zdWJfXyA9IGRpZmZlcmVuY2UKCiAgICBkZWYgZGlmZmVyZW5jZV91cGRhdGUoc2VsZiwgb3RoZXIpOgogICAgICAgIHNlbGYuX19pc3ViX18ob3RoZXIpCiAgICBkZWYgX19pc3ViX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgaWYgc2VsZiBpcyBvdGhlcjoKICAgICAgICAgICAgc2VsZi5kYXRhLmNsZWFyKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmRhdGEuZGlmZmVyZW5jZV91cGRhdGUocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIGludGVyc2VjdGlvbihzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKGl0ZW0gZm9yIGl0ZW0gaW4gb3RoZXIgaWYgaXRlbSBpbiBzZWxmKQogICAgX19hbmRfXyA9IGludGVyc2VjdGlvbgoKICAgIGRlZiBpbnRlcnNlY3Rpb25fdXBkYXRlKHNlbGYsIG90aGVyKToKICAgICAgICBzZWxmLl9faWFuZF9fKG90aGVyKQogICAgZGVmIF9faWFuZF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOgogICAgICAgICAgICBzZWxmLl9jb21taXRfcmVtb3ZhbHMoKQogICAgICAgIHNlbGYuZGF0YS5pbnRlcnNlY3Rpb25fdXBkYXRlKHJlZihpdGVtKSBmb3IgaXRlbSBpbiBvdGhlcikKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBpc3N1YnNldChzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5pc3N1YnNldChyZWYoaXRlbSkgZm9yIGl0ZW0gaW4gb3RoZXIpCiAgICBfX2xlX18gPSBpc3N1YnNldAoKICAgIGRlZiBfX2x0X18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPCBzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQoKICAgIGRlZiBpc3N1cGVyc2V0KHNlbGYsIG90aGVyKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhLmlzc3VwZXJzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQogICAgX19nZV9fID0gaXNzdXBlcnNldAoKICAgIGRlZiBfX2d0X18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPiBzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQoKICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCBzZWxmLl9fY2xhc3NfXyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPT0gc2V0KHJlZihpdGVtKSBmb3IgaXRlbSBpbiBvdGhlcikKCiAgICBkZWYgc3ltbWV0cmljX2RpZmZlcmVuY2Uoc2VsZiwgb3RoZXIpOgogICAgICAgIG5ld3NldCA9IHNlbGYuY29weSgpCiAgICAgICAgbmV3c2V0LnN5bW1ldHJpY19kaWZmZXJlbmNlX3VwZGF0ZShvdGhlcikKICAgICAgICByZXR1cm4gbmV3c2V0CiAgICBfX3hvcl9fID0gc3ltbWV0cmljX2RpZmZlcmVuY2UKCiAgICBkZWYgc3ltbWV0cmljX2RpZmZlcmVuY2VfdXBkYXRlKHNlbGYsIG90aGVyKToKICAgICAgICBzZWxmLl9faXhvcl9fKG90aGVyKQogICAgZGVmIF9faXhvcl9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOgogICAgICAgICAgICBzZWxmLl9jb21taXRfcmVtb3ZhbHMoKQogICAgICAgIGlmIHNlbGYgaXMgb3RoZXI6CiAgICAgICAgICAgIHNlbGYuZGF0YS5jbGVhcigpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5kYXRhLnN5bW1ldHJpY19kaWZmZXJlbmNlX3VwZGF0ZShyZWYoaXRlbSwgc2VsZi5fcmVtb3ZlKSBmb3IgaXRlbSBpbiBvdGhlcikKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiB1bmlvbihzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKGUgZm9yIHMgaW4gKHNlbGYsIG90aGVyKSBmb3IgZSBpbiBzKQogICAgX19vcl9fID0gdW5pb24KCiAgICBkZWYgaXNkaXNqb2ludChzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIGxlbihzZWxmLmludGVyc2VjdGlvbihvdGhlcikpID09IDAK',
'/Lib/warnings.py':'',
'/Lib/_struct.py':'',
'/Lib/_warnings.py':'IiIiX3dhcm5pbmdzIHByb3ZpZGVzIGJhc2ljIHdhcm5pbmcgZmlsdGVyaW5nIHN1cHBvcnQuCkl0IGlzIGEgaGVscGVyIG1vZHVsZSB0byBzcGVlZCB1cCBpbnRlcnByZXRlciBzdGFydC11cC4iIiIKCgpkZWZhdWx0X2FjdGlvbiA9ICIiImRlZmF1bHQiIiIKCmZpbHRlcnMgPSAiWygnaWdub3JlJywgTm9uZSwgPHR5cGUgJ2V4Y2VwdGlvbnMuRGVwcmVjYXRpb25XYXJuaW5nJz4sIE5vbmUsIDApLCAKICAgICgnaWdub3JlJywgTm9uZSwgPHR5cGUgJ2V4Y2VwdGlvbnMuUGVuZGluZ0RlcHJlY2F0aW9uV2FybmluZyc+LCBOb25lLCAwKSwgCiAgICAoJ2lnbm9yZScsIE5vbmUsIDx0eXBlICdleGNlcHRpb25zLkltcG9ydFdhcm5pbmcnPiwgTm9uZSwgMCksIAogICAgKCdpZ25vcmUnLCBOb25lLCA8dHlwZSAnZXhjZXB0aW9ucy5CeXRlc1dhcm5pbmcnPiwgTm9uZSwgMCldIgoKb25jZV9yZWdpc3RyeSA9IHt9CgpkZWYgd2FybigqYXJncywqKmt3KToKICAgICIiIklzc3VlIGEgd2FybmluZywgb3IgbWF5YmUgaWdub3JlIGl0IG9yIHJhaXNlIGFuIGV4Y2VwdGlvbi4iIiIKICAgIHBhc3MKCmRlZiB3YXJuX2V4cGxpY2l0KCphcmdzLCoqa3cpOgogICAgIiIiTG93LWxldmVsIGluZmVyZmFjZSB0byB3YXJuaW5ncyBmdW5jdGlvbmFsaXR5LiIiIgogICAgcGFzcwo=',
'/Lib/_imp.py':'IiIiKEV4dHJlbWVseSkgbG93LWxldmVsIGltcG9ydCBtYWNoaW5lcnkgYml0cyBhcyB1c2VkIGJ5IGltcG9ydGxpYiBhbmQgaW1wLiIiIgoKCmNsYXNzIF9fbG9hZGVyX18ob2JqZWN0KTpwYXNzCgpkZWYgX2ZpeF9jb19maWxlbmFtZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBhY3F1aXJlX2xvY2soKmFyZ3MsKiprdyk6CiAgICAiIiJhY3F1aXJlX2xvY2soKSAtPiBOb25lICAgIEFjcXVpcmVzIHRoZSBpbnRlcnByZXRlcidzIGltcG9ydCBsb2NrIGZvciB0aGUgY3VycmVudCB0aHJlYWQuCiAgICBUaGlzIGxvY2sgc2hvdWxkIGJlIHVzZWQgYnkgaW1wb3J0IGhvb2tzIHRvIGVuc3VyZSB0aHJlYWQtc2FmZXR5CiAgICB3aGVuIGltcG9ydGluZyBtb2R1bGVzLgogICAgT24gcGxhdGZvcm1zIHdpdGhvdXQgdGhyZWFkcywgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdGhpbmcuIiIiCiAgICBwYXNzCgpkZWYgZXh0ZW5zaW9uX3N1ZmZpeGVzKCphcmdzLCoqa3cpOgogICAgIiIiZXh0ZW5zaW9uX3N1ZmZpeGVzKCkgLT4gbGlzdCBvZiBzdHJpbmdzICAgIFJldHVybnMgdGhlIGxpc3Qgb2YgZmlsZSBzdWZmaXhlcyB1c2VkIHRvIGlkZW50aWZ5IGV4dGVuc2lvbiBtb2R1bGVzLiIiIgogICAgcmV0dXJuIFsnLnB5ZCddCgpkZWYgZ2V0X2Zyb3plbl9vYmplY3QoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgaW5pdF9idWlsdGluKG1vZHVsZSwqYXJncywqKmt3KToKICAgIHJldHVybiBfX2ltcG9ydF9fKG1vZHVsZSkKCmRlZiBpbml0X2Zyb3plbigqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBpc19idWlsdGluKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGlzX2Zyb3plbigqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBpc19mcm96ZW5fcGFja2FnZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBsb2FkX2R5bmFtaWMoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgbG9ja19oZWxkKCphcmdzLCoqa3cpOgogICAgIiIibG9ja19oZWxkKCkgLT4gYm9vbGVhbiAgICBSZXR1cm4gVHJ1ZSBpZiB0aGUgaW1wb3J0IGxvY2sgaXMgY3VycmVudGx5IGhlbGQsIGVsc2UgRmFsc2UuCiAgICBPbiBwbGF0Zm9ybXMgd2l0aG91dCB0aHJlYWRzLCByZXR1cm4gRmFsc2UuIiIiCiAgICBwYXNzCgpkZWYgcmVsZWFzZV9sb2NrKCphcmdzLCoqa3cpOgogICAgIiIicmVsZWFzZV9sb2NrKCkgLT4gTm9uZSAgICBSZWxlYXNlIHRoZSBpbnRlcnByZXRlcidzIGltcG9ydCBsb2NrLgogICAgT24gcGxhdGZvcm1zIHdpdGhvdXQgdGhyZWFkcywgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdGhpbmcuIiIiCiAgICBwYXNzCg==',
'/Lib/difflib.py':'',
'/Lib/string.py':'',
'/Lib/genericpath.py':'IiIiDQpQYXRoIG9wZXJhdGlvbnMgY29tbW9uIHRvIG1vcmUgdGhhbiBvbmUgT1MNCkRvIG5vdCB1c2UgZGlyZWN0bHkuICBUaGUgT1Mgc3BlY2lmaWMgbW9kdWxlcyBpbXBvcnQgdGhlIGFwcHJvcHJpYXRlDQpmdW5jdGlvbnMgZnJvbSB0aGlzIG1vZHVsZSB0aGVtc2VsdmVzLg0KIiIiDQppbXBvcnQgb3MNCmltcG9ydCBzdGF0DQoNCl9fYWxsX18gPSBbJ2NvbW1vbnByZWZpeCcsICdleGlzdHMnLCAnZ2V0YXRpbWUnLCAnZ2V0Y3RpbWUnLCAnZ2V0bXRpbWUnLA0KICAgICAgICAgICAnZ2V0c2l6ZScsICdpc2RpcicsICdpc2ZpbGUnXQ0KDQoNCiMgRG9lcyBhIHBhdGggZXhpc3Q/DQojIFRoaXMgaXMgZmFsc2UgZm9yIGRhbmdsaW5nIHN5bWJvbGljIGxpbmtzIG9uIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHRoZW0uDQpkZWYgZXhpc3RzKHBhdGgpOg0KICAgICIiIlRlc3Qgd2hldGhlciBhIHBhdGggZXhpc3RzLiAgUmV0dXJucyBGYWxzZSBmb3IgYnJva2VuIHN5bWJvbGljIGxpbmtzIiIiDQogICAgdHJ5Og0KICAgICAgICBvcy5zdGF0KHBhdGgpDQogICAgZXhjZXB0IG9zLmVycm9yOg0KICAgICAgICByZXR1cm4gRmFsc2UNCiAgICByZXR1cm4gVHJ1ZQ0KDQoNCiMgVGhpcyBmb2xsb3dzIHN5bWJvbGljIGxpbmtzLCBzbyBib3RoIGlzbGluaygpIGFuZCBpc2RpcigpIGNhbiBiZSB0cnVlDQojIGZvciB0aGUgc2FtZSBwYXRoIG9ubyBzeXN0ZW1zIHRoYXQgc3VwcG9ydCBzeW1saW5rcw0KZGVmIGlzZmlsZShwYXRoKToNCiAgICAiIiJUZXN0IHdoZXRoZXIgYSBwYXRoIGlzIGEgcmVndWxhciBmaWxlIiIiDQogICAgdHJ5Og0KICAgICAgICBzdCA9IG9zLnN0YXQocGF0aCkNCiAgICBleGNlcHQgb3MuZXJyb3I6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIHJldHVybiBzdGF0LlNfSVNSRUcoc3Quc3RfbW9kZSkNCg0KDQojIElzIGEgcGF0aCBhIGRpcmVjdG9yeT8NCiMgVGhpcyBmb2xsb3dzIHN5bWJvbGljIGxpbmtzLCBzbyBib3RoIGlzbGluaygpIGFuZCBpc2RpcigpDQojIGNhbiBiZSB0cnVlIGZvciB0aGUgc2FtZSBwYXRoIG9uIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHN5bWxpbmtzDQpkZWYgaXNkaXIocyk6DQogICAgIiIiUmV0dXJuIHRydWUgaWYgdGhlIHBhdGhuYW1lIHJlZmVycyB0byBhbiBleGlzdGluZyBkaXJlY3RvcnkuIiIiDQogICAgdHJ5Og0KICAgICAgICBzdCA9IG9zLnN0YXQocykNCiAgICBleGNlcHQgb3MuZXJyb3I6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIHJldHVybiBzdGF0LlNfSVNESVIoc3Quc3RfbW9kZSkNCg0KDQpkZWYgZ2V0c2l6ZShmaWxlbmFtZSk6DQogICAgIiIiUmV0dXJuIHRoZSBzaXplIG9mIGEgZmlsZSwgcmVwb3J0ZWQgYnkgb3Muc3RhdCgpLiIiIg0KICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9zaXplDQoNCg0KZGVmIGdldG10aW1lKGZpbGVuYW1lKToNCiAgICAiIiJSZXR1cm4gdGhlIGxhc3QgbW9kaWZpY2F0aW9uIHRpbWUgb2YgYSBmaWxlLCByZXBvcnRlZCBieSBvcy5zdGF0KCkuIiIiDQogICAgcmV0dXJuIG9zLnN0YXQoZmlsZW5hbWUpLnN0X210aW1lDQoNCg0KZGVmIGdldGF0aW1lKGZpbGVuYW1lKToNCiAgICAiIiJSZXR1cm4gdGhlIGxhc3QgYWNjZXNzIHRpbWUgb2YgYSBmaWxlLCByZXBvcnRlZCBieSBvcy5zdGF0KCkuIiIiDQogICAgcmV0dXJuIG9zLnN0YXQoZmlsZW5hbWUpLnN0X2F0aW1lDQoNCg0KZGVmIGdldGN0aW1lKGZpbGVuYW1lKToNCiAgICAiIiJSZXR1cm4gdGhlIG1ldGFkYXRhIGNoYW5nZSB0aW1lIG9mIGEgZmlsZSwgcmVwb3J0ZWQgYnkgb3Muc3RhdCgpLiIiIg0KICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9jdGltZQ0KDQoNCiMgUmV0dXJuIHRoZSBsb25nZXN0IHByZWZpeCBvZiBhbGwgbGlzdCBlbGVtZW50cy4NCmRlZiBjb21tb25wcmVmaXgobSk6DQogICAgIkdpdmVuIGEgbGlzdCBvZiBwYXRobmFtZXMsIHJldHVybnMgdGhlIGxvbmdlc3QgY29tbW9uIGxlYWRpbmcgY29tcG9uZW50Ig0KICAgIGlmIG5vdCBtOiByZXR1cm4gJycNCiAgICBzMSA9IG1pbihtKQ0KICAgIHMyID0gbWF4KG0pDQogICAgZm9yIGksIGMgaW4gZW51bWVyYXRlKHMxKToNCiAgICAgICAgaWYgYyAhPSBzMltpXToNCiAgICAgICAgICAgIHJldHVybiBzMVs6aV0NCiAgICByZXR1cm4gczENCg0KIyBTcGxpdCBhIHBhdGggaW4gcm9vdCBhbmQgZXh0ZW5zaW9uLg0KIyBUaGUgZXh0ZW5zaW9uIGlzIGV2ZXJ5dGhpbmcgc3RhcnRpbmcgYXQgdGhlIGxhc3QgZG90IGluIHRoZSBsYXN0DQojIHBhdGhuYW1lIGNvbXBvbmVudDsgdGhlIHJvb3QgaXMgZXZlcnl0aGluZyBiZWZvcmUgdGhhdC4NCiMgSXQgaXMgYWx3YXlzIHRydWUgdGhhdCByb290ICsgZXh0ID09IHAuDQoNCiMgR2VuZXJpYyBpbXBsZW1lbnRhdGlvbiBvZiBzcGxpdGV4dCwgdG8gYmUgcGFyYW1ldHJpemVkIHdpdGgNCiMgdGhlIHNlcGFyYXRvcnMNCmRlZiBfc3BsaXRleHQocCwgc2VwLCBhbHRzZXAsIGV4dHNlcCk6DQogICAgIiIiU3BsaXQgdGhlIGV4dGVuc2lvbiBmcm9tIGEgcGF0aG5hbWUuDQoNCiAgICBFeHRlbnNpb24gaXMgZXZlcnl0aGluZyBmcm9tIHRoZSBsYXN0IGRvdCB0byB0aGUgZW5kLCBpZ25vcmluZw0KICAgIGxlYWRpbmcgZG90cy4gIFJldHVybnMgIihyb290LCBleHQpIjsgZXh0IG1heSBiZSBlbXB0eS4iIiINCiAgICAjIE5PVEU6IFRoaXMgY29kZSBtdXN0IHdvcmsgZm9yIHRleHQgYW5kIGJ5dGVzIHN0cmluZ3MuDQoNCiAgICBzZXBJbmRleCA9IHAucmZpbmQoc2VwKQ0KICAgIGlmIGFsdHNlcDoNCiAgICAgICAgYWx0c2VwSW5kZXggPSBwLnJmaW5kKGFsdHNlcCkNCiAgICAgICAgc2VwSW5kZXggPSBtYXgoc2VwSW5kZXgsIGFsdHNlcEluZGV4KQ0KDQogICAgZG90SW5kZXggPSBwLnJmaW5kKGV4dHNlcCkNCiAgICBpZiBkb3RJbmRleCA+IHNlcEluZGV4Og0KICAgICAgICAjIHNraXAgYWxsIGxlYWRpbmcgZG90cw0KICAgICAgICBmaWxlbmFtZUluZGV4ID0gc2VwSW5kZXggKyAxDQogICAgICAgIHdoaWxlIGZpbGVuYW1lSW5kZXggPCBkb3RJbmRleDoNCiAgICAgICAgICAgIGlmIHBbZmlsZW5hbWVJbmRleDpmaWxlbmFtZUluZGV4KzFdICE9IGV4dHNlcDoNCiAgICAgICAgICAgICAgICByZXR1cm4gcFs6ZG90SW5kZXhdLCBwW2RvdEluZGV4Ol0NCiAgICAgICAgICAgIGZpbGVuYW1lSW5kZXggKz0gMQ0KDQogICAgcmV0dXJuIHAsIHBbOjBdDQo=',
'/Lib/webbrowser.py':'X19hbGxfXyA9IFsiRXJyb3IiLCAib3BlbiIsICJvcGVuX25ldyIsICJvcGVuX25ld190YWIiXQoKY2xhc3MgRXJyb3IoRXhjZXB0aW9uKToKICAgIHBhc3MKCl90YXJnZXQgPSB7IDA6ICcnLCAxOiAnX2JsYW5rJywgMjogJ19uZXcnIH0gICMgaGFjay4uLgoKCmRlZiBvcGVuKHVybCwgbmV3PTAsIGF1dG9yYWlzZT1UcnVlKToKICAgICIiIiAKICAgIG5ldyB3aW5kb3cgb3IgdGFiIGlzIG5vdCBjb250cm9sbGFibGUKICAgIG9uIHRoZSBjbGllbnQgc2lkZS4gYXV0b3JhaXNlIG5vdCBhdmFpbGFibGUuCiAgICAiIiIKICAgIGlmIHdpbi5vcGVuKHVybCwgX3RhcmdldFtuZXddKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKZGVmIG9wZW5fbmV3KHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDEpCgpkZWYgb3Blbl9uZXdfdGFiKHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDIpCgoK',
'/Lib/this.py':'cyA9ICIiIkd1ciBNcmEgYnMgQ2xndWJhLCBvbCBHdnogQ3JncmVmCgpPcm5oZ3ZzaHkgdmYgb3JnZ3JlIGd1bmEgaHR5bC4KUmtjeXZwdmcgdmYgb3JnZ3JlIGd1bmEgdnpjeXZwdmcuCkZ2emN5ciB2ZiBvcmdncmUgZ3VuYSBwYnpjeXJrLgpQYnpjeXJrIHZmIG9yZ2dyZSBndW5hIHBiemN5dnBuZ3JxLgpTeW5nIHZmIG9yZ2dyZSBndW5hIGFyZmdycS4KRmNuZWZyIHZmIG9yZ2dyZSBndW5hIHFyYWZyLgpFcm5xbm92eXZnbCBwYmhhZ2YuCkZjcnB2bnkgcG5mcmYgbmVyYSdnIGZjcnB2bnkgcmFiaHR1IGdiIG9lcm54IGd1ciBlaHlyZi4KTnlndWJodHUgY2VucGd2cG55dmdsIG9ybmdmIGNoZXZnbC4KUmVlYmVmIGZ1Ymh5cSBhcmlyZSBjbmZmIGZ2eXJhZ3lsLgpIYXlyZmYgcmtjeXZwdmd5bCBmdnlyYXBycS4KVmEgZ3VyIHNucHIgYnMgbnpvdnRodmdsLCBlcnNoZnIgZ3VyIGdyemNnbmd2YmEgZ2IgdGhyZmYuCkd1cmVyIGZ1Ymh5cSBvciBiYXItLSBuYXEgY2Vyc3Jlbm95bCBiYXlsIGJhciAtLWJvaXZiaGYgam5sIGdiIHFiIHZnLgpOeWd1Ymh0dSBndW5nIGpubCB6bmwgYWJnIG9yIGJvaXZiaGYgbmcgc3ZlZmcgaGF5cmZmIGxiaCdlciBRaGdwdS4KQWJqIHZmIG9yZ2dyZSBndW5hIGFyaXJlLgpOeWd1Ymh0dSBhcmlyZSB2ZiBic2dyYSBvcmdncmUgZ3VuYSAqZXZ0dWcqIGFiai4KVnMgZ3VyIHZ6Y3lyenJhZ25ndmJhIHZmIHVuZXEgZ2IgcmtjeW52YSwgdmcnZiBuIG9ucSB2cXJuLgpWcyBndXIgdnpjeXJ6cmFnbmd2YmEgdmYgcm5mbCBnYiBya2N5bnZhLCB2ZyB6bmwgb3IgbiB0YmJxIHZxcm4uCkFuenJmY25wcmYgbmVyIGJhciB1YmF4dmF0IHRlcm5nIHZxcm4gLS0geXJnJ2YgcWIgemJlciBicyBndWJmciEiIiIKCmQgPSB7fQpmb3IgYyBpbiAoNjUsIDk3KToKICAgIGZvciBpIGluIHJhbmdlKDI2KToKICAgICAgICBkW2NocihpK2MpXSA9IGNocigoaSsxMykgJSAyNiArIGMpCgpwcmludCgiIi5qb2luKFtkLmdldChjLCBjKSBmb3IgYyBpbiBzXSkpCg==',
'/Lib/datetime.py':'',
'/Lib/colorsys.py':'IiIiQ29udmVyc2lvbiBmdW5jdGlvbnMgYmV0d2VlbiBSR0IgYW5kIG90aGVyIGNvbG9yIHN5c3RlbXMuCgpUaGlzIG1vZHVsZXMgcHJvdmlkZXMgdHdvIGZ1bmN0aW9ucyBmb3IgZWFjaCBjb2xvciBzeXN0ZW0gQUJDOgoKICByZ2JfdG9fYWJjKHIsIGcsIGIpIC0tPiBhLCBiLCBjCiAgYWJjX3RvX3JnYihhLCBiLCBjKSAtLT4gciwgZywgYgoKQWxsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgdHJpcGxlcyBvZiBmbG9hdHMgaW4gdGhlIHJhbmdlIFswLjAuLi4xLjBdCih3aXRoIHRoZSBleGNlcHRpb24gb2YgSSBhbmQgUSwgd2hpY2ggY292ZXJzIGEgc2xpZ2h0bHkgbGFyZ2VyIHJhbmdlKS4KSW5wdXRzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIG1heSBjYXVzZSBleGNlcHRpb25zIG9yIGludmFsaWQgb3V0cHV0cy4KClN1cHBvcnRlZCBjb2xvciBzeXN0ZW1zOgpSR0I6IFJlZCwgR3JlZW4sIEJsdWUgY29tcG9uZW50cwpZSVE6IEx1bWluYW5jZSwgQ2hyb21pbmFuY2UgKHVzZWQgYnkgY29tcG9zaXRlIHZpZGVvIHNpZ25hbHMpCkhMUzogSHVlLCBMdW1pbmFuY2UsIFNhdHVyYXRpb24KSFNWOiBIdWUsIFNhdHVyYXRpb24sIFZhbHVlCiIiIgoKIyBSZWZlcmVuY2VzOgojIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUlRCiMgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9ITFNfY29sb3Jfc3BhY2UKIyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTVl9jb2xvcl9zcGFjZQoKX19hbGxfXyA9IFsicmdiX3RvX3lpcSIsInlpcV90b19yZ2IiLCJyZ2JfdG9faGxzIiwiaGxzX3RvX3JnYiIsCiAgICAgICAgICAgInJnYl90b19oc3YiLCJoc3ZfdG9fcmdiIl0KCiMgU29tZSBmbG9hdGluZyBwb2ludCBjb25zdGFudHMKCk9ORV9USElSRCA9IDEuMC8zLjAKT05FX1NJWFRIID0gMS4wLzYuMApUV09fVEhJUkQgPSAyLjAvMy4wCgojIFlJUTogdXNlZCBieSBjb21wb3NpdGUgdmlkZW8gc2lnbmFscyAobGluZWFyIGNvbWJpbmF0aW9ucyBvZiBSR0IpCiMgWTogcGVyY2VpdmVkIGdyZXkgbGV2ZWwgKDAuMCA9PSBibGFjaywgMS4wID09IHdoaXRlKQojIEksIFE6IGNvbG9yIGNvbXBvbmVudHMKCmRlZiByZ2JfdG9feWlxKHIsIGcsIGIpOgogICAgeSA9IDAuMzAqciArIDAuNTkqZyArIDAuMTEqYgogICAgaSA9IDAuNjAqciAtIDAuMjgqZyAtIDAuMzIqYgogICAgcSA9IDAuMjEqciAtIDAuNTIqZyArIDAuMzEqYgogICAgcmV0dXJuICh5LCBpLCBxKQoKZGVmIHlpcV90b19yZ2IoeSwgaSwgcSk6CiAgICByID0geSArIDAuOTQ4MjYyKmkgKyAwLjYyNDAxMypxCiAgICBnID0geSAtIDAuMjc2MDY2KmkgLSAwLjYzOTgxMCpxCiAgICBiID0geSAtIDEuMTA1NDUwKmkgKyAxLjcyOTg2MCpxCiAgICBpZiByIDwgMC4wOgogICAgICAgIHIgPSAwLjAKICAgIGlmIGcgPCAwLjA6CiAgICAgICAgZyA9IDAuMAogICAgaWYgYiA8IDAuMDoKICAgICAgICBiID0gMC4wCiAgICBpZiByID4gMS4wOgogICAgICAgIHIgPSAxLjAKICAgIGlmIGcgPiAxLjA6CiAgICAgICAgZyA9IDEuMAogICAgaWYgYiA+IDEuMDoKICAgICAgICBiID0gMS4wCiAgICByZXR1cm4gKHIsIGcsIGIpCgoKIyBITFM6IEh1ZSwgTHVtaW5hbmNlLCBTYXR1cmF0aW9uCiMgSDogcG9zaXRpb24gaW4gdGhlIHNwZWN0cnVtCiMgTDogY29sb3IgbGlnaHRuZXNzCiMgUzogY29sb3Igc2F0dXJhdGlvbgoKZGVmIHJnYl90b19obHMociwgZywgYik6CiAgICBtYXhjID0gbWF4KHIsIGcsIGIpCiAgICBtaW5jID0gbWluKHIsIGcsIGIpCiAgICAjIFhYWCBDYW4gb3B0aW1pemUgKG1heGMrbWluYykgYW5kIChtYXhjLW1pbmMpCiAgICBsID0gKG1pbmMrbWF4YykvMi4wCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgbCwgMC4wCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAobWF4YyttaW5jKQogICAgZWxzZToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAoMi4wLW1heGMtbWluYykKICAgIHJjID0gKG1heGMtcikgLyAobWF4Yy1taW5jKQogICAgZ2MgPSAobWF4Yy1nKSAvIChtYXhjLW1pbmMpCiAgICBiYyA9IChtYXhjLWIpIC8gKG1heGMtbWluYykKICAgIGlmIHIgPT0gbWF4YzoKICAgICAgICBoID0gYmMtZ2MKICAgIGVsaWYgZyA9PSBtYXhjOgogICAgICAgIGggPSAyLjArcmMtYmMKICAgIGVsc2U6CiAgICAgICAgaCA9IDQuMCtnYy1yYwogICAgaCA9IChoLzYuMCkgJSAxLjAKICAgIHJldHVybiBoLCBsLCBzCgpkZWYgaGxzX3RvX3JnYihoLCBsLCBzKToKICAgIGlmIHMgPT0gMC4wOgogICAgICAgIHJldHVybiBsLCBsLCBsCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBtMiA9IGwgKiAoMS4wK3MpCiAgICBlbHNlOgogICAgICAgIG0yID0gbCtzLShsKnMpCiAgICBtMSA9IDIuMCpsIC0gbTIKICAgIHJldHVybiAoX3YobTEsIG0yLCBoK09ORV9USElSRCksIF92KG0xLCBtMiwgaCksIF92KG0xLCBtMiwgaC1PTkVfVEhJUkQpKQoKZGVmIF92KG0xLCBtMiwgaHVlKToKICAgIGh1ZSA9IGh1ZSAlIDEuMAogICAgaWYgaHVlIDwgT05FX1NJWFRIOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqaHVlKjYuMAogICAgaWYgaHVlIDwgMC41OgogICAgICAgIHJldHVybiBtMgogICAgaWYgaHVlIDwgVFdPX1RISVJEOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqKFRXT19USElSRC1odWUpKjYuMAogICAgcmV0dXJuIG0xCgoKIyBIU1Y6IEh1ZSwgU2F0dXJhdGlvbiwgVmFsdWUKIyBIOiBwb3NpdGlvbiBpbiB0aGUgc3BlY3RydW0KIyBTOiBjb2xvciBzYXR1cmF0aW9uICgicHVyaXR5IikKIyBWOiBjb2xvciBicmlnaHRuZXNzCgpkZWYgcmdiX3RvX2hzdihyLCBnLCBiKToKICAgIG1heGMgPSBtYXgociwgZywgYikKICAgIG1pbmMgPSBtaW4ociwgZywgYikKICAgIHYgPSBtYXhjCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgMC4wLCB2CiAgICBzID0gKG1heGMtbWluYykgLyBtYXhjCiAgICByYyA9IChtYXhjLXIpIC8gKG1heGMtbWluYykKICAgIGdjID0gKG1heGMtZykgLyAobWF4Yy1taW5jKQogICAgYmMgPSAobWF4Yy1iKSAvIChtYXhjLW1pbmMpCiAgICBpZiByID09IG1heGM6CiAgICAgICAgaCA9IGJjLWdjCiAgICBlbGlmIGcgPT0gbWF4YzoKICAgICAgICBoID0gMi4wK3JjLWJjCiAgICBlbHNlOgogICAgICAgIGggPSA0LjArZ2MtcmMKICAgIGggPSAoaC82LjApICUgMS4wCiAgICByZXR1cm4gaCwgcywgdgoKZGVmIGhzdl90b19yZ2IoaCwgcywgdik6CiAgICBpZiBzID09IDAuMDoKICAgICAgICByZXR1cm4gdiwgdiwgdgogICAgaSA9IGludChoKjYuMCkgIyBYWFggYXNzdW1lIGludCgpIHRydW5jYXRlcyEKICAgIGYgPSAoaCo2LjApIC0gaQogICAgcCA9IHYqKDEuMCAtIHMpCiAgICBxID0gdiooMS4wIC0gcypmKQogICAgdCA9IHYqKDEuMCAtIHMqKDEuMC1mKSkKICAgIGkgPSBpJTYKICAgIGlmIGkgPT0gMDoKICAgICAgICByZXR1cm4gdiwgdCwgcAogICAgaWYgaSA9PSAxOgogICAgICAgIHJldHVybiBxLCB2LCBwCiAgICBpZiBpID09IDI6CiAgICAgICAgcmV0dXJuIHAsIHYsIHQKICAgIGlmIGkgPT0gMzoKICAgICAgICByZXR1cm4gcCwgcSwgdgogICAgaWYgaSA9PSA0OgogICAgICAgIHJldHVybiB0LCBwLCB2CiAgICBpZiBpID09IDU6CiAgICAgICAgcmV0dXJuIHYsIHAsIHEKICAgICMgQ2Fubm90IGdldCBoZXJlCg==',
'/Lib/traceback.py':'aW1wb3J0IHN5cwpkZWYgcHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycik6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICBmaWxlLndyaXRlKGV4Yy5pbmZvKQogICAgZmlsZS53cml0ZSgnXG4nK2V4Yy5fX25hbWVfXykKICAgIGlmIGV4Yy5tZXNzYWdlOgogICAgICAgIGZpbGUud3JpdGUoJzogJytleGMubWVzc2FnZSkKICAgIGZpbGUud3JpdGUoJ1xuJykKCmRlZiBmb3JtYXRfZXhjKGxpbWl0PU5vbmUsY2hhaW49VHJ1ZSk6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICByZXMgPSBleGMuaW5mbysnXG4nK2V4Yy5fX25hbWVfXwogICAgaWYgZXhjLm1lc3NhZ2U6CiAgICAgICAgcmVzICs9ICc6ICcrZXhjLm1lc3NhZ2UKICAgIHJldHVybiByZXMrJ1xuJwoKZGVmIGZvcm1hdF9leGNlcHRpb24oX3R5cGUsIHZhbHVlLCB0YiwgbGltaXQ9Tm9uZSwgY2hhaW49VHJ1ZSk6CiAgICByZXR1cm4gWyclc1xuJyAlX3R5cGUsJyVzXG4nICV2YWx1ZV0gICAgCg==',
'/Lib/_random.py':'aW1wb3J0IF9vcwpmcm9tIG9zIGltcG9ydCB1cmFuZG9tIGFzIF91cmFuZG9tCmNsYXNzIFJhbmRvbToKICAgICIiIlJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGJhc2UgY2xhc3MgdXNlZCBieSBib3VuZCBtb2R1bGUgZnVuY3Rpb25zLgoKICAgIFVzZWQgdG8gaW5zdGFudGlhdGUgaW5zdGFuY2VzIG9mIFJhbmRvbSB0byBnZXQgZ2VuZXJhdG9ycyB0aGF0IGRvbid0CiAgICBzaGFyZSBzdGF0ZS4KCiAgICBDbGFzcyBSYW5kb20gY2FuIGFsc28gYmUgc3ViY2xhc3NlZCBpZiB5b3Ugd2FudCB0byB1c2UgYSBkaWZmZXJlbnQgYmFzaWMKICAgIGdlbmVyYXRvciBvZiB5b3VyIG93biBkZXZpc2luZzogaW4gdGhhdCBjYXNlLCBvdmVycmlkZSB0aGUgZm9sbG93aW5nCiAgICBtZXRob2RzOiAgcmFuZG9tKCksIHNlZWQoKSwgZ2V0c3RhdGUoKSwgYW5kIHNldHN0YXRlKCkuCiAgICBPcHRpb25hbGx5LCBpbXBsZW1lbnQgYSBnZXRyYW5kYml0cygpIG1ldGhvZCBzbyB0aGF0IHJhbmRyYW5nZSgpCiAgICBjYW4gY292ZXIgYXJiaXRyYXJpbHkgbGFyZ2UgcmFuZ2VzLgoKICAgICIiIgogICAgI3JhbmRvbQogICAgI3NlZWQKICAgICNnZXRzdGF0ZQogICAgI3NldHN0YXRlCgoKICAgIFZFUlNJT04gPSAzICAgICAjIHVzZWQgYnkgZ2V0c3RhdGUvc2V0c3RhdGUKCiAgICBkZWYgX19pbml0X18oc2VsZiwgeD1Ob25lKToKICAgICAgICAiIiJJbml0aWFsaXplIGFuIGluc3RhbmNlLgoKICAgICAgICBPcHRpb25hbCBhcmd1bWVudCB4IGNvbnRyb2xzIHNlZWRpbmcsIGFzIGZvciBSYW5kb20uc2VlZCgpLgogICAgICAgICIiIgoKICAgICAgICBzZWxmLl9zdGF0ZT14CgogICAgZGVmIHNlZWQoc2VsZiwgYT1Ob25lLCB2ZXJzaW9uPTIpOgogICAgICAgICIiIkluaXRpYWxpemUgaW50ZXJuYWwgc3RhdGUgZnJvbSBoYXNoYWJsZSBvYmplY3QuCgogICAgICAgIE5vbmUgb3Igbm8gYXJndW1lbnQgc2VlZHMgZnJvbSBjdXJyZW50IHRpbWUgb3IgZnJvbSBhbiBvcGVyYXRpbmcKICAgICAgICBzeXN0ZW0gc3BlY2lmaWMgcmFuZG9tbmVzcyBzb3VyY2UgaWYgYXZhaWxhYmxlLgoKICAgICAgICBGb3IgdmVyc2lvbiAyICh0aGUgZGVmYXVsdCksIGFsbCBvZiB0aGUgYml0cyBhcmUgdXNlZCBpZiAqYSogaXMgYSBzdHIsCiAgICAgICAgYnl0ZXMsIG9yIGJ5dGVhcnJheS4gIEZvciB2ZXJzaW9uIDEsIHRoZSBoYXNoKCkgb2YgKmEqIGlzIHVzZWQgaW5zdGVhZC4KCiAgICAgICAgSWYgKmEqIGlzIGFuIGludCwgYWxsIGJpdHMgYXJlIHVzZWQuCgogICAgICAgICIiIgoKICAgICAgICBzZWxmLl9zdGF0ZT1hCiAgICAgICAgc2VsZi5nYXVzc19uZXh0ID0gTm9uZQoKICAgIGRlZiBnZXRzdGF0ZShzZWxmKToKICAgICAgICAiIiJSZXR1cm4gaW50ZXJuYWwgc3RhdGU7IGNhbiBiZSBwYXNzZWQgdG8gc2V0c3RhdGUoKSBsYXRlci4iIiIKICAgICAgICByZXR1cm4gc2VsZi5fc3RhdGUKCiAgICBkZWYgc2V0c3RhdGUoc2VsZiwgc3RhdGUpOgogICAgICAgICIiIlJlc3RvcmUgaW50ZXJuYWwgc3RhdGUgZnJvbSBvYmplY3QgcmV0dXJuZWQgYnkgZ2V0c3RhdGUoKS4iIiIKICAgICAgICBzZWxmLl9zdGF0ZT1zdGF0ZQoKICAgIGRlZiByYW5kb20oc2VsZik6CiAgICAgICAgIiIiR2V0IHRoZSBuZXh0IHJhbmRvbSBudW1iZXIgaW4gdGhlIHJhbmdlIFswLjAsIDEuMCkuIiIiCiAgICAgICAgcmV0dXJuIF9vcy5yYW5kb20oKQoKICAgIGRlZiBnZXRyYW5kYml0cyhzZWxmLCBrKToKICAgICAgICAiIiJnZXRyYW5kYml0cyhrKSAtPiB4LiAgR2VuZXJhdGVzIGEgbG9uZyBpbnQgd2l0aCBrIHJhbmRvbSBiaXRzLiIiIgogICAgICAgIGlmIGsgPD0gMDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbnVtYmVyIG9mIGJpdHMgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybycpCiAgICAgICAgaWYgayAhPSBpbnQoayk6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcignbnVtYmVyIG9mIGJpdHMgc2hvdWxkIGJlIGFuIGludGVnZXInKQogICAgICAgIG51bWJ5dGVzID0gKGsgKyA3KSAvLyA4ICAgICAgICAgICAgICAgICAgICAgICAjIGJpdHMgLyA4IGFuZCByb3VuZGVkIHVwCiAgICAgICAgeCA9IGludC5mcm9tX2J5dGVzKF91cmFuZG9tKG51bWJ5dGVzKSwgJ2JpZycpCiAgICAgICAgcmV0dXJuIHggPj4gKG51bWJ5dGVzICogOCAtIGspICAgICAgICAgICAgICAgICMgdHJpbSBleGNlc3MgYml0cwo=',
'/Lib/signal.py':'IiIiVGhpcyBtb2R1bGUgcHJvdmlkZXMgbWVjaGFuaXNtcyB0byB1c2Ugc2lnbmFsIGhhbmRsZXJzIGluIFB5dGhvbi4KCkZ1bmN0aW9uczoKCmFsYXJtKCkgLS0gY2F1c2UgU0lHQUxSTSBhZnRlciBhIHNwZWNpZmllZCB0aW1lIFtVbml4IG9ubHldCnNldGl0aW1lcigpIC0tIGNhdXNlIGEgc2lnbmFsIChkZXNjcmliZWQgYmVsb3cpIGFmdGVyIGEgc3BlY2lmaWVkCiAgICAgICAgICAgICAgIGZsb2F0IHRpbWUgYW5kIHRoZSB0aW1lciBtYXkgcmVzdGFydCB0aGVuIFtVbml4IG9ubHldCmdldGl0aW1lcigpIC0tIGdldCBjdXJyZW50IHZhbHVlIG9mIHRpbWVyIFtVbml4IG9ubHldCnNpZ25hbCgpIC0tIHNldCB0aGUgYWN0aW9uIGZvciBhIGdpdmVuIHNpZ25hbApnZXRzaWduYWwoKSAtLSBnZXQgdGhlIHNpZ25hbCBhY3Rpb24gZm9yIGEgZ2l2ZW4gc2lnbmFsCnBhdXNlKCkgLS0gd2FpdCB1bnRpbCBhIHNpZ25hbCBhcnJpdmVzIFtVbml4IG9ubHldCmRlZmF1bHRfaW50X2hhbmRsZXIoKSAtLSBkZWZhdWx0IFNJR0lOVCBoYW5kbGVyCgpzaWduYWwgY29uc3RhbnRzOgpTSUdfREZMIC0tIHVzZWQgdG8gcmVmZXIgdG8gdGhlIHN5c3RlbSBkZWZhdWx0IGhhbmRsZXIKU0lHX0lHTiAtLSB1c2VkIHRvIGlnbm9yZSB0aGUgc2lnbmFsCk5TSUcgLS0gbnVtYmVyIG9mIGRlZmluZWQgc2lnbmFscwpTSUdJTlQsIFNJR1RFUk0sIGV0Yy4gLS0gc2lnbmFsIG51bWJlcnMKCml0aW1lciBjb25zdGFudHM6CklUSU1FUl9SRUFMIC0tIGRlY3JlbWVudHMgaW4gcmVhbCB0aW1lLCBhbmQgZGVsaXZlcnMgU0lHQUxSTSB1cG9uCiAgICAgICAgICAgICAgIGV4cGlyYXRpb24KSVRJTUVSX1ZJUlRVQUwgLS0gZGVjcmVtZW50cyBvbmx5IHdoZW4gdGhlIHByb2Nlc3MgaXMgZXhlY3V0aW5nLAogICAgICAgICAgICAgICBhbmQgZGVsaXZlcnMgU0lHVlRBTFJNIHVwb24gZXhwaXJhdGlvbgpJVElNRVJfUFJPRiAtLSBkZWNyZW1lbnRzIGJvdGggd2hlbiB0aGUgcHJvY2VzcyBpcyBleGVjdXRpbmcgYW5kCiAgICAgICAgICAgICAgIHdoZW4gdGhlIHN5c3RlbSBpcyBleGVjdXRpbmcgb24gYmVoYWxmIG9mIHRoZSBwcm9jZXNzLgogICAgICAgICAgICAgICBDb3VwbGVkIHdpdGggSVRJTUVSX1ZJUlRVQUwsIHRoaXMgdGltZXIgaXMgdXN1YWxseQogICAgICAgICAgICAgICB1c2VkIHRvIHByb2ZpbGUgdGhlIHRpbWUgc3BlbnQgYnkgdGhlIGFwcGxpY2F0aW9uCiAgICAgICAgICAgICAgIGluIHVzZXIgYW5kIGtlcm5lbCBzcGFjZS4gU0lHUFJPRiBpcyBkZWxpdmVyZWQgdXBvbgogICAgICAgICAgICAgICBleHBpcmF0aW9uLgoKCioqKiBJTVBPUlRBTlQgTk9USUNFICoqKgpBIHNpZ25hbCBoYW5kbGVyIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHR3byBhcmd1bWVudHM6CnRoZSBmaXJzdCBpcyB0aGUgc2lnbmFsIG51bWJlciwgdGhlIHNlY29uZCBpcyB0aGUgaW50ZXJydXB0ZWQgc3RhY2sgZnJhbWUuIiIiCgpDVFJMX0JSRUFLX0VWRU5UPTEKQ1RSTF9DX0VWRU5UPTAKTlNJRz0yMwpTSUdBQlJUPTIyClNJR0JSRUFLPTIxClNJR0ZQRT04ClNJR0lMTD00ClNJR0lOVD0yClNJR1NFR1Y9MTEKU0lHVEVSTT0xNQpTSUdfREZMPTAKU0lHX0lHTj0xCgpkZWYgc2lnbmFsKHNpZ25hbG51bSwgaGFuZGxlcikgOgogICAgcGFzcwo=',
'/Lib/bisect.py':'IiIiQmlzZWN0aW9uIGFsZ29yaXRobXMuIiIiCgpkZWYgaW5zb3J0X3JpZ2h0KGEsIHgsIGxvPTAsIGhpPU5vbmUpOgogICAgIiIiSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBJZiB4IGlzIGFscmVhZHkgaW4gYSwgaW5zZXJ0IGl0IHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgeCA8IGFbbWlkXTogaGkgPSBtaWQKICAgICAgICBlbHNlOiBsbyA9IG1pZCsxCiAgICBhLmluc2VydChsbywgeCkKCmluc29ydCA9IGluc29ydF9yaWdodCAgICMgYmFja3dhcmQgY29tcGF0aWJpbGl0eQoKZGVmIGJpc2VjdF9yaWdodChhLCB4LCBsbz0wLCBoaT1Ob25lKToKICAgICIiIlJldHVybiB0aGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIFRoZSByZXR1cm4gdmFsdWUgaSBpcyBzdWNoIHRoYXQgYWxsIGUgaW4gYVs6aV0gaGF2ZSBlIDw9IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID4geC4gIFNvIGlmIHggYWxyZWFkeSBhcHBlYXJzIGluIHRoZSBsaXN0LCBhLmluc2VydCh4KSB3aWxsCiAgICBpbnNlcnQganVzdCBhZnRlciB0aGUgcmlnaHRtb3N0IHggYWxyZWFkeSB0aGVyZS4KCiAgICBPcHRpb25hbCBhcmdzIGxvIChkZWZhdWx0IDApIGFuZCBoaSAoZGVmYXVsdCBsZW4oYSkpIGJvdW5kIHRoZQogICAgc2xpY2Ugb2YgYSB0byBiZSBzZWFyY2hlZC4KICAgICIiIgoKICAgIGlmIGxvIDwgMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpCiAgICBpZiBoaSBpcyBOb25lOgogICAgICAgIGhpID0gbGVuKGEpCiAgICB3aGlsZSBsbyA8IGhpOgogICAgICAgIG1pZCA9IChsbytoaSkvLzIKICAgICAgICBpZiB4IDwgYVttaWRdOiBoaSA9IG1pZAogICAgICAgIGVsc2U6IGxvID0gbWlkKzEKICAgIHJldHVybiBsbwoKYmlzZWN0ID0gYmlzZWN0X3JpZ2h0ICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CgpkZWYgaW5zb3J0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJJbnNlcnQgaXRlbSB4IGluIGxpc3QgYSwgYW5kIGtlZXAgaXQgc29ydGVkIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIGxlZnQgb2YgdGhlIGxlZnRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICBhLmluc2VydChsbywgeCkKCgpkZWYgYmlzZWN0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJSZXR1cm4gdGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBUaGUgcmV0dXJuIHZhbHVlIGkgaXMgc3VjaCB0aGF0IGFsbCBlIGluIGFbOmldIGhhdmUgZSA8IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID49IHguICBTbyBpZiB4IGFscmVhZHkgYXBwZWFycyBpbiB0aGUgbGlzdCwgYS5pbnNlcnQoeCkgd2lsbAogICAgaW5zZXJ0IGp1c3QgYmVmb3JlIHRoZSBsZWZ0bW9zdCB4IGFscmVhZHkgdGhlcmUuCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICByZXR1cm4gbG8KCiMgZG9udCcgbmVlZCB0aGlzIGZvciBicnl0aG9uCiMgT3ZlcndyaXRlIGFib3ZlIGRlZmluaXRpb25zIHdpdGggYSBmYXN0IEMgaW1wbGVtZW50YXRpb24KI3RyeToKIyAgICBmcm9tIF9iaXNlY3QgaW1wb3J0ICoKI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgICBwYXNzCg==',
'/Lib/VFS_import.py':'aW1wb3J0IG9zCmZyb20gYnJvd3NlciBpbXBvcnQgZG9jCgojX3NjcmlwdHM9ZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpCiNfc2NyaXB0cy5zcmM9Ii9zcmMvcHlfVkZTLmpzIgojX3NjcmlwdHMudHlwZT0idGV4dC9qYXZhc2NyaXB0IgojZG9jLmdldCh0YWc9J2hlYWQnKVswXS5hcHBlbmRDaGlsZChfc2NyaXB0cykKClZGUz1kaWN0KEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5X1ZGUykpCmNsYXNzIFZGU01vZHVsZUZpbmRlcjoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXRoX2VudHJ5KToKICAgICAgICBwcmludCgiaW4gVkZTTW9kdWxlRmluZGVyIikKICAgICAgICBpZiBwYXRoX2VudHJ5LnN0YXJ0c3dpdGgoJy9saWJzJykgb3IgcGF0aF9lbnRyeS5zdGFydHN3aXRoKCcvTGliJyk6CiAgICAgICAgICAgc2VsZi5wYXRoX2VudHJ5PXBhdGhfZW50cnkKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigpCiAgICAgICAgCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzwlcyBmb3IgIiVzIj4nICUgKHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBzZWxmLnBhdGhfZW50cnkpCiAgICAgICAgCiAgICBkZWYgZmluZF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUsIHBhdGg9Tm9uZSk6CiAgICAgICAgcGF0aCA9IHBhdGggb3Igc2VsZi5wYXRoX2VudHJ5CiAgICAgICAgI3ByaW50KCdsb29raW5nIGZvciAiJXMiIGluICVzIC4uLicgJSAoZnVsbG5hbWUsIHBhdGgpKQogICAgICAgIGZvciBfZXh0IGluIFsnanMnLCAncHlqJywgJ3B5J106CiAgICAgICAgICAgIF9maWxlcGF0aD1vcy5wYXRoLmpvaW4oc2VsZi5wYXRoX2VudHJ5LCAnJXMuJXMnICUgKGZ1bGxuYW1lLCBfZXh0KSkKICAgICAgICAgICAgaWYgX2ZpbGVwYXRoIGluIFZGUzoKICAgICAgICAgICAgICAgcHJpbnQoIm1vZHVsZSBmb3VuZCBhdCAlczolcyIgJSAoX2ZpbGVwYXRoLCBmdWxsbmFtZSkpCiAgICAgICAgICAgICAgIHJldHVybiBWRlNNb2R1bGVMb2FkZXIoX2ZpbGVwYXRoLCBmdWxsbmFtZSkKCiAgICAgICAgcHJpbnQoJ21vZHVsZSAlcyBub3QgZm91bmQnICUgZnVsbG5hbWUpCiAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IoKQogICAgICAgIHJldHVybiBOb25lCgpjbGFzcyBWRlNNb2R1bGVMb2FkZXI6CiAgICAiIiJMb2FkIHNvdXJjZSBmb3IgbW9kdWxlcyIiIgogICAgCiAgICBkZWYgX19pbml0X18oc2VsZiwgZmlsZXBhdGgsIG5hbWUpOgogICAgICAgIHNlbGYuX2ZpbGVwYXRoPWZpbGVwYXRoCiAgICAgICAgc2VsZi5fbmFtZT1uYW1lCiAgICAgICAgCiAgICBkZWYgZ2V0X3NvdXJjZShzZWxmKToKICAgICAgICBpZiBzZWxmLl9maWxlcGF0aCBpbiBWRlM6CiAgICAgICAgICAgcmV0dXJuIEpTT2JqZWN0KHJlYWRGcm9tVkZTKHNlbGYuX2ZpbGVwYXRoKSkKCiAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHNvdXJjZSBmb3IgJXMnICUgZnVsbG5hbWUpCgogICAgZGVmIGlzX3BhY2thZ2Uoc2VsZik6CiAgICAgICAgcmV0dXJuICcuJyBpbiBzZWxmLl9uYW1lCiAgICAgICAgICAgIAogICAgZGVmIGxvYWRfbW9kdWxlKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX25hbWUgaW4gc3lzLm1vZHVsZXM6CiAgICAgICAgICAgI3ByaW50KCdyZXVzaW5nIGV4aXN0aW5nIG1vZHVsZSBmcm9tIHByZXZpb3VzIGltcG9ydCBvZiAiJXMiJyAlIGZ1bGxuYW1lKQogICAgICAgICAgIG1vZCA9IHN5cy5tb2R1bGVzW3NlbGYuX25hbWVdCiAgICAgICAgICAgcmV0dXJuIG1vZAogICAgICAgIAogICAgICAgIF9zcmM9c2VsZi5nZXRfc291cmNlKCkKICAgICAgICBpZiBzZWxmLl9maWxlcGF0aC5lbmRzd2l0aCgnLmpzJyk6CiAgICAgICAgICAgbW9kPUpTT2JqZWN0KGltcG9ydF9qc19tb2R1bGUoX3NyYywgc2VsZi5fZmlsZXBhdGgsIHNlbGYuX25hbWUpKQogICAgICAgIGVsaWYgc2VsZi5fZmlsZXBhdGguZW5kc3dpdGgoJy5weScpOgogICAgICAgICAgIG1vZD1KU09iamVjdChpbXBvcnRfcHlfbW9kdWxlKF9zcmMsIHNlbGYuX2ZpbGVwYXRoLCBzZWxmLl9uYW1lKSkKICAgICAgICBlbGlmIHNlbGYuX2ZpbGVwYXRoLmVuZHN3aXRoKCcucHlqJyk6CiAgICAgICAgICAgbW9kPUpTT2JqZWN0KGltcG9ydF9weWpfbW9kdWxlKF9zcmMsIHNlbGYuX2ZpbGVwYXRoLCBzZWxmLl9uYW1lKSkKICAgICAgICBlbHNlOgogICAgICAgICAgIHJhaXNlIEltcG9ydEVycm9yKCdJbnZhbGlkIE1vZHVsZTogJXMnICUgc2VsZi5fZmlsZXBhdGgpCgogICAgICAgICMgU2V0IGEgZmV3IHByb3BlcnRpZXMgcmVxdWlyZWQgYnkgUEVQIDMwMgogICAgICAgIG1vZC5fX2ZpbGVfXyA9IHNlbGYuX2ZpbGVwYXRoCiAgICAgICAgbW9kLl9fbmFtZV9fID0gc2VsZi5fbmFtZQogICAgICAgIG1vZC5fX3BhdGhfXyA9IG9zLnBhdGguYWJzcGF0aChzZWxmLl9maWxlcGF0aCkKICAgICAgICBtb2QuX19sb2FkZXJfXyA9IHNlbGYKICAgICAgICBtb2QuX19wYWNrYWdlX18gPSAnLicuam9pbihzZWxmLl9uYW1lLnNwbGl0KCcuJylbOi0xXSkKICAgICAgICAKICAgICAgICBpZiBzZWxmLmlzX3BhY2thZ2UoKToKICAgICAgICAgICBwcmludCgnYWRkaW5nIHBhdGggZm9yIHBhY2thZ2UnKQogICAgICAgICAgICMgU2V0IF9fcGF0aF9fIGZvciBwYWNrYWdlcwogICAgICAgICAgICMgc28gd2UgY2FuIGZpbmQgdGhlIHN1Yi1tb2R1bGVzLgogICAgICAgICAgIG1vZC5fX3BhdGhfXyA9IFsgc2VsZi5wYXRoX2VudHJ5IF0KICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgnaW1wb3J0ZWQgYXMgcmVndWxhciBtb2R1bGUnKQogICAgICAgIAogICAgICAgIHByaW50KCdjcmVhdGluZyBhIG5ldyBtb2R1bGUgb2JqZWN0IGZvciAiJXMiJyAlIHNlbGYuX25hbWUpCiAgICAgICAgc3lzLm1vZHVsZXMuc2V0ZGVmYXVsdChzZWxmLl9uYW1lLCBtb2QpCiAgICAgICAgSlNPYmplY3QoX19CUllUSE9OX18uaW1wb3J0ZWQpW3NlbGYuX25hbWVdPW1vZAoKICAgICAgICByZXR1cm4gbW9kCgpKU09iamVjdChfX0JSWVRIT05fXy5wYXRoX2hvb2tzLmluc2VydCgwLCBWRlNNb2R1bGVGaW5kZXIpKQo=',
'/Lib/external_import.py':'aW1wb3J0IG9zCmZyb20gYnJvd3NlciBpbXBvcnQgZG9jCmltcG9ydCB1cmxsaWIucmVxdWVzdAoKIyMgdGhpcyBtb2R1bGUgaXMgYWJsZSB0byBkb3dubG9hZCBtb2R1bGVzIHRoYXQgYXJlIGV4dGVybmFsIHRvCiMjIGxvY2FsaG9zdC9zcmMKIyMgc28gd2UgY291bGQgZG93bmxvYWQgZnJvbSBhbnkgVVJMCgpjbGFzcyBNb2R1bGVGaW5kZXI6CiAgICBkZWYgX19pbml0X18oc2VsZiwgcGF0aF9lbnRyeSk6CiAgICAgICAgcHJpbnQoImV4dGVybmFsX2ltcG9ydCBoZXJlLi4iKQogICAgICAgICNwcmludChwYXRoX2VudHJ5KQogICAgICAgIHNlbGYuX21vZHVsZT1Ob25lCiAgICAgICAgaWYgcGF0aF9lbnRyeS5zdGFydHN3aXRoKCdodHRwOi8vJyk6CiAgICAgICAgICAgc2VsZi5wYXRoX2VudHJ5PXBhdGhfZW50cnkKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigpCiAgICAgICAgCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzwlcyBmb3IgIiVzIj4nICUgKHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBzZWxmLnBhdGhfZW50cnkpCiAgICAgICAgCiAgICBkZWYgZmluZF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUsIHBhdGg9Tm9uZSk6CiAgICAgICAgcGF0aCA9IHBhdGggb3Igc2VsZi5wYXRoX2VudHJ5CiAgICAgICAgI3ByaW50KCdsb29raW5nIGZvciAiJXMiIGluICVzIC4uLicgJSAoZnVsbG5hbWUsIHBhdGgpKQogICAgICAgIGZvciBfZXh0IGluIFsnanMnLCAncHlqJywgJ3B5J106CiAgICAgICAgICAgIF9mcCxfdXJsLF9oZWFkZXJzPXVybGxpYi5yZXF1ZXN0LnVybG9wZW4ocGF0aCArICcvJyArICclcy4lcycgJSAoZnVsbG5hbWUsIF9leHQpKQogICAgICAgICAgICBzZWxmLl9tb2R1bGU9X2ZwLnJlYWQoKQogICAgICAgICAgICBfZnAuY2xvc2UoKQogICAgICAgICAgICBpZiBzZWxmLl9tb2R1bGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgIHByaW50KCJtb2R1bGUgZm91bmQgYXQgJXM6JXMiICUgKHBhdGgsIGZ1bGxuYW1lKSkKICAgICAgICAgICAgICAgcmV0dXJuIE1vZHVsZUxvYWRlcihwYXRoLCBmdWxsbmFtZSwgc2VsZi5fbW9kdWxlKQoKICAgICAgICBwcmludCgnbW9kdWxlICVzIG5vdCBmb3VuZCcgJSBmdWxsbmFtZSkKICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigpCiAgICAgICAgcmV0dXJuIE5vbmUKCmNsYXNzIE1vZHVsZUxvYWRlcjoKICAgICIiIkxvYWQgc291cmNlIGZvciBtb2R1bGVzIiIiCiAgICAKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBmaWxlcGF0aCwgbmFtZSwgbW9kdWxlX3NvdXJjZSk6CiAgICAgICAgc2VsZi5fZmlsZXBhdGg9ZmlsZXBhdGgKICAgICAgICBzZWxmLl9uYW1lPW5hbWUKICAgICAgICBzZWxmLl9tb2R1bGVfc291cmNlPW1vZHVsZV9zb3VyY2UKICAgICAgICAKICAgIGRlZiBnZXRfc291cmNlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9tb2R1bGVfc291cmNlCgogICAgZGVmIGlzX3BhY2thZ2Uoc2VsZik6CiAgICAgICAgcmV0dXJuICcuJyBpbiBzZWxmLl9uYW1lCiAgICAgICAgICAgIAogICAgZGVmIGxvYWRfbW9kdWxlKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX25hbWUgaW4gc3lzLm1vZHVsZXM6CiAgICAgICAgICAgI3ByaW50KCdyZXVzaW5nIGV4aXN0aW5nIG1vZHVsZSBmcm9tIHByZXZpb3VzIGltcG9ydCBvZiAiJXMiJyAlIGZ1bGxuYW1lKQogICAgICAgICAgIG1vZCA9IHN5cy5tb2R1bGVzW3NlbGYuX25hbWVdCiAgICAgICAgICAgcmV0dXJuIG1vZAogICAgICAgIAogICAgICAgIF9zcmM9c2VsZi5nZXRfc291cmNlKCkKICAgICAgICBpZiBzZWxmLl9maWxlcGF0aC5lbmRzd2l0aCgnLmpzJyk6CiAgICAgICAgICAgbW9kPUpTT2JqZWN0KGltcG9ydF9qc19tb2R1bGUoX3NyYywgc2VsZi5fZmlsZXBhdGgsIHNlbGYuX25hbWUpKQogICAgICAgIGVsaWYgc2VsZi5fZmlsZXBhdGguZW5kc3dpdGgoJy5weScpOgogICAgICAgICAgIG1vZD1KU09iamVjdChpbXBvcnRfcHlfbW9kdWxlKF9zcmMsIHNlbGYuX2ZpbGVwYXRoLCBzZWxmLl9uYW1lKSkKICAgICAgICBlbGlmIHNlbGYuX2ZpbGVwYXRoLmVuZHN3aXRoKCcucHlqJyk6CiAgICAgICAgICAgbW9kPUpTT2JqZWN0KGltcG9ydF9weWpfbW9kdWxlKF9zcmMsIHNlbGYuX2ZpbGVwYXRoLCBzZWxmLl9uYW1lKSkKICAgICAgICBlbHNlOgogICAgICAgICAgIHJhaXNlIEltcG9ydEVycm9yKCdJbnZhbGlkIE1vZHVsZTogJXMnICUgc2VsZi5fZmlsZXBhdGgpCgogICAgICAgICMgU2V0IGEgZmV3IHByb3BlcnRpZXMgcmVxdWlyZWQgYnkgUEVQIDMwMgogICAgICAgIG1vZC5fX2ZpbGVfXyA9IHNlbGYuX2ZpbGVwYXRoCiAgICAgICAgbW9kLl9fbmFtZV9fID0gc2VsZi5fbmFtZQogICAgICAgIG1vZC5fX3BhdGhfXyA9IG9zLnBhdGguYWJzcGF0aChzZWxmLl9maWxlcGF0aCkKICAgICAgICBtb2QuX19sb2FkZXJfXyA9IHNlbGYKICAgICAgICBtb2QuX19wYWNrYWdlX18gPSAnLicuam9pbihzZWxmLl9uYW1lLnNwbGl0KCcuJylbOi0xXSkKICAgICAgICAKICAgICAgICBpZiBzZWxmLmlzX3BhY2thZ2UoKToKICAgICAgICAgICBwcmludCgnYWRkaW5nIHBhdGggZm9yIHBhY2thZ2UnKQogICAgICAgICAgICMgU2V0IF9fcGF0aF9fIGZvciBwYWNrYWdlcwogICAgICAgICAgICMgc28gd2UgY2FuIGZpbmQgdGhlIHN1Yi1tb2R1bGVzLgogICAgICAgICAgIG1vZC5fX3BhdGhfXyA9IFsgc2VsZi5fZmlsZXBhdGggXQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCdpbXBvcnRlZCBhcyByZWd1bGFyIG1vZHVsZScpCiAgICAgICAgCiAgICAgICAgcHJpbnQoJ2NyZWF0aW5nIGEgbmV3IG1vZHVsZSBvYmplY3QgZm9yICIlcyInICUgc2VsZi5fbmFtZSkKICAgICAgICBzeXMubW9kdWxlcy5zZXRkZWZhdWx0KHNlbGYuX25hbWUsIG1vZCkKICAgICAgICBKU09iamVjdChfX0JSWVRIT05fXy5pbXBvcnRlZClbc2VsZi5fbmFtZV09bW9kCgogICAgICAgIHJldHVybiBtb2QK',
'/Lib/contextlib.py':'',
'/Lib/abc.py':'',
'/Lib/functools.py':'',
'/Lib/weakref.py':'',
'/Lib/codecs.py':'',
'/Lib/linecache.py':'IiIiQ2FjaGUgbGluZXMgZnJvbSBmaWxlcy4KClRoaXMgaXMgaW50ZW5kZWQgdG8gcmVhZCBsaW5lcyBmcm9tIG1vZHVsZXMgaW1wb3J0ZWQgLS0gaGVuY2UgaWYgYSBmaWxlbmFtZQppcyBub3QgZm91bmQsIGl0IHdpbGwgbG9vayBkb3duIHRoZSBtb2R1bGUgc2VhcmNoIHBhdGggZm9yIGEgZmlsZSBieQp0aGF0IG5hbWUuCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKI2ZpeG1lIGJyeXRob24KI2ltcG9ydCB0b2tlbml6ZQoKX19hbGxfXyA9IFsiZ2V0bGluZSIsICJjbGVhcmNhY2hlIiwgImNoZWNrY2FjaGUiXQoKZGVmIGdldGxpbmUoZmlsZW5hbWUsIGxpbmVubywgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICBsaW5lcyA9IGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscykKICAgIGlmIDEgPD0gbGluZW5vIDw9IGxlbihsaW5lcyk6CiAgICAgICAgcmV0dXJuIGxpbmVzW2xpbmVuby0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgojIFRoZSBjYWNoZQoKY2FjaGUgPSB7fSAjIFRoZSBjYWNoZQoKCmRlZiBjbGVhcmNhY2hlKCk6CiAgICAiIiJDbGVhciB0aGUgY2FjaGUgZW50aXJlbHkuIiIiCgogICAgZ2xvYmFsIGNhY2hlCiAgICBjYWNoZSA9IHt9CgoKZGVmIGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgICIiIkdldCB0aGUgbGluZXMgZm9yIGEgZmlsZSBmcm9tIHRoZSBjYWNoZS4KICAgIFVwZGF0ZSB0aGUgY2FjaGUgaWYgaXQgZG9lc24ndCBjb250YWluIGFuIGVudHJ5IGZvciB0aGlzIGZpbGUgYWxyZWFkeS4iIiIKCiAgICBpZiBmaWxlbmFtZSBpbiBjYWNoZToKICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCiAgICBlbHNlOgogICAgICAgIHJldHVybiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHMpCgoKZGVmIGNoZWNrY2FjaGUoZmlsZW5hbWU9Tm9uZSk6CiAgICAiIiJEaXNjYXJkIGNhY2hlIGVudHJpZXMgdGhhdCBhcmUgb3V0IG9mIGRhdGUuCiAgICAoVGhpcyBpcyBub3QgY2hlY2tlZCB1cG9uIGVhY2ggY2FsbCEpIiIiCgogICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICBmaWxlbmFtZXMgPSBsaXN0KGNhY2hlLmtleXMoKSkKICAgIGVsc2U6CiAgICAgICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgICAgIGZpbGVuYW1lcyA9IFtmaWxlbmFtZV0KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KCiAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgIHNpemUsIG10aW1lLCBsaW5lcywgZnVsbG5hbWUgPSBjYWNoZVtmaWxlbmFtZV0KICAgICAgICBpZiBtdGltZSBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZSAgICMgbm8tb3AgZm9yIGZpbGVzIGxvYWRlZCB2aWEgYSBfX2xvYWRlcl9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWwgY2FjaGVbZmlsZW5hbWVdCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2l6ZSAhPSBzdGF0LnN0X3NpemUgb3IgbXRpbWUgIT0gc3RhdC5zdF9tdGltZToKICAgICAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQoKCmRlZiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICAiIiJVcGRhdGUgYSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuIGl0cyBsaXN0IG9mIGxpbmVzLgogICAgSWYgc29tZXRoaW5nJ3Mgd3JvbmcsIHByaW50IGEgbWVzc2FnZSwgZGlzY2FyZCB0aGUgY2FjaGUgZW50cnksCiAgICBhbmQgcmV0dXJuIGFuIGVtcHR5IGxpc3QuIiIiCgogICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQogICAgaWYgbm90IGZpbGVuYW1lIG9yIChmaWxlbmFtZS5zdGFydHN3aXRoKCc8JykgYW5kIGZpbGVuYW1lLmVuZHN3aXRoKCc+JykpOgogICAgICAgIHJldHVybiBbXQoKICAgIGZ1bGxuYW1lID0gZmlsZW5hbWUKICAgIHRyeToKICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgIGJhc2VuYW1lID0gZmlsZW5hbWUKCiAgICAgICAgIyBUcnkgZm9yIGEgX19sb2FkZXJfXywgaWYgYXZhaWxhYmxlCiAgICAgICAgaWYgbW9kdWxlX2dsb2JhbHMgYW5kICdfX2xvYWRlcl9fJyBpbiBtb2R1bGVfZ2xvYmFsczoKICAgICAgICAgICAgbmFtZSA9IG1vZHVsZV9nbG9iYWxzLmdldCgnX19uYW1lX18nKQogICAgICAgICAgICBsb2FkZXIgPSBtb2R1bGVfZ2xvYmFsc1snX19sb2FkZXJfXyddCiAgICAgICAgICAgIGdldF9zb3VyY2UgPSBnZXRhdHRyKGxvYWRlciwgJ2dldF9zb3VyY2UnLCBOb25lKQoKICAgICAgICAgICAgaWYgbmFtZSBhbmQgZ2V0X3NvdXJjZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZ2V0X3NvdXJjZShuYW1lKQogICAgICAgICAgICAgICAgZXhjZXB0IChJbXBvcnRFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gbHVjaywgdGhlIFBFUDMwMiBsb2FkZXIgY2Fubm90IGZpbmQgdGhlIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAjIGZvciB0aGlzIG1vZHVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbZmlsZW5hbWVdID0gKAogICAgICAgICAgICAgICAgICAgICAgICBsZW4oZGF0YSksIE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIFtsaW5lKydcbicgZm9yIGxpbmUgaW4gZGF0YS5zcGxpdGxpbmVzKCldLCBmdWxsbmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCgogICAgICAgICMgVHJ5IGxvb2tpbmcgdGhyb3VnaCB0aGUgbW9kdWxlIHNlYXJjaCBwYXRoLCB3aGljaCBpcyBvbmx5IHVzZWZ1bAogICAgICAgICMgd2hlbiBoYW5kbGluZyBhIHJlbGF0aXZlIGZpbGVuYW1lLgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgIyBUYWtlIGNhcmUgdG8gaGFuZGxlIHBhY2thZ2VzLgogICAgICAgIGlmIGJhc2VuYW1lID09ICdfX2luaXRfXy5weSc6CiAgICAgICAgICAgICMgZmlsZW5hbWUgcmVmZXJlcyB0byBhIHBhY2thZ2UKICAgICAgICAgICAgYmFzZW5hbWUgPSBmaWxlbmFtZQoKICAgICAgICBmb3IgZGlybmFtZSBpbiBzeXMucGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgYmFzZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBBdHRyaWJ1dGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIE5vdCBzdWZmaWNpZW50bHkgc3RyaW5nLWxpa2UgdG8gZG8gYW55dGhpbmcgdXNlZnVsIHdpdGguCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICNmaXhtZSBicnl0aG9uLCBpbnZhbGlkIHN5bnRheCAKICAgICAgICAgICAgI2V4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICNmaXhtZSBicnl0aG9uIHVuZXhwZWN0ZWQgdG9rZW4gZWxzZQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgcmV0dXJuIFtdCiAgICB0cnk6CiAgICAgICAgZnA9b3BlbihmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICN3aXRoIHRva2VuaXplLm9wZW4oZnVsbG5hbWUpIGFzIGZwOgogICAgICAgIGxpbmVzID0gZnAucmVhZGxpbmVzKCkKICAgICAgICBmcC5jbG9zZSgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gW10KICAgIGlmIGxpbmVzIGFuZCBub3QgbGluZXNbLTFdLmVuZHN3aXRoKCdcbicpOgogICAgICAgIGxpbmVzWy0xXSArPSAnXG4nCiAgICBzaXplLCBtdGltZSA9IHN0YXQuc3Rfc2l6ZSwgc3RhdC5zdF9tdGltZQogICAgY2FjaGVbZmlsZW5hbWVdID0gc2l6ZSwgbXRpbWUsIGxpbmVzLCBmdWxsbmFtZQogICAgcmV0dXJuIGxpbmVzCg==',
'/Lib/_thread.py':'IiIiRHJvcC1pbiByZXBsYWNlbWVudCBmb3IgdGhlIHRocmVhZCBtb2R1bGUuCgpNZWFudCB0byBiZSB1c2VkIGFzIGEgYnJhaW4tZGVhZCBzdWJzdGl0dXRlIHNvIHRoYXQgdGhyZWFkZWQgY29kZSBkb2VzCm5vdCBuZWVkIHRvIGJlIHJld3JpdHRlbiBmb3Igd2hlbiB0aGUgdGhyZWFkIG1vZHVsZSBpcyBub3QgcHJlc2VudC4KClN1Z2dlc3RlZCB1c2FnZSBpczo6CgogICAgdHJ5OgogICAgICAgIGltcG9ydCBfdGhyZWFkCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IF9kdW1teV90aHJlYWQgYXMgX3RocmVhZAoKIiIiCiMgRXhwb3J0cyBvbmx5IHRoaW5ncyBzcGVjaWZpZWQgYnkgdGhyZWFkIGRvY3VtZW50YXRpb247CiMgc2tpcHBpbmcgb2Jzb2xldGUgc3lub255bXMgYWxsb2NhdGUoKSwgc3RhcnRfbmV3KCksIGV4aXRfdGhyZWFkKCkuCl9fYWxsX18gPSBbJ2Vycm9yJywgJ3N0YXJ0X25ld190aHJlYWQnLCAnZXhpdCcsICdnZXRfaWRlbnQnLCAnYWxsb2NhdGVfbG9jaycsCiAgICAgICAgICAgJ2ludGVycnVwdF9tYWluJywgJ0xvY2tUeXBlJ10KCiMgQSBkdW1teSB2YWx1ZQpUSU1FT1VUX01BWCA9IDIqKjMxCgojIE5PVEU6IHRoaXMgbW9kdWxlIGNhbiBiZSBpbXBvcnRlZCBlYXJseSBpbiB0aGUgZXh0ZW5zaW9uIGJ1aWxkaW5nIHByb2Nlc3MsCiMgYW5kIHNvIHRvcCBsZXZlbCBpbXBvcnRzIG9mIG90aGVyIG1vZHVsZXMgc2hvdWxkIGJlIGF2b2lkZWQuICBJbnN0ZWFkLCBhbGwKIyBpbXBvcnRzIGFyZSBkb25lIHdoZW4gbmVlZGVkIG9uIGEgZnVuY3Rpb24tYnktZnVuY3Rpb24gYmFzaXMuICBTaW5jZSB0aHJlYWRzCiMgYXJlIGRpc2FibGVkLCB0aGUgaW1wb3J0IGxvY2sgc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZSBhbnl3YXkgKD8/KS4KCmVycm9yID0gUnVudGltZUVycm9yCgpkZWYgc3RhcnRfbmV3X3RocmVhZChmdW5jdGlvbiwgYXJncywga3dhcmdzPXt9KToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuc3RhcnRfbmV3X3RocmVhZCgpLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWtpbmcgc3VyZSB0aGF0IGBgYXJnc2BgIGlzIGEKICAgIHR1cGxlIGFuZCBgYGt3YXJnc2BgIGlzIGEgZGljdGlvbmFyeS4gIElmIGFuIGV4Y2VwdGlvbiBpcyByYWlzZWQKICAgIGFuZCBpdCBpcyBTeXN0ZW1FeGl0ICh3aGljaCBjYW4gYmUgZG9uZSBieSBfdGhyZWFkLmV4aXQoKSkgaXQgaXMKICAgIGNhdWdodCBhbmQgbm90aGluZyBpcyBkb25lOyBhbGwgb3RoZXIgZXhjZXB0aW9ucyBhcmUgcHJpbnRlZCBvdXQKICAgIGJ5IHVzaW5nIHRyYWNlYmFjay5wcmludF9leGMoKS4KCiAgICBJZiB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24gY2FsbHMgaW50ZXJydXB0X21haW4gdGhlIEtleWJvYXJkSW50ZXJydXB0IHdpbGwgYmUKICAgIHJhaXNlZCB3aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zLgoKICAgICIiIgogICAgaWYgdHlwZShhcmdzKSAhPSB0eXBlKHR1cGxlKCkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiMm5kIGFyZyBtdXN0IGJlIGEgdHVwbGUiKQogICAgaWYgdHlwZShrd2FyZ3MpICE9IHR5cGUoZGljdCgpKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoIjNyZCBhcmcgbXVzdCBiZSBhIGRpY3QiKQogICAgZ2xvYmFsIF9tYWluCiAgICBfbWFpbiA9IEZhbHNlCiAgICB0cnk6CiAgICAgICAgZnVuY3Rpb24oKmFyZ3MsICoqa3dhcmdzKQogICAgZXhjZXB0IFN5c3RlbUV4aXQ6CiAgICAgICAgcGFzcwogICAgZXhjZXB0OgogICAgICAgIGltcG9ydCB0cmFjZWJhY2sKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgIF9tYWluID0gVHJ1ZQogICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgIGlmIF9pbnRlcnJ1cHQ6CiAgICAgICAgX2ludGVycnVwdCA9IEZhbHNlCiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKCmRlZiBleGl0KCk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLmV4aXQoKS4iIiIKICAgIHJhaXNlIFN5c3RlbUV4aXQKCmRlZiBnZXRfaWRlbnQoKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuZ2V0X2lkZW50KCkuCgogICAgU2luY2UgdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIF90aHJlYWRtb2R1bGUgaXMgbm90CiAgICBhdmFpbGFibGUsIGl0IGlzIHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhlIGN1cnJlbnQgcHJvY2VzcyBpcyB0aGUKICAgIG9ubHkgdGhyZWFkLiAgVGh1cyBhIGNvbnN0YW50IGNhbiBiZSBzYWZlbHkgcmV0dXJuZWQuCiAgICAiIiIKICAgIHJldHVybiAtMQoKZGVmIGFsbG9jYXRlX2xvY2soKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuYWxsb2NhdGVfbG9jaygpLiIiIgogICAgcmV0dXJuIExvY2tUeXBlKCkKCmRlZiBzdGFja19zaXplKHNpemU9Tm9uZSk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLnN0YWNrX3NpemUoKS4iIiIKICAgIGlmIHNpemUgaXMgbm90IE5vbmU6CiAgICAgICAgcmFpc2UgZXJyb3IoInNldHRpbmcgdGhyZWFkIHN0YWNrIHNpemUgbm90IHN1cHBvcnRlZCIpCiAgICByZXR1cm4gMAoKY2xhc3MgTG9ja1R5cGUob2JqZWN0KToKICAgICIiIkNsYXNzIGltcGxlbWVudGluZyBkdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLkxvY2tUeXBlLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWludGFpbmluZyBzZWxmLmxvY2tlZF9zdGF0dXMKICAgIHdoaWNoIGlzIGEgYm9vbGVhbiB0aGF0IHN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxvY2suICBQaWNrbGluZyBvZgogICAgdGhlIGxvY2ssIHRob3VnaCwgc2hvdWxkIG5vdCBiZSBkb25lIHNpbmNlIGlmIHRoZSBfdGhyZWFkIG1vZHVsZSBpcwogICAgdGhlbiB1c2VkIHdpdGggYW4gdW5waWNrbGVkIGBgbG9jaygpYGAgZnJvbSBoZXJlIHByb2JsZW1zIGNvdWxkCiAgICBvY2N1ciBmcm9tIHRoaXMgY2xhc3Mgbm90IGhhdmluZyBhdG9taWMgbWV0aG9kcy4KCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gRmFsc2UKCiAgICBkZWYgYWNxdWlyZShzZWxmLCB3YWl0ZmxhZz1Ob25lLCB0aW1lb3V0PS0xKToKICAgICAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBhY3F1aXJlKCkuCgogICAgICAgIEZvciBibG9ja2luZyBjYWxscywgc2VsZi5sb2NrZWRfc3RhdHVzIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvCiAgICAgICAgVHJ1ZSBhbmQgcmV0dXJuZWQgYXBwcm9wcmlhdGVseSBiYXNlZCBvbiB2YWx1ZSBvZgogICAgICAgIGBgd2FpdGZsYWdgYC4gIElmIGl0IGlzIG5vbi1ibG9ja2luZywgdGhlbiB0aGUgdmFsdWUgaXMKICAgICAgICBhY3R1YWxseSBjaGVja2VkIGFuZCBub3Qgc2V0IGlmIGl0IGlzIGFscmVhZHkgYWNxdWlyZWQuICBUaGlzCiAgICAgICAgaXMgYWxsIGRvbmUgc28gdGhhdCB0aHJlYWRpbmcuQ29uZGl0aW9uJ3MgYXNzZXJ0IHN0YXRlbWVudHMKICAgICAgICBhcmVuJ3QgdHJpZ2dlcmVkIGFuZCB0aHJvdyBhIGxpdHRsZSBmaXQuCgogICAgICAgICIiIgogICAgICAgIGlmIHdhaXRmbGFnIGlzIE5vbmUgb3Igd2FpdGZsYWc6CiAgICAgICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IFRydWUKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gVHJ1ZQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIHRpbWVvdXQgPiAwOgogICAgICAgICAgICAgICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCh0aW1lb3V0KQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgX19lbnRlcl9fID0gYWNxdWlyZQoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCB0eXAsIHZhbCwgdGIpOgogICAgICAgIHNlbGYucmVsZWFzZSgpCgogICAgZGVmIHJlbGVhc2Uoc2VsZik6CiAgICAgICAgIiIiUmVsZWFzZSB0aGUgZHVtbXkgbG9jay4iIiIKICAgICAgICAjIFhYWCBQZXJoYXBzIHNob3VsZG4ndCBhY3R1YWxseSBib3RoZXIgdG8gdGVzdD8gIENvdWxkIGxlYWQKICAgICAgICAjICAgICB0byBwcm9ibGVtcyBmb3IgY29tcGxleCwgdGhyZWFkZWQgY29kZS4KICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICByYWlzZSBlcnJvcgogICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgbG9ja2VkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmxvY2tlZF9zdGF0dXMKCiMgVXNlZCB0byBzaWduYWwgdGhhdCBpbnRlcnJ1cHRfbWFpbiB3YXMgY2FsbGVkIGluIGEgInRocmVhZCIKX2ludGVycnVwdCA9IEZhbHNlCiMgVHJ1ZSB3aGVuIG5vdCBleGVjdXRpbmcgaW4gYSAidGhyZWFkIgpfbWFpbiA9IFRydWUKCmRlZiBpbnRlcnJ1cHRfbWFpbigpOgogICAgIiIiU2V0IF9pbnRlcnJ1cHQgZmxhZyB0byBUcnVlIHRvIGhhdmUgc3RhcnRfbmV3X3RocmVhZCByYWlzZQogICAgS2V5Ym9hcmRJbnRlcnJ1cHQgdXBvbiBleGl0aW5nLiIiIgogICAgaWYgX21haW46CiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKICAgIGVsc2U6CiAgICAgICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgICAgICBfaW50ZXJydXB0ID0gVHJ1ZQoKIyBCcnl0aG9uLXNwZWNpZmljIHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgYmV0d2VlbiB0aHJlYWRpbmcgYW5kIF90aHJlYWRpbmdfbG9jYWwKY2xhc3MgX2xvY2FsOgogICAgcGFzcw==',
'/Lib/imp.py':'',
'/Lib/_abcoll.py':'IyBDb3B5cmlnaHQgMjAwNyBHb29nbGUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIyBMaWNlbnNlZCB0byBQU0YgdW5kZXIgYSBDb250cmlidXRvciBBZ3JlZW1lbnQuCgoiIiJBYnN0cmFjdCBCYXNlIENsYXNzZXMgKEFCQ3MpIGZvciBjb2xsZWN0aW9ucywgYWNjb3JkaW5nIHRvIFBFUCAzMTE5LgoKRE9OJ1QgVVNFIFRISVMgTU9EVUxFIERJUkVDVExZISAgVGhlIGNsYXNzZXMgaGVyZSBzaG91bGQgYmUgaW1wb3J0ZWQKdmlhIGNvbGxlY3Rpb25zOyB0aGV5IGFyZSBkZWZpbmVkIGhlcmUgb25seSB0byBhbGxldmlhdGUgY2VydGFpbgpib290c3RyYXBwaW5nIGlzc3Vlcy4gIFVuaXQgdGVzdHMgYXJlIGluIHRlc3RfY29sbGVjdGlvbnMuCiIiIgoKI2Zyb20gYWJjIGltcG9ydCBBQkNNZXRhLCBhYnN0cmFjdG1ldGhvZAppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJIYXNoYWJsZSIsICJJdGVyYWJsZSIsICJJdGVyYXRvciIsCiAgICAgICAgICAgIlNpemVkIiwgIkNvbnRhaW5lciIsICJDYWxsYWJsZSIsCiAgICAgICAgICAgIlNldCIsICJNdXRhYmxlU2V0IiwKICAgICAgICAgICAiTWFwcGluZyIsICJNdXRhYmxlTWFwcGluZyIsCiAgICAgICAgICAgIk1hcHBpbmdWaWV3IiwgIktleXNWaWV3IiwgIkl0ZW1zVmlldyIsICJWYWx1ZXNWaWV3IiwKICAgICAgICAgICAiU2VxdWVuY2UiLCAiTXV0YWJsZVNlcXVlbmNlIiwKICAgICAgICAgICAiQnl0ZVN0cmluZyIsCiAgICAgICAgICAgXQoKIiIiCiMjIyBjb2xsZWN0aW9uIHJlbGF0ZWQgdHlwZXMgd2hpY2ggYXJlIG5vdCBleHBvc2VkIHRocm91Z2ggYnVpbHRpbiAjIyMKIyMgaXRlcmF0b3JzICMjCiNmaXhtZSBicnl0aG9uCiNieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcihiJycpKQpieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcignJykpCiNmaXhtZSBicnl0aG9uCiNieXRlYXJyYXlfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoYnl0ZWFycmF5KCkpKQojY2FsbGFibGVfaXRlcmF0b3IgPSA/Pz8KZGljdF9rZXlpdGVyYXRvciA9IHR5cGUoaXRlcih7fS5rZXlzKCkpKQpkaWN0X3ZhbHVlaXRlcmF0b3IgPSB0eXBlKGl0ZXIoe30udmFsdWVzKCkpKQpkaWN0X2l0ZW1pdGVyYXRvciA9IHR5cGUoaXRlcih7fS5pdGVtcygpKSkKbGlzdF9pdGVyYXRvciA9IHR5cGUoaXRlcihbXSkpCmxpc3RfcmV2ZXJzZWl0ZXJhdG9yID0gdHlwZShpdGVyKHJldmVyc2VkKFtdKSkpCnJhbmdlX2l0ZXJhdG9yID0gdHlwZShpdGVyKHJhbmdlKDApKSkKc2V0X2l0ZXJhdG9yID0gdHlwZShpdGVyKHNldCgpKSkKc3RyX2l0ZXJhdG9yID0gdHlwZShpdGVyKCIiKSkKdHVwbGVfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoKCkpKQp6aXBfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoemlwKCkpKQojIyB2aWV3cyAjIwpkaWN0X2tleXMgPSB0eXBlKHt9LmtleXMoKSkKZGljdF92YWx1ZXMgPSB0eXBlKHt9LnZhbHVlcygpKQpkaWN0X2l0ZW1zID0gdHlwZSh7fS5pdGVtcygpKQojIyBtaXNjICMjCmRpY3RfcHJveHkgPSB0eXBlKHR5cGUuX19kaWN0X18pCiIiIgoKZGVmIGFic3RyYWN0bWV0aG9kKHNlbGYpOgogICAgcmV0dXJuIHNlbGYKCiMjIyBPTkUtVFJJQ0sgUE9OSUVTICMjIwoKCiNjbGFzcyBJdGVyYWJsZShtZXRhY2xhc3M9QUJDTWV0YSk6CmNsYXNzIEl0ZXJhYmxlOgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHdoaWxlIEZhbHNlOgogICAgICAgICAgICB5aWVsZCBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBJdGVyYWJsZToKICAgICAgICAgICAgaWYgYW55KCJfX2l0ZXJfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCgojY2xhc3MgU2l6ZWQobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBTaXplZDoKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAwCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBTaXplZDoKICAgICAgICAgICAgaWYgYW55KCJfX2xlbl9fIiBpbiBCLl9fZGljdF9fIGZvciBCIGluIEMuX19tcm9fXyk6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKCiNjbGFzcyBDb250YWluZXIobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBDb250YWluZXI6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHgpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9fc3ViY2xhc3Nob29rX18oY2xzLCBDKToKICAgICAgICBpZiBjbHMgaXMgQ29udGFpbmVyOgogICAgICAgICAgICBpZiBhbnkoIl9fY29udGFpbnNfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiMjIyBNQVBQSU5HUyAjIyMKCgpjbGFzcyBNYXBwaW5nKFNpemVkLCBJdGVyYWJsZSwgQ29udGFpbmVyKToKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGZba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICByZXR1cm4gS2V5c1ZpZXcoc2VsZikKCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgcmV0dXJuIEl0ZW1zVmlldyhzZWxmKQoKICAgIGRlZiB2YWx1ZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIFZhbHVlc1ZpZXcoc2VsZikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgTWFwcGluZyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBkaWN0KHNlbGYuaXRlbXMoKSkgPT0gZGljdChvdGhlci5pdGVtcygpKQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3QgKHNlbGYgPT0gb3RoZXIpCgoKY2xhc3MgTXV0YWJsZU1hcHBpbmcoTWFwcGluZyk6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgcmFpc2UgS2V5RXJyb3IKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgX19tYXJrZXIgPSBvYmplY3QoKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCBkZWZhdWx0PV9fbWFya2VyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIHNlbGYuX19tYXJrZXI6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbCBzZWxmW2tleV0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBrZXkgPSBuZXh0KGl0ZXIoc2VsZikpCiAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yCiAgICAgICAgdmFsdWUgPSBzZWxmW2tleV0KICAgICAgICBkZWwgc2VsZltrZXldCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc2VsZi5wb3BpdGVtKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKCphcmdzLCAqKmt3ZHMpOgogICAgICAgIGlmIGxlbihhcmdzKSA+IDI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidXBkYXRlKCkgdGFrZXMgYXQgbW9zdCAyIHBvc2l0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyAoe30gZ2l2ZW4pIi5mb3JtYXQobGVuKGFyZ3MpKSkKICAgICAgICBlbGlmIG5vdCBhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInVwZGF0ZSgpIHRha2VzIGF0IGxlYXN0IDEgYXJndW1lbnQgKDAgZ2l2ZW4pIikKICAgICAgICBzZWxmID0gYXJnc1swXQogICAgICAgIG90aGVyID0gYXJnc1sxXSBpZiBsZW4oYXJncykgPj0gMiBlbHNlICgpCgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIE1hcHBpbmcpOgogICAgICAgICAgICBmb3Iga2V5IGluIG90aGVyOgogICAgICAgICAgICAgICAgc2VsZltrZXldID0gb3RoZXJba2V5XQogICAgICAgIGVsaWYgaGFzYXR0cihvdGhlciwgImtleXMiKToKICAgICAgICAgICAgZm9yIGtleSBpbiBvdGhlci5rZXlzKCk6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSBvdGhlcltrZXldCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gb3RoZXI6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3ZHMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWUKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmW2tleV0gPSBkZWZhdWx0CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiNNdXRhYmxlTWFwcGluZy5yZWdpc3RlcihkaWN0KQo=',
'/Lib/copy.py':'',
'/Lib/queue.py':'',
'/Lib/keyword.py':'a3dsaXN0ID0gWwojLS1zdGFydCBrZXl3b3Jkcy0tCiAgICAgICAgJ0ZhbHNlJywKICAgICAgICAnTm9uZScsCiAgICAgICAgJ1RydWUnLAogICAgICAgICdhbmQnLAogICAgICAgICdhcycsCiAgICAgICAgJ2Fzc2VydCcsCiAgICAgICAgJ2JyZWFrJywKICAgICAgICAnY2xhc3MnLAogICAgICAgICdjb250aW51ZScsCiAgICAgICAgJ2RlZicsCiAgICAgICAgJ2RlbCcsCiAgICAgICAgJ2VsaWYnLAogICAgICAgICdlbHNlJywKICAgICAgICAnZXhjZXB0JywKICAgICAgICAnZmluYWxseScsCiAgICAgICAgJ2ZvcicsCiAgICAgICAgJ2Zyb20nLAogICAgICAgICdnbG9iYWwnLAogICAgICAgICdpZicsCiAgICAgICAgJ2ltcG9ydCcsCiAgICAgICAgJ2luJywKICAgICAgICAnaXMnLAogICAgICAgICdsYW1iZGEnLAogICAgICAgICdub25sb2NhbCcsCiAgICAgICAgJ25vdCcsCiAgICAgICAgJ29yJywKICAgICAgICAncGFzcycsCiAgICAgICAgJ3JhaXNlJywKICAgICAgICAncmV0dXJuJywKICAgICAgICAndHJ5JywKICAgICAgICAnd2hpbGUnLAogICAgICAgICd3aXRoJywKICAgICAgICAneWllbGQnLAojLS1lbmQga2V5d29yZHMtLQogICAgICAgIF0KCmRlZiBpc2tleXdvcmQod29yZCk6CiAgICByZXR1cm4gd29yZCBpbiBrd2xpc3QK',
'/Lib/subprocess.py':'',
'/Lib/stat.py':'IiIiQ29uc3RhbnRzL2Z1bmN0aW9ucyBmb3IgaW50ZXJwcmV0aW5nIHJlc3VsdHMgb2Ygb3Muc3RhdCgpIGFuZCBvcy5sc3RhdCgpLg0KDQpTdWdnZXN0ZWQgdXNhZ2U6IGZyb20gc3RhdCBpbXBvcnQgKg0KIiIiDQoNCiMgSW5kaWNlcyBmb3Igc3RhdCBzdHJ1Y3QgbWVtYmVycyBpbiB0aGUgdHVwbGUgcmV0dXJuZWQgYnkgb3Muc3RhdCgpDQoNClNUX01PREUgID0gMA0KU1RfSU5PICAgPSAxDQpTVF9ERVYgICA9IDINClNUX05MSU5LID0gMw0KU1RfVUlEICAgPSA0DQpTVF9HSUQgICA9IDUNClNUX1NJWkUgID0gNg0KU1RfQVRJTUUgPSA3DQpTVF9NVElNRSA9IDgNClNUX0NUSU1FID0gOQ0KDQojIEV4dHJhY3QgYml0cyBmcm9tIHRoZSBtb2RlDQoNCmRlZiBTX0lNT0RFKG1vZGUpOg0KICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBjYW4gYmUgc2V0IGJ5DQogICAgb3MuY2htb2QoKS4NCiAgICAiIiINCiAgICByZXR1cm4gbW9kZSAmIDBvNzc3Nw0KDQpkZWYgU19JRk1UKG1vZGUpOg0KICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBkZXNjcmliZXMgdGhlDQogICAgZmlsZSB0eXBlLg0KICAgICIiIg0KICAgIHJldHVybiBtb2RlICYgMG8xNzAwMDANCg0KIyBDb25zdGFudHMgdXNlZCBhcyBTX0lGTVQoKSBmb3IgdmFyaW91cyBmaWxlIHR5cGVzDQojIChub3QgYWxsIGFyZSBpbXBsZW1lbnRlZCBvbiBhbGwgc3lzdGVtcykNCg0KU19JRkRJUiAgPSAwbzA0MDAwMCAgIyBkaXJlY3RvcnkNClNfSUZDSFIgID0gMG8wMjAwMDAgICMgY2hhcmFjdGVyIGRldmljZQ0KU19JRkJMSyAgPSAwbzA2MDAwMCAgIyBibG9jayBkZXZpY2UNClNfSUZSRUcgID0gMG8xMDAwMDAgICMgcmVndWxhciBmaWxlDQpTX0lGSUZPICA9IDBvMDEwMDAwICAjIGZpZm8gKG5hbWVkIHBpcGUpDQpTX0lGTE5LICA9IDBvMTIwMDAwICAjIHN5bWJvbGljIGxpbmsNClNfSUZTT0NLID0gMG8xNDAwMDAgICMgc29ja2V0IGZpbGUNCg0KIyBGdW5jdGlvbnMgdG8gdGVzdCBmb3IgZWFjaCBmaWxlIHR5cGUNCg0KZGVmIFNfSVNESVIobW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgZGlyZWN0b3J5LiIiIg0KICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRkRJUg0KDQpkZWYgU19JU0NIUihtb2RlKToNCiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSBjaGFyYWN0ZXIgc3BlY2lhbCBkZXZpY2UgZmlsZS4iIiINCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZDSFINCg0KZGVmIFNfSVNCTEsobW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgYmxvY2sgc3BlY2lhbCBkZXZpY2UgZmlsZS4iIiINCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZCTEsNCg0KZGVmIFNfSVNSRUcobW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgcmVndWxhciBmaWxlLiIiIg0KICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRlJFRw0KDQpkZWYgU19JU0ZJRk8obW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgRklGTyAobmFtZWQgcGlwZSkuIiIiDQogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGSUZPDQoNCmRlZiBTX0lTTE5LKG1vZGUpOg0KICAgICIiIlJldHVybiBUcnVlIGlmIG1vZGUgaXMgZnJvbSBhIHN5bWJvbGljIGxpbmsuIiIiDQogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGTE5LDQoNCmRlZiBTX0lTU09DSyhtb2RlKToNCiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSBzb2NrZXQuIiIiDQogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGU09DSw0KDQojIE5hbWVzIGZvciBwZXJtaXNzaW9uIGJpdHMNCg0KU19JU1VJRCA9IDBvNDAwMCAgIyBzZXQgVUlEIGJpdA0KU19JU0dJRCA9IDBvMjAwMCAgIyBzZXQgR0lEIGJpdA0KU19FTkZNVCA9IFNfSVNHSUQgIyBmaWxlIGxvY2tpbmcgZW5mb3JjZW1lbnQNClNfSVNWVFggPSAwbzEwMDAgICMgc3RpY2t5IGJpdA0KU19JUkVBRCA9IDBvMDQwMCAgIyBVbml4IFY3IHN5bm9ueW0gZm9yIFNfSVJVU1INClNfSVdSSVRFID0gMG8wMjAwICMgVW5peCBWNyBzeW5vbnltIGZvciBTX0lXVVNSDQpTX0lFWEVDID0gMG8wMTAwICAjIFVuaXggVjcgc3lub255bSBmb3IgU19JWFVTUg0KU19JUldYVSA9IDBvMDcwMCAgIyBtYXNrIGZvciBvd25lciBwZXJtaXNzaW9ucw0KU19JUlVTUiA9IDBvMDQwMCAgIyByZWFkIGJ5IG93bmVyDQpTX0lXVVNSID0gMG8wMjAwICAjIHdyaXRlIGJ5IG93bmVyDQpTX0lYVVNSID0gMG8wMTAwICAjIGV4ZWN1dGUgYnkgb3duZXINClNfSVJXWEcgPSAwbzAwNzAgICMgbWFzayBmb3IgZ3JvdXAgcGVybWlzc2lvbnMNClNfSVJHUlAgPSAwbzAwNDAgICMgcmVhZCBieSBncm91cA0KU19JV0dSUCA9IDBvMDAyMCAgIyB3cml0ZSBieSBncm91cA0KU19JWEdSUCA9IDBvMDAxMCAgIyBleGVjdXRlIGJ5IGdyb3VwDQpTX0lSV1hPID0gMG8wMDA3ICAjIG1hc2sgZm9yIG90aGVycyAobm90IGluIGdyb3VwKSBwZXJtaXNzaW9ucw0KU19JUk9USCA9IDBvMDAwNCAgIyByZWFkIGJ5IG90aGVycw0KU19JV09USCA9IDBvMDAwMiAgIyB3cml0ZSBieSBvdGhlcnMNClNfSVhPVEggPSAwbzAwMDEgICMgZXhlY3V0ZSBieSBvdGhlcnMNCg0KIyBOYW1lcyBmb3IgZmlsZSBmbGFncw0KDQpVRl9OT0RVTVAgICAgPSAweDAwMDAwMDAxICAjIGRvIG5vdCBkdW1wIGZpbGUNClVGX0lNTVVUQUJMRSA9IDB4MDAwMDAwMDIgICMgZmlsZSBtYXkgbm90IGJlIGNoYW5nZWQNClVGX0FQUEVORCAgICA9IDB4MDAwMDAwMDQgICMgZmlsZSBtYXkgb25seSBiZSBhcHBlbmRlZCB0bw0KVUZfT1BBUVVFICAgID0gMHgwMDAwMDAwOCAgIyBkaXJlY3RvcnkgaXMgb3BhcXVlIHdoZW4gdmlld2VkIHRocm91Z2ggYSB1bmlvbiBzdGFjaw0KVUZfTk9VTkxJTksgID0gMHgwMDAwMDAxMCAgIyBmaWxlIG1heSBub3QgYmUgcmVuYW1lZCBvciBkZWxldGVkDQpVRl9DT01QUkVTU0VEID0gMHgwMDAwMDAyMCAjIE9TIFg6IGZpbGUgaXMgaGZzLWNvbXByZXNzZWQNClVGX0hJRERFTiAgICA9IDB4MDAwMDgwMDAgICMgT1MgWDogZmlsZSBzaG91bGQgbm90IGJlIGRpc3BsYXllZA0KU0ZfQVJDSElWRUQgID0gMHgwMDAxMDAwMCAgIyBmaWxlIG1heSBiZSBhcmNoaXZlZA0KU0ZfSU1NVVRBQkxFID0gMHgwMDAyMDAwMCAgIyBmaWxlIG1heSBub3QgYmUgY2hhbmdlZA0KU0ZfQVBQRU5EICAgID0gMHgwMDA0MDAwMCAgIyBmaWxlIG1heSBvbmx5IGJlIGFwcGVuZGVkIHRvDQpTRl9OT1VOTElOSyAgPSAweDAwMTAwMDAwICAjIGZpbGUgbWF5IG5vdCBiZSByZW5hbWVkIG9yIGRlbGV0ZWQNClNGX1NOQVBTSE9UICA9IDB4MDAyMDAwMDAgICMgZmlsZSBpcyBhIHNuYXBzaG90IGZpbGUNCg0KDQpfZmlsZW1vZGVfdGFibGUgPSAoDQogICAgKChTX0lGTE5LLCAgICAgICAgICJsIiksDQogICAgIChTX0lGUkVHLCAgICAgICAgICItIiksDQogICAgIChTX0lGQkxLLCAgICAgICAgICJiIiksDQogICAgIChTX0lGRElSLCAgICAgICAgICJkIiksDQogICAgIChTX0lGQ0hSLCAgICAgICAgICJjIiksDQogICAgIChTX0lGSUZPLCAgICAgICAgICJwIikpLA0KDQogICAgKChTX0lSVVNSLCAgICAgICAgICJyIiksKSwNCiAgICAoKFNfSVdVU1IsICAgICAgICAgInciKSwpLA0KICAgICgoU19JWFVTUnxTX0lTVUlELCAicyIpLA0KICAgICAoU19JU1VJRCwgICAgICAgICAiUyIpLA0KICAgICAoU19JWFVTUiwgICAgICAgICAieCIpKSwNCg0KICAgICgoU19JUkdSUCwgICAgICAgICAiciIpLCksDQogICAgKChTX0lXR1JQLCAgICAgICAgICJ3IiksKSwNCiAgICAoKFNfSVhHUlB8U19JU0dJRCwgInMiKSwNCiAgICAgKFNfSVNHSUQsICAgICAgICAgIlMiKSwNCiAgICAgKFNfSVhHUlAsICAgICAgICAgIngiKSksDQoNCiAgICAoKFNfSVJPVEgsICAgICAgICAgInIiKSwpLA0KICAgICgoU19JV09USCwgICAgICAgICAidyIpLCksDQogICAgKChTX0lYT1RIfFNfSVNWVFgsICJ0IiksDQogICAgIChTX0lTVlRYLCAgICAgICAgICJUIiksDQogICAgIChTX0lYT1RILCAgICAgICAgICJ4IikpDQopDQoNCmRlZiBmaWxlbW9kZShtb2RlKToNCiAgICAiIiJDb252ZXJ0IGEgZmlsZSdzIG1vZGUgdG8gYSBzdHJpbmcgb2YgdGhlIGZvcm0gJy1yd3hyd3hyd3gnLiIiIg0KICAgIHBlcm0gPSBbXQ0KICAgIGZvciB0YWJsZSBpbiBfZmlsZW1vZGVfdGFibGU6DQogICAgICAgIGZvciBiaXQsIGNoYXIgaW4gdGFibGU6DQogICAgICAgICAgICBpZiBtb2RlICYgYml0ID09IGJpdDoNCiAgICAgICAgICAgICAgICBwZXJtLmFwcGVuZChjaGFyKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwZXJtLmFwcGVuZCgiLSIpDQogICAgcmV0dXJuICIiLmpvaW4ocGVybSkNCg==',
'/Lib/inspect.py':'',
'/Lib/_dummy_thread.py':'IiIiRHJvcC1pbiByZXBsYWNlbWVudCBmb3IgdGhlIHRocmVhZCBtb2R1bGUuCgpNZWFudCB0byBiZSB1c2VkIGFzIGEgYnJhaW4tZGVhZCBzdWJzdGl0dXRlIHNvIHRoYXQgdGhyZWFkZWQgY29kZSBkb2VzCm5vdCBuZWVkIHRvIGJlIHJld3JpdHRlbiBmb3Igd2hlbiB0aGUgdGhyZWFkIG1vZHVsZSBpcyBub3QgcHJlc2VudC4KClN1Z2dlc3RlZCB1c2FnZSBpczo6CgogICAgdHJ5OgogICAgICAgIGltcG9ydCBfdGhyZWFkCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IF9kdW1teV90aHJlYWQgYXMgX3RocmVhZAoKIiIiCiMgRXhwb3J0cyBvbmx5IHRoaW5ncyBzcGVjaWZpZWQgYnkgdGhyZWFkIGRvY3VtZW50YXRpb247CiMgc2tpcHBpbmcgb2Jzb2xldGUgc3lub255bXMgYWxsb2NhdGUoKSwgc3RhcnRfbmV3KCksIGV4aXRfdGhyZWFkKCkuCl9fYWxsX18gPSBbJ2Vycm9yJywgJ3N0YXJ0X25ld190aHJlYWQnLCAnZXhpdCcsICdnZXRfaWRlbnQnLCAnYWxsb2NhdGVfbG9jaycsCiAgICAgICAgICAgJ2ludGVycnVwdF9tYWluJywgJ0xvY2tUeXBlJ10KCiMgQSBkdW1teSB2YWx1ZQpUSU1FT1VUX01BWCA9IDIqKjMxCgojIE5PVEU6IHRoaXMgbW9kdWxlIGNhbiBiZSBpbXBvcnRlZCBlYXJseSBpbiB0aGUgZXh0ZW5zaW9uIGJ1aWxkaW5nIHByb2Nlc3MsCiMgYW5kIHNvIHRvcCBsZXZlbCBpbXBvcnRzIG9mIG90aGVyIG1vZHVsZXMgc2hvdWxkIGJlIGF2b2lkZWQuICBJbnN0ZWFkLCBhbGwKIyBpbXBvcnRzIGFyZSBkb25lIHdoZW4gbmVlZGVkIG9uIGEgZnVuY3Rpb24tYnktZnVuY3Rpb24gYmFzaXMuICBTaW5jZSB0aHJlYWRzCiMgYXJlIGRpc2FibGVkLCB0aGUgaW1wb3J0IGxvY2sgc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZSBhbnl3YXkgKD8/KS4KCmVycm9yID0gUnVudGltZUVycm9yCgpkZWYgc3RhcnRfbmV3X3RocmVhZChmdW5jdGlvbiwgYXJncywga3dhcmdzPXt9KToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuc3RhcnRfbmV3X3RocmVhZCgpLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWtpbmcgc3VyZSB0aGF0IGBgYXJnc2BgIGlzIGEKICAgIHR1cGxlIGFuZCBgYGt3YXJnc2BgIGlzIGEgZGljdGlvbmFyeS4gIElmIGFuIGV4Y2VwdGlvbiBpcyByYWlzZWQKICAgIGFuZCBpdCBpcyBTeXN0ZW1FeGl0ICh3aGljaCBjYW4gYmUgZG9uZSBieSBfdGhyZWFkLmV4aXQoKSkgaXQgaXMKICAgIGNhdWdodCBhbmQgbm90aGluZyBpcyBkb25lOyBhbGwgb3RoZXIgZXhjZXB0aW9ucyBhcmUgcHJpbnRlZCBvdXQKICAgIGJ5IHVzaW5nIHRyYWNlYmFjay5wcmludF9leGMoKS4KCiAgICBJZiB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24gY2FsbHMgaW50ZXJydXB0X21haW4gdGhlIEtleWJvYXJkSW50ZXJydXB0IHdpbGwgYmUKICAgIHJhaXNlZCB3aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zLgoKICAgICIiIgogICAgaWYgdHlwZShhcmdzKSAhPSB0eXBlKHR1cGxlKCkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiMm5kIGFyZyBtdXN0IGJlIGEgdHVwbGUiKQogICAgaWYgdHlwZShrd2FyZ3MpICE9IHR5cGUoZGljdCgpKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoIjNyZCBhcmcgbXVzdCBiZSBhIGRpY3QiKQogICAgZ2xvYmFsIF9tYWluCiAgICBfbWFpbiA9IEZhbHNlCiAgICB0cnk6CiAgICAgICAgZnVuY3Rpb24oKmFyZ3MsICoqa3dhcmdzKQogICAgZXhjZXB0IFN5c3RlbUV4aXQ6CiAgICAgICAgcGFzcwogICAgZXhjZXB0OgogICAgICAgIGltcG9ydCB0cmFjZWJhY2sKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgIF9tYWluID0gVHJ1ZQogICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgIGlmIF9pbnRlcnJ1cHQ6CiAgICAgICAgX2ludGVycnVwdCA9IEZhbHNlCiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKCmRlZiBleGl0KCk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLmV4aXQoKS4iIiIKICAgIHJhaXNlIFN5c3RlbUV4aXQKCmRlZiBnZXRfaWRlbnQoKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuZ2V0X2lkZW50KCkuCgogICAgU2luY2UgdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIF90aHJlYWRtb2R1bGUgaXMgbm90CiAgICBhdmFpbGFibGUsIGl0IGlzIHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhlIGN1cnJlbnQgcHJvY2VzcyBpcyB0aGUKICAgIG9ubHkgdGhyZWFkLiAgVGh1cyBhIGNvbnN0YW50IGNhbiBiZSBzYWZlbHkgcmV0dXJuZWQuCiAgICAiIiIKICAgIHJldHVybiAtMQoKZGVmIGFsbG9jYXRlX2xvY2soKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuYWxsb2NhdGVfbG9jaygpLiIiIgogICAgcmV0dXJuIExvY2tUeXBlKCkKCmRlZiBzdGFja19zaXplKHNpemU9Tm9uZSk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLnN0YWNrX3NpemUoKS4iIiIKICAgIGlmIHNpemUgaXMgbm90IE5vbmU6CiAgICAgICAgcmFpc2UgZXJyb3IoInNldHRpbmcgdGhyZWFkIHN0YWNrIHNpemUgbm90IHN1cHBvcnRlZCIpCiAgICByZXR1cm4gMAoKY2xhc3MgTG9ja1R5cGUob2JqZWN0KToKICAgICIiIkNsYXNzIGltcGxlbWVudGluZyBkdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLkxvY2tUeXBlLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWludGFpbmluZyBzZWxmLmxvY2tlZF9zdGF0dXMKICAgIHdoaWNoIGlzIGEgYm9vbGVhbiB0aGF0IHN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxvY2suICBQaWNrbGluZyBvZgogICAgdGhlIGxvY2ssIHRob3VnaCwgc2hvdWxkIG5vdCBiZSBkb25lIHNpbmNlIGlmIHRoZSBfdGhyZWFkIG1vZHVsZSBpcwogICAgdGhlbiB1c2VkIHdpdGggYW4gdW5waWNrbGVkIGBgbG9jaygpYGAgZnJvbSBoZXJlIHByb2JsZW1zIGNvdWxkCiAgICBvY2N1ciBmcm9tIHRoaXMgY2xhc3Mgbm90IGhhdmluZyBhdG9taWMgbWV0aG9kcy4KCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gRmFsc2UKCiAgICBkZWYgYWNxdWlyZShzZWxmLCB3YWl0ZmxhZz1Ob25lLCB0aW1lb3V0PS0xKToKICAgICAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBhY3F1aXJlKCkuCgogICAgICAgIEZvciBibG9ja2luZyBjYWxscywgc2VsZi5sb2NrZWRfc3RhdHVzIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvCiAgICAgICAgVHJ1ZSBhbmQgcmV0dXJuZWQgYXBwcm9wcmlhdGVseSBiYXNlZCBvbiB2YWx1ZSBvZgogICAgICAgIGBgd2FpdGZsYWdgYC4gIElmIGl0IGlzIG5vbi1ibG9ja2luZywgdGhlbiB0aGUgdmFsdWUgaXMKICAgICAgICBhY3R1YWxseSBjaGVja2VkIGFuZCBub3Qgc2V0IGlmIGl0IGlzIGFscmVhZHkgYWNxdWlyZWQuICBUaGlzCiAgICAgICAgaXMgYWxsIGRvbmUgc28gdGhhdCB0aHJlYWRpbmcuQ29uZGl0aW9uJ3MgYXNzZXJ0IHN0YXRlbWVudHMKICAgICAgICBhcmVuJ3QgdHJpZ2dlcmVkIGFuZCB0aHJvdyBhIGxpdHRsZSBmaXQuCgogICAgICAgICIiIgogICAgICAgIGlmIHdhaXRmbGFnIGlzIE5vbmUgb3Igd2FpdGZsYWc6CiAgICAgICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IFRydWUKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gVHJ1ZQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIHRpbWVvdXQgPiAwOgogICAgICAgICAgICAgICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCh0aW1lb3V0KQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgX19lbnRlcl9fID0gYWNxdWlyZQoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCB0eXAsIHZhbCwgdGIpOgogICAgICAgIHNlbGYucmVsZWFzZSgpCgogICAgZGVmIHJlbGVhc2Uoc2VsZik6CiAgICAgICAgIiIiUmVsZWFzZSB0aGUgZHVtbXkgbG9jay4iIiIKICAgICAgICAjIFhYWCBQZXJoYXBzIHNob3VsZG4ndCBhY3R1YWxseSBib3RoZXIgdG8gdGVzdD8gIENvdWxkIGxlYWQKICAgICAgICAjICAgICB0byBwcm9ibGVtcyBmb3IgY29tcGxleCwgdGhyZWFkZWQgY29kZS4KICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICByYWlzZSBlcnJvcgogICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgbG9ja2VkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmxvY2tlZF9zdGF0dXMKCiMgVXNlZCB0byBzaWduYWwgdGhhdCBpbnRlcnJ1cHRfbWFpbiB3YXMgY2FsbGVkIGluIGEgInRocmVhZCIKX2ludGVycnVwdCA9IEZhbHNlCiMgVHJ1ZSB3aGVuIG5vdCBleGVjdXRpbmcgaW4gYSAidGhyZWFkIgpfbWFpbiA9IFRydWUKCmRlZiBpbnRlcnJ1cHRfbWFpbigpOgogICAgIiIiU2V0IF9pbnRlcnJ1cHQgZmxhZyB0byBUcnVlIHRvIGhhdmUgc3RhcnRfbmV3X3RocmVhZCByYWlzZQogICAgS2V5Ym9hcmRJbnRlcnJ1cHQgdXBvbiBleGl0aW5nLiIiIgogICAgaWYgX21haW46CiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKICAgIGVsc2U6CiAgICAgICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgICAgICBfaW50ZXJydXB0ID0gVHJ1ZQo=',
'/Lib/_threading_local.py':'',
'/Lib/reprlib.py':'IiIiUmVkbyB0aGUgYnVpbHRpbiByZXByKCkgKHJlcHJlc2VudGF0aW9uKSBidXQgd2l0aCBsaW1pdHMgb24gbW9zdCBzaXplcy4iIiINCg0KX19hbGxfXyA9IFsiUmVwciIsICJyZXByIiwgInJlY3Vyc2l2ZV9yZXByIl0NCg0KaW1wb3J0IGJ1aWx0aW5zDQpmcm9tIGl0ZXJ0b29scyBpbXBvcnQgaXNsaWNlDQp0cnk6DQogICAgZnJvbSBfdGhyZWFkIGltcG9ydCBnZXRfaWRlbnQNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBmcm9tIF9kdW1teV90aHJlYWQgaW1wb3J0IGdldF9pZGVudA0KDQpkZWYgcmVjdXJzaXZlX3JlcHIoZmlsbHZhbHVlPScuLi4nKToNCiAgICAnRGVjb3JhdG9yIHRvIG1ha2UgYSByZXByIGZ1bmN0aW9uIHJldHVybiBmaWxsdmFsdWUgZm9yIGEgcmVjdXJzaXZlIGNhbGwnDQoNCiAgICBkZWYgZGVjb3JhdGluZ19mdW5jdGlvbih1c2VyX2Z1bmN0aW9uKToNCiAgICAgICAgcmVwcl9ydW5uaW5nID0gc2V0KCkNCg0KICAgICAgICBkZWYgd3JhcHBlcihzZWxmKToNCiAgICAgICAgICAgIGtleSA9IGlkKHNlbGYpLCBnZXRfaWRlbnQoKQ0KICAgICAgICAgICAgaWYga2V5IGluIHJlcHJfcnVubmluZzoNCiAgICAgICAgICAgICAgICByZXR1cm4gZmlsbHZhbHVlDQogICAgICAgICAgICByZXByX3J1bm5pbmcuYWRkKGtleSkNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXN1bHQgPSB1c2VyX2Z1bmN0aW9uKHNlbGYpDQogICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgIHJlcHJfcnVubmluZy5kaXNjYXJkKGtleSkNCiAgICAgICAgICAgIHJldHVybiByZXN1bHQNCg0KICAgICAgICAjIENhbid0IHVzZSBmdW5jdG9vbHMud3JhcHMoKSBoZXJlIGJlY2F1c2Ugb2YgYm9vdHN0cmFwIGlzc3Vlcw0KICAgICAgICB3cmFwcGVyLl9fbW9kdWxlX18gPSBnZXRhdHRyKHVzZXJfZnVuY3Rpb24sICdfX21vZHVsZV9fJykNCiAgICAgICAgd3JhcHBlci5fX2RvY19fID0gZ2V0YXR0cih1c2VyX2Z1bmN0aW9uLCAnX19kb2NfXycpDQogICAgICAgIHdyYXBwZXIuX19uYW1lX18gPSBnZXRhdHRyKHVzZXJfZnVuY3Rpb24sICdfX25hbWVfXycpDQogICAgICAgIHdyYXBwZXIuX19hbm5vdGF0aW9uc19fID0gZ2V0YXR0cih1c2VyX2Z1bmN0aW9uLCAnX19hbm5vdGF0aW9uc19fJywge30pDQogICAgICAgIHJldHVybiB3cmFwcGVyDQoNCiAgICByZXR1cm4gZGVjb3JhdGluZ19mdW5jdGlvbg0KDQpjbGFzcyBSZXByOg0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLm1heGxldmVsID0gNg0KICAgICAgICBzZWxmLm1heHR1cGxlID0gNg0KICAgICAgICBzZWxmLm1heGxpc3QgPSA2DQogICAgICAgIHNlbGYubWF4YXJyYXkgPSA1DQogICAgICAgIHNlbGYubWF4ZGljdCA9IDQNCiAgICAgICAgc2VsZi5tYXhzZXQgPSA2DQogICAgICAgIHNlbGYubWF4ZnJvemVuc2V0ID0gNg0KICAgICAgICBzZWxmLm1heGRlcXVlID0gNg0KICAgICAgICBzZWxmLm1heHN0cmluZyA9IDMwDQogICAgICAgIHNlbGYubWF4bG9uZyA9IDQwDQogICAgICAgIHNlbGYubWF4b3RoZXIgPSAzMA0KDQogICAgZGVmIHJlcHIoc2VsZiwgeCk6DQogICAgICAgIHJldHVybiBzZWxmLnJlcHIxKHgsIHNlbGYubWF4bGV2ZWwpDQoNCiAgICBkZWYgcmVwcjEoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICB0eXBlbmFtZSA9IHR5cGUoeCkuX19uYW1lX18NCiAgICAgICAgaWYgJyAnIGluIHR5cGVuYW1lOg0KICAgICAgICAgICAgcGFydHMgPSB0eXBlbmFtZS5zcGxpdCgpDQogICAgICAgICAgICB0eXBlbmFtZSA9ICdfJy5qb2luKHBhcnRzKQ0KICAgICAgICBpZiBoYXNhdHRyKHNlbGYsICdyZXByXycgKyB0eXBlbmFtZSk6DQogICAgICAgICAgICByZXR1cm4gZ2V0YXR0cihzZWxmLCAncmVwcl8nICsgdHlwZW5hbWUpKHgsIGxldmVsKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVwcl9pbnN0YW5jZSh4LCBsZXZlbCkNCg0KICAgIGRlZiBfcmVwcl9pdGVyYWJsZShzZWxmLCB4LCBsZXZlbCwgbGVmdCwgcmlnaHQsIG1heGl0ZXIsIHRyYWlsPScnKToNCiAgICAgICAgbiA9IGxlbih4KQ0KICAgICAgICBpZiBsZXZlbCA8PSAwIGFuZCBuOg0KICAgICAgICAgICAgcyA9ICcuLi4nDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBuZXdsZXZlbCA9IGxldmVsIC0gMQ0KICAgICAgICAgICAgcmVwcjEgPSBzZWxmLnJlcHIxDQogICAgICAgICAgICBwaWVjZXMgPSBbcmVwcjEoZWxlbSwgbmV3bGV2ZWwpIGZvciBlbGVtIGluIGlzbGljZSh4LCBtYXhpdGVyKV0NCiAgICAgICAgICAgIGlmIG4gPiBtYXhpdGVyOiAgcGllY2VzLmFwcGVuZCgnLi4uJykNCiAgICAgICAgICAgIHMgPSAnLCAnLmpvaW4ocGllY2VzKQ0KICAgICAgICAgICAgaWYgbiA9PSAxIGFuZCB0cmFpbDogIHJpZ2h0ID0gdHJhaWwgKyByaWdodA0KICAgICAgICByZXR1cm4gJyVzJXMlcycgJSAobGVmdCwgcywgcmlnaHQpDQoNCiAgICBkZWYgcmVwcl90dXBsZShzZWxmLCB4LCBsZXZlbCk6DQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCAnKCcsICcpJywgc2VsZi5tYXh0dXBsZSwgJywnKQ0KDQogICAgZGVmIHJlcHJfbGlzdChzZWxmLCB4LCBsZXZlbCk6DQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCAnWycsICddJywgc2VsZi5tYXhsaXN0KQ0KDQogICAgZGVmIHJlcHJfYXJyYXkoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICBoZWFkZXIgPSAiYXJyYXkoJyVzJywgWyIgJSB4LnR5cGVjb2RlDQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCBoZWFkZXIsICddKScsIHNlbGYubWF4YXJyYXkpDQoNCiAgICBkZWYgcmVwcl9zZXQoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICB4ID0gX3Bvc3NpYmx5X3NvcnRlZCh4KQ0KICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgJ3NldChbJywgJ10pJywgc2VsZi5tYXhzZXQpDQoNCiAgICBkZWYgcmVwcl9mcm96ZW5zZXQoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICB4ID0gX3Bvc3NpYmx5X3NvcnRlZCh4KQ0KICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgJ2Zyb3plbnNldChbJywgJ10pJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5tYXhmcm96ZW5zZXQpDQoNCiAgICBkZWYgcmVwcl9kZXF1ZShzZWxmLCB4LCBsZXZlbCk6DQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCAnZGVxdWUoWycsICddKScsIHNlbGYubWF4ZGVxdWUpDQoNCiAgICBkZWYgcmVwcl9kaWN0KHNlbGYsIHgsIGxldmVsKToNCiAgICAgICAgbiA9IGxlbih4KQ0KICAgICAgICBpZiBuID09IDA6IHJldHVybiAne30nDQogICAgICAgIGlmIGxldmVsIDw9IDA6IHJldHVybiAney4uLn0nDQogICAgICAgIG5ld2xldmVsID0gbGV2ZWwgLSAxDQogICAgICAgIHJlcHIxID0gc2VsZi5yZXByMQ0KICAgICAgICBwaWVjZXMgPSBbXQ0KICAgICAgICBmb3Iga2V5IGluIGlzbGljZShfcG9zc2libHlfc29ydGVkKHgpLCBzZWxmLm1heGRpY3QpOg0KICAgICAgICAgICAga2V5cmVwciA9IHJlcHIxKGtleSwgbmV3bGV2ZWwpDQogICAgICAgICAgICB2YWxyZXByID0gcmVwcjEoeFtrZXldLCBuZXdsZXZlbCkNCiAgICAgICAgICAgIHBpZWNlcy5hcHBlbmQoJyVzOiAlcycgJSAoa2V5cmVwciwgdmFscmVwcikpDQogICAgICAgIGlmIG4gPiBzZWxmLm1heGRpY3Q6IHBpZWNlcy5hcHBlbmQoJy4uLicpDQogICAgICAgIHMgPSAnLCAnLmpvaW4ocGllY2VzKQ0KICAgICAgICByZXR1cm4gJ3slc30nICUgKHMsKQ0KDQogICAgZGVmIHJlcHJfc3RyKHNlbGYsIHgsIGxldmVsKToNCiAgICAgICAgcyA9IGJ1aWx0aW5zLnJlcHIoeFs6c2VsZi5tYXhzdHJpbmddKQ0KICAgICAgICBpZiBsZW4ocykgPiBzZWxmLm1heHN0cmluZzoNCiAgICAgICAgICAgIGkgPSBtYXgoMCwgKHNlbGYubWF4c3RyaW5nLTMpLy8yKQ0KICAgICAgICAgICAgaiA9IG1heCgwLCBzZWxmLm1heHN0cmluZy0zLWkpDQogICAgICAgICAgICBzID0gYnVpbHRpbnMucmVwcih4WzppXSArIHhbbGVuKHgpLWo6XSkNCiAgICAgICAgICAgIHMgPSBzWzppXSArICcuLi4nICsgc1tsZW4ocyktajpdDQogICAgICAgIHJldHVybiBzDQoNCiAgICBkZWYgcmVwcl9pbnQoc2VsZiwgeCwgbGV2ZWwpOg0KICAgICAgICBzID0gYnVpbHRpbnMucmVwcih4KSAjIFhYWCBIb3BlIHRoaXMgaXNuJ3QgdG9vIHNsb3cuLi4NCiAgICAgICAgaWYgbGVuKHMpID4gc2VsZi5tYXhsb25nOg0KICAgICAgICAgICAgaSA9IG1heCgwLCAoc2VsZi5tYXhsb25nLTMpLy8yKQ0KICAgICAgICAgICAgaiA9IG1heCgwLCBzZWxmLm1heGxvbmctMy1pKQ0KICAgICAgICAgICAgcyA9IHNbOmldICsgJy4uLicgKyBzW2xlbihzKS1qOl0NCiAgICAgICAgcmV0dXJuIHMNCg0KICAgIGRlZiByZXByX2luc3RhbmNlKHNlbGYsIHgsIGxldmVsKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcyA9IGJ1aWx0aW5zLnJlcHIoeCkNCiAgICAgICAgICAgICMgQnVncyBpbiB4Ll9fcmVwcl9fKCkgY2FuIGNhdXNlIGFyYml0cmFyeQ0KICAgICAgICAgICAgIyBleGNlcHRpb25zIC0tIHRoZW4gbWFrZSB1cCBzb21ldGhpbmcNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoNCiAgICAgICAgICAgIHJldHVybiAnPCVzIGluc3RhbmNlIGF0ICV4PicgJSAoeC5fX2NsYXNzX18uX19uYW1lX18sIGlkKHgpKQ0KICAgICAgICBpZiBsZW4ocykgPiBzZWxmLm1heG90aGVyOg0KICAgICAgICAgICAgaSA9IG1heCgwLCAoc2VsZi5tYXhvdGhlci0zKS8vMikNCiAgICAgICAgICAgIGogPSBtYXgoMCwgc2VsZi5tYXhvdGhlci0zLWkpDQogICAgICAgICAgICBzID0gc1s6aV0gKyAnLi4uJyArIHNbbGVuKHMpLWo6XQ0KICAgICAgICByZXR1cm4gcw0KDQoNCmRlZiBfcG9zc2libHlfc29ydGVkKHgpOg0KICAgICMgU2luY2Ugbm90IGFsbCBzZXF1ZW5jZXMgb2YgaXRlbXMgY2FuIGJlIHNvcnRlZCBhbmQgY29tcGFyaXNvbg0KICAgICMgZnVuY3Rpb25zIG1heSByYWlzZSBhcmJpdHJhcnkgZXhjZXB0aW9ucywgcmV0dXJuIGFuIHVuc29ydGVkDQogICAgIyBzZXF1ZW5jZSBpbiB0aGF0IGNhc2UuDQogICAgdHJ5Og0KICAgICAgICByZXR1cm4gc29ydGVkKHgpDQogICAgZXhjZXB0IEV4Y2VwdGlvbjoNCiAgICAgICAgcmV0dXJuIGxpc3QoeCkNCg0KYVJlcHIgPSBSZXByKCkNCnJlcHIgPSBhUmVwci5yZXByDQo=',
'/Lib/operator.py':'',
'/Lib/sys.py':'IyBoYWNrIHRvIHJldHVybiBzcGVjaWFsIGF0dHJpYnV0ZXMKZnJvbSBfc3lzIGltcG9ydCAqCmZyb20gamF2YXNjcmlwdCBpbXBvcnQgSlNPYmplY3QKCmZyb20gYnJvd3NlciBpbXBvcnQgZG9jCl9fc3Rkb3V0X189Z2V0YXR0cihkb2MsIiRzdGRvdXQiKQpfX3N0ZGVycl9fPWdldGF0dHIoZG9jLCIkc3RkZXJyIikKCnN0ZG91dCA9IGdldGF0dHIoZG9jLCIkc3Rkb3V0IikKc3RkZXJyID0gZ2V0YXR0cihkb2MsIiRzdGRlcnIiKQoKCmhhc19sb2NhbF9zdG9yYWdlPV9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlCmhhc19qc29uPV9fQlJZVEhPTl9fLmhhc19qc29uCgphcmd2ID0gWydfX21haW5fXyddCgpiYXNlX2V4ZWNfcHJlZml4ID0gX19CUllUSE9OX18uYnJ5dGhvbl9wYXRoCgpiYXNlX3ByZWZpeCA9IF9fQlJZVEhPTl9fLmJyeXRob25fcGF0aAoKYnVpbHRpbl9tb2R1bGVfbmFtZXM9X19CUllUSE9OX18uYnVpbHRpbl9tb2R1bGVfbmFtZXMKCmJ5dGVvcmRlcj0nbGl0dGxlJwoKZGVmIGV4Y19pbmZvKCk6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICByZXR1cm4gKGV4Yy5fX2NsYXNzX18sZXhjLE5vbmUpCiAgICAKZXhlY19wcmVmaXggPSBfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgKCmV4ZWN1dGFibGUgPSBfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJy9icnl0aG9uLmpzJwoKZGVmIGV4aXQoaT1Ob25lKToKICAgIHJhaXNlIFN5c3RlbUV4aXQoJycpCgpjbGFzcyBmbGFnX2NsYXNzOgogIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgc2VsZi5kZWJ1Zz0wCiAgICAgIHNlbGYuaW5zcGVjdD0wCiAgICAgIHNlbGYuaW50ZXJhY3RpdmU9MAogICAgICBzZWxmLm9wdGltaXplPTAKICAgICAgc2VsZi5kb250X3dyaXRlX2J5dGVjb2RlPTAKICAgICAgc2VsZi5ub191c2VyX3NpdGU9MAogICAgICBzZWxmLm5vX3NpdGU9MAogICAgICBzZWxmLmlnbm9yZV9lbnZpcm9ubWVudD0wCiAgICAgIHNlbGYudmVyYm9zZT0wCiAgICAgIHNlbGYuYnl0ZXNfd2FybmluZz0wCiAgICAgIHNlbGYucXVpZXQ9MAogICAgICBzZWxmLmhhc2hfcmFuZG9taXphdGlvbj0xCgpmbGFncz1mbGFnX2NsYXNzKCkKCmRlZiBnZXRmaWxlc3lzdGVtZW5jb2RpbmcoKmFyZ3MsKiprdyk6CiAgICAiIiJnZXRmaWxlc3lzdGVtZW5jb2RpbmcoKSAtPiBzdHJpbmcgICAgCiAgICBSZXR1cm4gdGhlIGVuY29kaW5nIHVzZWQgdG8gY29udmVydCBVbmljb2RlIGZpbGVuYW1lcyBpbgogICAgb3BlcmF0aW5nIHN5c3RlbSBmaWxlbmFtZXMuIiIiCiAgICByZXR1cm4gJ3V0Zi04JwogICAgCm1heHNpemU9OTAwNzE5OTI1NDc0MDk5MiAgICNsYXJnZXN0IGludGVnZXIuLgoKbWF4aW50PTkwMDcxOTkyNTQ3NDA5OTIgICAjbGFyZ2VzdCBpbnRlZ2VyLi4KCm1heHVuaWNvZGU9MTExNDExMQoKcGF0aCA9IF9fQlJZVEhPTl9fLnBhdGgKCnBhdGhfaG9va3MgPSBsaXN0KEpTT2JqZWN0KF9fQlJZVEhPTl9fLnBhdGhfaG9va3MpKQoKcGxhdGZvcm09ImJyeXRob24iCgpwcmVmaXggPSBfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgKCnZlcnNpb24gPSAnLicuam9pbihzdHIoeCkgZm9yIHggaW4gX19CUllUSE9OX18udmVyc2lvbl9pbmZvKQpoZXh2ZXJzaW9uID0gMHgwMzAwMDAwMCAgICMgcHl0aG9uIDMuMAoKY2xhc3MgX192ZXJzaW9uX2luZm8ob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB2ZXJzaW9uX2luZm8pOgogICAgICAgIHNlbGYudmVyc2lvbl9pbmZvID0gdmVyc2lvbl9pbmZvCiAgICAgICAgc2VsZi5tYWpvciA9IHZlcnNpb25faW5mb1swXQogICAgICAgIHNlbGYubWlub3IgPSB2ZXJzaW9uX2luZm9bMV0KICAgICAgICBzZWxmLm1pY3JvID0gdmVyc2lvbl9pbmZvWzJdCiAgICAgICAgc2VsZi5yZWxlYXNlbGV2ZWwgPSB2ZXJzaW9uX2luZm9bM10KICAgICAgICBzZWxmLnNlcmlhbCA9IHZlcnNpb25faW5mb1s0XQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBpbmRleCk6CiAgICAgICAgcmV0dXJuIHNlbGYudmVyc2lvbl9pbmZvW2luZGV4XQoKICAgIGRlZiBfX3N0cl9fKHNlbGYpOgogICAgICAgIHJldHVybiBzdHIoc2VsZi52ZXJzaW9uX2luZm8pCiAgICAgCnZlcnNpb25faW5mbz1fX3ZlcnNpb25faW5mbyhfX0JSWVRIT05fXy52ZXJzaW9uX2luZm8pCgp3YXJub3B0aW9ucz1bXQoK',
'/Lib/io.py':'aW1wb3J0IGJ1aWx0aW5zCgpvcGVuID0gYnVpbHRpbnMub3BlbgoKIyBmb3Igc2VlaygpClNFRUtfU0VUID0gMApTRUVLX0NVUiA9IDEKU0VFS19FTkQgPSAyCgpjbGFzcyBTdHJpbmdJTzoKCiAgICBkZWYgX19pbml0X18oc2VsZixpbml0aWFsX3ZhbHVlPScnLG5ld2xpbmU9Tm9uZSk6CiAgICAgICAgc2VsZi52YWx1ZSA9IGluaXRpYWxfdmFsdWUKICAgICAgICBzZWxmLm5ld2xpbmUgPSBuZXdsaW5lCiAgICAgICAgc2VsZi5fcG9zID0gbGVuKGluaXRpYWxfdmFsdWUpCiAgICAKICAgIGRlZiB3cml0ZShzZWxmLGRhdGEpOgogICAgICAgIHNlbGYudmFsdWUgKz0gZGF0YQogICAgCiAgICBkZWYgcmVhZChzZWxmLG5iPS0xKToKICAgICAgICBpZiBuYiE9LTE6CiAgICAgICAgICAgIHJlcyA9IHNlbGYudmFsdWVbc2VsZi5fcG9zOnNlbGYuX3BvcytuYl0KICAgICAgICAgICAgc2VsZi5fcG9zID0gbWluKHNlbGYuX3BvcytuYixsZW4oc2VsZi52YWx1ZSktMSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXMgPSBzZWxmLnZhbHVlW3NlbGYuX3BvczpdCiAgICAgICAgICAgIHNlbGYuX3BvcyA9IGxlbihzZWxmLnZhbHVlKS0xCiAgICAgICAgcmV0dXJuIHJlcwoKVGV4dElPV3JhcHBlciA9IFN0cmluZ0lPCgpjbGFzcyBSYXdJT0Jhc2U6CgogICAgZGVmIHJlYWQoc2VsZixuPS0xKToKICAgICAgICBwYXNzCiAgICBkZWYgcmVhZGFsbChzZWxmKToKICAgICAgICBwYXNzCiAgICBkZWYgcmVhZGludG8oc2VsZixiKToKICAgICAgICBwYXNzCiAgICBkZWYgd3JpdGUoc2VsZixiKToKICAgICAgICBwYXNzCgpCdWZmZXJlZFJlYWRlciA9IFJhd0lPQmFzZQo=',
'/Lib/os.py':'',
'/Lib/browser/markdown.py':'',
'/Lib/browser/timer.py':'ZnJvbSBfdGltZXIgaW1wb3J0ICo=',
'/Lib/browser/svg.py':'ZnJvbSBfc3ZnIGltcG9ydCAq',
'/Lib/browser/slideshow.py':'ZnJvbSBicm93c2VyIGltcG9ydCBkb2MsbWFya2Rvd24saHRtbAoKZGVmIGtleWRvd24oZXYscGF0aCx6b25lLHBhZ2UpOgogICAgaWYgZXYua2V5Q29kZSBpbiBbMzksNDBdOiAjIGtleSByaWdodCBvciBkb3duIDogbmV4dCBwYWdlCiAgICAgICAgc2hvdyhwYXRoLHpvbmUscGFnZSsxKQogICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCkgICAgCiAgICBlbGlmIGV2LmtleUNvZGUgaW4gWzM3LDM4XTogI2tleSBsZWZ0IG9yIHVwOiBwcmV2aW91cyBwYWdlCiAgICAgICAgc2hvdyhwYXRoLHpvbmUscGFnZS0xKQogICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCkKCmRlZiBtb3ZlX3RvKGV2LHBhdGgsem9uZSxuYl9wYWdlcyk6CiAgICBwYyA9IChldi54LWV2LnRhcmdldC5sZWZ0KS9ldi50YXJnZXQud2lkdGgKICAgIHBhZ2UgPSByb3VuZChuYl9wYWdlcypwYykKICAgIG5ld19wb3MgPSAnJXNweCcgJShldi54LWV2LnRhcmdldC5sZWZ0LShkb2NbJ3RsX3BvcyddLndpZHRoLzIpKQogICAgIyBzaG93IHBhZ2UgYXQgc3BlY2lmaWVkIHBvc2l0aW9uCiAgICBzaG93KHBhdGgsem9uZSxwYWdlKQogICAgIyBzZXQgbmV3IGN1cnNvciBwb3NpdGlvbgogICAgZG9jWyd0bF9wb3MnXS5zdHlsZS5sZWZ0ID0gbmV3X3BvcwoKZGVmIGNsaWNrX29uX3RsX3Bvcyhldik6CiAgICAjIGRvbid0IG1vdmUgaWYgdXNlciBjbGlja3Mgb24gY3VycmVudCB0aW1lbGluZSBwb3NpdGlvbgogICAgZXYuc3RvcFByb3BhZ2F0aW9uKCkKCmRlZiBzaG93KHBhdGgsem9uZSxwYWdlPTApOgogICAgc3JjID0gb3BlbihwYXRoKS5yZWFkKCkKICAgIHRpdGxlID0gJycKICAgIHBhZ2VfbnVtID0gRmFsc2UKICAgIHdoaWxlIHNyYy5zdGFydHN3aXRoKCdAJyk6CiAgICAgICAgbGluZV9lbmQgPSBzcmMuZmluZCgnXG4nKQogICAgICAgIGtleSx2YWx1ZSA9IHNyY1s6bGluZV9lbmRdLnNwbGl0KCcgJywxKQogICAgICAgIGlmIGtleT09J0B0aXRsZSc6CiAgICAgICAgICAgIHRpdGxlID0gdmFsdWUKICAgICAgICBlbGlmIGtleT09J0BwYWdlbnVtJzoKICAgICAgICAgICAgcGFnZV9udW0gPSBUcnVlCiAgICAgICAgc3JjID0gc3JjW2xpbmVfZW5kKzE6XQoKICAgIHpvbmUuaHRtbCA9ICcnCiAgICBwYWdlcyA9IHNyYy5zcGxpdCgnLi4vLi5cbicpCiAgICBpZiBwYWdlPDA6CiAgICAgICAgcGFnZSA9IDAKICAgIGVsaWYgcGFnZSA+PSBsZW4ocGFnZXMpOgogICAgICAgIHBhZ2UgPSBsZW4ocGFnZXMpLTEKICAgIGRvYy51bmJpbmQoJ2tleWRvd24nKQogICAgZG9jLmJpbmQoJ2tleWRvd24nLGxhbWJkYSBldjprZXlkb3duKGV2LHBhdGgsem9uZSxwYWdlKSkKICAgIGJvZHkgPSBodG1sLkRJVigpCiAgICBib2R5Lmh0bWwgPSBtYXJrZG93bi5tYXJrKHBhZ2VzW3BhZ2VdKVswXQoKICAgIGZvb3RlciA9IGh0bWwuRElWKElkPSJmb290ZXIiKQogICAgaWYgdGl0bGU6CiAgICAgICAgZm9vdGVyIDw9IGh0bWwuRElWKHRpdGxlLHN0eWxlPWRpY3QoZGlzcGxheT0naW5saW5lJykpCiAgICBpZiBwYWdlX251bToKICAgICAgICBmb290ZXIgPD0gaHRtbC5TUEFOKCcgKCVzLyVzKScgJShwYWdlKzEsbGVuKHBhZ2VzKSksCiAgICAgICAgICAgIHN0eWxlPWRpY3QoZGlzcGxheT0naW5saW5lJykpCiAgICB0aW1lbGluZSA9IGh0bWwuRElWKElkPSd0aW1lbGluZScpCiAgICB0bF9wb3MgPSBodG1sLkRJVihJZD0ndGxfcG9zJykKICAgIHRpbWVsaW5lIDw9IHRsX3BvcwogICAgdGltZWxpbmUuYmluZCgnY2xpY2snLGxhbWJkYSBldjptb3ZlX3RvKGV2LHBhdGgsem9uZSxsZW4ocGFnZXMpKSkKICAgIHRsX3Bvcy5iaW5kKCdjbGljaycsY2xpY2tfb25fdGxfcG9zKQogICAgem9uZSA8PSBib2R5K2Zvb3Rlcit0aW1lbGluZQogICAgdGxfcG9zLnN0eWxlLmxlZnQgPSAnJXNweCcgJSh0aW1lbGluZS53aWR0aCpwYWdlL2xlbihwYWdlcykpCgo=',
'/Lib/browser/websocket.py':'ZnJvbSBfd2Vic29ja2V0IGltcG9ydCAq',
'/Lib/browser/local_storage.py':'IyBsb2NhbCBzdG9yYWdlIGluIGJyb3dzZXIKCmNsYXNzIExvY2FsU3RvcmFnZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgaWYgbm90IF9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlOgogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2xvY2FsIHN0b3JhZ2UgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcicpCiAgICAgICAgc2VsZi5zdG9yZSA9IF9fQlJZVEhPTl9fLmxvY2FsX3N0b3JhZ2UoKQogICAgICAgIAogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsa2V5KToKICAgICAgICBzZWxmLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiByZXMKICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsa2V5LHZhbHVlKToKICAgICAgICBzZWxmLnN0b3JlLnNldEl0ZW0oa2V5LHZhbHVlKQoKICAgICNpbXBsZW1lbnQgImluIiBmdW5jdGlvbmFsaXR5CiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBrZXlzKHNlbGYpOgogICAgICAgIHJldHVybiBsaXN0KHNlbGYuc3RvcmUpCgogICAgZGVmIHZhbHVlcyhzZWxmKToKICAgICAgICByZXR1cm4gW3NlbGYuX19nZXRpdGVtX18oaykgZm9yIGsgaW4gc2VsZi5rZXlzKCldCgogICAgZGVmIGl0ZW1zKHNlbGYpOgogICAgICAgIHJldHVybiB6aXAoc2VsZi5rZXlzKCksc2VsZi52YWx1ZXMoKSkKCnN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2UoKQoK',
'/Lib/browser/indexed_db.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBJbmRleGVkREI6CiAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICBpZiBub3QgX19CUllUSE9OX18uaGFzX2luZGV4ZWREQjoKICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJOb3RJbXBsZW1lbnRlZEVycm9yIiwgIllvdXIgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgaW5kZXhlZERCIikKICAgICAgICAgcmV0dXJuCgogICAgICBzZWxmLl9pbmRleGVkREI9X19CUllUSE9OX18uaW5kZXhlZERCKCkKICAgICAgc2VsZi5fZGI9Tm9uZQogICAgICBzZWxmLl92ZXJzaW9uPU5vbmUKCiAgZGVmIF9vbnN1Y2Nlc3Moc2VsZiwgZXZlbnQpOgogICAgICBzZWxmLl9kYj1ldmVudC50YXJnZXQucmVzdWx0CgogIGRlZiBvcGVuKHNlbGYsIG5hbWUsIG9uc3VjY2VzcywgdmVyc2lvbj0xLjAsIG9uZXJyb3I9Tm9uZSwgCiAgICAgICAgICAgb251cGdyYWRlbmVlZGVkPU5vbmUpOgogICAgICBzZWxmLl92ZXJzaW9uPXZlcnNpb24KICAgICAgX3Jlc3VsdD1zZWxmLl9pbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKQogICAgICBfc3VjY2Vzcz1FdmVudExpc3RlbmVyKFtzZWxmLl9vbnN1Y2Nlc3MsIG9uc3VjY2Vzc10pCiAgICAgIF9yZXN1bHQub25zdWNjZXNzPV9zdWNjZXNzLmZpcmUKICAgICAgX3Jlc3VsdC5vbnVwZ3JhZGVuZWVkZWQ9b251cGdyYWRlbmVlZGVkCgogICAgICAjaWYgb25lcnJvciBpcyBOb25lOgogICAgICBkZWYgb25lcnJvcihlKToKICAgICAgICAgIHByaW50KCJvbmVycm9yOiAlczolcyIgJSAgKGUudHlwZSwgZS50YXJnZXQucmVzdWx0KSkKCiAgICAgIGRlZiBvbmJsb2NrZWQoZSk6CiAgICAgICAgICBwcmludCgiYmxvY2tlZDogJXM6JXMiICUgIChlLnR5cGUsIGUucmVzdWx0KSkKCiAgICAgIF9yZXN1bHQub25lcnJvcj1vbmVycm9yCiAgICAgIF9yZXN1bHQub25ibG9ja2VkPW9uYmxvY2tlZAoKICBkZWYgdHJhbnNhY3Rpb24oc2VsZiwgZW50aXRpZXMsIG1vZGU9J3JlYWQnKToKICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uKHNlbGYuX2RiLnRyYW5zYWN0aW9uKGVudGl0aWVzLCBtb2RlKSkKCmNsYXNzIFRyYW5zYWN0aW9uOgogIGRlZiBfX2luaXRfXyhzZWxmLCB0cmFuc2FjdGlvbik6CiAgICAgIHNlbGYuX3RyYW5zYWN0aW9uPXRyYW5zYWN0aW9uCgogIGRlZiBvYmplY3RTdG9yZShzZWxmLCBuYW1lKToKICAgICAgcmV0dXJuIE9iamVjdFN0b3JlKHNlbGYuX3RyYW5zYWN0aW9uLm9iamVjdFN0b3JlKG5hbWUpKQoKY2xhc3MgT2JqZWN0U3RvcmU6CiAgZGVmIF9faW5pdF9fKHNlbGYsIG9iamVjdFN0b3JlKToKICAgICAgc2VsZi5fb2JqZWN0U3RvcmU9b2JqZWN0U3RvcmUKICAgICAgc2VsZi5fZGF0YT1bXQoKICBkZWYgY2xlYXIoc2VsZiwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9c2VsZi5fb2JqZWN0U3RvcmUuY2xlYXIoKQoKICAgICAgaWYgb25zdWNjZXNzIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgICAgIGlmIG9uZXJyb3IgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25lcnJvcj1vbmVycm9yCgogIGRlZiBfaGVscGVyKHNlbGYsIGZ1bmMsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9ZnVuYyhvYmplY3QpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIHB1dChzZWxmLCBvYmplY3QsIGtleT1Ob25lLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3I9c2VsZi5fb2JqZWN0U3RvcmUucHV0KG9iamVjdCwga2V5KQogICAgICBfci5vbnN1Y2Nlc3M9b25zdWNjZXNzCiAgICAgIF9yLm9uZXJyb3I9b25lcnJvcgoKICBkZWYgYWRkKHNlbGYsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5hZGQsIG9iamVjdCwgb25zdWNjZXNzLCBvbmVycm9yKQoKICBkZWYgZGVsZXRlKHNlbGYsIGluZGV4LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKTogCiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5kZWxldGUsIGluZGV4LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCiAgICAgCiAgZGVmIHF1ZXJ5KHNlbGYsICphcmdzKToKICAgICAgc2VsZi5fZGF0YT1bXQogICAgICBkZWYgb25zdWNjZXNzKGV2ZW50KToKICAgICAgICAgIGN1cnNvcj1ldmVudC50YXJnZXQucmVzdWx0CiAgICAgICAgICBpZiBjdXJzb3IgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICBzZWxmLl9kYXRhLmFwcGVuZChjdXJzb3IudmFsdWUpCiAgICAgICAgICAgICBjdXJzb3IuY29udGludWUoKQoKICAgICAgc2VsZi5fb2JqZWN0U3RvcmUub3BlbkN1cnNvcihhcmdzKS5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogIGRlZiBmZXRjaGFsbChzZWxmKToKICAgICAgeWllbGQgc2VsZi5fZGF0YQoKICBkZWYgZ2V0KHNlbGYsIGtleSwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5nZXQsIGtleSwgb25zdWNjZXNzLCBvbmVycm9yKQo=',
'/Lib/browser/__init__.py':'ZnJvbSBfYnJvd3NlciBpbXBvcnQgKgo=',
'/Lib/browser/ajax.py':'ZnJvbSBfYWpheCBpbXBvcnQgKg==',
'/Lib/browser/html.py':'ZnJvbSBfaHRtbCBpbXBvcnQgKg==',
'/Lib/browser/pydom.py':'',
'/Lib/unittest/mock.py':'IyBtb2NrLnB5DQojIFRlc3QgdG9vbHMgZm9yIG1vY2tpbmcgYW5kIHBhdGNoaW5nLg0KIyBNYWludGFpbmVkIGJ5IE1pY2hhZWwgRm9vcmQNCiMgQmFja3BvcnQgZm9yIG90aGVyIHZlcnNpb25zIG9mIFB5dGhvbiBhdmFpbGFibGUgZnJvbQ0KIyBodHRwOi8vcHlwaS5weXRob24ub3JnL3B5cGkvbW9jaw0KDQpfX2FsbF9fID0gKA0KICAgICdNb2NrJywNCiAgICAnTWFnaWNNb2NrJywNCiAgICAncGF0Y2gnLA0KICAgICdzZW50aW5lbCcsDQogICAgJ0RFRkFVTFQnLA0KICAgICdBTlknLA0KICAgICdjYWxsJywNCiAgICAnY3JlYXRlX2F1dG9zcGVjJywNCiAgICAnRklMVEVSX0RJUicsDQogICAgJ05vbkNhbGxhYmxlTW9jaycsDQogICAgJ05vbkNhbGxhYmxlTWFnaWNNb2NrJywNCiAgICAnbW9ja19vcGVuJywNCiAgICAnUHJvcGVydHlNb2NrJywNCikNCg0KDQpfX3ZlcnNpb25fXyA9ICcxLjAnDQoNCg0KaW1wb3J0IGluc3BlY3QNCmltcG9ydCBwcHJpbnQNCmltcG9ydCBzeXMNCmZyb20gZnVuY3Rvb2xzIGltcG9ydCB3cmFwcw0KDQoNCkJhc2VFeGNlcHRpb25zID0gKEJhc2VFeGNlcHRpb24sKQ0KaWYgJ2phdmEnIGluIHN5cy5wbGF0Zm9ybToNCiAgICAjIGp5dGhvbg0KICAgIGltcG9ydCBqYXZhDQogICAgQmFzZUV4Y2VwdGlvbnMgPSAoQmFzZUV4Y2VwdGlvbiwgamF2YS5sYW5nLlRocm93YWJsZSkNCg0KDQpGSUxURVJfRElSID0gVHJ1ZQ0KDQojIFdvcmthcm91bmQgZm9yIGlzc3VlICMxMjM3MA0KIyBXaXRob3V0IHRoaXMsIHRoZSBfX2NsYXNzX18gcHJvcGVydGllcyB3b3VsZG4ndCBiZSBzZXQgY29ycmVjdGx5DQpfc2FmZV9zdXBlciA9IHN1cGVyDQoNCmRlZiBfaXNfaW5zdGFuY2VfbW9jayhvYmopOg0KICAgICMgY2FuJ3QgdXNlIGlzaW5zdGFuY2Ugb24gTW9jayBvYmplY3RzIGJlY2F1c2UgdGhleSBvdmVycmlkZSBfX2NsYXNzX18NCiAgICAjIFRoZSBiYXNlIGNsYXNzIGZvciBhbGwgbW9ja3MgaXMgTm9uQ2FsbGFibGVNb2NrDQogICAgcmV0dXJuIGlzc3ViY2xhc3ModHlwZShvYmopLCBOb25DYWxsYWJsZU1vY2spDQoNCg0KZGVmIF9pc19leGNlcHRpb24ob2JqKToNCiAgICByZXR1cm4gKA0KICAgICAgICBpc2luc3RhbmNlKG9iaiwgQmFzZUV4Y2VwdGlvbnMpIG9yDQogICAgICAgIGlzaW5zdGFuY2Uob2JqLCB0eXBlKSBhbmQgaXNzdWJjbGFzcyhvYmosIEJhc2VFeGNlcHRpb25zKQ0KICAgICkNCg0KDQpjbGFzcyBfc2xvdHRlZChvYmplY3QpOg0KICAgIF9fc2xvdHNfXyA9IFsnYSddDQoNCg0KRGVzY3JpcHRvclR5cGVzID0gKA0KICAgIHR5cGUoX3Nsb3R0ZWQuYSksDQogICAgcHJvcGVydHksDQopDQoNCg0KZGVmIF9nZXRzaWduYXR1cmUoZnVuYywgc2tpcGZpcnN0LCBpbnN0YW5jZT1GYWxzZSk6DQogICAgaWYgaXNpbnN0YW5jZShmdW5jLCB0eXBlKSBhbmQgbm90IGluc3RhbmNlOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBmdW5jID0gZnVuYy5fX2luaXRfXw0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgc2tpcGZpcnN0ID0gVHJ1ZQ0KICAgIGVsaWYgbm90IGlzaW5zdGFuY2UoZnVuYywgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICMgZm9yIGNsYXNzZXMgd2hlcmUgaW5zdGFuY2UgaXMgVHJ1ZSB3ZSBlbmQgdXAgaGVyZSB0b28NCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZnVuYyA9IGZ1bmMuX19jYWxsX18NCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOg0KICAgICAgICAgICAgcmV0dXJuDQoNCiAgICB0cnk6DQogICAgICAgIGFyZ3NwZWMgPSBpbnNwZWN0LmdldGZ1bGxhcmdzcGVjKGZ1bmMpDQogICAgZXhjZXB0IFR5cGVFcnJvcjoNCiAgICAgICAgIyBDIGZ1bmN0aW9uIC8gbWV0aG9kLCBwb3NzaWJseSBpbmhlcml0ZWQgb2JqZWN0KCkuX19pbml0X18NCiAgICAgICAgcmV0dXJuDQoNCiAgICByZWdhcmdzLCB2YXJhcmdzLCB2YXJrdywgZGVmYXVsdHMsIGt3b25seSwga3dvbmx5ZGVmLCBhbm4gPSBhcmdzcGVjDQoNCg0KICAgICMgaW5zdGFuY2UgbWV0aG9kcyBhbmQgY2xhc3NtZXRob2RzIG5lZWQgdG8gbG9zZSB0aGUgc2VsZiBhcmd1bWVudA0KICAgIGlmIGdldGF0dHIoZnVuYywgJ19fc2VsZl9fJywgTm9uZSkgaXMgbm90IE5vbmU6DQogICAgICAgIHJlZ2FyZ3MgPSByZWdhcmdzWzE6XQ0KICAgIGlmIHNraXBmaXJzdDoNCiAgICAgICAgIyB0aGlzIGNvbmRpdGlvbiBhbmQgdGhlIGFib3ZlIG9uZSBhcmUgbmV2ZXIgYm90aCBUcnVlIC0gd2h5Pw0KICAgICAgICByZWdhcmdzID0gcmVnYXJnc1sxOl0NCg0KICAgIHNpZ25hdHVyZSA9IGluc3BlY3QuZm9ybWF0YXJnc3BlYygNCiAgICAgICAgcmVnYXJncywgdmFyYXJncywgdmFya3csIGRlZmF1bHRzLA0KICAgICAgICBrd29ubHksIGt3b25seWRlZiwgYW5uLCBmb3JtYXR2YWx1ZT1sYW1iZGEgdmFsdWU6ICIiKQ0KICAgIHJldHVybiBzaWduYXR1cmVbMTotMV0sIGZ1bmMNCg0KDQpkZWYgX2NoZWNrX3NpZ25hdHVyZShmdW5jLCBtb2NrLCBza2lwZmlyc3QsIGluc3RhbmNlPUZhbHNlKToNCiAgICBpZiBub3QgX2NhbGxhYmxlKGZ1bmMpOg0KICAgICAgICByZXR1cm4NCg0KICAgIHJlc3VsdCA9IF9nZXRzaWduYXR1cmUoZnVuYywgc2tpcGZpcnN0LCBpbnN0YW5jZSkNCiAgICBpZiByZXN1bHQgaXMgTm9uZToNCiAgICAgICAgcmV0dXJuDQogICAgc2lnbmF0dXJlLCBmdW5jID0gcmVzdWx0DQoNCiAgICAjIGNhbid0IHVzZSBzZWxmIGJlY2F1c2UgInNlbGYiIGlzIGNvbW1vbiBhcyBhbiBhcmd1bWVudCBuYW1lDQogICAgIyB1bmZvcnR1bmF0ZWx5IGV2ZW4gbm90IGluIHRoZSBmaXJzdCBwbGFjZQ0KICAgIHNyYyA9ICJsYW1iZGEgX21vY2tfc2VsZiwgJXM6IE5vbmUiICUgc2lnbmF0dXJlDQogICAgY2hlY2tzaWcgPSBldmFsKHNyYywge30pDQogICAgX2NvcHlfZnVuY19kZXRhaWxzKGZ1bmMsIGNoZWNrc2lnKQ0KICAgIHR5cGUobW9jaykuX21vY2tfY2hlY2tfc2lnID0gY2hlY2tzaWcNCg0KDQpkZWYgX2NvcHlfZnVuY19kZXRhaWxzKGZ1bmMsIGZ1bmNvcHkpOg0KICAgIGZ1bmNvcHkuX19uYW1lX18gPSBmdW5jLl9fbmFtZV9fDQogICAgZnVuY29weS5fX2RvY19fID0gZnVuYy5fX2RvY19fDQogICAgIyB3ZSBleHBsaWNpdGx5IGRvbid0IGNvcHkgZnVuYy5fX2RpY3RfXyBpbnRvIHRoaXMgY29weSBhcyBpdCB3b3VsZA0KICAgICMgZXhwb3NlIG9yaWdpbmFsIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgbW9ja2VkDQogICAgZnVuY29weS5fX21vZHVsZV9fID0gZnVuYy5fX21vZHVsZV9fDQogICAgZnVuY29weS5fX2RlZmF1bHRzX18gPSBmdW5jLl9fZGVmYXVsdHNfXw0KICAgIGZ1bmNvcHkuX19rd2RlZmF1bHRzX18gPSBmdW5jLl9fa3dkZWZhdWx0c19fDQoNCg0KZGVmIF9jYWxsYWJsZShvYmopOg0KICAgIGlmIGlzaW5zdGFuY2Uob2JqLCB0eXBlKToNCiAgICAgICAgcmV0dXJuIFRydWUNCiAgICBpZiBnZXRhdHRyKG9iaiwgJ19fY2FsbF9fJywgTm9uZSkgaXMgbm90IE5vbmU6DQogICAgICAgIHJldHVybiBUcnVlDQogICAgcmV0dXJuIEZhbHNlDQoNCg0KZGVmIF9pc19saXN0KG9iaik6DQogICAgIyBjaGVja3MgZm9yIGxpc3Qgb3IgdHVwbGVzDQogICAgIyBYWFhYIGJhZGx5IG5hbWVkIQ0KICAgIHJldHVybiB0eXBlKG9iaikgaW4gKGxpc3QsIHR1cGxlKQ0KDQoNCmRlZiBfaW5zdGFuY2VfY2FsbGFibGUob2JqKToNCiAgICAiIiJHaXZlbiBhbiBvYmplY3QsIHJldHVybiBUcnVlIGlmIHRoZSBvYmplY3QgaXMgY2FsbGFibGUuDQogICAgRm9yIGNsYXNzZXMsIHJldHVybiBUcnVlIGlmIGluc3RhbmNlcyB3b3VsZCBiZSBjYWxsYWJsZS4iIiINCiAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIHR5cGUpOg0KICAgICAgICAjIGFscmVhZHkgYW4gaW5zdGFuY2UNCiAgICAgICAgcmV0dXJuIGdldGF0dHIob2JqLCAnX19jYWxsX18nLCBOb25lKSBpcyBub3QgTm9uZQ0KDQogICAgIyAqY291bGQqIGJlIGJyb2tlbiBieSBhIGNsYXNzIG92ZXJyaWRpbmcgX19tcm9fXyBvciBfX2RpY3RfXyB2aWENCiAgICAjIGEgbWV0YWNsYXNzDQogICAgZm9yIGJhc2UgaW4gKG9iaiwpICsgb2JqLl9fbXJvX186DQogICAgICAgIGlmIGJhc2UuX19kaWN0X18uZ2V0KCdfX2NhbGxfXycpIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICByZXR1cm4gRmFsc2UNCg0KDQpkZWYgX3NldF9zaWduYXR1cmUobW9jaywgb3JpZ2luYWwsIGluc3RhbmNlPUZhbHNlKToNCiAgICAjIGNyZWF0ZXMgYSBmdW5jdGlvbiB3aXRoIHNpZ25hdHVyZSAoKmFyZ3MsICoqa3dhcmdzKSB0aGF0IGRlbGVnYXRlcyB0byBhDQogICAgIyBtb2NrLiBJdCBzdGlsbCBkb2VzIHNpZ25hdHVyZSBjaGVja2luZyBieSBjYWxsaW5nIGEgbGFtYmRhIHdpdGggdGhlIHNhbWUNCiAgICAjIHNpZ25hdHVyZSBhcyB0aGUgb3JpZ2luYWwuDQogICAgaWYgbm90IF9jYWxsYWJsZShvcmlnaW5hbCk6DQogICAgICAgIHJldHVybg0KDQogICAgc2tpcGZpcnN0ID0gaXNpbnN0YW5jZShvcmlnaW5hbCwgdHlwZSkNCiAgICByZXN1bHQgPSBfZ2V0c2lnbmF0dXJlKG9yaWdpbmFsLCBza2lwZmlyc3QsIGluc3RhbmNlKQ0KICAgIGlmIHJlc3VsdCBpcyBOb25lOg0KICAgICAgICAjIHdhcyBhIEMgZnVuY3Rpb24gKGUuZy4gb2JqZWN0KCkuX19pbml0X18gKSB0aGF0IGNhbid0IGJlIG1vY2tlZA0KICAgICAgICByZXR1cm4NCg0KICAgIHNpZ25hdHVyZSwgZnVuYyA9IHJlc3VsdA0KDQogICAgc3JjID0gImxhbWJkYSAlczogTm9uZSIgJSBzaWduYXR1cmUNCiAgICBjaGVja3NpZyA9IGV2YWwoc3JjLCB7fSkNCiAgICBfY29weV9mdW5jX2RldGFpbHMoZnVuYywgY2hlY2tzaWcpDQoNCiAgICBuYW1lID0gb3JpZ2luYWwuX19uYW1lX18NCiAgICBpZiBub3QgbmFtZS5pc2lkZW50aWZpZXIoKToNCiAgICAgICAgbmFtZSA9ICdmdW5jb3B5Jw0KICAgIGNvbnRleHQgPSB7J19jaGVja3NpZ18nOiBjaGVja3NpZywgJ21vY2snOiBtb2NrfQ0KICAgIHNyYyA9ICIiImRlZiAlcygqYXJncywgKiprd2FyZ3MpOg0KICAgIF9jaGVja3NpZ18oKmFyZ3MsICoqa3dhcmdzKQ0KICAgIHJldHVybiBtb2NrKCphcmdzLCAqKmt3YXJncykiIiIgJSBuYW1lDQogICAgZXhlYyAoc3JjLCBjb250ZXh0KQ0KICAgIGZ1bmNvcHkgPSBjb250ZXh0W25hbWVdDQogICAgX3NldHVwX2Z1bmMoZnVuY29weSwgbW9jaykNCiAgICByZXR1cm4gZnVuY29weQ0KDQoNCmRlZiBfc2V0dXBfZnVuYyhmdW5jb3B5LCBtb2NrKToNCiAgICBmdW5jb3B5Lm1vY2sgPSBtb2NrDQoNCiAgICAjIGNhbid0IHVzZSBpc2luc3RhbmNlIHdpdGggbW9ja3MNCiAgICBpZiBub3QgX2lzX2luc3RhbmNlX21vY2sobW9jayk6DQogICAgICAgIHJldHVybg0KDQogICAgZGVmIGFzc2VydF9jYWxsZWRfd2l0aCgqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICByZXR1cm4gbW9jay5hc3NlcnRfY2FsbGVkX3dpdGgoKmFyZ3MsICoqa3dhcmdzKQ0KICAgIGRlZiBhc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICByZXR1cm4gbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgqYXJncywgKiprd2FyZ3MpDQogICAgZGVmIGFzc2VydF9oYXNfY2FsbHMoKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgcmV0dXJuIG1vY2suYXNzZXJ0X2hhc19jYWxscygqYXJncywgKiprd2FyZ3MpDQogICAgZGVmIGFzc2VydF9hbnlfY2FsbCgqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICByZXR1cm4gbW9jay5hc3NlcnRfYW55X2NhbGwoKmFyZ3MsICoqa3dhcmdzKQ0KICAgIGRlZiByZXNldF9tb2NrKCk6DQogICAgICAgIGZ1bmNvcHkubWV0aG9kX2NhbGxzID0gX0NhbGxMaXN0KCkNCiAgICAgICAgZnVuY29weS5tb2NrX2NhbGxzID0gX0NhbGxMaXN0KCkNCiAgICAgICAgbW9jay5yZXNldF9tb2NrKCkNCiAgICAgICAgcmV0ID0gZnVuY29weS5yZXR1cm5fdmFsdWUNCiAgICAgICAgaWYgX2lzX2luc3RhbmNlX21vY2socmV0KSBhbmQgbm90IHJldCBpcyBtb2NrOg0KICAgICAgICAgICAgcmV0LnJlc2V0X21vY2soKQ0KDQogICAgZnVuY29weS5jYWxsZWQgPSBGYWxzZQ0KICAgIGZ1bmNvcHkuY2FsbF9jb3VudCA9IDANCiAgICBmdW5jb3B5LmNhbGxfYXJncyA9IE5vbmUNCiAgICBmdW5jb3B5LmNhbGxfYXJnc19saXN0ID0gX0NhbGxMaXN0KCkNCiAgICBmdW5jb3B5Lm1ldGhvZF9jYWxscyA9IF9DYWxsTGlzdCgpDQogICAgZnVuY29weS5tb2NrX2NhbGxzID0gX0NhbGxMaXN0KCkNCg0KICAgIGZ1bmNvcHkucmV0dXJuX3ZhbHVlID0gbW9jay5yZXR1cm5fdmFsdWUNCiAgICBmdW5jb3B5LnNpZGVfZWZmZWN0ID0gbW9jay5zaWRlX2VmZmVjdA0KICAgIGZ1bmNvcHkuX21vY2tfY2hpbGRyZW4gPSBtb2NrLl9tb2NrX2NoaWxkcmVuDQoNCiAgICBmdW5jb3B5LmFzc2VydF9jYWxsZWRfd2l0aCA9IGFzc2VydF9jYWxsZWRfd2l0aA0KICAgIGZ1bmNvcHkuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGggPSBhc3NlcnRfY2FsbGVkX29uY2Vfd2l0aA0KICAgIGZ1bmNvcHkuYXNzZXJ0X2hhc19jYWxscyA9IGFzc2VydF9oYXNfY2FsbHMNCiAgICBmdW5jb3B5LmFzc2VydF9hbnlfY2FsbCA9IGFzc2VydF9hbnlfY2FsbA0KICAgIGZ1bmNvcHkucmVzZXRfbW9jayA9IHJlc2V0X21vY2sNCg0KICAgIG1vY2suX21vY2tfZGVsZWdhdGUgPSBmdW5jb3B5DQoNCg0KZGVmIF9pc19tYWdpYyhuYW1lKToNCiAgICByZXR1cm4gJ19fJXNfXycgJSBuYW1lWzI6LTJdID09IG5hbWUNCg0KDQpjbGFzcyBfU2VudGluZWxPYmplY3Qob2JqZWN0KToNCiAgICAiQSB1bmlxdWUsIG5hbWVkLCBzZW50aW5lbCBvYmplY3QuIg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBuYW1lKToNCiAgICAgICAgc2VsZi5uYW1lID0gbmFtZQ0KDQogICAgZGVmIF9fcmVwcl9fKHNlbGYpOg0KICAgICAgICByZXR1cm4gJ3NlbnRpbmVsLiVzJyAlIHNlbGYubmFtZQ0KDQoNCmNsYXNzIF9TZW50aW5lbChvYmplY3QpOg0KICAgICIiIkFjY2VzcyBhdHRyaWJ1dGVzIHRvIHJldHVybiBhIG5hbWVkIG9iamVjdCwgdXNhYmxlIGFzIGEgc2VudGluZWwuIiIiDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLl9zZW50aW5lbHMgPSB7fQ0KDQogICAgZGVmIF9fZ2V0YXR0cl9fKHNlbGYsIG5hbWUpOg0KICAgICAgICBpZiBuYW1lID09ICdfX2Jhc2VzX18nOg0KICAgICAgICAgICAgIyBXaXRob3V0IHRoaXMgaGVscCh1bml0dGVzdC5tb2NrKSByYWlzZXMgYW4gZXhjZXB0aW9uDQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcg0KICAgICAgICByZXR1cm4gc2VsZi5fc2VudGluZWxzLnNldGRlZmF1bHQobmFtZSwgX1NlbnRpbmVsT2JqZWN0KG5hbWUpKQ0KDQoNCnNlbnRpbmVsID0gX1NlbnRpbmVsKCkNCg0KREVGQVVMVCA9IHNlbnRpbmVsLkRFRkFVTFQNCl9taXNzaW5nID0gc2VudGluZWwuTUlTU0lORw0KX2RlbGV0ZWQgPSBzZW50aW5lbC5ERUxFVEVEDQoNCg0KZGVmIF9jb3B5KHZhbHVlKToNCiAgICBpZiB0eXBlKHZhbHVlKSBpbiAoZGljdCwgbGlzdCwgdHVwbGUsIHNldCk6DQogICAgICAgIHJldHVybiB0eXBlKHZhbHVlKSh2YWx1ZSkNCiAgICByZXR1cm4gdmFsdWUNCg0KDQpfYWxsb3dlZF9uYW1lcyA9IHNldCgNCiAgICBbDQogICAgICAgICdyZXR1cm5fdmFsdWUnLCAnX21vY2tfcmV0dXJuX3ZhbHVlJywgJ3NpZGVfZWZmZWN0JywNCiAgICAgICAgJ19tb2NrX3NpZGVfZWZmZWN0JywgJ19tb2NrX3BhcmVudCcsICdfbW9ja19uZXdfcGFyZW50JywNCiAgICAgICAgJ19tb2NrX25hbWUnLCAnX21vY2tfbmV3X25hbWUnDQogICAgXQ0KKQ0KDQoNCmRlZiBfZGVsZWdhdGluZ19wcm9wZXJ0eShuYW1lKToNCiAgICBfYWxsb3dlZF9uYW1lcy5hZGQobmFtZSkNCiAgICBfdGhlX25hbWUgPSAnX21vY2tfJyArIG5hbWUNCiAgICBkZWYgX2dldChzZWxmLCBuYW1lPW5hbWUsIF90aGVfbmFtZT1fdGhlX25hbWUpOg0KICAgICAgICBzaWcgPSBzZWxmLl9tb2NrX2RlbGVnYXRlDQogICAgICAgIGlmIHNpZyBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIGdldGF0dHIoc2VsZiwgX3RoZV9uYW1lKQ0KICAgICAgICByZXR1cm4gZ2V0YXR0cihzaWcsIG5hbWUpDQogICAgZGVmIF9zZXQoc2VsZiwgdmFsdWUsIG5hbWU9bmFtZSwgX3RoZV9uYW1lPV90aGVfbmFtZSk6DQogICAgICAgIHNpZyA9IHNlbGYuX21vY2tfZGVsZWdhdGUNCiAgICAgICAgaWYgc2lnIGlzIE5vbmU6DQogICAgICAgICAgICBzZWxmLl9fZGljdF9fW190aGVfbmFtZV0gPSB2YWx1ZQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2V0YXR0cihzaWcsIG5hbWUsIHZhbHVlKQ0KDQogICAgcmV0dXJuIHByb3BlcnR5KF9nZXQsIF9zZXQpDQoNCg0KDQpjbGFzcyBfQ2FsbExpc3QobGlzdCk6DQoNCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHZhbHVlKToNCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UodmFsdWUsIGxpc3QpOg0KICAgICAgICAgICAgcmV0dXJuIGxpc3QuX19jb250YWluc19fKHNlbGYsIHZhbHVlKQ0KICAgICAgICBsZW5fdmFsdWUgPSBsZW4odmFsdWUpDQogICAgICAgIGxlbl9zZWxmID0gbGVuKHNlbGYpDQogICAgICAgIGlmIGxlbl92YWx1ZSA+IGxlbl9zZWxmOg0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCwgbGVuX3NlbGYgLSBsZW5fdmFsdWUgKyAxKToNCiAgICAgICAgICAgIHN1Yl9saXN0ID0gc2VsZltpOmkrbGVuX3ZhbHVlXQ0KICAgICAgICAgICAgaWYgc3ViX2xpc3QgPT0gdmFsdWU6DQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICBkZWYgX19yZXByX18oc2VsZik6DQogICAgICAgIHJldHVybiBwcHJpbnQucGZvcm1hdChsaXN0KHNlbGYpKQ0KDQoNCmRlZiBfY2hlY2tfYW5kX3NldF9wYXJlbnQocGFyZW50LCB2YWx1ZSwgbmFtZSwgbmV3X25hbWUpOg0KICAgIGlmIG5vdCBfaXNfaW5zdGFuY2VfbW9jayh2YWx1ZSk6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIGlmICgodmFsdWUuX21vY2tfbmFtZSBvciB2YWx1ZS5fbW9ja19uZXdfbmFtZSkgb3INCiAgICAgICAgKHZhbHVlLl9tb2NrX3BhcmVudCBpcyBub3QgTm9uZSkgb3INCiAgICAgICAgKHZhbHVlLl9tb2NrX25ld19wYXJlbnQgaXMgbm90IE5vbmUpKToNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICBfcGFyZW50ID0gcGFyZW50DQogICAgd2hpbGUgX3BhcmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgIyBzZXR0aW5nIGEgbW9jayAodmFsdWUpIGFzIGEgY2hpbGQgb3IgcmV0dXJuIHZhbHVlIG9mIGl0c2VsZg0KICAgICAgICAjIHNob3VsZCBub3QgbW9kaWZ5IHRoZSBtb2NrDQogICAgICAgIGlmIF9wYXJlbnQgaXMgdmFsdWU6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgX3BhcmVudCA9IF9wYXJlbnQuX21vY2tfbmV3X3BhcmVudA0KDQogICAgaWYgbmV3X25hbWU6DQogICAgICAgIHZhbHVlLl9tb2NrX25ld19wYXJlbnQgPSBwYXJlbnQNCiAgICAgICAgdmFsdWUuX21vY2tfbmV3X25hbWUgPSBuZXdfbmFtZQ0KICAgIGlmIG5hbWU6DQogICAgICAgIHZhbHVlLl9tb2NrX3BhcmVudCA9IHBhcmVudA0KICAgICAgICB2YWx1ZS5fbW9ja19uYW1lID0gbmFtZQ0KICAgIHJldHVybiBUcnVlDQoNCg0KDQpjbGFzcyBCYXNlKG9iamVjdCk6DQogICAgX21vY2tfcmV0dXJuX3ZhbHVlID0gREVGQVVMVA0KICAgIF9tb2NrX3NpZGVfZWZmZWN0ID0gTm9uZQ0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICBwYXNzDQoNCg0KDQpjbGFzcyBOb25DYWxsYWJsZU1vY2soQmFzZSk6DQogICAgIiIiQSBub24tY2FsbGFibGUgdmVyc2lvbiBvZiBgTW9ja2AiIiINCg0KICAgIGRlZiBfX25ld19fKGNscywgKmFyZ3MsICoqa3cpOg0KICAgICAgICAjIGV2ZXJ5IGluc3RhbmNlIGhhcyBpdHMgb3duIGNsYXNzDQogICAgICAgICMgc28gd2UgY2FuIGNyZWF0ZSBtYWdpYyBtZXRob2RzIG9uIHRoZQ0KICAgICAgICAjIGNsYXNzIHdpdGhvdXQgc3RvbXBpbmcgb24gb3RoZXIgbW9ja3MNCiAgICAgICAgbmV3ID0gdHlwZShjbHMuX19uYW1lX18sIChjbHMsKSwgeydfX2RvY19fJzogY2xzLl9fZG9jX199KQ0KICAgICAgICBpbnN0YW5jZSA9IG9iamVjdC5fX25ld19fKG5ldykNCiAgICAgICAgcmV0dXJuIGluc3RhbmNlDQoNCg0KICAgIGRlZiBfX2luaXRfXygNCiAgICAgICAgICAgIHNlbGYsIHNwZWM9Tm9uZSwgd3JhcHM9Tm9uZSwgbmFtZT1Ob25lLCBzcGVjX3NldD1Ob25lLA0KICAgICAgICAgICAgcGFyZW50PU5vbmUsIF9zcGVjX3N0YXRlPU5vbmUsIF9uZXdfbmFtZT0nJywgX25ld19wYXJlbnQ9Tm9uZSwNCiAgICAgICAgICAgICoqa3dhcmdzDQogICAgICAgICk6DQogICAgICAgIGlmIF9uZXdfcGFyZW50IGlzIE5vbmU6DQogICAgICAgICAgICBfbmV3X3BhcmVudCA9IHBhcmVudA0KDQogICAgICAgIF9fZGljdF9fID0gc2VsZi5fX2RpY3RfXw0KICAgICAgICBfX2RpY3RfX1snX21vY2tfcGFyZW50J10gPSBwYXJlbnQNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX25hbWUnXSA9IG5hbWUNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX25ld19uYW1lJ10gPSBfbmV3X25hbWUNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX25ld19wYXJlbnQnXSA9IF9uZXdfcGFyZW50DQoNCiAgICAgICAgaWYgc3BlY19zZXQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzcGVjID0gc3BlY19zZXQNCiAgICAgICAgICAgIHNwZWNfc2V0ID0gVHJ1ZQ0KDQogICAgICAgIHNlbGYuX21vY2tfYWRkX3NwZWMoc3BlYywgc3BlY19zZXQpDQoNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX2NoaWxkcmVuJ10gPSB7fQ0KICAgICAgICBfX2RpY3RfX1snX21vY2tfd3JhcHMnXSA9IHdyYXBzDQogICAgICAgIF9fZGljdF9fWydfbW9ja19kZWxlZ2F0ZSddID0gTm9uZQ0KDQogICAgICAgIF9fZGljdF9fWydfbW9ja19jYWxsZWQnXSA9IEZhbHNlDQogICAgICAgIF9fZGljdF9fWydfbW9ja19jYWxsX2FyZ3MnXSA9IE5vbmUNCiAgICAgICAgX19kaWN0X19bJ19tb2NrX2NhbGxfY291bnQnXSA9IDANCiAgICAgICAgX19kaWN0X19bJ19tb2NrX2NhbGxfYXJnc19saXN0J10gPSBfQ2FsbExpc3QoKQ0KICAgICAgICBfX2RpY3RfX1snX21vY2tfbW9ja19jYWxscyddID0gX0NhbGxMaXN0KCkNCg0KICAgICAgICBfX2RpY3RfX1snbWV0aG9kX2NhbGxzJ10gPSBfQ2FsbExpc3QoKQ0KDQogICAgICAgIGlmIGt3YXJnczoNCiAgICAgICAgICAgIHNlbGYuY29uZmlndXJlX21vY2soKiprd2FyZ3MpDQoNCiAgICAgICAgX3NhZmVfc3VwZXIoTm9uQ2FsbGFibGVNb2NrLCBzZWxmKS5fX2luaXRfXygNCiAgICAgICAgICAgIHNwZWMsIHdyYXBzLCBuYW1lLCBzcGVjX3NldCwgcGFyZW50LA0KICAgICAgICAgICAgX3NwZWNfc3RhdGUNCiAgICAgICAgKQ0KDQoNCiAgICBkZWYgYXR0YWNoX21vY2soc2VsZiwgbW9jaywgYXR0cmlidXRlKToNCiAgICAgICAgIiIiDQogICAgICAgIEF0dGFjaCBhIG1vY2sgYXMgYW4gYXR0cmlidXRlIG9mIHRoaXMgb25lLCByZXBsYWNpbmcgaXRzIG5hbWUgYW5kDQogICAgICAgIHBhcmVudC4gQ2FsbHMgdG8gdGhlIGF0dGFjaGVkIG1vY2sgd2lsbCBiZSByZWNvcmRlZCBpbiB0aGUNCiAgICAgICAgYG1ldGhvZF9jYWxsc2AgYW5kIGBtb2NrX2NhbGxzYCBhdHRyaWJ1dGVzIG9mIHRoaXMgb25lLiIiIg0KICAgICAgICBtb2NrLl9tb2NrX3BhcmVudCA9IE5vbmUNCiAgICAgICAgbW9jay5fbW9ja19uZXdfcGFyZW50ID0gTm9uZQ0KICAgICAgICBtb2NrLl9tb2NrX25hbWUgPSAnJw0KICAgICAgICBtb2NrLl9tb2NrX25ld19uYW1lID0gTm9uZQ0KDQogICAgICAgIHNldGF0dHIoc2VsZiwgYXR0cmlidXRlLCBtb2NrKQ0KDQoNCiAgICBkZWYgbW9ja19hZGRfc3BlYyhzZWxmLCBzcGVjLCBzcGVjX3NldD1GYWxzZSk6DQogICAgICAgICIiIkFkZCBhIHNwZWMgdG8gYSBtb2NrLiBgc3BlY2AgY2FuIGVpdGhlciBiZSBhbiBvYmplY3Qgb3IgYQ0KICAgICAgICBsaXN0IG9mIHN0cmluZ3MuIE9ubHkgYXR0cmlidXRlcyBvbiB0aGUgYHNwZWNgIGNhbiBiZSBmZXRjaGVkIGFzDQogICAgICAgIGF0dHJpYnV0ZXMgZnJvbSB0aGUgbW9jay4NCg0KICAgICAgICBJZiBgc3BlY19zZXRgIGlzIFRydWUgdGhlbiBvbmx5IGF0dHJpYnV0ZXMgb24gdGhlIHNwZWMgY2FuIGJlIHNldC4iIiINCiAgICAgICAgc2VsZi5fbW9ja19hZGRfc3BlYyhzcGVjLCBzcGVjX3NldCkNCg0KDQogICAgZGVmIF9tb2NrX2FkZF9zcGVjKHNlbGYsIHNwZWMsIHNwZWNfc2V0KToNCiAgICAgICAgX3NwZWNfY2xhc3MgPSBOb25lDQoNCiAgICAgICAgaWYgc3BlYyBpcyBub3QgTm9uZSBhbmQgbm90IF9pc19saXN0KHNwZWMpOg0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzcGVjLCB0eXBlKToNCiAgICAgICAgICAgICAgICBfc3BlY19jbGFzcyA9IHNwZWMNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgX3NwZWNfY2xhc3MgPSBfZ2V0X2NsYXNzKHNwZWMpDQoNCiAgICAgICAgICAgIHNwZWMgPSBkaXIoc3BlYykNCg0KICAgICAgICBfX2RpY3RfXyA9IHNlbGYuX19kaWN0X18NCiAgICAgICAgX19kaWN0X19bJ19zcGVjX2NsYXNzJ10gPSBfc3BlY19jbGFzcw0KICAgICAgICBfX2RpY3RfX1snX3NwZWNfc2V0J10gPSBzcGVjX3NldA0KICAgICAgICBfX2RpY3RfX1snX21vY2tfbWV0aG9kcyddID0gc3BlYw0KDQoNCiAgICBkZWYgX19nZXRfcmV0dXJuX3ZhbHVlKHNlbGYpOg0KICAgICAgICByZXQgPSBzZWxmLl9tb2NrX3JldHVybl92YWx1ZQ0KICAgICAgICBpZiBzZWxmLl9tb2NrX2RlbGVnYXRlIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmV0ID0gc2VsZi5fbW9ja19kZWxlZ2F0ZS5yZXR1cm5fdmFsdWUNCg0KICAgICAgICBpZiByZXQgaXMgREVGQVVMVDoNCiAgICAgICAgICAgIHJldCA9IHNlbGYuX2dldF9jaGlsZF9tb2NrKA0KICAgICAgICAgICAgICAgIF9uZXdfcGFyZW50PXNlbGYsIF9uZXdfbmFtZT0nKCknDQogICAgICAgICAgICApDQogICAgICAgICAgICBzZWxmLnJldHVybl92YWx1ZSA9IHJldA0KICAgICAgICByZXR1cm4gcmV0DQoNCg0KICAgIGRlZiBfX3NldF9yZXR1cm5fdmFsdWUoc2VsZiwgdmFsdWUpOg0KICAgICAgICBpZiBzZWxmLl9tb2NrX2RlbGVnYXRlIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgc2VsZi5fbW9ja19kZWxlZ2F0ZS5yZXR1cm5fdmFsdWUgPSB2YWx1ZQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZi5fbW9ja19yZXR1cm5fdmFsdWUgPSB2YWx1ZQ0KICAgICAgICAgICAgX2NoZWNrX2FuZF9zZXRfcGFyZW50KHNlbGYsIHZhbHVlLCBOb25lLCAnKCknKQ0KDQogICAgX19yZXR1cm5fdmFsdWVfZG9jID0gIlRoZSB2YWx1ZSB0byBiZSByZXR1cm5lZCB3aGVuIHRoZSBtb2NrIGlzIGNhbGxlZC4iDQogICAgcmV0dXJuX3ZhbHVlID0gcHJvcGVydHkoX19nZXRfcmV0dXJuX3ZhbHVlLCBfX3NldF9yZXR1cm5fdmFsdWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgX19yZXR1cm5fdmFsdWVfZG9jKQ0KDQoNCiAgICBAcHJvcGVydHkNCiAgICBkZWYgX19jbGFzc19fKHNlbGYpOg0KICAgICAgICBpZiBzZWxmLl9zcGVjX2NsYXNzIGlzIE5vbmU6DQogICAgICAgICAgICByZXR1cm4gdHlwZShzZWxmKQ0KICAgICAgICByZXR1cm4gc2VsZi5fc3BlY19jbGFzcw0KDQogICAgY2FsbGVkID0gX2RlbGVnYXRpbmdfcHJvcGVydHkoJ2NhbGxlZCcpDQogICAgY2FsbF9jb3VudCA9IF9kZWxlZ2F0aW5nX3Byb3BlcnR5KCdjYWxsX2NvdW50JykNCiAgICBjYWxsX2FyZ3MgPSBfZGVsZWdhdGluZ19wcm9wZXJ0eSgnY2FsbF9hcmdzJykNCiAgICBjYWxsX2FyZ3NfbGlzdCA9IF9kZWxlZ2F0aW5nX3Byb3BlcnR5KCdjYWxsX2FyZ3NfbGlzdCcpDQogICAgbW9ja19jYWxscyA9IF9kZWxlZ2F0aW5nX3Byb3BlcnR5KCdtb2NrX2NhbGxzJykNCg0KDQogICAgZGVmIF9fZ2V0X3NpZGVfZWZmZWN0KHNlbGYpOg0KICAgICAgICBkZWxlZ2F0ZWQgPSBzZWxmLl9tb2NrX2RlbGVnYXRlDQogICAgICAgIGlmIGRlbGVnYXRlZCBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX21vY2tfc2lkZV9lZmZlY3QNCiAgICAgICAgcmV0dXJuIGRlbGVnYXRlZC5zaWRlX2VmZmVjdA0KDQogICAgZGVmIF9fc2V0X3NpZGVfZWZmZWN0KHNlbGYsIHZhbHVlKToNCiAgICAgICAgdmFsdWUgPSBfdHJ5X2l0ZXIodmFsdWUpDQogICAgICAgIGRlbGVnYXRlZCA9IHNlbGYuX21vY2tfZGVsZWdhdGUNCiAgICAgICAgaWYgZGVsZWdhdGVkIGlzIE5vbmU6DQogICAgICAgICAgICBzZWxmLl9tb2NrX3NpZGVfZWZmZWN0ID0gdmFsdWUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGRlbGVnYXRlZC5zaWRlX2VmZmVjdCA9IHZhbHVlDQoNCiAgICBzaWRlX2VmZmVjdCA9IHByb3BlcnR5KF9fZ2V0X3NpZGVfZWZmZWN0LCBfX3NldF9zaWRlX2VmZmVjdCkNCg0KDQogICAgZGVmIHJlc2V0X21vY2soc2VsZik6DQogICAgICAgICJSZXN0b3JlIHRoZSBtb2NrIG9iamVjdCB0byBpdHMgaW5pdGlhbCBzdGF0ZS4iDQogICAgICAgIHNlbGYuY2FsbGVkID0gRmFsc2UNCiAgICAgICAgc2VsZi5jYWxsX2FyZ3MgPSBOb25lDQogICAgICAgIHNlbGYuY2FsbF9jb3VudCA9IDANCiAgICAgICAgc2VsZi5tb2NrX2NhbGxzID0gX0NhbGxMaXN0KCkNCiAgICAgICAgc2VsZi5jYWxsX2FyZ3NfbGlzdCA9IF9DYWxsTGlzdCgpDQogICAgICAgIHNlbGYubWV0aG9kX2NhbGxzID0gX0NhbGxMaXN0KCkNCg0KICAgICAgICBmb3IgY2hpbGQgaW4gc2VsZi5fbW9ja19jaGlsZHJlbi52YWx1ZXMoKToNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoY2hpbGQsIF9TcGVjU3RhdGUpOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBjaGlsZC5yZXNldF9tb2NrKCkNCg0KICAgICAgICByZXQgPSBzZWxmLl9tb2NrX3JldHVybl92YWx1ZQ0KICAgICAgICBpZiBfaXNfaW5zdGFuY2VfbW9jayhyZXQpIGFuZCByZXQgaXMgbm90IHNlbGY6DQogICAgICAgICAgICByZXQucmVzZXRfbW9jaygpDQoNCg0KICAgIGRlZiBjb25maWd1cmVfbW9jayhzZWxmLCAqKmt3YXJncyk6DQogICAgICAgICIiIlNldCBhdHRyaWJ1dGVzIG9uIHRoZSBtb2NrIHRocm91Z2gga2V5d29yZCBhcmd1bWVudHMuDQoNCiAgICAgICAgQXR0cmlidXRlcyBwbHVzIHJldHVybiB2YWx1ZXMgYW5kIHNpZGUgZWZmZWN0cyBjYW4gYmUgc2V0IG9uIGNoaWxkDQogICAgICAgIG1vY2tzIHVzaW5nIHN0YW5kYXJkIGRvdCBub3RhdGlvbiBhbmQgdW5wYWNraW5nIGEgZGljdGlvbmFyeSBpbiB0aGUNCiAgICAgICAgbWV0aG9kIGNhbGw6DQoNCiAgICAgICAgPj4+IGF0dHJzID0geydtZXRob2QucmV0dXJuX3ZhbHVlJzogMywgJ290aGVyLnNpZGVfZWZmZWN0JzogS2V5RXJyb3J9DQogICAgICAgID4+PiBtb2NrLmNvbmZpZ3VyZV9tb2NrKCoqYXR0cnMpIiIiDQogICAgICAgIGZvciBhcmcsIHZhbCBpbiBzb3J0ZWQoa3dhcmdzLml0ZW1zKCksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB3ZSBzb3J0IG9uIHRoZSBudW1iZXIgb2YgZG90cyBzbyB0aGF0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhdHRyaWJ1dGVzIGFyZSBzZXQgYmVmb3JlIHdlIHNldCBhdHRyaWJ1dGVzIG9uDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhdHRyaWJ1dGVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PWxhbWJkYSBlbnRyeTogZW50cnlbMF0uY291bnQoJy4nKSk6DQogICAgICAgICAgICBhcmdzID0gYXJnLnNwbGl0KCcuJykNCiAgICAgICAgICAgIGZpbmFsID0gYXJncy5wb3AoKQ0KICAgICAgICAgICAgb2JqID0gc2VsZg0KICAgICAgICAgICAgZm9yIGVudHJ5IGluIGFyZ3M6DQogICAgICAgICAgICAgICAgb2JqID0gZ2V0YXR0cihvYmosIGVudHJ5KQ0KICAgICAgICAgICAgc2V0YXR0cihvYmosIGZpbmFsLCB2YWwpDQoNCg0KICAgIGRlZiBfX2dldGF0dHJfXyhzZWxmLCBuYW1lKToNCiAgICAgICAgaWYgbmFtZSA9PSAnX21vY2tfbWV0aG9kcyc6DQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcihuYW1lKQ0KICAgICAgICBlbGlmIHNlbGYuX21vY2tfbWV0aG9kcyBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGlmIG5hbWUgbm90IGluIHNlbGYuX21vY2tfbWV0aG9kcyBvciBuYW1lIGluIF9hbGxfbWFnaWNzOg0KICAgICAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJNb2NrIG9iamVjdCBoYXMgbm8gYXR0cmlidXRlICVyIiAlIG5hbWUpDQogICAgICAgIGVsaWYgX2lzX21hZ2ljKG5hbWUpOg0KICAgICAgICAgICAgcmFpc2UgQXR0cmlidXRlRXJyb3IobmFtZSkNCg0KICAgICAgICByZXN1bHQgPSBzZWxmLl9tb2NrX2NoaWxkcmVuLmdldChuYW1lKQ0KICAgICAgICBpZiByZXN1bHQgaXMgX2RlbGV0ZWQ6DQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcihuYW1lKQ0KICAgICAgICBlbGlmIHJlc3VsdCBpcyBOb25lOg0KICAgICAgICAgICAgd3JhcHMgPSBOb25lDQogICAgICAgICAgICBpZiBzZWxmLl9tb2NrX3dyYXBzIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgICMgWFhYWCBzaG91bGQgd2UgZ2V0IHRoZSBhdHRyaWJ1dGUgd2l0aG91dCB0cmlnZ2VyaW5nIGNvZGUNCiAgICAgICAgICAgICAgICAjIGV4ZWN1dGlvbj8NCiAgICAgICAgICAgICAgICB3cmFwcyA9IGdldGF0dHIoc2VsZi5fbW9ja193cmFwcywgbmFtZSkNCg0KICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5fZ2V0X2NoaWxkX21vY2soDQogICAgICAgICAgICAgICAgcGFyZW50PXNlbGYsIG5hbWU9bmFtZSwgd3JhcHM9d3JhcHMsIF9uZXdfbmFtZT1uYW1lLA0KICAgICAgICAgICAgICAgIF9uZXdfcGFyZW50PXNlbGYNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIHNlbGYuX21vY2tfY2hpbGRyZW5bbmFtZV0gID0gcmVzdWx0DQoNCiAgICAgICAgZWxpZiBpc2luc3RhbmNlKHJlc3VsdCwgX1NwZWNTdGF0ZSk6DQogICAgICAgICAgICByZXN1bHQgPSBjcmVhdGVfYXV0b3NwZWMoDQogICAgICAgICAgICAgICAgcmVzdWx0LnNwZWMsIHJlc3VsdC5zcGVjX3NldCwgcmVzdWx0Lmluc3RhbmNlLA0KICAgICAgICAgICAgICAgIHJlc3VsdC5wYXJlbnQsIHJlc3VsdC5uYW1lDQogICAgICAgICAgICApDQogICAgICAgICAgICBzZWxmLl9tb2NrX2NoaWxkcmVuW25hbWVdICA9IHJlc3VsdA0KDQogICAgICAgIHJldHVybiByZXN1bHQNCg0KDQogICAgZGVmIF9fcmVwcl9fKHNlbGYpOg0KICAgICAgICBfbmFtZV9saXN0ID0gW3NlbGYuX21vY2tfbmV3X25hbWVdDQogICAgICAgIF9wYXJlbnQgPSBzZWxmLl9tb2NrX25ld19wYXJlbnQNCiAgICAgICAgbGFzdCA9IHNlbGYNCg0KICAgICAgICBkb3QgPSAnLicNCiAgICAgICAgaWYgX25hbWVfbGlzdCA9PSBbJygpJ106DQogICAgICAgICAgICBkb3QgPSAnJw0KICAgICAgICBzZWVuID0gc2V0KCkNCiAgICAgICAgd2hpbGUgX3BhcmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGxhc3QgPSBfcGFyZW50DQoNCiAgICAgICAgICAgIF9uYW1lX2xpc3QuYXBwZW5kKF9wYXJlbnQuX21vY2tfbmV3X25hbWUgKyBkb3QpDQogICAgICAgICAgICBkb3QgPSAnLicNCiAgICAgICAgICAgIGlmIF9wYXJlbnQuX21vY2tfbmV3X25hbWUgPT0gJygpJzoNCiAgICAgICAgICAgICAgICBkb3QgPSAnJw0KDQogICAgICAgICAgICBfcGFyZW50ID0gX3BhcmVudC5fbW9ja19uZXdfcGFyZW50DQoNCiAgICAgICAgICAgICMgdXNlIGlkcyBoZXJlIHNvIGFzIG5vdCB0byBjYWxsIF9faGFzaF9fIG9uIHRoZSBtb2Nrcw0KICAgICAgICAgICAgaWYgaWQoX3BhcmVudCkgaW4gc2VlbjoNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgc2Vlbi5hZGQoaWQoX3BhcmVudCkpDQoNCiAgICAgICAgX25hbWVfbGlzdCA9IGxpc3QocmV2ZXJzZWQoX25hbWVfbGlzdCkpDQogICAgICAgIF9maXJzdCA9IGxhc3QuX21vY2tfbmFtZSBvciAnbW9jaycNCiAgICAgICAgaWYgbGVuKF9uYW1lX2xpc3QpID4gMToNCiAgICAgICAgICAgIGlmIF9uYW1lX2xpc3RbMV0gbm90IGluICgnKCknLCAnKCkuJyk6DQogICAgICAgICAgICAgICAgX2ZpcnN0ICs9ICcuJw0KICAgICAgICBfbmFtZV9saXN0WzBdID0gX2ZpcnN0DQogICAgICAgIG5hbWUgPSAnJy5qb2luKF9uYW1lX2xpc3QpDQoNCiAgICAgICAgbmFtZV9zdHJpbmcgPSAnJw0KICAgICAgICBpZiBuYW1lIG5vdCBpbiAoJ21vY2snLCAnbW9jay4nKToNCiAgICAgICAgICAgIG5hbWVfc3RyaW5nID0gJyBuYW1lPSVyJyAlIG5hbWUNCg0KICAgICAgICBzcGVjX3N0cmluZyA9ICcnDQogICAgICAgIGlmIHNlbGYuX3NwZWNfY2xhc3MgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzcGVjX3N0cmluZyA9ICcgc3BlYz0lcicNCiAgICAgICAgICAgIGlmIHNlbGYuX3NwZWNfc2V0Og0KICAgICAgICAgICAgICAgIHNwZWNfc3RyaW5nID0gJyBzcGVjX3NldD0lcicNCiAgICAgICAgICAgIHNwZWNfc3RyaW5nID0gc3BlY19zdHJpbmcgJSBzZWxmLl9zcGVjX2NsYXNzLl9fbmFtZV9fDQogICAgICAgIHJldHVybiAiPCVzJXMlcyBpZD0nJXMnPiIgJSAoDQogICAgICAgICAgICB0eXBlKHNlbGYpLl9fbmFtZV9fLA0KICAgICAgICAgICAgbmFtZV9zdHJpbmcsDQogICAgICAgICAgICBzcGVjX3N0cmluZywNCiAgICAgICAgICAgIGlkKHNlbGYpDQogICAgICAgICkNCg0KDQogICAgZGVmIF9fZGlyX18oc2VsZik6DQogICAgICAgICIiIkZpbHRlciB0aGUgb3V0cHV0IG9mIGBkaXIobW9jaylgIHRvIG9ubHkgdXNlZnVsIG1lbWJlcnMuIiIiDQogICAgICAgIGlmIG5vdCBGSUxURVJfRElSOg0KICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5fX2Rpcl9fKHNlbGYpDQoNCiAgICAgICAgZXh0cmFzID0gc2VsZi5fbW9ja19tZXRob2RzIG9yIFtdDQogICAgICAgIGZyb21fdHlwZSA9IGRpcih0eXBlKHNlbGYpKQ0KICAgICAgICBmcm9tX2RpY3QgPSBsaXN0KHNlbGYuX19kaWN0X18pDQoNCiAgICAgICAgZnJvbV90eXBlID0gW2UgZm9yIGUgaW4gZnJvbV90eXBlIGlmIG5vdCBlLnN0YXJ0c3dpdGgoJ18nKV0NCiAgICAgICAgZnJvbV9kaWN0ID0gW2UgZm9yIGUgaW4gZnJvbV9kaWN0IGlmIG5vdCBlLnN0YXJ0c3dpdGgoJ18nKSBvcg0KICAgICAgICAgICAgICAgICAgICAgX2lzX21hZ2ljKGUpXQ0KICAgICAgICByZXR1cm4gc29ydGVkKHNldChleHRyYXMgKyBmcm9tX3R5cGUgKyBmcm9tX2RpY3QgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0KHNlbGYuX21vY2tfY2hpbGRyZW4pKSkNCg0KDQogICAgZGVmIF9fc2V0YXR0cl9fKHNlbGYsIG5hbWUsIHZhbHVlKToNCiAgICAgICAgaWYgbmFtZSBpbiBfYWxsb3dlZF9uYW1lczoNCiAgICAgICAgICAgICMgcHJvcGVydHkgc2V0dGVycyBnbyB0aHJvdWdoIGhlcmUNCiAgICAgICAgICAgIHJldHVybiBvYmplY3QuX19zZXRhdHRyX18oc2VsZiwgbmFtZSwgdmFsdWUpDQogICAgICAgIGVsaWYgKHNlbGYuX3NwZWNfc2V0IGFuZCBzZWxmLl9tb2NrX21ldGhvZHMgaXMgbm90IE5vbmUgYW5kDQogICAgICAgICAgICBuYW1lIG5vdCBpbiBzZWxmLl9tb2NrX21ldGhvZHMgYW5kDQogICAgICAgICAgICBuYW1lIG5vdCBpbiBzZWxmLl9fZGljdF9fKToNCiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJNb2NrIG9iamVjdCBoYXMgbm8gYXR0cmlidXRlICclcyciICUgbmFtZSkNCiAgICAgICAgZWxpZiBuYW1lIGluIF91bnN1cHBvcnRlZF9tYWdpY3M6DQogICAgICAgICAgICBtc2cgPSAnQXR0ZW1wdGluZyB0byBzZXQgdW5zdXBwb3J0ZWQgbWFnaWMgbWV0aG9kICVyLicgJSBuYW1lDQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcihtc2cpDQogICAgICAgIGVsaWYgbmFtZSBpbiBfYWxsX21hZ2ljczoNCiAgICAgICAgICAgIGlmIHNlbGYuX21vY2tfbWV0aG9kcyBpcyBub3QgTm9uZSBhbmQgbmFtZSBub3QgaW4gc2VsZi5fbW9ja19tZXRob2RzOg0KICAgICAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCJNb2NrIG9iamVjdCBoYXMgbm8gYXR0cmlidXRlICclcyciICUgbmFtZSkNCg0KICAgICAgICAgICAgaWYgbm90IF9pc19pbnN0YW5jZV9tb2NrKHZhbHVlKToNCiAgICAgICAgICAgICAgICBzZXRhdHRyKHR5cGUoc2VsZiksIG5hbWUsIF9nZXRfbWV0aG9kKG5hbWUsIHZhbHVlKSkNCiAgICAgICAgICAgICAgICBvcmlnaW5hbCA9IHZhbHVlDQogICAgICAgICAgICAgICAgdmFsdWUgPSBsYW1iZGEgKmFyZ3MsICoqa3c6IG9yaWdpbmFsKHNlbGYsICphcmdzLCAqKmt3KQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAjIG9ubHkgc2V0IF9uZXdfbmFtZSBhbmQgbm90IG5hbWUgc28gdGhhdCBtb2NrX2NhbGxzIGlzIHRyYWNrZWQNCiAgICAgICAgICAgICAgICAjIGJ1dCBub3QgbWV0aG9kIGNhbGxzDQogICAgICAgICAgICAgICAgX2NoZWNrX2FuZF9zZXRfcGFyZW50KHNlbGYsIHZhbHVlLCBOb25lLCBuYW1lKQ0KICAgICAgICAgICAgICAgIHNldGF0dHIodHlwZShzZWxmKSwgbmFtZSwgdmFsdWUpDQogICAgICAgICAgICAgICAgc2VsZi5fbW9ja19jaGlsZHJlbltuYW1lXSA9IHZhbHVlDQogICAgICAgIGVsaWYgbmFtZSA9PSAnX19jbGFzc19fJzoNCiAgICAgICAgICAgIHNlbGYuX3NwZWNfY2xhc3MgPSB2YWx1ZQ0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBpZiBfY2hlY2tfYW5kX3NldF9wYXJlbnQoc2VsZiwgdmFsdWUsIG5hbWUsIG5hbWUpOg0KICAgICAgICAgICAgICAgIHNlbGYuX21vY2tfY2hpbGRyZW5bbmFtZV0gPSB2YWx1ZQ0KICAgICAgICByZXR1cm4gb2JqZWN0Ll9fc2V0YXR0cl9fKHNlbGYsIG5hbWUsIHZhbHVlKQ0KDQoNCiAgICBkZWYgX19kZWxhdHRyX18oc2VsZiwgbmFtZSk6DQogICAgICAgIGlmIG5hbWUgaW4gX2FsbF9tYWdpY3MgYW5kIG5hbWUgaW4gdHlwZShzZWxmKS5fX2RpY3RfXzoNCiAgICAgICAgICAgIGRlbGF0dHIodHlwZShzZWxmKSwgbmFtZSkNCiAgICAgICAgICAgIGlmIG5hbWUgbm90IGluIHNlbGYuX19kaWN0X186DQogICAgICAgICAgICAgICAgIyBmb3IgbWFnaWMgbWV0aG9kcyB0aGF0IGFyZSBzdGlsbCBNYWdpY1Byb3h5IG9iamVjdHMgYW5kDQogICAgICAgICAgICAgICAgIyBub3Qgc2V0IG9uIHRoZSBpbnN0YW5jZSBpdHNlbGYNCiAgICAgICAgICAgICAgICByZXR1cm4NCg0KICAgICAgICBpZiBuYW1lIGluIHNlbGYuX19kaWN0X186DQogICAgICAgICAgICBvYmplY3QuX19kZWxhdHRyX18oc2VsZiwgbmFtZSkNCg0KICAgICAgICBvYmogPSBzZWxmLl9tb2NrX2NoaWxkcmVuLmdldChuYW1lLCBfbWlzc2luZykNCiAgICAgICAgaWYgb2JqIGlzIF9kZWxldGVkOg0KICAgICAgICAgICAgcmFpc2UgQXR0cmlidXRlRXJyb3IobmFtZSkNCiAgICAgICAgaWYgb2JqIGlzIG5vdCBfbWlzc2luZzoNCiAgICAgICAgICAgIGRlbCBzZWxmLl9tb2NrX2NoaWxkcmVuW25hbWVdDQogICAgICAgIHNlbGYuX21vY2tfY2hpbGRyZW5bbmFtZV0gPSBfZGVsZXRlZA0KDQoNCg0KICAgIGRlZiBfZm9ybWF0X21vY2tfY2FsbF9zaWduYXR1cmUoc2VsZiwgYXJncywga3dhcmdzKToNCiAgICAgICAgbmFtZSA9IHNlbGYuX21vY2tfbmFtZSBvciAnbW9jaycNCiAgICAgICAgcmV0dXJuIF9mb3JtYXRfY2FsbF9zaWduYXR1cmUobmFtZSwgYXJncywga3dhcmdzKQ0KDQoNCiAgICBkZWYgX2Zvcm1hdF9tb2NrX2ZhaWx1cmVfbWVzc2FnZShzZWxmLCBhcmdzLCBrd2FyZ3MpOg0KICAgICAgICBtZXNzYWdlID0gJ0V4cGVjdGVkIGNhbGw6ICVzXG5BY3R1YWwgY2FsbDogJXMnDQogICAgICAgIGV4cGVjdGVkX3N0cmluZyA9IHNlbGYuX2Zvcm1hdF9tb2NrX2NhbGxfc2lnbmF0dXJlKGFyZ3MsIGt3YXJncykNCiAgICAgICAgY2FsbF9hcmdzID0gc2VsZi5jYWxsX2FyZ3MNCiAgICAgICAgaWYgbGVuKGNhbGxfYXJncykgPT0gMzoNCiAgICAgICAgICAgIGNhbGxfYXJncyA9IGNhbGxfYXJnc1sxOl0NCiAgICAgICAgYWN0dWFsX3N0cmluZyA9IHNlbGYuX2Zvcm1hdF9tb2NrX2NhbGxfc2lnbmF0dXJlKCpjYWxsX2FyZ3MpDQogICAgICAgIHJldHVybiBtZXNzYWdlICUgKGV4cGVjdGVkX3N0cmluZywgYWN0dWFsX3N0cmluZykNCg0KDQogICAgZGVmIGFzc2VydF9jYWxsZWRfd2l0aChfbW9ja19zZWxmLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICAiIiJhc3NlcnQgdGhhdCB0aGUgbW9jayB3YXMgY2FsbGVkIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuDQoNCiAgICAgICAgUmFpc2VzIGFuIEFzc2VydGlvbkVycm9yIGlmIHRoZSBhcmdzIGFuZCBrZXl3b3JkIGFyZ3MgcGFzc2VkIGluIGFyZQ0KICAgICAgICBkaWZmZXJlbnQgdG8gdGhlIGxhc3QgY2FsbCB0byB0aGUgbW9jay4iIiINCiAgICAgICAgc2VsZiA9IF9tb2NrX3NlbGYNCiAgICAgICAgaWYgc2VsZi5jYWxsX2FyZ3MgaXMgTm9uZToNCiAgICAgICAgICAgIGV4cGVjdGVkID0gc2VsZi5fZm9ybWF0X21vY2tfY2FsbF9zaWduYXR1cmUoYXJncywga3dhcmdzKQ0KICAgICAgICAgICAgcmFpc2UgQXNzZXJ0aW9uRXJyb3IoJ0V4cGVjdGVkIGNhbGw6ICVzXG5Ob3QgY2FsbGVkJyAlIChleHBlY3RlZCwpKQ0KDQogICAgICAgIGlmIHNlbGYuY2FsbF9hcmdzICE9IChhcmdzLCBrd2FyZ3MpOg0KICAgICAgICAgICAgbXNnID0gc2VsZi5fZm9ybWF0X21vY2tfZmFpbHVyZV9tZXNzYWdlKGFyZ3MsIGt3YXJncykNCiAgICAgICAgICAgIHJhaXNlIEFzc2VydGlvbkVycm9yKG1zZykNCg0KDQogICAgZGVmIGFzc2VydF9jYWxsZWRfb25jZV93aXRoKF9tb2NrX3NlbGYsICphcmdzLCAqKmt3YXJncyk6DQogICAgICAgICIiImFzc2VydCB0aGF0IHRoZSBtb2NrIHdhcyBjYWxsZWQgZXhhY3RseSBvbmNlIGFuZCB3aXRoIHRoZSBzcGVjaWZpZWQNCiAgICAgICAgYXJndW1lbnRzLiIiIg0KICAgICAgICBzZWxmID0gX21vY2tfc2VsZg0KICAgICAgICBpZiBub3Qgc2VsZi5jYWxsX2NvdW50ID09IDE6DQogICAgICAgICAgICBtc2cgPSAoIkV4cGVjdGVkIHRvIGJlIGNhbGxlZCBvbmNlLiBDYWxsZWQgJXMgdGltZXMuIiAlDQogICAgICAgICAgICAgICAgICAgc2VsZi5jYWxsX2NvdW50KQ0KICAgICAgICAgICAgcmFpc2UgQXNzZXJ0aW9uRXJyb3IobXNnKQ0KICAgICAgICByZXR1cm4gc2VsZi5hc3NlcnRfY2FsbGVkX3dpdGgoKmFyZ3MsICoqa3dhcmdzKQ0KDQoNCiAgICBkZWYgYXNzZXJ0X2hhc19jYWxscyhzZWxmLCBjYWxscywgYW55X29yZGVyPUZhbHNlKToNCiAgICAgICAgIiIiYXNzZXJ0IHRoZSBtb2NrIGhhcyBiZWVuIGNhbGxlZCB3aXRoIHRoZSBzcGVjaWZpZWQgY2FsbHMuDQogICAgICAgIFRoZSBgbW9ja19jYWxsc2AgbGlzdCBpcyBjaGVja2VkIGZvciB0aGUgY2FsbHMuDQoNCiAgICAgICAgSWYgYGFueV9vcmRlcmAgaXMgRmFsc2UgKHRoZSBkZWZhdWx0KSB0aGVuIHRoZSBjYWxscyBtdXN0IGJlDQogICAgICAgIHNlcXVlbnRpYWwuIFRoZXJlIGNhbiBiZSBleHRyYSBjYWxscyBiZWZvcmUgb3IgYWZ0ZXIgdGhlDQogICAgICAgIHNwZWNpZmllZCBjYWxscy4NCg0KICAgICAgICBJZiBgYW55X29yZGVyYCBpcyBUcnVlIHRoZW4gdGhlIGNhbGxzIGNhbiBiZSBpbiBhbnkgb3JkZXIsIGJ1dA0KICAgICAgICB0aGV5IG11c3QgYWxsIGFwcGVhciBpbiBgbW9ja19jYWxsc2AuIiIiDQogICAgICAgIGlmIG5vdCBhbnlfb3JkZXI6DQogICAgICAgICAgICBpZiBjYWxscyBub3QgaW4gc2VsZi5tb2NrX2NhbGxzOg0KICAgICAgICAgICAgICAgIHJhaXNlIEFzc2VydGlvbkVycm9yKA0KICAgICAgICAgICAgICAgICAgICAnQ2FsbHMgbm90IGZvdW5kLlxuRXhwZWN0ZWQ6ICVyXG4nDQogICAgICAgICAgICAgICAgICAgICdBY3R1YWw6ICVyJyAlIChjYWxscywgc2VsZi5tb2NrX2NhbGxzKQ0KICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgIHJldHVybg0KDQogICAgICAgIGFsbF9jYWxscyA9IGxpc3Qoc2VsZi5tb2NrX2NhbGxzKQ0KDQogICAgICAgIG5vdF9mb3VuZCA9IFtdDQogICAgICAgIGZvciBrYWxsIGluIGNhbGxzOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGFsbF9jYWxscy5yZW1vdmUoa2FsbCkNCiAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgICAgICAgICAgICAgIG5vdF9mb3VuZC5hcHBlbmQoa2FsbCkNCiAgICAgICAgaWYgbm90X2ZvdW5kOg0KICAgICAgICAgICAgcmFpc2UgQXNzZXJ0aW9uRXJyb3IoDQogICAgICAgICAgICAgICAgJyVyIG5vdCBhbGwgZm91bmQgaW4gY2FsbCBsaXN0JyAlICh0dXBsZShub3RfZm91bmQpLCkNCiAgICAgICAgICAgICkNCg0KDQogICAgZGVmIGFzc2VydF9hbnlfY2FsbChzZWxmLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICAiIiJhc3NlcnQgdGhlIG1vY2sgaGFzIGJlZW4gY2FsbGVkIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuDQoNCiAgICAgICAgVGhlIGFzc2VydCBwYXNzZXMgaWYgdGhlIG1vY2sgaGFzICpldmVyKiBiZWVuIGNhbGxlZCwgdW5saWtlDQogICAgICAgIGBhc3NlcnRfY2FsbGVkX3dpdGhgIGFuZCBgYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGhgIHRoYXQgb25seSBwYXNzIGlmDQogICAgICAgIHRoZSBjYWxsIGlzIHRoZSBtb3N0IHJlY2VudCBvbmUuIiIiDQogICAgICAgIGthbGwgPSBjYWxsKCphcmdzLCAqKmt3YXJncykNCiAgICAgICAgaWYga2FsbCBub3QgaW4gc2VsZi5jYWxsX2FyZ3NfbGlzdDoNCiAgICAgICAgICAgIGV4cGVjdGVkX3N0cmluZyA9IHNlbGYuX2Zvcm1hdF9tb2NrX2NhbGxfc2lnbmF0dXJlKGFyZ3MsIGt3YXJncykNCiAgICAgICAgICAgIHJhaXNlIEFzc2VydGlvbkVycm9yKA0KICAgICAgICAgICAgICAgICclcyBjYWxsIG5vdCBmb3VuZCcgJSBleHBlY3RlZF9zdHJpbmcNCiAgICAgICAgICAgICkNCg0KDQogICAgZGVmIF9nZXRfY2hpbGRfbW9jayhzZWxmLCAqKmt3KToNCiAgICAgICAgIiIiQ3JlYXRlIHRoZSBjaGlsZCBtb2NrcyBmb3IgYXR0cmlidXRlcyBhbmQgcmV0dXJuIHZhbHVlLg0KICAgICAgICBCeSBkZWZhdWx0IGNoaWxkIG1vY2tzIHdpbGwgYmUgdGhlIHNhbWUgdHlwZSBhcyB0aGUgcGFyZW50Lg0KICAgICAgICBTdWJjbGFzc2VzIG9mIE1vY2sgbWF5IHdhbnQgdG8gb3ZlcnJpZGUgdGhpcyB0byBjdXN0b21pemUgdGhlIHdheQ0KICAgICAgICBjaGlsZCBtb2NrcyBhcmUgbWFkZS4NCg0KICAgICAgICBGb3Igbm9uLWNhbGxhYmxlIG1vY2tzIHRoZSBjYWxsYWJsZSB2YXJpYW50IHdpbGwgYmUgdXNlZCAocmF0aGVyIHRoYW4NCiAgICAgICAgYW55IGN1c3RvbSBzdWJjbGFzcykuIiIiDQogICAgICAgIF90eXBlID0gdHlwZShzZWxmKQ0KICAgICAgICBpZiBub3QgaXNzdWJjbGFzcyhfdHlwZSwgQ2FsbGFibGVNaXhpbik6DQogICAgICAgICAgICBpZiBpc3N1YmNsYXNzKF90eXBlLCBOb25DYWxsYWJsZU1hZ2ljTW9jayk6DQogICAgICAgICAgICAgICAga2xhc3MgPSBNYWdpY01vY2sNCiAgICAgICAgICAgIGVsaWYgaXNzdWJjbGFzcyhfdHlwZSwgTm9uQ2FsbGFibGVNb2NrKSA6DQogICAgICAgICAgICAgICAga2xhc3MgPSBNb2NrDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBrbGFzcyA9IF90eXBlLl9fbXJvX19bMV0NCiAgICAgICAgcmV0dXJuIGtsYXNzKCoqa3cpDQoNCg0KDQpkZWYgX3RyeV9pdGVyKG9iaik6DQogICAgaWYgb2JqIGlzIE5vbmU6DQogICAgICAgIHJldHVybiBvYmoNCiAgICBpZiBfaXNfZXhjZXB0aW9uKG9iaik6DQogICAgICAgIHJldHVybiBvYmoNCiAgICBpZiBfY2FsbGFibGUob2JqKToNCiAgICAgICAgcmV0dXJuIG9iag0KICAgIHRyeToNCiAgICAgICAgcmV0dXJuIGl0ZXIob2JqKQ0KICAgIGV4Y2VwdCBUeXBlRXJyb3I6DQogICAgICAgICMgWFhYWCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQ0KICAgICAgICAjIGJ1dCB0aGlzIHdpbGwgYmxvdyB1cCBvbiBmaXJzdCBjYWxsIC0gc28gbWF5YmUgd2Ugc2hvdWxkIGZhaWwgZWFybHk/DQogICAgICAgIHJldHVybiBvYmoNCg0KDQoNCmNsYXNzIENhbGxhYmxlTWl4aW4oQmFzZSk6DQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgc3BlYz1Ob25lLCBzaWRlX2VmZmVjdD1Ob25lLCByZXR1cm5fdmFsdWU9REVGQVVMVCwNCiAgICAgICAgICAgICAgICAgd3JhcHM9Tm9uZSwgbmFtZT1Ob25lLCBzcGVjX3NldD1Ob25lLCBwYXJlbnQ9Tm9uZSwNCiAgICAgICAgICAgICAgICAgX3NwZWNfc3RhdGU9Tm9uZSwgX25ld19uYW1lPScnLCBfbmV3X3BhcmVudD1Ob25lLCAqKmt3YXJncyk6DQogICAgICAgIHNlbGYuX19kaWN0X19bJ19tb2NrX3JldHVybl92YWx1ZSddID0gcmV0dXJuX3ZhbHVlDQoNCiAgICAgICAgX3NhZmVfc3VwZXIoQ2FsbGFibGVNaXhpbiwgc2VsZikuX19pbml0X18oDQogICAgICAgICAgICBzcGVjLCB3cmFwcywgbmFtZSwgc3BlY19zZXQsIHBhcmVudCwNCiAgICAgICAgICAgIF9zcGVjX3N0YXRlLCBfbmV3X25hbWUsIF9uZXdfcGFyZW50LCAqKmt3YXJncw0KICAgICAgICApDQoNCiAgICAgICAgc2VsZi5zaWRlX2VmZmVjdCA9IHNpZGVfZWZmZWN0DQoNCg0KICAgIGRlZiBfbW9ja19jaGVja19zaWcoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgIyBzdHViIG1ldGhvZCB0aGF0IGNhbiBiZSByZXBsYWNlZCB3aXRoIG9uZSB3aXRoIGEgc3BlY2lmaWMgc2lnbmF0dXJlDQogICAgICAgIHBhc3MNCg0KDQogICAgZGVmIF9fY2FsbF9fKF9tb2NrX3NlbGYsICphcmdzLCAqKmt3YXJncyk6DQogICAgICAgICMgY2FuJ3QgdXNlIHNlbGYgaW4tY2FzZSBhIGZ1bmN0aW9uIC8gbWV0aG9kIHdlIGFyZSBtb2NraW5nIHVzZXMgc2VsZg0KICAgICAgICAjIGluIHRoZSBzaWduYXR1cmUNCiAgICAgICAgX21vY2tfc2VsZi5fbW9ja19jaGVja19zaWcoKmFyZ3MsICoqa3dhcmdzKQ0KICAgICAgICByZXR1cm4gX21vY2tfc2VsZi5fbW9ja19jYWxsKCphcmdzLCAqKmt3YXJncykNCg0KDQogICAgZGVmIF9tb2NrX2NhbGwoX21vY2tfc2VsZiwgKmFyZ3MsICoqa3dhcmdzKToNCiAgICAgICAgc2VsZiA9IF9tb2NrX3NlbGYNCiAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlDQogICAgICAgIHNlbGYuY2FsbF9jb3VudCArPSAxDQogICAgICAgIHNlbGYuY2FsbF9hcmdzID0gX0NhbGwoKGFyZ3MsIGt3YXJncyksIHR3bz1UcnVlKQ0KICAgICAgICBzZWxmLmNhbGxfYXJnc19saXN0LmFwcGVuZChfQ2FsbCgoYXJncywga3dhcmdzKSwgdHdvPVRydWUpKQ0KDQogICAgICAgIF9uZXdfbmFtZSA9IHNlbGYuX21vY2tfbmV3X25hbWUNCiAgICAgICAgX25ld19wYXJlbnQgPSBzZWxmLl9tb2NrX25ld19wYXJlbnQNCiAgICAgICAgc2VsZi5tb2NrX2NhbGxzLmFwcGVuZChfQ2FsbCgoJycsIGFyZ3MsIGt3YXJncykpKQ0KDQogICAgICAgIHNlZW4gPSBzZXQoKQ0KICAgICAgICBza2lwX25leHRfZG90ID0gX25ld19uYW1lID09ICcoKScNCiAgICAgICAgZG9fbWV0aG9kX2NhbGxzID0gc2VsZi5fbW9ja19wYXJlbnQgaXMgbm90IE5vbmUNCiAgICAgICAgbmFtZSA9IHNlbGYuX21vY2tfbmFtZQ0KICAgICAgICB3aGlsZSBfbmV3X3BhcmVudCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIHRoaXNfbW9ja19jYWxsID0gX0NhbGwoKF9uZXdfbmFtZSwgYXJncywga3dhcmdzKSkNCiAgICAgICAgICAgIGlmIF9uZXdfcGFyZW50Ll9tb2NrX25ld19uYW1lOg0KICAgICAgICAgICAgICAgIGRvdCA9ICcuJw0KICAgICAgICAgICAgICAgIGlmIHNraXBfbmV4dF9kb3Q6DQogICAgICAgICAgICAgICAgICAgIGRvdCA9ICcnDQoNCiAgICAgICAgICAgICAgICBza2lwX25leHRfZG90ID0gRmFsc2UNCiAgICAgICAgICAgICAgICBpZiBfbmV3X3BhcmVudC5fbW9ja19uZXdfbmFtZSA9PSAnKCknOg0KICAgICAgICAgICAgICAgICAgICBza2lwX25leHRfZG90ID0gVHJ1ZQ0KDQogICAgICAgICAgICAgICAgX25ld19uYW1lID0gX25ld19wYXJlbnQuX21vY2tfbmV3X25hbWUgKyBkb3QgKyBfbmV3X25hbWUNCg0KICAgICAgICAgICAgaWYgZG9fbWV0aG9kX2NhbGxzOg0KICAgICAgICAgICAgICAgIGlmIF9uZXdfbmFtZSA9PSBuYW1lOg0KICAgICAgICAgICAgICAgICAgICB0aGlzX21ldGhvZF9jYWxsID0gdGhpc19tb2NrX2NhbGwNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICB0aGlzX21ldGhvZF9jYWxsID0gX0NhbGwoKG5hbWUsIGFyZ3MsIGt3YXJncykpDQogICAgICAgICAgICAgICAgX25ld19wYXJlbnQubWV0aG9kX2NhbGxzLmFwcGVuZCh0aGlzX21ldGhvZF9jYWxsKQ0KDQogICAgICAgICAgICAgICAgZG9fbWV0aG9kX2NhbGxzID0gX25ld19wYXJlbnQuX21vY2tfcGFyZW50IGlzIG5vdCBOb25lDQogICAgICAgICAgICAgICAgaWYgZG9fbWV0aG9kX2NhbGxzOg0KICAgICAgICAgICAgICAgICAgICBuYW1lID0gX25ld19wYXJlbnQuX21vY2tfbmFtZSArICcuJyArIG5hbWUNCg0KICAgICAgICAgICAgX25ld19wYXJlbnQubW9ja19jYWxscy5hcHBlbmQodGhpc19tb2NrX2NhbGwpDQogICAgICAgICAgICBfbmV3X3BhcmVudCA9IF9uZXdfcGFyZW50Ll9tb2NrX25ld19wYXJlbnQNCg0KICAgICAgICAgICAgIyB1c2UgaWRzIGhlcmUgc28gYXMgbm90IHRvIGNhbGwgX19oYXNoX18gb24gdGhlIG1vY2tzDQogICAgICAgICAgICBfbmV3X3BhcmVudF9pZCA9IGlkKF9uZXdfcGFyZW50KQ0KICAgICAgICAgICAgaWYgX25ld19wYXJlbnRfaWQgaW4gc2VlbjoNCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgc2Vlbi5hZGQoX25ld19wYXJlbnRfaWQpDQoNCiAgICAgICAgcmV0X3ZhbCA9IERFRkFVTFQNCiAgICAgICAgZWZmZWN0ID0gc2VsZi5zaWRlX2VmZmVjdA0KICAgICAgICBpZiBlZmZlY3QgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBpZiBfaXNfZXhjZXB0aW9uKGVmZmVjdCk6DQogICAgICAgICAgICAgICAgcmFpc2UgZWZmZWN0DQoNCiAgICAgICAgICAgIGlmIG5vdCBfY2FsbGFibGUoZWZmZWN0KToNCiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXh0KGVmZmVjdCkNCiAgICAgICAgICAgICAgICBpZiBfaXNfZXhjZXB0aW9uKHJlc3VsdCk6DQogICAgICAgICAgICAgICAgICAgIHJhaXNlIHJlc3VsdA0KICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQNCg0KICAgICAgICAgICAgcmV0X3ZhbCA9IGVmZmVjdCgqYXJncywgKiprd2FyZ3MpDQogICAgICAgICAgICBpZiByZXRfdmFsIGlzIERFRkFVTFQ6DQogICAgICAgICAgICAgICAgcmV0X3ZhbCA9IHNlbGYucmV0dXJuX3ZhbHVlDQoNCiAgICAgICAgaWYgKHNlbGYuX21vY2tfd3JhcHMgaXMgbm90IE5vbmUgYW5kDQogICAgICAgICAgICAgc2VsZi5fbW9ja19yZXR1cm5fdmFsdWUgaXMgREVGQVVMVCk6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbW9ja193cmFwcygqYXJncywgKiprd2FyZ3MpDQogICAgICAgIGlmIHJldF92YWwgaXMgREVGQVVMVDoNCiAgICAgICAgICAgIHJldF92YWwgPSBzZWxmLnJldHVybl92YWx1ZQ0KICAgICAgICByZXR1cm4gcmV0X3ZhbA0KDQoNCg0KY2xhc3MgTW9jayhDYWxsYWJsZU1peGluLCBOb25DYWxsYWJsZU1vY2spOg0KICAgICIiIg0KICAgIENyZWF0ZSBhIG5ldyBgTW9ja2Agb2JqZWN0LiBgTW9ja2AgdGFrZXMgc2V2ZXJhbCBvcHRpb25hbCBhcmd1bWVudHMNCiAgICB0aGF0IHNwZWNpZnkgdGhlIGJlaGF2aW91ciBvZiB0aGUgTW9jayBvYmplY3Q6DQoNCiAgICAqIGBzcGVjYDogVGhpcyBjYW4gYmUgZWl0aGVyIGEgbGlzdCBvZiBzdHJpbmdzIG9yIGFuIGV4aXN0aW5nIG9iamVjdCAoYQ0KICAgICAgY2xhc3Mgb3IgaW5zdGFuY2UpIHRoYXQgYWN0cyBhcyB0aGUgc3BlY2lmaWNhdGlvbiBmb3IgdGhlIG1vY2sgb2JqZWN0LiBJZg0KICAgICAgeW91IHBhc3MgaW4gYW4gb2JqZWN0IHRoZW4gYSBsaXN0IG9mIHN0cmluZ3MgaXMgZm9ybWVkIGJ5IGNhbGxpbmcgZGlyIG9uDQogICAgICB0aGUgb2JqZWN0IChleGNsdWRpbmcgdW5zdXBwb3J0ZWQgbWFnaWMgYXR0cmlidXRlcyBhbmQgbWV0aG9kcykuIEFjY2Vzc2luZw0KICAgICAgYW55IGF0dHJpYnV0ZSBub3QgaW4gdGhpcyBsaXN0IHdpbGwgcmFpc2UgYW4gYEF0dHJpYnV0ZUVycm9yYC4NCg0KICAgICAgSWYgYHNwZWNgIGlzIGFuIG9iamVjdCAocmF0aGVyIHRoYW4gYSBsaXN0IG9mIHN0cmluZ3MpIHRoZW4NCiAgICAgIGBtb2NrLl9fY2xhc3NfX2AgcmV0dXJucyB0aGUgY2xhc3Mgb2YgdGhlIHNwZWMgb2JqZWN0LiBUaGlzIGFsbG93cyBtb2Nrcw0KICAgICAgdG8gcGFzcyBgaXNpbnN0YW5jZWAgdGVzdHMuDQoNCiAgICAqIGBzcGVjX3NldGA6IEEgc3RyaWN0ZXIgdmFyaWFudCBvZiBgc3BlY2AuIElmIHVzZWQsIGF0dGVtcHRpbmcgdG8gKnNldCoNCiAgICAgIG9yIGdldCBhbiBhdHRyaWJ1dGUgb24gdGhlIG1vY2sgdGhhdCBpc24ndCBvbiB0aGUgb2JqZWN0IHBhc3NlZCBhcw0KICAgICAgYHNwZWNfc2V0YCB3aWxsIHJhaXNlIGFuIGBBdHRyaWJ1dGVFcnJvcmAuDQoNCiAgICAqIGBzaWRlX2VmZmVjdGA6IEEgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSBNb2NrIGlzIGNhbGxlZC4gU2VlDQogICAgICB0aGUgYHNpZGVfZWZmZWN0YCBhdHRyaWJ1dGUuIFVzZWZ1bCBmb3IgcmFpc2luZyBleGNlcHRpb25zIG9yDQogICAgICBkeW5hbWljYWxseSBjaGFuZ2luZyByZXR1cm4gdmFsdWVzLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggdGhlIHNhbWUNCiAgICAgIGFyZ3VtZW50cyBhcyB0aGUgbW9jaywgYW5kIHVubGVzcyBpdCByZXR1cm5zIGBERUZBVUxUYCwgdGhlIHJldHVybg0KICAgICAgdmFsdWUgb2YgdGhpcyBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSByZXR1cm4gdmFsdWUuDQoNCiAgICAgIElmIGBzaWRlX2VmZmVjdGAgaXMgYW4gaXRlcmFibGUgdGhlbiBlYWNoIGNhbGwgdG8gdGhlIG1vY2sgd2lsbCByZXR1cm4NCiAgICAgIHRoZSBuZXh0IHZhbHVlIGZyb20gdGhlIGl0ZXJhYmxlLiBJZiBhbnkgb2YgdGhlIG1lbWJlcnMgb2YgdGhlIGl0ZXJhYmxlDQogICAgICBhcmUgZXhjZXB0aW9ucyB0aGV5IHdpbGwgYmUgcmFpc2VkIGluc3RlYWQgb2YgcmV0dXJuZWQuDQoNCiAgICAgIElmIGBzaWRlX2VmZmVjdGAgaXMgYW4gaXRlcmFibGUgdGhlbiBlYWNoIGNhbGwgdG8gdGhlIG1vY2sgd2lsbCByZXR1cm4NCiAgICAgIHRoZSBuZXh0IHZhbHVlIGZyb20gdGhlIGl0ZXJhYmxlLg0KDQogICAgKiBgcmV0dXJuX3ZhbHVlYDogVGhlIHZhbHVlIHJldHVybmVkIHdoZW4gdGhlIG1vY2sgaXMgY2FsbGVkLiBCeSBkZWZhdWx0DQogICAgICB0aGlzIGlzIGEgbmV3IE1vY2sgKGNyZWF0ZWQgb24gZmlyc3QgYWNjZXNzKS4gU2VlIHRoZQ0KICAgICAgYHJldHVybl92YWx1ZWAgYXR0cmlidXRlLg0KDQogICAgKiBgd3JhcHNgOiBJdGVtIGZvciB0aGUgbW9jayBvYmplY3QgdG8gd3JhcC4gSWYgYHdyYXBzYCBpcyBub3QgTm9uZSB0aGVuDQogICAgICBjYWxsaW5nIHRoZSBNb2NrIHdpbGwgcGFzcyB0aGUgY2FsbCB0aHJvdWdoIHRvIHRoZSB3cmFwcGVkIG9iamVjdA0KICAgICAgKHJldHVybmluZyB0aGUgcmVhbCByZXN1bHQpLiBBdHRyaWJ1dGUgYWNjZXNzIG9uIHRoZSBtb2NrIHdpbGwgcmV0dXJuIGENCiAgICAgIE1vY2sgb2JqZWN0IHRoYXQgd3JhcHMgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9mIHRoZSB3cmFwcGVkIG9iamVjdA0KICAgICAgKHNvIGF0dGVtcHRpbmcgdG8gYWNjZXNzIGFuIGF0dHJpYnV0ZSB0aGF0IGRvZXNuJ3QgZXhpc3Qgd2lsbCByYWlzZSBhbg0KICAgICAgYEF0dHJpYnV0ZUVycm9yYCkuDQoNCiAgICAgIElmIHRoZSBtb2NrIGhhcyBhbiBleHBsaWNpdCBgcmV0dXJuX3ZhbHVlYCBzZXQgdGhlbiBjYWxscyBhcmUgbm90IHBhc3NlZA0KICAgICAgdG8gdGhlIHdyYXBwZWQgb2JqZWN0IGFuZCB0aGUgYHJldHVybl92YWx1ZWAgaXMgcmV0dXJuZWQgaW5zdGVhZC4NCg0KICAgICogYG5hbWVgOiBJZiB0aGUgbW9jayBoYXMgYSBuYW1lIHRoZW4gaXQgd2lsbCBiZSB1c2VkIGluIHRoZSByZXByIG9mIHRoZQ0KICAgICAgbW9jay4gVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuIFRoZSBuYW1lIGlzIHByb3BhZ2F0ZWQgdG8gY2hpbGQNCiAgICAgIG1vY2tzLg0KDQogICAgTW9ja3MgY2FuIGFsc28gYmUgY2FsbGVkIHdpdGggYXJiaXRyYXJ5IGtleXdvcmQgYXJndW1lbnRzLiBUaGVzZSB3aWxsIGJlDQogICAgdXNlZCB0byBzZXQgYXR0cmlidXRlcyBvbiB0aGUgbW9jayBhZnRlciBpdCBpcyBjcmVhdGVkLg0KICAgICIiIg0KDQoNCg0KZGVmIF9kb3RfbG9va3VwKHRoaW5nLCBjb21wLCBpbXBvcnRfcGF0aCk6DQogICAgdHJ5Og0KICAgICAgICByZXR1cm4gZ2V0YXR0cih0aGluZywgY29tcCkNCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgIF9faW1wb3J0X18oaW1wb3J0X3BhdGgpDQogICAgICAgIHJldHVybiBnZXRhdHRyKHRoaW5nLCBjb21wKQ0KDQoNCmRlZiBfaW1wb3J0ZXIodGFyZ2V0KToNCiAgICBjb21wb25lbnRzID0gdGFyZ2V0LnNwbGl0KCcuJykNCiAgICBpbXBvcnRfcGF0aCA9IGNvbXBvbmVudHMucG9wKDApDQogICAgdGhpbmcgPSBfX2ltcG9ydF9fKGltcG9ydF9wYXRoKQ0KDQogICAgZm9yIGNvbXAgaW4gY29tcG9uZW50czoNCiAgICAgICAgaW1wb3J0X3BhdGggKz0gIi4lcyIgJSBjb21wDQogICAgICAgIHRoaW5nID0gX2RvdF9sb29rdXAodGhpbmcsIGNvbXAsIGltcG9ydF9wYXRoKQ0KICAgIHJldHVybiB0aGluZw0KDQoNCmRlZiBfaXNfc3RhcnRlZChwYXRjaGVyKToNCiAgICAjIFhYWFggaG9ycmlibGUNCiAgICByZXR1cm4gaGFzYXR0cihwYXRjaGVyLCAnaXNfbG9jYWwnKQ0KDQoNCmNsYXNzIF9wYXRjaChvYmplY3QpOg0KDQogICAgYXR0cmlidXRlX25hbWUgPSBOb25lDQogICAgX2FjdGl2ZV9wYXRjaGVzID0gc2V0KCkNCg0KICAgIGRlZiBfX2luaXRfXygNCiAgICAgICAgICAgIHNlbGYsIGdldHRlciwgYXR0cmlidXRlLCBuZXcsIHNwZWMsIGNyZWF0ZSwNCiAgICAgICAgICAgIHNwZWNfc2V0LCBhdXRvc3BlYywgbmV3X2NhbGxhYmxlLCBrd2FyZ3MNCiAgICAgICAgKToNCiAgICAgICAgaWYgbmV3X2NhbGxhYmxlIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgaWYgbmV3IGlzIG5vdCBERUZBVUxUOg0KICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoDQogICAgICAgICAgICAgICAgICAgICJDYW5ub3QgdXNlICduZXcnIGFuZCAnbmV3X2NhbGxhYmxlJyB0b2dldGhlciINCiAgICAgICAgICAgICAgICApDQogICAgICAgICAgICBpZiBhdXRvc3BlYyBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKA0KICAgICAgICAgICAgICAgICAgICAiQ2Fubm90IHVzZSAnYXV0b3NwZWMnIGFuZCAnbmV3X2NhbGxhYmxlJyB0b2dldGhlciINCiAgICAgICAgICAgICAgICApDQoNCiAgICAgICAgc2VsZi5nZXR0ZXIgPSBnZXR0ZXINCiAgICAgICAgc2VsZi5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGUNCiAgICAgICAgc2VsZi5uZXcgPSBuZXcNCiAgICAgICAgc2VsZi5uZXdfY2FsbGFibGUgPSBuZXdfY2FsbGFibGUNCiAgICAgICAgc2VsZi5zcGVjID0gc3BlYw0KICAgICAgICBzZWxmLmNyZWF0ZSA9IGNyZWF0ZQ0KICAgICAgICBzZWxmLmhhc19sb2NhbCA9IEZhbHNlDQogICAgICAgIHNlbGYuc3BlY19zZXQgPSBzcGVjX3NldA0KICAgICAgICBzZWxmLmF1dG9zcGVjID0gYXV0b3NwZWMNCiAgICAgICAgc2VsZi5rd2FyZ3MgPSBrd2FyZ3MNCiAgICAgICAgc2VsZi5hZGRpdGlvbmFsX3BhdGNoZXJzID0gW10NCg0KDQogICAgZGVmIGNvcHkoc2VsZik6DQogICAgICAgIHBhdGNoZXIgPSBfcGF0Y2goDQogICAgICAgICAgICBzZWxmLmdldHRlciwgc2VsZi5hdHRyaWJ1dGUsIHNlbGYubmV3LCBzZWxmLnNwZWMsDQogICAgICAgICAgICBzZWxmLmNyZWF0ZSwgc2VsZi5zcGVjX3NldCwNCiAgICAgICAgICAgIHNlbGYuYXV0b3NwZWMsIHNlbGYubmV3X2NhbGxhYmxlLCBzZWxmLmt3YXJncw0KICAgICAgICApDQogICAgICAgIHBhdGNoZXIuYXR0cmlidXRlX25hbWUgPSBzZWxmLmF0dHJpYnV0ZV9uYW1lDQogICAgICAgIHBhdGNoZXIuYWRkaXRpb25hbF9wYXRjaGVycyA9IFsNCiAgICAgICAgICAgIHAuY29weSgpIGZvciBwIGluIHNlbGYuYWRkaXRpb25hbF9wYXRjaGVycw0KICAgICAgICBdDQogICAgICAgIHJldHVybiBwYXRjaGVyDQoNCg0KICAgIGRlZiBfX2NhbGxfXyhzZWxmLCBmdW5jKToNCiAgICAgICAgaWYgaXNpbnN0YW5jZShmdW5jLCB0eXBlKToNCiAgICAgICAgICAgIHJldHVybiBzZWxmLmRlY29yYXRlX2NsYXNzKGZ1bmMpDQogICAgICAgIHJldHVybiBzZWxmLmRlY29yYXRlX2NhbGxhYmxlKGZ1bmMpDQoNCg0KICAgIGRlZiBkZWNvcmF0ZV9jbGFzcyhzZWxmLCBrbGFzcyk6DQogICAgICAgIGZvciBhdHRyIGluIGRpcihrbGFzcyk6DQogICAgICAgICAgICBpZiBub3QgYXR0ci5zdGFydHN3aXRoKHBhdGNoLlRFU1RfUFJFRklYKToNCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KDQogICAgICAgICAgICBhdHRyX3ZhbHVlID0gZ2V0YXR0cihrbGFzcywgYXR0cikNCiAgICAgICAgICAgIGlmIG5vdCBoYXNhdHRyKGF0dHJfdmFsdWUsICJfX2NhbGxfXyIpOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgICAgIHBhdGNoZXIgPSBzZWxmLmNvcHkoKQ0KICAgICAgICAgICAgc2V0YXR0cihrbGFzcywgYXR0ciwgcGF0Y2hlcihhdHRyX3ZhbHVlKSkNCiAgICAgICAgcmV0dXJuIGtsYXNzDQoNCg0KICAgIGRlZiBkZWNvcmF0ZV9jYWxsYWJsZShzZWxmLCBmdW5jKToNCiAgICAgICAgaWYgaGFzYXR0cihmdW5jLCAncGF0Y2hpbmdzJyk6DQogICAgICAgICAgICBmdW5jLnBhdGNoaW5ncy5hcHBlbmQoc2VsZikNCiAgICAgICAgICAgIHJldHVybiBmdW5jDQoNCiAgICAgICAgQHdyYXBzKGZ1bmMpDQogICAgICAgIGRlZiBwYXRjaGVkKCphcmdzLCAqKmtleXdhcmdzKToNCiAgICAgICAgICAgIGV4dHJhX2FyZ3MgPSBbXQ0KICAgICAgICAgICAgZW50ZXJlZF9wYXRjaGVycyA9IFtdDQoNCiAgICAgICAgICAgIGV4Y19pbmZvID0gdHVwbGUoKQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGZvciBwYXRjaGluZyBpbiBwYXRjaGVkLnBhdGNoaW5nczoNCiAgICAgICAgICAgICAgICAgICAgYXJnID0gcGF0Y2hpbmcuX19lbnRlcl9fKCkNCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZF9wYXRjaGVycy5hcHBlbmQocGF0Y2hpbmcpDQogICAgICAgICAgICAgICAgICAgIGlmIHBhdGNoaW5nLmF0dHJpYnV0ZV9uYW1lIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgICAgICAgICAga2V5d2FyZ3MudXBkYXRlKGFyZykNCiAgICAgICAgICAgICAgICAgICAgZWxpZiBwYXRjaGluZy5uZXcgaXMgREVGQVVMVDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhX2FyZ3MuYXBwZW5kKGFyZykNCg0KICAgICAgICAgICAgICAgIGFyZ3MgKz0gdHVwbGUoZXh0cmFfYXJncykNCiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYygqYXJncywgKiprZXl3YXJncykNCiAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICBpZiAocGF0Y2hpbmcgbm90IGluIGVudGVyZWRfcGF0Y2hlcnMgYW5kDQogICAgICAgICAgICAgICAgICAgIF9pc19zdGFydGVkKHBhdGNoaW5nKSk6DQogICAgICAgICAgICAgICAgICAgICMgdGhlIHBhdGNoZXIgbWF5IGhhdmUgYmVlbiBzdGFydGVkLCBidXQgYW4gZXhjZXB0aW9uDQogICAgICAgICAgICAgICAgICAgICMgcmFpc2VkIHdoaWxzdCBlbnRlcmluZyBvbmUgb2YgaXRzIGFkZGl0aW9uYWxfcGF0Y2hlcnMNCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZF9wYXRjaGVycy5hcHBlbmQocGF0Y2hpbmcpDQogICAgICAgICAgICAgICAgIyBQYXNzIHRoZSBleGNlcHRpb24gdG8gX19leGl0X18NCiAgICAgICAgICAgICAgICBleGNfaW5mbyA9IHN5cy5leGNfaW5mbygpDQogICAgICAgICAgICAgICAgIyByZS1yYWlzZSB0aGUgZXhjZXB0aW9uDQogICAgICAgICAgICAgICAgcmFpc2UNCiAgICAgICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICAgICAgZm9yIHBhdGNoaW5nIGluIHJldmVyc2VkKGVudGVyZWRfcGF0Y2hlcnMpOg0KICAgICAgICAgICAgICAgICAgICBwYXRjaGluZy5fX2V4aXRfXygqZXhjX2luZm8pDQoNCiAgICAgICAgcGF0Y2hlZC5wYXRjaGluZ3MgPSBbc2VsZl0NCiAgICAgICAgcmV0dXJuIHBhdGNoZWQNCg0KDQogICAgZGVmIGdldF9vcmlnaW5hbChzZWxmKToNCiAgICAgICAgdGFyZ2V0ID0gc2VsZi5nZXR0ZXIoKQ0KICAgICAgICBuYW1lID0gc2VsZi5hdHRyaWJ1dGUNCg0KICAgICAgICBvcmlnaW5hbCA9IERFRkFVTFQNCiAgICAgICAgbG9jYWwgPSBGYWxzZQ0KDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIG9yaWdpbmFsID0gdGFyZ2V0Ll9fZGljdF9fW25hbWVdDQogICAgICAgIGV4Y2VwdCAoQXR0cmlidXRlRXJyb3IsIEtleUVycm9yKToNCiAgICAgICAgICAgIG9yaWdpbmFsID0gZ2V0YXR0cih0YXJnZXQsIG5hbWUsIERFRkFVTFQpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBsb2NhbCA9IFRydWUNCg0KICAgICAgICBpZiBub3Qgc2VsZi5jcmVhdGUgYW5kIG9yaWdpbmFsIGlzIERFRkFVTFQ6DQogICAgICAgICAgICByYWlzZSBBdHRyaWJ1dGVFcnJvcigNCiAgICAgICAgICAgICAgICAiJXMgZG9lcyBub3QgaGF2ZSB0aGUgYXR0cmlidXRlICVyIiAlICh0YXJnZXQsIG5hbWUpDQogICAgICAgICAgICApDQogICAgICAgIHJldHVybiBvcmlnaW5hbCwgbG9jYWwNCg0KDQogICAgZGVmIF9fZW50ZXJfXyhzZWxmKToNCiAgICAgICAgIiIiUGVyZm9ybSB0aGUgcGF0Y2guIiIiDQogICAgICAgIG5ldywgc3BlYywgc3BlY19zZXQgPSBzZWxmLm5ldywgc2VsZi5zcGVjLCBzZWxmLnNwZWNfc2V0DQogICAgICAgIGF1dG9zcGVjLCBrd2FyZ3MgPSBzZWxmLmF1dG9zcGVjLCBzZWxmLmt3YXJncw0KICAgICAgICBuZXdfY2FsbGFibGUgPSBzZWxmLm5ld19jYWxsYWJsZQ0KICAgICAgICBzZWxmLnRhcmdldCA9IHNlbGYuZ2V0dGVyKCkNCg0KICAgICAgICAjIG5vcm1hbGlzZSBGYWxzZSB0byBOb25lDQogICAgICAgIGlmIHNwZWMgaXMgRmFsc2U6DQogICAgICAgICAgICBzcGVjID0gTm9uZQ0KICAgICAgICBpZiBzcGVjX3NldCBpcyBGYWxzZToNCiAgICAgICAgICAgIHNwZWNfc2V0ID0gTm9uZQ0KICAgICAgICBpZiBhdXRvc3BlYyBpcyBGYWxzZToNCiAgICAgICAgICAgIGF1dG9zcGVjID0gTm9uZQ0KDQogICAgICAgIGlmIHNwZWMgaXMgbm90IE5vbmUgYW5kIGF1dG9zcGVjIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJDYW4ndCBzcGVjaWZ5IHNwZWMgYW5kIGF1dG9zcGVjIikNCiAgICAgICAgaWYgKChzcGVjIGlzIG5vdCBOb25lIG9yIGF1dG9zcGVjIGlzIG5vdCBOb25lKSBhbmQNCiAgICAgICAgICAgIHNwZWNfc2V0IG5vdCBpbiAoVHJ1ZSwgTm9uZSkpOg0KICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJDYW4ndCBwcm92aWRlIGV4cGxpY2l0IHNwZWNfc2V0ICphbmQqIHNwZWMgb3IgYXV0b3NwZWMiKQ0KDQogICAgICAgIG9yaWdpbmFsLCBsb2NhbCA9IHNlbGYuZ2V0X29yaWdpbmFsKCkNCg0KICAgICAgICBpZiBuZXcgaXMgREVGQVVMVCBhbmQgYXV0b3NwZWMgaXMgTm9uZToNCiAgICAgICAgICAgIGluaGVyaXQgPSBGYWxzZQ0KICAgICAgICAgICAgaWYgc3BlYyBpcyBUcnVlOg0KICAgICAgICAgICAgICAgICMgc2V0IHNwZWMgdG8gdGhlIG9iamVjdCB3ZSBhcmUgcmVwbGFjaW5nDQogICAgICAgICAgICAgICAgc3BlYyA9IG9yaWdpbmFsDQogICAgICAgICAgICAgICAgaWYgc3BlY19zZXQgaXMgVHJ1ZToNCiAgICAgICAgICAgICAgICAgICAgc3BlY19zZXQgPSBvcmlnaW5hbA0KICAgICAgICAgICAgICAgICAgICBzcGVjID0gTm9uZQ0KICAgICAgICAgICAgZWxpZiBzcGVjIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgIGlmIHNwZWNfc2V0IGlzIFRydWU6DQogICAgICAgICAgICAgICAgICAgIHNwZWNfc2V0ID0gc3BlYw0KICAgICAgICAgICAgICAgICAgICBzcGVjID0gTm9uZQ0KICAgICAgICAgICAgZWxpZiBzcGVjX3NldCBpcyBUcnVlOg0KICAgICAgICAgICAgICAgIHNwZWNfc2V0ID0gb3JpZ2luYWwNCg0KICAgICAgICAgICAgaWYgc3BlYyBpcyBub3QgTm9uZSBvciBzcGVjX3NldCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICBpZiBvcmlnaW5hbCBpcyBERUZBVUxUOg0KICAgICAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIkNhbid0IHVzZSAnc3BlYycgd2l0aCBjcmVhdGU9VHJ1ZSIpDQogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShvcmlnaW5hbCwgdHlwZSk6DQogICAgICAgICAgICAgICAgICAgICMgSWYgd2UncmUgcGF0Y2hpbmcgb3V0IGEgY2xhc3MgYW5kIHRoZXJlIGlzIGEgc3BlYw0KICAgICAgICAgICAgICAgICAgICBpbmhlcml0ID0gVHJ1ZQ0KDQogICAgICAgICAgICBLbGFzcyA9IE1hZ2ljTW9jaw0KICAgICAgICAgICAgX2t3YXJncyA9IHt9DQogICAgICAgICAgICBpZiBuZXdfY2FsbGFibGUgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgS2xhc3MgPSBuZXdfY2FsbGFibGUNCiAgICAgICAgICAgIGVsaWYgc3BlYyBpcyBub3QgTm9uZSBvciBzcGVjX3NldCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICB0aGlzX3NwZWMgPSBzcGVjDQogICAgICAgICAgICAgICAgaWYgc3BlY19zZXQgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHRoaXNfc3BlYyA9IHNwZWNfc2V0DQogICAgICAgICAgICAgICAgaWYgX2lzX2xpc3QodGhpc19zcGVjKToNCiAgICAgICAgICAgICAgICAgICAgbm90X2NhbGxhYmxlID0gJ19fY2FsbF9fJyBub3QgaW4gdGhpc19zcGVjDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgbm90X2NhbGxhYmxlID0gbm90IGNhbGxhYmxlKHRoaXNfc3BlYykNCiAgICAgICAgICAgICAgICBpZiBub3RfY2FsbGFibGU6DQogICAgICAgICAgICAgICAgICAgIEtsYXNzID0gTm9uQ2FsbGFibGVNYWdpY01vY2sNCg0KICAgICAgICAgICAgaWYgc3BlYyBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICBfa3dhcmdzWydzcGVjJ10gPSBzcGVjDQogICAgICAgICAgICBpZiBzcGVjX3NldCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICBfa3dhcmdzWydzcGVjX3NldCddID0gc3BlY19zZXQNCg0KICAgICAgICAgICAgIyBhZGQgYSBuYW1lIHRvIG1vY2tzDQogICAgICAgICAgICBpZiAoaXNpbnN0YW5jZShLbGFzcywgdHlwZSkgYW5kDQogICAgICAgICAgICAgICAgaXNzdWJjbGFzcyhLbGFzcywgTm9uQ2FsbGFibGVNb2NrKSBhbmQgc2VsZi5hdHRyaWJ1dGUpOg0KICAgICAgICAgICAgICAgIF9rd2FyZ3NbJ25hbWUnXSA9IHNlbGYuYXR0cmlidXRlDQoNCiAgICAgICAgICAgIF9rd2FyZ3MudXBkYXRlKGt3YXJncykNCiAgICAgICAgICAgIG5ldyA9IEtsYXNzKCoqX2t3YXJncykNCg0KICAgICAgICAgICAgaWYgaW5oZXJpdCBhbmQgX2lzX2luc3RhbmNlX21vY2sobmV3KToNCiAgICAgICAgICAgICAgICAjIHdlIGNhbiBvbmx5IHRlbGwgaWYgdGhlIGluc3RhbmNlIHNob3VsZCBiZSBjYWxsYWJsZSBpZiB0aGUNCiAgICAgICAgICAgICAgICAjIHNwZWMgaXMgbm90IGEgbGlzdA0KICAgICAgICAgICAgICAgIHRoaXNfc3BlYyA9IHNwZWMNCiAgICAgICAgICAgICAgICBpZiBzcGVjX3NldCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgdGhpc19zcGVjID0gc3BlY19zZXQNCiAgICAgICAgICAgICAgICBpZiAobm90IF9pc19saXN0KHRoaXNfc3BlYykgYW5kIG5vdA0KICAgICAgICAgICAgICAgICAgICBfaW5zdGFuY2VfY2FsbGFibGUodGhpc19zcGVjKSk6DQogICAgICAgICAgICAgICAgICAgIEtsYXNzID0gTm9uQ2FsbGFibGVNYWdpY01vY2sNCg0KICAgICAgICAgICAgICAgIF9rd2FyZ3MucG9wKCduYW1lJykNCiAgICAgICAgICAgICAgICBuZXcucmV0dXJuX3ZhbHVlID0gS2xhc3MoX25ld19wYXJlbnQ9bmV3LCBfbmV3X25hbWU9JygpJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKipfa3dhcmdzKQ0KICAgICAgICBlbGlmIGF1dG9zcGVjIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgIyBzcGVjIGlzIGlnbm9yZWQsIG5ldyAqbXVzdCogYmUgZGVmYXVsdCwgc3BlY19zZXQgaXMgdHJlYXRlZA0KICAgICAgICAgICAgIyBhcyBhIGJvb2xlYW4uIFNob3VsZCB3ZSBjaGVjayBzcGVjIGlzIG5vdCBOb25lIGFuZCB0aGF0IHNwZWNfc2V0DQogICAgICAgICAgICAjIGlzIGEgYm9vbD8NCiAgICAgICAgICAgIGlmIG5ldyBpcyBub3QgREVGQVVMVDoNCiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoDQogICAgICAgICAgICAgICAgICAgICJhdXRvc3BlYyBjcmVhdGVzIHRoZSBtb2NrIGZvciB5b3UuIENhbid0IHNwZWNpZnkgIg0KICAgICAgICAgICAgICAgICAgICAiYXV0b3NwZWMgYW5kIG5ldy4iDQogICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgaWYgb3JpZ2luYWwgaXMgREVGQVVMVDoNCiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIkNhbid0IHVzZSAnYXV0b3NwZWMnIHdpdGggY3JlYXRlPVRydWUiKQ0KICAgICAgICAgICAgc3BlY19zZXQgPSBib29sKHNwZWNfc2V0KQ0KICAgICAgICAgICAgaWYgYXV0b3NwZWMgaXMgVHJ1ZToNCiAgICAgICAgICAgICAgICBhdXRvc3BlYyA9IG9yaWdpbmFsDQoNCiAgICAgICAgICAgIG5ldyA9IGNyZWF0ZV9hdXRvc3BlYyhhdXRvc3BlYywgc3BlY19zZXQ9c3BlY19zZXQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX25hbWU9c2VsZi5hdHRyaWJ1dGUsICoqa3dhcmdzKQ0KICAgICAgICBlbGlmIGt3YXJnczoNCiAgICAgICAgICAgICMgY2FuJ3Qgc2V0IGtleXdvcmQgYXJncyB3aGVuIHdlIGFyZW4ndCBjcmVhdGluZyB0aGUgbW9jaw0KICAgICAgICAgICAgIyBYWFhYIElmIG5ldyBpcyBhIE1vY2sgd2UgY291bGQgY2FsbCBuZXcuY29uZmlndXJlX21vY2soKiprd2FyZ3MpDQogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoIkNhbid0IHBhc3Mga3dhcmdzIHRvIGEgbW9jayB3ZSBhcmVuJ3QgY3JlYXRpbmciKQ0KDQogICAgICAgIG5ld19hdHRyID0gbmV3DQoNCiAgICAgICAgc2VsZi50ZW1wX29yaWdpbmFsID0gb3JpZ2luYWwNCiAgICAgICAgc2VsZi5pc19sb2NhbCA9IGxvY2FsDQogICAgICAgIHNldGF0dHIoc2VsZi50YXJnZXQsIHNlbGYuYXR0cmlidXRlLCBuZXdfYXR0cikNCiAgICAgICAgaWYgc2VsZi5hdHRyaWJ1dGVfbmFtZSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGV4dHJhX2FyZ3MgPSB7fQ0KICAgICAgICAgICAgaWYgc2VsZi5uZXcgaXMgREVGQVVMVDoNCiAgICAgICAgICAgICAgICBleHRyYV9hcmdzW3NlbGYuYXR0cmlidXRlX25hbWVdID0gIG5ldw0KICAgICAgICAgICAgZm9yIHBhdGNoaW5nIGluIHNlbGYuYWRkaXRpb25hbF9wYXRjaGVyczoNCiAgICAgICAgICAgICAgICBhcmcgPSBwYXRjaGluZy5fX2VudGVyX18oKQ0KICAgICAgICAgICAgICAgIGlmIHBhdGNoaW5nLm5ldyBpcyBERUZBVUxUOg0KICAgICAgICAgICAgICAgICAgICBleHRyYV9hcmdzLnVwZGF0ZShhcmcpDQogICAgICAgICAgICByZXR1cm4gZXh0cmFfYXJncw0KDQogICAgICAgIHJldHVybiBuZXcNCg0KDQogICAgZGVmIF9fZXhpdF9fKHNlbGYsICpleGNfaW5mbyk6DQogICAgICAgICIiIlVuZG8gdGhlIHBhdGNoLiIiIg0KICAgICAgICBpZiBub3QgX2lzX3N0YXJ0ZWQoc2VsZik6DQogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoJ3N0b3AgY2FsbGVkIG9uIHVuc3RhcnRlZCBwYXRjaGVyJykNCg0KICAgICAgICBpZiBzZWxmLmlzX2xvY2FsIGFuZCBzZWxmLnRlbXBfb3JpZ2luYWwgaXMgbm90IERFRkFVTFQ6DQogICAgICAgICAgICBzZXRhdHRyKHNlbGYudGFyZ2V0LCBzZWxmLmF0dHJpYnV0ZSwgc2VsZi50ZW1wX29yaWdpbmFsKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgZGVsYXR0cihzZWxmLnRhcmdldCwgc2VsZi5hdHRyaWJ1dGUpDQogICAgICAgICAgICBpZiBub3Qgc2VsZi5jcmVhdGUgYW5kIG5vdCBoYXNhdHRyKHNlbGYudGFyZ2V0LCBzZWxmLmF0dHJpYnV0ZSk6DQogICAgICAgICAgICAgICAgIyBuZWVkZWQgZm9yIHByb3h5IG9iamVjdHMgbGlrZSBkamFuZ28gc2V0dGluZ3MNCiAgICAgICAgICAgICAgICBzZXRhdHRyKHNlbGYudGFyZ2V0LCBzZWxmLmF0dHJpYnV0ZSwgc2VsZi50ZW1wX29yaWdpbmFsKQ0KDQogICAgICAgIGRlbCBzZWxmLnRlbXBfb3JpZ2luYWwNCiAgICAgICAgZGVsIHNlbGYuaXNfbG9jYWwNCiAgICAgICAgZGVsIHNlbGYudGFyZ2V0DQogICAgICAgIGZvciBwYXRjaGVyIGluIHJldmVyc2VkKHNlbGYuYWRkaXRpb25hbF9wYXRjaGVycyk6DQogICAgICAgICAgICBpZiBfaXNfc3RhcnRlZChwYXRjaGVyKToNCiAgICAgICAgICAgICAgICBwYXRjaGVyLl9fZXhpdF9fKCpleGNfaW5mbykNCg0KDQogICAgZGVmIHN0YXJ0KHNlbGYpOg0KICAgICAgICAiIiJBY3RpdmF0ZSBhIHBhdGNoLCByZXR1cm5pbmcgYW55IGNyZWF0ZWQgbW9jay4iIiINCiAgICAgICAgcmVzdWx0ID0gc2VsZi5fX2VudGVyX18oKQ0KICAgICAgICBzZWxmLl9hY3RpdmVfcGF0Y2hlcy5hZGQoc2VsZikNCiAgICAgICAgcmV0dXJuIHJlc3VsdA0KDQoNCiAgICBkZWYgc3RvcChzZWxmKToNCiAgICAgICAgIiIiU3RvcCBhbiBhY3RpdmUgcGF0Y2guIiIiDQogICAgICAgIHNlbGYuX2FjdGl2ZV9wYXRjaGVzLmRpc2NhcmQoc2VsZikNCiAgICAgICAgcmV0dXJuIHNlbGYuX19leGl0X18oKQ0KDQoNCg0KZGVmIF9nZXRfdGFyZ2V0KHRhcmdldCk6DQogICAgdHJ5Og0KICAgICAgICB0YXJnZXQsIGF0dHJpYnV0ZSA9IHRhcmdldC5yc3BsaXQoJy4nLCAxKQ0KICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBWYWx1ZUVycm9yKToNCiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJOZWVkIGEgdmFsaWQgdGFyZ2V0IHRvIHBhdGNoLiBZb3Ugc3VwcGxpZWQ6ICVyIiAlDQogICAgICAgICAgICAgICAgICAgICAgICAodGFyZ2V0LCkpDQogICAgZ2V0dGVyID0gbGFtYmRhOiBfaW1wb3J0ZXIodGFyZ2V0KQ0KICAgIHJldHVybiBnZXR0ZXIsIGF0dHJpYnV0ZQ0KDQoNCmRlZiBfcGF0Y2hfb2JqZWN0KA0KICAgICAgICB0YXJnZXQsIGF0dHJpYnV0ZSwgbmV3PURFRkFVTFQsIHNwZWM9Tm9uZSwNCiAgICAgICAgY3JlYXRlPUZhbHNlLCBzcGVjX3NldD1Ob25lLCBhdXRvc3BlYz1Ob25lLA0KICAgICAgICBuZXdfY2FsbGFibGU9Tm9uZSwgKiprd2FyZ3MNCiAgICApOg0KICAgICIiIg0KICAgIHBhdGNoIHRoZSBuYW1lZCBtZW1iZXIgKGBhdHRyaWJ1dGVgKSBvbiBhbiBvYmplY3QgKGB0YXJnZXRgKSB3aXRoIGEgbW9jaw0KICAgIG9iamVjdC4NCg0KICAgIGBwYXRjaC5vYmplY3RgIGNhbiBiZSB1c2VkIGFzIGEgZGVjb3JhdG9yLCBjbGFzcyBkZWNvcmF0b3Igb3IgYSBjb250ZXh0DQogICAgbWFuYWdlci4gQXJndW1lbnRzIGBuZXdgLCBgc3BlY2AsIGBjcmVhdGVgLCBgc3BlY19zZXRgLA0KICAgIGBhdXRvc3BlY2AgYW5kIGBuZXdfY2FsbGFibGVgIGhhdmUgdGhlIHNhbWUgbWVhbmluZyBhcyBmb3IgYHBhdGNoYC4gTGlrZQ0KICAgIGBwYXRjaGAsIGBwYXRjaC5vYmplY3RgIHRha2VzIGFyYml0cmFyeSBrZXl3b3JkIGFyZ3VtZW50cyBmb3IgY29uZmlndXJpbmcNCiAgICB0aGUgbW9jayBvYmplY3QgaXQgY3JlYXRlcy4NCg0KICAgIFdoZW4gdXNlZCBhcyBhIGNsYXNzIGRlY29yYXRvciBgcGF0Y2gub2JqZWN0YCBob25vdXJzIGBwYXRjaC5URVNUX1BSRUZJWGANCiAgICBmb3IgY2hvb3Npbmcgd2hpY2ggbWV0aG9kcyB0byB3cmFwLg0KICAgICIiIg0KICAgIGdldHRlciA9IGxhbWJkYTogdGFyZ2V0DQogICAgcmV0dXJuIF9wYXRjaCgNCiAgICAgICAgZ2V0dGVyLCBhdHRyaWJ1dGUsIG5ldywgc3BlYywgY3JlYXRlLA0KICAgICAgICBzcGVjX3NldCwgYXV0b3NwZWMsIG5ld19jYWxsYWJsZSwga3dhcmdzDQogICAgKQ0KDQoNCmRlZiBfcGF0Y2hfbXVsdGlwbGUodGFyZ2V0LCBzcGVjPU5vbmUsIGNyZWF0ZT1GYWxzZSwgc3BlY19zZXQ9Tm9uZSwNCiAgICAgICAgICAgICAgICAgICAgYXV0b3NwZWM9Tm9uZSwgbmV3X2NhbGxhYmxlPU5vbmUsICoqa3dhcmdzKToNCiAgICAiIiJQZXJmb3JtIG11bHRpcGxlIHBhdGNoZXMgaW4gYSBzaW5nbGUgY2FsbC4gSXQgdGFrZXMgdGhlIG9iamVjdCB0byBiZQ0KICAgIHBhdGNoZWQgKGVpdGhlciBhcyBhbiBvYmplY3Qgb3IgYSBzdHJpbmcgdG8gZmV0Y2ggdGhlIG9iamVjdCBieSBpbXBvcnRpbmcpDQogICAgYW5kIGtleXdvcmQgYXJndW1lbnRzIGZvciB0aGUgcGF0Y2hlczo6DQoNCiAgICAgICAgd2l0aCBwYXRjaC5tdWx0aXBsZShzZXR0aW5ncywgRklSU1RfUEFUQ0g9J29uZScsIFNFQ09ORF9QQVRDSD0ndHdvJyk6DQogICAgICAgICAgICAuLi4NCg0KICAgIFVzZSBgREVGQVVMVGAgYXMgdGhlIHZhbHVlIGlmIHlvdSB3YW50IGBwYXRjaC5tdWx0aXBsZWAgdG8gY3JlYXRlDQogICAgbW9ja3MgZm9yIHlvdS4gSW4gdGhpcyBjYXNlIHRoZSBjcmVhdGVkIG1vY2tzIGFyZSBwYXNzZWQgaW50byBhIGRlY29yYXRlZA0KICAgIGZ1bmN0aW9uIGJ5IGtleXdvcmQsIGFuZCBhIGRpY3Rpb25hcnkgaXMgcmV0dXJuZWQgd2hlbiBgcGF0Y2gubXVsdGlwbGVgIGlzDQogICAgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlci4NCg0KICAgIGBwYXRjaC5tdWx0aXBsZWAgY2FuIGJlIHVzZWQgYXMgYSBkZWNvcmF0b3IsIGNsYXNzIGRlY29yYXRvciBvciBhIGNvbnRleHQNCiAgICBtYW5hZ2VyLiBUaGUgYXJndW1lbnRzIGBzcGVjYCwgYHNwZWNfc2V0YCwgYGNyZWF0ZWAsDQogICAgYGF1dG9zcGVjYCBhbmQgYG5ld19jYWxsYWJsZWAgaGF2ZSB0aGUgc2FtZSBtZWFuaW5nIGFzIGZvciBgcGF0Y2hgLiBUaGVzZQ0KICAgIGFyZ3VtZW50cyB3aWxsIGJlIGFwcGxpZWQgdG8gKmFsbCogcGF0Y2hlcyBkb25lIGJ5IGBwYXRjaC5tdWx0aXBsZWAuDQoNCiAgICBXaGVuIHVzZWQgYXMgYSBjbGFzcyBkZWNvcmF0b3IgYHBhdGNoLm11bHRpcGxlYCBob25vdXJzIGBwYXRjaC5URVNUX1BSRUZJWGANCiAgICBmb3IgY2hvb3Npbmcgd2hpY2ggbWV0aG9kcyB0byB3cmFwLg0KICAgICIiIg0KICAgIGlmIHR5cGUodGFyZ2V0KSBpcyBzdHI6DQogICAgICAgIGdldHRlciA9IGxhbWJkYTogX2ltcG9ydGVyKHRhcmdldCkNCiAgICBlbHNlOg0KICAgICAgICBnZXR0ZXIgPSBsYW1iZGE6IHRhcmdldA0KDQogICAgaWYgbm90IGt3YXJnczoNCiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigNCiAgICAgICAgICAgICdNdXN0IHN1cHBseSBhdCBsZWFzdCBvbmUga2V5d29yZCBhcmd1bWVudCB3aXRoIHBhdGNoLm11bHRpcGxlJw0KICAgICAgICApDQogICAgIyBuZWVkIHRvIHdyYXAgaW4gYSBsaXN0IGZvciBweXRob24gMywgd2hlcmUgaXRlbXMgaXMgYSB2aWV3DQogICAgaXRlbXMgPSBsaXN0KGt3YXJncy5pdGVtcygpKQ0KICAgIGF0dHJpYnV0ZSwgbmV3ID0gaXRlbXNbMF0NCiAgICBwYXRjaGVyID0gX3BhdGNoKA0KICAgICAgICBnZXR0ZXIsIGF0dHJpYnV0ZSwgbmV3LCBzcGVjLCBjcmVhdGUsIHNwZWNfc2V0LA0KICAgICAgICBhdXRvc3BlYywgbmV3X2NhbGxhYmxlLCB7fQ0KICAgICkNCiAgICBwYXRjaGVyLmF0dHJpYnV0ZV9uYW1lID0gYXR0cmlidXRlDQogICAgZm9yIGF0dHJpYnV0ZSwgbmV3IGluIGl0ZW1zWzE6XToNCiAgICAgICAgdGhpc19wYXRjaGVyID0gX3BhdGNoKA0KICAgICAgICAgICAgZ2V0dGVyLCBhdHRyaWJ1dGUsIG5ldywgc3BlYywgY3JlYXRlLCBzcGVjX3NldCwNCiAgICAgICAgICAgIGF1dG9zcGVjLCBuZXdfY2FsbGFibGUsIHt9DQogICAgICAgICkNCiAgICAgICAgdGhpc19wYXRjaGVyLmF0dHJpYnV0ZV9uYW1lID0gYXR0cmlidXRlDQogICAgICAgIHBhdGNoZXIuYWRkaXRpb25hbF9wYXRjaGVycy5hcHBlbmQodGhpc19wYXRjaGVyKQ0KICAgIHJldHVybiBwYXRjaGVyDQoNCg0KZGVmIHBhdGNoKA0KICAgICAgICB0YXJnZXQsIG5ldz1ERUZBVUxULCBzcGVjPU5vbmUsIGNyZWF0ZT1GYWxzZSwNCiAgICAgICAgc3BlY19zZXQ9Tm9uZSwgYXV0b3NwZWM9Tm9uZSwgbmV3X2NhbGxhYmxlPU5vbmUsICoqa3dhcmdzDQogICAgKToNCiAgICAiIiINCiAgICBgcGF0Y2hgIGFjdHMgYXMgYSBmdW5jdGlvbiBkZWNvcmF0b3IsIGNsYXNzIGRlY29yYXRvciBvciBhIGNvbnRleHQNCiAgICBtYW5hZ2VyLiBJbnNpZGUgdGhlIGJvZHkgb2YgdGhlIGZ1bmN0aW9uIG9yIHdpdGggc3RhdGVtZW50LCB0aGUgYHRhcmdldGANCiAgICBpcyBwYXRjaGVkIHdpdGggYSBgbmV3YCBvYmplY3QuIFdoZW4gdGhlIGZ1bmN0aW9uL3dpdGggc3RhdGVtZW50IGV4aXRzDQogICAgdGhlIHBhdGNoIGlzIHVuZG9uZS4NCg0KICAgIElmIGBuZXdgIGlzIG9taXR0ZWQsIHRoZW4gdGhlIHRhcmdldCBpcyByZXBsYWNlZCB3aXRoIGENCiAgICBgTWFnaWNNb2NrYC4gSWYgYHBhdGNoYCBpcyB1c2VkIGFzIGEgZGVjb3JhdG9yIGFuZCBgbmV3YCBpcw0KICAgIG9taXR0ZWQsIHRoZSBjcmVhdGVkIG1vY2sgaXMgcGFzc2VkIGluIGFzIGFuIGV4dHJhIGFyZ3VtZW50IHRvIHRoZQ0KICAgIGRlY29yYXRlZCBmdW5jdGlvbi4gSWYgYHBhdGNoYCBpcyB1c2VkIGFzIGEgY29udGV4dCBtYW5hZ2VyIHRoZSBjcmVhdGVkDQogICAgbW9jayBpcyByZXR1cm5lZCBieSB0aGUgY29udGV4dCBtYW5hZ2VyLg0KDQogICAgYHRhcmdldGAgc2hvdWxkIGJlIGEgc3RyaW5nIGluIHRoZSBmb3JtIGAncGFja2FnZS5tb2R1bGUuQ2xhc3NOYW1lJ2AuIFRoZQ0KICAgIGB0YXJnZXRgIGlzIGltcG9ydGVkIGFuZCB0aGUgc3BlY2lmaWVkIG9iamVjdCByZXBsYWNlZCB3aXRoIHRoZSBgbmV3YA0KICAgIG9iamVjdCwgc28gdGhlIGB0YXJnZXRgIG11c3QgYmUgaW1wb3J0YWJsZSBmcm9tIHRoZSBlbnZpcm9ubWVudCB5b3UgYXJlDQogICAgY2FsbGluZyBgcGF0Y2hgIGZyb20uIFRoZSB0YXJnZXQgaXMgaW1wb3J0ZWQgd2hlbiB0aGUgZGVjb3JhdGVkIGZ1bmN0aW9uDQogICAgaXMgZXhlY3V0ZWQsIG5vdCBhdCBkZWNvcmF0aW9uIHRpbWUuDQoNCiAgICBUaGUgYHNwZWNgIGFuZCBgc3BlY19zZXRgIGtleXdvcmQgYXJndW1lbnRzIGFyZSBwYXNzZWQgdG8gdGhlIGBNYWdpY01vY2tgDQogICAgaWYgcGF0Y2ggaXMgY3JlYXRpbmcgb25lIGZvciB5b3UuDQoNCiAgICBJbiBhZGRpdGlvbiB5b3UgY2FuIHBhc3MgYHNwZWM9VHJ1ZWAgb3IgYHNwZWNfc2V0PVRydWVgLCB3aGljaCBjYXVzZXMNCiAgICBwYXRjaCB0byBwYXNzIGluIHRoZSBvYmplY3QgYmVpbmcgbW9ja2VkIGFzIHRoZSBzcGVjL3NwZWNfc2V0IG9iamVjdC4NCg0KICAgIGBuZXdfY2FsbGFibGVgIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBhIGRpZmZlcmVudCBjbGFzcywgb3IgY2FsbGFibGUgb2JqZWN0LA0KICAgIHRoYXQgd2lsbCBiZSBjYWxsZWQgdG8gY3JlYXRlIHRoZSBgbmV3YCBvYmplY3QuIEJ5IGRlZmF1bHQgYE1hZ2ljTW9ja2AgaXMNCiAgICB1c2VkLg0KDQogICAgQSBtb3JlIHBvd2VyZnVsIGZvcm0gb2YgYHNwZWNgIGlzIGBhdXRvc3BlY2AuIElmIHlvdSBzZXQgYGF1dG9zcGVjPVRydWVgDQogICAgdGhlbiB0aGUgbW9jayB3aXRoIGJlIGNyZWF0ZWQgd2l0aCBhIHNwZWMgZnJvbSB0aGUgb2JqZWN0IGJlaW5nIHJlcGxhY2VkLg0KICAgIEFsbCBhdHRyaWJ1dGVzIG9mIHRoZSBtb2NrIHdpbGwgYWxzbyBoYXZlIHRoZSBzcGVjIG9mIHRoZSBjb3JyZXNwb25kaW5nDQogICAgYXR0cmlidXRlIG9mIHRoZSBvYmplY3QgYmVpbmcgcmVwbGFjZWQuIE1ldGhvZHMgYW5kIGZ1bmN0aW9ucyBiZWluZw0KICAgIG1vY2tlZCB3aWxsIGhhdmUgdGhlaXIgYXJndW1lbnRzIGNoZWNrZWQgYW5kIHdpbGwgcmFpc2UgYSBgVHlwZUVycm9yYCBpZg0KICAgIHRoZXkgYXJlIGNhbGxlZCB3aXRoIHRoZSB3cm9uZyBzaWduYXR1cmUuIEZvciBtb2NrcyByZXBsYWNpbmcgYSBjbGFzcywNCiAgICB0aGVpciByZXR1cm4gdmFsdWUgKHRoZSAnaW5zdGFuY2UnKSB3aWxsIGhhdmUgdGhlIHNhbWUgc3BlYyBhcyB0aGUgY2xhc3MuDQoNCiAgICBJbnN0ZWFkIG9mIGBhdXRvc3BlYz1UcnVlYCB5b3UgY2FuIHBhc3MgYGF1dG9zcGVjPXNvbWVfb2JqZWN0YCB0byB1c2UgYW4NCiAgICBhcmJpdHJhcnkgb2JqZWN0IGFzIHRoZSBzcGVjIGluc3RlYWQgb2YgdGhlIG9uZSBiZWluZyByZXBsYWNlZC4NCg0KICAgIEJ5IGRlZmF1bHQgYHBhdGNoYCB3aWxsIGZhaWwgdG8gcmVwbGFjZSBhdHRyaWJ1dGVzIHRoYXQgZG9uJ3QgZXhpc3QuIElmDQogICAgeW91IHBhc3MgaW4gYGNyZWF0ZT1UcnVlYCwgYW5kIHRoZSBhdHRyaWJ1dGUgZG9lc24ndCBleGlzdCwgcGF0Y2ggd2lsbA0KICAgIGNyZWF0ZSB0aGUgYXR0cmlidXRlIGZvciB5b3Ugd2hlbiB0aGUgcGF0Y2hlZCBmdW5jdGlvbiBpcyBjYWxsZWQsIGFuZA0KICAgIGRlbGV0ZSBpdCBhZ2FpbiBhZnRlcndhcmRzLiBUaGlzIGlzIHVzZWZ1bCBmb3Igd3JpdGluZyB0ZXN0cyBhZ2FpbnN0DQogICAgYXR0cmlidXRlcyB0aGF0IHlvdXIgcHJvZHVjdGlvbiBjb2RlIGNyZWF0ZXMgYXQgcnVudGltZS4gSXQgaXMgb2ZmIGJ5IGJ5DQogICAgZGVmYXVsdCBiZWNhdXNlIGl0IGNhbiBiZSBkYW5nZXJvdXMuIFdpdGggaXQgc3dpdGNoZWQgb24geW91IGNhbiB3cml0ZQ0KICAgIHBhc3NpbmcgdGVzdHMgYWdhaW5zdCBBUElzIHRoYXQgZG9uJ3QgYWN0dWFsbHkgZXhpc3QhDQoNCiAgICBQYXRjaCBjYW4gYmUgdXNlZCBhcyBhIGBUZXN0Q2FzZWAgY2xhc3MgZGVjb3JhdG9yLiBJdCB3b3JrcyBieQ0KICAgIGRlY29yYXRpbmcgZWFjaCB0ZXN0IG1ldGhvZCBpbiB0aGUgY2xhc3MuIFRoaXMgcmVkdWNlcyB0aGUgYm9pbGVycGxhdGUNCiAgICBjb2RlIHdoZW4geW91ciB0ZXN0IG1ldGhvZHMgc2hhcmUgYSBjb21tb24gcGF0Y2hpbmdzIHNldC4gYHBhdGNoYCBmaW5kcw0KICAgIHRlc3RzIGJ5IGxvb2tpbmcgZm9yIG1ldGhvZCBuYW1lcyB0aGF0IHN0YXJ0IHdpdGggYHBhdGNoLlRFU1RfUFJFRklYYC4NCiAgICBCeSBkZWZhdWx0IHRoaXMgaXMgYHRlc3RgLCB3aGljaCBtYXRjaGVzIHRoZSB3YXkgYHVuaXR0ZXN0YCBmaW5kcyB0ZXN0cy4NCiAgICBZb3UgY2FuIHNwZWNpZnkgYW4gYWx0ZXJuYXRpdmUgcHJlZml4IGJ5IHNldHRpbmcgYHBhdGNoLlRFU1RfUFJFRklYYC4NCg0KICAgIFBhdGNoIGNhbiBiZSB1c2VkIGFzIGEgY29udGV4dCBtYW5hZ2VyLCB3aXRoIHRoZSB3aXRoIHN0YXRlbWVudC4gSGVyZSB0aGUNCiAgICBwYXRjaGluZyBhcHBsaWVzIHRvIHRoZSBpbmRlbnRlZCBibG9jayBhZnRlciB0aGUgd2l0aCBzdGF0ZW1lbnQuIElmIHlvdQ0KICAgIHVzZSAiYXMiIHRoZW4gdGhlIHBhdGNoZWQgb2JqZWN0IHdpbGwgYmUgYm91bmQgdG8gdGhlIG5hbWUgYWZ0ZXIgdGhlDQogICAgImFzIjsgdmVyeSB1c2VmdWwgaWYgYHBhdGNoYCBpcyBjcmVhdGluZyBhIG1vY2sgb2JqZWN0IGZvciB5b3UuDQoNCiAgICBgcGF0Y2hgIHRha2VzIGFyYml0cmFyeSBrZXl3b3JkIGFyZ3VtZW50cy4gVGhlc2Ugd2lsbCBiZSBwYXNzZWQgdG8NCiAgICB0aGUgYE1vY2tgIChvciBgbmV3X2NhbGxhYmxlYCkgb24gY29uc3RydWN0aW9uLg0KDQogICAgYHBhdGNoLmRpY3QoLi4uKWAsIGBwYXRjaC5tdWx0aXBsZSguLi4pYCBhbmQgYHBhdGNoLm9iamVjdCguLi4pYCBhcmUNCiAgICBhdmFpbGFibGUgZm9yIGFsdGVybmF0ZSB1c2UtY2FzZXMuDQogICAgIiIiDQogICAgZ2V0dGVyLCBhdHRyaWJ1dGUgPSBfZ2V0X3RhcmdldCh0YXJnZXQpDQogICAgcmV0dXJuIF9wYXRjaCgNCiAgICAgICAgZ2V0dGVyLCBhdHRyaWJ1dGUsIG5ldywgc3BlYywgY3JlYXRlLA0KICAgICAgICBzcGVjX3NldCwgYXV0b3NwZWMsIG5ld19jYWxsYWJsZSwga3dhcmdzDQogICAgKQ0KDQoNCmNsYXNzIF9wYXRjaF9kaWN0KG9iamVjdCk6DQogICAgIiIiDQogICAgUGF0Y2ggYSBkaWN0aW9uYXJ5LCBvciBkaWN0aW9uYXJ5IGxpa2Ugb2JqZWN0LCBhbmQgcmVzdG9yZSB0aGUgZGljdGlvbmFyeQ0KICAgIHRvIGl0cyBvcmlnaW5hbCBzdGF0ZSBhZnRlciB0aGUgdGVzdC4NCg0KICAgIGBpbl9kaWN0YCBjYW4gYmUgYSBkaWN0aW9uYXJ5IG9yIGEgbWFwcGluZyBsaWtlIGNvbnRhaW5lci4gSWYgaXQgaXMgYQ0KICAgIG1hcHBpbmcgdGhlbiBpdCBtdXN0IGF0IGxlYXN0IHN1cHBvcnQgZ2V0dGluZywgc2V0dGluZyBhbmQgZGVsZXRpbmcgaXRlbXMNCiAgICBwbHVzIGl0ZXJhdGluZyBvdmVyIGtleXMuDQoNCiAgICBgaW5fZGljdGAgY2FuIGFsc28gYmUgYSBzdHJpbmcgc3BlY2lmeWluZyB0aGUgbmFtZSBvZiB0aGUgZGljdGlvbmFyeSwgd2hpY2gNCiAgICB3aWxsIHRoZW4gYmUgZmV0Y2hlZCBieSBpbXBvcnRpbmcgaXQuDQoNCiAgICBgdmFsdWVzYCBjYW4gYmUgYSBkaWN0aW9uYXJ5IG9mIHZhbHVlcyB0byBzZXQgaW4gdGhlIGRpY3Rpb25hcnkuIGB2YWx1ZXNgDQogICAgY2FuIGFsc28gYmUgYW4gaXRlcmFibGUgb2YgYChrZXksIHZhbHVlKWAgcGFpcnMuDQoNCiAgICBJZiBgY2xlYXJgIGlzIFRydWUgdGhlbiB0aGUgZGljdGlvbmFyeSB3aWxsIGJlIGNsZWFyZWQgYmVmb3JlIHRoZSBuZXcNCiAgICB2YWx1ZXMgYXJlIHNldC4NCg0KICAgIGBwYXRjaC5kaWN0YCBjYW4gYWxzbyBiZSBjYWxsZWQgd2l0aCBhcmJpdHJhcnkga2V5d29yZCBhcmd1bWVudHMgdG8gc2V0DQogICAgdmFsdWVzIGluIHRoZSBkaWN0aW9uYXJ5OjoNCg0KICAgICAgICB3aXRoIHBhdGNoLmRpY3QoJ3N5cy5tb2R1bGVzJywgbXltb2R1bGU9TW9jaygpLCBvdGhlcl9tb2R1bGU9TW9jaygpKToNCiAgICAgICAgICAgIC4uLg0KDQogICAgYHBhdGNoLmRpY3RgIGNhbiBiZSB1c2VkIGFzIGEgY29udGV4dCBtYW5hZ2VyLCBkZWNvcmF0b3Igb3IgY2xhc3MNCiAgICBkZWNvcmF0b3IuIFdoZW4gdXNlZCBhcyBhIGNsYXNzIGRlY29yYXRvciBgcGF0Y2guZGljdGAgaG9ub3Vycw0KICAgIGBwYXRjaC5URVNUX1BSRUZJWGAgZm9yIGNob29zaW5nIHdoaWNoIG1ldGhvZHMgdG8gd3JhcC4NCiAgICAiIiINCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpbl9kaWN0LCB2YWx1ZXM9KCksIGNsZWFyPUZhbHNlLCAqKmt3YXJncyk6DQogICAgICAgIGlmIGlzaW5zdGFuY2UoaW5fZGljdCwgc3RyKToNCiAgICAgICAgICAgIGluX2RpY3QgPSBfaW1wb3J0ZXIoaW5fZGljdCkNCiAgICAgICAgc2VsZi5pbl9kaWN0ID0gaW5fZGljdA0KICAgICAgICAjIHN1cHBvcnQgYW55IGFyZ3VtZW50IHN1cHBvcnRlZCBieSBkaWN0KC4uLikgY29uc3RydWN0b3INCiAgICAgICAgc2VsZi52YWx1ZXMgPSBkaWN0KHZhbHVlcykNCiAgICAgICAgc2VsZi52YWx1ZXMudXBkYXRlKGt3YXJncykNCiAgICAgICAgc2VsZi5jbGVhciA9IGNsZWFyDQogICAgICAgIHNlbGYuX29yaWdpbmFsID0gTm9uZQ0KDQoNCiAgICBkZWYgX19jYWxsX18oc2VsZiwgZik6DQogICAgICAgIGlmIGlzaW5zdGFuY2UoZiwgdHlwZSk6DQogICAgICAgICAgICByZXR1cm4gc2VsZi5kZWNvcmF0ZV9jbGFzcyhmKQ0KICAgICAgICBAd3JhcHMoZikNCiAgICAgICAgZGVmIF9pbm5lcigqYXJncywgKiprdyk6DQogICAgICAgICAgICBzZWxmLl9wYXRjaF9kaWN0KCkNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICByZXR1cm4gZigqYXJncywgKiprdykNCiAgICAgICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICAgICAgc2VsZi5fdW5wYXRjaF9kaWN0KCkNCg0KICAgICAgICByZXR1cm4gX2lubmVyDQoNCg0KICAgIGRlZiBkZWNvcmF0ZV9jbGFzcyhzZWxmLCBrbGFzcyk6DQogICAgICAgIGZvciBhdHRyIGluIGRpcihrbGFzcyk6DQogICAgICAgICAgICBhdHRyX3ZhbHVlID0gZ2V0YXR0cihrbGFzcywgYXR0cikNCiAgICAgICAgICAgIGlmIChhdHRyLnN0YXJ0c3dpdGgocGF0Y2guVEVTVF9QUkVGSVgpIGFuZA0KICAgICAgICAgICAgICAgICBoYXNhdHRyKGF0dHJfdmFsdWUsICJfX2NhbGxfXyIpKToNCiAgICAgICAgICAgICAgICBkZWNvcmF0b3IgPSBfcGF0Y2hfZGljdChzZWxmLmluX2RpY3QsIHNlbGYudmFsdWVzLCBzZWxmLmNsZWFyKQ0KICAgICAgICAgICAgICAgIGRlY29yYXRlZCA9IGRlY29yYXRvcihhdHRyX3ZhbHVlKQ0KICAgICAgICAgICAgICAgIHNldGF0dHIoa2xhc3MsIGF0dHIsIGRlY29yYXRlZCkNCiAgICAgICAgcmV0dXJuIGtsYXNzDQoNCg0KICAgIGRlZiBfX2VudGVyX18oc2VsZik6DQogICAgICAgICIiIlBhdGNoIHRoZSBkaWN0LiIiIg0KICAgICAgICBzZWxmLl9wYXRjaF9kaWN0KCkNCg0KDQogICAgZGVmIF9wYXRjaF9kaWN0KHNlbGYpOg0KICAgICAgICB2YWx1ZXMgPSBzZWxmLnZhbHVlcw0KICAgICAgICBpbl9kaWN0ID0gc2VsZi5pbl9kaWN0DQogICAgICAgIGNsZWFyID0gc2VsZi5jbGVhcg0KDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIG9yaWdpbmFsID0gaW5fZGljdC5jb3B5KCkNCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOg0KICAgICAgICAgICAgIyBkaWN0IGxpa2Ugb2JqZWN0IHdpdGggbm8gY29weSBtZXRob2QNCiAgICAgICAgICAgICMgbXVzdCBzdXBwb3J0IGl0ZXJhdGlvbiBvdmVyIGtleXMNCiAgICAgICAgICAgIG9yaWdpbmFsID0ge30NCiAgICAgICAgICAgIGZvciBrZXkgaW4gaW5fZGljdDoNCiAgICAgICAgICAgICAgICBvcmlnaW5hbFtrZXldID0gaW5fZGljdFtrZXldDQogICAgICAgIHNlbGYuX29yaWdpbmFsID0gb3JpZ2luYWwNCg0KICAgICAgICBpZiBjbGVhcjoNCiAgICAgICAgICAgIF9jbGVhcl9kaWN0KGluX2RpY3QpDQoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaW5fZGljdC51cGRhdGUodmFsdWVzKQ0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICAjIGRpY3QgbGlrZSBvYmplY3Qgd2l0aCBubyB1cGRhdGUgbWV0aG9kDQogICAgICAgICAgICBmb3Iga2V5IGluIHZhbHVlczoNCiAgICAgICAgICAgICAgICBpbl9kaWN0W2tleV0gPSB2YWx1ZXNba2V5XQ0KDQoNCiAgICBkZWYgX3VucGF0Y2hfZGljdChzZWxmKToNCiAgICAgICAgaW5fZGljdCA9IHNlbGYuaW5fZGljdA0KICAgICAgICBvcmlnaW5hbCA9IHNlbGYuX29yaWdpbmFsDQoNCiAgICAgICAgX2NsZWFyX2RpY3QoaW5fZGljdCkNCg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBpbl9kaWN0LnVwZGF0ZShvcmlnaW5hbCkNCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOg0KICAgICAgICAgICAgZm9yIGtleSBpbiBvcmlnaW5hbDoNCiAgICAgICAgICAgICAgICBpbl9kaWN0W2tleV0gPSBvcmlnaW5hbFtrZXldDQoNCg0KICAgIGRlZiBfX2V4aXRfXyhzZWxmLCAqYXJncyk6DQogICAgICAgICIiIlVucGF0Y2ggdGhlIGRpY3QuIiIiDQogICAgICAgIHNlbGYuX3VucGF0Y2hfZGljdCgpDQogICAgICAgIHJldHVybiBGYWxzZQ0KDQogICAgc3RhcnQgPSBfX2VudGVyX18NCiAgICBzdG9wID0gX19leGl0X18NCg0KDQpkZWYgX2NsZWFyX2RpY3QoaW5fZGljdCk6DQogICAgdHJ5Og0KICAgICAgICBpbl9kaWN0LmNsZWFyKCkNCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgIGtleXMgPSBsaXN0KGluX2RpY3QpDQogICAgICAgIGZvciBrZXkgaW4ga2V5czoNCiAgICAgICAgICAgIGRlbCBpbl9kaWN0W2tleV0NCg0KDQpkZWYgX3BhdGNoX3N0b3BhbGwoKToNCiAgICAiIiJTdG9wIGFsbCBhY3RpdmUgcGF0Y2hlcy4iIiINCiAgICBmb3IgcGF0Y2ggaW4gbGlzdChfcGF0Y2guX2FjdGl2ZV9wYXRjaGVzKToNCiAgICAgICAgcGF0Y2guc3RvcCgpDQoNCg0KcGF0Y2gub2JqZWN0ID0gX3BhdGNoX29iamVjdA0KcGF0Y2guZGljdCA9IF9wYXRjaF9kaWN0DQpwYXRjaC5tdWx0aXBsZSA9IF9wYXRjaF9tdWx0aXBsZQ0KcGF0Y2guc3RvcGFsbCA9IF9wYXRjaF9zdG9wYWxsDQpwYXRjaC5URVNUX1BSRUZJWCA9ICd0ZXN0Jw0KDQptYWdpY19tZXRob2RzID0gKA0KICAgICJsdCBsZSBndCBnZSBlcSBuZSAiDQogICAgImdldGl0ZW0gc2V0aXRlbSBkZWxpdGVtICINCiAgICAibGVuIGNvbnRhaW5zIGl0ZXIgIg0KICAgICJoYXNoIHN0ciBzaXplb2YgIg0KICAgICJlbnRlciBleGl0ICINCiAgICAiZGl2bW9kIG5lZyBwb3MgYWJzIGludmVydCAiDQogICAgImNvbXBsZXggaW50IGZsb2F0IGluZGV4ICINCiAgICAidHJ1bmMgZmxvb3IgY2VpbCAiDQogICAgImJvb2wgbmV4dCAiDQopDQoNCm51bWVyaWNzID0gImFkZCBzdWIgbXVsIGRpdiBmbG9vcmRpdiBtb2QgbHNoaWZ0IHJzaGlmdCBhbmQgeG9yIG9yIHBvdyAiDQppbnBsYWNlID0gJyAnLmpvaW4oJ2klcycgJSBuIGZvciBuIGluIG51bWVyaWNzLnNwbGl0KCkpDQpyaWdodCA9ICcgJy5qb2luKCdyJXMnICUgbiBmb3IgbiBpbiBudW1lcmljcy5zcGxpdCgpKQ0KDQojIG5vdCBpbmNsdWRpbmcgX19wcmVwYXJlX18sIF9faW5zdGFuY2VjaGVja19fLCBfX3N1YmNsYXNzY2hlY2tfXw0KIyAoYXMgdGhleSBhcmUgbWV0YWNsYXNzIG1ldGhvZHMpDQojIF9fZGVsX18gaXMgbm90IHN1cHBvcnRlZCBhdCBhbGwgYXMgaXQgY2F1c2VzIHByb2JsZW1zIGlmIGl0IGV4aXN0cw0KDQpfbm9uX2RlZmF1bHRzID0gc2V0KCdfXyVzX18nICUgbWV0aG9kIGZvciBtZXRob2QgaW4gWw0KICAgICdnZXQnLCAnc2V0JywgJ2RlbGV0ZScsICdyZXZlcnNlZCcsICdtaXNzaW5nJywgJ3JlZHVjZScsICdyZWR1Y2VfZXgnLA0KICAgICdnZXRpbml0YXJncycsICdnZXRuZXdhcmdzJywgJ2dldHN0YXRlJywgJ3NldHN0YXRlJywgJ2dldGZvcm1hdCcsDQogICAgJ3NldGZvcm1hdCcsICdyZXByJywgJ2RpcicsICdzdWJjbGFzc2VzJywgJ2Zvcm1hdCcsDQpdKQ0KDQoNCmRlZiBfZ2V0X21ldGhvZChuYW1lLCBmdW5jKToNCiAgICAiVHVybnMgYSBjYWxsYWJsZSBvYmplY3QgKGxpa2UgYSBtb2NrKSBpbnRvIGEgcmVhbCBmdW5jdGlvbiINCiAgICBkZWYgbWV0aG9kKHNlbGYsICphcmdzLCAqKmt3KToNCiAgICAgICAgcmV0dXJuIGZ1bmMoc2VsZiwgKmFyZ3MsICoqa3cpDQogICAgbWV0aG9kLl9fbmFtZV9fID0gbmFtZQ0KICAgIHJldHVybiBtZXRob2QNCg0KDQpfbWFnaWNzID0gc2V0KA0KICAgICdfXyVzX18nICUgbWV0aG9kIGZvciBtZXRob2QgaW4NCiAgICAnICcuam9pbihbbWFnaWNfbWV0aG9kcywgbnVtZXJpY3MsIGlucGxhY2UsIHJpZ2h0XSkuc3BsaXQoKQ0KKQ0KDQpfYWxsX21hZ2ljcyA9IF9tYWdpY3MgfCBfbm9uX2RlZmF1bHRzDQoNCl91bnN1cHBvcnRlZF9tYWdpY3MgPSBzZXQoWw0KICAgICdfX2dldGF0dHJfXycsICdfX3NldGF0dHJfXycsDQogICAgJ19faW5pdF9fJywgJ19fbmV3X18nLCAnX19wcmVwYXJlX18nDQogICAgJ19faW5zdGFuY2VjaGVja19fJywgJ19fc3ViY2xhc3NjaGVja19fJywNCiAgICAnX19kZWxfXycNCl0pDQoNCl9jYWxjdWxhdGVfcmV0dXJuX3ZhbHVlID0gew0KICAgICdfX2hhc2hfXyc6IGxhbWJkYSBzZWxmOiBvYmplY3QuX19oYXNoX18oc2VsZiksDQogICAgJ19fc3RyX18nOiBsYW1iZGEgc2VsZjogb2JqZWN0Ll9fc3RyX18oc2VsZiksDQogICAgJ19fc2l6ZW9mX18nOiBsYW1iZGEgc2VsZjogb2JqZWN0Ll9fc2l6ZW9mX18oc2VsZiksDQp9DQoNCl9yZXR1cm5fdmFsdWVzID0gew0KICAgICdfX2x0X18nOiBOb3RJbXBsZW1lbnRlZCwNCiAgICAnX19ndF9fJzogTm90SW1wbGVtZW50ZWQsDQogICAgJ19fbGVfXyc6IE5vdEltcGxlbWVudGVkLA0KICAgICdfX2dlX18nOiBOb3RJbXBsZW1lbnRlZCwNCiAgICAnX19pbnRfXyc6IDEsDQogICAgJ19fY29udGFpbnNfXyc6IEZhbHNlLA0KICAgICdfX2xlbl9fJzogMCwNCiAgICAnX19leGl0X18nOiBGYWxzZSwNCiAgICAnX19jb21wbGV4X18nOiAxaiwNCiAgICAnX19mbG9hdF9fJzogMS4wLA0KICAgICdfX2Jvb2xfXyc6IFRydWUsDQogICAgJ19faW5kZXhfXyc6IDEsDQp9DQoNCg0KZGVmIF9nZXRfZXEoc2VsZik6DQogICAgZGVmIF9fZXFfXyhvdGhlcik6DQogICAgICAgIHJldF92YWwgPSBzZWxmLl9fZXFfXy5fbW9ja19yZXR1cm5fdmFsdWUNCiAgICAgICAgaWYgcmV0X3ZhbCBpcyBub3QgREVGQVVMVDoNCiAgICAgICAgICAgIHJldHVybiByZXRfdmFsDQogICAgICAgIHJldHVybiBzZWxmIGlzIG90aGVyDQogICAgcmV0dXJuIF9fZXFfXw0KDQpkZWYgX2dldF9uZShzZWxmKToNCiAgICBkZWYgX19uZV9fKG90aGVyKToNCiAgICAgICAgaWYgc2VsZi5fX25lX18uX21vY2tfcmV0dXJuX3ZhbHVlIGlzIG5vdCBERUZBVUxUOg0KICAgICAgICAgICAgcmV0dXJuIERFRkFVTFQNCiAgICAgICAgcmV0dXJuIHNlbGYgaXMgbm90IG90aGVyDQogICAgcmV0dXJuIF9fbmVfXw0KDQpkZWYgX2dldF9pdGVyKHNlbGYpOg0KICAgIGRlZiBfX2l0ZXJfXygpOg0KICAgICAgICByZXRfdmFsID0gc2VsZi5fX2l0ZXJfXy5fbW9ja19yZXR1cm5fdmFsdWUNCiAgICAgICAgaWYgcmV0X3ZhbCBpcyBERUZBVUxUOg0KICAgICAgICAgICAgcmV0dXJuIGl0ZXIoW10pDQogICAgICAgICMgaWYgcmV0X3ZhbCB3YXMgYWxyZWFkeSBhbiBpdGVyYXRvciwgdGhlbiBjYWxsaW5nIGl0ZXIgb24gaXQgc2hvdWxkDQogICAgICAgICMgcmV0dXJuIHRoZSBpdGVyYXRvciB1bmNoYW5nZWQNCiAgICAgICAgcmV0dXJuIGl0ZXIocmV0X3ZhbCkNCiAgICByZXR1cm4gX19pdGVyX18NCg0KX3NpZGVfZWZmZWN0X21ldGhvZHMgPSB7DQogICAgJ19fZXFfXyc6IF9nZXRfZXEsDQogICAgJ19fbmVfXyc6IF9nZXRfbmUsDQogICAgJ19faXRlcl9fJzogX2dldF9pdGVyLA0KfQ0KDQoNCg0KZGVmIF9zZXRfcmV0dXJuX3ZhbHVlKG1vY2ssIG1ldGhvZCwgbmFtZSk6DQogICAgZml4ZWQgPSBfcmV0dXJuX3ZhbHVlcy5nZXQobmFtZSwgREVGQVVMVCkNCiAgICBpZiBmaXhlZCBpcyBub3QgREVGQVVMVDoNCiAgICAgICAgbWV0aG9kLnJldHVybl92YWx1ZSA9IGZpeGVkDQogICAgICAgIHJldHVybg0KDQogICAgcmV0dXJuX2NhbHVsYXRvciA9IF9jYWxjdWxhdGVfcmV0dXJuX3ZhbHVlLmdldChuYW1lKQ0KICAgIGlmIHJldHVybl9jYWx1bGF0b3IgaXMgbm90IE5vbmU6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHJldHVybl92YWx1ZSA9IHJldHVybl9jYWx1bGF0b3IobW9jaykNCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOg0KICAgICAgICAgICAgIyBYWFhYIHdoeSBkbyB3ZSByZXR1cm4gQXR0cmlidXRlRXJyb3IgaGVyZT8NCiAgICAgICAgICAgICMgICAgICBzZXQgaXQgYXMgYSBzaWRlX2VmZmVjdCBpbnN0ZWFkPw0KICAgICAgICAgICAgcmV0dXJuX3ZhbHVlID0gQXR0cmlidXRlRXJyb3IobmFtZSkNCiAgICAgICAgbWV0aG9kLnJldHVybl92YWx1ZSA9IHJldHVybl92YWx1ZQ0KICAgICAgICByZXR1cm4NCg0KICAgIHNpZGVfZWZmZWN0b3IgPSBfc2lkZV9lZmZlY3RfbWV0aG9kcy5nZXQobmFtZSkNCiAgICBpZiBzaWRlX2VmZmVjdG9yIGlzIG5vdCBOb25lOg0KICAgICAgICBtZXRob2Quc2lkZV9lZmZlY3QgPSBzaWRlX2VmZmVjdG9yKG1vY2spDQoNCg0KDQpjbGFzcyBNYWdpY01peGluKG9iamVjdCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3KToNCiAgICAgICAgX3NhZmVfc3VwZXIoTWFnaWNNaXhpbiwgc2VsZikuX19pbml0X18oKmFyZ3MsICoqa3cpDQogICAgICAgIHNlbGYuX21vY2tfc2V0X21hZ2ljcygpDQoNCg0KICAgIGRlZiBfbW9ja19zZXRfbWFnaWNzKHNlbGYpOg0KICAgICAgICB0aGVzZV9tYWdpY3MgPSBfbWFnaWNzDQoNCiAgICAgICAgaWYgc2VsZi5fbW9ja19tZXRob2RzIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgdGhlc2VfbWFnaWNzID0gX21hZ2ljcy5pbnRlcnNlY3Rpb24oc2VsZi5fbW9ja19tZXRob2RzKQ0KDQogICAgICAgICAgICByZW1vdmVfbWFnaWNzID0gc2V0KCkNCiAgICAgICAgICAgIHJlbW92ZV9tYWdpY3MgPSBfbWFnaWNzIC0gdGhlc2VfbWFnaWNzDQoNCiAgICAgICAgICAgIGZvciBlbnRyeSBpbiByZW1vdmVfbWFnaWNzOg0KICAgICAgICAgICAgICAgIGlmIGVudHJ5IGluIHR5cGUoc2VsZikuX19kaWN0X186DQogICAgICAgICAgICAgICAgICAgICMgcmVtb3ZlIHVubmVlZGVkIG1hZ2ljIG1ldGhvZHMNCiAgICAgICAgICAgICAgICAgICAgZGVsYXR0cihzZWxmLCBlbnRyeSkNCg0KICAgICAgICAjIGRvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBhdHRyaWJ1dGVzIGlmIGNhbGxlZCBhIHNlY29uZCB0aW1lDQogICAgICAgIHRoZXNlX21hZ2ljcyA9IHRoZXNlX21hZ2ljcyAtIHNldCh0eXBlKHNlbGYpLl9fZGljdF9fKQ0KDQogICAgICAgIF90eXBlID0gdHlwZShzZWxmKQ0KICAgICAgICBmb3IgZW50cnkgaW4gdGhlc2VfbWFnaWNzOg0KICAgICAgICAgICAgc2V0YXR0cihfdHlwZSwgZW50cnksIE1hZ2ljUHJveHkoZW50cnksIHNlbGYpKQ0KDQoNCg0KY2xhc3MgTm9uQ2FsbGFibGVNYWdpY01vY2soTWFnaWNNaXhpbiwgTm9uQ2FsbGFibGVNb2NrKToNCiAgICAiIiJBIHZlcnNpb24gb2YgYE1hZ2ljTW9ja2AgdGhhdCBpc24ndCBjYWxsYWJsZS4iIiINCiAgICBkZWYgbW9ja19hZGRfc3BlYyhzZWxmLCBzcGVjLCBzcGVjX3NldD1GYWxzZSk6DQogICAgICAgICIiIkFkZCBhIHNwZWMgdG8gYSBtb2NrLiBgc3BlY2AgY2FuIGVpdGhlciBiZSBhbiBvYmplY3Qgb3IgYQ0KICAgICAgICBsaXN0IG9mIHN0cmluZ3MuIE9ubHkgYXR0cmlidXRlcyBvbiB0aGUgYHNwZWNgIGNhbiBiZSBmZXRjaGVkIGFzDQogICAgICAgIGF0dHJpYnV0ZXMgZnJvbSB0aGUgbW9jay4NCg0KICAgICAgICBJZiBgc3BlY19zZXRgIGlzIFRydWUgdGhlbiBvbmx5IGF0dHJpYnV0ZXMgb24gdGhlIHNwZWMgY2FuIGJlIHNldC4iIiINCiAgICAgICAgc2VsZi5fbW9ja19hZGRfc3BlYyhzcGVjLCBzcGVjX3NldCkNCiAgICAgICAgc2VsZi5fbW9ja19zZXRfbWFnaWNzKCkNCg0KDQoNCmNsYXNzIE1hZ2ljTW9jayhNYWdpY01peGluLCBNb2NrKToNCiAgICAiIiINCiAgICBNYWdpY01vY2sgaXMgYSBzdWJjbGFzcyBvZiBNb2NrIHdpdGggZGVmYXVsdCBpbXBsZW1lbnRhdGlvbnMNCiAgICBvZiBtb3N0IG9mIHRoZSBtYWdpYyBtZXRob2RzLiBZb3UgY2FuIHVzZSBNYWdpY01vY2sgd2l0aG91dCBoYXZpbmcgdG8NCiAgICBjb25maWd1cmUgdGhlIG1hZ2ljIG1ldGhvZHMgeW91cnNlbGYuDQoNCiAgICBJZiB5b3UgdXNlIHRoZSBgc3BlY2Agb3IgYHNwZWNfc2V0YCBhcmd1bWVudHMgdGhlbiAqb25seSogbWFnaWMNCiAgICBtZXRob2RzIHRoYXQgZXhpc3QgaW4gdGhlIHNwZWMgd2lsbCBiZSBjcmVhdGVkLg0KDQogICAgQXR0cmlidXRlcyBhbmQgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGBNYWdpY01vY2tgIHdpbGwgYWxzbyBiZSBgTWFnaWNNb2Nrc2AuDQogICAgIiIiDQogICAgZGVmIG1vY2tfYWRkX3NwZWMoc2VsZiwgc3BlYywgc3BlY19zZXQ9RmFsc2UpOg0KICAgICAgICAiIiJBZGQgYSBzcGVjIHRvIGEgbW9jay4gYHNwZWNgIGNhbiBlaXRoZXIgYmUgYW4gb2JqZWN0IG9yIGENCiAgICAgICAgbGlzdCBvZiBzdHJpbmdzLiBPbmx5IGF0dHJpYnV0ZXMgb24gdGhlIGBzcGVjYCBjYW4gYmUgZmV0Y2hlZCBhcw0KICAgICAgICBhdHRyaWJ1dGVzIGZyb20gdGhlIG1vY2suDQoNCiAgICAgICAgSWYgYHNwZWNfc2V0YCBpcyBUcnVlIHRoZW4gb25seSBhdHRyaWJ1dGVzIG9uIHRoZSBzcGVjIGNhbiBiZSBzZXQuIiIiDQogICAgICAgIHNlbGYuX21vY2tfYWRkX3NwZWMoc3BlYywgc3BlY19zZXQpDQogICAgICAgIHNlbGYuX21vY2tfc2V0X21hZ2ljcygpDQoNCg0KDQpjbGFzcyBNYWdpY1Byb3h5KG9iamVjdCk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIG5hbWUsIHBhcmVudCk6DQogICAgICAgIHNlbGYubmFtZSA9IG5hbWUNCiAgICAgICAgc2VsZi5wYXJlbnQgPSBwYXJlbnQNCg0KICAgIGRlZiBfX2NhbGxfXyhzZWxmLCAqYXJncywgKiprd2FyZ3MpOg0KICAgICAgICBtID0gc2VsZi5jcmVhdGVfbW9jaygpDQogICAgICAgIHJldHVybiBtKCphcmdzLCAqKmt3YXJncykNCg0KICAgIGRlZiBjcmVhdGVfbW9jayhzZWxmKToNCiAgICAgICAgZW50cnkgPSBzZWxmLm5hbWUNCiAgICAgICAgcGFyZW50ID0gc2VsZi5wYXJlbnQNCiAgICAgICAgbSA9IHBhcmVudC5fZ2V0X2NoaWxkX21vY2sobmFtZT1lbnRyeSwgX25ld19uYW1lPWVudHJ5LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbmV3X3BhcmVudD1wYXJlbnQpDQogICAgICAgIHNldGF0dHIocGFyZW50LCBlbnRyeSwgbSkNCiAgICAgICAgX3NldF9yZXR1cm5fdmFsdWUocGFyZW50LCBtLCBlbnRyeSkNCiAgICAgICAgcmV0dXJuIG0NCg0KICAgIGRlZiBfX2dldF9fKHNlbGYsIG9iaiwgX3R5cGU9Tm9uZSk6DQogICAgICAgIHJldHVybiBzZWxmLmNyZWF0ZV9tb2NrKCkNCg0KDQoNCmNsYXNzIF9BTlkob2JqZWN0KToNCiAgICAiQSBoZWxwZXIgb2JqZWN0IHRoYXQgY29tcGFyZXMgZXF1YWwgdG8gZXZlcnl0aGluZy4iDQoNCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToNCiAgICAgICAgcmV0dXJuIFRydWUNCg0KICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOg0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KICAgIGRlZiBfX3JlcHJfXyhzZWxmKToNCiAgICAgICAgcmV0dXJuICc8QU5ZPicNCg0KQU5ZID0gX0FOWSgpDQoNCg0KDQpkZWYgX2Zvcm1hdF9jYWxsX3NpZ25hdHVyZShuYW1lLCBhcmdzLCBrd2FyZ3MpOg0KICAgIG1lc3NhZ2UgPSAnJXMoJSVzKScgJSBuYW1lDQogICAgZm9ybWF0dGVkX2FyZ3MgPSAnJw0KICAgIGFyZ3Nfc3RyaW5nID0gJywgJy5qb2luKFtyZXByKGFyZykgZm9yIGFyZyBpbiBhcmdzXSkNCiAgICBrd2FyZ3Nfc3RyaW5nID0gJywgJy5qb2luKFsNCiAgICAgICAgJyVzPSVyJyAlIChrZXksIHZhbHVlKSBmb3Iga2V5LCB2YWx1ZSBpbiBrd2FyZ3MuaXRlbXMoKQ0KICAgIF0pDQogICAgaWYgYXJnc19zdHJpbmc6DQogICAgICAgIGZvcm1hdHRlZF9hcmdzID0gYXJnc19zdHJpbmcNCiAgICBpZiBrd2FyZ3Nfc3RyaW5nOg0KICAgICAgICBpZiBmb3JtYXR0ZWRfYXJnczoNCiAgICAgICAgICAgIGZvcm1hdHRlZF9hcmdzICs9ICcsICcNCiAgICAgICAgZm9ybWF0dGVkX2FyZ3MgKz0ga3dhcmdzX3N0cmluZw0KDQogICAgcmV0dXJuIG1lc3NhZ2UgJSBmb3JtYXR0ZWRfYXJncw0KDQoNCg0KY2xhc3MgX0NhbGwodHVwbGUpOg0KICAgICIiIg0KICAgIEEgdHVwbGUgZm9yIGhvbGRpbmcgdGhlIHJlc3VsdHMgb2YgYSBjYWxsIHRvIGEgbW9jaywgZWl0aGVyIGluIHRoZSBmb3JtDQogICAgYChhcmdzLCBrd2FyZ3MpYCBvciBgKG5hbWUsIGFyZ3MsIGt3YXJncylgLg0KDQogICAgSWYgYXJncyBvciBrd2FyZ3MgYXJlIGVtcHR5IHRoZW4gYSBjYWxsIHR1cGxlIHdpbGwgY29tcGFyZSBlcXVhbCB0bw0KICAgIGEgdHVwbGUgd2l0aG91dCB0aG9zZSB2YWx1ZXMuIFRoaXMgbWFrZXMgY29tcGFyaXNvbnMgbGVzcyB2ZXJib3NlOjoNCg0KICAgICAgICBfQ2FsbCgoJ25hbWUnLCAoKSwge30pKSA9PSAoJ25hbWUnLCkNCiAgICAgICAgX0NhbGwoKCduYW1lJywgKDEsKSwge30pKSA9PSAoJ25hbWUnLCAoMSwpKQ0KICAgICAgICBfQ2FsbCgoKCksIHsnYSc6ICdiJ30pKSA9PSAoeydhJzogJ2InfSwpDQoNCiAgICBUaGUgYF9DYWxsYCBvYmplY3QgcHJvdmlkZXMgYSB1c2VmdWwgc2hvcnRjdXQgZm9yIGNvbXBhcmluZyB3aXRoIGNhbGw6Og0KDQogICAgICAgIF9DYWxsKCgoMSwgMiksIHsnYSc6IDN9KSkgPT0gY2FsbCgxLCAyLCBhPTMpDQogICAgICAgIF9DYWxsKCgnZm9vJywgKDEsIDIpLCB7J2EnOiAzfSkpID09IGNhbGwuZm9vKDEsIDIsIGE9MykNCg0KICAgIElmIHRoZSBfQ2FsbCBoYXMgbm8gbmFtZSB0aGVuIGl0IHdpbGwgbWF0Y2ggYW55IG5hbWUuDQogICAgIiIiDQogICAgZGVmIF9fbmV3X18oY2xzLCB2YWx1ZT0oKSwgbmFtZT1Ob25lLCBwYXJlbnQ9Tm9uZSwgdHdvPUZhbHNlLA0KICAgICAgICAgICAgICAgIGZyb21fa2FsbD1UcnVlKToNCiAgICAgICAgbmFtZSA9ICcnDQogICAgICAgIGFyZ3MgPSAoKQ0KICAgICAgICBrd2FyZ3MgPSB7fQ0KICAgICAgICBfbGVuID0gbGVuKHZhbHVlKQ0KICAgICAgICBpZiBfbGVuID09IDM6DQogICAgICAgICAgICBuYW1lLCBhcmdzLCBrd2FyZ3MgPSB2YWx1ZQ0KICAgICAgICBlbGlmIF9sZW4gPT0gMjoNCiAgICAgICAgICAgIGZpcnN0LCBzZWNvbmQgPSB2YWx1ZQ0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShmaXJzdCwgc3RyKToNCiAgICAgICAgICAgICAgICBuYW1lID0gZmlyc3QNCiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHNlY29uZCwgdHVwbGUpOg0KICAgICAgICAgICAgICAgICAgICBhcmdzID0gc2Vjb25kDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAga3dhcmdzID0gc2Vjb25kDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGFyZ3MsIGt3YXJncyA9IGZpcnN0LCBzZWNvbmQNCiAgICAgICAgZWxpZiBfbGVuID09IDE6DQogICAgICAgICAgICB2YWx1ZSwgPSB2YWx1ZQ0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyKToNCiAgICAgICAgICAgICAgICBuYW1lID0gdmFsdWUNCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgdHVwbGUpOg0KICAgICAgICAgICAgICAgIGFyZ3MgPSB2YWx1ZQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBrd2FyZ3MgPSB2YWx1ZQ0KDQogICAgICAgIGlmIHR3bzoNCiAgICAgICAgICAgIHJldHVybiB0dXBsZS5fX25ld19fKGNscywgKGFyZ3MsIGt3YXJncykpDQoNCiAgICAgICAgcmV0dXJuIHR1cGxlLl9fbmV3X18oY2xzLCAobmFtZSwgYXJncywga3dhcmdzKSkNCg0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYsIHZhbHVlPSgpLCBuYW1lPU5vbmUsIHBhcmVudD1Ob25lLCB0d289RmFsc2UsDQogICAgICAgICAgICAgICAgIGZyb21fa2FsbD1UcnVlKToNCiAgICAgICAgc2VsZi5uYW1lID0gbmFtZQ0KICAgICAgICBzZWxmLnBhcmVudCA9IHBhcmVudA0KICAgICAgICBzZWxmLmZyb21fa2FsbCA9IGZyb21fa2FsbA0KDQoNCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToNCiAgICAgICAgaWYgb3RoZXIgaXMgQU5ZOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgbGVuX290aGVyID0gbGVuKG90aGVyKQ0KICAgICAgICBleGNlcHQgVHlwZUVycm9yOg0KICAgICAgICAgICAgcmV0dXJuIEZhbHNlDQoNCiAgICAgICAgc2VsZl9uYW1lID0gJycNCiAgICAgICAgaWYgbGVuKHNlbGYpID09IDI6DQogICAgICAgICAgICBzZWxmX2FyZ3MsIHNlbGZfa3dhcmdzID0gc2VsZg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZl9uYW1lLCBzZWxmX2FyZ3MsIHNlbGZfa3dhcmdzID0gc2VsZg0KDQogICAgICAgIG90aGVyX25hbWUgPSAnJw0KICAgICAgICBpZiBsZW5fb3RoZXIgPT0gMDoNCiAgICAgICAgICAgIG90aGVyX2FyZ3MsIG90aGVyX2t3YXJncyA9ICgpLCB7fQ0KICAgICAgICBlbGlmIGxlbl9vdGhlciA9PSAzOg0KICAgICAgICAgICAgb3RoZXJfbmFtZSwgb3RoZXJfYXJncywgb3RoZXJfa3dhcmdzID0gb3RoZXINCiAgICAgICAgZWxpZiBsZW5fb3RoZXIgPT0gMToNCiAgICAgICAgICAgIHZhbHVlLCA9IG90aGVyDQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCB0dXBsZSk6DQogICAgICAgICAgICAgICAgb3RoZXJfYXJncyA9IHZhbHVlDQogICAgICAgICAgICAgICAgb3RoZXJfa3dhcmdzID0ge30NCiAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZSh2YWx1ZSwgc3RyKToNCiAgICAgICAgICAgICAgICBvdGhlcl9uYW1lID0gdmFsdWUNCiAgICAgICAgICAgICAgICBvdGhlcl9hcmdzLCBvdGhlcl9rd2FyZ3MgPSAoKSwge30NCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb3RoZXJfYXJncyA9ICgpDQogICAgICAgICAgICAgICAgb3RoZXJfa3dhcmdzID0gdmFsdWUNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgICMgbGVuIDINCiAgICAgICAgICAgICMgY291bGQgYmUgKG5hbWUsIGFyZ3MpIG9yIChuYW1lLCBrd2FyZ3MpIG9yIChhcmdzLCBrd2FyZ3MpDQogICAgICAgICAgICBmaXJzdCwgc2Vjb25kID0gb3RoZXINCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZmlyc3QsIHN0cik6DQogICAgICAgICAgICAgICAgb3RoZXJfbmFtZSA9IGZpcnN0DQogICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzZWNvbmQsIHR1cGxlKToNCiAgICAgICAgICAgICAgICAgICAgb3RoZXJfYXJncywgb3RoZXJfa3dhcmdzID0gc2Vjb25kLCB7fQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIG90aGVyX2FyZ3MsIG90aGVyX2t3YXJncyA9ICgpLCBzZWNvbmQNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgb3RoZXJfYXJncywgb3RoZXJfa3dhcmdzID0gZmlyc3QsIHNlY29uZA0KDQogICAgICAgIGlmIHNlbGZfbmFtZSBhbmQgb3RoZXJfbmFtZSAhPSBzZWxmX25hbWU6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCg0KICAgICAgICAjIHRoaXMgb3JkZXIgaXMgaW1wb3J0YW50IGZvciBBTlkgdG8gd29yayENCiAgICAgICAgcmV0dXJuIChvdGhlcl9hcmdzLCBvdGhlcl9rd2FyZ3MpID09IChzZWxmX2FyZ3MsIHNlbGZfa3dhcmdzKQ0KDQoNCiAgICBkZWYgX19uZV9fKHNlbGYsIG90aGVyKToNCiAgICAgICAgcmV0dXJuIG5vdCBzZWxmLl9fZXFfXyhvdGhlcikNCg0KDQogICAgZGVmIF9fY2FsbF9fKHNlbGYsICphcmdzLCAqKmt3YXJncyk6DQogICAgICAgIGlmIHNlbGYubmFtZSBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIF9DYWxsKCgnJywgYXJncywga3dhcmdzKSwgbmFtZT0nKCknKQ0KDQogICAgICAgIG5hbWUgPSBzZWxmLm5hbWUgKyAnKCknDQogICAgICAgIHJldHVybiBfQ2FsbCgoc2VsZi5uYW1lLCBhcmdzLCBrd2FyZ3MpLCBuYW1lPW5hbWUsIHBhcmVudD1zZWxmKQ0KDQoNCiAgICBkZWYgX19nZXRhdHRyX18oc2VsZiwgYXR0cik6DQogICAgICAgIGlmIHNlbGYubmFtZSBpcyBOb25lOg0KICAgICAgICAgICAgcmV0dXJuIF9DYWxsKG5hbWU9YXR0ciwgZnJvbV9rYWxsPUZhbHNlKQ0KICAgICAgICBuYW1lID0gJyVzLiVzJyAlIChzZWxmLm5hbWUsIGF0dHIpDQogICAgICAgIHJldHVybiBfQ2FsbChuYW1lPW5hbWUsIHBhcmVudD1zZWxmLCBmcm9tX2thbGw9RmFsc2UpDQoNCg0KICAgIGRlZiBfX3JlcHJfXyhzZWxmKToNCiAgICAgICAgaWYgbm90IHNlbGYuZnJvbV9rYWxsOg0KICAgICAgICAgICAgbmFtZSA9IHNlbGYubmFtZSBvciAnY2FsbCcNCiAgICAgICAgICAgIGlmIG5hbWUuc3RhcnRzd2l0aCgnKCknKToNCiAgICAgICAgICAgICAgICBuYW1lID0gJ2NhbGwlcycgJSBuYW1lDQogICAgICAgICAgICByZXR1cm4gbmFtZQ0KDQogICAgICAgIGlmIGxlbihzZWxmKSA9PSAyOg0KICAgICAgICAgICAgbmFtZSA9ICdjYWxsJw0KICAgICAgICAgICAgYXJncywga3dhcmdzID0gc2VsZg0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgbmFtZSwgYXJncywga3dhcmdzID0gc2VsZg0KICAgICAgICAgICAgaWYgbm90IG5hbWU6DQogICAgICAgICAgICAgICAgbmFtZSA9ICdjYWxsJw0KICAgICAgICAgICAgZWxpZiBub3QgbmFtZS5zdGFydHN3aXRoKCcoKScpOg0KICAgICAgICAgICAgICAgIG5hbWUgPSAnY2FsbC4lcycgJSBuYW1lDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIG5hbWUgPSAnY2FsbCVzJyAlIG5hbWUNCiAgICAgICAgcmV0dXJuIF9mb3JtYXRfY2FsbF9zaWduYXR1cmUobmFtZSwgYXJncywga3dhcmdzKQ0KDQoNCiAgICBkZWYgY2FsbF9saXN0KHNlbGYpOg0KICAgICAgICAiIiJGb3IgYSBjYWxsIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgbXVsdGlwbGUgY2FsbHMsIGBjYWxsX2xpc3RgDQogICAgICAgIHJldHVybnMgYSBsaXN0IG9mIGFsbCB0aGUgaW50ZXJtZWRpYXRlIGNhbGxzIGFzIHdlbGwgYXMgdGhlDQogICAgICAgIGZpbmFsIGNhbGwuIiIiDQogICAgICAgIHZhbHMgPSBbXQ0KICAgICAgICB0aGluZyA9IHNlbGYNCiAgICAgICAgd2hpbGUgdGhpbmcgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBpZiB0aGluZy5mcm9tX2thbGw6DQogICAgICAgICAgICAgICAgdmFscy5hcHBlbmQodGhpbmcpDQogICAgICAgICAgICB0aGluZyA9IHRoaW5nLnBhcmVudA0KICAgICAgICByZXR1cm4gX0NhbGxMaXN0KHJldmVyc2VkKHZhbHMpKQ0KDQoNCmNhbGwgPSBfQ2FsbChmcm9tX2thbGw9RmFsc2UpDQoNCg0KDQpkZWYgY3JlYXRlX2F1dG9zcGVjKHNwZWMsIHNwZWNfc2V0PUZhbHNlLCBpbnN0YW5jZT1GYWxzZSwgX3BhcmVudD1Ob25lLA0KICAgICAgICAgICAgICAgICAgICBfbmFtZT1Ob25lLCAqKmt3YXJncyk6DQogICAgIiIiQ3JlYXRlIGEgbW9jayBvYmplY3QgdXNpbmcgYW5vdGhlciBvYmplY3QgYXMgYSBzcGVjLiBBdHRyaWJ1dGVzIG9uIHRoZQ0KICAgIG1vY2sgd2lsbCB1c2UgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9uIHRoZSBgc3BlY2Agb2JqZWN0IGFzIHRoZWlyDQogICAgc3BlYy4NCg0KICAgIEZ1bmN0aW9ucyBvciBtZXRob2RzIGJlaW5nIG1vY2tlZCB3aWxsIGhhdmUgdGhlaXIgYXJndW1lbnRzIGNoZWNrZWQNCiAgICB0byBjaGVjayB0aGF0IHRoZXkgYXJlIGNhbGxlZCB3aXRoIHRoZSBjb3JyZWN0IHNpZ25hdHVyZS4NCg0KICAgIElmIGBzcGVjX3NldGAgaXMgVHJ1ZSB0aGVuIGF0dGVtcHRpbmcgdG8gc2V0IGF0dHJpYnV0ZXMgdGhhdCBkb24ndCBleGlzdA0KICAgIG9uIHRoZSBzcGVjIG9iamVjdCB3aWxsIHJhaXNlIGFuIGBBdHRyaWJ1dGVFcnJvcmAuDQoNCiAgICBJZiBhIGNsYXNzIGlzIHVzZWQgYXMgYSBzcGVjIHRoZW4gdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgbW9jayAodGhlDQogICAgaW5zdGFuY2Ugb2YgdGhlIGNsYXNzKSB3aWxsIGhhdmUgdGhlIHNhbWUgc3BlYy4gWW91IGNhbiB1c2UgYSBjbGFzcyBhcyB0aGUNCiAgICBzcGVjIGZvciBhbiBpbnN0YW5jZSBvYmplY3QgYnkgcGFzc2luZyBgaW5zdGFuY2U9VHJ1ZWAuIFRoZSByZXR1cm5lZCBtb2NrDQogICAgd2lsbCBvbmx5IGJlIGNhbGxhYmxlIGlmIGluc3RhbmNlcyBvZiB0aGUgbW9jayBhcmUgY2FsbGFibGUuDQoNCiAgICBgY3JlYXRlX2F1dG9zcGVjYCBhbHNvIHRha2VzIGFyYml0cmFyeSBrZXl3b3JkIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgdG8NCiAgICB0aGUgY29uc3RydWN0b3Igb2YgdGhlIGNyZWF0ZWQgbW9jay4iIiINCiAgICBpZiBfaXNfbGlzdChzcGVjKToNCiAgICAgICAgIyBjYW4ndCBwYXNzIGEgbGlzdCBpbnN0YW5jZSB0byB0aGUgbW9jayBjb25zdHJ1Y3RvciBhcyBpdCB3aWxsIGJlDQogICAgICAgICMgaW50ZXJwcmV0ZWQgYXMgYSBsaXN0IG9mIHN0cmluZ3MNCiAgICAgICAgc3BlYyA9IHR5cGUoc3BlYykNCg0KICAgIGlzX3R5cGUgPSBpc2luc3RhbmNlKHNwZWMsIHR5cGUpDQoNCiAgICBfa3dhcmdzID0geydzcGVjJzogc3BlY30NCiAgICBpZiBzcGVjX3NldDoNCiAgICAgICAgX2t3YXJncyA9IHsnc3BlY19zZXQnOiBzcGVjfQ0KICAgIGVsaWYgc3BlYyBpcyBOb25lOg0KICAgICAgICAjIE5vbmUgd2UgbW9jayB3aXRoIGEgbm9ybWFsIG1vY2sgd2l0aG91dCBhIHNwZWMNCiAgICAgICAgX2t3YXJncyA9IHt9DQoNCiAgICBfa3dhcmdzLnVwZGF0ZShrd2FyZ3MpDQoNCiAgICBLbGFzcyA9IE1hZ2ljTW9jaw0KICAgIGlmIHR5cGUoc3BlYykgaW4gRGVzY3JpcHRvclR5cGVzOg0KICAgICAgICAjIGRlc2NyaXB0b3JzIGRvbid0IGhhdmUgYSBzcGVjDQogICAgICAgICMgYmVjYXVzZSB3ZSBkb24ndCBrbm93IHdoYXQgdHlwZSB0aGV5IHJldHVybg0KICAgICAgICBfa3dhcmdzID0ge30NCiAgICBlbGlmIG5vdCBfY2FsbGFibGUoc3BlYyk6DQogICAgICAgIEtsYXNzID0gTm9uQ2FsbGFibGVNYWdpY01vY2sNCiAgICBlbGlmIGlzX3R5cGUgYW5kIGluc3RhbmNlIGFuZCBub3QgX2luc3RhbmNlX2NhbGxhYmxlKHNwZWMpOg0KICAgICAgICBLbGFzcyA9IE5vbkNhbGxhYmxlTWFnaWNNb2NrDQoNCiAgICBfbmV3X25hbWUgPSBfbmFtZQ0KICAgIGlmIF9wYXJlbnQgaXMgTm9uZToNCiAgICAgICAgIyBmb3IgYSB0b3AgbGV2ZWwgb2JqZWN0IG5vIF9uZXdfbmFtZSBzaG91bGQgYmUgc2V0DQogICAgICAgIF9uZXdfbmFtZSA9ICcnDQoNCiAgICBtb2NrID0gS2xhc3MocGFyZW50PV9wYXJlbnQsIF9uZXdfcGFyZW50PV9wYXJlbnQsIF9uZXdfbmFtZT1fbmV3X25hbWUsDQogICAgICAgICAgICAgICAgIG5hbWU9X25hbWUsICoqX2t3YXJncykNCg0KICAgIGlmIGlzaW5zdGFuY2Uoc3BlYywgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICMgc2hvdWxkIG9ubHkgaGFwcGVuIGF0IHRoZSB0b3AgbGV2ZWwgYmVjYXVzZSB3ZSBkb24ndA0KICAgICAgICAjIHJlY3Vyc2UgZm9yIGZ1bmN0aW9ucw0KICAgICAgICBtb2NrID0gX3NldF9zaWduYXR1cmUobW9jaywgc3BlYykNCiAgICBlbHNlOg0KICAgICAgICBfY2hlY2tfc2lnbmF0dXJlKHNwZWMsIG1vY2ssIGlzX3R5cGUsIGluc3RhbmNlKQ0KDQogICAgaWYgX3BhcmVudCBpcyBub3QgTm9uZSBhbmQgbm90IGluc3RhbmNlOg0KICAgICAgICBfcGFyZW50Ll9tb2NrX2NoaWxkcmVuW19uYW1lXSA9IG1vY2sNCg0KICAgIGlmIGlzX3R5cGUgYW5kIG5vdCBpbnN0YW5jZSBhbmQgJ3JldHVybl92YWx1ZScgbm90IGluIGt3YXJnczoNCiAgICAgICAgbW9jay5yZXR1cm5fdmFsdWUgPSBjcmVhdGVfYXV0b3NwZWMoc3BlYywgc3BlY19zZXQsIGluc3RhbmNlPVRydWUsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9uYW1lPScoKScsIF9wYXJlbnQ9bW9jaykNCg0KICAgIGZvciBlbnRyeSBpbiBkaXIoc3BlYyk6DQogICAgICAgIGlmIF9pc19tYWdpYyhlbnRyeSk6DQogICAgICAgICAgICAjIE1hZ2ljTW9jayBhbHJlYWR5IGRvZXMgdGhlIHVzZWZ1bCBtYWdpYyBtZXRob2RzIGZvciB1cw0KICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICAjIFhYWFggZG8gd2UgbmVlZCBhIGJldHRlciB3YXkgb2YgZ2V0dGluZyBhdHRyaWJ1dGVzIHdpdGhvdXQNCiAgICAgICAgIyB0cmlnZ2VyaW5nIGNvZGUgZXhlY3V0aW9uICg/KSBQcm9iYWJseSBub3QgLSB3ZSBuZWVkIHRoZSBhY3R1YWwNCiAgICAgICAgIyBvYmplY3QgdG8gbW9jayBpdCBzbyB3ZSB3b3VsZCByYXRoZXIgdHJpZ2dlciBhIHByb3BlcnR5IHRoYW4gbW9jaw0KICAgICAgICAjIHRoZSBwcm9wZXJ0eSBkZXNjcmlwdG9yLiBMaWtld2lzZSB3ZSB3YW50IHRvIG1vY2sgb3V0IGR5bmFtaWNhbGx5DQogICAgICAgICMgcHJvdmlkZWQgYXR0cmlidXRlcy4NCiAgICAgICAgIyBYWFhYIHdoYXQgYWJvdXQgYXR0cmlidXRlcyB0aGF0IHJhaXNlIGV4Y2VwdGlvbnMgb3RoZXIgdGhhbg0KICAgICAgICAjIEF0dHJpYnV0ZUVycm9yIG9uIGJlaW5nIGZldGNoZWQ/DQogICAgICAgICMgd2UgY291bGQgYmUgcmVzaWxpZW50IGFnYWluc3QgaXQsIG9yIGNhdGNoIGFuZCBwcm9wYWdhdGUgdGhlDQogICAgICAgICMgZXhjZXB0aW9uIHdoZW4gdGhlIGF0dHJpYnV0ZSBpcyBmZXRjaGVkIGZyb20gdGhlIG1vY2sNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgb3JpZ2luYWwgPSBnZXRhdHRyKHNwZWMsIGVudHJ5KQ0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICBjb250aW51ZQ0KDQogICAgICAgIGt3YXJncyA9IHsnc3BlYyc6IG9yaWdpbmFsfQ0KICAgICAgICBpZiBzcGVjX3NldDoNCiAgICAgICAgICAgIGt3YXJncyA9IHsnc3BlY19zZXQnOiBvcmlnaW5hbH0NCg0KICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvcmlnaW5hbCwgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICAgICBuZXcgPSBfU3BlY1N0YXRlKG9yaWdpbmFsLCBzcGVjX3NldCwgbW9jaywgZW50cnksIGluc3RhbmNlKQ0KICAgICAgICAgICAgbW9jay5fbW9ja19jaGlsZHJlbltlbnRyeV0gPSBuZXcNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHBhcmVudCA9IG1vY2sNCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc3BlYywgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICAgICAgICAgcGFyZW50ID0gbW9jay5tb2NrDQoNCiAgICAgICAgICAgIG5ldyA9IE1hZ2ljTW9jayhwYXJlbnQ9cGFyZW50LCBuYW1lPWVudHJ5LCBfbmV3X25hbWU9ZW50cnksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgX25ld19wYXJlbnQ9cGFyZW50LCAqKmt3YXJncykNCiAgICAgICAgICAgIG1vY2suX21vY2tfY2hpbGRyZW5bZW50cnldID0gbmV3DQogICAgICAgICAgICBza2lwZmlyc3QgPSBfbXVzdF9za2lwKHNwZWMsIGVudHJ5LCBpc190eXBlKQ0KICAgICAgICAgICAgX2NoZWNrX3NpZ25hdHVyZShvcmlnaW5hbCwgbmV3LCBza2lwZmlyc3Q9c2tpcGZpcnN0KQ0KDQogICAgICAgICMgc28gZnVuY3Rpb25zIGNyZWF0ZWQgd2l0aCBfc2V0X3NpZ25hdHVyZSBiZWNvbWUgaW5zdGFuY2UgYXR0cmlidXRlcywNCiAgICAgICAgIyAqcGx1cyogdGhlaXIgdW5kZXJseWluZyBtb2NrIGV4aXN0cyBpbiBfbW9ja19jaGlsZHJlbiBvZiB0aGUgcGFyZW50DQogICAgICAgICMgbW9jay4gQWRkaW5nIHRvIF9tb2NrX2NoaWxkcmVuIG1heSBiZSB1bm5lY2Vzc2FyeSB3aGVyZSB3ZSBhcmUgYWxzbw0KICAgICAgICAjIHNldHRpbmcgYXMgYW4gaW5zdGFuY2UgYXR0cmlidXRlPw0KICAgICAgICBpZiBpc2luc3RhbmNlKG5ldywgRnVuY3Rpb25UeXBlcyk6DQogICAgICAgICAgICBzZXRhdHRyKG1vY2ssIGVudHJ5LCBuZXcpDQoNCiAgICByZXR1cm4gbW9jaw0KDQoNCmRlZiBfbXVzdF9za2lwKHNwZWMsIGVudHJ5LCBpc190eXBlKToNCiAgICBpZiBub3QgaXNpbnN0YW5jZShzcGVjLCB0eXBlKToNCiAgICAgICAgaWYgZW50cnkgaW4gZ2V0YXR0cihzcGVjLCAnX19kaWN0X18nLCB7fSk6DQogICAgICAgICAgICAjIGluc3RhbmNlIGF0dHJpYnV0ZSAtIHNob3VsZG4ndCBza2lwDQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgc3BlYyA9IHNwZWMuX19jbGFzc19fDQoNCiAgICBmb3Iga2xhc3MgaW4gc3BlYy5fX21yb19fOg0KICAgICAgICByZXN1bHQgPSBrbGFzcy5fX2RpY3RfXy5nZXQoZW50cnksIERFRkFVTFQpDQogICAgICAgIGlmIHJlc3VsdCBpcyBERUZBVUxUOg0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgaWYgaXNpbnN0YW5jZShyZXN1bHQsIChzdGF0aWNtZXRob2QsIGNsYXNzbWV0aG9kKSk6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgcmV0dXJuIGlzX3R5cGUNCg0KICAgICMgc2hvdWxkbid0IGdldCBoZXJlIHVubGVzcyBmdW5jdGlvbiBpcyBhIGR5bmFtaWNhbGx5IHByb3ZpZGVkIGF0dHJpYnV0ZQ0KICAgICMgWFhYWCB1bnRlc3RlZCBiZWhhdmlvdXINCiAgICByZXR1cm4gaXNfdHlwZQ0KDQoNCmRlZiBfZ2V0X2NsYXNzKG9iaik6DQogICAgdHJ5Og0KICAgICAgICByZXR1cm4gb2JqLl9fY2xhc3NfXw0KICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoNCiAgICAgICAgIyBpdCBpcyBwb3NzaWJsZSBmb3Igb2JqZWN0cyB0byBoYXZlIG5vIF9fY2xhc3NfXw0KICAgICAgICByZXR1cm4gdHlwZShvYmopDQoNCg0KY2xhc3MgX1NwZWNTdGF0ZShvYmplY3QpOg0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYsIHNwZWMsIHNwZWNfc2V0PUZhbHNlLCBwYXJlbnQ9Tm9uZSwNCiAgICAgICAgICAgICAgICAgbmFtZT1Ob25lLCBpZHM9Tm9uZSwgaW5zdGFuY2U9RmFsc2UpOg0KICAgICAgICBzZWxmLnNwZWMgPSBzcGVjDQogICAgICAgIHNlbGYuaWRzID0gaWRzDQogICAgICAgIHNlbGYuc3BlY19zZXQgPSBzcGVjX3NldA0KICAgICAgICBzZWxmLnBhcmVudCA9IHBhcmVudA0KICAgICAgICBzZWxmLmluc3RhbmNlID0gaW5zdGFuY2UNCiAgICAgICAgc2VsZi5uYW1lID0gbmFtZQ0KDQoNCkZ1bmN0aW9uVHlwZXMgPSAoDQogICAgIyBweXRob24gZnVuY3Rpb24NCiAgICB0eXBlKGNyZWF0ZV9hdXRvc3BlYyksDQogICAgIyBpbnN0YW5jZSBtZXRob2QNCiAgICB0eXBlKEFOWS5fX2VxX18pLA0KKQ0KDQoNCmZpbGVfc3BlYyA9IE5vbmUNCg0KDQpkZWYgbW9ja19vcGVuKG1vY2s9Tm9uZSwgcmVhZF9kYXRhPScnKToNCiAgICAiIiINCiAgICBBIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgYSBtb2NrIHRvIHJlcGxhY2UgdGhlIHVzZSBvZiBgb3BlbmAuIEl0IHdvcmtzDQogICAgZm9yIGBvcGVuYCBjYWxsZWQgZGlyZWN0bHkgb3IgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlci4NCg0KICAgIFRoZSBgbW9ja2AgYXJndW1lbnQgaXMgdGhlIG1vY2sgb2JqZWN0IHRvIGNvbmZpZ3VyZS4gSWYgYE5vbmVgICh0aGUNCiAgICBkZWZhdWx0KSB0aGVuIGEgYE1hZ2ljTW9ja2Agd2lsbCBiZSBjcmVhdGVkIGZvciB5b3UsIHdpdGggdGhlIEFQSSBsaW1pdGVkDQogICAgdG8gbWV0aG9kcyBvciBhdHRyaWJ1dGVzIGF2YWlsYWJsZSBvbiBzdGFuZGFyZCBmaWxlIGhhbmRsZXMuDQoNCiAgICBgcmVhZF9kYXRhYCBpcyBhIHN0cmluZyBmb3IgdGhlIGByZWFkYCBtZXRob2Qgb2YgdGhlIGZpbGUgaGFuZGxlIHRvIHJldHVybi4NCiAgICBUaGlzIGlzIGFuIGVtcHR5IHN0cmluZyBieSBkZWZhdWx0Lg0KICAgICIiIg0KICAgIGdsb2JhbCBmaWxlX3NwZWMNCiAgICBpZiBmaWxlX3NwZWMgaXMgTm9uZToNCiAgICAgICAgaW1wb3J0IF9pbw0KICAgICAgICBmaWxlX3NwZWMgPSBsaXN0KHNldChkaXIoX2lvLlRleHRJT1dyYXBwZXIpKS51bmlvbihzZXQoZGlyKF9pby5CeXRlc0lPKSkpKQ0KDQogICAgaWYgbW9jayBpcyBOb25lOg0KICAgICAgICBtb2NrID0gTWFnaWNNb2NrKG5hbWU9J29wZW4nLCBzcGVjPW9wZW4pDQoNCiAgICBoYW5kbGUgPSBNYWdpY01vY2soc3BlYz1maWxlX3NwZWMpDQogICAgaGFuZGxlLndyaXRlLnJldHVybl92YWx1ZSA9IE5vbmUNCiAgICBoYW5kbGUuX19lbnRlcl9fLnJldHVybl92YWx1ZSA9IGhhbmRsZQ0KICAgIGhhbmRsZS5yZWFkLnJldHVybl92YWx1ZSA9IHJlYWRfZGF0YQ0KDQogICAgbW9jay5yZXR1cm5fdmFsdWUgPSBoYW5kbGUNCiAgICByZXR1cm4gbW9jaw0KDQoNCmNsYXNzIFByb3BlcnR5TW9jayhNb2NrKToNCiAgICAiIiINCiAgICBBIG1vY2sgaW50ZW5kZWQgdG8gYmUgdXNlZCBhcyBhIHByb3BlcnR5LCBvciBvdGhlciBkZXNjcmlwdG9yLCBvbiBhIGNsYXNzLg0KICAgIGBQcm9wZXJ0eU1vY2tgIHByb3ZpZGVzIGBfX2dldF9fYCBhbmQgYF9fc2V0X19gIG1ldGhvZHMgc28geW91IGNhbiBzcGVjaWZ5DQogICAgYSByZXR1cm4gdmFsdWUgd2hlbiBpdCBpcyBmZXRjaGVkLg0KDQogICAgRmV0Y2hpbmcgYSBgUHJvcGVydHlNb2NrYCBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCBjYWxscyB0aGUgbW9jaywgd2l0aA0KICAgIG5vIGFyZ3MuIFNldHRpbmcgaXQgY2FsbHMgdGhlIG1vY2sgd2l0aCB0aGUgdmFsdWUgYmVpbmcgc2V0Lg0KICAgICIiIg0KICAgIGRlZiBfZ2V0X2NoaWxkX21vY2soc2VsZiwgKiprd2FyZ3MpOg0KICAgICAgICByZXR1cm4gTWFnaWNNb2NrKCoqa3dhcmdzKQ0KDQogICAgZGVmIF9fZ2V0X18oc2VsZiwgb2JqLCBvYmpfdHlwZSk6DQogICAgICAgIHJldHVybiBzZWxmKCkNCiAgICBkZWYgX19zZXRfXyhzZWxmLCBvYmosIHZhbCk6DQogICAgICAgIHNlbGYodmFsKQ0K',
'/Lib/unittest/suite.py':'',
'/Lib/unittest/runner.py':'',
'/Lib/unittest/result.py':'',
'/Lib/unittest/__init__.py':'IiIiDQpQeXRob24gdW5pdCB0ZXN0aW5nIGZyYW1ld29yaywgYmFzZWQgb24gRXJpY2ggR2FtbWEncyBKVW5pdCBhbmQgS2VudCBCZWNrJ3MNClNtYWxsdGFsayB0ZXN0aW5nIGZyYW1ld29yay4NCg0KVGhpcyBtb2R1bGUgY29udGFpbnMgdGhlIGNvcmUgZnJhbWV3b3JrIGNsYXNzZXMgdGhhdCBmb3JtIHRoZSBiYXNpcyBvZg0Kc3BlY2lmaWMgdGVzdCBjYXNlcyBhbmQgc3VpdGVzIChUZXN0Q2FzZSwgVGVzdFN1aXRlIGV0Yy4pLCBhbmQgYWxzbyBhDQp0ZXh0LWJhc2VkIHV0aWxpdHkgY2xhc3MgZm9yIHJ1bm5pbmcgdGhlIHRlc3RzIGFuZCByZXBvcnRpbmcgdGhlIHJlc3VsdHMNCiAoVGV4dFRlc3RSdW5uZXIpLg0KDQpTaW1wbGUgdXNhZ2U6DQoNCiAgICBpbXBvcnQgdW5pdHRlc3QNCg0KICAgIGNsYXNzIEludGVnZXJBcml0aG1lbnRpY1Rlc3RDYXNlKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgZGVmIHRlc3RBZGQoc2VsZik6ICAjIyB0ZXN0IG1ldGhvZCBuYW1lcyBiZWdpbiAndGVzdConDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCgxICsgMiksIDMpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKDAgKyAxLCAxKQ0KICAgICAgICBkZWYgdGVzdE11bHRpcGx5KHNlbGYpOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoMCAqIDEwKSwgMCkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoKDUgKiA4KSwgNDApDQoNCiAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgICAgICB1bml0dGVzdC5tYWluKCkNCg0KRnVydGhlciBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGJ1bmRsZWQgZG9jdW1lbnRhdGlvbiwgYW5kIGZyb20NCg0KICBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdW5pdHRlc3QuaHRtbA0KDQpDb3B5cmlnaHQgKGMpIDE5OTktMjAwMyBTdGV2ZSBQdXJjZWxsDQpDb3B5cmlnaHQgKGMpIDIwMDMtMjAxMCBQeXRob24gU29mdHdhcmUgRm91bmRhdGlvbg0KVGhpcyBtb2R1bGUgaXMgZnJlZSBzb2Z0d2FyZSwgYW5kIHlvdSBtYXkgcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkNCml0IHVuZGVyIHRoZSBzYW1lIHRlcm1zIGFzIFB5dGhvbiBpdHNlbGYsIHNvIGxvbmcgYXMgdGhpcyBjb3B5cmlnaHQgbWVzc2FnZQ0KYW5kIGRpc2NsYWltZXIgYXJlIHJldGFpbmVkIGluIHRoZWlyIG9yaWdpbmFsIGZvcm0uDQoNCklOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIFRPIEFOWSBQQVJUWSBGT1IgRElSRUNULCBJTkRJUkVDVCwNClNQRUNJQUwsIElOQ0lERU5UQUwsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBBUklTSU5HIE9VVCBPRiBUSEUgVVNFIE9GDQpUSElTIENPREUsIEVWRU4gSUYgVEhFIEFVVEhPUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIDQpEQU1BR0UuDQoNClRIRSBBVVRIT1IgU1BFQ0lGSUNBTExZIERJU0NMQUlNUyBBTlkgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UDQpMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQQ0KUEFSVElDVUxBUiBQVVJQT1NFLiAgVEhFIENPREUgUFJPVklERUQgSEVSRVVOREVSIElTIE9OIEFOICJBUyBJUyIgQkFTSVMsDQpBTkQgVEhFUkUgSVMgTk8gT0JMSUdBVElPTiBXSEFUU09FVkVSIFRPIFBST1ZJREUgTUFJTlRFTkFOQ0UsDQpTVVBQT1JULCBVUERBVEVTLCBFTkhBTkNFTUVOVFMsIE9SIE1PRElGSUNBVElPTlMuDQoiIiINCg0KX19hbGxfXyA9IFsnVGVzdFJlc3VsdCcsICdUZXN0Q2FzZScsICdUZXN0U3VpdGUnLA0KICAgICAgICAgICAnVGV4dFRlc3RSdW5uZXInLCAnVGVzdExvYWRlcicsICdGdW5jdGlvblRlc3RDYXNlJywgJ21haW4nLA0KICAgICAgICAgICAnZGVmYXVsdFRlc3RMb2FkZXInLCAnU2tpcFRlc3QnLCAnc2tpcCcsICdza2lwSWYnLCAnc2tpcFVubGVzcycsDQogICAgICAgICAgICdleHBlY3RlZEZhaWx1cmUnLCAnVGV4dFRlc3RSZXN1bHQnLCAnaW5zdGFsbEhhbmRsZXInLA0KICAgICAgICAgICAncmVnaXN0ZXJSZXN1bHQnLCAncmVtb3ZlUmVzdWx0JywgJ3JlbW92ZUhhbmRsZXInXQ0KDQojIEV4cG9zZSBvYnNvbGV0ZSBmdW5jdGlvbnMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5DQpfX2FsbF9fLmV4dGVuZChbJ2dldFRlc3RDYXNlTmFtZXMnLCAnbWFrZVN1aXRlJywgJ2ZpbmRUZXN0Q2FzZXMnXSkNCg0KX191bml0dGVzdCA9IFRydWUNCg0KZnJvbSAucmVzdWx0IGltcG9ydCBUZXN0UmVzdWx0DQpmcm9tIC5jYXNlIGltcG9ydCAoVGVzdENhc2UsIEZ1bmN0aW9uVGVzdENhc2UsIFNraXBUZXN0LCBza2lwLCBza2lwSWYsDQogICAgICAgICAgICAgICAgICAgc2tpcFVubGVzcywgZXhwZWN0ZWRGYWlsdXJlKQ0KZnJvbSAuc3VpdGUgaW1wb3J0IEJhc2VUZXN0U3VpdGUsIFRlc3RTdWl0ZQ0KZnJvbSAubG9hZGVyIGltcG9ydCAoVGVzdExvYWRlciwgZGVmYXVsdFRlc3RMb2FkZXIsIG1ha2VTdWl0ZSwgZ2V0VGVzdENhc2VOYW1lcywNCiAgICAgICAgICAgICAgICAgICAgIGZpbmRUZXN0Q2FzZXMpDQpmcm9tIC5tYWluIGltcG9ydCBUZXN0UHJvZ3JhbSwgbWFpbg0KZnJvbSAucnVubmVyIGltcG9ydCBUZXh0VGVzdFJ1bm5lciwgVGV4dFRlc3RSZXN1bHQNCmZyb20gLnNpZ25hbHMgaW1wb3J0IGluc3RhbGxIYW5kbGVyLCByZWdpc3RlclJlc3VsdCwgcmVtb3ZlUmVzdWx0LCByZW1vdmVIYW5kbGVyDQoNCiMgZGVwcmVjYXRlZA0KX1RleHRUZXN0UmVzdWx0ID0gVGV4dFRlc3RSZXN1bHQNCg==',
'/Lib/unittest/__main__.py':'IiIiTWFpbiBlbnRyeSBwb2ludCIiIg0KDQppbXBvcnQgc3lzDQppZiBzeXMuYXJndlswXS5lbmRzd2l0aCgiX19tYWluX18ucHkiKToNCiAgICBzeXMuYXJndlswXSA9ICJweXRob24gLW0gdW5pdHRlc3QiDQoNCl9fdW5pdHRlc3QgPSBUcnVlDQoNCmZyb20gLm1haW4gaW1wb3J0IG1haW4sIFRlc3RQcm9ncmFtLCBVU0FHRV9BU19NQUlODQpUZXN0UHJvZ3JhbS5VU0FHRSA9IFVTQUdFX0FTX01BSU4NCg0KbWFpbihtb2R1bGU9Tm9uZSkNCg==',
'/Lib/unittest/util.py':'IiIiVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy4iIiINCg0KZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgbmFtZWR0dXBsZSwgT3JkZXJlZERpY3QNCg0KX191bml0dGVzdCA9IFRydWUNCg0KX01BWF9MRU5HVEggPSA4MA0KZGVmIHNhZmVfcmVwcihvYmosIHNob3J0PUZhbHNlKToNCiAgICB0cnk6DQogICAgICAgIHJlc3VsdCA9IHJlcHIob2JqKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb246DQogICAgICAgIHJlc3VsdCA9IG9iamVjdC5fX3JlcHJfXyhvYmopDQogICAgaWYgbm90IHNob3J0IG9yIGxlbihyZXN1bHQpIDwgX01BWF9MRU5HVEg6DQogICAgICAgIHJldHVybiByZXN1bHQNCiAgICByZXR1cm4gcmVzdWx0WzpfTUFYX0xFTkdUSF0gKyAnIFt0cnVuY2F0ZWRdLi4uJw0KDQpkZWYgc3RyY2xhc3MoY2xzKToNCiAgICByZXR1cm4gIiVzLiVzIiAlIChjbHMuX19tb2R1bGVfXywgY2xzLl9fbmFtZV9fKQ0KDQpkZWYgc29ydGVkX2xpc3RfZGlmZmVyZW5jZShleHBlY3RlZCwgYWN0dWFsKToNCiAgICAiIiJGaW5kcyBlbGVtZW50cyBpbiBvbmx5IG9uZSBvciB0aGUgb3RoZXIgb2YgdHdvLCBzb3J0ZWQgaW5wdXQgbGlzdHMuDQoNCiAgICBSZXR1cm5zIGEgdHdvLWVsZW1lbnQgdHVwbGUgb2YgbGlzdHMuICAgIFRoZSBmaXJzdCBsaXN0IGNvbnRhaW5zIHRob3NlDQogICAgZWxlbWVudHMgaW4gdGhlICJleHBlY3RlZCIgbGlzdCBidXQgbm90IGluIHRoZSAiYWN0dWFsIiBsaXN0LCBhbmQgdGhlDQogICAgc2Vjb25kIGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIGluIHRoZSAiYWN0dWFsIiBsaXN0IGJ1dCBub3QgaW4gdGhlDQogICAgImV4cGVjdGVkIiBsaXN0LiAgICBEdXBsaWNhdGUgZWxlbWVudHMgaW4gZWl0aGVyIGlucHV0IGxpc3QgYXJlIGlnbm9yZWQuDQogICAgIiIiDQogICAgaSA9IGogPSAwDQogICAgbWlzc2luZyA9IFtdDQogICAgdW5leHBlY3RlZCA9IFtdDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZSA9IGV4cGVjdGVkW2ldDQogICAgICAgICAgICBhID0gYWN0dWFsW2pdDQogICAgICAgICAgICBpZiBlIDwgYToNCiAgICAgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChlKQ0KICAgICAgICAgICAgICAgIGkgKz0gMQ0KICAgICAgICAgICAgICAgIHdoaWxlIGV4cGVjdGVkW2ldID09IGU6DQogICAgICAgICAgICAgICAgICAgIGkgKz0gMQ0KICAgICAgICAgICAgZWxpZiBlID4gYToNCiAgICAgICAgICAgICAgICB1bmV4cGVjdGVkLmFwcGVuZChhKQ0KICAgICAgICAgICAgICAgIGogKz0gMQ0KICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOg0KICAgICAgICAgICAgICAgICAgICBqICs9IDENCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgaSArPSAxDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICB3aGlsZSBleHBlY3RlZFtpXSA9PSBlOg0KICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxDQogICAgICAgICAgICAgICAgZmluYWxseToNCiAgICAgICAgICAgICAgICAgICAgaiArPSAxDQogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOg0KICAgICAgICAgICAgICAgICAgICAgICAgaiArPSAxDQogICAgICAgIGV4Y2VwdCBJbmRleEVycm9yOg0KICAgICAgICAgICAgbWlzc2luZy5leHRlbmQoZXhwZWN0ZWRbaTpdKQ0KICAgICAgICAgICAgdW5leHBlY3RlZC5leHRlbmQoYWN0dWFsW2o6XSkNCiAgICAgICAgICAgIGJyZWFrDQogICAgcmV0dXJuIG1pc3NpbmcsIHVuZXhwZWN0ZWQNCg0KDQpkZWYgdW5vcmRlcmFibGVfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOg0KICAgICIiIlNhbWUgYmVoYXZpb3IgYXMgc29ydGVkX2xpc3RfZGlmZmVyZW5jZSBidXQNCiAgICBmb3IgbGlzdHMgb2YgdW5vcmRlcmFibGUgaXRlbXMgKGxpa2UgZGljdHMpLg0KDQogICAgQXMgaXQgZG9lcyBhIGxpbmVhciBzZWFyY2ggcGVyIGl0ZW0gKHJlbW92ZSkgaXQNCiAgICBoYXMgTyhuKm4pIHBlcmZvcm1hbmNlLiIiIg0KICAgIG1pc3NpbmcgPSBbXQ0KICAgIHdoaWxlIGV4cGVjdGVkOg0KICAgICAgICBpdGVtID0gZXhwZWN0ZWQucG9wKCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgYWN0dWFsLnJlbW92ZShpdGVtKQ0KICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoNCiAgICAgICAgICAgIG1pc3NpbmcuYXBwZW5kKGl0ZW0pDQoNCiAgICAjIGFueXRoaW5nIGxlZnQgaW4gYWN0dWFsIGlzIHVuZXhwZWN0ZWQNCiAgICByZXR1cm4gbWlzc2luZywgYWN0dWFsDQoNCmRlZiB0aHJlZV93YXlfY21wKHgsIHkpOg0KICAgICIiIlJldHVybiAtMSBpZiB4IDwgeSwgMCBpZiB4ID09IHkgYW5kIDEgaWYgeCA+IHkiIiINCiAgICByZXR1cm4gKHggPiB5KSAtICh4IDwgeSkNCg0KX01pc21hdGNoID0gbmFtZWR0dXBsZSgnTWlzbWF0Y2gnLCAnYWN0dWFsIGV4cGVjdGVkIHZhbHVlJykNCg0KZGVmIF9jb3VudF9kaWZmX2FsbF9wdXJwb3NlKGFjdHVhbCwgZXhwZWN0ZWQpOg0KICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInDQogICAgIyBlbGVtZW50cyBuZWVkIG5vdCBiZSBoYXNoYWJsZQ0KICAgIHMsIHQgPSBsaXN0KGFjdHVhbCksIGxpc3QoZXhwZWN0ZWQpDQogICAgbSwgbiA9IGxlbihzKSwgbGVuKHQpDQogICAgTlVMTCA9IG9iamVjdCgpDQogICAgcmVzdWx0ID0gW10NCiAgICBmb3IgaSwgZWxlbSBpbiBlbnVtZXJhdGUocyk6DQogICAgICAgIGlmIGVsZW0gaXMgTlVMTDoNCiAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGNudF9zID0gY250X3QgPSAwDQogICAgICAgIGZvciBqIGluIHJhbmdlKGksIG0pOg0KICAgICAgICAgICAgaWYgc1tqXSA9PSBlbGVtOg0KICAgICAgICAgICAgICAgIGNudF9zICs9IDENCiAgICAgICAgICAgICAgICBzW2pdID0gTlVMTA0KICAgICAgICBmb3Igaiwgb3RoZXJfZWxlbSBpbiBlbnVtZXJhdGUodCk6DQogICAgICAgICAgICBpZiBvdGhlcl9lbGVtID09IGVsZW06DQogICAgICAgICAgICAgICAgY250X3QgKz0gMQ0KICAgICAgICAgICAgICAgIHRbal0gPSBOVUxMDQogICAgICAgIGlmIGNudF9zICE9IGNudF90Og0KICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaChjbnRfcywgY250X3QsIGVsZW0pDQogICAgICAgICAgICByZXN1bHQuYXBwZW5kKGRpZmYpDQoNCiAgICBmb3IgaSwgZWxlbSBpbiBlbnVtZXJhdGUodCk6DQogICAgICAgIGlmIGVsZW0gaXMgTlVMTDoNCiAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGNudF90ID0gMA0KICAgICAgICBmb3IgaiBpbiByYW5nZShpLCBuKToNCiAgICAgICAgICAgIGlmIHRbal0gPT0gZWxlbToNCiAgICAgICAgICAgICAgICBjbnRfdCArPSAxDQogICAgICAgICAgICAgICAgdFtqXSA9IE5VTEwNCiAgICAgICAgZGlmZiA9IF9NaXNtYXRjaCgwLCBjbnRfdCwgZWxlbSkNCiAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQ0KICAgIHJldHVybiByZXN1bHQNCg0KZGVmIF9vcmRlcmVkX2NvdW50KGl0ZXJhYmxlKToNCiAgICAnUmV0dXJuIGRpY3Qgb2YgZWxlbWVudCBjb3VudHMsIGluIHRoZSBvcmRlciB0aGV5IHdlcmUgZmlyc3Qgc2VlbicNCiAgICBjID0gT3JkZXJlZERpY3QoKQ0KICAgIGZvciBlbGVtIGluIGl0ZXJhYmxlOg0KICAgICAgICBjW2VsZW1dID0gYy5nZXQoZWxlbSwgMCkgKyAxDQogICAgcmV0dXJuIGMNCg0KZGVmIF9jb3VudF9kaWZmX2hhc2hhYmxlKGFjdHVhbCwgZXhwZWN0ZWQpOg0KICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInDQogICAgIyBlbGVtZW50cyBtdXN0IGJlIGhhc2hhYmxlDQogICAgcywgdCA9IF9vcmRlcmVkX2NvdW50KGFjdHVhbCksIF9vcmRlcmVkX2NvdW50KGV4cGVjdGVkKQ0KICAgIHJlc3VsdCA9IFtdDQogICAgZm9yIGVsZW0sIGNudF9zIGluIHMuaXRlbXMoKToNCiAgICAgICAgY250X3QgPSB0LmdldChlbGVtLCAwKQ0KICAgICAgICBpZiBjbnRfcyAhPSBjbnRfdDoNCiAgICAgICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goY250X3MsIGNudF90LCBlbGVtKQ0KICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQ0KICAgIGZvciBlbGVtLCBjbnRfdCBpbiB0Lml0ZW1zKCk6DQogICAgICAgIGlmIGVsZW0gbm90IGluIHM6DQogICAgICAgICAgICBkaWZmID0gX01pc21hdGNoKDAsIGNudF90LCBlbGVtKQ0KICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQ0KICAgIHJldHVybiByZXN1bHQNCg==',
'/Lib/unittest/loader.py':'',
'/Lib/unittest/signals.py':'aW1wb3J0IHNpZ25hbA0KaW1wb3J0IHdlYWtyZWYNCg0KZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzDQoNCl9fdW5pdHRlc3QgPSBUcnVlDQoNCg0KY2xhc3MgX0ludGVycnVwdEhhbmRsZXIob2JqZWN0KToNCiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVmYXVsdF9oYW5kbGVyKToNCiAgICAgICAgc2VsZi5jYWxsZWQgPSBGYWxzZQ0KICAgICAgICBzZWxmLmRlZmF1bHRfaGFuZGxlciA9IGRlZmF1bHRfaGFuZGxlcg0KDQogICAgZGVmIF9fY2FsbF9fKHNlbGYsIHNpZ251bSwgZnJhbWUpOg0KICAgICAgICBpbnN0YWxsZWRfaGFuZGxlciA9IHNpZ25hbC5nZXRzaWduYWwoc2lnbmFsLlNJR0lOVCkNCiAgICAgICAgaWYgaW5zdGFsbGVkX2hhbmRsZXIgaXMgbm90IHNlbGY6DQogICAgICAgICAgICAjIGlmIHdlIGFyZW4ndCB0aGUgaW5zdGFsbGVkIGhhbmRsZXIsIHRoZW4gZGVsZWdhdGUgaW1tZWRpYXRlbHkNCiAgICAgICAgICAgICMgdG8gdGhlIGRlZmF1bHQgaGFuZGxlcg0KICAgICAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIoc2lnbnVtLCBmcmFtZSkNCg0KICAgICAgICBpZiBzZWxmLmNhbGxlZDoNCiAgICAgICAgICAgIHNlbGYuZGVmYXVsdF9oYW5kbGVyKHNpZ251bSwgZnJhbWUpDQogICAgICAgIHNlbGYuY2FsbGVkID0gVHJ1ZQ0KICAgICAgICBmb3IgcmVzdWx0IGluIF9yZXN1bHRzLmtleXMoKToNCiAgICAgICAgICAgIHJlc3VsdC5zdG9wKCkNCg0KX3Jlc3VsdHMgPSB3ZWFrcmVmLldlYWtLZXlEaWN0aW9uYXJ5KCkNCmRlZiByZWdpc3RlclJlc3VsdChyZXN1bHQpOg0KICAgIF9yZXN1bHRzW3Jlc3VsdF0gPSAxDQoNCmRlZiByZW1vdmVSZXN1bHQocmVzdWx0KToNCiAgICByZXR1cm4gYm9vbChfcmVzdWx0cy5wb3AocmVzdWx0LCBOb25lKSkNCg0KX2ludGVycnVwdF9oYW5kbGVyID0gTm9uZQ0KZGVmIGluc3RhbGxIYW5kbGVyKCk6DQogICAgZ2xvYmFsIF9pbnRlcnJ1cHRfaGFuZGxlcg0KICAgIGlmIF9pbnRlcnJ1cHRfaGFuZGxlciBpcyBOb25lOg0KICAgICAgICBkZWZhdWx0X2hhbmRsZXIgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpDQogICAgICAgIF9pbnRlcnJ1cHRfaGFuZGxlciA9IF9JbnRlcnJ1cHRIYW5kbGVyKGRlZmF1bHRfaGFuZGxlcikNCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIpDQoNCg0KZGVmIHJlbW92ZUhhbmRsZXIobWV0aG9kPU5vbmUpOg0KICAgIGlmIG1ldGhvZCBpcyBub3QgTm9uZToNCiAgICAgICAgQHdyYXBzKG1ldGhvZCkNCiAgICAgICAgZGVmIGlubmVyKCphcmdzLCAqKmt3YXJncyk6DQogICAgICAgICAgICBpbml0aWFsID0gc2lnbmFsLmdldHNpZ25hbChzaWduYWwuU0lHSU5UKQ0KICAgICAgICAgICAgcmVtb3ZlSGFuZGxlcigpDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcmV0dXJuIG1ldGhvZCgqYXJncywgKiprd2FyZ3MpDQogICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW5pdGlhbCkNCiAgICAgICAgcmV0dXJuIGlubmVyDQoNCiAgICBnbG9iYWwgX2ludGVycnVwdF9oYW5kbGVyDQogICAgaWYgX2ludGVycnVwdF9oYW5kbGVyIGlzIG5vdCBOb25lOg0KICAgICAgICBzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdJTlQsIF9pbnRlcnJ1cHRfaGFuZGxlci5kZWZhdWx0X2hhbmRsZXIpDQo=',
'/Lib/unittest/case.py':'IiIiVGVzdCBjYXNlIGltcGxlbWVudGF0aW9uIiIiCgppbXBvcnQgc3lzCmltcG9ydCBmdW5jdG9vbHMKaW1wb3J0IGRpZmZsaWIKaW1wb3J0IHBwcmludAppbXBvcnQgcmUKaW1wb3J0IHdhcm5pbmdzCmltcG9ydCBjb2xsZWN0aW9ucwoKZnJvbSAuIGltcG9ydCByZXN1bHQKZnJvbSAudXRpbCBpbXBvcnQgKHN0cmNsYXNzLCBzYWZlX3JlcHIsIF9jb3VudF9kaWZmX2FsbF9wdXJwb3NlLAogICAgICAgICAgICAgICAgICAgX2NvdW50X2RpZmZfaGFzaGFibGUpCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCkRJRkZfT01JVFRFRCA9ICgnXG5EaWZmIGlzICVzIGNoYXJhY3RlcnMgbG9uZy4gJwogICAgICAgICAgICAgICAgICdTZXQgc2VsZi5tYXhEaWZmIHRvIE5vbmUgdG8gc2VlIGl0LicpCgpjbGFzcyBTa2lwVGVzdChFeGNlcHRpb24pOgogICAgIiIiCiAgICBSYWlzZSB0aGlzIGV4Y2VwdGlvbiBpbiBhIHRlc3QgdG8gc2tpcCBpdC4KCiAgICBVc3VhbGx5IHlvdSBjYW4gdXNlIFRlc3RSZXN1bHQuc2tpcCgpIG9yIG9uZSBvZiB0aGUgc2tpcHBpbmcgZGVjb3JhdG9ycwogICAgaW5zdGVhZCBvZiByYWlzaW5nIHRoaXMgZGlyZWN0bHkuCiAgICAiIiIKCmNsYXNzIF9FeHBlY3RlZEZhaWx1cmUoRXhjZXB0aW9uKToKICAgICIiIgogICAgUmFpc2UgdGhpcyB3aGVuIGEgdGVzdCBpcyBleHBlY3RlZCB0byBmYWlsLgoKICAgIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGV4Y19pbmZvKToKICAgICAgICBzdXBlcihfRXhwZWN0ZWRGYWlsdXJlLCBzZWxmKS5fX2luaXRfXygpCiAgICAgICAgc2VsZi5leGNfaW5mbyA9IGV4Y19pbmZvCgpjbGFzcyBfVW5leHBlY3RlZFN1Y2Nlc3MoRXhjZXB0aW9uKToKICAgICIiIgogICAgVGhlIHRlc3Qgd2FzIHN1cHBvc2VkIHRvIGZhaWwsIGJ1dCBpdCBkaWRuJ3QhCiAgICAiIiIKCgpjbGFzcyBfT3V0Y29tZShvYmplY3QpOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuc3VjY2VzcyA9IFRydWUKICAgICAgICBzZWxmLnNraXBwZWQgPSBOb25lCiAgICAgICAgc2VsZi51bmV4cGVjdGVkU3VjY2VzcyA9IE5vbmUKICAgICAgICBzZWxmLmV4cGVjdGVkRmFpbHVyZSA9IE5vbmUKICAgICAgICBzZWxmLmVycm9ycyA9IFtdCiAgICAgICAgc2VsZi5mYWlsdXJlcyA9IFtdCgoKZGVmIF9pZChvYmopOgogICAgcmV0dXJuIG9iagoKZGVmIHNraXAocmVhc29uKToKICAgICIiIgogICAgVW5jb25kaXRpb25hbGx5IHNraXAgYSB0ZXN0LgogICAgIiIiCiAgICBkZWYgZGVjb3JhdG9yKHRlc3RfaXRlbSk6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UodGVzdF9pdGVtLCB0eXBlKToKICAgICAgICAgICAgQGZ1bmN0b29scy53cmFwcyh0ZXN0X2l0ZW0pCiAgICAgICAgICAgIGRlZiBza2lwX3dyYXBwZXIoKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAgICAgICAgIHJhaXNlIFNraXBUZXN0KHJlYXNvbikKICAgICAgICAgICAgdGVzdF9pdGVtID0gc2tpcF93cmFwcGVyCgogICAgICAgIHRlc3RfaXRlbS5fX3VuaXR0ZXN0X3NraXBfXyA9IFRydWUKICAgICAgICB0ZXN0X2l0ZW0uX191bml0dGVzdF9za2lwX3doeV9fID0gcmVhc29uCiAgICAgICAgcmV0dXJuIHRlc3RfaXRlbQogICAgcmV0dXJuIGRlY29yYXRvcgoKZGVmIHNraXBJZihjb25kaXRpb24sIHJlYXNvbik6CiAgICAiIiIKICAgIFNraXAgYSB0ZXN0IGlmIHRoZSBjb25kaXRpb24gaXMgdHJ1ZS4KICAgICIiIgogICAgaWYgY29uZGl0aW9uOgogICAgICAgIHJldHVybiBza2lwKHJlYXNvbikKICAgIHJldHVybiBfaWQKCmRlZiBza2lwVW5sZXNzKGNvbmRpdGlvbiwgcmVhc29uKToKICAgICIiIgogICAgU2tpcCBhIHRlc3QgdW5sZXNzIHRoZSBjb25kaXRpb24gaXMgdHJ1ZS4KICAgICIiIgogICAgaWYgbm90IGNvbmRpdGlvbjoKICAgICAgICByZXR1cm4gc2tpcChyZWFzb24pCiAgICByZXR1cm4gX2lkCgoKZGVmIGV4cGVjdGVkRmFpbHVyZShmdW5jKToKICAgIEBmdW5jdG9vbHMud3JhcHMoZnVuYykKICAgIGRlZiB3cmFwcGVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBmdW5jKCphcmdzLCAqKmt3YXJncykKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICByYWlzZSBfRXhwZWN0ZWRGYWlsdXJlKHN5cy5leGNfaW5mbygpKQogICAgICAgIHJhaXNlIF9VbmV4cGVjdGVkU3VjY2VzcwogICAgcmV0dXJuIHdyYXBwZXIKCgpjbGFzcyBfQXNzZXJ0UmFpc2VzQmFzZUNvbnRleHQob2JqZWN0KToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgZXhwZWN0ZWQsIHRlc3RfY2FzZSwgY2FsbGFibGVfb2JqPU5vbmUsCiAgICAgICAgICAgICAgICAgZXhwZWN0ZWRfcmVnZXg9Tm9uZSk6CiAgICAgICAgc2VsZi5leHBlY3RlZCA9IGV4cGVjdGVkCiAgICAgICAgc2VsZi50ZXN0X2Nhc2UgPSB0ZXN0X2Nhc2UKICAgICAgICBpZiBjYWxsYWJsZV9vYmogaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYub2JqX25hbWUgPSBjYWxsYWJsZV9vYmouX19uYW1lX18KICAgICAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICAgICAgc2VsZi5vYmpfbmFtZSA9IHN0cihjYWxsYWJsZV9vYmopCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5vYmpfbmFtZSA9IE5vbmUKICAgICAgICBpZiBpc2luc3RhbmNlKGV4cGVjdGVkX3JlZ2V4LCAoYnl0ZXMsIHN0cikpOgogICAgICAgICAgICBleHBlY3RlZF9yZWdleCA9IHJlLmNvbXBpbGUoZXhwZWN0ZWRfcmVnZXgpCiAgICAgICAgc2VsZi5leHBlY3RlZF9yZWdleCA9IGV4cGVjdGVkX3JlZ2V4CiAgICAgICAgc2VsZi5tc2cgPSBOb25lCgogICAgZGVmIF9yYWlzZUZhaWx1cmUoc2VsZiwgc3RhbmRhcmRNc2cpOgogICAgICAgIG1zZyA9IHNlbGYudGVzdF9jYXNlLl9mb3JtYXRNZXNzYWdlKHNlbGYubXNnLCBzdGFuZGFyZE1zZykKICAgICAgICByYWlzZSBzZWxmLnRlc3RfY2FzZS5mYWlsdXJlRXhjZXB0aW9uKG1zZykKCiAgICBkZWYgaGFuZGxlKHNlbGYsIG5hbWUsIGNhbGxhYmxlX29iaiwgYXJncywga3dhcmdzKToKICAgICAgICAiIiIKICAgICAgICBJZiBjYWxsYWJsZV9vYmogaXMgTm9uZSwgYXNzZXJ0UmFpc2VzL1dhcm5zIGlzIGJlaW5nIHVzZWQgYXMgYQogICAgICAgIGNvbnRleHQgbWFuYWdlciwgc28gY2hlY2sgZm9yIGEgJ21zZycga3dhcmcgYW5kIHJldHVybiBzZWxmLgogICAgICAgIElmIGNhbGxhYmxlX29iaiBpcyBub3QgTm9uZSwgY2FsbCBpdCBwYXNzaW5nIGFyZ3MgYW5kIGt3YXJncy4KICAgICAgICAiIiIKICAgICAgICBpZiBjYWxsYWJsZV9vYmogaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5tc2cgPSBrd2FyZ3MucG9wKCdtc2cnLCBOb25lKQogICAgICAgICAgICByZXR1cm4gc2VsZgogICAgICAgIHdpdGggc2VsZjoKICAgICAgICAgICAgY2FsbGFibGVfb2JqKCphcmdzLCAqKmt3YXJncykKCgoKY2xhc3MgX0Fzc2VydFJhaXNlc0NvbnRleHQoX0Fzc2VydFJhaXNlc0Jhc2VDb250ZXh0KToKICAgICIiIkEgY29udGV4dCBtYW5hZ2VyIHVzZWQgdG8gaW1wbGVtZW50IFRlc3RDYXNlLmFzc2VydFJhaXNlcyogbWV0aG9kcy4iIiIKCiAgICBkZWYgX19lbnRlcl9fKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXhpdF9fKHNlbGYsIGV4Y190eXBlLCBleGNfdmFsdWUsIHRiKToKICAgICAgICBpZiBleGNfdHlwZSBpcyBOb25lOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBleGNfbmFtZSA9IHNlbGYuZXhwZWN0ZWQuX19uYW1lX18KICAgICAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICAgICAgZXhjX25hbWUgPSBzdHIoc2VsZi5leHBlY3RlZCkKICAgICAgICAgICAgaWYgc2VsZi5vYmpfbmFtZToKICAgICAgICAgICAgICAgIHNlbGYuX3JhaXNlRmFpbHVyZSgie30gbm90IHJhaXNlZCBieSB7fSIuZm9ybWF0KGV4Y19uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vYmpfbmFtZSkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzZWxmLl9yYWlzZUZhaWx1cmUoInt9IG5vdCByYWlzZWQiLmZvcm1hdChleGNfbmFtZSkpCiAgICAgICAgaWYgbm90IGlzc3ViY2xhc3MoZXhjX3R5cGUsIHNlbGYuZXhwZWN0ZWQpOgogICAgICAgICAgICAjIGxldCB1bmV4cGVjdGVkIGV4Y2VwdGlvbnMgcGFzcyB0aHJvdWdoCiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgICMgc3RvcmUgZXhjZXB0aW9uLCB3aXRob3V0IHRyYWNlYmFjaywgZm9yIGxhdGVyIHJldHJpZXZhbAogICAgICAgIHNlbGYuZXhjZXB0aW9uID0gZXhjX3ZhbHVlLndpdGhfdHJhY2ViYWNrKE5vbmUpCiAgICAgICAgaWYgc2VsZi5leHBlY3RlZF9yZWdleCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICBleHBlY3RlZF9yZWdleCA9IHNlbGYuZXhwZWN0ZWRfcmVnZXgKICAgICAgICBpZiBub3QgZXhwZWN0ZWRfcmVnZXguc2VhcmNoKHN0cihleGNfdmFsdWUpKToKICAgICAgICAgICAgc2VsZi5fcmFpc2VGYWlsdXJlKCcie30iIGRvZXMgbm90IG1hdGNoICJ7fSInLmZvcm1hdCgKICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWRfcmVnZXgucGF0dGVybiwgc3RyKGV4Y192YWx1ZSkpKQogICAgICAgIHJldHVybiBUcnVlCgoKY2xhc3MgX0Fzc2VydFdhcm5zQ29udGV4dChfQXNzZXJ0UmFpc2VzQmFzZUNvbnRleHQpOgogICAgIiIiQSBjb250ZXh0IG1hbmFnZXIgdXNlZCB0byBpbXBsZW1lbnQgVGVzdENhc2UuYXNzZXJ0V2FybnMqIG1ldGhvZHMuIiIiCgogICAgZGVmIF9fZW50ZXJfXyhzZWxmKToKICAgICAgICAjIFRoZSBfX3dhcm5pbmdyZWdpc3RyeV9fJ3MgbmVlZCB0byBiZSBpbiBhIHByaXN0aW5lIHN0YXRlIGZvciB0ZXN0cwogICAgICAgICMgdG8gd29yayBwcm9wZXJseS4KICAgICAgICBmb3IgdiBpbiBzeXMubW9kdWxlcy52YWx1ZXMoKToKICAgICAgICAgICAgaWYgZ2V0YXR0cih2LCAnX193YXJuaW5ncmVnaXN0cnlfXycsIE5vbmUpOgogICAgICAgICAgICAgICAgdi5fX3dhcm5pbmdyZWdpc3RyeV9fID0ge30KICAgICAgICBzZWxmLndhcm5pbmdzX21hbmFnZXIgPSB3YXJuaW5ncy5jYXRjaF93YXJuaW5ncyhyZWNvcmQ9VHJ1ZSkKICAgICAgICBzZWxmLndhcm5pbmdzID0gc2VsZi53YXJuaW5nc19tYW5hZ2VyLl9fZW50ZXJfXygpCiAgICAgICAgd2FybmluZ3Muc2ltcGxlZmlsdGVyKCJhbHdheXMiLCBzZWxmLmV4cGVjdGVkKQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXhpdF9fKHNlbGYsIGV4Y190eXBlLCBleGNfdmFsdWUsIHRiKToKICAgICAgICBzZWxmLndhcm5pbmdzX21hbmFnZXIuX19leGl0X18oZXhjX3R5cGUsIGV4Y192YWx1ZSwgdGIpCiAgICAgICAgaWYgZXhjX3R5cGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICMgbGV0IHVuZXhwZWN0ZWQgZXhjZXB0aW9ucyBwYXNzIHRocm91Z2gKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgdHJ5OgogICAgICAgICAgICBleGNfbmFtZSA9IHNlbGYuZXhwZWN0ZWQuX19uYW1lX18KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIGV4Y19uYW1lID0gc3RyKHNlbGYuZXhwZWN0ZWQpCiAgICAgICAgZmlyc3RfbWF0Y2hpbmcgPSBOb25lCiAgICAgICAgZm9yIG0gaW4gc2VsZi53YXJuaW5nczoKICAgICAgICAgICAgdyA9IG0ubWVzc2FnZQogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZSh3LCBzZWxmLmV4cGVjdGVkKToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIGZpcnN0X21hdGNoaW5nIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBmaXJzdF9tYXRjaGluZyA9IHcKICAgICAgICAgICAgaWYgKHNlbGYuZXhwZWN0ZWRfcmVnZXggaXMgbm90IE5vbmUgYW5kCiAgICAgICAgICAgICAgICBub3Qgc2VsZi5leHBlY3RlZF9yZWdleC5zZWFyY2goc3RyKHcpKSk6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAjIHN0b3JlIHdhcm5pbmcgZm9yIGxhdGVyIHJldHJpZXZhbAogICAgICAgICAgICBzZWxmLndhcm5pbmcgPSB3CiAgICAgICAgICAgIHNlbGYuZmlsZW5hbWUgPSBtLmZpbGVuYW1lCiAgICAgICAgICAgIHNlbGYubGluZW5vID0gbS5saW5lbm8KICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgIyBOb3cgd2Ugc2ltcGx5IHRyeSB0byBjaG9vc2UgYSBoZWxwZnVsIGZhaWx1cmUgbWVzc2FnZQogICAgICAgIGlmIGZpcnN0X21hdGNoaW5nIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLl9yYWlzZUZhaWx1cmUoJyJ7fSIgZG9lcyBub3QgbWF0Y2ggInt9IicuZm9ybWF0KAogICAgICAgICAgICAgICAgICAgICBzZWxmLmV4cGVjdGVkX3JlZ2V4LnBhdHRlcm4sIHN0cihmaXJzdF9tYXRjaGluZykpKQogICAgICAgIGlmIHNlbGYub2JqX25hbWU6CiAgICAgICAgICAgIHNlbGYuX3JhaXNlRmFpbHVyZSgie30gbm90IHRyaWdnZXJlZCBieSB7fSIuZm9ybWF0KGV4Y19uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9ial9uYW1lKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLl9yYWlzZUZhaWx1cmUoInt9IG5vdCB0cmlnZ2VyZWQiLmZvcm1hdChleGNfbmFtZSkpCgoKY2xhc3MgVGVzdENhc2Uob2JqZWN0KToKICAgICIiIkEgY2xhc3Mgd2hvc2UgaW5zdGFuY2VzIGFyZSBzaW5nbGUgdGVzdCBjYXNlcy4KCiAgICBCeSBkZWZhdWx0LCB0aGUgdGVzdCBjb2RlIGl0c2VsZiBzaG91bGQgYmUgcGxhY2VkIGluIGEgbWV0aG9kIG5hbWVkCiAgICAncnVuVGVzdCcuCgogICAgSWYgdGhlIGZpeHR1cmUgbWF5IGJlIHVzZWQgZm9yIG1hbnkgdGVzdCBjYXNlcywgY3JlYXRlIGFzCiAgICBtYW55IHRlc3QgbWV0aG9kcyBhcyBhcmUgbmVlZGVkLiBXaGVuIGluc3RhbnRpYXRpbmcgc3VjaCBhIFRlc3RDYXNlCiAgICBzdWJjbGFzcywgc3BlY2lmeSBpbiB0aGUgY29uc3RydWN0b3IgYXJndW1lbnRzIHRoZSBuYW1lIG9mIHRoZSB0ZXN0IG1ldGhvZAogICAgdGhhdCB0aGUgaW5zdGFuY2UgaXMgdG8gZXhlY3V0ZS4KCiAgICBUZXN0IGF1dGhvcnMgc2hvdWxkIHN1YmNsYXNzIFRlc3RDYXNlIGZvciB0aGVpciBvd24gdGVzdHMuIENvbnN0cnVjdGlvbgogICAgYW5kIGRlY29uc3RydWN0aW9uIG9mIHRoZSB0ZXN0J3MgZW52aXJvbm1lbnQgKCdmaXh0dXJlJykgY2FuIGJlCiAgICBpbXBsZW1lbnRlZCBieSBvdmVycmlkaW5nIHRoZSAnc2V0VXAnIGFuZCAndGVhckRvd24nIG1ldGhvZHMgcmVzcGVjdGl2ZWx5LgoKICAgIElmIGl0IGlzIG5lY2Vzc2FyeSB0byBvdmVycmlkZSB0aGUgX19pbml0X18gbWV0aG9kLCB0aGUgYmFzZSBjbGFzcwogICAgX19pbml0X18gbWV0aG9kIG11c3QgYWx3YXlzIGJlIGNhbGxlZC4gSXQgaXMgaW1wb3J0YW50IHRoYXQgc3ViY2xhc3NlcwogICAgc2hvdWxkIG5vdCBjaGFuZ2UgdGhlIHNpZ25hdHVyZSBvZiB0aGVpciBfX2luaXRfXyBtZXRob2QsIHNpbmNlIGluc3RhbmNlcwogICAgb2YgdGhlIGNsYXNzZXMgYXJlIGluc3RhbnRpYXRlZCBhdXRvbWF0aWNhbGx5IGJ5IHBhcnRzIG9mIHRoZSBmcmFtZXdvcmsKICAgIGluIG9yZGVyIHRvIGJlIHJ1bi4KICAgICIiIgoKICAgICMgVGhpcyBhdHRyaWJ1dGUgZGV0ZXJtaW5lcyB3aGljaCBleGNlcHRpb24gd2lsbCBiZSByYWlzZWQgd2hlbgogICAgIyB0aGUgaW5zdGFuY2UncyBhc3NlcnRpb24gbWV0aG9kcyBmYWlsOyB0ZXN0IG1ldGhvZHMgcmFpc2luZyB0aGlzCiAgICAjIGV4Y2VwdGlvbiB3aWxsIGJlIGRlZW1lZCB0byBoYXZlICdmYWlsZWQnIHJhdGhlciB0aGFuICdlcnJvcmVkJwoKICAgIGZhaWx1cmVFeGNlcHRpb24gPSBBc3NlcnRpb25FcnJvcgoKICAgICMgVGhpcyBhdHRyaWJ1dGUgZGV0ZXJtaW5lcyB3aGV0aGVyIGxvbmcgbWVzc2FnZXMgKGluY2x1ZGluZyByZXByIG9mCiAgICAjIG9iamVjdHMgdXNlZCBpbiBhc3NlcnQgbWV0aG9kcykgd2lsbCBiZSBwcmludGVkIG9uIGZhaWx1cmUgaW4gKmFkZGl0aW9uKgogICAgIyB0byBhbnkgZXhwbGljaXQgbWVzc2FnZSBwYXNzZWQuCgogICAgbG9uZ01lc3NhZ2UgPSBUcnVlCgogICAgIyBUaGlzIGF0dHJpYnV0ZSBzZXRzIHRoZSBtYXhpbXVtIGxlbmd0aCBvZiBhIGRpZmYgaW4gZmFpbHVyZSBtZXNzYWdlcwogICAgIyBieSBhc3NlcnQgbWV0aG9kcyB1c2luZyBkaWZmbGliLiBJdCBpcyBsb29rZWQgdXAgYXMgYW4gaW5zdGFuY2UgYXR0cmlidXRlCiAgICAjIHNvIGNhbiBiZSBjb25maWd1cmVkIGJ5IGluZGl2aWR1YWwgdGVzdHMgaWYgcmVxdWlyZWQuCgogICAgbWF4RGlmZiA9IDgwKjgKCiAgICAjIElmIGEgc3RyaW5nIGlzIGxvbmdlciB0aGFuIF9kaWZmVGhyZXNob2xkLCB1c2Ugbm9ybWFsIGNvbXBhcmlzb24gaW5zdGVhZAogICAgIyBvZiBkaWZmbGliLiAgU2VlICMxMTc2My4KICAgIF9kaWZmVGhyZXNob2xkID0gMioqMTYKCiAgICAjIEF0dHJpYnV0ZSB1c2VkIGJ5IFRlc3RTdWl0ZSBmb3IgY2xhc3NTZXRVcAoKICAgIF9jbGFzc1NldHVwRmFpbGVkID0gRmFsc2UKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbWV0aG9kTmFtZT0ncnVuVGVzdCcpOgogICAgICAgICIiIkNyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgY2xhc3MgdGhhdCB3aWxsIHVzZSB0aGUgbmFtZWQgdGVzdAogICAgICAgICAgIG1ldGhvZCB3aGVuIGV4ZWN1dGVkLiBSYWlzZXMgYSBWYWx1ZUVycm9yIGlmIHRoZSBpbnN0YW5jZSBkb2VzCiAgICAgICAgICAgbm90IGhhdmUgYSBtZXRob2Qgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5fdGVzdE1ldGhvZE5hbWUgPSBtZXRob2ROYW1lCiAgICAgICAgc2VsZi5fb3V0Y29tZUZvckRvQ2xlYW51cHMgPSBOb25lCiAgICAgICAgc2VsZi5fdGVzdE1ldGhvZERvYyA9ICdObyB0ZXN0JwogICAgICAgIHRyeToKICAgICAgICAgICAgdGVzdE1ldGhvZCA9IGdldGF0dHIoc2VsZiwgbWV0aG9kTmFtZSkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIGlmIG1ldGhvZE5hbWUgIT0gJ3J1blRlc3QnOgogICAgICAgICAgICAgICAgIyB3ZSBhbGxvdyBpbnN0YW50aWF0aW9uIHdpdGggbm8gZXhwbGljaXQgbWV0aG9kIG5hbWUKICAgICAgICAgICAgICAgICMgYnV0IG5vdCBhbiAqaW5jb3JyZWN0KiBvciBtaXNzaW5nIG1ldGhvZCBuYW1lCiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJubyBzdWNoIHRlc3QgbWV0aG9kIGluICVzOiAlcyIgJQogICAgICAgICAgICAgICAgICAgICAgKHNlbGYuX19jbGFzc19fLCBtZXRob2ROYW1lKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLl90ZXN0TWV0aG9kRG9jID0gdGVzdE1ldGhvZC5fX2RvY19fCiAgICAgICAgc2VsZi5fY2xlYW51cHMgPSBbXQoKICAgICAgICAjIE1hcCB0eXBlcyB0byBjdXN0b20gYXNzZXJ0RXF1YWwgZnVuY3Rpb25zIHRoYXQgd2lsbCBjb21wYXJlCiAgICAgICAgIyBpbnN0YW5jZXMgb2Ygc2FpZCB0eXBlIGluIG1vcmUgZGV0YWlsIHRvIGdlbmVyYXRlIGEgbW9yZSB1c2VmdWwKICAgICAgICAjIGVycm9yIG1lc3NhZ2UuCiAgICAgICAgc2VsZi5fdHlwZV9lcXVhbGl0eV9mdW5jcyA9IHt9CiAgICAgICAgc2VsZi5hZGRUeXBlRXF1YWxpdHlGdW5jKGRpY3QsICdhc3NlcnREaWN0RXF1YWwnKQogICAgICAgIHNlbGYuYWRkVHlwZUVxdWFsaXR5RnVuYyhsaXN0LCAnYXNzZXJ0TGlzdEVxdWFsJykKICAgICAgICBzZWxmLmFkZFR5cGVFcXVhbGl0eUZ1bmModHVwbGUsICdhc3NlcnRUdXBsZUVxdWFsJykKICAgICAgICBzZWxmLmFkZFR5cGVFcXVhbGl0eUZ1bmMoc2V0LCAnYXNzZXJ0U2V0RXF1YWwnKQogICAgICAgIHNlbGYuYWRkVHlwZUVxdWFsaXR5RnVuYyhmcm96ZW5zZXQsICdhc3NlcnRTZXRFcXVhbCcpCiAgICAgICAgc2VsZi5hZGRUeXBlRXF1YWxpdHlGdW5jKHN0ciwgJ2Fzc2VydE11bHRpTGluZUVxdWFsJykKCiAgICBkZWYgYWRkVHlwZUVxdWFsaXR5RnVuYyhzZWxmLCB0eXBlb2JqLCBmdW5jdGlvbik6CiAgICAgICAgIiIiQWRkIGEgdHlwZSBzcGVjaWZpYyBhc3NlcnRFcXVhbCBzdHlsZSBmdW5jdGlvbiB0byBjb21wYXJlIGEgdHlwZS4KCiAgICAgICAgVGhpcyBtZXRob2QgaXMgZm9yIHVzZSBieSBUZXN0Q2FzZSBzdWJjbGFzc2VzIHRoYXQgbmVlZCB0byByZWdpc3RlcgogICAgICAgIHRoZWlyIG93biB0eXBlIGVxdWFsaXR5IGZ1bmN0aW9ucyB0byBwcm92aWRlIG5pY2VyIGVycm9yIG1lc3NhZ2VzLgoKICAgICAgICBBcmdzOgogICAgICAgICAgICB0eXBlb2JqOiBUaGUgZGF0YSB0eXBlIHRvIGNhbGwgdGhpcyBmdW5jdGlvbiBvbiB3aGVuIGJvdGggdmFsdWVzCiAgICAgICAgICAgICAgICAgICAgYXJlIG9mIHRoZSBzYW1lIHR5cGUgaW4gYXNzZXJ0RXF1YWwoKS4KICAgICAgICAgICAgZnVuY3Rpb246IFRoZSBjYWxsYWJsZSB0YWtpbmcgdHdvIGFyZ3VtZW50cyBhbmQgYW4gb3B0aW9uYWwKICAgICAgICAgICAgICAgICAgICBtc2c9IGFyZ3VtZW50IHRoYXQgcmFpc2VzIHNlbGYuZmFpbHVyZUV4Y2VwdGlvbiB3aXRoIGEKICAgICAgICAgICAgICAgICAgICB1c2VmdWwgZXJyb3IgbWVzc2FnZSB3aGVuIHRoZSB0d28gYXJndW1lbnRzIGFyZSBub3QgZXF1YWwuCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5fdHlwZV9lcXVhbGl0eV9mdW5jc1t0eXBlb2JqXSA9IGZ1bmN0aW9uCgogICAgZGVmIGFkZENsZWFudXAoc2VsZiwgZnVuY3Rpb24sICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIiIiQWRkIGEgZnVuY3Rpb24sIHdpdGggYXJndW1lbnRzLCB0byBiZSBjYWxsZWQgd2hlbiB0aGUgdGVzdCBpcwogICAgICAgIGNvbXBsZXRlZC4gRnVuY3Rpb25zIGFkZGVkIGFyZSBjYWxsZWQgb24gYSBMSUZPIGJhc2lzIGFuZCBhcmUKICAgICAgICBjYWxsZWQgYWZ0ZXIgdGVhckRvd24gb24gdGVzdCBmYWlsdXJlIG9yIHN1Y2Nlc3MuCgogICAgICAgIENsZWFudXAgaXRlbXMgYXJlIGNhbGxlZCBldmVuIGlmIHNldFVwIGZhaWxzICh1bmxpa2UgdGVhckRvd24pLiIiIgogICAgICAgIHNlbGYuX2NsZWFudXBzLmFwcGVuZCgoZnVuY3Rpb24sIGFyZ3MsIGt3YXJncykpCgogICAgZGVmIHNldFVwKHNlbGYpOgogICAgICAgICJIb29rIG1ldGhvZCBmb3Igc2V0dGluZyB1cCB0aGUgdGVzdCBmaXh0dXJlIGJlZm9yZSBleGVyY2lzaW5nIGl0LiIKICAgICAgICBwYXNzCgogICAgZGVmIHRlYXJEb3duKHNlbGYpOgogICAgICAgICJIb29rIG1ldGhvZCBmb3IgZGVjb25zdHJ1Y3RpbmcgdGhlIHRlc3QgZml4dHVyZSBhZnRlciB0ZXN0aW5nIGl0LiIKICAgICAgICBwYXNzCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgc2V0VXBDbGFzcyhjbHMpOgogICAgICAgICJIb29rIG1ldGhvZCBmb3Igc2V0dGluZyB1cCBjbGFzcyBmaXh0dXJlIGJlZm9yZSBydW5uaW5nIHRlc3RzIGluIHRoZSBjbGFzcy4iCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgdGVhckRvd25DbGFzcyhjbHMpOgogICAgICAgICJIb29rIG1ldGhvZCBmb3IgZGVjb25zdHJ1Y3RpbmcgdGhlIGNsYXNzIGZpeHR1cmUgYWZ0ZXIgcnVubmluZyBhbGwgdGVzdHMgaW4gdGhlIGNsYXNzLiIKCiAgICBkZWYgY291bnRUZXN0Q2FzZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIDEKCiAgICBkZWYgZGVmYXVsdFRlc3RSZXN1bHQoc2VsZik6CiAgICAgICAgcmV0dXJuIHJlc3VsdC5UZXN0UmVzdWx0KCkKCiAgICBkZWYgc2hvcnREZXNjcmlwdGlvbihzZWxmKToKICAgICAgICAiIiJSZXR1cm5zIGEgb25lLWxpbmUgZGVzY3JpcHRpb24gb2YgdGhlIHRlc3QsIG9yIE5vbmUgaWYgbm8KICAgICAgICBkZXNjcmlwdGlvbiBoYXMgYmVlbiBwcm92aWRlZC4KCiAgICAgICAgVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgbGluZSBvZgogICAgICAgIHRoZSBzcGVjaWZpZWQgdGVzdCBtZXRob2QncyBkb2NzdHJpbmcuCiAgICAgICAgIiIiCiAgICAgICAgZG9jID0gc2VsZi5fdGVzdE1ldGhvZERvYwogICAgICAgIHJldHVybiBkb2MgYW5kIGRvYy5zcGxpdCgiXG4iKVswXS5zdHJpcCgpIG9yIE5vbmUKCgogICAgZGVmIGlkKHNlbGYpOgogICAgICAgIHJldHVybiAiJXMuJXMiICUgKHN0cmNsYXNzKHNlbGYuX19jbGFzc19fKSwgc2VsZi5fdGVzdE1ldGhvZE5hbWUpCgogICAgZGVmIF9fZXFfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgdHlwZShzZWxmKSBpcyBub3QgdHlwZShvdGhlcik6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKICAgICAgICByZXR1cm4gc2VsZi5fdGVzdE1ldGhvZE5hbWUgPT0gb3RoZXIuX3Rlc3RNZXRob2ROYW1lCgogICAgZGVmIF9faGFzaF9fKHNlbGYpOgogICAgICAgIHJldHVybiBoYXNoKCh0eXBlKHNlbGYpLCBzZWxmLl90ZXN0TWV0aG9kTmFtZSkpCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuICIlcyAoJXMpIiAlIChzZWxmLl90ZXN0TWV0aG9kTmFtZSwgc3RyY2xhc3Moc2VsZi5fX2NsYXNzX18pKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gIjwlcyB0ZXN0TWV0aG9kPSVzPiIgJSBcCiAgICAgICAgICAgICAgIChzdHJjbGFzcyhzZWxmLl9fY2xhc3NfXyksIHNlbGYuX3Rlc3RNZXRob2ROYW1lKQoKICAgIGRlZiBfYWRkU2tpcChzZWxmLCByZXN1bHQsIHJlYXNvbik6CiAgICAgICAgYWRkU2tpcCA9IGdldGF0dHIocmVzdWx0LCAnYWRkU2tpcCcsIE5vbmUpCiAgICAgICAgaWYgYWRkU2tpcCBpcyBub3QgTm9uZToKICAgICAgICAgICAgYWRkU2tpcChzZWxmLCByZWFzb24pCiAgICAgICAgZWxzZToKICAgICAgICAgICAgd2FybmluZ3Mud2FybigiVGVzdFJlc3VsdCBoYXMgbm8gYWRkU2tpcCBtZXRob2QsIHNraXBzIG5vdCByZXBvcnRlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgUnVudGltZVdhcm5pbmcsIDIpCiAgICAgICAgICAgIHJlc3VsdC5hZGRTdWNjZXNzKHNlbGYpCgogICAgZGVmIF9leGVjdXRlVGVzdFBhcnQoc2VsZiwgZnVuY3Rpb24sIG91dGNvbWUsIGlzVGVzdD1GYWxzZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBmdW5jdGlvbigpCiAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgICAgICByYWlzZQogICAgICAgIGV4Y2VwdCBTa2lwVGVzdCBhcyBlOgogICAgICAgICAgICBvdXRjb21lLnN1Y2Nlc3MgPSBGYWxzZQogICAgICAgICAgICBvdXRjb21lLnNraXBwZWQgPSBzdHIoZSkKICAgICAgICBleGNlcHQgX1VuZXhwZWN0ZWRTdWNjZXNzOgogICAgICAgICAgICBleGNfaW5mbyA9IHN5cy5leGNfaW5mbygpCiAgICAgICAgICAgIG91dGNvbWUuc3VjY2VzcyA9IEZhbHNlCiAgICAgICAgICAgIGlmIGlzVGVzdDoKICAgICAgICAgICAgICAgIG91dGNvbWUudW5leHBlY3RlZFN1Y2Nlc3MgPSBleGNfaW5mbwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb3V0Y29tZS5lcnJvcnMuYXBwZW5kKGV4Y19pbmZvKQogICAgICAgIGV4Y2VwdCBfRXhwZWN0ZWRGYWlsdXJlOgogICAgICAgICAgICBvdXRjb21lLnN1Y2Nlc3MgPSBGYWxzZQogICAgICAgICAgICBleGNfaW5mbyA9IHN5cy5leGNfaW5mbygpCiAgICAgICAgICAgIGlmIGlzVGVzdDoKICAgICAgICAgICAgICAgIG91dGNvbWUuZXhwZWN0ZWRGYWlsdXJlID0gZXhjX2luZm8KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG91dGNvbWUuZXJyb3JzLmFwcGVuZChleGNfaW5mbykKICAgICAgICBleGNlcHQgc2VsZi5mYWlsdXJlRXhjZXB0aW9uOgogICAgICAgICAgICBvdXRjb21lLnN1Y2Nlc3MgPSBGYWxzZQogICAgICAgICAgICBvdXRjb21lLmZhaWx1cmVzLmFwcGVuZChzeXMuZXhjX2luZm8oKSkKICAgICAgICAgICAgZXhjX2luZm8gPSBzeXMuZXhjX2luZm8oKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgb3V0Y29tZS5zdWNjZXNzID0gRmFsc2UKICAgICAgICAgICAgb3V0Y29tZS5lcnJvcnMuYXBwZW5kKHN5cy5leGNfaW5mbygpKQoKICAgIGRlZiBydW4oc2VsZiwgcmVzdWx0PU5vbmUpOgogICAgICAgIG9yaWdfcmVzdWx0ID0gcmVzdWx0CiAgICAgICAgaWYgcmVzdWx0IGlzIE5vbmU6CiAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYuZGVmYXVsdFRlc3RSZXN1bHQoKQogICAgICAgICAgICBzdGFydFRlc3RSdW4gPSBnZXRhdHRyKHJlc3VsdCwgJ3N0YXJ0VGVzdFJ1bicsIE5vbmUpCiAgICAgICAgICAgIGlmIHN0YXJ0VGVzdFJ1biBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHN0YXJ0VGVzdFJ1bigpCgogICAgICAgIHJlc3VsdC5zdGFydFRlc3Qoc2VsZikKCiAgICAgICAgdGVzdE1ldGhvZCA9IGdldGF0dHIoc2VsZiwgc2VsZi5fdGVzdE1ldGhvZE5hbWUpCiAgICAgICAgaWYgKGdldGF0dHIoc2VsZi5fX2NsYXNzX18sICJfX3VuaXR0ZXN0X3NraXBfXyIsIEZhbHNlKSBvcgogICAgICAgICAgICBnZXRhdHRyKHRlc3RNZXRob2QsICJfX3VuaXR0ZXN0X3NraXBfXyIsIEZhbHNlKSk6CiAgICAgICAgICAgICMgSWYgdGhlIGNsYXNzIG9yIG1ldGhvZCB3YXMgc2tpcHBlZC4KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2tpcF93aHkgPSAoZ2V0YXR0cihzZWxmLl9fY2xhc3NfXywgJ19fdW5pdHRlc3Rfc2tpcF93aHlfXycsICcnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgZ2V0YXR0cih0ZXN0TWV0aG9kLCAnX191bml0dGVzdF9za2lwX3doeV9fJywgJycpKQogICAgICAgICAgICAgICAgc2VsZi5fYWRkU2tpcChyZXN1bHQsIHNraXBfd2h5KQogICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgcmVzdWx0LnN0b3BUZXN0KHNlbGYpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIHRyeToKICAgICAgICAgICAgb3V0Y29tZSA9IF9PdXRjb21lKCkKICAgICAgICAgICAgc2VsZi5fb3V0Y29tZUZvckRvQ2xlYW51cHMgPSBvdXRjb21lCgogICAgICAgICAgICBzZWxmLl9leGVjdXRlVGVzdFBhcnQoc2VsZi5zZXRVcCwgb3V0Y29tZSkKICAgICAgICAgICAgaWYgb3V0Y29tZS5zdWNjZXNzOgogICAgICAgICAgICAgICAgc2VsZi5fZXhlY3V0ZVRlc3RQYXJ0KHRlc3RNZXRob2QsIG91dGNvbWUsIGlzVGVzdD1UcnVlKQogICAgICAgICAgICAgICAgc2VsZi5fZXhlY3V0ZVRlc3RQYXJ0KHNlbGYudGVhckRvd24sIG91dGNvbWUpCgogICAgICAgICAgICBzZWxmLmRvQ2xlYW51cHMoKQogICAgICAgICAgICBpZiBvdXRjb21lLnN1Y2Nlc3M6CiAgICAgICAgICAgICAgICByZXN1bHQuYWRkU3VjY2VzcyhzZWxmKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgb3V0Y29tZS5za2lwcGVkIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX2FkZFNraXAocmVzdWx0LCBvdXRjb21lLnNraXBwZWQpCiAgICAgICAgICAgICAgICBmb3IgZXhjX2luZm8gaW4gb3V0Y29tZS5lcnJvcnM6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFkZEVycm9yKHNlbGYsIGV4Y19pbmZvKQogICAgICAgICAgICAgICAgZm9yIGV4Y19pbmZvIGluIG91dGNvbWUuZmFpbHVyZXM6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFkZEZhaWx1cmUoc2VsZiwgZXhjX2luZm8pCiAgICAgICAgICAgICAgICBpZiBvdXRjb21lLnVuZXhwZWN0ZWRTdWNjZXNzIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIGFkZFVuZXhwZWN0ZWRTdWNjZXNzID0gZ2V0YXR0cihyZXN1bHQsICdhZGRVbmV4cGVjdGVkU3VjY2VzcycsIE5vbmUpCiAgICAgICAgICAgICAgICAgICAgaWYgYWRkVW5leHBlY3RlZFN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZFVuZXhwZWN0ZWRTdWNjZXNzKHNlbGYpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgd2FybmluZ3Mud2FybigiVGVzdFJlc3VsdCBoYXMgbm8gYWRkVW5leHBlY3RlZFN1Y2Nlc3MgbWV0aG9kLCByZXBvcnRpbmcgYXMgZmFpbHVyZXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJ1bnRpbWVXYXJuaW5nKQogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYWRkRmFpbHVyZShzZWxmLCBvdXRjb21lLnVuZXhwZWN0ZWRTdWNjZXNzKQoKICAgICAgICAgICAgICAgIGlmIG91dGNvbWUuZXhwZWN0ZWRGYWlsdXJlIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIGFkZEV4cGVjdGVkRmFpbHVyZSA9IGdldGF0dHIocmVzdWx0LCAnYWRkRXhwZWN0ZWRGYWlsdXJlJywgTm9uZSkKICAgICAgICAgICAgICAgICAgICBpZiBhZGRFeHBlY3RlZEZhaWx1cmUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEV4cGVjdGVkRmFpbHVyZShzZWxmLCBvdXRjb21lLmV4cGVjdGVkRmFpbHVyZSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICB3YXJuaW5ncy53YXJuKCJUZXN0UmVzdWx0IGhhcyBubyBhZGRFeHBlY3RlZEZhaWx1cmUgbWV0aG9kLCByZXBvcnRpbmcgYXMgcGFzc2VzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSdW50aW1lV2FybmluZykKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFkZFN1Y2Nlc3Moc2VsZikKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgIHJlc3VsdC5zdG9wVGVzdChzZWxmKQogICAgICAgICAgICBpZiBvcmlnX3Jlc3VsdCBpcyBOb25lOgogICAgICAgICAgICAgICAgc3RvcFRlc3RSdW4gPSBnZXRhdHRyKHJlc3VsdCwgJ3N0b3BUZXN0UnVuJywgTm9uZSkKICAgICAgICAgICAgICAgIGlmIHN0b3BUZXN0UnVuIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgIHN0b3BUZXN0UnVuKCkKCiAgICBkZWYgZG9DbGVhbnVwcyhzZWxmKToKICAgICAgICAiIiJFeGVjdXRlIGFsbCBjbGVhbnVwIGZ1bmN0aW9ucy4gTm9ybWFsbHkgY2FsbGVkIGZvciB5b3UgYWZ0ZXIKICAgICAgICB0ZWFyRG93bi4iIiIKICAgICAgICBvdXRjb21lID0gc2VsZi5fb3V0Y29tZUZvckRvQ2xlYW51cHMgb3IgX091dGNvbWUoKQogICAgICAgIHdoaWxlIHNlbGYuX2NsZWFudXBzOgogICAgICAgICAgICBmdW5jdGlvbiwgYXJncywga3dhcmdzID0gc2VsZi5fY2xlYW51cHMucG9wKCkKICAgICAgICAgICAgcGFydCA9IGxhbWJkYTogZnVuY3Rpb24oKmFyZ3MsICoqa3dhcmdzKQogICAgICAgICAgICBzZWxmLl9leGVjdXRlVGVzdFBhcnQocGFydCwgb3V0Y29tZSkKCiAgICAgICAgIyByZXR1cm4gdGhpcyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKICAgICAgICAjIGV2ZW4gdGhvdWdoIHdlIG5vIGxvbmdlciB1cyBpdCBpbnRlcm5hbGx5CiAgICAgICAgcmV0dXJuIG91dGNvbWUuc3VjY2VzcwoKICAgIGRlZiBfX2NhbGxfXyhzZWxmLCAqYXJncywgKiprd2RzKToKICAgICAgICByZXR1cm4gc2VsZi5ydW4oKmFyZ3MsICoqa3dkcykKCiAgICBkZWYgZGVidWcoc2VsZik6CiAgICAgICAgIiIiUnVuIHRoZSB0ZXN0IHdpdGhvdXQgY29sbGVjdGluZyBlcnJvcnMgaW4gYSBUZXN0UmVzdWx0IiIiCiAgICAgICAgc2VsZi5zZXRVcCgpCiAgICAgICAgZ2V0YXR0cihzZWxmLCBzZWxmLl90ZXN0TWV0aG9kTmFtZSkoKQogICAgICAgIHNlbGYudGVhckRvd24oKQogICAgICAgIHdoaWxlIHNlbGYuX2NsZWFudXBzOgogICAgICAgICAgICBmdW5jdGlvbiwgYXJncywga3dhcmdzID0gc2VsZi5fY2xlYW51cHMucG9wKC0xKQogICAgICAgICAgICBmdW5jdGlvbigqYXJncywgKiprd2FyZ3MpCgogICAgZGVmIHNraXBUZXN0KHNlbGYsIHJlYXNvbik6CiAgICAgICAgIiIiU2tpcCB0aGlzIHRlc3QuIiIiCiAgICAgICAgcmFpc2UgU2tpcFRlc3QocmVhc29uKQoKICAgIGRlZiBmYWlsKHNlbGYsIG1zZz1Ob25lKToKICAgICAgICAiIiJGYWlsIGltbWVkaWF0ZWx5LCB3aXRoIHRoZSBnaXZlbiBtZXNzYWdlLiIiIgogICAgICAgIHJhaXNlIHNlbGYuZmFpbHVyZUV4Y2VwdGlvbihtc2cpCgogICAgZGVmIGFzc2VydEZhbHNlKHNlbGYsIGV4cHIsIG1zZz1Ob25lKToKICAgICAgICAiIiJDaGVjayB0aGF0IHRoZSBleHByZXNzaW9uIGlzIGZhbHNlLiIiIgogICAgICAgIGlmIGV4cHI6CiAgICAgICAgICAgIG1zZyA9IHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCAiJXMgaXMgbm90IGZhbHNlIiAlIHNhZmVfcmVwcihleHByKSkKICAgICAgICAgICAgcmFpc2Ugc2VsZi5mYWlsdXJlRXhjZXB0aW9uKG1zZykKCiAgICBkZWYgYXNzZXJ0VHJ1ZShzZWxmLCBleHByLCBtc2c9Tm9uZSk6CiAgICAgICAgIiIiQ2hlY2sgdGhhdCB0aGUgZXhwcmVzc2lvbiBpcyB0cnVlLiIiIgogICAgICAgIGlmIG5vdCBleHByOgogICAgICAgICAgICBtc2cgPSBzZWxmLl9mb3JtYXRNZXNzYWdlKG1zZywgIiVzIGlzIG5vdCB0cnVlIiAlIHNhZmVfcmVwcihleHByKSkKICAgICAgICAgICAgcmFpc2Ugc2VsZi5mYWlsdXJlRXhjZXB0aW9uKG1zZykKCiAgICBkZWYgX2Zvcm1hdE1lc3NhZ2Uoc2VsZiwgbXNnLCBzdGFuZGFyZE1zZyk6CiAgICAgICAgIiIiSG9ub3VyIHRoZSBsb25nTWVzc2FnZSBhdHRyaWJ1dGUgd2hlbiBnZW5lcmF0aW5nIGZhaWx1cmUgbWVzc2FnZXMuCiAgICAgICAgSWYgbG9uZ01lc3NhZ2UgaXMgRmFsc2UgdGhpcyBtZWFuczoKICAgICAgICAqIFVzZSBvbmx5IGFuIGV4cGxpY2l0IG1lc3NhZ2UgaWYgaXQgaXMgcHJvdmlkZWQKICAgICAgICAqIE90aGVyd2lzZSB1c2UgdGhlIHN0YW5kYXJkIG1lc3NhZ2UgZm9yIHRoZSBhc3NlcnQKCiAgICAgICAgSWYgbG9uZ01lc3NhZ2UgaXMgVHJ1ZToKICAgICAgICAqIFVzZSB0aGUgc3RhbmRhcmQgbWVzc2FnZQogICAgICAgICogSWYgYW4gZXhwbGljaXQgbWVzc2FnZSBpcyBwcm92aWRlZCwgcGx1cyAnIDogJyBhbmQgdGhlIGV4cGxpY2l0IG1lc3NhZ2UKICAgICAgICAiIiIKICAgICAgICBpZiBub3Qgc2VsZi5sb25nTWVzc2FnZToKICAgICAgICAgICAgcmV0dXJuIG1zZyBvciBzdGFuZGFyZE1zZwogICAgICAgIGlmIG1zZyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gc3RhbmRhcmRNc2cKICAgICAgICB0cnk6CiAgICAgICAgICAgICMgZG9uJ3Qgc3dpdGNoIHRvICd7fScgZm9ybWF0dGluZyBpbiBQeXRob24gMi5YCiAgICAgICAgICAgICMgaXQgY2hhbmdlcyB0aGUgd2F5IHVuaWNvZGUgaW5wdXQgaXMgaGFuZGxlZAogICAgICAgICAgICByZXR1cm4gJyVzIDogJXMnICUgKHN0YW5kYXJkTXNnLCBtc2cpCiAgICAgICAgZXhjZXB0IFVuaWNvZGVEZWNvZGVFcnJvcjoKICAgICAgICAgICAgcmV0dXJuICAnJXMgOiAlcycgJSAoc2FmZV9yZXByKHN0YW5kYXJkTXNnKSwgc2FmZV9yZXByKG1zZykpCgogICAgZGVmIGFzc2VydFJhaXNlcyhzZWxmLCBleGNDbGFzcywgY2FsbGFibGVPYmo9Tm9uZSwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAiIiJGYWlsIHVubGVzcyBhbiBleGNlcHRpb24gb2YgY2xhc3MgZXhjQ2xhc3MgaXMgdGhyb3duCiAgICAgICAgICAgYnkgY2FsbGFibGVPYmogd2hlbiBpbnZva2VkIHdpdGggYXJndW1lbnRzIGFyZ3MgYW5kIGtleXdvcmQKICAgICAgICAgICBhcmd1bWVudHMga3dhcmdzLiBJZiBhIGRpZmZlcmVudCB0eXBlIG9mIGV4Y2VwdGlvbiBpcwogICAgICAgICAgIHRocm93biwgaXQgd2lsbCBub3QgYmUgY2F1Z2h0LCBhbmQgdGhlIHRlc3QgY2FzZSB3aWxsIGJlCiAgICAgICAgICAgZGVlbWVkIHRvIGhhdmUgc3VmZmVyZWQgYW4gZXJyb3IsIGV4YWN0bHkgYXMgZm9yIGFuCiAgICAgICAgICAgdW5leHBlY3RlZCBleGNlcHRpb24uCgogICAgICAgICAgIElmIGNhbGxlZCB3aXRoIGNhbGxhYmxlT2JqIG9taXR0ZWQgb3IgTm9uZSwgd2lsbCByZXR1cm4gYQogICAgICAgICAgIGNvbnRleHQgb2JqZWN0IHVzZWQgbGlrZSB0aGlzOjoKCiAgICAgICAgICAgICAgICB3aXRoIHNlbGYuYXNzZXJ0UmFpc2VzKFNvbWVFeGNlcHRpb24pOgogICAgICAgICAgICAgICAgICAgIGRvX3NvbWV0aGluZygpCgogICAgICAgICAgIEFuIG9wdGlvbmFsIGtleXdvcmQgYXJndW1lbnQgJ21zZycgY2FuIGJlIHByb3ZpZGVkIHdoZW4gYXNzZXJ0UmFpc2VzCiAgICAgICAgICAgaXMgdXNlZCBhcyBhIGNvbnRleHQgb2JqZWN0LgoKICAgICAgICAgICBUaGUgY29udGV4dCBtYW5hZ2VyIGtlZXBzIGEgcmVmZXJlbmNlIHRvIHRoZSBleGNlcHRpb24gYXMKICAgICAgICAgICB0aGUgJ2V4Y2VwdGlvbicgYXR0cmlidXRlLiBUaGlzIGFsbG93cyB5b3UgdG8gaW5zcGVjdCB0aGUKICAgICAgICAgICBleGNlcHRpb24gYWZ0ZXIgdGhlIGFzc2VydGlvbjo6CgogICAgICAgICAgICAgICB3aXRoIHNlbGYuYXNzZXJ0UmFpc2VzKFNvbWVFeGNlcHRpb24pIGFzIGNtOgogICAgICAgICAgICAgICAgICAgZG9fc29tZXRoaW5nKCkKICAgICAgICAgICAgICAgdGhlX2V4Y2VwdGlvbiA9IGNtLmV4Y2VwdGlvbgogICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRoZV9leGNlcHRpb24uZXJyb3JfY29kZSwgMykKICAgICAgICAiIiIKICAgICAgICBjb250ZXh0ID0gX0Fzc2VydFJhaXNlc0NvbnRleHQoZXhjQ2xhc3MsIHNlbGYsIGNhbGxhYmxlT2JqKQogICAgICAgIHJldHVybiBjb250ZXh0LmhhbmRsZSgnYXNzZXJ0UmFpc2VzJywgY2FsbGFibGVPYmosIGFyZ3MsIGt3YXJncykKCiAgICBkZWYgYXNzZXJ0V2FybnMoc2VsZiwgZXhwZWN0ZWRfd2FybmluZywgY2FsbGFibGVfb2JqPU5vbmUsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIiIiRmFpbCB1bmxlc3MgYSB3YXJuaW5nIG9mIGNsYXNzIHdhcm5DbGFzcyBpcyB0cmlnZ2VyZWQKICAgICAgICAgICBieSBjYWxsYWJsZV9vYmogd2hlbiBpbnZva2VkIHdpdGggYXJndW1lbnRzIGFyZ3MgYW5kIGtleXdvcmQKICAgICAgICAgICBhcmd1bWVudHMga3dhcmdzLiAgSWYgYSBkaWZmZXJlbnQgdHlwZSBvZiB3YXJuaW5nIGlzCiAgICAgICAgICAgdHJpZ2dlcmVkLCBpdCB3aWxsIG5vdCBiZSBoYW5kbGVkOiBkZXBlbmRpbmcgb24gdGhlIG90aGVyCiAgICAgICAgICAgd2FybmluZyBmaWx0ZXJpbmcgcnVsZXMgaW4gZWZmZWN0LCBpdCBtaWdodCBiZSBzaWxlbmNlZCwgcHJpbnRlZAogICAgICAgICAgIG91dCwgb3IgcmFpc2VkIGFzIGFuIGV4Y2VwdGlvbi4KCiAgICAgICAgICAgSWYgY2FsbGVkIHdpdGggY2FsbGFibGVfb2JqIG9taXR0ZWQgb3IgTm9uZSwgd2lsbCByZXR1cm4gYQogICAgICAgICAgIGNvbnRleHQgb2JqZWN0IHVzZWQgbGlrZSB0aGlzOjoKCiAgICAgICAgICAgICAgICB3aXRoIHNlbGYuYXNzZXJ0V2FybnMoU29tZVdhcm5pbmcpOgogICAgICAgICAgICAgICAgICAgIGRvX3NvbWV0aGluZygpCgogICAgICAgICAgIEFuIG9wdGlvbmFsIGtleXdvcmQgYXJndW1lbnQgJ21zZycgY2FuIGJlIHByb3ZpZGVkIHdoZW4gYXNzZXJ0V2FybnMKICAgICAgICAgICBpcyB1c2VkIGFzIGEgY29udGV4dCBvYmplY3QuCgogICAgICAgICAgIFRoZSBjb250ZXh0IG1hbmFnZXIga2VlcHMgYSByZWZlcmVuY2UgdG8gdGhlIGZpcnN0IG1hdGNoaW5nCiAgICAgICAgICAgd2FybmluZyBhcyB0aGUgJ3dhcm5pbmcnIGF0dHJpYnV0ZTsgc2ltaWxhcmx5LCB0aGUgJ2ZpbGVuYW1lJwogICAgICAgICAgIGFuZCAnbGluZW5vJyBhdHRyaWJ1dGVzIGdpdmUgeW91IGluZm9ybWF0aW9uIGFib3V0IHRoZSBsaW5lCiAgICAgICAgICAgb2YgUHl0aG9uIGNvZGUgZnJvbSB3aGljaCB0aGUgd2FybmluZyB3YXMgdHJpZ2dlcmVkLgogICAgICAgICAgIFRoaXMgYWxsb3dzIHlvdSB0byBpbnNwZWN0IHRoZSB3YXJuaW5nIGFmdGVyIHRoZSBhc3NlcnRpb246OgoKICAgICAgICAgICAgICAgd2l0aCBzZWxmLmFzc2VydFdhcm5zKFNvbWVXYXJuaW5nKSBhcyBjbToKICAgICAgICAgICAgICAgICAgIGRvX3NvbWV0aGluZygpCiAgICAgICAgICAgICAgIHRoZV93YXJuaW5nID0gY20ud2FybmluZwogICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRoZV93YXJuaW5nLnNvbWVfYXR0cmlidXRlLCAxNDcpCiAgICAgICAgIiIiCiAgICAgICAgY29udGV4dCA9IF9Bc3NlcnRXYXJuc0NvbnRleHQoZXhwZWN0ZWRfd2FybmluZywgc2VsZiwgY2FsbGFibGVfb2JqKQogICAgICAgIHJldHVybiBjb250ZXh0LmhhbmRsZSgnYXNzZXJ0V2FybnMnLCBjYWxsYWJsZV9vYmosIGFyZ3MsIGt3YXJncykKCiAgICBkZWYgX2dldEFzc2VydEVxdWFsaXR5RnVuYyhzZWxmLCBmaXJzdCwgc2Vjb25kKToKICAgICAgICAiIiJHZXQgYSBkZXRhaWxlZCBjb21wYXJpc29uIGZ1bmN0aW9uIGZvciB0aGUgdHlwZXMgb2YgdGhlIHR3byBhcmdzLgoKICAgICAgICBSZXR1cm5zOiBBIGNhbGxhYmxlIGFjY2VwdGluZyAoZmlyc3QsIHNlY29uZCwgbXNnPU5vbmUpIHRoYXQgd2lsbAogICAgICAgIHJhaXNlIGEgZmFpbHVyZSBleGNlcHRpb24gaWYgZmlyc3QgIT0gc2Vjb25kIHdpdGggYSB1c2VmdWwgaHVtYW4KICAgICAgICByZWFkYWJsZSBlcnJvciBtZXNzYWdlIGZvciB0aG9zZSB0eXBlcy4KICAgICAgICAiIiIKICAgICAgICAjCiAgICAgICAgIyBOT1RFKGdyZWdvcnkucC5zbWl0aCk6IEkgY29uc2lkZXJlZCBpc2luc3RhbmNlKGZpcnN0LCB0eXBlKHNlY29uZCkpCiAgICAgICAgIyBhbmQgdmljZSB2ZXJzYS4gIEkgb3B0ZWQgZm9yIHRoZSBjb25zZXJ2YXRpdmUgYXBwcm9hY2ggaW4gY2FzZQogICAgICAgICMgc3ViY2xhc3NlcyBhcmUgbm90IGludGVuZGVkIHRvIGJlIGNvbXBhcmVkIGluIGRldGFpbCB0byB0aGVpciBzdXBlcgogICAgICAgICMgY2xhc3MgaW5zdGFuY2VzIHVzaW5nIGEgdHlwZSBlcXVhbGl0eSBmdW5jLiAgVGhpcyBtZWFucyB0ZXN0aW5nCiAgICAgICAgIyBzdWJ0eXBlcyB3b24ndCBhdXRvbWFnaWNhbGx5IHVzZSB0aGUgZGV0YWlsZWQgY29tcGFyaXNvbi4gIENhbGxlcnMKICAgICAgICAjIHNob3VsZCB1c2UgdGhlaXIgdHlwZSBzcGVjaWZpYyBhc3NlcnRTcGFtRXF1YWwgbWV0aG9kIHRvIGNvbXBhcmUKICAgICAgICAjIHN1YmNsYXNzZXMgaWYgdGhlIGRldGFpbGVkIGNvbXBhcmlzb24gaXMgZGVzaXJlZCBhbmQgYXBwcm9wcmlhdGUuCiAgICAgICAgIyBTZWUgdGhlIGRpc2N1c3Npb24gaW4gaHR0cDovL2J1Z3MucHl0aG9uLm9yZy9pc3N1ZTI1NzguCiAgICAgICAgIwogICAgICAgIGlmIHR5cGUoZmlyc3QpIGlzIHR5cGUoc2Vjb25kKToKICAgICAgICAgICAgYXNzZXJ0ZXIgPSBzZWxmLl90eXBlX2VxdWFsaXR5X2Z1bmNzLmdldCh0eXBlKGZpcnN0KSkKICAgICAgICAgICAgaWYgYXNzZXJ0ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKGFzc2VydGVyLCBzdHIpOgogICAgICAgICAgICAgICAgICAgIGFzc2VydGVyID0gZ2V0YXR0cihzZWxmLCBhc3NlcnRlcikKICAgICAgICAgICAgICAgIHJldHVybiBhc3NlcnRlcgoKICAgICAgICByZXR1cm4gc2VsZi5fYmFzZUFzc2VydEVxdWFsCgogICAgZGVmIF9iYXNlQXNzZXJ0RXF1YWwoc2VsZiwgZmlyc3QsIHNlY29uZCwgbXNnPU5vbmUpOgogICAgICAgICIiIlRoZSBkZWZhdWx0IGFzc2VydEVxdWFsIGltcGxlbWVudGF0aW9uLCBub3QgdHlwZSBzcGVjaWZpYy4iIiIKICAgICAgICBpZiBub3QgZmlyc3QgPT0gc2Vjb25kOgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICclcyAhPSAlcycgJSAoc2FmZV9yZXByKGZpcnN0KSwgc2FmZV9yZXByKHNlY29uZCkpCiAgICAgICAgICAgIG1zZyA9IHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykKICAgICAgICAgICAgcmFpc2Ugc2VsZi5mYWlsdXJlRXhjZXB0aW9uKG1zZykKCiAgICBkZWYgYXNzZXJ0RXF1YWwoc2VsZiwgZmlyc3QsIHNlY29uZCwgbXNnPU5vbmUpOgogICAgICAgICIiIkZhaWwgaWYgdGhlIHR3byBvYmplY3RzIGFyZSB1bmVxdWFsIGFzIGRldGVybWluZWQgYnkgdGhlICc9PScKICAgICAgICAgICBvcGVyYXRvci4KICAgICAgICAiIiIKICAgICAgICBhc3NlcnRpb25fZnVuYyA9IHNlbGYuX2dldEFzc2VydEVxdWFsaXR5RnVuYyhmaXJzdCwgc2Vjb25kKQogICAgICAgIGFzc2VydGlvbl9mdW5jKGZpcnN0LCBzZWNvbmQsIG1zZz1tc2cpCgogICAgZGVmIGFzc2VydE5vdEVxdWFsKHNlbGYsIGZpcnN0LCBzZWNvbmQsIG1zZz1Ob25lKToKICAgICAgICAiIiJGYWlsIGlmIHRoZSB0d28gb2JqZWN0cyBhcmUgZXF1YWwgYXMgZGV0ZXJtaW5lZCBieSB0aGUgJz09JwogICAgICAgICAgIG9wZXJhdG9yLgogICAgICAgICIiIgogICAgICAgIGlmIG5vdCBmaXJzdCAhPSBzZWNvbmQ6CiAgICAgICAgICAgIG1zZyA9IHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCAnJXMgPT0gJXMnICUgKHNhZmVfcmVwcihmaXJzdCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWZlX3JlcHIoc2Vjb25kKSkpCiAgICAgICAgICAgIHJhaXNlIHNlbGYuZmFpbHVyZUV4Y2VwdGlvbihtc2cpCgogICAgZGVmIGFzc2VydEFsbW9zdEVxdWFsKHNlbGYsIGZpcnN0LCBzZWNvbmQsIHBsYWNlcz1Ob25lLCBtc2c9Tm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YT1Ob25lKToKICAgICAgICAiIiJGYWlsIGlmIHRoZSB0d28gb2JqZWN0cyBhcmUgdW5lcXVhbCBhcyBkZXRlcm1pbmVkIGJ5IHRoZWlyCiAgICAgICAgICAgZGlmZmVyZW5jZSByb3VuZGVkIHRvIHRoZSBnaXZlbiBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMKICAgICAgICAgICAoZGVmYXVsdCA3KSBhbmQgY29tcGFyaW5nIHRvIHplcm8sIG9yIGJ5IGNvbXBhcmluZyB0aGF0IHRoZQogICAgICAgICAgIGJldHdlZW4gdGhlIHR3byBvYmplY3RzIGlzIG1vcmUgdGhhbiB0aGUgZ2l2ZW4gZGVsdGEuCgogICAgICAgICAgIE5vdGUgdGhhdCBkZWNpbWFsIHBsYWNlcyAoZnJvbSB6ZXJvKSBhcmUgdXN1YWxseSBub3QgdGhlIHNhbWUKICAgICAgICAgICBhcyBzaWduaWZpY2FudCBkaWdpdHMgKG1lYXN1cmVkIGZyb20gdGhlIG1vc3Qgc2lnbmZpY2FudCBkaWdpdCkuCgogICAgICAgICAgIElmIHRoZSB0d28gb2JqZWN0cyBjb21wYXJlIGVxdWFsIHRoZW4gdGhleSB3aWxsIGF1dG9tYXRpY2FsbHkKICAgICAgICAgICBjb21wYXJlIGFsbW9zdCBlcXVhbC4KICAgICAgICAiIiIKICAgICAgICBpZiBmaXJzdCA9PSBzZWNvbmQ6CiAgICAgICAgICAgICMgc2hvcnRjdXQKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgaWYgZGVsdGEgaXMgbm90IE5vbmUgYW5kIHBsYWNlcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJzcGVjaWZ5IGRlbHRhIG9yIHBsYWNlcyBub3QgYm90aCIpCgogICAgICAgIGlmIGRlbHRhIGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBhYnMoZmlyc3QgLSBzZWNvbmQpIDw9IGRlbHRhOgogICAgICAgICAgICAgICAgcmV0dXJuCgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICclcyAhPSAlcyB3aXRoaW4gJXMgZGVsdGEnICUgKHNhZmVfcmVwcihmaXJzdCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9yZXByKHNlY29uZCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9yZXByKGRlbHRhKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBwbGFjZXMgaXMgTm9uZToKICAgICAgICAgICAgICAgIHBsYWNlcyA9IDcKCiAgICAgICAgICAgIGlmIHJvdW5kKGFicyhzZWNvbmQtZmlyc3QpLCBwbGFjZXMpID09IDA6CiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgICAgIHN0YW5kYXJkTXNnID0gJyVzICE9ICVzIHdpdGhpbiAlciBwbGFjZXMnICUgKHNhZmVfcmVwcihmaXJzdCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWZlX3JlcHIoc2Vjb25kKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlcykKICAgICAgICBtc2cgPSBzZWxmLl9mb3JtYXRNZXNzYWdlKG1zZywgc3RhbmRhcmRNc2cpCiAgICAgICAgcmFpc2Ugc2VsZi5mYWlsdXJlRXhjZXB0aW9uKG1zZykKCiAgICBkZWYgYXNzZXJ0Tm90QWxtb3N0RXF1YWwoc2VsZiwgZmlyc3QsIHNlY29uZCwgcGxhY2VzPU5vbmUsIG1zZz1Ob25lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhPU5vbmUpOgogICAgICAgICIiIkZhaWwgaWYgdGhlIHR3byBvYmplY3RzIGFyZSBlcXVhbCBhcyBkZXRlcm1pbmVkIGJ5IHRoZWlyCiAgICAgICAgICAgZGlmZmVyZW5jZSByb3VuZGVkIHRvIHRoZSBnaXZlbiBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMKICAgICAgICAgICAoZGVmYXVsdCA3KSBhbmQgY29tcGFyaW5nIHRvIHplcm8sIG9yIGJ5IGNvbXBhcmluZyB0aGF0IHRoZQogICAgICAgICAgIGJldHdlZW4gdGhlIHR3byBvYmplY3RzIGlzIGxlc3MgdGhhbiB0aGUgZ2l2ZW4gZGVsdGEuCgogICAgICAgICAgIE5vdGUgdGhhdCBkZWNpbWFsIHBsYWNlcyAoZnJvbSB6ZXJvKSBhcmUgdXN1YWxseSBub3QgdGhlIHNhbWUKICAgICAgICAgICBhcyBzaWduaWZpY2FudCBkaWdpdHMgKG1lYXN1cmVkIGZyb20gdGhlIG1vc3Qgc2lnbmZpY2FudCBkaWdpdCkuCgogICAgICAgICAgIE9iamVjdHMgdGhhdCBhcmUgZXF1YWwgYXV0b21hdGljYWxseSBmYWlsLgogICAgICAgICIiIgogICAgICAgIGlmIGRlbHRhIGlzIG5vdCBOb25lIGFuZCBwbGFjZXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigic3BlY2lmeSBkZWx0YSBvciBwbGFjZXMgbm90IGJvdGgiKQogICAgICAgIGlmIGRlbHRhIGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBub3QgKGZpcnN0ID09IHNlY29uZCkgYW5kIGFicyhmaXJzdCAtIHNlY29uZCkgPiBkZWx0YToKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICclcyA9PSAlcyB3aXRoaW4gJXMgZGVsdGEnICUgKHNhZmVfcmVwcihmaXJzdCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9yZXByKHNlY29uZCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9yZXByKGRlbHRhKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBwbGFjZXMgaXMgTm9uZToKICAgICAgICAgICAgICAgIHBsYWNlcyA9IDcKICAgICAgICAgICAgaWYgbm90IChmaXJzdCA9PSBzZWNvbmQpIGFuZCByb3VuZChhYnMoc2Vjb25kLWZpcnN0KSwgcGxhY2VzKSAhPSAwOgogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIHN0YW5kYXJkTXNnID0gJyVzID09ICVzIHdpdGhpbiAlciBwbGFjZXMnICUgKHNhZmVfcmVwcihmaXJzdCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVfcmVwcihzZWNvbmQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZXMpCgogICAgICAgIG1zZyA9IHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykKICAgICAgICByYWlzZSBzZWxmLmZhaWx1cmVFeGNlcHRpb24obXNnKQoKCiAgICBkZWYgYXNzZXJ0U2VxdWVuY2VFcXVhbChzZWxmLCBzZXExLCBzZXEyLCBtc2c9Tm9uZSwgc2VxX3R5cGU9Tm9uZSk6CiAgICAgICAgIiIiQW4gZXF1YWxpdHkgYXNzZXJ0aW9uIGZvciBvcmRlcmVkIHNlcXVlbmNlcyAobGlrZSBsaXN0cyBhbmQgdHVwbGVzKS4KCiAgICAgICAgRm9yIHRoZSBwdXJwb3NlcyBvZiB0aGlzIGZ1bmN0aW9uLCBhIHZhbGlkIG9yZGVyZWQgc2VxdWVuY2UgdHlwZSBpcyBvbmUKICAgICAgICB3aGljaCBjYW4gYmUgaW5kZXhlZCwgaGFzIGEgbGVuZ3RoLCBhbmQgaGFzIGFuIGVxdWFsaXR5IG9wZXJhdG9yLgoKICAgICAgICBBcmdzOgogICAgICAgICAgICBzZXExOiBUaGUgZmlyc3Qgc2VxdWVuY2UgdG8gY29tcGFyZS4KICAgICAgICAgICAgc2VxMjogVGhlIHNlY29uZCBzZXF1ZW5jZSB0byBjb21wYXJlLgogICAgICAgICAgICBzZXFfdHlwZTogVGhlIGV4cGVjdGVkIGRhdGF0eXBlIG9mIHRoZSBzZXF1ZW5jZXMsIG9yIE5vbmUgaWYgbm8KICAgICAgICAgICAgICAgICAgICBkYXRhdHlwZSBzaG91bGQgYmUgZW5mb3JjZWQuCiAgICAgICAgICAgIG1zZzogT3B0aW9uYWwgbWVzc2FnZSB0byB1c2Ugb24gZmFpbHVyZSBpbnN0ZWFkIG9mIGEgbGlzdCBvZgogICAgICAgICAgICAgICAgICAgIGRpZmZlcmVuY2VzLgogICAgICAgICIiIgogICAgICAgIGlmIHNlcV90eXBlICE9IE5vbmU6CiAgICAgICAgICAgIHNlcV90eXBlX25hbWUgPSBzZXFfdHlwZS5fX25hbWVfXwogICAgICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShzZXExLCBzZXFfdHlwZSk6CiAgICAgICAgICAgICAgICByYWlzZSBzZWxmLmZhaWx1cmVFeGNlcHRpb24oJ0ZpcnN0IHNlcXVlbmNlIGlzIG5vdCBhICVzOiAlcycKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUgKHNlcV90eXBlX25hbWUsIHNhZmVfcmVwcihzZXExKSkpCiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHNlcTIsIHNlcV90eXBlKToKICAgICAgICAgICAgICAgIHJhaXNlIHNlbGYuZmFpbHVyZUV4Y2VwdGlvbignU2Vjb25kIHNlcXVlbmNlIGlzIG5vdCBhICVzOiAlcycKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUgKHNlcV90eXBlX25hbWUsIHNhZmVfcmVwcihzZXEyKSkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VxX3R5cGVfbmFtZSA9ICJzZXF1ZW5jZSIKCiAgICAgICAgZGlmZmVyaW5nID0gTm9uZQogICAgICAgIHRyeToKICAgICAgICAgICAgbGVuMSA9IGxlbihzZXExKQogICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBOb3RJbXBsZW1lbnRlZEVycm9yKToKICAgICAgICAgICAgZGlmZmVyaW5nID0gJ0ZpcnN0ICVzIGhhcyBubyBsZW5ndGguICAgIE5vbi1zZXF1ZW5jZT8nICUgKAogICAgICAgICAgICAgICAgICAgIHNlcV90eXBlX25hbWUpCgogICAgICAgIGlmIGRpZmZlcmluZyBpcyBOb25lOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBsZW4yID0gbGVuKHNlcTIpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBOb3RJbXBsZW1lbnRlZEVycm9yKToKICAgICAgICAgICAgICAgIGRpZmZlcmluZyA9ICdTZWNvbmQgJXMgaGFzIG5vIGxlbmd0aC4gICAgTm9uLXNlcXVlbmNlPycgJSAoCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcV90eXBlX25hbWUpCgogICAgICAgIGlmIGRpZmZlcmluZyBpcyBOb25lOgogICAgICAgICAgICBpZiBzZXExID09IHNlcTI6CiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgICAgIHNlcTFfcmVwciA9IHNhZmVfcmVwcihzZXExKQogICAgICAgICAgICBzZXEyX3JlcHIgPSBzYWZlX3JlcHIoc2VxMikKICAgICAgICAgICAgaWYgbGVuKHNlcTFfcmVwcikgPiAzMDoKICAgICAgICAgICAgICAgIHNlcTFfcmVwciA9IHNlcTFfcmVwcls6MzBdICsgJy4uLicKICAgICAgICAgICAgaWYgbGVuKHNlcTJfcmVwcikgPiAzMDoKICAgICAgICAgICAgICAgIHNlcTJfcmVwciA9IHNlcTJfcmVwcls6MzBdICsgJy4uLicKICAgICAgICAgICAgZWxlbWVudHMgPSAoc2VxX3R5cGVfbmFtZS5jYXBpdGFsaXplKCksIHNlcTFfcmVwciwgc2VxMl9yZXByKQogICAgICAgICAgICBkaWZmZXJpbmcgPSAnJXNzIGRpZmZlcjogJXMgIT0gJXNcbicgJSBlbGVtZW50cwoKICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobWluKGxlbjEsIGxlbjIpKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBpdGVtMSA9IHNlcTFbaV0KICAgICAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBJbmRleEVycm9yLCBOb3RJbXBsZW1lbnRlZEVycm9yKToKICAgICAgICAgICAgICAgICAgICBkaWZmZXJpbmcgKz0gKCdcblVuYWJsZSB0byBpbmRleCBlbGVtZW50ICVkIG9mIGZpcnN0ICVzXG4nICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGksIHNlcV90eXBlX25hbWUpKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGl0ZW0yID0gc2VxMltpXQogICAgICAgICAgICAgICAgZXhjZXB0IChUeXBlRXJyb3IsIEluZGV4RXJyb3IsIE5vdEltcGxlbWVudGVkRXJyb3IpOgogICAgICAgICAgICAgICAgICAgIGRpZmZlcmluZyArPSAoJ1xuVW5hYmxlIHRvIGluZGV4IGVsZW1lbnQgJWQgb2Ygc2Vjb25kICVzXG4nICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGksIHNlcV90eXBlX25hbWUpKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgICAgICAgICAgaWYgaXRlbTEgIT0gaXRlbTI6CiAgICAgICAgICAgICAgICAgICAgZGlmZmVyaW5nICs9ICgnXG5GaXJzdCBkaWZmZXJpbmcgZWxlbWVudCAlZDpcbiVzXG4lc1xuJyAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpLCBpdGVtMSwgaXRlbTIpKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBpZiAobGVuMSA9PSBsZW4yIGFuZCBzZXFfdHlwZSBpcyBOb25lIGFuZAogICAgICAgICAgICAgICAgICAgIHR5cGUoc2VxMSkgIT0gdHlwZShzZXEyKSk6CiAgICAgICAgICAgICAgICAgICAgIyBUaGUgc2VxdWVuY2VzIGFyZSB0aGUgc2FtZSwgYnV0IGhhdmUgZGlmZmVyaW5nIHR5cGVzLgogICAgICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaWYgbGVuMSA+IGxlbjI6CiAgICAgICAgICAgICAgICBkaWZmZXJpbmcgKz0gKCdcbkZpcnN0ICVzIGNvbnRhaW5zICVkIGFkZGl0aW9uYWwgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbGVtZW50cy5cbicgJSAoc2VxX3R5cGVfbmFtZSwgbGVuMSAtIGxlbjIpKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGRpZmZlcmluZyArPSAoJ0ZpcnN0IGV4dHJhIGVsZW1lbnQgJWQ6XG4lc1xuJyAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobGVuMiwgc2VxMVtsZW4yXSkpCiAgICAgICAgICAgICAgICBleGNlcHQgKFR5cGVFcnJvciwgSW5kZXhFcnJvciwgTm90SW1wbGVtZW50ZWRFcnJvcik6CiAgICAgICAgICAgICAgICAgICAgZGlmZmVyaW5nICs9ICgnVW5hYmxlIHRvIGluZGV4IGVsZW1lbnQgJWQgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29mIGZpcnN0ICVzXG4nICUgKGxlbjIsIHNlcV90eXBlX25hbWUpKQogICAgICAgICAgICBlbGlmIGxlbjEgPCBsZW4yOgogICAgICAgICAgICAgICAgZGlmZmVyaW5nICs9ICgnXG5TZWNvbmQgJXMgY29udGFpbnMgJWQgYWRkaXRpb25hbCAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VsZW1lbnRzLlxuJyAlIChzZXFfdHlwZV9uYW1lLCBsZW4yIC0gbGVuMSkpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgZGlmZmVyaW5nICs9ICgnRmlyc3QgZXh0cmEgZWxlbWVudCAlZDpcbiVzXG4nICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsZW4xLCBzZXEyW2xlbjFdKSkKICAgICAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBJbmRleEVycm9yLCBOb3RJbXBsZW1lbnRlZEVycm9yKToKICAgICAgICAgICAgICAgICAgICBkaWZmZXJpbmcgKz0gKCdVbmFibGUgdG8gaW5kZXggZWxlbWVudCAlZCAnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb2Ygc2Vjb25kICVzXG4nICUgKGxlbjEsIHNlcV90eXBlX25hbWUpKQogICAgICAgIHN0YW5kYXJkTXNnID0gZGlmZmVyaW5nCiAgICAgICAgZGlmZk1zZyA9ICdcbicgKyAnXG4nLmpvaW4oCiAgICAgICAgICAgIGRpZmZsaWIubmRpZmYocHByaW50LnBmb3JtYXQoc2VxMSkuc3BsaXRsaW5lcygpLAogICAgICAgICAgICAgICAgICAgICAgICAgIHBwcmludC5wZm9ybWF0KHNlcTIpLnNwbGl0bGluZXMoKSkpCgogICAgICAgIHN0YW5kYXJkTXNnID0gc2VsZi5fdHJ1bmNhdGVNZXNzYWdlKHN0YW5kYXJkTXNnLCBkaWZmTXNnKQogICAgICAgIG1zZyA9IHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykKICAgICAgICBzZWxmLmZhaWwobXNnKQoKICAgIGRlZiBfdHJ1bmNhdGVNZXNzYWdlKHNlbGYsIG1lc3NhZ2UsIGRpZmYpOgogICAgICAgIG1heF9kaWZmID0gc2VsZi5tYXhEaWZmCiAgICAgICAgaWYgbWF4X2RpZmYgaXMgTm9uZSBvciBsZW4oZGlmZikgPD0gbWF4X2RpZmY6CiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlICsgZGlmZgogICAgICAgIHJldHVybiBtZXNzYWdlICsgKERJRkZfT01JVFRFRCAlIGxlbihkaWZmKSkKCiAgICBkZWYgYXNzZXJ0TGlzdEVxdWFsKHNlbGYsIGxpc3QxLCBsaXN0MiwgbXNnPU5vbmUpOgogICAgICAgICIiIkEgbGlzdC1zcGVjaWZpYyBlcXVhbGl0eSBhc3NlcnRpb24uCgogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGxpc3QxOiBUaGUgZmlyc3QgbGlzdCB0byBjb21wYXJlLgogICAgICAgICAgICBsaXN0MjogVGhlIHNlY29uZCBsaXN0IHRvIGNvbXBhcmUuCiAgICAgICAgICAgIG1zZzogT3B0aW9uYWwgbWVzc2FnZSB0byB1c2Ugb24gZmFpbHVyZSBpbnN0ZWFkIG9mIGEgbGlzdCBvZgogICAgICAgICAgICAgICAgICAgIGRpZmZlcmVuY2VzLgoKICAgICAgICAiIiIKICAgICAgICBzZWxmLmFzc2VydFNlcXVlbmNlRXF1YWwobGlzdDEsIGxpc3QyLCBtc2csIHNlcV90eXBlPWxpc3QpCgogICAgZGVmIGFzc2VydFR1cGxlRXF1YWwoc2VsZiwgdHVwbGUxLCB0dXBsZTIsIG1zZz1Ob25lKToKICAgICAgICAiIiJBIHR1cGxlLXNwZWNpZmljIGVxdWFsaXR5IGFzc2VydGlvbi4KCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdHVwbGUxOiBUaGUgZmlyc3QgdHVwbGUgdG8gY29tcGFyZS4KICAgICAgICAgICAgdHVwbGUyOiBUaGUgc2Vjb25kIHR1cGxlIHRvIGNvbXBhcmUuCiAgICAgICAgICAgIG1zZzogT3B0aW9uYWwgbWVzc2FnZSB0byB1c2Ugb24gZmFpbHVyZSBpbnN0ZWFkIG9mIGEgbGlzdCBvZgogICAgICAgICAgICAgICAgICAgIGRpZmZlcmVuY2VzLgogICAgICAgICIiIgogICAgICAgIHNlbGYuYXNzZXJ0U2VxdWVuY2VFcXVhbCh0dXBsZTEsIHR1cGxlMiwgbXNnLCBzZXFfdHlwZT10dXBsZSkKCiAgICBkZWYgYXNzZXJ0U2V0RXF1YWwoc2VsZiwgc2V0MSwgc2V0MiwgbXNnPU5vbmUpOgogICAgICAgICIiIkEgc2V0LXNwZWNpZmljIGVxdWFsaXR5IGFzc2VydGlvbi4KCiAgICAgICAgQXJnczoKICAgICAgICAgICAgc2V0MTogVGhlIGZpcnN0IHNldCB0byBjb21wYXJlLgogICAgICAgICAgICBzZXQyOiBUaGUgc2Vjb25kIHNldCB0byBjb21wYXJlLgogICAgICAgICAgICBtc2c6IE9wdGlvbmFsIG1lc3NhZ2UgdG8gdXNlIG9uIGZhaWx1cmUgaW5zdGVhZCBvZiBhIGxpc3Qgb2YKICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbmNlcy4KCiAgICAgICAgYXNzZXJ0U2V0RXF1YWwgdXNlcyBkdWNrdHlwaW5nIHRvIHN1cHBvcnQgZGlmZmVyZW50IHR5cGVzIG9mIHNldHMsIGFuZAogICAgICAgIGlzIG9wdGltaXplZCBmb3Igc2V0cyBzcGVjaWZpY2FsbHkgKHBhcmFtZXRlcnMgbXVzdCBzdXBwb3J0IGEKICAgICAgICBkaWZmZXJlbmNlIG1ldGhvZCkuCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBkaWZmZXJlbmNlMSA9IHNldDEuZGlmZmVyZW5jZShzZXQyKQogICAgICAgIGV4Y2VwdCBUeXBlRXJyb3IgYXMgZToKICAgICAgICAgICAgc2VsZi5mYWlsKCdpbnZhbGlkIHR5cGUgd2hlbiBhdHRlbXB0aW5nIHNldCBkaWZmZXJlbmNlOiAlcycgJSBlKQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvciBhcyBlOgogICAgICAgICAgICBzZWxmLmZhaWwoJ2ZpcnN0IGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgc2V0IGRpZmZlcmVuY2U6ICVzJyAlIGUpCgogICAgICAgIHRyeToKICAgICAgICAgICAgZGlmZmVyZW5jZTIgPSBzZXQyLmRpZmZlcmVuY2Uoc2V0MSkKICAgICAgICBleGNlcHQgVHlwZUVycm9yIGFzIGU6CiAgICAgICAgICAgIHNlbGYuZmFpbCgnaW52YWxpZCB0eXBlIHdoZW4gYXR0ZW1wdGluZyBzZXQgZGlmZmVyZW5jZTogJXMnICUgZSkKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3IgYXMgZToKICAgICAgICAgICAgc2VsZi5mYWlsKCdzZWNvbmQgYXJndW1lbnQgZG9lcyBub3Qgc3VwcG9ydCBzZXQgZGlmZmVyZW5jZTogJXMnICUgZSkKCiAgICAgICAgaWYgbm90IChkaWZmZXJlbmNlMSBvciBkaWZmZXJlbmNlMik6CiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBsaW5lcyA9IFtdCiAgICAgICAgaWYgZGlmZmVyZW5jZTE6CiAgICAgICAgICAgIGxpbmVzLmFwcGVuZCgnSXRlbXMgaW4gdGhlIGZpcnN0IHNldCBidXQgbm90IHRoZSBzZWNvbmQ6JykKICAgICAgICAgICAgZm9yIGl0ZW0gaW4gZGlmZmVyZW5jZTE6CiAgICAgICAgICAgICAgICBsaW5lcy5hcHBlbmQocmVwcihpdGVtKSkKICAgICAgICBpZiBkaWZmZXJlbmNlMjoKICAgICAgICAgICAgbGluZXMuYXBwZW5kKCdJdGVtcyBpbiB0aGUgc2Vjb25kIHNldCBidXQgbm90IHRoZSBmaXJzdDonKQogICAgICAgICAgICBmb3IgaXRlbSBpbiBkaWZmZXJlbmNlMjoKICAgICAgICAgICAgICAgIGxpbmVzLmFwcGVuZChyZXByKGl0ZW0pKQoKICAgICAgICBzdGFuZGFyZE1zZyA9ICdcbicuam9pbihsaW5lcykKICAgICAgICBzZWxmLmZhaWwoc2VsZi5fZm9ybWF0TWVzc2FnZShtc2csIHN0YW5kYXJkTXNnKSkKCiAgICBkZWYgYXNzZXJ0SW4oc2VsZiwgbWVtYmVyLCBjb250YWluZXIsIG1zZz1Ob25lKToKICAgICAgICAiIiJKdXN0IGxpa2Ugc2VsZi5hc3NlcnRUcnVlKGEgaW4gYiksIGJ1dCB3aXRoIGEgbmljZXIgZGVmYXVsdCBtZXNzYWdlLiIiIgogICAgICAgIGlmIG1lbWJlciBub3QgaW4gY29udGFpbmVyOgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICclcyBub3QgZm91bmQgaW4gJXMnICUgKHNhZmVfcmVwcihtZW1iZXIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVfcmVwcihjb250YWluZXIpKQogICAgICAgICAgICBzZWxmLmZhaWwoc2VsZi5fZm9ybWF0TWVzc2FnZShtc2csIHN0YW5kYXJkTXNnKSkKCiAgICBkZWYgYXNzZXJ0Tm90SW4oc2VsZiwgbWVtYmVyLCBjb250YWluZXIsIG1zZz1Ob25lKToKICAgICAgICAiIiJKdXN0IGxpa2Ugc2VsZi5hc3NlcnRUcnVlKGEgbm90IGluIGIpLCBidXQgd2l0aCBhIG5pY2VyIGRlZmF1bHQgbWVzc2FnZS4iIiIKICAgICAgICBpZiBtZW1iZXIgaW4gY29udGFpbmVyOgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICclcyB1bmV4cGVjdGVkbHkgZm91bmQgaW4gJXMnICUgKHNhZmVfcmVwcihtZW1iZXIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhZmVfcmVwcihjb250YWluZXIpKQogICAgICAgICAgICBzZWxmLmZhaWwoc2VsZi5fZm9ybWF0TWVzc2FnZShtc2csIHN0YW5kYXJkTXNnKSkKCiAgICBkZWYgYXNzZXJ0SXMoc2VsZiwgZXhwcjEsIGV4cHIyLCBtc2c9Tm9uZSk6CiAgICAgICAgIiIiSnVzdCBsaWtlIHNlbGYuYXNzZXJ0VHJ1ZShhIGlzIGIpLCBidXQgd2l0aCBhIG5pY2VyIGRlZmF1bHQgbWVzc2FnZS4iIiIKICAgICAgICBpZiBleHByMSBpcyBub3QgZXhwcjI6CiAgICAgICAgICAgIHN0YW5kYXJkTXNnID0gJyVzIGlzIG5vdCAlcycgJSAoc2FmZV9yZXByKGV4cHIxKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9yZXByKGV4cHIyKSkKICAgICAgICAgICAgc2VsZi5mYWlsKHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykpCgogICAgZGVmIGFzc2VydElzTm90KHNlbGYsIGV4cHIxLCBleHByMiwgbXNnPU5vbmUpOgogICAgICAgICIiIkp1c3QgbGlrZSBzZWxmLmFzc2VydFRydWUoYSBpcyBub3QgYiksIGJ1dCB3aXRoIGEgbmljZXIgZGVmYXVsdCBtZXNzYWdlLiIiIgogICAgICAgIGlmIGV4cHIxIGlzIGV4cHIyOgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICd1bmV4cGVjdGVkbHkgaWRlbnRpY2FsOiAlcycgJSAoc2FmZV9yZXByKGV4cHIxKSwpCiAgICAgICAgICAgIHNlbGYuZmFpbChzZWxmLl9mb3JtYXRNZXNzYWdlKG1zZywgc3RhbmRhcmRNc2cpKQoKICAgIGRlZiBhc3NlcnREaWN0RXF1YWwoc2VsZiwgZDEsIGQyLCBtc2c9Tm9uZSk6CiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKGQxLCBkaWN0LCAnRmlyc3QgYXJndW1lbnQgaXMgbm90IGEgZGljdGlvbmFyeScpCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKGQyLCBkaWN0LCAnU2Vjb25kIGFyZ3VtZW50IGlzIG5vdCBhIGRpY3Rpb25hcnknKQoKICAgICAgICBpZiBkMSAhPSBkMjoKICAgICAgICAgICAgc3RhbmRhcmRNc2cgPSAnJXMgIT0gJXMnICUgKHNhZmVfcmVwcihkMSwgVHJ1ZSksIHNhZmVfcmVwcihkMiwgVHJ1ZSkpCiAgICAgICAgICAgIGRpZmYgPSAoJ1xuJyArICdcbicuam9pbihkaWZmbGliLm5kaWZmKAogICAgICAgICAgICAgICAgICAgICAgICAgICBwcHJpbnQucGZvcm1hdChkMSkuc3BsaXRsaW5lcygpLAogICAgICAgICAgICAgICAgICAgICAgICAgICBwcHJpbnQucGZvcm1hdChkMikuc3BsaXRsaW5lcygpKSkpCiAgICAgICAgICAgIHN0YW5kYXJkTXNnID0gc2VsZi5fdHJ1bmNhdGVNZXNzYWdlKHN0YW5kYXJkTXNnLCBkaWZmKQogICAgICAgICAgICBzZWxmLmZhaWwoc2VsZi5fZm9ybWF0TWVzc2FnZShtc2csIHN0YW5kYXJkTXNnKSkKCiAgICBkZWYgYXNzZXJ0RGljdENvbnRhaW5zU3Vic2V0KHNlbGYsIHN1YnNldCwgZGljdGlvbmFyeSwgbXNnPU5vbmUpOgogICAgICAgICIiIkNoZWNrcyB3aGV0aGVyIGRpY3Rpb25hcnkgaXMgYSBzdXBlcnNldCBvZiBzdWJzZXQuIiIiCiAgICAgICAgd2FybmluZ3Mud2FybignYXNzZXJ0RGljdENvbnRhaW5zU3Vic2V0IGlzIGRlcHJlY2F0ZWQnLAogICAgICAgICAgICAgICAgICAgICAgRGVwcmVjYXRpb25XYXJuaW5nKQogICAgICAgIG1pc3NpbmcgPSBbXQogICAgICAgIG1pc21hdGNoZWQgPSBbXQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIHN1YnNldC5pdGVtcygpOgogICAgICAgICAgICBpZiBrZXkgbm90IGluIGRpY3Rpb25hcnk6CiAgICAgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChrZXkpCiAgICAgICAgICAgIGVsaWYgdmFsdWUgIT0gZGljdGlvbmFyeVtrZXldOgogICAgICAgICAgICAgICAgbWlzbWF0Y2hlZC5hcHBlbmQoJyVzLCBleHBlY3RlZDogJXMsIGFjdHVhbDogJXMnICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzYWZlX3JlcHIoa2V5KSwgc2FmZV9yZXByKHZhbHVlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWZlX3JlcHIoZGljdGlvbmFyeVtrZXldKSkpCgogICAgICAgIGlmIG5vdCAobWlzc2luZyBvciBtaXNtYXRjaGVkKToKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgIHN0YW5kYXJkTXNnID0gJycKICAgICAgICBpZiBtaXNzaW5nOgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICdNaXNzaW5nOiAlcycgJSAnLCcuam9pbihzYWZlX3JlcHIobSkgZm9yIG0gaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3NpbmcpCiAgICAgICAgaWYgbWlzbWF0Y2hlZDoKICAgICAgICAgICAgaWYgc3RhbmRhcmRNc2c6CiAgICAgICAgICAgICAgICBzdGFuZGFyZE1zZyArPSAnOyAnCiAgICAgICAgICAgIHN0YW5kYXJkTXNnICs9ICdNaXNtYXRjaGVkIHZhbHVlczogJXMnICUgJywnLmpvaW4obWlzbWF0Y2hlZCkKCiAgICAgICAgc2VsZi5mYWlsKHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykpCgoKICAgIGRlZiBhc3NlcnRDb3VudEVxdWFsKHNlbGYsIGZpcnN0LCBzZWNvbmQsIG1zZz1Ob25lKToKICAgICAgICAiIiJBbiB1bm9yZGVyZWQgc2VxdWVuY2UgY29tcGFyaXNvbiBhc3NlcnRpbmcgdGhhdCB0aGUgc2FtZSBlbGVtZW50cywKICAgICAgICByZWdhcmRsZXNzIG9mIG9yZGVyLiAgSWYgdGhlIHNhbWUgZWxlbWVudCBvY2N1cnMgbW9yZSB0aGFuIG9uY2UsCiAgICAgICAgaXQgdmVyaWZpZXMgdGhhdCB0aGUgZWxlbWVudHMgb2NjdXIgdGhlIHNhbWUgbnVtYmVyIG9mIHRpbWVzLgoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChDb3VudGVyKGxpc3QoZmlyc3QpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3VudGVyKGxpc3Qoc2Vjb25kKSkpCgogICAgICAgICBFeGFtcGxlOgogICAgICAgICAgICAtIFswLCAxLCAxXSBhbmQgWzEsIDAsIDFdIGNvbXBhcmUgZXF1YWwuCiAgICAgICAgICAgIC0gWzAsIDAsIDFdIGFuZCBbMCwgMV0gY29tcGFyZSB1bmVxdWFsLgoKICAgICAgICAiIiIKICAgICAgICBmaXJzdF9zZXEsIHNlY29uZF9zZXEgPSBsaXN0KGZpcnN0KSwgbGlzdChzZWNvbmQpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBmaXJzdCA9IGNvbGxlY3Rpb25zLkNvdW50ZXIoZmlyc3Rfc2VxKQogICAgICAgICAgICBzZWNvbmQgPSBjb2xsZWN0aW9ucy5Db3VudGVyKHNlY29uZF9zZXEpCiAgICAgICAgZXhjZXB0IFR5cGVFcnJvcjoKICAgICAgICAgICAgIyBIYW5kbGUgY2FzZSB3aXRoIHVuaGFzaGFibGUgZWxlbWVudHMKICAgICAgICAgICAgZGlmZmVyZW5jZXMgPSBfY291bnRfZGlmZl9hbGxfcHVycG9zZShmaXJzdF9zZXEsIHNlY29uZF9zZXEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgZmlyc3QgPT0gc2Vjb25kOgogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIGRpZmZlcmVuY2VzID0gX2NvdW50X2RpZmZfaGFzaGFibGUoZmlyc3Rfc2VxLCBzZWNvbmRfc2VxKQoKICAgICAgICBpZiBkaWZmZXJlbmNlczoKICAgICAgICAgICAgc3RhbmRhcmRNc2cgPSAnRWxlbWVudCBjb3VudHMgd2VyZSBub3QgZXF1YWw6XG4nCiAgICAgICAgICAgIGxpbmVzID0gWydGaXJzdCBoYXMgJWQsIFNlY29uZCBoYXMgJWQ6ICAlcicgJSBkaWZmIGZvciBkaWZmIGluIGRpZmZlcmVuY2VzXQogICAgICAgICAgICBkaWZmTXNnID0gJ1xuJy5qb2luKGxpbmVzKQogICAgICAgICAgICBzdGFuZGFyZE1zZyA9IHNlbGYuX3RydW5jYXRlTWVzc2FnZShzdGFuZGFyZE1zZywgZGlmZk1zZykKICAgICAgICAgICAgbXNnID0gc2VsZi5fZm9ybWF0TWVzc2FnZShtc2csIHN0YW5kYXJkTXNnKQogICAgICAgICAgICBzZWxmLmZhaWwobXNnKQoKICAgIGRlZiBhc3NlcnRNdWx0aUxpbmVFcXVhbChzZWxmLCBmaXJzdCwgc2Vjb25kLCBtc2c9Tm9uZSk6CiAgICAgICAgIiIiQXNzZXJ0IHRoYXQgdHdvIG11bHRpLWxpbmUgc3RyaW5ncyBhcmUgZXF1YWwuIiIiCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKGZpcnN0LCBzdHIsICdGaXJzdCBhcmd1bWVudCBpcyBub3QgYSBzdHJpbmcnKQogICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZShzZWNvbmQsIHN0ciwgJ1NlY29uZCBhcmd1bWVudCBpcyBub3QgYSBzdHJpbmcnKQoKICAgICAgICBpZiBmaXJzdCAhPSBzZWNvbmQ6CiAgICAgICAgICAgICMgZG9uJ3QgdXNlIGRpZmZsaWIgaWYgdGhlIHN0cmluZ3MgYXJlIHRvbyBsb25nCiAgICAgICAgICAgIGlmIChsZW4oZmlyc3QpID4gc2VsZi5fZGlmZlRocmVzaG9sZCBvcgogICAgICAgICAgICAgICAgbGVuKHNlY29uZCkgPiBzZWxmLl9kaWZmVGhyZXNob2xkKToKICAgICAgICAgICAgICAgIHNlbGYuX2Jhc2VBc3NlcnRFcXVhbChmaXJzdCwgc2Vjb25kLCBtc2cpCiAgICAgICAgICAgIGZpcnN0bGluZXMgPSBmaXJzdC5zcGxpdGxpbmVzKGtlZXBlbmRzPVRydWUpCiAgICAgICAgICAgIHNlY29uZGxpbmVzID0gc2Vjb25kLnNwbGl0bGluZXMoa2VlcGVuZHM9VHJ1ZSkKICAgICAgICAgICAgaWYgbGVuKGZpcnN0bGluZXMpID09IDEgYW5kIGZpcnN0LnN0cmlwKCdcclxuJykgPT0gZmlyc3Q6CiAgICAgICAgICAgICAgICBmaXJzdGxpbmVzID0gW2ZpcnN0ICsgJ1xuJ10KICAgICAgICAgICAgICAgIHNlY29uZGxpbmVzID0gW3NlY29uZCArICdcbiddCiAgICAgICAgICAgIHN0YW5kYXJkTXNnID0gJyVzICE9ICVzJyAlIChzYWZlX3JlcHIoZmlyc3QsIFRydWUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9yZXByKHNlY29uZCwgVHJ1ZSkpCiAgICAgICAgICAgIGRpZmYgPSAnXG4nICsgJycuam9pbihkaWZmbGliLm5kaWZmKGZpcnN0bGluZXMsIHNlY29uZGxpbmVzKSkKICAgICAgICAgICAgc3RhbmRhcmRNc2cgPSBzZWxmLl90cnVuY2F0ZU1lc3NhZ2Uoc3RhbmRhcmRNc2csIGRpZmYpCiAgICAgICAgICAgIHNlbGYuZmFpbChzZWxmLl9mb3JtYXRNZXNzYWdlKG1zZywgc3RhbmRhcmRNc2cpKQoKICAgIGRlZiBhc3NlcnRMZXNzKHNlbGYsIGEsIGIsIG1zZz1Ob25lKToKICAgICAgICAiIiJKdXN0IGxpa2Ugc2VsZi5hc3NlcnRUcnVlKGEgPCBiKSwgYnV0IHdpdGggYSBuaWNlciBkZWZhdWx0IG1lc3NhZ2UuIiIiCiAgICAgICAgaWYgbm90IGEgPCBiOgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICclcyBub3QgbGVzcyB0aGFuICVzJyAlIChzYWZlX3JlcHIoYSksIHNhZmVfcmVwcihiKSkKICAgICAgICAgICAgc2VsZi5mYWlsKHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykpCgogICAgZGVmIGFzc2VydExlc3NFcXVhbChzZWxmLCBhLCBiLCBtc2c9Tm9uZSk6CiAgICAgICAgIiIiSnVzdCBsaWtlIHNlbGYuYXNzZXJ0VHJ1ZShhIDw9IGIpLCBidXQgd2l0aCBhIG5pY2VyIGRlZmF1bHQgbWVzc2FnZS4iIiIKICAgICAgICBpZiBub3QgYSA8PSBiOgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICclcyBub3QgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICVzJyAlIChzYWZlX3JlcHIoYSksIHNhZmVfcmVwcihiKSkKICAgICAgICAgICAgc2VsZi5mYWlsKHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykpCgogICAgZGVmIGFzc2VydEdyZWF0ZXIoc2VsZiwgYSwgYiwgbXNnPU5vbmUpOgogICAgICAgICIiIkp1c3QgbGlrZSBzZWxmLmFzc2VydFRydWUoYSA+IGIpLCBidXQgd2l0aCBhIG5pY2VyIGRlZmF1bHQgbWVzc2FnZS4iIiIKICAgICAgICBpZiBub3QgYSA+IGI6CiAgICAgICAgICAgIHN0YW5kYXJkTXNnID0gJyVzIG5vdCBncmVhdGVyIHRoYW4gJXMnICUgKHNhZmVfcmVwcihhKSwgc2FmZV9yZXByKGIpKQogICAgICAgICAgICBzZWxmLmZhaWwoc2VsZi5fZm9ybWF0TWVzc2FnZShtc2csIHN0YW5kYXJkTXNnKSkKCiAgICBkZWYgYXNzZXJ0R3JlYXRlckVxdWFsKHNlbGYsIGEsIGIsIG1zZz1Ob25lKToKICAgICAgICAiIiJKdXN0IGxpa2Ugc2VsZi5hc3NlcnRUcnVlKGEgPj0gYiksIGJ1dCB3aXRoIGEgbmljZXIgZGVmYXVsdCBtZXNzYWdlLiIiIgogICAgICAgIGlmIG5vdCBhID49IGI6CiAgICAgICAgICAgIHN0YW5kYXJkTXNnID0gJyVzIG5vdCBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJXMnICUgKHNhZmVfcmVwcihhKSwgc2FmZV9yZXByKGIpKQogICAgICAgICAgICBzZWxmLmZhaWwoc2VsZi5fZm9ybWF0TWVzc2FnZShtc2csIHN0YW5kYXJkTXNnKSkKCiAgICBkZWYgYXNzZXJ0SXNOb25lKHNlbGYsIG9iaiwgbXNnPU5vbmUpOgogICAgICAgICIiIlNhbWUgYXMgc2VsZi5hc3NlcnRUcnVlKG9iaiBpcyBOb25lKSwgd2l0aCBhIG5pY2VyIGRlZmF1bHQgbWVzc2FnZS4iIiIKICAgICAgICBpZiBvYmogaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHN0YW5kYXJkTXNnID0gJyVzIGlzIG5vdCBOb25lJyAlIChzYWZlX3JlcHIob2JqKSwpCiAgICAgICAgICAgIHNlbGYuZmFpbChzZWxmLl9mb3JtYXRNZXNzYWdlKG1zZywgc3RhbmRhcmRNc2cpKQoKICAgIGRlZiBhc3NlcnRJc05vdE5vbmUoc2VsZiwgb2JqLCBtc2c9Tm9uZSk6CiAgICAgICAgIiIiSW5jbHVkZWQgZm9yIHN5bW1ldHJ5IHdpdGggYXNzZXJ0SXNOb25lLiIiIgogICAgICAgIGlmIG9iaiBpcyBOb25lOgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICd1bmV4cGVjdGVkbHkgTm9uZScKICAgICAgICAgICAgc2VsZi5mYWlsKHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykpCgogICAgZGVmIGFzc2VydElzSW5zdGFuY2Uoc2VsZiwgb2JqLCBjbHMsIG1zZz1Ob25lKToKICAgICAgICAiIiJTYW1lIGFzIHNlbGYuYXNzZXJ0VHJ1ZShpc2luc3RhbmNlKG9iaiwgY2xzKSksIHdpdGggYSBuaWNlcgogICAgICAgIGRlZmF1bHQgbWVzc2FnZS4iIiIKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvYmosIGNscyk6CiAgICAgICAgICAgIHN0YW5kYXJkTXNnID0gJyVzIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiAlcicgJSAoc2FmZV9yZXByKG9iaiksIGNscykKICAgICAgICAgICAgc2VsZi5mYWlsKHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykpCgogICAgZGVmIGFzc2VydE5vdElzSW5zdGFuY2Uoc2VsZiwgb2JqLCBjbHMsIG1zZz1Ob25lKToKICAgICAgICAiIiJJbmNsdWRlZCBmb3Igc3ltbWV0cnkgd2l0aCBhc3NlcnRJc0luc3RhbmNlLiIiIgogICAgICAgIGlmIGlzaW5zdGFuY2Uob2JqLCBjbHMpOgogICAgICAgICAgICBzdGFuZGFyZE1zZyA9ICclcyBpcyBhbiBpbnN0YW5jZSBvZiAlcicgJSAoc2FmZV9yZXByKG9iaiksIGNscykKICAgICAgICAgICAgc2VsZi5mYWlsKHNlbGYuX2Zvcm1hdE1lc3NhZ2UobXNnLCBzdGFuZGFyZE1zZykpCgogICAgZGVmIGFzc2VydFJhaXNlc1JlZ2V4KHNlbGYsIGV4cGVjdGVkX2V4Y2VwdGlvbiwgZXhwZWN0ZWRfcmVnZXgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGFibGVfb2JqPU5vbmUsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIiIiQXNzZXJ0cyB0aGF0IHRoZSBtZXNzYWdlIGluIGEgcmFpc2VkIGV4Y2VwdGlvbiBtYXRjaGVzIGEgcmVnZXguCgogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGV4cGVjdGVkX2V4Y2VwdGlvbjogRXhjZXB0aW9uIGNsYXNzIGV4cGVjdGVkIHRvIGJlIHJhaXNlZC4KICAgICAgICAgICAgZXhwZWN0ZWRfcmVnZXg6IFJlZ2V4IChyZSBwYXR0ZXJuIG9iamVjdCBvciBzdHJpbmcpIGV4cGVjdGVkCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgZm91bmQgaW4gZXJyb3IgbWVzc2FnZS4KICAgICAgICAgICAgY2FsbGFibGVfb2JqOiBGdW5jdGlvbiB0byBiZSBjYWxsZWQuCiAgICAgICAgICAgIG1zZzogT3B0aW9uYWwgbWVzc2FnZSB1c2VkIGluIGNhc2Ugb2YgZmFpbHVyZS4gQ2FuIG9ubHkgYmUgdXNlZAogICAgICAgICAgICAgICAgICAgIHdoZW4gYXNzZXJ0UmFpc2VzUmVnZXggaXMgdXNlZCBhcyBhIGNvbnRleHQgbWFuYWdlci4KICAgICAgICAgICAgYXJnczogRXh0cmEgYXJncy4KICAgICAgICAgICAga3dhcmdzOiBFeHRyYSBrd2FyZ3MuCiAgICAgICAgIiIiCiAgICAgICAgY29udGV4dCA9IF9Bc3NlcnRSYWlzZXNDb250ZXh0KGV4cGVjdGVkX2V4Y2VwdGlvbiwgc2VsZiwgY2FsbGFibGVfb2JqLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZF9yZWdleCkKCiAgICAgICAgcmV0dXJuIGNvbnRleHQuaGFuZGxlKCdhc3NlcnRSYWlzZXNSZWdleCcsIGNhbGxhYmxlX29iaiwgYXJncywga3dhcmdzKQoKICAgIGRlZiBhc3NlcnRXYXJuc1JlZ2V4KHNlbGYsIGV4cGVjdGVkX3dhcm5pbmcsIGV4cGVjdGVkX3JlZ2V4LAogICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGFibGVfb2JqPU5vbmUsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgIiIiQXNzZXJ0cyB0aGF0IHRoZSBtZXNzYWdlIGluIGEgdHJpZ2dlcmVkIHdhcm5pbmcgbWF0Y2hlcyBhIHJlZ2V4cC4KICAgICAgICBCYXNpYyBmdW5jdGlvbmluZyBpcyBzaW1pbGFyIHRvIGFzc2VydFdhcm5zKCkgd2l0aCB0aGUgYWRkaXRpb24KICAgICAgICB0aGF0IG9ubHkgd2FybmluZ3Mgd2hvc2UgbWVzc2FnZXMgYWxzbyBtYXRjaCB0aGUgcmVndWxhciBleHByZXNzaW9uCiAgICAgICAgYXJlIGNvbnNpZGVyZWQgc3VjY2Vzc2Z1bCBtYXRjaGVzLgoKICAgICAgICBBcmdzOgogICAgICAgICAgICBleHBlY3RlZF93YXJuaW5nOiBXYXJuaW5nIGNsYXNzIGV4cGVjdGVkIHRvIGJlIHRyaWdnZXJlZC4KICAgICAgICAgICAgZXhwZWN0ZWRfcmVnZXg6IFJlZ2V4IChyZSBwYXR0ZXJuIG9iamVjdCBvciBzdHJpbmcpIGV4cGVjdGVkCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgZm91bmQgaW4gZXJyb3IgbWVzc2FnZS4KICAgICAgICAgICAgY2FsbGFibGVfb2JqOiBGdW5jdGlvbiB0byBiZSBjYWxsZWQuCiAgICAgICAgICAgIG1zZzogT3B0aW9uYWwgbWVzc2FnZSB1c2VkIGluIGNhc2Ugb2YgZmFpbHVyZS4gQ2FuIG9ubHkgYmUgdXNlZAogICAgICAgICAgICAgICAgICAgIHdoZW4gYXNzZXJ0V2FybnNSZWdleCBpcyB1c2VkIGFzIGEgY29udGV4dCBtYW5hZ2VyLgogICAgICAgICAgICBhcmdzOiBFeHRyYSBhcmdzLgogICAgICAgICAgICBrd2FyZ3M6IEV4dHJhIGt3YXJncy4KICAgICAgICAiIiIKICAgICAgICBjb250ZXh0ID0gX0Fzc2VydFdhcm5zQ29udGV4dChleHBlY3RlZF93YXJuaW5nLCBzZWxmLCBjYWxsYWJsZV9vYmosCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWRfcmVnZXgpCiAgICAgICAgcmV0dXJuIGNvbnRleHQuaGFuZGxlKCdhc3NlcnRXYXJuc1JlZ2V4JywgY2FsbGFibGVfb2JqLCBhcmdzLCBrd2FyZ3MpCgogICAgZGVmIGFzc2VydFJlZ2V4KHNlbGYsIHRleHQsIGV4cGVjdGVkX3JlZ2V4LCBtc2c9Tm9uZSk6CiAgICAgICAgIiIiRmFpbCB0aGUgdGVzdCB1bmxlc3MgdGhlIHRleHQgbWF0Y2hlcyB0aGUgcmVndWxhciBleHByZXNzaW9uLiIiIgogICAgICAgIGlmIGlzaW5zdGFuY2UoZXhwZWN0ZWRfcmVnZXgsIChzdHIsIGJ5dGVzKSk6CiAgICAgICAgICAgIGFzc2VydCBleHBlY3RlZF9yZWdleCwgImV4cGVjdGVkX3JlZ2V4IG11c3Qgbm90IGJlIGVtcHR5LiIKICAgICAgICAgICAgZXhwZWN0ZWRfcmVnZXggPSByZS5jb21waWxlKGV4cGVjdGVkX3JlZ2V4KQogICAgICAgIGlmIG5vdCBleHBlY3RlZF9yZWdleC5zZWFyY2godGV4dCk6CiAgICAgICAgICAgIG1zZyA9IG1zZyBvciAiUmVnZXggZGlkbid0IG1hdGNoIgogICAgICAgICAgICBtc2cgPSAnJXM6ICVyIG5vdCBmb3VuZCBpbiAlcicgJSAobXNnLCBleHBlY3RlZF9yZWdleC5wYXR0ZXJuLCB0ZXh0KQogICAgICAgICAgICByYWlzZSBzZWxmLmZhaWx1cmVFeGNlcHRpb24obXNnKQoKICAgIGRlZiBhc3NlcnROb3RSZWdleChzZWxmLCB0ZXh0LCB1bmV4cGVjdGVkX3JlZ2V4LCBtc2c9Tm9uZSk6CiAgICAgICAgIiIiRmFpbCB0aGUgdGVzdCBpZiB0aGUgdGV4dCBtYXRjaGVzIHRoZSByZWd1bGFyIGV4cHJlc3Npb24uIiIiCiAgICAgICAgaWYgaXNpbnN0YW5jZSh1bmV4cGVjdGVkX3JlZ2V4LCAoc3RyLCBieXRlcykpOgogICAgICAgICAgICB1bmV4cGVjdGVkX3JlZ2V4ID0gcmUuY29tcGlsZSh1bmV4cGVjdGVkX3JlZ2V4KQogICAgICAgIG1hdGNoID0gdW5leHBlY3RlZF9yZWdleC5zZWFyY2godGV4dCkKICAgICAgICBpZiBtYXRjaDoKICAgICAgICAgICAgbXNnID0gbXNnIG9yICJSZWdleCBtYXRjaGVkIgogICAgICAgICAgICBtc2cgPSAnJXM6ICVyIG1hdGNoZXMgJXIgaW4gJXInICUgKG1zZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0W21hdGNoLnN0YXJ0KCk6bWF0Y2guZW5kKCldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZXhwZWN0ZWRfcmVnZXgucGF0dGVybiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0KQogICAgICAgICAgICByYWlzZSBzZWxmLmZhaWx1cmVFeGNlcHRpb24obXNnKQoKCiAgICBkZWYgX2RlcHJlY2F0ZShvcmlnaW5hbF9mdW5jKToKICAgICAgICBkZWYgZGVwcmVjYXRlZF9mdW5jKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4oCiAgICAgICAgICAgICAgICAnUGxlYXNlIHVzZSB7MH0gaW5zdGVhZC4nLmZvcm1hdChvcmlnaW5hbF9mdW5jLl9fbmFtZV9fKSwKICAgICAgICAgICAgICAgIERlcHJlY2F0aW9uV2FybmluZywgMikKICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsX2Z1bmMoKmFyZ3MsICoqa3dhcmdzKQogICAgICAgIHJldHVybiBkZXByZWNhdGVkX2Z1bmMKCiAgICAjIHNlZSAjOTQyNAogICAgZmFpbFVubGVzc0VxdWFsID0gYXNzZXJ0RXF1YWxzID0gX2RlcHJlY2F0ZShhc3NlcnRFcXVhbCkKICAgIGZhaWxJZkVxdWFsID0gYXNzZXJ0Tm90RXF1YWxzID0gX2RlcHJlY2F0ZShhc3NlcnROb3RFcXVhbCkKICAgIGZhaWxVbmxlc3NBbG1vc3RFcXVhbCA9IGFzc2VydEFsbW9zdEVxdWFscyA9IF9kZXByZWNhdGUoYXNzZXJ0QWxtb3N0RXF1YWwpCiAgICBmYWlsSWZBbG1vc3RFcXVhbCA9IGFzc2VydE5vdEFsbW9zdEVxdWFscyA9IF9kZXByZWNhdGUoYXNzZXJ0Tm90QWxtb3N0RXF1YWwpCiAgICBmYWlsVW5sZXNzID0gYXNzZXJ0XyA9IF9kZXByZWNhdGUoYXNzZXJ0VHJ1ZSkKICAgIGZhaWxVbmxlc3NSYWlzZXMgPSBfZGVwcmVjYXRlKGFzc2VydFJhaXNlcykKICAgIGZhaWxJZiA9IF9kZXByZWNhdGUoYXNzZXJ0RmFsc2UpCiAgICBhc3NlcnRSYWlzZXNSZWdleHAgPSBfZGVwcmVjYXRlKGFzc2VydFJhaXNlc1JlZ2V4KQogICAgYXNzZXJ0UmVnZXhwTWF0Y2hlcyA9IF9kZXByZWNhdGUoYXNzZXJ0UmVnZXgpCgoKCmNsYXNzIEZ1bmN0aW9uVGVzdENhc2UoVGVzdENhc2UpOgogICAgIiIiQSB0ZXN0IGNhc2UgdGhhdCB3cmFwcyBhIHRlc3QgZnVuY3Rpb24uCgogICAgVGhpcyBpcyB1c2VmdWwgZm9yIHNsaXBwaW5nIHByZS1leGlzdGluZyB0ZXN0IGZ1bmN0aW9ucyBpbnRvIHRoZQogICAgdW5pdHRlc3QgZnJhbWV3b3JrLiBPcHRpb25hbGx5LCBzZXQtdXAgYW5kIHRpZHktdXAgZnVuY3Rpb25zIGNhbiBiZQogICAgc3VwcGxpZWQuIEFzIHdpdGggVGVzdENhc2UsIHRoZSB0aWR5LXVwICgndGVhckRvd24nKSBmdW5jdGlvbiB3aWxsCiAgICBhbHdheXMgYmUgY2FsbGVkIGlmIHRoZSBzZXQtdXAgKCdzZXRVcCcpIGZ1bmN0aW9uIHJhbiBzdWNjZXNzZnVsbHkuCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgdGVzdEZ1bmMsIHNldFVwPU5vbmUsIHRlYXJEb3duPU5vbmUsIGRlc2NyaXB0aW9uPU5vbmUpOgogICAgICAgIHN1cGVyKEZ1bmN0aW9uVGVzdENhc2UsIHNlbGYpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLl9zZXRVcEZ1bmMgPSBzZXRVcAogICAgICAgIHNlbGYuX3RlYXJEb3duRnVuYyA9IHRlYXJEb3duCiAgICAgICAgc2VsZi5fdGVzdEZ1bmMgPSB0ZXN0RnVuYwogICAgICAgIHNlbGYuX2Rlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24KCiAgICBkZWYgc2V0VXAoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fc2V0VXBGdW5jIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLl9zZXRVcEZ1bmMoKQoKICAgIGRlZiB0ZWFyRG93bihzZWxmKToKICAgICAgICBpZiBzZWxmLl90ZWFyRG93bkZ1bmMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYuX3RlYXJEb3duRnVuYygpCgogICAgZGVmIHJ1blRlc3Qoc2VsZik6CiAgICAgICAgc2VsZi5fdGVzdEZ1bmMoKQoKICAgIGRlZiBpZChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fdGVzdEZ1bmMuX19uYW1lX18KCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgc2VsZi5fX2NsYXNzX18pOgogICAgICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiAgICAgICAgcmV0dXJuIHNlbGYuX3NldFVwRnVuYyA9PSBvdGhlci5fc2V0VXBGdW5jIGFuZCBcCiAgICAgICAgICAgICAgIHNlbGYuX3RlYXJEb3duRnVuYyA9PSBvdGhlci5fdGVhckRvd25GdW5jIGFuZCBcCiAgICAgICAgICAgICAgIHNlbGYuX3Rlc3RGdW5jID09IG90aGVyLl90ZXN0RnVuYyBhbmQgXAogICAgICAgICAgICAgICBzZWxmLl9kZXNjcmlwdGlvbiA9PSBvdGhlci5fZGVzY3JpcHRpb24KCiAgICBkZWYgX19uZV9fKHNlbGYsIG90aGVyKToKICAgICAgICByZXR1cm4gbm90IHNlbGYgPT0gb3RoZXIKCiAgICBkZWYgX19oYXNoX18oc2VsZik6CiAgICAgICAgcmV0dXJuIGhhc2goKHR5cGUoc2VsZiksIHNlbGYuX3NldFVwRnVuYywgc2VsZi5fdGVhckRvd25GdW5jLAogICAgICAgICAgICAgICAgICAgICBzZWxmLl90ZXN0RnVuYywgc2VsZi5fZGVzY3JpcHRpb24pKQoKICAgIGRlZiBfX3N0cl9fKHNlbGYpOgogICAgICAgIHJldHVybiAiJXMgKCVzKSIgJSAoc3RyY2xhc3Moc2VsZi5fX2NsYXNzX18pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fdGVzdEZ1bmMuX19uYW1lX18pCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgICAgIHJldHVybiAiPCVzIHRlYz0lcz4iICUgKHN0cmNsYXNzKHNlbGYuX19jbGFzc19fKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3Rlc3RGdW5jKQoKICAgIGRlZiBzaG9ydERlc2NyaXB0aW9uKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX2Rlc2NyaXB0aW9uIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fZGVzY3JpcHRpb24KICAgICAgICBkb2MgPSBzZWxmLl90ZXN0RnVuYy5fX2RvY19fCiAgICAgICAgcmV0dXJuIGRvYyBhbmQgZG9jLnNwbGl0KCJcbiIpWzBdLnN0cmlwKCkgb3IgTm9uZQo=',
'/Lib/unittest/main.py':'',
'/Lib/unittest/test/support.py':'aW1wb3J0IHVuaXR0ZXN0DQoNCg0KY2xhc3MgVGVzdEVxdWFsaXR5KG9iamVjdCk6DQogICAgIiIiVXNlZCBhcyBhIG1peGluIGZvciBUZXN0Q2FzZSIiIg0KDQogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2VxX18gaW1wbGVtZW50YXRpb24NCiAgICBkZWYgdGVzdF9lcShzZWxmKToNCiAgICAgICAgZm9yIG9ial8xLCBvYmpfMiBpbiBzZWxmLmVxX3BhaXJzOg0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChvYmpfMSwgb2JqXzIpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG9ial8yLCBvYmpfMSkNCg0KICAgICMgQ2hlY2sgZm9yIGEgdmFsaWQgX19uZV9fIGltcGxlbWVudGF0aW9uDQogICAgZGVmIHRlc3RfbmUoc2VsZik6DQogICAgICAgIGZvciBvYmpfMSwgb2JqXzIgaW4gc2VsZi5uZV9wYWlyczoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwob2JqXzEsIG9ial8yKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnROb3RFcXVhbChvYmpfMiwgb2JqXzEpDQoNCmNsYXNzIFRlc3RIYXNoaW5nKG9iamVjdCk6DQogICAgIiIiVXNlZCBhcyBhIG1peGluIGZvciBUZXN0Q2FzZSIiIg0KDQogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2hhc2hfXyBpbXBsZW1lbnRhdGlvbg0KICAgIGRlZiB0ZXN0X2hhc2goc2VsZik6DQogICAgICAgIGZvciBvYmpfMSwgb2JqXzIgaW4gc2VsZi5lcV9wYWlyczoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBpZiBub3QgaGFzaChvYmpfMSkgPT0gaGFzaChvYmpfMik6DQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiJXIgYW5kICVyIGRvIG5vdCBoYXNoIGVxdWFsIiAlIChvYmpfMSwgb2JqXzIpKQ0KICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0Og0KICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgc2VsZi5mYWlsKCJQcm9ibGVtIGhhc2hpbmcgJXIgYW5kICVyOiAlcyIgJSAob2JqXzEsIG9ial8yLCBlKSkNCg0KICAgICAgICBmb3Igb2JqXzEsIG9ial8yIGluIHNlbGYubmVfcGFpcnM6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgaWYgaGFzaChvYmpfMSkgPT0gaGFzaChvYmpfMik6DQogICAgICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiJXMgYW5kICVzIGhhc2ggZXF1YWwsIGJ1dCBzaG91bGRuJ3QiICUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvYmpfMSwgb2JqXzIpKQ0KICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0Og0KICAgICAgICAgICAgICAgIHJhaXNlDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgc2VsZi5mYWlsKCJQcm9ibGVtIGhhc2hpbmcgJXMgYW5kICVzOiAlcyIgJSAob2JqXzEsIG9ial8yLCBlKSkNCg0KDQpjbGFzcyBMb2dnaW5nUmVzdWx0KHVuaXR0ZXN0LlRlc3RSZXN1bHQpOg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBsb2cpOg0KICAgICAgICBzZWxmLl9ldmVudHMgPSBsb2cNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygpDQoNCiAgICBkZWYgc3RhcnRUZXN0KHNlbGYsIHRlc3QpOg0KICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdzdGFydFRlc3QnKQ0KICAgICAgICBzdXBlcigpLnN0YXJ0VGVzdCh0ZXN0KQ0KDQogICAgZGVmIHN0YXJ0VGVzdFJ1bihzZWxmKToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RhcnRUZXN0UnVuJykNCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuc3RhcnRUZXN0UnVuKCkNCg0KICAgIGRlZiBzdG9wVGVzdChzZWxmLCB0ZXN0KToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RvcFRlc3QnKQ0KICAgICAgICBzdXBlcigpLnN0b3BUZXN0KHRlc3QpDQoNCiAgICBkZWYgc3RvcFRlc3RSdW4oc2VsZik6DQogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ3N0b3BUZXN0UnVuJykNCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuc3RvcFRlc3RSdW4oKQ0KDQogICAgZGVmIGFkZEZhaWx1cmUoc2VsZiwgKmFyZ3MpOg0KICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRGYWlsdXJlJykNCiAgICAgICAgc3VwZXIoKS5hZGRGYWlsdXJlKCphcmdzKQ0KDQogICAgZGVmIGFkZFN1Y2Nlc3Moc2VsZiwgKmFyZ3MpOg0KICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRTdWNjZXNzJykNCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuYWRkU3VjY2VzcygqYXJncykNCg0KICAgIGRlZiBhZGRFcnJvcihzZWxmLCAqYXJncyk6DQogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ2FkZEVycm9yJykNCiAgICAgICAgc3VwZXIoKS5hZGRFcnJvcigqYXJncykNCg0KICAgIGRlZiBhZGRTa2lwKHNlbGYsICphcmdzKToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkU2tpcCcpDQogICAgICAgIHN1cGVyKExvZ2dpbmdSZXN1bHQsIHNlbGYpLmFkZFNraXAoKmFyZ3MpDQoNCiAgICBkZWYgYWRkRXhwZWN0ZWRGYWlsdXJlKHNlbGYsICphcmdzKToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRXhwZWN0ZWRGYWlsdXJlJykNCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuYWRkRXhwZWN0ZWRGYWlsdXJlKCphcmdzKQ0KDQogICAgZGVmIGFkZFVuZXhwZWN0ZWRTdWNjZXNzKHNlbGYsICphcmdzKToNCiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkVW5leHBlY3RlZFN1Y2Nlc3MnKQ0KICAgICAgICBzdXBlcihMb2dnaW5nUmVzdWx0LCBzZWxmKS5hZGRVbmV4cGVjdGVkU3VjY2VzcygqYXJncykNCg0KDQpjbGFzcyBSZXN1bHRXaXRoTm9TdGFydFRlc3RSdW5TdG9wVGVzdFJ1bihvYmplY3QpOg0KICAgICIiIkFuIG9iamVjdCBob25vdXJpbmcgVGVzdFJlc3VsdCBiZWZvcmUgc3RhcnRUZXN0UnVuL3N0b3BUZXN0UnVuLiIiIg0KDQogICAgZGVmIF9faW5pdF9fKHNlbGYpOg0KICAgICAgICBzZWxmLmZhaWx1cmVzID0gW10NCiAgICAgICAgc2VsZi5lcnJvcnMgPSBbXQ0KICAgICAgICBzZWxmLnRlc3RzUnVuID0gMA0KICAgICAgICBzZWxmLnNraXBwZWQgPSBbXQ0KICAgICAgICBzZWxmLmV4cGVjdGVkRmFpbHVyZXMgPSBbXQ0KICAgICAgICBzZWxmLnVuZXhwZWN0ZWRTdWNjZXNzZXMgPSBbXQ0KICAgICAgICBzZWxmLnNob3VsZFN0b3AgPSBGYWxzZQ0KDQogICAgZGVmIHN0YXJ0VGVzdChzZWxmLCB0ZXN0KToNCiAgICAgICAgcGFzcw0KDQogICAgZGVmIHN0b3BUZXN0KHNlbGYsIHRlc3QpOg0KICAgICAgICBwYXNzDQoNCiAgICBkZWYgYWRkRXJyb3Ioc2VsZiwgdGVzdCk6DQogICAgICAgIHBhc3MNCg0KICAgIGRlZiBhZGRGYWlsdXJlKHNlbGYsIHRlc3QpOg0KICAgICAgICBwYXNzDQoNCiAgICBkZWYgYWRkU3VjY2VzcyhzZWxmLCB0ZXN0KToNCiAgICAgICAgcGFzcw0KDQogICAgZGVmIHdhc1N1Y2Nlc3NmdWwoc2VsZik6DQogICAgICAgIHJldHVybiBUcnVlDQo=',
'/Lib/unittest/test/test_case.py':'',
'/Lib/unittest/test/test_skipping.py':'aW1wb3J0IHVuaXR0ZXN0DQoNCmZyb20gLnN1cHBvcnQgaW1wb3J0IExvZ2dpbmdSZXN1bHQNCg0KDQpjbGFzcyBUZXN0X1Rlc3RTa2lwcGluZyh1bml0dGVzdC5UZXN0Q2FzZSk6DQoNCiAgICBkZWYgdGVzdF9za2lwcGluZyhzZWxmKToNCiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIGRlZiB0ZXN0X3NraXBfbWUoc2VsZik6DQogICAgICAgICAgICAgICAgc2VsZi5za2lwVGVzdCgic2tpcCIpDQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0X3NraXBfbWUiKQ0KICAgICAgICB0ZXN0LnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLCBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0J10pDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdCwgInNraXAiKV0pDQoNCiAgICAgICAgIyBUcnkgbGV0dGluZyBzZXRVcCBza2lwIHRoZSB0ZXN0IG5vdy4NCiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIGRlZiBzZXRVcChzZWxmKToNCiAgICAgICAgICAgICAgICBzZWxmLnNraXBUZXN0KCJ0ZXN0aW5nIikNCiAgICAgICAgICAgIGRlZiB0ZXN0X25vdGhpbmcoc2VsZik6IHBhc3MNCiAgICAgICAgZXZlbnRzID0gW10NCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpDQogICAgICAgIHRlc3QgPSBGb28oInRlc3Rfbm90aGluZyIpDQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIFsnc3RhcnRUZXN0JywgJ2FkZFNraXAnLCAnc3RvcFRlc3QnXSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0LCAidGVzdGluZyIpXSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQudGVzdHNSdW4sIDEpDQoNCiAgICBkZWYgdGVzdF9za2lwcGluZ19kZWNvcmF0b3JzKHNlbGYpOg0KICAgICAgICBvcF90YWJsZSA9ICgodW5pdHRlc3Quc2tpcFVubGVzcywgRmFsc2UsIFRydWUpLA0KICAgICAgICAgICAgICAgICAgICAodW5pdHRlc3Quc2tpcElmLCBUcnVlLCBGYWxzZSkpDQogICAgICAgIGZvciBkZWNvLCBkb19za2lwLCBkb250X3NraXAgaW4gb3BfdGFibGU6DQogICAgICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgICAgIEBkZWNvKGRvX3NraXAsICJ0ZXN0aW5nIikNCiAgICAgICAgICAgICAgICBkZWYgdGVzdF9za2lwKHNlbGYpOiBwYXNzDQoNCiAgICAgICAgICAgICAgICBAZGVjbyhkb250X3NraXAsICJ0ZXN0aW5nIikNCiAgICAgICAgICAgICAgICBkZWYgdGVzdF9kb250X3NraXAoc2VsZik6IHBhc3MNCiAgICAgICAgICAgIHRlc3RfZG9fc2tpcCA9IEZvbygidGVzdF9za2lwIikNCiAgICAgICAgICAgIHRlc3RfZG9udF9za2lwID0gRm9vKCJ0ZXN0X2RvbnRfc2tpcCIpDQogICAgICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF9kb19za2lwLCB0ZXN0X2RvbnRfc2tpcF0pDQogICAgICAgICAgICBldmVudHMgPSBbXQ0KICAgICAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpDQogICAgICAgICAgICBzdWl0ZS5ydW4ocmVzdWx0KQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsZW4ocmVzdWx0LnNraXBwZWQpLCAxKQ0KICAgICAgICAgICAgZXhwZWN0ZWQgPSBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0JywNCiAgICAgICAgICAgICAgICAgICAgICAgICdzdGFydFRlc3QnLCAnYWRkU3VjY2VzcycsICdzdG9wVGVzdCddDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgZXhwZWN0ZWQpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC50ZXN0c1J1biwgMikNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdF9kb19za2lwLCAidGVzdGluZyIpXSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShyZXN1bHQud2FzU3VjY2Vzc2Z1bCgpKQ0KDQogICAgZGVmIHRlc3Rfc2tpcF9jbGFzcyhzZWxmKToNCiAgICAgICAgQHVuaXR0ZXN0LnNraXAoInRlc3RpbmciKQ0KICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgZGVmIHRlc3RfMShzZWxmKToNCiAgICAgICAgICAgICAgICByZWNvcmQuYXBwZW5kKDEpDQogICAgICAgIHJlY29yZCA9IFtdDQogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQ0KICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0XzEiKQ0KICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pDQogICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdCwgInRlc3RpbmciKV0pDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVjb3JkLCBbXSkNCg0KICAgIGRlZiB0ZXN0X3NraXBfbm9uX3VuaXR0ZXN0X2NsYXNzKHNlbGYpOg0KICAgICAgICBAdW5pdHRlc3Quc2tpcCgidGVzdGluZyIpDQogICAgICAgIGNsYXNzIE1peGluOg0KICAgICAgICAgICAgZGVmIHRlc3RfMShzZWxmKToNCiAgICAgICAgICAgICAgICByZWNvcmQuYXBwZW5kKDEpDQogICAgICAgIGNsYXNzIEZvbyhNaXhpbiwgdW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgcGFzcw0KICAgICAgICByZWNvcmQgPSBbXQ0KICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkNCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW3Rlc3RdKQ0KICAgICAgICBzdWl0ZS5ydW4ocmVzdWx0KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlY29yZCwgW10pDQoNCiAgICBkZWYgdGVzdF9leHBlY3RlZF9mYWlsdXJlKHNlbGYpOg0KICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOg0KICAgICAgICAgICAgQHVuaXR0ZXN0LmV4cGVjdGVkRmFpbHVyZQ0KICAgICAgICAgICAgZGVmIHRlc3RfZGllKHNlbGYpOg0KICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiaGVscCBtZSEiKQ0KICAgICAgICBldmVudHMgPSBbXQ0KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykNCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9kaWUiKQ0KICAgICAgICB0ZXN0LnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLA0KICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RhcnRUZXN0JywgJ2FkZEV4cGVjdGVkRmFpbHVyZScsICdzdG9wVGVzdCddKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5leHBlY3RlZEZhaWx1cmVzWzBdWzBdLCB0ZXN0KQ0KICAgICAgICBzZWxmLmFzc2VydFRydWUocmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkNCg0KICAgIGRlZiB0ZXN0X3VuZXhwZWN0ZWRfc3VjY2VzcyhzZWxmKToNCiAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgICAgIEB1bml0dGVzdC5leHBlY3RlZEZhaWx1cmUNCiAgICAgICAgICAgIGRlZiB0ZXN0X2RpZShzZWxmKToNCiAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0X2RpZSIpDQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsDQogICAgICAgICAgICAgICAgICAgICAgICAgWydzdGFydFRlc3QnLCAnYWRkVW5leHBlY3RlZFN1Y2Nlc3MnLCAnc3RvcFRlc3QnXSkNCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShyZXN1bHQuZmFpbHVyZXMpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnVuZXhwZWN0ZWRTdWNjZXNzZXMsIFt0ZXN0XSkNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKHJlc3VsdC53YXNTdWNjZXNzZnVsKCkpDQoNCiAgICBkZWYgdGVzdF9za2lwX2RvZXNudF9ydW5fc2V0dXAoc2VsZik6DQogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6DQogICAgICAgICAgICB3YXNTZXRVcCA9IEZhbHNlDQogICAgICAgICAgICB3YXNUb3JuRG93biA9IEZhbHNlDQogICAgICAgICAgICBkZWYgc2V0VXAoc2VsZik6DQogICAgICAgICAgICAgICAgRm9vLndhc1NldFVwID0gVHJ1ZQ0KICAgICAgICAgICAgZGVmIHRvcm5Eb3duKHNlbGYpOg0KICAgICAgICAgICAgICAgIEZvby53YXNUb3JuRG93biA9IFRydWUNCiAgICAgICAgICAgIEB1bml0dGVzdC5za2lwKCd0ZXN0aW5nJykNCiAgICAgICAgICAgIGRlZiB0ZXN0XzEoc2VsZik6DQogICAgICAgICAgICAgICAgcGFzcw0KDQogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQ0KICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0XzEiKQ0KICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pDQogICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdCwgInRlc3RpbmciKV0pDQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoRm9vLndhc1NldFVwKQ0KICAgICAgICBzZWxmLmFzc2VydEZhbHNlKEZvby53YXNUb3JuRG93bikNCg0KICAgIGRlZiB0ZXN0X2RlY29yYXRlZF9za2lwKHNlbGYpOg0KICAgICAgICBkZWYgZGVjb3JhdG9yKGZ1bmMpOg0KICAgICAgICAgICAgZGVmIGlubmVyKCphKToNCiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYygqYSkNCiAgICAgICAgICAgIHJldHVybiBpbm5lcg0KDQogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6DQogICAgICAgICAgICBAZGVjb3JhdG9yDQogICAgICAgICAgICBAdW5pdHRlc3Quc2tpcCgndGVzdGluZycpDQogICAgICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOg0KICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkNCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikNCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW3Rlc3RdKQ0KICAgICAgICBzdWl0ZS5ydW4ocmVzdWx0KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQ0K',
'/Lib/unittest/test/test_program.py':'aW1wb3J0IGlvDQoNCmltcG9ydCBvcw0KaW1wb3J0IHN5cw0KaW1wb3J0IHVuaXR0ZXN0DQoNCg0KY2xhc3MgVGVzdF9UZXN0UHJvZ3JhbSh1bml0dGVzdC5UZXN0Q2FzZSk6DQoNCiAgICBkZWYgdGVzdF9kaXNjb3ZlcnlfZnJvbV9kb3R0ZWRfcGF0aChzZWxmKToNCiAgICAgICAgbG9hZGVyID0gdW5pdHRlc3QuVGVzdExvYWRlcigpDQoNCiAgICAgICAgdGVzdHMgPSBbc2VsZl0NCiAgICAgICAgZXhwZWN0ZWRQYXRoID0gb3MucGF0aC5hYnNwYXRoKG9zLnBhdGguZGlybmFtZSh1bml0dGVzdC50ZXN0Ll9fZmlsZV9fKSkNCg0KICAgICAgICBzZWxmLndhc1J1biA9IEZhbHNlDQogICAgICAgIGRlZiBfZmluZF90ZXN0cyhzdGFydF9kaXIsIHBhdHRlcm4pOg0KICAgICAgICAgICAgc2VsZi53YXNSdW4gPSBUcnVlDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN0YXJ0X2RpciwgZXhwZWN0ZWRQYXRoKQ0KICAgICAgICAgICAgcmV0dXJuIHRlc3RzDQogICAgICAgIGxvYWRlci5fZmluZF90ZXN0cyA9IF9maW5kX3Rlc3RzDQogICAgICAgIHN1aXRlID0gbG9hZGVyLmRpc2NvdmVyKCd1bml0dGVzdC50ZXN0JykNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKHNlbGYud2FzUnVuKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN1aXRlLl90ZXN0cywgdGVzdHMpDQoNCiAgICAjIEhvcnJpYmxlIHdoaXRlIGJveCB0ZXN0DQogICAgZGVmIHRlc3ROb0V4aXQoc2VsZik6DQogICAgICAgIHJlc3VsdCA9IG9iamVjdCgpDQogICAgICAgIHRlc3QgPSBvYmplY3QoKQ0KDQogICAgICAgIGNsYXNzIEZha2VSdW5uZXIob2JqZWN0KToNCiAgICAgICAgICAgIGRlZiBydW4oc2VsZiwgdGVzdCk6DQogICAgICAgICAgICAgICAgc2VsZi50ZXN0ID0gdGVzdA0KICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQNCg0KICAgICAgICBydW5uZXIgPSBGYWtlUnVubmVyKCkNCg0KICAgICAgICBvbGRQYXJzZUFyZ3MgPSB1bml0dGVzdC5UZXN0UHJvZ3JhbS5wYXJzZUFyZ3MNCiAgICAgICAgZGVmIHJlc3RvcmVQYXJzZUFyZ3MoKToNCiAgICAgICAgICAgIHVuaXR0ZXN0LlRlc3RQcm9ncmFtLnBhcnNlQXJncyA9IG9sZFBhcnNlQXJncw0KICAgICAgICB1bml0dGVzdC5UZXN0UHJvZ3JhbS5wYXJzZUFyZ3MgPSBsYW1iZGEgKmFyZ3M6IE5vbmUNCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHJlc3RvcmVQYXJzZUFyZ3MpDQoNCiAgICAgICAgZGVmIHJlbW92ZVRlc3QoKToNCiAgICAgICAgICAgIGRlbCB1bml0dGVzdC5UZXN0UHJvZ3JhbS50ZXN0DQogICAgICAgIHVuaXR0ZXN0LlRlc3RQcm9ncmFtLnRlc3QgPSB0ZXN0DQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChyZW1vdmVUZXN0KQ0KDQogICAgICAgIHByb2dyYW0gPSB1bml0dGVzdC5UZXN0UHJvZ3JhbSh0ZXN0UnVubmVyPXJ1bm5lciwgZXhpdD1GYWxzZSwgdmVyYm9zaXR5PTIpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwcm9ncmFtLnJlc3VsdCwgcmVzdWx0KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJ1bm5lci50ZXN0LCB0ZXN0KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHByb2dyYW0udmVyYm9zaXR5LCAyKQ0KDQogICAgY2xhc3MgRm9vQmFyKHVuaXR0ZXN0LlRlc3RDYXNlKToNCiAgICAgICAgZGVmIHRlc3RQYXNzKHNlbGYpOg0KICAgICAgICAgICAgYXNzZXJ0IFRydWUNCiAgICAgICAgZGVmIHRlc3RGYWlsKHNlbGYpOg0KICAgICAgICAgICAgYXNzZXJ0IEZhbHNlDQoNCiAgICBjbGFzcyBGb29CYXJMb2FkZXIodW5pdHRlc3QuVGVzdExvYWRlcik6DQogICAgICAgICIiIlRlc3QgbG9hZGVyIHRoYXQgcmV0dXJucyBhIHN1aXRlIGNvbnRhaW5pbmcgRm9vQmFyLiIiIg0KICAgICAgICBkZWYgbG9hZFRlc3RzRnJvbU1vZHVsZShzZWxmLCBtb2R1bGUpOg0KICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3VpdGVDbGFzcygNCiAgICAgICAgICAgICAgICBbc2VsZi5sb2FkVGVzdHNGcm9tVGVzdENhc2UoVGVzdF9UZXN0UHJvZ3JhbS5Gb29CYXIpXSkNCg0KDQogICAgZGVmIHRlc3RfTm9uRXhpdChzZWxmKToNCiAgICAgICAgcHJvZ3JhbSA9IHVuaXR0ZXN0Lm1haW4oZXhpdD1GYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndj1bImZvb2JhciJdLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0UnVubmVyPXVuaXR0ZXN0LlRleHRUZXN0UnVubmVyKHN0cmVhbT1pby5TdHJpbmdJTygpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdExvYWRlcj1zZWxmLkZvb0JhckxvYWRlcigpKQ0KICAgICAgICBzZWxmLmFzc2VydFRydWUoaGFzYXR0cihwcm9ncmFtLCAncmVzdWx0JykpDQoNCg0KICAgIGRlZiB0ZXN0X0V4aXQoc2VsZik6DQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKA0KICAgICAgICAgICAgU3lzdGVtRXhpdCwNCiAgICAgICAgICAgIHVuaXR0ZXN0Lm1haW4sDQogICAgICAgICAgICBhcmd2PVsiZm9vYmFyIl0sDQogICAgICAgICAgICB0ZXN0UnVubmVyPXVuaXR0ZXN0LlRleHRUZXN0UnVubmVyKHN0cmVhbT1pby5TdHJpbmdJTygpKSwNCiAgICAgICAgICAgIGV4aXQ9VHJ1ZSwNCiAgICAgICAgICAgIHRlc3RMb2FkZXI9c2VsZi5Gb29CYXJMb2FkZXIoKSkNCg0KDQogICAgZGVmIHRlc3RfRXhpdEFzRGVmYXVsdChzZWxmKToNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoDQogICAgICAgICAgICBTeXN0ZW1FeGl0LA0KICAgICAgICAgICAgdW5pdHRlc3QubWFpbiwNCiAgICAgICAgICAgIGFyZ3Y9WyJmb29iYXIiXSwNCiAgICAgICAgICAgIHRlc3RSdW5uZXI9dW5pdHRlc3QuVGV4dFRlc3RSdW5uZXIoc3RyZWFtPWlvLlN0cmluZ0lPKCkpLA0KICAgICAgICAgICAgdGVzdExvYWRlcj1zZWxmLkZvb0JhckxvYWRlcigpKQ0KDQoNCmNsYXNzIEluaXRpYWxpc2FibGVQcm9ncmFtKHVuaXR0ZXN0LlRlc3RQcm9ncmFtKToNCiAgICBleGl0ID0gRmFsc2UNCiAgICByZXN1bHQgPSBOb25lDQogICAgdmVyYm9zaXR5ID0gMQ0KICAgIGRlZmF1bHRUZXN0ID0gTm9uZQ0KICAgIHRlc3RSdW5uZXIgPSBOb25lDQogICAgdGVzdExvYWRlciA9IHVuaXR0ZXN0LmRlZmF1bHRUZXN0TG9hZGVyDQogICAgbW9kdWxlID0gJ19fbWFpbl9fJw0KICAgIHByb2dOYW1lID0gJ3Rlc3QnDQogICAgdGVzdCA9ICd0ZXN0Jw0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqYXJncyk6DQogICAgICAgIHBhc3MNCg0KUkVTVUxUID0gb2JqZWN0KCkNCg0KY2xhc3MgRmFrZVJ1bm5lcihvYmplY3QpOg0KICAgIGluaXRBcmdzID0gTm9uZQ0KICAgIHRlc3QgPSBOb25lDQogICAgcmFpc2VFcnJvciA9IEZhbHNlDQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgKiprd2FyZ3MpOg0KICAgICAgICBGYWtlUnVubmVyLmluaXRBcmdzID0ga3dhcmdzDQogICAgICAgIGlmIEZha2VSdW5uZXIucmFpc2VFcnJvcjoNCiAgICAgICAgICAgIEZha2VSdW5uZXIucmFpc2VFcnJvciA9IEZhbHNlDQogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3INCg0KICAgIGRlZiBydW4oc2VsZiwgdGVzdCk6DQogICAgICAgIEZha2VSdW5uZXIudGVzdCA9IHRlc3QNCiAgICAgICAgcmV0dXJuIFJFU1VMVA0KDQpjbGFzcyBUZXN0Q29tbWFuZExpbmVBcmdzKHVuaXR0ZXN0LlRlc3RDYXNlKToNCg0KICAgIGRlZiBzZXRVcChzZWxmKToNCiAgICAgICAgc2VsZi5wcm9ncmFtID0gSW5pdGlhbGlzYWJsZVByb2dyYW0oKQ0KICAgICAgICBzZWxmLnByb2dyYW0uY3JlYXRlVGVzdHMgPSBsYW1iZGE6IE5vbmUNCiAgICAgICAgRmFrZVJ1bm5lci5pbml0QXJncyA9IE5vbmUNCiAgICAgICAgRmFrZVJ1bm5lci50ZXN0ID0gTm9uZQ0KICAgICAgICBGYWtlUnVubmVyLnJhaXNlRXJyb3IgPSBGYWxzZQ0KDQogICAgZGVmIHRlc3RWZXJib3NpdHkoc2VsZik6DQogICAgICAgIHByb2dyYW0gPSBzZWxmLnByb2dyYW0NCg0KICAgICAgICBmb3Igb3B0IGluICctcScsICctLXF1aWV0JzoNCiAgICAgICAgICAgIHByb2dyYW0udmVyYm9zaXR5ID0gMQ0KICAgICAgICAgICAgcHJvZ3JhbS5wYXJzZUFyZ3MoW05vbmUsIG9wdF0pDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHByb2dyYW0udmVyYm9zaXR5LCAwKQ0KDQogICAgICAgIGZvciBvcHQgaW4gJy12JywgJy0tdmVyYm9zZSc6DQogICAgICAgICAgICBwcm9ncmFtLnZlcmJvc2l0eSA9IDENCiAgICAgICAgICAgIHByb2dyYW0ucGFyc2VBcmdzKFtOb25lLCBvcHRdKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwcm9ncmFtLnZlcmJvc2l0eSwgMikNCg0KICAgIGRlZiB0ZXN0QnVmZmVyQ2F0Y2hGYWlsZmFzdChzZWxmKToNCiAgICAgICAgcHJvZ3JhbSA9IHNlbGYucHJvZ3JhbQ0KICAgICAgICBmb3IgYXJnLCBhdHRyIGluICgoJ2J1ZmZlcicsICdidWZmZXInKSwgKCdmYWlsZmFzdCcsICdmYWlsZmFzdCcpLA0KICAgICAgICAgICAgICAgICAgICAgICgnY2F0Y2gnLCAnY2F0Y2hicmVhaycpKToNCiAgICAgICAgICAgIGlmIGF0dHIgPT0gJ2NhdGNoJyBhbmQgbm90IGhhc0luc3RhbGxIYW5kbGVyOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQoNCiAgICAgICAgICAgIHNob3J0X29wdCA9ICctJXMnICUgYXJnWzBdDQogICAgICAgICAgICBsb25nX29wdCA9ICctLSVzJyAlIGFyZw0KICAgICAgICAgICAgZm9yIG9wdCBpbiBzaG9ydF9vcHQsIGxvbmdfb3B0Og0KICAgICAgICAgICAgICAgIHNldGF0dHIocHJvZ3JhbSwgYXR0ciwgTm9uZSkNCg0KICAgICAgICAgICAgICAgIHByb2dyYW0ucGFyc2VBcmdzKFtOb25lLCBvcHRdKQ0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShnZXRhdHRyKHByb2dyYW0sIGF0dHIpKQ0KDQogICAgICAgICAgICBmb3Igb3B0IGluIHNob3J0X29wdCwgbG9uZ19vcHQ6DQogICAgICAgICAgICAgICAgbm90X25vbmUgPSBvYmplY3QoKQ0KICAgICAgICAgICAgICAgIHNldGF0dHIocHJvZ3JhbSwgYXR0ciwgbm90X25vbmUpDQoNCiAgICAgICAgICAgICAgICBwcm9ncmFtLnBhcnNlQXJncyhbTm9uZSwgb3B0XSkNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGdldGF0dHIocHJvZ3JhbSwgYXR0ciksIG5vdF9ub25lKQ0KDQogICAgZGVmIHRlc3RXYXJuaW5nKHNlbGYpOg0KICAgICAgICAiIiJUZXN0IHRoZSB3YXJuaW5ncyBhcmd1bWVudCIiIg0KICAgICAgICAjIHNlZSAjMTA1MzUNCiAgICAgICAgY2xhc3MgRmFrZVRQKHVuaXR0ZXN0LlRlc3RQcm9ncmFtKToNCiAgICAgICAgICAgIGRlZiBwYXJzZUFyZ3Moc2VsZiwgKmFyZ3MsICoqa3cpOiBwYXNzDQogICAgICAgICAgICBkZWYgcnVuVGVzdHMoc2VsZiwgKmFyZ3MsICoqa3cpOiBwYXNzDQogICAgICAgIHdhcm5vcHRpb25zID0gc3lzLndhcm5vcHRpb25zWzpdDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHN5cy53YXJub3B0aW9uc1s6XSA9IFtdDQogICAgICAgICAgICAjIG5vIHdhcm4gb3B0aW9ucywgbm8gYXJnIC0+IGRlZmF1bHQNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRmFrZVRQKCkud2FybmluZ3MsICdkZWZhdWx0JykNCiAgICAgICAgICAgICMgbm8gd2FybiBvcHRpb25zLCB3LyBhcmcgLT4gYXJnIHZhbHVlDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZha2VUUCh3YXJuaW5ncz0naWdub3JlJykud2FybmluZ3MsICdpZ25vcmUnKQ0KICAgICAgICAgICAgc3lzLndhcm5vcHRpb25zWzpdID0gWydzb21ldmFsdWUnXQ0KICAgICAgICAgICAgIyB3YXJuIG9wdGlvbnMsIG5vIGFyZyAtPiBOb25lDQogICAgICAgICAgICAjIHdhcm4gb3B0aW9ucywgdy8gYXJnIC0+IGFyZyB2YWx1ZQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGYWtlVFAoKS53YXJuaW5ncywgTm9uZSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRmFrZVRQKHdhcm5pbmdzPSdpZ25vcmUnKS53YXJuaW5ncywgJ2lnbm9yZScpDQogICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICBzeXMud2Fybm9wdGlvbnNbOl0gPSB3YXJub3B0aW9ucw0KDQogICAgZGVmIHRlc3RSdW5UZXN0c1J1bm5lckNsYXNzKHNlbGYpOg0KICAgICAgICBwcm9ncmFtID0gc2VsZi5wcm9ncmFtDQoNCiAgICAgICAgcHJvZ3JhbS50ZXN0UnVubmVyID0gRmFrZVJ1bm5lcg0KICAgICAgICBwcm9ncmFtLnZlcmJvc2l0eSA9ICd2ZXJib3NpdHknDQogICAgICAgIHByb2dyYW0uZmFpbGZhc3QgPSAnZmFpbGZhc3QnDQogICAgICAgIHByb2dyYW0uYnVmZmVyID0gJ2J1ZmZlcicNCiAgICAgICAgcHJvZ3JhbS53YXJuaW5ncyA9ICd3YXJuaW5ncycNCg0KICAgICAgICBwcm9ncmFtLnJ1blRlc3RzKCkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZha2VSdW5uZXIuaW5pdEFyZ3MsIHsndmVyYm9zaXR5JzogJ3ZlcmJvc2l0eScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmFpbGZhc3QnOiAnZmFpbGZhc3QnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2J1ZmZlcic6ICdidWZmZXInLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dhcm5pbmdzJzogJ3dhcm5pbmdzJ30pDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoRmFrZVJ1bm5lci50ZXN0LCAndGVzdCcpDQogICAgICAgIHNlbGYuYXNzZXJ0SXMocHJvZ3JhbS5yZXN1bHQsIFJFU1VMVCkNCg0KICAgIGRlZiB0ZXN0UnVuVGVzdHNSdW5uZXJJbnN0YW5jZShzZWxmKToNCiAgICAgICAgcHJvZ3JhbSA9IHNlbGYucHJvZ3JhbQ0KDQogICAgICAgIHByb2dyYW0udGVzdFJ1bm5lciA9IEZha2VSdW5uZXIoKQ0KICAgICAgICBGYWtlUnVubmVyLmluaXRBcmdzID0gTm9uZQ0KDQogICAgICAgIHByb2dyYW0ucnVuVGVzdHMoKQ0KDQogICAgICAgICMgQSBuZXcgRmFrZVJ1bm5lciBzaG91bGQgbm90IGhhdmUgYmVlbiBpbnN0YW50aWF0ZWQNCiAgICAgICAgc2VsZi5hc3NlcnRJc05vbmUoRmFrZVJ1bm5lci5pbml0QXJncykNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZha2VSdW5uZXIudGVzdCwgJ3Rlc3QnKQ0KICAgICAgICBzZWxmLmFzc2VydElzKHByb2dyYW0ucmVzdWx0LCBSRVNVTFQpDQoNCiAgICBkZWYgdGVzdFJ1blRlc3RzT2xkUnVubmVyQ2xhc3Moc2VsZik6DQogICAgICAgIHByb2dyYW0gPSBzZWxmLnByb2dyYW0NCg0KICAgICAgICBGYWtlUnVubmVyLnJhaXNlRXJyb3IgPSBUcnVlDQogICAgICAgIHByb2dyYW0udGVzdFJ1bm5lciA9IEZha2VSdW5uZXINCiAgICAgICAgcHJvZ3JhbS52ZXJib3NpdHkgPSAndmVyYm9zaXR5Jw0KICAgICAgICBwcm9ncmFtLmZhaWxmYXN0ID0gJ2ZhaWxmYXN0Jw0KICAgICAgICBwcm9ncmFtLmJ1ZmZlciA9ICdidWZmZXInDQogICAgICAgIHByb2dyYW0udGVzdCA9ICd0ZXN0Jw0KDQogICAgICAgIHByb2dyYW0ucnVuVGVzdHMoKQ0KDQogICAgICAgICMgSWYgaW5pdGlhbGlzaW5nIHJhaXNlcyBhIHR5cGUgZXJyb3IgaXQgc2hvdWxkIGJlIHJldHJpZWQNCiAgICAgICAgIyB3aXRob3V0IHRoZSBuZXcga2V5d29yZCBhcmd1bWVudHMNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGYWtlUnVubmVyLmluaXRBcmdzLCB7fSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGYWtlUnVubmVyLnRlc3QsICd0ZXN0JykNCiAgICAgICAgc2VsZi5hc3NlcnRJcyhwcm9ncmFtLnJlc3VsdCwgUkVTVUxUKQ0KDQogICAgZGVmIHRlc3RDYXRjaEJyZWFrSW5zdGFsbHNIYW5kbGVyKHNlbGYpOg0KICAgICAgICBtb2R1bGUgPSBzeXMubW9kdWxlc1sndW5pdHRlc3QubWFpbiddDQogICAgICAgIG9yaWdpbmFsID0gbW9kdWxlLmluc3RhbGxIYW5kbGVyDQogICAgICAgIGRlZiByZXN0b3JlKCk6DQogICAgICAgICAgICBtb2R1bGUuaW5zdGFsbEhhbmRsZXIgPSBvcmlnaW5hbA0KICAgICAgICBzZWxmLmFkZENsZWFudXAocmVzdG9yZSkNCg0KICAgICAgICBzZWxmLmluc3RhbGxlZCA9IEZhbHNlDQogICAgICAgIGRlZiBmYWtlSW5zdGFsbEhhbmRsZXIoKToNCiAgICAgICAgICAgIHNlbGYuaW5zdGFsbGVkID0gVHJ1ZQ0KICAgICAgICBtb2R1bGUuaW5zdGFsbEhhbmRsZXIgPSBmYWtlSW5zdGFsbEhhbmRsZXINCg0KICAgICAgICBwcm9ncmFtID0gc2VsZi5wcm9ncmFtDQogICAgICAgIHByb2dyYW0uY2F0Y2hicmVhayA9IFRydWUNCg0KICAgICAgICBwcm9ncmFtLnRlc3RSdW5uZXIgPSBGYWtlUnVubmVyDQoNCiAgICAgICAgcHJvZ3JhbS5ydW5UZXN0cygpDQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShzZWxmLmluc3RhbGxlZCkNCg0KICAgIGRlZiBfcGF0Y2hfaXNmaWxlKHNlbGYsIG5hbWVzLCBleGlzdHM9VHJ1ZSk6DQogICAgICAgIGRlZiBpc2ZpbGUocGF0aCk6DQogICAgICAgICAgICByZXR1cm4gcGF0aCBpbiBuYW1lcw0KICAgICAgICBvcmlnaW5hbCA9IG9zLnBhdGguaXNmaWxlDQogICAgICAgIG9zLnBhdGguaXNmaWxlID0gaXNmaWxlDQogICAgICAgIGRlZiByZXN0b3JlKCk6DQogICAgICAgICAgICBvcy5wYXRoLmlzZmlsZSA9IG9yaWdpbmFsDQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChyZXN0b3JlKQ0KDQoNCiAgICBkZWYgdGVzdFBhcnNlQXJnc0ZpbGVOYW1lcyhzZWxmKToNCiAgICAgICAgIyBydW5uaW5nIHRlc3RzIHdpdGggZmlsZW5hbWVzIGluc3RlYWQgb2YgbW9kdWxlIG5hbWVzDQogICAgICAgIHByb2dyYW0gPSBzZWxmLnByb2dyYW0NCiAgICAgICAgYXJndiA9IFsncHJvZ25hbWUnLCAnZm9vLnB5JywgJ2Jhci5QeScsICdiYXouUFknLCAnd2luZy50eHQnXQ0KICAgICAgICBzZWxmLl9wYXRjaF9pc2ZpbGUoYXJndikNCg0KICAgICAgICBwcm9ncmFtLmNyZWF0ZVRlc3RzID0gbGFtYmRhOiBOb25lDQogICAgICAgIHByb2dyYW0ucGFyc2VBcmdzKGFyZ3YpDQoNCiAgICAgICAgIyBub3RlIHRoYXQgJ3dpbmcudHh0JyBpcyBub3QgYSBQeXRob24gZmlsZSBzbyB0aGUgbmFtZSBzaG91bGQNCiAgICAgICAgIyAqbm90KiBiZSBjb252ZXJ0ZWQgdG8gYSBtb2R1bGUgbmFtZQ0KICAgICAgICBleHBlY3RlZCA9IFsnZm9vJywgJ2JhcicsICdiYXonLCAnd2luZy50eHQnXQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHByb2dyYW0udGVzdE5hbWVzLCBleHBlY3RlZCkNCg0KDQogICAgZGVmIHRlc3RQYXJzZUFyZ3NGaWxlUGF0aHMoc2VsZik6DQogICAgICAgIHByb2dyYW0gPSBzZWxmLnByb2dyYW0NCiAgICAgICAgYXJndiA9IFsncHJvZ25hbWUnLCAnZm9vL2Jhci9iYXoucHknLCAnZ3JlZW5cXHJlZC5weSddDQogICAgICAgIHNlbGYuX3BhdGNoX2lzZmlsZShhcmd2KQ0KDQogICAgICAgIHByb2dyYW0uY3JlYXRlVGVzdHMgPSBsYW1iZGE6IE5vbmUNCiAgICAgICAgcHJvZ3JhbS5wYXJzZUFyZ3MoYXJndikNCg0KICAgICAgICBleHBlY3RlZCA9IFsnZm9vLmJhci5iYXonLCAnZ3JlZW4ucmVkJ10NCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwcm9ncmFtLnRlc3ROYW1lcywgZXhwZWN0ZWQpDQoNCg0KICAgIGRlZiB0ZXN0UGFyc2VBcmdzTm9uRXhpc3RlbnRGaWxlcyhzZWxmKToNCiAgICAgICAgcHJvZ3JhbSA9IHNlbGYucHJvZ3JhbQ0KICAgICAgICBhcmd2ID0gWydwcm9nbmFtZScsICdmb28vYmFyL2Jhei5weScsICdncmVlblxccmVkLnB5J10NCiAgICAgICAgc2VsZi5fcGF0Y2hfaXNmaWxlKFtdKQ0KDQogICAgICAgIHByb2dyYW0uY3JlYXRlVGVzdHMgPSBsYW1iZGE6IE5vbmUNCiAgICAgICAgcHJvZ3JhbS5wYXJzZUFyZ3MoYXJndikNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHByb2dyYW0udGVzdE5hbWVzLCBhcmd2WzE6XSkNCg0KICAgIGRlZiB0ZXN0UGFyc2VBcmdzQWJzb2x1dGVQYXRoc1RoYXRDYW5CZUNvbnZlcnRlZChzZWxmKToNCiAgICAgICAgY3VyX2RpciA9IG9zLmdldGN3ZCgpDQogICAgICAgIHByb2dyYW0gPSBzZWxmLnByb2dyYW0NCiAgICAgICAgZGVmIF9qb2luKG5hbWUpOg0KICAgICAgICAgICAgcmV0dXJuIG9zLnBhdGguam9pbihjdXJfZGlyLCBuYW1lKQ0KICAgICAgICBhcmd2ID0gWydwcm9nbmFtZScsIF9qb2luKCdmb28vYmFyL2Jhei5weScpLCBfam9pbignZ3JlZW5cXHJlZC5weScpXQ0KICAgICAgICBzZWxmLl9wYXRjaF9pc2ZpbGUoYXJndikNCg0KICAgICAgICBwcm9ncmFtLmNyZWF0ZVRlc3RzID0gbGFtYmRhOiBOb25lDQogICAgICAgIHByb2dyYW0ucGFyc2VBcmdzKGFyZ3YpDQoNCiAgICAgICAgZXhwZWN0ZWQgPSBbJ2Zvby5iYXIuYmF6JywgJ2dyZWVuLnJlZCddDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocHJvZ3JhbS50ZXN0TmFtZXMsIGV4cGVjdGVkKQ0KDQogICAgZGVmIHRlc3RQYXJzZUFyZ3NBYnNvbHV0ZVBhdGhzVGhhdENhbm5vdEJlQ29udmVydGVkKHNlbGYpOg0KICAgICAgICBwcm9ncmFtID0gc2VsZi5wcm9ncmFtDQogICAgICAgICMgZXZlbiBvbiBXaW5kb3dzICcvLi4uJyBpcyBjb25zaWRlcmVkIGFic29sdXRlIGJ5IG9zLnBhdGguYWJzcGF0aA0KICAgICAgICBhcmd2ID0gWydwcm9nbmFtZScsICcvZm9vL2Jhci9iYXoucHknLCAnL2dyZWVuL3JlZC5weSddDQogICAgICAgIHNlbGYuX3BhdGNoX2lzZmlsZShhcmd2KQ0KDQogICAgICAgIHByb2dyYW0uY3JlYXRlVGVzdHMgPSBsYW1iZGE6IE5vbmUNCiAgICAgICAgcHJvZ3JhbS5wYXJzZUFyZ3MoYXJndikNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHByb2dyYW0udGVzdE5hbWVzLCBhcmd2WzE6XSkNCg0KICAgICAgICAjIGl0IG1heSBiZSBiZXR0ZXIgdG8gdXNlIHBsYXRmb3JtIHNwZWNpZmljIGZ1bmN0aW9ucyB0byBub3JtYWxpc2UgcGF0aHMNCiAgICAgICAgIyByYXRoZXIgdGhhbiBhY2NlcHRpbmcgJy5QWScgYW5kICdcJyBhcyBmaWxlIHNlcHJhdG9yIG9uIExpbnV4IC8gTWFjDQogICAgICAgICMgaXQgd291bGQgYWxzbyBiZSBiZXR0ZXIgdG8gY2hlY2sgdGhhdCBhIGZpbGVuYW1lIGlzIGEgdmFsaWQgbW9kdWxlDQogICAgICAgICMgaWRlbnRpZmllciAod2UgaGF2ZSBhIHJlZ2V4IGZvciB0aGlzIGluIGxvYWRlci5weSkNCiAgICAgICAgIyBmb3IgaW52YWxpZCBmaWxlbmFtZXMgc2hvdWxkIHdlIHJhaXNlIGEgdXNlZnVsIGVycm9yIHJhdGhlciB0aGFuDQogICAgICAgICMgbGVhdmluZyB0aGUgY3VycmVudCBlcnJvciBtZXNzYWdlIChpbXBvcnQgb2YgZmlsZW5hbWUgZmFpbHMpIGluIHBsYWNlPw0KDQoNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQogICAgdW5pdHRlc3QubWFpbigpDQo=',
'/Lib/unittest/test/test_assertions.py':'',
'/Lib/unittest/test/test_break.py':'',
'/Lib/unittest/test/_test_warnings.py':'IyBoZWxwZXIgbW9kdWxlIGZvciB0ZXN0X3J1bm5lci5UZXN0X1RleHRUZXN0UnVubmVyLnRlc3Rfd2FybmluZ3MNCg0KIiIiDQpUaGlzIG1vZHVsZSBoYXMgYSBudW1iZXIgb2YgdGVzdHMgdGhhdCByYWlzZSBkaWZmZXJlbnQga2luZHMgb2Ygd2FybmluZ3MuDQpXaGVuIHRoZSB0ZXN0cyBhcmUgcnVuLCB0aGUgd2FybmluZ3MgYXJlIGNhdWdodCBhbmQgdGhlaXIgbWVzc2FnZXMgYXJlIHByaW50ZWQNCnRvIHN0ZG91dC4gIFRoaXMgbW9kdWxlIGFsc28gYWNjZXB0cyBhbiBhcmcgdGhhdCBpcyB0aGVuIHBhc3NlZCB0bw0KdW5pdHRlc3QubWFpbiB0byBhZmZlY3QgdGhlIGJlaGF2aW9yIG9mIHdhcm5pbmdzLg0KVGVzdF9UZXh0VGVzdFJ1bm5lci50ZXN0X3dhcm5pbmdzIGV4ZWN1dGVzIHRoaXMgc2NyaXB0IHdpdGggZGlmZmVyZW50DQpjb21iaW5hdGlvbnMgb2Ygd2FybmluZ3MgYXJncyBhbmQgLVcgZmxhZ3MgYW5kIGNoZWNrIHRoYXQgdGhlIG91dHB1dCBpcyBjb3JyZWN0Lg0KU2VlICMxMDUzNS4NCiIiIg0KDQppbXBvcnQgc3lzDQppbXBvcnQgdW5pdHRlc3QNCmltcG9ydCB3YXJuaW5ncw0KDQpkZWYgd2FybmZ1bigpOg0KICAgIHdhcm5pbmdzLndhcm4oJ3J3JywgUnVudGltZVdhcm5pbmcpDQoNCmNsYXNzIFRlc3RXYXJuaW5ncyh1bml0dGVzdC5UZXN0Q2FzZSk6DQogICAgIyB1bml0dGVzdCB3YXJuaW5ncyB3aWxsIGJlIHByaW50ZWQgYXQgbW9zdCBvbmNlIHBlciB0eXBlIChtYXggb25lIG1lc3NhZ2UNCiAgICAjIGZvciB0aGUgZmFpbCogbWV0aG9kcywgYW5kIG9uZSBmb3IgdGhlIGFzc2VydCogbWV0aG9kcykNCiAgICBkZWYgdGVzdF9hc3NlcnQoc2VsZik6DQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWxzKDIrMiwgNCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbHMoMioyLCA0KQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFscygyKioyLCA0KQ0KDQogICAgZGVmIHRlc3RfZmFpbChzZWxmKToNCiAgICAgICAgc2VsZi5mYWlsVW5sZXNzKDEpDQogICAgICAgIHNlbGYuZmFpbFVubGVzcyhUcnVlKQ0KDQogICAgZGVmIHRlc3Rfb3RoZXJfdW5pdHRlc3Qoc2VsZik6DQogICAgICAgIHNlbGYuYXNzZXJ0QWxtb3N0RXF1YWwoMisyLCA0KQ0KICAgICAgICBzZWxmLmFzc2VydE5vdEFsbW9zdEVxdWFsKDQrNCwgMikNCg0KICAgICMgdGhlc2Ugd2FybmluZ3MgYXJlIG5vcm1hbGx5IHNpbGVuY2VkLCBidXQgdGhleSBhcmUgcHJpbnRlZCBpbiB1bml0dGVzdA0KICAgIGRlZiB0ZXN0X2RlcHJlY2F0aW9uKHNlbGYpOg0KICAgICAgICB3YXJuaW5ncy53YXJuKCdkdycsIERlcHJlY2F0aW9uV2FybmluZykNCiAgICAgICAgd2FybmluZ3Mud2FybignZHcnLCBEZXByZWNhdGlvbldhcm5pbmcpDQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQ0KDQogICAgZGVmIHRlc3RfaW1wb3J0KHNlbGYpOg0KICAgICAgICB3YXJuaW5ncy53YXJuKCdpdycsIEltcG9ydFdhcm5pbmcpDQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2l3JywgSW1wb3J0V2FybmluZykNCiAgICAgICAgd2FybmluZ3Mud2FybignaXcnLCBJbXBvcnRXYXJuaW5nKQ0KDQogICAgIyB1c2VyIHdhcm5pbmdzIHNob3VsZCBhbHdheXMgYmUgcHJpbnRlZA0KICAgIGRlZiB0ZXN0X3dhcm5pbmcoc2VsZik6DQogICAgICAgIHdhcm5pbmdzLndhcm4oJ3V3JykNCiAgICAgICAgd2FybmluZ3Mud2FybigndXcnKQ0KICAgICAgICB3YXJuaW5ncy53YXJuKCd1dycpDQoNCiAgICAjIHRoZXNlIHdhcm5pbmdzIGNvbWUgZnJvbSB0aGUgc2FtZSBwbGFjZTsgdGhleSB3aWxsIGJlIHByaW50ZWQNCiAgICAjIG9ubHkgb25jZSBieSBkZWZhdWx0IG9yIHRocmVlIHRpbWVzIGlmIHRoZSAnYWx3YXlzJyBmaWx0ZXIgaXMgdXNlZA0KICAgIGRlZiB0ZXN0X2Z1bmN0aW9uKHNlbGYpOg0KDQogICAgICAgIHdhcm5mdW4oKQ0KICAgICAgICB3YXJuZnVuKCkNCiAgICAgICAgd2FybmZ1bigpDQoNCg0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIHdpdGggd2FybmluZ3MuY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpIGFzIHdzOg0KICAgICAgICAjIGlmIGFuIGFyZyBpcyBwcm92aWRlZCBwYXNzIGl0IHRvIHVuaXR0ZXN0Lm1haW4gYXMgJ3dhcm5pbmdzJw0KICAgICAgICBpZiBsZW4oc3lzLmFyZ3YpID09IDI6DQogICAgICAgICAgICB1bml0dGVzdC5tYWluKGV4aXQ9RmFsc2UsIHdhcm5pbmdzPXN5cy5hcmd2LnBvcCgpKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgdW5pdHRlc3QubWFpbihleGl0PUZhbHNlKQ0KDQogICAgIyBwcmludCBhbGwgdGhlIHdhcm5pbmcgbWVzc2FnZXMgY29sbGVjdGVkDQogICAgZm9yIHcgaW4gd3M6DQogICAgICAgIHByaW50KHcubWVzc2FnZSkNCg==',
'/Lib/unittest/test/test_loader.py':'',
'/Lib/unittest/test/test_discovery.py':'',
'/Lib/unittest/test/__init__.py':'aW1wb3J0IG9zDQppbXBvcnQgc3lzDQppbXBvcnQgdW5pdHRlc3QNCg0KDQpoZXJlID0gb3MucGF0aC5kaXJuYW1lKF9fZmlsZV9fKQ0KbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXINCg0KZGVmIHN1aXRlKCk6DQogICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQ0KICAgIGZvciBmbiBpbiBvcy5saXN0ZGlyKGhlcmUpOg0KICAgICAgICBpZiBmbi5zdGFydHN3aXRoKCJ0ZXN0IikgYW5kIGZuLmVuZHN3aXRoKCIucHkiKToNCiAgICAgICAgICAgIG1vZG5hbWUgPSAidW5pdHRlc3QudGVzdC4iICsgZm5bOi0zXQ0KICAgICAgICAgICAgX19pbXBvcnRfXyhtb2RuYW1lKQ0KICAgICAgICAgICAgbW9kdWxlID0gc3lzLm1vZHVsZXNbbW9kbmFtZV0NCiAgICAgICAgICAgIHN1aXRlLmFkZFRlc3QobG9hZGVyLmxvYWRUZXN0c0Zyb21Nb2R1bGUobW9kdWxlKSkNCiAgICBzdWl0ZS5hZGRUZXN0KGxvYWRlci5sb2FkVGVzdHNGcm9tTmFtZSgndW5pdHRlc3QudGVzdC50ZXN0bW9jaycpKQ0KICAgIHJldHVybiBzdWl0ZQ0KDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgdW5pdHRlc3QubWFpbihkZWZhdWx0VGVzdD0ic3VpdGUiKQ0K',
'/Lib/unittest/test/test_result.py':'',
'/Lib/unittest/test/test_suite.py':'',
'/Lib/unittest/test/dummy.py':'IyBFbXB0eSBtb2R1bGUgZm9yIHRlc3RpbmcgdGhlIGxvYWRpbmcgb2YgbW9kdWxlcw0K',
'/Lib/unittest/test/test_setups.py':'',
'/Lib/unittest/test/test_runner.py':'',
'/Lib/unittest/test/test_functiontestcase.py':'aW1wb3J0IHVuaXR0ZXN0DQoNCmZyb20gLnN1cHBvcnQgaW1wb3J0IExvZ2dpbmdSZXN1bHQNCg0KDQpjbGFzcyBUZXN0X0Z1bmN0aW9uVGVzdENhc2UodW5pdHRlc3QuVGVzdENhc2UpOg0KDQogICAgIyAiUmV0dXJuIHRoZSBudW1iZXIgb2YgdGVzdHMgcmVwcmVzZW50ZWQgYnkgdGhlIHRoaXMgdGVzdCBvYmplY3QuIEZvcg0KICAgICMgVGVzdENhc2UgaW5zdGFuY2VzLCB0aGlzIHdpbGwgYWx3YXlzIGJlIDEiDQogICAgZGVmIHRlc3RfY291bnRUZXN0Q2FzZXMoc2VsZik6DQogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3QuY291bnRUZXN0Q2FzZXMoKSwgMSkNCg0KICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QNCiAgICAjIHByaW9yIHRvIGVhY2ggdGVzdC4gTGlrZXdpc2UsIGlmIGEgdGVhckRvd24oKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlDQogICAgIyB0ZXN0IHJ1bm5lciB3aWxsIGludm9rZSB0aGF0IG1ldGhvZCBhZnRlciBlYWNoIHRlc3QuIEluIHRoZSBleGFtcGxlLA0KICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiINCiAgICAjDQogICAgIyBNYWtlIHN1cmUgdGhlIHByb3BlciBjYWxsIG9yZGVyIGlzIG1haW50YWluZWQsIGV2ZW4gaWYgc2V0VXAoKSByYWlzZXMNCiAgICAjIGFuIGV4Y2VwdGlvbi4NCiAgICBkZWYgdGVzdF9ydW5fY2FsbF9vcmRlcl9fZXJyb3JfaW5fc2V0VXAoc2VsZik6DQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KDQogICAgICAgIGRlZiBzZXRVcCgpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgnc2V0VXAnKQ0KICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKCdyYWlzZWQgYnkgc2V0VXAnKQ0KDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBldmVudHMuYXBwZW5kKCd0ZXN0JykNCg0KICAgICAgICBkZWYgdGVhckRvd24oKToNCiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3RlYXJEb3duJykNCg0KICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ2FkZEVycm9yJywgJ3N0b3BUZXN0J10NCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLCBleHBlY3RlZCkNCg0KICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QNCiAgICAjIHByaW9yIHRvIGVhY2ggdGVzdC4gTGlrZXdpc2UsIGlmIGEgdGVhckRvd24oKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlDQogICAgIyB0ZXN0IHJ1bm5lciB3aWxsIGludm9rZSB0aGF0IG1ldGhvZCBhZnRlciBlYWNoIHRlc3QuIEluIHRoZSBleGFtcGxlLA0KICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiINCiAgICAjDQogICAgIyBNYWtlIHN1cmUgdGhlIHByb3BlciBjYWxsIG9yZGVyIGlzIG1haW50YWluZWQsIGV2ZW4gaWYgdGhlIHRlc3QgcmFpc2VzDQogICAgIyBhbiBlcnJvciAoYXMgb3Bwb3NlZCB0byBhIGZhaWx1cmUpLg0KICAgIGRlZiB0ZXN0X3J1bl9jYWxsX29yZGVyX19lcnJvcl9pbl90ZXN0KHNlbGYpOg0KICAgICAgICBldmVudHMgPSBbXQ0KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykNCg0KICAgICAgICBkZWYgc2V0VXAoKToNCiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykNCg0KICAgICAgICBkZWYgdGVzdCgpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVzdCcpDQogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoJ3JhaXNlZCBieSB0ZXN0JykNCg0KICAgICAgICBkZWYgdGVhckRvd24oKToNCiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3RlYXJEb3duJykNCg0KICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLA0KICAgICAgICAgICAgICAgICAgICAnYWRkRXJyb3InLCAnc3RvcFRlc3QnXQ0KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQ0KDQogICAgIyAiV2hlbiBhIHNldFVwKCkgbWV0aG9kIGlzIGRlZmluZWQsIHRoZSB0ZXN0IHJ1bm5lciB3aWxsIHJ1biB0aGF0IG1ldGhvZA0KICAgICMgcHJpb3IgdG8gZWFjaCB0ZXN0LiBMaWtld2lzZSwgaWYgYSB0ZWFyRG93bigpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUNCiAgICAjIHRlc3QgcnVubmVyIHdpbGwgaW52b2tlIHRoYXQgbWV0aG9kIGFmdGVyIGVhY2ggdGVzdC4gSW4gdGhlIGV4YW1wbGUsDQogICAgIyBzZXRVcCgpIHdhcyB1c2VkIHRvIGNyZWF0ZSBhIGZyZXNoIHNlcXVlbmNlIGZvciBlYWNoIHRlc3QuIg0KICAgICMNCiAgICAjIE1ha2Ugc3VyZSB0aGUgcHJvcGVyIGNhbGwgb3JkZXIgaXMgbWFpbnRhaW5lZCwgZXZlbiBpZiB0aGUgdGVzdCBzaWduYWxzDQogICAgIyBhIGZhaWx1cmUgKGFzIG9wcG9zZWQgdG8gYW4gZXJyb3IpLg0KICAgIGRlZiB0ZXN0X3J1bl9jYWxsX29yZGVyX19mYWlsdXJlX2luX3Rlc3Qoc2VsZik6DQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KDQogICAgICAgIGRlZiBzZXRVcCgpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgnc2V0VXAnKQ0KDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBldmVudHMuYXBwZW5kKCd0ZXN0JykNCiAgICAgICAgICAgIHNlbGYuZmFpbCgncmFpc2VkIGJ5IHRlc3QnKQ0KDQogICAgICAgIGRlZiB0ZWFyRG93bigpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQ0KDQogICAgICAgIGV4cGVjdGVkID0gWydzdGFydFRlc3QnLCAnc2V0VXAnLCAndGVzdCcsICd0ZWFyRG93bicsDQogICAgICAgICAgICAgICAgICAgICdhZGRGYWlsdXJlJywgJ3N0b3BUZXN0J10NCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLCBleHBlY3RlZCkNCg0KICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QNCiAgICAjIHByaW9yIHRvIGVhY2ggdGVzdC4gTGlrZXdpc2UsIGlmIGEgdGVhckRvd24oKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlDQogICAgIyB0ZXN0IHJ1bm5lciB3aWxsIGludm9rZSB0aGF0IG1ldGhvZCBhZnRlciBlYWNoIHRlc3QuIEluIHRoZSBleGFtcGxlLA0KICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiINCiAgICAjDQogICAgIyBNYWtlIHN1cmUgdGhlIHByb3BlciBjYWxsIG9yZGVyIGlzIG1haW50YWluZWQsIGV2ZW4gaWYgdGVhckRvd24oKSByYWlzZXMNCiAgICAjIGFuIGV4Y2VwdGlvbi4NCiAgICBkZWYgdGVzdF9ydW5fY2FsbF9vcmRlcl9fZXJyb3JfaW5fdGVhckRvd24oc2VsZik6DQogICAgICAgIGV2ZW50cyA9IFtdDQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQ0KDQogICAgICAgIGRlZiBzZXRVcCgpOg0KICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgnc2V0VXAnKQ0KDQogICAgICAgIGRlZiB0ZXN0KCk6DQogICAgICAgICAgICBldmVudHMuYXBwZW5kKCd0ZXN0JykNCg0KICAgICAgICBkZWYgdGVhckRvd24oKToNCiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3RlYXJEb3duJykNCiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigncmFpc2VkIGJ5IHRlYXJEb3duJykNCg0KICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLCAnYWRkRXJyb3InLA0KICAgICAgICAgICAgICAgICAgICAnc3RvcFRlc3QnXQ0KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQ0KDQogICAgIyAiUmV0dXJuIGEgc3RyaW5nIGlkZW50aWZ5aW5nIHRoZSBzcGVjaWZpYyB0ZXN0IGNhc2UuIg0KICAgICMNCiAgICAjIEJlY2F1c2Ugb2YgdGhlIHZhZ3VlIG5hdHVyZSBvZiB0aGUgZG9jcywgSSdtIG5vdCBnb2luZyB0byBsb2NrIHRoaXMNCiAgICAjIHRlc3QgZG93biB0b28gbXVjaC4gUmVhbGx5IGFsbCB0aGF0IGNhbiBiZSBhc3NlcnRlZCBpcyB0aGF0IHRoZSBpZCgpDQogICAgIyB3aWxsIGJlIGEgc3RyaW5nIChlaXRoZXIgOC1ieXRlIG9yIHVuaWNvZGUgLS0gYWdhaW4sIGJlY2F1c2UgdGhlIGRvY3MNCiAgICAjIGp1c3Qgc2F5ICJzdHJpbmciKQ0KICAgIGRlZiB0ZXN0X2lkKHNlbGYpOg0KICAgICAgICB0ZXN0ID0gdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZShsYW1iZGE6IE5vbmUpDQoNCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHRlc3QuaWQoKSwgc3RyKQ0KDQogICAgIyAiUmV0dXJucyBhIG9uZS1saW5lIGRlc2NyaXB0aW9uIG9mIHRoZSB0ZXN0LCBvciBOb25lIGlmIG5vIGRlc2NyaXB0aW9uDQogICAgIyBoYXMgYmVlbiBwcm92aWRlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucw0KICAgICMgdGhlIGZpcnN0IGxpbmUgb2YgdGhlIHRlc3QgbWV0aG9kJ3MgZG9jc3RyaW5nLCBpZiBhdmFpbGFibGUsIG9yIE5vbmUuIg0KICAgIGRlZiB0ZXN0X3Nob3J0RGVzY3JpcHRpb25fX25vX2RvY3N0cmluZyhzZWxmKToNCiAgICAgICAgdGVzdCA9IHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwodGVzdC5zaG9ydERlc2NyaXB0aW9uKCksIE5vbmUpDQoNCiAgICAjICJSZXR1cm5zIGEgb25lLWxpbmUgZGVzY3JpcHRpb24gb2YgdGhlIHRlc3QsIG9yIE5vbmUgaWYgbm8gZGVzY3JpcHRpb24NCiAgICAjIGhhcyBiZWVuIHByb3ZpZGVkLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIG1ldGhvZCByZXR1cm5zDQogICAgIyB0aGUgZmlyc3QgbGluZSBvZiB0aGUgdGVzdCBtZXRob2QncyBkb2NzdHJpbmcsIGlmIGF2YWlsYWJsZSwgb3IgTm9uZS4iDQogICAgZGVmIHRlc3Rfc2hvcnREZXNjcmlwdGlvbl9fc2luZ2xlbGluZV9kb2NzdHJpbmcoc2VsZik6DQogICAgICAgIGRlc2MgPSAidGhpcyB0ZXN0cyBmb28iDQogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSwgZGVzY3JpcHRpb249ZGVzYykNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3Quc2hvcnREZXNjcmlwdGlvbigpLCAidGhpcyB0ZXN0cyBmb28iKQ0K',
'/Lib/unittest/test/testmock/testsentinel.py':'aW1wb3J0IHVuaXR0ZXN0DQpmcm9tIHVuaXR0ZXN0Lm1vY2sgaW1wb3J0IHNlbnRpbmVsLCBERUZBVUxUDQoNCg0KY2xhc3MgU2VudGluZWxUZXN0KHVuaXR0ZXN0LlRlc3RDYXNlKToNCg0KICAgIGRlZiB0ZXN0U2VudGluZWxzKHNlbGYpOg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNlbnRpbmVsLndoYXRldmVyLCBzZW50aW5lbC53aGF0ZXZlciwNCiAgICAgICAgICAgICAgICAgICAgICAgICAnc2VudGluZWwgbm90IHN0b3JlZCcpDQogICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwoc2VudGluZWwud2hhdGV2ZXIsIHNlbnRpbmVsLndoYXRldmVyZWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2VudGluZWwgc2hvdWxkIGJlIHVuaXF1ZScpDQoNCg0KICAgIGRlZiB0ZXN0U2VudGluZWxOYW1lKHNlbGYpOg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN0cihzZW50aW5lbC53aGF0ZXZlciksICdzZW50aW5lbC53aGF0ZXZlcicsDQogICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbnRpbmVsIG5hbWUgaW5jb3JyZWN0JykNCg0KDQogICAgZGVmIHRlc3RERUZBVUxUKHNlbGYpOg0KICAgICAgICBzZWxmLmFzc2VydFRydWUoREVGQVVMVCBpcyBzZW50aW5lbC5ERUZBVUxUKQ0KDQogICAgZGVmIHRlc3RCYXNlcyhzZWxmKToNCiAgICAgICAgIyBJZiB0aGlzIGRvZXNuJ3QgcmFpc2UgYW4gQXR0cmlidXRlRXJyb3IgdGhlbiBoZWxwKG1vY2spIGlzIGJyb2tlbg0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhBdHRyaWJ1dGVFcnJvciwgbGFtYmRhOiBzZW50aW5lbC5fX2Jhc2VzX18pDQoNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICB1bml0dGVzdC5tYWluKCkNCg==',
'/Lib/unittest/test/testmock/support.py':'aW1wb3J0IHN5cw0KDQpkZWYgaXNfaW5zdGFuY2Uob2JqLCBrbGFzcyk6DQogICAgIiIiVmVyc2lvbiBvZiBpc19pbnN0YW5jZSB0aGF0IGRvZXNuJ3QgYWNjZXNzIF9fY2xhc3NfXyIiIg0KICAgIHJldHVybiBpc3N1YmNsYXNzKHR5cGUob2JqKSwga2xhc3MpDQoNCg0KY2xhc3MgU29tZUNsYXNzKG9iamVjdCk6DQogICAgY2xhc3NfYXR0cmlidXRlID0gTm9uZQ0KDQogICAgZGVmIHdpYmJsZShzZWxmKToNCiAgICAgICAgcGFzcw0KDQoNCmNsYXNzIFgob2JqZWN0KToNCiAgICBwYXNzDQoNCg0KZGVmIGV4YW1pbmVfd2FybmluZ3MoZnVuYyk6DQogICAgZGVmIHdyYXBwZXIoKToNCiAgICAgICAgd2l0aCBjYXRjaF93YXJuaW5ncyhyZWNvcmQ9VHJ1ZSkgYXMgd3M6DQogICAgICAgICAgICBmdW5jKHdzKQ0KICAgIHJldHVybiB3cmFwcGVyDQo=',
'/Lib/unittest/test/testmock/testpatch.py':'',
'/Lib/unittest/test/testmock/testhelpers.py':'',
'/Lib/unittest/test/testmock/testmock.py':'',
'/Lib/unittest/test/testmock/testwith.py':'aW1wb3J0IHVuaXR0ZXN0DQpmcm9tIHdhcm5pbmdzIGltcG9ydCBjYXRjaF93YXJuaW5ncw0KDQpmcm9tIHVuaXR0ZXN0LnRlc3QudGVzdG1vY2suc3VwcG9ydCBpbXBvcnQgaXNfaW5zdGFuY2UNCmZyb20gdW5pdHRlc3QubW9jayBpbXBvcnQgTWFnaWNNb2NrLCBNb2NrLCBwYXRjaCwgc2VudGluZWwsIG1vY2tfb3BlbiwgY2FsbA0KDQoNCg0Kc29tZXRoaW5nICA9IHNlbnRpbmVsLlNvbWV0aGluZw0Kc29tZXRoaW5nX2Vsc2UgID0gc2VudGluZWwuU29tZXRoaW5nRWxzZQ0KDQoNCg0KY2xhc3MgV2l0aFRlc3QodW5pdHRlc3QuVGVzdENhc2UpOg0KDQogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnQoc2VsZik6DQogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuU29tZXRoaW5nMik6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nMiwgInVucGF0Y2hlZCIpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpDQoNCg0KICAgIGRlZiB0ZXN0X3dpdGhfc3RhdGVtZW50X2V4Y2VwdGlvbihzZWxmKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5Tb21ldGhpbmcyKToNCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nMiwgInVucGF0Y2hlZCIpDQogICAgICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdwb3cnKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uOg0KICAgICAgICAgICAgcGFzcw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZi5mYWlsKCJwYXRjaCBzd2FsbG93ZWQgZXhjZXB0aW9uIikNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykNCg0KDQogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfYXMoc2VsZik6DQogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXykgYXMgbW9ja19zb21ldGhpbmc6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsICJ1bnBhdGNoZWQiKQ0KICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2tfc29tZXRoaW5nLCBNYWdpY01vY2spLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJwYXRjaGluZyB3cm9uZyB0eXBlIikNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfb2JqZWN0X3dpdGhfc3RhdGVtZW50KHNlbGYpOg0KICAgICAgICBjbGFzcyBGb28ob2JqZWN0KToNCiAgICAgICAgICAgIHNvbWV0aGluZyA9ICdmb28nDQogICAgICAgIG9yaWdpbmFsID0gRm9vLnNvbWV0aGluZw0KICAgICAgICB3aXRoIHBhdGNoLm9iamVjdChGb28sICdzb21ldGhpbmcnKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwoRm9vLnNvbWV0aGluZywgb3JpZ2luYWwsICJ1bnBhdGNoZWQiKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKEZvby5zb21ldGhpbmcsIG9yaWdpbmFsKQ0KDQoNCiAgICBkZWYgdGVzdF93aXRoX3N0YXRlbWVudF9uZXN0ZWQoc2VsZik6DQogICAgICAgIHdpdGggY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpOg0KICAgICAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZywgcGF0Y2goJyVzLnNvbWV0aGluZ19lbHNlJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZ19lbHNlOg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpDQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmdfZWxzZSwgbW9ja19zb21ldGhpbmdfZWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bnBhdGNoZWQiKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIHNlbnRpbmVsLlNvbWV0aGluZ0Vsc2UpDQoNCg0KICAgIGRlZiB0ZXN0X3dpdGhfc3RhdGVtZW50X3NwZWNpZmllZChzZWxmKToNCiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5QYXRjaGVkKSBhcyBtb2NrX3NvbWV0aGluZzoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKG1vY2tfc29tZXRoaW5nLCBzZW50aW5lbC5QYXRjaGVkLCAid3JvbmcgcGF0Y2giKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nKQ0KDQoNCiAgICBkZWYgdGVzdENvbnRleHRNYW5hZ2VyTW9ja2luZyhzZWxmKToNCiAgICAgICAgbW9jayA9IE1vY2soKQ0KICAgICAgICBtb2NrLl9fZW50ZXJfXyA9IE1vY2soKQ0KICAgICAgICBtb2NrLl9fZXhpdF9fID0gTW9jaygpDQogICAgICAgIG1vY2suX19leGl0X18ucmV0dXJuX3ZhbHVlID0gRmFsc2UNCg0KICAgICAgICB3aXRoIG1vY2sgYXMgbToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobSwgbW9jay5fX2VudGVyX18ucmV0dXJuX3ZhbHVlKQ0KICAgICAgICBtb2NrLl9fZW50ZXJfXy5hc3NlcnRfY2FsbGVkX3dpdGgoKQ0KICAgICAgICBtb2NrLl9fZXhpdF9fLmFzc2VydF9jYWxsZWRfd2l0aChOb25lLCBOb25lLCBOb25lKQ0KDQoNCiAgICBkZWYgdGVzdF9jb250ZXh0X21hbmFnZXJfd2l0aF9tYWdpY19tb2NrKHNlbGYpOg0KICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCkNCg0KICAgICAgICB3aXRoIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvcik6DQogICAgICAgICAgICB3aXRoIG1vY2s6DQogICAgICAgICAgICAgICAgJ2ZvbycgKyAzDQogICAgICAgIG1vY2suX19lbnRlcl9fLmFzc2VydF9jYWxsZWRfd2l0aCgpDQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShtb2NrLl9fZXhpdF9fLmNhbGxlZCkNCg0KDQogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfc2FtZV9hdHRyaWJ1dGUoc2VsZik6DQogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuUGF0Y2hlZCkgYXMgbW9ja19zb21ldGhpbmc6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsICJ1bnBhdGNoZWQiKQ0KDQogICAgICAgICAgICB3aXRoIHBhdGNoKCclcy5zb21ldGhpbmcnICUgX19uYW1lX18pIGFzIG1vY2tfYWdhaW46DQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIG1vY2tfYWdhaW4sICJ1bnBhdGNoZWQiKQ0KDQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXN0b3JlZCB3aXRoIHdyb25nIGluc3RhbmNlIikNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nLCAibm90IHJlc3RvcmVkIikNCg0KDQogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfaW1icmljYXRlZChzZWxmKToNCiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZzoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpDQoNCiAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZ19lbHNlJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZ19lbHNlOg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIG1vY2tfc29tZXRoaW5nX2Vsc2UsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5wYXRjaGVkIikNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nKQ0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZ19lbHNlLCBzZW50aW5lbC5Tb21ldGhpbmdFbHNlKQ0KDQoNCiAgICBkZWYgdGVzdF9kaWN0X2NvbnRleHRfbWFuYWdlcihzZWxmKToNCiAgICAgICAgZm9vID0ge30NCiAgICAgICAgd2l0aCBwYXRjaC5kaWN0KGZvbywgeydhJzogJ2InfSk6DQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvbywgeydhJzogJ2InfSkNCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChmb28sIHt9KQ0KDQogICAgICAgIHdpdGggc2VsZi5hc3NlcnRSYWlzZXMoTmFtZUVycm9yKToNCiAgICAgICAgICAgIHdpdGggcGF0Y2guZGljdChmb28sIHsnYSc6ICdiJ30pOg0KICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7J2EnOiAnYid9KQ0KICAgICAgICAgICAgICAgIHJhaXNlIE5hbWVFcnJvcignS29ucmFkJykNCg0KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvbywge30pDQoNCg0KDQpjbGFzcyBUZXN0TW9ja09wZW4odW5pdHRlc3QuVGVzdENhc2UpOg0KDQogICAgZGVmIHRlc3RfbW9ja19vcGVuKHNlbGYpOg0KICAgICAgICBtb2NrID0gbW9ja19vcGVuKCkNCiAgICAgICAgd2l0aCBwYXRjaCgnJXMub3BlbicgJSBfX25hbWVfXywgbW9jaywgY3JlYXRlPVRydWUpIGFzIHBhdGNoZWQ6DQogICAgICAgICAgICBzZWxmLmFzc2VydElzKHBhdGNoZWQsIG1vY2spDQogICAgICAgICAgICBvcGVuKCdmb28nKQ0KDQogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoJ2ZvbycpDQoNCg0KICAgIGRlZiB0ZXN0X21vY2tfb3Blbl9jb250ZXh0X21hbmFnZXIoc2VsZik6DQogICAgICAgIG1vY2sgPSBtb2NrX29wZW4oKQ0KICAgICAgICBoYW5kbGUgPSBtb2NrLnJldHVybl92YWx1ZQ0KICAgICAgICB3aXRoIHBhdGNoKCclcy5vcGVuJyAlIF9fbmFtZV9fLCBtb2NrLCBjcmVhdGU9VHJ1ZSk6DQogICAgICAgICAgICB3aXRoIG9wZW4oJ2ZvbycpIGFzIGY6DQogICAgICAgICAgICAgICAgZi5yZWFkKCkNCg0KICAgICAgICBleHBlY3RlZF9jYWxscyA9IFtjYWxsKCdmb28nKSwgY2FsbCgpLl9fZW50ZXJfXygpLCBjYWxsKCkucmVhZCgpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsKCkuX19leGl0X18oTm9uZSwgTm9uZSwgTm9uZSldDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzLCBleHBlY3RlZF9jYWxscykNCiAgICAgICAgc2VsZi5hc3NlcnRJcyhmLCBoYW5kbGUpDQoNCg0KICAgIGRlZiB0ZXN0X2V4cGxpY2l0X21vY2soc2VsZik6DQogICAgICAgIG1vY2sgPSBNYWdpY01vY2soKQ0KICAgICAgICBtb2NrX29wZW4obW9jaykNCg0KICAgICAgICB3aXRoIHBhdGNoKCclcy5vcGVuJyAlIF9fbmFtZV9fLCBtb2NrLCBjcmVhdGU9VHJ1ZSkgYXMgcGF0Y2hlZDoNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMocGF0Y2hlZCwgbW9jaykNCiAgICAgICAgICAgIG9wZW4oJ2ZvbycpDQoNCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgnZm9vJykNCg0KDQogICAgZGVmIHRlc3RfcmVhZF9kYXRhKHNlbGYpOg0KICAgICAgICBtb2NrID0gbW9ja19vcGVuKHJlYWRfZGF0YT0nZm9vJykNCiAgICAgICAgd2l0aCBwYXRjaCgnJXMub3BlbicgJSBfX25hbWVfXywgbW9jaywgY3JlYXRlPVRydWUpOg0KICAgICAgICAgICAgaCA9IG9wZW4oJ2JhcicpDQogICAgICAgICAgICByZXN1bHQgPSBoLnJlYWQoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LCAnZm9vJykNCg0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIHVuaXR0ZXN0Lm1haW4oKQ0K',
'/Lib/unittest/test/testmock/__init__.py':'aW1wb3J0IG9zDQppbXBvcnQgc3lzDQppbXBvcnQgdW5pdHRlc3QNCg0KDQpoZXJlID0gb3MucGF0aC5kaXJuYW1lKF9fZmlsZV9fKQ0KbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXINCg0KZGVmIGxvYWRfdGVzdHMoKmFyZ3MpOg0KICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKCkNCiAgICBmb3IgZm4gaW4gb3MubGlzdGRpcihoZXJlKToNCiAgICAgICAgaWYgZm4uc3RhcnRzd2l0aCgidGVzdCIpIGFuZCBmbi5lbmRzd2l0aCgiLnB5Iik6DQogICAgICAgICAgICBtb2RuYW1lID0gInVuaXR0ZXN0LnRlc3QudGVzdG1vY2suIiArIGZuWzotM10NCiAgICAgICAgICAgIF9faW1wb3J0X18obW9kbmFtZSkNCiAgICAgICAgICAgIG1vZHVsZSA9IHN5cy5tb2R1bGVzW21vZG5hbWVdDQogICAgICAgICAgICBzdWl0ZS5hZGRUZXN0KGxvYWRlci5sb2FkVGVzdHNGcm9tTW9kdWxlKG1vZHVsZSkpDQogICAgcmV0dXJuIHN1aXRlDQo=',
'/Lib/unittest/test/testmock/testcallable.py':'IyBDb3B5cmlnaHQgKEMpIDIwMDctMjAxMiBNaWNoYWVsIEZvb3JkICYgdGhlIG1vY2sgdGVhbQ0KIyBFLW1haWw6IGZ1enp5bWFuIEFUIHZvaWRzcGFjZSBET1Qgb3JnIERPVCB1aw0KIyBodHRwOi8vd3d3LnZvaWRzcGFjZS5vcmcudWsvcHl0aG9uL21vY2svDQoNCmltcG9ydCB1bml0dGVzdA0KZnJvbSB1bml0dGVzdC50ZXN0LnRlc3Rtb2NrLnN1cHBvcnQgaW1wb3J0IGlzX2luc3RhbmNlLCBYLCBTb21lQ2xhc3MNCg0KZnJvbSB1bml0dGVzdC5tb2NrIGltcG9ydCAoDQogICAgTW9jaywgTWFnaWNNb2NrLCBOb25DYWxsYWJsZU1hZ2ljTW9jaywNCiAgICBOb25DYWxsYWJsZU1vY2ssIHBhdGNoLCBjcmVhdGVfYXV0b3NwZWMsDQogICAgQ2FsbGFibGVNaXhpbg0KKQ0KDQoNCg0KY2xhc3MgVGVzdENhbGxhYmxlKHVuaXR0ZXN0LlRlc3RDYXNlKToNCg0KICAgIGRlZiBhc3NlcnROb3RDYWxsYWJsZShzZWxmLCBtb2NrKToNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2ssIE5vbkNhbGxhYmxlTWFnaWNNb2NrKSkNCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShpc19pbnN0YW5jZShtb2NrLCBDYWxsYWJsZU1peGluKSkNCg0KDQogICAgZGVmIHRlc3Rfbm9uX2NhbGxhYmxlKHNlbGYpOg0KICAgICAgICBmb3IgbW9jayBpbiBOb25DYWxsYWJsZU1hZ2ljTW9jaygpLCBOb25DYWxsYWJsZU1vY2soKToNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoaGFzYXR0cihtb2NrLCAnX19jYWxsX18nKSkNCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SW4obW9jay5fX2NsYXNzX18uX19uYW1lX18sIHJlcHIobW9jaykpDQoNCg0KICAgIGRlZiB0ZXN0X2hlaXJhcmNoeShzZWxmKToNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3MoTWFnaWNNb2NrLCBNb2NrKSkNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3MoTm9uQ2FsbGFibGVNYWdpY01vY2ssIE5vbkNhbGxhYmxlTW9jaykpDQoNCg0KICAgIGRlZiB0ZXN0X2F0dHJpYnV0ZXMoc2VsZik6DQogICAgICAgIG9uZSA9IE5vbkNhbGxhYmxlTW9jaygpDQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUob25lLm9uZSksIE1vY2spKQ0KDQogICAgICAgIHR3byA9IE5vbkNhbGxhYmxlTWFnaWNNb2NrKCkNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3ModHlwZSh0d28udHdvKSwgTWFnaWNNb2NrKSkNCg0KDQogICAgZGVmIHRlc3Rfc3ViY2xhc3NlcyhzZWxmKToNCiAgICAgICAgY2xhc3MgTW9ja1N1YihNb2NrKToNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICBvbmUgPSBNb2NrU3ViKCkNCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3ModHlwZShvbmUub25lKSwgTW9ja1N1YikpDQoNCiAgICAgICAgY2xhc3MgTWFnaWNTdWIoTWFnaWNNb2NrKToNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICB0d28gPSBNYWdpY1N1YigpDQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUodHdvLnR3byksIE1hZ2ljU3ViKSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfc3BlYyhzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVRydWUpDQogICAgICAgIG1vY2sgPSBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHBhdGNoZXIuc3RvcCkNCg0KICAgICAgICBpbnN0YW5jZSA9IG1vY2soKQ0KICAgICAgICBtb2NrLmFzc2VydF9jYWxsZWRfb25jZV93aXRoKCkNCg0KICAgICAgICBzZWxmLmFzc2VydE5vdENhbGxhYmxlKGluc3RhbmNlKQ0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIGluc3RhbmNlKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9zcGVjX3NldChzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1UcnVlKQ0KICAgICAgICBtb2NrID0gcGF0Y2hlci5zdGFydCgpDQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChwYXRjaGVyLnN0b3ApDQoNCiAgICAgICAgaW5zdGFuY2UgPSBtb2NrKCkNCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpDQoNCiAgICAgICAgc2VsZi5hc3NlcnROb3RDYWxsYWJsZShpbnN0YW5jZSkNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBpbnN0YW5jZSkNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19pbnN0YW5jZShzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVgoKSkNCiAgICAgICAgbW9jayA9IHBhdGNoZXIuc3RhcnQoKQ0KICAgICAgICBzZWxmLmFkZENsZWFudXAocGF0Y2hlci5zdG9wKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUobW9jaykNCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBtb2NrKQ0KDQoNCiAgICBkZWYgdGVzdF9wYXRjaF9zcGVjX3NldF9pbnN0YW5jZShzZWxmKToNCiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1YKCkpDQogICAgICAgIG1vY2sgPSBwYXRjaGVyLnN0YXJ0KCkNCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHBhdGNoZXIuc3RvcCkNCg0KICAgICAgICBzZWxmLmFzc2VydE5vdENhbGxhYmxlKG1vY2spDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykNCg0KDQogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19jYWxsYWJsZV9jbGFzcyhzZWxmKToNCiAgICAgICAgY2xhc3MgQ2FsbGFibGVYKFgpOg0KICAgICAgICAgICAgZGVmIF9fY2FsbF9fKHNlbGYpOg0KICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICBjbGFzcyBTdWIoQ2FsbGFibGVYKToNCiAgICAgICAgICAgIHBhc3MNCg0KICAgICAgICBjbGFzcyBNdWx0aShTb21lQ2xhc3MsIFN1Yik6DQogICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgZm9yIGFyZyBpbiAnc3BlYycsICdzcGVjX3NldCc6DQogICAgICAgICAgICBmb3IgS2xhc3MgaW4gQ2FsbGFibGVYLCBTdWIsIE11bHRpOg0KICAgICAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLlgnICUgX19uYW1lX18sICoqe2FyZzogS2xhc3N9KSBhcyBtb2NrOg0KICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IG1vY2soKQ0KICAgICAgICAgICAgICAgICAgICBtb2NrLmFzc2VydF9jYWxsZWRfb25jZV93aXRoKCkNCg0KICAgICAgICAgICAgICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNfaW5zdGFuY2UoaW5zdGFuY2UsIE1hZ2ljTW9jaykpDQogICAgICAgICAgICAgICAgICAgICMgaW5oZXJpdGVkIHNwZWMNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIGluc3RhbmNlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9vYmFyYmF6JykNCg0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbnN0YW5jZSgpDQogICAgICAgICAgICAgICAgICAgICMgaW5zdGFuY2UgaXMgY2FsbGFibGUsIHJlc3VsdCBoYXMgbm8gc3BlYw0KICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpDQoNCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0KDMsIDIsIDEpDQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgzLCAyLCAxKQ0KICAgICAgICAgICAgICAgICAgICByZXN1bHQuZm9vKDMsIDIsIDEpDQogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5mb28uYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoMywgMiwgMSkNCg0KDQogICAgZGVmIHRlc3RfY3JlYXRlX2F1dG9wc2VjKHNlbGYpOg0KICAgICAgICBtb2NrID0gY3JlYXRlX2F1dG9zcGVjKFgpDQogICAgICAgIGluc3RhbmNlID0gbW9jaygpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgaW5zdGFuY2UpDQoNCiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhYKCkpDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykNCg0KDQogICAgZGVmIHRlc3RfY3JlYXRlX2F1dG9zcGVjX2luc3RhbmNlKHNlbGYpOg0KICAgICAgICBtb2NrID0gY3JlYXRlX2F1dG9zcGVjKFNvbWVDbGFzcywgaW5zdGFuY2U9VHJ1ZSkNCg0KICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG1vY2spDQogICAgICAgIG1vY2sud2liYmxlKCkNCiAgICAgICAgbW9jay53aWJibGUuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQ0KDQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jay53aWJibGUsICdzb21lJywgICdhcmdzJykNCg==',
'/Lib/unittest/test/testmock/testmagicmethods.py':'',
'/Lib/urllib/request.py':'aW1wb3J0IGFqYXgKCmNsYXNzIEZpbGVJTzoKICBkZWYgX19pbml0X18oc2VsZiwgZGF0YSk6CiAgICAgIHNlbGYuX2RhdGE9ZGF0YQoKICBkZWYgcmVhZChzZWxmKToKICAgICAgcmV0dXJuIHNlbGYuX2RhdGEKCmRlZiB1cmxvcGVuKHVybCwgZGF0YT1Ob25lLCB0aW1lb3V0PU5vbmUpOgogICAgZ2xvYmFsIHJlc3VsdAogICAgcmVzdWx0PU5vbmUKCiAgICBkZWYgb25fY29tcGxldGUocmVxKToKICAgICAgICBnbG9iYWwgcmVzdWx0CiAgICAgICAgcmVzdWx0PXJlcQoKICAgIF9hamF4PWFqYXguYWpheCgpCiAgICBfYWpheC5iaW5kKCdjb21wbGV0ZScsIG9uX2NvbXBsZXRlKQogICAgaWYgdGltZW91dCBpcyBub3QgTm9uZToKICAgICAgIF9hamF4LnNldF90aW1lb3V0KHRpbWVvdXQpCgogICAgX2FqYXgub3BlbignR0VUJywgdXJsLCBGYWxzZSkKICAgIGlmIGRhdGEgaXMgTm9uZToKICAgICAgIF9hamF4LnNlbmQoKQogICAgZWxzZToKICAgICAgIF9hamF4LnNlbmQoZGF0YSkKCiAgICByZXR1cm4gRmlsZUlPKHJlc3VsdC50ZXh0KSwgdXJsLCByZXN1bHQuaGVhZGVycwo=',
'/Lib/urllib/__init__.py':'',
'/Lib/test/support.py':'',
'/Lib/test/__init__.py':'IyBEdW1teSBmaWxlIHRvIG1ha2UgdGhpcyBkaXJlY3RvcnkgYSBwYWNrYWdlLgo=',
'/Lib/test/pystone.py':'',
'/Lib/test/test_int.py':'aW1wb3J0IHN5cwoKaW1wb3J0IHVuaXR0ZXN0CmZyb20gdGVzdC5zdXBwb3J0IGltcG9ydCBydW5fdW5pdHRlc3QKCkwgPSBbCiAgICAgICAgKCcwJywgMCksCiAgICAgICAgKCcxJywgMSksCiAgICAgICAgKCc5JywgOSksCiAgICAgICAgKCcxMCcsIDEwKSwKICAgICAgICAoJzk5JywgOTkpLAogICAgICAgICgnMTAwJywgMTAwKSwKICAgICAgICAoJzMxNCcsIDMxNCksCiAgICAgICAgKCcgMzE0JywgMzE0KSwKICAgICAgICAoJzMxNCAnLCAzMTQpLAogICAgICAgICgnICBcdFx0ICAzMTQgIFx0XHQgICcsIDMxNCksCiAgICAgICAgKHJlcHIoc3lzLm1heHNpemUpLCBzeXMubWF4c2l6ZSksCiAgICAgICAgKCcgIDF4JywgVmFsdWVFcnJvciksCiAgICAgICAgKCcgIDEgICcsIDEpLAogICAgICAgICgnICAxXDAyICAnLCBWYWx1ZUVycm9yKSwKICAgICAgICAoJycsIFZhbHVlRXJyb3IpLAogICAgICAgICgnICcsIFZhbHVlRXJyb3IpLAogICAgICAgICgnICBcdFx0ICAnLCBWYWx1ZUVycm9yKSwKICAgICAgICAoIlx1MDIwMCIsIFZhbHVlRXJyb3IpCl0KCmNsYXNzIEludFRlc3RDYXNlcyh1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHRlc3RfYmFzaWMoc2VsZik6CiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoMzE0KSwgMzE0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KDMuMTQpLCAzKQogICAgICAgICMgQ2hlY2sgdGhhdCBjb252ZXJzaW9uIGZyb20gZmxvYXQgdHJ1bmNhdGVzIHRvd2FyZHMgemVybwogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KC0zLjE0KSwgLTMpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoMy45KSwgMykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgtMy45KSwgLTMpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoMy41KSwgMykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgtMy41KSwgLTMpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoIi0zIiksIC0zKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCIgLTMgIiksIC0zKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCJcTntFTSBTUEFDRX0tM1xOe0VOIFNQQUNFfSIpLCAtMykKICAgICAgICAjIERpZmZlcmVudCBiYXNlOgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCIxMCIsMTYpLCAxNikKICAgICAgICAjIFRlc3QgY29udmVyc2lvbiBmcm9tIHN0cmluZ3MgYW5kIHZhcmlvdXMgYW5vbWFsaWVzCiAgICAgICAgZm9yIHMsIHYgaW4gTDoKICAgICAgICAgICAgZm9yIHNpZ24gaW4gIiIsICIrIiwgIi0iOgogICAgICAgICAgICAgICAgZm9yIHByZWZpeCBpbiAiIiwgIiAiLCAiXHQiLCAiICBcdFx0ICAiOgogICAgICAgICAgICAgICAgICAgIHNzID0gcHJlZml4ICsgc2lnbiArIHMKICAgICAgICAgICAgICAgICAgICB2diA9IHYKICAgICAgICAgICAgICAgICAgICBpZiBzaWduID09ICItIiBhbmQgdiBpcyBub3QgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgdnYgPSAtdgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoc3MpLCB2dikKICAgICAgICAgICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICBzID0gcmVwcigtMS1zeXMubWF4c2l6ZSkKICAgICAgICB4ID0gaW50KHMpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCh4KzEsIC1zeXMubWF4c2l6ZSkKICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UoeCwgaW50KQogICAgICAgICMgc2hvdWxkIHJldHVybiBpbnQKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludChzWzE6XSksIHN5cy5tYXhzaXplKzEpCgogICAgICAgICMgc2hvdWxkIHJldHVybiBpbnQKICAgICAgICB4ID0gaW50KDFlMTAwKQogICAgICAgIHNlbGYuYXNzZXJ0SXNJbnN0YW5jZSh4LCBpbnQpCiAgICAgICAgeCA9IGludCgtMWUxMDApCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHgsIGludCkKCgogICAgICAgICMgU0YgYnVnIDQzNDE4NjogIDB4ODAwMDAwMDAvMiAhPSAweDgwMDAwMDAwPj4xLgogICAgICAgICMgV29ya2VkIGJ5IGFjY2lkZW50IGluIFdpbmRvd3MgcmVsZWFzZSBidWlsZCwgYnV0IGZhaWxlZCBpbiBkZWJ1ZyBidWlsZC4KICAgICAgICAjIEZhaWxlZCBpbiBhbGwgTGludXggYnVpbGRzLgogICAgICAgIHggPSAtMS1zeXMubWF4c2l6ZQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoeCA+PiAxLCB4Ly8yKQoKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhWYWx1ZUVycm9yLCBpbnQsICcxMjNcMCcpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVmFsdWVFcnJvciwgaW50LCAnNTMnLCA0MCkKCiAgICAgICAgIyBTRiBidWcgMTU0NTQ5NzogZW1iZWRkZWQgTlVMcyB3ZXJlIG5vdCBkZXRlY3RlZCB3aXRoCiAgICAgICAgIyBleHBsaWNpdCBiYXNlCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVmFsdWVFcnJvciwgaW50LCAnMTIzXDAnLCAxMCkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhWYWx1ZUVycm9yLCBpbnQsICcxMjNceDAwIDI0NScsIDIwKQoKICAgICAgICB4ID0gaW50KCcxJyAqIDYwMCkKICAgICAgICBzZWxmLmFzc2VydElzSW5zdGFuY2UoeCwgaW50KQoKCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBpbnQsIDEsIDEyKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMG8xMjMnLCAwKSwgODMpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzB4MTIzJywgMTYpLCAyOTEpCgogICAgICAgICMgQnVnIDE2Nzk6ICIweCIgaXMgbm90IGEgdmFsaWQgaGV4IGxpdGVyYWwKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhWYWx1ZUVycm9yLCBpbnQsICIweCIsIDE2KQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFZhbHVlRXJyb3IsIGludCwgIjB4IiwgMCkKCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVmFsdWVFcnJvciwgaW50LCAiMG8iLCA4KQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFZhbHVlRXJyb3IsIGludCwgIjBvIiwgMCkKCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVmFsdWVFcnJvciwgaW50LCAiMGIiLCAyKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFZhbHVlRXJyb3IsIGludCwgIjBiIiwgMCkKCiAgICAgICAgIyBCdWcgIzMyMzY6IFJldHVybiBzbWFsbCBsb25ncyBmcm9tIFB5TG9uZ19Gcm9tU3RyaW5nCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGludCgiMTAiKSBpcyAxMCkKICAgICAgICBzZWxmLmFzc2VydFRydWUoaW50KCItMSIpIGlzIC0xKQoKICAgICAgICAjIFNGIGJ1ZyAxMzM0NjYyOiBpbnQoc3RyaW5nLCBiYXNlKSB3cm9uZyBhbnN3ZXJzCiAgICAgICAgIyBWYXJpb3VzIHJlcHJlc2VudGF0aW9ucyBvZiAyKiozMiBldmFsdWF0ZWQgdG8gMAogICAgICAgICMgcmF0aGVyIHRoYW4gMioqMzIgaW4gcHJldmlvdXMgdmVyc2lvbnMKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsIDIpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcxMDIwMDIwMjIyMDEyMjExMTEyMTEnLCAzKSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMTAwMDAwMDAwMDAwMDAwMDAnLCA0KSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMzIyNDQwMDI0MjMxNDEnLCA1KSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMTU1MDEwNDAxNTUwNCcsIDYpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcyMTEzMDE0MjIzNTQnLCA3KSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnNDAwMDAwMDAwMDAnLCA4KSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMTIwNjg2NTc0NTQnLCA5KSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnNDI5NDk2NzI5NicsIDEwKSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMTkwNDQ0MDU1NCcsIDExKSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnOWJhNDYxNTk0JywgMTIpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc1MzVhNzk4ODknLCAxMyksIDQyOTQ5NjcyOTYpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzJjYTViNzQ2NCcsIDE0KSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMWEyMGRjZDgxJywgMTUpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcxMDAwMDAwMDAnLCAxNiksIDQyOTQ5NjcyOTYpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJ2E3ZmZkYTkxJywgMTcpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc3MDRoZTdnNCcsIDE4KSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnNGY1YWZmNjYnLCAxOSksIDQyOTQ5NjcyOTYpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzM3MjNhaTRnJywgMjApLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcyODFkNTVpNCcsIDIxKSwgNDI5NDk2NzI5NikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMWZqOGIxODQnLCAyMiksIDQyOTQ5NjcyOTYpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzE2MDZrN2ljJywgMjMpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCdtYjk5NGFnJywgMjQpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCdoZWsybWdsJywgMjUpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCdkbmNoYm5tJywgMjYpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCdiMjhqcGRtJywgMjcpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc4cGZnaWg0JywgMjgpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc3NmJlaWdnJywgMjkpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc1cW1jcHFnJywgMzApLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc0cTBqdG80JywgMzEpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc0MDAwMDAwJywgMzIpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCczYW9rcTk0JywgMzMpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcycWh4amxpJywgMzQpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcyYnI0NXFiJywgMzUpLCA0Mjk0OTY3Mjk2KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcxejE0MXo0JywgMzYpLCA0Mjk0OTY3Mjk2KQoKICAgICAgICAjIHRlc3RzIHdpdGggYmFzZSAwCiAgICAgICAgIyB0aGlzIGZhaWxzIG9uIDMuMCwgYnV0IGluIDIueCB0aGUgb2xkIG9jdGFsIHN5bnRheCBpcyBhbGxvd2VkCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJyAwbzEyMyAgJywgMCksIDgzKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcgMG8xMjMgICcsIDApLCA4MykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMDAwJywgMCksIDApCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzBvMTIzJywgMCksIDgzKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcweDEyMycsIDApLCAyOTEpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzBiMTAwJywgMCksIDQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJyAwTzEyMyAgICcsIDApLCA4MykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnIDBYMTIzICAnLCAwKSwgMjkxKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcgMEIxMDAgJywgMCksIDQpCgogICAgICAgICMgd2l0aG91dCBiYXNlIHN0aWxsIGJhc2UgMTAKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMDEyMycpLCAxMjMpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzAxMjMnLCAxMCksIDEyMykKCiAgICAgICAgIyB0ZXN0cyB3aXRoIHByZWZpeCBhbmQgYmFzZSAhPSAwCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzB4MTIzJywgMTYpLCAyOTEpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzBvMTIzJywgOCksIDgzKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcwYjEwMCcsIDIpLCA0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcwWDEyMycsIDE2KSwgMjkxKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcwTzEyMycsIDgpLCA4MykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMEIxMDAnLCAyKSwgNCkKCiAgICAgICAgIyB0aGUgY29kZSBoYXMgc3BlY2lhbCBjaGVja3MgZm9yIHRoZSBmaXJzdCBjaGFyYWN0ZXIgYWZ0ZXIgdGhlCiAgICAgICAgIyAgdHlwZSBwcmVmaXgKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhWYWx1ZUVycm9yLCBpbnQsICcwYjInLCAyKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFZhbHVlRXJyb3IsIGludCwgJzBiMDInLCAyKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFZhbHVlRXJyb3IsIGludCwgJzBCMicsIDIpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVmFsdWVFcnJvciwgaW50LCAnMEIwMicsIDIpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVmFsdWVFcnJvciwgaW50LCAnMG84JywgOCkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhWYWx1ZUVycm9yLCBpbnQsICcwbzA4JywgOCkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhWYWx1ZUVycm9yLCBpbnQsICcwTzgnLCA4KQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFZhbHVlRXJyb3IsIGludCwgJzBPMDgnLCA4KQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFZhbHVlRXJyb3IsIGludCwgJzB4ZycsIDE2KQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFZhbHVlRXJyb3IsIGludCwgJzB4MGcnLCAxNikKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhWYWx1ZUVycm9yLCBpbnQsICcwWGcnLCAxNikKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhWYWx1ZUVycm9yLCBpbnQsICcwWDBnJywgMTYpCgogICAgICAgICMgU0YgYnVnIDEzMzQ2NjI6IGludChzdHJpbmcsIGJhc2UpIHdyb25nIGFuc3dlcnMKICAgICAgICAjIENoZWNrcyBmb3IgcHJvcGVyIGV2YWx1YXRpb24gb2YgMioqMzIgKyAxCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsIDIpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcxMDIwMDIwMjIyMDEyMjExMTEyMTInLCAzKSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMTAwMDAwMDAwMDAwMDAwMDEnLCA0KSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMzIyNDQwMDI0MjMxNDInLCA1KSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMTU1MDEwNDAxNTUwNScsIDYpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcyMTEzMDE0MjIzNTUnLCA3KSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnNDAwMDAwMDAwMDEnLCA4KSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMTIwNjg2NTc0NTUnLCA5KSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnNDI5NDk2NzI5NycsIDEwKSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMTkwNDQ0MDU1NScsIDExKSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnOWJhNDYxNTk1JywgMTIpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc1MzVhNzk4OGEnLCAxMyksIDQyOTQ5NjcyOTcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzJjYTViNzQ2NScsIDE0KSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMWEyMGRjZDgyJywgMTUpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcxMDAwMDAwMDEnLCAxNiksIDQyOTQ5NjcyOTcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJ2E3ZmZkYTkyJywgMTcpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc3MDRoZTdnNScsIDE4KSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnNGY1YWZmNjcnLCAxOSksIDQyOTQ5NjcyOTcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzM3MjNhaTRoJywgMjApLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcyODFkNTVpNScsIDIxKSwgNDI5NDk2NzI5NykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludCgnMWZqOGIxODUnLCAyMiksIDQyOTQ5NjcyOTcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoJzE2MDZrN2lkJywgMjMpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCdtYjk5NGFoJywgMjQpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCdoZWsybWdtJywgMjUpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCdkbmNoYm5uJywgMjYpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCdiMjhqcGRuJywgMjcpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc4cGZnaWg1JywgMjgpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc3NmJlaWdoJywgMjkpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc1cW1jcHFoJywgMzApLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc0cTBqdG81JywgMzEpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCc0MDAwMDAxJywgMzIpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCczYW9rcTk1JywgMzMpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcycWh4amxqJywgMzQpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcyYnI0NXFjJywgMzUpLCA0Mjk0OTY3Mjk3KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoaW50KCcxejE0MXo1JywgMzYpLCA0Mjk0OTY3Mjk3KQoKICAgIGRlZiB0ZXN0X2ludGNvbnZlcnNpb24oc2VsZik6CiAgICAgICAgIyBUZXN0IF9faW50X18oKQogICAgICAgIGNsYXNzIENsYXNzaWNNaXNzaW5nTWV0aG9kczoKICAgICAgICAgICAgcGFzcwogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgaW50LCBDbGFzc2ljTWlzc2luZ01ldGhvZHMoKSkKCiAgICAgICAgY2xhc3MgTWlzc2luZ01ldGhvZHMob2JqZWN0KToKICAgICAgICAgICAgcGFzcwogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgaW50LCBNaXNzaW5nTWV0aG9kcygpKQoKICAgICAgICBjbGFzcyBGb28wOgogICAgICAgICAgICBkZWYgX19pbnRfXyhzZWxmKToKICAgICAgICAgICAgICAgIHJldHVybiA0MgoKICAgICAgICBjbGFzcyBGb28xKG9iamVjdCk6CiAgICAgICAgICAgIGRlZiBfX2ludF9fKHNlbGYpOgogICAgICAgICAgICAgICAgcmV0dXJuIDQyCgogICAgICAgIGNsYXNzIEZvbzIoaW50KToKICAgICAgICAgICAgZGVmIF9faW50X18oc2VsZik6CiAgICAgICAgICAgICAgICByZXR1cm4gNDIKCiAgICAgICAgY2xhc3MgRm9vMyhpbnQpOgogICAgICAgICAgICBkZWYgX19pbnRfXyhzZWxmKToKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmCgogICAgICAgIGNsYXNzIEZvbzQoaW50KToKICAgICAgICAgICAgZGVmIF9faW50X18oc2VsZik6CiAgICAgICAgICAgICAgICByZXR1cm4gNDIKCiAgICAgICAgY2xhc3MgRm9vNShpbnQpOgogICAgICAgICAgICBkZWYgX19pbnRfXyhzZWxmKToKICAgICAgICAgICAgICAgIHJldHVybiA0Mi4KCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoRm9vMCgpKSwgNDIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoRm9vMSgpKSwgNDIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoRm9vMigpKSwgNDIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoRm9vMygpKSwgMCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludChGb280KCkpLCA0MikKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIGludCwgRm9vNSgpKQoKICAgICAgICBjbGFzcyBDbGFzc2ljOgogICAgICAgICAgICBwYXNzCiAgICAgICAgZm9yIGJhc2UgaW4gKG9iamVjdCwgQ2xhc3NpYyk6CiAgICAgICAgICAgIGNsYXNzIEludE92ZXJyaWRlc1RydW5jKGJhc2UpOgogICAgICAgICAgICAgICAgZGVmIF9faW50X18oc2VsZik6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQyCiAgICAgICAgICAgICAgICBkZWYgX190cnVuY19fKHNlbGYpOgogICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTIKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoSW50T3ZlcnJpZGVzVHJ1bmMoKSksIDQyKQoKICAgICAgICAgICAgY2xhc3MgSnVzdFRydW5jKGJhc2UpOgogICAgICAgICAgICAgICAgZGVmIF9fdHJ1bmNfXyhzZWxmKToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gNDIKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChpbnQoSnVzdFRydW5jKCkpLCA0MikKCiAgICAgICAgICAgIGZvciB0cnVuY19yZXN1bHRfYmFzZSBpbiAob2JqZWN0LCBDbGFzc2ljKToKICAgICAgICAgICAgICAgIGNsYXNzIEludGVncmFsKHRydW5jX3Jlc3VsdF9iYXNlKToKICAgICAgICAgICAgICAgICAgICBkZWYgX19pbnRfXyhzZWxmKToKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQyCgogICAgICAgICAgICAgICAgY2xhc3MgVHJ1bmNSZXR1cm5zTm9uSW50KGJhc2UpOgogICAgICAgICAgICAgICAgICAgIGRlZiBfX3RydW5jX18oc2VsZik6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJbnRlZ3JhbCgpCiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGludChUcnVuY1JldHVybnNOb25JbnQoKSksIDQyKQoKICAgICAgICAgICAgICAgIGNsYXNzIE5vbkludGVncmFsKHRydW5jX3Jlc3VsdF9iYXNlKToKICAgICAgICAgICAgICAgICAgICBkZWYgX190cnVuY19fKHNlbGYpOgogICAgICAgICAgICAgICAgICAgICAgICAjIENoZWNrIHRoYXQgd2UgYXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uLgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTm9uSW50ZWdyYWwoKQoKICAgICAgICAgICAgICAgIGNsYXNzIFRydW5jUmV0dXJuc05vbkludGVncmFsKGJhc2UpOgogICAgICAgICAgICAgICAgICAgIGRlZiBfX3RydW5jX18oc2VsZik6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBOb25JbnRlZ3JhbCgpCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgaW50KFRydW5jUmV0dXJuc05vbkludGVncmFsKCkpCiAgICAgICAgICAgICAgICBleGNlcHQgVHlwZUVycm9yIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdHIoZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIl9fdHJ1bmNfXyByZXR1cm5lZCBub24tSW50ZWdyYWwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAodHlwZSBOb25JbnRlZ3JhbCkiKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIkZhaWxlZCB0byByYWlzZSBUeXBlRXJyb3Igd2l0aCAlcyIgJQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGJhc2UsIHRydW5jX3Jlc3VsdF9iYXNlKSwpKQoKICAgIGRlZiB0ZXN0X2Vycm9yX21lc3NhZ2Uoc2VsZik6CiAgICAgICAgdGVzdGxpc3QgPSAoJ1x4YmQnLCAnMTIzXHhiZCcsICcgIDEyMyA0NTYgICcpCiAgICAgICAgZm9yIHMgaW4gdGVzdGxpc3Q6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGludChzKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvciBhcyBlOgogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRJbihzLnN0cmlwKCksIGUuYXJnc1swXSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiRXhwZWN0ZWQgaW50KCVyKSB0byByYWlzZSBhIFZhbHVlRXJyb3IiLCBzKQoKZGVmIHRlc3RfbWFpbigpOgogICAgcnVuX3VuaXR0ZXN0KEludFRlc3RDYXNlcykKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICB0ZXN0X21haW4oKQo=',
'/Lib/test/regrtest.py':'',
'/Lib/ui/progressbar.py':'aW1wb3J0IHdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFByb2dyZXNzQmFyKHdpZGdldC5XaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiKQogICAgICB3aWRnZXQuV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIHNlbGYuX2Rpdl9zaGVsbCwgJ3Byb2dyZXNzYmFyJywgaWQpCgogICAgICBzZWxmLl9zaG93X2xhYmVsPWxhYmVsCiAgICAgIGlmIGxhYmVsOgogICAgICAgICBzZWxmLl9sYWJlbD1odG1sLkRJVihDbGFzcz0ncHJvZ3Jlc3MtbGFiZWwnKQogICAgICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fbGFiZWwKCiAgICAgIHNlbGYuX2Jhcj1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXItdmFsdWUgdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItbGVmdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17J3dpZHRoJzogJzBweCd9KQogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fYmFyCgogIGRlZiBzZXRfcHJvZ3Jlc3Moc2VsZiwgcGVyY2VudCk6CiAgICAgIHNlbGYuX2Jhci5zdHlsZS53aWR0aD0nJXMlJScgJSBwZXJjZW50CiAgICAgIGlmIHNlbGYuX3Nob3dfbGFiZWw6CiAgICAgICAgIHNlbGYuX2xhYmVsLnRleHQ9JyVzJSUnICUgcGVyY2VudAo=',
'/Lib/ui/slider.py':'aW1wb3J0IHdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGRvYyxodG1sCgpjbGFzcyBTbGlkZXIod2lkZ2V0LldpZGdldCk6CgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lLCBsYWJlbD1GYWxzZSk6CgogICAgICBzZWxmLl9kaXZfc2hlbGw9aHRtbC5ESVYoQ2xhc3M9InVpLXNsaWRlciB1aS1zbGlkZXItaG9yaXpvbnRhbCB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbCIpCgogICAgICB3aWRnZXQuV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIHNlbGYuX2Rpdl9zaGVsbCwgJ3NsaWRlcicsIGlkKQoKICAgICAgc2VsZi5faGFuZGxlPWh0bWwuQShDbGFzcz0idWktc2xpZGVyLWhhbmRsZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1hbGwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIEhyZWY9JyMnLCBzdHlsZT17J2xlZnQnOiAnMHB4J30pCiAgICAgIHNlbGYuX3ZhbHVlPTAKICAgICAgc2VsZi5faXNNb3VzZURvd249RmFsc2UKCiAgICAgIGRlZiBzdGFydFNsaWRlKGUpOgogICAgICAgICAgc2VsZi5faXNNb3VzZURvd249VHJ1ZQogICAgICAgICAgc2VsZi5fdXBwZXJCb3VuZCA9IHNlbGYuX2Rpdl9zaGVsbC5vZmZzZXRXaWR0aCAtIHNlbGYuX2hhbmRsZS5vZmZzZXRXaWR0aAoKICAgICAgICAgIHBvcyA9IHdpZGdldC5nZXRNb3VzZVBvc2l0aW9uKGUpCiAgICAgICAgICBzZWxmLl9zdGFydE1vdXNlWD1wb3NbJ3gnXQoKICAgICAgICAgIHNlbGYuX2xhc3RFbGVtZW50TGVmdCA9IHBhcnNlSW50KHNlbGYuX2hhbmRsZS5zdHlsZS5sZWZ0KQogICAgICAgICAgdXBkYXRlUG9zaXRpb24oZSkKCiAgICAgIGRlZiB1cGRhdGVQb3NpdGlvbihlKToKICAgICAgICAgIHBvcyA9IHdpZGdldC5nZXRNb3VzZVBvc2l0aW9uKGUpCiAgICAgICAgICAjcHJpbnQoJ21vc2UgcG9zJyxwb3MpCiAgICAgICAgICBfbmV3UG9zID0gc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ICsgcG9zWyd4J10gLSBzZWxmLl9zdGFydE1vdXNlWAogICAgICAgICAgCiAgICAgICAgICBfbmV3UG9zID0gbWF4KDAsIF9uZXdQb3MpCiAgICAgICAgICBfbmV3UG9zID0gbWluKF9uZXdQb3MsIHNlbGYuX3VwcGVyQm91bmQpCgogICAgICAgICAgc2VsZi5faGFuZGxlLnN0eWxlLmxlZnQgPSAnJXNweCcgJSBfbmV3UG9zCiAgICAgICAgICAjcHJpbnQoJ25ldyBwb3NpdGlvbicsc2VsZi5faGFuZGxlLnN0eWxlLmxlZnQpCiAgICAgICAgICBzZWxmLl9sYXN0RWxlbWVudExlZnQgPSBfbmV3UG9zCgogICAgICBkZWYgbW92aW5nKGUpOgogICAgICAgICAgaWYgc2VsZi5faXNNb3VzZURvd246CiAgICAgICAgICAgICB1cGRhdGVQb3NpdGlvbihlKQoKICAgICAgZGVmIGRyb3BDYWxsYmFjayhlKToKICAgICAgICAgIHNlbGYuX2lzTW91c2VEb3duPUZhbHNlCiAgICAgICAgICBzZWxmLl9oYW5kbGUudW5iaW5kKCdtb3VzZW1vdmUnLCBtb3ZpbmcpCgoKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlbW92ZScsIG1vdmluZykKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNldXAnLCBkcm9wQ2FsbGJhY2spCiAgICAgICNzZWxmLl9oYW5kbGUuYmluZCgnbW91c2VvdXQnLCBkcm9wQ2FsbGJhY2spCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZWRvd24nLCBzdGFydFNsaWRlKQoKICAgICAgZGVmIG1vdXNlb3ZlcihlKToKICAgICAgICAgIF9jbGFzcz1zZWxmLl9oYW5kbGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpCiAgICAgICAgICBzZWxmLl9oYW5kbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICclcyAlcycgJSAoX2NsYXNzLCAndWktc3RhdGUtaG92ZXInKSkKCiAgICAgIGRlZiBtb3VzZW91dChlKToKICAgICAgICAgIHNlbGYuX2lzTW91c2VEb3duPUZhbHNlCiAgICAgICAgICBfY2xhc3M9c2VsZi5faGFuZGxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKQogICAgICAgICAgc2VsZi5faGFuZGxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBfY2xhc3MucmVwbGFjZSgndWktc3RhdGUtaG92ZXInLCAnJykpCgogICAgICBzZWxmLl9oYW5kbGUuYmluZCgnbW91c2VvdmVyJywgbW91c2VvdmVyKQogICAgICBzZWxmLl9oYW5kbGUuYmluZCgnbW91c2VvdXQnLCBtb3VzZW91dCkKCiAgICAgIHNlbGYuX2Rpdl9zaGVsbCA8PSBzZWxmLl9oYW5kbGUKCiAgZGVmIGdldF92YWx1ZShzZWxmKToKICAgICAgcmV0dXJuIHNlbGYuX3ZhbHVlCgogICNkZWYgc2V0X3ZhbHVlKHNlbGYsIHZhbHVlKToKICAjICAgIHNlbGYuX3ZhbHVlPXZhbHVlCiAgIyAgIHNlbGYuX2hhbmRsZS5zdHlsZS5sZWZ0PSclc3B4JyAlIHZhbHVlCg==',
'/Lib/ui/__init__.py':'ZnJvbSBicm93c2VyIGltcG9ydCBodG1sLCBkb2MgYXMgZG9jdW1lbnQKZnJvbSBkaWFsb2cgaW1wb3J0ICoKZnJvbSBwcm9ncmVzc2JhciBpbXBvcnQgKgpmcm9tIHNsaWRlciBpbXBvcnQgKgoKZGVmIGFkZF9zdHlsZXNoZWV0KCk6CiAgICBfbGluaz1odG1sLkxJTksoSHJlZj0nL3NyYy9MaWIvdWkvY3NzL3Ntb290aG5lc3MvanF1ZXJ5LXVpLTEuMTAuMy5jdXN0b20ubWluLmNzcycpCiAgICBfbGluay5yZWw9J3N0eWxlc2hlZXQnCgogICAgZG9jIDw9IF9saW5rICAgICAjIGRvY3VtZW50IGRvZXNuJ3Qgd29yayBoZXJlLi4gOiggbXVzdCB1c2UgZG9jIAo=',
'/Lib/ui/widget.py':'aW1wb3J0IHJhbmRvbQpmcm9tIGJyb3dzZXIgaW1wb3J0IGRvYwoKZGVmIGdldE1vdXNlUG9zaXRpb24oZSk6CiAgICBpZiBlIGlzIE5vbmU6CiAgICAgICBlPXdpbi5ldmVudAoKICAgIGlmIGUucGFnZVggb3IgZS5wYWdlWToKICAgICAgIHJldHVybiB7J3gnOiBlLnBhZ2VYLCAneSc6IGUucGFnZVl9CgogICAgaWYgZS5jbGllbnRYIG9yIGUuY2xpZW50WToKICAgICAgIF9wb3N4PWUuY2xpZW50WCArIGRvYy5ib2R5LnNjcm9sbExlZnQgKyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7CiAgICAgICBfcG9zeT1lLmNsaWVudFkgKyBkb2MuYm9keS5zY3JvbGxUb3AgKyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDsKICAgICAgIHJldHVybiB7J3gnOiBfcG9zeCwgJ3knOiBfcG9zeX0KICAgICAgCiAgICByZXR1cm4geyd4JzogMCwgJ3knOiAwfQoKY2xhc3MgV2lkZ2V0OgogIGRlZiBfX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZD1Ob25lKToKICAgICAgc2VsZi5fZWxlbWVudD1lbGVtZW50CgogICAgICBpZiBpZCBpcyBOb25lOgogICAgICAgICBzZWxmLl9lbGVtZW50LmlkPSclc18lcycgJSAodHlwZSwgaW50KDEwMDAwMCpyYW5kb20ucmFuZG9tKCkpKQogICAgICBlbHNlOgogICAgICAgICBzZWxmLl9lbGVtZW50LmlkPWlkCgogIGRlZiBnZXRfaWQoc2VsZik6CiAgICAgIHJldHVybiBzZWxmLl9lbGVtZW50LmlkCgogIGRlZiBhdHRhY2goc2VsZiwgZWxlbWVudF9pZCk6CiAgICAgICIiIiBhcHBlbmQgdGhpcyBET00gY29tcG9uZW50IHRvIERPTSBlbGVtZW50IGVsZW1lbnRfaWQiIiIKICAgICAgI2RvY3VtZW50W2VsZW1lbnRfaWRdIDw9IHNlbGYuX2VsZW1lbnQgICAjdGhpcyBkb2Vzbid0IHdvcmsgOigKICAgICAgI2RvYyBpcyBhY3R1YWxseSB0aGUgZ2xvYmFsICdkb2MnIG5vdCB0aGUgb25lIHdlIGltcG9ydGVkIGZyb20gYnJvd3NlciA6KAogICAgICBkb2NbZWxlbWVudF9pZF0gPD0gc2VsZi5fZWxlbWVudAoKICBkZWYgc2hvdyhzZWxmKToKICAgICAgc2VsZi5fZWxlbWVudC5kaXNwbGF5PSdibG9jaycKCiAgZGVmIGhpZGUoc2VsZik6CiAgICAgIHNlbGYuX2VsZW1lbnQuZGlzcGxheT0nbm9uZScKCmNsYXNzIERyYWdnYWJsZVdpZGdldChXaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZD1Ob25lKToKICAgICAgV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIGVsZW1lbnQsIHR5cGUsIGlkKQoKICAgICAgZGVmIGRyYWcoZSk6CiAgICAgICAgICBzZWxmLl9lbGVtZW50LnN0eWxlLnRvcD0nJXNweCcgJSAoZS5jbGllbnRZIC0gc2VsZi5fZGVsdGFZKQogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS5sZWZ0PSclc3B4JyAlIChlLmNsaWVudFggLSBzZWxmLl9kZWx0YVgpCgogICAgICBkZWYgbW91c2VEb3duKGUpOgogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS5wb3NpdGlvbj0nYWJzb2x1dGUnCiAgICAgICAgICBzZWxmLl9kZWx0YVg9ZS5jbGllbnRYIC0gc2VsZi5fZWxlbWVudC5vZmZzZXRMZWZ0CiAgICAgICAgICBzZWxmLl9kZWx0YVk9ZS5jbGllbnRZIC0gc2VsZi5fZWxlbWVudC5vZmZzZXRUb3AKICAgICAgICAgIGRvYy5iaW5kKCdtb3VzZW1vdmUnLCBkcmFnKQoKICAgICAgZGVmIG1vdXNlVXAoZSk6CiAgICAgICAgICBkb2MudW5iaW5kKCdtb3VzZW1vdmUnKQoKICAgICAgc2VsZi5fZWxlbWVudC5iaW5kKCdtb3VzZWRvd24nLCBtb3VzZURvd24pCiAgICAgIHNlbGYuX2VsZW1lbnQuYmluZCgnbW91c2V1cCcsIG1vdXNlVXApCg==',
'/Lib/ui/dialog.py':'aW1wb3J0IHdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwsIGRvYwoKY2xhc3MgRGlhbG9nKHdpZGdldC5EcmFnZ2FibGVXaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lKToKICAgICAgc2VsZi5fZGl2X3NoZWxsPWh0bWwuRElWKAogICAgICAgICBDbGFzcz0idWktZGlhbG9nIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIHVpLWZyb250IHVpLWRyYWdnYWJsZSB1aS1yZXNpemFibGUiLAogICAgICAgICBzdHlsZT17J3Bvc2l0aW9uJzogJ2Fic29sdXRlJywgJ2hlaWdodCc6ICdhdXRvJywgJ3dpZHRoJzogJzMwMHB4JywKICAgICAgICAgICAgICAgICd0b3AnOiAnOThweCcsICdsZWZ0JzogJzE0MHB4JywgJ2Rpc3BsYXknOiAnYmxvY2snfSkKCiAgICAgIHdpZGdldC5EcmFnZ2FibGVXaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnZGlhbG9nJywgaWQpCgogICAgICBfZGl2X3RpdGxlYmFyPWh0bWwuRElWKElkPSJ0aXRsZWJhciIsCiAgICAgICAgICAgQ2xhc3M9InVpLWRpYWxvZy10aXRsZWJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwgdWktaGVscGVyLWNsZWFyZml4IikKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IF9kaXZfdGl0bGViYXIKCiAgICAgIHNlbGYuX2Rpdl90aXRsZT1odG1sLlNQQU4oSWQ9InRpdGxlIiwgQ2xhc3M9InVpLWRpYWxvZy10aXRsZSIpCiAgICAgICAgCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fZGl2X3RpdGxlCgogICAgICBzZWxmLl90aXRsZV9idXR0b249aHRtbC5CVVRUT04oVGl0bGU9ImNsb3NlIiwKICAgICAgICAgICAgQ2xhc3M9InVpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIHVpLWJ1dHRvbi1pY29uLW9ubHkgdWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlIikKCiAgICAgIGRlZiBkaWFsb2dfY2xvc2UoZSk6CiAgICAgICAgICAjZGVsIGRvY3VtZW50W3NlbGYuX2Rpdl9zaGVsbC5pZF0KICAgICAgICAgIGRlbCBkb2Nbc2VsZi5fZGl2X3NoZWxsLmlkXQoKICAgICAgc2VsZi5fdGl0bGVfYnV0dG9uLmJpbmQoJ2NsaWNrJywgZGlhbG9nX2Nsb3NlKQogICAgICBfc3Bhbj1odG1sLlNQQU4oQ2xhc3M9InVpLWJ1dHRvbi1pY29uLXByaW1hcnkgdWktaWNvbiB1aS1pY29uLWNsb3NldGhpY2siKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9zcGFuPWh0bWwuU1BBTignY2xvc2UnLCBDbGFzcz0idWktYnV0dG9uLXRleHQiKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fdGl0bGVfYnV0dG9uCgogICAgICBzZWxmLl9kaXZfZGlhbG9nPWh0bWwuRElWKENsYXNzPSJ1aS1kaWFsb2ctY29udGVudCB1aS13aWRnZXQtY29udGVudCIsCiAgICAgICAgICAgc3R5bGU9eyd3aWR0aCc6ICdhdXRvJywgJ21pbi1oZWlnaHQnOiAnMTA1cHgnLCAKICAgICAgICAgICAgICAgICAgJ21heC1oZWlnaHQnOiAnbm9uZScsICdoZWlnaHQnOiAnYXV0byd9KQoKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IHNlbGYuX2Rpdl9kaWFsb2cKCiAgICAgIGZvciBfaSBpbiBbJ24nLCAnZScsICdzJywgJ3cnLCAnc2UnLCAnc3cnLCAnbmUnLCAnbncnXToKICAgICAgICAgIGlmIF9pID09ICdzZSc6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIHVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtJXMiICUgKF9pLCBfaSkKICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIiAlIF9pCgogICAgICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IGh0bWwuRElWKENsYXNzPV9jbGFzcywgc3R5bGU9eyd6LWluZGV4JzogJzkwJ30pCgogICAgICBkb2MgPD0gc2VsZi5fZGl2X3NoZWxsCgogIGRlZiBzZXRfdGl0bGUoc2VsZiwgdGl0bGUpOgogICAgICBzZWxmLl9kaXZfdGl0bGUuc2V0X3RleHQodGl0bGUpCgogIGRlZiBzZXRfYm9keShzZWxmLCBib2R5KToKICAgICAgc2VsZi5fZGl2X2RpYWxvZy5zZXRfaHRtbChib2R5KQo=',
'/Lib/http/cookies.py':'',
'/Lib/http/__init__.py':'',
'/Lib/importlib/__init__.py':'IiIiQSBwdXJlIFB5dGhvbiBpbXBsZW1lbnRhdGlvbiBvZiBpbXBvcnQuIiIiDQpfX2FsbF9fID0gWydfX2ltcG9ydF9fJywgJ2ltcG9ydF9tb2R1bGUnLCAnaW52YWxpZGF0ZV9jYWNoZXMnXQ0KDQojIEJvb3RzdHJhcCBoZWxwICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCiMgVW50aWwgYm9vdHN0cmFwcGluZyBpcyBjb21wbGV0ZSwgRE8gTk9UIGltcG9ydCBhbnkgbW9kdWxlcyB0aGF0IGF0dGVtcHQNCiMgdG8gaW1wb3J0IGltcG9ydGxpYi5fYm9vdHN0cmFwIChkaXJlY3RseSBvciBpbmRpcmVjdGx5KS4gU2luY2UgdGhpcw0KIyBwYXJ0aWFsbHkgaW5pdGlhbGlzZWQgcGFja2FnZSB3b3VsZCBiZSBwcmVzZW50IGluIHN5cy5tb2R1bGVzLCB0aG9zZQ0KIyBtb2R1bGVzIHdvdWxkIGdldCBhbiB1bmluaXRpYWxpc2VkIGNvcHkgb2YgdGhlIHNvdXJjZSB2ZXJzaW9uLCBpbnN0ZWFkDQojIG9mIGEgZnVsbHkgaW5pdGlhbGlzZWQgdmVyc2lvbiAoZWl0aGVyIHRoZSBmcm96ZW4gb25lIG9yIHRoZSBvbmUNCiMgaW5pdGlhbGlzZWQgYmVsb3cgaWYgdGhlIGZyb3plbiBvbmUgaXMgbm90IGF2YWlsYWJsZSkuDQppbXBvcnQgX2ltcCAgIyBKdXN0IHRoZSBidWlsdGluIGNvbXBvbmVudCwgTk9UIHRoZSBmdWxsIFB5dGhvbiBtb2R1bGUNCmltcG9ydCBzeXMNCg0KdHJ5Og0KICAgIGltcG9ydCBfZnJvemVuX2ltcG9ydGxpYiBhcyBfYm9vdHN0cmFwDQpleGNlcHQgSW1wb3J0RXJyb3I6DQogICAgZnJvbSAuIGltcG9ydCBfYm9vdHN0cmFwDQogICAgX2Jvb3RzdHJhcC5fc2V0dXAoc3lzLCBfaW1wKQ0KZWxzZToNCiAgICAjIGltcG9ydGxpYi5fYm9vdHN0cmFwIGlzIHRoZSBidWlsdC1pbiBpbXBvcnQsIGVuc3VyZSB3ZSBkb24ndCBjcmVhdGUNCiAgICAjIGEgc2Vjb25kIGNvcHkgb2YgdGhlIG1vZHVsZS4NCiAgICBfYm9vdHN0cmFwLl9fbmFtZV9fID0gJ2ltcG9ydGxpYi5fYm9vdHN0cmFwJw0KICAgIF9ib290c3RyYXAuX19wYWNrYWdlX18gPSAnaW1wb3J0bGliJw0KICAgIF9ib290c3RyYXAuX19maWxlX18gPSBfX2ZpbGVfXy5yZXBsYWNlKCdfX2luaXRfXy5weScsICdfYm9vdHN0cmFwLnB5JykNCiAgICBzeXMubW9kdWxlc1snaW1wb3J0bGliLl9ib290c3RyYXAnXSA9IF9ib290c3RyYXANCg0KIyBUbyBzaW1wbGlmeSBpbXBvcnRzIGluIHRlc3QgY29kZQ0KX3dfbG9uZyA9IF9ib290c3RyYXAuX3dfbG9uZw0KX3JfbG9uZyA9IF9ib290c3RyYXAuX3JfbG9uZw0KDQojIEZ1bGx5IGJvb3RzdHJhcHBlZCBhdCB0aGlzIHBvaW50LCBpbXBvcnQgd2hhdGV2ZXIgeW91IGxpa2UsIGNpcmN1bGFyDQojIGRlcGVuZGVuY2llcyBhbmQgc3RhcnR1cCBvdmVyaGVhZCBtaW5pbWlzYXRpb24gcGVybWl0dGluZyA6KQ0KDQojIFB1YmxpYyBBUEkgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQoNCmZyb20gLl9ib290c3RyYXAgaW1wb3J0IF9faW1wb3J0X18NCg0KDQpkZWYgaW52YWxpZGF0ZV9jYWNoZXMoKToNCiAgICAiIiJDYWxsIHRoZSBpbnZhbGlkYXRlX2NhY2hlcygpIG1ldGhvZCBvbiBhbGwgbWV0YSBwYXRoIGZpbmRlcnMgc3RvcmVkIGluDQogICAgc3lzLm1ldGFfcGF0aCAod2hlcmUgaW1wbGVtZW50ZWQpLiIiIg0KICAgIGZvciBmaW5kZXIgaW4gc3lzLm1ldGFfcGF0aDoNCiAgICAgICAgaWYgaGFzYXR0cihmaW5kZXIsICdpbnZhbGlkYXRlX2NhY2hlcycpOg0KICAgICAgICAgICAgZmluZGVyLmludmFsaWRhdGVfY2FjaGVzKCkNCg0KDQpkZWYgZmluZF9sb2FkZXIobmFtZSwgcGF0aD1Ob25lKToNCiAgICAiIiJGaW5kIHRoZSBsb2FkZXIgZm9yIHRoZSBzcGVjaWZpZWQgbW9kdWxlLg0KDQogICAgRmlyc3QsIHN5cy5tb2R1bGVzIGlzIGNoZWNrZWQgdG8gc2VlIGlmIHRoZSBtb2R1bGUgd2FzIGFscmVhZHkgaW1wb3J0ZWQuIElmDQogICAgc28sIHRoZW4gc3lzLm1vZHVsZXNbbmFtZV0uX19sb2FkZXJfXyBpcyByZXR1cm5lZC4gSWYgdGhhdCBoYXBwZW5zIHRvIGJlDQogICAgc2V0IHRvIE5vbmUsIHRoZW4gVmFsdWVFcnJvciBpcyByYWlzZWQuIElmIHRoZSBtb2R1bGUgaXMgbm90IGluDQogICAgc3lzLm1vZHVsZXMsIHRoZW4gc3lzLm1ldGFfcGF0aCBpcyBzZWFyY2hlZCBmb3IgYSBzdWl0YWJsZSBsb2FkZXIgd2l0aCB0aGUNCiAgICB2YWx1ZSBvZiAncGF0aCcgZ2l2ZW4gdG8gdGhlIGZpbmRlcnMuIE5vbmUgaXMgcmV0dXJuZWQgaWYgbm8gbG9hZGVyIGNvdWxkDQogICAgYmUgZm91bmQuDQoNCiAgICBEb3R0ZWQgbmFtZXMgZG8gbm90IGhhdmUgdGhlaXIgcGFyZW50IHBhY2thZ2VzIGltcGxpY2l0bHkgaW1wb3J0ZWQuDQoNCiAgICAiIiINCiAgICB0cnk6DQogICAgICAgIGxvYWRlciA9IHN5cy5tb2R1bGVzW25hbWVdLl9fbG9hZGVyX18NCiAgICAgICAgaWYgbG9hZGVyIGlzIE5vbmU6DQogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCd7fS5fX2xvYWRlcl9fIGlzIE5vbmUnLmZvcm1hdChuYW1lKSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBsb2FkZXINCiAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgIHBhc3MNCiAgICByZXR1cm4gX2Jvb3RzdHJhcC5fZmluZF9tb2R1bGUobmFtZSwgcGF0aCkNCg0KDQpkZWYgaW1wb3J0X21vZHVsZShuYW1lLCBwYWNrYWdlPU5vbmUpOg0KICAgICIiIkltcG9ydCBhIG1vZHVsZS4NCg0KICAgIFRoZSAncGFja2FnZScgYXJndW1lbnQgaXMgcmVxdWlyZWQgd2hlbiBwZXJmb3JtaW5nIGEgcmVsYXRpdmUgaW1wb3J0LiBJdA0KICAgIHNwZWNpZmllcyB0aGUgcGFja2FnZSB0byB1c2UgYXMgdGhlIGFuY2hvciBwb2ludCBmcm9tIHdoaWNoIHRvIHJlc29sdmUgdGhlDQogICAgcmVsYXRpdmUgaW1wb3J0IHRvIGFuIGFic29sdXRlIGltcG9ydC4NCg0KICAgICIiIg0KICAgIGxldmVsID0gMA0KICAgIGlmIG5hbWUuc3RhcnRzd2l0aCgnLicpOg0KICAgICAgICBpZiBub3QgcGFja2FnZToNCiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigicmVsYXRpdmUgaW1wb3J0cyByZXF1aXJlIHRoZSAncGFja2FnZScgYXJndW1lbnQiKQ0KICAgICAgICBmb3IgY2hhcmFjdGVyIGluIG5hbWU6DQogICAgICAgICAgICBpZiBjaGFyYWN0ZXIgIT0gJy4nOg0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICBsZXZlbCArPSAxDQogICAgcmV0dXJuIF9ib290c3RyYXAuX2djZF9pbXBvcnQobmFtZVtsZXZlbDpdLCBwYWNrYWdlLCBsZXZlbCkNCg==',
'/Lib/importlib/util.py':'IiIiVXRpbGl0eSBjb2RlIGZvciBjb25zdHJ1Y3RpbmcgaW1wb3J0ZXJzLCBldGMuIiIiDQoNCmZyb20gLl9ib290c3RyYXAgaW1wb3J0IG1vZHVsZV9mb3JfbG9hZGVyDQpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBzZXRfbG9hZGVyDQpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBzZXRfcGFja2FnZQ0KZnJvbSAuX2Jvb3RzdHJhcCBpbXBvcnQgX3Jlc29sdmVfbmFtZQ0KDQoNCmRlZiByZXNvbHZlX25hbWUobmFtZSwgcGFja2FnZSk6DQogICAgIiIiUmVzb2x2ZSBhIHJlbGF0aXZlIG1vZHVsZSBuYW1lIHRvIGFuIGFic29sdXRlIG9uZS4iIiINCiAgICBpZiBub3QgbmFtZS5zdGFydHN3aXRoKCcuJyk6DQogICAgICAgIHJldHVybiBuYW1lDQogICAgZWxpZiBub3QgcGFja2FnZToNCiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigneyFyfSBpcyBub3QgYSByZWxhdGl2ZSBuYW1lICcNCiAgICAgICAgICAgICAgICAgICAgICAgICAnKG5vIGxlYWRpbmcgZG90KScuZm9ybWF0KG5hbWUpKQ0KICAgIGxldmVsID0gMA0KICAgIGZvciBjaGFyYWN0ZXIgaW4gbmFtZToNCiAgICAgICAgaWYgY2hhcmFjdGVyICE9ICcuJzoNCiAgICAgICAgICAgIGJyZWFrDQogICAgICAgIGxldmVsICs9IDENCiAgICByZXR1cm4gX3Jlc29sdmVfbmFtZShuYW1lW2xldmVsOl0sIHBhY2thZ2UsIGxldmVsKQ0K',
'/Lib/importlib/abc.py':'',
'/Lib/importlib/machinery.py':'IiIiVGhlIG1hY2hpbmVyeSBvZiBpbXBvcnRsaWI6IGZpbmRlcnMsIGxvYWRlcnMsIGhvb2tzLCBldGMuIiIiDQoNCmltcG9ydCBfaW1wDQoNCmZyb20gLl9ib290c3RyYXAgaW1wb3J0IChTT1VSQ0VfU1VGRklYRVMsIERFQlVHX0JZVEVDT0RFX1NVRkZJWEVTLA0KICAgICAgICAgICAgICAgICAgICAgICAgIE9QVElNSVpFRF9CWVRFQ09ERV9TVUZGSVhFUywgQllURUNPREVfU1VGRklYRVMsDQogICAgICAgICAgICAgICAgICAgICAgICAgRVhURU5TSU9OX1NVRkZJWEVTKQ0KZnJvbSAuX2Jvb3RzdHJhcCBpbXBvcnQgQnVpbHRpbkltcG9ydGVyDQpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBGcm96ZW5JbXBvcnRlcg0KZnJvbSAuX2Jvb3RzdHJhcCBpbXBvcnQgV2luZG93c1JlZ2lzdHJ5RmluZGVyDQpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBQYXRoRmluZGVyDQpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBGaWxlRmluZGVyDQpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBTb3VyY2VGaWxlTG9hZGVyDQpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBTb3VyY2VsZXNzRmlsZUxvYWRlcg0KZnJvbSAuX2Jvb3RzdHJhcCBpbXBvcnQgRXh0ZW5zaW9uRmlsZUxvYWRlcg0KDQoNCmRlZiBhbGxfc3VmZml4ZXMoKToNCiAgICAiIiJSZXR1cm5zIGEgbGlzdCBvZiBhbGwgcmVjb2duaXplZCBtb2R1bGUgc3VmZml4ZXMgZm9yIHRoaXMgcHJvY2VzcyIiIg0KICAgIHJldHVybiBTT1VSQ0VfU1VGRklYRVMgKyBCWVRFQ09ERV9TVUZGSVhFUyArIEVYVEVOU0lPTl9TVUZGSVhFUw0K',
'/Lib/importlib/_bootstrap.py':'',
'/Lib/logging/handlers.py':'',
'/Lib/logging/__init__.py':'',
'/Lib/logging/config.py':'',
'/Lib/html/__init__.py':'IiIiCkdlbmVyYWwgZnVuY3Rpb25zIGZvciBIVE1MIG1hbmlwdWxhdGlvbi4KIiIiCgoKX2VzY2FwZV9tYXAgPSB7b3JkKCcmJyk6ICcmYW1wOycsIG9yZCgnPCcpOiAnJmx0OycsIG9yZCgnPicpOiAnJmd0Oyd9Cl9lc2NhcGVfbWFwX2Z1bGwgPSB7b3JkKCcmJyk6ICcmYW1wOycsIG9yZCgnPCcpOiAnJmx0OycsIG9yZCgnPicpOiAnJmd0OycsCiAgICAgICAgICAgICAgICAgICAgb3JkKCciJyk6ICcmcXVvdDsnLCBvcmQoJ1wnJyk6ICcmI3gyNzsnfQoKIyBOQjogdGhpcyBpcyBhIGNhbmRpZGF0ZSBmb3IgYSBieXRlcy9zdHJpbmcgcG9seW1vcnBoaWMgaW50ZXJmYWNlCgpkZWYgZXNjYXBlKHMsIHF1b3RlPVRydWUpOgogICAgIiIiCiAgICBSZXBsYWNlIHNwZWNpYWwgY2hhcmFjdGVycyAiJiIsICI8IiBhbmQgIj4iIHRvIEhUTUwtc2FmZSBzZXF1ZW5jZXMuCiAgICBJZiB0aGUgb3B0aW9uYWwgZmxhZyBxdW90ZSBpcyB0cnVlICh0aGUgZGVmYXVsdCksIHRoZSBxdW90YXRpb24gbWFyawogICAgY2hhcmFjdGVycywgYm90aCBkb3VibGUgcXVvdGUgKCIpIGFuZCBzaW5nbGUgcXVvdGUgKCcpIGNoYXJhY3RlcnMgYXJlIGFsc28KICAgIHRyYW5zbGF0ZWQuCiAgICAiIiIKICAgIGlmIHF1b3RlOgogICAgICAgIHJldHVybiBzLnRyYW5zbGF0ZShfZXNjYXBlX21hcF9mdWxsKQogICAgcmV0dXJuIHMudHJhbnNsYXRlKF9lc2NhcGVfbWFwKQo=',
'/Lib/html/entities.py':'',
'/Lib/html/parser.py':'IiIiQSBwYXJzZXIgZm9yIEhUTUwgYW5kIFhIVE1MLiIiIgoKIyBUaGlzIGZpbGUgaXMgYmFzZWQgb24gc2dtbGxpYi5weSwgYnV0IHRoZSBBUEkgaXMgc2xpZ2h0bHkgZGlmZmVyZW50LgoKIyBYWFggVGhlcmUgc2hvdWxkIGJlIGEgd2F5IHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gUENEQVRBIChwYXJzZWQKIyBjaGFyYWN0ZXIgZGF0YSAtLSB0aGUgbm9ybWFsIGNhc2UpLCBSQ0RBVEEgKHJlcGxhY2VhYmxlIGNoYXJhY3RlcgojIGRhdGEgLS0gb25seSBjaGFyIGFuZCBlbnRpdHkgcmVmZXJlbmNlcyBhbmQgZW5kIHRhZ3MgYXJlIHNwZWNpYWwpCiMgYW5kIENEQVRBIChjaGFyYWN0ZXIgZGF0YSAtLSBvbmx5IGVuZCB0YWdzIGFyZSBzcGVjaWFsKS4KCgppbXBvcnQgX21hcmt1cGJhc2UKaW1wb3J0IHJlCmltcG9ydCB3YXJuaW5ncwoKIyBSZWd1bGFyIGV4cHJlc3Npb25zIHVzZWQgZm9yIHBhcnNpbmcKCmludGVyZXN0aW5nX25vcm1hbCA9IHJlLmNvbXBpbGUoJ1smPF0nKQppbmNvbXBsZXRlID0gcmUuY29tcGlsZSgnJlthLXpBLVojXScpCgplbnRpdHlyZWYgPSByZS5jb21waWxlKCcmKFthLXpBLVpdWy0uYS16QS1aMC05XSopW15hLXpBLVowLTldJykKY2hhcnJlZiA9IHJlLmNvbXBpbGUoJyYjKD86WzAtOV0rfFt4WF1bMC05YS1mQS1GXSspW14wLTlhLWZBLUZdJykKCnN0YXJ0dGFnb3BlbiA9IHJlLmNvbXBpbGUoJzxbYS16QS1aXScpCnBpY2xvc2UgPSByZS5jb21waWxlKCc+JykKY29tbWVudGNsb3NlID0gcmUuY29tcGlsZShyJy0tXHMqPicpCnRhZ2ZpbmQgPSByZS5jb21waWxlKCcoW2EtekEtWl1bLS5hLXpBLVowLTk6X10qKSg/OlxzfC8oPyE+KSkqJykKIyBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvdG9rZW5pemF0aW9uLmh0bWwjdGFnLW9wZW4tc3RhdGUKIyBhbmQgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvdG9rZW5pemF0aW9uLmh0bWwjdGFnLW5hbWUtc3RhdGUKdGFnZmluZF90b2xlcmFudCA9IHJlLmNvbXBpbGUoJ1thLXpBLVpdW15cdFxuXHJcZiAvPlx4MDBdKicpCiMgTm90ZToKIyAgMSkgdGhlIHN0cmljdCBhdHRyZmluZCBpc24ndCByZWFsbHkgc3RyaWN0LCBidXQgd2UgY2FuJ3QgbWFrZSBpdAojICAgICBjb3JyZWN0bHkgc3RyaWN0IHdpdGhvdXQgYnJlYWtpbmcgYmFja3dhcmQgY29tcGF0aWJpbGl0eTsKIyAgMikgaWYgeW91IGNoYW5nZSBhdHRyZmluZCByZW1lbWJlciB0byB1cGRhdGUgbG9jYXRlc3RhcnR0YWdlbmQgdG9vOwojICAzKSBpZiB5b3UgY2hhbmdlIGF0dHJmaW5kIGFuZC9vciBsb2NhdGVzdGFydHRhZ2VuZCB0aGUgcGFyc2VyIHdpbGwKIyAgICAgZXhwbG9kZSwgc28gZG9uJ3QgZG8gaXQuCmF0dHJmaW5kID0gcmUuY29tcGlsZSgKICAgIHInXHMqKFthLXpBLVpfXVstLjphLXpBLVpfMC05XSopKFxzKj1ccyonCiAgICByJyhcJ1teXCddKlwnfCJbXiJdKiJ8W15ccyJcJz08PmBdKikpPycpCmF0dHJmaW5kX3RvbGVyYW50ID0gcmUuY29tcGlsZSgKICAgIHInKCg/PD1bXCciXHMvXSlbXlxzLz5dW15ccy89Pl0qKShccyo9K1xzKicKICAgIHInKFwnW15cJ10qXCd8IlteIl0qInwoPyFbXCciXSlbXj5cc10qKSk/KD86XHN8Lyg/IT4pKSonKQpsb2NhdGVzdGFydHRhZ2VuZCA9IHJlLmNvbXBpbGUociIiIgogIDxbYS16QS1aXVstLmEtekEtWjAtOTpfXSogICAgICAgICAgIyB0YWcgbmFtZQogICg/OlxzKyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB3aGl0ZXNwYWNlIGJlZm9yZSBhdHRyaWJ1dGUgbmFtZQogICAgKD86W2EtekEtWl9dWy0uOmEtekEtWjAtOV9dKiAgICAgIyBhdHRyaWJ1dGUgbmFtZQogICAgICAoPzpccyo9XHMqICAgICAgICAgICAgICAgICAgICAgIyB2YWx1ZSBpbmRpY2F0b3IKICAgICAgICAoPzonW14nXSonICAgICAgICAgICAgICAgICAgICMgTElUQS1lbmNsb3NlZCB2YWx1ZQogICAgICAgICAgfFwiW15cIl0qXCIgICAgICAgICAgICAgICAgIyBMSVQtZW5jbG9zZWQgdmFsdWUKICAgICAgICAgIHxbXidcIj5cc10rICAgICAgICAgICAgICAgICMgYmFyZSB2YWx1ZQogICAgICAgICApCiAgICAgICApPwogICAgICkKICAgKSoKICBccyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgdHJhaWxpbmcgd2hpdGVzcGFjZQoiIiIsIHJlLlZFUkJPU0UpCmxvY2F0ZXN0YXJ0dGFnZW5kX3RvbGVyYW50ID0gcmUuY29tcGlsZShyIiIiCiAgPFthLXpBLVpdWy0uYS16QS1aMC05Ol9dKiAgICAgICAgICAjIHRhZyBuYW1lCiAgKD86W1xzL10qICAgICAgICAgICAgICAgICAgICAgICAgICAjIG9wdGlvbmFsIHdoaXRlc3BhY2UgYmVmb3JlIGF0dHJpYnV0ZSBuYW1lCiAgICAoPzooPzw9WyciXHMvXSlbXlxzLz5dW15ccy89Pl0qICAjIGF0dHJpYnV0ZSBuYW1lCiAgICAgICg/OlxzKj0rXHMqICAgICAgICAgICAgICAgICAgICAjIHZhbHVlIGluZGljYXRvcgogICAgICAgICg/OidbXiddKicgICAgICAgICAgICAgICAgICAgIyBMSVRBLWVuY2xvc2VkIHZhbHVlCiAgICAgICAgICB8IlteIl0qIiAgICAgICAgICAgICAgICAgICAjIExJVC1lbmNsb3NlZCB2YWx1ZQogICAgICAgICAgfCg/IVsnIl0pW14+XHNdKiAgICAgICAgICAgIyBiYXJlIHZhbHVlCiAgICAgICAgICkKICAgICAgICAgKD86XHMqLCkqICAgICAgICAgICAgICAgICAgICMgcG9zc2libHkgZm9sbG93ZWQgYnkgYSBjb21tYQogICAgICAgKT8oPzpcc3wvKD8hPikpKgogICAgICkqCiAgICk/CiAgXHMqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAjIHRyYWlsaW5nIHdoaXRlc3BhY2UKIiIiLCByZS5WRVJCT1NFKQplbmRlbmR0YWcgPSByZS5jb21waWxlKCc+JykKIyB0aGUgSFRNTCA1IHNwZWMsIHNlY3Rpb24gOC4xLjIuMiwgZG9lc24ndCBhbGxvdyBzcGFjZXMgYmV0d2VlbgojIDwvIGFuZCB0aGUgdGFnIG5hbWUsIHNvIG1heWJlIHRoaXMgc2hvdWxkIGJlIGZpeGVkCmVuZHRhZ2ZpbmQgPSByZS5jb21waWxlKCc8L1xzKihbYS16QS1aXVstLmEtekEtWjAtOTpfXSopXHMqPicpCgoKY2xhc3MgSFRNTFBhcnNlRXJyb3IoRXhjZXB0aW9uKToKICAgICIiIkV4Y2VwdGlvbiByYWlzZWQgZm9yIGFsbCBwYXJzZSBlcnJvcnMuIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG1zZywgcG9zaXRpb249KE5vbmUsIE5vbmUpKToKICAgICAgICBhc3NlcnQgbXNnCiAgICAgICAgc2VsZi5tc2cgPSBtc2cKICAgICAgICBzZWxmLmxpbmVubyA9IHBvc2l0aW9uWzBdCiAgICAgICAgc2VsZi5vZmZzZXQgPSBwb3NpdGlvblsxXQoKICAgIGRlZiBfX3N0cl9fKHNlbGYpOgogICAgICAgIHJlc3VsdCA9IHNlbGYubXNnCiAgICAgICAgaWYgc2VsZi5saW5lbm8gaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCArICIsIGF0IGxpbmUgJWQiICUgc2VsZi5saW5lbm8KICAgICAgICBpZiBzZWxmLm9mZnNldCBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICsgIiwgY29sdW1uICVkIiAlIChzZWxmLm9mZnNldCArIDEpCiAgICAgICAgcmV0dXJuIHJlc3VsdAoKCmNsYXNzIEhUTUxQYXJzZXIoX21hcmt1cGJhc2UuUGFyc2VyQmFzZSk6CiAgICAiIiJGaW5kIHRhZ3MgYW5kIG90aGVyIG1hcmt1cCBhbmQgY2FsbCBoYW5kbGVyIGZ1bmN0aW9ucy4KCiAgICBVc2FnZToKICAgICAgICBwID0gSFRNTFBhcnNlcigpCiAgICAgICAgcC5mZWVkKGRhdGEpCiAgICAgICAgLi4uCiAgICAgICAgcC5jbG9zZSgpCgogICAgU3RhcnQgdGFncyBhcmUgaGFuZGxlZCBieSBjYWxsaW5nIHNlbGYuaGFuZGxlX3N0YXJ0dGFnKCkgb3IKICAgIHNlbGYuaGFuZGxlX3N0YXJ0ZW5kdGFnKCk7IGVuZCB0YWdzIGJ5IHNlbGYuaGFuZGxlX2VuZHRhZygpLiAgVGhlCiAgICBkYXRhIGJldHdlZW4gdGFncyBpcyBwYXNzZWQgZnJvbSB0aGUgcGFyc2VyIHRvIHRoZSBkZXJpdmVkIGNsYXNzCiAgICBieSBjYWxsaW5nIHNlbGYuaGFuZGxlX2RhdGEoKSB3aXRoIHRoZSBkYXRhIGFzIGFyZ3VtZW50ICh0aGUgZGF0YQogICAgbWF5IGJlIHNwbGl0IHVwIGluIGFyYml0cmFyeSBjaHVua3MpLiAgRW50aXR5IHJlZmVyZW5jZXMgYXJlCiAgICBwYXNzZWQgYnkgY2FsbGluZyBzZWxmLmhhbmRsZV9lbnRpdHlyZWYoKSB3aXRoIHRoZSBlbnRpdHkKICAgIHJlZmVyZW5jZSBhcyB0aGUgYXJndW1lbnQuICBOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIGFyZQogICAgcGFzc2VkIHRvIHNlbGYuaGFuZGxlX2NoYXJyZWYoKSB3aXRoIHRoZSBzdHJpbmcgY29udGFpbmluZyB0aGUKICAgIHJlZmVyZW5jZSBhcyB0aGUgYXJndW1lbnQuCiAgICAiIiIKCiAgICBDREFUQV9DT05URU5UX0VMRU1FTlRTID0gKCJzY3JpcHQiLCAic3R5bGUiKQoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzdHJpY3Q9RmFsc2UpOgogICAgICAgICIiIkluaXRpYWxpemUgYW5kIHJlc2V0IHRoaXMgaW5zdGFuY2UuCgogICAgICAgIElmIHN0cmljdCBpcyBzZXQgdG8gRmFsc2UgKHRoZSBkZWZhdWx0KSB0aGUgcGFyc2VyIHdpbGwgcGFyc2UgaW52YWxpZAogICAgICAgIG1hcmt1cCwgb3RoZXJ3aXNlIGl0IHdpbGwgcmFpc2UgYW4gZXJyb3IuICBOb3RlIHRoYXQgdGhlIHN0cmljdCBtb2RlCiAgICAgICAgaXMgZGVwcmVjYXRlZC4KICAgICAgICAiIiIKICAgICAgICBpZiBzdHJpY3Q6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4oIlRoZSBzdHJpY3QgbW9kZSBpcyBkZXByZWNhdGVkLiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgRGVwcmVjYXRpb25XYXJuaW5nLCBzdGFja2xldmVsPTIpCiAgICAgICAgc2VsZi5zdHJpY3QgPSBzdHJpY3QKICAgICAgICBzZWxmLnJlc2V0KCkKCiAgICBkZWYgcmVzZXQoc2VsZik6CiAgICAgICAgIiIiUmVzZXQgdGhpcyBpbnN0YW5jZS4gIExvc2VzIGFsbCB1bnByb2Nlc3NlZCBkYXRhLiIiIgogICAgICAgIHNlbGYucmF3ZGF0YSA9ICcnCiAgICAgICAgc2VsZi5sYXN0dGFnID0gJz8/PycKICAgICAgICBzZWxmLmludGVyZXN0aW5nID0gaW50ZXJlc3Rpbmdfbm9ybWFsCiAgICAgICAgc2VsZi5jZGF0YV9lbGVtID0gTm9uZQogICAgICAgIF9tYXJrdXBiYXNlLlBhcnNlckJhc2UucmVzZXQoc2VsZikKCiAgICBkZWYgZmVlZChzZWxmLCBkYXRhKToKICAgICAgICByIiIiRmVlZCBkYXRhIHRvIHRoZSBwYXJzZXIuCgogICAgICAgIENhbGwgdGhpcyBhcyBvZnRlbiBhcyB5b3Ugd2FudCwgd2l0aCBhcyBsaXR0bGUgb3IgYXMgbXVjaCB0ZXh0CiAgICAgICAgYXMgeW91IHdhbnQgKG1heSBpbmNsdWRlICdcbicpLgogICAgICAgICIiIgogICAgICAgIHNlbGYucmF3ZGF0YSA9IHNlbGYucmF3ZGF0YSArIGRhdGEKICAgICAgICBzZWxmLmdvYWhlYWQoMCkKCiAgICBkZWYgY2xvc2Uoc2VsZik6CiAgICAgICAgIiIiSGFuZGxlIGFueSBidWZmZXJlZCBkYXRhLiIiIgogICAgICAgIHNlbGYuZ29haGVhZCgxKQoKICAgIGRlZiBlcnJvcihzZWxmLCBtZXNzYWdlKToKICAgICAgICByYWlzZSBIVE1MUGFyc2VFcnJvcihtZXNzYWdlLCBzZWxmLmdldHBvcygpKQoKICAgIF9fc3RhcnR0YWdfdGV4dCA9IE5vbmUKCiAgICBkZWYgZ2V0X3N0YXJ0dGFnX3RleHQoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGZ1bGwgc291cmNlIG9mIHN0YXJ0IHRhZzogJzwuLi4+Jy4iIiIKICAgICAgICByZXR1cm4gc2VsZi5fX3N0YXJ0dGFnX3RleHQKCiAgICBkZWYgc2V0X2NkYXRhX21vZGUoc2VsZiwgZWxlbSk6CiAgICAgICAgc2VsZi5jZGF0YV9lbGVtID0gZWxlbS5sb3dlcigpCiAgICAgICAgc2VsZi5pbnRlcmVzdGluZyA9IHJlLmNvbXBpbGUocic8L1xzKiVzXHMqPicgJSBzZWxmLmNkYXRhX2VsZW0sIHJlLkkpCgogICAgZGVmIGNsZWFyX2NkYXRhX21vZGUoc2VsZik6CiAgICAgICAgc2VsZi5pbnRlcmVzdGluZyA9IGludGVyZXN0aW5nX25vcm1hbAogICAgICAgIHNlbGYuY2RhdGFfZWxlbSA9IE5vbmUKCiAgICAjIEludGVybmFsIC0tIGhhbmRsZSBkYXRhIGFzIGZhciBhcyByZWFzb25hYmxlLiAgTWF5IGxlYXZlIHN0YXRlCiAgICAjIGFuZCBkYXRhIHRvIGJlIHByb2Nlc3NlZCBieSBhIHN1YnNlcXVlbnQgY2FsbC4gIElmICdlbmQnIGlzCiAgICAjIHRydWUsIGZvcmNlIGhhbmRsaW5nIGFsbCBkYXRhIGFzIGlmIGZvbGxvd2VkIGJ5IEVPRiBtYXJrZXIuCiAgICBkZWYgZ29haGVhZChzZWxmLCBlbmQpOgogICAgICAgIHJhd2RhdGEgPSBzZWxmLnJhd2RhdGEKICAgICAgICBpID0gMAogICAgICAgIG4gPSBsZW4ocmF3ZGF0YSkKICAgICAgICB3aGlsZSBpIDwgbjoKICAgICAgICAgICAgbWF0Y2ggPSBzZWxmLmludGVyZXN0aW5nLnNlYXJjaChyYXdkYXRhLCBpKSAjIDwgb3IgJgogICAgICAgICAgICBpZiBtYXRjaDoKICAgICAgICAgICAgICAgIGogPSBtYXRjaC5zdGFydCgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBpZiBzZWxmLmNkYXRhX2VsZW06CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGogPSBuCiAgICAgICAgICAgIGlmIGkgPCBqOiBzZWxmLmhhbmRsZV9kYXRhKHJhd2RhdGFbaTpqXSkKICAgICAgICAgICAgaSA9IHNlbGYudXBkYXRlcG9zKGksIGopCiAgICAgICAgICAgIGlmIGkgPT0gbjogYnJlYWsKICAgICAgICAgICAgc3RhcnRzd2l0aCA9IHJhd2RhdGEuc3RhcnRzd2l0aAogICAgICAgICAgICBpZiBzdGFydHN3aXRoKCc8JywgaSk6CiAgICAgICAgICAgICAgICBpZiBzdGFydHRhZ29wZW4ubWF0Y2gocmF3ZGF0YSwgaSk6ICMgPCArIGxldHRlcgogICAgICAgICAgICAgICAgICAgIGsgPSBzZWxmLnBhcnNlX3N0YXJ0dGFnKGkpCiAgICAgICAgICAgICAgICBlbGlmIHN0YXJ0c3dpdGgoIjwvIiwgaSk6CiAgICAgICAgICAgICAgICAgICAgayA9IHNlbGYucGFyc2VfZW5kdGFnKGkpCiAgICAgICAgICAgICAgICBlbGlmIHN0YXJ0c3dpdGgoIjwhLS0iLCBpKToKICAgICAgICAgICAgICAgICAgICBrID0gc2VsZi5wYXJzZV9jb21tZW50KGkpCiAgICAgICAgICAgICAgICBlbGlmIHN0YXJ0c3dpdGgoIjw/IiwgaSk6CiAgICAgICAgICAgICAgICAgICAgayA9IHNlbGYucGFyc2VfcGkoaSkKICAgICAgICAgICAgICAgIGVsaWYgc3RhcnRzd2l0aCgiPCEiLCBpKToKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLnN0cmljdDoKICAgICAgICAgICAgICAgICAgICAgICAgayA9IHNlbGYucGFyc2VfZGVjbGFyYXRpb24oaSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBrID0gc2VsZi5wYXJzZV9odG1sX2RlY2xhcmF0aW9uKGkpCiAgICAgICAgICAgICAgICBlbGlmIChpICsgMSkgPCBuOgogICAgICAgICAgICAgICAgICAgIHNlbGYuaGFuZGxlX2RhdGEoIjwiKQogICAgICAgICAgICAgICAgICAgIGsgPSBpICsgMQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgaWYgayA8IDA6CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGVuZDoKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLnN0cmljdDoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lcnJvcigiRU9GIGluIG1pZGRsZSBvZiBjb25zdHJ1Y3QiKQogICAgICAgICAgICAgICAgICAgIGsgPSByYXdkYXRhLmZpbmQoJz4nLCBpICsgMSkKICAgICAgICAgICAgICAgICAgICBpZiBrIDwgMDoKICAgICAgICAgICAgICAgICAgICAgICAgayA9IHJhd2RhdGEuZmluZCgnPCcsIGkgKyAxKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBrIDwgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBpICsgMQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGsgKz0gMQogICAgICAgICAgICAgICAgICAgIHNlbGYuaGFuZGxlX2RhdGEocmF3ZGF0YVtpOmtdKQogICAgICAgICAgICAgICAgaSA9IHNlbGYudXBkYXRlcG9zKGksIGspCiAgICAgICAgICAgIGVsaWYgc3RhcnRzd2l0aCgiJiMiLCBpKToKICAgICAgICAgICAgICAgIG1hdGNoID0gY2hhcnJlZi5tYXRjaChyYXdkYXRhLCBpKQogICAgICAgICAgICAgICAgaWYgbWF0Y2g6CiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG1hdGNoLmdyb3VwKClbMjotMV0KICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9jaGFycmVmKG5hbWUpCiAgICAgICAgICAgICAgICAgICAgayA9IG1hdGNoLmVuZCgpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHN0YXJ0c3dpdGgoJzsnLCBrLTEpOgogICAgICAgICAgICAgICAgICAgICAgICBrID0gayAtIDEKICAgICAgICAgICAgICAgICAgICBpID0gc2VsZi51cGRhdGVwb3MoaSwgaykKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiAiOyIgaW4gcmF3ZGF0YVtpOl06ICNiYWlsIGJ5IGNvbnN1bWluZyAmIwogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9kYXRhKHJhd2RhdGFbMDoyXSkKICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHNlbGYudXBkYXRlcG9zKGksIDIpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxpZiBzdGFydHN3aXRoKCcmJywgaSk6CiAgICAgICAgICAgICAgICBtYXRjaCA9IGVudGl0eXJlZi5tYXRjaChyYXdkYXRhLCBpKQogICAgICAgICAgICAgICAgaWYgbWF0Y2g6CiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG1hdGNoLmdyb3VwKDEpCiAgICAgICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVfZW50aXR5cmVmKG5hbWUpCiAgICAgICAgICAgICAgICAgICAgayA9IG1hdGNoLmVuZCgpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHN0YXJ0c3dpdGgoJzsnLCBrLTEpOgogICAgICAgICAgICAgICAgICAgICAgICBrID0gayAtIDEKICAgICAgICAgICAgICAgICAgICBpID0gc2VsZi51cGRhdGVwb3MoaSwgaykKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgbWF0Y2ggPSBpbmNvbXBsZXRlLm1hdGNoKHJhd2RhdGEsIGkpCiAgICAgICAgICAgICAgICBpZiBtYXRjaDoKICAgICAgICAgICAgICAgICAgICAjIG1hdGNoLmdyb3VwKCkgd2lsbCBjb250YWluIGF0IGxlYXN0IDIgY2hhcnMKICAgICAgICAgICAgICAgICAgICBpZiBlbmQgYW5kIG1hdGNoLmdyb3VwKCkgPT0gcmF3ZGF0YVtpOl06CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNlbGYuc3RyaWN0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lcnJvcigiRU9GIGluIG1pZGRsZSBvZiBlbnRpdHkgb3IgY2hhciByZWYiKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgayA8PSBpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gc2VsZi51cGRhdGVwb3MoaSwgaSArIDEpCiAgICAgICAgICAgICAgICAgICAgIyBpbmNvbXBsZXRlCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsaWYgKGkgKyAxKSA8IG46CiAgICAgICAgICAgICAgICAgICAgIyBub3QgdGhlIGVuZCBvZiB0aGUgYnVmZmVyLCBhbmQgY2FuJ3QgYmUgY29uZnVzZWQKICAgICAgICAgICAgICAgICAgICAjIHdpdGggc29tZSBvdGhlciBjb25zdHJ1Y3QKICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9kYXRhKCImIikKICAgICAgICAgICAgICAgICAgICBpID0gc2VsZi51cGRhdGVwb3MoaSwgaSArIDEpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBhc3NlcnQgMCwgImludGVyZXN0aW5nLnNlYXJjaCgpIGxpZWQiCiAgICAgICAgIyBlbmQgd2hpbGUKICAgICAgICBpZiBlbmQgYW5kIGkgPCBuIGFuZCBub3Qgc2VsZi5jZGF0YV9lbGVtOgogICAgICAgICAgICBzZWxmLmhhbmRsZV9kYXRhKHJhd2RhdGFbaTpuXSkKICAgICAgICAgICAgaSA9IHNlbGYudXBkYXRlcG9zKGksIG4pCiAgICAgICAgc2VsZi5yYXdkYXRhID0gcmF3ZGF0YVtpOl0KCiAgICAjIEludGVybmFsIC0tIHBhcnNlIGh0bWwgZGVjbGFyYXRpb25zLCByZXR1cm4gbGVuZ3RoIG9yIC0xIGlmIG5vdCB0ZXJtaW5hdGVkCiAgICAjIFNlZSB3My5vcmcvVFIvaHRtbDUvdG9rZW5pemF0aW9uLmh0bWwjbWFya3VwLWRlY2xhcmF0aW9uLW9wZW4tc3RhdGUKICAgICMgU2VlIGFsc28gcGFyc2VfZGVjbGFyYXRpb24gaW4gX21hcmt1cGJhc2UKICAgIGRlZiBwYXJzZV9odG1sX2RlY2xhcmF0aW9uKHNlbGYsIGkpOgogICAgICAgIHJhd2RhdGEgPSBzZWxmLnJhd2RhdGEKICAgICAgICBhc3NlcnQgcmF3ZGF0YVtpOmkrMl0gPT0gJzwhJywgKCd1bmV4cGVjdGVkIGNhbGwgdG8gJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BhcnNlX2h0bWxfZGVjbGFyYXRpb24oKScpCiAgICAgICAgaWYgcmF3ZGF0YVtpOmkrNF0gPT0gJzwhLS0nOgogICAgICAgICAgICAjIHRoaXMgY2FzZSBpcyBhY3R1YWxseSBhbHJlYWR5IGhhbmRsZWQgaW4gZ29haGVhZCgpCiAgICAgICAgICAgIHJldHVybiBzZWxmLnBhcnNlX2NvbW1lbnQoaSkKICAgICAgICBlbGlmIHJhd2RhdGFbaTppKzNdID09ICc8IVsnOgogICAgICAgICAgICByZXR1cm4gc2VsZi5wYXJzZV9tYXJrZWRfc2VjdGlvbihpKQogICAgICAgIGVsaWYgcmF3ZGF0YVtpOmkrOV0ubG93ZXIoKSA9PSAnPCFkb2N0eXBlJzoKICAgICAgICAgICAgIyBmaW5kIHRoZSBjbG9zaW5nID4KICAgICAgICAgICAgZ3Rwb3MgPSByYXdkYXRhLmZpbmQoJz4nLCBpKzkpCiAgICAgICAgICAgIGlmIGd0cG9zID09IC0xOgogICAgICAgICAgICAgICAgcmV0dXJuIC0xCiAgICAgICAgICAgIHNlbGYuaGFuZGxlX2RlY2wocmF3ZGF0YVtpKzI6Z3Rwb3NdKQogICAgICAgICAgICByZXR1cm4gZ3Rwb3MrMQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmLnBhcnNlX2JvZ3VzX2NvbW1lbnQoaSkKCiAgICAjIEludGVybmFsIC0tIHBhcnNlIGJvZ3VzIGNvbW1lbnQsIHJldHVybiBsZW5ndGggb3IgLTEgaWYgbm90IHRlcm1pbmF0ZWQKICAgICMgc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L3Rva2VuaXphdGlvbi5odG1sI2JvZ3VzLWNvbW1lbnQtc3RhdGUKICAgIGRlZiBwYXJzZV9ib2d1c19jb21tZW50KHNlbGYsIGksIHJlcG9ydD0xKToKICAgICAgICByYXdkYXRhID0gc2VsZi5yYXdkYXRhCiAgICAgICAgYXNzZXJ0IHJhd2RhdGFbaTppKzJdIGluICgnPCEnLCAnPC8nKSwgKCd1bmV4cGVjdGVkIGNhbGwgdG8gJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFyc2VfY29tbWVudCgpJykKICAgICAgICBwb3MgPSByYXdkYXRhLmZpbmQoJz4nLCBpKzIpCiAgICAgICAgaWYgcG9zID09IC0xOgogICAgICAgICAgICByZXR1cm4gLTEKICAgICAgICBpZiByZXBvcnQ6CiAgICAgICAgICAgIHNlbGYuaGFuZGxlX2NvbW1lbnQocmF3ZGF0YVtpKzI6cG9zXSkKICAgICAgICByZXR1cm4gcG9zICsgMQoKICAgICMgSW50ZXJuYWwgLS0gcGFyc2UgcHJvY2Vzc2luZyBpbnN0ciwgcmV0dXJuIGVuZCBvciAtMSBpZiBub3QgdGVybWluYXRlZAogICAgZGVmIHBhcnNlX3BpKHNlbGYsIGkpOgogICAgICAgIHJhd2RhdGEgPSBzZWxmLnJhd2RhdGEKICAgICAgICBhc3NlcnQgcmF3ZGF0YVtpOmkrMl0gPT0gJzw/JywgJ3VuZXhwZWN0ZWQgY2FsbCB0byBwYXJzZV9waSgpJwogICAgICAgIG1hdGNoID0gcGljbG9zZS5zZWFyY2gocmF3ZGF0YSwgaSsyKSAjID4KICAgICAgICBpZiBub3QgbWF0Y2g6CiAgICAgICAgICAgIHJldHVybiAtMQogICAgICAgIGogPSBtYXRjaC5zdGFydCgpCiAgICAgICAgc2VsZi5oYW5kbGVfcGkocmF3ZGF0YVtpKzI6IGpdKQogICAgICAgIGogPSBtYXRjaC5lbmQoKQogICAgICAgIHJldHVybiBqCgogICAgIyBJbnRlcm5hbCAtLSBoYW5kbGUgc3RhcnR0YWcsIHJldHVybiBlbmQgb3IgLTEgaWYgbm90IHRlcm1pbmF0ZWQKICAgIGRlZiBwYXJzZV9zdGFydHRhZyhzZWxmLCBpKToKICAgICAgICBzZWxmLl9fc3RhcnR0YWdfdGV4dCA9IE5vbmUKICAgICAgICBlbmRwb3MgPSBzZWxmLmNoZWNrX2Zvcl93aG9sZV9zdGFydF90YWcoaSkKICAgICAgICBpZiBlbmRwb3MgPCAwOgogICAgICAgICAgICByZXR1cm4gZW5kcG9zCiAgICAgICAgcmF3ZGF0YSA9IHNlbGYucmF3ZGF0YQogICAgICAgIHNlbGYuX19zdGFydHRhZ190ZXh0ID0gcmF3ZGF0YVtpOmVuZHBvc10KCiAgICAgICAgIyBOb3cgcGFyc2UgdGhlIGRhdGEgYmV0d2VlbiBpKzEgYW5kIGogaW50byBhIHRhZyBhbmQgYXR0cnMKICAgICAgICBhdHRycyA9IFtdCiAgICAgICAgbWF0Y2ggPSB0YWdmaW5kLm1hdGNoKHJhd2RhdGEsIGkrMSkKICAgICAgICBhc3NlcnQgbWF0Y2gsICd1bmV4cGVjdGVkIGNhbGwgdG8gcGFyc2Vfc3RhcnR0YWcoKScKICAgICAgICBrID0gbWF0Y2guZW5kKCkKICAgICAgICBzZWxmLmxhc3R0YWcgPSB0YWcgPSBtYXRjaC5ncm91cCgxKS5sb3dlcigpCiAgICAgICAgd2hpbGUgayA8IGVuZHBvczoKICAgICAgICAgICAgaWYgc2VsZi5zdHJpY3Q6CiAgICAgICAgICAgICAgICBtID0gYXR0cmZpbmQubWF0Y2gocmF3ZGF0YSwgaykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG0gPSBhdHRyZmluZF90b2xlcmFudC5tYXRjaChyYXdkYXRhLCBrKQogICAgICAgICAgICBpZiBub3QgbToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGF0dHJuYW1lLCByZXN0LCBhdHRydmFsdWUgPSBtLmdyb3VwKDEsIDIsIDMpCiAgICAgICAgICAgIGlmIG5vdCByZXN0OgogICAgICAgICAgICAgICAgYXR0cnZhbHVlID0gTm9uZQogICAgICAgICAgICBlbGlmIGF0dHJ2YWx1ZVs6MV0gPT0gJ1wnJyA9PSBhdHRydmFsdWVbLTE6XSBvciBcCiAgICAgICAgICAgICAgICAgYXR0cnZhbHVlWzoxXSA9PSAnIicgPT0gYXR0cnZhbHVlWy0xOl06CiAgICAgICAgICAgICAgICBhdHRydmFsdWUgPSBhdHRydmFsdWVbMTotMV0KICAgICAgICAgICAgaWYgYXR0cnZhbHVlOgogICAgICAgICAgICAgICAgYXR0cnZhbHVlID0gc2VsZi51bmVzY2FwZShhdHRydmFsdWUpCiAgICAgICAgICAgIGF0dHJzLmFwcGVuZCgoYXR0cm5hbWUubG93ZXIoKSwgYXR0cnZhbHVlKSkKICAgICAgICAgICAgayA9IG0uZW5kKCkKCiAgICAgICAgZW5kID0gcmF3ZGF0YVtrOmVuZHBvc10uc3RyaXAoKQogICAgICAgIGlmIGVuZCBub3QgaW4gKCI+IiwgIi8+Iik6CiAgICAgICAgICAgIGxpbmVubywgb2Zmc2V0ID0gc2VsZi5nZXRwb3MoKQogICAgICAgICAgICBpZiAiXG4iIGluIHNlbGYuX19zdGFydHRhZ190ZXh0OgogICAgICAgICAgICAgICAgbGluZW5vID0gbGluZW5vICsgc2VsZi5fX3N0YXJ0dGFnX3RleHQuY291bnQoIlxuIikKICAgICAgICAgICAgICAgIG9mZnNldCA9IGxlbihzZWxmLl9fc3RhcnR0YWdfdGV4dCkgXAogICAgICAgICAgICAgICAgICAgICAgICAgLSBzZWxmLl9fc3RhcnR0YWdfdGV4dC5yZmluZCgiXG4iKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0ICsgbGVuKHNlbGYuX19zdGFydHRhZ190ZXh0KQogICAgICAgICAgICBpZiBzZWxmLnN0cmljdDoKICAgICAgICAgICAgICAgIHNlbGYuZXJyb3IoImp1bmsgY2hhcmFjdGVycyBpbiBzdGFydCB0YWc6ICVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAlIChyYXdkYXRhW2s6ZW5kcG9zXVs6MjBdLCkpCiAgICAgICAgICAgIHNlbGYuaGFuZGxlX2RhdGEocmF3ZGF0YVtpOmVuZHBvc10pCiAgICAgICAgICAgIHJldHVybiBlbmRwb3MKICAgICAgICBpZiBlbmQuZW5kc3dpdGgoJy8+Jyk6CiAgICAgICAgICAgICMgWEhUTUwtc3R5bGUgZW1wdHkgdGFnOiA8c3BhbiBhdHRyPSJ2YWx1ZSIgLz4KICAgICAgICAgICAgc2VsZi5oYW5kbGVfc3RhcnRlbmR0YWcodGFnLCBhdHRycykKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmhhbmRsZV9zdGFydHRhZyh0YWcsIGF0dHJzKQogICAgICAgICAgICBpZiB0YWcgaW4gc2VsZi5DREFUQV9DT05URU5UX0VMRU1FTlRTOgogICAgICAgICAgICAgICAgc2VsZi5zZXRfY2RhdGFfbW9kZSh0YWcpCiAgICAgICAgcmV0dXJuIGVuZHBvcwoKICAgICMgSW50ZXJuYWwgLS0gY2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSBjb21wbGV0ZSBzdGFydHRhZzsgcmV0dXJuIGVuZAogICAgIyBvciAtMSBpZiBpbmNvbXBsZXRlLgogICAgZGVmIGNoZWNrX2Zvcl93aG9sZV9zdGFydF90YWcoc2VsZiwgaSk6CiAgICAgICAgcmF3ZGF0YSA9IHNlbGYucmF3ZGF0YQogICAgICAgIGlmIHNlbGYuc3RyaWN0OgogICAgICAgICAgICBtID0gbG9jYXRlc3RhcnR0YWdlbmQubWF0Y2gocmF3ZGF0YSwgaSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBtID0gbG9jYXRlc3RhcnR0YWdlbmRfdG9sZXJhbnQubWF0Y2gocmF3ZGF0YSwgaSkKICAgICAgICBpZiBtOgogICAgICAgICAgICBqID0gbS5lbmQoKQogICAgICAgICAgICBuZXh0ID0gcmF3ZGF0YVtqOmorMV0KICAgICAgICAgICAgaWYgbmV4dCA9PSAiPiI6CiAgICAgICAgICAgICAgICByZXR1cm4gaiArIDEKICAgICAgICAgICAgaWYgbmV4dCA9PSAiLyI6CiAgICAgICAgICAgICAgICBpZiByYXdkYXRhLnN0YXJ0c3dpdGgoIi8+Iiwgaik6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGogKyAyCiAgICAgICAgICAgICAgICBpZiByYXdkYXRhLnN0YXJ0c3dpdGgoIi8iLCBqKToKICAgICAgICAgICAgICAgICAgICAjIGJ1ZmZlciBib3VuZGFyeQogICAgICAgICAgICAgICAgICAgIHJldHVybiAtMQogICAgICAgICAgICAgICAgIyBlbHNlIGJvZ3VzIGlucHV0CiAgICAgICAgICAgICAgICBpZiBzZWxmLnN0cmljdDoKICAgICAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZXBvcyhpLCBqICsgMSkKICAgICAgICAgICAgICAgICAgICBzZWxmLmVycm9yKCJtYWxmb3JtZWQgZW1wdHkgc3RhcnQgdGFnIikKICAgICAgICAgICAgICAgIGlmIGogPiBpOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBqCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBpICsgMQogICAgICAgICAgICBpZiBuZXh0ID09ICIiOgogICAgICAgICAgICAgICAgIyBlbmQgb2YgaW5wdXQKICAgICAgICAgICAgICAgIHJldHVybiAtMQogICAgICAgICAgICBpZiBuZXh0IGluICgiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo9LyIKICAgICAgICAgICAgICAgICAgICAgICAgIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaIik6CiAgICAgICAgICAgICAgICAjIGVuZCBvZiBpbnB1dCBpbiBvciBiZWZvcmUgYXR0cmlidXRlIHZhbHVlLCBvciB3ZSBoYXZlIHRoZQogICAgICAgICAgICAgICAgIyAnLycgZnJvbSBhICcvPicgZW5kaW5nCiAgICAgICAgICAgICAgICByZXR1cm4gLTEKICAgICAgICAgICAgaWYgc2VsZi5zdHJpY3Q6CiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZXBvcyhpLCBqKQogICAgICAgICAgICAgICAgc2VsZi5lcnJvcigibWFsZm9ybWVkIHN0YXJ0IHRhZyIpCiAgICAgICAgICAgIGlmIGogPiBpOgogICAgICAgICAgICAgICAgcmV0dXJuIGoKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBpICsgMQogICAgICAgIHJhaXNlIEFzc2VydGlvbkVycm9yKCJ3ZSBzaG91bGQgbm90IGdldCBoZXJlISIpCgogICAgIyBJbnRlcm5hbCAtLSBwYXJzZSBlbmR0YWcsIHJldHVybiBlbmQgb3IgLTEgaWYgaW5jb21wbGV0ZQogICAgZGVmIHBhcnNlX2VuZHRhZyhzZWxmLCBpKToKICAgICAgICByYXdkYXRhID0gc2VsZi5yYXdkYXRhCiAgICAgICAgYXNzZXJ0IHJhd2RhdGFbaTppKzJdID09ICI8LyIsICJ1bmV4cGVjdGVkIGNhbGwgdG8gcGFyc2VfZW5kdGFnIgogICAgICAgIG1hdGNoID0gZW5kZW5kdGFnLnNlYXJjaChyYXdkYXRhLCBpKzEpICMgPgogICAgICAgIGlmIG5vdCBtYXRjaDoKICAgICAgICAgICAgcmV0dXJuIC0xCiAgICAgICAgZ3Rwb3MgPSBtYXRjaC5lbmQoKQogICAgICAgIG1hdGNoID0gZW5kdGFnZmluZC5tYXRjaChyYXdkYXRhLCBpKSAjIDwvICsgdGFnICsgPgogICAgICAgIGlmIG5vdCBtYXRjaDoKICAgICAgICAgICAgaWYgc2VsZi5jZGF0YV9lbGVtIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVfZGF0YShyYXdkYXRhW2k6Z3Rwb3NdKQogICAgICAgICAgICAgICAgcmV0dXJuIGd0cG9zCiAgICAgICAgICAgIGlmIHNlbGYuc3RyaWN0OgogICAgICAgICAgICAgICAgc2VsZi5lcnJvcigiYmFkIGVuZCB0YWc6ICVyIiAlIChyYXdkYXRhW2k6Z3Rwb3NdLCkpCiAgICAgICAgICAgICMgZmluZCB0aGUgbmFtZTogdzMub3JnL1RSL2h0bWw1L3Rva2VuaXphdGlvbi5odG1sI3RhZy1uYW1lLXN0YXRlCiAgICAgICAgICAgIG5hbWVtYXRjaCA9IHRhZ2ZpbmRfdG9sZXJhbnQubWF0Y2gocmF3ZGF0YSwgaSsyKQogICAgICAgICAgICBpZiBub3QgbmFtZW1hdGNoOgogICAgICAgICAgICAgICAgIyB3My5vcmcvVFIvaHRtbDUvdG9rZW5pemF0aW9uLmh0bWwjZW5kLXRhZy1vcGVuLXN0YXRlCiAgICAgICAgICAgICAgICBpZiByYXdkYXRhW2k6aSszXSA9PSAnPC8+JzoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSszCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnBhcnNlX2JvZ3VzX2NvbW1lbnQoaSkKICAgICAgICAgICAgdGFnbmFtZSA9IG5hbWVtYXRjaC5ncm91cCgpLmxvd2VyKCkKICAgICAgICAgICAgIyBjb25zdW1lIGFuZCBpZ25vcmUgb3RoZXIgc3R1ZmYgYmV0d2VlbiB0aGUgbmFtZSBhbmQgdGhlID4KICAgICAgICAgICAgIyBOb3RlOiB0aGlzIGlzIG5vdCAxMDAlIGNvcnJlY3QsIHNpbmNlIHdlIG1pZ2h0IGhhdmUgdGhpbmdzIGxpa2UKICAgICAgICAgICAgIyA8L3RhZyBhdHRyPSI+Ij4sIGJ1dCBsb29raW5nIGZvciA+IGFmdGVyIHRoYSBuYW1lIHNob3VsZCBjb3ZlcgogICAgICAgICAgICAjIG1vc3Qgb2YgdGhlIGNhc2VzIGFuZCBpcyBtdWNoIHNpbXBsZXIKICAgICAgICAgICAgZ3Rwb3MgPSByYXdkYXRhLmZpbmQoJz4nLCBuYW1lbWF0Y2guZW5kKCkpCiAgICAgICAgICAgIHNlbGYuaGFuZGxlX2VuZHRhZyh0YWduYW1lKQogICAgICAgICAgICByZXR1cm4gZ3Rwb3MrMQoKICAgICAgICBlbGVtID0gbWF0Y2guZ3JvdXAoMSkubG93ZXIoKSAjIHNjcmlwdCBvciBzdHlsZQogICAgICAgIGlmIHNlbGYuY2RhdGFfZWxlbSBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgZWxlbSAhPSBzZWxmLmNkYXRhX2VsZW06CiAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9kYXRhKHJhd2RhdGFbaTpndHBvc10pCiAgICAgICAgICAgICAgICByZXR1cm4gZ3Rwb3MKCiAgICAgICAgc2VsZi5oYW5kbGVfZW5kdGFnKGVsZW0ubG93ZXIoKSkKICAgICAgICBzZWxmLmNsZWFyX2NkYXRhX21vZGUoKQogICAgICAgIHJldHVybiBndHBvcwoKICAgICMgT3ZlcnJpZGFibGUgLS0gZmluaXNoIHByb2Nlc3Npbmcgb2Ygc3RhcnQrZW5kIHRhZzogPHRhZy4uLi8+CiAgICBkZWYgaGFuZGxlX3N0YXJ0ZW5kdGFnKHNlbGYsIHRhZywgYXR0cnMpOgogICAgICAgIHNlbGYuaGFuZGxlX3N0YXJ0dGFnKHRhZywgYXR0cnMpCiAgICAgICAgc2VsZi5oYW5kbGVfZW5kdGFnKHRhZykKCiAgICAjIE92ZXJyaWRhYmxlIC0tIGhhbmRsZSBzdGFydCB0YWcKICAgIGRlZiBoYW5kbGVfc3RhcnR0YWcoc2VsZiwgdGFnLCBhdHRycyk6CiAgICAgICAgcGFzcwoKICAgICMgT3ZlcnJpZGFibGUgLS0gaGFuZGxlIGVuZCB0YWcKICAgIGRlZiBoYW5kbGVfZW5kdGFnKHNlbGYsIHRhZyk6CiAgICAgICAgcGFzcwoKICAgICMgT3ZlcnJpZGFibGUgLS0gaGFuZGxlIGNoYXJhY3RlciByZWZlcmVuY2UKICAgIGRlZiBoYW5kbGVfY2hhcnJlZihzZWxmLCBuYW1lKToKICAgICAgICBwYXNzCgogICAgIyBPdmVycmlkYWJsZSAtLSBoYW5kbGUgZW50aXR5IHJlZmVyZW5jZQogICAgZGVmIGhhbmRsZV9lbnRpdHlyZWYoc2VsZiwgbmFtZSk6CiAgICAgICAgcGFzcwoKICAgICMgT3ZlcnJpZGFibGUgLS0gaGFuZGxlIGRhdGEKICAgIGRlZiBoYW5kbGVfZGF0YShzZWxmLCBkYXRhKToKICAgICAgICBwYXNzCgogICAgIyBPdmVycmlkYWJsZSAtLSBoYW5kbGUgY29tbWVudAogICAgZGVmIGhhbmRsZV9jb21tZW50KHNlbGYsIGRhdGEpOgogICAgICAgIHBhc3MKCiAgICAjIE92ZXJyaWRhYmxlIC0tIGhhbmRsZSBkZWNsYXJhdGlvbgogICAgZGVmIGhhbmRsZV9kZWNsKHNlbGYsIGRlY2wpOgogICAgICAgIHBhc3MKCiAgICAjIE92ZXJyaWRhYmxlIC0tIGhhbmRsZSBwcm9jZXNzaW5nIGluc3RydWN0aW9uCiAgICBkZWYgaGFuZGxlX3BpKHNlbGYsIGRhdGEpOgogICAgICAgIHBhc3MKCiAgICBkZWYgdW5rbm93bl9kZWNsKHNlbGYsIGRhdGEpOgogICAgICAgIGlmIHNlbGYuc3RyaWN0OgogICAgICAgICAgICBzZWxmLmVycm9yKCJ1bmtub3duIGRlY2xhcmF0aW9uOiAlciIgJSAoZGF0YSwpKQoKICAgICMgSW50ZXJuYWwgLS0gaGVscGVyIHRvIHJlbW92ZSBzcGVjaWFsIGNoYXJhY3RlciBxdW90aW5nCiAgICBkZWYgdW5lc2NhcGUoc2VsZiwgcyk6CiAgICAgICAgaWYgJyYnIG5vdCBpbiBzOgogICAgICAgICAgICByZXR1cm4gcwogICAgICAgIGRlZiByZXBsYWNlRW50aXRpZXMocyk6CiAgICAgICAgICAgIHMgPSBzLmdyb3VwcygpWzBdCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIHNbMF0gPT0gIiMiOgogICAgICAgICAgICAgICAgICAgIHMgPSBzWzE6XQogICAgICAgICAgICAgICAgICAgIGlmIHNbMF0gaW4gWyd4JywnWCddOgogICAgICAgICAgICAgICAgICAgICAgICBjID0gaW50KHNbMTpdLnJzdHJpcCgnOycpLCAxNikKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBjID0gaW50KHMucnN0cmlwKCc7JykpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNocihjKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgIHJldHVybiAnJiMnICsgcwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZnJvbSBodG1sLmVudGl0aWVzIGltcG9ydCBodG1sNQogICAgICAgICAgICAgICAgaWYgcyBpbiBodG1sNToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHRtbDVbc10KICAgICAgICAgICAgICAgIGVsaWYgcy5lbmRzd2l0aCgnOycpOgogICAgICAgICAgICAgICAgICAgIHJldHVybiAnJicgKyBzCiAgICAgICAgICAgICAgICBmb3IgeCBpbiByYW5nZSgyLCBsZW4ocykpOgogICAgICAgICAgICAgICAgICAgIGlmIHNbOnhdIGluIGh0bWw1OgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHRtbDVbc1s6eF1dICsgc1t4Ol0KICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcmJyArIHMKCiAgICAgICAgcmV0dXJuIHJlLnN1YihyIiYoIz9beFhdPyg/OlswLTlhLWZBLUZdKzt8XHd7MSwzMn07PykpIiwKICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VFbnRpdGllcywgcywgZmxhZ3M9cmUuQVNDSUkpCg==',
'/Lib/collections/__init__.py':'I19fYWxsX18gPSBbJ2RlcXVlJywgJ2RlZmF1bHRkaWN0JywgJ0NvdW50ZXInXQoKZnJvbSBfY29sbGVjdGlvbnMgaW1wb3J0IGRlcXVlLCBkZWZhdWx0ZGljdAoKI2Zyb20gaXRlcnRvb2xzIGltcG9ydCByZXBlYXQgYXMgX3JlcGVhdCwgY2hhaW4gYXMgX2NoYWluLCBzdGFybWFwIGFzIF9zdGFybWFwCgpfX2FsbF9fID0gWydkZXF1ZScsICdkZWZhdWx0ZGljdCcsICduYW1lZHR1cGxlJywgJ1VzZXJEaWN0JywgJ1VzZXJMaXN0JywKICAgICAgICAgICAgJ1VzZXJTdHJpbmcnLCAnQ291bnRlcicsICdPcmRlcmVkRGljdCddCiMgRm9yIGJvb3RzdHJhcHBpbmcgcmVhc29ucywgdGhlIGNvbGxlY3Rpb24gQUJDcyBhcmUgZGVmaW5lZCBpbiBfYWJjb2xsLnB5LgojIFRoZXkgc2hvdWxkIGhvd2V2ZXIgYmUgY29uc2lkZXJlZCBhbiBpbnRlZ3JhbCBwYXJ0IG9mIGNvbGxlY3Rpb25zLnB5LgoKIyBmaXhtZSBicnl0aG9uLi4gdGhlcmUgaXMgYW4gaXNzdWUgd2l0aCBfYWJjb2xsCiNmcm9tIF9hYmNvbGwgaW1wb3J0ICoKI2Zyb20gX2FiY29sbCBpbXBvcnQgU2V0CmZyb20gX2FiY29sbCBpbXBvcnQgTXV0YWJsZU1hcHBpbmcKI2ltcG9ydCBfYWJjb2xsCiNfX2FsbF9fICs9IF9hYmNvbGwuX19hbGxfXwoKZnJvbSBfY29sbGVjdGlvbnMgaW1wb3J0IGRlcXVlLCBkZWZhdWx0ZGljdCwgbmFtZWR0dXBsZQojZml4bWUsIGJyeXRob24uICBUaGlzIGNhdXNlcyBhIFJlZmVyZW5jZUVycm9yOiBpdGVtZ2V0dGVyIGlzIG5vdCBkZWZpbmVkCmZyb20gb3BlcmF0b3IgaW1wb3J0IGl0ZW1nZXR0ZXIgYXMgX2l0ZW1nZXR0ZXIKZnJvbSBrZXl3b3JkIGltcG9ydCBpc2tleXdvcmQgYXMgX2lza2V5d29yZAppbXBvcnQgc3lzIGFzIF9zeXMKaW1wb3J0IGhlYXBxIGFzIF9oZWFwcQojZml4bWUgYnJ5dGhvbgojZnJvbSB3ZWFrcmVmIGltcG9ydCBwcm94eSBhcyBfcHJveHkKZnJvbSBpdGVydG9vbHMgaW1wb3J0IHJlcGVhdCBhcyBfcmVwZWF0LCBjaGFpbiBhcyBfY2hhaW4sIHN0YXJtYXAgYXMgX3N0YXJtYXAKI2ZpeG1lIGJyeXRob24gCmZyb20gcmVwcmxpYiBpbXBvcnQgcmVjdXJzaXZlX3JlcHIgYXMgX3JlY3Vyc2l2ZV9yZXByCgpjbGFzcyBTZXQoc2V0KToKICAgIHBhc3MKCmNsYXNzIFNlcXVlbmNlKGxpc3QpOgogICAgcGFzcwoKZGVmIF9wcm94eShvYmopOgogICAgcmV0dXJuIG9iagoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIE9yZGVyZWREaWN0CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpjbGFzcyBfTGluayhvYmplY3QpOgogICAgX19zbG90c19fID0gJ3ByZXYnLCAnbmV4dCcsICdrZXknLCAnX193ZWFrcmVmX18nCgpjbGFzcyBPcmRlcmVkRGljdChkaWN0KToKICAgICdEaWN0aW9uYXJ5IHRoYXQgcmVtZW1iZXJzIGluc2VydGlvbiBvcmRlcicKICAgICMgQW4gaW5oZXJpdGVkIGRpY3QgbWFwcyBrZXlzIHRvIHZhbHVlcy4KICAgICMgVGhlIGluaGVyaXRlZCBkaWN0IHByb3ZpZGVzIF9fZ2V0aXRlbV9fLCBfX2xlbl9fLCBfX2NvbnRhaW5zX18sIGFuZCBnZXQuCiAgICAjIFRoZSByZW1haW5pbmcgbWV0aG9kcyBhcmUgb3JkZXItYXdhcmUuCiAgICAjIEJpZy1PIHJ1bm5pbmcgdGltZXMgZm9yIGFsbCBtZXRob2RzIGFyZSB0aGUgc2FtZSBhcyByZWd1bGFyIGRpY3Rpb25hcmllcy4KCiAgICAjIFRoZSBpbnRlcm5hbCBzZWxmLl9fbWFwIGRpY3QgbWFwcyBrZXlzIHRvIGxpbmtzIGluIGEgZG91Ymx5IGxpbmtlZCBsaXN0LgogICAgIyBUaGUgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0IHN0YXJ0cyBhbmQgZW5kcyB3aXRoIGEgc2VudGluZWwgZWxlbWVudC4KICAgICMgVGhlIHNlbnRpbmVsIGVsZW1lbnQgbmV2ZXIgZ2V0cyBkZWxldGVkICh0aGlzIHNpbXBsaWZpZXMgdGhlIGFsZ29yaXRobSkuCiAgICAjIFRoZSBzZW50aW5lbCBpcyBpbiBzZWxmLl9faGFyZHJvb3Qgd2l0aCBhIHdlYWtyZWYgcHJveHkgaW4gc2VsZi5fX3Jvb3QuCiAgICAjIFRoZSBwcmV2IGxpbmtzIGFyZSB3ZWFrcmVmIHByb3hpZXMgKHRvIHByZXZlbnQgY2lyY3VsYXIgcmVmZXJlbmNlcykuCiAgICAjIEluZGl2aWR1YWwgbGlua3MgYXJlIGtlcHQgYWxpdmUgYnkgdGhlIGhhcmQgcmVmZXJlbmNlIGluIHNlbGYuX19tYXAuCiAgICAjIFRob3NlIGhhcmQgcmVmZXJlbmNlcyBkaXNhcHBlYXIgd2hlbiBhIGtleSBpcyBkZWxldGVkIGZyb20gYW4gT3JkZXJlZERpY3QuCgogICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3ZHMpOgogICAgICAgICcnJ0luaXRpYWxpemUgYW4gb3JkZXJlZCBkaWN0aW9uYXJ5LiAgVGhlIHNpZ25hdHVyZSBpcyB0aGUgc2FtZSBhcwogICAgICAgIHJlZ3VsYXIgZGljdGlvbmFyaWVzLCBidXQga2V5d29yZCBhcmd1bWVudHMgYXJlIG5vdCByZWNvbW1lbmRlZCBiZWNhdXNlCiAgICAgICAgdGhlaXIgaW5zZXJ0aW9uIG9yZGVyIGlzIGFyYml0cmFyeS4KCiAgICAgICAgJycnCiAgICAgICAgaWYgbGVuKGFyZ3MpID4gMToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdleHBlY3RlZCBhdCBtb3N0IDEgYXJndW1lbnRzLCBnb3QgJWQnICUgbGVuKGFyZ3MpKQogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5fX3Jvb3QKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHNlbGYuX19oYXJkcm9vdCA9IF9MaW5rKCkKICAgICAgICAgICAgc2VsZi5fX3Jvb3QgPSByb290ID0gX3Byb3h5KHNlbGYuX19oYXJkcm9vdCkKICAgICAgICAgICAgcm9vdC5wcmV2ID0gcm9vdC5uZXh0ID0gcm9vdAogICAgICAgICAgICBzZWxmLl9fbWFwID0ge30KICAgICAgICBzZWxmLl9fdXBkYXRlKCphcmdzLCAqKmt3ZHMpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsIGtleSwgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgZGljdF9zZXRpdGVtPWRpY3QuX19zZXRpdGVtX18sIHByb3h5PV9wcm94eSwgTGluaz1fTGluayk6CiAgICAgICAgJ29kLl9fc2V0aXRlbV9fKGksIHkpIDw9PT4gb2RbaV09eScKICAgICAgICAjIFNldHRpbmcgYSBuZXcgaXRlbSBjcmVhdGVzIGEgbmV3IGxpbmsgYXQgdGhlIGVuZCBvZiB0aGUgbGlua2VkIGxpc3QsCiAgICAgICAgIyBhbmQgdGhlIGluaGVyaXRlZCBkaWN0aW9uYXJ5IGlzIHVwZGF0ZWQgd2l0aCB0aGUgbmV3IGtleS92YWx1ZSBwYWlyLgogICAgICAgIGlmIGtleSBub3QgaW4gc2VsZjoKICAgICAgICAgICAgc2VsZi5fX21hcFtrZXldID0gbGluayA9IExpbmsoKQogICAgICAgICAgICByb290ID0gc2VsZi5fX3Jvb3QKICAgICAgICAgICAgbGFzdCA9IHJvb3QucHJldgogICAgICAgICAgICBsaW5rLnByZXYsIGxpbmsubmV4dCwgbGluay5rZXkgPSBsYXN0LCByb290LCBrZXkKICAgICAgICAgICAgbGFzdC5uZXh0ID0gbGluawogICAgICAgICAgICByb290LnByZXYgPSBwcm94eShsaW5rKQogICAgICAgIGRpY3Rfc2V0aXRlbShzZWxmLCBrZXksIHZhbHVlKQoKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXksIGRpY3RfZGVsaXRlbT1kaWN0Ll9fZGVsaXRlbV9fKToKICAgICAgICAnb2QuX19kZWxpdGVtX18oeSkgPD09PiBkZWwgb2RbeV0nCiAgICAgICAgIyBEZWxldGluZyBhbiBleGlzdGluZyBpdGVtIHVzZXMgc2VsZi5fX21hcCB0byBmaW5kIHRoZSBsaW5rIHdoaWNoIGdldHMKICAgICAgICAjIHJlbW92ZWQgYnkgdXBkYXRpbmcgdGhlIGxpbmtzIGluIHRoZSBwcmVkZWNlc3NvciBhbmQgc3VjY2Vzc29yIG5vZGVzLgogICAgICAgIGRpY3RfZGVsaXRlbShzZWxmLCBrZXkpCiAgICAgICAgbGluayA9IHNlbGYuX19tYXAucG9wKGtleSkKICAgICAgICBsaW5rX3ByZXYgPSBsaW5rLnByZXYKICAgICAgICBsaW5rX25leHQgPSBsaW5rLm5leHQKICAgICAgICBsaW5rX3ByZXYubmV4dCA9IGxpbmtfbmV4dAogICAgICAgIGxpbmtfbmV4dC5wcmV2ID0gbGlua19wcmV2CgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgICdvZC5fX2l0ZXJfXygpIDw9PT4gaXRlcihvZCknCiAgICAgICAgIyBUcmF2ZXJzZSB0aGUgbGlua2VkIGxpc3QgaW4gb3JkZXIuCiAgICAgICAgcm9vdCA9IHNlbGYuX19yb290CiAgICAgICAgY3VyciA9IHJvb3QubmV4dAogICAgICAgIHdoaWxlIGN1cnIgaXMgbm90IHJvb3Q6CiAgICAgICAgICAgIHlpZWxkIGN1cnIua2V5CiAgICAgICAgICAgIGN1cnIgPSBjdXJyLm5leHQKCiAgICBkZWYgX19yZXZlcnNlZF9fKHNlbGYpOgogICAgICAgICdvZC5fX3JldmVyc2VkX18oKSA8PT0+IHJldmVyc2VkKG9kKScKICAgICAgICAjIFRyYXZlcnNlIHRoZSBsaW5rZWQgbGlzdCBpbiByZXZlcnNlIG9yZGVyLgogICAgICAgIHJvb3QgPSBzZWxmLl9fcm9vdAogICAgICAgIGN1cnIgPSByb290LnByZXYKICAgICAgICB3aGlsZSBjdXJyIGlzIG5vdCByb290OgogICAgICAgICAgICB5aWVsZCBjdXJyLmtleQogICAgICAgICAgICBjdXJyID0gY3Vyci5wcmV2CgogICAgZGVmIGNsZWFyKHNlbGYpOgogICAgICAgICdvZC5jbGVhcigpIC0+IE5vbmUuICBSZW1vdmUgYWxsIGl0ZW1zIGZyb20gb2QuJwogICAgICAgIHJvb3QgPSBzZWxmLl9fcm9vdAogICAgICAgIHJvb3QucHJldiA9IHJvb3QubmV4dCA9IHJvb3QKICAgICAgICBzZWxmLl9fbWFwLmNsZWFyKCkKICAgICAgICBkaWN0LmNsZWFyKHNlbGYpCgogICAgZGVmIHBvcGl0ZW0oc2VsZiwgbGFzdD1UcnVlKToKICAgICAgICAnJydvZC5wb3BpdGVtKCkgLT4gKGssIHYpLCByZXR1cm4gYW5kIHJlbW92ZSBhIChrZXksIHZhbHVlKSBwYWlyLgogICAgICAgIFBhaXJzIGFyZSByZXR1cm5lZCBpbiBMSUZPIG9yZGVyIGlmIGxhc3QgaXMgdHJ1ZSBvciBGSUZPIG9yZGVyIGlmIGZhbHNlLgoKICAgICAgICAnJycKICAgICAgICBpZiBub3Qgc2VsZjoKICAgICAgICAgICAgcmFpc2UgS2V5RXJyb3IoJ2RpY3Rpb25hcnkgaXMgZW1wdHknKQogICAgICAgIHJvb3QgPSBzZWxmLl9fcm9vdAogICAgICAgIGlmIGxhc3Q6CiAgICAgICAgICAgIGxpbmsgPSByb290LnByZXYKICAgICAgICAgICAgbGlua19wcmV2ID0gbGluay5wcmV2CiAgICAgICAgICAgIGxpbmtfcHJldi5uZXh0ID0gcm9vdAogICAgICAgICAgICByb290LnByZXYgPSBsaW5rX3ByZXYKICAgICAgICBlbHNlOgogICAgICAgICAgICBsaW5rID0gcm9vdC5uZXh0CiAgICAgICAgICAgIGxpbmtfbmV4dCA9IGxpbmsubmV4dAogICAgICAgICAgICByb290Lm5leHQgPSBsaW5rX25leHQKICAgICAgICAgICAgbGlua19uZXh0LnByZXYgPSByb290CiAgICAgICAga2V5ID0gbGluay5rZXkKICAgICAgICBkZWwgc2VsZi5fX21hcFtrZXldCiAgICAgICAgdmFsdWUgPSBkaWN0LnBvcChzZWxmLCBrZXkpCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgbW92ZV90b19lbmQoc2VsZiwga2V5LCBsYXN0PVRydWUpOgogICAgICAgICcnJ01vdmUgYW4gZXhpc3RpbmcgZWxlbWVudCB0byB0aGUgZW5kIChvciBiZWdpbm5pbmcgaWYgbGFzdD09RmFsc2UpLgoKICAgICAgICBSYWlzZXMgS2V5RXJyb3IgaWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgZXhpc3QuCiAgICAgICAgV2hlbiBsYXN0PVRydWUsIGFjdHMgbGlrZSBhIGZhc3QgdmVyc2lvbiBvZiBzZWxmW2tleV09c2VsZi5wb3Aoa2V5KS4KCiAgICAgICAgJycnCiAgICAgICAgbGluayA9IHNlbGYuX19tYXBba2V5XQogICAgICAgIGxpbmtfcHJldiA9IGxpbmsucHJldgogICAgICAgIGxpbmtfbmV4dCA9IGxpbmsubmV4dAogICAgICAgIGxpbmtfcHJldi5uZXh0ID0gbGlua19uZXh0CiAgICAgICAgbGlua19uZXh0LnByZXYgPSBsaW5rX3ByZXYKICAgICAgICByb290ID0gc2VsZi5fX3Jvb3QKICAgICAgICBpZiBsYXN0OgogICAgICAgICAgICBsYXN0ID0gcm9vdC5wcmV2CiAgICAgICAgICAgIGxpbmsucHJldiA9IGxhc3QKICAgICAgICAgICAgbGluay5uZXh0ID0gcm9vdAogICAgICAgICAgICBsYXN0Lm5leHQgPSByb290LnByZXYgPSBsaW5rCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZmlyc3QgPSByb290Lm5leHQKICAgICAgICAgICAgbGluay5wcmV2ID0gcm9vdAogICAgICAgICAgICBsaW5rLm5leHQgPSBmaXJzdAogICAgICAgICAgICByb290Lm5leHQgPSBmaXJzdC5wcmV2ID0gbGluawoKICAgIGRlZiBfX3NpemVvZl9fKHNlbGYpOgogICAgICAgIHNpemVvZiA9IF9zeXMuZ2V0c2l6ZW9mCiAgICAgICAgbiA9IGxlbihzZWxmKSArIDEgICAgICAgICAgICAgICAgICAgICAgICMgbnVtYmVyIG9mIGxpbmtzIGluY2x1ZGluZyByb290CiAgICAgICAgc2l6ZSA9IHNpemVvZihzZWxmLl9fZGljdF9fKSAgICAgICAgICAgICMgaW5zdGFuY2UgZGljdGlvbmFyeQogICAgICAgIHNpemUgKz0gc2l6ZW9mKHNlbGYuX19tYXApICogMiAgICAgICAgICAjIGludGVybmFsIGRpY3QgYW5kIGluaGVyaXRlZCBkaWN0CiAgICAgICAgc2l6ZSArPSBzaXplb2Yoc2VsZi5fX2hhcmRyb290KSAqIG4gICAgICMgbGluayBvYmplY3RzCiAgICAgICAgc2l6ZSArPSBzaXplb2Yoc2VsZi5fX3Jvb3QpICogbiAgICAgICAgICMgcHJveHkgb2JqZWN0cwogICAgICAgIHJldHVybiBzaXplCgogICAgI2ZpeG1lIGJyeXRob24uLiAgSXNzdWUgd2l0aCBfYWJjb2xsLCB3aGljaCBjb250YWlucyBNdXRhYmxlTWFwcGluZwogICAgdXBkYXRlID0gX191cGRhdGUgPSBNdXRhYmxlTWFwcGluZy51cGRhdGUKICAgIGtleXMgPSBNdXRhYmxlTWFwcGluZy5rZXlzCiAgICB2YWx1ZXMgPSBNdXRhYmxlTWFwcGluZy52YWx1ZXMKICAgIGl0ZW1zID0gTXV0YWJsZU1hcHBpbmcuaXRlbXMKICAgIF9fbmVfXyA9IE11dGFibGVNYXBwaW5nLl9fbmVfXwoKICAgIF9fbWFya2VyID0gb2JqZWN0KCkKCiAgICBkZWYgcG9wKHNlbGYsIGtleSwgZGVmYXVsdD1fX21hcmtlcik6CiAgICAgICAgJycnb2QucG9wKGtbLGRdKSAtPiB2LCByZW1vdmUgc3BlY2lmaWVkIGtleSBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nCiAgICAgICAgdmFsdWUuICBJZiBrZXkgaXMgbm90IGZvdW5kLCBkIGlzIHJldHVybmVkIGlmIGdpdmVuLCBvdGhlcndpc2UgS2V5RXJyb3IKICAgICAgICBpcyByYWlzZWQuCgogICAgICAgICcnJwogICAgICAgIGlmIGtleSBpbiBzZWxmOgogICAgICAgICAgICByZXN1bHQgPSBzZWxmW2tleV0KICAgICAgICAgICAgZGVsIHNlbGZba2V5XQogICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgaWYgZGVmYXVsdCBpcyBzZWxmLl9fbWFya2VyOgogICAgICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgJ29kLnNldGRlZmF1bHQoa1ssZF0pIC0+IG9kLmdldChrLGQpLCBhbHNvIHNldCBvZFtrXT1kIGlmIGsgbm90IGluIG9kJwogICAgICAgIGlmIGtleSBpbiBzZWxmOgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgc2VsZltrZXldID0gZGVmYXVsdAogICAgICAgIHJldHVybiBkZWZhdWx0CgogICAgI2ZpeG1lLCBicnl0aG9uIGlzc3VlCiAgICAjQF9yZWN1cnNpdmVfcmVwcigpCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgJ29kLl9fcmVwcl9fKCkgPD09PiByZXByKG9kKScKICAgICAgICBpZiBub3Qgc2VsZjoKICAgICAgICAgICAgcmV0dXJuICclcygpJyAlIChzZWxmLl9fY2xhc3NfXy5fX25hbWVfXywpCiAgICAgICAgcmV0dXJuICclcyglciknICUgKHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBsaXN0KHNlbGYuaXRlbXMoKSkpCgogICAgZGVmIF9fcmVkdWNlX18oc2VsZik6CiAgICAgICAgJ1JldHVybiBzdGF0ZSBpbmZvcm1hdGlvbiBmb3IgcGlja2xpbmcnCiAgICAgICAgaXRlbXMgPSBbW2ssIHNlbGZba11dIGZvciBrIGluIHNlbGZdCiAgICAgICAgaW5zdF9kaWN0ID0gdmFycyhzZWxmKS5jb3B5KCkKICAgICAgICBmb3IgayBpbiB2YXJzKE9yZGVyZWREaWN0KCkpOgogICAgICAgICAgICBpbnN0X2RpY3QucG9wKGssIE5vbmUpCiAgICAgICAgaWYgaW5zdF9kaWN0OgogICAgICAgICAgICByZXR1cm4gKHNlbGYuX19jbGFzc19fLCAoaXRlbXMsKSwgaW5zdF9kaWN0KQogICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXywgKGl0ZW1zLCkKCiAgICBkZWYgY29weShzZWxmKToKICAgICAgICAnb2QuY29weSgpIC0+IGEgc2hhbGxvdyBjb3B5IG9mIG9kJwogICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21rZXlzKGNscywgaXRlcmFibGUsIHZhbHVlPU5vbmUpOgogICAgICAgICcnJ09ELmZyb21rZXlzKFNbLCB2XSkgLT4gTmV3IG9yZGVyZWQgZGljdGlvbmFyeSB3aXRoIGtleXMgZnJvbSBTLgogICAgICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB2YWx1ZSBkZWZhdWx0cyB0byBOb25lLgoKICAgICAgICAnJycKICAgICAgICBzZWxmID0gY2xzKCkKICAgICAgICBmb3Iga2V5IGluIGl0ZXJhYmxlOgogICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXFfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgJycnb2QuX19lcV9fKHkpIDw9PT4gb2Q9PXkuICBDb21wYXJpc29uIHRvIGFub3RoZXIgT0QgaXMgb3JkZXItc2Vuc2l0aXZlCiAgICAgICAgd2hpbGUgY29tcGFyaXNvbiB0byBhIHJlZ3VsYXIgbWFwcGluZyBpcyBvcmRlci1pbnNlbnNpdGl2ZS4KCiAgICAgICAgJycnCiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgT3JkZXJlZERpY3QpOgogICAgICAgICAgICByZXR1cm4gbGVuKHNlbGYpPT1sZW4ob3RoZXIpIGFuZCBcCiAgICAgICAgICAgICAgICAgICBhbGwocD09cSBmb3IgcCwgcSBpbiB6aXAoc2VsZi5pdGVtcygpLCBvdGhlci5pdGVtcygpKSkKICAgICAgICByZXR1cm4gZGljdC5fX2VxX18oc2VsZiwgb3RoZXIpCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyAgQ291bnRlcgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCgpkZWYgX2NvdW50X2VsZW1lbnRzKG1hcHBpbmcsIGl0ZXJhYmxlKToKICAgICdUYWxseSBlbGVtZW50cyBmcm9tIHRoZSBpdGVyYWJsZS4nCiAgICBtYXBwaW5nX2dldCA9IG1hcHBpbmcuZ2V0CiAgICBmb3IgZWxlbSBpbiBpdGVyYWJsZToKICAgICAgICBtYXBwaW5nW2VsZW1dID0gbWFwcGluZ19nZXQoZWxlbSwgMCkgKyAxCgojdHJ5OiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTG9hZCBDIGhlbHBlciBmdW5jdGlvbiBpZiBhdmFpbGFibGUKIyAgICBmcm9tIF9jb2xsZWN0aW9ucyBpbXBvcnQgX2NvdW50X2VsZW1lbnRzCiNleGNlcHQgSW1wb3J0RXJyb3I6CiMgICAgcGFzcwoKY2xhc3MgQ291bnRlcihkaWN0KToKICAgICcnJ0RpY3Qgc3ViY2xhc3MgZm9yIGNvdW50aW5nIGhhc2hhYmxlIGl0ZW1zLiAgU29tZXRpbWVzIGNhbGxlZCBhIGJhZwogICAgb3IgbXVsdGlzZXQuICBFbGVtZW50cyBhcmUgc3RvcmVkIGFzIGRpY3Rpb25hcnkga2V5cyBhbmQgdGhlaXIgY291bnRzCiAgICBhcmUgc3RvcmVkIGFzIGRpY3Rpb25hcnkgdmFsdWVzLgoKICAgID4+PiBjID0gQ291bnRlcignYWJjZGVhYmNkYWJjYWJhJykgICMgY291bnQgZWxlbWVudHMgZnJvbSBhIHN0cmluZwoKICAgID4+PiBjLm1vc3RfY29tbW9uKDMpICAgICAgICAgICAgICAgICMgdGhyZWUgbW9zdCBjb21tb24gZWxlbWVudHMKICAgIFsoJ2EnLCA1KSwgKCdiJywgNCksICgnYycsIDMpXQogICAgPj4+IHNvcnRlZChjKSAgICAgICAgICAgICAgICAgICAgICAgIyBsaXN0IGFsbCB1bmlxdWUgZWxlbWVudHMKICAgIFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ10KICAgID4+PiAnJy5qb2luKHNvcnRlZChjLmVsZW1lbnRzKCkpKSAgICMgbGlzdCBlbGVtZW50cyB3aXRoIHJlcGV0aXRpb25zCiAgICAnYWFhYWFiYmJiY2NjZGRlJwogICAgPj4+IHN1bShjLnZhbHVlcygpKSAgICAgICAgICAgICAgICAgIyB0b3RhbCBvZiBhbGwgY291bnRzCiAgICAxNQoKICAgID4+PiBjWydhJ10gICAgICAgICAgICAgICAgICAgICAgICAgICMgY291bnQgb2YgbGV0dGVyICdhJwogICAgNQogICAgPj4+IGZvciBlbGVtIGluICdzaGF6YW0nOiAgICAgICAgICAgIyB1cGRhdGUgY291bnRzIGZyb20gYW4gaXRlcmFibGUKICAgIC4uLiAgICAgY1tlbGVtXSArPSAxICAgICAgICAgICAgICAgICMgYnkgYWRkaW5nIDEgdG8gZWFjaCBlbGVtZW50J3MgY291bnQKICAgID4+PiBjWydhJ10gICAgICAgICAgICAgICAgICAgICAgICAgICMgbm93IHRoZXJlIGFyZSBzZXZlbiAnYScKICAgIDcKICAgID4+PiBkZWwgY1snYiddICAgICAgICAgICAgICAgICAgICAgICMgcmVtb3ZlIGFsbCAnYicKICAgID4+PiBjWydiJ10gICAgICAgICAgICAgICAgICAgICAgICAgICMgbm93IHRoZXJlIGFyZSB6ZXJvICdiJwogICAgMAoKICAgID4+PiBkID0gQ291bnRlcignc2ltc2FsYWJpbScpICAgICAgICMgbWFrZSBhbm90aGVyIGNvdW50ZXIKICAgID4+PiBjLnVwZGF0ZShkKSAgICAgICAgICAgICAgICAgICAgICMgYWRkIGluIHRoZSBzZWNvbmQgY291bnRlcgogICAgPj4+IGNbJ2EnXSAgICAgICAgICAgICAgICAgICAgICAgICAgIyBub3cgdGhlcmUgYXJlIG5pbmUgJ2EnCiAgICA5CgogICAgPj4+IGMuY2xlYXIoKSAgICAgICAgICAgICAgICAgICAgICAgIyBlbXB0eSB0aGUgY291bnRlcgogICAgPj4+IGMKICAgIENvdW50ZXIoKQoKICAgIE5vdGU6ICBJZiBhIGNvdW50IGlzIHNldCB0byB6ZXJvIG9yIHJlZHVjZWQgdG8gemVybywgaXQgd2lsbCByZW1haW4KICAgIGluIHRoZSBjb3VudGVyIHVudGlsIHRoZSBlbnRyeSBpcyBkZWxldGVkIG9yIHRoZSBjb3VudGVyIGlzIGNsZWFyZWQ6CgogICAgPj4+IGMgPSBDb3VudGVyKCdhYWFiYmMnKQogICAgPj4+IGNbJ2InXSAtPSAyICAgICAgICAgICAgICAgICAgICAgIyByZWR1Y2UgdGhlIGNvdW50IG9mICdiJyBieSB0d28KICAgID4+PiBjLm1vc3RfY29tbW9uKCkgICAgICAgICAgICAgICAgICMgJ2InIGlzIHN0aWxsIGluLCBidXQgaXRzIGNvdW50IGlzIHplcm8KICAgIFsoJ2EnLCAzKSwgKCdjJywgMSksICgnYicsIDApXQoKICAgICcnJwogICAgIyBSZWZlcmVuY2VzOgogICAgIyAgIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTXVsdGlzZXQKICAgICMgICBodHRwOi8vd3d3LmdudS5vcmcvc29mdHdhcmUvc21hbGx0YWxrL21hbnVhbC1iYXNlL2h0bWxfbm9kZS9CYWcuaHRtbAogICAgIyAgIGh0dHA6Ly93d3cuZGVtbzJzLmNvbS9UdXRvcmlhbC9DcHAvMDM4MF9fc2V0LW11bHRpc2V0L0NhdGFsb2cwMzgwX19zZXQtbXVsdGlzZXQuaHRtCiAgICAjICAgaHR0cDovL2NvZGUuYWN0aXZlc3RhdGUuY29tL3JlY2lwZXMvMjU5MTc0LwogICAgIyAgIEtudXRoLCBUQU9DUCBWb2wuIElJIHNlY3Rpb24gNC42LjMKCiAgICBkZWYgX19pbml0X18oc2VsZiwgaXRlcmFibGU9Tm9uZSwgKiprd2RzKToKICAgICAgICAnJydDcmVhdGUgYSBuZXcsIGVtcHR5IENvdW50ZXIgb2JqZWN0LiAgQW5kIGlmIGdpdmVuLCBjb3VudCBlbGVtZW50cwogICAgICAgIGZyb20gYW4gaW5wdXQgaXRlcmFibGUuICBPciwgaW5pdGlhbGl6ZSB0aGUgY291bnQgZnJvbSBhbm90aGVyIG1hcHBpbmcKICAgICAgICBvZiBlbGVtZW50cyB0byB0aGVpciBjb3VudHMuCgogICAgICAgID4+PiBjID0gQ291bnRlcigpICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhIG5ldywgZW1wdHkgY291bnRlcgogICAgICAgID4+PiBjID0gQ291bnRlcignZ2FsbGFoYWQnKSAgICAgICAgICAgICAgICAgIyBhIG5ldyBjb3VudGVyIGZyb20gYW4gaXRlcmFibGUKICAgICAgICA+Pj4gYyA9IENvdW50ZXIoeydhJzogNCwgJ2InOiAyfSkgICAgICAgICAgICMgYSBuZXcgY291bnRlciBmcm9tIGEgbWFwcGluZwogICAgICAgID4+PiBjID0gQ291bnRlcihhPTQsIGI9MikgICAgICAgICAgICAgICAgICAgIyBhIG5ldyBjb3VudGVyIGZyb20ga2V5d29yZCBhcmdzCgogICAgICAgICcnJwogICAgICAgICNzdXBlcigpLl9faW5pdF9fKCkgICNCRSBtb2RpZmllZCBzaW5jZSBzdXBlciBub3Qgc3VwcG9ydGVkCiAgICAgICAgZGljdC5fX2luaXRfXyhzZWxmKQogICAgICAgIHNlbGYudXBkYXRlKGl0ZXJhYmxlLCAqKmt3ZHMpCgogICAgZGVmIF9fbWlzc2luZ19fKHNlbGYsIGtleSk6CiAgICAgICAgJ1RoZSBjb3VudCBvZiBlbGVtZW50cyBub3QgaW4gdGhlIENvdW50ZXIgaXMgemVyby4nCiAgICAgICAgIyBOZWVkZWQgc28gdGhhdCBzZWxmW21pc3NpbmdfaXRlbV0gZG9lcyBub3QgcmFpc2UgS2V5RXJyb3IKICAgICAgICByZXR1cm4gMAoKICAgIGRlZiBtb3N0X2NvbW1vbihzZWxmLCBuPU5vbmUpOgogICAgICAgICcnJ0xpc3QgdGhlIG4gbW9zdCBjb21tb24gZWxlbWVudHMgYW5kIHRoZWlyIGNvdW50cyBmcm9tIHRoZSBtb3N0CiAgICAgICAgY29tbW9uIHRvIHRoZSBsZWFzdC4gIElmIG4gaXMgTm9uZSwgdGhlbiBsaXN0IGFsbCBlbGVtZW50IGNvdW50cy4KCiAgICAgICAgPj4+IENvdW50ZXIoJ2FiY2RlYWJjZGFiY2FiYScpLm1vc3RfY29tbW9uKDMpCiAgICAgICAgWygnYScsIDUpLCAoJ2InLCA0KSwgKCdjJywgMyldCgogICAgICAgICcnJwogICAgICAgICMgRW11bGF0ZSBCYWcuc29ydGVkQnlDb3VudCBmcm9tIFNtYWxsdGFsawogICAgICAgIGlmIG4gaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNvcnRlZChzZWxmLml0ZW1zKCksIGtleT1faXRlbWdldHRlcigxKSwgcmV2ZXJzZT1UcnVlKQogICAgICAgIHJldHVybiBfaGVhcHEubmxhcmdlc3Qobiwgc2VsZi5pdGVtcygpLCBrZXk9X2l0ZW1nZXR0ZXIoMSkpCgogICAgZGVmIGVsZW1lbnRzKHNlbGYpOgogICAgICAgICcnJ0l0ZXJhdG9yIG92ZXIgZWxlbWVudHMgcmVwZWF0aW5nIGVhY2ggYXMgbWFueSB0aW1lcyBhcyBpdHMgY291bnQuCgogICAgICAgID4+PiBjID0gQ291bnRlcignQUJDQUJDJykKICAgICAgICA+Pj4gc29ydGVkKGMuZWxlbWVudHMoKSkKICAgICAgICBbJ0EnLCAnQScsICdCJywgJ0InLCAnQycsICdDJ10KCiAgICAgICAgIyBLbnV0aCdzIGV4YW1wbGUgZm9yIHByaW1lIGZhY3RvcnMgb2YgMTgzNjogIDIqKjIgKiAzKiozICogMTcqKjEKICAgICAgICA+Pj4gcHJpbWVfZmFjdG9ycyA9IENvdW50ZXIoezI6IDIsIDM6IDMsIDE3OiAxfSkKICAgICAgICA+Pj4gcHJvZHVjdCA9IDEKICAgICAgICA+Pj4gZm9yIGZhY3RvciBpbiBwcmltZV9mYWN0b3JzLmVsZW1lbnRzKCk6ICAgICAjIGxvb3Agb3ZlciBmYWN0b3JzCiAgICAgICAgLi4uICAgICBwcm9kdWN0ICo9IGZhY3RvciAgICAgICAgICAgICAgICAgICAgICAgIyBhbmQgbXVsdGlwbHkgdGhlbQogICAgICAgID4+PiBwcm9kdWN0CiAgICAgICAgMTgzNgoKICAgICAgICBOb3RlLCBpZiBhbiBlbGVtZW50J3MgY291bnQgaGFzIGJlZW4gc2V0IHRvIHplcm8gb3IgaXMgYSBuZWdhdGl2ZQogICAgICAgIG51bWJlciwgZWxlbWVudHMoKSB3aWxsIGlnbm9yZSBpdC4KCiAgICAgICAgJycnCiAgICAgICAgIyBFbXVsYXRlIEJhZy5kbyBmcm9tIFNtYWxsdGFsayBhbmQgTXVsdGlzZXQuYmVnaW4gZnJvbSBDKysuCiAgICAgICAgcmV0dXJuIF9jaGFpbi5mcm9tX2l0ZXJhYmxlKF9zdGFybWFwKF9yZXBlYXQsIHNlbGYuaXRlbXMoKSkpCgogICAgIyBPdmVycmlkZSBkaWN0IG1ldGhvZHMgd2hlcmUgbmVjZXNzYXJ5CgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbWtleXMoY2xzLCBpdGVyYWJsZSwgdj1Ob25lKToKICAgICAgICAjIFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgbWV0aG9kIGZvciBjb3VudGVycyBiZWNhdXNlIHNldHRpbmcgdj0xCiAgICAgICAgIyBtZWFucyB0aGF0IG5vIGVsZW1lbnQgY2FuIGhhdmUgYSBjb3VudCBncmVhdGVyIHRoYW4gb25lLgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoCiAgICAgICAgICAgICdDb3VudGVyLmZyb21rZXlzKCkgaXMgdW5kZWZpbmVkLiAgVXNlIENvdW50ZXIoaXRlcmFibGUpIGluc3RlYWQuJykKCiAgICBkZWYgdXBkYXRlKHNlbGYsIGl0ZXJhYmxlPU5vbmUsICoqa3dkcyk6CiAgICAgICAgJycnTGlrZSBkaWN0LnVwZGF0ZSgpIGJ1dCBhZGQgY291bnRzIGluc3RlYWQgb2YgcmVwbGFjaW5nIHRoZW0uCgogICAgICAgIFNvdXJjZSBjYW4gYmUgYW4gaXRlcmFibGUsIGEgZGljdGlvbmFyeSwgb3IgYW5vdGhlciBDb3VudGVyIGluc3RhbmNlLgoKICAgICAgICA+Pj4gYyA9IENvdW50ZXIoJ3doaWNoJykKICAgICAgICA+Pj4gYy51cGRhdGUoJ3dpdGNoJykgICAgICAgICAgICMgYWRkIGVsZW1lbnRzIGZyb20gYW5vdGhlciBpdGVyYWJsZQogICAgICAgID4+PiBkID0gQ291bnRlcignd2F0Y2gnKQogICAgICAgID4+PiBjLnVwZGF0ZShkKSAgICAgICAgICAgICAgICAgIyBhZGQgZWxlbWVudHMgZnJvbSBhbm90aGVyIGNvdW50ZXIKICAgICAgICA+Pj4gY1snaCddICAgICAgICAgICAgICAgICAgICAgICMgZm91ciAnaCcgaW4gd2hpY2gsIHdpdGNoLCBhbmQgd2F0Y2gKICAgICAgICA0CgogICAgICAgICcnJwogICAgICAgICMgVGhlIHJlZ3VsYXIgZGljdC51cGRhdGUoKSBvcGVyYXRpb24gbWFrZXMgbm8gc2Vuc2UgaGVyZSBiZWNhdXNlIHRoZQogICAgICAgICMgcmVwbGFjZSBiZWhhdmlvciByZXN1bHRzIGluIHRoZSBzb21lIG9mIG9yaWdpbmFsIHVudG91Y2hlZCBjb3VudHMKICAgICAgICAjIGJlaW5nIG1peGVkLWluIHdpdGggYWxsIG9mIHRoZSBvdGhlciBjb3VudHMgZm9yIGEgbWlzbWFzaCB0aGF0CiAgICAgICAgIyBkb2Vzbid0IGhhdmUgYSBzdHJhaWdodC1mb3J3YXJkIGludGVycHJldGF0aW9uIGluIG1vc3QgY291bnRpbmcKICAgICAgICAjIGNvbnRleHRzLiAgSW5zdGVhZCwgd2UgaW1wbGVtZW50IHN0cmFpZ2h0LWFkZGl0aW9uLiAgQm90aCB0aGUgaW5wdXRzCiAgICAgICAgIyBhbmQgb3V0cHV0cyBhcmUgYWxsb3dlZCB0byBjb250YWluIHplcm8gYW5kIG5lZ2F0aXZlIGNvdW50cy4KCiAgICAgICAgaWYgaXRlcmFibGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoaXRlcmFibGUsIE1hcHBpbmcpOgogICAgICAgICAgICAgICAgaWYgc2VsZjoKICAgICAgICAgICAgICAgICAgICBzZWxmX2dldCA9IHNlbGYuZ2V0CiAgICAgICAgICAgICAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIGl0ZXJhYmxlLml0ZW1zKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGZbZWxlbV0gPSBjb3VudCArIHNlbGZfZ2V0KGVsZW0sIDApCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHN1cGVyKCkudXBkYXRlKGl0ZXJhYmxlKSAjIGZhc3QgcGF0aCB3aGVuIGNvdW50ZXIgaXMgZW1wdHkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9jb3VudF9lbGVtZW50cyhzZWxmLCBpdGVyYWJsZSkKICAgICAgICBpZiBrd2RzOgogICAgICAgICAgICBzZWxmLnVwZGF0ZShrd2RzKQoKICAgIGRlZiBzdWJ0cmFjdChzZWxmLCBpdGVyYWJsZT1Ob25lLCAqKmt3ZHMpOgogICAgICAgICcnJ0xpa2UgZGljdC51cGRhdGUoKSBidXQgc3VidHJhY3RzIGNvdW50cyBpbnN0ZWFkIG9mIHJlcGxhY2luZyB0aGVtLgogICAgICAgIENvdW50cyBjYW4gYmUgcmVkdWNlZCBiZWxvdyB6ZXJvLiAgQm90aCB0aGUgaW5wdXRzIGFuZCBvdXRwdXRzIGFyZQogICAgICAgIGFsbG93ZWQgdG8gY29udGFpbiB6ZXJvIGFuZCBuZWdhdGl2ZSBjb3VudHMuCgogICAgICAgIFNvdXJjZSBjYW4gYmUgYW4gaXRlcmFibGUsIGEgZGljdGlvbmFyeSwgb3IgYW5vdGhlciBDb3VudGVyIGluc3RhbmNlLgoKICAgICAgICA+Pj4gYyA9IENvdW50ZXIoJ3doaWNoJykKICAgICAgICA+Pj4gYy5zdWJ0cmFjdCgnd2l0Y2gnKSAgICAgICAgICAgICAjIHN1YnRyYWN0IGVsZW1lbnRzIGZyb20gYW5vdGhlciBpdGVyYWJsZQogICAgICAgID4+PiBjLnN1YnRyYWN0KENvdW50ZXIoJ3dhdGNoJykpICAgICMgc3VidHJhY3QgZWxlbWVudHMgZnJvbSBhbm90aGVyIGNvdW50ZXIKICAgICAgICA+Pj4gY1snaCddICAgICAgICAgICAgICAgICAgICAgICAgICAjIDIgaW4gd2hpY2gsIG1pbnVzIDEgaW4gd2l0Y2gsIG1pbnVzIDEgaW4gd2F0Y2gKICAgICAgICAwCiAgICAgICAgPj4+IGNbJ3cnXSAgICAgICAgICAgICAgICAgICAgICAgICAgIyAxIGluIHdoaWNoLCBtaW51cyAxIGluIHdpdGNoLCBtaW51cyAxIGluIHdhdGNoCiAgICAgICAgLTEKCiAgICAgICAgJycnCiAgICAgICAgaWYgaXRlcmFibGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGZfZ2V0ID0gc2VsZi5nZXQKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpdGVyYWJsZSwgTWFwcGluZyk6CiAgICAgICAgICAgICAgICBmb3IgZWxlbSwgY291bnQgaW4gaXRlcmFibGUuaXRlbXMoKToKICAgICAgICAgICAgICAgICAgICBzZWxmW2VsZW1dID0gc2VsZl9nZXQoZWxlbSwgMCkgLSBjb3VudAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZm9yIGVsZW0gaW4gaXRlcmFibGU6CiAgICAgICAgICAgICAgICAgICAgc2VsZltlbGVtXSA9IHNlbGZfZ2V0KGVsZW0sIDApIC0gMQogICAgICAgIGlmIGt3ZHM6CiAgICAgICAgICAgIHNlbGYuc3VidHJhY3Qoa3dkcykKCiAgICBkZWYgY29weShzZWxmKToKICAgICAgICAnUmV0dXJuIGEgc2hhbGxvdyBjb3B5LicKICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZikKCiAgICBkZWYgX19yZWR1Y2VfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18sIChkaWN0KHNlbGYpLCkKCiAgICBkZWYgX19kZWxpdGVtX18oc2VsZiwgZWxlbSk6CiAgICAgICAgJ0xpa2UgZGljdC5fX2RlbGl0ZW1fXygpIGJ1dCBkb2VzIG5vdCByYWlzZSBLZXlFcnJvciBmb3IgbWlzc2luZyB2YWx1ZXMuJwogICAgICAgIGlmIGVsZW0gaW4gc2VsZjoKICAgICAgICAgICAgc3VwZXIoKS5fX2RlbGl0ZW1fXyhlbGVtKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICBpZiBub3Qgc2VsZjoKICAgICAgICAgICAgcmV0dXJuICclcygpJyAlIHNlbGYuX19jbGFzc19fLl9fbmFtZV9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpdGVtcyA9ICcsICcuam9pbihtYXAoJyVyOiAlcicuX19tb2RfXywgc2VsZi5tb3N0X2NvbW1vbigpKSkKICAgICAgICAgICAgcmV0dXJuICclcyh7JXN9KScgJSAoc2VsZi5fX2NsYXNzX18uX19uYW1lX18sIGl0ZW1zKQogICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgICAgICMgaGFuZGxlIGNhc2Ugd2hlcmUgdmFsdWVzIGFyZSBub3Qgb3JkZXJhYmxlCiAgICAgICAgICAgIHJldHVybiAnezB9KHsxIXJ9KScuZm9ybWF0KHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBkaWN0KHNlbGYpKQoKICAgICMgTXVsdGlzZXQtc3R5bGUgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbnMgZGlzY3Vzc2VkIGluOgogICAgIyAgICAgICBLbnV0aCBUQU9DUCBWb2x1bWUgSUkgc2VjdGlvbiA0LjYuMyBleGVyY2lzZSAxOQogICAgIyAgICAgICBhbmQgYXQgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NdWx0aXNldAogICAgIwogICAgIyBPdXRwdXRzIGd1YXJhbnRlZWQgdG8gb25seSBpbmNsdWRlIHBvc2l0aXZlIGNvdW50cy4KICAgICMKICAgICMgVG8gc3RyaXAgbmVnYXRpdmUgYW5kIHplcm8gY291bnRzLCBhZGQtaW4gYW4gZW1wdHkgY291bnRlcjoKICAgICMgICAgICAgYyArPSBDb3VudGVyKCkKCiAgICBkZWYgX19hZGRfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgJycnQWRkIGNvdW50cyBmcm9tIHR3byBjb3VudGVycy4KCiAgICAgICAgPj4+IENvdW50ZXIoJ2FiYmInKSArIENvdW50ZXIoJ2JjYycpCiAgICAgICAgQ291bnRlcih7J2InOiA0LCAnYyc6IDIsICdhJzogMX0pCgogICAgICAgICcnJwogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCBDb3VudGVyKToKICAgICAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCiAgICAgICAgcmVzdWx0ID0gQ291bnRlcigpCiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIHNlbGYuaXRlbXMoKToKICAgICAgICAgICAgbmV3Y291bnQgPSBjb3VudCArIG90aGVyW2VsZW1dCiAgICAgICAgICAgIGlmIG5ld2NvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IG5ld2NvdW50CiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIG90aGVyLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGVsZW0gbm90IGluIHNlbGYgYW5kIGNvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IGNvdW50CiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIGRlZiBfX3N1Yl9fKHNlbGYsIG90aGVyKToKICAgICAgICAnJycgU3VidHJhY3QgY291bnQsIGJ1dCBrZWVwIG9ubHkgcmVzdWx0cyB3aXRoIHBvc2l0aXZlIGNvdW50cy4KCiAgICAgICAgPj4+IENvdW50ZXIoJ2FiYmJjJykgLSBDb3VudGVyKCdiY2NkJykKICAgICAgICBDb3VudGVyKHsnYic6IDIsICdhJzogMX0pCgogICAgICAgICcnJwogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCBDb3VudGVyKToKICAgICAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCiAgICAgICAgcmVzdWx0ID0gQ291bnRlcigpCiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIHNlbGYuaXRlbXMoKToKICAgICAgICAgICAgbmV3Y291bnQgPSBjb3VudCAtIG90aGVyW2VsZW1dCiAgICAgICAgICAgIGlmIG5ld2NvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IG5ld2NvdW50CiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIG90aGVyLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGVsZW0gbm90IGluIHNlbGYgYW5kIGNvdW50IDwgMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IDAgLSBjb3VudAogICAgICAgIHJldHVybiByZXN1bHQKCiAgICBkZWYgX19vcl9fKHNlbGYsIG90aGVyKToKICAgICAgICAnJydVbmlvbiBpcyB0aGUgbWF4aW11bSBvZiB2YWx1ZSBpbiBlaXRoZXIgb2YgdGhlIGlucHV0IGNvdW50ZXJzLgoKICAgICAgICA+Pj4gQ291bnRlcignYWJiYicpIHwgQ291bnRlcignYmNjJykKICAgICAgICBDb3VudGVyKHsnYic6IDMsICdjJzogMiwgJ2EnOiAxfSkKCiAgICAgICAgJycnCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob3RoZXIsIENvdW50ZXIpOgogICAgICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKICAgICAgICByZXN1bHQgPSBDb3VudGVyKCkKICAgICAgICBmb3IgZWxlbSwgY291bnQgaW4gc2VsZi5pdGVtcygpOgogICAgICAgICAgICBvdGhlcl9jb3VudCA9IG90aGVyW2VsZW1dCiAgICAgICAgICAgIG5ld2NvdW50ID0gb3RoZXJfY291bnQgaWYgY291bnQgPCBvdGhlcl9jb3VudCBlbHNlIGNvdW50CiAgICAgICAgICAgIGlmIG5ld2NvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IG5ld2NvdW50CiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIG90aGVyLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGVsZW0gbm90IGluIHNlbGYgYW5kIGNvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IGNvdW50CiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIGRlZiBfX2FuZF9fKHNlbGYsIG90aGVyKToKICAgICAgICAnJycgSW50ZXJzZWN0aW9uIGlzIHRoZSBtaW5pbXVtIG9mIGNvcnJlc3BvbmRpbmcgY291bnRzLgogICAgCiAgICAgICAgPj4+IENvdW50ZXIoJ2FiYmInKSAmIENvdW50ZXIoJ2JjYycpCiAgICAgICAgQ291bnRlcih7J2InOiAxfSkKCiAgICAgICAgJycnCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob3RoZXIsIENvdW50ZXIpOgogICAgICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKICAgICAgICByZXN1bHQgPSBDb3VudGVyKCkKICAgICAgICBmb3IgZWxlbSwgY291bnQgaW4gc2VsZi5pdGVtcygpOgogICAgICAgICAgICBvdGhlcl9jb3VudCA9IG90aGVyW2VsZW1dCiAgICAgICAgICAgIG5ld2NvdW50ID0gY291bnQgaWYgY291bnQgPCBvdGhlcl9jb3VudCBlbHNlIG90aGVyX2NvdW50CiAgICAgICAgICAgIGlmIG5ld2NvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IG5ld2NvdW50CiAgICAgICAgcmV0dXJuIHJlc3VsdAoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMgIENoYWluTWFwIChoZWxwZXIgZm9yIGNvbmZpZ3BhcnNlcikKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpjbGFzcyBDaGFpbk1hcChNdXRhYmxlTWFwcGluZyk6CiAgICAnJycgQSBDaGFpbk1hcCBncm91cHMgbXVsdGlwbGUgZGljdHMgKG9yIG90aGVyIG1hcHBpbmdzKSB0b2dldGhlcgogICAgdG8gY3JlYXRlIGEgc2luZ2xlLCB1cGRhdGVhYmxlIHZpZXcuCgogICAgVGhlIHVuZGVybHlpbmcgbWFwcGluZ3MgYXJlIHN0b3JlZCBpbiBhIGxpc3QuICBUaGF0IGxpc3QgaXMgcHVibGljIGFuZCBjYW4KICAgIGFjY2Vzc2VkIG9yIHVwZGF0ZWQgdXNpbmcgdGhlICptYXBzKiBhdHRyaWJ1dGUuICBUaGVyZSBpcyBubyBvdGhlciBzdGF0ZS4KCiAgICBMb29rdXBzIHNlYXJjaCB0aGUgdW5kZXJseWluZyBtYXBwaW5ncyBzdWNjZXNzaXZlbHkgdW50aWwgYSBrZXkgaXMgZm91bmQuCiAgICBJbiBjb250cmFzdCwgd3JpdGVzLCB1cGRhdGVzLCBhbmQgZGVsZXRpb25zIG9ubHkgb3BlcmF0ZSBvbiB0aGUgZmlyc3QKICAgIG1hcHBpbmcuCgogICAgJycnCgogICAgZGVmIF9faW5pdF9fKHNlbGYsICptYXBzKToKICAgICAgICAnJydJbml0aWFsaXplIGEgQ2hhaW5NYXAgYnkgc2V0dGluZyAqbWFwcyogdG8gdGhlIGdpdmVuIG1hcHBpbmdzLgogICAgICAgIElmIG5vIG1hcHBpbmdzIGFyZSBwcm92aWRlZCwgYSBzaW5nbGUgZW1wdHkgZGljdGlvbmFyeSBpcyB1c2VkLgoKICAgICAgICAnJycKICAgICAgICBzZWxmLm1hcHMgPSBsaXN0KG1hcHMpIG9yIFt7fV0gICAgICAgICAgIyBhbHdheXMgYXQgbGVhc3Qgb25lIG1hcAoKICAgIGRlZiBfX21pc3NpbmdfXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yKGtleSkKCiAgICBkZWYgX19nZXRpdGVtX18oc2VsZiwga2V5KToKICAgICAgICBmb3IgbWFwcGluZyBpbiBzZWxmLm1hcHM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJldHVybiBtYXBwaW5nW2tleV0gICAgICAgICAgICAgIyBjYW4ndCB1c2UgJ2tleSBpbiBtYXBwaW5nJyB3aXRoIGRlZmF1bHRkaWN0CiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICByZXR1cm4gc2VsZi5fX21pc3NpbmdfXyhrZXkpICAgICAgICAgICAgIyBzdXBwb3J0IHN1YmNsYXNzZXMgdGhhdCBkZWZpbmUgX19taXNzaW5nX18KCiAgICBkZWYgZ2V0KHNlbGYsIGtleSwgZGVmYXVsdD1Ob25lKToKICAgICAgICByZXR1cm4gc2VsZltrZXldIGlmIGtleSBpbiBzZWxmIGVsc2UgZGVmYXVsdAoKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiBsZW4oc2V0KCkudW5pb24oKnNlbGYubWFwcykpICAgICAjIHJldXNlcyBzdG9yZWQgaGFzaCB2YWx1ZXMgaWYgcG9zc2libGUKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIGl0ZXIoc2V0KCkudW5pb24oKnNlbGYubWFwcykpCgogICAgZGVmIF9fY29udGFpbnNfXyhzZWxmLCBrZXkpOgogICAgICAgIHJldHVybiBhbnkoa2V5IGluIG0gZm9yIG0gaW4gc2VsZi5tYXBzKQoKICAgIGRlZiBfX2Jvb2xfXyhzZWxmKToKICAgICAgICByZXR1cm4gYW55KHNlbGYubWFwcykKCiAgICAjZml4bWUsIGJyeXRob24KICAgICNAX3JlY3Vyc2l2ZV9yZXByKCkKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJ3swLl9fY2xhc3NfXy5fX25hbWVfX30oezF9KScuZm9ybWF0KAogICAgICAgICAgICBzZWxmLCAnLCAnLmpvaW4obWFwKHJlcHIsIHNlbGYubWFwcykpKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJywnLmpvaW4oc3RyKF9tYXApIGZvciBfbWFwIGluIHNlbGYubWFwcykKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9ta2V5cyhjbHMsIGl0ZXJhYmxlLCAqYXJncyk6CiAgICAgICAgJ0NyZWF0ZSBhIENoYWluTWFwIHdpdGggYSBzaW5nbGUgZGljdCBjcmVhdGVkIGZyb20gdGhlIGl0ZXJhYmxlLicKICAgICAgICByZXR1cm4gY2xzKGRpY3QuZnJvbWtleXMoaXRlcmFibGUsICphcmdzKSkKCiAgICBkZWYgY29weShzZWxmKToKICAgICAgICAnTmV3IENoYWluTWFwIG9yIHN1YmNsYXNzIHdpdGggYSBuZXcgY29weSBvZiBtYXBzWzBdIGFuZCByZWZzIHRvIG1hcHNbMTpdJwogICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLm1hcHNbMF0uY29weSgpLCAqc2VsZi5tYXBzWzE6XSkKCiAgICBfX2NvcHlfXyA9IGNvcHkKCiAgICBkZWYgbmV3X2NoaWxkKHNlbGYpOiAgICAgICAgICAgICAgICAgICAgICAgICMgbGlrZSBEamFuZ28ncyBDb250ZXh0LnB1c2goKQogICAgICAgICdOZXcgQ2hhaW5NYXAgd2l0aCBhIG5ldyBkaWN0IGZvbGxvd2VkIGJ5IGFsbCBwcmV2aW91cyBtYXBzLicKICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oe30sICpzZWxmLm1hcHMpCgogICAgQHByb3BlcnR5CiAgICBkZWYgcGFyZW50cyhzZWxmKTogICAgICAgICAgICAgICAgICAgICAgICAgICMgbGlrZSBEamFuZ28ncyBDb250ZXh0LnBvcCgpCiAgICAgICAgJ05ldyBDaGFpbk1hcCBmcm9tIG1hcHNbMTpdLicKICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oKnNlbGYubWFwc1sxOl0pCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsIGtleSwgdmFsdWUpOgogICAgICAgIHNlbGYubWFwc1swXVtrZXldID0gdmFsdWUKCiAgICBkZWYgX19kZWxpdGVtX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGRlbCBzZWxmLm1hcHNbMF1ba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmFpc2UgS2V5RXJyb3IoJ0tleSBub3QgZm91bmQgaW4gdGhlIGZpcnN0IG1hcHBpbmc6IHshcn0nLmZvcm1hdChrZXkpKQoKICAgIGRlZiBwb3BpdGVtKHNlbGYpOgogICAgICAgICdSZW1vdmUgYW5kIHJldHVybiBhbiBpdGVtIHBhaXIgZnJvbSBtYXBzWzBdLiBSYWlzZSBLZXlFcnJvciBpcyBtYXBzWzBdIGlzIGVtcHR5LicKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLm1hcHNbMF0ucG9waXRlbSgpCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByYWlzZSBLZXlFcnJvcignTm8ga2V5cyBmb3VuZCBpbiB0aGUgZmlyc3QgbWFwcGluZy4nKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCAqYXJncyk6CiAgICAgICAgJ1JlbW92ZSAqa2V5KiBmcm9tIG1hcHNbMF0gYW5kIHJldHVybiBpdHMgdmFsdWUuIFJhaXNlIEtleUVycm9yIGlmICprZXkqIG5vdCBpbiBtYXBzWzBdLicKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLm1hcHNbMF0ucG9wKGtleSwgKmFyZ3MpCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICAjcmFpc2UgS2V5RXJyb3IoJ0tleSBub3QgZm91bmQgaW4gdGhlIGZpcnN0IG1hcHBpbmc6IHshcn0nLmZvcm1hdChrZXkpKQogICAgICAgICAgICByYWlzZSBLZXlFcnJvcignS2V5IG5vdCBmb3VuZCBpbiB0aGUgZmlyc3QgbWFwcGluZzogJXMnICUga2V5KQoKICAgIGRlZiBjbGVhcihzZWxmKToKICAgICAgICAnQ2xlYXIgbWFwc1swXSwgbGVhdmluZyBtYXBzWzE6XSBpbnRhY3QuJwogICAgICAgIHNlbGYubWFwc1swXS5jbGVhcigpCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIFVzZXJEaWN0CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpjbGFzcyBVc2VyRGljdChNdXRhYmxlTWFwcGluZyk6CgogICAgIyBTdGFydCBieSBmaWxsaW5nLW91dCB0aGUgYWJzdHJhY3QgbWV0aG9kcwogICAgZGVmIF9faW5pdF9fKHNlbGYsIGRpY3Q9Tm9uZSwgKiprd2FyZ3MpOgogICAgICAgIHNlbGYuZGF0YSA9IHt9CiAgICAgICAgaWYgZGljdCBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi51cGRhdGUoZGljdCkKICAgICAgICBpZiBsZW4oa3dhcmdzKToKICAgICAgICAgICAgc2VsZi51cGRhdGUoa3dhcmdzKQogICAgZGVmIF9fbGVuX18oc2VsZik6IHJldHVybiBsZW4oc2VsZi5kYXRhKQogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGtleSk6CiAgICAgICAgaWYga2V5IGluIHNlbGYuZGF0YToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuZGF0YVtrZXldCiAgICAgICAgaWYgaGFzYXR0cihzZWxmLl9fY2xhc3NfXywgIl9fbWlzc2luZ19fIik6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXy5fX21pc3NpbmdfXyhzZWxmLCBrZXkpCiAgICAgICAgcmFpc2UgS2V5RXJyb3Ioa2V5KQogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsIGtleSwgaXRlbSk6IHNlbGYuZGF0YVtrZXldID0gaXRlbQogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsIGtleSk6IGRlbCBzZWxmLmRhdGFba2V5XQogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHJldHVybiBpdGVyKHNlbGYuZGF0YSkKCiAgICAjIE1vZGlmeSBfX2NvbnRhaW5zX18gdG8gd29yayBjb3JyZWN0bHkgd2hlbiBfX21pc3NpbmdfXyBpcyBwcmVzZW50CiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgcmV0dXJuIGtleSBpbiBzZWxmLmRhdGEKCiAgICAjIE5vdywgYWRkIHRoZSBtZXRob2RzIGluIGRpY3RzIGJ1dCBub3QgaW4gTXV0YWJsZU1hcHBpbmcKICAgIGRlZiBfX3JlcHJfXyhzZWxmKTogcmV0dXJuIHJlcHIoc2VsZi5kYXRhKQogICAgZGVmIGNvcHkoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fX2NsYXNzX18gaXMgVXNlckRpY3Q6CiAgICAgICAgICAgIHJldHVybiBVc2VyRGljdChzZWxmLmRhdGEuY29weSgpKQogICAgICAgIGltcG9ydCBjb3B5CiAgICAgICAgZGF0YSA9IHNlbGYuZGF0YQogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5kYXRhID0ge30KICAgICAgICAgICAgYyA9IGNvcHkuY29weShzZWxmKQogICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgIHNlbGYuZGF0YSA9IGRhdGEKICAgICAgICBjLnVwZGF0ZShzZWxmKQogICAgICAgIHJldHVybiBjCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9ta2V5cyhjbHMsIGl0ZXJhYmxlLCB2YWx1ZT1Ob25lKToKICAgICAgICBkID0gY2xzKCkKICAgICAgICBmb3Iga2V5IGluIGl0ZXJhYmxlOgogICAgICAgICAgICBkW2tleV0gPSB2YWx1ZQogICAgICAgIHJldHVybiBkCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyBVc2VyTGlzdAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMgVXNlclN0cmluZwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwo=',
'/Lib/collections/abc.py':''
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.py_VFS[lib])
}

