__BRYTHON__.py_VFS={
'/libs/builtins.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewogICAgdmFyIG9iaiA9IHtfX2NsYXNzX186JE1vZHVsZURpY3QsX19uYW1lX186J2J1aWx0aW5zJ30KICAgIHZhciBidWlsdGluX25hbWVzID0gWydBcml0aG1ldGljRXJyb3InLCAnQXNzZXJ0aW9uRXJyb3InLCAnQXR0cmlidXRlRXJyb3InLCAKICAgICdCYXNlRXhjZXB0aW9uJywgJ0Jsb2NraW5nSU9FcnJvcicsICdCcm9rZW5QaXBlRXJyb3InLCAnQnVmZmVyRXJyb3InLCAKICAgICdCeXRlc1dhcm5pbmcnLCAnQ2hpbGRQcm9jZXNzRXJyb3InLCAnQ29ubmVjdGlvbkFib3J0ZWRFcnJvcicsIAogICAgJ0Nvbm5lY3Rpb25FcnJvcicsICdDb25uZWN0aW9uUmVmdXNlZEVycm9yJywgJ0Nvbm5lY3Rpb25SZXNldEVycm9yJywgCiAgICAnRGVwcmVjYXRpb25XYXJuaW5nJywgJ0VPRkVycm9yJywgJ0VsbGlwc2lzJywgJ0Vudmlyb25tZW50RXJyb3InLCAnRXhjZXB0aW9uJywgCiAgICAnRmFsc2UnLCAnRmlsZUV4aXN0c0Vycm9yJywgJ0ZpbGVOb3RGb3VuZEVycm9yJywgJ0Zsb2F0aW5nUG9pbnRFcnJvcicsIAogICAgJ0Z1dHVyZVdhcm5pbmcnLCAnR2VuZXJhdG9yRXhpdCcsICdJT0Vycm9yJywgJ0ltcG9ydEVycm9yJywgJ0ltcG9ydFdhcm5pbmcnLCAKICAgICdJbmRlbnRhdGlvbkVycm9yJywgJ0luZGV4RXJyb3InLCAnSW50ZXJydXB0ZWRFcnJvcicsICdJc0FEaXJlY3RvcnlFcnJvcicsCiAgICAnS2V5RXJyb3InLCAnS2V5Ym9hcmRJbnRlcnJ1cHQnLCAnTG9va3VwRXJyb3InLCAnTWVtb3J5RXJyb3InLCAnTmFtZUVycm9yJywgCiAgICAnTm9uZScsICdOb3RBRGlyZWN0b3J5RXJyb3InLCAnTm90SW1wbGVtZW50ZWQnLCAnTm90SW1wbGVtZW50ZWRFcnJvcicsIAogICAgJ09TRXJyb3InLCAnT3ZlcmZsb3dFcnJvcicsICdQZW5kaW5nRGVwcmVjYXRpb25XYXJuaW5nJywgJ1Blcm1pc3Npb25FcnJvcicsIAogICAgJ1Byb2Nlc3NMb29rdXBFcnJvcicsICdSZWZlcmVuY2VFcnJvcicsICdSZXNvdXJjZVdhcm5pbmcnLCAnUnVudGltZUVycm9yJywgCiAgICAnUnVudGltZVdhcm5pbmcnLCAnU3RvcEl0ZXJhdGlvbicsICdTeW50YXhFcnJvcicsICdTeW50YXhXYXJuaW5nJywgCiAgICAnU3lzdGVtRXJyb3InLCAnU3lzdGVtRXhpdCcsICdUYWJFcnJvcicsICdUaW1lb3V0RXJyb3InLCAnVHJ1ZScsICdUeXBlRXJyb3InLCAKICAgICdVbmJvdW5kTG9jYWxFcnJvcicsICdVbmljb2RlRGVjb2RlRXJyb3InLCAnVW5pY29kZUVuY29kZUVycm9yJywgCiAgICAnVW5pY29kZUVycm9yJywgJ1VuaWNvZGVUcmFuc2xhdGVFcnJvcicsICdVbmljb2RlV2FybmluZycsICdVc2VyV2FybmluZycsIAogICAgJ1ZhbHVlRXJyb3InLCAnV2FybmluZycsICdXaW5kb3dzRXJyb3InLCAnWmVyb0RpdmlzaW9uRXJyb3InLCAnXycsIAogICAgJ19fYnVpbGRfY2xhc3NfXycsICdfX2RlYnVnX18nLCAnX19kb2NfXycsICdfX2ltcG9ydF9fJywgJ19fbmFtZV9fJywgCiAgICAnX19wYWNrYWdlX18nLCAnYWJzJywgJ2FsbCcsICdhbnknLCAnYXNjaWknLCAnYmluJywgJ2Jvb2wnLCAnYnl0ZWFycmF5JywgCiAgICAnYnl0ZXMnLCdjYWxsYWJsZScsICdjaHInLCAnY2xhc3NtZXRob2QnLCAnY29tcGlsZScsICdjb21wbGV4JywgJ2NvcHlyaWdodCcsIAogICAgJ2NyZWRpdHMnLCdkZWxhdHRyJywgJ2RpY3QnLCAnZGlyJywgJ2Rpdm1vZCcsICdlbnVtZXJhdGUnLCAnZXZhbCcsICdleGVjJywgCiAgICAnZXhpdCcsICdmaWx0ZXInLCAnZmxvYXQnLCAnZm9ybWF0JywgJ2Zyb3plbnNldCcsICdnZXRhdHRyJywgJ2dsb2JhbHMnLCAKICAgICdoYXNhdHRyJywgJ2hhc2gnLCAnaGVscCcsICdoZXgnLCAnaWQnLCAnaW5wdXQnLCAnaW50JywgJ2lzaW5zdGFuY2UnLCAKICAgICdpc3N1YmNsYXNzJywgJ2l0ZXInLCAnbGVuJywgJ2xpY2Vuc2UnLCAnbGlzdCcsICdsb2NhbHMnLCAnbWFwJywgJ21heCcsIAogICAgJ21lbW9yeXZpZXcnLCAnbWluJywgJ25leHQnLCAnb2JqZWN0JywgJ29jdCcsICdvcGVuJywgJ29yZCcsICdwb3cnLCAncHJpbnQnLCAKICAgICdwcm9wZXJ0eScsICdxdWl0JywgJ3JhbmdlJywgJ3JlcHInLCAncmV2ZXJzZWQnLCAncm91bmQnLCAnc2V0JywgJ3NldGF0dHInLCAKICAgICdzbGljZScsICdzb3J0ZWQnLCAnc3RhdGljbWV0aG9kJywgJ3N0cicsICdzdW0nLCAnc3VwZXInLCAndHVwbGUnLCAndHlwZScsIAogICAgJ3ZhcnMnLCAnemlwJ10KICAgIGZvcih2YXIgaT0wO2k8YnVpbHRpbl9uYW1lcy5sZW5ndGg7aSsrKXsKICAgICAgICB0cnl7b2JqW2J1aWx0aW5fbmFtZXNbaV1dPWV2YWwoYnVpbHRpbl9uYW1lc1tpXSl9CiAgICAgICAgY2F0Y2goZXJyKXt9CiAgICB9CiAgICByZXR1cm4gb2JqCn0pKCkK',
'/libs/hashlib.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7CiAgICAgICAgaWYgKGF0dHIgPT0gJ25ldycpIHtyZXR1cm4gJGhhc2hsaWJfbmV3O30KICAgICAgICByZXR1cm4gdGhpc1thdHRyXQogICAgfSwKICAgIG1kNTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnbWQ1Jyl9LAogICAgc2hhMTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMScpfSwKICAgIHNoYTIyNDogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjI0Jyl9LAogICAgc2hhMjU2OiBmdW5jdGlvbigpIHtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEyNTYnKX0sCiAgICBzaGEzODQ6IGZ1bmN0aW9uKCkge3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTM4NCcpfSwKICAgIHNoYTUxMjogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhNTEyJyl9LAoKICAgIGFsZ29yaXRobXNfZ3VhcmFudGVlZDogWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXSwKICAgIGFsZ29yaXRobXNfYXZhaWxhYmxlOiAgWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXQp9CgoKLy90b2RvOiBldmVudHVhbGx5IG1vdmUgdGhpcyBmdW5jdGlvbiB0byBhICJ1dGlsaXR5IiBmaWxlIG9yIHVzZSBhamF4IG1vZHVsZT8KZnVuY3Rpb24gJGdldF9DcnlwdG9KU19saWIoYWxnKSB7CiAgIHZhciBpbXA9JGltcG9ydGVyKCkKICAgdmFyICR4bWxodHRwPWltcFswXSwgZmFrZV9xcz1pbXBbMV0sIHRpbWVyPWltcFsyXSwgcmVzPW51bGwKCiAgICR4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaWYoJHhtbGh0dHAucmVhZHlTdGF0ZT09NCl7CiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpCiAgICAgICAgICAgIGlmKCR4bWxodHRwLnN0YXR1cz09MjAwIHx8ICR4bWxodHRwLnN0YXR1cz09MCl7cmVzPSR4bWxodHRwLnJlc3BvbnNlVGV4dH0KICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgIC8vIGRvbid0IHRocm93IGFuIGV4Y2VwdGlvbiBoZXJlLCBpdCB3aWxsIG5vdCBiZSBjYXVnaHQgKGlzc3VlICMzMCkKICAgICAgICAgICAgICAgIHJlcyA9IEVycm9yKCkKICAgICAgICAgICAgICAgIHJlcy5uYW1lID0gJ05vdEZvdW5kRXJyb3InCiAgICAgICAgICAgICAgICByZXMubWVzc2FnZSA9ICJObyBDcnlwdG9KUyBsaWIgbmFtZWQgJyIrYWxnKyInIgogICAgICAgICAgICB9CiAgICAgICAgfQogICB9CgogICAkeG1saHR0cC5vcGVuKCdHRVQnLCBfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJ2xpYnMvY3J5cHRvX2pzL3JvbGx1cHMvJythbGcrJy5qcycrZmFrZV9xcyxmYWxzZSkKICAgaWYoJ292ZXJyaWRlTWltZVR5cGUnIGluICR4bWxodHRwKXskeG1saHR0cC5vdmVycmlkZU1pbWVUeXBlKCJ0ZXh0L3BsYWluIil9CiAgICR4bWxodHRwLnNlbmQoKQogICBpZihyZXMuY29uc3RydWN0b3I9PT1FcnJvcil7dGhyb3cgcmVzfSAvLyBtb2R1bGUgbm90IGZvdW5kCgogICB0cnl7CiAgICAgIGV2YWwocmVzICsgIjsgX19CUllUSE9OX18uQ3J5cHRvSlM9Q3J5cHRvSlM7IikKICAgfSBjYXRjaCAoZXJyKSB7IAogICAgICB0aHJvdyBFcnJvcigiSlMgRXZhbCBFcnJvciIsICJDYW5ub3QgZXZhbCBDcnlwdG9KUyBhbGdvcml0aG0gJyIgKyBhbGcgKyAiJyA6IGVycm9yOiIgKyBlcnIpOwogICB9Cn0KCmZ1bmN0aW9uICRoYXNobGliX25ldyhhbGcpIHsKICAgIGlmIChhbGcgPT0gJ21kNScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLk1ENSA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignbWQ1JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uTUQ1LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTEgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTEnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExLmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMjI0JykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjI0ID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyMjQnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQuY3JlYXRlKCkKICAgIH0gZWxzZSBpZiAoYWxnID09ICdzaGEyNTYnKSB7CiAgICAgICBpZiAoX19CUllUSE9OX18uQ3J5cHRvID09PSB1bmRlZmluZWQgfHwgCiAgICAgICAgICAgX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyNTYgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTI1NicpCiAgICAgICB0aGlzLmhhc2ggPSBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTI1Ni5jcmVhdGUoKQogICAgfSBlbHNlIGlmIChhbGcgPT0gJ3NoYTM4NCcpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4NCA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignc2hhMzg0JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMzg0LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhNTEyJykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBNTEyID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGE1MTInKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTIuY3JlYXRlKCkKICAgIH0gZWxzZSB7CiAgICAgICAkcmFpc2UoJ0F0dHJpYnV0ZUVycm9yJywgJ0ludmFsaWQgaGFzaCBhbGdvcml0aG06JyArIGFsZykKICAgIH0KIAogICAgdGhpcy5fX2NsYXNzX18gPSAkdHlwZQogICAgdGhpcy5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpe3JldHVybiAkZ2V0YXR0cih0aGlzLGF0dHIpfQogICAgdGhpcy5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZXhkaWdlc3QoKX0KICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24obXNnKXt0aGlzLmhhc2gudXBkYXRlKG1zZyl9CiAgICB0aGlzLmNvcHkgPSBmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc2guY2xvbmUoKX0KCiAgICB0aGlzLmhleGRpZ2VzdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB0ZW1wPXRoaXMuaGFzaC5jbG9uZSgpOwogICAgICAgIHRlbXA9dGVtcC5maW5hbGl6ZSgpOwogICAgICAgIHJldHVybiB0ZW1wLnRvU3RyaW5nKCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7Cn0KCiRtb2R1bGUuX19jbGFzc19fID0gJG1vZHVsZQokbW9kdWxlLl9fc3RyX18gPSBmdW5jdGlvbigpIHtyZXR1cm4gIjxtb2R1bGUgJ2hhc2hsaWInPiJ9Cg==',
'/libs/javascript.js':'',
'/libs/json.js':'ZnVuY3Rpb24gX3B5KG9iail7CiAgICBpZihvYmo9PT1udWxsKXtyZXR1cm4gTm9uZX0KICAgIGlmKGlzaW5zdGFuY2Uob2JqLGxpc3QpKXsKICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICBmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgcmVzLnB1c2goX3B5KG9ialtpXSkpCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXMKICAgIH0KICAgIGlmKG9iai5fX2NsYXNzX18hPT11bmRlZmluZWQpewogICAgICAgIGlmKG9iai5fX2NsYXNzX189PT1saXN0KXsKICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBvYmpbaV0gPSBfcHkob2JqW2ldKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBvYmoKICAgIH0KICAgIGlmKHR5cGVvZiBvYmo9PT0nb2JqZWN0JyAmJiBvYmouX19jbGFzc19fPT09dW5kZWZpbmVkKXsKICAgICAgICAvLyB0cmFuc2Zvcm0gSlMgb2JqZWN0IGludG8gYSBQeXRob24gZGljdAogICAgICAgIHZhciByZXMgPSBkaWN0KCkKICAgICAgICBmb3IodmFyIGF0dHIgaW4gb2JqKXsKICAgICAgICAgICAgZ2V0YXR0cihyZXMsJ19fc2V0aXRlbV9fJykoYXR0cixfcHkob2JqW2F0dHJdKSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlcwogICAgfQogICAgcmV0dXJuIEpTT2JqZWN0KG9iaikKfQpmdW5jdGlvbiBfanMob2JqKXsKICAgIC8vIG9iaiBpcyBhIFB5dGhvbiBvYmplY3QKICAgIGlmIChpc2luc3RhbmNlKG9iaixbaW50LHN0cl0pKXtyZXR1cm4gb2JqfQogICAgZWxzZSBpZihvYmo9PT1Ob25lKXtyZXR1cm4gbnVsbH0KICAgIGVsc2UgaWYob2JqPT09VHJ1ZSl7cmV0dXJuIHRydWV9CiAgICBlbHNlIGlmKG9iaj09PUZhbHNlKXtyZXR1cm4gZmFsc2V9CiAgICBlbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGZsb2F0KSl7cmV0dXJuIG9iai52YWx1ZX0KICAgIGVsc2UgaWYoaXNpbnN0YW5jZShvYmosW2xpc3QsdHVwbGVdKSl7CiAgICAgICAgdmFyIHJlcyA9IFtdCiAgICAgICAgZm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKyl7cmVzLnB1c2goX2pzKG9ialtpXSkpfQogICAgICAgIHJldHVybiByZXMKICAgIH1lbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGRpY3QpKXsKICAgICAgICB2YXIgcmVzID0gbmV3IE9iamVjdCgpCiAgICAgICAgZm9yKHZhciBpPTA7aTxvYmouJGtleXMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIHJlc1tfanMob2JqLiRrZXlzW2ldKV09X2pzKG9iai4kdmFsdWVzW2ldKQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzCiAgICB9ZWxzZXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3Ioc3RyKG9iaikrJyBpcyBub3QgSlNPTiBzZXJpYWxpemFibGUnKQogICAgfQp9CgokbW9kdWxlID0gIHsKCiAgICBsb2FkcyA6IGZ1bmN0aW9uKGpzb25fb2JqKXtyZXR1cm4gX3B5KEpTT04ucGFyc2UoanNvbl9vYmopKX0sCgogICAgZHVtcHMgOiBmdW5jdGlvbihvYmope3JldHVybiBKU09OLnN0cmluZ2lmeShfanMob2JqKSl9LAp9',
'/libs/marshal.js':'ZnVuY3Rpb24gX3B5KG9iail7CiAgICBpZihvYmo9PT1udWxsKXtyZXR1cm4gTm9uZX0KICAgIGlmKGlzaW5zdGFuY2Uob2JqLGxpc3QpKXsKICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICBmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgcmVzLnB1c2goX3B5KG9ialtpXSkpCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXMKICAgIH0KICAgIGlmKG9iai5fX2NsYXNzX18hPT11bmRlZmluZWQpewogICAgICAgIGlmKG9iai5fX2NsYXNzX189PT1saXN0KXsKICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBvYmpbaV0gPSBfcHkob2JqW2ldKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBvYmoKICAgIH0KICAgIGlmKHR5cGVvZiBvYmo9PT0nb2JqZWN0JyAmJiBvYmouX19jbGFzc19fPT09dW5kZWZpbmVkKXsKICAgICAgICAvLyB0cmFuc2Zvcm0gSlMgb2JqZWN0IGludG8gYSBQeXRob24gZGljdAogICAgICAgIHZhciByZXMgPSBkaWN0KCkKICAgICAgICBmb3IodmFyIGF0dHIgaW4gb2JqKXsKICAgICAgICAgICAgZ2V0YXR0cihyZXMsJ19fc2V0aXRlbV9fJykoYXR0cixfcHkob2JqW2F0dHJdKSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlcwogICAgfQogICAgcmV0dXJuIEpTT2JqZWN0KG9iaikKfQpmdW5jdGlvbiBfanMob2JqKXsKICAgIC8vIG9iaiBpcyBhIFB5dGhvbiBvYmplY3QKICAgIGlmIChpc2luc3RhbmNlKG9iaixbaW50LHN0cl0pKXtyZXR1cm4gb2JqfQogICAgZWxzZSBpZihvYmo9PT1Ob25lKXtyZXR1cm4gbnVsbH0KICAgIGVsc2UgaWYob2JqPT09VHJ1ZSl7cmV0dXJuIHRydWV9CiAgICBlbHNlIGlmKG9iaj09PUZhbHNlKXtyZXR1cm4gZmFsc2V9CiAgICBlbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGZsb2F0KSl7cmV0dXJuIG9iai52YWx1ZX0KICAgIGVsc2UgaWYoaXNpbnN0YW5jZShvYmosW2xpc3QsdHVwbGVdKSl7CiAgICAgICAgdmFyIHJlcyA9IFtdCiAgICAgICAgZm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKyl7cmVzLnB1c2goX2pzKG9ialtpXSkpfQogICAgICAgIHJldHVybiByZXMKICAgIH1lbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGRpY3QpKXsKICAgICAgICB2YXIgcmVzID0gbmV3IE9iamVjdCgpCiAgICAgICAgZm9yKHZhciBpPTA7aTxvYmouJGtleXMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIHJlc1tfanMob2JqLiRrZXlzW2ldKV09X2pzKG9iai4kdmFsdWVzW2ldKQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzCiAgICB9ZWxzZXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3Ioc3RyKG9iaikrJyBpcyBub3QgSlNPTiBzZXJpYWxpemFibGUnKQogICAgfQp9CgokbW9kdWxlID0gIHsKCiAgICBsb2FkcyA6IGZ1bmN0aW9uKGpzb25fb2JqKXtyZXR1cm4gX3B5KEpTT04ucGFyc2UoanNvbl9vYmopKX0sCgogICAgZHVtcHMgOiBmdW5jdGlvbihvYmope3JldHVybiBKU09OLnN0cmluZ2lmeShfanMob2JqKSl9LAp9',
'/libs/math.js':'',
'/libs/random.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgcmFuZG9tOmZ1bmN0aW9uKCl7CiAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAwKXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3IoInJhbmRvbSgpIHRha2VzIG5vIGFyZ3VtZW50cyAoIithcmd1bWVudHMubGVuZ3RoKyIgZ2l2ZW4pIikKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmxvYXQoTWF0aC5yYW5kb20oKSk7CiAgICAgIH0KICAgIH0sCiAgICByYW5kaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGItYSsxKSthKSl9LAogICAgcmFuZHJhbmdlOmZ1bmN0aW9uKHN0YXJ0LHN0b3Asc3RlcCl7CiAgICAgIGlmKHN0ZXAgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHN0ZXA9MTsKICAgICAgfSBlbHNlIGlmKHN0ZXAgPT0gMCkgeyAKICAgICAgICAvL3JhaXNlIFZhbHVlRXJyb3IoInplcm8gc3RlcCBmb3IgcmFuZHJhbmdlKCkiKTsKICAgICAgfQoKICAgICAgaWYoc3RvcCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgIHN0b3A9c3RhcnQ7CiAgICAgICAgIHN0YXJ0PTA7CiAgICAgIH0KICAgICAgdmFyIHdpZHRoPXN0b3Atc3RhcnQ7CiAgICAgIGlmIChzdGVwPT0xICYmIHdpZHRoID4gMCkgewogICAgICAgIHJldHVybiBzdGFydCArIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqd2lkdGgpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyByYWlzZSBWYWx1ZUVycm9yKCJlbXB0eSByYW5nZSBmb3IgcmFuZHJhbmdlKCkgKCIrc3RhcnQrIiwiK3N0b3ArJywnK3N0ZXArJyknKTsKICAgICAgfQogICAgICAKICAgICAgdmFyIG47CiAgICAgIGlmIChzdGVwID4gMCkgewogICAgICAgICBuPU1hdGguZmxvb3IoKHdpZHRoK3N0ZXAtMSkvc3RlcCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgIG49TWF0aC5mbG9vcigod2lkdGgrc3RlcCsxKS9zdGVwKTsKICAgICAgfQogICAgICByZXR1cm4gc3RhcnQgKyBzdGVwKmludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbikpCiAgICAgIC8vcmV0dXJuIGludChNYXRoLnJhbmRvbSgpKihzdG9wL3N0ZXAtc3RhcnQvc3RlcCkqc3RlcCArIHN0YXJ0KQogICAgfSwKICAgIHNodWZmbGU6ZnVuY3Rpb24oeCwgcm5kKXsKICAgICAgaWYgKHgubGVuZ3RoIDw9IDEpIHsgcmV0dXJuIHh9CgogICAgICBpZiAocm5kID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgcm5kPU1hdGgucmFuZG9tCiAgICAgIH0KCiAgICAgIGZvcih2YXIgaiwgbywgaSA9IHgubGVuZ3RoOyBpOyBqID0gcGFyc2VJbnQocm5kKCkgKiBpKSwgbyA9IHhbLS1pXSwgeFtpXSA9IHhbal0sIHhbal0gPSBvKTsKICAgIH0KfQokbW9kdWxlLl9fY2xhc3NfXyA9ICRtb2R1bGUgLy8gZGVmaW5lZCBpbiAkcHlfdXRpbHMKJG1vZHVsZS5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ3JhbmRvbSc+In0K',
'/libs/re.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewogICAgb2JqID0ge19fY2xhc3NfXzokbW9kdWxlLAogICAgICAgIF9fc3RyX186IGZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdyZSc+In0KICAgIH0KICAgIG9iai5BID0gb2JqLkFTQ0lJID0gMjU2CiAgICBvYmouSSA9IG9iai5JR05PUkVDQVNFID0gJ2knCiAgICBvYmouTSA9IG9iai5NVUxUSUxJTkUgPSAnbScKICAgICRTUkVfUGF0dGVybkRpY3QgPSB7CiAgICAgICAgX19jbGFzc19fOiR0eXBlLAogICAgICAgIF9fbmFtZV9fOidTUkVfUGF0dGVybicKICAgIH0KICAgICRTUkVfUGF0dGVybkRpY3QubWF0Y2ggPSBmdW5jdGlvbihzZWxmLHN0cmluZyl7CiAgICAgICAgcmV0dXJuIG9iai5tYXRjaChzZWxmLnBhdHRlcm4sc3RyaW5nLHNlbGYuZmxhZ3MpCiAgICB9CiAgICAkU1JFX1BhdHRlcm5EaWN0LnNlYXJjaCA9IGZ1bmN0aW9uKHNlbGYsc3RyaW5nKXsKICAgICAgICByZXR1cm4gb2JqLm9iaihzZWxmLnBhdHRlcm4sc3RyaW5nLHNlbGYuZmxhZ3MpCiAgICB9CiAgICBvYmouY29tcGlsZSA9IGZ1bmN0aW9uKHBhdHRlcm4sZmxhZ3MpewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIF9fY2xhc3NfXzokU1JFX1BhdHRlcm5EaWN0LAogICAgICAgICAgICBwYXR0ZXJuOnBhdHRlcm4sCiAgICAgICAgICAgIGZsYWdzOmZsYWdzCiAgICAgICAgfQogICAgfQogICAgb2JqLmZpbmRhbGwgPSBmdW5jdGlvbihwYXR0ZXJuLHN0cmluZyxmbGFncyl7CiAgICAgICAgdmFyICRucz0kTWFrZUFyZ3MoJ3JlLnNlYXJjaCcsYXJndW1lbnRzLFsncGF0dGVybicsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKQogICAgICAgIHZhciBhcmdzID0gJG5zWydhcmdzJ10KICAgICAgICBpZihhcmdzLmxlbmd0aD4wKXt2YXIgZmxhZ3M9YXJnc1swXX0KICAgICAgICBlbHNle3ZhciBmbGFncyA9ICRuc1sna3cnXS5nZXQoJ2ZsYWdzJywnJyl9CiAgICAgICAgZmxhZ3MgKz0gJ2dtJwogICAgICAgIHZhciBqc3AgPSBuZXcgUmVnRXhwKHBhdHRlcm4sZmxhZ3MpCiAgICAgICAgdmFyIGpzbWF0Y2ggPSBzdHJpbmcubWF0Y2goanNwKQogICAgICAgIGlmKGpzbWF0Y2g9PT1udWxsKXtyZXR1cm4gW119CiAgICAgICAgcmV0dXJuIGpzbWF0Y2gKICAgIH0KICAgIG9iai5zZWFyY2ggPSBmdW5jdGlvbihwYXR0ZXJuLHN0cmluZyl7CiAgICAgICAgdmFyICRucz0kTWFrZUFyZ3MoJ3JlLnNlYXJjaCcsYXJndW1lbnRzLFsncGF0dGVybicsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKQogICAgICAgIHZhciBhcmdzID0gJG5zWydhcmdzJ10KICAgICAgICBpZihhcmdzLmxlbmd0aD4wKXt2YXIgZmxhZ3M9YXJnc1swXX0KICAgICAgICBlbHNle3ZhciBmbGFncyA9IGdldGF0dHIoJG5zWydrdyddLCdnZXQnKSgnZmxhZ3MnLCcnKX0KICAgICAgICB2YXIganNwID0gbmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKQogICAgICAgIHZhciBqc21hdGNoID0gc3RyaW5nLm1hdGNoKGpzcCkKICAgICAgICBpZihqc21hdGNoPT09bnVsbCl7cmV0dXJuIE5vbmV9CiAgICAgICAgdmFyIG1vID0gbmV3IE9iamVjdCgpCiAgICAgICAgbW8uZ3JvdXAgPSBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBpZihqc21hdGNoW2FyZ3VtZW50c1tpXV09PT11bmRlZmluZWQpe3Jlcy5wdXNoKE5vbmUpfQogICAgICAgICAgICAgICAgZWxzZXtyZXMucHVzaChqc21hdGNoW2FyZ3VtZW50c1tpXV0pfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGg9PT0xKXtyZXR1cm4gcmVzWzBdfQogICAgICAgICAgICByZXR1cm4gdHVwbGUocmVzKQogICAgICAgIH0KICAgICAgICBtby5ncm91cHMgPSBmdW5jdGlvbihfZGVmYXVsdCl7CiAgICAgICAgICAgIGlmKF9kZWZhdWx0PT09dW5kZWZpbmVkKXtfZGVmYXVsdD1Ob25lfQogICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgZm9yKHZhciBpPTE7aTxqc21hdGNoLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgaWYoanNtYXRjaFtpXT09PXVuZGVmaW5lZCl7cmVzLnB1c2goX2RlZmF1bHQpfQogICAgICAgICAgICAgICAgZWxzZXtyZXMucHVzaChqc21hdGNoW2ldKX0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHVwbGUocmVzKQogICAgICAgIH0KICAgICAgICBtby5zdGFydCA9IGZ1bmN0aW9uKCl7cmV0dXJuIGpzbWF0Y2guaW5kZXh9CiAgICAgICAgbW8uc3RyaW5nID0gc3RyaW5nCiAgICAgICAgcmV0dXJuIEpTT2JqZWN0KG1vKQogICAgfQogICAgb2JqLnN1YiA9IGZ1bmN0aW9uKHBhdHRlcm4scmVwbCxzdHJpbmcpewogICAgICAgIHZhciAkbnM9JE1ha2VBcmdzKCdyZS5zZWFyY2gnLGFyZ3VtZW50cyxbJ3BhdHRlcm4nLCdyZXBsJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpCiAgICAgICAgZm9yKCR2YXIgaW4gJG5zKXtldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIil9CiAgICAgICAgdmFyIGFyZ3MgPSAkbnNbJ2FyZ3MnXQogICAgICAgIHZhciBjb3VudCA9ICREaWN0RGljdC5nZXQoJG5zWydrdyddLCdjb3VudCcsMCkKICAgICAgICB2YXIgZmxhZ3MgPSAkRGljdERpY3QuZ2V0KCRuc1sna3cnXSwnZmxhZ3MnLCcnKQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjApe3ZhciBjb3VudD1hcmdzWzBdfQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjEpe3ZhciBmbGFncz1hcmdzWzFdfQogICAgICAgIGlmKHR5cGVvZiByZXBsPT09InN0cmluZyIpewogICAgICAgICAgICAvLyBiYWNrcmVmZXJlbmNlcyBhcmUgXDEsIFwyLi4uIGluIFB5dGhvbiBidXQgJDEsJDIuLi4gaW4gSmF2YXNjcmlwdAogICAgICAgICAgICByZXBsID0gcmVwbC5yZXBsYWNlKC9cXChcZCspL2csJyQkJDEnKQogICAgICAgIH1lbHNlIGlmKHR5cGVvZiByZXBsPT09ImZ1bmN0aW9uIil7CiAgICAgICAgICAgIC8vIHRoZSBhcmd1bWVudCBwYXNzZWQgdG8gdGhlIFB5dGhvbiBmdW5jdGlvbiBpcyB0aGUgbWF0Y2ggb2JqZWN0CiAgICAgICAgICAgIC8vIHRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBKYXZhc2NyaXB0IGZ1bmN0aW9uIGFyZSA6CiAgICAgICAgICAgIC8vIC0gdGhlIG1hdGNoZWQgc3Vic3RyaW5nCiAgICAgICAgICAgIC8vIC0gdGhlIG1hdGNoZWQgZ3JvdXBzCiAgICAgICAgICAgIC8vIC0gdGhlIG9mZnNldCBvZiB0aGUgbWF0Y2hlZCBzdWJzdHJpbmcgaW5zaWRlIHRoZSBzdHJpbmcKICAgICAgICAgICAgLy8gLSB0aGUgc3RyaW5nIGJlaW5nIGV4YW1pbmVkCiAgICAgICAgICAgIHZhciAkcmVwbDEgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIG1vID0gT2JqZWN0KCkKICAgICAgICAgICAgICAgIG1vLnN0cmluZyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdCiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0yXQogICAgICAgICAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgYXJndW1lbnRzWzBdLmxlbmd0aAogICAgICAgICAgICAgICAgbW8uc3RhcnQgPSBmdW5jdGlvbigpe3JldHVybiBzdGFydH0KICAgICAgICAgICAgICAgIG1vLmVuZCA9IGZ1bmN0aW9uKCl7cmV0dXJuIGVuZH0KICAgICAgICAgICAgICAgIGdyb3VwcyA9IFtdCiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGgtMjtpKyspe2dyb3Vwcy5wdXNoKGFyZ3VtZW50c1tpXSl9CiAgICAgICAgICAgICAgICBtby5ncm91cHMgPSBmdW5jdGlvbihfZGVmYXVsdCl7CiAgICAgICAgICAgICAgICAgICAgaWYoX2RlZmF1bHQ9PT11bmRlZmluZWQpe19kZWZhdWx0PU5vbmV9CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IFtdCiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxncm91cHMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGdyb3Vwc1tpXT09PXVuZGVmaW5lZCl7cmVzLnB1c2goX2RlZmF1bHQpfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNle3Jlcy5wdXNoKGdyb3Vwc1tpXSl9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXBsKEpTT2JqZWN0KG1vKSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZihjb3VudD09MCl7ZmxhZ3MrPSdnJ30KICAgICAgICB2YXIganNwID0gbmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKQogICAgICAgIGlmKHR5cGVvZiByZXBsPT09J2Z1bmN0aW9uJyl7cmV0dXJuIHN0cmluZy5yZXBsYWNlKGpzcCwkcmVwbDEpfQogICAgICAgIGVsc2V7cmV0dXJuIHN0cmluZy5yZXBsYWNlKGpzcCxyZXBsKX0KICAgIH0KICAgIG9iai5tYXRjaCA9IChmdW5jdGlvbihzZWFyY2hfZnVuYyl7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIC8vIG1hdGNoIGlzIGxpa2Ugc2VhcmNoIGJ1dCBwYXR0ZXJuIG11c3Qgc3RhcnQgd2l0aCBeCiAgICAgICAgICAgIHBhdHRlcm4gPSBhcmd1bWVudHNbMF0KICAgICAgICAgICAgaWYocGF0dGVybi5jaGFyQXQoMCkhPT0nXicpe3BhdHRlcm4gPSAnXicrcGF0dGVybn0KICAgICAgICAgICAgdmFyIGFyZ3MgPSBbcGF0dGVybl0KICAgICAgICAgICAgZm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJncy5wdXNoKGFyZ3VtZW50c1tpXSl9CiAgICAgICAgICAgIHJldHVybiBzZWFyY2hfZnVuYy5hcHBseShudWxsLGFyZ3MpCiAgICAgICAgfQogICAgfSkob2JqLnNlYXJjaCkKCiAgICByZXR1cm4gb2JqCn0KKSgp',
'/libs/time.js':'JG1vZHVsZSA9ICB7CgogICAgX19nZXRhdHRyX18gOiBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0sCiAgICAKICAgIF9fbmFtZV9fIDogJ3RpbWUnLAoKICAgIGN0aW1lOiBmdW5jdGlvbih0aW1lc3RhbXApewogICAgICAgaWYgKHRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB0aW1lc3RhbXA9aW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDApOwogICAgICAgfQogICAgICAgdmFyIGQ9bmV3IERhdGUoMCk7ICAKICAgICAgIGQuc2V0VVRDU2Vjb25kcyh0aW1lc3RhbXApOwogICAgICAgcmV0dXJuIGQudG9VVENTdHJpbmcoKTsKICAgIH0sCiAgICBnbXRpbWU6IGZ1bmN0aW9uKCl7CiAgICAgICB2YXIgZD1uZXcgRGF0ZSgpOwogICAgICAgcmV0dXJuIGxpc3QoW2QuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKzEsIGQuZ2V0RGF0ZSgpLCBkLmdldEhvdXJzKCksCiAgICAgICAgICAgICAgICAgICAgZC5nZXRNaW51dGVzKCksIGQuZ2V0U2Vjb25kcygpLCBkLmdldERheSgpLCAwLCAwXSkKICAgIH0sCiAgICBwZXJmX2NvdW50ZXI6IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBmbG9hdCgobmV3IERhdGUoKSkuZ2V0VGltZSgpLzEwMDAuMCk7CiAgICB9LAogICAgCiAgICBsb2NhbHRpbWUgOiBmdW5jdGlvbihzZWNzKXsgCiAgICAgICB2YXIgZD1uZXcgRGF0ZSgpOwogICAgICAgaWYgKHNlY3MgPT09IHVuZGVmaW5lZCB8fCBzZWNzID09PSBOb25lKSB7cmV0dXJuIGQuZ2V0VGltZSgpfQoKICAgICAgIC8vIGNhbGN1bGF0ZSBpZiB3ZSBhcmUgaW4gZGF5bGlnaHQgc2F2aW5ncyB0aW1lIG9yIG5vdC4KICAgICAgIC8vIGJvcnJvd2VkIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMTg4NzkzNC9jaGVjay1pZi1kYXlsaWdodC1zYXZpbmctdGltZS1pcy1pbi1lZmZlY3QtYW5kLWlmLWl0LWlzLWZvci1ob3ctbWFueS1ob3VycwogICAgICAgdmFyIGphbiA9IG5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwgMCwgMSk7CiAgICAgICB2YXIganVsID0gbmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLCA2LCAxKTsKICAgICAgIHZhciBkc3Q9aW50KGQuZ2V0VGltZXpvbmVPZmZzZXQoKSA8IE1hdGgubWF4KGphbi5nZXRUaW1lem9uZU9mZnNldCgpLCBqdWwuZ2V0VGltZXpvbmVPZmZzZXQoKSkpOwoKICAgICAgIHJldHVybiBsaXN0KFtkLmdldEZ1bGxZZWFyKCksIGQuZ2V0TW9udGgoKSsxLCBkLmdldERhdGUoKSwgZC5nZXRIb3VycygpLAogICAgICAgICAgICAgICAgICAgIGQuZ2V0TWludXRlcygpLCBkLmdldFNlY29uZHMoKSwgZC5nZXREYXkoKSwgMCwgZHN0XSkKICAgICAgIC8vZml4bWUgIChzZWNvbmQgdG8gbGFzdCB2YWx1ZSBpcyAwIHdoaWNoIGlzIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIHllYXIuLikKICAgIH0sCiAgICB0aW1lIDogZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQoKG5ldyBEYXRlKCkuZ2V0VGltZSgpKS8xMDAwKX0sCiAgICAKICAgIHN0cmZ0aW1lIDogZnVuY3Rpb24oZm9ybWF0LGFyZyl7CiAgICAgICAgZnVuY3Rpb24gbnMoYXJnLG5iKXsKICAgICAgICAgICAgLy8gbGVmdCBwYWRkaW5nIHdpdGggMAogICAgICAgICAgICB2YXIgcmVzID0gYXJnLnRvU3RyaW5nKCkKICAgICAgICAgICAgd2hpbGUocmVzLmxlbmd0aDxuYil7cmVzID0gJzAnK3Jlc30KICAgICAgICAgICAgcmV0dXJuIHJlcwogICAgICAgIH0KICAgICAgICBpZihhcmcpewogICAgICAgICAgICB2YXIgb2JqID0gbmV3IERhdGUoYXJnWzBdLGFyZ1sxXS0xLGFyZ1syXSxhcmdbM10sYXJnWzRdLGFyZ1s1XSxhcmdbNl0pCiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHZhciBvYmo9bmV3IERhdGUoKQogICAgICAgIH0KICAgICAgICB2YXIgYWJiX3dlZWtkYXlzID0gWydTdScsJ01vJywnVHUnLCdXZScsJ1RoJywnRnInLCdTYSddCiAgICAgICAgdmFyIGZ1bGxfd2Vla2RheXMgPSBbJ1N1bmRheScsJ01vbmRheScsJ1R1ZXNkYXknLCdXZWRuZXNkYXknLAogICAgICAgICAgICAnVGh1cnNkYXknLCdGcmlkYXknLCdTYXR1cmRheSddCiAgICAgICAgdmFyIGFiYl9tb250aHMgPSBbJ0phbicsJ0ZlYicsJ01hcicsJ0FwcicsJ01heScsJ0p1bicsCiAgICAgICAgICAgICdKdWwnLCdBdWcnLCdTZXAnLCdPY3QnLCdOb3YnLCdEZWMnXQogICAgICAgIHZhciBmdWxsX21vbnRocyA9IFsnSmFudWFyeScsJ0ZlYnJ1YXJ5JywnTWFyY2gnLCdBcHJpbCcsJ01heScsJ0p1bmUnLAogICAgICAgICAgICAnSnVseScsJ0F1Z3VzdCcsJ1NlcHRlbWJlcicsJ09jdG9iZXInLCdOb3ZlbWJlcicsJ0RlY2VtYmVyJ10KICAgICAgICB2YXIgcmVzID0gZm9ybWF0CiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVILyxucyhvYmouZ2V0SG91cnMoKSwyKSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJU0vLG5zKG9iai5nZXRNaW51dGVzKCksMikpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVTLyxucyhvYmouZ2V0U2Vjb25kcygpLDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lWS8sbnMob2JqLmdldEZ1bGxZZWFyKCksNCkpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyV5LyxucyhvYmouZ2V0RnVsbFllYXIoKSw0KS5zdWJzdHIoMikpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVtLyxucyhvYmouZ2V0TW9udGgoKSsxLDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lZC8sbnMob2JqLmdldERhdGUoKSwyKSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJWEvLGFiYl93ZWVrZGF5c1tvYmouZ2V0RGF5KCldKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lQS8sZnVsbF93ZWVrZGF5c1tvYmouZ2V0RGF5KCldKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lYi8sYWJiX21vbnRoc1tvYmouZ2V0TW9udGgoKV0pCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVCLyxmdWxsX21vbnRoc1tvYmouZ2V0TW9udGgoKV0pCiAgICAgICAgcmV0dXJuIHJlcwogICAgfSwKICAgIAogICAgc3RydWN0X3RpbWUgOiBmdW5jdGlvbihhcmcpewogICAgICAgIGlmKCFpc2luc3RhbmNlKGFyZyxbdHVwbGUsbGlzdF0pKXsKICAgICAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdjb25zdHJ1Y3RvciByZXF1aXJlcyBhIHNlcXVlbmNlJykKICAgICAgICB9CiAgICAgICAgaWYobGVuKGFyZykhPTkpewogICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoInRpbWUuc3RydWN0X3RpbWUoKSB0YWtlcyBhIDktc2VxdWVuY2UgKCIrbGVuKGFyZykrIi1zZXF1ZW5jZSBnaXZlbiIpCiAgICAgICAgfQogICAgICAgIHZhciByZXMgPSBhcmcKICAgICAgICB2YXIgbmFtZXMgPSBbJ3RtX3llYXInLCd0bV9tb24nLCd0bV9tZGF5JywndG1faG91cicsJ3RtX21pbicsJ3RtX3NlYycsJ3RtX3dkYXknLAogICAgICAgICAgICAndG1feWRheScsJ3RtX2lzZHN0JywndG1fem9uZScsJ3RtX2dtdG9mZiddCiAgICAgICAgcmVzLl9fZ2V0YXR0cl9fID0gZnVuY3Rpb24oYXR0cil7CiAgICAgICAgICAgIHZhciBpeCA9IG5hbWVzLmluZGV4T2YoYXR0cikKICAgICAgICAgICAgaWYoaXg+LTEpe3JldHVybiBhcmcuX19nZXRpdGVtX18oaXgpfQogICAgICAgICAgICBpZih0eXBlb2YgcmVzW2F0dHJdPT09J2Z1bmN0aW9uJyl7CiAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKG9iail7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG9ialthdHRyXS5hcHBseShvYmosYXJndW1lbnRzKX0KICAgICAgICAgICAgICAgIH0pKHJlcykKICAgICAgICAgICAgfWVsc2UgaWYocmVzW2F0dHJdIT09dW5kZWZpbmVkKXsKICAgICAgICAgICAgICAgIHJldHVybiByZXNbYXR0cl0KICAgICAgICAgICAgfWVsc2V7dGhyb3cgQXR0cmlidXRlRXJyb3IoIm9iamVjdCBoYXMgbm8gYXR0cmlidXRlICciK2F0dHIrIiciKX0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlcwogICAgfQp9Cg==',
'/libs/_ajax.js':'Ly8gYWpheAokbW9kdWxlID0gKGZ1bmN0aW9uKCl7CgokWE1MSHR0cERpY3QgPSB7CiAgICBfX2NsYXNzX186JHR5cGUsCiAgICBfX25hbWVfXzonWE1MSHR0cCcKfQoKJFhNTEh0dHBEaWN0Ll9fZ2V0YXR0cmlidXRlX18gPSBmdW5jdGlvbihzZWxmLGF0dHIpewogICAgaWYoWydoZWFkZXJzJywndGV4dCcsJ3htbCddLmluZGV4T2YoYXR0cik+LTEpewogICAgICAgIHJldHVybiAkWE1MSHR0cERpY3RbYXR0cl0oc2VsZikKICAgIH0KICAgIHJldHVybiAkT2JqZWN0RGljdC5fX2dldGF0dHJpYnV0ZV9fKHNlbGYsYXR0cikKfQoKJFhNTEh0dHBEaWN0Ll9fbXJvX18gPSBbJFhNTEh0dHBEaWN0LCRPYmplY3REaWN0XQoKJFhNTEh0dHBEaWN0Ll9fcmVwcl9fID0gZnVuY3Rpb24oc2VsZil7cmV0dXJuICc8b2JqZWN0IFhNTEh0dHA+J30KCiRYTUxIdHRwRGljdC5fX3N0cl9fID0gJFhNTEh0dHBEaWN0LnRvU3RyaW5nID0gJFhNTEh0dHBEaWN0Ll9fcmVwcl9fCgokWE1MSHR0cERpY3QudGV4dCA9IGZ1bmN0aW9uKHNlbGYpe3JldHVybiBzZWxmLnJlc3BvbnNlVGV4dH0KICAgIAokWE1MSHR0cERpY3QueG1sID0gZnVuY3Rpb24oc2VsZil7cmV0dXJuICREb21PYmplY3Qoc2VsZi5yZXNwb25zZVhNTCl9CiAgICAKJFhNTEh0dHBEaWN0LmhlYWRlcnMgPSBmdW5jdGlvbihzZWxmKXsKICAgIHJldHVybiBsaXN0KHNlbGYuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoJ1xuJykpCn0KCiRYTUxIdHRwRGljdC5nZXRfaGVhZGVyID0gZnVuY3Rpb24oKXsKICAgIHZhciByZXFvYmogPSBzZWxmOwogICAgcmV0dXJuIGZ1bmN0aW9uKGhlYWRlcil7IHJldHVybiByZXFvYmouZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKSB9Cn0KCiRBamF4RGljdCA9IHsKICAgIF9fY2xhc3NfXzokdHlwZSwKICAgIF9fbmFtZV9fOidhamF4Jwp9CgokQWpheERpY3QuX19tcm9fXyA9IFskQWpheERpY3QsJE9iamVjdERpY3RdCgokQWpheERpY3QuX19yZXByX18gPSBmdW5jdGlvbihzZWxmKXsKICAgIHJldHVybiAnPG9iamVjdCBBamF4PicKfQoKJEFqYXhEaWN0Ll9fc3RyX18gPSAkQWpheERpY3QudG9TdHJpbmcgPSAkQWpheERpY3QuX19yZXByX18KCiRBamF4RGljdC5iaW5kID0gZnVuY3Rpb24oc2VsZixldnQsZnVuYyl7CiAgICAvLyByZXEuYmluZChldnQsZnVuYykgaXMgdGhlIHNhbWUgYXMgcmVxLm9uX2V2dCA9IGZ1bmMKICAgIHNlbGZbJ29uXycrZXZ0XT1mdW5jCn0KCiRBamF4RGljdC5vcGVuID0gZnVuY3Rpb24oc2VsZixtZXRob2QsdXJsLGFzeW5jKXsKICAgIHNlbGYuJHhtbGh0dHAub3BlbihtZXRob2QsdXJsLGFzeW5jKQp9CgokQWpheERpY3Quc2VuZCA9IGZ1bmN0aW9uKHNlbGYscGFyYW1zKXsKICAgIC8vIHBhcmFtcyBpcyBhIFB5dGhvbiBkaWN0aW9uYXJ5CiAgICB2YXIgcmVzID0gJycKICAgIGlmKCFwYXJhbXMgfHwgcGFyYW1zLiRrZXlzLmxlbmd0aD09MCl7c2VsZi4keG1saHR0cC5zZW5kKCk7cmV0dXJufQogICAgZWxzZSBpZihpc2luc3RhbmNlKHBhcmFtcyxzdHIpKXsKICAgICAgICByZXMgPSBwYXJhbXMKICAgIH1lbHNlIGlmKGlzaW5zdGFuY2UocGFyYW1zLGRpY3QpKXsKICAgICAgICBmb3IoaT0wO2k8cGFyYW1zLiRrZXlzLmxlbmd0aDtpKyspewogICAgICAgICAgICByZXMgKz1lbmNvZGVVUklDb21wb25lbnQoc3RyKHBhcmFtcy4ka2V5c1tpXSkpKyc9JytlbmNvZGVVUklDb21wb25lbnQoc3RyKHBhcmFtcy4kdmFsdWVzW2ldKSkrJyYnCiAgICAgICAgfQogICAgICAgIHJlcyA9IHJlcy5zdWJzdHIoMCxyZXMubGVuZ3RoLTEpCiAgICB9ZWxzZXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3IoInNlbmQoKSBhcmd1bWVudCBtdXN0IGJlIHN0cmluZyBvciBkaWN0b25hcnksIG5vdCAnIitzdHIocGFyYW1zLl9fY2xhc3NfXykrIiciKQogICAgfQogICAgc2VsZi4keG1saHR0cC5zZW5kKHJlcykKfQoKJEFqYXhEaWN0LnNldF9oZWFkZXIgPSBmdW5jdGlvbihzZWxmLGtleSx2YWx1ZSl7CiAgICBzZWxmLiR4bWxodHRwLnNldFJlcXVlc3RIZWFkZXIoa2V5LHZhbHVlKQp9CgokQWpheERpY3Quc2V0X3RpbWVvdXQgPSBmdW5jdGlvbihzZWxmLHNlY29uZHMsZnVuYyl7CiAgICBzZWxmLiR4bWxodHRwLiRyZXF1ZXN0VGltZXIgPSBzZXRUaW1lb3V0KAogICAgICAgIGZ1bmN0aW9uKCkge3NlbGYuJHhtbGh0dHAuYWJvcnQoKTtmdW5jKCl9LCAKICAgICAgICBzZWNvbmRzKjEwMDApOyAKfQoKZnVuY3Rpb24gYWpheCgpewoKICAgIHZhciByZXMgPSB7CiAgICAgICAgX19jbGFzc19fOiRBamF4RGljdAogICAgfQoKICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3Qpey8vIGNvZGUgZm9yIElFNyssIEZpcmVmb3gsIENocm9tZSwgT3BlcmEsIFNhZmFyaQogICAgICAgIHZhciAkeG1saHR0cD1uZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgIH1lbHNley8vIGNvZGUgZm9yIElFNiwgSUU1CiAgICAgICAgdmFyICR4bWxodHRwPW5ldyBBY3RpdmVYT2JqZWN0KCJNaWNyb3NvZnQuWE1MSFRUUCIpOwogICAgfQogICAgJHhtbGh0dHAuJHJlcXVlc3RUaW1lciA9IG51bGwKICAgICR4bWxodHRwLl9fY2xhc3NfXyA9ICRYTUxIdHRwRGljdAogICAgCiAgICAkeG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpewogICAgICAgIC8vIGhlcmUsICJ0aGlzIiByZWZlcnMgdG8gJHhtbGh0dHAKICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnJlYWR5U3RhdGUKICAgICAgICB2YXIgcmVxID0gdGhpcy4kYWpheAogICAgICAgIHZhciB0aW1lciA9IHRoaXMuJHJlcXVlc3RUaW1lcgogICAgICAgIHZhciBvYmogPSB0aGlzCiAgICAgICAgaWYoc3RhdGU9PT0wICYmICdvbl91bmluaXRpYWxpemVkJyBpbiByZXEpe3JlcS5vbl91bmluaXRpYWxpemVkKG9iail9CiAgICAgICAgZWxzZSBpZihzdGF0ZT09PTEgJiYgJ29uX2xvYWRpbmcnIGluIHJlcSl7cmVxLm9uX2xvYWRpbmcob2JqKX0KICAgICAgICBlbHNlIGlmKHN0YXRlPT09MiAmJiAnb25fbG9hZGVkJyBpbiByZXEpe3JlcS5vbl9sb2FkZWQob2JqKX0KICAgICAgICBlbHNlIGlmKHN0YXRlPT09MyAmJiAnb25faW50ZXJhY3RpdmUnIGluIHJlcSl7cmVxLm9uX2ludGVyYWN0aXZlKG9iail9CiAgICAgICAgZWxzZSBpZihzdGF0ZT09PTQgJiYgJ29uX2NvbXBsZXRlJyBpbiByZXEpewogICAgICAgICAgICBpZih0aW1lciAhPT0gbnVsbCl7d2luZG93LmNsZWFyVGltZW91dCh0aW1lcil9CiAgICAgICAgICAgIHJlcS5vbl9jb21wbGV0ZShvYmopCiAgICAgICAgfQogICAgfQogICAgJHhtbGh0dHAuJGFqYXggPSByZXMKICAgIHJlcy4keG1saHR0cCA9ICR4bWxodHRwCiAgICByZXR1cm4gcmVzCn0KCmFqYXguX19jbGFzc19fID0gJGZhY3RvcnkKYWpheC4kZGljdCA9ICRBamF4RGljdAoKcmV0dXJuIHthamF4OmFqYXh9Cgp9KSgp',
'/libs/_browser.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgYWxlcnQ6IGFsZXJ0LAogICAgY29uZmlybTogZnVuY3Rpb24obWVzc2FnZSl7cmV0dXJuIEpTT2JqZWN0KHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKX0sCiAgICBkb2M6ICRET01Ob2RlKGRvY3VtZW50KSwgICAvL3dhbnQgdG8gdXNlIGRvY3VtZW50IGluc3RlYWQgb2YgZG9jCiAgICBtb3VzZUNvb3JkczogZnVuY3Rpb24oZXYpe3JldHVybiBKU09iamVjdCgkbW91c2VDb29yZHMoZXYpKX0sCiAgICBwcm9tcHQ6IGZ1bmN0aW9uKG1lc3NhZ2UsIGRlZmF1bHRfdmFsdWUpe3JldHVybiBKU09iamVjdCh3aW5kb3cucHJvbXB0KG1lc3NhZ2UsIGRlZmF1bHRfdmFsdWV8fCcnKSl9LAogICAgd2luOiBKU09iamVjdCh3aW5kb3cpICAgICAvL3dhbnQgdG8gdXNlIHdpbmRvdyBpbnN0ZWFkIG9mIHdpbgp9CiRtb2R1bGUuX19jbGFzc19fID0gJG1vZHVsZSAvLyBkZWZpbmVkIGluICRweV91dGlscwokbW9kdWxlLl9fc3RyX18gPSBmdW5jdGlvbigpe3JldHVybiAiPG1vZHVsZSAnYnJvd3Nlcic+In0K',
'/libs/_html.js':'Ly8gY3JlYXRpb24gb2YgYW4gSFRNTCBlbGVtZW50CiRtb2R1bGUgPSAoZnVuY3Rpb24oKXsKZnVuY3Rpb24gJFRhZyh0YWdOYW1lLGFyZ3MpewogICAgdmFyIG9iaiA9ICRET01Ob2RlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSkpCiAgICAvLyBvYmouZWx0IGlzIHRoZSBET00gZWxlbWVudAogICAgb2JqLnBhcmVudCA9IHRoaXMKICAgIGlmKGFyZ3MhPXVuZGVmaW5lZCAmJiBhcmdzLmxlbmd0aD4wKXsKICAgICAgICAkc3RhcnQgPSAwCiAgICAgICAgJGZpcnN0ID0gYXJnc1swXQogICAgICAgIC8vIGlmIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhIGtleXdvcmQsIGl0J3MgdGhlIHRhZyBjb250ZW50CiAgICAgICAgaWYoJGZpcnN0Ll9fY2xhc3NfXyE9PSRLdyl7CiAgICAgICAgICAgICRzdGFydCA9IDEKICAgICAgICAgICAgaWYoaXNpbnN0YW5jZSgkZmlyc3QsW3N0cixpbnQsZmxvYXRdKSl7CiAgICAgICAgICAgICAgICB0eHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIoJGZpcnN0KSkKICAgICAgICAgICAgICAgIG9iai5lbHQuYXBwZW5kQ2hpbGQodHh0KQogICAgICAgICAgICB9IGVsc2UgaWYoJGZpcnN0Ll9fY2xhc3NfXz09PSRUYWdTdW1EaWN0KXsKICAgICAgICAgICAgICAgIGZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKyl7CiAgICAgICAgICAgICAgICAgICAgb2JqLmVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuY2hpbGRyZW5bJGldLmVsdCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsgLy8gYXJndW1lbnQgaXMgYW5vdGhlciBET01Ob2RlIGluc3RhbmNlCiAgICAgICAgICAgICAgICB0cnl7b2JqLmVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuZWx0KX0KICAgICAgICAgICAgICAgIGNhdGNoKGVycil7Y29uc29sZS5sb2coJ2VycmV1ciAnK2Vycik7dGhyb3cgVmFsdWVFcnJvcignd3JvbmcgZWxlbWVudCAnKyRmaXJzdCl9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gYXR0cmlidXRlcwogICAgICAgIGZvcih2YXIgJGk9JHN0YXJ0OyRpPGFyZ3MubGVuZ3RoOyRpKyspewogICAgICAgICAgICAvLyBrZXl3b3JkIGFyZ3VtZW50cwogICAgICAgICAgICAkYXJnID0gYXJnc1skaV0KICAgICAgICAgICAgaWYoJGFyZyAmJiAkYXJnLl9fY2xhc3NfXz09PSRLdyl7CiAgICAgICAgICAgICAgICBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHIoMCwyKT09PSJvbiIpeyAvLyBldmVudHMKICAgICAgICAgICAgICAgICAgICBldmFsKCdET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCk9PSJzdHlsZSIpewogICAgICAgICAgICAgICAgICAgIERPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZigkYXJnLnZhbHVlIT09ZmFsc2UpewogICAgICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb24uc2VsZWN0ZWQ9ZmFsc2Ugc2V0cyBpdCB0byB0cnVlIDotKQogICAgICAgICAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJnID0gJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5lbHQuc2V0QXR0cmlidXRlKGFyZywkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXJnPT0iY2xhc3MiKXsgLy8gZm9yIElFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmVsdC5zZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIsJGFyZy52YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGVycil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyZXVyICcrZXJyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVmFsdWVFcnJvcigiY2FuJ3Qgc2V0IGF0dHJpYnV0ZSAiKyRhcmcubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBvYmoKfQoKLy8gdGhlIGNsYXNzZXMgdXNlZCBmb3IgdGFnIHN1bXMsICRUYWdTVW0gYW5kICRUYWdTdW1DbGFzcyAKLy8gYXJlIGRlZmluZWQgaW4gcHlfZG9tLmpzCgpmdW5jdGlvbiBBKCl7CiAgICB2YXIgb2JqID0gJFRhZygnQScsYXJndW1lbnRzKQogICAgcmV0dXJuIG9iagp9CkEuX19uYW1lX189J2h0bWwuQScKCnZhciAkc3JjID0gQSsnJyAvLyBzb3VyY2Ugb2YgZnVuY3Rpb24gQQovLyBIVE1MNCB0YWdzCiR0YWdzID0gWydBJywgJ0FCQlInLCAnQUNST05ZTScsICdBRERSRVNTJywgJ0FQUExFVCcsCiAgICAgICAgICAgICdCJywgJ0JETycsICdCSUcnLCAnQkxPQ0tRVU9URScsICdCVVRUT04nLAogICAgICAgICAgICAnQ0FQVElPTicsICdDRU5URVInLCAnQ0lURScsICdDT0RFJywKICAgICAgICAgICAgJ0RFTCcsICdERk4nLCAnRElSJywgJ0RJVicsICdETCcsCiAgICAgICAgICAgICdFTScsICdGSUVMRFNFVCcsICdGT05UJywgJ0ZPUk0nLCAnRlJBTUVTRVQnLAogICAgICAgICAgICAnSDEnLCAnSDInLCAnSDMnLCAnSDQnLCAnSDUnLCAnSDYnLAogICAgICAgICAgICAnSScsICdJRlJBTUUnLCAnSU5TJywgJ0tCRCcsICdMQUJFTCcsICdMRUdFTkQnLAogICAgICAgICAgICAnTUFQJywgJ01FTlUnLCAnTk9GUkFNRVMnLCAnTk9TQ1JJUFQnLCAnT0JKRUNUJywKICAgICAgICAgICAgJ09MJywgJ09QVEdST1VQJywgJ1BSRScsICdRJywgJ1MnLCAnU0FNUCcsCiAgICAgICAgICAgICdTQ1JJUFQnLCAnU0VMRUNUJywgJ1NNQUxMJywgJ1NQQU4nLCAnU1RSSUtFJywKICAgICAgICAgICAgJ1NUUk9ORycsICdTVFlMRScsICdTVUInLCAnU1VQJywgJ1RBQkxFJywKICAgICAgICAgICAgJ1RFWFRBUkVBJywgJ1RJVExFJywgJ1RUJywgJ1UnLCAnVUwnLAogICAgICAgICAgICAnVkFSJywgJ0JPRFknLCAnQ09MR1JPVVAnLCAnREQnLCAnRFQnLCAnSEVBRCcsCiAgICAgICAgICAgICdIVE1MJywgJ0xJJywgJ1AnLCAnVEJPRFknLCdPUFRJT04nLCAKICAgICAgICAgICAgJ1REJywgJ1RGT09UJywgJ1RIJywgJ1RIRUFEJywgJ1RSJywKICAgICAgICAgICAgJ0FSRUEnLCAnQkFTRScsICdCQVNFRk9OVCcsICdCUicsICdDT0wnLCAnRlJBTUUnLAogICAgICAgICAgICAnSFInLCAnSU1HJywgJ0lOUFVUJywgJ0lTSU5ERVgnLCAnTElOSycsCiAgICAgICAgICAgICdNRVRBJywgJ1BBUkFNJ10KCi8vIEhUTUw1IHRhZ3MKJHRhZ3MgPSAkdGFncy5jb25jYXQoWydBUlRJQ0xFJywnQVNJREUnLCdBVURJTycsJ0JESScsCiAgICAnQ0FOVkFTJywnQ09NTUFORCcsJ0RBVEFMSVNUJywnREVUQUlMUycsJ0RJQUxPRycsCiAgICAnRU1CRUQnLCdGSUdDQVBUSU9OJywnRklHVVJFJywnRk9PVEVSJywnSEVBREVSJywKICAgICdLRVlHRU4nLCdNQVJLJywnTUVURVInLCdOQVYnLCdPVVRQVVQnLAogICAgJ1BST0dSRVNTJywnUlAnLCdSVCcsJ1JVQlknLCdTRUNUSU9OJywnU09VUkNFJywKICAgICdTVU1NQVJZJywnVElNRScsJ1RSQUNLJywnVklERU8nLCdXQlInXSkKCi8vIGNyZWF0ZSBjbGFzc2VzCnZhciBvYmogPSBuZXcgT2JqZWN0KCkKZm9yKCRpPTA7JGk8JHRhZ3MubGVuZ3RoOyRpKyspewogICAgJGNvZGUgPSAkc3JjLnJlcGxhY2UoL0EvZ20sJHRhZ3NbJGldKQogICAgZXZhbCgib2JqLiIrJHRhZ3NbJGldKyI9IiskY29kZSkKICAgIGV2YWwoIm9iai4iKyR0YWdzWyRpXSsnLl9fbmFtZV9fPSJodG1sLicrJHRhZ3NbJGldKyciJykKfQpvYmouX19nZXRhdHRyX18gPSBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0KcmV0dXJuIG9iagp9KSgpCg==',
'/libs/_io.js':'Ly8gcmVxdWlyZWQgdG8gYXBwZWFyIGluIHN5cy5idWlsdGluX21vZHVsZV9uYW1lcwokbW9kdWxlPXt9',
'/libs/_os.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgcmFuZG9tOmZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpfSwKICAgIHJhbmRpbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooYi1hKSthKSl9Cn0KJG1vZHVsZS5fX2NsYXNzX18gPSAkbW9kdWxlIC8vIGRlZmluZWQgaW4gJHB5X3V0aWxzCiRtb2R1bGUuX19zdHJfXyA9IGZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdfb3MnPiJ9Cg==',
'/libs/_svg.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewoKJHN2Z05TID0gImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgokeGxpbmtOUyA9ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIgoKZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXsKICAgIC8vIHJlcHJlc2VudHMgYW4gU1ZHIHRhZwogICAgdmFyICRpID0gbnVsbAogICAgdmFyICRvYmogPSB0aGlzCiAgICB2YXIgb2JqID0gJERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCRzdmdOUyx0YWdfbmFtZSkpCiAgICBpZihhcmdzIT11bmRlZmluZWQgJiYgYXJncy5sZW5ndGg+MCl7CiAgICAgICAgJHN0YXJ0ID0gMAogICAgICAgICRmaXJzdCA9IGFyZ3NbMF0KICAgICAgICAvLyBpZiBmaXJzdCBhcmd1bWVudCBpcyBub3QgYSBrZXl3b3JkLCBpdCdzIHRoZSB0YWcgY29udGVudAogICAgICAgIGlmKCRmaXJzdC5fX2NsYXNzX18hPT0kS3cpewogICAgICAgICAgICAkc3RhcnQgPSAxCiAgICAgICAgICAgIGlmKGlzaW5zdGFuY2UoJGZpcnN0LFtzdHIsaW50LGZsb2F0XSkpewogICAgICAgICAgICAgICAgdHh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKCRmaXJzdCkpCiAgICAgICAgICAgICAgICBvYmouZWx0LmFwcGVuZENoaWxkKHR4dCkKICAgICAgICAgICAgfSBlbHNlIGlmKCRmaXJzdC5fX2NsYXNzX189PT0kVGFnU3VtRGljdCl7CiAgICAgICAgICAgICAgICBmb3IoJGk9MDskaTwkZmlyc3QuY2hpbGRyZW4ubGVuZ3RoOyRpKyspewogICAgICAgICAgICAgICAgICAgIG9iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmNoaWxkcmVuWyRpXSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRyeXtvYmouZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5lbHQpfQogICAgICAgICAgICAgICAgY2F0Y2goZXJyKXskcmFpc2UoJ1ZhbHVlRXJyb3InLCd3cm9uZyBlbGVtZW50ICcrJGZpcnN0KX0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyBhdHRyaWJ1dGVzCiAgICAgICAgZm9yKCRpPSRzdGFydDskaTxhcmdzLmxlbmd0aDskaSsrKXsKICAgICAgICAgICAgLy8ga2V5d29yZCBhcmd1bWVudHMKICAgICAgICAgICAgJGFyZyA9IGFyZ3NbJGldCiAgICAgICAgICAgIGlmKCRhcmcgJiYgJGFyZy5fX2NsYXNzX189PT0kS3cpewogICAgICAgICAgICAgICAgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PSJvbiIpeyAvLyBldmVudHMKICAgICAgICAgICAgICAgICAgICBldmFsKCdET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCk9PSJzdHlsZSIpewogICAgICAgICAgICAgICAgICAgIERPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigiaHJlZiIpICE9PSAtMSl7IC8vIHhsaW5rOmhyZWYKICAgICAgICAgICAgICAgICAgICBvYmouZWx0LnNldEF0dHJpYnV0ZU5TKCAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsImhyZWYiLCRhcmcudmFsdWUpCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmKCRhcmcudmFsdWUhPT1mYWxzZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9wdGlvbi5zZWxlY3RlZD1mYWxzZSBzZXRzIGl0IHRvIHRydWUgOi0pCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5lbHQuc2V0QXR0cmlidXRlTlMobnVsbCwkYXJnLm5hbWUucmVwbGFjZSgnXycsJy0nKSwkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBvYmoKfQoKLy8gU1ZHCnZhciAkc3ZnX3RhZ3MgPSBbJ2EnLAonYWx0R2x5cGgnLAonYWx0R2x5cGhEZWYnLAonYWx0R2x5cGhJdGVtJywKJ2FuaW1hdGUnLAonYW5pbWF0ZUNvbG9yJywKJ2FuaW1hdGVNb3Rpb24nLAonYW5pbWF0ZVRyYW5zZm9ybScsCidjaXJjbGUnLAonY2xpcFBhdGgnLAonY29sb3JfcHJvZmlsZScsIC8vIGluc3RlYWQgb2YgY29sb3ItcHJvZmlsZQonY3Vyc29yJywKJ2RlZnMnLAonZGVzYycsCidlbGxpcHNlJywKJ2ZlQmxlbmQnLAonZycsCidpbWFnZScsCidsaW5lJywKJ2xpbmVhckdyYWRpZW50JywKJ21hcmtlcicsCidtYXNrJywKJ3BhdGgnLAoncGF0dGVybicsCidwb2x5Z29uJywKJ3BvbHlsaW5lJywKJ3JhZGlhbEdyYWRpZW50JywKJ3JlY3QnLAonc3RvcCcsCidzdmcnLAondGV4dCcsCid0cmVmJywKJ3RzcGFuJywKJ3VzZSddCgokc3ZnID0gZnVuY3Rpb24oKXtyZXR1cm4gJFNWR1RhZygnWCcsYXJndW1lbnRzKX0KJHN2ZyArPSAnJyAvLyBzb3VyY2UgY29kZQoKdmFyIG9iaiA9IG5ldyBPYmplY3QoKQpmb3IodmFyIGk9MDtpPCRzdmdfdGFncy5sZW5ndGg7aSsrKXsKICAgIHZhciB0YWcgPSAkc3ZnX3RhZ3NbaV0KICAgIGV2YWwoJ29iai4nK3RhZysnPScrJHN2Zy5yZXBsYWNlKCdYJyx0YWcpKQp9Cm9iai5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdfQpyZXR1cm4gb2JqCn0pKCk=',
'/libs/_sys.js':'JG1vZHVsZSA9IHsKICAgIG1vZHVsZXMgOiB7J19fZ2V0X18nOmZ1bmN0aW9uKCl7cmV0dXJuIGRpY3QoSlNPYmplY3QoX19CUllUSE9OX18uaW1wb3J0ZWQpKX0sCiAgICAgICAgJ19fc2V0X18nOjAgLy8gZGF0YSBkZXNjcmlwdG9yLCB0byBmb3JjZSB1c2Ugb2YgX19nZXRfXwogICAgfQp9',
'/libs/_timer.js':'JG1vZHVsZSA9ICB7CgogICAgX19uYW1lX18gOiAndGltZXInLAoKICAgIGNsZWFyX2ludGVydmFsIDogZnVuY3Rpb24oaW50X2lkKXt3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRfaWQpfSwKICAgIAogICAgY2xlYXJfdGltZW91dCA6IGZ1bmN0aW9uKHRpbWVvdXRfaWQpe3dpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dF9pZCl9LAoKICAgIHNldF9pbnRlcnZhbCA6IGZ1bmN0aW9uKGZ1bmMsaW50ZXJ2YWwpewogICAgICAgIHJldHVybiBpbnQod2luZG93LnNldEludGVydmFsKGZ1bmMsaW50ZXJ2YWwpKQogICAgfSwKCiAgICBzZXRfdGltZW91dCA6IGZ1bmN0aW9uKGZ1bmMsaW50ZXJ2YWwpe3dpbmRvdy5zZXRUaW1lb3V0KGZ1bmMsaW50ZXJ2YWwpfSwKICAgIAogICAgcmVxdWVzdF9hbmltYXRpb25fZnJhbWU6IGZ1bmN0aW9uKGZ1bmMpewogICAgICAgIHJldHVybiBpbnQod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jKSl9LAogICAgCiAgICBjYW5jZWxfYW5pbWF0aW9uX2ZyYW1lOiBmdW5jdGlvbihpbnRfaWQpe3dpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpbnRfaWQpfSwKCn0K',
'/libs/_websocket.js':'Ly8gd2Vic29ja2V0CiRtb2R1bGUgPSAoZnVuY3Rpb24oKXsKCiRXZWJTb2NrZXREaWN0ID0gewogICAgX19jbGFzc19fIDogJHR5cGUsCiAgICBfX25hbWVfXzonV2ViU29ja2V0Jwp9CgokV2ViU29ja2V0RGljdC5iaW5kID0gZnVuY3Rpb24oc2VsZixldmVudCxjYWxsYmFjayl7CiAgICBzZWxmLiR3c1snb24nK2V2ZW50XSA9IGNhbGxiYWNrCn0KCiRXZWJTb2NrZXREaWN0LnNlbmQgPSBmdW5jdGlvbihzZWxmLGRhdGEpewogICAgc2VsZi4kd3Muc2VuZChkYXRhKQp9CiAgICAKJFdlYlNvY2tldERpY3QuY2xvc2UgPSBmdW5jdGlvbihzZWxmKXsKICAgIHNlbGYuJHdzLmNsb3NlKCkKfQoKJFdlYlNvY2tldERpY3QuX19tcm9fXyA9IFskV2ViU29ja2V0RGljdCwkT2JqZWN0RGljdF0KCmZ1bmN0aW9uIHdlYnNvY2tldChob3N0KXsKICAgIHZhciAkc29ja2V0ID0gbmV3IFdlYlNvY2tldChob3N0KTsKICAgIHZhciByZXMgPSB7CiAgICAgICAgX19jbGFzc19fOiRXZWJTb2NrZXREaWN0LAogICAgICAgICR3cyA6ICRzb2NrZXQKICAgIH0KICAgIHJlcy4kd2Vic29ja2V0ID0gJHNvY2tldAogICAgcmV0dXJuIHJlcwp9CndlYnNvY2tldC5fX2NsYXNzX18gPSAkZmFjdG9yeQp3ZWJzb2NrZXQuJGRpY3QgPSAkV2ViU29ja2V0RGljdAoKcmV0dXJuIHt3ZWJzb2NrZXQ6d2Vic29ja2V0fQoKfSkoKQ==',
'/libs/crypto_js/rollups/md5.js':'',
'/libs/crypto_js/rollups/sha1.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGUsbSl7dmFyIHA9e30saj1wLmxpYj17fSxsPWZ1bmN0aW9uKCl7fSxmPWouQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2wucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGw7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApuPWouV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bT9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxoKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxiPTA7YjxhO2IrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZS5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IG4uaW5pdChjLGEpfX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYi5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGI9W10sZD0wO2Q8YztkKz0yKWJbZD4+PjNdfD1wYXJzZUludChhLnN1YnN0cihkLAoyKSwxNik8PDI0LTQqKGQlOCk7cmV0dXJuIG5ldyBuLmluaXQoYixjLzIpfX0sZz1iLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyliLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2Q+Pj4yXT4+PjI0LTgqKGQlNCkmMjU1KSk7cmV0dXJuIGIuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKX19LHI9Yi5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGcuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGcucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKaz1qLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgbi5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXIucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZH1yZXR1cm4gbmV3IG4uaW5pdChnLGQpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtqLkhhc2hlcj1rLmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuKG5ldyBhLmluaXQoYikpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsZil7cmV0dXJuKG5ldyBzLkhNQUMuaW5pdChhLApmKSkuZmluYWxpemUoYil9fX0pO3ZhciBzPXAuYWxnbz17fTtyZXR1cm4gcH0oTWF0aCk7CihmdW5jdGlvbigpe3ZhciBlPUNyeXB0b0pTLG09ZS5saWIscD1tLldvcmRBcnJheSxqPW0uSGFzaGVyLGw9W10sbT1lLmFsZ28uU0hBMT1qLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBwLmluaXQoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihmLG4pe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGg9YlswXSxnPWJbMV0sZT1iWzJdLGs9YlszXSxqPWJbNF0sYT0wOzgwPmE7YSsrKXtpZigxNj5hKWxbYV09ZltuK2FdfDA7ZWxzZXt2YXIgYz1sW2EtM11ebFthLThdXmxbYS0xNF1ebFthLTE2XTtsW2FdPWM8PDF8Yz4+PjMxfWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXgprKS04OTk0OTc1MTQpO2o9aztrPWU7ZT1nPDwzMHxnPj4+MjtnPWg7aD1jfWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj10aGlzLl9kYXRhLGU9Zi53b3JkcyxiPTgqdGhpcy5fbkRhdGFCeXRlcyxoPTgqZi5zaWdCeXRlcztlW2g+Pj41XXw9MTI4PDwyNC1oJTMyO2VbKGgrNjQ+Pj45PDw0KSsxNF09TWF0aC5mbG9vcihiLzQyOTQ5NjcyOTYpO2VbKGgrNjQ+Pj45PDw0KSsxNV09YjtmLnNpZ0J5dGVzPTQqZS5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBlPWouY2xvbmUuY2FsbCh0aGlzKTtlLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gZX19KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha224.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGcsbCl7dmFyIGY9e30saz1mLmxpYj17fSxoPWZ1bmN0aW9uKCl7fSxtPWsuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2gucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGg7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApxPWsuV29yZEFycmF5PW0uZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bD9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxzKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhO2QrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZy5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHEuaW5pdChjLGEpfX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gZC5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9W10sYj0wO2I8YztiKz0yKWRbYj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihiLAoyKSwxNik8PDI0LTQqKGIlOCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjLzIpfX0sbj10LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKylkLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2I+Pj4yXT4+PjI0LTgqKGIlNCkmMjU1KSk7cmV0dXJuIGQuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKX19LGo9dC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKG4uc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG4ucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdz1rLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09bS5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcS5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPWoucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yn1yZXR1cm4gbmV3IHEuaW5pdCh1LGIpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtrLkhhc2hlcj13LmV4dGVuZCh7Y2ZnOm0uZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyBhLmluaXQoZCkpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyB2LkhNQUMuaW5pdChhLApkKSkuZmluYWxpemUoYyl9fX0pO3ZhciB2PWYuYWxnbz17fTtyZXR1cm4gZn0oTWF0aCk7CihmdW5jdGlvbihnKXtmb3IodmFyIGw9Q3J5cHRvSlMsZj1sLmxpYixrPWYuV29yZEFycmF5LGg9Zi5IYXNoZXIsZj1sLmFsZ28sbT1bXSxxPVtdLHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIDQyOTQ5NjcyOTYqKGEtKGF8MCkpfDB9LHM9MixuPTA7NjQ+bjspe3ZhciBqO2E6e2o9cztmb3IodmFyIHc9Zy5zcXJ0KGopLHY9Mjt2PD13O3YrKylpZighKGoldikpe2o9ITE7YnJlYWsgYX1qPSEwfWomJig4Pm4mJihtW25dPXQoZy5wb3cocywwLjUpKSkscVtuXT10KGcucG93KHMsMS8zKSksbisrKTtzKyt9dmFyIGE9W10sZj1mLlNIQTI1Nj1oLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBrLmluaXQobS5zbGljZSgwKSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09CmNbZCtwXXwwO2Vsc2V7dmFyIGo9YVtwLTE1XSxyPWFbcC0yXTthW3BdPSgoajw8MjV8aj4+PjcpXihqPDwxNHxqPj4+MTgpXmo+Pj4zKSthW3AtN10rKChyPDwxNXxyPj4+MTcpXihyPDwxM3xyPj4+MTkpXnI+Pj4xMCkrYVtwLTE2XX1qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDB9YlswXT1iWzBdK2V8MDtiWzFdPWJbMV0rZnwwO2JbMl09YlsyXStnfDA7YlszXT1iWzNdK2t8MDtiWzRdPWJbNF0raHwwO2JbNV09Yls1XStsfDA7Yls2XT1iWzZdK218MDtiWzddPWJbN10rbnwwfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGI9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzOwpkW2U+Pj41XXw9MTI4PDwyNC1lJTMyO2RbKGUrNjQ+Pj45PDw0KSsxNF09Zy5mbG9vcihiLzQyOTQ5NjcyOTYpO2RbKGUrNjQ+Pj45PDw0KSsxNV09YjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWguY2xvbmUuY2FsbCh0aGlzKTthLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYX19KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZil9KShNYXRoKTsKKGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBmPWsuX2RvRmluYWxpemUuY2FsbCh0aGlzKTtmLnNpZ0J5dGVzLT00O3JldHVybiBmfX0pO2cuU0hBMjI0PWsuX2NyZWF0ZUhlbHBlcihmKTtnLkhtYWNTSEEyMjQ9ay5fY3JlYXRlSG1hY0hlbHBlcihmKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha3.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKHYscCl7dmFyIGQ9e30sdT1kLmxpYj17fSxyPWZ1bmN0aW9uKCl7fSxmPXUuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe3IucHJvdG90eXBlPXRoaXM7dmFyIGI9bmV3IHI7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2IuaW5pdC5wcm90b3R5cGU9YjtiLiRzdXBlcj10aGlzO3JldHVybiBifSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApzPXUuV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYil7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YiE9cD9iOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHx5KS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGI9dGhpcy5zaWdCeXRlczthW2I+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTA7YzxhO2MrPTQpYi5wdXNoKDQyOTQ5NjcyOTYqdi5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHMuaW5pdChiLGEpfX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYy5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoLGM9W10saj0wO2o8YjtqKz0yKWNbaj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihqLAoyKSwxNik8PDI0LTQqKGolOCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiLzIpfX0sZT14LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyljLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShiW2o+Pj4yXT4+PjI0LTgqKGolNCkmMjU1KSk7cmV0dXJuIGMuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKX19LHE9eC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGUuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYil7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGUucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdD11LkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcy5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXEucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09an1yZXR1cm4gbmV3IHMuaW5pdChmLGopfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTt1Lkhhc2hlcj10LmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyBhLmluaXQoYykpLmZpbmFsaXplKGIpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyB3LkhNQUMuaW5pdChhLApjKSkuZmluYWxpemUoYil9fX0pO3ZhciB3PWQuYWxnbz17fTtyZXR1cm4gZH0oTWF0aCk7CihmdW5jdGlvbih2KXt2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5CYXNlLHI9ZC5Xb3JkQXJyYXkscD1wLng2ND17fTtwLldvcmQ9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXt0aGlzLmhpZ2g9Zjt0aGlzLmxvdz1zfX0pO3AuV29yZEFycmF5PXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7Zj10aGlzLndvcmRzPWZ8fFtdO3RoaXMuc2lnQnl0ZXM9cyE9dj9zOjgqZi5sZW5ndGh9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyl9cmV0dXJuIHIuY3JlYXRlKGQsdGhpcy5zaWdCeXRlcyl9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXUuY2xvbmUuY2FsbCh0aGlzKSxkPWYud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKSxwPWQubGVuZ3RoLHI9MDtyPHA7cisrKWRbcl09ZFtyXS5jbG9uZSgpO3JldHVybiBmfX0pfSkoKTsKKGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13fWZvcihlPTA7NT5lO2UrKylmb3IocT0wOzU+cTtxKyspeFtlKzUqcV09cSs1KigoMiplKzMqcSklNSk7ZT0xO2ZvcihxPTA7MjQ+cTtxKyspe2Zvcih2YXIgYT13PXQ9MDs3PmE7YSsrKXtpZihlJjEpe3ZhciBiPSgxPDxhKS0xOzMyPmI/d149MTw8Yjp0Xj0xPDxiLTMyfWU9ZSYxMjg/ZTw8MV4xMTM6ZTw8MX15W3FdPWYuY3JlYXRlKHQsdyl9Zm9yKHZhciBjPVtdLGU9MDsyNT5lO2UrKyljW2VdPWYuY3JlYXRlKCk7ZD1kLlNIQTM9ci5leHRlbmQoe2NmZzpyLmNmZy5leHRlbmQoe291dHB1dExlbmd0aDo1MTJ9KSxfZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl9zdGF0ZT0KW10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdDt0aGlzLmJsb2NrU2l6ZT0oMTYwMC0yKnRoaXMuY2ZnLm91dHB1dExlbmd0aCkvMzJ9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bH1mb3IoZj0wOzI0PmY7ZisrKXtmb3IoaD0wOzU+aDtoKyspe2Zvcih2YXIgZD1sPTAsaz0wOzU+aztrKyspZz1lW2grNSprXSxsXj1nLmhpZ2gsZF49Zy5sb3c7Zz1jW2hdO2cuaGlnaD1sO2cubG93PWR9Zm9yKGg9MDs1Pmg7aCsrKXtnPWNbKGgrNCklNV07bD1jWyhoKzEpJTVdO209bC5oaWdoO2s9bC5sb3c7bD1nLmhpZ2heCihtPDwxfGs+Pj4zMSk7ZD1nLmxvd14oazw8MXxtPj4+MzEpO2ZvcihrPTA7NT5rO2srKylnPWVbaCs1KmtdLGcuaGlnaF49bCxnLmxvd149ZH1mb3IobT0xOzI1Pm07bSsrKWc9ZVttXSxoPWcuaGlnaCxnPWcubG93LGs9c1ttXSwzMj5rPyhsPWg8PGt8Zz4+PjMyLWssZD1nPDxrfGg+Pj4zMi1rKToobD1nPDxrLTMyfGg+Pj42NC1rLGQ9aDw8ay0zMnxnPj4+NjQtayksZz1jW3hbbV1dLGcuaGlnaD1sLGcubG93PWQ7Zz1jWzBdO2g9ZVswXTtnLmhpZ2g9aC5oaWdoO2cubG93PWgubG93O2ZvcihoPTA7NT5oO2grKylmb3Ioaz0wOzU+aztrKyspbT1oKzUqayxnPWVbbV0sbD1jW21dLG09Y1soaCsxKSU1KzUqa10sZD1jWyhoKzIpJTUrNSprXSxnLmhpZ2g9bC5oaWdoXn5tLmhpZ2gmZC5oaWdoLGcubG93PWwubG93Xn5tLmxvdyZkLmxvdztnPWVbMF07aD15W2ZdO2cuaGlnaF49aC5oaWdoO2cubG93Xj1oLmxvd319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSwKYj1hLndvcmRzLGM9OCphLnNpZ0J5dGVzLGU9MzIqdGhpcy5ibG9ja1NpemU7YltjPj4+NV18PTE8PDI0LWMlMzI7Ylsodi5jZWlsKChjKzEpL2UpKmU+Pj41KS0xXXw9MTI4O2Euc2lnQnl0ZXM9NCpiLmxlbmd0aDt0aGlzLl9wcm9jZXNzKCk7Zm9yKHZhciBhPXRoaXMuX3N0YXRlLGI9dGhpcy5jZmcub3V0cHV0TGVuZ3RoLzgsYz1iLzgsZT1bXSxoPTA7aDxjO2grKyl7dmFyIGQ9YVtoXSxmPWQuaGlnaCxkPWQubG93LGY9KGY8PDh8Zj4+PjI0KSYxNjcxMTkzNXwoZjw8MjR8Zj4+PjgpJjQyNzgyNTUzNjAsZD0oZDw8OHxkPj4+MjQpJjE2NzExOTM1fChkPDwyNHxkPj4+OCkmNDI3ODI1NTM2MDtlLnB1c2goZCk7ZS5wdXNoKGYpfXJldHVybiBuZXcgdS5pbml0KGUsYil9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXIuY2xvbmUuY2FsbCh0aGlzKSxiPWEuX3N0YXRlPXRoaXMuX3N0YXRlLnNsaWNlKDApLGM9MDsyNT5jO2MrKyliW2NdPWJbY10uY2xvbmUoKTtyZXR1cm4gYX19KTsKcC5TSEEzPXIuX2NyZWF0ZUhlbHBlcihkKTtwLkhtYWNTSEEzPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZCl9KShNYXRoKTsK',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/sha512.js':'',
'/Lib/antigravity.py':'aW1wb3J0IHdlYmJyb3dzZXIKaW1wb3J0IGhhc2hsaWIKCndlYmJyb3dzZXIub3BlbigiaHR0cDovL3hrY2QuY29tLzM1My8iKQoKZGVmIGdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgZGF0ZWRvdyk6CiAgICAnJydDb21wdXRlIGdlb2hhc2goKSB1c2luZyB0aGUgTXVucm9lIGFsZ29yaXRobS4KCiAgICA+Pj4gZ2VvaGFzaCgzNy40MjE1NDIsIC0xMjIuMDg1NTg5LCBiJzIwMDUtMDUtMjYtMTA0NTguNjgnKQogICAgMzcuODU3NzEzIC0xMjIuNTQ0NTQzCgogICAgJycnCiAgICAjIGh0dHA6Ly94a2NkLmNvbS80MjYvCiAgICBoID0gaGFzaGxpYi5tZDUoZGF0ZWRvdykuaGV4ZGlnZXN0KCkKICAgIHAsIHEgPSBbKCclZicgJSBmbG9hdC5mcm9taGV4KCcwLicgKyB4KSkgZm9yIHggaW4gKGhbOjE2XSwgaFsxNjozMl0pXQogICAgcHJpbnQoJyVkJXMgJWQlcycgJSAobGF0aXR1ZGUsIHBbMTpdLCBsb25naXR1ZGUsIHFbMTpdKSkK',
'/Lib/base64.py':'IyEgL3Vzci9iaW4vcHl0aG9uMy4zCgoiIiJSRkMgMzU0ODogQmFzZTE2LCBCYXNlMzIsIEJhc2U2NCBEYXRhIEVuY29kaW5ncyIiIgoKIyBNb2RpZmllZCAwNC1PY3QtMTk5NSBieSBKYWNrIEphbnNlbiB0byB1c2UgYmluYXNjaWkgbW9kdWxlCiMgTW9kaWZpZWQgMzAtRGVjLTIwMDMgYnkgQmFycnkgV2Fyc2F3IHRvIGFkZCBmdWxsIFJGQyAzNTQ4IHN1cHBvcnQKIyBNb2RpZmllZCAyMi1NYXktMjAwNyBieSBHdWlkbyB2YW4gUm9zc3VtIHRvIHVzZSBieXRlcyBldmVyeXdoZXJlCgppbXBvcnQgcmUKaW1wb3J0IHN0cnVjdAppbXBvcnQgYmluYXNjaWkKCgpfX2FsbF9fID0gWwogICAgIyBMZWdhY3kgaW50ZXJmYWNlIGV4cG9ydHMgdHJhZGl0aW9uYWwgUkZDIDE1MjEgQmFzZTY0IGVuY29kaW5ncwogICAgJ2VuY29kZScsICdkZWNvZGUnLCAnZW5jb2RlYnl0ZXMnLCAnZGVjb2RlYnl0ZXMnLAogICAgIyBHZW5lcmFsaXplZCBpbnRlcmZhY2UgZm9yIG90aGVyIGVuY29kaW5ncwogICAgJ2I2NGVuY29kZScsICdiNjRkZWNvZGUnLCAnYjMyZW5jb2RlJywgJ2IzMmRlY29kZScsCiAgICAnYjE2ZW5jb2RlJywgJ2IxNmRlY29kZScsCiAgICAjIFN0YW5kYXJkIEJhc2U2NCBlbmNvZGluZwogICAgJ3N0YW5kYXJkX2I2NGVuY29kZScsICdzdGFuZGFyZF9iNjRkZWNvZGUnLAogICAgIyBTb21lIGNvbW1vbiBCYXNlNjQgYWx0ZXJuYXRpdmVzLiAgQXMgcmVmZXJlbmNlZCBieSBSRkMgMzQ1OCwgc2VlIHRocmVhZAogICAgIyBzdGFydGluZyBhdDoKICAgICMKICAgICMgaHR0cDovL3pncC5vcmcvcGlwZXJtYWlsL3AycC1oYWNrZXJzLzIwMDEtU2VwdGVtYmVyLzAwMDMxNi5odG1sCiAgICAndXJsc2FmZV9iNjRlbmNvZGUnLCAndXJsc2FmZV9iNjRkZWNvZGUnLAogICAgXQoKCmJ5dGVzX3R5cGVzID0gKGJ5dGVzLCBieXRlYXJyYXkpICAjIFR5cGVzIGFjY2VwdGFibGUgYXMgYmluYXJ5IGRhdGEKCmRlZiBfYnl0ZXNfZnJvbV9kZWNvZGVfZGF0YShzKToKICAgIGlmIGlzaW5zdGFuY2Uocywgc3RyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHJldHVybiBzLmVuY29kZSgnYXNjaWknKQogICAgICAgIGV4Y2VwdCBVbmljb2RlRW5jb2RlRXJyb3I6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ3N0cmluZyBhcmd1bWVudCBzaG91bGQgY29udGFpbiBvbmx5IEFTQ0lJIGNoYXJhY3RlcnMnKQogICAgZWxpZiBpc2luc3RhbmNlKHMsIGJ5dGVzX3R5cGVzKToKICAgICAgICByZXR1cm4gcwogICAgZWxzZToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoImFyZ3VtZW50IHNob3VsZCBiZSBieXRlcyBvciBBU0NJSSBzdHJpbmcsIG5vdCAlcyIgJSBzLl9fY2xhc3NfXy5fX25hbWVfXykKCgoKIyBCYXNlNjQgZW5jb2RpbmcvZGVjb2RpbmcgdXNlcyBiaW5hc2NpaQoKZGVmIGI2NGVuY29kZShzLCBhbHRjaGFycz1Ob25lKToKICAgICIiIkVuY29kZSBhIGJ5dGUgc3RyaW5nIHVzaW5nIEJhc2U2NC4KCiAgICBzIGlzIHRoZSBieXRlIHN0cmluZyB0byBlbmNvZGUuICBPcHRpb25hbCBhbHRjaGFycyBtdXN0IGJlIGEgYnl0ZQogICAgc3RyaW5nIG9mIGxlbmd0aCAyIHdoaWNoIHNwZWNpZmllcyBhbiBhbHRlcm5hdGl2ZSBhbHBoYWJldCBmb3IgdGhlCiAgICAnKycgYW5kICcvJyBjaGFyYWN0ZXJzLiAgVGhpcyBhbGxvd3MgYW4gYXBwbGljYXRpb24gdG8KICAgIGUuZy4gZ2VuZXJhdGUgdXJsIG9yIGZpbGVzeXN0ZW0gc2FmZSBCYXNlNjQgc3RyaW5ncy4KCiAgICBUaGUgZW5jb2RlZCBieXRlIHN0cmluZyBpcyByZXR1cm5lZC4KICAgICIiIgogICAgaWYgbm90IGlzaW5zdGFuY2UocywgYnl0ZXNfdHlwZXMpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZXhwZWN0ZWQgYnl0ZXMsIG5vdCAlcyIgJSBzLl9fY2xhc3NfXy5fX25hbWVfXykKICAgICMgU3RyaXAgb2ZmIHRoZSB0cmFpbGluZyBuZXdsaW5lCiAgICBlbmNvZGVkID0gYmluYXNjaWkuYjJhX2Jhc2U2NChzKVs6LTFdCiAgICBpZiBhbHRjaGFycyBpcyBub3QgTm9uZToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShhbHRjaGFycywgYnl0ZXNfdHlwZXMpOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImV4cGVjdGVkIGJ5dGVzLCBub3QgJXMiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAlIGFsdGNoYXJzLl9fY2xhc3NfXy5fX25hbWVfXykKICAgICAgICBhc3NlcnQgbGVuKGFsdGNoYXJzKSA9PSAyLCByZXByKGFsdGNoYXJzKQogICAgICAgIHJldHVybiBlbmNvZGVkLnRyYW5zbGF0ZShieXRlcy5tYWtldHJhbnMoYicrLycsIGFsdGNoYXJzKSkKICAgIHJldHVybiBlbmNvZGVkCgoKZGVmIGI2NGRlY29kZShzLCBhbHRjaGFycz1Ob25lLCB2YWxpZGF0ZT1GYWxzZSk6CiAgICAiIiJEZWNvZGUgYSBCYXNlNjQgZW5jb2RlZCBieXRlIHN0cmluZy4KCiAgICBzIGlzIHRoZSBieXRlIHN0cmluZyB0byBkZWNvZGUuICBPcHRpb25hbCBhbHRjaGFycyBtdXN0IGJlIGEKICAgIHN0cmluZyBvZiBsZW5ndGggMiB3aGljaCBzcGVjaWZpZXMgdGhlIGFsdGVybmF0aXZlIGFscGhhYmV0IHVzZWQKICAgIGluc3RlYWQgb2YgdGhlICcrJyBhbmQgJy8nIGNoYXJhY3RlcnMuCgogICAgVGhlIGRlY29kZWQgc3RyaW5nIGlzIHJldHVybmVkLiAgQSBiaW5hc2NpaS5FcnJvciBpcyByYWlzZWQgaWYgcyBpcwogICAgaW5jb3JyZWN0bHkgcGFkZGVkLgoKICAgIElmIHZhbGlkYXRlIGlzIEZhbHNlICh0aGUgZGVmYXVsdCksIG5vbi1iYXNlNjQtYWxwaGFiZXQgY2hhcmFjdGVycyBhcmUKICAgIGRpc2NhcmRlZCBwcmlvciB0byB0aGUgcGFkZGluZyBjaGVjay4gIElmIHZhbGlkYXRlIGlzIFRydWUsCiAgICBub24tYmFzZTY0LWFscGhhYmV0IGNoYXJhY3RlcnMgaW4gdGhlIGlucHV0IHJlc3VsdCBpbiBhIGJpbmFzY2lpLkVycm9yLgogICAgIiIiCiAgICBzID0gX2J5dGVzX2Zyb21fZGVjb2RlX2RhdGEocykKICAgIGlmIGFsdGNoYXJzIGlzIG5vdCBOb25lOgogICAgICAgIGFsdGNoYXJzID0gX2J5dGVzX2Zyb21fZGVjb2RlX2RhdGEoYWx0Y2hhcnMpCiAgICAgICAgYXNzZXJ0IGxlbihhbHRjaGFycykgPT0gMiwgcmVwcihhbHRjaGFycykKICAgICAgICBzID0gcy50cmFuc2xhdGUoYnl0ZXMubWFrZXRyYW5zKGFsdGNoYXJzLCBiJysvJykpCiAgICBpZiB2YWxpZGF0ZSBhbmQgbm90IHJlLm1hdGNoKGInXltBLVphLXowLTkrL10qPXswLDJ9JCcsIHMpOgogICAgICAgIHJhaXNlIGJpbmFzY2lpLkVycm9yKCdOb24tYmFzZTY0IGRpZ2l0IGZvdW5kJykKICAgIHJldHVybiBiaW5hc2NpaS5hMmJfYmFzZTY0KHMpCgoKZGVmIHN0YW5kYXJkX2I2NGVuY29kZShzKToKICAgICIiIkVuY29kZSBhIGJ5dGUgc3RyaW5nIHVzaW5nIHRoZSBzdGFuZGFyZCBCYXNlNjQgYWxwaGFiZXQuCgogICAgcyBpcyB0aGUgYnl0ZSBzdHJpbmcgdG8gZW5jb2RlLiAgVGhlIGVuY29kZWQgYnl0ZSBzdHJpbmcgaXMgcmV0dXJuZWQuCiAgICAiIiIKICAgIHJldHVybiBiNjRlbmNvZGUocykKCmRlZiBzdGFuZGFyZF9iNjRkZWNvZGUocyk6CiAgICAiIiJEZWNvZGUgYSBieXRlIHN0cmluZyBlbmNvZGVkIHdpdGggdGhlIHN0YW5kYXJkIEJhc2U2NCBhbHBoYWJldC4KCiAgICBzIGlzIHRoZSBieXRlIHN0cmluZyB0byBkZWNvZGUuICBUaGUgZGVjb2RlZCBieXRlIHN0cmluZyBpcwogICAgcmV0dXJuZWQuICBiaW5hc2NpaS5FcnJvciBpcyByYWlzZWQgaWYgdGhlIGlucHV0IGlzIGluY29ycmVjdGx5CiAgICBwYWRkZWQgb3IgaWYgdGhlcmUgYXJlIG5vbi1hbHBoYWJldCBjaGFyYWN0ZXJzIHByZXNlbnQgaW4gdGhlCiAgICBpbnB1dC4KICAgICIiIgogICAgcmV0dXJuIGI2NGRlY29kZShzKQoKI2ZpeG1lIGJyeXRob24KI191cmxzYWZlX2VuY29kZV90cmFuc2xhdGlvbiA9IGJ5dGVzLm1ha2V0cmFucyhiJysvJywgYictXycpCiNfdXJsc2FmZV9kZWNvZGVfdHJhbnNsYXRpb24gPSBieXRlcy5tYWtldHJhbnMoYictXycsIGInKy8nKQoKZGVmIHVybHNhZmVfYjY0ZW5jb2RlKHMpOgogICAgIiIiRW5jb2RlIGEgYnl0ZSBzdHJpbmcgdXNpbmcgYSB1cmwtc2FmZSBCYXNlNjQgYWxwaGFiZXQuCgogICAgcyBpcyB0aGUgYnl0ZSBzdHJpbmcgdG8gZW5jb2RlLiAgVGhlIGVuY29kZWQgYnl0ZSBzdHJpbmcgaXMKICAgIHJldHVybmVkLiAgVGhlIGFscGhhYmV0IHVzZXMgJy0nIGluc3RlYWQgb2YgJysnIGFuZCAnXycgaW5zdGVhZCBvZgogICAgJy8nLgogICAgIiIiCiAgICByZXR1cm4gYjY0ZW5jb2RlKHMpLnRyYW5zbGF0ZShfdXJsc2FmZV9lbmNvZGVfdHJhbnNsYXRpb24pCgpkZWYgdXJsc2FmZV9iNjRkZWNvZGUocyk6CiAgICAiIiJEZWNvZGUgYSBieXRlIHN0cmluZyBlbmNvZGVkIHdpdGggdGhlIHN0YW5kYXJkIEJhc2U2NCBhbHBoYWJldC4KCiAgICBzIGlzIHRoZSBieXRlIHN0cmluZyB0byBkZWNvZGUuICBUaGUgZGVjb2RlZCBieXRlIHN0cmluZyBpcwogICAgcmV0dXJuZWQuICBiaW5hc2NpaS5FcnJvciBpcyByYWlzZWQgaWYgdGhlIGlucHV0IGlzIGluY29ycmVjdGx5CiAgICBwYWRkZWQgb3IgaWYgdGhlcmUgYXJlIG5vbi1hbHBoYWJldCBjaGFyYWN0ZXJzIHByZXNlbnQgaW4gdGhlCiAgICBpbnB1dC4KCiAgICBUaGUgYWxwaGFiZXQgdXNlcyAnLScgaW5zdGVhZCBvZiAnKycgYW5kICdfJyBpbnN0ZWFkIG9mICcvJy4KICAgICIiIgogICAgcyA9IF9ieXRlc19mcm9tX2RlY29kZV9kYXRhKHMpCiAgICBzID0gcy50cmFuc2xhdGUoX3VybHNhZmVfZGVjb2RlX3RyYW5zbGF0aW9uKQogICAgcmV0dXJuIGI2NGRlY29kZShzKQoKCgojIEJhc2UzMiBlbmNvZGluZy9kZWNvZGluZyBtdXN0IGJlIGRvbmUgaW4gUHl0aG9uCl9iMzJhbHBoYWJldCA9IHsKICAgIDA6IGInQScsICA5OiBiJ0onLCAxODogYidTJywgMjc6IGInMycsCiAgICAxOiBiJ0InLCAxMDogYidLJywgMTk6IGInVCcsIDI4OiBiJzQnLAogICAgMjogYidDJywgMTE6IGInTCcsIDIwOiBiJ1UnLCAyOTogYic1JywKICAgIDM6IGInRCcsIDEyOiBiJ00nLCAyMTogYidWJywgMzA6IGInNicsCiAgICA0OiBiJ0UnLCAxMzogYidOJywgMjI6IGInVycsIDMxOiBiJzcnLAogICAgNTogYidGJywgMTQ6IGInTycsIDIzOiBiJ1gnLAogICAgNjogYidHJywgMTU6IGInUCcsIDI0OiBiJ1knLAogICAgNzogYidIJywgMTY6IGInUScsIDI1OiBiJ1onLAogICAgODogYidJJywgMTc6IGInUicsIDI2OiBiJzInLAogICAgfQoKI2ZpeG1lIGJyeXRob24KI19iMzJ0YWIgPSBbdlswXSBmb3IgaywgdiBpbiBzb3J0ZWQoX2IzMmFscGhhYmV0Lml0ZW1zKCkpXQojX2IzMnJldiA9IGRpY3QoWyh2WzBdLCBrKSBmb3IgaywgdiBpbiBfYjMyYWxwaGFiZXQuaXRlbXMoKV0pCgoKZGVmIGIzMmVuY29kZShzKToKICAgICIiIkVuY29kZSBhIGJ5dGUgc3RyaW5nIHVzaW5nIEJhc2UzMi4KCiAgICBzIGlzIHRoZSBieXRlIHN0cmluZyB0byBlbmNvZGUuICBUaGUgZW5jb2RlZCBieXRlIHN0cmluZyBpcyByZXR1cm5lZC4KICAgICIiIgogICAgaWYgbm90IGlzaW5zdGFuY2UocywgYnl0ZXNfdHlwZXMpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZXhwZWN0ZWQgYnl0ZXMsIG5vdCAlcyIgJSBzLl9fY2xhc3NfXy5fX25hbWVfXykKICAgIHF1YW50YSwgbGVmdG92ZXIgPSBkaXZtb2QobGVuKHMpLCA1KQogICAgIyBQYWQgdGhlIGxhc3QgcXVhbnR1bSB3aXRoIHplcm8gYml0cyBpZiBuZWNlc3NhcnkKICAgIGlmIGxlZnRvdmVyOgogICAgICAgIHMgPSBzICsgYnl0ZXMoNSAtIGxlZnRvdmVyKSAgIyBEb24ndCB1c2UgKz0gIQogICAgICAgIHF1YW50YSArPSAxCiAgICBlbmNvZGVkID0gYnl0ZXMoKQogICAgZm9yIGkgaW4gcmFuZ2UocXVhbnRhKToKICAgICAgICAjIGMxIGFuZCBjMiBhcmUgMTYgYml0cyB3aWRlLCBjMyBpcyA4IGJpdHMgd2lkZS4gIFRoZSBpbnRlbnQgb2YgdGhpcwogICAgICAgICMgY29kZSBpcyB0byBwcm9jZXNzIHRoZSA0MCBiaXRzIGluIHVuaXRzIG9mIDUgYml0cy4gIFNvIHdlIHRha2UgdGhlIDEKICAgICAgICAjIGxlZnRvdmVyIGJpdCBvZiBjMSBhbmQgdGFjayBpdCBvbnRvIGMyLiAgVGhlbiB3ZSB0YWtlIHRoZSAyIGxlZnRvdmVyCiAgICAgICAgIyBiaXRzIG9mIGMyIGFuZCB0YWNrIHRoZW0gb250byBjMy4gIFRoZSBzaGlmdHMgYW5kIG1hc2tzIGFyZSBpbnRlbmRlZAogICAgICAgICMgdG8gZ2l2ZSB1cyB2YWx1ZXMgb2YgZXhhY3RseSA1IGJpdHMgaW4gd2lkdGguCiAgICAgICAgYzEsIGMyLCBjMyA9IHN0cnVjdC51bnBhY2soJyFISEInLCBzW2kqNTooaSsxKSo1XSkKICAgICAgICBjMiArPSAoYzEgJiAxKSA8PCAxNiAjIDE3IGJpdHMgd2lkZQogICAgICAgIGMzICs9IChjMiAmIDMpIDw8IDggICMgMTAgYml0cyB3aWRlCiAgICAgICAgZW5jb2RlZCArPSBieXRlcyhbX2IzMnRhYltjMSA+PiAxMV0sICAgICAgICAgIyBiaXRzIDEgLSA1CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2IzMnRhYlsoYzEgPj4gNikgJiAweDFmXSwgIyBiaXRzIDYgLSAxMAogICAgICAgICAgICAgICAgICAgICAgICAgIF9iMzJ0YWJbKGMxID4+IDEpICYgMHgxZl0sICMgYml0cyAxMSAtIDE1CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2IzMnRhYltjMiA+PiAxMl0sICAgICAgICAgIyBiaXRzIDE2IC0gMjAgKDEgLSA1KQogICAgICAgICAgICAgICAgICAgICAgICAgIF9iMzJ0YWJbKGMyID4+IDcpICYgMHgxZl0sICMgYml0cyAyMSAtIDI1ICg2IC0gMTApCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2IzMnRhYlsoYzIgPj4gMikgJiAweDFmXSwgIyBiaXRzIDI2IC0gMzAgKDExIC0gMTUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2IzMnRhYltjMyA+PiA1XSwgICAgICAgICAgIyBiaXRzIDMxIC0gMzUgKDEgLSA1KQogICAgICAgICAgICAgICAgICAgICAgICAgIF9iMzJ0YWJbYzMgJiAweDFmXSwgICAgICAgICMgYml0cyAzNiAtIDQwICgxIC0gNSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgIyBBZGp1c3QgZm9yIGFueSBsZWZ0b3ZlciBwYXJ0aWFsIHF1YW50YQogICAgaWYgbGVmdG92ZXIgPT0gMToKICAgICAgICByZXR1cm4gZW5jb2RlZFs6LTZdICsgYic9PT09PT0nCiAgICBlbGlmIGxlZnRvdmVyID09IDI6CiAgICAgICAgcmV0dXJuIGVuY29kZWRbOi00XSArIGInPT09PScKICAgIGVsaWYgbGVmdG92ZXIgPT0gMzoKICAgICAgICByZXR1cm4gZW5jb2RlZFs6LTNdICsgYic9PT0nCiAgICBlbGlmIGxlZnRvdmVyID09IDQ6CiAgICAgICAgcmV0dXJuIGVuY29kZWRbOi0xXSArIGInPScKICAgIHJldHVybiBlbmNvZGVkCgoKZGVmIGIzMmRlY29kZShzLCBjYXNlZm9sZD1GYWxzZSwgbWFwMDE9Tm9uZSk6CiAgICAiIiJEZWNvZGUgYSBCYXNlMzIgZW5jb2RlZCBieXRlIHN0cmluZy4KCiAgICBzIGlzIHRoZSBieXRlIHN0cmluZyB0byBkZWNvZGUuICBPcHRpb25hbCBjYXNlZm9sZCBpcyBhIGZsYWcKICAgIHNwZWNpZnlpbmcgd2hldGhlciBhIGxvd2VyY2FzZSBhbHBoYWJldCBpcyBhY2NlcHRhYmxlIGFzIGlucHV0LgogICAgRm9yIHNlY3VyaXR5IHB1cnBvc2VzLCB0aGUgZGVmYXVsdCBpcyBGYWxzZS4KCiAgICBSRkMgMzU0OCBhbGxvd3MgZm9yIG9wdGlvbmFsIG1hcHBpbmcgb2YgdGhlIGRpZ2l0IDAgKHplcm8pIHRvIHRoZQogICAgbGV0dGVyIE8gKG9oKSwgYW5kIGZvciBvcHRpb25hbCBtYXBwaW5nIG9mIHRoZSBkaWdpdCAxIChvbmUpIHRvCiAgICBlaXRoZXIgdGhlIGxldHRlciBJIChleWUpIG9yIGxldHRlciBMIChlbCkuICBUaGUgb3B0aW9uYWwgYXJndW1lbnQKICAgIG1hcDAxIHdoZW4gbm90IE5vbmUsIHNwZWNpZmllcyB3aGljaCBsZXR0ZXIgdGhlIGRpZ2l0IDEgc2hvdWxkIGJlCiAgICBtYXBwZWQgdG8gKHdoZW4gbWFwMDEgaXMgbm90IE5vbmUsIHRoZSBkaWdpdCAwIGlzIGFsd2F5cyBtYXBwZWQgdG8KICAgIHRoZSBsZXR0ZXIgTykuICBGb3Igc2VjdXJpdHkgcHVycG9zZXMgdGhlIGRlZmF1bHQgaXMgTm9uZSwgc28gdGhhdAogICAgMCBhbmQgMSBhcmUgbm90IGFsbG93ZWQgaW4gdGhlIGlucHV0LgoKICAgIFRoZSBkZWNvZGVkIGJ5dGUgc3RyaW5nIGlzIHJldHVybmVkLiAgYmluYXNjaWkuRXJyb3IgaXMgcmFpc2VkIGlmCiAgICB0aGUgaW5wdXQgaXMgaW5jb3JyZWN0bHkgcGFkZGVkIG9yIGlmIHRoZXJlIGFyZSBub24tYWxwaGFiZXQKICAgIGNoYXJhY3RlcnMgcHJlc2VudCBpbiB0aGUgaW5wdXQuCiAgICAiIiIKICAgIHMgPSBfYnl0ZXNfZnJvbV9kZWNvZGVfZGF0YShzKQogICAgcXVhbnRhLCBsZWZ0b3ZlciA9IGRpdm1vZChsZW4ocyksIDgpCiAgICBpZiBsZWZ0b3ZlcjoKICAgICAgICByYWlzZSBiaW5hc2NpaS5FcnJvcignSW5jb3JyZWN0IHBhZGRpbmcnKQogICAgIyBIYW5kbGUgc2VjdGlvbiAyLjQgemVybyBhbmQgb25lIG1hcHBpbmcuICBUaGUgZmxhZyBtYXAwMSB3aWxsIGJlIGVpdGhlcgogICAgIyBGYWxzZSwgb3IgdGhlIGNoYXJhY3RlciB0byBtYXAgdGhlIGRpZ2l0IDEgKG9uZSkgdG8uICBJdCBzaG91bGQgYmUKICAgICMgZWl0aGVyIEwgKGVsKSBvciBJIChleWUpLgogICAgaWYgbWFwMDEgaXMgbm90IE5vbmU6CiAgICAgICAgbWFwMDEgPSBfYnl0ZXNfZnJvbV9kZWNvZGVfZGF0YShtYXAwMSkKICAgICAgICBhc3NlcnQgbGVuKG1hcDAxKSA9PSAxLCByZXByKG1hcDAxKQogICAgICAgIHMgPSBzLnRyYW5zbGF0ZShieXRlcy5tYWtldHJhbnMoYicwMScsIGInTycgKyBtYXAwMSkpCiAgICBpZiBjYXNlZm9sZDoKICAgICAgICBzID0gcy51cHBlcigpCiAgICAjIFN0cmlwIG9mZiBwYWQgY2hhcmFjdGVycyBmcm9tIHRoZSByaWdodC4gIFdlIG5lZWQgdG8gY291bnQgdGhlIHBhZAogICAgIyBjaGFyYWN0ZXJzIGJlY2F1c2UgdGhpcyB3aWxsIHRlbGwgdXMgaG93IG1hbnkgbnVsbCBieXRlcyB0byByZW1vdmUgZnJvbQogICAgIyB0aGUgZW5kIG9mIHRoZSBkZWNvZGVkIHN0cmluZy4KICAgIHBhZGNoYXJzID0gMAogICAgbW8gPSByZS5zZWFyY2goYicoP1A8cGFkPls9XSopJCcsIHMpCiAgICBpZiBtbzoKICAgICAgICBwYWRjaGFycyA9IGxlbihtby5ncm91cCgncGFkJykpCiAgICAgICAgaWYgcGFkY2hhcnMgPiAwOgogICAgICAgICAgICBzID0gc1s6LXBhZGNoYXJzXQogICAgIyBOb3cgZGVjb2RlIHRoZSBmdWxsIHF1YW50YQogICAgcGFydHMgPSBbXQogICAgYWNjID0gMAogICAgc2hpZnQgPSAzNQogICAgZm9yIGMgaW4gczoKICAgICAgICB2YWwgPSBfYjMycmV2LmdldChjKQogICAgICAgIGlmIHZhbCBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ05vbi1iYXNlMzIgZGlnaXQgZm91bmQnKQogICAgICAgIGFjYyArPSBfYjMycmV2W2NdIDw8IHNoaWZ0CiAgICAgICAgc2hpZnQgLT0gNQogICAgICAgIGlmIHNoaWZ0IDwgMDoKICAgICAgICAgICAgcGFydHMuYXBwZW5kKGJpbmFzY2lpLnVuaGV4bGlmeShieXRlcygnJTAxMHgnICUgYWNjLCAiYXNjaWkiKSkpCiAgICAgICAgICAgIGFjYyA9IDAKICAgICAgICAgICAgc2hpZnQgPSAzNQogICAgIyBQcm9jZXNzIHRoZSBsYXN0LCBwYXJ0aWFsIHF1YW50YQogICAgbGFzdCA9IGJpbmFzY2lpLnVuaGV4bGlmeShieXRlcygnJTAxMHgnICUgYWNjLCAiYXNjaWkiKSkKICAgIGlmIHBhZGNoYXJzID09IDA6CiAgICAgICAgbGFzdCA9IGInJyAgICAgICAgICAgICAgICAgICAgICAjIE5vIGNoYXJhY3RlcnMKICAgIGVsaWYgcGFkY2hhcnMgPT0gMToKICAgICAgICBsYXN0ID0gbGFzdFs6LTFdCiAgICBlbGlmIHBhZGNoYXJzID09IDM6CiAgICAgICAgbGFzdCA9IGxhc3RbOi0yXQogICAgZWxpZiBwYWRjaGFycyA9PSA0OgogICAgICAgIGxhc3QgPSBsYXN0WzotM10KICAgIGVsaWYgcGFkY2hhcnMgPT0gNjoKICAgICAgICBsYXN0ID0gbGFzdFs6LTRdCiAgICBlbHNlOgogICAgICAgIHJhaXNlIGJpbmFzY2lpLkVycm9yKCdJbmNvcnJlY3QgcGFkZGluZycpCiAgICBwYXJ0cy5hcHBlbmQobGFzdCkKICAgIHJldHVybiBiJycuam9pbihwYXJ0cykKCgoKIyBSRkMgMzU0OCwgQmFzZSAxNiBBbHBoYWJldCBzcGVjaWZpZXMgdXBwZXJjYXNlLCBidXQgaGV4bGlmeSgpIHJldHVybnMKIyBsb3dlcmNhc2UuICBUaGUgUkZDIGFsc28gcmVjb21tZW5kcyBhZ2FpbnN0IGFjY2VwdGluZyBpbnB1dCBjYXNlCiMgaW5zZW5zaXRpdmVseS4KZGVmIGIxNmVuY29kZShzKToKICAgICIiIkVuY29kZSBhIGJ5dGUgc3RyaW5nIHVzaW5nIEJhc2UxNi4KCiAgICBzIGlzIHRoZSBieXRlIHN0cmluZyB0byBlbmNvZGUuICBUaGUgZW5jb2RlZCBieXRlIHN0cmluZyBpcyByZXR1cm5lZC4KICAgICIiIgogICAgaWYgbm90IGlzaW5zdGFuY2UocywgYnl0ZXNfdHlwZXMpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZXhwZWN0ZWQgYnl0ZXMsIG5vdCAlcyIgJSBzLl9fY2xhc3NfXy5fX25hbWVfXykKICAgIHJldHVybiBiaW5hc2NpaS5oZXhsaWZ5KHMpLnVwcGVyKCkKCgpkZWYgYjE2ZGVjb2RlKHMsIGNhc2Vmb2xkPUZhbHNlKToKICAgICIiIkRlY29kZSBhIEJhc2UxNiBlbmNvZGVkIGJ5dGUgc3RyaW5nLgoKICAgIHMgaXMgdGhlIGJ5dGUgc3RyaW5nIHRvIGRlY29kZS4gIE9wdGlvbmFsIGNhc2Vmb2xkIGlzIGEgZmxhZwogICAgc3BlY2lmeWluZyB3aGV0aGVyIGEgbG93ZXJjYXNlIGFscGhhYmV0IGlzIGFjY2VwdGFibGUgYXMgaW5wdXQuCiAgICBGb3Igc2VjdXJpdHkgcHVycG9zZXMsIHRoZSBkZWZhdWx0IGlzIEZhbHNlLgoKICAgIFRoZSBkZWNvZGVkIGJ5dGUgc3RyaW5nIGlzIHJldHVybmVkLiAgYmluYXNjaWkuRXJyb3IgaXMgcmFpc2VkIGlmCiAgICBzIHdlcmUgaW5jb3JyZWN0bHkgcGFkZGVkIG9yIGlmIHRoZXJlIGFyZSBub24tYWxwaGFiZXQgY2hhcmFjdGVycwogICAgcHJlc2VudCBpbiB0aGUgc3RyaW5nLgogICAgIiIiCiAgICBzID0gX2J5dGVzX2Zyb21fZGVjb2RlX2RhdGEocykKICAgIGlmIGNhc2Vmb2xkOgogICAgICAgIHMgPSBzLnVwcGVyKCkKICAgIGlmIHJlLnNlYXJjaChiJ1teMC05QS1GXScsIHMpOgogICAgICAgIHJhaXNlIGJpbmFzY2lpLkVycm9yKCdOb24tYmFzZTE2IGRpZ2l0IGZvdW5kJykKICAgIHJldHVybiBiaW5hc2NpaS51bmhleGxpZnkocykKCgoKIyBMZWdhY3kgaW50ZXJmYWNlLiAgVGhpcyBjb2RlIGNvdWxkIGJlIGNsZWFuZWQgdXAgc2luY2UgSSBkb24ndCBiZWxpZXZlCiMgYmluYXNjaWkgaGFzIGFueSBsaW5lIGxlbmd0aCBsaW1pdGF0aW9ucy4gIEl0IGp1c3QgZG9lc24ndCBzZWVtIHdvcnRoIGl0CiMgdGhvdWdoLiAgVGhlIGZpbGVzIHNob3VsZCBiZSBvcGVuZWQgaW4gYmluYXJ5IG1vZGUuCgpNQVhMSU5FU0laRSA9IDc2ICMgRXhjbHVkaW5nIHRoZSBDUkxGCk1BWEJJTlNJWkUgPSAoTUFYTElORVNJWkUvLzQpKjMKCmRlZiBlbmNvZGUoaW5wdXQsIG91dHB1dCk6CiAgICAiIiJFbmNvZGUgYSBmaWxlOyBpbnB1dCBhbmQgb3V0cHV0IGFyZSBiaW5hcnkgZmlsZXMuIiIiCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHMgPSBpbnB1dC5yZWFkKE1BWEJJTlNJWkUpCiAgICAgICAgaWYgbm90IHM6CiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgd2hpbGUgbGVuKHMpIDwgTUFYQklOU0laRToKICAgICAgICAgICAgbnMgPSBpbnB1dC5yZWFkKE1BWEJJTlNJWkUtbGVuKHMpKQogICAgICAgICAgICBpZiBub3QgbnM6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBzICs9IG5zCiAgICAgICAgbGluZSA9IGJpbmFzY2lpLmIyYV9iYXNlNjQocykKICAgICAgICBvdXRwdXQud3JpdGUobGluZSkKCgpkZWYgZGVjb2RlKGlucHV0LCBvdXRwdXQpOgogICAgIiIiRGVjb2RlIGEgZmlsZTsgaW5wdXQgYW5kIG91dHB1dCBhcmUgYmluYXJ5IGZpbGVzLiIiIgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBsaW5lID0gaW5wdXQucmVhZGxpbmUoKQogICAgICAgIGlmIG5vdCBsaW5lOgogICAgICAgICAgICBicmVhawogICAgICAgIHMgPSBiaW5hc2NpaS5hMmJfYmFzZTY0KGxpbmUpCiAgICAgICAgb3V0cHV0LndyaXRlKHMpCgoKZGVmIGVuY29kZWJ5dGVzKHMpOgogICAgIiIiRW5jb2RlIGEgYnl0ZXN0cmluZyBpbnRvIGEgYnl0ZXN0cmluZyBjb250YWluaW5nIG11bHRpcGxlIGxpbmVzCiAgICBvZiBiYXNlLTY0IGRhdGEuIiIiCiAgICBpZiBub3QgaXNpbnN0YW5jZShzLCBieXRlc190eXBlcyk6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJleHBlY3RlZCBieXRlcywgbm90ICVzIiAlIHMuX19jbGFzc19fLl9fbmFtZV9fKQogICAgcGllY2VzID0gW10KICAgIGZvciBpIGluIHJhbmdlKDAsIGxlbihzKSwgTUFYQklOU0laRSk6CiAgICAgICAgY2h1bmsgPSBzW2kgOiBpICsgTUFYQklOU0laRV0KICAgICAgICBwaWVjZXMuYXBwZW5kKGJpbmFzY2lpLmIyYV9iYXNlNjQoY2h1bmspKQogICAgcmV0dXJuIGIiIi5qb2luKHBpZWNlcykKCmRlZiBlbmNvZGVzdHJpbmcocyk6CiAgICAiIiJMZWdhY3kgYWxpYXMgb2YgZW5jb2RlYnl0ZXMoKS4iIiIKICAgIGltcG9ydCB3YXJuaW5ncwogICAgd2FybmluZ3Mud2FybigiZW5jb2Rlc3RyaW5nKCkgaXMgYSBkZXByZWNhdGVkIGFsaWFzLCB1c2UgZW5jb2RlYnl0ZXMoKSIsCiAgICAgICAgICAgICAgICAgIERlcHJlY2F0aW9uV2FybmluZywgMikKICAgIHJldHVybiBlbmNvZGVieXRlcyhzKQoKCmRlZiBkZWNvZGVieXRlcyhzKToKICAgICIiIkRlY29kZSBhIGJ5dGVzdHJpbmcgb2YgYmFzZS02NCBkYXRhIGludG8gYSBieXRlc3RyaW5nLiIiIgogICAgaWYgbm90IGlzaW5zdGFuY2UocywgYnl0ZXNfdHlwZXMpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZXhwZWN0ZWQgYnl0ZXMsIG5vdCAlcyIgJSBzLl9fY2xhc3NfXy5fX25hbWVfXykKICAgIHJldHVybiBiaW5hc2NpaS5hMmJfYmFzZTY0KHMpCgpkZWYgZGVjb2Rlc3RyaW5nKHMpOgogICAgIiIiTGVnYWN5IGFsaWFzIG9mIGRlY29kZWJ5dGVzKCkuIiIiCiAgICBpbXBvcnQgd2FybmluZ3MKICAgIHdhcm5pbmdzLndhcm4oImRlY29kZXN0cmluZygpIGlzIGEgZGVwcmVjYXRlZCBhbGlhcywgdXNlIGRlY29kZWJ5dGVzKCkiLAogICAgICAgICAgICAgICAgICBEZXByZWNhdGlvbldhcm5pbmcsIDIpCiAgICByZXR1cm4gZGVjb2RlYnl0ZXMocykKCgojIFVzYWJsZSBhcyBhIHNjcmlwdC4uLgpkZWYgbWFpbigpOgogICAgIiIiU21hbGwgbWFpbiBwcm9ncmFtIiIiCiAgICBpbXBvcnQgc3lzLCBnZXRvcHQKICAgIHRyeToKICAgICAgICBvcHRzLCBhcmdzID0gZ2V0b3B0LmdldG9wdChzeXMuYXJndlsxOl0sICdkZXV0JykKICAgIGV4Y2VwdCBnZXRvcHQuZXJyb3IgYXMgbXNnOgogICAgICAgIHN5cy5zdGRvdXQgPSBzeXMuc3RkZXJyCiAgICAgICAgcHJpbnQobXNnKQogICAgICAgIHByaW50KCIiInVzYWdlOiAlcyBbLWR8LWV8LXV8LXRdIFtmaWxlfC1dCiAgICAgICAgLWQsIC11OiBkZWNvZGUKICAgICAgICAtZTogZW5jb2RlIChkZWZhdWx0KQogICAgICAgIC10OiBlbmNvZGUgYW5kIGRlY29kZSBzdHJpbmcgJ0FsYWRkaW46b3BlbiBzZXNhbWUnIiIiJXN5cy5hcmd2WzBdKQogICAgICAgIHN5cy5leGl0KDIpCiAgICBmdW5jID0gZW5jb2RlCiAgICBmb3IgbywgYSBpbiBvcHRzOgogICAgICAgIGlmIG8gPT0gJy1lJzogZnVuYyA9IGVuY29kZQogICAgICAgIGlmIG8gPT0gJy1kJzogZnVuYyA9IGRlY29kZQogICAgICAgIGlmIG8gPT0gJy11JzogZnVuYyA9IGRlY29kZQogICAgICAgIGlmIG8gPT0gJy10JzogdGVzdCgpOyByZXR1cm4KICAgIGlmIGFyZ3MgYW5kIGFyZ3NbMF0gIT0gJy0nOgogICAgICAgIHdpdGggb3BlbihhcmdzWzBdLCAncmInKSBhcyBmOgogICAgICAgICAgICBmdW5jKGYsIHN5cy5zdGRvdXQuYnVmZmVyKQogICAgZWxzZToKICAgICAgICBmdW5jKHN5cy5zdGRpbi5idWZmZXIsIHN5cy5zdGRvdXQuYnVmZmVyKQoKCmRlZiB0ZXN0KCk6CiAgICBzMCA9IGIiQWxhZGRpbjpvcGVuIHNlc2FtZSIKICAgIHByaW50KHJlcHIoczApKQogICAgczEgPSBlbmNvZGVieXRlcyhzMCkKICAgIHByaW50KHJlcHIoczEpKQogICAgczIgPSBkZWNvZGVieXRlcyhzMSkKICAgIHByaW50KHJlcHIoczIpKQogICAgYXNzZXJ0IHMwID09IHMyCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIG1haW4oKQo=',
'/Lib/binascii.py':'IiIiQSBwdXJlIFB5dGhvbiBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hc2NpaS4KClJhdGhlciBzbG93IGFuZCBidWdneSBpbiBjb3JuZXIgY2FzZXMuClB5UHkgcHJvdmlkZXMgYW4gUlB5dGhvbiB2ZXJzaW9uIHRvby4KIiIiCgojIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly9iaXRidWNrZXQub3JnL3B5cHkvcHlweS9zcmMvZjJiZjk0OTQzYTQxL2xpYl9weXB5L2JpbmFzY2lpLnB5CgpjbGFzcyBFcnJvcihFeGNlcHRpb24pOgogICAgcGFzcwoKY2xhc3MgRG9uZShFeGNlcHRpb24pOgogICAgcGFzcwoKY2xhc3MgSW5jb21wbGV0ZShFeGNlcHRpb24pOgogICAgcGFzcwoKZGVmIGEyYl91dShzKToKICAgIGlmIG5vdCBzOgogICAgICAgIHJldHVybiAnJwogICAgCiAgICBsZW5ndGggPSAob3JkKHNbMF0pIC0gMHgyMCkgJSA2NAoKICAgIGRlZiBxdWFkcnVwbGV0c19nZW4ocyk6CiAgICAgICAgd2hpbGUgczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgeWllbGQgb3JkKHNbMF0pLCBvcmQoc1sxXSksIG9yZChzWzJdKSwgb3JkKHNbM10pCiAgICAgICAgICAgIGV4Y2VwdCBJbmRleEVycm9yOgogICAgICAgICAgICAgICAgcyArPSAnICAgJwogICAgICAgICAgICAgICAgeWllbGQgb3JkKHNbMF0pLCBvcmQoc1sxXSksIG9yZChzWzJdKSwgb3JkKHNbM10pCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgcyA9IHNbNDpdCgogICAgdHJ5OgogICAgICAgIHJlc3VsdCA9IFsnJy5qb2luKAogICAgICAgICAgICBbY2hyKChBIC0gMHgyMCkgPDwgMiB8ICgoKEIgLSAweDIwKSA+PiA0KSAmIDB4MykpLAogICAgICAgICAgICBjaHIoKChCIC0gMHgyMCkgJiAweGYpIDw8IDQgfCAoKChDIC0gMHgyMCkgPj4gMikgJiAweGYpKSwKICAgICAgICAgICAgY2hyKCgoQyAtIDB4MjApICYgMHgzKSA8PCA2IHwgKChEIC0gMHgyMCkgJiAweDNmKSkKICAgICAgICAgICAgXSkgZm9yIEEsIEIsIEMsIEQgaW4gcXVhZHJ1cGxldHNfZ2VuKHNbMTpdLnJzdHJpcCgpKV0KICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIHJhaXNlIEVycm9yKCdJbGxlZ2FsIGNoYXInKQogICAgcmVzdWx0ID0gJycuam9pbihyZXN1bHQpCiAgICB0cmFpbGluZ2RhdGEgPSByZXN1bHRbbGVuZ3RoOl0KICAgIGlmIHRyYWlsaW5nZGF0YS5zdHJpcCgnXHgwMCcpOgogICAgICAgIHJhaXNlIEVycm9yKCdUcmFpbGluZyBnYXJiYWdlJykKICAgIHJlc3VsdCA9IHJlc3VsdFs6bGVuZ3RoXQogICAgaWYgbGVuKHJlc3VsdCkgPCBsZW5ndGg6CiAgICAgICAgcmVzdWx0ICs9ICgobGVuZ3RoIC0gbGVuKHJlc3VsdCkpICogJ1x4MDAnKQogICAgcmV0dXJuIHJlc3VsdAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIApkZWYgYjJhX3V1KHMpOgogICAgbGVuZ3RoID0gbGVuKHMpCiAgICBpZiBsZW5ndGggPiA0NToKICAgICAgICByYWlzZSBFcnJvcignQXQgbW9zdCA0NSBieXRlcyBhdCBvbmNlJykKCiAgICBkZWYgdHJpcGxlc19nZW4ocyk6CiAgICAgICAgd2hpbGUgczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgeWllbGQgb3JkKHNbMF0pLCBvcmQoc1sxXSksIG9yZChzWzJdKQogICAgICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgICAgIHMgKz0gJ1wwXDAnCiAgICAgICAgICAgICAgICB5aWVsZCBvcmQoc1swXSksIG9yZChzWzFdKSwgb3JkKHNbMl0pCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgcyA9IHNbMzpdCgogICAgcmVzdWx0ID0gWycnLmpvaW4oCiAgICAgICAgW2NocigweDIwICsgKCggQSA+PiAyICAgICAgICAgICAgICAgICAgICApICYgMHgzRikpLAogICAgICAgICBjaHIoMHgyMCArICgoKEEgPDwgNCkgfCAoKEIgPj4gNCkgJiAweEYpKSAmIDB4M0YpKSwKICAgICAgICAgY2hyKDB4MjAgKyAoKChCIDw8IDIpIHwgKChDID4+IDYpICYgMHgzKSkgJiAweDNGKSksCiAgICAgICAgIGNocigweDIwICsgKCggQyAgICAgICAgICAgICAgICAgICAgICAgICApICYgMHgzRikpXSkKICAgICAgICAgICAgICBmb3IgQSwgQiwgQyBpbiB0cmlwbGVzX2dlbihzKV0KICAgIHJldHVybiBjaHIob3JkKCcgJykgKyAobGVuZ3RoICYgMDc3KSkgKyAnJy5qb2luKHJlc3VsdCkgKyAnXG4nCgoKdGFibGVfYTJiX2Jhc2U2NCA9IHsKICAgICdBJzogMCwKICAgICdCJzogMSwKICAgICdDJzogMiwKICAgICdEJzogMywKICAgICdFJzogNCwKICAgICdGJzogNSwKICAgICdHJzogNiwKICAgICdIJzogNywKICAgICdJJzogOCwKICAgICdKJzogOSwKICAgICdLJzogMTAsCiAgICAnTCc6IDExLAogICAgJ00nOiAxMiwKICAgICdOJzogMTMsCiAgICAnTyc6IDE0LAogICAgJ1AnOiAxNSwKICAgICdRJzogMTYsCiAgICAnUic6IDE3LAogICAgJ1MnOiAxOCwKICAgICdUJzogMTksCiAgICAnVSc6IDIwLAogICAgJ1YnOiAyMSwKICAgICdXJzogMjIsCiAgICAnWCc6IDIzLAogICAgJ1knOiAyNCwKICAgICdaJzogMjUsCiAgICAnYSc6IDI2LAogICAgJ2InOiAyNywKICAgICdjJzogMjgsCiAgICAnZCc6IDI5LAogICAgJ2UnOiAzMCwKICAgICdmJzogMzEsCiAgICAnZyc6IDMyLAogICAgJ2gnOiAzMywKICAgICdpJzogMzQsCiAgICAnaic6IDM1LAogICAgJ2snOiAzNiwKICAgICdsJzogMzcsCiAgICAnbSc6IDM4LAogICAgJ24nOiAzOSwKICAgICdvJzogNDAsCiAgICAncCc6IDQxLAogICAgJ3EnOiA0MiwKICAgICdyJzogNDMsCiAgICAncyc6IDQ0LAogICAgJ3QnOiA0NSwKICAgICd1JzogNDYsCiAgICAndic6IDQ3LAogICAgJ3cnOiA0OCwKICAgICd4JzogNDksCiAgICAneSc6IDUwLAogICAgJ3onOiA1MSwKICAgICcwJzogNTIsCiAgICAnMSc6IDUzLAogICAgJzInOiA1NCwKICAgICczJzogNTUsCiAgICAnNCc6IDU2LAogICAgJzUnOiA1NywKICAgICc2JzogNTgsCiAgICAnNyc6IDU5LAogICAgJzgnOiA2MCwKICAgICc5JzogNjEsCiAgICAnKyc6IDYyLAogICAgJy8nOiA2MywKICAgICc9JzogMCwKfQoKCmRlZiBhMmJfYmFzZTY0KHMpOgogICAgaWYgbm90IGlzaW5zdGFuY2UocywgKHN0ciwgdW5pY29kZSkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZXhwZWN0ZWQgc3RyaW5nIG9yIHVuaWNvZGUsIGdvdCAlciIgJSAocywpKQogICAgcyA9IHMucnN0cmlwKCkKICAgICMgY2xlYW4gb3V0IGFsbCBpbnZhbGlkIGNoYXJhY3RlcnMsIHRoaXMgYWxzbyBzdHJpcHMgdGhlIGZpbmFsICc9JyBwYWRkaW5nCiAgICAjIGNoZWNrIGZvciBjb3JyZWN0IHBhZGRpbmcKCiAgICBkZWYgbmV4dF92YWxpZF9jaGFyKHMsIHBvcyk6CiAgICAgICAgZm9yIGkgaW4gcmFuZ2UocG9zICsgMSwgbGVuKHMpKToKICAgICAgICAgICAgYyA9IHNbaV0KICAgICAgICAgICAgaWYgYyA8ICdceDdmJzoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB0YWJsZV9hMmJfYmFzZTY0W2NdCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMKICAgICAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgcmV0dXJuIE5vbmUKICAgIAogICAgcXVhZF9wb3MgPSAwCiAgICBsZWZ0Yml0cyA9IDAKICAgIGxlZnRjaGFyID0gMAogICAgcmVzID0gW10KICAgIGZvciBpLCBjIGluIGVudW1lcmF0ZShzKToKICAgICAgICBpZiBjID4gJ1x4N2YnIG9yIGMgPT0gJ1xuJyBvciBjID09ICdccicgb3IgYyA9PSAnICc6CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgYyA9PSAnPSc6CiAgICAgICAgICAgIGlmIHF1YWRfcG9zIDwgMiBvciAocXVhZF9wb3MgPT0gMiBhbmQgbmV4dF92YWxpZF9jaGFyKHMsIGkpICE9ICc9Jyk6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbGVmdGJpdHMgPSAwCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIHRyeToKICAgICAgICAgICAgbmV4dF9jID0gdGFibGVfYTJiX2Jhc2U2NFtjXQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgY29udGludWUKICAgICAgICBxdWFkX3BvcyA9IChxdWFkX3BvcyArIDEpICYgMHgwMwogICAgICAgIGxlZnRjaGFyID0gKGxlZnRjaGFyIDw8IDYpIHwgbmV4dF9jCiAgICAgICAgbGVmdGJpdHMgKz0gNgogICAgICAgIGlmIGxlZnRiaXRzID49IDg6CiAgICAgICAgICAgIGxlZnRiaXRzIC09IDgKICAgICAgICAgICAgcmVzLmFwcGVuZCgobGVmdGNoYXIgPj4gbGVmdGJpdHMgJiAweGZmKSkKICAgICAgICAgICAgbGVmdGNoYXIgJj0gKCgxIDw8IGxlZnRiaXRzKSAtIDEpCiAgICBpZiBsZWZ0Yml0cyAhPSAwOgogICAgICAgIHJhaXNlIEVycm9yKCdJbmNvcnJlY3QgcGFkZGluZycpCiAgICAKICAgIHJldHVybiAnJy5qb2luKFtjaHIoaSkgZm9yIGkgaW4gcmVzXSkKICAgIAp0YWJsZV9iMmFfYmFzZTY0ID0gXAoiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyIKCmRlZiBiMmFfYmFzZTY0KHMpOgogICAgbGVuZ3RoID0gbGVuKHMpCiAgICBmaW5hbF9sZW5ndGggPSBsZW5ndGggJSAzCgogICAgZGVmIHRyaXBsZXNfZ2VuKHMpOgogICAgICAgIHdoaWxlIHM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHlpZWxkIG9yZChzWzBdKSwgb3JkKHNbMV0pLCBvcmQoc1syXSkKICAgICAgICAgICAgZXhjZXB0IEluZGV4RXJyb3I6CiAgICAgICAgICAgICAgICBzICs9ICdcMFwwJwogICAgICAgICAgICAgICAgeWllbGQgb3JkKHNbMF0pLCBvcmQoc1sxXSksIG9yZChzWzJdKQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIHMgPSBzWzM6XQoKICAgIAogICAgYSA9IHRyaXBsZXNfZ2VuKHNbIDpsZW5ndGggLSBmaW5hbF9sZW5ndGhdKQoKICAgIHJlc3VsdCA9IFsnJy5qb2luKAogICAgICAgIFt0YWJsZV9iMmFfYmFzZTY0WyggQSA+PiAyICAgICAgICAgICAgICAgICAgICApICYgMHgzRl0sCiAgICAgICAgIHRhYmxlX2IyYV9iYXNlNjRbKChBIDw8IDQpIHwgKChCID4+IDQpICYgMHhGKSkgJiAweDNGXSwKICAgICAgICAgdGFibGVfYjJhX2Jhc2U2NFsoKEIgPDwgMikgfCAoKEMgPj4gNikgJiAweDMpKSAmIDB4M0ZdLAogICAgICAgICB0YWJsZV9iMmFfYmFzZTY0WyggQyAgICAgICAgICAgICAgICAgICAgICAgICApICYgMHgzRl1dKQogICAgICAgICAgICAgIGZvciBBLCBCLCBDIGluIGFdCgogICAgZmluYWwgPSBzW2xlbmd0aCAtIGZpbmFsX2xlbmd0aDpdCiAgICBpZiBmaW5hbF9sZW5ndGggPT0gMDoKICAgICAgICBzbmlwcGV0ID0gJycKICAgIGVsaWYgZmluYWxfbGVuZ3RoID09IDE6CiAgICAgICAgYSA9IG9yZChmaW5hbFswXSkKICAgICAgICBzbmlwcGV0ID0gdGFibGVfYjJhX2Jhc2U2NFsoYSA+PiAyICkgJiAweDNGXSArIFwKICAgICAgICAgICAgICAgICAgdGFibGVfYjJhX2Jhc2U2NFsoYSA8PCA0ICkgJiAweDNGXSArICc9PScKICAgIGVsc2U6CiAgICAgICAgYSA9IG9yZChmaW5hbFswXSkKICAgICAgICBiID0gb3JkKGZpbmFsWzFdKQogICAgICAgIHNuaXBwZXQgPSB0YWJsZV9iMmFfYmFzZTY0WyhhID4+IDIpICYgMHgzRl0gKyBcCiAgICAgICAgICAgICAgICAgIHRhYmxlX2IyYV9iYXNlNjRbKChhIDw8IDQpIHwgKGIgPj4gNCkgJiAweEYpICYgMHgzRl0gKyBcCiAgICAgICAgICAgICAgICAgIHRhYmxlX2IyYV9iYXNlNjRbKGIgPDwgMikgJiAweDNGXSArICc9JwogICAgcmV0dXJuICcnLmpvaW4ocmVzdWx0KSArIHNuaXBwZXQgKyAnXG4nCgpkZWYgYTJiX3FwKHMsIGhlYWRlcj1GYWxzZSk6CiAgICBpbnAgPSAwCiAgICBvZGF0YSA9IFtdCiAgICB3aGlsZSBpbnAgPCBsZW4ocyk6CiAgICAgICAgaWYgc1tpbnBdID09ICc9JzoKICAgICAgICAgICAgaW5wICs9IDEKICAgICAgICAgICAgaWYgaW5wID49IGxlbihzKToKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICMgU29mdCBsaW5lIGJyZWFrcwogICAgICAgICAgICBpZiAoc1tpbnBdID09ICdcbicpIG9yIChzW2lucF0gPT0gJ1xyJyk6CiAgICAgICAgICAgICAgICBpZiBzW2lucF0gIT0gJ1xuJzoKICAgICAgICAgICAgICAgICAgICB3aGlsZSBpbnAgPCBsZW4ocykgYW5kIHNbaW5wXSAhPSAnXG4nOgogICAgICAgICAgICAgICAgICAgICAgICBpbnAgKz0gMQogICAgICAgICAgICAgICAgaWYgaW5wIDwgbGVuKHMpOgogICAgICAgICAgICAgICAgICAgIGlucCArPSAxCiAgICAgICAgICAgIGVsaWYgc1tpbnBdID09ICc9JzoKICAgICAgICAgICAgICAgICMgYnJva2VuIGNhc2UgZnJvbSBicm9rZW4gcHl0aG9uIHFwCiAgICAgICAgICAgICAgICBvZGF0YS5hcHBlbmQoJz0nKQogICAgICAgICAgICAgICAgaW5wICs9IDEKICAgICAgICAgICAgZWxpZiBzW2lucF0gaW4gaGV4X251bWJlcnMgYW5kIHNbaW5wICsgMV0gaW4gaGV4X251bWJlcnM6CiAgICAgICAgICAgICAgICBjaCA9IGNocihpbnQoc1tpbnA6aW5wKzJdLCAxNikpCiAgICAgICAgICAgICAgICBpbnAgKz0gMgogICAgICAgICAgICAgICAgb2RhdGEuYXBwZW5kKGNoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgb2RhdGEuYXBwZW5kKCc9JykKICAgICAgICBlbGlmIGhlYWRlciBhbmQgc1tpbnBdID09ICdfJzoKICAgICAgICAgICAgb2RhdGEuYXBwZW5kKCcgJykKICAgICAgICAgICAgaW5wICs9IDEKICAgICAgICBlbHNlOgogICAgICAgICAgICBvZGF0YS5hcHBlbmQoc1tpbnBdKQogICAgICAgICAgICBpbnAgKz0gMQogICAgcmV0dXJuICcnLmpvaW4ob2RhdGEpCgpkZWYgYjJhX3FwKGRhdGEsIHF1b3RldGFicz1GYWxzZSwgaXN0ZXh0PVRydWUsIGhlYWRlcj1GYWxzZSk6CiAgICAiIiJxdW90ZXRhYnM9VHJ1ZSBtZWFucyB0aGF0IHRhYiBhbmQgc3BhY2UgY2hhcmFjdGVycyBhcmUgYWx3YXlzCiAgICAgICBxdW90ZWQuCiAgICAgICBpc3RleHQ9RmFsc2UgbWVhbnMgdGhhdCBcciBhbmQgXG4gYXJlIHRyZWF0ZWQgYXMgcmVndWxhciBjaGFyYWN0ZXJzCiAgICAgICBoZWFkZXI9VHJ1ZSBlbmNvZGVzIHNwYWNlIGNoYXJhY3RlcnMgd2l0aCAnXycgYW5kIHJlcXVpcmVzCiAgICAgICByZWFsICdfJyBjaGFyYWN0ZXJzIHRvIGJlIHF1b3RlZC4KICAgICIiIgogICAgTUFYTElORVNJWkUgPSA3NgoKICAgICMgU2VlIGlmIHRoaXMgc3RyaW5nIGlzIHVzaW5nIENSTEYgbGluZSBlbmRzCiAgICBsZiA9IGRhdGEuZmluZCgnXG4nKQogICAgY3JsZiA9IGxmID4gMCBhbmQgZGF0YVtsZi0xXSA9PSAnXHInCgogICAgaW5wID0gMAogICAgbGluZWxlbiA9IDAKICAgIG9kYXRhID0gW10KICAgIHdoaWxlIGlucCA8IGxlbihkYXRhKToKICAgICAgICBjID0gZGF0YVtpbnBdCiAgICAgICAgaWYgKGMgPiAnficgb3IKICAgICAgICAgICAgYyA9PSAnPScgb3IKICAgICAgICAgICAgKGhlYWRlciBhbmQgYyA9PSAnXycpIG9yCiAgICAgICAgICAgIChjID09ICcuJyBhbmQgbGluZWxlbiA9PSAwIGFuZCAoaW5wKzEgPT0gbGVuKGRhdGEpIG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtpbnArMV0gPT0gJ1xuJyBvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbaW5wKzFdID09ICdccicpKSBvcgogICAgICAgICAgICAobm90IGlzdGV4dCBhbmQgKGMgPT0gJ1xyJyBvciBjID09ICdcbicpKSBvcgogICAgICAgICAgICAoKGMgPT0gJ1x0JyBvciBjID09ICcgJykgYW5kIChpbnAgKyAxID09IGxlbihkYXRhKSkpIG9yCiAgICAgICAgICAgIChjIDw9ICcgJyBhbmQgYyAhPSAnXHInIGFuZCBjICE9ICdcbicgYW5kCiAgICAgICAgICAgICAocXVvdGV0YWJzIG9yIChub3QgcXVvdGV0YWJzIGFuZCAoYyAhPSAnXHQnIGFuZCBjICE9ICcgJykpKSkpOgogICAgICAgICAgICBsaW5lbGVuICs9IDMKICAgICAgICAgICAgaWYgbGluZWxlbiA+PSBNQVhMSU5FU0laRToKICAgICAgICAgICAgICAgIG9kYXRhLmFwcGVuZCgnPScpCiAgICAgICAgICAgICAgICBpZiBjcmxmOiBvZGF0YS5hcHBlbmQoJ1xyJykKICAgICAgICAgICAgICAgIG9kYXRhLmFwcGVuZCgnXG4nKQogICAgICAgICAgICAgICAgbGluZWxlbiA9IDMKICAgICAgICAgICAgb2RhdGEuYXBwZW5kKCc9JyArIHR3b19oZXhfZGlnaXRzKG9yZChjKSkpCiAgICAgICAgICAgIGlucCArPSAxCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgKGlzdGV4dCBhbmQKICAgICAgICAgICAgICAgIChjID09ICdcbicgb3IgKGlucCsxIDwgbGVuKGRhdGEpIGFuZCBjID09ICdccicgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2lucCsxXSA9PSAnXG4nKSkpOgogICAgICAgICAgICAgICAgbGluZWxlbiA9IDAKICAgICAgICAgICAgICAgICMgUHJvdGVjdCBhZ2FpbnN0IHdoaXRlc3BhY2Ugb24gZW5kIG9mIGxpbmUKICAgICAgICAgICAgICAgIGlmIChsZW4ob2RhdGEpID4gMCBhbmQKICAgICAgICAgICAgICAgICAgICAob2RhdGFbLTFdID09ICcgJyBvciBvZGF0YVstMV0gPT0gJ1x0JykpOgogICAgICAgICAgICAgICAgICAgIGNoID0gb3JkKG9kYXRhWy0xXSkKICAgICAgICAgICAgICAgICAgICBvZGF0YVstMV0gPSAnPScKICAgICAgICAgICAgICAgICAgICBvZGF0YS5hcHBlbmQodHdvX2hleF9kaWdpdHMoY2gpKQoKICAgICAgICAgICAgICAgIGlmIGNybGY6IG9kYXRhLmFwcGVuZCgnXHInKQogICAgICAgICAgICAgICAgb2RhdGEuYXBwZW5kKCdcbicpCiAgICAgICAgICAgICAgICBpZiBjID09ICdccic6CiAgICAgICAgICAgICAgICAgICAgaW5wICs9IDIKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgaW5wICs9IDEKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIChpbnAgKyAxIDwgbGVuKGRhdGEpIGFuZAogICAgICAgICAgICAgICAgICAgIGRhdGFbaW5wKzFdICE9ICdcbicgYW5kCiAgICAgICAgICAgICAgICAgICAgKGxpbmVsZW4gKyAxKSA+PSBNQVhMSU5FU0laRSk6CiAgICAgICAgICAgICAgICAgICAgb2RhdGEuYXBwZW5kKCc9JykKICAgICAgICAgICAgICAgICAgICBpZiBjcmxmOiBvZGF0YS5hcHBlbmQoJ1xyJykKICAgICAgICAgICAgICAgICAgICBvZGF0YS5hcHBlbmQoJ1xuJykKICAgICAgICAgICAgICAgICAgICBsaW5lbGVuID0gMAoKICAgICAgICAgICAgICAgIGxpbmVsZW4gKz0gMQogICAgICAgICAgICAgICAgaWYgaGVhZGVyIGFuZCBjID09ICcgJzoKICAgICAgICAgICAgICAgICAgICBjID0gJ18nCiAgICAgICAgICAgICAgICBvZGF0YS5hcHBlbmQoYykKICAgICAgICAgICAgICAgIGlucCArPSAxCiAgICByZXR1cm4gJycuam9pbihvZGF0YSkKCmhleF9udW1iZXJzID0gJzAxMjM0NTY3ODlBQkNERUYnCmRlZiBoZXgobik6CiAgICBpZiBuID09IDA6CiAgICAgICAgcmV0dXJuICcwJwogICAgCiAgICBpZiBuIDwgMDoKICAgICAgICBuID0gLW4KICAgICAgICBzaWduID0gJy0nCiAgICBlbHNlOgogICAgICAgIHNpZ24gPSAnJwogICAgYXJyID0gW10KCiAgICBkZWYgaGV4X2dlbihuKToKICAgICAgICAiIiIgWWllbGQgYSBuaWJibGUgYXQgYSB0aW1lLiAiIiIKICAgICAgICB3aGlsZSBuOgogICAgICAgICAgICB5aWVsZCBuICUgMHgxMAogICAgICAgICAgICBuID0gbiAvIDB4MTAKCiAgICBmb3IgbmliYmxlIGluIGhleF9nZW4obik6CiAgICAgICAgYXJyID0gW2hleF9udW1iZXJzW25pYmJsZV1dICsgYXJyCiAgICByZXR1cm4gc2lnbiArICcnLmpvaW4oYXJyKQoKZGVmIHR3b19oZXhfZGlnaXRzKG4pOgogICAgcmV0dXJuIGhleF9udW1iZXJzW24gLyAweDEwXSArIGhleF9udW1iZXJzW24gJSAweDEwXQogICAgCgpkZWYgc3RyaGV4X3RvX2ludChzKToKICAgIGkgPSAwCiAgICBmb3IgYyBpbiBzOgogICAgICAgIGkgPSBpICogMHgxMCArIGhleF9udW1iZXJzLmluZGV4KGMpCiAgICByZXR1cm4gaQoKaHF4X2VuY29kaW5nID0gJyEiIyQlJlwnKCkqKywtMDEyMzQ1Njg5QEFCQ0RFRkdISUpLTE1OUFFSU1RVVlhZWltgYWJjZGVmaGlqa2xtcHFyJwoKRE9ORSA9IDB4N2YKU0tJUCA9IDB4N2UKRkFJTCA9IDB4N2QKICAgIAp0YWJsZV9hMmJfaHF4ID0gWwogICAgI15AICAgIF5BICAgIF5CICAgIF5DICAgIF5EICAgIF5FICAgIF5GICAgIF5HICAgCiAgICBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLAogICAgI1xiICAgIFx0ICAgIFxuICAgIF5LICAgIF5MICAgIFxyICAgIF5OICAgIF5PICAgCiAgICBGQUlMLCBGQUlMLCBTS0lQLCBGQUlMLCBGQUlMLCBTS0lQLCBGQUlMLCBGQUlMLAogICAgI15QICAgIF5RICAgIF5SICAgIF5TICAgIF5UICAgIF5VICAgIF5WICAgIF5XICAgCiAgICBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLAogICAgI15YICAgIF5ZICAgIF5aICAgIF5bICAgIF5cICAgIF5dICAgIF5eICAgIF5fICAgCiAgICBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLAogICAgIyAgICAgICEgICAgICIgICAgICMgICAgICQgICAgICUgICAgICYgICAgICcgICAKICAgIEZBSUwsIDB4MDAsIDB4MDEsIDB4MDIsIDB4MDMsIDB4MDQsIDB4MDUsIDB4MDYsCiAgICAjKCAgICAgKSAgICAgKiAgICAgKyAgICAgLCAgICAgLSAgICAgLiAgICAgLyAgIAogICAgMHgwNywgMHgwOCwgMHgwOSwgMHgwQSwgMHgwQiwgMHgwQywgRkFJTCwgRkFJTCwKICAgICMwICAgICAxICAgICAyICAgICAzICAgICA0ICAgICA1ICAgICA2ICAgICA3ICAgCiAgICAweDBELCAweDBFLCAweDBGLCAweDEwLCAweDExLCAweDEyLCAweDEzLCBGQUlMLAogICAgIzggICAgIDkgICAgIDogICAgIDsgICAgIDwgICAgID0gICAgID4gICAgID8gICAKICAgIDB4MTQsIDB4MTUsIERPTkUsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsCiAgICAjQCAgICAgQSAgICAgQiAgICAgQyAgICAgRCAgICAgRSAgICAgRiAgICAgRyAgIAogICAgMHgxNiwgMHgxNywgMHgxOCwgMHgxOSwgMHgxQSwgMHgxQiwgMHgxQywgMHgxRCwKICAgICNIICAgICBJICAgICBKICAgICBLICAgICBMICAgICBNICAgICBOICAgICBPICAgCiAgICAweDFFLCAweDFGLCAweDIwLCAweDIxLCAweDIyLCAweDIzLCAweDI0LCBGQUlMLAogICAgI1AgICAgIFEgICAgIFIgICAgIFMgICAgIFQgICAgIFUgICAgIFYgICAgIFcgICAKICAgIDB4MjUsIDB4MjYsIDB4MjcsIDB4MjgsIDB4MjksIDB4MkEsIDB4MkIsIEZBSUwsCiAgICAjWCAgICAgWSAgICAgWiAgICAgWyAgICAgXCAgICAgXSAgICAgXiAgICAgXyAgIAogICAgMHgyQywgMHgyRCwgMHgyRSwgMHgyRiwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwKICAgICNgICAgICBhICAgICBiICAgICBjICAgICBkICAgICBlICAgICBmICAgICBnICAgCiAgICAweDMwLCAweDMxLCAweDMyLCAweDMzLCAweDM0LCAweDM1LCAweDM2LCBGQUlMLAogICAgI2ggICAgIGkgICAgIGogICAgIGsgICAgIGwgICAgIG0gICAgIG4gICAgIG8gICAKICAgIDB4MzcsIDB4MzgsIDB4MzksIDB4M0EsIDB4M0IsIDB4M0MsIEZBSUwsIEZBSUwsCiAgICAjcCAgICAgcSAgICAgciAgICAgcyAgICAgdCAgICAgdSAgICAgdiAgICAgdyAgIAogICAgMHgzRCwgMHgzRSwgMHgzRiwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwKICAgICN4ICAgICB5ICAgICB6ICAgICB7ICAgICB8ICAgICB9ICAgICB+ICAgIF4/ICAgCiAgICBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLAogICAgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwKICAgIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsCiAgICBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLAogICAgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwKICAgIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsCiAgICBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLAogICAgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwKICAgIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsCiAgICBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLAogICAgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwKICAgIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsCiAgICBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLAogICAgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwKICAgIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsIEZBSUwsCiAgICBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLCBGQUlMLAogICAgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwgRkFJTCwKXQoKZGVmIGEyYl9ocXgocyk6CiAgICByZXN1bHQgPSBbXQoKICAgIGRlZiBxdWFkcnVwbGVzX2dlbihzKToKICAgICAgICB0ID0gW10KICAgICAgICBmb3IgYyBpbiBzOgogICAgICAgICAgICByZXMgPSB0YWJsZV9hMmJfaHF4W29yZChjKV0KICAgICAgICAgICAgaWYgcmVzID09IFNLSVA6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBlbGlmIHJlcyA9PSBGQUlMOgogICAgICAgICAgICAgICAgcmFpc2UgRXJyb3IoJ0lsbGVnYWwgY2hhcmFjdGVyJykKICAgICAgICAgICAgZWxpZiByZXMgPT0gRE9ORToKICAgICAgICAgICAgICAgIHlpZWxkIHQKICAgICAgICAgICAgICAgIHJhaXNlIERvbmUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHQuYXBwZW5kKHJlcykKICAgICAgICAgICAgaWYgbGVuKHQpID09IDQ6CiAgICAgICAgICAgICAgICB5aWVsZCB0CiAgICAgICAgICAgICAgICB0ID0gW10KICAgICAgICB5aWVsZCB0CiAgICAgICAgCiAgICBkb25lID0gMAogICAgdHJ5OgogICAgICAgIGZvciBzbmlwcGV0IGluIHF1YWRydXBsZXNfZ2VuKHMpOgogICAgICAgICAgICBsZW5ndGggPSBsZW4oc25pcHBldCkKICAgICAgICAgICAgaWYgbGVuZ3RoID09IDQ6CiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKGNocigoKHNuaXBwZXRbMF0gJiAweDNmKSA8PCAyKSB8IChzbmlwcGV0WzFdID4+IDQpKSkgCiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKGNocigoKHNuaXBwZXRbMV0gJiAweDBmKSA8PCA0KSB8IChzbmlwcGV0WzJdID4+IDIpKSkgCiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKGNocigoKHNuaXBwZXRbMl0gJiAweDAzKSA8PCA2KSB8IChzbmlwcGV0WzNdKSkpIAogICAgICAgICAgICBlbGlmIGxlbmd0aCA9PSAzOgogICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChjaHIoKChzbmlwcGV0WzBdICYgMHgzZikgPDwgMikgfCAoc25pcHBldFsxXSA+PiA0KSkpIAogICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChjaHIoKChzbmlwcGV0WzFdICYgMHgwZikgPDwgNCkgfCAoc25pcHBldFsyXSA+PiAyKSkpIAogICAgICAgICAgICBlbGlmIGxlbmd0aCA9PSAyOgogICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChjaHIoKChzbmlwcGV0WzBdICYgMHgzZikgPDwgMikgfCAoc25pcHBldFsxXSA+PiA0KSkpIAogICAgZXhjZXB0IERvbmU6CiAgICAgICAgZG9uZSA9IDEKICAgIGV4Y2VwdCBFcnJvcjoKICAgICAgICByYWlzZQogICAgcmV0dXJuICgnJy5qb2luKHJlc3VsdCksIGRvbmUpCgpkZWYgYjJhX2hxeChzKToKICAgIHJlc3VsdCA9W10KCiAgICBkZWYgdHJpcGxlc19nZW4ocyk6CiAgICAgICAgd2hpbGUgczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgeWllbGQgb3JkKHNbMF0pLCBvcmQoc1sxXSksIG9yZChzWzJdKQogICAgICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgICAgIHlpZWxkIHR1cGxlKFtvcmQoYykgZm9yIGMgaW4gc10pCiAgICAgICAgICAgIHMgPSBzWzM6XQoKICAgIGZvciBzbmlwcGV0IGluIHRyaXBsZXNfZ2VuKHMpOgogICAgICAgIGxlbmd0aCA9IGxlbihzbmlwcGV0KQogICAgICAgIGlmIGxlbmd0aCA9PSAzOgogICAgICAgICAgICByZXN1bHQuYXBwZW5kKAogICAgICAgICAgICAgICAgaHF4X2VuY29kaW5nWyhzbmlwcGV0WzBdICYgMHhmYykgPj4gMl0pCiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoaHF4X2VuY29kaW5nWwogICAgICAgICAgICAgICAgKChzbmlwcGV0WzBdICYgMHgwMykgPDwgNCkgfCAoKHNuaXBwZXRbMV0gJiAweGYwKSA+PiA0KV0pCiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoaHF4X2VuY29kaW5nWwogICAgICAgICAgICAgICAgKHNuaXBwZXRbMV0gJiAweDBmKSA8PCAyIHwgKChzbmlwcGV0WzJdICYgMHhjMCkgPj4gNildKQogICAgICAgICAgICByZXN1bHQuYXBwZW5kKGhxeF9lbmNvZGluZ1tzbmlwcGV0WzJdICYgMHgzZl0pCiAgICAgICAgZWxpZiBsZW5ndGggPT0gMjoKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCgKICAgICAgICAgICAgICAgIGhxeF9lbmNvZGluZ1soc25pcHBldFswXSAmIDB4ZmMpID4+IDJdKQogICAgICAgICAgICByZXN1bHQuYXBwZW5kKGhxeF9lbmNvZGluZ1sKICAgICAgICAgICAgICAgICgoc25pcHBldFswXSAmIDB4MDMpIDw8IDQpIHwgKChzbmlwcGV0WzFdICYgMHhmMCkgPj4gNCldKQogICAgICAgICAgICByZXN1bHQuYXBwZW5kKGhxeF9lbmNvZGluZ1sKICAgICAgICAgICAgICAgIChzbmlwcGV0WzFdICYgMHgwZikgPDwgMl0pCiAgICAgICAgZWxpZiBsZW5ndGggPT0gMToKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCgKICAgICAgICAgICAgICAgIGhxeF9lbmNvZGluZ1soc25pcHBldFswXSAmIDB4ZmMpID4+IDJdKQogICAgICAgICAgICByZXN1bHQuYXBwZW5kKGhxeF9lbmNvZGluZ1sKICAgICAgICAgICAgICAgICgoc25pcHBldFswXSAmIDB4MDMpIDw8IDQpXSkKICAgIHJldHVybiAnJy5qb2luKHJlc3VsdCkKCmNyY3RhYl9ocXggPSBbCiAgICAgICAgMHgwMDAwLCAweDEwMjEsIDB4MjA0MiwgMHgzMDYzLCAweDQwODQsIDB4NTBhNSwgMHg2MGM2LCAweDcwZTcsCiAgICAgICAgMHg4MTA4LCAweDkxMjksIDB4YTE0YSwgMHhiMTZiLCAweGMxOGMsIDB4ZDFhZCwgMHhlMWNlLCAweGYxZWYsCiAgICAgICAgMHgxMjMxLCAweDAyMTAsIDB4MzI3MywgMHgyMjUyLCAweDUyYjUsIDB4NDI5NCwgMHg3MmY3LCAweDYyZDYsCiAgICAgICAgMHg5MzM5LCAweDgzMTgsIDB4YjM3YiwgMHhhMzVhLCAweGQzYmQsIDB4YzM5YywgMHhmM2ZmLCAweGUzZGUsCiAgICAgICAgMHgyNDYyLCAweDM0NDMsIDB4MDQyMCwgMHgxNDAxLCAweDY0ZTYsIDB4NzRjNywgMHg0NGE0LCAweDU0ODUsCiAgICAgICAgMHhhNTZhLCAweGI1NGIsIDB4ODUyOCwgMHg5NTA5LCAweGU1ZWUsIDB4ZjVjZiwgMHhjNWFjLCAweGQ1OGQsCiAgICAgICAgMHgzNjUzLCAweDI2NzIsIDB4MTYxMSwgMHgwNjMwLCAweDc2ZDcsIDB4NjZmNiwgMHg1Njk1LCAweDQ2YjQsCiAgICAgICAgMHhiNzViLCAweGE3N2EsIDB4OTcxOSwgMHg4NzM4LCAweGY3ZGYsIDB4ZTdmZSwgMHhkNzlkLCAweGM3YmMsCiAgICAgICAgMHg0OGM0LCAweDU4ZTUsIDB4Njg4NiwgMHg3OGE3LCAweDA4NDAsIDB4MTg2MSwgMHgyODAyLCAweDM4MjMsCiAgICAgICAgMHhjOWNjLCAweGQ5ZWQsIDB4ZTk4ZSwgMHhmOWFmLCAweDg5NDgsIDB4OTk2OSwgMHhhOTBhLCAweGI5MmIsCiAgICAgICAgMHg1YWY1LCAweDRhZDQsIDB4N2FiNywgMHg2YTk2LCAweDFhNzEsIDB4MGE1MCwgMHgzYTMzLCAweDJhMTIsCiAgICAgICAgMHhkYmZkLCAweGNiZGMsIDB4ZmJiZiwgMHhlYjllLCAweDliNzksIDB4OGI1OCwgMHhiYjNiLCAweGFiMWEsCiAgICAgICAgMHg2Y2E2LCAweDdjODcsIDB4NGNlNCwgMHg1Y2M1LCAweDJjMjIsIDB4M2MwMywgMHgwYzYwLCAweDFjNDEsCiAgICAgICAgMHhlZGFlLCAweGZkOGYsIDB4Y2RlYywgMHhkZGNkLCAweGFkMmEsIDB4YmQwYiwgMHg4ZDY4LCAweDlkNDksCiAgICAgICAgMHg3ZTk3LCAweDZlYjYsIDB4NWVkNSwgMHg0ZWY0LCAweDNlMTMsIDB4MmUzMiwgMHgxZTUxLCAweDBlNzAsCiAgICAgICAgMHhmZjlmLCAweGVmYmUsIDB4ZGZkZCwgMHhjZmZjLCAweGJmMWIsIDB4YWYzYSwgMHg5ZjU5LCAweDhmNzgsCiAgICAgICAgMHg5MTg4LCAweDgxYTksIDB4YjFjYSwgMHhhMWViLCAweGQxMGMsIDB4YzEyZCwgMHhmMTRlLCAweGUxNmYsCiAgICAgICAgMHgxMDgwLCAweDAwYTEsIDB4MzBjMiwgMHgyMGUzLCAweDUwMDQsIDB4NDAyNSwgMHg3MDQ2LCAweDYwNjcsCiAgICAgICAgMHg4M2I5LCAweDkzOTgsIDB4YTNmYiwgMHhiM2RhLCAweGMzM2QsIDB4ZDMxYywgMHhlMzdmLCAweGYzNWUsCiAgICAgICAgMHgwMmIxLCAweDEyOTAsIDB4MjJmMywgMHgzMmQyLCAweDQyMzUsIDB4NTIxNCwgMHg2Mjc3LCAweDcyNTYsCiAgICAgICAgMHhiNWVhLCAweGE1Y2IsIDB4OTVhOCwgMHg4NTg5LCAweGY1NmUsIDB4ZTU0ZiwgMHhkNTJjLCAweGM1MGQsCiAgICAgICAgMHgzNGUyLCAweDI0YzMsIDB4MTRhMCwgMHgwNDgxLCAweDc0NjYsIDB4NjQ0NywgMHg1NDI0LCAweDQ0MDUsCiAgICAgICAgMHhhN2RiLCAweGI3ZmEsIDB4ODc5OSwgMHg5N2I4LCAweGU3NWYsIDB4Zjc3ZSwgMHhjNzFkLCAweGQ3M2MsCiAgICAgICAgMHgyNmQzLCAweDM2ZjIsIDB4MDY5MSwgMHgxNmIwLCAweDY2NTcsIDB4NzY3NiwgMHg0NjE1LCAweDU2MzQsCiAgICAgICAgMHhkOTRjLCAweGM5NmQsIDB4ZjkwZSwgMHhlOTJmLCAweDk5YzgsIDB4ODllOSwgMHhiOThhLCAweGE5YWIsCiAgICAgICAgMHg1ODQ0LCAweDQ4NjUsIDB4NzgwNiwgMHg2ODI3LCAweDE4YzAsIDB4MDhlMSwgMHgzODgyLCAweDI4YTMsCiAgICAgICAgMHhjYjdkLCAweGRiNWMsIDB4ZWIzZiwgMHhmYjFlLCAweDhiZjksIDB4OWJkOCwgMHhhYmJiLCAweGJiOWEsCiAgICAgICAgMHg0YTc1LCAweDVhNTQsIDB4NmEzNywgMHg3YTE2LCAweDBhZjEsIDB4MWFkMCwgMHgyYWIzLCAweDNhOTIsCiAgICAgICAgMHhmZDJlLCAweGVkMGYsIDB4ZGQ2YywgMHhjZDRkLCAweGJkYWEsIDB4YWQ4YiwgMHg5ZGU4LCAweDhkYzksCiAgICAgICAgMHg3YzI2LCAweDZjMDcsIDB4NWM2NCwgMHg0YzQ1LCAweDNjYTIsIDB4MmM4MywgMHgxY2UwLCAweDBjYzEsCiAgICAgICAgMHhlZjFmLCAweGZmM2UsIDB4Y2Y1ZCwgMHhkZjdjLCAweGFmOWIsIDB4YmZiYSwgMHg4ZmQ5LCAweDlmZjgsCiAgICAgICAgMHg2ZTE3LCAweDdlMzYsIDB4NGU1NSwgMHg1ZTc0LCAweDJlOTMsIDB4M2ViMiwgMHgwZWQxLCAweDFlZjAsCl0KCmRlZiBjcmNfaHF4KHMsIGNyYyk6CiAgICBmb3IgYyBpbiBzOgogICAgICAgIGNyYyA9ICgoY3JjIDw8IDgpICYgMHhmZjAwKSBeIGNyY3RhYl9ocXhbKChjcmMgPj4gOCkgJiAweGZmKSBeIG9yZChjKV0KCiAgICByZXR1cm4gY3JjCgpkZWYgcmxlY29kZV9ocXgocyk6CiAgICAiIiIKICAgIFJ1biBsZW5ndGggZW5jb2RpbmcgZm9yIGJpbmhleDQuCiAgICBUaGUgQ1B5dGhvbiBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdCBkbyBydW4gbGVuZ3RoIGVuY29kaW5nCiAgICBvZiBceDkwIGNoYXJhY3RlcnMuIFRoaXMgaW1wbGVtZW50YXRpb24gZG9lcy4KICAgICIiIgogICAgaWYgbm90IHM6CiAgICAgICAgcmV0dXJuICcnCiAgICByZXN1bHQgPSBbXQogICAgcHJldiA9IHNbMF0KICAgIGNvdW50ID0gMQogICAgIyBBZGQgYSBkdW1teSBjaGFyYWN0ZXIgdG8gZ2V0IHRoZSBsb29wIHRvIGdvIG9uZSBleHRyYSByb3VuZC4KICAgICMgVGhlIGR1bW15IG11c3QgYmUgZGlmZmVyZW50IGZyb20gdGhlIGxhc3QgY2hhcmFjdGVyIG9mIHMuCiAgICAjIEluIHRoZSBzYW1lIHN0ZXAgd2UgcmVtb3ZlIHRoZSBmaXJzdCBjaGFyYWN0ZXIsIHdoaWNoIGhhcwogICAgIyBhbHJlYWR5IGJlZW4gc3RvcmVkIGluIHByZXYuCiAgICBpZiBzWy0xXSA9PSAnISc6CiAgICAgICAgcyA9IHNbMTpdICsgJz8nCiAgICBlbHNlOgogICAgICAgIHMgPSBzWzE6XSArICchJwogICAgICAgIAogICAgZm9yIGMgaW4gczoKICAgICAgICBpZiBjID09IHByZXYgYW5kIGNvdW50IDwgMjU1OgogICAgICAgICAgICBjb3VudCArPSAxCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgY291bnQgPT0gMToKICAgICAgICAgICAgICAgIGlmIHByZXYgIT0gJ1x4OTAnOgogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQocHJldikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmV4dGVuZChbJ1x4OTAnLCAnXHgwMCddKQogICAgICAgICAgICBlbGlmIGNvdW50IDwgNDoKICAgICAgICAgICAgICAgIGlmIHByZXYgIT0gJ1x4OTAnOgogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5leHRlbmQoW3ByZXZdICogY291bnQpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5leHRlbmQoWydceDkwJywgJ1x4MDAnXSAqIGNvdW50KQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgcHJldiAhPSAnXHg5MCc6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmV4dGVuZChbcHJldiwgJ1x4OTAnLCBjaHIoY291bnQpXSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmV4dGVuZChbJ1x4OTAnLCAnXHgwMCcsICdceDkwJywgY2hyKGNvdW50KV0pIAogICAgICAgICAgICBjb3VudCA9IDEKICAgICAgICAgICAgcHJldiA9IGMKICAgICAgICAKICAgIHJldHVybiAnJy5qb2luKHJlc3VsdCkKCmRlZiBybGVkZWNvZGVfaHF4KHMpOgogICAgcyA9IHMuc3BsaXQoJ1x4OTAnKQogICAgcmVzdWx0ID0gW3NbMF1dCiAgICBwcmV2ID0gc1swXQogICAgZm9yIHNuaXBwZXQgaW4gc1sxOl06CiAgICAgICAgY291bnQgPSBvcmQoc25pcHBldFswXSkKICAgICAgICBpZiBjb3VudCA+IDA6CiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQocHJldlstMV0gKiAoY291bnQtMSkpCiAgICAgICAgICAgIHByZXYgPSBzbmlwcGV0CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCgnXHg5MCcpCiAgICAgICAgICAgIHByZXYgPSAnXHg5MCcKICAgICAgICByZXN1bHQuYXBwZW5kKHNuaXBwZXRbMTpdKQoKICAgIHJldHVybiAnJy5qb2luKHJlc3VsdCkKCmNyY18zMl90YWIgPSBbCiAgICAweDAwMDAwMDAwLCAweDc3MDczMDk2LCAweGVlMGU2MTJjLCAweDk5MDk1MWJhLCAweDA3NmRjNDE5LAogICAgMHg3MDZhZjQ4ZiwgMHhlOTYzYTUzNSwgMHg5ZTY0OTVhMywgMHgwZWRiODgzMiwgMHg3OWRjYjhhNCwKICAgIDB4ZTBkNWU5MWUsIDB4OTdkMmQ5ODgsIDB4MDliNjRjMmIsIDB4N2ViMTdjYmQsIDB4ZTdiODJkMDcsCiAgICAweDkwYmYxZDkxLCAweDFkYjcxMDY0LCAweDZhYjAyMGYyLCAweGYzYjk3MTQ4LCAweDg0YmU0MWRlLAogICAgMHgxYWRhZDQ3ZCwgMHg2ZGRkZTRlYiwgMHhmNGQ0YjU1MSwgMHg4M2QzODVjNywgMHgxMzZjOTg1NiwKICAgIDB4NjQ2YmE4YzAsIDB4ZmQ2MmY5N2EsIDB4OGE2NWM5ZWMsIDB4MTQwMTVjNGYsIDB4NjMwNjZjZDksCiAgICAweGZhMGYzZDYzLCAweDhkMDgwZGY1LCAweDNiNmUyMGM4LCAweDRjNjkxMDVlLCAweGQ1NjA0MWU0LAogICAgMHhhMjY3NzE3MiwgMHgzYzAzZTRkMSwgMHg0YjA0ZDQ0NywgMHhkMjBkODVmZCwgMHhhNTBhYjU2YiwKICAgIDB4MzViNWE4ZmEsIDB4NDJiMjk4NmMsIDB4ZGJiYmM5ZDYsIDB4YWNiY2Y5NDAsIDB4MzJkODZjZTMsCiAgICAweDQ1ZGY1Yzc1LCAweGRjZDYwZGNmLCAweGFiZDEzZDU5LCAweDI2ZDkzMGFjLCAweDUxZGUwMDNhLAogICAgMHhjOGQ3NTE4MCwgMHhiZmQwNjExNiwgMHgyMWI0ZjRiNSwgMHg1NmIzYzQyMywgMHhjZmJhOTU5OSwKICAgIDB4YjhiZGE1MGYsIDB4MjgwMmI4OWUsIDB4NWYwNTg4MDgsIDB4YzYwY2Q5YjIsIDB4YjEwYmU5MjQsCiAgICAweDJmNmY3Yzg3LCAweDU4Njg0YzExLCAweGMxNjExZGFiLCAweGI2NjYyZDNkLCAweDc2ZGM0MTkwLAogICAgMHgwMWRiNzEwNiwgMHg5OGQyMjBiYywgMHhlZmQ1MTAyYSwgMHg3MWIxODU4OSwgMHgwNmI2YjUxZiwKICAgIDB4OWZiZmU0YTUsIDB4ZThiOGQ0MzMsIDB4NzgwN2M5YTIsIDB4MGYwMGY5MzQsIDB4OTYwOWE4OGUsCiAgICAweGUxMGU5ODE4LCAweDdmNmEwZGJiLCAweDA4NmQzZDJkLCAweDkxNjQ2Yzk3LCAweGU2NjM1YzAxLAogICAgMHg2YjZiNTFmNCwgMHgxYzZjNjE2MiwgMHg4NTY1MzBkOCwgMHhmMjYyMDA0ZSwgMHg2YzA2OTVlZCwKICAgIDB4MWIwMWE1N2IsIDB4ODIwOGY0YzEsIDB4ZjUwZmM0NTcsIDB4NjViMGQ5YzYsIDB4MTJiN2U5NTAsCiAgICAweDhiYmViOGVhLCAweGZjYjk4ODdjLCAweDYyZGQxZGRmLCAweDE1ZGEyZDQ5LCAweDhjZDM3Y2YzLAogICAgMHhmYmQ0NGM2NSwgMHg0ZGIyNjE1OCwgMHgzYWI1NTFjZSwgMHhhM2JjMDA3NCwgMHhkNGJiMzBlMiwKICAgIDB4NGFkZmE1NDEsIDB4M2RkODk1ZDcsIDB4YTRkMWM0NmQsIDB4ZDNkNmY0ZmIsIDB4NDM2OWU5NmEsCiAgICAweDM0NmVkOWZjLCAweGFkNjc4ODQ2LCAweGRhNjBiOGQwLCAweDQ0MDQyZDczLCAweDMzMDMxZGU1LAogICAgMHhhYTBhNGM1ZiwgMHhkZDBkN2NjOSwgMHg1MDA1NzEzYywgMHgyNzAyNDFhYSwgMHhiZTBiMTAxMCwKICAgIDB4YzkwYzIwODYsIDB4NTc2OGI1MjUsIDB4MjA2Zjg1YjMsIDB4Yjk2NmQ0MDksIDB4Y2U2MWU0OWYsCiAgICAweDVlZGVmOTBlLCAweDI5ZDljOTk4LCAweGIwZDA5ODIyLCAweGM3ZDdhOGI0LCAweDU5YjMzZDE3LAogICAgMHgyZWI0MGQ4MSwgMHhiN2JkNWMzYiwgMHhjMGJhNmNhZCwgMHhlZGI4ODMyMCwgMHg5YWJmYjNiNiwKICAgIDB4MDNiNmUyMGMsIDB4NzRiMWQyOWEsIDB4ZWFkNTQ3MzksIDB4OWRkMjc3YWYsIDB4MDRkYjI2MTUsCiAgICAweDczZGMxNjgzLCAweGUzNjMwYjEyLCAweDk0NjQzYjg0LCAweDBkNmQ2YTNlLCAweDdhNmE1YWE4LAogICAgMHhlNDBlY2YwYiwgMHg5MzA5ZmY5ZCwgMHgwYTAwYWUyNywgMHg3ZDA3OWViMSwgMHhmMDBmOTM0NCwKICAgIDB4ODcwOGEzZDIsIDB4MWUwMWYyNjgsIDB4NjkwNmMyZmUsIDB4Zjc2MjU3NWQsIDB4ODA2NTY3Y2IsCiAgICAweDE5NmMzNjcxLCAweDZlNmIwNmU3LCAweGZlZDQxYjc2LCAweDg5ZDMyYmUwLCAweDEwZGE3YTVhLAogICAgMHg2N2RkNGFjYywgMHhmOWI5ZGY2ZiwgMHg4ZWJlZWZmOSwgMHgxN2I3YmU0MywgMHg2MGIwOGVkNSwKICAgIDB4ZDZkNmEzZTgsIDB4YTFkMTkzN2UsIDB4MzhkOGMyYzQsIDB4NGZkZmYyNTIsIDB4ZDFiYjY3ZjEsCiAgICAweGE2YmM1NzY3LCAweDNmYjUwNmRkLCAweDQ4YjIzNjRiLCAweGQ4MGQyYmRhLCAweGFmMGExYjRjLAogICAgMHgzNjAzNGFmNiwgMHg0MTA0N2E2MCwgMHhkZjYwZWZjMywgMHhhODY3ZGY1NSwgMHgzMTZlOGVlZiwKICAgIDB4NDY2OWJlNzksIDB4Y2I2MWIzOGMsIDB4YmM2NjgzMWEsIDB4MjU2ZmQyYTAsIDB4NTI2OGUyMzYsCiAgICAweGNjMGM3Nzk1LCAweGJiMGI0NzAzLCAweDIyMDIxNmI5LCAweDU1MDUyNjJmLCAweGM1YmEzYmJlLAogICAgMHhiMmJkMGIyOCwgMHgyYmI0NWE5MiwgMHg1Y2IzNmEwNCwgMHhjMmQ3ZmZhNywgMHhiNWQwY2YzMSwKICAgIDB4MmNkOTllOGIsIDB4NWJkZWFlMWQsIDB4OWI2NGMyYjAsIDB4ZWM2M2YyMjYsIDB4NzU2YWEzOWMsCiAgICAweDAyNmQ5MzBhLCAweDljMDkwNmE5LCAweGViMGUzNjNmLCAweDcyMDc2Nzg1LCAweDA1MDA1NzEzLAogICAgMHg5NWJmNGE4MiwgMHhlMmI4N2ExNCwgMHg3YmIxMmJhZSwgMHgwY2I2MWIzOCwgMHg5MmQyOGU5YiwKICAgIDB4ZTVkNWJlMGQsIDB4N2NkY2VmYjcsIDB4MGJkYmRmMjEsIDB4ODZkM2QyZDQsIDB4ZjFkNGUyNDIsCiAgICAweDY4ZGRiM2Y4LCAweDFmZGE4MzZlLCAweDgxYmUxNmNkLCAweGY2YjkyNjViLCAweDZmYjA3N2UxLAogICAgMHgxOGI3NDc3NywgMHg4ODA4NWFlNiwgMHhmZjBmNmE3MCwgMHg2NjA2M2JjYSwgMHgxMTAxMGI1YywKICAgIDB4OGY2NTllZmYsIDB4Zjg2MmFlNjksIDB4NjE2YmZmZDMsIDB4MTY2Y2NmNDUsIDB4YTAwYWUyNzgsCiAgICAweGQ3MGRkMmVlLCAweDRlMDQ4MzU0LCAweDM5MDNiM2MyLCAweGE3NjcyNjYxLCAweGQwNjAxNmY3LAogICAgMHg0OTY5NDc0ZCwgMHgzZTZlNzdkYiwgMHhhZWQxNmE0YSwgMHhkOWQ2NWFkYywgMHg0MGRmMGI2NiwKICAgIDB4MzdkODNiZjAsIDB4YTliY2FlNTMsIDB4ZGViYjllYzUsIDB4NDdiMmNmN2YsIDB4MzBiNWZmZTksCiAgICAweGJkYmRmMjFjLCAweGNhYmFjMjhhLCAweDUzYjM5MzMwLCAweDI0YjRhM2E2LCAweGJhZDAzNjA1LAogICAgMHhjZGQ3MDY5MywgMHg1NGRlNTcyOSwgMHgyM2Q5NjdiZiwgMHhiMzY2N2EyZSwgMHhjNDYxNGFiOCwKICAgIDB4NWQ2ODFiMDIsIDB4MmE2ZjJiOTQsIDB4YjQwYmJlMzcsIDB4YzMwYzhlYTEsIDB4NWEwNWRmMWIsCiAgICAweDJkMDJlZjhkCl0KCmRlZiBjcmMzMihzLCBjcmM9MCk6CiAgICByZXN1bHQgPSAwCiAgICBjcmMgPSB+aW50KGNyYykgJiAweGZmZmZmZmZmCiAgICAjY3JjID0gfmxvbmcoY3JjKSAmIDB4ZmZmZmZmZmZMCiAgICBmb3IgYyBpbiBzOgogICAgICAgIGNyYyA9IGNyY18zMl90YWJbKGNyYyBeIGludChvcmQoYykpKSAmIDB4ZmZdIF4gKGNyYyA+PiA4KQogICAgICAgICNjcmMgPSBjcmNfMzJfdGFiWyhjcmMgXiBsb25nKG9yZChjKSkpICYgMHhmZkxdIF4gKGNyYyA+PiA4KQogICAgICAgICMvKiBOb3RlOiAgKGNyYyA+PiA4KSBNVVNUIHplcm8gZmlsbCBvbiBsZWZ0CgogICAgcmVzdWx0ID0gY3JjIF4gMHhmZmZmZmZmZgogICAgCiAgICBpZiByZXN1bHQgPiAyKiozMToKICAgICAgICByZXN1bHQgPSAoKHJlc3VsdCArIDIqKjMxKSAlIDIqKjMyKSAtIDIqKjMxCgogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGIyYV9oZXgocyk6CiAgICByZXN1bHQgPSBbXQogICAgZm9yIGNoYXIgaW4gczoKICAgICAgICBjID0gKG9yZChjaGFyKSA+PiA0KSAmIDB4ZgogICAgICAgIGlmIGMgPiA5OgogICAgICAgICAgICBjID0gYyArIG9yZCgnYScpIC0gMTAKICAgICAgICBlbHNlOgogICAgICAgICAgICBjID0gYyArIG9yZCgnMCcpCiAgICAgICAgcmVzdWx0LmFwcGVuZChjaHIoYykpCiAgICAgICAgYyA9IG9yZChjaGFyKSAmIDB4ZgogICAgICAgIGlmIGMgPiA5OgogICAgICAgICAgICBjID0gYyArIG9yZCgnYScpIC0gMTAKICAgICAgICBlbHNlOgogICAgICAgICAgICBjID0gYyArIG9yZCgnMCcpCiAgICAgICAgcmVzdWx0LmFwcGVuZChjaHIoYykpCiAgICByZXR1cm4gJycuam9pbihyZXN1bHQpCgpoZXhsaWZ5ID0gYjJhX2hleAoKdGFibGVfaGV4ID0gWwogICAgLTEsLTEsLTEsLTEsIC0xLC0xLC0xLC0xLCAtMSwtMSwtMSwtMSwgLTEsLTEsLTEsLTEsCiAgICAtMSwtMSwtMSwtMSwgLTEsLTEsLTEsLTEsIC0xLC0xLC0xLC0xLCAtMSwtMSwtMSwtMSwKICAgIC0xLC0xLC0xLC0xLCAtMSwtMSwtMSwtMSwgLTEsLTEsLTEsLTEsIC0xLC0xLC0xLC0xLAogICAgMCwgMSwgMiwgMywgIDQsIDUsIDYsIDcsICA4LCA5LC0xLC0xLCAtMSwtMSwtMSwtMSwKICAgIC0xLDEwLDExLDEyLCAxMywxNCwxNSwtMSwgLTEsLTEsLTEsLTEsIC0xLC0xLC0xLC0xLAogICAgLTEsLTEsLTEsLTEsIC0xLC0xLC0xLC0xLCAtMSwtMSwtMSwtMSwgLTEsLTEsLTEsLTEsCiAgICAtMSwxMCwxMSwxMiwgMTMsMTQsMTUsLTEsIC0xLC0xLC0xLC0xLCAtMSwtMSwtMSwtMSwKICAgIC0xLC0xLC0xLC0xLCAtMSwtMSwtMSwtMSwgLTEsLTEsLTEsLTEsIC0xLC0xLC0xLC0xCl0KCgpkZWYgYTJiX2hleCh0KToKICAgIHJlc3VsdCA9IFtdCgogICAgZGVmIHBhaXJzX2dlbihzKToKICAgICAgICB3aGlsZSBzOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB5aWVsZCB0YWJsZV9oZXhbb3JkKHNbMF0pXSwgdGFibGVfaGV4W29yZChzWzFdKV0KICAgICAgICAgICAgZXhjZXB0IEluZGV4RXJyb3I6CiAgICAgICAgICAgICAgICBpZiBsZW4ocyk6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdPZGQtbGVuZ3RoIHN0cmluZycpCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgcyA9IHNbMjpdCgogICAgZm9yIGEsIGIgaW4gcGFpcnNfZ2VuKHQpOgogICAgICAgIGlmIGEgPCAwIG9yIGIgPCAwOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ05vbi1oZXhhZGVjaW1hbCBkaWdpdCBmb3VuZCcpCiAgICAgICAgcmVzdWx0LmFwcGVuZChjaHIoKGEgPDwgNCkgKyBiKSkKICAgIHJldHVybiAnJy5qb2luKHJlc3VsdCkKICAgIAoKdW5oZXhsaWZ5ID0gYTJiX2hleAo=',
'/Lib/bisect.py':'IiIiQmlzZWN0aW9uIGFsZ29yaXRobXMuIiIiCgpkZWYgaW5zb3J0X3JpZ2h0KGEsIHgsIGxvPTAsIGhpPU5vbmUpOgogICAgIiIiSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBJZiB4IGlzIGFscmVhZHkgaW4gYSwgaW5zZXJ0IGl0IHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgeCA8IGFbbWlkXTogaGkgPSBtaWQKICAgICAgICBlbHNlOiBsbyA9IG1pZCsxCiAgICBhLmluc2VydChsbywgeCkKCmluc29ydCA9IGluc29ydF9yaWdodCAgICMgYmFja3dhcmQgY29tcGF0aWJpbGl0eQoKZGVmIGJpc2VjdF9yaWdodChhLCB4LCBsbz0wLCBoaT1Ob25lKToKICAgICIiIlJldHVybiB0aGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIFRoZSByZXR1cm4gdmFsdWUgaSBpcyBzdWNoIHRoYXQgYWxsIGUgaW4gYVs6aV0gaGF2ZSBlIDw9IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID4geC4gIFNvIGlmIHggYWxyZWFkeSBhcHBlYXJzIGluIHRoZSBsaXN0LCBhLmluc2VydCh4KSB3aWxsCiAgICBpbnNlcnQganVzdCBhZnRlciB0aGUgcmlnaHRtb3N0IHggYWxyZWFkeSB0aGVyZS4KCiAgICBPcHRpb25hbCBhcmdzIGxvIChkZWZhdWx0IDApIGFuZCBoaSAoZGVmYXVsdCBsZW4oYSkpIGJvdW5kIHRoZQogICAgc2xpY2Ugb2YgYSB0byBiZSBzZWFyY2hlZC4KICAgICIiIgoKICAgIGlmIGxvIDwgMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpCiAgICBpZiBoaSBpcyBOb25lOgogICAgICAgIGhpID0gbGVuKGEpCiAgICB3aGlsZSBsbyA8IGhpOgogICAgICAgIG1pZCA9IChsbytoaSkvLzIKICAgICAgICBpZiB4IDwgYVttaWRdOiBoaSA9IG1pZAogICAgICAgIGVsc2U6IGxvID0gbWlkKzEKICAgIHJldHVybiBsbwoKYmlzZWN0ID0gYmlzZWN0X3JpZ2h0ICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CgpkZWYgaW5zb3J0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJJbnNlcnQgaXRlbSB4IGluIGxpc3QgYSwgYW5kIGtlZXAgaXQgc29ydGVkIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIGxlZnQgb2YgdGhlIGxlZnRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICBhLmluc2VydChsbywgeCkKCgpkZWYgYmlzZWN0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJSZXR1cm4gdGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBUaGUgcmV0dXJuIHZhbHVlIGkgaXMgc3VjaCB0aGF0IGFsbCBlIGluIGFbOmldIGhhdmUgZSA8IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID49IHguICBTbyBpZiB4IGFscmVhZHkgYXBwZWFycyBpbiB0aGUgbGlzdCwgYS5pbnNlcnQoeCkgd2lsbAogICAgaW5zZXJ0IGp1c3QgYmVmb3JlIHRoZSBsZWZ0bW9zdCB4IGFscmVhZHkgdGhlcmUuCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICByZXR1cm4gbG8KCiMgZG9udCcgbmVlZCB0aGlzIGZvciBicnl0aG9uCiMgT3ZlcndyaXRlIGFib3ZlIGRlZmluaXRpb25zIHdpdGggYSBmYXN0IEMgaW1wbGVtZW50YXRpb24KI3RyeToKIyAgICBmcm9tIF9iaXNlY3QgaW1wb3J0ICoKI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgICBwYXNzCg==',
'/Lib/calendar.py':'',
'/Lib/codecs.py':'',
'/Lib/colorsys.py':'IiIiQ29udmVyc2lvbiBmdW5jdGlvbnMgYmV0d2VlbiBSR0IgYW5kIG90aGVyIGNvbG9yIHN5c3RlbXMuCgpUaGlzIG1vZHVsZXMgcHJvdmlkZXMgdHdvIGZ1bmN0aW9ucyBmb3IgZWFjaCBjb2xvciBzeXN0ZW0gQUJDOgoKICByZ2JfdG9fYWJjKHIsIGcsIGIpIC0tPiBhLCBiLCBjCiAgYWJjX3RvX3JnYihhLCBiLCBjKSAtLT4gciwgZywgYgoKQWxsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgdHJpcGxlcyBvZiBmbG9hdHMgaW4gdGhlIHJhbmdlIFswLjAuLi4xLjBdCih3aXRoIHRoZSBleGNlcHRpb24gb2YgSSBhbmQgUSwgd2hpY2ggY292ZXJzIGEgc2xpZ2h0bHkgbGFyZ2VyIHJhbmdlKS4KSW5wdXRzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIG1heSBjYXVzZSBleGNlcHRpb25zIG9yIGludmFsaWQgb3V0cHV0cy4KClN1cHBvcnRlZCBjb2xvciBzeXN0ZW1zOgpSR0I6IFJlZCwgR3JlZW4sIEJsdWUgY29tcG9uZW50cwpZSVE6IEx1bWluYW5jZSwgQ2hyb21pbmFuY2UgKHVzZWQgYnkgY29tcG9zaXRlIHZpZGVvIHNpZ25hbHMpCkhMUzogSHVlLCBMdW1pbmFuY2UsIFNhdHVyYXRpb24KSFNWOiBIdWUsIFNhdHVyYXRpb24sIFZhbHVlCiIiIgoKIyBSZWZlcmVuY2VzOgojIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUlRCiMgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9ITFNfY29sb3Jfc3BhY2UKIyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTVl9jb2xvcl9zcGFjZQoKX19hbGxfXyA9IFsicmdiX3RvX3lpcSIsInlpcV90b19yZ2IiLCJyZ2JfdG9faGxzIiwiaGxzX3RvX3JnYiIsCiAgICAgICAgICAgInJnYl90b19oc3YiLCJoc3ZfdG9fcmdiIl0KCiMgU29tZSBmbG9hdGluZyBwb2ludCBjb25zdGFudHMKCk9ORV9USElSRCA9IDEuMC8zLjAKT05FX1NJWFRIID0gMS4wLzYuMApUV09fVEhJUkQgPSAyLjAvMy4wCgojIFlJUTogdXNlZCBieSBjb21wb3NpdGUgdmlkZW8gc2lnbmFscyAobGluZWFyIGNvbWJpbmF0aW9ucyBvZiBSR0IpCiMgWTogcGVyY2VpdmVkIGdyZXkgbGV2ZWwgKDAuMCA9PSBibGFjaywgMS4wID09IHdoaXRlKQojIEksIFE6IGNvbG9yIGNvbXBvbmVudHMKCmRlZiByZ2JfdG9feWlxKHIsIGcsIGIpOgogICAgeSA9IDAuMzAqciArIDAuNTkqZyArIDAuMTEqYgogICAgaSA9IDAuNjAqciAtIDAuMjgqZyAtIDAuMzIqYgogICAgcSA9IDAuMjEqciAtIDAuNTIqZyArIDAuMzEqYgogICAgcmV0dXJuICh5LCBpLCBxKQoKZGVmIHlpcV90b19yZ2IoeSwgaSwgcSk6CiAgICByID0geSArIDAuOTQ4MjYyKmkgKyAwLjYyNDAxMypxCiAgICBnID0geSAtIDAuMjc2MDY2KmkgLSAwLjYzOTgxMCpxCiAgICBiID0geSAtIDEuMTA1NDUwKmkgKyAxLjcyOTg2MCpxCiAgICBpZiByIDwgMC4wOgogICAgICAgIHIgPSAwLjAKICAgIGlmIGcgPCAwLjA6CiAgICAgICAgZyA9IDAuMAogICAgaWYgYiA8IDAuMDoKICAgICAgICBiID0gMC4wCiAgICBpZiByID4gMS4wOgogICAgICAgIHIgPSAxLjAKICAgIGlmIGcgPiAxLjA6CiAgICAgICAgZyA9IDEuMAogICAgaWYgYiA+IDEuMDoKICAgICAgICBiID0gMS4wCiAgICByZXR1cm4gKHIsIGcsIGIpCgoKIyBITFM6IEh1ZSwgTHVtaW5hbmNlLCBTYXR1cmF0aW9uCiMgSDogcG9zaXRpb24gaW4gdGhlIHNwZWN0cnVtCiMgTDogY29sb3IgbGlnaHRuZXNzCiMgUzogY29sb3Igc2F0dXJhdGlvbgoKZGVmIHJnYl90b19obHMociwgZywgYik6CiAgICBtYXhjID0gbWF4KHIsIGcsIGIpCiAgICBtaW5jID0gbWluKHIsIGcsIGIpCiAgICAjIFhYWCBDYW4gb3B0aW1pemUgKG1heGMrbWluYykgYW5kIChtYXhjLW1pbmMpCiAgICBsID0gKG1pbmMrbWF4YykvMi4wCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgbCwgMC4wCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAobWF4YyttaW5jKQogICAgZWxzZToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAoMi4wLW1heGMtbWluYykKICAgIHJjID0gKG1heGMtcikgLyAobWF4Yy1taW5jKQogICAgZ2MgPSAobWF4Yy1nKSAvIChtYXhjLW1pbmMpCiAgICBiYyA9IChtYXhjLWIpIC8gKG1heGMtbWluYykKICAgIGlmIHIgPT0gbWF4YzoKICAgICAgICBoID0gYmMtZ2MKICAgIGVsaWYgZyA9PSBtYXhjOgogICAgICAgIGggPSAyLjArcmMtYmMKICAgIGVsc2U6CiAgICAgICAgaCA9IDQuMCtnYy1yYwogICAgaCA9IChoLzYuMCkgJSAxLjAKICAgIHJldHVybiBoLCBsLCBzCgpkZWYgaGxzX3RvX3JnYihoLCBsLCBzKToKICAgIGlmIHMgPT0gMC4wOgogICAgICAgIHJldHVybiBsLCBsLCBsCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBtMiA9IGwgKiAoMS4wK3MpCiAgICBlbHNlOgogICAgICAgIG0yID0gbCtzLShsKnMpCiAgICBtMSA9IDIuMCpsIC0gbTIKICAgIHJldHVybiAoX3YobTEsIG0yLCBoK09ORV9USElSRCksIF92KG0xLCBtMiwgaCksIF92KG0xLCBtMiwgaC1PTkVfVEhJUkQpKQoKZGVmIF92KG0xLCBtMiwgaHVlKToKICAgIGh1ZSA9IGh1ZSAlIDEuMAogICAgaWYgaHVlIDwgT05FX1NJWFRIOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqaHVlKjYuMAogICAgaWYgaHVlIDwgMC41OgogICAgICAgIHJldHVybiBtMgogICAgaWYgaHVlIDwgVFdPX1RISVJEOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqKFRXT19USElSRC1odWUpKjYuMAogICAgcmV0dXJuIG0xCgoKIyBIU1Y6IEh1ZSwgU2F0dXJhdGlvbiwgVmFsdWUKIyBIOiBwb3NpdGlvbiBpbiB0aGUgc3BlY3RydW0KIyBTOiBjb2xvciBzYXR1cmF0aW9uICgicHVyaXR5IikKIyBWOiBjb2xvciBicmlnaHRuZXNzCgpkZWYgcmdiX3RvX2hzdihyLCBnLCBiKToKICAgIG1heGMgPSBtYXgociwgZywgYikKICAgIG1pbmMgPSBtaW4ociwgZywgYikKICAgIHYgPSBtYXhjCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgMC4wLCB2CiAgICBzID0gKG1heGMtbWluYykgLyBtYXhjCiAgICByYyA9IChtYXhjLXIpIC8gKG1heGMtbWluYykKICAgIGdjID0gKG1heGMtZykgLyAobWF4Yy1taW5jKQogICAgYmMgPSAobWF4Yy1iKSAvIChtYXhjLW1pbmMpCiAgICBpZiByID09IG1heGM6CiAgICAgICAgaCA9IGJjLWdjCiAgICBlbGlmIGcgPT0gbWF4YzoKICAgICAgICBoID0gMi4wK3JjLWJjCiAgICBlbHNlOgogICAgICAgIGggPSA0LjArZ2MtcmMKICAgIGggPSAoaC82LjApICUgMS4wCiAgICByZXR1cm4gaCwgcywgdgoKZGVmIGhzdl90b19yZ2IoaCwgcywgdik6CiAgICBpZiBzID09IDAuMDoKICAgICAgICByZXR1cm4gdiwgdiwgdgogICAgaSA9IGludChoKjYuMCkgIyBYWFggYXNzdW1lIGludCgpIHRydW5jYXRlcyEKICAgIGYgPSAoaCo2LjApIC0gaQogICAgcCA9IHYqKDEuMCAtIHMpCiAgICBxID0gdiooMS4wIC0gcypmKQogICAgdCA9IHYqKDEuMCAtIHMqKDEuMC1mKSkKICAgIGkgPSBpJTYKICAgIGlmIGkgPT0gMDoKICAgICAgICByZXR1cm4gdiwgdCwgcAogICAgaWYgaSA9PSAxOgogICAgICAgIHJldHVybiBxLCB2LCBwCiAgICBpZiBpID09IDI6CiAgICAgICAgcmV0dXJuIHAsIHYsIHQKICAgIGlmIGkgPT0gMzoKICAgICAgICByZXR1cm4gcCwgcSwgdgogICAgaWYgaSA9PSA0OgogICAgICAgIHJldHVybiB0LCBwLCB2CiAgICBpZiBpID09IDU6CiAgICAgICAgcmV0dXJuIHYsIHAsIHEKICAgICMgQ2Fubm90IGdldCBoZXJlCg==',
'/Lib/contextlib.py':'',
'/Lib/copy.py':'',
'/Lib/copyreg.py':'',
'/Lib/datetime.py':'',
'/Lib/difflib.py':'IyEgL3Vzci9iaW4vZW52IHB5dGhvbjMKCiIiIgpNb2R1bGUgZGlmZmxpYiAtLSBoZWxwZXJzIGZvciBjb21wdXRpbmcgZGVsdGFzIGJldHdlZW4gb2JqZWN0cy4KCkZ1bmN0aW9uIGdldF9jbG9zZV9tYXRjaGVzKHdvcmQsIHBvc3NpYmlsaXRpZXMsIG49MywgY3V0b2ZmPTAuNik6CiAgICBVc2UgU2VxdWVuY2VNYXRjaGVyIHRvIHJldHVybiBsaXN0IG9mIHRoZSBiZXN0ICJnb29kIGVub3VnaCIgbWF0Y2hlcy4KCkZ1bmN0aW9uIGNvbnRleHRfZGlmZihhLCBiKToKICAgIEZvciB0d28gbGlzdHMgb2Ygc3RyaW5ncywgcmV0dXJuIGEgZGVsdGEgaW4gY29udGV4dCBkaWZmIGZvcm1hdC4KCkZ1bmN0aW9uIG5kaWZmKGEsIGIpOgogICAgUmV0dXJuIGEgZGVsdGE6IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gYGFgIGFuZCBgYmAgKGxpc3RzIG9mIHN0cmluZ3MpLgoKRnVuY3Rpb24gcmVzdG9yZShkZWx0YSwgd2hpY2gpOgogICAgUmV0dXJuIG9uZSBvZiB0aGUgdHdvIHNlcXVlbmNlcyB0aGF0IGdlbmVyYXRlZCBhbiBuZGlmZiBkZWx0YS4KCkZ1bmN0aW9uIHVuaWZpZWRfZGlmZihhLCBiKToKICAgIEZvciB0d28gbGlzdHMgb2Ygc3RyaW5ncywgcmV0dXJuIGEgZGVsdGEgaW4gdW5pZmllZCBkaWZmIGZvcm1hdC4KCkNsYXNzIFNlcXVlbmNlTWF0Y2hlcjoKICAgIEEgZmxleGlibGUgY2xhc3MgZm9yIGNvbXBhcmluZyBwYWlycyBvZiBzZXF1ZW5jZXMgb2YgYW55IHR5cGUuCgpDbGFzcyBEaWZmZXI6CiAgICBGb3IgcHJvZHVjaW5nIGh1bWFuLXJlYWRhYmxlIGRlbHRhcyBmcm9tIHNlcXVlbmNlcyBvZiBsaW5lcyBvZiB0ZXh0LgoKQ2xhc3MgSHRtbERpZmY6CiAgICBGb3IgcHJvZHVjaW5nIEhUTUwgc2lkZSBieSBzaWRlIGNvbXBhcmlzb24gd2l0aCBjaGFuZ2UgaGlnaGxpZ2h0cy4KIiIiCgpfX2FsbF9fID0gWydnZXRfY2xvc2VfbWF0Y2hlcycsICduZGlmZicsICdyZXN0b3JlJywgJ1NlcXVlbmNlTWF0Y2hlcicsCiAgICAgICAgICAgJ0RpZmZlcicsJ0lTX0NIQVJBQ1RFUl9KVU5LJywgJ0lTX0xJTkVfSlVOSycsICdjb250ZXh0X2RpZmYnLAogICAgICAgICAgICd1bmlmaWVkX2RpZmYnLCAnSHRtbERpZmYnLCAnTWF0Y2gnXQoKaW1wb3J0IHdhcm5pbmdzCmltcG9ydCBoZWFwcQpmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBuYW1lZHR1cGxlIGFzIF9uYW1lZHR1cGxlCgpNYXRjaCA9IF9uYW1lZHR1cGxlKCdNYXRjaCcsICdhIGIgc2l6ZScpCgpkZWYgX2NhbGN1bGF0ZV9yYXRpbyhtYXRjaGVzLCBsZW5ndGgpOgogICAgaWYgbGVuZ3RoOgogICAgICAgIHJldHVybiAyLjAgKiBtYXRjaGVzIC8gbGVuZ3RoCiAgICByZXR1cm4gMS4wCgpjbGFzcyBTZXF1ZW5jZU1hdGNoZXI6CgogICAgIiIiCiAgICBTZXF1ZW5jZU1hdGNoZXIgaXMgYSBmbGV4aWJsZSBjbGFzcyBmb3IgY29tcGFyaW5nIHBhaXJzIG9mIHNlcXVlbmNlcyBvZgogICAgYW55IHR5cGUsIHNvIGxvbmcgYXMgdGhlIHNlcXVlbmNlIGVsZW1lbnRzIGFyZSBoYXNoYWJsZS4gIFRoZSBiYXNpYwogICAgYWxnb3JpdGhtIHByZWRhdGVzLCBhbmQgaXMgYSBsaXR0bGUgZmFuY2llciB0aGFuLCBhbiBhbGdvcml0aG0KICAgIHB1Ymxpc2hlZCBpbiB0aGUgbGF0ZSAxOTgwJ3MgYnkgUmF0Y2xpZmYgYW5kIE9iZXJzaGVscCB1bmRlciB0aGUKICAgIGh5cGVyYm9saWMgbmFtZSAiZ2VzdGFsdCBwYXR0ZXJuIG1hdGNoaW5nIi4gIFRoZSBiYXNpYyBpZGVhIGlzIHRvIGZpbmQKICAgIHRoZSBsb25nZXN0IGNvbnRpZ3VvdXMgbWF0Y2hpbmcgc3Vic2VxdWVuY2UgdGhhdCBjb250YWlucyBubyAianVuayIKICAgIGVsZW1lbnRzIChSLU8gZG9lc24ndCBhZGRyZXNzIGp1bmspLiAgVGhlIHNhbWUgaWRlYSBpcyB0aGVuIGFwcGxpZWQKICAgIHJlY3Vyc2l2ZWx5IHRvIHRoZSBwaWVjZXMgb2YgdGhlIHNlcXVlbmNlcyB0byB0aGUgbGVmdCBhbmQgdG8gdGhlIHJpZ2h0CiAgICBvZiB0aGUgbWF0Y2hpbmcgc3Vic2VxdWVuY2UuICBUaGlzIGRvZXMgbm90IHlpZWxkIG1pbmltYWwgZWRpdAogICAgc2VxdWVuY2VzLCBidXQgZG9lcyB0ZW5kIHRvIHlpZWxkIG1hdGNoZXMgdGhhdCAibG9vayByaWdodCIgdG8gcGVvcGxlLgoKICAgIFNlcXVlbmNlTWF0Y2hlciB0cmllcyB0byBjb21wdXRlIGEgImh1bWFuLWZyaWVuZGx5IGRpZmYiIGJldHdlZW4gdHdvCiAgICBzZXF1ZW5jZXMuICBVbmxpa2UgZS5nLiBVTklYKHRtKSBkaWZmLCB0aGUgZnVuZGFtZW50YWwgbm90aW9uIGlzIHRoZQogICAgbG9uZ2VzdCAqY29udGlndW91cyogJiBqdW5rLWZyZWUgbWF0Y2hpbmcgc3Vic2VxdWVuY2UuICBUaGF0J3Mgd2hhdAogICAgY2F0Y2hlcyBwZW9wbGVzJyBleWVzLiAgVGhlIFdpbmRvd3ModG0pIHdpbmRpZmYgaGFzIGFub3RoZXIgaW50ZXJlc3RpbmcKICAgIG5vdGlvbiwgcGFpcmluZyB1cCBlbGVtZW50cyB0aGF0IGFwcGVhciB1bmlxdWVseSBpbiBlYWNoIHNlcXVlbmNlLgogICAgVGhhdCwgYW5kIHRoZSBtZXRob2QgaGVyZSwgYXBwZWFyIHRvIHlpZWxkIG1vcmUgaW50dWl0aXZlIGRpZmZlcmVuY2UKICAgIHJlcG9ydHMgdGhhbiBkb2VzIGRpZmYuICBUaGlzIG1ldGhvZCBhcHBlYXJzIHRvIGJlIHRoZSBsZWFzdCB2dWxuZXJhYmxlCiAgICB0byBzeW5jaGluZyB1cCBvbiBibG9ja3Mgb2YgImp1bmsgbGluZXMiLCB0aG91Z2ggKGxpa2UgYmxhbmsgbGluZXMgaW4KICAgIG9yZGluYXJ5IHRleHQgZmlsZXMsIG9yIG1heWJlICI8UD4iIGxpbmVzIGluIEhUTUwgZmlsZXMpLiAgVGhhdCBtYXkgYmUKICAgIGJlY2F1c2UgdGhpcyBpcyB0aGUgb25seSBtZXRob2Qgb2YgdGhlIDMgdGhhdCBoYXMgYSAqY29uY2VwdCogb2YKICAgICJqdW5rIiA8d2luaz4uCgogICAgRXhhbXBsZSwgY29tcGFyaW5nIHR3byBzdHJpbmdzLCBhbmQgY29uc2lkZXJpbmcgYmxhbmtzIHRvIGJlICJqdW5rIjoKCiAgICA+Pj4gcyA9IFNlcXVlbmNlTWF0Y2hlcihsYW1iZGEgeDogeCA9PSAiICIsCiAgICAuLi4gICAgICAgICAgICAgICAgICAgICAicHJpdmF0ZSBUaHJlYWQgY3VycmVudFRocmVhZDsiLAogICAgLi4uICAgICAgICAgICAgICAgICAgICAgInByaXZhdGUgdm9sYXRpbGUgVGhyZWFkIGN1cnJlbnRUaHJlYWQ7IikKICAgID4+PgoKICAgIC5yYXRpbygpIHJldHVybnMgYSBmbG9hdCBpbiBbMCwgMV0sIG1lYXN1cmluZyB0aGUgInNpbWlsYXJpdHkiIG9mIHRoZQogICAgc2VxdWVuY2VzLiAgQXMgYSBydWxlIG9mIHRodW1iLCBhIC5yYXRpbygpIHZhbHVlIG92ZXIgMC42IG1lYW5zIHRoZQogICAgc2VxdWVuY2VzIGFyZSBjbG9zZSBtYXRjaGVzOgoKICAgID4+PiBwcmludChyb3VuZChzLnJhdGlvKCksIDMpKQogICAgMC44NjYKICAgID4+PgoKICAgIElmIHlvdSdyZSBvbmx5IGludGVyZXN0ZWQgaW4gd2hlcmUgdGhlIHNlcXVlbmNlcyBtYXRjaCwKICAgIC5nZXRfbWF0Y2hpbmdfYmxvY2tzKCkgaXMgaGFuZHk6CgogICAgPj4+IGZvciBibG9jayBpbiBzLmdldF9tYXRjaGluZ19ibG9ja3MoKToKICAgIC4uLiAgICAgcHJpbnQoImFbJWRdIGFuZCBiWyVkXSBtYXRjaCBmb3IgJWQgZWxlbWVudHMiICUgYmxvY2spCiAgICBhWzBdIGFuZCBiWzBdIG1hdGNoIGZvciA4IGVsZW1lbnRzCiAgICBhWzhdIGFuZCBiWzE3XSBtYXRjaCBmb3IgMjEgZWxlbWVudHMKICAgIGFbMjldIGFuZCBiWzM4XSBtYXRjaCBmb3IgMCBlbGVtZW50cwoKICAgIE5vdGUgdGhhdCB0aGUgbGFzdCB0dXBsZSByZXR1cm5lZCBieSAuZ2V0X21hdGNoaW5nX2Jsb2NrcygpIGlzIGFsd2F5cyBhCiAgICBkdW1teSwgKGxlbihhKSwgbGVuKGIpLCAwKSwgYW5kIHRoaXMgaXMgdGhlIG9ubHkgY2FzZSBpbiB3aGljaCB0aGUgbGFzdAogICAgdHVwbGUgZWxlbWVudCAobnVtYmVyIG9mIGVsZW1lbnRzIG1hdGNoZWQpIGlzIDAuCgogICAgSWYgeW91IHdhbnQgdG8ga25vdyBob3cgdG8gY2hhbmdlIHRoZSBmaXJzdCBzZXF1ZW5jZSBpbnRvIHRoZSBzZWNvbmQsCiAgICB1c2UgLmdldF9vcGNvZGVzKCk6CgogICAgPj4+IGZvciBvcGNvZGUgaW4gcy5nZXRfb3Bjb2RlcygpOgogICAgLi4uICAgICBwcmludCgiJTZzIGFbJWQ6JWRdIGJbJWQ6JWRdIiAlIG9wY29kZSkKICAgICBlcXVhbCBhWzA6OF0gYlswOjhdCiAgICBpbnNlcnQgYVs4OjhdIGJbODoxN10KICAgICBlcXVhbCBhWzg6MjldIGJbMTc6MzhdCgogICAgU2VlIHRoZSBEaWZmZXIgY2xhc3MgZm9yIGEgZmFuY3kgaHVtYW4tZnJpZW5kbHkgZmlsZSBkaWZmZXJlbmNlciwgd2hpY2gKICAgIHVzZXMgU2VxdWVuY2VNYXRjaGVyIGJvdGggdG8gY29tcGFyZSBzZXF1ZW5jZXMgb2YgbGluZXMsIGFuZCB0byBjb21wYXJlCiAgICBzZXF1ZW5jZXMgb2YgY2hhcmFjdGVycyB3aXRoaW4gc2ltaWxhciAobmVhci1tYXRjaGluZykgbGluZXMuCgogICAgU2VlIGFsc28gZnVuY3Rpb24gZ2V0X2Nsb3NlX21hdGNoZXMoKSBpbiB0aGlzIG1vZHVsZSwgd2hpY2ggc2hvd3MgaG93CiAgICBzaW1wbGUgY29kZSBidWlsZGluZyBvbiBTZXF1ZW5jZU1hdGNoZXIgY2FuIGJlIHVzZWQgdG8gZG8gdXNlZnVsIHdvcmsuCgogICAgVGltaW5nOiAgQmFzaWMgUi1PIGlzIGN1YmljIHRpbWUgd29yc3QgY2FzZSBhbmQgcXVhZHJhdGljIHRpbWUgZXhwZWN0ZWQKICAgIGNhc2UuICBTZXF1ZW5jZU1hdGNoZXIgaXMgcXVhZHJhdGljIHRpbWUgZm9yIHRoZSB3b3JzdCBjYXNlIGFuZCBoYXMKICAgIGV4cGVjdGVkLWNhc2UgYmVoYXZpb3IgZGVwZW5kZW50IGluIGEgY29tcGxpY2F0ZWQgd2F5IG9uIGhvdyBtYW55CiAgICBlbGVtZW50cyB0aGUgc2VxdWVuY2VzIGhhdmUgaW4gY29tbW9uOyBiZXN0IGNhc2UgdGltZSBpcyBsaW5lYXIuCgogICAgTWV0aG9kczoKCiAgICBfX2luaXRfXyhpc2p1bms9Tm9uZSwgYT0nJywgYj0nJykKICAgICAgICBDb25zdHJ1Y3QgYSBTZXF1ZW5jZU1hdGNoZXIuCgogICAgc2V0X3NlcXMoYSwgYikKICAgICAgICBTZXQgdGhlIHR3byBzZXF1ZW5jZXMgdG8gYmUgY29tcGFyZWQuCgogICAgc2V0X3NlcTEoYSkKICAgICAgICBTZXQgdGhlIGZpcnN0IHNlcXVlbmNlIHRvIGJlIGNvbXBhcmVkLgoKICAgIHNldF9zZXEyKGIpCiAgICAgICAgU2V0IHRoZSBzZWNvbmQgc2VxdWVuY2UgdG8gYmUgY29tcGFyZWQuCgogICAgZmluZF9sb25nZXN0X21hdGNoKGFsbywgYWhpLCBibG8sIGJoaSkKICAgICAgICBGaW5kIGxvbmdlc3QgbWF0Y2hpbmcgYmxvY2sgaW4gYVthbG86YWhpXSBhbmQgYltibG86YmhpXS4KCiAgICBnZXRfbWF0Y2hpbmdfYmxvY2tzKCkKICAgICAgICBSZXR1cm4gbGlzdCBvZiB0cmlwbGVzIGRlc2NyaWJpbmcgbWF0Y2hpbmcgc3Vic2VxdWVuY2VzLgoKICAgIGdldF9vcGNvZGVzKCkKICAgICAgICBSZXR1cm4gbGlzdCBvZiA1LXR1cGxlcyBkZXNjcmliaW5nIGhvdyB0byB0dXJuIGEgaW50byBiLgoKICAgIHJhdGlvKCkKICAgICAgICBSZXR1cm4gYSBtZWFzdXJlIG9mIHRoZSBzZXF1ZW5jZXMnIHNpbWlsYXJpdHkgKGZsb2F0IGluIFswLDFdKS4KCiAgICBxdWlja19yYXRpbygpCiAgICAgICAgUmV0dXJuIGFuIHVwcGVyIGJvdW5kIG9uIC5yYXRpbygpIHJlbGF0aXZlbHkgcXVpY2tseS4KCiAgICByZWFsX3F1aWNrX3JhdGlvKCkKICAgICAgICBSZXR1cm4gYW4gdXBwZXIgYm91bmQgb24gcmF0aW8oKSB2ZXJ5IHF1aWNrbHkuCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgaXNqdW5rPU5vbmUsIGE9JycsIGI9JycsIGF1dG9qdW5rPVRydWUpOgogICAgICAgICIiIkNvbnN0cnVjdCBhIFNlcXVlbmNlTWF0Y2hlci4KCiAgICAgICAgT3B0aW9uYWwgYXJnIGlzanVuayBpcyBOb25lICh0aGUgZGVmYXVsdCksIG9yIGEgb25lLWFyZ3VtZW50CiAgICAgICAgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHNlcXVlbmNlIGVsZW1lbnQgYW5kIHJldHVybnMgdHJ1ZSBpZmYgdGhlCiAgICAgICAgZWxlbWVudCBpcyBqdW5rLiAgTm9uZSBpcyBlcXVpdmFsZW50IHRvIHBhc3NpbmcgImxhbWJkYSB4OiAwIiwgaS5lLgogICAgICAgIG5vIGVsZW1lbnRzIGFyZSBjb25zaWRlcmVkIHRvIGJlIGp1bmsuICBGb3IgZXhhbXBsZSwgcGFzcwogICAgICAgICAgICBsYW1iZGEgeDogeCBpbiAiIFxcdCIKICAgICAgICBpZiB5b3UncmUgY29tcGFyaW5nIGxpbmVzIGFzIHNlcXVlbmNlcyBvZiBjaGFyYWN0ZXJzLCBhbmQgZG9uJ3QKICAgICAgICB3YW50IHRvIHN5bmNoIHVwIG9uIGJsYW5rcyBvciBoYXJkIHRhYnMuCgogICAgICAgIE9wdGlvbmFsIGFyZyBhIGlzIHRoZSBmaXJzdCBvZiB0d28gc2VxdWVuY2VzIHRvIGJlIGNvbXBhcmVkLiAgQnkKICAgICAgICBkZWZhdWx0LCBhbiBlbXB0eSBzdHJpbmcuICBUaGUgZWxlbWVudHMgb2YgYSBtdXN0IGJlIGhhc2hhYmxlLiAgU2VlCiAgICAgICAgYWxzbyAuc2V0X3NlcXMoKSBhbmQgLnNldF9zZXExKCkuCgogICAgICAgIE9wdGlvbmFsIGFyZyBiIGlzIHRoZSBzZWNvbmQgb2YgdHdvIHNlcXVlbmNlcyB0byBiZSBjb21wYXJlZC4gIEJ5CiAgICAgICAgZGVmYXVsdCwgYW4gZW1wdHkgc3RyaW5nLiAgVGhlIGVsZW1lbnRzIG9mIGIgbXVzdCBiZSBoYXNoYWJsZS4gU2VlCiAgICAgICAgYWxzbyAuc2V0X3NlcXMoKSBhbmQgLnNldF9zZXEyKCkuCgogICAgICAgIE9wdGlvbmFsIGFyZyBhdXRvanVuayBzaG91bGQgYmUgc2V0IHRvIEZhbHNlIHRvIGRpc2FibGUgdGhlCiAgICAgICAgImF1dG9tYXRpYyBqdW5rIGhldXJpc3RpYyIgdGhhdCB0cmVhdHMgcG9wdWxhciBlbGVtZW50cyBhcyBqdW5rCiAgICAgICAgKHNlZSBtb2R1bGUgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbikuCiAgICAgICAgIiIiCgogICAgICAgICMgTWVtYmVyczoKICAgICAgICAjIGEKICAgICAgICAjICAgICAgZmlyc3Qgc2VxdWVuY2UKICAgICAgICAjIGIKICAgICAgICAjICAgICAgc2Vjb25kIHNlcXVlbmNlOyBkaWZmZXJlbmNlcyBhcmUgY29tcHV0ZWQgYXMgIndoYXQgZG8KICAgICAgICAjICAgICAgd2UgbmVlZCB0byBkbyB0byAnYScgdG8gY2hhbmdlIGl0IGludG8gJ2InPyIKICAgICAgICAjIGIyagogICAgICAgICMgICAgICBmb3IgeCBpbiBiLCBiMmpbeF0gaXMgYSBsaXN0IG9mIHRoZSBpbmRpY2VzIChpbnRvIGIpCiAgICAgICAgIyAgICAgIGF0IHdoaWNoIHggYXBwZWFyczsganVuayBhbmQgcG9wdWxhciBlbGVtZW50cyBkbyBub3QgYXBwZWFyCiAgICAgICAgIyBmdWxsYmNvdW50CiAgICAgICAgIyAgICAgIGZvciB4IGluIGIsIGZ1bGxiY291bnRbeF0gPT0gdGhlIG51bWJlciBvZiB0aW1lcyB4CiAgICAgICAgIyAgICAgIGFwcGVhcnMgaW4gYjsgb25seSBtYXRlcmlhbGl6ZWQgaWYgcmVhbGx5IG5lZWRlZCAodXNlZAogICAgICAgICMgICAgICBvbmx5IGZvciBjb21wdXRpbmcgcXVpY2tfcmF0aW8oKSkKICAgICAgICAjIG1hdGNoaW5nX2Jsb2NrcwogICAgICAgICMgICAgICBhIGxpc3Qgb2YgKGksIGosIGspIHRyaXBsZXMsIHdoZXJlIGFbaTppK2tdID09IGJbajpqK2tdOwogICAgICAgICMgICAgICBhc2NlbmRpbmcgJiBub24tb3ZlcmxhcHBpbmcgaW4gaSBhbmQgaW4gajsgdGVybWluYXRlZCBieQogICAgICAgICMgICAgICBhIGR1bW15IChsZW4oYSksIGxlbihiKSwgMCkgc2VudGluZWwKICAgICAgICAjIG9wY29kZXMKICAgICAgICAjICAgICAgYSBsaXN0IG9mICh0YWcsIGkxLCBpMiwgajEsIGoyKSB0dXBsZXMsIHdoZXJlIHRhZyBpcwogICAgICAgICMgICAgICBvbmUgb2YKICAgICAgICAjICAgICAgICAgICdyZXBsYWNlJyAgIGFbaTE6aTJdIHNob3VsZCBiZSByZXBsYWNlZCBieSBiW2oxOmoyXQogICAgICAgICMgICAgICAgICAgJ2RlbGV0ZScgICAgYVtpMTppMl0gc2hvdWxkIGJlIGRlbGV0ZWQKICAgICAgICAjICAgICAgICAgICdpbnNlcnQnICAgIGJbajE6ajJdIHNob3VsZCBiZSBpbnNlcnRlZAogICAgICAgICMgICAgICAgICAgJ2VxdWFsJyAgICAgYVtpMTppMl0gPT0gYltqMTpqMl0KICAgICAgICAjIGlzanVuawogICAgICAgICMgICAgICBhIHVzZXItc3VwcGxpZWQgZnVuY3Rpb24gdGFraW5nIGEgc2VxdWVuY2UgZWxlbWVudCBhbmQKICAgICAgICAjICAgICAgcmV0dXJuaW5nIHRydWUgaWZmIHRoZSBlbGVtZW50IGlzICJqdW5rIiAtLSB0aGlzIGhhcwogICAgICAgICMgICAgICBzdWJ0bGUgYnV0IGhlbHBmdWwgZWZmZWN0cyBvbiB0aGUgYWxnb3JpdGhtLCB3aGljaCBJJ2xsCiAgICAgICAgIyAgICAgIGdldCBhcm91bmQgdG8gd3JpdGluZyB1cCBzb21lZGF5IDwwLjkgd2luaz4uCiAgICAgICAgIyAgICAgIERPTidUIFVTRSEgIE9ubHkgX19jaGFpbl9iIHVzZXMgdGhpcy4gIFVzZSAiaW4gc2VsZi5ianVuayIuCiAgICAgICAgIyBianVuawogICAgICAgICMgICAgICB0aGUgaXRlbXMgaW4gYiBmb3Igd2hpY2ggaXNqdW5rIGlzIFRydWUuCiAgICAgICAgIyBicG9wdWxhcgogICAgICAgICMgICAgICBub25qdW5rIGl0ZW1zIGluIGIgdHJlYXRlZCBhcyBqdW5rIGJ5IHRoZSBoZXVyaXN0aWMgKGlmIHVzZWQpLgoKICAgICAgICBzZWxmLmlzanVuayA9IGlzanVuawogICAgICAgIHNlbGYuYSA9IHNlbGYuYiA9IE5vbmUKICAgICAgICBzZWxmLmF1dG9qdW5rID0gYXV0b2p1bmsKICAgICAgICBzZWxmLnNldF9zZXFzKGEsIGIpCgogICAgZGVmIHNldF9zZXFzKHNlbGYsIGEsIGIpOgogICAgICAgICIiIlNldCB0aGUgdHdvIHNlcXVlbmNlcyB0byBiZSBjb21wYXJlZC4KCiAgICAgICAgPj4+IHMgPSBTZXF1ZW5jZU1hdGNoZXIoKQogICAgICAgID4+PiBzLnNldF9zZXFzKCJhYmNkIiwgImJjZGUiKQogICAgICAgID4+PiBzLnJhdGlvKCkKICAgICAgICAwLjc1CiAgICAgICAgIiIiCgogICAgICAgIHNlbGYuc2V0X3NlcTEoYSkKICAgICAgICBzZWxmLnNldF9zZXEyKGIpCgogICAgZGVmIHNldF9zZXExKHNlbGYsIGEpOgogICAgICAgICIiIlNldCB0aGUgZmlyc3Qgc2VxdWVuY2UgdG8gYmUgY29tcGFyZWQuCgogICAgICAgIFRoZSBzZWNvbmQgc2VxdWVuY2UgdG8gYmUgY29tcGFyZWQgaXMgbm90IGNoYW5nZWQuCgogICAgICAgID4+PiBzID0gU2VxdWVuY2VNYXRjaGVyKE5vbmUsICJhYmNkIiwgImJjZGUiKQogICAgICAgID4+PiBzLnJhdGlvKCkKICAgICAgICAwLjc1CiAgICAgICAgPj4+IHMuc2V0X3NlcTEoImJjZGUiKQogICAgICAgID4+PiBzLnJhdGlvKCkKICAgICAgICAxLjAKICAgICAgICA+Pj4KCiAgICAgICAgU2VxdWVuY2VNYXRjaGVyIGNvbXB1dGVzIGFuZCBjYWNoZXMgZGV0YWlsZWQgaW5mb3JtYXRpb24gYWJvdXQgdGhlCiAgICAgICAgc2Vjb25kIHNlcXVlbmNlLCBzbyBpZiB5b3Ugd2FudCB0byBjb21wYXJlIG9uZSBzZXF1ZW5jZSBTIGFnYWluc3QKICAgICAgICBtYW55IHNlcXVlbmNlcywgdXNlIC5zZXRfc2VxMihTKSBvbmNlIGFuZCBjYWxsIC5zZXRfc2VxMSh4KQogICAgICAgIHJlcGVhdGVkbHkgZm9yIGVhY2ggb2YgdGhlIG90aGVyIHNlcXVlbmNlcy4KCiAgICAgICAgU2VlIGFsc28gc2V0X3NlcXMoKSBhbmQgc2V0X3NlcTIoKS4KICAgICAgICAiIiIKCiAgICAgICAgaWYgYSBpcyBzZWxmLmE6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIHNlbGYuYSA9IGEKICAgICAgICBzZWxmLm1hdGNoaW5nX2Jsb2NrcyA9IHNlbGYub3Bjb2RlcyA9IE5vbmUKCiAgICBkZWYgc2V0X3NlcTIoc2VsZiwgYik6CiAgICAgICAgIiIiU2V0IHRoZSBzZWNvbmQgc2VxdWVuY2UgdG8gYmUgY29tcGFyZWQuCgogICAgICAgIFRoZSBmaXJzdCBzZXF1ZW5jZSB0byBiZSBjb21wYXJlZCBpcyBub3QgY2hhbmdlZC4KCiAgICAgICAgPj4+IHMgPSBTZXF1ZW5jZU1hdGNoZXIoTm9uZSwgImFiY2QiLCAiYmNkZSIpCiAgICAgICAgPj4+IHMucmF0aW8oKQogICAgICAgIDAuNzUKICAgICAgICA+Pj4gcy5zZXRfc2VxMigiYWJjZCIpCiAgICAgICAgPj4+IHMucmF0aW8oKQogICAgICAgIDEuMAogICAgICAgID4+PgoKICAgICAgICBTZXF1ZW5jZU1hdGNoZXIgY29tcHV0ZXMgYW5kIGNhY2hlcyBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUKICAgICAgICBzZWNvbmQgc2VxdWVuY2UsIHNvIGlmIHlvdSB3YW50IHRvIGNvbXBhcmUgb25lIHNlcXVlbmNlIFMgYWdhaW5zdAogICAgICAgIG1hbnkgc2VxdWVuY2VzLCB1c2UgLnNldF9zZXEyKFMpIG9uY2UgYW5kIGNhbGwgLnNldF9zZXExKHgpCiAgICAgICAgcmVwZWF0ZWRseSBmb3IgZWFjaCBvZiB0aGUgb3RoZXIgc2VxdWVuY2VzLgoKICAgICAgICBTZWUgYWxzbyBzZXRfc2VxcygpIGFuZCBzZXRfc2VxMSgpLgogICAgICAgICIiIgoKICAgICAgICBpZiBiIGlzIHNlbGYuYjoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgc2VsZi5iID0gYgogICAgICAgIHNlbGYubWF0Y2hpbmdfYmxvY2tzID0gc2VsZi5vcGNvZGVzID0gTm9uZQogICAgICAgIHNlbGYuZnVsbGJjb3VudCA9IE5vbmUKICAgICAgICBzZWxmLl9fY2hhaW5fYigpCgogICAgIyBGb3IgZWFjaCBlbGVtZW50IHggaW4gYiwgc2V0IGIyalt4XSB0byBhIGxpc3Qgb2YgdGhlIGluZGljZXMgaW4KICAgICMgYiB3aGVyZSB4IGFwcGVhcnM7IHRoZSBpbmRpY2VzIGFyZSBpbiBpbmNyZWFzaW5nIG9yZGVyOyBub3RlIHRoYXQKICAgICMgdGhlIG51bWJlciBvZiB0aW1lcyB4IGFwcGVhcnMgaW4gYiBpcyBsZW4oYjJqW3hdKSAuLi4KICAgICMgd2hlbiBzZWxmLmlzanVuayBpcyBkZWZpbmVkLCBqdW5rIGVsZW1lbnRzIGRvbid0IHNob3cgdXAgaW4gdGhpcwogICAgIyBtYXAgYXQgYWxsLCB3aGljaCBzdG9wcyB0aGUgY2VudHJhbCBmaW5kX2xvbmdlc3RfbWF0Y2ggbWV0aG9kCiAgICAjIGZyb20gc3RhcnRpbmcgYW55IG1hdGNoaW5nIGJsb2NrIGF0IGEganVuayBlbGVtZW50IC4uLgogICAgIyBiMmogYWxzbyBkb2VzIG5vdCBjb250YWluIGVudHJpZXMgZm9yICJwb3B1bGFyIiBlbGVtZW50cywgbWVhbmluZwogICAgIyBlbGVtZW50cyB0aGF0IGFjY291bnQgZm9yIG1vcmUgdGhhbiAxICsgMSUgb2YgdGhlIHRvdGFsIGVsZW1lbnRzLCBhbmQKICAgICMgd2hlbiB0aGUgc2VxdWVuY2UgaXMgcmVhc29uYWJseSBsYXJnZSAoPj0gMjAwIGVsZW1lbnRzKTsgdGhpcyBjYW4KICAgICMgYmUgdmlld2VkIGFzIGFuIGFkYXB0aXZlIG5vdGlvbiBvZiBzZW1pLWp1bmssIGFuZCB5aWVsZHMgYW4gZW5vcm1vdXMKICAgICMgc3BlZWR1cCB3aGVuLCBlLmcuLCBjb21wYXJpbmcgcHJvZ3JhbSBmaWxlcyB3aXRoIGh1bmRyZWRzIG9mCiAgICAjIGluc3RhbmNlcyBvZiAicmV0dXJuIE5VTEw7IiAuLi4KICAgICMgbm90ZSB0aGF0IHRoaXMgaXMgb25seSBjYWxsZWQgd2hlbiBiIGNoYW5nZXM7IHNvIGZvciBjcm9zcy1wcm9kdWN0CiAgICAjIGtpbmRzIG9mIG1hdGNoZXMsIGl0J3MgYmVzdCB0byBjYWxsIHNldF9zZXEyIG9uY2UsIHRoZW4gc2V0X3NlcTEKICAgICMgcmVwZWF0ZWRseQoKICAgIGRlZiBfX2NoYWluX2Ioc2VsZik6CiAgICAgICAgIyBCZWNhdXNlIGlzanVuayBpcyBhIHVzZXItZGVmaW5lZCAobm90IEMpIGZ1bmN0aW9uLCBhbmQgd2UgdGVzdAogICAgICAgICMgZm9yIGp1bmsgYSBMT1QsIGl0J3MgaW1wb3J0YW50IHRvIG1pbmltaXplIHRoZSBudW1iZXIgb2YgY2FsbHMuCiAgICAgICAgIyBCZWZvcmUgdGhlIHRyaWNrcyBkZXNjcmliZWQgaGVyZSwgX19jaGFpbl9iIHdhcyBieSBmYXIgdGhlIG1vc3QKICAgICAgICAjIHRpbWUtY29uc3VtaW5nIHJvdXRpbmUgaW4gdGhlIHdob2xlIG1vZHVsZSEgIElmIGFueW9uZSBzZWVzCiAgICAgICAgIyBKaW0gUm9za2luZCwgdGhhbmsgaGltIGFnYWluIGZvciBwcm9maWxlLnB5IC0tIEkgbmV2ZXIgd291bGQKICAgICAgICAjIGhhdmUgZ3Vlc3NlZCB0aGF0LgogICAgICAgICMgVGhlIGZpcnN0IHRyaWNrIGlzIHRvIGJ1aWxkIGIyaiBpZ25vcmluZyB0aGUgcG9zc2liaWxpdHkKICAgICAgICAjIG9mIGp1bmsuICBJLmUuLCB3ZSBkb24ndCBjYWxsIGlzanVuayBhdCBhbGwgeWV0LiAgVGhyb3dpbmcKICAgICAgICAjIG91dCB0aGUganVuayBsYXRlciBpcyBtdWNoIGNoZWFwZXIgdGhhbiBidWlsZGluZyBiMmogInJpZ2h0IgogICAgICAgICMgZnJvbSB0aGUgc3RhcnQuCiAgICAgICAgYiA9IHNlbGYuYgogICAgICAgIHNlbGYuYjJqID0gYjJqID0ge30KCiAgICAgICAgZm9yIGksIGVsdCBpbiBlbnVtZXJhdGUoYik6CiAgICAgICAgICAgIGluZGljZXMgPSBiMmouc2V0ZGVmYXVsdChlbHQsIFtdKQogICAgICAgICAgICBpbmRpY2VzLmFwcGVuZChpKQoKICAgICAgICAjIFB1cmdlIGp1bmsgZWxlbWVudHMKICAgICAgICBzZWxmLmJqdW5rID0ganVuayA9IHNldCgpCiAgICAgICAgaXNqdW5rID0gc2VsZi5pc2p1bmsKICAgICAgICBpZiBpc2p1bms6CiAgICAgICAgICAgIGZvciBlbHQgaW4gYjJqLmtleXMoKToKICAgICAgICAgICAgICAgIGlmIGlzanVuayhlbHQpOgogICAgICAgICAgICAgICAgICAgIGp1bmsuYWRkKGVsdCkKICAgICAgICAgICAgZm9yIGVsdCBpbiBqdW5rOiAjIHNlcGFyYXRlIGxvb3AgYXZvaWRzIHNlcGFyYXRlIGxpc3Qgb2Yga2V5cwogICAgICAgICAgICAgICAgZGVsIGIyaltlbHRdCgogICAgICAgICMgUHVyZ2UgcG9wdWxhciBlbGVtZW50cyB0aGF0IGFyZSBub3QganVuawogICAgICAgIHNlbGYuYnBvcHVsYXIgPSBwb3B1bGFyID0gc2V0KCkKICAgICAgICBuID0gbGVuKGIpCiAgICAgICAgaWYgc2VsZi5hdXRvanVuayBhbmQgbiA+PSAyMDA6CiAgICAgICAgICAgIG50ZXN0ID0gbiAvLyAxMDAgKyAxCiAgICAgICAgICAgIGZvciBlbHQsIGlkeHMgaW4gYjJqLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBpZiBsZW4oaWR4cykgPiBudGVzdDoKICAgICAgICAgICAgICAgICAgICBwb3B1bGFyLmFkZChlbHQpCiAgICAgICAgICAgIGZvciBlbHQgaW4gcG9wdWxhcjogIyBkaXR0bzsgYXMgZmFzdCBmb3IgMSUgZGVsZXRpb24KICAgICAgICAgICAgICAgIGRlbCBiMmpbZWx0XQoKICAgIGRlZiBpc2JqdW5rKHNlbGYsIGl0ZW0pOgogICAgICAgICJEZXByZWNhdGVkOyB1c2UgJ2l0ZW0gaW4gU2VxdWVuY2VNYXRjaGVyKCkuYmp1bmsnLiIKICAgICAgICB3YXJuaW5ncy53YXJuKCInU2VxdWVuY2VNYXRjaGVyKCkuaXNianVuayhpdGVtKScgaXMgZGVwcmVjYXRlZDtcbiIKICAgICAgICAgICAgICAgICAgICAgICJ1c2UgJ2l0ZW0gaW4gU01pbnN0YW5jZS5ianVuaycgaW5zdGVhZC4iLAogICAgICAgICAgICAgICAgICAgICAgRGVwcmVjYXRpb25XYXJuaW5nLCAyKQogICAgICAgIHJldHVybiBpdGVtIGluIHNlbGYuYmp1bmsKCiAgICBkZWYgaXNicG9wdWxhcihzZWxmLCBpdGVtKToKICAgICAgICAiRGVwcmVjYXRlZDsgdXNlICdpdGVtIGluIFNlcXVlbmNlTWF0Y2hlcigpLmJwb3B1bGFyJy4iCiAgICAgICAgd2FybmluZ3Mud2FybigiJ1NlcXVlbmNlTWF0Y2hlcigpLmlzYnBvcHVsYXIoaXRlbSknIGlzIGRlcHJlY2F0ZWQ7XG4iCiAgICAgICAgICAgICAgICAgICAgICAidXNlICdpdGVtIGluIFNNaW5zdGFuY2UuYnBvcHVsYXInIGluc3RlYWQuIiwKICAgICAgICAgICAgICAgICAgICAgIERlcHJlY2F0aW9uV2FybmluZywgMikKICAgICAgICByZXR1cm4gaXRlbSBpbiBzZWxmLmJwb3B1bGFyCgogICAgZGVmIGZpbmRfbG9uZ2VzdF9tYXRjaChzZWxmLCBhbG8sIGFoaSwgYmxvLCBiaGkpOgogICAgICAgICIiIkZpbmQgbG9uZ2VzdCBtYXRjaGluZyBibG9jayBpbiBhW2FsbzphaGldIGFuZCBiW2JsbzpiaGldLgoKICAgICAgICBJZiBpc2p1bmsgaXMgbm90IGRlZmluZWQ6CgogICAgICAgIFJldHVybiAoaSxqLGspIHN1Y2ggdGhhdCBhW2k6aStrXSBpcyBlcXVhbCB0byBiW2o6aitrXSwgd2hlcmUKICAgICAgICAgICAgYWxvIDw9IGkgPD0gaStrIDw9IGFoaQogICAgICAgICAgICBibG8gPD0gaiA8PSBqK2sgPD0gYmhpCiAgICAgICAgYW5kIGZvciBhbGwgKGknLGonLGsnKSBtZWV0aW5nIHRob3NlIGNvbmRpdGlvbnMsCiAgICAgICAgICAgIGsgPj0gaycKICAgICAgICAgICAgaSA8PSBpJwogICAgICAgICAgICBhbmQgaWYgaSA9PSBpJywgaiA8PSBqJwoKICAgICAgICBJbiBvdGhlciB3b3Jkcywgb2YgYWxsIG1heGltYWwgbWF0Y2hpbmcgYmxvY2tzLCByZXR1cm4gb25lIHRoYXQKICAgICAgICBzdGFydHMgZWFybGllc3QgaW4gYSwgYW5kIG9mIGFsbCB0aG9zZSBtYXhpbWFsIG1hdGNoaW5nIGJsb2NrcyB0aGF0CiAgICAgICAgc3RhcnQgZWFybGllc3QgaW4gYSwgcmV0dXJuIHRoZSBvbmUgdGhhdCBzdGFydHMgZWFybGllc3QgaW4gYi4KCiAgICAgICAgPj4+IHMgPSBTZXF1ZW5jZU1hdGNoZXIoTm9uZSwgIiBhYmNkIiwgImFiY2QgYWJjZCIpCiAgICAgICAgPj4+IHMuZmluZF9sb25nZXN0X21hdGNoKDAsIDUsIDAsIDkpCiAgICAgICAgTWF0Y2goYT0wLCBiPTQsIHNpemU9NSkKCiAgICAgICAgSWYgaXNqdW5rIGlzIGRlZmluZWQsIGZpcnN0IHRoZSBsb25nZXN0IG1hdGNoaW5nIGJsb2NrIGlzCiAgICAgICAgZGV0ZXJtaW5lZCBhcyBhYm92ZSwgYnV0IHdpdGggdGhlIGFkZGl0aW9uYWwgcmVzdHJpY3Rpb24gdGhhdCBubwogICAgICAgIGp1bmsgZWxlbWVudCBhcHBlYXJzIGluIHRoZSBibG9jay4gIFRoZW4gdGhhdCBibG9jayBpcyBleHRlbmRlZCBhcwogICAgICAgIGZhciBhcyBwb3NzaWJsZSBieSBtYXRjaGluZyAob25seSkganVuayBlbGVtZW50cyBvbiBib3RoIHNpZGVzLiAgU28KICAgICAgICB0aGUgcmVzdWx0aW5nIGJsb2NrIG5ldmVyIG1hdGNoZXMgb24ganVuayBleGNlcHQgYXMgaWRlbnRpY2FsIGp1bmsKICAgICAgICBoYXBwZW5zIHRvIGJlIGFkamFjZW50IHRvIGFuICJpbnRlcmVzdGluZyIgbWF0Y2guCgogICAgICAgIEhlcmUncyB0aGUgc2FtZSBleGFtcGxlIGFzIGJlZm9yZSwgYnV0IGNvbnNpZGVyaW5nIGJsYW5rcyB0byBiZQogICAgICAgIGp1bmsuICBUaGF0IHByZXZlbnRzICIgYWJjZCIgZnJvbSBtYXRjaGluZyB0aGUgIiBhYmNkIiBhdCB0aGUgdGFpbAogICAgICAgIGVuZCBvZiB0aGUgc2Vjb25kIHNlcXVlbmNlIGRpcmVjdGx5LiAgSW5zdGVhZCBvbmx5IHRoZSAiYWJjZCIgY2FuCiAgICAgICAgbWF0Y2gsIGFuZCBtYXRjaGVzIHRoZSBsZWZ0bW9zdCAiYWJjZCIgaW4gdGhlIHNlY29uZCBzZXF1ZW5jZToKCiAgICAgICAgPj4+IHMgPSBTZXF1ZW5jZU1hdGNoZXIobGFtYmRhIHg6IHg9PSIgIiwgIiBhYmNkIiwgImFiY2QgYWJjZCIpCiAgICAgICAgPj4+IHMuZmluZF9sb25nZXN0X21hdGNoKDAsIDUsIDAsIDkpCiAgICAgICAgTWF0Y2goYT0xLCBiPTAsIHNpemU9NCkKCiAgICAgICAgSWYgbm8gYmxvY2tzIG1hdGNoLCByZXR1cm4gKGFsbywgYmxvLCAwKS4KCiAgICAgICAgPj4+IHMgPSBTZXF1ZW5jZU1hdGNoZXIoTm9uZSwgImFiIiwgImMiKQogICAgICAgID4+PiBzLmZpbmRfbG9uZ2VzdF9tYXRjaCgwLCAyLCAwLCAxKQogICAgICAgIE1hdGNoKGE9MCwgYj0wLCBzaXplPTApCiAgICAgICAgIiIiCgogICAgICAgICMgQ0FVVElPTjogIHN0cmlwcGluZyBjb21tb24gcHJlZml4IG9yIHN1ZmZpeCB3b3VsZCBiZSBpbmNvcnJlY3QuCiAgICAgICAgIyBFLmcuLAogICAgICAgICMgICAgYWIKICAgICAgICAjICAgIGFjYWIKICAgICAgICAjIExvbmdlc3QgbWF0Y2hpbmcgYmxvY2sgaXMgImFiIiwgYnV0IGlmIGNvbW1vbiBwcmVmaXggaXMKICAgICAgICAjIHN0cmlwcGVkLCBpdCdzICJhIiAodGllZCB3aXRoICJiIikuICBVTklYKHRtKSBkaWZmIGRvZXMgc28KICAgICAgICAjIHN0cmlwLCBzbyBlbmRzIHVwIGNsYWltaW5nIHRoYXQgYWIgaXMgY2hhbmdlZCB0byBhY2FiIGJ5CiAgICAgICAgIyBpbnNlcnRpbmcgImNhIiBpbiB0aGUgbWlkZGxlLiAgVGhhdCdzIG1pbmltYWwgYnV0IHVuaW50dWl0aXZlOgogICAgICAgICMgIml0J3Mgb2J2aW91cyIgdGhhdCBzb21lb25lIGluc2VydGVkICJhYyIgYXQgdGhlIGZyb250LgogICAgICAgICMgV2luZGlmZiBlbmRzIHVwIGF0IHRoZSBzYW1lIHBsYWNlIGFzIGRpZmYsIGJ1dCBieSBwYWlyaW5nIHVwCiAgICAgICAgIyB0aGUgdW5pcXVlICdiJ3MgYW5kIHRoZW4gbWF0Y2hpbmcgdGhlIGZpcnN0IHR3byAnYSdzLgoKICAgICAgICBhLCBiLCBiMmosIGlzYmp1bmsgPSBzZWxmLmEsIHNlbGYuYiwgc2VsZi5iMmosIHNlbGYuYmp1bmsuX19jb250YWluc19fCiAgICAgICAgYmVzdGksIGJlc3RqLCBiZXN0c2l6ZSA9IGFsbywgYmxvLCAwCiAgICAgICAgIyBmaW5kIGxvbmdlc3QganVuay1mcmVlIG1hdGNoCiAgICAgICAgIyBkdXJpbmcgYW4gaXRlcmF0aW9uIG9mIHRoZSBsb29wLCBqMmxlbltqXSA9IGxlbmd0aCBvZiBsb25nZXN0CiAgICAgICAgIyBqdW5rLWZyZWUgbWF0Y2ggZW5kaW5nIHdpdGggYVtpLTFdIGFuZCBiW2pdCiAgICAgICAgajJsZW4gPSB7fQogICAgICAgIG5vdGhpbmcgPSBbXQogICAgICAgIGZvciBpIGluIHJhbmdlKGFsbywgYWhpKToKICAgICAgICAgICAgIyBsb29rIGF0IGFsbCBpbnN0YW5jZXMgb2YgYVtpXSBpbiBiOyBub3RlIHRoYXQgYmVjYXVzZQogICAgICAgICAgICAjIGIyaiBoYXMgbm8ganVuayBrZXlzLCB0aGUgbG9vcCBpcyBza2lwcGVkIGlmIGFbaV0gaXMganVuawogICAgICAgICAgICBqMmxlbmdldCA9IGoybGVuLmdldAogICAgICAgICAgICBuZXdqMmxlbiA9IHt9CiAgICAgICAgICAgIGZvciBqIGluIGIyai5nZXQoYVtpXSwgbm90aGluZyk6CiAgICAgICAgICAgICAgICAjIGFbaV0gbWF0Y2hlcyBiW2pdCiAgICAgICAgICAgICAgICBpZiBqIDwgYmxvOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICBpZiBqID49IGJoaToKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgayA9IG5ld2oybGVuW2pdID0gajJsZW5nZXQoai0xLCAwKSArIDEKICAgICAgICAgICAgICAgIGlmIGsgPiBiZXN0c2l6ZToKICAgICAgICAgICAgICAgICAgICBiZXN0aSwgYmVzdGosIGJlc3RzaXplID0gaS1rKzEsIGotaysxLCBrCiAgICAgICAgICAgIGoybGVuID0gbmV3ajJsZW4KCiAgICAgICAgIyBFeHRlbmQgdGhlIGJlc3QgYnkgbm9uLWp1bmsgZWxlbWVudHMgb24gZWFjaCBlbmQuICBJbiBwYXJ0aWN1bGFyLAogICAgICAgICMgInBvcHVsYXIiIG5vbi1qdW5rIGVsZW1lbnRzIGFyZW4ndCBpbiBiMmosIHdoaWNoIGdyZWF0bHkgc3BlZWRzCiAgICAgICAgIyB0aGUgaW5uZXIgbG9vcCBhYm92ZSwgYnV0IGFsc28gbWVhbnMgInRoZSBiZXN0IiBtYXRjaCBzbyBmYXIKICAgICAgICAjIGRvZXNuJ3QgY29udGFpbiBhbnkganVuayAqb3IqIHBvcHVsYXIgbm9uLWp1bmsgZWxlbWVudHMuCiAgICAgICAgd2hpbGUgYmVzdGkgPiBhbG8gYW5kIGJlc3RqID4gYmxvIGFuZCBcCiAgICAgICAgICAgICAgbm90IGlzYmp1bmsoYltiZXN0ai0xXSkgYW5kIFwKICAgICAgICAgICAgICBhW2Jlc3RpLTFdID09IGJbYmVzdGotMV06CiAgICAgICAgICAgIGJlc3RpLCBiZXN0aiwgYmVzdHNpemUgPSBiZXN0aS0xLCBiZXN0ai0xLCBiZXN0c2l6ZSsxCiAgICAgICAgd2hpbGUgYmVzdGkrYmVzdHNpemUgPCBhaGkgYW5kIGJlc3RqK2Jlc3RzaXplIDwgYmhpIGFuZCBcCiAgICAgICAgICAgICAgbm90IGlzYmp1bmsoYltiZXN0aitiZXN0c2l6ZV0pIGFuZCBcCiAgICAgICAgICAgICAgYVtiZXN0aStiZXN0c2l6ZV0gPT0gYltiZXN0aitiZXN0c2l6ZV06CiAgICAgICAgICAgIGJlc3RzaXplICs9IDEKCiAgICAgICAgIyBOb3cgdGhhdCB3ZSBoYXZlIGEgd2hvbGx5IGludGVyZXN0aW5nIG1hdGNoIChhbGJlaXQgcG9zc2libHkKICAgICAgICAjIGVtcHR5ISksIHdlIG1heSBhcyB3ZWxsIHN1Y2sgdXAgdGhlIG1hdGNoaW5nIGp1bmsgb24gZWFjaAogICAgICAgICMgc2lkZSBvZiBpdCB0b28uICBDYW4ndCB0aGluayBvZiBhIGdvb2QgcmVhc29uIG5vdCB0bywgYW5kIGl0CiAgICAgICAgIyBzYXZlcyBwb3N0LXByb2Nlc3NpbmcgdGhlIChwb3NzaWJseSBjb25zaWRlcmFibGUpIGV4cGVuc2Ugb2YKICAgICAgICAjIGZpZ3VyaW5nIG91dCB3aGF0IHRvIGRvIHdpdGggaXQuICBJbiB0aGUgY2FzZSBvZiBhbiBlbXB0eQogICAgICAgICMgaW50ZXJlc3RpbmcgbWF0Y2gsIHRoaXMgaXMgY2xlYXJseSB0aGUgcmlnaHQgdGhpbmcgdG8gZG8sCiAgICAgICAgIyBiZWNhdXNlIG5vIG90aGVyIGtpbmQgb2YgbWF0Y2ggaXMgcG9zc2libGUgaW4gdGhlIHJlZ2lvbnMuCiAgICAgICAgd2hpbGUgYmVzdGkgPiBhbG8gYW5kIGJlc3RqID4gYmxvIGFuZCBcCiAgICAgICAgICAgICAgaXNianVuayhiW2Jlc3RqLTFdKSBhbmQgXAogICAgICAgICAgICAgIGFbYmVzdGktMV0gPT0gYltiZXN0ai0xXToKICAgICAgICAgICAgYmVzdGksIGJlc3RqLCBiZXN0c2l6ZSA9IGJlc3RpLTEsIGJlc3RqLTEsIGJlc3RzaXplKzEKICAgICAgICB3aGlsZSBiZXN0aStiZXN0c2l6ZSA8IGFoaSBhbmQgYmVzdGorYmVzdHNpemUgPCBiaGkgYW5kIFwKICAgICAgICAgICAgICBpc2JqdW5rKGJbYmVzdGorYmVzdHNpemVdKSBhbmQgXAogICAgICAgICAgICAgIGFbYmVzdGkrYmVzdHNpemVdID09IGJbYmVzdGorYmVzdHNpemVdOgogICAgICAgICAgICBiZXN0c2l6ZSA9IGJlc3RzaXplICsgMQoKICAgICAgICByZXR1cm4gTWF0Y2goYmVzdGksIGJlc3RqLCBiZXN0c2l6ZSkKCiAgICBkZWYgZ2V0X21hdGNoaW5nX2Jsb2NrcyhzZWxmKToKICAgICAgICAiIiJSZXR1cm4gbGlzdCBvZiB0cmlwbGVzIGRlc2NyaWJpbmcgbWF0Y2hpbmcgc3Vic2VxdWVuY2VzLgoKICAgICAgICBFYWNoIHRyaXBsZSBpcyBvZiB0aGUgZm9ybSAoaSwgaiwgbiksIGFuZCBtZWFucyB0aGF0CiAgICAgICAgYVtpOmkrbl0gPT0gYltqOmorbl0uICBUaGUgdHJpcGxlcyBhcmUgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nIGluCiAgICAgICAgaSBhbmQgaW4gai4gIE5ldyBpbiBQeXRob24gMi41LCBpdCdzIGFsc28gZ3VhcmFudGVlZCB0aGF0IGlmCiAgICAgICAgKGksIGosIG4pIGFuZCAoaScsIGonLCBuJykgYXJlIGFkamFjZW50IHRyaXBsZXMgaW4gdGhlIGxpc3QsIGFuZAogICAgICAgIHRoZSBzZWNvbmQgaXMgbm90IHRoZSBsYXN0IHRyaXBsZSBpbiB0aGUgbGlzdCwgdGhlbiBpK24gIT0gaScgb3IKICAgICAgICBqK24gIT0gaicuICBJT1csIGFkamFjZW50IHRyaXBsZXMgbmV2ZXIgZGVzY3JpYmUgYWRqYWNlbnQgZXF1YWwKICAgICAgICBibG9ja3MuCgogICAgICAgIFRoZSBsYXN0IHRyaXBsZSBpcyBhIGR1bW15LCAobGVuKGEpLCBsZW4oYiksIDApLCBhbmQgaXMgdGhlIG9ubHkKICAgICAgICB0cmlwbGUgd2l0aCBuPT0wLgoKICAgICAgICA+Pj4gcyA9IFNlcXVlbmNlTWF0Y2hlcihOb25lLCAiYWJ4Y2QiLCAiYWJjZCIpCiAgICAgICAgPj4+IGxpc3Qocy5nZXRfbWF0Y2hpbmdfYmxvY2tzKCkpCiAgICAgICAgW01hdGNoKGE9MCwgYj0wLCBzaXplPTIpLCBNYXRjaChhPTMsIGI9Miwgc2l6ZT0yKSwgTWF0Y2goYT01LCBiPTQsIHNpemU9MCldCiAgICAgICAgIiIiCgogICAgICAgIGlmIHNlbGYubWF0Y2hpbmdfYmxvY2tzIGlzIG5vdCBOb25lOgogICAgICAgICAgICByZXR1cm4gc2VsZi5tYXRjaGluZ19ibG9ja3MKICAgICAgICBsYSwgbGIgPSBsZW4oc2VsZi5hKSwgbGVuKHNlbGYuYikKCiAgICAgICAgIyBUaGlzIGlzIG1vc3QgbmF0dXJhbGx5IGV4cHJlc3NlZCBhcyBhIHJlY3Vyc2l2ZSBhbGdvcml0aG0sIGJ1dAogICAgICAgICMgYXQgbGVhc3Qgb25lIHVzZXIgYnVtcGVkIGludG8gZXh0cmVtZSB1c2UgY2FzZXMgdGhhdCBleGNlZWRlZAogICAgICAgICMgdGhlIHJlY3Vyc2lvbiBsaW1pdCBvbiB0aGVpciBib3guICBTbywgbm93IHdlIG1haW50YWluIGEgbGlzdAogICAgICAgICMgKCdxdWV1ZWApIG9mIGJsb2NrcyB3ZSBzdGlsbCBuZWVkIHRvIGxvb2sgYXQsIGFuZCBhcHBlbmQgcGFydGlhbAogICAgICAgICMgcmVzdWx0cyB0byBgbWF0Y2hpbmdfYmxvY2tzYCBpbiBhIGxvb3A7IHRoZSBtYXRjaGVzIGFyZSBzb3J0ZWQKICAgICAgICAjIGF0IHRoZSBlbmQuCiAgICAgICAgcXVldWUgPSBbKDAsIGxhLCAwLCBsYildCiAgICAgICAgbWF0Y2hpbmdfYmxvY2tzID0gW10KICAgICAgICB3aGlsZSBxdWV1ZToKICAgICAgICAgICAgYWxvLCBhaGksIGJsbywgYmhpID0gcXVldWUucG9wKCkKICAgICAgICAgICAgaSwgaiwgayA9IHggPSBzZWxmLmZpbmRfbG9uZ2VzdF9tYXRjaChhbG8sIGFoaSwgYmxvLCBiaGkpCiAgICAgICAgICAgICMgYVthbG86aV0gdnMgYltibG86al0gdW5rbm93bgogICAgICAgICAgICAjIGFbaTppK2tdIHNhbWUgYXMgYltqOmora10KICAgICAgICAgICAgIyBhW2krazphaGldIHZzIGJbaitrOmJoaV0gdW5rbm93bgogICAgICAgICAgICBpZiBrOiAgICMgaWYgayBpcyAwLCB0aGVyZSB3YXMgbm8gbWF0Y2hpbmcgYmxvY2sKICAgICAgICAgICAgICAgIG1hdGNoaW5nX2Jsb2Nrcy5hcHBlbmQoeCkKICAgICAgICAgICAgICAgIGlmIGFsbyA8IGkgYW5kIGJsbyA8IGo6CiAgICAgICAgICAgICAgICAgICAgcXVldWUuYXBwZW5kKChhbG8sIGksIGJsbywgaikpCiAgICAgICAgICAgICAgICBpZiBpK2sgPCBhaGkgYW5kIGorayA8IGJoaToKICAgICAgICAgICAgICAgICAgICBxdWV1ZS5hcHBlbmQoKGkraywgYWhpLCBqK2ssIGJoaSkpCiAgICAgICAgbWF0Y2hpbmdfYmxvY2tzLnNvcnQoKQoKICAgICAgICAjIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBoYXZlIGFkamFjZW50IGVxdWFsIGJsb2NrcyBpbiB0aGUKICAgICAgICAjIG1hdGNoaW5nX2Jsb2NrcyBsaXN0IG5vdy4gIFN0YXJ0aW5nIHdpdGggMi41LCB0aGlzIGNvZGUgd2FzIGFkZGVkCiAgICAgICAgIyB0byBjb2xsYXBzZSB0aGVtLgogICAgICAgIGkxID0gajEgPSBrMSA9IDAKICAgICAgICBub25fYWRqYWNlbnQgPSBbXQogICAgICAgIGZvciBpMiwgajIsIGsyIGluIG1hdGNoaW5nX2Jsb2NrczoKICAgICAgICAgICAgIyBJcyB0aGlzIGJsb2NrIGFkamFjZW50IHRvIGkxLCBqMSwgazE/CiAgICAgICAgICAgIGlmIGkxICsgazEgPT0gaTIgYW5kIGoxICsgazEgPT0gajI6CiAgICAgICAgICAgICAgICAjIFllcywgc28gY29sbGFwc2UgdGhlbSAtLSB0aGlzIGp1c3QgaW5jcmVhc2VzIHRoZSBsZW5ndGggb2YKICAgICAgICAgICAgICAgICMgdGhlIGZpcnN0IGJsb2NrIGJ5IHRoZSBsZW5ndGggb2YgdGhlIHNlY29uZCwgYW5kIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgIyBibG9jayBzbyBsZW5ndGhlbmVkIHJlbWFpbnMgdGhlIGJsb2NrIHRvIGNvbXBhcmUgYWdhaW5zdC4KICAgICAgICAgICAgICAgIGsxICs9IGsyCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIE5vdCBhZGphY2VudC4gIFJlbWVtYmVyIHRoZSBmaXJzdCBibG9jayAoazE9PTAgbWVhbnMgaXQncwogICAgICAgICAgICAgICAgIyB0aGUgZHVtbXkgd2Ugc3RhcnRlZCB3aXRoKSwgYW5kIG1ha2UgdGhlIHNlY29uZCBibG9jayB0aGUKICAgICAgICAgICAgICAgICMgbmV3IGJsb2NrIHRvIGNvbXBhcmUgYWdhaW5zdC4KICAgICAgICAgICAgICAgIGlmIGsxOgogICAgICAgICAgICAgICAgICAgIG5vbl9hZGphY2VudC5hcHBlbmQoKGkxLCBqMSwgazEpKQogICAgICAgICAgICAgICAgaTEsIGoxLCBrMSA9IGkyLCBqMiwgazIKICAgICAgICBpZiBrMToKICAgICAgICAgICAgbm9uX2FkamFjZW50LmFwcGVuZCgoaTEsIGoxLCBrMSkpCgogICAgICAgIG5vbl9hZGphY2VudC5hcHBlbmQoIChsYSwgbGIsIDApICkKICAgICAgICBzZWxmLm1hdGNoaW5nX2Jsb2NrcyA9IG5vbl9hZGphY2VudAogICAgICAgIHJldHVybiBtYXAoTWF0Y2guX21ha2UsIHNlbGYubWF0Y2hpbmdfYmxvY2tzKQoKICAgIGRlZiBnZXRfb3Bjb2RlcyhzZWxmKToKICAgICAgICAiIiJSZXR1cm4gbGlzdCBvZiA1LXR1cGxlcyBkZXNjcmliaW5nIGhvdyB0byB0dXJuIGEgaW50byBiLgoKICAgICAgICBFYWNoIHR1cGxlIGlzIG9mIHRoZSBmb3JtICh0YWcsIGkxLCBpMiwgajEsIGoyKS4gIFRoZSBmaXJzdCB0dXBsZQogICAgICAgIGhhcyBpMSA9PSBqMSA9PSAwLCBhbmQgcmVtYWluaW5nIHR1cGxlcyBoYXZlIGkxID09IHRoZSBpMiBmcm9tIHRoZQogICAgICAgIHR1cGxlIHByZWNlZGluZyBpdCwgYW5kIGxpa2V3aXNlIGZvciBqMSA9PSB0aGUgcHJldmlvdXMgajIuCgogICAgICAgIFRoZSB0YWdzIGFyZSBzdHJpbmdzLCB3aXRoIHRoZXNlIG1lYW5pbmdzOgoKICAgICAgICAncmVwbGFjZSc6ICBhW2kxOmkyXSBzaG91bGQgYmUgcmVwbGFjZWQgYnkgYltqMTpqMl0KICAgICAgICAnZGVsZXRlJzogICBhW2kxOmkyXSBzaG91bGQgYmUgZGVsZXRlZC4KICAgICAgICAgICAgICAgICAgICBOb3RlIHRoYXQgajE9PWoyIGluIHRoaXMgY2FzZS4KICAgICAgICAnaW5zZXJ0JzogICBiW2oxOmoyXSBzaG91bGQgYmUgaW5zZXJ0ZWQgYXQgYVtpMTppMV0uCiAgICAgICAgICAgICAgICAgICAgTm90ZSB0aGF0IGkxPT1pMiBpbiB0aGlzIGNhc2UuCiAgICAgICAgJ2VxdWFsJzogICAgYVtpMTppMl0gPT0gYltqMTpqMl0KCiAgICAgICAgPj4+IGEgPSAicWFieGNkIgogICAgICAgID4+PiBiID0gImFieWNkZiIKICAgICAgICA+Pj4gcyA9IFNlcXVlbmNlTWF0Y2hlcihOb25lLCBhLCBiKQogICAgICAgID4+PiBmb3IgdGFnLCBpMSwgaTIsIGoxLCBqMiBpbiBzLmdldF9vcGNvZGVzKCk6CiAgICAgICAgLi4uICAgIHByaW50KCgiJTdzIGFbJWQ6JWRdICglcykgYlslZDolZF0gKCVzKSIgJQogICAgICAgIC4uLiAgICAgICAgICAgKHRhZywgaTEsIGkyLCBhW2kxOmkyXSwgajEsIGoyLCBiW2oxOmoyXSkpKQogICAgICAgICBkZWxldGUgYVswOjFdIChxKSBiWzA6MF0gKCkKICAgICAgICAgIGVxdWFsIGFbMTozXSAoYWIpIGJbMDoyXSAoYWIpCiAgICAgICAgcmVwbGFjZSBhWzM6NF0gKHgpIGJbMjozXSAoeSkKICAgICAgICAgIGVxdWFsIGFbNDo2XSAoY2QpIGJbMzo1XSAoY2QpCiAgICAgICAgIGluc2VydCBhWzY6Nl0gKCkgYls1OjZdIChmKQogICAgICAgICIiIgoKICAgICAgICBpZiBzZWxmLm9wY29kZXMgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmLm9wY29kZXMKICAgICAgICBpID0gaiA9IDAKICAgICAgICBzZWxmLm9wY29kZXMgPSBhbnN3ZXIgPSBbXQogICAgICAgIGZvciBhaSwgYmosIHNpemUgaW4gc2VsZi5nZXRfbWF0Y2hpbmdfYmxvY2tzKCk6CiAgICAgICAgICAgICMgaW52YXJpYW50OiAgd2UndmUgcHVtcGVkIG91dCBjb3JyZWN0IGRpZmZzIHRvIGNoYW5nZQogICAgICAgICAgICAjIGFbOmldIGludG8gYls6al0sIGFuZCB0aGUgbmV4dCBtYXRjaGluZyBibG9jayBpcwogICAgICAgICAgICAjIGFbYWk6YWkrc2l6ZV0gPT0gYltiajpiaitzaXplXS4gIFNvIHdlIG5lZWQgdG8gcHVtcAogICAgICAgICAgICAjIG91dCBhIGRpZmYgdG8gY2hhbmdlIGFbaTphaV0gaW50byBiW2o6YmpdLCBwdW1wIG91dAogICAgICAgICAgICAjIHRoZSBtYXRjaGluZyBibG9jaywgYW5kIG1vdmUgKGksaikgYmV5b25kIHRoZSBtYXRjaAogICAgICAgICAgICB0YWcgPSAnJwogICAgICAgICAgICBpZiBpIDwgYWkgYW5kIGogPCBiajoKICAgICAgICAgICAgICAgIHRhZyA9ICdyZXBsYWNlJwogICAgICAgICAgICBlbGlmIGkgPCBhaToKICAgICAgICAgICAgICAgIHRhZyA9ICdkZWxldGUnCiAgICAgICAgICAgIGVsaWYgaiA8IGJqOgogICAgICAgICAgICAgICAgdGFnID0gJ2luc2VydCcKICAgICAgICAgICAgaWYgdGFnOgogICAgICAgICAgICAgICAgYW5zd2VyLmFwcGVuZCggKHRhZywgaSwgYWksIGosIGJqKSApCiAgICAgICAgICAgIGksIGogPSBhaStzaXplLCBiaitzaXplCiAgICAgICAgICAgICMgdGhlIGxpc3Qgb2YgbWF0Y2hpbmcgYmxvY2tzIGlzIHRlcm1pbmF0ZWQgYnkgYQogICAgICAgICAgICAjIHNlbnRpbmVsIHdpdGggc2l6ZSAwCiAgICAgICAgICAgIGlmIHNpemU6CiAgICAgICAgICAgICAgICBhbnN3ZXIuYXBwZW5kKCAoJ2VxdWFsJywgYWksIGksIGJqLCBqKSApCiAgICAgICAgcmV0dXJuIGFuc3dlcgoKICAgIGRlZiBnZXRfZ3JvdXBlZF9vcGNvZGVzKHNlbGYsIG49Myk6CiAgICAgICAgIiIiIElzb2xhdGUgY2hhbmdlIGNsdXN0ZXJzIGJ5IGVsaW1pbmF0aW5nIHJhbmdlcyB3aXRoIG5vIGNoYW5nZXMuCgogICAgICAgIFJldHVybiBhIGdlbmVyYXRvciBvZiBncm91cHMgd2l0aCB1cHRvIG4gbGluZXMgb2YgY29udGV4dC4KICAgICAgICBFYWNoIGdyb3VwIGlzIGluIHRoZSBzYW1lIGZvcm1hdCBhcyByZXR1cm5lZCBieSBnZXRfb3Bjb2RlcygpLgoKICAgICAgICA+Pj4gZnJvbSBwcHJpbnQgaW1wb3J0IHBwcmludAogICAgICAgID4+PiBhID0gbGlzdChtYXAoc3RyLCByYW5nZSgxLDQwKSkpCiAgICAgICAgPj4+IGIgPSBhWzpdCiAgICAgICAgPj4+IGJbODo4XSA9IFsnaSddICAgICAjIE1ha2UgYW4gaW5zZXJ0aW9uCiAgICAgICAgPj4+IGJbMjBdICs9ICd4JyAgICAgICAjIE1ha2UgYSByZXBsYWNlbWVudAogICAgICAgID4+PiBiWzIzOjI4XSA9IFtdICAgICAgIyBNYWtlIGEgZGVsZXRpb24KICAgICAgICA+Pj4gYlszMF0gKz0gJ3knICAgICAgICMgTWFrZSBhbm90aGVyIHJlcGxhY2VtZW50CiAgICAgICAgPj4+IHBwcmludChsaXN0KFNlcXVlbmNlTWF0Y2hlcihOb25lLGEsYikuZ2V0X2dyb3VwZWRfb3Bjb2RlcygpKSkKICAgICAgICBbWygnZXF1YWwnLCA1LCA4LCA1LCA4KSwgKCdpbnNlcnQnLCA4LCA4LCA4LCA5KSwgKCdlcXVhbCcsIDgsIDExLCA5LCAxMildLAogICAgICAgICBbKCdlcXVhbCcsIDE2LCAxOSwgMTcsIDIwKSwKICAgICAgICAgICgncmVwbGFjZScsIDE5LCAyMCwgMjAsIDIxKSwKICAgICAgICAgICgnZXF1YWwnLCAyMCwgMjIsIDIxLCAyMyksCiAgICAgICAgICAoJ2RlbGV0ZScsIDIyLCAyNywgMjMsIDIzKSwKICAgICAgICAgICgnZXF1YWwnLCAyNywgMzAsIDIzLCAyNildLAogICAgICAgICBbKCdlcXVhbCcsIDMxLCAzNCwgMjcsIDMwKSwKICAgICAgICAgICgncmVwbGFjZScsIDM0LCAzNSwgMzAsIDMxKSwKICAgICAgICAgICgnZXF1YWwnLCAzNSwgMzgsIDMxLCAzNCldXQogICAgICAgICIiIgoKICAgICAgICBjb2RlcyA9IHNlbGYuZ2V0X29wY29kZXMoKQogICAgICAgIGlmIG5vdCBjb2RlczoKICAgICAgICAgICAgY29kZXMgPSBbKCJlcXVhbCIsIDAsIDEsIDAsIDEpXQogICAgICAgICMgRml4dXAgbGVhZGluZyBhbmQgdHJhaWxpbmcgZ3JvdXBzIGlmIHRoZXkgc2hvdyBubyBjaGFuZ2VzLgogICAgICAgIGlmIGNvZGVzWzBdWzBdID09ICdlcXVhbCc6CiAgICAgICAgICAgIHRhZywgaTEsIGkyLCBqMSwgajIgPSBjb2Rlc1swXQogICAgICAgICAgICBjb2Rlc1swXSA9IHRhZywgbWF4KGkxLCBpMi1uKSwgaTIsIG1heChqMSwgajItbiksIGoyCiAgICAgICAgaWYgY29kZXNbLTFdWzBdID09ICdlcXVhbCc6CiAgICAgICAgICAgIHRhZywgaTEsIGkyLCBqMSwgajIgPSBjb2Rlc1stMV0KICAgICAgICAgICAgY29kZXNbLTFdID0gdGFnLCBpMSwgbWluKGkyLCBpMStuKSwgajEsIG1pbihqMiwgajErbikKCiAgICAgICAgbm4gPSBuICsgbgogICAgICAgIGdyb3VwID0gW10KICAgICAgICBmb3IgdGFnLCBpMSwgaTIsIGoxLCBqMiBpbiBjb2RlczoKICAgICAgICAgICAgIyBFbmQgdGhlIGN1cnJlbnQgZ3JvdXAgYW5kIHN0YXJ0IGEgbmV3IG9uZSB3aGVuZXZlcgogICAgICAgICAgICAjIHRoZXJlIGlzIGEgbGFyZ2UgcmFuZ2Ugd2l0aCBubyBjaGFuZ2VzLgogICAgICAgICAgICBpZiB0YWcgPT0gJ2VxdWFsJyBhbmQgaTItaTEgPiBubjoKICAgICAgICAgICAgICAgIGdyb3VwLmFwcGVuZCgodGFnLCBpMSwgbWluKGkyLCBpMStuKSwgajEsIG1pbihqMiwgajErbikpKQogICAgICAgICAgICAgICAgeWllbGQgZ3JvdXAKICAgICAgICAgICAgICAgIGdyb3VwID0gW10KICAgICAgICAgICAgICAgIGkxLCBqMSA9IG1heChpMSwgaTItbiksIG1heChqMSwgajItbikKICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKCh0YWcsIGkxLCBpMiwgajEgLGoyKSkKICAgICAgICBpZiBncm91cCBhbmQgbm90IChsZW4oZ3JvdXApPT0xIGFuZCBncm91cFswXVswXSA9PSAnZXF1YWwnKToKICAgICAgICAgICAgeWllbGQgZ3JvdXAKCiAgICBkZWYgcmF0aW8oc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGEgbWVhc3VyZSBvZiB0aGUgc2VxdWVuY2VzJyBzaW1pbGFyaXR5IChmbG9hdCBpbiBbMCwxXSkuCgogICAgICAgIFdoZXJlIFQgaXMgdGhlIHRvdGFsIG51bWJlciBvZiBlbGVtZW50cyBpbiBib3RoIHNlcXVlbmNlcywgYW5kCiAgICAgICAgTSBpcyB0aGUgbnVtYmVyIG9mIG1hdGNoZXMsIHRoaXMgaXMgMi4wKk0gLyBULgogICAgICAgIE5vdGUgdGhhdCB0aGlzIGlzIDEgaWYgdGhlIHNlcXVlbmNlcyBhcmUgaWRlbnRpY2FsLCBhbmQgMCBpZgogICAgICAgIHRoZXkgaGF2ZSBub3RoaW5nIGluIGNvbW1vbi4KCiAgICAgICAgLnJhdGlvKCkgaXMgZXhwZW5zaXZlIHRvIGNvbXB1dGUgaWYgeW91IGhhdmVuJ3QgYWxyZWFkeSBjb21wdXRlZAogICAgICAgIC5nZXRfbWF0Y2hpbmdfYmxvY2tzKCkgb3IgLmdldF9vcGNvZGVzKCksIGluIHdoaWNoIGNhc2UgeW91IG1heQogICAgICAgIHdhbnQgdG8gdHJ5IC5xdWlja19yYXRpbygpIG9yIC5yZWFsX3F1aWNrX3JhdGlvKCkgZmlyc3QgdG8gZ2V0IGFuCiAgICAgICAgdXBwZXIgYm91bmQuCgogICAgICAgID4+PiBzID0gU2VxdWVuY2VNYXRjaGVyKE5vbmUsICJhYmNkIiwgImJjZGUiKQogICAgICAgID4+PiBzLnJhdGlvKCkKICAgICAgICAwLjc1CiAgICAgICAgPj4+IHMucXVpY2tfcmF0aW8oKQogICAgICAgIDAuNzUKICAgICAgICA+Pj4gcy5yZWFsX3F1aWNrX3JhdGlvKCkKICAgICAgICAxLjAKICAgICAgICAiIiIKCiAgICAgICAgbWF0Y2hlcyA9IHN1bSh0cmlwbGVbLTFdIGZvciB0cmlwbGUgaW4gc2VsZi5nZXRfbWF0Y2hpbmdfYmxvY2tzKCkpCiAgICAgICAgcmV0dXJuIF9jYWxjdWxhdGVfcmF0aW8obWF0Y2hlcywgbGVuKHNlbGYuYSkgKyBsZW4oc2VsZi5iKSkKCiAgICBkZWYgcXVpY2tfcmF0aW8oc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGFuIHVwcGVyIGJvdW5kIG9uIHJhdGlvKCkgcmVsYXRpdmVseSBxdWlja2x5LgoKICAgICAgICBUaGlzIGlzbid0IGRlZmluZWQgYmV5b25kIHRoYXQgaXQgaXMgYW4gdXBwZXIgYm91bmQgb24gLnJhdGlvKCksIGFuZAogICAgICAgIGlzIGZhc3RlciB0byBjb21wdXRlLgogICAgICAgICIiIgoKICAgICAgICAjIHZpZXdpbmcgYSBhbmQgYiBhcyBtdWx0aXNldHMsIHNldCBtYXRjaGVzIHRvIHRoZSBjYXJkaW5hbGl0eQogICAgICAgICMgb2YgdGhlaXIgaW50ZXJzZWN0aW9uOyB0aGlzIGNvdW50cyB0aGUgbnVtYmVyIG9mIG1hdGNoZXMKICAgICAgICAjIHdpdGhvdXQgcmVnYXJkIHRvIG9yZGVyLCBzbyBpcyBjbGVhcmx5IGFuIHVwcGVyIGJvdW5kCiAgICAgICAgaWYgc2VsZi5mdWxsYmNvdW50IGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuZnVsbGJjb3VudCA9IGZ1bGxiY291bnQgPSB7fQogICAgICAgICAgICBmb3IgZWx0IGluIHNlbGYuYjoKICAgICAgICAgICAgICAgIGZ1bGxiY291bnRbZWx0XSA9IGZ1bGxiY291bnQuZ2V0KGVsdCwgMCkgKyAxCiAgICAgICAgZnVsbGJjb3VudCA9IHNlbGYuZnVsbGJjb3VudAogICAgICAgICMgYXZhaWxbeF0gaXMgdGhlIG51bWJlciBvZiB0aW1lcyB4IGFwcGVhcnMgaW4gJ2InIGxlc3MgdGhlCiAgICAgICAgIyBudW1iZXIgb2YgdGltZXMgd2UndmUgc2VlbiBpdCBpbiAnYScgc28gZmFyIC4uLiBraW5kYQogICAgICAgIGF2YWlsID0ge30KICAgICAgICBhdmFpbGhhcywgbWF0Y2hlcyA9IGF2YWlsLl9fY29udGFpbnNfXywgMAogICAgICAgIGZvciBlbHQgaW4gc2VsZi5hOgogICAgICAgICAgICBpZiBhdmFpbGhhcyhlbHQpOgogICAgICAgICAgICAgICAgbnVtYiA9IGF2YWlsW2VsdF0KICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIG51bWIgPSBmdWxsYmNvdW50LmdldChlbHQsIDApCiAgICAgICAgICAgIGF2YWlsW2VsdF0gPSBudW1iIC0gMQogICAgICAgICAgICBpZiBudW1iID4gMDoKICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBtYXRjaGVzICsgMQogICAgICAgIHJldHVybiBfY2FsY3VsYXRlX3JhdGlvKG1hdGNoZXMsIGxlbihzZWxmLmEpICsgbGVuKHNlbGYuYikpCgogICAgZGVmIHJlYWxfcXVpY2tfcmF0aW8oc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGFuIHVwcGVyIGJvdW5kIG9uIHJhdGlvKCkgdmVyeSBxdWlja2x5LgoKICAgICAgICBUaGlzIGlzbid0IGRlZmluZWQgYmV5b25kIHRoYXQgaXQgaXMgYW4gdXBwZXIgYm91bmQgb24gLnJhdGlvKCksIGFuZAogICAgICAgIGlzIGZhc3RlciB0byBjb21wdXRlIHRoYW4gZWl0aGVyIC5yYXRpbygpIG9yIC5xdWlja19yYXRpbygpLgogICAgICAgICIiIgoKICAgICAgICBsYSwgbGIgPSBsZW4oc2VsZi5hKSwgbGVuKHNlbGYuYikKICAgICAgICAjIGNhbid0IGhhdmUgbW9yZSBtYXRjaGVzIHRoYW4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUKICAgICAgICAjIHNob3J0ZXIgc2VxdWVuY2UKICAgICAgICByZXR1cm4gX2NhbGN1bGF0ZV9yYXRpbyhtaW4obGEsIGxiKSwgbGEgKyBsYikKCmRlZiBnZXRfY2xvc2VfbWF0Y2hlcyh3b3JkLCBwb3NzaWJpbGl0aWVzLCBuPTMsIGN1dG9mZj0wLjYpOgogICAgIiIiVXNlIFNlcXVlbmNlTWF0Y2hlciB0byByZXR1cm4gbGlzdCBvZiB0aGUgYmVzdCAiZ29vZCBlbm91Z2giIG1hdGNoZXMuCgogICAgd29yZCBpcyBhIHNlcXVlbmNlIGZvciB3aGljaCBjbG9zZSBtYXRjaGVzIGFyZSBkZXNpcmVkICh0eXBpY2FsbHkgYQogICAgc3RyaW5nKS4KCiAgICBwb3NzaWJpbGl0aWVzIGlzIGEgbGlzdCBvZiBzZXF1ZW5jZXMgYWdhaW5zdCB3aGljaCB0byBtYXRjaCB3b3JkCiAgICAodHlwaWNhbGx5IGEgbGlzdCBvZiBzdHJpbmdzKS4KCiAgICBPcHRpb25hbCBhcmcgbiAoZGVmYXVsdCAzKSBpcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgY2xvc2UgbWF0Y2hlcyB0bwogICAgcmV0dXJuLiAgbiBtdXN0IGJlID4gMC4KCiAgICBPcHRpb25hbCBhcmcgY3V0b2ZmIChkZWZhdWx0IDAuNikgaXMgYSBmbG9hdCBpbiBbMCwgMV0uICBQb3NzaWJpbGl0aWVzCiAgICB0aGF0IGRvbid0IHNjb3JlIGF0IGxlYXN0IHRoYXQgc2ltaWxhciB0byB3b3JkIGFyZSBpZ25vcmVkLgoKICAgIFRoZSBiZXN0IChubyBtb3JlIHRoYW4gbikgbWF0Y2hlcyBhbW9uZyB0aGUgcG9zc2liaWxpdGllcyBhcmUgcmV0dXJuZWQKICAgIGluIGEgbGlzdCwgc29ydGVkIGJ5IHNpbWlsYXJpdHkgc2NvcmUsIG1vc3Qgc2ltaWxhciBmaXJzdC4KCiAgICA+Pj4gZ2V0X2Nsb3NlX21hdGNoZXMoImFwcGVsIiwgWyJhcGUiLCAiYXBwbGUiLCAicGVhY2giLCAicHVwcHkiXSkKICAgIFsnYXBwbGUnLCAnYXBlJ10KICAgID4+PiBpbXBvcnQga2V5d29yZCBhcyBfa2V5d29yZAogICAgPj4+IGdldF9jbG9zZV9tYXRjaGVzKCJ3aGVlbCIsIF9rZXl3b3JkLmt3bGlzdCkKICAgIFsnd2hpbGUnXQogICAgPj4+IGdldF9jbG9zZV9tYXRjaGVzKCJBcHBsZSIsIF9rZXl3b3JkLmt3bGlzdCkKICAgIFtdCiAgICA+Pj4gZ2V0X2Nsb3NlX21hdGNoZXMoImFjY2VwdCIsIF9rZXl3b3JkLmt3bGlzdCkKICAgIFsnZXhjZXB0J10KICAgICIiIgoKICAgIGlmIG5vdCBuID4gIDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigibiBtdXN0IGJlID4gMDogJXIiICUgKG4sKSkKICAgIGlmIG5vdCAwLjAgPD0gY3V0b2ZmIDw9IDEuMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJjdXRvZmYgbXVzdCBiZSBpbiBbMC4wLCAxLjBdOiAlciIgJSAoY3V0b2ZmLCkpCiAgICByZXN1bHQgPSBbXQogICAgcyA9IFNlcXVlbmNlTWF0Y2hlcigpCiAgICBzLnNldF9zZXEyKHdvcmQpCiAgICBmb3IgeCBpbiBwb3NzaWJpbGl0aWVzOgogICAgICAgIHMuc2V0X3NlcTEoeCkKICAgICAgICBpZiBzLnJlYWxfcXVpY2tfcmF0aW8oKSA+PSBjdXRvZmYgYW5kIFwKICAgICAgICAgICBzLnF1aWNrX3JhdGlvKCkgPj0gY3V0b2ZmIGFuZCBcCiAgICAgICAgICAgcy5yYXRpbygpID49IGN1dG9mZjoKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCgocy5yYXRpbygpLCB4KSkKCiAgICAjIE1vdmUgdGhlIGJlc3Qgc2NvcmVycyB0byBoZWFkIG9mIGxpc3QKICAgIHJlc3VsdCA9IGhlYXBxLm5sYXJnZXN0KG4sIHJlc3VsdCkKICAgICMgU3RyaXAgc2NvcmVzIGZvciB0aGUgYmVzdCBuIG1hdGNoZXMKICAgIHJldHVybiBbeCBmb3Igc2NvcmUsIHggaW4gcmVzdWx0XQoKZGVmIF9jb3VudF9sZWFkaW5nKGxpbmUsIGNoKToKICAgICIiIgogICAgUmV0dXJuIG51bWJlciBvZiBgY2hgIGNoYXJhY3RlcnMgYXQgdGhlIHN0YXJ0IG9mIGBsaW5lYC4KCiAgICBFeGFtcGxlOgoKICAgID4+PiBfY291bnRfbGVhZGluZygnICAgYWJjJywgJyAnKQogICAgMwogICAgIiIiCgogICAgaSwgbiA9IDAsIGxlbihsaW5lKQogICAgd2hpbGUgaSA8IG4gYW5kIGxpbmVbaV0gPT0gY2g6CiAgICAgICAgaSArPSAxCiAgICByZXR1cm4gaQoKY2xhc3MgRGlmZmVyOgogICAgciIiIgogICAgRGlmZmVyIGlzIGEgY2xhc3MgZm9yIGNvbXBhcmluZyBzZXF1ZW5jZXMgb2YgbGluZXMgb2YgdGV4dCwgYW5kCiAgICBwcm9kdWNpbmcgaHVtYW4tcmVhZGFibGUgZGlmZmVyZW5jZXMgb3IgZGVsdGFzLiAgRGlmZmVyIHVzZXMKICAgIFNlcXVlbmNlTWF0Y2hlciBib3RoIHRvIGNvbXBhcmUgc2VxdWVuY2VzIG9mIGxpbmVzLCBhbmQgdG8gY29tcGFyZQogICAgc2VxdWVuY2VzIG9mIGNoYXJhY3RlcnMgd2l0aGluIHNpbWlsYXIgKG5lYXItbWF0Y2hpbmcpIGxpbmVzLgoKICAgIEVhY2ggbGluZSBvZiBhIERpZmZlciBkZWx0YSBiZWdpbnMgd2l0aCBhIHR3by1sZXR0ZXIgY29kZToKCiAgICAgICAgJy0gJyAgICBsaW5lIHVuaXF1ZSB0byBzZXF1ZW5jZSAxCiAgICAgICAgJysgJyAgICBsaW5lIHVuaXF1ZSB0byBzZXF1ZW5jZSAyCiAgICAgICAgJyAgJyAgICBsaW5lIGNvbW1vbiB0byBib3RoIHNlcXVlbmNlcwogICAgICAgICc/ICcgICAgbGluZSBub3QgcHJlc2VudCBpbiBlaXRoZXIgaW5wdXQgc2VxdWVuY2UKCiAgICBMaW5lcyBiZWdpbm5pbmcgd2l0aCAnPyAnIGF0dGVtcHQgdG8gZ3VpZGUgdGhlIGV5ZSB0byBpbnRyYWxpbmUKICAgIGRpZmZlcmVuY2VzLCBhbmQgd2VyZSBub3QgcHJlc2VudCBpbiBlaXRoZXIgaW5wdXQgc2VxdWVuY2UuICBUaGVzZSBsaW5lcwogICAgY2FuIGJlIGNvbmZ1c2luZyBpZiB0aGUgc2VxdWVuY2VzIGNvbnRhaW4gdGFiIGNoYXJhY3RlcnMuCgogICAgTm90ZSB0aGF0IERpZmZlciBtYWtlcyBubyBjbGFpbSB0byBwcm9kdWNlIGEgKm1pbmltYWwqIGRpZmYuICBUbyB0aGUKICAgIGNvbnRyYXJ5LCBtaW5pbWFsIGRpZmZzIGFyZSBvZnRlbiBjb3VudGVyLWludHVpdGl2ZSwgYmVjYXVzZSB0aGV5IHN5bmNoCiAgICB1cCBhbnl3aGVyZSBwb3NzaWJsZSwgc29tZXRpbWVzIGFjY2lkZW50YWwgbWF0Y2hlcyAxMDAgcGFnZXMgYXBhcnQuCiAgICBSZXN0cmljdGluZyBzeW5jaCBwb2ludHMgdG8gY29udGlndW91cyBtYXRjaGVzIHByZXNlcnZlcyBzb21lIG5vdGlvbiBvZgogICAgbG9jYWxpdHksIGF0IHRoZSBvY2Nhc2lvbmFsIGNvc3Qgb2YgcHJvZHVjaW5nIGEgbG9uZ2VyIGRpZmYuCgogICAgRXhhbXBsZTogQ29tcGFyaW5nIHR3byB0ZXh0cy4KCiAgICBGaXJzdCB3ZSBzZXQgdXAgdGhlIHRleHRzLCBzZXF1ZW5jZXMgb2YgaW5kaXZpZHVhbCBzaW5nbGUtbGluZSBzdHJpbmdzCiAgICBlbmRpbmcgd2l0aCBuZXdsaW5lcyAoc3VjaCBzZXF1ZW5jZXMgY2FuIGFsc28gYmUgb2J0YWluZWQgZnJvbSB0aGUKICAgIGByZWFkbGluZXMoKWAgbWV0aG9kIG9mIGZpbGUtbGlrZSBvYmplY3RzKToKCiAgICA+Pj4gdGV4dDEgPSAnJycgIDEuIEJlYXV0aWZ1bCBpcyBiZXR0ZXIgdGhhbiB1Z2x5LgogICAgLi4uICAgMi4gRXhwbGljaXQgaXMgYmV0dGVyIHRoYW4gaW1wbGljaXQuCiAgICAuLi4gICAzLiBTaW1wbGUgaXMgYmV0dGVyIHRoYW4gY29tcGxleC4KICAgIC4uLiAgIDQuIENvbXBsZXggaXMgYmV0dGVyIHRoYW4gY29tcGxpY2F0ZWQuCiAgICAuLi4gJycnLnNwbGl0bGluZXMoa2VlcGVuZHM9VHJ1ZSkKICAgID4+PiBsZW4odGV4dDEpCiAgICA0CiAgICA+Pj4gdGV4dDFbMF1bLTFdCiAgICAnXG4nCiAgICA+Pj4gdGV4dDIgPSAnJycgIDEuIEJlYXV0aWZ1bCBpcyBiZXR0ZXIgdGhhbiB1Z2x5LgogICAgLi4uICAgMy4gICBTaW1wbGUgaXMgYmV0dGVyIHRoYW4gY29tcGxleC4KICAgIC4uLiAgIDQuIENvbXBsaWNhdGVkIGlzIGJldHRlciB0aGFuIGNvbXBsZXguCiAgICAuLi4gICA1LiBGbGF0IGlzIGJldHRlciB0aGFuIG5lc3RlZC4KICAgIC4uLiAnJycuc3BsaXRsaW5lcyhrZWVwZW5kcz1UcnVlKQoKICAgIE5leHQgd2UgaW5zdGFudGlhdGUgYSBEaWZmZXIgb2JqZWN0OgoKICAgID4+PiBkID0gRGlmZmVyKCkKCiAgICBOb3RlIHRoYXQgd2hlbiBpbnN0YW50aWF0aW5nIGEgRGlmZmVyIG9iamVjdCB3ZSBtYXkgcGFzcyBmdW5jdGlvbnMgdG8KICAgIGZpbHRlciBvdXQgbGluZSBhbmQgY2hhcmFjdGVyICdqdW5rJy4gIFNlZSBEaWZmZXIuX19pbml0X18gZm9yIGRldGFpbHMuCgogICAgRmluYWxseSwgd2UgY29tcGFyZSB0aGUgdHdvOgoKICAgID4+PiByZXN1bHQgPSBsaXN0KGQuY29tcGFyZSh0ZXh0MSwgdGV4dDIpKQoKICAgICdyZXN1bHQnIGlzIGEgbGlzdCBvZiBzdHJpbmdzLCBzbyBsZXQncyBwcmV0dHktcHJpbnQgaXQ6CgogICAgPj4+IGZyb20gcHByaW50IGltcG9ydCBwcHJpbnQgYXMgX3BwcmludAogICAgPj4+IF9wcHJpbnQocmVzdWx0KQogICAgWycgICAgMS4gQmVhdXRpZnVsIGlzIGJldHRlciB0aGFuIHVnbHkuXG4nLAogICAgICctICAgMi4gRXhwbGljaXQgaXMgYmV0dGVyIHRoYW4gaW1wbGljaXQuXG4nLAogICAgICctICAgMy4gU2ltcGxlIGlzIGJldHRlciB0aGFuIGNvbXBsZXguXG4nLAogICAgICcrICAgMy4gICBTaW1wbGUgaXMgYmV0dGVyIHRoYW4gY29tcGxleC5cbicsCiAgICAgJz8gICAgICsrXG4nLAogICAgICctICAgNC4gQ29tcGxleCBpcyBiZXR0ZXIgdGhhbiBjb21wbGljYXRlZC5cbicsCiAgICAgJz8gICAgICAgICAgICBeICAgICAgICAgICAgICAgICAgICAgLS0tLSBeXG4nLAogICAgICcrICAgNC4gQ29tcGxpY2F0ZWQgaXMgYmV0dGVyIHRoYW4gY29tcGxleC5cbicsCiAgICAgJz8gICAgICAgICAgICsrKysgXiAgICAgICAgICAgICAgICAgICAgICBeXG4nLAogICAgICcrICAgNS4gRmxhdCBpcyBiZXR0ZXIgdGhhbiBuZXN0ZWQuXG4nXQoKICAgIEFzIGEgc2luZ2xlIG11bHRpLWxpbmUgc3RyaW5nIGl0IGxvb2tzIGxpa2UgdGhpczoKCiAgICA+Pj4gcHJpbnQoJycuam9pbihyZXN1bHQpLCBlbmQ9IiIpCiAgICAgICAgMS4gQmVhdXRpZnVsIGlzIGJldHRlciB0aGFuIHVnbHkuCiAgICAtICAgMi4gRXhwbGljaXQgaXMgYmV0dGVyIHRoYW4gaW1wbGljaXQuCiAgICAtICAgMy4gU2ltcGxlIGlzIGJldHRlciB0aGFuIGNvbXBsZXguCiAgICArICAgMy4gICBTaW1wbGUgaXMgYmV0dGVyIHRoYW4gY29tcGxleC4KICAgID8gICAgICsrCiAgICAtICAgNC4gQ29tcGxleCBpcyBiZXR0ZXIgdGhhbiBjb21wbGljYXRlZC4KICAgID8gICAgICAgICAgICBeICAgICAgICAgICAgICAgICAgICAgLS0tLSBeCiAgICArICAgNC4gQ29tcGxpY2F0ZWQgaXMgYmV0dGVyIHRoYW4gY29tcGxleC4KICAgID8gICAgICAgICAgICsrKysgXiAgICAgICAgICAgICAgICAgICAgICBeCiAgICArICAgNS4gRmxhdCBpcyBiZXR0ZXIgdGhhbiBuZXN0ZWQuCgogICAgTWV0aG9kczoKCiAgICBfX2luaXRfXyhsaW5lanVuaz1Ob25lLCBjaGFyanVuaz1Ob25lKQogICAgICAgIENvbnN0cnVjdCBhIHRleHQgZGlmZmVyZW5jZXIsIHdpdGggb3B0aW9uYWwgZmlsdGVycy4KCiAgICBjb21wYXJlKGEsIGIpCiAgICAgICAgQ29tcGFyZSB0d28gc2VxdWVuY2VzIG9mIGxpbmVzOyBnZW5lcmF0ZSB0aGUgcmVzdWx0aW5nIGRlbHRhLgogICAgIiIiCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGxpbmVqdW5rPU5vbmUsIGNoYXJqdW5rPU5vbmUpOgogICAgICAgICIiIgogICAgICAgIENvbnN0cnVjdCBhIHRleHQgZGlmZmVyZW5jZXIsIHdpdGggb3B0aW9uYWwgZmlsdGVycy4KCiAgICAgICAgVGhlIHR3byBvcHRpb25hbCBrZXl3b3JkIHBhcmFtZXRlcnMgYXJlIGZvciBmaWx0ZXIgZnVuY3Rpb25zOgoKICAgICAgICAtIGBsaW5lanVua2A6IEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYWNjZXB0IGEgc2luZ2xlIHN0cmluZyBhcmd1bWVudCwKICAgICAgICAgIGFuZCByZXR1cm4gdHJ1ZSBpZmYgdGhlIHN0cmluZyBpcyBqdW5rLiBUaGUgbW9kdWxlLWxldmVsIGZ1bmN0aW9uCiAgICAgICAgICBgSVNfTElORV9KVU5LYCBtYXkgYmUgdXNlZCB0byBmaWx0ZXIgb3V0IGxpbmVzIHdpdGhvdXQgdmlzaWJsZQogICAgICAgICAgY2hhcmFjdGVycywgZXhjZXB0IGZvciBhdCBtb3N0IG9uZSBzcGxhdCAoJyMnKS4gIEl0IGlzIHJlY29tbWVuZGVkCiAgICAgICAgICB0byBsZWF2ZSBsaW5lanVuayBOb25lOyBhcyBvZiBQeXRob24gMi4zLCB0aGUgdW5kZXJseWluZwogICAgICAgICAgU2VxdWVuY2VNYXRjaGVyIGNsYXNzIGhhcyBncm93biBhbiBhZGFwdGl2ZSBub3Rpb24gb2YgIm5vaXNlIiBsaW5lcwogICAgICAgICAgdGhhdCdzIGJldHRlciB0aGFuIGFueSBzdGF0aWMgZGVmaW5pdGlvbiB0aGUgYXV0aG9yIGhhcyBldmVyIGJlZW4KICAgICAgICAgIGFibGUgdG8gY3JhZnQuCgogICAgICAgIC0gYGNoYXJqdW5rYDogQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBhY2NlcHQgYSBzdHJpbmcgb2YgbGVuZ3RoIDEuIFRoZQogICAgICAgICAgbW9kdWxlLWxldmVsIGZ1bmN0aW9uIGBJU19DSEFSQUNURVJfSlVOS2AgbWF5IGJlIHVzZWQgdG8gZmlsdGVyIG91dAogICAgICAgICAgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzIChhIGJsYW5rIG9yIHRhYjsgKipub3RlKio6IGJhZCBpZGVhIHRvIGluY2x1ZGUKICAgICAgICAgIG5ld2xpbmUgaW4gdGhpcyEpLiAgVXNlIG9mIElTX0NIQVJBQ1RFUl9KVU5LIGlzIHJlY29tbWVuZGVkLgogICAgICAgICIiIgoKICAgICAgICBzZWxmLmxpbmVqdW5rID0gbGluZWp1bmsKICAgICAgICBzZWxmLmNoYXJqdW5rID0gY2hhcmp1bmsKCiAgICBkZWYgY29tcGFyZShzZWxmLCBhLCBiKToKICAgICAgICByIiIiCiAgICAgICAgQ29tcGFyZSB0d28gc2VxdWVuY2VzIG9mIGxpbmVzOyBnZW5lcmF0ZSB0aGUgcmVzdWx0aW5nIGRlbHRhLgoKICAgICAgICBFYWNoIHNlcXVlbmNlIG11c3QgY29udGFpbiBpbmRpdmlkdWFsIHNpbmdsZS1saW5lIHN0cmluZ3MgZW5kaW5nIHdpdGgKICAgICAgICBuZXdsaW5lcy4gU3VjaCBzZXF1ZW5jZXMgY2FuIGJlIG9idGFpbmVkIGZyb20gdGhlIGByZWFkbGluZXMoKWAgbWV0aG9kCiAgICAgICAgb2YgZmlsZS1saWtlIG9iamVjdHMuICBUaGUgZGVsdGEgZ2VuZXJhdGVkIGFsc28gY29uc2lzdHMgb2YgbmV3bGluZS0KICAgICAgICB0ZXJtaW5hdGVkIHN0cmluZ3MsIHJlYWR5IHRvIGJlIHByaW50ZWQgYXMtaXMgdmlhIHRoZSB3cml0ZWxpbmUoKQogICAgICAgIG1ldGhvZCBvZiBhIGZpbGUtbGlrZSBvYmplY3QuCgogICAgICAgIEV4YW1wbGU6CgogICAgICAgID4+PiBwcmludCgnJy5qb2luKERpZmZlcigpLmNvbXBhcmUoJ29uZVxudHdvXG50aHJlZVxuJy5zcGxpdGxpbmVzKFRydWUpLAogICAgICAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29yZVxudHJlZVxuZW11XG4nLnNwbGl0bGluZXMoVHJ1ZSkpKSwKICAgICAgICAuLi4gICAgICAgZW5kPSIiKQogICAgICAgIC0gb25lCiAgICAgICAgPyAgXgogICAgICAgICsgb3JlCiAgICAgICAgPyAgXgogICAgICAgIC0gdHdvCiAgICAgICAgLSB0aHJlZQogICAgICAgID8gIC0KICAgICAgICArIHRyZWUKICAgICAgICArIGVtdQogICAgICAgICIiIgoKICAgICAgICBjcnVuY2hlciA9IFNlcXVlbmNlTWF0Y2hlcihzZWxmLmxpbmVqdW5rLCBhLCBiKQogICAgICAgIGZvciB0YWcsIGFsbywgYWhpLCBibG8sIGJoaSBpbiBjcnVuY2hlci5nZXRfb3Bjb2RlcygpOgogICAgICAgICAgICBpZiB0YWcgPT0gJ3JlcGxhY2UnOgogICAgICAgICAgICAgICAgZyA9IHNlbGYuX2ZhbmN5X3JlcGxhY2UoYSwgYWxvLCBhaGksIGIsIGJsbywgYmhpKQogICAgICAgICAgICBlbGlmIHRhZyA9PSAnZGVsZXRlJzoKICAgICAgICAgICAgICAgIGcgPSBzZWxmLl9kdW1wKCctJywgYSwgYWxvLCBhaGkpCiAgICAgICAgICAgIGVsaWYgdGFnID09ICdpbnNlcnQnOgogICAgICAgICAgICAgICAgZyA9IHNlbGYuX2R1bXAoJysnLCBiLCBibG8sIGJoaSkKICAgICAgICAgICAgZWxpZiB0YWcgPT0gJ2VxdWFsJzoKICAgICAgICAgICAgICAgIGcgPSBzZWxmLl9kdW1wKCcgJywgYSwgYWxvLCBhaGkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCd1bmtub3duIHRhZyAlcicgJSAodGFnLCkpCgogICAgICAgICAgICBmb3IgbGluZSBpbiBnOgogICAgICAgICAgICAgICAgeWllbGQgbGluZQoKICAgIGRlZiBfZHVtcChzZWxmLCB0YWcsIHgsIGxvLCBoaSk6CiAgICAgICAgIiIiR2VuZXJhdGUgY29tcGFyaXNvbiByZXN1bHRzIGZvciBhIHNhbWUtdGFnZ2VkIHJhbmdlLiIiIgogICAgICAgIGZvciBpIGluIHJhbmdlKGxvLCBoaSk6CiAgICAgICAgICAgIHlpZWxkICclcyAlcycgJSAodGFnLCB4W2ldKQoKICAgIGRlZiBfcGxhaW5fcmVwbGFjZShzZWxmLCBhLCBhbG8sIGFoaSwgYiwgYmxvLCBiaGkpOgogICAgICAgIGFzc2VydCBhbG8gPCBhaGkgYW5kIGJsbyA8IGJoaQogICAgICAgICMgZHVtcCB0aGUgc2hvcnRlciBibG9jayBmaXJzdCAtLSByZWR1Y2VzIHRoZSBidXJkZW4gb24gc2hvcnQtdGVybQogICAgICAgICMgbWVtb3J5IGlmIHRoZSBibG9ja3MgYXJlIG9mIHZlcnkgZGlmZmVyZW50IHNpemVzCiAgICAgICAgaWYgYmhpIC0gYmxvIDwgYWhpIC0gYWxvOgogICAgICAgICAgICBmaXJzdCAgPSBzZWxmLl9kdW1wKCcrJywgYiwgYmxvLCBiaGkpCiAgICAgICAgICAgIHNlY29uZCA9IHNlbGYuX2R1bXAoJy0nLCBhLCBhbG8sIGFoaSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBmaXJzdCAgPSBzZWxmLl9kdW1wKCctJywgYSwgYWxvLCBhaGkpCiAgICAgICAgICAgIHNlY29uZCA9IHNlbGYuX2R1bXAoJysnLCBiLCBibG8sIGJoaSkKCiAgICAgICAgZm9yIGcgaW4gZmlyc3QsIHNlY29uZDoKICAgICAgICAgICAgZm9yIGxpbmUgaW4gZzoKICAgICAgICAgICAgICAgIHlpZWxkIGxpbmUKCiAgICBkZWYgX2ZhbmN5X3JlcGxhY2Uoc2VsZiwgYSwgYWxvLCBhaGksIGIsIGJsbywgYmhpKToKICAgICAgICByIiIiCiAgICAgICAgV2hlbiByZXBsYWNpbmcgb25lIGJsb2NrIG9mIGxpbmVzIHdpdGggYW5vdGhlciwgc2VhcmNoIHRoZSBibG9ja3MKICAgICAgICBmb3IgKnNpbWlsYXIqIGxpbmVzOyB0aGUgYmVzdC1tYXRjaGluZyBwYWlyIChpZiBhbnkpIGlzIHVzZWQgYXMgYQogICAgICAgIHN5bmNoIHBvaW50LCBhbmQgaW50cmFsaW5lIGRpZmZlcmVuY2UgbWFya2luZyBpcyBkb25lIG9uIHRoZQogICAgICAgIHNpbWlsYXIgcGFpci4gTG90cyBvZiB3b3JrLCBidXQgb2Z0ZW4gd29ydGggaXQuCgogICAgICAgIEV4YW1wbGU6CgogICAgICAgID4+PiBkID0gRGlmZmVyKCkKICAgICAgICA+Pj4gcmVzdWx0cyA9IGQuX2ZhbmN5X3JlcGxhY2UoWydhYmNEZWZnaGlKa2xcbiddLCAwLCAxLAogICAgICAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ2FiY2RlZkdoaWprbFxuJ10sIDAsIDEpCiAgICAgICAgPj4+IHByaW50KCcnLmpvaW4ocmVzdWx0cyksIGVuZD0iIikKICAgICAgICAtIGFiY0RlZmdoaUprbAogICAgICAgID8gICAgXiAgXiAgXgogICAgICAgICsgYWJjZGVmR2hpamtsCiAgICAgICAgPyAgICBeICBeICBeCiAgICAgICAgIiIiCgogICAgICAgICMgZG9uJ3Qgc3luY2ggdXAgdW5sZXNzIHRoZSBsaW5lcyBoYXZlIGEgc2ltaWxhcml0eSBzY29yZSBvZiBhdAogICAgICAgICMgbGVhc3QgY3V0b2ZmOyBiZXN0X3JhdGlvIHRyYWNrcyB0aGUgYmVzdCBzY29yZSBzZWVuIHNvIGZhcgogICAgICAgIGJlc3RfcmF0aW8sIGN1dG9mZiA9IDAuNzQsIDAuNzUKICAgICAgICBjcnVuY2hlciA9IFNlcXVlbmNlTWF0Y2hlcihzZWxmLmNoYXJqdW5rKQogICAgICAgIGVxaSwgZXFqID0gTm9uZSwgTm9uZSAgICMgMXN0IGluZGljZXMgb2YgZXF1YWwgbGluZXMgKGlmIGFueSkKCiAgICAgICAgIyBzZWFyY2ggZm9yIHRoZSBwYWlyIHRoYXQgbWF0Y2hlcyBiZXN0IHdpdGhvdXQgYmVpbmcgaWRlbnRpY2FsCiAgICAgICAgIyAoaWRlbnRpY2FsIGxpbmVzIG11c3QgYmUganVuayBsaW5lcywgJiB3ZSBkb24ndCB3YW50IHRvIHN5bmNoIHVwCiAgICAgICAgIyBvbiBqdW5rIC0tIHVubGVzcyB3ZSBoYXZlIHRvKQogICAgICAgIGZvciBqIGluIHJhbmdlKGJsbywgYmhpKToKICAgICAgICAgICAgYmogPSBiW2pdCiAgICAgICAgICAgIGNydW5jaGVyLnNldF9zZXEyKGJqKQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShhbG8sIGFoaSk6CiAgICAgICAgICAgICAgICBhaSA9IGFbaV0KICAgICAgICAgICAgICAgIGlmIGFpID09IGJqOgogICAgICAgICAgICAgICAgICAgIGlmIGVxaSBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICBlcWksIGVxaiA9IGksIGoKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgY3J1bmNoZXIuc2V0X3NlcTEoYWkpCiAgICAgICAgICAgICAgICAjIGNvbXB1dGluZyBzaW1pbGFyaXR5IGlzIGV4cGVuc2l2ZSwgc28gdXNlIHRoZSBxdWljawogICAgICAgICAgICAgICAgIyB1cHBlciBib3VuZHMgZmlyc3QgLS0gaGF2ZSBzZWVuIHRoaXMgc3BlZWQgdXAgbWVzc3kKICAgICAgICAgICAgICAgICMgY29tcGFyZXMgYnkgYSBmYWN0b3Igb2YgMy4KICAgICAgICAgICAgICAgICMgbm90ZSB0aGF0IHJhdGlvKCkgaXMgb25seSBleHBlbnNpdmUgdG8gY29tcHV0ZSB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICMgdGltZSBpdCdzIGNhbGxlZCBvbiBhIHNlcXVlbmNlIHBhaXI7IHRoZSBleHBlbnNpdmUgcGFydAogICAgICAgICAgICAgICAgIyBvZiB0aGUgY29tcHV0YXRpb24gaXMgY2FjaGVkIGJ5IGNydW5jaGVyCiAgICAgICAgICAgICAgICBpZiBjcnVuY2hlci5yZWFsX3F1aWNrX3JhdGlvKCkgPiBiZXN0X3JhdGlvIGFuZCBcCiAgICAgICAgICAgICAgICAgICAgICBjcnVuY2hlci5xdWlja19yYXRpbygpID4gYmVzdF9yYXRpbyBhbmQgXAogICAgICAgICAgICAgICAgICAgICAgY3J1bmNoZXIucmF0aW8oKSA+IGJlc3RfcmF0aW86CiAgICAgICAgICAgICAgICAgICAgYmVzdF9yYXRpbywgYmVzdF9pLCBiZXN0X2ogPSBjcnVuY2hlci5yYXRpbygpLCBpLCBqCiAgICAgICAgaWYgYmVzdF9yYXRpbyA8IGN1dG9mZjoKICAgICAgICAgICAgIyBubyBub24taWRlbnRpY2FsICJwcmV0dHkgY2xvc2UiIHBhaXIKICAgICAgICAgICAgaWYgZXFpIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAjIG5vIGlkZW50aWNhbCBwYWlyIGVpdGhlciAtLSB0cmVhdCBpdCBhcyBhIHN0cmFpZ2h0IHJlcGxhY2UKICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIHNlbGYuX3BsYWluX3JlcGxhY2UoYSwgYWxvLCBhaGksIGIsIGJsbywgYmhpKToKICAgICAgICAgICAgICAgICAgICB5aWVsZCBsaW5lCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgIyBubyBjbG9zZSBwYWlyLCBidXQgYW4gaWRlbnRpY2FsIHBhaXIgLS0gc3luY2ggdXAgb24gdGhhdAogICAgICAgICAgICBiZXN0X2ksIGJlc3RfaiwgYmVzdF9yYXRpbyA9IGVxaSwgZXFqLCAxLjAKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIHRoZXJlJ3MgYSBjbG9zZSBwYWlyLCBzbyBmb3JnZXQgdGhlIGlkZW50aWNhbCBwYWlyIChpZiBhbnkpCiAgICAgICAgICAgIGVxaSA9IE5vbmUKCiAgICAgICAgIyBhW2Jlc3RfaV0gdmVyeSBzaW1pbGFyIHRvIGJbYmVzdF9qXTsgZXFpIGlzIE5vbmUgaWZmIHRoZXkncmUgbm90CiAgICAgICAgIyBpZGVudGljYWwKCiAgICAgICAgIyBwdW1wIG91dCBkaWZmcyBmcm9tIGJlZm9yZSB0aGUgc3luY2ggcG9pbnQKICAgICAgICBmb3IgbGluZSBpbiBzZWxmLl9mYW5jeV9oZWxwZXIoYSwgYWxvLCBiZXN0X2ksIGIsIGJsbywgYmVzdF9qKToKICAgICAgICAgICAgeWllbGQgbGluZQoKICAgICAgICAjIGRvIGludHJhbGluZSBtYXJraW5nIG9uIHRoZSBzeW5jaCBwYWlyCiAgICAgICAgYWVsdCwgYmVsdCA9IGFbYmVzdF9pXSwgYltiZXN0X2pdCiAgICAgICAgaWYgZXFpIGlzIE5vbmU6CiAgICAgICAgICAgICMgcHVtcCBvdXQgYSAnLScsICc/JywgJysnLCAnPycgcXVhZCBmb3IgdGhlIHN5bmNoZWQgbGluZXMKICAgICAgICAgICAgYXRhZ3MgPSBidGFncyA9ICIiCiAgICAgICAgICAgIGNydW5jaGVyLnNldF9zZXFzKGFlbHQsIGJlbHQpCiAgICAgICAgICAgIGZvciB0YWcsIGFpMSwgYWkyLCBiajEsIGJqMiBpbiBjcnVuY2hlci5nZXRfb3Bjb2RlcygpOgogICAgICAgICAgICAgICAgbGEsIGxiID0gYWkyIC0gYWkxLCBiajIgLSBiajEKICAgICAgICAgICAgICAgIGlmIHRhZyA9PSAncmVwbGFjZSc6CiAgICAgICAgICAgICAgICAgICAgYXRhZ3MgKz0gJ14nICogbGEKICAgICAgICAgICAgICAgICAgICBidGFncyArPSAnXicgKiBsYgogICAgICAgICAgICAgICAgZWxpZiB0YWcgPT0gJ2RlbGV0ZSc6CiAgICAgICAgICAgICAgICAgICAgYXRhZ3MgKz0gJy0nICogbGEKICAgICAgICAgICAgICAgIGVsaWYgdGFnID09ICdpbnNlcnQnOgogICAgICAgICAgICAgICAgICAgIGJ0YWdzICs9ICcrJyAqIGxiCiAgICAgICAgICAgICAgICBlbGlmIHRhZyA9PSAnZXF1YWwnOgogICAgICAgICAgICAgICAgICAgIGF0YWdzICs9ICcgJyAqIGxhCiAgICAgICAgICAgICAgICAgICAgYnRhZ3MgKz0gJyAnICogbGIKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigndW5rbm93biB0YWcgJXInICUgKHRhZywpKQogICAgICAgICAgICBmb3IgbGluZSBpbiBzZWxmLl9xZm9ybWF0KGFlbHQsIGJlbHQsIGF0YWdzLCBidGFncyk6CiAgICAgICAgICAgICAgICB5aWVsZCBsaW5lCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyB0aGUgc3luY2ggcGFpciBpcyBpZGVudGljYWwKICAgICAgICAgICAgeWllbGQgJyAgJyArIGFlbHQKCiAgICAgICAgIyBwdW1wIG91dCBkaWZmcyBmcm9tIGFmdGVyIHRoZSBzeW5jaCBwb2ludAogICAgICAgIGZvciBsaW5lIGluIHNlbGYuX2ZhbmN5X2hlbHBlcihhLCBiZXN0X2krMSwgYWhpLCBiLCBiZXN0X2orMSwgYmhpKToKICAgICAgICAgICAgeWllbGQgbGluZQoKICAgIGRlZiBfZmFuY3lfaGVscGVyKHNlbGYsIGEsIGFsbywgYWhpLCBiLCBibG8sIGJoaSk6CiAgICAgICAgZyA9IFtdCiAgICAgICAgaWYgYWxvIDwgYWhpOgogICAgICAgICAgICBpZiBibG8gPCBiaGk6CiAgICAgICAgICAgICAgICBnID0gc2VsZi5fZmFuY3lfcmVwbGFjZShhLCBhbG8sIGFoaSwgYiwgYmxvLCBiaGkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBnID0gc2VsZi5fZHVtcCgnLScsIGEsIGFsbywgYWhpKQogICAgICAgIGVsaWYgYmxvIDwgYmhpOgogICAgICAgICAgICBnID0gc2VsZi5fZHVtcCgnKycsIGIsIGJsbywgYmhpKQoKICAgICAgICBmb3IgbGluZSBpbiBnOgogICAgICAgICAgICB5aWVsZCBsaW5lCgogICAgZGVmIF9xZm9ybWF0KHNlbGYsIGFsaW5lLCBibGluZSwgYXRhZ3MsIGJ0YWdzKToKICAgICAgICByIiIiCiAgICAgICAgRm9ybWF0ICI/IiBvdXRwdXQgYW5kIGRlYWwgd2l0aCBsZWFkaW5nIHRhYnMuCgogICAgICAgIEV4YW1wbGU6CgogICAgICAgID4+PiBkID0gRGlmZmVyKCkKICAgICAgICA+Pj4gcmVzdWx0cyA9IGQuX3Fmb3JtYXQoJ1x0YWJjRGVmZ2hpSmtsXG4nLCAnXHRhYmNkZWZHaGlqa2xcbicsCiAgICAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICcgIF4gXiAgXiAgICAgICcsICcgIF4gXiAgXiAgICAgICcpCiAgICAgICAgPj4+IGZvciBsaW5lIGluIHJlc3VsdHM6IHByaW50KHJlcHIobGluZSkpCiAgICAgICAgLi4uCiAgICAgICAgJy0gXHRhYmNEZWZnaGlKa2xcbicKICAgICAgICAnPyBcdCBeIF4gIF5cbicKICAgICAgICAnKyBcdGFiY2RlZkdoaWprbFxuJwogICAgICAgICc/IFx0IF4gXiAgXlxuJwogICAgICAgICIiIgoKICAgICAgICAjIENhbiBodXJ0LCBidXQgd2lsbCBwcm9iYWJseSBoZWxwIG1vc3Qgb2YgdGhlIHRpbWUuCiAgICAgICAgY29tbW9uID0gbWluKF9jb3VudF9sZWFkaW5nKGFsaW5lLCAiXHQiKSwKICAgICAgICAgICAgICAgICAgICAgX2NvdW50X2xlYWRpbmcoYmxpbmUsICJcdCIpKQogICAgICAgIGNvbW1vbiA9IG1pbihjb21tb24sIF9jb3VudF9sZWFkaW5nKGF0YWdzWzpjb21tb25dLCAiICIpKQogICAgICAgIGNvbW1vbiA9IG1pbihjb21tb24sIF9jb3VudF9sZWFkaW5nKGJ0YWdzWzpjb21tb25dLCAiICIpKQogICAgICAgIGF0YWdzID0gYXRhZ3NbY29tbW9uOl0ucnN0cmlwKCkKICAgICAgICBidGFncyA9IGJ0YWdzW2NvbW1vbjpdLnJzdHJpcCgpCgogICAgICAgIHlpZWxkICItICIgKyBhbGluZQogICAgICAgIGlmIGF0YWdzOgogICAgICAgICAgICB5aWVsZCAiPyAlcyVzXG4iICUgKCJcdCIgKiBjb21tb24sIGF0YWdzKQoKICAgICAgICB5aWVsZCAiKyAiICsgYmxpbmUKICAgICAgICBpZiBidGFnczoKICAgICAgICAgICAgeWllbGQgIj8gJXMlc1xuIiAlICgiXHQiICogY29tbW9uLCBidGFncykKCiMgV2l0aCByZXNwZWN0IHRvIGp1bmssIGFuIGVhcmxpZXIgdmVyc2lvbiBvZiBuZGlmZiBzaW1wbHkgcmVmdXNlZCB0bwojICpzdGFydCogYSBtYXRjaCB3aXRoIGEganVuayBlbGVtZW50LiAgVGhlIHJlc3VsdCB3YXMgY2FzZXMgbGlrZSB0aGlzOgojICAgICBiZWZvcmU6IHByaXZhdGUgVGhyZWFkIGN1cnJlbnRUaHJlYWQ7CiMgICAgIGFmdGVyOiAgcHJpdmF0ZSB2b2xhdGlsZSBUaHJlYWQgY3VycmVudFRocmVhZDsKIyBJZiB5b3UgY29uc2lkZXIgd2hpdGVzcGFjZSB0byBiZSBqdW5rLCB0aGUgbG9uZ2VzdCBjb250aWd1b3VzIG1hdGNoCiMgbm90IHN0YXJ0aW5nIHdpdGgganVuayBpcyAiZSBUaHJlYWQgY3VycmVudFRocmVhZCIuICBTbyBuZGlmZiByZXBvcnRlZAojIHRoYXQgImUgdm9sYXRpbCIgd2FzIGluc2VydGVkIGJldHdlZW4gdGhlICd0JyBhbmQgdGhlICdlJyBpbiAicHJpdmF0ZSIuCiMgV2hpbGUgYW4gYWNjdXJhdGUgdmlldywgdG8gcGVvcGxlIHRoYXQncyBhYnN1cmQuICBUaGUgY3VycmVudCB2ZXJzaW9uCiMgbG9va3MgZm9yIG1hdGNoaW5nIGJsb2NrcyB0aGF0IGFyZSBlbnRpcmVseSBqdW5rLWZyZWUsIHRoZW4gZXh0ZW5kcyB0aGUKIyBsb25nZXN0IG9uZSBvZiB0aG9zZSBhcyBmYXIgYXMgcG9zc2libGUgYnV0IG9ubHkgd2l0aCBtYXRjaGluZyBqdW5rLgojIFNvIG5vdyAiY3VycmVudFRocmVhZCIgaXMgbWF0Y2hlZCwgdGhlbiBleHRlbmRlZCB0byBzdWNrIHVwIHRoZQojIHByZWNlZGluZyBibGFuazsgdGhlbiAicHJpdmF0ZSIgaXMgbWF0Y2hlZCwgYW5kIGV4dGVuZGVkIHRvIHN1Y2sgdXAgdGhlCiMgZm9sbG93aW5nIGJsYW5rOyB0aGVuICJUaHJlYWQiIGlzIG1hdGNoZWQ7IGFuZCBmaW5hbGx5IG5kaWZmIHJlcG9ydHMKIyB0aGF0ICJ2b2xhdGlsZSAiIHdhcyBpbnNlcnRlZCBiZWZvcmUgIlRocmVhZCIuICBUaGUgb25seSBxdWliYmxlCiMgcmVtYWluaW5nIGlzIHRoYXQgcGVyaGFwcyBpdCB3YXMgcmVhbGx5IHRoZSBjYXNlIHRoYXQgIiB2b2xhdGlsZSIKIyB3YXMgaW5zZXJ0ZWQgYWZ0ZXIgInByaXZhdGUiLiAgSSBjYW4gbGl2ZSB3aXRoIHRoYXQgPHdpbms+LgoKaW1wb3J0IHJlCgpkZWYgSVNfTElORV9KVU5LKGxpbmUsIHBhdD1yZS5jb21waWxlKHIiXHMqIz9ccyokIikubWF0Y2gpOgogICAgciIiIgogICAgUmV0dXJuIDEgZm9yIGlnbm9yYWJsZSBsaW5lOiBpZmYgYGxpbmVgIGlzIGJsYW5rIG9yIGNvbnRhaW5zIGEgc2luZ2xlICcjJy4KCiAgICBFeGFtcGxlczoKCiAgICA+Pj4gSVNfTElORV9KVU5LKCdcbicpCiAgICBUcnVlCiAgICA+Pj4gSVNfTElORV9KVU5LKCcgICMgICBcbicpCiAgICBUcnVlCiAgICA+Pj4gSVNfTElORV9KVU5LKCdoZWxsb1xuJykKICAgIEZhbHNlCiAgICAiIiIKCiAgICByZXR1cm4gcGF0KGxpbmUpIGlzIG5vdCBOb25lCgpkZWYgSVNfQ0hBUkFDVEVSX0pVTksoY2gsIHdzPSIgXHQiKToKICAgIHIiIiIKICAgIFJldHVybiAxIGZvciBpZ25vcmFibGUgY2hhcmFjdGVyOiBpZmYgYGNoYCBpcyBhIHNwYWNlIG9yIHRhYi4KCiAgICBFeGFtcGxlczoKCiAgICA+Pj4gSVNfQ0hBUkFDVEVSX0pVTksoJyAnKQogICAgVHJ1ZQogICAgPj4+IElTX0NIQVJBQ1RFUl9KVU5LKCdcdCcpCiAgICBUcnVlCiAgICA+Pj4gSVNfQ0hBUkFDVEVSX0pVTksoJ1xuJykKICAgIEZhbHNlCiAgICA+Pj4gSVNfQ0hBUkFDVEVSX0pVTksoJ3gnKQogICAgRmFsc2UKICAgICIiIgoKICAgIHJldHVybiBjaCBpbiB3cwoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMgIFVuaWZpZWQgRGlmZgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmRlZiBfZm9ybWF0X3JhbmdlX3VuaWZpZWQoc3RhcnQsIHN0b3ApOgogICAgJ0NvbnZlcnQgcmFuZ2UgdG8gdGhlICJlZCIgZm9ybWF0JwogICAgIyBQZXIgdGhlIGRpZmYgc3BlYyBhdCBodHRwOi8vd3d3LnVuaXgub3JnL3NpbmdsZV91bml4X3NwZWNpZmljYXRpb24vCiAgICBiZWdpbm5pbmcgPSBzdGFydCArIDEgICAgICMgbGluZXMgc3RhcnQgbnVtYmVyaW5nIHdpdGggb25lCiAgICBsZW5ndGggPSBzdG9wIC0gc3RhcnQKICAgIGlmIGxlbmd0aCA9PSAxOgogICAgICAgIHJldHVybiAne30nLmZvcm1hdChiZWdpbm5pbmcpCiAgICBpZiBub3QgbGVuZ3RoOgogICAgICAgIGJlZ2lubmluZyAtPSAxICAgICAgICAjIGVtcHR5IHJhbmdlcyBiZWdpbiBhdCBsaW5lIGp1c3QgYmVmb3JlIHRoZSByYW5nZQogICAgcmV0dXJuICd7fSx7fScuZm9ybWF0KGJlZ2lubmluZywgbGVuZ3RoKQoKZGVmIHVuaWZpZWRfZGlmZihhLCBiLCBmcm9tZmlsZT0nJywgdG9maWxlPScnLCBmcm9tZmlsZWRhdGU9JycsCiAgICAgICAgICAgICAgICAgdG9maWxlZGF0ZT0nJywgbj0zLCBsaW5ldGVybT0nXG4nKToKICAgIHIiIiIKICAgIENvbXBhcmUgdHdvIHNlcXVlbmNlcyBvZiBsaW5lczsgZ2VuZXJhdGUgdGhlIGRlbHRhIGFzIGEgdW5pZmllZCBkaWZmLgoKICAgIFVuaWZpZWQgZGlmZnMgYXJlIGEgY29tcGFjdCB3YXkgb2Ygc2hvd2luZyBsaW5lIGNoYW5nZXMgYW5kIGEgZmV3CiAgICBsaW5lcyBvZiBjb250ZXh0LiAgVGhlIG51bWJlciBvZiBjb250ZXh0IGxpbmVzIGlzIHNldCBieSAnbicgd2hpY2gKICAgIGRlZmF1bHRzIHRvIHRocmVlLgoKICAgIEJ5IGRlZmF1bHQsIHRoZSBkaWZmIGNvbnRyb2wgbGluZXMgKHRob3NlIHdpdGggLS0tLCArKyssIG9yIEBAKSBhcmUKICAgIGNyZWF0ZWQgd2l0aCBhIHRyYWlsaW5nIG5ld2xpbmUuICBUaGlzIGlzIGhlbHBmdWwgc28gdGhhdCBpbnB1dHMKICAgIGNyZWF0ZWQgZnJvbSBmaWxlLnJlYWRsaW5lcygpIHJlc3VsdCBpbiBkaWZmcyB0aGF0IGFyZSBzdWl0YWJsZSBmb3IKICAgIGZpbGUud3JpdGVsaW5lcygpIHNpbmNlIGJvdGggdGhlIGlucHV0cyBhbmQgb3V0cHV0cyBoYXZlIHRyYWlsaW5nCiAgICBuZXdsaW5lcy4KCiAgICBGb3IgaW5wdXRzIHRoYXQgZG8gbm90IGhhdmUgdHJhaWxpbmcgbmV3bGluZXMsIHNldCB0aGUgbGluZXRlcm0KICAgIGFyZ3VtZW50IHRvICIiIHNvIHRoYXQgdGhlIG91dHB1dCB3aWxsIGJlIHVuaWZvcm1seSBuZXdsaW5lIGZyZWUuCgogICAgVGhlIHVuaWRpZmYgZm9ybWF0IG5vcm1hbGx5IGhhcyBhIGhlYWRlciBmb3IgZmlsZW5hbWVzIGFuZCBtb2RpZmljYXRpb24KICAgIHRpbWVzLiAgQW55IG9yIGFsbCBvZiB0aGVzZSBtYXkgYmUgc3BlY2lmaWVkIHVzaW5nIHN0cmluZ3MgZm9yCiAgICAnZnJvbWZpbGUnLCAndG9maWxlJywgJ2Zyb21maWxlZGF0ZScsIGFuZCAndG9maWxlZGF0ZScuCiAgICBUaGUgbW9kaWZpY2F0aW9uIHRpbWVzIGFyZSBub3JtYWxseSBleHByZXNzZWQgaW4gdGhlIElTTyA4NjAxIGZvcm1hdC4KCiAgICBFeGFtcGxlOgoKICAgID4+PiBmb3IgbGluZSBpbiB1bmlmaWVkX2RpZmYoJ29uZSB0d28gdGhyZWUgZm91cicuc3BsaXQoKSwKICAgIC4uLiAgICAgICAgICAgICAnemVybyBvbmUgdHJlZSBmb3VyJy5zcGxpdCgpLCAnT3JpZ2luYWwnLCAnQ3VycmVudCcsCiAgICAuLi4gICAgICAgICAgICAgJzIwMDUtMDEtMjYgMjM6MzA6NTAnLCAnMjAxMC0wNC0wMiAxMDoyMDo1MicsCiAgICAuLi4gICAgICAgICAgICAgbGluZXRlcm09JycpOgogICAgLi4uICAgICBwcmludChsaW5lKSAgICAgICAgICAgICAgICAgIyBkb2N0ZXN0OiArTk9STUFMSVpFX1dISVRFU1BBQ0UKICAgIC0tLSBPcmlnaW5hbCAgICAgICAgMjAwNS0wMS0yNiAyMzozMDo1MAogICAgKysrIEN1cnJlbnQgICAgICAgICAyMDEwLTA0LTAyIDEwOjIwOjUyCiAgICBAQCAtMSw0ICsxLDQgQEAKICAgICt6ZXJvCiAgICAgb25lCiAgICAtdHdvCiAgICAtdGhyZWUKICAgICt0cmVlCiAgICAgZm91cgogICAgIiIiCgogICAgc3RhcnRlZCA9IEZhbHNlCiAgICBmb3IgZ3JvdXAgaW4gU2VxdWVuY2VNYXRjaGVyKE5vbmUsYSxiKS5nZXRfZ3JvdXBlZF9vcGNvZGVzKG4pOgogICAgICAgIGlmIG5vdCBzdGFydGVkOgogICAgICAgICAgICBzdGFydGVkID0gVHJ1ZQogICAgICAgICAgICBmcm9tZGF0ZSA9ICdcdHt9Jy5mb3JtYXQoZnJvbWZpbGVkYXRlKSBpZiBmcm9tZmlsZWRhdGUgZWxzZSAnJwogICAgICAgICAgICB0b2RhdGUgPSAnXHR7fScuZm9ybWF0KHRvZmlsZWRhdGUpIGlmIHRvZmlsZWRhdGUgZWxzZSAnJwogICAgICAgICAgICB5aWVsZCAnLS0tIHt9e317fScuZm9ybWF0KGZyb21maWxlLCBmcm9tZGF0ZSwgbGluZXRlcm0pCiAgICAgICAgICAgIHlpZWxkICcrKysge317fXt9Jy5mb3JtYXQodG9maWxlLCB0b2RhdGUsIGxpbmV0ZXJtKQoKICAgICAgICBmaXJzdCwgbGFzdCA9IGdyb3VwWzBdLCBncm91cFstMV0KICAgICAgICBmaWxlMV9yYW5nZSA9IF9mb3JtYXRfcmFuZ2VfdW5pZmllZChmaXJzdFsxXSwgbGFzdFsyXSkKICAgICAgICBmaWxlMl9yYW5nZSA9IF9mb3JtYXRfcmFuZ2VfdW5pZmllZChmaXJzdFszXSwgbGFzdFs0XSkKICAgICAgICB5aWVsZCAnQEAgLXt9ICt7fSBAQHt9Jy5mb3JtYXQoZmlsZTFfcmFuZ2UsIGZpbGUyX3JhbmdlLCBsaW5ldGVybSkKCiAgICAgICAgZm9yIHRhZywgaTEsIGkyLCBqMSwgajIgaW4gZ3JvdXA6CiAgICAgICAgICAgIGlmIHRhZyA9PSAnZXF1YWwnOgogICAgICAgICAgICAgICAgZm9yIGxpbmUgaW4gYVtpMTppMl06CiAgICAgICAgICAgICAgICAgICAgeWllbGQgJyAnICsgbGluZQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgaWYgdGFnIGluIHsncmVwbGFjZScsICdkZWxldGUnfToKICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIGFbaTE6aTJdOgogICAgICAgICAgICAgICAgICAgIHlpZWxkICctJyArIGxpbmUKICAgICAgICAgICAgaWYgdGFnIGluIHsncmVwbGFjZScsICdpbnNlcnQnfToKICAgICAgICAgICAgICAgIGZvciBsaW5lIGluIGJbajE6ajJdOgogICAgICAgICAgICAgICAgICAgIHlpZWxkICcrJyArIGxpbmUKCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjICBDb250ZXh0IERpZmYKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpkZWYgX2Zvcm1hdF9yYW5nZV9jb250ZXh0KHN0YXJ0LCBzdG9wKToKICAgICdDb252ZXJ0IHJhbmdlIHRvIHRoZSAiZWQiIGZvcm1hdCcKICAgICMgUGVyIHRoZSBkaWZmIHNwZWMgYXQgaHR0cDovL3d3dy51bml4Lm9yZy9zaW5nbGVfdW5peF9zcGVjaWZpY2F0aW9uLwogICAgYmVnaW5uaW5nID0gc3RhcnQgKyAxICAgICAjIGxpbmVzIHN0YXJ0IG51bWJlcmluZyB3aXRoIG9uZQogICAgbGVuZ3RoID0gc3RvcCAtIHN0YXJ0CiAgICBpZiBub3QgbGVuZ3RoOgogICAgICAgIGJlZ2lubmluZyAtPSAxICAgICAgICAjIGVtcHR5IHJhbmdlcyBiZWdpbiBhdCBsaW5lIGp1c3QgYmVmb3JlIHRoZSByYW5nZQogICAgaWYgbGVuZ3RoIDw9IDE6CiAgICAgICAgcmV0dXJuICd7fScuZm9ybWF0KGJlZ2lubmluZykKICAgIHJldHVybiAne30se30nLmZvcm1hdChiZWdpbm5pbmcsIGJlZ2lubmluZyArIGxlbmd0aCAtIDEpCgojIFNlZSBodHRwOi8vd3d3LnVuaXgub3JnL3NpbmdsZV91bml4X3NwZWNpZmljYXRpb24vCmRlZiBjb250ZXh0X2RpZmYoYSwgYiwgZnJvbWZpbGU9JycsIHRvZmlsZT0nJywKICAgICAgICAgICAgICAgICBmcm9tZmlsZWRhdGU9JycsIHRvZmlsZWRhdGU9JycsIG49MywgbGluZXRlcm09J1xuJyk6CiAgICByIiIiCiAgICBDb21wYXJlIHR3byBzZXF1ZW5jZXMgb2YgbGluZXM7IGdlbmVyYXRlIHRoZSBkZWx0YSBhcyBhIGNvbnRleHQgZGlmZi4KCiAgICBDb250ZXh0IGRpZmZzIGFyZSBhIGNvbXBhY3Qgd2F5IG9mIHNob3dpbmcgbGluZSBjaGFuZ2VzIGFuZCBhIGZldwogICAgbGluZXMgb2YgY29udGV4dC4gIFRoZSBudW1iZXIgb2YgY29udGV4dCBsaW5lcyBpcyBzZXQgYnkgJ24nIHdoaWNoCiAgICBkZWZhdWx0cyB0byB0aHJlZS4KCiAgICBCeSBkZWZhdWx0LCB0aGUgZGlmZiBjb250cm9sIGxpbmVzICh0aG9zZSB3aXRoICoqKiBvciAtLS0pIGFyZQogICAgY3JlYXRlZCB3aXRoIGEgdHJhaWxpbmcgbmV3bGluZS4gIFRoaXMgaXMgaGVscGZ1bCBzbyB0aGF0IGlucHV0cwogICAgY3JlYXRlZCBmcm9tIGZpbGUucmVhZGxpbmVzKCkgcmVzdWx0IGluIGRpZmZzIHRoYXQgYXJlIHN1aXRhYmxlIGZvcgogICAgZmlsZS53cml0ZWxpbmVzKCkgc2luY2UgYm90aCB0aGUgaW5wdXRzIGFuZCBvdXRwdXRzIGhhdmUgdHJhaWxpbmcKICAgIG5ld2xpbmVzLgoKICAgIEZvciBpbnB1dHMgdGhhdCBkbyBub3QgaGF2ZSB0cmFpbGluZyBuZXdsaW5lcywgc2V0IHRoZSBsaW5ldGVybQogICAgYXJndW1lbnQgdG8gIiIgc28gdGhhdCB0aGUgb3V0cHV0IHdpbGwgYmUgdW5pZm9ybWx5IG5ld2xpbmUgZnJlZS4KCiAgICBUaGUgY29udGV4dCBkaWZmIGZvcm1hdCBub3JtYWxseSBoYXMgYSBoZWFkZXIgZm9yIGZpbGVuYW1lcyBhbmQKICAgIG1vZGlmaWNhdGlvbiB0aW1lcy4gIEFueSBvciBhbGwgb2YgdGhlc2UgbWF5IGJlIHNwZWNpZmllZCB1c2luZwogICAgc3RyaW5ncyBmb3IgJ2Zyb21maWxlJywgJ3RvZmlsZScsICdmcm9tZmlsZWRhdGUnLCBhbmQgJ3RvZmlsZWRhdGUnLgogICAgVGhlIG1vZGlmaWNhdGlvbiB0aW1lcyBhcmUgbm9ybWFsbHkgZXhwcmVzc2VkIGluIHRoZSBJU08gODYwMSBmb3JtYXQuCiAgICBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgc3RyaW5ncyBkZWZhdWx0IHRvIGJsYW5rcy4KCiAgICBFeGFtcGxlOgoKICAgID4+PiBwcmludCgnJy5qb2luKGNvbnRleHRfZGlmZignb25lXG50d29cbnRocmVlXG5mb3VyXG4nLnNwbGl0bGluZXMoVHJ1ZSksCiAgICAuLi4gICAgICAgJ3plcm9cbm9uZVxudHJlZVxuZm91clxuJy5zcGxpdGxpbmVzKFRydWUpLCAnT3JpZ2luYWwnLCAnQ3VycmVudCcpKSwKICAgIC4uLiAgICAgICBlbmQ9IiIpCiAgICAqKiogT3JpZ2luYWwKICAgIC0tLSBDdXJyZW50CiAgICAqKioqKioqKioqKioqKioKICAgICoqKiAxLDQgKioqKgogICAgICBvbmUKICAgICEgdHdvCiAgICAhIHRocmVlCiAgICAgIGZvdXIKICAgIC0tLSAxLDQgLS0tLQogICAgKyB6ZXJvCiAgICAgIG9uZQogICAgISB0cmVlCiAgICAgIGZvdXIKICAgICIiIgoKICAgIHByZWZpeCA9IGRpY3QoaW5zZXJ0PScrICcsIGRlbGV0ZT0nLSAnLCByZXBsYWNlPSchICcsIGVxdWFsPScgICcpCiAgICBzdGFydGVkID0gRmFsc2UKICAgIGZvciBncm91cCBpbiBTZXF1ZW5jZU1hdGNoZXIoTm9uZSxhLGIpLmdldF9ncm91cGVkX29wY29kZXMobik6CiAgICAgICAgaWYgbm90IHN0YXJ0ZWQ6CiAgICAgICAgICAgIHN0YXJ0ZWQgPSBUcnVlCiAgICAgICAgICAgIGZyb21kYXRlID0gJ1x0e30nLmZvcm1hdChmcm9tZmlsZWRhdGUpIGlmIGZyb21maWxlZGF0ZSBlbHNlICcnCiAgICAgICAgICAgIHRvZGF0ZSA9ICdcdHt9Jy5mb3JtYXQodG9maWxlZGF0ZSkgaWYgdG9maWxlZGF0ZSBlbHNlICcnCiAgICAgICAgICAgIHlpZWxkICcqKioge317fXt9Jy5mb3JtYXQoZnJvbWZpbGUsIGZyb21kYXRlLCBsaW5ldGVybSkKICAgICAgICAgICAgeWllbGQgJy0tLSB7fXt9e30nLmZvcm1hdCh0b2ZpbGUsIHRvZGF0ZSwgbGluZXRlcm0pCgogICAgICAgIGZpcnN0LCBsYXN0ID0gZ3JvdXBbMF0sIGdyb3VwWy0xXQogICAgICAgIHlpZWxkICcqKioqKioqKioqKioqKionICsgbGluZXRlcm0KCiAgICAgICAgZmlsZTFfcmFuZ2UgPSBfZm9ybWF0X3JhbmdlX2NvbnRleHQoZmlyc3RbMV0sIGxhc3RbMl0pCiAgICAgICAgeWllbGQgJyoqKiB7fSAqKioqe30nLmZvcm1hdChmaWxlMV9yYW5nZSwgbGluZXRlcm0pCgogICAgICAgIGlmIGFueSh0YWcgaW4geydyZXBsYWNlJywgJ2RlbGV0ZSd9IGZvciB0YWcsIF8sIF8sIF8sIF8gaW4gZ3JvdXApOgogICAgICAgICAgICBmb3IgdGFnLCBpMSwgaTIsIF8sIF8gaW4gZ3JvdXA6CiAgICAgICAgICAgICAgICBpZiB0YWcgIT0gJ2luc2VydCc6CiAgICAgICAgICAgICAgICAgICAgZm9yIGxpbmUgaW4gYVtpMTppMl06CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHByZWZpeFt0YWddICsgbGluZQoKICAgICAgICBmaWxlMl9yYW5nZSA9IF9mb3JtYXRfcmFuZ2VfY29udGV4dChmaXJzdFszXSwgbGFzdFs0XSkKICAgICAgICB5aWVsZCAnLS0tIHt9IC0tLS17fScuZm9ybWF0KGZpbGUyX3JhbmdlLCBsaW5ldGVybSkKCiAgICAgICAgaWYgYW55KHRhZyBpbiB7J3JlcGxhY2UnLCAnaW5zZXJ0J30gZm9yIHRhZywgXywgXywgXywgXyBpbiBncm91cCk6CiAgICAgICAgICAgIGZvciB0YWcsIF8sIF8sIGoxLCBqMiBpbiBncm91cDoKICAgICAgICAgICAgICAgIGlmIHRhZyAhPSAnZGVsZXRlJzoKICAgICAgICAgICAgICAgICAgICBmb3IgbGluZSBpbiBiW2oxOmoyXToKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgcHJlZml4W3RhZ10gKyBsaW5lCgpkZWYgbmRpZmYoYSwgYiwgbGluZWp1bms9Tm9uZSwgY2hhcmp1bms9SVNfQ0hBUkFDVEVSX0pVTkspOgogICAgciIiIgogICAgQ29tcGFyZSBgYWAgYW5kIGBiYCAobGlzdHMgb2Ygc3RyaW5ncyk7IHJldHVybiBhIGBEaWZmZXJgLXN0eWxlIGRlbHRhLgoKICAgIE9wdGlvbmFsIGtleXdvcmQgcGFyYW1ldGVycyBgbGluZWp1bmtgIGFuZCBgY2hhcmp1bmtgIGFyZSBmb3IgZmlsdGVyCiAgICBmdW5jdGlvbnMgKG9yIE5vbmUpOgoKICAgIC0gbGluZWp1bms6IEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYWNjZXB0IGEgc2luZ2xlIHN0cmluZyBhcmd1bWVudCwgYW5kCiAgICAgIHJldHVybiB0cnVlIGlmZiB0aGUgc3RyaW5nIGlzIGp1bmsuICBUaGUgZGVmYXVsdCBpcyBOb25lLCBhbmQgaXMKICAgICAgcmVjb21tZW5kZWQ7IGFzIG9mIFB5dGhvbiAyLjMsIGFuIGFkYXB0aXZlIG5vdGlvbiBvZiAibm9pc2UiIGxpbmVzIGlzCiAgICAgIHVzZWQgdGhhdCBkb2VzIGEgZ29vZCBqb2Igb24gaXRzIG93bi4KCiAgICAtIGNoYXJqdW5rOiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGFjY2VwdCBhIHN0cmluZyBvZiBsZW5ndGggMS4gVGhlCiAgICAgIGRlZmF1bHQgaXMgbW9kdWxlLWxldmVsIGZ1bmN0aW9uIElTX0NIQVJBQ1RFUl9KVU5LLCB3aGljaCBmaWx0ZXJzIG91dAogICAgICB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgKGEgYmxhbmsgb3IgdGFiOyBub3RlOiBiYWQgaWRlYSB0byBpbmNsdWRlIG5ld2xpbmUKICAgICAgaW4gdGhpcyEpLgoKICAgIFRvb2xzL3NjcmlwdHMvbmRpZmYucHkgaXMgYSBjb21tYW5kLWxpbmUgZnJvbnQtZW5kIHRvIHRoaXMgZnVuY3Rpb24uCgogICAgRXhhbXBsZToKCiAgICA+Pj4gZGlmZiA9IG5kaWZmKCdvbmVcbnR3b1xudGhyZWVcbicuc3BsaXRsaW5lcyhrZWVwZW5kcz1UcnVlKSwKICAgIC4uLiAgICAgICAgICAgICAgJ29yZVxudHJlZVxuZW11XG4nLnNwbGl0bGluZXMoa2VlcGVuZHM9VHJ1ZSkpCiAgICA+Pj4gcHJpbnQoJycuam9pbihkaWZmKSwgZW5kPSIiKQogICAgLSBvbmUKICAgID8gIF4KICAgICsgb3JlCiAgICA/ICBeCiAgICAtIHR3bwogICAgLSB0aHJlZQogICAgPyAgLQogICAgKyB0cmVlCiAgICArIGVtdQogICAgIiIiCiAgICByZXR1cm4gRGlmZmVyKGxpbmVqdW5rLCBjaGFyanVuaykuY29tcGFyZShhLCBiKQoKZGVmIF9tZGlmZihmcm9tbGluZXMsIHRvbGluZXMsIGNvbnRleHQ9Tm9uZSwgbGluZWp1bms9Tm9uZSwKICAgICAgICAgICBjaGFyanVuaz1JU19DSEFSQUNURVJfSlVOSyk6CiAgICByIiIiUmV0dXJucyBnZW5lcmF0b3IgeWllbGRpbmcgbWFya2VkIHVwIGZyb20vdG8gc2lkZSBieSBzaWRlIGRpZmZlcmVuY2VzLgoKICAgIEFyZ3VtZW50czoKICAgIGZyb21saW5lcyAtLSBsaXN0IG9mIHRleHQgbGluZXMgdG8gY29tcGFyZWQgdG8gdG9saW5lcwogICAgdG9saW5lcyAtLSBsaXN0IG9mIHRleHQgbGluZXMgdG8gYmUgY29tcGFyZWQgdG8gZnJvbWxpbmVzCiAgICBjb250ZXh0IC0tIG51bWJlciBvZiBjb250ZXh0IGxpbmVzIHRvIGRpc3BsYXkgb24gZWFjaCBzaWRlIG9mIGRpZmZlcmVuY2UsCiAgICAgICAgICAgICAgIGlmIE5vbmUsIGFsbCBmcm9tL3RvIHRleHQgbGluZXMgd2lsbCBiZSBnZW5lcmF0ZWQuCiAgICBsaW5lanVuayAtLSBwYXNzZWQgb24gdG8gbmRpZmYgKHNlZSBuZGlmZiBkb2N1bWVudGF0aW9uKQogICAgY2hhcmp1bmsgLS0gcGFzc2VkIG9uIHRvIG5kaWZmIChzZWUgbmRpZmYgZG9jdW1lbnRhdGlvbikKCiAgICBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYW4gaW50ZXJhdG9yIHdoaWNoIHJldHVybnMgYSB0dXBsZToKICAgIChmcm9tIGxpbmUgdHVwbGUsIHRvIGxpbmUgdHVwbGUsIGJvb2xlYW4gZmxhZykKCiAgICBmcm9tL3RvIGxpbmUgdHVwbGUgLS0gKGxpbmUgbnVtLCBsaW5lIHRleHQpCiAgICAgICAgbGluZSBudW0gLS0gaW50ZWdlciBvciBOb25lICh0byBpbmRpY2F0ZSBhIGNvbnRleHQgc2VwYXJhdGlvbikKICAgICAgICBsaW5lIHRleHQgLS0gb3JpZ2luYWwgbGluZSB0ZXh0IHdpdGggZm9sbG93aW5nIG1hcmtlcnMgaW5zZXJ0ZWQ6CiAgICAgICAgICAgICdcMCsnIC0tIG1hcmtzIHN0YXJ0IG9mIGFkZGVkIHRleHQKICAgICAgICAgICAgJ1wwLScgLS0gbWFya3Mgc3RhcnQgb2YgZGVsZXRlZCB0ZXh0CiAgICAgICAgICAgICdcMF4nIC0tIG1hcmtzIHN0YXJ0IG9mIGNoYW5nZWQgdGV4dAogICAgICAgICAgICAnXDEnIC0tIG1hcmtzIGVuZCBvZiBhZGRlZC9kZWxldGVkL2NoYW5nZWQgdGV4dAoKICAgIGJvb2xlYW4gZmxhZyAtLSBOb25lIGluZGljYXRlcyBjb250ZXh0IHNlcGFyYXRpb24sIFRydWUgaW5kaWNhdGVzCiAgICAgICAgZWl0aGVyICJmcm9tIiBvciAidG8iIGxpbmUgY29udGFpbnMgYSBjaGFuZ2UsIG90aGVyd2lzZSBGYWxzZS4KCiAgICBUaGlzIGZ1bmN0aW9uL2l0ZXJhdG9yIHdhcyBvcmlnaW5hbGx5IGRldmVsb3BlZCB0byBnZW5lcmF0ZSBzaWRlIGJ5IHNpZGUKICAgIGZpbGUgZGlmZmVyZW5jZSBmb3IgbWFraW5nIEhUTUwgcGFnZXMgKHNlZSBIdG1sRGlmZiBjbGFzcyBmb3IgZXhhbXBsZQogICAgdXNhZ2UpLgoKICAgIE5vdGUsIHRoaXMgZnVuY3Rpb24gdXRpbGl6ZXMgdGhlIG5kaWZmIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIHRoZSBzaWRlIGJ5CiAgICBzaWRlIGRpZmZlcmVuY2UgbWFya3VwLiAgT3B0aW9uYWwgbmRpZmYgYXJndW1lbnRzIG1heSBiZSBwYXNzZWQgdG8gdGhpcwogICAgZnVuY3Rpb24gYW5kIHRoZXkgaW4gdHVybiB3aWxsIGJlIHBhc3NlZCB0byBuZGlmZi4KICAgICIiIgogICAgaW1wb3J0IHJlCgogICAgIyByZWd1bGFyIGV4cHJlc3Npb24gZm9yIGZpbmRpbmcgaW50cmFsaW5lIGNoYW5nZSBpbmRpY2VzCiAgICBjaGFuZ2VfcmUgPSByZS5jb21waWxlKCcoXCsrfFwtK3xcXispJykKCiAgICAjIGNyZWF0ZSB0aGUgZGlmZmVyZW5jZSBpdGVyYXRvciB0byBnZW5lcmF0ZSB0aGUgZGlmZmVyZW5jZXMKICAgIGRpZmZfbGluZXNfaXRlcmF0b3IgPSBuZGlmZihmcm9tbGluZXMsdG9saW5lcyxsaW5lanVuayxjaGFyanVuaykKCiAgICBkZWYgX21ha2VfbGluZShsaW5lcywgZm9ybWF0X2tleSwgc2lkZSwgbnVtX2xpbmVzPVswLDBdKToKICAgICAgICAiIiJSZXR1cm5zIGxpbmUgb2YgdGV4dCB3aXRoIHVzZXIncyBjaGFuZ2UgbWFya3VwIGFuZCBsaW5lIGZvcm1hdHRpbmcuCgogICAgICAgIGxpbmVzIC0tIGxpc3Qgb2YgbGluZXMgZnJvbSB0aGUgbmRpZmYgZ2VuZXJhdG9yIHRvIHByb2R1Y2UgYSBsaW5lIG9mCiAgICAgICAgICAgICAgICAgdGV4dCBmcm9tLiAgV2hlbiBwcm9kdWNpbmcgdGhlIGxpbmUgb2YgdGV4dCB0byByZXR1cm4sIHRoZQogICAgICAgICAgICAgICAgIGxpbmVzIHVzZWQgYXJlIHJlbW92ZWQgZnJvbSB0aGlzIGxpc3QuCiAgICAgICAgZm9ybWF0X2tleSAtLSAnKycgcmV0dXJuIGZpcnN0IGxpbmUgaW4gbGlzdCB3aXRoICJhZGQiIG1hcmt1cCBhcm91bmQKICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZW50aXJlIGxpbmUuCiAgICAgICAgICAgICAgICAgICAgICAnLScgcmV0dXJuIGZpcnN0IGxpbmUgaW4gbGlzdCB3aXRoICJkZWxldGUiIG1hcmt1cCBhcm91bmQKICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZW50aXJlIGxpbmUuCiAgICAgICAgICAgICAgICAgICAgICAnPycgcmV0dXJuIGZpcnN0IGxpbmUgaW4gbGlzdCB3aXRoIGFkZC9kZWxldGUvY2hhbmdlCiAgICAgICAgICAgICAgICAgICAgICAgICAgaW50cmFsaW5lIG1hcmt1cCAoaW5kaWNlcyBvYnRhaW5lZCBmcm9tIHNlY29uZCBsaW5lKQogICAgICAgICAgICAgICAgICAgICAgTm9uZSByZXR1cm4gZmlyc3QgbGluZSBpbiBsaXN0IHdpdGggbm8gbWFya3VwCiAgICAgICAgc2lkZSAtLSBpbmRpY2UgaW50byB0aGUgbnVtX2xpbmVzIGxpc3QgKDA9ZnJvbSwxPXRvKQogICAgICAgIG51bV9saW5lcyAtLSBmcm9tL3RvIGN1cnJlbnQgbGluZSBudW1iZXIuICBUaGlzIGlzIE5PVCBpbnRlbmRlZCB0byBiZSBhCiAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCBwYXJhbWV0ZXIuICBJdCBpcyBwcmVzZW50IGFzIGEga2V5d29yZCBhcmd1bWVudCB0bwogICAgICAgICAgICAgICAgICAgICBtYWludGFpbiBtZW1vcnkgb2YgdGhlIGN1cnJlbnQgbGluZSBudW1iZXJzIGJldHdlZW4gY2FsbHMKICAgICAgICAgICAgICAgICAgICAgb2YgdGhpcyBmdW5jdGlvbi4KCiAgICAgICAgTm90ZSwgdGhpcyBmdW5jdGlvbiBpcyBwdXJwb3NlZnVsbHkgbm90IGRlZmluZWQgYXQgdGhlIG1vZHVsZSBzY29wZSBzbwogICAgICAgIHRoYXQgZGF0YSBpdCBuZWVkcyBmcm9tIGl0cyBwYXJlbnQgZnVuY3Rpb24gKHdpdGhpbiB3aG9zZSBjb250ZXh0IGl0CiAgICAgICAgaXMgZGVmaW5lZCkgZG9lcyBub3QgbmVlZCB0byBiZSBvZiBtb2R1bGUgc2NvcGUuCiAgICAgICAgIiIiCiAgICAgICAgbnVtX2xpbmVzW3NpZGVdICs9IDEKICAgICAgICAjIEhhbmRsZSBjYXNlIHdoZXJlIG5vIHVzZXIgbWFya3VwIGlzIHRvIGJlIGFkZGVkLCBqdXN0IHJldHVybiBsaW5lIG9mCiAgICAgICAgIyB0ZXh0IHdpdGggdXNlcidzIGxpbmUgZm9ybWF0IHRvIGFsbG93IGZvciB1c2FnZSBvZiB0aGUgbGluZSBudW1iZXIuCiAgICAgICAgaWYgZm9ybWF0X2tleSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gKG51bV9saW5lc1tzaWRlXSxsaW5lcy5wb3AoMClbMjpdKQogICAgICAgICMgSGFuZGxlIGNhc2Ugb2YgaW50cmFsaW5lIGNoYW5nZXMKICAgICAgICBpZiBmb3JtYXRfa2V5ID09ICc/JzoKICAgICAgICAgICAgdGV4dCwgbWFya2VycyA9IGxpbmVzLnBvcCgwKSwgbGluZXMucG9wKDApCiAgICAgICAgICAgICMgZmluZCBpbnRyYWxpbmUgY2hhbmdlcyAoc3RvcmUgY2hhbmdlIHR5cGUgYW5kIGluZGljZXMgaW4gdHVwbGVzKQogICAgICAgICAgICBzdWJfaW5mbyA9IFtdCiAgICAgICAgICAgIGRlZiByZWNvcmRfc3ViX2luZm8obWF0Y2hfb2JqZWN0LHN1Yl9pbmZvPXN1Yl9pbmZvKToKICAgICAgICAgICAgICAgIHN1Yl9pbmZvLmFwcGVuZChbbWF0Y2hfb2JqZWN0Lmdyb3VwKDEpWzBdLG1hdGNoX29iamVjdC5zcGFuKCldKQogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoX29iamVjdC5ncm91cCgxKQogICAgICAgICAgICBjaGFuZ2VfcmUuc3ViKHJlY29yZF9zdWJfaW5mbyxtYXJrZXJzKQogICAgICAgICAgICAjIHByb2Nlc3MgZWFjaCB0dXBsZSBpbnNlcnRpbmcgb3VyIHNwZWNpYWwgbWFya3MgdGhhdCB3b24ndCBiZQogICAgICAgICAgICAjIG5vdGljZWQgYnkgYW4geG1sL2h0bWwgZXNjYXBlci4KICAgICAgICAgICAgZm9yIGtleSwoYmVnaW4sZW5kKSBpbiBzdWJfaW5mb1s6Oi0xXToKICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0WzA6YmVnaW5dKydcMCcra2V5K3RleHRbYmVnaW46ZW5kXSsnXDEnK3RleHRbZW5kOl0KICAgICAgICAgICAgdGV4dCA9IHRleHRbMjpdCiAgICAgICAgIyBIYW5kbGUgY2FzZSBvZiBhZGQvZGVsZXRlIGVudGlyZSBsaW5lCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdGV4dCA9IGxpbmVzLnBvcCgwKVsyOl0KICAgICAgICAgICAgIyBpZiBsaW5lIG9mIHRleHQgaXMganVzdCBhIG5ld2xpbmUsIGluc2VydCBhIHNwYWNlIHNvIHRoZXJlIGlzCiAgICAgICAgICAgICMgc29tZXRoaW5nIGZvciB0aGUgdXNlciB0byBoaWdobGlnaHQgYW5kIHNlZS4KICAgICAgICAgICAgaWYgbm90IHRleHQ6CiAgICAgICAgICAgICAgICB0ZXh0ID0gJyAnCiAgICAgICAgICAgICMgaW5zZXJ0IG1hcmtzIHRoYXQgd29uJ3QgYmUgbm90aWNlZCBieSBhbiB4bWwvaHRtbCBlc2NhcGVyLgogICAgICAgICAgICB0ZXh0ID0gJ1wwJyArIGZvcm1hdF9rZXkgKyB0ZXh0ICsgJ1wxJwogICAgICAgICMgUmV0dXJuIGxpbmUgb2YgdGV4dCwgZmlyc3QgYWxsb3cgdXNlcidzIGxpbmUgZm9ybWF0dGVyIHRvIGRvIGl0cwogICAgICAgICMgdGhpbmcgKHN1Y2ggYXMgYWRkaW5nIHRoZSBsaW5lIG51bWJlcikgdGhlbiByZXBsYWNlIHRoZSBzcGVjaWFsCiAgICAgICAgIyBtYXJrcyB3aXRoIHdoYXQgdGhlIHVzZXIncyBjaGFuZ2UgbWFya3VwLgogICAgICAgIHJldHVybiAobnVtX2xpbmVzW3NpZGVdLHRleHQpCgogICAgZGVmIF9saW5lX2l0ZXJhdG9yKCk6CiAgICAgICAgIiIiWWllbGRzIGZyb20vdG8gbGluZXMgb2YgdGV4dCB3aXRoIGEgY2hhbmdlIGluZGljYXRpb24uCgogICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgYW4gaXRlcmF0b3IuICBJdCBpdHNlbGYgcHVsbHMgbGluZXMgZnJvbSBhCiAgICAgICAgZGlmZmVyZW5jaW5nIGl0ZXJhdG9yLCBwcm9jZXNzZXMgdGhlbSBhbmQgeWllbGRzIHRoZW0uICBXaGVuIGl0IGNhbgogICAgICAgIGl0IHlpZWxkcyBib3RoIGEgImZyb20iIGFuZCBhICJ0byIgbGluZSwgb3RoZXJ3aXNlIGl0IHdpbGwgeWllbGQgb25lCiAgICAgICAgb3IgdGhlIG90aGVyLiAgSW4gYWRkaXRpb24gdG8geWllbGRpbmcgdGhlIGxpbmVzIG9mIGZyb20vdG8gdGV4dCwgYQogICAgICAgIGJvb2xlYW4gZmxhZyBpcyB5aWVsZGVkIHRvIGluZGljYXRlIGlmIHRoZSB0ZXh0IGxpbmUocykgaGF2ZQogICAgICAgIGRpZmZlcmVuY2VzIGluIHRoZW0uCgogICAgICAgIE5vdGUsIHRoaXMgZnVuY3Rpb24gaXMgcHVycG9zZWZ1bGx5IG5vdCBkZWZpbmVkIGF0IHRoZSBtb2R1bGUgc2NvcGUgc28KICAgICAgICB0aGF0IGRhdGEgaXQgbmVlZHMgZnJvbSBpdHMgcGFyZW50IGZ1bmN0aW9uICh3aXRoaW4gd2hvc2UgY29udGV4dCBpdAogICAgICAgIGlzIGRlZmluZWQpIGRvZXMgbm90IG5lZWQgdG8gYmUgb2YgbW9kdWxlIHNjb3BlLgogICAgICAgICIiIgogICAgICAgIGxpbmVzID0gW10KICAgICAgICBudW1fYmxhbmtzX3BlbmRpbmcsIG51bV9ibGFua3NfdG9feWllbGQgPSAwLCAwCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgIyBMb2FkIHVwIG5leHQgNCBsaW5lcyBzbyB3ZSBjYW4gbG9vayBhaGVhZCwgY3JlYXRlIHN0cmluZ3Mgd2hpY2gKICAgICAgICAgICAgIyBhcmUgYSBjb25jYXRlbmF0aW9uIG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgZWFjaCBvZiB0aGUgNCBsaW5lcwogICAgICAgICAgICAjIHNvIHdlIGNhbiBkbyBzb21lIHZlcnkgcmVhZGFibGUgY29tcGFyaXNvbnMuCiAgICAgICAgICAgIHdoaWxlIGxlbihsaW5lcykgPCA0OgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGxpbmVzLmFwcGVuZChuZXh0KGRpZmZfbGluZXNfaXRlcmF0b3IpKQogICAgICAgICAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgICAgICAgICAgbGluZXMuYXBwZW5kKCdYJykKICAgICAgICAgICAgcyA9ICcnLmpvaW4oW2xpbmVbMF0gZm9yIGxpbmUgaW4gbGluZXNdKQogICAgICAgICAgICBpZiBzLnN0YXJ0c3dpdGgoJ1gnKToKICAgICAgICAgICAgICAgICMgV2hlbiBubyBtb3JlIGxpbmVzLCBwdW1wIG91dCBhbnkgcmVtYWluaW5nIGJsYW5rIGxpbmVzIHNvIHRoZQogICAgICAgICAgICAgICAgIyBjb3JyZXNwb25kaW5nIGFkZC9kZWxldGUgbGluZXMgZ2V0IGEgbWF0Y2hpbmcgYmxhbmsgbGluZSBzbwogICAgICAgICAgICAgICAgIyBhbGwgbGluZSBwYWlycyBnZXQgeWllbGRlZCBhdCB0aGUgbmV4dCBsZXZlbC4KICAgICAgICAgICAgICAgIG51bV9ibGFua3NfdG9feWllbGQgPSBudW1fYmxhbmtzX3BlbmRpbmcKICAgICAgICAgICAgZWxpZiBzLnN0YXJ0c3dpdGgoJy0/Kz8nKToKICAgICAgICAgICAgICAgICMgc2ltcGxlIGludHJhbGluZSBjaGFuZ2UKICAgICAgICAgICAgICAgIHlpZWxkIF9tYWtlX2xpbmUobGluZXMsJz8nLDApLCBfbWFrZV9saW5lKGxpbmVzLCc/JywxKSwgVHJ1ZQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgZWxpZiBzLnN0YXJ0c3dpdGgoJy0tKysnKToKICAgICAgICAgICAgICAgICMgaW4gZGVsZXRlIGJsb2NrLCBhZGQgYmxvY2sgY29taW5nOiB3ZSBkbyBOT1Qgd2FudCB0byBnZXQKICAgICAgICAgICAgICAgICMgY2F1Z2h0IHVwIG9uIGJsYW5rIGxpbmVzIHlldCwganVzdCBwcm9jZXNzIHRoZSBkZWxldGUgbGluZQogICAgICAgICAgICAgICAgbnVtX2JsYW5rc19wZW5kaW5nIC09IDEKICAgICAgICAgICAgICAgIHlpZWxkIF9tYWtlX2xpbmUobGluZXMsJy0nLDApLCBOb25lLCBUcnVlCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBlbGlmIHMuc3RhcnRzd2l0aCgoJy0tPysnLCAnLS0rJywgJy0gJykpOgogICAgICAgICAgICAgICAgIyBpbiBkZWxldGUgYmxvY2sgYW5kIHNlZSBhIGludHJhbGluZSBjaGFuZ2Ugb3IgdW5jaGFuZ2VkIGxpbmUKICAgICAgICAgICAgICAgICMgY29taW5nOiB5aWVsZCB0aGUgZGVsZXRlIGxpbmUgYW5kIHRoZW4gYmxhbmtzCiAgICAgICAgICAgICAgICBmcm9tX2xpbmUsdG9fbGluZSA9IF9tYWtlX2xpbmUobGluZXMsJy0nLDApLCBOb25lCiAgICAgICAgICAgICAgICBudW1fYmxhbmtzX3RvX3lpZWxkLG51bV9ibGFua3NfcGVuZGluZyA9IG51bV9ibGFua3NfcGVuZGluZy0xLDAKICAgICAgICAgICAgZWxpZiBzLnN0YXJ0c3dpdGgoJy0rPycpOgogICAgICAgICAgICAgICAgIyBpbnRyYWxpbmUgY2hhbmdlCiAgICAgICAgICAgICAgICB5aWVsZCBfbWFrZV9saW5lKGxpbmVzLE5vbmUsMCksIF9tYWtlX2xpbmUobGluZXMsJz8nLDEpLCBUcnVlCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBlbGlmIHMuc3RhcnRzd2l0aCgnLT8rJyk6CiAgICAgICAgICAgICAgICAjIGludHJhbGluZSBjaGFuZ2UKICAgICAgICAgICAgICAgIHlpZWxkIF9tYWtlX2xpbmUobGluZXMsJz8nLDApLCBfbWFrZV9saW5lKGxpbmVzLE5vbmUsMSksIFRydWUKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGVsaWYgcy5zdGFydHN3aXRoKCctJyk6CiAgICAgICAgICAgICAgICAjIGRlbGV0ZSBGUk9NIGxpbmUKICAgICAgICAgICAgICAgIG51bV9ibGFua3NfcGVuZGluZyAtPSAxCiAgICAgICAgICAgICAgICB5aWVsZCBfbWFrZV9saW5lKGxpbmVzLCctJywwKSwgTm9uZSwgVHJ1ZQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgZWxpZiBzLnN0YXJ0c3dpdGgoJystLScpOgogICAgICAgICAgICAgICAgIyBpbiBhZGQgYmxvY2ssIGRlbGV0ZSBibG9jayBjb21pbmc6IHdlIGRvIE5PVCB3YW50IHRvIGdldAogICAgICAgICAgICAgICAgIyBjYXVnaHQgdXAgb24gYmxhbmsgbGluZXMgeWV0LCBqdXN0IHByb2Nlc3MgdGhlIGFkZCBsaW5lCiAgICAgICAgICAgICAgICBudW1fYmxhbmtzX3BlbmRpbmcgKz0gMQogICAgICAgICAgICAgICAgeWllbGQgTm9uZSwgX21ha2VfbGluZShsaW5lcywnKycsMSksIFRydWUKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGVsaWYgcy5zdGFydHN3aXRoKCgnKyAnLCAnKy0nKSk6CiAgICAgICAgICAgICAgICAjIHdpbGwgYmUgbGVhdmluZyBhbiBhZGQgYmxvY2s6IHlpZWxkIGJsYW5rcyB0aGVuIGFkZCBsaW5lCiAgICAgICAgICAgICAgICBmcm9tX2xpbmUsIHRvX2xpbmUgPSBOb25lLCBfbWFrZV9saW5lKGxpbmVzLCcrJywxKQogICAgICAgICAgICAgICAgbnVtX2JsYW5rc190b195aWVsZCxudW1fYmxhbmtzX3BlbmRpbmcgPSBudW1fYmxhbmtzX3BlbmRpbmcrMSwwCiAgICAgICAgICAgIGVsaWYgcy5zdGFydHN3aXRoKCcrJyk6CiAgICAgICAgICAgICAgICAjIGluc2lkZSBhbiBhZGQgYmxvY2ssIHlpZWxkIHRoZSBhZGQgbGluZQogICAgICAgICAgICAgICAgbnVtX2JsYW5rc19wZW5kaW5nICs9IDEKICAgICAgICAgICAgICAgIHlpZWxkIE5vbmUsIF9tYWtlX2xpbmUobGluZXMsJysnLDEpLCBUcnVlCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBlbGlmIHMuc3RhcnRzd2l0aCgnICcpOgogICAgICAgICAgICAgICAgIyB1bmNoYW5nZWQgdGV4dCwgeWllbGQgaXQgdG8gYm90aCBzaWRlcwogICAgICAgICAgICAgICAgeWllbGQgX21ha2VfbGluZShsaW5lc1s6XSxOb25lLDApLF9tYWtlX2xpbmUobGluZXMsTm9uZSwxKSxGYWxzZQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgIyBDYXRjaCB1cCBvbiB0aGUgYmxhbmsgbGluZXMgc28gd2hlbiB3ZSB5aWVsZCB0aGUgbmV4dCBmcm9tL3RvCiAgICAgICAgICAgICMgcGFpciwgdGhleSBhcmUgbGluZWQgdXAuCiAgICAgICAgICAgIHdoaWxlKG51bV9ibGFua3NfdG9feWllbGQgPCAwKToKICAgICAgICAgICAgICAgIG51bV9ibGFua3NfdG9feWllbGQgKz0gMQogICAgICAgICAgICAgICAgeWllbGQgTm9uZSwoJycsJ1xuJyksVHJ1ZQogICAgICAgICAgICB3aGlsZShudW1fYmxhbmtzX3RvX3lpZWxkID4gMCk6CiAgICAgICAgICAgICAgICBudW1fYmxhbmtzX3RvX3lpZWxkIC09IDEKICAgICAgICAgICAgICAgIHlpZWxkICgnJywnXG4nKSxOb25lLFRydWUKICAgICAgICAgICAgaWYgcy5zdGFydHN3aXRoKCdYJyk6CiAgICAgICAgICAgICAgICByYWlzZSBTdG9wSXRlcmF0aW9uCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB5aWVsZCBmcm9tX2xpbmUsdG9fbGluZSxUcnVlCgogICAgZGVmIF9saW5lX3BhaXJfaXRlcmF0b3IoKToKICAgICAgICAiIiJZaWVsZHMgZnJvbS90byBsaW5lcyBvZiB0ZXh0IHdpdGggYSBjaGFuZ2UgaW5kaWNhdGlvbi4KCiAgICAgICAgVGhpcyBmdW5jdGlvbiBpcyBhbiBpdGVyYXRvci4gIEl0IGl0c2VsZiBwdWxscyBsaW5lcyBmcm9tIHRoZSBsaW5lCiAgICAgICAgaXRlcmF0b3IuICBJdHMgZGlmZmVyZW5jZSBmcm9tIHRoYXQgaXRlcmF0b3IgaXMgdGhhdCB0aGlzIGZ1bmN0aW9uCiAgICAgICAgYWx3YXlzIHlpZWxkcyBhIHBhaXIgb2YgZnJvbS90byB0ZXh0IGxpbmVzICh3aXRoIHRoZSBjaGFuZ2UKICAgICAgICBpbmRpY2F0aW9uKS4gIElmIG5lY2Vzc2FyeSBpdCB3aWxsIGNvbGxlY3Qgc2luZ2xlIGZyb20vdG8gbGluZXMKICAgICAgICB1bnRpbCBpdCBoYXMgYSBtYXRjaGluZyBwYWlyIGZyb20vdG8gcGFpciB0byB5aWVsZC4KCiAgICAgICAgTm90ZSwgdGhpcyBmdW5jdGlvbiBpcyBwdXJwb3NlZnVsbHkgbm90IGRlZmluZWQgYXQgdGhlIG1vZHVsZSBzY29wZSBzbwogICAgICAgIHRoYXQgZGF0YSBpdCBuZWVkcyBmcm9tIGl0cyBwYXJlbnQgZnVuY3Rpb24gKHdpdGhpbiB3aG9zZSBjb250ZXh0IGl0CiAgICAgICAgaXMgZGVmaW5lZCkgZG9lcyBub3QgbmVlZCB0byBiZSBvZiBtb2R1bGUgc2NvcGUuCiAgICAgICAgIiIiCiAgICAgICAgbGluZV9pdGVyYXRvciA9IF9saW5lX2l0ZXJhdG9yKCkKICAgICAgICBmcm9tbGluZXMsdG9saW5lcz1bXSxbXQogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICMgQ29sbGVjdGluZyBsaW5lcyBvZiB0ZXh0IHVudGlsIHdlIGhhdmUgYSBmcm9tL3RvIHBhaXIKICAgICAgICAgICAgd2hpbGUgKGxlbihmcm9tbGluZXMpPT0wIG9yIGxlbih0b2xpbmVzKT09MCk6CiAgICAgICAgICAgICAgICBmcm9tX2xpbmUsIHRvX2xpbmUsIGZvdW5kX2RpZmYgPSBuZXh0KGxpbmVfaXRlcmF0b3IpCiAgICAgICAgICAgICAgICBpZiBmcm9tX2xpbmUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgZnJvbWxpbmVzLmFwcGVuZCgoZnJvbV9saW5lLGZvdW5kX2RpZmYpKQogICAgICAgICAgICAgICAgaWYgdG9fbGluZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICB0b2xpbmVzLmFwcGVuZCgodG9fbGluZSxmb3VuZF9kaWZmKSkKICAgICAgICAgICAgIyBPbmNlIHdlIGhhdmUgYSBwYWlyLCByZW1vdmUgdGhlbSBmcm9tIHRoZSBjb2xsZWN0aW9uIGFuZCB5aWVsZCBpdAogICAgICAgICAgICBmcm9tX2xpbmUsIGZyb21EaWZmID0gZnJvbWxpbmVzLnBvcCgwKQogICAgICAgICAgICB0b19saW5lLCB0b19kaWZmID0gdG9saW5lcy5wb3AoMCkKICAgICAgICAgICAgeWllbGQgKGZyb21fbGluZSx0b19saW5lLGZyb21EaWZmIG9yIHRvX2RpZmYpCgogICAgIyBIYW5kbGUgY2FzZSB3aGVyZSB1c2VyIGRvZXMgbm90IHdhbnQgY29udGV4dCBkaWZmZXJlbmNpbmcsIGp1c3QgeWllbGQKICAgICMgdGhlbSB1cCB3aXRob3V0IGRvaW5nIGFueXRoaW5nIGVsc2Ugd2l0aCB0aGVtLgogICAgbGluZV9wYWlyX2l0ZXJhdG9yID0gX2xpbmVfcGFpcl9pdGVyYXRvcigpCiAgICBpZiBjb250ZXh0IGlzIE5vbmU6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgeWllbGQgbmV4dChsaW5lX3BhaXJfaXRlcmF0b3IpCiAgICAjIEhhbmRsZSBjYXNlIHdoZXJlIHVzZXIgd2FudHMgY29udGV4dCBkaWZmZXJlbmNpbmcuICBXZSBtdXN0IGRvIHNvbWUKICAgICMgc3RvcmFnZSBvZiBsaW5lcyB1bnRpbCB3ZSBrbm93IGZvciBzdXJlIHRoYXQgdGhleSBhcmUgdG8gYmUgeWllbGRlZC4KICAgIGVsc2U6CiAgICAgICAgY29udGV4dCArPSAxCiAgICAgICAgbGluZXNfdG9fd3JpdGUgPSAwCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgIyBTdG9yZSBsaW5lcyB1cCB1bnRpbCB3ZSBmaW5kIGEgZGlmZmVyZW5jZSwgbm90ZSB1c2Ugb2YgYQogICAgICAgICAgICAjIGNpcmN1bGFyIHF1ZXVlIGJlY2F1c2Ugd2Ugb25seSBuZWVkIHRvIGtlZXAgYXJvdW5kIHdoYXQKICAgICAgICAgICAgIyB3ZSBuZWVkIGZvciBjb250ZXh0LgogICAgICAgICAgICBpbmRleCwgY29udGV4dExpbmVzID0gMCwgW05vbmVdKihjb250ZXh0KQogICAgICAgICAgICBmb3VuZF9kaWZmID0gRmFsc2UKICAgICAgICAgICAgd2hpbGUoZm91bmRfZGlmZiBpcyBGYWxzZSk6CiAgICAgICAgICAgICAgICBmcm9tX2xpbmUsIHRvX2xpbmUsIGZvdW5kX2RpZmYgPSBuZXh0KGxpbmVfcGFpcl9pdGVyYXRvcikKICAgICAgICAgICAgICAgIGkgPSBpbmRleCAlIGNvbnRleHQKICAgICAgICAgICAgICAgIGNvbnRleHRMaW5lc1tpXSA9IChmcm9tX2xpbmUsIHRvX2xpbmUsIGZvdW5kX2RpZmYpCiAgICAgICAgICAgICAgICBpbmRleCArPSAxCiAgICAgICAgICAgICMgWWllbGQgbGluZXMgdGhhdCB3ZSBoYXZlIGNvbGxlY3RlZCBzbyBmYXIsIGJ1dCBmaXJzdCB5aWVsZAogICAgICAgICAgICAjIHRoZSB1c2VyJ3Mgc2VwYXJhdG9yLgogICAgICAgICAgICBpZiBpbmRleCA+IGNvbnRleHQ6CiAgICAgICAgICAgICAgICB5aWVsZCBOb25lLCBOb25lLCBOb25lCiAgICAgICAgICAgICAgICBsaW5lc190b193cml0ZSA9IGNvbnRleHQKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGxpbmVzX3RvX3dyaXRlID0gaW5kZXgKICAgICAgICAgICAgICAgIGluZGV4ID0gMAogICAgICAgICAgICB3aGlsZShsaW5lc190b193cml0ZSk6CiAgICAgICAgICAgICAgICBpID0gaW5kZXggJSBjb250ZXh0CiAgICAgICAgICAgICAgICBpbmRleCArPSAxCiAgICAgICAgICAgICAgICB5aWVsZCBjb250ZXh0TGluZXNbaV0KICAgICAgICAgICAgICAgIGxpbmVzX3RvX3dyaXRlIC09IDEKICAgICAgICAgICAgIyBOb3cgeWllbGQgdGhlIGNvbnRleHQgbGluZXMgYWZ0ZXIgdGhlIGNoYW5nZQogICAgICAgICAgICBsaW5lc190b193cml0ZSA9IGNvbnRleHQtMQogICAgICAgICAgICB3aGlsZShsaW5lc190b193cml0ZSk6CiAgICAgICAgICAgICAgICBmcm9tX2xpbmUsIHRvX2xpbmUsIGZvdW5kX2RpZmYgPSBuZXh0KGxpbmVfcGFpcl9pdGVyYXRvcikKICAgICAgICAgICAgICAgICMgSWYgYW5vdGhlciBjaGFuZ2Ugd2l0aGluIHRoZSBjb250ZXh0LCBleHRlbmQgdGhlIGNvbnRleHQKICAgICAgICAgICAgICAgIGlmIGZvdW5kX2RpZmY6CiAgICAgICAgICAgICAgICAgICAgbGluZXNfdG9fd3JpdGUgPSBjb250ZXh0LTEKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbGluZXNfdG9fd3JpdGUgLT0gMQogICAgICAgICAgICAgICAgeWllbGQgZnJvbV9saW5lLCB0b19saW5lLCBmb3VuZF9kaWZmCgoKX2ZpbGVfdGVtcGxhdGUgPSAiIiIKPCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIKICAgICAgICAgICJodHRwOi8vd3d3LnczLm9yZy9UUi94aHRtbDEvRFREL3hodG1sMS10cmFuc2l0aW9uYWwuZHRkIj4KCjxodG1sPgoKPGhlYWQ+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiCiAgICAgICAgICBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9SVNPLTg4NTktMSIgLz4KICAgIDx0aXRsZT48L3RpdGxlPgogICAgPHN0eWxlIHR5cGU9InRleHQvY3NzIj4lKHN0eWxlcylzCiAgICA8L3N0eWxlPgo8L2hlYWQ+Cgo8Ym9keT4KICAgICUodGFibGUpcyUobGVnZW5kKXMKPC9ib2R5PgoKPC9odG1sPiIiIgoKX3N0eWxlcyA9ICIiIgogICAgICAgIHRhYmxlLmRpZmYge2ZvbnQtZmFtaWx5OkNvdXJpZXI7IGJvcmRlcjptZWRpdW07fQogICAgICAgIC5kaWZmX2hlYWRlciB7YmFja2dyb3VuZC1jb2xvcjojZTBlMGUwfQogICAgICAgIHRkLmRpZmZfaGVhZGVyIHt0ZXh0LWFsaWduOnJpZ2h0fQogICAgICAgIC5kaWZmX25leHQge2JhY2tncm91bmQtY29sb3I6I2MwYzBjMH0KICAgICAgICAuZGlmZl9hZGQge2JhY2tncm91bmQtY29sb3I6I2FhZmZhYX0KICAgICAgICAuZGlmZl9jaGcge2JhY2tncm91bmQtY29sb3I6I2ZmZmY3N30KICAgICAgICAuZGlmZl9zdWIge2JhY2tncm91bmQtY29sb3I6I2ZmYWFhYX0iIiIKCl90YWJsZV90ZW1wbGF0ZSA9ICIiIgogICAgPHRhYmxlIGNsYXNzPSJkaWZmIiBpZD0iZGlmZmxpYl9jaGdfJShwcmVmaXgpc190b3AiCiAgICAgICAgICAgY2VsbHNwYWNpbmc9IjAiIGNlbGxwYWRkaW5nPSIwIiBydWxlcz0iZ3JvdXBzIiA+CiAgICAgICAgPGNvbGdyb3VwPjwvY29sZ3JvdXA+IDxjb2xncm91cD48L2NvbGdyb3VwPiA8Y29sZ3JvdXA+PC9jb2xncm91cD4KICAgICAgICA8Y29sZ3JvdXA+PC9jb2xncm91cD4gPGNvbGdyb3VwPjwvY29sZ3JvdXA+IDxjb2xncm91cD48L2NvbGdyb3VwPgogICAgICAgICUoaGVhZGVyX3JvdylzCiAgICAgICAgPHRib2R5PgolKGRhdGFfcm93cylzICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4iIiIKCl9sZWdlbmQgPSAiIiIKICAgIDx0YWJsZSBjbGFzcz0iZGlmZiIgc3VtbWFyeT0iTGVnZW5kcyI+CiAgICAgICAgPHRyPiA8dGggY29sc3Bhbj0iMiI+IExlZ2VuZHMgPC90aD4gPC90cj4KICAgICAgICA8dHI+IDx0ZD4gPHRhYmxlIGJvcmRlcj0iIiBzdW1tYXJ5PSJDb2xvcnMiPgogICAgICAgICAgICAgICAgICAgICAgPHRyPjx0aD4gQ29sb3JzIDwvdGg+IDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIGNsYXNzPSJkaWZmX2FkZCI+Jm5ic3A7QWRkZWQmbmJzcDs8L3RkPjwvdHI+CiAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIGNsYXNzPSJkaWZmX2NoZyI+Q2hhbmdlZDwvdGQ+IDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIGNsYXNzPSJkaWZmX3N1YiI+RGVsZXRlZDwvdGQ+IDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+PC90ZD4KICAgICAgICAgICAgIDx0ZD4gPHRhYmxlIGJvcmRlcj0iIiBzdW1tYXJ5PSJMaW5rcyI+CiAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRoIGNvbHNwYW49IjIiPiBMaW5rcyA8L3RoPiA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD4oZilpcnN0IGNoYW5nZTwvdGQ+IDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICA8dHI+PHRkPihuKWV4dCBjaGFuZ2U8L3RkPiA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgPHRyPjx0ZD4odClvcDwvdGQ+IDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+PC90ZD4gPC90cj4KICAgIDwvdGFibGU+IiIiCgpjbGFzcyBIdG1sRGlmZihvYmplY3QpOgogICAgIiIiRm9yIHByb2R1Y2luZyBIVE1MIHNpZGUgYnkgc2lkZSBjb21wYXJpc29uIHdpdGggY2hhbmdlIGhpZ2hsaWdodHMuCgogICAgVGhpcyBjbGFzcyBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYW4gSFRNTCB0YWJsZSAob3IgYSBjb21wbGV0ZSBIVE1MIGZpbGUKICAgIGNvbnRhaW5pbmcgdGhlIHRhYmxlKSBzaG93aW5nIGEgc2lkZSBieSBzaWRlLCBsaW5lIGJ5IGxpbmUgY29tcGFyaXNvbgogICAgb2YgdGV4dCB3aXRoIGludGVyLWxpbmUgYW5kIGludHJhLWxpbmUgY2hhbmdlIGhpZ2hsaWdodHMuICBUaGUgdGFibGUgY2FuCiAgICBiZSBnZW5lcmF0ZWQgaW4gZWl0aGVyIGZ1bGwgb3IgY29udGV4dHVhbCBkaWZmZXJlbmNlIG1vZGUuCgogICAgVGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSBwcm92aWRlZCBmb3IgSFRNTCBnZW5lcmF0aW9uOgoKICAgIG1ha2VfdGFibGUgLS0gZ2VuZXJhdGVzIEhUTUwgZm9yIGEgc2luZ2xlIHNpZGUgYnkgc2lkZSB0YWJsZQogICAgbWFrZV9maWxlIC0tIGdlbmVyYXRlcyBjb21wbGV0ZSBIVE1MIGZpbGUgd2l0aCBhIHNpbmdsZSBzaWRlIGJ5IHNpZGUgdGFibGUKCiAgICBTZWUgdG9vbHMvc2NyaXB0cy9kaWZmLnB5IGZvciBhbiBleGFtcGxlIHVzYWdlIG9mIHRoaXMgY2xhc3MuCiAgICAiIiIKCiAgICBfZmlsZV90ZW1wbGF0ZSA9IF9maWxlX3RlbXBsYXRlCiAgICBfc3R5bGVzID0gX3N0eWxlcwogICAgX3RhYmxlX3RlbXBsYXRlID0gX3RhYmxlX3RlbXBsYXRlCiAgICBfbGVnZW5kID0gX2xlZ2VuZAogICAgX2RlZmF1bHRfcHJlZml4ID0gMAoKICAgIGRlZiBfX2luaXRfXyhzZWxmLHRhYnNpemU9OCx3cmFwY29sdW1uPU5vbmUsbGluZWp1bms9Tm9uZSwKICAgICAgICAgICAgICAgICBjaGFyanVuaz1JU19DSEFSQUNURVJfSlVOSyk6CiAgICAgICAgIiIiSHRtbERpZmYgaW5zdGFuY2UgaW5pdGlhbGl6ZXIKCiAgICAgICAgQXJndW1lbnRzOgogICAgICAgIHRhYnNpemUgLS0gdGFiIHN0b3Agc3BhY2luZywgZGVmYXVsdHMgdG8gOC4KICAgICAgICB3cmFwY29sdW1uIC0tIGNvbHVtbiBudW1iZXIgd2hlcmUgbGluZXMgYXJlIGJyb2tlbiBhbmQgd3JhcHBlZCwKICAgICAgICAgICAgZGVmYXVsdHMgdG8gTm9uZSB3aGVyZSBsaW5lcyBhcmUgbm90IHdyYXBwZWQuCiAgICAgICAgbGluZWp1bmssY2hhcmp1bmsgLS0ga2V5d29yZCBhcmd1bWVudHMgcGFzc2VkIGludG8gbmRpZmYoKSAodXNlZCB0byBieQogICAgICAgICAgICBIdG1sRGlmZigpIHRvIGdlbmVyYXRlIHRoZSBzaWRlIGJ5IHNpZGUgSFRNTCBkaWZmZXJlbmNlcykuICBTZWUKICAgICAgICAgICAgbmRpZmYoKSBkb2N1bWVudGF0aW9uIGZvciBhcmd1bWVudCBkZWZhdWx0IHZhbHVlcyBhbmQgZGVzY3JpcHRpb25zLgogICAgICAgICIiIgogICAgICAgIHNlbGYuX3RhYnNpemUgPSB0YWJzaXplCiAgICAgICAgc2VsZi5fd3JhcGNvbHVtbiA9IHdyYXBjb2x1bW4KICAgICAgICBzZWxmLl9saW5lanVuayA9IGxpbmVqdW5rCiAgICAgICAgc2VsZi5fY2hhcmp1bmsgPSBjaGFyanVuawoKICAgIGRlZiBtYWtlX2ZpbGUoc2VsZixmcm9tbGluZXMsdG9saW5lcyxmcm9tZGVzYz0nJyx0b2Rlc2M9JycsY29udGV4dD1GYWxzZSwKICAgICAgICAgICAgICAgICAgbnVtbGluZXM9NSk6CiAgICAgICAgIiIiUmV0dXJucyBIVE1MIGZpbGUgb2Ygc2lkZSBieSBzaWRlIGNvbXBhcmlzb24gd2l0aCBjaGFuZ2UgaGlnaGxpZ2h0cwoKICAgICAgICBBcmd1bWVudHM6CiAgICAgICAgZnJvbWxpbmVzIC0tIGxpc3Qgb2YgImZyb20iIGxpbmVzCiAgICAgICAgdG9saW5lcyAtLSBsaXN0IG9mICJ0byIgbGluZXMKICAgICAgICBmcm9tZGVzYyAtLSAiZnJvbSIgZmlsZSBjb2x1bW4gaGVhZGVyIHN0cmluZwogICAgICAgIHRvZGVzYyAtLSAidG8iIGZpbGUgY29sdW1uIGhlYWRlciBzdHJpbmcKICAgICAgICBjb250ZXh0IC0tIHNldCB0byBUcnVlIGZvciBjb250ZXh0dWFsIGRpZmZlcmVuY2VzIChkZWZhdWx0cyB0byBGYWxzZQogICAgICAgICAgICB3aGljaCBzaG93cyBmdWxsIGRpZmZlcmVuY2VzKS4KICAgICAgICBudW1saW5lcyAtLSBudW1iZXIgb2YgY29udGV4dCBsaW5lcy4gIFdoZW4gY29udGV4dCBpcyBzZXQgVHJ1ZSwKICAgICAgICAgICAgY29udHJvbHMgbnVtYmVyIG9mIGxpbmVzIGRpc3BsYXllZCBiZWZvcmUgYW5kIGFmdGVyIHRoZSBjaGFuZ2UuCiAgICAgICAgICAgIFdoZW4gY29udGV4dCBpcyBGYWxzZSwgY29udHJvbHMgdGhlIG51bWJlciBvZiBsaW5lcyB0byBwbGFjZQogICAgICAgICAgICB0aGUgIm5leHQiIGxpbmsgYW5jaG9ycyBiZWZvcmUgdGhlIG5leHQgY2hhbmdlIChzbyBjbGljayBvZgogICAgICAgICAgICAibmV4dCIgbGluayBqdW1wcyB0byBqdXN0IGJlZm9yZSB0aGUgY2hhbmdlKS4KICAgICAgICAiIiIKCiAgICAgICAgcmV0dXJuIHNlbGYuX2ZpbGVfdGVtcGxhdGUgJSBkaWN0KAogICAgICAgICAgICBzdHlsZXMgPSBzZWxmLl9zdHlsZXMsCiAgICAgICAgICAgIGxlZ2VuZCA9IHNlbGYuX2xlZ2VuZCwKICAgICAgICAgICAgdGFibGUgPSBzZWxmLm1ha2VfdGFibGUoZnJvbWxpbmVzLHRvbGluZXMsZnJvbWRlc2MsdG9kZXNjLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0PWNvbnRleHQsbnVtbGluZXM9bnVtbGluZXMpKQoKICAgIGRlZiBfdGFiX25ld2xpbmVfcmVwbGFjZShzZWxmLGZyb21saW5lcyx0b2xpbmVzKToKICAgICAgICAiIiJSZXR1cm5zIGZyb20vdG8gbGluZSBsaXN0cyB3aXRoIHRhYnMgZXhwYW5kZWQgYW5kIG5ld2xpbmVzIHJlbW92ZWQuCgogICAgICAgIEluc3RlYWQgb2YgdGFiIGNoYXJhY3RlcnMgYmVpbmcgcmVwbGFjZWQgYnkgdGhlIG51bWJlciBvZiBzcGFjZXMKICAgICAgICBuZWVkZWQgdG8gZmlsbCBpbiB0byB0aGUgbmV4dCB0YWIgc3RvcCwgdGhpcyBmdW5jdGlvbiB3aWxsIGZpbGwKICAgICAgICB0aGUgc3BhY2Ugd2l0aCB0YWIgY2hhcmFjdGVycy4gIFRoaXMgaXMgZG9uZSBzbyB0aGF0IHRoZSBkaWZmZXJlbmNlCiAgICAgICAgYWxnb3JpdGhtcyBjYW4gaWRlbnRpZnkgY2hhbmdlcyBpbiBhIGZpbGUgd2hlbiB0YWJzIGFyZSByZXBsYWNlZCBieQogICAgICAgIHNwYWNlcyBhbmQgdmljZSB2ZXJzYS4gIEF0IHRoZSBlbmQgb2YgdGhlIEhUTUwgZ2VuZXJhdGlvbiwgdGhlIHRhYgogICAgICAgIGNoYXJhY3RlcnMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIGEgbm9uYnJlYWthYmxlIHNwYWNlLgogICAgICAgICIiIgogICAgICAgIGRlZiBleHBhbmRfdGFicyhsaW5lKToKICAgICAgICAgICAgIyBoaWRlIHJlYWwgc3BhY2VzCiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnJlcGxhY2UoJyAnLCdcMCcpCiAgICAgICAgICAgICMgZXhwYW5kIHRhYnMgaW50byBzcGFjZXMKICAgICAgICAgICAgbGluZSA9IGxpbmUuZXhwYW5kdGFicyhzZWxmLl90YWJzaXplKQogICAgICAgICAgICAjIHJlcGxhY2Ugc3BhY2VzIGZyb20gZXhwYW5kZWQgdGFicyBiYWNrIGludG8gdGFiIGNoYXJhY3RlcnMKICAgICAgICAgICAgIyAod2UnbGwgcmVwbGFjZSB0aGVtIHdpdGggbWFya3VwIGFmdGVyIHdlIGRvIGRpZmZlcmVuY2luZykKICAgICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgnICcsJ1x0JykKICAgICAgICAgICAgcmV0dXJuIGxpbmUucmVwbGFjZSgnXDAnLCcgJykucnN0cmlwKCdcbicpCiAgICAgICAgZnJvbWxpbmVzID0gW2V4cGFuZF90YWJzKGxpbmUpIGZvciBsaW5lIGluIGZyb21saW5lc10KICAgICAgICB0b2xpbmVzID0gW2V4cGFuZF90YWJzKGxpbmUpIGZvciBsaW5lIGluIHRvbGluZXNdCiAgICAgICAgcmV0dXJuIGZyb21saW5lcyx0b2xpbmVzCgogICAgZGVmIF9zcGxpdF9saW5lKHNlbGYsZGF0YV9saXN0LGxpbmVfbnVtLHRleHQpOgogICAgICAgICIiIkJ1aWxkcyBsaXN0IG9mIHRleHQgbGluZXMgYnkgc3BsaXR0aW5nIHRleHQgbGluZXMgYXQgd3JhcCBwb2ludAoKICAgICAgICBUaGlzIGZ1bmN0aW9uIHdpbGwgZGV0ZXJtaW5lIGlmIHRoZSBpbnB1dCB0ZXh0IGxpbmUgbmVlZHMgdG8gYmUKICAgICAgICB3cmFwcGVkIChzcGxpdCkgaW50byBzZXBhcmF0ZSBsaW5lcy4gIElmIHNvLCB0aGUgZmlyc3Qgd3JhcCBwb2ludAogICAgICAgIHdpbGwgYmUgZGV0ZXJtaW5lZCBhbmQgdGhlIGZpcnN0IGxpbmUgYXBwZW5kZWQgdG8gdGhlIG91dHB1dAogICAgICAgIHRleHQgbGluZSBsaXN0LiAgVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHJlY3Vyc2l2ZWx5IHRvIGhhbmRsZQogICAgICAgIHRoZSBzZWNvbmQgcGFydCBvZiB0aGUgc3BsaXQgbGluZSB0byBmdXJ0aGVyIHNwbGl0IGl0LgogICAgICAgICIiIgogICAgICAgICMgaWYgYmxhbmsgbGluZSBvciBjb250ZXh0IHNlcGFyYXRvciwganVzdCBhZGQgaXQgdG8gdGhlIG91dHB1dCBsaXN0CiAgICAgICAgaWYgbm90IGxpbmVfbnVtOgogICAgICAgICAgICBkYXRhX2xpc3QuYXBwZW5kKChsaW5lX251bSx0ZXh0KSkKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgICMgaWYgbGluZSB0ZXh0IGRvZXNuJ3QgbmVlZCB3cmFwcGluZywganVzdCBhZGQgaXQgdG8gdGhlIG91dHB1dCBsaXN0CiAgICAgICAgc2l6ZSA9IGxlbih0ZXh0KQogICAgICAgIG1heCA9IHNlbGYuX3dyYXBjb2x1bW4KICAgICAgICBpZiAoc2l6ZSA8PSBtYXgpIG9yICgoc2l6ZSAtKHRleHQuY291bnQoJ1wwJykqMykpIDw9IG1heCk6CiAgICAgICAgICAgIGRhdGFfbGlzdC5hcHBlbmQoKGxpbmVfbnVtLHRleHQpKQogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgIyBzY2FuIHRleHQgbG9va2luZyBmb3IgdGhlIHdyYXAgcG9pbnQsIGtlZXBpbmcgdHJhY2sgaWYgdGhlIHdyYXAKICAgICAgICAjIHBvaW50IGlzIGluc2lkZSBtYXJrZXJzCiAgICAgICAgaSA9IDAKICAgICAgICBuID0gMAogICAgICAgIG1hcmsgPSAnJwogICAgICAgIHdoaWxlIG4gPCBtYXggYW5kIGkgPCBzaXplOgogICAgICAgICAgICBpZiB0ZXh0W2ldID09ICdcMCc6CiAgICAgICAgICAgICAgICBpICs9IDEKICAgICAgICAgICAgICAgIG1hcmsgPSB0ZXh0W2ldCiAgICAgICAgICAgICAgICBpICs9IDEKICAgICAgICAgICAgZWxpZiB0ZXh0W2ldID09ICdcMSc6CiAgICAgICAgICAgICAgICBpICs9IDEKICAgICAgICAgICAgICAgIG1hcmsgPSAnJwogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICBuICs9IDEKCiAgICAgICAgIyB3cmFwIHBvaW50IGlzIGluc2lkZSB0ZXh0LCBicmVhayBpdCB1cCBpbnRvIHNlcGFyYXRlIGxpbmVzCiAgICAgICAgbGluZTEgPSB0ZXh0WzppXQogICAgICAgIGxpbmUyID0gdGV4dFtpOl0KCiAgICAgICAgIyBpZiB3cmFwIHBvaW50IGlzIGluc2lkZSBtYXJrZXJzLCBwbGFjZSBlbmQgbWFya2VyIGF0IGVuZCBvZiBmaXJzdAogICAgICAgICMgbGluZSBhbmQgc3RhcnQgbWFya2VyIGF0IGJlZ2lubmluZyBvZiBzZWNvbmQgbGluZSBiZWNhdXNlIGVhY2gKICAgICAgICAjIGxpbmUgd2lsbCBoYXZlIGl0cyBvd24gdGFibGUgdGFnIG1hcmt1cCBhcm91bmQgaXQuCiAgICAgICAgaWYgbWFyazoKICAgICAgICAgICAgbGluZTEgPSBsaW5lMSArICdcMScKICAgICAgICAgICAgbGluZTIgPSAnXDAnICsgbWFyayArIGxpbmUyCgogICAgICAgICMgdGFjayBvbiBmaXJzdCBsaW5lIG9udG8gdGhlIG91dHB1dCBsaXN0CiAgICAgICAgZGF0YV9saXN0LmFwcGVuZCgobGluZV9udW0sbGluZTEpKQoKICAgICAgICAjIHVzZSB0aGlzIHJvdXRpbmUgYWdhaW4gdG8gd3JhcCB0aGUgcmVtYWluaW5nIHRleHQKICAgICAgICBzZWxmLl9zcGxpdF9saW5lKGRhdGFfbGlzdCwnPicsbGluZTIpCgogICAgZGVmIF9saW5lX3dyYXBwZXIoc2VsZixkaWZmcyk6CiAgICAgICAgIiIiUmV0dXJucyBpdGVyYXRvciB0aGF0IHNwbGl0cyAod3JhcHMpIG1kaWZmIHRleHQgbGluZXMiIiIKCiAgICAgICAgIyBwdWxsIGZyb20vdG8gZGF0YSBhbmQgZmxhZ3MgZnJvbSBtZGlmZiBpdGVyYXRvcgogICAgICAgIGZvciBmcm9tZGF0YSx0b2RhdGEsZmxhZyBpbiBkaWZmczoKICAgICAgICAgICAgIyBjaGVjayBmb3IgY29udGV4dCBzZXBhcmF0b3JzIGFuZCBwYXNzIHRoZW0gdGhyb3VnaAogICAgICAgICAgICBpZiBmbGFnIGlzIE5vbmU6CiAgICAgICAgICAgICAgICB5aWVsZCBmcm9tZGF0YSx0b2RhdGEsZmxhZwogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgKGZyb21saW5lLGZyb210ZXh0KSwodG9saW5lLHRvdGV4dCkgPSBmcm9tZGF0YSx0b2RhdGEKICAgICAgICAgICAgIyBmb3IgZWFjaCBmcm9tL3RvIGxpbmUgc3BsaXQgaXQgYXQgdGhlIHdyYXAgY29sdW1uIHRvIGZvcm0KICAgICAgICAgICAgIyBsaXN0IG9mIHRleHQgbGluZXMuCiAgICAgICAgICAgIGZyb21saXN0LHRvbGlzdCA9IFtdLFtdCiAgICAgICAgICAgIHNlbGYuX3NwbGl0X2xpbmUoZnJvbWxpc3QsZnJvbWxpbmUsZnJvbXRleHQpCiAgICAgICAgICAgIHNlbGYuX3NwbGl0X2xpbmUodG9saXN0LHRvbGluZSx0b3RleHQpCiAgICAgICAgICAgICMgeWllbGQgZnJvbS90byBsaW5lIGluIHBhaXJzIGluc2VydGluZyBibGFuayBsaW5lcyBhcwogICAgICAgICAgICAjIG5lY2Vzc2FyeSB3aGVuIG9uZSBzaWRlIGhhcyBtb3JlIHdyYXBwZWQgbGluZXMKICAgICAgICAgICAgd2hpbGUgZnJvbWxpc3Qgb3IgdG9saXN0OgogICAgICAgICAgICAgICAgaWYgZnJvbWxpc3Q6CiAgICAgICAgICAgICAgICAgICAgZnJvbWRhdGEgPSBmcm9tbGlzdC5wb3AoMCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZnJvbWRhdGEgPSAoJycsJyAnKQogICAgICAgICAgICAgICAgaWYgdG9saXN0OgogICAgICAgICAgICAgICAgICAgIHRvZGF0YSA9IHRvbGlzdC5wb3AoMCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgdG9kYXRhID0gKCcnLCcgJykKICAgICAgICAgICAgICAgIHlpZWxkIGZyb21kYXRhLHRvZGF0YSxmbGFnCgogICAgZGVmIF9jb2xsZWN0X2xpbmVzKHNlbGYsZGlmZnMpOgogICAgICAgICIiIkNvbGxlY3RzIG1kaWZmIG91dHB1dCBpbnRvIHNlcGFyYXRlIGxpc3RzCgogICAgICAgIEJlZm9yZSBzdG9yaW5nIHRoZSBtZGlmZiBmcm9tL3RvIGRhdGEgaW50byBhIGxpc3QsIGl0IGlzIGNvbnZlcnRlZAogICAgICAgIGludG8gYSBzaW5nbGUgbGluZSBvZiB0ZXh0IHdpdGggSFRNTCBtYXJrdXAuCiAgICAgICAgIiIiCgogICAgICAgIGZyb21saXN0LHRvbGlzdCxmbGFnbGlzdCA9IFtdLFtdLFtdCiAgICAgICAgIyBwdWxsIGZyb20vdG8gZGF0YSBhbmQgZmxhZ3MgZnJvbSBtZGlmZiBzdHlsZSBpdGVyYXRvcgogICAgICAgIGZvciBmcm9tZGF0YSx0b2RhdGEsZmxhZyBpbiBkaWZmczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgIyBzdG9yZSBIVE1MIG1hcmt1cCBvZiB0aGUgbGluZXMgaW50byB0aGUgbGlzdHMKICAgICAgICAgICAgICAgIGZyb21saXN0LmFwcGVuZChzZWxmLl9mb3JtYXRfbGluZSgwLGZsYWcsKmZyb21kYXRhKSkKICAgICAgICAgICAgICAgIHRvbGlzdC5hcHBlbmQoc2VsZi5fZm9ybWF0X2xpbmUoMSxmbGFnLCp0b2RhdGEpKQogICAgICAgICAgICBleGNlcHQgVHlwZUVycm9yOgogICAgICAgICAgICAgICAgIyBleGNlcHRpb25zIG9jY3VyIGZvciBsaW5lcyB3aGVyZSBjb250ZXh0IHNlcGFyYXRvcnMgZ28KICAgICAgICAgICAgICAgIGZyb21saXN0LmFwcGVuZChOb25lKQogICAgICAgICAgICAgICAgdG9saXN0LmFwcGVuZChOb25lKQogICAgICAgICAgICBmbGFnbGlzdC5hcHBlbmQoZmxhZykKICAgICAgICByZXR1cm4gZnJvbWxpc3QsdG9saXN0LGZsYWdsaXN0CgogICAgZGVmIF9mb3JtYXRfbGluZShzZWxmLHNpZGUsZmxhZyxsaW5lbnVtLHRleHQpOgogICAgICAgICIiIlJldHVybnMgSFRNTCBtYXJrdXAgb2YgImZyb20iIC8gInRvIiB0ZXh0IGxpbmVzCgogICAgICAgIHNpZGUgLS0gMCBvciAxIGluZGljYXRpbmcgImZyb20iIG9yICJ0byIgdGV4dAogICAgICAgIGZsYWcgLS0gaW5kaWNhdGVzIGlmIGRpZmZlcmVuY2Ugb24gbGluZQogICAgICAgIGxpbmVudW0gLS0gbGluZSBudW1iZXIgKHVzZWQgZm9yIGxpbmUgbnVtYmVyIGNvbHVtbikKICAgICAgICB0ZXh0IC0tIGxpbmUgdGV4dCB0byBiZSBtYXJrZWQgdXAKICAgICAgICAiIiIKICAgICAgICB0cnk6CiAgICAgICAgICAgIGxpbmVudW0gPSAnJWQnICUgbGluZW51bQogICAgICAgICAgICBpZCA9ICcgaWQ9IiVzJXMiJyAlIChzZWxmLl9wcmVmaXhbc2lkZV0sbGluZW51bSkKICAgICAgICBleGNlcHQgVHlwZUVycm9yOgogICAgICAgICAgICAjIGhhbmRsZSBibGFuayBsaW5lcyB3aGVyZSBsaW5lbnVtIGlzICc+JyBvciAnJwogICAgICAgICAgICBpZCA9ICcnCiAgICAgICAgIyByZXBsYWNlIHRob3NlIHRoaW5ncyB0aGF0IHdvdWxkIGdldCBjb25mdXNlZCB3aXRoIEhUTUwgc3ltYm9scwogICAgICAgIHRleHQ9dGV4dC5yZXBsYWNlKCImIiwiJmFtcDsiKS5yZXBsYWNlKCI+IiwiJmd0OyIpLnJlcGxhY2UoIjwiLCImbHQ7IikKCiAgICAgICAgIyBtYWtlIHNwYWNlIG5vbi1icmVha2FibGUgc28gdGhleSBkb24ndCBnZXQgY29tcHJlc3NlZCBvciBsaW5lIHdyYXBwZWQKICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKCcgJywnJm5ic3A7JykucnN0cmlwKCkKCiAgICAgICAgcmV0dXJuICc8dGQgY2xhc3M9ImRpZmZfaGVhZGVyIiVzPiVzPC90ZD48dGQgbm93cmFwPSJub3dyYXAiPiVzPC90ZD4nIFwKICAgICAgICAgICAgICAgJSAoaWQsbGluZW51bSx0ZXh0KQoKICAgIGRlZiBfbWFrZV9wcmVmaXgoc2VsZik6CiAgICAgICAgIiIiQ3JlYXRlIHVuaXF1ZSBhbmNob3IgcHJlZml4ZXMiIiIKCiAgICAgICAgIyBHZW5lcmF0ZSBhIHVuaXF1ZSBhbmNob3IgcHJlZml4IHNvIG11bHRpcGxlIHRhYmxlcwogICAgICAgICMgY2FuIGV4aXN0IG9uIHRoZSBzYW1lIEhUTUwgcGFnZSB3aXRob3V0IGNvbmZsaWN0cy4KICAgICAgICBmcm9tcHJlZml4ID0gImZyb20lZF8iICUgSHRtbERpZmYuX2RlZmF1bHRfcHJlZml4CiAgICAgICAgdG9wcmVmaXggPSAidG8lZF8iICUgSHRtbERpZmYuX2RlZmF1bHRfcHJlZml4CiAgICAgICAgSHRtbERpZmYuX2RlZmF1bHRfcHJlZml4ICs9IDEKICAgICAgICAjIHN0b3JlIHByZWZpeGVzIHNvIGxpbmUgZm9ybWF0IG1ldGhvZCBoYXMgYWNjZXNzCiAgICAgICAgc2VsZi5fcHJlZml4ID0gW2Zyb21wcmVmaXgsdG9wcmVmaXhdCgogICAgZGVmIF9jb252ZXJ0X2ZsYWdzKHNlbGYsZnJvbWxpc3QsdG9saXN0LGZsYWdsaXN0LGNvbnRleHQsbnVtbGluZXMpOgogICAgICAgICIiIk1ha2VzIGxpc3Qgb2YgIm5leHQiIGxpbmtzIiIiCgogICAgICAgICMgYWxsIGFuY2hvciBuYW1lcyB3aWxsIGJlIGdlbmVyYXRlZCB1c2luZyB0aGUgdW5pcXVlICJ0byIgcHJlZml4CiAgICAgICAgdG9wcmVmaXggPSBzZWxmLl9wcmVmaXhbMV0KCiAgICAgICAgIyBwcm9jZXNzIGNoYW5nZSBmbGFncywgZ2VuZXJhdGluZyBtaWRkbGUgY29sdW1uIG9mIG5leHQgYW5jaG9ycy9saW5rcwogICAgICAgIG5leHRfaWQgPSBbJyddKmxlbihmbGFnbGlzdCkKICAgICAgICBuZXh0X2hyZWYgPSBbJyddKmxlbihmbGFnbGlzdCkKICAgICAgICBudW1fY2hnLCBpbl9jaGFuZ2UgPSAwLCBGYWxzZQogICAgICAgIGxhc3QgPSAwCiAgICAgICAgZm9yIGksZmxhZyBpbiBlbnVtZXJhdGUoZmxhZ2xpc3QpOgogICAgICAgICAgICBpZiBmbGFnOgogICAgICAgICAgICAgICAgaWYgbm90IGluX2NoYW5nZToKICAgICAgICAgICAgICAgICAgICBpbl9jaGFuZ2UgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGkKICAgICAgICAgICAgICAgICAgICAjIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBjaGFuZ2UsIGRyb3AgYW4gYW5jaG9yIGEgZmV3IGxpbmVzCiAgICAgICAgICAgICAgICAgICAgIyAodGhlIGNvbnRleHQgbGluZXMpIGJlZm9yZSB0aGUgY2hhbmdlIGZvciB0aGUgcHJldmlvdXMKICAgICAgICAgICAgICAgICAgICAjIGxpbmsKICAgICAgICAgICAgICAgICAgICBpID0gbWF4KFswLGktbnVtbGluZXNdKQogICAgICAgICAgICAgICAgICAgIG5leHRfaWRbaV0gPSAnIGlkPSJkaWZmbGliX2NoZ18lc18lZCInICUgKHRvcHJlZml4LG51bV9jaGcpCiAgICAgICAgICAgICAgICAgICAgIyBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgY2hhbmdlLCBkcm9wIGEgbGluayB0byB0aGUgbmV4dAogICAgICAgICAgICAgICAgICAgICMgY2hhbmdlCiAgICAgICAgICAgICAgICAgICAgbnVtX2NoZyArPSAxCiAgICAgICAgICAgICAgICAgICAgbmV4dF9ocmVmW2xhc3RdID0gJzxhIGhyZWY9IiNkaWZmbGliX2NoZ18lc18lZCI+bjwvYT4nICUgKAogICAgICAgICAgICAgICAgICAgICAgICAgdG9wcmVmaXgsbnVtX2NoZykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGluX2NoYW5nZSA9IEZhbHNlCiAgICAgICAgIyBjaGVjayBmb3IgY2FzZXMgd2hlcmUgdGhlcmUgaXMgbm8gY29udGVudCB0byBhdm9pZCBleGNlcHRpb25zCiAgICAgICAgaWYgbm90IGZsYWdsaXN0OgogICAgICAgICAgICBmbGFnbGlzdCA9IFtGYWxzZV0KICAgICAgICAgICAgbmV4dF9pZCA9IFsnJ10KICAgICAgICAgICAgbmV4dF9ocmVmID0gWycnXQogICAgICAgICAgICBsYXN0ID0gMAogICAgICAgICAgICBpZiBjb250ZXh0OgogICAgICAgICAgICAgICAgZnJvbWxpc3QgPSBbJzx0ZD48L3RkPjx0ZD4mbmJzcDtObyBEaWZmZXJlbmNlcyBGb3VuZCZuYnNwOzwvdGQ+J10KICAgICAgICAgICAgICAgIHRvbGlzdCA9IGZyb21saXN0CiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBmcm9tbGlzdCA9IHRvbGlzdCA9IFsnPHRkPjwvdGQ+PHRkPiZuYnNwO0VtcHR5IEZpbGUmbmJzcDs8L3RkPiddCiAgICAgICAgIyBpZiBub3QgYSBjaGFuZ2Ugb24gZmlyc3QgbGluZSwgZHJvcCBhIGxpbmsKICAgICAgICBpZiBub3QgZmxhZ2xpc3RbMF06CiAgICAgICAgICAgIG5leHRfaHJlZlswXSA9ICc8YSBocmVmPSIjZGlmZmxpYl9jaGdfJXNfMCI+ZjwvYT4nICUgdG9wcmVmaXgKICAgICAgICAjIHJlZG8gdGhlIGxhc3QgbGluayB0byBsaW5rIHRvIHRoZSB0b3AKICAgICAgICBuZXh0X2hyZWZbbGFzdF0gPSAnPGEgaHJlZj0iI2RpZmZsaWJfY2hnXyVzX3RvcCI+dDwvYT4nICUgKHRvcHJlZml4KQoKICAgICAgICByZXR1cm4gZnJvbWxpc3QsdG9saXN0LGZsYWdsaXN0LG5leHRfaHJlZixuZXh0X2lkCgogICAgZGVmIG1ha2VfdGFibGUoc2VsZixmcm9tbGluZXMsdG9saW5lcyxmcm9tZGVzYz0nJyx0b2Rlc2M9JycsY29udGV4dD1GYWxzZSwKICAgICAgICAgICAgICAgICAgIG51bWxpbmVzPTUpOgogICAgICAgICIiIlJldHVybnMgSFRNTCB0YWJsZSBvZiBzaWRlIGJ5IHNpZGUgY29tcGFyaXNvbiB3aXRoIGNoYW5nZSBoaWdobGlnaHRzCgogICAgICAgIEFyZ3VtZW50czoKICAgICAgICBmcm9tbGluZXMgLS0gbGlzdCBvZiAiZnJvbSIgbGluZXMKICAgICAgICB0b2xpbmVzIC0tIGxpc3Qgb2YgInRvIiBsaW5lcwogICAgICAgIGZyb21kZXNjIC0tICJmcm9tIiBmaWxlIGNvbHVtbiBoZWFkZXIgc3RyaW5nCiAgICAgICAgdG9kZXNjIC0tICJ0byIgZmlsZSBjb2x1bW4gaGVhZGVyIHN0cmluZwogICAgICAgIGNvbnRleHQgLS0gc2V0IHRvIFRydWUgZm9yIGNvbnRleHR1YWwgZGlmZmVyZW5jZXMgKGRlZmF1bHRzIHRvIEZhbHNlCiAgICAgICAgICAgIHdoaWNoIHNob3dzIGZ1bGwgZGlmZmVyZW5jZXMpLgogICAgICAgIG51bWxpbmVzIC0tIG51bWJlciBvZiBjb250ZXh0IGxpbmVzLiAgV2hlbiBjb250ZXh0IGlzIHNldCBUcnVlLAogICAgICAgICAgICBjb250cm9scyBudW1iZXIgb2YgbGluZXMgZGlzcGxheWVkIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIGNoYW5nZS4KICAgICAgICAgICAgV2hlbiBjb250ZXh0IGlzIEZhbHNlLCBjb250cm9scyB0aGUgbnVtYmVyIG9mIGxpbmVzIHRvIHBsYWNlCiAgICAgICAgICAgIHRoZSAibmV4dCIgbGluayBhbmNob3JzIGJlZm9yZSB0aGUgbmV4dCBjaGFuZ2UgKHNvIGNsaWNrIG9mCiAgICAgICAgICAgICJuZXh0IiBsaW5rIGp1bXBzIHRvIGp1c3QgYmVmb3JlIHRoZSBjaGFuZ2UpLgogICAgICAgICIiIgoKICAgICAgICAjIG1ha2UgdW5pcXVlIGFuY2hvciBwcmVmaXhlcyBzbyB0aGF0IG11bHRpcGxlIHRhYmxlcyBtYXkgZXhpc3QKICAgICAgICAjIG9uIHRoZSBzYW1lIHBhZ2Ugd2l0aG91dCBjb25mbGljdC4KICAgICAgICBzZWxmLl9tYWtlX3ByZWZpeCgpCgogICAgICAgICMgY2hhbmdlIHRhYnMgdG8gc3BhY2VzIGJlZm9yZSBpdCBnZXRzIG1vcmUgZGlmZmljdWx0IGFmdGVyIHdlIGluc2VydAogICAgICAgICMgbWFya2t1cAogICAgICAgIGZyb21saW5lcyx0b2xpbmVzID0gc2VsZi5fdGFiX25ld2xpbmVfcmVwbGFjZShmcm9tbGluZXMsdG9saW5lcykKCiAgICAgICAgIyBjcmVhdGUgZGlmZnMgaXRlcmF0b3Igd2hpY2ggZ2VuZXJhdGVzIHNpZGUgYnkgc2lkZSBmcm9tL3RvIGRhdGEKICAgICAgICBpZiBjb250ZXh0OgogICAgICAgICAgICBjb250ZXh0X2xpbmVzID0gbnVtbGluZXMKICAgICAgICBlbHNlOgogICAgICAgICAgICBjb250ZXh0X2xpbmVzID0gTm9uZQogICAgICAgIGRpZmZzID0gX21kaWZmKGZyb21saW5lcyx0b2xpbmVzLGNvbnRleHRfbGluZXMsbGluZWp1bms9c2VsZi5fbGluZWp1bmssCiAgICAgICAgICAgICAgICAgICAgICBjaGFyanVuaz1zZWxmLl9jaGFyanVuaykKCiAgICAgICAgIyBzZXQgdXAgaXRlcmF0b3IgdG8gd3JhcCBsaW5lcyB0aGF0IGV4Y2VlZCBkZXNpcmVkIHdpZHRoCiAgICAgICAgaWYgc2VsZi5fd3JhcGNvbHVtbjoKICAgICAgICAgICAgZGlmZnMgPSBzZWxmLl9saW5lX3dyYXBwZXIoZGlmZnMpCgogICAgICAgICMgY29sbGVjdCB1cCBmcm9tL3RvIGxpbmVzIGFuZCBmbGFncyBpbnRvIGxpc3RzIChhbHNvIGZvcm1hdCB0aGUgbGluZXMpCiAgICAgICAgZnJvbWxpc3QsdG9saXN0LGZsYWdsaXN0ID0gc2VsZi5fY29sbGVjdF9saW5lcyhkaWZmcykKCiAgICAgICAgIyBwcm9jZXNzIGNoYW5nZSBmbGFncywgZ2VuZXJhdGluZyBtaWRkbGUgY29sdW1uIG9mIG5leHQgYW5jaG9ycy9saW5rcwogICAgICAgIGZyb21saXN0LHRvbGlzdCxmbGFnbGlzdCxuZXh0X2hyZWYsbmV4dF9pZCA9IHNlbGYuX2NvbnZlcnRfZmxhZ3MoCiAgICAgICAgICAgIGZyb21saXN0LHRvbGlzdCxmbGFnbGlzdCxjb250ZXh0LG51bWxpbmVzKQoKICAgICAgICBzID0gW10KICAgICAgICBmbXQgPSAnICAgICAgICAgICAgPHRyPjx0ZCBjbGFzcz0iZGlmZl9uZXh0IiVzPiVzPC90ZD4lcycgKyBcCiAgICAgICAgICAgICAgJzx0ZCBjbGFzcz0iZGlmZl9uZXh0Ij4lczwvdGQ+JXM8L3RyPlxuJwogICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihmbGFnbGlzdCkpOgogICAgICAgICAgICBpZiBmbGFnbGlzdFtpXSBpcyBOb25lOgogICAgICAgICAgICAgICAgIyBtZGlmZiB5aWVsZHMgTm9uZSBvbiBzZXBhcmF0b3IgbGluZXMgc2tpcCB0aGUgYm9ndXMgb25lcwogICAgICAgICAgICAgICAgIyBnZW5lcmF0ZWQgZm9yIHRoZSBmaXJzdCBsaW5lCiAgICAgICAgICAgICAgICBpZiBpID4gMDoKICAgICAgICAgICAgICAgICAgICBzLmFwcGVuZCgnICAgICAgICA8L3Rib2R5PiAgICAgICAgXG4gICAgICAgIDx0Ym9keT5cbicpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzLmFwcGVuZCggZm10ICUgKG5leHRfaWRbaV0sbmV4dF9ocmVmW2ldLGZyb21saXN0W2ldLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dF9ocmVmW2ldLHRvbGlzdFtpXSkpCiAgICAgICAgaWYgZnJvbWRlc2Mgb3IgdG9kZXNjOgogICAgICAgICAgICBoZWFkZXJfcm93ID0gJzx0aGVhZD48dHI+JXMlcyVzJXM8L3RyPjwvdGhlYWQ+JyAlICgKICAgICAgICAgICAgICAgICc8dGggY2xhc3M9ImRpZmZfbmV4dCI+PGJyIC8+PC90aD4nLAogICAgICAgICAgICAgICAgJzx0aCBjb2xzcGFuPSIyIiBjbGFzcz0iZGlmZl9oZWFkZXIiPiVzPC90aD4nICUgZnJvbWRlc2MsCiAgICAgICAgICAgICAgICAnPHRoIGNsYXNzPSJkaWZmX25leHQiPjxiciAvPjwvdGg+JywKICAgICAgICAgICAgICAgICc8dGggY29sc3Bhbj0iMiIgY2xhc3M9ImRpZmZfaGVhZGVyIj4lczwvdGg+JyAlIHRvZGVzYykKICAgICAgICBlbHNlOgogICAgICAgICAgICBoZWFkZXJfcm93ID0gJycKCiAgICAgICAgdGFibGUgPSBzZWxmLl90YWJsZV90ZW1wbGF0ZSAlIGRpY3QoCiAgICAgICAgICAgIGRhdGFfcm93cz0nJy5qb2luKHMpLAogICAgICAgICAgICBoZWFkZXJfcm93PWhlYWRlcl9yb3csCiAgICAgICAgICAgIHByZWZpeD1zZWxmLl9wcmVmaXhbMV0pCgogICAgICAgIHJldHVybiB0YWJsZS5yZXBsYWNlKCdcMCsnLCc8c3BhbiBjbGFzcz0iZGlmZl9hZGQiPicpLiBcCiAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2UoJ1wwLScsJzxzcGFuIGNsYXNzPSJkaWZmX3N1YiI+JykuIFwKICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZSgnXDBeJywnPHNwYW4gY2xhc3M9ImRpZmZfY2hnIj4nKS4gXAogICAgICAgICAgICAgICAgICAgICByZXBsYWNlKCdcMScsJzwvc3Bhbj4nKS4gXAogICAgICAgICAgICAgICAgICAgICByZXBsYWNlKCdcdCcsJyZuYnNwOycpCgpkZWwgcmUKCmRlZiByZXN0b3JlKGRlbHRhLCB3aGljaCk6CiAgICByIiIiCiAgICBHZW5lcmF0ZSBvbmUgb2YgdGhlIHR3byBzZXF1ZW5jZXMgdGhhdCBnZW5lcmF0ZWQgYSBkZWx0YS4KCiAgICBHaXZlbiBhIGBkZWx0YWAgcHJvZHVjZWQgYnkgYERpZmZlci5jb21wYXJlKClgIG9yIGBuZGlmZigpYCwgZXh0cmFjdAogICAgbGluZXMgb3JpZ2luYXRpbmcgZnJvbSBmaWxlIDEgb3IgMiAocGFyYW1ldGVyIGB3aGljaGApLCBzdHJpcHBpbmcgb2ZmIGxpbmUKICAgIHByZWZpeGVzLgoKICAgIEV4YW1wbGVzOgoKICAgID4+PiBkaWZmID0gbmRpZmYoJ29uZVxudHdvXG50aHJlZVxuJy5zcGxpdGxpbmVzKGtlZXBlbmRzPVRydWUpLAogICAgLi4uICAgICAgICAgICAgICAnb3JlXG50cmVlXG5lbXVcbicuc3BsaXRsaW5lcyhrZWVwZW5kcz1UcnVlKSkKICAgID4+PiBkaWZmID0gbGlzdChkaWZmKQogICAgPj4+IHByaW50KCcnLmpvaW4ocmVzdG9yZShkaWZmLCAxKSksIGVuZD0iIikKICAgIG9uZQogICAgdHdvCiAgICB0aHJlZQogICAgPj4+IHByaW50KCcnLmpvaW4ocmVzdG9yZShkaWZmLCAyKSksIGVuZD0iIikKICAgIG9yZQogICAgdHJlZQogICAgZW11CiAgICAiIiIKICAgIHRyeToKICAgICAgICB0YWcgPSB7MTogIi0gIiwgMjogIisgIn1baW50KHdoaWNoKV0KICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCd1bmtub3duIGRlbHRhIGNob2ljZSAobXVzdCBiZSAxIG9yIDIpOiAlcicKICAgICAgICAgICAgICAgICAgICAgICAgICAgJSB3aGljaCkKICAgIHByZWZpeGVzID0gKCIgICIsIHRhZykKICAgIGZvciBsaW5lIGluIGRlbHRhOgogICAgICAgIGlmIGxpbmVbOjJdIGluIHByZWZpeGVzOgogICAgICAgICAgICB5aWVsZCBsaW5lWzI6XQoKZGVmIF90ZXN0KCk6CiAgICBpbXBvcnQgZG9jdGVzdCwgZGlmZmxpYgogICAgcmV0dXJuIGRvY3Rlc3QudGVzdG1vZChkaWZmbGliKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIF90ZXN0KCkK',
'/Lib/dis.py':'ZGVmIGRpcyhzcmMpOgogICAgcmV0dXJuIEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5MmpzKHNyYykpLnRvX2pzKCkK',
'/Lib/errno.py':'IlRoaXMgbW9kdWxlIG1ha2VzIGF2YWlsYWJsZSBzdGFuZGFyZCBlcnJubyBzeXN0ZW0gc3ltYm9scy5cblxuVGhlIHZhbHVlIG9mIGVhY2ggc3ltYm9sIGlzIHRoZSBjb3JyZXNwb25kaW5nIGludGVnZXIgdmFsdWUsXG5lLmcuLCBvbiBtb3N0IHN5c3RlbXMsIGVycm5vLkVOT0VOVCBlcXVhbHMgdGhlIGludGVnZXIgMi5cblxuVGhlIGRpY3Rpb25hcnkgZXJybm8uZXJyb3Jjb2RlIG1hcHMgbnVtZXJpYyBjb2RlcyB0byBzeW1ib2wgbmFtZXMsXG5lLmcuLCBlcnJuby5lcnJvcmNvZGVbMl0gY291bGQgYmUgdGhlIHN0cmluZyAnRU5PRU5UJy5cblxuU3ltYm9scyB0aGF0IGFyZSBub3QgcmVsZXZhbnQgdG8gdGhlIHVuZGVybHlpbmcgc3lzdGVtIGFyZSBub3QgZGVmaW5lZC5cblxuVG8gbWFwIGVycm9yIGNvZGVzIHRvIGVycm9yIG1lc3NhZ2VzLCB1c2UgdGhlIGZ1bmN0aW9uIG9zLnN0cmVycm9yKCksXG5lLmcuIG9zLnN0cmVycm9yKDIpIGNvdWxkIHJldHVybiAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScuIgoKRTJCSUcgPSA3CkVBQ0NFUyA9IDEzCkVBRERSSU5VU0UgPSA5OApFQUREUk5PVEFWQUlMID0gOTkKRUFEViA9IDY4CkVBRk5PU1VQUE9SVCA9IDk3CkVBR0FJTiA9IDExCkVBTFJFQURZID0gMTE0CkVCQURFID0gNTIKRUJBREYgPSA5CkVCQURGRCA9IDc3CkVCQURNU0cgPSA3NApFQkFEUiA9IDUzCkVCQURSUUMgPSA1NgpFQkFEU0xUID0gNTcKRUJGT05UID0gNTkKRUJVU1kgPSAxNgpFQ0hJTEQgPSAxMApFQ0hSTkcgPSA0NApFQ09NTSA9IDcwCkVDT05OQUJPUlRFRCA9IDEwMwpFQ09OTlJFRlVTRUQgPSAxMTEKRUNPTk5SRVNFVCA9IDEwNApFREVBRExLID0gMzUKRURFQURMT0NLID0gMzUKRURFU1RBRERSUkVRID0gODkKRURPTSA9IDMzCkVET1RET1QgPSA3MwpFRFFVT1QgPSAxMjIKRUVYSVNUID0gMTcKRUZBVUxUID0gMTQKRUZCSUcgPSAyNwpFSE9TVERPV04gPSAxMTIKRUhPU1RVTlJFQUNIID0gMTEzCkVJRFJNID0gNDMKRUlMU0VRID0gODQKRUlOUFJPR1JFU1MgPSAxMTUKRUlOVFIgPSA0CkVJTlZBTCA9IDIyCkVJTyA9IDUKRUlTQ09OTiA9IDEwNgpFSVNESVIgPSAyMQpFSVNOQU0gPSAxMjAKRUwySExUID0gNTEKRUwyTlNZTkMgPSA0NQpFTDNITFQgPSA0NgpFTDNSU1QgPSA0NwpFTElCQUNDID0gNzkKRUxJQkJBRCA9IDgwCkVMSUJFWEVDID0gODMKRUxJQk1BWCA9IDgyCkVMSUJTQ04gPSA4MQpFTE5STkcgPSA0OApFTE9PUCA9IDQwCkVNRklMRSA9IDI0CkVNTElOSyA9IDMxCkVNU0dTSVpFID0gOTAKRU1VTFRJSE9QID0gNzIKRU5BTUVUT09MT05HID0gMzYKRU5BVkFJTCA9IDExOQpFTkVURE9XTiA9IDEwMApFTkVUUkVTRVQgPSAxMDIKRU5FVFVOUkVBQ0ggPSAxMDEKRU5GSUxFID0gMjMKRU5PQU5PID0gNTUKRU5PQlVGUyA9IDEwNQpFTk9DU0kgPSA1MApFTk9EQVRBID0gNjEKRU5PREVWID0gMTkKRU5PRU5UID0gMgpFTk9FWEVDID0gOApFTk9MQ0sgPSAzNwpFTk9MSU5LID0gNjcKRU5PTUVNID0gMTIKRU5PTVNHID0gNDIKRU5PTkVUID0gNjQKRU5PUEtHID0gNjUKRU5PUFJPVE9PUFQgPSA5MgpFTk9TUEMgPSAyOApFTk9TUiA9IDYzCkVOT1NUUiA9IDYwCkVOT1NZUyA9IDM4CkVOT1RCTEsgPSAxNQpFTk9UQ09OTiA9IDEwNwpFTk9URElSID0gMjAKRU5PVEVNUFRZID0gMzkKRU5PVE5BTSA9IDExOApFTk9UU09DSyA9IDg4CkVOT1RUWSA9IDI1CkVOT1RVTklRID0gNzYKRU5YSU8gPSA2CkVPUE5PVFNVUFAgPSA5NQpFT1ZFUkZMT1cgPSA3NQpFUEVSTSA9IDEKRVBGTk9TVVBQT1JUID0gOTYKRVBJUEUgPSAzMgpFUFJPVE8gPSA3MQpFUFJPVE9OT1NVUFBPUlQgPSA5MwpFUFJPVE9UWVBFID0gOTEKRVJBTkdFID0gMzQKRVJFTUNIRyA9IDc4CkVSRU1PVEUgPSA2NgpFUkVNT1RFSU8gPSAxMjEKRVJFU1RBUlQgPSA4NQpFUk9GUyA9IDMwCkVTSFVURE9XTiA9IDEwOApFU09DS1ROT1NVUFBPUlQgPSA5NApFU1BJUEUgPSAyOQpFU1JDSCA9IDMKRVNSTU5UID0gNjkKRVNUQUxFID0gMTE2CkVTVFJQSVBFID0gODYKRVRJTUUgPSA2MgpFVElNRURPVVQgPSAxMTAKRVRPT01BTllSRUZTID0gMTA5CkVUWFRCU1kgPSAyNgpFVUNMRUFOID0gMTE3CkVVTkFUQ0ggPSA0OQpFVVNFUlMgPSA4NwpFV09VTERCTE9DSyA9IDExCkVYREVWID0gMTgKRVhGVUxMID0gNTQKIyBlcnJvcmNvZGUK',
'/Lib/external_import.py':'aW1wb3J0IG9zCmZyb20gYnJvd3NlciBpbXBvcnQgZG9jCmltcG9ydCB1cmxsaWIucmVxdWVzdAoKIyMgdGhpcyBtb2R1bGUgaXMgYWJsZSB0byBkb3dubG9hZCBtb2R1bGVzIHRoYXQgYXJlIGV4dGVybmFsIHRvCiMjIGxvY2FsaG9zdC9zcmMKIyMgc28gd2UgY291bGQgZG93bmxvYWQgZnJvbSBhbnkgVVJMCgpjbGFzcyBNb2R1bGVGaW5kZXI6CiAgICBkZWYgX19pbml0X18oc2VsZiwgcGF0aF9lbnRyeSk6CiAgICAgICAgcHJpbnQoImV4dGVybmFsX2ltcG9ydCBoZXJlLi4iKQogICAgICAgICNwcmludChwYXRoX2VudHJ5KQogICAgICAgIHNlbGYuX21vZHVsZT1Ob25lCiAgICAgICAgaWYgcGF0aF9lbnRyeS5zdGFydHN3aXRoKCdodHRwOi8vJyk6CiAgICAgICAgICAgc2VsZi5wYXRoX2VudHJ5PXBhdGhfZW50cnkKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigpCiAgICAgICAgCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzwlcyBmb3IgIiVzIj4nICUgKHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBzZWxmLnBhdGhfZW50cnkpCiAgICAgICAgCiAgICBkZWYgZmluZF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUsIHBhdGg9Tm9uZSk6CiAgICAgICAgcGF0aCA9IHBhdGggb3Igc2VsZi5wYXRoX2VudHJ5CiAgICAgICAgI3ByaW50KCdsb29raW5nIGZvciAiJXMiIGluICVzIC4uLicgJSAoZnVsbG5hbWUsIHBhdGgpKQogICAgICAgIGZvciBfZXh0IGluIFsnanMnLCAncHlqJywgJ3B5J106CiAgICAgICAgICAgIF9mcCxfdXJsLF9oZWFkZXJzPXVybGxpYi5yZXF1ZXN0LnVybG9wZW4ocGF0aCArICcvJyArICclcy4lcycgJSAoZnVsbG5hbWUsIF9leHQpKQogICAgICAgICAgICBzZWxmLl9tb2R1bGU9X2ZwLnJlYWQoKQogICAgICAgICAgICBfZnAuY2xvc2UoKQogICAgICAgICAgICBpZiBzZWxmLl9tb2R1bGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgIHByaW50KCJtb2R1bGUgZm91bmQgYXQgJXM6JXMiICUgKHBhdGgsIGZ1bGxuYW1lKSkKICAgICAgICAgICAgICAgcmV0dXJuIE1vZHVsZUxvYWRlcihwYXRoLCBmdWxsbmFtZSwgc2VsZi5fbW9kdWxlKQoKICAgICAgICBwcmludCgnbW9kdWxlICVzIG5vdCBmb3VuZCcgJSBmdWxsbmFtZSkKICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigpCiAgICAgICAgcmV0dXJuIE5vbmUKCmNsYXNzIE1vZHVsZUxvYWRlcjoKICAgICIiIkxvYWQgc291cmNlIGZvciBtb2R1bGVzIiIiCiAgICAKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBmaWxlcGF0aCwgbmFtZSwgbW9kdWxlX3NvdXJjZSk6CiAgICAgICAgc2VsZi5fZmlsZXBhdGg9ZmlsZXBhdGgKICAgICAgICBzZWxmLl9uYW1lPW5hbWUKICAgICAgICBzZWxmLl9tb2R1bGVfc291cmNlPW1vZHVsZV9zb3VyY2UKICAgICAgICAKICAgIGRlZiBnZXRfc291cmNlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9tb2R1bGVfc291cmNlCgogICAgZGVmIGlzX3BhY2thZ2Uoc2VsZik6CiAgICAgICAgcmV0dXJuICcuJyBpbiBzZWxmLl9uYW1lCiAgICAgICAgICAgIAogICAgZGVmIGxvYWRfbW9kdWxlKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX25hbWUgaW4gc3lzLm1vZHVsZXM6CiAgICAgICAgICAgI3ByaW50KCdyZXVzaW5nIGV4aXN0aW5nIG1vZHVsZSBmcm9tIHByZXZpb3VzIGltcG9ydCBvZiAiJXMiJyAlIGZ1bGxuYW1lKQogICAgICAgICAgIG1vZCA9IHN5cy5tb2R1bGVzW3NlbGYuX25hbWVdCiAgICAgICAgICAgcmV0dXJuIG1vZAogICAgICAgIAogICAgICAgIF9zcmM9c2VsZi5nZXRfc291cmNlKCkKICAgICAgICBpZiBzZWxmLl9maWxlcGF0aC5lbmRzd2l0aCgnLmpzJyk6CiAgICAgICAgICAgbW9kPUpTT2JqZWN0KGltcG9ydF9qc19tb2R1bGUoX3NyYywgc2VsZi5fZmlsZXBhdGgsIHNlbGYuX25hbWUpKQogICAgICAgIGVsaWYgc2VsZi5fZmlsZXBhdGguZW5kc3dpdGgoJy5weScpOgogICAgICAgICAgIG1vZD1KU09iamVjdChpbXBvcnRfcHlfbW9kdWxlKF9zcmMsIHNlbGYuX2ZpbGVwYXRoLCBzZWxmLl9uYW1lKSkKICAgICAgICBlbGlmIHNlbGYuX2ZpbGVwYXRoLmVuZHN3aXRoKCcucHlqJyk6CiAgICAgICAgICAgbW9kPUpTT2JqZWN0KGltcG9ydF9weWpfbW9kdWxlKF9zcmMsIHNlbGYuX2ZpbGVwYXRoLCBzZWxmLl9uYW1lKSkKICAgICAgICBlbHNlOgogICAgICAgICAgIHJhaXNlIEltcG9ydEVycm9yKCdJbnZhbGlkIE1vZHVsZTogJXMnICUgc2VsZi5fZmlsZXBhdGgpCgogICAgICAgICMgU2V0IGEgZmV3IHByb3BlcnRpZXMgcmVxdWlyZWQgYnkgUEVQIDMwMgogICAgICAgIG1vZC5fX2ZpbGVfXyA9IHNlbGYuX2ZpbGVwYXRoCiAgICAgICAgbW9kLl9fbmFtZV9fID0gc2VsZi5fbmFtZQogICAgICAgIG1vZC5fX3BhdGhfXyA9IG9zLnBhdGguYWJzcGF0aChzZWxmLl9maWxlcGF0aCkKICAgICAgICBtb2QuX19sb2FkZXJfXyA9IHNlbGYKICAgICAgICBtb2QuX19wYWNrYWdlX18gPSAnLicuam9pbihzZWxmLl9uYW1lLnNwbGl0KCcuJylbOi0xXSkKICAgICAgICAKICAgICAgICBpZiBzZWxmLmlzX3BhY2thZ2UoKToKICAgICAgICAgICBwcmludCgnYWRkaW5nIHBhdGggZm9yIHBhY2thZ2UnKQogICAgICAgICAgICMgU2V0IF9fcGF0aF9fIGZvciBwYWNrYWdlcwogICAgICAgICAgICMgc28gd2UgY2FuIGZpbmQgdGhlIHN1Yi1tb2R1bGVzLgogICAgICAgICAgIG1vZC5fX3BhdGhfXyA9IFsgc2VsZi5fZmlsZXBhdGggXQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCdpbXBvcnRlZCBhcyByZWd1bGFyIG1vZHVsZScpCiAgICAgICAgCiAgICAgICAgcHJpbnQoJ2NyZWF0aW5nIGEgbmV3IG1vZHVsZSBvYmplY3QgZm9yICIlcyInICUgc2VsZi5fbmFtZSkKICAgICAgICBzeXMubW9kdWxlcy5zZXRkZWZhdWx0KHNlbGYuX25hbWUsIG1vZCkKICAgICAgICBKU09iamVjdChfX0JSWVRIT05fXy5pbXBvcnRlZClbc2VsZi5fbmFtZV09bW9kCgogICAgICAgIHJldHVybiBtb2QK',
'/Lib/fnmatch.py':'IiIiRmlsZW5hbWUgbWF0Y2hpbmcgd2l0aCBzaGVsbCBwYXR0ZXJucy4KCmZubWF0Y2goRklMRU5BTUUsIFBBVFRFUk4pIG1hdGNoZXMgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbCBjb252ZW50aW9uLgpmbm1hdGNoY2FzZShGSUxFTkFNRSwgUEFUVEVSTikgYWx3YXlzIHRha2VzIGNhc2UgaW4gYWNjb3VudC4KClRoZSBmdW5jdGlvbnMgb3BlcmF0ZSBieSB0cmFuc2xhdGluZyB0aGUgcGF0dGVybiBpbnRvIGEgcmVndWxhcgpleHByZXNzaW9uLiAgVGhleSBjYWNoZSB0aGUgY29tcGlsZWQgcmVndWxhciBleHByZXNzaW9ucyBmb3Igc3BlZWQuCgpUaGUgZnVuY3Rpb24gdHJhbnNsYXRlKFBBVFRFUk4pIHJldHVybnMgYSByZWd1bGFyIGV4cHJlc3Npb24KY29ycmVzcG9uZGluZyB0byBQQVRURVJOLiAgKEl0IGRvZXMgbm90IGNvbXBpbGUgaXQuKQoiIiIKaW1wb3J0IG9zCmltcG9ydCBwb3NpeHBhdGgKaW1wb3J0IHJlCmltcG9ydCBmdW5jdG9vbHMKCl9fYWxsX18gPSBbImZpbHRlciIsICJmbm1hdGNoIiwgImZubWF0Y2hjYXNlIiwgInRyYW5zbGF0ZSJdCgpkZWYgZm5tYXRjaChuYW1lLCBwYXQpOgogICAgIiIiVGVzdCB3aGV0aGVyIEZJTEVOQU1FIG1hdGNoZXMgUEFUVEVSTi4KCiAgICBQYXR0ZXJucyBhcmUgVW5peCBzaGVsbCBzdHlsZToKCiAgICAqICAgICAgIG1hdGNoZXMgZXZlcnl0aGluZwogICAgPyAgICAgICBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyCiAgICBbc2VxXSAgIG1hdGNoZXMgYW55IGNoYXJhY3RlciBpbiBzZXEKICAgIFshc2VxXSAgbWF0Y2hlcyBhbnkgY2hhciBub3QgaW4gc2VxCgogICAgQW4gaW5pdGlhbCBwZXJpb2QgaW4gRklMRU5BTUUgaXMgbm90IHNwZWNpYWwuCiAgICBCb3RoIEZJTEVOQU1FIGFuZCBQQVRURVJOIGFyZSBmaXJzdCBjYXNlLW5vcm1hbGl6ZWQKICAgIGlmIHRoZSBvcGVyYXRpbmcgc3lzdGVtIHJlcXVpcmVzIGl0LgogICAgSWYgeW91IGRvbid0IHdhbnQgdGhpcywgdXNlIGZubWF0Y2hjYXNlKEZJTEVOQU1FLCBQQVRURVJOKS4KICAgICIiIgogICAgbmFtZSA9IG9zLnBhdGgubm9ybWNhc2UobmFtZSkKICAgIHBhdCA9IG9zLnBhdGgubm9ybWNhc2UocGF0KQogICAgcmV0dXJuIGZubWF0Y2hjYXNlKG5hbWUsIHBhdCkKCkBmdW5jdG9vbHMubHJ1X2NhY2hlKG1heHNpemU9MjUwLCB0eXBlZD1UcnVlKQpkZWYgX2NvbXBpbGVfcGF0dGVybihwYXQpOgogICAgaWYgaXNpbnN0YW5jZShwYXQsIGJ5dGVzKToKICAgICAgICBwYXRfc3RyID0gc3RyKHBhdCwgJ0lTTy04ODU5LTEnKQogICAgICAgIHJlc19zdHIgPSB0cmFuc2xhdGUocGF0X3N0cikKICAgICAgICByZXMgPSBieXRlcyhyZXNfc3RyLCAnSVNPLTg4NTktMScpCiAgICBlbHNlOgogICAgICAgIHJlcyA9IHRyYW5zbGF0ZShwYXQpCiAgICByZXR1cm4gcmUuY29tcGlsZShyZXMpLm1hdGNoCgpkZWYgZmlsdGVyKG5hbWVzLCBwYXQpOgogICAgIiIiUmV0dXJuIHRoZSBzdWJzZXQgb2YgdGhlIGxpc3QgTkFNRVMgdGhhdCBtYXRjaCBQQVQuIiIiCiAgICByZXN1bHQgPSBbXQogICAgcGF0ID0gb3MucGF0aC5ub3JtY2FzZShwYXQpCiAgICBtYXRjaCA9IF9jb21waWxlX3BhdHRlcm4ocGF0KQogICAgaWYgb3MucGF0aCBpcyBwb3NpeHBhdGg6CiAgICAgICAgIyBub3JtY2FzZSBvbiBwb3NpeCBpcyBOT1AuIE9wdGltaXplIGl0IGF3YXkgZnJvbSB0aGUgbG9vcC4KICAgICAgICBmb3IgbmFtZSBpbiBuYW1lczoKICAgICAgICAgICAgaWYgbWF0Y2gobmFtZSk6CiAgICAgICAgICAgICAgICByZXN1bHQuYXBwZW5kKG5hbWUpCiAgICBlbHNlOgogICAgICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgICAgICBpZiBtYXRjaChvcy5wYXRoLm5vcm1jYXNlKG5hbWUpKToKICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobmFtZSkKICAgIHJldHVybiByZXN1bHQKCmRlZiBmbm1hdGNoY2FzZShuYW1lLCBwYXQpOgogICAgIiIiVGVzdCB3aGV0aGVyIEZJTEVOQU1FIG1hdGNoZXMgUEFUVEVSTiwgaW5jbHVkaW5nIGNhc2UuCgogICAgVGhpcyBpcyBhIHZlcnNpb24gb2YgZm5tYXRjaCgpIHdoaWNoIGRvZXNuJ3QgY2FzZS1ub3JtYWxpemUKICAgIGl0cyBhcmd1bWVudHMuCiAgICAiIiIKICAgIG1hdGNoID0gX2NvbXBpbGVfcGF0dGVybihwYXQpCiAgICByZXR1cm4gbWF0Y2gobmFtZSkgaXMgbm90IE5vbmUKCgpkZWYgdHJhbnNsYXRlKHBhdCk6CiAgICAiIiJUcmFuc2xhdGUgYSBzaGVsbCBQQVRURVJOIHRvIGEgcmVndWxhciBleHByZXNzaW9uLgoKICAgIFRoZXJlIGlzIG5vIHdheSB0byBxdW90ZSBtZXRhLWNoYXJhY3RlcnMuCiAgICAiIiIKCiAgICBpLCBuID0gMCwgbGVuKHBhdCkKICAgIHJlcyA9ICcnCiAgICB3aGlsZSBpIDwgbjoKICAgICAgICBjID0gcGF0W2ldCiAgICAgICAgaSA9IGkrMQogICAgICAgIGlmIGMgPT0gJyonOgogICAgICAgICAgICByZXMgPSByZXMgKyAnLionCiAgICAgICAgZWxpZiBjID09ICc/JzoKICAgICAgICAgICAgcmVzID0gcmVzICsgJy4nCiAgICAgICAgZWxpZiBjID09ICdbJzoKICAgICAgICAgICAgaiA9IGkKICAgICAgICAgICAgaWYgaiA8IG4gYW5kIHBhdFtqXSA9PSAnISc6CiAgICAgICAgICAgICAgICBqID0gaisxCiAgICAgICAgICAgIGlmIGogPCBuIGFuZCBwYXRbal0gPT0gJ10nOgogICAgICAgICAgICAgICAgaiA9IGorMQogICAgICAgICAgICB3aGlsZSBqIDwgbiBhbmQgcGF0W2pdICE9ICddJzoKICAgICAgICAgICAgICAgIGogPSBqKzEKICAgICAgICAgICAgaWYgaiA+PSBuOgogICAgICAgICAgICAgICAgcmVzID0gcmVzICsgJ1xcWycKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHN0dWZmID0gcGF0W2k6al0ucmVwbGFjZSgnXFwnLCdcXFxcJykKICAgICAgICAgICAgICAgIGkgPSBqKzEKICAgICAgICAgICAgICAgIGlmIHN0dWZmWzBdID09ICchJzoKICAgICAgICAgICAgICAgICAgICBzdHVmZiA9ICdeJyArIHN0dWZmWzE6XQogICAgICAgICAgICAgICAgZWxpZiBzdHVmZlswXSA9PSAnXic6CiAgICAgICAgICAgICAgICAgICAgc3R1ZmYgPSAnXFwnICsgc3R1ZmYKICAgICAgICAgICAgICAgIHJlcyA9ICclc1slc10nICUgKHJlcywgc3R1ZmYpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzID0gcmVzICsgcmUuZXNjYXBlKGMpCiAgICByZXR1cm4gcmVzICsgJ1xaKD9tcyknCg==',
'/Lib/functools.py':'',
'/Lib/gc.py':'IiIiVGhpcyBtb2R1bGUgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBnYXJiYWdlIGNvbGxlY3RvciBmb3IgcmVmZXJlbmNlIGN5Y2xlcy4KCmVuYWJsZSgpIC0tIEVuYWJsZSBhdXRvbWF0aWMgZ2FyYmFnZSBjb2xsZWN0aW9uLgpkaXNhYmxlKCkgLS0gRGlzYWJsZSBhdXRvbWF0aWMgZ2FyYmFnZSBjb2xsZWN0aW9uLgppc2VuYWJsZWQoKSAtLSBSZXR1cm5zIHRydWUgaWYgYXV0b21hdGljIGNvbGxlY3Rpb24gaXMgZW5hYmxlZC4KY29sbGVjdCgpIC0tIERvIGEgZnVsbCBjb2xsZWN0aW9uIHJpZ2h0IG5vdy4KZ2V0X2NvdW50KCkgLS0gUmV0dXJuIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gY291bnRzLgpzZXRfZGVidWcoKSAtLSBTZXQgZGVidWdnaW5nIGZsYWdzLgpnZXRfZGVidWcoKSAtLSBHZXQgZGVidWdnaW5nIGZsYWdzLgpzZXRfdGhyZXNob2xkKCkgLS0gU2V0IHRoZSBjb2xsZWN0aW9uIHRocmVzaG9sZHMuCmdldF90aHJlc2hvbGQoKSAtLSBSZXR1cm4gdGhlIGN1cnJlbnQgdGhlIGNvbGxlY3Rpb24gdGhyZXNob2xkcy4KZ2V0X29iamVjdHMoKSAtLSBSZXR1cm4gYSBsaXN0IG9mIGFsbCBvYmplY3RzIHRyYWNrZWQgYnkgdGhlIGNvbGxlY3Rvci4KaXNfdHJhY2tlZCgpIC0tIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIG9iamVjdCBpcyB0cmFja2VkLgpnZXRfcmVmZXJyZXJzKCkgLS0gUmV0dXJuIHRoZSBsaXN0IG9mIG9iamVjdHMgdGhhdCByZWZlciB0byBhbiBvYmplY3QuCmdldF9yZWZlcmVudHMoKSAtLSBSZXR1cm4gdGhlIGxpc3Qgb2Ygb2JqZWN0cyB0aGF0IGFuIG9iamVjdCByZWZlcnMgdG8uCiIiIgoKCkRFQlVHX0NPTExFQ1RBQkxFID0gMgoKREVCVUdfTEVBSyA9IDM4CgpERUJVR19TQVZFQUxMID0gMzIKCkRFQlVHX1NUQVRTID0gMQoKREVCVUdfVU5DT0xMRUNUQUJMRSA9IDQKCmNsYXNzIF9fbG9hZGVyX186CiAgICBwYXNzCgpjYWxsYmFja3MgPSBbXQoKZGVmIGNvbGxlY3QoKmFyZ3MsKiprdyk6CiAgICAiIiJjb2xsZWN0KFtnZW5lcmF0aW9uXSkgLT4gbiAgICAKICAgIFdpdGggbm8gYXJndW1lbnRzLCBydW4gYSBmdWxsIGNvbGxlY3Rpb24uICBUaGUgb3B0aW9uYWwgYXJndW1lbnQKICAgIG1heSBiZSBhbiBpbnRlZ2VyIHNwZWNpZnlpbmcgd2hpY2ggZ2VuZXJhdGlvbiB0byBjb2xsZWN0LiAgQSBWYWx1ZUVycm9yCiAgICBpcyByYWlzZWQgaWYgdGhlIGdlbmVyYXRpb24gbnVtYmVyIGlzIGludmFsaWQuCiAgICAKICAgIFRoZSBudW1iZXIgb2YgdW5yZWFjaGFibGUgb2JqZWN0cyBpcyByZXR1cm5lZC4KICAgICIiIgogICAgcGFzcwoKZGVmIGRpc2FibGUoKmFyZ3MsKiprdyk6CiAgICAiIiJkaXNhYmxlKCkgLT4gTm9uZSAgICAKICAgIERpc2FibGUgYXV0b21hdGljIGdhcmJhZ2UgY29sbGVjdGlvbi4KICAgICIiIgogICAgcGFzcwoKZGVmIGVuYWJsZSgqYXJncywqKmt3KToKICAgICIiImVuYWJsZSgpIC0+IE5vbmUgICAgCiAgICBFbmFibGUgYXV0b21hdGljIGdhcmJhZ2UgY29sbGVjdGlvbi4KICAgICIiIgogICAgcGFzcwoKZ2FyYmFnZSA9IFtdCgpkZWYgZ2V0X2NvdW50KCphcmdzLCoqa3cpOgogICAgIiIiZ2V0X2NvdW50KCkgLT4gKGNvdW50MCwgY291bnQxLCBjb3VudDIpICAgIAogICAgUmV0dXJuIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gY291bnRzCiAgICAiIiIKICAgIHBhc3MKCmRlZiBnZXRfZGVidWcoKmFyZ3MsKiprdyk6CiAgICAiIiJnZXRfZGVidWcoKSAtPiBmbGFncyAgICAKICAgIEdldCB0aGUgZ2FyYmFnZSBjb2xsZWN0aW9uIGRlYnVnZ2luZyBmbGFncy4KICAgICIiIgogICAgcGFzcwoKZGVmIGdldF9vYmplY3RzKCphcmdzLCoqa3cpOgogICAgIiIiZ2V0X29iamVjdHMoKSAtPiBbLi4uXSAgICAKICAgIFJldHVybiBhIGxpc3Qgb2Ygb2JqZWN0cyB0cmFja2VkIGJ5IHRoZSBjb2xsZWN0b3IgKGV4Y2x1ZGluZyB0aGUgbGlzdAogICAgcmV0dXJuZWQpLgogICAgIiIiCiAgICBwYXNzCgpkZWYgZ2V0X3JlZmVyZW50cygqYXJncywqKmt3KToKICAgICIiImdldF9yZWZlcmVudHMoKm9ianMpIC0+IGxpc3QgICAgUmV0dXJuIHRoZSBsaXN0IG9mIG9iamVjdHMgdGhhdCBhcmUgZGlyZWN0bHkgcmVmZXJyZWQgdG8gYnkgb2Jqcy4iIiIKICAgIHBhc3MKCmRlZiBnZXRfcmVmZXJyZXJzKCphcmdzLCoqa3cpOgogICAgIiIiZ2V0X3JlZmVycmVycygqb2JqcykgLT4gbGlzdCAgICBSZXR1cm4gdGhlIGxpc3Qgb2Ygb2JqZWN0cyB0aGF0IGRpcmVjdGx5IHJlZmVyIHRvIGFueSBvZiBvYmpzLiIiIgogICAgcGFzcwoKZGVmIGdldF90aHJlc2hvbGQoKmFyZ3MsKiprdyk6CiAgICAiIiJnZXRfdGhyZXNob2xkKCkgLT4gKHRocmVzaG9sZDAsIHRocmVzaG9sZDEsIHRocmVzaG9sZDIpICAgIAogICAgUmV0dXJuIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gdGhyZXNob2xkcwogICAgIiIiCiAgICBwYXNzCgpkZWYgaXNfdHJhY2tlZCgqYXJncywqKmt3KToKICAgICIiImlzX3RyYWNrZWQob2JqKSAtPiBib29sICAgIAogICAgUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgdHJhY2tlZCBieSB0aGUgZ2FyYmFnZSBjb2xsZWN0b3IuCiAgICBTaW1wbGUgYXRvbWljIG9iamVjdHMgd2lsbCByZXR1cm4gZmFsc2UuCiAgICAiIiIKICAgIHBhc3MKCmRlZiBpc2VuYWJsZWQoKmFyZ3MsKiprdyk6CiAgICAiIiJpc2VuYWJsZWQoKSAtPiBzdGF0dXMgICAgCiAgICBSZXR1cm5zIHRydWUgaWYgYXV0b21hdGljIGdhcmJhZ2UgY29sbGVjdGlvbiBpcyBlbmFibGVkLgogICAgIiIiCiAgICBwYXNzCgpkZWYgc2V0X2RlYnVnKCphcmdzLCoqa3cpOgogICAgIiIic2V0X2RlYnVnKGZsYWdzKSAtPiBOb25lICAgIAogICAgU2V0IHRoZSBnYXJiYWdlIGNvbGxlY3Rpb24gZGVidWdnaW5nIGZsYWdzLiBEZWJ1Z2dpbmcgaW5mb3JtYXRpb24gaXMKICAgIHdyaXR0ZW4gdG8gc3lzLnN0ZGVyci4KICAgIAogICAgZmxhZ3MgaXMgYW4gaW50ZWdlciBhbmQgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBiaXRzIHR1cm5lZCBvbjoKICAgIAogICAgICBERUJVR19TVEFUUyAtIFByaW50IHN0YXRpc3RpY3MgZHVyaW5nIGNvbGxlY3Rpb24uCiAgICAgIERFQlVHX0NPTExFQ1RBQkxFIC0gUHJpbnQgY29sbGVjdGFibGUgb2JqZWN0cyBmb3VuZC4KICAgICAgREVCVUdfVU5DT0xMRUNUQUJMRSAtIFByaW50IHVucmVhY2hhYmxlIGJ1dCB1bmNvbGxlY3RhYmxlIG9iamVjdHMgZm91bmQuCiAgICAgIERFQlVHX1NBVkVBTEwgLSBTYXZlIG9iamVjdHMgdG8gZ2MuZ2FyYmFnZSByYXRoZXIgdGhhbiBmcmVlaW5nIHRoZW0uCiAgICAgIERFQlVHX0xFQUsgLSBEZWJ1ZyBsZWFraW5nIHByb2dyYW1zIChldmVyeXRoaW5nIGJ1dCBTVEFUUykuCiAgICAiIiIKICAgIHBhc3MKCmRlZiBzZXRfdGhyZXNob2xkKCphcmdzLCoqa3cpOgogICAgIiIic2V0X3RocmVzaG9sZCh0aHJlc2hvbGQwLCBbdGhyZXNob2xkMSwgdGhyZXNob2xkMl0pIC0+IE5vbmUgICAgCiAgICBTZXRzIHRoZSBjb2xsZWN0aW9uIHRocmVzaG9sZHMuICBTZXR0aW5nIHRocmVzaG9sZDAgdG8gemVybyBkaXNhYmxlcwogICAgY29sbGVjdGlvbi4KICAgICIiIgogICAgcGFzcwo=',
'/Lib/genericpath.py':'IiIiClBhdGggb3BlcmF0aW9ucyBjb21tb24gdG8gbW9yZSB0aGFuIG9uZSBPUwpEbyBub3QgdXNlIGRpcmVjdGx5LiAgVGhlIE9TIHNwZWNpZmljIG1vZHVsZXMgaW1wb3J0IHRoZSBhcHByb3ByaWF0ZQpmdW5jdGlvbnMgZnJvbSB0aGlzIG1vZHVsZSB0aGVtc2VsdmVzLgoiIiIKaW1wb3J0IG9zCmltcG9ydCBzdGF0CgpfX2FsbF9fID0gWydjb21tb25wcmVmaXgnLCAnZXhpc3RzJywgJ2dldGF0aW1lJywgJ2dldGN0aW1lJywgJ2dldG10aW1lJywKICAgICAgICAgICAnZ2V0c2l6ZScsICdpc2RpcicsICdpc2ZpbGUnXQoKCiMgRG9lcyBhIHBhdGggZXhpc3Q/CiMgVGhpcyBpcyBmYWxzZSBmb3IgZGFuZ2xpbmcgc3ltYm9saWMgbGlua3Mgb24gc3lzdGVtcyB0aGF0IHN1cHBvcnQgdGhlbS4KZGVmIGV4aXN0cyhwYXRoKToKICAgICIiIlRlc3Qgd2hldGhlciBhIHBhdGggZXhpc3RzLiAgUmV0dXJucyBGYWxzZSBmb3IgYnJva2VuIHN5bWJvbGljIGxpbmtzIiIiCiAgICB0cnk6CiAgICAgICAgb3Muc3RhdChwYXRoKQogICAgZXhjZXB0IG9zLmVycm9yOgogICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIFRydWUKCgojIFRoaXMgZm9sbG93cyBzeW1ib2xpYyBsaW5rcywgc28gYm90aCBpc2xpbmsoKSBhbmQgaXNkaXIoKSBjYW4gYmUgdHJ1ZQojIGZvciB0aGUgc2FtZSBwYXRoIG9ubyBzeXN0ZW1zIHRoYXQgc3VwcG9ydCBzeW1saW5rcwpkZWYgaXNmaWxlKHBhdGgpOgogICAgIiIiVGVzdCB3aGV0aGVyIGEgcGF0aCBpcyBhIHJlZ3VsYXIgZmlsZSIiIgogICAgdHJ5OgogICAgICAgIHN0ID0gb3Muc3RhdChwYXRoKQogICAgZXhjZXB0IG9zLmVycm9yOgogICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIHN0YXQuU19JU1JFRyhzdC5zdF9tb2RlKQoKCiMgSXMgYSBwYXRoIGEgZGlyZWN0b3J5PwojIFRoaXMgZm9sbG93cyBzeW1ib2xpYyBsaW5rcywgc28gYm90aCBpc2xpbmsoKSBhbmQgaXNkaXIoKQojIGNhbiBiZSB0cnVlIGZvciB0aGUgc2FtZSBwYXRoIG9uIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHN5bWxpbmtzCmRlZiBpc2RpcihzKToKICAgICIiIlJldHVybiB0cnVlIGlmIHRoZSBwYXRobmFtZSByZWZlcnMgdG8gYW4gZXhpc3RpbmcgZGlyZWN0b3J5LiIiIgogICAgdHJ5OgogICAgICAgIHN0ID0gb3Muc3RhdChzKQogICAgZXhjZXB0IG9zLmVycm9yOgogICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIHN0YXQuU19JU0RJUihzdC5zdF9tb2RlKQoKCmRlZiBnZXRzaXplKGZpbGVuYW1lKToKICAgICIiIlJldHVybiB0aGUgc2l6ZSBvZiBhIGZpbGUsIHJlcG9ydGVkIGJ5IG9zLnN0YXQoKS4iIiIKICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9zaXplCgoKZGVmIGdldG10aW1lKGZpbGVuYW1lKToKICAgICIiIlJldHVybiB0aGUgbGFzdCBtb2RpZmljYXRpb24gdGltZSBvZiBhIGZpbGUsIHJlcG9ydGVkIGJ5IG9zLnN0YXQoKS4iIiIKICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9tdGltZQoKCmRlZiBnZXRhdGltZShmaWxlbmFtZSk6CiAgICAiIiJSZXR1cm4gdGhlIGxhc3QgYWNjZXNzIHRpbWUgb2YgYSBmaWxlLCByZXBvcnRlZCBieSBvcy5zdGF0KCkuIiIiCiAgICByZXR1cm4gb3Muc3RhdChmaWxlbmFtZSkuc3RfYXRpbWUKCgpkZWYgZ2V0Y3RpbWUoZmlsZW5hbWUpOgogICAgIiIiUmV0dXJuIHRoZSBtZXRhZGF0YSBjaGFuZ2UgdGltZSBvZiBhIGZpbGUsIHJlcG9ydGVkIGJ5IG9zLnN0YXQoKS4iIiIKICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9jdGltZQoKCiMgUmV0dXJuIHRoZSBsb25nZXN0IHByZWZpeCBvZiBhbGwgbGlzdCBlbGVtZW50cy4KZGVmIGNvbW1vbnByZWZpeChtKToKICAgICJHaXZlbiBhIGxpc3Qgb2YgcGF0aG5hbWVzLCByZXR1cm5zIHRoZSBsb25nZXN0IGNvbW1vbiBsZWFkaW5nIGNvbXBvbmVudCIKICAgIGlmIG5vdCBtOiByZXR1cm4gJycKICAgIHMxID0gbWluKG0pCiAgICBzMiA9IG1heChtKQogICAgZm9yIGksIGMgaW4gZW51bWVyYXRlKHMxKToKICAgICAgICBpZiBjICE9IHMyW2ldOgogICAgICAgICAgICByZXR1cm4gczFbOmldCiAgICByZXR1cm4gczEKCiMgU3BsaXQgYSBwYXRoIGluIHJvb3QgYW5kIGV4dGVuc2lvbi4KIyBUaGUgZXh0ZW5zaW9uIGlzIGV2ZXJ5dGhpbmcgc3RhcnRpbmcgYXQgdGhlIGxhc3QgZG90IGluIHRoZSBsYXN0CiMgcGF0aG5hbWUgY29tcG9uZW50OyB0aGUgcm9vdCBpcyBldmVyeXRoaW5nIGJlZm9yZSB0aGF0LgojIEl0IGlzIGFsd2F5cyB0cnVlIHRoYXQgcm9vdCArIGV4dCA9PSBwLgoKIyBHZW5lcmljIGltcGxlbWVudGF0aW9uIG9mIHNwbGl0ZXh0LCB0byBiZSBwYXJhbWV0cml6ZWQgd2l0aAojIHRoZSBzZXBhcmF0b3JzCmRlZiBfc3BsaXRleHQocCwgc2VwLCBhbHRzZXAsIGV4dHNlcCk6CiAgICAiIiJTcGxpdCB0aGUgZXh0ZW5zaW9uIGZyb20gYSBwYXRobmFtZS4KCiAgICBFeHRlbnNpb24gaXMgZXZlcnl0aGluZyBmcm9tIHRoZSBsYXN0IGRvdCB0byB0aGUgZW5kLCBpZ25vcmluZwogICAgbGVhZGluZyBkb3RzLiAgUmV0dXJucyAiKHJvb3QsIGV4dCkiOyBleHQgbWF5IGJlIGVtcHR5LiIiIgogICAgIyBOT1RFOiBUaGlzIGNvZGUgbXVzdCB3b3JrIGZvciB0ZXh0IGFuZCBieXRlcyBzdHJpbmdzLgoKICAgIHNlcEluZGV4ID0gcC5yZmluZChzZXApCiAgICBpZiBhbHRzZXA6CiAgICAgICAgYWx0c2VwSW5kZXggPSBwLnJmaW5kKGFsdHNlcCkKICAgICAgICBzZXBJbmRleCA9IG1heChzZXBJbmRleCwgYWx0c2VwSW5kZXgpCgogICAgZG90SW5kZXggPSBwLnJmaW5kKGV4dHNlcCkKICAgIGlmIGRvdEluZGV4ID4gc2VwSW5kZXg6CiAgICAgICAgIyBza2lwIGFsbCBsZWFkaW5nIGRvdHMKICAgICAgICBmaWxlbmFtZUluZGV4ID0gc2VwSW5kZXggKyAxCiAgICAgICAgd2hpbGUgZmlsZW5hbWVJbmRleCA8IGRvdEluZGV4OgogICAgICAgICAgICBpZiBwW2ZpbGVuYW1lSW5kZXg6ZmlsZW5hbWVJbmRleCsxXSAhPSBleHRzZXA6CiAgICAgICAgICAgICAgICByZXR1cm4gcFs6ZG90SW5kZXhdLCBwW2RvdEluZGV4Ol0KICAgICAgICAgICAgZmlsZW5hbWVJbmRleCArPSAxCgogICAgcmV0dXJuIHAsIHBbOjBdCg==',
'/Lib/getopt.py':'',
'/Lib/heapq.py':'',
'/Lib/imp.py':'',
'/Lib/io.py':'aW1wb3J0IGJ1aWx0aW5zCgpvcGVuID0gYnVpbHRpbnMub3BlbgoKY2xhc3MgU3RyaW5nSU86CgogICAgZGVmIF9faW5pdF9fKHNlbGYsaW5pdGlhbF92YWx1ZT0nJyxuZXdsaW5lPU5vbmUpOgogICAgICAgIHNlbGYudmFsdWUgPSBpbml0aWFsX3ZhbHVlCiAgICAgICAgc2VsZi5uZXdsaW5lID0gbmV3bGluZQogICAgICAgIHNlbGYuX3BvcyA9IGxlbihpbml0aWFsX3ZhbHVlKQogICAgCiAgICBkZWYgd3JpdGUoc2VsZixkYXRhKToKICAgICAgICBzZWxmLnZhbHVlICs9IGRhdGEKICAgIAogICAgZGVmIHJlYWQoc2VsZixuYj0tMSk6CiAgICAgICAgaWYgbmIhPS0xOgogICAgICAgICAgICByZXMgPSBzZWxmLnZhbHVlW3NlbGYuX3BvczpzZWxmLl9wb3MrbmJdCiAgICAgICAgICAgIHNlbGYuX3BvcyA9IG1pbihzZWxmLl9wb3MrbmIsbGVuKHNlbGYudmFsdWUpLTEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzID0gc2VsZi52YWx1ZVtzZWxmLl9wb3M6XQogICAgICAgICAgICBzZWxmLl9wb3MgPSBsZW4oc2VsZi52YWx1ZSktMQogICAgICAgIHJldHVybiByZXMKClRleHRJT1dyYXBwZXIgPSBTdHJpbmdJTwoKY2xhc3MgUmF3SU9CYXNlOgoKICAgIGRlZiByZWFkKHNlbGYsbj0tMSk6CiAgICAgICAgcGFzcwogICAgZGVmIHJlYWRhbGwoc2VsZik6CiAgICAgICAgcGFzcwogICAgZGVmIHJlYWRpbnRvKHNlbGYsYik6CiAgICAgICAgcGFzcwogICAgZGVmIHdyaXRlKHNlbGYsYik6CiAgICAgICAgcGFzcwoKQnVmZmVyZWRSZWFkZXIgPSBSYXdJT0Jhc2U=',
'/Lib/itertools.py':'',
'/Lib/keyword.py':'a3dsaXN0ID0gWwojLS1zdGFydCBrZXl3b3Jkcy0tCiAgICAgICAgJ0ZhbHNlJywKICAgICAgICAnTm9uZScsCiAgICAgICAgJ1RydWUnLAogICAgICAgICdhbmQnLAogICAgICAgICdhcycsCiAgICAgICAgJ2Fzc2VydCcsCiAgICAgICAgJ2JyZWFrJywKICAgICAgICAnY2xhc3MnLAogICAgICAgICdjb250aW51ZScsCiAgICAgICAgJ2RlZicsCiAgICAgICAgJ2RlbCcsCiAgICAgICAgJ2VsaWYnLAogICAgICAgICdlbHNlJywKICAgICAgICAnZXhjZXB0JywKICAgICAgICAnZmluYWxseScsCiAgICAgICAgJ2ZvcicsCiAgICAgICAgJ2Zyb20nLAogICAgICAgICdnbG9iYWwnLAogICAgICAgICdpZicsCiAgICAgICAgJ2ltcG9ydCcsCiAgICAgICAgJ2luJywKICAgICAgICAnaXMnLAogICAgICAgICdsYW1iZGEnLAogICAgICAgICdub25sb2NhbCcsCiAgICAgICAgJ25vdCcsCiAgICAgICAgJ29yJywKICAgICAgICAncGFzcycsCiAgICAgICAgJ3JhaXNlJywKICAgICAgICAncmV0dXJuJywKICAgICAgICAndHJ5JywKICAgICAgICAnd2hpbGUnLAogICAgICAgICd3aXRoJywKICAgICAgICAneWllbGQnLAojLS1lbmQga2V5d29yZHMtLQogICAgICAgIF0KCmRlZiBpc2tleXdvcmQod29yZCk6CiAgICByZXR1cm4gd29yZCBpbiBrd2xpc3QK',
'/Lib/linecache.py':'IiIiQ2FjaGUgbGluZXMgZnJvbSBmaWxlcy4KClRoaXMgaXMgaW50ZW5kZWQgdG8gcmVhZCBsaW5lcyBmcm9tIG1vZHVsZXMgaW1wb3J0ZWQgLS0gaGVuY2UgaWYgYSBmaWxlbmFtZQppcyBub3QgZm91bmQsIGl0IHdpbGwgbG9vayBkb3duIHRoZSBtb2R1bGUgc2VhcmNoIHBhdGggZm9yIGEgZmlsZSBieQp0aGF0IG5hbWUuCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKI2ZpeG1lIGJyeXRob24KI2ltcG9ydCB0b2tlbml6ZQoKX19hbGxfXyA9IFsiZ2V0bGluZSIsICJjbGVhcmNhY2hlIiwgImNoZWNrY2FjaGUiXQoKZGVmIGdldGxpbmUoZmlsZW5hbWUsIGxpbmVubywgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICBsaW5lcyA9IGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscykKICAgIGlmIDEgPD0gbGluZW5vIDw9IGxlbihsaW5lcyk6CiAgICAgICAgcmV0dXJuIGxpbmVzW2xpbmVuby0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgojIFRoZSBjYWNoZQoKY2FjaGUgPSB7fSAjIFRoZSBjYWNoZQoKCmRlZiBjbGVhcmNhY2hlKCk6CiAgICAiIiJDbGVhciB0aGUgY2FjaGUgZW50aXJlbHkuIiIiCgogICAgZ2xvYmFsIGNhY2hlCiAgICBjYWNoZSA9IHt9CgoKZGVmIGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgICIiIkdldCB0aGUgbGluZXMgZm9yIGEgZmlsZSBmcm9tIHRoZSBjYWNoZS4KICAgIFVwZGF0ZSB0aGUgY2FjaGUgaWYgaXQgZG9lc24ndCBjb250YWluIGFuIGVudHJ5IGZvciB0aGlzIGZpbGUgYWxyZWFkeS4iIiIKCiAgICBpZiBmaWxlbmFtZSBpbiBjYWNoZToKICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCiAgICBlbHNlOgogICAgICAgIHJldHVybiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHMpCgoKZGVmIGNoZWNrY2FjaGUoZmlsZW5hbWU9Tm9uZSk6CiAgICAiIiJEaXNjYXJkIGNhY2hlIGVudHJpZXMgdGhhdCBhcmUgb3V0IG9mIGRhdGUuCiAgICAoVGhpcyBpcyBub3QgY2hlY2tlZCB1cG9uIGVhY2ggY2FsbCEpIiIiCgogICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICBmaWxlbmFtZXMgPSBsaXN0KGNhY2hlLmtleXMoKSkKICAgIGVsc2U6CiAgICAgICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgICAgIGZpbGVuYW1lcyA9IFtmaWxlbmFtZV0KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KCiAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgIHNpemUsIG10aW1lLCBsaW5lcywgZnVsbG5hbWUgPSBjYWNoZVtmaWxlbmFtZV0KICAgICAgICBpZiBtdGltZSBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZSAgICMgbm8tb3AgZm9yIGZpbGVzIGxvYWRlZCB2aWEgYSBfX2xvYWRlcl9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWwgY2FjaGVbZmlsZW5hbWVdCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2l6ZSAhPSBzdGF0LnN0X3NpemUgb3IgbXRpbWUgIT0gc3RhdC5zdF9tdGltZToKICAgICAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQoKCmRlZiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICAiIiJVcGRhdGUgYSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuIGl0cyBsaXN0IG9mIGxpbmVzLgogICAgSWYgc29tZXRoaW5nJ3Mgd3JvbmcsIHByaW50IGEgbWVzc2FnZSwgZGlzY2FyZCB0aGUgY2FjaGUgZW50cnksCiAgICBhbmQgcmV0dXJuIGFuIGVtcHR5IGxpc3QuIiIiCgogICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQogICAgaWYgbm90IGZpbGVuYW1lIG9yIChmaWxlbmFtZS5zdGFydHN3aXRoKCc8JykgYW5kIGZpbGVuYW1lLmVuZHN3aXRoKCc+JykpOgogICAgICAgIHJldHVybiBbXQoKICAgIGZ1bGxuYW1lID0gZmlsZW5hbWUKICAgIHRyeToKICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgIGJhc2VuYW1lID0gZmlsZW5hbWUKCiAgICAgICAgIyBUcnkgZm9yIGEgX19sb2FkZXJfXywgaWYgYXZhaWxhYmxlCiAgICAgICAgaWYgbW9kdWxlX2dsb2JhbHMgYW5kICdfX2xvYWRlcl9fJyBpbiBtb2R1bGVfZ2xvYmFsczoKICAgICAgICAgICAgbmFtZSA9IG1vZHVsZV9nbG9iYWxzLmdldCgnX19uYW1lX18nKQogICAgICAgICAgICBsb2FkZXIgPSBtb2R1bGVfZ2xvYmFsc1snX19sb2FkZXJfXyddCiAgICAgICAgICAgIGdldF9zb3VyY2UgPSBnZXRhdHRyKGxvYWRlciwgJ2dldF9zb3VyY2UnLCBOb25lKQoKICAgICAgICAgICAgaWYgbmFtZSBhbmQgZ2V0X3NvdXJjZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZ2V0X3NvdXJjZShuYW1lKQogICAgICAgICAgICAgICAgZXhjZXB0IChJbXBvcnRFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gbHVjaywgdGhlIFBFUDMwMiBsb2FkZXIgY2Fubm90IGZpbmQgdGhlIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAjIGZvciB0aGlzIG1vZHVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbZmlsZW5hbWVdID0gKAogICAgICAgICAgICAgICAgICAgICAgICBsZW4oZGF0YSksIE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIFtsaW5lKydcbicgZm9yIGxpbmUgaW4gZGF0YS5zcGxpdGxpbmVzKCldLCBmdWxsbmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCgogICAgICAgICMgVHJ5IGxvb2tpbmcgdGhyb3VnaCB0aGUgbW9kdWxlIHNlYXJjaCBwYXRoLCB3aGljaCBpcyBvbmx5IHVzZWZ1bAogICAgICAgICMgd2hlbiBoYW5kbGluZyBhIHJlbGF0aXZlIGZpbGVuYW1lLgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgIyBUYWtlIGNhcmUgdG8gaGFuZGxlIHBhY2thZ2VzLgogICAgICAgIGlmIGJhc2VuYW1lID09ICdfX2luaXRfXy5weSc6CiAgICAgICAgICAgICMgZmlsZW5hbWUgcmVmZXJlcyB0byBhIHBhY2thZ2UKICAgICAgICAgICAgYmFzZW5hbWUgPSBmaWxlbmFtZQoKICAgICAgICBmb3IgZGlybmFtZSBpbiBzeXMucGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgYmFzZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBBdHRyaWJ1dGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIE5vdCBzdWZmaWNpZW50bHkgc3RyaW5nLWxpa2UgdG8gZG8gYW55dGhpbmcgdXNlZnVsIHdpdGguCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICNmaXhtZSBicnl0aG9uLCBpbnZhbGlkIHN5bnRheCAKICAgICAgICAgICAgI2V4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICNmaXhtZSBicnl0aG9uIHVuZXhwZWN0ZWQgdG9rZW4gZWxzZQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgcmV0dXJuIFtdCiAgICB0cnk6CiAgICAgICAgZnA9b3BlbihmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICN3aXRoIHRva2VuaXplLm9wZW4oZnVsbG5hbWUpIGFzIGZwOgogICAgICAgIGxpbmVzID0gZnAucmVhZGxpbmVzKCkKICAgICAgICBmcC5jbG9zZSgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gW10KICAgIGlmIGxpbmVzIGFuZCBub3QgbGluZXNbLTFdLmVuZHN3aXRoKCdcbicpOgogICAgICAgIGxpbmVzWy0xXSArPSAnXG4nCiAgICBzaXplLCBtdGltZSA9IHN0YXQuc3Rfc2l6ZSwgc3RhdC5zdF9tdGltZQogICAgY2FjaGVbZmlsZW5hbWVdID0gc2l6ZSwgbXRpbWUsIGxpbmVzLCBmdWxsbmFtZQogICAgcmV0dXJuIGxpbmVzCg==',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/module1.js':'',
'/Lib/module1.py':'',
'/Lib/operator.py':'',
'/Lib/optparse.py':'',
'/Lib/os.py':'',
'/Lib/platform.py':'',
'/Lib/posix.py':'IiIiVGhpcyBtb2R1bGUgcHJvdmlkZXMgYWNjZXNzIHRvIG9wZXJhdGluZyBzeXN0ZW0gZnVuY3Rpb25hbGl0eSB0aGF0IGlzCnN0YW5kYXJkaXplZCBieSB0aGUgQyBTdGFuZGFyZCBhbmQgdGhlIFBPU0lYIHN0YW5kYXJkIChhIHRoaW5seQpkaXNndWlzZWQgVW5peCBpbnRlcmZhY2UpLiAgUmVmZXIgdG8gdGhlIGxpYnJhcnkgbWFudWFsIGFuZApjb3JyZXNwb25kaW5nIFVuaXggbWFudWFsIGVudHJpZXMgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gY2FsbHMuIiIiCgoKRl9PSyA9IDAKCk9fQVBQRU5EID0gOAoKT19CSU5BUlkgPSAzMjc2OAoKT19DUkVBVCA9IDI1NgoKT19FWENMID0gMTAyNAoKT19OT0lOSEVSSVQgPSAxMjgKCk9fUkFORE9NID0gMTYKCk9fUkRPTkxZID0gMAoKT19SRFdSID0gMgoKT19TRVFVRU5USUFMID0gMzIKCk9fU0hPUlRfTElWRUQgPSA0MDk2CgpPX1RFTVBPUkFSWSA9IDY0CgpPX1RFWFQgPSAxNjM4NAoKT19UUlVOQyA9IDUxMgoKT19XUk9OTFkgPSAxCgpQX0RFVEFDSCA9IDQKClBfTk9XQUlUID0gMQoKUF9OT1dBSVRPID0gMwoKUF9PVkVSTEFZID0gMgoKUF9XQUlUID0gMAoKUl9PSyA9IDQKClRNUF9NQVggPSAzMjc2NwoKV19PSyA9IDIKClhfT0sgPSAxCgpjbGFzcyBfX2xvYWRlcl9fOgogICAgcGFzcwoKZGVmIF9leGl0KCphcmdzLCoqa3cpOgogICAgIiIiX2V4aXQoc3RhdHVzKSAgICAKICAgIEV4aXQgdG8gdGhlIHN5c3RlbSB3aXRoIHNwZWNpZmllZCBzdGF0dXMsIHdpdGhvdXQgbm9ybWFsIGV4aXQgcHJvY2Vzc2luZy4iIiIKICAgIHBhc3MKCmRlZiBfZ2V0ZGlza3VzYWdlKCphcmdzLCoqa3cpOgogICAgIiIiX2dldGRpc2t1c2FnZShwYXRoKSAtPiAodG90YWwsIGZyZWUpICAgIAogICAgUmV0dXJuIGRpc2sgdXNhZ2Ugc3RhdGlzdGljcyBhYm91dCB0aGUgZ2l2ZW4gcGF0aCBhcyAodG90YWwsIGZyZWUpIHR1cGxlLiIiIgogICAgcGFzcwoKZGVmIF9nZXRmaWxlaW5mb3JtYXRpb24oKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgX2dldGZpbmFscGF0aG5hbWUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgX2dldGZ1bGxwYXRobmFtZSgqYXJncywqKmt3KToKICAgIHBhc3MKCl9oYXZlX2Z1bmN0aW9ucyA9IFsnTVNfV0lORE9XUyddCgpkZWYgX2lzZGlyKCphcmdzLCoqa3cpOgogICAgIiIiUmV0dXJuIHRydWUgaWYgdGhlIHBhdGhuYW1lIHJlZmVycyB0byBhbiBleGlzdGluZyBkaXJlY3RvcnkuIiIiCiAgICBwYXNzCgpkZWYgYWJvcnQoKmFyZ3MsKiprdyk6CiAgICAiIiJhYm9ydCgpIC0+IGRvZXMgbm90IHJldHVybiEgICAgCiAgICBBYm9ydCB0aGUgaW50ZXJwcmV0ZXIgaW1tZWRpYXRlbHkuICBUaGlzICdkdW1wcyBjb3JlJyBvciBvdGhlcndpc2UgZmFpbHMKICAgIGluIHRoZSBoYXJkZXN0IHdheSBwb3NzaWJsZSBvbiB0aGUgaG9zdGluZyBvcGVyYXRpbmcgc3lzdGVtLiIiIgogICAgcGFzcwoKZGVmIGFjY2VzcygqYXJncywqKmt3KToKICAgICIiImFjY2VzcyhwYXRoLCBtb2RlLCAqLCBkaXJfZmQ9Tm9uZSwgZWZmZWN0aXZlX2lkcz1GYWxzZSwgZm9sbG93X3N5bWxpbmtzPVRydWUpICAgIAogICAgVXNlIHRoZSByZWFsIHVpZC9naWQgdG8gdGVzdCBmb3IgYWNjZXNzIHRvIGEgcGF0aC4gIFJldHVybnMgVHJ1ZSBpZiBncmFudGVkLAogICAgRmFsc2Ugb3RoZXJ3aXNlLgogICAgCiAgICBJZiBkaXJfZmQgaXMgbm90IE5vbmUsIGl0IHNob3VsZCBiZSBhIGZpbGUgZGVzY3JpcHRvciBvcGVuIHRvIGEgZGlyZWN0b3J5LAogICAgICBhbmQgcGF0aCBzaG91bGQgYmUgcmVsYXRpdmU7IHBhdGggd2lsbCB0aGVuIGJlIHJlbGF0aXZlIHRvIHRoYXQgZGlyZWN0b3J5LgogICAgSWYgZWZmZWN0aXZlX2lkcyBpcyBUcnVlLCBhY2Nlc3Mgd2lsbCB1c2UgdGhlIGVmZmVjdGl2ZSB1aWQvZ2lkIGluc3RlYWQgb2YKICAgICAgdGhlIHJlYWwgdWlkL2dpZC4KICAgIElmIGZvbGxvd19zeW1saW5rcyBpcyBGYWxzZSwgYW5kIHRoZSBsYXN0IGVsZW1lbnQgb2YgdGhlIHBhdGggaXMgYSBzeW1ib2xpYwogICAgICBsaW5rLCBhY2Nlc3Mgd2lsbCBleGFtaW5lIHRoZSBzeW1ib2xpYyBsaW5rIGl0c2VsZiBpbnN0ZWFkIG9mIHRoZSBmaWxlIHRoZQogICAgICBsaW5rIHBvaW50cyB0by4KICAgIGRpcl9mZCwgZWZmZWN0aXZlX2lkcywgYW5kIGZvbGxvd19zeW1saW5rcyBtYXkgbm90IGJlIGltcGxlbWVudGVkCiAgICAgIG9uIHlvdXIgcGxhdGZvcm0uICBJZiB0aGV5IGFyZSB1bmF2YWlsYWJsZSwgdXNpbmcgdGhlbSB3aWxsIHJhaXNlIGEKICAgICAgTm90SW1wbGVtZW50ZWRFcnJvci4KICAgIAogICAgTm90ZSB0aGF0IG1vc3Qgb3BlcmF0aW9ucyB3aWxsIHVzZSB0aGUgZWZmZWN0aXZlIHVpZC9naWQsIHRoZXJlZm9yZSB0aGlzCiAgICAgIHJvdXRpbmUgY2FuIGJlIHVzZWQgaW4gYSBzdWlkL3NnaWQgZW52aXJvbm1lbnQgdG8gdGVzdCBpZiB0aGUgaW52b2tpbmcgdXNlcgogICAgICBoYXMgdGhlIHNwZWNpZmllZCBhY2Nlc3MgdG8gdGhlIHBhdGguCiAgICBUaGUgbW9kZSBhcmd1bWVudCBjYW4gYmUgRl9PSyB0byB0ZXN0IGV4aXN0ZW5jZSwgb3IgdGhlIGluY2x1c2l2ZS1PUgogICAgICBvZiBSX09LLCBXX09LLCBhbmQgWF9PSy4iIiIKICAgIHBhc3MKCmRlZiBjaGRpcigqYXJncywqKmt3KToKICAgICIiImNoZGlyKHBhdGgpICAgIAogICAgQ2hhbmdlIHRoZSBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5IHRvIHRoZSBzcGVjaWZpZWQgcGF0aC4KICAgIAogICAgcGF0aCBtYXkgYWx3YXlzIGJlIHNwZWNpZmllZCBhcyBhIHN0cmluZy4KICAgIE9uIHNvbWUgcGxhdGZvcm1zLCBwYXRoIG1heSBhbHNvIGJlIHNwZWNpZmllZCBhcyBhbiBvcGVuIGZpbGUgZGVzY3JpcHRvci4KICAgICAgSWYgdGhpcyBmdW5jdGlvbmFsaXR5IGlzIHVuYXZhaWxhYmxlLCB1c2luZyBpdCByYWlzZXMgYW4gZXhjZXB0aW9uLiIiIgogICAgcGFzcwoKZGVmIGNobW9kKCphcmdzLCoqa3cpOgogICAgIiIiY2htb2QocGF0aCwgbW9kZSwgKiwgZGlyX2ZkPU5vbmUsIGZvbGxvd19zeW1saW5rcz1UcnVlKSAgICAKICAgIENoYW5nZSB0aGUgYWNjZXNzIHBlcm1pc3Npb25zIG9mIGEgZmlsZS4KICAgIAogICAgcGF0aCBtYXkgYWx3YXlzIGJlIHNwZWNpZmllZCBhcyBhIHN0cmluZy4KICAgIE9uIHNvbWUgcGxhdGZvcm1zLCBwYXRoIG1heSBhbHNvIGJlIHNwZWNpZmllZCBhcyBhbiBvcGVuIGZpbGUgZGVzY3JpcHRvci4KICAgICAgSWYgdGhpcyBmdW5jdGlvbmFsaXR5IGlzIHVuYXZhaWxhYmxlLCB1c2luZyBpdCByYWlzZXMgYW4gZXhjZXB0aW9uLgogICAgSWYgZGlyX2ZkIGlzIG5vdCBOb25lLCBpdCBzaG91bGQgYmUgYSBmaWxlIGRlc2NyaXB0b3Igb3BlbiB0byBhIGRpcmVjdG9yeSwKICAgICAgYW5kIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlOyBwYXRoIHdpbGwgdGhlbiBiZSByZWxhdGl2ZSB0byB0aGF0IGRpcmVjdG9yeS4KICAgIElmIGZvbGxvd19zeW1saW5rcyBpcyBGYWxzZSwgYW5kIHRoZSBsYXN0IGVsZW1lbnQgb2YgdGhlIHBhdGggaXMgYSBzeW1ib2xpYwogICAgICBsaW5rLCBjaG1vZCB3aWxsIG1vZGlmeSB0aGUgc3ltYm9saWMgbGluayBpdHNlbGYgaW5zdGVhZCBvZiB0aGUgZmlsZSB0aGUKICAgICAgbGluayBwb2ludHMgdG8uCiAgICBJdCBpcyBhbiBlcnJvciB0byB1c2UgZGlyX2ZkIG9yIGZvbGxvd19zeW1saW5rcyB3aGVuIHNwZWNpZnlpbmcgcGF0aCBhcwogICAgICBhbiBvcGVuIGZpbGUgZGVzY3JpcHRvci4KICAgIGRpcl9mZCBhbmQgZm9sbG93X3N5bWxpbmtzIG1heSBub3QgYmUgaW1wbGVtZW50ZWQgb24geW91ciBwbGF0Zm9ybS4KICAgICAgSWYgdGhleSBhcmUgdW5hdmFpbGFibGUsIHVzaW5nIHRoZW0gd2lsbCByYWlzZSBhIE5vdEltcGxlbWVudGVkRXJyb3IuIiIiCiAgICBwYXNzCgpkZWYgY2xvc2UoKmFyZ3MsKiprdyk6CiAgICAiIiJjbG9zZShmZCkgICAgCiAgICBDbG9zZSBhIGZpbGUgZGVzY3JpcHRvciAoZm9yIGxvdyBsZXZlbCBJTykuIiIiCiAgICBwYXNzCgpkZWYgY2xvc2VyYW5nZSgqYXJncywqKmt3KToKICAgICIiImNsb3NlcmFuZ2UoZmRfbG93LCBmZF9oaWdoKSAgICAKICAgIENsb3NlcyBhbGwgZmlsZSBkZXNjcmlwdG9ycyBpbiBbZmRfbG93LCBmZF9oaWdoKSwgaWdub3JpbmcgZXJyb3JzLiIiIgogICAgcGFzcwoKZGVmIGRldmljZV9lbmNvZGluZygqYXJncywqKmt3KToKICAgICIiImRldmljZV9lbmNvZGluZyhmZCkgLT4gc3RyICAgIAogICAgUmV0dXJuIGEgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIGVuY29kaW5nIG9mIHRoZSBkZXZpY2UKICAgIGlmIHRoZSBvdXRwdXQgaXMgYSB0ZXJtaW5hbDsgZWxzZSByZXR1cm4gTm9uZS4iIiIKICAgIHBhc3MKCmRlZiBkdXAoKmFyZ3MsKiprdyk6CiAgICAiIiJkdXAoZmQpIC0+IGZkMiAgICAKICAgIFJldHVybiBhIGR1cGxpY2F0ZSBvZiBhIGZpbGUgZGVzY3JpcHRvci4iIiIKICAgIHBhc3MKCmRlZiBkdXAyKCphcmdzLCoqa3cpOgogICAgIiIiZHVwMihvbGRfZmQsIG5ld19mZCkgICAgCiAgICBEdXBsaWNhdGUgZmlsZSBkZXNjcmlwdG9yLiIiIgogICAgcGFzcwoKZW52aXJvbiA9IHt9CgplcnJvciA9IE9TRXJyb3IKCmRlZiBleGVjdigqYXJncywqKmt3KToKICAgICIiImV4ZWN2KHBhdGgsIGFyZ3MpICAgIAogICAgRXhlY3V0ZSBhbiBleGVjdXRhYmxlIHBhdGggd2l0aCBhcmd1bWVudHMsIHJlcGxhY2luZyBjdXJyZW50IHByb2Nlc3MuCiAgICAKICAgICAgICBwYXRoOiBwYXRoIG9mIGV4ZWN1dGFibGUgZmlsZQogICAgICAgIGFyZ3M6IHR1cGxlIG9yIGxpc3Qgb2Ygc3RyaW5ncyIiIgogICAgcGFzcwoKZGVmIGV4ZWN2ZSgqYXJncywqKmt3KToKICAgICIiImV4ZWN2ZShwYXRoLCBhcmdzLCBlbnYpICAgIAogICAgRXhlY3V0ZSBhIHBhdGggd2l0aCBhcmd1bWVudHMgYW5kIGVudmlyb25tZW50LCByZXBsYWNpbmcgY3VycmVudCBwcm9jZXNzLgogICAgCiAgICAgICAgcGF0aDogcGF0aCBvZiBleGVjdXRhYmxlIGZpbGUKICAgICAgICBhcmdzOiB0dXBsZSBvciBsaXN0IG9mIGFyZ3VtZW50cwogICAgICAgIGVudjogZGljdGlvbmFyeSBvZiBzdHJpbmdzIG1hcHBpbmcgdG8gc3RyaW5ncwogICAgCiAgICBPbiBzb21lIHBsYXRmb3JtcywgeW91IG1heSBzcGVjaWZ5IGFuIG9wZW4gZmlsZSBkZXNjcmlwdG9yIGZvciBwYXRoOwogICAgICBleGVjdmUgd2lsbCBleGVjdXRlIHRoZSBwcm9ncmFtIHRoZSBmaWxlIGRlc2NyaXB0b3IgaXMgb3BlbiB0by4KICAgICAgSWYgdGhpcyBmdW5jdGlvbmFsaXR5IGlzIHVuYXZhaWxhYmxlLCB1c2luZyBpdCByYWlzZXMgTm90SW1wbGVtZW50ZWRFcnJvci4iIiIKICAgIHBhc3MKCmRlZiBmc3RhdCgqYXJncywqKmt3KToKICAgICIiImZzdGF0KGZkKSAtPiBzdGF0IHJlc3VsdCAgICAKICAgIExpa2Ugc3RhdCgpLCBidXQgZm9yIGFuIG9wZW4gZmlsZSBkZXNjcmlwdG9yLgogICAgRXF1aXZhbGVudCB0byBzdGF0KGZkPWZkKS4iIiIKICAgIHBhc3MKCmRlZiBmc3luYygqYXJncywqKmt3KToKICAgICIiImZzeW5jKGZpbGRlcykgICAgCiAgICBmb3JjZSB3cml0ZSBvZiBmaWxlIHdpdGggZmlsZWRlc2NyaXB0b3IgdG8gZGlzay4iIiIKICAgIHBhc3MKCmRlZiBnZXRfdGVybWluYWxfc2l6ZSgqYXJncywqKmt3KToKICAgICIiIlJldHVybiB0aGUgc2l6ZSBvZiB0aGUgdGVybWluYWwgd2luZG93IGFzIChjb2x1bW5zLCBsaW5lcykuICAgIAogICAgVGhlIG9wdGlvbmFsIGFyZ3VtZW50IGZkIChkZWZhdWx0IHN0YW5kYXJkIG91dHB1dCkgc3BlY2lmaWVzCiAgICB3aGljaCBmaWxlIGRlc2NyaXB0b3Igc2hvdWxkIGJlIHF1ZXJpZWQuCiAgICAKICAgIElmIHRoZSBmaWxlIGRlc2NyaXB0b3IgaXMgbm90IGNvbm5lY3RlZCB0byBhIHRlcm1pbmFsLCBhbiBPU0Vycm9yCiAgICBpcyB0aHJvd24uCiAgICAKICAgIFRoaXMgZnVuY3Rpb24gd2lsbCBvbmx5IGJlIGRlZmluZWQgaWYgYW4gaW1wbGVtZW50YXRpb24gaXMKICAgIGF2YWlsYWJsZSBmb3IgdGhpcyBzeXN0ZW0uCiAgICAKICAgIHNodXRpbC5nZXRfdGVybWluYWxfc2l6ZSBpcyB0aGUgaGlnaC1sZXZlbCBmdW5jdGlvbiB3aGljaCBzaG91bGQgCiAgICBub3JtYWxseSBiZSB1c2VkLCBvcy5nZXRfdGVybWluYWxfc2l6ZSBpcyB0aGUgbG93LWxldmVsIGltcGxlbWVudGF0aW9uLiIiIgogICAgcGFzcwoKZGVmIGdldGN3ZCgqYXJncywqKmt3KToKICAgICIiImdldGN3ZCgpIC0+IHBhdGggICAgCiAgICBSZXR1cm4gYSB1bmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnkuIiIiCiAgICBwYXNzCgpkZWYgZ2V0Y3dkYigqYXJncywqKmt3KToKICAgICIiImdldGN3ZGIoKSAtPiBwYXRoICAgIAogICAgUmV0dXJuIGEgYnl0ZXMgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS4iIiIKICAgIHBhc3MKCmRlZiBnZXRsb2dpbigqYXJncywqKmt3KToKICAgICIiImdldGxvZ2luKCkgLT4gc3RyaW5nICAgIAogICAgUmV0dXJuIHRoZSBhY3R1YWwgbG9naW4gbmFtZS4iIiIKICAgIHBhc3MKCmRlZiBnZXRwaWQoKmFyZ3MsKiprdyk6CiAgICAiIiJnZXRwaWQoKSAtPiBwaWQgICAgCiAgICBSZXR1cm4gdGhlIGN1cnJlbnQgcHJvY2VzcyBpZCIiIgogICAgcGFzcwoKZGVmIGdldHBwaWQoKmFyZ3MsKiprdyk6CiAgICAiIiJnZXRwcGlkKCkgLT4gcHBpZCAgICAKICAgIFJldHVybiB0aGUgcGFyZW50J3MgcHJvY2VzcyBpZC4gIElmIHRoZSBwYXJlbnQgcHJvY2VzcyBoYXMgYWxyZWFkeSBleGl0ZWQsCiAgICBXaW5kb3dzIG1hY2hpbmVzIHdpbGwgc3RpbGwgcmV0dXJuIGl0cyBpZDsgb3RoZXJzIHN5c3RlbXMgd2lsbCByZXR1cm4gdGhlIGlkCiAgICBvZiB0aGUgJ2luaXQnIHByb2Nlc3MgKDEpLiIiIgogICAgcGFzcwoKZGVmIGlzYXR0eSgqYXJncywqKmt3KToKICAgICIiImlzYXR0eShmZCkgLT4gYm9vbCAgICAKICAgIFJldHVybiBUcnVlIGlmIHRoZSBmaWxlIGRlc2NyaXB0b3IgJ2ZkJyBpcyBhbiBvcGVuIGZpbGUgZGVzY3JpcHRvcgogICAgY29ubmVjdGVkIHRvIHRoZSBzbGF2ZSBlbmQgb2YgYSB0ZXJtaW5hbC4iIiIKICAgIHBhc3MKCmRlZiBraWxsKCphcmdzLCoqa3cpOgogICAgIiIia2lsbChwaWQsIHNpZykgICAgCiAgICBLaWxsIGEgcHJvY2VzcyB3aXRoIGEgc2lnbmFsLiIiIgogICAgcGFzcwoKZGVmIGxpbmsoKmFyZ3MsKiprdyk6CiAgICAiIiJsaW5rKHNyYywgZHN0LCAqLCBzcmNfZGlyX2ZkPU5vbmUsIGRzdF9kaXJfZmQ9Tm9uZSwgZm9sbG93X3N5bWxpbmtzPVRydWUpICAgIAogICAgQ3JlYXRlIGEgaGFyZCBsaW5rIHRvIGEgZmlsZS4KICAgIAogICAgSWYgZWl0aGVyIHNyY19kaXJfZmQgb3IgZHN0X2Rpcl9mZCBpcyBub3QgTm9uZSwgaXQgc2hvdWxkIGJlIGEgZmlsZQogICAgICBkZXNjcmlwdG9yIG9wZW4gdG8gYSBkaXJlY3RvcnksIGFuZCB0aGUgcmVzcGVjdGl2ZSBwYXRoIHN0cmluZyAoc3JjIG9yIGRzdCkKICAgICAgc2hvdWxkIGJlIHJlbGF0aXZlOyB0aGUgcGF0aCB3aWxsIHRoZW4gYmUgcmVsYXRpdmUgdG8gdGhhdCBkaXJlY3RvcnkuCiAgICBJZiBmb2xsb3dfc3ltbGlua3MgaXMgRmFsc2UsIGFuZCB0aGUgbGFzdCBlbGVtZW50IG9mIHNyYyBpcyBhIHN5bWJvbGljCiAgICAgIGxpbmssIGxpbmsgd2lsbCBjcmVhdGUgYSBsaW5rIHRvIHRoZSBzeW1ib2xpYyBsaW5rIGl0c2VsZiBpbnN0ZWFkIG9mIHRoZQogICAgICBmaWxlIHRoZSBsaW5rIHBvaW50cyB0by4KICAgIHNyY19kaXJfZmQsIGRzdF9kaXJfZmQsIGFuZCBmb2xsb3dfc3ltbGlua3MgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBvbiB5b3VyCiAgICAgIHBsYXRmb3JtLiAgSWYgdGhleSBhcmUgdW5hdmFpbGFibGUsIHVzaW5nIHRoZW0gd2lsbCByYWlzZSBhCiAgICAgIE5vdEltcGxlbWVudGVkRXJyb3IuIiIiCiAgICBwYXNzCgpkZWYgbGlzdGRpcigqYXJncywqKmt3KToKICAgICIiImxpc3RkaXIocGF0aD0nLicpIC0+IGxpc3Rfb2ZfZmlsZW5hbWVzICAgIAogICAgUmV0dXJuIGEgbGlzdCBjb250YWluaW5nIHRoZSBuYW1lcyBvZiB0aGUgZmlsZXMgaW4gdGhlIGRpcmVjdG9yeS4KICAgIFRoZSBsaXN0IGlzIGluIGFyYml0cmFyeSBvcmRlci4gIEl0IGRvZXMgbm90IGluY2x1ZGUgdGhlIHNwZWNpYWwKICAgIGVudHJpZXMgJy4nIGFuZCAnLi4nIGV2ZW4gaWYgdGhleSBhcmUgcHJlc2VudCBpbiB0aGUgZGlyZWN0b3J5LgogICAgCiAgICBwYXRoIGNhbiBiZSBzcGVjaWZpZWQgYXMgZWl0aGVyIHN0ciBvciBieXRlcy4gIElmIHBhdGggaXMgYnl0ZXMsCiAgICAgIHRoZSBmaWxlbmFtZXMgcmV0dXJuZWQgd2lsbCBhbHNvIGJlIGJ5dGVzOyBpbiBhbGwgb3RoZXIgY2lyY3Vtc3RhbmNlcwogICAgICB0aGUgZmlsZW5hbWVzIHJldHVybmVkIHdpbGwgYmUgc3RyLgogICAgT24gc29tZSBwbGF0Zm9ybXMsIHBhdGggbWF5IGFsc28gYmUgc3BlY2lmaWVkIGFzIGFuIG9wZW4gZmlsZSBkZXNjcmlwdG9yOwogICAgICB0aGUgZmlsZSBkZXNjcmlwdG9yIG11c3QgcmVmZXIgdG8gYSBkaXJlY3RvcnkuCiAgICAgIElmIHRoaXMgZnVuY3Rpb25hbGl0eSBpcyB1bmF2YWlsYWJsZSwgdXNpbmcgaXQgcmFpc2VzIE5vdEltcGxlbWVudGVkRXJyb3IuIiIiCiAgICBwYXNzCgpkZWYgbHNlZWsoKmFyZ3MsKiprdyk6CiAgICAiIiJsc2VlayhmZCwgcG9zLCBob3cpIC0+IG5ld3BvcyAgICAKICAgIFNldCB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiBhIGZpbGUgZGVzY3JpcHRvci4KICAgIFJldHVybiB0aGUgbmV3IGN1cnNvciBwb3NpdGlvbiBpbiBieXRlcywgc3RhcnRpbmcgZnJvbSB0aGUgYmVnaW5uaW5nLiIiIgogICAgcGFzcwoKZGVmIGxzdGF0KCphcmdzLCoqa3cpOgogICAgIiIibHN0YXQocGF0aCwgKiwgZGlyX2ZkPU5vbmUpIC0+IHN0YXQgcmVzdWx0ICAgIAogICAgTGlrZSBzdGF0KCksIGJ1dCBkbyBub3QgZm9sbG93IHN5bWJvbGljIGxpbmtzLgogICAgRXF1aXZhbGVudCB0byBzdGF0KHBhdGgsIGZvbGxvd19zeW1saW5rcz1GYWxzZSkuIiIiCiAgICBwYXNzCgpkZWYgbWtkaXIoKmFyZ3MsKiprdyk6CiAgICAiIiJta2RpcihwYXRoLCBtb2RlPTBvNzc3LCAqLCBkaXJfZmQ9Tm9uZSkgICAgCiAgICBDcmVhdGUgYSBkaXJlY3RvcnkuCiAgICAKICAgIElmIGRpcl9mZCBpcyBub3QgTm9uZSwgaXQgc2hvdWxkIGJlIGEgZmlsZSBkZXNjcmlwdG9yIG9wZW4gdG8gYSBkaXJlY3RvcnksCiAgICAgIGFuZCBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZTsgcGF0aCB3aWxsIHRoZW4gYmUgcmVsYXRpdmUgdG8gdGhhdCBkaXJlY3RvcnkuCiAgICBkaXJfZmQgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBvbiB5b3VyIHBsYXRmb3JtLgogICAgICBJZiBpdCBpcyB1bmF2YWlsYWJsZSwgdXNpbmcgaXQgd2lsbCByYWlzZSBhIE5vdEltcGxlbWVudGVkRXJyb3IuCiAgICAKICAgIFRoZSBtb2RlIGFyZ3VtZW50IGlzIGlnbm9yZWQgb24gV2luZG93cy4iIiIKICAgIHBhc3MKCmRlZiBvcGVuKCphcmdzLCoqa3cpOgogICAgIiIib3BlbihwYXRoLCBmbGFncywgbW9kZT0wbzc3NywgKiwgZGlyX2ZkPU5vbmUpICAgIAogICAgT3BlbiBhIGZpbGUgZm9yIGxvdyBsZXZlbCBJTy4gIFJldHVybnMgYSBmaWxlIGhhbmRsZSAoaW50ZWdlcikuCiAgICAKICAgIElmIGRpcl9mZCBpcyBub3QgTm9uZSwgaXQgc2hvdWxkIGJlIGEgZmlsZSBkZXNjcmlwdG9yIG9wZW4gdG8gYSBkaXJlY3RvcnksCiAgICAgIGFuZCBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZTsgcGF0aCB3aWxsIHRoZW4gYmUgcmVsYXRpdmUgdG8gdGhhdCBkaXJlY3RvcnkuCiAgICBkaXJfZmQgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBvbiB5b3VyIHBsYXRmb3JtLgogICAgICBJZiBpdCBpcyB1bmF2YWlsYWJsZSwgdXNpbmcgaXQgd2lsbCByYWlzZSBhIE5vdEltcGxlbWVudGVkRXJyb3IuIiIiCiAgICBwYXNzCgpkZWYgcGlwZSgqYXJncywqKmt3KToKICAgICIiInBpcGUoKSAtPiAocmVhZF9lbmQsIHdyaXRlX2VuZCkgICAgCiAgICBDcmVhdGUgYSBwaXBlLiIiIgogICAgcGFzcwoKZGVmIHB1dGVudigqYXJncywqKmt3KToKICAgICIiInB1dGVudihrZXksIHZhbHVlKSAgICAKICAgIENoYW5nZSBvciBhZGQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUuIiIiCiAgICBwYXNzCgpkZWYgcmVhZCgqYXJncywqKmt3KToKICAgICIiInJlYWQoZmQsIGJ1ZmZlcnNpemUpIC0+IHN0cmluZyAgICAKICAgIFJlYWQgYSBmaWxlIGRlc2NyaXB0b3IuIiIiCiAgICBwYXNzCgpkZWYgcmVhZGxpbmsoKmFyZ3MsKiprdyk6CiAgICAiIiJyZWFkbGluayhwYXRoLCAqLCBkaXJfZmQ9Tm9uZSkgLT4gcGF0aCAgICAKICAgIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHBhdGggdG8gd2hpY2ggdGhlIHN5bWJvbGljIGxpbmsgcG9pbnRzLgogICAgCiAgICBJZiBkaXJfZmQgaXMgbm90IE5vbmUsIGl0IHNob3VsZCBiZSBhIGZpbGUgZGVzY3JpcHRvciBvcGVuIHRvIGEgZGlyZWN0b3J5LAogICAgICBhbmQgcGF0aCBzaG91bGQgYmUgcmVsYXRpdmU7IHBhdGggd2lsbCB0aGVuIGJlIHJlbGF0aXZlIHRvIHRoYXQgZGlyZWN0b3J5LgogICAgZGlyX2ZkIG1heSBub3QgYmUgaW1wbGVtZW50ZWQgb24geW91ciBwbGF0Zm9ybS4KICAgICAgSWYgaXQgaXMgdW5hdmFpbGFibGUsIHVzaW5nIGl0IHdpbGwgcmFpc2UgYSBOb3RJbXBsZW1lbnRlZEVycm9yLiIiIgogICAgcGFzcwoKZGVmIHJlbW92ZSgqYXJncywqKmt3KToKICAgICIiInJlbW92ZShwYXRoLCAqLCBkaXJfZmQ9Tm9uZSkgICAgCiAgICBSZW1vdmUgYSBmaWxlIChzYW1lIGFzIHVubGluaygpKS4KICAgIAogICAgSWYgZGlyX2ZkIGlzIG5vdCBOb25lLCBpdCBzaG91bGQgYmUgYSBmaWxlIGRlc2NyaXB0b3Igb3BlbiB0byBhIGRpcmVjdG9yeSwKICAgICAgYW5kIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlOyBwYXRoIHdpbGwgdGhlbiBiZSByZWxhdGl2ZSB0byB0aGF0IGRpcmVjdG9yeS4KICAgIGRpcl9mZCBtYXkgbm90IGJlIGltcGxlbWVudGVkIG9uIHlvdXIgcGxhdGZvcm0uCiAgICAgIElmIGl0IGlzIHVuYXZhaWxhYmxlLCB1c2luZyBpdCB3aWxsIHJhaXNlIGEgTm90SW1wbGVtZW50ZWRFcnJvci4iIiIKICAgIHBhc3MKCmRlZiByZW5hbWUoKmFyZ3MsKiprdyk6CiAgICAiIiJyZW5hbWUoc3JjLCBkc3QsICosIHNyY19kaXJfZmQ9Tm9uZSwgZHN0X2Rpcl9mZD1Ob25lKSAgICAKICAgIFJlbmFtZSBhIGZpbGUgb3IgZGlyZWN0b3J5LgogICAgCiAgICBJZiBlaXRoZXIgc3JjX2Rpcl9mZCBvciBkc3RfZGlyX2ZkIGlzIG5vdCBOb25lLCBpdCBzaG91bGQgYmUgYSBmaWxlCiAgICAgIGRlc2NyaXB0b3Igb3BlbiB0byBhIGRpcmVjdG9yeSwgYW5kIHRoZSByZXNwZWN0aXZlIHBhdGggc3RyaW5nIChzcmMgb3IgZHN0KQogICAgICBzaG91bGQgYmUgcmVsYXRpdmU7IHRoZSBwYXRoIHdpbGwgdGhlbiBiZSByZWxhdGl2ZSB0byB0aGF0IGRpcmVjdG9yeS4KICAgIHNyY19kaXJfZmQgYW5kIGRzdF9kaXJfZmQsIG1heSBub3QgYmUgaW1wbGVtZW50ZWQgb24geW91ciBwbGF0Zm9ybS4KICAgICAgSWYgdGhleSBhcmUgdW5hdmFpbGFibGUsIHVzaW5nIHRoZW0gd2lsbCByYWlzZSBhIE5vdEltcGxlbWVudGVkRXJyb3IuIiIiCiAgICBwYXNzCgpkZWYgcmVwbGFjZSgqYXJncywqKmt3KToKICAgICIiInJlcGxhY2Uoc3JjLCBkc3QsICosIHNyY19kaXJfZmQ9Tm9uZSwgZHN0X2Rpcl9mZD1Ob25lKSAgICAKICAgIFJlbmFtZSBhIGZpbGUgb3IgZGlyZWN0b3J5LCBvdmVyd3JpdGluZyB0aGUgZGVzdGluYXRpb24uCiAgICAKICAgIElmIGVpdGhlciBzcmNfZGlyX2ZkIG9yIGRzdF9kaXJfZmQgaXMgbm90IE5vbmUsIGl0IHNob3VsZCBiZSBhIGZpbGUKICAgICAgZGVzY3JpcHRvciBvcGVuIHRvIGEgZGlyZWN0b3J5LCBhbmQgdGhlIHJlc3BlY3RpdmUgcGF0aCBzdHJpbmcgKHNyYyBvciBkc3QpCiAgICAgIHNob3VsZCBiZSByZWxhdGl2ZTsgdGhlIHBhdGggd2lsbCB0aGVuIGJlIHJlbGF0aXZlIHRvIHRoYXQgZGlyZWN0b3J5LgogICAgc3JjX2Rpcl9mZCBhbmQgZHN0X2Rpcl9mZCwgbWF5IG5vdCBiZSBpbXBsZW1lbnRlZCBvbiB5b3VyIHBsYXRmb3JtLgogICAgICBJZiB0aGV5IGFyZSB1bmF2YWlsYWJsZSwgdXNpbmcgdGhlbSB3aWxsIHJhaXNlIGEgTm90SW1wbGVtZW50ZWRFcnJvci4iIiIKICAgIHBhc3MKCmRlZiBybWRpcigqYXJncywqKmt3KToKICAgICIiInJtZGlyKHBhdGgsICosIGRpcl9mZD1Ob25lKSAgICAKICAgIFJlbW92ZSBhIGRpcmVjdG9yeS4KICAgIAogICAgSWYgZGlyX2ZkIGlzIG5vdCBOb25lLCBpdCBzaG91bGQgYmUgYSBmaWxlIGRlc2NyaXB0b3Igb3BlbiB0byBhIGRpcmVjdG9yeSwKICAgICAgYW5kIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlOyBwYXRoIHdpbGwgdGhlbiBiZSByZWxhdGl2ZSB0byB0aGF0IGRpcmVjdG9yeS4KICAgIGRpcl9mZCBtYXkgbm90IGJlIGltcGxlbWVudGVkIG9uIHlvdXIgcGxhdGZvcm0uCiAgICAgIElmIGl0IGlzIHVuYXZhaWxhYmxlLCB1c2luZyBpdCB3aWxsIHJhaXNlIGEgTm90SW1wbGVtZW50ZWRFcnJvci4iIiIKICAgIHBhc3MKCmRlZiBzcGF3bnYoKmFyZ3MsKiprdyk6CiAgICAiIiJzcGF3bnYobW9kZSwgcGF0aCwgYXJncykgICAgCiAgICBFeGVjdXRlIHRoZSBwcm9ncmFtICdwYXRoJyBpbiBhIG5ldyBwcm9jZXNzLgogICAgCiAgICAgICAgbW9kZTogbW9kZSBvZiBwcm9jZXNzIGNyZWF0aW9uCiAgICAgICAgcGF0aDogcGF0aCBvZiBleGVjdXRhYmxlIGZpbGUKICAgICAgICBhcmdzOiB0dXBsZSBvciBsaXN0IG9mIHN0cmluZ3MiIiIKICAgIHBhc3MKCmRlZiBzcGF3bnZlKCphcmdzLCoqa3cpOgogICAgIiIic3Bhd252ZShtb2RlLCBwYXRoLCBhcmdzLCBlbnYpICAgIAogICAgRXhlY3V0ZSB0aGUgcHJvZ3JhbSAncGF0aCcgaW4gYSBuZXcgcHJvY2Vzcy4KICAgIAogICAgICAgIG1vZGU6IG1vZGUgb2YgcHJvY2VzcyBjcmVhdGlvbgogICAgICAgIHBhdGg6IHBhdGggb2YgZXhlY3V0YWJsZSBmaWxlCiAgICAgICAgYXJnczogdHVwbGUgb3IgbGlzdCBvZiBhcmd1bWVudHMKICAgICAgICBlbnY6IGRpY3Rpb25hcnkgb2Ygc3RyaW5ncyBtYXBwaW5nIHRvIHN0cmluZ3MiIiIKICAgIHBhc3MKCmRlZiBzdGFydGZpbGUoKmFyZ3MsKiprdyk6CiAgICAiIiJzdGFydGZpbGUoZmlsZXBhdGggWywgb3BlcmF0aW9uXSkgLSBTdGFydCBhIGZpbGUgd2l0aCBpdHMgYXNzb2NpYXRlZCAgICBhcHBsaWNhdGlvbi4KICAgIAogICAgV2hlbiAib3BlcmF0aW9uIiBpcyBub3Qgc3BlY2lmaWVkIG9yICJvcGVuIiwgdGhpcyBhY3RzIGxpa2UKICAgIGRvdWJsZS1jbGlja2luZyB0aGUgZmlsZSBpbiBFeHBsb3Jlciwgb3IgZ2l2aW5nIHRoZSBmaWxlIG5hbWUgYXMgYW4KICAgIGFyZ3VtZW50IHRvIHRoZSBET1MgInN0YXJ0IiBjb21tYW5kOiB0aGUgZmlsZSBpcyBvcGVuZWQgd2l0aCB3aGF0ZXZlcgogICAgYXBwbGljYXRpb24gKGlmIGFueSkgaXRzIGV4dGVuc2lvbiBpcyBhc3NvY2lhdGVkLgogICAgV2hlbiBhbm90aGVyICJvcGVyYXRpb24iIGlzIGdpdmVuLCBpdCBzcGVjaWZpZXMgd2hhdCBzaG91bGQgYmUgZG9uZSB3aXRoCiAgICB0aGUgZmlsZS4gIEEgdHlwaWNhbCBvcGVyYXRpb24gaXMgInByaW50Ii4KICAgIAogICAgc3RhcnRmaWxlIHJldHVybnMgYXMgc29vbiBhcyB0aGUgYXNzb2NpYXRlZCBhcHBsaWNhdGlvbiBpcyBsYXVuY2hlZC4KICAgIFRoZXJlIGlzIG5vIG9wdGlvbiB0byB3YWl0IGZvciB0aGUgYXBwbGljYXRpb24gdG8gY2xvc2UsIGFuZCBubyB3YXkKICAgIHRvIHJldHJpZXZlIHRoZSBhcHBsaWNhdGlvbidzIGV4aXQgc3RhdHVzLgogICAgCiAgICBUaGUgZmlsZXBhdGggaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgZGlyZWN0b3J5LiAgSWYgeW91IHdhbnQgdG8gdXNlCiAgICBhbiBhYnNvbHV0ZSBwYXRoLCBtYWtlIHN1cmUgdGhlIGZpcnN0IGNoYXJhY3RlciBpcyBub3QgYSBzbGFzaCAoIi8iKTsKICAgIHRoZSB1bmRlcmx5aW5nIFdpbjMyIFNoZWxsRXhlY3V0ZSBmdW5jdGlvbiBkb2Vzbid0IHdvcmsgaWYgaXQgaXMuIiIiCiAgICBwYXNzCgpkZWYgc3RhdCgqYXJncywqKmt3KToKICAgICIiInN0YXQocGF0aCwgKiwgZGlyX2ZkPU5vbmUsIGZvbGxvd19zeW1saW5rcz1UcnVlKSAtPiBzdGF0IHJlc3VsdCAgICAKICAgIFBlcmZvcm0gYSBzdGF0IHN5c3RlbSBjYWxsIG9uIHRoZSBnaXZlbiBwYXRoLgogICAgCiAgICBwYXRoIG1heSBiZSBzcGVjaWZpZWQgYXMgZWl0aGVyIGEgc3RyaW5nIG9yIGFzIGFuIG9wZW4gZmlsZSBkZXNjcmlwdG9yLgogICAgCiAgICBJZiBkaXJfZmQgaXMgbm90IE5vbmUsIGl0IHNob3VsZCBiZSBhIGZpbGUgZGVzY3JpcHRvciBvcGVuIHRvIGEgZGlyZWN0b3J5LAogICAgICBhbmQgcGF0aCBzaG91bGQgYmUgcmVsYXRpdmU7IHBhdGggd2lsbCB0aGVuIGJlIHJlbGF0aXZlIHRvIHRoYXQgZGlyZWN0b3J5LgogICAgICBkaXJfZmQgbWF5IG5vdCBiZSBzdXBwb3J0ZWQgb24geW91ciBwbGF0Zm9ybTsgaWYgaXQgaXMgdW5hdmFpbGFibGUsIHVzaW5nCiAgICAgIGl0IHdpbGwgcmFpc2UgYSBOb3RJbXBsZW1lbnRlZEVycm9yLgogICAgSWYgZm9sbG93X3N5bWxpbmtzIGlzIEZhbHNlLCBhbmQgdGhlIGxhc3QgZWxlbWVudCBvZiB0aGUgcGF0aCBpcyBhIHN5bWJvbGljCiAgICAgIGxpbmssIHN0YXQgd2lsbCBleGFtaW5lIHRoZSBzeW1ib2xpYyBsaW5rIGl0c2VsZiBpbnN0ZWFkIG9mIHRoZSBmaWxlIHRoZQogICAgICBsaW5rIHBvaW50cyB0by4KICAgIEl0IGlzIGFuIGVycm9yIHRvIHVzZSBkaXJfZmQgb3IgZm9sbG93X3N5bWxpbmtzIHdoZW4gc3BlY2lmeWluZyBwYXRoIGFzCiAgICAgIGFuIG9wZW4gZmlsZSBkZXNjcmlwdG9yLiIiIgogICAgcGFzcwoKZGVmIHN0YXRfZmxvYXRfdGltZXMoKmFyZ3MsKiprdyk6CiAgICAiIiJzdGF0X2Zsb2F0X3RpbWVzKFtuZXd2YWxdKSAtPiBvbGR2YWwgICAgCiAgICBEZXRlcm1pbmUgd2hldGhlciBvcy5bbGZdc3RhdCByZXByZXNlbnRzIHRpbWUgc3RhbXBzIGFzIGZsb2F0IG9iamVjdHMuCiAgICBJZiBuZXd2YWwgaXMgVHJ1ZSwgZnV0dXJlIGNhbGxzIHRvIHN0YXQoKSByZXR1cm4gZmxvYXRzLCBpZiBpdCBpcyBGYWxzZSwKICAgIGZ1dHVyZSBjYWxscyByZXR1cm4gaW50cy4gCiAgICBJZiBuZXd2YWwgaXMgb21pdHRlZCwgcmV0dXJuIHRoZSBjdXJyZW50IHNldHRpbmcuCiAgICAiIiIKICAgIHBhc3MKCmNsYXNzIHN0YXRfcmVzdWx0OgogICAgcGFzcwoKY2xhc3Mgc3RhdHZmc19yZXN1bHQ6CiAgICBwYXNzCgpkZWYgc3RyZXJyb3IoKmFyZ3MsKiprdyk6CiAgICAiIiJzdHJlcnJvcihjb2RlKSAtPiBzdHJpbmcgICAgCiAgICBUcmFuc2xhdGUgYW4gZXJyb3IgY29kZSB0byBhIG1lc3NhZ2Ugc3RyaW5nLiIiIgogICAgcGFzcwoKZGVmIHN5bWxpbmsoKmFyZ3MsKiprdyk6CiAgICAiIiJzeW1saW5rKHNyYywgZHN0LCB0YXJnZXRfaXNfZGlyZWN0b3J5PUZhbHNlLCAqLCBkaXJfZmQ9Tm9uZSkgICAgCiAgICBDcmVhdGUgYSBzeW1ib2xpYyBsaW5rIHBvaW50aW5nIHRvIHNyYyBuYW1lZCBkc3QuCiAgICAKICAgIHRhcmdldF9pc19kaXJlY3RvcnkgaXMgcmVxdWlyZWQgb24gV2luZG93cyBpZiB0aGUgdGFyZ2V0IGlzIHRvIGJlCiAgICAgIGludGVycHJldGVkIGFzIGEgZGlyZWN0b3J5LiAgKE9uIFdpbmRvd3MsIHN5bWxpbmsgcmVxdWlyZXMKICAgICAgV2luZG93cyA2LjAgb3IgZ3JlYXRlciwgYW5kIHJhaXNlcyBhIE5vdEltcGxlbWVudGVkRXJyb3Igb3RoZXJ3aXNlLikKICAgICAgdGFyZ2V0X2lzX2RpcmVjdG9yeSBpcyBpZ25vcmVkIG9uIG5vbi1XaW5kb3dzIHBsYXRmb3Jtcy4KICAgIAogICAgSWYgZGlyX2ZkIGlzIG5vdCBOb25lLCBpdCBzaG91bGQgYmUgYSBmaWxlIGRlc2NyaXB0b3Igb3BlbiB0byBhIGRpcmVjdG9yeSwKICAgICAgYW5kIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlOyBwYXRoIHdpbGwgdGhlbiBiZSByZWxhdGl2ZSB0byB0aGF0IGRpcmVjdG9yeS4KICAgIGRpcl9mZCBtYXkgbm90IGJlIGltcGxlbWVudGVkIG9uIHlvdXIgcGxhdGZvcm0uCiAgICAgIElmIGl0IGlzIHVuYXZhaWxhYmxlLCB1c2luZyBpdCB3aWxsIHJhaXNlIGEgTm90SW1wbGVtZW50ZWRFcnJvci4iIiIKICAgIHBhc3MKCmRlZiBzeXN0ZW0oKmFyZ3MsKiprdyk6CiAgICAiIiJzeXN0ZW0oY29tbWFuZCkgLT4gZXhpdF9zdGF0dXMgICAgCiAgICBFeGVjdXRlIHRoZSBjb21tYW5kIChhIHN0cmluZykgaW4gYSBzdWJzaGVsbC4iIiIKICAgIHBhc3MKCmNsYXNzIHRlcm1pbmFsX3NpemU6CiAgICBwYXNzCgpkZWYgdGltZXMoKmFyZ3MsKiprdyk6CiAgICAiIiJ0aW1lcygpIC0+IHRpbWVzX3Jlc3VsdCAgICAKICAgIFJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBmbG9hdGluZyBwb2ludCBudW1iZXJzIGluZGljYXRpbmcgcHJvY2VzcwogICAgdGltZXMuICBUaGUgb2JqZWN0IGJlaGF2ZXMgbGlrZSBhIG5hbWVkIHR1cGxlIHdpdGggdGhlc2UgZmllbGRzOgogICAgICAodXRpbWUsIHN0aW1lLCBjdXRpbWUsIGNzdGltZSwgZWxhcHNlZF90aW1lKSIiIgogICAgcGFzcwoKY2xhc3MgdGltZXNfcmVzdWx0OgogICAgcGFzcwoKZGVmIHVtYXNrKCphcmdzLCoqa3cpOgogICAgIiIidW1hc2sobmV3X21hc2spIC0+IG9sZF9tYXNrICAgIAogICAgU2V0IHRoZSBjdXJyZW50IG51bWVyaWMgdW1hc2sgYW5kIHJldHVybiB0aGUgcHJldmlvdXMgdW1hc2suIiIiCiAgICBwYXNzCgpjbGFzcyB1bmFtZV9yZXN1bHQ6CiAgICBwYXNzCgpkZWYgdW5saW5rKCphcmdzLCoqa3cpOgogICAgIiIidW5saW5rKHBhdGgsICosIGRpcl9mZD1Ob25lKSAgICAKICAgIFJlbW92ZSBhIGZpbGUgKHNhbWUgYXMgcmVtb3ZlKCkpLgogICAgCiAgICBJZiBkaXJfZmQgaXMgbm90IE5vbmUsIGl0IHNob3VsZCBiZSBhIGZpbGUgZGVzY3JpcHRvciBvcGVuIHRvIGEgZGlyZWN0b3J5LAogICAgICBhbmQgcGF0aCBzaG91bGQgYmUgcmVsYXRpdmU7IHBhdGggd2lsbCB0aGVuIGJlIHJlbGF0aXZlIHRvIHRoYXQgZGlyZWN0b3J5LgogICAgZGlyX2ZkIG1heSBub3QgYmUgaW1wbGVtZW50ZWQgb24geW91ciBwbGF0Zm9ybS4KICAgICAgSWYgaXQgaXMgdW5hdmFpbGFibGUsIHVzaW5nIGl0IHdpbGwgcmFpc2UgYSBOb3RJbXBsZW1lbnRlZEVycm9yLiIiIgogICAgcGFzcwoKZGVmIHVyYW5kb20oKmFyZ3MsKiprdyk6CiAgICAiIiJ1cmFuZG9tKG4pIC0+IHN0ciAgICAKICAgIFJldHVybiBuIHJhbmRvbSBieXRlcyBzdWl0YWJsZSBmb3IgY3J5cHRvZ3JhcGhpYyB1c2UuIiIiCiAgICBwYXNzCgpkZWYgdXRpbWUoKmFyZ3MsKiprdyk6CiAgICAiIiJ1dGltZShwYXRoLCB0aW1lcz1Ob25lLCAqLCBucz1Ob25lLCBkaXJfZmQ9Tm9uZSwgZm9sbG93X3N5bWxpbmtzPVRydWUpICAgIFNldCB0aGUgYWNjZXNzIGFuZCBtb2RpZmllZCB0aW1lIG9mIHBhdGguCiAgICAKICAgIHBhdGggbWF5IGFsd2F5cyBiZSBzcGVjaWZpZWQgYXMgYSBzdHJpbmcuCiAgICBPbiBzb21lIHBsYXRmb3JtcywgcGF0aCBtYXkgYWxzbyBiZSBzcGVjaWZpZWQgYXMgYW4gb3BlbiBmaWxlIGRlc2NyaXB0b3IuCiAgICAgIElmIHRoaXMgZnVuY3Rpb25hbGl0eSBpcyB1bmF2YWlsYWJsZSwgdXNpbmcgaXQgcmFpc2VzIGFuIGV4Y2VwdGlvbi4KICAgIAogICAgSWYgdGltZXMgaXMgbm90IE5vbmUsIGl0IG11c3QgYmUgYSB0dXBsZSAoYXRpbWUsIG10aW1lKTsKICAgICAgICBhdGltZSBhbmQgbXRpbWUgc2hvdWxkIGJlIGV4cHJlc3NlZCBhcyBmbG9hdCBzZWNvbmRzIHNpbmNlIHRoZSBlcG9jaC4KICAgIElmIG5zIGlzIG5vdCBOb25lLCBpdCBtdXN0IGJlIGEgdHVwbGUgKGF0aW1lX25zLCBtdGltZV9ucyk7CiAgICAgICAgYXRpbWVfbnMgYW5kIG10aW1lX25zIHNob3VsZCBiZSBleHByZXNzZWQgYXMgaW50ZWdlciBuYW5vc2Vjb25kcwogICAgICAgIHNpbmNlIHRoZSBlcG9jaC4KICAgIElmIGJvdGggdGltZXMgYW5kIG5zIGFyZSBOb25lLCB1dGltZSB1c2VzIHRoZSBjdXJyZW50IHRpbWUuCiAgICBTcGVjaWZ5aW5nIHR1cGxlcyBmb3IgYm90aCB0aW1lcyBhbmQgbnMgaXMgYW4gZXJyb3IuCiAgICAKICAgIElmIGRpcl9mZCBpcyBub3QgTm9uZSwgaXQgc2hvdWxkIGJlIGEgZmlsZSBkZXNjcmlwdG9yIG9wZW4gdG8gYSBkaXJlY3RvcnksCiAgICAgIGFuZCBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZTsgcGF0aCB3aWxsIHRoZW4gYmUgcmVsYXRpdmUgdG8gdGhhdCBkaXJlY3RvcnkuCiAgICBJZiBmb2xsb3dfc3ltbGlua3MgaXMgRmFsc2UsIGFuZCB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSBwYXRoIGlzIGEgc3ltYm9saWMKICAgICAgbGluaywgdXRpbWUgd2lsbCBtb2RpZnkgdGhlIHN5bWJvbGljIGxpbmsgaXRzZWxmIGluc3RlYWQgb2YgdGhlIGZpbGUgdGhlCiAgICAgIGxpbmsgcG9pbnRzIHRvLgogICAgSXQgaXMgYW4gZXJyb3IgdG8gdXNlIGRpcl9mZCBvciBmb2xsb3dfc3ltbGlua3Mgd2hlbiBzcGVjaWZ5aW5nIHBhdGgKICAgICAgYXMgYW4gb3BlbiBmaWxlIGRlc2NyaXB0b3IuCiAgICBkaXJfZmQgYW5kIGZvbGxvd19zeW1saW5rcyBtYXkgbm90IGJlIGF2YWlsYWJsZSBvbiB5b3VyIHBsYXRmb3JtLgogICAgICBJZiB0aGV5IGFyZSB1bmF2YWlsYWJsZSwgdXNpbmcgdGhlbSB3aWxsIHJhaXNlIGEgTm90SW1wbGVtZW50ZWRFcnJvci4iIiIKICAgIHBhc3MKCmRlZiB3YWl0cGlkKCphcmdzLCoqa3cpOgogICAgIiIid2FpdHBpZChwaWQsIG9wdGlvbnMpIC0+IChwaWQsIHN0YXR1cyA8PCA4KSAgICAKICAgIFdhaXQgZm9yIGNvbXBsZXRpb24gb2YgYSBnaXZlbiBwcm9jZXNzLiAgb3B0aW9ucyBpcyBpZ25vcmVkIG9uIFdpbmRvd3MuIiIiCiAgICBwYXNzCgpkZWYgd3JpdGUoKmFyZ3MsKiprdyk6CiAgICAiIiJ3cml0ZShmZCwgc3RyaW5nKSAtPiBieXRlc3dyaXR0ZW4gICAgCiAgICBXcml0ZSBhIHN0cmluZyB0byBhIGZpbGUgZGVzY3JpcHRvci4iIiIKICAgIHBhc3MK',
'/Lib/posixpath.py':'',
'/Lib/pprint.py':'',
'/Lib/random.py':'',
'/Lib/reprlib.py':'IiIiUmVkbyB0aGUgYnVpbHRpbiByZXByKCkgKHJlcHJlc2VudGF0aW9uKSBidXQgd2l0aCBsaW1pdHMgb24gbW9zdCBzaXplcy4iIiIKCl9fYWxsX18gPSBbIlJlcHIiLCAicmVwciIsICJyZWN1cnNpdmVfcmVwciJdCgppbXBvcnQgYnVpbHRpbnMKZnJvbSBpdGVydG9vbHMgaW1wb3J0IGlzbGljZQp0cnk6CiAgICBmcm9tIF90aHJlYWQgaW1wb3J0IGdldF9pZGVudApleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBmcm9tIF9kdW1teV90aHJlYWQgaW1wb3J0IGdldF9pZGVudAoKZGVmIHJlY3Vyc2l2ZV9yZXByKGZpbGx2YWx1ZT0nLi4uJyk6CiAgICAnRGVjb3JhdG9yIHRvIG1ha2UgYSByZXByIGZ1bmN0aW9uIHJldHVybiBmaWxsdmFsdWUgZm9yIGEgcmVjdXJzaXZlIGNhbGwnCgogICAgZGVmIGRlY29yYXRpbmdfZnVuY3Rpb24odXNlcl9mdW5jdGlvbik6CiAgICAgICAgcmVwcl9ydW5uaW5nID0gc2V0KCkKCiAgICAgICAgZGVmIHdyYXBwZXIoc2VsZik6CiAgICAgICAgICAgIGtleSA9IGlkKHNlbGYpLCBnZXRfaWRlbnQoKQogICAgICAgICAgICBpZiBrZXkgaW4gcmVwcl9ydW5uaW5nOgogICAgICAgICAgICAgICAgcmV0dXJuIGZpbGx2YWx1ZQogICAgICAgICAgICByZXByX3J1bm5pbmcuYWRkKGtleSkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmVzdWx0ID0gdXNlcl9mdW5jdGlvbihzZWxmKQogICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgcmVwcl9ydW5uaW5nLmRpc2NhcmQoa2V5KQogICAgICAgICAgICByZXR1cm4gcmVzdWx0CgogICAgICAgICMgQ2FuJ3QgdXNlIGZ1bmN0b29scy53cmFwcygpIGhlcmUgYmVjYXVzZSBvZiBib290c3RyYXAgaXNzdWVzCiAgICAgICAgd3JhcHBlci5fX21vZHVsZV9fID0gZ2V0YXR0cih1c2VyX2Z1bmN0aW9uLCAnX19tb2R1bGVfXycpCiAgICAgICAgd3JhcHBlci5fX2RvY19fID0gZ2V0YXR0cih1c2VyX2Z1bmN0aW9uLCAnX19kb2NfXycpCiAgICAgICAgd3JhcHBlci5fX25hbWVfXyA9IGdldGF0dHIodXNlcl9mdW5jdGlvbiwgJ19fbmFtZV9fJykKICAgICAgICB3cmFwcGVyLl9fYW5ub3RhdGlvbnNfXyA9IGdldGF0dHIodXNlcl9mdW5jdGlvbiwgJ19fYW5ub3RhdGlvbnNfXycsIHt9KQogICAgICAgIHJldHVybiB3cmFwcGVyCgogICAgcmV0dXJuIGRlY29yYXRpbmdfZnVuY3Rpb24KCmNsYXNzIFJlcHI6CgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYubWF4bGV2ZWwgPSA2CiAgICAgICAgc2VsZi5tYXh0dXBsZSA9IDYKICAgICAgICBzZWxmLm1heGxpc3QgPSA2CiAgICAgICAgc2VsZi5tYXhhcnJheSA9IDUKICAgICAgICBzZWxmLm1heGRpY3QgPSA0CiAgICAgICAgc2VsZi5tYXhzZXQgPSA2CiAgICAgICAgc2VsZi5tYXhmcm96ZW5zZXQgPSA2CiAgICAgICAgc2VsZi5tYXhkZXF1ZSA9IDYKICAgICAgICBzZWxmLm1heHN0cmluZyA9IDMwCiAgICAgICAgc2VsZi5tYXhsb25nID0gNDAKICAgICAgICBzZWxmLm1heG90aGVyID0gMzAKCiAgICBkZWYgcmVwcihzZWxmLCB4KToKICAgICAgICByZXR1cm4gc2VsZi5yZXByMSh4LCBzZWxmLm1heGxldmVsKQoKICAgIGRlZiByZXByMShzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgdHlwZW5hbWUgPSB0eXBlKHgpLl9fbmFtZV9fCiAgICAgICAgaWYgJyAnIGluIHR5cGVuYW1lOgogICAgICAgICAgICBwYXJ0cyA9IHR5cGVuYW1lLnNwbGl0KCkKICAgICAgICAgICAgdHlwZW5hbWUgPSAnXycuam9pbihwYXJ0cykKICAgICAgICBpZiBoYXNhdHRyKHNlbGYsICdyZXByXycgKyB0eXBlbmFtZSk6CiAgICAgICAgICAgIHJldHVybiBnZXRhdHRyKHNlbGYsICdyZXByXycgKyB0eXBlbmFtZSkoeCwgbGV2ZWwpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVwcl9pbnN0YW5jZSh4LCBsZXZlbCkKCiAgICBkZWYgX3JlcHJfaXRlcmFibGUoc2VsZiwgeCwgbGV2ZWwsIGxlZnQsIHJpZ2h0LCBtYXhpdGVyLCB0cmFpbD0nJyk6CiAgICAgICAgbiA9IGxlbih4KQogICAgICAgIGlmIGxldmVsIDw9IDAgYW5kIG46CiAgICAgICAgICAgIHMgPSAnLi4uJwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG5ld2xldmVsID0gbGV2ZWwgLSAxCiAgICAgICAgICAgIHJlcHIxID0gc2VsZi5yZXByMQogICAgICAgICAgICBwaWVjZXMgPSBbcmVwcjEoZWxlbSwgbmV3bGV2ZWwpIGZvciBlbGVtIGluIGlzbGljZSh4LCBtYXhpdGVyKV0KICAgICAgICAgICAgaWYgbiA+IG1heGl0ZXI6ICBwaWVjZXMuYXBwZW5kKCcuLi4nKQogICAgICAgICAgICBzID0gJywgJy5qb2luKHBpZWNlcykKICAgICAgICAgICAgaWYgbiA9PSAxIGFuZCB0cmFpbDogIHJpZ2h0ID0gdHJhaWwgKyByaWdodAogICAgICAgIHJldHVybiAnJXMlcyVzJyAlIChsZWZ0LCBzLCByaWdodCkKCiAgICBkZWYgcmVwcl90dXBsZShzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgcmV0dXJuIHNlbGYuX3JlcHJfaXRlcmFibGUoeCwgbGV2ZWwsICcoJywgJyknLCBzZWxmLm1heHR1cGxlLCAnLCcpCgogICAgZGVmIHJlcHJfbGlzdChzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgcmV0dXJuIHNlbGYuX3JlcHJfaXRlcmFibGUoeCwgbGV2ZWwsICdbJywgJ10nLCBzZWxmLm1heGxpc3QpCgogICAgZGVmIHJlcHJfYXJyYXkoc2VsZiwgeCwgbGV2ZWwpOgogICAgICAgIGhlYWRlciA9ICJhcnJheSgnJXMnLCBbIiAlIHgudHlwZWNvZGUKICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgaGVhZGVyLCAnXSknLCBzZWxmLm1heGFycmF5KQoKICAgIGRlZiByZXByX3NldChzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgeCA9IF9wb3NzaWJseV9zb3J0ZWQoeCkKICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgJ3NldChbJywgJ10pJywgc2VsZi5tYXhzZXQpCgogICAgZGVmIHJlcHJfZnJvemVuc2V0KHNlbGYsIHgsIGxldmVsKToKICAgICAgICB4ID0gX3Bvc3NpYmx5X3NvcnRlZCh4KQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCAnZnJvemVuc2V0KFsnLCAnXSknLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWF4ZnJvemVuc2V0KQoKICAgIGRlZiByZXByX2RlcXVlKHNlbGYsIHgsIGxldmVsKToKICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgJ2RlcXVlKFsnLCAnXSknLCBzZWxmLm1heGRlcXVlKQoKICAgIGRlZiByZXByX2RpY3Qoc2VsZiwgeCwgbGV2ZWwpOgogICAgICAgIG4gPSBsZW4oeCkKICAgICAgICBpZiBuID09IDA6IHJldHVybiAne30nCiAgICAgICAgaWYgbGV2ZWwgPD0gMDogcmV0dXJuICd7Li4ufScKICAgICAgICBuZXdsZXZlbCA9IGxldmVsIC0gMQogICAgICAgIHJlcHIxID0gc2VsZi5yZXByMQogICAgICAgIHBpZWNlcyA9IFtdCiAgICAgICAgZm9yIGtleSBpbiBpc2xpY2UoX3Bvc3NpYmx5X3NvcnRlZCh4KSwgc2VsZi5tYXhkaWN0KToKICAgICAgICAgICAga2V5cmVwciA9IHJlcHIxKGtleSwgbmV3bGV2ZWwpCiAgICAgICAgICAgIHZhbHJlcHIgPSByZXByMSh4W2tleV0sIG5ld2xldmVsKQogICAgICAgICAgICBwaWVjZXMuYXBwZW5kKCclczogJXMnICUgKGtleXJlcHIsIHZhbHJlcHIpKQogICAgICAgIGlmIG4gPiBzZWxmLm1heGRpY3Q6IHBpZWNlcy5hcHBlbmQoJy4uLicpCiAgICAgICAgcyA9ICcsICcuam9pbihwaWVjZXMpCiAgICAgICAgcmV0dXJuICd7JXN9JyAlIChzLCkKCiAgICBkZWYgcmVwcl9zdHIoc2VsZiwgeCwgbGV2ZWwpOgogICAgICAgIHMgPSBidWlsdGlucy5yZXByKHhbOnNlbGYubWF4c3RyaW5nXSkKICAgICAgICBpZiBsZW4ocykgPiBzZWxmLm1heHN0cmluZzoKICAgICAgICAgICAgaSA9IG1heCgwLCAoc2VsZi5tYXhzdHJpbmctMykvLzIpCiAgICAgICAgICAgIGogPSBtYXgoMCwgc2VsZi5tYXhzdHJpbmctMy1pKQogICAgICAgICAgICBzID0gYnVpbHRpbnMucmVwcih4WzppXSArIHhbbGVuKHgpLWo6XSkKICAgICAgICAgICAgcyA9IHNbOmldICsgJy4uLicgKyBzW2xlbihzKS1qOl0KICAgICAgICByZXR1cm4gcwoKICAgIGRlZiByZXByX2ludChzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgcyA9IGJ1aWx0aW5zLnJlcHIoeCkgIyBYWFggSG9wZSB0aGlzIGlzbid0IHRvbyBzbG93Li4uCiAgICAgICAgaWYgbGVuKHMpID4gc2VsZi5tYXhsb25nOgogICAgICAgICAgICBpID0gbWF4KDAsIChzZWxmLm1heGxvbmctMykvLzIpCiAgICAgICAgICAgIGogPSBtYXgoMCwgc2VsZi5tYXhsb25nLTMtaSkKICAgICAgICAgICAgcyA9IHNbOmldICsgJy4uLicgKyBzW2xlbihzKS1qOl0KICAgICAgICByZXR1cm4gcwoKICAgIGRlZiByZXByX2luc3RhbmNlKHNlbGYsIHgsIGxldmVsKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHMgPSBidWlsdGlucy5yZXByKHgpCiAgICAgICAgICAgICMgQnVncyBpbiB4Ll9fcmVwcl9fKCkgY2FuIGNhdXNlIGFyYml0cmFyeQogICAgICAgICAgICAjIGV4Y2VwdGlvbnMgLS0gdGhlbiBtYWtlIHVwIHNvbWV0aGluZwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHJldHVybiAnPCVzIGluc3RhbmNlIGF0ICV4PicgJSAoeC5fX2NsYXNzX18uX19uYW1lX18sIGlkKHgpKQogICAgICAgIGlmIGxlbihzKSA+IHNlbGYubWF4b3RoZXI6CiAgICAgICAgICAgIGkgPSBtYXgoMCwgKHNlbGYubWF4b3RoZXItMykvLzIpCiAgICAgICAgICAgIGogPSBtYXgoMCwgc2VsZi5tYXhvdGhlci0zLWkpCiAgICAgICAgICAgIHMgPSBzWzppXSArICcuLi4nICsgc1tsZW4ocyktajpdCiAgICAgICAgcmV0dXJuIHMKCgpkZWYgX3Bvc3NpYmx5X3NvcnRlZCh4KToKICAgICMgU2luY2Ugbm90IGFsbCBzZXF1ZW5jZXMgb2YgaXRlbXMgY2FuIGJlIHNvcnRlZCBhbmQgY29tcGFyaXNvbgogICAgIyBmdW5jdGlvbnMgbWF5IHJhaXNlIGFyYml0cmFyeSBleGNlcHRpb25zLCByZXR1cm4gYW4gdW5zb3J0ZWQKICAgICMgc2VxdWVuY2UgaW4gdGhhdCBjYXNlLgogICAgdHJ5OgogICAgICAgIHJldHVybiBzb3J0ZWQoeCkKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgcmV0dXJuIGxpc3QoeCkKCmFSZXByID0gUmVwcigpCnJlcHIgPSBhUmVwci5yZXByCg==',
'/Lib/shutil.py':'',
'/Lib/signal.py':'IiIiVGhpcyBtb2R1bGUgcHJvdmlkZXMgbWVjaGFuaXNtcyB0byB1c2Ugc2lnbmFsIGhhbmRsZXJzIGluIFB5dGhvbi4KCkZ1bmN0aW9uczoKCmFsYXJtKCkgLS0gY2F1c2UgU0lHQUxSTSBhZnRlciBhIHNwZWNpZmllZCB0aW1lIFtVbml4IG9ubHldCnNldGl0aW1lcigpIC0tIGNhdXNlIGEgc2lnbmFsIChkZXNjcmliZWQgYmVsb3cpIGFmdGVyIGEgc3BlY2lmaWVkCiAgICAgICAgICAgICAgIGZsb2F0IHRpbWUgYW5kIHRoZSB0aW1lciBtYXkgcmVzdGFydCB0aGVuIFtVbml4IG9ubHldCmdldGl0aW1lcigpIC0tIGdldCBjdXJyZW50IHZhbHVlIG9mIHRpbWVyIFtVbml4IG9ubHldCnNpZ25hbCgpIC0tIHNldCB0aGUgYWN0aW9uIGZvciBhIGdpdmVuIHNpZ25hbApnZXRzaWduYWwoKSAtLSBnZXQgdGhlIHNpZ25hbCBhY3Rpb24gZm9yIGEgZ2l2ZW4gc2lnbmFsCnBhdXNlKCkgLS0gd2FpdCB1bnRpbCBhIHNpZ25hbCBhcnJpdmVzIFtVbml4IG9ubHldCmRlZmF1bHRfaW50X2hhbmRsZXIoKSAtLSBkZWZhdWx0IFNJR0lOVCBoYW5kbGVyCgpzaWduYWwgY29uc3RhbnRzOgpTSUdfREZMIC0tIHVzZWQgdG8gcmVmZXIgdG8gdGhlIHN5c3RlbSBkZWZhdWx0IGhhbmRsZXIKU0lHX0lHTiAtLSB1c2VkIHRvIGlnbm9yZSB0aGUgc2lnbmFsCk5TSUcgLS0gbnVtYmVyIG9mIGRlZmluZWQgc2lnbmFscwpTSUdJTlQsIFNJR1RFUk0sIGV0Yy4gLS0gc2lnbmFsIG51bWJlcnMKCml0aW1lciBjb25zdGFudHM6CklUSU1FUl9SRUFMIC0tIGRlY3JlbWVudHMgaW4gcmVhbCB0aW1lLCBhbmQgZGVsaXZlcnMgU0lHQUxSTSB1cG9uCiAgICAgICAgICAgICAgIGV4cGlyYXRpb24KSVRJTUVSX1ZJUlRVQUwgLS0gZGVjcmVtZW50cyBvbmx5IHdoZW4gdGhlIHByb2Nlc3MgaXMgZXhlY3V0aW5nLAogICAgICAgICAgICAgICBhbmQgZGVsaXZlcnMgU0lHVlRBTFJNIHVwb24gZXhwaXJhdGlvbgpJVElNRVJfUFJPRiAtLSBkZWNyZW1lbnRzIGJvdGggd2hlbiB0aGUgcHJvY2VzcyBpcyBleGVjdXRpbmcgYW5kCiAgICAgICAgICAgICAgIHdoZW4gdGhlIHN5c3RlbSBpcyBleGVjdXRpbmcgb24gYmVoYWxmIG9mIHRoZSBwcm9jZXNzLgogICAgICAgICAgICAgICBDb3VwbGVkIHdpdGggSVRJTUVSX1ZJUlRVQUwsIHRoaXMgdGltZXIgaXMgdXN1YWxseQogICAgICAgICAgICAgICB1c2VkIHRvIHByb2ZpbGUgdGhlIHRpbWUgc3BlbnQgYnkgdGhlIGFwcGxpY2F0aW9uCiAgICAgICAgICAgICAgIGluIHVzZXIgYW5kIGtlcm5lbCBzcGFjZS4gU0lHUFJPRiBpcyBkZWxpdmVyZWQgdXBvbgogICAgICAgICAgICAgICBleHBpcmF0aW9uLgoKCioqKiBJTVBPUlRBTlQgTk9USUNFICoqKgpBIHNpZ25hbCBoYW5kbGVyIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHR3byBhcmd1bWVudHM6CnRoZSBmaXJzdCBpcyB0aGUgc2lnbmFsIG51bWJlciwgdGhlIHNlY29uZCBpcyB0aGUgaW50ZXJydXB0ZWQgc3RhY2sgZnJhbWUuIiIiCgpDVFJMX0JSRUFLX0VWRU5UPTEKQ1RSTF9DX0VWRU5UPTAKTlNJRz0yMwpTSUdBQlJUPTIyClNJR0JSRUFLPTIxClNJR0ZQRT04ClNJR0lMTD00ClNJR0lOVD0yClNJR1NFR1Y9MTEKU0lHVEVSTT0xNQpTSUdfREZMPTAKU0lHX0lHTj0xCgpkZWYgc2lnbmFsKHNpZ25hbG51bSwgaGFuZGxlcikgOgogICAgcGFzcwo=',
'/Lib/site.py':'aW1wb3J0IHN5cwppbXBvcnQgZXh0ZXJuYWxfaW1wb3J0CnN5cy5wYXRoX2hvb2tzLmluc2VydCgwLGV4dGVybmFsX2ltcG9ydC5Nb2R1bGVGaW5kZXIpCg==',
'/Lib/socket.py':'',
'/Lib/stat.py':'IiIiQ29uc3RhbnRzL2Z1bmN0aW9ucyBmb3IgaW50ZXJwcmV0aW5nIHJlc3VsdHMgb2Ygb3Muc3RhdCgpIGFuZCBvcy5sc3RhdCgpLgoKU3VnZ2VzdGVkIHVzYWdlOiBmcm9tIHN0YXQgaW1wb3J0ICoKIiIiCgojIEluZGljZXMgZm9yIHN0YXQgc3RydWN0IG1lbWJlcnMgaW4gdGhlIHR1cGxlIHJldHVybmVkIGJ5IG9zLnN0YXQoKQoKU1RfTU9ERSAgPSAwClNUX0lOTyAgID0gMQpTVF9ERVYgICA9IDIKU1RfTkxJTksgPSAzClNUX1VJRCAgID0gNApTVF9HSUQgICA9IDUKU1RfU0laRSAgPSA2ClNUX0FUSU1FID0gNwpTVF9NVElNRSA9IDgKU1RfQ1RJTUUgPSA5CgojIEV4dHJhY3QgYml0cyBmcm9tIHRoZSBtb2RlCgpkZWYgU19JTU9ERShtb2RlKToKICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBjYW4gYmUgc2V0IGJ5CiAgICBvcy5jaG1vZCgpLgogICAgIiIiCiAgICByZXR1cm4gbW9kZSAmIDBvNzc3NwoKZGVmIFNfSUZNVChtb2RlKToKICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBkZXNjcmliZXMgdGhlCiAgICBmaWxlIHR5cGUuCiAgICAiIiIKICAgIHJldHVybiBtb2RlICYgMG8xNzAwMDAKCiMgQ29uc3RhbnRzIHVzZWQgYXMgU19JRk1UKCkgZm9yIHZhcmlvdXMgZmlsZSB0eXBlcwojIChub3QgYWxsIGFyZSBpbXBsZW1lbnRlZCBvbiBhbGwgc3lzdGVtcykKClNfSUZESVIgID0gMG8wNDAwMDAgICMgZGlyZWN0b3J5ClNfSUZDSFIgID0gMG8wMjAwMDAgICMgY2hhcmFjdGVyIGRldmljZQpTX0lGQkxLICA9IDBvMDYwMDAwICAjIGJsb2NrIGRldmljZQpTX0lGUkVHICA9IDBvMTAwMDAwICAjIHJlZ3VsYXIgZmlsZQpTX0lGSUZPICA9IDBvMDEwMDAwICAjIGZpZm8gKG5hbWVkIHBpcGUpClNfSUZMTksgID0gMG8xMjAwMDAgICMgc3ltYm9saWMgbGluawpTX0lGU09DSyA9IDBvMTQwMDAwICAjIHNvY2tldCBmaWxlCgojIEZ1bmN0aW9ucyB0byB0ZXN0IGZvciBlYWNoIGZpbGUgdHlwZQoKZGVmIFNfSVNESVIobW9kZSk6CiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSBkaXJlY3RvcnkuIiIiCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZESVIKCmRlZiBTX0lTQ0hSKG1vZGUpOgogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgY2hhcmFjdGVyIHNwZWNpYWwgZGV2aWNlIGZpbGUuIiIiCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZDSFIKCmRlZiBTX0lTQkxLKG1vZGUpOgogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgYmxvY2sgc3BlY2lhbCBkZXZpY2UgZmlsZS4iIiIKICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRkJMSwoKZGVmIFNfSVNSRUcobW9kZSk6CiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSByZWd1bGFyIGZpbGUuIiIiCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZSRUcKCmRlZiBTX0lTRklGTyhtb2RlKToKICAgICIiIlJldHVybiBUcnVlIGlmIG1vZGUgaXMgZnJvbSBhIEZJRk8gKG5hbWVkIHBpcGUpLiIiIgogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGSUZPCgpkZWYgU19JU0xOSyhtb2RlKToKICAgICIiIlJldHVybiBUcnVlIGlmIG1vZGUgaXMgZnJvbSBhIHN5bWJvbGljIGxpbmsuIiIiCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZMTksKCmRlZiBTX0lTU09DSyhtb2RlKToKICAgICIiIlJldHVybiBUcnVlIGlmIG1vZGUgaXMgZnJvbSBhIHNvY2tldC4iIiIKICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRlNPQ0sKCiMgTmFtZXMgZm9yIHBlcm1pc3Npb24gYml0cwoKU19JU1VJRCA9IDBvNDAwMCAgIyBzZXQgVUlEIGJpdApTX0lTR0lEID0gMG8yMDAwICAjIHNldCBHSUQgYml0ClNfRU5GTVQgPSBTX0lTR0lEICMgZmlsZSBsb2NraW5nIGVuZm9yY2VtZW50ClNfSVNWVFggPSAwbzEwMDAgICMgc3RpY2t5IGJpdApTX0lSRUFEID0gMG8wNDAwICAjIFVuaXggVjcgc3lub255bSBmb3IgU19JUlVTUgpTX0lXUklURSA9IDBvMDIwMCAjIFVuaXggVjcgc3lub255bSBmb3IgU19JV1VTUgpTX0lFWEVDID0gMG8wMTAwICAjIFVuaXggVjcgc3lub255bSBmb3IgU19JWFVTUgpTX0lSV1hVID0gMG8wNzAwICAjIG1hc2sgZm9yIG93bmVyIHBlcm1pc3Npb25zClNfSVJVU1IgPSAwbzA0MDAgICMgcmVhZCBieSBvd25lcgpTX0lXVVNSID0gMG8wMjAwICAjIHdyaXRlIGJ5IG93bmVyClNfSVhVU1IgPSAwbzAxMDAgICMgZXhlY3V0ZSBieSBvd25lcgpTX0lSV1hHID0gMG8wMDcwICAjIG1hc2sgZm9yIGdyb3VwIHBlcm1pc3Npb25zClNfSVJHUlAgPSAwbzAwNDAgICMgcmVhZCBieSBncm91cApTX0lXR1JQID0gMG8wMDIwICAjIHdyaXRlIGJ5IGdyb3VwClNfSVhHUlAgPSAwbzAwMTAgICMgZXhlY3V0ZSBieSBncm91cApTX0lSV1hPID0gMG8wMDA3ICAjIG1hc2sgZm9yIG90aGVycyAobm90IGluIGdyb3VwKSBwZXJtaXNzaW9ucwpTX0lST1RIID0gMG8wMDA0ICAjIHJlYWQgYnkgb3RoZXJzClNfSVdPVEggPSAwbzAwMDIgICMgd3JpdGUgYnkgb3RoZXJzClNfSVhPVEggPSAwbzAwMDEgICMgZXhlY3V0ZSBieSBvdGhlcnMKCiMgTmFtZXMgZm9yIGZpbGUgZmxhZ3MKClVGX05PRFVNUCAgICA9IDB4MDAwMDAwMDEgICMgZG8gbm90IGR1bXAgZmlsZQpVRl9JTU1VVEFCTEUgPSAweDAwMDAwMDAyICAjIGZpbGUgbWF5IG5vdCBiZSBjaGFuZ2VkClVGX0FQUEVORCAgICA9IDB4MDAwMDAwMDQgICMgZmlsZSBtYXkgb25seSBiZSBhcHBlbmRlZCB0bwpVRl9PUEFRVUUgICAgPSAweDAwMDAwMDA4ICAjIGRpcmVjdG9yeSBpcyBvcGFxdWUgd2hlbiB2aWV3ZWQgdGhyb3VnaCBhIHVuaW9uIHN0YWNrClVGX05PVU5MSU5LICA9IDB4MDAwMDAwMTAgICMgZmlsZSBtYXkgbm90IGJlIHJlbmFtZWQgb3IgZGVsZXRlZApVRl9DT01QUkVTU0VEID0gMHgwMDAwMDAyMCAjIE9TIFg6IGZpbGUgaXMgaGZzLWNvbXByZXNzZWQKVUZfSElEREVOICAgID0gMHgwMDAwODAwMCAgIyBPUyBYOiBmaWxlIHNob3VsZCBub3QgYmUgZGlzcGxheWVkClNGX0FSQ0hJVkVEICA9IDB4MDAwMTAwMDAgICMgZmlsZSBtYXkgYmUgYXJjaGl2ZWQKU0ZfSU1NVVRBQkxFID0gMHgwMDAyMDAwMCAgIyBmaWxlIG1heSBub3QgYmUgY2hhbmdlZApTRl9BUFBFTkQgICAgPSAweDAwMDQwMDAwICAjIGZpbGUgbWF5IG9ubHkgYmUgYXBwZW5kZWQgdG8KU0ZfTk9VTkxJTksgID0gMHgwMDEwMDAwMCAgIyBmaWxlIG1heSBub3QgYmUgcmVuYW1lZCBvciBkZWxldGVkClNGX1NOQVBTSE9UICA9IDB4MDAyMDAwMDAgICMgZmlsZSBpcyBhIHNuYXBzaG90IGZpbGUKCgpfZmlsZW1vZGVfdGFibGUgPSAoCiAgICAoKFNfSUZMTkssICAgICAgICAgImwiKSwKICAgICAoU19JRlJFRywgICAgICAgICAiLSIpLAogICAgIChTX0lGQkxLLCAgICAgICAgICJiIiksCiAgICAgKFNfSUZESVIsICAgICAgICAgImQiKSwKICAgICAoU19JRkNIUiwgICAgICAgICAiYyIpLAogICAgIChTX0lGSUZPLCAgICAgICAgICJwIikpLAoKICAgICgoU19JUlVTUiwgICAgICAgICAiciIpLCksCiAgICAoKFNfSVdVU1IsICAgICAgICAgInciKSwpLAogICAgKChTX0lYVVNSfFNfSVNVSUQsICJzIiksCiAgICAgKFNfSVNVSUQsICAgICAgICAgIlMiKSwKICAgICAoU19JWFVTUiwgICAgICAgICAieCIpKSwKCiAgICAoKFNfSVJHUlAsICAgICAgICAgInIiKSwpLAogICAgKChTX0lXR1JQLCAgICAgICAgICJ3IiksKSwKICAgICgoU19JWEdSUHxTX0lTR0lELCAicyIpLAogICAgIChTX0lTR0lELCAgICAgICAgICJTIiksCiAgICAgKFNfSVhHUlAsICAgICAgICAgIngiKSksCgogICAgKChTX0lST1RILCAgICAgICAgICJyIiksKSwKICAgICgoU19JV09USCwgICAgICAgICAidyIpLCksCiAgICAoKFNfSVhPVEh8U19JU1ZUWCwgInQiKSwKICAgICAoU19JU1ZUWCwgICAgICAgICAiVCIpLAogICAgIChTX0lYT1RILCAgICAgICAgICJ4IikpCikKCmRlZiBmaWxlbW9kZShtb2RlKToKICAgICIiIkNvbnZlcnQgYSBmaWxlJ3MgbW9kZSB0byBhIHN0cmluZyBvZiB0aGUgZm9ybSAnLXJ3eHJ3eHJ3eCcuIiIiCiAgICBwZXJtID0gW10KICAgIGZvciB0YWJsZSBpbiBfZmlsZW1vZGVfdGFibGU6CiAgICAgICAgZm9yIGJpdCwgY2hhciBpbiB0YWJsZToKICAgICAgICAgICAgaWYgbW9kZSAmIGJpdCA9PSBiaXQ6CiAgICAgICAgICAgICAgICBwZXJtLmFwcGVuZChjaGFyKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbHNlOgogICAgICAgICAgICBwZXJtLmFwcGVuZCgiLSIpCiAgICByZXR1cm4gIiIuam9pbihwZXJtKQo=',
'/Lib/string.py':'IyBTb21lIHN0cmluZ3MgZm9yIGN0eXBlLXN0eWxlIGNoYXJhY3RlciBjbGFzc2lmaWNhdGlvbgp3aGl0ZXNwYWNlID0gJyBcdFxuXHJcdlxmJwphc2NpaV9sb3dlcmNhc2UgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonCmFzY2lpX3VwcGVyY2FzZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicKYXNjaWlfbGV0dGVycyA9IGFzY2lpX2xvd2VyY2FzZSArIGFzY2lpX3VwcGVyY2FzZQpkaWdpdHMgPSAnMDEyMzQ1Njc4OScKaGV4ZGlnaXRzID0gZGlnaXRzICsgJ2FiY2RlZicgKyAnQUJDREVGJwpvY3RkaWdpdHMgPSAnMDEyMzQ1NjcnCnB1bmN0dWF0aW9uID0gIiIiISIjJCUmJygpKissLS4vOjs8PT4/QFtcXV5fYHt8fX4iIiIKcHJpbnRhYmxlID0gZGlnaXRzICsgYXNjaWlfbGV0dGVycyArIHB1bmN0dWF0aW9uICsgd2hpdGVzcGFjZQoKIyBGdW5jdGlvbnMgd2hpY2ggYXJlbid0IGF2YWlsYWJsZSBhcyBzdHJpbmcgbWV0aG9kcy4KCiMgQ2FwaXRhbGl6ZSB0aGUgd29yZHMgaW4gYSBzdHJpbmcsIGUuZy4gIiBhQmMgIGRFZiAiIC0+ICJBYmMgRGVmIi4KZGVmIGNhcHdvcmRzKHMsIHNlcD1Ob25lKToKICAgICIiImNhcHdvcmRzKHMgWyxzZXBdKSAtPiBzdHJpbmcKCiAgICBTcGxpdCB0aGUgYXJndW1lbnQgaW50byB3b3JkcyB1c2luZyBzcGxpdCwgY2FwaXRhbGl6ZSBlYWNoCiAgICB3b3JkIHVzaW5nIGNhcGl0YWxpemUsIGFuZCBqb2luIHRoZSBjYXBpdGFsaXplZCB3b3JkcyB1c2luZwogICAgam9pbi4gIElmIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgc2VwIGlzIGFic2VudCBvciBOb25lLAogICAgcnVucyBvZiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgYXJlIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIHNwYWNlCiAgICBhbmQgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcmUgcmVtb3ZlZCwgb3RoZXJ3aXNlCiAgICBzZXAgaXMgdXNlZCB0byBzcGxpdCBhbmQgam9pbiB0aGUgd29yZHMuCgogICAgIiIiCiAgICByZXR1cm4gKHNlcCBvciAnICcpLmpvaW4oeC5jYXBpdGFsaXplKCkgZm9yIHggaW4gcy5zcGxpdChzZXApKQo=',
'/Lib/struct.py':'X19hbGxfXyA9IFsKICAgICMgRnVuY3Rpb25zCiAgICAnY2FsY3NpemUnLCAncGFjaycsICdwYWNrX2ludG8nLCAndW5wYWNrJywgJ3VucGFja19mcm9tJywKCiAgICAjIENsYXNzZXMKICAgICdTdHJ1Y3QnLAoKICAgICMgRXhjZXB0aW9ucwogICAgJ2Vycm9yJwogICAgXQoKZnJvbSBfc3RydWN0IGltcG9ydCAqCmZyb20gX3N0cnVjdCBpbXBvcnQgX2NsZWFyY2FjaGUKZnJvbSBfc3RydWN0IGltcG9ydCBfX2RvY19fCg==',
'/Lib/subprocess.py':'',
'/Lib/sys.py':'IyBoYWNrIHRvIHJldHVybiBzcGVjaWFsIGF0dHJpYnV0ZXMKZnJvbSBfc3lzIGltcG9ydCAqCgpmcm9tIGJyb3dzZXIgaW1wb3J0IGRvYwpfX3N0ZG91dF9fPWdldGF0dHIoZG9jLCIkc3Rkb3V0IikKX19zdGRlcnJfXz1nZXRhdHRyKGRvYywiJHN0ZGVyciIpCgpzdGRvdXQgPSBnZXRhdHRyKGRvYywiJHN0ZG91dCIpCnN0ZGVyciA9IGdldGF0dHIoZG9jLCIkc3RkZXJyIikKCgpoYXNfbG9jYWxfc3RvcmFnZT1fX0JSWVRIT05fXy5oYXNfbG9jYWxfc3RvcmFnZQpoYXNfanNvbj1fX0JSWVRIT05fXy5oYXNfanNvbgoKYXJndiA9IFsnX19tYWluX18nXQoKYmFzZV9leGVjX3ByZWZpeCA9IF9fQlJZVEhPTl9fLmJyeXRob25fcGF0aAoKYmFzZV9wcmVmaXggPSBfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgKCmJ1aWx0aW5fbW9kdWxlX25hbWVzPV9fQlJZVEhPTl9fLmJ1aWx0aW5fbW9kdWxlX25hbWVzCgpieXRlb3JkZXI9J2xpdHRsZScKCmV4ZWNfcHJlZml4ID0gX19CUllUSE9OX18uYnJ5dGhvbl9wYXRoCgpleGVjdXRhYmxlID0gX19CUllUSE9OX18uYnJ5dGhvbl9wYXRoKycvYnJ5dGhvbi5qcycKCmRlZiBleGl0KGk9Tm9uZSk6CiAgICByYWlzZSBTeXN0ZW1FeGl0KCcnKQoKY2xhc3MgZmxhZ19jbGFzczoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIHNlbGYuZGVidWc9MAogICAgICBzZWxmLmluc3BlY3Q9MAogICAgICBzZWxmLmludGVyYWN0aXZlPTAKICAgICAgc2VsZi5vcHRpbWl6ZT0wCiAgICAgIHNlbGYuZG9udF93cml0ZV9ieXRlY29kZT0wCiAgICAgIHNlbGYubm9fdXNlcl9zaXRlPTAKICAgICAgc2VsZi5ub19zaXRlPTAKICAgICAgc2VsZi5pZ25vcmVfZW52aXJvbm1lbnQ9MAogICAgICBzZWxmLnZlcmJvc2U9MAogICAgICBzZWxmLmJ5dGVzX3dhcm5pbmc9MAogICAgICBzZWxmLnF1aWV0PTAKICAgICAgc2VsZi5oYXNoX3JhbmRvbWl6YXRpb249MQoKZmxhZ3M9ZmxhZ19jbGFzcygpCgpkZWYgZ2V0ZmlsZXN5c3RlbWVuY29kaW5nKCphcmdzLCoqa3cpOgogICAgIiIiZ2V0ZmlsZXN5c3RlbWVuY29kaW5nKCkgLT4gc3RyaW5nICAgIAogICAgUmV0dXJuIHRoZSBlbmNvZGluZyB1c2VkIHRvIGNvbnZlcnQgVW5pY29kZSBmaWxlbmFtZXMgaW4KICAgIG9wZXJhdGluZyBzeXN0ZW0gZmlsZW5hbWVzLiIiIgogICAgcmV0dXJuICd1dGYtOCcKICAgIAptYXhzaXplPTkwMDcxOTkyNTQ3NDA5OTIgICAjbGFyZ2VzdCBpbnRlZ2VyLi4KCm1heGludD05MDA3MTk5MjU0NzQwOTkyICAgI2xhcmdlc3QgaW50ZWdlci4uCgptYXh1bmljb2RlPTExMTQxMTEKCnBhdGggPSBfX0JSWVRIT05fXy5wYXRoCgpwYXRoX2hvb2tzID0gbGlzdChKU09iamVjdChfX0JSWVRIT05fXy5wYXRoX2hvb2tzKSkKCnBsYXRmb3JtPSJicnl0aG9uIgoKcHJlZml4ID0gX19CUllUSE9OX18uYnJ5dGhvbl9wYXRoCgp2ZXJzaW9uID0gJy4nLmpvaW4oc3RyKHgpIGZvciB4IGluIF9fQlJZVEhPTl9fLnZlcnNpb25faW5mbykKCgpjbGFzcyBfX3ZlcnNpb25faW5mbyhvYmplY3QpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHZlcnNpb25faW5mbyk6CiAgICAgICAgc2VsZi52ZXJzaW9uX2luZm8gPSB2ZXJzaW9uX2luZm8KICAgICAgICBzZWxmLm1ham9yID0gdmVyc2lvbl9pbmZvWzBdCiAgICAgICAgc2VsZi5taW5vciA9IHZlcnNpb25faW5mb1sxXQogICAgICAgIHNlbGYubWljcm8gPSB2ZXJzaW9uX2luZm9bMl0KICAgICAgICBzZWxmLnJlbGVhc2VsZXZlbCA9IHZlcnNpb25faW5mb1szXQogICAgICAgIHNlbGYuc2VyaWFsID0gdmVyc2lvbl9pbmZvWzRdCgogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGluZGV4KToKICAgICAgICByZXR1cm4gc2VsZi52ZXJzaW9uX2luZm9baW5kZXhdCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHN0cihzZWxmLnZlcnNpb25faW5mbykKICAgICAKdmVyc2lvbl9pbmZvPV9fdmVyc2lvbl9pbmZvKF9fQlJZVEhPTl9fLnZlcnNpb25faW5mbykKCndhcm5vcHRpb25zPVtdCgo=',
'/Lib/sysconfig.py':'IiIiQWNjZXNzIHRvIFB5dGhvbidzIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uIiIiCgppbXBvcnQgb3MKaW1wb3J0IHJlCmltcG9ydCBzeXMKZnJvbSBvcy5wYXRoIGltcG9ydCBwYXJkaXIsIHJlYWxwYXRoCgpfX2FsbF9fID0gWwogICAgJ2dldF9jb25maWdfaF9maWxlbmFtZScsCiAgICAnZ2V0X2NvbmZpZ192YXInLAogICAgJ2dldF9jb25maWdfdmFycycsCiAgICAnZ2V0X21ha2VmaWxlX2ZpbGVuYW1lJywKICAgICdnZXRfcGF0aCcsCiAgICAnZ2V0X3BhdGhfbmFtZXMnLAogICAgJ2dldF9wYXRocycsCiAgICAnZ2V0X3BsYXRmb3JtJywKICAgICdnZXRfcHl0aG9uX3ZlcnNpb24nLAogICAgJ2dldF9zY2hlbWVfbmFtZXMnLAogICAgJ3BhcnNlX2NvbmZpZ19oJywKXQoKX0lOU1RBTExfU0NIRU1FUyA9IHsKICAgICdwb3NpeF9wcmVmaXgnOiB7CiAgICAgICAgJ3N0ZGxpYic6ICd7aW5zdGFsbGVkX2Jhc2V9L2xpYi9weXRob257cHlfdmVyc2lvbl9zaG9ydH0nLAogICAgICAgICdwbGF0c3RkbGliJzogJ3twbGF0YmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fScsCiAgICAgICAgJ3B1cmVsaWInOiAne2Jhc2V9L2xpYi9weXRob257cHlfdmVyc2lvbl9zaG9ydH0vc2l0ZS1wYWNrYWdlcycsCiAgICAgICAgJ3BsYXRsaWInOiAne3BsYXRiYXNlfS9saWIvcHl0aG9ue3B5X3ZlcnNpb25fc2hvcnR9L3NpdGUtcGFja2FnZXMnLAogICAgICAgICdpbmNsdWRlJzoKICAgICAgICAgICAgJ3tpbnN0YWxsZWRfYmFzZX0vaW5jbHVkZS9weXRob257cHlfdmVyc2lvbl9zaG9ydH17YWJpZmxhZ3N9JywKICAgICAgICAncGxhdGluY2x1ZGUnOgogICAgICAgICAgICAne2luc3RhbGxlZF9wbGF0YmFzZX0vaW5jbHVkZS9weXRob257cHlfdmVyc2lvbl9zaG9ydH17YWJpZmxhZ3N9JywKICAgICAgICAnc2NyaXB0cyc6ICd7YmFzZX0vYmluJywKICAgICAgICAnZGF0YSc6ICd7YmFzZX0nLAogICAgICAgIH0sCiAgICAncG9zaXhfaG9tZSc6IHsKICAgICAgICAnc3RkbGliJzogJ3tpbnN0YWxsZWRfYmFzZX0vbGliL3B5dGhvbicsCiAgICAgICAgJ3BsYXRzdGRsaWInOiAne2Jhc2V9L2xpYi9weXRob24nLAogICAgICAgICdwdXJlbGliJzogJ3tiYXNlfS9saWIvcHl0aG9uJywKICAgICAgICAncGxhdGxpYic6ICd7YmFzZX0vbGliL3B5dGhvbicsCiAgICAgICAgJ2luY2x1ZGUnOiAne2luc3RhbGxlZF9iYXNlfS9pbmNsdWRlL3B5dGhvbicsCiAgICAgICAgJ3BsYXRpbmNsdWRlJzogJ3tpbnN0YWxsZWRfYmFzZX0vaW5jbHVkZS9weXRob24nLAogICAgICAgICdzY3JpcHRzJzogJ3tiYXNlfS9iaW4nLAogICAgICAgICdkYXRhJzogJ3tiYXNlfScsCiAgICAgICAgfSwKICAgICdudCc6IHsKICAgICAgICAnc3RkbGliJzogJ3tpbnN0YWxsZWRfYmFzZX0vTGliJywKICAgICAgICAncGxhdHN0ZGxpYic6ICd7YmFzZX0vTGliJywKICAgICAgICAncHVyZWxpYic6ICd7YmFzZX0vTGliL3NpdGUtcGFja2FnZXMnLAogICAgICAgICdwbGF0bGliJzogJ3tiYXNlfS9MaWIvc2l0ZS1wYWNrYWdlcycsCiAgICAgICAgJ2luY2x1ZGUnOiAne2luc3RhbGxlZF9iYXNlfS9JbmNsdWRlJywKICAgICAgICAncGxhdGluY2x1ZGUnOiAne2luc3RhbGxlZF9iYXNlfS9JbmNsdWRlJywKICAgICAgICAnc2NyaXB0cyc6ICd7YmFzZX0vU2NyaXB0cycsCiAgICAgICAgJ2RhdGEnOiAne2Jhc2V9JywKICAgICAgICB9LAogICAgJ29zMic6IHsKICAgICAgICAnc3RkbGliJzogJ3tpbnN0YWxsZWRfYmFzZX0vTGliJywKICAgICAgICAncGxhdHN0ZGxpYic6ICd7YmFzZX0vTGliJywKICAgICAgICAncHVyZWxpYic6ICd7YmFzZX0vTGliL3NpdGUtcGFja2FnZXMnLAogICAgICAgICdwbGF0bGliJzogJ3tiYXNlfS9MaWIvc2l0ZS1wYWNrYWdlcycsCiAgICAgICAgJ2luY2x1ZGUnOiAne2luc3RhbGxlZF9iYXNlfS9JbmNsdWRlJywKICAgICAgICAncGxhdGluY2x1ZGUnOiAne2luc3RhbGxlZF9iYXNlfS9JbmNsdWRlJywKICAgICAgICAnc2NyaXB0cyc6ICd7YmFzZX0vU2NyaXB0cycsCiAgICAgICAgJ2RhdGEnOiAne2Jhc2V9JywKICAgICAgICB9LAogICAgJ29zMl9ob21lJzogewogICAgICAgICdzdGRsaWInOiAne3VzZXJiYXNlfS9saWIvcHl0aG9ue3B5X3ZlcnNpb25fc2hvcnR9JywKICAgICAgICAncGxhdHN0ZGxpYic6ICd7dXNlcmJhc2V9L2xpYi9weXRob257cHlfdmVyc2lvbl9zaG9ydH0nLAogICAgICAgICdwdXJlbGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fS9zaXRlLXBhY2thZ2VzJywKICAgICAgICAncGxhdGxpYic6ICd7dXNlcmJhc2V9L2xpYi9weXRob257cHlfdmVyc2lvbl9zaG9ydH0vc2l0ZS1wYWNrYWdlcycsCiAgICAgICAgJ2luY2x1ZGUnOiAne3VzZXJiYXNlfS9pbmNsdWRlL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fScsCiAgICAgICAgJ3NjcmlwdHMnOiAne3VzZXJiYXNlfS9iaW4nLAogICAgICAgICdkYXRhJzogJ3t1c2VyYmFzZX0nLAogICAgICAgIH0sCiAgICAnbnRfdXNlcic6IHsKICAgICAgICAnc3RkbGliJzogJ3t1c2VyYmFzZX0vUHl0aG9ue3B5X3ZlcnNpb25fbm9kb3R9JywKICAgICAgICAncGxhdHN0ZGxpYic6ICd7dXNlcmJhc2V9L1B5dGhvbntweV92ZXJzaW9uX25vZG90fScsCiAgICAgICAgJ3B1cmVsaWInOiAne3VzZXJiYXNlfS9QeXRob257cHlfdmVyc2lvbl9ub2RvdH0vc2l0ZS1wYWNrYWdlcycsCiAgICAgICAgJ3BsYXRsaWInOiAne3VzZXJiYXNlfS9QeXRob257cHlfdmVyc2lvbl9ub2RvdH0vc2l0ZS1wYWNrYWdlcycsCiAgICAgICAgJ2luY2x1ZGUnOiAne3VzZXJiYXNlfS9QeXRob257cHlfdmVyc2lvbl9ub2RvdH0vSW5jbHVkZScsCiAgICAgICAgJ3NjcmlwdHMnOiAne3VzZXJiYXNlfS9TY3JpcHRzJywKICAgICAgICAnZGF0YSc6ICd7dXNlcmJhc2V9JywKICAgICAgICB9LAogICAgJ3Bvc2l4X3VzZXInOiB7CiAgICAgICAgJ3N0ZGxpYic6ICd7dXNlcmJhc2V9L2xpYi9weXRob257cHlfdmVyc2lvbl9zaG9ydH0nLAogICAgICAgICdwbGF0c3RkbGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fScsCiAgICAgICAgJ3B1cmVsaWInOiAne3VzZXJiYXNlfS9saWIvcHl0aG9ue3B5X3ZlcnNpb25fc2hvcnR9L3NpdGUtcGFja2FnZXMnLAogICAgICAgICdwbGF0bGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbntweV92ZXJzaW9uX3Nob3J0fS9zaXRlLXBhY2thZ2VzJywKICAgICAgICAnaW5jbHVkZSc6ICd7dXNlcmJhc2V9L2luY2x1ZGUvcHl0aG9ue3B5X3ZlcnNpb25fc2hvcnR9JywKICAgICAgICAnc2NyaXB0cyc6ICd7dXNlcmJhc2V9L2JpbicsCiAgICAgICAgJ2RhdGEnOiAne3VzZXJiYXNlfScsCiAgICAgICAgfSwKICAgICdvc3hfZnJhbWV3b3JrX3VzZXInOiB7CiAgICAgICAgJ3N0ZGxpYic6ICd7dXNlcmJhc2V9L2xpYi9weXRob24nLAogICAgICAgICdwbGF0c3RkbGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbicsCiAgICAgICAgJ3B1cmVsaWInOiAne3VzZXJiYXNlfS9saWIvcHl0aG9uL3NpdGUtcGFja2FnZXMnLAogICAgICAgICdwbGF0bGliJzogJ3t1c2VyYmFzZX0vbGliL3B5dGhvbi9zaXRlLXBhY2thZ2VzJywKICAgICAgICAnaW5jbHVkZSc6ICd7dXNlcmJhc2V9L2luY2x1ZGUnLAogICAgICAgICdzY3JpcHRzJzogJ3t1c2VyYmFzZX0vYmluJywKICAgICAgICAnZGF0YSc6ICd7dXNlcmJhc2V9JywKICAgICAgICB9LAogICAgfQoKX1NDSEVNRV9LRVlTID0gKCdzdGRsaWInLCAncGxhdHN0ZGxpYicsICdwdXJlbGliJywgJ3BsYXRsaWInLCAnaW5jbHVkZScsCiAgICAgICAgICAgICAgICAnc2NyaXB0cycsICdkYXRhJykKCiAjIEZJWE1FIGRvbid0IHJlbHkgb24gc3lzLnZlcnNpb24gaGVyZSwgaXRzIGZvcm1hdCBpcyBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwKICMgb2YgQ1B5dGhvbiwgdXNlIHN5cy52ZXJzaW9uX2luZm8gb3Igc3lzLmhleHZlcnNpb24KX1BZX1ZFUlNJT04gPSBzeXMudmVyc2lvbi5zcGxpdCgpWzBdCl9QWV9WRVJTSU9OX1NIT1JUID0gc3lzLnZlcnNpb25bOjNdCl9QWV9WRVJTSU9OX1NIT1JUX05PX0RPVCA9IF9QWV9WRVJTSU9OWzBdICsgX1BZX1ZFUlNJT05bMl0KX1BSRUZJWCA9IG9zLnBhdGgubm9ybXBhdGgoc3lzLnByZWZpeCkKX0JBU0VfUFJFRklYID0gb3MucGF0aC5ub3JtcGF0aChzeXMuYmFzZV9wcmVmaXgpCl9FWEVDX1BSRUZJWCA9IG9zLnBhdGgubm9ybXBhdGgoc3lzLmV4ZWNfcHJlZml4KQpfQkFTRV9FWEVDX1BSRUZJWCA9IG9zLnBhdGgubm9ybXBhdGgoc3lzLmJhc2VfZXhlY19wcmVmaXgpCl9DT05GSUdfVkFSUyA9IE5vbmUKX1VTRVJfQkFTRSA9IE5vbmUKCgpkZWYgX3NhZmVfcmVhbHBhdGgocGF0aCk6CiAgICB0cnk6CiAgICAgICAgcmV0dXJuIHJlYWxwYXRoKHBhdGgpCiAgICBleGNlcHQgT1NFcnJvcjoKICAgICAgICByZXR1cm4gcGF0aAoKaWYgc3lzLmV4ZWN1dGFibGU6CiAgICBfUFJPSkVDVF9CQVNFID0gb3MucGF0aC5kaXJuYW1lKF9zYWZlX3JlYWxwYXRoKHN5cy5leGVjdXRhYmxlKSkKZWxzZToKICAgICMgc3lzLmV4ZWN1dGFibGUgY2FuIGJlIGVtcHR5IGlmIGFyZ3ZbMF0gaGFzIGJlZW4gY2hhbmdlZCBhbmQgUHl0aG9uIGlzCiAgICAjIHVuYWJsZSB0byByZXRyaWV2ZSB0aGUgcmVhbCBwcm9ncmFtIG5hbWUKICAgIF9QUk9KRUNUX0JBU0UgPSBfc2FmZV9yZWFscGF0aChvcy5nZXRjd2QoKSkKCmlmIG9zLm5hbWUgPT0gIm50IiBhbmQgInBjYnVpbGQiIGluIF9QUk9KRUNUX0JBU0VbLTg6XS5sb3dlcigpOgogICAgX1BST0pFQ1RfQkFTRSA9IF9zYWZlX3JlYWxwYXRoKG9zLnBhdGguam9pbihfUFJPSkVDVF9CQVNFLCBwYXJkaXIpKQojIFBDL1ZTNy4xCmlmIG9zLm5hbWUgPT0gIm50IiBhbmQgIlxccGNcXHYiIGluIF9QUk9KRUNUX0JBU0VbLTEwOl0ubG93ZXIoKToKICAgIF9QUk9KRUNUX0JBU0UgPSBfc2FmZV9yZWFscGF0aChvcy5wYXRoLmpvaW4oX1BST0pFQ1RfQkFTRSwgcGFyZGlyLCBwYXJkaXIpKQojIFBDL0FNRDY0CmlmIG9zLm5hbWUgPT0gIm50IiBhbmQgIlxccGNidWlsZFxcYW1kNjQiIGluIF9QUk9KRUNUX0JBU0VbLTE0Ol0ubG93ZXIoKToKICAgIF9QUk9KRUNUX0JBU0UgPSBfc2FmZV9yZWFscGF0aChvcy5wYXRoLmpvaW4oX1BST0pFQ1RfQkFTRSwgcGFyZGlyLCBwYXJkaXIpKQoKIyBzZXQgZm9yIGNyb3NzIGJ1aWxkcwppZiAiX1BZVEhPTl9QUk9KRUNUX0JBU0UiIGluIG9zLmVudmlyb246CiAgICBfUFJPSkVDVF9CQVNFID0gX3NhZmVfcmVhbHBhdGgob3MuZW52aXJvblsiX1BZVEhPTl9QUk9KRUNUX0JBU0UiXSkKCmRlZiBfaXNfcHl0aG9uX3NvdXJjZV9kaXIoZCk6CiAgICBmb3IgZm4gaW4gKCJTZXR1cC5kaXN0IiwgIlNldHVwLmxvY2FsIik6CiAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUob3MucGF0aC5qb2luKGQsICJNb2R1bGVzIiwgZm4pKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKX3N5c19ob21lID0gZ2V0YXR0cihzeXMsICdfaG9tZScsIE5vbmUpCmlmIF9zeXNfaG9tZSBhbmQgb3MubmFtZSA9PSAnbnQnIGFuZCBcCiAgICBfc3lzX2hvbWUubG93ZXIoKS5lbmRzd2l0aCgoJ3BjYnVpbGQnLCAncGNidWlsZFxcYW1kNjQnKSk6CiAgICBfc3lzX2hvbWUgPSBvcy5wYXRoLmRpcm5hbWUoX3N5c19ob21lKQogICAgaWYgX3N5c19ob21lLmVuZHN3aXRoKCdwY2J1aWxkJyk6ICAgIyBtdXN0IGJlIGFtZDY0CiAgICAgICAgX3N5c19ob21lID0gb3MucGF0aC5kaXJuYW1lKF9zeXNfaG9tZSkKZGVmIGlzX3B5dGhvbl9idWlsZChjaGVja19ob21lPUZhbHNlKToKICAgIGlmIGNoZWNrX2hvbWUgYW5kIF9zeXNfaG9tZToKICAgICAgICByZXR1cm4gX2lzX3B5dGhvbl9zb3VyY2VfZGlyKF9zeXNfaG9tZSkKICAgIHJldHVybiBfaXNfcHl0aG9uX3NvdXJjZV9kaXIoX1BST0pFQ1RfQkFTRSkKCl9QWVRIT05fQlVJTEQgPSBpc19weXRob25fYnVpbGQoVHJ1ZSkKCmlmIF9QWVRIT05fQlVJTEQ6CiAgICBmb3Igc2NoZW1lIGluICgncG9zaXhfcHJlZml4JywgJ3Bvc2l4X2hvbWUnKToKICAgICAgICBfSU5TVEFMTF9TQ0hFTUVTW3NjaGVtZV1bJ2luY2x1ZGUnXSA9ICd7c3JjZGlyfS9JbmNsdWRlJwogICAgICAgIF9JTlNUQUxMX1NDSEVNRVNbc2NoZW1lXVsncGxhdGluY2x1ZGUnXSA9ICd7cHJvamVjdGJhc2V9Ly4nCgoKZGVmIF9zdWJzdF92YXJzKHMsIGxvY2FsX3ZhcnMpOgogICAgdHJ5OgogICAgICAgIHJldHVybiBzLmZvcm1hdCgqKmxvY2FsX3ZhcnMpCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gcy5mb3JtYXQoKipvcy5lbnZpcm9uKQogICAgICAgIGV4Y2VwdCBLZXlFcnJvciBhcyB2YXI6CiAgICAgICAgICAgIHJhaXNlIEF0dHJpYnV0ZUVycm9yKCd7JXN9JyAlIHZhcikKCmRlZiBfZXh0ZW5kX2RpY3QodGFyZ2V0X2RpY3QsIG90aGVyX2RpY3QpOgogICAgdGFyZ2V0X2tleXMgPSB0YXJnZXRfZGljdC5rZXlzKCkKICAgIGZvciBrZXksIHZhbHVlIGluIG90aGVyX2RpY3QuaXRlbXMoKToKICAgICAgICBpZiBrZXkgaW4gdGFyZ2V0X2tleXM6CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgdGFyZ2V0X2RpY3Rba2V5XSA9IHZhbHVlCgoKZGVmIF9leHBhbmRfdmFycyhzY2hlbWUsIHZhcnMpOgogICAgcmVzID0ge30KICAgIGlmIHZhcnMgaXMgTm9uZToKICAgICAgICB2YXJzID0ge30KICAgIF9leHRlbmRfZGljdCh2YXJzLCBnZXRfY29uZmlnX3ZhcnMoKSkKCiAgICBmb3Iga2V5LCB2YWx1ZSBpbiBfSU5TVEFMTF9TQ0hFTUVTW3NjaGVtZV0uaXRlbXMoKToKICAgICAgICBpZiBvcy5uYW1lIGluICgncG9zaXgnLCAnbnQnKToKICAgICAgICAgICAgdmFsdWUgPSBvcy5wYXRoLmV4cGFuZHVzZXIodmFsdWUpCiAgICAgICAgcmVzW2tleV0gPSBvcy5wYXRoLm5vcm1wYXRoKF9zdWJzdF92YXJzKHZhbHVlLCB2YXJzKSkKICAgIHJldHVybiByZXMKCgpkZWYgX2dldF9kZWZhdWx0X3NjaGVtZSgpOgogICAgaWYgb3MubmFtZSA9PSAncG9zaXgnOgogICAgICAgICMgdGhlIGRlZmF1bHQgc2NoZW1lIGZvciBwb3NpeCBpcyBwb3NpeF9wcmVmaXgKICAgICAgICByZXR1cm4gJ3Bvc2l4X3ByZWZpeCcKICAgIHJldHVybiBvcy5uYW1lCgoKZGVmIF9nZXR1c2VyYmFzZSgpOgogICAgZW52X2Jhc2UgPSBvcy5lbnZpcm9uLmdldCgiUFlUSE9OVVNFUkJBU0UiLCBOb25lKQoKICAgIGRlZiBqb2ludXNlcigqYXJncyk6CiAgICAgICAgcmV0dXJuIG9zLnBhdGguZXhwYW5kdXNlcihvcy5wYXRoLmpvaW4oKmFyZ3MpKQoKICAgICMgd2hhdCBhYm91dCAnb3MyZW14JywgJ3Jpc2NvcycgPwogICAgaWYgb3MubmFtZSA9PSAibnQiOgogICAgICAgIGJhc2UgPSBvcy5lbnZpcm9uLmdldCgiQVBQREFUQSIpIG9yICJ+IgogICAgICAgIGlmIGVudl9iYXNlOgogICAgICAgICAgICByZXR1cm4gZW52X2Jhc2UKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gam9pbnVzZXIoYmFzZSwgIlB5dGhvbiIpCgogICAgaWYgc3lzLnBsYXRmb3JtID09ICJkYXJ3aW4iOgogICAgICAgIGZyYW1ld29yayA9IGdldF9jb25maWdfdmFyKCJQWVRIT05GUkFNRVdPUksiKQogICAgICAgIGlmIGZyYW1ld29yazoKICAgICAgICAgICAgaWYgZW52X2Jhc2U6CiAgICAgICAgICAgICAgICByZXR1cm4gZW52X2Jhc2UKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJldHVybiBqb2ludXNlcigifiIsICJMaWJyYXJ5IiwgZnJhbWV3b3JrLCAiJWQuJWQiICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeXMudmVyc2lvbl9pbmZvWzoyXSkKCiAgICBpZiBlbnZfYmFzZToKICAgICAgICByZXR1cm4gZW52X2Jhc2UKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIGpvaW51c2VyKCJ+IiwgIi5sb2NhbCIpCgoKZGVmIF9wYXJzZV9tYWtlZmlsZShmaWxlbmFtZSwgdmFycz1Ob25lKToKICAgICIiIlBhcnNlIGEgTWFrZWZpbGUtc3R5bGUgZmlsZS4KCiAgICBBIGRpY3Rpb25hcnkgY29udGFpbmluZyBuYW1lL3ZhbHVlIHBhaXJzIGlzIHJldHVybmVkLiAgSWYgYW4KICAgIG9wdGlvbmFsIGRpY3Rpb25hcnkgaXMgcGFzc2VkIGluIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGl0IGlzCiAgICB1c2VkIGluc3RlYWQgb2YgYSBuZXcgZGljdGlvbmFyeS4KICAgICIiIgogICAgIyBSZWdleGVzIG5lZWRlZCBmb3IgcGFyc2luZyBNYWtlZmlsZSAoYW5kIHNpbWlsYXIgc3ludGF4ZXMsCiAgICAjIGxpa2Ugb2xkLXN0eWxlIFNldHVwIGZpbGVzKS4KICAgIF92YXJpYWJsZV9yeCA9IHJlLmNvbXBpbGUoIihbYS16QS1aXVthLXpBLVowLTlfXSspXHMqPVxzKiguKikiKQogICAgX2ZpbmR2YXIxX3J4ID0gcmUuY29tcGlsZShyIlwkXCgoW0EtWmEtel1bQS1aYS16MC05X10qKVwpIikKICAgIF9maW5kdmFyMl9yeCA9IHJlLmNvbXBpbGUociJcJHsoW0EtWmEtel1bQS1aYS16MC05X10qKX0iKQoKICAgIGlmIHZhcnMgaXMgTm9uZToKICAgICAgICB2YXJzID0ge30KICAgIGRvbmUgPSB7fQogICAgbm90ZG9uZSA9IHt9CgogICAgd2l0aCBvcGVuKGZpbGVuYW1lLCBlcnJvcnM9InN1cnJvZ2F0ZWVzY2FwZSIpIGFzIGY6CiAgICAgICAgbGluZXMgPSBmLnJlYWRsaW5lcygpCgogICAgZm9yIGxpbmUgaW4gbGluZXM6CiAgICAgICAgaWYgbGluZS5zdGFydHN3aXRoKCcjJykgb3IgbGluZS5zdHJpcCgpID09ICcnOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIG0gPSBfdmFyaWFibGVfcngubWF0Y2gobGluZSkKICAgICAgICBpZiBtOgogICAgICAgICAgICBuLCB2ID0gbS5ncm91cCgxLCAyKQogICAgICAgICAgICB2ID0gdi5zdHJpcCgpCiAgICAgICAgICAgICMgYCQkJyBpcyBhIGxpdGVyYWwgYCQnIGluIG1ha2UKICAgICAgICAgICAgdG1wdiA9IHYucmVwbGFjZSgnJCQnLCAnJykKCiAgICAgICAgICAgIGlmICIkIiBpbiB0bXB2OgogICAgICAgICAgICAgICAgbm90ZG9uZVtuXSA9IHYKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB2ID0gaW50KHYpCiAgICAgICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgICAgICAjIGluc2VydCBsaXRlcmFsIGAkJwogICAgICAgICAgICAgICAgICAgIGRvbmVbbl0gPSB2LnJlcGxhY2UoJyQkJywgJyQnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBkb25lW25dID0gdgoKICAgICMgZG8gdmFyaWFibGUgaW50ZXJwb2xhdGlvbiBoZXJlCiAgICB2YXJpYWJsZXMgPSBsaXN0KG5vdGRvbmUua2V5cygpKQoKICAgICMgVmFyaWFibGVzIHdpdGggYSAnUFlfJyBwcmVmaXggaW4gdGhlIG1ha2VmaWxlLiBUaGVzZSBuZWVkIHRvCiAgICAjIGJlIG1hZGUgYXZhaWxhYmxlIHdpdGhvdXQgdGhhdCBwcmVmaXggdGhyb3VnaCBzeXNjb25maWcuCiAgICAjIFNwZWNpYWwgY2FyZSBpcyBuZWVkZWQgdG8gZW5zdXJlIHRoYXQgdmFyaWFibGUgZXhwYW5zaW9uIHdvcmtzLCBldmVuCiAgICAjIGlmIHRoZSBleHBhbnNpb24gdXNlcyB0aGUgbmFtZSB3aXRob3V0IGEgcHJlZml4LgogICAgcmVuYW1lZF92YXJpYWJsZXMgPSAoJ0NGTEFHUycsICdMREZMQUdTJywgJ0NQUEZMQUdTJykKCiAgICB3aGlsZSBsZW4odmFyaWFibGVzKSA+IDA6CiAgICAgICAgZm9yIG5hbWUgaW4gdHVwbGUodmFyaWFibGVzKToKICAgICAgICAgICAgdmFsdWUgPSBub3Rkb25lW25hbWVdCiAgICAgICAgICAgIG0gPSBfZmluZHZhcjFfcnguc2VhcmNoKHZhbHVlKSBvciBfZmluZHZhcjJfcnguc2VhcmNoKHZhbHVlKQogICAgICAgICAgICBpZiBtIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgbiA9IG0uZ3JvdXAoMSkKICAgICAgICAgICAgICAgIGZvdW5kID0gVHJ1ZQogICAgICAgICAgICAgICAgaWYgbiBpbiBkb25lOgogICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBzdHIoZG9uZVtuXSkKICAgICAgICAgICAgICAgIGVsaWYgbiBpbiBub3Rkb25lOgogICAgICAgICAgICAgICAgICAgICMgZ2V0IGl0IG9uIGEgc3Vic2VxdWVudCByb3VuZAogICAgICAgICAgICAgICAgICAgIGZvdW5kID0gRmFsc2UKICAgICAgICAgICAgICAgIGVsaWYgbiBpbiBvcy5lbnZpcm9uOgogICAgICAgICAgICAgICAgICAgICMgZG8gaXQgbGlrZSBtYWtlOiBmYWxsIGJhY2sgdG8gZW52aXJvbm1lbnQKICAgICAgICAgICAgICAgICAgICBpdGVtID0gb3MuZW52aXJvbltuXQoKICAgICAgICAgICAgICAgIGVsaWYgbiBpbiByZW5hbWVkX3ZhcmlhYmxlczoKICAgICAgICAgICAgICAgICAgICBpZiAobmFtZS5zdGFydHN3aXRoKCdQWV8nKSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVszOl0gaW4gcmVuYW1lZF92YXJpYWJsZXMpOgogICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gIiIKCiAgICAgICAgICAgICAgICAgICAgZWxpZiAnUFlfJyArIG4gaW4gbm90ZG9uZToKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmQgPSBGYWxzZQoKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gc3RyKGRvbmVbJ1BZXycgKyBuXSkKCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGRvbmVbbl0gPSBpdGVtID0gIiIKCiAgICAgICAgICAgICAgICBpZiBmb3VuZDoKICAgICAgICAgICAgICAgICAgICBhZnRlciA9IHZhbHVlW20uZW5kKCk6XQogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVbOm0uc3RhcnQoKV0gKyBpdGVtICsgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBpZiAiJCIgaW4gYWZ0ZXI6CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGRvbmVbbmFtZV0gPSB2YWx1ZQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gaW50KHZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVbbmFtZV0gPSB2YWx1ZS5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lW25hbWVdID0gdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzLnJlbW92ZShuYW1lKQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbmFtZS5zdGFydHN3aXRoKCdQWV8nKSBcCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBuYW1lWzM6XSBpbiByZW5hbWVkX3ZhcmlhYmxlczoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gbmFtZVszOl0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5hbWUgbm90IGluIGRvbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZVtuYW1lXSA9IHZhbHVlCgogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgIyBib2d1cyB2YXJpYWJsZSByZWZlcmVuY2UgKGUuZy4gInByZWZpeD0kL29wdC9weXRob24iKTsKICAgICAgICAgICAgICAgICMganVzdCBkcm9wIGl0IHNpbmNlIHdlIGNhbid0IGRlYWwKICAgICAgICAgICAgICAgIGRvbmVbbmFtZV0gPSB2YWx1ZQogICAgICAgICAgICAgICAgdmFyaWFibGVzLnJlbW92ZShuYW1lKQoKICAgICMgc3RyaXAgc3B1cmlvdXMgc3BhY2VzCiAgICBmb3IgaywgdiBpbiBkb25lLml0ZW1zKCk6CiAgICAgICAgaWYgaXNpbnN0YW5jZSh2LCBzdHIpOgogICAgICAgICAgICBkb25lW2tdID0gdi5zdHJpcCgpCgogICAgIyBzYXZlIHRoZSByZXN1bHRzIGluIHRoZSBnbG9iYWwgZGljdGlvbmFyeQogICAgdmFycy51cGRhdGUoZG9uZSkKICAgIHJldHVybiB2YXJzCgoKZGVmIGdldF9tYWtlZmlsZV9maWxlbmFtZSgpOgogICAgIiIiUmV0dXJuIHRoZSBwYXRoIG9mIHRoZSBNYWtlZmlsZS4iIiIKICAgIGlmIF9QWVRIT05fQlVJTEQ6CiAgICAgICAgcmV0dXJuIG9zLnBhdGguam9pbihfc3lzX2hvbWUgb3IgX1BST0pFQ1RfQkFTRSwgIk1ha2VmaWxlIikKICAgIGlmIGhhc2F0dHIoc3lzLCAnYWJpZmxhZ3MnKToKICAgICAgICBjb25maWdfZGlyX25hbWUgPSAnY29uZmlnLSVzJXMnICUgKF9QWV9WRVJTSU9OX1NIT1JULCBzeXMuYWJpZmxhZ3MpCiAgICBlbHNlOgogICAgICAgIGNvbmZpZ19kaXJfbmFtZSA9ICdjb25maWcnCiAgICByZXR1cm4gb3MucGF0aC5qb2luKGdldF9wYXRoKCdzdGRsaWInKSwgY29uZmlnX2Rpcl9uYW1lLCAnTWFrZWZpbGUnKQoKZGVmIF9nZW5lcmF0ZV9wb3NpeF92YXJzKCk6CiAgICAiIiJHZW5lcmF0ZSB0aGUgUHl0aG9uIG1vZHVsZSBjb250YWluaW5nIGJ1aWxkLXRpbWUgdmFyaWFibGVzLiIiIgogICAgaW1wb3J0IHBwcmludAogICAgdmFycyA9IHt9CiAgICAjIGxvYWQgdGhlIGluc3RhbGxlZCBNYWtlZmlsZToKICAgIG1ha2VmaWxlID0gZ2V0X21ha2VmaWxlX2ZpbGVuYW1lKCkKICAgIHRyeToKICAgICAgICBfcGFyc2VfbWFrZWZpbGUobWFrZWZpbGUsIHZhcnMpCiAgICBleGNlcHQgSU9FcnJvciBhcyBlOgogICAgICAgIG1zZyA9ICJpbnZhbGlkIFB5dGhvbiBpbnN0YWxsYXRpb246IHVuYWJsZSB0byBvcGVuICVzIiAlIG1ha2VmaWxlCiAgICAgICAgaWYgaGFzYXR0cihlLCAic3RyZXJyb3IiKToKICAgICAgICAgICAgbXNnID0gbXNnICsgIiAoJXMpIiAlIGUuc3RyZXJyb3IKICAgICAgICByYWlzZSBJT0Vycm9yKG1zZykKICAgICMgbG9hZCB0aGUgaW5zdGFsbGVkIHB5Y29uZmlnLmg6CiAgICBjb25maWdfaCA9IGdldF9jb25maWdfaF9maWxlbmFtZSgpCiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKGNvbmZpZ19oKSBhcyBmOgogICAgICAgICAgICBwYXJzZV9jb25maWdfaChmLCB2YXJzKQogICAgZXhjZXB0IElPRXJyb3IgYXMgZToKICAgICAgICBtc2cgPSAiaW52YWxpZCBQeXRob24gaW5zdGFsbGF0aW9uOiB1bmFibGUgdG8gb3BlbiAlcyIgJSBjb25maWdfaAogICAgICAgIGlmIGhhc2F0dHIoZSwgInN0cmVycm9yIik6CiAgICAgICAgICAgIG1zZyA9IG1zZyArICIgKCVzKSIgJSBlLnN0cmVycm9yCiAgICAgICAgcmFpc2UgSU9FcnJvcihtc2cpCiAgICAjIE9uIEFJWCwgdGhlcmUgYXJlIHdyb25nIHBhdGhzIHRvIHRoZSBsaW5rZXIgc2NyaXB0cyBpbiB0aGUgTWFrZWZpbGUKICAgICMgLS0gdGhlc2UgcGF0aHMgYXJlIHJlbGF0aXZlIHRvIHRoZSBQeXRob24gc291cmNlLCBidXQgd2hlbiBpbnN0YWxsZWQKICAgICMgdGhlIHNjcmlwdHMgYXJlIGluIGFub3RoZXIgZGlyZWN0b3J5LgogICAgaWYgX1BZVEhPTl9CVUlMRDoKICAgICAgICB2YXJzWydMRFNIQVJFRCddID0gdmFyc1snQkxEU0hBUkVEJ10KCiAgICBkZXN0ZmlsZSA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUoX19maWxlX18pLCAnX3N5c2NvbmZpZ2RhdGEucHknKQogICAgd2l0aCBvcGVuKGRlc3RmaWxlLCAndycsIGVuY29kaW5nPSd1dGY4JykgYXMgZjoKICAgICAgICBmLndyaXRlKCcjIHN5c3RlbSBjb25maWd1cmF0aW9uIGdlbmVyYXRlZCBhbmQgdXNlZCBieScKICAgICAgICAgICAgICAgICcgdGhlIHN5c2NvbmZpZyBtb2R1bGVcbicpCiAgICAgICAgZi53cml0ZSgnYnVpbGRfdGltZV92YXJzID0gJykKICAgICAgICBwcHJpbnQucHByaW50KHZhcnMsIHN0cmVhbT1mKQoKZGVmIF9pbml0X3Bvc2l4KHZhcnMpOgogICAgIiIiSW5pdGlhbGl6ZSB0aGUgbW9kdWxlIGFzIGFwcHJvcHJpYXRlIGZvciBQT1NJWCBzeXN0ZW1zLiIiIgogICAgIyBfc3lzY29uZmlnZGF0YSBpcyBnZW5lcmF0ZWQgYXQgYnVpbGQgdGltZSwgc2VlIF9nZW5lcmF0ZV9wb3NpeF92YXJzKCkKICAgIGZyb20gX3N5c2NvbmZpZ2RhdGEgaW1wb3J0IGJ1aWxkX3RpbWVfdmFycwogICAgdmFycy51cGRhdGUoYnVpbGRfdGltZV92YXJzKQoKZGVmIF9pbml0X25vbl9wb3NpeCh2YXJzKToKICAgICIiIkluaXRpYWxpemUgdGhlIG1vZHVsZSBhcyBhcHByb3ByaWF0ZSBmb3IgTlQiIiIKICAgICMgc2V0IGJhc2ljIGluc3RhbGwgZGlyZWN0b3JpZXMKICAgIHZhcnNbJ0xJQkRFU1QnXSA9IGdldF9wYXRoKCdzdGRsaWInKQogICAgdmFyc1snQklOTElCREVTVCddID0gZ2V0X3BhdGgoJ3BsYXRzdGRsaWInKQogICAgdmFyc1snSU5DTFVERVBZJ10gPSBnZXRfcGF0aCgnaW5jbHVkZScpCiAgICB2YXJzWydTTyddID0gJy5weWQnCiAgICB2YXJzWydFWEUnXSA9ICcuZXhlJwogICAgdmFyc1snVkVSU0lPTiddID0gX1BZX1ZFUlNJT05fU0hPUlRfTk9fRE9UCiAgICB2YXJzWydCSU5ESVInXSA9IG9zLnBhdGguZGlybmFtZShfc2FmZV9yZWFscGF0aChzeXMuZXhlY3V0YWJsZSkpCgojCiMgcHVibGljIEFQSXMKIwoKCmRlZiBwYXJzZV9jb25maWdfaChmcCwgdmFycz1Ob25lKToKICAgICIiIlBhcnNlIGEgY29uZmlnLmgtc3R5bGUgZmlsZS4KCiAgICBBIGRpY3Rpb25hcnkgY29udGFpbmluZyBuYW1lL3ZhbHVlIHBhaXJzIGlzIHJldHVybmVkLiAgSWYgYW4KICAgIG9wdGlvbmFsIGRpY3Rpb25hcnkgaXMgcGFzc2VkIGluIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGl0IGlzCiAgICB1c2VkIGluc3RlYWQgb2YgYSBuZXcgZGljdGlvbmFyeS4KICAgICIiIgogICAgaWYgdmFycyBpcyBOb25lOgogICAgICAgIHZhcnMgPSB7fQogICAgZGVmaW5lX3J4ID0gcmUuY29tcGlsZSgiI2RlZmluZSAoW0EtWl1bQS1aYS16MC05X10rKSAoLiopXG4iKQogICAgdW5kZWZfcnggPSByZS5jb21waWxlKCIvWypdICN1bmRlZiAoW0EtWl1bQS1aYS16MC05X10rKSBbKl0vXG4iKQoKICAgIHdoaWxlIFRydWU6CiAgICAgICAgbGluZSA9IGZwLnJlYWRsaW5lKCkKICAgICAgICBpZiBub3QgbGluZToKICAgICAgICAgICAgYnJlYWsKICAgICAgICBtID0gZGVmaW5lX3J4Lm1hdGNoKGxpbmUpCiAgICAgICAgaWYgbToKICAgICAgICAgICAgbiwgdiA9IG0uZ3JvdXAoMSwgMikKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgdiA9IGludCh2KQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgdmFyc1tuXSA9IHYKICAgICAgICBlbHNlOgogICAgICAgICAgICBtID0gdW5kZWZfcngubWF0Y2gobGluZSkKICAgICAgICAgICAgaWYgbToKICAgICAgICAgICAgICAgIHZhcnNbbS5ncm91cCgxKV0gPSAwCiAgICByZXR1cm4gdmFycwoKCmRlZiBnZXRfY29uZmlnX2hfZmlsZW5hbWUoKToKICAgICIiIlJldHVybiB0aGUgcGF0aCBvZiBweWNvbmZpZy5oLiIiIgogICAgaWYgX1BZVEhPTl9CVUlMRDoKICAgICAgICBpZiBvcy5uYW1lID09ICJudCI6CiAgICAgICAgICAgIGluY19kaXIgPSBvcy5wYXRoLmpvaW4oX3N5c19ob21lIG9yIF9QUk9KRUNUX0JBU0UsICJQQyIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaW5jX2RpciA9IF9zeXNfaG9tZSBvciBfUFJPSkVDVF9CQVNFCiAgICBlbHNlOgogICAgICAgIGluY19kaXIgPSBnZXRfcGF0aCgncGxhdGluY2x1ZGUnKQogICAgcmV0dXJuIG9zLnBhdGguam9pbihpbmNfZGlyLCAncHljb25maWcuaCcpCgoKZGVmIGdldF9zY2hlbWVfbmFtZXMoKToKICAgICIiIlJldHVybiBhIHR1cGxlIGNvbnRhaW5pbmcgdGhlIHNjaGVtZXMgbmFtZXMuIiIiCiAgICByZXR1cm4gdHVwbGUoc29ydGVkKF9JTlNUQUxMX1NDSEVNRVMpKQoKCmRlZiBnZXRfcGF0aF9uYW1lcygpOgogICAgIiIiUmV0dXJuIGEgdHVwbGUgY29udGFpbmluZyB0aGUgcGF0aHMgbmFtZXMuIiIiCiAgICByZXR1cm4gX1NDSEVNRV9LRVlTCgoKZGVmIGdldF9wYXRocyhzY2hlbWU9X2dldF9kZWZhdWx0X3NjaGVtZSgpLCB2YXJzPU5vbmUsIGV4cGFuZD1UcnVlKToKICAgICIiIlJldHVybiBhIG1hcHBpbmcgY29udGFpbmluZyBhbiBpbnN0YWxsIHNjaGVtZS4KCiAgICBgYHNjaGVtZWBgIGlzIHRoZSBpbnN0YWxsIHNjaGVtZSBuYW1lLiBJZiBub3QgcHJvdmlkZWQsIGl0IHdpbGwKICAgIHJldHVybiB0aGUgZGVmYXVsdCBzY2hlbWUgZm9yIHRoZSBjdXJyZW50IHBsYXRmb3JtLgogICAgIiIiCiAgICBpZiBleHBhbmQ6CiAgICAgICAgcmV0dXJuIF9leHBhbmRfdmFycyhzY2hlbWUsIHZhcnMpCiAgICBlbHNlOgogICAgICAgIHJldHVybiBfSU5TVEFMTF9TQ0hFTUVTW3NjaGVtZV0KCgpkZWYgZ2V0X3BhdGgobmFtZSwgc2NoZW1lPV9nZXRfZGVmYXVsdF9zY2hlbWUoKSwgdmFycz1Ob25lLCBleHBhbmQ9VHJ1ZSk6CiAgICAiIiJSZXR1cm4gYSBwYXRoIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNjaGVtZS4KCiAgICBgYHNjaGVtZWBgIGlzIHRoZSBpbnN0YWxsIHNjaGVtZSBuYW1lLgogICAgIiIiCiAgICByZXR1cm4gZ2V0X3BhdGhzKHNjaGVtZSwgdmFycywgZXhwYW5kKVtuYW1lXQoKCmRlZiBnZXRfY29uZmlnX3ZhcnMoKmFyZ3MpOgogICAgIiIiV2l0aCBubyBhcmd1bWVudHMsIHJldHVybiBhIGRpY3Rpb25hcnkgb2YgYWxsIGNvbmZpZ3VyYXRpb24KICAgIHZhcmlhYmxlcyByZWxldmFudCBmb3IgdGhlIGN1cnJlbnQgcGxhdGZvcm0uCgogICAgT24gVW5peCwgdGhpcyBtZWFucyBldmVyeSB2YXJpYWJsZSBkZWZpbmVkIGluIFB5dGhvbidzIGluc3RhbGxlZCBNYWtlZmlsZTsKICAgIE9uIFdpbmRvd3MgaXQncyBhIG11Y2ggc21hbGxlciBzZXQuCgogICAgV2l0aCBhcmd1bWVudHMsIHJldHVybiBhIGxpc3Qgb2YgdmFsdWVzIHRoYXQgcmVzdWx0IGZyb20gbG9va2luZyB1cAogICAgZWFjaCBhcmd1bWVudCBpbiB0aGUgY29uZmlndXJhdGlvbiB2YXJpYWJsZSBkaWN0aW9uYXJ5LgogICAgIiIiCiAgICBnbG9iYWwgX0NPTkZJR19WQVJTCiAgICBpZiBfQ09ORklHX1ZBUlMgaXMgTm9uZToKICAgICAgICBfQ09ORklHX1ZBUlMgPSB7fQogICAgICAgICMgTm9ybWFsaXplZCB2ZXJzaW9ucyBvZiBwcmVmaXggYW5kIGV4ZWNfcHJlZml4IGFyZSBoYW5keSB0byBoYXZlOwogICAgICAgICMgaW4gZmFjdCwgdGhlc2UgYXJlIHRoZSBzdGFuZGFyZCB2ZXJzaW9ucyB1c2VkIG1vc3QgcGxhY2VzIGluIHRoZQogICAgICAgICMgRGlzdHV0aWxzLgogICAgICAgIF9DT05GSUdfVkFSU1sncHJlZml4J10gPSBfUFJFRklYCiAgICAgICAgX0NPTkZJR19WQVJTWydleGVjX3ByZWZpeCddID0gX0VYRUNfUFJFRklYCiAgICAgICAgX0NPTkZJR19WQVJTWydweV92ZXJzaW9uJ10gPSBfUFlfVkVSU0lPTgogICAgICAgIF9DT05GSUdfVkFSU1sncHlfdmVyc2lvbl9zaG9ydCddID0gX1BZX1ZFUlNJT05fU0hPUlQKICAgICAgICBfQ09ORklHX1ZBUlNbJ3B5X3ZlcnNpb25fbm9kb3QnXSA9IF9QWV9WRVJTSU9OWzBdICsgX1BZX1ZFUlNJT05bMl0KICAgICAgICBfQ09ORklHX1ZBUlNbJ2luc3RhbGxlZF9iYXNlJ10gPSBfQkFTRV9QUkVGSVgKICAgICAgICBfQ09ORklHX1ZBUlNbJ2Jhc2UnXSA9IF9QUkVGSVgKICAgICAgICBfQ09ORklHX1ZBUlNbJ2luc3RhbGxlZF9wbGF0YmFzZSddID0gX0JBU0VfRVhFQ19QUkVGSVgKICAgICAgICBfQ09ORklHX1ZBUlNbJ3BsYXRiYXNlJ10gPSBfRVhFQ19QUkVGSVgKICAgICAgICBfQ09ORklHX1ZBUlNbJ3Byb2plY3RiYXNlJ10gPSBfUFJPSkVDVF9CQVNFCiAgICAgICAgdHJ5OgogICAgICAgICAgICBfQ09ORklHX1ZBUlNbJ2FiaWZsYWdzJ10gPSBzeXMuYWJpZmxhZ3MKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgICMgc3lzLmFiaWZsYWdzIG1heSBub3QgYmUgZGVmaW5lZCBvbiBhbGwgcGxhdGZvcm1zLgogICAgICAgICAgICBfQ09ORklHX1ZBUlNbJ2FiaWZsYWdzJ10gPSAnJwoKICAgICAgICBpZiBvcy5uYW1lIGluICgnbnQnLCAnb3MyJyk6CiAgICAgICAgICAgIF9pbml0X25vbl9wb3NpeChfQ09ORklHX1ZBUlMpCiAgICAgICAgaWYgb3MubmFtZSA9PSAncG9zaXgnOgogICAgICAgICAgICBfaW5pdF9wb3NpeChfQ09ORklHX1ZBUlMpCiAgICAgICAgIyBTZXR0aW5nICd1c2VyYmFzZScgaXMgZG9uZSBiZWxvdyB0aGUgY2FsbCB0byB0aGUKICAgICAgICAjIGluaXQgZnVuY3Rpb24gdG8gZW5hYmxlIHVzaW5nICdnZXRfY29uZmlnX3ZhcicgaW4KICAgICAgICAjIHRoZSBpbml0LWZ1bmN0aW9uLgogICAgICAgIF9DT05GSUdfVkFSU1sndXNlcmJhc2UnXSA9IF9nZXR1c2VyYmFzZSgpCgogICAgICAgICMgQWx3YXlzIGNvbnZlcnQgc3JjZGlyIHRvIGFuIGFic29sdXRlIHBhdGgKICAgICAgICBzcmNkaXIgPSBfQ09ORklHX1ZBUlMuZ2V0KCdzcmNkaXInLCBfUFJPSkVDVF9CQVNFKQogICAgICAgIGlmIG9zLm5hbWUgPT0gJ3Bvc2l4JzoKICAgICAgICAgICAgaWYgX1BZVEhPTl9CVUlMRDoKICAgICAgICAgICAgICAgICMgSWYgc3JjZGlyIGlzIGEgcmVsYXRpdmUgcGF0aCAodHlwaWNhbGx5ICcuJyBvciAnLi4nKQogICAgICAgICAgICAgICAgIyB0aGVuIGl0IHNob3VsZCBiZSBpbnRlcnByZXRlZCByZWxhdGl2ZSB0byB0aGUgZGlyZWN0b3J5CiAgICAgICAgICAgICAgICAjIGNvbnRhaW5pbmcgTWFrZWZpbGUuCiAgICAgICAgICAgICAgICBiYXNlID0gb3MucGF0aC5kaXJuYW1lKGdldF9tYWtlZmlsZV9maWxlbmFtZSgpKQogICAgICAgICAgICAgICAgc3JjZGlyID0gb3MucGF0aC5qb2luKGJhc2UsIHNyY2RpcikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgc3JjZGlyIGlzIG5vdCBtZWFuaW5nZnVsIHNpbmNlIHRoZSBpbnN0YWxsYXRpb24gaXMKICAgICAgICAgICAgICAgICMgc3ByZWFkIGFib3V0IHRoZSBmaWxlc3lzdGVtLiAgV2UgY2hvb3NlIHRoZQogICAgICAgICAgICAgICAgIyBkaXJlY3RvcnkgY29udGFpbmluZyB0aGUgTWFrZWZpbGUgc2luY2Ugd2Uga25vdyBpdAogICAgICAgICAgICAgICAgIyBleGlzdHMuCiAgICAgICAgICAgICAgICBzcmNkaXIgPSBvcy5wYXRoLmRpcm5hbWUoZ2V0X21ha2VmaWxlX2ZpbGVuYW1lKCkpCiAgICAgICAgX0NPTkZJR19WQVJTWydzcmNkaXInXSA9IF9zYWZlX3JlYWxwYXRoKHNyY2RpcikKCiAgICAgICAgIyBPUyBYIHBsYXRmb3JtcyByZXF1aXJlIHNwZWNpYWwgY3VzdG9taXphdGlvbiB0byBoYW5kbGUKICAgICAgICAjIG11bHRpLWFyY2hpdGVjdHVyZSwgbXVsdGktb3MtdmVyc2lvbiBpbnN0YWxsZXJzCiAgICAgICAgaWYgc3lzLnBsYXRmb3JtID09ICdkYXJ3aW4nOgogICAgICAgICAgICBpbXBvcnQgX29zeF9zdXBwb3J0CiAgICAgICAgICAgIF9vc3hfc3VwcG9ydC5jdXN0b21pemVfY29uZmlnX3ZhcnMoX0NPTkZJR19WQVJTKQoKICAgIGlmIGFyZ3M6CiAgICAgICAgdmFscyA9IFtdCiAgICAgICAgZm9yIG5hbWUgaW4gYXJnczoKICAgICAgICAgICAgdmFscy5hcHBlbmQoX0NPTkZJR19WQVJTLmdldChuYW1lKSkKICAgICAgICByZXR1cm4gdmFscwogICAgZWxzZToKICAgICAgICByZXR1cm4gX0NPTkZJR19WQVJTCgoKZGVmIGdldF9jb25maWdfdmFyKG5hbWUpOgogICAgIiIiUmV0dXJuIHRoZSB2YWx1ZSBvZiBhIHNpbmdsZSB2YXJpYWJsZSB1c2luZyB0aGUgZGljdGlvbmFyeSByZXR1cm5lZCBieQogICAgJ2dldF9jb25maWdfdmFycygpJy4KCiAgICBFcXVpdmFsZW50IHRvIGdldF9jb25maWdfdmFycygpLmdldChuYW1lKQogICAgIiIiCiAgICByZXR1cm4gZ2V0X2NvbmZpZ192YXJzKCkuZ2V0KG5hbWUpCgoKZGVmIGdldF9wbGF0Zm9ybSgpOgogICAgIiIiUmV0dXJuIGEgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyB0aGUgY3VycmVudCBwbGF0Zm9ybS4KCiAgICBUaGlzIGlzIHVzZWQgbWFpbmx5IHRvIGRpc3Rpbmd1aXNoIHBsYXRmb3JtLXNwZWNpZmljIGJ1aWxkIGRpcmVjdG9yaWVzIGFuZAogICAgcGxhdGZvcm0tc3BlY2lmaWMgYnVpbHQgZGlzdHJpYnV0aW9ucy4gIFR5cGljYWxseSBpbmNsdWRlcyB0aGUgT1MgbmFtZQogICAgYW5kIHZlcnNpb24gYW5kIHRoZSBhcmNoaXRlY3R1cmUgKGFzIHN1cHBsaWVkIGJ5ICdvcy51bmFtZSgpJyksCiAgICBhbHRob3VnaCB0aGUgZXhhY3QgaW5mb3JtYXRpb24gaW5jbHVkZWQgZGVwZW5kcyBvbiB0aGUgT1M7IGVnLiBmb3IgSVJJWAogICAgdGhlIGFyY2hpdGVjdHVyZSBpc24ndCBwYXJ0aWN1bGFybHkgaW1wb3J0YW50IChJUklYIG9ubHkgcnVucyBvbiBTR0kKICAgIGhhcmR3YXJlKSwgYnV0IGZvciBMaW51eCB0aGUga2VybmVsIHZlcnNpb24gaXNuJ3QgcGFydGljdWxhcmx5CiAgICBpbXBvcnRhbnQuCgogICAgRXhhbXBsZXMgb2YgcmV0dXJuZWQgdmFsdWVzOgogICAgICAgbGludXgtaTU4NgogICAgICAgbGludXgtYWxwaGEgKD8pCiAgICAgICBzb2xhcmlzLTIuNi1zdW40dQogICAgICAgaXJpeC01LjMKICAgICAgIGlyaXg2NC02LjIKCiAgICBXaW5kb3dzIHdpbGwgcmV0dXJuIG9uZSBvZjoKICAgICAgIHdpbi1hbWQ2NCAoNjRiaXQgV2luZG93cyBvbiBBTUQ2NCAoYWthIHg4Nl82NCwgSW50ZWw2NCwgRU02NFQsIGV0YykKICAgICAgIHdpbi1pYTY0ICg2NGJpdCBXaW5kb3dzIG9uIEl0YW5pdW0pCiAgICAgICB3aW4zMiAoYWxsIG90aGVycyAtIHNwZWNpZmljYWxseSwgc3lzLnBsYXRmb3JtIGlzIHJldHVybmVkKQoKICAgIEZvciBvdGhlciBub24tUE9TSVggcGxhdGZvcm1zLCBjdXJyZW50bHkganVzdCByZXR1cm5zICdzeXMucGxhdGZvcm0nLgogICAgIiIiCiAgICBpZiBvcy5uYW1lID09ICdudCc6CiAgICAgICAgIyBzbmlmZiBzeXMudmVyc2lvbiBmb3IgYXJjaGl0ZWN0dXJlLgogICAgICAgIHByZWZpeCA9ICIgYml0ICgiCiAgICAgICAgaSA9IHN5cy52ZXJzaW9uLmZpbmQocHJlZml4KQogICAgICAgIGlmIGkgPT0gLTE6CiAgICAgICAgICAgIHJldHVybiBzeXMucGxhdGZvcm0KICAgICAgICBqID0gc3lzLnZlcnNpb24uZmluZCgiKSIsIGkpCiAgICAgICAgbG9vayA9IHN5cy52ZXJzaW9uW2krbGVuKHByZWZpeCk6al0ubG93ZXIoKQogICAgICAgIGlmIGxvb2sgPT0gJ2FtZDY0JzoKICAgICAgICAgICAgcmV0dXJuICd3aW4tYW1kNjQnCiAgICAgICAgaWYgbG9vayA9PSAnaXRhbml1bSc6CiAgICAgICAgICAgIHJldHVybiAnd2luLWlhNjQnCiAgICAgICAgcmV0dXJuIHN5cy5wbGF0Zm9ybQoKICAgIGlmIG9zLm5hbWUgIT0gInBvc2l4IiBvciBub3QgaGFzYXR0cihvcywgJ3VuYW1lJyk6CiAgICAgICAgIyBYWFggd2hhdCBhYm91dCB0aGUgYXJjaGl0ZWN0dXJlPyBOVCBpcyBJbnRlbCBvciBBbHBoYQogICAgICAgIHJldHVybiBzeXMucGxhdGZvcm0KCiAgICAjIFNldCBmb3IgY3Jvc3MgYnVpbGRzIGV4cGxpY2l0bHkKICAgIGlmICJfUFlUSE9OX0hPU1RfUExBVEZPUk0iIGluIG9zLmVudmlyb246CiAgICAgICAgcmV0dXJuIG9zLmVudmlyb25bIl9QWVRIT05fSE9TVF9QTEFURk9STSJdCgogICAgIyBUcnkgdG8gZGlzdGluZ3Vpc2ggdmFyaW91cyBmbGF2b3VycyBvZiBVbml4CiAgICBvc25hbWUsIGhvc3QsIHJlbGVhc2UsIHZlcnNpb24sIG1hY2hpbmUgPSBvcy51bmFtZSgpCgogICAgIyBDb252ZXJ0IHRoZSBPUyBuYW1lIHRvIGxvd2VyY2FzZSwgcmVtb3ZlICcvJyBjaGFyYWN0ZXJzCiAgICAjICh0byBhY2NvbW1vZGF0ZSBCU0QvT1MpLCBhbmQgdHJhbnNsYXRlIHNwYWNlcyAoZm9yICJQb3dlciBNYWNpbnRvc2giKQogICAgb3NuYW1lID0gb3NuYW1lLmxvd2VyKCkucmVwbGFjZSgnLycsICcnKQogICAgbWFjaGluZSA9IG1hY2hpbmUucmVwbGFjZSgnICcsICdfJykKICAgIG1hY2hpbmUgPSBtYWNoaW5lLnJlcGxhY2UoJy8nLCAnLScpCgogICAgaWYgb3NuYW1lWzo1XSA9PSAibGludXgiOgogICAgICAgICMgQXQgbGVhc3Qgb24gTGludXgvSW50ZWwsICdtYWNoaW5lJyBpcyB0aGUgcHJvY2Vzc29yIC0tCiAgICAgICAgIyBpMzg2LCBldGMuCiAgICAgICAgIyBYWFggd2hhdCBhYm91dCBBbHBoYSwgU1BBUkMsIGV0Yz8KICAgICAgICByZXR1cm4gICIlcy0lcyIgJSAob3NuYW1lLCBtYWNoaW5lKQogICAgZWxpZiBvc25hbWVbOjVdID09ICJzdW5vcyI6CiAgICAgICAgaWYgcmVsZWFzZVswXSA+PSAiNSI6ICAgICAgICAgICAjIFN1bk9TIDUgPT0gU29sYXJpcyAyCiAgICAgICAgICAgIG9zbmFtZSA9ICJzb2xhcmlzIgogICAgICAgICAgICByZWxlYXNlID0gIiVkLiVzIiAlIChpbnQocmVsZWFzZVswXSkgLSAzLCByZWxlYXNlWzI6XSkKICAgICAgICAgICAgIyBXZSBjYW4ndCB1c2UgInBsYXRmb3JtLmFyY2hpdGVjdHVyZSgpWzBdIiBiZWNhdXNlIGEKICAgICAgICAgICAgIyBib290c3RyYXAgcHJvYmxlbS4gV2UgdXNlIGEgZGljdCB0byBnZXQgYW4gZXJyb3IKICAgICAgICAgICAgIyBpZiBzb21lIHN1c3BpY2lvdXMgaGFwcGVucy4KICAgICAgICAgICAgYml0bmVzcyA9IHsyMTQ3NDgzNjQ3OiIzMmJpdCIsIDkyMjMzNzIwMzY4NTQ3NzU4MDc6IjY0Yml0In0KICAgICAgICAgICAgbWFjaGluZSArPSAiLiVzIiAlIGJpdG5lc3Nbc3lzLm1heHNpemVdCiAgICAgICAgIyBmYWxsIHRocm91Z2ggdG8gc3RhbmRhcmQgb3NuYW1lLXJlbGVhc2UtbWFjaGluZSByZXByZXNlbnRhdGlvbgogICAgZWxpZiBvc25hbWVbOjRdID09ICJpcml4IjogICAgICAgICAgICAgICMgY291bGQgYmUgImlyaXg2NCIhCiAgICAgICAgcmV0dXJuICIlcy0lcyIgJSAob3NuYW1lLCByZWxlYXNlKQogICAgZWxpZiBvc25hbWVbOjNdID09ICJhaXgiOgogICAgICAgIHJldHVybiAiJXMtJXMuJXMiICUgKG9zbmFtZSwgdmVyc2lvbiwgcmVsZWFzZSkKICAgIGVsaWYgb3NuYW1lWzo2XSA9PSAiY3lnd2luIjoKICAgICAgICBvc25hbWUgPSAiY3lnd2luIgogICAgICAgIHJlbF9yZSA9IHJlLmNvbXBpbGUocidbXGQuXSsnKQogICAgICAgIG0gPSByZWxfcmUubWF0Y2gocmVsZWFzZSkKICAgICAgICBpZiBtOgogICAgICAgICAgICByZWxlYXNlID0gbS5ncm91cCgpCiAgICBlbGlmIG9zbmFtZVs6Nl0gPT0gImRhcndpbiI6CiAgICAgICAgaW1wb3J0IF9vc3hfc3VwcG9ydAogICAgICAgIG9zbmFtZSwgcmVsZWFzZSwgbWFjaGluZSA9IF9vc3hfc3VwcG9ydC5nZXRfcGxhdGZvcm1fb3N4KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldF9jb25maWdfdmFycygpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zbmFtZSwgcmVsZWFzZSwgbWFjaGluZSkKCiAgICByZXR1cm4gIiVzLSVzLSVzIiAlIChvc25hbWUsIHJlbGVhc2UsIG1hY2hpbmUpCgoKZGVmIGdldF9weXRob25fdmVyc2lvbigpOgogICAgcmV0dXJuIF9QWV9WRVJTSU9OX1NIT1JUCgoKZGVmIF9wcmludF9kaWN0KHRpdGxlLCBkYXRhKToKICAgIGZvciBpbmRleCwgKGtleSwgdmFsdWUpIGluIGVudW1lcmF0ZShzb3J0ZWQoZGF0YS5pdGVtcygpKSk6CiAgICAgICAgaWYgaW5kZXggPT0gMDoKICAgICAgICAgICAgcHJpbnQoJyVzOiAnICUgKHRpdGxlKSkKICAgICAgICBwcmludCgnXHQlcyA9ICIlcyInICUgKGtleSwgdmFsdWUpKQoKCmRlZiBfbWFpbigpOgogICAgIiIiRGlzcGxheSBhbGwgaW5mb3JtYXRpb24gc3lzY29uZmlnIGRldGFpbnMuIiIiCiAgICBpZiAnLS1nZW5lcmF0ZS1wb3NpeC12YXJzJyBpbiBzeXMuYXJndjoKICAgICAgICBfZ2VuZXJhdGVfcG9zaXhfdmFycygpCiAgICAgICAgcmV0dXJuCiAgICBwcmludCgnUGxhdGZvcm06ICIlcyInICUgZ2V0X3BsYXRmb3JtKCkpCiAgICBwcmludCgnUHl0aG9uIHZlcnNpb246ICIlcyInICUgZ2V0X3B5dGhvbl92ZXJzaW9uKCkpCiAgICBwcmludCgnQ3VycmVudCBpbnN0YWxsYXRpb24gc2NoZW1lOiAiJXMiJyAlIF9nZXRfZGVmYXVsdF9zY2hlbWUoKSkKICAgIHByaW50KCkKICAgIF9wcmludF9kaWN0KCdQYXRocycsIGdldF9wYXRocygpKQogICAgcHJpbnQoKQogICAgX3ByaW50X2RpY3QoJ1ZhcmlhYmxlcycsIGdldF9jb25maWdfdmFycygpKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBfbWFpbigpCg==',
'/Lib/tarfile.py':'',
'/Lib/textwrap.py':'',
'/Lib/this.py':'cyA9ICIiIkd1ciBNcmEgYnMgQ2xndWJhLCBvbCBHdnogQ3JncmVmCgpPcm5oZ3ZzaHkgdmYgb3JnZ3JlIGd1bmEgaHR5bC4KUmtjeXZwdmcgdmYgb3JnZ3JlIGd1bmEgdnpjeXZwdmcuCkZ2emN5ciB2ZiBvcmdncmUgZ3VuYSBwYnpjeXJrLgpQYnpjeXJrIHZmIG9yZ2dyZSBndW5hIHBiemN5dnBuZ3JxLgpTeW5nIHZmIG9yZ2dyZSBndW5hIGFyZmdycS4KRmNuZWZyIHZmIG9yZ2dyZSBndW5hIHFyYWZyLgpFcm5xbm92eXZnbCBwYmhhZ2YuCkZjcnB2bnkgcG5mcmYgbmVyYSdnIGZjcnB2bnkgcmFiaHR1IGdiIG9lcm54IGd1ciBlaHlyZi4KTnlndWJodHUgY2VucGd2cG55dmdsIG9ybmdmIGNoZXZnbC4KUmVlYmVmIGZ1Ymh5cSBhcmlyZSBjbmZmIGZ2eXJhZ3lsLgpIYXlyZmYgcmtjeXZwdmd5bCBmdnlyYXBycS4KVmEgZ3VyIHNucHIgYnMgbnpvdnRodmdsLCBlcnNoZnIgZ3VyIGdyemNnbmd2YmEgZ2IgdGhyZmYuCkd1cmVyIGZ1Ymh5cSBvciBiYXItLSBuYXEgY2Vyc3Jlbm95bCBiYXlsIGJhciAtLWJvaXZiaGYgam5sIGdiIHFiIHZnLgpOeWd1Ymh0dSBndW5nIGpubCB6bmwgYWJnIG9yIGJvaXZiaGYgbmcgc3ZlZmcgaGF5cmZmIGxiaCdlciBRaGdwdS4KQWJqIHZmIG9yZ2dyZSBndW5hIGFyaXJlLgpOeWd1Ymh0dSBhcmlyZSB2ZiBic2dyYSBvcmdncmUgZ3VuYSAqZXZ0dWcqIGFiai4KVnMgZ3VyIHZ6Y3lyenJhZ25ndmJhIHZmIHVuZXEgZ2IgcmtjeW52YSwgdmcnZiBuIG9ucSB2cXJuLgpWcyBndXIgdnpjeXJ6cmFnbmd2YmEgdmYgcm5mbCBnYiBya2N5bnZhLCB2ZyB6bmwgb3IgbiB0YmJxIHZxcm4uCkFuenJmY25wcmYgbmVyIGJhciB1YmF4dmF0IHRlcm5nIHZxcm4gLS0geXJnJ2YgcWIgemJlciBicyBndWJmciEiIiIKCmQgPSB7fQpmb3IgYyBpbiAoNjUsIDk3KToKICAgIGZvciBpIGluIHJhbmdlKDI2KToKICAgICAgICBkW2NocihpK2MpXSA9IGNocigoaSsxMykgJSAyNiArIGMpCgpwcmludCgiIi5qb2luKFtkLmdldChjLCBjKSBmb3IgYyBpbiBzXSkpCg==',
'/Lib/token.py':'IiIiVG9rZW4gY29uc3RhbnRzIChmcm9tICJ0b2tlbi5oIikuIiIiCgpfX2FsbF9fID0gWyd0b2tfbmFtZScsICdJU1RFUk1JTkFMJywgJ0lTTk9OVEVSTUlOQUwnLCAnSVNFT0YnXQoKIyAgVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkOyBwbGVhc2UgZG9uJ3QgbXVjayBpdCB1cCEKIwojICBUbyB1cGRhdGUgdGhlIHN5bWJvbHMgaW4gdGhpcyBmaWxlLCAnY2QnIHRvIHRoZSB0b3AgZGlyZWN0b3J5IG9mCiMgIHRoZSBweXRob24gc291cmNlIHRyZWUgYWZ0ZXIgYnVpbGRpbmcgdGhlIGludGVycHJldGVyIGFuZCBydW46CiMKIyAgICAuL3B5dGhvbiBMaWIvdG9rZW4ucHkKCiMtLXN0YXJ0IGNvbnN0YW50cy0tCkVORE1BUktFUiA9IDAKTkFNRSA9IDEKTlVNQkVSID0gMgpTVFJJTkcgPSAzCk5FV0xJTkUgPSA0CklOREVOVCA9IDUKREVERU5UID0gNgpMUEFSID0gNwpSUEFSID0gOApMU1FCID0gOQpSU1FCID0gMTAKQ09MT04gPSAxMQpDT01NQSA9IDEyClNFTUkgPSAxMwpQTFVTID0gMTQKTUlOVVMgPSAxNQpTVEFSID0gMTYKU0xBU0ggPSAxNwpWQkFSID0gMTgKQU1QRVIgPSAxOQpMRVNTID0gMjAKR1JFQVRFUiA9IDIxCkVRVUFMID0gMjIKRE9UID0gMjMKUEVSQ0VOVCA9IDI0CkxCUkFDRSA9IDI1ClJCUkFDRSA9IDI2CkVRRVFVQUwgPSAyNwpOT1RFUVVBTCA9IDI4CkxFU1NFUVVBTCA9IDI5CkdSRUFURVJFUVVBTCA9IDMwClRJTERFID0gMzEKQ0lSQ1VNRkxFWCA9IDMyCkxFRlRTSElGVCA9IDMzClJJR0hUU0hJRlQgPSAzNApET1VCTEVTVEFSID0gMzUKUExVU0VRVUFMID0gMzYKTUlORVFVQUwgPSAzNwpTVEFSRVFVQUwgPSAzOApTTEFTSEVRVUFMID0gMzkKUEVSQ0VOVEVRVUFMID0gNDAKQU1QRVJFUVVBTCA9IDQxClZCQVJFUVVBTCA9IDQyCkNJUkNVTUZMRVhFUVVBTCA9IDQzCkxFRlRTSElGVEVRVUFMID0gNDQKUklHSFRTSElGVEVRVUFMID0gNDUKRE9VQkxFU1RBUkVRVUFMID0gNDYKRE9VQkxFU0xBU0ggPSA0NwpET1VCTEVTTEFTSEVRVUFMID0gNDgKQVQgPSA0OQpSQVJST1cgPSA1MApFTExJUFNJUyA9IDUxCk9QID0gNTIKRVJST1JUT0tFTiA9IDUzCk5fVE9LRU5TID0gNTQKTlRfT0ZGU0VUID0gMjU2CiMtLWVuZCBjb25zdGFudHMtLQoKdG9rX25hbWUgPSB7dmFsdWU6IG5hbWUKICAgICAgICAgICAgZm9yIG5hbWUsIHZhbHVlIGluIGdsb2JhbHMoKS5pdGVtcygpCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIGludCkgYW5kIG5vdCBuYW1lLnN0YXJ0c3dpdGgoJ18nKX0KX19hbGxfXy5leHRlbmQodG9rX25hbWUudmFsdWVzKCkpCgpkZWYgSVNURVJNSU5BTCh4KToKICAgIHJldHVybiB4IDwgTlRfT0ZGU0VUCgpkZWYgSVNOT05URVJNSU5BTCh4KToKICAgIHJldHVybiB4ID49IE5UX09GRlNFVAoKZGVmIElTRU9GKHgpOgogICAgcmV0dXJuIHggPT0gRU5ETUFSS0VSCgoKZGVmIF9tYWluKCk6CiAgICBpbXBvcnQgcmUKICAgIGltcG9ydCBzeXMKICAgIGFyZ3MgPSBzeXMuYXJndlsxOl0KICAgIGluRmlsZU5hbWUgPSBhcmdzIGFuZCBhcmdzWzBdIG9yICJJbmNsdWRlL3Rva2VuLmgiCiAgICBvdXRGaWxlTmFtZSA9ICJMaWIvdG9rZW4ucHkiCiAgICBpZiBsZW4oYXJncykgPiAxOgogICAgICAgIG91dEZpbGVOYW1lID0gYXJnc1sxXQogICAgdHJ5OgogICAgICAgIGZwID0gb3BlbihpbkZpbGVOYW1lKQogICAgZXhjZXB0IElPRXJyb3IgYXMgZXJyOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoIkkvTyBlcnJvcjogJXNcbiIgJSBzdHIoZXJyKSkKICAgICAgICBzeXMuZXhpdCgxKQogICAgbGluZXMgPSBmcC5yZWFkKCkuc3BsaXQoIlxuIikKICAgIGZwLmNsb3NlKCkKICAgIHByb2cgPSByZS5jb21waWxlKAogICAgICAgICIjZGVmaW5lWyBcdF1bIFx0XSooW0EtWjAtOV1bQS1aMC05X10qKVsgXHRdWyBcdF0qKFswLTldWzAtOV0qKSIsCiAgICAgICAgcmUuSUdOT1JFQ0FTRSkKICAgIHRva2VucyA9IHt9CiAgICBmb3IgbGluZSBpbiBsaW5lczoKICAgICAgICBtYXRjaCA9IHByb2cubWF0Y2gobGluZSkKICAgICAgICBpZiBtYXRjaDoKICAgICAgICAgICAgbmFtZSwgdmFsID0gbWF0Y2guZ3JvdXAoMSwgMikKICAgICAgICAgICAgdmFsID0gaW50KHZhbCkKICAgICAgICAgICAgdG9rZW5zW3ZhbF0gPSBuYW1lICAgICAgICAgICMgcmV2ZXJzZSBzbyB3ZSBjYW4gc29ydCB0aGVtLi4uCiAgICBrZXlzID0gc29ydGVkKHRva2Vucy5rZXlzKCkpCiAgICAjIGxvYWQgdGhlIG91dHB1dCBza2VsZXRvbiBmcm9tIHRoZSB0YXJnZXQ6CiAgICB0cnk6CiAgICAgICAgZnAgPSBvcGVuKG91dEZpbGVOYW1lKQogICAgZXhjZXB0IElPRXJyb3IgYXMgZXJyOgogICAgICAgIHN5cy5zdGRlcnIud3JpdGUoIkkvTyBlcnJvcjogJXNcbiIgJSBzdHIoZXJyKSkKICAgICAgICBzeXMuZXhpdCgyKQogICAgZm9ybWF0ID0gZnAucmVhZCgpLnNwbGl0KCJcbiIpCiAgICBmcC5jbG9zZSgpCiAgICB0cnk6CiAgICAgICAgc3RhcnQgPSBmb3JtYXQuaW5kZXgoIiMtLXN0YXJ0IGNvbnN0YW50cy0tIikgKyAxCiAgICAgICAgZW5kID0gZm9ybWF0LmluZGV4KCIjLS1lbmQgY29uc3RhbnRzLS0iKQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgc3lzLnN0ZGVyci53cml0ZSgidGFyZ2V0IGRvZXMgbm90IGNvbnRhaW4gZm9ybWF0IG1hcmtlcnMiKQogICAgICAgIHN5cy5leGl0KDMpCiAgICBsaW5lcyA9IFtdCiAgICBmb3IgdmFsIGluIGtleXM6CiAgICAgICAgbGluZXMuYXBwZW5kKCIlcyA9ICVkIiAlICh0b2tlbnNbdmFsXSwgdmFsKSkKICAgIGZvcm1hdFtzdGFydDplbmRdID0gbGluZXMKICAgIHRyeToKICAgICAgICBmcCA9IG9wZW4ob3V0RmlsZU5hbWUsICd3JykKICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGVycjoKICAgICAgICBzeXMuc3RkZXJyLndyaXRlKCJJL08gZXJyb3I6ICVzXG4iICUgc3RyKGVycikpCiAgICAgICAgc3lzLmV4aXQoNCkKICAgIGZwLndyaXRlKCJcbiIuam9pbihmb3JtYXQpKQogICAgZnAuY2xvc2UoKQoKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBfbWFpbigpCg==',
'/Lib/tokenize.py':'',
'/Lib/traceback.py':'aW1wb3J0IHN5cwpkZWYgcHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycik6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICBmaWxlLndyaXRlKGV4Yy5pbmZvKQogICAgZmlsZS53cml0ZSgnXG4nK2V4Yy5fX25hbWVfXykKICAgIGlmIGV4Yy5tZXNzYWdlOgogICAgICAgIGZpbGUud3JpdGUoJzogJytleGMubWVzc2FnZSkKICAgIGZpbGUud3JpdGUoJ1xuJykK',
'/Lib/types.py':'IiIiCkRlZmluZSBuYW1lcyBmb3IgYnVpbHQtaW4gdHlwZXMgdGhhdCBhcmVuJ3QgZGlyZWN0bHkgYWNjZXNzaWJsZSBhcyBhIGJ1aWx0aW4uCiIiIgppbXBvcnQgc3lzCgojIEl0ZXJhdG9ycyBpbiBQeXRob24gYXJlbid0IGEgbWF0dGVyIG9mIHR5cGUgYnV0IG9mIHByb3RvY29sLiAgQSBsYXJnZQojIGFuZCBjaGFuZ2luZyBudW1iZXIgb2YgYnVpbHRpbiB0eXBlcyBpbXBsZW1lbnQgKnNvbWUqIGZsYXZvciBvZgojIGl0ZXJhdG9yLiAgRG9uJ3QgY2hlY2sgdGhlIHR5cGUhICBVc2UgaGFzYXR0ciB0byBjaGVjayBmb3IgYm90aAojICJfX2l0ZXJfXyIgYW5kICJfX25leHRfXyIgYXR0cmlidXRlcyBpbnN0ZWFkLgoKI2RlZiBfZigpOiBwYXNzCiNGdW5jdGlvblR5cGUgPSB0eXBlKF9mKQojTGFtYmRhVHlwZSA9IHR5cGUobGFtYmRhOiBOb25lKSAgICAgICAgICMgU2FtZSBhcyBGdW5jdGlvblR5cGUKI0NvZGVUeXBlID0gdHlwZShfZi5fX2NvZGVfXykKCiNkZWYgX2coKToKIyAgICB5aWVsZCAxCiNHZW5lcmF0b3JUeXBlID0gdHlwZShfZygpKQoKY2xhc3MgX0M6CiAgICBkZWYgX20oc2VsZik6IHBhc3MKTWV0aG9kVHlwZSA9IHR5cGUoX0MoKS5fbSkKCkJ1aWx0aW5GdW5jdGlvblR5cGUgPSB0eXBlKGxlbikKQnVpbHRpbk1ldGhvZFR5cGUgPSB0eXBlKFtdLmFwcGVuZCkgICAgICMgU2FtZSBhcyBCdWlsdGluRnVuY3Rpb25UeXBlCgpNb2R1bGVUeXBlID0gdHlwZShzeXMpCmRlZiBmb28oKTpwYXNzCkZ1bmN0aW9uVHlwZSA9IHR5cGUoZm9vKQojdHJ5OgojICAgIHJhaXNlIFR5cGVFcnJvcgojZXhjZXB0IFR5cGVFcnJvcjoKIyAgICB0YiA9IHN5cy5leGNfaW5mbygpWzJdCiMgICAgVHJhY2ViYWNrVHlwZSA9IHR5cGUodGIpCiMgICAgRnJhbWVUeXBlID0gdHlwZSh0Yi50Yl9mcmFtZSkKIyAgICB0YiA9IE5vbmU7IGRlbCB0YgoKIyBGb3IgSnl0aG9uLCB0aGUgZm9sbG93aW5nIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsCiNHZXRTZXREZXNjcmlwdG9yVHlwZSA9IHR5cGUoRnVuY3Rpb25UeXBlLl9fY29kZV9fKQojTWVtYmVyRGVzY3JpcHRvclR5cGUgPSB0eXBlKEZ1bmN0aW9uVHlwZS5fX2dsb2JhbHNfXykKCiNmaXhtZSBicnl0aG9uCiNkZWwgc3lzLCBfZiwgX2csIF9DLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTm90IGZvciBleHBvcnQK',
'/Lib/VFS_import.py':'aW1wb3J0IG9zCmZyb20gYnJvd3NlciBpbXBvcnQgZG9jCgojX3NjcmlwdHM9ZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpCiNfc2NyaXB0cy5zcmM9Ii9zcmMvcHlfVkZTLmpzIgojX3NjcmlwdHMudHlwZT0idGV4dC9qYXZhc2NyaXB0IgojZG9jLmdldCh0YWc9J2hlYWQnKVswXS5hcHBlbmRDaGlsZChfc2NyaXB0cykKClZGUz1kaWN0KEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5X1ZGUykpCmNsYXNzIFZGU01vZHVsZUZpbmRlcjoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXRoX2VudHJ5KToKICAgICAgICBwcmludCgiaW4gVkZTTW9kdWxlRmluZGVyIikKICAgICAgICBpZiBwYXRoX2VudHJ5LnN0YXJ0c3dpdGgoJy9saWJzJykgb3IgcGF0aF9lbnRyeS5zdGFydHN3aXRoKCcvTGliJyk6CiAgICAgICAgICAgc2VsZi5wYXRoX2VudHJ5PXBhdGhfZW50cnkKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBJbXBvcnRFcnJvcigpCiAgICAgICAgCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gJzwlcyBmb3IgIiVzIj4nICUgKHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBzZWxmLnBhdGhfZW50cnkpCiAgICAgICAgCiAgICBkZWYgZmluZF9tb2R1bGUoc2VsZiwgZnVsbG5hbWUsIHBhdGg9Tm9uZSk6CiAgICAgICAgcGF0aCA9IHBhdGggb3Igc2VsZi5wYXRoX2VudHJ5CiAgICAgICAgI3ByaW50KCdsb29raW5nIGZvciAiJXMiIGluICVzIC4uLicgJSAoZnVsbG5hbWUsIHBhdGgpKQogICAgICAgIGZvciBfZXh0IGluIFsnanMnLCAncHlqJywgJ3B5J106CiAgICAgICAgICAgIF9maWxlcGF0aD1vcy5wYXRoLmpvaW4oc2VsZi5wYXRoX2VudHJ5LCAnJXMuJXMnICUgKGZ1bGxuYW1lLCBfZXh0KSkKICAgICAgICAgICAgaWYgX2ZpbGVwYXRoIGluIFZGUzoKICAgICAgICAgICAgICAgcHJpbnQoIm1vZHVsZSBmb3VuZCBhdCAlczolcyIgJSAoX2ZpbGVwYXRoLCBmdWxsbmFtZSkpCiAgICAgICAgICAgICAgIHJldHVybiBWRlNNb2R1bGVMb2FkZXIoX2ZpbGVwYXRoLCBmdWxsbmFtZSkKCiAgICAgICAgcHJpbnQoJ21vZHVsZSAlcyBub3QgZm91bmQnICUgZnVsbG5hbWUpCiAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IoKQogICAgICAgIHJldHVybiBOb25lCgpjbGFzcyBWRlNNb2R1bGVMb2FkZXI6CiAgICAiIiJMb2FkIHNvdXJjZSBmb3IgbW9kdWxlcyIiIgogICAgCiAgICBkZWYgX19pbml0X18oc2VsZiwgZmlsZXBhdGgsIG5hbWUpOgogICAgICAgIHNlbGYuX2ZpbGVwYXRoPWZpbGVwYXRoCiAgICAgICAgc2VsZi5fbmFtZT1uYW1lCiAgICAgICAgCiAgICBkZWYgZ2V0X3NvdXJjZShzZWxmKToKICAgICAgICBpZiBzZWxmLl9maWxlcGF0aCBpbiBWRlM6CiAgICAgICAgICAgcmV0dXJuIEpTT2JqZWN0KHJlYWRGcm9tVkZTKHNlbGYuX2ZpbGVwYXRoKSkKCiAgICAgICAgcmFpc2UgSW1wb3J0RXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHNvdXJjZSBmb3IgJXMnICUgZnVsbG5hbWUpCgogICAgZGVmIGlzX3BhY2thZ2Uoc2VsZik6CiAgICAgICAgcmV0dXJuICcuJyBpbiBzZWxmLl9uYW1lCiAgICAgICAgICAgIAogICAgZGVmIGxvYWRfbW9kdWxlKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX25hbWUgaW4gc3lzLm1vZHVsZXM6CiAgICAgICAgICAgI3ByaW50KCdyZXVzaW5nIGV4aXN0aW5nIG1vZHVsZSBmcm9tIHByZXZpb3VzIGltcG9ydCBvZiAiJXMiJyAlIGZ1bGxuYW1lKQogICAgICAgICAgIG1vZCA9IHN5cy5tb2R1bGVzW3NlbGYuX25hbWVdCiAgICAgICAgICAgcmV0dXJuIG1vZAogICAgICAgIAogICAgICAgIF9zcmM9c2VsZi5nZXRfc291cmNlKCkKICAgICAgICBpZiBzZWxmLl9maWxlcGF0aC5lbmRzd2l0aCgnLmpzJyk6CiAgICAgICAgICAgbW9kPUpTT2JqZWN0KGltcG9ydF9qc19tb2R1bGUoX3NyYywgc2VsZi5fZmlsZXBhdGgsIHNlbGYuX25hbWUpKQogICAgICAgIGVsaWYgc2VsZi5fZmlsZXBhdGguZW5kc3dpdGgoJy5weScpOgogICAgICAgICAgIG1vZD1KU09iamVjdChpbXBvcnRfcHlfbW9kdWxlKF9zcmMsIHNlbGYuX2ZpbGVwYXRoLCBzZWxmLl9uYW1lKSkKICAgICAgICBlbGlmIHNlbGYuX2ZpbGVwYXRoLmVuZHN3aXRoKCcucHlqJyk6CiAgICAgICAgICAgbW9kPUpTT2JqZWN0KGltcG9ydF9weWpfbW9kdWxlKF9zcmMsIHNlbGYuX2ZpbGVwYXRoLCBzZWxmLl9uYW1lKSkKICAgICAgICBlbHNlOgogICAgICAgICAgIHJhaXNlIEltcG9ydEVycm9yKCdJbnZhbGlkIE1vZHVsZTogJXMnICUgc2VsZi5fZmlsZXBhdGgpCgogICAgICAgICMgU2V0IGEgZmV3IHByb3BlcnRpZXMgcmVxdWlyZWQgYnkgUEVQIDMwMgogICAgICAgIG1vZC5fX2ZpbGVfXyA9IHNlbGYuX2ZpbGVwYXRoCiAgICAgICAgbW9kLl9fbmFtZV9fID0gc2VsZi5fbmFtZQogICAgICAgIG1vZC5fX3BhdGhfXyA9IG9zLnBhdGguYWJzcGF0aChzZWxmLl9maWxlcGF0aCkKICAgICAgICBtb2QuX19sb2FkZXJfXyA9IHNlbGYKICAgICAgICBtb2QuX19wYWNrYWdlX18gPSAnLicuam9pbihzZWxmLl9uYW1lLnNwbGl0KCcuJylbOi0xXSkKICAgICAgICAKICAgICAgICBpZiBzZWxmLmlzX3BhY2thZ2UoKToKICAgICAgICAgICBwcmludCgnYWRkaW5nIHBhdGggZm9yIHBhY2thZ2UnKQogICAgICAgICAgICMgU2V0IF9fcGF0aF9fIGZvciBwYWNrYWdlcwogICAgICAgICAgICMgc28gd2UgY2FuIGZpbmQgdGhlIHN1Yi1tb2R1bGVzLgogICAgICAgICAgIG1vZC5fX3BhdGhfXyA9IFsgc2VsZi5wYXRoX2VudHJ5IF0KICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgnaW1wb3J0ZWQgYXMgcmVndWxhciBtb2R1bGUnKQogICAgICAgIAogICAgICAgIHByaW50KCdjcmVhdGluZyBhIG5ldyBtb2R1bGUgb2JqZWN0IGZvciAiJXMiJyAlIHNlbGYuX25hbWUpCiAgICAgICAgc3lzLm1vZHVsZXMuc2V0ZGVmYXVsdChzZWxmLl9uYW1lLCBtb2QpCiAgICAgICAgSlNPYmplY3QoX19CUllUSE9OX18uaW1wb3J0ZWQpW3NlbGYuX25hbWVdPW1vZAoKICAgICAgICByZXR1cm4gbW9kCgpKU09iamVjdChfX0JSWVRIT05fXy5wYXRoX2hvb2tzLmluc2VydCgwLCBWRlNNb2R1bGVGaW5kZXIpKQo=',
'/Lib/warnings.py':'',
'/Lib/weakref.py':'',
'/Lib/webbrowser.py':'X19hbGxfXyA9IFsiRXJyb3IiLCAib3BlbiIsICJvcGVuX25ldyIsICJvcGVuX25ld190YWIiXQoKY2xhc3MgRXJyb3IoRXhjZXB0aW9uKToKICAgIHBhc3MKCl90YXJnZXQgPSB7IDA6ICcnLCAxOiAnX2JsYW5rJywgMjogJ19uZXcnIH0gICMgaGFjay4uLgoKCmRlZiBvcGVuKHVybCwgbmV3PTAsIGF1dG9yYWlzZT1UcnVlKToKICAgICIiIiAKICAgIG5ldyB3aW5kb3cgb3IgdGFiIGlzIG5vdCBjb250cm9sbGFibGUKICAgIG9uIHRoZSBjbGllbnQgc2lkZS4gYXV0b3JhaXNlIG5vdCBhdmFpbGFibGUuCiAgICAiIiIKICAgIGlmIHdpbi5vcGVuKHVybCwgX3RhcmdldFtuZXddKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKZGVmIG9wZW5fbmV3KHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDEpCgpkZWYgb3Blbl9uZXdfdGFiKHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDIpCgoK',
'/Lib/_abcoll.py':'IyBDb3B5cmlnaHQgMjAwNyBHb29nbGUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIyBMaWNlbnNlZCB0byBQU0YgdW5kZXIgYSBDb250cmlidXRvciBBZ3JlZW1lbnQuCgoiIiJBYnN0cmFjdCBCYXNlIENsYXNzZXMgKEFCQ3MpIGZvciBjb2xsZWN0aW9ucywgYWNjb3JkaW5nIHRvIFBFUCAzMTE5LgoKRE9OJ1QgVVNFIFRISVMgTU9EVUxFIERJUkVDVExZISAgVGhlIGNsYXNzZXMgaGVyZSBzaG91bGQgYmUgaW1wb3J0ZWQKdmlhIGNvbGxlY3Rpb25zOyB0aGV5IGFyZSBkZWZpbmVkIGhlcmUgb25seSB0byBhbGxldmlhdGUgY2VydGFpbgpib290c3RyYXBwaW5nIGlzc3Vlcy4gIFVuaXQgdGVzdHMgYXJlIGluIHRlc3RfY29sbGVjdGlvbnMuCiIiIgoKI2Zyb20gYWJjIGltcG9ydCBBQkNNZXRhLCBhYnN0cmFjdG1ldGhvZAppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJIYXNoYWJsZSIsICJJdGVyYWJsZSIsICJJdGVyYXRvciIsCiAgICAgICAgICAgIlNpemVkIiwgIkNvbnRhaW5lciIsICJDYWxsYWJsZSIsCiAgICAgICAgICAgIlNldCIsICJNdXRhYmxlU2V0IiwKICAgICAgICAgICAiTWFwcGluZyIsICJNdXRhYmxlTWFwcGluZyIsCiAgICAgICAgICAgIk1hcHBpbmdWaWV3IiwgIktleXNWaWV3IiwgIkl0ZW1zVmlldyIsICJWYWx1ZXNWaWV3IiwKICAgICAgICAgICAiU2VxdWVuY2UiLCAiTXV0YWJsZVNlcXVlbmNlIiwKICAgICAgICAgICAiQnl0ZVN0cmluZyIsCiAgICAgICAgICAgXQoKIiIiCiMjIyBjb2xsZWN0aW9uIHJlbGF0ZWQgdHlwZXMgd2hpY2ggYXJlIG5vdCBleHBvc2VkIHRocm91Z2ggYnVpbHRpbiAjIyMKIyMgaXRlcmF0b3JzICMjCiNmaXhtZSBicnl0aG9uCiNieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcihiJycpKQpieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcignJykpCiNmaXhtZSBicnl0aG9uCiNieXRlYXJyYXlfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoYnl0ZWFycmF5KCkpKQojY2FsbGFibGVfaXRlcmF0b3IgPSA/Pz8KZGljdF9rZXlpdGVyYXRvciA9IHR5cGUoaXRlcih7fS5rZXlzKCkpKQpkaWN0X3ZhbHVlaXRlcmF0b3IgPSB0eXBlKGl0ZXIoe30udmFsdWVzKCkpKQpkaWN0X2l0ZW1pdGVyYXRvciA9IHR5cGUoaXRlcih7fS5pdGVtcygpKSkKbGlzdF9pdGVyYXRvciA9IHR5cGUoaXRlcihbXSkpCmxpc3RfcmV2ZXJzZWl0ZXJhdG9yID0gdHlwZShpdGVyKHJldmVyc2VkKFtdKSkpCnJhbmdlX2l0ZXJhdG9yID0gdHlwZShpdGVyKHJhbmdlKDApKSkKc2V0X2l0ZXJhdG9yID0gdHlwZShpdGVyKHNldCgpKSkKc3RyX2l0ZXJhdG9yID0gdHlwZShpdGVyKCIiKSkKdHVwbGVfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoKCkpKQp6aXBfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoemlwKCkpKQojIyB2aWV3cyAjIwpkaWN0X2tleXMgPSB0eXBlKHt9LmtleXMoKSkKZGljdF92YWx1ZXMgPSB0eXBlKHt9LnZhbHVlcygpKQpkaWN0X2l0ZW1zID0gdHlwZSh7fS5pdGVtcygpKQojIyBtaXNjICMjCmRpY3RfcHJveHkgPSB0eXBlKHR5cGUuX19kaWN0X18pCiIiIgoKZGVmIGFic3RyYWN0bWV0aG9kKHNlbGYpOgogICAgcmV0dXJuIHNlbGYKCiMjIyBPTkUtVFJJQ0sgUE9OSUVTICMjIwoKCiNjbGFzcyBJdGVyYWJsZShtZXRhY2xhc3M9QUJDTWV0YSk6CmNsYXNzIEl0ZXJhYmxlOgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHdoaWxlIEZhbHNlOgogICAgICAgICAgICB5aWVsZCBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBJdGVyYWJsZToKICAgICAgICAgICAgaWYgYW55KCJfX2l0ZXJfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCgojY2xhc3MgU2l6ZWQobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBTaXplZDoKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAwCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBTaXplZDoKICAgICAgICAgICAgaWYgYW55KCJfX2xlbl9fIiBpbiBCLl9fZGljdF9fIGZvciBCIGluIEMuX19tcm9fXyk6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKCiNjbGFzcyBDb250YWluZXIobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBDb250YWluZXI6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHgpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9fc3ViY2xhc3Nob29rX18oY2xzLCBDKToKICAgICAgICBpZiBjbHMgaXMgQ29udGFpbmVyOgogICAgICAgICAgICBpZiBhbnkoIl9fY29udGFpbnNfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiMjIyBNQVBQSU5HUyAjIyMKCgpjbGFzcyBNYXBwaW5nKFNpemVkLCBJdGVyYWJsZSwgQ29udGFpbmVyKToKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGZba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICByZXR1cm4gS2V5c1ZpZXcoc2VsZikKCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgcmV0dXJuIEl0ZW1zVmlldyhzZWxmKQoKICAgIGRlZiB2YWx1ZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIFZhbHVlc1ZpZXcoc2VsZikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgTWFwcGluZyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBkaWN0KHNlbGYuaXRlbXMoKSkgPT0gZGljdChvdGhlci5pdGVtcygpKQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3QgKHNlbGYgPT0gb3RoZXIpCgoKY2xhc3MgTXV0YWJsZU1hcHBpbmcoTWFwcGluZyk6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgcmFpc2UgS2V5RXJyb3IKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgX19tYXJrZXIgPSBvYmplY3QoKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCBkZWZhdWx0PV9fbWFya2VyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIHNlbGYuX19tYXJrZXI6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbCBzZWxmW2tleV0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBrZXkgPSBuZXh0KGl0ZXIoc2VsZikpCiAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yCiAgICAgICAgdmFsdWUgPSBzZWxmW2tleV0KICAgICAgICBkZWwgc2VsZltrZXldCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc2VsZi5wb3BpdGVtKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKCphcmdzLCAqKmt3ZHMpOgogICAgICAgIGlmIGxlbihhcmdzKSA+IDI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidXBkYXRlKCkgdGFrZXMgYXQgbW9zdCAyIHBvc2l0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyAoe30gZ2l2ZW4pIi5mb3JtYXQobGVuKGFyZ3MpKSkKICAgICAgICBlbGlmIG5vdCBhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInVwZGF0ZSgpIHRha2VzIGF0IGxlYXN0IDEgYXJndW1lbnQgKDAgZ2l2ZW4pIikKICAgICAgICBzZWxmID0gYXJnc1swXQogICAgICAgIG90aGVyID0gYXJnc1sxXSBpZiBsZW4oYXJncykgPj0gMiBlbHNlICgpCgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIE1hcHBpbmcpOgogICAgICAgICAgICBmb3Iga2V5IGluIG90aGVyOgogICAgICAgICAgICAgICAgc2VsZltrZXldID0gb3RoZXJba2V5XQogICAgICAgIGVsaWYgaGFzYXR0cihvdGhlciwgImtleXMiKToKICAgICAgICAgICAgZm9yIGtleSBpbiBvdGhlci5rZXlzKCk6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSBvdGhlcltrZXldCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gb3RoZXI6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3ZHMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWUKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmW2tleV0gPSBkZWZhdWx0CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiNNdXRhYmxlTWFwcGluZy5yZWdpc3RlcihkaWN0KQo=',
'/Lib/_codecs.py':'CmRlZiBhc2NpaV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgYXNjaWlfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGNoYXJidWZmZXJfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGNoYXJtYXBfYnVpbGQoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgY2hhcm1hcF9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgY2hhcm1hcF9lbmNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgZGVjb2RlKCphcmdzLCoqa3cpOgogICAgIiIiZGVjb2RlKG9iaiwgW2VuY29kaW5nWyxlcnJvcnNdXSkgLT4gb2JqZWN0ICAgIAogICAgRGVjb2RlcyBvYmogdXNpbmcgdGhlIGNvZGVjIHJlZ2lzdGVyZWQgZm9yIGVuY29kaW5nLiBlbmNvZGluZyBkZWZhdWx0cwogICAgdG8gdGhlIGRlZmF1bHQgZW5jb2RpbmcuIGVycm9ycyBtYXkgYmUgZ2l2ZW4gdG8gc2V0IGEgZGlmZmVyZW50IGVycm9yCiAgICBoYW5kbGluZyBzY2hlbWUuIERlZmF1bHQgaXMgJ3N0cmljdCcgbWVhbmluZyB0aGF0IGVuY29kaW5nIGVycm9ycyByYWlzZQogICAgYSBWYWx1ZUVycm9yLiBPdGhlciBwb3NzaWJsZSB2YWx1ZXMgYXJlICdpZ25vcmUnIGFuZCAncmVwbGFjZScKICAgIGFzIHdlbGwgYXMgYW55IG90aGVyIG5hbWUgcmVnaXN0ZXJlZCB3aXRoIGNvZGVjcy5yZWdpc3Rlcl9lcnJvciB0aGF0IGlzCiAgICBhYmxlIHRvIGhhbmRsZSBWYWx1ZUVycm9ycy4iIiIKICAgIHBhc3MKCmRlZiBlbmNvZGUoKmFyZ3MsKiprdyk6CiAgICAiIiJlbmNvZGUob2JqLCBbZW5jb2RpbmdbLGVycm9yc11dKSAtPiBvYmplY3QgICAgCiAgICBFbmNvZGVzIG9iaiB1c2luZyB0aGUgY29kZWMgcmVnaXN0ZXJlZCBmb3IgZW5jb2RpbmcuIGVuY29kaW5nIGRlZmF1bHRzCiAgICB0byB0aGUgZGVmYXVsdCBlbmNvZGluZy4gZXJyb3JzIG1heSBiZSBnaXZlbiB0byBzZXQgYSBkaWZmZXJlbnQgZXJyb3IKICAgIGhhbmRsaW5nIHNjaGVtZS4gRGVmYXVsdCBpcyAnc3RyaWN0JyBtZWFuaW5nIHRoYXQgZW5jb2RpbmcgZXJyb3JzIHJhaXNlCiAgICBhIFZhbHVlRXJyb3IuIE90aGVyIHBvc3NpYmxlIHZhbHVlcyBhcmUgJ2lnbm9yZScsICdyZXBsYWNlJyBhbmQKICAgICd4bWxjaGFycmVmcmVwbGFjZScgYXMgd2VsbCBhcyBhbnkgb3RoZXIgbmFtZSByZWdpc3RlcmVkIHdpdGgKICAgIGNvZGVjcy5yZWdpc3Rlcl9lcnJvciB0aGF0IGNhbiBoYW5kbGUgVmFsdWVFcnJvcnMuIiIiCiAgICBwYXNzCgpkZWYgZXNjYXBlX2RlY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBlc2NhcGVfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGxhdGluXzFfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGxhdGluXzFfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGxvb2t1cChlbmNvZGluZyk6CiAgICAiIiJsb29rdXAoZW5jb2RpbmcpIC0+IENvZGVjSW5mbyAgICAKICAgIExvb2tzIHVwIGEgY29kZWMgdHVwbGUgaW4gdGhlIFB5dGhvbiBjb2RlYyByZWdpc3RyeSBhbmQgcmV0dXJucwogICAgYSBDb2RlY0luZm8gb2JqZWN0LiIiIgogICAgcHJpbnQoJ19jb2RlY3MgbG9va3VwJyxlbmNvZGluZykKICAgIHJldHVybiBlbmNvZGluZwoKZGVmIGxvb2t1cF9lcnJvcigqYXJncywqKmt3KToKICAgICIiImxvb2t1cF9lcnJvcihlcnJvcnMpIC0+IGhhbmRsZXIgICAgCiAgICBSZXR1cm4gdGhlIGVycm9yIGhhbmRsZXIgZm9yIHRoZSBzcGVjaWZpZWQgZXJyb3IgaGFuZGxpbmcgbmFtZQogICAgb3IgcmFpc2UgYSBMb29rdXBFcnJvciwgaWYgbm8gaGFuZGxlciBleGlzdHMgdW5kZXIgdGhpcyBuYW1lLiIiIgogICAgcGFzcwoKZGVmIG1iY3NfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIG1iY3NfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHJhd191bmljb2RlX2VzY2FwZV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgcmF3X3VuaWNvZGVfZXNjYXBlX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiByZWFkYnVmZmVyX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiByZWdpc3RlcigqYXJncywqKmt3KToKICAgICIiInJlZ2lzdGVyKHNlYXJjaF9mdW5jdGlvbikgICAgCiAgICBSZWdpc3RlciBhIGNvZGVjIHNlYXJjaCBmdW5jdGlvbi4gU2VhcmNoIGZ1bmN0aW9ucyBhcmUgZXhwZWN0ZWQgdG8gdGFrZQogICAgb25lIGFyZ3VtZW50LCB0aGUgZW5jb2RpbmcgbmFtZSBpbiBhbGwgbG93ZXIgY2FzZSBsZXR0ZXJzLCBhbmQgcmV0dXJuCiAgICBhIHR1cGxlIG9mIGZ1bmN0aW9ucyAoZW5jb2RlciwgZGVjb2Rlciwgc3RyZWFtX3JlYWRlciwgc3RyZWFtX3dyaXRlcikKICAgIChvciBhIENvZGVjSW5mbyBvYmplY3QpLiIiIgogICAgcGFzcwoKZGVmIHJlZ2lzdGVyX2Vycm9yKCphcmdzLCoqa3cpOgogICAgIiIicmVnaXN0ZXJfZXJyb3IoZXJyb3JzLCBoYW5kbGVyKSAgICAKICAgIFJlZ2lzdGVyIHRoZSBzcGVjaWZpZWQgZXJyb3IgaGFuZGxlciB1bmRlciB0aGUgbmFtZQogICAgZXJyb3JzLiBoYW5kbGVyIG11c3QgYmUgYSBjYWxsYWJsZSBvYmplY3QsIHRoYXQKICAgIHdpbGwgYmUgY2FsbGVkIHdpdGggYW4gZXhjZXB0aW9uIGluc3RhbmNlIGNvbnRhaW5pbmcKICAgIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsb2NhdGlvbiBvZiB0aGUgZW5jb2RpbmcvZGVjb2RpbmcKICAgIGVycm9yIGFuZCBtdXN0IHJldHVybiBhIChyZXBsYWNlbWVudCwgbmV3IHBvc2l0aW9uKSB0dXBsZS4iIiIKICAgIHBhc3MKCmRlZiB1bmljb2RlX2VzY2FwZV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdW5pY29kZV9lc2NhcGVfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHVuaWNvZGVfaW50ZXJuYWxfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHVuaWNvZGVfaW50ZXJuYWxfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8xNl9iZV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzE2X2JlX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfMTZfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8xNl9lbmNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzE2X2V4X2RlY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfMTZfbGVfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8xNl9sZV9lbmNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzMyX2JlX2RlY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfMzJfYmVfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8zMl9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzMyX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfMzJfZXhfZGVjb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl8zMl9sZV9kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzMyX2xlX2VuY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfN19kZWNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgdXRmXzdfZW5jb2RlKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIHV0Zl84X2RlY29kZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiB1dGZfOF9lbmNvZGUoKmFyZ3MsKiprdyk6CiAgICBwYXNzCg==',
'/Lib/_collections.py':'',
'/Lib/_dummy_thread.py':'IiIiRHJvcC1pbiByZXBsYWNlbWVudCBmb3IgdGhlIHRocmVhZCBtb2R1bGUuCgpNZWFudCB0byBiZSB1c2VkIGFzIGEgYnJhaW4tZGVhZCBzdWJzdGl0dXRlIHNvIHRoYXQgdGhyZWFkZWQgY29kZSBkb2VzCm5vdCBuZWVkIHRvIGJlIHJld3JpdHRlbiBmb3Igd2hlbiB0aGUgdGhyZWFkIG1vZHVsZSBpcyBub3QgcHJlc2VudC4KClN1Z2dlc3RlZCB1c2FnZSBpczo6CgogICAgdHJ5OgogICAgICAgIGltcG9ydCBfdGhyZWFkCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IF9kdW1teV90aHJlYWQgYXMgX3RocmVhZAoKIiIiCiMgRXhwb3J0cyBvbmx5IHRoaW5ncyBzcGVjaWZpZWQgYnkgdGhyZWFkIGRvY3VtZW50YXRpb247CiMgc2tpcHBpbmcgb2Jzb2xldGUgc3lub255bXMgYWxsb2NhdGUoKSwgc3RhcnRfbmV3KCksIGV4aXRfdGhyZWFkKCkuCl9fYWxsX18gPSBbJ2Vycm9yJywgJ3N0YXJ0X25ld190aHJlYWQnLCAnZXhpdCcsICdnZXRfaWRlbnQnLCAnYWxsb2NhdGVfbG9jaycsCiAgICAgICAgICAgJ2ludGVycnVwdF9tYWluJywgJ0xvY2tUeXBlJ10KCiMgQSBkdW1teSB2YWx1ZQpUSU1FT1VUX01BWCA9IDIqKjMxCgojIE5PVEU6IHRoaXMgbW9kdWxlIGNhbiBiZSBpbXBvcnRlZCBlYXJseSBpbiB0aGUgZXh0ZW5zaW9uIGJ1aWxkaW5nIHByb2Nlc3MsCiMgYW5kIHNvIHRvcCBsZXZlbCBpbXBvcnRzIG9mIG90aGVyIG1vZHVsZXMgc2hvdWxkIGJlIGF2b2lkZWQuICBJbnN0ZWFkLCBhbGwKIyBpbXBvcnRzIGFyZSBkb25lIHdoZW4gbmVlZGVkIG9uIGEgZnVuY3Rpb24tYnktZnVuY3Rpb24gYmFzaXMuICBTaW5jZSB0aHJlYWRzCiMgYXJlIGRpc2FibGVkLCB0aGUgaW1wb3J0IGxvY2sgc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZSBhbnl3YXkgKD8/KS4KCmVycm9yID0gUnVudGltZUVycm9yCgpkZWYgc3RhcnRfbmV3X3RocmVhZChmdW5jdGlvbiwgYXJncywga3dhcmdzPXt9KToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuc3RhcnRfbmV3X3RocmVhZCgpLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWtpbmcgc3VyZSB0aGF0IGBgYXJnc2BgIGlzIGEKICAgIHR1cGxlIGFuZCBgYGt3YXJnc2BgIGlzIGEgZGljdGlvbmFyeS4gIElmIGFuIGV4Y2VwdGlvbiBpcyByYWlzZWQKICAgIGFuZCBpdCBpcyBTeXN0ZW1FeGl0ICh3aGljaCBjYW4gYmUgZG9uZSBieSBfdGhyZWFkLmV4aXQoKSkgaXQgaXMKICAgIGNhdWdodCBhbmQgbm90aGluZyBpcyBkb25lOyBhbGwgb3RoZXIgZXhjZXB0aW9ucyBhcmUgcHJpbnRlZCBvdXQKICAgIGJ5IHVzaW5nIHRyYWNlYmFjay5wcmludF9leGMoKS4KCiAgICBJZiB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24gY2FsbHMgaW50ZXJydXB0X21haW4gdGhlIEtleWJvYXJkSW50ZXJydXB0IHdpbGwgYmUKICAgIHJhaXNlZCB3aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zLgoKICAgICIiIgogICAgaWYgdHlwZShhcmdzKSAhPSB0eXBlKHR1cGxlKCkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiMm5kIGFyZyBtdXN0IGJlIGEgdHVwbGUiKQogICAgaWYgdHlwZShrd2FyZ3MpICE9IHR5cGUoZGljdCgpKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoIjNyZCBhcmcgbXVzdCBiZSBhIGRpY3QiKQogICAgZ2xvYmFsIF9tYWluCiAgICBfbWFpbiA9IEZhbHNlCiAgICB0cnk6CiAgICAgICAgZnVuY3Rpb24oKmFyZ3MsICoqa3dhcmdzKQogICAgZXhjZXB0IFN5c3RlbUV4aXQ6CiAgICAgICAgcGFzcwogICAgZXhjZXB0OgogICAgICAgIGltcG9ydCB0cmFjZWJhY2sKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgIF9tYWluID0gVHJ1ZQogICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgIGlmIF9pbnRlcnJ1cHQ6CiAgICAgICAgX2ludGVycnVwdCA9IEZhbHNlCiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKCmRlZiBleGl0KCk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLmV4aXQoKS4iIiIKICAgIHJhaXNlIFN5c3RlbUV4aXQKCmRlZiBnZXRfaWRlbnQoKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuZ2V0X2lkZW50KCkuCgogICAgU2luY2UgdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIF90aHJlYWRtb2R1bGUgaXMgbm90CiAgICBhdmFpbGFibGUsIGl0IGlzIHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhlIGN1cnJlbnQgcHJvY2VzcyBpcyB0aGUKICAgIG9ubHkgdGhyZWFkLiAgVGh1cyBhIGNvbnN0YW50IGNhbiBiZSBzYWZlbHkgcmV0dXJuZWQuCiAgICAiIiIKICAgIHJldHVybiAtMQoKZGVmIGFsbG9jYXRlX2xvY2soKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuYWxsb2NhdGVfbG9jaygpLiIiIgogICAgcmV0dXJuIExvY2tUeXBlKCkKCmRlZiBzdGFja19zaXplKHNpemU9Tm9uZSk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLnN0YWNrX3NpemUoKS4iIiIKICAgIGlmIHNpemUgaXMgbm90IE5vbmU6CiAgICAgICAgcmFpc2UgZXJyb3IoInNldHRpbmcgdGhyZWFkIHN0YWNrIHNpemUgbm90IHN1cHBvcnRlZCIpCiAgICByZXR1cm4gMAoKY2xhc3MgTG9ja1R5cGUob2JqZWN0KToKICAgICIiIkNsYXNzIGltcGxlbWVudGluZyBkdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLkxvY2tUeXBlLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWludGFpbmluZyBzZWxmLmxvY2tlZF9zdGF0dXMKICAgIHdoaWNoIGlzIGEgYm9vbGVhbiB0aGF0IHN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxvY2suICBQaWNrbGluZyBvZgogICAgdGhlIGxvY2ssIHRob3VnaCwgc2hvdWxkIG5vdCBiZSBkb25lIHNpbmNlIGlmIHRoZSBfdGhyZWFkIG1vZHVsZSBpcwogICAgdGhlbiB1c2VkIHdpdGggYW4gdW5waWNrbGVkIGBgbG9jaygpYGAgZnJvbSBoZXJlIHByb2JsZW1zIGNvdWxkCiAgICBvY2N1ciBmcm9tIHRoaXMgY2xhc3Mgbm90IGhhdmluZyBhdG9taWMgbWV0aG9kcy4KCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gRmFsc2UKCiAgICBkZWYgYWNxdWlyZShzZWxmLCB3YWl0ZmxhZz1Ob25lLCB0aW1lb3V0PS0xKToKICAgICAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBhY3F1aXJlKCkuCgogICAgICAgIEZvciBibG9ja2luZyBjYWxscywgc2VsZi5sb2NrZWRfc3RhdHVzIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvCiAgICAgICAgVHJ1ZSBhbmQgcmV0dXJuZWQgYXBwcm9wcmlhdGVseSBiYXNlZCBvbiB2YWx1ZSBvZgogICAgICAgIGBgd2FpdGZsYWdgYC4gIElmIGl0IGlzIG5vbi1ibG9ja2luZywgdGhlbiB0aGUgdmFsdWUgaXMKICAgICAgICBhY3R1YWxseSBjaGVja2VkIGFuZCBub3Qgc2V0IGlmIGl0IGlzIGFscmVhZHkgYWNxdWlyZWQuICBUaGlzCiAgICAgICAgaXMgYWxsIGRvbmUgc28gdGhhdCB0aHJlYWRpbmcuQ29uZGl0aW9uJ3MgYXNzZXJ0IHN0YXRlbWVudHMKICAgICAgICBhcmVuJ3QgdHJpZ2dlcmVkIGFuZCB0aHJvdyBhIGxpdHRsZSBmaXQuCgogICAgICAgICIiIgogICAgICAgIGlmIHdhaXRmbGFnIGlzIE5vbmUgb3Igd2FpdGZsYWc6CiAgICAgICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IFRydWUKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gVHJ1ZQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIHRpbWVvdXQgPiAwOgogICAgICAgICAgICAgICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCh0aW1lb3V0KQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgX19lbnRlcl9fID0gYWNxdWlyZQoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCB0eXAsIHZhbCwgdGIpOgogICAgICAgIHNlbGYucmVsZWFzZSgpCgogICAgZGVmIHJlbGVhc2Uoc2VsZik6CiAgICAgICAgIiIiUmVsZWFzZSB0aGUgZHVtbXkgbG9jay4iIiIKICAgICAgICAjIFhYWCBQZXJoYXBzIHNob3VsZG4ndCBhY3R1YWxseSBib3RoZXIgdG8gdGVzdD8gIENvdWxkIGxlYWQKICAgICAgICAjICAgICB0byBwcm9ibGVtcyBmb3IgY29tcGxleCwgdGhyZWFkZWQgY29kZS4KICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICByYWlzZSBlcnJvcgogICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgbG9ja2VkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmxvY2tlZF9zdGF0dXMKCiMgVXNlZCB0byBzaWduYWwgdGhhdCBpbnRlcnJ1cHRfbWFpbiB3YXMgY2FsbGVkIGluIGEgInRocmVhZCIKX2ludGVycnVwdCA9IEZhbHNlCiMgVHJ1ZSB3aGVuIG5vdCBleGVjdXRpbmcgaW4gYSAidGhyZWFkIgpfbWFpbiA9IFRydWUKCmRlZiBpbnRlcnJ1cHRfbWFpbigpOgogICAgIiIiU2V0IF9pbnRlcnJ1cHQgZmxhZyB0byBUcnVlIHRvIGhhdmUgc3RhcnRfbmV3X3RocmVhZCByYWlzZQogICAgS2V5Ym9hcmRJbnRlcnJ1cHQgdXBvbiBleGl0aW5nLiIiIgogICAgaWYgX21haW46CiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKICAgIGVsc2U6CiAgICAgICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgICAgICBfaW50ZXJydXB0ID0gVHJ1ZQo=',
'/Lib/_functools.py':'ZGVmIHBhcnRpYWwoZnVuYywgKmFyZ3MsICoqa2V5d29yZHMpOgogICAgZGVmIG5ld2Z1bmMoKmZhcmdzLCAqKmZrZXl3b3Jkcyk6CiAgICAgICAgbmV3a2V5d29yZHMgPSBrZXl3b3Jkcy5jb3B5KCkKICAgICAgICBuZXdrZXl3b3Jkcy51cGRhdGUoZmtleXdvcmRzKQogICAgICAgIHJldHVybiBmdW5jKCooYXJncyArIGZhcmdzKSwgKipuZXdrZXl3b3JkcykKICAgIG5ld2Z1bmMuZnVuYyA9IGZ1bmMKICAgIG5ld2Z1bmMuYXJncyA9IGFyZ3MKICAgIG5ld2Z1bmMua2V5d29yZHMgPSBrZXl3b3JkcwogICAgcmV0dXJuIG5ld2Z1bmMKCmRlZiByZWR1Y2UoZnVuYyxpdGVyYWJsZSxpbml0aWFsaXplcj1Ob25lKToKICAgIGFyZ3MgPSBpdGVyKGl0ZXJhYmxlKQogICAgaWYgaW5pdGlhbGl6ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgcmVzID0gaW5pdGlhbGl6ZXIKICAgIGVsc2U6CiAgICAgICAgcmVzID0gbmV4dChhcmcpCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzID0gZnVuYyhyZXMsbmV4dChhcmdzKSkKICAgICAgICBleGNlcHQgU3RvcEl0ZXJhdGlvbjoKICAgICAgICAgICAgcmV0dXJuIHJlcwo=',
'/Lib/_imp.py':'IiIiKEV4dHJlbWVseSkgbG93LWxldmVsIGltcG9ydCBtYWNoaW5lcnkgYml0cyBhcyB1c2VkIGJ5IGltcG9ydGxpYiBhbmQgaW1wLiIiIgoKCmNsYXNzIF9fbG9hZGVyX18ob2JqZWN0KTpwYXNzCgpkZWYgX2ZpeF9jb19maWxlbmFtZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBhY3F1aXJlX2xvY2soKmFyZ3MsKiprdyk6CiAgICAiIiJhY3F1aXJlX2xvY2soKSAtPiBOb25lICAgIEFjcXVpcmVzIHRoZSBpbnRlcnByZXRlcidzIGltcG9ydCBsb2NrIGZvciB0aGUgY3VycmVudCB0aHJlYWQuCiAgICBUaGlzIGxvY2sgc2hvdWxkIGJlIHVzZWQgYnkgaW1wb3J0IGhvb2tzIHRvIGVuc3VyZSB0aHJlYWQtc2FmZXR5CiAgICB3aGVuIGltcG9ydGluZyBtb2R1bGVzLgogICAgT24gcGxhdGZvcm1zIHdpdGhvdXQgdGhyZWFkcywgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdGhpbmcuIiIiCiAgICBwYXNzCgpkZWYgZXh0ZW5zaW9uX3N1ZmZpeGVzKCphcmdzLCoqa3cpOgogICAgIiIiZXh0ZW5zaW9uX3N1ZmZpeGVzKCkgLT4gbGlzdCBvZiBzdHJpbmdzICAgIFJldHVybnMgdGhlIGxpc3Qgb2YgZmlsZSBzdWZmaXhlcyB1c2VkIHRvIGlkZW50aWZ5IGV4dGVuc2lvbiBtb2R1bGVzLiIiIgogICAgcmV0dXJuIFsnLnB5ZCddCgpkZWYgZ2V0X2Zyb3plbl9vYmplY3QoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgaW5pdF9idWlsdGluKG1vZHVsZSwqYXJncywqKmt3KToKICAgIHJldHVybiBfX2ltcG9ydF9fKG1vZHVsZSkKCmRlZiBpbml0X2Zyb3plbigqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBpc19idWlsdGluKCphcmdzLCoqa3cpOgogICAgcGFzcwoKZGVmIGlzX2Zyb3plbigqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBpc19mcm96ZW5fcGFja2FnZSgqYXJncywqKmt3KToKICAgIHBhc3MKCmRlZiBsb2FkX2R5bmFtaWMoKmFyZ3MsKiprdyk6CiAgICBwYXNzCgpkZWYgbG9ja19oZWxkKCphcmdzLCoqa3cpOgogICAgIiIibG9ja19oZWxkKCkgLT4gYm9vbGVhbiAgICBSZXR1cm4gVHJ1ZSBpZiB0aGUgaW1wb3J0IGxvY2sgaXMgY3VycmVudGx5IGhlbGQsIGVsc2UgRmFsc2UuCiAgICBPbiBwbGF0Zm9ybXMgd2l0aG91dCB0aHJlYWRzLCByZXR1cm4gRmFsc2UuIiIiCiAgICBwYXNzCgpkZWYgcmVsZWFzZV9sb2NrKCphcmdzLCoqa3cpOgogICAgIiIicmVsZWFzZV9sb2NrKCkgLT4gTm9uZSAgICBSZWxlYXNlIHRoZSBpbnRlcnByZXRlcidzIGltcG9ydCBsb2NrLgogICAgT24gcGxhdGZvcm1zIHdpdGhvdXQgdGhyZWFkcywgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdGhpbmcuIiIiCiAgICBwYXNzCg==',
'/Lib/_pyio.py':'IyAiUHl0aG9uIGltcGxlbWVudGF0aW9uIG9mIHRoZSBpbyBtb2R1bGUuIgoKaW1wb3J0IG9zCiNpbXBvcnQgYWJjCmltcG9ydCBjb2RlY3MKaW1wb3J0IHdhcm5pbmdzCmltcG9ydCBlcnJubwojIEltcG9ydCBfdGhyZWFkIGluc3RlYWQgb2YgdGhyZWFkaW5nIHRvIHJlZHVjZSBzdGFydHVwIGNvc3QKI3RyeToKIyAgICBmcm9tIF90aHJlYWQgaW1wb3J0IGFsbG9jYXRlX2xvY2sgYXMgTG9jawojZXhjZXB0IEltcG9ydEVycm9yOgpmcm9tIF9kdW1teV90aHJlYWQgaW1wb3J0IGFsbG9jYXRlX2xvY2sgYXMgTG9jawoKI2ltcG9ydCBpbwojZnJvbSBpbyBpbXBvcnQgKF9fYWxsX18sIFNFRUtfU0VULCBTRUVLX0NVUiwgU0VFS19FTkQpCmZyb20gZXJybm8gaW1wb3J0IEVJTlRSCgojIGZvciBzZWVrKCkgICAodGFrZW4gZnJvbSBpby5weSkKU0VFS19TRVQgPSAwClNFRUtfQ1VSID0gMQpTRUVLX0VORCA9IDIKCiMgb3BlbigpIHVzZXMgc3RfYmxrc2l6ZSB3aGVuZXZlciB3ZSBjYW4KREVGQVVMVF9CVUZGRVJfU0laRSA9IDggKiAxMDI0ICAjIGJ5dGVzCgojIE5PVEU6IEJhc2UgY2xhc3NlcyBkZWZpbmVkIGhlcmUgYXJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgIm9mZmljaWFsIiBBQkNzCiMgZGVmaW5lZCBpbiBpby5weS4gV2UgZG9uJ3QgdXNlIHJlYWwgaW5oZXJpdGFuY2UgdGhvdWdoLCBiZWNhdXNlIHdlIGRvbid0CiMgd2FudCB0byBpbmhlcml0IHRoZSBDIGltcGxlbWVudGF0aW9ucy4KCmNsYXNzIEJsb2NraW5nSU9FcnJvcihJT0Vycm9yKToKICAgICJFeGNlcHRpb24gcmFpc2VkIHdoZW4gSS9PIHdvdWxkIGJsb2NrIG9uIGEgbm9uLWJsb2NraW5nIEkvTyBzdHJlYW0uIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBlcnJubywgc3RyZXJyb3IsIGNoYXJhY3RlcnNfd3JpdHRlbj0wKToKICAgICAgICAjc3VwZXIoKS5fX2luaXRfXyhlcnJubywgc3RyZXJyb3IpICAgI2ZpeG1lCiAgICAgICAgSU9FcnJvci5fX2luaXRfXyhzZWxmLCBlcnJubywgc3RyZXJyb3IpCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoY2hhcmFjdGVyc193cml0dGVuLCBpbnQpOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImNoYXJhY3RlcnNfd3JpdHRlbiBtdXN0IGJlIGEgaW50ZWdlciIpCiAgICAgICAgc2VsZi5jaGFyYWN0ZXJzX3dyaXR0ZW4gPSBjaGFyYWN0ZXJzX3dyaXR0ZW4KCgpkZWYgb3BlbihmaWxlLCBtb2RlPSJyIiwgYnVmZmVyaW5nPS0xLCBlbmNvZGluZz1Ob25lLCBlcnJvcnM9Tm9uZSxcCiAgICAgICAgIG5ld2xpbmU9Tm9uZSwgY2xvc2VmZD1UcnVlKToKCiAgICBpZiBub3QgaXNpbnN0YW5jZShmaWxlLCAoc3RyLCBieXRlcywgaW50KSk6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJpbnZhbGlkIGZpbGU6ICVyIiAlIGZpbGUpCiAgICBpZiBub3QgaXNpbnN0YW5jZShtb2RlLCBzdHIpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiaW52YWxpZCBtb2RlOiAlciIgJSBtb2RlKQogICAgaWYgbm90IGlzaW5zdGFuY2UoYnVmZmVyaW5nLCBpbnQpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiaW52YWxpZCBidWZmZXJpbmc6ICVyIiAlIGJ1ZmZlcmluZykKICAgIGlmIGVuY29kaW5nIGlzIG5vdCBOb25lIGFuZCBub3QgaXNpbnN0YW5jZShlbmNvZGluZywgc3RyKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoImludmFsaWQgZW5jb2Rpbmc6ICVyIiAlIGVuY29kaW5nKQogICAgaWYgZXJyb3JzIGlzIG5vdCBOb25lIGFuZCBub3QgaXNpbnN0YW5jZShlcnJvcnMsIHN0cik6CiAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJpbnZhbGlkIGVycm9yczogJXIiICUgZXJyb3JzKQogICAgbW9kZXMgPSBzZXQobW9kZSkKICAgIGlmIG1vZGVzIC0gc2V0KCJhcndiK3RVIikgb3IgbGVuKG1vZGUpID4gbGVuKG1vZGVzKToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJpbnZhbGlkIG1vZGU6ICVyIiAlIG1vZGUpCiAgICByZWFkaW5nID0gInIiIGluIG1vZGVzCiAgICB3cml0aW5nID0gInciIGluIG1vZGVzCiAgICBhcHBlbmRpbmcgPSAiYSIgaW4gbW9kZXMKICAgIHVwZGF0aW5nID0gIisiIGluIG1vZGVzCiAgICB0ZXh0ID0gInQiIGluIG1vZGVzCiAgICBiaW5hcnkgPSAiYiIgaW4gbW9kZXMKICAgIGlmICJVIiBpbiBtb2RlczoKICAgICAgICBpZiB3cml0aW5nIG9yIGFwcGVuZGluZzoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiY2FuJ3QgdXNlIFUgYW5kIHdyaXRpbmcgbW9kZSBhdCBvbmNlIikKICAgICAgICByZWFkaW5nID0gVHJ1ZQogICAgaWYgdGV4dCBhbmQgYmluYXJ5OgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImNhbid0IGhhdmUgdGV4dCBhbmQgYmluYXJ5IG1vZGUgYXQgb25jZSIpCiAgICBpZiByZWFkaW5nICsgd3JpdGluZyArIGFwcGVuZGluZyA+IDE6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiY2FuJ3QgaGF2ZSByZWFkL3dyaXRlL2FwcGVuZCBtb2RlIGF0IG9uY2UiKQogICAgaWYgbm90IChyZWFkaW5nIG9yIHdyaXRpbmcgb3IgYXBwZW5kaW5nKToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJtdXN0IGhhdmUgZXhhY3RseSBvbmUgb2YgcmVhZC93cml0ZS9hcHBlbmQgbW9kZSIpCiAgICBpZiBiaW5hcnkgYW5kIGVuY29kaW5nIGlzIG5vdCBOb25lOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImJpbmFyeSBtb2RlIGRvZXNuJ3QgdGFrZSBhbiBlbmNvZGluZyBhcmd1bWVudCIpCiAgICBpZiBiaW5hcnkgYW5kIGVycm9ycyBpcyBub3QgTm9uZToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJiaW5hcnkgbW9kZSBkb2Vzbid0IHRha2UgYW4gZXJyb3JzIGFyZ3VtZW50IikKICAgIGlmIGJpbmFyeSBhbmQgbmV3bGluZSBpcyBub3QgTm9uZToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJiaW5hcnkgbW9kZSBkb2Vzbid0IHRha2UgYSBuZXdsaW5lIGFyZ3VtZW50IikKICAgIHJhdyA9IEZpbGVJTyhmaWxlLAogICAgICAgICAgICAgICAgIChyZWFkaW5nIGFuZCAiciIgb3IgIiIpICsKICAgICAgICAgICAgICAgICAod3JpdGluZyBhbmQgInciIG9yICIiKSArCiAgICAgICAgICAgICAgICAgKGFwcGVuZGluZyBhbmQgImEiIG9yICIiKSArCiAgICAgICAgICAgICAgICAgKHVwZGF0aW5nIGFuZCAiKyIgb3IgIiIpLAogICAgICAgICAgICAgICAgIGNsb3NlZmQpCiAgICBsaW5lX2J1ZmZlcmluZyA9IEZhbHNlCiAgICBpZiBidWZmZXJpbmcgPT0gMSBvciBidWZmZXJpbmcgPCAwIGFuZCByYXcuaXNhdHR5KCk6CiAgICAgICAgYnVmZmVyaW5nID0gLTEKICAgICAgICBsaW5lX2J1ZmZlcmluZyA9IFRydWUKICAgIGlmIGJ1ZmZlcmluZyA8IDA6CiAgICAgICAgYnVmZmVyaW5nID0gREVGQVVMVF9CVUZGRVJfU0laRQogICAgICAgIHRyeToKICAgICAgICAgICAgYnMgPSBvcy5mc3RhdChyYXcuZmlsZW5vKCkpLnN0X2Jsa3NpemUKICAgICAgICAjZXhjZXB0IChvcy5lcnJvciwgQXR0cmlidXRlRXJyb3IpOiAgICNmaXhtZQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIGJzID4gMToKICAgICAgICAgICAgICAgIGJ1ZmZlcmluZyA9IGJzCiAgICBpZiBidWZmZXJpbmcgPCAwOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImludmFsaWQgYnVmZmVyaW5nIHNpemUiKQogICAgaWYgYnVmZmVyaW5nID09IDA6CiAgICAgICAgaWYgYmluYXJ5OgogICAgICAgICAgICByZXR1cm4gcmF3CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiY2FuJ3QgaGF2ZSB1bmJ1ZmZlcmVkIHRleHQgSS9PIikKICAgIGlmIHVwZGF0aW5nOgogICAgICAgIGJ1ZmZlciA9IEJ1ZmZlcmVkUmFuZG9tKHJhdywgYnVmZmVyaW5nKQogICAgZWxpZiB3cml0aW5nIG9yIGFwcGVuZGluZzoKICAgICAgICBidWZmZXIgPSBCdWZmZXJlZFdyaXRlcihyYXcsIGJ1ZmZlcmluZykKICAgIGVsaWYgcmVhZGluZzoKICAgICAgICBidWZmZXIgPSBCdWZmZXJlZFJlYWRlcihyYXcsIGJ1ZmZlcmluZykKICAgIGVsc2U6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigidW5rbm93biBtb2RlOiAlciIgJSBtb2RlKQogICAgaWYgYmluYXJ5OgogICAgICAgIHJldHVybiBidWZmZXIKICAgIHRleHQgPSBUZXh0SU9XcmFwcGVyKGJ1ZmZlciwgZW5jb2RpbmcsIGVycm9ycywgbmV3bGluZSwgbGluZV9idWZmZXJpbmcpCiAgICB0ZXh0Lm1vZGUgPSBtb2RlCiAgICByZXR1cm4gdGV4dAoKCmNsYXNzIERvY0Rlc2NyaXB0b3I6CiAgICAiSGVscGVyIGZvciBidWlsdGlucy5vcGVuLl9fZG9jX18iCiAgICBkZWYgX19nZXRfXyhzZWxmLCBvYmosIHR5cCk6CiAgICAgICAgcmV0dXJuICgKICAgICAgICAgICAgIm9wZW4oZmlsZSwgbW9kZT0ncicsIGJ1ZmZlcmluZz0tMSwgZW5jb2Rpbmc9Tm9uZSwgIgogICAgICAgICAgICAgICAgICJlcnJvcnM9Tm9uZSwgbmV3bGluZT1Ob25lLCBjbG9zZWZkPVRydWUpXG5cbiIgKwogICAgICAgICAgICBvcGVuLl9fZG9jX18pCgpjbGFzcyBPcGVuV3JhcHBlcjoKICAgIF9fZG9jX18gPSBEb2NEZXNjcmlwdG9yKCkKCiAgICBkZWYgX19uZXdfXyhjbHMsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgcmV0dXJuIG9wZW4oKmFyZ3MsICoqa3dhcmdzKQoKCiMgSW4gbm9ybWFsIG9wZXJhdGlvbiwgYm90aCBgVW5zdXBwb3J0ZWRPcGVyYXRpb25gcyBzaG91bGQgYmUgYm91bmQgdG8gdGhlCiMgc2FtZSBvYmplY3QuCiN0cnk6CiAgICAjQkUgY29tbWVudGVkIHRoaXMgb3V0IHNpbmNlIHdlIGFyZSBub3QgaW1wb3J0aW5nIGlvIG1vZHVsZQogICAgI1Vuc3VwcG9ydGVkT3BlcmF0aW9uID0gaW8uVW5zdXBwb3J0ZWRPcGVyYXRpb24KICAgIHBhc3MKI2V4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKY2xhc3MgVW5zdXBwb3J0ZWRPcGVyYXRpb24oVmFsdWVFcnJvciwgSU9FcnJvcik6CiAgIHBhc3MKCgojY2xhc3MgSU9CYXNlKG1ldGFjbGFzcz1hYmMuQUJDTWV0YSk6ICAgI2ZpeG1lCmNsYXNzIElPQmFzZToKCiAgICAjIyMgSW50ZXJuYWwgIyMjCgogICAgZGVmIF91bnN1cHBvcnRlZChzZWxmLCBuYW1lKToKICAgICAgICAiSW50ZXJuYWw6IHJhaXNlIGFuIElPRXJyb3IgZXhjZXB0aW9uIGZvciB1bnN1cHBvcnRlZCBvcGVyYXRpb25zLiIKICAgICAgICByYWlzZSBVbnN1cHBvcnRlZE9wZXJhdGlvbigiJXMuJXMoKSBub3Qgc3VwcG9ydGVkIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBuYW1lKSkKCiAgICAjIyMgUG9zaXRpb25pbmcgIyMjCgogICAgZGVmIHNlZWsoc2VsZiwgcG9zLCB3aGVuY2U9MCk6CiAgICAgICAgc2VsZi5fdW5zdXBwb3J0ZWQoInNlZWsiKQoKICAgIGRlZiB0ZWxsKHNlbGYpOgogICAgICAgICJSZXR1cm4gYW4gaW50IGluZGljYXRpbmcgdGhlIGN1cnJlbnQgc3RyZWFtIHBvc2l0aW9uLiIKICAgICAgICByZXR1cm4gc2VsZi5zZWVrKDAsIDEpCgogICAgZGVmIHRydW5jYXRlKHNlbGYsIHBvcz1Ob25lKToKICAgICAgICAjIlRydW5jYXRlIGZpbGUgdG8gc2l6ZSBieXRlcy4KICAgICAgICAjCiAgICAgICAgI1NpemUgZGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgSU8gcG9zaXRpb24gYXMgcmVwb3J0ZWQgYnkgdGVsbCgpLiAgUmV0dXJuCiAgICAgICAgI3RoZSBuZXcgc2l6ZS4KICAgICAgICAjIgogICAgICAgIHNlbGYuX3Vuc3VwcG9ydGVkKCJ0cnVuY2F0ZSIpCgogICAgIyMjIEZsdXNoIGFuZCBjbG9zZSAjIyMKCiAgICBkZWYgZmx1c2goc2VsZik6CiAgICAgICAgIyJGbHVzaCB3cml0ZSBidWZmZXJzLCBpZiBhcHBsaWNhYmxlLgogICAgICAgICMKICAgICAgICAjVGhpcyBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIHJlYWQtb25seSBhbmQgbm9uLWJsb2NraW5nIHN0cmVhbXMuCiAgICAgICAgIyIKICAgICAgICBzZWxmLl9jaGVja0Nsb3NlZCgpCiAgICAgICAgIyBYWFggU2hvdWxkIHRoaXMgcmV0dXJuIHRoZSBudW1iZXIgb2YgYnl0ZXMgd3JpdHRlbj8/PwoKICAgIF9fY2xvc2VkID0gRmFsc2UKCiAgICBkZWYgY2xvc2Uoc2VsZik6CiAgICAgICAgIyJGbHVzaCBhbmQgY2xvc2UgdGhlIElPIG9iamVjdC4KCiAgICAgICAgI1RoaXMgbWV0aG9kIGhhcyBubyBlZmZlY3QgaWYgdGhlIGZpbGUgaXMgYWxyZWFkeSBjbG9zZWQuCiAgICAgICAgIyIKICAgICAgICBpZiBub3Qgc2VsZi5fX2Nsb3NlZDoKICAgICAgICAgICAgc2VsZi5mbHVzaCgpCiAgICAgICAgICAgIHNlbGYuX19jbG9zZWQgPSBUcnVlCgogICAgZGVmIF9fZGVsX18oc2VsZik6CiAgICAgICAgIyJEZXN0cnVjdG9yLiAgQ2FsbHMgY2xvc2UoKS4iCiAgICAgICAgIyBUaGUgdHJ5L2V4Y2VwdCBibG9jayBpcyBpbiBjYXNlIHRoaXMgaXMgY2FsbGVkIGF0IHByb2dyYW0KICAgICAgICAjIGV4aXQgdGltZSwgd2hlbiBpdCdzIHBvc3NpYmxlIHRoYXQgZ2xvYmFscyBoYXZlIGFscmVhZHkgYmVlbgogICAgICAgICMgZGVsZXRlZCwgYW5kIHRoZW4gdGhlIGNsb3NlKCkgY2FsbCBtaWdodCBmYWlsLiAgU2luY2UKICAgICAgICAjIHRoZXJlJ3Mgbm90aGluZyB3ZSBjYW4gZG8gYWJvdXQgc3VjaCBmYWlsdXJlcyBhbmQgdGhleSBhbm5veQogICAgICAgICMgdGhlIGVuZCB1c2Vycywgd2Ugc3VwcHJlc3MgdGhlIHRyYWNlYmFjay4KICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGYuY2xvc2UoKQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwoKICAgICMjIyBJbnF1aXJpZXMgIyMjCgogICAgZGVmIHNlZWthYmxlKHNlbGYpOgogICAgICAgICMiUmV0dXJuIGEgYm9vbCBpbmRpY2F0aW5nIHdoZXRoZXIgb2JqZWN0IHN1cHBvcnRzIHJhbmRvbSBhY2Nlc3MuCiAgICAgICAgIwogICAgICAgICNJZiBGYWxzZSwgc2VlaygpLCB0ZWxsKCkgYW5kIHRydW5jYXRlKCkgd2lsbCByYWlzZSBVbnN1cHBvcnRlZE9wZXJhdGlvbi4KICAgICAgICAjVGhpcyBtZXRob2QgbWF5IG5lZWQgdG8gZG8gYSB0ZXN0IHNlZWsoKS4KICAgICAgICAjIgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBfY2hlY2tTZWVrYWJsZShzZWxmLCBtc2c9Tm9uZSk6CiAgICAgICAgIyJJbnRlcm5hbDogcmFpc2UgVW5zdXBwb3J0ZWRPcGVyYXRpb24gaWYgZmlsZSBpcyBub3Qgc2Vla2FibGUKICAgICAgICAjIgogICAgICAgIGlmIG5vdCBzZWxmLnNlZWthYmxlKCk6CiAgICAgICAgICAgIHJhaXNlIFVuc3VwcG9ydGVkT3BlcmF0aW9uKCJGaWxlIG9yIHN0cmVhbSBpcyBub3Qgc2Vla2FibGUuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBtc2cgaXMgTm9uZSBlbHNlIG1zZykKCiAgICBkZWYgcmVhZGFibGUoc2VsZik6CiAgICAgICAgIyJSZXR1cm4gYSBib29sIGluZGljYXRpbmcgd2hldGhlciBvYmplY3Qgd2FzIG9wZW5lZCBmb3IgcmVhZGluZy4KCiAgICAgICAgI0lmIEZhbHNlLCByZWFkKCkgd2lsbCByYWlzZSBVbnN1cHBvcnRlZE9wZXJhdGlvbi4KICAgICAgICAjIgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBfY2hlY2tSZWFkYWJsZShzZWxmLCBtc2c9Tm9uZSk6CiAgICAgICAgIyJJbnRlcm5hbDogcmFpc2UgVW5zdXBwb3J0ZWRPcGVyYXRpb24gaWYgZmlsZSBpcyBub3QgcmVhZGFibGUKICAgICAgICAjIgogICAgICAgIGlmIG5vdCBzZWxmLnJlYWRhYmxlKCk6CiAgICAgICAgICAgIHJhaXNlIFVuc3VwcG9ydGVkT3BlcmF0aW9uKCJGaWxlIG9yIHN0cmVhbSBpcyBub3QgcmVhZGFibGUuIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBtc2cgaXMgTm9uZSBlbHNlIG1zZykKCiAgICBkZWYgd3JpdGFibGUoc2VsZik6CiAgICAgICAgIyJSZXR1cm4gYSBib29sIGluZGljYXRpbmcgd2hldGhlciBvYmplY3Qgd2FzIG9wZW5lZCBmb3Igd3JpdGluZy4KCiAgICAgICAgI0lmIEZhbHNlLCB3cml0ZSgpIGFuZCB0cnVuY2F0ZSgpIHdpbGwgcmFpc2UgVW5zdXBwb3J0ZWRPcGVyYXRpb24uCiAgICAgICAgIyIKICAgICAgICByZXR1cm4gRmFsc2UKCiAgICBkZWYgX2NoZWNrV3JpdGFibGUoc2VsZiwgbXNnPU5vbmUpOgogICAgICAgICMiSW50ZXJuYWw6IHJhaXNlIFVuc3VwcG9ydGVkT3BlcmF0aW9uIGlmIGZpbGUgaXMgbm90IHdyaXRhYmxlCiAgICAgICAgIyIKICAgICAgICBpZiBub3Qgc2VsZi53cml0YWJsZSgpOgogICAgICAgICAgICByYWlzZSBVbnN1cHBvcnRlZE9wZXJhdGlvbigiRmlsZSBvciBzdHJlYW0gaXMgbm90IHdyaXRhYmxlLiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbXNnIGlzIE5vbmUgZWxzZSBtc2cpCgogICAgIyMgZml4bWUuLiAgd2UgbmVlZCB0byBpbXBsZW1lbnQgcHJvcGVydHkgdmlhIGRlY29yYXRvcnMuCiAgICAjIyBAcHJvcGVydHkKICAgIGRlZiBjbG9zZWQoc2VsZik6CiAgICAgICAgIyJjbG9zZWQ6IGJvb2wuICBUcnVlIGlmZiB0aGUgZmlsZSBoYXMgYmVlbiBjbG9zZWQuCgogICAgICAgICNGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHRoaXMgaXMgYSBwcm9wZXJ0eSwgbm90IGEgcHJlZGljYXRlLgogICAgICAgICMiCiAgICAgICAgcmV0dXJuIHNlbGYuX19jbG9zZWQKCiAgICBkZWYgX2NoZWNrQ2xvc2VkKHNlbGYsIG1zZz1Ob25lKToKICAgICAgICAjIkludGVybmFsOiByYWlzZSBhbiBWYWx1ZUVycm9yIGlmIGZpbGUgaXMgY2xvc2VkCiAgICAgICAgIyIKICAgICAgICBpZiBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiSS9PIG9wZXJhdGlvbiBvbiBjbG9zZWQgZmlsZS4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbXNnIGlzIE5vbmUgZWxzZSBtc2cpCgogICAgIyMjIENvbnRleHQgbWFuYWdlciAjIyMKCiAgICBkZWYgX19lbnRlcl9fKHNlbGYpOiAgIyBUaGF0J3MgYSBmb3J3YXJkIHJlZmVyZW5jZQogICAgICAgICMiQ29udGV4dCBtYW5hZ2VtZW50IHByb3RvY29sLiAgUmV0dXJucyBzZWxmIChhbiBpbnN0YW5jZSBvZiBJT0Jhc2UpIgogICAgICAgIHNlbGYuX2NoZWNrQ2xvc2VkKCkKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCAqYXJncyk6CiAgICAgICAgIyJDb250ZXh0IG1hbmFnZW1lbnQgcHJvdG9jb2wuICBDYWxscyBjbG9zZSgpIgogICAgICAgIHNlbGYuY2xvc2UoKQoKICAgICMjIyBMb3dlci1sZXZlbCBBUElzICMjIwoKICAgICMgWFhYIFNob3VsZCB0aGVzZSBiZSBwcmVzZW50IGV2ZW4gaWYgdW5pbXBsZW1lbnRlZD8KCiAgICBkZWYgZmlsZW5vKHNlbGYpOgogICAgICAgICMiUmV0dXJucyB1bmRlcmx5aW5nIGZpbGUgZGVzY3JpcHRvciAoYW4gaW50KSBpZiBvbmUgZXhpc3RzLgoKICAgICAgICAjQW4gSU9FcnJvciBpcyByYWlzZWQgaWYgdGhlIElPIG9iamVjdCBkb2VzIG5vdCB1c2UgYSBmaWxlIGRlc2NyaXB0b3IuCiAgICAgICAgIyIKICAgICAgICBzZWxmLl91bnN1cHBvcnRlZCgiZmlsZW5vIikKCiAgICBkZWYgaXNhdHR5KHNlbGYpOgogICAgICAgICMiUmV0dXJuIGEgYm9vbCBpbmRpY2F0aW5nIHdoZXRoZXIgdGhpcyBpcyBhbiAnaW50ZXJhY3RpdmUnIHN0cmVhbS4KCiAgICAgICAgI1JldHVybiBGYWxzZSBpZiBpdCBjYW4ndCBiZSBkZXRlcm1pbmVkLgogICAgICAgICMiCiAgICAgICAgc2VsZi5fY2hlY2tDbG9zZWQoKQogICAgICAgIHJldHVybiBGYWxzZQoKICAgICMjIyBSZWFkbGluZVtzXSBhbmQgd3JpdGVsaW5lcyAjIyMKCiAgICBkZWYgcmVhZGxpbmUoc2VsZiwgbGltaXQ9LTEpOgogICAgICAgICMgRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LCBhIChzbG93aXNoKSByZWFkbGluZSgpLgogICAgICAgIGlmIGhhc2F0dHIoc2VsZiwgInBlZWsiKToKICAgICAgICAgICAgZGVmIG5yZWFkYWhlYWQoKToKICAgICAgICAgICAgICAgIHJlYWRhaGVhZCA9IHNlbGYucGVlaygxKQogICAgICAgICAgICAgICAgaWYgbm90IHJlYWRhaGVhZDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMQogICAgICAgICAgICAgICAgI24gPSAocmVhZGFoZWFkLmZpbmQoYiJcbiIpICsgMSkgb3IgbGVuKHJlYWRhaGVhZCkgI2ZpeG1lCiAgICAgICAgICAgICAgICBuID0gKHJlYWRhaGVhZC5maW5kKCJcbiIpICsgMSkgb3IgbGVuKHJlYWRhaGVhZCkKICAgICAgICAgICAgICAgIGlmIGxpbWl0ID49IDA6CiAgICAgICAgICAgICAgICAgICAgbiA9IG1pbihuLCBsaW1pdCkKICAgICAgICAgICAgICAgIHJldHVybiBuCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZGVmIG5yZWFkYWhlYWQoKToKICAgICAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgaWYgbGltaXQgaXMgTm9uZToKICAgICAgICAgICAgbGltaXQgPSAtMQogICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2UobGltaXQsIGludCk6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigibGltaXQgbXVzdCBiZSBhbiBpbnRlZ2VyIikKICAgICAgICByZXMgPSBieXRlYXJyYXkoKQogICAgICAgIHdoaWxlIGxpbWl0IDwgMCBvciBsZW4ocmVzKSA8IGxpbWl0OgogICAgICAgICAgICBiID0gc2VsZi5yZWFkKG5yZWFkYWhlYWQoKSkKICAgICAgICAgICAgaWYgbm90IGI6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICByZXMgKz0gYgogICAgICAgICAgICAjaWYgcmVzLmVuZHN3aXRoKGIiXG4iKTogICNmaXhtZQogICAgICAgICAgICBpZiByZXMuZW5kc3dpdGgoIlxuIik6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIHJldHVybiBieXRlcyhyZXMpCgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHNlbGYuX2NoZWNrQ2xvc2VkKCkKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBfX25leHRfXyhzZWxmKToKICAgICAgICBsaW5lID0gc2VsZi5yZWFkbGluZSgpCiAgICAgICAgaWYgbm90IGxpbmU6CiAgICAgICAgICAgIHJhaXNlIFN0b3BJdGVyYXRpb24KICAgICAgICByZXR1cm4gbGluZQoKICAgIGRlZiByZWFkbGluZXMoc2VsZiwgaGludD1Ob25lKToKICAgICAgICAjIlJldHVybiBhIGxpc3Qgb2YgbGluZXMgZnJvbSB0aGUgc3RyZWFtLgoKICAgICAgICAjaGludCBjYW4gYmUgc3BlY2lmaWVkIHRvIGNvbnRyb2wgdGhlIG51bWJlciBvZiBsaW5lcyByZWFkOiBubyBtb3JlCiAgICAgICAgI2xpbmVzIHdpbGwgYmUgcmVhZCBpZiB0aGUgdG90YWwgc2l6ZSAoaW4gYnl0ZXMvY2hhcmFjdGVycykgb2YgYWxsCiAgICAgICAgI2xpbmVzIHNvIGZhciBleGNlZWRzIGhpbnQuCiAgICAgICAgIyIKICAgICAgICBpZiBoaW50IGlzIE5vbmUgb3IgaGludCA8PSAwOgogICAgICAgICAgICByZXR1cm4gbGlzdChzZWxmKQogICAgICAgIG4gPSAwCiAgICAgICAgbGluZXMgPSBbXQogICAgICAgIGZvciBsaW5lIGluIHNlbGY6CiAgICAgICAgICAgIGxpbmVzLmFwcGVuZChsaW5lKQogICAgICAgICAgICBuICs9IGxlbihsaW5lKQogICAgICAgICAgICBpZiBuID49IGhpbnQ6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIHJldHVybiBsaW5lcwoKICAgIGRlZiB3cml0ZWxpbmVzKHNlbGYsIGxpbmVzKToKICAgICAgICBzZWxmLl9jaGVja0Nsb3NlZCgpCiAgICAgICAgZm9yIGxpbmUgaW4gbGluZXM6CiAgICAgICAgICAgIHNlbGYud3JpdGUobGluZSkKCiNCRSBjb21tZW50aW5nIHRoaXMgb3V0IGZvciBub3cuCiNpby5JT0Jhc2UucmVnaXN0ZXIoSU9CYXNlKQoKY2xhc3MgUmF3SU9CYXNlKElPQmFzZSk6CiAgICBkZWYgcmVhZChzZWxmLCBuPS0xKToKICAgICAgICAjIlJlYWQgYW5kIHJldHVybiB1cCB0byBuIGJ5dGVzLCB3aGVyZSBuIGlzIGFuIGludC4KCiAgICAgICAgI1JldHVybnMgYW4gZW1wdHkgYnl0ZXMgb2JqZWN0IG9uIEVPRiwgb3IgTm9uZSBpZiB0aGUgb2JqZWN0IGlzCiAgICAgICAgIyNzZXQgbm90IHRvIGJsb2NrIGFuZCBoYXMgbm8gZGF0YSB0byByZWFkLgogICAgICAgICMiCiAgICAgICAgaWYgbiBpcyBOb25lOgogICAgICAgICAgICBuID0gLTEKICAgICAgICBpZiBuIDwgMDoKICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVhZGFsbCgpCiAgICAgICAgYiA9IGJ5dGVhcnJheShuLl9faW5kZXhfXygpKQogICAgICAgIG4gPSBzZWxmLnJlYWRpbnRvKGIpCiAgICAgICAgaWYgbiBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIGRlbCBiW246XQogICAgICAgIHJldHVybiBieXRlcyhiKQoKICAgIGRlZiByZWFkYWxsKHNlbGYpOgogICAgICAgICMiUmVhZCB1bnRpbCBFT0YsIHVzaW5nIG11bHRpcGxlIHJlYWQoKSBjYWxsLiIKICAgICAgICByZXMgPSBieXRlYXJyYXkoKQogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIGRhdGEgPSBzZWxmLnJlYWQoREVGQVVMVF9CVUZGRVJfU0laRSkKICAgICAgICAgICAgaWYgbm90IGRhdGE6CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICByZXMgKz0gZGF0YQogICAgICAgIGlmIHJlczoKICAgICAgICAgICAgcmV0dXJuIGJ5dGVzKHJlcykKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIGInJyBvciBOb25lCiAgICAgICAgICAgIHJldHVybiBkYXRhCgogICAgZGVmIHJlYWRpbnRvKHNlbGYsIGIpOgogICAgICAgICMiUmVhZCB1cCB0byBsZW4oYikgYnl0ZXMgaW50byBieXRlYXJyYXkgIgoKICAgICAgICAjUmV0dXJucyBhbiBpbnQgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgYnl0ZXMgcmVhZCAoMCBmb3IgRU9GKSwgb3IKICAgICAgICAjTm9uZSBpZiB0aGUgb2JqZWN0IGlzIHNldCBub3QgdG8gYmxvY2sgYW5kIGhhcyBubyBkYXRhIHRvIHJlYWQuCiAgICAgICAgIyIKICAgICAgICBzZWxmLl91bnN1cHBvcnRlZCgicmVhZGludG8iKQoKICAgIGRlZiB3cml0ZShzZWxmLCBiKToKICAgICAgICAjIldyaXRlIHRoZSBnaXZlbiBidWZmZXIgdG8gdGhlIElPIHN0cmVhbS4KCiAgICAgICAgI1JldHVybnMgdGhlIG51bWJlciBvZiBieXRlcyB3cml0dGVuLCB3aGljaCBtYXkgYmUgbGVzcyB0aGFuIGxlbihiKS4KICAgICAgICAjIgogICAgICAgIHNlbGYuX3Vuc3VwcG9ydGVkKCJ3cml0ZSIpCgojQkUgY29tbWVudGluZyB0aGlzIG91dAojaW8uUmF3SU9CYXNlLnJlZ2lzdGVyKFJhd0lPQmFzZSkKI2Zyb20gX2lvIGltcG9ydCBGaWxlSU8KCmNsYXNzIEZpbGVJTyhSYXdJT0Jhc2UpOgogIHBhc3MKI1Jhd0lPQmFzZS5yZWdpc3RlcihGaWxlSU8pCgpjbGFzcyBCdWZmZXJlZElPQmFzZShJT0Jhc2UpOgoKICAgICMiQmFzZSBjbGFzcyBmb3IgYnVmZmVyZWQgSU8gb2JqZWN0cy4KCiAgICAjVGhlIG1haW4gZGlmZmVyZW5jZSB3aXRoIFJhd0lPQmFzZSBpcyB0aGF0IHRoZSByZWFkKCkgbWV0aG9kCiAgICAjc3VwcG9ydHMgb21pdHRpbmcgdGhlIHNpemUgYXJndW1lbnQsIGFuZCBkb2VzIG5vdCBoYXZlIGEgZGVmYXVsdAogICAgI2ltcGxlbWVudGF0aW9uIHRoYXQgZGVmZXJzIHRvIHJlYWRpbnRvKCkuCgogICAgI0luIGFkZGl0aW9uLCByZWFkKCksIHJlYWRpbnRvKCkgYW5kIHdyaXRlKCkgbWF5IHJhaXNlCiAgICAjQmxvY2tpbmdJT0Vycm9yIGlmIHRoZSB1bmRlcmx5aW5nIHJhdyBzdHJlYW0gaXMgaW4gbm9uLWJsb2NraW5nCiAgICAjbW9kZSBhbmQgbm90IHJlYWR5OyB1bmxpa2UgdGhlaXIgcmF3IGNvdW50ZXJwYXJ0cywgdGhleSB3aWxsIG5ldmVyCiAgICAjcmV0dXJuIE5vbmUuCgogICAgI0EgdHlwaWNhbCBpbXBsZW1lbnRhdGlvbiBzaG91bGQgbm90IGluaGVyaXQgZnJvbSBhIFJhd0lPQmFzZQogICAgI2ltcGxlbWVudGF0aW9uLCBidXQgd3JhcCBvbmUuCiAgICAjIgoKICAgIGRlZiByZWFkKHNlbGYsIG49Tm9uZSk6CiAgICAgICAgIyJSZWFkIGFuZCByZXR1cm4gdXAgdG8gbiBieXRlcywgd2hlcmUgbiBpcyBhbiBpbnQuCgogICAgICAgICNJZiB0aGUgYXJndW1lbnQgaXMgb21pdHRlZCwgTm9uZSwgb3IgbmVnYXRpdmUsIHJlYWRzIGFuZAogICAgICAgICNyZXR1cm5zIGFsbCBkYXRhIHVudGlsIEVPRi4KCiAgICAgICAgI0lmIHRoZSBhcmd1bWVudCBpcyBwb3NpdGl2ZSwgYW5kIHRoZSB1bmRlcmx5aW5nIHJhdyBzdHJlYW0gaXMKICAgICAgICAjbm90ICdpbnRlcmFjdGl2ZScsIG11bHRpcGxlIHJhdyByZWFkcyBtYXkgYmUgaXNzdWVkIHRvIHNhdGlzZnkKICAgICAgICAjdGhlIGJ5dGUgY291bnQgKHVubGVzcyBFT0YgaXMgcmVhY2hlZCBmaXJzdCkuICBCdXQgZm9yCiAgICAgICAgI2ludGVyYWN0aXZlIHJhdyBzdHJlYW1zIChYWFggYW5kIGZvciBwaXBlcz8pLCBhdCBtb3N0IG9uZSByYXcKICAgICAgICAjcmVhZCB3aWxsIGJlIGlzc3VlZCwgYW5kIGEgc2hvcnQgcmVzdWx0IGRvZXMgbm90IGltcGx5IHRoYXQKICAgICAgICAjRU9GIGlzIGltbWluZW50LgoKICAgICAgICAjUmV0dXJucyBhbiBlbXB0eSBieXRlcyBhcnJheSBvbiBFT0YuCgogICAgICAgICNSYWlzZXMgQmxvY2tpbmdJT0Vycm9yIGlmIHRoZSB1bmRlcmx5aW5nIHJhdyBzdHJlYW0gaGFzIG5vCiAgICAgICAgI2RhdGEgYXQgdGhlIG1vbWVudC4KICAgICAgICAjIgogICAgICAgIHNlbGYuX3Vuc3VwcG9ydGVkKCJyZWFkIikKCiAgICBkZWYgcmVhZDEoc2VsZiwgbj1Ob25lKToKICAgICAgICAjIlJlYWQgdXAgdG8gbiBieXRlcyB3aXRoIGF0IG1vc3Qgb25lIHJlYWQoKSBzeXN0ZW0gY2FsbCwKICAgICAgICAjd2hlcmUgbiBpcyBhbiBpbnQuCiAgICAgICAgIyIKICAgICAgICBzZWxmLl91bnN1cHBvcnRlZCgicmVhZDEiKQoKICAgIGRlZiByZWFkaW50byhzZWxmLCBiKToKICAgICAgICAjIlJlYWQgdXAgdG8gbGVuKGIpIGJ5dGVzIGludG8gYnl0ZWFycmF5IGIuCgogICAgICAgICNMaWtlIHJlYWQoKSwgdGhpcyBtYXkgaXNzdWUgbXVsdGlwbGUgcmVhZHMgdG8gdGhlIHVuZGVybHlpbmcgcmF3CiAgICAgICAgI3N0cmVhbSwgdW5sZXNzIHRoZSBsYXR0ZXIgaXMgJ2ludGVyYWN0aXZlJy4KCiAgICAgICAgI1JldHVybnMgYW4gaW50IHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIGJ5dGVzIHJlYWQgKDAgZm9yIEVPRikuCgogICAgICAgICNSYWlzZXMgQmxvY2tpbmdJT0Vycm9yIGlmIHRoZSB1bmRlcmx5aW5nIHJhdyBzdHJlYW0gaGFzIG5vCiAgICAgICAgI2RhdGEgYXQgdGhlIG1vbWVudC4KICAgICAgICAjIgogICAgICAgICMgWFhYIFRoaXMgb3VnaHQgdG8gd29yayB3aXRoIGFueXRoaW5nIHRoYXQgc3VwcG9ydHMgdGhlIGJ1ZmZlciBBUEkKICAgICAgICBkYXRhID0gc2VsZi5yZWFkKGxlbihiKSkKICAgICAgICBuID0gbGVuKGRhdGEpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBiWzpuXSA9IGRhdGEKICAgICAgICBleGNlcHQgVHlwZUVycm9yIGFzIGVycjoKICAgICAgICAgICAgaW1wb3J0IGFycmF5CiAgICAgICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGIsIGFycmF5LmFycmF5KToKICAgICAgICAgICAgICAgIHJhaXNlIGVycgogICAgICAgICAgICBiWzpuXSA9IGFycmF5LmFycmF5KCdiJywgZGF0YSkKICAgICAgICByZXR1cm4gbgoKICAgIGRlZiB3cml0ZShzZWxmLCBiKToKICAgICAgICAjIldyaXRlIHRoZSBnaXZlbiBieXRlcyBidWZmZXIgdG8gdGhlIElPIHN0cmVhbS4KCiAgICAgICAgI1JldHVybiB0aGUgbnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW4sIHdoaWNoIGlzIG5ldmVyIGxlc3MgdGhhbgogICAgICAgICNsZW4oYikuCgogICAgICAgICNSYWlzZXMgQmxvY2tpbmdJT0Vycm9yIGlmIHRoZSBidWZmZXIgaXMgZnVsbCBhbmQgdGhlCiAgICAgICAgI3VuZGVybHlpbmcgcmF3IHN0cmVhbSBjYW5ub3QgYWNjZXB0IG1vcmUgZGF0YSBhdCB0aGUgbW9tZW50LgogICAgICAgICMiCiAgICAgICAgc2VsZi5fdW5zdXBwb3J0ZWQoIndyaXRlIikKCiAgICBkZWYgZGV0YWNoKHNlbGYpOgogICAgICAgICMiCiAgICAgICAgI1NlcGFyYXRlIHRoZSB1bmRlcmx5aW5nIHJhdyBzdHJlYW0gZnJvbSB0aGUgYnVmZmVyIGFuZCByZXR1cm4gaXQuCgogICAgICAgICNBZnRlciB0aGUgcmF3IHN0cmVhbSBoYXMgYmVlbiBkZXRhY2hlZCwgdGhlIGJ1ZmZlciBpcyBpbiBhbiB1bnVzYWJsZQogICAgICAgICNzdGF0ZS4KICAgICAgICAjIgogICAgICAgIHNlbGYuX3Vuc3VwcG9ydGVkKCJkZXRhY2giKQoKI0JFIGNvbW1lbnRpbmcgdGhpcyBvdXQKI2lvLkJ1ZmZlcmVkSU9CYXNlLnJlZ2lzdGVyKEJ1ZmZlcmVkSU9CYXNlKQoKCmNsYXNzIF9CdWZmZXJlZElPTWl4aW4oQnVmZmVyZWRJT0Jhc2UpOgoKICAgICMiQSBtaXhpbiBpbXBsZW1lbnRhdGlvbiBvZiBCdWZmZXJlZElPQmFzZSB3aXRoIGFuIHVuZGVybHlpbmcgcmF3IHN0cmVhbS4KCiAgICAjVGhpcyBwYXNzZXMgbW9zdCByZXF1ZXN0cyBvbiB0byB0aGUgdW5kZXJseWluZyByYXcgc3RyZWFtLiAgSXQKICAgICNkb2VzICpub3QqIHByb3ZpZGUgaW1wbGVtZW50YXRpb25zIG9mIHJlYWQoKSwgcmVhZGludG8oKSBvcgogICAgI3dyaXRlKCkuCiAgICAjIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCByYXcpOgogICAgICAgIHNlbGYuX3JhdyA9IHJhdwoKICAgICMjIyBQb3NpdGlvbmluZyAjIyMKCiAgICBkZWYgc2VlayhzZWxmLCBwb3MsIHdoZW5jZT0wKToKICAgICAgICBuZXdfcG9zaXRpb24gPSBzZWxmLnJhdy5zZWVrKHBvcywgd2hlbmNlKQogICAgICAgIGlmIG5ld19wb3NpdGlvbiA8IDA6CiAgICAgICAgICAgIHJhaXNlIElPRXJyb3IoInNlZWsoKSByZXR1cm5lZCBhbiBpbnZhbGlkIHBvc2l0aW9uIikKICAgICAgICByZXR1cm4gbmV3X3Bvc2l0aW9uCgogICAgZGVmIHRlbGwoc2VsZik6CiAgICAgICAgcG9zID0gc2VsZi5yYXcudGVsbCgpCiAgICAgICAgaWYgcG9zIDwgMDoKICAgICAgICAgICAgcmFpc2UgSU9FcnJvcigidGVsbCgpIHJldHVybmVkIGFuIGludmFsaWQgcG9zaXRpb24iKQogICAgICAgIHJldHVybiBwb3MKCiAgICBkZWYgdHJ1bmNhdGUoc2VsZiwgcG9zPU5vbmUpOgogICAgICAgICMgRmx1c2ggdGhlIHN0cmVhbS4gIFdlJ3JlIG1peGluZyBidWZmZXJlZCBJL08gd2l0aCBsb3dlci1sZXZlbCBJL08sCiAgICAgICAgIyBhbmQgYSBmbHVzaCBtYXkgYmUgbmVjZXNzYXJ5IHRvIHN5bmNoIGJvdGggdmlld3Mgb2YgdGhlIGN1cnJlbnQKICAgICAgICAjIGZpbGUgc3RhdGUuCiAgICAgICAgc2VsZi5mbHVzaCgpCgogICAgICAgIGlmIHBvcyBpcyBOb25lOgogICAgICAgICAgICBwb3MgPSBzZWxmLnRlbGwoKQogICAgICAgICMgWFhYOiBTaG91bGQgc2VlaygpIGJlIHVzZWQsIGluc3RlYWQgb2YgcGFzc2luZyB0aGUgcG9zaXRpb24KICAgICAgICAjIFhYWCAgZGlyZWN0bHkgdG8gdHJ1bmNhdGU/CiAgICAgICAgcmV0dXJuIHNlbGYucmF3LnRydW5jYXRlKHBvcykKCiAgICAjIyMgRmx1c2ggYW5kIGNsb3NlICMjIwoKICAgIGRlZiBmbHVzaChzZWxmKToKICAgICAgICBpZiBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiZmx1c2ggb2YgY2xvc2VkIGZpbGUiKQogICAgICAgIHNlbGYucmF3LmZsdXNoKCkKCiAgICBkZWYgY2xvc2Uoc2VsZik6CiAgICAgICAgaWYgc2VsZi5yYXcgaXMgbm90IE5vbmUgYW5kIG5vdCBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5mbHVzaCgpICAgI2ZpeCBtZQogICAgICAgICAgICAgICAgIyBtYXkgcmFpc2UgQmxvY2tpbmdJT0Vycm9yIG9yIEJyb2tlblBpcGVFcnJvciBldGMKICAgICAgICAgICAgI2V4Y2VwdDogICAgI2ZpeG1lCQkKICAgICAgICAgICAgIyAgICBhPTEgICAgI2ZpeG1lCiAgICAgICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgICAgICBzZWxmLnJhdy5jbG9zZSgpCgogICAgZGVmIGRldGFjaChzZWxmKToKICAgICAgICBpZiBzZWxmLnJhdyBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJyYXcgc3RyZWFtIGFscmVhZHkgZGV0YWNoZWQiKQogICAgICAgIHNlbGYuZmx1c2goKQogICAgICAgIHJhdyA9IHNlbGYuX3JhdwogICAgICAgIHNlbGYuX3JhdyA9IE5vbmUKICAgICAgICByZXR1cm4gcmF3CgogICAgIyMjIElucXVpcmllcyAjIyMKCiAgICBkZWYgc2Vla2FibGUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYucmF3LnNlZWthYmxlKCkKCiAgICBkZWYgcmVhZGFibGUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYucmF3LnJlYWRhYmxlKCkKCiAgICBkZWYgd3JpdGFibGUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYucmF3LndyaXRhYmxlKCkKCiAgICAjQHByb3BlcnR5CiAgICBkZWYgcmF3KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9yYXcKCiAgICAjQHByb3BlcnR5CiAgICBkZWYgY2xvc2VkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLnJhdy5jbG9zZWQKCiAgICAjQHByb3BlcnR5CiAgICBkZWYgbmFtZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5yYXcubmFtZQoKICAgICNAcHJvcGVydHkKICAgIGRlZiBtb2RlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLnJhdy5tb2RlCgogICAgZGVmIF9fZ2V0c3RhdGVfXyhzZWxmKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoImNhbiBub3Qgc2VyaWFsaXplIGEgJ3swfScgb2JqZWN0IgogICAgICAgICAgICAgICAgICAgICAgICAuZm9ybWF0KHNlbGYuX19jbGFzc19fLl9fbmFtZV9fKSkKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgY2xzbmFtZSA9IHNlbGYuX19jbGFzc19fLl9fbmFtZV9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBuYW1lID0gc2VsZi5uYW1lCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICByZXR1cm4gIjxfcHlpby57MH0+Ii5mb3JtYXQoY2xzbmFtZSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gIjxfcHlpby57MH0gbmFtZT17MSFyfT4iLmZvcm1hdChjbHNuYW1lLCBuYW1lKQoKICAgICMjIyBMb3dlci1sZXZlbCBBUElzICMjIwoKICAgIGRlZiBmaWxlbm8oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYucmF3LmZpbGVubygpCgogICAgZGVmIGlzYXR0eShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5yYXcuaXNhdHR5KCkKCmNsYXNzIEJ5dGVzSU8oQnVmZmVyZWRJT0Jhc2UpOgoKICAgICMiQnVmZmVyZWQgSS9PIGltcGxlbWVudGF0aW9uIHVzaW5nIGFuIGluLW1lbW9yeSBieXRlcyBidWZmZXIuIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpbml0aWFsX2J5dGVzPU5vbmUpOgogICAgICAgIGJ1ZiA9IGJ5dGVhcnJheSgpCiAgICAgICAgaWYgaW5pdGlhbF9ieXRlcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgYnVmICs9IGluaXRpYWxfYnl0ZXMKICAgICAgICBzZWxmLl9idWZmZXIgPSBidWYKICAgICAgICBzZWxmLl9wb3MgPSAwCgogICAgZGVmIF9fZ2V0c3RhdGVfXyhzZWxmKToKICAgICAgICBpZiBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiX19nZXRzdGF0ZV9fIG9uIGNsb3NlZCBmaWxlIikKICAgICAgICByZXR1cm4gc2VsZi5fX2RpY3RfXy5jb3B5KCkKCiAgICBkZWYgZ2V0dmFsdWUoc2VsZik6CiAgICAgICAgIyJSZXR1cm4gdGhlIGJ5dGVzIHZhbHVlIChjb250ZW50cykgb2YgdGhlIGJ1ZmZlcgogICAgICAgICMiCiAgICAgICAgaWYgc2VsZi5jbG9zZWQ6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImdldHZhbHVlIG9uIGNsb3NlZCBmaWxlIikKICAgICAgICByZXR1cm4gYnl0ZXMoc2VsZi5fYnVmZmVyKQoKICAgIGRlZiBnZXRidWZmZXIoc2VsZik6CiAgICAgICAgIyJSZXR1cm4gYSByZWFkYWJsZSBhbmQgd3JpdGFibGUgdmlldyBvZiB0aGUgYnVmZmVyLgogICAgICAgICMiCiAgICAgICAgcmV0dXJuIG1lbW9yeXZpZXcoc2VsZi5fYnVmZmVyKQoKICAgIGRlZiByZWFkKHNlbGYsIG49Tm9uZSk6CiAgICAgICAgaWYgc2VsZi5jbG9zZWQ6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoInJlYWQgZnJvbSBjbG9zZWQgZmlsZSIpCiAgICAgICAgaWYgbiBpcyBOb25lOgogICAgICAgICAgICBuID0gLTEKICAgICAgICBpZiBuIDwgMDoKICAgICAgICAgICAgbiA9IGxlbihzZWxmLl9idWZmZXIpCiAgICAgICAgaWYgbGVuKHNlbGYuX2J1ZmZlcikgPD0gc2VsZi5fcG9zOgogICAgICAgICAgICByZXR1cm4gIiIKICAgICAgICBuZXdwb3MgPSBtaW4obGVuKHNlbGYuX2J1ZmZlciksIHNlbGYuX3BvcyArIG4pCiAgICAgICAgYiA9IHNlbGYuX2J1ZmZlcltzZWxmLl9wb3MgOiBuZXdwb3NdCiAgICAgICAgc2VsZi5fcG9zID0gbmV3cG9zCiAgICAgICAgcmV0dXJuIGJ5dGVzKGIpCgogICAgZGVmIHJlYWQxKHNlbGYsIG4pOgogICAgICAgICMiVGhpcyBpcyB0aGUgc2FtZSBhcyByZWFkLgogICAgICAgICMiCiAgICAgICAgcmV0dXJuIHNlbGYucmVhZChuKQoKICAgIGRlZiB3cml0ZShzZWxmLCBiKToKICAgICAgICBpZiBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigid3JpdGUgdG8gY2xvc2VkIGZpbGUiKQogICAgICAgIGlmIGlzaW5zdGFuY2UoYiwgc3RyKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJjYW4ndCB3cml0ZSBzdHIgdG8gYmluYXJ5IHN0cmVhbSIpCiAgICAgICAgbiA9IGxlbihiKQogICAgICAgIGlmIG4gPT0gMDoKICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICBwb3MgPSBzZWxmLl9wb3MKICAgICAgICBpZiBwb3MgPiBsZW4oc2VsZi5fYnVmZmVyKToKICAgICAgICAgICAgIyBJbnNlcnRzIG51bGwgYnl0ZXMgYmV0d2VlbiB0aGUgY3VycmVudCBlbmQgb2YgdGhlIGZpbGUKICAgICAgICAgICAgIyBhbmQgdGhlIG5ldyB3cml0ZSBwb3NpdGlvbi4KICAgICAgICAgICAgI3BhZGRpbmcgPSBiJ1x4MDAnICogKHBvcyAtIGxlbihzZWxmLl9idWZmZXIpKSAgICNmaXhtZQogICAgICAgICAgICBwYWRkaW5nID0gJ1x4MDAnICogKHBvcyAtIGxlbihzZWxmLl9idWZmZXIpKQogICAgICAgICAgICBzZWxmLl9idWZmZXIgKz0gcGFkZGluZwogICAgICAgIHNlbGYuX2J1ZmZlcltwb3M6cG9zICsgbl0gPSBiCiAgICAgICAgc2VsZi5fcG9zICs9IG4KICAgICAgICByZXR1cm4gbgoKICAgIGRlZiBzZWVrKHNlbGYsIHBvcywgd2hlbmNlPTApOgogICAgICAgIGlmIHNlbGYuY2xvc2VkOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJzZWVrIG9uIGNsb3NlZCBmaWxlIikKICAgICAgICB0cnk6CiAgICAgICAgICAgIHBvcy5fX2luZGV4X18KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3IgYXMgZXJyOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImFuIGludGVnZXIgaXMgcmVxdWlyZWQiKSAjZnJvbSBlcnIgZml4bWUKICAgICAgICBpZiB3aGVuY2UgPT0gMDoKICAgICAgICAgICAgaWYgcG9zIDwgMDoKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIm5lZ2F0aXZlIHNlZWsgcG9zaXRpb24gJXIiICUgKHBvcywpKQogICAgICAgICAgICBzZWxmLl9wb3MgPSBwb3MKICAgICAgICBlbGlmIHdoZW5jZSA9PSAxOgogICAgICAgICAgICBzZWxmLl9wb3MgPSBtYXgoMCwgc2VsZi5fcG9zICsgcG9zKQogICAgICAgIGVsaWYgd2hlbmNlID09IDI6CiAgICAgICAgICAgIHNlbGYuX3BvcyA9IG1heCgwLCBsZW4oc2VsZi5fYnVmZmVyKSArIHBvcykKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJpbnZhbGlkIHdoZW5jZSB2YWx1ZSIpCiAgICAgICAgcmV0dXJuIHNlbGYuX3BvcwoKICAgIGRlZiB0ZWxsKHNlbGYpOgogICAgICAgIGlmIHNlbGYuY2xvc2VkOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJ0ZWxsIG9uIGNsb3NlZCBmaWxlIikKICAgICAgICByZXR1cm4gc2VsZi5fcG9zCgogICAgZGVmIHRydW5jYXRlKHNlbGYsIHBvcz1Ob25lKToKICAgICAgICBpZiBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigidHJ1bmNhdGUgb24gY2xvc2VkIGZpbGUiKQogICAgICAgIGlmIHBvcyBpcyBOb25lOgogICAgICAgICAgICBwb3MgPSBzZWxmLl9wb3MKICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBwb3MuX19pbmRleF9fCiAgICAgICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvciBhcyBlcnI6CiAgICAgICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoImFuIGludGVnZXIgaXMgcmVxdWlyZWQiKSAjZnJvbSBlcnIgI2ZpeG1lCiAgICAgICAgICAgIGlmIHBvcyA8IDA6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJuZWdhdGl2ZSB0cnVuY2F0ZSBwb3NpdGlvbiAlciIgJSAocG9zLCkpCiAgICAgICAgZGVsIHNlbGYuX2J1ZmZlcltwb3M6XQogICAgICAgIHJldHVybiBwb3MKCiAgICBkZWYgcmVhZGFibGUoc2VsZik6CiAgICAgICAgaWYgc2VsZi5jbG9zZWQ6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkkvTyBvcGVyYXRpb24gb24gY2xvc2VkIGZpbGUuIikKICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiB3cml0YWJsZShzZWxmKToKICAgICAgICBpZiBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiSS9PIG9wZXJhdGlvbiBvbiBjbG9zZWQgZmlsZS4iKQogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIHNlZWthYmxlKHNlbGYpOgogICAgICAgIGlmIHNlbGYuY2xvc2VkOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJJL08gb3BlcmF0aW9uIG9uIGNsb3NlZCBmaWxlLiIpCiAgICAgICAgcmV0dXJuIFRydWUKCgpjbGFzcyBCdWZmZXJlZFJlYWRlcihfQnVmZmVyZWRJT01peGluKToKCiAgICAjIkJ1ZmZlcmVkUmVhZGVyKHJhd1ssIGJ1ZmZlcl9zaXplXSkKCiAgICAjQSBidWZmZXIgZm9yIGEgcmVhZGFibGUsIHNlcXVlbnRpYWwgQmFzZVJhd0lPIG9iamVjdC4KCiAgICAjVGhlIGNvbnN0cnVjdG9yIGNyZWF0ZXMgYSBCdWZmZXJlZFJlYWRlciBmb3IgdGhlIGdpdmVuIHJlYWRhYmxlIHJhdwogICAgI3N0cmVhbSBhbmQgYnVmZmVyX3NpemUuIElmIGJ1ZmZlcl9zaXplIGlzIG9taXR0ZWQsIERFRkFVTFRfQlVGRkVSX1NJWkUKICAgICNpcyB1c2VkLgogICAgIyIKCiAgICBkZWYgX19pbml0X18oc2VsZiwgcmF3LCBidWZmZXJfc2l6ZT1ERUZBVUxUX0JVRkZFUl9TSVpFKToKICAgICAgICAjIkNyZWF0ZSBhIG5ldyBidWZmZXJlZCByZWFkZXIgdXNpbmcgdGhlIGdpdmVuIHJlYWRhYmxlIHJhdyBJTyBvYmplY3QuCiAgICAgICAgIyIKICAgICAgICBpZiBub3QgcmF3LnJlYWRhYmxlKCk6CiAgICAgICAgICAgIHJhaXNlIElPRXJyb3IoJyJyYXciIGFyZ3VtZW50IG11c3QgYmUgcmVhZGFibGUuJykKCiAgICAgICAgX0J1ZmZlcmVkSU9NaXhpbi5fX2luaXRfXyhzZWxmLCByYXcpCiAgICAgICAgaWYgYnVmZmVyX3NpemUgPD0gMDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaW52YWxpZCBidWZmZXIgc2l6ZSIpCiAgICAgICAgc2VsZi5idWZmZXJfc2l6ZSA9IGJ1ZmZlcl9zaXplCiAgICAgICAgc2VsZi5fcmVzZXRfcmVhZF9idWYoKQogICAgICAgIHNlbGYuX3JlYWRfbG9jayA9IExvY2soKQoKICAgIGRlZiBfcmVzZXRfcmVhZF9idWYoc2VsZik6CiAgICAgICAgI3NlbGYuX3JlYWRfYnVmID0gYiIiICAgI2ZpeG1lCiAgICAgICAgc2VsZi5fcmVhZF9idWYgPSAiIgogICAgICAgIHNlbGYuX3JlYWRfcG9zID0gMAoKICAgIGRlZiByZWFkKHNlbGYsIG49Tm9uZSk6CiAgICAgICAgIyJSZWFkIG4gYnl0ZXMuCgogICAgICAgICNSZXR1cm5zIGV4YWN0bHkgbiBieXRlcyBvZiBkYXRhIHVubGVzcyB0aGUgdW5kZXJseWluZyByYXcgSU8KICAgICAgICAjc3RyZWFtIHJlYWNoZXMgRU9GIG9yIGlmIHRoZSBjYWxsIHdvdWxkIGJsb2NrIGluIG5vbi1ibG9ja2luZwogICAgICAgICNtb2RlLiBJZiBuIGlzIG5lZ2F0aXZlLCByZWFkIHVudGlsIEVPRiBvciB1bnRpbCByZWFkKCkgd291bGQKICAgICAgICAjYmxvY2suCiAgICAgICAgIyIKICAgICAgICBpZiBuIGlzIG5vdCBOb25lIGFuZCBuIDwgLTE6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImludmFsaWQgbnVtYmVyIG9mIGJ5dGVzIHRvIHJlYWQiKQogICAgICAgICN3aXRoIHNlbGYuX3JlYWRfbG9jazogICAgIyBmaXhtZQogICAgICAgIHJldHVybiBzZWxmLl9yZWFkX3VubG9ja2VkKG4pCgogICAgZGVmIF9yZWFkX3VubG9ja2VkKHNlbGYsIG49Tm9uZSk6CiAgICAgICAgI25vZGF0YV92YWwgPSBiIiIgICAjZml4bWUKICAgICAgICBub2RhdGFfdmFsID0gIiIKICAgICAgICAjZW1wdHlfdmFsdWVzID0gKGIiIiwgTm9uZSkgICNmaXhtZQogICAgICAgIGVtcHR5X3ZhbHVlcyA9ICgiIiwgTm9uZSkKICAgICAgICBidWYgPSBzZWxmLl9yZWFkX2J1ZgogICAgICAgIHBvcyA9IHNlbGYuX3JlYWRfcG9zCgogICAgICAgICMgU3BlY2lhbCBjYXNlIGZvciB3aGVuIHRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZCBpcyB1bnNwZWNpZmllZC4KICAgICAgICBpZiBuIGlzIE5vbmUgb3IgbiA9PSAtMToKICAgICAgICAgICAgc2VsZi5fcmVzZXRfcmVhZF9idWYoKQogICAgICAgICAgICBjaHVua3MgPSBbYnVmW3BvczpdXSAgIyBTdHJpcCB0aGUgY29uc3VtZWQgYnl0ZXMuCiAgICAgICAgICAgIGN1cnJlbnRfc2l6ZSA9IDAKICAgICAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgICAgICMgUmVhZCB1bnRpbCBFT0Ygb3IgdW50aWwgcmVhZCgpIHdvdWxkIGJsb2NrLgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGNodW5rID0gc2VsZi5yYXcucmVhZCgpCiAgICAgICAgICAgICAgICBleGNlcHQgSU9FcnJvciBhcyBlOgogICAgICAgICAgICAgICAgICAgIGlmIGUuZXJybm8gIT0gRUlOVFI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGlmIGNodW5rIGluIGVtcHR5X3ZhbHVlczoKICAgICAgICAgICAgICAgICAgICBub2RhdGFfdmFsID0gY2h1bmsKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgY3VycmVudF9zaXplICs9IGxlbihjaHVuaykKICAgICAgICAgICAgICAgIGNodW5rcy5hcHBlbmQoY2h1bmspCiAgICAgICAgICAgIHJldHVybiAiIi5qb2luKGNodW5rcykgb3Igbm9kYXRhX3ZhbAoKICAgICAgICAjIFRoZSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVhZCBpcyBzcGVjaWZpZWQsIHJldHVybiBhdCBtb3N0IG4gYnl0ZXMuCiAgICAgICAgYXZhaWwgPSBsZW4oYnVmKSAtIHBvcyAgIyBMZW5ndGggb2YgdGhlIGF2YWlsYWJsZSBidWZmZXJlZCBkYXRhLgogICAgICAgIGlmIG4gPD0gYXZhaWw6CiAgICAgICAgICAgICMgRmFzdCBwYXRoOiB0aGUgZGF0YSB0byByZWFkIGlzIGZ1bGx5IGJ1ZmZlcmVkLgogICAgICAgICAgICBzZWxmLl9yZWFkX3BvcyArPSBuCiAgICAgICAgICAgIHJldHVybiBidWZbcG9zOnBvcytuXQogICAgICAgICMgU2xvdyBwYXRoOiByZWFkIGZyb20gdGhlIHN0cmVhbSB1bnRpbCBlbm91Z2ggYnl0ZXMgYXJlIHJlYWQsCiAgICAgICAgIyBvciB1bnRpbCBhbiBFT0Ygb2NjdXJzIG9yIHVudGlsIHJlYWQoKSB3b3VsZCBibG9jay4KICAgICAgICBjaHVua3MgPSBbYnVmW3BvczpdXQogICAgICAgIHdhbnRlZCA9IG1heChzZWxmLmJ1ZmZlcl9zaXplLCBuKQogICAgICAgIHdoaWxlIGF2YWlsIDwgbjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgY2h1bmsgPSBzZWxmLnJhdy5yZWFkKHdhbnRlZCkKICAgICAgICAgICAgZXhjZXB0IElPRXJyb3IgYXMgZToKICAgICAgICAgICAgICAgIGlmIGUuZXJybm8gIT0gRUlOVFI6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIGNodW5rIGluIGVtcHR5X3ZhbHVlczoKICAgICAgICAgICAgICAgIG5vZGF0YV92YWwgPSBjaHVuawogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgYXZhaWwgKz0gbGVuKGNodW5rKQogICAgICAgICAgICBjaHVua3MuYXBwZW5kKGNodW5rKQogICAgICAgICMgbiBpcyBtb3JlIHRoZW4gYXZhaWwgb25seSB3aGVuIGFuIEVPRiBvY2N1cnJlZCBvciB3aGVuCiAgICAgICAgIyByZWFkKCkgd291bGQgaGF2ZSBibG9ja2VkLgogICAgICAgIG4gPSBtaW4obiwgYXZhaWwpCiAgICAgICAgI291dCA9IGIiIi5qb2luKGNodW5rcykgICAjZml4bWUKICAgICAgICBvdXQgPSAiIi5qb2luKGNodW5rcykKICAgICAgICBzZWxmLl9yZWFkX2J1ZiA9IG91dFtuOl0gICMgU2F2ZSB0aGUgZXh0cmEgZGF0YSBpbiB0aGUgYnVmZmVyLgogICAgICAgIHNlbGYuX3JlYWRfcG9zID0gMAogICAgICAgIHJldHVybiBvdXRbOm5dIGlmIG91dCBlbHNlIG5vZGF0YV92YWwKCiAgICBkZWYgcGVlayhzZWxmLCBuPTApOgogICAgICAgICMiUmV0dXJucyBidWZmZXJlZCBieXRlcyB3aXRob3V0IGFkdmFuY2luZyB0aGUgcG9zaXRpb24uCgogICAgICAgICNUaGUgYXJndW1lbnQgaW5kaWNhdGVzIGEgZGVzaXJlZCBtaW5pbWFsIG51bWJlciBvZiBieXRlczsgd2UKICAgICAgICAjZG8gYXQgbW9zdCBvbmUgcmF3IHJlYWQgdG8gc2F0aXNmeSBpdC4gIFdlIG5ldmVyIHJldHVybiBtb3JlCiAgICAgICAgI3RoYW4gc2VsZi5idWZmZXJfc2l6ZS4KICAgICAgICAjIgogICAgICAgICN3aXRoIHNlbGYuX3JlYWRfbG9jazogICAgICNmaXhtZQogICAgICAgIHJldHVybiBzZWxmLl9wZWVrX3VubG9ja2VkKG4pCgogICAgZGVmIF9wZWVrX3VubG9ja2VkKHNlbGYsIG49MCk6CiAgICAgICAgd2FudCA9IG1pbihuLCBzZWxmLmJ1ZmZlcl9zaXplKQogICAgICAgIGhhdmUgPSBsZW4oc2VsZi5fcmVhZF9idWYpIC0gc2VsZi5fcmVhZF9wb3MKICAgICAgICBpZiBoYXZlIDwgd2FudCBvciBoYXZlIDw9IDA6CiAgICAgICAgICAgIHRvX3JlYWQgPSBzZWxmLmJ1ZmZlcl9zaXplIC0gaGF2ZQogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBzZWxmLnJhdy5yZWFkKHRvX3JlYWQpCiAgICAgICAgICAgICAgICBleGNlcHQgSU9FcnJvciBhcyBlOgogICAgICAgICAgICAgICAgICAgIGlmIGUuZXJybm8gIT0gRUlOVFI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGlmIGN1cnJlbnQ6CiAgICAgICAgICAgICAgICBzZWxmLl9yZWFkX2J1ZiA9IHNlbGYuX3JlYWRfYnVmW3NlbGYuX3JlYWRfcG9zOl0gKyBjdXJyZW50CiAgICAgICAgICAgICAgICBzZWxmLl9yZWFkX3BvcyA9IDAKICAgICAgICByZXR1cm4gc2VsZi5fcmVhZF9idWZbc2VsZi5fcmVhZF9wb3M6XQoKICAgIGRlZiByZWFkMShzZWxmLCBuKToKICAgICAgICAjIlJlYWRzIHVwIHRvIG4gYnl0ZXMsIHdpdGggYXQgbW9zdCBvbmUgcmVhZCgpIHN5c3RlbSBjYWxsLiIKICAgICAgICAjIFJldHVybnMgdXAgdG8gbiBieXRlcy4gIElmIGF0IGxlYXN0IG9uZSBieXRlIGlzIGJ1ZmZlcmVkLCB3ZQogICAgICAgICMgb25seSByZXR1cm4gYnVmZmVyZWQgYnl0ZXMuICBPdGhlcndpc2UsIHdlIGRvIG9uZSByYXcgcmVhZC4KICAgICAgICBpZiBuIDwgMDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigibnVtYmVyIG9mIGJ5dGVzIHRvIHJlYWQgbXVzdCBiZSBwb3NpdGl2ZSIpCiAgICAgICAgaWYgbiA9PSAwOgogICAgICAgICAgICAjcmV0dXJuIGIiIgogICAgICAgICAgICByZXR1cm4gIiIKICAgICAgICAjd2l0aCBzZWxmLl9yZWFkX2xvY2s6ICAgI2ZpeG1lCiAgICAgICAgc2VsZi5fcGVla191bmxvY2tlZCgxKQogICAgICAgIHJldHVybiBzZWxmLl9yZWFkX3VubG9ja2VkKAogICAgICAgICAgICAgICAgbWluKG4sIGxlbihzZWxmLl9yZWFkX2J1ZikgLSBzZWxmLl9yZWFkX3BvcykpCgogICAgZGVmIHRlbGwoc2VsZik6CiAgICAgICAgcmV0dXJuIF9CdWZmZXJlZElPTWl4aW4udGVsbChzZWxmKSAtIGxlbihzZWxmLl9yZWFkX2J1ZikgKyBzZWxmLl9yZWFkX3BvcwoKICAgIGRlZiBzZWVrKHNlbGYsIHBvcywgd2hlbmNlPTApOgogICAgICAgIGlmIG5vdCAoMCA8PSB3aGVuY2UgPD0gMik6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImludmFsaWQgd2hlbmNlIHZhbHVlIikKICAgICAgICAjd2l0aCBzZWxmLl9yZWFkX2xvY2s6ICAgI2ZpeG1lCiAgICAgICAgaWYgMToKICAgICAgICAgICAgaWYgd2hlbmNlID09IDE6CiAgICAgICAgICAgICAgICBwb3MgLT0gbGVuKHNlbGYuX3JlYWRfYnVmKSAtIHNlbGYuX3JlYWRfcG9zCiAgICAgICAgICAgIHBvcyA9IF9CdWZmZXJlZElPTWl4aW4uc2VlayhzZWxmLCBwb3MsIHdoZW5jZSkKICAgICAgICAgICAgc2VsZi5fcmVzZXRfcmVhZF9idWYoKQogICAgICAgICAgICByZXR1cm4gcG9zCgpjbGFzcyBCdWZmZXJlZFdyaXRlcihfQnVmZmVyZWRJT01peGluKToKCiAgICAjIkEgYnVmZmVyIGZvciBhIHdyaXRlYWJsZSBzZXF1ZW50aWFsIFJhd0lPIG9iamVjdC4KCiAgICAjVGhlIGNvbnN0cnVjdG9yIGNyZWF0ZXMgYSBCdWZmZXJlZFdyaXRlciBmb3IgdGhlIGdpdmVuIHdyaXRlYWJsZSByYXcKICAgICNzdHJlYW0uIElmIHRoZSBidWZmZXJfc2l6ZSBpcyBub3QgZ2l2ZW4sIGl0IGRlZmF1bHRzIHRvCiAgICAjREVGQVVMVF9CVUZGRVJfU0laRS4KICAgICMiCgogICAgX3dhcm5pbmdfc3RhY2tfb2Zmc2V0ID0gMgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCByYXcsCiAgICAgICAgICAgICAgICAgYnVmZmVyX3NpemU9REVGQVVMVF9CVUZGRVJfU0laRSwgbWF4X2J1ZmZlcl9zaXplPU5vbmUpOgogICAgICAgIGlmIG5vdCByYXcud3JpdGFibGUoKToKICAgICAgICAgICAgcmFpc2UgSU9FcnJvcignInJhdyIgYXJndW1lbnQgbXVzdCBiZSB3cml0YWJsZS4nKQoKICAgICAgICBfQnVmZmVyZWRJT01peGluLl9faW5pdF9fKHNlbGYsIHJhdykKICAgICAgICBpZiBidWZmZXJfc2l6ZSA8PSAwOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJpbnZhbGlkIGJ1ZmZlciBzaXplIikKICAgICAgICBpZiBtYXhfYnVmZmVyX3NpemUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4oIm1heF9idWZmZXJfc2l6ZSBpcyBkZXByZWNhdGVkIiwgRGVwcmVjYXRpb25XYXJuaW5nLAogICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3dhcm5pbmdfc3RhY2tfb2Zmc2V0KQogICAgICAgIHNlbGYuYnVmZmVyX3NpemUgPSBidWZmZXJfc2l6ZQogICAgICAgIHNlbGYuX3dyaXRlX2J1ZiA9IGJ5dGVhcnJheSgpCiAgICAgICAgc2VsZi5fd3JpdGVfbG9jayA9IExvY2soKQoKICAgIGRlZiB3cml0ZShzZWxmLCBiKToKICAgICAgICBpZiBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigid3JpdGUgdG8gY2xvc2VkIGZpbGUiKQogICAgICAgIGlmIGlzaW5zdGFuY2UoYiwgc3RyKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJjYW4ndCB3cml0ZSBzdHIgdG8gYmluYXJ5IHN0cmVhbSIpCiAgICAgICAgI3dpdGggc2VsZi5fd3JpdGVfbG9jazogICAjZml4bWUKICAgICAgICBpZiAxOgogICAgICAgICAgICAjIFhYWCB3ZSBjYW4gaW1wbGVtZW50IHNvbWUgbW9yZSB0cmlja3MgdG8gdHJ5IGFuZCBhdm9pZAogICAgICAgICAgICAjIHBhcnRpYWwgd3JpdGVzCiAgICAgICAgICAgIGlmIGxlbihzZWxmLl93cml0ZV9idWYpID4gc2VsZi5idWZmZXJfc2l6ZToKICAgICAgICAgICAgICAgICMgV2UncmUgZnVsbCwgc28gbGV0J3MgcHJlLWZsdXNoIHRoZSBidWZmZXIuICAoVGhpcyBtYXkKICAgICAgICAgICAgICAgICMgcmFpc2UgQmxvY2tpbmdJT0Vycm9yIHdpdGggY2hhcmFjdGVyc193cml0dGVuID09IDAuKQogICAgICAgICAgICAgICAgc2VsZi5fZmx1c2hfdW5sb2NrZWQoKQogICAgICAgICAgICBiZWZvcmUgPSBsZW4oc2VsZi5fd3JpdGVfYnVmKQogICAgICAgICAgICBzZWxmLl93cml0ZV9idWYuZXh0ZW5kKGIpCiAgICAgICAgICAgIHdyaXR0ZW4gPSBsZW4oc2VsZi5fd3JpdGVfYnVmKSAtIGJlZm9yZQogICAgICAgICAgICBpZiBsZW4oc2VsZi5fd3JpdGVfYnVmKSA+IHNlbGYuYnVmZmVyX3NpemU6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5fZmx1c2hfdW5sb2NrZWQoKQogICAgICAgICAgICAgICAgZXhjZXB0IEJsb2NraW5nSU9FcnJvciBhcyBlOgogICAgICAgICAgICAgICAgICAgIGlmIGxlbihzZWxmLl93cml0ZV9idWYpID4gc2VsZi5idWZmZXJfc2l6ZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBXZSd2ZSBoaXQgdGhlIGJ1ZmZlcl9zaXplLiBXZSBoYXZlIHRvIGFjY2VwdCBhIHBhcnRpYWwKICAgICAgICAgICAgICAgICAgICAgICAgIyB3cml0ZSBhbmQgY3V0IGJhY2sgb3VyIGJ1ZmZlci4KICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmFnZSA9IGxlbihzZWxmLl93cml0ZV9idWYpIC0gc2VsZi5idWZmZXJfc2l6ZQogICAgICAgICAgICAgICAgICAgICAgICB3cml0dGVuIC09IG92ZXJhZ2UKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fd3JpdGVfYnVmID0gc2VsZi5fd3JpdGVfYnVmWzpzZWxmLmJ1ZmZlcl9zaXplXQogICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBCbG9ja2luZ0lPRXJyb3IoZS5lcnJubywgZS5zdHJlcnJvciwgd3JpdHRlbikKICAgICAgICAgICAgcmV0dXJuIHdyaXR0ZW4KCiAgICBkZWYgdHJ1bmNhdGUoc2VsZiwgcG9zPU5vbmUpOgogICAgICAgICN3aXRoIHNlbGYuX3dyaXRlX2xvY2s6ICAgICNmaXhtZQogICAgICAgIGlmIDE6CiAgICAgICAgICAgIHNlbGYuX2ZsdXNoX3VubG9ja2VkKCkKICAgICAgICAgICAgaWYgcG9zIGlzIE5vbmU6CiAgICAgICAgICAgICAgICBwb3MgPSBzZWxmLnJhdy50ZWxsKCkKICAgICAgICAgICAgcmV0dXJuIHNlbGYucmF3LnRydW5jYXRlKHBvcykKCiAgICBkZWYgZmx1c2goc2VsZik6CiAgICAgICAgI3dpdGggc2VsZi5fd3JpdGVfbG9jazogICNmaXhtZQogICAgICAgIHNlbGYuX2ZsdXNoX3VubG9ja2VkKCkKCiAgICBkZWYgX2ZsdXNoX3VubG9ja2VkKHNlbGYpOgogICAgICAgIGlmIHNlbGYuY2xvc2VkOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJmbHVzaCBvZiBjbG9zZWQgZmlsZSIpCiAgICAgICAgd2hpbGUgc2VsZi5fd3JpdGVfYnVmOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBuID0gc2VsZi5yYXcud3JpdGUoc2VsZi5fd3JpdGVfYnVmKQogICAgICAgICAgICBleGNlcHQgQmxvY2tpbmdJT0Vycm9yOgogICAgICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKCJzZWxmLnJhdyBzaG91bGQgaW1wbGVtZW50IFJhd0lPQmFzZTogaXQgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzaG91bGQgbm90IHJhaXNlIEJsb2NraW5nSU9FcnJvciIpCiAgICAgICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgICAgICBpZiBlLmVycm5vICE9IEVJTlRSOgogICAgICAgICAgICAgICAgICAgIHJhaXNlCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiBuIGlzIE5vbmU6CiAgICAgICAgICAgICAgICByYWlzZSBCbG9ja2luZ0lPRXJyb3IoCiAgICAgICAgICAgICAgICAgICAgZXJybm8uRUFHQUlOLAogICAgICAgICAgICAgICAgICAgICJ3cml0ZSBjb3VsZCBub3QgY29tcGxldGUgd2l0aG91dCBibG9ja2luZyIsIDApCiAgICAgICAgICAgIGlmIG4gPiBsZW4oc2VsZi5fd3JpdGVfYnVmKSBvciBuIDwgMDoKICAgICAgICAgICAgICAgIHJhaXNlIElPRXJyb3IoIndyaXRlKCkgcmV0dXJuZWQgaW5jb3JyZWN0IG51bWJlciBvZiBieXRlcyIpCiAgICAgICAgICAgIGRlbCBzZWxmLl93cml0ZV9idWZbOm5dCgogICAgZGVmIHRlbGwoc2VsZik6CiAgICAgICAgcmV0dXJuIF9CdWZmZXJlZElPTWl4aW4udGVsbChzZWxmKSArIGxlbihzZWxmLl93cml0ZV9idWYpCgogICAgZGVmIHNlZWsoc2VsZiwgcG9zLCB3aGVuY2U9MCk6CiAgICAgICAgaWYgbm90ICgwIDw9IHdoZW5jZSA8PSAyKToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaW52YWxpZCB3aGVuY2UiKQogICAgICAgICN3aXRoIHNlbGYuX3dyaXRlX2xvY2s6ICAgI2ZpeG1lCiAgICAgICAgaWYgMToKICAgICAgICAgICAgc2VsZi5fZmx1c2hfdW5sb2NrZWQoKQogICAgICAgICAgICByZXR1cm4gX0J1ZmZlcmVkSU9NaXhpbi5zZWVrKHNlbGYsIHBvcywgd2hlbmNlKQoKCmNsYXNzIEJ1ZmZlcmVkUldQYWlyKEJ1ZmZlcmVkSU9CYXNlKToKCiAgICAjIkEgYnVmZmVyZWQgcmVhZGVyIGFuZCB3cml0ZXIgb2JqZWN0IHRvZ2V0aGVyLgoKICAgICNBIGJ1ZmZlcmVkIHJlYWRlciBvYmplY3QgYW5kIGJ1ZmZlcmVkIHdyaXRlciBvYmplY3QgcHV0IHRvZ2V0aGVyIHRvCiAgICAjZm9ybSBhIHNlcXVlbnRpYWwgSU8gb2JqZWN0IHRoYXQgY2FuIHJlYWQgYW5kIHdyaXRlLiBUaGlzIGlzIHR5cGljYWxseQogICAgI3VzZWQgd2l0aCBhIHNvY2tldCBvciB0d28td2F5IHBpcGUuCgogICAgI3JlYWRlciBhbmQgd3JpdGVyIGFyZSBSYXdJT0Jhc2Ugb2JqZWN0cyB0aGF0IGFyZSByZWFkYWJsZSBhbmQKICAgICN3cml0ZWFibGUgcmVzcGVjdGl2ZWx5LiBJZiB0aGUgYnVmZmVyX3NpemUgaXMgb21pdHRlZCBpdCBkZWZhdWx0cyB0bwogICAgI0RFRkFVTFRfQlVGRkVSX1NJWkUuCiAgICAjIgoKICAgICMgWFhYIFRoZSB1c2VmdWxuZXNzIG9mIHRoaXMgKGNvbXBhcmVkIHRvIGhhdmluZyB0d28gc2VwYXJhdGUgSU8KICAgICMgb2JqZWN0cykgaXMgcXVlc3Rpb25hYmxlLgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCByZWFkZXIsIHdyaXRlciwKICAgICAgICAgICAgICAgICBidWZmZXJfc2l6ZT1ERUZBVUxUX0JVRkZFUl9TSVpFLCBtYXhfYnVmZmVyX3NpemU9Tm9uZSk6CiAgICAgICAgIyJDb25zdHJ1Y3Rvci4KCiAgICAgICAgI1RoZSBhcmd1bWVudHMgYXJlIHR3byBSYXdJTyBpbnN0YW5jZXMuCiAgICAgICAgIyIKICAgICAgICBpZiBtYXhfYnVmZmVyX3NpemUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHdhcm5pbmdzLndhcm4oIm1heF9idWZmZXJfc2l6ZSBpcyBkZXByZWNhdGVkIiwgRGVwcmVjYXRpb25XYXJuaW5nLCAyKQoKICAgICAgICBpZiBub3QgcmVhZGVyLnJlYWRhYmxlKCk6CiAgICAgICAgICAgIHJhaXNlIElPRXJyb3IoJyJyZWFkZXIiIGFyZ3VtZW50IG11c3QgYmUgcmVhZGFibGUuJykKCiAgICAgICAgaWYgbm90IHdyaXRlci53cml0YWJsZSgpOgogICAgICAgICAgICByYWlzZSBJT0Vycm9yKCcid3JpdGVyIiBhcmd1bWVudCBtdXN0IGJlIHdyaXRhYmxlLicpCgogICAgICAgIHNlbGYucmVhZGVyID0gQnVmZmVyZWRSZWFkZXIocmVhZGVyLCBidWZmZXJfc2l6ZSkKICAgICAgICBzZWxmLndyaXRlciA9IEJ1ZmZlcmVkV3JpdGVyKHdyaXRlciwgYnVmZmVyX3NpemUpCgogICAgZGVmIHJlYWQoc2VsZiwgbj1Ob25lKToKICAgICAgICBpZiBuIGlzIE5vbmU6CiAgICAgICAgICAgIG4gPSAtMQogICAgICAgIHJldHVybiBzZWxmLnJlYWRlci5yZWFkKG4pCgogICAgZGVmIHJlYWRpbnRvKHNlbGYsIGIpOgogICAgICAgIHJldHVybiBzZWxmLnJlYWRlci5yZWFkaW50byhiKQoKICAgIGRlZiB3cml0ZShzZWxmLCBiKToKICAgICAgICByZXR1cm4gc2VsZi53cml0ZXIud3JpdGUoYikKCiAgICBkZWYgcGVlayhzZWxmLCBuPTApOgogICAgICAgIHJldHVybiBzZWxmLnJlYWRlci5wZWVrKG4pCgogICAgZGVmIHJlYWQxKHNlbGYsIG4pOgogICAgICAgIHJldHVybiBzZWxmLnJlYWRlci5yZWFkMShuKQoKICAgIGRlZiByZWFkYWJsZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5yZWFkZXIucmVhZGFibGUoKQoKICAgIGRlZiB3cml0YWJsZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi53cml0ZXIud3JpdGFibGUoKQoKICAgIGRlZiBmbHVzaChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi53cml0ZXIuZmx1c2goKQoKICAgIGRlZiBjbG9zZShzZWxmKToKICAgICAgICBzZWxmLndyaXRlci5jbG9zZSgpCiAgICAgICAgc2VsZi5yZWFkZXIuY2xvc2UoKQoKICAgIGRlZiBpc2F0dHkoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYucmVhZGVyLmlzYXR0eSgpIG9yIHNlbGYud3JpdGVyLmlzYXR0eSgpCgogICAgI0Bwcm9wZXJ0eQogICAgZGVmIGNsb3NlZChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi53cml0ZXIuY2xvc2VkCgoKY2xhc3MgQnVmZmVyZWRSYW5kb20oQnVmZmVyZWRXcml0ZXIsIEJ1ZmZlcmVkUmVhZGVyKToKCiAgICAjIkEgYnVmZmVyZWQgaW50ZXJmYWNlIHRvIHJhbmRvbSBhY2Nlc3Mgc3RyZWFtcy4KCiAgICAjVGhlIGNvbnN0cnVjdG9yIGNyZWF0ZXMgYSByZWFkZXIgYW5kIHdyaXRlciBmb3IgYSBzZWVrYWJsZSBzdHJlYW0sCiAgICAjcmF3LCBnaXZlbiBpbiB0aGUgZmlyc3QgYXJndW1lbnQuIElmIHRoZSBidWZmZXJfc2l6ZSBpcyBvbWl0dGVkIGl0CiAgICAjZGVmYXVsdHMgdG8gREVGQVVMVF9CVUZGRVJfU0laRS4KICAgICMiCgogICAgX3dhcm5pbmdfc3RhY2tfb2Zmc2V0ID0gMwoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCByYXcsCiAgICAgICAgICAgICAgICAgYnVmZmVyX3NpemU9REVGQVVMVF9CVUZGRVJfU0laRSwgbWF4X2J1ZmZlcl9zaXplPU5vbmUpOgogICAgICAgIHJhdy5fY2hlY2tTZWVrYWJsZSgpCiAgICAgICAgQnVmZmVyZWRSZWFkZXIuX19pbml0X18oc2VsZiwgcmF3LCBidWZmZXJfc2l6ZSkKICAgICAgICBCdWZmZXJlZFdyaXRlci5fX2luaXRfXyhzZWxmLCByYXcsIGJ1ZmZlcl9zaXplLCBtYXhfYnVmZmVyX3NpemUpCgogICAgZGVmIHNlZWsoc2VsZiwgcG9zLCB3aGVuY2U9MCk6CiAgICAgICAgaWYgbm90ICgwIDw9IHdoZW5jZSA8PSAyKToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaW52YWxpZCB3aGVuY2UiKQogICAgICAgIHNlbGYuZmx1c2goKQogICAgICAgIGlmIHNlbGYuX3JlYWRfYnVmOgogICAgICAgICAgICAjIFVuZG8gcmVhZCBhaGVhZC4KICAgICAgICAgICAgI3dpdGggc2VsZi5fcmVhZF9sb2NrOiAgICNmaXhtZQogICAgICAgICAgICBzZWxmLnJhdy5zZWVrKHNlbGYuX3JlYWRfcG9zIC0gbGVuKHNlbGYuX3JlYWRfYnVmKSwgMSkKICAgICAgICAjIEZpcnN0IGRvIHRoZSByYXcgc2VlaywgdGhlbiBlbXB0eSB0aGUgcmVhZCBidWZmZXIsIHNvIHRoYXQKICAgICAgICAjIGlmIHRoZSByYXcgc2VlayBmYWlscywgd2UgZG9uJ3QgbG9zZSBidWZmZXJlZCBkYXRhIGZvcmV2ZXIuCiAgICAgICAgcG9zID0gc2VsZi5yYXcuc2Vlayhwb3MsIHdoZW5jZSkKICAgICAgICAjd2l0aCBzZWxmLl9yZWFkX2xvY2s6ICAgI2ZpeG1lCiAgICAgICAgc2VsZi5fcmVzZXRfcmVhZF9idWYoKQogICAgICAgIGlmIHBvcyA8IDA6CiAgICAgICAgICAgIHJhaXNlIElPRXJyb3IoInNlZWsoKSByZXR1cm5lZCBpbnZhbGlkIHBvc2l0aW9uIikKICAgICAgICByZXR1cm4gcG9zCgogICAgZGVmIHRlbGwoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fd3JpdGVfYnVmOgogICAgICAgICAgICByZXR1cm4gQnVmZmVyZWRXcml0ZXIudGVsbChzZWxmKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBCdWZmZXJlZFJlYWRlci50ZWxsKHNlbGYpCgogICAgZGVmIHRydW5jYXRlKHNlbGYsIHBvcz1Ob25lKToKICAgICAgICBpZiBwb3MgaXMgTm9uZToKICAgICAgICAgICAgcG9zID0gc2VsZi50ZWxsKCkKICAgICAgICAjIFVzZSBzZWVrIHRvIGZsdXNoIHRoZSByZWFkIGJ1ZmZlci4KICAgICAgICByZXR1cm4gQnVmZmVyZWRXcml0ZXIudHJ1bmNhdGUoc2VsZiwgcG9zKQoKICAgIGRlZiByZWFkKHNlbGYsIG49Tm9uZSk6CiAgICAgICAgaWYgbiBpcyBOb25lOgogICAgICAgICAgICBuID0gLTEKICAgICAgICBzZWxmLmZsdXNoKCkKICAgICAgICByZXR1cm4gQnVmZmVyZWRSZWFkZXIucmVhZChzZWxmLCBuKQoKICAgIGRlZiByZWFkaW50byhzZWxmLCBiKToKICAgICAgICBzZWxmLmZsdXNoKCkKICAgICAgICByZXR1cm4gQnVmZmVyZWRSZWFkZXIucmVhZGludG8oc2VsZiwgYikKCiAgICBkZWYgcGVlayhzZWxmLCBuPTApOgogICAgICAgIHNlbGYuZmx1c2goKQogICAgICAgIHJldHVybiBCdWZmZXJlZFJlYWRlci5wZWVrKHNlbGYsIG4pCgogICAgZGVmIHJlYWQxKHNlbGYsIG4pOgogICAgICAgIHNlbGYuZmx1c2goKQogICAgICAgIHJldHVybiBCdWZmZXJlZFJlYWRlci5yZWFkMShzZWxmLCBuKQoKICAgIGRlZiB3cml0ZShzZWxmLCBiKToKICAgICAgICBpZiBzZWxmLl9yZWFkX2J1ZjoKICAgICAgICAgICAgIyBVbmRvIHJlYWRhaGVhZAogICAgICAgICAgICAjd2l0aCBzZWxmLl9yZWFkX2xvY2s6ICAjZml4bWUKICAgICAgICAgICAgc2VsZi5yYXcuc2VlayhzZWxmLl9yZWFkX3BvcyAtIGxlbihzZWxmLl9yZWFkX2J1ZiksIDEpCiAgICAgICAgICAgIHNlbGYuX3Jlc2V0X3JlYWRfYnVmKCkKICAgICAgICByZXR1cm4gQnVmZmVyZWRXcml0ZXIud3JpdGUoc2VsZiwgYikKCgpjbGFzcyBUZXh0SU9CYXNlKElPQmFzZSk6CgogICAgIyJCYXNlIGNsYXNzIGZvciB0ZXh0IEkvTy4KCiAgICAjVGhpcyBjbGFzcyBwcm92aWRlcyBhIGNoYXJhY3RlciBhbmQgbGluZSBiYXNlZCBpbnRlcmZhY2UgdG8gc3RyZWFtCiAgICAjSS9PLiBUaGVyZSBpcyBubyByZWFkaW50byBtZXRob2QgYmVjYXVzZSBQeXRob24ncyBjaGFyYWN0ZXIgc3RyaW5ncwogICAgI2FyZSBpbW11dGFibGUuIFRoZXJlIGlzIG5vIHB1YmxpYyBjb25zdHJ1Y3Rvci4KICAgICMiCgogICAgZGVmIHJlYWQoc2VsZiwgbj0tMSk6CiAgICAgICAgIyJSZWFkIGF0IG1vc3QgbiBjaGFyYWN0ZXJzIGZyb20gc3RyZWFtLCB3aGVyZSBuIGlzIGFuIGludC4KCiAgICAgICAgI1JlYWQgZnJvbSB1bmRlcmx5aW5nIGJ1ZmZlciB1bnRpbCB3ZSBoYXZlIG4gY2hhcmFjdGVycyBvciB3ZSBoaXQgRU9GLgogICAgICAgICNJZiBuIGlzIG5lZ2F0aXZlIG9yIG9taXR0ZWQsIHJlYWQgdW50aWwgRU9GLgoKICAgICAgICAjUmV0dXJucyBhIHN0cmluZy4KICAgICAgICAjIgogICAgICAgIHNlbGYuX3Vuc3VwcG9ydGVkKCJyZWFkIikKCiAgICBkZWYgd3JpdGUoc2VsZiwgcyk6CiAgICAgICAgIyJXcml0ZSBzdHJpbmcgcyB0byBzdHJlYW0gYW5kIHJldHVybmluZyBhbiBpbnQuIgogICAgICAgIHNlbGYuX3Vuc3VwcG9ydGVkKCJ3cml0ZSIpCgogICAgZGVmIHRydW5jYXRlKHNlbGYsIHBvcz1Ob25lKToKICAgICAgICAjIlRydW5jYXRlIHNpemUgdG8gcG9zLCB3aGVyZSBwb3MgaXMgYW4gaW50LiIKICAgICAgICBzZWxmLl91bnN1cHBvcnRlZCgidHJ1bmNhdGUiKQoKICAgIGRlZiByZWFkbGluZShzZWxmKToKICAgICAgICAjIlJlYWQgdW50aWwgbmV3bGluZSBvciBFT0YuCgogICAgICAgICNSZXR1cm5zIGFuIGVtcHR5IHN0cmluZyBpZiBFT0YgaXMgaGl0IGltbWVkaWF0ZWx5LgogICAgICAgICMiCiAgICAgICAgc2VsZi5fdW5zdXBwb3J0ZWQoInJlYWRsaW5lIikKCiAgICBkZWYgZGV0YWNoKHNlbGYpOgogICAgICAgICMiCiAgICAgICAgI1NlcGFyYXRlIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlciBmcm9tIHRoZSBUZXh0SU9CYXNlIGFuZCByZXR1cm4gaXQuCgogICAgICAgICNBZnRlciB0aGUgdW5kZXJseWluZyBidWZmZXIgaGFzIGJlZW4gZGV0YWNoZWQsIHRoZSBUZXh0SU8gaXMgaW4gYW4KICAgICAgICAjdW51c2FibGUgc3RhdGUuCiAgICAgICAgIyIKICAgICAgICBzZWxmLl91bnN1cHBvcnRlZCgiZGV0YWNoIikKCiAgICAjQHByb3BlcnR5CiAgICBkZWYgZW5jb2Rpbmcoc2VsZik6CiAgICAgICAgIyJTdWJjbGFzc2VzIHNob3VsZCBvdmVycmlkZS4iCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICAjQHByb3BlcnR5CiAgICBkZWYgbmV3bGluZXMoc2VsZik6CiAgICAgICAgIyJMaW5lIGVuZGluZ3MgdHJhbnNsYXRlZCBzbyBmYXIuCgogICAgICAgICNPbmx5IGxpbmUgZW5kaW5ncyB0cmFuc2xhdGVkIGR1cmluZyByZWFkaW5nIGFyZSBjb25zaWRlcmVkLgoKICAgICAgICAjU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUuCiAgICAgICAgIyIKICAgICAgICByZXR1cm4gTm9uZQoKICAgICNAcHJvcGVydHkKICAgIGRlZiBlcnJvcnMoc2VsZik6CiAgICAgICAgIyIiRXJyb3Igc2V0dGluZyBvZiB0aGUgZGVjb2RlciBvciBlbmNvZGVyLgoKICAgICAgICAjU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUuIgogICAgICAgIHJldHVybiBOb25lCgojQkUgY29tbWVudGluZyB0aHNpIG91dAojaW8uVGV4dElPQmFzZS5yZWdpc3RlcihUZXh0SU9CYXNlKQoKCmNsYXNzIEluY3JlbWVudGFsTmV3bGluZURlY29kZXIoY29kZWNzLkluY3JlbWVudGFsRGVjb2Rlcik6CgogICAgIyAiQ29kZWMgdXNlZCB3aGVuIHJlYWRpbmcgYSBmaWxlIGluIHVuaXZlcnNhbCBuZXdsaW5lcyBtb2RlLiAgSXQgd3JhcHMKICAgICMgYW5vdGhlciBpbmNyZW1lbnRhbCBkZWNvZGVyLCB0cmFuc2xhdGluZyBcclxuIGFuZCBcciBpbnRvIFxuLiAgSXQgYWxzbwogICAgI3JlY29yZHMgdGhlIHR5cGVzIG9mIG5ld2xpbmVzIGVuY291bnRlcmVkLiAgV2hlbiB1c2VkIHdpdGgKICAgICN0cmFuc2xhdGU9RmFsc2UsIGl0IGVuc3VyZXMgdGhhdCB0aGUgbmV3bGluZSBzZXF1ZW5jZSBpcyByZXR1cm5lZCBpbgogICAgI29uZSBwaWVjZS4KICAgICMgIgogICAgCiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVjb2RlciwgdHJhbnNsYXRlLCBlcnJvcnM9J3N0cmljdCcpOgogICAgICAgIGNvZGVjcy5JbmNyZW1lbnRhbERlY29kZXIuX19pbml0X18oc2VsZiwgZXJyb3JzPWVycm9ycykKICAgICAgICBzZWxmLnRyYW5zbGF0ZSA9IHRyYW5zbGF0ZQogICAgICAgIHNlbGYuZGVjb2RlciA9IGRlY29kZXIKICAgICAgICBzZWxmLnNlZW5ubCA9IDAKICAgICAgICBzZWxmLnBlbmRpbmdjciA9IEZhbHNlCiAgICBkZWYgZGVjb2RlKHNlbGYsIGlucHV0LCBmaW5hbD1GYWxzZSk6CiAgICAgICAgIyBkZWNvZGUgaW5wdXQgKHdpdGggdGhlIGV2ZW50dWFsIFxyIGZyb20gYSBwcmV2aW91cyBwYXNzKQogICAgICAgIGlmIHNlbGYuZGVjb2RlciBpcyBOb25lOgogICAgICAgICAgICBvdXRwdXQgPSBpbnB1dAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG91dHB1dCA9IHNlbGYuZGVjb2Rlci5kZWNvZGUoaW5wdXQsIGZpbmFsPWZpbmFsKQogICAgICAgIGlmIHNlbGYucGVuZGluZ2NyIGFuZCAob3V0cHV0IG9yIGZpbmFsKToKICAgICAgICAgICAgb3V0cHV0ID0gIlxyIiArIG91dHB1dAogICAgICAgICAgICBzZWxmLnBlbmRpbmdjciA9IEZhbHNlCgogICAgICAgICMgcmV0YWluIGxhc3QgXHIgZXZlbiB3aGVuIG5vdCB0cmFuc2xhdGluZyBkYXRhOgogICAgICAgICMgdGhlbiByZWFkbGluZSgpIGlzIHN1cmUgdG8gZ2V0IFxyXG4gaW4gb25lIHBhc3MKICAgICAgICBpZiBvdXRwdXQuZW5kc3dpdGgoIlxyIikgYW5kIG5vdCBmaW5hbDoKICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0WzotMV0KICAgICAgICAgICAgc2VsZi5wZW5kaW5nY3IgPSBUcnVlCgogICAgICAgICMgUmVjb3JkIHdoaWNoIG5ld2xpbmVzIGFyZSByZWFkCiAgICAgICAgY3JsZiA9IG91dHB1dC5jb3VudCgnXHJcbicpCiAgICAgICAgY3IgPSBvdXRwdXQuY291bnQoJ1xyJykgLSBjcmxmCiAgICAgICAgbGYgPSBvdXRwdXQuY291bnQoJ1xuJykgLSBjcmxmCiAgICAgICAgc2VsZi5zZWVubmwgfD0gKGxmIGFuZCBzZWxmLl9MRikgfCAoY3IgYW5kIHNlbGYuX0NSKSBcCiAgICAgICAgICAgICAgICAgICAgfCAoY3JsZiBhbmQgc2VsZi5fQ1JMRikKCiAgICAgICAgaWYgc2VsZi50cmFuc2xhdGU6CiAgICAgICAgICAgIGlmIGNybGY6CiAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgiXHJcbiIsICJcbiIpCiAgICAgICAgICAgIGlmIGNyOgogICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoIlxyIiwgIlxuIikKCiAgICAgICAgcmV0dXJuIG91dHB1dAoKICAgIGRlZiBnZXRzdGF0ZShzZWxmKToKICAgICAgICBpZiBzZWxmLmRlY29kZXIgaXMgTm9uZToKICAgICAgICAgICAgI2J1ZiA9IGIiIiAgICNmaXhtZQogICAgICAgICAgICBidWYgPSAiIgogICAgICAgICAgICBmbGFnID0gMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGJ1ZiwgZmxhZyA9IHNlbGYuZGVjb2Rlci5nZXRzdGF0ZSgpCiAgICAgICAgZmxhZyA8PD0gMQogICAgICAgIGlmIHNlbGYucGVuZGluZ2NyOgogICAgICAgICAgICBmbGFnIHw9IDEKICAgICAgICByZXR1cm4gYnVmLCBmbGFnCgogICAgZGVmIHNldHN0YXRlKHNlbGYsIHN0YXRlKToKICAgICAgICBidWYsIGZsYWcgPSBzdGF0ZQogICAgICAgIHNlbGYucGVuZGluZ2NyID0gYm9vbChmbGFnICYgMSkKICAgICAgICBpZiBzZWxmLmRlY29kZXIgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGYuZGVjb2Rlci5zZXRzdGF0ZSgoYnVmLCBmbGFnID4+IDEpKQoKICAgIGRlZiByZXNldChzZWxmKToKICAgICAgICBzZWxmLnNlZW5ubCA9IDAKICAgICAgICBzZWxmLnBlbmRpbmdjciA9IEZhbHNlCiAgICAgICAgaWYgc2VsZi5kZWNvZGVyIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLmRlY29kZXIucmVzZXQoKQoKICAgIF9MRiA9IDEKICAgIF9DUiA9IDIKICAgIF9DUkxGID0gNAogICAgCiAgICAjQHByb3BlcnR5CiAgICBkZWYgbmV3bGluZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIChOb25lLAogICAgICAgICAgICAgICAgIlxuIiwKICAgICAgICAgICAgICAgICJcciIsCiAgICAgICAgICAgICAgICAoIlxyIiwgIlxuIiksCiAgICAgICAgICAgICAgICAiXHJcbiIsCiAgICAgICAgICAgICAgICAoIlxuIiwgIlxyXG4iKSwKICAgICAgICAgICAgICAgICgiXHIiLCAiXHJcbiIpLAogICAgICAgICAgICAgICAgKCJcciIsICJcbiIsICJcclxuIikKICAgICAgICAgICAgICAgKVtzZWxmLnNlZW5ubF0KCgpjbGFzcyBUZXh0SU9XcmFwcGVyKFRleHRJT0Jhc2UpOgogICAgX0NIVU5LX1NJWkUgPSAyMDQ4CgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGJ1ZmZlciwgZW5jb2Rpbmc9Tm9uZSwgZXJyb3JzPU5vbmUsIG5ld2xpbmU9Tm9uZSwKICAgICAgICAgICAgICAgICBsaW5lX2J1ZmZlcmluZz1GYWxzZSwgd3JpdGVfdGhyb3VnaD1GYWxzZSk6CiAgICAgICAgaWYgbmV3bGluZSBpcyBub3QgTm9uZSBhbmQgbm90IGlzaW5zdGFuY2UobmV3bGluZSwgc3RyKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJpbGxlZ2FsIG5ld2xpbmUgdHlwZTogJXIiICUgKHR5cGUobmV3bGluZSksKSkKICAgICAgICBpZiBuZXdsaW5lIG5vdCBpbiAoTm9uZSwgIiIsICJcbiIsICJcciIsICJcclxuIik6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImlsbGVnYWwgbmV3bGluZSB2YWx1ZTogJXIiICUgKG5ld2xpbmUsKSkKICAgICAgICBpZiBlbmNvZGluZyBpcyBOb25lOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBlbmNvZGluZyA9IG9zLmRldmljZV9lbmNvZGluZyhidWZmZXIuZmlsZW5vKCkpCiAgICAgICAgICAgIGV4Y2VwdCAoQXR0cmlidXRlRXJyb3IsIFVuc3VwcG9ydGVkT3BlcmF0aW9uKToKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgaWYgZW5jb2RpbmcgaXMgTm9uZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBpbXBvcnQgbG9jYWxlCiAgICAgICAgICAgICAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgICAgICAgICAgICAgIyBJbXBvcnRpbmcgbG9jYWxlIG1heSBmYWlsIGlmIFB5dGhvbiBpcyBiZWluZyBidWlsdAogICAgICAgICAgICAgICAgICAgIGVuY29kaW5nID0gImFzY2lpIgogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBlbmNvZGluZyA9IGxvY2FsZS5nZXRwcmVmZXJyZWRlbmNvZGluZygpCgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGVuY29kaW5nLCBzdHIpOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJpbnZhbGlkIGVuY29kaW5nOiAlciIgJSBlbmNvZGluZykKCiAgICAgICAgaWYgZXJyb3JzIGlzIE5vbmU6CiAgICAgICAgICAgIGVycm9ycyA9ICJzdHJpY3QiCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoZXJyb3JzLCBzdHIpOgogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaW52YWxpZCBlcnJvcnM6ICVyIiAlIGVycm9ycykKCiAgICAgICAgc2VsZi5fYnVmZmVyID0gYnVmZmVyCiAgICAgICAgc2VsZi5fbGluZV9idWZmZXJpbmcgPSBsaW5lX2J1ZmZlcmluZwogICAgICAgIHNlbGYuX2VuY29kaW5nID0gZW5jb2RpbmcKICAgICAgICBzZWxmLl9lcnJvcnMgPSBlcnJvcnMKICAgICAgICBzZWxmLl9yZWFkdW5pdmVyc2FsID0gbm90IG5ld2xpbmUKICAgICAgICBzZWxmLl9yZWFkdHJhbnNsYXRlID0gbmV3bGluZSBpcyBOb25lCiAgICAgICAgc2VsZi5fcmVhZG5sID0gbmV3bGluZQogICAgICAgIHNlbGYuX3dyaXRldHJhbnNsYXRlID0gbmV3bGluZSAhPSAnJwogICAgICAgIHNlbGYuX3dyaXRlbmwgPSBuZXdsaW5lIG9yIG9zLmxpbmVzZXAKICAgICAgICBzZWxmLl9lbmNvZGVyID0gTm9uZQogICAgICAgIHNlbGYuX2RlY29kZXIgPSBOb25lCiAgICAgICAgc2VsZi5fZGVjb2RlZF9jaGFycyA9ICcnICAjIGJ1ZmZlciBmb3IgdGV4dCByZXR1cm5lZCBmcm9tIGRlY29kZXIKICAgICAgICBzZWxmLl9kZWNvZGVkX2NoYXJzX3VzZWQgPSAwICAjIG9mZnNldCBpbnRvIF9kZWNvZGVkX2NoYXJzIGZvciByZWFkKCkKICAgICAgICBzZWxmLl9zbmFwc2hvdCA9IE5vbmUgICMgaW5mbyBmb3IgcmVjb25zdHJ1Y3RpbmcgZGVjb2RlciBzdGF0ZQogICAgICAgIHNlbGYuX3NlZWthYmxlID0gc2VsZi5fdGVsbGluZyA9IHNlbGYuYnVmZmVyLnNlZWthYmxlKCkKICAgICAgICBzZWxmLl9oYXNfcmVhZDEgPSBoYXNhdHRyKHNlbGYuYnVmZmVyLCAncmVhZDEnKQoKICAgICAgICBpZiBzZWxmLl9zZWVrYWJsZSBhbmQgc2VsZi53cml0YWJsZSgpOgogICAgICAgICAgICBwb3NpdGlvbiA9IHNlbGYuYnVmZmVyLnRlbGwoKQogICAgICAgICAgICBpZiBwb3NpdGlvbiAhPSAwOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIHNlbGYuX2dldF9lbmNvZGVyKCkuc2V0c3RhdGUoMCkKICAgICAgICAgICAgICAgIGV4Y2VwdCBMb29rdXBFcnJvcjoKICAgICAgICAgICAgICAgICAgICAjIFNvbWV0aW1lcyB0aGUgZW5jb2RlciBkb2Vzbid0IGV4aXN0CiAgICAgICAgICAgICAgICAgICAgcGFzcwoKICAgICMgc2VsZi5fc25hcHNob3QgaXMgZWl0aGVyIE5vbmUsIG9yIGEgdHVwbGUgKGRlY19mbGFncywgbmV4dF9pbnB1dCkKICAgICMgd2hlcmUgZGVjX2ZsYWdzIGlzIHRoZSBzZWNvbmQgKGludGVnZXIpIGl0ZW0gb2YgdGhlIGRlY29kZXIgc3RhdGUKICAgICMgYW5kIG5leHRfaW5wdXQgaXMgdGhlIGNodW5rIG9mIGlucHV0IGJ5dGVzIHRoYXQgY29tZXMgbmV4dCBhZnRlciB0aGUKICAgICMgc25hcHNob3QgcG9pbnQuICBXZSB1c2UgdGhpcyB0byByZWNvbnN0cnVjdCBkZWNvZGVyIHN0YXRlcyBpbiB0ZWxsKCkuCgogICAgIyBOYW1pbmcgY29udmVudGlvbjoKICAgICMgICAtICJieXRlc18uLi4iIGZvciBpbnRlZ2VyIHZhcmlhYmxlcyB0aGF0IGNvdW50IGlucHV0IGJ5dGVzCiAgICAjICAgLSAiY2hhcnNfLi4uIiBmb3IgaW50ZWdlciB2YXJpYWJsZXMgdGhhdCBjb3VudCBkZWNvZGVkIGNoYXJhY3RlcnMKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgcmVzdWx0ID0gIjxfcHlpby5UZXh0SU9XcmFwcGVyIgogICAgICAgIHRyeToKICAgICAgICAgICAgbmFtZSA9IHNlbGYubmFtZQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJlc3VsdCArPSAiIG5hbWU9ezAhcn0iLmZvcm1hdChuYW1lKQogICAgICAgIHRyeToKICAgICAgICAgICAgbW9kZSA9IHNlbGYubW9kZQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJlc3VsdCArPSAiIG1vZGU9ezAhcn0iLmZvcm1hdChtb2RlKQogICAgICAgIHJldHVybiByZXN1bHQgKyAiIGVuY29kaW5nPXswIXJ9PiIuZm9ybWF0KHNlbGYuZW5jb2RpbmcpCgogICAgI0Bwcm9wZXJ0eQogICAgZGVmIGVuY29kaW5nKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9lbmNvZGluZwoKICAgICNAcHJvcGVydHkKICAgIGRlZiBlcnJvcnMoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuX2Vycm9ycwoKICAgICNAcHJvcGVydHkKICAgIGRlZiBsaW5lX2J1ZmZlcmluZyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fbGluZV9idWZmZXJpbmcKCiAgICAjQHByb3BlcnR5CiAgICBkZWYgYnVmZmVyKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9idWZmZXIKCiAgICBkZWYgc2Vla2FibGUoc2VsZik6CiAgICAgICAgaWYgc2VsZi5jbG9zZWQ6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkkvTyBvcGVyYXRpb24gb24gY2xvc2VkIGZpbGUuIikKICAgICAgICByZXR1cm4gc2VsZi5fc2Vla2FibGUKCiAgICBkZWYgcmVhZGFibGUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuYnVmZmVyLnJlYWRhYmxlKCkKCiAgICBkZWYgd3JpdGFibGUoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuYnVmZmVyLndyaXRhYmxlKCkKCiAgICBkZWYgZmx1c2goc2VsZik6CiAgICAgICAgc2VsZi5idWZmZXIuZmx1c2goKQogICAgICAgIHNlbGYuX3RlbGxpbmcgPSBzZWxmLl9zZWVrYWJsZQoKICAgIGRlZiBjbG9zZShzZWxmKToKICAgICAgICBpZiBzZWxmLmJ1ZmZlciBpcyBub3QgTm9uZSBhbmQgbm90IHNlbGYuY2xvc2VkOgogICAgICAgICAgICBzZWxmLmZsdXNoKCkKICAgICAgICAgICAgc2VsZi5idWZmZXIuY2xvc2UoKQoKICAgICNAcHJvcGVydHkKICAgIGRlZiBjbG9zZWQoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuYnVmZmVyLmNsb3NlZAoKICAgICNAcHJvcGVydHkKICAgIGRlZiBuYW1lKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmJ1ZmZlci5uYW1lCgogICAgZGVmIGZpbGVubyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5idWZmZXIuZmlsZW5vKCkKCiAgICBkZWYgaXNhdHR5KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmJ1ZmZlci5pc2F0dHkoKQoKICAgIGRlZiB3cml0ZShzZWxmLCBzKToKICAgICAgICAnV3JpdGUgZGF0YSwgd2hlcmUgcyBpcyBhIHN0cicKICAgICAgICBpZiBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigid3JpdGUgdG8gY2xvc2VkIGZpbGUiKQogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKHMsIHN0cik6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiY2FuJ3Qgd3JpdGUgJXMgdG8gdGV4dCBzdHJlYW0iICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuX19jbGFzc19fLl9fbmFtZV9fKQogICAgICAgIGxlbmd0aCA9IGxlbihzKQogICAgICAgIGhhc2xmID0gKHNlbGYuX3dyaXRldHJhbnNsYXRlIG9yIHNlbGYuX2xpbmVfYnVmZmVyaW5nKSBhbmQgIlxuIiBpbiBzCiAgICAgICAgaWYgaGFzbGYgYW5kIHNlbGYuX3dyaXRldHJhbnNsYXRlIGFuZCBzZWxmLl93cml0ZW5sICE9ICJcbiI6CiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoIlxuIiwgc2VsZi5fd3JpdGVubCkKICAgICAgICBlbmNvZGVyID0gc2VsZi5fZW5jb2RlciBvciBzZWxmLl9nZXRfZW5jb2RlcigpCiAgICAgICAgIyBYWFggV2hhdCBpZiB3ZSB3ZXJlIGp1c3QgcmVhZGluZz8KICAgICAgICBiID0gZW5jb2Rlci5lbmNvZGUocykKICAgICAgICBzZWxmLmJ1ZmZlci53cml0ZShiKQogICAgICAgIGlmIHNlbGYuX2xpbmVfYnVmZmVyaW5nIGFuZCAoaGFzbGYgb3IgIlxyIiBpbiBzKToKICAgICAgICAgICAgc2VsZi5mbHVzaCgpCiAgICAgICAgc2VsZi5fc25hcHNob3QgPSBOb25lCiAgICAgICAgaWYgc2VsZi5fZGVjb2RlcjoKICAgICAgICAgICAgc2VsZi5fZGVjb2Rlci5yZXNldCgpCiAgICAgICAgcmV0dXJuIGxlbmd0aAoKICAgIGRlZiBfZ2V0X2VuY29kZXIoc2VsZik6CiAgICAgICAgbWFrZV9lbmNvZGVyID0gY29kZWNzLmdldGluY3JlbWVudGFsZW5jb2RlcihzZWxmLl9lbmNvZGluZykKICAgICAgICBzZWxmLl9lbmNvZGVyID0gbWFrZV9lbmNvZGVyKHNlbGYuX2Vycm9ycykKICAgICAgICByZXR1cm4gc2VsZi5fZW5jb2RlcgoKICAgIGRlZiBfZ2V0X2RlY29kZXIoc2VsZik6CiAgICAgICAgbWFrZV9kZWNvZGVyID0gY29kZWNzLmdldGluY3JlbWVudGFsZGVjb2RlcihzZWxmLl9lbmNvZGluZykKICAgICAgICBkZWNvZGVyID0gbWFrZV9kZWNvZGVyKHNlbGYuX2Vycm9ycykKICAgICAgICBpZiBzZWxmLl9yZWFkdW5pdmVyc2FsOgogICAgICAgICAgICBkZWNvZGVyID0gSW5jcmVtZW50YWxOZXdsaW5lRGVjb2RlcihkZWNvZGVyLCBzZWxmLl9yZWFkdHJhbnNsYXRlKQogICAgICAgIHNlbGYuX2RlY29kZXIgPSBkZWNvZGVyCiAgICAgICAgcmV0dXJuIGRlY29kZXIKCiAgICAjIFRoZSBmb2xsb3dpbmcgdGhyZWUgbWV0aG9kcyBpbXBsZW1lbnQgYW4gQURUIGZvciBfZGVjb2RlZF9jaGFycy4KICAgICMgVGV4dCByZXR1cm5lZCBmcm9tIHRoZSBkZWNvZGVyIGlzIGJ1ZmZlcmVkIGhlcmUgdW50aWwgdGhlIGNsaWVudAogICAgIyByZXF1ZXN0cyBpdCBieSBjYWxsaW5nIG91ciByZWFkKCkgb3IgcmVhZGxpbmUoKSBtZXRob2QuCiAgICBkZWYgX3NldF9kZWNvZGVkX2NoYXJzKHNlbGYsIGNoYXJzKToKICAgICAgICAiU2V0IHRoZSBfZGVjb2RlZF9jaGFycyBidWZmZXIuIgogICAgICAgIHNlbGYuX2RlY29kZWRfY2hhcnMgPSBjaGFycwogICAgICAgIHNlbGYuX2RlY29kZWRfY2hhcnNfdXNlZCA9IDAKCiAgICBkZWYgX2dldF9kZWNvZGVkX2NoYXJzKHNlbGYsIG49Tm9uZSk6CiAgICAgICAgIkFkdmFuY2UgaW50byB0aGUgX2RlY29kZWRfY2hhcnMgYnVmZmVyLiIKICAgICAgICBvZmZzZXQgPSBzZWxmLl9kZWNvZGVkX2NoYXJzX3VzZWQKICAgICAgICBpZiBuIGlzIE5vbmU6CiAgICAgICAgICAgIGNoYXJzID0gc2VsZi5fZGVjb2RlZF9jaGFyc1tvZmZzZXQ6XQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNoYXJzID0gc2VsZi5fZGVjb2RlZF9jaGFyc1tvZmZzZXQ6b2Zmc2V0ICsgbl0KICAgICAgICBzZWxmLl9kZWNvZGVkX2NoYXJzX3VzZWQgKz0gbGVuKGNoYXJzKQogICAgICAgIHJldHVybiBjaGFycwoKICAgIGRlZiBfcmV3aW5kX2RlY29kZWRfY2hhcnMoc2VsZiwgbik6CiAgICAgICAgIlJld2luZCB0aGUgX2RlY29kZWRfY2hhcnMgYnVmZmVyLiIKICAgICAgICBpZiBzZWxmLl9kZWNvZGVkX2NoYXJzX3VzZWQgPCBuOgogICAgICAgICAgICByYWlzZSBBc3NlcnRpb25FcnJvcigicmV3aW5kIGRlY29kZWRfY2hhcnMgb3V0IG9mIGJvdW5kcyIpCiAgICAgICAgc2VsZi5fZGVjb2RlZF9jaGFyc191c2VkIC09IG4KCiAgICBkZWYgX3JlYWRfY2h1bmsoc2VsZik6CiAgICAgICAgIlJlYWQgYW5kIGRlY29kZSB0aGUgbmV4dCBjaHVuayBvZiBkYXRhIGZyb20gdGhlIEJ1ZmZlcmVkUmVhZGVyLiIKCiAgICAgICAgIyBUaGUgcmV0dXJuIHZhbHVlIGlzIFRydWUgdW5sZXNzIEVPRiB3YXMgcmVhY2hlZC4gIFRoZSBkZWNvZGVkCiAgICAgICAgIyBzdHJpbmcgaXMgcGxhY2VkIGluIHNlbGYuX2RlY29kZWRfY2hhcnMgKHJlcGxhY2luZyBpdHMgcHJldmlvdXMKICAgICAgICAjIHZhbHVlKS4gIFRoZSBlbnRpcmUgaW5wdXQgY2h1bmsgaXMgc2VudCB0byB0aGUgZGVjb2RlciwgdGhvdWdoCiAgICAgICAgIyBzb21lIG9mIGl0IG1heSByZW1haW4gYnVmZmVyZWQgaW4gdGhlIGRlY29kZXIsIHlldCB0byBiZQogICAgICAgICMgY29udmVydGVkLgoKICAgICAgICBpZiBzZWxmLl9kZWNvZGVyIGlzIE5vbmU6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIm5vIGRlY29kZXIiKQoKICAgICAgICBpZiBzZWxmLl90ZWxsaW5nOgogICAgICAgICAgICAjIFRvIHByZXBhcmUgZm9yIHRlbGwoKSwgd2UgbmVlZCB0byBzbmFwc2hvdCBhIHBvaW50IGluIHRoZQogICAgICAgICAgICAjIGZpbGUgd2hlcmUgdGhlIGRlY29kZXIncyBpbnB1dCBidWZmZXIgaXMgZW1wdHkuCgogICAgICAgICAgICBkZWNfYnVmZmVyLCBkZWNfZmxhZ3MgPSBzZWxmLl9kZWNvZGVyLmdldHN0YXRlKCkKICAgICAgICAgICAgIyBHaXZlbiB0aGlzLCB3ZSBrbm93IHRoZXJlIHdhcyBhIHZhbGlkIHNuYXBzaG90IHBvaW50CiAgICAgICAgICAgICMgbGVuKGRlY19idWZmZXIpIGJ5dGVzIGFnbyB3aXRoIGRlY29kZXIgc3RhdGUgKGInJywgZGVjX2ZsYWdzKS4KCiAgICAgICAgIyBSZWFkIGEgY2h1bmssIGRlY29kZSBpdCwgYW5kIHB1dCB0aGUgcmVzdWx0IGluIHNlbGYuX2RlY29kZWRfY2hhcnMuCiAgICAgICAgaWYgc2VsZi5faGFzX3JlYWQxOgogICAgICAgICAgICBpbnB1dF9jaHVuayA9IHNlbGYuYnVmZmVyLnJlYWQxKHNlbGYuX0NIVU5LX1NJWkUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaW5wdXRfY2h1bmsgPSBzZWxmLmJ1ZmZlci5yZWFkKHNlbGYuX0NIVU5LX1NJWkUpCiAgICAgICAgZW9mID0gbm90IGlucHV0X2NodW5rCiAgICAgICAgc2VsZi5fc2V0X2RlY29kZWRfY2hhcnMoc2VsZi5fZGVjb2Rlci5kZWNvZGUoaW5wdXRfY2h1bmssIGVvZikpCgogICAgICAgIGlmIHNlbGYuX3RlbGxpbmc6CiAgICAgICAgICAgICMgQXQgdGhlIHNuYXBzaG90IHBvaW50LCBsZW4oZGVjX2J1ZmZlcikgYnl0ZXMgYmVmb3JlIHRoZSByZWFkLAogICAgICAgICAgICAjIHRoZSBuZXh0IGlucHV0IHRvIGJlIGRlY29kZWQgaXMgZGVjX2J1ZmZlciArIGlucHV0X2NodW5rLgogICAgICAgICAgICBzZWxmLl9zbmFwc2hvdCA9IChkZWNfZmxhZ3MsIGRlY19idWZmZXIgKyBpbnB1dF9jaHVuaykKCiAgICAgICAgcmV0dXJuIG5vdCBlb2YKCiAgICBkZWYgX3BhY2tfY29va2llKHNlbGYsIHBvc2l0aW9uLCBkZWNfZmxhZ3M9MCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZXNfdG9fZmVlZD0wLCBuZWVkX2VvZj0wLCBjaGFyc190b19za2lwPTApOgogICAgICAgICMgVGhlIG1lYW5pbmcgb2YgYSB0ZWxsKCkgY29va2llIGlzOiBzZWVrIHRvIHBvc2l0aW9uLCBzZXQgdGhlCiAgICAgICAgIyBkZWNvZGVyIGZsYWdzIHRvIGRlY19mbGFncywgcmVhZCBieXRlc190b19mZWVkIGJ5dGVzLCBmZWVkIHRoZW0KICAgICAgICAjIGludG8gdGhlIGRlY29kZXIgd2l0aCBuZWVkX2VvZiBhcyB0aGUgRU9GIGZsYWcsIHRoZW4gc2tpcAogICAgICAgICMgY2hhcnNfdG9fc2tpcCBjaGFyYWN0ZXJzIG9mIHRoZSBkZWNvZGVkIHJlc3VsdC4gIEZvciBtb3N0IHNpbXBsZQogICAgICAgICMgZGVjb2RlcnMsIHRlbGwoKSB3aWxsIG9mdGVuIGp1c3QgZ2l2ZSBhIGJ5dGUgb2Zmc2V0IGluIHRoZSBmaWxlLgogICAgICAgIHJldHVybiAocG9zaXRpb24gfCAoZGVjX2ZsYWdzPDw2NCkgfCAoYnl0ZXNfdG9fZmVlZDw8MTI4KSB8CiAgICAgICAgICAgICAgIChjaGFyc190b19za2lwPDwxOTIpIHwgYm9vbChuZWVkX2VvZik8PDI1NikKCiAgICBkZWYgX3VucGFja19jb29raWUoc2VsZiwgYmlnaW50KToKICAgICAgICByZXN0LCBwb3NpdGlvbiA9IGRpdm1vZChiaWdpbnQsIDE8PDY0KQogICAgICAgIHJlc3QsIGRlY19mbGFncyA9IGRpdm1vZChyZXN0LCAxPDw2NCkKICAgICAgICByZXN0LCBieXRlc190b19mZWVkID0gZGl2bW9kKHJlc3QsIDE8PDY0KQogICAgICAgIG5lZWRfZW9mLCBjaGFyc190b19za2lwID0gZGl2bW9kKHJlc3QsIDE8PDY0KQogICAgICAgIHJldHVybiBwb3NpdGlvbiwgZGVjX2ZsYWdzLCBieXRlc190b19mZWVkLCBuZWVkX2VvZiwgY2hhcnNfdG9fc2tpcAogICAgIiIiCiAgICAjIyAjZml4bWUgSSBkaWRuJ3Qga25vdyB0aGF0IGZvci4uIGVsc2UgY291bGQgZXZlbiBvY2N1ciEgOigKICAgIGRlZiB0ZWxsKHNlbGYpOgogICAgICAgIGlmIG5vdCBzZWxmLl9zZWVrYWJsZToKICAgICAgICAgICAgcmFpc2UgVW5zdXBwb3J0ZWRPcGVyYXRpb24oInVuZGVybHlpbmcgc3RyZWFtIGlzIG5vdCBzZWVrYWJsZSIpCiAgICAgICAgaWYgbm90IHNlbGYuX3RlbGxpbmc6CiAgICAgICAgICAgIHJhaXNlIElPRXJyb3IoInRlbGxpbmcgcG9zaXRpb24gZGlzYWJsZWQgYnkgbmV4dCgpIGNhbGwiKQogICAgICAgIHNlbGYuZmx1c2goKQogICAgICAgIHBvc2l0aW9uID0gc2VsZi5idWZmZXIudGVsbCgpCiAgICAgICAgZGVjb2RlciA9IHNlbGYuX2RlY29kZXIKICAgICAgICBpZiBkZWNvZGVyIGlzIE5vbmUgb3Igc2VsZi5fc25hcHNob3QgaXMgTm9uZToKICAgICAgICAgICAgaWYgc2VsZi5fZGVjb2RlZF9jaGFyczoKICAgICAgICAgICAgICAgICMgVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLgogICAgICAgICAgICAgICAgcmFpc2UgQXNzZXJ0aW9uRXJyb3IoInBlbmRpbmcgZGVjb2RlZCB0ZXh0IikKICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uCgogICAgICAgICMgU2tpcCBiYWNrd2FyZCB0byB0aGUgc25hcHNob3QgcG9pbnQgKHNlZSBfcmVhZF9jaHVuaykuCiAgICAgICAgZGVjX2ZsYWdzLCBuZXh0X2lucHV0ID0gc2VsZi5fc25hcHNob3QKICAgICAgICBwb3NpdGlvbiAtPSBsZW4obmV4dF9pbnB1dCkKCiAgICAgICAgIyBIb3cgbWFueSBkZWNvZGVkIGNoYXJhY3RlcnMgaGF2ZSBiZWVuIHVzZWQgdXAgc2luY2UgdGhlIHNuYXBzaG90PwogICAgICAgIGNoYXJzX3RvX3NraXAgPSBzZWxmLl9kZWNvZGVkX2NoYXJzX3VzZWQKICAgICAgICBpZiBjaGFyc190b19za2lwID09IDA6CiAgICAgICAgICAgICMgV2UgaGF2ZW4ndCBtb3ZlZCBmcm9tIHRoZSBzbmFwc2hvdCBwb2ludC4KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3BhY2tfY29va2llKHBvc2l0aW9uLCBkZWNfZmxhZ3MpCgogICAgICAgICMgU3RhcnRpbmcgZnJvbSB0aGUgc25hcHNob3QgcG9zaXRpb24sIHdlIHdpbGwgd2FsayB0aGUgZGVjb2RlcgogICAgICAgICMgZm9yd2FyZCB1bnRpbCBpdCBnaXZlcyB1cyBlbm91Z2ggZGVjb2RlZCBjaGFyYWN0ZXJzLgogICAgICAgIHNhdmVkX3N0YXRlID0gZGVjb2Rlci5nZXRzdGF0ZSgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICAjIE5vdGUgb3VyIGluaXRpYWwgc3RhcnQgcG9pbnQuCiAgICAgICAgICAgICNkZWNvZGVyLnNldHN0YXRlKChiJycsIGRlY19mbGFncykpICAjZml4bWUKICAgICAgICAgICAgZGVjb2Rlci5zZXRzdGF0ZSgoJycsIGRlY19mbGFncykpCiAgICAgICAgICAgIHN0YXJ0X3BvcyA9IHBvc2l0aW9uCiAgICAgICAgICAgIHN0YXJ0X2ZsYWdzLCBieXRlc19mZWQsIGNoYXJzX2RlY29kZWQgPSBkZWNfZmxhZ3MsIDAsIDAKICAgICAgICAgICAgbmVlZF9lb2YgPSAwCgogICAgICAgICAgICAjIEZlZWQgdGhlIGRlY29kZXIgb25lIGJ5dGUgYXQgYSB0aW1lLiAgQXMgd2UgZ28sIG5vdGUgdGhlCiAgICAgICAgICAgICMgbmVhcmVzdCAic2FmZSBzdGFydCBwb2ludCIgYmVmb3JlIHRoZSBjdXJyZW50IGxvY2F0aW9uCiAgICAgICAgICAgICMgKGEgcG9pbnQgd2hlcmUgdGhlIGRlY29kZXIgaGFzIG5vdGhpbmcgYnVmZmVyZWQsIHNvIHNlZWsoKQogICAgICAgICAgICAjIGNhbiBzYWZlbHkgc3RhcnQgZnJvbSB0aGVyZSBhbmQgYWR2YW5jZSB0byB0aGlzIGxvY2F0aW9uKS4KICAgICAgICAgICAgbmV4dF9ieXRlID0gYnl0ZWFycmF5KDEpCiAgICAgICAgICAgICNmb3IgbmV4dF9ieXRlWzBdIGluIG5leHRfaW5wdXQ6ICAgI2ZpeG1lCiAgICAgICAgICAgIGZvciBfaSBpbiBuZXh0X2lucHV0OgogICAgICAgICAgICAgICAgbmV4dF9ieXRlWzBdPV9pCiAgICAgICAgICAgICAgICBieXRlc19mZWQgKz0gMQogICAgICAgICAgICAgICAgY2hhcnNfZGVjb2RlZCArPSBsZW4oZGVjb2Rlci5kZWNvZGUobmV4dF9ieXRlKSkKICAgICAgICAgICAgICAgIGRlY19idWZmZXIsIGRlY19mbGFncyA9IGRlY29kZXIuZ2V0c3RhdGUoKQogICAgICAgICAgICAgICAgaWYgbm90IGRlY19idWZmZXIgYW5kIGNoYXJzX2RlY29kZWQgPD0gY2hhcnNfdG9fc2tpcDoKICAgICAgICAgICAgICAgICAgICAjIERlY29kZXIgYnVmZmVyIGlzIGVtcHR5LCBzbyB0aGlzIGlzIGEgc2FmZSBzdGFydCBwb2ludC4KICAgICAgICAgICAgICAgICAgICBzdGFydF9wb3MgKz0gYnl0ZXNfZmVkCiAgICAgICAgICAgICAgICAgICAgY2hhcnNfdG9fc2tpcCAtPSBjaGFyc19kZWNvZGVkCiAgICAgICAgICAgICAgICAgICAgc3RhcnRfZmxhZ3MsIGJ5dGVzX2ZlZCwgY2hhcnNfZGVjb2RlZCA9IGRlY19mbGFncywgMCwgMAogICAgICAgICAgICAgICAgaWYgY2hhcnNfZGVjb2RlZCA+PSBjaGFyc190b19za2lwOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFdlIGRpZG4ndCBnZXQgZW5vdWdoIGRlY29kZWQgZGF0YTsgc2lnbmFsIEVPRiB0byBnZXQgbW9yZS4KICAgICAgICAgICAgICAgICNjaGFyc19kZWNvZGVkICs9IGxlbihkZWNvZGVyLmRlY29kZShiJycsIGZpbmFsPVRydWUpKQogICAgICAgICAgICAgICAgY2hhcnNfZGVjb2RlZCArPSBsZW4oZGVjb2Rlci5kZWNvZGUoJycsIGZpbmFsPVRydWUpKSAgI2ZpeG1lCiAgICAgICAgICAgICAgICBuZWVkX2VvZiA9IDEKICAgICAgICAgICAgICAgIGlmIGNoYXJzX2RlY29kZWQgPCBjaGFyc190b19za2lwOgogICAgICAgICAgICAgICAgICAgIHJhaXNlIElPRXJyb3IoImNhbid0IHJlY29uc3RydWN0IGxvZ2ljYWwgZmlsZSBwb3NpdGlvbiIpCgogICAgICAgICAgICAjIFRoZSByZXR1cm5lZCBjb29raWUgY29ycmVzcG9uZHMgdG8gdGhlIGxhc3Qgc2FmZSBzdGFydCBwb2ludC4KICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3BhY2tfY29va2llKAogICAgICAgICAgICAgICAgc3RhcnRfcG9zLCBzdGFydF9mbGFncywgYnl0ZXNfZmVkLCBuZWVkX2VvZiwgY2hhcnNfdG9fc2tpcCkKICAgICAgICAjZXhjZXB0OiAgI2ZpeG1lCiAgICAgICAgIyAgICBhPTEgICMgcGFzcyAjZml4bWUKICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICBkZWNvZGVyLnNldHN0YXRlKHNhdmVkX3N0YXRlKQogICAgIiIiCiAgICBkZWYgdHJ1bmNhdGUoc2VsZiwgcG9zPU5vbmUpOgogICAgICAgIHNlbGYuZmx1c2goKQogICAgICAgIGlmIHBvcyBpcyBOb25lOgogICAgICAgICAgICBwb3MgPSBzZWxmLnRlbGwoKQogICAgICAgIHJldHVybiBzZWxmLmJ1ZmZlci50cnVuY2F0ZShwb3MpCgogICAgZGVmIGRldGFjaChzZWxmKToKICAgICAgICBpZiBzZWxmLmJ1ZmZlciBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJidWZmZXIgaXMgYWxyZWFkeSBkZXRhY2hlZCIpCiAgICAgICAgc2VsZi5mbHVzaCgpCiAgICAgICAgYnVmZmVyID0gc2VsZi5fYnVmZmVyCiAgICAgICAgc2VsZi5fYnVmZmVyID0gTm9uZQogICAgICAgIHJldHVybiBidWZmZXIKCiAgICBkZWYgc2VlayhzZWxmLCBjb29raWUsIHdoZW5jZT0wKToKICAgICAgICBpZiBzZWxmLmNsb3NlZDoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigidGVsbCBvbiBjbG9zZWQgZmlsZSIpCiAgICAgICAgaWYgbm90IHNlbGYuX3NlZWthYmxlOgogICAgICAgICAgICByYWlzZSBVbnN1cHBvcnRlZE9wZXJhdGlvbigidW5kZXJseWluZyBzdHJlYW0gaXMgbm90IHNlZWthYmxlIikKICAgICAgICBpZiB3aGVuY2UgPT0gMTogIyBzZWVrIHJlbGF0aXZlIHRvIGN1cnJlbnQgcG9zaXRpb24KICAgICAgICAgICAgaWYgY29va2llICE9IDA6CiAgICAgICAgICAgICAgICByYWlzZSBVbnN1cHBvcnRlZE9wZXJhdGlvbigiY2FuJ3QgZG8gbm9uemVybyBjdXItcmVsYXRpdmUgc2Vla3MiKQogICAgICAgICAgICAjIFNlZWtpbmcgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24gc2hvdWxkIGF0dGVtcHQgdG8KICAgICAgICAgICAgIyBzeW5jIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlciB3aXRoIHRoZSBjdXJyZW50IHBvc2l0aW9uLgogICAgICAgICAgICB3aGVuY2UgPSAwCiAgICAgICAgICAgIGNvb2tpZSA9IHNlbGYudGVsbCgpCiAgICAgICAgaWYgd2hlbmNlID09IDI6ICMgc2VlayByZWxhdGl2ZSB0byBlbmQgb2YgZmlsZQogICAgICAgICAgICBpZiBjb29raWUgIT0gMDoKICAgICAgICAgICAgICAgIHJhaXNlIFVuc3VwcG9ydGVkT3BlcmF0aW9uKCJjYW4ndCBkbyBub256ZXJvIGVuZC1yZWxhdGl2ZSBzZWVrcyIpCiAgICAgICAgICAgIHNlbGYuZmx1c2goKQogICAgICAgICAgICBwb3NpdGlvbiA9IHNlbGYuYnVmZmVyLnNlZWsoMCwgMikKICAgICAgICAgICAgc2VsZi5fc2V0X2RlY29kZWRfY2hhcnMoJycpCiAgICAgICAgICAgIHNlbGYuX3NuYXBzaG90ID0gTm9uZQogICAgICAgICAgICBpZiBzZWxmLl9kZWNvZGVyOgogICAgICAgICAgICAgICAgc2VsZi5fZGVjb2Rlci5yZXNldCgpCiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbgogICAgICAgIGlmIHdoZW5jZSAhPSAwOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJpbnZhbGlkIHdoZW5jZSAoJXIsIHNob3VsZCBiZSAwLCAxIG9yIDIpIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHdoZW5jZSwpKQogICAgICAgIGlmIGNvb2tpZSA8IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIm5lZ2F0aXZlIHNlZWsgcG9zaXRpb24gJXIiICUgKGNvb2tpZSwpKQogICAgICAgIHNlbGYuZmx1c2goKQoKICAgICAgICAjIFRoZSBzdHJhdGVneSBvZiBzZWVrKCkgaXMgdG8gZ28gYmFjayB0byB0aGUgc2FmZSBzdGFydCBwb2ludAogICAgICAgICMgYW5kIHJlcGxheSB0aGUgZWZmZWN0IG9mIHJlYWQoY2hhcnNfdG9fc2tpcCkgZnJvbSB0aGVyZS4KICAgICAgICBzdGFydF9wb3MsIGRlY19mbGFncywgYnl0ZXNfdG9fZmVlZCwgbmVlZF9lb2YsIGNoYXJzX3RvX3NraXAgPSBcCiAgICAgICAgICAgIHNlbGYuX3VucGFja19jb29raWUoY29va2llKQoKICAgICAgICAjIFNlZWsgYmFjayB0byB0aGUgc2FmZSBzdGFydCBwb2ludC4KICAgICAgICBzZWxmLmJ1ZmZlci5zZWVrKHN0YXJ0X3BvcykKICAgICAgICBzZWxmLl9zZXRfZGVjb2RlZF9jaGFycygnJykKICAgICAgICBzZWxmLl9zbmFwc2hvdCA9IE5vbmUKCiAgICAgICAgIyBSZXN0b3JlIHRoZSBkZWNvZGVyIHRvIGl0cyBzdGF0ZSBmcm9tIHRoZSBzYWZlIHN0YXJ0IHBvaW50LgogICAgICAgIGlmIGNvb2tpZSA9PSAwIGFuZCBzZWxmLl9kZWNvZGVyOgogICAgICAgICAgICBzZWxmLl9kZWNvZGVyLnJlc2V0KCkKICAgICAgICBlbGlmIHNlbGYuX2RlY29kZXIgb3IgZGVjX2ZsYWdzIG9yIGNoYXJzX3RvX3NraXA6CiAgICAgICAgICAgIHNlbGYuX2RlY29kZXIgPSBzZWxmLl9kZWNvZGVyIG9yIHNlbGYuX2dldF9kZWNvZGVyKCkKICAgICAgICAgICAgI3NlbGYuX2RlY29kZXIuc2V0c3RhdGUoKGInJywgZGVjX2ZsYWdzKSkgI2ZpeG1lCiAgICAgICAgICAgIHNlbGYuX2RlY29kZXIuc2V0c3RhdGUoKCcnLCBkZWNfZmxhZ3MpKQogICAgICAgICAgICAjc2VsZi5fc25hcHNob3QgPSAoZGVjX2ZsYWdzLCBiJycpICAgI2ZpeG1lCiAgICAgICAgICAgIHNlbGYuX3NuYXBzaG90ID0gKGRlY19mbGFncywgJycpICAgCgogICAgICAgIGlmIGNoYXJzX3RvX3NraXA6CiAgICAgICAgICAgICMgSnVzdCBsaWtlIF9yZWFkX2NodW5rLCBmZWVkIHRoZSBkZWNvZGVyIGFuZCBzYXZlIGEgc25hcHNob3QuCiAgICAgICAgICAgIGlucHV0X2NodW5rID0gc2VsZi5idWZmZXIucmVhZChieXRlc190b19mZWVkKQogICAgICAgICAgICBzZWxmLl9zZXRfZGVjb2RlZF9jaGFycygKICAgICAgICAgICAgICAgIHNlbGYuX2RlY29kZXIuZGVjb2RlKGlucHV0X2NodW5rLCBuZWVkX2VvZikpCiAgICAgICAgICAgIHNlbGYuX3NuYXBzaG90ID0gKGRlY19mbGFncywgaW5wdXRfY2h1bmspCgogICAgICAgICAgICAjIFNraXAgY2hhcnNfdG9fc2tpcCBvZiB0aGUgZGVjb2RlZCBjaGFyYWN0ZXJzLgogICAgICAgICAgICBpZiBsZW4oc2VsZi5fZGVjb2RlZF9jaGFycykgPCBjaGFyc190b19za2lwOgogICAgICAgICAgICAgICAgcmFpc2UgSU9FcnJvcigiY2FuJ3QgcmVzdG9yZSBsb2dpY2FsIGZpbGUgcG9zaXRpb24iKQogICAgICAgICAgICBzZWxmLl9kZWNvZGVkX2NoYXJzX3VzZWQgPSBjaGFyc190b19za2lwCgogICAgICAgICMgRmluYWxseSwgcmVzZXQgdGhlIGVuY29kZXIgKG1lcmVseSB1c2VmdWwgZm9yIHByb3BlciBCT00gaGFuZGxpbmcpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBlbmNvZGVyID0gc2VsZi5fZW5jb2RlciBvciBzZWxmLl9nZXRfZW5jb2RlcigpCiAgICAgICAgZXhjZXB0IExvb2t1cEVycm9yOgogICAgICAgICAgICAjIFNvbWV0aW1lcyB0aGUgZW5jb2RlciBkb2Vzbid0IGV4aXN0CiAgICAgICAgICAgIGE9MSAgICNmaXhtZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGlmIGNvb2tpZSAhPSAwOgogICAgICAgICAgICAgICAgZW5jb2Rlci5zZXRzdGF0ZSgwKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZW5jb2Rlci5yZXNldCgpCiAgICAgICAgcmV0dXJuIGNvb2tpZQoKICAgIGRlZiByZWFkKHNlbGYsIG49Tm9uZSk6CiAgICAgICAgc2VsZi5fY2hlY2tSZWFkYWJsZSgpCiAgICAgICAgaWYgbiBpcyBOb25lOgogICAgICAgICAgICBuID0gLTEKICAgICAgICBkZWNvZGVyID0gc2VsZi5fZGVjb2RlciBvciBzZWxmLl9nZXRfZGVjb2RlcigpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBuLl9faW5kZXhfXwogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvciBhcyBlcnI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiYW4gaW50ZWdlciBpcyByZXF1aXJlZCIpICNmcm9tIGVyciAgI2ZpeG1lCiAgICAgICAgaWYgbiA8IDA6CiAgICAgICAgICAgICMgUmVhZCBldmVyeXRoaW5nLgogICAgICAgICAgICByZXN1bHQgPSAoc2VsZi5fZ2V0X2RlY29kZWRfY2hhcnMoKSArCiAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVyLmRlY29kZShzZWxmLmJ1ZmZlci5yZWFkKCksIGZpbmFsPVRydWUpKQogICAgICAgICAgICBzZWxmLl9zZXRfZGVjb2RlZF9jaGFycygnJykKICAgICAgICAgICAgc2VsZi5fc25hcHNob3QgPSBOb25lCiAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIEtlZXAgcmVhZGluZyBjaHVua3MgdW50aWwgd2UgaGF2ZSBuIGNoYXJhY3RlcnMgdG8gcmV0dXJuLgogICAgICAgICAgICBlb2YgPSBGYWxzZQogICAgICAgICAgICByZXN1bHQgPSBzZWxmLl9nZXRfZGVjb2RlZF9jaGFycyhuKQogICAgICAgICAgICB3aGlsZSBsZW4ocmVzdWx0KSA8IG4gYW5kIG5vdCBlb2Y6CiAgICAgICAgICAgICAgICBlb2YgPSBub3Qgc2VsZi5fcmVhZF9jaHVuaygpCiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2VsZi5fZ2V0X2RlY29kZWRfY2hhcnMobiAtIGxlbihyZXN1bHQpKQogICAgICAgICAgICByZXR1cm4gcmVzdWx0CgogICAgZGVmIF9fbmV4dF9fKHNlbGYpOgogICAgICAgIHNlbGYuX3RlbGxpbmcgPSBGYWxzZQogICAgICAgIGxpbmUgPSBzZWxmLnJlYWRsaW5lKCkKICAgICAgICBpZiBub3QgbGluZToKICAgICAgICAgICAgc2VsZi5fc25hcHNob3QgPSBOb25lCiAgICAgICAgICAgIHNlbGYuX3RlbGxpbmcgPSBzZWxmLl9zZWVrYWJsZQogICAgICAgICAgICByYWlzZSBTdG9wSXRlcmF0aW9uCiAgICAgICAgcmV0dXJuIGxpbmUKCiAgICBkZWYgcmVhZGxpbmUoc2VsZiwgbGltaXQ9Tm9uZSk6CiAgICAgICAgaWYgc2VsZi5jbG9zZWQ6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoInJlYWQgZnJvbSBjbG9zZWQgZmlsZSIpCiAgICAgICAgaWYgbGltaXQgaXMgTm9uZToKICAgICAgICAgICAgbGltaXQgPSAtMQogICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2UobGltaXQsIGludCk6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigibGltaXQgbXVzdCBiZSBhbiBpbnRlZ2VyIikKCiAgICAgICAgIyBHcmFiIGFsbCB0aGUgZGVjb2RlZCB0ZXh0ICh3ZSB3aWxsIHJld2luZCBhbnkgZXh0cmEgYml0cyBsYXRlcikuCiAgICAgICAgbGluZSA9IHNlbGYuX2dldF9kZWNvZGVkX2NoYXJzKCkKCiAgICAgICAgc3RhcnQgPSAwCiAgICAgICAgIyBNYWtlIHRoZSBkZWNvZGVyIGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBleGlzdC4KICAgICAgICBpZiBub3Qgc2VsZi5fZGVjb2RlcjoKICAgICAgICAgICAgc2VsZi5fZ2V0X2RlY29kZXIoKQoKICAgICAgICBwb3MgPSBlbmRwb3MgPSBOb25lCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgaWYgc2VsZi5fcmVhZHRyYW5zbGF0ZToKICAgICAgICAgICAgICAgICMgTmV3bGluZXMgYXJlIGFscmVhZHkgdHJhbnNsYXRlZCwgb25seSBzZWFyY2ggZm9yIFxuCiAgICAgICAgICAgICAgICBwb3MgPSBsaW5lLmZpbmQoJ1xuJywgc3RhcnQpCiAgICAgICAgICAgICAgICBpZiBwb3MgPj0gMDoKICAgICAgICAgICAgICAgICAgICBlbmRwb3MgPSBwb3MgKyAxCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBsZW4obGluZSkKCiAgICAgICAgICAgIGVsaWYgc2VsZi5fcmVhZHVuaXZlcnNhbDoKICAgICAgICAgICAgICAgICMgVW5pdmVyc2FsIG5ld2xpbmUgc2VhcmNoLiBGaW5kIGFueSBvZiBcciwgXHJcbiwgXG4KICAgICAgICAgICAgICAgICMgVGhlIGRlY29kZXIgZW5zdXJlcyB0aGF0IFxyXG4gYXJlIG5vdCBzcGxpdCBpbiB0d28gcGllY2VzCgogICAgICAgICAgICAgICAgIyBJbiBDIHdlJ2QgbG9vayBmb3IgdGhlc2UgaW4gcGFyYWxsZWwgb2YgY291cnNlLgogICAgICAgICAgICAgICAgbmxwb3MgPSBsaW5lLmZpbmQoIlxuIiwgc3RhcnQpCiAgICAgICAgICAgICAgICBjcnBvcyA9IGxpbmUuZmluZCgiXHIiLCBzdGFydCkKICAgICAgICAgICAgICAgIGlmIGNycG9zID09IC0xOgogICAgICAgICAgICAgICAgICAgIGlmIG5scG9zID09IC0xOgogICAgICAgICAgICAgICAgICAgICAgICAjIE5vdGhpbmcgZm91bmQKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBsZW4obGluZSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAjIEZvdW5kIFxuCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvcyA9IG5scG9zICsgMQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiBubHBvcyA9PSAtMToKICAgICAgICAgICAgICAgICAgICAjIEZvdW5kIGxvbmUgXHIKICAgICAgICAgICAgICAgICAgICBlbmRwb3MgPSBjcnBvcyArIDEKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiBubHBvcyA8IGNycG9zOgogICAgICAgICAgICAgICAgICAgICMgRm91bmQgXG4KICAgICAgICAgICAgICAgICAgICBlbmRwb3MgPSBubHBvcyArIDEKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiBubHBvcyA9PSBjcnBvcyArIDE6CiAgICAgICAgICAgICAgICAgICAgIyBGb3VuZCBcclxuCiAgICAgICAgICAgICAgICAgICAgZW5kcG9zID0gY3Jwb3MgKyAyCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBGb3VuZCBccgogICAgICAgICAgICAgICAgICAgIGVuZHBvcyA9IGNycG9zICsgMQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIG5vbi11bml2ZXJzYWwKICAgICAgICAgICAgICAgIHBvcyA9IGxpbmUuZmluZChzZWxmLl9yZWFkbmwpCiAgICAgICAgICAgICAgICBpZiBwb3MgPj0gMDoKICAgICAgICAgICAgICAgICAgICBlbmRwb3MgPSBwb3MgKyBsZW4oc2VsZi5fcmVhZG5sKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCgogICAgICAgICAgICBpZiBsaW1pdCA+PSAwIGFuZCBsZW4obGluZSkgPj0gbGltaXQ6CiAgICAgICAgICAgICAgICBlbmRwb3MgPSBsaW1pdCAgIyByZWFjaGVkIGxlbmd0aCBsaW1pdAogICAgICAgICAgICAgICAgYnJlYWsKCiAgICAgICAgICAgICMgTm8gbGluZSBlbmRpbmcgc2VlbiB5ZXQgLSBnZXQgbW9yZSBkYXRhJwogICAgICAgICAgICB3aGlsZSBzZWxmLl9yZWFkX2NodW5rKCk6CiAgICAgICAgICAgICAgICBpZiBzZWxmLl9kZWNvZGVkX2NoYXJzOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGlmIHNlbGYuX2RlY29kZWRfY2hhcnM6CiAgICAgICAgICAgICAgICBsaW5lICs9IHNlbGYuX2dldF9kZWNvZGVkX2NoYXJzKCkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgZW5kIG9mIGZpbGUKICAgICAgICAgICAgICAgIHNlbGYuX3NldF9kZWNvZGVkX2NoYXJzKCcnKQogICAgICAgICAgICAgICAgc2VsZi5fc25hcHNob3QgPSBOb25lCiAgICAgICAgICAgICAgICByZXR1cm4gbGluZQoKICAgICAgICBpZiBsaW1pdCA+PSAwIGFuZCBlbmRwb3MgPiBsaW1pdDoKICAgICAgICAgICAgZW5kcG9zID0gbGltaXQgICMgZG9uJ3QgZXhjZWVkIGxpbWl0CgogICAgICAgICMgUmV3aW5kIF9kZWNvZGVkX2NoYXJzIHRvIGp1c3QgYWZ0ZXIgdGhlIGxpbmUgZW5kaW5nIHdlIGZvdW5kLgogICAgICAgIHNlbGYuX3Jld2luZF9kZWNvZGVkX2NoYXJzKGxlbihsaW5lKSAtIGVuZHBvcykKICAgICAgICByZXR1cm4gbGluZVs6ZW5kcG9zXQoKICAgICNAcHJvcGVydHkKICAgIGRlZiBuZXdsaW5lcyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fZGVjb2Rlci5uZXdsaW5lcyBpZiBzZWxmLl9kZWNvZGVyIGVsc2UgTm9uZQoKCmNsYXNzIFN0cmluZ0lPKFRleHRJT1dyYXBwZXIpOgogICAgIyJUZXh0IEkvTyBpbXBsZW1lbnRhdGlvbiB1c2luZyBhbiBpbi1tZW1vcnkgYnVmZmVyLgoKICAgICNUaGUgaW5pdGlhbF92YWx1ZSBhcmd1bWVudCBzZXRzIHRoZSB2YWx1ZSBvZiBvYmplY3QuICBUaGUgbmV3bGluZQogICAgI2FyZ3VtZW50IGlzIGxpa2UgdGhlIG9uZSBvZiBUZXh0SU9XcmFwcGVyJ3MgY29uc3RydWN0b3IuCiAgICAjIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpbml0aWFsX3ZhbHVlPSIiLCBuZXdsaW5lPSJcbiIpOgogICAgICAgICNzdXBlcihTdHJpbmdJTywgc2VsZikuX19pbml0X18oQnl0ZXNJTygpLCAgICAjZml4bWUKICAgICAgICBUZXh0SU9XcmFwcGVyLl9faW5pdF9fKHNlbGYsIEJ5dGVzSU8oKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2Rpbmc9InV0Zi04IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzPSJzdHJpY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdsaW5lPW5ld2xpbmUpCiAgICAgICAgIyBJc3N1ZSAjNTY0NTogbWFrZSB1bml2ZXJzYWwgbmV3bGluZXMgc2VtYW50aWNzIHRoZSBzYW1lIGFzIGluIHRoZQogICAgICAgICMgQyB2ZXJzaW9uLCBldmVuIHVuZGVyIFdpbmRvd3MuCiAgICAgICAgaWYgbmV3bGluZSBpcyBOb25lOgogICAgICAgICAgICBzZWxmLl93cml0ZXRyYW5zbGF0ZSA9IEZhbHNlCiAgICAgICAgaWYgaW5pdGlhbF92YWx1ZSBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgbm90IGlzaW5zdGFuY2UoaW5pdGlhbF92YWx1ZSwgc3RyKToKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiaW5pdGlhbF92YWx1ZSBtdXN0IGJlIHN0ciBvciBOb25lLCBub3QgezB9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JtYXQodHlwZShpbml0aWFsX3ZhbHVlKS5fX25hbWVfXykpCiAgICAgICAgICAgICAgICBpbml0aWFsX3ZhbHVlID0gc3RyKGluaXRpYWxfdmFsdWUpCiAgICAgICAgICAgIHNlbGYud3JpdGUoaW5pdGlhbF92YWx1ZSkKICAgICAgICAgICAgc2VsZi5zZWVrKDApCgogICAgZGVmIGdldHZhbHVlKHNlbGYpOgogICAgICAgIHNlbGYuZmx1c2goKQogICAgICAgIHJldHVybiBzZWxmLmJ1ZmZlci5nZXR2YWx1ZSgpLmRlY29kZShzZWxmLl9lbmNvZGluZywgc2VsZi5fZXJyb3JzKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICAjIFRleHRJT1dyYXBwZXIgdGVsbHMgdGhlIGVuY29kaW5nIGluIGl0cyByZXByLiBJbiBTdHJpbmdJTywKICAgICAgICAjIHRoYXQncyBhIGltcGxlbWVudGF0aW9uIGRldGFpbC4KICAgICAgICByZXR1cm4gb2JqZWN0Ll9fcmVwcl9fKHNlbGYpCgogICAgI0Bwcm9wZXJ0eQogICAgZGVmIGVycm9ycyhzZWxmKToKICAgICAgICByZXR1cm4gTm9uZQoKICAgICNAcHJvcGVydHkKICAgIGRlZiBlbmNvZGluZyhzZWxmKToKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBkZXRhY2goc2VsZik6CiAgICAgICAgIyBUaGlzIGRvZXNuJ3QgbWFrZSBzZW5zZSBvbiBTdHJpbmdJTy4KICAgICAgICBzZWxmLl91bnN1cHBvcnRlZCgiZGV0YWNoIikK',
'/Lib/_random.py':'aW1wb3J0IF9vcwpjbGFzcyBSYW5kb206CiAgICAiIiJSYW5kb20gbnVtYmVyIGdlbmVyYXRvciBiYXNlIGNsYXNzIHVzZWQgYnkgYm91bmQgbW9kdWxlIGZ1bmN0aW9ucy4KCiAgICBVc2VkIHRvIGluc3RhbnRpYXRlIGluc3RhbmNlcyBvZiBSYW5kb20gdG8gZ2V0IGdlbmVyYXRvcnMgdGhhdCBkb24ndAogICAgc2hhcmUgc3RhdGUuCgogICAgQ2xhc3MgUmFuZG9tIGNhbiBhbHNvIGJlIHN1YmNsYXNzZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgZGlmZmVyZW50IGJhc2ljCiAgICBnZW5lcmF0b3Igb2YgeW91ciBvd24gZGV2aXNpbmc6IGluIHRoYXQgY2FzZSwgb3ZlcnJpZGUgdGhlIGZvbGxvd2luZwogICAgbWV0aG9kczogIHJhbmRvbSgpLCBzZWVkKCksIGdldHN0YXRlKCksIGFuZCBzZXRzdGF0ZSgpLgogICAgT3B0aW9uYWxseSwgaW1wbGVtZW50IGEgZ2V0cmFuZGJpdHMoKSBtZXRob2Qgc28gdGhhdCByYW5kcmFuZ2UoKQogICAgY2FuIGNvdmVyIGFyYml0cmFyaWx5IGxhcmdlIHJhbmdlcy4KCiAgICAiIiIKICAgICNyYW5kb20KICAgICNzZWVkCiAgICAjZ2V0c3RhdGUKICAgICNzZXRzdGF0ZQoKCiAgICBWRVJTSU9OID0gMyAgICAgIyB1c2VkIGJ5IGdldHN0YXRlL3NldHN0YXRlCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHg9Tm9uZSk6CiAgICAgICAgIiIiSW5pdGlhbGl6ZSBhbiBpbnN0YW5jZS4KCiAgICAgICAgT3B0aW9uYWwgYXJndW1lbnQgeCBjb250cm9scyBzZWVkaW5nLCBhcyBmb3IgUmFuZG9tLnNlZWQoKS4KICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9eAoKICAgIGRlZiBzZWVkKHNlbGYsIGE9Tm9uZSwgdmVyc2lvbj0yKToKICAgICAgICAiIiJJbml0aWFsaXplIGludGVybmFsIHN0YXRlIGZyb20gaGFzaGFibGUgb2JqZWN0LgoKICAgICAgICBOb25lIG9yIG5vIGFyZ3VtZW50IHNlZWRzIGZyb20gY3VycmVudCB0aW1lIG9yIGZyb20gYW4gb3BlcmF0aW5nCiAgICAgICAgc3lzdGVtIHNwZWNpZmljIHJhbmRvbW5lc3Mgc291cmNlIGlmIGF2YWlsYWJsZS4KCiAgICAgICAgRm9yIHZlcnNpb24gMiAodGhlIGRlZmF1bHQpLCBhbGwgb2YgdGhlIGJpdHMgYXJlIHVzZWQgaWYgKmEqIGlzIGEgc3RyLAogICAgICAgIGJ5dGVzLCBvciBieXRlYXJyYXkuICBGb3IgdmVyc2lvbiAxLCB0aGUgaGFzaCgpIG9mICphKiBpcyB1c2VkIGluc3RlYWQuCgogICAgICAgIElmICphKiBpcyBhbiBpbnQsIGFsbCBiaXRzIGFyZSB1c2VkLgoKICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9YQogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKCiAgICBkZWYgZ2V0c3RhdGUoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGludGVybmFsIHN0YXRlOyBjYW4gYmUgcGFzc2VkIHRvIHNldHN0YXRlKCkgbGF0ZXIuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3N0YXRlCgogICAgZGVmIHNldHN0YXRlKHNlbGYsIHN0YXRlKToKICAgICAgICAiIiJSZXN0b3JlIGludGVybmFsIHN0YXRlIGZyb20gb2JqZWN0IHJldHVybmVkIGJ5IGdldHN0YXRlKCkuIiIiCiAgICAgICAgc2VsZi5fc3RhdGU9c3RhdGUKCiAgICBkZWYgcmFuZG9tKHNlbGYpOgogICAgICAgICIiIkdldCB0aGUgbmV4dCByYW5kb20gbnVtYmVyIGluIHRoZSByYW5nZSBbMC4wLCAxLjApLiIiIgogICAgICAgIHJldHVybiBfb3MucmFuZG9tKCkKCiAgICBkZWYgZ2V0cmFuZGJpdHMoc2VsZiwgayk6CiAgICAgICAgIiIiZ2V0cmFuZGJpdHMoaykgLT4geC4gIEdlbmVyYXRlcyBhIGxvbmcgaW50IHdpdGggayByYW5kb20gYml0cy4iIiIKICAgICAgICBpZiBrIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ251bWJlciBvZiBiaXRzIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKQogICAgICAgIGlmIGsgIT0gaW50KGspOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ251bWJlciBvZiBiaXRzIHNob3VsZCBiZSBhbiBpbnRlZ2VyJykKICAgICAgICBudW1ieXRlcyA9IChrICsgNykgLy8gOCAgICAgICAgICAgICAgICAgICAgICAgIyBiaXRzIC8gOCBhbmQgcm91bmRlZCB1cAogICAgICAgIHggPSBpbnQuZnJvbV9ieXRlcyhfdXJhbmRvbShudW1ieXRlcyksICdiaWcnKQogICAgICAgIHJldHVybiB4ID4+IChudW1ieXRlcyAqIDggLSBrKSAgICAgICAgICAgICAgICAjIHRyaW0gZXhjZXNzIGJpdHMK',
'/Lib/_socket.py':'',
'/Lib/_struct.py':'',
'/Lib/_thread.py':'IiIiRHJvcC1pbiByZXBsYWNlbWVudCBmb3IgdGhlIHRocmVhZCBtb2R1bGUuCgpNZWFudCB0byBiZSB1c2VkIGFzIGEgYnJhaW4tZGVhZCBzdWJzdGl0dXRlIHNvIHRoYXQgdGhyZWFkZWQgY29kZSBkb2VzCm5vdCBuZWVkIHRvIGJlIHJld3JpdHRlbiBmb3Igd2hlbiB0aGUgdGhyZWFkIG1vZHVsZSBpcyBub3QgcHJlc2VudC4KClN1Z2dlc3RlZCB1c2FnZSBpczo6CgogICAgdHJ5OgogICAgICAgIGltcG9ydCBfdGhyZWFkCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IF9kdW1teV90aHJlYWQgYXMgX3RocmVhZAoKIiIiCiMgRXhwb3J0cyBvbmx5IHRoaW5ncyBzcGVjaWZpZWQgYnkgdGhyZWFkIGRvY3VtZW50YXRpb247CiMgc2tpcHBpbmcgb2Jzb2xldGUgc3lub255bXMgYWxsb2NhdGUoKSwgc3RhcnRfbmV3KCksIGV4aXRfdGhyZWFkKCkuCl9fYWxsX18gPSBbJ2Vycm9yJywgJ3N0YXJ0X25ld190aHJlYWQnLCAnZXhpdCcsICdnZXRfaWRlbnQnLCAnYWxsb2NhdGVfbG9jaycsCiAgICAgICAgICAgJ2ludGVycnVwdF9tYWluJywgJ0xvY2tUeXBlJ10KCiMgQSBkdW1teSB2YWx1ZQpUSU1FT1VUX01BWCA9IDIqKjMxCgojIE5PVEU6IHRoaXMgbW9kdWxlIGNhbiBiZSBpbXBvcnRlZCBlYXJseSBpbiB0aGUgZXh0ZW5zaW9uIGJ1aWxkaW5nIHByb2Nlc3MsCiMgYW5kIHNvIHRvcCBsZXZlbCBpbXBvcnRzIG9mIG90aGVyIG1vZHVsZXMgc2hvdWxkIGJlIGF2b2lkZWQuICBJbnN0ZWFkLCBhbGwKIyBpbXBvcnRzIGFyZSBkb25lIHdoZW4gbmVlZGVkIG9uIGEgZnVuY3Rpb24tYnktZnVuY3Rpb24gYmFzaXMuICBTaW5jZSB0aHJlYWRzCiMgYXJlIGRpc2FibGVkLCB0aGUgaW1wb3J0IGxvY2sgc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZSBhbnl3YXkgKD8/KS4KCmVycm9yID0gUnVudGltZUVycm9yCgpkZWYgc3RhcnRfbmV3X3RocmVhZChmdW5jdGlvbiwgYXJncywga3dhcmdzPXt9KToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuc3RhcnRfbmV3X3RocmVhZCgpLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWtpbmcgc3VyZSB0aGF0IGBgYXJnc2BgIGlzIGEKICAgIHR1cGxlIGFuZCBgYGt3YXJnc2BgIGlzIGEgZGljdGlvbmFyeS4gIElmIGFuIGV4Y2VwdGlvbiBpcyByYWlzZWQKICAgIGFuZCBpdCBpcyBTeXN0ZW1FeGl0ICh3aGljaCBjYW4gYmUgZG9uZSBieSBfdGhyZWFkLmV4aXQoKSkgaXQgaXMKICAgIGNhdWdodCBhbmQgbm90aGluZyBpcyBkb25lOyBhbGwgb3RoZXIgZXhjZXB0aW9ucyBhcmUgcHJpbnRlZCBvdXQKICAgIGJ5IHVzaW5nIHRyYWNlYmFjay5wcmludF9leGMoKS4KCiAgICBJZiB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24gY2FsbHMgaW50ZXJydXB0X21haW4gdGhlIEtleWJvYXJkSW50ZXJydXB0IHdpbGwgYmUKICAgIHJhaXNlZCB3aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zLgoKICAgICIiIgogICAgaWYgdHlwZShhcmdzKSAhPSB0eXBlKHR1cGxlKCkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiMm5kIGFyZyBtdXN0IGJlIGEgdHVwbGUiKQogICAgaWYgdHlwZShrd2FyZ3MpICE9IHR5cGUoZGljdCgpKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoIjNyZCBhcmcgbXVzdCBiZSBhIGRpY3QiKQogICAgZ2xvYmFsIF9tYWluCiAgICBfbWFpbiA9IEZhbHNlCiAgICB0cnk6CiAgICAgICAgZnVuY3Rpb24oKmFyZ3MsICoqa3dhcmdzKQogICAgZXhjZXB0IFN5c3RlbUV4aXQ6CiAgICAgICAgcGFzcwogICAgZXhjZXB0OgogICAgICAgIGltcG9ydCB0cmFjZWJhY2sKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgIF9tYWluID0gVHJ1ZQogICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgIGlmIF9pbnRlcnJ1cHQ6CiAgICAgICAgX2ludGVycnVwdCA9IEZhbHNlCiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKCmRlZiBleGl0KCk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLmV4aXQoKS4iIiIKICAgIHJhaXNlIFN5c3RlbUV4aXQKCmRlZiBnZXRfaWRlbnQoKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuZ2V0X2lkZW50KCkuCgogICAgU2luY2UgdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIF90aHJlYWRtb2R1bGUgaXMgbm90CiAgICBhdmFpbGFibGUsIGl0IGlzIHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhlIGN1cnJlbnQgcHJvY2VzcyBpcyB0aGUKICAgIG9ubHkgdGhyZWFkLiAgVGh1cyBhIGNvbnN0YW50IGNhbiBiZSBzYWZlbHkgcmV0dXJuZWQuCiAgICAiIiIKICAgIHJldHVybiAtMQoKZGVmIGFsbG9jYXRlX2xvY2soKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuYWxsb2NhdGVfbG9jaygpLiIiIgogICAgcmV0dXJuIExvY2tUeXBlKCkKCmRlZiBzdGFja19zaXplKHNpemU9Tm9uZSk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLnN0YWNrX3NpemUoKS4iIiIKICAgIGlmIHNpemUgaXMgbm90IE5vbmU6CiAgICAgICAgcmFpc2UgZXJyb3IoInNldHRpbmcgdGhyZWFkIHN0YWNrIHNpemUgbm90IHN1cHBvcnRlZCIpCiAgICByZXR1cm4gMAoKY2xhc3MgTG9ja1R5cGUob2JqZWN0KToKICAgICIiIkNsYXNzIGltcGxlbWVudGluZyBkdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLkxvY2tUeXBlLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWludGFpbmluZyBzZWxmLmxvY2tlZF9zdGF0dXMKICAgIHdoaWNoIGlzIGEgYm9vbGVhbiB0aGF0IHN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxvY2suICBQaWNrbGluZyBvZgogICAgdGhlIGxvY2ssIHRob3VnaCwgc2hvdWxkIG5vdCBiZSBkb25lIHNpbmNlIGlmIHRoZSBfdGhyZWFkIG1vZHVsZSBpcwogICAgdGhlbiB1c2VkIHdpdGggYW4gdW5waWNrbGVkIGBgbG9jaygpYGAgZnJvbSBoZXJlIHByb2JsZW1zIGNvdWxkCiAgICBvY2N1ciBmcm9tIHRoaXMgY2xhc3Mgbm90IGhhdmluZyBhdG9taWMgbWV0aG9kcy4KCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gRmFsc2UKCiAgICBkZWYgYWNxdWlyZShzZWxmLCB3YWl0ZmxhZz1Ob25lLCB0aW1lb3V0PS0xKToKICAgICAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBhY3F1aXJlKCkuCgogICAgICAgIEZvciBibG9ja2luZyBjYWxscywgc2VsZi5sb2NrZWRfc3RhdHVzIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvCiAgICAgICAgVHJ1ZSBhbmQgcmV0dXJuZWQgYXBwcm9wcmlhdGVseSBiYXNlZCBvbiB2YWx1ZSBvZgogICAgICAgIGBgd2FpdGZsYWdgYC4gIElmIGl0IGlzIG5vbi1ibG9ja2luZywgdGhlbiB0aGUgdmFsdWUgaXMKICAgICAgICBhY3R1YWxseSBjaGVja2VkIGFuZCBub3Qgc2V0IGlmIGl0IGlzIGFscmVhZHkgYWNxdWlyZWQuICBUaGlzCiAgICAgICAgaXMgYWxsIGRvbmUgc28gdGhhdCB0aHJlYWRpbmcuQ29uZGl0aW9uJ3MgYXNzZXJ0IHN0YXRlbWVudHMKICAgICAgICBhcmVuJ3QgdHJpZ2dlcmVkIGFuZCB0aHJvdyBhIGxpdHRsZSBmaXQuCgogICAgICAgICIiIgogICAgICAgIGlmIHdhaXRmbGFnIGlzIE5vbmUgb3Igd2FpdGZsYWc6CiAgICAgICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IFRydWUKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gVHJ1ZQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIHRpbWVvdXQgPiAwOgogICAgICAgICAgICAgICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCh0aW1lb3V0KQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgX19lbnRlcl9fID0gYWNxdWlyZQoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCB0eXAsIHZhbCwgdGIpOgogICAgICAgIHNlbGYucmVsZWFzZSgpCgogICAgZGVmIHJlbGVhc2Uoc2VsZik6CiAgICAgICAgIiIiUmVsZWFzZSB0aGUgZHVtbXkgbG9jay4iIiIKICAgICAgICAjIFhYWCBQZXJoYXBzIHNob3VsZG4ndCBhY3R1YWxseSBib3RoZXIgdG8gdGVzdD8gIENvdWxkIGxlYWQKICAgICAgICAjICAgICB0byBwcm9ibGVtcyBmb3IgY29tcGxleCwgdGhyZWFkZWQgY29kZS4KICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICByYWlzZSBlcnJvcgogICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgbG9ja2VkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmxvY2tlZF9zdGF0dXMKCiMgVXNlZCB0byBzaWduYWwgdGhhdCBpbnRlcnJ1cHRfbWFpbiB3YXMgY2FsbGVkIGluIGEgInRocmVhZCIKX2ludGVycnVwdCA9IEZhbHNlCiMgVHJ1ZSB3aGVuIG5vdCBleGVjdXRpbmcgaW4gYSAidGhyZWFkIgpfbWFpbiA9IFRydWUKCmRlZiBpbnRlcnJ1cHRfbWFpbigpOgogICAgIiIiU2V0IF9pbnRlcnJ1cHQgZmxhZyB0byBUcnVlIHRvIGhhdmUgc3RhcnRfbmV3X3RocmVhZCByYWlzZQogICAgS2V5Ym9hcmRJbnRlcnJ1cHQgdXBvbiBleGl0aW5nLiIiIgogICAgaWYgX21haW46CiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKICAgIGVsc2U6CiAgICAgICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgICAgICBfaW50ZXJydXB0ID0gVHJ1ZQo=',
'/Lib/_weakref.py':'Y2xhc3MgUHJveHlUeXBlOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLG9iaik6CiAgICAgICAgc2VsZi5vYmogPSBvYmoKCkNhbGxhYmxlUHJveHlUeXBlID0gUHJveHlUeXBlClByb3h5VHlwZXMgPSBbUHJveHlUeXBlLENhbGxhYmxlUHJveHlUeXBlXQoKY2xhc3MgUmVmZXJlbmNlVHlwZToKCiAgICBkZWYgX19pbml0X18oc2VsZixvYmosY2FsbGJhY2spOgogICAgICAgIHNlbGYub2JqID0gb2JqCiAgICAgICAgc2VsZi5jYWxsYmFjayA9IGNhbGxiYWNrCgpjbGFzcyByZWY6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsb2JqLGNhbGxiYWNrPU5vbmUpOgogICAgICAgIHNlbGYub2JqID0gUmVmZXJlbmNlVHlwZShvYmosY2FsbGJhY2spCiAgICAgICAgc2VsZi5jYWxsYmFjaz1jYWxsYmFjawoKZGVmIGdldHdlYWtyZWZjb3VudChvYmopOgogICAgcmV0dXJuIDEKCmRlZiBnZXR3ZWFrcmVmcyhvYmopOgogICAgcmV0dXJuIG9iagoKCmRlZiBwcm94eShvYmosY2FsbGJhY2spOgogICAgcmV0dXJuIFByb3h5VHlwZShvYmopCgo=',
'/Lib/_weakrefset.py':'IyBBY2Nlc3MgV2Vha1NldCB0aHJvdWdoIHRoZSB3ZWFrcmVmIG1vZHVsZS4KIyBUaGlzIGNvZGUgaXMgc2VwYXJhdGVkLW91dCBiZWNhdXNlIGl0IGlzIG5lZWRlZAojIGJ5IGFiYy5weSB0byBsb2FkIGV2ZXJ5dGhpbmcgZWxzZSBhdCBzdGFydHVwLgoKZnJvbSBfd2Vha3JlZiBpbXBvcnQgcmVmCgpfX2FsbF9fID0gWydXZWFrU2V0J10KCgpjbGFzcyBfSXRlcmF0aW9uR3VhcmQ6CiAgICAjIFRoaXMgY29udGV4dCBtYW5hZ2VyIHJlZ2lzdGVycyBpdHNlbGYgaW4gdGhlIGN1cnJlbnQgaXRlcmF0b3JzIG9mIHRoZQogICAgIyB3ZWFrIGNvbnRhaW5lciwgc3VjaCBhcyB0byBkZWxheSBhbGwgcmVtb3ZhbHMgdW50aWwgdGhlIGNvbnRleHQgbWFuYWdlcgogICAgIyBleGl0cy4KICAgICMgVGhpcyB0ZWNobmlxdWUgc2hvdWxkIGJlIHJlbGF0aXZlbHkgdGhyZWFkLXNhZmUgKHNpbmNlIHNldHMgYXJlKS4KCiAgICBkZWYgX19pbml0X18oc2VsZiwgd2Vha2NvbnRhaW5lcik6CiAgICAgICAgIyBEb24ndCBjcmVhdGUgY3ljbGVzCiAgICAgICAgcHJpbnQoJ2NyZWF0ZSBpdGVyYXRpb24gZ3VhcmQnLCB3ZWFrY29udGFpbmVyKQogICAgICAgIHNlbGYud2Vha2NvbnRhaW5lciA9IHJlZih3ZWFrY29udGFpbmVyKQoKICAgIGRlZiBfX2VudGVyX18oc2VsZik6CiAgICAgICAgcHJpbnQoJ2VudGVyIGl0ZXJhdGlvbiBndWFyZCcpCiAgICAgICAgdyA9IHNlbGYud2Vha2NvbnRhaW5lcigpCiAgICAgICAgaWYgdyBpcyBub3QgTm9uZToKICAgICAgICAgICAgdy5faXRlcmF0aW5nLmFkZChzZWxmKQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXhpdF9fKHNlbGYsIGUsIHQsIGIpOgogICAgICAgIHcgPSBzZWxmLndlYWtjb250YWluZXIoKQogICAgICAgIGlmIHcgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHMgPSB3Ll9pdGVyYXRpbmcKICAgICAgICAgICAgcy5yZW1vdmUoc2VsZikKICAgICAgICAgICAgaWYgbm90IHM6CiAgICAgICAgICAgICAgICB3Ll9jb21taXRfcmVtb3ZhbHMoKQoKCmNsYXNzIFdlYWtTZXQ6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGF0YT1Ob25lKToKICAgICAgICBzZWxmLmRhdGEgPSBzZXQoKQogICAgICAgIGRlZiBfcmVtb3ZlKGl0ZW0sIHNlbGZyZWY9cmVmKHNlbGYpKToKICAgICAgICAgICAgc2VsZiA9IHNlbGZyZWYoKQogICAgICAgICAgICBpZiBzZWxmIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgaWYgc2VsZi5faXRlcmF0aW5nOgogICAgICAgICAgICAgICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMuYXBwZW5kKGl0ZW0pCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YS5kaXNjYXJkKGl0ZW0pCiAgICAgICAgc2VsZi5fcmVtb3ZlID0gX3JlbW92ZQogICAgICAgICMgQSBsaXN0IG9mIGtleXMgdG8gYmUgcmVtb3ZlZAogICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMgPSBbXQogICAgICAgIHNlbGYuX2l0ZXJhdGluZyA9IHNldCgpCiAgICAgICAgaWYgZGF0YSBpcyBub3QgTm9uZToKICAgICAgICAgICAgc2VsZi51cGRhdGUoZGF0YSkKCiAgICBkZWYgX2NvbW1pdF9yZW1vdmFscyhzZWxmKToKICAgICAgICBsID0gc2VsZi5fcGVuZGluZ19yZW1vdmFscwogICAgICAgIGRpc2NhcmQgPSBzZWxmLmRhdGEuZGlzY2FyZAogICAgICAgIHdoaWxlIGw6CiAgICAgICAgICAgIGRpc2NhcmQobC5wb3AoKSkKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgd2l0aCBfSXRlcmF0aW9uR3VhcmQoc2VsZik6CiAgICAgICAgICAgIGZvciBpdGVtcmVmIGluIHNlbGYuZGF0YToKICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtcmVmKCkKICAgICAgICAgICAgICAgIGlmIGl0ZW0gaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgeWllbGQgaXRlbQoKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiBsZW4oc2VsZi5kYXRhKSAtIGxlbihzZWxmLl9wZW5kaW5nX3JlbW92YWxzKQoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwgaXRlbSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3ciA9IHJlZihpdGVtKQogICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHJldHVybiB3ciBpbiBzZWxmLmRhdGEKCiAgICBkZWYgX19yZWR1Y2VfXyhzZWxmKToKICAgICAgICByZXR1cm4gKHNlbGYuX19jbGFzc19fLCAobGlzdChzZWxmKSwpLAogICAgICAgICAgICAgICAgZ2V0YXR0cihzZWxmLCAnX19kaWN0X18nLCBOb25lKSkKCiAgICBkZWYgYWRkKHNlbGYsIGl0ZW0pOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgc2VsZi5kYXRhLmFkZChyZWYoaXRlbSwgc2VsZi5fcmVtb3ZlKSkKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBzZWxmLmRhdGEuY2xlYXIoKQoKICAgIGRlZiBjb3B5KHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmKQoKICAgIGRlZiBwb3Aoc2VsZik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpdGVtcmVmID0gc2VsZi5kYXRhLnBvcCgpCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHJhaXNlIEtleUVycm9yKCdwb3AgZnJvbSBlbXB0eSBXZWFrU2V0JykKICAgICAgICAgICAgaXRlbSA9IGl0ZW1yZWYoKQogICAgICAgICAgICBpZiBpdGVtIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0KCiAgICBkZWYgcmVtb3ZlKHNlbGYsIGl0ZW0pOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgc2VsZi5kYXRhLnJlbW92ZShyZWYoaXRlbSkpCgogICAgZGVmIGRpc2NhcmQoc2VsZiwgaXRlbSk6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBzZWxmLmRhdGEuZGlzY2FyZChyZWYoaXRlbSkpCgogICAgZGVmIHVwZGF0ZShzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoKICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkKICAgICAgICBmb3IgZWxlbWVudCBpbiBvdGhlcjoKICAgICAgICAgICAgc2VsZi5hZGQoZWxlbWVudCkKCiAgICBkZWYgX19pb3JfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgc2VsZi51cGRhdGUob3RoZXIpCiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgZGlmZmVyZW5jZShzZWxmLCBvdGhlcik6CiAgICAgICAgbmV3c2V0ID0gc2VsZi5jb3B5KCkKICAgICAgICBuZXdzZXQuZGlmZmVyZW5jZV91cGRhdGUob3RoZXIpCiAgICAgICAgcmV0dXJuIG5ld3NldAogICAgX19zdWJfXyA9IGRpZmZlcmVuY2UKCiAgICBkZWYgZGlmZmVyZW5jZV91cGRhdGUoc2VsZiwgb3RoZXIpOgogICAgICAgIHNlbGYuX19pc3ViX18ob3RoZXIpCiAgICBkZWYgX19pc3ViX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHM6CiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpCiAgICAgICAgaWYgc2VsZiBpcyBvdGhlcjoKICAgICAgICAgICAgc2VsZi5kYXRhLmNsZWFyKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmRhdGEuZGlmZmVyZW5jZV91cGRhdGUocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIGludGVyc2VjdGlvbihzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKGl0ZW0gZm9yIGl0ZW0gaW4gb3RoZXIgaWYgaXRlbSBpbiBzZWxmKQogICAgX19hbmRfXyA9IGludGVyc2VjdGlvbgoKICAgIGRlZiBpbnRlcnNlY3Rpb25fdXBkYXRlKHNlbGYsIG90aGVyKToKICAgICAgICBzZWxmLl9faWFuZF9fKG90aGVyKQogICAgZGVmIF9faWFuZF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOgogICAgICAgICAgICBzZWxmLl9jb21taXRfcmVtb3ZhbHMoKQogICAgICAgIHNlbGYuZGF0YS5pbnRlcnNlY3Rpb25fdXBkYXRlKHJlZihpdGVtKSBmb3IgaXRlbSBpbiBvdGhlcikKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBpc3N1YnNldChzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5pc3N1YnNldChyZWYoaXRlbSkgZm9yIGl0ZW0gaW4gb3RoZXIpCiAgICBfX2xlX18gPSBpc3N1YnNldAoKICAgIGRlZiBfX2x0X18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPCBzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQoKICAgIGRlZiBpc3N1cGVyc2V0KHNlbGYsIG90aGVyKToKICAgICAgICByZXR1cm4gc2VsZi5kYXRhLmlzc3VwZXJzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQogICAgX19nZV9fID0gaXNzdXBlcnNldAoKICAgIGRlZiBfX2d0X18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPiBzZXQocmVmKGl0ZW0pIGZvciBpdGVtIGluIG90aGVyKQoKICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCBzZWxmLl9fY2xhc3NfXyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBzZWxmLmRhdGEgPT0gc2V0KHJlZihpdGVtKSBmb3IgaXRlbSBpbiBvdGhlcikKCiAgICBkZWYgc3ltbWV0cmljX2RpZmZlcmVuY2Uoc2VsZiwgb3RoZXIpOgogICAgICAgIG5ld3NldCA9IHNlbGYuY29weSgpCiAgICAgICAgbmV3c2V0LnN5bW1ldHJpY19kaWZmZXJlbmNlX3VwZGF0ZShvdGhlcikKICAgICAgICByZXR1cm4gbmV3c2V0CiAgICBfX3hvcl9fID0gc3ltbWV0cmljX2RpZmZlcmVuY2UKCiAgICBkZWYgc3ltbWV0cmljX2RpZmZlcmVuY2VfdXBkYXRlKHNlbGYsIG90aGVyKToKICAgICAgICBzZWxmLl9faXhvcl9fKG90aGVyKQogICAgZGVmIF9faXhvcl9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOgogICAgICAgICAgICBzZWxmLl9jb21taXRfcmVtb3ZhbHMoKQogICAgICAgIGlmIHNlbGYgaXMgb3RoZXI6CiAgICAgICAgICAgIHNlbGYuZGF0YS5jbGVhcigpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2VsZi5kYXRhLnN5bW1ldHJpY19kaWZmZXJlbmNlX3VwZGF0ZShyZWYoaXRlbSwgc2VsZi5fcmVtb3ZlKSBmb3IgaXRlbSBpbiBvdGhlcikKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiB1bmlvbihzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKGUgZm9yIHMgaW4gKHNlbGYsIG90aGVyKSBmb3IgZSBpbiBzKQogICAgX19vcl9fID0gdW5pb24KCiAgICBkZWYgaXNkaXNqb2ludChzZWxmLCBvdGhlcik6CiAgICAgICAgcmV0dXJuIGxlbihzZWxmLmludGVyc2VjdGlvbihvdGhlcikpID09IDAK',
'/Lib/browser/ajax.py':'ZnJvbSBfYWpheCBpbXBvcnQgKg==',
'/Lib/browser/html.py':'ZnJvbSBfaHRtbCBpbXBvcnQgKg==',
'/Lib/browser/indexed_db.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBJbmRleGVkREI6CiAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICBpZiBub3QgX19CUllUSE9OX18uaGFzX2luZGV4ZWREQjoKICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJOb3RJbXBsZW1lbnRlZEVycm9yIiwgIllvdXIgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgaW5kZXhlZERCIikKICAgICAgICAgcmV0dXJuCgogICAgICBzZWxmLl9pbmRleGVkREI9X19CUllUSE9OX18uaW5kZXhlZERCKCkKICAgICAgc2VsZi5fZGI9Tm9uZQogICAgICBzZWxmLl92ZXJzaW9uPU5vbmUKCiAgZGVmIF9vbnN1Y2Nlc3Moc2VsZiwgZXZlbnQpOgogICAgICBzZWxmLl9kYj1ldmVudC50YXJnZXQucmVzdWx0CgogIGRlZiBvcGVuKHNlbGYsIG5hbWUsIG9uc3VjY2VzcywgdmVyc2lvbj0xLjAsIG9uZXJyb3I9Tm9uZSwgCiAgICAgICAgICAgb251cGdyYWRlbmVlZGVkPU5vbmUpOgogICAgICBzZWxmLl92ZXJzaW9uPXZlcnNpb24KICAgICAgX3Jlc3VsdD1zZWxmLl9pbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKQogICAgICBfc3VjY2Vzcz1FdmVudExpc3RlbmVyKFtzZWxmLl9vbnN1Y2Nlc3MsIG9uc3VjY2Vzc10pCiAgICAgIF9yZXN1bHQub25zdWNjZXNzPV9zdWNjZXNzLmZpcmUKICAgICAgX3Jlc3VsdC5vbnVwZ3JhZGVuZWVkZWQ9b251cGdyYWRlbmVlZGVkCgogICAgICAjaWYgb25lcnJvciBpcyBOb25lOgogICAgICBkZWYgb25lcnJvcihlKToKICAgICAgICAgIHByaW50KCJvbmVycm9yOiAlczolcyIgJSAgKGUudHlwZSwgZS50YXJnZXQucmVzdWx0KSkKCiAgICAgIGRlZiBvbmJsb2NrZWQoZSk6CiAgICAgICAgICBwcmludCgiYmxvY2tlZDogJXM6JXMiICUgIChlLnR5cGUsIGUucmVzdWx0KSkKCiAgICAgIF9yZXN1bHQub25lcnJvcj1vbmVycm9yCiAgICAgIF9yZXN1bHQub25ibG9ja2VkPW9uYmxvY2tlZAoKICBkZWYgdHJhbnNhY3Rpb24oc2VsZiwgZW50aXRpZXMsIG1vZGU9J3JlYWQnKToKICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uKHNlbGYuX2RiLnRyYW5zYWN0aW9uKGVudGl0aWVzLCBtb2RlKSkKCmNsYXNzIFRyYW5zYWN0aW9uOgogIGRlZiBfX2luaXRfXyhzZWxmLCB0cmFuc2FjdGlvbik6CiAgICAgIHNlbGYuX3RyYW5zYWN0aW9uPXRyYW5zYWN0aW9uCgogIGRlZiBvYmplY3RTdG9yZShzZWxmLCBuYW1lKToKICAgICAgcmV0dXJuIE9iamVjdFN0b3JlKHNlbGYuX3RyYW5zYWN0aW9uLm9iamVjdFN0b3JlKG5hbWUpKQoKY2xhc3MgT2JqZWN0U3RvcmU6CiAgZGVmIF9faW5pdF9fKHNlbGYsIG9iamVjdFN0b3JlKToKICAgICAgc2VsZi5fb2JqZWN0U3RvcmU9b2JqZWN0U3RvcmUKICAgICAgc2VsZi5fZGF0YT1bXQoKICBkZWYgY2xlYXIoc2VsZiwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9c2VsZi5fb2JqZWN0U3RvcmUuY2xlYXIoKQoKICAgICAgaWYgb25zdWNjZXNzIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgICAgIGlmIG9uZXJyb3IgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25lcnJvcj1vbmVycm9yCgogIGRlZiBfaGVscGVyKHNlbGYsIGZ1bmMsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9ZnVuYyhvYmplY3QpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIHB1dChzZWxmLCBvYmplY3QsIGtleT1Ob25lLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3I9c2VsZi5fb2JqZWN0U3RvcmUucHV0KG9iamVjdCwga2V5KQogICAgICBfci5vbnN1Y2Nlc3M9b25zdWNjZXNzCiAgICAgIF9yLm9uZXJyb3I9b25lcnJvcgoKICBkZWYgYWRkKHNlbGYsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5hZGQsIG9iamVjdCwgb25zdWNjZXNzLCBvbmVycm9yKQoKICBkZWYgZGVsZXRlKHNlbGYsIGluZGV4LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKTogCiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5kZWxldGUsIGluZGV4LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCiAgICAgCiAgZGVmIHF1ZXJ5KHNlbGYsICphcmdzKToKICAgICAgc2VsZi5fZGF0YT1bXQogICAgICBkZWYgb25zdWNjZXNzKGV2ZW50KToKICAgICAgICAgIGN1cnNvcj1ldmVudC50YXJnZXQucmVzdWx0CiAgICAgICAgICBpZiBjdXJzb3IgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICBzZWxmLl9kYXRhLmFwcGVuZChjdXJzb3IudmFsdWUpCiAgICAgICAgICAgICBjdXJzb3IuY29udGludWUoKQoKICAgICAgc2VsZi5fb2JqZWN0U3RvcmUub3BlbkN1cnNvcihhcmdzKS5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogIGRlZiBmZXRjaGFsbChzZWxmKToKICAgICAgeWllbGQgc2VsZi5fZGF0YQoKICBkZWYgZ2V0KHNlbGYsIGtleSwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5nZXQsIGtleSwgb25zdWNjZXNzLCBvbmVycm9yKQo=',
'/Lib/browser/local_storage.py':'IyBsb2NhbCBzdG9yYWdlIGluIGJyb3dzZXIKCmNsYXNzIExvY2FsU3RvcmFnZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgaWYgbm90IF9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlOgogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2xvY2FsIHN0b3JhZ2UgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcicpCiAgICAgICAgc2VsZi5zdG9yZSA9IF9fQlJZVEhPTl9fLmxvY2FsX3N0b3JhZ2UoKQogICAgICAgIAogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsa2V5KToKICAgICAgICBzZWxmLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiByZXMKICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsa2V5LHZhbHVlKToKICAgICAgICBzZWxmLnN0b3JlLnNldEl0ZW0oa2V5LHZhbHVlKQoKICAgICNpbXBsZW1lbnQgImluIiBmdW5jdGlvbmFsaXR5CiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBrZXlzKHNlbGYpOgogICAgICAgIHJldHVybiBsaXN0KHNlbGYuc3RvcmUpCgogICAgZGVmIHZhbHVlcyhzZWxmKToKICAgICAgICByZXR1cm4gW3NlbGYuX19nZXRpdGVtX18oaykgZm9yIGsgaW4gc2VsZi5rZXlzKCldCgogICAgZGVmIGl0ZW1zKHNlbGYpOgogICAgICAgIHJldHVybiB6aXAoc2VsZi5rZXlzKCksc2VsZi52YWx1ZXMoKSkKCnN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2UoKQoK',
'/Lib/browser/markdown.py':'',
'/Lib/browser/pydom.py':'',
'/Lib/browser/svg.py':'ZnJvbSBfc3ZnIGltcG9ydCAq',
'/Lib/browser/timer.py':'ZnJvbSBfdGltZXIgaW1wb3J0ICo=',
'/Lib/browser/websocket.py':'ZnJvbSBfd2Vic29ja2V0IGltcG9ydCAq',
'/Lib/browser/__init__.py':'ZnJvbSBfYnJvd3NlciBpbXBvcnQgKgo=',
'/Lib/collections/abc.py':'TXV0YWJsZU1hcHBpbmcgPSBkaWN0',
'/Lib/collections/__init__.py':'',
'/Lib/http/cookies.py':'',
'/Lib/http/__init__.py':'',
'/Lib/importlib/abc.py':'',
'/Lib/importlib/machinery.py':'IiIiVGhlIG1hY2hpbmVyeSBvZiBpbXBvcnRsaWI6IGZpbmRlcnMsIGxvYWRlcnMsIGhvb2tzLCBldGMuIiIiCgppbXBvcnQgX2ltcAoKZnJvbSAuX2Jvb3RzdHJhcCBpbXBvcnQgKFNPVVJDRV9TVUZGSVhFUywgREVCVUdfQllURUNPREVfU1VGRklYRVMsCiAgICAgICAgICAgICAgICAgICAgICAgICBPUFRJTUlaRURfQllURUNPREVfU1VGRklYRVMsIEJZVEVDT0RFX1NVRkZJWEVTLAogICAgICAgICAgICAgICAgICAgICAgICAgRVhURU5TSU9OX1NVRkZJWEVTKQpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBCdWlsdGluSW1wb3J0ZXIKZnJvbSAuX2Jvb3RzdHJhcCBpbXBvcnQgRnJvemVuSW1wb3J0ZXIKZnJvbSAuX2Jvb3RzdHJhcCBpbXBvcnQgV2luZG93c1JlZ2lzdHJ5RmluZGVyCmZyb20gLl9ib290c3RyYXAgaW1wb3J0IFBhdGhGaW5kZXIKZnJvbSAuX2Jvb3RzdHJhcCBpbXBvcnQgRmlsZUZpbmRlcgpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBTb3VyY2VGaWxlTG9hZGVyCmZyb20gLl9ib290c3RyYXAgaW1wb3J0IFNvdXJjZWxlc3NGaWxlTG9hZGVyCmZyb20gLl9ib290c3RyYXAgaW1wb3J0IEV4dGVuc2lvbkZpbGVMb2FkZXIKCgpkZWYgYWxsX3N1ZmZpeGVzKCk6CiAgICAiIiJSZXR1cm5zIGEgbGlzdCBvZiBhbGwgcmVjb2duaXplZCBtb2R1bGUgc3VmZml4ZXMgZm9yIHRoaXMgcHJvY2VzcyIiIgogICAgcmV0dXJuIFNPVVJDRV9TVUZGSVhFUyArIEJZVEVDT0RFX1NVRkZJWEVTICsgRVhURU5TSU9OX1NVRkZJWEVTCg==',
'/Lib/importlib/module5.py':'Y2xhc3MgZm9vOgogICAgZGVmIGJhcihzZWxmKToKICAgICAgICBwYXNzCgpwcmludChkaXIoZm9vLmJhcikpCnByaW50KGZvby5iYXIuaW1fY2xhc3Mp',
'/Lib/importlib/util.py':'IiIiVXRpbGl0eSBjb2RlIGZvciBjb25zdHJ1Y3RpbmcgaW1wb3J0ZXJzLCBldGMuIiIiCgpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBtb2R1bGVfZm9yX2xvYWRlcgpmcm9tIC5fYm9vdHN0cmFwIGltcG9ydCBzZXRfbG9hZGVyCmZyb20gLl9ib290c3RyYXAgaW1wb3J0IHNldF9wYWNrYWdlCmZyb20gLl9ib290c3RyYXAgaW1wb3J0IF9yZXNvbHZlX25hbWUKCgpkZWYgcmVzb2x2ZV9uYW1lKG5hbWUsIHBhY2thZ2UpOgogICAgIiIiUmVzb2x2ZSBhIHJlbGF0aXZlIG1vZHVsZSBuYW1lIHRvIGFuIGFic29sdXRlIG9uZS4iIiIKICAgIGlmIG5vdCBuYW1lLnN0YXJ0c3dpdGgoJy4nKToKICAgICAgICByZXR1cm4gbmFtZQogICAgZWxpZiBub3QgcGFja2FnZToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCd7IXJ9IGlzIG5vdCBhIHJlbGF0aXZlIG5hbWUgJwogICAgICAgICAgICAgICAgICAgICAgICAgJyhubyBsZWFkaW5nIGRvdCknLmZvcm1hdChuYW1lKSkKICAgIGxldmVsID0gMAogICAgZm9yIGNoYXJhY3RlciBpbiBuYW1lOgogICAgICAgIGlmIGNoYXJhY3RlciAhPSAnLic6CiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgbGV2ZWwgKz0gMQogICAgcmV0dXJuIF9yZXNvbHZlX25hbWUobmFtZVtsZXZlbDpdLCBwYWNrYWdlLCBsZXZlbCkK',
'/Lib/importlib/_bootstrap.py':'',
'/Lib/importlib/__init__.py':'IiIiQSBwdXJlIFB5dGhvbiBpbXBsZW1lbnRhdGlvbiBvZiBpbXBvcnQuIiIiCl9fYWxsX18gPSBbJ19faW1wb3J0X18nLCAnaW1wb3J0X21vZHVsZScsICdpbnZhbGlkYXRlX2NhY2hlcyddCgojIEJvb3RzdHJhcCBoZWxwICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgojIFVudGlsIGJvb3RzdHJhcHBpbmcgaXMgY29tcGxldGUsIERPIE5PVCBpbXBvcnQgYW55IG1vZHVsZXMgdGhhdCBhdHRlbXB0CiMgdG8gaW1wb3J0IGltcG9ydGxpYi5fYm9vdHN0cmFwIChkaXJlY3RseSBvciBpbmRpcmVjdGx5KS4gU2luY2UgdGhpcwojIHBhcnRpYWxseSBpbml0aWFsaXNlZCBwYWNrYWdlIHdvdWxkIGJlIHByZXNlbnQgaW4gc3lzLm1vZHVsZXMsIHRob3NlCiMgbW9kdWxlcyB3b3VsZCBnZXQgYW4gdW5pbml0aWFsaXNlZCBjb3B5IG9mIHRoZSBzb3VyY2UgdmVyc2lvbiwgaW5zdGVhZAojIG9mIGEgZnVsbHkgaW5pdGlhbGlzZWQgdmVyc2lvbiAoZWl0aGVyIHRoZSBmcm96ZW4gb25lIG9yIHRoZSBvbmUKIyBpbml0aWFsaXNlZCBiZWxvdyBpZiB0aGUgZnJvemVuIG9uZSBpcyBub3QgYXZhaWxhYmxlKS4KaW1wb3J0IF9pbXAgICMgSnVzdCB0aGUgYnVpbHRpbiBjb21wb25lbnQsIE5PVCB0aGUgZnVsbCBQeXRob24gbW9kdWxlCmltcG9ydCBzeXMKCnRyeToKICAgIGltcG9ydCBfZnJvemVuX2ltcG9ydGxpYiBhcyBfYm9vdHN0cmFwCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGZyb20gLiBpbXBvcnQgX2Jvb3RzdHJhcAogICAgX2Jvb3RzdHJhcC5fc2V0dXAoc3lzLCBfaW1wKQplbHNlOgogICAgIyBpbXBvcnRsaWIuX2Jvb3RzdHJhcCBpcyB0aGUgYnVpbHQtaW4gaW1wb3J0LCBlbnN1cmUgd2UgZG9uJ3QgY3JlYXRlCiAgICAjIGEgc2Vjb25kIGNvcHkgb2YgdGhlIG1vZHVsZS4KICAgIF9ib290c3RyYXAuX19uYW1lX18gPSAnaW1wb3J0bGliLl9ib290c3RyYXAnCiAgICBfYm9vdHN0cmFwLl9fcGFja2FnZV9fID0gJ2ltcG9ydGxpYicKICAgIF9ib290c3RyYXAuX19maWxlX18gPSBfX2ZpbGVfXy5yZXBsYWNlKCdfX2luaXRfXy5weScsICdfYm9vdHN0cmFwLnB5JykKICAgIHN5cy5tb2R1bGVzWydpbXBvcnRsaWIuX2Jvb3RzdHJhcCddID0gX2Jvb3RzdHJhcAoKIyBUbyBzaW1wbGlmeSBpbXBvcnRzIGluIHRlc3QgY29kZQpfd19sb25nID0gX2Jvb3RzdHJhcC5fd19sb25nCl9yX2xvbmcgPSBfYm9vdHN0cmFwLl9yX2xvbmcKCiMgRnVsbHkgYm9vdHN0cmFwcGVkIGF0IHRoaXMgcG9pbnQsIGltcG9ydCB3aGF0ZXZlciB5b3UgbGlrZSwgY2lyY3VsYXIKIyBkZXBlbmRlbmNpZXMgYW5kIHN0YXJ0dXAgb3ZlcmhlYWQgbWluaW1pc2F0aW9uIHBlcm1pdHRpbmcgOikKCiMgUHVibGljIEFQSSAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmZyb20gLl9ib290c3RyYXAgaW1wb3J0IF9faW1wb3J0X18KCgpkZWYgaW52YWxpZGF0ZV9jYWNoZXMoKToKICAgICIiIkNhbGwgdGhlIGludmFsaWRhdGVfY2FjaGVzKCkgbWV0aG9kIG9uIGFsbCBtZXRhIHBhdGggZmluZGVycyBzdG9yZWQgaW4KICAgIHN5cy5tZXRhX3BhdGggKHdoZXJlIGltcGxlbWVudGVkKS4iIiIKICAgIGZvciBmaW5kZXIgaW4gc3lzLm1ldGFfcGF0aDoKICAgICAgICBpZiBoYXNhdHRyKGZpbmRlciwgJ2ludmFsaWRhdGVfY2FjaGVzJyk6CiAgICAgICAgICAgIGZpbmRlci5pbnZhbGlkYXRlX2NhY2hlcygpCgoKZGVmIGZpbmRfbG9hZGVyKG5hbWUsIHBhdGg9Tm9uZSk6CiAgICAiIiJGaW5kIHRoZSBsb2FkZXIgZm9yIHRoZSBzcGVjaWZpZWQgbW9kdWxlLgoKICAgIEZpcnN0LCBzeXMubW9kdWxlcyBpcyBjaGVja2VkIHRvIHNlZSBpZiB0aGUgbW9kdWxlIHdhcyBhbHJlYWR5IGltcG9ydGVkLiBJZgogICAgc28sIHRoZW4gc3lzLm1vZHVsZXNbbmFtZV0uX19sb2FkZXJfXyBpcyByZXR1cm5lZC4gSWYgdGhhdCBoYXBwZW5zIHRvIGJlCiAgICBzZXQgdG8gTm9uZSwgdGhlbiBWYWx1ZUVycm9yIGlzIHJhaXNlZC4gSWYgdGhlIG1vZHVsZSBpcyBub3QgaW4KICAgIHN5cy5tb2R1bGVzLCB0aGVuIHN5cy5tZXRhX3BhdGggaXMgc2VhcmNoZWQgZm9yIGEgc3VpdGFibGUgbG9hZGVyIHdpdGggdGhlCiAgICB2YWx1ZSBvZiAncGF0aCcgZ2l2ZW4gdG8gdGhlIGZpbmRlcnMuIE5vbmUgaXMgcmV0dXJuZWQgaWYgbm8gbG9hZGVyIGNvdWxkCiAgICBiZSBmb3VuZC4KCiAgICBEb3R0ZWQgbmFtZXMgZG8gbm90IGhhdmUgdGhlaXIgcGFyZW50IHBhY2thZ2VzIGltcGxpY2l0bHkgaW1wb3J0ZWQuCgogICAgIiIiCiAgICB0cnk6CiAgICAgICAgbG9hZGVyID0gc3lzLm1vZHVsZXNbbmFtZV0uX19sb2FkZXJfXwogICAgICAgIGlmIGxvYWRlciBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCd7fS5fX2xvYWRlcl9fIGlzIE5vbmUnLmZvcm1hdChuYW1lKSkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gbG9hZGVyCiAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgcGFzcwogICAgcmV0dXJuIF9ib290c3RyYXAuX2ZpbmRfbW9kdWxlKG5hbWUsIHBhdGgpCgoKZGVmIGltcG9ydF9tb2R1bGUobmFtZSwgcGFja2FnZT1Ob25lKToKICAgICIiIkltcG9ydCBhIG1vZHVsZS4KCiAgICBUaGUgJ3BhY2thZ2UnIGFyZ3VtZW50IGlzIHJlcXVpcmVkIHdoZW4gcGVyZm9ybWluZyBhIHJlbGF0aXZlIGltcG9ydC4gSXQKICAgIHNwZWNpZmllcyB0aGUgcGFja2FnZSB0byB1c2UgYXMgdGhlIGFuY2hvciBwb2ludCBmcm9tIHdoaWNoIHRvIHJlc29sdmUgdGhlCiAgICByZWxhdGl2ZSBpbXBvcnQgdG8gYW4gYWJzb2x1dGUgaW1wb3J0LgoKICAgICIiIgogICAgbGV2ZWwgPSAwCiAgICBpZiBuYW1lLnN0YXJ0c3dpdGgoJy4nKToKICAgICAgICBpZiBub3QgcGFja2FnZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJyZWxhdGl2ZSBpbXBvcnRzIHJlcXVpcmUgdGhlICdwYWNrYWdlJyBhcmd1bWVudCIpCiAgICAgICAgZm9yIGNoYXJhY3RlciBpbiBuYW1lOgogICAgICAgICAgICBpZiBjaGFyYWN0ZXIgIT0gJy4nOgogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgbGV2ZWwgKz0gMQogICAgcmV0dXJuIF9ib290c3RyYXAuX2djZF9pbXBvcnQobmFtZVtsZXZlbDpdLCBwYWNrYWdlLCBsZXZlbCkK',
'/Lib/ui/dialog.py':'aW1wb3J0IHdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwsIGRvYwoKY2xhc3MgRGlhbG9nKHdpZGdldC5EcmFnZ2FibGVXaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lKToKICAgICAgc2VsZi5fZGl2X3NoZWxsPWh0bWwuRElWKAogICAgICAgICBDbGFzcz0idWktZGlhbG9nIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIHVpLWZyb250IHVpLWRyYWdnYWJsZSB1aS1yZXNpemFibGUiLAogICAgICAgICBzdHlsZT17J3Bvc2l0aW9uJzogJ2Fic29sdXRlJywgJ2hlaWdodCc6ICdhdXRvJywgJ3dpZHRoJzogJzMwMHB4JywKICAgICAgICAgICAgICAgICd0b3AnOiAnOThweCcsICdsZWZ0JzogJzE0MHB4JywgJ2Rpc3BsYXknOiAnYmxvY2snfSkKCiAgICAgIHdpZGdldC5EcmFnZ2FibGVXaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnZGlhbG9nJywgaWQpCgogICAgICBfZGl2X3RpdGxlYmFyPWh0bWwuRElWKElkPSJ0aXRsZWJhciIsCiAgICAgICAgICAgQ2xhc3M9InVpLWRpYWxvZy10aXRsZWJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwgdWktaGVscGVyLWNsZWFyZml4IikKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IF9kaXZfdGl0bGViYXIKCiAgICAgIHNlbGYuX2Rpdl90aXRsZT1odG1sLlNQQU4oSWQ9InRpdGxlIiwgQ2xhc3M9InVpLWRpYWxvZy10aXRsZSIpCiAgICAgICAgCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fZGl2X3RpdGxlCgogICAgICBzZWxmLl90aXRsZV9idXR0b249aHRtbC5CVVRUT04oVGl0bGU9ImNsb3NlIiwKICAgICAgICAgICAgQ2xhc3M9InVpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIHVpLWJ1dHRvbi1pY29uLW9ubHkgdWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlIikKCiAgICAgIGRlZiBkaWFsb2dfY2xvc2UoZSk6CiAgICAgICAgICAjZGVsIGRvY3VtZW50W3NlbGYuX2Rpdl9zaGVsbC5pZF0KICAgICAgICAgIGRlbCBkb2Nbc2VsZi5fZGl2X3NoZWxsLmlkXQoKICAgICAgc2VsZi5fdGl0bGVfYnV0dG9uLmJpbmQoJ2NsaWNrJywgZGlhbG9nX2Nsb3NlKQogICAgICBfc3Bhbj1odG1sLlNQQU4oQ2xhc3M9InVpLWJ1dHRvbi1pY29uLXByaW1hcnkgdWktaWNvbiB1aS1pY29uLWNsb3NldGhpY2siKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9zcGFuPWh0bWwuU1BBTignY2xvc2UnLCBDbGFzcz0idWktYnV0dG9uLXRleHQiKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fdGl0bGVfYnV0dG9uCgogICAgICBzZWxmLl9kaXZfZGlhbG9nPWh0bWwuRElWKENsYXNzPSJ1aS1kaWFsb2ctY29udGVudCB1aS13aWRnZXQtY29udGVudCIsCiAgICAgICAgICAgc3R5bGU9eyd3aWR0aCc6ICdhdXRvJywgJ21pbi1oZWlnaHQnOiAnMTA1cHgnLCAKICAgICAgICAgICAgICAgICAgJ21heC1oZWlnaHQnOiAnbm9uZScsICdoZWlnaHQnOiAnYXV0byd9KQoKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IHNlbGYuX2Rpdl9kaWFsb2cKCiAgICAgIGZvciBfaSBpbiBbJ24nLCAnZScsICdzJywgJ3cnLCAnc2UnLCAnc3cnLCAnbmUnLCAnbncnXToKICAgICAgICAgIGlmIF9pID09ICdzZSc6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIHVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtJXMiICUgKF9pLCBfaSkKICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIiAlIF9pCgogICAgICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IGh0bWwuRElWKENsYXNzPV9jbGFzcywgc3R5bGU9eyd6LWluZGV4JzogJzkwJ30pCgogICAgICBkb2MgPD0gc2VsZi5fZGl2X3NoZWxsCgogIGRlZiBzZXRfdGl0bGUoc2VsZiwgdGl0bGUpOgogICAgICBzZWxmLl9kaXZfdGl0bGUuc2V0X3RleHQodGl0bGUpCgogIGRlZiBzZXRfYm9keShzZWxmLCBib2R5KToKICAgICAgc2VsZi5fZGl2X2RpYWxvZy5zZXRfaHRtbChib2R5KQo=',
'/Lib/ui/progressbar.py':'aW1wb3J0IHdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFByb2dyZXNzQmFyKHdpZGdldC5XaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiKQogICAgICB3aWRnZXQuV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIHNlbGYuX2Rpdl9zaGVsbCwgJ3Byb2dyZXNzYmFyJywgaWQpCgogICAgICBzZWxmLl9zaG93X2xhYmVsPWxhYmVsCiAgICAgIGlmIGxhYmVsOgogICAgICAgICBzZWxmLl9sYWJlbD1odG1sLkRJVihDbGFzcz0ncHJvZ3Jlc3MtbGFiZWwnKQogICAgICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fbGFiZWwKCiAgICAgIHNlbGYuX2Jhcj1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXItdmFsdWUgdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItbGVmdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17J3dpZHRoJzogJzBweCd9KQogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fYmFyCgogIGRlZiBzZXRfcHJvZ3Jlc3Moc2VsZiwgcGVyY2VudCk6CiAgICAgIHNlbGYuX2Jhci5zdHlsZS53aWR0aD0nJXMlJScgJSBwZXJjZW50CiAgICAgIGlmIHNlbGYuX3Nob3dfbGFiZWw6CiAgICAgICAgIHNlbGYuX2xhYmVsLnRleHQ9JyVzJSUnICUgcGVyY2VudAo=',
'/Lib/ui/slider.py':'aW1wb3J0IHdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGRvYyxodG1sCgpjbGFzcyBTbGlkZXIod2lkZ2V0LldpZGdldCk6CgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lLCBsYWJlbD1GYWxzZSk6CgogICAgICBzZWxmLl9kaXZfc2hlbGw9aHRtbC5ESVYoQ2xhc3M9InVpLXNsaWRlciB1aS1zbGlkZXItaG9yaXpvbnRhbCB1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktY29ybmVyLWFsbCIpCgogICAgICB3aWRnZXQuV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIHNlbGYuX2Rpdl9zaGVsbCwgJ3NsaWRlcicsIGlkKQoKICAgICAgc2VsZi5faGFuZGxlPWh0bWwuQShDbGFzcz0idWktc2xpZGVyLWhhbmRsZSB1aS1zdGF0ZS1kZWZhdWx0IHVpLWNvcm5lci1hbGwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIEhyZWY9JyMnLCBzdHlsZT17J2xlZnQnOiAnMHB4J30pCiAgICAgIHNlbGYuX3ZhbHVlPTAKICAgICAgc2VsZi5faXNNb3VzZURvd249RmFsc2UKCiAgICAgIGRlZiBzdGFydFNsaWRlKGUpOgogICAgICAgICAgc2VsZi5faXNNb3VzZURvd249VHJ1ZQogICAgICAgICAgc2VsZi5fdXBwZXJCb3VuZCA9IHNlbGYuX2Rpdl9zaGVsbC5vZmZzZXRXaWR0aCAtIHNlbGYuX2hhbmRsZS5vZmZzZXRXaWR0aAoKICAgICAgICAgIHBvcyA9IHdpZGdldC5nZXRNb3VzZVBvc2l0aW9uKGUpCiAgICAgICAgICBzZWxmLl9zdGFydE1vdXNlWD1wb3NbJ3gnXQoKICAgICAgICAgIHNlbGYuX2xhc3RFbGVtZW50TGVmdCA9IHBhcnNlSW50KHNlbGYuX2hhbmRsZS5zdHlsZS5sZWZ0KQogICAgICAgICAgdXBkYXRlUG9zaXRpb24oZSkKCiAgICAgIGRlZiB1cGRhdGVQb3NpdGlvbihlKToKICAgICAgICAgIHBvcyA9IHdpZGdldC5nZXRNb3VzZVBvc2l0aW9uKGUpCiAgICAgICAgICAjcHJpbnQoJ21vc2UgcG9zJyxwb3MpCiAgICAgICAgICBfbmV3UG9zID0gc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ICsgcG9zWyd4J10gLSBzZWxmLl9zdGFydE1vdXNlWAogICAgICAgICAgCiAgICAgICAgICBfbmV3UG9zID0gbWF4KDAsIF9uZXdQb3MpCiAgICAgICAgICBfbmV3UG9zID0gbWluKF9uZXdQb3MsIHNlbGYuX3VwcGVyQm91bmQpCgogICAgICAgICAgc2VsZi5faGFuZGxlLnN0eWxlLmxlZnQgPSAnJXNweCcgJSBfbmV3UG9zCiAgICAgICAgICAjcHJpbnQoJ25ldyBwb3NpdGlvbicsc2VsZi5faGFuZGxlLnN0eWxlLmxlZnQpCiAgICAgICAgICBzZWxmLl9sYXN0RWxlbWVudExlZnQgPSBfbmV3UG9zCgogICAgICBkZWYgbW92aW5nKGUpOgogICAgICAgICAgaWYgc2VsZi5faXNNb3VzZURvd246CiAgICAgICAgICAgICB1cGRhdGVQb3NpdGlvbihlKQoKICAgICAgZGVmIGRyb3BDYWxsYmFjayhlKToKICAgICAgICAgIHNlbGYuX2lzTW91c2VEb3duPUZhbHNlCiAgICAgICAgICBzZWxmLl9oYW5kbGUudW5iaW5kKCdtb3VzZW1vdmUnLCBtb3ZpbmcpCgoKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlbW92ZScsIG1vdmluZykKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNldXAnLCBkcm9wQ2FsbGJhY2spCiAgICAgICNzZWxmLl9oYW5kbGUuYmluZCgnbW91c2VvdXQnLCBkcm9wQ2FsbGJhY2spCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZWRvd24nLCBzdGFydFNsaWRlKQoKICAgICAgZGVmIG1vdXNlb3ZlcihlKToKICAgICAgICAgIF9jbGFzcz1zZWxmLl9oYW5kbGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpCiAgICAgICAgICBzZWxmLl9oYW5kbGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICclcyAlcycgJSAoX2NsYXNzLCAndWktc3RhdGUtaG92ZXInKSkKCiAgICAgIGRlZiBtb3VzZW91dChlKToKICAgICAgICAgIHNlbGYuX2lzTW91c2VEb3duPUZhbHNlCiAgICAgICAgICBfY2xhc3M9c2VsZi5faGFuZGxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKQogICAgICAgICAgc2VsZi5faGFuZGxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBfY2xhc3MucmVwbGFjZSgndWktc3RhdGUtaG92ZXInLCAnJykpCgogICAgICBzZWxmLl9oYW5kbGUuYmluZCgnbW91c2VvdmVyJywgbW91c2VvdmVyKQogICAgICBzZWxmLl9oYW5kbGUuYmluZCgnbW91c2VvdXQnLCBtb3VzZW91dCkKCiAgICAgIHNlbGYuX2Rpdl9zaGVsbCA8PSBzZWxmLl9oYW5kbGUKCiAgZGVmIGdldF92YWx1ZShzZWxmKToKICAgICAgcmV0dXJuIHNlbGYuX3ZhbHVlCgogICNkZWYgc2V0X3ZhbHVlKHNlbGYsIHZhbHVlKToKICAjICAgIHNlbGYuX3ZhbHVlPXZhbHVlCiAgIyAgIHNlbGYuX2hhbmRsZS5zdHlsZS5sZWZ0PSclc3B4JyAlIHZhbHVlCg==',
'/Lib/ui/widget.py':'aW1wb3J0IHJhbmRvbQpmcm9tIGJyb3dzZXIgaW1wb3J0IGRvYwoKZGVmIGdldE1vdXNlUG9zaXRpb24oZSk6CiAgICBpZiBlIGlzIE5vbmU6CiAgICAgICBlPXdpbi5ldmVudAoKICAgIGlmIGUucGFnZVggb3IgZS5wYWdlWToKICAgICAgIHJldHVybiB7J3gnOiBlLnBhZ2VYLCAneSc6IGUucGFnZVl9CgogICAgaWYgZS5jbGllbnRYIG9yIGUuY2xpZW50WToKICAgICAgIF9wb3N4PWUuY2xpZW50WCArIGRvYy5ib2R5LnNjcm9sbExlZnQgKyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7CiAgICAgICBfcG9zeT1lLmNsaWVudFkgKyBkb2MuYm9keS5zY3JvbGxUb3AgKyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDsKICAgICAgIHJldHVybiB7J3gnOiBfcG9zeCwgJ3knOiBfcG9zeX0KICAgICAgCiAgICByZXR1cm4geyd4JzogMCwgJ3knOiAwfQoKY2xhc3MgV2lkZ2V0OgogIGRlZiBfX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZD1Ob25lKToKICAgICAgc2VsZi5fZWxlbWVudD1lbGVtZW50CgogICAgICBpZiBpZCBpcyBOb25lOgogICAgICAgICBzZWxmLl9lbGVtZW50LmlkPSclc18lcycgJSAodHlwZSwgaW50KDEwMDAwMCpyYW5kb20ucmFuZG9tKCkpKQogICAgICBlbHNlOgogICAgICAgICBzZWxmLl9lbGVtZW50LmlkPWlkCgogIGRlZiBnZXRfaWQoc2VsZik6CiAgICAgIHJldHVybiBzZWxmLl9lbGVtZW50LmlkCgogIGRlZiBhdHRhY2goc2VsZiwgZWxlbWVudF9pZCk6CiAgICAgICIiIiBhcHBlbmQgdGhpcyBET00gY29tcG9uZW50IHRvIERPTSBlbGVtZW50IGVsZW1lbnRfaWQiIiIKICAgICAgI2RvY3VtZW50W2VsZW1lbnRfaWRdIDw9IHNlbGYuX2VsZW1lbnQgICAjdGhpcyBkb2Vzbid0IHdvcmsgOigKICAgICAgI2RvYyBpcyBhY3R1YWxseSB0aGUgZ2xvYmFsICdkb2MnIG5vdCB0aGUgb25lIHdlIGltcG9ydGVkIGZyb20gYnJvd3NlciA6KAogICAgICBkb2NbZWxlbWVudF9pZF0gPD0gc2VsZi5fZWxlbWVudAoKICBkZWYgc2hvdyhzZWxmKToKICAgICAgc2VsZi5fZWxlbWVudC5kaXNwbGF5PSdibG9jaycKCiAgZGVmIGhpZGUoc2VsZik6CiAgICAgIHNlbGYuX2VsZW1lbnQuZGlzcGxheT0nbm9uZScKCmNsYXNzIERyYWdnYWJsZVdpZGdldChXaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZD1Ob25lKToKICAgICAgV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIGVsZW1lbnQsIHR5cGUsIGlkKQoKICAgICAgZGVmIGRyYWcoZSk6CiAgICAgICAgICBzZWxmLl9lbGVtZW50LnN0eWxlLnRvcD0nJXNweCcgJSAoZS5jbGllbnRZIC0gc2VsZi5fZGVsdGFZKQogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS5sZWZ0PSclc3B4JyAlIChlLmNsaWVudFggLSBzZWxmLl9kZWx0YVgpCgogICAgICBkZWYgbW91c2VEb3duKGUpOgogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS5wb3NpdGlvbj0nYWJzb2x1dGUnCiAgICAgICAgICBzZWxmLl9kZWx0YVg9ZS5jbGllbnRYIC0gc2VsZi5fZWxlbWVudC5vZmZzZXRMZWZ0CiAgICAgICAgICBzZWxmLl9kZWx0YVk9ZS5jbGllbnRZIC0gc2VsZi5fZWxlbWVudC5vZmZzZXRUb3AKICAgICAgICAgIGRvYy5iaW5kKCdtb3VzZW1vdmUnLCBkcmFnKQoKICAgICAgZGVmIG1vdXNlVXAoZSk6CiAgICAgICAgICBkb2MudW5iaW5kKCdtb3VzZW1vdmUnKQoKICAgICAgc2VsZi5fZWxlbWVudC5iaW5kKCdtb3VzZWRvd24nLCBtb3VzZURvd24pCiAgICAgIHNlbGYuX2VsZW1lbnQuYmluZCgnbW91c2V1cCcsIG1vdXNlVXApCg==',
'/Lib/ui/__init__.py':'ZnJvbSBicm93c2VyIGltcG9ydCBodG1sLCBkb2MgYXMgZG9jdW1lbnQKZnJvbSBkaWFsb2cgaW1wb3J0ICoKZnJvbSBwcm9ncmVzc2JhciBpbXBvcnQgKgpmcm9tIHNsaWRlciBpbXBvcnQgKgoKZGVmIGFkZF9zdHlsZXNoZWV0KCk6CiAgICBfbGluaz1odG1sLkxJTksoSHJlZj0nL3NyYy9MaWIvdWkvY3NzL3Ntb290aG5lc3MvanF1ZXJ5LXVpLTEuMTAuMy5jdXN0b20ubWluLmNzcycpCiAgICBfbGluay5yZWw9J3N0eWxlc2hlZXQnCgogICAgZG9jIDw9IF9saW5rICAgICAjIGRvY3VtZW50IGRvZXNuJ3Qgd29yayBoZXJlLi4gOiggbXVzdCB1c2UgZG9jIAo=',
'/Lib/unittest/case.py':'',
'/Lib/unittest/loader.py':'',
'/Lib/unittest/main.py':'',
'/Lib/unittest/mock.py':'',
'/Lib/unittest/result.py':'',
'/Lib/unittest/runner.py':'',
'/Lib/unittest/signals.py':'aW1wb3J0IHNpZ25hbAppbXBvcnQgd2Vha3JlZgoKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCmNsYXNzIF9JbnRlcnJ1cHRIYW5kbGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVmYXVsdF9oYW5kbGVyKToKICAgICAgICBzZWxmLmNhbGxlZCA9IEZhbHNlCiAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIgPSBkZWZhdWx0X2hhbmRsZXIKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgc2lnbnVtLCBmcmFtZSk6CiAgICAgICAgaW5zdGFsbGVkX2hhbmRsZXIgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgaWYgaW5zdGFsbGVkX2hhbmRsZXIgaXMgbm90IHNlbGY6CiAgICAgICAgICAgICMgaWYgd2UgYXJlbid0IHRoZSBpbnN0YWxsZWQgaGFuZGxlciwgdGhlbiBkZWxlZ2F0ZSBpbW1lZGlhdGVseQogICAgICAgICAgICAjIHRvIHRoZSBkZWZhdWx0IGhhbmRsZXIKICAgICAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIoc2lnbnVtLCBmcmFtZSkKCiAgICAgICAgaWYgc2VsZi5jYWxsZWQ6CiAgICAgICAgICAgIHNlbGYuZGVmYXVsdF9oYW5kbGVyKHNpZ251bSwgZnJhbWUpCiAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlCiAgICAgICAgZm9yIHJlc3VsdCBpbiBfcmVzdWx0cy5rZXlzKCk6CiAgICAgICAgICAgIHJlc3VsdC5zdG9wKCkKCl9yZXN1bHRzID0gd2Vha3JlZi5XZWFrS2V5RGljdGlvbmFyeSgpCmRlZiByZWdpc3RlclJlc3VsdChyZXN1bHQpOgogICAgX3Jlc3VsdHNbcmVzdWx0XSA9IDEKCmRlZiByZW1vdmVSZXN1bHQocmVzdWx0KToKICAgIHJldHVybiBib29sKF9yZXN1bHRzLnBvcChyZXN1bHQsIE5vbmUpKQoKX2ludGVycnVwdF9oYW5kbGVyID0gTm9uZQpkZWYgaW5zdGFsbEhhbmRsZXIoKToKICAgIGdsb2JhbCBfaW50ZXJydXB0X2hhbmRsZXIKICAgIGlmIF9pbnRlcnJ1cHRfaGFuZGxlciBpcyBOb25lOgogICAgICAgIGRlZmF1bHRfaGFuZGxlciA9IHNpZ25hbC5nZXRzaWduYWwoc2lnbmFsLlNJR0lOVCkKICAgICAgICBfaW50ZXJydXB0X2hhbmRsZXIgPSBfSW50ZXJydXB0SGFuZGxlcihkZWZhdWx0X2hhbmRsZXIpCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIpCgoKZGVmIHJlbW92ZUhhbmRsZXIobWV0aG9kPU5vbmUpOgogICAgaWYgbWV0aG9kIGlzIG5vdCBOb25lOgogICAgICAgIEB3cmFwcyhtZXRob2QpCiAgICAgICAgZGVmIGlubmVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIGluaXRpYWwgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgICAgIHJlbW92ZUhhbmRsZXIoKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kKCphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW5pdGlhbCkKICAgICAgICByZXR1cm4gaW5uZXIKCiAgICBnbG9iYWwgX2ludGVycnVwdF9oYW5kbGVyCiAgICBpZiBfaW50ZXJydXB0X2hhbmRsZXIgaXMgbm90IE5vbmU6CiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIuZGVmYXVsdF9oYW5kbGVyKQo=',
'/Lib/unittest/suite.py':'',
'/Lib/unittest/util.py':'IiIiVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy4iIiIKCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUsIE9yZGVyZWREaWN0CgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKX01BWF9MRU5HVEggPSA4MApkZWYgc2FmZV9yZXByKG9iaiwgc2hvcnQ9RmFsc2UpOgogICAgdHJ5OgogICAgICAgIHJlc3VsdCA9IHJlcHIob2JqKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXN1bHQgPSBvYmplY3QuX19yZXByX18ob2JqKQogICAgaWYgbm90IHNob3J0IG9yIGxlbihyZXN1bHQpIDwgX01BWF9MRU5HVEg6CiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgcmV0dXJuIHJlc3VsdFs6X01BWF9MRU5HVEhdICsgJyBbdHJ1bmNhdGVkXS4uLicKCmRlZiBzdHJjbGFzcyhjbHMpOgogICAgcmV0dXJuICIlcy4lcyIgJSAoY2xzLl9fbW9kdWxlX18sIGNscy5fX25hbWVfXykKCmRlZiBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiRmluZHMgZWxlbWVudHMgaW4gb25seSBvbmUgb3IgdGhlIG90aGVyIG9mIHR3bywgc29ydGVkIGlucHV0IGxpc3RzLgoKICAgIFJldHVybnMgYSB0d28tZWxlbWVudCB0dXBsZSBvZiBsaXN0cy4gICAgVGhlIGZpcnN0IGxpc3QgY29udGFpbnMgdGhvc2UKICAgIGVsZW1lbnRzIGluIHRoZSAiZXhwZWN0ZWQiIGxpc3QgYnV0IG5vdCBpbiB0aGUgImFjdHVhbCIgbGlzdCwgYW5kIHRoZQogICAgc2Vjb25kIGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIGluIHRoZSAiYWN0dWFsIiBsaXN0IGJ1dCBub3QgaW4gdGhlCiAgICAiZXhwZWN0ZWQiIGxpc3QuICAgIER1cGxpY2F0ZSBlbGVtZW50cyBpbiBlaXRoZXIgaW5wdXQgbGlzdCBhcmUgaWdub3JlZC4KICAgICIiIgogICAgaSA9IGogPSAwCiAgICBtaXNzaW5nID0gW10KICAgIHVuZXhwZWN0ZWQgPSBbXQogICAgd2hpbGUgVHJ1ZToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGUgPSBleHBlY3RlZFtpXQogICAgICAgICAgICBhID0gYWN0dWFsW2pdCiAgICAgICAgICAgIGlmIGUgPCBhOgogICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoZSkKICAgICAgICAgICAgICAgIGkgKz0gMQogICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICBpICs9IDEKICAgICAgICAgICAgZWxpZiBlID4gYToKICAgICAgICAgICAgICAgIHVuZXhwZWN0ZWQuYXBwZW5kKGEpCiAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgbWlzc2luZy5leHRlbmQoZXhwZWN0ZWRbaTpdKQogICAgICAgICAgICB1bmV4cGVjdGVkLmV4dGVuZChhY3R1YWxbajpdKQogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIG1pc3NpbmcsIHVuZXhwZWN0ZWQKCgpkZWYgdW5vcmRlcmFibGVfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiU2FtZSBiZWhhdmlvciBhcyBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlIGJ1dAogICAgZm9yIGxpc3RzIG9mIHVub3JkZXJhYmxlIGl0ZW1zIChsaWtlIGRpY3RzKS4KCiAgICBBcyBpdCBkb2VzIGEgbGluZWFyIHNlYXJjaCBwZXIgaXRlbSAocmVtb3ZlKSBpdAogICAgaGFzIE8obipuKSBwZXJmb3JtYW5jZS4iIiIKICAgIG1pc3NpbmcgPSBbXQogICAgd2hpbGUgZXhwZWN0ZWQ6CiAgICAgICAgaXRlbSA9IGV4cGVjdGVkLnBvcCgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhY3R1YWwucmVtb3ZlKGl0ZW0pCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIG1pc3NpbmcuYXBwZW5kKGl0ZW0pCgogICAgIyBhbnl0aGluZyBsZWZ0IGluIGFjdHVhbCBpcyB1bmV4cGVjdGVkCiAgICByZXR1cm4gbWlzc2luZywgYWN0dWFsCgpkZWYgdGhyZWVfd2F5X2NtcCh4LCB5KToKICAgICIiIlJldHVybiAtMSBpZiB4IDwgeSwgMCBpZiB4ID09IHkgYW5kIDEgaWYgeCA+IHkiIiIKICAgIHJldHVybiAoeCA+IHkpIC0gKHggPCB5KQoKX01pc21hdGNoID0gbmFtZWR0dXBsZSgnTWlzbWF0Y2gnLCAnYWN0dWFsIGV4cGVjdGVkIHZhbHVlJykKCmRlZiBfY291bnRfZGlmZl9hbGxfcHVycG9zZShhY3R1YWwsIGV4cGVjdGVkKToKICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInCiAgICAjIGVsZW1lbnRzIG5lZWQgbm90IGJlIGhhc2hhYmxlCiAgICBzLCB0ID0gbGlzdChhY3R1YWwpLCBsaXN0KGV4cGVjdGVkKQogICAgbSwgbiA9IGxlbihzKSwgbGVuKHQpCiAgICBOVUxMID0gb2JqZWN0KCkKICAgIHJlc3VsdCA9IFtdCiAgICBmb3IgaSwgZWxlbSBpbiBlbnVtZXJhdGUocyk6CiAgICAgICAgaWYgZWxlbSBpcyBOVUxMOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGNudF9zID0gY250X3QgPSAwCiAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSwgbSk6CiAgICAgICAgICAgIGlmIHNbal0gPT0gZWxlbToKICAgICAgICAgICAgICAgIGNudF9zICs9IDEKICAgICAgICAgICAgICAgIHNbal0gPSBOVUxMCiAgICAgICAgZm9yIGosIG90aGVyX2VsZW0gaW4gZW51bWVyYXRlKHQpOgogICAgICAgICAgICBpZiBvdGhlcl9lbGVtID09IGVsZW06CiAgICAgICAgICAgICAgICBjbnRfdCArPSAxCiAgICAgICAgICAgICAgICB0W2pdID0gTlVMTAogICAgICAgIGlmIGNudF9zICE9IGNudF90OgogICAgICAgICAgICBkaWZmID0gX01pc21hdGNoKGNudF9zLCBjbnRfdCwgZWxlbSkKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQoKICAgIGZvciBpLCBlbGVtIGluIGVudW1lcmF0ZSh0KToKICAgICAgICBpZiBlbGVtIGlzIE5VTEw6CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgY250X3QgPSAwCiAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSwgbik6CiAgICAgICAgICAgIGlmIHRbal0gPT0gZWxlbToKICAgICAgICAgICAgICAgIGNudF90ICs9IDEKICAgICAgICAgICAgICAgIHRbal0gPSBOVUxMCiAgICAgICAgZGlmZiA9IF9NaXNtYXRjaCgwLCBjbnRfdCwgZWxlbSkKICAgICAgICByZXN1bHQuYXBwZW5kKGRpZmYpCiAgICByZXR1cm4gcmVzdWx0CgpkZWYgX29yZGVyZWRfY291bnQoaXRlcmFibGUpOgogICAgJ1JldHVybiBkaWN0IG9mIGVsZW1lbnQgY291bnRzLCBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIGZpcnN0IHNlZW4nCiAgICBjID0gT3JkZXJlZERpY3QoKQogICAgZm9yIGVsZW0gaW4gaXRlcmFibGU6CiAgICAgICAgY1tlbGVtXSA9IGMuZ2V0KGVsZW0sIDApICsgMQogICAgcmV0dXJuIGMKCmRlZiBfY291bnRfZGlmZl9oYXNoYWJsZShhY3R1YWwsIGV4cGVjdGVkKToKICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInCiAgICAjIGVsZW1lbnRzIG11c3QgYmUgaGFzaGFibGUKICAgIHMsIHQgPSBfb3JkZXJlZF9jb3VudChhY3R1YWwpLCBfb3JkZXJlZF9jb3VudChleHBlY3RlZCkKICAgIHJlc3VsdCA9IFtdCiAgICBmb3IgZWxlbSwgY250X3MgaW4gcy5pdGVtcygpOgogICAgICAgIGNudF90ID0gdC5nZXQoZWxlbSwgMCkKICAgICAgICBpZiBjbnRfcyAhPSBjbnRfdDoKICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaChjbnRfcywgY250X3QsIGVsZW0pCiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZGlmZikKICAgIGZvciBlbGVtLCBjbnRfdCBpbiB0Lml0ZW1zKCk6CiAgICAgICAgaWYgZWxlbSBub3QgaW4gczoKICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaCgwLCBjbnRfdCwgZWxlbSkKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQogICAgcmV0dXJuIHJlc3VsdAo=',
'/Lib/unittest/__init__.py':'IiIiClB5dGhvbiB1bml0IHRlc3RpbmcgZnJhbWV3b3JrLCBiYXNlZCBvbiBFcmljaCBHYW1tYSdzIEpVbml0IGFuZCBLZW50IEJlY2sncwpTbWFsbHRhbGsgdGVzdGluZyBmcmFtZXdvcmsuCgpUaGlzIG1vZHVsZSBjb250YWlucyB0aGUgY29yZSBmcmFtZXdvcmsgY2xhc3NlcyB0aGF0IGZvcm0gdGhlIGJhc2lzIG9mCnNwZWNpZmljIHRlc3QgY2FzZXMgYW5kIHN1aXRlcyAoVGVzdENhc2UsIFRlc3RTdWl0ZSBldGMuKSwgYW5kIGFsc28gYQp0ZXh0LWJhc2VkIHV0aWxpdHkgY2xhc3MgZm9yIHJ1bm5pbmcgdGhlIHRlc3RzIGFuZCByZXBvcnRpbmcgdGhlIHJlc3VsdHMKIChUZXh0VGVzdFJ1bm5lcikuCgpTaW1wbGUgdXNhZ2U6CgogICAgaW1wb3J0IHVuaXR0ZXN0CgogICAgY2xhc3MgSW50ZWdlckFyaXRobWVudGljVGVzdENhc2UodW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgIGRlZiB0ZXN0QWRkKHNlbGYpOiAgIyMgdGVzdCBtZXRob2QgbmFtZXMgYmVnaW4gJ3Rlc3QqJwogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCgxICsgMiksIDMpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoMCArIDEsIDEpCiAgICAgICAgZGVmIHRlc3RNdWx0aXBseShzZWxmKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoMCAqIDEwKSwgMCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoNSAqIDgpLCA0MCkKCiAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgICAgIHVuaXR0ZXN0Lm1haW4oKQoKRnVydGhlciBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGJ1bmRsZWQgZG9jdW1lbnRhdGlvbiwgYW5kIGZyb20KCiAgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3VuaXR0ZXN0Lmh0bWwKCkNvcHlyaWdodCAoYykgMTk5OS0yMDAzIFN0ZXZlIFB1cmNlbGwKQ29weXJpZ2h0IChjKSAyMDAzLTIwMTAgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24KVGhpcyBtb2R1bGUgaXMgZnJlZSBzb2Z0d2FyZSwgYW5kIHlvdSBtYXkgcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUHl0aG9uIGl0c2VsZiwgc28gbG9uZyBhcyB0aGlzIGNvcHlyaWdodCBtZXNzYWdlCmFuZCBkaXNjbGFpbWVyIGFyZSByZXRhaW5lZCBpbiB0aGVpciBvcmlnaW5hbCBmb3JtLgoKSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgVE8gQU5ZIFBBUlRZIEZPUiBESVJFQ1QsIElORElSRUNULApTUEVDSUFMLCBJTkNJREVOVEFMLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhFIFVTRSBPRgpUSElTIENPREUsIEVWRU4gSUYgVEhFIEFVVEhPUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNICkRBTUFHRS4KClRIRSBBVVRIT1IgU1BFQ0lGSUNBTExZIERJU0NMQUlNUyBBTlkgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UCkxJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBClBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRIRSBDT0RFIFBST1ZJREVEIEhFUkVVTkRFUiBJUyBPTiBBTiAiQVMgSVMiIEJBU0lTLApBTkQgVEhFUkUgSVMgTk8gT0JMSUdBVElPTiBXSEFUU09FVkVSIFRPIFBST1ZJREUgTUFJTlRFTkFOQ0UsClNVUFBPUlQsIFVQREFURVMsIEVOSEFOQ0VNRU5UUywgT1IgTU9ESUZJQ0FUSU9OUy4KIiIiCgpfX2FsbF9fID0gWydUZXN0UmVzdWx0JywgJ1Rlc3RDYXNlJywgJ1Rlc3RTdWl0ZScsCiAgICAgICAgICAgJ1RleHRUZXN0UnVubmVyJywgJ1Rlc3RMb2FkZXInLCAnRnVuY3Rpb25UZXN0Q2FzZScsICdtYWluJywKICAgICAgICAgICAnZGVmYXVsdFRlc3RMb2FkZXInLCAnU2tpcFRlc3QnLCAnc2tpcCcsICdza2lwSWYnLCAnc2tpcFVubGVzcycsCiAgICAgICAgICAgJ2V4cGVjdGVkRmFpbHVyZScsICdUZXh0VGVzdFJlc3VsdCcsICdpbnN0YWxsSGFuZGxlcicsCiAgICAgICAgICAgJ3JlZ2lzdGVyUmVzdWx0JywgJ3JlbW92ZVJlc3VsdCcsICdyZW1vdmVIYW5kbGVyJ10KCiMgRXhwb3NlIG9ic29sZXRlIGZ1bmN0aW9ucyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKX19hbGxfXy5leHRlbmQoWydnZXRUZXN0Q2FzZU5hbWVzJywgJ21ha2VTdWl0ZScsICdmaW5kVGVzdENhc2VzJ10pCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKZnJvbSAucmVzdWx0IGltcG9ydCBUZXN0UmVzdWx0CmZyb20gLmNhc2UgaW1wb3J0IChUZXN0Q2FzZSwgRnVuY3Rpb25UZXN0Q2FzZSwgU2tpcFRlc3QsIHNraXAsIHNraXBJZiwKICAgICAgICAgICAgICAgICAgIHNraXBVbmxlc3MsIGV4cGVjdGVkRmFpbHVyZSkKZnJvbSAuc3VpdGUgaW1wb3J0IEJhc2VUZXN0U3VpdGUsIFRlc3RTdWl0ZQpmcm9tIC5sb2FkZXIgaW1wb3J0IChUZXN0TG9hZGVyLCBkZWZhdWx0VGVzdExvYWRlciwgbWFrZVN1aXRlLCBnZXRUZXN0Q2FzZU5hbWVzLAogICAgICAgICAgICAgICAgICAgICBmaW5kVGVzdENhc2VzKQpmcm9tIC5tYWluIGltcG9ydCBUZXN0UHJvZ3JhbSwgbWFpbgpmcm9tIC5ydW5uZXIgaW1wb3J0IFRleHRUZXN0UnVubmVyLCBUZXh0VGVzdFJlc3VsdApmcm9tIC5zaWduYWxzIGltcG9ydCBpbnN0YWxsSGFuZGxlciwgcmVnaXN0ZXJSZXN1bHQsIHJlbW92ZVJlc3VsdCwgcmVtb3ZlSGFuZGxlcgoKIyBkZXByZWNhdGVkCl9UZXh0VGVzdFJlc3VsdCA9IFRleHRUZXN0UmVzdWx0Cg==',
'/Lib/unittest/__main__.py':'IiIiTWFpbiBlbnRyeSBwb2ludCIiIgoKaW1wb3J0IHN5cwppZiBzeXMuYXJndlswXS5lbmRzd2l0aCgiX19tYWluX18ucHkiKToKICAgIHN5cy5hcmd2WzBdID0gInB5dGhvbiAtbSB1bml0dGVzdCIKCl9fdW5pdHRlc3QgPSBUcnVlCgpmcm9tIC5tYWluIGltcG9ydCBtYWluLCBUZXN0UHJvZ3JhbSwgVVNBR0VfQVNfTUFJTgpUZXN0UHJvZ3JhbS5VU0FHRSA9IFVTQUdFX0FTX01BSU4KCm1haW4obW9kdWxlPU5vbmUpCg==',
'/Lib/unittest/test/dummy.py':'IyBFbXB0eSBtb2R1bGUgZm9yIHRlc3RpbmcgdGhlIGxvYWRpbmcgb2YgbW9kdWxlcwo=',
'/Lib/unittest/test/support.py':'aW1wb3J0IHVuaXR0ZXN0CgoKY2xhc3MgVGVzdEVxdWFsaXR5KG9iamVjdCk6CiAgICAiIiJVc2VkIGFzIGEgbWl4aW4gZm9yIFRlc3RDYXNlIiIiCgogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2VxX18gaW1wbGVtZW50YXRpb24KICAgIGRlZiB0ZXN0X2VxKHNlbGYpOgogICAgICAgIGZvciBvYmpfMSwgb2JqXzIgaW4gc2VsZi5lcV9wYWlyczoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChvYmpfMSwgb2JqXzIpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwob2JqXzIsIG9ial8xKQoKICAgICMgQ2hlY2sgZm9yIGEgdmFsaWQgX19uZV9fIGltcGxlbWVudGF0aW9uCiAgICBkZWYgdGVzdF9uZShzZWxmKToKICAgICAgICBmb3Igb2JqXzEsIG9ial8yIGluIHNlbGYubmVfcGFpcnM6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwob2JqXzEsIG9ial8yKQogICAgICAgICAgICBzZWxmLmFzc2VydE5vdEVxdWFsKG9ial8yLCBvYmpfMSkKCmNsYXNzIFRlc3RIYXNoaW5nKG9iamVjdCk6CiAgICAiIiJVc2VkIGFzIGEgbWl4aW4gZm9yIFRlc3RDYXNlIiIiCgogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2hhc2hfXyBpbXBsZW1lbnRhdGlvbgogICAgZGVmIHRlc3RfaGFzaChzZWxmKToKICAgICAgICBmb3Igb2JqXzEsIG9ial8yIGluIHNlbGYuZXFfcGFpcnM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIG5vdCBoYXNoKG9ial8xKSA9PSBoYXNoKG9ial8yKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIiVyIGFuZCAlciBkbyBub3QgaGFzaCBlcXVhbCIgJSAob2JqXzEsIG9ial8yKSkKICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsKCJQcm9ibGVtIGhhc2hpbmcgJXIgYW5kICVyOiAlcyIgJSAob2JqXzEsIG9ial8yLCBlKSkKCiAgICAgICAgZm9yIG9ial8xLCBvYmpfMiBpbiBzZWxmLm5lX3BhaXJzOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBoYXNoKG9ial8xKSA9PSBoYXNoKG9ial8yKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIiVzIGFuZCAlcyBoYXNoIGVxdWFsLCBidXQgc2hvdWxkbid0IiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvYmpfMSwgb2JqXzIpKQogICAgICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIlByb2JsZW0gaGFzaGluZyAlcyBhbmQgJXM6ICVzIiAlIChvYmpfMSwgb2JqXzIsIGUpKQoKCmNsYXNzIExvZ2dpbmdSZXN1bHQodW5pdHRlc3QuVGVzdFJlc3VsdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgbG9nKToKICAgICAgICBzZWxmLl9ldmVudHMgPSBsb2cKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICBkZWYgc3RhcnRUZXN0KHNlbGYsIHRlc3QpOgogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ3N0YXJ0VGVzdCcpCiAgICAgICAgc3VwZXIoKS5zdGFydFRlc3QodGVzdCkKCiAgICBkZWYgc3RhcnRUZXN0UnVuKHNlbGYpOgogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ3N0YXJ0VGVzdFJ1bicpCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuc3RhcnRUZXN0UnVuKCkKCiAgICBkZWYgc3RvcFRlc3Qoc2VsZiwgdGVzdCk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RvcFRlc3QnKQogICAgICAgIHN1cGVyKCkuc3RvcFRlc3QodGVzdCkKCiAgICBkZWYgc3RvcFRlc3RSdW4oc2VsZik6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RvcFRlc3RSdW4nKQogICAgICAgIHN1cGVyKExvZ2dpbmdSZXN1bHQsIHNlbGYpLnN0b3BUZXN0UnVuKCkKCiAgICBkZWYgYWRkRmFpbHVyZShzZWxmLCAqYXJncyk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRmFpbHVyZScpCiAgICAgICAgc3VwZXIoKS5hZGRGYWlsdXJlKCphcmdzKQoKICAgIGRlZiBhZGRTdWNjZXNzKHNlbGYsICphcmdzKToKICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRTdWNjZXNzJykKICAgICAgICBzdXBlcihMb2dnaW5nUmVzdWx0LCBzZWxmKS5hZGRTdWNjZXNzKCphcmdzKQoKICAgIGRlZiBhZGRFcnJvcihzZWxmLCAqYXJncyk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRXJyb3InKQogICAgICAgIHN1cGVyKCkuYWRkRXJyb3IoKmFyZ3MpCgogICAgZGVmIGFkZFNraXAoc2VsZiwgKmFyZ3MpOgogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ2FkZFNraXAnKQogICAgICAgIHN1cGVyKExvZ2dpbmdSZXN1bHQsIHNlbGYpLmFkZFNraXAoKmFyZ3MpCgogICAgZGVmIGFkZEV4cGVjdGVkRmFpbHVyZShzZWxmLCAqYXJncyk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRXhwZWN0ZWRGYWlsdXJlJykKICAgICAgICBzdXBlcihMb2dnaW5nUmVzdWx0LCBzZWxmKS5hZGRFeHBlY3RlZEZhaWx1cmUoKmFyZ3MpCgogICAgZGVmIGFkZFVuZXhwZWN0ZWRTdWNjZXNzKHNlbGYsICphcmdzKToKICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRVbmV4cGVjdGVkU3VjY2VzcycpCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuYWRkVW5leHBlY3RlZFN1Y2Nlc3MoKmFyZ3MpCgoKY2xhc3MgUmVzdWx0V2l0aE5vU3RhcnRUZXN0UnVuU3RvcFRlc3RSdW4ob2JqZWN0KToKICAgICIiIkFuIG9iamVjdCBob25vdXJpbmcgVGVzdFJlc3VsdCBiZWZvcmUgc3RhcnRUZXN0UnVuL3N0b3BUZXN0UnVuLiIiIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmZhaWx1cmVzID0gW10KICAgICAgICBzZWxmLmVycm9ycyA9IFtdCiAgICAgICAgc2VsZi50ZXN0c1J1biA9IDAKICAgICAgICBzZWxmLnNraXBwZWQgPSBbXQogICAgICAgIHNlbGYuZXhwZWN0ZWRGYWlsdXJlcyA9IFtdCiAgICAgICAgc2VsZi51bmV4cGVjdGVkU3VjY2Vzc2VzID0gW10KICAgICAgICBzZWxmLnNob3VsZFN0b3AgPSBGYWxzZQoKICAgIGRlZiBzdGFydFRlc3Qoc2VsZiwgdGVzdCk6CiAgICAgICAgcGFzcwoKICAgIGRlZiBzdG9wVGVzdChzZWxmLCB0ZXN0KToKICAgICAgICBwYXNzCgogICAgZGVmIGFkZEVycm9yKHNlbGYsIHRlc3QpOgogICAgICAgIHBhc3MKCiAgICBkZWYgYWRkRmFpbHVyZShzZWxmLCB0ZXN0KToKICAgICAgICBwYXNzCgogICAgZGVmIGFkZFN1Y2Nlc3Moc2VsZiwgdGVzdCk6CiAgICAgICAgcGFzcwoKICAgIGRlZiB3YXNTdWNjZXNzZnVsKHNlbGYpOgogICAgICAgIHJldHVybiBUcnVlCg==',
'/Lib/unittest/test/test_assertions.py':'',
'/Lib/unittest/test/test_break.py':'',
'/Lib/unittest/test/test_case.py':'',
'/Lib/unittest/test/test_discovery.py':'aW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc3lzCgppbXBvcnQgdW5pdHRlc3QKCgpjbGFzcyBUZXN0YWJsZVRlc3RQcm9ncmFtKHVuaXR0ZXN0LlRlc3RQcm9ncmFtKToKICAgIG1vZHVsZSA9ICdfX21haW5fXycKICAgIGV4aXQgPSBUcnVlCiAgICBkZWZhdWx0VGVzdCA9IGZhaWxmYXN0ID0gY2F0Y2hicmVhayA9IGJ1ZmZlciA9IE5vbmUKICAgIHZlcmJvc2l0eSA9IDEKICAgIHByb2dOYW1lID0gJycKICAgIHRlc3RSdW5uZXIgPSB0ZXN0TG9hZGVyID0gTm9uZQoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBwYXNzCgoKY2xhc3MgVGVzdERpc2NvdmVyeSh1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgIyBIZWF2aWx5IG1vY2tlZCB0ZXN0cyBzbyBJIGNhbiBhdm9pZCBoaXR0aW5nIHRoZSBmaWxlc3lzdGVtCiAgICBkZWYgdGVzdF9nZXRfbmFtZV9mcm9tX3BhdGgoc2VsZik6CiAgICAgICAgbG9hZGVyID0gdW5pdHRlc3QuVGVzdExvYWRlcigpCiAgICAgICAgbG9hZGVyLl90b3BfbGV2ZWxfZGlyID0gJy9mb28nCiAgICAgICAgbmFtZSA9IGxvYWRlci5fZ2V0X25hbWVfZnJvbV9wYXRoKCcvZm9vL2Jhci9iYXoucHknKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobmFtZSwgJ2Jhci5iYXonKQoKICAgICAgICBpZiBub3QgX19kZWJ1Z19fOgogICAgICAgICAgICAjIGFzc2VydHMgYXJlIG9mZgogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgd2l0aCBzZWxmLmFzc2VydFJhaXNlcyhBc3NlcnRpb25FcnJvcik6CiAgICAgICAgICAgIGxvYWRlci5fZ2V0X25hbWVfZnJvbV9wYXRoKCcvYmFyL2Jhei5weScpCgogICAgZGVmIHRlc3RfZmluZF90ZXN0cyhzZWxmKToKICAgICAgICBsb2FkZXIgPSB1bml0dGVzdC5UZXN0TG9hZGVyKCkKCiAgICAgICAgb3JpZ2luYWxfbGlzdGRpciA9IG9zLmxpc3RkaXIKICAgICAgICBkZWYgcmVzdG9yZV9saXN0ZGlyKCk6CiAgICAgICAgICAgIG9zLmxpc3RkaXIgPSBvcmlnaW5hbF9saXN0ZGlyCiAgICAgICAgb3JpZ2luYWxfaXNmaWxlID0gb3MucGF0aC5pc2ZpbGUKICAgICAgICBkZWYgcmVzdG9yZV9pc2ZpbGUoKToKICAgICAgICAgICAgb3MucGF0aC5pc2ZpbGUgPSBvcmlnaW5hbF9pc2ZpbGUKICAgICAgICBvcmlnaW5hbF9pc2RpciA9IG9zLnBhdGguaXNkaXIKICAgICAgICBkZWYgcmVzdG9yZV9pc2RpcigpOgogICAgICAgICAgICBvcy5wYXRoLmlzZGlyID0gb3JpZ2luYWxfaXNkaXIKCiAgICAgICAgcGF0aF9saXN0cyA9IFtbJ3Rlc3QxLnB5JywgJ3Rlc3QyLnB5JywgJ25vdF9hX3Rlc3QucHknLCAndGVzdF9kaXInLAogICAgICAgICAgICAgICAgICAgICAgICd0ZXN0LmZvbycsICd0ZXN0LW5vdC1hLW1vZHVsZS5weScsICdhbm90aGVyX2RpciddLAogICAgICAgICAgICAgICAgICAgICAgWyd0ZXN0My5weScsICd0ZXN0NC5weScsIF1dCiAgICAgICAgb3MubGlzdGRpciA9IGxhbWJkYSBwYXRoOiBwYXRoX2xpc3RzLnBvcCgwKQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChyZXN0b3JlX2xpc3RkaXIpCgogICAgICAgIGRlZiBpc2RpcihwYXRoKToKICAgICAgICAgICAgcmV0dXJuIHBhdGguZW5kc3dpdGgoJ2RpcicpCiAgICAgICAgb3MucGF0aC5pc2RpciA9IGlzZGlyCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHJlc3RvcmVfaXNkaXIpCgogICAgICAgIGRlZiBpc2ZpbGUocGF0aCk6CiAgICAgICAgICAgICMgYW5vdGhlcl9kaXIgaXMgbm90IGEgcGFja2FnZSBhbmQgc28gc2hvdWxkbid0IGJlIHJlY3Vyc2VkIGludG8KICAgICAgICAgICAgcmV0dXJuIG5vdCBwYXRoLmVuZHN3aXRoKCdkaXInKSBhbmQgbm90ICdhbm90aGVyX2RpcicgaW4gcGF0aAogICAgICAgIG9zLnBhdGguaXNmaWxlID0gaXNmaWxlCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHJlc3RvcmVfaXNmaWxlKQoKICAgICAgICBsb2FkZXIuX2dldF9tb2R1bGVfZnJvbV9uYW1lID0gbGFtYmRhIHBhdGg6IHBhdGggKyAnIG1vZHVsZScKICAgICAgICBsb2FkZXIubG9hZFRlc3RzRnJvbU1vZHVsZSA9IGxhbWJkYSBtb2R1bGU6IG1vZHVsZSArICcgdGVzdHMnCgogICAgICAgIHRvcF9sZXZlbCA9IG9zLnBhdGguYWJzcGF0aCgnL2ZvbycpCiAgICAgICAgbG9hZGVyLl90b3BfbGV2ZWxfZGlyID0gdG9wX2xldmVsCiAgICAgICAgc3VpdGUgPSBsaXN0KGxvYWRlci5fZmluZF90ZXN0cyh0b3BfbGV2ZWwsICd0ZXN0Ki5weScpKQoKICAgICAgICBleHBlY3RlZCA9IFtuYW1lICsgJyBtb2R1bGUgdGVzdHMnIGZvciBuYW1lIGluCiAgICAgICAgICAgICAgICAgICAgKCd0ZXN0MScsICd0ZXN0MicpXQogICAgICAgIGV4cGVjdGVkLmV4dGVuZChbKCd0ZXN0X2Rpci4lcycgJSBuYW1lKSArICcgbW9kdWxlIHRlc3RzJyBmb3IgbmFtZSBpbgogICAgICAgICAgICAgICAgICAgICgndGVzdDMnLCAndGVzdDQnKV0pCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdWl0ZSwgZXhwZWN0ZWQpCgogICAgZGVmIHRlc3RfZmluZF90ZXN0c193aXRoX3BhY2thZ2Uoc2VsZik6CiAgICAgICAgbG9hZGVyID0gdW5pdHRlc3QuVGVzdExvYWRlcigpCgogICAgICAgIG9yaWdpbmFsX2xpc3RkaXIgPSBvcy5saXN0ZGlyCiAgICAgICAgZGVmIHJlc3RvcmVfbGlzdGRpcigpOgogICAgICAgICAgICBvcy5saXN0ZGlyID0gb3JpZ2luYWxfbGlzdGRpcgogICAgICAgIG9yaWdpbmFsX2lzZmlsZSA9IG9zLnBhdGguaXNmaWxlCiAgICAgICAgZGVmIHJlc3RvcmVfaXNmaWxlKCk6CiAgICAgICAgICAgIG9zLnBhdGguaXNmaWxlID0gb3JpZ2luYWxfaXNmaWxlCiAgICAgICAgb3JpZ2luYWxfaXNkaXIgPSBvcy5wYXRoLmlzZGlyCiAgICAgICAgZGVmIHJlc3RvcmVfaXNkaXIoKToKICAgICAgICAgICAgb3MucGF0aC5pc2RpciA9IG9yaWdpbmFsX2lzZGlyCgogICAgICAgIGRpcmVjdG9yaWVzID0gWydhX2RpcmVjdG9yeScsICd0ZXN0X2RpcmVjdG9yeScsICd0ZXN0X2RpcmVjdG9yeTInXQogICAgICAgIHBhdGhfbGlzdHMgPSBbZGlyZWN0b3JpZXMsIFtdLCBbXSwgW11dCiAgICAgICAgb3MubGlzdGRpciA9IGxhbWJkYSBwYXRoOiBwYXRoX2xpc3RzLnBvcCgwKQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChyZXN0b3JlX2xpc3RkaXIpCgogICAgICAgIG9zLnBhdGguaXNkaXIgPSBsYW1iZGEgcGF0aDogVHJ1ZQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChyZXN0b3JlX2lzZGlyKQoKICAgICAgICBvcy5wYXRoLmlzZmlsZSA9IGxhbWJkYSBwYXRoOiBvcy5wYXRoLmJhc2VuYW1lKHBhdGgpIG5vdCBpbiBkaXJlY3RvcmllcwogICAgICAgIHNlbGYuYWRkQ2xlYW51cChyZXN0b3JlX2lzZmlsZSkKCiAgICAgICAgY2xhc3MgTW9kdWxlKG9iamVjdCk6CiAgICAgICAgICAgIHBhdGhzID0gW10KICAgICAgICAgICAgbG9hZF90ZXN0c19hcmdzID0gW10KCiAgICAgICAgICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXRoKToKICAgICAgICAgICAgICAgIHNlbGYucGF0aCA9IHBhdGgKICAgICAgICAgICAgICAgIHNlbGYucGF0aHMuYXBwZW5kKHBhdGgpCiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmJhc2VuYW1lKHBhdGgpID09ICd0ZXN0X2RpcmVjdG9yeSc6CiAgICAgICAgICAgICAgICAgICAgZGVmIGxvYWRfdGVzdHMobG9hZGVyLCB0ZXN0cywgcGF0dGVybik6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZF90ZXN0c19hcmdzLmFwcGVuZCgobG9hZGVyLCB0ZXN0cywgcGF0dGVybikpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnbG9hZF90ZXN0cycKICAgICAgICAgICAgICAgICAgICBzZWxmLmxvYWRfdGVzdHMgPSBsb2FkX3Rlc3RzCgogICAgICAgICAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLnBhdGggPT0gb3RoZXIucGF0aAoKICAgICAgICBsb2FkZXIuX2dldF9tb2R1bGVfZnJvbV9uYW1lID0gbGFtYmRhIG5hbWU6IE1vZHVsZShuYW1lKQogICAgICAgIGRlZiBsb2FkVGVzdHNGcm9tTW9kdWxlKG1vZHVsZSwgdXNlX2xvYWRfdGVzdHMpOgogICAgICAgICAgICBpZiB1c2VfbG9hZF90ZXN0czoKICAgICAgICAgICAgICAgIHJhaXNlIHNlbGYuZmFpbHVyZUV4Y2VwdGlvbigndXNlX2xvYWRfdGVzdHMgc2hvdWxkIGJlIEZhbHNlIGZvciBwYWNrYWdlcycpCiAgICAgICAgICAgIHJldHVybiBtb2R1bGUucGF0aCArICcgbW9kdWxlIHRlc3RzJwogICAgICAgIGxvYWRlci5sb2FkVGVzdHNGcm9tTW9kdWxlID0gbG9hZFRlc3RzRnJvbU1vZHVsZQoKICAgICAgICBsb2FkZXIuX3RvcF9sZXZlbF9kaXIgPSAnL2ZvbycKICAgICAgICAjIHRoaXMgdGltZSBubyAnLnB5JyBvbiB0aGUgcGF0dGVybiBzbyB0aGF0IGl0IGNhbiBtYXRjaAogICAgICAgICMgYSB0ZXN0IHBhY2thZ2UKICAgICAgICBzdWl0ZSA9IGxpc3QobG9hZGVyLl9maW5kX3Rlc3RzKCcvZm9vJywgJ3Rlc3QqJykpCgogICAgICAgICMgV2Ugc2hvdWxkIGhhdmUgbG9hZGVkIHRlc3RzIGZyb20gdGhlIHRlc3RfZGlyZWN0b3J5IHBhY2thZ2UgYnkgY2FsbGluZyBsb2FkX3Rlc3RzCiAgICAgICAgIyBhbmQgZGlyZWN0bHkgZnJvbSB0aGUgdGVzdF9kaXJlY3RvcnkyIHBhY2thZ2UKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN1aXRlLAogICAgICAgICAgICAgICAgICAgICAgICAgWydsb2FkX3Rlc3RzJywgJ3Rlc3RfZGlyZWN0b3J5MicgKyAnIG1vZHVsZSB0ZXN0cyddKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoTW9kdWxlLnBhdGhzLCBbJ3Rlc3RfZGlyZWN0b3J5JywgJ3Rlc3RfZGlyZWN0b3J5MiddKQoKICAgICAgICAjIGxvYWRfdGVzdHMgc2hvdWxkIGhhdmUgYmVlbiBjYWxsZWQgb25jZSB3aXRoIGxvYWRlciwgdGVzdHMgYW5kIHBhdHRlcm4KICAgICAgICBzZWxmLmFzc2VydEVxdWFsKE1vZHVsZS5sb2FkX3Rlc3RzX2FyZ3MsCiAgICAgICAgICAgICAgICAgICAgICAgICBbKGxvYWRlciwgJ3Rlc3RfZGlyZWN0b3J5JyArICcgbW9kdWxlIHRlc3RzJywgJ3Rlc3QqJyldKQoKICAgIGRlZiB0ZXN0X2Rpc2NvdmVyKHNlbGYpOgogICAgICAgIGxvYWRlciA9IHVuaXR0ZXN0LlRlc3RMb2FkZXIoKQoKICAgICAgICBvcmlnaW5hbF9pc2ZpbGUgPSBvcy5wYXRoLmlzZmlsZQogICAgICAgIG9yaWdpbmFsX2lzZGlyID0gb3MucGF0aC5pc2RpcgogICAgICAgIGRlZiByZXN0b3JlX2lzZmlsZSgpOgogICAgICAgICAgICBvcy5wYXRoLmlzZmlsZSA9IG9yaWdpbmFsX2lzZmlsZQoKICAgICAgICBvcy5wYXRoLmlzZmlsZSA9IGxhbWJkYSBwYXRoOiBGYWxzZQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChyZXN0b3JlX2lzZmlsZSkKCiAgICAgICAgb3JpZ19zeXNfcGF0aCA9IHN5cy5wYXRoWzpdCiAgICAgICAgZGVmIHJlc3RvcmVfcGF0aCgpOgogICAgICAgICAgICBzeXMucGF0aFs6XSA9IG9yaWdfc3lzX3BhdGgKICAgICAgICBzZWxmLmFkZENsZWFudXAocmVzdG9yZV9wYXRoKQoKICAgICAgICBmdWxsX3BhdGggPSBvcy5wYXRoLmFic3BhdGgob3MucGF0aC5ub3JtcGF0aCgnL2ZvbycpKQogICAgICAgIHdpdGggc2VsZi5hc3NlcnRSYWlzZXMoSW1wb3J0RXJyb3IpOgogICAgICAgICAgICBsb2FkZXIuZGlzY292ZXIoJy9mb28vYmFyJywgdG9wX2xldmVsX2Rpcj0nL2ZvbycpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobG9hZGVyLl90b3BfbGV2ZWxfZGlyLCBmdWxsX3BhdGgpCiAgICAgICAgc2VsZi5hc3NlcnRJbihmdWxsX3BhdGgsIHN5cy5wYXRoKQoKICAgICAgICBvcy5wYXRoLmlzZmlsZSA9IGxhbWJkYSBwYXRoOiBUcnVlCiAgICAgICAgb3MucGF0aC5pc2RpciA9IGxhbWJkYSBwYXRoOiBUcnVlCgogICAgICAgIGRlZiByZXN0b3JlX2lzZGlyKCk6CiAgICAgICAgICAgIG9zLnBhdGguaXNkaXIgPSBvcmlnaW5hbF9pc2RpcgogICAgICAgIHNlbGYuYWRkQ2xlYW51cChyZXN0b3JlX2lzZGlyKQoKICAgICAgICBfZmluZF90ZXN0c19hcmdzID0gW10KICAgICAgICBkZWYgX2ZpbmRfdGVzdHMoc3RhcnRfZGlyLCBwYXR0ZXJuKToKICAgICAgICAgICAgX2ZpbmRfdGVzdHNfYXJncy5hcHBlbmQoKHN0YXJ0X2RpciwgcGF0dGVybikpCiAgICAgICAgICAgIHJldHVybiBbJ3Rlc3RzJ10KICAgICAgICBsb2FkZXIuX2ZpbmRfdGVzdHMgPSBfZmluZF90ZXN0cwogICAgICAgIGxvYWRlci5zdWl0ZUNsYXNzID0gc3RyCgogICAgICAgIHN1aXRlID0gbG9hZGVyLmRpc2NvdmVyKCcvZm9vL2Jhci9iYXonLCAncGF0dGVybicsICcvZm9vL2JhcicpCgogICAgICAgIHRvcF9sZXZlbF9kaXIgPSBvcy5wYXRoLmFic3BhdGgoJy9mb28vYmFyJykKICAgICAgICBzdGFydF9kaXIgPSBvcy5wYXRoLmFic3BhdGgoJy9mb28vYmFyL2JheicpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdWl0ZSwgIlsndGVzdHMnXSIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChsb2FkZXIuX3RvcF9sZXZlbF9kaXIsIHRvcF9sZXZlbF9kaXIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChfZmluZF90ZXN0c19hcmdzLCBbKHN0YXJ0X2RpciwgJ3BhdHRlcm4nKV0pCiAgICAgICAgc2VsZi5hc3NlcnRJbih0b3BfbGV2ZWxfZGlyLCBzeXMucGF0aCkKCiAgICBkZWYgdGVzdF9kaXNjb3Zlcl93aXRoX21vZHVsZXNfdGhhdF9mYWlsX3RvX2ltcG9ydChzZWxmKToKICAgICAgICBsb2FkZXIgPSB1bml0dGVzdC5UZXN0TG9hZGVyKCkKCiAgICAgICAgbGlzdGRpciA9IG9zLmxpc3RkaXIKICAgICAgICBvcy5saXN0ZGlyID0gbGFtYmRhIF86IFsndGVzdF90aGlzX2RvZXNfbm90X2V4aXN0LnB5J10KICAgICAgICBpc2ZpbGUgPSBvcy5wYXRoLmlzZmlsZQogICAgICAgIG9zLnBhdGguaXNmaWxlID0gbGFtYmRhIF86IFRydWUKICAgICAgICBvcmlnX3N5c19wYXRoID0gc3lzLnBhdGhbOl0KICAgICAgICBkZWYgcmVzdG9yZSgpOgogICAgICAgICAgICBvcy5wYXRoLmlzZmlsZSA9IGlzZmlsZQogICAgICAgICAgICBvcy5saXN0ZGlyID0gbGlzdGRpcgogICAgICAgICAgICBzeXMucGF0aFs6XSA9IG9yaWdfc3lzX3BhdGgKICAgICAgICBzZWxmLmFkZENsZWFudXAocmVzdG9yZSkKCiAgICAgICAgc3VpdGUgPSBsb2FkZXIuZGlzY292ZXIoJy4nKQogICAgICAgIHNlbGYuYXNzZXJ0SW4ob3MuZ2V0Y3dkKCksIHN5cy5wYXRoKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc3VpdGUuY291bnRUZXN0Q2FzZXMoKSwgMSkKICAgICAgICB0ZXN0ID0gbGlzdChsaXN0KHN1aXRlKVswXSlbMF0gIyBleHRyYWN0IHRlc3QgZnJvbSBzdWl0ZQoKICAgICAgICB3aXRoIHNlbGYuYXNzZXJ0UmFpc2VzKEltcG9ydEVycm9yKToKICAgICAgICAgICAgdGVzdC50ZXN0X3RoaXNfZG9lc19ub3RfZXhpc3QoKQoKICAgIGRlZiB0ZXN0X2NvbW1hbmRfbGluZV9oYW5kbGluZ19wYXJzZUFyZ3Moc2VsZik6CiAgICAgICAgcHJvZ3JhbSA9IFRlc3RhYmxlVGVzdFByb2dyYW0oKQoKICAgICAgICBhcmdzID0gW10KICAgICAgICBkZWYgZG9fZGlzY292ZXJ5KGFyZ3YpOgogICAgICAgICAgICBhcmdzLmV4dGVuZChhcmd2KQogICAgICAgIHByb2dyYW0uX2RvX2Rpc2NvdmVyeSA9IGRvX2Rpc2NvdmVyeQogICAgICAgIHByb2dyYW0ucGFyc2VBcmdzKFsnc29tZXRoaW5nJywgJ2Rpc2NvdmVyJ10pCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChhcmdzLCBbXSkKCiAgICAgICAgcHJvZ3JhbS5wYXJzZUFyZ3MoWydzb21ldGhpbmcnLCAnZGlzY292ZXInLCAnZm9vJywgJ2JhciddKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoYXJncywgWydmb28nLCAnYmFyJ10pCgogICAgZGVmIHRlc3RfY29tbWFuZF9saW5lX2hhbmRsaW5nX2Rpc2NvdmVyX2J5X2RlZmF1bHQoc2VsZik6CiAgICAgICAgcHJvZ3JhbSA9IFRlc3RhYmxlVGVzdFByb2dyYW0oKQogICAgICAgIHByb2dyYW0ubW9kdWxlID0gTm9uZQoKICAgICAgICBzZWxmLmNhbGxlZCA9IEZhbHNlCiAgICAgICAgZGVmIGRvX2Rpc2NvdmVyeShhcmd2KToKICAgICAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoYXJndiwgW10pCiAgICAgICAgcHJvZ3JhbS5fZG9fZGlzY292ZXJ5ID0gZG9fZGlzY292ZXJ5CiAgICAgICAgcHJvZ3JhbS5wYXJzZUFyZ3MoWydzb21ldGhpbmcnXSkKICAgICAgICBzZWxmLmFzc2VydFRydWUoc2VsZi5jYWxsZWQpCgogICAgZGVmIHRlc3RfY29tbWFuZF9saW5lX2hhbmRsaW5nX2Rpc2NvdmVyX2J5X2RlZmF1bHRfd2l0aF9vcHRpb25zKHNlbGYpOgogICAgICAgIHByb2dyYW0gPSBUZXN0YWJsZVRlc3RQcm9ncmFtKCkKICAgICAgICBwcm9ncmFtLm1vZHVsZSA9IE5vbmUKCiAgICAgICAgYXJncyA9IFsnc29tZXRoaW5nJywgJy12JywgJy1iJywgJy12JywgJy1jJywgJy1mJ10KICAgICAgICBzZWxmLmNhbGxlZCA9IEZhbHNlCiAgICAgICAgZGVmIGRvX2Rpc2NvdmVyeShhcmd2KToKICAgICAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoYXJndiwgYXJnc1sxOl0pCiAgICAgICAgcHJvZ3JhbS5fZG9fZGlzY292ZXJ5ID0gZG9fZGlzY292ZXJ5CiAgICAgICAgcHJvZ3JhbS5wYXJzZUFyZ3MoYXJncykKICAgICAgICBzZWxmLmFzc2VydFRydWUoc2VsZi5jYWxsZWQpCgoKICAgIGRlZiB0ZXN0X2NvbW1hbmRfbGluZV9oYW5kbGluZ19kb19kaXNjb3ZlcnlfdG9vX21hbnlfYXJndW1lbnRzKHNlbGYpOgogICAgICAgIGNsYXNzIFN0b3AoRXhjZXB0aW9uKToKICAgICAgICAgICAgcGFzcwogICAgICAgIGRlZiB1c2FnZUV4aXQoKToKICAgICAgICAgICAgcmFpc2UgU3RvcAoKICAgICAgICBwcm9ncmFtID0gVGVzdGFibGVUZXN0UHJvZ3JhbSgpCiAgICAgICAgcHJvZ3JhbS51c2FnZUV4aXQgPSB1c2FnZUV4aXQKCiAgICAgICAgd2l0aCBzZWxmLmFzc2VydFJhaXNlcyhTdG9wKToKICAgICAgICAgICAgIyB0b28gbWFueSBhcmdzCiAgICAgICAgICAgIHByb2dyYW0uX2RvX2Rpc2NvdmVyeShbJ29uZScsICd0d28nLCAndGhyZWUnLCAnZm91ciddKQoKCiAgICBkZWYgdGVzdF9jb21tYW5kX2xpbmVfaGFuZGxpbmdfZG9fZGlzY292ZXJ5X2NhbGxzX2xvYWRlcihzZWxmKToKICAgICAgICBwcm9ncmFtID0gVGVzdGFibGVUZXN0UHJvZ3JhbSgpCgogICAgICAgIGNsYXNzIExvYWRlcihvYmplY3QpOgogICAgICAgICAgICBhcmdzID0gW10KICAgICAgICAgICAgZGVmIGRpc2NvdmVyKHNlbGYsIHN0YXJ0X2RpciwgcGF0dGVybiwgdG9wX2xldmVsX2Rpcik6CiAgICAgICAgICAgICAgICBzZWxmLmFyZ3MuYXBwZW5kKChzdGFydF9kaXIsIHBhdHRlcm4sIHRvcF9sZXZlbF9kaXIpKQogICAgICAgICAgICAgICAgcmV0dXJuICd0ZXN0cycKCiAgICAgICAgcHJvZ3JhbS5fZG9fZGlzY292ZXJ5KFsnLXYnXSwgTG9hZGVyPUxvYWRlcikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHByb2dyYW0udmVyYm9zaXR5LCAyKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocHJvZ3JhbS50ZXN0LCAndGVzdHMnKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoTG9hZGVyLmFyZ3MsIFsoJy4nLCAndGVzdCoucHknLCBOb25lKV0pCgogICAgICAgIExvYWRlci5hcmdzID0gW10KICAgICAgICBwcm9ncmFtID0gVGVzdGFibGVUZXN0UHJvZ3JhbSgpCiAgICAgICAgcHJvZ3JhbS5fZG9fZGlzY292ZXJ5KFsnLS12ZXJib3NlJ10sIExvYWRlcj1Mb2FkZXIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwcm9ncmFtLnRlc3QsICd0ZXN0cycpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChMb2FkZXIuYXJncywgWygnLicsICd0ZXN0Ki5weScsIE5vbmUpXSkKCiAgICAgICAgTG9hZGVyLmFyZ3MgPSBbXQogICAgICAgIHByb2dyYW0gPSBUZXN0YWJsZVRlc3RQcm9ncmFtKCkKICAgICAgICBwcm9ncmFtLl9kb19kaXNjb3ZlcnkoW10sIExvYWRlcj1Mb2FkZXIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwcm9ncmFtLnRlc3QsICd0ZXN0cycpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChMb2FkZXIuYXJncywgWygnLicsICd0ZXN0Ki5weScsIE5vbmUpXSkKCiAgICAgICAgTG9hZGVyLmFyZ3MgPSBbXQogICAgICAgIHByb2dyYW0gPSBUZXN0YWJsZVRlc3RQcm9ncmFtKCkKICAgICAgICBwcm9ncmFtLl9kb19kaXNjb3ZlcnkoWydmaXNoJ10sIExvYWRlcj1Mb2FkZXIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwcm9ncmFtLnRlc3QsICd0ZXN0cycpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChMb2FkZXIuYXJncywgWygnZmlzaCcsICd0ZXN0Ki5weScsIE5vbmUpXSkKCiAgICAgICAgTG9hZGVyLmFyZ3MgPSBbXQogICAgICAgIHByb2dyYW0gPSBUZXN0YWJsZVRlc3RQcm9ncmFtKCkKICAgICAgICBwcm9ncmFtLl9kb19kaXNjb3ZlcnkoWydmaXNoJywgJ2VnZ3MnXSwgTG9hZGVyPUxvYWRlcikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHByb2dyYW0udGVzdCwgJ3Rlc3RzJykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKExvYWRlci5hcmdzLCBbKCdmaXNoJywgJ2VnZ3MnLCBOb25lKV0pCgogICAgICAgIExvYWRlci5hcmdzID0gW10KICAgICAgICBwcm9ncmFtID0gVGVzdGFibGVUZXN0UHJvZ3JhbSgpCiAgICAgICAgcHJvZ3JhbS5fZG9fZGlzY292ZXJ5KFsnZmlzaCcsICdlZ2dzJywgJ2hhbSddLCBMb2FkZXI9TG9hZGVyKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocHJvZ3JhbS50ZXN0LCAndGVzdHMnKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoTG9hZGVyLmFyZ3MsIFsoJ2Zpc2gnLCAnZWdncycsICdoYW0nKV0pCgogICAgICAgIExvYWRlci5hcmdzID0gW10KICAgICAgICBwcm9ncmFtID0gVGVzdGFibGVUZXN0UHJvZ3JhbSgpCiAgICAgICAgcHJvZ3JhbS5fZG9fZGlzY292ZXJ5KFsnLXMnLCAnZmlzaCddLCBMb2FkZXI9TG9hZGVyKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocHJvZ3JhbS50ZXN0LCAndGVzdHMnKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoTG9hZGVyLmFyZ3MsIFsoJ2Zpc2gnLCAndGVzdCoucHknLCBOb25lKV0pCgogICAgICAgIExvYWRlci5hcmdzID0gW10KICAgICAgICBwcm9ncmFtID0gVGVzdGFibGVUZXN0UHJvZ3JhbSgpCiAgICAgICAgcHJvZ3JhbS5fZG9fZGlzY292ZXJ5KFsnLXQnLCAnZmlzaCddLCBMb2FkZXI9TG9hZGVyKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocHJvZ3JhbS50ZXN0LCAndGVzdHMnKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoTG9hZGVyLmFyZ3MsIFsoJy4nLCAndGVzdCoucHknLCAnZmlzaCcpXSkKCiAgICAgICAgTG9hZGVyLmFyZ3MgPSBbXQogICAgICAgIHByb2dyYW0gPSBUZXN0YWJsZVRlc3RQcm9ncmFtKCkKICAgICAgICBwcm9ncmFtLl9kb19kaXNjb3ZlcnkoWyctcCcsICdmaXNoJ10sIExvYWRlcj1Mb2FkZXIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwcm9ncmFtLnRlc3QsICd0ZXN0cycpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChMb2FkZXIuYXJncywgWygnLicsICdmaXNoJywgTm9uZSldKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UocHJvZ3JhbS5mYWlsZmFzdCkKICAgICAgICBzZWxmLmFzc2VydEZhbHNlKHByb2dyYW0uY2F0Y2hicmVhaykKCiAgICAgICAgTG9hZGVyLmFyZ3MgPSBbXQogICAgICAgIHByb2dyYW0gPSBUZXN0YWJsZVRlc3RQcm9ncmFtKCkKICAgICAgICBwcm9ncmFtLl9kb19kaXNjb3ZlcnkoWyctcCcsICdlZ2dzJywgJy1zJywgJ2Zpc2gnLCAnLXYnLCAnLWYnLCAnLWMnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9hZGVyPUxvYWRlcikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHByb2dyYW0udGVzdCwgJ3Rlc3RzJykKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKExvYWRlci5hcmdzLCBbKCdmaXNoJywgJ2VnZ3MnLCBOb25lKV0pCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChwcm9ncmFtLnZlcmJvc2l0eSwgMikKICAgICAgICBzZWxmLmFzc2VydFRydWUocHJvZ3JhbS5mYWlsZmFzdCkKICAgICAgICBzZWxmLmFzc2VydFRydWUocHJvZ3JhbS5jYXRjaGJyZWFrKQoKICAgIGRlZiB0ZXN0X2RldGVjdF9tb2R1bGVfY2xhc2goc2VsZik6CiAgICAgICAgY2xhc3MgTW9kdWxlKG9iamVjdCk6CiAgICAgICAgICAgIF9fZmlsZV9fID0gJ2Jhci9mb28ucHknCiAgICAgICAgc3lzLm1vZHVsZXNbJ2ZvbyddID0gTW9kdWxlCiAgICAgICAgZnVsbF9wYXRoID0gb3MucGF0aC5hYnNwYXRoKCdmb28nKQogICAgICAgIG9yaWdpbmFsX2xpc3RkaXIgPSBvcy5saXN0ZGlyCiAgICAgICAgb3JpZ2luYWxfaXNmaWxlID0gb3MucGF0aC5pc2ZpbGUKICAgICAgICBvcmlnaW5hbF9pc2RpciA9IG9zLnBhdGguaXNkaXIKCiAgICAgICAgZGVmIGNsZWFudXAoKToKICAgICAgICAgICAgb3MubGlzdGRpciA9IG9yaWdpbmFsX2xpc3RkaXIKICAgICAgICAgICAgb3MucGF0aC5pc2ZpbGUgPSBvcmlnaW5hbF9pc2ZpbGUKICAgICAgICAgICAgb3MucGF0aC5pc2RpciA9IG9yaWdpbmFsX2lzZGlyCiAgICAgICAgICAgIGRlbCBzeXMubW9kdWxlc1snZm9vJ10KICAgICAgICAgICAgaWYgZnVsbF9wYXRoIGluIHN5cy5wYXRoOgogICAgICAgICAgICAgICAgc3lzLnBhdGgucmVtb3ZlKGZ1bGxfcGF0aCkKICAgICAgICBzZWxmLmFkZENsZWFudXAoY2xlYW51cCkKCiAgICAgICAgZGVmIGxpc3RkaXIoXyk6CiAgICAgICAgICAgIHJldHVybiBbJ2Zvby5weSddCiAgICAgICAgZGVmIGlzZmlsZShfKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBkZWYgaXNkaXIoXyk6CiAgICAgICAgICAgIHJldHVybiBUcnVlCiAgICAgICAgb3MubGlzdGRpciA9IGxpc3RkaXIKICAgICAgICBvcy5wYXRoLmlzZmlsZSA9IGlzZmlsZQogICAgICAgIG9zLnBhdGguaXNkaXIgPSBpc2RpcgoKICAgICAgICBsb2FkZXIgPSB1bml0dGVzdC5UZXN0TG9hZGVyKCkKCiAgICAgICAgbW9kX2RpciA9IG9zLnBhdGguYWJzcGF0aCgnYmFyJykKICAgICAgICBleHBlY3RlZF9kaXIgPSBvcy5wYXRoLmFic3BhdGgoJ2ZvbycpCiAgICAgICAgbXNnID0gcmUuZXNjYXBlKHIiJ2ZvbycgbW9kdWxlIGluY29ycmVjdGx5IGltcG9ydGVkIGZyb20gJXIuIEV4cGVjdGVkICVyLiAiCiAgICAgICAgICAgICAgICAiSXMgdGhpcyBtb2R1bGUgZ2xvYmFsbHkgaW5zdGFsbGVkPyIgJSAobW9kX2RpciwgZXhwZWN0ZWRfZGlyKSkKICAgICAgICBzZWxmLmFzc2VydFJhaXNlc1JlZ2V4KAogICAgICAgICAgICBJbXBvcnRFcnJvciwgJ14lcyQnICUgbXNnLCBsb2FkZXIuZGlzY292ZXIsCiAgICAgICAgICAgIHN0YXJ0X2Rpcj0nZm9vJywgcGF0dGVybj0nZm9vLnB5JwogICAgICAgICkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN5cy5wYXRoWzBdLCBmdWxsX3BhdGgpCgoKICAgIGRlZiB0ZXN0X2Rpc2NvdmVyeV9mcm9tX2RvdHRlZF9wYXRoKHNlbGYpOgogICAgICAgIGxvYWRlciA9IHVuaXR0ZXN0LlRlc3RMb2FkZXIoKQoKICAgICAgICB0ZXN0cyA9IFtzZWxmXQogICAgICAgIGV4cGVjdGVkUGF0aCA9IG9zLnBhdGguYWJzcGF0aChvcy5wYXRoLmRpcm5hbWUodW5pdHRlc3QudGVzdC5fX2ZpbGVfXykpCgogICAgICAgIHNlbGYud2FzUnVuID0gRmFsc2UKICAgICAgICBkZWYgX2ZpbmRfdGVzdHMoc3RhcnRfZGlyLCBwYXR0ZXJuKToKICAgICAgICAgICAgc2VsZi53YXNSdW4gPSBUcnVlCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc3RhcnRfZGlyLCBleHBlY3RlZFBhdGgpCiAgICAgICAgICAgIHJldHVybiB0ZXN0cwogICAgICAgIGxvYWRlci5fZmluZF90ZXN0cyA9IF9maW5kX3Rlc3RzCiAgICAgICAgc3VpdGUgPSBsb2FkZXIuZGlzY292ZXIoJ3VuaXR0ZXN0LnRlc3QnKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShzZWxmLndhc1J1bikKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHN1aXRlLl90ZXN0cywgdGVzdHMpCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHVuaXR0ZXN0Lm1haW4oKQo=',
'/Lib/unittest/test/test_functiontestcase.py':'aW1wb3J0IHVuaXR0ZXN0Cgpmcm9tIC5zdXBwb3J0IGltcG9ydCBMb2dnaW5nUmVzdWx0CgoKY2xhc3MgVGVzdF9GdW5jdGlvblRlc3RDYXNlKHVuaXR0ZXN0LlRlc3RDYXNlKToKCiAgICAjICJSZXR1cm4gdGhlIG51bWJlciBvZiB0ZXN0cyByZXByZXNlbnRlZCBieSB0aGUgdGhpcyB0ZXN0IG9iamVjdC4gRm9yCiAgICAjIFRlc3RDYXNlIGluc3RhbmNlcywgdGhpcyB3aWxsIGFsd2F5cyBiZSAxIgogICAgZGVmIHRlc3RfY291bnRUZXN0Q2FzZXMoc2VsZik6CiAgICAgICAgdGVzdCA9IHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3QuY291bnRUZXN0Q2FzZXMoKSwgMSkKCiAgICAjICJXaGVuIGEgc2V0VXAoKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlIHRlc3QgcnVubmVyIHdpbGwgcnVuIHRoYXQgbWV0aG9kCiAgICAjIHByaW9yIHRvIGVhY2ggdGVzdC4gTGlrZXdpc2UsIGlmIGEgdGVhckRvd24oKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlCiAgICAjIHRlc3QgcnVubmVyIHdpbGwgaW52b2tlIHRoYXQgbWV0aG9kIGFmdGVyIGVhY2ggdGVzdC4gSW4gdGhlIGV4YW1wbGUsCiAgICAjIHNldFVwKCkgd2FzIHVzZWQgdG8gY3JlYXRlIGEgZnJlc2ggc2VxdWVuY2UgZm9yIGVhY2ggdGVzdC4iCiAgICAjCiAgICAjIE1ha2Ugc3VyZSB0aGUgcHJvcGVyIGNhbGwgb3JkZXIgaXMgbWFpbnRhaW5lZCwgZXZlbiBpZiBzZXRVcCgpIHJhaXNlcwogICAgIyBhbiBleGNlcHRpb24uCiAgICBkZWYgdGVzdF9ydW5fY2FsbF9vcmRlcl9fZXJyb3JfaW5fc2V0VXAoc2VsZik6CiAgICAgICAgZXZlbnRzID0gW10KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykKCiAgICAgICAgZGVmIHNldFVwKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykKICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKCdyYWlzZWQgYnkgc2V0VXAnKQoKICAgICAgICBkZWYgdGVzdCgpOgogICAgICAgICAgICBldmVudHMuYXBwZW5kKCd0ZXN0JykKCiAgICAgICAgZGVmIHRlYXJEb3duKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3RlYXJEb3duJykKCiAgICAgICAgZXhwZWN0ZWQgPSBbJ3N0YXJ0VGVzdCcsICdzZXRVcCcsICdhZGRFcnJvcicsICdzdG9wVGVzdCddCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQoKICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QKICAgICMgcHJpb3IgdG8gZWFjaCB0ZXN0LiBMaWtld2lzZSwgaWYgYSB0ZWFyRG93bigpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUKICAgICMgdGVzdCBydW5uZXIgd2lsbCBpbnZva2UgdGhhdCBtZXRob2QgYWZ0ZXIgZWFjaCB0ZXN0LiBJbiB0aGUgZXhhbXBsZSwKICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiIKICAgICMKICAgICMgTWFrZSBzdXJlIHRoZSBwcm9wZXIgY2FsbCBvcmRlciBpcyBtYWludGFpbmVkLCBldmVuIGlmIHRoZSB0ZXN0IHJhaXNlcwogICAgIyBhbiBlcnJvciAoYXMgb3Bwb3NlZCB0byBhIGZhaWx1cmUpLgogICAgZGVmIHRlc3RfcnVuX2NhbGxfb3JkZXJfX2Vycm9yX2luX3Rlc3Qoc2VsZik6CiAgICAgICAgZXZlbnRzID0gW10KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykKCiAgICAgICAgZGVmIHNldFVwKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykKCiAgICAgICAgZGVmIHRlc3QoKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVzdCcpCiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigncmFpc2VkIGJ5IHRlc3QnKQoKICAgICAgICBkZWYgdGVhckRvd24oKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQoKICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLAogICAgICAgICAgICAgICAgICAgICdhZGRFcnJvcicsICdzdG9wVGVzdCddCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQoKICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QKICAgICMgcHJpb3IgdG8gZWFjaCB0ZXN0LiBMaWtld2lzZSwgaWYgYSB0ZWFyRG93bigpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUKICAgICMgdGVzdCBydW5uZXIgd2lsbCBpbnZva2UgdGhhdCBtZXRob2QgYWZ0ZXIgZWFjaCB0ZXN0LiBJbiB0aGUgZXhhbXBsZSwKICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiIKICAgICMKICAgICMgTWFrZSBzdXJlIHRoZSBwcm9wZXIgY2FsbCBvcmRlciBpcyBtYWludGFpbmVkLCBldmVuIGlmIHRoZSB0ZXN0IHNpZ25hbHMKICAgICMgYSBmYWlsdXJlIChhcyBvcHBvc2VkIHRvIGFuIGVycm9yKS4KICAgIGRlZiB0ZXN0X3J1bl9jYWxsX29yZGVyX19mYWlsdXJlX2luX3Rlc3Qoc2VsZik6CiAgICAgICAgZXZlbnRzID0gW10KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykKCiAgICAgICAgZGVmIHNldFVwKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykKCiAgICAgICAgZGVmIHRlc3QoKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVzdCcpCiAgICAgICAgICAgIHNlbGYuZmFpbCgncmFpc2VkIGJ5IHRlc3QnKQoKICAgICAgICBkZWYgdGVhckRvd24oKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQoKICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLAogICAgICAgICAgICAgICAgICAgICdhZGRGYWlsdXJlJywgJ3N0b3BUZXN0J10KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgZXhwZWN0ZWQpCgogICAgIyAiV2hlbiBhIHNldFVwKCkgbWV0aG9kIGlzIGRlZmluZWQsIHRoZSB0ZXN0IHJ1bm5lciB3aWxsIHJ1biB0aGF0IG1ldGhvZAogICAgIyBwcmlvciB0byBlYWNoIHRlc3QuIExpa2V3aXNlLCBpZiBhIHRlYXJEb3duKCkgbWV0aG9kIGlzIGRlZmluZWQsIHRoZQogICAgIyB0ZXN0IHJ1bm5lciB3aWxsIGludm9rZSB0aGF0IG1ldGhvZCBhZnRlciBlYWNoIHRlc3QuIEluIHRoZSBleGFtcGxlLAogICAgIyBzZXRVcCgpIHdhcyB1c2VkIHRvIGNyZWF0ZSBhIGZyZXNoIHNlcXVlbmNlIGZvciBlYWNoIHRlc3QuIgogICAgIwogICAgIyBNYWtlIHN1cmUgdGhlIHByb3BlciBjYWxsIG9yZGVyIGlzIG1haW50YWluZWQsIGV2ZW4gaWYgdGVhckRvd24oKSByYWlzZXMKICAgICMgYW4gZXhjZXB0aW9uLgogICAgZGVmIHRlc3RfcnVuX2NhbGxfb3JkZXJfX2Vycm9yX2luX3RlYXJEb3duKHNlbGYpOgogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCgogICAgICAgIGRlZiBzZXRVcCgpOgogICAgICAgICAgICBldmVudHMuYXBwZW5kKCdzZXRVcCcpCgogICAgICAgIGRlZiB0ZXN0KCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3Rlc3QnKQoKICAgICAgICBkZWYgdGVhckRvd24oKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoJ3JhaXNlZCBieSB0ZWFyRG93bicpCgogICAgICAgIGV4cGVjdGVkID0gWydzdGFydFRlc3QnLCAnc2V0VXAnLCAndGVzdCcsICd0ZWFyRG93bicsICdhZGRFcnJvcicsCiAgICAgICAgICAgICAgICAgICAgJ3N0b3BUZXN0J10KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgZXhwZWN0ZWQpCgogICAgIyAiUmV0dXJuIGEgc3RyaW5nIGlkZW50aWZ5aW5nIHRoZSBzcGVjaWZpYyB0ZXN0IGNhc2UuIgogICAgIwogICAgIyBCZWNhdXNlIG9mIHRoZSB2YWd1ZSBuYXR1cmUgb2YgdGhlIGRvY3MsIEknbSBub3QgZ29pbmcgdG8gbG9jayB0aGlzCiAgICAjIHRlc3QgZG93biB0b28gbXVjaC4gUmVhbGx5IGFsbCB0aGF0IGNhbiBiZSBhc3NlcnRlZCBpcyB0aGF0IHRoZSBpZCgpCiAgICAjIHdpbGwgYmUgYSBzdHJpbmcgKGVpdGhlciA4LWJ5dGUgb3IgdW5pY29kZSAtLSBhZ2FpbiwgYmVjYXVzZSB0aGUgZG9jcwogICAgIyBqdXN0IHNheSAic3RyaW5nIikKICAgIGRlZiB0ZXN0X2lkKHNlbGYpOgogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkKCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHRlc3QuaWQoKSwgc3RyKQoKICAgICMgIlJldHVybnMgYSBvbmUtbGluZSBkZXNjcmlwdGlvbiBvZiB0aGUgdGVzdCwgb3IgTm9uZSBpZiBubyBkZXNjcmlwdGlvbgogICAgIyBoYXMgYmVlbiBwcm92aWRlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucwogICAgIyB0aGUgZmlyc3QgbGluZSBvZiB0aGUgdGVzdCBtZXRob2QncyBkb2NzdHJpbmcsIGlmIGF2YWlsYWJsZSwgb3IgTm9uZS4iCiAgICBkZWYgdGVzdF9zaG9ydERlc2NyaXB0aW9uX19ub19kb2NzdHJpbmcoc2VsZik6CiAgICAgICAgdGVzdCA9IHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3Quc2hvcnREZXNjcmlwdGlvbigpLCBOb25lKQoKICAgICMgIlJldHVybnMgYSBvbmUtbGluZSBkZXNjcmlwdGlvbiBvZiB0aGUgdGVzdCwgb3IgTm9uZSBpZiBubyBkZXNjcmlwdGlvbgogICAgIyBoYXMgYmVlbiBwcm92aWRlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucwogICAgIyB0aGUgZmlyc3QgbGluZSBvZiB0aGUgdGVzdCBtZXRob2QncyBkb2NzdHJpbmcsIGlmIGF2YWlsYWJsZSwgb3IgTm9uZS4iCiAgICBkZWYgdGVzdF9zaG9ydERlc2NyaXB0aW9uX19zaW5nbGVsaW5lX2RvY3N0cmluZyhzZWxmKToKICAgICAgICBkZXNjID0gInRoaXMgdGVzdHMgZm9vIgogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSwgZGVzY3JpcHRpb249ZGVzYykKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCh0ZXN0LnNob3J0RGVzY3JpcHRpb24oKSwgInRoaXMgdGVzdHMgZm9vIikK',
'/Lib/unittest/test/test_loader.py':'',
'/Lib/unittest/test/test_program.py':'',
'/Lib/unittest/test/test_result.py':'',
'/Lib/unittest/test/test_runner.py':'',
'/Lib/unittest/test/test_setups.py':'',
'/Lib/unittest/test/test_skipping.py':'aW1wb3J0IHVuaXR0ZXN0Cgpmcm9tIC5zdXBwb3J0IGltcG9ydCBMb2dnaW5nUmVzdWx0CgoKY2xhc3MgVGVzdF9UZXN0U2tpcHBpbmcodW5pdHRlc3QuVGVzdENhc2UpOgoKICAgIGRlZiB0ZXN0X3NraXBwaW5nKHNlbGYpOgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIGRlZiB0ZXN0X3NraXBfbWUoc2VsZik6CiAgICAgICAgICAgICAgICBzZWxmLnNraXBUZXN0KCJza2lwIikKICAgICAgICBldmVudHMgPSBbXQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQogICAgICAgIHRlc3QgPSBGb28oInRlc3Rfc2tpcF9tZSIpCiAgICAgICAgdGVzdC5ydW4ocmVzdWx0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLCBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0J10pCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0LCAic2tpcCIpXSkKCiAgICAgICAgIyBUcnkgbGV0dGluZyBzZXRVcCBza2lwIHRoZSB0ZXN0IG5vdy4KICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBkZWYgc2V0VXAoc2VsZik6CiAgICAgICAgICAgICAgICBzZWxmLnNraXBUZXN0KCJ0ZXN0aW5nIikKICAgICAgICAgICAgZGVmIHRlc3Rfbm90aGluZyhzZWxmKTogcGFzcwogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9ub3RoaW5nIikKICAgICAgICB0ZXN0LnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIFsnc3RhcnRUZXN0JywgJ2FkZFNraXAnLCAnc3RvcFRlc3QnXSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnRlc3RzUnVuLCAxKQoKICAgIGRlZiB0ZXN0X3NraXBwaW5nX2RlY29yYXRvcnMoc2VsZik6CiAgICAgICAgb3BfdGFibGUgPSAoKHVuaXR0ZXN0LnNraXBVbmxlc3MsIEZhbHNlLCBUcnVlKSwKICAgICAgICAgICAgICAgICAgICAodW5pdHRlc3Quc2tpcElmLCBUcnVlLCBGYWxzZSkpCiAgICAgICAgZm9yIGRlY28sIGRvX3NraXAsIGRvbnRfc2tpcCBpbiBvcF90YWJsZToKICAgICAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICAgICAgICAgICAgIEBkZWNvKGRvX3NraXAsICJ0ZXN0aW5nIikKICAgICAgICAgICAgICAgIGRlZiB0ZXN0X3NraXAoc2VsZik6IHBhc3MKCiAgICAgICAgICAgICAgICBAZGVjbyhkb250X3NraXAsICJ0ZXN0aW5nIikKICAgICAgICAgICAgICAgIGRlZiB0ZXN0X2RvbnRfc2tpcChzZWxmKTogcGFzcwogICAgICAgICAgICB0ZXN0X2RvX3NraXAgPSBGb28oInRlc3Rfc2tpcCIpCiAgICAgICAgICAgIHRlc3RfZG9udF9za2lwID0gRm9vKCJ0ZXN0X2RvbnRfc2tpcCIpCiAgICAgICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKFt0ZXN0X2RvX3NraXAsIHRlc3RfZG9udF9za2lwXSkKICAgICAgICAgICAgZXZlbnRzID0gW10KICAgICAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5za2lwcGVkKSwgMSkKICAgICAgICAgICAgZXhwZWN0ZWQgPSBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0VGVzdCcsICdhZGRTdWNjZXNzJywgJ3N0b3BUZXN0J10KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC50ZXN0c1J1biwgMikKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0X2RvX3NraXAsICJ0ZXN0aW5nIildKQogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUocmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkKCiAgICBkZWYgdGVzdF9za2lwX2NsYXNzKHNlbGYpOgogICAgICAgIEB1bml0dGVzdC5za2lwKCJ0ZXN0aW5nIikKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOgogICAgICAgICAgICAgICAgcmVjb3JkLmFwcGVuZCgxKQogICAgICAgIHJlY29yZCA9IFtdCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikKICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pCiAgICAgICAgc3VpdGUucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVjb3JkLCBbXSkKCiAgICBkZWYgdGVzdF9za2lwX25vbl91bml0dGVzdF9jbGFzcyhzZWxmKToKICAgICAgICBAdW5pdHRlc3Quc2tpcCgidGVzdGluZyIpCiAgICAgICAgY2xhc3MgTWl4aW46CiAgICAgICAgICAgIGRlZiB0ZXN0XzEoc2VsZik6CiAgICAgICAgICAgICAgICByZWNvcmQuYXBwZW5kKDEpCiAgICAgICAgY2xhc3MgRm9vKE1peGluLCB1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIHBhc3MKICAgICAgICByZWNvcmQgPSBbXQogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQogICAgICAgIHRlc3QgPSBGb28oInRlc3RfMSIpCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW3Rlc3RdKQogICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0LCAidGVzdGluZyIpXSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlY29yZCwgW10pCgogICAgZGVmIHRlc3RfZXhwZWN0ZWRfZmFpbHVyZShzZWxmKToKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBAdW5pdHRlc3QuZXhwZWN0ZWRGYWlsdXJlCiAgICAgICAgICAgIGRlZiB0ZXN0X2RpZShzZWxmKToKICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiaGVscCBtZSEiKQogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9kaWUiKQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RhcnRUZXN0JywgJ2FkZEV4cGVjdGVkRmFpbHVyZScsICdzdG9wVGVzdCddKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LmV4cGVjdGVkRmFpbHVyZXNbMF1bMF0sIHRlc3QpCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKHJlc3VsdC53YXNTdWNjZXNzZnVsKCkpCgogICAgZGVmIHRlc3RfdW5leHBlY3RlZF9zdWNjZXNzKHNlbGYpOgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIEB1bml0dGVzdC5leHBlY3RlZEZhaWx1cmUKICAgICAgICAgICAgZGVmIHRlc3RfZGllKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9kaWUiKQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RhcnRUZXN0JywgJ2FkZFVuZXhwZWN0ZWRTdWNjZXNzJywgJ3N0b3BUZXN0J10pCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShyZXN1bHQuZmFpbHVyZXMpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQudW5leHBlY3RlZFN1Y2Nlc3NlcywgW3Rlc3RdKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShyZXN1bHQud2FzU3VjY2Vzc2Z1bCgpKQoKICAgIGRlZiB0ZXN0X3NraXBfZG9lc250X3J1bl9zZXR1cChzZWxmKToKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICB3YXNTZXRVcCA9IEZhbHNlCiAgICAgICAgICAgIHdhc1Rvcm5Eb3duID0gRmFsc2UKICAgICAgICAgICAgZGVmIHNldFVwKHNlbGYpOgogICAgICAgICAgICAgICAgRm9vLndhc1NldFVwID0gVHJ1ZQogICAgICAgICAgICBkZWYgdG9ybkRvd24oc2VsZik6CiAgICAgICAgICAgICAgICBGb28ud2FzVG9ybkRvd24gPSBUcnVlCiAgICAgICAgICAgIEB1bml0dGVzdC5za2lwKCd0ZXN0aW5nJykKICAgICAgICAgICAgZGVmIHRlc3RfMShzZWxmKToKICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikKICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pCiAgICAgICAgc3VpdGUucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoRm9vLndhc1NldFVwKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoRm9vLndhc1Rvcm5Eb3duKQoKICAgIGRlZiB0ZXN0X2RlY29yYXRlZF9za2lwKHNlbGYpOgogICAgICAgIGRlZiBkZWNvcmF0b3IoZnVuYyk6CiAgICAgICAgICAgIGRlZiBpbm5lcigqYSk6CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYygqYSkKICAgICAgICAgICAgcmV0dXJuIGlubmVyCgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIEBkZWNvcmF0b3IKICAgICAgICAgICAgQHVuaXR0ZXN0LnNraXAoJ3Rlc3RpbmcnKQogICAgICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkKICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0XzEiKQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKFt0ZXN0XSkKICAgICAgICBzdWl0ZS5ydW4ocmVzdWx0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdCwgInRlc3RpbmciKV0pCg==',
'/Lib/unittest/test/test_suite.py':'',
'/Lib/unittest/test/_test_warnings.py':'IyBoZWxwZXIgbW9kdWxlIGZvciB0ZXN0X3J1bm5lci5UZXN0X1RleHRUZXN0UnVubmVyLnRlc3Rfd2FybmluZ3MKCiIiIgpUaGlzIG1vZHVsZSBoYXMgYSBudW1iZXIgb2YgdGVzdHMgdGhhdCByYWlzZSBkaWZmZXJlbnQga2luZHMgb2Ygd2FybmluZ3MuCldoZW4gdGhlIHRlc3RzIGFyZSBydW4sIHRoZSB3YXJuaW5ncyBhcmUgY2F1Z2h0IGFuZCB0aGVpciBtZXNzYWdlcyBhcmUgcHJpbnRlZAp0byBzdGRvdXQuICBUaGlzIG1vZHVsZSBhbHNvIGFjY2VwdHMgYW4gYXJnIHRoYXQgaXMgdGhlbiBwYXNzZWQgdG8KdW5pdHRlc3QubWFpbiB0byBhZmZlY3QgdGhlIGJlaGF2aW9yIG9mIHdhcm5pbmdzLgpUZXN0X1RleHRUZXN0UnVubmVyLnRlc3Rfd2FybmluZ3MgZXhlY3V0ZXMgdGhpcyBzY3JpcHQgd2l0aCBkaWZmZXJlbnQKY29tYmluYXRpb25zIG9mIHdhcm5pbmdzIGFyZ3MgYW5kIC1XIGZsYWdzIGFuZCBjaGVjayB0aGF0IHRoZSBvdXRwdXQgaXMgY29ycmVjdC4KU2VlICMxMDUzNS4KIiIiCgppbXBvcnQgc3lzCmltcG9ydCB1bml0dGVzdAppbXBvcnQgd2FybmluZ3MKCmRlZiB3YXJuZnVuKCk6CiAgICB3YXJuaW5ncy53YXJuKCdydycsIFJ1bnRpbWVXYXJuaW5nKQoKY2xhc3MgVGVzdFdhcm5pbmdzKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICMgdW5pdHRlc3Qgd2FybmluZ3Mgd2lsbCBiZSBwcmludGVkIGF0IG1vc3Qgb25jZSBwZXIgdHlwZSAobWF4IG9uZSBtZXNzYWdlCiAgICAjIGZvciB0aGUgZmFpbCogbWV0aG9kcywgYW5kIG9uZSBmb3IgdGhlIGFzc2VydCogbWV0aG9kcykKICAgIGRlZiB0ZXN0X2Fzc2VydChzZWxmKToKICAgICAgICBzZWxmLmFzc2VydEVxdWFscygyKzIsIDQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbHMoMioyLCA0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWxzKDIqKjIsIDQpCgogICAgZGVmIHRlc3RfZmFpbChzZWxmKToKICAgICAgICBzZWxmLmZhaWxVbmxlc3MoMSkKICAgICAgICBzZWxmLmZhaWxVbmxlc3MoVHJ1ZSkKCiAgICBkZWYgdGVzdF9vdGhlcl91bml0dGVzdChzZWxmKToKICAgICAgICBzZWxmLmFzc2VydEFsbW9zdEVxdWFsKDIrMiwgNCkKICAgICAgICBzZWxmLmFzc2VydE5vdEFsbW9zdEVxdWFsKDQrNCwgMikKCiAgICAjIHRoZXNlIHdhcm5pbmdzIGFyZSBub3JtYWxseSBzaWxlbmNlZCwgYnV0IHRoZXkgYXJlIHByaW50ZWQgaW4gdW5pdHRlc3QKICAgIGRlZiB0ZXN0X2RlcHJlY2F0aW9uKHNlbGYpOgogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQoKICAgIGRlZiB0ZXN0X2ltcG9ydChzZWxmKToKICAgICAgICB3YXJuaW5ncy53YXJuKCdpdycsIEltcG9ydFdhcm5pbmcpCiAgICAgICAgd2FybmluZ3Mud2FybignaXcnLCBJbXBvcnRXYXJuaW5nKQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2l3JywgSW1wb3J0V2FybmluZykKCiAgICAjIHVzZXIgd2FybmluZ3Mgc2hvdWxkIGFsd2F5cyBiZSBwcmludGVkCiAgICBkZWYgdGVzdF93YXJuaW5nKHNlbGYpOgogICAgICAgIHdhcm5pbmdzLndhcm4oJ3V3JykKICAgICAgICB3YXJuaW5ncy53YXJuKCd1dycpCiAgICAgICAgd2FybmluZ3Mud2FybigndXcnKQoKICAgICMgdGhlc2Ugd2FybmluZ3MgY29tZSBmcm9tIHRoZSBzYW1lIHBsYWNlOyB0aGV5IHdpbGwgYmUgcHJpbnRlZAogICAgIyBvbmx5IG9uY2UgYnkgZGVmYXVsdCBvciB0aHJlZSB0aW1lcyBpZiB0aGUgJ2Fsd2F5cycgZmlsdGVyIGlzIHVzZWQKICAgIGRlZiB0ZXN0X2Z1bmN0aW9uKHNlbGYpOgoKICAgICAgICB3YXJuZnVuKCkKICAgICAgICB3YXJuZnVuKCkKICAgICAgICB3YXJuZnVuKCkKCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHdpdGggd2FybmluZ3MuY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpIGFzIHdzOgogICAgICAgICMgaWYgYW4gYXJnIGlzIHByb3ZpZGVkIHBhc3MgaXQgdG8gdW5pdHRlc3QubWFpbiBhcyAnd2FybmluZ3MnCiAgICAgICAgaWYgbGVuKHN5cy5hcmd2KSA9PSAyOgogICAgICAgICAgICB1bml0dGVzdC5tYWluKGV4aXQ9RmFsc2UsIHdhcm5pbmdzPXN5cy5hcmd2LnBvcCgpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHVuaXR0ZXN0Lm1haW4oZXhpdD1GYWxzZSkKCiAgICAjIHByaW50IGFsbCB0aGUgd2FybmluZyBtZXNzYWdlcyBjb2xsZWN0ZWQKICAgIGZvciB3IGluIHdzOgogICAgICAgIHByaW50KHcubWVzc2FnZSkK',
'/Lib/unittest/test/__init__.py':'aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHVuaXR0ZXN0CgoKaGVyZSA9IG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykKbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXIKCmRlZiBzdWl0ZSgpOgogICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQogICAgZm9yIGZuIGluIG9zLmxpc3RkaXIoaGVyZSk6CiAgICAgICAgaWYgZm4uc3RhcnRzd2l0aCgidGVzdCIpIGFuZCBmbi5lbmRzd2l0aCgiLnB5Iik6CiAgICAgICAgICAgIG1vZG5hbWUgPSAidW5pdHRlc3QudGVzdC4iICsgZm5bOi0zXQogICAgICAgICAgICBfX2ltcG9ydF9fKG1vZG5hbWUpCiAgICAgICAgICAgIG1vZHVsZSA9IHN5cy5tb2R1bGVzW21vZG5hbWVdCiAgICAgICAgICAgIHN1aXRlLmFkZFRlc3QobG9hZGVyLmxvYWRUZXN0c0Zyb21Nb2R1bGUobW9kdWxlKSkKICAgIHN1aXRlLmFkZFRlc3QobG9hZGVyLmxvYWRUZXN0c0Zyb21OYW1lKCd1bml0dGVzdC50ZXN0LnRlc3Rtb2NrJykpCiAgICByZXR1cm4gc3VpdGUKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgdW5pdHRlc3QubWFpbihkZWZhdWx0VGVzdD0ic3VpdGUiKQo=',
'/Lib/unittest/test/testmock/support.py':'aW1wb3J0IHN5cwoKZGVmIGlzX2luc3RhbmNlKG9iaiwga2xhc3MpOgogICAgIiIiVmVyc2lvbiBvZiBpc19pbnN0YW5jZSB0aGF0IGRvZXNuJ3QgYWNjZXNzIF9fY2xhc3NfXyIiIgogICAgcmV0dXJuIGlzc3ViY2xhc3ModHlwZShvYmopLCBrbGFzcykKCgpjbGFzcyBTb21lQ2xhc3Mob2JqZWN0KToKICAgIGNsYXNzX2F0dHJpYnV0ZSA9IE5vbmUKCiAgICBkZWYgd2liYmxlKHNlbGYpOgogICAgICAgIHBhc3MKCgpjbGFzcyBYKG9iamVjdCk6CiAgICBwYXNzCgoKZGVmIGV4YW1pbmVfd2FybmluZ3MoZnVuYyk6CiAgICBkZWYgd3JhcHBlcigpOgogICAgICAgIHdpdGggY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpIGFzIHdzOgogICAgICAgICAgICBmdW5jKHdzKQogICAgcmV0dXJuIHdyYXBwZXIK',
'/Lib/unittest/test/testmock/testcallable.py':'IyBDb3B5cmlnaHQgKEMpIDIwMDctMjAxMiBNaWNoYWVsIEZvb3JkICYgdGhlIG1vY2sgdGVhbQojIEUtbWFpbDogZnV6enltYW4gQVQgdm9pZHNwYWNlIERPVCBvcmcgRE9UIHVrCiMgaHR0cDovL3d3dy52b2lkc3BhY2Uub3JnLnVrL3B5dGhvbi9tb2NrLwoKaW1wb3J0IHVuaXR0ZXN0CmZyb20gdW5pdHRlc3QudGVzdC50ZXN0bW9jay5zdXBwb3J0IGltcG9ydCBpc19pbnN0YW5jZSwgWCwgU29tZUNsYXNzCgpmcm9tIHVuaXR0ZXN0Lm1vY2sgaW1wb3J0ICgKICAgIE1vY2ssIE1hZ2ljTW9jaywgTm9uQ2FsbGFibGVNYWdpY01vY2ssCiAgICBOb25DYWxsYWJsZU1vY2ssIHBhdGNoLCBjcmVhdGVfYXV0b3NwZWMsCiAgICBDYWxsYWJsZU1peGluCikKCgoKY2xhc3MgVGVzdENhbGxhYmxlKHVuaXR0ZXN0LlRlc3RDYXNlKToKCiAgICBkZWYgYXNzZXJ0Tm90Q2FsbGFibGUoc2VsZiwgbW9jayk6CiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2ssIE5vbkNhbGxhYmxlTWFnaWNNb2NrKSkKICAgICAgICBzZWxmLmFzc2VydEZhbHNlKGlzX2luc3RhbmNlKG1vY2ssIENhbGxhYmxlTWl4aW4pKQoKCiAgICBkZWYgdGVzdF9ub25fY2FsbGFibGUoc2VsZik6CiAgICAgICAgZm9yIG1vY2sgaW4gTm9uQ2FsbGFibGVNYWdpY01vY2soKSwgTm9uQ2FsbGFibGVNb2NrKCk6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykKICAgICAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShoYXNhdHRyKG1vY2ssICdfX2NhbGxfXycpKQogICAgICAgICAgICBzZWxmLmFzc2VydEluKG1vY2suX19jbGFzc19fLl9fbmFtZV9fLCByZXByKG1vY2spKQoKCiAgICBkZWYgdGVzdF9oZWlyYXJjaHkoc2VsZik6CiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3MoTWFnaWNNb2NrLCBNb2NrKSkKICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNzdWJjbGFzcyhOb25DYWxsYWJsZU1hZ2ljTW9jaywgTm9uQ2FsbGFibGVNb2NrKSkKCgogICAgZGVmIHRlc3RfYXR0cmlidXRlcyhzZWxmKToKICAgICAgICBvbmUgPSBOb25DYWxsYWJsZU1vY2soKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUob25lLm9uZSksIE1vY2spKQoKICAgICAgICB0d28gPSBOb25DYWxsYWJsZU1hZ2ljTW9jaygpCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3ModHlwZSh0d28udHdvKSwgTWFnaWNNb2NrKSkKCgogICAgZGVmIHRlc3Rfc3ViY2xhc3NlcyhzZWxmKToKICAgICAgICBjbGFzcyBNb2NrU3ViKE1vY2spOgogICAgICAgICAgICBwYXNzCgogICAgICAgIG9uZSA9IE1vY2tTdWIoKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUob25lLm9uZSksIE1vY2tTdWIpKQoKICAgICAgICBjbGFzcyBNYWdpY1N1YihNYWdpY01vY2spOgogICAgICAgICAgICBwYXNzCgogICAgICAgIHR3byA9IE1hZ2ljU3ViKCkKICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNzdWJjbGFzcyh0eXBlKHR3by50d28pLCBNYWdpY1N1YikpCgoKICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWMoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVRydWUpCiAgICAgICAgbW9jayA9IHBhdGNoZXIuc3RhcnQoKQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChwYXRjaGVyLnN0b3ApCgogICAgICAgIGluc3RhbmNlID0gbW9jaygpCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpCgogICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUoaW5zdGFuY2UpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBpbnN0YW5jZSkKCgogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19zZXQoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1UcnVlKQogICAgICAgIG1vY2sgPSBwYXRjaGVyLnN0YXJ0KCkKICAgICAgICBzZWxmLmFkZENsZWFudXAocGF0Y2hlci5zdG9wKQoKICAgICAgICBpbnN0YW5jZSA9IG1vY2soKQogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICBzZWxmLmFzc2VydE5vdENhbGxhYmxlKGluc3RhbmNlKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgaW5zdGFuY2UpCgoKICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWNfaW5zdGFuY2Uoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVgoKSkKICAgICAgICBtb2NrID0gcGF0Y2hlci5zdGFydCgpCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHBhdGNoZXIuc3RvcCkKCiAgICAgICAgc2VsZi5hc3NlcnROb3RDYWxsYWJsZShtb2NrKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykKCgogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19zZXRfaW5zdGFuY2Uoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1YKCkpCiAgICAgICAgbW9jayA9IHBhdGNoZXIuc3RhcnQoKQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChwYXRjaGVyLnN0b3ApCgogICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUobW9jaykKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG1vY2spCgoKICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWNfY2FsbGFibGVfY2xhc3Moc2VsZik6CiAgICAgICAgY2xhc3MgQ2FsbGFibGVYKFgpOgogICAgICAgICAgICBkZWYgX19jYWxsX18oc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCgogICAgICAgIGNsYXNzIFN1YihDYWxsYWJsZVgpOgogICAgICAgICAgICBwYXNzCgogICAgICAgIGNsYXNzIE11bHRpKFNvbWVDbGFzcywgU3ViKToKICAgICAgICAgICAgcGFzcwoKICAgICAgICBmb3IgYXJnIGluICdzcGVjJywgJ3NwZWNfc2V0JzoKICAgICAgICAgICAgZm9yIEtsYXNzIGluIENhbGxhYmxlWCwgU3ViLCBNdWx0aToKICAgICAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLlgnICUgX19uYW1lX18sICoqe2FyZzogS2xhc3N9KSBhcyBtb2NrOgogICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbW9jaygpCiAgICAgICAgICAgICAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpCgogICAgICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc19pbnN0YW5jZShpbnN0YW5jZSwgTWFnaWNNb2NrKSkKICAgICAgICAgICAgICAgICAgICAjIGluaGVyaXRlZCBzcGVjCiAgICAgICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIGluc3RhbmNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb29iYXJiYXonKQoKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbnN0YW5jZSgpCiAgICAgICAgICAgICAgICAgICAgIyBpbnN0YW5jZSBpcyBjYWxsYWJsZSwgcmVzdWx0IGhhcyBubyBzcGVjCiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICAgICAgICAgICAgICByZXN1bHQoMywgMiwgMSkKICAgICAgICAgICAgICAgICAgICByZXN1bHQuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoMywgMiwgMSkKICAgICAgICAgICAgICAgICAgICByZXN1bHQuZm9vKDMsIDIsIDEpCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmZvby5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgzLCAyLCAxKQoKCiAgICBkZWYgdGVzdF9jcmVhdGVfYXV0b3BzZWMoc2VsZik6CiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhYKQogICAgICAgIGluc3RhbmNlID0gbW9jaygpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBpbnN0YW5jZSkKCiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhYKCkpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBtb2NrKQoKCiAgICBkZWYgdGVzdF9jcmVhdGVfYXV0b3NwZWNfaW5zdGFuY2Uoc2VsZik6CiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhTb21lQ2xhc3MsIGluc3RhbmNlPVRydWUpCgogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykKICAgICAgICBtb2NrLndpYmJsZSgpCiAgICAgICAgbW9jay53aWJibGUuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG1vY2sud2liYmxlLCAnc29tZScsICAnYXJncycpCg==',
'/Lib/unittest/test/testmock/testhelpers.py':'',
'/Lib/unittest/test/testmock/testmagicmethods.py':'',
'/Lib/unittest/test/testmock/testmock.py':'',
'/Lib/unittest/test/testmock/testpatch.py':'',
'/Lib/unittest/test/testmock/testsentinel.py':'aW1wb3J0IHVuaXR0ZXN0CmZyb20gdW5pdHRlc3QubW9jayBpbXBvcnQgc2VudGluZWwsIERFRkFVTFQKCgpjbGFzcyBTZW50aW5lbFRlc3QodW5pdHRlc3QuVGVzdENhc2UpOgoKICAgIGRlZiB0ZXN0U2VudGluZWxzKHNlbGYpOgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc2VudGluZWwud2hhdGV2ZXIsIHNlbnRpbmVsLndoYXRldmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbnRpbmVsIG5vdCBzdG9yZWQnKQogICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwoc2VudGluZWwud2hhdGV2ZXIsIHNlbnRpbmVsLndoYXRldmVyZWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzZW50aW5lbCBzaG91bGQgYmUgdW5pcXVlJykKCgogICAgZGVmIHRlc3RTZW50aW5lbE5hbWUoc2VsZik6CiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdHIoc2VudGluZWwud2hhdGV2ZXIpLCAnc2VudGluZWwud2hhdGV2ZXInLAogICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbnRpbmVsIG5hbWUgaW5jb3JyZWN0JykKCgogICAgZGVmIHRlc3RERUZBVUxUKHNlbGYpOgogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShERUZBVUxUIGlzIHNlbnRpbmVsLkRFRkFVTFQpCgogICAgZGVmIHRlc3RCYXNlcyhzZWxmKToKICAgICAgICAjIElmIHRoaXMgZG9lc24ndCByYWlzZSBhbiBBdHRyaWJ1dGVFcnJvciB0aGVuIGhlbHAobW9jaykgaXMgYnJva2VuCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGxhbWJkYTogc2VudGluZWwuX19iYXNlc19fKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICB1bml0dGVzdC5tYWluKCkK',
'/Lib/unittest/test/testmock/testwith.py':'aW1wb3J0IHVuaXR0ZXN0CmZyb20gd2FybmluZ3MgaW1wb3J0IGNhdGNoX3dhcm5pbmdzCgpmcm9tIHVuaXR0ZXN0LnRlc3QudGVzdG1vY2suc3VwcG9ydCBpbXBvcnQgaXNfaW5zdGFuY2UKZnJvbSB1bml0dGVzdC5tb2NrIGltcG9ydCBNYWdpY01vY2ssIE1vY2ssIHBhdGNoLCBzZW50aW5lbCwgbW9ja19vcGVuLCBjYWxsCgoKCnNvbWV0aGluZyAgPSBzZW50aW5lbC5Tb21ldGhpbmcKc29tZXRoaW5nX2Vsc2UgID0gc2VudGluZWwuU29tZXRoaW5nRWxzZQoKCgpjbGFzcyBXaXRoVGVzdCh1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnQoc2VsZik6CiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5Tb21ldGhpbmcyKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZzIsICJ1bnBhdGNoZWQiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpCgoKICAgIGRlZiB0ZXN0X3dpdGhfc3RhdGVtZW50X2V4Y2VwdGlvbihzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuU29tZXRoaW5nMik6CiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nMiwgInVucGF0Y2hlZCIpCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ3BvdycpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZmFpbCgicGF0Y2ggc3dhbGxvd2VkIGV4Y2VwdGlvbiIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfYXMoc2VsZik6CiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZzoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIG1vY2tfc29tZXRoaW5nLCAidW5wYXRjaGVkIikKICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2tfc29tZXRoaW5nLCBNYWdpY01vY2spLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInBhdGNoaW5nIHdyb25nIHR5cGUiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpCgoKICAgIGRlZiB0ZXN0X3BhdGNoX29iamVjdF93aXRoX3N0YXRlbWVudChzZWxmKToKICAgICAgICBjbGFzcyBGb28ob2JqZWN0KToKICAgICAgICAgICAgc29tZXRoaW5nID0gJ2ZvbycKICAgICAgICBvcmlnaW5hbCA9IEZvby5zb21ldGhpbmcKICAgICAgICB3aXRoIHBhdGNoLm9iamVjdChGb28sICdzb21ldGhpbmcnKToKICAgICAgICAgICAgc2VsZi5hc3NlcnROb3RFcXVhbChGb28uc29tZXRoaW5nLCBvcmlnaW5hbCwgInVucGF0Y2hlZCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uc29tZXRoaW5nLCBvcmlnaW5hbCkKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfbmVzdGVkKHNlbGYpOgogICAgICAgIHdpdGggY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpOgogICAgICAgICAgICB3aXRoIHBhdGNoKCclcy5zb21ldGhpbmcnICUgX19uYW1lX18pIGFzIG1vY2tfc29tZXRoaW5nLCBwYXRjaCgnJXMuc29tZXRoaW5nX2Vsc2UnICUgX19uYW1lX18pIGFzIG1vY2tfc29tZXRoaW5nX2Vsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsICJ1bnBhdGNoZWQiKQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmdfZWxzZSwgbW9ja19zb21ldGhpbmdfZWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVucGF0Y2hlZCIpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmdfZWxzZSwgc2VudGluZWwuU29tZXRoaW5nRWxzZSkKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfc3BlY2lmaWVkKHNlbGYpOgogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuUGF0Y2hlZCkgYXMgbW9ja19zb21ldGhpbmc6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9ja19zb21ldGhpbmcsIHNlbnRpbmVsLlBhdGNoZWQsICJ3cm9uZyBwYXRjaCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykKCgogICAgZGVmIHRlc3RDb250ZXh0TWFuYWdlck1vY2tpbmcoc2VsZik6CiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2suX19lbnRlcl9fID0gTW9jaygpCiAgICAgICAgbW9jay5fX2V4aXRfXyA9IE1vY2soKQogICAgICAgIG1vY2suX19leGl0X18ucmV0dXJuX3ZhbHVlID0gRmFsc2UKCiAgICAgICAgd2l0aCBtb2NrIGFzIG06CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobSwgbW9jay5fX2VudGVyX18ucmV0dXJuX3ZhbHVlKQogICAgICAgIG1vY2suX19lbnRlcl9fLmFzc2VydF9jYWxsZWRfd2l0aCgpCiAgICAgICAgbW9jay5fX2V4aXRfXy5hc3NlcnRfY2FsbGVkX3dpdGgoTm9uZSwgTm9uZSwgTm9uZSkKCgogICAgZGVmIHRlc3RfY29udGV4dF9tYW5hZ2VyX3dpdGhfbWFnaWNfbW9jayhzZWxmKToKICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCkKCiAgICAgICAgd2l0aCBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IpOgogICAgICAgICAgICB3aXRoIG1vY2s6CiAgICAgICAgICAgICAgICAnZm9vJyArIDMKICAgICAgICBtb2NrLl9fZW50ZXJfXy5hc3NlcnRfY2FsbGVkX3dpdGgoKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShtb2NrLl9fZXhpdF9fLmNhbGxlZCkKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfc2FtZV9hdHRyaWJ1dGUoc2VsZik6CiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5QYXRjaGVkKSBhcyBtb2NrX3NvbWV0aGluZzoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIG1vY2tfc29tZXRoaW5nLCAidW5wYXRjaGVkIikKCiAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXykgYXMgbW9ja19hZ2FpbjoKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX2FnYWluLCAidW5wYXRjaGVkIikKCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVzdG9yZWQgd2l0aCB3cm9uZyBpbnN0YW5jZSIpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcsICJub3QgcmVzdG9yZWQiKQoKCiAgICBkZWYgdGVzdF93aXRoX3N0YXRlbWVudF9pbWJyaWNhdGVkKHNlbGYpOgogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXykgYXMgbW9ja19zb21ldGhpbmc6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpCgogICAgICAgICAgICB3aXRoIHBhdGNoKCclcy5zb21ldGhpbmdfZWxzZScgJSBfX25hbWVfXykgYXMgbW9ja19zb21ldGhpbmdfZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIG1vY2tfc29tZXRoaW5nX2Vsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bnBhdGNoZWQiKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIHNlbnRpbmVsLlNvbWV0aGluZ0Vsc2UpCgoKICAgIGRlZiB0ZXN0X2RpY3RfY29udGV4dF9tYW5hZ2VyKHNlbGYpOgogICAgICAgIGZvbyA9IHt9CiAgICAgICAgd2l0aCBwYXRjaC5kaWN0KGZvbywgeydhJzogJ2InfSk6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7J2EnOiAnYid9KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7fSkKCiAgICAgICAgd2l0aCBzZWxmLmFzc2VydFJhaXNlcyhOYW1lRXJyb3IpOgogICAgICAgICAgICB3aXRoIHBhdGNoLmRpY3QoZm9vLCB7J2EnOiAnYid9KToKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7J2EnOiAnYid9KQogICAgICAgICAgICAgICAgcmFpc2UgTmFtZUVycm9yKCdLb25yYWQnKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvbywge30pCgoKCmNsYXNzIFRlc3RNb2NrT3Blbih1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHRlc3RfbW9ja19vcGVuKHNlbGYpOgogICAgICAgIG1vY2sgPSBtb2NrX29wZW4oKQogICAgICAgIHdpdGggcGF0Y2goJyVzLm9wZW4nICUgX19uYW1lX18sIG1vY2ssIGNyZWF0ZT1UcnVlKSBhcyBwYXRjaGVkOgogICAgICAgICAgICBzZWxmLmFzc2VydElzKHBhdGNoZWQsIG1vY2spCiAgICAgICAgICAgIG9wZW4oJ2ZvbycpCgogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoJ2ZvbycpCgoKICAgIGRlZiB0ZXN0X21vY2tfb3Blbl9jb250ZXh0X21hbmFnZXIoc2VsZik6CiAgICAgICAgbW9jayA9IG1vY2tfb3BlbigpCiAgICAgICAgaGFuZGxlID0gbW9jay5yZXR1cm5fdmFsdWUKICAgICAgICB3aXRoIHBhdGNoKCclcy5vcGVuJyAlIF9fbmFtZV9fLCBtb2NrLCBjcmVhdGU9VHJ1ZSk6CiAgICAgICAgICAgIHdpdGggb3BlbignZm9vJykgYXMgZjoKICAgICAgICAgICAgICAgIGYucmVhZCgpCgogICAgICAgIGV4cGVjdGVkX2NhbGxzID0gW2NhbGwoJ2ZvbycpLCBjYWxsKCkuX19lbnRlcl9fKCksIGNhbGwoKS5yZWFkKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbCgpLl9fZXhpdF9fKE5vbmUsIE5vbmUsIE5vbmUpXQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzLCBleHBlY3RlZF9jYWxscykKICAgICAgICBzZWxmLmFzc2VydElzKGYsIGhhbmRsZSkKCgogICAgZGVmIHRlc3RfZXhwbGljaXRfbW9jayhzZWxmKToKICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCkKICAgICAgICBtb2NrX29wZW4obW9jaykKCiAgICAgICAgd2l0aCBwYXRjaCgnJXMub3BlbicgJSBfX25hbWVfXywgbW9jaywgY3JlYXRlPVRydWUpIGFzIHBhdGNoZWQ6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMocGF0Y2hlZCwgbW9jaykKICAgICAgICAgICAgb3BlbignZm9vJykKCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgnZm9vJykKCgogICAgZGVmIHRlc3RfcmVhZF9kYXRhKHNlbGYpOgogICAgICAgIG1vY2sgPSBtb2NrX29wZW4ocmVhZF9kYXRhPSdmb28nKQogICAgICAgIHdpdGggcGF0Y2goJyVzLm9wZW4nICUgX19uYW1lX18sIG1vY2ssIGNyZWF0ZT1UcnVlKToKICAgICAgICAgICAgaCA9IG9wZW4oJ2JhcicpCiAgICAgICAgICAgIHJlc3VsdCA9IGgucmVhZCgpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LCAnZm9vJykKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgdW5pdHRlc3QubWFpbigpCg==',
'/Lib/unittest/test/testmock/__init__.py':'aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHVuaXR0ZXN0CgoKaGVyZSA9IG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykKbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXIKCmRlZiBsb2FkX3Rlc3RzKCphcmdzKToKICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKCkKICAgIGZvciBmbiBpbiBvcy5saXN0ZGlyKGhlcmUpOgogICAgICAgIGlmIGZuLnN0YXJ0c3dpdGgoInRlc3QiKSBhbmQgZm4uZW5kc3dpdGgoIi5weSIpOgogICAgICAgICAgICBtb2RuYW1lID0gInVuaXR0ZXN0LnRlc3QudGVzdG1vY2suIiArIGZuWzotM10KICAgICAgICAgICAgX19pbXBvcnRfXyhtb2RuYW1lKQogICAgICAgICAgICBtb2R1bGUgPSBzeXMubW9kdWxlc1ttb2RuYW1lXQogICAgICAgICAgICBzdWl0ZS5hZGRUZXN0KGxvYWRlci5sb2FkVGVzdHNGcm9tTW9kdWxlKG1vZHVsZSkpCiAgICByZXR1cm4gc3VpdGUK',
'/Lib/urllib/request.py':'aW1wb3J0IGFqYXgKCmNsYXNzIEZpbGVJTzoKICBkZWYgX19pbml0X18oc2VsZiwgZGF0YSk6CiAgICAgIHNlbGYuX2RhdGE9ZGF0YQoKICBkZWYgcmVhZChzZWxmKToKICAgICAgcmV0dXJuIHNlbGYuX2RhdGEKCmRlZiB1cmxvcGVuKHVybCwgZGF0YT1Ob25lLCB0aW1lb3V0PU5vbmUpOgogICAgZ2xvYmFsIHJlc3VsdAogICAgcmVzdWx0PU5vbmUKCiAgICBkZWYgb25fY29tcGxldGUocmVxKToKICAgICAgICBnbG9iYWwgcmVzdWx0CiAgICAgICAgcmVzdWx0PXJlcQoKICAgIF9hamF4PWFqYXguYWpheCgpCiAgICBfYWpheC5iaW5kKCdjb21wbGV0ZScsIG9uX2NvbXBsZXRlKQogICAgaWYgdGltZW91dCBpcyBub3QgTm9uZToKICAgICAgIF9hamF4LnNldF90aW1lb3V0KHRpbWVvdXQpCgogICAgX2FqYXgub3BlbignR0VUJywgdXJsLCBGYWxzZSkKICAgIGlmIGRhdGEgaXMgTm9uZToKICAgICAgIF9hamF4LnNlbmQoKQogICAgZWxzZToKICAgICAgIF9hamF4LnNlbmQoZGF0YSkKCiAgICByZXR1cm4gRmlsZUlPKHJlc3VsdC50ZXh0KSwgdXJsLCByZXN1bHQuaGVhZGVycwo=',
'/Lib/urllib/__init__.py':''
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.py_VFS[lib])
}

