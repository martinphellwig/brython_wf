__BRYTHON__.$py_VFS={
'/libs/datetime.js':'',
'/libs/hashlib.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7CiAgICAgICAgaWYgKGF0dHIgPT0gJ25ldycpIHtyZXR1cm4gJGhhc2hsaWJfbmV3O30KICAgICAgICByZXR1cm4gdGhpc1thdHRyXQogICAgfSwKICAgIG1kNTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnbWQ1Jyl9LAogICAgc2hhMTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMScpfSwKICAgIHNoYTIyNDogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjI0Jyl9LAogICAgc2hhMjU2OiBmdW5jdGlvbigpIHtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEyNTYnKX0sCiAgICBzaGEzODQ6IGZ1bmN0aW9uKCkge3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTM4NCcpfSwKICAgIHNoYTUxMjogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhNTEyJyl9LAoKICAgIGFsZ29yaXRobXNfZ3VhcmFudGVlZDogWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXSwKICAgIGFsZ29yaXRobXNfYXZhaWxhYmxlOiAgWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXQp9CgoKLy90b2RvOiBldmVudHVhbGx5IG1vdmUgdGhpcyBmdW5jdGlvbiB0byBhICJ1dGlsaXR5IiBmaWxlIG9yIHVzZSBhamF4IG1vZHVsZT8KZnVuY3Rpb24gJGdldF9DcnlwdG9KU19saWIoYWxnKSB7CiAgIHZhciBpbXA9JGltcG9ydGVyKCkKICAgdmFyICR4bWxodHRwPWltcFswXSwgZmFrZV9xcz1pbXBbMV0sIHRpbWVyPWltcFsyXSwgcmVzPW51bGwKCiAgICR4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaWYoJHhtbGh0dHAucmVhZHlTdGF0ZT09NCl7CiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpCiAgICAgICAgICAgIGlmKCR4bWxodHRwLnN0YXR1cz09MjAwIHx8ICR4bWxodHRwLnN0YXR1cz09MCl7cmVzPSR4bWxodHRwLnJlc3BvbnNlVGV4dH0KICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgIC8vIGRvbid0IHRocm93IGFuIGV4Y2VwdGlvbiBoZXJlLCBpdCB3aWxsIG5vdCBiZSBjYXVnaHQgKGlzc3VlICMzMCkKICAgICAgICAgICAgICAgIHJlcyA9IEVycm9yKCkKICAgICAgICAgICAgICAgIHJlcy5uYW1lID0gJ05vdEZvdW5kRXJyb3InCiAgICAgICAgICAgICAgICByZXMubWVzc2FnZSA9ICJObyBDcnlwdG9KUyBsaWIgbmFtZWQgJyIrYWxnKyInIgogICAgICAgICAgICB9CiAgICAgICAgfQogICB9CgogICAkeG1saHR0cC5vcGVuKCdHRVQnLCBfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJ2xpYnMvY3J5cHRvX2pzL3JvbGx1cHMvJythbGcrJy5qcycrZmFrZV9xcyxmYWxzZSkKICAgaWYoJ292ZXJyaWRlTWltZVR5cGUnIGluICR4bWxodHRwKXskeG1saHR0cC5vdmVycmlkZU1pbWVUeXBlKCJ0ZXh0L3BsYWluIil9CiAgICR4bWxodHRwLnNlbmQoKQogICBpZihyZXMuY29uc3RydWN0b3I9PT1FcnJvcil7dGhyb3cgcmVzfSAvLyBtb2R1bGUgbm90IGZvdW5kCgogICB0cnl7CiAgICAgIGV2YWwocmVzICsgIjsgX19CUllUSE9OX18uQ3J5cHRvSlM9Q3J5cHRvSlM7IikKICAgfSBjYXRjaCAoZXJyKSB7IAogICAgICB0aHJvdyBFcnJvcigiSlMgRXZhbCBFcnJvciIsICJDYW5ub3QgZXZhbCBDcnlwdG9KUyBhbGdvcml0aG0gJyIgKyBhbGcgKyAiJyA6IGVycm9yOiIgKyBlcnIpOwogICB9Cn0KCmZ1bmN0aW9uICRoYXNobGliX25ldyhhbGcpIHsKICAgIGlmIChhbGcgPT0gJ21kNScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLk1ENSA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignbWQ1JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uTUQ1LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTEgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTEnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExLmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMjI0JykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjI0ID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyMjQnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQuY3JlYXRlKCkKICAgIH0gZWxzZSBpZiAoYWxnID09ICdzaGEyNTYnKSB7CiAgICAgICBpZiAoX19CUllUSE9OX18uQ3J5cHRvID09PSB1bmRlZmluZWQgfHwgCiAgICAgICAgICAgX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyNTYgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTI1NicpCiAgICAgICB0aGlzLmhhc2ggPSBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTI1Ni5jcmVhdGUoKQogICAgfSBlbHNlIGlmIChhbGcgPT0gJ3NoYTM4NCcpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4NCA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignc2hhMzg0JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMzg0LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhNTEyJykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBNTEyID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGE1MTInKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTIuY3JlYXRlKCkKICAgIH0gZWxzZSB7CiAgICAgICAkcmFpc2UoJ0F0dHJpYnV0ZUVycm9yJywgJ0ludmFsaWQgaGFzaCBhbGdvcml0aG06JyArIGFsZykKICAgIH0KIAogICAgdGhpcy5fX2NsYXNzX18gPSAkdHlwZQogICAgdGhpcy5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpe3JldHVybiAkZ2V0YXR0cih0aGlzLGF0dHIpfQogICAgdGhpcy5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZXhkaWdlc3QoKX0KICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24obXNnKXt0aGlzLmhhc2gudXBkYXRlKG1zZyl9CiAgICB0aGlzLmNvcHkgPSBmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc2guY2xvbmUoKX0KCiAgICB0aGlzLmhleGRpZ2VzdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB0ZW1wPXRoaXMuaGFzaC5jbG9uZSgpOwogICAgICAgIHRlbXA9dGVtcC5maW5hbGl6ZSgpOwogICAgICAgIHJldHVybiB0ZW1wLnRvU3RyaW5nKCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7Cn0KCiRtb2R1bGUuX19jbGFzc19fID0gJG1vZHVsZQokbW9kdWxlLl9fc3RyX18gPSBmdW5jdGlvbigpIHtyZXR1cm4gIjxtb2R1bGUgJ2hhc2hsaWInPiJ9Cg==',
'/libs/html.js':'Ly8gY3JlYXRpb24gb2YgYW4gSFRNTCBlbGVtZW50CiRtb2R1bGUgPSAoZnVuY3Rpb24oKXsKZnVuY3Rpb24gJFRhZyh0YWdOYW1lLGFyZ3MpewogICAgLy8gY2wKICAgIHZhciAkaSA9IG51bGwKICAgIHZhciBlbHQgPSBudWxsCiAgICB2YXIgZWx0ID0gJERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKSkKICAgIGVsdC5wYXJlbnQgPSB0aGlzCiAgICBpZihhcmdzIT11bmRlZmluZWQgJiYgYXJncy5sZW5ndGg+MCl7CiAgICAgICAgJHN0YXJ0ID0gMAogICAgICAgICRmaXJzdCA9IGFyZ3NbMF0KICAgICAgICAvLyBpZiBmaXJzdCBhcmd1bWVudCBpcyBub3QgYSBrZXl3b3JkLCBpdCdzIHRoZSB0YWcgY29udGVudAogICAgICAgIGlmKCFpc2luc3RhbmNlKCRmaXJzdCwkS3cpKXsKICAgICAgICAgICAgJHN0YXJ0ID0gMQogICAgICAgICAgICBpZihpc2luc3RhbmNlKCRmaXJzdCxbc3RyLGludCxmbG9hdF0pKXsKICAgICAgICAgICAgICAgIHR4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCRmaXJzdC50b1N0cmluZygpKQogICAgICAgICAgICAgICAgZWx0LmFwcGVuZENoaWxkKHR4dCkKICAgICAgICAgICAgfSBlbHNlIGlmKGlzaW5zdGFuY2UoJGZpcnN0LCRUYWdTdW0pKXsKICAgICAgICAgICAgICAgIGZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKyl7CiAgICAgICAgICAgICAgICAgICAgZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5jaGlsZHJlblskaV0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0cnl7ZWx0LmFwcGVuZENoaWxkKCRmaXJzdCl9CiAgICAgICAgICAgICAgICBjYXRjaChlcnIpe3Rocm93IFZhbHVlRXJyb3IoJ3dyb25nIGVsZW1lbnQgJyskZmlyc3QpfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIGF0dHJpYnV0ZXMKICAgICAgICBmb3IoJGk9JHN0YXJ0OyRpPGFyZ3MubGVuZ3RoOyRpKyspewogICAgICAgICAgICAvLyBrZXl3b3JkIGFyZ3VtZW50cwogICAgICAgICAgICAkYXJnID0gYXJnc1skaV0KICAgICAgICAgICAgaWYoaXNpbnN0YW5jZSgkYXJnLCRLdykpewogICAgICAgICAgICAgICAgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PT0ib24iKXsgLy8gZXZlbnRzCiAgICAgICAgICAgICAgICAgICAgZXZhbCgnZWx0LicrJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkrJz1mdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfScpCiAgICAgICAgICAgICAgICB9ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKT09InN0eWxlIil7CiAgICAgICAgICAgICAgICAgICAgZWx0LnNldF9zdHlsZSgkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZigkYXJnLnZhbHVlIT09ZmFsc2UpewogICAgICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb24uc2VsZWN0ZWQ9ZmFsc2Ugc2V0cyBpdCB0byB0cnVlIDotKQogICAgICAgICAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJnID0gJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsdC5zZXRBdHRyaWJ1dGUoYXJnLCRhcmcudmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihhcmc9PSJjbGFzcyIpeyAvLyBmb3IgSUUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHQuc2V0QXR0cmlidXRlKCJjbGFzc05hbWUiLCRhcmcudmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH1jYXRjaChlcnIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVmFsdWVFcnJvcigiY2FuJ3Qgc2V0IGF0dHJpYnV0ZSAiKyRhcmcubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBlbHQKfQoKLy8gdGhlIGNsYXNzZXMgdXNlZCBmb3IgdGFnIHN1bXMsICRUYWdTVW0gYW5kICRUYWdTdW1DbGFzcyAKLy8gYXJlIGRlZmluZWQgaW4gcHlfZG9tLmpzCgpmdW5jdGlvbiBBKCl7cmV0dXJuICRUYWcoJ0EnLGFyZ3VtZW50cyl9CkEuX19uYW1lX189J2h0bWwuQScKCnZhciAkc3JjID0gQSsnJyAvLyBzb3VyY2Ugb2YgZnVuY3Rpb24gQQovLyBIVE1MNCB0YWdzCiR0YWdzID0gWydBJywgJ0FCQlInLCAnQUNST05ZTScsICdBRERSRVNTJywgJ0FQUExFVCcsCiAgICAgICAgICAgICdCJywgJ0JETycsICdCSUcnLCAnQkxPQ0tRVU9URScsICdCVVRUT04nLAogICAgICAgICAgICAnQ0FQVElPTicsICdDRU5URVInLCAnQ0lURScsICdDT0RFJywKICAgICAgICAgICAgJ0RFTCcsICdERk4nLCAnRElSJywgJ0RJVicsICdETCcsCiAgICAgICAgICAgICdFTScsICdGSUVMRFNFVCcsICdGT05UJywgJ0ZPUk0nLCAnRlJBTUVTRVQnLAogICAgICAgICAgICAnSDEnLCAnSDInLCAnSDMnLCAnSDQnLCAnSDUnLCAnSDYnLAogICAgICAgICAgICAnSScsICdJRlJBTUUnLCAnSU5TJywgJ0tCRCcsICdMQUJFTCcsICdMRUdFTkQnLAogICAgICAgICAgICAnTUFQJywgJ01FTlUnLCAnTk9GUkFNRVMnLCAnTk9TQ1JJUFQnLCAnT0JKRUNUJywKICAgICAgICAgICAgJ09MJywgJ09QVEdST1VQJywgJ1BSRScsICdRJywgJ1MnLCAnU0FNUCcsCiAgICAgICAgICAgICdTQ1JJUFQnLCAnU0VMRUNUJywgJ1NNQUxMJywgJ1NQQU4nLCAnU1RSSUtFJywKICAgICAgICAgICAgJ1NUUk9ORycsICdTVFlMRScsICdTVUInLCAnU1VQJywgJ1RBQkxFJywKICAgICAgICAgICAgJ1RFWFRBUkVBJywgJ1RJVExFJywgJ1RUJywgJ1UnLCAnVUwnLAogICAgICAgICAgICAnVkFSJywgJ0JPRFknLCAnQ09MR1JPVVAnLCAnREQnLCAnRFQnLCAnSEVBRCcsCiAgICAgICAgICAgICdIVE1MJywgJ0xJJywgJ1AnLCAnVEJPRFknLCdPUFRJT04nLCAKICAgICAgICAgICAgJ1REJywgJ1RGT09UJywgJ1RIJywgJ1RIRUFEJywgJ1RSJywKICAgICAgICAgICAgJ0FSRUEnLCAnQkFTRScsICdCQVNFRk9OVCcsICdCUicsICdDT0wnLCAnRlJBTUUnLAogICAgICAgICAgICAnSFInLCAnSU1HJywgJ0lOUFVUJywgJ0lTSU5ERVgnLCAnTElOSycsCiAgICAgICAgICAgICdNRVRBJywgJ1BBUkFNJ10KCi8vIEhUTUw1IHRhZ3MKJHRhZ3MgPSAkdGFncy5jb25jYXQoWydBUlRJQ0xFJywnQVNJREUnLCdGSUdVUkUnLCdGT09URVInLCdIRUFERVInLCdOQVYnLAogICAgJ1NFQ1RJT04nLCdBVURJTycsJ1ZJREVPJywnQ0FOVkFTJywnQ09NTUFORCcsJ0RBVEFMSVNUJywKICAgICdERVRBSUxTJywnT1VUUFVUJywnUFJPR1JFU1MnLCdIR1JPVVAnLCdNQVJLJywnTUVURVInLCdUSU1FJywKICAgICdSUCcsJ1JUJywnUlVCWSddKQoKLy8gY3JlYXRlIGNsYXNzZXMKdmFyIG9iaiA9IG5ldyBPYmplY3QoKQpmb3IoJGk9MDskaTwkdGFncy5sZW5ndGg7JGkrKyl7CiAgICAkY29kZSA9ICRzcmMucmVwbGFjZSgvQS9nbSwkdGFnc1skaV0pCiAgICBldmFsKCJvYmouIiskdGFnc1skaV0rIj0iKyRjb2RlKQogICAgZXZhbCgib2JqLiIrJHRhZ3NbJGldKycuX19uYW1lX189Imh0bWwuJyskdGFnc1skaV0rJyInKQp9Cm9iai5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdfQpyZXR1cm4gb2JqCn0pKCkK',
'/libs/json.js':'ZnVuY3Rpb24gX3B5KG9iail7CiAgICBpZihvYmo9PT1udWxsKXtyZXR1cm4gTm9uZX0KICAgIGlmKGlzaW5zdGFuY2Uob2JqLGxpc3QpKXsKICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICBmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgcmVzLnB1c2goX3B5KG9ialtpXSkpCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXMKICAgIH0KICAgIGlmKG9iai5fX2NsYXNzX18hPT11bmRlZmluZWQgJiYgKHR5cGVvZiBvYmohPT0nZnVuY3Rpb24nKSl7cmV0dXJuIG9ian0KICAgIGlmKHR5cGVvZiBvYmo9PT0nb2JqZWN0JyAmJiBvYmouX19jbGFzc19fPT09dW5kZWZpbmVkKXsKICAgICAgICAvLyB0cmFuc2Zvcm0gSlMgb2JqZWN0IGludG8gYSBQeXRob24gZGljdAogICAgICAgIHZhciByZXMgPSBkaWN0KCkKICAgICAgICBmb3IodmFyIGF0dHIgaW4gb2JqKXsKICAgICAgICAgICAgcmVzLl9fc2V0aXRlbV9fKGF0dHIsX3B5KG9ialthdHRyXSkpCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXMKICAgIH0KICAgIHJldHVybiBKU09iamVjdChvYmopCn0KZnVuY3Rpb24gX2pzKG9iail7CiAgICAvLyBvYmogaXMgYSBQeXRob24gb2JqZWN0CiAgICBpZiAoaXNpbnN0YW5jZShvYmosW2ludCxzdHJdKSl7cmV0dXJuIG9ian0KICAgIGVsc2UgaWYob2JqPT09Tm9uZSl7cmV0dXJuIG51bGx9CiAgICBlbHNlIGlmKG9iaj09PVRydWUpe3JldHVybiB0cnVlfQogICAgZWxzZSBpZihvYmo9PT1GYWxzZSl7cmV0dXJuIGZhbHNlfQogICAgZWxzZSBpZihpc2luc3RhbmNlKG9iaixmbG9hdCkpe3JldHVybiBvYmoudmFsdWV9CiAgICBlbHNlIGlmKGlzaW5zdGFuY2Uob2JqLFtsaXN0LHR1cGxlXSkpewogICAgICAgIHZhciByZXMgPSBbXQogICAgICAgIGZvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspe3Jlcy5wdXNoKF9qcyhvYmpbaV0pKX0KICAgICAgICByZXR1cm4gcmVzCiAgICB9ZWxzZSBpZihpc2luc3RhbmNlKG9iaixkaWN0KSl7CiAgICAgICAgdmFyIHJlcyA9IG5ldyBPYmplY3QoKQogICAgICAgIGZvcih2YXIgaT0wO2k8b2JqLiRrZXlzLmxlbmd0aDtpKyspewogICAgICAgICAgICByZXNbb2JqLiRrZXlzW2ldXT1vYmouJHZhbHVlc1tpXQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzCiAgICB9ZWxzZXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3Ioc3RyKG9iaikrJyBpcyBub3QgSlNPTiBzZXJpYWxpemFibGUnKQogICAgfQp9CgokbW9kdWxlID0gIHsKCiAgICBfX2dldGF0dHJfXyA6IGZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdfSwKCiAgICBsb2FkcyA6IGZ1bmN0aW9uKGpzb25fb2JqKXtyZXR1cm4gX3B5KEpTT04ucGFyc2UoanNvbl9vYmopKX0sCgogICAgZHVtcHMgOiBmdW5jdGlvbihvYmope3JldHVybiBKU09OLnN0cmluZ2lmeShfanMob2JqKSl9LAp9',
'/libs/math.js':'CnZhciBmbG9hdF9jaGVjaz1mdW5jdGlvbih4KSB7CiAgICBpZiAoaXNpbnN0YW5jZSh4LCBmbG9hdCkpIHJldHVybiB4LnZhbHVlOwogICAgcmV0dXJuIHg7Cn0KCnZhciBpc2luZj1mdW5jdGlvbih4KSB7CiAgICB2YXIgeDE9ZmxvYXRfY2hlY2soeCk7CiAgICByZXR1cm4geDEgPT0gLUluZmluaXR5IHx8IHgxID09IEluZmluaXR5IHx8IHgxID09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSB8fCB4MSA9PSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7Cn0KCiRtb2R1bGUgPSB7CiAgICBfX2dldGF0dHJfXyA6IGZ1bmN0aW9uKGF0dHIpewogICAgICAgIHZhciByZXMgPSB0aGlzW2F0dHJdCiAgICAgICAgaWYocmVzPT09dW5kZWZpbmVkKXskcmFpc2UoJ0F0dHJpYnV0ZUVycm9yJywnbW9kdWxlIG1hdGggaGFzIG5vIGF0dHJpYnV0ZSAnK2F0dHIpfQogICAgICAgIHJldHVybiByZXMKICAgIH0sCiAgICBhY29zOiBmdW5jdGlvbih4KSB7cmV0dXJuIGZsb2F0KE1hdGguYWNvcyhmbG9hdF9jaGVjayh4KSkpfSwKICAgIGFjb3NoOiBmdW5jdGlvbih4KSB7IAogICAgICAgIGlmIChpc2luZih4KSkgcmV0dXJuIGZsb2F0KCdpbmYnKTsKICAgICAgICB2YXIgeSA9IGZsb2F0X2NoZWNrKHgpOwogICAgICAgIHJldHVybiBNYXRoLmxvZyh5ICsgTWF0aC5zcXJ0KHkqeS0xKSk7CiAgICB9LAogICAgYXNpbjogZnVuY3Rpb24oeCkge3JldHVybiBmbG9hdChNYXRoLmFzaW4oZmxvYXRfY2hlY2soeCkpKX0sCiAgICBhc2luaDogZnVuY3Rpb24oeCkgewogICAgICAgIGlmIChpc2luZih4KSkgcmV0dXJuIGZsb2F0KCdpbmYnKTsKICAgICAgICB2YXIgeSA9IGZsb2F0X2NoZWNrKHgpOwogICAgICAgIAogICAgICAgIHJldHVybiBNYXRoLmxvZyh5ICsgTWF0aC5zcXJ0KHkqeSsxKSkKICAgIH0sCiAgICBhdGFuOiBmdW5jdGlvbih4KSB7CiAgICAgICAgaWYgKGlzaW5mKHgpKSByZXR1cm4gZmxvYXQoTWF0aC5QSS8yKTsKICAgICAgICByZXR1cm4gZmxvYXQoTWF0aC5hdGFuKGZsb2F0X2NoZWNrKHgpKSl9LAogICAgYXRhbjI6IGZ1bmN0aW9uKHkseCkge3JldHVybiBmbG9hdChNYXRoLmF0YW4yKHkseCkpfSwKICAgIGF0YW5oOiBmdW5jdGlvbih4KSB7IAogICAgICAgdmFyIHk9ZmxvYXRfY2hlY2soeCk7CiAgICAgICBpZiAoeT09MCkgcmV0dXJuIDA7CiAgICAgICByZXR1cm4gMC41ICogTWF0aC5sb2coKDEveSsxKS8oMS95LTEpKTsKICAgIH0sCiAgICBjZWlsOiBmdW5jdGlvbih4KSB7CiAgICAgICB2YXIgeT1mbG9hdF9jaGVjayh4KTsKICAgICAgIGlmICghaXNOYU4ocGFyc2VGbG9hdCh5KSkgJiYgaXNGaW5pdGUoeSkpIHJldHVybiBpbnQoTWF0aC5jZWlsKHkpKTsKICAgICAgIGlmICh5Ll9fY2VpbF9fICE9PSB1bmRlZmluZWQpIHtyZXR1cm4geS5fX2NlaWxfXygpfQogICAgICAgCiAgICAgICAkcmFpc2UoJ1ZhbHVlRXJyb3InLCAnb2JqZWN0IGlzIG5vdCBhIG51bWJlciBhbmQgZG9lcyBub3QgY29udGFpbiBfX2NlaWxfXycpCiAgICB9LAogICAgY29weXNpZ246IGZ1bmN0aW9uKHgseSkgewogICAgICAgIHZhciB4MT1mbG9hdF9jaGVjayh4KTsKICAgICAgICB2YXIgeTE9ZmxvYXRfY2hlY2soeSk7IAogICAgICAgIHZhciBzaWduPXkxP3kxPDA/LTE6MToxCiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHgxKSAqIHNpZ24gCiAgICB9LAogICAgY29zIDogZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguY29zKGZsb2F0X2NoZWNrKHgpKSl9LAogICAgZGVncmVlczogZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0X2NoZWNrKHgpICogMTgwL01hdGguUEl9LAogICAgZTogZmxvYXQoTWF0aC5FKSwKICAgIGVyZjogZnVuY3Rpb24oeCkgewogICAgICAgIC8vIGluc3BpcmVkIGZyb20gCiAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NTc0MDgvaXMtdGhlcmUtYW4tZWFzaWx5LWF2YWlsYWJsZS1pbXBsZW1lbnRhdGlvbi1vZi1lcmYtZm9yLXB5dGhvbgogICAgICAgIHZhciB5ID1mbG9hdF9jaGVjayh4KTsKICAgICAgICB2YXIgdCA9IDEuMCAvICgxLjAgKyAwLjUgKiBNYXRoLmFicyh5KSkKICAgICAgICB2YXIgYW5zID0gMSAtIHQgKiBNYXRoLmV4cCggLXkqeSAtIDEuMjY1NTEyMjMgKwogICAgICAgICAgICAgICAgICAgICB0ICogKCAxLjAwMDAyMzY4ICsKICAgICAgICAgICAgICAgICAgICAgdCAqICggMC4zNzQwOTE5NiArIAogICAgICAgICAgICAgICAgICAgICB0ICogKCAwLjA5Njc4NDE4ICsgCiAgICAgICAgICAgICAgICAgICAgIHQgKiAoLTAuMTg2Mjg4MDYgKyAKICAgICAgICAgICAgICAgICAgICAgdCAqICggMC4yNzg4NjgwNyArIAogICAgICAgICAgICAgICAgICAgICB0ICogKC0xLjEzNTIwMzk4ICsgCiAgICAgICAgICAgICAgICAgICAgIHQgKiAoIDEuNDg4NTE1ODcgKyAKICAgICAgICAgICAgICAgICAgICAgdCAqICgtMC44MjIxNTIyMyArIAogICAgICAgICAgICAgICAgICAgICB0ICogMC4xNzA4NzI3NykpKSkpKSkpKQogICAgICAgIGlmICh5ID49IDAuMCkgcmV0dXJuIGFucwoKICAgICAgICByZXR1cm4gLWFucwogICAgfSwKCiAgICBlcmZjOiBmdW5jdGlvbih4KSB7CiAgICAgICAgLy8gaW5zcGlyZWQgZnJvbSAKICAgICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ1NzQwOC9pcy10aGVyZS1hbi1lYXNpbHktYXZhaWxhYmxlLWltcGxlbWVudGF0aW9uLW9mLWVyZi1mb3ItcHl0aG9uCiAgICAgICAgdmFyIHkgPSBmbG9hdF9jaGVjayh4KTsKICAgICAgICB2YXIgdCA9IDEuMCAvICgxLjAgKyAwLjUgKiBNYXRoLmFicyh5KSkKICAgICAgICB2YXIgYW5zID0gMSAtIHQgKiBNYXRoLmV4cCggLXkqeSAtIDEuMjY1NTEyMjMgKwogICAgICAgICAgICAgICAgICAgICB0ICogKCAxLjAwMDAyMzY4ICsKICAgICAgICAgICAgICAgICAgICAgdCAqICggMC4zNzQwOTE5NiArIAogICAgICAgICAgICAgICAgICAgICB0ICogKCAwLjA5Njc4NDE4ICsgCiAgICAgICAgICAgICAgICAgICAgIHQgKiAoLTAuMTg2Mjg4MDYgKyAKICAgICAgICAgICAgICAgICAgICAgdCAqICggMC4yNzg4NjgwNyArIAogICAgICAgICAgICAgICAgICAgICB0ICogKC0xLjEzNTIwMzk4ICsgCiAgICAgICAgICAgICAgICAgICAgIHQgKiAoIDEuNDg4NTE1ODcgKyAKICAgICAgICAgICAgICAgICAgICAgdCAqICgtMC44MjIxNTIyMyArIAogICAgICAgICAgICAgICAgICAgICB0ICogMC4xNzA4NzI3NykpKSkpKSkpKQogICAgICAgIGlmICh5ID49IDAuMCkgcmV0dXJuIDEtYW5zCiAgICAgICAgcmV0dXJuIDErYW5zCiAgICB9LAogICAgZXhwOiBmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5leHAoZmxvYXRfY2hlY2soeCkpKX0sCiAgICBleHBtMTogZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguZXhwKGZsb2F0X2NoZWNrKHgpKS0xKX0sCiAgICBmYWJzOiBmdW5jdGlvbih4KXsgcmV0dXJuIHg+MD9mbG9hdCh4KTpmbG9hdCgteCl9LAogICAgZmFjdG9yaWFsOiBmdW5jdGlvbih4KSB7CiAgICAgICAgIC8vdXNpbmcgY29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzk1OTIxMS9mYXN0LWZhY3RvcmlhbC1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0CiAgICAgICAgIHZhciB5PWZsb2F0X2NoZWNrKHgpOwogICAgICAgICB2YXIgcj0xCiAgICAgICAgIGZvciAodmFyIGk9MjsgaTw9eTsgaSsrKXtyKj1pfQogICAgICAgICByZXR1cm4gcgogICAgfSwKICAgIGZsb29yOmZ1bmN0aW9uKHgpe3JldHVybiBNYXRoLmZsb29yKGZsb2F0X2NoZWNrKHgpKX0sCiAgICBmbW9kOmZ1bmN0aW9uKHgseSl7cmV0dXJuIGZsb2F0KGZsb2F0X2NoZWNrKHgpJWZsb2F0X2NoZWNrKHkpKX0sCiAgICBmcmV4cDpmdW5jdGlvbih4KXsKICAgICAgIHZhciB4MT1mbG9hdF9jaGVjayh4KTsKICAgICAgIHZhciBleCA9IE1hdGguZmxvb3IoTWF0aC5sb2coeDEpIC8gTWF0aC5sb2coMikpICsgMTsKICAgICAgIGZyYWMgPSB4MSAvIE1hdGgucG93KDIsIGV4KTsKICAgICAgIHJldHVybiBbZnJhYywgZXhdOwogICAgfSwKICAgIC8vZnN1bTpmdW5jdGlvbih4KXt9LAogICAgZ2FtbWE6IGZ1bmN0aW9uKHgpewogICAgICAgICAvL3VzaW5nIGNvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM5NTkyMTEvZmFzdC1mYWN0b3JpYWwtZnVuY3Rpb24taW4tamF2YXNjcmlwdAogICAgICAgICAvLyBMYW5jem9zIEFwcHJveGltYXRpb24gb2YgdGhlIEdhbW1hIEZ1bmN0aW9uCiAgICAgICAgIC8vIEFzIGRlc2NyaWJlZCBpbiBOdW1lcmljYWwgUmVjaXBlcyBpbiBDICgybmQgZWQuIENhbWJyaWRnZSBVbml2ZXJzaXR5IFByZXNzLCAxOTkyKQogICAgICAgICB2YXIgeT1mbG9hdF9jaGVjayh4KTsKICAgICAgICAgdmFyIHogPSB5ICsgMTsKICAgICAgICAgdmFyIGQxID0gTWF0aC5zcXJ0KDIgKiBNYXRoLlBJKSAvIHo7CgogICAgICAgICB2YXIgZDIgPSAxLjAwMDAwMDAwMDE5MDAxNTsKICAgICAgICAgZDIgKz0gIDc2LjE4MDA5MTcyOTQ3MTQ2IC8gKHorMSk7CiAgICAgICAgIGQyICs9IC04Ni41MDUzMjAzMjk0MTY3NyAvICh6KzIpOwogICAgICAgICBkMiArPSAgMjQuMDE0MDk4MjQwODMwOTEgLyAoeiszKTsgCiAgICAgICAgIGQyICs9IC0xLjIzMTczOTU3MjQ1MDE1NSAvICh6KzQpOyAKICAgICAgICAgZDIgKz0gIDEuMjA4NjUwOTczODY2MTc5RS0zIC8gKHorNSk7CiAgICAgICAgIGQyICs9IC01LjM5NTIzOTM4NDk1M0UtNiAvICh6KzYpOwoKICAgICAgICAgcmV0dXJuIGQxICogZDIgKiBNYXRoLnBvdyh6KzUuNSx6KzAuNSkgKiBNYXRoLmV4cCgtKHorNS41KSk7CiAgICB9LAogICAgaHlwb3Q6IGZ1bmN0aW9uKHgseSl7CiAgICAgICB2YXIgeDE9ZmxvYXRfY2hlY2soeCk7CiAgICAgICB2YXIgeTE9ZmxvYXRfY2hlY2soeSk7CiAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHgxKngxICsgeTEqeTEpfSwKICAgIGlzZmluaXRlOmZ1bmN0aW9uKHgpIHtyZXR1cm4gaXNGaW5pdGUoZmxvYXRfY2hlY2soeCkpfSwKICAgIGlzaW5mOmZ1bmN0aW9uKHgpIHsgcmV0dXJuIGlzaW5mKHgpO30sCiAgICBpc25hbjpmdW5jdGlvbih4KSB7cmV0dXJuIGlzTmFOKGZsb2F0X2NoZWNrKHgpKX0sCiAgICBsZGV4cDpmdW5jdGlvbih4LGkpIHtyZXR1cm4gZmxvYXRfY2hlY2soeCkgKiBNYXRoLnBvdygyLGZsb2F0X2NoZWNrKGkpKX0sCiAgICBsZ2FtbWE6ZnVuY3Rpb24oeCkgewogICAgICAgICAvLyBzZWUgZ2FtbWEgZnVuY3Rpb24gZm9yIHNvdXJjZXMKICAgICAgICAgdmFyIHk9ZmxvYXRfY2hlY2soeCk7CiAgICAgICAgIHZhciB6ID0geSArIDE7CiAgICAgICAgIHZhciBkMSA9IE1hdGguc3FydCgyICogTWF0aC5QSSkgLyB6OwoKICAgICAgICAgdmFyIGQyID0gMS4wMDAwMDAwMDAxOTAwMTU7CiAgICAgICAgIGQyICs9ICA3Ni4xODAwOTE3Mjk0NzE0NiAvICh6KzEpOwogICAgICAgICBkMiArPSAtODYuNTA1MzIwMzI5NDE2NzcgLyAoeisyKTsKICAgICAgICAgZDIgKz0gIDI0LjAxNDA5ODI0MDgzMDkxIC8gKHorMyk7IAogICAgICAgICBkMiArPSAtMS4yMzE3Mzk1NzI0NTAxNTUgLyAoeis0KTsgCiAgICAgICAgIGQyICs9ICAxLjIwODY1MDk3Mzg2NjE3OUUtMyAvICh6KzUpOwogICAgICAgICBkMiArPSAtNS4zOTUyMzkzODQ5NTNFLTYgLyAoeis2KTsKCiAgICAgICAgIHJldHVybiBNYXRoLmxvZyhNYXRoLmFicyhkMSAqIGQyICogTWF0aC5wb3coeis1LjUseiswLjUpICogTWF0aC5leHAoLSh6KzUuNSkpKSk7CiAgICB9LAogICAgbG9nOiBmdW5jdGlvbih4LCBiYXNlKSB7CiAgICAgICAgIHZhciB4MT1mbG9hdF9jaGVjayh4KTsKICAgICAgICAgaWYgKGJhc2UgPT09IHVuZGVmaW5lZCkgcmV0dXJuIE1hdGgubG9nKHgxKTsKICAgICAgICAgcmV0dXJuIE1hdGgubG9nKHgxKS9NYXRoLmxvZyhmbG9hdF9jaGVjayhiYXNlKSk7CiAgICB9LAogICAgbG9nMXA6IGZ1bmN0aW9uKHgpIHtyZXR1cm4gTWF0aC5sb2coMS4wICsgZmxvYXRfY2hlY2soeCkpfSwKICAgIGxvZzI6IGZ1bmN0aW9uKHgpIHtyZXR1cm4gTWF0aC5sb2coZmxvYXRfY2hlY2soeCkpL01hdGguTE4yfSwKICAgIGxvZzEwOiBmdW5jdGlvbih4KSB7cmV0dXJuIE1hdGgubG9nKGZsb2F0X2NoZWNrKHgpKS9NYXRoLkxOMTB9LAogICAgbW9kZjpmdW5jdGlvbih4KSB7CiAgICAgICB2YXIgeDE9ZmxvYXRfY2hlY2soeCk7CiAgICAgICBpZiAoeDEgPiAwKSB7CiAgICAgICAgICB2YXIgaT1mbG9hdCh4MS1NYXRoLmZsb29yKHgxKSk7CiAgICAgICAgICByZXR1cm4gW2ksIGZsb2F0KHgxLWkpXQogICAgICAgfQoKICAgICAgIHZhciBpPWZsb2F0KHgxLU1hdGguY2VpbCh4MSkpOwogICAgICAgcmV0dXJuIFtpLCBmbG9hdChNYXRoLmNlaWwoeDEpKV0KICAgIH0sCiAgICBwaSA6IGZsb2F0KE1hdGguUEkpLAogICAgcG93OiBmdW5jdGlvbih4LHkpIHtyZXR1cm4gTWF0aC5wb3coZmxvYXRfY2hlY2soeCksZmxvYXRfY2hlY2soeSkpfSwKICAgIHJhZGlhbnM6IGZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdF9jaGVjayh4KSAqIE1hdGguUEkvMTgwfSwKICAgIHNpbiA6IGZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLnNpbihmbG9hdF9jaGVjayh4KSkpfSwKICAgIHNxcnQgOiBmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5zcXJ0KGZsb2F0X2NoZWNrKHgpKSl9LAogICAgdHJ1bmM6IGZ1bmN0aW9uKHgpIHsKICAgICAgIHZhciB4MT1mbG9hdF9jaGVjayh4KTsKICAgICAgIGlmICghaXNOYU4ocGFyc2VGbG9hdCh4MSkpICYmIGlzRmluaXRlKHgxKSkgcmV0dXJuIGludChNYXRoLmZsb29yKHgxKSk7CiAgICAgICBpZiAoeC5fX3RydW5jX18gIT09IHVuZGVmaW5lZCkge3JldHVybiB4Ll9fdHJ1bmNfXygpfQogICAgICAgCiAgICAgICAkcmFpc2UoJ1ZhbHVlRXJyb3InLCAnb2JqZWN0IGlzIG5vdCBhIG51bWJlciBhbmQgZG9lcyBub3QgY29udGFpbiBfX3RydW5jX18nKQogICAgfQp9CgokbW9kdWxlLl9fY2xhc3NfXyA9ICRtb2R1bGUgLy8gZGVmaW5lZCBpbiAkcHlfdXRpbHMKJG1vZHVsZS5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ21hdGgnPiJ9CmZvcih2YXIgJGF0dHIgaW4gJG1vZHVsZSl7CiAgICBpZih0eXBlb2YgJG1vZHVsZVskYXR0cl09PT0nZnVuY3Rpb24nKXsKICAgICAgICAkbW9kdWxlWyRhdHRyXS5fX3JlcHJfXz0oZnVuY3Rpb24oZnVuYyl7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe3JldHVybiAnPGJ1aWx0LWluIGZ1bmN0aW9uICcrZnVuYysnPid9fSkoJGF0dHIpCiAgICAgICAgJG1vZHVsZVskYXR0cl0uX19zdHJfXz0oZnVuY3Rpb24oZnVuYyl7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe3JldHVybiAnPGJ1aWx0LWluIGZ1bmN0aW9uICcrZnVuYysnPid9fSkoJGF0dHIpCiAgICB9Cn0=',
'/libs/random.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgcmFuZG9tOmZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpfSwKICAgIHJhbmRpbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooYi1hKSthKSl9LAogICAgc2h1ZmZsZTpmdW5jdGlvbih4LCBybmQpewogICAgICBpZiAoeC5sZW5ndGggPD0gMSkgeyByZXR1cm4geH0KCiAgICAgIGlmIChybmQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICBybmQ9TWF0aC5yYW5kb20KICAgICAgfQoKICAgICAgZm9yKHZhciBqLCBvLCBpID0geC5sZW5ndGg7IGk7IGogPSBwYXJzZUludChybmQoKSAqIGkpLCBvID0geFstLWldLCB4W2ldID0geFtqXSwgeFtqXSA9IG8pOwogICAgfQp9CiRtb2R1bGUuX19jbGFzc19fID0gJG1vZHVsZSAvLyBkZWZpbmVkIGluICRweV91dGlscwokbW9kdWxlLl9fc3RyX18gPSBmdW5jdGlvbigpe3JldHVybiAiPG1vZHVsZSAncmFuZG9tJz4ifQo=',
'/libs/re.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7CiAgICAgICAgdmFyIHJlcyA9IHRoaXNbYXR0cl0KICAgICAgICBpZihyZXM9PT11bmRlZmluZWQpe3Rocm93IEF0dHJpYnV0ZUVycm9yKCJtb2R1bGUgcmUgaGFzIG5vIGF0dHJpYnV0ZSAnIithdHRyKyInIil9CiAgICAgICAgcmV0dXJuIHJlcwogICAgfSwKICAgIEkgOiAnaScsCiAgICBNIDogJ20nLAogICAgZmluZGFsbCA6IGZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nLGZsYWdzKXsKICAgICAgICB2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpCiAgICAgICAgdmFyIGFyZ3MgPSAkbnNbJ2FyZ3MnXQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjApe3ZhciBmbGFncz1hcmdzWzBdfQogICAgICAgIGVsc2V7dmFyIGZsYWdzID0gJG5zWydrdyddLmdldCgnZmxhZ3MnLCcnKX0KICAgICAgICBmbGFncyArPSAnZ20nCiAgICAgICAgdmFyIGpzcCA9IG5ldyBSZWdFeHAocGF0dGVybixmbGFncykKICAgICAgICB2YXIganNtYXRjaCA9IHN0cmluZy5tYXRjaChqc3ApCiAgICAgICAgaWYoanNtYXRjaD09PW51bGwpe3JldHVybiBbXX0KICAgICAgICByZXR1cm4ganNtYXRjaAogICAgfSwKICAgIHNlYXJjaCA6IGZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nKXsKICAgICAgICB2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpCiAgICAgICAgdmFyIGFyZ3MgPSAkbnNbJ2FyZ3MnXQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjApe3ZhciBmbGFncz1hcmdzWzBdfQogICAgICAgIGVsc2V7dmFyIGZsYWdzID0gJG5zWydrdyddLmdldCgnZmxhZ3MnLCcnKX0KICAgICAgICB2YXIganNwID0gbmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKQogICAgICAgIHZhciBqc21hdGNoID0gc3RyaW5nLm1hdGNoKGpzcCkKICAgICAgICBpZihqc21hdGNoPT09bnVsbCl7cmV0dXJuIE5vbmV9CiAgICAgICAgdmFyIG1vID0gbmV3IE9iamVjdCgpCiAgICAgICAgbW8uZ3JvdXAgPSBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBpZihqc21hdGNoW2FyZ3VtZW50c1tpXV09PT11bmRlZmluZWQpe3Jlcy5wdXNoKE5vbmUpfQogICAgICAgICAgICAgICAgZWxzZXtyZXMucHVzaChqc21hdGNoW2FyZ3VtZW50c1tpXV0pfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGg9PT0xKXtyZXR1cm4gcmVzWzBdfQogICAgICAgICAgICByZXR1cm4gcmVzCiAgICAgICAgfQogICAgICAgIG1vLmdyb3VwcyA9IGZ1bmN0aW9uKF9kZWZhdWx0KXsKICAgICAgICAgICAgaWYoX2RlZmF1bHQ9PT11bmRlZmluZWQpe19kZWZhdWx0PU5vbmV9CiAgICAgICAgICAgIHZhciByZXMgPSBbXQogICAgICAgICAgICBmb3IodmFyIGk9MTtpPGpzbWF0Y2gubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBpZihqc21hdGNoW2ldPT09dW5kZWZpbmVkKXtyZXMucHVzaChfZGVmYXVsdCl9CiAgICAgICAgICAgICAgICBlbHNle3Jlcy5wdXNoKGpzbWF0Y2hbaV0pfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXMKICAgICAgICB9CiAgICAgICAgbW8uc3RhcnQgPSBmdW5jdGlvbigpe3JldHVybiBqc21hdGNoLmluZGV4fQogICAgICAgIG1vLnN0cmluZyA9IHN0cmluZwogICAgICAgIHJldHVybiBKU09iamVjdChtbykKICAgIH0sCiAgICBzdWIgOiBmdW5jdGlvbihwYXR0ZXJuLHJlcGwsc3RyaW5nKXsKICAgICAgICB2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywncmVwbCcsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKQogICAgICAgIGZvcigkdmFyIGluICRucyl7ZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpfQogICAgICAgIHZhciBhcmdzID0gJG5zWydhcmdzJ10KICAgICAgICB2YXIgY291bnQgPSAkbnNbJ2t3J10uZ2V0KCdjb3VudCcsMCkKICAgICAgICB2YXIgZmxhZ3MgPSAkbnNbJ2t3J10uZ2V0KCdmbGFncycsJycpCiAgICAgICAgaWYoYXJncy5sZW5ndGg+MCl7dmFyIGNvdW50PWFyZ3NbMF19CiAgICAgICAgaWYoYXJncy5sZW5ndGg+MSl7dmFyIGZsYWdzPWFyZ3NbMV19CiAgICAgICAgaWYodHlwZW9mIHJlcGw9PT0ic3RyaW5nIil7CiAgICAgICAgICAgIC8vIGJhY2tyZWZlcmVuY2VzIGFyZSBcMSwgXDIuLi4gaW4gUHl0aG9uIGJ1dCAkMSwkMi4uLiBpbiBKYXZhc2NyaXB0CiAgICAgICAgICAgIHJlcGwgPSByZXBsLnJlcGxhY2UoL1xcKFxkKykvZywnJCQkMScpCiAgICAgICAgfWVsc2UgaWYodHlwZW9mIHJlcGw9PT0iZnVuY3Rpb24iKXsKICAgICAgICAgICAgLy8gdGhlIGFyZ3VtZW50IHBhc3NlZCB0byB0aGUgUHl0aG9uIGZ1bmN0aW9uIGlzIHRoZSBtYXRjaCBvYmplY3QKICAgICAgICAgICAgLy8gdGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIEphdmFzY3JpcHQgZnVuY3Rpb24gYXJlIDoKICAgICAgICAgICAgLy8gLSB0aGUgbWF0Y2hlZCBzdWJzdHJpbmcKICAgICAgICAgICAgLy8gLSB0aGUgbWF0Y2hlZCBncm91cHMKICAgICAgICAgICAgLy8gLSB0aGUgb2Zmc2V0IG9mIHRoZSBtYXRjaGVkIHN1YnN0cmluZyBpbnNpZGUgdGhlIHN0cmluZwogICAgICAgICAgICAvLyAtIHRoZSBzdHJpbmcgYmVpbmcgZXhhbWluZWQKICAgICAgICAgICAgdmFyICRyZXBsMSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgbW8gPSBPYmplY3QoKQogICAgICAgICAgICAgICAgbW8uc3RyaW5nID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV0KICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTJdCiAgICAgICAgICAgICAgICB2YXIgZW5kID0gc3RhcnQgKyBhcmd1bWVudHNbMF0ubGVuZ3RoCiAgICAgICAgICAgICAgICBtby5zdGFydCA9IGZ1bmN0aW9uKCl7cmV0dXJuIHN0YXJ0fQogICAgICAgICAgICAgICAgbW8uZW5kID0gZnVuY3Rpb24oKXtyZXR1cm4gZW5kfQogICAgICAgICAgICAgICAgZ3JvdXBzID0gW10KICAgICAgICAgICAgICAgIGZvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aC0yO2krKyl7Z3JvdXBzLnB1c2goYXJndW1lbnRzW2ldKX0KICAgICAgICAgICAgICAgIG1vLmdyb3VwcyA9IGZ1bmN0aW9uKF9kZWZhdWx0KXsKICAgICAgICAgICAgICAgICAgICBpZihfZGVmYXVsdD09PXVuZGVmaW5lZCl7X2RlZmF1bHQ9Tm9uZX0KICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpPGdyb3Vwcy5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZ3JvdXBzW2ldPT09dW5kZWZpbmVkKXtyZXMucHVzaChfZGVmYXVsdCl9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7cmVzLnB1c2goZ3JvdXBzW2ldKX0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHJlcGwoSlNPYmplY3QobW8pKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmKGNvdW50PT0wKXtmbGFncys9J2cnfQogICAgICAgIHZhciBqc3AgPSBuZXcgUmVnRXhwKHBhdHRlcm4sZmxhZ3MpCiAgICAgICAgaWYodHlwZW9mIHJlcGw9PT0nZnVuY3Rpb24nKXtyZXR1cm4gc3RyaW5nLnJlcGxhY2UoanNwLCRyZXBsMSl9CiAgICAgICAgZWxzZXtyZXR1cm4gc3RyaW5nLnJlcGxhY2UoanNwLHJlcGwpfQogICAgfQp9CgokbW9kdWxlLm1hdGNoID0gZnVuY3Rpb24oKXsKICAgIC8vIG1hdGNoIGlzIGxpa2Ugc2VhcmNoIGJ1dCBwYXR0ZXJuIG11c3Qgc3RhcnQgd2l0aCBeCiAgICBwYXR0ZXJuID0gYXJndW1lbnRzWzBdCiAgICBpZihwYXR0ZXJuLmNoYXJBdCgwKSE9PSdeJyl7cGF0dGVybiA9ICdeJytwYXR0ZXJufQogICAgdmFyIGFyZ3MgPSBbcGF0dGVybl0KICAgIGZvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspe2FyZ3MucHVzaChhcmd1bWVudHNbaV0pfQogICAgcmV0dXJuICRtb2R1bGUuc2VhcmNoLmFwcGx5KG51bGwsYXJncykKfQokbW9kdWxlLl9fY2xhc3NfXyA9ICRtb2R1bGUgLy8gZGVmaW5lZCBpbiAkcHlfdXRpbHMKJG1vZHVsZS5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ3JlJz4ifQo=',
'/libs/svg.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewoKJHN2Z05TID0gImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgokeGxpbmtOUyA9ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIgoKZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXsKICAgIC8vIHJlcHJlc2VudHMgYW4gU1ZHIHRhZwogICAgdmFyICRpID0gbnVsbAogICAgdmFyICRvYmogPSB0aGlzCiAgICBlbHQgPSAkRE9NTm9kZShkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJHN2Z05TLHRhZ19uYW1lKSkKICAgIGlmKGFyZ3MhPXVuZGVmaW5lZCAmJiBhcmdzLmxlbmd0aD4wKXsKICAgICAgICAkc3RhcnQgPSAwCiAgICAgICAgJGZpcnN0ID0gYXJnc1swXQogICAgICAgIC8vIGlmIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhIGtleXdvcmQsIGl0J3MgdGhlIHRhZyBjb250ZW50CiAgICAgICAgaWYoIWlzaW5zdGFuY2UoJGZpcnN0LCRLdykpewogICAgICAgICAgICAkc3RhcnQgPSAxCiAgICAgICAgICAgIGlmKGlzaW5zdGFuY2UoJGZpcnN0LFtzdHIsaW50LGZsb2F0XSkpewogICAgICAgICAgICAgICAgdHh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKCRmaXJzdCkpCiAgICAgICAgICAgICAgICBlbHQuYXBwZW5kQ2hpbGQodHh0KQogICAgICAgICAgICB9IGVsc2UgaWYoaXNpbnN0YW5jZSgkZmlyc3QsJEFic3RyYWN0VGFnKSl7CiAgICAgICAgICAgICAgICBmb3IoJGk9MDskaTwkZmlyc3QuY2hpbGRyZW4ubGVuZ3RoOyRpKyspewogICAgICAgICAgICAgICAgICAgIGVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuY2hpbGRyZW5bJGldKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdHJ5e2VsdC5hcHBlbmRDaGlsZCgkZmlyc3QpfQogICAgICAgICAgICAgICAgY2F0Y2goZXJyKXskcmFpc2UoJ1ZhbHVlRXJyb3InLCd3cm9uZyBlbGVtZW50ICcrJGZpcnN0KX0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyBhdHRyaWJ1dGVzCiAgICAgICAgZm9yKCRpPSRzdGFydDskaTxhcmdzLmxlbmd0aDskaSsrKXsKICAgICAgICAgICAgLy8ga2V5d29yZCBhcmd1bWVudHMKICAgICAgICAgICAgJGFyZyA9IGFyZ3NbJGldCiAgICAgICAgICAgIGlmKGlzaW5zdGFuY2UoJGFyZywkS3cpKXsKICAgICAgICAgICAgICAgIGlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigwLDIpPT0ib24iKXsgLy8gZXZlbnRzCiAgICAgICAgICAgICAgICAgICAgZXZhbCgnZWx0LicrJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkrJz1mdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfScpCiAgICAgICAgICAgICAgICB9ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKT09InN0eWxlIil7CiAgICAgICAgICAgICAgICAgICAgZWx0LnNldF9zdHlsZSgkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigiaHJlZiIpICE9PSAtMSl7IC8vIHhsaW5rOmhyZWYKICAgICAgICAgICAgICAgICAgICBlbHQuc2V0QXR0cmlidXRlTlMoICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiwiaHJlZiIsJGFyZy52YWx1ZSkKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYoJGFyZy52YWx1ZSE9PWZhbHNlKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3B0aW9uLnNlbGVjdGVkPWZhbHNlIHNldHMgaXQgdG8gdHJ1ZSA6LSkKICAgICAgICAgICAgICAgICAgICAgICAgZWx0LnNldEF0dHJpYnV0ZU5TKG51bGwsJGFyZy5uYW1lLnJlcGxhY2UoJ18nLCctJyksJGFyZy52YWx1ZSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gZWx0Cn0KCi8vIFNWRwp2YXIgJHN2Z190YWdzID0gWydhJywKJ2FsdEdseXBoJywKJ2FsdEdseXBoRGVmJywKJ2FsdEdseXBoSXRlbScsCidhbmltYXRlJywKJ2FuaW1hdGVDb2xvcicsCidhbmltYXRlTW90aW9uJywKJ2FuaW1hdGVUcmFuc2Zvcm0nLAonY2lyY2xlJywKJ2NsaXBQYXRoJywKJ2NvbG9yX3Byb2ZpbGUnLCAvLyBpbnN0ZWFkIG9mIGNvbG9yLXByb2ZpbGUKJ2N1cnNvcicsCidkZWZzJywKJ2Rlc2MnLAonZWxsaXBzZScsCidmZUJsZW5kJywKJ2cnLAonaW1hZ2UnLAonbGluZScsCidsaW5lYXJHcmFkaWVudCcsCidtYXJrZXInLAonbWFzaycsCidwYXRoJywKJ3BhdHRlcm4nLAoncG9seWdvbicsCidwb2x5bGluZScsCidyYWRpYWxHcmFkaWVudCcsCidyZWN0JywKJ3N0b3AnLAonc3ZnJywKJ3RleHQnLAondHJlZicsCid0c3BhbicsCid1c2UnXQoKJHN2ZyA9IGZ1bmN0aW9uKCl7cmV0dXJuICRTVkdUYWcoJ1gnLGFyZ3VtZW50cyl9CiRzdmcgKz0gJycgLy8gc291cmNlIGNvZGUKCnZhciBvYmogPSBuZXcgT2JqZWN0KCkKZm9yKHZhciBpPTA7aTwkc3ZnX3RhZ3MubGVuZ3RoO2krKyl7CiAgICB2YXIgdGFnID0gJHN2Z190YWdzW2ldCiAgICBldmFsKCdvYmouJyt0YWcrJz0nKyRzdmcucmVwbGFjZSgnWCcsdGFnKSkKfQpvYmouX19nZXRhdHRyX18gPSBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0KcmV0dXJuIG9iagp9KSgp',
'/libs/time.js':'JG1vZHVsZSA9ICB7CgogICAgX19nZXRhdHRyX18gOiBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0sCgogICAgY2xlYXJfaW50ZXJ2YWwgOiBmdW5jdGlvbihpbnRfaWQpe3dpbmRvdy5jbGVhckludGVydmFsKGludF9pZCl9LAoKICAgIGN0aW1lOiBmdW5jdGlvbih0aW1lc3RhbXApewogICAgICAgaWYgKHRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB0aW1lc3RhbXA9aW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDApOwogICAgICAgfQogICAgICAgdmFyIGQ9bmV3IERhdGUoMCk7ICAKICAgICAgIGQuc2V0VVRDU2Vjb25kcyh0aW1lc3RhbXApOwogICAgICAgcmV0dXJuIGQudG9VVENTdHJpbmcoKTsKICAgIH0sCgogICAgcGVyZl9jb3VudGVyOiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gZmxvYXQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKS8xMDAwLjApOwogICAgfSwKICAgIAogICAgc2V0X2ludGVydmFsIDogZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7CiAgICAgICAgcmV0dXJuIGludCh3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuYyxpbnRlcnZhbCkpCiAgICB9LAoKICAgIHNldF90aW1lb3V0IDogZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7d2luZG93LnNldFRpbWVvdXQoZnVuYyxpbnRlcnZhbCl9LAoKICAgIGxvY2FsdGltZSA6IGZ1bmN0aW9uKHNlY3MpeyAKICAgICAgIHZhciBkPW5ldyBEYXRlKCk7CiAgICAgICBpZiAoc2VjcyA9PT0gdW5kZWZpbmVkIHx8IHNlY3MgPT09IE5vbmUpIHtyZXR1cm4gZC5nZXRUaW1lKCl9CgogICAgICAgLy8gY2FsY3VsYXRlIGlmIHdlIGFyZSBpbiBkYXlsaWdodCBzYXZpbmdzIHRpbWUgb3Igbm90LgogICAgICAgLy8gYm9ycm93ZWQgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzExODg3OTM0L2NoZWNrLWlmLWRheWxpZ2h0LXNhdmluZy10aW1lLWlzLWluLWVmZmVjdC1hbmQtaWYtaXQtaXMtZm9yLWhvdy1tYW55LWhvdXJzCiAgICAgICB2YXIgamFuID0gbmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLCAwLCAxKTsKICAgICAgIHZhciBqdWwgPSBuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIDYsIDEpOwogICAgICAgdmFyIGRzdD1pbnQoZC5nZXRUaW1lem9uZU9mZnNldCgpIDwgTWF0aC5tYXgoamFuLmdldFRpbWV6b25lT2Zmc2V0KCksIGp1bC5nZXRUaW1lem9uZU9mZnNldCgpKSk7CgogICAgICAgcmV0dXJuIGxpc3QoW2QuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKzEsIGQuZ2V0RGF0ZSgpLCBkLmdldEhvdXJzKCksCiAgICAgICAgICAgICAgICAgICAgZC5nZXRNaW51dGVzKCksIGQuZ2V0U2Vjb25kcygpLCBkLmdldERheSgpLCAwLCBkc3RdKQogICAgICAgLy9maXhtZSAgKHNlY29uZCB0byBsYXN0IHZhbHVlIGlzIDAgd2hpY2ggaXMgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoaXMgeWVhci4uKQogICAgfSwKICAgIHRpbWUgOiBmdW5jdGlvbigpe3JldHVybiBpbnQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKS8xMDAwKX0sCiAgICAKICAgIHN0cmZ0aW1lIDogZnVuY3Rpb24oZm9ybWF0LGFyZyl7CgogICAgICAgIGZ1bmN0aW9uIG5zKGFyZyxuYil7CiAgICAgICAgICAgIC8vIGxlZnQgcGFkZGluZyB3aXRoIDAKICAgICAgICAgICAgdmFyIHJlcyA9IGFyZy50b1N0cmluZygpCiAgICAgICAgICAgIHdoaWxlKHJlcy5sZW5ndGg8bmIpe3JlcyA9ICcwJytyZXN9CiAgICAgICAgICAgIHJldHVybiByZXMKICAgICAgICB9CiAgICAgICAgaWYoYXJnKXt2YXIgb2JqID0gbmV3IERhdGUoYXJnKX1lbHNle3ZhciBvYmo9bmV3IERhdGUoKX0KICAgICAgICB2YXIgcmVzID0gZm9ybWF0CiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVILyxucyhvYmouZ2V0SG91cnMoKSwyKSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJU0vLG5zKG9iai5nZXRNaW51dGVzKCksMikpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVTLyxucyhvYmouZ2V0U2Vjb25kcygpLDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lWS8sbnMob2JqLmdldEZ1bGxZZWFyKCksNCkpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyV5LyxucyhvYmouZ2V0RnVsbFllYXIoKSw0KS5zdWJzdHIoMikpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVtLyxucyhvYmouZ2V0TW9udGgoKSsxLDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lZC8sbnMob2JqLmdldERhdGUoKSwyKSkKICAgICAgICByZXR1cm4gcmVzCiAgICB9Cn0K',
'/libs/_os.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgcmFuZG9tOmZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpfSwKICAgIHJhbmRpbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooYi1hKSthKSl9Cn0KJG1vZHVsZS5fX2NsYXNzX18gPSAkbW9kdWxlIC8vIGRlZmluZWQgaW4gJHB5X3V0aWxzCiRtb2R1bGUuX19zdHJfXyA9IGZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdfb3MnPiJ9Cg==',
'/libs/crypto_js/rollups/md5.js':'',
'/libs/crypto_js/rollups/sha1.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGUsbSl7dmFyIHA9e30saj1wLmxpYj17fSxsPWZ1bmN0aW9uKCl7fSxmPWouQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2wucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGw7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApuPWouV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bT9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxoKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxiPTA7YjxhO2IrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZS5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IG4uaW5pdChjLGEpfX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYi5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGI9W10sZD0wO2Q8YztkKz0yKWJbZD4+PjNdfD1wYXJzZUludChhLnN1YnN0cihkLAoyKSwxNik8PDI0LTQqKGQlOCk7cmV0dXJuIG5ldyBuLmluaXQoYixjLzIpfX0sZz1iLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyliLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2Q+Pj4yXT4+PjI0LTgqKGQlNCkmMjU1KSk7cmV0dXJuIGIuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKX19LHI9Yi5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGcuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGcucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKaz1qLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgbi5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXIucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZH1yZXR1cm4gbmV3IG4uaW5pdChnLGQpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtqLkhhc2hlcj1rLmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuKG5ldyBhLmluaXQoYikpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsZil7cmV0dXJuKG5ldyBzLkhNQUMuaW5pdChhLApmKSkuZmluYWxpemUoYil9fX0pO3ZhciBzPXAuYWxnbz17fTtyZXR1cm4gcH0oTWF0aCk7CihmdW5jdGlvbigpe3ZhciBlPUNyeXB0b0pTLG09ZS5saWIscD1tLldvcmRBcnJheSxqPW0uSGFzaGVyLGw9W10sbT1lLmFsZ28uU0hBMT1qLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBwLmluaXQoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihmLG4pe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGg9YlswXSxnPWJbMV0sZT1iWzJdLGs9YlszXSxqPWJbNF0sYT0wOzgwPmE7YSsrKXtpZigxNj5hKWxbYV09ZltuK2FdfDA7ZWxzZXt2YXIgYz1sW2EtM11ebFthLThdXmxbYS0xNF1ebFthLTE2XTtsW2FdPWM8PDF8Yz4+PjMxfWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXgprKS04OTk0OTc1MTQpO2o9aztrPWU7ZT1nPDwzMHxnPj4+MjtnPWg7aD1jfWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj10aGlzLl9kYXRhLGU9Zi53b3JkcyxiPTgqdGhpcy5fbkRhdGFCeXRlcyxoPTgqZi5zaWdCeXRlcztlW2g+Pj41XXw9MTI4PDwyNC1oJTMyO2VbKGgrNjQ+Pj45PDw0KSsxNF09TWF0aC5mbG9vcihiLzQyOTQ5NjcyOTYpO2VbKGgrNjQ+Pj45PDw0KSsxNV09YjtmLnNpZ0J5dGVzPTQqZS5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBlPWouY2xvbmUuY2FsbCh0aGlzKTtlLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gZX19KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha224.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGcsbCl7dmFyIGY9e30saz1mLmxpYj17fSxoPWZ1bmN0aW9uKCl7fSxtPWsuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2gucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGg7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApxPWsuV29yZEFycmF5PW0uZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bD9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxzKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhO2QrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZy5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHEuaW5pdChjLGEpfX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gZC5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9W10sYj0wO2I8YztiKz0yKWRbYj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihiLAoyKSwxNik8PDI0LTQqKGIlOCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjLzIpfX0sbj10LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKylkLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2I+Pj4yXT4+PjI0LTgqKGIlNCkmMjU1KSk7cmV0dXJuIGQuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKX19LGo9dC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKG4uc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG4ucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdz1rLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09bS5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcS5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPWoucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yn1yZXR1cm4gbmV3IHEuaW5pdCh1LGIpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtrLkhhc2hlcj13LmV4dGVuZCh7Y2ZnOm0uZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyBhLmluaXQoZCkpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyB2LkhNQUMuaW5pdChhLApkKSkuZmluYWxpemUoYyl9fX0pO3ZhciB2PWYuYWxnbz17fTtyZXR1cm4gZn0oTWF0aCk7CihmdW5jdGlvbihnKXtmb3IodmFyIGw9Q3J5cHRvSlMsZj1sLmxpYixrPWYuV29yZEFycmF5LGg9Zi5IYXNoZXIsZj1sLmFsZ28sbT1bXSxxPVtdLHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIDQyOTQ5NjcyOTYqKGEtKGF8MCkpfDB9LHM9MixuPTA7NjQ+bjspe3ZhciBqO2E6e2o9cztmb3IodmFyIHc9Zy5zcXJ0KGopLHY9Mjt2PD13O3YrKylpZighKGoldikpe2o9ITE7YnJlYWsgYX1qPSEwfWomJig4Pm4mJihtW25dPXQoZy5wb3cocywwLjUpKSkscVtuXT10KGcucG93KHMsMS8zKSksbisrKTtzKyt9dmFyIGE9W10sZj1mLlNIQTI1Nj1oLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBrLmluaXQobS5zbGljZSgwKSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09CmNbZCtwXXwwO2Vsc2V7dmFyIGo9YVtwLTE1XSxyPWFbcC0yXTthW3BdPSgoajw8MjV8aj4+PjcpXihqPDwxNHxqPj4+MTgpXmo+Pj4zKSthW3AtN10rKChyPDwxNXxyPj4+MTcpXihyPDwxM3xyPj4+MTkpXnI+Pj4xMCkrYVtwLTE2XX1qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDB9YlswXT1iWzBdK2V8MDtiWzFdPWJbMV0rZnwwO2JbMl09YlsyXStnfDA7YlszXT1iWzNdK2t8MDtiWzRdPWJbNF0raHwwO2JbNV09Yls1XStsfDA7Yls2XT1iWzZdK218MDtiWzddPWJbN10rbnwwfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGI9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzOwpkW2U+Pj41XXw9MTI4PDwyNC1lJTMyO2RbKGUrNjQ+Pj45PDw0KSsxNF09Zy5mbG9vcihiLzQyOTQ5NjcyOTYpO2RbKGUrNjQ+Pj45PDw0KSsxNV09YjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWguY2xvbmUuY2FsbCh0aGlzKTthLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYX19KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZil9KShNYXRoKTsKKGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBmPWsuX2RvRmluYWxpemUuY2FsbCh0aGlzKTtmLnNpZ0J5dGVzLT00O3JldHVybiBmfX0pO2cuU0hBMjI0PWsuX2NyZWF0ZUhlbHBlcihmKTtnLkhtYWNTSEEyMjQ9ay5fY3JlYXRlSG1hY0hlbHBlcihmKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha3.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKHYscCl7dmFyIGQ9e30sdT1kLmxpYj17fSxyPWZ1bmN0aW9uKCl7fSxmPXUuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe3IucHJvdG90eXBlPXRoaXM7dmFyIGI9bmV3IHI7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2IuaW5pdC5wcm90b3R5cGU9YjtiLiRzdXBlcj10aGlzO3JldHVybiBifSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApzPXUuV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYil7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YiE9cD9iOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHx5KS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGI9dGhpcy5zaWdCeXRlczthW2I+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTA7YzxhO2MrPTQpYi5wdXNoKDQyOTQ5NjcyOTYqdi5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHMuaW5pdChiLGEpfX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYy5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoLGM9W10saj0wO2o8YjtqKz0yKWNbaj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihqLAoyKSwxNik8PDI0LTQqKGolOCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiLzIpfX0sZT14LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyljLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShiW2o+Pj4yXT4+PjI0LTgqKGolNCkmMjU1KSk7cmV0dXJuIGMuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKX19LHE9eC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGUuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYil7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGUucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdD11LkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcy5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXEucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09an1yZXR1cm4gbmV3IHMuaW5pdChmLGopfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTt1Lkhhc2hlcj10LmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyBhLmluaXQoYykpLmZpbmFsaXplKGIpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyB3LkhNQUMuaW5pdChhLApjKSkuZmluYWxpemUoYil9fX0pO3ZhciB3PWQuYWxnbz17fTtyZXR1cm4gZH0oTWF0aCk7CihmdW5jdGlvbih2KXt2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5CYXNlLHI9ZC5Xb3JkQXJyYXkscD1wLng2ND17fTtwLldvcmQ9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXt0aGlzLmhpZ2g9Zjt0aGlzLmxvdz1zfX0pO3AuV29yZEFycmF5PXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7Zj10aGlzLndvcmRzPWZ8fFtdO3RoaXMuc2lnQnl0ZXM9cyE9dj9zOjgqZi5sZW5ndGh9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyl9cmV0dXJuIHIuY3JlYXRlKGQsdGhpcy5zaWdCeXRlcyl9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXUuY2xvbmUuY2FsbCh0aGlzKSxkPWYud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKSxwPWQubGVuZ3RoLHI9MDtyPHA7cisrKWRbcl09ZFtyXS5jbG9uZSgpO3JldHVybiBmfX0pfSkoKTsKKGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13fWZvcihlPTA7NT5lO2UrKylmb3IocT0wOzU+cTtxKyspeFtlKzUqcV09cSs1KigoMiplKzMqcSklNSk7ZT0xO2ZvcihxPTA7MjQ+cTtxKyspe2Zvcih2YXIgYT13PXQ9MDs3PmE7YSsrKXtpZihlJjEpe3ZhciBiPSgxPDxhKS0xOzMyPmI/d149MTw8Yjp0Xj0xPDxiLTMyfWU9ZSYxMjg/ZTw8MV4xMTM6ZTw8MX15W3FdPWYuY3JlYXRlKHQsdyl9Zm9yKHZhciBjPVtdLGU9MDsyNT5lO2UrKyljW2VdPWYuY3JlYXRlKCk7ZD1kLlNIQTM9ci5leHRlbmQoe2NmZzpyLmNmZy5leHRlbmQoe291dHB1dExlbmd0aDo1MTJ9KSxfZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl9zdGF0ZT0KW10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdDt0aGlzLmJsb2NrU2l6ZT0oMTYwMC0yKnRoaXMuY2ZnLm91dHB1dExlbmd0aCkvMzJ9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bH1mb3IoZj0wOzI0PmY7ZisrKXtmb3IoaD0wOzU+aDtoKyspe2Zvcih2YXIgZD1sPTAsaz0wOzU+aztrKyspZz1lW2grNSprXSxsXj1nLmhpZ2gsZF49Zy5sb3c7Zz1jW2hdO2cuaGlnaD1sO2cubG93PWR9Zm9yKGg9MDs1Pmg7aCsrKXtnPWNbKGgrNCklNV07bD1jWyhoKzEpJTVdO209bC5oaWdoO2s9bC5sb3c7bD1nLmhpZ2heCihtPDwxfGs+Pj4zMSk7ZD1nLmxvd14oazw8MXxtPj4+MzEpO2ZvcihrPTA7NT5rO2srKylnPWVbaCs1KmtdLGcuaGlnaF49bCxnLmxvd149ZH1mb3IobT0xOzI1Pm07bSsrKWc9ZVttXSxoPWcuaGlnaCxnPWcubG93LGs9c1ttXSwzMj5rPyhsPWg8PGt8Zz4+PjMyLWssZD1nPDxrfGg+Pj4zMi1rKToobD1nPDxrLTMyfGg+Pj42NC1rLGQ9aDw8ay0zMnxnPj4+NjQtayksZz1jW3hbbV1dLGcuaGlnaD1sLGcubG93PWQ7Zz1jWzBdO2g9ZVswXTtnLmhpZ2g9aC5oaWdoO2cubG93PWgubG93O2ZvcihoPTA7NT5oO2grKylmb3Ioaz0wOzU+aztrKyspbT1oKzUqayxnPWVbbV0sbD1jW21dLG09Y1soaCsxKSU1KzUqa10sZD1jWyhoKzIpJTUrNSprXSxnLmhpZ2g9bC5oaWdoXn5tLmhpZ2gmZC5oaWdoLGcubG93PWwubG93Xn5tLmxvdyZkLmxvdztnPWVbMF07aD15W2ZdO2cuaGlnaF49aC5oaWdoO2cubG93Xj1oLmxvd319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSwKYj1hLndvcmRzLGM9OCphLnNpZ0J5dGVzLGU9MzIqdGhpcy5ibG9ja1NpemU7YltjPj4+NV18PTE8PDI0LWMlMzI7Ylsodi5jZWlsKChjKzEpL2UpKmU+Pj41KS0xXXw9MTI4O2Euc2lnQnl0ZXM9NCpiLmxlbmd0aDt0aGlzLl9wcm9jZXNzKCk7Zm9yKHZhciBhPXRoaXMuX3N0YXRlLGI9dGhpcy5jZmcub3V0cHV0TGVuZ3RoLzgsYz1iLzgsZT1bXSxoPTA7aDxjO2grKyl7dmFyIGQ9YVtoXSxmPWQuaGlnaCxkPWQubG93LGY9KGY8PDh8Zj4+PjI0KSYxNjcxMTkzNXwoZjw8MjR8Zj4+PjgpJjQyNzgyNTUzNjAsZD0oZDw8OHxkPj4+MjQpJjE2NzExOTM1fChkPDwyNHxkPj4+OCkmNDI3ODI1NTM2MDtlLnB1c2goZCk7ZS5wdXNoKGYpfXJldHVybiBuZXcgdS5pbml0KGUsYil9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXIuY2xvbmUuY2FsbCh0aGlzKSxiPWEuX3N0YXRlPXRoaXMuX3N0YXRlLnNsaWNlKDApLGM9MDsyNT5jO2MrKyliW2NdPWJbY10uY2xvbmUoKTtyZXR1cm4gYX19KTsKcC5TSEEzPXIuX2NyZWF0ZUhlbHBlcihkKTtwLkhtYWNTSEEzPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZCl9KShNYXRoKTsK',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/sha512.js':'',
'/Lib/bisect.py':'IiIiQmlzZWN0aW9uIGFsZ29yaXRobXMuIiIiCgpkZWYgaW5zb3J0X3JpZ2h0KGEsIHgsIGxvPTAsIGhpPU5vbmUpOgogICAgIiIiSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBJZiB4IGlzIGFscmVhZHkgaW4gYSwgaW5zZXJ0IGl0IHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgeCA8IGFbbWlkXTogaGkgPSBtaWQKICAgICAgICBlbHNlOiBsbyA9IG1pZCsxCiAgICBhLmluc2VydChsbywgeCkKCmluc29ydCA9IGluc29ydF9yaWdodCAgICMgYmFja3dhcmQgY29tcGF0aWJpbGl0eQoKZGVmIGJpc2VjdF9yaWdodChhLCB4LCBsbz0wLCBoaT1Ob25lKToKICAgICIiIlJldHVybiB0aGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIFRoZSByZXR1cm4gdmFsdWUgaSBpcyBzdWNoIHRoYXQgYWxsIGUgaW4gYVs6aV0gaGF2ZSBlIDw9IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID4geC4gIFNvIGlmIHggYWxyZWFkeSBhcHBlYXJzIGluIHRoZSBsaXN0LCBhLmluc2VydCh4KSB3aWxsCiAgICBpbnNlcnQganVzdCBhZnRlciB0aGUgcmlnaHRtb3N0IHggYWxyZWFkeSB0aGVyZS4KCiAgICBPcHRpb25hbCBhcmdzIGxvIChkZWZhdWx0IDApIGFuZCBoaSAoZGVmYXVsdCBsZW4oYSkpIGJvdW5kIHRoZQogICAgc2xpY2Ugb2YgYSB0byBiZSBzZWFyY2hlZC4KICAgICIiIgoKICAgIGlmIGxvIDwgMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpCiAgICBpZiBoaSBpcyBOb25lOgogICAgICAgIGhpID0gbGVuKGEpCiAgICB3aGlsZSBsbyA8IGhpOgogICAgICAgIG1pZCA9IChsbytoaSkvLzIKICAgICAgICBpZiB4IDwgYVttaWRdOiBoaSA9IG1pZAogICAgICAgIGVsc2U6IGxvID0gbWlkKzEKICAgIHJldHVybiBsbwoKYmlzZWN0ID0gYmlzZWN0X3JpZ2h0ICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CgpkZWYgaW5zb3J0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJJbnNlcnQgaXRlbSB4IGluIGxpc3QgYSwgYW5kIGtlZXAgaXQgc29ydGVkIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIGxlZnQgb2YgdGhlIGxlZnRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICBhLmluc2VydChsbywgeCkKCgpkZWYgYmlzZWN0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJSZXR1cm4gdGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBUaGUgcmV0dXJuIHZhbHVlIGkgaXMgc3VjaCB0aGF0IGFsbCBlIGluIGFbOmldIGhhdmUgZSA8IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID49IHguICBTbyBpZiB4IGFscmVhZHkgYXBwZWFycyBpbiB0aGUgbGlzdCwgYS5pbnNlcnQoeCkgd2lsbAogICAgaW5zZXJ0IGp1c3QgYmVmb3JlIHRoZSBsZWZ0bW9zdCB4IGFscmVhZHkgdGhlcmUuCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICByZXR1cm4gbG8KCiMgZG9udCcgbmVlZCB0aGlzIGZvciBicnl0aG9uCiMgT3ZlcndyaXRlIGFib3ZlIGRlZmluaXRpb25zIHdpdGggYSBmYXN0IEMgaW1wbGVtZW50YXRpb24KI3RyeToKIyAgICBmcm9tIF9iaXNlY3QgaW1wb3J0ICoKI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgICBwYXNzCg==',
'/Lib/collections.py':'',
'/Lib/dis.py':'ZGVmIGRpcyhzcmMpOgogICAgcmV0dXJuIEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5MmpzKHNyYykpLnRvX2pzKCkK',
'/Lib/errno.py':'IlRoaXMgbW9kdWxlIG1ha2VzIGF2YWlsYWJsZSBzdGFuZGFyZCBlcnJubyBzeXN0ZW0gc3ltYm9scy5cblxuVGhlIHZhbHVlIG9mIGVhY2ggc3ltYm9sIGlzIHRoZSBjb3JyZXNwb25kaW5nIGludGVnZXIgdmFsdWUsXG5lLmcuLCBvbiBtb3N0IHN5c3RlbXMsIGVycm5vLkVOT0VOVCBlcXVhbHMgdGhlIGludGVnZXIgMi5cblxuVGhlIGRpY3Rpb25hcnkgZXJybm8uZXJyb3Jjb2RlIG1hcHMgbnVtZXJpYyBjb2RlcyB0byBzeW1ib2wgbmFtZXMsXG5lLmcuLCBlcnJuby5lcnJvcmNvZGVbMl0gY291bGQgYmUgdGhlIHN0cmluZyAnRU5PRU5UJy5cblxuU3ltYm9scyB0aGF0IGFyZSBub3QgcmVsZXZhbnQgdG8gdGhlIHVuZGVybHlpbmcgc3lzdGVtIGFyZSBub3QgZGVmaW5lZC5cblxuVG8gbWFwIGVycm9yIGNvZGVzIHRvIGVycm9yIG1lc3NhZ2VzLCB1c2UgdGhlIGZ1bmN0aW9uIG9zLnN0cmVycm9yKCksXG5lLmcuIG9zLnN0cmVycm9yKDIpIGNvdWxkIHJldHVybiAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScuIgoKRTJCSUcgPSA3CkVBQ0NFUyA9IDEzCkVBRERSSU5VU0UgPSA5OApFQUREUk5PVEFWQUlMID0gOTkKRUFEViA9IDY4CkVBRk5PU1VQUE9SVCA9IDk3CkVBR0FJTiA9IDExCkVBTFJFQURZID0gMTE0CkVCQURFID0gNTIKRUJBREYgPSA5CkVCQURGRCA9IDc3CkVCQURNU0cgPSA3NApFQkFEUiA9IDUzCkVCQURSUUMgPSA1NgpFQkFEU0xUID0gNTcKRUJGT05UID0gNTkKRUJVU1kgPSAxNgpFQ0hJTEQgPSAxMApFQ0hSTkcgPSA0NApFQ09NTSA9IDcwCkVDT05OQUJPUlRFRCA9IDEwMwpFQ09OTlJFRlVTRUQgPSAxMTEKRUNPTk5SRVNFVCA9IDEwNApFREVBRExLID0gMzUKRURFQURMT0NLID0gMzUKRURFU1RBRERSUkVRID0gODkKRURPTSA9IDMzCkVET1RET1QgPSA3MwpFRFFVT1QgPSAxMjIKRUVYSVNUID0gMTcKRUZBVUxUID0gMTQKRUZCSUcgPSAyNwpFSE9TVERPV04gPSAxMTIKRUhPU1RVTlJFQUNIID0gMTEzCkVJRFJNID0gNDMKRUlMU0VRID0gODQKRUlOUFJPR1JFU1MgPSAxMTUKRUlOVFIgPSA0CkVJTlZBTCA9IDIyCkVJTyA9IDUKRUlTQ09OTiA9IDEwNgpFSVNESVIgPSAyMQpFSVNOQU0gPSAxMjAKRUwySExUID0gNTEKRUwyTlNZTkMgPSA0NQpFTDNITFQgPSA0NgpFTDNSU1QgPSA0NwpFTElCQUNDID0gNzkKRUxJQkJBRCA9IDgwCkVMSUJFWEVDID0gODMKRUxJQk1BWCA9IDgyCkVMSUJTQ04gPSA4MQpFTE5STkcgPSA0OApFTE9PUCA9IDQwCkVNRklMRSA9IDI0CkVNTElOSyA9IDMxCkVNU0dTSVpFID0gOTAKRU1VTFRJSE9QID0gNzIKRU5BTUVUT09MT05HID0gMzYKRU5BVkFJTCA9IDExOQpFTkVURE9XTiA9IDEwMApFTkVUUkVTRVQgPSAxMDIKRU5FVFVOUkVBQ0ggPSAxMDEKRU5GSUxFID0gMjMKRU5PQU5PID0gNTUKRU5PQlVGUyA9IDEwNQpFTk9DU0kgPSA1MApFTk9EQVRBID0gNjEKRU5PREVWID0gMTkKRU5PRU5UID0gMgpFTk9FWEVDID0gOApFTk9MQ0sgPSAzNwpFTk9MSU5LID0gNjcKRU5PTUVNID0gMTIKRU5PTVNHID0gNDIKRU5PTkVUID0gNjQKRU5PUEtHID0gNjUKRU5PUFJPVE9PUFQgPSA5MgpFTk9TUEMgPSAyOApFTk9TUiA9IDYzCkVOT1NUUiA9IDYwCkVOT1NZUyA9IDM4CkVOT1RCTEsgPSAxNQpFTk9UQ09OTiA9IDEwNwpFTk9URElSID0gMjAKRU5PVEVNUFRZID0gMzkKRU5PVE5BTSA9IDExOApFTk9UU09DSyA9IDg4CkVOT1RUWSA9IDI1CkVOT1RVTklRID0gNzYKRU5YSU8gPSA2CkVPUE5PVFNVUFAgPSA5NQpFT1ZFUkZMT1cgPSA3NQpFUEVSTSA9IDEKRVBGTk9TVVBQT1JUID0gOTYKRVBJUEUgPSAzMgpFUFJPVE8gPSA3MQpFUFJPVE9OT1NVUFBPUlQgPSA5MwpFUFJPVE9UWVBFID0gOTEKRVJBTkdFID0gMzQKRVJFTUNIRyA9IDc4CkVSRU1PVEUgPSA2NgpFUkVNT1RFSU8gPSAxMjEKRVJFU1RBUlQgPSA4NQpFUk9GUyA9IDMwCkVTSFVURE9XTiA9IDEwOApFU09DS1ROT1NVUFBPUlQgPSA5NApFU1BJUEUgPSAyOQpFU1JDSCA9IDMKRVNSTU5UID0gNjkKRVNUQUxFID0gMTE2CkVTVFJQSVBFID0gODYKRVRJTUUgPSA2MgpFVElNRURPVVQgPSAxMTAKRVRPT01BTllSRUZTID0gMTA5CkVUWFRCU1kgPSAyNgpFVUNMRUFOID0gMTE3CkVVTkFUQ0ggPSA0OQpFVVNFUlMgPSA4NwpFV09VTERCTE9DSyA9IDExCkVYREVWID0gMTgKRVhGVUxMID0gNTQKIyBlcnJvcmNvZGUK',
'/Lib/heapq.py':'IiIiSGVhcCBxdWV1ZSBhbGdvcml0aG0gKGEuay5hLiBwcmlvcml0eSBxdWV1ZSkuCgpIZWFwcyBhcmUgYXJyYXlzIGZvciB3aGljaCBhW2tdIDw9IGFbMiprKzFdIGFuZCBhW2tdIDw9IGFbMiprKzJdIGZvcgphbGwgaywgY291bnRpbmcgZWxlbWVudHMgZnJvbSAwLiAgRm9yIHRoZSBzYWtlIG9mIGNvbXBhcmlzb24sCm5vbi1leGlzdGluZyBlbGVtZW50cyBhcmUgY29uc2lkZXJlZCB0byBiZSBpbmZpbml0ZS4gIFRoZSBpbnRlcmVzdGluZwpwcm9wZXJ0eSBvZiBhIGhlYXAgaXMgdGhhdCBhWzBdIGlzIGFsd2F5cyBpdHMgc21hbGxlc3QgZWxlbWVudC4KClVzYWdlOgoKaGVhcCA9IFtdICAgICAgICAgICAgIyBjcmVhdGVzIGFuIGVtcHR5IGhlYXAKaGVhcHB1c2goaGVhcCwgaXRlbSkgIyBwdXNoZXMgYSBuZXcgaXRlbSBvbiB0aGUgaGVhcAppdGVtID0gaGVhcHBvcChoZWFwKSAjIHBvcHMgdGhlIHNtYWxsZXN0IGl0ZW0gZnJvbSB0aGUgaGVhcAppdGVtID0gaGVhcFswXSAgICAgICAjIHNtYWxsZXN0IGl0ZW0gb24gdGhlIGhlYXAgd2l0aG91dCBwb3BwaW5nIGl0CmhlYXBpZnkoeCkgICAgICAgICAgICMgdHJhbnNmb3JtcyBsaXN0IGludG8gYSBoZWFwLCBpbi1wbGFjZSwgaW4gbGluZWFyIHRpbWUKaXRlbSA9IGhlYXByZXBsYWNlKGhlYXAsIGl0ZW0pICMgcG9wcyBhbmQgcmV0dXJucyBzbWFsbGVzdCBpdGVtLCBhbmQgYWRkcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBuZXcgaXRlbTsgdGhlIGhlYXAgc2l6ZSBpcyB1bmNoYW5nZWQKCk91ciBBUEkgZGlmZmVycyBmcm9tIHRleHRib29rIGhlYXAgYWxnb3JpdGhtcyBhcyBmb2xsb3dzOgoKLSBXZSB1c2UgMC1iYXNlZCBpbmRleGluZy4gIFRoaXMgbWFrZXMgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZQogIGluZGV4IGZvciBhIG5vZGUgYW5kIHRoZSBpbmRleGVzIGZvciBpdHMgY2hpbGRyZW4gc2xpZ2h0bHkgbGVzcwogIG9idmlvdXMsIGJ1dCBpcyBtb3JlIHN1aXRhYmxlIHNpbmNlIFB5dGhvbiB1c2VzIDAtYmFzZWQgaW5kZXhpbmcuCgotIE91ciBoZWFwcG9wKCkgbWV0aG9kIHJldHVybnMgdGhlIHNtYWxsZXN0IGl0ZW0sIG5vdCB0aGUgbGFyZ2VzdC4KClRoZXNlIHR3byBtYWtlIGl0IHBvc3NpYmxlIHRvIHZpZXcgdGhlIGhlYXAgYXMgYSByZWd1bGFyIFB5dGhvbiBsaXN0CndpdGhvdXQgc3VycHJpc2VzOiBoZWFwWzBdIGlzIHRoZSBzbWFsbGVzdCBpdGVtLCBhbmQgaGVhcC5zb3J0KCkKbWFpbnRhaW5zIHRoZSBoZWFwIGludmFyaWFudCEKIiIiCgojIE9yaWdpbmFsIGNvZGUgYnkgS2V2aW4gTydDb25ub3IsIGF1Z21lbnRlZCBieSBUaW0gUGV0ZXJzIGFuZCBSYXltb25kIEhldHRpbmdlcgoKX19hYm91dF9fID0gIiIiSGVhcCBxdWV1ZXMKCltleHBsYW5hdGlvbiBieSBGcmFuw6dvaXMgUGluYXJkXQoKSGVhcHMgYXJlIGFycmF5cyBmb3Igd2hpY2ggYVtrXSA8PSBhWzIqaysxXSBhbmQgYVtrXSA8PSBhWzIqaysyXSBmb3IKYWxsIGssIGNvdW50aW5nIGVsZW1lbnRzIGZyb20gMC4gIEZvciB0aGUgc2FrZSBvZiBjb21wYXJpc29uLApub24tZXhpc3RpbmcgZWxlbWVudHMgYXJlIGNvbnNpZGVyZWQgdG8gYmUgaW5maW5pdGUuICBUaGUgaW50ZXJlc3RpbmcKcHJvcGVydHkgb2YgYSBoZWFwIGlzIHRoYXQgYVswXSBpcyBhbHdheXMgaXRzIHNtYWxsZXN0IGVsZW1lbnQuCgpUaGUgc3RyYW5nZSBpbnZhcmlhbnQgYWJvdmUgaXMgbWVhbnQgdG8gYmUgYW4gZWZmaWNpZW50IG1lbW9yeQpyZXByZXNlbnRhdGlvbiBmb3IgYSB0b3VybmFtZW50LiAgVGhlIG51bWJlcnMgYmVsb3cgYXJlIGBrJywgbm90IGFba106CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAKCiAgICAgICAgICAgICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyCgogICAgICAgICAgMyAgICAgICAgICAgICAgIDQgICAgICAgICAgICAgICAgNSAgICAgICAgICAgICAgIDYKCiAgICAgIDcgICAgICAgOCAgICAgICA5ICAgICAgIDEwICAgICAgMTEgICAgICAxMiAgICAgIDEzICAgICAgMTQKCiAgICAxNSAxNiAgIDE3IDE4ICAgMTkgMjAgICAyMSAyMiAgIDIzIDI0ICAgMjUgMjYgICAyNyAyOCAgIDI5IDMwCgoKSW4gdGhlIHRyZWUgYWJvdmUsIGVhY2ggY2VsbCBgaycgaXMgdG9wcGluZyBgMiprKzEnIGFuZCBgMiprKzInLiAgSW4KYW4gdXN1YWwgYmluYXJ5IHRvdXJuYW1lbnQgd2Ugc2VlIGluIHNwb3J0cywgZWFjaCBjZWxsIGlzIHRoZSB3aW5uZXIKb3ZlciB0aGUgdHdvIGNlbGxzIGl0IHRvcHMsIGFuZCB3ZSBjYW4gdHJhY2UgdGhlIHdpbm5lciBkb3duIHRoZSB0cmVlCnRvIHNlZSBhbGwgb3Bwb25lbnRzIHMvaGUgaGFkLiAgSG93ZXZlciwgaW4gbWFueSBjb21wdXRlciBhcHBsaWNhdGlvbnMKb2Ygc3VjaCB0b3VybmFtZW50cywgd2UgZG8gbm90IG5lZWQgdG8gdHJhY2UgdGhlIGhpc3Rvcnkgb2YgYSB3aW5uZXIuClRvIGJlIG1vcmUgbWVtb3J5IGVmZmljaWVudCwgd2hlbiBhIHdpbm5lciBpcyBwcm9tb3RlZCwgd2UgdHJ5IHRvCnJlcGxhY2UgaXQgYnkgc29tZXRoaW5nIGVsc2UgYXQgYSBsb3dlciBsZXZlbCwgYW5kIHRoZSBydWxlIGJlY29tZXMKdGhhdCBhIGNlbGwgYW5kIHRoZSB0d28gY2VsbHMgaXQgdG9wcyBjb250YWluIHRocmVlIGRpZmZlcmVudCBpdGVtcywKYnV0IHRoZSB0b3AgY2VsbCAid2lucyIgb3ZlciB0aGUgdHdvIHRvcHBlZCBjZWxscy4KCklmIHRoaXMgaGVhcCBpbnZhcmlhbnQgaXMgcHJvdGVjdGVkIGF0IGFsbCB0aW1lLCBpbmRleCAwIGlzIGNsZWFybHkKdGhlIG92ZXJhbGwgd2lubmVyLiAgVGhlIHNpbXBsZXN0IGFsZ29yaXRobWljIHdheSB0byByZW1vdmUgaXQgYW5kCmZpbmQgdGhlICJuZXh0IiB3aW5uZXIgaXMgdG8gbW92ZSBzb21lIGxvc2VyIChsZXQncyBzYXkgY2VsbCAzMCBpbiB0aGUKZGlhZ3JhbSBhYm92ZSkgaW50byB0aGUgMCBwb3NpdGlvbiwgYW5kIHRoZW4gcGVyY29sYXRlIHRoaXMgbmV3IDAgZG93bgp0aGUgdHJlZSwgZXhjaGFuZ2luZyB2YWx1ZXMsIHVudGlsIHRoZSBpbnZhcmlhbnQgaXMgcmUtZXN0YWJsaXNoZWQuClRoaXMgaXMgY2xlYXJseSBsb2dhcml0aG1pYyBvbiB0aGUgdG90YWwgbnVtYmVyIG9mIGl0ZW1zIGluIHRoZSB0cmVlLgpCeSBpdGVyYXRpbmcgb3ZlciBhbGwgaXRlbXMsIHlvdSBnZXQgYW4gTyhuIGxuIG4pIHNvcnQuCgpBIG5pY2UgZmVhdHVyZSBvZiB0aGlzIHNvcnQgaXMgdGhhdCB5b3UgY2FuIGVmZmljaWVudGx5IGluc2VydCBuZXcKaXRlbXMgd2hpbGUgdGhlIHNvcnQgaXMgZ29pbmcgb24sIHByb3ZpZGVkIHRoYXQgdGhlIGluc2VydGVkIGl0ZW1zIGFyZQpub3QgImJldHRlciIgdGhhbiB0aGUgbGFzdCAwJ3RoIGVsZW1lbnQgeW91IGV4dHJhY3RlZC4gIFRoaXMgaXMKZXNwZWNpYWxseSB1c2VmdWwgaW4gc2ltdWxhdGlvbiBjb250ZXh0cywgd2hlcmUgdGhlIHRyZWUgaG9sZHMgYWxsCmluY29taW5nIGV2ZW50cywgYW5kIHRoZSAid2luIiBjb25kaXRpb24gbWVhbnMgdGhlIHNtYWxsZXN0IHNjaGVkdWxlZAp0aW1lLiAgV2hlbiBhbiBldmVudCBzY2hlZHVsZSBvdGhlciBldmVudHMgZm9yIGV4ZWN1dGlvbiwgdGhleSBhcmUKc2NoZWR1bGVkIGludG8gdGhlIGZ1dHVyZSwgc28gdGhleSBjYW4gZWFzaWx5IGdvIGludG8gdGhlIGhlYXAuICBTbywgYQpoZWFwIGlzIGEgZ29vZCBzdHJ1Y3R1cmUgZm9yIGltcGxlbWVudGluZyBzY2hlZHVsZXJzICh0aGlzIGlzIHdoYXQgSQp1c2VkIGZvciBteSBNSURJIHNlcXVlbmNlciA6LSkuCgpWYXJpb3VzIHN0cnVjdHVyZXMgZm9yIGltcGxlbWVudGluZyBzY2hlZHVsZXJzIGhhdmUgYmVlbiBleHRlbnNpdmVseQpzdHVkaWVkLCBhbmQgaGVhcHMgYXJlIGdvb2QgZm9yIHRoaXMsIGFzIHRoZXkgYXJlIHJlYXNvbmFibHkgc3BlZWR5LAp0aGUgc3BlZWQgaXMgYWxtb3N0IGNvbnN0YW50LCBhbmQgdGhlIHdvcnN0IGNhc2UgaXMgbm90IG11Y2ggZGlmZmVyZW50CnRoYW4gdGhlIGF2ZXJhZ2UgY2FzZS4gIEhvd2V2ZXIsIHRoZXJlIGFyZSBvdGhlciByZXByZXNlbnRhdGlvbnMgd2hpY2gKYXJlIG1vcmUgZWZmaWNpZW50IG92ZXJhbGwsIHlldCB0aGUgd29yc3QgY2FzZXMgbWlnaHQgYmUgdGVycmlibGUuCgpIZWFwcyBhcmUgYWxzbyB2ZXJ5IHVzZWZ1bCBpbiBiaWcgZGlzayBzb3J0cy4gIFlvdSBtb3N0IHByb2JhYmx5IGFsbAprbm93IHRoYXQgYSBiaWcgc29ydCBpbXBsaWVzIHByb2R1Y2luZyAicnVucyIgKHdoaWNoIGFyZSBwcmUtc29ydGVkCnNlcXVlbmNlcywgd2hpY2ggc2l6ZSBpcyB1c3VhbGx5IHJlbGF0ZWQgdG8gdGhlIGFtb3VudCBvZiBDUFUgbWVtb3J5KSwKZm9sbG93ZWQgYnkgYSBtZXJnaW5nIHBhc3NlcyBmb3IgdGhlc2UgcnVucywgd2hpY2ggbWVyZ2luZyBpcyBvZnRlbgp2ZXJ5IGNsZXZlcmx5IG9yZ2FuaXNlZFsxXS4gIEl0IGlzIHZlcnkgaW1wb3J0YW50IHRoYXQgdGhlIGluaXRpYWwKc29ydCBwcm9kdWNlcyB0aGUgbG9uZ2VzdCBydW5zIHBvc3NpYmxlLiAgVG91cm5hbWVudHMgYXJlIGEgZ29vZCB3YXkKdG8gdGhhdC4gIElmLCB1c2luZyBhbGwgdGhlIG1lbW9yeSBhdmFpbGFibGUgdG8gaG9sZCBhIHRvdXJuYW1lbnQsIHlvdQpyZXBsYWNlIGFuZCBwZXJjb2xhdGUgaXRlbXMgdGhhdCBoYXBwZW4gdG8gZml0IHRoZSBjdXJyZW50IHJ1biwgeW91J2xsCnByb2R1Y2UgcnVucyB3aGljaCBhcmUgdHdpY2UgdGhlIHNpemUgb2YgdGhlIG1lbW9yeSBmb3IgcmFuZG9tIGlucHV0LAphbmQgbXVjaCBiZXR0ZXIgZm9yIGlucHV0IGZ1enppbHkgb3JkZXJlZC4KCk1vcmVvdmVyLCBpZiB5b3Ugb3V0cHV0IHRoZSAwJ3RoIGl0ZW0gb24gZGlzayBhbmQgZ2V0IGFuIGlucHV0IHdoaWNoCm1heSBub3QgZml0IGluIHRoZSBjdXJyZW50IHRvdXJuYW1lbnQgKGJlY2F1c2UgdGhlIHZhbHVlICJ3aW5zIiBvdmVyCnRoZSBsYXN0IG91dHB1dCB2YWx1ZSksIGl0IGNhbm5vdCBmaXQgaW4gdGhlIGhlYXAsIHNvIHRoZSBzaXplIG9mIHRoZQpoZWFwIGRlY3JlYXNlcy4gIFRoZSBmcmVlZCBtZW1vcnkgY291bGQgYmUgY2xldmVybHkgcmV1c2VkIGltbWVkaWF0ZWx5CmZvciBwcm9ncmVzc2l2ZWx5IGJ1aWxkaW5nIGEgc2Vjb25kIGhlYXAsIHdoaWNoIGdyb3dzIGF0IGV4YWN0bHkgdGhlCnNhbWUgcmF0ZSB0aGUgZmlyc3QgaGVhcCBpcyBtZWx0aW5nLiAgV2hlbiB0aGUgZmlyc3QgaGVhcCBjb21wbGV0ZWx5CnZhbmlzaGVzLCB5b3Ugc3dpdGNoIGhlYXBzIGFuZCBzdGFydCBhIG5ldyBydW4uICBDbGV2ZXIgYW5kIHF1aXRlCmVmZmVjdGl2ZSEKCkluIGEgd29yZCwgaGVhcHMgYXJlIHVzZWZ1bCBtZW1vcnkgc3RydWN0dXJlcyB0byBrbm93LiAgSSB1c2UgdGhlbSBpbgphIGZldyBhcHBsaWNhdGlvbnMsIGFuZCBJIHRoaW5rIGl0IGlzIGdvb2QgdG8ga2VlcCBhIGBoZWFwJyBtb2R1bGUKYXJvdW5kLiA6LSkKCi0tLS0tLS0tLS0tLS0tLS0tLS0tClsxXSBUaGUgZGlzayBiYWxhbmNpbmcgYWxnb3JpdGhtcyB3aGljaCBhcmUgY3VycmVudCwgbm93YWRheXMsIGFyZQptb3JlIGFubm95aW5nIHRoYW4gY2xldmVyLCBhbmQgdGhpcyBpcyBhIGNvbnNlcXVlbmNlIG9mIHRoZSBzZWVraW5nCmNhcGFiaWxpdGllcyBvZiB0aGUgZGlza3MuICBPbiBkZXZpY2VzIHdoaWNoIGNhbm5vdCBzZWVrLCBsaWtlIGJpZwp0YXBlIGRyaXZlcywgdGhlIHN0b3J5IHdhcyBxdWl0ZSBkaWZmZXJlbnQsIGFuZCBvbmUgaGFkIHRvIGJlIHZlcnkKY2xldmVyIHRvIGVuc3VyZSAoZmFyIGluIGFkdmFuY2UpIHRoYXQgZWFjaCB0YXBlIG1vdmVtZW50IHdpbGwgYmUgdGhlCm1vc3QgZWZmZWN0aXZlIHBvc3NpYmxlICh0aGF0IGlzLCB3aWxsIGJlc3QgcGFydGljaXBhdGUgYXQKInByb2dyZXNzaW5nIiB0aGUgbWVyZ2UpLiAgU29tZSB0YXBlcyB3ZXJlIGV2ZW4gYWJsZSB0byByZWFkCmJhY2t3YXJkcywgYW5kIHRoaXMgd2FzIGFsc28gdXNlZCB0byBhdm9pZCB0aGUgcmV3aW5kaW5nIHRpbWUuCkJlbGlldmUgbWUsIHJlYWwgZ29vZCB0YXBlIHNvcnRzIHdlcmUgcXVpdGUgc3BlY3RhY3VsYXIgdG8gd2F0Y2ghCkZyb20gYWxsIHRpbWVzLCBzb3J0aW5nIGhhcyBhbHdheXMgYmVlbiBhIEdyZWF0IEFydCEgOi0pCiIiIgoKX19hbGxfXyA9IFsnaGVhcHB1c2gnLCAnaGVhcHBvcCcsICdoZWFwaWZ5JywgJ2hlYXByZXBsYWNlJywgJ21lcmdlJywKICAgICAgICAgICAnbmxhcmdlc3QnLCAnbnNtYWxsZXN0JywgJ2hlYXBwdXNocG9wJ10KCmZyb20gaXRlcnRvb2xzIGltcG9ydCBpc2xpY2UsIHJlcGVhdCwgY291bnQsIHRlZSwgY2hhaW4KaW1wb3J0IGJpc2VjdAoKZGVmIGhlYXBwdXNoKGhlYXAsIGl0ZW0pOgogICAgIiIiUHVzaCBpdGVtIG9udG8gaGVhcCwgbWFpbnRhaW5pbmcgdGhlIGhlYXAgaW52YXJpYW50LiIiIgogICAgaGVhcC5hcHBlbmQoaXRlbSkKICAgIF9zaWZ0ZG93bihoZWFwLCAwLCBsZW4oaGVhcCktMSkKCmRlZiBoZWFwcG9wKGhlYXApOgogICAgIiIiUG9wIHRoZSBzbWFsbGVzdCBpdGVtIG9mZiB0aGUgaGVhcCwgbWFpbnRhaW5pbmcgdGhlIGhlYXAgaW52YXJpYW50LiIiIgogICAgbGFzdGVsdCA9IGhlYXAucG9wKCkgICAgIyByYWlzZXMgYXBwcm9wcmlhdGUgSW5kZXhFcnJvciBpZiBoZWFwIGlzIGVtcHR5CiAgICBpZiBoZWFwOgogICAgICAgIHJldHVybml0ZW0gPSBoZWFwWzBdCiAgICAgICAgaGVhcFswXSA9IGxhc3RlbHQKICAgICAgICBfc2lmdHVwKGhlYXAsIDApCiAgICBlbHNlOgogICAgICAgIHJldHVybml0ZW0gPSBsYXN0ZWx0CiAgICByZXR1cm4gcmV0dXJuaXRlbQoKZGVmIGhlYXByZXBsYWNlKGhlYXAsIGl0ZW0pOgogICAgIiIiUG9wIGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgc21hbGxlc3QgdmFsdWUsIGFuZCBhZGQgdGhlIG5ldyBpdGVtLgoKICAgIFRoaXMgaXMgbW9yZSBlZmZpY2llbnQgdGhhbiBoZWFwcG9wKCkgZm9sbG93ZWQgYnkgaGVhcHB1c2goKSwgYW5kIGNhbiBiZQogICAgbW9yZSBhcHByb3ByaWF0ZSB3aGVuIHVzaW5nIGEgZml4ZWQtc2l6ZSBoZWFwLiAgTm90ZSB0aGF0IHRoZSB2YWx1ZQogICAgcmV0dXJuZWQgbWF5IGJlIGxhcmdlciB0aGFuIGl0ZW0hICBUaGF0IGNvbnN0cmFpbnMgcmVhc29uYWJsZSB1c2VzIG9mCiAgICB0aGlzIHJvdXRpbmUgdW5sZXNzIHdyaXR0ZW4gYXMgcGFydCBvZiBhIGNvbmRpdGlvbmFsIHJlcGxhY2VtZW50OgoKICAgICAgICBpZiBpdGVtID4gaGVhcFswXToKICAgICAgICAgICAgaXRlbSA9IGhlYXByZXBsYWNlKGhlYXAsIGl0ZW0pCiAgICAiIiIKICAgIHJldHVybml0ZW0gPSBoZWFwWzBdICAgICMgcmFpc2VzIGFwcHJvcHJpYXRlIEluZGV4RXJyb3IgaWYgaGVhcCBpcyBlbXB0eQogICAgaGVhcFswXSA9IGl0ZW0KICAgIF9zaWZ0dXAoaGVhcCwgMCkKICAgIHJldHVybiByZXR1cm5pdGVtCgpkZWYgaGVhcHB1c2hwb3AoaGVhcCwgaXRlbSk6CiAgICAiIiJGYXN0IHZlcnNpb24gb2YgYSBoZWFwcHVzaCBmb2xsb3dlZCBieSBhIGhlYXBwb3AuIiIiCiAgICBpZiBoZWFwIGFuZCBoZWFwWzBdIDwgaXRlbToKICAgICAgICBpdGVtLCBoZWFwWzBdID0gaGVhcFswXSwgaXRlbQogICAgICAgIF9zaWZ0dXAoaGVhcCwgMCkKICAgIHJldHVybiBpdGVtCgpkZWYgaGVhcGlmeSh4KToKICAgICIiIlRyYW5zZm9ybSBsaXN0IGludG8gYSBoZWFwLCBpbi1wbGFjZSwgaW4gTyhsZW4oeCkpIHRpbWUuIiIiCiAgICBuID0gbGVuKHgpCiAgICAjIFRyYW5zZm9ybSBib3R0b20tdXAuICBUaGUgbGFyZ2VzdCBpbmRleCB0aGVyZSdzIGFueSBwb2ludCB0byBsb29raW5nIGF0CiAgICAjIGlzIHRoZSBsYXJnZXN0IHdpdGggYSBjaGlsZCBpbmRleCBpbi1yYW5nZSwgc28gbXVzdCBoYXZlIDIqaSArIDEgPCBuLAogICAgIyBvciBpIDwgKG4tMSkvMi4gIElmIG4gaXMgZXZlbiA9IDIqaiwgdGhpcyBpcyAoMipqLTEpLzIgPSBqLTEvMiBzbwogICAgIyBqLTEgaXMgdGhlIGxhcmdlc3QsIHdoaWNoIGlzIG4vLzIgLSAxLiAgSWYgbiBpcyBvZGQgPSAyKmorMSwgdGhpcyBpcwogICAgIyAoMipqKzEtMSkvMiA9IGogc28gai0xIGlzIHRoZSBsYXJnZXN0LCBhbmQgdGhhdCdzIGFnYWluIG4vLzItMS4KICAgIGZvciBpIGluIHJldmVyc2VkKHJhbmdlKG4vLzIpKToKICAgICAgICBfc2lmdHVwKHgsIGkpCgpkZWYgbmxhcmdlc3QobiwgaXRlcmFibGUpOgogICAgIiIiRmluZCB0aGUgbiBsYXJnZXN0IGVsZW1lbnRzIGluIGEgZGF0YXNldC4KCiAgICBFcXVpdmFsZW50IHRvOiAgc29ydGVkKGl0ZXJhYmxlLCByZXZlcnNlPVRydWUpWzpuXQogICAgIiIiCiAgICBpZiBuIDwgMDoKICAgICAgICByZXR1cm4gW10KICAgIGl0ID0gaXRlcihpdGVyYWJsZSkKICAgIHJlc3VsdCA9IGxpc3QoaXNsaWNlKGl0LCBuKSkKICAgIGlmIG5vdCByZXN1bHQ6CiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgaGVhcGlmeShyZXN1bHQpCiAgICBfaGVhcHB1c2hwb3AgPSBoZWFwcHVzaHBvcAogICAgZm9yIGVsZW0gaW4gaXQ6CiAgICAgICAgX2hlYXBwdXNocG9wKHJlc3VsdCwgZWxlbSkKICAgIHJlc3VsdC5zb3J0KHJldmVyc2U9VHJ1ZSkKICAgIHJldHVybiByZXN1bHQKCmRlZiBuc21hbGxlc3QobiwgaXRlcmFibGUpOgogICAgIiIiRmluZCB0aGUgbiBzbWFsbGVzdCBlbGVtZW50cyBpbiBhIGRhdGFzZXQuCgogICAgRXF1aXZhbGVudCB0bzogIHNvcnRlZChpdGVyYWJsZSlbOm5dCiAgICAiIiIKICAgIGlmIG4gPCAwOgogICAgICAgIHJldHVybiBbXQogICAgaWYgaGFzYXR0cihpdGVyYWJsZSwgJ19fbGVuX18nKSBhbmQgbiAqIDEwIDw9IGxlbihpdGVyYWJsZSk6CiAgICAgICAgIyBGb3Igc21hbGxlciB2YWx1ZXMgb2YgbiwgdGhlIGJpc2VjdCBtZXRob2QgaXMgZmFzdGVyIHRoYW4gYSBtaW5oZWFwLgogICAgICAgICMgSXQgaXMgYWxzbyBtZW1vcnkgZWZmaWNpZW50LCBjb25zdW1pbmcgb25seSBuIGVsZW1lbnRzIG9mIHNwYWNlLgogICAgICAgIGl0ID0gaXRlcihpdGVyYWJsZSkKICAgICAgICByZXN1bHQgPSBzb3J0ZWQoaXNsaWNlKGl0LCAwLCBuKSkKICAgICAgICBpZiBub3QgcmVzdWx0OgogICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgaW5zb3J0ID0gYmlzZWN0Lmluc29ydAogICAgICAgIHBvcCA9IHJlc3VsdC5wb3AKICAgICAgICBsb3MgPSByZXN1bHRbLTFdICAgICMgbG9zIC0tPiBMYXJnZXN0IG9mIHRoZSBuc21hbGxlc3QKICAgICAgICBmb3IgZWxlbSBpbiBpdDoKICAgICAgICAgICAgaWYgZWxlbSA8IGxvczoKICAgICAgICAgICAgICAgIGluc29ydChyZXN1bHQsIGVsZW0pCiAgICAgICAgICAgICAgICBwb3AoKQogICAgICAgICAgICAgICAgbG9zID0gcmVzdWx0Wy0xXQogICAgICAgIHJldHVybiByZXN1bHQKICAgICMgQW4gYWx0ZXJuYXRpdmUgYXBwcm9hY2ggbWFuaWZlc3RzIHRoZSB3aG9sZSBpdGVyYWJsZSBpbiBtZW1vcnkgYnV0CiAgICAjIHNhdmVzIGNvbXBhcmlzb25zIGJ5IGhlYXBpZnlpbmcgYWxsIGF0IG9uY2UuICBBbHNvLCBzYXZlcyB0aW1lCiAgICAjIG92ZXIgYmlzZWN0Lmluc29ydCgpIHdoaWNoIGhhcyBPKG4pIGRhdGEgbW92ZW1lbnQgdGltZSBmb3IgZXZlcnkKICAgICMgaW5zZXJ0aW9uLiAgRmluZGluZyB0aGUgbiBzbWFsbGVzdCBvZiBhbiBtIGxlbmd0aCBpdGVyYWJsZSByZXF1aXJlcwogICAgIyAgICBPKG0pICsgTyhuIGxvZyBtKSBjb21wYXJpc29ucy4KICAgIGggPSBsaXN0KGl0ZXJhYmxlKQogICAgaGVhcGlmeShoKQogICAgcmV0dXJuIGxpc3QobWFwKGhlYXBwb3AsIHJlcGVhdChoLCBtaW4obiwgbGVuKGgpKSkpKQoKIyAnaGVhcCcgaXMgYSBoZWFwIGF0IGFsbCBpbmRpY2VzID49IHN0YXJ0cG9zLCBleGNlcHQgcG9zc2libHkgZm9yIHBvcy4gIHBvcwojIGlzIHRoZSBpbmRleCBvZiBhIGxlYWYgd2l0aCBhIHBvc3NpYmx5IG91dC1vZi1vcmRlciB2YWx1ZS4gIFJlc3RvcmUgdGhlCiMgaGVhcCBpbnZhcmlhbnQuCmRlZiBfc2lmdGRvd24oaGVhcCwgc3RhcnRwb3MsIHBvcyk6CiAgICBuZXdpdGVtID0gaGVhcFtwb3NdCiAgICAjIEZvbGxvdyB0aGUgcGF0aCB0byB0aGUgcm9vdCwgbW92aW5nIHBhcmVudHMgZG93biB1bnRpbCBmaW5kaW5nIGEgcGxhY2UKICAgICMgbmV3aXRlbSBmaXRzLgogICAgd2hpbGUgcG9zID4gc3RhcnRwb3M6CiAgICAgICAgcGFyZW50cG9zID0gKHBvcyAtIDEpID4+IDEKICAgICAgICBwYXJlbnQgPSBoZWFwW3BhcmVudHBvc10KICAgICAgICBpZiBuZXdpdGVtIDwgcGFyZW50OgogICAgICAgICAgICBoZWFwW3Bvc10gPSBwYXJlbnQKICAgICAgICAgICAgcG9zID0gcGFyZW50cG9zCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgYnJlYWsKICAgIGhlYXBbcG9zXSA9IG5ld2l0ZW0KCiMgVGhlIGNoaWxkIGluZGljZXMgb2YgaGVhcCBpbmRleCBwb3MgYXJlIGFscmVhZHkgaGVhcHMsIGFuZCB3ZSB3YW50IHRvIG1ha2UKIyBhIGhlYXAgYXQgaW5kZXggcG9zIHRvby4gIFdlIGRvIHRoaXMgYnkgYnViYmxpbmcgdGhlIHNtYWxsZXIgY2hpbGQgb2YKIyBwb3MgdXAgKGFuZCBzbyBvbiB3aXRoIHRoYXQgY2hpbGQncyBjaGlsZHJlbiwgZXRjKSB1bnRpbCBoaXR0aW5nIGEgbGVhZiwKIyB0aGVuIHVzaW5nIF9zaWZ0ZG93biB0byBtb3ZlIHRoZSBvZGRiYWxsIG9yaWdpbmFsbHkgYXQgaW5kZXggcG9zIGludG8gcGxhY2UuCiMKIyBXZSAqY291bGQqIGJyZWFrIG91dCBvZiB0aGUgbG9vcCBhcyBzb29uIGFzIHdlIGZpbmQgYSBwb3Mgd2hlcmUgbmV3aXRlbSA8PQojIGJvdGggaXRzIGNoaWxkcmVuLCBidXQgdHVybnMgb3V0IHRoYXQncyBub3QgYSBnb29kIGlkZWEsIGFuZCBkZXNwaXRlIHRoYXQKIyBtYW55IGJvb2tzIHdyaXRlIHRoZSBhbGdvcml0aG0gdGhhdCB3YXkuICBEdXJpbmcgYSBoZWFwIHBvcCwgdGhlIGxhc3QgYXJyYXkKIyBlbGVtZW50IGlzIHNpZnRlZCBpbiwgYW5kIHRoYXQgdGVuZHMgdG8gYmUgbGFyZ2UsIHNvIHRoYXQgY29tcGFyaW5nIGl0CiMgYWdhaW5zdCB2YWx1ZXMgc3RhcnRpbmcgZnJvbSB0aGUgcm9vdCB1c3VhbGx5IGRvZXNuJ3QgcGF5ICg9IHVzdWFsbHkgZG9lc24ndAojIGdldCB1cyBvdXQgb2YgdGhlIGxvb3AgZWFybHkpLiAgU2VlIEtudXRoLCBWb2x1bWUgMywgd2hlcmUgdGhpcyBpcwojIGV4cGxhaW5lZCBhbmQgcXVhbnRpZmllZCBpbiBhbiBleGVyY2lzZS4KIwojIEN1dHRpbmcgdGhlICMgb2YgY29tcGFyaXNvbnMgaXMgaW1wb3J0YW50LCBzaW5jZSB0aGVzZSByb3V0aW5lcyBoYXZlIG5vCiMgd2F5IHRvIGV4dHJhY3QgInRoZSBwcmlvcml0eSIgZnJvbSBhbiBhcnJheSBlbGVtZW50LCBzbyB0aGF0IGludGVsbGlnZW5jZQojIGlzIGxpa2VseSB0byBiZSBoaWRpbmcgaW4gY3VzdG9tIGNvbXBhcmlzb24gbWV0aG9kcywgb3IgaW4gYXJyYXkgZWxlbWVudHMKIyBzdG9yaW5nIChwcmlvcml0eSwgcmVjb3JkKSB0dXBsZXMuICBDb21wYXJpc29ucyBhcmUgdGh1cyBwb3RlbnRpYWxseQojIGV4cGVuc2l2ZS4KIwojIE9uIHJhbmRvbSBhcnJheXMgb2YgbGVuZ3RoIDEwMDAsIG1ha2luZyB0aGlzIGNoYW5nZSBjdXQgdGhlIG51bWJlciBvZgojIGNvbXBhcmlzb25zIG1hZGUgYnkgaGVhcGlmeSgpIGEgbGl0dGxlLCBhbmQgdGhvc2UgbWFkZSBieSBleGhhdXN0aXZlCiMgaGVhcHBvcCgpIGEgbG90LCBpbiBhY2NvcmQgd2l0aCB0aGVvcnkuICBIZXJlIGFyZSB0eXBpY2FsIHJlc3VsdHMgZnJvbSAzCiMgcnVucyAoMyBqdXN0IHRvIGRlbW9uc3RyYXRlIGhvdyBzbWFsbCB0aGUgdmFyaWFuY2UgaXMpOgojCiMgQ29tcGFyZXMgbmVlZGVkIGJ5IGhlYXBpZnkgICAgIENvbXBhcmVzIG5lZWRlZCBieSAxMDAwIGhlYXBwb3BzCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgMTgzNyBjdXQgdG8gMTY2MyAgICAgICAgICAgICAgIDE0OTk2IGN1dCB0byA4NjgwCiMgMTg1NSBjdXQgdG8gMTY1OSAgICAgICAgICAgICAgIDE0OTY2IGN1dCB0byA4Njc4CiMgMTg0NyBjdXQgdG8gMTY2MCAgICAgICAgICAgICAgIDE1MDI0IGN1dCB0byA4NzAzCiMKIyBCdWlsZGluZyB0aGUgaGVhcCBieSB1c2luZyBoZWFwcHVzaCgpIDEwMDAgdGltZXMgaW5zdGVhZCByZXF1aXJlZAojIDIxOTgsIDIxNDgsIGFuZCAyMjE5IGNvbXBhcmVzOiAgaGVhcGlmeSgpIGlzIG1vcmUgZWZmaWNpZW50LCB3aGVuCiMgeW91IGNhbiB1c2UgaXQuCiMKIyBUaGUgdG90YWwgY29tcGFyZXMgbmVlZGVkIGJ5IGxpc3Quc29ydCgpIG9uIHRoZSBzYW1lIGxpc3RzIHdlcmUgODYyNywKIyA4NjI3LCBhbmQgODYzMiAodGhpcyBzaG91bGQgYmUgY29tcGFyZWQgdG8gdGhlIHN1bSBvZiBoZWFwaWZ5KCkgYW5kCiMgaGVhcHBvcCgpIGNvbXBhcmVzKTogIGxpc3Quc29ydCgpIGlzICh1bnN1cnByaXNpbmdseSEpIG1vcmUgZWZmaWNpZW50CiMgZm9yIHNvcnRpbmcuCgpkZWYgX3NpZnR1cChoZWFwLCBwb3MpOgogICAgZW5kcG9zID0gbGVuKGhlYXApCiAgICBzdGFydHBvcyA9IHBvcwogICAgbmV3aXRlbSA9IGhlYXBbcG9zXQogICAgIyBCdWJibGUgdXAgdGhlIHNtYWxsZXIgY2hpbGQgdW50aWwgaGl0dGluZyBhIGxlYWYuCiAgICBjaGlsZHBvcyA9IDIqcG9zICsgMSAgICAjIGxlZnRtb3N0IGNoaWxkIHBvc2l0aW9uCiAgICB3aGlsZSBjaGlsZHBvcyA8IGVuZHBvczoKICAgICAgICAjIFNldCBjaGlsZHBvcyB0byBpbmRleCBvZiBzbWFsbGVyIGNoaWxkLgogICAgICAgIHJpZ2h0cG9zID0gY2hpbGRwb3MgKyAxCiAgICAgICAgaWYgcmlnaHRwb3MgPCBlbmRwb3MgYW5kIG5vdCBoZWFwW2NoaWxkcG9zXSA8IGhlYXBbcmlnaHRwb3NdOgogICAgICAgICAgICBjaGlsZHBvcyA9IHJpZ2h0cG9zCiAgICAgICAgIyBNb3ZlIHRoZSBzbWFsbGVyIGNoaWxkIHVwLgogICAgICAgIGhlYXBbcG9zXSA9IGhlYXBbY2hpbGRwb3NdCiAgICAgICAgcG9zID0gY2hpbGRwb3MKICAgICAgICBjaGlsZHBvcyA9IDIqcG9zICsgMQogICAgIyBUaGUgbGVhZiBhdCBwb3MgaXMgZW1wdHkgbm93LiAgUHV0IG5ld2l0ZW0gdGhlcmUsIGFuZCBidWJibGUgaXQgdXAKICAgICMgdG8gaXRzIGZpbmFsIHJlc3RpbmcgcGxhY2UgKGJ5IHNpZnRpbmcgaXRzIHBhcmVudHMgZG93bikuCiAgICBoZWFwW3Bvc10gPSBuZXdpdGVtCiAgICBfc2lmdGRvd24oaGVhcCwgc3RhcnRwb3MsIHBvcykKCiMgbm90IGF2YWlsYWJsZSBpbiBicnl0aG9uCiMgSWYgYXZhaWxhYmxlLCB1c2UgQyBpbXBsZW1lbnRhdGlvbgojdHJ5OgojICAgIGZyb20gX2hlYXBxIGltcG9ydCAqCiNleGNlcHQgSW1wb3J0RXJyb3I6CiMgICAgcGFzcwoKZGVmIG1lcmdlKCppdGVyYWJsZXMpOgogICAgJycnTWVyZ2UgbXVsdGlwbGUgc29ydGVkIGlucHV0cyBpbnRvIGEgc2luZ2xlIHNvcnRlZCBvdXRwdXQuCgogICAgU2ltaWxhciB0byBzb3J0ZWQoaXRlcnRvb2xzLmNoYWluKCppdGVyYWJsZXMpKSBidXQgcmV0dXJucyBhIGdlbmVyYXRvciwKICAgIGRvZXMgbm90IHB1bGwgdGhlIGRhdGEgaW50byBtZW1vcnkgYWxsIGF0IG9uY2UsIGFuZCBhc3N1bWVzIHRoYXQgZWFjaCBvZgogICAgdGhlIGlucHV0IHN0cmVhbXMgaXMgYWxyZWFkeSBzb3J0ZWQgKHNtYWxsZXN0IHRvIGxhcmdlc3QpLgoKICAgID4+PiBsaXN0KG1lcmdlKFsxLDMsNSw3XSwgWzAsMiw0LDhdLCBbNSwxMCwxNSwyMF0sIFtdLCBbMjVdKSkKICAgIFswLCAxLCAyLCAzLCA0LCA1LCA1LCA3LCA4LCAxMCwgMTUsIDIwLCAyNV0KCiAgICAnJycKICAgIF9oZWFwcG9wLCBfaGVhcHJlcGxhY2UsIF9TdG9wSXRlcmF0aW9uID0gaGVhcHBvcCwgaGVhcHJlcGxhY2UsIFN0b3BJdGVyYXRpb24KCiAgICBoID0gW10KICAgIGhfYXBwZW5kID0gaC5hcHBlbmQKICAgIGZvciBpdG51bSwgaXQgaW4gZW51bWVyYXRlKG1hcChpdGVyLCBpdGVyYWJsZXMpKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIG5leHQgPSBpdC5fX25leHRfXwogICAgICAgICAgICBoX2FwcGVuZChbbmV4dCgpLCBpdG51bSwgbmV4dF0pCiAgICAgICAgZXhjZXB0IF9TdG9wSXRlcmF0aW9uOgogICAgICAgICAgICBwYXNzCiAgICBoZWFwaWZ5KGgpCgogICAgd2hpbGUgMToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdoaWxlIDE6CiAgICAgICAgICAgICAgICB2LCBpdG51bSwgbmV4dCA9IHMgPSBoWzBdICAgIyByYWlzZXMgSW5kZXhFcnJvciB3aGVuIGggaXMgZW1wdHkKICAgICAgICAgICAgICAgIHlpZWxkIHYKICAgICAgICAgICAgICAgIHNbMF0gPSBuZXh0KCkgICAgICAgICAgICAgICAjIHJhaXNlcyBTdG9wSXRlcmF0aW9uIHdoZW4gZXhoYXVzdGVkCiAgICAgICAgICAgICAgICBfaGVhcHJlcGxhY2UoaCwgcykgICAgICAgICAgIyByZXN0b3JlIGhlYXAgY29uZGl0aW9uCiAgICAgICAgZXhjZXB0IF9TdG9wSXRlcmF0aW9uOgogICAgICAgICAgICBfaGVhcHBvcChoKSAgICAgICAgICAgICAgICAgICAgICMgcmVtb3ZlIGVtcHR5IGl0ZXJhdG9yCiAgICAgICAgZXhjZXB0IEluZGV4RXJyb3I6CiAgICAgICAgICAgIHJldHVybgoKIyBFeHRlbmQgdGhlIGltcGxlbWVudGF0aW9ucyBvZiBuc21hbGxlc3QgYW5kIG5sYXJnZXN0IHRvIHVzZSBhIGtleT0gYXJndW1lbnQKX25zbWFsbGVzdCA9IG5zbWFsbGVzdApkZWYgbnNtYWxsZXN0KG4sIGl0ZXJhYmxlLCBrZXk9Tm9uZSk6CiAgICAiIiJGaW5kIHRoZSBuIHNtYWxsZXN0IGVsZW1lbnRzIGluIGEgZGF0YXNldC4KCiAgICBFcXVpdmFsZW50IHRvOiAgc29ydGVkKGl0ZXJhYmxlLCBrZXk9a2V5KVs6bl0KICAgICIiIgogICAgIyBTaG9ydC1jdXQgZm9yIG49PTEgaXMgdG8gdXNlIG1pbigpIHdoZW4gbGVuKGl0ZXJhYmxlKT4wCiAgICBpZiBuID09IDE6CiAgICAgICAgaXQgPSBpdGVyKGl0ZXJhYmxlKQogICAgICAgIGhlYWQgPSBsaXN0KGlzbGljZShpdCwgMSkpCiAgICAgICAgaWYgbm90IGhlYWQ6CiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgIGlmIGtleSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gW21pbihjaGFpbihoZWFkLCBpdCkpXQogICAgICAgIHJldHVybiBbbWluKGNoYWluKGhlYWQsIGl0KSwga2V5PWtleSldCgogICAgIyBXaGVuIG4+PXNpemUsIGl0J3MgZmFzdGVyIHRvIHVzZSBzb3J0ZWQoKQogICAgdHJ5OgogICAgICAgIHNpemUgPSBsZW4oaXRlcmFibGUpCiAgICBleGNlcHQgKFR5cGVFcnJvciwgQXR0cmlidXRlRXJyb3IpOgogICAgICAgIHBhc3MKICAgIGVsc2U6CiAgICAgICAgaWYgbiA+PSBzaXplOgogICAgICAgICAgICByZXR1cm4gc29ydGVkKGl0ZXJhYmxlLCBrZXk9a2V5KVs6bl0KCiAgICAjIFdoZW4ga2V5IGlzIG5vbmUsIHVzZSBzaW1wbGVyIGRlY29yYXRpb24KICAgIGlmIGtleSBpcyBOb25lOgogICAgICAgIGl0ID0gemlwKGl0ZXJhYmxlLCBjb3VudCgpKSAgICAgICAgICAgICAgICAgICAgICAgICAjIGRlY29yYXRlCiAgICAgICAgcmVzdWx0ID0gX25zbWFsbGVzdChuLCBpdCkKICAgICAgICByZXR1cm4gW3JbMF0gZm9yIHIgaW4gcmVzdWx0XSAgICAgICAgICAgICAgICAgICAgICAgIyB1bmRlY29yYXRlCgogICAgIyBHZW5lcmFsIGNhc2UsIHNsb3dlc3QgbWV0aG9kCiAgICBpbjEsIGluMiA9IHRlZShpdGVyYWJsZSkKICAgIGl0ID0gemlwKG1hcChrZXksIGluMSksIGNvdW50KCksIGluMikgICAgICAgICAgICAgICAgICAgIyBkZWNvcmF0ZQogICAgcmVzdWx0ID0gX25zbWFsbGVzdChuLCBpdCkKICAgIHJldHVybiBbclsyXSBmb3IgciBpbiByZXN1bHRdICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB1bmRlY29yYXRlCgoKX25sYXJnZXN0ID0gbmxhcmdlc3QKZGVmIG5sYXJnZXN0KG4sIGl0ZXJhYmxlLCBrZXk9Tm9uZSk6CiAgICAiIiJGaW5kIHRoZSBuIGxhcmdlc3QgZWxlbWVudHMgaW4gYSBkYXRhc2V0LgogICAgCiAgICAgRXF1aXZhbGVudCB0bzogIHNvcnRlZChpdGVyYWJsZSwga2V5PWtleSwgcmV2ZXJzZT1UcnVlKVs6bl0KCiAgICAgU2hvcnQtY3V0IGZvciBuPT0xIGlzIHRvIHVzZSBtYXgoKSB3aGVuIGxlbihpdGVyYWJsZSk+MAogICAgIiIiCiAgICBpZiBuID09IDE6CiAgICAgICAgaXQgPSBpdGVyKGl0ZXJhYmxlKQogICAgICAgIGhlYWQgPSBsaXN0KGlzbGljZShpdCwgMSkpCiAgICAgICAgaWYgbm90IGhlYWQ6CiAgICAgICAgICAgIHJldHVybiBbXQogICAgICAgIGlmIGtleSBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gW21heChjaGFpbihoZWFkLCBpdCkpXQogICAgICAgIHJldHVybiBbbWF4KGNoYWluKGhlYWQsIGl0KSwga2V5PWtleSldCgogICAgIyBXaGVuIG4+PXNpemUsIGl0J3MgZmFzdGVyIHRvIHVzZSBzb3J0ZWQoKQogICAgdHJ5OgogICAgICAgIHNpemUgPSBsZW4oaXRlcmFibGUpCiAgICBleGNlcHQgKFR5cGVFcnJvciwgQXR0cmlidXRlRXJyb3IpOgogICAgICAgIHBhc3MKICAgIGVsc2U6CiAgICAgICAgaWYgbiA+PSBzaXplOgogICAgICAgICAgICByZXR1cm4gc29ydGVkKGl0ZXJhYmxlLCBrZXk9a2V5LCByZXZlcnNlPVRydWUpWzpuXQoKICAgICMgV2hlbiBrZXkgaXMgbm9uZSwgdXNlIHNpbXBsZXIgZGVjb3JhdGlvbgogICAgaWYga2V5IGlzIE5vbmU6CiAgICAgICAgaXQgPSB6aXAoaXRlcmFibGUsIGNvdW50KDAsLTEpKSAgICAgICAgICAgICAgICAgICAgICMgZGVjb3JhdGUKICAgICAgICByZXN1bHQgPSBfbmxhcmdlc3QobiwgaXQpCiAgICAgICAgcmV0dXJuIFtyWzBdIGZvciByIGluIHJlc3VsdF0gICAgICAgICAgICAgICAgICAgICAgICMgdW5kZWNvcmF0ZQoKICAgICMgR2VuZXJhbCBjYXNlLCBzbG93ZXN0IG1ldGhvZAogICAgaW4xLCBpbjIgPSB0ZWUoaXRlcmFibGUpCiAgICBpdCA9IHppcChtYXAoa2V5LCBpbjEpLCBjb3VudCgwLC0xKSwgaW4yKSAgICAgICAgICAgICAgICMgZGVjb3JhdGUKICAgIHJlc3VsdCA9IF9ubGFyZ2VzdChuLCBpdCkKICAgIHJldHVybiBbclsyXSBmb3IgciBpbiByZXN1bHRdICAgICAgICAgICAgICAgICAgICAgICAgICAgIyB1bmRlY29yYXRlCg==',
'/Lib/itertools.py':'IyBkb3dubG9hZGVkIGZyb20gaHR0cDovL3NoZWRza2luLmdvb2dsZWNvZGUuY29tL3N2bi1oaXN0b3J5L3IxMjc5L3RydW5rL3NoZWRza2luL2xpYi9pdGVydG9vbHMucHkKIyBodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9fc291cmNlcy9saWJyYXJ5L2l0ZXJ0b29scy50eHQKCiMgSW5maW5pdGUgSXRlcmF0b3JzCgpkZWYgY291bnQoc3RhcnQgPSAwLCBzdGVwID0gMSk6CiAgICB5aWVsZCBzdGFydAoKZGVmIGN5Y2xlKGl0ZXJhYmxlKToKICAgIHlpZWxkIGl0ZXIoaXRlcmFibGUpLm5leHQoKQoKZGVmIHJlcGVhdChvYmplY3QsIHRpbWVzID0gMCk6CiAgICB5aWVsZCBvYmplY3QKCiMgSXRlcmF0b3JzIHRlcm1pbmF0aW5nIG9uIHRoZSBzaG9ydGVzdCBpbnB1dCBpdGVyYWJsZXVlbmNlCgpkZWYgY2hhaW4oKml0ZXJhYmxlcyk6CiAgICB5aWVsZCBpdGVyKGl0ZXJhYmxlcykubmV4dCgpCgpkZWYgY29tcHJlc3MoZGF0YSwgc2VsZWN0b3JzKToKICAgIGl0ZXIoc2VsZWN0b3JzKS5uZXh0KCkKICAgIHlpZWxkIGl0ZXIoZGF0YSkubmV4dCgpCgpkZWYgX19wcmVkX2VsZW0ocHJlZGljYXRlLCBpdGVyYWJsZSk6CiAgICBlbGVtID0gaXRlcihpdGVyYWJsZSkubmV4dCgpCiAgICBwcmVkaWNhdGUoZWxlbSkKICAgIHJldHVybiBlbGVtCgpkZWYgZHJvcHdoaWxlKHByZWRpY2F0ZSwgaXRlcmFibGUpOgogICAgeWllbGQgX19wcmVkX2VsZW0ocHJlZGljYXRlLCBpdGVyYWJsZSkKCmRlZiBncm91cGJ5KGl0ZXJhYmxlLCBrZXkgPSBsYW1iZGEgeDogeCk6CiAgICB5aWVsZCBrZXkoaXRlcihpdGVyYWJsZSkubmV4dCgpKSwgaXRlcihpdGVyYWJsZSkKCmRlZiBpZmlsdGVyKHByZWRpY2F0ZSwgaXRlcmFibGUpOgogICAgeWllbGQgX19wcmVkX2VsZW0ocHJlZGljYXRlLCBpdGVyYWJsZSkKCmRlZiBpZmlsdGVyZmFsc2UocHJlZGljYXRlLCBpdGVyYWJsZSk6CiAgICB5aWVsZCBfX3ByZWRfZWxlbShwcmVkaWNhdGUsIGl0ZXJhYmxlKQoKZGVmIHRha2V3aGlsZShwcmVkaWNhdGUsIGl0ZXJhYmxlKToKICAgIHlpZWxkIF9fcHJlZF9lbGVtKHByZWRpY2F0ZSwgaXRlcmFibGUpCgpkZWYgaXNsaWNlKGl0ZXJhYmxlLCBzdGFydCwgc3RvcCA9IC0xLCBzdGVwID0gLTEpOgogICAgJ0tub3duIGxpbWl0YXRpb25zOiBjYW5ub3QgZGlzdGluZ3Vpc2ggYmV0d2VlbiAwIGFuZCBOb25lIGZvciB0aGUgc3RvcCBhcmd1bWVudCcKICAgIHlpZWxkIGl0ZXIoaXRlcmFibGUpLm5leHQoKQoKZGVmIGltYXAoZnVuY3Rpb24sICppdGVyYWJsZXMpOgogICAgJ0tub3duIGxpbWl0YXRpb25zOiBubyBtb3JlIHRoYW4gNSBpdGVyYWJsZXMgYXJlIHN1cHBvcnRlZCcKICAgIHlpZWxkIGZ1bmN0aW9uKCppdGVyKGl0ZXJhYmxlcykubmV4dCgpKQoKZGVmIF9faW1hcDMoZnVuY3Rpb24sIGl0ZXIxLCBpdGVyMik6CiAgICB5aWVsZCBmdW5jdGlvbihpdGVyKGl0ZXIxKS5uZXh0KCksIGl0ZXIoaXRlcjIpLm5leHQoKSkKCmRlZiBfX2ltYXA0KGZ1bmN0aW9uLCBpdGVyMSwgaXRlcjIsIGl0ZXIzKToKICAgIHlpZWxkIGZ1bmN0aW9uKGl0ZXIoaXRlcjEpLm5leHQoKSwgaXRlcihpdGVyMikubmV4dCgpLCBpdGVyKGl0ZXIzKS5uZXh0KCkpCgpkZWYgX19pbWFwNShmdW5jdGlvbiwgaXRlcjEsIGl0ZXIyLCBpdGVyMywgaXRlcjQpOgogICAgeWllbGQgZnVuY3Rpb24oaXRlcihpdGVyMSkubmV4dCgpLCBpdGVyKGl0ZXIyKS5uZXh0KCksIGl0ZXIoaXRlcjMpLm5leHQoKSwgaXRlcihpdGVyNCkubmV4dCgpKQoKZGVmIF9faW1hcDYoZnVuY3Rpb24sIGl0ZXIxLCBpdGVyMiwgaXRlcjMsIGl0ZXI0LCBpdGVyNSk6CiAgICB5aWVsZCBmdW5jdGlvbihpdGVyKGl0ZXIxKS5uZXh0KCksIGl0ZXIoaXRlcjIpLm5leHQoKSwgaXRlcihpdGVyMykubmV4dCgpLCBpdGVyKGl0ZXI0KS5uZXh0KCksIGl0ZXIoaXRlcjUpLm5leHQoKSkKCmRlZiBzdGFybWFwKGZ1bmN0aW9uLCBpdGVyYWJsZSk6CiAgICB5aWVsZCBmdW5jKCppdGVyYWJsZVswXSkKCmRlZiB0ZWUoaXRlcmFibGUsIG4gPSAyKToKICAgIHJldHVybiBpdGVyKGl0ZXJhYmxlKSwgaXRlcihpdGVyYWJsZSkKCmRlZiBpemlwKCppdGVyYWJsZXMpOgogICAgJ0tub3duIGxpbWl0YXRpb25zOiBpdGVyYWJsZXMgbXVzdCBhbGwgYmUgb2YgdGhlIHNhbWUgdHlwZSBpZiB0aGV5IGFyZSBtb3JlIHRoYW4gdHdvJwogICAgeWllbGQgaXRlcihpdGVyYWJsZXMpLm5leHQoKSwKCmRlZiBfX2l6aXAyKGl0ZXJhYmxlMSwgaXRlcmFibGUyKToKICAgIHlpZWxkIGl0ZXIoaXRlcmFibGUxKS5uZXh0KCksIGl0ZXIoaXRlcmFibGUyKS5uZXh0KCkKCmRlZiBpemlwX2xvbmdlc3QoX19rd19maWxsdmFsdWU9Tm9uZSwgKml0ZXJhYmxlcyk6CiAgICAnS25vd24gbGltaXRhdGlvbnM6IGl0ZXJhYmxlcyBtdXN0IGFsbCBiZSBvZiB0aGUgc2FtZSB0eXBlLCBjYW5ub3QgZGlzdGluZ3Vpc2ggYmV0d2VlbiAwIGFuZCBOb25lIGZvciB0aGUgcmV0dXJuIHZhbHVlJwogICAgeWllbGQgaXRlcihpdGVyYWJsZXMpLm5leHQoKSwKCmRlZiBfX2l6aXBfbG9uZ2VzdDIoaXRlcmFibGUxLCBpdGVyYWJsZTIsIF9fa3dfZmlsbHZhbHVlPU5vbmUpOgogICAgeWllbGQgaXRlcihpdGVyYWJsZTEpLm5leHQoKSwgaXRlcihpdGVyYWJsZTIpLm5leHQoKQoKIyBDb21iaW5hdG9yaWMgZ2VuZXJhdG9ycwoKZGVmIHByb2R1Y3QoX19rd19yZXBlYXQ9MSwgKml0ZXJhYmxlcyk6CiAgICAnS25vd24gbGltaXRhdGlvbnM6IGl0ZXJhYmxlcyBtdXN0IGFsbCBiZSBvZiB0aGUgc2FtZSB0eXBlIGlmIHRoZXkgYXJlIG1vcmUgdGhhbiB0d28nCiAgICB5aWVsZCBpdGVyKGl0ZXJhYmxlcykubmV4dCgpLAoKZGVmIF9fcHJvZHVjdDIoaXRlcmFibGUxLCBpdGVyYWJsZTIsIF9fa3dfcmVwZWF0PTEpOgogICAgeWllbGQgaXRlcihpdGVyYWJsZTEpLm5leHQoKSwgaXRlcihpdGVyYWJsZTIpLm5leHQoKQoKZGVmIHBlcm11dGF0aW9ucyhpdGVyYWJsZSwgciA9IE5vbmUpOgogICAgeWllbGQgaXRlcihpdGVyYWJsZSkubmV4dCgpLAoKZGVmIGNvbWJpbmF0aW9ucyhpdGVyYWJsZSwgcik6CiAgICB5aWVsZCBpdGVyKGl0ZXJhYmxlKS5uZXh0KCksCgpkZWYgY29tYmluYXRpb25zX3dpdGhfcmVwbGFjZW1lbnQoaXRlcmFibGUsIHIpOgogICAgeWllbGQgaXRlcihpdGVyYWJsZSkubmV4dCgpLAo=',
'/Lib/keyword.py':'a3dsaXN0ID0gWwojLS1zdGFydCBrZXl3b3Jkcy0tCiAgICAgICAgJ0ZhbHNlJywKICAgICAgICAnTm9uZScsCiAgICAgICAgJ1RydWUnLAogICAgICAgICdhbmQnLAogICAgICAgICdhcycsCiAgICAgICAgJ2Fzc2VydCcsCiAgICAgICAgJ2JyZWFrJywKICAgICAgICAnY2xhc3MnLAogICAgICAgICdjb250aW51ZScsCiAgICAgICAgJ2RlZicsCiAgICAgICAgJ2RlbCcsCiAgICAgICAgJ2VsaWYnLAogICAgICAgICdlbHNlJywKICAgICAgICAnZXhjZXB0JywKICAgICAgICAnZmluYWxseScsCiAgICAgICAgJ2ZvcicsCiAgICAgICAgJ2Zyb20nLAogICAgICAgICdnbG9iYWwnLAogICAgICAgICdpZicsCiAgICAgICAgJ2ltcG9ydCcsCiAgICAgICAgJ2luJywKICAgICAgICAnaXMnLAogICAgICAgICdsYW1iZGEnLAogICAgICAgICdub25sb2NhbCcsCiAgICAgICAgJ25vdCcsCiAgICAgICAgJ29yJywKICAgICAgICAncGFzcycsCiAgICAgICAgJ3JhaXNlJywKICAgICAgICAncmV0dXJuJywKICAgICAgICAndHJ5JywKICAgICAgICAnd2hpbGUnLAogICAgICAgICd3aXRoJywKICAgICAgICAneWllbGQnLAojLS1lbmQga2V5d29yZHMtLQogICAgICAgIF0KCmRlZiBpc2tleXdvcmQod29yZCk6CiAgICByZXR1cm4gd29yZCBpbiBrd2xpc3QK',
'/Lib/linecache.py':'IiIiQ2FjaGUgbGluZXMgZnJvbSBmaWxlcy4KClRoaXMgaXMgaW50ZW5kZWQgdG8gcmVhZCBsaW5lcyBmcm9tIG1vZHVsZXMgaW1wb3J0ZWQgLS0gaGVuY2UgaWYgYSBmaWxlbmFtZQppcyBub3QgZm91bmQsIGl0IHdpbGwgbG9vayBkb3duIHRoZSBtb2R1bGUgc2VhcmNoIHBhdGggZm9yIGEgZmlsZSBieQp0aGF0IG5hbWUuCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKI2ZpeG1lIGJyeXRob24KI2ltcG9ydCB0b2tlbml6ZQoKX19hbGxfXyA9IFsiZ2V0bGluZSIsICJjbGVhcmNhY2hlIiwgImNoZWNrY2FjaGUiXQoKZGVmIGdldGxpbmUoZmlsZW5hbWUsIGxpbmVubywgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICBsaW5lcyA9IGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscykKICAgIGlmIDEgPD0gbGluZW5vIDw9IGxlbihsaW5lcyk6CiAgICAgICAgcmV0dXJuIGxpbmVzW2xpbmVuby0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgojIFRoZSBjYWNoZQoKY2FjaGUgPSB7fSAjIFRoZSBjYWNoZQoKCmRlZiBjbGVhcmNhY2hlKCk6CiAgICAiIiJDbGVhciB0aGUgY2FjaGUgZW50aXJlbHkuIiIiCgogICAgZ2xvYmFsIGNhY2hlCiAgICBjYWNoZSA9IHt9CgoKZGVmIGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgICIiIkdldCB0aGUgbGluZXMgZm9yIGEgZmlsZSBmcm9tIHRoZSBjYWNoZS4KICAgIFVwZGF0ZSB0aGUgY2FjaGUgaWYgaXQgZG9lc24ndCBjb250YWluIGFuIGVudHJ5IGZvciB0aGlzIGZpbGUgYWxyZWFkeS4iIiIKCiAgICBpZiBmaWxlbmFtZSBpbiBjYWNoZToKICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCiAgICBlbHNlOgogICAgICAgIHJldHVybiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHMpCgoKZGVmIGNoZWNrY2FjaGUoZmlsZW5hbWU9Tm9uZSk6CiAgICAiIiJEaXNjYXJkIGNhY2hlIGVudHJpZXMgdGhhdCBhcmUgb3V0IG9mIGRhdGUuCiAgICAoVGhpcyBpcyBub3QgY2hlY2tlZCB1cG9uIGVhY2ggY2FsbCEpIiIiCgogICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICBmaWxlbmFtZXMgPSBsaXN0KGNhY2hlLmtleXMoKSkKICAgIGVsc2U6CiAgICAgICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgICAgIGZpbGVuYW1lcyA9IFtmaWxlbmFtZV0KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KCiAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgIHNpemUsIG10aW1lLCBsaW5lcywgZnVsbG5hbWUgPSBjYWNoZVtmaWxlbmFtZV0KICAgICAgICBpZiBtdGltZSBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZSAgICMgbm8tb3AgZm9yIGZpbGVzIGxvYWRlZCB2aWEgYSBfX2xvYWRlcl9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWwgY2FjaGVbZmlsZW5hbWVdCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2l6ZSAhPSBzdGF0LnN0X3NpemUgb3IgbXRpbWUgIT0gc3RhdC5zdF9tdGltZToKICAgICAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQoKCmRlZiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICAiIiJVcGRhdGUgYSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuIGl0cyBsaXN0IG9mIGxpbmVzLgogICAgSWYgc29tZXRoaW5nJ3Mgd3JvbmcsIHByaW50IGEgbWVzc2FnZSwgZGlzY2FyZCB0aGUgY2FjaGUgZW50cnksCiAgICBhbmQgcmV0dXJuIGFuIGVtcHR5IGxpc3QuIiIiCgogICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQogICAgaWYgbm90IGZpbGVuYW1lIG9yIChmaWxlbmFtZS5zdGFydHN3aXRoKCc8JykgYW5kIGZpbGVuYW1lLmVuZHN3aXRoKCc+JykpOgogICAgICAgIHJldHVybiBbXQoKICAgIGZ1bGxuYW1lID0gZmlsZW5hbWUKICAgIHRyeToKICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgIGJhc2VuYW1lID0gZmlsZW5hbWUKCiAgICAgICAgIyBUcnkgZm9yIGEgX19sb2FkZXJfXywgaWYgYXZhaWxhYmxlCiAgICAgICAgaWYgbW9kdWxlX2dsb2JhbHMgYW5kICdfX2xvYWRlcl9fJyBpbiBtb2R1bGVfZ2xvYmFsczoKICAgICAgICAgICAgbmFtZSA9IG1vZHVsZV9nbG9iYWxzLmdldCgnX19uYW1lX18nKQogICAgICAgICAgICBsb2FkZXIgPSBtb2R1bGVfZ2xvYmFsc1snX19sb2FkZXJfXyddCiAgICAgICAgICAgIGdldF9zb3VyY2UgPSBnZXRhdHRyKGxvYWRlciwgJ2dldF9zb3VyY2UnLCBOb25lKQoKICAgICAgICAgICAgaWYgbmFtZSBhbmQgZ2V0X3NvdXJjZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZ2V0X3NvdXJjZShuYW1lKQogICAgICAgICAgICAgICAgZXhjZXB0IChJbXBvcnRFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gbHVjaywgdGhlIFBFUDMwMiBsb2FkZXIgY2Fubm90IGZpbmQgdGhlIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAjIGZvciB0aGlzIG1vZHVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbZmlsZW5hbWVdID0gKAogICAgICAgICAgICAgICAgICAgICAgICBsZW4oZGF0YSksIE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIFtsaW5lKydcbicgZm9yIGxpbmUgaW4gZGF0YS5zcGxpdGxpbmVzKCldLCBmdWxsbmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCgogICAgICAgICMgVHJ5IGxvb2tpbmcgdGhyb3VnaCB0aGUgbW9kdWxlIHNlYXJjaCBwYXRoLCB3aGljaCBpcyBvbmx5IHVzZWZ1bAogICAgICAgICMgd2hlbiBoYW5kbGluZyBhIHJlbGF0aXZlIGZpbGVuYW1lLgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgIyBUYWtlIGNhcmUgdG8gaGFuZGxlIHBhY2thZ2VzLgogICAgICAgIGlmIGJhc2VuYW1lID09ICdfX2luaXRfXy5weSc6CiAgICAgICAgICAgICMgZmlsZW5hbWUgcmVmZXJlcyB0byBhIHBhY2thZ2UKICAgICAgICAgICAgYmFzZW5hbWUgPSBmaWxlbmFtZQoKICAgICAgICBmb3IgZGlybmFtZSBpbiBzeXMucGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgYmFzZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBBdHRyaWJ1dGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIE5vdCBzdWZmaWNpZW50bHkgc3RyaW5nLWxpa2UgdG8gZG8gYW55dGhpbmcgdXNlZnVsIHdpdGguCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICNmaXhtZSBicnl0aG9uLCBpbnZhbGlkIHN5bnRheCAKICAgICAgICAgICAgI2V4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICNmaXhtZSBicnl0aG9uIHVuZXhwZWN0ZWQgdG9rZW4gZWxzZQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgcmV0dXJuIFtdCiAgICB0cnk6CiAgICAgICAgZnA9b3BlbihmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICN3aXRoIHRva2VuaXplLm9wZW4oZnVsbG5hbWUpIGFzIGZwOgogICAgICAgIGxpbmVzID0gZnAucmVhZGxpbmVzKCkKICAgICAgICBmcC5jbG9zZSgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gW10KICAgIGlmIGxpbmVzIGFuZCBub3QgbGluZXNbLTFdLmVuZHN3aXRoKCdcbicpOgogICAgICAgIGxpbmVzWy0xXSArPSAnXG4nCiAgICBzaXplLCBtdGltZSA9IHN0YXQuc3Rfc2l6ZSwgc3RhdC5zdF9tdGltZQogICAgY2FjaGVbZmlsZW5hbWVdID0gc2l6ZSwgbXRpbWUsIGxpbmVzLCBmdWxsbmFtZQogICAgcmV0dXJuIGxpbmVzCg==',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/local_storage.py':'IyBsb2NhbCBzdG9yYWdlIGluIGJyb3dzZXIKCmNsYXNzIExvY2FsU3RvcmFnZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgaWYgbm90IF9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlOgogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2xvY2FsIHN0b3JhZ2UgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcicpCiAgICAgICAgc2VsZi5zdG9yZSA9IF9fQlJZVEhPTl9fLmxvY2FsX3N0b3JhZ2UoKQogICAgICAgIAogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsa2V5KToKICAgICAgICBzZWxmLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiByZXMKCiAgICAgICAgcmFpc2UgS2V5RXJyb3Ioa2V5KQoKICAgIGRlZiBfX3NldGl0ZW1fXyhzZWxmLGtleSx2YWx1ZSk6CiAgICAgICAgc2VsZi5zdG9yZS5zZXRJdGVtKGtleSx2YWx1ZSkKCiAgICAjaW1wbGVtZW50ICJpbiIgZnVuY3Rpb25hbGl0eQogICAgZGVmIF9fY29udGFpbnNfXyhzZWxmLCBrZXkpOgogICAgICAgIHJlcz1zZWxmLnN0b3JlLmdldEl0ZW0oa2V5KQogICAgICAgIGlmIHJlczoKICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICByZXR1cm4gRmFsc2UKCnN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2UoKQoK',
'/Lib/markdown.py':'',
'/Lib/operator.py':'',
'/Lib/os.py':'aW1wb3J0IF9vcwoKbmFtZT0iYnJ5dGhvbiIKCiNhbHRzZXA9Tm9uZQojY3VyZGlyPSIuIgoKZGVmIGRldm51bGwoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGRldm51bGwgbm90IHN1cHBvcnRlZCcpCgojZXh0c2VwPScuJwoKZGVmIGdldGxvYWRhdmcoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGdldGxvYWRhdmcgbm90IHN1cHBvcnRlZCcpCgojbGluZXNlcD0iXG4iCiNwYXRoc2VwPSI7IgojcGFyZGlyPSIuLiIKI3NlcD0nLycKCmRlZiB1cmFuZG9tKGxlbmd0aCk6CiAgICBfYz1bXQogICAgZm9yIF9pIGluIHJhbmdlKGxlbmd0aCk6CiAgICAgICAgX2MuYXBwZW5kKGNocihfb3MucmFuZGludCgwLDI1NSkpKQogICAgICAgIAogICAgcmV0dXJuICcnLmpvaW4oX2MpCgojaW1wb3J0IHBvc2l4cGF0aCBhcyBwYXRoCiNzeXMubW9kdWxlc1snb3MucGF0aCddID0gcGF0aAoKI2Zyb20gb3MucGF0aCBpbXBvcnQgKGN1cmRpciwgcGFyZGlyLCBzZXAsIHBhdGhzZXAsIGRlZnBhdGgsIGV4dHNlcCwgYWx0c2VwKQoKIyBQeXRob24gdXNlcyBmaXhlZCB2YWx1ZXMgZm9yIHRoZSBTRUVLXyBjb25zdGFudHM7IHRoZXkgYXJlIG1hcHBlZAojIHRvIG5hdGl2ZSBjb25zdGFudHMgaWYgbmVjZXNzYXJ5IGluIHBvc2l4bW9kdWxlLmMKU0VFS19TRVQgPSAwClNFRUtfQ1VSID0gMQpTRUVLX0VORCA9IDIKCmRlZiB3YWxrKHRvcCwgdG9wZG93bj1UcnVlLCBvbmVycm9yPU5vbmUsIGZvbGxvd2xpbmtzPUZhbHNlKToKICAgICNyZWNlaXZlIHNjb3BlIGVycm9yIGluIGJyeXRob24KICAgICMgd2h5IGhhdmUgb3Mud2FsayBpbiBicnl0aG9uPyAgc2VydmVyIHNpZGUgamF2YXNjcmlwdCAobm9kZWpzKQogICAgIyBpbW1lZGlhdGVseSBjYW4gdXNlIG9zLndhbGsgdG8gY29tcGlsZSBsaWJzIGFuZCBMaWIgbW9kdWxlcwogICAgIyB0byBqYXZhc2NyaXB0IGVxdWl2YWxlbnQuLgogICAgT1NFcnJvcignRnVuY3Rpb24gb3Mud2FsayBub3Qgc3VwcG9ydGVkIHlldCcpCiAgICByZXR1cm4KCiAgICAiIiJEaXJlY3RvcnkgdHJlZSBnZW5lcmF0b3IuCgogICAgRm9yIGVhY2ggZGlyZWN0b3J5IGluIHRoZSBkaXJlY3RvcnkgdHJlZSByb290ZWQgYXQgdG9wIChpbmNsdWRpbmcgdG9wCiAgICBpdHNlbGYsIGJ1dCBleGNsdWRpbmcgJy4nIGFuZCAnLi4nKSwgeWllbGRzIGEgMy10dXBsZQoKICAgICAgICBkaXJwYXRoLCBkaXJuYW1lcywgZmlsZW5hbWVzCgogICAgZGlycGF0aCBpcyBhIHN0cmluZywgdGhlIHBhdGggdG8gdGhlIGRpcmVjdG9yeS4gIGRpcm5hbWVzIGlzIGEgbGlzdCBvZgogICAgdGhlIG5hbWVzIG9mIHRoZSBzdWJkaXJlY3RvcmllcyBpbiBkaXJwYXRoIChleGNsdWRpbmcgJy4nIGFuZCAnLi4nKS4KICAgIGZpbGVuYW1lcyBpcyBhIGxpc3Qgb2YgdGhlIG5hbWVzIG9mIHRoZSBub24tZGlyZWN0b3J5IGZpbGVzIGluIGRpcnBhdGguCiAgICBOb3RlIHRoYXQgdGhlIG5hbWVzIGluIHRoZSBsaXN0cyBhcmUganVzdCBuYW1lcywgd2l0aCBubyBwYXRoIGNvbXBvbmVudHMuCiAgICBUbyBnZXQgYSBmdWxsIHBhdGggKHdoaWNoIGJlZ2lucyB3aXRoIHRvcCkgdG8gYSBmaWxlIG9yIGRpcmVjdG9yeSBpbgogICAgZGlycGF0aCwgZG8gb3MucGF0aC5qb2luKGRpcnBhdGgsIG5hbWUpLgoKICAgIElmIG9wdGlvbmFsIGFyZyAndG9wZG93bicgaXMgdHJ1ZSBvciBub3Qgc3BlY2lmaWVkLCB0aGUgdHJpcGxlIGZvciBhCiAgICBkaXJlY3RvcnkgaXMgZ2VuZXJhdGVkIGJlZm9yZSB0aGUgdHJpcGxlcyBmb3IgYW55IG9mIGl0cyBzdWJkaXJlY3RvcmllcwogICAgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgdG9wIGRvd24pLiAgSWYgdG9wZG93biBpcyBmYWxzZSwgdGhlIHRyaXBsZQogICAgZm9yIGEgZGlyZWN0b3J5IGlzIGdlbmVyYXRlZCBhZnRlciB0aGUgdHJpcGxlcyBmb3IgYWxsIG9mIGl0cwogICAgc3ViZGlyZWN0b3JpZXMgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgYm90dG9tIHVwKS4KCiAgICBXaGVuIHRvcGRvd24gaXMgdHJ1ZSwgdGhlIGNhbGxlciBjYW4gbW9kaWZ5IHRoZSBkaXJuYW1lcyBsaXN0IGluLXBsYWNlCiAgICAoZS5nLiwgdmlhIGRlbCBvciBzbGljZSBhc3NpZ25tZW50KSwgYW5kIHdhbGsgd2lsbCBvbmx5IHJlY3Vyc2UgaW50byB0aGUKICAgIHN1YmRpcmVjdG9yaWVzIHdob3NlIG5hbWVzIHJlbWFpbiBpbiBkaXJuYW1lczsgdGhpcyBjYW4gYmUgdXNlZCB0byBwcnVuZQogICAgdGhlIHNlYXJjaCwgb3IgdG8gaW1wb3NlIGEgc3BlY2lmaWMgb3JkZXIgb2YgdmlzaXRpbmcuICBNb2RpZnlpbmcKICAgIGRpcm5hbWVzIHdoZW4gdG9wZG93biBpcyBmYWxzZSBpcyBpbmVmZmVjdGl2ZSwgc2luY2UgdGhlIGRpcmVjdG9yaWVzIGluCiAgICBkaXJuYW1lcyBoYXZlIGFscmVhZHkgYmVlbiBnZW5lcmF0ZWQgYnkgdGhlIHRpbWUgZGlybmFtZXMgaXRzZWxmIGlzCiAgICBnZW5lcmF0ZWQuCgogICAgQnkgZGVmYXVsdCBlcnJvcnMgZnJvbSB0aGUgb3MubGlzdGRpcigpIGNhbGwgYXJlIGlnbm9yZWQuICBJZgogICAgb3B0aW9uYWwgYXJnICdvbmVycm9yJyBpcyBzcGVjaWZpZWQsIGl0IHNob3VsZCBiZSBhIGZ1bmN0aW9uOyBpdAogICAgd2lsbCBiZSBjYWxsZWQgd2l0aCBvbmUgYXJndW1lbnQsIGFuIG9zLmVycm9yIGluc3RhbmNlLiAgSXQgY2FuCiAgICByZXBvcnQgdGhlIGVycm9yIHRvIGNvbnRpbnVlIHdpdGggdGhlIHdhbGssIG9yIHJhaXNlIHRoZSBleGNlcHRpb24KICAgIHRvIGFib3J0IHRoZSB3YWxrLiAgTm90ZSB0aGF0IHRoZSBmaWxlbmFtZSBpcyBhdmFpbGFibGUgYXMgdGhlCiAgICBmaWxlbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGV4Y2VwdGlvbiBvYmplY3QuCgogICAgQnkgZGVmYXVsdCwgb3Mud2FsayBkb2VzIG5vdCBmb2xsb3cgc3ltYm9saWMgbGlua3MgdG8gc3ViZGlyZWN0b3JpZXMgb24KICAgIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHRoZW0uICBJbiBvcmRlciB0byBnZXQgdGhpcyBmdW5jdGlvbmFsaXR5LCBzZXQgdGhlCiAgICBvcHRpb25hbCBhcmd1bWVudCAnZm9sbG93bGlua3MnIHRvIHRydWUuCgogICAgQ2F1dGlvbjogIGlmIHlvdSBwYXNzIGEgcmVsYXRpdmUgcGF0aG5hbWUgZm9yIHRvcCwgZG9uJ3QgY2hhbmdlIHRoZQogICAgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBiZXR3ZWVuIHJlc3VtcHRpb25zIG9mIHdhbGsuICB3YWxrIG5ldmVyCiAgICBjaGFuZ2VzIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgYW5kIGFzc3VtZXMgdGhhdCB0aGUgY2xpZW50IGRvZXNuJ3QKICAgIGVpdGhlci4KCiAgICBFeGFtcGxlOgoKICAgIGltcG9ydCBvcwogICAgZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luLCBnZXRzaXplCiAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsaygncHl0aG9uL0xpYi9lbWFpbCcpOgogICAgICAgIHByaW50KHJvb3QsICJjb25zdW1lcyIsIGVuZD0iIikKICAgICAgICBwcmludChzdW0oW2dldHNpemUoam9pbihyb290LCBuYW1lKSkgZm9yIG5hbWUgaW4gZmlsZXNdKSwgZW5kPSIiKQogICAgICAgIHByaW50KCJieXRlcyBpbiIsIGxlbihmaWxlcyksICJub24tZGlyZWN0b3J5IGZpbGVzIikKICAgICAgICBpZiAnQ1ZTJyBpbiBkaXJzOgogICAgICAgICAgICBkaXJzLnJlbW92ZSgnQ1ZTJykgICMgZG9uJ3QgdmlzaXQgQ1ZTIGRpcmVjdG9yaWVzCiAgICAiIiIKICAgICIiIgogICAgCiAgICBpc2xpbmssIGpvaW4sIGlzZGlyID0gcGF0aC5pc2xpbmssIHBhdGguam9pbiwgcGF0aC5pc2RpcgoKICAgICMgV2UgbWF5IG5vdCBoYXZlIHJlYWQgcGVybWlzc2lvbiBmb3IgdG9wLCBpbiB3aGljaCBjYXNlIHdlIGNhbid0CiAgICAjIGdldCBhIGxpc3Qgb2YgdGhlIGZpbGVzIHRoZSBkaXJlY3RvcnkgY29udGFpbnMuICBvcy53YWxrCiAgICAjIGFsd2F5cyBzdXBwcmVzc2VkIHRoZSBleGNlcHRpb24gdGhlbiwgcmF0aGVyIHRoYW4gYmxvdyB1cCBmb3IgYQogICAgIyBtaW5vciByZWFzb24gd2hlbiAoc2F5KSBhIHRob3VzYW5kIHJlYWRhYmxlIGRpcmVjdG9yaWVzIGFyZSBzdGlsbAogICAgIyBsZWZ0IHRvIHZpc2l0LiAgVGhhdCBsb2dpYyBpcyBjb3BpZWQgaGVyZS4KICAgIHRyeToKICAgICAgICAjIE5vdGUgdGhhdCBsaXN0ZGlyIGFuZCBlcnJvciBhcmUgZ2xvYmFscyBpbiB0aGlzIG1vZHVsZSBkdWUKICAgICAgICAjIHRvIGVhcmxpZXIgaW1wb3J0LSouCiAgICAgICAgbmFtZXMgPSBsaXN0ZGlyKHRvcCkKICAgIGV4Y2VwdCBlcnJvciBhcyBlcnI6CiAgICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgb25lcnJvcihlcnIpCiAgICAgICAgcmV0dXJuCiAgICAKICAgIGRpcnMsIG5vbmRpcnMgPSBbXSwgW10KICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgIGlmIGlzZGlyKGpvaW4odG9wLCBuYW1lKSk6CiAgICAgICAgICAgIGRpcnMuYXBwZW5kKG5hbWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbm9uZGlycy5hcHBlbmQobmFtZSkKICAgIAogICAgaWYgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgIAogICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICBuZXdfcGF0aCA9IGpvaW4odG9wLCBuYW1lKQogICAgICAgIGlmIGZvbGxvd2xpbmtzIG9yIG5vdCBpc2xpbmsobmV3X3BhdGgpOgogICAgICAgICAgICBmb3IgeCBpbiB3YWxrKG5ld19wYXRoLCB0b3Bkb3duLCBvbmVycm9yLCBmb2xsb3dsaW5rcyk6CiAgICAgICAgICAgICAgICB5aWVsZCB4CiAgICBpZiBub3QgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgICIiIgo=',
'/Lib/pydom.py':'',
'/Lib/pyindexedDB.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBweWluZGV4ZWREQjoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIGlmIG5vdCBfX0JSWVRIT05fXy5oYXNfaW5kZXhlZERCOgogICAgICAgICByYWlzZSBFeGNlcHRpb24oIk5vdEltcGxlbWVudGVkRXJyb3IiLCAiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpbmRleGVkREIiKQogICAgICAgICByZXR1cm4KCiAgICAgIHNlbGYuX2luZGV4ZWREQj1fX0JSWVRIT05fXy5pbmRleGVkREIoKQogICAgICBzZWxmLl9kYj1Ob25lCiAgICAgIHNlbGYuX3ZlcnNpb249Tm9uZQoKICBkZWYgX29uc3VjY2VzcyhzZWxmLCBldmVudCk6CiAgICAgIHNlbGYuX2RiPWV2ZW50LnRhcmdldC5yZXN1bHQKCiAgZGVmIG9wZW4oc2VsZiwgbmFtZSwgb25zdWNjZXNzLCB2ZXJzaW9uPTEuMCwgb25lcnJvcj1Ob25lLCAKICAgICAgICAgICBvbnVwZ3JhZGVuZWVkZWQ9Tm9uZSk6CiAgICAgIHNlbGYuX3ZlcnNpb249dmVyc2lvbgogICAgICBfcmVzdWx0PXNlbGYuX2luZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pCgogICAgICBfb25zdWNjZXNzPUV2ZW50TGlzdGVuZXIoW3NlbGYuX29uc3VjY2Vzcywgb25zdWNjZXNzXSkKICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9X29uc3VjY2Vzcy5maXJlCiAgICAgIF9yZXN1bHQub251cGdyYWRlbmVlZGVkPW9udXBncmFkZW5lZWRlZAoKICAgICAgaWYgb25lcnJvciBpcyBOb25lOgogICAgICAgICBkZWYgb25lcnJvcihlKToKICAgICAgICAgICAgIHByaW50KCIlczolcyIgJSAgKGUudHlwZSwgZS5yZXN1bHQpKQoKICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKICAgICAgX3Jlc3VsdC5vbmJsb2NrZWQ9b25lcnJvcgoKICBkZWYgdHJhbnNhY3Rpb24oc2VsZiwgZW50aXRpZXMsIG1vZGU9J3JlYWQnKToKICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uKHNlbGYuX2RiLnRyYW5zYWN0aW9uKGVudGl0aWVzLCBtb2RlKSkKCmNsYXNzIFRyYW5zYWN0aW9uOgogIGRlZiBfX2luaXRfXyhzZWxmLCB0cmFuc2FjdGlvbik6CiAgICAgIHNlbGYuX3RyYW5zYWN0aW9uPXRyYW5zYWN0aW9uCgogIGRlZiBvYmplY3RTdG9yZShzZWxmLCBuYW1lKToKICAgICAgcmV0dXJuIE9iamVjdFN0b3JlKHNlbGYuX3RyYW5zYWN0aW9uLm9iamVjdFN0b3JlKG5hbWUpKQoKY2xhc3MgT2JqZWN0U3RvcmU6CiAgZGVmIF9faW5pdF9fKHNlbGYsIG9iamVjdFN0b3JlKToKICAgICAgc2VsZi5fb2JqZWN0U3RvcmU9b2JqZWN0U3RvcmUKICAgICAgc2VsZi5fZGF0YT1bXQoKICBkZWYgY2xlYXIoc2VsZiwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9c2VsZi5fb2JqZWN0U3RvcmUuY2xlYXIoKQoKICAgICAgaWYgb25zdWNjZXNzIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgICAgIGlmIG9uZXJyb3IgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25lcnJvcj1vbmVycm9yCgogIGRlZiBfaGVscGVyKHNlbGYsIGZ1bmMsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIF9yZXN1bHQ9ZnVuYyhvYmplY3QpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIHB1dChzZWxmLCBvYmplY3QsIGtleT1Ob25lLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3I9c2VsZi5fb2JqZWN0U3RvcmUucHV0KG9iamVjdCwga2V5KQogICAgICBfci5vbnN1Y2Nlc3M9b25zdWNjZXNzCiAgICAgIF9yLm9uZXJyb3I9b25lcnJvcgoKICBkZWYgYWRkKHNlbGYsIG9iamVjdCwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5hZGQsIG9iamVjdCwgb25zdWNjZXNzLCBvbmVycm9yKQoKICBkZWYgZGVsZXRlKHNlbGYsIGluZGV4LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKTogCiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5kZWxldGUsIGluZGV4LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCiAgICAgCiAgZGVmIHF1ZXJ5KHNlbGYsICphcmdzKToKICAgICAgc2VsZi5fZGF0YT1bXQogICAgICBkZWYgb25zdWNjZXNzKGV2ZW50KToKICAgICAgICAgIGN1cnNvcj1ldmVudC50YXJnZXQucmVzdWx0CiAgICAgICAgICBpZiBjdXJzb3IgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICBzZWxmLl9kYXRhLmFwcGVuZChjdXJzb3IudmFsdWUpCiAgICAgICAgICAgICBjdXJzb3IuY29udGludWUoKQoKICAgICAgc2VsZi5fb2JqZWN0U3RvcmUub3BlbkN1cnNvcihhcmdzKS5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogIGRlZiBmZXRjaGFsbChzZWxmKToKICAgICAgeWllbGQgc2VsZi5fZGF0YQoKICBkZWYgZ2V0KHNlbGYsIGtleSwgb25zdWNjZXNzPU5vbmUsIG9uZXJyb3I9Tm9uZSk6CiAgICAgIHNlbGYuX2hlbHBlcihzZWxmLl9vYmplY3RTdG9yZS5nZXQsIGtleSwgb25zdWNjZXNzLCBvbmVycm9yKQo=',
'/Lib/random.py':'',
'/Lib/string.py':'IyBTb21lIHN0cmluZ3MgZm9yIGN0eXBlLXN0eWxlIGNoYXJhY3RlciBjbGFzc2lmaWNhdGlvbgp3aGl0ZXNwYWNlID0gJyBcdFxuXHJcdlxmJwphc2NpaV9sb3dlcmNhc2UgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonCmFzY2lpX3VwcGVyY2FzZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicKYXNjaWlfbGV0dGVycyA9IGFzY2lpX2xvd2VyY2FzZSArIGFzY2lpX3VwcGVyY2FzZQpkaWdpdHMgPSAnMDEyMzQ1Njc4OScKaGV4ZGlnaXRzID0gZGlnaXRzICsgJ2FiY2RlZicgKyAnQUJDREVGJwpvY3RkaWdpdHMgPSAnMDEyMzQ1NjcnCnB1bmN0dWF0aW9uID0gIiIiISIjJCUmJygpKissLS4vOjs8PT4/QFtcXV5fYHt8fX4iIiIKcHJpbnRhYmxlID0gZGlnaXRzICsgYXNjaWlfbGV0dGVycyArIHB1bmN0dWF0aW9uICsgd2hpdGVzcGFjZQoKIyBGdW5jdGlvbnMgd2hpY2ggYXJlbid0IGF2YWlsYWJsZSBhcyBzdHJpbmcgbWV0aG9kcy4KCiMgQ2FwaXRhbGl6ZSB0aGUgd29yZHMgaW4gYSBzdHJpbmcsIGUuZy4gIiBhQmMgIGRFZiAiIC0+ICJBYmMgRGVmIi4KZGVmIGNhcHdvcmRzKHMsIHNlcD1Ob25lKToKICAgICIiImNhcHdvcmRzKHMgWyxzZXBdKSAtPiBzdHJpbmcKCiAgICBTcGxpdCB0aGUgYXJndW1lbnQgaW50byB3b3JkcyB1c2luZyBzcGxpdCwgY2FwaXRhbGl6ZSBlYWNoCiAgICB3b3JkIHVzaW5nIGNhcGl0YWxpemUsIGFuZCBqb2luIHRoZSBjYXBpdGFsaXplZCB3b3JkcyB1c2luZwogICAgam9pbi4gIElmIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgc2VwIGlzIGFic2VudCBvciBOb25lLAogICAgcnVucyBvZiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgYXJlIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIHNwYWNlCiAgICBhbmQgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcmUgcmVtb3ZlZCwgb3RoZXJ3aXNlCiAgICBzZXAgaXMgdXNlZCB0byBzcGxpdCBhbmQgam9pbiB0aGUgd29yZHMuCgogICAgIiIiCiAgICByZXR1cm4gKHNlcCBvciAnICcpLmpvaW4oeC5jYXBpdGFsaXplKCkgZm9yIHggaW4gcy5zcGxpdChzZXApKQo=',
'/Lib/sys.py':'X19zdGRvdXRfXz1nZXRhdHRyKGRvYywiJHN0ZG91dCIpCl9fc3RkZXJyX189Z2V0YXR0cihkb2MsIiRzdGRlcnIiKQoKc3Rkb3V0ID0gZ2V0YXR0cihkb2MsIiRzdGRvdXQiKQpzdGRlcnIgPSBnZXRhdHRyKGRvYywiJHN0ZGVyciIpCgptb2R1bGVzPV9fQlJZVEhPTl9fLm1vZHVsZXMKCmhhc19sb2NhbF9zdG9yYWdlPV9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlCmhhc19qc29uPV9fQlJZVEhPTl9fLmhhc19qc29uCnZlcnNpb25faW5mbz1fX0JSWVRIT05fXy52ZXJzaW9uX2luZm8KcGF0aD1fX0JSWVRIT05fXy5wYXRoCmJ1aWx0aW5fbW9kdWxlX25hbWVzPVsncG9zaXgnXQoKYnl0ZW9yZGVyPSdsaXR0bGUnCm1heHNpemU9OTAwNzE5OTI1NDc0MDk5MiAgICNsYXJnZXN0IGludGVnZXIuLgptYXh1bmljb2RlPTExMTQxMTEKCnBsYXRmb3JtPSJicnl0aG9uIgp3YXJub3B0aW9ucz1bXQoKY2xhc3MgZmxhZ19jbGFzczoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIHNlbGYuZGVidWc9MAogICAgICBzZWxmLmluc3BlY3Q9MAogICAgICBzZWxmLmludGVyYWN0aXZlPTAKICAgICAgc2VsZi5vcHRpbWl6ZT0wCiAgICAgIHNlbGYuZG9udF93cml0ZV9ieXRlY29kZT0wCiAgICAgIHNlbGYubm9fdXNlcl9zaXRlPTAKICAgICAgc2VsZi5ub19zaXRlPTAKICAgICAgc2VsZi5pZ25vcmVfZW52aXJvbm1lbnQ9MAogICAgICBzZWxmLnZlcmJvc2U9MAogICAgICBzZWxmLmJ5dGVzX3dhcm5pbmc9MAogICAgICBzZWxmLnF1aWV0PTAKICAgICAgc2VsZi5oYXNoX3JhbmRvbWl6YXRpb249MQoKZmxhZ3M9ZmxhZ19jbGFzcygpCgo=',
'/Lib/traceback.py':'aW1wb3J0IHN5cwpkZWYgcHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycik6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICBmaWxlLndyaXRlKGV4Yy5fX25hbWVfXykKICAgIGlmIGV4Yy5tZXNzYWdlOgogICAgICAgIGZpbGUud3JpdGUoJzogJytleGMubWVzc2FnZSkKICAgIGZpbGUud3JpdGUoZXhjLmluZm8pCiAgICBmaWxlLndyaXRlKCdcbicpCg==',
'/Lib/types.py':'IiIiCkRlZmluZSBuYW1lcyBmb3IgYnVpbHQtaW4gdHlwZXMgdGhhdCBhcmVuJ3QgZGlyZWN0bHkgYWNjZXNzaWJsZSBhcyBhIGJ1aWx0aW4uCiIiIgppbXBvcnQgc3lzCgojIEl0ZXJhdG9ycyBpbiBQeXRob24gYXJlbid0IGEgbWF0dGVyIG9mIHR5cGUgYnV0IG9mIHByb3RvY29sLiAgQSBsYXJnZQojIGFuZCBjaGFuZ2luZyBudW1iZXIgb2YgYnVpbHRpbiB0eXBlcyBpbXBsZW1lbnQgKnNvbWUqIGZsYXZvciBvZgojIGl0ZXJhdG9yLiAgRG9uJ3QgY2hlY2sgdGhlIHR5cGUhICBVc2UgaGFzYXR0ciB0byBjaGVjayBmb3IgYm90aAojICJfX2l0ZXJfXyIgYW5kICJfX25leHRfXyIgYXR0cmlidXRlcyBpbnN0ZWFkLgoKI2RlZiBfZigpOiBwYXNzCiNGdW5jdGlvblR5cGUgPSB0eXBlKF9mKQojTGFtYmRhVHlwZSA9IHR5cGUobGFtYmRhOiBOb25lKSAgICAgICAgICMgU2FtZSBhcyBGdW5jdGlvblR5cGUKI0NvZGVUeXBlID0gdHlwZShfZi5fX2NvZGVfXykKCiNkZWYgX2coKToKIyAgICB5aWVsZCAxCiNHZW5lcmF0b3JUeXBlID0gdHlwZShfZygpKQoKY2xhc3MgX0M6CiAgICBkZWYgX20oc2VsZik6IHBhc3MKTWV0aG9kVHlwZSA9IHR5cGUoX0MoKS5fbSkKCkJ1aWx0aW5GdW5jdGlvblR5cGUgPSB0eXBlKGxlbikKQnVpbHRpbk1ldGhvZFR5cGUgPSB0eXBlKFtdLmFwcGVuZCkgICAgICMgU2FtZSBhcyBCdWlsdGluRnVuY3Rpb25UeXBlCgpNb2R1bGVUeXBlID0gdHlwZShzeXMpCgojdHJ5OgojICAgIHJhaXNlIFR5cGVFcnJvcgojZXhjZXB0IFR5cGVFcnJvcjoKIyAgICB0YiA9IHN5cy5leGNfaW5mbygpWzJdCiMgICAgVHJhY2ViYWNrVHlwZSA9IHR5cGUodGIpCiMgICAgRnJhbWVUeXBlID0gdHlwZSh0Yi50Yl9mcmFtZSkKIyAgICB0YiA9IE5vbmU7IGRlbCB0YgoKIyBGb3IgSnl0aG9uLCB0aGUgZm9sbG93aW5nIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsCiNHZXRTZXREZXNjcmlwdG9yVHlwZSA9IHR5cGUoRnVuY3Rpb25UeXBlLl9fY29kZV9fKQojTWVtYmVyRGVzY3JpcHRvclR5cGUgPSB0eXBlKEZ1bmN0aW9uVHlwZS5fX2dsb2JhbHNfXykKCiNmaXhtZSBicnl0aG9uCiNkZWwgc3lzLCBfZiwgX2csIF9DLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTm90IGZvciBleHBvcnQK',
'/Lib/warnings.py':'',
'/Lib/_abcoll.py':'IyBDb3B5cmlnaHQgMjAwNyBHb29nbGUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIyBMaWNlbnNlZCB0byBQU0YgdW5kZXIgYSBDb250cmlidXRvciBBZ3JlZW1lbnQuCgoiIiJBYnN0cmFjdCBCYXNlIENsYXNzZXMgKEFCQ3MpIGZvciBjb2xsZWN0aW9ucywgYWNjb3JkaW5nIHRvIFBFUCAzMTE5LgoKRE9OJ1QgVVNFIFRISVMgTU9EVUxFIERJUkVDVExZISAgVGhlIGNsYXNzZXMgaGVyZSBzaG91bGQgYmUgaW1wb3J0ZWQKdmlhIGNvbGxlY3Rpb25zOyB0aGV5IGFyZSBkZWZpbmVkIGhlcmUgb25seSB0byBhbGxldmlhdGUgY2VydGFpbgpib290c3RyYXBwaW5nIGlzc3Vlcy4gIFVuaXQgdGVzdHMgYXJlIGluIHRlc3RfY29sbGVjdGlvbnMuCiIiIgoKI2Zyb20gYWJjIGltcG9ydCBBQkNNZXRhLCBhYnN0cmFjdG1ldGhvZAppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJIYXNoYWJsZSIsICJJdGVyYWJsZSIsICJJdGVyYXRvciIsCiAgICAgICAgICAgIlNpemVkIiwgIkNvbnRhaW5lciIsICJDYWxsYWJsZSIsCiAgICAgICAgICAgIlNldCIsICJNdXRhYmxlU2V0IiwKICAgICAgICAgICAiTWFwcGluZyIsICJNdXRhYmxlTWFwcGluZyIsCiAgICAgICAgICAgIk1hcHBpbmdWaWV3IiwgIktleXNWaWV3IiwgIkl0ZW1zVmlldyIsICJWYWx1ZXNWaWV3IiwKICAgICAgICAgICAiU2VxdWVuY2UiLCAiTXV0YWJsZVNlcXVlbmNlIiwKICAgICAgICAgICAiQnl0ZVN0cmluZyIsCiAgICAgICAgICAgXQoKIiIiCiMjIyBjb2xsZWN0aW9uIHJlbGF0ZWQgdHlwZXMgd2hpY2ggYXJlIG5vdCBleHBvc2VkIHRocm91Z2ggYnVpbHRpbiAjIyMKIyMgaXRlcmF0b3JzICMjCiNmaXhtZSBicnl0aG9uCiNieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcihiJycpKQpieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcignJykpCiNmaXhtZSBicnl0aG9uCiNieXRlYXJyYXlfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoYnl0ZWFycmF5KCkpKQojY2FsbGFibGVfaXRlcmF0b3IgPSA/Pz8KZGljdF9rZXlpdGVyYXRvciA9IHR5cGUoaXRlcih7fS5rZXlzKCkpKQpkaWN0X3ZhbHVlaXRlcmF0b3IgPSB0eXBlKGl0ZXIoe30udmFsdWVzKCkpKQpkaWN0X2l0ZW1pdGVyYXRvciA9IHR5cGUoaXRlcih7fS5pdGVtcygpKSkKbGlzdF9pdGVyYXRvciA9IHR5cGUoaXRlcihbXSkpCmxpc3RfcmV2ZXJzZWl0ZXJhdG9yID0gdHlwZShpdGVyKHJldmVyc2VkKFtdKSkpCnJhbmdlX2l0ZXJhdG9yID0gdHlwZShpdGVyKHJhbmdlKDApKSkKc2V0X2l0ZXJhdG9yID0gdHlwZShpdGVyKHNldCgpKSkKc3RyX2l0ZXJhdG9yID0gdHlwZShpdGVyKCIiKSkKdHVwbGVfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoKCkpKQp6aXBfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoemlwKCkpKQojIyB2aWV3cyAjIwpkaWN0X2tleXMgPSB0eXBlKHt9LmtleXMoKSkKZGljdF92YWx1ZXMgPSB0eXBlKHt9LnZhbHVlcygpKQpkaWN0X2l0ZW1zID0gdHlwZSh7fS5pdGVtcygpKQojIyBtaXNjICMjCmRpY3RfcHJveHkgPSB0eXBlKHR5cGUuX19kaWN0X18pCiIiIgoKZGVmIGFic3RyYWN0bWV0aG9kKHNlbGYpOgogICAgcmV0dXJuIHNlbGYKCiMjIyBPTkUtVFJJQ0sgUE9OSUVTICMjIwoKCiNjbGFzcyBJdGVyYWJsZShtZXRhY2xhc3M9QUJDTWV0YSk6CmNsYXNzIEl0ZXJhYmxlOgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHdoaWxlIEZhbHNlOgogICAgICAgICAgICB5aWVsZCBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBJdGVyYWJsZToKICAgICAgICAgICAgaWYgYW55KCJfX2l0ZXJfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCgojY2xhc3MgU2l6ZWQobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBTaXplZDoKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAwCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBTaXplZDoKICAgICAgICAgICAgaWYgYW55KCJfX2xlbl9fIiBpbiBCLl9fZGljdF9fIGZvciBCIGluIEMuX19tcm9fXyk6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKCiNjbGFzcyBDb250YWluZXIobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBDb250YWluZXI6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHgpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9fc3ViY2xhc3Nob29rX18oY2xzLCBDKToKICAgICAgICBpZiBjbHMgaXMgQ29udGFpbmVyOgogICAgICAgICAgICBpZiBhbnkoIl9fY29udGFpbnNfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiMjIyBNQVBQSU5HUyAjIyMKCgpjbGFzcyBNYXBwaW5nKFNpemVkLCBJdGVyYWJsZSwgQ29udGFpbmVyKToKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGZba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICByZXR1cm4gS2V5c1ZpZXcoc2VsZikKCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgcmV0dXJuIEl0ZW1zVmlldyhzZWxmKQoKICAgIGRlZiB2YWx1ZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIFZhbHVlc1ZpZXcoc2VsZikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgTWFwcGluZyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBkaWN0KHNlbGYuaXRlbXMoKSkgPT0gZGljdChvdGhlci5pdGVtcygpKQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3QgKHNlbGYgPT0gb3RoZXIpCgoKY2xhc3MgTXV0YWJsZU1hcHBpbmcoTWFwcGluZyk6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgcmFpc2UgS2V5RXJyb3IKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgX19tYXJrZXIgPSBvYmplY3QoKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCBkZWZhdWx0PV9fbWFya2VyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIHNlbGYuX19tYXJrZXI6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbCBzZWxmW2tleV0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBrZXkgPSBuZXh0KGl0ZXIoc2VsZikpCiAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yCiAgICAgICAgdmFsdWUgPSBzZWxmW2tleV0KICAgICAgICBkZWwgc2VsZltrZXldCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc2VsZi5wb3BpdGVtKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKCphcmdzLCAqKmt3ZHMpOgogICAgICAgIGlmIGxlbihhcmdzKSA+IDI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidXBkYXRlKCkgdGFrZXMgYXQgbW9zdCAyIHBvc2l0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyAoe30gZ2l2ZW4pIi5mb3JtYXQobGVuKGFyZ3MpKSkKICAgICAgICBlbGlmIG5vdCBhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInVwZGF0ZSgpIHRha2VzIGF0IGxlYXN0IDEgYXJndW1lbnQgKDAgZ2l2ZW4pIikKICAgICAgICBzZWxmID0gYXJnc1swXQogICAgICAgIG90aGVyID0gYXJnc1sxXSBpZiBsZW4oYXJncykgPj0gMiBlbHNlICgpCgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIE1hcHBpbmcpOgogICAgICAgICAgICBmb3Iga2V5IGluIG90aGVyOgogICAgICAgICAgICAgICAgc2VsZltrZXldID0gb3RoZXJba2V5XQogICAgICAgIGVsaWYgaGFzYXR0cihvdGhlciwgImtleXMiKToKICAgICAgICAgICAgZm9yIGtleSBpbiBvdGhlci5rZXlzKCk6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSBvdGhlcltrZXldCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gb3RoZXI6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3ZHMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWUKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmW2tleV0gPSBkZWZhdWx0CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiNNdXRhYmxlTWFwcGluZy5yZWdpc3RlcihkaWN0KQo=',
'/Lib/_collections.py':'',
'/Lib/_random.py':'aW1wb3J0IF9vcwpjbGFzcyBSYW5kb206CiAgICAiIiJSYW5kb20gbnVtYmVyIGdlbmVyYXRvciBiYXNlIGNsYXNzIHVzZWQgYnkgYm91bmQgbW9kdWxlIGZ1bmN0aW9ucy4KCiAgICBVc2VkIHRvIGluc3RhbnRpYXRlIGluc3RhbmNlcyBvZiBSYW5kb20gdG8gZ2V0IGdlbmVyYXRvcnMgdGhhdCBkb24ndAogICAgc2hhcmUgc3RhdGUuCgogICAgQ2xhc3MgUmFuZG9tIGNhbiBhbHNvIGJlIHN1YmNsYXNzZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgZGlmZmVyZW50IGJhc2ljCiAgICBnZW5lcmF0b3Igb2YgeW91ciBvd24gZGV2aXNpbmc6IGluIHRoYXQgY2FzZSwgb3ZlcnJpZGUgdGhlIGZvbGxvd2luZwogICAgbWV0aG9kczogIHJhbmRvbSgpLCBzZWVkKCksIGdldHN0YXRlKCksIGFuZCBzZXRzdGF0ZSgpLgogICAgT3B0aW9uYWxseSwgaW1wbGVtZW50IGEgZ2V0cmFuZGJpdHMoKSBtZXRob2Qgc28gdGhhdCByYW5kcmFuZ2UoKQogICAgY2FuIGNvdmVyIGFyYml0cmFyaWx5IGxhcmdlIHJhbmdlcy4KCiAgICAiIiIKICAgICNyYW5kb20KICAgICNzZWVkCiAgICAjZ2V0c3RhdGUKICAgICNzZXRzdGF0ZQoKCiAgICBWRVJTSU9OID0gMyAgICAgIyB1c2VkIGJ5IGdldHN0YXRlL3NldHN0YXRlCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHg9Tm9uZSk6CiAgICAgICAgIiIiSW5pdGlhbGl6ZSBhbiBpbnN0YW5jZS4KCiAgICAgICAgT3B0aW9uYWwgYXJndW1lbnQgeCBjb250cm9scyBzZWVkaW5nLCBhcyBmb3IgUmFuZG9tLnNlZWQoKS4KICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9eAoKICAgIGRlZiBzZWVkKHNlbGYsIGE9Tm9uZSwgdmVyc2lvbj0yKToKICAgICAgICAiIiJJbml0aWFsaXplIGludGVybmFsIHN0YXRlIGZyb20gaGFzaGFibGUgb2JqZWN0LgoKICAgICAgICBOb25lIG9yIG5vIGFyZ3VtZW50IHNlZWRzIGZyb20gY3VycmVudCB0aW1lIG9yIGZyb20gYW4gb3BlcmF0aW5nCiAgICAgICAgc3lzdGVtIHNwZWNpZmljIHJhbmRvbW5lc3Mgc291cmNlIGlmIGF2YWlsYWJsZS4KCiAgICAgICAgRm9yIHZlcnNpb24gMiAodGhlIGRlZmF1bHQpLCBhbGwgb2YgdGhlIGJpdHMgYXJlIHVzZWQgaWYgKmEqIGlzIGEgc3RyLAogICAgICAgIGJ5dGVzLCBvciBieXRlYXJyYXkuICBGb3IgdmVyc2lvbiAxLCB0aGUgaGFzaCgpIG9mICphKiBpcyB1c2VkIGluc3RlYWQuCgogICAgICAgIElmICphKiBpcyBhbiBpbnQsIGFsbCBiaXRzIGFyZSB1c2VkLgoKICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9YQogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKCiAgICBkZWYgZ2V0c3RhdGUoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGludGVybmFsIHN0YXRlOyBjYW4gYmUgcGFzc2VkIHRvIHNldHN0YXRlKCkgbGF0ZXIuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3N0YXRlCgogICAgZGVmIHNldHN0YXRlKHNlbGYsIHN0YXRlKToKICAgICAgICAiIiJSZXN0b3JlIGludGVybmFsIHN0YXRlIGZyb20gb2JqZWN0IHJldHVybmVkIGJ5IGdldHN0YXRlKCkuIiIiCiAgICAgICAgc2VsZi5fc3RhdGU9c3RhdGUKCiAgICBkZWYgcmFuZG9tKHNlbGYpOgogICAgICAgICIiIkdldCB0aGUgbmV4dCByYW5kb20gbnVtYmVyIGluIHRoZSByYW5nZSBbMC4wLCAxLjApLiIiIgogICAgICAgIHJldHVybiBfb3MucmFuZG9tKCkKCiAgICBkZWYgZ2V0cmFuZGJpdHMoc2VsZiwgayk6CiAgICAgICAgIiIiZ2V0cmFuZGJpdHMoaykgLT4geC4gIEdlbmVyYXRlcyBhIGxvbmcgaW50IHdpdGggayByYW5kb20gYml0cy4iIiIKICAgICAgICBpZiBrIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ251bWJlciBvZiBiaXRzIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKQogICAgICAgIGlmIGsgIT0gaW50KGspOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ251bWJlciBvZiBiaXRzIHNob3VsZCBiZSBhbiBpbnRlZ2VyJykKICAgICAgICBudW1ieXRlcyA9IChrICsgNykgLy8gOCAgICAgICAgICAgICAgICAgICAgICAgIyBiaXRzIC8gOCBhbmQgcm91bmRlZCB1cAogICAgICAgIHggPSBpbnQuZnJvbV9ieXRlcyhfdXJhbmRvbShudW1ieXRlcyksICdiaWcnKQogICAgICAgIHJldHVybiB4ID4+IChudW1ieXRlcyAqIDggLSBrKSAgICAgICAgICAgICAgICAjIHRyaW0gZXhjZXNzIGJpdHMK'
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.$py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.$py_VFS[lib])
}

//define import procedure to look up module in VFS
$import_via_VFS=function(module,alias,names){
  var ext=['.js', '.py']
  var search_path=__BRYTHON__.path
  var root = __BRYTHON__.brython_path;
  if (root.endswith('/')) {
     root=root.substring(0,root.length-1); 
  }
  if (search_path.indexOf(root+'/libs') == -1) {
     search_path.unshift(root+'/libs')
  }

  if (search_path.indexOf(root+'/Lib') == -1) {
     search_path.unshift(root+'/Lib')
  }

  for(var i=0; i<search_path.length; i++) {
     for (var j=0; j<ext.length; j++) {
         var path=search_path[i].replace(root, '')
         path+='/'+module+ext[j]
         
         //console.log("searching for " + path + " in VFS");
         var module_contents=readFromVFS(path)
         if(module_contents !== undefined) {
           console.log("imported ("+module+") via VFS:" + path)
           if (ext[j] == '.js') {
              return $import_js_module(module,alias,names,path,module_contents)
           }
           return $import_py_module(module,alias,names,path,module_contents)
         }
     }
  }
  res = Error()
  res.name = 'NotFoundError'
  res.message = "No module named '"+module+"'"
  throw res
}
$import_funcs.unshift($import_via_VFS)
  