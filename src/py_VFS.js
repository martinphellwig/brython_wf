__BRYTHON__.$py_VFS={
'/libs/svg.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXskc3ZnTlM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIjskeGxpbmtOUz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI7ZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXt2YXIgJGk9bnVsbDt2YXIgJG9iaj10aGlzO2VsdD0kRE9NTm9kZShkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJHN2Z05TLHRhZ19uYW1lKSk7aWYoYXJncyE9dW5kZWZpbmVkJiZhcmdzLmxlbmd0aD4wKXskc3RhcnQ9MDskZmlyc3Q9YXJnc1swXTtpZighaXNpbnN0YW5jZSgkZmlyc3QsJEt3KSl7JHN0YXJ0PTE7aWYoaXNpbnN0YW5jZSgkZmlyc3QsW3N0cixpbnQsZmxvYXRdKSl7dHh0PWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cigkZmlyc3QpKTtlbHQuYXBwZW5kQ2hpbGQodHh0KTt9ZWxzZSBpZihpc2luc3RhbmNlKCRmaXJzdCwkQWJzdHJhY3RUYWcpKWZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKyllbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmNoaWxkcmVuWyRpXSk7ZWxzZSB0cnl7ZWx0LmFwcGVuZENoaWxkKCRmaXJzdCk7fWNhdGNoKGVycil7JHJhaXNlKCdWYWx1ZUVycm9yJywnd3JvbmcgZWxlbWVudCAnKyRmaXJzdCk7fX1mb3IoJGk9JHN0YXJ0OyRpPGFyZ3MubGVuZ3RoOyRpKyspeyRhcmc9YXJnc1skaV07aWYoaXNpbnN0YW5jZSgkYXJnLCRLdykpaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PSJvbiIpZXZhbCgnZWx0LicrJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkrJz1mdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfScpO2Vsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCk9PSJzdHlsZSIpZWx0LnNldF9zdHlsZSgkYXJnLnZhbHVlKTtlbHNlIGlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoImhyZWYiKSE9PS0xKWVsdC5zZXRBdHRyaWJ1dGVOUygiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsImhyZWYiLCRhcmcudmFsdWUpO2Vsc2UgaWYoJGFyZy52YWx1ZSE9PWZhbHNlKWVsdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCRhcmcubmFtZS5yZXBsYWNlKCdfJywnLScpLCRhcmcudmFsdWUpO319cmV0dXJuIGVsdDt9dmFyICRzdmdfdGFncz1bJ2EnLCdhbHRHbHlwaCcsJ2FsdEdseXBoRGVmJywnYWx0R2x5cGhJdGVtJywnYW5pbWF0ZScsJ2FuaW1hdGVDb2xvcicsJ2FuaW1hdGVNb3Rpb24nLCdhbmltYXRlVHJhbnNmb3JtJywnY2lyY2xlJywnY2xpcFBhdGgnLCdjb2xvcl9wcm9maWxlJywnY3Vyc29yJywnZGVmcycsJ2Rlc2MnLCdlbGxpcHNlJywnZmVCbGVuZCcsJ2cnLCdpbWFnZScsJ2xpbmUnLCdsaW5lYXJHcmFkaWVudCcsJ21hcmtlcicsJ21hc2snLCdwYXRoJywncGF0dGVybicsJ3BvbHlnb24nLCdwb2x5bGluZScsJ3JhZGlhbEdyYWRpZW50JywncmVjdCcsJ3N0b3AnLCdzdmcnLCd0ZXh0JywndHJlZicsJ3RzcGFuJywndXNlJ107JHN2Zz1mdW5jdGlvbigpe3JldHVybiAkU1ZHVGFnKCdYJyxhcmd1bWVudHMpO307JHN2Zys9Jyc7dmFyIG9iaj1uZXcgT2JqZWN0KCk7Zm9yKHZhciBpPTA7aTwkc3ZnX3RhZ3MubGVuZ3RoO2krKyl7dmFyIHRhZz0kc3ZnX3RhZ3NbaV07ZXZhbCgnb2JqLicrdGFnKyc9Jyskc3ZnLnJlcGxhY2UoJ1gnLHRhZykpO31vYmouX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fTtyZXR1cm4gb2JqO30pKCk7',
'/libs/json.js':'ZnVuY3Rpb24gX3B5KG9iail7aWYob2JqPT09bnVsbClyZXR1cm4gTm9uZTtpZihpc2luc3RhbmNlKG9iaixsaXN0KSl7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXJlcy5wdXNoKF9weShvYmpbaV0pKTtyZXR1cm4gcmVzO31pZihvYmouX19jbGFzc19fIT09dW5kZWZpbmVkKXtpZihvYmouX19jbGFzc19fPT09bGlzdClmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKW9ialtpXT1fcHkob2JqW2ldKTtyZXR1cm4gb2JqO31pZih0eXBlb2Ygb2JqPT09J29iamVjdCcmJm9iai5fX2NsYXNzX189PT11bmRlZmluZWQpe3ZhciByZXM9ZGljdCgpO2Zvcih2YXIgYXR0ciBpbiBvYmopcmVzLl9fc2V0aXRlbV9fKGF0dHIsX3B5KG9ialthdHRyXSkpO3JldHVybiByZXM7fXJldHVybiBKU09iamVjdChvYmopO31mdW5jdGlvbiBfanMob2JqKXtpZihpc2luc3RhbmNlKG9iaixbaW50LHN0cl0pKXJldHVybiBvYmo7ZWxzZSBpZihvYmo9PT1Ob25lKXJldHVybiBudWxsO2Vsc2UgaWYob2JqPT09VHJ1ZSlyZXR1cm4gdHJ1ZTtlbHNlIGlmKG9iaj09PUZhbHNlKXJldHVybiBmYWxzZTtlbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGZsb2F0KSlyZXR1cm4gb2JqLnZhbHVlO2Vsc2UgaWYoaXNpbnN0YW5jZShvYmosW2xpc3QsdHVwbGVdKSl7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXJlcy5wdXNoKF9qcyhvYmpbaV0pKTtyZXR1cm4gcmVzO31lbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGRpY3QpKXt2YXIgcmVzPW5ldyBPYmplY3QoKTtmb3IodmFyIGk9MDtpPG9iai4ka2V5cy5sZW5ndGg7aSsrKXJlc1tvYmouJGtleXNbaV1dPW9iai4kdmFsdWVzW2ldO3JldHVybiByZXM7fWVsc2UgdGhyb3cgVHlwZUVycm9yKHN0cihvYmopKycgaXMgbm90IEpTT04gc2VyaWFsaXphYmxlJyk7fSRtb2R1bGU9e19fZ2V0YXR0cl9fOmZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdO30sbG9hZHM6ZnVuY3Rpb24oanNvbl9vYmope3JldHVybiBfcHkoSlNPTi5wYXJzZShqc29uX29iaikpO30sZHVtcHM6ZnVuY3Rpb24ob2JqKXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkoX2pzKG9iaikpO319Ow==',
'/libs/time.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxjbGVhcl9pbnRlcnZhbDpmdW5jdGlvbihpbnRfaWQpe3dpbmRvdy5jbGVhckludGVydmFsKGludF9pZCk7fSxjdGltZTpmdW5jdGlvbih0aW1lc3RhbXApe2lmKHRpbWVzdGFtcD09PXVuZGVmaW5lZCl0aW1lc3RhbXA9aW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDApO3ZhciBkPW5ldyBEYXRlKDApO2Quc2V0VVRDU2Vjb25kcyh0aW1lc3RhbXApO3JldHVybiBkLnRvVVRDU3RyaW5nKCk7fSxwZXJmX2NvdW50ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQobmV3IERhdGUoKS5nZXRUaW1lKCkvMTAwMC4wKTt9LHNldF9pbnRlcnZhbDpmdW5jdGlvbihmdW5jLGludGVydmFsKXtyZXR1cm4gaW50KHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jLGludGVydmFsKSk7fSxzZXRfdGltZW91dDpmdW5jdGlvbihmdW5jLGludGVydmFsKXt3aW5kb3cuc2V0VGltZW91dChmdW5jLGludGVydmFsKTt9LGxvY2FsdGltZTpmdW5jdGlvbihzZWNzKXt2YXIgZD1uZXcgRGF0ZSgpO2lmKHNlY3M9PT11bmRlZmluZWR8fHNlY3M9PT1Ob25lKXJldHVybiBkLmdldFRpbWUoKTt2YXIgamFuPW5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSwwLDEpO3ZhciBqdWw9bmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLDYsMSk7dmFyIGRzdD1pbnQoZC5nZXRUaW1lem9uZU9mZnNldCgpPE1hdGgubWF4KGphbi5nZXRUaW1lem9uZU9mZnNldCgpLGp1bC5nZXRUaW1lem9uZU9mZnNldCgpKSk7cmV0dXJuIGxpc3QoW2QuZ2V0RnVsbFllYXIoKSxkLmdldE1vbnRoKCkrMSxkLmdldERhdGUoKSxkLmdldEhvdXJzKCksZC5nZXRNaW51dGVzKCksZC5nZXRTZWNvbmRzKCksZC5nZXREYXkoKSwwLGRzdF0pO30sdGltZTpmdW5jdGlvbigpe3JldHVybihuZXcgRGF0ZSgpLmdldFRpbWUoKSkvMTAwMDt9LHN0cmZ0aW1lOmZ1bmN0aW9uKGZvcm1hdCxhcmcpe2Z1bmN0aW9uIG5zKGFyZyxuYil7dmFyIHJlcz1hcmcudG9TdHJpbmcoKTt3aGlsZShyZXMubGVuZ3RoPG5iKXJlcz0nMCcrcmVzO3JldHVybiByZXM7fWlmKGFyZyl2YXIgb2JqPW5ldyBEYXRlKGFyZ1swXSxhcmdbMV0tMSxhcmdbMl0sYXJnWzNdLGFyZ1s0XSxhcmdbNV0sYXJnWzZdKTtlbHNlIHZhciBvYmo9bmV3IERhdGUoKTt2YXIgYWJiX3dlZWtkYXlzPVsnU3UnLCdNbycsJ1R1JywnV2UnLCdUaCcsJ0ZyJywnU2EnXTt2YXIgZnVsbF93ZWVrZGF5cz1bJ1N1bmRheScsJ01vbmRheScsJ1R1ZXNkYXknLCdXZWRuZXNkYXknLCdUaHVyc2RheScsJ0ZyaWRheScsJ1NhdHVyZGF5J107dmFyIGFiYl9tb250aHM9WydKYW4nLCdGZWInLCdNYXInLCdBcHInLCdNYXknLCdKdW4nLCdKdWwnLCdBdWcnLCdTZXAnLCdPY3QnLCdOb3YnLCdEZWMnXTt2YXIgZnVsbF9tb250aHM9WydKYW51YXJ5JywnRmVicnVhcnknLCdNYXJjaCcsJ0FwcmlsJywnTWF5JywnSnVuZScsJ0p1bHknLCdBdWd1c3QnLCdTZXB0ZW1iZXInLCdPY3RvYmVyJywnTm92ZW1iZXInLCdEZWNlbWJlciddO3ZhciByZXM9Zm9ybWF0O3Jlcz1yZXMucmVwbGFjZSgvJUgvLG5zKG9iai5nZXRIb3VycygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVNLyxucyhvYmouZ2V0TWludXRlcygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVTLyxucyhvYmouZ2V0U2Vjb25kcygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVZLyxucyhvYmouZ2V0RnVsbFllYXIoKSw0KSk7cmVzPXJlcy5yZXBsYWNlKC8leS8sbnMob2JqLmdldEZ1bGxZZWFyKCksNCkuc3Vic3RyKDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVtLyxucyhvYmouZ2V0TW9udGgoKSsxLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVkLyxucyhvYmouZ2V0RGF0ZSgpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVhLyxhYmJfd2Vla2RheXNbb2JqLmdldERheSgpXSk7cmVzPXJlcy5yZXBsYWNlKC8lQS8sZnVsbF93ZWVrZGF5c1tvYmouZ2V0RGF5KCldKTtyZXM9cmVzLnJlcGxhY2UoLyViLyxhYmJfbW9udGhzW29iai5nZXRNb250aCgpXSk7cmVzPXJlcy5yZXBsYWNlKC8lQi8sZnVsbF9tb250aHNbb2JqLmdldE1vbnRoKCldKTtyZXR1cm4gcmVzO30sc3RydWN0X3RpbWU6ZnVuY3Rpb24oYXJnKXtpZighaXNpbnN0YW5jZShhcmcsW3R1cGxlLGxpc3RdKSl0aHJvdyBUeXBlRXJyb3IoJ2NvbnN0cnVjdG9yIHJlcXVpcmVzIGEgc2VxdWVuY2UnKTtpZihsZW4oYXJnKSE9OSl0aHJvdyBUeXBlRXJyb3IoInRpbWUuc3RydWN0X3RpbWUoKSB0YWtlcyBhIDktc2VxdWVuY2UgKCIrbGVuKGFyZykrIi1zZXF1ZW5jZSBnaXZlbiIpO3ZhciByZXM9YXJnO2NvbnNvbGUubG9nKHJlcy5fX2dldGl0ZW1fX1swXSk7dmFyIG5hbWVzPVsndG1feWVhcicsJ3RtX21vbicsJ3RtX21kYXknLCd0bV9ob3VyJywndG1fbWluJywndG1fc2VjJywndG1fd2RheScsJ3RtX3lkYXknLCd0bV9pc2RzdCcsJ3RtX3pvbmUnLCd0bV9nbXRvZmYnXTtyZXMuX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7dmFyIGl4PW5hbWVzLmluZGV4T2YoYXR0cik7aWYoaXg+LTEpcmV0dXJuIGFyZy5fX2dldGl0ZW1fXyhpeCk7aWYodHlwZW9mIHJlc1thdHRyXT09PSdmdW5jdGlvbicpcmV0dXJuKGZ1bmN0aW9uKG9iail7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG9ialthdHRyXS5hcHBseShvYmosYXJndW1lbnRzKTt9O30pKHJlcyk7ZWxzZSBpZihyZXNbYXR0cl0hPT11bmRlZmluZWQpcmV0dXJuIHJlc1thdHRyXTtlbHNlIHRocm93IEF0dHJpYnV0ZUVycm9yKCJvYmplY3QgaGFzIG5vIGF0dHJpYnV0ZSAnIithdHRyKyInIik7fTtyZXR1cm4gcmVzO319Ow==',
'/libs/random.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxyYW5kb206ZnVuY3Rpb24oKXtpZihhcmd1bWVudHMubGVuZ3RoPjApdGhyb3cgVHlwZUVycm9yKCJyYW5kb20oKSB0YWtlcyBubyBhcmd1bWVudHMgKCIrYXJndW1lbnRzLmxlbmd0aCsiIGdpdmVuKSIpO2Vsc2UgcmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpO30scmFuZGludDpmdW5jdGlvbihhLGIpe3JldHVybiBpbnQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihiLWEpK2EpKTt9LHJhbmRyYW5nZTpmdW5jdGlvbihzdGFydCxzdG9wLHN0ZXApe2lmKHN0ZXA9PT11bmRlZmluZWQpc3RlcD0xO2Vsc2UgaWYoc3RlcD09MCl7fWlmKHN0b3A9PT11bmRlZmluZWQpe3N0b3A9c3RhcnQ7c3RhcnQ9MDt9dmFyIHdpZHRoPXN0b3Atc3RhcnQ7aWYoc3RlcD09MSYmd2lkdGg+MClyZXR1cm4gc3RhcnQraW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp3aWR0aCkpO2Vsc2V7fXZhciBuO2lmKHN0ZXA+MCluPU1hdGguZmxvb3IoKHdpZHRoK3N0ZXAtMSkvc3RlcCk7ZWxzZSBuPU1hdGguZmxvb3IoKHdpZHRoK3N0ZXArMSkvc3RlcCk7cmV0dXJuIHN0YXJ0K3N0ZXAqaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpuKSk7fSxzaHVmZmxlOmZ1bmN0aW9uKHgscm5kKXtpZih4Lmxlbmd0aDw9MSlyZXR1cm4geDtpZihybmQ9PT11bmRlZmluZWQpcm5kPU1hdGgucmFuZG9tO2Zvcih2YXIgaixvLGk9eC5sZW5ndGg7aTtqPXBhcnNlSW50KHJuZCgpKmkpLG89eFstLWldLHhbaV09eFtqXSx4W2pdPW8pO319OyRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdyYW5kb20nPiI7fTs=',
'/libs/math.js':'dmFyIGZsb2F0X2NoZWNrPWZ1bmN0aW9uKHgpe2lmKGlzaW5zdGFuY2UoeCxmbG9hdCkpcmV0dXJuIHgudmFsdWU7cmV0dXJuIHg7fTt2YXIgaXNpbmY9ZnVuY3Rpb24oeCl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO3JldHVybiB4MT09LUluZmluaXR5fHx4MT09SW5maW5pdHl8fHgxPT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFl8fHgxPT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7fTskbW9kdWxlPXtfX2dldGF0dHJfXzpmdW5jdGlvbihhdHRyKXt2YXIgcmVzPXRoaXNbYXR0cl07aWYocmVzPT09dW5kZWZpbmVkKSRyYWlzZSgnQXR0cmlidXRlRXJyb3InLCdtb2R1bGUgbWF0aCBoYXMgbm8gYXR0cmlidXRlICcrYXR0cik7cmV0dXJuIHJlczt9LGFjb3M6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguYWNvcyhmbG9hdF9jaGVjayh4KSkpO30sYWNvc2g6ZnVuY3Rpb24oeCl7aWYoaXNpbmYoeCkpcmV0dXJuIGZsb2F0KCdpbmYnKTt2YXIgeT1mbG9hdF9jaGVjayh4KTtyZXR1cm4gZmxvYXQoTWF0aC5sb2coeStNYXRoLnNxcnQoeSp5LTEpKSk7fSxhc2luOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmFzaW4oZmxvYXRfY2hlY2soeCkpKTt9LGFzaW5oOmZ1bmN0aW9uKHgpe2lmKGlzaW5mKHgpKXJldHVybiBmbG9hdCgnaW5mJyk7dmFyIHk9ZmxvYXRfY2hlY2soeCk7cmV0dXJuIGZsb2F0KE1hdGgubG9nKHkrTWF0aC5zcXJ0KHkqeSsxKSkpO30sYXRhbjpmdW5jdGlvbih4KXtpZihpc2luZih4KSlyZXR1cm4gZmxvYXQoTWF0aC5QSS8yKTtyZXR1cm4gZmxvYXQoTWF0aC5hdGFuKGZsb2F0X2NoZWNrKHgpKSk7fSxhdGFuMjpmdW5jdGlvbih5LHgpe3JldHVybiBmbG9hdChNYXRoLmF0YW4yKHkseCkpO30sYXRhbmg6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7aWYoeT09MClyZXR1cm4gMDtyZXR1cm4gZmxvYXQoMC41Kk1hdGgubG9nKCgxL3krMSkvKDEveS0xKSkpO30sY2VpbDpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTtpZighaXNOYU4ocGFyc2VGbG9hdCh5KSkmJmlzRmluaXRlKHkpKXJldHVybiBpbnQoTWF0aC5jZWlsKHkpKTtpZih5Ll9fY2VpbF9fIT09dW5kZWZpbmVkKXJldHVybiB5Ll9fY2VpbF9fKCk7JHJhaXNlKCdWYWx1ZUVycm9yJywnb2JqZWN0IGlzIG5vdCBhIG51bWJlciBhbmQgZG9lcyBub3QgY29udGFpbiBfX2NlaWxfXycpO30sY29weXNpZ246ZnVuY3Rpb24oeCx5KXt2YXIgeDE9TWF0aC5hYnMoZmxvYXRfY2hlY2soeCkpO3ZhciB5MT1mbG9hdF9jaGVjayh5KTt2YXIgc2lnbj15MT95MTwwPy0xOjE6MTtpZihpc2luc3RhbmNlKHgsaW50KSlyZXR1cm4geDEqc2lnbjtlbHNlIHJldHVybiBmbG9hdCh4MSpzaWduKTt9LGNvczpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5jb3MoZmxvYXRfY2hlY2soeCkpKTt9LGRlZ3JlZXM6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KGZsb2F0X2NoZWNrKHgpKjE4MC9NYXRoLlBJKTt9LGU6ZmxvYXQoTWF0aC5FKSxlcmY6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7dmFyIHQ9MS4wLygxLjArMC41Kk1hdGguYWJzKHkpKTt2YXIgYW5zPTEtdCpNYXRoLmV4cCgteSp5LTEuMjY1NTEyMjMrdCooMS4wMDAwMjM2OCt0KigwLjM3NDA5MTk2K3QqKDAuMDk2Nzg0MTgrdCooLTAuMTg2Mjg4MDYrdCooMC4yNzg4NjgwNyt0KigtMS4xMzUyMDM5OCt0KigxLjQ4ODUxNTg3K3QqKC0wLjgyMjE1MjIzK3QqMC4xNzA4NzI3NykpKSkpKSkpKTtpZih5Pj0wLjApcmV0dXJuIGFucztyZXR1cm4gLWFuczt9LGVyZmM6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7dmFyIHQ9MS4wLygxLjArMC41Kk1hdGguYWJzKHkpKTt2YXIgYW5zPTEtdCpNYXRoLmV4cCgteSp5LTEuMjY1NTEyMjMrdCooMS4wMDAwMjM2OCt0KigwLjM3NDA5MTk2K3QqKDAuMDk2Nzg0MTgrdCooLTAuMTg2Mjg4MDYrdCooMC4yNzg4NjgwNyt0KigtMS4xMzUyMDM5OCt0KigxLjQ4ODUxNTg3K3QqKC0wLjgyMjE1MjIzK3QqMC4xNzA4NzI3NykpKSkpKSkpKTtpZih5Pj0wLjApcmV0dXJuIDEtYW5zO3JldHVybiAxK2Fuczt9LGV4cDpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5leHAoZmxvYXRfY2hlY2soeCkpKTt9LGV4cG0xOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmV4cChmbG9hdF9jaGVjayh4KSktMSk7fSxmYWJzOmZ1bmN0aW9uKHgpe3JldHVybiB4PjA/ZmxvYXQoeCk6ZmxvYXQoLXgpO30sZmFjdG9yaWFsOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciByPTE7Zm9yKHZhciBpPTI7aTw9eTtpKyspcio9aTtyZXR1cm4gcjt9LGZsb29yOmZ1bmN0aW9uKHgpe3JldHVybiBNYXRoLmZsb29yKGZsb2F0X2NoZWNrKHgpKTt9LGZtb2Q6ZnVuY3Rpb24oeCx5KXtyZXR1cm4gZmxvYXQoZmxvYXRfY2hlY2soeCklZmxvYXRfY2hlY2soeSkpO30sZnJleHA6ZnVuY3Rpb24oeCl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO3ZhciBleD1NYXRoLmZsb29yKE1hdGgubG9nKHgxKS9NYXRoLmxvZygyKSkrMTtmcmFjPXgxL01hdGgucG93KDIsZXgpO3JldHVybiBbZnJhYyxleF07fSxnYW1tYTpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTt2YXIgej15KzE7dmFyIGQxPU1hdGguc3FydCgyKk1hdGguUEkpL3o7dmFyIGQyPTEuMDAwMDAwMDAwMTkwMDE1O2QyKz03Ni4xODAwOTE3Mjk0NzE0Ni8oeisxKTtkMis9LTg2LjUwNTMyMDMyOTQxNjc3Lyh6KzIpO2QyKz0yNC4wMTQwOTgyNDA4MzA5MS8oeiszKTtkMis9LTEuMjMxNzM5NTcyNDUwMTU1Lyh6KzQpO2QyKz0xLjIwODY1MDk3Mzg2NjE3OUUtMy8oeis1KTtkMis9LTUuMzk1MjM5Mzg0OTUzRS02Lyh6KzYpO3JldHVybiBkMSpkMipNYXRoLnBvdyh6KzUuNSx6KzAuNSkqTWF0aC5leHAoLSh6KzUuNSkpO30saHlwb3Q6ZnVuY3Rpb24oeCx5KXt2YXIgeDE9ZmxvYXRfY2hlY2soeCk7dmFyIHkxPWZsb2F0X2NoZWNrKHkpO3JldHVybiBmbG9hdChNYXRoLnNxcnQoeDEqeDEreTEqeTEpKTt9LGlzZmluaXRlOmZ1bmN0aW9uKHgpe3JldHVybiBpc0Zpbml0ZShmbG9hdF9jaGVjayh4KSk7fSxpc2luZjpmdW5jdGlvbih4KXtyZXR1cm4gaXNpbmYoeCk7fSxpc25hbjpmdW5jdGlvbih4KXtyZXR1cm4gaXNOYU4oZmxvYXRfY2hlY2soeCkpO30sbGRleHA6ZnVuY3Rpb24oeCxpKXt2YXIgbXVsPU1hdGgucG93KDIsZmxvYXRfY2hlY2soaSkpO2lmKGlzaW5zdGFuY2UoeCxpbnQpKXJldHVybiB4Km11bDtlbHNlIHJldHVybiBmbG9hdCh4LnZhbHVlKm11bCk7fSxsZ2FtbWE6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7dmFyIHo9eSsxO3ZhciBkMT1NYXRoLnNxcnQoMipNYXRoLlBJKS96O3ZhciBkMj0xLjAwMDAwMDAwMDE5MDAxNTtkMis9NzYuMTgwMDkxNzI5NDcxNDYvKHorMSk7ZDIrPS04Ni41MDUzMjAzMjk0MTY3Ny8oeisyKTtkMis9MjQuMDE0MDk4MjQwODMwOTEvKHorMyk7ZDIrPS0xLjIzMTczOTU3MjQ1MDE1NS8oeis0KTtkMis9MS4yMDg2NTA5NzM4NjYxNzlFLTMvKHorNSk7ZDIrPS01LjM5NTIzOTM4NDk1M0UtNi8oeis2KTtyZXR1cm4gZmxvYXQoTWF0aC5sb2coTWF0aC5hYnMoZDEqZDIqTWF0aC5wb3coeis1LjUseiswLjUpKk1hdGguZXhwKC0oeis1LjUpKSkpKTt9LGxvZzpmdW5jdGlvbih4LGJhc2Upe3ZhciB4MT1mbG9hdF9jaGVjayh4KTtpZihiYXNlPT09dW5kZWZpbmVkKXJldHVybiBmbG9hdChNYXRoLmxvZyh4MSkpO3JldHVybiBmbG9hdChNYXRoLmxvZyh4MSkvTWF0aC5sb2coZmxvYXRfY2hlY2soYmFzZSkpKTt9LGxvZzFwOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmxvZygxLjArZmxvYXRfY2hlY2soeCkpKTt9LGxvZzI6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGgubG9nKGZsb2F0X2NoZWNrKHgpKS9NYXRoLkxOMik7fSxsb2cxMDpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5sb2coZmxvYXRfY2hlY2soeCkpL01hdGguTE4xMCk7fSxtb2RmOmZ1bmN0aW9uKHgpe3ZhciB4MT1mbG9hdF9jaGVjayh4KTtpZih4MT4wKXt2YXIgaT1mbG9hdCh4MS1NYXRoLmZsb29yKHgxKSk7cmV0dXJuIFtpLGZsb2F0KHgxLWkpXTt9dmFyIGk9ZmxvYXQoeDEtTWF0aC5jZWlsKHgxKSk7cmV0dXJuIFtpLGZsb2F0KE1hdGguY2VpbCh4MSkpXTt9LHBpOmZsb2F0KE1hdGguUEkpLHBvdzpmdW5jdGlvbih4LHkpe2lmKGlzaW5zdGFuY2UoeCxpbnQpKXJldHVybiBNYXRoLnBvdyh4LGZsb2F0X2NoZWNrKHkpKTtlbHNlIHJldHVybiBmbG9hdChNYXRoLnBvdyh4LnZhbHVlLGZsb2F0X2NoZWNrKHkpKSk7fSxyYWRpYW5zOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChmbG9hdF9jaGVjayh4KSpNYXRoLlBJLzE4MCk7fSxzaW46ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguc2luKGZsb2F0X2NoZWNrKHgpKSk7fSxzcXJ0OmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLnNxcnQoZmxvYXRfY2hlY2soeCkpKTt9LHRydW5jOmZ1bmN0aW9uKHgpe2lmKHguX190cnVuY19fIT09dW5kZWZpbmVkKXJldHVybiB4Ll9fdHJ1bmNfXygpO3ZhciB4MT1mbG9hdF9jaGVjayh4KTtpZighaXNOYU4ocGFyc2VGbG9hdCh4MSkpJiZpc0Zpbml0ZSh4MSkpcmV0dXJuIGludChNYXRoLmZsb29yKHgxKSk7JHJhaXNlKCdWYWx1ZUVycm9yJywnb2JqZWN0IGlzIG5vdCBhIG51bWJlciBhbmQgZG9lcyBub3QgY29udGFpbiBfX3RydW5jX18nKTt9fTskbW9kdWxlLl9fY2xhc3NfXz0kbW9kdWxlOyRtb2R1bGUuX19zdHJfXz1mdW5jdGlvbigpe3JldHVybiAiPG1vZHVsZSAnbWF0aCc+Ijt9O2Zvcih2YXIgJGF0dHIgaW4gJG1vZHVsZSlpZih0eXBlb2YgJG1vZHVsZVskYXR0cl09PT0nZnVuY3Rpb24nKXskbW9kdWxlWyRhdHRyXS5fX3JlcHJfXz0oZnVuY3Rpb24oZnVuYyl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuICc8YnVpbHQtaW4gZnVuY3Rpb24gJytmdW5jKyc+Jzt9O30pKCRhdHRyKTskbW9kdWxlWyRhdHRyXS5fX3N0cl9fPShmdW5jdGlvbihmdW5jKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gJzxidWlsdC1pbiBmdW5jdGlvbiAnK2Z1bmMrJz4nO307fSkoJGF0dHIpO30=',
'/libs/html.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmdW5jdGlvbiAkVGFnKHRhZ05hbWUsYXJncyl7dmFyICRpPW51bGw7dmFyIGVsdD1udWxsO3ZhciBlbHQ9JERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKSk7ZWx0LnBhcmVudD10aGlzO2lmKGFyZ3MhPXVuZGVmaW5lZCYmYXJncy5sZW5ndGg+MCl7JHN0YXJ0PTA7JGZpcnN0PWFyZ3NbMF07aWYoIWlzaW5zdGFuY2UoJGZpcnN0LCRLdykpeyRzdGFydD0xO2lmKGlzaW5zdGFuY2UoJGZpcnN0LFtzdHIsaW50LGZsb2F0XSkpe3R4dD1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgkZmlyc3QudG9TdHJpbmcoKSk7ZWx0LmFwcGVuZENoaWxkKHR4dCk7fWVsc2UgaWYoaXNpbnN0YW5jZSgkZmlyc3QsJFRhZ1N1bSkpZm9yKCRpPTA7JGk8JGZpcnN0LmNoaWxkcmVuLmxlbmd0aDskaSsrKWVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuY2hpbGRyZW5bJGldKTtlbHNlIHRyeXtlbHQuYXBwZW5kQ2hpbGQoJGZpcnN0KTt9Y2F0Y2goZXJyKXt0aHJvdyBWYWx1ZUVycm9yKCd3cm9uZyBlbGVtZW50ICcrJGZpcnN0KTt9fWZvcigkaT0kc3RhcnQ7JGk8YXJncy5sZW5ndGg7JGkrKyl7JGFyZz1hcmdzWyRpXTtpZihpc2luc3RhbmNlKCRhcmcsJEt3KSlpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHIoMCwyKT09PSJvbiIpZXZhbCgnZWx0LicrJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkrJz1mdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfScpO2Vsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCk9PSJzdHlsZSIpZWx0LnNldF9zdHlsZSgkYXJnLnZhbHVlKTtlbHNlIGlmKCRhcmcudmFsdWUhPT1mYWxzZSl0cnl7dmFyIGFyZz0kYXJnLm5hbWUudG9Mb3dlckNhc2UoKTtlbHQuc2V0QXR0cmlidXRlKGFyZywkYXJnLnZhbHVlKTtpZihhcmc9PSJjbGFzcyIpZWx0LnNldEF0dHJpYnV0ZSgiY2xhc3NOYW1lIiwkYXJnLnZhbHVlKTt9Y2F0Y2goZXJyKXt0aHJvdyBWYWx1ZUVycm9yKCJjYW4ndCBzZXQgYXR0cmlidXRlICIrJGFyZy5uYW1lKTt9fX1yZXR1cm4gZWx0O31mdW5jdGlvbiBBKCl7cmV0dXJuICRUYWcoJ0EnLGFyZ3VtZW50cyk7fUEuX19uYW1lX189J2h0bWwuQSc7dmFyICRzcmM9QSsnJzskdGFncz1bJ0EnLCdBQkJSJywnQUNST05ZTScsJ0FERFJFU1MnLCdBUFBMRVQnLCdCJywnQkRPJywnQklHJywnQkxPQ0tRVU9URScsJ0JVVFRPTicsJ0NBUFRJT04nLCdDRU5URVInLCdDSVRFJywnQ09ERScsJ0RFTCcsJ0RGTicsJ0RJUicsJ0RJVicsJ0RMJywnRU0nLCdGSUVMRFNFVCcsJ0ZPTlQnLCdGT1JNJywnRlJBTUVTRVQnLCdIMScsJ0gyJywnSDMnLCdINCcsJ0g1JywnSDYnLCdJJywnSUZSQU1FJywnSU5TJywnS0JEJywnTEFCRUwnLCdMRUdFTkQnLCdNQVAnLCdNRU5VJywnTk9GUkFNRVMnLCdOT1NDUklQVCcsJ09CSkVDVCcsJ09MJywnT1BUR1JPVVAnLCdQUkUnLCdRJywnUycsJ1NBTVAnLCdTQ1JJUFQnLCdTRUxFQ1QnLCdTTUFMTCcsJ1NQQU4nLCdTVFJJS0UnLCdTVFJPTkcnLCdTVFlMRScsJ1NVQicsJ1NVUCcsJ1RBQkxFJywnVEVYVEFSRUEnLCdUSVRMRScsJ1RUJywnVScsJ1VMJywnVkFSJywnQk9EWScsJ0NPTEdST1VQJywnREQnLCdEVCcsJ0hFQUQnLCdIVE1MJywnTEknLCdQJywnVEJPRFknLCdPUFRJT04nLCdURCcsJ1RGT09UJywnVEgnLCdUSEVBRCcsJ1RSJywnQVJFQScsJ0JBU0UnLCdCQVNFRk9OVCcsJ0JSJywnQ09MJywnRlJBTUUnLCdIUicsJ0lNRycsJ0lOUFVUJywnSVNJTkRFWCcsJ0xJTksnLCdNRVRBJywnUEFSQU0nXTskdGFncz0kdGFncy5jb25jYXQoWydBUlRJQ0xFJywnQVNJREUnLCdBVURJTycsJ0JESScsJ0NBTlZBUycsJ0NPTU1BTkQnLCdEQVRBTElTVCcsJ0RFVEFJTFMnLCdESUFMT0cnLCdFTUJFRCcsJ0ZJR0NBUFRJT04nLCdGSUdVUkUnLCdGT09URVInLCdIRUFERVInLCdLRVlHRU4nLCdNQVJLJywnTUVURVInLCdOQVYnLCdPVVRQVVQnLCdQUk9HUkVTUycsJ1JQJywnUlQnLCdSVUJZJywnU0VDVElPTicsJ1NPVVJDRScsJ1NVTU1BUlknLCdUSU1FJywnVFJBQ0snLCdWSURFTycsJ1dCUiddKTt2YXIgb2JqPW5ldyBPYmplY3QoKTtmb3IoJGk9MDskaTwkdGFncy5sZW5ndGg7JGkrKyl7JGNvZGU9JHNyYy5yZXBsYWNlKC9BL2dtLCR0YWdzWyRpXSk7ZXZhbCgib2JqLiIrJHRhZ3NbJGldKyI9IiskY29kZSk7ZXZhbCgib2JqLiIrJHRhZ3NbJGldKycuX19uYW1lX189Imh0bWwuJyskdGFnc1skaV0rJyInKTt9b2JqLl9fZ2V0YXR0cl9fPWZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdO307cmV0dXJuIG9iajt9KSgpOw==',
'/libs/hashlib.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7aWYoYXR0cj09J25ldycpcmV0dXJuICRoYXNobGliX25ldztyZXR1cm4gdGhpc1thdHRyXTt9LG1kNTpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ21kNScpO30sc2hhMTpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTEnKTt9LHNoYTIyNDpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTIyNCcpO30sc2hhMjU2OmZ1bmN0aW9uKCl7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjU2Jyk7fSxzaGEzODQ6ZnVuY3Rpb24oKXtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEzODQnKTt9LHNoYTUxMjpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTUxMicpO30sYWxnb3JpdGhtc19ndWFyYW50ZWVkOlsnbWQ1Jywnc2hhMScsJ3NoYTIyNCcsJ3NoYTI1NicsJ3NoYTM4NCcsJ3NoYTUxMiddLGFsZ29yaXRobXNfYXZhaWxhYmxlOlsnbWQ1Jywnc2hhMScsJ3NoYTIyNCcsJ3NoYTI1NicsJ3NoYTM4NCcsJ3NoYTUxMiddfTtmdW5jdGlvbiAkZ2V0X0NyeXB0b0pTX2xpYihhbGcpe3ZhciBpbXA9JGltcG9ydGVyKCk7dmFyICR4bWxodHRwPWltcFswXSxmYWtlX3FzPWltcFsxXSx0aW1lcj1pbXBbMl0scmVzPW51bGw7JHhtbGh0dHAub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aWYoJHhtbGh0dHAucmVhZHlTdGF0ZT09NCl7d2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7aWYoJHhtbGh0dHAuc3RhdHVzPT0yMDB8fCR4bWxodHRwLnN0YXR1cz09MClyZXM9JHhtbGh0dHAucmVzcG9uc2VUZXh0O2Vsc2V7cmVzPUVycm9yKCk7cmVzLm5hbWU9J05vdEZvdW5kRXJyb3InO3Jlcy5tZXNzYWdlPSJObyBDcnlwdG9KUyBsaWIgbmFtZWQgJyIrYWxnKyInIjt9fX07JHhtbGh0dHAub3BlbignR0VUJyxfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJ2xpYnMvY3J5cHRvX2pzL3JvbGx1cHMvJythbGcrJy5qcycrZmFrZV9xcyxmYWxzZSk7aWYoJ292ZXJyaWRlTWltZVR5cGUnIGluICR4bWxodHRwKSR4bWxodHRwLm92ZXJyaWRlTWltZVR5cGUoInRleHQvcGxhaW4iKTskeG1saHR0cC5zZW5kKCk7aWYocmVzLmNvbnN0cnVjdG9yPT09RXJyb3IpdGhyb3cgcmVzO3RyeXtldmFsKHJlcysiOyBfX0JSWVRIT05fXy5DcnlwdG9KUz1DcnlwdG9KUzsiKTt9Y2F0Y2goZXJyKXt0aHJvdyBFcnJvcigiSlMgRXZhbCBFcnJvciIsIkNhbm5vdCBldmFsIENyeXB0b0pTIGFsZ29yaXRobSAnIithbGcrIicgOiBlcnJvcjoiK2Vycik7fX1mdW5jdGlvbiAkaGFzaGxpYl9uZXcoYWxnKXtpZihhbGc9PSdtZDUnKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uTUQ1PT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdtZDUnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5NRDUuY3JlYXRlKCk7fWVsc2UgaWYoYWxnPT0nc2hhMScpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExPT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGExJyk7dGhpcy5oYXNoPV9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMS5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGEyMjQnKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjI0PT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyMjQnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQuY3JlYXRlKCk7fWVsc2UgaWYoYWxnPT0nc2hhMjU2Jyl7aWYoX19CUllUSE9OX18uQ3J5cHRvPT09dW5kZWZpbmVkfHxfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTI1Nj09PXVuZGVmaW5lZCkkZ2V0X0NyeXB0b0pTX2xpYignc2hhMjU2Jyk7dGhpcy5oYXNoPV9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO31lbHNlIGlmKGFsZz09J3NoYTM4NCcpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEzODQ9PT11bmRlZmluZWQpJGdldF9DcnlwdG9KU19saWIoJ3NoYTM4NCcpO3RoaXMuaGFzaD1fX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4NC5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGE1MTInKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBNTEyPT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGE1MTInKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTIuY3JlYXRlKCk7fWVsc2UgJHJhaXNlKCdBdHRyaWJ1dGVFcnJvcicsJ0ludmFsaWQgaGFzaCBhbGdvcml0aG06JythbGcpO3RoaXMuX19jbGFzc19fPSR0eXBlO3RoaXMuX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuICRnZXRhdHRyKHRoaXMsYXR0cik7fTt0aGlzLl9fc3RyX189ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZXhkaWdlc3QoKTt9O3RoaXMudXBkYXRlPWZ1bmN0aW9uKG1zZyl7dGhpcy5oYXNoLnVwZGF0ZShtc2cpO307dGhpcy5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzaC5jbG9uZSgpO307dGhpcy5oZXhkaWdlc3Q9ZnVuY3Rpb24oKXt2YXIgdGVtcD10aGlzLmhhc2guY2xvbmUoKTt0ZW1wPXRlbXAuZmluYWxpemUoKTtyZXR1cm4gdGVtcC50b1N0cmluZygpO307cmV0dXJuIHRoaXM7fSRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdoYXNobGliJz4iO307',
'/libs/_os.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxyYW5kb206ZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQoTWF0aC5yYW5kb20oKSk7fSxyYW5kaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGItYSkrYSkpO319OyRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdfb3MnPiI7fTs=',
'/libs/crypto_js/rollups/sha1.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihlLG0pe3ZhciBwPXt9LGo9cC5saWI9e30sbD1mdW5jdGlvbigpe30sZj1qLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtsLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBsKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0sbj1qLldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPW0/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fGgpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGI9MDtiPGE7Yis9NCljLnB1c2goNDI5NDk2NzI5NiplLnJhbmRvbSgpfDApO3JldHVybiBuZXcgbi5pbml0KGMsYSk7fX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGIuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsYj1bXSxkPTA7ZDxjO2QrPTIpYltkPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGQsMiksMTYpPDwyNC00KihkJTgpO3JldHVybiBuZXcgbi5pbml0KGIsYy8yKTt9fSxnPWIuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBiPVtdLGQ9MDtkPGE7ZCsrKWIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbZD4+PjJdPj4+MjQtOCooZCU0KSYyNTUpKTtyZXR1cm4gYi5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKTt9fSxyPWIuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShnLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZy5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSxrPWouQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBuLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ci5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZDt9cmV0dXJuIG5ldyBuLmluaXQoZyxkKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2ouSGFzaGVyPWsuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuIG5ldyBhLmluaXQoYikuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGYpe3JldHVybiBuZXcgcy5ITUFDLmluaXQoYSxmKS5maW5hbGl6ZShiKTt9O319KTt2YXIgcz1wLmFsZ289e307cmV0dXJuIHA7fShNYXRoKTsoZnVuY3Rpb24oKXt2YXIgZT1DcnlwdG9KUyxtPWUubGliLHA9bS5Xb3JkQXJyYXksaj1tLkhhc2hlcixsPVtdLG09ZS5hbGdvLlNIQTE9ai5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgcC5pbml0KFsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF0pO30sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGYsbil7Zm9yKHZhciBiPXRoaXMuX2hhc2gud29yZHMsaD1iWzBdLGc9YlsxXSxlPWJbMl0saz1iWzNdLGo9Yls0XSxhPTA7ODA+YTthKyspe2lmKDE2PmEpbFthXT1mW24rYV18MDtlbHNle3ZhciBjPWxbYS0zXV5sW2EtOF1ebFthLTE0XV5sW2EtMTZdO2xbYV09Yzw8MXxjPj4+MzE7fWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXmspLTg5OTQ5NzUxNCk7aj1rO2s9ZTtlPWc8PDMwfGc+Pj4yO2c9aDtoPWM7fWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGY9dGhpcy5fZGF0YSxlPWYud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsaD04KmYuc2lnQnl0ZXM7ZVtoPj4+NV18PTEyODw8MjQtaCUzMjtlWyhoKzY0Pj4+OTw8NCkrMTRdPU1hdGguZmxvb3IoYi80Mjk0OTY3Mjk2KTtlWyhoKzY0Pj4+OTw8NCkrMTVdPWI7Zi5zaWdCeXRlcz00KmUubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGU9ai5jbG9uZS5jYWxsKHRoaXMpO2UuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBlO319KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKTt9KSgpOw==',
'/libs/crypto_js/rollups/sha3.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbih2LHApe3ZhciBkPXt9LHU9ZC5saWI9e30scj1mdW5jdGlvbigpe30sZj11LkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtyLnByb3RvdHlwZT10aGlzO3ZhciBiPW5ldyByKCk7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtiLmluaXQucHJvdG90eXBlPWI7Yi4kc3VwZXI9dGhpcztyZXR1cm4gYjt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scz11LldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGIpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWIhPXA/Yjo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHkpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YVtiPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGE7Yys9NCliLnB1c2goNDI5NDk2NzI5Nip2LnJhbmRvbSgpfDApO3JldHVybiBuZXcgcy5pbml0KGIsYSk7fX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGMuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9YS5sZW5ndGgsYz1bXSxqPTA7ajxiO2orPTIpY1tqPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGosMiksMTYpPDwyNC00KihqJTgpO3JldHVybiBuZXcgcy5pbml0KGMsYi8yKTt9fSxlPXguTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGI9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBjPVtdLGo9MDtqPGE7aisrKWMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJbaj4+PjJdPj4+MjQtOCooaiU0KSYyNTUpKTtyZXR1cm4gYy5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKTt9fSxxPXguVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShlLnN0cmluZ2lmeShhKSkpO31jYXRjaChiKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx0PXUuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBzLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9cS5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09ajt9cmV0dXJuIG5ldyBzLmluaXQoZixqKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO3UuSGFzaGVyPXQuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuIG5ldyBhLmluaXQoYykuZmluYWxpemUoYik7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe3JldHVybiBuZXcgdy5ITUFDLmluaXQoYSxjKS5maW5hbGl6ZShiKTt9O319KTt2YXIgdz1kLmFsZ289e307cmV0dXJuIGQ7fShNYXRoKTsoZnVuY3Rpb24odil7dmFyIHA9Q3J5cHRvSlMsZD1wLmxpYix1PWQuQmFzZSxyPWQuV29yZEFycmF5LHA9cC54NjQ9e307cC5Xb3JkPXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7dGhpcy5oaWdoPWY7dGhpcy5sb3c9czt9fSk7cC5Xb3JkQXJyYXk9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXtmPXRoaXMud29yZHM9Znx8W107dGhpcy5zaWdCeXRlcz1zIT12P3M6OCpmLmxlbmd0aDt9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyk7fXJldHVybiByLmNyZWF0ZShkLHRoaXMuc2lnQnl0ZXMpO30sY2xvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIGY9dS5jbG9uZS5jYWxsKHRoaXMpLGQ9Zi53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApLHA9ZC5sZW5ndGgscj0wO3I8cDtyKyspZFtyXT1kW3JdLmNsb25lKCk7cmV0dXJuIGY7fX0pO30pKCk7KGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13O31mb3IoZT0wOzU+ZTtlKyspZm9yKHE9MDs1PnE7cSsrKXhbZSs1KnFdPXErNSooKDIqZSszKnEpJTUpO2U9MTtmb3IocT0wOzI0PnE7cSsrKXtmb3IodmFyIGE9dz10PTA7Nz5hO2ErKyl7aWYoZSYxKXt2YXIgYj0oMTw8YSktMTszMj5iP3dePTE8PGI6dF49MTw8Yi0zMjt9ZT1lJjEyOD9lPDwxXjExMzplPDwxO315W3FdPWYuY3JlYXRlKHQsdyk7fWZvcih2YXIgYz1bXSxlPTA7MjU+ZTtlKyspY1tlXT1mLmNyZWF0ZSgpO2Q9ZC5TSEEzPXIuZXh0ZW5kKHtjZmc6ci5jZmcuZXh0ZW5kKHtvdXRwdXRMZW5ndGg6NTEyfSksX2RvUmVzZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5fc3RhdGU9W10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdCgpO3RoaXMuYmxvY2tTaXplPSgxNjAwLTIqdGhpcy5jZmcub3V0cHV0TGVuZ3RoKS8zMjt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bDt9Zm9yKGY9MDsyND5mO2YrKyl7Zm9yKGg9MDs1Pmg7aCsrKXtmb3IodmFyIGQ9bD0wLGs9MDs1Pms7aysrKWc9ZVtoKzUqa10sbF49Zy5oaWdoLGRePWcubG93O2c9Y1toXTtnLmhpZ2g9bDtnLmxvdz1kO31mb3IoaD0wOzU+aDtoKyspe2c9Y1soaCs0KSU1XTtsPWNbKGgrMSklNV07bT1sLmhpZ2g7az1sLmxvdztsPWcuaGlnaF4obTw8MXxrPj4+MzEpO2Q9Zy5sb3deKGs8PDF8bT4+PjMxKTtmb3Ioaz0wOzU+aztrKyspZz1lW2grNSprXSxnLmhpZ2hePWwsZy5sb3dePWQ7fWZvcihtPTE7MjU+bTttKyspZz1lW21dLGg9Zy5oaWdoLGc9Zy5sb3csaz1zW21dLDMyPms/KGw9aDw8a3xnPj4+MzItayxkPWc8PGt8aD4+PjMyLWspOihsPWc8PGstMzJ8aD4+PjY0LWssZD1oPDxrLTMyfGc+Pj42NC1rKSxnPWNbeFttXV0sZy5oaWdoPWwsZy5sb3c9ZDtnPWNbMF07aD1lWzBdO2cuaGlnaD1oLmhpZ2g7Zy5sb3c9aC5sb3c7Zm9yKGg9MDs1Pmg7aCsrKWZvcihrPTA7NT5rO2srKyltPWgrNSprLGc9ZVttXSxsPWNbbV0sbT1jWyhoKzEpJTUrNSprXSxkPWNbKGgrMiklNSs1KmtdLGcuaGlnaD1sLmhpZ2hefm0uaGlnaCZkLmhpZ2gsZy5sb3c9bC5sb3defm0ubG93JmQubG93O2c9ZVswXTtoPXlbZl07Zy5oaWdoXj1oLmhpZ2g7Zy5sb3dePWgubG93O319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxiPWEud29yZHMsYz04KmEuc2lnQnl0ZXMsZT0zMip0aGlzLmJsb2NrU2l6ZTtiW2M+Pj41XXw9MTw8MjQtYyUzMjtiWyh2LmNlaWwoKGMrMSkvZSkqZT4+PjUpLTFdfD0xMjg7YS5zaWdCeXRlcz00KmIubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtmb3IodmFyIGE9dGhpcy5fc3RhdGUsYj10aGlzLmNmZy5vdXRwdXRMZW5ndGgvOCxjPWIvOCxlPVtdLGg9MDtoPGM7aCsrKXt2YXIgZD1hW2hdLGY9ZC5oaWdoLGQ9ZC5sb3csZj0oZjw8OHxmPj4+MjQpJjE2NzExOTM1fChmPDwyNHxmPj4+OCkmNDI3ODI1NTM2MCxkPShkPDw4fGQ+Pj4yNCkmMTY3MTE5MzV8KGQ8PDI0fGQ+Pj44KSY0Mjc4MjU1MzYwO2UucHVzaChkKTtlLnB1c2goZik7fXJldHVybiBuZXcgdS5pbml0KGUsYik7fSxjbG9uZTpmdW5jdGlvbigpe2Zvcih2YXIgYT1yLmNsb25lLmNhbGwodGhpcyksYj1hLl9zdGF0ZT10aGlzLl9zdGF0ZS5zbGljZSgwKSxjPTA7MjU+YztjKyspYltjXT1iW2NdLmNsb25lKCk7cmV0dXJuIGE7fX0pO3AuU0hBMz1yLl9jcmVhdGVIZWxwZXIoZCk7cC5IbWFjU0hBMz1yLl9jcmVhdGVIbWFjSGVscGVyKGQpO30pKE1hdGgpOw==',
'/libs/crypto_js/rollups/sha224.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihnLGwpe3ZhciBmPXt9LGs9Zi5saWI9e30saD1mdW5jdGlvbigpe30sbT1rLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtoLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBoKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scT1rLldvcmRBcnJheT1tLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPWw/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHMpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGQ9MDtkPGE7ZCs9NCljLnB1c2goNDI5NDk2NzI5NipnLnJhbmRvbSgpfDApO3JldHVybiBuZXcgcS5pbml0KGMsYSk7fX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGQuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsZD1bXSxiPTA7YjxjO2IrPTIpZFtiPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGIsMiksMTYpPDwyNC00KihiJTgpO3JldHVybiBuZXcgcS5pbml0KGQsYy8yKTt9fSxuPXQuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBkPVtdLGI9MDtiPGE7YisrKWQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbYj4+PjJdPj4+MjQtOCooYiU0KSYyNTUpKTtyZXR1cm4gZC5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKTt9fSxqPXQuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShuLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gbi5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx3PWsuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1tLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBxLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ai5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yjt9cmV0dXJuIG5ldyBxLmluaXQodSxiKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2suSGFzaGVyPXcuZXh0ZW5kKHtjZmc6bS5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuIG5ldyBhLmluaXQoZCkuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihjLGQpe3JldHVybiBuZXcgdi5ITUFDLmluaXQoYSxkKS5maW5hbGl6ZShjKTt9O319KTt2YXIgdj1mLmFsZ289e307cmV0dXJuIGY7fShNYXRoKTsoZnVuY3Rpb24oZyl7Zm9yKHZhciBsPUNyeXB0b0pTLGY9bC5saWIsaz1mLldvcmRBcnJheSxoPWYuSGFzaGVyLGY9bC5hbGdvLG09W10scT1bXSx0PWZ1bmN0aW9uKGEpe3JldHVybiA0Mjk0OTY3Mjk2KihhLShhfDApKXwwO30scz0yLG49MDs2ND5uOyl7dmFyIGo7YTp7aj1zO2Zvcih2YXIgdz1nLnNxcnQoaiksdj0yO3Y8PXc7disrKWlmKCEoaiV2KSl7aj0hMTticmVhayBhO31qPSEwO31qJiYoOD5uJiYobVtuXT10KGcucG93KHMsMC41KSkpLHFbbl09dChnLnBvdyhzLDEvMykpLG4rKyk7cysrO312YXIgYT1bXSxmPWYuU0hBMjU2PWguZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGsuaW5pdChtLnNsaWNlKDApKTt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09Y1tkK3BdfDA7ZWxzZXt2YXIgaj1hW3AtMTVdLHI9YVtwLTJdO2FbcF09KChqPDwyNXxqPj4+NyleKGo8PDE0fGo+Pj4xOCleaj4+PjMpK2FbcC03XSsoKHI8PDE1fHI+Pj4xNyleKHI8PDEzfHI+Pj4xOSlecj4+PjEwKSthW3AtMTZdO31qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDA7fWJbMF09YlswXStlfDA7YlsxXT1iWzFdK2Z8MDtiWzJdPWJbMl0rZ3wwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2h8MDtiWzVdPWJbNV0rbHwwO2JbNl09Yls2XSttfDA7Yls3XT1iWzddK258MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxkPWEud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsZT04KmEuc2lnQnl0ZXM7ZFtlPj4+NV18PTEyODw8MjQtZSUzMjtkWyhlKzY0Pj4+OTw8NCkrMTRdPWcuZmxvb3IoYi80Mjk0OTY3Mjk2KTtkWyhlKzY0Pj4+OTw8NCkrMTVdPWI7YS5zaWdCeXRlcz00KmQubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9aC5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhO319KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZik7fSkoTWF0aCk7KGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pO30sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj1rLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7Zi5zaWdCeXRlcy09NDtyZXR1cm4gZjt9fSk7Zy5TSEEyMjQ9ay5fY3JlYXRlSGVscGVyKGYpO2cuSG1hY1NIQTIyND1rLl9jcmVhdGVIbWFjSGVscGVyKGYpO30pKCk7',
'/libs/crypto_js/rollups/sha512.js':'',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/md5.js':'',
'/Lib/calendar.py':'',
'/Lib/markdown.py':'',
'/Lib/sre_parse.py':'IwojIFNlY3JldCBMYWJzJyBSZWd1bGFyIEV4cHJlc3Npb24gRW5naW5lCiMKIyBjb252ZXJ0IHJlLXN0eWxlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBzcmUgcGF0dGVybgojCiMgQ29weXJpZ2h0IChjKSAxOTk4LTIwMDEgYnkgU2VjcmV0IExhYnMgQUIuICBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgU2VlIHRoZSBzcmUucHkgZmlsZSBmb3IgaW5mb3JtYXRpb24gb24gdXNhZ2UgYW5kIHJlZGlzdHJpYnV0aW9uLgojCgoiIiJJbnRlcm5hbCBzdXBwb3J0IG1vZHVsZSBmb3Igc3JlIiIiCgojIFhYWDogc2hvdyBzdHJpbmcgb2Zmc2V0IGFuZCBvZmZlbmRpbmcgY2hhcmFjdGVyIGZvciBhbGwgZXJyb3JzCgppbXBvcnQgc3lzCmZyb20gc3JlX2NvbnN0YW50cyBpbXBvcnQgKgoKCgpTUEVDSUFMX0NIQVJTID0gIi5cXFt7KCkqKz9eJHwiClJFUEVBVF9DSEFSUyA9ICIqKz97IgoKRElHSVRTID0gc2V0KCIwMTIzNDU2Nzg5IikKCk9DVERJR0lUUyA9IHNldCgiMDEyMzQ1NjciKQpIRVhESUdJVFMgPSBzZXQoIjAxMjM0NTY3ODlhYmNkZWZBQkNERUYiKQoKV0hJVEVTUEFDRSA9IHNldCgiIFx0XG5cclx2XGYiKQoKRVNDQVBFUyA9IHsKICAgIHIiXGEiOiAoTElURVJBTCwgb3JkKCJcYSIpKSwKICAgIHIiXGIiOiAoTElURVJBTCwgb3JkKCJcYiIpKSwKICAgIHIiXGYiOiAoTElURVJBTCwgb3JkKCJcZiIpKSwKICAgIHIiXG4iOiAoTElURVJBTCwgb3JkKCJcbiIpKSwKICAgIHIiXHIiOiAoTElURVJBTCwgb3JkKCJcciIpKSwKICAgIHIiXHQiOiAoTElURVJBTCwgb3JkKCJcdCIpKSwKICAgIHIiXHYiOiAoTElURVJBTCwgb3JkKCJcdiIpKSwKICAgIHIiXFwiOiAoTElURVJBTCwgb3JkKCJcXCIpKQp9CgpDQVRFR09SSUVTID0gewogICAgciJcQSI6IChBVCwgQVRfQkVHSU5OSU5HX1NUUklORyksICMgc3RhcnQgb2Ygc3RyaW5nCiAgICByIlxiIjogKEFULCBBVF9CT1VOREFSWSksCiAgICByIlxCIjogKEFULCBBVF9OT05fQk9VTkRBUlkpLAogICAgciJcZCI6IChJTiwgWyhDQVRFR09SWSwgQ0FURUdPUllfRElHSVQpXSksCiAgICByIlxEIjogKElOLCBbKENBVEVHT1JZLCBDQVRFR09SWV9OT1RfRElHSVQpXSksCiAgICByIlxzIjogKElOLCBbKENBVEVHT1JZLCBDQVRFR09SWV9TUEFDRSldKSwKICAgIHIiXFMiOiAoSU4sIFsoQ0FURUdPUlksIENBVEVHT1JZX05PVF9TUEFDRSldKSwKICAgIHIiXHciOiAoSU4sIFsoQ0FURUdPUlksIENBVEVHT1JZX1dPUkQpXSksCiAgICByIlxXIjogKElOLCBbKENBVEVHT1JZLCBDQVRFR09SWV9OT1RfV09SRCldKSwKICAgICNmaXhtZSBicnl0aG9uCiAgICAjciJcWiI6IChBVCwgQVRfRU5EX1NUUklORyksICMgZW5kIG9mIHN0cmluZwogICAgciJcWiI6IChBVCwgQVRfRU5EX1NUUklORykgIyBlbmQgb2Ygc3RyaW5nCn0KCkZMQUdTID0gewogICAgIyBzdGFuZGFyZCBmbGFncwogICAgImkiOiBTUkVfRkxBR19JR05PUkVDQVNFLAogICAgIkwiOiBTUkVfRkxBR19MT0NBTEUsCiAgICAibSI6IFNSRV9GTEFHX01VTFRJTElORSwKICAgICJzIjogU1JFX0ZMQUdfRE9UQUxMLAogICAgIngiOiBTUkVfRkxBR19WRVJCT1NFLAogICAgIyBleHRlbnNpb25zCiAgICAiYSI6IFNSRV9GTEFHX0FTQ0lJLAogICAgInQiOiBTUkVfRkxBR19URU1QTEFURSwKICAgICNmaXhtZSBicnl0aG9uCiAgICAjInUiOiBTUkVfRkxBR19VTklDT0RFLAogICAgInUiOiBTUkVfRkxBR19VTklDT0RFCn0KCmNsYXNzIFBhdHRlcm46CiAgICAjIG1hc3RlciBwYXR0ZXJuIG9iamVjdC4gIGtlZXBzIHRyYWNrIG9mIGdsb2JhbCBhdHRyaWJ1dGVzCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5mbGFncyA9IDAKICAgICAgICBzZWxmLm9wZW4gPSBbXQogICAgICAgIHNlbGYuZ3JvdXBzID0gMQogICAgICAgIHNlbGYuZ3JvdXBkaWN0ID0ge30KICAgIGRlZiBvcGVuZ3JvdXAoc2VsZiwgbmFtZT1Ob25lKToKICAgICAgICBnaWQgPSBzZWxmLmdyb3VwcwogICAgICAgIHNlbGYuZ3JvdXBzID0gZ2lkICsgMQogICAgICAgIGlmIG5hbWUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIG9naWQgPSBzZWxmLmdyb3VwZGljdC5nZXQobmFtZSwgTm9uZSkKICAgICAgICAgICAgaWYgb2dpZCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJyZWRlZmluaXRpb24gb2YgZ3JvdXAgbmFtZSAlcyBhcyBncm91cCAlZDsgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIndhcyBncm91cCAlZCIgJSAocmVwcihuYW1lKSwgZ2lkLCAgb2dpZCkpCiAgICAgICAgICAgIHNlbGYuZ3JvdXBkaWN0W25hbWVdID0gZ2lkCiAgICAgICAgc2VsZi5vcGVuLmFwcGVuZChnaWQpCiAgICAgICAgcmV0dXJuIGdpZAogICAgZGVmIGNsb3NlZ3JvdXAoc2VsZiwgZ2lkKToKICAgICAgICBzZWxmLm9wZW4ucmVtb3ZlKGdpZCkKICAgIGRlZiBjaGVja2dyb3VwKHNlbGYsIGdpZCk6CiAgICAgICAgcmV0dXJuIGdpZCA8IHNlbGYuZ3JvdXBzIGFuZCBnaWQgbm90IGluIHNlbGYub3BlbgoKY2xhc3MgU3ViUGF0dGVybjoKICAgICMgYSBzdWJwYXR0ZXJuLCBpbiBpbnRlcm1lZGlhdGUgZm9ybQogICAgZGVmIF9faW5pdF9fKHNlbGYsIHBhdHRlcm4sIGRhdGE9Tm9uZSk6CiAgICAgICAgc2VsZi5wYXR0ZXJuID0gcGF0dGVybgogICAgICAgIGlmIGRhdGEgaXMgTm9uZToKICAgICAgICAgICAgZGF0YSA9IFtdCiAgICAgICAgc2VsZi5kYXRhID0gZGF0YQogICAgICAgIHNlbGYud2lkdGggPSBOb25lCiAgICBkZWYgZHVtcChzZWxmLCBsZXZlbD0wKToKICAgICAgICBubCA9IDEKICAgICAgICBzZXF0eXBlcyA9ICh0dXBsZSwgbGlzdCkKICAgICAgICBmb3Igb3AsIGF2IGluIHNlbGYuZGF0YToKICAgICAgICAgICAgcHJpbnQobGV2ZWwqIiAgIiArIG9wLCBlbmQ9JyAnKTsgbmwgPSAwCiAgICAgICAgICAgIGlmIG9wID09ICJpbiI6CiAgICAgICAgICAgICAgICAjIG1lbWJlciBzdWJsYW5ndWFnZQogICAgICAgICAgICAgICAgcHJpbnQoKTsgbmwgPSAxCiAgICAgICAgICAgICAgICBmb3Igb3AsIGEgaW4gYXY6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoKGxldmVsKzEpKiIgICIgKyBvcCwgYSkKICAgICAgICAgICAgZWxpZiBvcCA9PSAiYnJhbmNoIjoKICAgICAgICAgICAgICAgIHByaW50KCk7IG5sID0gMQogICAgICAgICAgICAgICAgaSA9IDAKICAgICAgICAgICAgICAgIGZvciBhIGluIGF2WzFdOgogICAgICAgICAgICAgICAgICAgIGlmIGkgPiAwOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludChsZXZlbCoiICAiICsgIm9yIikKICAgICAgICAgICAgICAgICAgICBhLmR1bXAobGV2ZWwrMSk7IG5sID0gMQogICAgICAgICAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgICAgICBlbGlmIGlzaW5zdGFuY2UoYXYsIHNlcXR5cGVzKToKICAgICAgICAgICAgICAgIGZvciBhIGluIGF2OgogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoYSwgU3ViUGF0dGVybik6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBubDogcHJpbnQoKQogICAgICAgICAgICAgICAgICAgICAgICBhLmR1bXAobGV2ZWwrMSk7IG5sID0gMQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGEsIGVuZD0nICcpIDsgbmwgPSAwCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwcmludChhdiwgZW5kPScgJykgOyBubCA9IDAKICAgICAgICAgICAgaWYgbm90IG5sOiBwcmludCgpCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHJlcHIoc2VsZi5kYXRhKQogICAgZGVmIF9fbGVuX18oc2VsZik6CiAgICAgICAgcmV0dXJuIGxlbihzZWxmLmRhdGEpCiAgICBkZWYgX19kZWxpdGVtX18oc2VsZiwgaW5kZXgpOgogICAgICAgIGRlbCBzZWxmLmRhdGFbaW5kZXhdCiAgICBkZWYgX19nZXRpdGVtX18oc2VsZiwgaW5kZXgpOgogICAgICAgIGlmIGlzaW5zdGFuY2UoaW5kZXgsIHNsaWNlKToKICAgICAgICAgICAgcmV0dXJuIFN1YlBhdHRlcm4oc2VsZi5wYXR0ZXJuLCBzZWxmLmRhdGFbaW5kZXhdKQogICAgICAgIHJldHVybiBzZWxmLmRhdGFbaW5kZXhdCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwgaW5kZXgsIGNvZGUpOgogICAgICAgIHNlbGYuZGF0YVtpbmRleF0gPSBjb2RlCiAgICBkZWYgaW5zZXJ0KHNlbGYsIGluZGV4LCBjb2RlKToKICAgICAgICBzZWxmLmRhdGEuaW5zZXJ0KGluZGV4LCBjb2RlKQogICAgZGVmIGFwcGVuZChzZWxmLCBjb2RlKToKICAgICAgICBzZWxmLmRhdGEuYXBwZW5kKGNvZGUpCiAgICBkZWYgZ2V0d2lkdGgoc2VsZik6CiAgICAgICAgIyBkZXRlcm1pbmUgdGhlIHdpZHRoIChtaW4sIG1heCkgZm9yIHRoaXMgc3VicGF0dGVybgogICAgICAgIGlmIHNlbGYud2lkdGg6CiAgICAgICAgICAgIHJldHVybiBzZWxmLndpZHRoCiAgICAgICAgbG8gPSBoaSA9IDAKICAgICAgICBVTklUQ09ERVMgPSAoQU5ZLCBSQU5HRSwgSU4sIExJVEVSQUwsIE5PVF9MSVRFUkFMLCBDQVRFR09SWSkKICAgICAgICBSRVBFQVRDT0RFUyA9IChNSU5fUkVQRUFULCBNQVhfUkVQRUFUKQogICAgICAgIGZvciBvcCwgYXYgaW4gc2VsZi5kYXRhOgogICAgICAgICAgICBpZiBvcCBpcyBCUkFOQ0g6CiAgICAgICAgICAgICAgICBpID0gc3lzLm1heHNpemUKICAgICAgICAgICAgICAgIGogPSAwCiAgICAgICAgICAgICAgICBmb3IgYXYgaW4gYXZbMV06CiAgICAgICAgICAgICAgICAgICAgbCwgaCA9IGF2LmdldHdpZHRoKCkKICAgICAgICAgICAgICAgICAgICBpID0gbWluKGksIGwpCiAgICAgICAgICAgICAgICAgICAgaiA9IG1heChqLCBoKQogICAgICAgICAgICAgICAgbG8gPSBsbyArIGkKICAgICAgICAgICAgICAgIGhpID0gaGkgKyBqCiAgICAgICAgICAgIGVsaWYgb3AgaXMgQ0FMTDoKICAgICAgICAgICAgICAgIGksIGogPSBhdi5nZXR3aWR0aCgpCiAgICAgICAgICAgICAgICBsbyA9IGxvICsgaQogICAgICAgICAgICAgICAgaGkgPSBoaSArIGoKICAgICAgICAgICAgZWxpZiBvcCBpcyBTVUJQQVRURVJOOgogICAgICAgICAgICAgICAgaSwgaiA9IGF2WzFdLmdldHdpZHRoKCkKICAgICAgICAgICAgICAgIGxvID0gbG8gKyBpCiAgICAgICAgICAgICAgICBoaSA9IGhpICsgagogICAgICAgICAgICBlbGlmIG9wIGluIFJFUEVBVENPREVTOgogICAgICAgICAgICAgICAgaSwgaiA9IGF2WzJdLmdldHdpZHRoKCkKICAgICAgICAgICAgICAgIGxvID0gbG8gKyBpbnQoaSkgKiBhdlswXQogICAgICAgICAgICAgICAgaGkgPSBoaSArIGludChqKSAqIGF2WzFdCiAgICAgICAgICAgIGVsaWYgb3AgaW4gVU5JVENPREVTOgogICAgICAgICAgICAgICAgbG8gPSBsbyArIDEKICAgICAgICAgICAgICAgIGhpID0gaGkgKyAxCiAgICAgICAgICAgIGVsaWYgb3AgPT0gU1VDQ0VTUzoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgc2VsZi53aWR0aCA9IGludChtaW4obG8sIHN5cy5tYXhzaXplKSksIGludChtaW4oaGksIHN5cy5tYXhzaXplKSkKICAgICAgICByZXR1cm4gc2VsZi53aWR0aAoKY2xhc3MgVG9rZW5pemVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHN0cmluZyk6CiAgICAgICAgc2VsZi5zdHJpbmcgPSBzdHJpbmcKICAgICAgICBzZWxmLmluZGV4ID0gMAogICAgICAgIHNlbGYuX19uZXh0KCkKICAgIGRlZiBfX25leHQoc2VsZik6CiAgICAgICAgaWYgc2VsZi5pbmRleCA+PSBsZW4oc2VsZi5zdHJpbmcpOgogICAgICAgICAgICBzZWxmLm5leHQgPSBOb25lCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGNoYXIgPSBzZWxmLnN0cmluZ1tzZWxmLmluZGV4OnNlbGYuaW5kZXgrMV0KICAgICAgICAjIFNwZWNpYWwgY2FzZSBmb3IgdGhlIHN0cjgsIHNpbmNlIGluZGV4aW5nIHJldHVybnMgYSBpbnRlZ2VyCiAgICAgICAgIyBYWFggVGhpcyBpcyBvbmx5IG5lZWRlZCBmb3IgdGVzdF9idWdfOTI2MDc1IGluIHRlc3RfcmUucHkKICAgICAgICBpZiBjaGFyIGFuZCBpc2luc3RhbmNlKGNoYXIsIGJ5dGVzKToKICAgICAgICAgICAgY2hhciA9IGNocihjaGFyWzBdKQogICAgICAgIGlmIGNoYXIgPT0gIlxcIjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgYyA9IHNlbGYuc3RyaW5nW3NlbGYuaW5kZXggKyAxXQogICAgICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJib2d1cyBlc2NhcGUgKGVuZCBvZiBsaW5lKSIpCiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc2VsZi5zdHJpbmcsIGJ5dGVzKToKICAgICAgICAgICAgICAgIGMgPSBjaHIoYykKICAgICAgICAgICAgY2hhciA9IGNoYXIgKyBjCiAgICAgICAgc2VsZi5pbmRleCA9IHNlbGYuaW5kZXggKyBsZW4oY2hhcikKICAgICAgICBzZWxmLm5leHQgPSBjaGFyCiAgICBkZWYgbWF0Y2goc2VsZiwgY2hhciwgc2tpcD0xKToKICAgICAgICBpZiBjaGFyID09IHNlbGYubmV4dDoKICAgICAgICAgICAgaWYgc2tpcDoKICAgICAgICAgICAgICAgIHNlbGYuX19uZXh0KCkKICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICByZXR1cm4gMAogICAgZGVmIGdldChzZWxmKToKICAgICAgICB0aGlzID0gc2VsZi5uZXh0CiAgICAgICAgc2VsZi5fX25leHQoKQogICAgICAgIHJldHVybiB0aGlzCiAgICBkZWYgdGVsbChzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5pbmRleCwgc2VsZi5uZXh0CiAgICBkZWYgc2VlayhzZWxmLCBpbmRleCk6CiAgICAgICAgc2VsZi5pbmRleCwgc2VsZi5uZXh0ID0gaW5kZXgKCiAgICAjZml4bWUgYnJ5dGhvbgogICAgI2RlZiBfX2luX18oc2VsZiwgb3RoZXIpOgogICAgIyAgICByZXR1cm4gc2VsZi5zdHJpbmcuX19jb250YWluc19fKG90aGVyKQoKICAgICNmaXhtZSBicnl0aG9uCiAgICAjZGVmIF9fY29udGFpbnNfXyhzZWxmLCBvdGhlcik6CiAgICAjICAgIHJldHVybiBzZWxmLnN0cmluZy5fX2NvbnRhaW5zX18ob3RoZXIpCgpkZWYgaXNpZGVudChjaGFyKToKICAgIHJldHVybiAiYSIgPD0gY2hhciA8PSAieiIgb3IgIkEiIDw9IGNoYXIgPD0gIloiIG9yIGNoYXIgPT0gIl8iCgpkZWYgaXNkaWdpdChjaGFyKToKICAgIHJldHVybiAiMCIgPD0gY2hhciA8PSAiOSIKCmRlZiBpc25hbWUobmFtZSk6CiAgICAjIGNoZWNrIHRoYXQgZ3JvdXAgbmFtZSBpcyBhIHZhbGlkIHN0cmluZwogICAgaWYgbm90IGlzaWRlbnQobmFtZVswXSk6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICBmb3IgY2hhciBpbiBuYW1lWzE6XToKICAgICAgICBpZiBub3QgaXNpZGVudChjaGFyKSBhbmQgbm90IGlzZGlnaXQoY2hhcik6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgcmV0dXJuIFRydWUKCmRlZiBfY2xhc3NfZXNjYXBlKHNvdXJjZSwgZXNjYXBlKToKICAgICMgaGFuZGxlIGVzY2FwZSBjb2RlIGluc2lkZSBjaGFyYWN0ZXIgY2xhc3MKICAgIGNvZGUgPSBFU0NBUEVTLmdldChlc2NhcGUpCiAgICBpZiBjb2RlOgogICAgICAgIHJldHVybiBjb2RlCiAgICBjb2RlID0gQ0FURUdPUklFUy5nZXQoZXNjYXBlKQogICAgaWYgY29kZToKICAgICAgICByZXR1cm4gY29kZQogICAgdHJ5OgogICAgICAgIGMgPSBlc2NhcGVbMToyXQogICAgICAgIGlmIGMgPT0gIngiOgogICAgICAgICAgICAjIGhleGFkZWNpbWFsIGVzY2FwZSAoZXhhY3RseSB0d28gZGlnaXRzKQogICAgICAgICAgICB3aGlsZSBzb3VyY2UubmV4dCBpbiBIRVhESUdJVFMgYW5kIGxlbihlc2NhcGUpIDwgNDoKICAgICAgICAgICAgICAgIGVzY2FwZSA9IGVzY2FwZSArIHNvdXJjZS5nZXQoKQogICAgICAgICAgICBlc2NhcGUgPSBlc2NhcGVbMjpdCiAgICAgICAgICAgIGlmIGxlbihlc2NhcGUpICE9IDI6CiAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigiYm9ndXMgZXNjYXBlOiAlcyIgJSByZXByKCJcXCIgKyBlc2NhcGUpKQogICAgICAgICAgICByZXR1cm4gTElURVJBTCwgaW50KGVzY2FwZSwgMTYpICYgMHhmZgogICAgICAgIGVsaWYgYyBpbiBPQ1RESUdJVFM6CiAgICAgICAgICAgICMgb2N0YWwgZXNjYXBlICh1cCB0byB0aHJlZSBkaWdpdHMpCiAgICAgICAgICAgIHdoaWxlIHNvdXJjZS5uZXh0IGluIE9DVERJR0lUUyBhbmQgbGVuKGVzY2FwZSkgPCA0OgogICAgICAgICAgICAgICAgZXNjYXBlID0gZXNjYXBlICsgc291cmNlLmdldCgpCiAgICAgICAgICAgIGVzY2FwZSA9IGVzY2FwZVsxOl0KICAgICAgICAgICAgcmV0dXJuIExJVEVSQUwsIGludChlc2NhcGUsIDgpICYgMHhmZgogICAgICAgIGVsaWYgYyBpbiBESUdJVFM6CiAgICAgICAgICAgIHJhaXNlIGVycm9yKCJib2d1cyBlc2NhcGU6ICVzIiAlIHJlcHIoZXNjYXBlKSkKICAgICAgICBpZiBsZW4oZXNjYXBlKSA9PSAyOgogICAgICAgICAgICByZXR1cm4gTElURVJBTCwgb3JkKGVzY2FwZVsxXSkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIHBhc3MKICAgIHJhaXNlIGVycm9yKCJib2d1cyBlc2NhcGU6ICVzIiAlIHJlcHIoZXNjYXBlKSkKCmRlZiBfZXNjYXBlKHNvdXJjZSwgZXNjYXBlLCBzdGF0ZSk6CiAgICAjIGhhbmRsZSBlc2NhcGUgY29kZSBpbiBleHByZXNzaW9uCiAgICBjb2RlID0gQ0FURUdPUklFUy5nZXQoZXNjYXBlKQogICAgaWYgY29kZToKICAgICAgICByZXR1cm4gY29kZQogICAgY29kZSA9IEVTQ0FQRVMuZ2V0KGVzY2FwZSkKICAgIGlmIGNvZGU6CiAgICAgICAgcmV0dXJuIGNvZGUKICAgIHRyeToKICAgICAgICBjID0gZXNjYXBlWzE6Ml0KICAgICAgICBpZiBjID09ICJ4IjoKICAgICAgICAgICAgIyBoZXhhZGVjaW1hbCBlc2NhcGUKICAgICAgICAgICAgd2hpbGUgc291cmNlLm5leHQgaW4gSEVYRElHSVRTIGFuZCBsZW4oZXNjYXBlKSA8IDQ6CiAgICAgICAgICAgICAgICBlc2NhcGUgPSBlc2NhcGUgKyBzb3VyY2UuZ2V0KCkKICAgICAgICAgICAgaWYgbGVuKGVzY2FwZSkgIT0gNDoKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IKICAgICAgICAgICAgcmV0dXJuIExJVEVSQUwsIGludChlc2NhcGVbMjpdLCAxNikgJiAweGZmCiAgICAgICAgZWxpZiBjID09ICIwIjoKICAgICAgICAgICAgIyBvY3RhbCBlc2NhcGUKICAgICAgICAgICAgd2hpbGUgc291cmNlLm5leHQgaW4gT0NURElHSVRTIGFuZCBsZW4oZXNjYXBlKSA8IDQ6CiAgICAgICAgICAgICAgICBlc2NhcGUgPSBlc2NhcGUgKyBzb3VyY2UuZ2V0KCkKICAgICAgICAgICAgcmV0dXJuIExJVEVSQUwsIGludChlc2NhcGVbMTpdLCA4KSAmIDB4ZmYKICAgICAgICBlbGlmIGMgaW4gRElHSVRTOgogICAgICAgICAgICAjIG9jdGFsIGVzY2FwZSAqb3IqIGRlY2ltYWwgZ3JvdXAgcmVmZXJlbmNlIChzaWdoKQogICAgICAgICAgICBpZiBzb3VyY2UubmV4dCBpbiBESUdJVFM6CiAgICAgICAgICAgICAgICBlc2NhcGUgPSBlc2NhcGUgKyBzb3VyY2UuZ2V0KCkKICAgICAgICAgICAgICAgIGlmIChlc2NhcGVbMV0gaW4gT0NURElHSVRTIGFuZCBlc2NhcGVbMl0gaW4gT0NURElHSVRTIGFuZAogICAgICAgICAgICAgICAgICAgIHNvdXJjZS5uZXh0IGluIE9DVERJR0lUUyk6CiAgICAgICAgICAgICAgICAgICAgIyBnb3QgdGhyZWUgb2N0YWwgZGlnaXRzOyB0aGlzIGlzIGFuIG9jdGFsIGVzY2FwZQogICAgICAgICAgICAgICAgICAgIGVzY2FwZSA9IGVzY2FwZSArIHNvdXJjZS5nZXQoKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBMSVRFUkFMLCBpbnQoZXNjYXBlWzE6XSwgOCkgJiAweGZmCiAgICAgICAgICAgICMgbm90IGFuIG9jdGFsIGVzY2FwZSwgc28gdGhpcyBpcyBhIGdyb3VwIHJlZmVyZW5jZQogICAgICAgICAgICBncm91cCA9IGludChlc2NhcGVbMTpdKQogICAgICAgICAgICBpZiBncm91cCA8IHN0YXRlLmdyb3VwczoKICAgICAgICAgICAgICAgIGlmIG5vdCBzdGF0ZS5jaGVja2dyb3VwKGdyb3VwKToKICAgICAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigiY2Fubm90IHJlZmVyIHRvIG9wZW4gZ3JvdXAiKQogICAgICAgICAgICAgICAgcmV0dXJuIEdST1VQUkVGLCBncm91cAogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yCiAgICAgICAgaWYgbGVuKGVzY2FwZSkgPT0gMjoKICAgICAgICAgICAgcmV0dXJuIExJVEVSQUwsIG9yZChlc2NhcGVbMV0pCiAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICBwYXNzCiAgICByYWlzZSBlcnJvcigiYm9ndXMgZXNjYXBlOiAlcyIgJSByZXByKGVzY2FwZSkpCgpkZWYgX3BhcnNlX3N1Yihzb3VyY2UsIHN0YXRlLCBuZXN0ZWQ9MSk6CiAgICAjIHBhcnNlIGFuIGFsdGVybmF0aW9uOiBhfGJ8YwoKICAgIGl0ZW1zID0gW10KICAgIGl0ZW1zYXBwZW5kID0gaXRlbXMuYXBwZW5kCiAgICBzb3VyY2VtYXRjaCA9IHNvdXJjZS5tYXRjaAogICAgd2hpbGUgMToKICAgICAgICBpdGVtc2FwcGVuZChfcGFyc2Uoc291cmNlLCBzdGF0ZSkpCiAgICAgICAgaWYgc291cmNlbWF0Y2goInwiKToKICAgICAgICAgICAgY29udGludWUKICAgICAgICBpZiBub3QgbmVzdGVkOgogICAgICAgICAgICBicmVhawogICAgICAgIGlmIG5vdCBzb3VyY2UubmV4dCBvciBzb3VyY2VtYXRjaCgiKSIsIDApOgogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIGVycm9yKCJwYXR0ZXJuIG5vdCBwcm9wZXJseSBjbG9zZWQiKQoKICAgIGlmIGxlbihpdGVtcykgPT0gMToKICAgICAgICByZXR1cm4gaXRlbXNbMF0KCiAgICBzdWJwYXR0ZXJuID0gU3ViUGF0dGVybihzdGF0ZSkKICAgIHN1YnBhdHRlcm5hcHBlbmQgPSBzdWJwYXR0ZXJuLmFwcGVuZAoKICAgICMgY2hlY2sgaWYgYWxsIGl0ZW1zIHNoYXJlIGEgY29tbW9uIHByZWZpeAogICAgd2hpbGUgMToKICAgICAgICBwcmVmaXggPSBOb25lCiAgICAgICAgI2ZpeG1lIGJyeXRob24KICAgICAgICBfZmxhZz1UcnVlCiAgICAgICAgZm9yIGl0ZW0gaW4gaXRlbXM6CiAgICAgICAgICAgIGlmIG5vdCBpdGVtOgogICAgICAgICAgICAgICAgX2ZsYWc9RmFsc2UKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGlmIHByZWZpeCBpcyBOb25lOgogICAgICAgICAgICAgICAgcHJlZml4ID0gaXRlbVswXQogICAgICAgICAgICBlbGlmIGl0ZW1bMF0gIT0gcHJlZml4OgogICAgICAgICAgICAgICAgX2ZsYWc9RmFsc2UKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgI2ZpeG1lIGJyeXRob24KICAgICAgICAjZWxzZToKICAgICAgICBpZiBfZmxhZzoKICAgICAgICAgICAgIyBhbGwgc3ViaXRlbXMgc3RhcnQgd2l0aCBhIGNvbW1vbiAicHJlZml4Ii4KICAgICAgICAgICAgIyBtb3ZlIGl0IG91dCBvZiB0aGUgYnJhbmNoCiAgICAgICAgICAgIGZvciBpdGVtIGluIGl0ZW1zOgogICAgICAgICAgICAgICAgZGVsIGl0ZW1bMF0KICAgICAgICAgICAgc3VicGF0dGVybmFwcGVuZChwcmVmaXgpCiAgICAgICAgICAgIGNvbnRpbnVlICMgY2hlY2sgbmV4dCBvbmUKICAgICAgICBicmVhawoKICAgICMgY2hlY2sgaWYgdGhlIGJyYW5jaCBjYW4gYmUgcmVwbGFjZWQgYnkgYSBjaGFyYWN0ZXIgc2V0CiAgICBfZmxhZz1UcnVlCiAgICBmb3IgaXRlbSBpbiBpdGVtczoKICAgICAgICBpZiBsZW4oaXRlbSkgIT0gMSBvciBpdGVtWzBdWzBdICE9IExJVEVSQUw6CiAgICAgICAgICAgIF9mbGFnPUZhbHNlCiAgICAgICAgICAgIGJyZWFrCiAgICAjZml4bWUgYnJ5dGhvbgogICAgI2Vsc2U6CiAgICBpZiBfZmxhZzoKICAgICAgICAjIHdlIGNhbiBzdG9yZSB0aGlzIGFzIGEgY2hhcmFjdGVyIHNldCBpbnN0ZWFkIG9mIGEKICAgICAgICAjIGJyYW5jaCAodGhlIGNvbXBpbGVyIG1heSBvcHRpbWl6ZSB0aGlzIGV2ZW4gbW9yZSkKICAgICAgICBzZXQgPSBbXQogICAgICAgIHNldGFwcGVuZCA9IHNldC5hcHBlbmQKICAgICAgICBmb3IgaXRlbSBpbiBpdGVtczoKICAgICAgICAgICAgc2V0YXBwZW5kKGl0ZW1bMF0pCiAgICAgICAgc3VicGF0dGVybmFwcGVuZCgoSU4sIHNldCkpCiAgICAgICAgcmV0dXJuIHN1YnBhdHRlcm4KCiAgICBzdWJwYXR0ZXJuLmFwcGVuZCgoQlJBTkNILCAoTm9uZSwgaXRlbXMpKSkKICAgIHJldHVybiBzdWJwYXR0ZXJuCgpkZWYgX3BhcnNlX3N1Yl9jb25kKHNvdXJjZSwgc3RhdGUsIGNvbmRncm91cCk6CiAgICBpdGVtX3llcyA9IF9wYXJzZShzb3VyY2UsIHN0YXRlKQogICAgaWYgc291cmNlLm1hdGNoKCJ8Iik6CiAgICAgICAgaXRlbV9ubyA9IF9wYXJzZShzb3VyY2UsIHN0YXRlKQogICAgICAgIGlmIHNvdXJjZS5tYXRjaCgifCIpOgogICAgICAgICAgICByYWlzZSBlcnJvcigiY29uZGl0aW9uYWwgYmFja3JlZiB3aXRoIG1vcmUgdGhhbiB0d28gYnJhbmNoZXMiKQogICAgZWxzZToKICAgICAgICBpdGVtX25vID0gTm9uZQogICAgaWYgc291cmNlLm5leHQgYW5kIG5vdCBzb3VyY2UubWF0Y2goIikiLCAwKToKICAgICAgICByYWlzZSBlcnJvcigicGF0dGVybiBub3QgcHJvcGVybHkgY2xvc2VkIikKICAgIHN1YnBhdHRlcm4gPSBTdWJQYXR0ZXJuKHN0YXRlKQogICAgc3VicGF0dGVybi5hcHBlbmQoKEdST1VQUkVGX0VYSVNUUywgKGNvbmRncm91cCwgaXRlbV95ZXMsIGl0ZW1fbm8pKSkKICAgIHJldHVybiBzdWJwYXR0ZXJuCgpfUEFUVEVSTkVOREVSUyA9IHNldCgifCkiKQpfQVNTRVJUQ0hBUlMgPSBzZXQoIj0hPCIpCl9MT09LQkVISU5EQVNTRVJUQ0hBUlMgPSBzZXQoIj0hIikKX1JFUEVBVENPREVTID0gc2V0KFtNSU5fUkVQRUFULCBNQVhfUkVQRUFUXSkKCmRlZiBfcGFyc2Uoc291cmNlLCBzdGF0ZSk6CiAgICAjIHBhcnNlIGEgc2ltcGxlIHBhdHRlcm4KICAgIHN1YnBhdHRlcm4gPSBTdWJQYXR0ZXJuKHN0YXRlKQoKICAgICMgcHJlY29tcHV0ZSBjb25zdGFudHMgaW50byBsb2NhbCB2YXJpYWJsZXMKICAgIHN1YnBhdHRlcm5hcHBlbmQgPSBzdWJwYXR0ZXJuLmFwcGVuZAogICAgc291cmNlZ2V0ID0gc291cmNlLmdldAogICAgc291cmNlbWF0Y2ggPSBzb3VyY2UubWF0Y2gKICAgIF9sZW4gPSBsZW4KICAgIFBBVFRFUk5FTkRFUlMgPSBfUEFUVEVSTkVOREVSUwogICAgQVNTRVJUQ0hBUlMgPSBfQVNTRVJUQ0hBUlMKICAgIExPT0tCRUhJTkRBU1NFUlRDSEFSUyA9IF9MT09LQkVISU5EQVNTRVJUQ0hBUlMKICAgIFJFUEVBVENPREVTID0gX1JFUEVBVENPREVTCgogICAgd2hpbGUgMToKICAgICAgICBpZiBzb3VyY2UubmV4dCBpbiBQQVRURVJORU5ERVJTOgogICAgICAgICAgICBicmVhayAjIGVuZCBvZiBzdWJwYXR0ZXJuCiAgICAgICAgdGhpcyA9IHNvdXJjZWdldCgpCiAgICAgICAgaWYgdGhpcyBpcyBOb25lOgogICAgICAgICAgICBicmVhayAjIGVuZCBvZiBwYXR0ZXJuCgogICAgICAgIGlmIHN0YXRlLmZsYWdzICYgU1JFX0ZMQUdfVkVSQk9TRToKICAgICAgICAgICAgIyBza2lwIHdoaXRlc3BhY2UgYW5kIGNvbW1lbnRzCiAgICAgICAgICAgIGlmIHRoaXMgaW4gV0hJVEVTUEFDRToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIGlmIHRoaXMgPT0gIiMiOgogICAgICAgICAgICAgICAgd2hpbGUgMToKICAgICAgICAgICAgICAgICAgICB0aGlzID0gc291cmNlZ2V0KCkKICAgICAgICAgICAgICAgICAgICBpZiB0aGlzIGluIChOb25lLCAiXG4iKToKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgIGlmIHRoaXMgYW5kIHRoaXNbMF0gbm90IGluIFNQRUNJQUxfQ0hBUlM6CiAgICAgICAgICAgIHN1YnBhdHRlcm5hcHBlbmQoKExJVEVSQUwsIG9yZCh0aGlzKSkpCgogICAgICAgIGVsaWYgdGhpcyA9PSAiWyI6CiAgICAgICAgICAgICMgY2hhcmFjdGVyIHNldAogICAgICAgICAgICBzZXQgPSBbXQogICAgICAgICAgICBzZXRhcHBlbmQgPSBzZXQuYXBwZW5kCiMjICAgICAgICAgIGlmIHNvdXJjZW1hdGNoKCI6Iik6CiMjICAgICAgICAgICAgICBwYXNzICMgaGFuZGxlIGNoYXJhY3RlciBjbGFzc2VzCiAgICAgICAgICAgIGlmIHNvdXJjZW1hdGNoKCJeIik6CiAgICAgICAgICAgICAgICBzZXRhcHBlbmQoKE5FR0FURSwgTm9uZSkpCiAgICAgICAgICAgICMgY2hlY2sgcmVtYWluaW5nIGNoYXJhY3RlcnMKICAgICAgICAgICAgc3RhcnQgPSBzZXRbOl0KICAgICAgICAgICAgd2hpbGUgMToKICAgICAgICAgICAgICAgIHRoaXMgPSBzb3VyY2VnZXQoKQogICAgICAgICAgICAgICAgaWYgdGhpcyA9PSAiXSIgYW5kIHNldCAhPSBzdGFydDoKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiB0aGlzIGFuZCB0aGlzWzBdID09ICJcXCI6CiAgICAgICAgICAgICAgICAgICAgY29kZTEgPSBfY2xhc3NfZXNjYXBlKHNvdXJjZSwgdGhpcykKICAgICAgICAgICAgICAgIGVsaWYgdGhpczoKICAgICAgICAgICAgICAgICAgICBjb2RlMSA9IExJVEVSQUwsIG9yZCh0aGlzKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigidW5leHBlY3RlZCBlbmQgb2YgcmVndWxhciBleHByZXNzaW9uIikKICAgICAgICAgICAgICAgIGlmIHNvdXJjZW1hdGNoKCItIik6CiAgICAgICAgICAgICAgICAgICAgIyBwb3RlbnRpYWwgcmFuZ2UKICAgICAgICAgICAgICAgICAgICB0aGlzID0gc291cmNlZ2V0KCkKICAgICAgICAgICAgICAgICAgICBpZiB0aGlzID09ICJdIjoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgY29kZTFbMF0gaXMgSU46CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlMSA9IGNvZGUxWzFdWzBdCiAgICAgICAgICAgICAgICAgICAgICAgIHNldGFwcGVuZChjb2RlMSkKICAgICAgICAgICAgICAgICAgICAgICAgc2V0YXBwZW5kKChMSVRFUkFMLCBvcmQoIi0iKSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgZWxpZiB0aGlzOgogICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGlzWzBdID09ICJcXCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlMiA9IF9jbGFzc19lc2NhcGUoc291cmNlLCB0aGlzKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTIgPSBMSVRFUkFMLCBvcmQodGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgY29kZTFbMF0gIT0gTElURVJBTCBvciBjb2RlMlswXSAhPSBMSVRFUkFMOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgZXJyb3IoImJhZCBjaGFyYWN0ZXIgcmFuZ2UiKQogICAgICAgICAgICAgICAgICAgICAgICBsbyA9IGNvZGUxWzFdCiAgICAgICAgICAgICAgICAgICAgICAgIGhpID0gY29kZTJbMV0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgaGkgPCBsbzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJiYWQgY2hhcmFjdGVyIHJhbmdlIikKICAgICAgICAgICAgICAgICAgICAgICAgc2V0YXBwZW5kKChSQU5HRSwgKGxvLCBoaSkpKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJ1bmV4cGVjdGVkIGVuZCBvZiByZWd1bGFyIGV4cHJlc3Npb24iKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBjb2RlMVswXSBpcyBJTjoKICAgICAgICAgICAgICAgICAgICAgICAgY29kZTEgPSBjb2RlMVsxXVswXQogICAgICAgICAgICAgICAgICAgIHNldGFwcGVuZChjb2RlMSkKCiAgICAgICAgICAgICMgWFhYOiA8Zmw+IHNob3VsZCBtb3ZlIHNldCBvcHRpbWl6YXRpb24gdG8gY29tcGlsZXIhCiAgICAgICAgICAgIGlmIF9sZW4oc2V0KT09MSBhbmQgc2V0WzBdWzBdIGlzIExJVEVSQUw6CiAgICAgICAgICAgICAgICBzdWJwYXR0ZXJuYXBwZW5kKHNldFswXSkgIyBvcHRpbWl6YXRpb24KICAgICAgICAgICAgZWxpZiBfbGVuKHNldCk9PTIgYW5kIHNldFswXVswXSBpcyBORUdBVEUgYW5kIHNldFsxXVswXSBpcyBMSVRFUkFMOgogICAgICAgICAgICAgICAgc3VicGF0dGVybmFwcGVuZCgoTk9UX0xJVEVSQUwsIHNldFsxXVsxXSkpICMgb3B0aW1pemF0aW9uCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIFhYWDogPGZsPiBzaG91bGQgYWRkIGNoYXJtYXAgb3B0aW1pemF0aW9uIGhlcmUKICAgICAgICAgICAgICAgIHN1YnBhdHRlcm5hcHBlbmQoKElOLCBzZXQpKQoKICAgICAgICBlbGlmIHRoaXMgYW5kIHRoaXNbMF0gaW4gUkVQRUFUX0NIQVJTOgogICAgICAgICAgICAjIHJlcGVhdCBwcmV2aW91cyBpdGVtCiAgICAgICAgICAgIGlmIHRoaXMgPT0gIj8iOgogICAgICAgICAgICAgICAgbWluLCBtYXggPSAwLCAxCiAgICAgICAgICAgIGVsaWYgdGhpcyA9PSAiKiI6CiAgICAgICAgICAgICAgICBtaW4sIG1heCA9IDAsIE1BWFJFUEVBVAoKICAgICAgICAgICAgZWxpZiB0aGlzID09ICIrIjoKICAgICAgICAgICAgICAgIG1pbiwgbWF4ID0gMSwgTUFYUkVQRUFUCiAgICAgICAgICAgIGVsaWYgdGhpcyA9PSAieyI6CiAgICAgICAgICAgICAgICBpZiBzb3VyY2UubmV4dCA9PSAifSI6CiAgICAgICAgICAgICAgICAgICAgc3VicGF0dGVybmFwcGVuZCgoTElURVJBTCwgb3JkKHRoaXMpKSkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgaGVyZSA9IHNvdXJjZS50ZWxsKCkKICAgICAgICAgICAgICAgIG1pbiwgbWF4ID0gMCwgTUFYUkVQRUFUCiAgICAgICAgICAgICAgICBsbyA9IGhpID0gIiIKICAgICAgICAgICAgICAgIHdoaWxlIHNvdXJjZS5uZXh0IGluIERJR0lUUzoKICAgICAgICAgICAgICAgICAgICBsbyA9IGxvICsgc291cmNlLmdldCgpCiAgICAgICAgICAgICAgICBpZiBzb3VyY2VtYXRjaCgiLCIpOgogICAgICAgICAgICAgICAgICAgIHdoaWxlIHNvdXJjZS5uZXh0IGluIERJR0lUUzoKICAgICAgICAgICAgICAgICAgICAgICAgaGkgPSBoaSArIHNvdXJjZWdldCgpCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGhpID0gbG8KICAgICAgICAgICAgICAgIGlmIG5vdCBzb3VyY2VtYXRjaCgifSIpOgogICAgICAgICAgICAgICAgICAgIHN1YnBhdHRlcm5hcHBlbmQoKExJVEVSQUwsIG9yZCh0aGlzKSkpCiAgICAgICAgICAgICAgICAgICAgc291cmNlLnNlZWsoaGVyZSkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgaWYgbG86CiAgICAgICAgICAgICAgICAgICAgbWluID0gaW50KGxvKQogICAgICAgICAgICAgICAgaWYgaGk6CiAgICAgICAgICAgICAgICAgICAgbWF4ID0gaW50KGhpKQogICAgICAgICAgICAgICAgaWYgbWF4IDwgbWluOgogICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJiYWQgcmVwZWF0IGludGVydmFsIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJub3Qgc3VwcG9ydGVkIikKICAgICAgICAgICAgIyBmaWd1cmUgb3V0IHdoaWNoIGl0ZW0gdG8gcmVwZWF0CiAgICAgICAgICAgIGlmIHN1YnBhdHRlcm46CiAgICAgICAgICAgICAgICBpdGVtID0gc3VicGF0dGVyblstMTpdCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBpdGVtID0gTm9uZQogICAgICAgICAgICBpZiBub3QgaXRlbSBvciAoX2xlbihpdGVtKSA9PSAxIGFuZCBpdGVtWzBdWzBdID09IEFUKToKICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJub3RoaW5nIHRvIHJlcGVhdCIpCiAgICAgICAgICAgIGlmIGl0ZW1bMF1bMF0gaW4gUkVQRUFUQ09ERVM6CiAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigibXVsdGlwbGUgcmVwZWF0IikKICAgICAgICAgICAgaWYgc291cmNlbWF0Y2goIj8iKToKICAgICAgICAgICAgICAgIHN1YnBhdHRlcm5bLTFdID0gKE1JTl9SRVBFQVQsIChtaW4sIG1heCwgaXRlbSkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzdWJwYXR0ZXJuWy0xXSA9IChNQVhfUkVQRUFULCAobWluLCBtYXgsIGl0ZW0pKQoKICAgICAgICBlbGlmIHRoaXMgPT0gIi4iOgogICAgICAgICAgICBzdWJwYXR0ZXJuYXBwZW5kKChBTlksIE5vbmUpKQoKICAgICAgICBlbGlmIHRoaXMgPT0gIigiOgogICAgICAgICAgICBncm91cCA9IDEKICAgICAgICAgICAgbmFtZSA9IE5vbmUKICAgICAgICAgICAgY29uZGdyb3VwID0gTm9uZQogICAgICAgICAgICBpZiBzb3VyY2VtYXRjaCgiPyIpOgogICAgICAgICAgICAgICAgZ3JvdXAgPSAwCiAgICAgICAgICAgICAgICAjIG9wdGlvbnMKICAgICAgICAgICAgICAgIGlmIHNvdXJjZW1hdGNoKCJQIik6CiAgICAgICAgICAgICAgICAgICAgIyBweXRob24gZXh0ZW5zaW9ucwogICAgICAgICAgICAgICAgICAgIGlmIHNvdXJjZW1hdGNoKCI8Iik6CiAgICAgICAgICAgICAgICAgICAgICAgICMgbmFtZWQgZ3JvdXA6IHNraXAgZm9yd2FyZCB0byBlbmQgb2YgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gIiIKICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXIgPSBzb3VyY2VnZXQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2hhciBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJ1bnRlcm1pbmF0ZWQgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBjaGFyID09ICI+IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUgKyBjaGFyCiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwID0gMQogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaXNuYW1lKG5hbWUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgZXJyb3IoImJhZCBjaGFyYWN0ZXIgaW4gZ3JvdXAgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgZWxpZiBzb3VyY2VtYXRjaCgiPSIpOgogICAgICAgICAgICAgICAgICAgICAgICAjIG5hbWVkIGJhY2tyZWZlcmVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyID0gc291cmNlZ2V0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoYXIgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigidW50ZXJtaW5hdGVkIG5hbWUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2hhciA9PSAiKSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lICsgY2hhcgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3QgaXNuYW1lKG5hbWUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgZXJyb3IoImJhZCBjaGFyYWN0ZXIgaW4gZ3JvdXAgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGdpZCA9IHN0YXRlLmdyb3VwZGljdC5nZXQobmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgZ2lkIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigidW5rbm93biBncm91cCBuYW1lIikKICAgICAgICAgICAgICAgICAgICAgICAgc3VicGF0dGVybmFwcGVuZCgoR1JPVVBSRUYsIGdpZCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgY2hhciA9IHNvdXJjZWdldCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoYXIgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJ1bmV4cGVjdGVkIGVuZCBvZiBwYXR0ZXJuIikKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgZXJyb3IoInVua25vd24gc3BlY2lmaWVyOiA/UCVzIiAlIGNoYXIpCiAgICAgICAgICAgICAgICBlbGlmIHNvdXJjZW1hdGNoKCI6Iik6CiAgICAgICAgICAgICAgICAgICAgIyBub24tY2FwdHVyaW5nIGdyb3VwCiAgICAgICAgICAgICAgICAgICAgZ3JvdXAgPSAyCiAgICAgICAgICAgICAgICBlbGlmIHNvdXJjZW1hdGNoKCIjIik6CiAgICAgICAgICAgICAgICAgICAgIyBjb21tZW50CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgMToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgc291cmNlLm5leHQgaXMgTm9uZSBvciBzb3VyY2UubmV4dCA9PSAiKSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VnZXQoKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzb3VyY2VtYXRjaCgiKSIpOgogICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigidW5iYWxhbmNlZCBwYXJlbnRoZXNpcyIpCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGVsaWYgc291cmNlLm5leHQgaW4gQVNTRVJUQ0hBUlM6CiAgICAgICAgICAgICAgICAgICAgIyBsb29rYWhlYWQgYXNzZXJ0aW9ucwogICAgICAgICAgICAgICAgICAgIGNoYXIgPSBzb3VyY2VnZXQoKQogICAgICAgICAgICAgICAgICAgIGRpciA9IDEKICAgICAgICAgICAgICAgICAgICBpZiBjaGFyID09ICI8IjoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgc291cmNlLm5leHQgbm90IGluIExPT0tCRUhJTkRBU1NFUlRDSEFSUzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJzeW50YXggZXJyb3IiKQogICAgICAgICAgICAgICAgICAgICAgICBkaXIgPSAtMSAjIGxvb2tiZWhpbmQKICAgICAgICAgICAgICAgICAgICAgICAgY2hhciA9IHNvdXJjZWdldCgpCiAgICAgICAgICAgICAgICAgICAgcCA9IF9wYXJzZV9zdWIoc291cmNlLCBzdGF0ZSkKICAgICAgICAgICAgICAgICAgICBpZiBub3Qgc291cmNlbWF0Y2goIikiKToKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgZXJyb3IoInVuYmFsYW5jZWQgcGFyZW50aGVzaXMiKQogICAgICAgICAgICAgICAgICAgIGlmIGNoYXIgPT0gIj0iOgogICAgICAgICAgICAgICAgICAgICAgICBzdWJwYXR0ZXJuYXBwZW5kKChBU1NFUlQsIChkaXIsIHApKSkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzdWJwYXR0ZXJuYXBwZW5kKChBU1NFUlRfTk9ULCAoZGlyLCBwKSkpCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIGVsaWYgc291cmNlbWF0Y2goIigiKToKICAgICAgICAgICAgICAgICAgICAjIGNvbmRpdGlvbmFsIGJhY2tyZWZlcmVuY2UgZ3JvdXAKICAgICAgICAgICAgICAgICAgICBjb25kbmFtZSA9ICIiCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgMToKICAgICAgICAgICAgICAgICAgICAgICAgY2hhciA9IHNvdXJjZWdldCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoYXIgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJ1bnRlcm1pbmF0ZWQgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoYXIgPT0gIikiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgY29uZG5hbWUgPSBjb25kbmFtZSArIGNoYXIKICAgICAgICAgICAgICAgICAgICBncm91cCA9IDIKICAgICAgICAgICAgICAgICAgICBpZiBpc25hbWUoY29uZG5hbWUpOgogICAgICAgICAgICAgICAgICAgICAgICBjb25kZ3JvdXAgPSBzdGF0ZS5ncm91cGRpY3QuZ2V0KGNvbmRuYW1lKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBjb25kZ3JvdXAgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJ1bmtub3duIGdyb3VwIG5hbWUiKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRncm91cCA9IGludChjb25kbmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigiYmFkIGNoYXJhY3RlciBpbiBncm91cCBuYW1lIikKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBmbGFncwogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzb3VyY2UubmV4dCBpbiBGTEFHUzoKICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UgZXJyb3IoInVuZXhwZWN0ZWQgZW5kIG9mIHBhdHRlcm4iKQogICAgICAgICAgICAgICAgICAgIHdoaWxlIHNvdXJjZS5uZXh0IGluIEZMQUdTOgogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5mbGFncyA9IHN0YXRlLmZsYWdzIHwgRkxBR1Nbc291cmNlZ2V0KCldCiAgICAgICAgICAgIGlmIGdyb3VwOgogICAgICAgICAgICAgICAgIyBwYXJzZSBncm91cCBjb250ZW50cwogICAgICAgICAgICAgICAgaWYgZ3JvdXAgPT0gMjoKICAgICAgICAgICAgICAgICAgICAjIGFub255bW91cyBncm91cAogICAgICAgICAgICAgICAgICAgIGdyb3VwID0gTm9uZQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBncm91cCA9IHN0YXRlLm9wZW5ncm91cChuYW1lKQogICAgICAgICAgICAgICAgaWYgY29uZGdyb3VwOgogICAgICAgICAgICAgICAgICAgIHAgPSBfcGFyc2Vfc3ViX2NvbmQoc291cmNlLCBzdGF0ZSwgY29uZGdyb3VwKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwID0gX3BhcnNlX3N1Yihzb3VyY2UsIHN0YXRlKQogICAgICAgICAgICAgICAgaWYgbm90IHNvdXJjZW1hdGNoKCIpIik6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UgZXJyb3IoInVuYmFsYW5jZWQgcGFyZW50aGVzaXMiKQogICAgICAgICAgICAgICAgaWYgZ3JvdXAgaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICAgICAgc3RhdGUuY2xvc2Vncm91cChncm91cCkKICAgICAgICAgICAgICAgIHN1YnBhdHRlcm5hcHBlbmQoKFNVQlBBVFRFUk4sIChncm91cCwgcCkpKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgd2hpbGUgMToKICAgICAgICAgICAgICAgICAgICBjaGFyID0gc291cmNlZ2V0KCkKICAgICAgICAgICAgICAgICAgICBpZiBjaGFyIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJ1bmV4cGVjdGVkIGVuZCBvZiBwYXR0ZXJuIikKICAgICAgICAgICAgICAgICAgICBpZiBjaGFyID09ICIpIjoKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigidW5rbm93biBleHRlbnNpb24iKQoKICAgICAgICBlbGlmIHRoaXMgPT0gIl4iOgogICAgICAgICAgICBzdWJwYXR0ZXJuYXBwZW5kKChBVCwgQVRfQkVHSU5OSU5HKSkKCiAgICAgICAgZWxpZiB0aGlzID09ICIkIjoKICAgICAgICAgICAgc3VicGF0dGVybi5hcHBlbmQoKEFULCBBVF9FTkQpKQoKICAgICAgICBlbGlmIHRoaXMgYW5kIHRoaXNbMF0gPT0gIlxcIjoKICAgICAgICAgICAgY29kZSA9IF9lc2NhcGUoc291cmNlLCB0aGlzLCBzdGF0ZSkKICAgICAgICAgICAgc3VicGF0dGVybmFwcGVuZChjb2RlKQoKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBlcnJvcigicGFyc2VyIGVycm9yIikKCiAgICByZXR1cm4gc3VicGF0dGVybgoKZGVmIGZpeF9mbGFncyhzcmMsIGZsYWdzKToKICAgICMgQ2hlY2sgYW5kIGZpeCBmbGFncyBhY2NvcmRpbmcgdG8gdGhlIHR5cGUgb2YgcGF0dGVybiAoc3RyIG9yIGJ5dGVzKQogICAgaWYgaXNpbnN0YW5jZShzcmMsIHN0cik6CiAgICAgICAgaWYgbm90IGZsYWdzICYgU1JFX0ZMQUdfQVNDSUk6CiAgICAgICAgICAgIGZsYWdzIHw9IFNSRV9GTEFHX1VOSUNPREUKICAgICAgICBlbGlmIGZsYWdzICYgU1JFX0ZMQUdfVU5JQ09ERToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiQVNDSUkgYW5kIFVOSUNPREUgZmxhZ3MgYXJlIGluY29tcGF0aWJsZSIpCiAgICBlbHNlOgogICAgICAgIGlmIGZsYWdzICYgU1JFX0ZMQUdfVU5JQ09ERToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiY2FuJ3QgdXNlIFVOSUNPREUgZmxhZyB3aXRoIGEgYnl0ZXMgcGF0dGVybiIpCiAgICByZXR1cm4gZmxhZ3MKCmRlZiBwYXJzZShzdHIsIGZsYWdzPTAsIHBhdHRlcm49Tm9uZSk6CiAgICAjIHBhcnNlICdyZScgcGF0dGVybiBpbnRvIGxpc3Qgb2YgKG9wY29kZSwgYXJndW1lbnQpIHR1cGxlcwoKICAgIHNvdXJjZSA9IFRva2VuaXplcihzdHIpCgogICAgaWYgcGF0dGVybiBpcyBOb25lOgogICAgICAgIHBhdHRlcm4gPSBQYXR0ZXJuKCkKICAgIHBhdHRlcm4uZmxhZ3MgPSBmbGFncwogICAgcGF0dGVybi5zdHIgPSBzdHIKCiAgICBwID0gX3BhcnNlX3N1Yihzb3VyY2UsIHBhdHRlcm4sIDApCiAgICBwLnBhdHRlcm4uZmxhZ3MgPSBmaXhfZmxhZ3Moc3RyLCBwLnBhdHRlcm4uZmxhZ3MpCgogICAgdGFpbCA9IHNvdXJjZS5nZXQoKQogICAgaWYgdGFpbCA9PSAiKSI6CiAgICAgICAgcmFpc2UgZXJyb3IoInVuYmFsYW5jZWQgcGFyZW50aGVzaXMiKQogICAgZWxpZiB0YWlsOgogICAgICAgIHJhaXNlIGVycm9yKCJib2d1cyBjaGFyYWN0ZXJzIGF0IGVuZCBvZiByZWd1bGFyIGV4cHJlc3Npb24iKQoKICAgIGlmIGZsYWdzICYgU1JFX0ZMQUdfREVCVUc6CiAgICAgICAgcC5kdW1wKCkKCiAgICBpZiBub3QgKGZsYWdzICYgU1JFX0ZMQUdfVkVSQk9TRSkgYW5kIHAucGF0dGVybi5mbGFncyAmIFNSRV9GTEFHX1ZFUkJPU0U6CiAgICAgICAgIyB0aGUgVkVSQk9TRSBmbGFnIHdhcyBzd2l0Y2hlZCBvbiBpbnNpZGUgdGhlIHBhdHRlcm4uICB0byBiZQogICAgICAgICMgb24gdGhlIHNhZmUgc2lkZSwgd2UnbGwgcGFyc2UgdGhlIHdob2xlIHRoaW5nIGFnYWluLi4uCiAgICAgICAgcmV0dXJuIHBhcnNlKHN0ciwgcC5wYXR0ZXJuLmZsYWdzKQoKICAgIHJldHVybiBwCgpkZWYgcGFyc2VfdGVtcGxhdGUoc291cmNlLCBwYXR0ZXJuKToKICAgICMgcGFyc2UgJ3JlJyByZXBsYWNlbWVudCBzdHJpbmcgaW50byBsaXN0IG9mIGxpdGVyYWxzIGFuZAogICAgIyBncm91cCByZWZlcmVuY2VzCiAgICBzID0gVG9rZW5pemVyKHNvdXJjZSkKICAgIHNnZXQgPSBzLmdldAogICAgcCA9IFtdCiAgICBhID0gcC5hcHBlbmQKICAgIGRlZiBsaXRlcmFsKGxpdGVyYWwsIHA9cCwgcGFwcGVuZD1hKToKICAgICAgICBpZiBwIGFuZCBwWy0xXVswXSBpcyBMSVRFUkFMOgogICAgICAgICAgICBwWy0xXSA9IExJVEVSQUwsIHBbLTFdWzFdICsgbGl0ZXJhbAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHBhcHBlbmQoKExJVEVSQUwsIGxpdGVyYWwpKQogICAgc2VwID0gc291cmNlWzowXQogICAgaWYgaXNpbnN0YW5jZShzZXAsIHN0cik6CiAgICAgICAgbWFrZWNoYXIgPSBjaHIKICAgIGVsc2U6CiAgICAgICAgbWFrZWNoYXIgPSBjaHIKICAgIHdoaWxlIDE6CiAgICAgICAgdGhpcyA9IHNnZXQoKQogICAgICAgIGlmIHRoaXMgaXMgTm9uZToKICAgICAgICAgICAgYnJlYWsgIyBlbmQgb2YgcmVwbGFjZW1lbnQgc3RyaW5nCiAgICAgICAgaWYgdGhpcyBhbmQgdGhpc1swXSA9PSAiXFwiOgogICAgICAgICAgICAjIGdyb3VwCiAgICAgICAgICAgIGMgPSB0aGlzWzE6Ml0KICAgICAgICAgICAgaWYgYyA9PSAiZyI6CiAgICAgICAgICAgICAgICBuYW1lID0gIiIKICAgICAgICAgICAgICAgIGlmIHMubWF0Y2goIjwiKToKICAgICAgICAgICAgICAgICAgICB3aGlsZSAxOgogICAgICAgICAgICAgICAgICAgICAgICBjaGFyID0gc2dldCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoYXIgaXMgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJ1bnRlcm1pbmF0ZWQgZ3JvdXAgbmFtZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNoYXIgPT0gIj4iOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUgKyBjaGFyCiAgICAgICAgICAgICAgICBpZiBub3QgbmFtZToKICAgICAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigiYmFkIGdyb3VwIG5hbWUiKQogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaW50KG5hbWUpCiAgICAgICAgICAgICAgICAgICAgaWYgaW5kZXggPCAwOgogICAgICAgICAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigibmVnYXRpdmUgZ3JvdXAgbnVtYmVyIikKICAgICAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpc25hbWUobmFtZSk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIGVycm9yKCJiYWQgY2hhcmFjdGVyIGluIGdyb3VwIG5hbWUiKQogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwYXR0ZXJuLmdyb3VwaW5kZXhbbmFtZV0KICAgICAgICAgICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIEluZGV4RXJyb3IoInVua25vd24gZ3JvdXAgbmFtZSIpCiAgICAgICAgICAgICAgICBhKChNQVJLLCBpbmRleCkpCiAgICAgICAgICAgIGVsaWYgYyA9PSAiMCI6CiAgICAgICAgICAgICAgICBpZiBzLm5leHQgaW4gT0NURElHSVRTOgogICAgICAgICAgICAgICAgICAgIHRoaXMgPSB0aGlzICsgc2dldCgpCiAgICAgICAgICAgICAgICAgICAgaWYgcy5uZXh0IGluIE9DVERJR0lUUzoKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyA9IHRoaXMgKyBzZ2V0KCkKICAgICAgICAgICAgICAgIGxpdGVyYWwobWFrZWNoYXIoaW50KHRoaXNbMTpdLCA4KSAmIDB4ZmYpKQogICAgICAgICAgICBlbGlmIGMgaW4gRElHSVRTOgogICAgICAgICAgICAgICAgaXNvY3RhbCA9IEZhbHNlCiAgICAgICAgICAgICAgICBpZiBzLm5leHQgaW4gRElHSVRTOgogICAgICAgICAgICAgICAgICAgIHRoaXMgPSB0aGlzICsgc2dldCgpCiAgICAgICAgICAgICAgICAgICAgaWYgKGMgaW4gT0NURElHSVRTIGFuZCB0aGlzWzJdIGluIE9DVERJR0lUUyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcy5uZXh0IGluIE9DVERJR0lUUyk6CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgPSB0aGlzICsgc2dldCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGlzb2N0YWwgPSBUcnVlCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdGVyYWwobWFrZWNoYXIoaW50KHRoaXNbMTpdLCA4KSAmIDB4ZmYpKQogICAgICAgICAgICAgICAgaWYgbm90IGlzb2N0YWw6CiAgICAgICAgICAgICAgICAgICAgYSgoTUFSSywgaW50KHRoaXNbMTpdKSkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgdGhpcyA9IG1ha2VjaGFyKEVTQ0FQRVNbdGhpc11bMV0pCiAgICAgICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgbGl0ZXJhbCh0aGlzKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGxpdGVyYWwodGhpcykKICAgICMgY29udmVydCB0ZW1wbGF0ZSB0byBncm91cHMgYW5kIGxpdGVyYWxzIGxpc3RzCiAgICBpID0gMAogICAgZ3JvdXBzID0gW10KICAgIGdyb3Vwc2FwcGVuZCA9IGdyb3Vwcy5hcHBlbmQKICAgIGxpdGVyYWxzID0gW05vbmVdICogbGVuKHApCiAgICBpZiBpc2luc3RhbmNlKHNvdXJjZSwgc3RyKToKICAgICAgICBlbmNvZGUgPSBsYW1iZGEgeDogeAogICAgZWxzZToKICAgICAgICAjIFRoZSB0b2tlbml6ZXIgaW1wbGljaXRseSBkZWNvZGVzIGJ5dGVzIG9iamVjdHMgYXMgbGF0aW4tMSwgd2UgbXVzdAogICAgICAgICMgdGhlcmVmb3JlIHJlLWVuY29kZSB0aGUgZmluYWwgcmVwcmVzZW50YXRpb24uCiAgICAgICAgZW5jb2RlID0gbGFtYmRhIHg6IHguZW5jb2RlKCdsYXRpbjEnKQogICAgZm9yIGMsIHMgaW4gcDoKICAgICAgICBpZiBjIGlzIE1BUks6CiAgICAgICAgICAgIGdyb3Vwc2FwcGVuZCgoaSwgcykpCiAgICAgICAgICAgICMgbGl0ZXJhbFtpXSBpcyBhbHJlYWR5IE5vbmUKICAgICAgICBlbHNlOgogICAgICAgICAgICBsaXRlcmFsc1tpXSA9IGVuY29kZShzKQogICAgICAgIGkgPSBpICsgMQogICAgcmV0dXJuIGdyb3VwcywgbGl0ZXJhbHMKCmRlZiBleHBhbmRfdGVtcGxhdGUodGVtcGxhdGUsIG1hdGNoKToKICAgIGcgPSBtYXRjaC5ncm91cAogICAgc2VwID0gbWF0Y2guc3RyaW5nWzowXQogICAgZ3JvdXBzLCBsaXRlcmFscyA9IHRlbXBsYXRlCiAgICBsaXRlcmFscyA9IGxpdGVyYWxzWzpdCiAgICB0cnk6CiAgICAgICAgZm9yIGluZGV4LCBncm91cCBpbiBncm91cHM6CiAgICAgICAgICAgIGxpdGVyYWxzW2luZGV4XSA9IHMgPSBnKGdyb3VwKQogICAgICAgICAgICBpZiBzIGlzIE5vbmU6CiAgICAgICAgICAgICAgICByYWlzZSBlcnJvcigidW5tYXRjaGVkIGdyb3VwIikKICAgIGV4Y2VwdCBJbmRleEVycm9yOgogICAgICAgIHJhaXNlIGVycm9yKCJpbnZhbGlkIGdyb3VwIHJlZmVyZW5jZSIpCiAgICByZXR1cm4gc2VwLmpvaW4obGl0ZXJhbHMpCgo=',
'/Lib/os.pyj':'',
'/Lib/datetime1.py':'IiIiQ29uY3JldGUgZGF0ZS90aW1lIGFuZCByZWxhdGVkIHR5cGVzIC0tIHByb3RvdHlwZSBpbXBsZW1lbnRlZCBpbiBQeXRob24uCgpTZWUgaHR0cDovL3d3dy56b3BlLm9yZy9NZW1iZXJzL2ZkcmFrZS9EYXRlVGltZVdpa2kvRnJvbnRQYWdlCgpTZWUgYWxzbyBodHRwOi8vZGlyLnlhaG9vLmNvbS9SZWZlcmVuY2UvY2FsZW5kYXJzLwoKRm9yIGEgcHJpbWVyIG9uIERTVCwgaW5jbHVkaW5nIG1hbnkgY3VycmVudCBEU1QgcnVsZXMsIHNlZQpodHRwOi8vd2ViZXhoaWJpdHMub3JnL2RheWxpZ2h0c2F2aW5nLwoKRm9yIG1vcmUgYWJvdXQgRFNUIHRoYW4geW91IGV2ZXIgd2FudGVkIHRvIGtub3csIHNlZQpmdHA6Ly9lbHNpZS5uY2kubmloLmdvdi9wdWIvCgpTb3VyY2VzIGZvciB0aW1lIHpvbmUgYW5kIERTVCBkYXRhOiBodHRwOi8vd3d3LnR3aW5zdW4uY29tL3R6L3R6LWxpbmsuaHRtCgpUaGlzIHdhcyBvcmlnaW5hbGx5IGNvcGllZCBmcm9tIHRoZSBzYW5kYm94IG9mIHRoZSBDUHl0aG9uIENWUyByZXBvc2l0b3J5LgpUaGFua3MgdG8gVGltIFBldGVycyBmb3Igc3VnZ2VzdGluZyB1c2luZyBpdC4KIiIiCgppbXBvcnQgdGltZSBhcyBfdGltZQppbXBvcnQgbWF0aCBhcyBfbWF0aAoKZGVmIF9zdGF0ZV9jbXAoeCwgeSk6CiAgICByZXR1cm4gMCBpZiB4ID09IHkgZWxzZSAxIGlmIHggPiB5IGVsc2UgLTEKCmRlZiBfdHVwbGVfY21wKHgsIHkpOgogICAgcmV0dXJuIDAgaWYgeCA9PSB5IGVsc2UgMSBpZiB4ID4geSBlbHNlIC0xCgpNSU5ZRUFSID0gMQpNQVhZRUFSID0gOTk5OQpfTUFYT1JESU5BTCA9IDM2NTIwNTkgIyBkYXRlLm1heC50b29yZGluYWwoKQoKIyBVdGlsaXR5IGZ1bmN0aW9ucywgYWRhcHRlZCBmcm9tIFB5dGhvbidzIERlbW8vY2xhc3Nlcy9EYXRlcy5weSwgd2hpY2gKIyBhbHNvIGFzc3VtZXMgdGhlIGN1cnJlbnQgR3JlZ29yaWFuIGNhbGVuZGFyIGluZGVmaW5pdGVseSBleHRlbmRlZCBpbgojIGJvdGggZGlyZWN0aW9ucy4gIERpZmZlcmVuY2U6ICBEYXRlcy5weSBjYWxscyBKYW51YXJ5IDEgb2YgeWVhciAwIGRheQojIG51bWJlciAxLiAgVGhlIGNvZGUgaGVyZSBjYWxscyBKYW51YXJ5IDEgb2YgeWVhciAxIGRheSBudW1iZXIgMS4gIFRoaXMgaXMKIyB0byBtYXRjaCB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgInByb2xlcHRpYyBHcmVnb3JpYW4iIGNhbGVuZGFyIGluIERlcnNob3dpdHoKIyBhbmQgUmVpbmdvbGQncyAiQ2FsZW5kcmljYWwgQ2FsY3VsYXRpb25zIiwgd2hlcmUgaXQncyB0aGUgYmFzZSBjYWxlbmRhcgojIGZvciBhbGwgY29tcHV0YXRpb25zLiAgU2VlIHRoZSBib29rIGZvciBhbGdvcml0aG1zIGZvciBjb252ZXJ0aW5nIGJldHdlZW4KIyBwcm9sZXB0aWMgR3JlZ29yaWFuIG9yZGluYWxzIGFuZCBtYW55IG90aGVyIGNhbGVuZGFyIHN5c3RlbXMuCgpfREFZU19JTl9NT05USCA9IFtOb25lLCAzMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXQoKX0RBWVNfQkVGT1JFX01PTlRIID0gW05vbmVdCmRibSA9IDAKZm9yIGRpbSBpbiBfREFZU19JTl9NT05USFsxOl06CiAgICBfREFZU19CRUZPUkVfTU9OVEguYXBwZW5kKGRibSkKICAgIGRibSArPSBkaW0KI2RlbCBkYm0sIGRpbQoKZGVmIF9pc19sZWFwKHllYXIpOgogICAgInllYXIgLT4gMSBpZiBsZWFwIHllYXIsIGVsc2UgMC4iCiAgICByZXR1cm4geWVhciAlIDQgPT0gMCBhbmQgKHllYXIgJSAxMDAgIT0gMCBvciB5ZWFyICUgNDAwID09IDApCgpkZWYgX2RheXNfYmVmb3JlX3llYXIoeWVhcik6CiAgICAieWVhciAtPiBudW1iZXIgb2YgZGF5cyBiZWZvcmUgSmFudWFyeSAxc3Qgb2YgeWVhci4iCiAgICB5ID0geWVhciAtIDEKICAgIHJldHVybiB5KjM2NSArIHkvLzQgLSB5Ly8xMDAgKyB5Ly80MDAKCmRlZiBfZGF5c19pbl9tb250aCh5ZWFyLCBtb250aCk6CiAgICAieWVhciwgbW9udGggLT4gbnVtYmVyIG9mIGRheXMgaW4gdGhhdCBtb250aCBpbiB0aGF0IHllYXIuIgogICAgYXNzZXJ0IDEgPD0gbW9udGggPD0gMTIsIG1vbnRoCiAgICBpZiBtb250aCA9PSAyIGFuZCBfaXNfbGVhcCh5ZWFyKToKICAgICAgICByZXR1cm4gMjkKICAgIHJldHVybiBfREFZU19JTl9NT05USFttb250aF0KCmRlZiBfZGF5c19iZWZvcmVfbW9udGgoeWVhciwgbW9udGgpOgogICAgInllYXIsIG1vbnRoIC0+IG51bWJlciBvZiBkYXlzIGluIHllYXIgcHJlY2VlZGluZyBmaXJzdCBkYXkgb2YgbW9udGguIgogICAgYXNzZXJ0IDEgPD0gbW9udGggPD0gMTIsICdtb250aCBtdXN0IGJlIGluIDEuLjEyJwogICAgcmV0dXJuIF9EQVlTX0JFRk9SRV9NT05USFttb250aF0gKyAobW9udGggPiAyIGFuZCBfaXNfbGVhcCh5ZWFyKSkKCmRlZiBfeW1kMm9yZCh5ZWFyLCBtb250aCwgZGF5KToKICAgICJ5ZWFyLCBtb250aCwgZGF5IC0+IG9yZGluYWwsIGNvbnNpZGVyaW5nIDAxLUphbi0wMDAxIGFzIGRheSAxLiIKICAgIGFzc2VydCAxIDw9IG1vbnRoIDw9IDEyLCAnbW9udGggbXVzdCBiZSBpbiAxLi4xMicKICAgIGRpbSA9IF9kYXlzX2luX21vbnRoKHllYXIsIG1vbnRoKQogICAgYXNzZXJ0IDEgPD0gZGF5IDw9IGRpbSwgKCdkYXkgbXVzdCBiZSBpbiAxLi4lZCcgJSBkaW0pCiAgICByZXR1cm4gKF9kYXlzX2JlZm9yZV95ZWFyKHllYXIpICsKICAgICAgICAgICAgX2RheXNfYmVmb3JlX21vbnRoKHllYXIsIG1vbnRoKSArCiAgICAgICAgICAgIGRheSkKCl9ESTQwMFkgPSBfZGF5c19iZWZvcmVfeWVhcig0MDEpICAgICMgbnVtYmVyIG9mIGRheXMgaW4gNDAwIHllYXJzCl9ESTEwMFkgPSBfZGF5c19iZWZvcmVfeWVhcigxMDEpICAgICMgICAgIiAgICAiICAgIiAgICIgMTAwICAgIgpfREk0WSAgID0gX2RheXNfYmVmb3JlX3llYXIoNSkgICAgICAjICAgICIgICAgIiAgICIgICAiICAgNCAgICIKCiMgQSA0LXllYXIgY3ljbGUgaGFzIGFuIGV4dHJhIGxlYXAgZGF5IG92ZXIgd2hhdCB3ZSdkIGdldCBmcm9tIHBhc3RpbmcKIyB0b2dldGhlciA0IHNpbmdsZSB5ZWFycy4KYXNzZXJ0IF9ESTRZID09IDQgKiAzNjUgKyAxCgojIFNpbWlsYXJseSwgYSA0MDAteWVhciBjeWNsZSBoYXMgYW4gZXh0cmEgbGVhcCBkYXkgb3ZlciB3aGF0IHdlJ2QgZ2V0IGZyb20KIyBwYXN0aW5nIHRvZ2V0aGVyIDQgMTAwLXllYXIgY3ljbGVzLgphc3NlcnQgX0RJNDAwWSA9PSA0ICogX0RJMTAwWSArIDEKCiMgT1RPSCwgYSAxMDAteWVhciBjeWNsZSBoYXMgb25lIGZld2VyIGxlYXAgZGF5IHRoYW4gd2UnZCBnZXQgZnJvbQojIHBhc3RpbmcgdG9nZXRoZXIgMjUgNC15ZWFyIGN5Y2xlcy4KYXNzZXJ0IF9ESTEwMFkgPT0gMjUgKiBfREk0WSAtIDEKCmRlZiBfb3JkMnltZChuKToKICAgICJvcmRpbmFsIC0+ICh5ZWFyLCBtb250aCwgZGF5KSwgY29uc2lkZXJpbmcgMDEtSmFuLTAwMDEgYXMgZGF5IDEuIgoKICAgICMgbiBpcyBhIDEtYmFzZWQgaW5kZXgsIHN0YXJ0aW5nIGF0IDEtSmFuLTEuICBUaGUgcGF0dGVybiBvZiBsZWFwIHllYXJzCiAgICAjIHJlcGVhdHMgZXhhY3RseSBldmVyeSA0MDAgeWVhcnMuICBUaGUgYmFzaWMgc3RyYXRlZ3kgaXMgdG8gZmluZCB0aGUKICAgICMgY2xvc2VzdCA0MDAteWVhciBib3VuZGFyeSBhdCBvciBiZWZvcmUgbiwgdGhlbiB3b3JrIHdpdGggdGhlIG9mZnNldAogICAgIyBmcm9tIHRoYXQgYm91bmRhcnkgdG8gbi4gIExpZmUgaXMgbXVjaCBjbGVhcmVyIGlmIHdlIHN1YnRyYWN0IDEgZnJvbQogICAgIyBuIGZpcnN0IC0tIHRoZW4gdGhlIHZhbHVlcyBvZiBuIGF0IDQwMC15ZWFyIGJvdW5kYXJpZXMgYXJlIGV4YWN0bHkKICAgICMgdGhvc2UgZGl2aXNpYmxlIGJ5IF9ESTQwMFk6CiAgICAjCiAgICAjICAgICBEICBNICAgWSAgICAgICAgICAgIG4gICAgICAgICAgICAgIG4tMQogICAgIyAgICAgLS0gLS0tIC0tLS0gICAgICAgIC0tLS0tLS0tLS0gICAgIC0tLS0tLS0tLS0tLS0tLS0KICAgICMgICAgIDMxIERlYyAtNDAwICAgICAgICAtX0RJNDAwWSAgICAgICAtX0RJNDAwWSAtMQogICAgIyAgICAgIDEgSmFuIC0zOTkgICAgICAgICAtX0RJNDAwWSArMSAgIC1fREk0MDBZICAgICAgNDAwLXllYXIgYm91bmRhcnkKICAgICMgICAgIC4uLgogICAgIyAgICAgMzAgRGVjICAwMDAgICAgICAgIC0xICAgICAgICAgICAgIC0yCiAgICAjICAgICAzMSBEZWMgIDAwMCAgICAgICAgIDAgICAgICAgICAgICAgLTEKICAgICMgICAgICAxIEphbiAgMDAxICAgICAgICAgMSAgICAgICAgICAgICAgMCAgICAgICAgICAgIDQwMC15ZWFyIGJvdW5kYXJ5CiAgICAjICAgICAgMiBKYW4gIDAwMSAgICAgICAgIDIgICAgICAgICAgICAgIDEKICAgICMgICAgICAzIEphbiAgMDAxICAgICAgICAgMyAgICAgICAgICAgICAgMgogICAgIyAgICAgLi4uCiAgICAjICAgICAzMSBEZWMgIDQwMCAgICAgICAgIF9ESTQwMFkgICAgICAgIF9ESTQwMFkgLTEKICAgICMgICAgICAxIEphbiAgNDAxICAgICAgICAgX0RJNDAwWSArMSAgICAgX0RJNDAwWSAgICAgIDQwMC15ZWFyIGJvdW5kYXJ5CiAgICBuIC09IDEKICAgIG40MDAsIG4gPSBkaXZtb2QobiwgX0RJNDAwWSkKICAgIHllYXIgPSBuNDAwICogNDAwICsgMSAgICMgLi4uLCAtMzk5LCAxLCA0MDEsIC4uLgoKICAgICMgTm93IG4gaXMgdGhlIChub24tbmVnYXRpdmUpIG9mZnNldCwgaW4gZGF5cywgZnJvbSBKYW51YXJ5IDEgb2YgeWVhciwgdG8KICAgICMgdGhlIGRlc2lyZWQgZGF0ZS4gIE5vdyBjb21wdXRlIGhvdyBtYW55IDEwMC15ZWFyIGN5Y2xlcyBwcmVjZWRlIG4uCiAgICAjIE5vdGUgdGhhdCBpdCdzIHBvc3NpYmxlIGZvciBuMTAwIHRvIGVxdWFsIDQhICBJbiB0aGF0IGNhc2UgNCBmdWxsCiAgICAjIDEwMC15ZWFyIGN5Y2xlcyBwcmVjZWRlIHRoZSBkZXNpcmVkIGRheSwgd2hpY2ggaW1wbGllcyB0aGUgZGVzaXJlZAogICAgIyBkYXkgaXMgRGVjZW1iZXIgMzEgYXQgdGhlIGVuZCBvZiBhIDQwMC15ZWFyIGN5Y2xlLgogICAgbjEwMCwgbiA9IGRpdm1vZChuLCBfREkxMDBZKQoKICAgICMgTm93IGNvbXB1dGUgaG93IG1hbnkgNC15ZWFyIGN5Y2xlcyBwcmVjZWRlIGl0LgogICAgbjQsIG4gPSBkaXZtb2QobiwgX0RJNFkpCgogICAgIyBBbmQgbm93IGhvdyBtYW55IHNpbmdsZSB5ZWFycy4gIEFnYWluIG4xIGNhbiBiZSA0LCBhbmQgYWdhaW4gbWVhbmluZwogICAgIyB0aGF0IHRoZSBkZXNpcmVkIGRheSBpcyBEZWNlbWJlciAzMSBhdCB0aGUgZW5kIG9mIHRoZSA0LXllYXIgY3ljbGUuCiAgICBuMSwgbiA9IGRpdm1vZChuLCAzNjUpCgogICAgeWVhciArPSBuMTAwICogMTAwICsgbjQgKiA0ICsgbjEKICAgIGlmIG4xID09IDQgb3IgbjEwMCA9PSA0OgogICAgICAgIGFzc2VydCBuID09IDAKICAgICAgICByZXR1cm4geWVhci0xLCAxMiwgMzEKCiAgICAjIE5vdyB0aGUgeWVhciBpcyBjb3JyZWN0LCBhbmQgbiBpcyB0aGUgb2Zmc2V0IGZyb20gSmFudWFyeSAxLiAgV2UgZmluZAogICAgIyB0aGUgbW9udGggdmlhIGFuIGVzdGltYXRlIHRoYXQncyBlaXRoZXIgZXhhY3Qgb3Igb25lIHRvbyBsYXJnZS4KICAgIGxlYXB5ZWFyID0gbjEgPT0gMyBhbmQgKG40ICE9IDI0IG9yIG4xMDAgPT0gMykKICAgIGFzc2VydCBsZWFweWVhciA9PSBfaXNfbGVhcCh5ZWFyKQogICAgbW9udGggPSAobiArIDUwKSA+PiA1CiAgICBwcmVjZWRpbmcgPSBfREFZU19CRUZPUkVfTU9OVEhbbW9udGhdICsgKG1vbnRoID4gMiBhbmQgbGVhcHllYXIpCiAgICBpZiBwcmVjZWRpbmcgPiBuOiAgIyBlc3RpbWF0ZSBpcyB0b28gbGFyZ2UKICAgICAgICBtb250aCAtPSAxCiAgICAgICAgcHJlY2VkaW5nIC09IF9EQVlTX0lOX01PTlRIW21vbnRoXSArIChtb250aCA9PSAyIGFuZCBsZWFweWVhcikKICAgIG4gLT0gcHJlY2VkaW5nCiAgICBhc3NlcnQgMCA8PSBuIDwgX2RheXNfaW5fbW9udGgoeWVhciwgbW9udGgpCgogICAgIyBOb3cgdGhlIHllYXIgYW5kIG1vbnRoIGFyZSBjb3JyZWN0LCBhbmQgbiBpcyB0aGUgb2Zmc2V0IGZyb20gdGhlCiAgICAjIHN0YXJ0IG9mIHRoYXQgbW9udGg6ICB3ZSdyZSBkb25lIQogICAgcmV0dXJuIHllYXIsIG1vbnRoLCBuKzEKCiMgTW9udGggYW5kIGRheSBuYW1lcy4gIEZvciBsb2NhbGl6ZWQgdmVyc2lvbnMsIHNlZSB0aGUgY2FsZW5kYXIgbW9kdWxlLgpfTU9OVEhOQU1FUyA9IFtOb25lLCAiSmFuIiwgIkZlYiIsICJNYXIiLCAiQXByIiwgIk1heSIsICJKdW4iLAogICAgICAgICAgICAgICAgICAgICAiSnVsIiwgIkF1ZyIsICJTZXAiLCAiT2N0IiwgIk5vdiIsICJEZWMiXQpfREFZTkFNRVMgPSBbTm9uZSwgIk1vbiIsICJUdWUiLCAiV2VkIiwgIlRodSIsICJGcmkiLCAiU2F0IiwgIlN1biJdCgoKZGVmIF9idWlsZF9zdHJ1Y3RfdGltZSh5LCBtLCBkLCBoaCwgbW0sIHNzLCBkc3RmbGFnKToKICAgIHdkYXkgPSAoX3ltZDJvcmQoeSwgbSwgZCkgKyA2KSAlIDcKICAgIGRudW0gPSBfZGF5c19iZWZvcmVfbW9udGgoeSwgbSkgKyBkCiAgICByZXR1cm4gX3RpbWUuc3RydWN0X3RpbWUoKHksIG0sIGQsIGhoLCBtbSwgc3MsIHdkYXksIGRudW0sIGRzdGZsYWcpKQoKZGVmIF9mb3JtYXRfdGltZShoaCwgbW0sIHNzLCB1cyk6CiAgICAjIFNraXAgdHJhaWxpbmcgbWljcm9zZWNvbmRzIHdoZW4gdXM9PTAuCiAgICByZXN1bHQgPSAiJTAyZDolMDJkOiUwMmQiICUgKGhoLCBtbSwgc3MpCiAgICBpZiB1czoKICAgICAgICByZXN1bHQgKz0gIi4lMDZkIiAlIHVzCiAgICByZXR1cm4gcmVzdWx0CgojIENvcnJlY3RseSBzdWJzdGl0dXRlIGZvciAleiBhbmQgJVogZXNjYXBlcyBpbiBzdHJmdGltZSBmb3JtYXRzLgpkZWYgX3dyYXBfc3RyZnRpbWUob2JqZWN0LCBmb3JtYXQsIHRpbWV0dXBsZSk6CiAgICB5ZWFyID0gdGltZXR1cGxlWzBdCiAgICBpZiB5ZWFyIDwgMTAwMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJ5ZWFyPSVkIGlzIGJlZm9yZSAxMDAwOyB0aGUgZGF0ZXRpbWUgc3RyZnRpbWUoKSAiCiAgICAgICAgICAgICAgICAgICAgICAgICAibWV0aG9kcyByZXF1aXJlIHllYXIgPj0gMTAwMCIgJSB5ZWFyKQogICAgIyBEb24ndCBjYWxsIHV0Y29mZnNldCgpIG9yIHR6bmFtZSgpIHVubGVzcyBhY3R1YWxseSBuZWVkZWQuCiAgICBmcmVwbGFjZSA9IE5vbmUgIyB0aGUgc3RyaW5nIHRvIHVzZSBmb3IgJWYKICAgIHpyZXBsYWNlID0gTm9uZSAjIHRoZSBzdHJpbmcgdG8gdXNlIGZvciAlegogICAgWnJlcGxhY2UgPSBOb25lICMgdGhlIHN0cmluZyB0byB1c2UgZm9yICVaCgogICAgIyBTY2FuIGZvcm1hdCBmb3IgJXogYW5kICVaIGVzY2FwZXMsIHJlcGxhY2luZyBhcyBuZWVkZWQuCiAgICBuZXdmb3JtYXQgPSBbXQogICAgcHVzaCA9IG5ld2Zvcm1hdC5hcHBlbmQKICAgIGksIG4gPSAwLCBsZW4oZm9ybWF0KQogICAgd2hpbGUgaSA8IG46CiAgICAgICAgY2ggPSBmb3JtYXRbaV0KICAgICAgICBpICs9IDEKICAgICAgICBpZiBjaCA9PSAnJSc6CiAgICAgICAgICAgIGlmIGkgPCBuOgogICAgICAgICAgICAgICAgY2ggPSBmb3JtYXRbaV0KICAgICAgICAgICAgICAgIGkgKz0gMQogICAgICAgICAgICAgICAgaWYgY2ggPT0gJ2YnOgogICAgICAgICAgICAgICAgICAgIGlmIGZyZXBsYWNlIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIGZyZXBsYWNlID0gJyUwNmQnICUgZ2V0YXR0cihvYmplY3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWljcm9zZWNvbmQnLCAwKQogICAgICAgICAgICAgICAgICAgIG5ld2Zvcm1hdC5hcHBlbmQoZnJlcGxhY2UpCiAgICAgICAgICAgICAgICBlbGlmIGNoID09ICd6JzoKICAgICAgICAgICAgICAgICAgICBpZiB6cmVwbGFjZSBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICB6cmVwbGFjZSA9ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIob2JqZWN0LCAidXRjb2Zmc2V0Iik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBvYmplY3QudXRjb2Zmc2V0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG9mZnNldCBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduID0gJysnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgb2Zmc2V0LmRheXMgPCAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSAnLScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLCBtID0gZGl2bW9kKG9mZnNldCwgdGltZWRlbHRhKGhvdXJzPTEpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCBub3QgbSAlIHRpbWVkZWx0YShtaW51dGVzPTEpLCAid2hvbGUgbWludXRlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gLy89IHRpbWVkZWx0YShtaW51dGVzPTEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgenJlcGxhY2UgPSAnJWMlMDJkJTAyZCcgJSAoc2lnbiwgaCwgbSkKICAgICAgICAgICAgICAgICAgICBhc3NlcnQgJyUnIG5vdCBpbiB6cmVwbGFjZQogICAgICAgICAgICAgICAgICAgIG5ld2Zvcm1hdC5hcHBlbmQoenJlcGxhY2UpCiAgICAgICAgICAgICAgICBlbGlmIGNoID09ICdaJzoKICAgICAgICAgICAgICAgICAgICBpZiBacmVwbGFjZSBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICBacmVwbGFjZSA9ICIiCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIob2JqZWN0LCAidHpuYW1lIik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gb2JqZWN0LnR6bmFtZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBzIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgc3RyZnRpbWUgaXMgZ29pbmcgdG8gaGF2ZSBhdCB0aGlzOiBlc2NhcGUgJQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFpyZXBsYWNlID0gcy5yZXBsYWNlKCclJywgJyUlJykKICAgICAgICAgICAgICAgICAgICBuZXdmb3JtYXQuYXBwZW5kKFpyZXBsYWNlKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwdXNoKCclJykKICAgICAgICAgICAgICAgICAgICBwdXNoKGNoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHVzaCgnJScpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHVzaChjaCkKICAgIG5ld2Zvcm1hdCA9ICIiLmpvaW4obmV3Zm9ybWF0KQogICAgcmV0dXJuIF90aW1lLnN0cmZ0aW1lKG5ld2Zvcm1hdCwgdGltZXR1cGxlKQoKZGVmIF9jYWxsX3R6aW5mb19tZXRob2QodHppbmZvLCBtZXRobmFtZSwgdHppbmZvYXJnKToKICAgIGlmIHR6aW5mbyBpcyBOb25lOgogICAgICAgIHJldHVybiBOb25lCiAgICByZXR1cm4gZ2V0YXR0cih0emluZm8sIG1ldGhuYW1lKSh0emluZm9hcmcpCgojIEp1c3QgcmFpc2UgVHlwZUVycm9yIGlmIHRoZSBhcmcgaXNuJ3QgTm9uZSBvciBhIHN0cmluZy4KZGVmIF9jaGVja190em5hbWUobmFtZSk6CiAgICBpZiBuYW1lIGlzIG5vdCBOb25lIGFuZCBub3QgaXNpbnN0YW5jZShuYW1lLCBzdHIpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigidHppbmZvLnR6bmFtZSgpIG11c3QgcmV0dXJuIE5vbmUgb3Igc3RyaW5nLCAiCiAgICAgICAgICAgICAgICAgICAgICAgICJub3QgJyVzJyIgJSB0eXBlKG5hbWUpKQoKIyBuYW1lIGlzIHRoZSBvZmZzZXQtcHJvZHVjaW5nIG1ldGhvZCwgInV0Y29mZnNldCIgb3IgImRzdCIuCiMgb2Zmc2V0IGlzIHdoYXQgaXQgcmV0dXJuZWQuCiMgSWYgb2Zmc2V0IGlzbid0IE5vbmUgb3IgdGltZWRlbHRhLCByYWlzZXMgVHlwZUVycm9yLgojIElmIG9mZnNldCBpcyBOb25lLCByZXR1cm5zIE5vbmUuCiMgRWxzZSBvZmZzZXQgaXMgY2hlY2tlZCBmb3IgYmVpbmcgaW4gcmFuZ2UsIGFuZCBhIHdob2xlICMgb2YgbWludXRlcy4KIyBJZiBpdCBpcywgaXRzIGludGVnZXIgdmFsdWUgaXMgcmV0dXJuZWQuICBFbHNlIFZhbHVlRXJyb3IgaXMgcmFpc2VkLgpkZWYgX2NoZWNrX3V0Y19vZmZzZXQobmFtZSwgb2Zmc2V0KToKICAgIGFzc2VydCBuYW1lIGluICgidXRjb2Zmc2V0IiwgImRzdCIpCiAgICBpZiBvZmZzZXQgaXMgTm9uZToKICAgICAgICByZXR1cm4KICAgIGlmIG5vdCBpc2luc3RhbmNlKG9mZnNldCwgdGltZWRlbHRhKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoInR6aW5mby4lcygpIG11c3QgcmV0dXJuIE5vbmUgIgogICAgICAgICAgICAgICAgICAgICAgICAib3IgdGltZWRlbHRhLCBub3QgJyVzJyIgJSAobmFtZSwgdHlwZShvZmZzZXQpKSkKICAgIGlmIG9mZnNldCAlIHRpbWVkZWx0YShtaW51dGVzPTEpIG9yIG9mZnNldC5taWNyb3NlY29uZHM6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigidHppbmZvLiVzKCkgbXVzdCByZXR1cm4gYSB3aG9sZSBudW1iZXIgIgogICAgICAgICAgICAgICAgICAgICAgICAgIm9mIG1pbnV0ZXMsIGdvdCAlcyIgJSAobmFtZSwgb2Zmc2V0KSkKICAgIGlmIG5vdCAtdGltZWRlbHRhKDEpIDwgb2Zmc2V0IDwgdGltZWRlbHRhKDEpOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIiVzKCk9JXMsIG11c3QgYmUgbXVzdCBiZSBzdHJpY3RseSBiZXR3ZWVuIgogICAgICAgICAgICAgICAgICAgICAgICAgIiAtdGltZWRlbHRhKGhvdXJzPTI0KSBhbmQgdGltZWRlbHRhKGhvdXJzPTI0KSIKICAgICAgICAgICAgICAgICAgICAgICAgICUgKG5hbWUsIG9mZnNldCkpCgpkZWYgX2NoZWNrX2RhdGVfZmllbGRzKHllYXIsIG1vbnRoLCBkYXkpOgogICAgaWYgbm90IGlzaW5zdGFuY2UoeWVhciwgaW50KToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ2ludCBleHBlY3RlZCcpCiAgICBpZiBub3QgTUlOWUVBUiA8PSB5ZWFyIDw9IE1BWFlFQVI6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigneWVhciBtdXN0IGJlIGluICVkLi4lZCcgJSAoTUlOWUVBUiwgTUFYWUVBUiksIHllYXIpCiAgICBpZiBub3QgMSA8PSBtb250aCA8PSAxMjoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdtb250aCBtdXN0IGJlIGluIDEuLjEyJywgbW9udGgpCiAgICBkaW0gPSBfZGF5c19pbl9tb250aCh5ZWFyLCBtb250aCkKICAgIGlmIG5vdCAxIDw9IGRheSA8PSBkaW06CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignZGF5IG11c3QgYmUgaW4gMS4uJWQnICUgZGltLCBkYXkpCgpkZWYgX2NoZWNrX3RpbWVfZmllbGRzKGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWNyb3NlY29uZCk6CiAgICBpZiBub3QgaXNpbnN0YW5jZShob3VyLCBpbnQpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcignaW50IGV4cGVjdGVkJykKICAgIGlmIG5vdCAwIDw9IGhvdXIgPD0gMjM6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignaG91ciBtdXN0IGJlIGluIDAuLjIzJywgaG91cikKICAgIGlmIG5vdCAwIDw9IG1pbnV0ZSA8PSA1OToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdtaW51dGUgbXVzdCBiZSBpbiAwLi41OScsIG1pbnV0ZSkKICAgIGlmIG5vdCAwIDw9IHNlY29uZCA8PSA1OToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdzZWNvbmQgbXVzdCBiZSBpbiAwLi41OScsIHNlY29uZCkKICAgIGlmIG5vdCAwIDw9IG1pY3Jvc2Vjb25kIDw9IDk5OTk5OToKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdtaWNyb3NlY29uZCBtdXN0IGJlIGluIDAuLjk5OTk5OScsIG1pY3Jvc2Vjb25kKQoKZGVmIF9jaGVja190emluZm9fYXJnKHR6KToKICAgIGlmIHR6IGlzIG5vdCBOb25lIGFuZCBub3QgaXNpbnN0YW5jZSh0eiwgdHppbmZvKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoInR6aW5mbyBhcmd1bWVudCBtdXN0IGJlIE5vbmUgb3Igb2YgYSB0emluZm8gc3ViY2xhc3MiKQoKZGVmIF9jbXBlcnJvcih4LCB5KToKICAgIHJhaXNlIFR5cGVFcnJvcigiY2FuJ3QgY29tcGFyZSAnJXMnIHRvICclcyciICUgKAogICAgICAgICAgICAgICAgICAgIHR5cGUoeCkuX19uYW1lX18sIHR5cGUoeSkuX19uYW1lX18pKQoKY2xhc3MgdGltZWRlbHRhOgogICAgIiIiUmVwcmVzZW50IHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIGRhdGV0aW1lIG9iamVjdHMuCgogICAgU3VwcG9ydGVkIG9wZXJhdG9yczoKCiAgICAtIGFkZCwgc3VidHJhY3QgdGltZWRlbHRhCiAgICAtIHVuYXJ5IHBsdXMsIG1pbnVzLCBhYnMKICAgIC0gY29tcGFyZSB0byB0aW1lZGVsdGEKICAgIC0gbXVsdGlwbHksIGRpdmlkZSBieSBpbnQvbG9uZwoKICAgIEluIGFkZGl0aW9uLCBkYXRldGltZSBzdXBwb3J0cyBzdWJ0cmFjdGlvbiBvZiB0d28gZGF0ZXRpbWUgb2JqZWN0cwogICAgcmV0dXJuaW5nIGEgdGltZWRlbHRhLCBhbmQgYWRkaXRpb24gb3Igc3VidHJhY3Rpb24gb2YgYSBkYXRldGltZQogICAgYW5kIGEgdGltZWRlbHRhIGdpdmluZyBhIGRhdGV0aW1lLgoKICAgIFJlcHJlc2VudGF0aW9uOiAoZGF5cywgc2Vjb25kcywgbWljcm9zZWNvbmRzKS4gIFdoeT8gIEJlY2F1c2UgSQogICAgZmVsdCBsaWtlIGl0LgogICAgIiIiCiAgICBfX3Nsb3RzX18gPSAnX2RheXMnLCAnX3NlY29uZHMnLCAnX21pY3Jvc2Vjb25kcycKCiAgICBkZWYgX19uZXdfXyhjbHMsIGRheXM9MCwgc2Vjb25kcz0wLCBtaWNyb3NlY29uZHM9MCwKICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kcz0wLCBtaW51dGVzPTAsIGhvdXJzPTAsIHdlZWtzPTApOgogICAgICAgICMgRG9pbmcgdGhpcyBlZmZpY2llbnRseSBhbmQgYWNjdXJhdGVseSBpbiBDIGlzIGdvaW5nIHRvIGJlIGRpZmZpY3VsdAogICAgICAgICMgYW5kIGVycm9yLXByb25lLCBkdWUgdG8gdWJpcXVpdG91cyBvdmVyZmxvdyBwb3NzaWJpbGl0aWVzLCBhbmQgdGhhdAogICAgICAgICMgQyBkb3VibGUgZG9lc24ndCBoYXZlIGVub3VnaCBiaXRzIG9mIHByZWNpc2lvbiB0byByZXByZXNlbnQKICAgICAgICAjIG1pY3Jvc2Vjb25kcyBvdmVyIDEwSyB5ZWFycyBmYWl0aGZ1bGx5LiAgVGhlIGNvZGUgaGVyZSB0cmllcyB0byBtYWtlCiAgICAgICAgIyBleHBsaWNpdCB3aGVyZSBnby1mYXN0IGFzc3VtcHRpb25zIGNhbiBiZSByZWxpZWQgb24sIGluIG9yZGVyIHRvCiAgICAgICAgIyBndWlkZSB0aGUgQyBpbXBsZW1lbnRhdGlvbjsgaXQncyB3YXkgbW9yZSBjb252b2x1dGVkIHRoYW4gc3BlZWQtCiAgICAgICAgIyBpZ25vcmluZyBhdXRvLW92ZXJmbG93LXRvLWxvbmcgaWRpb21hdGljIFB5dGhvbiBjb3VsZCBiZS4KCiAgICAgICAgIyBYWFggQ2hlY2sgdGhhdCBhbGwgaW5wdXRzIGFyZSBpbnRzIG9yIGZsb2F0cy4KCiAgICAgICAgIyBGaW5hbCB2YWx1ZXMsIGFsbCBpbnRlZ2VyLgogICAgICAgICMgcyBhbmQgdXMgZml0IGluIDMyLWJpdCBzaWduZWQgaW50czsgZCBpc24ndCBib3VuZGVkLgogICAgICAgIGQgPSBzID0gdXMgPSAwCgogICAgICAgICMgTm9ybWFsaXplIGV2ZXJ5dGhpbmcgdG8gZGF5cywgc2Vjb25kcywgbWljcm9zZWNvbmRzLgogICAgICAgIGRheXMgKz0gd2Vla3MqNwogICAgICAgIHNlY29uZHMgKz0gbWludXRlcyo2MCArIGhvdXJzKjM2MDAKICAgICAgICBtaWNyb3NlY29uZHMgKz0gbWlsbGlzZWNvbmRzKjEwMDAKCiAgICAgICAgIyBHZXQgcmlkIG9mIGFsbCBmcmFjdGlvbnMsIGFuZCBub3JtYWxpemUgcyBhbmQgdXMuCiAgICAgICAgIyBUYWtlIGEgZGVlcCBicmVhdGggPHdpbms+LgogICAgICAgIGlmIGlzaW5zdGFuY2UoZGF5cywgZmxvYXQpOgogICAgICAgICAgICBkYXlmcmFjLCBkYXlzID0gX21hdGgubW9kZihkYXlzKQogICAgICAgICAgICBkYXlzZWNvbmRzZnJhYywgZGF5c2Vjb25kc3dob2xlID0gX21hdGgubW9kZihkYXlmcmFjICogKDI0LiozNjAwLikpCiAgICAgICAgICAgIGFzc2VydCBkYXlzZWNvbmRzd2hvbGUgPT0gaW50KGRheXNlY29uZHN3aG9sZSkgICMgY2FuJ3Qgb3ZlcmZsb3cKICAgICAgICAgICAgcyA9IGludChkYXlzZWNvbmRzd2hvbGUpCiAgICAgICAgICAgIGFzc2VydCBkYXlzID09IGludChkYXlzKQogICAgICAgICAgICBkID0gaW50KGRheXMpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZGF5c2Vjb25kc2ZyYWMgPSAwLjAKICAgICAgICAgICAgZCA9IGRheXMKICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShkYXlzZWNvbmRzZnJhYywgZmxvYXQpCiAgICAgICAgYXNzZXJ0IGFicyhkYXlzZWNvbmRzZnJhYykgPD0gMS4wCiAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2UoZCwgaW50KQogICAgICAgIGFzc2VydCBhYnMocykgPD0gMjQgKiAzNjAwCiAgICAgICAgIyBkYXlzIGlzbid0IHJlZmVyZW5jZWQgYWdhaW4gYmVmb3JlIHJlZGVmaW5pdGlvbgoKICAgICAgICBpZiBpc2luc3RhbmNlKHNlY29uZHMsIGZsb2F0KToKICAgICAgICAgICAgc2Vjb25kc2ZyYWMsIHNlY29uZHMgPSBfbWF0aC5tb2RmKHNlY29uZHMpCiAgICAgICAgICAgIGFzc2VydCBzZWNvbmRzID09IGludChzZWNvbmRzKQogICAgICAgICAgICBzZWNvbmRzID0gaW50KHNlY29uZHMpCiAgICAgICAgICAgIHNlY29uZHNmcmFjICs9IGRheXNlY29uZHNmcmFjCiAgICAgICAgICAgIGFzc2VydCBhYnMoc2Vjb25kc2ZyYWMpIDw9IDIuMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlY29uZHNmcmFjID0gZGF5c2Vjb25kc2ZyYWMKICAgICAgICAjIGRheXNlY29uZHNmcmFjIGlzbid0IHJlZmVyZW5jZWQgYWdhaW4KICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShzZWNvbmRzZnJhYywgZmxvYXQpCiAgICAgICAgYXNzZXJ0IGFicyhzZWNvbmRzZnJhYykgPD0gMi4wCgogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKHNlY29uZHMsIGludCkKICAgICAgICBkYXlzLCBzZWNvbmRzID0gZGl2bW9kKHNlY29uZHMsIDI0KjM2MDApCiAgICAgICAgZCArPSBkYXlzCiAgICAgICAgcyArPSBpbnQoc2Vjb25kcykgICAgIyBjYW4ndCBvdmVyZmxvdwogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKHMsIGludCkKICAgICAgICBhc3NlcnQgYWJzKHMpIDw9IDIgKiAyNCAqIDM2MDAKICAgICAgICAjIHNlY29uZHMgaXNuJ3QgcmVmZXJlbmNlZCBhZ2FpbiBiZWZvcmUgcmVkZWZpbml0aW9uCgogICAgICAgIHVzZG91YmxlID0gc2Vjb25kc2ZyYWMgKiAxZTYKICAgICAgICBhc3NlcnQgYWJzKHVzZG91YmxlKSA8IDIuMWU2ICAgICMgZXhhY3QgdmFsdWUgbm90IGNyaXRpY2FsCiAgICAgICAgIyBzZWNvbmRzZnJhYyBpc24ndCByZWZlcmVuY2VkIGFnYWluCgogICAgICAgIGlmIGlzaW5zdGFuY2UobWljcm9zZWNvbmRzLCBmbG9hdCk6CiAgICAgICAgICAgIG1pY3Jvc2Vjb25kcyArPSB1c2RvdWJsZQogICAgICAgICAgICBtaWNyb3NlY29uZHMgPSByb3VuZChtaWNyb3NlY29uZHMsIDApCiAgICAgICAgICAgIHNlY29uZHMsIG1pY3Jvc2Vjb25kcyA9IGRpdm1vZChtaWNyb3NlY29uZHMsIDFlNikKICAgICAgICAgICAgYXNzZXJ0IG1pY3Jvc2Vjb25kcyA9PSBpbnQobWljcm9zZWNvbmRzKQogICAgICAgICAgICBhc3NlcnQgc2Vjb25kcyA9PSBpbnQoc2Vjb25kcykKICAgICAgICAgICAgZGF5cywgc2Vjb25kcyA9IGRpdm1vZChzZWNvbmRzLCAyNC4qMzYwMC4pCiAgICAgICAgICAgIGFzc2VydCBkYXlzID09IGludChkYXlzKQogICAgICAgICAgICBhc3NlcnQgc2Vjb25kcyA9PSBpbnQoc2Vjb25kcykKICAgICAgICAgICAgZCArPSBpbnQoZGF5cykKICAgICAgICAgICAgcyArPSBpbnQoc2Vjb25kcykgICAjIGNhbid0IG92ZXJmbG93CiAgICAgICAgICAgIGFzc2VydCBpc2luc3RhbmNlKHMsIGludCkKICAgICAgICAgICAgYXNzZXJ0IGFicyhzKSA8PSAzICogMjQgKiAzNjAwCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2Vjb25kcywgbWljcm9zZWNvbmRzID0gZGl2bW9kKG1pY3Jvc2Vjb25kcywgMTAwMDAwMCkKICAgICAgICAgICAgZGF5cywgc2Vjb25kcyA9IGRpdm1vZChzZWNvbmRzLCAyNCozNjAwKQogICAgICAgICAgICBkICs9IGRheXMKICAgICAgICAgICAgcyArPSBpbnQoc2Vjb25kcykgICAgIyBjYW4ndCBvdmVyZmxvdwogICAgICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShzLCBpbnQpCiAgICAgICAgICAgIGFzc2VydCBhYnMocykgPD0gMyAqIDI0ICogMzYwMAogICAgICAgICAgICBtaWNyb3NlY29uZHMgPSBmbG9hdChtaWNyb3NlY29uZHMpCiAgICAgICAgICAgIG1pY3Jvc2Vjb25kcyArPSB1c2RvdWJsZQogICAgICAgICAgICBtaWNyb3NlY29uZHMgPSByb3VuZChtaWNyb3NlY29uZHMsIDApCiAgICAgICAgYXNzZXJ0IGFicyhzKSA8PSAzICogMjQgKiAzNjAwCiAgICAgICAgYXNzZXJ0IGFicyhtaWNyb3NlY29uZHMpIDwgMy4xZTYKCiAgICAgICAgIyBKdXN0IGEgbGl0dGxlIGJpdCBvZiBjYXJyeWluZyBwb3NzaWJsZSBmb3IgbWljcm9zZWNvbmRzIGFuZCBzZWNvbmRzLgogICAgICAgICNpcyB0aGUgYmVsb3cgdHdvIHN0YXRlbWVudHMgZXZlbiBwb3NzaWJsZT8KICAgICAgICAjYXNzZXJ0IGlzaW5zdGFuY2UobWljcm9zZWNvbmRzLCBmbG9hdCkKICAgICAgICAjYXNzZXJ0IGludChtaWNyb3NlY29uZHMpID09IG1pY3Jvc2Vjb25kcwogICAgICAgIHVzID0gaW50KG1pY3Jvc2Vjb25kcykKICAgICAgICBzZWNvbmRzLCB1cyA9IGRpdm1vZCh1cywgMTAwMDAwMCkKICAgICAgICBzICs9IHNlY29uZHMgICAgIyBjYW50J3Qgb3ZlcmZsb3cKICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShzLCBpbnQpCiAgICAgICAgZGF5cywgcyA9IGRpdm1vZChzLCAyNCozNjAwKQogICAgICAgIGQgKz0gZGF5cwoKICAgICAgICBhc3NlcnQgaXNpbnN0YW5jZShkLCBpbnQpCiAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2UocywgaW50KSBhbmQgMCA8PSBzIDwgMjQqMzYwMAogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKHVzLCBpbnQpIGFuZCAwIDw9IHVzIDwgMTAwMDAwMAoKICAgICAgICBzZWxmID0gb2JqZWN0Ll9fbmV3X18oY2xzKQoKICAgICAgICBzZWxmLl9kYXlzID0gZAogICAgICAgIHNlbGYuX3NlY29uZHMgPSBzCiAgICAgICAgc2VsZi5fbWljcm9zZWNvbmRzID0gdXMKCiAgICAgICAgaWYgYWJzKGQpID4gOTk5OTk5OTk5OgogICAgICAgICAgICByYWlzZSBPdmVyZmxvd0Vycm9yKCJ0aW1lZGVsdGEgIyBvZiBkYXlzIGlzIHRvbyBsYXJnZTogJWQiICUgZCkKCiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgaWYgc2VsZi5fbWljcm9zZWNvbmRzOgogICAgICAgICAgICByZXR1cm4gIiVzKCVkLCAlZCwgJWQpIiAlICgnZGF0ZXRpbWUuJyArIHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9kYXlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZWNvbmRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9taWNyb3NlY29uZHMpCiAgICAgICAgaWYgc2VsZi5fc2Vjb25kczoKICAgICAgICAgICAgcmV0dXJuICIlcyglZCwgJWQpIiAlICgnZGF0ZXRpbWUuJyArIHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2RheXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2Vjb25kcykKICAgICAgICByZXR1cm4gIiVzKCVkKSIgJSAoJ2RhdGV0aW1lLicgKyBzZWxmLl9fY2xhc3NfXy5fX25hbWVfXywgc2VsZi5fZGF5cykKCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICBtbSwgc3MgPSBkaXZtb2Qoc2VsZi5fc2Vjb25kcywgNjApCiAgICAgICAgaGgsIG1tID0gZGl2bW9kKG1tLCA2MCkKICAgICAgICBzID0gIiVkOiUwMmQ6JTAyZCIgJSAoaGgsIG1tLCBzcykKICAgICAgICBpZiBzZWxmLl9kYXlzOgogICAgICAgICAgICBkZWYgcGx1cmFsKG4pOgogICAgICAgICAgICAgICAgcmV0dXJuIG4sIGFicyhuKSAhPSAxIGFuZCAicyIgb3IgIiIKICAgICAgICAgICAgcyA9ICgiJWQgZGF5JXMsICIgJSBwbHVyYWwoc2VsZi5fZGF5cykpICsgcwogICAgICAgIGlmIHNlbGYuX21pY3Jvc2Vjb25kczoKICAgICAgICAgICAgcyA9IHMgKyAiLiUwNmQiICUgc2VsZi5fbWljcm9zZWNvbmRzCiAgICAgICAgcmV0dXJuIHMKCiAgICBkZWYgdG90YWxfc2Vjb25kcyhzZWxmKToKICAgICAgICAiIiJUb3RhbCBzZWNvbmRzIGluIHRoZSBkdXJhdGlvbi4iIiIKICAgICAgICByZXR1cm4gKChzZWxmLmRheXMgKiA4NjQwMCArIHNlbGYuc2Vjb25kcykqMTAqKjYgKwogICAgICAgICAgICAgICAgc2VsZi5taWNyb3NlY29uZHMpIC8gMTAqKjYKCiAgICAjIFJlYWQtb25seSBmaWVsZCBhY2Nlc3NvcnMKICAgIEBwcm9wZXJ0eQogICAgZGVmIGRheXMoc2VsZik6CiAgICAgICAgIiIiZGF5cyIiIgogICAgICAgIHJldHVybiBzZWxmLl9kYXlzCgogICAgQHByb3BlcnR5CiAgICBkZWYgc2Vjb25kcyhzZWxmKToKICAgICAgICAiIiJzZWNvbmRzIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3NlY29uZHMKCiAgICBAcHJvcGVydHkKICAgIGRlZiBtaWNyb3NlY29uZHMoc2VsZik6CiAgICAgICAgIiIibWljcm9zZWNvbmRzIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX21pY3Jvc2Vjb25kcwoKICAgIGRlZiBfX2FkZF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCB0aW1lZGVsdGEpOgogICAgICAgICAgICAjIGZvciBDUHl0aG9uIGNvbXBhdGliaWxpdHksIHdlIGNhbm5vdCB1c2UKICAgICAgICAgICAgIyBvdXIgX19jbGFzc19fIGhlcmUsIGJ1dCBuZWVkIGEgcmVhbCB0aW1lZGVsdGEKICAgICAgICAgICAgcmV0dXJuIHRpbWVkZWx0YShzZWxmLl9kYXlzICsgb3RoZXIuX2RheXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2Vjb25kcyArIG90aGVyLl9zZWNvbmRzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kcyArIG90aGVyLl9taWNyb3NlY29uZHMpCiAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCgogICAgX19yYWRkX18gPSBfX2FkZF9fCgogICAgZGVmIF9fc3ViX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIHRpbWVkZWx0YSk6CiAgICAgICAgICAgICMgZm9yIENQeXRob24gY29tcGF0aWJpbGl0eSwgd2UgY2Fubm90IHVzZQogICAgICAgICAgICAjIG91ciBfX2NsYXNzX18gaGVyZSwgYnV0IG5lZWQgYSByZWFsIHRpbWVkZWx0YQogICAgICAgICAgICByZXR1cm4gdGltZWRlbHRhKHNlbGYuX2RheXMgLSBvdGhlci5fZGF5cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZWNvbmRzIC0gb3RoZXIuX3NlY29uZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fbWljcm9zZWNvbmRzIC0gb3RoZXIuX21pY3Jvc2Vjb25kcykKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiAgICBkZWYgX19yc3ViX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIHRpbWVkZWx0YSk6CiAgICAgICAgICAgIHJldHVybiAtc2VsZiArIG90aGVyCiAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCgogICAgZGVmIF9fbmVnX18oc2VsZik6CiAgICAgICAgIyBmb3IgQ1B5dGhvbiBjb21wYXRpYmlsaXR5LCB3ZSBjYW5ub3QgdXNlCiAgICAgICAgIyBvdXIgX19jbGFzc19fIGhlcmUsIGJ1dCBuZWVkIGEgcmVhbCB0aW1lZGVsdGEKICAgICAgICByZXR1cm4gdGltZWRlbHRhKC1zZWxmLl9kYXlzLAogICAgICAgICAgICAgICAgICAgICAgICAgLXNlbGYuX3NlY29uZHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAtc2VsZi5fbWljcm9zZWNvbmRzKQoKICAgIGRlZiBfX3Bvc19fKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fYWJzX18oc2VsZik6CiAgICAgICAgaWYgc2VsZi5fZGF5cyA8IDA6CiAgICAgICAgICAgIHJldHVybiAtc2VsZgogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fbXVsX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIGludCk6CiAgICAgICAgICAgICMgZm9yIENQeXRob24gY29tcGF0aWJpbGl0eSwgd2UgY2Fubm90IHVzZQogICAgICAgICAgICAjIG91ciBfX2NsYXNzX18gaGVyZSwgYnV0IG5lZWQgYSByZWFsIHRpbWVkZWx0YQogICAgICAgICAgICByZXR1cm4gdGltZWRlbHRhKHNlbGYuX2RheXMgKiBvdGhlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9zZWNvbmRzICogb3RoZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fbWljcm9zZWNvbmRzICogb3RoZXIpCiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgZmxvYXQpOgogICAgICAgICAgICBhLCBiID0gb3RoZXIuYXNfaW50ZWdlcl9yYXRpbygpCiAgICAgICAgICAgIHJldHVybiBzZWxmICogYSAvIGIKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiAgICBfX3JtdWxfXyA9IF9fbXVsX18KCiAgICBkZWYgX3RvX21pY3Jvc2Vjb25kcyhzZWxmKToKICAgICAgICByZXR1cm4gKChzZWxmLl9kYXlzICogKDI0KjM2MDApICsgc2VsZi5fc2Vjb25kcykgKiAxMDAwMDAwICsKICAgICAgICAgICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kcykKCiAgICBkZWYgX19mbG9vcmRpdl9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgKGludCwgdGltZWRlbHRhKSk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHVzZWMgPSBzZWxmLl90b19taWNyb3NlY29uZHMoKQogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIHRpbWVkZWx0YSk6CiAgICAgICAgICAgIHJldHVybiB1c2VjIC8vIG90aGVyLl90b19taWNyb3NlY29uZHMoKQogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIGludCk6CiAgICAgICAgICAgIHJldHVybiB0aW1lZGVsdGEoMCwgMCwgdXNlYyAvLyBvdGhlcikKCiAgICBkZWYgX190cnVlZGl2X18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCAoaW50LCBmbG9hdCwgdGltZWRlbHRhKSk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHVzZWMgPSBzZWxmLl90b19taWNyb3NlY29uZHMoKQogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIHRpbWVkZWx0YSk6CiAgICAgICAgICAgIHJldHVybiB1c2VjIC8gb3RoZXIuX3RvX21pY3Jvc2Vjb25kcygpCiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgaW50KToKICAgICAgICAgICAgcmV0dXJuIHRpbWVkZWx0YSgwLCAwLCB1c2VjIC8gb3RoZXIpCiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgZmxvYXQpOgogICAgICAgICAgICBhLCBiID0gb3RoZXIuYXNfaW50ZWdlcl9yYXRpbygpCiAgICAgICAgICAgIHJldHVybiB0aW1lZGVsdGEoMCwgMCwgYiAqIHVzZWMgLyBhKQoKICAgIGRlZiBfX21vZF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCB0aW1lZGVsdGEpOgogICAgICAgICAgICByID0gc2VsZi5fdG9fbWljcm9zZWNvbmRzKCkgJSBvdGhlci5fdG9fbWljcm9zZWNvbmRzKCkKICAgICAgICAgICAgcmV0dXJuIHRpbWVkZWx0YSgwLCAwLCByKQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKICAgIGRlZiBfX2Rpdm1vZF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCB0aW1lZGVsdGEpOgogICAgICAgICAgICBxLCByID0gZGl2bW9kKHNlbGYuX3RvX21pY3Jvc2Vjb25kcygpLAogICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyLl90b19taWNyb3NlY29uZHMoKSkKICAgICAgICAgICAgcmV0dXJuIHEsIHRpbWVkZWx0YSgwLCAwLCByKQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKICAgICMgQ29tcGFyaXNvbnMgb2YgdGltZWRlbHRhIG9iamVjdHMgd2l0aCBvdGhlci4KCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCB0aW1lZGVsdGEpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSA9PSAwCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9fbmVfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgdGltZWRlbHRhKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NtcChvdGhlcikgIT0gMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIF9fbGVfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgdGltZWRlbHRhKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NtcChvdGhlcikgPD0gMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIF9jbXBlcnJvcihzZWxmLCBvdGhlcikKCiAgICBkZWYgX19sdF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCB0aW1lZGVsdGEpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSA8IDAKICAgICAgICBlbHNlOgogICAgICAgICAgICBfY21wZXJyb3Ioc2VsZiwgb3RoZXIpCgogICAgZGVmIF9fZ2VfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgdGltZWRlbHRhKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NtcChvdGhlcikgPj0gMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIF9jbXBlcnJvcihzZWxmLCBvdGhlcikKCiAgICBkZWYgX19ndF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCB0aW1lZGVsdGEpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSA+IDAKICAgICAgICBlbHNlOgogICAgICAgICAgICBfY21wZXJyb3Ioc2VsZiwgb3RoZXIpCgogICAgZGVmIF9jbXAoc2VsZiwgb3RoZXIpOgogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKG90aGVyLCB0aW1lZGVsdGEpCiAgICAgICAgI2ZpeG1lIGJyeXRob24KICAgICAgICAjcmV0dXJuIF9jbXAoc2VsZi5fZ2V0c3RhdGUoKSwgb3RoZXIuX2dldHN0YXRlKCkpCiAgICAgICAgcmV0dXJuIF9zdGF0ZV9jbXAoc2VsZi5fZ2V0c3RhdGUoKSwgb3RoZXIuX2dldHN0YXRlKCkpCgogICAgZGVmIF9faGFzaF9fKHNlbGYpOgogICAgICAgIHJldHVybiBoYXNoKHNlbGYuX2dldHN0YXRlKCkpCgogICAgZGVmIF9fYm9vbF9fKHNlbGYpOgogICAgICAgIHJldHVybiAoc2VsZi5fZGF5cyAhPSAwIG9yCiAgICAgICAgICAgICAgICBzZWxmLl9zZWNvbmRzICE9IDAgb3IKICAgICAgICAgICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kcyAhPSAwKQoKICAgICMgUGlja2xlIHN1cHBvcnQuCgogICAgZGVmIF9nZXRzdGF0ZShzZWxmKToKICAgICAgICByZXR1cm4gKHNlbGYuX2RheXMsIHNlbGYuX3NlY29uZHMsIHNlbGYuX21pY3Jvc2Vjb25kcykKCiAgICBkZWYgX19yZWR1Y2VfXyhzZWxmKToKICAgICAgICByZXR1cm4gKHNlbGYuX19jbGFzc19fLCBzZWxmLl9nZXRzdGF0ZSgpKQoKdGltZWRlbHRhLm1pbiA9IHRpbWVkZWx0YSgtOTk5OTk5OTk5KQp0aW1lZGVsdGEubWF4ID0gdGltZWRlbHRhKGRheXM9OTk5OTk5OTk5LCBob3Vycz0yMywgbWludXRlcz01OSwgc2Vjb25kcz01OSwKICAgICAgICAgICAgICAgICAgICAgICAgICBtaWNyb3NlY29uZHM9OTk5OTk5KQp0aW1lZGVsdGEucmVzb2x1dGlvbiA9IHRpbWVkZWx0YShtaWNyb3NlY29uZHM9MSkKCmNsYXNzIGRhdGU6CiAgICAiIiJDb25jcmV0ZSBkYXRlIHR5cGUuCgogICAgQ29uc3RydWN0b3JzOgoKICAgIF9fbmV3X18oKQogICAgZnJvbXRpbWVzdGFtcCgpCiAgICB0b2RheSgpCiAgICBmcm9tb3JkaW5hbCgpCgogICAgT3BlcmF0b3JzOgoKICAgIF9fcmVwcl9fLCBfX3N0cl9fCiAgICBfX2NtcF9fLCBfX2hhc2hfXwogICAgX19hZGRfXywgX19yYWRkX18sIF9fc3ViX18gKGFkZC9yYWRkIG9ubHkgd2l0aCB0aW1lZGVsdGEgYXJnKQoKICAgIE1ldGhvZHM6CgogICAgdGltZXR1cGxlKCkKICAgIHRvb3JkaW5hbCgpCiAgICB3ZWVrZGF5KCkKICAgIGlzb3dlZWtkYXkoKSwgaXNvY2FsZW5kYXIoKSwgaXNvZm9ybWF0KCkKICAgIGN0aW1lKCkKICAgIHN0cmZ0aW1lKCkKCiAgICBQcm9wZXJ0aWVzIChyZWFkb25seSk6CiAgICB5ZWFyLCBtb250aCwgZGF5CiAgICAiIiIKICAgIF9fc2xvdHNfXyA9ICdfeWVhcicsICdfbW9udGgnLCAnX2RheScKCiAgICBkZWYgX19uZXdfXyhjbHMsIHllYXIsIG1vbnRoPU5vbmUsIGRheT1Ob25lKToKICAgICAgICAiIiJDb25zdHJ1Y3Rvci4KCiAgICAgICAgQXJndW1lbnRzOgoKICAgICAgICB5ZWFyLCBtb250aCwgZGF5IChyZXF1aXJlZCwgYmFzZSAxKQogICAgICAgICIiIgogICAgICAgIGlmIChpc2luc3RhbmNlKHllYXIsIGJ5dGVzKSBhbmQgbGVuKHllYXIpID09IDQgYW5kCiAgICAgICAgICAgIDEgPD0geWVhclsyXSA8PSAxMiBhbmQgbW9udGggaXMgTm9uZSk6ICAjIE1vbnRoIGlzIHNhbmUKICAgICAgICAgICAgIyBQaWNrbGUgc3VwcG9ydAogICAgICAgICAgICBzZWxmID0gb2JqZWN0Ll9fbmV3X18oY2xzKQogICAgICAgICAgICBzZWxmLl9fc2V0c3RhdGUoeWVhcikKICAgICAgICAgICAgcmV0dXJuIHNlbGYKICAgICAgICBfY2hlY2tfZGF0ZV9maWVsZHMoeWVhciwgbW9udGgsIGRheSkKICAgICAgICBzZWxmID0gb2JqZWN0Ll9fbmV3X18oY2xzKQogICAgICAgIHNlbGYuX3llYXIgPSB5ZWFyCiAgICAgICAgc2VsZi5fbW9udGggPSBtb250aAogICAgICAgIHNlbGYuX2RheSA9IGRheQogICAgICAgIHJldHVybiBzZWxmCgogICAgIyBBZGRpdGlvbmFsIGNvbnN0cnVjdG9ycwoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb210aW1lc3RhbXAoY2xzLCB0KToKICAgICAgICAiQ29uc3RydWN0IGEgZGF0ZSBmcm9tIGEgUE9TSVggdGltZXN0YW1wIChsaWtlIHRpbWUudGltZSgpKS4iCiAgICAgICAgeSwgbSwgZCwgaGgsIG1tLCBzcywgd2Vla2RheSwgamRheSwgZHN0ID0gX3RpbWUubG9jYWx0aW1lKHQpCiAgICAgICAgcmV0dXJuIGNscyh5LCBtLCBkKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIHRvZGF5KGNscyk6CiAgICAgICAgIkNvbnN0cnVjdCBhIGRhdGUgZnJvbSB0aW1lLnRpbWUoKS4iCiAgICAgICAgdCA9IF90aW1lLnRpbWUoKQogICAgICAgIHJldHVybiBjbHMuZnJvbXRpbWVzdGFtcCh0KQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21vcmRpbmFsKGNscywgbik6CiAgICAgICAgIiIiQ29udHJ1Y3QgYSBkYXRlIGZyb20gYSBwcm9sZXB0aWMgR3JlZ29yaWFuIG9yZGluYWwuCgogICAgICAgIEphbnVhcnkgMSBvZiB5ZWFyIDEgaXMgZGF5IDEuICBPbmx5IHRoZSB5ZWFyLCBtb250aCBhbmQgZGF5IGFyZQogICAgICAgIG5vbi16ZXJvIGluIHRoZSByZXN1bHQuCiAgICAgICAgIiIiCiAgICAgICAgeSwgbSwgZCA9IF9vcmQyeW1kKG4pCiAgICAgICAgcmV0dXJuIGNscyh5LCBtLCBkKQoKICAgICMgQ29udmVyc2lvbnMgdG8gc3RyaW5nCgogICAgZGVmIF9fcmVwcl9fKHNlbGYpOgogICAgICAgICIiIkNvbnZlcnQgdG8gZm9ybWFsIHN0cmluZywgZm9yIHJlcHIoKS4KCiAgICAgICAgPj4+IGR0ID0gZGF0ZXRpbWUoMjAxMCwgMSwgMSkKICAgICAgICA+Pj4gcmVwcihkdCkKICAgICAgICAnZGF0ZXRpbWUuZGF0ZXRpbWUoMjAxMCwgMSwgMSwgMCwgMCknCgogICAgICAgID4+PiBkdCA9IGRhdGV0aW1lKDIwMTAsIDEsIDEsIHR6aW5mbz10aW1lem9uZS51dGMpCiAgICAgICAgPj4+IHJlcHIoZHQpCiAgICAgICAgJ2RhdGV0aW1lLmRhdGV0aW1lKDIwMTAsIDEsIDEsIDAsIDAsIHR6aW5mbz1kYXRldGltZS50aW1lem9uZS51dGMpJwogICAgICAgICIiIgogICAgICAgIHJldHVybiAiJXMoJWQsICVkLCAlZCkiICUgKCdkYXRldGltZS4nICsgc2VsZi5fX2NsYXNzX18uX19uYW1lX18sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5feWVhciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9tb250aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9kYXkpCiAgICAjIFhYWCBUaGVzZSBzaG91bGRuJ3QgZGVwZW5kIG9uIHRpbWUubG9jYWx0aW1lKCksIGJlY2F1c2UgdGhhdAogICAgIyBjbGlwcyB0aGUgdXNhYmxlIGRhdGVzIHRvIFsxOTcwIC4uIDIwMzgpLiAgQXQgbGVhc3QgY3RpbWUoKSBpcwogICAgIyBlYXNpbHkgZG9uZSB3aXRob3V0IHVzaW5nIHN0cmZ0aW1lKCkgLS0gdGhhdCdzIGJldHRlciB0b28gYmVjYXVzZQogICAgIyBzdHJmdGltZSgiJWMiLCAuLi4pIGlzIGxvY2FsZSBzcGVjaWZpYy4KCgogICAgZGVmIGN0aW1lKHNlbGYpOgogICAgICAgICJSZXR1cm4gY3RpbWUoKSBzdHlsZSBzdHJpbmcuIgogICAgICAgIHdlZWtkYXkgPSBzZWxmLnRvb3JkaW5hbCgpICUgNyBvciA3CiAgICAgICAgcmV0dXJuICIlcyAlcyAlMmQgMDA6MDA6MDAgJTA0ZCIgJSAoCiAgICAgICAgICAgIF9EQVlOQU1FU1t3ZWVrZGF5XSwKICAgICAgICAgICAgX01PTlRITkFNRVNbc2VsZi5fbW9udGhdLAogICAgICAgICAgICBzZWxmLl9kYXksIHNlbGYuX3llYXIpCgogICAgZGVmIHN0cmZ0aW1lKHNlbGYsIGZtdCk6CiAgICAgICAgIkZvcm1hdCB1c2luZyBzdHJmdGltZSgpLiIKICAgICAgICByZXR1cm4gX3dyYXBfc3RyZnRpbWUoc2VsZiwgZm10LCBzZWxmLnRpbWV0dXBsZSgpKQoKICAgIGRlZiBfX2Zvcm1hdF9fKHNlbGYsIGZtdCk6CiAgICAgICAgaWYgbGVuKGZtdCkgIT0gMDoKICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3RyZnRpbWUoZm10KQogICAgICAgIHJldHVybiBzdHIoc2VsZikKCiAgICBkZWYgaXNvZm9ybWF0KHNlbGYpOgogICAgICAgICIiIlJldHVybiB0aGUgZGF0ZSBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIElTTy4KCiAgICAgICAgVGhpcyBpcyAnWVlZWS1NTS1ERCcuCgogICAgICAgIFJlZmVyZW5jZXM6CiAgICAgICAgLSBodHRwOi8vd3d3LnczLm9yZy9UUi9OT1RFLWRhdGV0aW1lCiAgICAgICAgLSBodHRwOi8vd3d3LmNsLmNhbS5hYy51ay9+bWdrMjUvaXNvLXRpbWUuaHRtbAogICAgICAgICIiIgogICAgICAgIHJldHVybiAiJTA0ZC0lMDJkLSUwMmQiICUgKHNlbGYuX3llYXIsIHNlbGYuX21vbnRoLCBzZWxmLl9kYXkpCgogICAgX19zdHJfXyA9IGlzb2Zvcm1hdAoKICAgICMgUmVhZC1vbmx5IGZpZWxkIGFjY2Vzc29ycwogICAgQHByb3BlcnR5CiAgICBkZWYgeWVhcihzZWxmKToKICAgICAgICAiIiJ5ZWFyICgxLTk5OTkpIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3llYXIKCiAgICBAcHJvcGVydHkKICAgIGRlZiBtb250aChzZWxmKToKICAgICAgICAiIiJtb250aCAoMS0xMikiIiIKICAgICAgICByZXR1cm4gc2VsZi5fbW9udGgKCiAgICBAcHJvcGVydHkKICAgIGRlZiBkYXkoc2VsZik6CiAgICAgICAgIiIiZGF5ICgxLTMxKSIiIgogICAgICAgIHJldHVybiBzZWxmLl9kYXkKCiAgICAjIFN0YW5kYXJkIGNvbnZlcnNpb25zLCBfX2NtcF9fLCBfX2hhc2hfXyAoYW5kIGhlbHBlcnMpCgogICAgZGVmIHRpbWV0dXBsZShzZWxmKToKICAgICAgICAiUmV0dXJuIGxvY2FsIHRpbWUgdHVwbGUgY29tcGF0aWJsZSB3aXRoIHRpbWUubG9jYWx0aW1lKCkuIgogICAgICAgIHJldHVybiBfYnVpbGRfc3RydWN0X3RpbWUoc2VsZi5feWVhciwgc2VsZi5fbW9udGgsIHNlbGYuX2RheSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDAsIDAsIC0xKQoKICAgIGRlZiB0b29yZGluYWwoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIHByb2xlcHRpYyBHcmVnb3JpYW4gb3JkaW5hbCBmb3IgdGhlIHllYXIsIG1vbnRoIGFuZCBkYXkuCgogICAgICAgIEphbnVhcnkgMSBvZiB5ZWFyIDEgaXMgZGF5IDEuICBPbmx5IHRoZSB5ZWFyLCBtb250aCBhbmQgZGF5IHZhbHVlcwogICAgICAgIGNvbnRyaWJ1dGUgdG8gdGhlIHJlc3VsdC4KICAgICAgICAiIiIKICAgICAgICByZXR1cm4gX3ltZDJvcmQoc2VsZi5feWVhciwgc2VsZi5fbW9udGgsIHNlbGYuX2RheSkKCiAgICBkZWYgcmVwbGFjZShzZWxmLCB5ZWFyPU5vbmUsIG1vbnRoPU5vbmUsIGRheT1Ob25lKToKICAgICAgICAiIiJSZXR1cm4gYSBuZXcgZGF0ZSB3aXRoIG5ldyB2YWx1ZXMgZm9yIHRoZSBzcGVjaWZpZWQgZmllbGRzLiIiIgogICAgICAgIGlmIHllYXIgaXMgTm9uZToKICAgICAgICAgICAgeWVhciA9IHNlbGYuX3llYXIKICAgICAgICBpZiBtb250aCBpcyBOb25lOgogICAgICAgICAgICBtb250aCA9IHNlbGYuX21vbnRoCiAgICAgICAgaWYgZGF5IGlzIE5vbmU6CiAgICAgICAgICAgIGRheSA9IHNlbGYuX2RheQogICAgICAgIF9jaGVja19kYXRlX2ZpZWxkcyh5ZWFyLCBtb250aCwgZGF5KQogICAgICAgIHJldHVybiBkYXRlKHllYXIsIG1vbnRoLCBkYXkpCgogICAgIyBDb21wYXJpc29ucyBvZiBkYXRlIG9iamVjdHMgd2l0aCBvdGhlci4KCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCBkYXRlKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NtcChvdGhlcikgPT0gMAogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIGRhdGUpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSAhPSAwCiAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCgogICAgZGVmIF9fbGVfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgZGF0ZSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jbXAob3RoZXIpIDw9IDAKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiAgICBkZWYgX19sdF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCBkYXRlKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NtcChvdGhlcikgPCAwCiAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCgogICAgZGVmIF9fZ2VfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgZGF0ZSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jbXAob3RoZXIpID49IDAKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiAgICBkZWYgX19ndF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCBkYXRlKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2NtcChvdGhlcikgPiAwCiAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCgogICAgZGVmIF9jbXAoc2VsZiwgb3RoZXIpOgogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKG90aGVyLCBkYXRlKQogICAgICAgIHksIG0sIGQgPSBzZWxmLl95ZWFyLCBzZWxmLl9tb250aCwgc2VsZi5fZGF5CiAgICAgICAgeTIsIG0yLCBkMiA9IG90aGVyLl95ZWFyLCBvdGhlci5fbW9udGgsIG90aGVyLl9kYXkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNyZXR1cm4gX2NtcCgoeSwgbSwgZCksICh5MiwgbTIsIGQyKSkKICAgICAgICByZXR1cm4gX3N0YXRlX2NtcCgoeSwgbSwgZCksICh5MiwgbTIsIGQyKSkKCiAgICBkZWYgX19oYXNoX18oc2VsZik6CiAgICAgICAgIkhhc2guIgogICAgICAgIHJldHVybiBoYXNoKHNlbGYuX2dldHN0YXRlKCkpCgogICAgIyBDb21wdXRhdGlvbnMKCiAgICBkZWYgX19hZGRfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgIkFkZCBhIGRhdGUgdG8gYSB0aW1lZGVsdGEuIgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIHRpbWVkZWx0YSk6CiAgICAgICAgICAgIG8gPSBzZWxmLnRvb3JkaW5hbCgpICsgb3RoZXIuZGF5cwogICAgICAgICAgICBpZiAwIDwgbyA8PSBfTUFYT1JESU5BTDoKICAgICAgICAgICAgICAgIHJldHVybiBkYXRlLmZyb21vcmRpbmFsKG8pCiAgICAgICAgICAgIHJhaXNlIE92ZXJmbG93RXJyb3IoInJlc3VsdCBvdXQgb2YgcmFuZ2UiKQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKICAgIF9fcmFkZF9fID0gX19hZGRfXwoKICAgIGRlZiBfX3N1Yl9fKHNlbGYsIG90aGVyKToKICAgICAgICAiIiJTdWJ0cmFjdCB0d28gZGF0ZXMsIG9yIGEgZGF0ZSBhbmQgYSB0aW1lZGVsdGEuIiIiCiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgdGltZWRlbHRhKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYgKyB0aW1lZGVsdGEoLW90aGVyLmRheXMpCiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgZGF0ZSk6CiAgICAgICAgICAgIGRheXMxID0gc2VsZi50b29yZGluYWwoKQogICAgICAgICAgICBkYXlzMiA9IG90aGVyLnRvb3JkaW5hbCgpCiAgICAgICAgICAgIHJldHVybiB0aW1lZGVsdGEoZGF5czEgLSBkYXlzMikKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiAgICBkZWYgd2Vla2RheShzZWxmKToKICAgICAgICAiUmV0dXJuIGRheSBvZiB0aGUgd2Vlaywgd2hlcmUgTW9uZGF5ID09IDAgLi4uIFN1bmRheSA9PSA2LiIKICAgICAgICByZXR1cm4gKHNlbGYudG9vcmRpbmFsKCkgKyA2KSAlIDcKCiAgICAjIERheS1vZi10aGUtd2VlayBhbmQgd2Vlay1vZi10aGUteWVhciwgYWNjb3JkaW5nIHRvIElTTwoKICAgIGRlZiBpc293ZWVrZGF5KHNlbGYpOgogICAgICAgICJSZXR1cm4gZGF5IG9mIHRoZSB3ZWVrLCB3aGVyZSBNb25kYXkgPT0gMSAuLi4gU3VuZGF5ID09IDcuIgogICAgICAgICMgMS1KYW4tMDAwMSBpcyBhIE1vbmRheQogICAgICAgIHJldHVybiBzZWxmLnRvb3JkaW5hbCgpICUgNyBvciA3CgogICAgZGVmIGlzb2NhbGVuZGFyKHNlbGYpOgogICAgICAgICIiIlJldHVybiBhIDMtdHVwbGUgY29udGFpbmluZyBJU08geWVhciwgd2VlayBudW1iZXIsIGFuZCB3ZWVrZGF5LgoKICAgICAgICBUaGUgZmlyc3QgSVNPIHdlZWsgb2YgdGhlIHllYXIgaXMgdGhlIChNb24tU3VuKSB3ZWVrCiAgICAgICAgY29udGFpbmluZyB0aGUgeWVhcidzIGZpcnN0IFRodXJzZGF5OyBldmVyeXRoaW5nIGVsc2UgZGVyaXZlcwogICAgICAgIGZyb20gdGhhdC4KCiAgICAgICAgVGhlIGZpcnN0IHdlZWsgaXMgMTsgTW9uZGF5IGlzIDEgLi4uIFN1bmRheSBpcyA3LgoKICAgICAgICBJU08gY2FsZW5kYXIgYWxnb3JpdGhtIHRha2VuIGZyb20KICAgICAgICBodHRwOi8vd3d3LnBoeXMudXUubmwvfnZnZW50L2NhbGVuZGFyL2lzb2NhbGVuZGFyLmh0bQogICAgICAgICIiIgogICAgICAgIHllYXIgPSBzZWxmLl95ZWFyCiAgICAgICAgd2VlazFtb25kYXkgPSBfaXNvd2VlazFtb25kYXkoeWVhcikKICAgICAgICB0b2RheSA9IF95bWQyb3JkKHNlbGYuX3llYXIsIHNlbGYuX21vbnRoLCBzZWxmLl9kYXkpCiAgICAgICAgIyBJbnRlcm5hbGx5LCB3ZWVrIGFuZCBkYXkgaGF2ZSBvcmlnaW4gMAogICAgICAgIHdlZWssIGRheSA9IGRpdm1vZCh0b2RheSAtIHdlZWsxbW9uZGF5LCA3KQogICAgICAgIGlmIHdlZWsgPCAwOgogICAgICAgICAgICB5ZWFyIC09IDEKICAgICAgICAgICAgd2VlazFtb25kYXkgPSBfaXNvd2VlazFtb25kYXkoeWVhcikKICAgICAgICAgICAgd2VlaywgZGF5ID0gZGl2bW9kKHRvZGF5IC0gd2VlazFtb25kYXksIDcpCiAgICAgICAgZWxpZiB3ZWVrID49IDUyOgogICAgICAgICAgICBpZiB0b2RheSA+PSBfaXNvd2VlazFtb25kYXkoeWVhcisxKToKICAgICAgICAgICAgICAgIHllYXIgKz0gMQogICAgICAgICAgICAgICAgd2VlayA9IDAKICAgICAgICByZXR1cm4geWVhciwgd2VlaysxLCBkYXkrMQoKICAgICMgUGlja2xlIHN1cHBvcnQuCgogICAgZGVmIF9nZXRzdGF0ZShzZWxmKToKICAgICAgICB5aGksIHlsbyA9IGRpdm1vZChzZWxmLl95ZWFyLCAyNTYpCiAgICAgICAgcmV0dXJuIGJ5dGVzKFt5aGksIHlsbywgc2VsZi5fbW9udGgsIHNlbGYuX2RheV0pLAoKICAgIGRlZiBfX3NldHN0YXRlKHNlbGYsIHN0cmluZyk6CiAgICAgICAgaWYgbGVuKHN0cmluZykgIT0gNCBvciBub3QgKDEgPD0gc3RyaW5nWzJdIDw9IDEyKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJub3QgZW5vdWdoIGFyZ3VtZW50cyIpCiAgICAgICAgeWhpLCB5bG8sIHNlbGYuX21vbnRoLCBzZWxmLl9kYXkgPSBzdHJpbmcKICAgICAgICBzZWxmLl95ZWFyID0geWhpICogMjU2ICsgeWxvCgogICAgZGVmIF9fcmVkdWNlX18oc2VsZik6CiAgICAgICAgcmV0dXJuIChzZWxmLl9fY2xhc3NfXywgc2VsZi5fZ2V0c3RhdGUoKSkKCl9kYXRlX2NsYXNzID0gZGF0ZSAgIyBzbyBmdW5jdGlvbnMgdy8gYXJncyBuYW1lZCAiZGF0ZSIgY2FuIGdldCBhdCB0aGUgY2xhc3MKCmRhdGUubWluID0gZGF0ZSgxLCAxLCAxKQpkYXRlLm1heCA9IGRhdGUoOTk5OSwgMTIsIDMxKQpkYXRlLnJlc29sdXRpb24gPSB0aW1lZGVsdGEoZGF5cz0xKQoKY2xhc3MgdHppbmZvOgogICAgIiIiQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdGltZSB6b25lIGluZm8gY2xhc3Nlcy4KCiAgICBTdWJjbGFzc2VzIG11c3Qgb3ZlcnJpZGUgdGhlIG5hbWUoKSwgdXRjb2Zmc2V0KCkgYW5kIGRzdCgpIG1ldGhvZHMuCiAgICAiIiIKICAgIF9fc2xvdHNfXyA9ICgpCiAgICBkZWYgdHpuYW1lKHNlbGYsIGR0KToKICAgICAgICAiZGF0ZXRpbWUgLT4gc3RyaW5nIG5hbWUgb2YgdGltZSB6b25lLiIKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCJ0emluZm8gc3ViY2xhc3MgbXVzdCBvdmVycmlkZSB0em5hbWUoKSIpCgogICAgZGVmIHV0Y29mZnNldChzZWxmLCBkdCk6CiAgICAgICAgImRhdGV0aW1lIC0+IG1pbnV0ZXMgZWFzdCBvZiBVVEMgKG5lZ2F0aXZlIGZvciB3ZXN0IG9mIFVUQykiCiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigidHppbmZvIHN1YmNsYXNzIG11c3Qgb3ZlcnJpZGUgdXRjb2Zmc2V0KCkiKQoKICAgIGRlZiBkc3Qoc2VsZiwgZHQpOgogICAgICAgICIiImRhdGV0aW1lIC0+IERTVCBvZmZzZXQgaW4gbWludXRlcyBlYXN0IG9mIFVUQy4KCiAgICAgICAgUmV0dXJuIDAgaWYgRFNUIG5vdCBpbiBlZmZlY3QuICB1dGNvZmZzZXQoKSBtdXN0IGluY2x1ZGUgdGhlIERTVAogICAgICAgIG9mZnNldC4KICAgICAgICAiIiIKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCJ0emluZm8gc3ViY2xhc3MgbXVzdCBvdmVycmlkZSBkc3QoKSIpCgogICAgZGVmIGZyb211dGMoc2VsZiwgZHQpOgogICAgICAgICJkYXRldGltZSBpbiBVVEMgLT4gZGF0ZXRpbWUgaW4gbG9jYWwgdGltZS4iCgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGR0LCBkYXRldGltZSk6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiZnJvbXV0YygpIHJlcXVpcmVzIGEgZGF0ZXRpbWUgYXJndW1lbnQiKQogICAgICAgIGlmIGR0LnR6aW5mbyBpcyBub3Qgc2VsZjoKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiZHQudHppbmZvIGlzIG5vdCBzZWxmIikKCiAgICAgICAgZHRvZmYgPSBkdC51dGNvZmZzZXQoKQogICAgICAgIGlmIGR0b2ZmIGlzIE5vbmU6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoImZyb211dGMoKSByZXF1aXJlcyBhIG5vbi1Ob25lIHV0Y29mZnNldCgpICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVzdWx0IikKCiAgICAgICAgIyBTZWUgdGhlIGxvbmcgY29tbWVudCBibG9jayBhdCB0aGUgZW5kIG9mIHRoaXMgZmlsZSBmb3IgYW4KICAgICAgICAjIGV4cGxhbmF0aW9uIG9mIHRoaXMgYWxnb3JpdGhtLgogICAgICAgIGR0ZHN0ID0gZHQuZHN0KCkKICAgICAgICBpZiBkdGRzdCBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJmcm9tdXRjKCkgcmVxdWlyZXMgYSBub24tTm9uZSBkc3QoKSByZXN1bHQiKQogICAgICAgIGRlbHRhID0gZHRvZmYgLSBkdGRzdAogICAgICAgIGlmIGRlbHRhOgogICAgICAgICAgICBkdCArPSBkZWx0YQogICAgICAgICAgICBkdGRzdCA9IGR0LmRzdCgpCiAgICAgICAgICAgIGlmIGR0ZHN0IGlzIE5vbmU6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJmcm9tdXRjKCk6IGR0LmRzdCBnYXZlIGluY29uc2lzdGVudCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyZXN1bHRzOyBjYW5ub3QgY29udmVydCIpCiAgICAgICAgcmV0dXJuIGR0ICsgZHRkc3QKCiAgICAjIFBpY2tsZSBzdXBwb3J0LgoKICAgIGRlZiBfX3JlZHVjZV9fKHNlbGYpOgogICAgICAgIGdldGluaXRhcmdzID0gZ2V0YXR0cihzZWxmLCAiX19nZXRpbml0YXJnc19fIiwgTm9uZSkKICAgICAgICBpZiBnZXRpbml0YXJnczoKICAgICAgICAgICAgYXJncyA9IGdldGluaXRhcmdzKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBhcmdzID0gKCkKICAgICAgICBnZXRzdGF0ZSA9IGdldGF0dHIoc2VsZiwgIl9fZ2V0c3RhdGVfXyIsIE5vbmUpCiAgICAgICAgaWYgZ2V0c3RhdGU6CiAgICAgICAgICAgIHN0YXRlID0gZ2V0c3RhdGUoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHN0YXRlID0gZ2V0YXR0cihzZWxmLCAiX19kaWN0X18iLCBOb25lKSBvciBOb25lCiAgICAgICAgaWYgc3RhdGUgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIChzZWxmLl9fY2xhc3NfXywgYXJncykKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gKHNlbGYuX19jbGFzc19fLCBhcmdzLCBzdGF0ZSkKCl90emluZm9fY2xhc3MgPSB0emluZm8KCmNsYXNzIHRpbWU6CiAgICAiIiJUaW1lIHdpdGggdGltZSB6b25lLgoKICAgIENvbnN0cnVjdG9yczoKCiAgICBfX25ld19fKCkKCiAgICBPcGVyYXRvcnM6CgogICAgX19yZXByX18sIF9fc3RyX18KICAgIF9fY21wX18sIF9faGFzaF9fCgogICAgTWV0aG9kczoKCiAgICBzdHJmdGltZSgpCiAgICBpc29mb3JtYXQoKQogICAgdXRjb2Zmc2V0KCkKICAgIHR6bmFtZSgpCiAgICBkc3QoKQoKICAgIFByb3BlcnRpZXMgKHJlYWRvbmx5KToKICAgIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWNyb3NlY29uZCwgdHppbmZvCiAgICAiIiIKCiAgICBkZWYgX19uZXdfXyhjbHMsIGhvdXI9MCwgbWludXRlPTAsIHNlY29uZD0wLCBtaWNyb3NlY29uZD0wLCB0emluZm89Tm9uZSk6CiAgICAgICAgIiIiQ29uc3RydWN0b3IuCgogICAgICAgIEFyZ3VtZW50czoKCiAgICAgICAgaG91ciwgbWludXRlIChyZXF1aXJlZCkKICAgICAgICBzZWNvbmQsIG1pY3Jvc2Vjb25kIChkZWZhdWx0IHRvIHplcm8pCiAgICAgICAgdHppbmZvIChkZWZhdWx0IHRvIE5vbmUpCiAgICAgICAgIiIiCiAgICAgICAgc2VsZiA9IG9iamVjdC5fX25ld19fKGNscykKICAgICAgICBpZiBpc2luc3RhbmNlKGhvdXIsIGJ5dGVzKSBhbmQgbGVuKGhvdXIpID09IDY6CiAgICAgICAgICAgICMgUGlja2xlIHN1cHBvcnQKICAgICAgICAgICAgc2VsZi5fX3NldHN0YXRlKGhvdXIsIG1pbnV0ZSBvciBOb25lKQogICAgICAgICAgICByZXR1cm4gc2VsZgogICAgICAgIF9jaGVja190emluZm9fYXJnKHR6aW5mbykKICAgICAgICBfY2hlY2tfdGltZV9maWVsZHMoaG91ciwgbWludXRlLCBzZWNvbmQsIG1pY3Jvc2Vjb25kKQogICAgICAgIHNlbGYuX2hvdXIgPSBob3VyCiAgICAgICAgc2VsZi5fbWludXRlID0gbWludXRlCiAgICAgICAgc2VsZi5fc2Vjb25kID0gc2Vjb25kCiAgICAgICAgc2VsZi5fbWljcm9zZWNvbmQgPSBtaWNyb3NlY29uZAogICAgICAgIHNlbGYuX3R6aW5mbyA9IHR6aW5mbwogICAgICAgIHJldHVybiBzZWxmCgogICAgIyBSZWFkLW9ubHkgZmllbGQgYWNjZXNzb3JzCiAgICBAcHJvcGVydHkKICAgIGRlZiBob3VyKHNlbGYpOgogICAgICAgICIiImhvdXIgKDAtMjMpIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX2hvdXIKCiAgICBAcHJvcGVydHkKICAgIGRlZiBtaW51dGUoc2VsZik6CiAgICAgICAgIiIibWludXRlICgwLTU5KSIiIgogICAgICAgIHJldHVybiBzZWxmLl9taW51dGUKCiAgICBAcHJvcGVydHkKICAgIGRlZiBzZWNvbmQoc2VsZik6CiAgICAgICAgIiIic2Vjb25kICgwLTU5KSIiIgogICAgICAgIHJldHVybiBzZWxmLl9zZWNvbmQKCiAgICBAcHJvcGVydHkKICAgIGRlZiBtaWNyb3NlY29uZChzZWxmKToKICAgICAgICAiIiJtaWNyb3NlY29uZCAoMC05OTk5OTkpIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX21pY3Jvc2Vjb25kCgogICAgQHByb3BlcnR5CiAgICBkZWYgdHppbmZvKHNlbGYpOgogICAgICAgICIiInRpbWV6b25lIGluZm8gb2JqZWN0IiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3R6aW5mbwoKICAgICMgU3RhbmRhcmQgY29udmVyc2lvbnMsIF9faGFzaF9fIChhbmQgaGVscGVycykKCiAgICAjIENvbXBhcmlzb25zIG9mIHRpbWUgb2JqZWN0cyB3aXRoIG90aGVyLgoKICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIHRpbWUpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSA9PSAwCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9fbmVfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgdGltZSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jbXAob3RoZXIpICE9IDAKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgIGRlZiBfX2xlX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIHRpbWUpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSA8PSAwCiAgICAgICAgZWxzZToKICAgICAgICAgICAgX2NtcGVycm9yKHNlbGYsIG90aGVyKQoKICAgIGRlZiBfX2x0X18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIHRpbWUpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSA8IDAKICAgICAgICBlbHNlOgogICAgICAgICAgICBfY21wZXJyb3Ioc2VsZiwgb3RoZXIpCgogICAgZGVmIF9fZ2VfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgdGltZSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jbXAob3RoZXIpID49IDAKICAgICAgICBlbHNlOgogICAgICAgICAgICBfY21wZXJyb3Ioc2VsZiwgb3RoZXIpCgogICAgZGVmIF9fZ3RfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgdGltZSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jbXAob3RoZXIpID4gMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIF9jbXBlcnJvcihzZWxmLCBvdGhlcikKCiAgICBkZWYgX2NtcChzZWxmLCBvdGhlcik6CiAgICAgICAgYXNzZXJ0IGlzaW5zdGFuY2Uob3RoZXIsIHRpbWUpCiAgICAgICAgbXl0eiA9IHNlbGYuX3R6aW5mbwogICAgICAgIG90dHogPSBvdGhlci5fdHppbmZvCiAgICAgICAgbXlvZmYgPSBvdG9mZiA9IE5vbmUKCiAgICAgICAgaWYgbXl0eiBpcyBvdHR6OgogICAgICAgICAgICBiYXNlX2NvbXBhcmUgPSBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbXlvZmYgPSBzZWxmLnV0Y29mZnNldCgpCiAgICAgICAgICAgIG90b2ZmID0gb3RoZXIudXRjb2Zmc2V0KCkKICAgICAgICAgICAgYmFzZV9jb21wYXJlID0gbXlvZmYgPT0gb3RvZmYKCiAgICAgICAgaWYgYmFzZV9jb21wYXJlOgogICAgICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICAgICAjcmV0dXJuIF9jbXAoKHNlbGYuX2hvdXIsIHNlbGYuX21pbnV0ZSwgc2VsZi5fc2Vjb25kLAogICAgICAgICAgICAjICAgICAgICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kKSwKICAgICAgICAgICAgIyAgICAgICAgICAgKG90aGVyLl9ob3VyLCBvdGhlci5fbWludXRlLCBvdGhlci5fc2Vjb25kLAogICAgICAgICAgICAjICAgICAgICAgICAgb3RoZXIuX21pY3Jvc2Vjb25kKSkKICAgICAgICAgICAgcmV0dXJuIF90dXBsZV9jbXAoKHNlbGYuX2hvdXIsIHNlbGYuX21pbnV0ZSwgc2VsZi5fc2Vjb25kLAogICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fbWljcm9zZWNvbmQpLAogICAgICAgICAgICAgICAgICAgICAgIChvdGhlci5faG91ciwgb3RoZXIuX21pbnV0ZSwgb3RoZXIuX3NlY29uZCwKICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIuX21pY3Jvc2Vjb25kKSkKICAgICAgICBpZiBteW9mZiBpcyBOb25lIG9yIG90b2ZmIGlzIE5vbmU6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiY2Fubm90IGNvbXBhcmUgbmFpdmUgYW5kIGF3YXJlIHRpbWVzIikKICAgICAgICBteWhobW0gPSBzZWxmLl9ob3VyICogNjAgKyBzZWxmLl9taW51dGUgLSBteW9mZi8vdGltZWRlbHRhKG1pbnV0ZXM9MSkKICAgICAgICBvdGhobW0gPSBvdGhlci5faG91ciAqIDYwICsgb3RoZXIuX21pbnV0ZSAtIG90b2ZmLy90aW1lZGVsdGEobWludXRlcz0xKQogICAgICAgICNmaXhtZSBicnl0aG9uCiAgICAgICAgI3JldHVybiBfY21wKChteWhobW0sIHNlbGYuX3NlY29uZCwgc2VsZi5fbWljcm9zZWNvbmQpLAogICAgICAgICMgICAgICAgICAgICAob3RoaG1tLCBvdGhlci5fc2Vjb25kLCBvdGhlci5fbWljcm9zZWNvbmQpKQogICAgICAgIHJldHVybiBfdHVwbGVfY21wKChteWhobW0sIHNlbGYuX3NlY29uZCwgc2VsZi5fbWljcm9zZWNvbmQpLAogICAgICAgICAgICAgICAgICAgIChvdGhobW0sIG90aGVyLl9zZWNvbmQsIG90aGVyLl9taWNyb3NlY29uZCkpCgogICAgZGVmIF9faGFzaF9fKHNlbGYpOgogICAgICAgICIiIkhhc2guIiIiCiAgICAgICAgdHpvZmYgPSBzZWxmLnV0Y29mZnNldCgpCiAgICAgICAgaWYgbm90IHR6b2ZmOiAjIHplcm8gb3IgTm9uZQogICAgICAgICAgICByZXR1cm4gaGFzaChzZWxmLl9nZXRzdGF0ZSgpWzBdKQogICAgICAgIGgsIG0gPSBkaXZtb2QodGltZWRlbHRhKGhvdXJzPXNlbGYuaG91ciwgbWludXRlcz1zZWxmLm1pbnV0ZSkgLSB0em9mZiwKICAgICAgICAgICAgICAgICAgICAgIHRpbWVkZWx0YShob3Vycz0xKSkKICAgICAgICBhc3NlcnQgbm90IG0gJSB0aW1lZGVsdGEobWludXRlcz0xKSwgIndob2xlIG1pbnV0ZSIKICAgICAgICBtIC8vPSB0aW1lZGVsdGEobWludXRlcz0xKQogICAgICAgIGlmIDAgPD0gaCA8IDI0OgogICAgICAgICAgICByZXR1cm4gaGFzaCh0aW1lKGgsIG0sIHNlbGYuc2Vjb25kLCBzZWxmLm1pY3Jvc2Vjb25kKSkKICAgICAgICByZXR1cm4gaGFzaCgoaCwgbSwgc2VsZi5zZWNvbmQsIHNlbGYubWljcm9zZWNvbmQpKQoKICAgICMgQ29udmVyc2lvbiB0byBzdHJpbmcKCiAgICBkZWYgX3R6c3RyKHNlbGYsIHNlcD0iOiIpOgogICAgICAgICIiIlJldHVybiBmb3JtYXR0ZWQgdGltZXpvbmUgb2Zmc2V0ICgreHg6eHgpIG9yIE5vbmUuIiIiCiAgICAgICAgb2ZmID0gc2VsZi51dGNvZmZzZXQoKQogICAgICAgIGlmIG9mZiBpcyBub3QgTm9uZToKICAgICAgICAgICAgaWYgb2ZmLmRheXMgPCAwOgogICAgICAgICAgICAgICAgc2lnbiA9ICItIgogICAgICAgICAgICAgICAgb2ZmID0gLW9mZgogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2lnbiA9ICIrIgogICAgICAgICAgICBoaCwgbW0gPSBkaXZtb2Qob2ZmLCB0aW1lZGVsdGEoaG91cnM9MSkpCiAgICAgICAgICAgIGFzc2VydCBub3QgbW0gJSB0aW1lZGVsdGEobWludXRlcz0xKSwgIndob2xlIG1pbnV0ZSIKICAgICAgICAgICAgbW0gLy89IHRpbWVkZWx0YShtaW51dGVzPTEpCiAgICAgICAgICAgIGFzc2VydCAwIDw9IGhoIDwgMjQKICAgICAgICAgICAgb2ZmID0gIiVzJTAyZCVzJTAyZCIgJSAoc2lnbiwgaGgsIHNlcCwgbW0pCiAgICAgICAgcmV0dXJuIG9mZgoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICAiIiJDb252ZXJ0IHRvIGZvcm1hbCBzdHJpbmcsIGZvciByZXByKCkuIiIiCiAgICAgICAgaWYgc2VsZi5fbWljcm9zZWNvbmQgIT0gMDoKICAgICAgICAgICAgcyA9ICIsICVkLCAlZCIgJSAoc2VsZi5fc2Vjb25kLCBzZWxmLl9taWNyb3NlY29uZCkKICAgICAgICBlbGlmIHNlbGYuX3NlY29uZCAhPSAwOgogICAgICAgICAgICBzID0gIiwgJWQiICUgc2VsZi5fc2Vjb25kCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcyA9ICIiCiAgICAgICAgcz0gIiVzKCVkLCAlZCVzKSIgJSAoJ2RhdGV0aW1lLicgKyBzZWxmLl9fY2xhc3NfXy5fX25hbWVfXywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9ob3VyLCBzZWxmLl9taW51dGUsIHMpCiAgICAgICAgaWYgc2VsZi5fdHppbmZvIGlzIG5vdCBOb25lOgogICAgICAgICAgICBhc3NlcnQgc1stMTpdID09ICIpIgogICAgICAgICAgICBzID0gc1s6LTFdICsgIiwgdHppbmZvPSVyIiAlIHNlbGYuX3R6aW5mbyArICIpIgogICAgICAgIHJldHVybiBzCgogICAgZGVmIGlzb2Zvcm1hdChzZWxmKToKICAgICAgICAiIiJSZXR1cm4gdGhlIHRpbWUgZm9ybWF0dGVkIGFjY29yZGluZyB0byBJU08uCgogICAgICAgIFRoaXMgaXMgJ0hIOk1NOlNTLm1tbW1tbSt6ejp6eicsIG9yICdISDpNTTpTUyt6ejp6eicgaWYKICAgICAgICBzZWxmLm1pY3Jvc2Vjb25kID09IDAuCiAgICAgICAgIiIiCiAgICAgICAgcyA9IF9mb3JtYXRfdGltZShzZWxmLl9ob3VyLCBzZWxmLl9taW51dGUsIHNlbGYuX3NlY29uZCwKICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kKQogICAgICAgIHR6ID0gc2VsZi5fdHpzdHIoKQogICAgICAgIGlmIHR6OgogICAgICAgICAgICBzICs9IHR6CiAgICAgICAgcmV0dXJuIHMKCiAgICBfX3N0cl9fID0gaXNvZm9ybWF0CgogICAgZGVmIHN0cmZ0aW1lKHNlbGYsIGZtdCk6CiAgICAgICAgIiIiRm9ybWF0IHVzaW5nIHN0cmZ0aW1lKCkuICBUaGUgZGF0ZSBwYXJ0IG9mIHRoZSB0aW1lc3RhbXAgcGFzc2VkCiAgICAgICAgdG8gdW5kZXJseWluZyBzdHJmdGltZSBzaG91bGQgbm90IGJlIHVzZWQuCiAgICAgICAgIiIiCiAgICAgICAgIyBUaGUgeWVhciBtdXN0IGJlID49IDEwMDAgZWxzZSBQeXRob24ncyBzdHJmdGltZSBpbXBsZW1lbnRhdGlvbgogICAgICAgICMgY2FuIHJhaXNlIGEgYm9ndXMgZXhjZXB0aW9uLgogICAgICAgIHRpbWV0dXBsZSA9ICgxOTAwLCAxLCAxLAogICAgICAgICAgICAgICAgICAgICBzZWxmLl9ob3VyLCBzZWxmLl9taW51dGUsIHNlbGYuX3NlY29uZCwKICAgICAgICAgICAgICAgICAgICAgMCwgMSwgLTEpCiAgICAgICAgcmV0dXJuIF93cmFwX3N0cmZ0aW1lKHNlbGYsIGZtdCwgdGltZXR1cGxlKQoKICAgIGRlZiBfX2Zvcm1hdF9fKHNlbGYsIGZtdCk6CiAgICAgICAgaWYgbGVuKGZtdCkgIT0gMDoKICAgICAgICAgICAgcmV0dXJuIHNlbGYuc3RyZnRpbWUoZm10KQogICAgICAgIHJldHVybiBzdHIoc2VsZikKCiAgICAjIFRpbWV6b25lIGZ1bmN0aW9ucwoKICAgIGRlZiB1dGNvZmZzZXQoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWludXRlcyBlYXN0IG9mIFVUQyAobmVnYXRpdmUgd2VzdCBvZgogICAgICAgIFVUQykuIiIiCiAgICAgICAgaWYgc2VsZi5fdHppbmZvIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgb2Zmc2V0ID0gc2VsZi5fdHppbmZvLnV0Y29mZnNldChOb25lKQogICAgICAgIF9jaGVja191dGNfb2Zmc2V0KCJ1dGNvZmZzZXQiLCBvZmZzZXQpCiAgICAgICAgcmV0dXJuIG9mZnNldAoKICAgIGRlZiB0em5hbWUoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIHRoZSB0aW1lem9uZSBuYW1lLgoKICAgICAgICBOb3RlIHRoYXQgdGhlIG5hbWUgaXMgMTAwJSBpbmZvcm1hdGlvbmFsIC0tIHRoZXJlJ3Mgbm8gcmVxdWlyZW1lbnQgdGhhdAogICAgICAgIGl0IG1lYW4gYW55dGhpbmcgaW4gcGFydGljdWxhci4gRm9yIGV4YW1wbGUsICJHTVQiLCAiVVRDIiwgIi01MDAiLAogICAgICAgICItNTowMCIsICJFRFQiLCAiVVMvRWFzdGVybiIsICJBbWVyaWNhL05ldyBZb3JrIiBhcmUgYWxsIHZhbGlkIHJlcGxpZXMuCiAgICAgICAgIiIiCiAgICAgICAgaWYgc2VsZi5fdHppbmZvIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBOb25lCiAgICAgICAgbmFtZSA9IHNlbGYuX3R6aW5mby50em5hbWUoTm9uZSkKICAgICAgICBfY2hlY2tfdHpuYW1lKG5hbWUpCiAgICAgICAgcmV0dXJuIG5hbWUKCiAgICBkZWYgZHN0KHNlbGYpOgogICAgICAgICIiIlJldHVybiAwIGlmIERTVCBpcyBub3QgaW4gZWZmZWN0LCBvciB0aGUgRFNUIG9mZnNldCAoaW4gbWludXRlcwogICAgICAgIGVhc3R3YXJkKSBpZiBEU1QgaXMgaW4gZWZmZWN0LgoKICAgICAgICBUaGlzIGlzIHB1cmVseSBpbmZvcm1hdGlvbmFsOyB0aGUgRFNUIG9mZnNldCBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkIHRvCiAgICAgICAgdGhlIFVUQyBvZmZzZXQgcmV0dXJuZWQgYnkgdXRjb2Zmc2V0KCkgaWYgYXBwbGljYWJsZSwgc28gdGhlcmUncyBubwogICAgICAgIG5lZWQgdG8gY29uc3VsdCBkc3QoKSB1bmxlc3MgeW91J3JlIGludGVyZXN0ZWQgaW4gZGlzcGxheWluZyB0aGUgRFNUCiAgICAgICAgaW5mby4KICAgICAgICAiIiIKICAgICAgICBpZiBzZWxmLl90emluZm8gaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICBvZmZzZXQgPSBzZWxmLl90emluZm8uZHN0KE5vbmUpCiAgICAgICAgX2NoZWNrX3V0Y19vZmZzZXQoImRzdCIsIG9mZnNldCkKICAgICAgICByZXR1cm4gb2Zmc2V0CgogICAgZGVmIHJlcGxhY2Uoc2VsZiwgaG91cj1Ob25lLCBtaW51dGU9Tm9uZSwgc2Vjb25kPU5vbmUsIG1pY3Jvc2Vjb25kPU5vbmUsCiAgICAgICAgICAgICAgICB0emluZm89VHJ1ZSk6CiAgICAgICAgIiIiUmV0dXJuIGEgbmV3IHRpbWUgd2l0aCBuZXcgdmFsdWVzIGZvciB0aGUgc3BlY2lmaWVkIGZpZWxkcy4iIiIKICAgICAgICBpZiBob3VyIGlzIE5vbmU6CiAgICAgICAgICAgIGhvdXIgPSBzZWxmLmhvdXIKICAgICAgICBpZiBtaW51dGUgaXMgTm9uZToKICAgICAgICAgICAgbWludXRlID0gc2VsZi5taW51dGUKICAgICAgICBpZiBzZWNvbmQgaXMgTm9uZToKICAgICAgICAgICAgc2Vjb25kID0gc2VsZi5zZWNvbmQKICAgICAgICBpZiBtaWNyb3NlY29uZCBpcyBOb25lOgogICAgICAgICAgICBtaWNyb3NlY29uZCA9IHNlbGYubWljcm9zZWNvbmQKICAgICAgICBpZiB0emluZm8gaXMgVHJ1ZToKICAgICAgICAgICAgdHppbmZvID0gc2VsZi50emluZm8KICAgICAgICBfY2hlY2tfdGltZV9maWVsZHMoaG91ciwgbWludXRlLCBzZWNvbmQsIG1pY3Jvc2Vjb25kKQogICAgICAgIF9jaGVja190emluZm9fYXJnKHR6aW5mbykKICAgICAgICByZXR1cm4gdGltZShob3VyLCBtaW51dGUsIHNlY29uZCwgbWljcm9zZWNvbmQsIHR6aW5mbykKCiAgICBkZWYgX19ib29sX18oc2VsZik6CiAgICAgICAgaWYgc2VsZi5zZWNvbmQgb3Igc2VsZi5taWNyb3NlY29uZDoKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBvZmZzZXQgPSBzZWxmLnV0Y29mZnNldCgpIG9yIHRpbWVkZWx0YSgwKQogICAgICAgIHJldHVybiB0aW1lZGVsdGEoaG91cnM9c2VsZi5ob3VyLCBtaW51dGVzPXNlbGYubWludXRlKSAhPSBvZmZzZXQKCiAgICAjIFBpY2tsZSBzdXBwb3J0LgoKICAgIGRlZiBfZ2V0c3RhdGUoc2VsZik6CiAgICAgICAgdXMyLCB1czMgPSBkaXZtb2Qoc2VsZi5fbWljcm9zZWNvbmQsIDI1NikKICAgICAgICB1czEsIHVzMiA9IGRpdm1vZCh1czIsIDI1NikKICAgICAgICBiYXNlc3RhdGUgPSBieXRlcyhbc2VsZi5faG91ciwgc2VsZi5fbWludXRlLCBzZWxmLl9zZWNvbmQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzMSwgdXMyLCB1czNdKQogICAgICAgIGlmIHNlbGYuX3R6aW5mbyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gKGJhc2VzdGF0ZSwpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIChiYXNlc3RhdGUsIHNlbGYuX3R6aW5mbykKCiAgICBkZWYgX19zZXRzdGF0ZShzZWxmLCBzdHJpbmcsIHR6aW5mbyk6CiAgICAgICAgaWYgbGVuKHN0cmluZykgIT0gNiBvciBzdHJpbmdbMF0gPj0gMjQ6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiYW4gaW50ZWdlciBpcyByZXF1aXJlZCIpCiAgICAgICAgKHNlbGYuX2hvdXIsIHNlbGYuX21pbnV0ZSwgc2VsZi5fc2Vjb25kLAogICAgICAgICB1czEsIHVzMiwgdXMzKSA9IHN0cmluZwogICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kID0gKCgodXMxIDw8IDgpIHwgdXMyKSA8PCA4KSB8IHVzMwogICAgICAgIGlmIHR6aW5mbyBpcyBOb25lIG9yIGlzaW5zdGFuY2UodHppbmZvLCBfdHppbmZvX2NsYXNzKToKICAgICAgICAgICAgc2VsZi5fdHppbmZvID0gdHppbmZvCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJiYWQgdHppbmZvIHN0YXRlIGFyZyAlciIgJSB0emluZm8pCgogICAgZGVmIF9fcmVkdWNlX18oc2VsZik6CiAgICAgICAgcmV0dXJuICh0aW1lLCBzZWxmLl9nZXRzdGF0ZSgpKQoKX3RpbWVfY2xhc3MgPSB0aW1lICAjIHNvIGZ1bmN0aW9ucyB3LyBhcmdzIG5hbWVkICJ0aW1lIiBjYW4gZ2V0IGF0IHRoZSBjbGFzcwoKdGltZS5taW4gPSB0aW1lKDAsIDAsIDApCnRpbWUubWF4ID0gdGltZSgyMywgNTksIDU5LCA5OTk5OTkpCnRpbWUucmVzb2x1dGlvbiA9IHRpbWVkZWx0YShtaWNyb3NlY29uZHM9MSkKCnByaW50KCdhJXMnICUgZGlyKGRhdGUpKQpjbGFzcyBkYXRldGltZShkYXRlKToKICAgICIiImRhdGV0aW1lKHllYXIsIG1vbnRoLCBkYXlbLCBob3VyWywgbWludXRlWywgc2Vjb25kWywgbWljcm9zZWNvbmRbLHR6aW5mb11dXV1dKQoKICAgIFRoZSB5ZWFyLCBtb250aCBhbmQgZGF5IGFyZ3VtZW50cyBhcmUgcmVxdWlyZWQuIHR6aW5mbyBtYXkgYmUgTm9uZSwgb3IgYW4KICAgIGluc3RhbmNlIG9mIGEgdHppbmZvIHN1YmNsYXNzLiBUaGUgcmVtYWluaW5nIGFyZ3VtZW50cyBtYXkgYmUgaW50cyBvciBsb25ncy4KICAgICIiIgoKICAgICNmaXhtZSBicnl0aG9uCiAgICAjX19zbG90c19fID0gZGF0ZS5fX3Nsb3RzX18gKyAoCiAgICBfX3Nsb3RzX18gPSAoJ195ZWFyJywgJ19tb250aCcsICdfZGF5JywgCiAgICAgICAgICAgICAgICAgJ19ob3VyJywnX21pbnV0ZScsJ19zZWNvbmQnLCdfbWljcm9zZWNvbmQnLCdfdHppbmZvJykKICAgIGRlZiBfX25ld19fKGNscywgeWVhciwgbW9udGg9Tm9uZSwgZGF5PU5vbmUsIGhvdXI9MCwgbWludXRlPTAsIHNlY29uZD0wLAogICAgICAgICAgICAgICAgbWljcm9zZWNvbmQ9MCwgdHppbmZvPU5vbmUpOgogICAgICAgIHByaW50KCdfX25ld19fICVzJyAlIGRpcihkYXRlKSkKICAgICAgICBwcmludChkYXRlKQogICAgICAgIGlmIGlzaW5zdGFuY2UoeWVhciwgYnl0ZXMpIGFuZCBsZW4oeWVhcikgPT0gMTA6CiAgICAgICAgICAgICMgUGlja2xlIHN1cHBvcnQKICAgICAgICAgICAgc2VsZiA9IGRhdGUuX19uZXdfXyhjbHMsIHllYXJbOjRdKQogICAgICAgICAgICBzZWxmLl9fc2V0c3RhdGUoeWVhciwgbW9udGgpCiAgICAgICAgICAgIHJldHVybiBzZWxmCiAgICAgICAgX2NoZWNrX3R6aW5mb19hcmcodHppbmZvKQogICAgICAgIF9jaGVja190aW1lX2ZpZWxkcyhob3VyLCBtaW51dGUsIHNlY29uZCwgbWljcm9zZWNvbmQpCiAgICAgICAgI3ByaW50KGRpcihkYXRlKSkKICAgICAgICBzZWxmID0gZGF0ZS5fX25ld19fKGNscywgeWVhciwgbW9udGgsIGRheSkKICAgICAgICBzZWxmLl9ob3VyID0gaG91cgogICAgICAgIHNlbGYuX21pbnV0ZSA9IG1pbnV0ZQogICAgICAgIHNlbGYuX3NlY29uZCA9IHNlY29uZAogICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kID0gbWljcm9zZWNvbmQKICAgICAgICBzZWxmLl90emluZm8gPSB0emluZm8KICAgICAgICByZXR1cm4gc2VsZgoKICAgICMgUmVhZC1vbmx5IGZpZWxkIGFjY2Vzc29ycwogICAgQHByb3BlcnR5CiAgICBkZWYgaG91cihzZWxmKToKICAgICAgICAiIiJob3VyICgwLTIzKSIiIgogICAgICAgIHJldHVybiBzZWxmLl9ob3VyCgogICAgQHByb3BlcnR5CiAgICBkZWYgbWludXRlKHNlbGYpOgogICAgICAgICIiIm1pbnV0ZSAoMC01OSkiIiIKICAgICAgICByZXR1cm4gc2VsZi5fbWludXRlCgogICAgQHByb3BlcnR5CiAgICBkZWYgc2Vjb25kKHNlbGYpOgogICAgICAgICIiInNlY29uZCAoMC01OSkiIiIKICAgICAgICByZXR1cm4gc2VsZi5fc2Vjb25kCgogICAgQHByb3BlcnR5CiAgICBkZWYgbWljcm9zZWNvbmQoc2VsZik6CiAgICAgICAgIiIibWljcm9zZWNvbmQgKDAtOTk5OTk5KSIiIgogICAgICAgIHJldHVybiBzZWxmLl9taWNyb3NlY29uZAoKICAgIEBwcm9wZXJ0eQogICAgZGVmIHR6aW5mbyhzZWxmKToKICAgICAgICAiIiJ0aW1lem9uZSBpbmZvIG9iamVjdCIiIgogICAgICAgIHJldHVybiBzZWxmLl90emluZm8KCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tdGltZXN0YW1wKGNscywgdCwgdHo9Tm9uZSk6CiAgICAgICAgIiIiQ29uc3RydWN0IGEgZGF0ZXRpbWUgZnJvbSBhIFBPU0lYIHRpbWVzdGFtcCAobGlrZSB0aW1lLnRpbWUoKSkuCgogICAgICAgIEEgdGltZXpvbmUgaW5mbyBvYmplY3QgbWF5IGJlIHBhc3NlZCBpbiBhcyB3ZWxsLgogICAgICAgICIiIgoKICAgICAgICBfY2hlY2tfdHppbmZvX2FyZyh0eikKCiAgICAgICAgY29udmVydGVyID0gX3RpbWUubG9jYWx0aW1lIGlmIHR6IGlzIE5vbmUgZWxzZSBfdGltZS5nbXRpbWUKCiAgICAgICAgdCwgZnJhYyA9IGRpdm1vZCh0LCAxLjApCiAgICAgICAgdXMgPSByb3VuZChmcmFjICogMWU2KQoKICAgICAgICAjIElmIHRpbWVzdGFtcCBpcyBsZXNzIHRoYW4gb25lIG1pY3Jvc2Vjb25kIHNtYWxsZXIgdGhhbiBhCiAgICAgICAgIyBmdWxsIHNlY29uZCwgdXMgY2FuIGJlIHJvdW5kZWQgdXAgdG8gMTAwMDAwMC4gIEluIHRoaXMgY2FzZSwKICAgICAgICAjIHJvbGwgb3ZlciB0byBzZWNvbmRzLCBvdGhlcndpc2UsIFZhbHVlRXJyb3IgaXMgcmFpc2VkCiAgICAgICAgIyBieSB0aGUgY29uc3RydWN0b3IuCiAgICAgICAgaWYgdXMgPT0gMTAwMDAwMDoKICAgICAgICAgICAgdCArPSAxCiAgICAgICAgICAgIHVzID0gMAogICAgICAgIHksIG0sIGQsIGhoLCBtbSwgc3MsIHdlZWtkYXksIGpkYXksIGRzdCA9IGNvbnZlcnRlcih0KQogICAgICAgIHNzID0gbWluKHNzLCA1OSkgICAgIyBjbGFtcCBvdXQgbGVhcCBzZWNvbmRzIGlmIHRoZSBwbGF0Zm9ybSBoYXMgdGhlbQogICAgICAgIHJlc3VsdCA9IGNscyh5LCBtLCBkLCBoaCwgbW0sIHNzLCB1cywgdHopCiAgICAgICAgaWYgdHogaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHJlc3VsdCA9IHR6LmZyb211dGMocmVzdWx0KQogICAgICAgIHJldHVybiByZXN1bHQKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiB1dGNmcm9tdGltZXN0YW1wKGNscywgdCk6CiAgICAgICAgIkNvbnN0cnVjdCBhIFVUQyBkYXRldGltZSBmcm9tIGEgUE9TSVggdGltZXN0YW1wIChsaWtlIHRpbWUudGltZSgpKS4iCiAgICAgICAgdCwgZnJhYyA9IGRpdm1vZCh0LCAxLjApCiAgICAgICAgdXMgPSByb3VuZChmcmFjICogMWU2KQoKICAgICAgICAjIElmIHRpbWVzdGFtcCBpcyBsZXNzIHRoYW4gb25lIG1pY3Jvc2Vjb25kIHNtYWxsZXIgdGhhbiBhCiAgICAgICAgIyBmdWxsIHNlY29uZCwgdXMgY2FuIGJlIHJvdW5kZWQgdXAgdG8gMTAwMDAwMC4gIEluIHRoaXMgY2FzZSwKICAgICAgICAjIHJvbGwgb3ZlciB0byBzZWNvbmRzLCBvdGhlcndpc2UsIFZhbHVlRXJyb3IgaXMgcmFpc2VkCiAgICAgICAgIyBieSB0aGUgY29uc3RydWN0b3IuCiAgICAgICAgaWYgdXMgPT0gMTAwMDAwMDoKICAgICAgICAgICAgdCArPSAxCiAgICAgICAgICAgIHVzID0gMAogICAgICAgIHksIG0sIGQsIGhoLCBtbSwgc3MsIHdlZWtkYXksIGpkYXksIGRzdCA9IF90aW1lLmdtdGltZSh0KQogICAgICAgIHNzID0gbWluKHNzLCA1OSkgICAgIyBjbGFtcCBvdXQgbGVhcCBzZWNvbmRzIGlmIHRoZSBwbGF0Zm9ybSBoYXMgdGhlbQogICAgICAgIHJldHVybiBjbHMoeSwgbSwgZCwgaGgsIG1tLCBzcywgdXMpCgogICAgIyBYWFggVGhpcyBpcyBzdXBwb3NlZCB0byBkbyBiZXR0ZXIgdGhhbiB3ZSAqY2FuKiBkbyBieSB1c2luZyB0aW1lLnRpbWUoKSwKICAgICMgWFhYIGlmIHRoZSBwbGF0Zm9ybSBzdXBwb3J0cyBhIG1vcmUgYWNjdXJhdGUgd2F5LiAgVGhlIEMgaW1wbGVtZW50YXRpb24KICAgICMgWFhYIHVzZXMgZ2V0dGltZW9mZGF5IG9uIHBsYXRmb3JtcyB0aGF0IGhhdmUgaXQsIGJ1dCB0aGF0IGlzbid0CiAgICAjIFhYWCBhdmFpbGFibGUgZnJvbSBQeXRob24uICBTbyBub3coKSBtYXkgcmV0dXJuIGRpZmZlcmVudCByZXN1bHRzCiAgICAjIFhYWCBhY3Jvc3MgdGhlIGltcGxlbWVudGF0aW9ucy4KICAgIEBjbGFzc21ldGhvZAogICAgZGVmIG5vdyhjbHMsIHR6PU5vbmUpOgogICAgICAgICJDb25zdHJ1Y3QgYSBkYXRldGltZSBmcm9tIHRpbWUudGltZSgpIGFuZCBvcHRpb25hbCB0aW1lIHpvbmUgaW5mby4iCiAgICAgICAgdCA9IF90aW1lLnRpbWUoKQogICAgICAgIHJldHVybiBjbHMuZnJvbXRpbWVzdGFtcCh0LCB0eikKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiB1dGNub3coY2xzKToKICAgICAgICAiQ29uc3RydWN0IGEgVVRDIGRhdGV0aW1lIGZyb20gdGltZS50aW1lKCkuIgogICAgICAgIHQgPSBfdGltZS50aW1lKCkKICAgICAgICByZXR1cm4gY2xzLnV0Y2Zyb210aW1lc3RhbXAodCkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBjb21iaW5lKGNscywgZGF0ZSwgdGltZSk6CiAgICAgICAgIkNvbnN0cnVjdCBhIGRhdGV0aW1lIGZyb20gYSBnaXZlbiBkYXRlIGFuZCBhIGdpdmVuIHRpbWUuIgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGRhdGUsIF9kYXRlX2NsYXNzKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJkYXRlIGFyZ3VtZW50IG11c3QgYmUgYSBkYXRlIGluc3RhbmNlIikKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZSh0aW1lLCBfdGltZV9jbGFzcyk6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidGltZSBhcmd1bWVudCBtdXN0IGJlIGEgdGltZSBpbnN0YW5jZSIpCiAgICAgICAgcmV0dXJuIGNscyhkYXRlLnllYXIsIGRhdGUubW9udGgsIGRhdGUuZGF5LAogICAgICAgICAgICAgICAgICAgdGltZS5ob3VyLCB0aW1lLm1pbnV0ZSwgdGltZS5zZWNvbmQsIHRpbWUubWljcm9zZWNvbmQsCiAgICAgICAgICAgICAgICAgICB0aW1lLnR6aW5mbykKCiAgICBkZWYgdGltZXR1cGxlKHNlbGYpOgogICAgICAgICJSZXR1cm4gbG9jYWwgdGltZSB0dXBsZSBjb21wYXRpYmxlIHdpdGggdGltZS5sb2NhbHRpbWUoKS4iCiAgICAgICAgZHN0ID0gc2VsZi5kc3QoKQogICAgICAgIGlmIGRzdCBpcyBOb25lOgogICAgICAgICAgICBkc3QgPSAtMQogICAgICAgIGVsaWYgZHN0OgogICAgICAgICAgICBkc3QgPSAxCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZHN0ID0gMAogICAgICAgIHJldHVybiBfYnVpbGRfc3RydWN0X3RpbWUoc2VsZi55ZWFyLCBzZWxmLm1vbnRoLCBzZWxmLmRheSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaG91ciwgc2VsZi5taW51dGUsIHNlbGYuc2Vjb25kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHN0KQoKICAgIGRlZiB1dGN0aW1ldHVwbGUoc2VsZik6CiAgICAgICAgIlJldHVybiBVVEMgdGltZSB0dXBsZSBjb21wYXRpYmxlIHdpdGggdGltZS5nbXRpbWUoKS4iCiAgICAgICAgb2Zmc2V0ID0gc2VsZi51dGNvZmZzZXQoKQogICAgICAgIGlmIG9mZnNldDoKICAgICAgICAgICAgc2VsZiAtPSBvZmZzZXQKICAgICAgICB5LCBtLCBkID0gc2VsZi55ZWFyLCBzZWxmLm1vbnRoLCBzZWxmLmRheQogICAgICAgIGhoLCBtbSwgc3MgPSBzZWxmLmhvdXIsIHNlbGYubWludXRlLCBzZWxmLnNlY29uZAogICAgICAgIHJldHVybiBfYnVpbGRfc3RydWN0X3RpbWUoeSwgbSwgZCwgaGgsIG1tLCBzcywgMCkKCiAgICBkZWYgZGF0ZShzZWxmKToKICAgICAgICAiUmV0dXJuIHRoZSBkYXRlIHBhcnQuIgogICAgICAgIHJldHVybiBkYXRlKHNlbGYuX3llYXIsIHNlbGYuX21vbnRoLCBzZWxmLl9kYXkpCgogICAgZGVmIHRpbWUoc2VsZik6CiAgICAgICAgIlJldHVybiB0aGUgdGltZSBwYXJ0LCB3aXRoIHR6aW5mbyBOb25lLiIKICAgICAgICByZXR1cm4gdGltZShzZWxmLmhvdXIsIHNlbGYubWludXRlLCBzZWxmLnNlY29uZCwgc2VsZi5taWNyb3NlY29uZCkKCiAgICBkZWYgdGltZXR6KHNlbGYpOgogICAgICAgICJSZXR1cm4gdGhlIHRpbWUgcGFydCwgd2l0aCBzYW1lIHR6aW5mby4iCiAgICAgICAgcmV0dXJuIHRpbWUoc2VsZi5ob3VyLCBzZWxmLm1pbnV0ZSwgc2VsZi5zZWNvbmQsIHNlbGYubWljcm9zZWNvbmQsCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdHppbmZvKQoKICAgIGRlZiByZXBsYWNlKHNlbGYsIHllYXI9Tm9uZSwgbW9udGg9Tm9uZSwgZGF5PU5vbmUsIGhvdXI9Tm9uZSwKICAgICAgICAgICAgICAgIG1pbnV0ZT1Ob25lLCBzZWNvbmQ9Tm9uZSwgbWljcm9zZWNvbmQ9Tm9uZSwgdHppbmZvPVRydWUpOgogICAgICAgICIiIlJldHVybiBhIG5ldyBkYXRldGltZSB3aXRoIG5ldyB2YWx1ZXMgZm9yIHRoZSBzcGVjaWZpZWQgZmllbGRzLiIiIgogICAgICAgIGlmIHllYXIgaXMgTm9uZToKICAgICAgICAgICAgeWVhciA9IHNlbGYueWVhcgogICAgICAgIGlmIG1vbnRoIGlzIE5vbmU6CiAgICAgICAgICAgIG1vbnRoID0gc2VsZi5tb250aAogICAgICAgIGlmIGRheSBpcyBOb25lOgogICAgICAgICAgICBkYXkgPSBzZWxmLmRheQogICAgICAgIGlmIGhvdXIgaXMgTm9uZToKICAgICAgICAgICAgaG91ciA9IHNlbGYuaG91cgogICAgICAgIGlmIG1pbnV0ZSBpcyBOb25lOgogICAgICAgICAgICBtaW51dGUgPSBzZWxmLm1pbnV0ZQogICAgICAgIGlmIHNlY29uZCBpcyBOb25lOgogICAgICAgICAgICBzZWNvbmQgPSBzZWxmLnNlY29uZAogICAgICAgIGlmIG1pY3Jvc2Vjb25kIGlzIE5vbmU6CiAgICAgICAgICAgIG1pY3Jvc2Vjb25kID0gc2VsZi5taWNyb3NlY29uZAogICAgICAgIGlmIHR6aW5mbyBpcyBUcnVlOgogICAgICAgICAgICB0emluZm8gPSBzZWxmLnR6aW5mbwogICAgICAgIF9jaGVja19kYXRlX2ZpZWxkcyh5ZWFyLCBtb250aCwgZGF5KQogICAgICAgIF9jaGVja190aW1lX2ZpZWxkcyhob3VyLCBtaW51dGUsIHNlY29uZCwgbWljcm9zZWNvbmQpCiAgICAgICAgX2NoZWNrX3R6aW5mb19hcmcodHppbmZvKQogICAgICAgIHJldHVybiBkYXRldGltZSh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwKICAgICAgICAgICAgICAgICAgICAgICAgICBtaWNyb3NlY29uZCwgdHppbmZvKQoKICAgIGRlZiBhc3RpbWV6b25lKHNlbGYsIHR6KToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZSh0eiwgdHppbmZvKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJ0eiBhcmd1bWVudCBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIHR6aW5mbyIpCgogICAgICAgIG15dHogPSBzZWxmLnR6aW5mbwogICAgICAgIGlmIG15dHogaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiYXN0aW1lem9uZSgpIHJlcXVpcmVzIGFuIGF3YXJlIGRhdGV0aW1lIikKCiAgICAgICAgaWYgdHogaXMgbXl0ejoKICAgICAgICAgICAgcmV0dXJuIHNlbGYKCiAgICAgICAgIyBDb252ZXJ0IHNlbGYgdG8gVVRDLCBhbmQgYXR0YWNoIHRoZSBuZXcgdGltZSB6b25lIG9iamVjdC4KICAgICAgICBteW9mZnNldCA9IHNlbGYudXRjb2Zmc2V0KCkKICAgICAgICBpZiBteW9mZnNldCBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJhc3RpbWV6b25lKCkgcmVxdWlyZXMgYW4gYXdhcmUgZGF0ZXRpbWUiKQogICAgICAgIHV0YyA9IChzZWxmIC0gbXlvZmZzZXQpLnJlcGxhY2UodHppbmZvPXR6KQoKICAgICAgICAjIENvbnZlcnQgZnJvbSBVVEMgdG8gdHoncyBsb2NhbCB0aW1lLgogICAgICAgIHJldHVybiB0ei5mcm9tdXRjKHV0YykKCiAgICAjIFdheXMgdG8gcHJvZHVjZSBhIHN0cmluZy4KCiAgICBkZWYgY3RpbWUoc2VsZik6CiAgICAgICAgIlJldHVybiBjdGltZSgpIHN0eWxlIHN0cmluZy4iCiAgICAgICAgd2Vla2RheSA9IHNlbGYudG9vcmRpbmFsKCkgJSA3IG9yIDcKICAgICAgICByZXR1cm4gIiVzICVzICUyZCAlMDJkOiUwMmQ6JTAyZCAlMDRkIiAlICgKICAgICAgICAgICAgX0RBWU5BTUVTW3dlZWtkYXldLAogICAgICAgICAgICBfTU9OVEhOQU1FU1tzZWxmLl9tb250aF0sCiAgICAgICAgICAgIHNlbGYuX2RheSwKICAgICAgICAgICAgc2VsZi5faG91ciwgc2VsZi5fbWludXRlLCBzZWxmLl9zZWNvbmQsCiAgICAgICAgICAgIHNlbGYuX3llYXIpCgogICAgZGVmIGlzb2Zvcm1hdChzZWxmLCBzZXA9J1QnKToKICAgICAgICAiIiJSZXR1cm4gdGhlIHRpbWUgZm9ybWF0dGVkIGFjY29yZGluZyB0byBJU08uCgogICAgICAgIFRoaXMgaXMgJ1lZWVktTU0tREQgSEg6TU06U1MubW1tbW1tJywgb3IgJ1lZWVktTU0tREQgSEg6TU06U1MnIGlmCiAgICAgICAgc2VsZi5taWNyb3NlY29uZCA9PSAwLgoKICAgICAgICBJZiBzZWxmLnR6aW5mbyBpcyBub3QgTm9uZSwgdGhlIFVUQyBvZmZzZXQgaXMgYWxzbyBhdHRhY2hlZCwgZ2l2aW5nCiAgICAgICAgJ1lZWVktTU0tREQgSEg6TU06U1MubW1tbW1tK0hIOk1NJyBvciAnWVlZWS1NTS1ERCBISDpNTTpTUytISDpNTScuCgogICAgICAgIE9wdGlvbmFsIGFyZ3VtZW50IHNlcCBzcGVjaWZpZXMgdGhlIHNlcGFyYXRvciBiZXR3ZWVuIGRhdGUgYW5kCiAgICAgICAgdGltZSwgZGVmYXVsdCAnVCcuCiAgICAgICAgIiIiCiAgICAgICAgcyA9ICgiJTA0ZC0lMDJkLSUwMmQlYyIgJSAoc2VsZi5feWVhciwgc2VsZi5fbW9udGgsIHNlbGYuX2RheSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcCkgKwogICAgICAgICAgICAgICAgX2Zvcm1hdF90aW1lKHNlbGYuX2hvdXIsIHNlbGYuX21pbnV0ZSwgc2VsZi5fc2Vjb25kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kKSkKICAgICAgICBvZmYgPSBzZWxmLnV0Y29mZnNldCgpCiAgICAgICAgaWYgb2ZmIGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBvZmYuZGF5cyA8IDA6CiAgICAgICAgICAgICAgICBzaWduID0gIi0iCiAgICAgICAgICAgICAgICBvZmYgPSAtb2ZmCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBzaWduID0gIisiCiAgICAgICAgICAgIGhoLCBtbSA9IGRpdm1vZChvZmYsIHRpbWVkZWx0YShob3Vycz0xKSkKICAgICAgICAgICAgYXNzZXJ0IG5vdCBtbSAlIHRpbWVkZWx0YShtaW51dGVzPTEpLCAid2hvbGUgbWludXRlIgogICAgICAgICAgICBtbSAvLz0gdGltZWRlbHRhKG1pbnV0ZXM9MSkKICAgICAgICAgICAgcyArPSAiJXMlMDJkOiUwMmQiICUgKHNpZ24sIGhoLCBtbSkKICAgICAgICByZXR1cm4gcwoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICAiIiJDb252ZXJ0IHRvIGZvcm1hbCBzdHJpbmcsIGZvciByZXByKCkuIiIiCiAgICAgICAgTCA9IFtzZWxmLl95ZWFyLCBzZWxmLl9tb250aCwgc2VsZi5fZGF5LCAjIFRoZXNlIGFyZSBuZXZlciB6ZXJvCiAgICAgICAgICAgICBzZWxmLl9ob3VyLCBzZWxmLl9taW51dGUsIHNlbGYuX3NlY29uZCwgc2VsZi5fbWljcm9zZWNvbmRdCiAgICAgICAgaWYgTFstMV0gPT0gMDoKICAgICAgICAgICAgZGVsIExbLTFdCiAgICAgICAgaWYgTFstMV0gPT0gMDoKICAgICAgICAgICAgZGVsIExbLTFdCiAgICAgICAgcyA9ICIsICIuam9pbihtYXAoc3RyLCBMKSkKICAgICAgICBzID0gIiVzKCVzKSIgJSAoJ2RhdGV0aW1lLicgKyBzZWxmLl9fY2xhc3NfXy5fX25hbWVfXywgcykKICAgICAgICBpZiBzZWxmLl90emluZm8gaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGFzc2VydCBzWy0xOl0gPT0gIikiCiAgICAgICAgICAgIHMgPSBzWzotMV0gKyAiLCB0emluZm89JXIiICUgc2VsZi5fdHppbmZvICsgIikiCiAgICAgICAgcmV0dXJuIHMKCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICAiQ29udmVydCB0byBzdHJpbmcsIGZvciBzdHIoKS4iCiAgICAgICAgcmV0dXJuIHNlbGYuaXNvZm9ybWF0KHNlcD0nICcpCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgc3RycHRpbWUoY2xzLCBkYXRlX3N0cmluZywgZm9ybWF0KToKICAgICAgICAnc3RyaW5nLCBmb3JtYXQgLT4gbmV3IGRhdGV0aW1lIHBhcnNlZCBmcm9tIGEgc3RyaW5nIChsaWtlIHRpbWUuc3RycHRpbWUoKSkuJwogICAgICAgIGltcG9ydCBfc3RycHRpbWUKICAgICAgICByZXR1cm4gX3N0cnB0aW1lLl9zdHJwdGltZV9kYXRldGltZShjbHMsIGRhdGVfc3RyaW5nLCBmb3JtYXQpCgogICAgZGVmIHV0Y29mZnNldChzZWxmKToKICAgICAgICAiIiJSZXR1cm4gdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaW51dGVzIGVhc3Qgb2YgVVRDIChuZWdhdGl2ZSB3ZXN0IG9mCiAgICAgICAgVVRDKS4iIiIKICAgICAgICBpZiBzZWxmLl90emluZm8gaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICBvZmZzZXQgPSBzZWxmLl90emluZm8udXRjb2Zmc2V0KHNlbGYpCiAgICAgICAgX2NoZWNrX3V0Y19vZmZzZXQoInV0Y29mZnNldCIsIG9mZnNldCkKICAgICAgICByZXR1cm4gb2Zmc2V0CgogICAgZGVmIHR6bmFtZShzZWxmKToKICAgICAgICAiIiJSZXR1cm4gdGhlIHRpbWV6b25lIG5hbWUuCgogICAgICAgIE5vdGUgdGhhdCB0aGUgbmFtZSBpcyAxMDAlIGluZm9ybWF0aW9uYWwgLS0gdGhlcmUncyBubyByZXF1aXJlbWVudCB0aGF0CiAgICAgICAgaXQgbWVhbiBhbnl0aGluZyBpbiBwYXJ0aWN1bGFyLiBGb3IgZXhhbXBsZSwgIkdNVCIsICJVVEMiLCAiLTUwMCIsCiAgICAgICAgIi01OjAwIiwgIkVEVCIsICJVUy9FYXN0ZXJuIiwgIkFtZXJpY2EvTmV3IFlvcmsiIGFyZSBhbGwgdmFsaWQgcmVwbGllcy4KICAgICAgICAiIiIKICAgICAgICBuYW1lID0gX2NhbGxfdHppbmZvX21ldGhvZChzZWxmLl90emluZm8sICJ0em5hbWUiLCBzZWxmKQogICAgICAgIF9jaGVja190em5hbWUobmFtZSkKICAgICAgICByZXR1cm4gbmFtZQoKICAgIGRlZiBkc3Qoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIDAgaWYgRFNUIGlzIG5vdCBpbiBlZmZlY3QsIG9yIHRoZSBEU1Qgb2Zmc2V0IChpbiBtaW51dGVzCiAgICAgICAgZWFzdHdhcmQpIGlmIERTVCBpcyBpbiBlZmZlY3QuCgogICAgICAgIFRoaXMgaXMgcHVyZWx5IGluZm9ybWF0aW9uYWw7IHRoZSBEU1Qgb2Zmc2V0IGhhcyBhbHJlYWR5IGJlZW4gYWRkZWQgdG8KICAgICAgICB0aGUgVVRDIG9mZnNldCByZXR1cm5lZCBieSB1dGNvZmZzZXQoKSBpZiBhcHBsaWNhYmxlLCBzbyB0aGVyZSdzIG5vCiAgICAgICAgbmVlZCB0byBjb25zdWx0IGRzdCgpIHVubGVzcyB5b3UncmUgaW50ZXJlc3RlZCBpbiBkaXNwbGF5aW5nIHRoZSBEU1QKICAgICAgICBpbmZvLgogICAgICAgICIiIgogICAgICAgIGlmIHNlbGYuX3R6aW5mbyBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgIG9mZnNldCA9IHNlbGYuX3R6aW5mby5kc3Qoc2VsZikKICAgICAgICBfY2hlY2tfdXRjX29mZnNldCgiZHN0Iiwgb2Zmc2V0KQogICAgICAgIHJldHVybiBvZmZzZXQKCiAgICAjIENvbXBhcmlzb25zIG9mIGRhdGV0aW1lIG9iamVjdHMgd2l0aCBvdGhlci4KCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCBkYXRldGltZSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jbXAob3RoZXIpID09IDAKICAgICAgICBlbGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCBkYXRlKToKICAgICAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIF9fbmVfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgZGF0ZXRpbWUpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSAhPSAwCiAgICAgICAgZWxpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgZGF0ZSk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIF9fbGVfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgZGF0ZXRpbWUpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSA8PSAwCiAgICAgICAgZWxpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgZGF0ZSk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIF9jbXBlcnJvcihzZWxmLCBvdGhlcikKCiAgICBkZWYgX19sdF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCBkYXRldGltZSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jbXAob3RoZXIpIDwgMAogICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2Uob3RoZXIsIGRhdGUpOgogICAgICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKICAgICAgICBlbHNlOgogICAgICAgICAgICBfY21wZXJyb3Ioc2VsZiwgb3RoZXIpCgogICAgZGVmIF9fZ2VfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgZGF0ZXRpbWUpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5fY21wKG90aGVyKSA+PSAwCiAgICAgICAgZWxpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgZGF0ZSk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIF9jbXBlcnJvcihzZWxmLCBvdGhlcikKCiAgICBkZWYgX19ndF9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCBkYXRldGltZSk6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jbXAob3RoZXIpID4gMAogICAgICAgIGVsaWYgbm90IGlzaW5zdGFuY2Uob3RoZXIsIGRhdGUpOgogICAgICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKICAgICAgICBlbHNlOgogICAgICAgICAgICBfY21wZXJyb3Ioc2VsZiwgb3RoZXIpCgogICAgZGVmIF9jbXAoc2VsZiwgb3RoZXIpOgogICAgICAgIGFzc2VydCBpc2luc3RhbmNlKG90aGVyLCBkYXRldGltZSkKICAgICAgICBteXR6ID0gc2VsZi5fdHppbmZvCiAgICAgICAgb3R0eiA9IG90aGVyLl90emluZm8KICAgICAgICBteW9mZiA9IG90b2ZmID0gTm9uZQoKICAgICAgICBpZiBteXR6IGlzIG90dHo6CiAgICAgICAgICAgIGJhc2VfY29tcGFyZSA9IFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBteXR6IGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgbXlvZmYgPSBzZWxmLnV0Y29mZnNldCgpCiAgICAgICAgICAgIGlmIG90dHogaXMgbm90IE5vbmU6CiAgICAgICAgICAgICAgICBvdG9mZiA9IG90aGVyLnV0Y29mZnNldCgpCiAgICAgICAgICAgIGJhc2VfY29tcGFyZSA9IG15b2ZmID09IG90b2ZmCgogICAgICAgIGlmIGJhc2VfY29tcGFyZToKICAgICAgICAgICAgI2ZpeG1lIGJyeXRob24KICAgICAgICAgICAgI3JldHVybiBfY21wKChzZWxmLl95ZWFyLCBzZWxmLl9tb250aCwgc2VsZi5fZGF5LAogICAgICAgICAgICAjICAgICAgICAgICAgIHNlbGYuX2hvdXIsIHNlbGYuX21pbnV0ZSwgc2VsZi5fc2Vjb25kLAogICAgICAgICAgICAjICAgICAgICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kKSwKICAgICAgICAgICAgIyAgICAgICAgICAgKG90aGVyLl95ZWFyLCBvdGhlci5fbW9udGgsIG90aGVyLl9kYXksCiAgICAgICAgICAgICMgICAgICAgICAgICBvdGhlci5faG91ciwgb3RoZXIuX21pbnV0ZSwgb3RoZXIuX3NlY29uZCwKICAgICAgICAgICAgIyAgICAgICAgICAgIG90aGVyLl9taWNyb3NlY29uZCkpCiAgICAgICAgICAgIHJldHVybiBfdHVwbGVfY21wKChzZWxmLl95ZWFyLCBzZWxmLl9tb250aCwgc2VsZi5fZGF5LAogICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5faG91ciwgc2VsZi5fbWludXRlLCBzZWxmLl9zZWNvbmQsCiAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9taWNyb3NlY29uZCksCiAgICAgICAgICAgICAgICAgICAgICAgKG90aGVyLl95ZWFyLCBvdGhlci5fbW9udGgsIG90aGVyLl9kYXksCiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyLl9ob3VyLCBvdGhlci5fbWludXRlLCBvdGhlci5fc2Vjb25kLAogICAgICAgICAgICAgICAgICAgICAgICBvdGhlci5fbWljcm9zZWNvbmQpKQogICAgICAgIGlmIG15b2ZmIGlzIE5vbmUgb3Igb3RvZmYgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJjYW5ub3QgY29tcGFyZSBuYWl2ZSBhbmQgYXdhcmUgZGF0ZXRpbWVzIikKICAgICAgICAjIFhYWCBXaGF0IGZvbGxvd3MgY291bGQgYmUgZG9uZSBtb3JlIGVmZmljaWVudGx5Li4uCiAgICAgICAgZGlmZiA9IHNlbGYgLSBvdGhlciAgICAgIyB0aGlzIHdpbGwgdGFrZSBvZmZzZXRzIGludG8gYWNjb3VudAogICAgICAgIGlmIGRpZmYuZGF5cyA8IDA6CiAgICAgICAgICAgIHJldHVybiAtMQogICAgICAgIHJldHVybiBkaWZmIGFuZCAxIG9yIDAKCiAgICBkZWYgX19hZGRfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgIkFkZCBhIGRhdGV0aW1lIGFuZCBhIHRpbWVkZWx0YS4iCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob3RoZXIsIHRpbWVkZWx0YSk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIGRlbHRhID0gdGltZWRlbHRhKHNlbGYudG9vcmRpbmFsKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgaG91cnM9c2VsZi5faG91ciwKICAgICAgICAgICAgICAgICAgICAgICAgICBtaW51dGVzPXNlbGYuX21pbnV0ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzPXNlbGYuX3NlY29uZCwKICAgICAgICAgICAgICAgICAgICAgICAgICBtaWNyb3NlY29uZHM9c2VsZi5fbWljcm9zZWNvbmQpCiAgICAgICAgZGVsdGEgKz0gb3RoZXIKICAgICAgICBob3VyLCByZW0gPSBkaXZtb2QoZGVsdGEuc2Vjb25kcywgMzYwMCkKICAgICAgICBtaW51dGUsIHNlY29uZCA9IGRpdm1vZChyZW0sIDYwKQogICAgICAgIGlmIDAgPCBkZWx0YS5kYXlzIDw9IF9NQVhPUkRJTkFMOgogICAgICAgICAgICByZXR1cm4gZGF0ZXRpbWUuY29tYmluZShkYXRlLmZyb21vcmRpbmFsKGRlbHRhLmRheXMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lKGhvdXIsIG1pbnV0ZSwgc2Vjb25kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhLm1pY3Jvc2Vjb25kcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0emluZm89c2VsZi5fdHppbmZvKSkKICAgICAgICByYWlzZSBPdmVyZmxvd0Vycm9yKCJyZXN1bHQgb3V0IG9mIHJhbmdlIikKCiAgICBfX3JhZGRfXyA9IF9fYWRkX18KCiAgICBkZWYgX19zdWJfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgIlN1YnRyYWN0IHR3byBkYXRldGltZXMsIG9yIGEgZGF0ZXRpbWUgYW5kIGEgdGltZWRlbHRhLiIKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgZGF0ZXRpbWUpOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCB0aW1lZGVsdGEpOgogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYgKyAtb3RoZXIKICAgICAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCgogICAgICAgIGRheXMxID0gc2VsZi50b29yZGluYWwoKQogICAgICAgIGRheXMyID0gb3RoZXIudG9vcmRpbmFsKCkKICAgICAgICBzZWNzMSA9IHNlbGYuX3NlY29uZCArIHNlbGYuX21pbnV0ZSAqIDYwICsgc2VsZi5faG91ciAqIDM2MDAKICAgICAgICBzZWNzMiA9IG90aGVyLl9zZWNvbmQgKyBvdGhlci5fbWludXRlICogNjAgKyBvdGhlci5faG91ciAqIDM2MDAKICAgICAgICBiYXNlID0gdGltZWRlbHRhKGRheXMxIC0gZGF5czIsCiAgICAgICAgICAgICAgICAgICAgICAgICBzZWNzMSAtIHNlY3MyLAogICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fbWljcm9zZWNvbmQgLSBvdGhlci5fbWljcm9zZWNvbmQpCiAgICAgICAgaWYgc2VsZi5fdHppbmZvIGlzIG90aGVyLl90emluZm86CiAgICAgICAgICAgIHJldHVybiBiYXNlCiAgICAgICAgbXlvZmYgPSBzZWxmLnV0Y29mZnNldCgpCiAgICAgICAgb3RvZmYgPSBvdGhlci51dGNvZmZzZXQoKQogICAgICAgIGlmIG15b2ZmID09IG90b2ZmOgogICAgICAgICAgICByZXR1cm4gYmFzZQogICAgICAgIGlmIG15b2ZmIGlzIE5vbmUgb3Igb3RvZmYgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJjYW5ub3QgbWl4IG5haXZlIGFuZCB0aW1lem9uZS1hd2FyZSB0aW1lIikKICAgICAgICByZXR1cm4gYmFzZSArIG90b2ZmIC0gbXlvZmYKCiAgICBkZWYgX19oYXNoX18oc2VsZik6CiAgICAgICAgdHpvZmYgPSBzZWxmLnV0Y29mZnNldCgpCiAgICAgICAgaWYgdHpvZmYgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIGhhc2goc2VsZi5fZ2V0c3RhdGUoKVswXSkKICAgICAgICBkYXlzID0gX3ltZDJvcmQoc2VsZi55ZWFyLCBzZWxmLm1vbnRoLCBzZWxmLmRheSkKICAgICAgICBzZWNvbmRzID0gc2VsZi5ob3VyICogMzYwMCArIHNlbGYubWludXRlICogNjAgKyBzZWxmLnNlY29uZAogICAgICAgIHJldHVybiBoYXNoKHRpbWVkZWx0YShkYXlzLCBzZWNvbmRzLCBzZWxmLm1pY3Jvc2Vjb25kKSAtIHR6b2ZmKQoKICAgICMgUGlja2xlIHN1cHBvcnQuCgogICAgZGVmIF9nZXRzdGF0ZShzZWxmKToKICAgICAgICB5aGksIHlsbyA9IGRpdm1vZChzZWxmLl95ZWFyLCAyNTYpCiAgICAgICAgdXMyLCB1czMgPSBkaXZtb2Qoc2VsZi5fbWljcm9zZWNvbmQsIDI1NikKICAgICAgICB1czEsIHVzMiA9IGRpdm1vZCh1czIsIDI1NikKICAgICAgICBiYXNlc3RhdGUgPSBieXRlcyhbeWhpLCB5bG8sIHNlbGYuX21vbnRoLCBzZWxmLl9kYXksCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2hvdXIsIHNlbGYuX21pbnV0ZSwgc2VsZi5fc2Vjb25kLAogICAgICAgICAgICAgICAgICAgICAgICAgICB1czEsIHVzMiwgdXMzXSkKICAgICAgICBpZiBzZWxmLl90emluZm8gaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIChiYXNlc3RhdGUsKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybiAoYmFzZXN0YXRlLCBzZWxmLl90emluZm8pCgogICAgZGVmIF9fc2V0c3RhdGUoc2VsZiwgc3RyaW5nLCB0emluZm8pOgogICAgICAgICh5aGksIHlsbywgc2VsZi5fbW9udGgsIHNlbGYuX2RheSwgc2VsZi5faG91ciwKICAgICAgICAgc2VsZi5fbWludXRlLCBzZWxmLl9zZWNvbmQsIHVzMSwgdXMyLCB1czMpID0gc3RyaW5nCiAgICAgICAgc2VsZi5feWVhciA9IHloaSAqIDI1NiArIHlsbwogICAgICAgIHNlbGYuX21pY3Jvc2Vjb25kID0gKCgodXMxIDw8IDgpIHwgdXMyKSA8PCA4KSB8IHVzMwogICAgICAgIGlmIHR6aW5mbyBpcyBOb25lIG9yIGlzaW5zdGFuY2UodHppbmZvLCBfdHppbmZvX2NsYXNzKToKICAgICAgICAgICAgc2VsZi5fdHppbmZvID0gdHppbmZvCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJiYWQgdHppbmZvIHN0YXRlIGFyZyAlciIgJSB0emluZm8pCgogICAgZGVmIF9fcmVkdWNlX18oc2VsZik6CiAgICAgICAgcmV0dXJuIChzZWxmLl9fY2xhc3NfXywgc2VsZi5fZ2V0c3RhdGUoKSkKCiNmaXhtZSBicnl0aG9uCiNkYXRldGltZS5taW4gPSBkYXRldGltZSgxLCAxLCAxKQojZGF0ZXRpbWUubWF4ID0gZGF0ZXRpbWUoOTk5OSwgMTIsIDMxLCAyMywgNTksIDU5LCA5OTk5OTkpCiNkYXRldGltZS5yZXNvbHV0aW9uID0gdGltZWRlbHRhKG1pY3Jvc2Vjb25kcz0xKQoKCmRlZiBfaXNvd2VlazFtb25kYXkoeWVhcik6CiAgICAjIEhlbHBlciB0byBjYWxjdWxhdGUgdGhlIGRheSBudW1iZXIgb2YgdGhlIE1vbmRheSBzdGFydGluZyB3ZWVrIDEKICAgICMgWFhYIFRoaXMgY291bGQgYmUgZG9uZSBtb3JlIGVmZmljaWVudGx5CiAgICBUSFVSU0RBWSA9IDMKICAgIGZpcnN0ZGF5ID0gX3ltZDJvcmQoeWVhciwgMSwgMSkKICAgIGZpcnN0d2Vla2RheSA9IChmaXJzdGRheSArIDYpICUgNyAjIFNlZSB3ZWVrZGF5KCkgYWJvdmUKICAgIHdlZWsxbW9uZGF5ID0gZmlyc3RkYXkgLSBmaXJzdHdlZWtkYXkKICAgIGlmIGZpcnN0d2Vla2RheSA+IFRIVVJTREFZOgogICAgICAgIHdlZWsxbW9uZGF5ICs9IDcKICAgIHJldHVybiB3ZWVrMW1vbmRheQoKCmNsYXNzIHRpbWV6b25lKHR6aW5mbyk6CiAgICAjX19zbG90c19fID0gJ19vZmZzZXQnLCAnX25hbWUnCgogICAgIyBTZW50aW5lbCB2YWx1ZSB0byBkaXNhbGxvdyBOb25lCiAgICBfT21pdHRlZCA9IG9iamVjdCgpCiAgICAjZGVmIF9fbmV3X18oY2xzLCBvZmZzZXQsIG5hbWU9X09taXR0ZWQpOgogICAgZGVmIF9fbmV3X18oY2xzLCBvZmZzZXQsIG5hbWU9Tm9uZSk6CiAgICAgICAgaWYgbmFtZSBpcyBOb25lOgogICAgICAgICAgIG5hbWU9X09taXR0ZWQKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvZmZzZXQsIHRpbWVkZWx0YSk6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigib2Zmc2V0IG11c3QgYmUgYSB0aW1lZGVsdGEiKQogICAgICAgIGlmIG5hbWUgaXMgY2xzLl9PbWl0dGVkOgogICAgICAgICAgICBpZiBub3Qgb2Zmc2V0OgogICAgICAgICAgICAgICAgcmV0dXJuIGNscy51dGMKICAgICAgICAgICAgbmFtZSA9IE5vbmUKICAgICAgICBlbGlmIG5vdCBpc2luc3RhbmNlKG5hbWUsIHN0cik6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigibmFtZSBtdXN0IGJlIGEgc3RyaW5nIikKICAgICAgICAjaWYgbm90IGNscy5fbWlub2Zmc2V0IDw9IG9mZnNldCA8PSBjbHMuX21heG9mZnNldDoKICAgICAgICAjICAgIHJhaXNlIFZhbHVlRXJyb3IoIm9mZnNldCBtdXN0IGJlIGEgdGltZWRlbHRhIiArIFwKICAgICAgICAjICAgICAgICAgICAgICAgICAgICAgIiBzdHJpY3RseSBiZXR3ZWVuIC10aW1lZGVsdGEoaG91cnM9MjQpIGFuZCIgKyBcCiAgICAgICAgIyAgICAgICAgICAgICAgICAgICAgICIgdGltZWRlbHRhKGhvdXJzPTI0KS4iKQogICAgICAgICNpZiAob2Zmc2V0Lm1pY3Jvc2Vjb25kcyAhPSAwIG9yIG9mZnNldC5zZWNvbmRzICUgNjAgIT0gMCk6CiAgICAgICAgIyAgICByYWlzZSBWYWx1ZUVycm9yKCJvZmZzZXQgbXVzdCBiZSBhIHRpbWVkZWx0YSIgKyBcCiAgICAgICAgIyAgICAgICAgICAgICAgICAgICAgICIgcmVwcmVzZW50aW5nIGEgd2hvbGUgbnVtYmVyIG9mIG1pbnV0ZXMiKQogICAgICAgICNyZXR1cm4gY2xzLl9jcmVhdGUob2Zmc2V0LCBuYW1lKQoKICAgICNAY2xhc3NtZXRob2QKICAgIGRlZiBfY3JlYXRlKGNscywgb2Zmc2V0LCBuYW1lPU5vbmUpOgogICAgICAgIHNlbGYgPSB0emluZm8uX19uZXdfXyhjbHMpCiAgICAgICAgc2VsZi5fb2Zmc2V0ID0gb2Zmc2V0CiAgICAgICAgc2VsZi5fbmFtZSA9IG5hbWUKICAgICAgICByZXR1cm4gc2VsZgoKCiAgICBkZWYgX19nZXRpbml0YXJnc19fKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX25hbWUgaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIChzZWxmLl9vZmZzZXQsKQogICAgICAgIHJldHVybiAoc2VsZi5fb2Zmc2V0LCBzZWxmLl9uYW1lKQoKICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgIGlmIHR5cGUob3RoZXIpICE9IHRpbWV6b25lOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICByZXR1cm4gc2VsZi5fb2Zmc2V0ID09IG90aGVyLl9vZmZzZXQKCiAgICBkZWYgX19oYXNoX18oc2VsZik6CiAgICAgICAgcmV0dXJuIGhhc2goc2VsZi5fb2Zmc2V0KQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICBpZiBzZWxmIGlzIHNlbGYudXRjOgogICAgICAgICAgICByZXR1cm4gJ2RhdGV0aW1lLnRpbWV6b25lLnV0YycKICAgICAgICAjaWYgc2VsZi5fbmFtZSBpcyBOb25lOgogICAgICAgICMgICAgcmV0dXJuICIlcyglcikiICUgKCdkYXRldGltZS4nICsgc2VsZi5fX2NsYXNzX18uX19uYW1lX18sIHNlbGYuX29mZnNldCkKICAgICAgICAjcmV0dXJuICIlcyglciwgJXIpIiAlICgnZGF0ZXRpbWUuJyArIHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBzZWxmLl9vZmZzZXQsIHNlbGYuX25hbWUpCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYudHpuYW1lKE5vbmUpCgogICAgZGVmIHV0Y29mZnNldChzZWxmLCBkdCk6CiAgICAgICAgaWYgaXNpbnN0YW5jZShkdCwgZGF0ZXRpbWUpIG9yIGR0IGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBzZWxmLl9vZmZzZXQKICAgICAgICAjcmFpc2UgVHlwZUVycm9yKCJ1dGNvZmZzZXQoKSBhcmd1bWVudCBtdXN0IGJlIGEgZGF0ZXRpbWUgaW5zdGFuY2UiICsgXAogICAgICAgICMgICAgICAgICAgICAgICAgIiBvciBOb25lIikKCiAgICBkZWYgdHpuYW1lKHNlbGYsIGR0KToKICAgICAgICBpZiBpc2luc3RhbmNlKGR0LCBkYXRldGltZSkgb3IgZHQgaXMgTm9uZToKICAgICAgICAgICAgaWYgc2VsZi5fbmFtZSBpcyBOb25lOgogICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX25hbWVfZnJvbV9vZmZzZXQoc2VsZi5fb2Zmc2V0KQogICAgICAgICAgICByZXR1cm4gc2VsZi5fbmFtZQogICAgICAgICNyYWlzZSBUeXBlRXJyb3IoInR6bmFtZSgpIGFyZ3VtZW50IG11c3QgYmUgYSBkYXRldGltZSBpbnN0YW5jZSIgKyBcCiAgICAgICAgIyAgICAgICAgICAgICAgICAiIG9yIE5vbmUiKQoKICAgIGRlZiBkc3Qoc2VsZiwgZHQpOgogICAgICAgIGlmIGlzaW5zdGFuY2UoZHQsIGRhdGV0aW1lKSBvciBkdCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gTm9uZQogICAgICAgICNyYWlzZSBUeXBlRXJyb3IoImRzdCgpIGFyZ3VtZW50IG11c3QgYmUgYSBkYXRldGltZSBpbnN0YW5jZSIgKyBcCiAgICAgICAgIyAgICAgICAgICAgICAgICAiIG9yIE5vbmUiKQoKICAgIGRlZiBmcm9tdXRjKHNlbGYsIGR0KToKICAgICAgICBpZiBpc2luc3RhbmNlKGR0LCBkYXRldGltZSk6CiAgICAgICAgICAgICNpZiBkdC50emluZm8gaXMgbm90IHNlbGY6CiAgICAgICAgICAgICMgICAgcmFpc2UgVmFsdWVFcnJvcigiZnJvbXV0YzogZHQudHppbmZvICIgKyBcCiAgICAgICAgICAgICMgICAgICAgICAgICAgICAgICAgICAiaXMgbm90IHNlbGYiKQogICAgICAgICAgICByZXR1cm4gZHQgKyBzZWxmLl9vZmZzZXQKICAgICAgICAjcmFpc2UgVHlwZUVycm9yKCJmcm9tdXRjKCkgYXJndW1lbnQgbXVzdCBiZSBhIGRhdGV0aW1lIGluc3RhbmNlIiArIFwKICAgICAgICAjICAgICAgICAgICAgICAgICIgb3IgTm9uZSIpCgojICAgIF9tYXhvZmZzZXQgPSB0aW1lZGVsdGEoaG91cnM9MjMsIG1pbnV0ZXM9NTkpCiMgICAgX21pbm9mZnNldCA9IC1fbWF4b2Zmc2V0CgogICAgQHN0YXRpY21ldGhvZAogICAgZGVmIF9uYW1lX2Zyb21fb2Zmc2V0KGRlbHRhKToKICAgICAgICBpZiBkZWx0YSA8IHRpbWVkZWx0YSgwKToKICAgICAgICAgICAgc2lnbiA9ICctJwogICAgICAgICAgICBkZWx0YSA9IC1kZWx0YQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNpZ24gPSAnKycKICAgICAgICBob3VycywgcmVzdCA9IGRpdm1vZChkZWx0YSwgdGltZWRlbHRhKGhvdXJzPTEpKQogICAgICAgIG1pbnV0ZXMgPSByZXN0IC8gdGltZWRlbHRhKG1pbnV0ZXM9MSkKICAgICAgICAjcmV0dXJuICdVVEN7fXs6MDJkfTp7OjAyZH0nLmZvcm1hdChzaWduLCBob3VycywgbWludXRlcykKCiNmaXhtZSBicnl0aG9uCiN0aW1lem9uZS51dGMgPSB0aW1lem9uZS5fY3JlYXRlKHRpbWVkZWx0YSgwKSkKI3RpbWV6b25lLm1pbiA9IHRpbWV6b25lLl9jcmVhdGUodGltZXpvbmUuX21pbm9mZnNldCkKI3RpbWV6b25lLm1heCA9IHRpbWV6b25lLl9jcmVhdGUodGltZXpvbmUuX21heG9mZnNldCkKCgo=',
'/Lib/itertools.py':'',
'/Lib/_sre.py':'',
'/Lib/datetime.pyj':'',
'/Lib/sre_compile.py':'',
'/Lib/_collections.py':'',
'/Lib/dis.pyj':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgJGdsb2JhbHM9X19CUllUSE9OX18uc2NvcGVbImRpcy5weSJdLl9fZGljdF9fO3ZhciBkaXM9KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dHJ5e3ZhciAkbnM9JE1ha2VBcmdzKCJkaXMiLGFyZ3VtZW50cyxbInNyYyJdLHt9LG51bGwsbnVsbCk7Zm9yKCR2YXIgaW4gJG5zKWV2YWwoInZhciAiKyR2YXIrIj0kbnNbJHZhcl0iKTt2YXIgJGxvY2Fscz1fX0JSWVRIT05fXy5zY29wZS5oaWZsM3Npci5fX2RpY3RfXz0kbnM7cmV0dXJuIEpTT2JqZWN0Ll9fY2FsbF9fKF9fQlJZVEhPTl9fLl9fZ2V0YXR0cl9fKCJweTJqcyIpLl9fY2FsbF9fKHNyYykpLl9fZ2V0YXR0cl9fKCJ0b19qcyIpLl9fY2FsbF9fKCk7fWNhdGNoKGVycjQpe3Rocm93IF9fQlJZVEhPTl9fLmV4Y2VwdGlvbihlcnI0KTt9fTt9KSgpO2Rpcy5fX25hbWVfXz0iZGlzIjskZ2xvYmFscy5kaXM9ZGlzO3JldHVybntkaXM6ZGlzLF9fZ2V0YXR0cl9fOmZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdO30sX19zZXRhdHRyX186ZnVuY3Rpb24oYXR0cix2YWx1ZSl7dGhpc1thdHRyXT12YWx1ZTt9fTt9KSgpOw==',
'/Lib/antigravity.py':'aW1wb3J0IHdlYmJyb3dzZXIKaW1wb3J0IGhhc2hsaWIKCndlYmJyb3dzZXIub3BlbigiaHR0cDovL3hrY2QuY29tLzM1My8iKQoKZGVmIGdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgZGF0ZWRvdyk6CiAgICAnJydDb21wdXRlIGdlb2hhc2goKSB1c2luZyB0aGUgTXVucm9lIGFsZ29yaXRobS4KCiAgICA+Pj4gZ2VvaGFzaCgzNy40MjE1NDIsIC0xMjIuMDg1NTg5LCBiJzIwMDUtMDUtMjYtMTA0NTguNjgnKQogICAgMzcuODU3NzEzIC0xMjIuNTQ0NTQzCgogICAgJycnCiAgICAjIGh0dHA6Ly94a2NkLmNvbS80MjYvCiAgICBoID0gaGFzaGxpYi5tZDUoZGF0ZWRvdykuaGV4ZGlnZXN0KCkKICAgIHAsIHEgPSBbKCclZicgJSBmbG9hdC5mcm9taGV4KCcwLicgKyB4KSkgZm9yIHggaW4gKGhbOjE2XSwgaFsxNjozMl0pXQogICAgcHJpbnQoJyVkJXMgJWQlcycgJSAobGF0aXR1ZGUsIHBbMTpdLCBsb25naXR1ZGUsIHFbMTpdKSkK',
'/Lib/sys.pyj':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgJGdsb2JhbHM9X19CUllUSE9OX18uc2NvcGVbInN5cy5weSJdLl9fZGljdF9fO3ZhciBfX3N0ZG91dF9fPSRnbG9iYWxzLl9fc3Rkb3V0X189Z2V0YXR0ci5fX2NhbGxfXyhkb2MsIiRzdGRvdXQiKTt2YXIgX19zdGRlcnJfXz0kZ2xvYmFscy5fX3N0ZGVycl9fPWdldGF0dHIuX19jYWxsX18oZG9jLCIkc3RkZXJyIik7dmFyIHN0ZG91dD0kZ2xvYmFscy5zdGRvdXQ9Z2V0YXR0ci5fX2NhbGxfXyhkb2MsIiRzdGRvdXQiKTt2YXIgc3RkZXJyPSRnbG9iYWxzLnN0ZGVycj1nZXRhdHRyLl9fY2FsbF9fKGRvYywiJHN0ZGVyciIpO3ZhciBtb2R1bGVzPSRnbG9iYWxzLm1vZHVsZXM9X19CUllUSE9OX18uX19nZXRhdHRyX18oIm1vZHVsZXMiKTt2YXIgaGFzX2xvY2FsX3N0b3JhZ2U9JGdsb2JhbHMuaGFzX2xvY2FsX3N0b3JhZ2U9X19CUllUSE9OX18uX19nZXRhdHRyX18oImhhc19sb2NhbF9zdG9yYWdlIik7dmFyIGhhc19qc29uPSRnbG9iYWxzLmhhc19qc29uPV9fQlJZVEhPTl9fLl9fZ2V0YXR0cl9fKCJoYXNfanNvbiIpO3ZhciB2ZXJzaW9uX2luZm89JGdsb2JhbHMudmVyc2lvbl9pbmZvPV9fQlJZVEhPTl9fLl9fZ2V0YXR0cl9fKCJ2ZXJzaW9uX2luZm8iKTt2YXIgcGF0aD0kZ2xvYmFscy5wYXRoPV9fQlJZVEhPTl9fLl9fZ2V0YXR0cl9fKCJwYXRoIik7dmFyIGJ1aWx0aW5fbW9kdWxlX25hbWVzPSRnbG9iYWxzLmJ1aWx0aW5fbW9kdWxlX25hbWVzPWxpc3QoWydwb3NpeCddKTt2YXIgYnl0ZW9yZGVyPSRnbG9iYWxzLmJ5dGVvcmRlcj0nbGl0dGxlJzt2YXIgbWF4c2l6ZT0kZ2xvYmFscy5tYXhzaXplPU51bWJlcig5MDA3MTk5MjU0NzQwOTkyKTt2YXIgbWF4dW5pY29kZT0kZ2xvYmFscy5tYXh1bmljb2RlPU51bWJlcigxMTE0MTExKTt2YXIgcGxhdGZvcm09JGdsb2JhbHMucGxhdGZvcm09ImJyeXRob24iO3ZhciB3YXJub3B0aW9ucz0kZ2xvYmFscy53YXJub3B0aW9ucz1saXN0KFtdKTt2YXIgJGZsYWdfY2xhc3M9KGZ1bmN0aW9uKCl7dmFyICRjbGFzcz1uZXcgT2JqZWN0KCk7JGNsYXNzLl9faW5pdF9fPShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3RyeXt2YXIgJG5zPSRNYWtlQXJncygiX19pbml0X18iLGFyZ3VtZW50cyxbInNlbGYiXSx7fSxudWxsLG51bGwpO2ZvcigkdmFyIGluICRucylldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIik7dmFyICRsb2NhbHM9X19CUllUSE9OX18uc2NvcGUuZjU1azlvNWYuX19kaWN0X189JG5zO3NlbGYuX19zZXRhdHRyX18oImRlYnVnIixOdW1iZXIoMCkpO3NlbGYuX19zZXRhdHRyX18oImluc3BlY3QiLE51bWJlcigwKSk7c2VsZi5fX3NldGF0dHJfXygiaW50ZXJhY3RpdmUiLE51bWJlcigwKSk7c2VsZi5fX3NldGF0dHJfXygib3B0aW1pemUiLE51bWJlcigwKSk7c2VsZi5fX3NldGF0dHJfXygiZG9udF93cml0ZV9ieXRlY29kZSIsTnVtYmVyKDApKTtzZWxmLl9fc2V0YXR0cl9fKCJub191c2VyX3NpdGUiLE51bWJlcigwKSk7c2VsZi5fX3NldGF0dHJfXygibm9fc2l0ZSIsTnVtYmVyKDApKTtzZWxmLl9fc2V0YXR0cl9fKCJpZ25vcmVfZW52aXJvbm1lbnQiLE51bWJlcigwKSk7c2VsZi5fX3NldGF0dHJfXygidmVyYm9zZSIsTnVtYmVyKDApKTtzZWxmLl9fc2V0YXR0cl9fKCJieXRlc193YXJuaW5nIixOdW1iZXIoMCkpO3NlbGYuX19zZXRhdHRyX18oInF1aWV0IixOdW1iZXIoMCkpO3NlbGYuX19zZXRhdHRyX18oImhhc2hfcmFuZG9taXphdGlvbiIsTnVtYmVyKDEpKTt9Y2F0Y2goZXJyNCl7dGhyb3cgX19CUllUSE9OX18uZXhjZXB0aW9uKGVycjQpO319O30pKCk7JGNsYXNzLl9faW5pdF9fLl9fbmFtZV9fPSJfX2luaXRfXyI7cmV0dXJuICRjbGFzczt9KSgpO3ZhciBmbGFnX2NsYXNzPSRjbGFzc19jb25zdHJ1Y3RvcigiZmxhZ19jbGFzcyIsJGZsYWdfY2xhc3MpO19fQlJZVEhPTl9fLnNjb3BlWyJzeXMucHkiXS5fX2RpY3RfXy5mbGFnX2NsYXNzPWZsYWdfY2xhc3M7dmFyIGZsYWdzPSRnbG9iYWxzLmZsYWdzPWZsYWdfY2xhc3MuX19jYWxsX18oKTtyZXR1cm57X19zdGRvdXRfXzpfX3N0ZG91dF9fLF9fc3RkZXJyX186X19zdGRlcnJfXyxzdGRvdXQ6c3Rkb3V0LHN0ZGVycjpzdGRlcnIsbW9kdWxlczptb2R1bGVzLGhhc19sb2NhbF9zdG9yYWdlOmhhc19sb2NhbF9zdG9yYWdlLGhhc19qc29uOmhhc19qc29uLHZlcnNpb25faW5mbzp2ZXJzaW9uX2luZm8scGF0aDpwYXRoLGJ1aWx0aW5fbW9kdWxlX25hbWVzOmJ1aWx0aW5fbW9kdWxlX25hbWVzLGJ5dGVvcmRlcjpieXRlb3JkZXIsbWF4c2l6ZTptYXhzaXplLG1heHVuaWNvZGU6bWF4dW5pY29kZSxwbGF0Zm9ybTpwbGF0Zm9ybSx3YXJub3B0aW9uczp3YXJub3B0aW9ucyxmbGFnX2NsYXNzOmZsYWdfY2xhc3MsZmxhZ3M6ZmxhZ3MsX19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxfX3NldGF0dHJfXzpmdW5jdGlvbihhdHRyLHZhbHVlKXt0aGlzW2F0dHJdPXZhbHVlO319O30pKCk7',
'/Lib/errno.pyj':'',
'/Lib/re.py':'',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/types.py':'IiIiCkRlZmluZSBuYW1lcyBmb3IgYnVpbHQtaW4gdHlwZXMgdGhhdCBhcmVuJ3QgZGlyZWN0bHkgYWNjZXNzaWJsZSBhcyBhIGJ1aWx0aW4uCiIiIgppbXBvcnQgc3lzCgojIEl0ZXJhdG9ycyBpbiBQeXRob24gYXJlbid0IGEgbWF0dGVyIG9mIHR5cGUgYnV0IG9mIHByb3RvY29sLiAgQSBsYXJnZQojIGFuZCBjaGFuZ2luZyBudW1iZXIgb2YgYnVpbHRpbiB0eXBlcyBpbXBsZW1lbnQgKnNvbWUqIGZsYXZvciBvZgojIGl0ZXJhdG9yLiAgRG9uJ3QgY2hlY2sgdGhlIHR5cGUhICBVc2UgaGFzYXR0ciB0byBjaGVjayBmb3IgYm90aAojICJfX2l0ZXJfXyIgYW5kICJfX25leHRfXyIgYXR0cmlidXRlcyBpbnN0ZWFkLgoKI2RlZiBfZigpOiBwYXNzCiNGdW5jdGlvblR5cGUgPSB0eXBlKF9mKQojTGFtYmRhVHlwZSA9IHR5cGUobGFtYmRhOiBOb25lKSAgICAgICAgICMgU2FtZSBhcyBGdW5jdGlvblR5cGUKI0NvZGVUeXBlID0gdHlwZShfZi5fX2NvZGVfXykKCiNkZWYgX2coKToKIyAgICB5aWVsZCAxCiNHZW5lcmF0b3JUeXBlID0gdHlwZShfZygpKQoKY2xhc3MgX0M6CiAgICBkZWYgX20oc2VsZik6IHBhc3MKTWV0aG9kVHlwZSA9IHR5cGUoX0MoKS5fbSkKCkJ1aWx0aW5GdW5jdGlvblR5cGUgPSB0eXBlKGxlbikKQnVpbHRpbk1ldGhvZFR5cGUgPSB0eXBlKFtdLmFwcGVuZCkgICAgICMgU2FtZSBhcyBCdWlsdGluRnVuY3Rpb25UeXBlCgpNb2R1bGVUeXBlID0gdHlwZShzeXMpCgojdHJ5OgojICAgIHJhaXNlIFR5cGVFcnJvcgojZXhjZXB0IFR5cGVFcnJvcjoKIyAgICB0YiA9IHN5cy5leGNfaW5mbygpWzJdCiMgICAgVHJhY2ViYWNrVHlwZSA9IHR5cGUodGIpCiMgICAgRnJhbWVUeXBlID0gdHlwZSh0Yi50Yl9mcmFtZSkKIyAgICB0YiA9IE5vbmU7IGRlbCB0YgoKIyBGb3IgSnl0aG9uLCB0aGUgZm9sbG93aW5nIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsCiNHZXRTZXREZXNjcmlwdG9yVHlwZSA9IHR5cGUoRnVuY3Rpb25UeXBlLl9fY29kZV9fKQojTWVtYmVyRGVzY3JpcHRvclR5cGUgPSB0eXBlKEZ1bmN0aW9uVHlwZS5fX2dsb2JhbHNfXykKCiNmaXhtZSBicnl0aG9uCiNkZWwgc3lzLCBfZiwgX2csIF9DLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTm90IGZvciBleHBvcnQK',
'/Lib/local_storage.pyj':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgJGdsb2JhbHM9X19CUllUSE9OX18uc2NvcGVbImxvY2FsX3N0b3JhZ2UucHkiXS5fX2RpY3RfXzt2YXIgJExvY2FsU3RvcmFnZT0oZnVuY3Rpb24oKXt2YXIgJGNsYXNzPW5ldyBPYmplY3QoKTskY2xhc3MuX19pbml0X189KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dHJ5e3ZhciAkbnM9JE1ha2VBcmdzKCJfX2luaXRfXyIsYXJndW1lbnRzLFsic2VsZiJdLHt9LG51bGwsbnVsbCk7Zm9yKCR2YXIgaW4gJG5zKWV2YWwoInZhciAiKyR2YXIrIj0kbnNbJHZhcl0iKTt2YXIgJGxvY2Fscz1fX0JSWVRIT05fXy5zY29wZS51M2ZkcHBvcC5fX2RpY3RfXz0kbnM7aWYoYm9vbCghYm9vbChfX0JSWVRIT05fXy5fX2dldGF0dHJfXygiaGFzX2xvY2FsX3N0b3JhZ2UiKSkpKXRocm93IE5hbWVFcnJvci5fX2NhbGxfXygnbG9jYWwgc3RvcmFnZSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyJyk7c2VsZi5fX3NldGF0dHJfXygic3RvcmUiLF9fQlJZVEhPTl9fLl9fZ2V0YXR0cl9fKCJsb2NhbF9zdG9yYWdlIikuX19jYWxsX18oKSk7fWNhdGNoKGVycjIpe3Rocm93IF9fQlJZVEhPTl9fLmV4Y2VwdGlvbihlcnIyKTt9fTt9KSgpOyRjbGFzcy5fX2luaXRfXy5fX25hbWVfXz0iX19pbml0X18iOyRjbGFzcy5fX2RlbGl0ZW1fXz0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt0cnl7dmFyICRucz0kTWFrZUFyZ3MoIl9fZGVsaXRlbV9fIixhcmd1bWVudHMsWyJzZWxmIiwia2V5Il0se30sbnVsbCxudWxsKTtmb3IoJHZhciBpbiAkbnMpZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpO3ZhciAkbG9jYWxzPV9fQlJZVEhPTl9fLnNjb3BlLnp5eGtuZHJ1Ll9fZGljdF9fPSRucztzZWxmLl9fZ2V0YXR0cl9fKCJzdG9yZSIpLl9fZ2V0YXR0cl9fKCJyZW1vdmVJdGVtIikuX19jYWxsX18oa2V5KTt9Y2F0Y2goZXJyMil7dGhyb3cgX19CUllUSE9OX18uZXhjZXB0aW9uKGVycjIpO319O30pKCk7JGNsYXNzLl9fZGVsaXRlbV9fLl9fbmFtZV9fPSJfX2RlbGl0ZW1fXyI7JGNsYXNzLl9fZ2V0aXRlbV9fPShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3RyeXt2YXIgJG5zPSRNYWtlQXJncygiX19nZXRpdGVtX18iLGFyZ3VtZW50cyxbInNlbGYiLCJrZXkiXSx7fSxudWxsLG51bGwpO2ZvcigkdmFyIGluICRucylldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIik7dmFyICRsb2NhbHM9X19CUllUSE9OX18uc2NvcGVbIjd0dmFpNWNrIl0uX19kaWN0X189JG5zO3ZhciByZXM9JGxvY2Fscy5yZXM9c2VsZi5fX2dldGF0dHJfXygic3RvcmUiKS5fX2dldGF0dHJfXygiZ2V0SXRlbSIpLl9fY2FsbF9fKGtleSk7aWYoYm9vbChyZXMpKXJldHVybiByZXM7dGhyb3cgS2V5RXJyb3IuX19jYWxsX18oa2V5KTt9Y2F0Y2goZXJyMil7dGhyb3cgX19CUllUSE9OX18uZXhjZXB0aW9uKGVycjIpO319O30pKCk7JGNsYXNzLl9fZ2V0aXRlbV9fLl9fbmFtZV9fPSJfX2dldGl0ZW1fXyI7JGNsYXNzLl9fc2V0aXRlbV9fPShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3RyeXt2YXIgJG5zPSRNYWtlQXJncygiX19zZXRpdGVtX18iLGFyZ3VtZW50cyxbInNlbGYiLCJrZXkiLCJ2YWx1ZSJdLHt9LG51bGwsbnVsbCk7Zm9yKCR2YXIgaW4gJG5zKWV2YWwoInZhciAiKyR2YXIrIj0kbnNbJHZhcl0iKTt2YXIgJGxvY2Fscz1fX0JSWVRIT05fXy5zY29wZVsiMnFveW12N3QiXS5fX2RpY3RfXz0kbnM7c2VsZi5fX2dldGF0dHJfXygic3RvcmUiKS5fX2dldGF0dHJfXygic2V0SXRlbSIpLl9fY2FsbF9fKGtleSx2YWx1ZSk7fWNhdGNoKGVycjIpe3Rocm93IF9fQlJZVEhPTl9fLmV4Y2VwdGlvbihlcnIyKTt9fTt9KSgpOyRjbGFzcy5fX3NldGl0ZW1fXy5fX25hbWVfXz0iX19zZXRpdGVtX18iOyRjbGFzcy5fX2NvbnRhaW5zX189KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dHJ5e3ZhciAkbnM9JE1ha2VBcmdzKCJfX2NvbnRhaW5zX18iLGFyZ3VtZW50cyxbInNlbGYiLCJrZXkiXSx7fSxudWxsLG51bGwpO2ZvcigkdmFyIGluICRucylldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIik7dmFyICRsb2NhbHM9X19CUllUSE9OX18uc2NvcGUuYmxhcGxldWEuX19kaWN0X189JG5zO3ZhciByZXM9JGxvY2Fscy5yZXM9c2VsZi5fX2dldGF0dHJfXygic3RvcmUiKS5fX2dldGF0dHJfXygiZ2V0SXRlbSIpLl9fY2FsbF9fKGtleSk7aWYoYm9vbChyZXMpKXJldHVybiBUcnVlO3JldHVybiBGYWxzZTt9Y2F0Y2goZXJyMil7dGhyb3cgX19CUllUSE9OX18uZXhjZXB0aW9uKGVycjIpO319O30pKCk7JGNsYXNzLl9fY29udGFpbnNfXy5fX25hbWVfXz0iX19jb250YWluc19fIjskY2xhc3Mua2V5cz0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt0cnl7dmFyICRucz0kTWFrZUFyZ3MoImtleXMiLGFyZ3VtZW50cyxbInNlbGYiXSx7fSxudWxsLG51bGwpO2ZvcigkdmFyIGluICRucylldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIik7dmFyICRsb2NhbHM9X19CUllUSE9OX18uc2NvcGUudnVzZGg1eXIuX19kaWN0X189JG5zO3JldHVybiBsaXN0Ll9fY2FsbF9fKHNlbGYuX19nZXRhdHRyX18oInN0b3JlIikpO31jYXRjaChlcnIyKXt0aHJvdyBfX0JSWVRIT05fXy5leGNlcHRpb24oZXJyMik7fX07fSkoKTskY2xhc3Mua2V5cy5fX25hbWVfXz0ia2V5cyI7JGNsYXNzLnZhbHVlcz0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt0cnl7dmFyICRucz0kTWFrZUFyZ3MoInZhbHVlcyIsYXJndW1lbnRzLFsic2VsZiJdLHt9LG51bGwsbnVsbCk7Zm9yKCR2YXIgaW4gJG5zKWV2YWwoInZhciAiKyR2YXIrIj0kbnNbJHZhcl0iKTt2YXIgJGxvY2Fscz1fX0JSWVRIT05fXy5zY29wZS5mZnNpYnBxdi5fX2RpY3RfXz0kbnM7cmV0dXJuICRsaXN0X2NvbXAoeydzZWxmJzpzZWxmfSwic2VsZi5fX2dldGl0ZW1fXyhrKSAiLCJmb3IgayBpbiBzZWxmLmtleXMoKSIpO31jYXRjaChlcnIyKXt0aHJvdyBfX0JSWVRIT05fXy5leGNlcHRpb24oZXJyMik7fX07fSkoKTskY2xhc3MudmFsdWVzLl9fbmFtZV9fPSJ2YWx1ZXMiOyRjbGFzcy5pdGVtcz0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt0cnl7dmFyICRucz0kTWFrZUFyZ3MoIml0ZW1zIixhcmd1bWVudHMsWyJzZWxmIl0se30sbnVsbCxudWxsKTtmb3IoJHZhciBpbiAkbnMpZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpO3ZhciAkbG9jYWxzPV9fQlJZVEhPTl9fLnNjb3BlWyI4NG9od3h5OSJdLl9fZGljdF9fPSRucztyZXR1cm4gemlwLl9fY2FsbF9fKHNlbGYuX19nZXRhdHRyX18oImtleXMiKS5fX2NhbGxfXygpLHNlbGYuX19nZXRhdHRyX18oInZhbHVlcyIpLl9fY2FsbF9fKCkpO31jYXRjaChlcnIyKXt0aHJvdyBfX0JSWVRIT05fXy5leGNlcHRpb24oZXJyMik7fX07fSkoKTskY2xhc3MuaXRlbXMuX19uYW1lX189Iml0ZW1zIjtyZXR1cm4gJGNsYXNzO30pKCk7dmFyIExvY2FsU3RvcmFnZT0kY2xhc3NfY29uc3RydWN0b3IoIkxvY2FsU3RvcmFnZSIsJExvY2FsU3RvcmFnZSk7X19CUllUSE9OX18uc2NvcGVbImxvY2FsX3N0b3JhZ2UucHkiXS5fX2RpY3RfXy5Mb2NhbFN0b3JhZ2U9TG9jYWxTdG9yYWdlO3ZhciBzdG9yYWdlPSRnbG9iYWxzLnN0b3JhZ2U9TG9jYWxTdG9yYWdlLl9fY2FsbF9fKCk7cmV0dXJue0xvY2FsU3RvcmFnZTpMb2NhbFN0b3JhZ2Usc3RvcmFnZTpzdG9yYWdlLF9fZ2V0YXR0cl9fOmZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdO30sX19zZXRhdHRyX186ZnVuY3Rpb24oYXR0cix2YWx1ZSl7dGhpc1thdHRyXT12YWx1ZTt9fTt9KSgpOw==',
'/Lib/warnings.py':'',
'/Lib/collections.pyj':'',
'/Lib/mytest.py':'',
'/Lib/webbrowser.py':'X19hbGxfXyA9IFsiRXJyb3IiLCAib3BlbiIsICJvcGVuX25ldyIsICJvcGVuX25ld190YWIiXQoKY2xhc3MgRXJyb3IoRXhjZXB0aW9uKToKICAgIHBhc3MKCl90YXJnZXQgPSB7IDA6ICcnLCAxOiAnX2JsYW5rJywgMjogJ19uZXcnIH0gICMgaGFjay4uLgoKCmRlZiBvcGVuKHVybCwgbmV3PTAsIGF1dG9yYWlzZT1UcnVlKToKICAgICIiIiAKICAgIG5ldyB3aW5kb3cgb3IgdGFiIGlzIG5vdCBjb250cm9sbGFibGUKICAgIG9uIHRoZSBjbGllbnQgc2lkZS4gYXV0b3JhaXNlIG5vdCBhdmFpbGFibGUuCiAgICAiIiIKICAgIGlmIHdpbi5vcGVuKHVybCwgX3RhcmdldFtuZXddKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKZGVmIG9wZW5fbmV3KHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDEpCgpkZWYgb3Blbl9uZXdfdGFiKHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDIpCgoK',
'/Lib/this.py':'cyA9ICIiIkd1ciBNcmEgYnMgQ2xndWJhLCBvbCBHdnogQ3JncmVmCgpPcm5oZ3ZzaHkgdmYgb3JnZ3JlIGd1bmEgaHR5bC4KUmtjeXZwdmcgdmYgb3JnZ3JlIGd1bmEgdnpjeXZwdmcuCkZ2emN5ciB2ZiBvcmdncmUgZ3VuYSBwYnpjeXJrLgpQYnpjeXJrIHZmIG9yZ2dyZSBndW5hIHBiemN5dnBuZ3JxLgpTeW5nIHZmIG9yZ2dyZSBndW5hIGFyZmdycS4KRmNuZWZyIHZmIG9yZ2dyZSBndW5hIHFyYWZyLgpFcm5xbm92eXZnbCBwYmhhZ2YuCkZjcnB2bnkgcG5mcmYgbmVyYSdnIGZjcnB2bnkgcmFiaHR1IGdiIG9lcm54IGd1ciBlaHlyZi4KTnlndWJodHUgY2VucGd2cG55dmdsIG9ybmdmIGNoZXZnbC4KUmVlYmVmIGZ1Ymh5cSBhcmlyZSBjbmZmIGZ2eXJhZ3lsLgpIYXlyZmYgcmtjeXZwdmd5bCBmdnlyYXBycS4KVmEgZ3VyIHNucHIgYnMgbnpvdnRodmdsLCBlcnNoZnIgZ3VyIGdyemNnbmd2YmEgZ2IgdGhyZmYuCkd1cmVyIGZ1Ymh5cSBvciBiYXItLSBuYXEgY2Vyc3Jlbm95bCBiYXlsIGJhciAtLWJvaXZiaGYgam5sIGdiIHFiIHZnLgpOeWd1Ymh0dSBndW5nIGpubCB6bmwgYWJnIG9yIGJvaXZiaGYgbmcgc3ZlZmcgaGF5cmZmIGxiaCdlciBRaGdwdS4KQWJqIHZmIG9yZ2dyZSBndW5hIGFyaXJlLgpOeWd1Ymh0dSBhcmlyZSB2ZiBic2dyYSBvcmdncmUgZ3VuYSAqZXZ0dWcqIGFiai4KVnMgZ3VyIHZ6Y3lyenJhZ25ndmJhIHZmIHVuZXEgZ2IgcmtjeW52YSwgdmcnZiBuIG9ucSB2cXJuLgpWcyBndXIgdnpjeXJ6cmFnbmd2YmEgdmYgcm5mbCBnYiBya2N5bnZhLCB2ZyB6bmwgb3IgbiB0YmJxIHZxcm4uCkFuenJmY25wcmYgbmVyIGJhciB1YmF4dmF0IHRlcm5nIHZxcm4gLS0geXJnJ2YgcWIgemJlciBicyBndWJmciEiIiIKCmQgPSB7fQpmb3IgYyBpbiAoNjUsIDk3KToKICAgIGZvciBpIGluIHJhbmdlKDI2KToKICAgICAgICBkW2NocihpK2MpXSA9IGNocigoaSsxMykgJSAyNiArIGMpCgpwcmludCgiIi5qb2luKFtkLmdldChjLCBjKSBmb3IgYyBpbiBzXSkpCg==',
'/Lib/string.pyj':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgJGdsb2JhbHM9X19CUllUSE9OX18uc2NvcGVbInN0cmluZy5weSJdLl9fZGljdF9fO3ZhciB3aGl0ZXNwYWNlPSRnbG9iYWxzLndoaXRlc3BhY2U9JyBcdFxuXHJcdlxmJzt2YXIgYXNjaWlfbG93ZXJjYXNlPSRnbG9iYWxzLmFzY2lpX2xvd2VyY2FzZT0nYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO3ZhciBhc2NpaV91cHBlcmNhc2U9JGdsb2JhbHMuYXNjaWlfdXBwZXJjYXNlPSdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWic7dmFyIGFzY2lpX2xldHRlcnM9JGdsb2JhbHMuYXNjaWlfbGV0dGVycz1hc2NpaV9sb3dlcmNhc2UuX19hZGRfXyhhc2NpaV91cHBlcmNhc2UpO3ZhciBkaWdpdHM9JGdsb2JhbHMuZGlnaXRzPScwMTIzNDU2Nzg5Jzt2YXIgaGV4ZGlnaXRzPSRnbG9iYWxzLmhleGRpZ2l0cz1kaWdpdHMuX19hZGRfXygnYWJjZGVmJykuX19hZGRfXygnQUJDREVGJyk7dmFyIG9jdGRpZ2l0cz0kZ2xvYmFscy5vY3RkaWdpdHM9JzAxMjM0NTY3Jzt2YXIgcHVuY3R1YXRpb249JGdsb2JhbHMucHVuY3R1YXRpb249IiFcIiMkJSYnKCkqKywtLi86Ozw9Pj9AW1xdXl9ge3x9fiI7dmFyIHByaW50YWJsZT0kZ2xvYmFscy5wcmludGFibGU9ZGlnaXRzLl9fYWRkX18oYXNjaWlfbGV0dGVycykuX19hZGRfXyhwdW5jdHVhdGlvbikuX19hZGRfXyh3aGl0ZXNwYWNlKTt2YXIgY2Fwd29yZHM9KGZ1bmN0aW9uKE5vbmUpe3JldHVybiBmdW5jdGlvbigpe3RyeXt2YXIgJG5zPSRNYWtlQXJncygiY2Fwd29yZHMiLGFyZ3VtZW50cyxbInMiXSx7InNlcCI6Tm9uZX0sbnVsbCxudWxsKTtmb3IoJHZhciBpbiAkbnMpZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpO3ZhciAkbG9jYWxzPV9fQlJZVEhPTl9fLnNjb3BlLnMxODI4Nmw4Ll9fZGljdF9fPSRuczsiY2Fwd29yZHMocyBbLHNlcF0pIC0+IHN0cmluZ1xuXG4gICAgU3BsaXQgdGhlIGFyZ3VtZW50IGludG8gd29yZHMgdXNpbmcgc3BsaXQsIGNhcGl0YWxpemUgZWFjaFxuICAgIHdvcmQgdXNpbmcgY2FwaXRhbGl6ZSwgYW5kIGpvaW4gdGhlIGNhcGl0YWxpemVkIHdvcmRzIHVzaW5nXG4gICAgam9pbi4gIElmIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgc2VwIGlzIGFic2VudCBvciBOb25lLFxuICAgIHJ1bnMgb2Ygd2hpdGVzcGFjZSBjaGFyYWN0ZXJzIGFyZSByZXBsYWNlZCBieSBhIHNpbmdsZSBzcGFjZVxuICAgIGFuZCBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIGFyZSByZW1vdmVkLCBvdGhlcndpc2VcbiAgICBzZXAgaXMgdXNlZCB0byBzcGxpdCBhbmQgam9pbiB0aGUgd29yZHMuXG5cbiAgICAiO3JldHVybiAkdGVzdF9leHByKCR0ZXN0X2l0ZW0oc2VwKXx8JHRlc3RfaXRlbSgnICcpKS5fX2dldGF0dHJfXygiam9pbiIpLl9fY2FsbF9fKCRnZW5fZXhwcih7J3MnOnMsJ3NlcCc6c2VwfSwieC5jYXBpdGFsaXplKCkgIiwiZm9yIHggaW4gcy5zcGxpdChzZXApIikpO31jYXRjaChlcnI0KXt0aHJvdyBfX0JSWVRIT05fXy5leGNlcHRpb24oZXJyNCk7fX07fSkoTm9uZSk7Y2Fwd29yZHMuX19uYW1lX189ImNhcHdvcmRzIjskZ2xvYmFscy5jYXB3b3Jkcz1jYXB3b3JkcztyZXR1cm57d2hpdGVzcGFjZTp3aGl0ZXNwYWNlLGFzY2lpX2xvd2VyY2FzZTphc2NpaV9sb3dlcmNhc2UsYXNjaWlfdXBwZXJjYXNlOmFzY2lpX3VwcGVyY2FzZSxhc2NpaV9sZXR0ZXJzOmFzY2lpX2xldHRlcnMsZGlnaXRzOmRpZ2l0cyxoZXhkaWdpdHM6aGV4ZGlnaXRzLG9jdGRpZ2l0czpvY3RkaWdpdHMscHVuY3R1YXRpb246cHVuY3R1YXRpb24scHJpbnRhYmxlOnByaW50YWJsZSxjYXB3b3JkczpjYXB3b3JkcyxfX2dldGF0dHJfXzpmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXTt9LF9fc2V0YXR0cl9fOmZ1bmN0aW9uKGF0dHIsdmFsdWUpe3RoaXNbYXR0cl09dmFsdWU7fX07fSkoKTs=',
'/Lib/pydom.pyj':'',
'/Lib/traceback.pyj':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgJGdsb2JhbHM9X19CUllUSE9OX18uc2NvcGVbInRyYWNlYmFjay5weSJdLl9fZGljdF9fOyRtb2RzPSRpbXBvcnRfbGlzdChbWyJzeXMiLCJzeXMiXV0pO3N5cz0kbW9kc1swXTs7Tm9uZTt2YXIgcHJpbnRfZXhjPShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3RyeXt2YXIgJG5zPSRNYWtlQXJncygicHJpbnRfZXhjIixhcmd1bWVudHMsW10seyJmaWxlIjpzeXMuX19nZXRhdHRyX18oInN0ZGVyciIpfSxudWxsLG51bGwpO2ZvcigkdmFyIGluICRucylldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIik7dmFyICRsb2NhbHM9X19CUllUSE9OX18uc2NvcGUudGY0dGNoZG4uX19kaWN0X189JG5zO3ZhciBleGM9JGxvY2Fscy5leGM9X19CUllUSE9OX18uX19nZXRhdHRyX18oImV4Y2VwdGlvbl9zdGFjayIpLl9fZ2V0YXR0cl9fKCJfX2dldGl0ZW1fXyIpKE51bWJlcigtMSkpO2ZpbGUuX19nZXRhdHRyX18oIndyaXRlIikuX19jYWxsX18oZXhjLl9fZ2V0YXR0cl9fKCJfX25hbWVfXyIpKTtpZihib29sKGV4Yy5fX2dldGF0dHJfXygibWVzc2FnZSIpKSlmaWxlLl9fZ2V0YXR0cl9fKCJ3cml0ZSIpLl9fY2FsbF9fKCc6ICcuX19hZGRfXyhleGMuX19nZXRhdHRyX18oIm1lc3NhZ2UiKSkpO2ZpbGUuX19nZXRhdHRyX18oIndyaXRlIikuX19jYWxsX18oJ1xuJyk7fWNhdGNoKGVycjQpe3Rocm93IF9fQlJZVEhPTl9fLmV4Y2VwdGlvbihlcnI0KTt9fTt9KSgpO3ByaW50X2V4Yy5fX25hbWVfXz0icHJpbnRfZXhjIjskZ2xvYmFscy5wcmludF9leGM9cHJpbnRfZXhjO3JldHVybntwcmludF9leGM6cHJpbnRfZXhjLF9fZ2V0YXR0cl9fOmZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdO30sX19zZXRhdHRyX186ZnVuY3Rpb24oYXR0cix2YWx1ZSl7dGhpc1thdHRyXT12YWx1ZTt9fTt9KSgpOw==',
'/Lib/colorsys.py':'IiIiQ29udmVyc2lvbiBmdW5jdGlvbnMgYmV0d2VlbiBSR0IgYW5kIG90aGVyIGNvbG9yIHN5c3RlbXMuCgpUaGlzIG1vZHVsZXMgcHJvdmlkZXMgdHdvIGZ1bmN0aW9ucyBmb3IgZWFjaCBjb2xvciBzeXN0ZW0gQUJDOgoKICByZ2JfdG9fYWJjKHIsIGcsIGIpIC0tPiBhLCBiLCBjCiAgYWJjX3RvX3JnYihhLCBiLCBjKSAtLT4gciwgZywgYgoKQWxsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgdHJpcGxlcyBvZiBmbG9hdHMgaW4gdGhlIHJhbmdlIFswLjAuLi4xLjBdCih3aXRoIHRoZSBleGNlcHRpb24gb2YgSSBhbmQgUSwgd2hpY2ggY292ZXJzIGEgc2xpZ2h0bHkgbGFyZ2VyIHJhbmdlKS4KSW5wdXRzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIG1heSBjYXVzZSBleGNlcHRpb25zIG9yIGludmFsaWQgb3V0cHV0cy4KClN1cHBvcnRlZCBjb2xvciBzeXN0ZW1zOgpSR0I6IFJlZCwgR3JlZW4sIEJsdWUgY29tcG9uZW50cwpZSVE6IEx1bWluYW5jZSwgQ2hyb21pbmFuY2UgKHVzZWQgYnkgY29tcG9zaXRlIHZpZGVvIHNpZ25hbHMpCkhMUzogSHVlLCBMdW1pbmFuY2UsIFNhdHVyYXRpb24KSFNWOiBIdWUsIFNhdHVyYXRpb24sIFZhbHVlCiIiIgoKIyBSZWZlcmVuY2VzOgojIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUlRCiMgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9ITFNfY29sb3Jfc3BhY2UKIyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTVl9jb2xvcl9zcGFjZQoKX19hbGxfXyA9IFsicmdiX3RvX3lpcSIsInlpcV90b19yZ2IiLCJyZ2JfdG9faGxzIiwiaGxzX3RvX3JnYiIsCiAgICAgICAgICAgInJnYl90b19oc3YiLCJoc3ZfdG9fcmdiIl0KCiMgU29tZSBmbG9hdGluZyBwb2ludCBjb25zdGFudHMKCk9ORV9USElSRCA9IDEuMC8zLjAKT05FX1NJWFRIID0gMS4wLzYuMApUV09fVEhJUkQgPSAyLjAvMy4wCgojIFlJUTogdXNlZCBieSBjb21wb3NpdGUgdmlkZW8gc2lnbmFscyAobGluZWFyIGNvbWJpbmF0aW9ucyBvZiBSR0IpCiMgWTogcGVyY2VpdmVkIGdyZXkgbGV2ZWwgKDAuMCA9PSBibGFjaywgMS4wID09IHdoaXRlKQojIEksIFE6IGNvbG9yIGNvbXBvbmVudHMKCmRlZiByZ2JfdG9feWlxKHIsIGcsIGIpOgogICAgeSA9IDAuMzAqciArIDAuNTkqZyArIDAuMTEqYgogICAgaSA9IDAuNjAqciAtIDAuMjgqZyAtIDAuMzIqYgogICAgcSA9IDAuMjEqciAtIDAuNTIqZyArIDAuMzEqYgogICAgcmV0dXJuICh5LCBpLCBxKQoKZGVmIHlpcV90b19yZ2IoeSwgaSwgcSk6CiAgICByID0geSArIDAuOTQ4MjYyKmkgKyAwLjYyNDAxMypxCiAgICBnID0geSAtIDAuMjc2MDY2KmkgLSAwLjYzOTgxMCpxCiAgICBiID0geSAtIDEuMTA1NDUwKmkgKyAxLjcyOTg2MCpxCiAgICBpZiByIDwgMC4wOgogICAgICAgIHIgPSAwLjAKICAgIGlmIGcgPCAwLjA6CiAgICAgICAgZyA9IDAuMAogICAgaWYgYiA8IDAuMDoKICAgICAgICBiID0gMC4wCiAgICBpZiByID4gMS4wOgogICAgICAgIHIgPSAxLjAKICAgIGlmIGcgPiAxLjA6CiAgICAgICAgZyA9IDEuMAogICAgaWYgYiA+IDEuMDoKICAgICAgICBiID0gMS4wCiAgICByZXR1cm4gKHIsIGcsIGIpCgoKIyBITFM6IEh1ZSwgTHVtaW5hbmNlLCBTYXR1cmF0aW9uCiMgSDogcG9zaXRpb24gaW4gdGhlIHNwZWN0cnVtCiMgTDogY29sb3IgbGlnaHRuZXNzCiMgUzogY29sb3Igc2F0dXJhdGlvbgoKZGVmIHJnYl90b19obHMociwgZywgYik6CiAgICBtYXhjID0gbWF4KHIsIGcsIGIpCiAgICBtaW5jID0gbWluKHIsIGcsIGIpCiAgICAjIFhYWCBDYW4gb3B0aW1pemUgKG1heGMrbWluYykgYW5kIChtYXhjLW1pbmMpCiAgICBsID0gKG1pbmMrbWF4YykvMi4wCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgbCwgMC4wCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAobWF4YyttaW5jKQogICAgZWxzZToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAoMi4wLW1heGMtbWluYykKICAgIHJjID0gKG1heGMtcikgLyAobWF4Yy1taW5jKQogICAgZ2MgPSAobWF4Yy1nKSAvIChtYXhjLW1pbmMpCiAgICBiYyA9IChtYXhjLWIpIC8gKG1heGMtbWluYykKICAgIGlmIHIgPT0gbWF4YzoKICAgICAgICBoID0gYmMtZ2MKICAgIGVsaWYgZyA9PSBtYXhjOgogICAgICAgIGggPSAyLjArcmMtYmMKICAgIGVsc2U6CiAgICAgICAgaCA9IDQuMCtnYy1yYwogICAgaCA9IChoLzYuMCkgJSAxLjAKICAgIHJldHVybiBoLCBsLCBzCgpkZWYgaGxzX3RvX3JnYihoLCBsLCBzKToKICAgIGlmIHMgPT0gMC4wOgogICAgICAgIHJldHVybiBsLCBsLCBsCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBtMiA9IGwgKiAoMS4wK3MpCiAgICBlbHNlOgogICAgICAgIG0yID0gbCtzLShsKnMpCiAgICBtMSA9IDIuMCpsIC0gbTIKICAgIHJldHVybiAoX3YobTEsIG0yLCBoK09ORV9USElSRCksIF92KG0xLCBtMiwgaCksIF92KG0xLCBtMiwgaC1PTkVfVEhJUkQpKQoKZGVmIF92KG0xLCBtMiwgaHVlKToKICAgIGh1ZSA9IGh1ZSAlIDEuMAogICAgaWYgaHVlIDwgT05FX1NJWFRIOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqaHVlKjYuMAogICAgaWYgaHVlIDwgMC41OgogICAgICAgIHJldHVybiBtMgogICAgaWYgaHVlIDwgVFdPX1RISVJEOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqKFRXT19USElSRC1odWUpKjYuMAogICAgcmV0dXJuIG0xCgoKIyBIU1Y6IEh1ZSwgU2F0dXJhdGlvbiwgVmFsdWUKIyBIOiBwb3NpdGlvbiBpbiB0aGUgc3BlY3RydW0KIyBTOiBjb2xvciBzYXR1cmF0aW9uICgicHVyaXR5IikKIyBWOiBjb2xvciBicmlnaHRuZXNzCgpkZWYgcmdiX3RvX2hzdihyLCBnLCBiKToKICAgIG1heGMgPSBtYXgociwgZywgYikKICAgIG1pbmMgPSBtaW4ociwgZywgYikKICAgIHYgPSBtYXhjCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgMC4wLCB2CiAgICBzID0gKG1heGMtbWluYykgLyBtYXhjCiAgICByYyA9IChtYXhjLXIpIC8gKG1heGMtbWluYykKICAgIGdjID0gKG1heGMtZykgLyAobWF4Yy1taW5jKQogICAgYmMgPSAobWF4Yy1iKSAvIChtYXhjLW1pbmMpCiAgICBpZiByID09IG1heGM6CiAgICAgICAgaCA9IGJjLWdjCiAgICBlbGlmIGcgPT0gbWF4YzoKICAgICAgICBoID0gMi4wK3JjLWJjCiAgICBlbHNlOgogICAgICAgIGggPSA0LjArZ2MtcmMKICAgIGggPSAoaC82LjApICUgMS4wCiAgICByZXR1cm4gaCwgcywgdgoKZGVmIGhzdl90b19yZ2IoaCwgcywgdik6CiAgICBpZiBzID09IDAuMDoKICAgICAgICByZXR1cm4gdiwgdiwgdgogICAgaSA9IGludChoKjYuMCkgIyBYWFggYXNzdW1lIGludCgpIHRydW5jYXRlcyEKICAgIGYgPSAoaCo2LjApIC0gaQogICAgcCA9IHYqKDEuMCAtIHMpCiAgICBxID0gdiooMS4wIC0gcypmKQogICAgdCA9IHYqKDEuMCAtIHMqKDEuMC1mKSkKICAgIGkgPSBpJTYKICAgIGlmIGkgPT0gMDoKICAgICAgICByZXR1cm4gdiwgdCwgcAogICAgaWYgaSA9PSAxOgogICAgICAgIHJldHVybiBxLCB2LCBwCiAgICBpZiBpID09IDI6CiAgICAgICAgcmV0dXJuIHAsIHYsIHQKICAgIGlmIGkgPT0gMzoKICAgICAgICByZXR1cm4gcCwgcSwgdgogICAgaWYgaSA9PSA0OgogICAgICAgIHJldHVybiB0LCBwLCB2CiAgICBpZiBpID09IDU6CiAgICAgICAgcmV0dXJuIHYsIHAsIHEKICAgICMgQ2Fubm90IGdldCBoZXJlCg==',
'/Lib/bisect.py':'IiIiQmlzZWN0aW9uIGFsZ29yaXRobXMuIiIiCgpkZWYgaW5zb3J0X3JpZ2h0KGEsIHgsIGxvPTAsIGhpPU5vbmUpOgogICAgIiIiSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBJZiB4IGlzIGFscmVhZHkgaW4gYSwgaW5zZXJ0IGl0IHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgeCA8IGFbbWlkXTogaGkgPSBtaWQKICAgICAgICBlbHNlOiBsbyA9IG1pZCsxCiAgICBhLmluc2VydChsbywgeCkKCmluc29ydCA9IGluc29ydF9yaWdodCAgICMgYmFja3dhcmQgY29tcGF0aWJpbGl0eQoKZGVmIGJpc2VjdF9yaWdodChhLCB4LCBsbz0wLCBoaT1Ob25lKToKICAgICIiIlJldHVybiB0aGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIFRoZSByZXR1cm4gdmFsdWUgaSBpcyBzdWNoIHRoYXQgYWxsIGUgaW4gYVs6aV0gaGF2ZSBlIDw9IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID4geC4gIFNvIGlmIHggYWxyZWFkeSBhcHBlYXJzIGluIHRoZSBsaXN0LCBhLmluc2VydCh4KSB3aWxsCiAgICBpbnNlcnQganVzdCBhZnRlciB0aGUgcmlnaHRtb3N0IHggYWxyZWFkeSB0aGVyZS4KCiAgICBPcHRpb25hbCBhcmdzIGxvIChkZWZhdWx0IDApIGFuZCBoaSAoZGVmYXVsdCBsZW4oYSkpIGJvdW5kIHRoZQogICAgc2xpY2Ugb2YgYSB0byBiZSBzZWFyY2hlZC4KICAgICIiIgoKICAgIGlmIGxvIDwgMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpCiAgICBpZiBoaSBpcyBOb25lOgogICAgICAgIGhpID0gbGVuKGEpCiAgICB3aGlsZSBsbyA8IGhpOgogICAgICAgIG1pZCA9IChsbytoaSkvLzIKICAgICAgICBpZiB4IDwgYVttaWRdOiBoaSA9IG1pZAogICAgICAgIGVsc2U6IGxvID0gbWlkKzEKICAgIHJldHVybiBsbwoKYmlzZWN0ID0gYmlzZWN0X3JpZ2h0ICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CgpkZWYgaW5zb3J0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJJbnNlcnQgaXRlbSB4IGluIGxpc3QgYSwgYW5kIGtlZXAgaXQgc29ydGVkIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIGxlZnQgb2YgdGhlIGxlZnRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICBhLmluc2VydChsbywgeCkKCgpkZWYgYmlzZWN0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJSZXR1cm4gdGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBUaGUgcmV0dXJuIHZhbHVlIGkgaXMgc3VjaCB0aGF0IGFsbCBlIGluIGFbOmldIGhhdmUgZSA8IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID49IHguICBTbyBpZiB4IGFscmVhZHkgYXBwZWFycyBpbiB0aGUgbGlzdCwgYS5pbnNlcnQoeCkgd2lsbAogICAgaW5zZXJ0IGp1c3QgYmVmb3JlIHRoZSBsZWZ0bW9zdCB4IGFscmVhZHkgdGhlcmUuCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICByZXR1cm4gbG8KCiMgZG9udCcgbmVlZCB0aGlzIGZvciBicnl0aG9uCiMgT3ZlcndyaXRlIGFib3ZlIGRlZmluaXRpb25zIHdpdGggYSBmYXN0IEMgaW1wbGVtZW50YXRpb24KI3RyeToKIyAgICBmcm9tIF9iaXNlY3QgaW1wb3J0ICoKI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgICBwYXNzCg==',
'/Lib/_random.pyj':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgJGdsb2JhbHM9X19CUllUSE9OX18uc2NvcGVbIl9yYW5kb20ucHkiXS5fX2RpY3RfXzskbW9kcz0kaW1wb3J0X2xpc3QoW1siX29zIiwiX29zIl1dKTtfb3M9JG1vZHNbMF07O05vbmU7dmFyICRSYW5kb209KGZ1bmN0aW9uKCl7dmFyICRjbGFzcz1uZXcgT2JqZWN0KCk7IlJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yIGJhc2UgY2xhc3MgdXNlZCBieSBib3VuZCBtb2R1bGUgZnVuY3Rpb25zLlxuXG4gICAgVXNlZCB0byBpbnN0YW50aWF0ZSBpbnN0YW5jZXMgb2YgUmFuZG9tIHRvIGdldCBnZW5lcmF0b3JzIHRoYXQgZG9uJ3RcbiAgICBzaGFyZSBzdGF0ZS5cblxuICAgIENsYXNzIFJhbmRvbSBjYW4gYWxzbyBiZSBzdWJjbGFzc2VkIGlmIHlvdSB3YW50IHRvIHVzZSBhIGRpZmZlcmVudCBiYXNpY1xuICAgIGdlbmVyYXRvciBvZiB5b3VyIG93biBkZXZpc2luZzogaW4gdGhhdCBjYXNlLCBvdmVycmlkZSB0aGUgZm9sbG93aW5nXG4gICAgbWV0aG9kczogIHJhbmRvbSgpLCBzZWVkKCksIGdldHN0YXRlKCksIGFuZCBzZXRzdGF0ZSgpLlxuICAgIE9wdGlvbmFsbHksIGltcGxlbWVudCBhIGdldHJhbmRiaXRzKCkgbWV0aG9kIHNvIHRoYXQgcmFuZHJhbmdlKClcbiAgICBjYW4gY292ZXIgYXJiaXRyYXJpbHkgbGFyZ2UgcmFuZ2VzLlxuXG4gICAgIjskY2xhc3MuVkVSU0lPTj1OdW1iZXIoMyk7JGNsYXNzLl9faW5pdF9fPShmdW5jdGlvbihOb25lKXtyZXR1cm4gZnVuY3Rpb24oKXt0cnl7dmFyICRucz0kTWFrZUFyZ3MoIl9faW5pdF9fIixhcmd1bWVudHMsWyJzZWxmIl0seyJ4IjooJGNsYXNzLk5vbmUhPT11bmRlZmluZWQ/JGNsYXNzLk5vbmU6Tm9uZSl9LG51bGwsbnVsbCk7Zm9yKCR2YXIgaW4gJG5zKWV2YWwoInZhciAiKyR2YXIrIj0kbnNbJHZhcl0iKTt2YXIgJGxvY2Fscz1fX0JSWVRIT05fXy5zY29wZS5uaGZpZjRjMC5fX2RpY3RfXz0kbnM7IkluaXRpYWxpemUgYW4gaW5zdGFuY2UuXG5cbiAgICAgICAgT3B0aW9uYWwgYXJndW1lbnQgeCBjb250cm9scyBzZWVkaW5nLCBhcyBmb3IgUmFuZG9tLnNlZWQoKS5cbiAgICAgICAgIjtzZWxmLl9fc2V0YXR0cl9fKCJfc3RhdGUiLHgpO31jYXRjaChlcnI0NSl7dGhyb3cgX19CUllUSE9OX18uZXhjZXB0aW9uKGVycjQ1KTt9fTt9KShOb25lKTskY2xhc3MuX19pbml0X18uX19uYW1lX189Il9faW5pdF9fIjskY2xhc3Muc2VlZD0oZnVuY3Rpb24oTm9uZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dHJ5e3ZhciAkbnM9JE1ha2VBcmdzKCJzZWVkIixhcmd1bWVudHMsWyJzZWxmIl0seyJhIjooJGNsYXNzLk5vbmUhPT11bmRlZmluZWQ/JGNsYXNzLk5vbmU6Tm9uZSksInZlcnNpb24iOk51bWJlcigyKX0sbnVsbCxudWxsKTtmb3IoJHZhciBpbiAkbnMpZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpO3ZhciAkbG9jYWxzPV9fQlJZVEhPTl9fLnNjb3BlLmU5d243NW1sLl9fZGljdF9fPSRuczsiSW5pdGlhbGl6ZSBpbnRlcm5hbCBzdGF0ZSBmcm9tIGhhc2hhYmxlIG9iamVjdC5cblxuICAgICAgICBOb25lIG9yIG5vIGFyZ3VtZW50IHNlZWRzIGZyb20gY3VycmVudCB0aW1lIG9yIGZyb20gYW4gb3BlcmF0aW5nXG4gICAgICAgIHN5c3RlbSBzcGVjaWZpYyByYW5kb21uZXNzIHNvdXJjZSBpZiBhdmFpbGFibGUuXG5cbiAgICAgICAgRm9yIHZlcnNpb24gMiAodGhlIGRlZmF1bHQpLCBhbGwgb2YgdGhlIGJpdHMgYXJlIHVzZWQgaWYgKmEqIGlzIGEgc3RyLFxuICAgICAgICBieXRlcywgb3IgYnl0ZWFycmF5LiAgRm9yIHZlcnNpb24gMSwgdGhlIGhhc2goKSBvZiAqYSogaXMgdXNlZCBpbnN0ZWFkLlxuXG4gICAgICAgIElmICphKiBpcyBhbiBpbnQsIGFsbCBiaXRzIGFyZSB1c2VkLlxuXG4gICAgICAgICI7c2VsZi5fX3NldGF0dHJfXygiX3N0YXRlIixhKTtzZWxmLl9fc2V0YXR0cl9fKCJnYXVzc19uZXh0IixOb25lKTt9Y2F0Y2goZXJyNDUpe3Rocm93IF9fQlJZVEhPTl9fLmV4Y2VwdGlvbihlcnI0NSk7fX07fSkoTm9uZSk7JGNsYXNzLnNlZWQuX19uYW1lX189InNlZWQiOyRjbGFzcy5nZXRzdGF0ZT0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt0cnl7dmFyICRucz0kTWFrZUFyZ3MoImdldHN0YXRlIixhcmd1bWVudHMsWyJzZWxmIl0se30sbnVsbCxudWxsKTtmb3IoJHZhciBpbiAkbnMpZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpO3ZhciAkbG9jYWxzPV9fQlJZVEhPTl9fLnNjb3BlLmw1ejdhZDI4Ll9fZGljdF9fPSRuczsiUmV0dXJuIGludGVybmFsIHN0YXRlOyBjYW4gYmUgcGFzc2VkIHRvIHNldHN0YXRlKCkgbGF0ZXIuIjtyZXR1cm4gc2VsZi5fX2dldGF0dHJfXygiX3N0YXRlIik7fWNhdGNoKGVycjQ1KXt0aHJvdyBfX0JSWVRIT05fXy5leGNlcHRpb24oZXJyNDUpO319O30pKCk7JGNsYXNzLmdldHN0YXRlLl9fbmFtZV9fPSJnZXRzdGF0ZSI7JGNsYXNzLnNldHN0YXRlPShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3RyeXt2YXIgJG5zPSRNYWtlQXJncygic2V0c3RhdGUiLGFyZ3VtZW50cyxbInNlbGYiLCJzdGF0ZSJdLHt9LG51bGwsbnVsbCk7Zm9yKCR2YXIgaW4gJG5zKWV2YWwoInZhciAiKyR2YXIrIj0kbnNbJHZhcl0iKTt2YXIgJGxvY2Fscz1fX0JSWVRIT05fXy5zY29wZS5veXlsYThmaC5fX2RpY3RfXz0kbnM7IlJlc3RvcmUgaW50ZXJuYWwgc3RhdGUgZnJvbSBvYmplY3QgcmV0dXJuZWQgYnkgZ2V0c3RhdGUoKS4iO3NlbGYuX19zZXRhdHRyX18oIl9zdGF0ZSIsc3RhdGUpO31jYXRjaChlcnI0NSl7dGhyb3cgX19CUllUSE9OX18uZXhjZXB0aW9uKGVycjQ1KTt9fTt9KSgpOyRjbGFzcy5zZXRzdGF0ZS5fX25hbWVfXz0ic2V0c3RhdGUiOyRjbGFzcy5yYW5kb209KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dHJ5e3ZhciAkbnM9JE1ha2VBcmdzKCJyYW5kb20iLGFyZ3VtZW50cyxbInNlbGYiXSx7fSxudWxsLG51bGwpO2ZvcigkdmFyIGluICRucylldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIik7dmFyICRsb2NhbHM9X19CUllUSE9OX18uc2NvcGUubzZyZjY0bWguX19kaWN0X189JG5zOyJHZXQgdGhlIG5leHQgcmFuZG9tIG51bWJlciBpbiB0aGUgcmFuZ2UgWzAuMCwgMS4wKS4iO3JldHVybiBfb3MuX19nZXRhdHRyX18oInJhbmRvbSIpLl9fY2FsbF9fKCk7fWNhdGNoKGVycjQ1KXt0aHJvdyBfX0JSWVRIT05fXy5leGNlcHRpb24oZXJyNDUpO319O30pKCk7JGNsYXNzLnJhbmRvbS5fX25hbWVfXz0icmFuZG9tIjskY2xhc3MuZ2V0cmFuZGJpdHM9KGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKCl7dHJ5e3ZhciAkbnM9JE1ha2VBcmdzKCJnZXRyYW5kYml0cyIsYXJndW1lbnRzLFsic2VsZiIsImsiXSx7fSxudWxsLG51bGwpO2ZvcigkdmFyIGluICRucylldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIik7dmFyICRsb2NhbHM9X19CUllUSE9OX18uc2NvcGVbIjhrY2xrOGxpIl0uX19kaWN0X189JG5zOyJnZXRyYW5kYml0cyhrKSAtPiB4LiAgR2VuZXJhdGVzIGEgbG9uZyBpbnQgd2l0aCBrIHJhbmRvbSBiaXRzLiI7aWYoYm9vbChrLl9fbGVfXyhOdW1iZXIoMCkpKSl0aHJvdyBWYWx1ZUVycm9yLl9fY2FsbF9fKCdudW1iZXIgb2YgYml0cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvJyk7aWYoYm9vbChrLl9fbmVfXyhpbnQuX19jYWxsX18oaykpKSl0aHJvdyBUeXBlRXJyb3IuX19jYWxsX18oJ251bWJlciBvZiBiaXRzIHNob3VsZCBiZSBhbiBpbnRlZ2VyJyk7dmFyIG51bWJ5dGVzPSRsb2NhbHMubnVtYnl0ZXM9ay5fX2FkZF9fKE51bWJlcig3KSkuX19mbG9vcmRpdl9fKE51bWJlcig4KSk7dmFyIHg9JGxvY2Fscy54PWludC5fX2dldGF0dHJfXygiZnJvbV9ieXRlcyIpLl9fY2FsbF9fKF91cmFuZG9tLl9fY2FsbF9fKG51bWJ5dGVzKSwnYmlnJyk7cmV0dXJuIHguX19yc2hpZnRfXyhudW1ieXRlcy5fX211bF9fKE51bWJlcig4KSkuX19zdWJfXyhrKSk7fWNhdGNoKGVycjQ1KXt0aHJvdyBfX0JSWVRIT05fXy5leGNlcHRpb24oZXJyNDUpO319O30pKCk7JGNsYXNzLmdldHJhbmRiaXRzLl9fbmFtZV9fPSJnZXRyYW5kYml0cyI7cmV0dXJuICRjbGFzczt9KSgpO3ZhciBSYW5kb209JGNsYXNzX2NvbnN0cnVjdG9yKCJSYW5kb20iLCRSYW5kb20pO19fQlJZVEhPTl9fLnNjb3BlWyJfcmFuZG9tLnB5Il0uX19kaWN0X18uUmFuZG9tPVJhbmRvbTtyZXR1cm57UmFuZG9tOlJhbmRvbSxfX2dldGF0dHJfXzpmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXTt9LF9fc2V0YXR0cl9fOmZ1bmN0aW9uKGF0dHIsdmFsdWUpe3RoaXNbYXR0cl09dmFsdWU7fX07fSkoKTs=',
'/Lib/pyindexedDB.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBweWluZGV4ZWREQjoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIGlmIG5vdCBfX0JSWVRIT05fXy5oYXNfaW5kZXhlZERCOgogICAgICAgICByYWlzZSBFeGNlcHRpb24oIk5vdEltcGxlbWVudGVkRXJyb3IiLCAiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpbmRleGVkREIiKQogICAgICAgICByZXR1cm4KCiAgICAgIHNlbGYuX2luZGV4ZWREQj1fX0JSWVRIT05fXy5pbmRleGVkREIoKQogICAgICBzZWxmLl9kYj1Ob25lCiAgICAgIHNlbGYuX3ZlcnNpb249Tm9uZQoKICBkZWYgX29uc3VjY2VzcyhzZWxmLCBldmVudCk6CiAgICAgIHNlbGYuX2RiPWV2ZW50LnRhcmdldC5yZXN1bHQKCiAgZGVmIG9wZW4oc2VsZiwgbmFtZSwgb25zdWNjZXNzLCB2ZXJzaW9uPTEuMCwgb25lcnJvcj1Ob25lLCAKICAgICAgICAgICBvbnVwZ3JhZGVuZWVkZWQ9Tm9uZSk6CiAgICAgIHNlbGYuX3ZlcnNpb249dmVyc2lvbgogICAgICBfcmVzdWx0PXNlbGYuX2luZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pCiAgICAgIF9zdWNjZXNzPUV2ZW50TGlzdGVuZXIoW3NlbGYuX29uc3VjY2Vzcywgb25zdWNjZXNzXSkKICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9X3N1Y2Nlc3MuZmlyZQogICAgICBfcmVzdWx0Lm9udXBncmFkZW5lZWRlZD1vbnVwZ3JhZGVuZWVkZWQKCiAgICAgICNpZiBvbmVycm9yIGlzIE5vbmU6CiAgICAgIGRlZiBvbmVycm9yKGUpOgogICAgICAgICAgcHJpbnQoIm9uZXJyb3I6ICVzOiVzIiAlICAoZS50eXBlLCBlLnRhcmdldC5yZXN1bHQpKQoKICAgICAgZGVmIG9uYmxvY2tlZChlKToKICAgICAgICAgIHByaW50KCJibG9ja2VkOiAlczolcyIgJSAgKGUudHlwZSwgZS5yZXN1bHQpKQoKICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKICAgICAgX3Jlc3VsdC5vbmJsb2NrZWQ9b25ibG9ja2VkCgogIGRlZiB0cmFuc2FjdGlvbihzZWxmLCBlbnRpdGllcywgbW9kZT0ncmVhZCcpOgogICAgICByZXR1cm4gVHJhbnNhY3Rpb24oc2VsZi5fZGIudHJhbnNhY3Rpb24oZW50aXRpZXMsIG1vZGUpKQoKY2xhc3MgVHJhbnNhY3Rpb246CiAgZGVmIF9faW5pdF9fKHNlbGYsIHRyYW5zYWN0aW9uKToKICAgICAgc2VsZi5fdHJhbnNhY3Rpb249dHJhbnNhY3Rpb24KCiAgZGVmIG9iamVjdFN0b3JlKHNlbGYsIG5hbWUpOgogICAgICByZXR1cm4gT2JqZWN0U3RvcmUoc2VsZi5fdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUobmFtZSkpCgpjbGFzcyBPYmplY3RTdG9yZToKICBkZWYgX19pbml0X18oc2VsZiwgb2JqZWN0U3RvcmUpOgogICAgICBzZWxmLl9vYmplY3RTdG9yZT1vYmplY3RTdG9yZQogICAgICBzZWxmLl9kYXRhPVtdCgogIGRlZiBjbGVhcihzZWxmLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1zZWxmLl9vYmplY3RTdG9yZS5jbGVhcigpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIF9oZWxwZXIoc2VsZiwgZnVuYywgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1mdW5jKG9iamVjdCkKCiAgICAgIGlmIG9uc3VjY2VzcyBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogICAgICBpZiBvbmVycm9yIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uZXJyb3I9b25lcnJvcgoKICBkZWYgcHV0KHNlbGYsIG9iamVjdCwga2V5PU5vbmUsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOgogICAgICBfcj1zZWxmLl9vYmplY3RTdG9yZS5wdXQob2JqZWN0LCBrZXkpCiAgICAgIF9yLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKICAgICAgX3Iub25lcnJvcj1vbmVycm9yCgogIGRlZiBhZGQoc2VsZiwgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmFkZCwgb2JqZWN0LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCgogIGRlZiBkZWxldGUoc2VsZiwgaW5kZXgsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOiAKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmRlbGV0ZSwgaW5kZXgsIG9uc3VjY2Vzcywgb25lcnJvcikKICAgICAKICBkZWYgcXVlcnkoc2VsZiwgKmFyZ3MpOgogICAgICBzZWxmLl9kYXRhPVtdCiAgICAgIGRlZiBvbnN1Y2Nlc3MoZXZlbnQpOgogICAgICAgICAgY3Vyc29yPWV2ZW50LnRhcmdldC5yZXN1bHQKICAgICAgICAgIGlmIGN1cnNvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgIHNlbGYuX2RhdGEuYXBwZW5kKGN1cnNvci52YWx1ZSkKICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpCgogICAgICBzZWxmLl9vYmplY3RTdG9yZS5vcGVuQ3Vyc29yKGFyZ3MpLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgZGVmIGZldGNoYWxsKHNlbGYpOgogICAgICB5aWVsZCBzZWxmLl9kYXRhCgogIGRlZiBnZXQoc2VsZiwga2V5LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmdldCwga2V5LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCg==',
'/Lib/linecache.py':'IiIiQ2FjaGUgbGluZXMgZnJvbSBmaWxlcy4KClRoaXMgaXMgaW50ZW5kZWQgdG8gcmVhZCBsaW5lcyBmcm9tIG1vZHVsZXMgaW1wb3J0ZWQgLS0gaGVuY2UgaWYgYSBmaWxlbmFtZQppcyBub3QgZm91bmQsIGl0IHdpbGwgbG9vayBkb3duIHRoZSBtb2R1bGUgc2VhcmNoIHBhdGggZm9yIGEgZmlsZSBieQp0aGF0IG5hbWUuCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKI2ZpeG1lIGJyeXRob24KI2ltcG9ydCB0b2tlbml6ZQoKX19hbGxfXyA9IFsiZ2V0bGluZSIsICJjbGVhcmNhY2hlIiwgImNoZWNrY2FjaGUiXQoKZGVmIGdldGxpbmUoZmlsZW5hbWUsIGxpbmVubywgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICBsaW5lcyA9IGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscykKICAgIGlmIDEgPD0gbGluZW5vIDw9IGxlbihsaW5lcyk6CiAgICAgICAgcmV0dXJuIGxpbmVzW2xpbmVuby0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgojIFRoZSBjYWNoZQoKY2FjaGUgPSB7fSAjIFRoZSBjYWNoZQoKCmRlZiBjbGVhcmNhY2hlKCk6CiAgICAiIiJDbGVhciB0aGUgY2FjaGUgZW50aXJlbHkuIiIiCgogICAgZ2xvYmFsIGNhY2hlCiAgICBjYWNoZSA9IHt9CgoKZGVmIGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgICIiIkdldCB0aGUgbGluZXMgZm9yIGEgZmlsZSBmcm9tIHRoZSBjYWNoZS4KICAgIFVwZGF0ZSB0aGUgY2FjaGUgaWYgaXQgZG9lc24ndCBjb250YWluIGFuIGVudHJ5IGZvciB0aGlzIGZpbGUgYWxyZWFkeS4iIiIKCiAgICBpZiBmaWxlbmFtZSBpbiBjYWNoZToKICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCiAgICBlbHNlOgogICAgICAgIHJldHVybiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHMpCgoKZGVmIGNoZWNrY2FjaGUoZmlsZW5hbWU9Tm9uZSk6CiAgICAiIiJEaXNjYXJkIGNhY2hlIGVudHJpZXMgdGhhdCBhcmUgb3V0IG9mIGRhdGUuCiAgICAoVGhpcyBpcyBub3QgY2hlY2tlZCB1cG9uIGVhY2ggY2FsbCEpIiIiCgogICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICBmaWxlbmFtZXMgPSBsaXN0KGNhY2hlLmtleXMoKSkKICAgIGVsc2U6CiAgICAgICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgICAgIGZpbGVuYW1lcyA9IFtmaWxlbmFtZV0KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KCiAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgIHNpemUsIG10aW1lLCBsaW5lcywgZnVsbG5hbWUgPSBjYWNoZVtmaWxlbmFtZV0KICAgICAgICBpZiBtdGltZSBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZSAgICMgbm8tb3AgZm9yIGZpbGVzIGxvYWRlZCB2aWEgYSBfX2xvYWRlcl9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWwgY2FjaGVbZmlsZW5hbWVdCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2l6ZSAhPSBzdGF0LnN0X3NpemUgb3IgbXRpbWUgIT0gc3RhdC5zdF9tdGltZToKICAgICAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQoKCmRlZiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICAiIiJVcGRhdGUgYSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuIGl0cyBsaXN0IG9mIGxpbmVzLgogICAgSWYgc29tZXRoaW5nJ3Mgd3JvbmcsIHByaW50IGEgbWVzc2FnZSwgZGlzY2FyZCB0aGUgY2FjaGUgZW50cnksCiAgICBhbmQgcmV0dXJuIGFuIGVtcHR5IGxpc3QuIiIiCgogICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQogICAgaWYgbm90IGZpbGVuYW1lIG9yIChmaWxlbmFtZS5zdGFydHN3aXRoKCc8JykgYW5kIGZpbGVuYW1lLmVuZHN3aXRoKCc+JykpOgogICAgICAgIHJldHVybiBbXQoKICAgIGZ1bGxuYW1lID0gZmlsZW5hbWUKICAgIHRyeToKICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgIGJhc2VuYW1lID0gZmlsZW5hbWUKCiAgICAgICAgIyBUcnkgZm9yIGEgX19sb2FkZXJfXywgaWYgYXZhaWxhYmxlCiAgICAgICAgaWYgbW9kdWxlX2dsb2JhbHMgYW5kICdfX2xvYWRlcl9fJyBpbiBtb2R1bGVfZ2xvYmFsczoKICAgICAgICAgICAgbmFtZSA9IG1vZHVsZV9nbG9iYWxzLmdldCgnX19uYW1lX18nKQogICAgICAgICAgICBsb2FkZXIgPSBtb2R1bGVfZ2xvYmFsc1snX19sb2FkZXJfXyddCiAgICAgICAgICAgIGdldF9zb3VyY2UgPSBnZXRhdHRyKGxvYWRlciwgJ2dldF9zb3VyY2UnLCBOb25lKQoKICAgICAgICAgICAgaWYgbmFtZSBhbmQgZ2V0X3NvdXJjZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZ2V0X3NvdXJjZShuYW1lKQogICAgICAgICAgICAgICAgZXhjZXB0IChJbXBvcnRFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gbHVjaywgdGhlIFBFUDMwMiBsb2FkZXIgY2Fubm90IGZpbmQgdGhlIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAjIGZvciB0aGlzIG1vZHVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbZmlsZW5hbWVdID0gKAogICAgICAgICAgICAgICAgICAgICAgICBsZW4oZGF0YSksIE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIFtsaW5lKydcbicgZm9yIGxpbmUgaW4gZGF0YS5zcGxpdGxpbmVzKCldLCBmdWxsbmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCgogICAgICAgICMgVHJ5IGxvb2tpbmcgdGhyb3VnaCB0aGUgbW9kdWxlIHNlYXJjaCBwYXRoLCB3aGljaCBpcyBvbmx5IHVzZWZ1bAogICAgICAgICMgd2hlbiBoYW5kbGluZyBhIHJlbGF0aXZlIGZpbGVuYW1lLgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgIyBUYWtlIGNhcmUgdG8gaGFuZGxlIHBhY2thZ2VzLgogICAgICAgIGlmIGJhc2VuYW1lID09ICdfX2luaXRfXy5weSc6CiAgICAgICAgICAgICMgZmlsZW5hbWUgcmVmZXJlcyB0byBhIHBhY2thZ2UKICAgICAgICAgICAgYmFzZW5hbWUgPSBmaWxlbmFtZQoKICAgICAgICBmb3IgZGlybmFtZSBpbiBzeXMucGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgYmFzZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBBdHRyaWJ1dGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIE5vdCBzdWZmaWNpZW50bHkgc3RyaW5nLWxpa2UgdG8gZG8gYW55dGhpbmcgdXNlZnVsIHdpdGguCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICNmaXhtZSBicnl0aG9uLCBpbnZhbGlkIHN5bnRheCAKICAgICAgICAgICAgI2V4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICNmaXhtZSBicnl0aG9uIHVuZXhwZWN0ZWQgdG9rZW4gZWxzZQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgcmV0dXJuIFtdCiAgICB0cnk6CiAgICAgICAgZnA9b3BlbihmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICN3aXRoIHRva2VuaXplLm9wZW4oZnVsbG5hbWUpIGFzIGZwOgogICAgICAgIGxpbmVzID0gZnAucmVhZGxpbmVzKCkKICAgICAgICBmcC5jbG9zZSgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gW10KICAgIGlmIGxpbmVzIGFuZCBub3QgbGluZXNbLTFdLmVuZHN3aXRoKCdcbicpOgogICAgICAgIGxpbmVzWy0xXSArPSAnXG4nCiAgICBzaXplLCBtdGltZSA9IHN0YXQuc3Rfc2l6ZSwgc3RhdC5zdF9tdGltZQogICAgY2FjaGVbZmlsZW5hbWVdID0gc2l6ZSwgbXRpbWUsIGxpbmVzLCBmdWxsbmFtZQogICAgcmV0dXJuIGxpbmVzCg==',
'/Lib/_abcoll.py':'IyBDb3B5cmlnaHQgMjAwNyBHb29nbGUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIyBMaWNlbnNlZCB0byBQU0YgdW5kZXIgYSBDb250cmlidXRvciBBZ3JlZW1lbnQuCgoiIiJBYnN0cmFjdCBCYXNlIENsYXNzZXMgKEFCQ3MpIGZvciBjb2xsZWN0aW9ucywgYWNjb3JkaW5nIHRvIFBFUCAzMTE5LgoKRE9OJ1QgVVNFIFRISVMgTU9EVUxFIERJUkVDVExZISAgVGhlIGNsYXNzZXMgaGVyZSBzaG91bGQgYmUgaW1wb3J0ZWQKdmlhIGNvbGxlY3Rpb25zOyB0aGV5IGFyZSBkZWZpbmVkIGhlcmUgb25seSB0byBhbGxldmlhdGUgY2VydGFpbgpib290c3RyYXBwaW5nIGlzc3Vlcy4gIFVuaXQgdGVzdHMgYXJlIGluIHRlc3RfY29sbGVjdGlvbnMuCiIiIgoKI2Zyb20gYWJjIGltcG9ydCBBQkNNZXRhLCBhYnN0cmFjdG1ldGhvZAppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJIYXNoYWJsZSIsICJJdGVyYWJsZSIsICJJdGVyYXRvciIsCiAgICAgICAgICAgIlNpemVkIiwgIkNvbnRhaW5lciIsICJDYWxsYWJsZSIsCiAgICAgICAgICAgIlNldCIsICJNdXRhYmxlU2V0IiwKICAgICAgICAgICAiTWFwcGluZyIsICJNdXRhYmxlTWFwcGluZyIsCiAgICAgICAgICAgIk1hcHBpbmdWaWV3IiwgIktleXNWaWV3IiwgIkl0ZW1zVmlldyIsICJWYWx1ZXNWaWV3IiwKICAgICAgICAgICAiU2VxdWVuY2UiLCAiTXV0YWJsZVNlcXVlbmNlIiwKICAgICAgICAgICAiQnl0ZVN0cmluZyIsCiAgICAgICAgICAgXQoKIiIiCiMjIyBjb2xsZWN0aW9uIHJlbGF0ZWQgdHlwZXMgd2hpY2ggYXJlIG5vdCBleHBvc2VkIHRocm91Z2ggYnVpbHRpbiAjIyMKIyMgaXRlcmF0b3JzICMjCiNmaXhtZSBicnl0aG9uCiNieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcihiJycpKQpieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcignJykpCiNmaXhtZSBicnl0aG9uCiNieXRlYXJyYXlfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoYnl0ZWFycmF5KCkpKQojY2FsbGFibGVfaXRlcmF0b3IgPSA/Pz8KZGljdF9rZXlpdGVyYXRvciA9IHR5cGUoaXRlcih7fS5rZXlzKCkpKQpkaWN0X3ZhbHVlaXRlcmF0b3IgPSB0eXBlKGl0ZXIoe30udmFsdWVzKCkpKQpkaWN0X2l0ZW1pdGVyYXRvciA9IHR5cGUoaXRlcih7fS5pdGVtcygpKSkKbGlzdF9pdGVyYXRvciA9IHR5cGUoaXRlcihbXSkpCmxpc3RfcmV2ZXJzZWl0ZXJhdG9yID0gdHlwZShpdGVyKHJldmVyc2VkKFtdKSkpCnJhbmdlX2l0ZXJhdG9yID0gdHlwZShpdGVyKHJhbmdlKDApKSkKc2V0X2l0ZXJhdG9yID0gdHlwZShpdGVyKHNldCgpKSkKc3RyX2l0ZXJhdG9yID0gdHlwZShpdGVyKCIiKSkKdHVwbGVfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoKCkpKQp6aXBfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoemlwKCkpKQojIyB2aWV3cyAjIwpkaWN0X2tleXMgPSB0eXBlKHt9LmtleXMoKSkKZGljdF92YWx1ZXMgPSB0eXBlKHt9LnZhbHVlcygpKQpkaWN0X2l0ZW1zID0gdHlwZSh7fS5pdGVtcygpKQojIyBtaXNjICMjCmRpY3RfcHJveHkgPSB0eXBlKHR5cGUuX19kaWN0X18pCiIiIgoKZGVmIGFic3RyYWN0bWV0aG9kKHNlbGYpOgogICAgcmV0dXJuIHNlbGYKCiMjIyBPTkUtVFJJQ0sgUE9OSUVTICMjIwoKCiNjbGFzcyBJdGVyYWJsZShtZXRhY2xhc3M9QUJDTWV0YSk6CmNsYXNzIEl0ZXJhYmxlOgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHdoaWxlIEZhbHNlOgogICAgICAgICAgICB5aWVsZCBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBJdGVyYWJsZToKICAgICAgICAgICAgaWYgYW55KCJfX2l0ZXJfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCgojY2xhc3MgU2l6ZWQobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBTaXplZDoKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAwCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBTaXplZDoKICAgICAgICAgICAgaWYgYW55KCJfX2xlbl9fIiBpbiBCLl9fZGljdF9fIGZvciBCIGluIEMuX19tcm9fXyk6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKCiNjbGFzcyBDb250YWluZXIobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBDb250YWluZXI6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHgpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9fc3ViY2xhc3Nob29rX18oY2xzLCBDKToKICAgICAgICBpZiBjbHMgaXMgQ29udGFpbmVyOgogICAgICAgICAgICBpZiBhbnkoIl9fY29udGFpbnNfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiMjIyBNQVBQSU5HUyAjIyMKCgpjbGFzcyBNYXBwaW5nKFNpemVkLCBJdGVyYWJsZSwgQ29udGFpbmVyKToKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGZba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICByZXR1cm4gS2V5c1ZpZXcoc2VsZikKCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgcmV0dXJuIEl0ZW1zVmlldyhzZWxmKQoKICAgIGRlZiB2YWx1ZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIFZhbHVlc1ZpZXcoc2VsZikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgTWFwcGluZyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBkaWN0KHNlbGYuaXRlbXMoKSkgPT0gZGljdChvdGhlci5pdGVtcygpKQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3QgKHNlbGYgPT0gb3RoZXIpCgoKY2xhc3MgTXV0YWJsZU1hcHBpbmcoTWFwcGluZyk6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgcmFpc2UgS2V5RXJyb3IKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgX19tYXJrZXIgPSBvYmplY3QoKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCBkZWZhdWx0PV9fbWFya2VyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIHNlbGYuX19tYXJrZXI6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbCBzZWxmW2tleV0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBrZXkgPSBuZXh0KGl0ZXIoc2VsZikpCiAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yCiAgICAgICAgdmFsdWUgPSBzZWxmW2tleV0KICAgICAgICBkZWwgc2VsZltrZXldCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc2VsZi5wb3BpdGVtKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKCphcmdzLCAqKmt3ZHMpOgogICAgICAgIGlmIGxlbihhcmdzKSA+IDI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidXBkYXRlKCkgdGFrZXMgYXQgbW9zdCAyIHBvc2l0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyAoe30gZ2l2ZW4pIi5mb3JtYXQobGVuKGFyZ3MpKSkKICAgICAgICBlbGlmIG5vdCBhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInVwZGF0ZSgpIHRha2VzIGF0IGxlYXN0IDEgYXJndW1lbnQgKDAgZ2l2ZW4pIikKICAgICAgICBzZWxmID0gYXJnc1swXQogICAgICAgIG90aGVyID0gYXJnc1sxXSBpZiBsZW4oYXJncykgPj0gMiBlbHNlICgpCgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIE1hcHBpbmcpOgogICAgICAgICAgICBmb3Iga2V5IGluIG90aGVyOgogICAgICAgICAgICAgICAgc2VsZltrZXldID0gb3RoZXJba2V5XQogICAgICAgIGVsaWYgaGFzYXR0cihvdGhlciwgImtleXMiKToKICAgICAgICAgICAgZm9yIGtleSBpbiBvdGhlci5rZXlzKCk6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSBvdGhlcltrZXldCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gb3RoZXI6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3ZHMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWUKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmW2tleV0gPSBkZWZhdWx0CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiNNdXRhYmxlTWFwcGluZy5yZWdpc3RlcihkaWN0KQo=',
'/Lib/sre_constants.py':'',
'/Lib/keyword.pyj':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgJGdsb2JhbHM9X19CUllUSE9OX18uc2NvcGVbImtleXdvcmQucHkiXS5fX2RpY3RfXzt2YXIga3dsaXN0PSRnbG9iYWxzLmt3bGlzdD1saXN0KFsnRmFsc2UnLCdOb25lJywnVHJ1ZScsJ2FuZCcsJ2FzJywnYXNzZXJ0JywnYnJlYWsnLCdjbGFzcycsJ2NvbnRpbnVlJywnZGVmJywnZGVsJywnZWxpZicsJ2Vsc2UnLCdleGNlcHQnLCdmaW5hbGx5JywnZm9yJywnZnJvbScsJ2dsb2JhbCcsJ2lmJywnaW1wb3J0JywnaW4nLCdpcycsJ2xhbWJkYScsJ25vbmxvY2FsJywnbm90Jywnb3InLCdwYXNzJywncmFpc2UnLCdyZXR1cm4nLCd0cnknLCd3aGlsZScsJ3dpdGgnLCd5aWVsZCddKTt2YXIgaXNrZXl3b3JkPShmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3RyeXt2YXIgJG5zPSRNYWtlQXJncygiaXNrZXl3b3JkIixhcmd1bWVudHMsWyJ3b3JkIl0se30sbnVsbCxudWxsKTtmb3IoJHZhciBpbiAkbnMpZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpO3ZhciAkbG9jYWxzPV9fQlJZVEhPTl9fLnNjb3BlLnQxNWZpb2d4Ll9fZGljdF9fPSRucztyZXR1cm4gd29yZC5fX2luX18oa3dsaXN0KTt9Y2F0Y2goZXJyMil7dGhyb3cgX19CUllUSE9OX18uZXhjZXB0aW9uKGVycjIpO319O30pKCk7aXNrZXl3b3JkLl9fbmFtZV9fPSJpc2tleXdvcmQiOyRnbG9iYWxzLmlza2V5d29yZD1pc2tleXdvcmQ7cmV0dXJue2t3bGlzdDprd2xpc3QsaXNrZXl3b3JkOmlza2V5d29yZCxfX2dldGF0dHJfXzpmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXTt9LF9fc2V0YXR0cl9fOmZ1bmN0aW9uKGF0dHIsdmFsdWUpe3RoaXNbYXR0cl09dmFsdWU7fX07fSkoKTs=',
'/Lib/random.pyj':'',
'/Lib/operator.py':'',
'/Lib/heapq.pyj':'',
'/Lib/unittest/suite.py':'',
'/Lib/unittest/runner.py':'',
'/Lib/unittest/result.py':'IiIiVGVzdCByZXN1bHQgb2JqZWN0IiIiCgppbXBvcnQgb3MKaW1wb3J0IF9weWlvIGFzIGlvICAgCmltcG9ydCBzeXMKaW1wb3J0IHRyYWNlYmFjawoKI2hlbHAgbWUhCiNmcm9tIC4gaW1wb3J0IHV0aWwKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKZGVmIGZhaWxmYXN0KG1ldGhvZCk6CiAgICBAd3JhcHMobWV0aG9kKQogICAgZGVmIGlubmVyKHNlbGYsICphcmdzLCAqKmt3KToKICAgICAgICBpZiBnZXRhdHRyKHNlbGYsICdmYWlsZmFzdCcsIEZhbHNlKToKICAgICAgICAgICAgc2VsZi5zdG9wKCkKICAgICAgICByZXR1cm4gbWV0aG9kKHNlbGYsICphcmdzLCAqKmt3KQogICAgcmV0dXJuIGlubmVyCgpTVERPVVRfTElORSA9ICdcblN0ZG91dDpcbiVzJwpTVERFUlJfTElORSA9ICdcblN0ZGVycjpcbiVzJwoKCmNsYXNzIFRlc3RSZXN1bHQob2JqZWN0KToKICAgICIiIkhvbGRlciBmb3IgdGVzdCByZXN1bHQgaW5mb3JtYXRpb24uCgogICAgVGVzdCByZXN1bHRzIGFyZSBhdXRvbWF0aWNhbGx5IG1hbmFnZWQgYnkgdGhlIFRlc3RDYXNlIGFuZCBUZXN0U3VpdGUKICAgIGNsYXNzZXMsIGFuZCBkbyBub3QgbmVlZCB0byBiZSBleHBsaWNpdGx5IG1hbmlwdWxhdGVkIGJ5IHdyaXRlcnMgb2YgdGVzdHMuCgogICAgRWFjaCBpbnN0YW5jZSBob2xkcyB0aGUgdG90YWwgbnVtYmVyIG9mIHRlc3RzIHJ1biwgYW5kIGNvbGxlY3Rpb25zIG9mCiAgICBmYWlsdXJlcyBhbmQgZXJyb3JzIHRoYXQgb2NjdXJyZWQgYW1vbmcgdGhvc2UgdGVzdCBydW5zLiBUaGUgY29sbGVjdGlvbnMKICAgIGNvbnRhaW4gdHVwbGVzIG9mICh0ZXN0Y2FzZSwgZXhjZXB0aW9uaW5mbyksIHdoZXJlIGV4Y2VwdGlvbmluZm8gaXMgdGhlCiAgICBmb3JtYXR0ZWQgdHJhY2ViYWNrIG9mIHRoZSBlcnJvciB0aGF0IG9jY3VycmVkLgogICAgIiIiCiAgICBfcHJldmlvdXNUZXN0Q2xhc3MgPSBOb25lCiAgICBfdGVzdFJ1bkVudGVyZWQgPSBGYWxzZQogICAgX21vZHVsZVNldFVwRmFpbGVkID0gRmFsc2UKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzdHJlYW09Tm9uZSwgZGVzY3JpcHRpb25zPU5vbmUsIHZlcmJvc2l0eT1Ob25lKToKICAgICAgICBzZWxmLmZhaWxmYXN0ID0gRmFsc2UKICAgICAgICBzZWxmLmZhaWx1cmVzID0gW10KICAgICAgICBzZWxmLmVycm9ycyA9IFtdCiAgICAgICAgc2VsZi50ZXN0c1J1biA9IDAKICAgICAgICBzZWxmLnNraXBwZWQgPSBbXQogICAgICAgIHNlbGYuZXhwZWN0ZWRGYWlsdXJlcyA9IFtdCiAgICAgICAgc2VsZi51bmV4cGVjdGVkU3VjY2Vzc2VzID0gW10KICAgICAgICBzZWxmLnNob3VsZFN0b3AgPSBGYWxzZQogICAgICAgIHNlbGYuYnVmZmVyID0gRmFsc2UKICAgICAgICBzZWxmLl9zdGRvdXRfYnVmZmVyID0gTm9uZQogICAgICAgIHNlbGYuX3N0ZGVycl9idWZmZXIgPSBOb25lCiAgICAgICAgc2VsZi5fb3JpZ2luYWxfc3Rkb3V0ID0gc3lzLnN0ZG91dAogICAgICAgIHNlbGYuX29yaWdpbmFsX3N0ZGVyciA9IHN5cy5zdGRlcnIKICAgICAgICBzZWxmLl9taXJyb3JPdXRwdXQgPSBGYWxzZQoKICAgIGRlZiBwcmludEVycm9ycyhzZWxmKToKICAgICAgICAiQ2FsbGVkIGJ5IFRlc3RSdW5uZXIgYWZ0ZXIgdGVzdCBydW4iCgogICAgZGVmIHN0YXJ0VGVzdChzZWxmLCB0ZXN0KToKICAgICAgICAiQ2FsbGVkIHdoZW4gdGhlIGdpdmVuIHRlc3QgaXMgYWJvdXQgdG8gYmUgcnVuIgogICAgICAgIHNlbGYudGVzdHNSdW4gKz0gMQogICAgICAgIHNlbGYuX21pcnJvck91dHB1dCA9IEZhbHNlCiAgICAgICAgc2VsZi5fc2V0dXBTdGRvdXQoKQoKICAgIGRlZiBfc2V0dXBTdGRvdXQoc2VsZik6CiAgICAgICAgaWYgc2VsZi5idWZmZXI6CiAgICAgICAgICAgIGlmIHNlbGYuX3N0ZGVycl9idWZmZXIgaXMgTm9uZToKICAgICAgICAgICAgICAgIHNlbGYuX3N0ZGVycl9idWZmZXIgPSBpby5TdHJpbmdJTygpCiAgICAgICAgICAgICAgICBzZWxmLl9zdGRvdXRfYnVmZmVyID0gaW8uU3RyaW5nSU8oKQogICAgICAgICAgICBzeXMuc3Rkb3V0ID0gc2VsZi5fc3Rkb3V0X2J1ZmZlcgogICAgICAgICAgICBzeXMuc3RkZXJyID0gc2VsZi5fc3RkZXJyX2J1ZmZlcgoKICAgIGRlZiBzdGFydFRlc3RSdW4oc2VsZik6CiAgICAgICAgIiIiQ2FsbGVkIG9uY2UgYmVmb3JlIGFueSB0ZXN0cyBhcmUgZXhlY3V0ZWQuCgogICAgICAgIFNlZSBzdGFydFRlc3QgZm9yIGEgbWV0aG9kIGNhbGxlZCBiZWZvcmUgZWFjaCB0ZXN0LgogICAgICAgICIiIgoKICAgIGRlZiBzdG9wVGVzdChzZWxmLCB0ZXN0KToKICAgICAgICAiIiJDYWxsZWQgd2hlbiB0aGUgZ2l2ZW4gdGVzdCBoYXMgYmVlbiBydW4iIiIKICAgICAgICBzZWxmLl9yZXN0b3JlU3Rkb3V0KCkKICAgICAgICBzZWxmLl9taXJyb3JPdXRwdXQgPSBGYWxzZQoKICAgIGRlZiBfcmVzdG9yZVN0ZG91dChzZWxmKToKICAgICAgICBpZiBzZWxmLmJ1ZmZlcjoKICAgICAgICAgICAgaWYgc2VsZi5fbWlycm9yT3V0cHV0OgogICAgICAgICAgICAgICAgb3V0cHV0ID0gc3lzLnN0ZG91dC5nZXR2YWx1ZSgpCiAgICAgICAgICAgICAgICBlcnJvciA9IHN5cy5zdGRlcnIuZ2V0dmFsdWUoKQogICAgICAgICAgICAgICAgaWYgb3V0cHV0OgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBvdXRwdXQuZW5kc3dpdGgoJ1xuJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCArPSAnXG4nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fb3JpZ2luYWxfc3Rkb3V0LndyaXRlKFNURE9VVF9MSU5FICUgb3V0cHV0KQogICAgICAgICAgICAgICAgaWYgZXJyb3I6CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGVycm9yLmVuZHN3aXRoKCdcbicpOgogICAgICAgICAgICAgICAgICAgICAgICBlcnJvciArPSAnXG4nCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fb3JpZ2luYWxfc3RkZXJyLndyaXRlKFNUREVSUl9MSU5FICUgZXJyb3IpCgogICAgICAgICAgICBzeXMuc3Rkb3V0ID0gc2VsZi5fb3JpZ2luYWxfc3Rkb3V0CiAgICAgICAgICAgIHN5cy5zdGRlcnIgPSBzZWxmLl9vcmlnaW5hbF9zdGRlcnIKICAgICAgICAgICAgc2VsZi5fc3Rkb3V0X2J1ZmZlci5zZWVrKDApCiAgICAgICAgICAgIHNlbGYuX3N0ZG91dF9idWZmZXIudHJ1bmNhdGUoKQogICAgICAgICAgICBzZWxmLl9zdGRlcnJfYnVmZmVyLnNlZWsoMCkKICAgICAgICAgICAgc2VsZi5fc3RkZXJyX2J1ZmZlci50cnVuY2F0ZSgpCgogICAgZGVmIHN0b3BUZXN0UnVuKHNlbGYpOgogICAgICAgICIiIkNhbGxlZCBvbmNlIGFmdGVyIGFsbCB0ZXN0cyBhcmUgZXhlY3V0ZWQuCgogICAgICAgIFNlZSBzdG9wVGVzdCBmb3IgYSBtZXRob2QgY2FsbGVkIGFmdGVyIGVhY2ggdGVzdC4KICAgICAgICAiIiIKCiAgICBAZmFpbGZhc3QKICAgIGRlZiBhZGRFcnJvcihzZWxmLCB0ZXN0LCBlcnIpOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4gJ2VycicgaXMgYSB0dXBsZSBvZiB2YWx1ZXMgYXMKICAgICAgICByZXR1cm5lZCBieSBzeXMuZXhjX2luZm8oKS4KICAgICAgICAiIiIKICAgICAgICBzZWxmLmVycm9ycy5hcHBlbmQoKHRlc3QsIHNlbGYuX2V4Y19pbmZvX3RvX3N0cmluZyhlcnIsIHRlc3QpKSkKICAgICAgICBzZWxmLl9taXJyb3JPdXRwdXQgPSBUcnVlCgogICAgQGZhaWxmYXN0CiAgICBkZWYgYWRkRmFpbHVyZShzZWxmLCB0ZXN0LCBlcnIpOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGFuIGVycm9yIGhhcyBvY2N1cnJlZC4gJ2VycicgaXMgYSB0dXBsZSBvZiB2YWx1ZXMgYXMKICAgICAgICByZXR1cm5lZCBieSBzeXMuZXhjX2luZm8oKS4iIiIKICAgICAgICBzZWxmLmZhaWx1cmVzLmFwcGVuZCgodGVzdCwgc2VsZi5fZXhjX2luZm9fdG9fc3RyaW5nKGVyciwgdGVzdCkpKQogICAgICAgIHNlbGYuX21pcnJvck91dHB1dCA9IFRydWUKCiAgICBkZWYgYWRkU3VjY2VzcyhzZWxmLCB0ZXN0KToKICAgICAgICAiQ2FsbGVkIHdoZW4gYSB0ZXN0IGhhcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5IgogICAgICAgIHBhc3MKCiAgICBkZWYgYWRkU2tpcChzZWxmLCB0ZXN0LCByZWFzb24pOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGEgdGVzdCBpcyBza2lwcGVkLiIiIgogICAgICAgIHNlbGYuc2tpcHBlZC5hcHBlbmQoKHRlc3QsIHJlYXNvbikpCgogICAgZGVmIGFkZEV4cGVjdGVkRmFpbHVyZShzZWxmLCB0ZXN0LCBlcnIpOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGFuIGV4cGVjdGVkIGZhaWx1cmUvZXJyb3Igb2NjdXJlZC4iIiIKICAgICAgICBzZWxmLmV4cGVjdGVkRmFpbHVyZXMuYXBwZW5kKAogICAgICAgICAgICAodGVzdCwgc2VsZi5fZXhjX2luZm9fdG9fc3RyaW5nKGVyciwgdGVzdCkpKQoKICAgIEBmYWlsZmFzdAogICAgZGVmIGFkZFVuZXhwZWN0ZWRTdWNjZXNzKHNlbGYsIHRlc3QpOgogICAgICAgICIiIkNhbGxlZCB3aGVuIGEgdGVzdCB3YXMgZXhwZWN0ZWQgdG8gZmFpbCwgYnV0IHN1Y2NlZWQuIiIiCiAgICAgICAgc2VsZi51bmV4cGVjdGVkU3VjY2Vzc2VzLmFwcGVuZCh0ZXN0KQoKICAgIGRlZiB3YXNTdWNjZXNzZnVsKHNlbGYpOgogICAgICAgICJUZWxscyB3aGV0aGVyIG9yIG5vdCB0aGlzIHJlc3VsdCB3YXMgYSBzdWNjZXNzIgogICAgICAgIHJldHVybiBsZW4oc2VsZi5mYWlsdXJlcykgPT0gbGVuKHNlbGYuZXJyb3JzKSA9PSAwCgogICAgZGVmIHN0b3Aoc2VsZik6CiAgICAgICAgIkluZGljYXRlcyB0aGF0IHRoZSB0ZXN0cyBzaG91bGQgYmUgYWJvcnRlZCIKICAgICAgICBzZWxmLnNob3VsZFN0b3AgPSBUcnVlCgogICAgZGVmIF9leGNfaW5mb190b19zdHJpbmcoc2VsZiwgZXJyLCB0ZXN0KToKICAgICAgICAiIiJDb252ZXJ0cyBhIHN5cy5leGNfaW5mbygpLXN0eWxlIHR1cGxlIG9mIHZhbHVlcyBpbnRvIGEgc3RyaW5nLiIiIgogICAgICAgIHBhc3MgICAjZml4bWUgYnJ5dGhvbgoKICAgICAgICAjZXhjdHlwZSwgdmFsdWUsIHRiID0gZXJyCiAgICAgICAgIyMgU2tpcCB0ZXN0IHJ1bm5lciB0cmFjZWJhY2sgbGV2ZWxzCiAgICAgICAgI3doaWxlIHRiIGFuZCBzZWxmLl9pc19yZWxldmFudF90Yl9sZXZlbCh0Yik6CiAgICAgICAgIyAgICB0YiA9IHRiLnRiX25leHQKCiAgICAgICAgI2lmIGV4Y3R5cGUgaXMgdGVzdC5mYWlsdXJlRXhjZXB0aW9uOgogICAgICAgICMgICAgIyBTa2lwIGFzc2VydCooKSB0cmFjZWJhY2sgbGV2ZWxzCiAgICAgICAgIyAgICBsZW5ndGggPSBzZWxmLl9jb3VudF9yZWxldmFudF90Yl9sZXZlbHModGIpCiAgICAgICAgIyAgICBtc2dMaW5lcyA9IHRyYWNlYmFjay5mb3JtYXRfZXhjZXB0aW9uKGV4Y3R5cGUsIHZhbHVlLCB0YiwgbGVuZ3RoKQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgbXNnTGluZXMgPSB0cmFjZWJhY2suZm9ybWF0X2V4Y2VwdGlvbihleGN0eXBlLCB2YWx1ZSwgdGIpCgogICAgICAgICNpZiBzZWxmLmJ1ZmZlcjoKICAgICAgICAjICAgIG91dHB1dCA9IHN5cy5zdGRvdXQuZ2V0dmFsdWUoKQogICAgICAgICMgICAgZXJyb3IgPSBzeXMuc3RkZXJyLmdldHZhbHVlKCkKICAgICAgICAjICAgIGlmIG91dHB1dDoKICAgICAgICAjICAgICAgICBpZiBub3Qgb3V0cHV0LmVuZHN3aXRoKCdcbicpOgogICAgICAgICMgICAgICAgICAgICBvdXRwdXQgKz0gJ1xuJwogICAgICAgICMgICAgICAgIG1zZ0xpbmVzLmFwcGVuZChTVERPVVRfTElORSAlIG91dHB1dCkKICAgICAgICAjICAgIGlmIGVycm9yOgogICAgICAgICMgICAgICAgIGlmIG5vdCBlcnJvci5lbmRzd2l0aCgnXG4nKToKICAgICAgICAjICAgICAgICAgICAgZXJyb3IgKz0gJ1xuJwogICAgICAgICMgICAgICAgIG1zZ0xpbmVzLmFwcGVuZChTVERFUlJfTElORSAlIGVycm9yKQogICAgICAgICNyZXR1cm4gJycuam9pbihtc2dMaW5lcykKCgogICAgI2RlZiBfaXNfcmVsZXZhbnRfdGJfbGV2ZWwoc2VsZiwgdGIpOgogICAgIyAgICByZXR1cm4gJ19fdW5pdHRlc3QnIGluIHRiLnRiX2ZyYW1lLmZfZ2xvYmFscwoKICAgICNkZWYgX2NvdW50X3JlbGV2YW50X3RiX2xldmVscyhzZWxmLCB0Yik6CiAgICAjICAgIGxlbmd0aCA9IDAKICAgICMgICAgd2hpbGUgdGIgYW5kIG5vdCBzZWxmLl9pc19yZWxldmFudF90Yl9sZXZlbCh0Yik6CiAgICAjICAgICAgICBsZW5ndGggKz0gMQogICAgIyAgICAgICAgdGIgPSB0Yi50Yl9uZXh0CiAgICAjICAgIHJldHVybiBsZW5ndGgKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgcmV0dXJuICgiPCVzIHJ1bj0laSBlcnJvcnM9JWkgZmFpbHVyZXM9JWk+IiAlCiAgICAgICAgICAgICAgICh1dGlsLnN0cmNsYXNzKHNlbGYuX19jbGFzc19fKSwgc2VsZi50ZXN0c1J1biwgbGVuKHNlbGYuZXJyb3JzKSwKICAgICAgICAgICAgICAgIGxlbihzZWxmLmZhaWx1cmVzKSkpCg==',
'/Lib/unittest/__init__.py':'IiIiClB5dGhvbiB1bml0IHRlc3RpbmcgZnJhbWV3b3JrLCBiYXNlZCBvbiBFcmljaCBHYW1tYSdzIEpVbml0IGFuZCBLZW50IEJlY2sncwpTbWFsbHRhbGsgdGVzdGluZyBmcmFtZXdvcmsuCgpUaGlzIG1vZHVsZSBjb250YWlucyB0aGUgY29yZSBmcmFtZXdvcmsgY2xhc3NlcyB0aGF0IGZvcm0gdGhlIGJhc2lzIG9mCnNwZWNpZmljIHRlc3QgY2FzZXMgYW5kIHN1aXRlcyAoVGVzdENhc2UsIFRlc3RTdWl0ZSBldGMuKSwgYW5kIGFsc28gYQp0ZXh0LWJhc2VkIHV0aWxpdHkgY2xhc3MgZm9yIHJ1bm5pbmcgdGhlIHRlc3RzIGFuZCByZXBvcnRpbmcgdGhlIHJlc3VsdHMKIChUZXh0VGVzdFJ1bm5lcikuCgpTaW1wbGUgdXNhZ2U6CgogICAgaW1wb3J0IHVuaXR0ZXN0CgogICAgY2xhc3MgSW50ZWdlckFyaXRobWVudGljVGVzdENhc2UodW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgIGRlZiB0ZXN0QWRkKHNlbGYpOiAgIyMgdGVzdCBtZXRob2QgbmFtZXMgYmVnaW4gJ3Rlc3QqJwogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCgxICsgMiksIDMpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoMCArIDEsIDEpCiAgICAgICAgZGVmIHRlc3RNdWx0aXBseShzZWxmKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoMCAqIDEwKSwgMCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoNSAqIDgpLCA0MCkKCiAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgICAgIHVuaXR0ZXN0Lm1haW4oKQoKRnVydGhlciBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGJ1bmRsZWQgZG9jdW1lbnRhdGlvbiwgYW5kIGZyb20KCiAgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3VuaXR0ZXN0Lmh0bWwKCkNvcHlyaWdodCAoYykgMTk5OS0yMDAzIFN0ZXZlIFB1cmNlbGwKQ29weXJpZ2h0IChjKSAyMDAzLTIwMTAgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24KVGhpcyBtb2R1bGUgaXMgZnJlZSBzb2Z0d2FyZSwgYW5kIHlvdSBtYXkgcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUHl0aG9uIGl0c2VsZiwgc28gbG9uZyBhcyB0aGlzIGNvcHlyaWdodCBtZXNzYWdlCmFuZCBkaXNjbGFpbWVyIGFyZSByZXRhaW5lZCBpbiB0aGVpciBvcmlnaW5hbCBmb3JtLgoKSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgVE8gQU5ZIFBBUlRZIEZPUiBESVJFQ1QsIElORElSRUNULApTUEVDSUFMLCBJTkNJREVOVEFMLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhFIFVTRSBPRgpUSElTIENPREUsIEVWRU4gSUYgVEhFIEFVVEhPUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNICkRBTUFHRS4KClRIRSBBVVRIT1IgU1BFQ0lGSUNBTExZIERJU0NMQUlNUyBBTlkgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UCkxJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBClBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRIRSBDT0RFIFBST1ZJREVEIEhFUkVVTkRFUiBJUyBPTiBBTiAiQVMgSVMiIEJBU0lTLApBTkQgVEhFUkUgSVMgTk8gT0JMSUdBVElPTiBXSEFUU09FVkVSIFRPIFBST1ZJREUgTUFJTlRFTkFOQ0UsClNVUFBPUlQsIFVQREFURVMsIEVOSEFOQ0VNRU5UUywgT1IgTU9ESUZJQ0FUSU9OUy4KIiIiCgojX19hbGxfXyA9IFsnVGVzdFJlc3VsdCcsICdUZXN0Q2FzZScsICdUZXN0U3VpdGUnLAojICAgICAgICAgICAnVGV4dFRlc3RSdW5uZXInLCAnVGVzdExvYWRlcicsICdGdW5jdGlvblRlc3RDYXNlJywgJ21haW4nLAojICAgICAgICAgICAnZGVmYXVsdFRlc3RMb2FkZXInLCAnU2tpcFRlc3QnLCAnc2tpcCcsICdza2lwSWYnLCAnc2tpcFVubGVzcycsCiMgICAgICAgICAgICdleHBlY3RlZEZhaWx1cmUnLCAnVGV4dFRlc3RSZXN1bHQnLCAnaW5zdGFsbEhhbmRsZXInLAojICAgICAgICAgICAncmVnaXN0ZXJSZXN1bHQnLCAncmVtb3ZlUmVzdWx0JywgJ3JlbW92ZUhhbmRsZXInXQoKIyBFeHBvc2Ugb2Jzb2xldGUgZnVuY3Rpb25zIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQojX19hbGxfXy5leHRlbmQoWydnZXRUZXN0Q2FzZU5hbWVzJywgJ21ha2VTdWl0ZScsICdmaW5kVGVzdENhc2VzJ10pCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKI2Zyb20gLnJlc3VsdCBpbXBvcnQgVGVzdFJlc3VsdAojZml4bWUgYnJ5dGhvbiBzeW50YXggZXJyb3IKZnJvbSAuY2FzZSBpbXBvcnQgVGVzdENhc2UKZnJvbSAubWFpbiBpbXBvcnQgVGVzdFByb2dyYW0sIG1haW4KI2Zyb20gLmNhc2UgaW1wb3J0IChUZXN0Q2FzZSwgRnVuY3Rpb25UZXN0Q2FzZSwgU2tpcFRlc3QsIHNraXAsIHNraXBJZiwKIyAgICAgICAgICAgICAgICAgICBza2lwVW5sZXNzLCBleHBlY3RlZEZhaWx1cmUpCiNmcm9tIC5zdWl0ZSBpbXBvcnQgQmFzZVRlc3RTdWl0ZSwgVGVzdFN1aXRlCiNmcm9tIC5sb2FkZXIgaW1wb3J0IChUZXN0TG9hZGVyLCBkZWZhdWx0VGVzdExvYWRlciwgbWFrZVN1aXRlLCBnZXRUZXN0Q2FzZU5hbWVzLAojICAgICAgICAgICAgICAgICAgICAgZmluZFRlc3RDYXNlcykKI2Zyb20gLm1haW4gaW1wb3J0IFRlc3RQcm9ncmFtLCBtYWluCiNmcm9tIC5ydW5uZXIgaW1wb3J0IFRleHRUZXN0UnVubmVyLCBUZXh0VGVzdFJlc3VsdAojZnJvbSAuc2lnbmFscyBpbXBvcnQgaW5zdGFsbEhhbmRsZXIsIHJlZ2lzdGVyUmVzdWx0LCByZW1vdmVSZXN1bHQsIHJlbW92ZUhhbmRsZXIKCiMgZGVwcmVjYXRlZAojX1RleHRUZXN0UmVzdWx0ID0gVGV4dFRlc3RSZXN1bHQK',
'/Lib/unittest/__main__.py':'IiIiTWFpbiBlbnRyeSBwb2ludCIiIgoKaW1wb3J0IHN5cwppZiBzeXMuYXJndlswXS5lbmRzd2l0aCgiX19tYWluX18ucHkiKToKICAgIHN5cy5hcmd2WzBdID0gInB5dGhvbiAtbSB1bml0dGVzdCIKCl9fdW5pdHRlc3QgPSBUcnVlCgpmcm9tIC5tYWluIGltcG9ydCBtYWluLCBUZXN0UHJvZ3JhbSwgVVNBR0VfQVNfTUFJTgpUZXN0UHJvZ3JhbS5VU0FHRSA9IFVTQUdFX0FTX01BSU4KCm1haW4obW9kdWxlPU5vbmUpCg==',
'/Lib/unittest/util.py':'IyAiVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy4iCgojZml4bWUsIGJyeXRob24sIG5lZWQgdG8gZml4IG5hbWVkdHVwbGUKI2Zyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUsIE9yZGVyZWREaWN0CiNmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBPcmRlcmVkRGljdAoKX191bml0dGVzdCA9IFRydWUKCiNfTUFYX0xFTkdUSCA9IDgwCiNkZWYgc2FmZV9yZXByKG9iaiwgc2hvcnQ9RmFsc2UpOgojICAgIHRyeToKIyAgICAgICAgcmVzdWx0ID0gcmVwcihvYmopCiMgICAgZXhjZXB0IEV4Y2VwdGlvbjoKIyAgICAgICAgcmVzdWx0ID0gb2JqZWN0Ll9fcmVwcl9fKG9iaikKIyAgICBpZiBub3Qgc2hvcnQgb3IgbGVuKHJlc3VsdCkgPCBfTUFYX0xFTkdUSDoKIyAgICAgICAgcmV0dXJuIHJlc3VsdAojICAgIHJldHVybiByZXN1bHRbOl9NQVhfTEVOR1RIXSArICcgW3RydW5jYXRlZF0uLi4nCgojZGVmIHN0cmNsYXNzKGNscyk6CiMgICAgcmV0dXJuICIlcy4lcyIgJSAoY2xzLl9fbW9kdWxlX18sIGNscy5fX25hbWVfXykKCiNkZWYgc29ydGVkX2xpc3RfZGlmZmVyZW5jZShleHBlY3RlZCwgYWN0dWFsKToKIyAgICAiIiJGaW5kcyBlbGVtZW50cyBpbiBvbmx5IG9uZSBvciB0aGUgb3RoZXIgb2YgdHdvLCBzb3J0ZWQgaW5wdXQgbGlzdHMuCiMKIyAgICBSZXR1cm5zIGEgdHdvLWVsZW1lbnQgdHVwbGUgb2YgbGlzdHMuICAgIFRoZSBmaXJzdCBsaXN0IGNvbnRhaW5zIHRob3NlCiMgICAgZWxlbWVudHMgaW4gdGhlICJleHBlY3RlZCIgbGlzdCBidXQgbm90IGluIHRoZSAiYWN0dWFsIiBsaXN0LCBhbmQgdGhlCiMgICAgc2Vjb25kIGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIGluIHRoZSAiYWN0dWFsIiBsaXN0IGJ1dCBub3QgaW4gdGhlCiMgICAgImV4cGVjdGVkIiBsaXN0LiAgICBEdXBsaWNhdGUgZWxlbWVudHMgaW4gZWl0aGVyIGlucHV0IGxpc3QgYXJlIGlnbm9yZWQuCiMgICAgIiIiCiMgICAgaSA9IGogPSAwCiMgICAgbWlzc2luZyA9IFtdCiMgICAgdW5leHBlY3RlZCA9IFtdCiMgICAgd2hpbGUgVHJ1ZToKIyAgICAgICAgdHJ5OgojICAgICAgICAgICAgZSA9IGV4cGVjdGVkW2ldCiMgICAgICAgICAgICBhID0gYWN0dWFsW2pdCiMgICAgICAgICAgICBpZiBlIDwgYToKIyAgICAgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChlKQojICAgICAgICAgICAgICAgIGkgKz0gMQojICAgICAgICAgICAgICAgIHdoaWxlIGV4cGVjdGVkW2ldID09IGU6CiMgICAgICAgICAgICAgICAgICAgIGkgKz0gMQojICAgICAgICAgICAgZWxpZiBlID4gYToKIyAgICAgICAgICAgICAgICB1bmV4cGVjdGVkLmFwcGVuZChhKQojICAgICAgICAgICAgICAgIGogKz0gMQojICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgojICAgICAgICAgICAgICAgICAgICBqICs9IDEKIyAgICAgICAgICAgIGVsc2U6CiMgICAgICAgICAgICAgICAgaSArPSAxCiMgICAgICAgICAgICAgICAgdHJ5OgojICAgICAgICAgICAgICAgICAgICB3aGlsZSBleHBlY3RlZFtpXSA9PSBlOgojICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxCiMgICAgICAgICAgICAgICAgZmluYWxseToKIyAgICAgICAgICAgICAgICAgICAgaiArPSAxCiMgICAgICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgojICAgICAgICAgICAgICAgICAgICAgICAgaiArPSAxCiMgICAgICAgIGV4Y2VwdCBJbmRleEVycm9yOgojICAgICAgICAgICAgbWlzc2luZy5leHRlbmQoZXhwZWN0ZWRbaTpdKQojICAgICAgICAgICAgdW5leHBlY3RlZC5leHRlbmQoYWN0dWFsW2o6XSkKIyAgICAgICAgICAgIGJyZWFrCiMgICAgcmV0dXJuIG1pc3NpbmcsIHVuZXhwZWN0ZWQKCgojZGVmIHVub3JkZXJhYmxlX2xpc3RfZGlmZmVyZW5jZShleHBlY3RlZCwgYWN0dWFsKToKIyAgICAiIiJTYW1lIGJlaGF2aW9yIGFzIHNvcnRlZF9saXN0X2RpZmZlcmVuY2UgYnV0CiMgICAgZm9yIGxpc3RzIG9mIHVub3JkZXJhYmxlIGl0ZW1zIChsaWtlIGRpY3RzKS4KIwojICAgIEFzIGl0IGRvZXMgYSBsaW5lYXIgc2VhcmNoIHBlciBpdGVtIChyZW1vdmUpIGl0CiMgICAgaGFzIE8obipuKSBwZXJmb3JtYW5jZS4iIiIKIyAgICBtaXNzaW5nID0gW10KIyAgICB3aGlsZSBleHBlY3RlZDoKIyAgICAgICAgaXRlbSA9IGV4cGVjdGVkLnBvcCgpCiMgICAgICAgIHRyeToKIyAgICAgICAgICAgIGFjdHVhbC5yZW1vdmUoaXRlbSkKIyAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiMgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChpdGVtKQoKICAgICMgYW55dGhpbmcgbGVmdCBpbiBhY3R1YWwgaXMgdW5leHBlY3RlZAojICAgIHJldHVybiBtaXNzaW5nLCBhY3R1YWwKCiNkZWYgdGhyZWVfd2F5X2NtcCh4LCB5KToKIyAgICAiIiJSZXR1cm4gLTEgaWYgeCA8IHksIDAgaWYgeCA9PSB5IGFuZCAxIGlmIHggPiB5IiIiCiMgICAgcmV0dXJuICh4ID4geSkgLSAoeCA8IHkpCgojIGZpeG1lLCBicnl0aG9uCiNuYW1lZHR1cGxlIGlzc3VlcyBpbiBjb2xsZWN0aW9ucy5weQojX01pc21hdGNoID0gbmFtZWR0dXBsZSgnTWlzbWF0Y2gnLCAnYWN0dWFsIGV4cGVjdGVkIHZhbHVlJykKCiNkZWYgX2NvdW50X2RpZmZfYWxsX3B1cnBvc2UoYWN0dWFsLCBleHBlY3RlZCk6CiMgICAgJ1JldHVybnMgbGlzdCBvZiAoY250X2FjdCwgY250X2V4cCwgZWxlbSkgdHJpcGxlcyB3aGVyZSB0aGUgY291bnRzIGRpZmZlcicKIyAgICAjIGVsZW1lbnRzIG5lZWQgbm90IGJlIGhhc2hhYmxlCiMgICAgcywgdCA9IGxpc3QoYWN0dWFsKSwgbGlzdChleHBlY3RlZCkKIyAgICBtLCBuID0gbGVuKHMpLCBsZW4odCkKIyAgICBOVUxMID0gb2JqZWN0KCkKIyAgICByZXN1bHQgPSBbXQojICAgIGZvciBpLCBlbGVtIGluIGVudW1lcmF0ZShzKToKIyAgICAgICAgaWYgZWxlbSBpcyBOVUxMOgojICAgICAgICAgICAgY29udGludWUKIyAgICAgICAgY250X3MgPSBjbnRfdCA9IDAKIyAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSwgbSk6CiMgICAgICAgICAgICBpZiBzW2pdID09IGVsZW06CiMgICAgICAgICAgICAgICAgY250X3MgKz0gMQojICAgICAgICAgICAgICAgIHNbal0gPSBOVUxMCiMgICAgICAgIGZvciBqLCBvdGhlcl9lbGVtIGluIGVudW1lcmF0ZSh0KToKIyAgICAgICAgICAgIGlmIG90aGVyX2VsZW0gPT0gZWxlbToKIyAgICAgICAgICAgICAgICBjbnRfdCArPSAxCiMgICAgICAgICAgICAgICAgdFtqXSA9IE5VTEwKIyAgICAgICAgaWYgY250X3MgIT0gY250X3Q6CiMgICAgICAgICAgICBkaWZmID0gX01pc21hdGNoKGNudF9zLCBjbnRfdCwgZWxlbSkKIyAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZGlmZikKIwojICAgIGZvciBpLCBlbGVtIGluIGVudW1lcmF0ZSh0KToKIyAgICAgICAgaWYgZWxlbSBpcyBOVUxMOgojICAgICAgICAgICAgY29udGludWUKIyAgICAgICAgY250X3QgPSAwCiMgICAgICAgIGZvciBqIGluIHJhbmdlKGksIG4pOgojICAgICAgICAgICAgaWYgdFtqXSA9PSBlbGVtOgojICAgICAgICAgICAgICAgIGNudF90ICs9IDEKIyAgICAgICAgICAgICAgICB0W2pdID0gTlVMTAojICAgICAgICBkaWZmID0gX01pc21hdGNoKDAsIGNudF90LCBlbGVtKQojICAgICAgICByZXN1bHQuYXBwZW5kKGRpZmYpCiMgICAgcmV0dXJuIHJlc3VsdAoKI2RlZiBfb3JkZXJlZF9jb3VudChpdGVyYWJsZSk6CiMgICAgJ1JldHVybiBkaWN0IG9mIGVsZW1lbnQgY291bnRzLCBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIGZpcnN0IHNlZW4nCiMgICAgYyA9IE9yZGVyZWREaWN0KCkKIyAgICBmb3IgZWxlbSBpbiBpdGVyYWJsZToKIyAgICAgICAgY1tlbGVtXSA9IGMuZ2V0KGVsZW0sIDApICsgMQojICAgIHJldHVybiBjCgojZGVmIF9jb3VudF9kaWZmX2hhc2hhYmxlKGFjdHVhbCwgZXhwZWN0ZWQpOgojICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInCiMgICAgIyBlbGVtZW50cyBtdXN0IGJlIGhhc2hhYmxlCiMgICAgcywgdCA9IF9vcmRlcmVkX2NvdW50KGFjdHVhbCksIF9vcmRlcmVkX2NvdW50KGV4cGVjdGVkKQojICAgIHJlc3VsdCA9IFtdCiMgICAgZm9yIGVsZW0sIGNudF9zIGluIHMuaXRlbXMoKToKIyAgICAgICAgY250X3QgPSB0LmdldChlbGVtLCAwKQojICAgICAgICBpZiBjbnRfcyAhPSBjbnRfdDoKIyAgICAgICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goY250X3MsIGNudF90LCBlbGVtKQojICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQojICAgIGZvciBlbGVtLCBjbnRfdCBpbiB0Lml0ZW1zKCk6CiMgICAgICAgIGlmIGVsZW0gbm90IGluIHM6CiMgICAgICAgICAgICBkaWZmID0gX01pc21hdGNoKDAsIGNudF90LCBlbGVtKQojICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQojICAgIHJldHVybiByZXN1bHQK',
'/Lib/unittest/loader.py':'',
'/Lib/unittest/signals.py':'aW1wb3J0IHNpZ25hbAppbXBvcnQgd2Vha3JlZgoKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCmNsYXNzIF9JbnRlcnJ1cHRIYW5kbGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVmYXVsdF9oYW5kbGVyKToKICAgICAgICBzZWxmLmNhbGxlZCA9IEZhbHNlCiAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIgPSBkZWZhdWx0X2hhbmRsZXIKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgc2lnbnVtLCBmcmFtZSk6CiAgICAgICAgaW5zdGFsbGVkX2hhbmRsZXIgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgaWYgaW5zdGFsbGVkX2hhbmRsZXIgaXMgbm90IHNlbGY6CiAgICAgICAgICAgICMgaWYgd2UgYXJlbid0IHRoZSBpbnN0YWxsZWQgaGFuZGxlciwgdGhlbiBkZWxlZ2F0ZSBpbW1lZGlhdGVseQogICAgICAgICAgICAjIHRvIHRoZSBkZWZhdWx0IGhhbmRsZXIKICAgICAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIoc2lnbnVtLCBmcmFtZSkKCiAgICAgICAgaWYgc2VsZi5jYWxsZWQ6CiAgICAgICAgICAgIHNlbGYuZGVmYXVsdF9oYW5kbGVyKHNpZ251bSwgZnJhbWUpCiAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlCiAgICAgICAgZm9yIHJlc3VsdCBpbiBfcmVzdWx0cy5rZXlzKCk6CiAgICAgICAgICAgIHJlc3VsdC5zdG9wKCkKCl9yZXN1bHRzID0gd2Vha3JlZi5XZWFrS2V5RGljdGlvbmFyeSgpCmRlZiByZWdpc3RlclJlc3VsdChyZXN1bHQpOgogICAgX3Jlc3VsdHNbcmVzdWx0XSA9IDEKCmRlZiByZW1vdmVSZXN1bHQocmVzdWx0KToKICAgIHJldHVybiBib29sKF9yZXN1bHRzLnBvcChyZXN1bHQsIE5vbmUpKQoKX2ludGVycnVwdF9oYW5kbGVyID0gTm9uZQpkZWYgaW5zdGFsbEhhbmRsZXIoKToKICAgIGdsb2JhbCBfaW50ZXJydXB0X2hhbmRsZXIKICAgIGlmIF9pbnRlcnJ1cHRfaGFuZGxlciBpcyBOb25lOgogICAgICAgIGRlZmF1bHRfaGFuZGxlciA9IHNpZ25hbC5nZXRzaWduYWwoc2lnbmFsLlNJR0lOVCkKICAgICAgICBfaW50ZXJydXB0X2hhbmRsZXIgPSBfSW50ZXJydXB0SGFuZGxlcihkZWZhdWx0X2hhbmRsZXIpCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIpCgoKZGVmIHJlbW92ZUhhbmRsZXIobWV0aG9kPU5vbmUpOgogICAgaWYgbWV0aG9kIGlzIG5vdCBOb25lOgogICAgICAgIEB3cmFwcyhtZXRob2QpCiAgICAgICAgZGVmIGlubmVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIGluaXRpYWwgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgICAgIHJlbW92ZUhhbmRsZXIoKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kKCphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW5pdGlhbCkKICAgICAgICByZXR1cm4gaW5uZXIKCiAgICBnbG9iYWwgX2ludGVycnVwdF9oYW5kbGVyCiAgICBpZiBfaW50ZXJydXB0X2hhbmRsZXIgaXMgbm90IE5vbmU6CiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIuZGVmYXVsdF9oYW5kbGVyKQo=',
'/Lib/unittest/case.py':'',
'/Lib/unittest/main.py':''
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.$py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.$py_VFS[lib])
}


function $import_pyj_module(module,alias,names,path,module_contents) {
    __BRYTHON__.$py_module_path[module]=path
    __BRYTHON__.$py_module_alias[module]=alias
    __BRYTHON__.scope[module+'.py']={}
    __BRYTHON__.scope[module+'.py'].__dict__={}

   try {
     eval(module_contents);
     // add names defined in the module as attributes of $module
     for(var attr in __BRYTHON__.scope[module].__dict__){
       $module[attr] = __BRYTHON__.scope[module].__dict__[attr]
     }
        
     // add class and __str__
     $module.__class__ = $type
     $module.__repr__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__str__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__file__ = path
     return $module
   } catch(err) {
     eval('throw '+err.name+'(err.message)')
   }
}

//define import procedure to look up module in VFS
$import_via_VFS=function(module,alias,names){
  var ext=['.js', '.pyj', '.py']
  var search_path=__BRYTHON__.path
  var root = __BRYTHON__.brython_path;
  if (root.endswith('/')) {
     root=root.substring(0,root.length-1); 
  }
  if (search_path.indexOf(root+'/libs') == -1) {
     search_path.unshift(root+'/libs')
  }

  if (search_path.indexOf(root+'/Lib') == -1) {
     search_path.unshift(root+'/Lib')
  }

  for(var i=0; i<search_path.length; i++) {
     for (var j=0; j<ext.length; j++) {
         var path=search_path[i].replace(root, '')
         path+='/'+module+ext[j]
         
         //console.log("searching for " + path + " in VFS");
         var module_contents=readFromVFS(path)
         if(module_contents !== undefined) {
           console.log("imported ("+module+") via VFS:" + path)
           if (ext[j] == '.js') {
              return $import_js_module(module,alias,names,path,module_contents)
           }
           if (ext[j] == '.pyj') {
              return $import_pyj_module(module,alias,names,path,module_contents)
           }
           return $import_py_module(module,alias,names,path,module_contents)
         }
     }
  }
  res = Error()
  res.name = 'NotFoundError'
  res.message = "No module named '"+module+"'"
  throw res
}
$import_funcs.unshift($import_via_VFS)
  