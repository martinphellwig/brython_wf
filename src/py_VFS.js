__BRYTHON__.$py_VFS={
'/libs/re.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7dmFyIHJlcz10aGlzW2F0dHJdO2lmKHJlcz09PXVuZGVmaW5lZCl0aHJvdyBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHJlIGhhcyBubyBhdHRyaWJ1dGUgJyIrYXR0cisiJyIpO3JldHVybiByZXM7fSxJOidpJyxNOidtJyxmaW5kYWxsOmZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nLGZsYWdzKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpO3ZhciBhcmdzPSRucy5hcmdzO2lmKGFyZ3MubGVuZ3RoPjApdmFyIGZsYWdzPWFyZ3NbMF07ZWxzZSB2YXIgZmxhZ3M9JG5zLmt3LmdldCgnZmxhZ3MnLCcnKTtmbGFncys9J2dtJzt2YXIganNwPW5ldyBSZWdFeHAocGF0dGVybixmbGFncyk7dmFyIGpzbWF0Y2g9c3RyaW5nLm1hdGNoKGpzcCk7aWYoanNtYXRjaD09PW51bGwpcmV0dXJuIFtdO3JldHVybiBqc21hdGNoO30sc2VhcmNoOmZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpO3ZhciBhcmdzPSRucy5hcmdzO2lmKGFyZ3MubGVuZ3RoPjApdmFyIGZsYWdzPWFyZ3NbMF07ZWxzZSB2YXIgZmxhZ3M9Z2V0YXR0cigkbnMua3csJ2dldCcpKCdmbGFncycsJycpO3ZhciBqc3A9bmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKTt2YXIganNtYXRjaD1zdHJpbmcubWF0Y2goanNwKTtpZihqc21hdGNoPT09bnVsbClyZXR1cm4gTm9uZTt2YXIgbW89bmV3IE9iamVjdCgpO21vLmdyb3VwPWZ1bmN0aW9uKCl7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKWlmKGpzbWF0Y2hbYXJndW1lbnRzW2ldXT09PXVuZGVmaW5lZClyZXMucHVzaChOb25lKTtlbHNlIHJlcy5wdXNoKGpzbWF0Y2hbYXJndW1lbnRzW2ldXSk7aWYoYXJndW1lbnRzLmxlbmd0aD09PTEpcmV0dXJuIHJlc1swXTtyZXR1cm4gdHVwbGUocmVzKTt9O21vLmdyb3Vwcz1mdW5jdGlvbihfZGVmYXVsdCl7aWYoX2RlZmF1bHQ9PT11bmRlZmluZWQpX2RlZmF1bHQ9Tm9uZTt2YXIgcmVzPVtdO2Zvcih2YXIgaT0xO2k8anNtYXRjaC5sZW5ndGg7aSsrKWlmKGpzbWF0Y2hbaV09PT11bmRlZmluZWQpcmVzLnB1c2goX2RlZmF1bHQpO2Vsc2UgcmVzLnB1c2goanNtYXRjaFtpXSk7cmV0dXJuIHR1cGxlKHJlcyk7fTttby5zdGFydD1mdW5jdGlvbigpe3JldHVybiBqc21hdGNoLmluZGV4O307bW8uc3RyaW5nPXN0cmluZztyZXR1cm4gSlNPYmplY3QobW8pO30sc3ViOmZ1bmN0aW9uKHBhdHRlcm4scmVwbCxzdHJpbmcpe3ZhciAkbnM9JE1ha2VBcmdzKCdyZS5zZWFyY2gnLGFyZ3VtZW50cyxbJ3BhdHRlcm4nLCdyZXBsJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpO2ZvcigkdmFyIGluICRucylldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIik7dmFyIGFyZ3M9JG5zLmFyZ3M7dmFyIGNvdW50PSREaWN0RGljdC5nZXQoJG5zLmt3LCdjb3VudCcsMCk7dmFyIGZsYWdzPSREaWN0RGljdC5nZXQoJG5zLmt3LCdmbGFncycsJycpO2lmKGFyZ3MubGVuZ3RoPjApdmFyIGNvdW50PWFyZ3NbMF07aWYoYXJncy5sZW5ndGg+MSl2YXIgZmxhZ3M9YXJnc1sxXTtpZih0eXBlb2YgcmVwbD09PSJzdHJpbmciKXJlcGw9cmVwbC5yZXBsYWNlKC9cXChcZCspL2csJyQkJDEnKTtlbHNlIGlmKHR5cGVvZiByZXBsPT09ImZ1bmN0aW9uIil2YXIgJHJlcGwxPWZ1bmN0aW9uKCl7dmFyIG1vPU9iamVjdCgpO21vLnN0cmluZz1hcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXTt2YXIgc3RhcnQ9YXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMl07dmFyIGVuZD1zdGFydCthcmd1bWVudHNbMF0ubGVuZ3RoO21vLnN0YXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIHN0YXJ0O307bW8uZW5kPWZ1bmN0aW9uKCl7cmV0dXJuIGVuZDt9O2dyb3Vwcz1bXTtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGgtMjtpKyspZ3JvdXBzLnB1c2goYXJndW1lbnRzW2ldKTttby5ncm91cHM9ZnVuY3Rpb24oX2RlZmF1bHQpe2lmKF9kZWZhdWx0PT09dW5kZWZpbmVkKV9kZWZhdWx0PU5vbmU7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPGdyb3Vwcy5sZW5ndGg7aSsrKWlmKGdyb3Vwc1tpXT09PXVuZGVmaW5lZClyZXMucHVzaChfZGVmYXVsdCk7ZWxzZSByZXMucHVzaChncm91cHNbaV0pO3JldHVybiByZXM7fTtyZXR1cm4gcmVwbChKU09iamVjdChtbykpO307aWYoY291bnQ9PTApZmxhZ3MrPSdnJzt2YXIganNwPW5ldyBSZWdFeHAocGF0dGVybixmbGFncyk7aWYodHlwZW9mIHJlcGw9PT0nZnVuY3Rpb24nKXJldHVybiBzdHJpbmcucmVwbGFjZShqc3AsJHJlcGwxKTtlbHNlIHJldHVybiBzdHJpbmcucmVwbGFjZShqc3AscmVwbCk7fX07JG1vZHVsZS5tYXRjaD1mdW5jdGlvbigpe3BhdHRlcm49YXJndW1lbnRzWzBdO2lmKHBhdHRlcm4uY2hhckF0KDApIT09J14nKXBhdHRlcm49J14nK3BhdHRlcm47dmFyIGFyZ3M9W3BhdHRlcm5dO2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7cmV0dXJuICRtb2R1bGUuc2VhcmNoLmFwcGx5KG51bGwsYXJncyk7fTskbW9kdWxlLl9fY2xhc3NfXz0kbW9kdWxlOyRtb2R1bGUuX19zdHJfXz1mdW5jdGlvbigpe3JldHVybiAiPG1vZHVsZSAncmUnPiI7fTs=',
'/libs/svg.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXskc3ZnTlM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIjskeGxpbmtOUz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI7ZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXt2YXIgJGk9bnVsbDt2YXIgJG9iaj10aGlzO3ZhciBvYmo9JERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCRzdmdOUyx0YWdfbmFtZSkpO2lmKGFyZ3MhPXVuZGVmaW5lZCYmYXJncy5sZW5ndGg+MCl7JHN0YXJ0PTA7JGZpcnN0PWFyZ3NbMF07aWYoJGZpcnN0Ll9fY2xhc3NfXyE9PSRLdyl7JHN0YXJ0PTE7aWYoaXNpbnN0YW5jZSgkZmlyc3QsW3N0cixpbnQsZmxvYXRdKSl7dHh0PWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cigkZmlyc3QpKTtvYmouZWx0LmFwcGVuZENoaWxkKHR4dCk7fWVsc2UgaWYoJGZpcnN0Ll9fY2xhc3NfXz09PSRUYWdTdW1EaWN0KWZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKylvYmouZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5jaGlsZHJlblskaV0pO2Vsc2UgdHJ5e29iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmVsdCk7fWNhdGNoKGVycil7JHJhaXNlKCdWYWx1ZUVycm9yJywnd3JvbmcgZWxlbWVudCAnKyRmaXJzdCk7fX1mb3IoJGk9JHN0YXJ0OyRpPGFyZ3MubGVuZ3RoOyRpKyspeyRhcmc9YXJnc1skaV07aWYoaXNpbnN0YW5jZSgkYXJnLCRLdykpaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PSJvbiIpZXZhbCgnRE9NTm9kZS5iaW5kKG9iaiwiJyskYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHIoMikrJyIsZnVuY3Rpb24oKXsnKyRhcmcudmFsdWUrJ30pJyk7ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKT09InN0eWxlIilET01Ob2RlLnNldF9zdHlsZShvYmosJGFyZy52YWx1ZSk7ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCJocmVmIikhPT0tMSlvYmouZWx0LnNldEF0dHJpYnV0ZU5TKCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiwiaHJlZiIsJGFyZy52YWx1ZSk7ZWxzZSBpZigkYXJnLnZhbHVlIT09ZmFsc2Upb2JqLmVsdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCRhcmcubmFtZS5yZXBsYWNlKCdfJywnLScpLCRhcmcudmFsdWUpO319cmV0dXJuIG9iajt9dmFyICRzdmdfdGFncz1bJ2EnLCdhbHRHbHlwaCcsJ2FsdEdseXBoRGVmJywnYWx0R2x5cGhJdGVtJywnYW5pbWF0ZScsJ2FuaW1hdGVDb2xvcicsJ2FuaW1hdGVNb3Rpb24nLCdhbmltYXRlVHJhbnNmb3JtJywnY2lyY2xlJywnY2xpcFBhdGgnLCdjb2xvcl9wcm9maWxlJywnY3Vyc29yJywnZGVmcycsJ2Rlc2MnLCdlbGxpcHNlJywnZmVCbGVuZCcsJ2cnLCdpbWFnZScsJ2xpbmUnLCdsaW5lYXJHcmFkaWVudCcsJ21hcmtlcicsJ21hc2snLCdwYXRoJywncGF0dGVybicsJ3BvbHlnb24nLCdwb2x5bGluZScsJ3JhZGlhbEdyYWRpZW50JywncmVjdCcsJ3N0b3AnLCdzdmcnLCd0ZXh0JywndHJlZicsJ3RzcGFuJywndXNlJ107JHN2Zz1mdW5jdGlvbigpe3JldHVybiAkU1ZHVGFnKCdYJyxhcmd1bWVudHMpO307JHN2Zys9Jyc7dmFyIG9iaj1uZXcgT2JqZWN0KCk7Zm9yKHZhciBpPTA7aTwkc3ZnX3RhZ3MubGVuZ3RoO2krKyl7dmFyIHRhZz0kc3ZnX3RhZ3NbaV07ZXZhbCgnb2JqLicrdGFnKyc9Jyskc3ZnLnJlcGxhY2UoJ1gnLHRhZykpO31vYmouX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fTtyZXR1cm4gb2JqO30pKCk7',
'/libs/json.js':'ZnVuY3Rpb24gX3B5KG9iail7aWYob2JqPT09bnVsbClyZXR1cm4gTm9uZTtpZihpc2luc3RhbmNlKG9iaixsaXN0KSl7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXJlcy5wdXNoKF9weShvYmpbaV0pKTtyZXR1cm4gcmVzO31pZihvYmouX19jbGFzc19fIT09dW5kZWZpbmVkKXtpZihvYmouX19jbGFzc19fPT09bGlzdClmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKW9ialtpXT1fcHkob2JqW2ldKTtyZXR1cm4gb2JqO31pZih0eXBlb2Ygb2JqPT09J29iamVjdCcmJm9iai5fX2NsYXNzX189PT11bmRlZmluZWQpe3ZhciByZXM9ZGljdCgpO2Zvcih2YXIgYXR0ciBpbiBvYmopZ2V0YXR0cihyZXMsJ19fc2V0aXRlbV9fJykoYXR0cixfcHkob2JqW2F0dHJdKSk7cmV0dXJuIHJlczt9cmV0dXJuIEpTT2JqZWN0KG9iaik7fWZ1bmN0aW9uIF9qcyhvYmope2lmKGlzaW5zdGFuY2Uob2JqLFtpbnQsc3RyXSkpcmV0dXJuIG9iajtlbHNlIGlmKG9iaj09PU5vbmUpcmV0dXJuIG51bGw7ZWxzZSBpZihvYmo9PT1UcnVlKXJldHVybiB0cnVlO2Vsc2UgaWYob2JqPT09RmFsc2UpcmV0dXJuIGZhbHNlO2Vsc2UgaWYoaXNpbnN0YW5jZShvYmosZmxvYXQpKXJldHVybiBvYmoudmFsdWU7ZWxzZSBpZihpc2luc3RhbmNlKG9iaixbbGlzdCx0dXBsZV0pKXt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspcmVzLnB1c2goX2pzKG9ialtpXSkpO3JldHVybiByZXM7fWVsc2UgaWYoaXNpbnN0YW5jZShvYmosZGljdCkpe3ZhciByZXM9bmV3IE9iamVjdCgpO2Zvcih2YXIgaT0wO2k8b2JqLiRrZXlzLmxlbmd0aDtpKyspcmVzW29iai4ka2V5c1tpXV09b2JqLiR2YWx1ZXNbaV07cmV0dXJuIHJlczt9ZWxzZSB0aHJvdyBUeXBlRXJyb3Ioc3RyKG9iaikrJyBpcyBub3QgSlNPTiBzZXJpYWxpemFibGUnKTt9JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxsb2FkczpmdW5jdGlvbihqc29uX29iail7cmV0dXJuIF9weShKU09OLnBhcnNlKGpzb25fb2JqKSk7fSxkdW1wczpmdW5jdGlvbihvYmope3JldHVybiBKU09OLnN0cmluZ2lmeShfanMob2JqKSk7fX07',
'/libs/time.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxfX25hbWVfXzondGltZScsY2xlYXJfaW50ZXJ2YWw6ZnVuY3Rpb24oaW50X2lkKXt3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRfaWQpO30sY3RpbWU6ZnVuY3Rpb24odGltZXN0YW1wKXtpZih0aW1lc3RhbXA9PT11bmRlZmluZWQpdGltZXN0YW1wPWludChuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKTt2YXIgZD1uZXcgRGF0ZSgwKTtkLnNldFVUQ1NlY29uZHModGltZXN0YW1wKTtyZXR1cm4gZC50b1VUQ1N0cmluZygpO30scGVyZl9jb3VudGVyOmZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDAuMCk7fSxzZXRfaW50ZXJ2YWw6ZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7cmV0dXJuIGludCh3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuYyxpbnRlcnZhbCkpO30sc2V0X3RpbWVvdXQ6ZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7d2luZG93LnNldFRpbWVvdXQoZnVuYyxpbnRlcnZhbCk7fSxsb2NhbHRpbWU6ZnVuY3Rpb24oc2Vjcyl7dmFyIGQ9bmV3IERhdGUoKTtpZihzZWNzPT09dW5kZWZpbmVkfHxzZWNzPT09Tm9uZSlyZXR1cm4gZC5nZXRUaW1lKCk7dmFyIGphbj1uZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksMCwxKTt2YXIganVsPW5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSw2LDEpO3ZhciBkc3Q9aW50KGQuZ2V0VGltZXpvbmVPZmZzZXQoKTxNYXRoLm1heChqYW4uZ2V0VGltZXpvbmVPZmZzZXQoKSxqdWwuZ2V0VGltZXpvbmVPZmZzZXQoKSkpO3JldHVybiBsaXN0KFtkLmdldEZ1bGxZZWFyKCksZC5nZXRNb250aCgpKzEsZC5nZXREYXRlKCksZC5nZXRIb3VycygpLGQuZ2V0TWludXRlcygpLGQuZ2V0U2Vjb25kcygpLGQuZ2V0RGF5KCksMCxkc3RdKTt9LHRpbWU6ZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQoKG5ldyBEYXRlKCkuZ2V0VGltZSgpKS8xMDAwKTt9LHN0cmZ0aW1lOmZ1bmN0aW9uKGZvcm1hdCxhcmcpe2Z1bmN0aW9uIG5zKGFyZyxuYil7dmFyIHJlcz1hcmcudG9TdHJpbmcoKTt3aGlsZShyZXMubGVuZ3RoPG5iKXJlcz0nMCcrcmVzO3JldHVybiByZXM7fWlmKGFyZyl2YXIgb2JqPW5ldyBEYXRlKGFyZ1swXSxhcmdbMV0tMSxhcmdbMl0sYXJnWzNdLGFyZ1s0XSxhcmdbNV0sYXJnWzZdKTtlbHNlIHZhciBvYmo9bmV3IERhdGUoKTt2YXIgYWJiX3dlZWtkYXlzPVsnU3UnLCdNbycsJ1R1JywnV2UnLCdUaCcsJ0ZyJywnU2EnXTt2YXIgZnVsbF93ZWVrZGF5cz1bJ1N1bmRheScsJ01vbmRheScsJ1R1ZXNkYXknLCdXZWRuZXNkYXknLCdUaHVyc2RheScsJ0ZyaWRheScsJ1NhdHVyZGF5J107dmFyIGFiYl9tb250aHM9WydKYW4nLCdGZWInLCdNYXInLCdBcHInLCdNYXknLCdKdW4nLCdKdWwnLCdBdWcnLCdTZXAnLCdPY3QnLCdOb3YnLCdEZWMnXTt2YXIgZnVsbF9tb250aHM9WydKYW51YXJ5JywnRmVicnVhcnknLCdNYXJjaCcsJ0FwcmlsJywnTWF5JywnSnVuZScsJ0p1bHknLCdBdWd1c3QnLCdTZXB0ZW1iZXInLCdPY3RvYmVyJywnTm92ZW1iZXInLCdEZWNlbWJlciddO3ZhciByZXM9Zm9ybWF0O3Jlcz1yZXMucmVwbGFjZSgvJUgvLG5zKG9iai5nZXRIb3VycygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVNLyxucyhvYmouZ2V0TWludXRlcygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVTLyxucyhvYmouZ2V0U2Vjb25kcygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVZLyxucyhvYmouZ2V0RnVsbFllYXIoKSw0KSk7cmVzPXJlcy5yZXBsYWNlKC8leS8sbnMob2JqLmdldEZ1bGxZZWFyKCksNCkuc3Vic3RyKDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVtLyxucyhvYmouZ2V0TW9udGgoKSsxLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVkLyxucyhvYmouZ2V0RGF0ZSgpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVhLyxhYmJfd2Vla2RheXNbb2JqLmdldERheSgpXSk7cmVzPXJlcy5yZXBsYWNlKC8lQS8sZnVsbF93ZWVrZGF5c1tvYmouZ2V0RGF5KCldKTtyZXM9cmVzLnJlcGxhY2UoLyViLyxhYmJfbW9udGhzW29iai5nZXRNb250aCgpXSk7cmVzPXJlcy5yZXBsYWNlKC8lQi8sZnVsbF9tb250aHNbb2JqLmdldE1vbnRoKCldKTtyZXR1cm4gcmVzO30sc3RydWN0X3RpbWU6ZnVuY3Rpb24oYXJnKXtpZighaXNpbnN0YW5jZShhcmcsW3R1cGxlLGxpc3RdKSl0aHJvdyBUeXBlRXJyb3IoJ2NvbnN0cnVjdG9yIHJlcXVpcmVzIGEgc2VxdWVuY2UnKTtpZihsZW4oYXJnKSE9OSl0aHJvdyBUeXBlRXJyb3IoInRpbWUuc3RydWN0X3RpbWUoKSB0YWtlcyBhIDktc2VxdWVuY2UgKCIrbGVuKGFyZykrIi1zZXF1ZW5jZSBnaXZlbiIpO3ZhciByZXM9YXJnO2NvbnNvbGUubG9nKHJlcy5fX2dldGl0ZW1fX1swXSk7dmFyIG5hbWVzPVsndG1feWVhcicsJ3RtX21vbicsJ3RtX21kYXknLCd0bV9ob3VyJywndG1fbWluJywndG1fc2VjJywndG1fd2RheScsJ3RtX3lkYXknLCd0bV9pc2RzdCcsJ3RtX3pvbmUnLCd0bV9nbXRvZmYnXTtyZXMuX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7dmFyIGl4PW5hbWVzLmluZGV4T2YoYXR0cik7aWYoaXg+LTEpcmV0dXJuIGFyZy5fX2dldGl0ZW1fXyhpeCk7aWYodHlwZW9mIHJlc1thdHRyXT09PSdmdW5jdGlvbicpcmV0dXJuKGZ1bmN0aW9uKG9iail7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG9ialthdHRyXS5hcHBseShvYmosYXJndW1lbnRzKTt9O30pKHJlcyk7ZWxzZSBpZihyZXNbYXR0cl0hPT11bmRlZmluZWQpcmV0dXJuIHJlc1thdHRyXTtlbHNlIHRocm93IEF0dHJpYnV0ZUVycm9yKCJvYmplY3QgaGFzIG5vIGF0dHJpYnV0ZSAnIithdHRyKyInIik7fTtyZXR1cm4gcmVzO319Ow==',
'/libs/random.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxyYW5kb206ZnVuY3Rpb24oKXtpZihhcmd1bWVudHMubGVuZ3RoPjApdGhyb3cgVHlwZUVycm9yKCJyYW5kb20oKSB0YWtlcyBubyBhcmd1bWVudHMgKCIrYXJndW1lbnRzLmxlbmd0aCsiIGdpdmVuKSIpO2Vsc2UgcmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpO30scmFuZGludDpmdW5jdGlvbihhLGIpe3JldHVybiBpbnQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihiLWEpK2EpKTt9LHJhbmRyYW5nZTpmdW5jdGlvbihzdGFydCxzdG9wLHN0ZXApe2lmKHN0ZXA9PT11bmRlZmluZWQpc3RlcD0xO2Vsc2UgaWYoc3RlcD09MCl7fWlmKHN0b3A9PT11bmRlZmluZWQpe3N0b3A9c3RhcnQ7c3RhcnQ9MDt9dmFyIHdpZHRoPXN0b3Atc3RhcnQ7aWYoc3RlcD09MSYmd2lkdGg+MClyZXR1cm4gc3RhcnQraW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSp3aWR0aCkpO2Vsc2V7fXZhciBuO2lmKHN0ZXA+MCluPU1hdGguZmxvb3IoKHdpZHRoK3N0ZXAtMSkvc3RlcCk7ZWxzZSBuPU1hdGguZmxvb3IoKHdpZHRoK3N0ZXArMSkvc3RlcCk7cmV0dXJuIHN0YXJ0K3N0ZXAqaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpuKSk7fSxzaHVmZmxlOmZ1bmN0aW9uKHgscm5kKXtpZih4Lmxlbmd0aDw9MSlyZXR1cm4geDtpZihybmQ9PT11bmRlZmluZWQpcm5kPU1hdGgucmFuZG9tO2Zvcih2YXIgaixvLGk9eC5sZW5ndGg7aTtqPXBhcnNlSW50KHJuZCgpKmkpLG89eFstLWldLHhbaV09eFtqXSx4W2pdPW8pO319OyRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdyYW5kb20nPiI7fTs=',
'/libs/math.js':'dmFyIGZsb2F0X2NoZWNrPWZ1bmN0aW9uKHgpe2lmKGlzaW5zdGFuY2UoeCxmbG9hdCkpcmV0dXJuIHgudmFsdWU7cmV0dXJuIHg7fTt2YXIgaXNpbmY9ZnVuY3Rpb24oeCl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO3JldHVybiB4MT09LUluZmluaXR5fHx4MT09SW5maW5pdHl8fHgxPT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFl8fHgxPT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7fTskbW9kdWxlPXtfX2dldGF0dHJfXzpmdW5jdGlvbihhdHRyKXt2YXIgcmVzPXRoaXNbYXR0cl07aWYocmVzPT09dW5kZWZpbmVkKSRyYWlzZSgnQXR0cmlidXRlRXJyb3InLCdtb2R1bGUgbWF0aCBoYXMgbm8gYXR0cmlidXRlICcrYXR0cik7cmV0dXJuIHJlczt9LGFjb3M6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguYWNvcyhmbG9hdF9jaGVjayh4KSkpO30sYWNvc2g6ZnVuY3Rpb24oeCl7aWYoaXNpbmYoeCkpcmV0dXJuIGZsb2F0KCdpbmYnKTt2YXIgeT1mbG9hdF9jaGVjayh4KTtyZXR1cm4gZmxvYXQoTWF0aC5sb2coeStNYXRoLnNxcnQoeSp5LTEpKSk7fSxhc2luOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmFzaW4oZmxvYXRfY2hlY2soeCkpKTt9LGFzaW5oOmZ1bmN0aW9uKHgpe2lmKGlzaW5mKHgpKXJldHVybiBmbG9hdCgnaW5mJyk7dmFyIHk9ZmxvYXRfY2hlY2soeCk7cmV0dXJuIGZsb2F0KE1hdGgubG9nKHkrTWF0aC5zcXJ0KHkqeSsxKSkpO30sYXRhbjpmdW5jdGlvbih4KXtpZihpc2luZih4KSlyZXR1cm4gZmxvYXQoTWF0aC5QSS8yKTtyZXR1cm4gZmxvYXQoTWF0aC5hdGFuKGZsb2F0X2NoZWNrKHgpKSk7fSxhdGFuMjpmdW5jdGlvbih5LHgpe3JldHVybiBmbG9hdChNYXRoLmF0YW4yKHkseCkpO30sYXRhbmg6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7aWYoeT09MClyZXR1cm4gMDtyZXR1cm4gZmxvYXQoMC41Kk1hdGgubG9nKCgxL3krMSkvKDEveS0xKSkpO30sY2VpbDpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTtpZighaXNOYU4ocGFyc2VGbG9hdCh5KSkmJmlzRmluaXRlKHkpKXJldHVybiBpbnQoTWF0aC5jZWlsKHkpKTt0cnl7cmV0dXJuIGdldGF0dHIoeSwnX19jZWlsX18nKSgpO31jYXRjaChlcnIpeyRwb3BfZXhjKCk7fSRyYWlzZSgnVmFsdWVFcnJvcicsJ29iamVjdCBpcyBub3QgYSBudW1iZXIgYW5kIGRvZXMgbm90IGNvbnRhaW4gX19jZWlsX18nKTt9LGNvcHlzaWduOmZ1bmN0aW9uKHgseSl7dmFyIHgxPU1hdGguYWJzKGZsb2F0X2NoZWNrKHgpKTt2YXIgeTE9ZmxvYXRfY2hlY2soeSk7dmFyIHNpZ249eTE/eTE8MD8tMToxOjE7aWYoaXNpbnN0YW5jZSh4LGludCkpcmV0dXJuIHgxKnNpZ247ZWxzZSByZXR1cm4gZmxvYXQoeDEqc2lnbik7fSxjb3M6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguY29zKGZsb2F0X2NoZWNrKHgpKSk7fSxkZWdyZWVzOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChmbG9hdF9jaGVjayh4KSoxODAvTWF0aC5QSSk7fSxlOmZsb2F0KE1hdGguRSksZXJmOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB0PTEuMC8oMS4wKzAuNSpNYXRoLmFicyh5KSk7dmFyIGFucz0xLXQqTWF0aC5leHAoLXkqeS0xLjI2NTUxMjIzK3QqKDEuMDAwMDIzNjgrdCooMC4zNzQwOTE5Nit0KigwLjA5Njc4NDE4K3QqKC0wLjE4NjI4ODA2K3QqKDAuMjc4ODY4MDcrdCooLTEuMTM1MjAzOTgrdCooMS40ODg1MTU4Nyt0KigtMC44MjIxNTIyMyt0KjAuMTcwODcyNzcpKSkpKSkpKSk7aWYoeT49MC4wKXJldHVybiBhbnM7cmV0dXJuIC1hbnM7fSxlcmZjOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB0PTEuMC8oMS4wKzAuNSpNYXRoLmFicyh5KSk7dmFyIGFucz0xLXQqTWF0aC5leHAoLXkqeS0xLjI2NTUxMjIzK3QqKDEuMDAwMDIzNjgrdCooMC4zNzQwOTE5Nit0KigwLjA5Njc4NDE4K3QqKC0wLjE4NjI4ODA2K3QqKDAuMjc4ODY4MDcrdCooLTEuMTM1MjAzOTgrdCooMS40ODg1MTU4Nyt0KigtMC44MjIxNTIyMyt0KjAuMTcwODcyNzcpKSkpKSkpKSk7aWYoeT49MC4wKXJldHVybiAxLWFucztyZXR1cm4gMSthbnM7fSxleHA6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguZXhwKGZsb2F0X2NoZWNrKHgpKSk7fSxleHBtMTpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5leHAoZmxvYXRfY2hlY2soeCkpLTEpO30sZmFiczpmdW5jdGlvbih4KXtyZXR1cm4geD4wP2Zsb2F0KHgpOmZsb2F0KC14KTt9LGZhY3RvcmlhbDpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTt2YXIgcj0xO2Zvcih2YXIgaT0yO2k8PXk7aSsrKXIqPWk7cmV0dXJuIHI7fSxmbG9vcjpmdW5jdGlvbih4KXtyZXR1cm4gTWF0aC5mbG9vcihmbG9hdF9jaGVjayh4KSk7fSxmbW9kOmZ1bmN0aW9uKHgseSl7cmV0dXJuIGZsb2F0KGZsb2F0X2NoZWNrKHgpJWZsb2F0X2NoZWNrKHkpKTt9LGZyZXhwOmZ1bmN0aW9uKHgpe3ZhciB4MT1mbG9hdF9jaGVjayh4KTt2YXIgZXg9TWF0aC5mbG9vcihNYXRoLmxvZyh4MSkvTWF0aC5sb2coMikpKzE7ZnJhYz14MS9NYXRoLnBvdygyLGV4KTtyZXR1cm4gW2ZyYWMsZXhdO30sZ2FtbWE6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7dmFyIHo9eSsxO3ZhciBkMT1NYXRoLnNxcnQoMipNYXRoLlBJKS96O3ZhciBkMj0xLjAwMDAwMDAwMDE5MDAxNTtkMis9NzYuMTgwMDkxNzI5NDcxNDYvKHorMSk7ZDIrPS04Ni41MDUzMjAzMjk0MTY3Ny8oeisyKTtkMis9MjQuMDE0MDk4MjQwODMwOTEvKHorMyk7ZDIrPS0xLjIzMTczOTU3MjQ1MDE1NS8oeis0KTtkMis9MS4yMDg2NTA5NzM4NjYxNzlFLTMvKHorNSk7ZDIrPS01LjM5NTIzOTM4NDk1M0UtNi8oeis2KTtyZXR1cm4gZDEqZDIqTWF0aC5wb3coeis1LjUseiswLjUpKk1hdGguZXhwKC0oeis1LjUpKTt9LGh5cG90OmZ1bmN0aW9uKHgseSl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO3ZhciB5MT1mbG9hdF9jaGVjayh5KTtyZXR1cm4gZmxvYXQoTWF0aC5zcXJ0KHgxKngxK3kxKnkxKSk7fSxpc2Zpbml0ZTpmdW5jdGlvbih4KXtyZXR1cm4gaXNGaW5pdGUoZmxvYXRfY2hlY2soeCkpO30saXNpbmY6ZnVuY3Rpb24oeCl7cmV0dXJuIGlzaW5mKHgpO30saXNuYW46ZnVuY3Rpb24oeCl7cmV0dXJuIGlzTmFOKGZsb2F0X2NoZWNrKHgpKTt9LGxkZXhwOmZ1bmN0aW9uKHgsaSl7dmFyIG11bD1NYXRoLnBvdygyLGZsb2F0X2NoZWNrKGkpKTtpZihpc2luc3RhbmNlKHgsaW50KSlyZXR1cm4geCptdWw7ZWxzZSByZXR1cm4gZmxvYXQoeC52YWx1ZSptdWwpO30sbGdhbW1hOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB6PXkrMTt2YXIgZDE9TWF0aC5zcXJ0KDIqTWF0aC5QSSkvejt2YXIgZDI9MS4wMDAwMDAwMDAxOTAwMTU7ZDIrPTc2LjE4MDA5MTcyOTQ3MTQ2Lyh6KzEpO2QyKz0tODYuNTA1MzIwMzI5NDE2NzcvKHorMik7ZDIrPTI0LjAxNDA5ODI0MDgzMDkxLyh6KzMpO2QyKz0tMS4yMzE3Mzk1NzI0NTAxNTUvKHorNCk7ZDIrPTEuMjA4NjUwOTczODY2MTc5RS0zLyh6KzUpO2QyKz0tNS4zOTUyMzkzODQ5NTNFLTYvKHorNik7cmV0dXJuIGZsb2F0KE1hdGgubG9nKE1hdGguYWJzKGQxKmQyKk1hdGgucG93KHorNS41LHorMC41KSpNYXRoLmV4cCgtKHorNS41KSkpKSk7fSxsb2c6ZnVuY3Rpb24oeCxiYXNlKXt2YXIgeDE9ZmxvYXRfY2hlY2soeCk7aWYoYmFzZT09PXVuZGVmaW5lZClyZXR1cm4gZmxvYXQoTWF0aC5sb2coeDEpKTtyZXR1cm4gZmxvYXQoTWF0aC5sb2coeDEpL01hdGgubG9nKGZsb2F0X2NoZWNrKGJhc2UpKSk7fSxsb2cxcDpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5sb2coMS4wK2Zsb2F0X2NoZWNrKHgpKSk7fSxsb2cyOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmxvZyhmbG9hdF9jaGVjayh4KSkvTWF0aC5MTjIpO30sbG9nMTA6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGgubG9nKGZsb2F0X2NoZWNrKHgpKS9NYXRoLkxOMTApO30sbW9kZjpmdW5jdGlvbih4KXt2YXIgeDE9ZmxvYXRfY2hlY2soeCk7aWYoeDE+MCl7dmFyIGk9ZmxvYXQoeDEtTWF0aC5mbG9vcih4MSkpO3JldHVybiBbaSxmbG9hdCh4MS1pKV07fXZhciBpPWZsb2F0KHgxLU1hdGguY2VpbCh4MSkpO3JldHVybiBbaSxmbG9hdChNYXRoLmNlaWwoeDEpKV07fSxwaTpmbG9hdChNYXRoLlBJKSxwb3c6ZnVuY3Rpb24oeCx5KXtpZihpc2luc3RhbmNlKHgsaW50KSlyZXR1cm4gTWF0aC5wb3coeCxmbG9hdF9jaGVjayh5KSk7ZWxzZSByZXR1cm4gZmxvYXQoTWF0aC5wb3coeC52YWx1ZSxmbG9hdF9jaGVjayh5KSkpO30scmFkaWFuczpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoZmxvYXRfY2hlY2soeCkqTWF0aC5QSS8xODApO30sc2luOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLnNpbihmbG9hdF9jaGVjayh4KSkpO30sc3FydDpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5zcXJ0KGZsb2F0X2NoZWNrKHgpKSk7fSx0cnVuYzpmdW5jdGlvbih4KXt0cnl7cmV0dXJuIGdldGF0dHIoeCwnX190cnVuY19fJykoKTt9Y2F0Y2goZXJyKXskcG9wX2V4YygpO312YXIgeDE9ZmxvYXRfY2hlY2soeCk7aWYoIWlzTmFOKHBhcnNlRmxvYXQoeDEpKSYmaXNGaW5pdGUoeDEpKXJldHVybiBpbnQoTWF0aC5mbG9vcih4MSkpOyRyYWlzZSgnVmFsdWVFcnJvcicsJ29iamVjdCBpcyBub3QgYSBudW1iZXIgYW5kIGRvZXMgbm90IGNvbnRhaW4gX190cnVuY19fJyk7fX07JG1vZHVsZS5fX2NsYXNzX189JG1vZHVsZTskbW9kdWxlLl9fc3RyX189ZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ21hdGgnPiI7fTtmb3IodmFyICRhdHRyIGluICRtb2R1bGUpaWYodHlwZW9mICRtb2R1bGVbJGF0dHJdPT09J2Z1bmN0aW9uJyl7JG1vZHVsZVskYXR0cl0uX19yZXByX189KGZ1bmN0aW9uKGZ1bmMpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiAnPGJ1aWx0LWluIGZ1bmN0aW9uICcrZnVuYysnPic7fTt9KSgkYXR0cik7JG1vZHVsZVskYXR0cl0uX19zdHJfXz0oZnVuY3Rpb24oZnVuYyl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuICc8YnVpbHQtaW4gZnVuY3Rpb24gJytmdW5jKyc+Jzt9O30pKCRhdHRyKTt9',
'/libs/html.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmdW5jdGlvbiAkVGFnKHRhZ05hbWUsYXJncyl7dmFyIG9iaj0kRE9NTm9kZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpKTtvYmoucGFyZW50PXRoaXM7aWYoYXJncyE9dW5kZWZpbmVkJiZhcmdzLmxlbmd0aD4wKXskc3RhcnQ9MDskZmlyc3Q9YXJnc1swXTtpZigkZmlyc3QuX19jbGFzc19fIT09JEt3KXskc3RhcnQ9MTtpZihpc2luc3RhbmNlKCRmaXJzdCxbc3RyLGludCxmbG9hdF0pKXt0eHQ9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKCRmaXJzdCkpO29iai5lbHQuYXBwZW5kQ2hpbGQodHh0KTt9ZWxzZSBpZigkZmlyc3QuX19jbGFzc19fPT09JFRhZ1N1bURpY3QpZm9yKCRpPTA7JGk8JGZpcnN0LmNoaWxkcmVuLmxlbmd0aDskaSsrKW9iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmNoaWxkcmVuWyRpXS5lbHQpO2Vsc2UgdHJ5e29iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmVsdCk7fWNhdGNoKGVycil7Y29uc29sZS5sb2coJ2VycmV1ciAnK2Vycik7dGhyb3cgVmFsdWVFcnJvcignd3JvbmcgZWxlbWVudCAnKyRmaXJzdCk7fX1mb3IodmFyICRpPSRzdGFydDskaTxhcmdzLmxlbmd0aDskaSsrKXskYXJnPWFyZ3NbJGldO2lmKGlzaW5zdGFuY2UoJGFyZywkS3cpKWlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigwLDIpPT09Im9uIilldmFsKCdET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKTtlbHNlIGlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpPT0ic3R5bGUiKURPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKTtlbHNlIGlmKCRhcmcudmFsdWUhPT1mYWxzZSl0cnl7dmFyIGFyZz0kYXJnLm5hbWUudG9Mb3dlckNhc2UoKTtvYmouZWx0LnNldEF0dHJpYnV0ZShhcmcsJGFyZy52YWx1ZSk7aWYoYXJnPT0iY2xhc3MiKW9iai5lbHQuc2V0QXR0cmlidXRlKCJjbGFzc05hbWUiLCRhcmcudmFsdWUpO31jYXRjaChlcnIpe2NvbnNvbGUubG9nKCdlcnJldXIgJytlcnIpO3Rocm93IFZhbHVlRXJyb3IoImNhbid0IHNldCBhdHRyaWJ1dGUgIiskYXJnLm5hbWUpO319fXJldHVybiBvYmo7fWZ1bmN0aW9uIEEoKXt2YXIgb2JqPSRUYWcoJ0EnLGFyZ3VtZW50cyk7cmV0dXJuIG9iajt9QS5fX25hbWVfXz0naHRtbC5BJzt2YXIgJHNyYz1BKycnOyR0YWdzPVsnQScsJ0FCQlInLCdBQ1JPTllNJywnQUREUkVTUycsJ0FQUExFVCcsJ0InLCdCRE8nLCdCSUcnLCdCTE9DS1FVT1RFJywnQlVUVE9OJywnQ0FQVElPTicsJ0NFTlRFUicsJ0NJVEUnLCdDT0RFJywnREVMJywnREZOJywnRElSJywnRElWJywnREwnLCdFTScsJ0ZJRUxEU0VUJywnRk9OVCcsJ0ZPUk0nLCdGUkFNRVNFVCcsJ0gxJywnSDInLCdIMycsJ0g0JywnSDUnLCdINicsJ0knLCdJRlJBTUUnLCdJTlMnLCdLQkQnLCdMQUJFTCcsJ0xFR0VORCcsJ01BUCcsJ01FTlUnLCdOT0ZSQU1FUycsJ05PU0NSSVBUJywnT0JKRUNUJywnT0wnLCdPUFRHUk9VUCcsJ1BSRScsJ1EnLCdTJywnU0FNUCcsJ1NDUklQVCcsJ1NFTEVDVCcsJ1NNQUxMJywnU1BBTicsJ1NUUklLRScsJ1NUUk9ORycsJ1NUWUxFJywnU1VCJywnU1VQJywnVEFCTEUnLCdURVhUQVJFQScsJ1RJVExFJywnVFQnLCdVJywnVUwnLCdWQVInLCdCT0RZJywnQ09MR1JPVVAnLCdERCcsJ0RUJywnSEVBRCcsJ0hUTUwnLCdMSScsJ1AnLCdUQk9EWScsJ09QVElPTicsJ1REJywnVEZPT1QnLCdUSCcsJ1RIRUFEJywnVFInLCdBUkVBJywnQkFTRScsJ0JBU0VGT05UJywnQlInLCdDT0wnLCdGUkFNRScsJ0hSJywnSU1HJywnSU5QVVQnLCdJU0lOREVYJywnTElOSycsJ01FVEEnLCdQQVJBTSddOyR0YWdzPSR0YWdzLmNvbmNhdChbJ0FSVElDTEUnLCdBU0lERScsJ0FVRElPJywnQkRJJywnQ0FOVkFTJywnQ09NTUFORCcsJ0RBVEFMSVNUJywnREVUQUlMUycsJ0RJQUxPRycsJ0VNQkVEJywnRklHQ0FQVElPTicsJ0ZJR1VSRScsJ0ZPT1RFUicsJ0hFQURFUicsJ0tFWUdFTicsJ01BUksnLCdNRVRFUicsJ05BVicsJ09VVFBVVCcsJ1BST0dSRVNTJywnUlAnLCdSVCcsJ1JVQlknLCdTRUNUSU9OJywnU09VUkNFJywnU1VNTUFSWScsJ1RJTUUnLCdUUkFDSycsJ1ZJREVPJywnV0JSJ10pO3ZhciBvYmo9bmV3IE9iamVjdCgpO2ZvcigkaT0wOyRpPCR0YWdzLmxlbmd0aDskaSsrKXskY29kZT0kc3JjLnJlcGxhY2UoL0EvZ20sJHRhZ3NbJGldKTtldmFsKCJvYmouIiskdGFnc1skaV0rIj0iKyRjb2RlKTtldmFsKCJvYmouIiskdGFnc1skaV0rJy5fX25hbWVfXz0iaHRtbC4nKyR0YWdzWyRpXSsnIicpO31vYmouX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fTtyZXR1cm4gb2JqO30pKCk7',
'/libs/re1.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7dmFyIHJlcz10aGlzW2F0dHJdO2lmKHJlcz09PXVuZGVmaW5lZCl0aHJvdyBBdHRyaWJ1dGVFcnJvcigibW9kdWxlIHJlIGhhcyBubyBhdHRyaWJ1dGUgJyIrYXR0cisiJyIpO3JldHVybiByZXM7fSxJOidpJyxNOidtJyxmaW5kYWxsOmZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nLGZsYWdzKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpO3ZhciBhcmdzPSRucy5hcmdzO2lmKGFyZ3MubGVuZ3RoPjApdmFyIGZsYWdzPWFyZ3NbMF07ZWxzZSB2YXIgZmxhZ3M9JG5zLmt3LmdldCgnZmxhZ3MnLCcnKTtmbGFncys9J2dtJzt2YXIganNwPW5ldyBSZWdFeHAocGF0dGVybixmbGFncyk7dmFyIGpzbWF0Y2g9c3RyaW5nLm1hdGNoKGpzcCk7aWYoanNtYXRjaD09PW51bGwpcmV0dXJuIFtdO3JldHVybiBqc21hdGNoO30sc2VhcmNoOmZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpO3ZhciBhcmdzPSRucy5hcmdzO2lmKGFyZ3MubGVuZ3RoPjApdmFyIGZsYWdzPWFyZ3NbMF07ZWxzZSB2YXIgZmxhZ3M9JG5zLmt3LmdldCgnZmxhZ3MnLCcnKTt2YXIganNwPW5ldyBSZWdFeHAocGF0dGVybixmbGFncyk7dmFyIGpzbWF0Y2g9c3RyaW5nLm1hdGNoKGpzcCk7aWYoanNtYXRjaD09PW51bGwpcmV0dXJuIE5vbmU7dmFyIG1vPW5ldyBPYmplY3QoKTttby5ncm91cD1mdW5jdGlvbigpe3ZhciByZXM9W107Zm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKylpZihqc21hdGNoW2FyZ3VtZW50c1tpXV09PT11bmRlZmluZWQpcmVzLnB1c2goTm9uZSk7ZWxzZSByZXMucHVzaChqc21hdGNoW2FyZ3VtZW50c1tpXV0pO2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0xKXJldHVybiByZXNbMF07cmV0dXJuIHR1cGxlKHJlcyk7fTttby5ncm91cHM9ZnVuY3Rpb24oX2RlZmF1bHQpe2lmKF9kZWZhdWx0PT09dW5kZWZpbmVkKV9kZWZhdWx0PU5vbmU7dmFyIHJlcz1bXTtmb3IodmFyIGk9MTtpPGpzbWF0Y2gubGVuZ3RoO2krKylpZihqc21hdGNoW2ldPT09dW5kZWZpbmVkKXJlcy5wdXNoKF9kZWZhdWx0KTtlbHNlIHJlcy5wdXNoKGpzbWF0Y2hbaV0pO3JldHVybiB0dXBsZShyZXMpO307bW8uc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4ganNtYXRjaC5pbmRleDt9O21vLnN0cmluZz1zdHJpbmc7cmV0dXJuIEpTT2JqZWN0KG1vKTt9LHN1YjpmdW5jdGlvbihwYXR0ZXJuLHJlcGwsc3RyaW5nKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywncmVwbCcsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKTtmb3IoJHZhciBpbiAkbnMpZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpO3ZhciBhcmdzPSRucy5hcmdzO3ZhciBjb3VudD0kbnMua3cuZ2V0KCdjb3VudCcsMCk7dmFyIGZsYWdzPSRucy5rdy5nZXQoJ2ZsYWdzJywnJyk7aWYoYXJncy5sZW5ndGg+MCl2YXIgY291bnQ9YXJnc1swXTtpZihhcmdzLmxlbmd0aD4xKXZhciBmbGFncz1hcmdzWzFdO2lmKHR5cGVvZiByZXBsPT09InN0cmluZyIpcmVwbD1yZXBsLnJlcGxhY2UoL1xcKFxkKykvZywnJCQkMScpO2Vsc2UgaWYodHlwZW9mIHJlcGw9PT0iZnVuY3Rpb24iKXZhciAkcmVwbDE9ZnVuY3Rpb24oKXt2YXIgbW89T2JqZWN0KCk7bW8uc3RyaW5nPWFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdO3ZhciBzdGFydD1hcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0yXTt2YXIgZW5kPXN0YXJ0K2FyZ3VtZW50c1swXS5sZW5ndGg7bW8uc3RhcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gc3RhcnQ7fTttby5lbmQ9ZnVuY3Rpb24oKXtyZXR1cm4gZW5kO307Z3JvdXBzPVtdO2Zvcih2YXIgaT0xO2k8YXJndW1lbnRzLmxlbmd0aC0yO2krKylncm91cHMucHVzaChhcmd1bWVudHNbaV0pO21vLmdyb3Vwcz1mdW5jdGlvbihfZGVmYXVsdCl7aWYoX2RlZmF1bHQ9PT11bmRlZmluZWQpX2RlZmF1bHQ9Tm9uZTt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8Z3JvdXBzLmxlbmd0aDtpKyspaWYoZ3JvdXBzW2ldPT09dW5kZWZpbmVkKXJlcy5wdXNoKF9kZWZhdWx0KTtlbHNlIHJlcy5wdXNoKGdyb3Vwc1tpXSk7cmV0dXJuIHJlczt9O3JldHVybiByZXBsKEpTT2JqZWN0KG1vKSk7fTtpZihjb3VudD09MClmbGFncys9J2cnO3ZhciBqc3A9bmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKTtpZih0eXBlb2YgcmVwbD09PSdmdW5jdGlvbicpcmV0dXJuIHN0cmluZy5yZXBsYWNlKGpzcCwkcmVwbDEpO2Vsc2UgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGpzcCxyZXBsKTt9fTskbW9kdWxlLm1hdGNoPWZ1bmN0aW9uKCl7cGF0dGVybj1hcmd1bWVudHNbMF07aWYocGF0dGVybi5jaGFyQXQoMCkhPT0nXicpcGF0dGVybj0nXicrcGF0dGVybjt2YXIgYXJncz1bcGF0dGVybl07Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKylhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtyZXR1cm4gJG1vZHVsZS5zZWFyY2guYXBwbHkobnVsbCxhcmdzKTt9OyRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdyZSc+Ijt9Ow==',
'/libs/hashlib.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7aWYoYXR0cj09J25ldycpcmV0dXJuICRoYXNobGliX25ldztyZXR1cm4gdGhpc1thdHRyXTt9LG1kNTpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ21kNScpO30sc2hhMTpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTEnKTt9LHNoYTIyNDpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTIyNCcpO30sc2hhMjU2OmZ1bmN0aW9uKCl7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjU2Jyk7fSxzaGEzODQ6ZnVuY3Rpb24oKXtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEzODQnKTt9LHNoYTUxMjpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTUxMicpO30sYWxnb3JpdGhtc19ndWFyYW50ZWVkOlsnbWQ1Jywnc2hhMScsJ3NoYTIyNCcsJ3NoYTI1NicsJ3NoYTM4NCcsJ3NoYTUxMiddLGFsZ29yaXRobXNfYXZhaWxhYmxlOlsnbWQ1Jywnc2hhMScsJ3NoYTIyNCcsJ3NoYTI1NicsJ3NoYTM4NCcsJ3NoYTUxMiddfTtmdW5jdGlvbiAkZ2V0X0NyeXB0b0pTX2xpYihhbGcpe3ZhciBpbXA9JGltcG9ydGVyKCk7dmFyICR4bWxodHRwPWltcFswXSxmYWtlX3FzPWltcFsxXSx0aW1lcj1pbXBbMl0scmVzPW51bGw7JHhtbGh0dHAub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aWYoJHhtbGh0dHAucmVhZHlTdGF0ZT09NCl7d2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7aWYoJHhtbGh0dHAuc3RhdHVzPT0yMDB8fCR4bWxodHRwLnN0YXR1cz09MClyZXM9JHhtbGh0dHAucmVzcG9uc2VUZXh0O2Vsc2V7cmVzPUVycm9yKCk7cmVzLm5hbWU9J05vdEZvdW5kRXJyb3InO3Jlcy5tZXNzYWdlPSJObyBDcnlwdG9KUyBsaWIgbmFtZWQgJyIrYWxnKyInIjt9fX07JHhtbGh0dHAub3BlbignR0VUJyxfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJ2xpYnMvY3J5cHRvX2pzL3JvbGx1cHMvJythbGcrJy5qcycrZmFrZV9xcyxmYWxzZSk7aWYoJ292ZXJyaWRlTWltZVR5cGUnIGluICR4bWxodHRwKSR4bWxodHRwLm92ZXJyaWRlTWltZVR5cGUoInRleHQvcGxhaW4iKTskeG1saHR0cC5zZW5kKCk7aWYocmVzLmNvbnN0cnVjdG9yPT09RXJyb3IpdGhyb3cgcmVzO3RyeXtldmFsKHJlcysiOyBfX0JSWVRIT05fXy5DcnlwdG9KUz1DcnlwdG9KUzsiKTt9Y2F0Y2goZXJyKXt0aHJvdyBFcnJvcigiSlMgRXZhbCBFcnJvciIsIkNhbm5vdCBldmFsIENyeXB0b0pTIGFsZ29yaXRobSAnIithbGcrIicgOiBlcnJvcjoiK2Vycik7fX1mdW5jdGlvbiAkaGFzaGxpYl9uZXcoYWxnKXtpZihhbGc9PSdtZDUnKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uTUQ1PT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdtZDUnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5NRDUuY3JlYXRlKCk7fWVsc2UgaWYoYWxnPT0nc2hhMScpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExPT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGExJyk7dGhpcy5oYXNoPV9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMS5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGEyMjQnKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjI0PT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyMjQnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQuY3JlYXRlKCk7fWVsc2UgaWYoYWxnPT0nc2hhMjU2Jyl7aWYoX19CUllUSE9OX18uQ3J5cHRvPT09dW5kZWZpbmVkfHxfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTI1Nj09PXVuZGVmaW5lZCkkZ2V0X0NyeXB0b0pTX2xpYignc2hhMjU2Jyk7dGhpcy5oYXNoPV9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO31lbHNlIGlmKGFsZz09J3NoYTM4NCcpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEzODQ9PT11bmRlZmluZWQpJGdldF9DcnlwdG9KU19saWIoJ3NoYTM4NCcpO3RoaXMuaGFzaD1fX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4NC5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGE1MTInKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBNTEyPT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGE1MTInKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTIuY3JlYXRlKCk7fWVsc2UgJHJhaXNlKCdBdHRyaWJ1dGVFcnJvcicsJ0ludmFsaWQgaGFzaCBhbGdvcml0aG06JythbGcpO3RoaXMuX19jbGFzc19fPSR0eXBlO3RoaXMuX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuICRnZXRhdHRyKHRoaXMsYXR0cik7fTt0aGlzLl9fc3RyX189ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZXhkaWdlc3QoKTt9O3RoaXMudXBkYXRlPWZ1bmN0aW9uKG1zZyl7dGhpcy5oYXNoLnVwZGF0ZShtc2cpO307dGhpcy5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzaC5jbG9uZSgpO307dGhpcy5oZXhkaWdlc3Q9ZnVuY3Rpb24oKXt2YXIgdGVtcD10aGlzLmhhc2guY2xvbmUoKTt0ZW1wPXRlbXAuZmluYWxpemUoKTtyZXR1cm4gdGVtcC50b1N0cmluZygpO307cmV0dXJuIHRoaXM7fSRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdoYXNobGliJz4iO307',
'/libs/_os.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxyYW5kb206ZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQoTWF0aC5yYW5kb20oKSk7fSxyYW5kaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGItYSkrYSkpO319OyRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdfb3MnPiI7fTs=',
'/libs/crypto_js/rollups/sha1.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihlLG0pe3ZhciBwPXt9LGo9cC5saWI9e30sbD1mdW5jdGlvbigpe30sZj1qLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtsLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBsKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0sbj1qLldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPW0/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fGgpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGI9MDtiPGE7Yis9NCljLnB1c2goNDI5NDk2NzI5NiplLnJhbmRvbSgpfDApO3JldHVybiBuZXcgbi5pbml0KGMsYSk7fX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGIuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsYj1bXSxkPTA7ZDxjO2QrPTIpYltkPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGQsMiksMTYpPDwyNC00KihkJTgpO3JldHVybiBuZXcgbi5pbml0KGIsYy8yKTt9fSxnPWIuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBiPVtdLGQ9MDtkPGE7ZCsrKWIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbZD4+PjJdPj4+MjQtOCooZCU0KSYyNTUpKTtyZXR1cm4gYi5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKTt9fSxyPWIuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShnLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZy5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSxrPWouQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBuLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ci5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZDt9cmV0dXJuIG5ldyBuLmluaXQoZyxkKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2ouSGFzaGVyPWsuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuIG5ldyBhLmluaXQoYikuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGYpe3JldHVybiBuZXcgcy5ITUFDLmluaXQoYSxmKS5maW5hbGl6ZShiKTt9O319KTt2YXIgcz1wLmFsZ289e307cmV0dXJuIHA7fShNYXRoKTsoZnVuY3Rpb24oKXt2YXIgZT1DcnlwdG9KUyxtPWUubGliLHA9bS5Xb3JkQXJyYXksaj1tLkhhc2hlcixsPVtdLG09ZS5hbGdvLlNIQTE9ai5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgcC5pbml0KFsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF0pO30sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGYsbil7Zm9yKHZhciBiPXRoaXMuX2hhc2gud29yZHMsaD1iWzBdLGc9YlsxXSxlPWJbMl0saz1iWzNdLGo9Yls0XSxhPTA7ODA+YTthKyspe2lmKDE2PmEpbFthXT1mW24rYV18MDtlbHNle3ZhciBjPWxbYS0zXV5sW2EtOF1ebFthLTE0XV5sW2EtMTZdO2xbYV09Yzw8MXxjPj4+MzE7fWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXmspLTg5OTQ5NzUxNCk7aj1rO2s9ZTtlPWc8PDMwfGc+Pj4yO2c9aDtoPWM7fWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGY9dGhpcy5fZGF0YSxlPWYud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsaD04KmYuc2lnQnl0ZXM7ZVtoPj4+NV18PTEyODw8MjQtaCUzMjtlWyhoKzY0Pj4+OTw8NCkrMTRdPU1hdGguZmxvb3IoYi80Mjk0OTY3Mjk2KTtlWyhoKzY0Pj4+OTw8NCkrMTVdPWI7Zi5zaWdCeXRlcz00KmUubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGU9ai5jbG9uZS5jYWxsKHRoaXMpO2UuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBlO319KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKTt9KSgpOw==',
'/libs/crypto_js/rollups/sha3.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbih2LHApe3ZhciBkPXt9LHU9ZC5saWI9e30scj1mdW5jdGlvbigpe30sZj11LkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtyLnByb3RvdHlwZT10aGlzO3ZhciBiPW5ldyByKCk7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtiLmluaXQucHJvdG90eXBlPWI7Yi4kc3VwZXI9dGhpcztyZXR1cm4gYjt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scz11LldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGIpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWIhPXA/Yjo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHkpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YVtiPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGE7Yys9NCliLnB1c2goNDI5NDk2NzI5Nip2LnJhbmRvbSgpfDApO3JldHVybiBuZXcgcy5pbml0KGIsYSk7fX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGMuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9YS5sZW5ndGgsYz1bXSxqPTA7ajxiO2orPTIpY1tqPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGosMiksMTYpPDwyNC00KihqJTgpO3JldHVybiBuZXcgcy5pbml0KGMsYi8yKTt9fSxlPXguTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGI9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBjPVtdLGo9MDtqPGE7aisrKWMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJbaj4+PjJdPj4+MjQtOCooaiU0KSYyNTUpKTtyZXR1cm4gYy5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKTt9fSxxPXguVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShlLnN0cmluZ2lmeShhKSkpO31jYXRjaChiKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx0PXUuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBzLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9cS5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09ajt9cmV0dXJuIG5ldyBzLmluaXQoZixqKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO3UuSGFzaGVyPXQuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuIG5ldyBhLmluaXQoYykuZmluYWxpemUoYik7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe3JldHVybiBuZXcgdy5ITUFDLmluaXQoYSxjKS5maW5hbGl6ZShiKTt9O319KTt2YXIgdz1kLmFsZ289e307cmV0dXJuIGQ7fShNYXRoKTsoZnVuY3Rpb24odil7dmFyIHA9Q3J5cHRvSlMsZD1wLmxpYix1PWQuQmFzZSxyPWQuV29yZEFycmF5LHA9cC54NjQ9e307cC5Xb3JkPXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7dGhpcy5oaWdoPWY7dGhpcy5sb3c9czt9fSk7cC5Xb3JkQXJyYXk9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXtmPXRoaXMud29yZHM9Znx8W107dGhpcy5zaWdCeXRlcz1zIT12P3M6OCpmLmxlbmd0aDt9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyk7fXJldHVybiByLmNyZWF0ZShkLHRoaXMuc2lnQnl0ZXMpO30sY2xvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIGY9dS5jbG9uZS5jYWxsKHRoaXMpLGQ9Zi53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApLHA9ZC5sZW5ndGgscj0wO3I8cDtyKyspZFtyXT1kW3JdLmNsb25lKCk7cmV0dXJuIGY7fX0pO30pKCk7KGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13O31mb3IoZT0wOzU+ZTtlKyspZm9yKHE9MDs1PnE7cSsrKXhbZSs1KnFdPXErNSooKDIqZSszKnEpJTUpO2U9MTtmb3IocT0wOzI0PnE7cSsrKXtmb3IodmFyIGE9dz10PTA7Nz5hO2ErKyl7aWYoZSYxKXt2YXIgYj0oMTw8YSktMTszMj5iP3dePTE8PGI6dF49MTw8Yi0zMjt9ZT1lJjEyOD9lPDwxXjExMzplPDwxO315W3FdPWYuY3JlYXRlKHQsdyk7fWZvcih2YXIgYz1bXSxlPTA7MjU+ZTtlKyspY1tlXT1mLmNyZWF0ZSgpO2Q9ZC5TSEEzPXIuZXh0ZW5kKHtjZmc6ci5jZmcuZXh0ZW5kKHtvdXRwdXRMZW5ndGg6NTEyfSksX2RvUmVzZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5fc3RhdGU9W10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdCgpO3RoaXMuYmxvY2tTaXplPSgxNjAwLTIqdGhpcy5jZmcub3V0cHV0TGVuZ3RoKS8zMjt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bDt9Zm9yKGY9MDsyND5mO2YrKyl7Zm9yKGg9MDs1Pmg7aCsrKXtmb3IodmFyIGQ9bD0wLGs9MDs1Pms7aysrKWc9ZVtoKzUqa10sbF49Zy5oaWdoLGRePWcubG93O2c9Y1toXTtnLmhpZ2g9bDtnLmxvdz1kO31mb3IoaD0wOzU+aDtoKyspe2c9Y1soaCs0KSU1XTtsPWNbKGgrMSklNV07bT1sLmhpZ2g7az1sLmxvdztsPWcuaGlnaF4obTw8MXxrPj4+MzEpO2Q9Zy5sb3deKGs8PDF8bT4+PjMxKTtmb3Ioaz0wOzU+aztrKyspZz1lW2grNSprXSxnLmhpZ2hePWwsZy5sb3dePWQ7fWZvcihtPTE7MjU+bTttKyspZz1lW21dLGg9Zy5oaWdoLGc9Zy5sb3csaz1zW21dLDMyPms/KGw9aDw8a3xnPj4+MzItayxkPWc8PGt8aD4+PjMyLWspOihsPWc8PGstMzJ8aD4+PjY0LWssZD1oPDxrLTMyfGc+Pj42NC1rKSxnPWNbeFttXV0sZy5oaWdoPWwsZy5sb3c9ZDtnPWNbMF07aD1lWzBdO2cuaGlnaD1oLmhpZ2g7Zy5sb3c9aC5sb3c7Zm9yKGg9MDs1Pmg7aCsrKWZvcihrPTA7NT5rO2srKyltPWgrNSprLGc9ZVttXSxsPWNbbV0sbT1jWyhoKzEpJTUrNSprXSxkPWNbKGgrMiklNSs1KmtdLGcuaGlnaD1sLmhpZ2hefm0uaGlnaCZkLmhpZ2gsZy5sb3c9bC5sb3defm0ubG93JmQubG93O2c9ZVswXTtoPXlbZl07Zy5oaWdoXj1oLmhpZ2g7Zy5sb3dePWgubG93O319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxiPWEud29yZHMsYz04KmEuc2lnQnl0ZXMsZT0zMip0aGlzLmJsb2NrU2l6ZTtiW2M+Pj41XXw9MTw8MjQtYyUzMjtiWyh2LmNlaWwoKGMrMSkvZSkqZT4+PjUpLTFdfD0xMjg7YS5zaWdCeXRlcz00KmIubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtmb3IodmFyIGE9dGhpcy5fc3RhdGUsYj10aGlzLmNmZy5vdXRwdXRMZW5ndGgvOCxjPWIvOCxlPVtdLGg9MDtoPGM7aCsrKXt2YXIgZD1hW2hdLGY9ZC5oaWdoLGQ9ZC5sb3csZj0oZjw8OHxmPj4+MjQpJjE2NzExOTM1fChmPDwyNHxmPj4+OCkmNDI3ODI1NTM2MCxkPShkPDw4fGQ+Pj4yNCkmMTY3MTE5MzV8KGQ8PDI0fGQ+Pj44KSY0Mjc4MjU1MzYwO2UucHVzaChkKTtlLnB1c2goZik7fXJldHVybiBuZXcgdS5pbml0KGUsYik7fSxjbG9uZTpmdW5jdGlvbigpe2Zvcih2YXIgYT1yLmNsb25lLmNhbGwodGhpcyksYj1hLl9zdGF0ZT10aGlzLl9zdGF0ZS5zbGljZSgwKSxjPTA7MjU+YztjKyspYltjXT1iW2NdLmNsb25lKCk7cmV0dXJuIGE7fX0pO3AuU0hBMz1yLl9jcmVhdGVIZWxwZXIoZCk7cC5IbWFjU0hBMz1yLl9jcmVhdGVIbWFjSGVscGVyKGQpO30pKE1hdGgpOw==',
'/libs/crypto_js/rollups/sha224.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihnLGwpe3ZhciBmPXt9LGs9Zi5saWI9e30saD1mdW5jdGlvbigpe30sbT1rLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtoLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBoKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scT1rLldvcmRBcnJheT1tLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPWw/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHMpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGQ9MDtkPGE7ZCs9NCljLnB1c2goNDI5NDk2NzI5NipnLnJhbmRvbSgpfDApO3JldHVybiBuZXcgcS5pbml0KGMsYSk7fX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGQuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsZD1bXSxiPTA7YjxjO2IrPTIpZFtiPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGIsMiksMTYpPDwyNC00KihiJTgpO3JldHVybiBuZXcgcS5pbml0KGQsYy8yKTt9fSxuPXQuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBkPVtdLGI9MDtiPGE7YisrKWQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbYj4+PjJdPj4+MjQtOCooYiU0KSYyNTUpKTtyZXR1cm4gZC5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKTt9fSxqPXQuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShuLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gbi5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx3PWsuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1tLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBxLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ai5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yjt9cmV0dXJuIG5ldyBxLmluaXQodSxiKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2suSGFzaGVyPXcuZXh0ZW5kKHtjZmc6bS5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuIG5ldyBhLmluaXQoZCkuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihjLGQpe3JldHVybiBuZXcgdi5ITUFDLmluaXQoYSxkKS5maW5hbGl6ZShjKTt9O319KTt2YXIgdj1mLmFsZ289e307cmV0dXJuIGY7fShNYXRoKTsoZnVuY3Rpb24oZyl7Zm9yKHZhciBsPUNyeXB0b0pTLGY9bC5saWIsaz1mLldvcmRBcnJheSxoPWYuSGFzaGVyLGY9bC5hbGdvLG09W10scT1bXSx0PWZ1bmN0aW9uKGEpe3JldHVybiA0Mjk0OTY3Mjk2KihhLShhfDApKXwwO30scz0yLG49MDs2ND5uOyl7dmFyIGo7YTp7aj1zO2Zvcih2YXIgdz1nLnNxcnQoaiksdj0yO3Y8PXc7disrKWlmKCEoaiV2KSl7aj0hMTticmVhayBhO31qPSEwO31qJiYoOD5uJiYobVtuXT10KGcucG93KHMsMC41KSkpLHFbbl09dChnLnBvdyhzLDEvMykpLG4rKyk7cysrO312YXIgYT1bXSxmPWYuU0hBMjU2PWguZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGsuaW5pdChtLnNsaWNlKDApKTt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09Y1tkK3BdfDA7ZWxzZXt2YXIgaj1hW3AtMTVdLHI9YVtwLTJdO2FbcF09KChqPDwyNXxqPj4+NyleKGo8PDE0fGo+Pj4xOCleaj4+PjMpK2FbcC03XSsoKHI8PDE1fHI+Pj4xNyleKHI8PDEzfHI+Pj4xOSlecj4+PjEwKSthW3AtMTZdO31qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDA7fWJbMF09YlswXStlfDA7YlsxXT1iWzFdK2Z8MDtiWzJdPWJbMl0rZ3wwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2h8MDtiWzVdPWJbNV0rbHwwO2JbNl09Yls2XSttfDA7Yls3XT1iWzddK258MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxkPWEud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsZT04KmEuc2lnQnl0ZXM7ZFtlPj4+NV18PTEyODw8MjQtZSUzMjtkWyhlKzY0Pj4+OTw8NCkrMTRdPWcuZmxvb3IoYi80Mjk0OTY3Mjk2KTtkWyhlKzY0Pj4+OTw8NCkrMTVdPWI7YS5zaWdCeXRlcz00KmQubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9aC5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhO319KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZik7fSkoTWF0aCk7KGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pO30sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj1rLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7Zi5zaWdCeXRlcy09NDtyZXR1cm4gZjt9fSk7Zy5TSEEyMjQ9ay5fY3JlYXRlSGVscGVyKGYpO2cuSG1hY1NIQTIyND1rLl9jcmVhdGVIbWFjSGVscGVyKGYpO30pKCk7',
'/libs/crypto_js/rollups/sha512.js':'',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/md5.js':'',
'/Lib/heapq.py':'',
'/Lib/calendar.py':'',
'/Lib/markdown.py':'',
'/Lib/errno.py':'IlRoaXMgbW9kdWxlIG1ha2VzIGF2YWlsYWJsZSBzdGFuZGFyZCBlcnJubyBzeXN0ZW0gc3ltYm9scy5cblxuVGhlIHZhbHVlIG9mIGVhY2ggc3ltYm9sIGlzIHRoZSBjb3JyZXNwb25kaW5nIGludGVnZXIgdmFsdWUsXG5lLmcuLCBvbiBtb3N0IHN5c3RlbXMsIGVycm5vLkVOT0VOVCBlcXVhbHMgdGhlIGludGVnZXIgMi5cblxuVGhlIGRpY3Rpb25hcnkgZXJybm8uZXJyb3Jjb2RlIG1hcHMgbnVtZXJpYyBjb2RlcyB0byBzeW1ib2wgbmFtZXMsXG5lLmcuLCBlcnJuby5lcnJvcmNvZGVbMl0gY291bGQgYmUgdGhlIHN0cmluZyAnRU5PRU5UJy5cblxuU3ltYm9scyB0aGF0IGFyZSBub3QgcmVsZXZhbnQgdG8gdGhlIHVuZGVybHlpbmcgc3lzdGVtIGFyZSBub3QgZGVmaW5lZC5cblxuVG8gbWFwIGVycm9yIGNvZGVzIHRvIGVycm9yIG1lc3NhZ2VzLCB1c2UgdGhlIGZ1bmN0aW9uIG9zLnN0cmVycm9yKCksXG5lLmcuIG9zLnN0cmVycm9yKDIpIGNvdWxkIHJldHVybiAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScuIgoKRTJCSUcgPSA3CkVBQ0NFUyA9IDEzCkVBRERSSU5VU0UgPSA5OApFQUREUk5PVEFWQUlMID0gOTkKRUFEViA9IDY4CkVBRk5PU1VQUE9SVCA9IDk3CkVBR0FJTiA9IDExCkVBTFJFQURZID0gMTE0CkVCQURFID0gNTIKRUJBREYgPSA5CkVCQURGRCA9IDc3CkVCQURNU0cgPSA3NApFQkFEUiA9IDUzCkVCQURSUUMgPSA1NgpFQkFEU0xUID0gNTcKRUJGT05UID0gNTkKRUJVU1kgPSAxNgpFQ0hJTEQgPSAxMApFQ0hSTkcgPSA0NApFQ09NTSA9IDcwCkVDT05OQUJPUlRFRCA9IDEwMwpFQ09OTlJFRlVTRUQgPSAxMTEKRUNPTk5SRVNFVCA9IDEwNApFREVBRExLID0gMzUKRURFQURMT0NLID0gMzUKRURFU1RBRERSUkVRID0gODkKRURPTSA9IDMzCkVET1RET1QgPSA3MwpFRFFVT1QgPSAxMjIKRUVYSVNUID0gMTcKRUZBVUxUID0gMTQKRUZCSUcgPSAyNwpFSE9TVERPV04gPSAxMTIKRUhPU1RVTlJFQUNIID0gMTEzCkVJRFJNID0gNDMKRUlMU0VRID0gODQKRUlOUFJPR1JFU1MgPSAxMTUKRUlOVFIgPSA0CkVJTlZBTCA9IDIyCkVJTyA9IDUKRUlTQ09OTiA9IDEwNgpFSVNESVIgPSAyMQpFSVNOQU0gPSAxMjAKRUwySExUID0gNTEKRUwyTlNZTkMgPSA0NQpFTDNITFQgPSA0NgpFTDNSU1QgPSA0NwpFTElCQUNDID0gNzkKRUxJQkJBRCA9IDgwCkVMSUJFWEVDID0gODMKRUxJQk1BWCA9IDgyCkVMSUJTQ04gPSA4MQpFTE5STkcgPSA0OApFTE9PUCA9IDQwCkVNRklMRSA9IDI0CkVNTElOSyA9IDMxCkVNU0dTSVpFID0gOTAKRU1VTFRJSE9QID0gNzIKRU5BTUVUT09MT05HID0gMzYKRU5BVkFJTCA9IDExOQpFTkVURE9XTiA9IDEwMApFTkVUUkVTRVQgPSAxMDIKRU5FVFVOUkVBQ0ggPSAxMDEKRU5GSUxFID0gMjMKRU5PQU5PID0gNTUKRU5PQlVGUyA9IDEwNQpFTk9DU0kgPSA1MApFTk9EQVRBID0gNjEKRU5PREVWID0gMTkKRU5PRU5UID0gMgpFTk9FWEVDID0gOApFTk9MQ0sgPSAzNwpFTk9MSU5LID0gNjcKRU5PTUVNID0gMTIKRU5PTVNHID0gNDIKRU5PTkVUID0gNjQKRU5PUEtHID0gNjUKRU5PUFJPVE9PUFQgPSA5MgpFTk9TUEMgPSAyOApFTk9TUiA9IDYzCkVOT1NUUiA9IDYwCkVOT1NZUyA9IDM4CkVOT1RCTEsgPSAxNQpFTk9UQ09OTiA9IDEwNwpFTk9URElSID0gMjAKRU5PVEVNUFRZID0gMzkKRU5PVE5BTSA9IDExOApFTk9UU09DSyA9IDg4CkVOT1RUWSA9IDI1CkVOT1RVTklRID0gNzYKRU5YSU8gPSA2CkVPUE5PVFNVUFAgPSA5NQpFT1ZFUkZMT1cgPSA3NQpFUEVSTSA9IDEKRVBGTk9TVVBQT1JUID0gOTYKRVBJUEUgPSAzMgpFUFJPVE8gPSA3MQpFUFJPVE9OT1NVUFBPUlQgPSA5MwpFUFJPVE9UWVBFID0gOTEKRVJBTkdFID0gMzQKRVJFTUNIRyA9IDc4CkVSRU1PVEUgPSA2NgpFUkVNT1RFSU8gPSAxMjEKRVJFU1RBUlQgPSA4NQpFUk9GUyA9IDMwCkVTSFVURE9XTiA9IDEwOApFU09DS1ROT1NVUFBPUlQgPSA5NApFU1BJUEUgPSAyOQpFU1JDSCA9IDMKRVNSTU5UID0gNjkKRVNUQUxFID0gMTE2CkVTVFJQSVBFID0gODYKRVRJTUUgPSA2MgpFVElNRURPVVQgPSAxMTAKRVRPT01BTllSRUZTID0gMTA5CkVUWFRCU1kgPSAyNgpFVUNMRUFOID0gMTE3CkVVTkFUQ0ggPSA0OQpFVVNFUlMgPSA4NwpFV09VTERCTE9DSyA9IDExCkVYREVWID0gMTgKRVhGVUxMID0gNTQKIyBlcnJvcmNvZGUK',
'/Lib/itertools.py':'',
'/Lib/random.py':'',
'/Lib/_collections.py':'',
'/Lib/antigravity.py':'aW1wb3J0IHdlYmJyb3dzZXIKaW1wb3J0IGhhc2hsaWIKCndlYmJyb3dzZXIub3BlbigiaHR0cDovL3hrY2QuY29tLzM1My8iKQoKZGVmIGdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgZGF0ZWRvdyk6CiAgICAnJydDb21wdXRlIGdlb2hhc2goKSB1c2luZyB0aGUgTXVucm9lIGFsZ29yaXRobS4KCiAgICA+Pj4gZ2VvaGFzaCgzNy40MjE1NDIsIC0xMjIuMDg1NTg5LCBiJzIwMDUtMDUtMjYtMTA0NTguNjgnKQogICAgMzcuODU3NzEzIC0xMjIuNTQ0NTQzCgogICAgJycnCiAgICAjIGh0dHA6Ly94a2NkLmNvbS80MjYvCiAgICBoID0gaGFzaGxpYi5tZDUoZGF0ZWRvdykuaGV4ZGlnZXN0KCkKICAgIHAsIHEgPSBbKCclZicgJSBmbG9hdC5mcm9taGV4KCcwLicgKyB4KSkgZm9yIHggaW4gKGhbOjE2XSwgaFsxNjozMl0pXQogICAgcHJpbnQoJyVkJXMgJWQlcycgJSAobGF0aXR1ZGUsIHBbMTpdLCBsb25naXR1ZGUsIHFbMTpdKSkK',
'/Lib/local_storage.py':'IyBsb2NhbCBzdG9yYWdlIGluIGJyb3dzZXIKCmNsYXNzIExvY2FsU3RvcmFnZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgaWYgbm90IF9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlOgogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2xvY2FsIHN0b3JhZ2UgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcicpCiAgICAgICAgc2VsZi5zdG9yZSA9IF9fQlJZVEhPTl9fLmxvY2FsX3N0b3JhZ2UoKQogICAgICAgIAogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsa2V5KToKICAgICAgICBzZWxmLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiByZXMKICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsa2V5LHZhbHVlKToKICAgICAgICBzZWxmLnN0b3JlLnNldEl0ZW0oa2V5LHZhbHVlKQoKICAgICNpbXBsZW1lbnQgImluIiBmdW5jdGlvbmFsaXR5CiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBrZXlzKHNlbGYpOgogICAgICAgIHJldHVybiBsaXN0KHNlbGYuc3RvcmUpCgogICAgZGVmIHZhbHVlcyhzZWxmKToKICAgICAgICByZXR1cm4gW3NlbGYuX19nZXRpdGVtX18oaykgZm9yIGsgaW4gc2VsZi5rZXlzKCldCgogICAgZGVmIGl0ZW1zKHNlbGYpOgogICAgICAgIHJldHVybiB6aXAoc2VsZi5rZXlzKCksc2VsZi52YWx1ZXMoKSkKCnN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2UoKQoK',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/dis.py':'ZGVmIGRpcyhzcmMpOgogICAgcmV0dXJuIEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5MmpzKHNyYykpLnRvX2pzKCkK',
'/Lib/types.py':'IiIiCkRlZmluZSBuYW1lcyBmb3IgYnVpbHQtaW4gdHlwZXMgdGhhdCBhcmVuJ3QgZGlyZWN0bHkgYWNjZXNzaWJsZSBhcyBhIGJ1aWx0aW4uCiIiIgppbXBvcnQgc3lzCgojIEl0ZXJhdG9ycyBpbiBQeXRob24gYXJlbid0IGEgbWF0dGVyIG9mIHR5cGUgYnV0IG9mIHByb3RvY29sLiAgQSBsYXJnZQojIGFuZCBjaGFuZ2luZyBudW1iZXIgb2YgYnVpbHRpbiB0eXBlcyBpbXBsZW1lbnQgKnNvbWUqIGZsYXZvciBvZgojIGl0ZXJhdG9yLiAgRG9uJ3QgY2hlY2sgdGhlIHR5cGUhICBVc2UgaGFzYXR0ciB0byBjaGVjayBmb3IgYm90aAojICJfX2l0ZXJfXyIgYW5kICJfX25leHRfXyIgYXR0cmlidXRlcyBpbnN0ZWFkLgoKI2RlZiBfZigpOiBwYXNzCiNGdW5jdGlvblR5cGUgPSB0eXBlKF9mKQojTGFtYmRhVHlwZSA9IHR5cGUobGFtYmRhOiBOb25lKSAgICAgICAgICMgU2FtZSBhcyBGdW5jdGlvblR5cGUKI0NvZGVUeXBlID0gdHlwZShfZi5fX2NvZGVfXykKCiNkZWYgX2coKToKIyAgICB5aWVsZCAxCiNHZW5lcmF0b3JUeXBlID0gdHlwZShfZygpKQoKY2xhc3MgX0M6CiAgICBkZWYgX20oc2VsZik6IHBhc3MKTWV0aG9kVHlwZSA9IHR5cGUoX0MoKS5fbSkKCkJ1aWx0aW5GdW5jdGlvblR5cGUgPSB0eXBlKGxlbikKQnVpbHRpbk1ldGhvZFR5cGUgPSB0eXBlKFtdLmFwcGVuZCkgICAgICMgU2FtZSBhcyBCdWlsdGluRnVuY3Rpb25UeXBlCgpNb2R1bGVUeXBlID0gdHlwZShzeXMpCgojdHJ5OgojICAgIHJhaXNlIFR5cGVFcnJvcgojZXhjZXB0IFR5cGVFcnJvcjoKIyAgICB0YiA9IHN5cy5leGNfaW5mbygpWzJdCiMgICAgVHJhY2ViYWNrVHlwZSA9IHR5cGUodGIpCiMgICAgRnJhbWVUeXBlID0gdHlwZSh0Yi50Yl9mcmFtZSkKIyAgICB0YiA9IE5vbmU7IGRlbCB0YgoKIyBGb3IgSnl0aG9uLCB0aGUgZm9sbG93aW5nIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsCiNHZXRTZXREZXNjcmlwdG9yVHlwZSA9IHR5cGUoRnVuY3Rpb25UeXBlLl9fY29kZV9fKQojTWVtYmVyRGVzY3JpcHRvclR5cGUgPSB0eXBlKEZ1bmN0aW9uVHlwZS5fX2dsb2JhbHNfXykKCiNmaXhtZSBicnl0aG9uCiNkZWwgc3lzLCBfZiwgX2csIF9DLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTm90IGZvciBleHBvcnQK',
'/Lib/warnings.py':'',
'/Lib/string.py':'IyBTb21lIHN0cmluZ3MgZm9yIGN0eXBlLXN0eWxlIGNoYXJhY3RlciBjbGFzc2lmaWNhdGlvbgp3aGl0ZXNwYWNlID0gJyBcdFxuXHJcdlxmJwphc2NpaV9sb3dlcmNhc2UgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonCmFzY2lpX3VwcGVyY2FzZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicKYXNjaWlfbGV0dGVycyA9IGFzY2lpX2xvd2VyY2FzZSArIGFzY2lpX3VwcGVyY2FzZQpkaWdpdHMgPSAnMDEyMzQ1Njc4OScKaGV4ZGlnaXRzID0gZGlnaXRzICsgJ2FiY2RlZicgKyAnQUJDREVGJwpvY3RkaWdpdHMgPSAnMDEyMzQ1NjcnCnB1bmN0dWF0aW9uID0gIiIiISIjJCUmJygpKissLS4vOjs8PT4/QFtcXV5fYHt8fX4iIiIKcHJpbnRhYmxlID0gZGlnaXRzICsgYXNjaWlfbGV0dGVycyArIHB1bmN0dWF0aW9uICsgd2hpdGVzcGFjZQoKIyBGdW5jdGlvbnMgd2hpY2ggYXJlbid0IGF2YWlsYWJsZSBhcyBzdHJpbmcgbWV0aG9kcy4KCiMgQ2FwaXRhbGl6ZSB0aGUgd29yZHMgaW4gYSBzdHJpbmcsIGUuZy4gIiBhQmMgIGRFZiAiIC0+ICJBYmMgRGVmIi4KZGVmIGNhcHdvcmRzKHMsIHNlcD1Ob25lKToKICAgICIiImNhcHdvcmRzKHMgWyxzZXBdKSAtPiBzdHJpbmcKCiAgICBTcGxpdCB0aGUgYXJndW1lbnQgaW50byB3b3JkcyB1c2luZyBzcGxpdCwgY2FwaXRhbGl6ZSBlYWNoCiAgICB3b3JkIHVzaW5nIGNhcGl0YWxpemUsIGFuZCBqb2luIHRoZSBjYXBpdGFsaXplZCB3b3JkcyB1c2luZwogICAgam9pbi4gIElmIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgc2VwIGlzIGFic2VudCBvciBOb25lLAogICAgcnVucyBvZiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgYXJlIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIHNwYWNlCiAgICBhbmQgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcmUgcmVtb3ZlZCwgb3RoZXJ3aXNlCiAgICBzZXAgaXMgdXNlZCB0byBzcGxpdCBhbmQgam9pbiB0aGUgd29yZHMuCgogICAgIiIiCiAgICByZXR1cm4gKHNlcCBvciAnICcpLmpvaW4oeC5jYXBpdGFsaXplKCkgZm9yIHggaW4gcy5zcGxpdChzZXApKQo=',
'/Lib/webbrowser.py':'X19hbGxfXyA9IFsiRXJyb3IiLCAib3BlbiIsICJvcGVuX25ldyIsICJvcGVuX25ld190YWIiXQoKY2xhc3MgRXJyb3IoRXhjZXB0aW9uKToKICAgIHBhc3MKCl90YXJnZXQgPSB7IDA6ICcnLCAxOiAnX2JsYW5rJywgMjogJ19uZXcnIH0gICMgaGFjay4uLgoKCmRlZiBvcGVuKHVybCwgbmV3PTAsIGF1dG9yYWlzZT1UcnVlKToKICAgICIiIiAKICAgIG5ldyB3aW5kb3cgb3IgdGFiIGlzIG5vdCBjb250cm9sbGFibGUKICAgIG9uIHRoZSBjbGllbnQgc2lkZS4gYXV0b3JhaXNlIG5vdCBhdmFpbGFibGUuCiAgICAiIiIKICAgIGlmIHdpbi5vcGVuKHVybCwgX3RhcmdldFtuZXddKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKZGVmIG9wZW5fbmV3KHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDEpCgpkZWYgb3Blbl9uZXdfdGFiKHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDIpCgoK',
'/Lib/this.py':'cyA9ICIiIkd1ciBNcmEgYnMgQ2xndWJhLCBvbCBHdnogQ3JncmVmCgpPcm5oZ3ZzaHkgdmYgb3JnZ3JlIGd1bmEgaHR5bC4KUmtjeXZwdmcgdmYgb3JnZ3JlIGd1bmEgdnpjeXZwdmcuCkZ2emN5ciB2ZiBvcmdncmUgZ3VuYSBwYnpjeXJrLgpQYnpjeXJrIHZmIG9yZ2dyZSBndW5hIHBiemN5dnBuZ3JxLgpTeW5nIHZmIG9yZ2dyZSBndW5hIGFyZmdycS4KRmNuZWZyIHZmIG9yZ2dyZSBndW5hIHFyYWZyLgpFcm5xbm92eXZnbCBwYmhhZ2YuCkZjcnB2bnkgcG5mcmYgbmVyYSdnIGZjcnB2bnkgcmFiaHR1IGdiIG9lcm54IGd1ciBlaHlyZi4KTnlndWJodHUgY2VucGd2cG55dmdsIG9ybmdmIGNoZXZnbC4KUmVlYmVmIGZ1Ymh5cSBhcmlyZSBjbmZmIGZ2eXJhZ3lsLgpIYXlyZmYgcmtjeXZwdmd5bCBmdnlyYXBycS4KVmEgZ3VyIHNucHIgYnMgbnpvdnRodmdsLCBlcnNoZnIgZ3VyIGdyemNnbmd2YmEgZ2IgdGhyZmYuCkd1cmVyIGZ1Ymh5cSBvciBiYXItLSBuYXEgY2Vyc3Jlbm95bCBiYXlsIGJhciAtLWJvaXZiaGYgam5sIGdiIHFiIHZnLgpOeWd1Ymh0dSBndW5nIGpubCB6bmwgYWJnIG9yIGJvaXZiaGYgbmcgc3ZlZmcgaGF5cmZmIGxiaCdlciBRaGdwdS4KQWJqIHZmIG9yZ2dyZSBndW5hIGFyaXJlLgpOeWd1Ymh0dSBhcmlyZSB2ZiBic2dyYSBvcmdncmUgZ3VuYSAqZXZ0dWcqIGFiai4KVnMgZ3VyIHZ6Y3lyenJhZ25ndmJhIHZmIHVuZXEgZ2IgcmtjeW52YSwgdmcnZiBuIG9ucSB2cXJuLgpWcyBndXIgdnpjeXJ6cmFnbmd2YmEgdmYgcm5mbCBnYiBya2N5bnZhLCB2ZyB6bmwgb3IgbiB0YmJxIHZxcm4uCkFuenJmY25wcmYgbmVyIGJhciB1YmF4dmF0IHRlcm5nIHZxcm4gLS0geXJnJ2YgcWIgemJlciBicyBndWJmciEiIiIKCmQgPSB7fQpmb3IgYyBpbiAoNjUsIDk3KToKICAgIGZvciBpIGluIHJhbmdlKDI2KToKICAgICAgICBkW2NocihpK2MpXSA9IGNocigoaSsxMykgJSAyNiArIGMpCgpwcmludCgiIi5qb2luKFtkLmdldChjLCBjKSBmb3IgYyBpbiBzXSkpCg==',
'/Lib/datetime.py':'',
'/Lib/colorsys.py':'IiIiQ29udmVyc2lvbiBmdW5jdGlvbnMgYmV0d2VlbiBSR0IgYW5kIG90aGVyIGNvbG9yIHN5c3RlbXMuCgpUaGlzIG1vZHVsZXMgcHJvdmlkZXMgdHdvIGZ1bmN0aW9ucyBmb3IgZWFjaCBjb2xvciBzeXN0ZW0gQUJDOgoKICByZ2JfdG9fYWJjKHIsIGcsIGIpIC0tPiBhLCBiLCBjCiAgYWJjX3RvX3JnYihhLCBiLCBjKSAtLT4gciwgZywgYgoKQWxsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgdHJpcGxlcyBvZiBmbG9hdHMgaW4gdGhlIHJhbmdlIFswLjAuLi4xLjBdCih3aXRoIHRoZSBleGNlcHRpb24gb2YgSSBhbmQgUSwgd2hpY2ggY292ZXJzIGEgc2xpZ2h0bHkgbGFyZ2VyIHJhbmdlKS4KSW5wdXRzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIG1heSBjYXVzZSBleGNlcHRpb25zIG9yIGludmFsaWQgb3V0cHV0cy4KClN1cHBvcnRlZCBjb2xvciBzeXN0ZW1zOgpSR0I6IFJlZCwgR3JlZW4sIEJsdWUgY29tcG9uZW50cwpZSVE6IEx1bWluYW5jZSwgQ2hyb21pbmFuY2UgKHVzZWQgYnkgY29tcG9zaXRlIHZpZGVvIHNpZ25hbHMpCkhMUzogSHVlLCBMdW1pbmFuY2UsIFNhdHVyYXRpb24KSFNWOiBIdWUsIFNhdHVyYXRpb24sIFZhbHVlCiIiIgoKIyBSZWZlcmVuY2VzOgojIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUlRCiMgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9ITFNfY29sb3Jfc3BhY2UKIyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTVl9jb2xvcl9zcGFjZQoKX19hbGxfXyA9IFsicmdiX3RvX3lpcSIsInlpcV90b19yZ2IiLCJyZ2JfdG9faGxzIiwiaGxzX3RvX3JnYiIsCiAgICAgICAgICAgInJnYl90b19oc3YiLCJoc3ZfdG9fcmdiIl0KCiMgU29tZSBmbG9hdGluZyBwb2ludCBjb25zdGFudHMKCk9ORV9USElSRCA9IDEuMC8zLjAKT05FX1NJWFRIID0gMS4wLzYuMApUV09fVEhJUkQgPSAyLjAvMy4wCgojIFlJUTogdXNlZCBieSBjb21wb3NpdGUgdmlkZW8gc2lnbmFscyAobGluZWFyIGNvbWJpbmF0aW9ucyBvZiBSR0IpCiMgWTogcGVyY2VpdmVkIGdyZXkgbGV2ZWwgKDAuMCA9PSBibGFjaywgMS4wID09IHdoaXRlKQojIEksIFE6IGNvbG9yIGNvbXBvbmVudHMKCmRlZiByZ2JfdG9feWlxKHIsIGcsIGIpOgogICAgeSA9IDAuMzAqciArIDAuNTkqZyArIDAuMTEqYgogICAgaSA9IDAuNjAqciAtIDAuMjgqZyAtIDAuMzIqYgogICAgcSA9IDAuMjEqciAtIDAuNTIqZyArIDAuMzEqYgogICAgcmV0dXJuICh5LCBpLCBxKQoKZGVmIHlpcV90b19yZ2IoeSwgaSwgcSk6CiAgICByID0geSArIDAuOTQ4MjYyKmkgKyAwLjYyNDAxMypxCiAgICBnID0geSAtIDAuMjc2MDY2KmkgLSAwLjYzOTgxMCpxCiAgICBiID0geSAtIDEuMTA1NDUwKmkgKyAxLjcyOTg2MCpxCiAgICBpZiByIDwgMC4wOgogICAgICAgIHIgPSAwLjAKICAgIGlmIGcgPCAwLjA6CiAgICAgICAgZyA9IDAuMAogICAgaWYgYiA8IDAuMDoKICAgICAgICBiID0gMC4wCiAgICBpZiByID4gMS4wOgogICAgICAgIHIgPSAxLjAKICAgIGlmIGcgPiAxLjA6CiAgICAgICAgZyA9IDEuMAogICAgaWYgYiA+IDEuMDoKICAgICAgICBiID0gMS4wCiAgICByZXR1cm4gKHIsIGcsIGIpCgoKIyBITFM6IEh1ZSwgTHVtaW5hbmNlLCBTYXR1cmF0aW9uCiMgSDogcG9zaXRpb24gaW4gdGhlIHNwZWN0cnVtCiMgTDogY29sb3IgbGlnaHRuZXNzCiMgUzogY29sb3Igc2F0dXJhdGlvbgoKZGVmIHJnYl90b19obHMociwgZywgYik6CiAgICBtYXhjID0gbWF4KHIsIGcsIGIpCiAgICBtaW5jID0gbWluKHIsIGcsIGIpCiAgICAjIFhYWCBDYW4gb3B0aW1pemUgKG1heGMrbWluYykgYW5kIChtYXhjLW1pbmMpCiAgICBsID0gKG1pbmMrbWF4YykvMi4wCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgbCwgMC4wCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAobWF4YyttaW5jKQogICAgZWxzZToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAoMi4wLW1heGMtbWluYykKICAgIHJjID0gKG1heGMtcikgLyAobWF4Yy1taW5jKQogICAgZ2MgPSAobWF4Yy1nKSAvIChtYXhjLW1pbmMpCiAgICBiYyA9IChtYXhjLWIpIC8gKG1heGMtbWluYykKICAgIGlmIHIgPT0gbWF4YzoKICAgICAgICBoID0gYmMtZ2MKICAgIGVsaWYgZyA9PSBtYXhjOgogICAgICAgIGggPSAyLjArcmMtYmMKICAgIGVsc2U6CiAgICAgICAgaCA9IDQuMCtnYy1yYwogICAgaCA9IChoLzYuMCkgJSAxLjAKICAgIHJldHVybiBoLCBsLCBzCgpkZWYgaGxzX3RvX3JnYihoLCBsLCBzKToKICAgIGlmIHMgPT0gMC4wOgogICAgICAgIHJldHVybiBsLCBsLCBsCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBtMiA9IGwgKiAoMS4wK3MpCiAgICBlbHNlOgogICAgICAgIG0yID0gbCtzLShsKnMpCiAgICBtMSA9IDIuMCpsIC0gbTIKICAgIHJldHVybiAoX3YobTEsIG0yLCBoK09ORV9USElSRCksIF92KG0xLCBtMiwgaCksIF92KG0xLCBtMiwgaC1PTkVfVEhJUkQpKQoKZGVmIF92KG0xLCBtMiwgaHVlKToKICAgIGh1ZSA9IGh1ZSAlIDEuMAogICAgaWYgaHVlIDwgT05FX1NJWFRIOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqaHVlKjYuMAogICAgaWYgaHVlIDwgMC41OgogICAgICAgIHJldHVybiBtMgogICAgaWYgaHVlIDwgVFdPX1RISVJEOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqKFRXT19USElSRC1odWUpKjYuMAogICAgcmV0dXJuIG0xCgoKIyBIU1Y6IEh1ZSwgU2F0dXJhdGlvbiwgVmFsdWUKIyBIOiBwb3NpdGlvbiBpbiB0aGUgc3BlY3RydW0KIyBTOiBjb2xvciBzYXR1cmF0aW9uICgicHVyaXR5IikKIyBWOiBjb2xvciBicmlnaHRuZXNzCgpkZWYgcmdiX3RvX2hzdihyLCBnLCBiKToKICAgIG1heGMgPSBtYXgociwgZywgYikKICAgIG1pbmMgPSBtaW4ociwgZywgYikKICAgIHYgPSBtYXhjCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgMC4wLCB2CiAgICBzID0gKG1heGMtbWluYykgLyBtYXhjCiAgICByYyA9IChtYXhjLXIpIC8gKG1heGMtbWluYykKICAgIGdjID0gKG1heGMtZykgLyAobWF4Yy1taW5jKQogICAgYmMgPSAobWF4Yy1iKSAvIChtYXhjLW1pbmMpCiAgICBpZiByID09IG1heGM6CiAgICAgICAgaCA9IGJjLWdjCiAgICBlbGlmIGcgPT0gbWF4YzoKICAgICAgICBoID0gMi4wK3JjLWJjCiAgICBlbHNlOgogICAgICAgIGggPSA0LjArZ2MtcmMKICAgIGggPSAoaC82LjApICUgMS4wCiAgICByZXR1cm4gaCwgcywgdgoKZGVmIGhzdl90b19yZ2IoaCwgcywgdik6CiAgICBpZiBzID09IDAuMDoKICAgICAgICByZXR1cm4gdiwgdiwgdgogICAgaSA9IGludChoKjYuMCkgIyBYWFggYXNzdW1lIGludCgpIHRydW5jYXRlcyEKICAgIGYgPSAoaCo2LjApIC0gaQogICAgcCA9IHYqKDEuMCAtIHMpCiAgICBxID0gdiooMS4wIC0gcypmKQogICAgdCA9IHYqKDEuMCAtIHMqKDEuMC1mKSkKICAgIGkgPSBpJTYKICAgIGlmIGkgPT0gMDoKICAgICAgICByZXR1cm4gdiwgdCwgcAogICAgaWYgaSA9PSAxOgogICAgICAgIHJldHVybiBxLCB2LCBwCiAgICBpZiBpID09IDI6CiAgICAgICAgcmV0dXJuIHAsIHYsIHQKICAgIGlmIGkgPT0gMzoKICAgICAgICByZXR1cm4gcCwgcSwgdgogICAgaWYgaSA9PSA0OgogICAgICAgIHJldHVybiB0LCBwLCB2CiAgICBpZiBpID09IDU6CiAgICAgICAgcmV0dXJuIHYsIHAsIHEKICAgICMgQ2Fubm90IGdldCBoZXJlCg==',
'/Lib/traceback.py':'aW1wb3J0IHN5cwpkZWYgcHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycik6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICBmaWxlLndyaXRlKGV4Yy5fX25hbWVfXykKICAgIGlmIGV4Yy5tZXNzYWdlOgogICAgICAgIGZpbGUud3JpdGUoJzogJytleGMubWVzc2FnZSsnXG4nK2V4Yy5pbmZvKQogICAgZmlsZS53cml0ZSgnXG4nKQo=',
'/Lib/_random.py':'aW1wb3J0IF9vcwpjbGFzcyBSYW5kb206CiAgICAiIiJSYW5kb20gbnVtYmVyIGdlbmVyYXRvciBiYXNlIGNsYXNzIHVzZWQgYnkgYm91bmQgbW9kdWxlIGZ1bmN0aW9ucy4KCiAgICBVc2VkIHRvIGluc3RhbnRpYXRlIGluc3RhbmNlcyBvZiBSYW5kb20gdG8gZ2V0IGdlbmVyYXRvcnMgdGhhdCBkb24ndAogICAgc2hhcmUgc3RhdGUuCgogICAgQ2xhc3MgUmFuZG9tIGNhbiBhbHNvIGJlIHN1YmNsYXNzZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgZGlmZmVyZW50IGJhc2ljCiAgICBnZW5lcmF0b3Igb2YgeW91ciBvd24gZGV2aXNpbmc6IGluIHRoYXQgY2FzZSwgb3ZlcnJpZGUgdGhlIGZvbGxvd2luZwogICAgbWV0aG9kczogIHJhbmRvbSgpLCBzZWVkKCksIGdldHN0YXRlKCksIGFuZCBzZXRzdGF0ZSgpLgogICAgT3B0aW9uYWxseSwgaW1wbGVtZW50IGEgZ2V0cmFuZGJpdHMoKSBtZXRob2Qgc28gdGhhdCByYW5kcmFuZ2UoKQogICAgY2FuIGNvdmVyIGFyYml0cmFyaWx5IGxhcmdlIHJhbmdlcy4KCiAgICAiIiIKICAgICNyYW5kb20KICAgICNzZWVkCiAgICAjZ2V0c3RhdGUKICAgICNzZXRzdGF0ZQoKCiAgICBWRVJTSU9OID0gMyAgICAgIyB1c2VkIGJ5IGdldHN0YXRlL3NldHN0YXRlCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHg9Tm9uZSk6CiAgICAgICAgIiIiSW5pdGlhbGl6ZSBhbiBpbnN0YW5jZS4KCiAgICAgICAgT3B0aW9uYWwgYXJndW1lbnQgeCBjb250cm9scyBzZWVkaW5nLCBhcyBmb3IgUmFuZG9tLnNlZWQoKS4KICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9eAoKICAgIGRlZiBzZWVkKHNlbGYsIGE9Tm9uZSwgdmVyc2lvbj0yKToKICAgICAgICAiIiJJbml0aWFsaXplIGludGVybmFsIHN0YXRlIGZyb20gaGFzaGFibGUgb2JqZWN0LgoKICAgICAgICBOb25lIG9yIG5vIGFyZ3VtZW50IHNlZWRzIGZyb20gY3VycmVudCB0aW1lIG9yIGZyb20gYW4gb3BlcmF0aW5nCiAgICAgICAgc3lzdGVtIHNwZWNpZmljIHJhbmRvbW5lc3Mgc291cmNlIGlmIGF2YWlsYWJsZS4KCiAgICAgICAgRm9yIHZlcnNpb24gMiAodGhlIGRlZmF1bHQpLCBhbGwgb2YgdGhlIGJpdHMgYXJlIHVzZWQgaWYgKmEqIGlzIGEgc3RyLAogICAgICAgIGJ5dGVzLCBvciBieXRlYXJyYXkuICBGb3IgdmVyc2lvbiAxLCB0aGUgaGFzaCgpIG9mICphKiBpcyB1c2VkIGluc3RlYWQuCgogICAgICAgIElmICphKiBpcyBhbiBpbnQsIGFsbCBiaXRzIGFyZSB1c2VkLgoKICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9YQogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKCiAgICBkZWYgZ2V0c3RhdGUoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGludGVybmFsIHN0YXRlOyBjYW4gYmUgcGFzc2VkIHRvIHNldHN0YXRlKCkgbGF0ZXIuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3N0YXRlCgogICAgZGVmIHNldHN0YXRlKHNlbGYsIHN0YXRlKToKICAgICAgICAiIiJSZXN0b3JlIGludGVybmFsIHN0YXRlIGZyb20gb2JqZWN0IHJldHVybmVkIGJ5IGdldHN0YXRlKCkuIiIiCiAgICAgICAgc2VsZi5fc3RhdGU9c3RhdGUKCiAgICBkZWYgcmFuZG9tKHNlbGYpOgogICAgICAgICIiIkdldCB0aGUgbmV4dCByYW5kb20gbnVtYmVyIGluIHRoZSByYW5nZSBbMC4wLCAxLjApLiIiIgogICAgICAgIHJldHVybiBfb3MucmFuZG9tKCkKCiAgICBkZWYgZ2V0cmFuZGJpdHMoc2VsZiwgayk6CiAgICAgICAgIiIiZ2V0cmFuZGJpdHMoaykgLT4geC4gIEdlbmVyYXRlcyBhIGxvbmcgaW50IHdpdGggayByYW5kb20gYml0cy4iIiIKICAgICAgICBpZiBrIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ251bWJlciBvZiBiaXRzIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKQogICAgICAgIGlmIGsgIT0gaW50KGspOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ251bWJlciBvZiBiaXRzIHNob3VsZCBiZSBhbiBpbnRlZ2VyJykKICAgICAgICBudW1ieXRlcyA9IChrICsgNykgLy8gOCAgICAgICAgICAgICAgICAgICAgICAgIyBiaXRzIC8gOCBhbmQgcm91bmRlZCB1cAogICAgICAgIHggPSBpbnQuZnJvbV9ieXRlcyhfdXJhbmRvbShudW1ieXRlcyksICdiaWcnKQogICAgICAgIHJldHVybiB4ID4+IChudW1ieXRlcyAqIDggLSBrKSAgICAgICAgICAgICAgICAjIHRyaW0gZXhjZXNzIGJpdHMK',
'/Lib/bisect.py':'IiIiQmlzZWN0aW9uIGFsZ29yaXRobXMuIiIiCgpkZWYgaW5zb3J0X3JpZ2h0KGEsIHgsIGxvPTAsIGhpPU5vbmUpOgogICAgIiIiSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBJZiB4IGlzIGFscmVhZHkgaW4gYSwgaW5zZXJ0IGl0IHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgeCA8IGFbbWlkXTogaGkgPSBtaWQKICAgICAgICBlbHNlOiBsbyA9IG1pZCsxCiAgICBhLmluc2VydChsbywgeCkKCmluc29ydCA9IGluc29ydF9yaWdodCAgICMgYmFja3dhcmQgY29tcGF0aWJpbGl0eQoKZGVmIGJpc2VjdF9yaWdodChhLCB4LCBsbz0wLCBoaT1Ob25lKToKICAgICIiIlJldHVybiB0aGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIFRoZSByZXR1cm4gdmFsdWUgaSBpcyBzdWNoIHRoYXQgYWxsIGUgaW4gYVs6aV0gaGF2ZSBlIDw9IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID4geC4gIFNvIGlmIHggYWxyZWFkeSBhcHBlYXJzIGluIHRoZSBsaXN0LCBhLmluc2VydCh4KSB3aWxsCiAgICBpbnNlcnQganVzdCBhZnRlciB0aGUgcmlnaHRtb3N0IHggYWxyZWFkeSB0aGVyZS4KCiAgICBPcHRpb25hbCBhcmdzIGxvIChkZWZhdWx0IDApIGFuZCBoaSAoZGVmYXVsdCBsZW4oYSkpIGJvdW5kIHRoZQogICAgc2xpY2Ugb2YgYSB0byBiZSBzZWFyY2hlZC4KICAgICIiIgoKICAgIGlmIGxvIDwgMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpCiAgICBpZiBoaSBpcyBOb25lOgogICAgICAgIGhpID0gbGVuKGEpCiAgICB3aGlsZSBsbyA8IGhpOgogICAgICAgIG1pZCA9IChsbytoaSkvLzIKICAgICAgICBpZiB4IDwgYVttaWRdOiBoaSA9IG1pZAogICAgICAgIGVsc2U6IGxvID0gbWlkKzEKICAgIHJldHVybiBsbwoKYmlzZWN0ID0gYmlzZWN0X3JpZ2h0ICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CgpkZWYgaW5zb3J0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJJbnNlcnQgaXRlbSB4IGluIGxpc3QgYSwgYW5kIGtlZXAgaXQgc29ydGVkIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIGxlZnQgb2YgdGhlIGxlZnRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICBhLmluc2VydChsbywgeCkKCgpkZWYgYmlzZWN0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJSZXR1cm4gdGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBUaGUgcmV0dXJuIHZhbHVlIGkgaXMgc3VjaCB0aGF0IGFsbCBlIGluIGFbOmldIGhhdmUgZSA8IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID49IHguICBTbyBpZiB4IGFscmVhZHkgYXBwZWFycyBpbiB0aGUgbGlzdCwgYS5pbnNlcnQoeCkgd2lsbAogICAgaW5zZXJ0IGp1c3QgYmVmb3JlIHRoZSBsZWZ0bW9zdCB4IGFscmVhZHkgdGhlcmUuCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICByZXR1cm4gbG8KCiMgZG9udCcgbmVlZCB0aGlzIGZvciBicnl0aG9uCiMgT3ZlcndyaXRlIGFib3ZlIGRlZmluaXRpb25zIHdpdGggYSBmYXN0IEMgaW1wbGVtZW50YXRpb24KI3RyeToKIyAgICBmcm9tIF9iaXNlY3QgaW1wb3J0ICoKI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgICBwYXNzCg==',
'/Lib/collections.py':'I19fYWxsX18gPSBbJ2RlcXVlJywgJ2RlZmF1bHRkaWN0JywgJ0NvdW50ZXInXQoKI2Zyb20gX2NvbGxlY3Rpb25zIGltcG9ydCBkZXF1ZSwgZGVmYXVsdGRpY3QKCiNmcm9tIGl0ZXJ0b29scyBpbXBvcnQgcmVwZWF0IGFzIF9yZXBlYXQsIGNoYWluIGFzIF9jaGFpbiwgc3Rhcm1hcCBhcyBfc3Rhcm1hcAoKX19hbGxfXyA9IFsnZGVxdWUnLCAnZGVmYXVsdGRpY3QnLCAnbmFtZWR0dXBsZScsICdVc2VyRGljdCcsICdVc2VyTGlzdCcsCiAgICAgICAgICAgICdVc2VyU3RyaW5nJywgJ0NvdW50ZXInLCAnT3JkZXJlZERpY3QnXQojIEZvciBib290c3RyYXBwaW5nIHJlYXNvbnMsIHRoZSBjb2xsZWN0aW9uIEFCQ3MgYXJlIGRlZmluZWQgaW4gX2FiY29sbC5weS4KIyBUaGV5IHNob3VsZCBob3dldmVyIGJlIGNvbnNpZGVyZWQgYW4gaW50ZWdyYWwgcGFydCBvZiBjb2xsZWN0aW9ucy5weS4KCiMgZml4bWUgYnJ5dGhvbi4uIHRoZXJlIGlzIGFuIGlzc3VlIHdpdGggX2FiY29sbAojZnJvbSBfYWJjb2xsIGltcG9ydCAqCiNmcm9tIF9hYmNvbGwgaW1wb3J0IFNldApmcm9tIF9hYmNvbGwgaW1wb3J0IE11dGFibGVNYXBwaW5nCiNpbXBvcnQgX2FiY29sbAojX19hbGxfXyArPSBfYWJjb2xsLl9fYWxsX18KCmZyb20gX2NvbGxlY3Rpb25zIGltcG9ydCBkZXF1ZSwgZGVmYXVsdGRpY3QKI2ZpeG1lLCBicnl0aG9uLiAgVGhpcyBjYXVzZXMgYSBSZWZlcmVuY2VFcnJvcjogaXRlbWdldHRlciBpcyBub3QgZGVmaW5lZAojZnJvbSBvcGVyYXRvciBpbXBvcnQgaXRlbWdldHRlciBhcyBfaXRlbWdldHRlcgpmcm9tIGtleXdvcmQgaW1wb3J0IGlza2V5d29yZCBhcyBfaXNrZXl3b3JkCmltcG9ydCBzeXMgYXMgX3N5cwppbXBvcnQgaGVhcHEgYXMgX2hlYXBxCiNmaXhtZSBicnl0aG9uCiNmcm9tIHdlYWtyZWYgaW1wb3J0IHByb3h5IGFzIF9wcm94eQpmcm9tIGl0ZXJ0b29scyBpbXBvcnQgcmVwZWF0IGFzIF9yZXBlYXQsIGNoYWluIGFzIF9jaGFpbiwgc3Rhcm1hcCBhcyBfc3Rhcm1hcAojZml4bWUgYnJ5dGhvbiAKI2Zyb20gcmVwcmxpYiBpbXBvcnQgcmVjdXJzaXZlX3JlcHIgYXMgX3JlY3Vyc2l2ZV9yZXByCgpjbGFzcyBTZXQoc2V0KToKICAgIHBhc3MKCmNsYXNzIFNlcXVlbmNlKGxpc3QpOgogICAgcGFzcwoKZGVmIF9wcm94eShvYmopOgogICAgcmV0dXJuIG9iagoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIE9yZGVyZWREaWN0CiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpjbGFzcyBfTGluayhvYmplY3QpOgogICAgX19zbG90c19fID0gJ3ByZXYnLCAnbmV4dCcsICdrZXknLCAnX193ZWFrcmVmX18nCgpjbGFzcyBPcmRlcmVkRGljdChkaWN0KToKICAgICdEaWN0aW9uYXJ5IHRoYXQgcmVtZW1iZXJzIGluc2VydGlvbiBvcmRlcicKICAgICMgQW4gaW5oZXJpdGVkIGRpY3QgbWFwcyBrZXlzIHRvIHZhbHVlcy4KICAgICMgVGhlIGluaGVyaXRlZCBkaWN0IHByb3ZpZGVzIF9fZ2V0aXRlbV9fLCBfX2xlbl9fLCBfX2NvbnRhaW5zX18sIGFuZCBnZXQuCiAgICAjIFRoZSByZW1haW5pbmcgbWV0aG9kcyBhcmUgb3JkZXItYXdhcmUuCiAgICAjIEJpZy1PIHJ1bm5pbmcgdGltZXMgZm9yIGFsbCBtZXRob2RzIGFyZSB0aGUgc2FtZSBhcyByZWd1bGFyIGRpY3Rpb25hcmllcy4KCiAgICAjIFRoZSBpbnRlcm5hbCBzZWxmLl9fbWFwIGRpY3QgbWFwcyBrZXlzIHRvIGxpbmtzIGluIGEgZG91Ymx5IGxpbmtlZCBsaXN0LgogICAgIyBUaGUgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0IHN0YXJ0cyBhbmQgZW5kcyB3aXRoIGEgc2VudGluZWwgZWxlbWVudC4KICAgICMgVGhlIHNlbnRpbmVsIGVsZW1lbnQgbmV2ZXIgZ2V0cyBkZWxldGVkICh0aGlzIHNpbXBsaWZpZXMgdGhlIGFsZ29yaXRobSkuCiAgICAjIFRoZSBzZW50aW5lbCBpcyBpbiBzZWxmLl9faGFyZHJvb3Qgd2l0aCBhIHdlYWtyZWYgcHJveHkgaW4gc2VsZi5fX3Jvb3QuCiAgICAjIFRoZSBwcmV2IGxpbmtzIGFyZSB3ZWFrcmVmIHByb3hpZXMgKHRvIHByZXZlbnQgY2lyY3VsYXIgcmVmZXJlbmNlcykuCiAgICAjIEluZGl2aWR1YWwgbGlua3MgYXJlIGtlcHQgYWxpdmUgYnkgdGhlIGhhcmQgcmVmZXJlbmNlIGluIHNlbGYuX19tYXAuCiAgICAjIFRob3NlIGhhcmQgcmVmZXJlbmNlcyBkaXNhcHBlYXIgd2hlbiBhIGtleSBpcyBkZWxldGVkIGZyb20gYW4gT3JkZXJlZERpY3QuCgogICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCAqKmt3ZHMpOgogICAgICAgICcnJ0luaXRpYWxpemUgYW4gb3JkZXJlZCBkaWN0aW9uYXJ5LiAgVGhlIHNpZ25hdHVyZSBpcyB0aGUgc2FtZSBhcwogICAgICAgIHJlZ3VsYXIgZGljdGlvbmFyaWVzLCBidXQga2V5d29yZCBhcmd1bWVudHMgYXJlIG5vdCByZWNvbW1lbmRlZCBiZWNhdXNlCiAgICAgICAgdGhlaXIgaW5zZXJ0aW9uIG9yZGVyIGlzIGFyYml0cmFyeS4KCiAgICAgICAgJycnCiAgICAgICAgaWYgbGVuKGFyZ3MpID4gMToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdleHBlY3RlZCBhdCBtb3N0IDEgYXJndW1lbnRzLCBnb3QgJWQnICUgbGVuKGFyZ3MpKQogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5fX3Jvb3QKICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgIHNlbGYuX19oYXJkcm9vdCA9IF9MaW5rKCkKICAgICAgICAgICAgc2VsZi5fX3Jvb3QgPSByb290ID0gX3Byb3h5KHNlbGYuX19oYXJkcm9vdCkKICAgICAgICAgICAgcm9vdC5wcmV2ID0gcm9vdC5uZXh0ID0gcm9vdAogICAgICAgICAgICBzZWxmLl9fbWFwID0ge30KICAgICAgICBzZWxmLl9fdXBkYXRlKCphcmdzLCAqKmt3ZHMpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsIGtleSwgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgZGljdF9zZXRpdGVtPWRpY3QuX19zZXRpdGVtX18sIHByb3h5PV9wcm94eSwgTGluaz1fTGluayk6CiAgICAgICAgJ29kLl9fc2V0aXRlbV9fKGksIHkpIDw9PT4gb2RbaV09eScKICAgICAgICAjIFNldHRpbmcgYSBuZXcgaXRlbSBjcmVhdGVzIGEgbmV3IGxpbmsgYXQgdGhlIGVuZCBvZiB0aGUgbGlua2VkIGxpc3QsCiAgICAgICAgIyBhbmQgdGhlIGluaGVyaXRlZCBkaWN0aW9uYXJ5IGlzIHVwZGF0ZWQgd2l0aCB0aGUgbmV3IGtleS92YWx1ZSBwYWlyLgogICAgICAgIGlmIGtleSBub3QgaW4gc2VsZjoKICAgICAgICAgICAgc2VsZi5fX21hcFtrZXldID0gbGluayA9IExpbmsoKQogICAgICAgICAgICByb290ID0gc2VsZi5fX3Jvb3QKICAgICAgICAgICAgbGFzdCA9IHJvb3QucHJldgogICAgICAgICAgICBsaW5rLnByZXYsIGxpbmsubmV4dCwgbGluay5rZXkgPSBsYXN0LCByb290LCBrZXkKICAgICAgICAgICAgbGFzdC5uZXh0ID0gbGluawogICAgICAgICAgICByb290LnByZXYgPSBwcm94eShsaW5rKQogICAgICAgIGRpY3Rfc2V0aXRlbShzZWxmLCBrZXksIHZhbHVlKQoKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXksIGRpY3RfZGVsaXRlbT1kaWN0Ll9fZGVsaXRlbV9fKToKICAgICAgICAnb2QuX19kZWxpdGVtX18oeSkgPD09PiBkZWwgb2RbeV0nCiAgICAgICAgIyBEZWxldGluZyBhbiBleGlzdGluZyBpdGVtIHVzZXMgc2VsZi5fX21hcCB0byBmaW5kIHRoZSBsaW5rIHdoaWNoIGdldHMKICAgICAgICAjIHJlbW92ZWQgYnkgdXBkYXRpbmcgdGhlIGxpbmtzIGluIHRoZSBwcmVkZWNlc3NvciBhbmQgc3VjY2Vzc29yIG5vZGVzLgogICAgICAgIGRpY3RfZGVsaXRlbShzZWxmLCBrZXkpCiAgICAgICAgbGluayA9IHNlbGYuX19tYXAucG9wKGtleSkKICAgICAgICBsaW5rX3ByZXYgPSBsaW5rLnByZXYKICAgICAgICBsaW5rX25leHQgPSBsaW5rLm5leHQKICAgICAgICBsaW5rX3ByZXYubmV4dCA9IGxpbmtfbmV4dAogICAgICAgIGxpbmtfbmV4dC5wcmV2ID0gbGlua19wcmV2CgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgICdvZC5fX2l0ZXJfXygpIDw9PT4gaXRlcihvZCknCiAgICAgICAgIyBUcmF2ZXJzZSB0aGUgbGlua2VkIGxpc3QgaW4gb3JkZXIuCiAgICAgICAgcm9vdCA9IHNlbGYuX19yb290CiAgICAgICAgY3VyciA9IHJvb3QubmV4dAogICAgICAgIHdoaWxlIGN1cnIgaXMgbm90IHJvb3Q6CiAgICAgICAgICAgIHlpZWxkIGN1cnIua2V5CiAgICAgICAgICAgIGN1cnIgPSBjdXJyLm5leHQKCiAgICBkZWYgX19yZXZlcnNlZF9fKHNlbGYpOgogICAgICAgICdvZC5fX3JldmVyc2VkX18oKSA8PT0+IHJldmVyc2VkKG9kKScKICAgICAgICAjIFRyYXZlcnNlIHRoZSBsaW5rZWQgbGlzdCBpbiByZXZlcnNlIG9yZGVyLgogICAgICAgIHJvb3QgPSBzZWxmLl9fcm9vdAogICAgICAgIGN1cnIgPSByb290LnByZXYKICAgICAgICB3aGlsZSBjdXJyIGlzIG5vdCByb290OgogICAgICAgICAgICB5aWVsZCBjdXJyLmtleQogICAgICAgICAgICBjdXJyID0gY3Vyci5wcmV2CgogICAgZGVmIGNsZWFyKHNlbGYpOgogICAgICAgICdvZC5jbGVhcigpIC0+IE5vbmUuICBSZW1vdmUgYWxsIGl0ZW1zIGZyb20gb2QuJwogICAgICAgIHJvb3QgPSBzZWxmLl9fcm9vdAogICAgICAgIHJvb3QucHJldiA9IHJvb3QubmV4dCA9IHJvb3QKICAgICAgICBzZWxmLl9fbWFwLmNsZWFyKCkKICAgICAgICBkaWN0LmNsZWFyKHNlbGYpCgogICAgZGVmIHBvcGl0ZW0oc2VsZiwgbGFzdD1UcnVlKToKICAgICAgICAnJydvZC5wb3BpdGVtKCkgLT4gKGssIHYpLCByZXR1cm4gYW5kIHJlbW92ZSBhIChrZXksIHZhbHVlKSBwYWlyLgogICAgICAgIFBhaXJzIGFyZSByZXR1cm5lZCBpbiBMSUZPIG9yZGVyIGlmIGxhc3QgaXMgdHJ1ZSBvciBGSUZPIG9yZGVyIGlmIGZhbHNlLgoKICAgICAgICAnJycKICAgICAgICBpZiBub3Qgc2VsZjoKICAgICAgICAgICAgcmFpc2UgS2V5RXJyb3IoJ2RpY3Rpb25hcnkgaXMgZW1wdHknKQogICAgICAgIHJvb3QgPSBzZWxmLl9fcm9vdAogICAgICAgIGlmIGxhc3Q6CiAgICAgICAgICAgIGxpbmsgPSByb290LnByZXYKICAgICAgICAgICAgbGlua19wcmV2ID0gbGluay5wcmV2CiAgICAgICAgICAgIGxpbmtfcHJldi5uZXh0ID0gcm9vdAogICAgICAgICAgICByb290LnByZXYgPSBsaW5rX3ByZXYKICAgICAgICBlbHNlOgogICAgICAgICAgICBsaW5rID0gcm9vdC5uZXh0CiAgICAgICAgICAgIGxpbmtfbmV4dCA9IGxpbmsubmV4dAogICAgICAgICAgICByb290Lm5leHQgPSBsaW5rX25leHQKICAgICAgICAgICAgbGlua19uZXh0LnByZXYgPSByb290CiAgICAgICAga2V5ID0gbGluay5rZXkKICAgICAgICBkZWwgc2VsZi5fX21hcFtrZXldCiAgICAgICAgdmFsdWUgPSBkaWN0LnBvcChzZWxmLCBrZXkpCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgbW92ZV90b19lbmQoc2VsZiwga2V5LCBsYXN0PVRydWUpOgogICAgICAgICcnJ01vdmUgYW4gZXhpc3RpbmcgZWxlbWVudCB0byB0aGUgZW5kIChvciBiZWdpbm5pbmcgaWYgbGFzdD09RmFsc2UpLgoKICAgICAgICBSYWlzZXMgS2V5RXJyb3IgaWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgZXhpc3QuCiAgICAgICAgV2hlbiBsYXN0PVRydWUsIGFjdHMgbGlrZSBhIGZhc3QgdmVyc2lvbiBvZiBzZWxmW2tleV09c2VsZi5wb3Aoa2V5KS4KCiAgICAgICAgJycnCiAgICAgICAgbGluayA9IHNlbGYuX19tYXBba2V5XQogICAgICAgIGxpbmtfcHJldiA9IGxpbmsucHJldgogICAgICAgIGxpbmtfbmV4dCA9IGxpbmsubmV4dAogICAgICAgIGxpbmtfcHJldi5uZXh0ID0gbGlua19uZXh0CiAgICAgICAgbGlua19uZXh0LnByZXYgPSBsaW5rX3ByZXYKICAgICAgICByb290ID0gc2VsZi5fX3Jvb3QKICAgICAgICBpZiBsYXN0OgogICAgICAgICAgICBsYXN0ID0gcm9vdC5wcmV2CiAgICAgICAgICAgIGxpbmsucHJldiA9IGxhc3QKICAgICAgICAgICAgbGluay5uZXh0ID0gcm9vdAogICAgICAgICAgICBsYXN0Lm5leHQgPSByb290LnByZXYgPSBsaW5rCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZmlyc3QgPSByb290Lm5leHQKICAgICAgICAgICAgbGluay5wcmV2ID0gcm9vdAogICAgICAgICAgICBsaW5rLm5leHQgPSBmaXJzdAogICAgICAgICAgICByb290Lm5leHQgPSBmaXJzdC5wcmV2ID0gbGluawoKICAgIGRlZiBfX3NpemVvZl9fKHNlbGYpOgogICAgICAgIHNpemVvZiA9IF9zeXMuZ2V0c2l6ZW9mCiAgICAgICAgbiA9IGxlbihzZWxmKSArIDEgICAgICAgICAgICAgICAgICAgICAgICMgbnVtYmVyIG9mIGxpbmtzIGluY2x1ZGluZyByb290CiAgICAgICAgc2l6ZSA9IHNpemVvZihzZWxmLl9fZGljdF9fKSAgICAgICAgICAgICMgaW5zdGFuY2UgZGljdGlvbmFyeQogICAgICAgIHNpemUgKz0gc2l6ZW9mKHNlbGYuX19tYXApICogMiAgICAgICAgICAjIGludGVybmFsIGRpY3QgYW5kIGluaGVyaXRlZCBkaWN0CiAgICAgICAgc2l6ZSArPSBzaXplb2Yoc2VsZi5fX2hhcmRyb290KSAqIG4gICAgICMgbGluayBvYmplY3RzCiAgICAgICAgc2l6ZSArPSBzaXplb2Yoc2VsZi5fX3Jvb3QpICogbiAgICAgICAgICMgcHJveHkgb2JqZWN0cwogICAgICAgIHJldHVybiBzaXplCgogICAgI2ZpeG1lIGJyeXRob24uLiAgSXNzdWUgd2l0aCBfYWJjb2xsLCB3aGljaCBjb250YWlucyBNdXRhYmxlTWFwcGluZwogICAgdXBkYXRlID0gX191cGRhdGUgPSBNdXRhYmxlTWFwcGluZy51cGRhdGUKICAgIGtleXMgPSBNdXRhYmxlTWFwcGluZy5rZXlzCiAgICB2YWx1ZXMgPSBNdXRhYmxlTWFwcGluZy52YWx1ZXMKICAgIGl0ZW1zID0gTXV0YWJsZU1hcHBpbmcuaXRlbXMKICAgIF9fbmVfXyA9IE11dGFibGVNYXBwaW5nLl9fbmVfXwoKICAgIF9fbWFya2VyID0gb2JqZWN0KCkKCiAgICBkZWYgcG9wKHNlbGYsIGtleSwgZGVmYXVsdD1fX21hcmtlcik6CiAgICAgICAgJycnb2QucG9wKGtbLGRdKSAtPiB2LCByZW1vdmUgc3BlY2lmaWVkIGtleSBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nCiAgICAgICAgdmFsdWUuICBJZiBrZXkgaXMgbm90IGZvdW5kLCBkIGlzIHJldHVybmVkIGlmIGdpdmVuLCBvdGhlcndpc2UgS2V5RXJyb3IKICAgICAgICBpcyByYWlzZWQuCgogICAgICAgICcnJwogICAgICAgIGlmIGtleSBpbiBzZWxmOgogICAgICAgICAgICByZXN1bHQgPSBzZWxmW2tleV0KICAgICAgICAgICAgZGVsIHNlbGZba2V5XQogICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgaWYgZGVmYXVsdCBpcyBzZWxmLl9fbWFya2VyOgogICAgICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgJ29kLnNldGRlZmF1bHQoa1ssZF0pIC0+IG9kLmdldChrLGQpLCBhbHNvIHNldCBvZFtrXT1kIGlmIGsgbm90IGluIG9kJwogICAgICAgIGlmIGtleSBpbiBzZWxmOgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgc2VsZltrZXldID0gZGVmYXVsdAogICAgICAgIHJldHVybiBkZWZhdWx0CgogICAgI2ZpeG1lLCBicnl0aG9uIGlzc3VlCiAgICAjQF9yZWN1cnNpdmVfcmVwcigpCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgJ29kLl9fcmVwcl9fKCkgPD09PiByZXByKG9kKScKICAgICAgICBpZiBub3Qgc2VsZjoKICAgICAgICAgICAgcmV0dXJuICclcygpJyAlIChzZWxmLl9fY2xhc3NfXy5fX25hbWVfXywpCiAgICAgICAgcmV0dXJuICclcyglciknICUgKHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBsaXN0KHNlbGYuaXRlbXMoKSkpCgogICAgZGVmIF9fcmVkdWNlX18oc2VsZik6CiAgICAgICAgJ1JldHVybiBzdGF0ZSBpbmZvcm1hdGlvbiBmb3IgcGlja2xpbmcnCiAgICAgICAgaXRlbXMgPSBbW2ssIHNlbGZba11dIGZvciBrIGluIHNlbGZdCiAgICAgICAgaW5zdF9kaWN0ID0gdmFycyhzZWxmKS5jb3B5KCkKICAgICAgICBmb3IgayBpbiB2YXJzKE9yZGVyZWREaWN0KCkpOgogICAgICAgICAgICBpbnN0X2RpY3QucG9wKGssIE5vbmUpCiAgICAgICAgaWYgaW5zdF9kaWN0OgogICAgICAgICAgICByZXR1cm4gKHNlbGYuX19jbGFzc19fLCAoaXRlbXMsKSwgaW5zdF9kaWN0KQogICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXywgKGl0ZW1zLCkKCiAgICBkZWYgY29weShzZWxmKToKICAgICAgICAnb2QuY29weSgpIC0+IGEgc2hhbGxvdyBjb3B5IG9mIG9kJwogICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21rZXlzKGNscywgaXRlcmFibGUsIHZhbHVlPU5vbmUpOgogICAgICAgICcnJ09ELmZyb21rZXlzKFNbLCB2XSkgLT4gTmV3IG9yZGVyZWQgZGljdGlvbmFyeSB3aXRoIGtleXMgZnJvbSBTLgogICAgICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB2YWx1ZSBkZWZhdWx0cyB0byBOb25lLgoKICAgICAgICAnJycKICAgICAgICBzZWxmID0gY2xzKCkKICAgICAgICBmb3Iga2V5IGluIGl0ZXJhYmxlOgogICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fZXFfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgJycnb2QuX19lcV9fKHkpIDw9PT4gb2Q9PXkuICBDb21wYXJpc29uIHRvIGFub3RoZXIgT0QgaXMgb3JkZXItc2Vuc2l0aXZlCiAgICAgICAgd2hpbGUgY29tcGFyaXNvbiB0byBhIHJlZ3VsYXIgbWFwcGluZyBpcyBvcmRlci1pbnNlbnNpdGl2ZS4KCiAgICAgICAgJycnCiAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgT3JkZXJlZERpY3QpOgogICAgICAgICAgICByZXR1cm4gbGVuKHNlbGYpPT1sZW4ob3RoZXIpIGFuZCBcCiAgICAgICAgICAgICAgICAgICBhbGwocD09cSBmb3IgcCwgcSBpbiB6aXAoc2VsZi5pdGVtcygpLCBvdGhlci5pdGVtcygpKSkKICAgICAgICByZXR1cm4gZGljdC5fX2VxX18oc2VsZiwgb3RoZXIpCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyAgQ291bnRlcgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCgpkZWYgX2NvdW50X2VsZW1lbnRzKG1hcHBpbmcsIGl0ZXJhYmxlKToKICAgICdUYWxseSBlbGVtZW50cyBmcm9tIHRoZSBpdGVyYWJsZS4nCiAgICBtYXBwaW5nX2dldCA9IG1hcHBpbmcuZ2V0CiAgICBmb3IgZWxlbSBpbiBpdGVyYWJsZToKICAgICAgICBtYXBwaW5nW2VsZW1dID0gbWFwcGluZ19nZXQoZWxlbSwgMCkgKyAxCgojdHJ5OiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTG9hZCBDIGhlbHBlciBmdW5jdGlvbiBpZiBhdmFpbGFibGUKIyAgICBmcm9tIF9jb2xsZWN0aW9ucyBpbXBvcnQgX2NvdW50X2VsZW1lbnRzCiNleGNlcHQgSW1wb3J0RXJyb3I6CiMgICAgcGFzcwoKY2xhc3MgQ291bnRlcihkaWN0KToKICAgICcnJ0RpY3Qgc3ViY2xhc3MgZm9yIGNvdW50aW5nIGhhc2hhYmxlIGl0ZW1zLiAgU29tZXRpbWVzIGNhbGxlZCBhIGJhZwogICAgb3IgbXVsdGlzZXQuICBFbGVtZW50cyBhcmUgc3RvcmVkIGFzIGRpY3Rpb25hcnkga2V5cyBhbmQgdGhlaXIgY291bnRzCiAgICBhcmUgc3RvcmVkIGFzIGRpY3Rpb25hcnkgdmFsdWVzLgoKICAgID4+PiBjID0gQ291bnRlcignYWJjZGVhYmNkYWJjYWJhJykgICMgY291bnQgZWxlbWVudHMgZnJvbSBhIHN0cmluZwoKICAgID4+PiBjLm1vc3RfY29tbW9uKDMpICAgICAgICAgICAgICAgICMgdGhyZWUgbW9zdCBjb21tb24gZWxlbWVudHMKICAgIFsoJ2EnLCA1KSwgKCdiJywgNCksICgnYycsIDMpXQogICAgPj4+IHNvcnRlZChjKSAgICAgICAgICAgICAgICAgICAgICAgIyBsaXN0IGFsbCB1bmlxdWUgZWxlbWVudHMKICAgIFsnYScsICdiJywgJ2MnLCAnZCcsICdlJ10KICAgID4+PiAnJy5qb2luKHNvcnRlZChjLmVsZW1lbnRzKCkpKSAgICMgbGlzdCBlbGVtZW50cyB3aXRoIHJlcGV0aXRpb25zCiAgICAnYWFhYWFiYmJiY2NjZGRlJwogICAgPj4+IHN1bShjLnZhbHVlcygpKSAgICAgICAgICAgICAgICAgIyB0b3RhbCBvZiBhbGwgY291bnRzCiAgICAxNQoKICAgID4+PiBjWydhJ10gICAgICAgICAgICAgICAgICAgICAgICAgICMgY291bnQgb2YgbGV0dGVyICdhJwogICAgNQogICAgPj4+IGZvciBlbGVtIGluICdzaGF6YW0nOiAgICAgICAgICAgIyB1cGRhdGUgY291bnRzIGZyb20gYW4gaXRlcmFibGUKICAgIC4uLiAgICAgY1tlbGVtXSArPSAxICAgICAgICAgICAgICAgICMgYnkgYWRkaW5nIDEgdG8gZWFjaCBlbGVtZW50J3MgY291bnQKICAgID4+PiBjWydhJ10gICAgICAgICAgICAgICAgICAgICAgICAgICMgbm93IHRoZXJlIGFyZSBzZXZlbiAnYScKICAgIDcKICAgID4+PiBkZWwgY1snYiddICAgICAgICAgICAgICAgICAgICAgICMgcmVtb3ZlIGFsbCAnYicKICAgID4+PiBjWydiJ10gICAgICAgICAgICAgICAgICAgICAgICAgICMgbm93IHRoZXJlIGFyZSB6ZXJvICdiJwogICAgMAoKICAgID4+PiBkID0gQ291bnRlcignc2ltc2FsYWJpbScpICAgICAgICMgbWFrZSBhbm90aGVyIGNvdW50ZXIKICAgID4+PiBjLnVwZGF0ZShkKSAgICAgICAgICAgICAgICAgICAgICMgYWRkIGluIHRoZSBzZWNvbmQgY291bnRlcgogICAgPj4+IGNbJ2EnXSAgICAgICAgICAgICAgICAgICAgICAgICAgIyBub3cgdGhlcmUgYXJlIG5pbmUgJ2EnCiAgICA5CgogICAgPj4+IGMuY2xlYXIoKSAgICAgICAgICAgICAgICAgICAgICAgIyBlbXB0eSB0aGUgY291bnRlcgogICAgPj4+IGMKICAgIENvdW50ZXIoKQoKICAgIE5vdGU6ICBJZiBhIGNvdW50IGlzIHNldCB0byB6ZXJvIG9yIHJlZHVjZWQgdG8gemVybywgaXQgd2lsbCByZW1haW4KICAgIGluIHRoZSBjb3VudGVyIHVudGlsIHRoZSBlbnRyeSBpcyBkZWxldGVkIG9yIHRoZSBjb3VudGVyIGlzIGNsZWFyZWQ6CgogICAgPj4+IGMgPSBDb3VudGVyKCdhYWFiYmMnKQogICAgPj4+IGNbJ2InXSAtPSAyICAgICAgICAgICAgICAgICAgICAgIyByZWR1Y2UgdGhlIGNvdW50IG9mICdiJyBieSB0d28KICAgID4+PiBjLm1vc3RfY29tbW9uKCkgICAgICAgICAgICAgICAgICMgJ2InIGlzIHN0aWxsIGluLCBidXQgaXRzIGNvdW50IGlzIHplcm8KICAgIFsoJ2EnLCAzKSwgKCdjJywgMSksICgnYicsIDApXQoKICAgICcnJwogICAgIyBSZWZlcmVuY2VzOgogICAgIyAgIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTXVsdGlzZXQKICAgICMgICBodHRwOi8vd3d3LmdudS5vcmcvc29mdHdhcmUvc21hbGx0YWxrL21hbnVhbC1iYXNlL2h0bWxfbm9kZS9CYWcuaHRtbAogICAgIyAgIGh0dHA6Ly93d3cuZGVtbzJzLmNvbS9UdXRvcmlhbC9DcHAvMDM4MF9fc2V0LW11bHRpc2V0L0NhdGFsb2cwMzgwX19zZXQtbXVsdGlzZXQuaHRtCiAgICAjICAgaHR0cDovL2NvZGUuYWN0aXZlc3RhdGUuY29tL3JlY2lwZXMvMjU5MTc0LwogICAgIyAgIEtudXRoLCBUQU9DUCBWb2wuIElJIHNlY3Rpb24gNC42LjMKCiAgICBkZWYgX19pbml0X18oc2VsZiwgaXRlcmFibGU9Tm9uZSwgKiprd2RzKToKICAgICAgICAnJydDcmVhdGUgYSBuZXcsIGVtcHR5IENvdW50ZXIgb2JqZWN0LiAgQW5kIGlmIGdpdmVuLCBjb3VudCBlbGVtZW50cwogICAgICAgIGZyb20gYW4gaW5wdXQgaXRlcmFibGUuICBPciwgaW5pdGlhbGl6ZSB0aGUgY291bnQgZnJvbSBhbm90aGVyIG1hcHBpbmcKICAgICAgICBvZiBlbGVtZW50cyB0byB0aGVpciBjb3VudHMuCgogICAgICAgID4+PiBjID0gQ291bnRlcigpICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBhIG5ldywgZW1wdHkgY291bnRlcgogICAgICAgID4+PiBjID0gQ291bnRlcignZ2FsbGFoYWQnKSAgICAgICAgICAgICAgICAgIyBhIG5ldyBjb3VudGVyIGZyb20gYW4gaXRlcmFibGUKICAgICAgICA+Pj4gYyA9IENvdW50ZXIoeydhJzogNCwgJ2InOiAyfSkgICAgICAgICAgICMgYSBuZXcgY291bnRlciBmcm9tIGEgbWFwcGluZwogICAgICAgID4+PiBjID0gQ291bnRlcihhPTQsIGI9MikgICAgICAgICAgICAgICAgICAgIyBhIG5ldyBjb3VudGVyIGZyb20ga2V5d29yZCBhcmdzCgogICAgICAgICcnJwogICAgICAgICNzdXBlcigpLl9faW5pdF9fKCkgICNCRSBtb2RpZmllZCBzaW5jZSBzdXBlciBub3Qgc3VwcG9ydGVkCiAgICAgICAgZGljdC5fX2luaXRfXyhzZWxmKQogICAgICAgIHNlbGYudXBkYXRlKGl0ZXJhYmxlLCAqKmt3ZHMpCgogICAgZGVmIF9fbWlzc2luZ19fKHNlbGYsIGtleSk6CiAgICAgICAgJ1RoZSBjb3VudCBvZiBlbGVtZW50cyBub3QgaW4gdGhlIENvdW50ZXIgaXMgemVyby4nCiAgICAgICAgIyBOZWVkZWQgc28gdGhhdCBzZWxmW21pc3NpbmdfaXRlbV0gZG9lcyBub3QgcmFpc2UgS2V5RXJyb3IKICAgICAgICByZXR1cm4gMAoKICAgIGRlZiBtb3N0X2NvbW1vbihzZWxmLCBuPU5vbmUpOgogICAgICAgICcnJ0xpc3QgdGhlIG4gbW9zdCBjb21tb24gZWxlbWVudHMgYW5kIHRoZWlyIGNvdW50cyBmcm9tIHRoZSBtb3N0CiAgICAgICAgY29tbW9uIHRvIHRoZSBsZWFzdC4gIElmIG4gaXMgTm9uZSwgdGhlbiBsaXN0IGFsbCBlbGVtZW50IGNvdW50cy4KCiAgICAgICAgPj4+IENvdW50ZXIoJ2FiY2RlYWJjZGFiY2FiYScpLm1vc3RfY29tbW9uKDMpCiAgICAgICAgWygnYScsIDUpLCAoJ2InLCA0KSwgKCdjJywgMyldCgogICAgICAgICcnJwogICAgICAgICMgRW11bGF0ZSBCYWcuc29ydGVkQnlDb3VudCBmcm9tIFNtYWxsdGFsawogICAgICAgIGlmIG4gaXMgTm9uZToKICAgICAgICAgICAgcmV0dXJuIHNvcnRlZChzZWxmLml0ZW1zKCksIGtleT1faXRlbWdldHRlcigxKSwgcmV2ZXJzZT1UcnVlKQogICAgICAgIHJldHVybiBfaGVhcHEubmxhcmdlc3Qobiwgc2VsZi5pdGVtcygpLCBrZXk9X2l0ZW1nZXR0ZXIoMSkpCgogICAgZGVmIGVsZW1lbnRzKHNlbGYpOgogICAgICAgICcnJ0l0ZXJhdG9yIG92ZXIgZWxlbWVudHMgcmVwZWF0aW5nIGVhY2ggYXMgbWFueSB0aW1lcyBhcyBpdHMgY291bnQuCgogICAgICAgID4+PiBjID0gQ291bnRlcignQUJDQUJDJykKICAgICAgICA+Pj4gc29ydGVkKGMuZWxlbWVudHMoKSkKICAgICAgICBbJ0EnLCAnQScsICdCJywgJ0InLCAnQycsICdDJ10KCiAgICAgICAgIyBLbnV0aCdzIGV4YW1wbGUgZm9yIHByaW1lIGZhY3RvcnMgb2YgMTgzNjogIDIqKjIgKiAzKiozICogMTcqKjEKICAgICAgICA+Pj4gcHJpbWVfZmFjdG9ycyA9IENvdW50ZXIoezI6IDIsIDM6IDMsIDE3OiAxfSkKICAgICAgICA+Pj4gcHJvZHVjdCA9IDEKICAgICAgICA+Pj4gZm9yIGZhY3RvciBpbiBwcmltZV9mYWN0b3JzLmVsZW1lbnRzKCk6ICAgICAjIGxvb3Agb3ZlciBmYWN0b3JzCiAgICAgICAgLi4uICAgICBwcm9kdWN0ICo9IGZhY3RvciAgICAgICAgICAgICAgICAgICAgICAgIyBhbmQgbXVsdGlwbHkgdGhlbQogICAgICAgID4+PiBwcm9kdWN0CiAgICAgICAgMTgzNgoKICAgICAgICBOb3RlLCBpZiBhbiBlbGVtZW50J3MgY291bnQgaGFzIGJlZW4gc2V0IHRvIHplcm8gb3IgaXMgYSBuZWdhdGl2ZQogICAgICAgIG51bWJlciwgZWxlbWVudHMoKSB3aWxsIGlnbm9yZSBpdC4KCiAgICAgICAgJycnCiAgICAgICAgIyBFbXVsYXRlIEJhZy5kbyBmcm9tIFNtYWxsdGFsayBhbmQgTXVsdGlzZXQuYmVnaW4gZnJvbSBDKysuCiAgICAgICAgcmV0dXJuIF9jaGFpbi5mcm9tX2l0ZXJhYmxlKF9zdGFybWFwKF9yZXBlYXQsIHNlbGYuaXRlbXMoKSkpCgogICAgIyBPdmVycmlkZSBkaWN0IG1ldGhvZHMgd2hlcmUgbmVjZXNzYXJ5CgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbWtleXMoY2xzLCBpdGVyYWJsZSwgdj1Ob25lKToKICAgICAgICAjIFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgbWV0aG9kIGZvciBjb3VudGVycyBiZWNhdXNlIHNldHRpbmcgdj0xCiAgICAgICAgIyBtZWFucyB0aGF0IG5vIGVsZW1lbnQgY2FuIGhhdmUgYSBjb3VudCBncmVhdGVyIHRoYW4gb25lLgogICAgICAgIHJhaXNlIE5vdEltcGxlbWVudGVkRXJyb3IoCiAgICAgICAgICAgICdDb3VudGVyLmZyb21rZXlzKCkgaXMgdW5kZWZpbmVkLiAgVXNlIENvdW50ZXIoaXRlcmFibGUpIGluc3RlYWQuJykKCiAgICBkZWYgdXBkYXRlKHNlbGYsIGl0ZXJhYmxlPU5vbmUsICoqa3dkcyk6CiAgICAgICAgJycnTGlrZSBkaWN0LnVwZGF0ZSgpIGJ1dCBhZGQgY291bnRzIGluc3RlYWQgb2YgcmVwbGFjaW5nIHRoZW0uCgogICAgICAgIFNvdXJjZSBjYW4gYmUgYW4gaXRlcmFibGUsIGEgZGljdGlvbmFyeSwgb3IgYW5vdGhlciBDb3VudGVyIGluc3RhbmNlLgoKICAgICAgICA+Pj4gYyA9IENvdW50ZXIoJ3doaWNoJykKICAgICAgICA+Pj4gYy51cGRhdGUoJ3dpdGNoJykgICAgICAgICAgICMgYWRkIGVsZW1lbnRzIGZyb20gYW5vdGhlciBpdGVyYWJsZQogICAgICAgID4+PiBkID0gQ291bnRlcignd2F0Y2gnKQogICAgICAgID4+PiBjLnVwZGF0ZShkKSAgICAgICAgICAgICAgICAgIyBhZGQgZWxlbWVudHMgZnJvbSBhbm90aGVyIGNvdW50ZXIKICAgICAgICA+Pj4gY1snaCddICAgICAgICAgICAgICAgICAgICAgICMgZm91ciAnaCcgaW4gd2hpY2gsIHdpdGNoLCBhbmQgd2F0Y2gKICAgICAgICA0CgogICAgICAgICcnJwogICAgICAgICMgVGhlIHJlZ3VsYXIgZGljdC51cGRhdGUoKSBvcGVyYXRpb24gbWFrZXMgbm8gc2Vuc2UgaGVyZSBiZWNhdXNlIHRoZQogICAgICAgICMgcmVwbGFjZSBiZWhhdmlvciByZXN1bHRzIGluIHRoZSBzb21lIG9mIG9yaWdpbmFsIHVudG91Y2hlZCBjb3VudHMKICAgICAgICAjIGJlaW5nIG1peGVkLWluIHdpdGggYWxsIG9mIHRoZSBvdGhlciBjb3VudHMgZm9yIGEgbWlzbWFzaCB0aGF0CiAgICAgICAgIyBkb2Vzbid0IGhhdmUgYSBzdHJhaWdodC1mb3J3YXJkIGludGVycHJldGF0aW9uIGluIG1vc3QgY291bnRpbmcKICAgICAgICAjIGNvbnRleHRzLiAgSW5zdGVhZCwgd2UgaW1wbGVtZW50IHN0cmFpZ2h0LWFkZGl0aW9uLiAgQm90aCB0aGUgaW5wdXRzCiAgICAgICAgIyBhbmQgb3V0cHV0cyBhcmUgYWxsb3dlZCB0byBjb250YWluIHplcm8gYW5kIG5lZ2F0aXZlIGNvdW50cy4KCiAgICAgICAgaWYgaXRlcmFibGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoaXRlcmFibGUsIE1hcHBpbmcpOgogICAgICAgICAgICAgICAgaWYgc2VsZjoKICAgICAgICAgICAgICAgICAgICBzZWxmX2dldCA9IHNlbGYuZ2V0CiAgICAgICAgICAgICAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIGl0ZXJhYmxlLml0ZW1zKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGZbZWxlbV0gPSBjb3VudCArIHNlbGZfZ2V0KGVsZW0sIDApCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIHN1cGVyKCkudXBkYXRlKGl0ZXJhYmxlKSAjIGZhc3QgcGF0aCB3aGVuIGNvdW50ZXIgaXMgZW1wdHkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIF9jb3VudF9lbGVtZW50cyhzZWxmLCBpdGVyYWJsZSkKICAgICAgICBpZiBrd2RzOgogICAgICAgICAgICBzZWxmLnVwZGF0ZShrd2RzKQoKICAgIGRlZiBzdWJ0cmFjdChzZWxmLCBpdGVyYWJsZT1Ob25lLCAqKmt3ZHMpOgogICAgICAgICcnJ0xpa2UgZGljdC51cGRhdGUoKSBidXQgc3VidHJhY3RzIGNvdW50cyBpbnN0ZWFkIG9mIHJlcGxhY2luZyB0aGVtLgogICAgICAgIENvdW50cyBjYW4gYmUgcmVkdWNlZCBiZWxvdyB6ZXJvLiAgQm90aCB0aGUgaW5wdXRzIGFuZCBvdXRwdXRzIGFyZQogICAgICAgIGFsbG93ZWQgdG8gY29udGFpbiB6ZXJvIGFuZCBuZWdhdGl2ZSBjb3VudHMuCgogICAgICAgIFNvdXJjZSBjYW4gYmUgYW4gaXRlcmFibGUsIGEgZGljdGlvbmFyeSwgb3IgYW5vdGhlciBDb3VudGVyIGluc3RhbmNlLgoKICAgICAgICA+Pj4gYyA9IENvdW50ZXIoJ3doaWNoJykKICAgICAgICA+Pj4gYy5zdWJ0cmFjdCgnd2l0Y2gnKSAgICAgICAgICAgICAjIHN1YnRyYWN0IGVsZW1lbnRzIGZyb20gYW5vdGhlciBpdGVyYWJsZQogICAgICAgID4+PiBjLnN1YnRyYWN0KENvdW50ZXIoJ3dhdGNoJykpICAgICMgc3VidHJhY3QgZWxlbWVudHMgZnJvbSBhbm90aGVyIGNvdW50ZXIKICAgICAgICA+Pj4gY1snaCddICAgICAgICAgICAgICAgICAgICAgICAgICAjIDIgaW4gd2hpY2gsIG1pbnVzIDEgaW4gd2l0Y2gsIG1pbnVzIDEgaW4gd2F0Y2gKICAgICAgICAwCiAgICAgICAgPj4+IGNbJ3cnXSAgICAgICAgICAgICAgICAgICAgICAgICAgIyAxIGluIHdoaWNoLCBtaW51cyAxIGluIHdpdGNoLCBtaW51cyAxIGluIHdhdGNoCiAgICAgICAgLTEKCiAgICAgICAgJycnCiAgICAgICAgaWYgaXRlcmFibGUgaXMgbm90IE5vbmU6CiAgICAgICAgICAgIHNlbGZfZ2V0ID0gc2VsZi5nZXQKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShpdGVyYWJsZSwgTWFwcGluZyk6CiAgICAgICAgICAgICAgICBmb3IgZWxlbSwgY291bnQgaW4gaXRlcmFibGUuaXRlbXMoKToKICAgICAgICAgICAgICAgICAgICBzZWxmW2VsZW1dID0gc2VsZl9nZXQoZWxlbSwgMCkgLSBjb3VudAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgZm9yIGVsZW0gaW4gaXRlcmFibGU6CiAgICAgICAgICAgICAgICAgICAgc2VsZltlbGVtXSA9IHNlbGZfZ2V0KGVsZW0sIDApIC0gMQogICAgICAgIGlmIGt3ZHM6CiAgICAgICAgICAgIHNlbGYuc3VidHJhY3Qoa3dkcykKCiAgICBkZWYgY29weShzZWxmKToKICAgICAgICAnUmV0dXJuIGEgc2hhbGxvdyBjb3B5LicKICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZikKCiAgICBkZWYgX19yZWR1Y2VfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18sIChkaWN0KHNlbGYpLCkKCiAgICBkZWYgX19kZWxpdGVtX18oc2VsZiwgZWxlbSk6CiAgICAgICAgJ0xpa2UgZGljdC5fX2RlbGl0ZW1fXygpIGJ1dCBkb2VzIG5vdCByYWlzZSBLZXlFcnJvciBmb3IgbWlzc2luZyB2YWx1ZXMuJwogICAgICAgIGlmIGVsZW0gaW4gc2VsZjoKICAgICAgICAgICAgc3VwZXIoKS5fX2RlbGl0ZW1fXyhlbGVtKQoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICBpZiBub3Qgc2VsZjoKICAgICAgICAgICAgcmV0dXJuICclcygpJyAlIHNlbGYuX19jbGFzc19fLl9fbmFtZV9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBpdGVtcyA9ICcsICcuam9pbihtYXAoJyVyOiAlcicuX19tb2RfXywgc2VsZi5tb3N0X2NvbW1vbigpKSkKICAgICAgICAgICAgcmV0dXJuICclcyh7JXN9KScgJSAoc2VsZi5fX2NsYXNzX18uX19uYW1lX18sIGl0ZW1zKQogICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6CiAgICAgICAgICAgICMgaGFuZGxlIGNhc2Ugd2hlcmUgdmFsdWVzIGFyZSBub3Qgb3JkZXJhYmxlCiAgICAgICAgICAgIHJldHVybiAnezB9KHsxIXJ9KScuZm9ybWF0KHNlbGYuX19jbGFzc19fLl9fbmFtZV9fLCBkaWN0KHNlbGYpKQoKICAgICMgTXVsdGlzZXQtc3R5bGUgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbnMgZGlzY3Vzc2VkIGluOgogICAgIyAgICAgICBLbnV0aCBUQU9DUCBWb2x1bWUgSUkgc2VjdGlvbiA0LjYuMyBleGVyY2lzZSAxOQogICAgIyAgICAgICBhbmQgYXQgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NdWx0aXNldAogICAgIwogICAgIyBPdXRwdXRzIGd1YXJhbnRlZWQgdG8gb25seSBpbmNsdWRlIHBvc2l0aXZlIGNvdW50cy4KICAgICMKICAgICMgVG8gc3RyaXAgbmVnYXRpdmUgYW5kIHplcm8gY291bnRzLCBhZGQtaW4gYW4gZW1wdHkgY291bnRlcjoKICAgICMgICAgICAgYyArPSBDb3VudGVyKCkKCiAgICBkZWYgX19hZGRfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgJycnQWRkIGNvdW50cyBmcm9tIHR3byBjb3VudGVycy4KCiAgICAgICAgPj4+IENvdW50ZXIoJ2FiYmInKSArIENvdW50ZXIoJ2JjYycpCiAgICAgICAgQ291bnRlcih7J2InOiA0LCAnYyc6IDIsICdhJzogMX0pCgogICAgICAgICcnJwogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCBDb3VudGVyKToKICAgICAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCiAgICAgICAgcmVzdWx0ID0gQ291bnRlcigpCiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIHNlbGYuaXRlbXMoKToKICAgICAgICAgICAgbmV3Y291bnQgPSBjb3VudCArIG90aGVyW2VsZW1dCiAgICAgICAgICAgIGlmIG5ld2NvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IG5ld2NvdW50CiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIG90aGVyLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGVsZW0gbm90IGluIHNlbGYgYW5kIGNvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IGNvdW50CiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIGRlZiBfX3N1Yl9fKHNlbGYsIG90aGVyKToKICAgICAgICAnJycgU3VidHJhY3QgY291bnQsIGJ1dCBrZWVwIG9ubHkgcmVzdWx0cyB3aXRoIHBvc2l0aXZlIGNvdW50cy4KCiAgICAgICAgPj4+IENvdW50ZXIoJ2FiYmJjJykgLSBDb3VudGVyKCdiY2NkJykKICAgICAgICBDb3VudGVyKHsnYic6IDIsICdhJzogMX0pCgogICAgICAgICcnJwogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKG90aGVyLCBDb3VudGVyKToKICAgICAgICAgICAgcmV0dXJuIE5vdEltcGxlbWVudGVkCiAgICAgICAgcmVzdWx0ID0gQ291bnRlcigpCiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIHNlbGYuaXRlbXMoKToKICAgICAgICAgICAgbmV3Y291bnQgPSBjb3VudCAtIG90aGVyW2VsZW1dCiAgICAgICAgICAgIGlmIG5ld2NvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IG5ld2NvdW50CiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIG90aGVyLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGVsZW0gbm90IGluIHNlbGYgYW5kIGNvdW50IDwgMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IDAgLSBjb3VudAogICAgICAgIHJldHVybiByZXN1bHQKCiAgICBkZWYgX19vcl9fKHNlbGYsIG90aGVyKToKICAgICAgICAnJydVbmlvbiBpcyB0aGUgbWF4aW11bSBvZiB2YWx1ZSBpbiBlaXRoZXIgb2YgdGhlIGlucHV0IGNvdW50ZXJzLgoKICAgICAgICA+Pj4gQ291bnRlcignYWJiYicpIHwgQ291bnRlcignYmNjJykKICAgICAgICBDb3VudGVyKHsnYic6IDMsICdjJzogMiwgJ2EnOiAxfSkKCiAgICAgICAgJycnCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob3RoZXIsIENvdW50ZXIpOgogICAgICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKICAgICAgICByZXN1bHQgPSBDb3VudGVyKCkKICAgICAgICBmb3IgZWxlbSwgY291bnQgaW4gc2VsZi5pdGVtcygpOgogICAgICAgICAgICBvdGhlcl9jb3VudCA9IG90aGVyW2VsZW1dCiAgICAgICAgICAgIG5ld2NvdW50ID0gb3RoZXJfY291bnQgaWYgY291bnQgPCBvdGhlcl9jb3VudCBlbHNlIGNvdW50CiAgICAgICAgICAgIGlmIG5ld2NvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IG5ld2NvdW50CiAgICAgICAgZm9yIGVsZW0sIGNvdW50IGluIG90aGVyLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIGVsZW0gbm90IGluIHNlbGYgYW5kIGNvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IGNvdW50CiAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgIGRlZiBfX2FuZF9fKHNlbGYsIG90aGVyKToKICAgICAgICAnJycgSW50ZXJzZWN0aW9uIGlzIHRoZSBtaW5pbXVtIG9mIGNvcnJlc3BvbmRpbmcgY291bnRzLgogICAgCiAgICAgICAgPj4+IENvdW50ZXIoJ2FiYmInKSAmIENvdW50ZXIoJ2JjYycpCiAgICAgICAgQ291bnRlcih7J2InOiAxfSkKCiAgICAgICAgJycnCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uob3RoZXIsIENvdW50ZXIpOgogICAgICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKICAgICAgICByZXN1bHQgPSBDb3VudGVyKCkKICAgICAgICBmb3IgZWxlbSwgY291bnQgaW4gc2VsZi5pdGVtcygpOgogICAgICAgICAgICBvdGhlcl9jb3VudCA9IG90aGVyW2VsZW1dCiAgICAgICAgICAgIG5ld2NvdW50ID0gY291bnQgaWYgY291bnQgPCBvdGhlcl9jb3VudCBlbHNlIG90aGVyX2NvdW50CiAgICAgICAgICAgIGlmIG5ld2NvdW50ID4gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtlbGVtXSA9IG5ld2NvdW50CiAgICAgICAgcmV0dXJuIHJlc3VsdAoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMgIENoYWluTWFwIChoZWxwZXIgZm9yIGNvbmZpZ3BhcnNlcikKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgojY2xhc3MgX0NoYWluTWFwKE11dGFibGVNYXBwaW5nKToKIyAgICAnJycgQSBDaGFpbk1hcCBncm91cHMgbXVsdGlwbGUgZGljdHMgKG9yIG90aGVyIG1hcHBpbmdzKSB0b2dldGhlcgojICAgIHRvIGNyZWF0ZSBhIHNpbmdsZSwgdXBkYXRlYWJsZSB2aWV3LgoKIyAgICBUaGUgdW5kZXJseWluZyBtYXBwaW5ncyBhcmUgc3RvcmVkIGluIGEgbGlzdC4gIFRoYXQgbGlzdCBpcyBwdWJsaWMgYW5kIGNhbgojICAgIGFjY2Vzc2VkIG9yIHVwZGF0ZWQgdXNpbmcgdGhlICptYXBzKiBhdHRyaWJ1dGUuICBUaGVyZSBpcyBubyBvdGhlciBzdGF0ZS4KCiMgICAgTG9va3VwcyBzZWFyY2ggdGhlIHVuZGVybHlpbmcgbWFwcGluZ3Mgc3VjY2Vzc2l2ZWx5IHVudGlsIGEga2V5IGlzIGZvdW5kLgojICAgIEluIGNvbnRyYXN0LCB3cml0ZXMsIHVwZGF0ZXMsIGFuZCBkZWxldGlvbnMgb25seSBvcGVyYXRlIG9uIHRoZSBmaXJzdAojICAgIG1hcHBpbmcuCiMKIyAgICAnJycKCiMgICAgZGVmIF9faW5pdF9fKHNlbGYsICptYXBzKToKIyAgICAgICAgJycnSW5pdGlhbGl6ZSBhIENoYWluTWFwIGJ5IHNldHRpbmcgKm1hcHMqIHRvIHRoZSBnaXZlbiBtYXBwaW5ncy4KIyAgICAgICAgSWYgbm8gbWFwcGluZ3MgYXJlIHByb3ZpZGVkLCBhIHNpbmdsZSBlbXB0eSBkaWN0aW9uYXJ5IGlzIHVzZWQuCiMKIyAgICAgICAgJycnCiMgICAgICAgIHNlbGYubWFwcyA9IGxpc3QobWFwcykgb3IgW3t9XSAgICAgICAgICAjIGFsd2F5cyBhdCBsZWFzdCBvbmUgbWFwCgojICAgIGRlZiBfX21pc3NpbmdfXyhzZWxmLCBrZXkpOgojICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCgojICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgojICAgICAgICBmb3IgbWFwcGluZyBpbiBzZWxmLm1hcHM6CiMgICAgICAgICAgICB0cnk6CiMgICAgICAgICAgICAgICAgcmV0dXJuIG1hcHBpbmdba2V5XSAgICAgICAgICAgICAjIGNhbid0IHVzZSAna2V5IGluIG1hcHBpbmcnIHdpdGggZGVmYXVsdGRpY3QKIyAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKIyAgICAgICAgICAgICAgICBwYXNzCiMgICAgICAgIHJldHVybiBzZWxmLl9fbWlzc2luZ19fKGtleSkgICAgICAgICAgICAjIHN1cHBvcnQgc3ViY2xhc3NlcyB0aGF0IGRlZmluZSBfX21pc3NpbmdfXwoKIyAgICBkZWYgZ2V0KHNlbGYsIGtleSwgZGVmYXVsdD1Ob25lKToKIyAgICAgICAgcmV0dXJuIHNlbGZba2V5XSBpZiBrZXkgaW4gc2VsZiBlbHNlIGRlZmF1bHQKCiMgICAgZGVmIF9fbGVuX18oc2VsZik6CiMgICAgICAgIHJldHVybiBsZW4oc2V0KCkudW5pb24oKnNlbGYubWFwcykpICAgICAjIHJldXNlcyBzdG9yZWQgaGFzaCB2YWx1ZXMgaWYgcG9zc2libGUKCiMgICAgZGVmIF9faXRlcl9fKHNlbGYpOgojICAgICAgICByZXR1cm4gaXRlcihzZXQoKS51bmlvbigqc2VsZi5tYXBzKSkKCiMgICAgZGVmIF9fY29udGFpbnNfXyhzZWxmLCBrZXkpOgojICAgICAgICByZXR1cm4gYW55KGtleSBpbiBtIGZvciBtIGluIHNlbGYubWFwcykKCiMgICAgZGVmIF9fYm9vbF9fKHNlbGYpOgojICAgICAgICByZXR1cm4gYW55KHNlbGYubWFwcykKCiAgICAjZml4bWUsIGJyeXRob24KICAgICNAX3JlY3Vyc2l2ZV9yZXByKCkKIyAgICBkZWYgX19yZXByX18oc2VsZik6CiMgICAgICAgIHJldHVybiAnezAuX19jbGFzc19fLl9fbmFtZV9ffSh7MX0pJy5mb3JtYXQoCiMgICAgICAgICAgICBzZWxmLCAnLCAnLmpvaW4obWFwKHJlcHIsIHNlbGYubWFwcykpKQoKIyAgICBAY2xhc3NtZXRob2QKIyAgICBkZWYgZnJvbWtleXMoY2xzLCBpdGVyYWJsZSwgKmFyZ3MpOgojICAgICAgICAnQ3JlYXRlIGEgQ2hhaW5NYXAgd2l0aCBhIHNpbmdsZSBkaWN0IGNyZWF0ZWQgZnJvbSB0aGUgaXRlcmFibGUuJwojICAgICAgICByZXR1cm4gY2xzKGRpY3QuZnJvbWtleXMoaXRlcmFibGUsICphcmdzKSkKCiMgICAgZGVmIGNvcHkoc2VsZik6CiMgICAgICAgICdOZXcgQ2hhaW5NYXAgb3Igc3ViY2xhc3Mgd2l0aCBhIG5ldyBjb3B5IG9mIG1hcHNbMF0gYW5kIHJlZnMgdG8gbWFwc1sxOl0nCiMgICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLm1hcHNbMF0uY29weSgpLCAqc2VsZi5tYXBzWzE6XSkKCiMgICAgX19jb3B5X18gPSBjb3B5CgojICAgIGRlZiBuZXdfY2hpbGQoc2VsZik6ICAgICAgICAgICAgICAgICAgICAgICAgIyBsaWtlIERqYW5nbydzIENvbnRleHQucHVzaCgpCiMgICAgICAgICdOZXcgQ2hhaW5NYXAgd2l0aCBhIG5ldyBkaWN0IGZvbGxvd2VkIGJ5IGFsbCBwcmV2aW91cyBtYXBzLicKIyAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKHt9LCAqc2VsZi5tYXBzKQoKIyAgICBAcHJvcGVydHkKIyAgICBkZWYgcGFyZW50cyhzZWxmKTogICAgICAgICAgICAgICAgICAgICAgICAgICMgbGlrZSBEamFuZ28ncyBDb250ZXh0LnBvcCgpCiMgICAgICAgICdOZXcgQ2hhaW5NYXAgZnJvbSBtYXBzWzE6XS4nCiMgICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXygqc2VsZi5tYXBzWzE6XSkKCiMgICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsIGtleSwgdmFsdWUpOgojICAgICAgICBzZWxmLm1hcHNbMF1ba2V5XSA9IHZhbHVlCgojICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgojICAgICAgICB0cnk6CiMgICAgICAgICAgICBkZWwgc2VsZi5tYXBzWzBdW2tleV0KIyAgICAgICAgZXhjZXB0IEtleUVycm9yOgojICAgICAgICAgICAgcmFpc2UgS2V5RXJyb3IoJ0tleSBub3QgZm91bmQgaW4gdGhlIGZpcnN0IG1hcHBpbmc6IHshcn0nLmZvcm1hdChrZXkpKQoKIyAgICBkZWYgcG9waXRlbShzZWxmKToKIyAgICAgICAgJ1JlbW92ZSBhbmQgcmV0dXJuIGFuIGl0ZW0gcGFpciBmcm9tIG1hcHNbMF0uIFJhaXNlIEtleUVycm9yIGlzIG1hcHNbMF0gaXMgZW1wdHkuJwojICAgICAgICB0cnk6CiMgICAgICAgICAgICByZXR1cm4gc2VsZi5tYXBzWzBdLnBvcGl0ZW0oKQojICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiMgICAgICAgICAgICByYWlzZSBLZXlFcnJvcignTm8ga2V5cyBmb3VuZCBpbiB0aGUgZmlyc3QgbWFwcGluZy4nKQoKIyAgICBkZWYgcG9wKHNlbGYsIGtleSwgKmFyZ3MpOgojICAgICAgICAnUmVtb3ZlICprZXkqIGZyb20gbWFwc1swXSBhbmQgcmV0dXJuIGl0cyB2YWx1ZS4gUmFpc2UgS2V5RXJyb3IgaWYgKmtleSogbm90IGluIG1hcHNbMF0uJwojICAgICAgICB0cnk6CiMgICAgICAgICAgICByZXR1cm4gc2VsZi5tYXBzWzBdLnBvcChrZXksICphcmdzKQojICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiMgICAgICAgICAgICAjcmFpc2UgS2V5RXJyb3IoJ0tleSBub3QgZm91bmQgaW4gdGhlIGZpcnN0IG1hcHBpbmc6IHshcn0nLmZvcm1hdChrZXkpKQojICAgICAgICAgICAgcmFpc2UgS2V5RXJyb3IoJ0tleSBub3QgZm91bmQgaW4gdGhlIGZpcnN0IG1hcHBpbmc6ICVzJyAlIGtleSkKCiMgICAgZGVmIGNsZWFyKHNlbGYpOgojICAgICAgICAnQ2xlYXIgbWFwc1swXSwgbGVhdmluZyBtYXBzWzE6XSBpbnRhY3QuJwojICAgICAgICBzZWxmLm1hcHNbMF0uY2xlYXIoKQoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyBVc2VyRGljdAojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKI2NsYXNzIFVzZXJEaWN0KE11dGFibGVNYXBwaW5nKToKCiAgICAjIFN0YXJ0IGJ5IGZpbGxpbmctb3V0IHRoZSBhYnN0cmFjdCBtZXRob2RzCiMgICAgZGVmIF9faW5pdF9fKHNlbGYsIGRpY3Q9Tm9uZSwgKiprd2FyZ3MpOgojICAgICAgICBzZWxmLmRhdGEgPSB7fQojICAgICAgICBpZiBkaWN0IGlzIG5vdCBOb25lOgojICAgICAgICAgICAgc2VsZi51cGRhdGUoZGljdCkKIyAgICAgICAgaWYgbGVuKGt3YXJncyk6CiMgICAgICAgICAgICBzZWxmLnVwZGF0ZShrd2FyZ3MpCiMgICAgZGVmIF9fbGVuX18oc2VsZik6IHJldHVybiBsZW4oc2VsZi5kYXRhKQojICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgojICAgICAgICBpZiBrZXkgaW4gc2VsZi5kYXRhOgojICAgICAgICAgICAgcmV0dXJuIHNlbGYuZGF0YVtrZXldCiMgICAgICAgIGlmIGhhc2F0dHIoc2VsZi5fX2NsYXNzX18sICJfX21pc3NpbmdfXyIpOgojICAgICAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fLl9fbWlzc2luZ19fKHNlbGYsIGtleSkKIyAgICAgICAgcmFpc2UgS2V5RXJyb3Ioa2V5KQojICAgIGRlZiBfX3NldGl0ZW1fXyhzZWxmLCBrZXksIGl0ZW0pOiBzZWxmLmRhdGFba2V5XSA9IGl0ZW0KIyAgICBkZWYgX19kZWxpdGVtX18oc2VsZiwga2V5KTogZGVsIHNlbGYuZGF0YVtrZXldCiMgICAgZGVmIF9faXRlcl9fKHNlbGYpOgojICAgICAgICByZXR1cm4gaXRlcihzZWxmLmRhdGEpCgogICAgIyBNb2RpZnkgX19jb250YWluc19fIHRvIHdvcmsgY29ycmVjdGx5IHdoZW4gX19taXNzaW5nX18gaXMgcHJlc2VudAojICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKIyAgICAgICAgcmV0dXJuIGtleSBpbiBzZWxmLmRhdGEKCiAgICAjIE5vdywgYWRkIHRoZSBtZXRob2RzIGluIGRpY3RzIGJ1dCBub3QgaW4gTXV0YWJsZU1hcHBpbmcKIyAgICBkZWYgX19yZXByX18oc2VsZik6IHJldHVybiByZXByKHNlbGYuZGF0YSkKIyAgICBkZWYgY29weShzZWxmKToKIyAgICAgICAgaWYgc2VsZi5fX2NsYXNzX18gaXMgVXNlckRpY3Q6CiMgICAgICAgICAgICByZXR1cm4gVXNlckRpY3Qoc2VsZi5kYXRhLmNvcHkoKSkKIyAgICAgICAgaW1wb3J0IGNvcHkKIyAgICAgICAgZGF0YSA9IHNlbGYuZGF0YQojICAgICAgICB0cnk6CiMgICAgICAgICAgICBzZWxmLmRhdGEgPSB7fQojICAgICAgICAgICAgYyA9IGNvcHkuY29weShzZWxmKQojICAgICAgICBmaW5hbGx5OgojICAgICAgICAgICAgc2VsZi5kYXRhID0gZGF0YQojICAgICAgICBjLnVwZGF0ZShzZWxmKQojICAgICAgICByZXR1cm4gYwojICAgIEBjbGFzc21ldGhvZAojICAgIGRlZiBmcm9ta2V5cyhjbHMsIGl0ZXJhYmxlLCB2YWx1ZT1Ob25lKToKIyAgICAgICAgZCA9IGNscygpCiMgICAgICAgIGZvciBrZXkgaW4gaXRlcmFibGU6CiMgICAgICAgICAgICBkW2tleV0gPSB2YWx1ZQojICAgICAgICByZXR1cm4gZAoKCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMgVXNlckxpc3QKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiNjbGFzcyBVc2VyTGlzdChNdXRhYmxlU2VxdWVuY2UpOgojICAgICcnJ0EgbW9yZSBvciBsZXNzIGNvbXBsZXRlIHVzZXItZGVmaW5lZCB3cmFwcGVyIGFyb3VuZCBsaXN0IG9iamVjdHMuJycnCiMgICAgZGVmIF9faW5pdF9fKHNlbGYsIGluaXRsaXN0PU5vbmUpOgojICAgICAgICBzZWxmLmRhdGEgPSBbXQojICAgICAgICBpZiBpbml0bGlzdCBpcyBub3QgTm9uZToKIyAgICAgICAgICAgICMgWFhYIHNob3VsZCB0aGlzIGFjY2VwdCBhbiBhcmJpdHJhcnkgc2VxdWVuY2U/CiMgICAgICAgICAgICBpZiB0eXBlKGluaXRsaXN0KSA9PSB0eXBlKHNlbGYuZGF0YSk6CiMgICAgICAgICAgICAgICAgc2VsZi5kYXRhWzpdID0gaW5pdGxpc3QKIyAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShpbml0bGlzdCwgVXNlckxpc3QpOgojICAgICAgICAgICAgICAgIHNlbGYuZGF0YVs6XSA9IGluaXRsaXN0LmRhdGFbOl0KIyAgICAgICAgICAgIGVsc2U6CiMgICAgICAgICAgICAgICAgc2VsZi5kYXRhID0gbGlzdChpbml0bGlzdCkKIyAgICBkZWYgX19yZXByX18oc2VsZik6IHJldHVybiByZXByKHNlbGYuZGF0YSkKIyAgICBkZWYgX19sdF9fKHNlbGYsIG90aGVyKTogcmV0dXJuIHNlbGYuZGF0YSA8ICBzZWxmLl9fY2FzdChvdGhlcikKIyAgICBkZWYgX19sZV9fKHNlbGYsIG90aGVyKTogcmV0dXJuIHNlbGYuZGF0YSA8PSBzZWxmLl9fY2FzdChvdGhlcikKIyAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKTogcmV0dXJuIHNlbGYuZGF0YSA9PSBzZWxmLl9fY2FzdChvdGhlcikKIyAgICBkZWYgX19uZV9fKHNlbGYsIG90aGVyKTogcmV0dXJuIHNlbGYuZGF0YSAhPSBzZWxmLl9fY2FzdChvdGhlcikKIyAgICBkZWYgX19ndF9fKHNlbGYsIG90aGVyKTogcmV0dXJuIHNlbGYuZGF0YSA+ICBzZWxmLl9fY2FzdChvdGhlcikKIyAgICBkZWYgX19nZV9fKHNlbGYsIG90aGVyKTogcmV0dXJuIHNlbGYuZGF0YSA+PSBzZWxmLl9fY2FzdChvdGhlcikKIyAgICBkZWYgX19jYXN0KHNlbGYsIG90aGVyKToKIyAgICAgICAgcmV0dXJuIG90aGVyLmRhdGEgaWYgaXNpbnN0YW5jZShvdGhlciwgVXNlckxpc3QpIGVsc2Ugb3RoZXIKIyAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGl0ZW0pOiByZXR1cm4gaXRlbSBpbiBzZWxmLmRhdGEKIyAgICBkZWYgX19sZW5fXyhzZWxmKTogcmV0dXJuIGxlbihzZWxmLmRhdGEpCiMgICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGkpOiByZXR1cm4gc2VsZi5kYXRhW2ldCiMgICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsIGksIGl0ZW0pOiBzZWxmLmRhdGFbaV0gPSBpdGVtCiMgICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsIGkpOiBkZWwgc2VsZi5kYXRhW2ldCiMgICAgZGVmIF9fYWRkX18oc2VsZiwgb3RoZXIpOgojICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCBVc2VyTGlzdCk6CiMgICAgICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhICsgb3RoZXIuZGF0YSkKIyAgICAgICAgZWxpZiBpc2luc3RhbmNlKG90aGVyLCB0eXBlKHNlbGYuZGF0YSkpOgojICAgICAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKHNlbGYuZGF0YSArIG90aGVyKQojICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhICsgbGlzdChvdGhlcikpCiMgICAgZGVmIF9fcmFkZF9fKHNlbGYsIG90aGVyKToKIyAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgVXNlckxpc3QpOgojICAgICAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKG90aGVyLmRhdGEgKyBzZWxmLmRhdGEpCiMgICAgICAgIGVsaWYgaXNpbnN0YW5jZShvdGhlciwgdHlwZShzZWxmLmRhdGEpKToKIyAgICAgICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhvdGhlciArIHNlbGYuZGF0YSkKIyAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKGxpc3Qob3RoZXIpICsgc2VsZi5kYXRhKQojICAgIGRlZiBfX2lhZGRfXyhzZWxmLCBvdGhlcik6CiMgICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIFVzZXJMaXN0KToKIyAgICAgICAgICAgIHNlbGYuZGF0YSArPSBvdGhlci5kYXRhCiMgICAgICAgIGVsaWYgaXNpbnN0YW5jZShvdGhlciwgdHlwZShzZWxmLmRhdGEpKToKIyAgICAgICAgICAgIHNlbGYuZGF0YSArPSBvdGhlcgojICAgICAgICBlbHNlOgojICAgICAgICAgICAgc2VsZi5kYXRhICs9IGxpc3Qob3RoZXIpCiMgICAgICAgIHJldHVybiBzZWxmCiMgICAgZGVmIF9fbXVsX18oc2VsZiwgbik6CiMgICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLmRhdGEqbikKIyAgICBfX3JtdWxfXyA9IF9fbXVsX18KIyAgICBkZWYgX19pbXVsX18oc2VsZiwgbik6CiMgICAgICAgIHNlbGYuZGF0YSAqPSBuCiMgICAgICAgIHJldHVybiBzZWxmCiMgICAgZGVmIGFwcGVuZChzZWxmLCBpdGVtKTogc2VsZi5kYXRhLmFwcGVuZChpdGVtKQojICAgIGRlZiBpbnNlcnQoc2VsZiwgaSwgaXRlbSk6IHNlbGYuZGF0YS5pbnNlcnQoaSwgaXRlbSkKIyAgICBkZWYgcG9wKHNlbGYsIGk9LTEpOiByZXR1cm4gc2VsZi5kYXRhLnBvcChpKQojICAgIGRlZiByZW1vdmUoc2VsZiwgaXRlbSk6IHNlbGYuZGF0YS5yZW1vdmUoaXRlbSkKIyAgICBkZWYgY291bnQoc2VsZiwgaXRlbSk6IHJldHVybiBzZWxmLmRhdGEuY291bnQoaXRlbSkKIyAgICBkZWYgaW5kZXgoc2VsZiwgaXRlbSwgKmFyZ3MpOiByZXR1cm4gc2VsZi5kYXRhLmluZGV4KGl0ZW0sICphcmdzKQojICAgIGRlZiByZXZlcnNlKHNlbGYpOiBzZWxmLmRhdGEucmV2ZXJzZSgpCiMgICAgZGVmIHNvcnQoc2VsZiwgKmFyZ3MsICoqa3dkcyk6IHNlbGYuZGF0YS5zb3J0KCphcmdzLCAqKmt3ZHMpCiMgICAgZGVmIGV4dGVuZChzZWxmLCBvdGhlcik6CiMgICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIFVzZXJMaXN0KToKIyAgICAgICAgICAgIHNlbGYuZGF0YS5leHRlbmQob3RoZXIuZGF0YSkKIyAgICAgICAgZWxzZToKIyAgICAgICAgICAgIHNlbGYuZGF0YS5leHRlbmQob3RoZXIpCgoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyBVc2VyU3RyaW5nCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgojY2xhc3MgVXNlclN0cmluZyhTZXF1ZW5jZSk6CiMgICAgZGVmIF9faW5pdF9fKHNlbGYsIHNlcSk6CiMgICAgICAgIGlmIGlzaW5zdGFuY2Uoc2VxLCBzdHIpOgojICAgICAgICAgICAgc2VsZi5kYXRhID0gc2VxCiMgICAgICAgIGVsaWYgaXNpbnN0YW5jZShzZXEsIFVzZXJTdHJpbmcpOgojICAgICAgICAgICAgc2VsZi5kYXRhID0gc2VxLmRhdGFbOl0KIyAgICAgICAgZWxzZToKIyAgICAgICAgICAgIHNlbGYuZGF0YSA9IHN0cihzZXEpCiMgICAgZGVmIF9fc3RyX18oc2VsZik6IHJldHVybiBzdHIoc2VsZi5kYXRhKQojICAgIGRlZiBfX3JlcHJfXyhzZWxmKTogcmV0dXJuIHJlcHIoc2VsZi5kYXRhKQojICAgIGRlZiBfX2ludF9fKHNlbGYpOiByZXR1cm4gaW50KHNlbGYuZGF0YSkKIyAgICBkZWYgX19mbG9hdF9fKHNlbGYpOiByZXR1cm4gZmxvYXQoc2VsZi5kYXRhKQojICAgIGRlZiBfX2NvbXBsZXhfXyhzZWxmKTogcmV0dXJuIGNvbXBsZXgoc2VsZi5kYXRhKQojICAgIGRlZiBfX2hhc2hfXyhzZWxmKTogcmV0dXJuIGhhc2goc2VsZi5kYXRhKQoKIyAgICBkZWYgX19lcV9fKHNlbGYsIHN0cmluZyk6CiMgICAgICAgIGlmIGlzaW5zdGFuY2Uoc3RyaW5nLCBVc2VyU3RyaW5nKToKIyAgICAgICAgICAgIHJldHVybiBzZWxmLmRhdGEgPT0gc3RyaW5nLmRhdGEKIyAgICAgICAgcmV0dXJuIHNlbGYuZGF0YSA9PSBzdHJpbmcKIyAgICBkZWYgX19uZV9fKHNlbGYsIHN0cmluZyk6CiMgICAgICAgIGlmIGlzaW5zdGFuY2Uoc3RyaW5nLCBVc2VyU3RyaW5nKToKIyAgICAgICAgICAgIHJldHVybiBzZWxmLmRhdGEgIT0gc3RyaW5nLmRhdGEKIyAgICAgICAgcmV0dXJuIHNlbGYuZGF0YSAhPSBzdHJpbmcKIyAgICBkZWYgX19sdF9fKHNlbGYsIHN0cmluZyk6CiMgICAgICAgIGlmIGlzaW5zdGFuY2Uoc3RyaW5nLCBVc2VyU3RyaW5nKToKIyAgICAgICAgICAgIHJldHVybiBzZWxmLmRhdGEgPCBzdHJpbmcuZGF0YQojICAgICAgICByZXR1cm4gc2VsZi5kYXRhIDwgc3RyaW5nCiMgICAgZGVmIF9fbGVfXyhzZWxmLCBzdHJpbmcpOgojICAgICAgICBpZiBpc2luc3RhbmNlKHN0cmluZywgVXNlclN0cmluZyk6CiMgICAgICAgICAgICByZXR1cm4gc2VsZi5kYXRhIDw9IHN0cmluZy5kYXRhCiMgICAgICAgIHJldHVybiBzZWxmLmRhdGEgPD0gc3RyaW5nCiMgICAgZGVmIF9fZ3RfXyhzZWxmLCBzdHJpbmcpOgojICAgICAgICBpZiBpc2luc3RhbmNlKHN0cmluZywgVXNlclN0cmluZyk6CiMgICAgICAgICAgICByZXR1cm4gc2VsZi5kYXRhID4gc3RyaW5nLmRhdGEKIyAgICAgICAgcmV0dXJuIHNlbGYuZGF0YSA+IHN0cmluZwojICAgIGRlZiBfX2dlX18oc2VsZiwgc3RyaW5nKToKIyAgICAgICAgaWYgaXNpbnN0YW5jZShzdHJpbmcsIFVzZXJTdHJpbmcpOgojICAgICAgICAgICAgcmV0dXJuIHNlbGYuZGF0YSA+PSBzdHJpbmcuZGF0YQojICAgICAgICByZXR1cm4gc2VsZi5kYXRhID49IHN0cmluZwoKIyAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGNoYXIpOgojICAgICAgICBpZiBpc2luc3RhbmNlKGNoYXIsIFVzZXJTdHJpbmcpOgojICAgICAgICAgICAgY2hhciA9IGNoYXIuZGF0YQojICAgICAgICByZXR1cm4gY2hhciBpbiBzZWxmLmRhdGEKCiMgICAgZGVmIF9fbGVuX18oc2VsZik6IHJldHVybiBsZW4oc2VsZi5kYXRhKQojICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBpbmRleCk6IHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLmRhdGFbaW5kZXhdKQojICAgIGRlZiBfX2FkZF9fKHNlbGYsIG90aGVyKToKIyAgICAgICAgaWYgaXNpbnN0YW5jZShvdGhlciwgVXNlclN0cmluZyk6CiMgICAgICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhICsgb3RoZXIuZGF0YSkKIyAgICAgICAgZWxpZiBpc2luc3RhbmNlKG90aGVyLCBzdHIpOgojICAgICAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKHNlbGYuZGF0YSArIG90aGVyKQojICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhICsgc3RyKG90aGVyKSkKIyAgICBkZWYgX19yYWRkX18oc2VsZiwgb3RoZXIpOgojICAgICAgICBpZiBpc2luc3RhbmNlKG90aGVyLCBzdHIpOgojICAgICAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKG90aGVyICsgc2VsZi5kYXRhKQojICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc3RyKG90aGVyKSArIHNlbGYuZGF0YSkKIyAgICBkZWYgX19tdWxfXyhzZWxmLCBuKToKIyAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKHNlbGYuZGF0YSpuKQojICAgIF9fcm11bF9fID0gX19tdWxfXwojICAgIGRlZiBfX21vZF9fKHNlbGYsIGFyZ3MpOgojICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhICUgYXJncykKCiAgICAjIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgZGVmaW5lZCBpbiBhbHBoYWJldGljYWwgb3JkZXI6CiMgICAgZGVmIGNhcGl0YWxpemUoc2VsZik6IHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLmRhdGEuY2FwaXRhbGl6ZSgpKQojICAgIGRlZiBjZW50ZXIoc2VsZiwgd2lkdGgsICphcmdzKToKIyAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKHNlbGYuZGF0YS5jZW50ZXIod2lkdGgsICphcmdzKSkKIyAgICBkZWYgY291bnQoc2VsZiwgc3ViLCBzdGFydD0wLCBlbmQ9X3N5cy5tYXhzaXplKToKIyAgICAgICAgaWYgaXNpbnN0YW5jZShzdWIsIFVzZXJTdHJpbmcpOgojICAgICAgICAgICAgc3ViID0gc3ViLmRhdGEKIyAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5jb3VudChzdWIsIHN0YXJ0LCBlbmQpCiMgICAgZGVmIGVuY29kZShzZWxmLCBlbmNvZGluZz1Ob25lLCBlcnJvcnM9Tm9uZSk6ICMgWFhYIGltcHJvdmUgdGhpcz8KIyAgICAgICAgaWYgZW5jb2Rpbmc6CiMgICAgICAgICAgICBpZiBlcnJvcnM6CiMgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKHNlbGYuZGF0YS5lbmNvZGUoZW5jb2RpbmcsIGVycm9ycykpCiMgICAgICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhLmVuY29kZShlbmNvZGluZykpCiMgICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLmRhdGEuZW5jb2RlKCkpCiMgICAgZGVmIGVuZHN3aXRoKHNlbGYsIHN1ZmZpeCwgc3RhcnQ9MCwgZW5kPV9zeXMubWF4c2l6ZSk6CiMgICAgICAgIHJldHVybiBzZWxmLmRhdGEuZW5kc3dpdGgoc3VmZml4LCBzdGFydCwgZW5kKQojICAgIGRlZiBleHBhbmR0YWJzKHNlbGYsIHRhYnNpemU9OCk6CiMgICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLmRhdGEuZXhwYW5kdGFicyh0YWJzaXplKSkKIyAgICBkZWYgZmluZChzZWxmLCBzdWIsIHN0YXJ0PTAsIGVuZD1fc3lzLm1heHNpemUpOgojICAgICAgICBpZiBpc2luc3RhbmNlKHN1YiwgVXNlclN0cmluZyk6CiMgICAgICAgICAgICBzdWIgPSBzdWIuZGF0YQojICAgICAgICByZXR1cm4gc2VsZi5kYXRhLmZpbmQoc3ViLCBzdGFydCwgZW5kKQojICAgIGRlZiBmb3JtYXQoc2VsZiwgKmFyZ3MsICoqa3dkcyk6CiMgICAgICAgIHJldHVybiBzZWxmLmRhdGEuZm9ybWF0KCphcmdzLCAqKmt3ZHMpCiMgICAgZGVmIGluZGV4KHNlbGYsIHN1Yiwgc3RhcnQ9MCwgZW5kPV9zeXMubWF4c2l6ZSk6CiMgICAgICAgIHJldHVybiBzZWxmLmRhdGEuaW5kZXgoc3ViLCBzdGFydCwgZW5kKQojICAgIGRlZiBpc2FscGhhKHNlbGYpOiByZXR1cm4gc2VsZi5kYXRhLmlzYWxwaGEoKQojICAgIGRlZiBpc2FsbnVtKHNlbGYpOiByZXR1cm4gc2VsZi5kYXRhLmlzYWxudW0oKQojICAgIGRlZiBpc2RlY2ltYWwoc2VsZik6IHJldHVybiBzZWxmLmRhdGEuaXNkZWNpbWFsKCkKIyAgICBkZWYgaXNkaWdpdChzZWxmKTogcmV0dXJuIHNlbGYuZGF0YS5pc2RpZ2l0KCkKIyAgICBkZWYgaXNpZGVudGlmaWVyKHNlbGYpOiByZXR1cm4gc2VsZi5kYXRhLmlzaWRlbnRpZmllcigpCiMgICAgZGVmIGlzbG93ZXIoc2VsZik6IHJldHVybiBzZWxmLmRhdGEuaXNsb3dlcigpCiMgICAgZGVmIGlzbnVtZXJpYyhzZWxmKTogcmV0dXJuIHNlbGYuZGF0YS5pc251bWVyaWMoKQojICAgIGRlZiBpc3NwYWNlKHNlbGYpOiByZXR1cm4gc2VsZi5kYXRhLmlzc3BhY2UoKQojICAgIGRlZiBpc3RpdGxlKHNlbGYpOiByZXR1cm4gc2VsZi5kYXRhLmlzdGl0bGUoKQojICAgIGRlZiBpc3VwcGVyKHNlbGYpOiByZXR1cm4gc2VsZi5kYXRhLmlzdXBwZXIoKQojICAgIGRlZiBqb2luKHNlbGYsIHNlcSk6IHJldHVybiBzZWxmLmRhdGEuam9pbihzZXEpCiMgICAgZGVmIGxqdXN0KHNlbGYsIHdpZHRoLCAqYXJncyk6CiMgICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLmRhdGEubGp1c3Qod2lkdGgsICphcmdzKSkKIyAgICBkZWYgbG93ZXIoc2VsZik6IHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLmRhdGEubG93ZXIoKSkKIyAgICBkZWYgbHN0cmlwKHNlbGYsIGNoYXJzPU5vbmUpOiByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhLmxzdHJpcChjaGFycykpCiMgICAgZGVmIHBhcnRpdGlvbihzZWxmLCBzZXApOgojICAgICAgICByZXR1cm4gc2VsZi5kYXRhLnBhcnRpdGlvbihzZXApCiMgICAgZGVmIHJlcGxhY2Uoc2VsZiwgb2xkLCBuZXcsIG1heHNwbGl0PS0xKToKIyAgICAgICAgaWYgaXNpbnN0YW5jZShvbGQsIFVzZXJTdHJpbmcpOgojICAgICAgICAgICAgb2xkID0gb2xkLmRhdGEKIyAgICAgICAgaWYgaXNpbnN0YW5jZShuZXcsIFVzZXJTdHJpbmcpOgojICAgICAgICAgICAgbmV3ID0gbmV3LmRhdGEKIyAgICAgICAgcmV0dXJuIHNlbGYuX19jbGFzc19fKHNlbGYuZGF0YS5yZXBsYWNlKG9sZCwgbmV3LCBtYXhzcGxpdCkpCiMgICAgZGVmIHJmaW5kKHNlbGYsIHN1Yiwgc3RhcnQ9MCwgZW5kPV9zeXMubWF4c2l6ZSk6CiMgICAgICAgIGlmIGlzaW5zdGFuY2Uoc3ViLCBVc2VyU3RyaW5nKToKIyAgICAgICAgICAgIHN1YiA9IHN1Yi5kYXRhCiMgICAgICAgIHJldHVybiBzZWxmLmRhdGEucmZpbmQoc3ViLCBzdGFydCwgZW5kKQojICAgIGRlZiByaW5kZXgoc2VsZiwgc3ViLCBzdGFydD0wLCBlbmQ9X3N5cy5tYXhzaXplKToKIyAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5yaW5kZXgoc3ViLCBzdGFydCwgZW5kKQojICAgIGRlZiByanVzdChzZWxmLCB3aWR0aCwgKmFyZ3MpOgojICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhLnJqdXN0KHdpZHRoLCAqYXJncykpCiMgICAgZGVmIHJwYXJ0aXRpb24oc2VsZiwgc2VwKToKIyAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5ycGFydGl0aW9uKHNlcCkKIyAgICBkZWYgcnN0cmlwKHNlbGYsIGNoYXJzPU5vbmUpOgojICAgICAgICByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhLnJzdHJpcChjaGFycykpCiMgICAgZGVmIHNwbGl0KHNlbGYsIHNlcD1Ob25lLCBtYXhzcGxpdD0tMSk6CiMgICAgICAgIHJldHVybiBzZWxmLmRhdGEuc3BsaXQoc2VwLCBtYXhzcGxpdCkKIyAgICBkZWYgcnNwbGl0KHNlbGYsIHNlcD1Ob25lLCBtYXhzcGxpdD0tMSk6CiMgICAgICAgIHJldHVybiBzZWxmLmRhdGEucnNwbGl0KHNlcCwgbWF4c3BsaXQpCiMgICAgZGVmIHNwbGl0bGluZXMoc2VsZiwga2VlcGVuZHM9MCk6IHJldHVybiBzZWxmLmRhdGEuc3BsaXRsaW5lcyhrZWVwZW5kcykKIyAgICBkZWYgc3RhcnRzd2l0aChzZWxmLCBwcmVmaXgsIHN0YXJ0PTAsIGVuZD1fc3lzLm1heHNpemUpOgojICAgICAgICByZXR1cm4gc2VsZi5kYXRhLnN0YXJ0c3dpdGgocHJlZml4LCBzdGFydCwgZW5kKQojICAgIGRlZiBzdHJpcChzZWxmLCBjaGFycz1Ob25lKTogcmV0dXJuIHNlbGYuX19jbGFzc19fKHNlbGYuZGF0YS5zdHJpcChjaGFycykpCiMgICAgZGVmIHN3YXBjYXNlKHNlbGYpOiByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhLnN3YXBjYXNlKCkpCiMgICAgZGVmIHRpdGxlKHNlbGYpOiByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhLnRpdGxlKCkpCiMgICAgZGVmIHRyYW5zbGF0ZShzZWxmLCAqYXJncyk6CiMgICAgICAgIHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLmRhdGEudHJhbnNsYXRlKCphcmdzKSkKIyAgICBkZWYgdXBwZXIoc2VsZik6IHJldHVybiBzZWxmLl9fY2xhc3NfXyhzZWxmLmRhdGEudXBwZXIoKSkKIyAgICBkZWYgemZpbGwoc2VsZiwgd2lkdGgpOiByZXR1cm4gc2VsZi5fX2NsYXNzX18oc2VsZi5kYXRhLnpmaWxsKHdpZHRoKSkKCg==',
'/Lib/pyindexedDB.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBweWluZGV4ZWREQjoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIGlmIG5vdCBfX0JSWVRIT05fXy5oYXNfaW5kZXhlZERCOgogICAgICAgICByYWlzZSBFeGNlcHRpb24oIk5vdEltcGxlbWVudGVkRXJyb3IiLCAiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpbmRleGVkREIiKQogICAgICAgICByZXR1cm4KCiAgICAgIHNlbGYuX2luZGV4ZWREQj1fX0JSWVRIT05fXy5pbmRleGVkREIoKQogICAgICBzZWxmLl9kYj1Ob25lCiAgICAgIHNlbGYuX3ZlcnNpb249Tm9uZQoKICBkZWYgX29uc3VjY2VzcyhzZWxmLCBldmVudCk6CiAgICAgIHNlbGYuX2RiPWV2ZW50LnRhcmdldC5yZXN1bHQKCiAgZGVmIG9wZW4oc2VsZiwgbmFtZSwgb25zdWNjZXNzLCB2ZXJzaW9uPTEuMCwgb25lcnJvcj1Ob25lLCAKICAgICAgICAgICBvbnVwZ3JhZGVuZWVkZWQ9Tm9uZSk6CiAgICAgIHNlbGYuX3ZlcnNpb249dmVyc2lvbgogICAgICBfcmVzdWx0PXNlbGYuX2luZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pCiAgICAgIF9zdWNjZXNzPUV2ZW50TGlzdGVuZXIoW3NlbGYuX29uc3VjY2Vzcywgb25zdWNjZXNzXSkKICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9X3N1Y2Nlc3MuZmlyZQogICAgICBfcmVzdWx0Lm9udXBncmFkZW5lZWRlZD1vbnVwZ3JhZGVuZWVkZWQKCiAgICAgICNpZiBvbmVycm9yIGlzIE5vbmU6CiAgICAgIGRlZiBvbmVycm9yKGUpOgogICAgICAgICAgcHJpbnQoIm9uZXJyb3I6ICVzOiVzIiAlICAoZS50eXBlLCBlLnRhcmdldC5yZXN1bHQpKQoKICAgICAgZGVmIG9uYmxvY2tlZChlKToKICAgICAgICAgIHByaW50KCJibG9ja2VkOiAlczolcyIgJSAgKGUudHlwZSwgZS5yZXN1bHQpKQoKICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKICAgICAgX3Jlc3VsdC5vbmJsb2NrZWQ9b25ibG9ja2VkCgogIGRlZiB0cmFuc2FjdGlvbihzZWxmLCBlbnRpdGllcywgbW9kZT0ncmVhZCcpOgogICAgICByZXR1cm4gVHJhbnNhY3Rpb24oc2VsZi5fZGIudHJhbnNhY3Rpb24oZW50aXRpZXMsIG1vZGUpKQoKY2xhc3MgVHJhbnNhY3Rpb246CiAgZGVmIF9faW5pdF9fKHNlbGYsIHRyYW5zYWN0aW9uKToKICAgICAgc2VsZi5fdHJhbnNhY3Rpb249dHJhbnNhY3Rpb24KCiAgZGVmIG9iamVjdFN0b3JlKHNlbGYsIG5hbWUpOgogICAgICByZXR1cm4gT2JqZWN0U3RvcmUoc2VsZi5fdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUobmFtZSkpCgpjbGFzcyBPYmplY3RTdG9yZToKICBkZWYgX19pbml0X18oc2VsZiwgb2JqZWN0U3RvcmUpOgogICAgICBzZWxmLl9vYmplY3RTdG9yZT1vYmplY3RTdG9yZQogICAgICBzZWxmLl9kYXRhPVtdCgogIGRlZiBjbGVhcihzZWxmLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1zZWxmLl9vYmplY3RTdG9yZS5jbGVhcigpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIF9oZWxwZXIoc2VsZiwgZnVuYywgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1mdW5jKG9iamVjdCkKCiAgICAgIGlmIG9uc3VjY2VzcyBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogICAgICBpZiBvbmVycm9yIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uZXJyb3I9b25lcnJvcgoKICBkZWYgcHV0KHNlbGYsIG9iamVjdCwga2V5PU5vbmUsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOgogICAgICBfcj1zZWxmLl9vYmplY3RTdG9yZS5wdXQob2JqZWN0LCBrZXkpCiAgICAgIF9yLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKICAgICAgX3Iub25lcnJvcj1vbmVycm9yCgogIGRlZiBhZGQoc2VsZiwgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmFkZCwgb2JqZWN0LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCgogIGRlZiBkZWxldGUoc2VsZiwgaW5kZXgsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOiAKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmRlbGV0ZSwgaW5kZXgsIG9uc3VjY2Vzcywgb25lcnJvcikKICAgICAKICBkZWYgcXVlcnkoc2VsZiwgKmFyZ3MpOgogICAgICBzZWxmLl9kYXRhPVtdCiAgICAgIGRlZiBvbnN1Y2Nlc3MoZXZlbnQpOgogICAgICAgICAgY3Vyc29yPWV2ZW50LnRhcmdldC5yZXN1bHQKICAgICAgICAgIGlmIGN1cnNvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgIHNlbGYuX2RhdGEuYXBwZW5kKGN1cnNvci52YWx1ZSkKICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpCgogICAgICBzZWxmLl9vYmplY3RTdG9yZS5vcGVuQ3Vyc29yKGFyZ3MpLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgZGVmIGZldGNoYWxsKHNlbGYpOgogICAgICB5aWVsZCBzZWxmLl9kYXRhCgogIGRlZiBnZXQoc2VsZiwga2V5LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmdldCwga2V5LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCg==',
'/Lib/linecache.py':'IiIiQ2FjaGUgbGluZXMgZnJvbSBmaWxlcy4KClRoaXMgaXMgaW50ZW5kZWQgdG8gcmVhZCBsaW5lcyBmcm9tIG1vZHVsZXMgaW1wb3J0ZWQgLS0gaGVuY2UgaWYgYSBmaWxlbmFtZQppcyBub3QgZm91bmQsIGl0IHdpbGwgbG9vayBkb3duIHRoZSBtb2R1bGUgc2VhcmNoIHBhdGggZm9yIGEgZmlsZSBieQp0aGF0IG5hbWUuCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKI2ZpeG1lIGJyeXRob24KI2ltcG9ydCB0b2tlbml6ZQoKX19hbGxfXyA9IFsiZ2V0bGluZSIsICJjbGVhcmNhY2hlIiwgImNoZWNrY2FjaGUiXQoKZGVmIGdldGxpbmUoZmlsZW5hbWUsIGxpbmVubywgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICBsaW5lcyA9IGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscykKICAgIGlmIDEgPD0gbGluZW5vIDw9IGxlbihsaW5lcyk6CiAgICAgICAgcmV0dXJuIGxpbmVzW2xpbmVuby0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgojIFRoZSBjYWNoZQoKY2FjaGUgPSB7fSAjIFRoZSBjYWNoZQoKCmRlZiBjbGVhcmNhY2hlKCk6CiAgICAiIiJDbGVhciB0aGUgY2FjaGUgZW50aXJlbHkuIiIiCgogICAgZ2xvYmFsIGNhY2hlCiAgICBjYWNoZSA9IHt9CgoKZGVmIGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgICIiIkdldCB0aGUgbGluZXMgZm9yIGEgZmlsZSBmcm9tIHRoZSBjYWNoZS4KICAgIFVwZGF0ZSB0aGUgY2FjaGUgaWYgaXQgZG9lc24ndCBjb250YWluIGFuIGVudHJ5IGZvciB0aGlzIGZpbGUgYWxyZWFkeS4iIiIKCiAgICBpZiBmaWxlbmFtZSBpbiBjYWNoZToKICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCiAgICBlbHNlOgogICAgICAgIHJldHVybiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHMpCgoKZGVmIGNoZWNrY2FjaGUoZmlsZW5hbWU9Tm9uZSk6CiAgICAiIiJEaXNjYXJkIGNhY2hlIGVudHJpZXMgdGhhdCBhcmUgb3V0IG9mIGRhdGUuCiAgICAoVGhpcyBpcyBub3QgY2hlY2tlZCB1cG9uIGVhY2ggY2FsbCEpIiIiCgogICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICBmaWxlbmFtZXMgPSBsaXN0KGNhY2hlLmtleXMoKSkKICAgIGVsc2U6CiAgICAgICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgICAgIGZpbGVuYW1lcyA9IFtmaWxlbmFtZV0KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KCiAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgIHNpemUsIG10aW1lLCBsaW5lcywgZnVsbG5hbWUgPSBjYWNoZVtmaWxlbmFtZV0KICAgICAgICBpZiBtdGltZSBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZSAgICMgbm8tb3AgZm9yIGZpbGVzIGxvYWRlZCB2aWEgYSBfX2xvYWRlcl9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWwgY2FjaGVbZmlsZW5hbWVdCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2l6ZSAhPSBzdGF0LnN0X3NpemUgb3IgbXRpbWUgIT0gc3RhdC5zdF9tdGltZToKICAgICAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQoKCmRlZiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICAiIiJVcGRhdGUgYSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuIGl0cyBsaXN0IG9mIGxpbmVzLgogICAgSWYgc29tZXRoaW5nJ3Mgd3JvbmcsIHByaW50IGEgbWVzc2FnZSwgZGlzY2FyZCB0aGUgY2FjaGUgZW50cnksCiAgICBhbmQgcmV0dXJuIGFuIGVtcHR5IGxpc3QuIiIiCgogICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQogICAgaWYgbm90IGZpbGVuYW1lIG9yIChmaWxlbmFtZS5zdGFydHN3aXRoKCc8JykgYW5kIGZpbGVuYW1lLmVuZHN3aXRoKCc+JykpOgogICAgICAgIHJldHVybiBbXQoKICAgIGZ1bGxuYW1lID0gZmlsZW5hbWUKICAgIHRyeToKICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgIGJhc2VuYW1lID0gZmlsZW5hbWUKCiAgICAgICAgIyBUcnkgZm9yIGEgX19sb2FkZXJfXywgaWYgYXZhaWxhYmxlCiAgICAgICAgaWYgbW9kdWxlX2dsb2JhbHMgYW5kICdfX2xvYWRlcl9fJyBpbiBtb2R1bGVfZ2xvYmFsczoKICAgICAgICAgICAgbmFtZSA9IG1vZHVsZV9nbG9iYWxzLmdldCgnX19uYW1lX18nKQogICAgICAgICAgICBsb2FkZXIgPSBtb2R1bGVfZ2xvYmFsc1snX19sb2FkZXJfXyddCiAgICAgICAgICAgIGdldF9zb3VyY2UgPSBnZXRhdHRyKGxvYWRlciwgJ2dldF9zb3VyY2UnLCBOb25lKQoKICAgICAgICAgICAgaWYgbmFtZSBhbmQgZ2V0X3NvdXJjZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZ2V0X3NvdXJjZShuYW1lKQogICAgICAgICAgICAgICAgZXhjZXB0IChJbXBvcnRFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gbHVjaywgdGhlIFBFUDMwMiBsb2FkZXIgY2Fubm90IGZpbmQgdGhlIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAjIGZvciB0aGlzIG1vZHVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbZmlsZW5hbWVdID0gKAogICAgICAgICAgICAgICAgICAgICAgICBsZW4oZGF0YSksIE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIFtsaW5lKydcbicgZm9yIGxpbmUgaW4gZGF0YS5zcGxpdGxpbmVzKCldLCBmdWxsbmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCgogICAgICAgICMgVHJ5IGxvb2tpbmcgdGhyb3VnaCB0aGUgbW9kdWxlIHNlYXJjaCBwYXRoLCB3aGljaCBpcyBvbmx5IHVzZWZ1bAogICAgICAgICMgd2hlbiBoYW5kbGluZyBhIHJlbGF0aXZlIGZpbGVuYW1lLgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgIyBUYWtlIGNhcmUgdG8gaGFuZGxlIHBhY2thZ2VzLgogICAgICAgIGlmIGJhc2VuYW1lID09ICdfX2luaXRfXy5weSc6CiAgICAgICAgICAgICMgZmlsZW5hbWUgcmVmZXJlcyB0byBhIHBhY2thZ2UKICAgICAgICAgICAgYmFzZW5hbWUgPSBmaWxlbmFtZQoKICAgICAgICBmb3IgZGlybmFtZSBpbiBzeXMucGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgYmFzZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBBdHRyaWJ1dGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIE5vdCBzdWZmaWNpZW50bHkgc3RyaW5nLWxpa2UgdG8gZG8gYW55dGhpbmcgdXNlZnVsIHdpdGguCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICNmaXhtZSBicnl0aG9uLCBpbnZhbGlkIHN5bnRheCAKICAgICAgICAgICAgI2V4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICNmaXhtZSBicnl0aG9uIHVuZXhwZWN0ZWQgdG9rZW4gZWxzZQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgcmV0dXJuIFtdCiAgICB0cnk6CiAgICAgICAgZnA9b3BlbihmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICN3aXRoIHRva2VuaXplLm9wZW4oZnVsbG5hbWUpIGFzIGZwOgogICAgICAgIGxpbmVzID0gZnAucmVhZGxpbmVzKCkKICAgICAgICBmcC5jbG9zZSgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gW10KICAgIGlmIGxpbmVzIGFuZCBub3QgbGluZXNbLTFdLmVuZHN3aXRoKCdcbicpOgogICAgICAgIGxpbmVzWy0xXSArPSAnXG4nCiAgICBzaXplLCBtdGltZSA9IHN0YXQuc3Rfc2l6ZSwgc3RhdC5zdF9tdGltZQogICAgY2FjaGVbZmlsZW5hbWVdID0gc2l6ZSwgbXRpbWUsIGxpbmVzLCBmdWxsbmFtZQogICAgcmV0dXJuIGxpbmVzCg==',
'/Lib/_abcoll.py':'IyBDb3B5cmlnaHQgMjAwNyBHb29nbGUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIyBMaWNlbnNlZCB0byBQU0YgdW5kZXIgYSBDb250cmlidXRvciBBZ3JlZW1lbnQuCgoiIiJBYnN0cmFjdCBCYXNlIENsYXNzZXMgKEFCQ3MpIGZvciBjb2xsZWN0aW9ucywgYWNjb3JkaW5nIHRvIFBFUCAzMTE5LgoKRE9OJ1QgVVNFIFRISVMgTU9EVUxFIERJUkVDVExZISAgVGhlIGNsYXNzZXMgaGVyZSBzaG91bGQgYmUgaW1wb3J0ZWQKdmlhIGNvbGxlY3Rpb25zOyB0aGV5IGFyZSBkZWZpbmVkIGhlcmUgb25seSB0byBhbGxldmlhdGUgY2VydGFpbgpib290c3RyYXBwaW5nIGlzc3Vlcy4gIFVuaXQgdGVzdHMgYXJlIGluIHRlc3RfY29sbGVjdGlvbnMuCiIiIgoKI2Zyb20gYWJjIGltcG9ydCBBQkNNZXRhLCBhYnN0cmFjdG1ldGhvZAppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJIYXNoYWJsZSIsICJJdGVyYWJsZSIsICJJdGVyYXRvciIsCiAgICAgICAgICAgIlNpemVkIiwgIkNvbnRhaW5lciIsICJDYWxsYWJsZSIsCiAgICAgICAgICAgIlNldCIsICJNdXRhYmxlU2V0IiwKICAgICAgICAgICAiTWFwcGluZyIsICJNdXRhYmxlTWFwcGluZyIsCiAgICAgICAgICAgIk1hcHBpbmdWaWV3IiwgIktleXNWaWV3IiwgIkl0ZW1zVmlldyIsICJWYWx1ZXNWaWV3IiwKICAgICAgICAgICAiU2VxdWVuY2UiLCAiTXV0YWJsZVNlcXVlbmNlIiwKICAgICAgICAgICAiQnl0ZVN0cmluZyIsCiAgICAgICAgICAgXQoKIiIiCiMjIyBjb2xsZWN0aW9uIHJlbGF0ZWQgdHlwZXMgd2hpY2ggYXJlIG5vdCBleHBvc2VkIHRocm91Z2ggYnVpbHRpbiAjIyMKIyMgaXRlcmF0b3JzICMjCiNmaXhtZSBicnl0aG9uCiNieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcihiJycpKQpieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcignJykpCiNmaXhtZSBicnl0aG9uCiNieXRlYXJyYXlfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoYnl0ZWFycmF5KCkpKQojY2FsbGFibGVfaXRlcmF0b3IgPSA/Pz8KZGljdF9rZXlpdGVyYXRvciA9IHR5cGUoaXRlcih7fS5rZXlzKCkpKQpkaWN0X3ZhbHVlaXRlcmF0b3IgPSB0eXBlKGl0ZXIoe30udmFsdWVzKCkpKQpkaWN0X2l0ZW1pdGVyYXRvciA9IHR5cGUoaXRlcih7fS5pdGVtcygpKSkKbGlzdF9pdGVyYXRvciA9IHR5cGUoaXRlcihbXSkpCmxpc3RfcmV2ZXJzZWl0ZXJhdG9yID0gdHlwZShpdGVyKHJldmVyc2VkKFtdKSkpCnJhbmdlX2l0ZXJhdG9yID0gdHlwZShpdGVyKHJhbmdlKDApKSkKc2V0X2l0ZXJhdG9yID0gdHlwZShpdGVyKHNldCgpKSkKc3RyX2l0ZXJhdG9yID0gdHlwZShpdGVyKCIiKSkKdHVwbGVfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoKCkpKQp6aXBfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoemlwKCkpKQojIyB2aWV3cyAjIwpkaWN0X2tleXMgPSB0eXBlKHt9LmtleXMoKSkKZGljdF92YWx1ZXMgPSB0eXBlKHt9LnZhbHVlcygpKQpkaWN0X2l0ZW1zID0gdHlwZSh7fS5pdGVtcygpKQojIyBtaXNjICMjCmRpY3RfcHJveHkgPSB0eXBlKHR5cGUuX19kaWN0X18pCiIiIgoKZGVmIGFic3RyYWN0bWV0aG9kKHNlbGYpOgogICAgcmV0dXJuIHNlbGYKCiMjIyBPTkUtVFJJQ0sgUE9OSUVTICMjIwoKCiNjbGFzcyBJdGVyYWJsZShtZXRhY2xhc3M9QUJDTWV0YSk6CmNsYXNzIEl0ZXJhYmxlOgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHdoaWxlIEZhbHNlOgogICAgICAgICAgICB5aWVsZCBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBJdGVyYWJsZToKICAgICAgICAgICAgaWYgYW55KCJfX2l0ZXJfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCgojY2xhc3MgU2l6ZWQobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBTaXplZDoKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAwCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBTaXplZDoKICAgICAgICAgICAgaWYgYW55KCJfX2xlbl9fIiBpbiBCLl9fZGljdF9fIGZvciBCIGluIEMuX19tcm9fXyk6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKCiNjbGFzcyBDb250YWluZXIobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBDb250YWluZXI6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHgpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9fc3ViY2xhc3Nob29rX18oY2xzLCBDKToKICAgICAgICBpZiBjbHMgaXMgQ29udGFpbmVyOgogICAgICAgICAgICBpZiBhbnkoIl9fY29udGFpbnNfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiMjIyBNQVBQSU5HUyAjIyMKCgpjbGFzcyBNYXBwaW5nKFNpemVkLCBJdGVyYWJsZSwgQ29udGFpbmVyKToKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGZba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICByZXR1cm4gS2V5c1ZpZXcoc2VsZikKCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgcmV0dXJuIEl0ZW1zVmlldyhzZWxmKQoKICAgIGRlZiB2YWx1ZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIFZhbHVlc1ZpZXcoc2VsZikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgTWFwcGluZyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBkaWN0KHNlbGYuaXRlbXMoKSkgPT0gZGljdChvdGhlci5pdGVtcygpKQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3QgKHNlbGYgPT0gb3RoZXIpCgoKY2xhc3MgTXV0YWJsZU1hcHBpbmcoTWFwcGluZyk6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgcmFpc2UgS2V5RXJyb3IKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgX19tYXJrZXIgPSBvYmplY3QoKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCBkZWZhdWx0PV9fbWFya2VyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIHNlbGYuX19tYXJrZXI6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbCBzZWxmW2tleV0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBrZXkgPSBuZXh0KGl0ZXIoc2VsZikpCiAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yCiAgICAgICAgdmFsdWUgPSBzZWxmW2tleV0KICAgICAgICBkZWwgc2VsZltrZXldCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc2VsZi5wb3BpdGVtKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKCphcmdzLCAqKmt3ZHMpOgogICAgICAgIGlmIGxlbihhcmdzKSA+IDI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidXBkYXRlKCkgdGFrZXMgYXQgbW9zdCAyIHBvc2l0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyAoe30gZ2l2ZW4pIi5mb3JtYXQobGVuKGFyZ3MpKSkKICAgICAgICBlbGlmIG5vdCBhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInVwZGF0ZSgpIHRha2VzIGF0IGxlYXN0IDEgYXJndW1lbnQgKDAgZ2l2ZW4pIikKICAgICAgICBzZWxmID0gYXJnc1swXQogICAgICAgIG90aGVyID0gYXJnc1sxXSBpZiBsZW4oYXJncykgPj0gMiBlbHNlICgpCgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIE1hcHBpbmcpOgogICAgICAgICAgICBmb3Iga2V5IGluIG90aGVyOgogICAgICAgICAgICAgICAgc2VsZltrZXldID0gb3RoZXJba2V5XQogICAgICAgIGVsaWYgaGFzYXR0cihvdGhlciwgImtleXMiKToKICAgICAgICAgICAgZm9yIGtleSBpbiBvdGhlci5rZXlzKCk6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSBvdGhlcltrZXldCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gb3RoZXI6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3ZHMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWUKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmW2tleV0gPSBkZWZhdWx0CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiNNdXRhYmxlTWFwcGluZy5yZWdpc3RlcihkaWN0KQo=',
'/Lib/pydom.py':'',
'/Lib/keyword.py':'a3dsaXN0ID0gWwojLS1zdGFydCBrZXl3b3Jkcy0tCiAgICAgICAgJ0ZhbHNlJywKICAgICAgICAnTm9uZScsCiAgICAgICAgJ1RydWUnLAogICAgICAgICdhbmQnLAogICAgICAgICdhcycsCiAgICAgICAgJ2Fzc2VydCcsCiAgICAgICAgJ2JyZWFrJywKICAgICAgICAnY2xhc3MnLAogICAgICAgICdjb250aW51ZScsCiAgICAgICAgJ2RlZicsCiAgICAgICAgJ2RlbCcsCiAgICAgICAgJ2VsaWYnLAogICAgICAgICdlbHNlJywKICAgICAgICAnZXhjZXB0JywKICAgICAgICAnZmluYWxseScsCiAgICAgICAgJ2ZvcicsCiAgICAgICAgJ2Zyb20nLAogICAgICAgICdnbG9iYWwnLAogICAgICAgICdpZicsCiAgICAgICAgJ2ltcG9ydCcsCiAgICAgICAgJ2luJywKICAgICAgICAnaXMnLAogICAgICAgICdsYW1iZGEnLAogICAgICAgICdub25sb2NhbCcsCiAgICAgICAgJ25vdCcsCiAgICAgICAgJ29yJywKICAgICAgICAncGFzcycsCiAgICAgICAgJ3JhaXNlJywKICAgICAgICAncmV0dXJuJywKICAgICAgICAndHJ5JywKICAgICAgICAnd2hpbGUnLAogICAgICAgICd3aXRoJywKICAgICAgICAneWllbGQnLAojLS1lbmQga2V5d29yZHMtLQogICAgICAgIF0KCmRlZiBpc2tleXdvcmQod29yZCk6CiAgICByZXR1cm4gd29yZCBpbiBrd2xpc3QK',
'/Lib/operator.py':'',
'/Lib/sys.py':'X19zdGRvdXRfXz1nZXRhdHRyKGRvYywiJHN0ZG91dCIpCl9fc3RkZXJyX189Z2V0YXR0cihkb2MsIiRzdGRlcnIiKQoKc3Rkb3V0ID0gZ2V0YXR0cihkb2MsIiRzdGRvdXQiKQpzdGRlcnIgPSBnZXRhdHRyKGRvYywiJHN0ZGVyciIpCgptb2R1bGVzPV9fQlJZVEhPTl9fLm1vZHVsZXMKCmhhc19sb2NhbF9zdG9yYWdlPV9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlCmhhc19qc29uPV9fQlJZVEhPTl9fLmhhc19qc29uCnZlcnNpb25faW5mbz1fX0JSWVRIT05fXy52ZXJzaW9uX2luZm8KcGF0aD1fX0JSWVRIT05fXy5wYXRoCmJ1aWx0aW5fbW9kdWxlX25hbWVzPVsncG9zaXgnXQoKYnl0ZW9yZGVyPSdsaXR0bGUnCm1heHNpemU9OTAwNzE5OTI1NDc0MDk5MiAgICNsYXJnZXN0IGludGVnZXIuLgptYXh1bmljb2RlPTExMTQxMTEKCnBsYXRmb3JtPSJicnl0aG9uIgp3YXJub3B0aW9ucz1bXQoKY2xhc3MgZmxhZ19jbGFzczoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIHNlbGYuZGVidWc9MAogICAgICBzZWxmLmluc3BlY3Q9MAogICAgICBzZWxmLmludGVyYWN0aXZlPTAKICAgICAgc2VsZi5vcHRpbWl6ZT0wCiAgICAgIHNlbGYuZG9udF93cml0ZV9ieXRlY29kZT0wCiAgICAgIHNlbGYubm9fdXNlcl9zaXRlPTAKICAgICAgc2VsZi5ub19zaXRlPTAKICAgICAgc2VsZi5pZ25vcmVfZW52aXJvbm1lbnQ9MAogICAgICBzZWxmLnZlcmJvc2U9MAogICAgICBzZWxmLmJ5dGVzX3dhcm5pbmc9MAogICAgICBzZWxmLnF1aWV0PTAKICAgICAgc2VsZi5oYXNoX3JhbmRvbWl6YXRpb249MQoKZmxhZ3M9ZmxhZ19jbGFzcygpCgo=',
'/Lib/os.py':'aW1wb3J0IF9vcwoKbmFtZT0iYnJ5dGhvbiIKCiNhbHRzZXA9Tm9uZQojY3VyZGlyPSIuIgoKZGVmIGRldm51bGwoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGRldm51bGwgbm90IHN1cHBvcnRlZCcpCgojZXh0c2VwPScuJwoKZGVmIGdldGxvYWRhdmcoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGdldGxvYWRhdmcgbm90IHN1cHBvcnRlZCcpCgojbGluZXNlcD0iXG4iCiNwYXRoc2VwPSI7IgojcGFyZGlyPSIuLiIKI3NlcD0nLycKCmRlZiB1cmFuZG9tKGxlbmd0aCk6CiAgICBfYz1bXQogICAgZm9yIF9pIGluIHJhbmdlKGxlbmd0aCk6CiAgICAgICAgX2MuYXBwZW5kKGNocihfb3MucmFuZGludCgwLDI1NSkpKQogICAgICAgIAogICAgcmV0dXJuICcnLmpvaW4oX2MpCgojaW1wb3J0IHBvc2l4cGF0aCBhcyBwYXRoCiNzeXMubW9kdWxlc1snb3MucGF0aCddID0gcGF0aAoKI2Zyb20gb3MucGF0aCBpbXBvcnQgKGN1cmRpciwgcGFyZGlyLCBzZXAsIHBhdGhzZXAsIGRlZnBhdGgsIGV4dHNlcCwgYWx0c2VwKQoKIyBQeXRob24gdXNlcyBmaXhlZCB2YWx1ZXMgZm9yIHRoZSBTRUVLXyBjb25zdGFudHM7IHRoZXkgYXJlIG1hcHBlZAojIHRvIG5hdGl2ZSBjb25zdGFudHMgaWYgbmVjZXNzYXJ5IGluIHBvc2l4bW9kdWxlLmMKU0VFS19TRVQgPSAwClNFRUtfQ1VSID0gMQpTRUVLX0VORCA9IDIKCmRlZiB3YWxrKHRvcCwgdG9wZG93bj1UcnVlLCBvbmVycm9yPU5vbmUsIGZvbGxvd2xpbmtzPUZhbHNlKToKICAgICNyZWNlaXZlIHNjb3BlIGVycm9yIGluIGJyeXRob24KICAgICMgd2h5IGhhdmUgb3Mud2FsayBpbiBicnl0aG9uPyAgc2VydmVyIHNpZGUgamF2YXNjcmlwdCAobm9kZWpzKQogICAgIyBpbW1lZGlhdGVseSBjYW4gdXNlIG9zLndhbGsgdG8gY29tcGlsZSBsaWJzIGFuZCBMaWIgbW9kdWxlcwogICAgIyB0byBqYXZhc2NyaXB0IGVxdWl2YWxlbnQuLgogICAgT1NFcnJvcignRnVuY3Rpb24gb3Mud2FsayBub3Qgc3VwcG9ydGVkIHlldCcpCiAgICByZXR1cm4KCiAgICAiIiJEaXJlY3RvcnkgdHJlZSBnZW5lcmF0b3IuCgogICAgRm9yIGVhY2ggZGlyZWN0b3J5IGluIHRoZSBkaXJlY3RvcnkgdHJlZSByb290ZWQgYXQgdG9wIChpbmNsdWRpbmcgdG9wCiAgICBpdHNlbGYsIGJ1dCBleGNsdWRpbmcgJy4nIGFuZCAnLi4nKSwgeWllbGRzIGEgMy10dXBsZQoKICAgICAgICBkaXJwYXRoLCBkaXJuYW1lcywgZmlsZW5hbWVzCgogICAgZGlycGF0aCBpcyBhIHN0cmluZywgdGhlIHBhdGggdG8gdGhlIGRpcmVjdG9yeS4gIGRpcm5hbWVzIGlzIGEgbGlzdCBvZgogICAgdGhlIG5hbWVzIG9mIHRoZSBzdWJkaXJlY3RvcmllcyBpbiBkaXJwYXRoIChleGNsdWRpbmcgJy4nIGFuZCAnLi4nKS4KICAgIGZpbGVuYW1lcyBpcyBhIGxpc3Qgb2YgdGhlIG5hbWVzIG9mIHRoZSBub24tZGlyZWN0b3J5IGZpbGVzIGluIGRpcnBhdGguCiAgICBOb3RlIHRoYXQgdGhlIG5hbWVzIGluIHRoZSBsaXN0cyBhcmUganVzdCBuYW1lcywgd2l0aCBubyBwYXRoIGNvbXBvbmVudHMuCiAgICBUbyBnZXQgYSBmdWxsIHBhdGggKHdoaWNoIGJlZ2lucyB3aXRoIHRvcCkgdG8gYSBmaWxlIG9yIGRpcmVjdG9yeSBpbgogICAgZGlycGF0aCwgZG8gb3MucGF0aC5qb2luKGRpcnBhdGgsIG5hbWUpLgoKICAgIElmIG9wdGlvbmFsIGFyZyAndG9wZG93bicgaXMgdHJ1ZSBvciBub3Qgc3BlY2lmaWVkLCB0aGUgdHJpcGxlIGZvciBhCiAgICBkaXJlY3RvcnkgaXMgZ2VuZXJhdGVkIGJlZm9yZSB0aGUgdHJpcGxlcyBmb3IgYW55IG9mIGl0cyBzdWJkaXJlY3RvcmllcwogICAgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgdG9wIGRvd24pLiAgSWYgdG9wZG93biBpcyBmYWxzZSwgdGhlIHRyaXBsZQogICAgZm9yIGEgZGlyZWN0b3J5IGlzIGdlbmVyYXRlZCBhZnRlciB0aGUgdHJpcGxlcyBmb3IgYWxsIG9mIGl0cwogICAgc3ViZGlyZWN0b3JpZXMgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgYm90dG9tIHVwKS4KCiAgICBXaGVuIHRvcGRvd24gaXMgdHJ1ZSwgdGhlIGNhbGxlciBjYW4gbW9kaWZ5IHRoZSBkaXJuYW1lcyBsaXN0IGluLXBsYWNlCiAgICAoZS5nLiwgdmlhIGRlbCBvciBzbGljZSBhc3NpZ25tZW50KSwgYW5kIHdhbGsgd2lsbCBvbmx5IHJlY3Vyc2UgaW50byB0aGUKICAgIHN1YmRpcmVjdG9yaWVzIHdob3NlIG5hbWVzIHJlbWFpbiBpbiBkaXJuYW1lczsgdGhpcyBjYW4gYmUgdXNlZCB0byBwcnVuZQogICAgdGhlIHNlYXJjaCwgb3IgdG8gaW1wb3NlIGEgc3BlY2lmaWMgb3JkZXIgb2YgdmlzaXRpbmcuICBNb2RpZnlpbmcKICAgIGRpcm5hbWVzIHdoZW4gdG9wZG93biBpcyBmYWxzZSBpcyBpbmVmZmVjdGl2ZSwgc2luY2UgdGhlIGRpcmVjdG9yaWVzIGluCiAgICBkaXJuYW1lcyBoYXZlIGFscmVhZHkgYmVlbiBnZW5lcmF0ZWQgYnkgdGhlIHRpbWUgZGlybmFtZXMgaXRzZWxmIGlzCiAgICBnZW5lcmF0ZWQuCgogICAgQnkgZGVmYXVsdCBlcnJvcnMgZnJvbSB0aGUgb3MubGlzdGRpcigpIGNhbGwgYXJlIGlnbm9yZWQuICBJZgogICAgb3B0aW9uYWwgYXJnICdvbmVycm9yJyBpcyBzcGVjaWZpZWQsIGl0IHNob3VsZCBiZSBhIGZ1bmN0aW9uOyBpdAogICAgd2lsbCBiZSBjYWxsZWQgd2l0aCBvbmUgYXJndW1lbnQsIGFuIG9zLmVycm9yIGluc3RhbmNlLiAgSXQgY2FuCiAgICByZXBvcnQgdGhlIGVycm9yIHRvIGNvbnRpbnVlIHdpdGggdGhlIHdhbGssIG9yIHJhaXNlIHRoZSBleGNlcHRpb24KICAgIHRvIGFib3J0IHRoZSB3YWxrLiAgTm90ZSB0aGF0IHRoZSBmaWxlbmFtZSBpcyBhdmFpbGFibGUgYXMgdGhlCiAgICBmaWxlbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGV4Y2VwdGlvbiBvYmplY3QuCgogICAgQnkgZGVmYXVsdCwgb3Mud2FsayBkb2VzIG5vdCBmb2xsb3cgc3ltYm9saWMgbGlua3MgdG8gc3ViZGlyZWN0b3JpZXMgb24KICAgIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHRoZW0uICBJbiBvcmRlciB0byBnZXQgdGhpcyBmdW5jdGlvbmFsaXR5LCBzZXQgdGhlCiAgICBvcHRpb25hbCBhcmd1bWVudCAnZm9sbG93bGlua3MnIHRvIHRydWUuCgogICAgQ2F1dGlvbjogIGlmIHlvdSBwYXNzIGEgcmVsYXRpdmUgcGF0aG5hbWUgZm9yIHRvcCwgZG9uJ3QgY2hhbmdlIHRoZQogICAgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBiZXR3ZWVuIHJlc3VtcHRpb25zIG9mIHdhbGsuICB3YWxrIG5ldmVyCiAgICBjaGFuZ2VzIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgYW5kIGFzc3VtZXMgdGhhdCB0aGUgY2xpZW50IGRvZXNuJ3QKICAgIGVpdGhlci4KCiAgICBFeGFtcGxlOgoKICAgIGltcG9ydCBvcwogICAgZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luLCBnZXRzaXplCiAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsaygncHl0aG9uL0xpYi9lbWFpbCcpOgogICAgICAgIHByaW50KHJvb3QsICJjb25zdW1lcyIsIGVuZD0iIikKICAgICAgICBwcmludChzdW0oW2dldHNpemUoam9pbihyb290LCBuYW1lKSkgZm9yIG5hbWUgaW4gZmlsZXNdKSwgZW5kPSIiKQogICAgICAgIHByaW50KCJieXRlcyBpbiIsIGxlbihmaWxlcyksICJub24tZGlyZWN0b3J5IGZpbGVzIikKICAgICAgICBpZiAnQ1ZTJyBpbiBkaXJzOgogICAgICAgICAgICBkaXJzLnJlbW92ZSgnQ1ZTJykgICMgZG9uJ3QgdmlzaXQgQ1ZTIGRpcmVjdG9yaWVzCiAgICAiIiIKICAgICIiIgogICAgCiAgICBpc2xpbmssIGpvaW4sIGlzZGlyID0gcGF0aC5pc2xpbmssIHBhdGguam9pbiwgcGF0aC5pc2RpcgoKICAgICMgV2UgbWF5IG5vdCBoYXZlIHJlYWQgcGVybWlzc2lvbiBmb3IgdG9wLCBpbiB3aGljaCBjYXNlIHdlIGNhbid0CiAgICAjIGdldCBhIGxpc3Qgb2YgdGhlIGZpbGVzIHRoZSBkaXJlY3RvcnkgY29udGFpbnMuICBvcy53YWxrCiAgICAjIGFsd2F5cyBzdXBwcmVzc2VkIHRoZSBleGNlcHRpb24gdGhlbiwgcmF0aGVyIHRoYW4gYmxvdyB1cCBmb3IgYQogICAgIyBtaW5vciByZWFzb24gd2hlbiAoc2F5KSBhIHRob3VzYW5kIHJlYWRhYmxlIGRpcmVjdG9yaWVzIGFyZSBzdGlsbAogICAgIyBsZWZ0IHRvIHZpc2l0LiAgVGhhdCBsb2dpYyBpcyBjb3BpZWQgaGVyZS4KICAgIHRyeToKICAgICAgICAjIE5vdGUgdGhhdCBsaXN0ZGlyIGFuZCBlcnJvciBhcmUgZ2xvYmFscyBpbiB0aGlzIG1vZHVsZSBkdWUKICAgICAgICAjIHRvIGVhcmxpZXIgaW1wb3J0LSouCiAgICAgICAgbmFtZXMgPSBsaXN0ZGlyKHRvcCkKICAgIGV4Y2VwdCBlcnJvciBhcyBlcnI6CiAgICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgb25lcnJvcihlcnIpCiAgICAgICAgcmV0dXJuCiAgICAKICAgIGRpcnMsIG5vbmRpcnMgPSBbXSwgW10KICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgIGlmIGlzZGlyKGpvaW4odG9wLCBuYW1lKSk6CiAgICAgICAgICAgIGRpcnMuYXBwZW5kKG5hbWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbm9uZGlycy5hcHBlbmQobmFtZSkKICAgIAogICAgaWYgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgIAogICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICBuZXdfcGF0aCA9IGpvaW4odG9wLCBuYW1lKQogICAgICAgIGlmIGZvbGxvd2xpbmtzIG9yIG5vdCBpc2xpbmsobmV3X3BhdGgpOgogICAgICAgICAgICBmb3IgeCBpbiB3YWxrKG5ld19wYXRoLCB0b3Bkb3duLCBvbmVycm9yLCBmb2xsb3dsaW5rcyk6CiAgICAgICAgICAgICAgICB5aWVsZCB4CiAgICBpZiBub3QgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgICIiIgo='
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.$py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.$py_VFS[lib])
}


function $import_pyj_module(module,alias,names,path,module_contents) {
    __BRYTHON__.$py_module_path[module]=path
    __BRYTHON__.$py_module_alias[module]=alias
    __BRYTHON__.scope[module+'.py']={}
    __BRYTHON__.scope[module+'.py'].__dict__={}

   try {
     eval(module_contents);
     // add names defined in the module as attributes of $module
     for(var attr in __BRYTHON__.scope[module].__dict__){
       $module[attr] = __BRYTHON__.scope[module].__dict__[attr]
     }
        
     // add class and __str__
     $module.__class__ = $type
     $module.__repr__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__str__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__file__ = path
     return $module
   } catch(err) {
     eval('throw '+err.name+'(err.message)')
   }
}

//define import procedure to look up module in VFS
$import_via_VFS=function(module,alias,names){
  var ext=['.js', '.pyj', '.py']
  var search_path=__BRYTHON__.path
  var root = __BRYTHON__.brython_path;
  if (root.endswith('/')) {
     root=root.substring(0,root.length-1); 
  }
  if (search_path.indexOf(root+'/libs') == -1) {
     search_path.unshift(root+'/libs')
  }

  if (search_path.indexOf(root+'/Lib') == -1) {
     search_path.unshift(root+'/Lib')
  }

  for(var i=0; i<search_path.length; i++) {
     for (var j=0; j<ext.length; j++) {
         var path=search_path[i].replace(root, '')
         path+='/'+module+ext[j]
         
         //console.log("searching for " + path + " in VFS");
         var module_contents=readFromVFS(path)
         if(module_contents !== undefined) {
           console.log("imported ("+module+") via VFS:" + path)
           if (ext[j] == '.js') {
              return $import_js_module(module,alias,names,path,module_contents)
           }
           if (ext[j] == '.pyj') {
              return $import_pyj_module(module,alias,names,path,module_contents)
           }
           return $import_py_module(module,alias,names,path,module_contents)
         }
     }
  }
  res = Error()
  res.name = 'NotFoundError'
  res.message = "No module named '"+module+"'"
  throw res
}

// since $import_funcs is now a local variable (import_funcs), we have
// to over write the $import_single function to get VFS to work
$import_single=function (module){
    var import_funcs = [$import_via_VFS, $import_js, $import_module_search_path]
    if(module.name.search(/\./)>-1){import_funcs = [$import_module_search_path]}
    for(var j=0;j<import_funcs.length;j++){
        try{
            return import_funcs[j](module)
        } catch(err){
            if(err.name==="NotFoundError"){
                if(j==import_funcs.length-1){
                    throw ImportError("no module named '"+module.name+"'")
                }else{
                    continue
                }
            }else{throw(err)}
        }
    }
}
  