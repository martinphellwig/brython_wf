__BRYTHON__.$py_VFS={
'/libs/ajax.js':'Ly8gYWpheAokbW9kdWxlID0gKGZ1bmN0aW9uKCl7CgokWE1MSHR0cERpY3QgPSB7CiAgICBfX2NsYXNzX186JHR5cGUsCiAgICBfX25hbWVfXzonWE1MSHR0cCcKfQoKJFhNTEh0dHBEaWN0Ll9fZ2V0YXR0cmlidXRlX18gPSBmdW5jdGlvbihzZWxmLGF0dHIpewogICAgaWYoWydoZWFkZXJzJywndGV4dCcsJ3htbCddLmluZGV4T2YoYXR0cik+LTEpewogICAgICAgIHJldHVybiAkWE1MSHR0cERpY3RbYXR0cl0oc2VsZikKICAgIH0KICAgIHJldHVybiAkT2JqZWN0RGljdC5fX2dldGF0dHJpYnV0ZV9fKHNlbGYsYXR0cikKfQoKJFhNTEh0dHBEaWN0Ll9fbXJvX18gPSBbJFhNTEh0dHBEaWN0LCRPYmplY3REaWN0XQoKJFhNTEh0dHBEaWN0Ll9fcmVwcl9fID0gZnVuY3Rpb24oc2VsZil7cmV0dXJuICc8b2JqZWN0IFhNTEh0dHA+J30KCiRYTUxIdHRwRGljdC5fX3N0cl9fID0gJFhNTEh0dHBEaWN0LnRvU3RyaW5nID0gJFhNTEh0dHBEaWN0Ll9fcmVwcl9fCgokWE1MSHR0cERpY3QudGV4dCA9IGZ1bmN0aW9uKHNlbGYpe3JldHVybiBzZWxmLnJlc3BvbnNlVGV4dH0KICAgIAokWE1MSHR0cERpY3QueG1sID0gZnVuY3Rpb24oc2VsZil7cmV0dXJuICREb21PYmplY3Qoc2VsZi5yZXNwb25zZVhNTCl9CiAgICAKJFhNTEh0dHBEaWN0LmhlYWRlcnMgPSBmdW5jdGlvbihzZWxmKXsKICAgIHJldHVybiBsaXN0KHNlbGYuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoJ1xuJykpCn0KCiRYTUxIdHRwRGljdC5nZXRfaGVhZGVyID0gZnVuY3Rpb24oKXsKICAgIHZhciByZXFvYmogPSBzZWxmOwogICAgcmV0dXJuIGZ1bmN0aW9uKGhlYWRlcil7IHJldHVybiByZXFvYmouZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKSB9Cn0KCiRBamF4RGljdCA9IHsKICAgIF9fY2xhc3NfXzokdHlwZSwKICAgIF9fbmFtZV9fOidhamF4Jwp9CgokQWpheERpY3QuX19tcm9fXyA9IFskQWpheERpY3QsJE9iamVjdERpY3RdCgokQWpheERpY3QuX19yZXByX18gPSBmdW5jdGlvbihzZWxmKXsKICAgIHJldHVybiAnPG9iamVjdCBBamF4PicKfQoKJEFqYXhEaWN0Ll9fc3RyX18gPSAkQWpheERpY3QudG9TdHJpbmcgPSAkQWpheERpY3QuX19yZXByX18KCiRBamF4RGljdC5iaW5kID0gZnVuY3Rpb24oc2VsZixldnQsZnVuYyl7CiAgICAvLyByZXEuYmluZChldnQsZnVuYykgaXMgdGhlIHNhbWUgYXMgcmVxLm9uX2V2dCA9IGZ1bmMKICAgIHNlbGZbJ29uXycrZXZ0XT1mdW5jCn0KCiRBamF4RGljdC5vcGVuID0gZnVuY3Rpb24oc2VsZixtZXRob2QsdXJsLGFzeW5jKXsKICAgIHNlbGYuJHhtbGh0dHAub3BlbihtZXRob2QsdXJsLGFzeW5jKQp9CgokQWpheERpY3Quc2VuZCA9IGZ1bmN0aW9uKHNlbGYscGFyYW1zKXsKICAgIC8vIHBhcmFtcyBpcyBhIFB5dGhvbiBkaWN0aW9uYXJ5CiAgICB2YXIgcmVzID0gJycKICAgIGlmKCFwYXJhbXMgfHwgcGFyYW1zLiRrZXlzLmxlbmd0aD09MCl7c2VsZi4keG1saHR0cC5zZW5kKCk7cmV0dXJufQogICAgZWxzZSBpZihpc2luc3RhbmNlKHBhcmFtcyxzdHIpKXsKICAgICAgICByZXMgPSBwYXJhbXMKICAgIH1lbHNlIGlmKGlzaW5zdGFuY2UocGFyYW1zLGRpY3QpKXsKICAgICAgICBmb3IoaT0wO2k8cGFyYW1zLiRrZXlzLmxlbmd0aDtpKyspewogICAgICAgICAgICByZXMgKz1lbmNvZGVVUklDb21wb25lbnQoc3RyKHBhcmFtcy4ka2V5c1tpXSkpKyc9JytlbmNvZGVVUklDb21wb25lbnQoc3RyKHBhcmFtcy4kdmFsdWVzW2ldKSkrJyYnCiAgICAgICAgfQogICAgICAgIHJlcyA9IHJlcy5zdWJzdHIoMCxyZXMubGVuZ3RoLTEpCiAgICB9ZWxzZXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3IoInNlbmQoKSBhcmd1bWVudCBtdXN0IGJlIHN0cmluZyBvciBkaWN0b25hcnksIG5vdCAnIitzdHIocGFyYW1zLl9fY2xhc3NfXykrIiciKQogICAgfQogICAgc2VsZi4keG1saHR0cC5zZW5kKHJlcykKfQoKJEFqYXhEaWN0LnNldF9oZWFkZXIgPSBmdW5jdGlvbihzZWxmLGtleSx2YWx1ZSl7CiAgICBzZWxmLiR4bWxodHRwLnNldFJlcXVlc3RIZWFkZXIoa2V5LHZhbHVlKQp9CgokQWpheERpY3Quc2V0X3RpbWVvdXQgPSBmdW5jdGlvbihzZWxmLHNlY29uZHMsZnVuYyl7CiAgICBzZWxmLiR4bWxodHRwLiRyZXF1ZXN0VGltZXIgPSBzZXRUaW1lb3V0KAogICAgICAgIGZ1bmN0aW9uKCkge3NlbGYuJHhtbGh0dHAuYWJvcnQoKTtmdW5jKCl9LCAKICAgICAgICBzZWNvbmRzKjEwMDApOyAKfQoKZnVuY3Rpb24gYWpheCgpewoKICAgIHZhciByZXMgPSB7CiAgICAgICAgX19jbGFzc19fOiRBamF4RGljdAogICAgfQoKICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3Qpey8vIGNvZGUgZm9yIElFNyssIEZpcmVmb3gsIENocm9tZSwgT3BlcmEsIFNhZmFyaQogICAgICAgIHZhciAkeG1saHR0cD1uZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgIH1lbHNley8vIGNvZGUgZm9yIElFNiwgSUU1CiAgICAgICAgdmFyICR4bWxodHRwPW5ldyBBY3RpdmVYT2JqZWN0KCJNaWNyb3NvZnQuWE1MSFRUUCIpOwogICAgfQogICAgJHhtbGh0dHAuJHJlcXVlc3RUaW1lciA9IG51bGwKICAgICR4bWxodHRwLl9fY2xhc3NfXyA9ICRYTUxIdHRwRGljdAogICAgCiAgICAkeG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpewogICAgICAgIC8vIGhlcmUsICJ0aGlzIiByZWZlcnMgdG8gJHhtbGh0dHAKICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnJlYWR5U3RhdGUKICAgICAgICB2YXIgcmVxID0gdGhpcy4kYWpheAogICAgICAgIHZhciB0aW1lciA9IHRoaXMuJHJlcXVlc3RUaW1lcgogICAgICAgIHZhciBvYmogPSB0aGlzCiAgICAgICAgaWYoc3RhdGU9PT0wICYmICdvbl91bmluaXRpYWxpemVkJyBpbiByZXEpe3JlcS5vbl91bmluaXRpYWxpemVkKG9iail9CiAgICAgICAgZWxzZSBpZihzdGF0ZT09PTEgJiYgJ29uX2xvYWRpbmcnIGluIHJlcSl7cmVxLm9uX2xvYWRpbmcob2JqKX0KICAgICAgICBlbHNlIGlmKHN0YXRlPT09MiAmJiAnb25fbG9hZGVkJyBpbiByZXEpe3JlcS5vbl9sb2FkZWQob2JqKX0KICAgICAgICBlbHNlIGlmKHN0YXRlPT09MyAmJiAnb25faW50ZXJhY3RpdmUnIGluIHJlcSl7cmVxLm9uX2ludGVyYWN0aXZlKG9iail9CiAgICAgICAgZWxzZSBpZihzdGF0ZT09PTQgJiYgJ29uX2NvbXBsZXRlJyBpbiByZXEpewogICAgICAgICAgICBpZih0aW1lciAhPT0gbnVsbCl7d2luZG93LmNsZWFyVGltZW91dCh0aW1lcil9CiAgICAgICAgICAgIHJlcS5vbl9jb21wbGV0ZShvYmopCiAgICAgICAgfQogICAgfQogICAgJHhtbGh0dHAuJGFqYXggPSByZXMKICAgIHJlcy4keG1saHR0cCA9ICR4bWxodHRwCiAgICByZXR1cm4gcmVzCn0KCmFqYXguX19jbGFzc19fID0gJGZhY3RvcnkKYWpheC4kZGljdCA9ICRBamF4RGljdAoKcmV0dXJuIHthamF4OmFqYXh9Cgp9KSgp',
'/libs/hashlib.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7CiAgICAgICAgaWYgKGF0dHIgPT0gJ25ldycpIHtyZXR1cm4gJGhhc2hsaWJfbmV3O30KICAgICAgICByZXR1cm4gdGhpc1thdHRyXQogICAgfSwKICAgIG1kNTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnbWQ1Jyl9LAogICAgc2hhMTogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMScpfSwKICAgIHNoYTIyNDogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjI0Jyl9LAogICAgc2hhMjU2OiBmdW5jdGlvbigpIHtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEyNTYnKX0sCiAgICBzaGEzODQ6IGZ1bmN0aW9uKCkge3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTM4NCcpfSwKICAgIHNoYTUxMjogZnVuY3Rpb24oKSB7cmV0dXJuICRoYXNobGliX25ldygnc2hhNTEyJyl9LAoKICAgIGFsZ29yaXRobXNfZ3VhcmFudGVlZDogWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXSwKICAgIGFsZ29yaXRobXNfYXZhaWxhYmxlOiAgWydtZDUnLCAnc2hhMScsICdzaGEyMjQnLCAnc2hhMjU2JywgJ3NoYTM4NCcsICdzaGE1MTInXQp9CgoKLy90b2RvOiBldmVudHVhbGx5IG1vdmUgdGhpcyBmdW5jdGlvbiB0byBhICJ1dGlsaXR5IiBmaWxlIG9yIHVzZSBhamF4IG1vZHVsZT8KZnVuY3Rpb24gJGdldF9DcnlwdG9KU19saWIoYWxnKSB7CiAgIHZhciBpbXA9JGltcG9ydGVyKCkKICAgdmFyICR4bWxodHRwPWltcFswXSwgZmFrZV9xcz1pbXBbMV0sIHRpbWVyPWltcFsyXSwgcmVzPW51bGwKCiAgICR4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCl7CiAgICAgICAgaWYoJHhtbGh0dHAucmVhZHlTdGF0ZT09NCl7CiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXIpCiAgICAgICAgICAgIGlmKCR4bWxodHRwLnN0YXR1cz09MjAwIHx8ICR4bWxodHRwLnN0YXR1cz09MCl7cmVzPSR4bWxodHRwLnJlc3BvbnNlVGV4dH0KICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgIC8vIGRvbid0IHRocm93IGFuIGV4Y2VwdGlvbiBoZXJlLCBpdCB3aWxsIG5vdCBiZSBjYXVnaHQgKGlzc3VlICMzMCkKICAgICAgICAgICAgICAgIHJlcyA9IEVycm9yKCkKICAgICAgICAgICAgICAgIHJlcy5uYW1lID0gJ05vdEZvdW5kRXJyb3InCiAgICAgICAgICAgICAgICByZXMubWVzc2FnZSA9ICJObyBDcnlwdG9KUyBsaWIgbmFtZWQgJyIrYWxnKyInIgogICAgICAgICAgICB9CiAgICAgICAgfQogICB9CgogICAkeG1saHR0cC5vcGVuKCdHRVQnLCBfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJ2xpYnMvY3J5cHRvX2pzL3JvbGx1cHMvJythbGcrJy5qcycrZmFrZV9xcyxmYWxzZSkKICAgaWYoJ292ZXJyaWRlTWltZVR5cGUnIGluICR4bWxodHRwKXskeG1saHR0cC5vdmVycmlkZU1pbWVUeXBlKCJ0ZXh0L3BsYWluIil9CiAgICR4bWxodHRwLnNlbmQoKQogICBpZihyZXMuY29uc3RydWN0b3I9PT1FcnJvcil7dGhyb3cgcmVzfSAvLyBtb2R1bGUgbm90IGZvdW5kCgogICB0cnl7CiAgICAgIGV2YWwocmVzICsgIjsgX19CUllUSE9OX18uQ3J5cHRvSlM9Q3J5cHRvSlM7IikKICAgfSBjYXRjaCAoZXJyKSB7IAogICAgICB0aHJvdyBFcnJvcigiSlMgRXZhbCBFcnJvciIsICJDYW5ub3QgZXZhbCBDcnlwdG9KUyBhbGdvcml0aG0gJyIgKyBhbGcgKyAiJyA6IGVycm9yOiIgKyBlcnIpOwogICB9Cn0KCmZ1bmN0aW9uICRoYXNobGliX25ldyhhbGcpIHsKICAgIGlmIChhbGcgPT0gJ21kNScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLk1ENSA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignbWQ1JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uTUQ1LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMScpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTEgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTEnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExLmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhMjI0JykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjI0ID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyMjQnKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQuY3JlYXRlKCkKICAgIH0gZWxzZSBpZiAoYWxnID09ICdzaGEyNTYnKSB7CiAgICAgICBpZiAoX19CUllUSE9OX18uQ3J5cHRvID09PSB1bmRlZmluZWQgfHwgCiAgICAgICAgICAgX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyNTYgPT09IHVuZGVmaW5lZCkgJGdldF9DcnlwdG9KU19saWIoJ3NoYTI1NicpCiAgICAgICB0aGlzLmhhc2ggPSBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTI1Ni5jcmVhdGUoKQogICAgfSBlbHNlIGlmIChhbGcgPT0gJ3NoYTM4NCcpIHsKICAgICAgIGlmIChfX0JSWVRIT05fXy5DcnlwdG8gPT09IHVuZGVmaW5lZCB8fCAKICAgICAgICAgICBfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4NCA9PT0gdW5kZWZpbmVkKSAkZ2V0X0NyeXB0b0pTX2xpYignc2hhMzg0JykKICAgICAgIHRoaXMuaGFzaCA9IF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMzg0LmNyZWF0ZSgpCiAgICB9IGVsc2UgaWYgKGFsZyA9PSAnc2hhNTEyJykgewogICAgICAgaWYgKF9fQlJZVEhPTl9fLkNyeXB0byA9PT0gdW5kZWZpbmVkIHx8IAogICAgICAgICAgIF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBNTEyID09PSB1bmRlZmluZWQpICRnZXRfQ3J5cHRvSlNfbGliKCdzaGE1MTInKQogICAgICAgdGhpcy5oYXNoID0gX19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTIuY3JlYXRlKCkKICAgIH0gZWxzZSB7CiAgICAgICAkcmFpc2UoJ0F0dHJpYnV0ZUVycm9yJywgJ0ludmFsaWQgaGFzaCBhbGdvcml0aG06JyArIGFsZykKICAgIH0KIAogICAgdGhpcy5fX2NsYXNzX18gPSAkdHlwZQogICAgdGhpcy5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpe3JldHVybiAkZ2V0YXR0cih0aGlzLGF0dHIpfQogICAgdGhpcy5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZXhkaWdlc3QoKX0KICAgIHRoaXMudXBkYXRlID0gZnVuY3Rpb24obXNnKXt0aGlzLmhhc2gudXBkYXRlKG1zZyl9CiAgICB0aGlzLmNvcHkgPSBmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc2guY2xvbmUoKX0KCiAgICB0aGlzLmhleGRpZ2VzdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciB0ZW1wPXRoaXMuaGFzaC5jbG9uZSgpOwogICAgICAgIHRlbXA9dGVtcC5maW5hbGl6ZSgpOwogICAgICAgIHJldHVybiB0ZW1wLnRvU3RyaW5nKCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXM7Cn0KCiRtb2R1bGUuX19jbGFzc19fID0gJG1vZHVsZQokbW9kdWxlLl9fc3RyX18gPSBmdW5jdGlvbigpIHtyZXR1cm4gIjxtb2R1bGUgJ2hhc2hsaWInPiJ9Cg==',
'/libs/html.js':'Ly8gY3JlYXRpb24gb2YgYW4gSFRNTCBlbGVtZW50CiRtb2R1bGUgPSAoZnVuY3Rpb24oKXsKZnVuY3Rpb24gJFRhZyh0YWdOYW1lLGFyZ3MpewogICAgdmFyIG9iaiA9ICRET01Ob2RlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSkpCiAgICAvLyBvYmouZWx0IGlzIHRoZSBET00gZWxlbWVudAogICAgb2JqLnBhcmVudCA9IHRoaXMKICAgIGlmKGFyZ3MhPXVuZGVmaW5lZCAmJiBhcmdzLmxlbmd0aD4wKXsKICAgICAgICAkc3RhcnQgPSAwCiAgICAgICAgJGZpcnN0ID0gYXJnc1swXQogICAgICAgIC8vIGlmIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhIGtleXdvcmQsIGl0J3MgdGhlIHRhZyBjb250ZW50CiAgICAgICAgaWYoJGZpcnN0Ll9fY2xhc3NfXyE9PSRLdyl7CiAgICAgICAgICAgICRzdGFydCA9IDEKICAgICAgICAgICAgaWYoaXNpbnN0YW5jZSgkZmlyc3QsW3N0cixpbnQsZmxvYXRdKSl7CiAgICAgICAgICAgICAgICB0eHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIoJGZpcnN0KSkKICAgICAgICAgICAgICAgIG9iai5lbHQuYXBwZW5kQ2hpbGQodHh0KQogICAgICAgICAgICB9IGVsc2UgaWYoJGZpcnN0Ll9fY2xhc3NfXz09PSRUYWdTdW1EaWN0KXsKICAgICAgICAgICAgICAgIGZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKyl7CiAgICAgICAgICAgICAgICAgICAgb2JqLmVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuY2hpbGRyZW5bJGldLmVsdCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsgLy8gYXJndW1lbnQgaXMgYW5vdGhlciBET01Ob2RlIGluc3RhbmNlCiAgICAgICAgICAgICAgICB0cnl7b2JqLmVsdC5hcHBlbmRDaGlsZCgkZmlyc3QuZWx0KX0KICAgICAgICAgICAgICAgIGNhdGNoKGVycil7Y29uc29sZS5sb2coJ2VycmV1ciAnK2Vycik7dGhyb3cgVmFsdWVFcnJvcignd3JvbmcgZWxlbWVudCAnKyRmaXJzdCl9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLy8gYXR0cmlidXRlcwogICAgICAgIGZvcih2YXIgJGk9JHN0YXJ0OyRpPGFyZ3MubGVuZ3RoOyRpKyspewogICAgICAgICAgICAvLyBrZXl3b3JkIGFyZ3VtZW50cwogICAgICAgICAgICAkYXJnID0gYXJnc1skaV0KICAgICAgICAgICAgaWYoJGFyZyAmJiAkYXJnLl9fY2xhc3NfXz09PSRLdyl7CiAgICAgICAgICAgICAgICBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHIoMCwyKT09PSJvbiIpeyAvLyBldmVudHMKICAgICAgICAgICAgICAgICAgICBldmFsKCdET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCk9PSJzdHlsZSIpewogICAgICAgICAgICAgICAgICAgIERPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZigkYXJnLnZhbHVlIT09ZmFsc2UpewogICAgICAgICAgICAgICAgICAgICAgICAvLyBvcHRpb24uc2VsZWN0ZWQ9ZmFsc2Ugc2V0cyBpdCB0byB0cnVlIDotKQogICAgICAgICAgICAgICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJnID0gJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5lbHQuc2V0QXR0cmlidXRlKGFyZywkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYXJnPT0iY2xhc3MiKXsgLy8gZm9yIElFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmVsdC5zZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIsJGFyZy52YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGVycil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyZXVyICcrZXJyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgVmFsdWVFcnJvcigiY2FuJ3Qgc2V0IGF0dHJpYnV0ZSAiKyRhcmcubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBvYmoKfQoKLy8gdGhlIGNsYXNzZXMgdXNlZCBmb3IgdGFnIHN1bXMsICRUYWdTVW0gYW5kICRUYWdTdW1DbGFzcyAKLy8gYXJlIGRlZmluZWQgaW4gcHlfZG9tLmpzCgpmdW5jdGlvbiBBKCl7CiAgICB2YXIgb2JqID0gJFRhZygnQScsYXJndW1lbnRzKQogICAgcmV0dXJuIG9iagp9CkEuX19uYW1lX189J2h0bWwuQScKCnZhciAkc3JjID0gQSsnJyAvLyBzb3VyY2Ugb2YgZnVuY3Rpb24gQQovLyBIVE1MNCB0YWdzCiR0YWdzID0gWydBJywgJ0FCQlInLCAnQUNST05ZTScsICdBRERSRVNTJywgJ0FQUExFVCcsCiAgICAgICAgICAgICdCJywgJ0JETycsICdCSUcnLCAnQkxPQ0tRVU9URScsICdCVVRUT04nLAogICAgICAgICAgICAnQ0FQVElPTicsICdDRU5URVInLCAnQ0lURScsICdDT0RFJywKICAgICAgICAgICAgJ0RFTCcsICdERk4nLCAnRElSJywgJ0RJVicsICdETCcsCiAgICAgICAgICAgICdFTScsICdGSUVMRFNFVCcsICdGT05UJywgJ0ZPUk0nLCAnRlJBTUVTRVQnLAogICAgICAgICAgICAnSDEnLCAnSDInLCAnSDMnLCAnSDQnLCAnSDUnLCAnSDYnLAogICAgICAgICAgICAnSScsICdJRlJBTUUnLCAnSU5TJywgJ0tCRCcsICdMQUJFTCcsICdMRUdFTkQnLAogICAgICAgICAgICAnTUFQJywgJ01FTlUnLCAnTk9GUkFNRVMnLCAnTk9TQ1JJUFQnLCAnT0JKRUNUJywKICAgICAgICAgICAgJ09MJywgJ09QVEdST1VQJywgJ1BSRScsICdRJywgJ1MnLCAnU0FNUCcsCiAgICAgICAgICAgICdTQ1JJUFQnLCAnU0VMRUNUJywgJ1NNQUxMJywgJ1NQQU4nLCAnU1RSSUtFJywKICAgICAgICAgICAgJ1NUUk9ORycsICdTVFlMRScsICdTVUInLCAnU1VQJywgJ1RBQkxFJywKICAgICAgICAgICAgJ1RFWFRBUkVBJywgJ1RJVExFJywgJ1RUJywgJ1UnLCAnVUwnLAogICAgICAgICAgICAnVkFSJywgJ0JPRFknLCAnQ09MR1JPVVAnLCAnREQnLCAnRFQnLCAnSEVBRCcsCiAgICAgICAgICAgICdIVE1MJywgJ0xJJywgJ1AnLCAnVEJPRFknLCdPUFRJT04nLCAKICAgICAgICAgICAgJ1REJywgJ1RGT09UJywgJ1RIJywgJ1RIRUFEJywgJ1RSJywKICAgICAgICAgICAgJ0FSRUEnLCAnQkFTRScsICdCQVNFRk9OVCcsICdCUicsICdDT0wnLCAnRlJBTUUnLAogICAgICAgICAgICAnSFInLCAnSU1HJywgJ0lOUFVUJywgJ0lTSU5ERVgnLCAnTElOSycsCiAgICAgICAgICAgICdNRVRBJywgJ1BBUkFNJ10KCi8vIEhUTUw1IHRhZ3MKJHRhZ3MgPSAkdGFncy5jb25jYXQoWydBUlRJQ0xFJywnQVNJREUnLCdBVURJTycsJ0JESScsCiAgICAnQ0FOVkFTJywnQ09NTUFORCcsJ0RBVEFMSVNUJywnREVUQUlMUycsJ0RJQUxPRycsCiAgICAnRU1CRUQnLCdGSUdDQVBUSU9OJywnRklHVVJFJywnRk9PVEVSJywnSEVBREVSJywKICAgICdLRVlHRU4nLCdNQVJLJywnTUVURVInLCdOQVYnLCdPVVRQVVQnLAogICAgJ1BST0dSRVNTJywnUlAnLCdSVCcsJ1JVQlknLCdTRUNUSU9OJywnU09VUkNFJywKICAgICdTVU1NQVJZJywnVElNRScsJ1RSQUNLJywnVklERU8nLCdXQlInXSkKCi8vIGNyZWF0ZSBjbGFzc2VzCnZhciBvYmogPSBuZXcgT2JqZWN0KCkKZm9yKCRpPTA7JGk8JHRhZ3MubGVuZ3RoOyRpKyspewogICAgJGNvZGUgPSAkc3JjLnJlcGxhY2UoL0EvZ20sJHRhZ3NbJGldKQogICAgZXZhbCgib2JqLiIrJHRhZ3NbJGldKyI9IiskY29kZSkKICAgIGV2YWwoIm9iai4iKyR0YWdzWyRpXSsnLl9fbmFtZV9fPSJodG1sLicrJHRhZ3NbJGldKyciJykKfQpvYmouX19nZXRhdHRyX18gPSBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0KcmV0dXJuIG9iagp9KSgpCg==',
'/libs/json.js':'ZnVuY3Rpb24gX3B5KG9iail7CiAgICBpZihvYmo9PT1udWxsKXtyZXR1cm4gTm9uZX0KICAgIGlmKGlzaW5zdGFuY2Uob2JqLGxpc3QpKXsKICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICBmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgcmVzLnB1c2goX3B5KG9ialtpXSkpCiAgICAgICAgfQogICAgICAgIHJldHVybiByZXMKICAgIH0KICAgIGlmKG9iai5fX2NsYXNzX18hPT11bmRlZmluZWQpewogICAgICAgIGlmKG9iai5fX2NsYXNzX189PT1saXN0KXsKICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBvYmpbaV0gPSBfcHkob2JqW2ldKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBvYmoKICAgIH0KICAgIGlmKHR5cGVvZiBvYmo9PT0nb2JqZWN0JyAmJiBvYmouX19jbGFzc19fPT09dW5kZWZpbmVkKXsKICAgICAgICAvLyB0cmFuc2Zvcm0gSlMgb2JqZWN0IGludG8gYSBQeXRob24gZGljdAogICAgICAgIHZhciByZXMgPSBkaWN0KCkKICAgICAgICBmb3IodmFyIGF0dHIgaW4gb2JqKXsKICAgICAgICAgICAgZ2V0YXR0cihyZXMsJ19fc2V0aXRlbV9fJykoYXR0cixfcHkob2JqW2F0dHJdKSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlcwogICAgfQogICAgcmV0dXJuIEpTT2JqZWN0KG9iaikKfQpmdW5jdGlvbiBfanMob2JqKXsKICAgIC8vIG9iaiBpcyBhIFB5dGhvbiBvYmplY3QKICAgIGlmIChpc2luc3RhbmNlKG9iaixbaW50LHN0cl0pKXtyZXR1cm4gb2JqfQogICAgZWxzZSBpZihvYmo9PT1Ob25lKXtyZXR1cm4gbnVsbH0KICAgIGVsc2UgaWYob2JqPT09VHJ1ZSl7cmV0dXJuIHRydWV9CiAgICBlbHNlIGlmKG9iaj09PUZhbHNlKXtyZXR1cm4gZmFsc2V9CiAgICBlbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGZsb2F0KSl7cmV0dXJuIG9iai52YWx1ZX0KICAgIGVsc2UgaWYoaXNpbnN0YW5jZShvYmosW2xpc3QsdHVwbGVdKSl7CiAgICAgICAgdmFyIHJlcyA9IFtdCiAgICAgICAgZm9yKHZhciBpPTA7aTxvYmoubGVuZ3RoO2krKyl7cmVzLnB1c2goX2pzKG9ialtpXSkpfQogICAgICAgIHJldHVybiByZXMKICAgIH1lbHNlIGlmKGlzaW5zdGFuY2Uob2JqLGRpY3QpKXsKICAgICAgICB2YXIgcmVzID0gbmV3IE9iamVjdCgpCiAgICAgICAgZm9yKHZhciBpPTA7aTxvYmouJGtleXMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgIHJlc1tfanMob2JqLiRrZXlzW2ldKV09X2pzKG9iai4kdmFsdWVzW2ldKQogICAgICAgIH0KICAgICAgICByZXR1cm4gcmVzCiAgICB9ZWxzZXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3Ioc3RyKG9iaikrJyBpcyBub3QgSlNPTiBzZXJpYWxpemFibGUnKQogICAgfQp9CgokbW9kdWxlID0gIHsKCiAgICBfX2dldGF0dHJfXyA6IGZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdfSwKCiAgICBsb2FkcyA6IGZ1bmN0aW9uKGpzb25fb2JqKXtyZXR1cm4gX3B5KEpTT04ucGFyc2UoanNvbl9vYmopKX0sCgogICAgZHVtcHMgOiBmdW5jdGlvbihvYmope3JldHVybiBKU09OLnN0cmluZ2lmeShfanMob2JqKSl9LAp9',
'/libs/math.js':'',
'/libs/random.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgcmFuZG9tOmZ1bmN0aW9uKCl7CiAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAwKXsKICAgICAgICB0aHJvdyBUeXBlRXJyb3IoInJhbmRvbSgpIHRha2VzIG5vIGFyZ3VtZW50cyAoIithcmd1bWVudHMubGVuZ3RoKyIgZ2l2ZW4pIikKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gZmxvYXQoTWF0aC5yYW5kb20oKSk7CiAgICAgIH0KICAgIH0sCiAgICByYW5kaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGItYSsxKSthKSl9LAogICAgcmFuZHJhbmdlOmZ1bmN0aW9uKHN0YXJ0LHN0b3Asc3RlcCl7CiAgICAgIGlmKHN0ZXAgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHN0ZXA9MTsKICAgICAgfSBlbHNlIGlmKHN0ZXAgPT0gMCkgeyAKICAgICAgICAvL3JhaXNlIFZhbHVlRXJyb3IoInplcm8gc3RlcCBmb3IgcmFuZHJhbmdlKCkiKTsKICAgICAgfQoKICAgICAgaWYoc3RvcCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgIHN0b3A9c3RhcnQ7CiAgICAgICAgIHN0YXJ0PTA7CiAgICAgIH0KICAgICAgdmFyIHdpZHRoPXN0b3Atc3RhcnQ7CiAgICAgIGlmIChzdGVwPT0xICYmIHdpZHRoID4gMCkgewogICAgICAgIHJldHVybiBzdGFydCArIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqd2lkdGgpKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyByYWlzZSBWYWx1ZUVycm9yKCJlbXB0eSByYW5nZSBmb3IgcmFuZHJhbmdlKCkgKCIrc3RhcnQrIiwiK3N0b3ArJywnK3N0ZXArJyknKTsKICAgICAgfQogICAgICAKICAgICAgdmFyIG47CiAgICAgIGlmIChzdGVwID4gMCkgewogICAgICAgICBuPU1hdGguZmxvb3IoKHdpZHRoK3N0ZXAtMSkvc3RlcCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgIG49TWF0aC5mbG9vcigod2lkdGgrc3RlcCsxKS9zdGVwKTsKICAgICAgfQogICAgICByZXR1cm4gc3RhcnQgKyBzdGVwKmludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbikpCiAgICAgIC8vcmV0dXJuIGludChNYXRoLnJhbmRvbSgpKihzdG9wL3N0ZXAtc3RhcnQvc3RlcCkqc3RlcCArIHN0YXJ0KQogICAgfSwKICAgIHNodWZmbGU6ZnVuY3Rpb24oeCwgcm5kKXsKICAgICAgaWYgKHgubGVuZ3RoIDw9IDEpIHsgcmV0dXJuIHh9CgogICAgICBpZiAocm5kID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgcm5kPU1hdGgucmFuZG9tCiAgICAgIH0KCiAgICAgIGZvcih2YXIgaiwgbywgaSA9IHgubGVuZ3RoOyBpOyBqID0gcGFyc2VJbnQocm5kKCkgKiBpKSwgbyA9IHhbLS1pXSwgeFtpXSA9IHhbal0sIHhbal0gPSBvKTsKICAgIH0KfQokbW9kdWxlLl9fY2xhc3NfXyA9ICRtb2R1bGUgLy8gZGVmaW5lZCBpbiAkcHlfdXRpbHMKJG1vZHVsZS5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ3JhbmRvbSc+In0K',
'/libs/re.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewogICAgb2JqID0ge19fY2xhc3NfXzokbW9kdWxlLAogICAgICAgIF9fc3RyX186IGZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdyZSc+In0KICAgIH0KICAgIG9iai5BID0gb2JqLkFTQ0lJID0gMjU2CiAgICBvYmouSSA9ICdpJwogICAgb2JqLk0gPSAnbScKICAgICRTUkVfUGF0dGVybkRpY3QgPSB7CiAgICAgICAgX19jbGFzc19fOiR0eXBlLAogICAgICAgIF9fbmFtZV9fOidTUkVfUGF0dGVybicKICAgIH0KICAgICRTUkVfUGF0dGVybkRpY3QubWF0Y2ggPSBmdW5jdGlvbihzZWxmLHN0cmluZyl7CiAgICAgICAgcmV0dXJuIG9iai5tYXRjaChzZWxmLnBhdHRlcm4sc3RyaW5nLHNlbGYuZmxhZ3MpCiAgICB9CiAgICAkU1JFX1BhdHRlcm5EaWN0LnNlYXJjaCA9IGZ1bmN0aW9uKHNlbGYsc3RyaW5nKXsKICAgICAgICByZXR1cm4gb2JqLm9iaihzZWxmLnBhdHRlcm4sc3RyaW5nLHNlbGYuZmxhZ3MpCiAgICB9CiAgICBvYmouY29tcGlsZSA9IGZ1bmN0aW9uKHBhdHRlcm4sZmxhZ3MpewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIF9fY2xhc3NfXzokU1JFX1BhdHRlcm5EaWN0LAogICAgICAgICAgICBwYXR0ZXJuOnBhdHRlcm4sCiAgICAgICAgICAgIGZsYWdzOmZsYWdzCiAgICAgICAgfQogICAgfQogICAgb2JqLmZpbmRhbGwgPSBmdW5jdGlvbihwYXR0ZXJuLHN0cmluZyxmbGFncyl7CiAgICAgICAgdmFyICRucz0kTWFrZUFyZ3MoJ3JlLnNlYXJjaCcsYXJndW1lbnRzLFsncGF0dGVybicsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKQogICAgICAgIHZhciBhcmdzID0gJG5zWydhcmdzJ10KICAgICAgICBpZihhcmdzLmxlbmd0aD4wKXt2YXIgZmxhZ3M9YXJnc1swXX0KICAgICAgICBlbHNle3ZhciBmbGFncyA9ICRuc1sna3cnXS5nZXQoJ2ZsYWdzJywnJyl9CiAgICAgICAgZmxhZ3MgKz0gJ2dtJwogICAgICAgIHZhciBqc3AgPSBuZXcgUmVnRXhwKHBhdHRlcm4sZmxhZ3MpCiAgICAgICAgdmFyIGpzbWF0Y2ggPSBzdHJpbmcubWF0Y2goanNwKQogICAgICAgIGlmKGpzbWF0Y2g9PT1udWxsKXtyZXR1cm4gW119CiAgICAgICAgcmV0dXJuIGpzbWF0Y2gKICAgIH0KICAgIG9iai5zZWFyY2ggPSBmdW5jdGlvbihwYXR0ZXJuLHN0cmluZyl7CiAgICAgICAgdmFyICRucz0kTWFrZUFyZ3MoJ3JlLnNlYXJjaCcsYXJndW1lbnRzLFsncGF0dGVybicsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKQogICAgICAgIHZhciBhcmdzID0gJG5zWydhcmdzJ10KICAgICAgICBpZihhcmdzLmxlbmd0aD4wKXt2YXIgZmxhZ3M9YXJnc1swXX0KICAgICAgICBlbHNle3ZhciBmbGFncyA9IGdldGF0dHIoJG5zWydrdyddLCdnZXQnKSgnZmxhZ3MnLCcnKX0KICAgICAgICB2YXIganNwID0gbmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKQogICAgICAgIHZhciBqc21hdGNoID0gc3RyaW5nLm1hdGNoKGpzcCkKICAgICAgICBpZihqc21hdGNoPT09bnVsbCl7cmV0dXJuIE5vbmV9CiAgICAgICAgdmFyIG1vID0gbmV3IE9iamVjdCgpCiAgICAgICAgbW8uZ3JvdXAgPSBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICBpZihqc21hdGNoW2FyZ3VtZW50c1tpXV09PT11bmRlZmluZWQpe3Jlcy5wdXNoKE5vbmUpfQogICAgICAgICAgICAgICAgZWxzZXtyZXMucHVzaChqc21hdGNoW2FyZ3VtZW50c1tpXV0pfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGg9PT0xKXtyZXR1cm4gcmVzWzBdfQogICAgICAgICAgICByZXR1cm4gdHVwbGUocmVzKQogICAgICAgIH0KICAgICAgICBtby5ncm91cHMgPSBmdW5jdGlvbihfZGVmYXVsdCl7CiAgICAgICAgICAgIGlmKF9kZWZhdWx0PT09dW5kZWZpbmVkKXtfZGVmYXVsdD1Ob25lfQogICAgICAgICAgICB2YXIgcmVzID0gW10KICAgICAgICAgICAgZm9yKHZhciBpPTE7aTxqc21hdGNoLmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgaWYoanNtYXRjaFtpXT09PXVuZGVmaW5lZCl7cmVzLnB1c2goX2RlZmF1bHQpfQogICAgICAgICAgICAgICAgZWxzZXtyZXMucHVzaChqc21hdGNoW2ldKX0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHVwbGUocmVzKQogICAgICAgIH0KICAgICAgICBtby5zdGFydCA9IGZ1bmN0aW9uKCl7cmV0dXJuIGpzbWF0Y2guaW5kZXh9CiAgICAgICAgbW8uc3RyaW5nID0gc3RyaW5nCiAgICAgICAgcmV0dXJuIEpTT2JqZWN0KG1vKQogICAgfQogICAgb2JqLnN1YiA9IGZ1bmN0aW9uKHBhdHRlcm4scmVwbCxzdHJpbmcpewogICAgICAgIHZhciAkbnM9JE1ha2VBcmdzKCdyZS5zZWFyY2gnLGFyZ3VtZW50cyxbJ3BhdHRlcm4nLCdyZXBsJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpCiAgICAgICAgZm9yKCR2YXIgaW4gJG5zKXtldmFsKCJ2YXIgIiskdmFyKyI9JG5zWyR2YXJdIil9CiAgICAgICAgdmFyIGFyZ3MgPSAkbnNbJ2FyZ3MnXQogICAgICAgIHZhciBjb3VudCA9ICREaWN0RGljdC5nZXQoJG5zWydrdyddLCdjb3VudCcsMCkKICAgICAgICB2YXIgZmxhZ3MgPSAkRGljdERpY3QuZ2V0KCRuc1sna3cnXSwnZmxhZ3MnLCcnKQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjApe3ZhciBjb3VudD1hcmdzWzBdfQogICAgICAgIGlmKGFyZ3MubGVuZ3RoPjEpe3ZhciBmbGFncz1hcmdzWzFdfQogICAgICAgIGlmKHR5cGVvZiByZXBsPT09InN0cmluZyIpewogICAgICAgICAgICAvLyBiYWNrcmVmZXJlbmNlcyBhcmUgXDEsIFwyLi4uIGluIFB5dGhvbiBidXQgJDEsJDIuLi4gaW4gSmF2YXNjcmlwdAogICAgICAgICAgICByZXBsID0gcmVwbC5yZXBsYWNlKC9cXChcZCspL2csJyQkJDEnKQogICAgICAgIH1lbHNlIGlmKHR5cGVvZiByZXBsPT09ImZ1bmN0aW9uIil7CiAgICAgICAgICAgIC8vIHRoZSBhcmd1bWVudCBwYXNzZWQgdG8gdGhlIFB5dGhvbiBmdW5jdGlvbiBpcyB0aGUgbWF0Y2ggb2JqZWN0CiAgICAgICAgICAgIC8vIHRoZSBhcmd1bWVudHMgcGFzc2VkIHRvIHRoZSBKYXZhc2NyaXB0IGZ1bmN0aW9uIGFyZSA6CiAgICAgICAgICAgIC8vIC0gdGhlIG1hdGNoZWQgc3Vic3RyaW5nCiAgICAgICAgICAgIC8vIC0gdGhlIG1hdGNoZWQgZ3JvdXBzCiAgICAgICAgICAgIC8vIC0gdGhlIG9mZnNldCBvZiB0aGUgbWF0Y2hlZCBzdWJzdHJpbmcgaW5zaWRlIHRoZSBzdHJpbmcKICAgICAgICAgICAgLy8gLSB0aGUgc3RyaW5nIGJlaW5nIGV4YW1pbmVkCiAgICAgICAgICAgIHZhciAkcmVwbDEgPSBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyIG1vID0gT2JqZWN0KCkKICAgICAgICAgICAgICAgIG1vLnN0cmluZyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdCiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0yXQogICAgICAgICAgICAgICAgdmFyIGVuZCA9IHN0YXJ0ICsgYXJndW1lbnRzWzBdLmxlbmd0aAogICAgICAgICAgICAgICAgbW8uc3RhcnQgPSBmdW5jdGlvbigpe3JldHVybiBzdGFydH0KICAgICAgICAgICAgICAgIG1vLmVuZCA9IGZ1bmN0aW9uKCl7cmV0dXJuIGVuZH0KICAgICAgICAgICAgICAgIGdyb3VwcyA9IFtdCiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGgtMjtpKyspe2dyb3Vwcy5wdXNoKGFyZ3VtZW50c1tpXSl9CiAgICAgICAgICAgICAgICBtby5ncm91cHMgPSBmdW5jdGlvbihfZGVmYXVsdCl7CiAgICAgICAgICAgICAgICAgICAgaWYoX2RlZmF1bHQ9PT11bmRlZmluZWQpe19kZWZhdWx0PU5vbmV9CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IFtdCiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxncm91cHMubGVuZ3RoO2krKyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGdyb3Vwc1tpXT09PXVuZGVmaW5lZCl7cmVzLnB1c2goX2RlZmF1bHQpfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNle3Jlcy5wdXNoKGdyb3Vwc1tpXSl9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXBsKEpTT2JqZWN0KG1vKSkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZihjb3VudD09MCl7ZmxhZ3MrPSdnJ30KICAgICAgICB2YXIganNwID0gbmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKQogICAgICAgIGlmKHR5cGVvZiByZXBsPT09J2Z1bmN0aW9uJyl7cmV0dXJuIHN0cmluZy5yZXBsYWNlKGpzcCwkcmVwbDEpfQogICAgICAgIGVsc2V7cmV0dXJuIHN0cmluZy5yZXBsYWNlKGpzcCxyZXBsKX0KICAgIH0KICAgIG9iai5tYXRjaCA9IChmdW5jdGlvbihzZWFyY2hfZnVuYyl7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIC8vIG1hdGNoIGlzIGxpa2Ugc2VhcmNoIGJ1dCBwYXR0ZXJuIG11c3Qgc3RhcnQgd2l0aCBeCiAgICAgICAgICAgIHBhdHRlcm4gPSBhcmd1bWVudHNbMF0KICAgICAgICAgICAgaWYocGF0dGVybi5jaGFyQXQoMCkhPT0nXicpe3BhdHRlcm4gPSAnXicrcGF0dGVybn0KICAgICAgICAgICAgdmFyIGFyZ3MgPSBbcGF0dGVybl0KICAgICAgICAgICAgZm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJncy5wdXNoKGFyZ3VtZW50c1tpXSl9CiAgICAgICAgICAgIHJldHVybiBzZWFyY2hfZnVuYy5hcHBseShudWxsLGFyZ3MpCiAgICAgICAgfQogICAgfSkob2JqLnNlYXJjaCkKCiAgICByZXR1cm4gb2JqCn0KKSgp',
'/libs/svg.js':'JG1vZHVsZSA9IChmdW5jdGlvbigpewoKJHN2Z05TID0gImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIgokeGxpbmtOUyA9ICJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIgoKZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXsKICAgIC8vIHJlcHJlc2VudHMgYW4gU1ZHIHRhZwogICAgdmFyICRpID0gbnVsbAogICAgdmFyICRvYmogPSB0aGlzCiAgICB2YXIgb2JqID0gJERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCRzdmdOUyx0YWdfbmFtZSkpCiAgICBpZihhcmdzIT11bmRlZmluZWQgJiYgYXJncy5sZW5ndGg+MCl7CiAgICAgICAgJHN0YXJ0ID0gMAogICAgICAgICRmaXJzdCA9IGFyZ3NbMF0KICAgICAgICAvLyBpZiBmaXJzdCBhcmd1bWVudCBpcyBub3QgYSBrZXl3b3JkLCBpdCdzIHRoZSB0YWcgY29udGVudAogICAgICAgIGlmKCRmaXJzdC5fX2NsYXNzX18hPT0kS3cpewogICAgICAgICAgICAkc3RhcnQgPSAxCiAgICAgICAgICAgIGlmKGlzaW5zdGFuY2UoJGZpcnN0LFtzdHIsaW50LGZsb2F0XSkpewogICAgICAgICAgICAgICAgdHh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKCRmaXJzdCkpCiAgICAgICAgICAgICAgICBvYmouZWx0LmFwcGVuZENoaWxkKHR4dCkKICAgICAgICAgICAgfSBlbHNlIGlmKCRmaXJzdC5fX2NsYXNzX189PT0kVGFnU3VtRGljdCl7CiAgICAgICAgICAgICAgICBmb3IoJGk9MDskaTwkZmlyc3QuY2hpbGRyZW4ubGVuZ3RoOyRpKyspewogICAgICAgICAgICAgICAgICAgIG9iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmNoaWxkcmVuWyRpXSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRyeXtvYmouZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5lbHQpfQogICAgICAgICAgICAgICAgY2F0Y2goZXJyKXskcmFpc2UoJ1ZhbHVlRXJyb3InLCd3cm9uZyBlbGVtZW50ICcrJGZpcnN0KX0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAvLyBhdHRyaWJ1dGVzCiAgICAgICAgZm9yKCRpPSRzdGFydDskaTxhcmdzLmxlbmd0aDskaSsrKXsKICAgICAgICAgICAgLy8ga2V5d29yZCBhcmd1bWVudHMKICAgICAgICAgICAgJGFyZyA9IGFyZ3NbJGldCiAgICAgICAgICAgIGlmKCRhcmcgJiYgJGFyZy5fX2NsYXNzX189PT0kS3cpewogICAgICAgICAgICAgICAgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PSJvbiIpeyAvLyBldmVudHMKICAgICAgICAgICAgICAgICAgICBldmFsKCdET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCk9PSJzdHlsZSIpewogICAgICAgICAgICAgICAgICAgIERPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgfWVsc2UgaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZigiaHJlZiIpICE9PSAtMSl7IC8vIHhsaW5rOmhyZWYKICAgICAgICAgICAgICAgICAgICBvYmouZWx0LnNldEF0dHJpYnV0ZU5TKCAiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsImhyZWYiLCRhcmcudmFsdWUpCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmKCRhcmcudmFsdWUhPT1mYWxzZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9wdGlvbi5zZWxlY3RlZD1mYWxzZSBzZXRzIGl0IHRvIHRydWUgOi0pCiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5lbHQuc2V0QXR0cmlidXRlTlMobnVsbCwkYXJnLm5hbWUucmVwbGFjZSgnXycsJy0nKSwkYXJnLnZhbHVlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBvYmoKfQoKLy8gU1ZHCnZhciAkc3ZnX3RhZ3MgPSBbJ2EnLAonYWx0R2x5cGgnLAonYWx0R2x5cGhEZWYnLAonYWx0R2x5cGhJdGVtJywKJ2FuaW1hdGUnLAonYW5pbWF0ZUNvbG9yJywKJ2FuaW1hdGVNb3Rpb24nLAonYW5pbWF0ZVRyYW5zZm9ybScsCidjaXJjbGUnLAonY2xpcFBhdGgnLAonY29sb3JfcHJvZmlsZScsIC8vIGluc3RlYWQgb2YgY29sb3ItcHJvZmlsZQonY3Vyc29yJywKJ2RlZnMnLAonZGVzYycsCidlbGxpcHNlJywKJ2ZlQmxlbmQnLAonZycsCidpbWFnZScsCidsaW5lJywKJ2xpbmVhckdyYWRpZW50JywKJ21hcmtlcicsCidtYXNrJywKJ3BhdGgnLAoncGF0dGVybicsCidwb2x5Z29uJywKJ3BvbHlsaW5lJywKJ3JhZGlhbEdyYWRpZW50JywKJ3JlY3QnLAonc3RvcCcsCidzdmcnLAondGV4dCcsCid0cmVmJywKJ3RzcGFuJywKJ3VzZSddCgokc3ZnID0gZnVuY3Rpb24oKXtyZXR1cm4gJFNWR1RhZygnWCcsYXJndW1lbnRzKX0KJHN2ZyArPSAnJyAvLyBzb3VyY2UgY29kZQoKdmFyIG9iaiA9IG5ldyBPYmplY3QoKQpmb3IodmFyIGk9MDtpPCRzdmdfdGFncy5sZW5ndGg7aSsrKXsKICAgIHZhciB0YWcgPSAkc3ZnX3RhZ3NbaV0KICAgIGV2YWwoJ29iai4nK3RhZysnPScrJHN2Zy5yZXBsYWNlKCdYJyx0YWcpKQp9Cm9iai5fX2dldGF0dHJfXyA9IGZ1bmN0aW9uKGF0dHIpe3JldHVybiB0aGlzW2F0dHJdfQpyZXR1cm4gb2JqCn0pKCk=',
'/libs/time.js':'JG1vZHVsZSA9ICB7CgogICAgX19nZXRhdHRyX18gOiBmdW5jdGlvbihhdHRyKXtyZXR1cm4gdGhpc1thdHRyXX0sCiAgICAKICAgIF9fbmFtZV9fIDogJ3RpbWUnLAoKICAgIGNsZWFyX2ludGVydmFsIDogZnVuY3Rpb24oaW50X2lkKXt3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRfaWQpfSwKICAgIAogICAgY2xlYXJfdGltZW91dCA6IGZ1bmN0aW9uKHRpbWVvdXRfaWQpe3dpbmRvdy5jbGVhclRpbWVvdXQodGltZW91dF9pZCl9LAoKICAgIGN0aW1lOiBmdW5jdGlvbih0aW1lc3RhbXApewogICAgICAgaWYgKHRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICB0aW1lc3RhbXA9aW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDApOwogICAgICAgfQogICAgICAgdmFyIGQ9bmV3IERhdGUoMCk7ICAKICAgICAgIGQuc2V0VVRDU2Vjb25kcyh0aW1lc3RhbXApOwogICAgICAgcmV0dXJuIGQudG9VVENTdHJpbmcoKTsKICAgIH0sCgogICAgcGVyZl9jb3VudGVyOiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gZmxvYXQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKS8xMDAwLjApOwogICAgfSwKICAgIAogICAgc2V0X2ludGVydmFsIDogZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7CiAgICAgICAgcmV0dXJuIGludCh3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuYyxpbnRlcnZhbCkpCiAgICB9LAoKICAgIHNldF90aW1lb3V0IDogZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7d2luZG93LnNldFRpbWVvdXQoZnVuYyxpbnRlcnZhbCl9LAoKICAgIGxvY2FsdGltZSA6IGZ1bmN0aW9uKHNlY3MpeyAKICAgICAgIHZhciBkPW5ldyBEYXRlKCk7CiAgICAgICBpZiAoc2VjcyA9PT0gdW5kZWZpbmVkIHx8IHNlY3MgPT09IE5vbmUpIHtyZXR1cm4gZC5nZXRUaW1lKCl9CgogICAgICAgLy8gY2FsY3VsYXRlIGlmIHdlIGFyZSBpbiBkYXlsaWdodCBzYXZpbmdzIHRpbWUgb3Igbm90LgogICAgICAgLy8gYm9ycm93ZWQgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzExODg3OTM0L2NoZWNrLWlmLWRheWxpZ2h0LXNhdmluZy10aW1lLWlzLWluLWVmZmVjdC1hbmQtaWYtaXQtaXMtZm9yLWhvdy1tYW55LWhvdXJzCiAgICAgICB2YXIgamFuID0gbmV3IERhdGUoZC5nZXRGdWxsWWVhcigpLCAwLCAxKTsKICAgICAgIHZhciBqdWwgPSBuZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksIDYsIDEpOwogICAgICAgdmFyIGRzdD1pbnQoZC5nZXRUaW1lem9uZU9mZnNldCgpIDwgTWF0aC5tYXgoamFuLmdldFRpbWV6b25lT2Zmc2V0KCksIGp1bC5nZXRUaW1lem9uZU9mZnNldCgpKSk7CgogICAgICAgcmV0dXJuIGxpc3QoW2QuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKzEsIGQuZ2V0RGF0ZSgpLCBkLmdldEhvdXJzKCksCiAgICAgICAgICAgICAgICAgICAgZC5nZXRNaW51dGVzKCksIGQuZ2V0U2Vjb25kcygpLCBkLmdldERheSgpLCAwLCBkc3RdKQogICAgICAgLy9maXhtZSAgKHNlY29uZCB0byBsYXN0IHZhbHVlIGlzIDAgd2hpY2ggaXMgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoaXMgeWVhci4uKQogICAgfSwKICAgIHRpbWUgOiBmdW5jdGlvbigpe3JldHVybiBmbG9hdCgobmV3IERhdGUoKS5nZXRUaW1lKCkpLzEwMDApfSwKICAgIAogICAgc3RyZnRpbWUgOiBmdW5jdGlvbihmb3JtYXQsYXJnKXsKICAgICAgICBmdW5jdGlvbiBucyhhcmcsbmIpewogICAgICAgICAgICAvLyBsZWZ0IHBhZGRpbmcgd2l0aCAwCiAgICAgICAgICAgIHZhciByZXMgPSBhcmcudG9TdHJpbmcoKQogICAgICAgICAgICB3aGlsZShyZXMubGVuZ3RoPG5iKXtyZXMgPSAnMCcrcmVzfQogICAgICAgICAgICByZXR1cm4gcmVzCiAgICAgICAgfQogICAgICAgIGlmKGFyZyl7CiAgICAgICAgICAgIHZhciBvYmogPSBuZXcgRGF0ZShhcmdbMF0sYXJnWzFdLTEsYXJnWzJdLGFyZ1szXSxhcmdbNF0sYXJnWzVdLGFyZ1s2XSkKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgdmFyIG9iaj1uZXcgRGF0ZSgpCiAgICAgICAgfQogICAgICAgIHZhciBhYmJfd2Vla2RheXMgPSBbJ1N1JywnTW8nLCdUdScsJ1dlJywnVGgnLCdGcicsJ1NhJ10KICAgICAgICB2YXIgZnVsbF93ZWVrZGF5cyA9IFsnU3VuZGF5JywnTW9uZGF5JywnVHVlc2RheScsJ1dlZG5lc2RheScsCiAgICAgICAgICAgICdUaHVyc2RheScsJ0ZyaWRheScsJ1NhdHVyZGF5J10KICAgICAgICB2YXIgYWJiX21vbnRocyA9IFsnSmFuJywnRmViJywnTWFyJywnQXByJywnTWF5JywnSnVuJywKICAgICAgICAgICAgJ0p1bCcsJ0F1ZycsJ1NlcCcsJ09jdCcsJ05vdicsJ0RlYyddCiAgICAgICAgdmFyIGZ1bGxfbW9udGhzID0gWydKYW51YXJ5JywnRmVicnVhcnknLCdNYXJjaCcsJ0FwcmlsJywnTWF5JywnSnVuZScsCiAgICAgICAgICAgICdKdWx5JywnQXVndXN0JywnU2VwdGVtYmVyJywnT2N0b2JlcicsJ05vdmVtYmVyJywnRGVjZW1iZXInXQogICAgICAgIHZhciByZXMgPSBmb3JtYXQKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJUgvLG5zKG9iai5nZXRIb3VycygpLDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lTS8sbnMob2JqLmdldE1pbnV0ZXMoKSwyKSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJVMvLG5zKG9iai5nZXRTZWNvbmRzKCksMikpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVZLyxucyhvYmouZ2V0RnVsbFllYXIoKSw0KSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJXkvLG5zKG9iai5nZXRGdWxsWWVhcigpLDQpLnN1YnN0cigyKSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJW0vLG5zKG9iai5nZXRNb250aCgpKzEsMikpCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVkLyxucyhvYmouZ2V0RGF0ZSgpLDIpKQogICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKC8lYS8sYWJiX3dlZWtkYXlzW29iai5nZXREYXkoKV0pCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyVBLyxmdWxsX3dlZWtkYXlzW29iai5nZXREYXkoKV0pCiAgICAgICAgcmVzID0gcmVzLnJlcGxhY2UoLyViLyxhYmJfbW9udGhzW29iai5nZXRNb250aCgpXSkKICAgICAgICByZXMgPSByZXMucmVwbGFjZSgvJUIvLGZ1bGxfbW9udGhzW29iai5nZXRNb250aCgpXSkKICAgICAgICByZXR1cm4gcmVzCiAgICB9LAogICAgCiAgICBzdHJ1Y3RfdGltZSA6IGZ1bmN0aW9uKGFyZyl7CiAgICAgICAgaWYoIWlzaW5zdGFuY2UoYXJnLFt0dXBsZSxsaXN0XSkpewogICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ2NvbnN0cnVjdG9yIHJlcXVpcmVzIGEgc2VxdWVuY2UnKQogICAgICAgIH0KICAgICAgICBpZihsZW4oYXJnKSE9OSl7CiAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcigidGltZS5zdHJ1Y3RfdGltZSgpIHRha2VzIGEgOS1zZXF1ZW5jZSAoIitsZW4oYXJnKSsiLXNlcXVlbmNlIGdpdmVuIikKICAgICAgICB9CiAgICAgICAgdmFyIHJlcyA9IGFyZwogICAgICAgIGNvbnNvbGUubG9nKHJlcy5fX2dldGl0ZW1fX1swXSkKICAgICAgICB2YXIgbmFtZXMgPSBbJ3RtX3llYXInLCd0bV9tb24nLCd0bV9tZGF5JywndG1faG91cicsJ3RtX21pbicsJ3RtX3NlYycsJ3RtX3dkYXknLAogICAgICAgICAgICAndG1feWRheScsJ3RtX2lzZHN0JywndG1fem9uZScsJ3RtX2dtdG9mZiddCiAgICAgICAgcmVzLl9fZ2V0YXR0cl9fID0gZnVuY3Rpb24oYXR0cil7CiAgICAgICAgICAgIHZhciBpeCA9IG5hbWVzLmluZGV4T2YoYXR0cikKICAgICAgICAgICAgaWYoaXg+LTEpe3JldHVybiBhcmcuX19nZXRpdGVtX18oaXgpfQogICAgICAgICAgICBpZih0eXBlb2YgcmVzW2F0dHJdPT09J2Z1bmN0aW9uJyl7CiAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKG9iail7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG9ialthdHRyXS5hcHBseShvYmosYXJndW1lbnRzKX0KICAgICAgICAgICAgICAgIH0pKHJlcykKICAgICAgICAgICAgfWVsc2UgaWYocmVzW2F0dHJdIT09dW5kZWZpbmVkKXsKICAgICAgICAgICAgICAgIHJldHVybiByZXNbYXR0cl0KICAgICAgICAgICAgfWVsc2V7dGhyb3cgQXR0cmlidXRlRXJyb3IoIm9iamVjdCBoYXMgbm8gYXR0cmlidXRlICciK2F0dHIrIiciKX0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlcwogICAgfQp9Cg==',
'/libs/websocket.js':'Ly8gd2Vic29ja2V0CiRtb2R1bGUgPSAoZnVuY3Rpb24oKXsKCiRXZWJTb2NrZXREaWN0ID0gewogICAgX19jbGFzc19fIDogJHR5cGUsCiAgICBfX25hbWVfXzonV2ViU29ja2V0Jwp9CgokV2ViU29ja2V0RGljdC5iaW5kID0gZnVuY3Rpb24oc2VsZixldmVudCxjYWxsYmFjayl7CiAgICBzZWxmLiR3c1snb24nK2V2ZW50XSA9IGNhbGxiYWNrCn0KCiRXZWJTb2NrZXREaWN0LnNlbmQgPSBmdW5jdGlvbihzZWxmLGRhdGEpewogICAgc2VsZi4kd3Muc2VuZChkYXRhKQp9CiAgICAKJFdlYlNvY2tldERpY3QuY2xvc2UgPSBmdW5jdGlvbihzZWxmKXsKICAgIHNlbGYuJHdzLmNsb3NlKCkKfQoKJFdlYlNvY2tldERpY3QuX19tcm9fXyA9IFskV2ViU29ja2V0RGljdCwkT2JqZWN0RGljdF0KCmZ1bmN0aW9uIHdlYnNvY2tldChob3N0KXsKICAgIHZhciAkc29ja2V0ID0gbmV3IFdlYlNvY2tldChob3N0KTsKICAgIHZhciByZXMgPSB7CiAgICAgICAgX19jbGFzc19fOiRXZWJTb2NrZXREaWN0LAogICAgICAgICR3cyA6ICRzb2NrZXQKICAgIH0KICAgIHJlcy4kd2Vic29ja2V0ID0gJHNvY2tldAogICAgcmV0dXJuIHJlcwp9CndlYnNvY2tldC5fX2NsYXNzX18gPSAkZmFjdG9yeQp3ZWJzb2NrZXQuJGRpY3QgPSAkV2ViU29ja2V0RGljdAoKcmV0dXJuIHt3ZWJzb2NrZXQ6d2Vic29ja2V0fQoKfSkoKQ==',
'/libs/_browser.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgYWxlcnQ6IGZ1bmN0aW9uKG1lc3NhZ2Upe3dpbmRvdy5hbGVydChtZXNzYWdlKX0sCiAgICBjb25maXJtOiBmdW5jdGlvbihtZXNzYWdlKXtyZXR1cm4gSlNPYmplY3Qod2luZG93LmNvbmZpcm0obWVzc2FnZSkpfSwKICAgIGRvYzogJERPTU5vZGUoZG9jdW1lbnQpLCAgIC8vd2FudCB0byB1c2UgZG9jdW1lbnQgaW5zdGVhZCBvZiBkb2MKICAgIG1vdXNlQ29vcmRzOiBmdW5jdGlvbihldil7cmV0dXJuIEpTT2JqZWN0KCRtb3VzZUNvb3JkcyhldikpfSwKICAgIHByb21wdDogZnVuY3Rpb24obWVzc2FnZSwgZGVmYXVsdF92YWx1ZSl7cmV0dXJuIEpTT2JqZWN0KHdpbmRvdy5wcm9tcHQobWVzc2FnZSwgZGVmYXVsdF92YWx1ZSkpfSwKICAgIHdpbjogSlNPYmplY3Qod2luZG93KSAgICAgLy93YW50IHRvIHVzZSB3aW5kb3cgaW5zdGVhZCBvZiB3aW4KfQokbW9kdWxlLl9fY2xhc3NfXyA9ICRtb2R1bGUgLy8gZGVmaW5lZCBpbiAkcHlfdXRpbHMKJG1vZHVsZS5fX3N0cl9fID0gZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ2Jyb3dzZXInPiJ9Cg==',
'/libs/_os.js':'JG1vZHVsZSA9IHsKICAgIF9fZ2V0YXR0cl9fIDogZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl19LAogICAgcmFuZG9tOmZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpfSwKICAgIHJhbmRpbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaW50KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooYi1hKSthKSl9Cn0KJG1vZHVsZS5fX2NsYXNzX18gPSAkbW9kdWxlIC8vIGRlZmluZWQgaW4gJHB5X3V0aWxzCiRtb2R1bGUuX19zdHJfXyA9IGZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdfb3MnPiJ9Cg==',
'/libs/crypto_js/rollups/md5.js':'',
'/libs/crypto_js/rollups/sha1.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGUsbSl7dmFyIHA9e30saj1wLmxpYj17fSxsPWZ1bmN0aW9uKCl7fSxmPWouQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2wucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGw7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApuPWouV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bT9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxoKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxiPTA7YjxhO2IrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZS5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IG4uaW5pdChjLGEpfX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYi5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGI9W10sZD0wO2Q8YztkKz0yKWJbZD4+PjNdfD1wYXJzZUludChhLnN1YnN0cihkLAoyKSwxNik8PDI0LTQqKGQlOCk7cmV0dXJuIG5ldyBuLmluaXQoYixjLzIpfX0sZz1iLkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyliLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2Q+Pj4yXT4+PjI0LTgqKGQlNCkmMjU1KSk7cmV0dXJuIGIuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKX19LHI9Yi5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGcuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGcucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKaz1qLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgbi5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXIucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZH1yZXR1cm4gbmV3IG4uaW5pdChnLGQpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtqLkhhc2hlcj1rLmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuKG5ldyBhLmluaXQoYikpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsZil7cmV0dXJuKG5ldyBzLkhNQUMuaW5pdChhLApmKSkuZmluYWxpemUoYil9fX0pO3ZhciBzPXAuYWxnbz17fTtyZXR1cm4gcH0oTWF0aCk7CihmdW5jdGlvbigpe3ZhciBlPUNyeXB0b0pTLG09ZS5saWIscD1tLldvcmRBcnJheSxqPW0uSGFzaGVyLGw9W10sbT1lLmFsZ28uU0hBMT1qLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBwLmluaXQoWzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihmLG4pe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGg9YlswXSxnPWJbMV0sZT1iWzJdLGs9YlszXSxqPWJbNF0sYT0wOzgwPmE7YSsrKXtpZigxNj5hKWxbYV09ZltuK2FdfDA7ZWxzZXt2YXIgYz1sW2EtM11ebFthLThdXmxbYS0xNF1ebFthLTE2XTtsW2FdPWM8PDF8Yz4+PjMxfWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXgprKS04OTk0OTc1MTQpO2o9aztrPWU7ZT1nPDwzMHxnPj4+MjtnPWg7aD1jfWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MH0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj10aGlzLl9kYXRhLGU9Zi53b3JkcyxiPTgqdGhpcy5fbkRhdGFCeXRlcyxoPTgqZi5zaWdCeXRlcztlW2g+Pj41XXw9MTI4PDwyNC1oJTMyO2VbKGgrNjQ+Pj45PDw0KSsxNF09TWF0aC5mbG9vcihiLzQyOTQ5NjcyOTYpO2VbKGgrNjQ+Pj45PDw0KSsxNV09YjtmLnNpZ0J5dGVzPTQqZS5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBlPWouY2xvbmUuY2FsbCh0aGlzKTtlLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gZX19KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha224.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKGcsbCl7dmFyIGY9e30saz1mLmxpYj17fSxoPWZ1bmN0aW9uKCl7fSxtPWsuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe2gucHJvdG90eXBlPXRoaXM7dmFyIGM9bmV3IGg7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2MuaW5pdC5wcm90b3R5cGU9YztjLiRzdXBlcj10aGlzO3JldHVybiBjfSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApxPWsuV29yZEFycmF5PW0uZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYyl7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YyE9bD9jOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHxzKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGM9dGhpcy5zaWdCeXRlczthW2M+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhO2QrPTQpYy5wdXNoKDQyOTQ5NjcyOTYqZy5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHEuaW5pdChjLGEpfX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gZC5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPWEubGVuZ3RoLGQ9W10sYj0wO2I8YztiKz0yKWRbYj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihiLAoyKSwxNik8PDI0LTQqKGIlOCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjLzIpfX0sbj10LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKylkLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjW2I+Pj4yXT4+PjI0LTgqKGIlNCkmMjU1KSk7cmV0dXJuIGQuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKX19LGo9dC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKG4uc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYyl7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG4ucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdz1rLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09bS5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcS5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPWoucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yn1yZXR1cm4gbmV3IHEuaW5pdCh1LGIpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTtrLkhhc2hlcj13LmV4dGVuZCh7Y2ZnOm0uZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyBhLmluaXQoZCkpLmZpbmFsaXplKGMpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuKG5ldyB2LkhNQUMuaW5pdChhLApkKSkuZmluYWxpemUoYyl9fX0pO3ZhciB2PWYuYWxnbz17fTtyZXR1cm4gZn0oTWF0aCk7CihmdW5jdGlvbihnKXtmb3IodmFyIGw9Q3J5cHRvSlMsZj1sLmxpYixrPWYuV29yZEFycmF5LGg9Zi5IYXNoZXIsZj1sLmFsZ28sbT1bXSxxPVtdLHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIDQyOTQ5NjcyOTYqKGEtKGF8MCkpfDB9LHM9MixuPTA7NjQ+bjspe3ZhciBqO2E6e2o9cztmb3IodmFyIHc9Zy5zcXJ0KGopLHY9Mjt2PD13O3YrKylpZighKGoldikpe2o9ITE7YnJlYWsgYX1qPSEwfWomJig4Pm4mJihtW25dPXQoZy5wb3cocywwLjUpKSkscVtuXT10KGcucG93KHMsMS8zKSksbisrKTtzKyt9dmFyIGE9W10sZj1mLlNIQTI1Nj1oLmV4dGVuZCh7X2RvUmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9oYXNoPW5ldyBrLmluaXQobS5zbGljZSgwKSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09CmNbZCtwXXwwO2Vsc2V7dmFyIGo9YVtwLTE1XSxyPWFbcC0yXTthW3BdPSgoajw8MjV8aj4+PjcpXihqPDwxNHxqPj4+MTgpXmo+Pj4zKSthW3AtN10rKChyPDwxNXxyPj4+MTcpXihyPDwxM3xyPj4+MTkpXnI+Pj4xMCkrYVtwLTE2XX1qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDB9YlswXT1iWzBdK2V8MDtiWzFdPWJbMV0rZnwwO2JbMl09YlsyXStnfDA7YlszXT1iWzNdK2t8MDtiWzRdPWJbNF0raHwwO2JbNV09Yls1XStsfDA7Yls2XT1iWzZdK218MDtiWzddPWJbN10rbnwwfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2RhdGEsZD1hLndvcmRzLGI9OCp0aGlzLl9uRGF0YUJ5dGVzLGU9OCphLnNpZ0J5dGVzOwpkW2U+Pj41XXw9MTI4PDwyNC1lJTMyO2RbKGUrNjQ+Pj45PDw0KSsxNF09Zy5mbG9vcihiLzQyOTQ5NjcyOTYpO2RbKGUrNjQ+Pj45PDw0KSsxNV09YjthLnNpZ0J5dGVzPTQqZC5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWguY2xvbmUuY2FsbCh0aGlzKTthLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYX19KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZil9KShNYXRoKTsKKGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pfSxfZG9GaW5hbGl6ZTpmdW5jdGlvbigpe3ZhciBmPWsuX2RvRmluYWxpemUuY2FsbCh0aGlzKTtmLnNpZ0J5dGVzLT00O3JldHVybiBmfX0pO2cuU0hBMjI0PWsuX2NyZWF0ZUhlbHBlcihmKTtnLkhtYWNTSEEyMjQ9ay5fY3JlYXRlSG1hY0hlbHBlcihmKX0pKCk7Cg==',
'/libs/crypto_js/rollups/sha3.js':'LyoKQ3J5cHRvSlMgdjMuMS4yCmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcwooYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZQoqLwp2YXIgQ3J5cHRvSlM9Q3J5cHRvSlN8fGZ1bmN0aW9uKHYscCl7dmFyIGQ9e30sdT1kLmxpYj17fSxyPWZ1bmN0aW9uKCl7fSxmPXUuQmFzZT17ZXh0ZW5kOmZ1bmN0aW9uKGEpe3IucHJvdG90eXBlPXRoaXM7dmFyIGI9bmV3IHI7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pO2IuaW5pdC5wcm90b3R5cGU9YjtiLiRzdXBlcj10aGlzO3JldHVybiBifSxjcmVhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmV4dGVuZCgpO2EuaW5pdC5hcHBseShhLGFyZ3VtZW50cyk7cmV0dXJuIGF9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKX19LApzPXUuV29yZEFycmF5PWYuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGEsYil7YT10aGlzLndvcmRzPWF8fFtdO3RoaXMuc2lnQnl0ZXM9YiE9cD9iOjQqYS5sZW5ndGh9LHRvU3RyaW5nOmZ1bmN0aW9uKGEpe3JldHVybihhfHx5KS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLndvcmRzLGI9dGhpcy5zaWdCeXRlczthW2I+Pj4yXSY9NDI5NDk2NzI5NTw8CjMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCl9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2Eud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKTtyZXR1cm4gYX0scmFuZG9tOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTA7YzxhO2MrPTQpYi5wdXNoKDQyOTQ5NjcyOTYqdi5yYW5kb20oKXwwKTtyZXR1cm4gbmV3IHMuaW5pdChiLGEpfX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKX1yZXR1cm4gYy5qb2luKCIiKX0scGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoLGM9W10saj0wO2o8YjtqKz0yKWNbaj4+PjNdfD1wYXJzZUludChhLnN1YnN0cihqLAoyKSwxNik8PDI0LTQqKGolOCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiLzIpfX0sZT14LkxhdGluMT17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyljLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShiW2o+Pj4yXT4+PjI0LTgqKGolNCkmMjU1KSk7cmV0dXJuIGMuam9pbigiIil9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKX19LHE9eC5VdGY4PXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dHJ5e3JldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGUuc3RyaW5naWZ5KGEpKSl9Y2F0Y2goYil7dGhyb3cgRXJyb3IoIk1hbGZvcm1lZCBVVEYtOCBkYXRhIik7fX0scGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGUucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGEpKSl9fSwKdD11LkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09Zi5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgcy5pbml0O3RoaXMuX25EYXRhQnl0ZXM9MH0sX2FwcGVuZDpmdW5jdGlvbihhKXsic3RyaW5nIj09dHlwZW9mIGEmJihhPXEucGFyc2UoYSkpO3RoaXMuX2RhdGEuY29uY2F0KGEpO3RoaXMuX25EYXRhQnl0ZXMrPWEuc2lnQnl0ZXN9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09an1yZXR1cm4gbmV3IHMuaW5pdChmLGopfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTsKYS5fZGF0YT10aGlzLl9kYXRhLmNsb25lKCk7cmV0dXJuIGF9LF9taW5CdWZmZXJTaXplOjB9KTt1Lkhhc2hlcj10LmV4dGVuZCh7Y2ZnOmYuZXh0ZW5kKCksaW5pdDpmdW5jdGlvbihhKXt0aGlzLmNmZz10aGlzLmNmZy5leHRlbmQoYSk7dGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCl9LHVwZGF0ZTpmdW5jdGlvbihhKXt0aGlzLl9hcHBlbmQoYSk7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzfSxmaW5hbGl6ZTpmdW5jdGlvbihhKXthJiZ0aGlzLl9hcHBlbmQoYSk7cmV0dXJuIHRoaXMuX2RvRmluYWxpemUoKX0sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyBhLmluaXQoYykpLmZpbmFsaXplKGIpfX0sX2NyZWF0ZUhtYWNIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuKG5ldyB3LkhNQUMuaW5pdChhLApjKSkuZmluYWxpemUoYil9fX0pO3ZhciB3PWQuYWxnbz17fTtyZXR1cm4gZH0oTWF0aCk7CihmdW5jdGlvbih2KXt2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5CYXNlLHI9ZC5Xb3JkQXJyYXkscD1wLng2ND17fTtwLldvcmQ9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXt0aGlzLmhpZ2g9Zjt0aGlzLmxvdz1zfX0pO3AuV29yZEFycmF5PXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7Zj10aGlzLndvcmRzPWZ8fFtdO3RoaXMuc2lnQnl0ZXM9cyE9dj9zOjgqZi5sZW5ndGh9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyl9cmV0dXJuIHIuY3JlYXRlKGQsdGhpcy5zaWdCeXRlcyl9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXUuY2xvbmUuY2FsbCh0aGlzKSxkPWYud29yZHM9dGhpcy53b3Jkcy5zbGljZSgwKSxwPWQubGVuZ3RoLHI9MDtyPHA7cisrKWRbcl09ZFtyXS5jbG9uZSgpO3JldHVybiBmfX0pfSkoKTsKKGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13fWZvcihlPTA7NT5lO2UrKylmb3IocT0wOzU+cTtxKyspeFtlKzUqcV09cSs1KigoMiplKzMqcSklNSk7ZT0xO2ZvcihxPTA7MjQ+cTtxKyspe2Zvcih2YXIgYT13PXQ9MDs3PmE7YSsrKXtpZihlJjEpe3ZhciBiPSgxPDxhKS0xOzMyPmI/d149MTw8Yjp0Xj0xPDxiLTMyfWU9ZSYxMjg/ZTw8MV4xMTM6ZTw8MX15W3FdPWYuY3JlYXRlKHQsdyl9Zm9yKHZhciBjPVtdLGU9MDsyNT5lO2UrKyljW2VdPWYuY3JlYXRlKCk7ZD1kLlNIQTM9ci5leHRlbmQoe2NmZzpyLmNmZy5leHRlbmQoe291dHB1dExlbmd0aDo1MTJ9KSxfZG9SZXNldDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl9zdGF0ZT0KW10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdDt0aGlzLmJsb2NrU2l6ZT0oMTYwMC0yKnRoaXMuY2ZnLm91dHB1dExlbmd0aCkvMzJ9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bH1mb3IoZj0wOzI0PmY7ZisrKXtmb3IoaD0wOzU+aDtoKyspe2Zvcih2YXIgZD1sPTAsaz0wOzU+aztrKyspZz1lW2grNSprXSxsXj1nLmhpZ2gsZF49Zy5sb3c7Zz1jW2hdO2cuaGlnaD1sO2cubG93PWR9Zm9yKGg9MDs1Pmg7aCsrKXtnPWNbKGgrNCklNV07bD1jWyhoKzEpJTVdO209bC5oaWdoO2s9bC5sb3c7bD1nLmhpZ2heCihtPDwxfGs+Pj4zMSk7ZD1nLmxvd14oazw8MXxtPj4+MzEpO2ZvcihrPTA7NT5rO2srKylnPWVbaCs1KmtdLGcuaGlnaF49bCxnLmxvd149ZH1mb3IobT0xOzI1Pm07bSsrKWc9ZVttXSxoPWcuaGlnaCxnPWcubG93LGs9c1ttXSwzMj5rPyhsPWg8PGt8Zz4+PjMyLWssZD1nPDxrfGg+Pj4zMi1rKToobD1nPDxrLTMyfGg+Pj42NC1rLGQ9aDw8ay0zMnxnPj4+NjQtayksZz1jW3hbbV1dLGcuaGlnaD1sLGcubG93PWQ7Zz1jWzBdO2g9ZVswXTtnLmhpZ2g9aC5oaWdoO2cubG93PWgubG93O2ZvcihoPTA7NT5oO2grKylmb3Ioaz0wOzU+aztrKyspbT1oKzUqayxnPWVbbV0sbD1jW21dLG09Y1soaCsxKSU1KzUqa10sZD1jWyhoKzIpJTUrNSprXSxnLmhpZ2g9bC5oaWdoXn5tLmhpZ2gmZC5oaWdoLGcubG93PWwubG93Xn5tLmxvdyZkLmxvdztnPWVbMF07aD15W2ZdO2cuaGlnaF49aC5oaWdoO2cubG93Xj1oLmxvd319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSwKYj1hLndvcmRzLGM9OCphLnNpZ0J5dGVzLGU9MzIqdGhpcy5ibG9ja1NpemU7YltjPj4+NV18PTE8PDI0LWMlMzI7Ylsodi5jZWlsKChjKzEpL2UpKmU+Pj41KS0xXXw9MTI4O2Euc2lnQnl0ZXM9NCpiLmxlbmd0aDt0aGlzLl9wcm9jZXNzKCk7Zm9yKHZhciBhPXRoaXMuX3N0YXRlLGI9dGhpcy5jZmcub3V0cHV0TGVuZ3RoLzgsYz1iLzgsZT1bXSxoPTA7aDxjO2grKyl7dmFyIGQ9YVtoXSxmPWQuaGlnaCxkPWQubG93LGY9KGY8PDh8Zj4+PjI0KSYxNjcxMTkzNXwoZjw8MjR8Zj4+PjgpJjQyNzgyNTUzNjAsZD0oZDw8OHxkPj4+MjQpJjE2NzExOTM1fChkPDwyNHxkPj4+OCkmNDI3ODI1NTM2MDtlLnB1c2goZCk7ZS5wdXNoKGYpfXJldHVybiBuZXcgdS5pbml0KGUsYil9LGNsb25lOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXIuY2xvbmUuY2FsbCh0aGlzKSxiPWEuX3N0YXRlPXRoaXMuX3N0YXRlLnNsaWNlKDApLGM9MDsyNT5jO2MrKyliW2NdPWJbY10uY2xvbmUoKTtyZXR1cm4gYX19KTsKcC5TSEEzPXIuX2NyZWF0ZUhlbHBlcihkKTtwLkhtYWNTSEEzPXIuX2NyZWF0ZUhtYWNIZWxwZXIoZCl9KShNYXRoKTsK',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/sha512.js':'',
'/Lib/antigravity.py':'aW1wb3J0IHdlYmJyb3dzZXIKaW1wb3J0IGhhc2hsaWIKCndlYmJyb3dzZXIub3BlbigiaHR0cDovL3hrY2QuY29tLzM1My8iKQoKZGVmIGdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgZGF0ZWRvdyk6CiAgICAnJydDb21wdXRlIGdlb2hhc2goKSB1c2luZyB0aGUgTXVucm9lIGFsZ29yaXRobS4KCiAgICA+Pj4gZ2VvaGFzaCgzNy40MjE1NDIsIC0xMjIuMDg1NTg5LCBiJzIwMDUtMDUtMjYtMTA0NTguNjgnKQogICAgMzcuODU3NzEzIC0xMjIuNTQ0NTQzCgogICAgJycnCiAgICAjIGh0dHA6Ly94a2NkLmNvbS80MjYvCiAgICBoID0gaGFzaGxpYi5tZDUoZGF0ZWRvdykuaGV4ZGlnZXN0KCkKICAgIHAsIHEgPSBbKCclZicgJSBmbG9hdC5mcm9taGV4KCcwLicgKyB4KSkgZm9yIHggaW4gKGhbOjE2XSwgaFsxNjozMl0pXQogICAgcHJpbnQoJyVkJXMgJWQlcycgJSAobGF0aXR1ZGUsIHBbMTpdLCBsb25naXR1ZGUsIHFbMTpdKSkK',
'/Lib/bisect.py':'IiIiQmlzZWN0aW9uIGFsZ29yaXRobXMuIiIiCgpkZWYgaW5zb3J0X3JpZ2h0KGEsIHgsIGxvPTAsIGhpPU5vbmUpOgogICAgIiIiSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBJZiB4IGlzIGFscmVhZHkgaW4gYSwgaW5zZXJ0IGl0IHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgeCA8IGFbbWlkXTogaGkgPSBtaWQKICAgICAgICBlbHNlOiBsbyA9IG1pZCsxCiAgICBhLmluc2VydChsbywgeCkKCmluc29ydCA9IGluc29ydF9yaWdodCAgICMgYmFja3dhcmQgY29tcGF0aWJpbGl0eQoKZGVmIGJpc2VjdF9yaWdodChhLCB4LCBsbz0wLCBoaT1Ob25lKToKICAgICIiIlJldHVybiB0aGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIFRoZSByZXR1cm4gdmFsdWUgaSBpcyBzdWNoIHRoYXQgYWxsIGUgaW4gYVs6aV0gaGF2ZSBlIDw9IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID4geC4gIFNvIGlmIHggYWxyZWFkeSBhcHBlYXJzIGluIHRoZSBsaXN0LCBhLmluc2VydCh4KSB3aWxsCiAgICBpbnNlcnQganVzdCBhZnRlciB0aGUgcmlnaHRtb3N0IHggYWxyZWFkeSB0aGVyZS4KCiAgICBPcHRpb25hbCBhcmdzIGxvIChkZWZhdWx0IDApIGFuZCBoaSAoZGVmYXVsdCBsZW4oYSkpIGJvdW5kIHRoZQogICAgc2xpY2Ugb2YgYSB0byBiZSBzZWFyY2hlZC4KICAgICIiIgoKICAgIGlmIGxvIDwgMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpCiAgICBpZiBoaSBpcyBOb25lOgogICAgICAgIGhpID0gbGVuKGEpCiAgICB3aGlsZSBsbyA8IGhpOgogICAgICAgIG1pZCA9IChsbytoaSkvLzIKICAgICAgICBpZiB4IDwgYVttaWRdOiBoaSA9IG1pZAogICAgICAgIGVsc2U6IGxvID0gbWlkKzEKICAgIHJldHVybiBsbwoKYmlzZWN0ID0gYmlzZWN0X3JpZ2h0ICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CgpkZWYgaW5zb3J0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJJbnNlcnQgaXRlbSB4IGluIGxpc3QgYSwgYW5kIGtlZXAgaXQgc29ydGVkIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIGxlZnQgb2YgdGhlIGxlZnRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICBhLmluc2VydChsbywgeCkKCgpkZWYgYmlzZWN0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJSZXR1cm4gdGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBUaGUgcmV0dXJuIHZhbHVlIGkgaXMgc3VjaCB0aGF0IGFsbCBlIGluIGFbOmldIGhhdmUgZSA8IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID49IHguICBTbyBpZiB4IGFscmVhZHkgYXBwZWFycyBpbiB0aGUgbGlzdCwgYS5pbnNlcnQoeCkgd2lsbAogICAgaW5zZXJ0IGp1c3QgYmVmb3JlIHRoZSBsZWZ0bW9zdCB4IGFscmVhZHkgdGhlcmUuCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICByZXR1cm4gbG8KCiMgZG9udCcgbmVlZCB0aGlzIGZvciBicnl0aG9uCiMgT3ZlcndyaXRlIGFib3ZlIGRlZmluaXRpb25zIHdpdGggYSBmYXN0IEMgaW1wbGVtZW50YXRpb24KI3RyeToKIyAgICBmcm9tIF9iaXNlY3QgaW1wb3J0ICoKI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgICBwYXNzCg==',
'/Lib/builtins.py':'Zm9yIG5hbWUgaW4gWydBcml0aG1ldGljRXJyb3InLCAnQXNzZXJ0aW9uRXJyb3InLCAnQXR0cmlidXRlRXJyb3InLCAKJ0Jhc2VFeGNlcHRpb24nLCAnQmxvY2tpbmdJT0Vycm9yJywgJ0Jyb2tlblBpcGVFcnJvcicsICdCdWZmZXJFcnJvcicsIAonQnl0ZXNXYXJuaW5nJywgJ0NoaWxkUHJvY2Vzc0Vycm9yJywgJ0Nvbm5lY3Rpb25BYm9ydGVkRXJyb3InLCAKJ0Nvbm5lY3Rpb25FcnJvcicsICdDb25uZWN0aW9uUmVmdXNlZEVycm9yJywgJ0Nvbm5lY3Rpb25SZXNldEVycm9yJywgCidEZXByZWNhdGlvbldhcm5pbmcnLCAnRU9GRXJyb3InLCAnRWxsaXBzaXMnLCAnRW52aXJvbm1lbnRFcnJvcicsICdFeGNlcHRpb24nLCAKJ0ZhbHNlJywgJ0ZpbGVFeGlzdHNFcnJvcicsICdGaWxlTm90Rm91bmRFcnJvcicsICdGbG9hdGluZ1BvaW50RXJyb3InLCAKJ0Z1dHVyZVdhcm5pbmcnLCAnR2VuZXJhdG9yRXhpdCcsICdJT0Vycm9yJywgJ0ltcG9ydEVycm9yJywgJ0ltcG9ydFdhcm5pbmcnLCAKJ0luZGVudGF0aW9uRXJyb3InLCAnSW5kZXhFcnJvcicsICdJbnRlcnJ1cHRlZEVycm9yJywgJ0lzQURpcmVjdG9yeUVycm9yJywKJ0tleUVycm9yJywgJ0tleWJvYXJkSW50ZXJydXB0JywgJ0xvb2t1cEVycm9yJywgJ01lbW9yeUVycm9yJywgJ05hbWVFcnJvcicsIAonTm9uZScsICdOb3RBRGlyZWN0b3J5RXJyb3InLCAnTm90SW1wbGVtZW50ZWQnLCAnTm90SW1wbGVtZW50ZWRFcnJvcicsIAonT1NFcnJvcicsICdPdmVyZmxvd0Vycm9yJywgJ1BlbmRpbmdEZXByZWNhdGlvbldhcm5pbmcnLCAnUGVybWlzc2lvbkVycm9yJywgCidQcm9jZXNzTG9va3VwRXJyb3InLCAnUmVmZXJlbmNlRXJyb3InLCAnUmVzb3VyY2VXYXJuaW5nJywgJ1J1bnRpbWVFcnJvcicsIAonUnVudGltZVdhcm5pbmcnLCAnU3RvcEl0ZXJhdGlvbicsICdTeW50YXhFcnJvcicsICdTeW50YXhXYXJuaW5nJywgCidTeXN0ZW1FcnJvcicsICdTeXN0ZW1FeGl0JywgJ1RhYkVycm9yJywgJ1RpbWVvdXRFcnJvcicsICdUcnVlJywgJ1R5cGVFcnJvcicsIAonVW5ib3VuZExvY2FsRXJyb3InLCAnVW5pY29kZURlY29kZUVycm9yJywgJ1VuaWNvZGVFbmNvZGVFcnJvcicsIAonVW5pY29kZUVycm9yJywgJ1VuaWNvZGVUcmFuc2xhdGVFcnJvcicsICdVbmljb2RlV2FybmluZycsICdVc2VyV2FybmluZycsIAonVmFsdWVFcnJvcicsICdXYXJuaW5nJywgJ1dpbmRvd3NFcnJvcicsICdaZXJvRGl2aXNpb25FcnJvcicsICdfJywgCidfX2J1aWxkX2NsYXNzX18nLCAnX19kZWJ1Z19fJywgJ19fZG9jX18nLCAnX19pbXBvcnRfXycsICdfX25hbWVfXycsIAonX19wYWNrYWdlX18nLCAnYWJzJywgJ2FsbCcsICdhbnknLCAnYXNjaWknLCAnYmluJywgJ2Jvb2wnLCAnYnl0ZWFycmF5JywgCidieXRlcycsJ2NhbGxhYmxlJywgJ2NocicsICdjbGFzc21ldGhvZCcsICdjb21waWxlJywgJ2NvbXBsZXgnLCAnY29weXJpZ2h0JywgCidjcmVkaXRzJywnZGVsYXR0cicsICdkaWN0JywgJ2RpcicsICdkaXZtb2QnLCAnZW51bWVyYXRlJywgJ2V2YWwnLCAnZXhlYycsIAonZXhpdCcsICdmaWx0ZXInLCAnZmxvYXQnLCAnZm9ybWF0JywgJ2Zyb3plbnNldCcsICdnZXRhdHRyJywgJ2dsb2JhbHMnLCAKJ2hhc2F0dHInLCAnaGFzaCcsICdoZWxwJywgJ2hleCcsICdpZCcsICdpbnB1dCcsICdpbnQnLCAnaXNpbnN0YW5jZScsIAonaXNzdWJjbGFzcycsICdpdGVyJywgJ2xlbicsICdsaWNlbnNlJywgJ2xpc3QnLCAnbG9jYWxzJywgJ21hcCcsICdtYXgnLCAKJ21lbW9yeXZpZXcnLCAnbWluJywgJ25leHQnLCAnb2JqZWN0JywgJ29jdCcsICdvcGVuJywgJ29yZCcsICdwb3cnLCAncHJpbnQnLCAKJ3Byb3BlcnR5JywgJ3F1aXQnLCAncmFuZ2UnLCAncmVwcicsICdyZXZlcnNlZCcsICdyb3VuZCcsICdzZXQnLCAnc2V0YXR0cicsIAonc2xpY2UnLCAnc29ydGVkJywgJ3N0YXRpY21ldGhvZCcsICdzdHInLCAnc3VtJywgJ3N1cGVyJywgJ3R1cGxlJywgJ3R5cGUnLCAKJ3ZhcnMnLCAnemlwJ106CiAgICB0cnk6CiAgICAgICAgZXhlYyhuYW1lKQogICAgZXhjZXB0OgogICAgICAgIHBhc3M=',
'/Lib/calendar.py':'',
'/Lib/collections.py':'',
'/Lib/colorsys.py':'IiIiQ29udmVyc2lvbiBmdW5jdGlvbnMgYmV0d2VlbiBSR0IgYW5kIG90aGVyIGNvbG9yIHN5c3RlbXMuCgpUaGlzIG1vZHVsZXMgcHJvdmlkZXMgdHdvIGZ1bmN0aW9ucyBmb3IgZWFjaCBjb2xvciBzeXN0ZW0gQUJDOgoKICByZ2JfdG9fYWJjKHIsIGcsIGIpIC0tPiBhLCBiLCBjCiAgYWJjX3RvX3JnYihhLCBiLCBjKSAtLT4gciwgZywgYgoKQWxsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgdHJpcGxlcyBvZiBmbG9hdHMgaW4gdGhlIHJhbmdlIFswLjAuLi4xLjBdCih3aXRoIHRoZSBleGNlcHRpb24gb2YgSSBhbmQgUSwgd2hpY2ggY292ZXJzIGEgc2xpZ2h0bHkgbGFyZ2VyIHJhbmdlKS4KSW5wdXRzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIG1heSBjYXVzZSBleGNlcHRpb25zIG9yIGludmFsaWQgb3V0cHV0cy4KClN1cHBvcnRlZCBjb2xvciBzeXN0ZW1zOgpSR0I6IFJlZCwgR3JlZW4sIEJsdWUgY29tcG9uZW50cwpZSVE6IEx1bWluYW5jZSwgQ2hyb21pbmFuY2UgKHVzZWQgYnkgY29tcG9zaXRlIHZpZGVvIHNpZ25hbHMpCkhMUzogSHVlLCBMdW1pbmFuY2UsIFNhdHVyYXRpb24KSFNWOiBIdWUsIFNhdHVyYXRpb24sIFZhbHVlCiIiIgoKIyBSZWZlcmVuY2VzOgojIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUlRCiMgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9ITFNfY29sb3Jfc3BhY2UKIyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTVl9jb2xvcl9zcGFjZQoKX19hbGxfXyA9IFsicmdiX3RvX3lpcSIsInlpcV90b19yZ2IiLCJyZ2JfdG9faGxzIiwiaGxzX3RvX3JnYiIsCiAgICAgICAgICAgInJnYl90b19oc3YiLCJoc3ZfdG9fcmdiIl0KCiMgU29tZSBmbG9hdGluZyBwb2ludCBjb25zdGFudHMKCk9ORV9USElSRCA9IDEuMC8zLjAKT05FX1NJWFRIID0gMS4wLzYuMApUV09fVEhJUkQgPSAyLjAvMy4wCgojIFlJUTogdXNlZCBieSBjb21wb3NpdGUgdmlkZW8gc2lnbmFscyAobGluZWFyIGNvbWJpbmF0aW9ucyBvZiBSR0IpCiMgWTogcGVyY2VpdmVkIGdyZXkgbGV2ZWwgKDAuMCA9PSBibGFjaywgMS4wID09IHdoaXRlKQojIEksIFE6IGNvbG9yIGNvbXBvbmVudHMKCmRlZiByZ2JfdG9feWlxKHIsIGcsIGIpOgogICAgeSA9IDAuMzAqciArIDAuNTkqZyArIDAuMTEqYgogICAgaSA9IDAuNjAqciAtIDAuMjgqZyAtIDAuMzIqYgogICAgcSA9IDAuMjEqciAtIDAuNTIqZyArIDAuMzEqYgogICAgcmV0dXJuICh5LCBpLCBxKQoKZGVmIHlpcV90b19yZ2IoeSwgaSwgcSk6CiAgICByID0geSArIDAuOTQ4MjYyKmkgKyAwLjYyNDAxMypxCiAgICBnID0geSAtIDAuMjc2MDY2KmkgLSAwLjYzOTgxMCpxCiAgICBiID0geSAtIDEuMTA1NDUwKmkgKyAxLjcyOTg2MCpxCiAgICBpZiByIDwgMC4wOgogICAgICAgIHIgPSAwLjAKICAgIGlmIGcgPCAwLjA6CiAgICAgICAgZyA9IDAuMAogICAgaWYgYiA8IDAuMDoKICAgICAgICBiID0gMC4wCiAgICBpZiByID4gMS4wOgogICAgICAgIHIgPSAxLjAKICAgIGlmIGcgPiAxLjA6CiAgICAgICAgZyA9IDEuMAogICAgaWYgYiA+IDEuMDoKICAgICAgICBiID0gMS4wCiAgICByZXR1cm4gKHIsIGcsIGIpCgoKIyBITFM6IEh1ZSwgTHVtaW5hbmNlLCBTYXR1cmF0aW9uCiMgSDogcG9zaXRpb24gaW4gdGhlIHNwZWN0cnVtCiMgTDogY29sb3IgbGlnaHRuZXNzCiMgUzogY29sb3Igc2F0dXJhdGlvbgoKZGVmIHJnYl90b19obHMociwgZywgYik6CiAgICBtYXhjID0gbWF4KHIsIGcsIGIpCiAgICBtaW5jID0gbWluKHIsIGcsIGIpCiAgICAjIFhYWCBDYW4gb3B0aW1pemUgKG1heGMrbWluYykgYW5kIChtYXhjLW1pbmMpCiAgICBsID0gKG1pbmMrbWF4YykvMi4wCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgbCwgMC4wCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAobWF4YyttaW5jKQogICAgZWxzZToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAoMi4wLW1heGMtbWluYykKICAgIHJjID0gKG1heGMtcikgLyAobWF4Yy1taW5jKQogICAgZ2MgPSAobWF4Yy1nKSAvIChtYXhjLW1pbmMpCiAgICBiYyA9IChtYXhjLWIpIC8gKG1heGMtbWluYykKICAgIGlmIHIgPT0gbWF4YzoKICAgICAgICBoID0gYmMtZ2MKICAgIGVsaWYgZyA9PSBtYXhjOgogICAgICAgIGggPSAyLjArcmMtYmMKICAgIGVsc2U6CiAgICAgICAgaCA9IDQuMCtnYy1yYwogICAgaCA9IChoLzYuMCkgJSAxLjAKICAgIHJldHVybiBoLCBsLCBzCgpkZWYgaGxzX3RvX3JnYihoLCBsLCBzKToKICAgIGlmIHMgPT0gMC4wOgogICAgICAgIHJldHVybiBsLCBsLCBsCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBtMiA9IGwgKiAoMS4wK3MpCiAgICBlbHNlOgogICAgICAgIG0yID0gbCtzLShsKnMpCiAgICBtMSA9IDIuMCpsIC0gbTIKICAgIHJldHVybiAoX3YobTEsIG0yLCBoK09ORV9USElSRCksIF92KG0xLCBtMiwgaCksIF92KG0xLCBtMiwgaC1PTkVfVEhJUkQpKQoKZGVmIF92KG0xLCBtMiwgaHVlKToKICAgIGh1ZSA9IGh1ZSAlIDEuMAogICAgaWYgaHVlIDwgT05FX1NJWFRIOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqaHVlKjYuMAogICAgaWYgaHVlIDwgMC41OgogICAgICAgIHJldHVybiBtMgogICAgaWYgaHVlIDwgVFdPX1RISVJEOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqKFRXT19USElSRC1odWUpKjYuMAogICAgcmV0dXJuIG0xCgoKIyBIU1Y6IEh1ZSwgU2F0dXJhdGlvbiwgVmFsdWUKIyBIOiBwb3NpdGlvbiBpbiB0aGUgc3BlY3RydW0KIyBTOiBjb2xvciBzYXR1cmF0aW9uICgicHVyaXR5IikKIyBWOiBjb2xvciBicmlnaHRuZXNzCgpkZWYgcmdiX3RvX2hzdihyLCBnLCBiKToKICAgIG1heGMgPSBtYXgociwgZywgYikKICAgIG1pbmMgPSBtaW4ociwgZywgYikKICAgIHYgPSBtYXhjCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgMC4wLCB2CiAgICBzID0gKG1heGMtbWluYykgLyBtYXhjCiAgICByYyA9IChtYXhjLXIpIC8gKG1heGMtbWluYykKICAgIGdjID0gKG1heGMtZykgLyAobWF4Yy1taW5jKQogICAgYmMgPSAobWF4Yy1iKSAvIChtYXhjLW1pbmMpCiAgICBpZiByID09IG1heGM6CiAgICAgICAgaCA9IGJjLWdjCiAgICBlbGlmIGcgPT0gbWF4YzoKICAgICAgICBoID0gMi4wK3JjLWJjCiAgICBlbHNlOgogICAgICAgIGggPSA0LjArZ2MtcmMKICAgIGggPSAoaC82LjApICUgMS4wCiAgICByZXR1cm4gaCwgcywgdgoKZGVmIGhzdl90b19yZ2IoaCwgcywgdik6CiAgICBpZiBzID09IDAuMDoKICAgICAgICByZXR1cm4gdiwgdiwgdgogICAgaSA9IGludChoKjYuMCkgIyBYWFggYXNzdW1lIGludCgpIHRydW5jYXRlcyEKICAgIGYgPSAoaCo2LjApIC0gaQogICAgcCA9IHYqKDEuMCAtIHMpCiAgICBxID0gdiooMS4wIC0gcypmKQogICAgdCA9IHYqKDEuMCAtIHMqKDEuMC1mKSkKICAgIGkgPSBpJTYKICAgIGlmIGkgPT0gMDoKICAgICAgICByZXR1cm4gdiwgdCwgcAogICAgaWYgaSA9PSAxOgogICAgICAgIHJldHVybiBxLCB2LCBwCiAgICBpZiBpID09IDI6CiAgICAgICAgcmV0dXJuIHAsIHYsIHQKICAgIGlmIGkgPT0gMzoKICAgICAgICByZXR1cm4gcCwgcSwgdgogICAgaWYgaSA9PSA0OgogICAgICAgIHJldHVybiB0LCBwLCB2CiAgICBpZiBpID09IDU6CiAgICAgICAgcmV0dXJuIHYsIHAsIHEKICAgICMgQ2Fubm90IGdldCBoZXJlCg==',
'/Lib/configparser.py':'',
'/Lib/datetime.py':'',
'/Lib/dis.py':'ZGVmIGRpcyhzcmMpOgogICAgcmV0dXJuIEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5MmpzKHNyYykpLnRvX2pzKCkK',
'/Lib/errno.py':'IlRoaXMgbW9kdWxlIG1ha2VzIGF2YWlsYWJsZSBzdGFuZGFyZCBlcnJubyBzeXN0ZW0gc3ltYm9scy5cblxuVGhlIHZhbHVlIG9mIGVhY2ggc3ltYm9sIGlzIHRoZSBjb3JyZXNwb25kaW5nIGludGVnZXIgdmFsdWUsXG5lLmcuLCBvbiBtb3N0IHN5c3RlbXMsIGVycm5vLkVOT0VOVCBlcXVhbHMgdGhlIGludGVnZXIgMi5cblxuVGhlIGRpY3Rpb25hcnkgZXJybm8uZXJyb3Jjb2RlIG1hcHMgbnVtZXJpYyBjb2RlcyB0byBzeW1ib2wgbmFtZXMsXG5lLmcuLCBlcnJuby5lcnJvcmNvZGVbMl0gY291bGQgYmUgdGhlIHN0cmluZyAnRU5PRU5UJy5cblxuU3ltYm9scyB0aGF0IGFyZSBub3QgcmVsZXZhbnQgdG8gdGhlIHVuZGVybHlpbmcgc3lzdGVtIGFyZSBub3QgZGVmaW5lZC5cblxuVG8gbWFwIGVycm9yIGNvZGVzIHRvIGVycm9yIG1lc3NhZ2VzLCB1c2UgdGhlIGZ1bmN0aW9uIG9zLnN0cmVycm9yKCksXG5lLmcuIG9zLnN0cmVycm9yKDIpIGNvdWxkIHJldHVybiAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScuIgoKRTJCSUcgPSA3CkVBQ0NFUyA9IDEzCkVBRERSSU5VU0UgPSA5OApFQUREUk5PVEFWQUlMID0gOTkKRUFEViA9IDY4CkVBRk5PU1VQUE9SVCA9IDk3CkVBR0FJTiA9IDExCkVBTFJFQURZID0gMTE0CkVCQURFID0gNTIKRUJBREYgPSA5CkVCQURGRCA9IDc3CkVCQURNU0cgPSA3NApFQkFEUiA9IDUzCkVCQURSUUMgPSA1NgpFQkFEU0xUID0gNTcKRUJGT05UID0gNTkKRUJVU1kgPSAxNgpFQ0hJTEQgPSAxMApFQ0hSTkcgPSA0NApFQ09NTSA9IDcwCkVDT05OQUJPUlRFRCA9IDEwMwpFQ09OTlJFRlVTRUQgPSAxMTEKRUNPTk5SRVNFVCA9IDEwNApFREVBRExLID0gMzUKRURFQURMT0NLID0gMzUKRURFU1RBRERSUkVRID0gODkKRURPTSA9IDMzCkVET1RET1QgPSA3MwpFRFFVT1QgPSAxMjIKRUVYSVNUID0gMTcKRUZBVUxUID0gMTQKRUZCSUcgPSAyNwpFSE9TVERPV04gPSAxMTIKRUhPU1RVTlJFQUNIID0gMTEzCkVJRFJNID0gNDMKRUlMU0VRID0gODQKRUlOUFJPR1JFU1MgPSAxMTUKRUlOVFIgPSA0CkVJTlZBTCA9IDIyCkVJTyA9IDUKRUlTQ09OTiA9IDEwNgpFSVNESVIgPSAyMQpFSVNOQU0gPSAxMjAKRUwySExUID0gNTEKRUwyTlNZTkMgPSA0NQpFTDNITFQgPSA0NgpFTDNSU1QgPSA0NwpFTElCQUNDID0gNzkKRUxJQkJBRCA9IDgwCkVMSUJFWEVDID0gODMKRUxJQk1BWCA9IDgyCkVMSUJTQ04gPSA4MQpFTE5STkcgPSA0OApFTE9PUCA9IDQwCkVNRklMRSA9IDI0CkVNTElOSyA9IDMxCkVNU0dTSVpFID0gOTAKRU1VTFRJSE9QID0gNzIKRU5BTUVUT09MT05HID0gMzYKRU5BVkFJTCA9IDExOQpFTkVURE9XTiA9IDEwMApFTkVUUkVTRVQgPSAxMDIKRU5FVFVOUkVBQ0ggPSAxMDEKRU5GSUxFID0gMjMKRU5PQU5PID0gNTUKRU5PQlVGUyA9IDEwNQpFTk9DU0kgPSA1MApFTk9EQVRBID0gNjEKRU5PREVWID0gMTkKRU5PRU5UID0gMgpFTk9FWEVDID0gOApFTk9MQ0sgPSAzNwpFTk9MSU5LID0gNjcKRU5PTUVNID0gMTIKRU5PTVNHID0gNDIKRU5PTkVUID0gNjQKRU5PUEtHID0gNjUKRU5PUFJPVE9PUFQgPSA5MgpFTk9TUEMgPSAyOApFTk9TUiA9IDYzCkVOT1NUUiA9IDYwCkVOT1NZUyA9IDM4CkVOT1RCTEsgPSAxNQpFTk9UQ09OTiA9IDEwNwpFTk9URElSID0gMjAKRU5PVEVNUFRZID0gMzkKRU5PVE5BTSA9IDExOApFTk9UU09DSyA9IDg4CkVOT1RUWSA9IDI1CkVOT1RVTklRID0gNzYKRU5YSU8gPSA2CkVPUE5PVFNVUFAgPSA5NQpFT1ZFUkZMT1cgPSA3NQpFUEVSTSA9IDEKRVBGTk9TVVBQT1JUID0gOTYKRVBJUEUgPSAzMgpFUFJPVE8gPSA3MQpFUFJPVE9OT1NVUFBPUlQgPSA5MwpFUFJPVE9UWVBFID0gOTEKRVJBTkdFID0gMzQKRVJFTUNIRyA9IDc4CkVSRU1PVEUgPSA2NgpFUkVNT1RFSU8gPSAxMjEKRVJFU1RBUlQgPSA4NQpFUk9GUyA9IDMwCkVTSFVURE9XTiA9IDEwOApFU09DS1ROT1NVUFBPUlQgPSA5NApFU1BJUEUgPSAyOQpFU1JDSCA9IDMKRVNSTU5UID0gNjkKRVNUQUxFID0gMTE2CkVTVFJQSVBFID0gODYKRVRJTUUgPSA2MgpFVElNRURPVVQgPSAxMTAKRVRPT01BTllSRUZTID0gMTA5CkVUWFRCU1kgPSAyNgpFVUNMRUFOID0gMTE3CkVVTkFUQ0ggPSA0OQpFVVNFUlMgPSA4NwpFV09VTERCTE9DSyA9IDExCkVYREVWID0gMTgKRVhGVUxMID0gNTQKIyBlcnJvcmNvZGUK',
'/Lib/heapq.py':'',
'/Lib/io.py':'b3BlbiA9IG9wZW4K',
'/Lib/itertools.py':'',
'/Lib/keyword.py':'a3dsaXN0ID0gWwojLS1zdGFydCBrZXl3b3Jkcy0tCiAgICAgICAgJ0ZhbHNlJywKICAgICAgICAnTm9uZScsCiAgICAgICAgJ1RydWUnLAogICAgICAgICdhbmQnLAogICAgICAgICdhcycsCiAgICAgICAgJ2Fzc2VydCcsCiAgICAgICAgJ2JyZWFrJywKICAgICAgICAnY2xhc3MnLAogICAgICAgICdjb250aW51ZScsCiAgICAgICAgJ2RlZicsCiAgICAgICAgJ2RlbCcsCiAgICAgICAgJ2VsaWYnLAogICAgICAgICdlbHNlJywKICAgICAgICAnZXhjZXB0JywKICAgICAgICAnZmluYWxseScsCiAgICAgICAgJ2ZvcicsCiAgICAgICAgJ2Zyb20nLAogICAgICAgICdnbG9iYWwnLAogICAgICAgICdpZicsCiAgICAgICAgJ2ltcG9ydCcsCiAgICAgICAgJ2luJywKICAgICAgICAnaXMnLAogICAgICAgICdsYW1iZGEnLAogICAgICAgICdub25sb2NhbCcsCiAgICAgICAgJ25vdCcsCiAgICAgICAgJ29yJywKICAgICAgICAncGFzcycsCiAgICAgICAgJ3JhaXNlJywKICAgICAgICAncmV0dXJuJywKICAgICAgICAndHJ5JywKICAgICAgICAnd2hpbGUnLAogICAgICAgICd3aXRoJywKICAgICAgICAneWllbGQnLAojLS1lbmQga2V5d29yZHMtLQogICAgICAgIF0KCmRlZiBpc2tleXdvcmQod29yZCk6CiAgICByZXR1cm4gd29yZCBpbiBrd2xpc3QK',
'/Lib/linecache.py':'IiIiQ2FjaGUgbGluZXMgZnJvbSBmaWxlcy4KClRoaXMgaXMgaW50ZW5kZWQgdG8gcmVhZCBsaW5lcyBmcm9tIG1vZHVsZXMgaW1wb3J0ZWQgLS0gaGVuY2UgaWYgYSBmaWxlbmFtZQppcyBub3QgZm91bmQsIGl0IHdpbGwgbG9vayBkb3duIHRoZSBtb2R1bGUgc2VhcmNoIHBhdGggZm9yIGEgZmlsZSBieQp0aGF0IG5hbWUuCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKI2ZpeG1lIGJyeXRob24KI2ltcG9ydCB0b2tlbml6ZQoKX19hbGxfXyA9IFsiZ2V0bGluZSIsICJjbGVhcmNhY2hlIiwgImNoZWNrY2FjaGUiXQoKZGVmIGdldGxpbmUoZmlsZW5hbWUsIGxpbmVubywgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICBsaW5lcyA9IGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscykKICAgIGlmIDEgPD0gbGluZW5vIDw9IGxlbihsaW5lcyk6CiAgICAgICAgcmV0dXJuIGxpbmVzW2xpbmVuby0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgojIFRoZSBjYWNoZQoKY2FjaGUgPSB7fSAjIFRoZSBjYWNoZQoKCmRlZiBjbGVhcmNhY2hlKCk6CiAgICAiIiJDbGVhciB0aGUgY2FjaGUgZW50aXJlbHkuIiIiCgogICAgZ2xvYmFsIGNhY2hlCiAgICBjYWNoZSA9IHt9CgoKZGVmIGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgICIiIkdldCB0aGUgbGluZXMgZm9yIGEgZmlsZSBmcm9tIHRoZSBjYWNoZS4KICAgIFVwZGF0ZSB0aGUgY2FjaGUgaWYgaXQgZG9lc24ndCBjb250YWluIGFuIGVudHJ5IGZvciB0aGlzIGZpbGUgYWxyZWFkeS4iIiIKCiAgICBpZiBmaWxlbmFtZSBpbiBjYWNoZToKICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCiAgICBlbHNlOgogICAgICAgIHJldHVybiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHMpCgoKZGVmIGNoZWNrY2FjaGUoZmlsZW5hbWU9Tm9uZSk6CiAgICAiIiJEaXNjYXJkIGNhY2hlIGVudHJpZXMgdGhhdCBhcmUgb3V0IG9mIGRhdGUuCiAgICAoVGhpcyBpcyBub3QgY2hlY2tlZCB1cG9uIGVhY2ggY2FsbCEpIiIiCgogICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICBmaWxlbmFtZXMgPSBsaXN0KGNhY2hlLmtleXMoKSkKICAgIGVsc2U6CiAgICAgICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgICAgIGZpbGVuYW1lcyA9IFtmaWxlbmFtZV0KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KCiAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgIHNpemUsIG10aW1lLCBsaW5lcywgZnVsbG5hbWUgPSBjYWNoZVtmaWxlbmFtZV0KICAgICAgICBpZiBtdGltZSBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZSAgICMgbm8tb3AgZm9yIGZpbGVzIGxvYWRlZCB2aWEgYSBfX2xvYWRlcl9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWwgY2FjaGVbZmlsZW5hbWVdCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2l6ZSAhPSBzdGF0LnN0X3NpemUgb3IgbXRpbWUgIT0gc3RhdC5zdF9tdGltZToKICAgICAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQoKCmRlZiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICAiIiJVcGRhdGUgYSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuIGl0cyBsaXN0IG9mIGxpbmVzLgogICAgSWYgc29tZXRoaW5nJ3Mgd3JvbmcsIHByaW50IGEgbWVzc2FnZSwgZGlzY2FyZCB0aGUgY2FjaGUgZW50cnksCiAgICBhbmQgcmV0dXJuIGFuIGVtcHR5IGxpc3QuIiIiCgogICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQogICAgaWYgbm90IGZpbGVuYW1lIG9yIChmaWxlbmFtZS5zdGFydHN3aXRoKCc8JykgYW5kIGZpbGVuYW1lLmVuZHN3aXRoKCc+JykpOgogICAgICAgIHJldHVybiBbXQoKICAgIGZ1bGxuYW1lID0gZmlsZW5hbWUKICAgIHRyeToKICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgIGJhc2VuYW1lID0gZmlsZW5hbWUKCiAgICAgICAgIyBUcnkgZm9yIGEgX19sb2FkZXJfXywgaWYgYXZhaWxhYmxlCiAgICAgICAgaWYgbW9kdWxlX2dsb2JhbHMgYW5kICdfX2xvYWRlcl9fJyBpbiBtb2R1bGVfZ2xvYmFsczoKICAgICAgICAgICAgbmFtZSA9IG1vZHVsZV9nbG9iYWxzLmdldCgnX19uYW1lX18nKQogICAgICAgICAgICBsb2FkZXIgPSBtb2R1bGVfZ2xvYmFsc1snX19sb2FkZXJfXyddCiAgICAgICAgICAgIGdldF9zb3VyY2UgPSBnZXRhdHRyKGxvYWRlciwgJ2dldF9zb3VyY2UnLCBOb25lKQoKICAgICAgICAgICAgaWYgbmFtZSBhbmQgZ2V0X3NvdXJjZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZ2V0X3NvdXJjZShuYW1lKQogICAgICAgICAgICAgICAgZXhjZXB0IChJbXBvcnRFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gbHVjaywgdGhlIFBFUDMwMiBsb2FkZXIgY2Fubm90IGZpbmQgdGhlIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAjIGZvciB0aGlzIG1vZHVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbZmlsZW5hbWVdID0gKAogICAgICAgICAgICAgICAgICAgICAgICBsZW4oZGF0YSksIE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIFtsaW5lKydcbicgZm9yIGxpbmUgaW4gZGF0YS5zcGxpdGxpbmVzKCldLCBmdWxsbmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCgogICAgICAgICMgVHJ5IGxvb2tpbmcgdGhyb3VnaCB0aGUgbW9kdWxlIHNlYXJjaCBwYXRoLCB3aGljaCBpcyBvbmx5IHVzZWZ1bAogICAgICAgICMgd2hlbiBoYW5kbGluZyBhIHJlbGF0aXZlIGZpbGVuYW1lLgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgIyBUYWtlIGNhcmUgdG8gaGFuZGxlIHBhY2thZ2VzLgogICAgICAgIGlmIGJhc2VuYW1lID09ICdfX2luaXRfXy5weSc6CiAgICAgICAgICAgICMgZmlsZW5hbWUgcmVmZXJlcyB0byBhIHBhY2thZ2UKICAgICAgICAgICAgYmFzZW5hbWUgPSBmaWxlbmFtZQoKICAgICAgICBmb3IgZGlybmFtZSBpbiBzeXMucGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgYmFzZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBBdHRyaWJ1dGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIE5vdCBzdWZmaWNpZW50bHkgc3RyaW5nLWxpa2UgdG8gZG8gYW55dGhpbmcgdXNlZnVsIHdpdGguCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICNmaXhtZSBicnl0aG9uLCBpbnZhbGlkIHN5bnRheCAKICAgICAgICAgICAgI2V4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICNmaXhtZSBicnl0aG9uIHVuZXhwZWN0ZWQgdG9rZW4gZWxzZQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgcmV0dXJuIFtdCiAgICB0cnk6CiAgICAgICAgZnA9b3BlbihmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICN3aXRoIHRva2VuaXplLm9wZW4oZnVsbG5hbWUpIGFzIGZwOgogICAgICAgIGxpbmVzID0gZnAucmVhZGxpbmVzKCkKICAgICAgICBmcC5jbG9zZSgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gW10KICAgIGlmIGxpbmVzIGFuZCBub3QgbGluZXNbLTFdLmVuZHN3aXRoKCdcbicpOgogICAgICAgIGxpbmVzWy0xXSArPSAnXG4nCiAgICBzaXplLCBtdGltZSA9IHN0YXQuc3Rfc2l6ZSwgc3RhdC5zdF9tdGltZQogICAgY2FjaGVbZmlsZW5hbWVdID0gc2l6ZSwgbXRpbWUsIGxpbmVzLCBmdWxsbmFtZQogICAgcmV0dXJuIGxpbmVzCg==',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/local_storage.py':'IyBsb2NhbCBzdG9yYWdlIGluIGJyb3dzZXIKCmNsYXNzIExvY2FsU3RvcmFnZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgaWYgbm90IF9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlOgogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2xvY2FsIHN0b3JhZ2UgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcicpCiAgICAgICAgc2VsZi5zdG9yZSA9IF9fQlJZVEhPTl9fLmxvY2FsX3N0b3JhZ2UoKQogICAgICAgIAogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsa2V5KToKICAgICAgICBzZWxmLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiByZXMKICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsa2V5LHZhbHVlKToKICAgICAgICBzZWxmLnN0b3JlLnNldEl0ZW0oa2V5LHZhbHVlKQoKICAgICNpbXBsZW1lbnQgImluIiBmdW5jdGlvbmFsaXR5CiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBrZXlzKHNlbGYpOgogICAgICAgIHJldHVybiBsaXN0KHNlbGYuc3RvcmUpCgogICAgZGVmIHZhbHVlcyhzZWxmKToKICAgICAgICByZXR1cm4gW3NlbGYuX19nZXRpdGVtX18oaykgZm9yIGsgaW4gc2VsZi5rZXlzKCldCgogICAgZGVmIGl0ZW1zKHNlbGYpOgogICAgICAgIHJldHVybiB6aXAoc2VsZi5rZXlzKCksc2VsZi52YWx1ZXMoKSkKCnN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2UoKQoK',
'/Lib/markdown.py':'',
'/Lib/operator.py':'',
'/Lib/os.py':'aW1wb3J0IF9vcwoKbmFtZT0iYnJ5dGhvbiIKCiNhbHRzZXA9Tm9uZQojY3VyZGlyPSIuIgoKZGVmIGRldm51bGwoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGRldm51bGwgbm90IHN1cHBvcnRlZCcpCgojZXh0c2VwPScuJwoKZGVmIGdldGxvYWRhdmcoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGdldGxvYWRhdmcgbm90IHN1cHBvcnRlZCcpCgojbGluZXNlcD0iXG4iCiNwYXRoc2VwPSI7IgojcGFyZGlyPSIuLiIKI3NlcD0nLycKCmRlZiB1cmFuZG9tKGxlbmd0aCk6CiAgICBfYz1bXQogICAgZm9yIF9pIGluIHJhbmdlKGxlbmd0aCk6CiAgICAgICAgX2MuYXBwZW5kKGNocihfb3MucmFuZGludCgwLDI1NSkpKQogICAgICAgIAogICAgcmV0dXJuICcnLmpvaW4oX2MpCgojaW1wb3J0IHBvc2l4cGF0aCBhcyBwYXRoCiNzeXMubW9kdWxlc1snb3MucGF0aCddID0gcGF0aAoKI2Zyb20gb3MucGF0aCBpbXBvcnQgKGN1cmRpciwgcGFyZGlyLCBzZXAsIHBhdGhzZXAsIGRlZnBhdGgsIGV4dHNlcCwgYWx0c2VwKQoKIyBQeXRob24gdXNlcyBmaXhlZCB2YWx1ZXMgZm9yIHRoZSBTRUVLXyBjb25zdGFudHM7IHRoZXkgYXJlIG1hcHBlZAojIHRvIG5hdGl2ZSBjb25zdGFudHMgaWYgbmVjZXNzYXJ5IGluIHBvc2l4bW9kdWxlLmMKU0VFS19TRVQgPSAwClNFRUtfQ1VSID0gMQpTRUVLX0VORCA9IDIKCmRlZiB3YWxrKHRvcCwgdG9wZG93bj1UcnVlLCBvbmVycm9yPU5vbmUsIGZvbGxvd2xpbmtzPUZhbHNlKToKICAgICNyZWNlaXZlIHNjb3BlIGVycm9yIGluIGJyeXRob24KICAgICMgd2h5IGhhdmUgb3Mud2FsayBpbiBicnl0aG9uPyAgc2VydmVyIHNpZGUgamF2YXNjcmlwdCAobm9kZWpzKQogICAgIyBpbW1lZGlhdGVseSBjYW4gdXNlIG9zLndhbGsgdG8gY29tcGlsZSBsaWJzIGFuZCBMaWIgbW9kdWxlcwogICAgIyB0byBqYXZhc2NyaXB0IGVxdWl2YWxlbnQuLgogICAgT1NFcnJvcignRnVuY3Rpb24gb3Mud2FsayBub3Qgc3VwcG9ydGVkIHlldCcpCiAgICByZXR1cm4KCiAgICAiIiJEaXJlY3RvcnkgdHJlZSBnZW5lcmF0b3IuCgogICAgRm9yIGVhY2ggZGlyZWN0b3J5IGluIHRoZSBkaXJlY3RvcnkgdHJlZSByb290ZWQgYXQgdG9wIChpbmNsdWRpbmcgdG9wCiAgICBpdHNlbGYsIGJ1dCBleGNsdWRpbmcgJy4nIGFuZCAnLi4nKSwgeWllbGRzIGEgMy10dXBsZQoKICAgICAgICBkaXJwYXRoLCBkaXJuYW1lcywgZmlsZW5hbWVzCgogICAgZGlycGF0aCBpcyBhIHN0cmluZywgdGhlIHBhdGggdG8gdGhlIGRpcmVjdG9yeS4gIGRpcm5hbWVzIGlzIGEgbGlzdCBvZgogICAgdGhlIG5hbWVzIG9mIHRoZSBzdWJkaXJlY3RvcmllcyBpbiBkaXJwYXRoIChleGNsdWRpbmcgJy4nIGFuZCAnLi4nKS4KICAgIGZpbGVuYW1lcyBpcyBhIGxpc3Qgb2YgdGhlIG5hbWVzIG9mIHRoZSBub24tZGlyZWN0b3J5IGZpbGVzIGluIGRpcnBhdGguCiAgICBOb3RlIHRoYXQgdGhlIG5hbWVzIGluIHRoZSBsaXN0cyBhcmUganVzdCBuYW1lcywgd2l0aCBubyBwYXRoIGNvbXBvbmVudHMuCiAgICBUbyBnZXQgYSBmdWxsIHBhdGggKHdoaWNoIGJlZ2lucyB3aXRoIHRvcCkgdG8gYSBmaWxlIG9yIGRpcmVjdG9yeSBpbgogICAgZGlycGF0aCwgZG8gb3MucGF0aC5qb2luKGRpcnBhdGgsIG5hbWUpLgoKICAgIElmIG9wdGlvbmFsIGFyZyAndG9wZG93bicgaXMgdHJ1ZSBvciBub3Qgc3BlY2lmaWVkLCB0aGUgdHJpcGxlIGZvciBhCiAgICBkaXJlY3RvcnkgaXMgZ2VuZXJhdGVkIGJlZm9yZSB0aGUgdHJpcGxlcyBmb3IgYW55IG9mIGl0cyBzdWJkaXJlY3RvcmllcwogICAgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgdG9wIGRvd24pLiAgSWYgdG9wZG93biBpcyBmYWxzZSwgdGhlIHRyaXBsZQogICAgZm9yIGEgZGlyZWN0b3J5IGlzIGdlbmVyYXRlZCBhZnRlciB0aGUgdHJpcGxlcyBmb3IgYWxsIG9mIGl0cwogICAgc3ViZGlyZWN0b3JpZXMgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgYm90dG9tIHVwKS4KCiAgICBXaGVuIHRvcGRvd24gaXMgdHJ1ZSwgdGhlIGNhbGxlciBjYW4gbW9kaWZ5IHRoZSBkaXJuYW1lcyBsaXN0IGluLXBsYWNlCiAgICAoZS5nLiwgdmlhIGRlbCBvciBzbGljZSBhc3NpZ25tZW50KSwgYW5kIHdhbGsgd2lsbCBvbmx5IHJlY3Vyc2UgaW50byB0aGUKICAgIHN1YmRpcmVjdG9yaWVzIHdob3NlIG5hbWVzIHJlbWFpbiBpbiBkaXJuYW1lczsgdGhpcyBjYW4gYmUgdXNlZCB0byBwcnVuZQogICAgdGhlIHNlYXJjaCwgb3IgdG8gaW1wb3NlIGEgc3BlY2lmaWMgb3JkZXIgb2YgdmlzaXRpbmcuICBNb2RpZnlpbmcKICAgIGRpcm5hbWVzIHdoZW4gdG9wZG93biBpcyBmYWxzZSBpcyBpbmVmZmVjdGl2ZSwgc2luY2UgdGhlIGRpcmVjdG9yaWVzIGluCiAgICBkaXJuYW1lcyBoYXZlIGFscmVhZHkgYmVlbiBnZW5lcmF0ZWQgYnkgdGhlIHRpbWUgZGlybmFtZXMgaXRzZWxmIGlzCiAgICBnZW5lcmF0ZWQuCgogICAgQnkgZGVmYXVsdCBlcnJvcnMgZnJvbSB0aGUgb3MubGlzdGRpcigpIGNhbGwgYXJlIGlnbm9yZWQuICBJZgogICAgb3B0aW9uYWwgYXJnICdvbmVycm9yJyBpcyBzcGVjaWZpZWQsIGl0IHNob3VsZCBiZSBhIGZ1bmN0aW9uOyBpdAogICAgd2lsbCBiZSBjYWxsZWQgd2l0aCBvbmUgYXJndW1lbnQsIGFuIG9zLmVycm9yIGluc3RhbmNlLiAgSXQgY2FuCiAgICByZXBvcnQgdGhlIGVycm9yIHRvIGNvbnRpbnVlIHdpdGggdGhlIHdhbGssIG9yIHJhaXNlIHRoZSBleGNlcHRpb24KICAgIHRvIGFib3J0IHRoZSB3YWxrLiAgTm90ZSB0aGF0IHRoZSBmaWxlbmFtZSBpcyBhdmFpbGFibGUgYXMgdGhlCiAgICBmaWxlbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGV4Y2VwdGlvbiBvYmplY3QuCgogICAgQnkgZGVmYXVsdCwgb3Mud2FsayBkb2VzIG5vdCBmb2xsb3cgc3ltYm9saWMgbGlua3MgdG8gc3ViZGlyZWN0b3JpZXMgb24KICAgIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHRoZW0uICBJbiBvcmRlciB0byBnZXQgdGhpcyBmdW5jdGlvbmFsaXR5LCBzZXQgdGhlCiAgICBvcHRpb25hbCBhcmd1bWVudCAnZm9sbG93bGlua3MnIHRvIHRydWUuCgogICAgQ2F1dGlvbjogIGlmIHlvdSBwYXNzIGEgcmVsYXRpdmUgcGF0aG5hbWUgZm9yIHRvcCwgZG9uJ3QgY2hhbmdlIHRoZQogICAgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBiZXR3ZWVuIHJlc3VtcHRpb25zIG9mIHdhbGsuICB3YWxrIG5ldmVyCiAgICBjaGFuZ2VzIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgYW5kIGFzc3VtZXMgdGhhdCB0aGUgY2xpZW50IGRvZXNuJ3QKICAgIGVpdGhlci4KCiAgICBFeGFtcGxlOgoKICAgIGltcG9ydCBvcwogICAgZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luLCBnZXRzaXplCiAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsaygncHl0aG9uL0xpYi9lbWFpbCcpOgogICAgICAgIHByaW50KHJvb3QsICJjb25zdW1lcyIsIGVuZD0iIikKICAgICAgICBwcmludChzdW0oW2dldHNpemUoam9pbihyb290LCBuYW1lKSkgZm9yIG5hbWUgaW4gZmlsZXNdKSwgZW5kPSIiKQogICAgICAgIHByaW50KCJieXRlcyBpbiIsIGxlbihmaWxlcyksICJub24tZGlyZWN0b3J5IGZpbGVzIikKICAgICAgICBpZiAnQ1ZTJyBpbiBkaXJzOgogICAgICAgICAgICBkaXJzLnJlbW92ZSgnQ1ZTJykgICMgZG9uJ3QgdmlzaXQgQ1ZTIGRpcmVjdG9yaWVzCiAgICAiIiIKICAgICIiIgogICAgCiAgICBpc2xpbmssIGpvaW4sIGlzZGlyID0gcGF0aC5pc2xpbmssIHBhdGguam9pbiwgcGF0aC5pc2RpcgoKICAgICMgV2UgbWF5IG5vdCBoYXZlIHJlYWQgcGVybWlzc2lvbiBmb3IgdG9wLCBpbiB3aGljaCBjYXNlIHdlIGNhbid0CiAgICAjIGdldCBhIGxpc3Qgb2YgdGhlIGZpbGVzIHRoZSBkaXJlY3RvcnkgY29udGFpbnMuICBvcy53YWxrCiAgICAjIGFsd2F5cyBzdXBwcmVzc2VkIHRoZSBleGNlcHRpb24gdGhlbiwgcmF0aGVyIHRoYW4gYmxvdyB1cCBmb3IgYQogICAgIyBtaW5vciByZWFzb24gd2hlbiAoc2F5KSBhIHRob3VzYW5kIHJlYWRhYmxlIGRpcmVjdG9yaWVzIGFyZSBzdGlsbAogICAgIyBsZWZ0IHRvIHZpc2l0LiAgVGhhdCBsb2dpYyBpcyBjb3BpZWQgaGVyZS4KICAgIHRyeToKICAgICAgICAjIE5vdGUgdGhhdCBsaXN0ZGlyIGFuZCBlcnJvciBhcmUgZ2xvYmFscyBpbiB0aGlzIG1vZHVsZSBkdWUKICAgICAgICAjIHRvIGVhcmxpZXIgaW1wb3J0LSouCiAgICAgICAgbmFtZXMgPSBsaXN0ZGlyKHRvcCkKICAgIGV4Y2VwdCBlcnJvciBhcyBlcnI6CiAgICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgb25lcnJvcihlcnIpCiAgICAgICAgcmV0dXJuCiAgICAKICAgIGRpcnMsIG5vbmRpcnMgPSBbXSwgW10KICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgIGlmIGlzZGlyKGpvaW4odG9wLCBuYW1lKSk6CiAgICAgICAgICAgIGRpcnMuYXBwZW5kKG5hbWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbm9uZGlycy5hcHBlbmQobmFtZSkKICAgIAogICAgaWYgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgIAogICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICBuZXdfcGF0aCA9IGpvaW4odG9wLCBuYW1lKQogICAgICAgIGlmIGZvbGxvd2xpbmtzIG9yIG5vdCBpc2xpbmsobmV3X3BhdGgpOgogICAgICAgICAgICBmb3IgeCBpbiB3YWxrKG5ld19wYXRoLCB0b3Bkb3duLCBvbmVycm9yLCBmb2xsb3dsaW5rcyk6CiAgICAgICAgICAgICAgICB5aWVsZCB4CiAgICBpZiBub3QgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgICIiIgo=',
'/Lib/pydom.py':'',
'/Lib/pyindexedDB.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBweWluZGV4ZWREQjoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIGlmIG5vdCBfX0JSWVRIT05fXy5oYXNfaW5kZXhlZERCOgogICAgICAgICByYWlzZSBFeGNlcHRpb24oIk5vdEltcGxlbWVudGVkRXJyb3IiLCAiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpbmRleGVkREIiKQogICAgICAgICByZXR1cm4KCiAgICAgIHNlbGYuX2luZGV4ZWREQj1fX0JSWVRIT05fXy5pbmRleGVkREIoKQogICAgICBzZWxmLl9kYj1Ob25lCiAgICAgIHNlbGYuX3ZlcnNpb249Tm9uZQoKICBkZWYgX29uc3VjY2VzcyhzZWxmLCBldmVudCk6CiAgICAgIHNlbGYuX2RiPWV2ZW50LnRhcmdldC5yZXN1bHQKCiAgZGVmIG9wZW4oc2VsZiwgbmFtZSwgb25zdWNjZXNzLCB2ZXJzaW9uPTEuMCwgb25lcnJvcj1Ob25lLCAKICAgICAgICAgICBvbnVwZ3JhZGVuZWVkZWQ9Tm9uZSk6CiAgICAgIHNlbGYuX3ZlcnNpb249dmVyc2lvbgogICAgICBfcmVzdWx0PXNlbGYuX2luZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pCiAgICAgIF9zdWNjZXNzPUV2ZW50TGlzdGVuZXIoW3NlbGYuX29uc3VjY2Vzcywgb25zdWNjZXNzXSkKICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9X3N1Y2Nlc3MuZmlyZQogICAgICBfcmVzdWx0Lm9udXBncmFkZW5lZWRlZD1vbnVwZ3JhZGVuZWVkZWQKCiAgICAgICNpZiBvbmVycm9yIGlzIE5vbmU6CiAgICAgIGRlZiBvbmVycm9yKGUpOgogICAgICAgICAgcHJpbnQoIm9uZXJyb3I6ICVzOiVzIiAlICAoZS50eXBlLCBlLnRhcmdldC5yZXN1bHQpKQoKICAgICAgZGVmIG9uYmxvY2tlZChlKToKICAgICAgICAgIHByaW50KCJibG9ja2VkOiAlczolcyIgJSAgKGUudHlwZSwgZS5yZXN1bHQpKQoKICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKICAgICAgX3Jlc3VsdC5vbmJsb2NrZWQ9b25ibG9ja2VkCgogIGRlZiB0cmFuc2FjdGlvbihzZWxmLCBlbnRpdGllcywgbW9kZT0ncmVhZCcpOgogICAgICByZXR1cm4gVHJhbnNhY3Rpb24oc2VsZi5fZGIudHJhbnNhY3Rpb24oZW50aXRpZXMsIG1vZGUpKQoKY2xhc3MgVHJhbnNhY3Rpb246CiAgZGVmIF9faW5pdF9fKHNlbGYsIHRyYW5zYWN0aW9uKToKICAgICAgc2VsZi5fdHJhbnNhY3Rpb249dHJhbnNhY3Rpb24KCiAgZGVmIG9iamVjdFN0b3JlKHNlbGYsIG5hbWUpOgogICAgICByZXR1cm4gT2JqZWN0U3RvcmUoc2VsZi5fdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUobmFtZSkpCgpjbGFzcyBPYmplY3RTdG9yZToKICBkZWYgX19pbml0X18oc2VsZiwgb2JqZWN0U3RvcmUpOgogICAgICBzZWxmLl9vYmplY3RTdG9yZT1vYmplY3RTdG9yZQogICAgICBzZWxmLl9kYXRhPVtdCgogIGRlZiBjbGVhcihzZWxmLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1zZWxmLl9vYmplY3RTdG9yZS5jbGVhcigpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIF9oZWxwZXIoc2VsZiwgZnVuYywgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1mdW5jKG9iamVjdCkKCiAgICAgIGlmIG9uc3VjY2VzcyBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogICAgICBpZiBvbmVycm9yIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uZXJyb3I9b25lcnJvcgoKICBkZWYgcHV0KHNlbGYsIG9iamVjdCwga2V5PU5vbmUsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOgogICAgICBfcj1zZWxmLl9vYmplY3RTdG9yZS5wdXQob2JqZWN0LCBrZXkpCiAgICAgIF9yLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKICAgICAgX3Iub25lcnJvcj1vbmVycm9yCgogIGRlZiBhZGQoc2VsZiwgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmFkZCwgb2JqZWN0LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCgogIGRlZiBkZWxldGUoc2VsZiwgaW5kZXgsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOiAKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmRlbGV0ZSwgaW5kZXgsIG9uc3VjY2Vzcywgb25lcnJvcikKICAgICAKICBkZWYgcXVlcnkoc2VsZiwgKmFyZ3MpOgogICAgICBzZWxmLl9kYXRhPVtdCiAgICAgIGRlZiBvbnN1Y2Nlc3MoZXZlbnQpOgogICAgICAgICAgY3Vyc29yPWV2ZW50LnRhcmdldC5yZXN1bHQKICAgICAgICAgIGlmIGN1cnNvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgIHNlbGYuX2RhdGEuYXBwZW5kKGN1cnNvci52YWx1ZSkKICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpCgogICAgICBzZWxmLl9vYmplY3RTdG9yZS5vcGVuQ3Vyc29yKGFyZ3MpLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgZGVmIGZldGNoYWxsKHNlbGYpOgogICAgICB5aWVsZCBzZWxmLl9kYXRhCgogIGRlZiBnZXQoc2VsZiwga2V5LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmdldCwga2V5LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCg==',
'/Lib/random.py':'',
'/Lib/reprlib.py':'IiIiUmVkbyB0aGUgYnVpbHRpbiByZXByKCkgKHJlcHJlc2VudGF0aW9uKSBidXQgd2l0aCBsaW1pdHMgb24gbW9zdCBzaXplcy4iIiIKCl9fYWxsX18gPSBbIlJlcHIiLCAicmVwciIsICJyZWN1cnNpdmVfcmVwciJdCgppbXBvcnQgYnVpbHRpbnMKZnJvbSBpdGVydG9vbHMgaW1wb3J0IGlzbGljZQp0cnk6CiAgICBmcm9tIF90aHJlYWQgaW1wb3J0IGdldF9pZGVudApleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBmcm9tIF9kdW1teV90aHJlYWQgaW1wb3J0IGdldF9pZGVudAoKZGVmIHJlY3Vyc2l2ZV9yZXByKGZpbGx2YWx1ZT0nLi4uJyk6CiAgICAnRGVjb3JhdG9yIHRvIG1ha2UgYSByZXByIGZ1bmN0aW9uIHJldHVybiBmaWxsdmFsdWUgZm9yIGEgcmVjdXJzaXZlIGNhbGwnCgogICAgZGVmIGRlY29yYXRpbmdfZnVuY3Rpb24odXNlcl9mdW5jdGlvbik6CiAgICAgICAgcmVwcl9ydW5uaW5nID0gc2V0KCkKCiAgICAgICAgZGVmIHdyYXBwZXIoc2VsZik6CiAgICAgICAgICAgIGtleSA9IGlkKHNlbGYpLCBnZXRfaWRlbnQoKQogICAgICAgICAgICBpZiBrZXkgaW4gcmVwcl9ydW5uaW5nOgogICAgICAgICAgICAgICAgcmV0dXJuIGZpbGx2YWx1ZQogICAgICAgICAgICByZXByX3J1bm5pbmcuYWRkKGtleSkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgcmVzdWx0ID0gdXNlcl9mdW5jdGlvbihzZWxmKQogICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgcmVwcl9ydW5uaW5nLmRpc2NhcmQoa2V5KQogICAgICAgICAgICByZXR1cm4gcmVzdWx0CgogICAgICAgICMgQ2FuJ3QgdXNlIGZ1bmN0b29scy53cmFwcygpIGhlcmUgYmVjYXVzZSBvZiBib290c3RyYXAgaXNzdWVzCiAgICAgICAgd3JhcHBlci5fX21vZHVsZV9fID0gZ2V0YXR0cih1c2VyX2Z1bmN0aW9uLCAnX19tb2R1bGVfXycpCiAgICAgICAgd3JhcHBlci5fX2RvY19fID0gZ2V0YXR0cih1c2VyX2Z1bmN0aW9uLCAnX19kb2NfXycpCiAgICAgICAgd3JhcHBlci5fX25hbWVfXyA9IGdldGF0dHIodXNlcl9mdW5jdGlvbiwgJ19fbmFtZV9fJykKICAgICAgICB3cmFwcGVyLl9fYW5ub3RhdGlvbnNfXyA9IGdldGF0dHIodXNlcl9mdW5jdGlvbiwgJ19fYW5ub3RhdGlvbnNfXycsIHt9KQogICAgICAgIHJldHVybiB3cmFwcGVyCgogICAgcmV0dXJuIGRlY29yYXRpbmdfZnVuY3Rpb24KCmNsYXNzIFJlcHI6CgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYubWF4bGV2ZWwgPSA2CiAgICAgICAgc2VsZi5tYXh0dXBsZSA9IDYKICAgICAgICBzZWxmLm1heGxpc3QgPSA2CiAgICAgICAgc2VsZi5tYXhhcnJheSA9IDUKICAgICAgICBzZWxmLm1heGRpY3QgPSA0CiAgICAgICAgc2VsZi5tYXhzZXQgPSA2CiAgICAgICAgc2VsZi5tYXhmcm96ZW5zZXQgPSA2CiAgICAgICAgc2VsZi5tYXhkZXF1ZSA9IDYKICAgICAgICBzZWxmLm1heHN0cmluZyA9IDMwCiAgICAgICAgc2VsZi5tYXhsb25nID0gNDAKICAgICAgICBzZWxmLm1heG90aGVyID0gMzAKCiAgICBkZWYgcmVwcihzZWxmLCB4KToKICAgICAgICByZXR1cm4gc2VsZi5yZXByMSh4LCBzZWxmLm1heGxldmVsKQoKICAgIGRlZiByZXByMShzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgdHlwZW5hbWUgPSB0eXBlKHgpLl9fbmFtZV9fCiAgICAgICAgaWYgJyAnIGluIHR5cGVuYW1lOgogICAgICAgICAgICBwYXJ0cyA9IHR5cGVuYW1lLnNwbGl0KCkKICAgICAgICAgICAgdHlwZW5hbWUgPSAnXycuam9pbihwYXJ0cykKICAgICAgICBpZiBoYXNhdHRyKHNlbGYsICdyZXByXycgKyB0eXBlbmFtZSk6CiAgICAgICAgICAgIHJldHVybiBnZXRhdHRyKHNlbGYsICdyZXByXycgKyB0eXBlbmFtZSkoeCwgbGV2ZWwpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIHNlbGYucmVwcl9pbnN0YW5jZSh4LCBsZXZlbCkKCiAgICBkZWYgX3JlcHJfaXRlcmFibGUoc2VsZiwgeCwgbGV2ZWwsIGxlZnQsIHJpZ2h0LCBtYXhpdGVyLCB0cmFpbD0nJyk6CiAgICAgICAgbiA9IGxlbih4KQogICAgICAgIGlmIGxldmVsIDw9IDAgYW5kIG46CiAgICAgICAgICAgIHMgPSAnLi4uJwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG5ld2xldmVsID0gbGV2ZWwgLSAxCiAgICAgICAgICAgIHJlcHIxID0gc2VsZi5yZXByMQogICAgICAgICAgICBwaWVjZXMgPSBbcmVwcjEoZWxlbSwgbmV3bGV2ZWwpIGZvciBlbGVtIGluIGlzbGljZSh4LCBtYXhpdGVyKV0KICAgICAgICAgICAgaWYgbiA+IG1heGl0ZXI6ICBwaWVjZXMuYXBwZW5kKCcuLi4nKQogICAgICAgICAgICBzID0gJywgJy5qb2luKHBpZWNlcykKICAgICAgICAgICAgaWYgbiA9PSAxIGFuZCB0cmFpbDogIHJpZ2h0ID0gdHJhaWwgKyByaWdodAogICAgICAgIHJldHVybiAnJXMlcyVzJyAlIChsZWZ0LCBzLCByaWdodCkKCiAgICBkZWYgcmVwcl90dXBsZShzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgcmV0dXJuIHNlbGYuX3JlcHJfaXRlcmFibGUoeCwgbGV2ZWwsICcoJywgJyknLCBzZWxmLm1heHR1cGxlLCAnLCcpCgogICAgZGVmIHJlcHJfbGlzdChzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgcmV0dXJuIHNlbGYuX3JlcHJfaXRlcmFibGUoeCwgbGV2ZWwsICdbJywgJ10nLCBzZWxmLm1heGxpc3QpCgogICAgZGVmIHJlcHJfYXJyYXkoc2VsZiwgeCwgbGV2ZWwpOgogICAgICAgIGhlYWRlciA9ICJhcnJheSgnJXMnLCBbIiAlIHgudHlwZWNvZGUKICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgaGVhZGVyLCAnXSknLCBzZWxmLm1heGFycmF5KQoKICAgIGRlZiByZXByX3NldChzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgeCA9IF9wb3NzaWJseV9zb3J0ZWQoeCkKICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgJ3NldChbJywgJ10pJywgc2VsZi5tYXhzZXQpCgogICAgZGVmIHJlcHJfZnJvemVuc2V0KHNlbGYsIHgsIGxldmVsKToKICAgICAgICB4ID0gX3Bvc3NpYmx5X3NvcnRlZCh4KQogICAgICAgIHJldHVybiBzZWxmLl9yZXByX2l0ZXJhYmxlKHgsIGxldmVsLCAnZnJvemVuc2V0KFsnLCAnXSknLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubWF4ZnJvemVuc2V0KQoKICAgIGRlZiByZXByX2RlcXVlKHNlbGYsIHgsIGxldmVsKToKICAgICAgICByZXR1cm4gc2VsZi5fcmVwcl9pdGVyYWJsZSh4LCBsZXZlbCwgJ2RlcXVlKFsnLCAnXSknLCBzZWxmLm1heGRlcXVlKQoKICAgIGRlZiByZXByX2RpY3Qoc2VsZiwgeCwgbGV2ZWwpOgogICAgICAgIG4gPSBsZW4oeCkKICAgICAgICBpZiBuID09IDA6IHJldHVybiAne30nCiAgICAgICAgaWYgbGV2ZWwgPD0gMDogcmV0dXJuICd7Li4ufScKICAgICAgICBuZXdsZXZlbCA9IGxldmVsIC0gMQogICAgICAgIHJlcHIxID0gc2VsZi5yZXByMQogICAgICAgIHBpZWNlcyA9IFtdCiAgICAgICAgZm9yIGtleSBpbiBpc2xpY2UoX3Bvc3NpYmx5X3NvcnRlZCh4KSwgc2VsZi5tYXhkaWN0KToKICAgICAgICAgICAga2V5cmVwciA9IHJlcHIxKGtleSwgbmV3bGV2ZWwpCiAgICAgICAgICAgIHZhbHJlcHIgPSByZXByMSh4W2tleV0sIG5ld2xldmVsKQogICAgICAgICAgICBwaWVjZXMuYXBwZW5kKCclczogJXMnICUgKGtleXJlcHIsIHZhbHJlcHIpKQogICAgICAgIGlmIG4gPiBzZWxmLm1heGRpY3Q6IHBpZWNlcy5hcHBlbmQoJy4uLicpCiAgICAgICAgcyA9ICcsICcuam9pbihwaWVjZXMpCiAgICAgICAgcmV0dXJuICd7JXN9JyAlIChzLCkKCiAgICBkZWYgcmVwcl9zdHIoc2VsZiwgeCwgbGV2ZWwpOgogICAgICAgIHMgPSBidWlsdGlucy5yZXByKHhbOnNlbGYubWF4c3RyaW5nXSkKICAgICAgICBpZiBsZW4ocykgPiBzZWxmLm1heHN0cmluZzoKICAgICAgICAgICAgaSA9IG1heCgwLCAoc2VsZi5tYXhzdHJpbmctMykvLzIpCiAgICAgICAgICAgIGogPSBtYXgoMCwgc2VsZi5tYXhzdHJpbmctMy1pKQogICAgICAgICAgICBzID0gYnVpbHRpbnMucmVwcih4WzppXSArIHhbbGVuKHgpLWo6XSkKICAgICAgICAgICAgcyA9IHNbOmldICsgJy4uLicgKyBzW2xlbihzKS1qOl0KICAgICAgICByZXR1cm4gcwoKICAgIGRlZiByZXByX2ludChzZWxmLCB4LCBsZXZlbCk6CiAgICAgICAgcyA9IGJ1aWx0aW5zLnJlcHIoeCkgIyBYWFggSG9wZSB0aGlzIGlzbid0IHRvbyBzbG93Li4uCiAgICAgICAgaWYgbGVuKHMpID4gc2VsZi5tYXhsb25nOgogICAgICAgICAgICBpID0gbWF4KDAsIChzZWxmLm1heGxvbmctMykvLzIpCiAgICAgICAgICAgIGogPSBtYXgoMCwgc2VsZi5tYXhsb25nLTMtaSkKICAgICAgICAgICAgcyA9IHNbOmldICsgJy4uLicgKyBzW2xlbihzKS1qOl0KICAgICAgICByZXR1cm4gcwoKICAgIGRlZiByZXByX2luc3RhbmNlKHNlbGYsIHgsIGxldmVsKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHMgPSBidWlsdGlucy5yZXByKHgpCiAgICAgICAgICAgICMgQnVncyBpbiB4Ll9fcmVwcl9fKCkgY2FuIGNhdXNlIGFyYml0cmFyeQogICAgICAgICAgICAjIGV4Y2VwdGlvbnMgLS0gdGhlbiBtYWtlIHVwIHNvbWV0aGluZwogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHJldHVybiAnPCVzIGluc3RhbmNlIGF0ICV4PicgJSAoeC5fX2NsYXNzX18uX19uYW1lX18sIGlkKHgpKQogICAgICAgIGlmIGxlbihzKSA+IHNlbGYubWF4b3RoZXI6CiAgICAgICAgICAgIGkgPSBtYXgoMCwgKHNlbGYubWF4b3RoZXItMykvLzIpCiAgICAgICAgICAgIGogPSBtYXgoMCwgc2VsZi5tYXhvdGhlci0zLWkpCiAgICAgICAgICAgIHMgPSBzWzppXSArICcuLi4nICsgc1tsZW4ocyktajpdCiAgICAgICAgcmV0dXJuIHMKCgpkZWYgX3Bvc3NpYmx5X3NvcnRlZCh4KToKICAgICMgU2luY2Ugbm90IGFsbCBzZXF1ZW5jZXMgb2YgaXRlbXMgY2FuIGJlIHNvcnRlZCBhbmQgY29tcGFyaXNvbgogICAgIyBmdW5jdGlvbnMgbWF5IHJhaXNlIGFyYml0cmFyeSBleGNlcHRpb25zLCByZXR1cm4gYW4gdW5zb3J0ZWQKICAgICMgc2VxdWVuY2UgaW4gdGhhdCBjYXNlLgogICAgdHJ5OgogICAgICAgIHJldHVybiBzb3J0ZWQoeCkKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgcmV0dXJuIGxpc3QoeCkKCmFSZXByID0gUmVwcigpCnJlcHIgPSBhUmVwci5yZXByCg==',
'/Lib/string.py':'IyBTb21lIHN0cmluZ3MgZm9yIGN0eXBlLXN0eWxlIGNoYXJhY3RlciBjbGFzc2lmaWNhdGlvbgp3aGl0ZXNwYWNlID0gJyBcdFxuXHJcdlxmJwphc2NpaV9sb3dlcmNhc2UgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonCmFzY2lpX3VwcGVyY2FzZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicKYXNjaWlfbGV0dGVycyA9IGFzY2lpX2xvd2VyY2FzZSArIGFzY2lpX3VwcGVyY2FzZQpkaWdpdHMgPSAnMDEyMzQ1Njc4OScKaGV4ZGlnaXRzID0gZGlnaXRzICsgJ2FiY2RlZicgKyAnQUJDREVGJwpvY3RkaWdpdHMgPSAnMDEyMzQ1NjcnCnB1bmN0dWF0aW9uID0gIiIiISIjJCUmJygpKissLS4vOjs8PT4/QFtcXV5fYHt8fX4iIiIKcHJpbnRhYmxlID0gZGlnaXRzICsgYXNjaWlfbGV0dGVycyArIHB1bmN0dWF0aW9uICsgd2hpdGVzcGFjZQoKIyBGdW5jdGlvbnMgd2hpY2ggYXJlbid0IGF2YWlsYWJsZSBhcyBzdHJpbmcgbWV0aG9kcy4KCiMgQ2FwaXRhbGl6ZSB0aGUgd29yZHMgaW4gYSBzdHJpbmcsIGUuZy4gIiBhQmMgIGRFZiAiIC0+ICJBYmMgRGVmIi4KZGVmIGNhcHdvcmRzKHMsIHNlcD1Ob25lKToKICAgICIiImNhcHdvcmRzKHMgWyxzZXBdKSAtPiBzdHJpbmcKCiAgICBTcGxpdCB0aGUgYXJndW1lbnQgaW50byB3b3JkcyB1c2luZyBzcGxpdCwgY2FwaXRhbGl6ZSBlYWNoCiAgICB3b3JkIHVzaW5nIGNhcGl0YWxpemUsIGFuZCBqb2luIHRoZSBjYXBpdGFsaXplZCB3b3JkcyB1c2luZwogICAgam9pbi4gIElmIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgc2VwIGlzIGFic2VudCBvciBOb25lLAogICAgcnVucyBvZiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgYXJlIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIHNwYWNlCiAgICBhbmQgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcmUgcmVtb3ZlZCwgb3RoZXJ3aXNlCiAgICBzZXAgaXMgdXNlZCB0byBzcGxpdCBhbmQgam9pbiB0aGUgd29yZHMuCgogICAgIiIiCiAgICByZXR1cm4gKHNlcCBvciAnICcpLmpvaW4oeC5jYXBpdGFsaXplKCkgZm9yIHggaW4gcy5zcGxpdChzZXApKQo=',
'/Lib/sys.py':'X19zdGRvdXRfXz1nZXRhdHRyKGRvYywiJHN0ZG91dCIpCl9fc3RkZXJyX189Z2V0YXR0cihkb2MsIiRzdGRlcnIiKQoKc3Rkb3V0ID0gZ2V0YXR0cihkb2MsIiRzdGRvdXQiKQpzdGRlcnIgPSBnZXRhdHRyKGRvYywiJHN0ZGVyciIpCgptb2R1bGVzPV9fQlJZVEhPTl9fLm1vZHVsZXMKCmhhc19sb2NhbF9zdG9yYWdlPV9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlCmhhc19qc29uPV9fQlJZVEhPTl9fLmhhc19qc29uCnZlcnNpb25faW5mbz1fX0JSWVRIT05fXy52ZXJzaW9uX2luZm8KcGF0aD1fX0JSWVRIT05fXy5wYXRoCmJ1aWx0aW5fbW9kdWxlX25hbWVzPVsncG9zaXgnXQoKYnl0ZW9yZGVyPSdsaXR0bGUnCm1heHNpemU9OTAwNzE5OTI1NDc0MDk5MiAgICNsYXJnZXN0IGludGVnZXIuLgptYXh1bmljb2RlPTExMTQxMTEKCnBsYXRmb3JtPSJicnl0aG9uIgp3YXJub3B0aW9ucz1bXQoKY2xhc3MgZmxhZ19jbGFzczoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIHNlbGYuZGVidWc9MAogICAgICBzZWxmLmluc3BlY3Q9MAogICAgICBzZWxmLmludGVyYWN0aXZlPTAKICAgICAgc2VsZi5vcHRpbWl6ZT0wCiAgICAgIHNlbGYuZG9udF93cml0ZV9ieXRlY29kZT0wCiAgICAgIHNlbGYubm9fdXNlcl9zaXRlPTAKICAgICAgc2VsZi5ub19zaXRlPTAKICAgICAgc2VsZi5pZ25vcmVfZW52aXJvbm1lbnQ9MAogICAgICBzZWxmLnZlcmJvc2U9MAogICAgICBzZWxmLmJ5dGVzX3dhcm5pbmc9MAogICAgICBzZWxmLnF1aWV0PTAKICAgICAgc2VsZi5oYXNoX3JhbmRvbWl6YXRpb249MQoKZmxhZ3M9ZmxhZ19jbGFzcygpCgo=',
'/Lib/this.py':'cyA9ICIiIkd1ciBNcmEgYnMgQ2xndWJhLCBvbCBHdnogQ3JncmVmCgpPcm5oZ3ZzaHkgdmYgb3JnZ3JlIGd1bmEgaHR5bC4KUmtjeXZwdmcgdmYgb3JnZ3JlIGd1bmEgdnpjeXZwdmcuCkZ2emN5ciB2ZiBvcmdncmUgZ3VuYSBwYnpjeXJrLgpQYnpjeXJrIHZmIG9yZ2dyZSBndW5hIHBiemN5dnBuZ3JxLgpTeW5nIHZmIG9yZ2dyZSBndW5hIGFyZmdycS4KRmNuZWZyIHZmIG9yZ2dyZSBndW5hIHFyYWZyLgpFcm5xbm92eXZnbCBwYmhhZ2YuCkZjcnB2bnkgcG5mcmYgbmVyYSdnIGZjcnB2bnkgcmFiaHR1IGdiIG9lcm54IGd1ciBlaHlyZi4KTnlndWJodHUgY2VucGd2cG55dmdsIG9ybmdmIGNoZXZnbC4KUmVlYmVmIGZ1Ymh5cSBhcmlyZSBjbmZmIGZ2eXJhZ3lsLgpIYXlyZmYgcmtjeXZwdmd5bCBmdnlyYXBycS4KVmEgZ3VyIHNucHIgYnMgbnpvdnRodmdsLCBlcnNoZnIgZ3VyIGdyemNnbmd2YmEgZ2IgdGhyZmYuCkd1cmVyIGZ1Ymh5cSBvciBiYXItLSBuYXEgY2Vyc3Jlbm95bCBiYXlsIGJhciAtLWJvaXZiaGYgam5sIGdiIHFiIHZnLgpOeWd1Ymh0dSBndW5nIGpubCB6bmwgYWJnIG9yIGJvaXZiaGYgbmcgc3ZlZmcgaGF5cmZmIGxiaCdlciBRaGdwdS4KQWJqIHZmIG9yZ2dyZSBndW5hIGFyaXJlLgpOeWd1Ymh0dSBhcmlyZSB2ZiBic2dyYSBvcmdncmUgZ3VuYSAqZXZ0dWcqIGFiai4KVnMgZ3VyIHZ6Y3lyenJhZ25ndmJhIHZmIHVuZXEgZ2IgcmtjeW52YSwgdmcnZiBuIG9ucSB2cXJuLgpWcyBndXIgdnpjeXJ6cmFnbmd2YmEgdmYgcm5mbCBnYiBya2N5bnZhLCB2ZyB6bmwgb3IgbiB0YmJxIHZxcm4uCkFuenJmY25wcmYgbmVyIGJhciB1YmF4dmF0IHRlcm5nIHZxcm4gLS0geXJnJ2YgcWIgemJlciBicyBndWJmciEiIiIKCmQgPSB7fQpmb3IgYyBpbiAoNjUsIDk3KToKICAgIGZvciBpIGluIHJhbmdlKDI2KToKICAgICAgICBkW2NocihpK2MpXSA9IGNocigoaSsxMykgJSAyNiArIGMpCgpwcmludCgiIi5qb2luKFtkLmdldChjLCBjKSBmb3IgYyBpbiBzXSkpCg==',
'/Lib/traceback.py':'aW1wb3J0IHN5cwpkZWYgcHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycik6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICBmaWxlLndyaXRlKGV4Yy5pbmZvKQogICAgZmlsZS53cml0ZSgnXG4nK2V4Yy5fX25hbWVfXykKICAgIGlmIGV4Yy5tZXNzYWdlOgogICAgICAgIGZpbGUud3JpdGUoJzogJytleGMubWVzc2FnZSkKICAgIGZpbGUud3JpdGUoJ1xuJykK',
'/Lib/types.py':'IiIiCkRlZmluZSBuYW1lcyBmb3IgYnVpbHQtaW4gdHlwZXMgdGhhdCBhcmVuJ3QgZGlyZWN0bHkgYWNjZXNzaWJsZSBhcyBhIGJ1aWx0aW4uCiIiIgppbXBvcnQgc3lzCgojIEl0ZXJhdG9ycyBpbiBQeXRob24gYXJlbid0IGEgbWF0dGVyIG9mIHR5cGUgYnV0IG9mIHByb3RvY29sLiAgQSBsYXJnZQojIGFuZCBjaGFuZ2luZyBudW1iZXIgb2YgYnVpbHRpbiB0eXBlcyBpbXBsZW1lbnQgKnNvbWUqIGZsYXZvciBvZgojIGl0ZXJhdG9yLiAgRG9uJ3QgY2hlY2sgdGhlIHR5cGUhICBVc2UgaGFzYXR0ciB0byBjaGVjayBmb3IgYm90aAojICJfX2l0ZXJfXyIgYW5kICJfX25leHRfXyIgYXR0cmlidXRlcyBpbnN0ZWFkLgoKI2RlZiBfZigpOiBwYXNzCiNGdW5jdGlvblR5cGUgPSB0eXBlKF9mKQojTGFtYmRhVHlwZSA9IHR5cGUobGFtYmRhOiBOb25lKSAgICAgICAgICMgU2FtZSBhcyBGdW5jdGlvblR5cGUKI0NvZGVUeXBlID0gdHlwZShfZi5fX2NvZGVfXykKCiNkZWYgX2coKToKIyAgICB5aWVsZCAxCiNHZW5lcmF0b3JUeXBlID0gdHlwZShfZygpKQoKY2xhc3MgX0M6CiAgICBkZWYgX20oc2VsZik6IHBhc3MKTWV0aG9kVHlwZSA9IHR5cGUoX0MoKS5fbSkKCkJ1aWx0aW5GdW5jdGlvblR5cGUgPSB0eXBlKGxlbikKQnVpbHRpbk1ldGhvZFR5cGUgPSB0eXBlKFtdLmFwcGVuZCkgICAgICMgU2FtZSBhcyBCdWlsdGluRnVuY3Rpb25UeXBlCgpNb2R1bGVUeXBlID0gdHlwZShzeXMpCgojdHJ5OgojICAgIHJhaXNlIFR5cGVFcnJvcgojZXhjZXB0IFR5cGVFcnJvcjoKIyAgICB0YiA9IHN5cy5leGNfaW5mbygpWzJdCiMgICAgVHJhY2ViYWNrVHlwZSA9IHR5cGUodGIpCiMgICAgRnJhbWVUeXBlID0gdHlwZSh0Yi50Yl9mcmFtZSkKIyAgICB0YiA9IE5vbmU7IGRlbCB0YgoKIyBGb3IgSnl0aG9uLCB0aGUgZm9sbG93aW5nIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsCiNHZXRTZXREZXNjcmlwdG9yVHlwZSA9IHR5cGUoRnVuY3Rpb25UeXBlLl9fY29kZV9fKQojTWVtYmVyRGVzY3JpcHRvclR5cGUgPSB0eXBlKEZ1bmN0aW9uVHlwZS5fX2dsb2JhbHNfXykKCiNmaXhtZSBicnl0aG9uCiNkZWwgc3lzLCBfZiwgX2csIF9DLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTm90IGZvciBleHBvcnQK',
'/Lib/warnings.py':'',
'/Lib/webbrowser.py':'X19hbGxfXyA9IFsiRXJyb3IiLCAib3BlbiIsICJvcGVuX25ldyIsICJvcGVuX25ld190YWIiXQoKY2xhc3MgRXJyb3IoRXhjZXB0aW9uKToKICAgIHBhc3MKCl90YXJnZXQgPSB7IDA6ICcnLCAxOiAnX2JsYW5rJywgMjogJ19uZXcnIH0gICMgaGFjay4uLgoKCmRlZiBvcGVuKHVybCwgbmV3PTAsIGF1dG9yYWlzZT1UcnVlKToKICAgICIiIiAKICAgIG5ldyB3aW5kb3cgb3IgdGFiIGlzIG5vdCBjb250cm9sbGFibGUKICAgIG9uIHRoZSBjbGllbnQgc2lkZS4gYXV0b3JhaXNlIG5vdCBhdmFpbGFibGUuCiAgICAiIiIKICAgIGlmIHdpbi5vcGVuKHVybCwgX3RhcmdldFtuZXddKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKZGVmIG9wZW5fbmV3KHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDEpCgpkZWYgb3Blbl9uZXdfdGFiKHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDIpCgoK',
'/Lib/_abcoll.py':'IyBDb3B5cmlnaHQgMjAwNyBHb29nbGUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIyBMaWNlbnNlZCB0byBQU0YgdW5kZXIgYSBDb250cmlidXRvciBBZ3JlZW1lbnQuCgoiIiJBYnN0cmFjdCBCYXNlIENsYXNzZXMgKEFCQ3MpIGZvciBjb2xsZWN0aW9ucywgYWNjb3JkaW5nIHRvIFBFUCAzMTE5LgoKRE9OJ1QgVVNFIFRISVMgTU9EVUxFIERJUkVDVExZISAgVGhlIGNsYXNzZXMgaGVyZSBzaG91bGQgYmUgaW1wb3J0ZWQKdmlhIGNvbGxlY3Rpb25zOyB0aGV5IGFyZSBkZWZpbmVkIGhlcmUgb25seSB0byBhbGxldmlhdGUgY2VydGFpbgpib290c3RyYXBwaW5nIGlzc3Vlcy4gIFVuaXQgdGVzdHMgYXJlIGluIHRlc3RfY29sbGVjdGlvbnMuCiIiIgoKI2Zyb20gYWJjIGltcG9ydCBBQkNNZXRhLCBhYnN0cmFjdG1ldGhvZAppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJIYXNoYWJsZSIsICJJdGVyYWJsZSIsICJJdGVyYXRvciIsCiAgICAgICAgICAgIlNpemVkIiwgIkNvbnRhaW5lciIsICJDYWxsYWJsZSIsCiAgICAgICAgICAgIlNldCIsICJNdXRhYmxlU2V0IiwKICAgICAgICAgICAiTWFwcGluZyIsICJNdXRhYmxlTWFwcGluZyIsCiAgICAgICAgICAgIk1hcHBpbmdWaWV3IiwgIktleXNWaWV3IiwgIkl0ZW1zVmlldyIsICJWYWx1ZXNWaWV3IiwKICAgICAgICAgICAiU2VxdWVuY2UiLCAiTXV0YWJsZVNlcXVlbmNlIiwKICAgICAgICAgICAiQnl0ZVN0cmluZyIsCiAgICAgICAgICAgXQoKIiIiCiMjIyBjb2xsZWN0aW9uIHJlbGF0ZWQgdHlwZXMgd2hpY2ggYXJlIG5vdCBleHBvc2VkIHRocm91Z2ggYnVpbHRpbiAjIyMKIyMgaXRlcmF0b3JzICMjCiNmaXhtZSBicnl0aG9uCiNieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcihiJycpKQpieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcignJykpCiNmaXhtZSBicnl0aG9uCiNieXRlYXJyYXlfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoYnl0ZWFycmF5KCkpKQojY2FsbGFibGVfaXRlcmF0b3IgPSA/Pz8KZGljdF9rZXlpdGVyYXRvciA9IHR5cGUoaXRlcih7fS5rZXlzKCkpKQpkaWN0X3ZhbHVlaXRlcmF0b3IgPSB0eXBlKGl0ZXIoe30udmFsdWVzKCkpKQpkaWN0X2l0ZW1pdGVyYXRvciA9IHR5cGUoaXRlcih7fS5pdGVtcygpKSkKbGlzdF9pdGVyYXRvciA9IHR5cGUoaXRlcihbXSkpCmxpc3RfcmV2ZXJzZWl0ZXJhdG9yID0gdHlwZShpdGVyKHJldmVyc2VkKFtdKSkpCnJhbmdlX2l0ZXJhdG9yID0gdHlwZShpdGVyKHJhbmdlKDApKSkKc2V0X2l0ZXJhdG9yID0gdHlwZShpdGVyKHNldCgpKSkKc3RyX2l0ZXJhdG9yID0gdHlwZShpdGVyKCIiKSkKdHVwbGVfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoKCkpKQp6aXBfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoemlwKCkpKQojIyB2aWV3cyAjIwpkaWN0X2tleXMgPSB0eXBlKHt9LmtleXMoKSkKZGljdF92YWx1ZXMgPSB0eXBlKHt9LnZhbHVlcygpKQpkaWN0X2l0ZW1zID0gdHlwZSh7fS5pdGVtcygpKQojIyBtaXNjICMjCmRpY3RfcHJveHkgPSB0eXBlKHR5cGUuX19kaWN0X18pCiIiIgoKZGVmIGFic3RyYWN0bWV0aG9kKHNlbGYpOgogICAgcmV0dXJuIHNlbGYKCiMjIyBPTkUtVFJJQ0sgUE9OSUVTICMjIwoKCiNjbGFzcyBJdGVyYWJsZShtZXRhY2xhc3M9QUJDTWV0YSk6CmNsYXNzIEl0ZXJhYmxlOgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHdoaWxlIEZhbHNlOgogICAgICAgICAgICB5aWVsZCBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBJdGVyYWJsZToKICAgICAgICAgICAgaWYgYW55KCJfX2l0ZXJfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCgojY2xhc3MgU2l6ZWQobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBTaXplZDoKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAwCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBTaXplZDoKICAgICAgICAgICAgaWYgYW55KCJfX2xlbl9fIiBpbiBCLl9fZGljdF9fIGZvciBCIGluIEMuX19tcm9fXyk6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKCiNjbGFzcyBDb250YWluZXIobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBDb250YWluZXI6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHgpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9fc3ViY2xhc3Nob29rX18oY2xzLCBDKToKICAgICAgICBpZiBjbHMgaXMgQ29udGFpbmVyOgogICAgICAgICAgICBpZiBhbnkoIl9fY29udGFpbnNfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiMjIyBNQVBQSU5HUyAjIyMKCgpjbGFzcyBNYXBwaW5nKFNpemVkLCBJdGVyYWJsZSwgQ29udGFpbmVyKToKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGZba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICByZXR1cm4gS2V5c1ZpZXcoc2VsZikKCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgcmV0dXJuIEl0ZW1zVmlldyhzZWxmKQoKICAgIGRlZiB2YWx1ZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIFZhbHVlc1ZpZXcoc2VsZikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgTWFwcGluZyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBkaWN0KHNlbGYuaXRlbXMoKSkgPT0gZGljdChvdGhlci5pdGVtcygpKQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3QgKHNlbGYgPT0gb3RoZXIpCgoKY2xhc3MgTXV0YWJsZU1hcHBpbmcoTWFwcGluZyk6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgcmFpc2UgS2V5RXJyb3IKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgX19tYXJrZXIgPSBvYmplY3QoKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCBkZWZhdWx0PV9fbWFya2VyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIHNlbGYuX19tYXJrZXI6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbCBzZWxmW2tleV0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBrZXkgPSBuZXh0KGl0ZXIoc2VsZikpCiAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yCiAgICAgICAgdmFsdWUgPSBzZWxmW2tleV0KICAgICAgICBkZWwgc2VsZltrZXldCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc2VsZi5wb3BpdGVtKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKCphcmdzLCAqKmt3ZHMpOgogICAgICAgIGlmIGxlbihhcmdzKSA+IDI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidXBkYXRlKCkgdGFrZXMgYXQgbW9zdCAyIHBvc2l0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyAoe30gZ2l2ZW4pIi5mb3JtYXQobGVuKGFyZ3MpKSkKICAgICAgICBlbGlmIG5vdCBhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInVwZGF0ZSgpIHRha2VzIGF0IGxlYXN0IDEgYXJndW1lbnQgKDAgZ2l2ZW4pIikKICAgICAgICBzZWxmID0gYXJnc1swXQogICAgICAgIG90aGVyID0gYXJnc1sxXSBpZiBsZW4oYXJncykgPj0gMiBlbHNlICgpCgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIE1hcHBpbmcpOgogICAgICAgICAgICBmb3Iga2V5IGluIG90aGVyOgogICAgICAgICAgICAgICAgc2VsZltrZXldID0gb3RoZXJba2V5XQogICAgICAgIGVsaWYgaGFzYXR0cihvdGhlciwgImtleXMiKToKICAgICAgICAgICAgZm9yIGtleSBpbiBvdGhlci5rZXlzKCk6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSBvdGhlcltrZXldCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gb3RoZXI6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3ZHMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWUKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmW2tleV0gPSBkZWZhdWx0CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiNNdXRhYmxlTWFwcGluZy5yZWdpc3RlcihkaWN0KQo=',
'/Lib/_collections.py':'',
'/Lib/_dummy_thread.py':'IiIiRHJvcC1pbiByZXBsYWNlbWVudCBmb3IgdGhlIHRocmVhZCBtb2R1bGUuCgpNZWFudCB0byBiZSB1c2VkIGFzIGEgYnJhaW4tZGVhZCBzdWJzdGl0dXRlIHNvIHRoYXQgdGhyZWFkZWQgY29kZSBkb2VzCm5vdCBuZWVkIHRvIGJlIHJld3JpdHRlbiBmb3Igd2hlbiB0aGUgdGhyZWFkIG1vZHVsZSBpcyBub3QgcHJlc2VudC4KClN1Z2dlc3RlZCB1c2FnZSBpczo6CgogICAgdHJ5OgogICAgICAgIGltcG9ydCBfdGhyZWFkCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IF9kdW1teV90aHJlYWQgYXMgX3RocmVhZAoKIiIiCiMgRXhwb3J0cyBvbmx5IHRoaW5ncyBzcGVjaWZpZWQgYnkgdGhyZWFkIGRvY3VtZW50YXRpb247CiMgc2tpcHBpbmcgb2Jzb2xldGUgc3lub255bXMgYWxsb2NhdGUoKSwgc3RhcnRfbmV3KCksIGV4aXRfdGhyZWFkKCkuCl9fYWxsX18gPSBbJ2Vycm9yJywgJ3N0YXJ0X25ld190aHJlYWQnLCAnZXhpdCcsICdnZXRfaWRlbnQnLCAnYWxsb2NhdGVfbG9jaycsCiAgICAgICAgICAgJ2ludGVycnVwdF9tYWluJywgJ0xvY2tUeXBlJ10KCiMgQSBkdW1teSB2YWx1ZQpUSU1FT1VUX01BWCA9IDIqKjMxCgojIE5PVEU6IHRoaXMgbW9kdWxlIGNhbiBiZSBpbXBvcnRlZCBlYXJseSBpbiB0aGUgZXh0ZW5zaW9uIGJ1aWxkaW5nIHByb2Nlc3MsCiMgYW5kIHNvIHRvcCBsZXZlbCBpbXBvcnRzIG9mIG90aGVyIG1vZHVsZXMgc2hvdWxkIGJlIGF2b2lkZWQuICBJbnN0ZWFkLCBhbGwKIyBpbXBvcnRzIGFyZSBkb25lIHdoZW4gbmVlZGVkIG9uIGEgZnVuY3Rpb24tYnktZnVuY3Rpb24gYmFzaXMuICBTaW5jZSB0aHJlYWRzCiMgYXJlIGRpc2FibGVkLCB0aGUgaW1wb3J0IGxvY2sgc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZSBhbnl3YXkgKD8/KS4KCmVycm9yID0gUnVudGltZUVycm9yCgpkZWYgc3RhcnRfbmV3X3RocmVhZChmdW5jdGlvbiwgYXJncywga3dhcmdzPXt9KToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuc3RhcnRfbmV3X3RocmVhZCgpLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWtpbmcgc3VyZSB0aGF0IGBgYXJnc2BgIGlzIGEKICAgIHR1cGxlIGFuZCBgYGt3YXJnc2BgIGlzIGEgZGljdGlvbmFyeS4gIElmIGFuIGV4Y2VwdGlvbiBpcyByYWlzZWQKICAgIGFuZCBpdCBpcyBTeXN0ZW1FeGl0ICh3aGljaCBjYW4gYmUgZG9uZSBieSBfdGhyZWFkLmV4aXQoKSkgaXQgaXMKICAgIGNhdWdodCBhbmQgbm90aGluZyBpcyBkb25lOyBhbGwgb3RoZXIgZXhjZXB0aW9ucyBhcmUgcHJpbnRlZCBvdXQKICAgIGJ5IHVzaW5nIHRyYWNlYmFjay5wcmludF9leGMoKS4KCiAgICBJZiB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24gY2FsbHMgaW50ZXJydXB0X21haW4gdGhlIEtleWJvYXJkSW50ZXJydXB0IHdpbGwgYmUKICAgIHJhaXNlZCB3aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zLgoKICAgICIiIgogICAgaWYgdHlwZShhcmdzKSAhPSB0eXBlKHR1cGxlKCkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiMm5kIGFyZyBtdXN0IGJlIGEgdHVwbGUiKQogICAgaWYgdHlwZShrd2FyZ3MpICE9IHR5cGUoZGljdCgpKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoIjNyZCBhcmcgbXVzdCBiZSBhIGRpY3QiKQogICAgZ2xvYmFsIF9tYWluCiAgICBfbWFpbiA9IEZhbHNlCiAgICB0cnk6CiAgICAgICAgZnVuY3Rpb24oKmFyZ3MsICoqa3dhcmdzKQogICAgZXhjZXB0IFN5c3RlbUV4aXQ6CiAgICAgICAgcGFzcwogICAgZXhjZXB0OgogICAgICAgIGltcG9ydCB0cmFjZWJhY2sKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgIF9tYWluID0gVHJ1ZQogICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgIGlmIF9pbnRlcnJ1cHQ6CiAgICAgICAgX2ludGVycnVwdCA9IEZhbHNlCiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKCmRlZiBleGl0KCk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLmV4aXQoKS4iIiIKICAgIHJhaXNlIFN5c3RlbUV4aXQKCmRlZiBnZXRfaWRlbnQoKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuZ2V0X2lkZW50KCkuCgogICAgU2luY2UgdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIF90aHJlYWRtb2R1bGUgaXMgbm90CiAgICBhdmFpbGFibGUsIGl0IGlzIHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhlIGN1cnJlbnQgcHJvY2VzcyBpcyB0aGUKICAgIG9ubHkgdGhyZWFkLiAgVGh1cyBhIGNvbnN0YW50IGNhbiBiZSBzYWZlbHkgcmV0dXJuZWQuCiAgICAiIiIKICAgIHJldHVybiAtMQoKZGVmIGFsbG9jYXRlX2xvY2soKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuYWxsb2NhdGVfbG9jaygpLiIiIgogICAgcmV0dXJuIExvY2tUeXBlKCkKCmRlZiBzdGFja19zaXplKHNpemU9Tm9uZSk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLnN0YWNrX3NpemUoKS4iIiIKICAgIGlmIHNpemUgaXMgbm90IE5vbmU6CiAgICAgICAgcmFpc2UgZXJyb3IoInNldHRpbmcgdGhyZWFkIHN0YWNrIHNpemUgbm90IHN1cHBvcnRlZCIpCiAgICByZXR1cm4gMAoKY2xhc3MgTG9ja1R5cGUob2JqZWN0KToKICAgICIiIkNsYXNzIGltcGxlbWVudGluZyBkdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLkxvY2tUeXBlLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWludGFpbmluZyBzZWxmLmxvY2tlZF9zdGF0dXMKICAgIHdoaWNoIGlzIGEgYm9vbGVhbiB0aGF0IHN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxvY2suICBQaWNrbGluZyBvZgogICAgdGhlIGxvY2ssIHRob3VnaCwgc2hvdWxkIG5vdCBiZSBkb25lIHNpbmNlIGlmIHRoZSBfdGhyZWFkIG1vZHVsZSBpcwogICAgdGhlbiB1c2VkIHdpdGggYW4gdW5waWNrbGVkIGBgbG9jaygpYGAgZnJvbSBoZXJlIHByb2JsZW1zIGNvdWxkCiAgICBvY2N1ciBmcm9tIHRoaXMgY2xhc3Mgbm90IGhhdmluZyBhdG9taWMgbWV0aG9kcy4KCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gRmFsc2UKCiAgICBkZWYgYWNxdWlyZShzZWxmLCB3YWl0ZmxhZz1Ob25lLCB0aW1lb3V0PS0xKToKICAgICAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBhY3F1aXJlKCkuCgogICAgICAgIEZvciBibG9ja2luZyBjYWxscywgc2VsZi5sb2NrZWRfc3RhdHVzIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvCiAgICAgICAgVHJ1ZSBhbmQgcmV0dXJuZWQgYXBwcm9wcmlhdGVseSBiYXNlZCBvbiB2YWx1ZSBvZgogICAgICAgIGBgd2FpdGZsYWdgYC4gIElmIGl0IGlzIG5vbi1ibG9ja2luZywgdGhlbiB0aGUgdmFsdWUgaXMKICAgICAgICBhY3R1YWxseSBjaGVja2VkIGFuZCBub3Qgc2V0IGlmIGl0IGlzIGFscmVhZHkgYWNxdWlyZWQuICBUaGlzCiAgICAgICAgaXMgYWxsIGRvbmUgc28gdGhhdCB0aHJlYWRpbmcuQ29uZGl0aW9uJ3MgYXNzZXJ0IHN0YXRlbWVudHMKICAgICAgICBhcmVuJ3QgdHJpZ2dlcmVkIGFuZCB0aHJvdyBhIGxpdHRsZSBmaXQuCgogICAgICAgICIiIgogICAgICAgIGlmIHdhaXRmbGFnIGlzIE5vbmUgb3Igd2FpdGZsYWc6CiAgICAgICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IFRydWUKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gVHJ1ZQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIHRpbWVvdXQgPiAwOgogICAgICAgICAgICAgICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCh0aW1lb3V0KQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgX19lbnRlcl9fID0gYWNxdWlyZQoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCB0eXAsIHZhbCwgdGIpOgogICAgICAgIHNlbGYucmVsZWFzZSgpCgogICAgZGVmIHJlbGVhc2Uoc2VsZik6CiAgICAgICAgIiIiUmVsZWFzZSB0aGUgZHVtbXkgbG9jay4iIiIKICAgICAgICAjIFhYWCBQZXJoYXBzIHNob3VsZG4ndCBhY3R1YWxseSBib3RoZXIgdG8gdGVzdD8gIENvdWxkIGxlYWQKICAgICAgICAjICAgICB0byBwcm9ibGVtcyBmb3IgY29tcGxleCwgdGhyZWFkZWQgY29kZS4KICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICByYWlzZSBlcnJvcgogICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgbG9ja2VkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmxvY2tlZF9zdGF0dXMKCiMgVXNlZCB0byBzaWduYWwgdGhhdCBpbnRlcnJ1cHRfbWFpbiB3YXMgY2FsbGVkIGluIGEgInRocmVhZCIKX2ludGVycnVwdCA9IEZhbHNlCiMgVHJ1ZSB3aGVuIG5vdCBleGVjdXRpbmcgaW4gYSAidGhyZWFkIgpfbWFpbiA9IFRydWUKCmRlZiBpbnRlcnJ1cHRfbWFpbigpOgogICAgIiIiU2V0IF9pbnRlcnJ1cHQgZmxhZyB0byBUcnVlIHRvIGhhdmUgc3RhcnRfbmV3X3RocmVhZCByYWlzZQogICAgS2V5Ym9hcmRJbnRlcnJ1cHQgdXBvbiBleGl0aW5nLiIiIgogICAgaWYgX21haW46CiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKICAgIGVsc2U6CiAgICAgICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgICAgICBfaW50ZXJydXB0ID0gVHJ1ZQo=',
'/Lib/_random.py':'aW1wb3J0IF9vcwpjbGFzcyBSYW5kb206CiAgICAiIiJSYW5kb20gbnVtYmVyIGdlbmVyYXRvciBiYXNlIGNsYXNzIHVzZWQgYnkgYm91bmQgbW9kdWxlIGZ1bmN0aW9ucy4KCiAgICBVc2VkIHRvIGluc3RhbnRpYXRlIGluc3RhbmNlcyBvZiBSYW5kb20gdG8gZ2V0IGdlbmVyYXRvcnMgdGhhdCBkb24ndAogICAgc2hhcmUgc3RhdGUuCgogICAgQ2xhc3MgUmFuZG9tIGNhbiBhbHNvIGJlIHN1YmNsYXNzZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgZGlmZmVyZW50IGJhc2ljCiAgICBnZW5lcmF0b3Igb2YgeW91ciBvd24gZGV2aXNpbmc6IGluIHRoYXQgY2FzZSwgb3ZlcnJpZGUgdGhlIGZvbGxvd2luZwogICAgbWV0aG9kczogIHJhbmRvbSgpLCBzZWVkKCksIGdldHN0YXRlKCksIGFuZCBzZXRzdGF0ZSgpLgogICAgT3B0aW9uYWxseSwgaW1wbGVtZW50IGEgZ2V0cmFuZGJpdHMoKSBtZXRob2Qgc28gdGhhdCByYW5kcmFuZ2UoKQogICAgY2FuIGNvdmVyIGFyYml0cmFyaWx5IGxhcmdlIHJhbmdlcy4KCiAgICAiIiIKICAgICNyYW5kb20KICAgICNzZWVkCiAgICAjZ2V0c3RhdGUKICAgICNzZXRzdGF0ZQoKCiAgICBWRVJTSU9OID0gMyAgICAgIyB1c2VkIGJ5IGdldHN0YXRlL3NldHN0YXRlCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHg9Tm9uZSk6CiAgICAgICAgIiIiSW5pdGlhbGl6ZSBhbiBpbnN0YW5jZS4KCiAgICAgICAgT3B0aW9uYWwgYXJndW1lbnQgeCBjb250cm9scyBzZWVkaW5nLCBhcyBmb3IgUmFuZG9tLnNlZWQoKS4KICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9eAoKICAgIGRlZiBzZWVkKHNlbGYsIGE9Tm9uZSwgdmVyc2lvbj0yKToKICAgICAgICAiIiJJbml0aWFsaXplIGludGVybmFsIHN0YXRlIGZyb20gaGFzaGFibGUgb2JqZWN0LgoKICAgICAgICBOb25lIG9yIG5vIGFyZ3VtZW50IHNlZWRzIGZyb20gY3VycmVudCB0aW1lIG9yIGZyb20gYW4gb3BlcmF0aW5nCiAgICAgICAgc3lzdGVtIHNwZWNpZmljIHJhbmRvbW5lc3Mgc291cmNlIGlmIGF2YWlsYWJsZS4KCiAgICAgICAgRm9yIHZlcnNpb24gMiAodGhlIGRlZmF1bHQpLCBhbGwgb2YgdGhlIGJpdHMgYXJlIHVzZWQgaWYgKmEqIGlzIGEgc3RyLAogICAgICAgIGJ5dGVzLCBvciBieXRlYXJyYXkuICBGb3IgdmVyc2lvbiAxLCB0aGUgaGFzaCgpIG9mICphKiBpcyB1c2VkIGluc3RlYWQuCgogICAgICAgIElmICphKiBpcyBhbiBpbnQsIGFsbCBiaXRzIGFyZSB1c2VkLgoKICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9YQogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKCiAgICBkZWYgZ2V0c3RhdGUoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGludGVybmFsIHN0YXRlOyBjYW4gYmUgcGFzc2VkIHRvIHNldHN0YXRlKCkgbGF0ZXIuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3N0YXRlCgogICAgZGVmIHNldHN0YXRlKHNlbGYsIHN0YXRlKToKICAgICAgICAiIiJSZXN0b3JlIGludGVybmFsIHN0YXRlIGZyb20gb2JqZWN0IHJldHVybmVkIGJ5IGdldHN0YXRlKCkuIiIiCiAgICAgICAgc2VsZi5fc3RhdGU9c3RhdGUKCiAgICBkZWYgcmFuZG9tKHNlbGYpOgogICAgICAgICIiIkdldCB0aGUgbmV4dCByYW5kb20gbnVtYmVyIGluIHRoZSByYW5nZSBbMC4wLCAxLjApLiIiIgogICAgICAgIHJldHVybiBfb3MucmFuZG9tKCkKCiAgICBkZWYgZ2V0cmFuZGJpdHMoc2VsZiwgayk6CiAgICAgICAgIiIiZ2V0cmFuZGJpdHMoaykgLT4geC4gIEdlbmVyYXRlcyBhIGxvbmcgaW50IHdpdGggayByYW5kb20gYml0cy4iIiIKICAgICAgICBpZiBrIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ251bWJlciBvZiBiaXRzIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKQogICAgICAgIGlmIGsgIT0gaW50KGspOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ251bWJlciBvZiBiaXRzIHNob3VsZCBiZSBhbiBpbnRlZ2VyJykKICAgICAgICBudW1ieXRlcyA9IChrICsgNykgLy8gOCAgICAgICAgICAgICAgICAgICAgICAgIyBiaXRzIC8gOCBhbmQgcm91bmRlZCB1cAogICAgICAgIHggPSBpbnQuZnJvbV9ieXRlcyhfdXJhbmRvbShudW1ieXRlcyksICdiaWcnKQogICAgICAgIHJldHVybiB4ID4+IChudW1ieXRlcyAqIDggLSBrKSAgICAgICAgICAgICAgICAjIHRyaW0gZXhjZXNzIGJpdHMK',
'/Lib/_sre.py':'',
'/Lib/browser/__init__.py':'ZnJvbSBfYnJvd3NlciBpbXBvcnQgKgppbXBvcnQgaHRtbAppbXBvcnQgYWpheAppbXBvcnQgd2Vic29ja2V0Cg==',
'/Lib/collections/abc.py':'',
'/Lib/collections/__init__.py':'',
'/Lib/collections/__main__.py':'IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIFNpbXBsZSB0ZXN0cwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKIyB2ZXJpZnkgdGhhdCBpbnN0YW5jZXMgY2FuIGJlIHBpY2tsZWQKZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgbmFtZWR0dXBsZQpmcm9tIHBpY2tsZSBpbXBvcnQgbG9hZHMsIGR1bXBzClBvaW50ID0gbmFtZWR0dXBsZSgnUG9pbnQnLCAneCwgeScsIFRydWUpCnAgPSBQb2ludCh4PTEwLCB5PTIwKQphc3NlcnQgcCA9PSBsb2FkcyhkdW1wcyhwKSkKCiMgdGVzdCBhbmQgZGVtb25zdHJhdGUgYWJpbGl0eSB0byBvdmVycmlkZSBtZXRob2RzCmNsYXNzIFBvaW50KG5hbWVkdHVwbGUoJ1BvaW50JywgJ3ggeScpKToKICAgIF9fc2xvdHNfXyA9ICgpCiAgICBAcHJvcGVydHkKICAgIGRlZiBoeXBvdChzZWxmKToKICAgICAgICByZXR1cm4gKHNlbGYueCAqKiAyICsgc2VsZi55ICoqIDIpICoqIDAuNQogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuICdQb2ludDogeD0lNi4zZiAgeT0lNi4zZiAgaHlwb3Q9JTYuM2YnICUgKHNlbGYueCwgc2VsZi55LCBzZWxmLmh5cG90KQoKZm9yIHAgaW4gUG9pbnQoMywgNCksIFBvaW50KDE0LCA1LzcuKToKICAgIHByaW50IChwKQoKY2xhc3MgUG9pbnQobmFtZWR0dXBsZSgnUG9pbnQnLCAneCB5JykpOgogICAgJ1BvaW50IGNsYXNzIHdpdGggb3B0aW1pemVkIF9tYWtlKCkgYW5kIF9yZXBsYWNlKCkgd2l0aG91dCBlcnJvci1jaGVja2luZycKICAgIF9fc2xvdHNfXyA9ICgpCiAgICBfbWFrZSA9IGNsYXNzbWV0aG9kKHR1cGxlLl9fbmV3X18pCiAgICBkZWYgX3JlcGxhY2Uoc2VsZiwgX21hcD1tYXAsICoqa3dkcyk6CiAgICAgICAgcmV0dXJuIHNlbGYuX21ha2UoX21hcChrd2RzLmdldCwgKCd4JywgJ3knKSwgc2VsZikpCgpwcmludChQb2ludCgxMSwgMjIpLl9yZXBsYWNlKHg9MTAwKSkKClBvaW50M0QgPSBuYW1lZHR1cGxlKCdQb2ludDNEJywgUG9pbnQuX2ZpZWxkcyArICgneicsKSkKcHJpbnQoUG9pbnQzRC5fX2RvY19fKQoKaW1wb3J0IGRvY3Rlc3QsIGNvbGxlY3Rpb25zClRlc3RSZXN1bHRzID0gbmFtZWR0dXBsZSgnVGVzdFJlc3VsdHMnLCAnZmFpbGVkIGF0dGVtcHRlZCcpCnByaW50KFRlc3RSZXN1bHRzKCpkb2N0ZXN0LnRlc3Rtb2QoY29sbGVjdGlvbnMpKSkK',
'/Lib/http/cookies.py':'',
'/Lib/http/_cookies.py':'Y2xhc3MgQ29va2llRXJyb3IoRXhjZXB0aW9uKToKICAgIHBhc3MKICAgIApjbGFzcyBCYXNlQ29va2llOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLGRhdGE9Tm9uZSk6CiAgICAgICAgc2VsZi5tb3JzZWxzID0ge30KICAgICAgICBpZiBkYXRhIGlzIG5vdCBOb25lOgogICAgICAgICAgICBzZWxmLmxvYWQoZGF0YSkKICAgIAogICAgZGVmIGxvYWQoc2VsZixkYXRhKToKICAgICAgICBlbHRzID0gZGF0YS5zcGxpdCgnOycpCiAgICAgICAgZm9yIGVsdCBpbiBlbHRzOgogICAgICAgICAgICBlbHQgPSBlbHQuc3RyaXAoKS5zcGxpdCgnPScsMSkKICAgICAgICAgICAgaWYgbGVuKGVsdCkhPTI6CiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdpbnZhbGlkIGNvb2tpZSAlcycgJWRhdGEpCiAgICAgICAgICAgIG1vcnNlbCx2YWx1ZSA9IGVsdAogICAgICAgICAgICBpZiBtb3JzZWwgaW4gc2VsZi5tb3JzZWxzOgogICAgICAgICAgICAgICAgc2VsZi5tb3JzZWxzW21vcnNlbF0uYXBwZW5kKHZhbHVlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5tb3JzZWxzW21vcnNlbF0gPSBbdmFsdWVdCiAgICAK',
'/Lib/http/__init__.py':'',
'/Lib/lib_migration/unittest/case.py':'',
'/Lib/lib_migration/unittest/loader.py':'',
'/Lib/lib_migration/unittest/main.py':'',
'/Lib/lib_migration/unittest/result.py':'',
'/Lib/lib_migration/unittest/runner.py':'',
'/Lib/lib_migration/unittest/signals.py':'aW1wb3J0IHNpZ25hbAppbXBvcnQgd2Vha3JlZgoKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCmNsYXNzIF9JbnRlcnJ1cHRIYW5kbGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVmYXVsdF9oYW5kbGVyKToKICAgICAgICBzZWxmLmNhbGxlZCA9IEZhbHNlCiAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIgPSBkZWZhdWx0X2hhbmRsZXIKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgc2lnbnVtLCBmcmFtZSk6CiAgICAgICAgaW5zdGFsbGVkX2hhbmRsZXIgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgaWYgaW5zdGFsbGVkX2hhbmRsZXIgaXMgbm90IHNlbGY6CiAgICAgICAgICAgICMgaWYgd2UgYXJlbid0IHRoZSBpbnN0YWxsZWQgaGFuZGxlciwgdGhlbiBkZWxlZ2F0ZSBpbW1lZGlhdGVseQogICAgICAgICAgICAjIHRvIHRoZSBkZWZhdWx0IGhhbmRsZXIKICAgICAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIoc2lnbnVtLCBmcmFtZSkKCiAgICAgICAgaWYgc2VsZi5jYWxsZWQ6CiAgICAgICAgICAgIHNlbGYuZGVmYXVsdF9oYW5kbGVyKHNpZ251bSwgZnJhbWUpCiAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlCiAgICAgICAgZm9yIHJlc3VsdCBpbiBfcmVzdWx0cy5rZXlzKCk6CiAgICAgICAgICAgIHJlc3VsdC5zdG9wKCkKCl9yZXN1bHRzID0gd2Vha3JlZi5XZWFrS2V5RGljdGlvbmFyeSgpCmRlZiByZWdpc3RlclJlc3VsdChyZXN1bHQpOgogICAgX3Jlc3VsdHNbcmVzdWx0XSA9IDEKCmRlZiByZW1vdmVSZXN1bHQocmVzdWx0KToKICAgIHJldHVybiBib29sKF9yZXN1bHRzLnBvcChyZXN1bHQsIE5vbmUpKQoKX2ludGVycnVwdF9oYW5kbGVyID0gTm9uZQpkZWYgaW5zdGFsbEhhbmRsZXIoKToKICAgIGdsb2JhbCBfaW50ZXJydXB0X2hhbmRsZXIKICAgIGlmIF9pbnRlcnJ1cHRfaGFuZGxlciBpcyBOb25lOgogICAgICAgIGRlZmF1bHRfaGFuZGxlciA9IHNpZ25hbC5nZXRzaWduYWwoc2lnbmFsLlNJR0lOVCkKICAgICAgICBfaW50ZXJydXB0X2hhbmRsZXIgPSBfSW50ZXJydXB0SGFuZGxlcihkZWZhdWx0X2hhbmRsZXIpCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIpCgoKZGVmIHJlbW92ZUhhbmRsZXIobWV0aG9kPU5vbmUpOgogICAgaWYgbWV0aG9kIGlzIG5vdCBOb25lOgogICAgICAgIEB3cmFwcyhtZXRob2QpCiAgICAgICAgZGVmIGlubmVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIGluaXRpYWwgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgICAgIHJlbW92ZUhhbmRsZXIoKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kKCphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW5pdGlhbCkKICAgICAgICByZXR1cm4gaW5uZXIKCiAgICBnbG9iYWwgX2ludGVycnVwdF9oYW5kbGVyCiAgICBpZiBfaW50ZXJydXB0X2hhbmRsZXIgaXMgbm90IE5vbmU6CiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIuZGVmYXVsdF9oYW5kbGVyKQo=',
'/Lib/lib_migration/unittest/suite.py':'',
'/Lib/lib_migration/unittest/util.py':'IyAiVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy4iCgojZml4bWUsIGJyeXRob24sIG5lZWQgdG8gZml4IG5hbWVkdHVwbGUKI2Zyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUsIE9yZGVyZWREaWN0CiNmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBPcmRlcmVkRGljdAoKX191bml0dGVzdCA9IFRydWUKCiNfTUFYX0xFTkdUSCA9IDgwCiNkZWYgc2FmZV9yZXByKG9iaiwgc2hvcnQ9RmFsc2UpOgojICAgIHRyeToKIyAgICAgICAgcmVzdWx0ID0gcmVwcihvYmopCiMgICAgZXhjZXB0IEV4Y2VwdGlvbjoKIyAgICAgICAgcmVzdWx0ID0gb2JqZWN0Ll9fcmVwcl9fKG9iaikKIyAgICBpZiBub3Qgc2hvcnQgb3IgbGVuKHJlc3VsdCkgPCBfTUFYX0xFTkdUSDoKIyAgICAgICAgcmV0dXJuIHJlc3VsdAojICAgIHJldHVybiByZXN1bHRbOl9NQVhfTEVOR1RIXSArICcgW3RydW5jYXRlZF0uLi4nCgojZGVmIHN0cmNsYXNzKGNscyk6CiMgICAgcmV0dXJuICIlcy4lcyIgJSAoY2xzLl9fbW9kdWxlX18sIGNscy5fX25hbWVfXykKCiNkZWYgc29ydGVkX2xpc3RfZGlmZmVyZW5jZShleHBlY3RlZCwgYWN0dWFsKToKIyAgICAiIiJGaW5kcyBlbGVtZW50cyBpbiBvbmx5IG9uZSBvciB0aGUgb3RoZXIgb2YgdHdvLCBzb3J0ZWQgaW5wdXQgbGlzdHMuCiMKIyAgICBSZXR1cm5zIGEgdHdvLWVsZW1lbnQgdHVwbGUgb2YgbGlzdHMuICAgIFRoZSBmaXJzdCBsaXN0IGNvbnRhaW5zIHRob3NlCiMgICAgZWxlbWVudHMgaW4gdGhlICJleHBlY3RlZCIgbGlzdCBidXQgbm90IGluIHRoZSAiYWN0dWFsIiBsaXN0LCBhbmQgdGhlCiMgICAgc2Vjb25kIGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIGluIHRoZSAiYWN0dWFsIiBsaXN0IGJ1dCBub3QgaW4gdGhlCiMgICAgImV4cGVjdGVkIiBsaXN0LiAgICBEdXBsaWNhdGUgZWxlbWVudHMgaW4gZWl0aGVyIGlucHV0IGxpc3QgYXJlIGlnbm9yZWQuCiMgICAgIiIiCiMgICAgaSA9IGogPSAwCiMgICAgbWlzc2luZyA9IFtdCiMgICAgdW5leHBlY3RlZCA9IFtdCiMgICAgd2hpbGUgVHJ1ZToKIyAgICAgICAgdHJ5OgojICAgICAgICAgICAgZSA9IGV4cGVjdGVkW2ldCiMgICAgICAgICAgICBhID0gYWN0dWFsW2pdCiMgICAgICAgICAgICBpZiBlIDwgYToKIyAgICAgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChlKQojICAgICAgICAgICAgICAgIGkgKz0gMQojICAgICAgICAgICAgICAgIHdoaWxlIGV4cGVjdGVkW2ldID09IGU6CiMgICAgICAgICAgICAgICAgICAgIGkgKz0gMQojICAgICAgICAgICAgZWxpZiBlID4gYToKIyAgICAgICAgICAgICAgICB1bmV4cGVjdGVkLmFwcGVuZChhKQojICAgICAgICAgICAgICAgIGogKz0gMQojICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgojICAgICAgICAgICAgICAgICAgICBqICs9IDEKIyAgICAgICAgICAgIGVsc2U6CiMgICAgICAgICAgICAgICAgaSArPSAxCiMgICAgICAgICAgICAgICAgdHJ5OgojICAgICAgICAgICAgICAgICAgICB3aGlsZSBleHBlY3RlZFtpXSA9PSBlOgojICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxCiMgICAgICAgICAgICAgICAgZmluYWxseToKIyAgICAgICAgICAgICAgICAgICAgaiArPSAxCiMgICAgICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgojICAgICAgICAgICAgICAgICAgICAgICAgaiArPSAxCiMgICAgICAgIGV4Y2VwdCBJbmRleEVycm9yOgojICAgICAgICAgICAgbWlzc2luZy5leHRlbmQoZXhwZWN0ZWRbaTpdKQojICAgICAgICAgICAgdW5leHBlY3RlZC5leHRlbmQoYWN0dWFsW2o6XSkKIyAgICAgICAgICAgIGJyZWFrCiMgICAgcmV0dXJuIG1pc3NpbmcsIHVuZXhwZWN0ZWQKCgojZGVmIHVub3JkZXJhYmxlX2xpc3RfZGlmZmVyZW5jZShleHBlY3RlZCwgYWN0dWFsKToKIyAgICAiIiJTYW1lIGJlaGF2aW9yIGFzIHNvcnRlZF9saXN0X2RpZmZlcmVuY2UgYnV0CiMgICAgZm9yIGxpc3RzIG9mIHVub3JkZXJhYmxlIGl0ZW1zIChsaWtlIGRpY3RzKS4KIwojICAgIEFzIGl0IGRvZXMgYSBsaW5lYXIgc2VhcmNoIHBlciBpdGVtIChyZW1vdmUpIGl0CiMgICAgaGFzIE8obipuKSBwZXJmb3JtYW5jZS4iIiIKIyAgICBtaXNzaW5nID0gW10KIyAgICB3aGlsZSBleHBlY3RlZDoKIyAgICAgICAgaXRlbSA9IGV4cGVjdGVkLnBvcCgpCiMgICAgICAgIHRyeToKIyAgICAgICAgICAgIGFjdHVhbC5yZW1vdmUoaXRlbSkKIyAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiMgICAgICAgICAgICBtaXNzaW5nLmFwcGVuZChpdGVtKQoKICAgICMgYW55dGhpbmcgbGVmdCBpbiBhY3R1YWwgaXMgdW5leHBlY3RlZAojICAgIHJldHVybiBtaXNzaW5nLCBhY3R1YWwKCiNkZWYgdGhyZWVfd2F5X2NtcCh4LCB5KToKIyAgICAiIiJSZXR1cm4gLTEgaWYgeCA8IHksIDAgaWYgeCA9PSB5IGFuZCAxIGlmIHggPiB5IiIiCiMgICAgcmV0dXJuICh4ID4geSkgLSAoeCA8IHkpCgojIGZpeG1lLCBicnl0aG9uCiNuYW1lZHR1cGxlIGlzc3VlcyBpbiBjb2xsZWN0aW9ucy5weQojX01pc21hdGNoID0gbmFtZWR0dXBsZSgnTWlzbWF0Y2gnLCAnYWN0dWFsIGV4cGVjdGVkIHZhbHVlJykKCiNkZWYgX2NvdW50X2RpZmZfYWxsX3B1cnBvc2UoYWN0dWFsLCBleHBlY3RlZCk6CiMgICAgJ1JldHVybnMgbGlzdCBvZiAoY250X2FjdCwgY250X2V4cCwgZWxlbSkgdHJpcGxlcyB3aGVyZSB0aGUgY291bnRzIGRpZmZlcicKIyAgICAjIGVsZW1lbnRzIG5lZWQgbm90IGJlIGhhc2hhYmxlCiMgICAgcywgdCA9IGxpc3QoYWN0dWFsKSwgbGlzdChleHBlY3RlZCkKIyAgICBtLCBuID0gbGVuKHMpLCBsZW4odCkKIyAgICBOVUxMID0gb2JqZWN0KCkKIyAgICByZXN1bHQgPSBbXQojICAgIGZvciBpLCBlbGVtIGluIGVudW1lcmF0ZShzKToKIyAgICAgICAgaWYgZWxlbSBpcyBOVUxMOgojICAgICAgICAgICAgY29udGludWUKIyAgICAgICAgY250X3MgPSBjbnRfdCA9IDAKIyAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSwgbSk6CiMgICAgICAgICAgICBpZiBzW2pdID09IGVsZW06CiMgICAgICAgICAgICAgICAgY250X3MgKz0gMQojICAgICAgICAgICAgICAgIHNbal0gPSBOVUxMCiMgICAgICAgIGZvciBqLCBvdGhlcl9lbGVtIGluIGVudW1lcmF0ZSh0KToKIyAgICAgICAgICAgIGlmIG90aGVyX2VsZW0gPT0gZWxlbToKIyAgICAgICAgICAgICAgICBjbnRfdCArPSAxCiMgICAgICAgICAgICAgICAgdFtqXSA9IE5VTEwKIyAgICAgICAgaWYgY250X3MgIT0gY250X3Q6CiMgICAgICAgICAgICBkaWZmID0gX01pc21hdGNoKGNudF9zLCBjbnRfdCwgZWxlbSkKIyAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZGlmZikKIwojICAgIGZvciBpLCBlbGVtIGluIGVudW1lcmF0ZSh0KToKIyAgICAgICAgaWYgZWxlbSBpcyBOVUxMOgojICAgICAgICAgICAgY29udGludWUKIyAgICAgICAgY250X3QgPSAwCiMgICAgICAgIGZvciBqIGluIHJhbmdlKGksIG4pOgojICAgICAgICAgICAgaWYgdFtqXSA9PSBlbGVtOgojICAgICAgICAgICAgICAgIGNudF90ICs9IDEKIyAgICAgICAgICAgICAgICB0W2pdID0gTlVMTAojICAgICAgICBkaWZmID0gX01pc21hdGNoKDAsIGNudF90LCBlbGVtKQojICAgICAgICByZXN1bHQuYXBwZW5kKGRpZmYpCiMgICAgcmV0dXJuIHJlc3VsdAoKI2RlZiBfb3JkZXJlZF9jb3VudChpdGVyYWJsZSk6CiMgICAgJ1JldHVybiBkaWN0IG9mIGVsZW1lbnQgY291bnRzLCBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIGZpcnN0IHNlZW4nCiMgICAgYyA9IE9yZGVyZWREaWN0KCkKIyAgICBmb3IgZWxlbSBpbiBpdGVyYWJsZToKIyAgICAgICAgY1tlbGVtXSA9IGMuZ2V0KGVsZW0sIDApICsgMQojICAgIHJldHVybiBjCgojZGVmIF9jb3VudF9kaWZmX2hhc2hhYmxlKGFjdHVhbCwgZXhwZWN0ZWQpOgojICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInCiMgICAgIyBlbGVtZW50cyBtdXN0IGJlIGhhc2hhYmxlCiMgICAgcywgdCA9IF9vcmRlcmVkX2NvdW50KGFjdHVhbCksIF9vcmRlcmVkX2NvdW50KGV4cGVjdGVkKQojICAgIHJlc3VsdCA9IFtdCiMgICAgZm9yIGVsZW0sIGNudF9zIGluIHMuaXRlbXMoKToKIyAgICAgICAgY250X3QgPSB0LmdldChlbGVtLCAwKQojICAgICAgICBpZiBjbnRfcyAhPSBjbnRfdDoKIyAgICAgICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goY250X3MsIGNudF90LCBlbGVtKQojICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQojICAgIGZvciBlbGVtLCBjbnRfdCBpbiB0Lml0ZW1zKCk6CiMgICAgICAgIGlmIGVsZW0gbm90IGluIHM6CiMgICAgICAgICAgICBkaWZmID0gX01pc21hdGNoKDAsIGNudF90LCBlbGVtKQojICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQojICAgIHJldHVybiByZXN1bHQK',
'/Lib/lib_migration/unittest/__init__.py':'IiIiClB5dGhvbiB1bml0IHRlc3RpbmcgZnJhbWV3b3JrLCBiYXNlZCBvbiBFcmljaCBHYW1tYSdzIEpVbml0IGFuZCBLZW50IEJlY2sncwpTbWFsbHRhbGsgdGVzdGluZyBmcmFtZXdvcmsuCgpUaGlzIG1vZHVsZSBjb250YWlucyB0aGUgY29yZSBmcmFtZXdvcmsgY2xhc3NlcyB0aGF0IGZvcm0gdGhlIGJhc2lzIG9mCnNwZWNpZmljIHRlc3QgY2FzZXMgYW5kIHN1aXRlcyAoVGVzdENhc2UsIFRlc3RTdWl0ZSBldGMuKSwgYW5kIGFsc28gYQp0ZXh0LWJhc2VkIHV0aWxpdHkgY2xhc3MgZm9yIHJ1bm5pbmcgdGhlIHRlc3RzIGFuZCByZXBvcnRpbmcgdGhlIHJlc3VsdHMKIChUZXh0VGVzdFJ1bm5lcikuCgpTaW1wbGUgdXNhZ2U6CgogICAgaW1wb3J0IHVuaXR0ZXN0CgogICAgY2xhc3MgSW50ZWdlckFyaXRobWVudGljVGVzdENhc2UodW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgIGRlZiB0ZXN0QWRkKHNlbGYpOiAgIyMgdGVzdCBtZXRob2QgbmFtZXMgYmVnaW4gJ3Rlc3QqJwogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCgxICsgMiksIDMpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoMCArIDEsIDEpCiAgICAgICAgZGVmIHRlc3RNdWx0aXBseShzZWxmKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoMCAqIDEwKSwgMCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoNSAqIDgpLCA0MCkKCiAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgICAgIHVuaXR0ZXN0Lm1haW4oKQoKRnVydGhlciBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGJ1bmRsZWQgZG9jdW1lbnRhdGlvbiwgYW5kIGZyb20KCiAgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3VuaXR0ZXN0Lmh0bWwKCkNvcHlyaWdodCAoYykgMTk5OS0yMDAzIFN0ZXZlIFB1cmNlbGwKQ29weXJpZ2h0IChjKSAyMDAzLTIwMTAgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24KVGhpcyBtb2R1bGUgaXMgZnJlZSBzb2Z0d2FyZSwgYW5kIHlvdSBtYXkgcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUHl0aG9uIGl0c2VsZiwgc28gbG9uZyBhcyB0aGlzIGNvcHlyaWdodCBtZXNzYWdlCmFuZCBkaXNjbGFpbWVyIGFyZSByZXRhaW5lZCBpbiB0aGVpciBvcmlnaW5hbCBmb3JtLgoKSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgVE8gQU5ZIFBBUlRZIEZPUiBESVJFQ1QsIElORElSRUNULApTUEVDSUFMLCBJTkNJREVOVEFMLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhFIFVTRSBPRgpUSElTIENPREUsIEVWRU4gSUYgVEhFIEFVVEhPUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNICkRBTUFHRS4KClRIRSBBVVRIT1IgU1BFQ0lGSUNBTExZIERJU0NMQUlNUyBBTlkgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UCkxJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBClBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRIRSBDT0RFIFBST1ZJREVEIEhFUkVVTkRFUiBJUyBPTiBBTiAiQVMgSVMiIEJBU0lTLApBTkQgVEhFUkUgSVMgTk8gT0JMSUdBVElPTiBXSEFUU09FVkVSIFRPIFBST1ZJREUgTUFJTlRFTkFOQ0UsClNVUFBPUlQsIFVQREFURVMsIEVOSEFOQ0VNRU5UUywgT1IgTU9ESUZJQ0FUSU9OUy4KIiIiCgojX19hbGxfXyA9IFsnVGVzdFJlc3VsdCcsICdUZXN0Q2FzZScsICdUZXN0U3VpdGUnLAojICAgICAgICAgICAnVGV4dFRlc3RSdW5uZXInLCAnVGVzdExvYWRlcicsICdGdW5jdGlvblRlc3RDYXNlJywgJ21haW4nLAojICAgICAgICAgICAnZGVmYXVsdFRlc3RMb2FkZXInLCAnU2tpcFRlc3QnLCAnc2tpcCcsICdza2lwSWYnLCAnc2tpcFVubGVzcycsCiMgICAgICAgICAgICdleHBlY3RlZEZhaWx1cmUnLCAnVGV4dFRlc3RSZXN1bHQnLCAnaW5zdGFsbEhhbmRsZXInLAojICAgICAgICAgICAncmVnaXN0ZXJSZXN1bHQnLCAncmVtb3ZlUmVzdWx0JywgJ3JlbW92ZUhhbmRsZXInXQoKIyBFeHBvc2Ugb2Jzb2xldGUgZnVuY3Rpb25zIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQojX19hbGxfXy5leHRlbmQoWydnZXRUZXN0Q2FzZU5hbWVzJywgJ21ha2VTdWl0ZScsICdmaW5kVGVzdENhc2VzJ10pCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKI2Zyb20gLnJlc3VsdCBpbXBvcnQgVGVzdFJlc3VsdAojZml4bWUgYnJ5dGhvbiBzeW50YXggZXJyb3IKZnJvbSAuY2FzZSBpbXBvcnQgVGVzdENhc2UKZnJvbSAubWFpbiBpbXBvcnQgVGVzdFByb2dyYW0sIG1haW4KI2Zyb20gLmNhc2UgaW1wb3J0IChUZXN0Q2FzZSwgRnVuY3Rpb25UZXN0Q2FzZSwgU2tpcFRlc3QsIHNraXAsIHNraXBJZiwKIyAgICAgICAgICAgICAgICAgICBza2lwVW5sZXNzLCBleHBlY3RlZEZhaWx1cmUpCiNmcm9tIC5zdWl0ZSBpbXBvcnQgQmFzZVRlc3RTdWl0ZSwgVGVzdFN1aXRlCiNmcm9tIC5sb2FkZXIgaW1wb3J0IChUZXN0TG9hZGVyLCBkZWZhdWx0VGVzdExvYWRlciwgbWFrZVN1aXRlLCBnZXRUZXN0Q2FzZU5hbWVzLAojICAgICAgICAgICAgICAgICAgICAgZmluZFRlc3RDYXNlcykKI2Zyb20gLm1haW4gaW1wb3J0IFRlc3RQcm9ncmFtLCBtYWluCiNmcm9tIC5ydW5uZXIgaW1wb3J0IFRleHRUZXN0UnVubmVyLCBUZXh0VGVzdFJlc3VsdAojZnJvbSAuc2lnbmFscyBpbXBvcnQgaW5zdGFsbEhhbmRsZXIsIHJlZ2lzdGVyUmVzdWx0LCByZW1vdmVSZXN1bHQsIHJlbW92ZUhhbmRsZXIKCiMgZGVwcmVjYXRlZAojX1RleHRUZXN0UmVzdWx0ID0gVGV4dFRlc3RSZXN1bHQK',
'/Lib/lib_migration/unittest/__main__.py':'IiIiTWFpbiBlbnRyeSBwb2ludCIiIgoKaW1wb3J0IHN5cwppZiBzeXMuYXJndlswXS5lbmRzd2l0aCgiX19tYWluX18ucHkiKToKICAgIHN5cy5hcmd2WzBdID0gInB5dGhvbiAtbSB1bml0dGVzdCIKCl9fdW5pdHRlc3QgPSBUcnVlCgpmcm9tIC5tYWluIGltcG9ydCBtYWluLCBUZXN0UHJvZ3JhbSwgVVNBR0VfQVNfTUFJTgpUZXN0UHJvZ3JhbS5VU0FHRSA9IFVTQUdFX0FTX01BSU4KCm1haW4obW9kdWxlPU5vbmUpCg==',
'/Lib/ui/BaseUI.py':'aW1wb3J0IHJhbmRvbQoKY2xhc3MgQmFzZVVJOgogIGRlZiBfX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZD1Ob25lLCBkcmFnZ2FibGU9RmFsc2UpOgogICAgICBzZWxmLl9lbGVtZW50PWVsZW1lbnQKCiAgICAgIGlmIGlkIGlzIE5vbmU6CiAgICAgICAgIHNlbGYuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsJyVzXyVzJyAlICh0eXBlLCBpbnQoMTAwMDAwKnJhbmRvbS5yYW5kb20oKSkpKQogICAgICBlbHNlOgogICAgICAgICBzZWxmLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLGlkKQoKICAgICAgaWYgZHJhZ2dhYmxlOgogICAgICAgICBzZWxmLmRyYWdnYWJsZSgpCgogICAgICBzZWxmLmF0dGFjaD1zZWxmLmFwcGVuZAoKICBkZWYgZ2V0X2lkKHNlbGYpOgogICAgICByZXR1cm4gc2VsZi5fZWxlbWVudC5pZAoKICBkZWYgYXBwZW5kKHNlbGYsIGVsZW1lbnRfaWQpOgogICAgICAiIiIgYXBwZW5kIHRoaXMgRE9NIGNvbXBvbmVudCB0byBET00gZWxlbWVudCBlbGVtZW50X2lkIiIiCiAgICAgIGRvYy5nZXQoaWQ9ZWxlbWVudF9pZClbMF0uYXBwZW5kQ2hpbGQoc2VsZi5fZWxlbWVudCkKCiAgZGVmIGRyYWdnYWJsZShzZWxmKToKICAgICAgZGVmIGRyYWcoZSk6CiAgICAgICAgICBzZWxmLl9lbGVtZW50LnN0eWxlLnRvcD0nJXNweCcgJSAoZS5jbGllbnRZIC0gc2VsZi5fZGVsdGFZKQogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS5sZWZ0PSclc3B4JyAlIChlLmNsaWVudFggLSBzZWxmLl9kZWx0YVgpCgogICAgICBkZWYgbW91c2VEb3duKGUpOgogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS5wb3NpdGlvbj0nYWJzb2x1dGUnCiAgICAgICAgICBzZWxmLl9kZWx0YVg9ZS5jbGllbnRYIC0gc2VsZi5fZWxlbWVudC5vZmZzZXRMZWZ0CiAgICAgICAgICBzZWxmLl9kZWx0YVk9ZS5jbGllbnRZIC0gc2VsZi5fZWxlbWVudC5vZmZzZXRUb3AKICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBkcmFnLCB0cnVlKQoKICAgICAgZGVmIG1vdXNlVXAoZSk6CiAgICAgICAgICB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZHJhZywgdHJ1ZSkKCiAgICAgIHNlbGYuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgbW91c2VEb3duLCBGYWxzZSkKICAgICAgc2VsZi5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcCwgRmFsc2UpCgogIGRlZiBzaG93KHNlbGYpOgogICAgICBzZWxmLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGlzcGxheScsICdibG9jaycpCgogIGRlZiBoaWRlKHNlbGYpOgogICAgICBzZWxmLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGlzcGxheScsICdub25lJykK',
'/Lib/ui/dialog.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwsIGRvYyBhcyBkb2N1bWVudAoKY2xhc3MgRGlhbG9nKFdpZGdldC5EcmFnZ2FibGVXaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lKToKICAgICAgc2VsZi5fZGl2X3NoZWxsPWh0bWwuRElWKAogICAgICAgICBDbGFzcz0idWktZGlhbG9nIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIHVpLWZyb250IHVpLWRyYWdnYWJsZSB1aS1yZXNpemFibGUiLAogICAgICAgICBzdHlsZT17J3Bvc2l0aW9uJzogJ2Fic29sdXRlJywgJ2hlaWdodCc6ICdhdXRvJywgJ3dpZHRoJzogJzMwMHB4JywKICAgICAgICAgICAgICAgICd0b3AnOiAnOThweCcsICdsZWZ0JzogJzE0MHB4JywgJ2Rpc3BsYXknOiAnYmxvY2snfSkKCiAgICAgIFdpZGdldC5EcmFnZ2FibGVXaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnZGlhbG9nJywgaWQpCgogICAgICBfZGl2X3RpdGxlYmFyPWh0bWwuRElWKElkPSJ0aXRsZWJhciIsCiAgICAgICAgICAgQ2xhc3M9InVpLWRpYWxvZy10aXRsZWJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwgdWktaGVscGVyLWNsZWFyZml4IikKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IF9kaXZfdGl0bGViYXIKCiAgICAgIHNlbGYuX2Rpdl90aXRsZT1odG1sLlNQQU4oSWQ9InRpdGxlIiwgQ2xhc3M9InVpLWRpYWxvZy10aXRsZSIpCiAgICAgICAgCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fZGl2X3RpdGxlCgogICAgICBzZWxmLl90aXRsZV9idXR0b249aHRtbC5CVVRUT04oVGl0bGU9ImNsb3NlIiwKICAgICAgICAgICAgQ2xhc3M9InVpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIHVpLWJ1dHRvbi1pY29uLW9ubHkgdWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlIikKCiAgICAgIGRlZiBkaWFsb2dfY2xvc2UoZSk6CiAgICAgICAgICAjZGVsIGRvY3VtZW50W3NlbGYuX2Rpdl9zaGVsbC5pZF0KICAgICAgICAgIGRlbCBkb2Nbc2VsZi5fZGl2X3NoZWxsLmlkXQoKICAgICAgc2VsZi5fdGl0bGVfYnV0dG9uLmJpbmQoJ2NsaWNrJywgZGlhbG9nX2Nsb3NlKQogICAgICBfc3Bhbj1odG1sLlNQQU4oQ2xhc3M9InVpLWJ1dHRvbi1pY29uLXByaW1hcnkgdWktaWNvbiB1aS1pY29uLWNsb3NldGhpY2siKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9zcGFuPWh0bWwuU1BBTignY2xvc2UnLCBDbGFzcz0idWktYnV0dG9uLXRleHQiKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fdGl0bGVfYnV0dG9uCgogICAgICBzZWxmLl9kaXZfZGlhbG9nPWh0bWwuRElWKENsYXNzPSJ1aS1kaWFsb2ctY29udGVudCB1aS13aWRnZXQtY29udGVudCIsCiAgICAgICAgICAgc3R5bGU9eyd3aWR0aCc6ICdhdXRvJywgJ21pbi1oZWlnaHQnOiAnMTA1cHgnLCAKICAgICAgICAgICAgICAgICAgJ21heC1oZWlnaHQnOiAnbm9uZScsICdoZWlnaHQnOiAnYXV0byd9KQoKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IHNlbGYuX2Rpdl9kaWFsb2cKCiAgICAgIGZvciBfaSBpbiBbJ24nLCAnZScsICdzJywgJ3cnLCAnc2UnLCAnc3cnLCAnbmUnLCAnbncnXToKICAgICAgICAgIGlmIF9pID09ICdzZSc6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIHVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtJXMiICUgKF9pLCBfaSkKICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIiAlIF9pCgogICAgICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IGh0bWwuRElWKENsYXNzPV9jbGFzcywgc3R5bGU9eyd6LWluZGV4JzogJzkwJ30pCgogICAgICBkb2MgPD0gc2VsZi5fZGl2X3NoZWxsCgogIGRlZiBzZXRfdGl0bGUoc2VsZiwgdGl0bGUpOgogICAgICBzZWxmLl9kaXZfdGl0bGUuc2V0X3RleHQodGl0bGUpCgogIGRlZiBzZXRfYm9keShzZWxmLCBib2R5KToKICAgICAgc2VsZi5fZGl2X2RpYWxvZy5zZXRfaHRtbChib2R5KQo=',
'/Lib/ui/progressbar.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFByb2dyZXNzQmFyKFdpZGdldC5XaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiKQogICAgICBXaWRnZXQuV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIHNlbGYuX2Rpdl9zaGVsbCwgJ3Byb2dyZXNzYmFyJywgaWQpCgogICAgICBzZWxmLl9zaG93X2xhYmVsPWxhYmVsCiAgICAgIGlmIGxhYmVsOgogICAgICAgICBzZWxmLl9sYWJlbD1odG1sLkRJVihDbGFzcz0ncHJvZ3Jlc3MtbGFiZWwnKQogICAgICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fbGFiZWwKCiAgICAgIHNlbGYuX2Jhcj1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXItdmFsdWUgdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItbGVmdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17J3dpZHRoJzogJzBweCd9KQogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fYmFyCgogIGRlZiBzZXRfcHJvZ3Jlc3Moc2VsZiwgcGVyY2VudCk6CiAgICAgIHNlbGYuX2Jhci5zdHlsZS53aWR0aD0nJXMlJScgJSBwZXJjZW50CiAgICAgIGlmIHNlbGYuX3Nob3dfbGFiZWw6CiAgICAgICAgIHNlbGYuX2xhYmVsLnRleHQ9JyVzJSUnICUgcGVyY2VudAo=',
'/Lib/ui/slider.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFNsaWRlcihXaWRnZXQuV2lkZ2V0KToKICBkZWYgX19pbml0X18oc2VsZiwgaWQ9Tm9uZSwgZG9jdW1lbnQ9ZG9jLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktc2xpZGVyIHVpLXNsaWRlci1ob3Jpem9udGFsIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIikKCiAgICAgIFdpZGdldC5XaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnc2xpZGVyJywgaWQpCgogICAgICBzZWxmLl9oYW5kbGU9aHRtbC5BKENsYXNzPSJ1aS1zbGlkZXItaGFuZGxlIHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWFsbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgSHJlZj0nIycsIHN0eWxlPXsnbGVmdCc6ICcwcHgnfSkKICAgICAgc2VsZi5fdmFsdWU9MAogICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQoKICAgICAgZGVmIHN0YXJ0U2xpZGUoZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1UcnVlCiAgICAgICAgICBzZWxmLl91cHBlckJvdW5kID0gc2VsZi5fZGl2X3NoZWxsLm9mZnNldFdpZHRoIC0gc2VsZi5faGFuZGxlLm9mZnNldFdpZHRoCgogICAgICAgICAgcG9zID0gV2lkZ2V0LmdldE1vdXNlUG9zaXRpb24oZSkKICAgICAgICAgIHNlbGYuX3N0YXJ0TW91c2VYPXBvc1sneCddCgogICAgICAgICAgc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ID0gcGFyc2VJbnQoc2VsZi5faGFuZGxlLmVsdC5zdHlsZS5sZWZ0KSAjLSBwYXJzZUludChzZWxmLl9kaXZfc2hlbGwuZWx0LnN0eWxlLmxlZnQpCiAgICAgICAgICAjcHJpbnQoc2VsZi5fdXBwZXJCb3VuZCkKICAgICAgICAgIHVwZGF0ZVBvc2l0aW9uKGUpCgogICAgICBkZWYgdXBkYXRlUG9zaXRpb24oZSk6CiAgICAgICAgICBwb3MgPSBXaWRnZXQuZ2V0TW91c2VQb3NpdGlvbihlKQogICAgICAgICAgX25ld1BvcyA9IHNlbGYuX2xhc3RFbGVtZW50TGVmdCArIHBvc1sneCddIC0gc2VsZi5fc3RhcnRNb3VzZVgKICAgICAgICAgIAogICAgICAgICAgX25ld1BvcyA9IG1heCgwLCBfbmV3UG9zKQogICAgICAgICAgX25ld1BvcyA9IG1pbihfbmV3UG9zLCBzZWxmLl91cHBlckJvdW5kKQoKICAgICAgICAgICNwcmludChfbmV3UG9zKQogICAgICAgICAgc2VsZi5faGFuZGxlLmVsdC5zdHlsZS5sZWZ0ID0gJyVzcHgnICUgX25ld1BvcwogICAgICAgICAgc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ID0gX25ld1BvcwoKICAgICAgZGVmIG1vdmluZyhlKToKICAgICAgICAgIGlmIHNlbGYuX2lzTW91c2VEb3duOgogICAgICAgICAgICAgdXBkYXRlUG9zaXRpb24oZSkKCiAgICAgIGRlZiBkcm9wQ2FsbGJhY2soZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQogICAgICAgICAgc2VsZi5faGFuZGxlLnVuYmluZCgnbW91c2Vtb3ZlJywgbW92aW5nKQoKCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZW1vdmUnLCBtb3ZpbmcpCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZXVwJywgZHJvcENhbGxiYWNrKQogICAgICAjc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3V0JywgZHJvcENhbGxiYWNrKQogICAgICBzZWxmLl9oYW5kbGUuYmluZCgnbW91c2Vkb3duJywgc3RhcnRTbGlkZSkKCiAgICAgIGRlZiBtb3VzZW92ZXIoZSk6CiAgICAgICAgICBfY2xhc3M9c2VsZi5faGFuZGxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKQogICAgICAgICAgc2VsZi5faGFuZGxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnJXMgJXMnICUgKF9jbGFzcywgJ3VpLXN0YXRlLWhvdmVyJykpCgogICAgICBkZWYgbW91c2VvdXQoZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQogICAgICAgICAgX2NsYXNzPXNlbGYuX2hhbmRsZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykKICAgICAgICAgIHNlbGYuX2hhbmRsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgX2NsYXNzLnJlcGxhY2UoJ3VpLXN0YXRlLWhvdmVyJywgJycpKQoKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3ZlcicsIG1vdXNlb3ZlcikKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3V0JywgbW91c2VvdXQpCgogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5faGFuZGxlCgogIGRlZiBnZXRfdmFsdWUoc2VsZik6CiAgICAgIHJldHVybiBzZWxmLl92YWx1ZQoKICAjZGVmIHNldF92YWx1ZShzZWxmLCB2YWx1ZSk6CiAgIyAgICBzZWxmLl92YWx1ZT12YWx1ZQogICMgICBzZWxmLl9oYW5kbGUuc3R5bGUubGVmdD0nJXNweCcgJSB2YWx1ZQo=',
'/Lib/ui/Widget.py':'aW1wb3J0IHJhbmRvbQpmcm9tIGJyb3dzZXIgaW1wb3J0IGRvYyBhcyBkb2N1bWVudCAgIyA6KCBkb2N1bWVudCBkb2Vzbid0IHdvcmsKCmRlZiBnZXRNb3VzZVBvc2l0aW9uKGUpOgogICAgaWYgZSBpcyBOb25lOgogICAgICAgZT13aW4uZXZlbnQKCiAgICBpZiBlLnBhZ2VYIG9yIGUucGFnZVk6CiAgICAgICByZXR1cm4geyd4JzogZS5wYWdlWCwgJ3knOiBlLnBhZ2VZfQoKICAgIGlmIGUuY2xpZW50WCBvciBlLmNsaWVudFk6CiAgICAgICBfcG9zeD1lLmNsaWVudFggKyBkb2MuYm9keS5zY3JvbGxMZWZ0ICsgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0OwogICAgICAgX3Bvc3k9ZS5jbGllbnRZICsgZG9jLmJvZHkuc2Nyb2xsVG9wICsgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7CiAgICAgICByZXR1cm4geyd4JzogX3Bvc3gsICd5JzogX3Bvc3l9CiAgICAgIAogICAgcmV0dXJuIHsneCc6IDAsICd5JzogMH0KCmNsYXNzIFdpZGdldDoKICBkZWYgX19pbml0X18oc2VsZiwgZWxlbWVudCwgdHlwZSwgaWQ9Tm9uZSk6CiAgICAgIHNlbGYuX2VsZW1lbnQ9ZWxlbWVudAoKICAgICAgaWYgaWQgaXMgTm9uZToKICAgICAgICAgc2VsZi5fZWxlbWVudC5pZD0nJXNfJXMnICUgKHR5cGUsIGludCgxMDAwMDAqcmFuZG9tLnJhbmRvbSgpKSkKICAgICAgZWxzZToKICAgICAgICAgc2VsZi5fZWxlbWVudC5pZD1pZAoKICBkZWYgZ2V0X2lkKHNlbGYpOgogICAgICByZXR1cm4gc2VsZi5fZWxlbWVudC5pZAoKICBkZWYgYXR0YWNoKHNlbGYsIGVsZW1lbnRfaWQpOgogICAgICAiIiIgYXBwZW5kIHRoaXMgRE9NIGNvbXBvbmVudCB0byBET00gZWxlbWVudCBlbGVtZW50X2lkIiIiCiAgICAgICNkb2N1bWVudFtlbGVtZW50X2lkXSA8PSBzZWxmLl9lbGVtZW50ICAgI3RoaXMgZG9lc24ndCB3b3JrIDooCiAgICAgICNkb2MgaXMgYWN0dWFsbHkgdGhlIGdsb2JhbCAnZG9jJyBub3QgdGhlIG9uZSB3ZSBpbXBvcnRlZCBmcm9tIGJyb3dzZXIgOigKICAgICAgZG9jW2VsZW1lbnRfaWRdIDw9IHNlbGYuX2VsZW1lbnQKCiAgZGVmIHNob3coc2VsZik6CiAgICAgIHNlbGYuX2VsZW1lbnQuZGlzcGxheT0nYmxvY2snCgogIGRlZiBoaWRlKHNlbGYpOgogICAgICBzZWxmLl9lbGVtZW50LmRpc3BsYXk9J25vbmUnCgpjbGFzcyBEcmFnZ2FibGVXaWRnZXQoV2lkZ2V0KToKICBkZWYgX19pbml0X18oc2VsZiwgZWxlbWVudCwgdHlwZSwgaWQ9Tm9uZSk6CiAgICAgIFdpZGdldC5fX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZCkKCiAgICAgIGRlZiBkcmFnKGUpOgogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS50b3A9JyVzcHgnICUgKGUuY2xpZW50WSAtIHNlbGYuX2RlbHRhWSkKICAgICAgICAgIHNlbGYuX2VsZW1lbnQuc3R5bGUubGVmdD0nJXNweCcgJSAoZS5jbGllbnRYIC0gc2VsZi5fZGVsdGFYKQoKICAgICAgZGVmIG1vdXNlRG93bihlKToKICAgICAgICAgIHNlbGYuX2VsZW1lbnQuc3R5bGUucG9zaXRpb249J2Fic29sdXRlJwogICAgICAgICAgc2VsZi5fZGVsdGFYPWUuY2xpZW50WCAtIHNlbGYuX2VsZW1lbnQub2Zmc2V0TGVmdAogICAgICAgICAgc2VsZi5fZGVsdGFZPWUuY2xpZW50WSAtIHNlbGYuX2VsZW1lbnQub2Zmc2V0VG9wCiAgICAgICAgICBkb2MuYmluZCgnbW91c2Vtb3ZlJywgZHJhZykKCiAgICAgIGRlZiBtb3VzZVVwKGUpOgogICAgICAgICAgZG9jLnVuYmluZCgnbW91c2Vtb3ZlJykKCiAgICAgIHNlbGYuX2VsZW1lbnQuYmluZCgnbW91c2Vkb3duJywgbW91c2VEb3duKQogICAgICBzZWxmLl9lbGVtZW50LmJpbmQoJ21vdXNldXAnLCBtb3VzZVVwKQo=',
'/Lib/ui/__init__.py':'ZnJvbSBicm93c2VyIGltcG9ydCBodG1sLCBkb2MgYXMgZG9jdW1lbnQKZnJvbSBEaWFsb2cgaW1wb3J0ICoKZnJvbSBQcm9ncmVzc0JhciBpbXBvcnQgKgpmcm9tIFNsaWRlciBpbXBvcnQgKgoKZGVmIGFkZF9zdHlsZXNoZWV0KCk6CiAgICBfbGluaz1odG1sLkxJTksoSHJlZj0nL3NyYy9MaWIvdWkvY3NzL3Ntb290aG5lc3MvanF1ZXJ5LXVpLTEuMTAuMy5jdXN0b20ubWluLmNzcycpCiAgICBfbGluay5yZWw9J3N0eWxlc2hlZXQnCgogICAgZG9jIDw9IF9saW5rICAgICAjIGRvY3VtZW50IGRvZXNuJ3Qgd29yayBoZXJlLi4gOiggbXVzdCB1c2UgZG9jIAo=',
'/Lib/unittest/case.py':'',
'/Lib/unittest/loader.py':'',
'/Lib/unittest/main.py':'',
'/Lib/unittest/mock.py':'',
'/Lib/unittest/result.py':'',
'/Lib/unittest/runner.py':'',
'/Lib/unittest/signals.py':'aW1wb3J0IHNpZ25hbAppbXBvcnQgd2Vha3JlZgoKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCmNsYXNzIF9JbnRlcnJ1cHRIYW5kbGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVmYXVsdF9oYW5kbGVyKToKICAgICAgICBzZWxmLmNhbGxlZCA9IEZhbHNlCiAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIgPSBkZWZhdWx0X2hhbmRsZXIKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgc2lnbnVtLCBmcmFtZSk6CiAgICAgICAgaW5zdGFsbGVkX2hhbmRsZXIgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgaWYgaW5zdGFsbGVkX2hhbmRsZXIgaXMgbm90IHNlbGY6CiAgICAgICAgICAgICMgaWYgd2UgYXJlbid0IHRoZSBpbnN0YWxsZWQgaGFuZGxlciwgdGhlbiBkZWxlZ2F0ZSBpbW1lZGlhdGVseQogICAgICAgICAgICAjIHRvIHRoZSBkZWZhdWx0IGhhbmRsZXIKICAgICAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIoc2lnbnVtLCBmcmFtZSkKCiAgICAgICAgaWYgc2VsZi5jYWxsZWQ6CiAgICAgICAgICAgIHNlbGYuZGVmYXVsdF9oYW5kbGVyKHNpZ251bSwgZnJhbWUpCiAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlCiAgICAgICAgZm9yIHJlc3VsdCBpbiBfcmVzdWx0cy5rZXlzKCk6CiAgICAgICAgICAgIHJlc3VsdC5zdG9wKCkKCl9yZXN1bHRzID0gd2Vha3JlZi5XZWFrS2V5RGljdGlvbmFyeSgpCmRlZiByZWdpc3RlclJlc3VsdChyZXN1bHQpOgogICAgX3Jlc3VsdHNbcmVzdWx0XSA9IDEKCmRlZiByZW1vdmVSZXN1bHQocmVzdWx0KToKICAgIHJldHVybiBib29sKF9yZXN1bHRzLnBvcChyZXN1bHQsIE5vbmUpKQoKX2ludGVycnVwdF9oYW5kbGVyID0gTm9uZQpkZWYgaW5zdGFsbEhhbmRsZXIoKToKICAgIGdsb2JhbCBfaW50ZXJydXB0X2hhbmRsZXIKICAgIGlmIF9pbnRlcnJ1cHRfaGFuZGxlciBpcyBOb25lOgogICAgICAgIGRlZmF1bHRfaGFuZGxlciA9IHNpZ25hbC5nZXRzaWduYWwoc2lnbmFsLlNJR0lOVCkKICAgICAgICBfaW50ZXJydXB0X2hhbmRsZXIgPSBfSW50ZXJydXB0SGFuZGxlcihkZWZhdWx0X2hhbmRsZXIpCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIpCgoKZGVmIHJlbW92ZUhhbmRsZXIobWV0aG9kPU5vbmUpOgogICAgaWYgbWV0aG9kIGlzIG5vdCBOb25lOgogICAgICAgIEB3cmFwcyhtZXRob2QpCiAgICAgICAgZGVmIGlubmVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIGluaXRpYWwgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgICAgIHJlbW92ZUhhbmRsZXIoKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kKCphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW5pdGlhbCkKICAgICAgICByZXR1cm4gaW5uZXIKCiAgICBnbG9iYWwgX2ludGVycnVwdF9oYW5kbGVyCiAgICBpZiBfaW50ZXJydXB0X2hhbmRsZXIgaXMgbm90IE5vbmU6CiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIuZGVmYXVsdF9oYW5kbGVyKQo=',
'/Lib/unittest/suite.py':'',
'/Lib/unittest/util.py':'IiIiVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy4iIiIKCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUsIE9yZGVyZWREaWN0CgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKX01BWF9MRU5HVEggPSA4MApkZWYgc2FmZV9yZXByKG9iaiwgc2hvcnQ9RmFsc2UpOgogICAgdHJ5OgogICAgICAgIHJlc3VsdCA9IHJlcHIob2JqKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXN1bHQgPSBvYmplY3QuX19yZXByX18ob2JqKQogICAgaWYgbm90IHNob3J0IG9yIGxlbihyZXN1bHQpIDwgX01BWF9MRU5HVEg6CiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgcmV0dXJuIHJlc3VsdFs6X01BWF9MRU5HVEhdICsgJyBbdHJ1bmNhdGVkXS4uLicKCmRlZiBzdHJjbGFzcyhjbHMpOgogICAgcmV0dXJuICIlcy4lcyIgJSAoY2xzLl9fbW9kdWxlX18sIGNscy5fX25hbWVfXykKCmRlZiBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiRmluZHMgZWxlbWVudHMgaW4gb25seSBvbmUgb3IgdGhlIG90aGVyIG9mIHR3bywgc29ydGVkIGlucHV0IGxpc3RzLgoKICAgIFJldHVybnMgYSB0d28tZWxlbWVudCB0dXBsZSBvZiBsaXN0cy4gICAgVGhlIGZpcnN0IGxpc3QgY29udGFpbnMgdGhvc2UKICAgIGVsZW1lbnRzIGluIHRoZSAiZXhwZWN0ZWQiIGxpc3QgYnV0IG5vdCBpbiB0aGUgImFjdHVhbCIgbGlzdCwgYW5kIHRoZQogICAgc2Vjb25kIGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIGluIHRoZSAiYWN0dWFsIiBsaXN0IGJ1dCBub3QgaW4gdGhlCiAgICAiZXhwZWN0ZWQiIGxpc3QuICAgIER1cGxpY2F0ZSBlbGVtZW50cyBpbiBlaXRoZXIgaW5wdXQgbGlzdCBhcmUgaWdub3JlZC4KICAgICIiIgogICAgaSA9IGogPSAwCiAgICBtaXNzaW5nID0gW10KICAgIHVuZXhwZWN0ZWQgPSBbXQogICAgd2hpbGUgVHJ1ZToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGUgPSBleHBlY3RlZFtpXQogICAgICAgICAgICBhID0gYWN0dWFsW2pdCiAgICAgICAgICAgIGlmIGUgPCBhOgogICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoZSkKICAgICAgICAgICAgICAgIGkgKz0gMQogICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICBpICs9IDEKICAgICAgICAgICAgZWxpZiBlID4gYToKICAgICAgICAgICAgICAgIHVuZXhwZWN0ZWQuYXBwZW5kKGEpCiAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgbWlzc2luZy5leHRlbmQoZXhwZWN0ZWRbaTpdKQogICAgICAgICAgICB1bmV4cGVjdGVkLmV4dGVuZChhY3R1YWxbajpdKQogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIG1pc3NpbmcsIHVuZXhwZWN0ZWQKCgpkZWYgdW5vcmRlcmFibGVfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiU2FtZSBiZWhhdmlvciBhcyBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlIGJ1dAogICAgZm9yIGxpc3RzIG9mIHVub3JkZXJhYmxlIGl0ZW1zIChsaWtlIGRpY3RzKS4KCiAgICBBcyBpdCBkb2VzIGEgbGluZWFyIHNlYXJjaCBwZXIgaXRlbSAocmVtb3ZlKSBpdAogICAgaGFzIE8obipuKSBwZXJmb3JtYW5jZS4iIiIKICAgIG1pc3NpbmcgPSBbXQogICAgd2hpbGUgZXhwZWN0ZWQ6CiAgICAgICAgaXRlbSA9IGV4cGVjdGVkLnBvcCgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhY3R1YWwucmVtb3ZlKGl0ZW0pCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIG1pc3NpbmcuYXBwZW5kKGl0ZW0pCgogICAgIyBhbnl0aGluZyBsZWZ0IGluIGFjdHVhbCBpcyB1bmV4cGVjdGVkCiAgICByZXR1cm4gbWlzc2luZywgYWN0dWFsCgpkZWYgdGhyZWVfd2F5X2NtcCh4LCB5KToKICAgICIiIlJldHVybiAtMSBpZiB4IDwgeSwgMCBpZiB4ID09IHkgYW5kIDEgaWYgeCA+IHkiIiIKICAgIHJldHVybiAoeCA+IHkpIC0gKHggPCB5KQoKX01pc21hdGNoID0gbmFtZWR0dXBsZSgnTWlzbWF0Y2gnLCAnYWN0dWFsIGV4cGVjdGVkIHZhbHVlJykKCmRlZiBfY291bnRfZGlmZl9hbGxfcHVycG9zZShhY3R1YWwsIGV4cGVjdGVkKToKICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInCiAgICAjIGVsZW1lbnRzIG5lZWQgbm90IGJlIGhhc2hhYmxlCiAgICBzLCB0ID0gbGlzdChhY3R1YWwpLCBsaXN0KGV4cGVjdGVkKQogICAgbSwgbiA9IGxlbihzKSwgbGVuKHQpCiAgICBOVUxMID0gb2JqZWN0KCkKICAgIHJlc3VsdCA9IFtdCiAgICBmb3IgaSwgZWxlbSBpbiBlbnVtZXJhdGUocyk6CiAgICAgICAgaWYgZWxlbSBpcyBOVUxMOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGNudF9zID0gY250X3QgPSAwCiAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSwgbSk6CiAgICAgICAgICAgIGlmIHNbal0gPT0gZWxlbToKICAgICAgICAgICAgICAgIGNudF9zICs9IDEKICAgICAgICAgICAgICAgIHNbal0gPSBOVUxMCiAgICAgICAgZm9yIGosIG90aGVyX2VsZW0gaW4gZW51bWVyYXRlKHQpOgogICAgICAgICAgICBpZiBvdGhlcl9lbGVtID09IGVsZW06CiAgICAgICAgICAgICAgICBjbnRfdCArPSAxCiAgICAgICAgICAgICAgICB0W2pdID0gTlVMTAogICAgICAgIGlmIGNudF9zICE9IGNudF90OgogICAgICAgICAgICBkaWZmID0gX01pc21hdGNoKGNudF9zLCBjbnRfdCwgZWxlbSkKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQoKICAgIGZvciBpLCBlbGVtIGluIGVudW1lcmF0ZSh0KToKICAgICAgICBpZiBlbGVtIGlzIE5VTEw6CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgY250X3QgPSAwCiAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSwgbik6CiAgICAgICAgICAgIGlmIHRbal0gPT0gZWxlbToKICAgICAgICAgICAgICAgIGNudF90ICs9IDEKICAgICAgICAgICAgICAgIHRbal0gPSBOVUxMCiAgICAgICAgZGlmZiA9IF9NaXNtYXRjaCgwLCBjbnRfdCwgZWxlbSkKICAgICAgICByZXN1bHQuYXBwZW5kKGRpZmYpCiAgICByZXR1cm4gcmVzdWx0CgpkZWYgX29yZGVyZWRfY291bnQoaXRlcmFibGUpOgogICAgJ1JldHVybiBkaWN0IG9mIGVsZW1lbnQgY291bnRzLCBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIGZpcnN0IHNlZW4nCiAgICBjID0gT3JkZXJlZERpY3QoKQogICAgZm9yIGVsZW0gaW4gaXRlcmFibGU6CiAgICAgICAgY1tlbGVtXSA9IGMuZ2V0KGVsZW0sIDApICsgMQogICAgcmV0dXJuIGMKCmRlZiBfY291bnRfZGlmZl9oYXNoYWJsZShhY3R1YWwsIGV4cGVjdGVkKToKICAgICdSZXR1cm5zIGxpc3Qgb2YgKGNudF9hY3QsIGNudF9leHAsIGVsZW0pIHRyaXBsZXMgd2hlcmUgdGhlIGNvdW50cyBkaWZmZXInCiAgICAjIGVsZW1lbnRzIG11c3QgYmUgaGFzaGFibGUKICAgIHMsIHQgPSBfb3JkZXJlZF9jb3VudChhY3R1YWwpLCBfb3JkZXJlZF9jb3VudChleHBlY3RlZCkKICAgIHJlc3VsdCA9IFtdCiAgICBmb3IgZWxlbSwgY250X3MgaW4gcy5pdGVtcygpOgogICAgICAgIGNudF90ID0gdC5nZXQoZWxlbSwgMCkKICAgICAgICBpZiBjbnRfcyAhPSBjbnRfdDoKICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaChjbnRfcywgY250X3QsIGVsZW0pCiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZGlmZikKICAgIGZvciBlbGVtLCBjbnRfdCBpbiB0Lml0ZW1zKCk6CiAgICAgICAgaWYgZWxlbSBub3QgaW4gczoKICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaCgwLCBjbnRfdCwgZWxlbSkKICAgICAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQogICAgcmV0dXJuIHJlc3VsdAo=',
'/Lib/unittest/__init__.py':'IiIiClB5dGhvbiB1bml0IHRlc3RpbmcgZnJhbWV3b3JrLCBiYXNlZCBvbiBFcmljaCBHYW1tYSdzIEpVbml0IGFuZCBLZW50IEJlY2sncwpTbWFsbHRhbGsgdGVzdGluZyBmcmFtZXdvcmsuCgpUaGlzIG1vZHVsZSBjb250YWlucyB0aGUgY29yZSBmcmFtZXdvcmsgY2xhc3NlcyB0aGF0IGZvcm0gdGhlIGJhc2lzIG9mCnNwZWNpZmljIHRlc3QgY2FzZXMgYW5kIHN1aXRlcyAoVGVzdENhc2UsIFRlc3RTdWl0ZSBldGMuKSwgYW5kIGFsc28gYQp0ZXh0LWJhc2VkIHV0aWxpdHkgY2xhc3MgZm9yIHJ1bm5pbmcgdGhlIHRlc3RzIGFuZCByZXBvcnRpbmcgdGhlIHJlc3VsdHMKIChUZXh0VGVzdFJ1bm5lcikuCgpTaW1wbGUgdXNhZ2U6CgogICAgaW1wb3J0IHVuaXR0ZXN0CgogICAgY2xhc3MgSW50ZWdlckFyaXRobWVudGljVGVzdENhc2UodW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgIGRlZiB0ZXN0QWRkKHNlbGYpOiAgIyMgdGVzdCBtZXRob2QgbmFtZXMgYmVnaW4gJ3Rlc3QqJwogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCgxICsgMiksIDMpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoMCArIDEsIDEpCiAgICAgICAgZGVmIHRlc3RNdWx0aXBseShzZWxmKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoMCAqIDEwKSwgMCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoNSAqIDgpLCA0MCkKCiAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgICAgIHVuaXR0ZXN0Lm1haW4oKQoKRnVydGhlciBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGJ1bmRsZWQgZG9jdW1lbnRhdGlvbiwgYW5kIGZyb20KCiAgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3VuaXR0ZXN0Lmh0bWwKCkNvcHlyaWdodCAoYykgMTk5OS0yMDAzIFN0ZXZlIFB1cmNlbGwKQ29weXJpZ2h0IChjKSAyMDAzLTIwMTAgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24KVGhpcyBtb2R1bGUgaXMgZnJlZSBzb2Z0d2FyZSwgYW5kIHlvdSBtYXkgcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUHl0aG9uIGl0c2VsZiwgc28gbG9uZyBhcyB0aGlzIGNvcHlyaWdodCBtZXNzYWdlCmFuZCBkaXNjbGFpbWVyIGFyZSByZXRhaW5lZCBpbiB0aGVpciBvcmlnaW5hbCBmb3JtLgoKSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgVE8gQU5ZIFBBUlRZIEZPUiBESVJFQ1QsIElORElSRUNULApTUEVDSUFMLCBJTkNJREVOVEFMLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhFIFVTRSBPRgpUSElTIENPREUsIEVWRU4gSUYgVEhFIEFVVEhPUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNICkRBTUFHRS4KClRIRSBBVVRIT1IgU1BFQ0lGSUNBTExZIERJU0NMQUlNUyBBTlkgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UCkxJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBClBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRIRSBDT0RFIFBST1ZJREVEIEhFUkVVTkRFUiBJUyBPTiBBTiAiQVMgSVMiIEJBU0lTLApBTkQgVEhFUkUgSVMgTk8gT0JMSUdBVElPTiBXSEFUU09FVkVSIFRPIFBST1ZJREUgTUFJTlRFTkFOQ0UsClNVUFBPUlQsIFVQREFURVMsIEVOSEFOQ0VNRU5UUywgT1IgTU9ESUZJQ0FUSU9OUy4KIiIiCgpfX2FsbF9fID0gWydUZXN0UmVzdWx0JywgJ1Rlc3RDYXNlJywgJ1Rlc3RTdWl0ZScsCiAgICAgICAgICAgJ1RleHRUZXN0UnVubmVyJywgJ1Rlc3RMb2FkZXInLCAnRnVuY3Rpb25UZXN0Q2FzZScsICdtYWluJywKICAgICAgICAgICAnZGVmYXVsdFRlc3RMb2FkZXInLCAnU2tpcFRlc3QnLCAnc2tpcCcsICdza2lwSWYnLCAnc2tpcFVubGVzcycsCiAgICAgICAgICAgJ2V4cGVjdGVkRmFpbHVyZScsICdUZXh0VGVzdFJlc3VsdCcsICdpbnN0YWxsSGFuZGxlcicsCiAgICAgICAgICAgJ3JlZ2lzdGVyUmVzdWx0JywgJ3JlbW92ZVJlc3VsdCcsICdyZW1vdmVIYW5kbGVyJ10KCiMgRXhwb3NlIG9ic29sZXRlIGZ1bmN0aW9ucyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkKX19hbGxfXy5leHRlbmQoWydnZXRUZXN0Q2FzZU5hbWVzJywgJ21ha2VTdWl0ZScsICdmaW5kVGVzdENhc2VzJ10pCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKZnJvbSAucmVzdWx0IGltcG9ydCBUZXN0UmVzdWx0CmZyb20gLmNhc2UgaW1wb3J0IChUZXN0Q2FzZSwgRnVuY3Rpb25UZXN0Q2FzZSwgU2tpcFRlc3QsIHNraXAsIHNraXBJZiwKICAgICAgICAgICAgICAgICAgIHNraXBVbmxlc3MsIGV4cGVjdGVkRmFpbHVyZSkKZnJvbSAuc3VpdGUgaW1wb3J0IEJhc2VUZXN0U3VpdGUsIFRlc3RTdWl0ZQpmcm9tIC5sb2FkZXIgaW1wb3J0IChUZXN0TG9hZGVyLCBkZWZhdWx0VGVzdExvYWRlciwgbWFrZVN1aXRlLCBnZXRUZXN0Q2FzZU5hbWVzLAogICAgICAgICAgICAgICAgICAgICBmaW5kVGVzdENhc2VzKQpmcm9tIC5tYWluIGltcG9ydCBUZXN0UHJvZ3JhbSwgbWFpbgpmcm9tIC5ydW5uZXIgaW1wb3J0IFRleHRUZXN0UnVubmVyLCBUZXh0VGVzdFJlc3VsdApmcm9tIC5zaWduYWxzIGltcG9ydCBpbnN0YWxsSGFuZGxlciwgcmVnaXN0ZXJSZXN1bHQsIHJlbW92ZVJlc3VsdCwgcmVtb3ZlSGFuZGxlcgoKIyBkZXByZWNhdGVkCl9UZXh0VGVzdFJlc3VsdCA9IFRleHRUZXN0UmVzdWx0Cg==',
'/Lib/unittest/__main__.py':'IiIiTWFpbiBlbnRyeSBwb2ludCIiIgoKaW1wb3J0IHN5cwppZiBzeXMuYXJndlswXS5lbmRzd2l0aCgiX19tYWluX18ucHkiKToKICAgIHN5cy5hcmd2WzBdID0gInB5dGhvbiAtbSB1bml0dGVzdCIKCl9fdW5pdHRlc3QgPSBUcnVlCgpmcm9tIC5tYWluIGltcG9ydCBtYWluLCBUZXN0UHJvZ3JhbSwgVVNBR0VfQVNfTUFJTgpUZXN0UHJvZ3JhbS5VU0FHRSA9IFVTQUdFX0FTX01BSU4KCm1haW4obW9kdWxlPU5vbmUpCg==',
'/Lib/unittest/test/dummy.py':'IyBFbXB0eSBtb2R1bGUgZm9yIHRlc3RpbmcgdGhlIGxvYWRpbmcgb2YgbW9kdWxlcwo=',
'/Lib/unittest/test/support.py':'aW1wb3J0IHVuaXR0ZXN0CgoKY2xhc3MgVGVzdEVxdWFsaXR5KG9iamVjdCk6CiAgICAiIiJVc2VkIGFzIGEgbWl4aW4gZm9yIFRlc3RDYXNlIiIiCgogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2VxX18gaW1wbGVtZW50YXRpb24KICAgIGRlZiB0ZXN0X2VxKHNlbGYpOgogICAgICAgIGZvciBvYmpfMSwgb2JqXzIgaW4gc2VsZi5lcV9wYWlyczoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChvYmpfMSwgb2JqXzIpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwob2JqXzIsIG9ial8xKQoKICAgICMgQ2hlY2sgZm9yIGEgdmFsaWQgX19uZV9fIGltcGxlbWVudGF0aW9uCiAgICBkZWYgdGVzdF9uZShzZWxmKToKICAgICAgICBmb3Igb2JqXzEsIG9ial8yIGluIHNlbGYubmVfcGFpcnM6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwob2JqXzEsIG9ial8yKQogICAgICAgICAgICBzZWxmLmFzc2VydE5vdEVxdWFsKG9ial8yLCBvYmpfMSkKCmNsYXNzIFRlc3RIYXNoaW5nKG9iamVjdCk6CiAgICAiIiJVc2VkIGFzIGEgbWl4aW4gZm9yIFRlc3RDYXNlIiIiCgogICAgIyBDaGVjayBmb3IgYSB2YWxpZCBfX2hhc2hfXyBpbXBsZW1lbnRhdGlvbgogICAgZGVmIHRlc3RfaGFzaChzZWxmKToKICAgICAgICBmb3Igb2JqXzEsIG9ial8yIGluIHNlbGYuZXFfcGFpcnM6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIG5vdCBoYXNoKG9ial8xKSA9PSBoYXNoKG9ial8yKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIiVyIGFuZCAlciBkbyBub3QgaGFzaCBlcXVhbCIgJSAob2JqXzEsIG9ial8yKSkKICAgICAgICAgICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgICAgICAgICAgcmFpc2UKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgc2VsZi5mYWlsKCJQcm9ibGVtIGhhc2hpbmcgJXIgYW5kICVyOiAlcyIgJSAob2JqXzEsIG9ial8yLCBlKSkKCiAgICAgICAgZm9yIG9ial8xLCBvYmpfMiBpbiBzZWxmLm5lX3BhaXJzOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBpZiBoYXNoKG9ial8xKSA9PSBoYXNoKG9ial8yKToKICAgICAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIiVzIGFuZCAlcyBoYXNoIGVxdWFsLCBidXQgc2hvdWxkbid0IiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvYmpfMSwgb2JqXzIpKQogICAgICAgICAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBzZWxmLmZhaWwoIlByb2JsZW0gaGFzaGluZyAlcyBhbmQgJXM6ICVzIiAlIChvYmpfMSwgb2JqXzIsIGUpKQoKCmNsYXNzIExvZ2dpbmdSZXN1bHQodW5pdHRlc3QuVGVzdFJlc3VsdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgbG9nKToKICAgICAgICBzZWxmLl9ldmVudHMgPSBsb2cKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKCiAgICBkZWYgc3RhcnRUZXN0KHNlbGYsIHRlc3QpOgogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ3N0YXJ0VGVzdCcpCiAgICAgICAgc3VwZXIoKS5zdGFydFRlc3QodGVzdCkKCiAgICBkZWYgc3RhcnRUZXN0UnVuKHNlbGYpOgogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ3N0YXJ0VGVzdFJ1bicpCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuc3RhcnRUZXN0UnVuKCkKCiAgICBkZWYgc3RvcFRlc3Qoc2VsZiwgdGVzdCk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RvcFRlc3QnKQogICAgICAgIHN1cGVyKCkuc3RvcFRlc3QodGVzdCkKCiAgICBkZWYgc3RvcFRlc3RSdW4oc2VsZik6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnc3RvcFRlc3RSdW4nKQogICAgICAgIHN1cGVyKExvZ2dpbmdSZXN1bHQsIHNlbGYpLnN0b3BUZXN0UnVuKCkKCiAgICBkZWYgYWRkRmFpbHVyZShzZWxmLCAqYXJncyk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRmFpbHVyZScpCiAgICAgICAgc3VwZXIoKS5hZGRGYWlsdXJlKCphcmdzKQoKICAgIGRlZiBhZGRTdWNjZXNzKHNlbGYsICphcmdzKToKICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRTdWNjZXNzJykKICAgICAgICBzdXBlcihMb2dnaW5nUmVzdWx0LCBzZWxmKS5hZGRTdWNjZXNzKCphcmdzKQoKICAgIGRlZiBhZGRFcnJvcihzZWxmLCAqYXJncyk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRXJyb3InKQogICAgICAgIHN1cGVyKCkuYWRkRXJyb3IoKmFyZ3MpCgogICAgZGVmIGFkZFNraXAoc2VsZiwgKmFyZ3MpOgogICAgICAgIHNlbGYuX2V2ZW50cy5hcHBlbmQoJ2FkZFNraXAnKQogICAgICAgIHN1cGVyKExvZ2dpbmdSZXN1bHQsIHNlbGYpLmFkZFNraXAoKmFyZ3MpCgogICAgZGVmIGFkZEV4cGVjdGVkRmFpbHVyZShzZWxmLCAqYXJncyk6CiAgICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZCgnYWRkRXhwZWN0ZWRGYWlsdXJlJykKICAgICAgICBzdXBlcihMb2dnaW5nUmVzdWx0LCBzZWxmKS5hZGRFeHBlY3RlZEZhaWx1cmUoKmFyZ3MpCgogICAgZGVmIGFkZFVuZXhwZWN0ZWRTdWNjZXNzKHNlbGYsICphcmdzKToKICAgICAgICBzZWxmLl9ldmVudHMuYXBwZW5kKCdhZGRVbmV4cGVjdGVkU3VjY2VzcycpCiAgICAgICAgc3VwZXIoTG9nZ2luZ1Jlc3VsdCwgc2VsZikuYWRkVW5leHBlY3RlZFN1Y2Nlc3MoKmFyZ3MpCgoKY2xhc3MgUmVzdWx0V2l0aE5vU3RhcnRUZXN0UnVuU3RvcFRlc3RSdW4ob2JqZWN0KToKICAgICIiIkFuIG9iamVjdCBob25vdXJpbmcgVGVzdFJlc3VsdCBiZWZvcmUgc3RhcnRUZXN0UnVuL3N0b3BUZXN0UnVuLiIiIgoKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLmZhaWx1cmVzID0gW10KICAgICAgICBzZWxmLmVycm9ycyA9IFtdCiAgICAgICAgc2VsZi50ZXN0c1J1biA9IDAKICAgICAgICBzZWxmLnNraXBwZWQgPSBbXQogICAgICAgIHNlbGYuZXhwZWN0ZWRGYWlsdXJlcyA9IFtdCiAgICAgICAgc2VsZi51bmV4cGVjdGVkU3VjY2Vzc2VzID0gW10KICAgICAgICBzZWxmLnNob3VsZFN0b3AgPSBGYWxzZQoKICAgIGRlZiBzdGFydFRlc3Qoc2VsZiwgdGVzdCk6CiAgICAgICAgcGFzcwoKICAgIGRlZiBzdG9wVGVzdChzZWxmLCB0ZXN0KToKICAgICAgICBwYXNzCgogICAgZGVmIGFkZEVycm9yKHNlbGYsIHRlc3QpOgogICAgICAgIHBhc3MKCiAgICBkZWYgYWRkRmFpbHVyZShzZWxmLCB0ZXN0KToKICAgICAgICBwYXNzCgogICAgZGVmIGFkZFN1Y2Nlc3Moc2VsZiwgdGVzdCk6CiAgICAgICAgcGFzcwoKICAgIGRlZiB3YXNTdWNjZXNzZnVsKHNlbGYpOgogICAgICAgIHJldHVybiBUcnVlCg==',
'/Lib/unittest/test/test_assertions.py':'',
'/Lib/unittest/test/test_break.py':'',
'/Lib/unittest/test/test_case.py':'',
'/Lib/unittest/test/test_discovery.py':'',
'/Lib/unittest/test/test_functiontestcase.py':'aW1wb3J0IHVuaXR0ZXN0Cgpmcm9tIC5zdXBwb3J0IGltcG9ydCBMb2dnaW5nUmVzdWx0CgoKY2xhc3MgVGVzdF9GdW5jdGlvblRlc3RDYXNlKHVuaXR0ZXN0LlRlc3RDYXNlKToKCiAgICAjICJSZXR1cm4gdGhlIG51bWJlciBvZiB0ZXN0cyByZXByZXNlbnRlZCBieSB0aGUgdGhpcyB0ZXN0IG9iamVjdC4gRm9yCiAgICAjIFRlc3RDYXNlIGluc3RhbmNlcywgdGhpcyB3aWxsIGFsd2F5cyBiZSAxIgogICAgZGVmIHRlc3RfY291bnRUZXN0Q2FzZXMoc2VsZik6CiAgICAgICAgdGVzdCA9IHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3QuY291bnRUZXN0Q2FzZXMoKSwgMSkKCiAgICAjICJXaGVuIGEgc2V0VXAoKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlIHRlc3QgcnVubmVyIHdpbGwgcnVuIHRoYXQgbWV0aG9kCiAgICAjIHByaW9yIHRvIGVhY2ggdGVzdC4gTGlrZXdpc2UsIGlmIGEgdGVhckRvd24oKSBtZXRob2QgaXMgZGVmaW5lZCwgdGhlCiAgICAjIHRlc3QgcnVubmVyIHdpbGwgaW52b2tlIHRoYXQgbWV0aG9kIGFmdGVyIGVhY2ggdGVzdC4gSW4gdGhlIGV4YW1wbGUsCiAgICAjIHNldFVwKCkgd2FzIHVzZWQgdG8gY3JlYXRlIGEgZnJlc2ggc2VxdWVuY2UgZm9yIGVhY2ggdGVzdC4iCiAgICAjCiAgICAjIE1ha2Ugc3VyZSB0aGUgcHJvcGVyIGNhbGwgb3JkZXIgaXMgbWFpbnRhaW5lZCwgZXZlbiBpZiBzZXRVcCgpIHJhaXNlcwogICAgIyBhbiBleGNlcHRpb24uCiAgICBkZWYgdGVzdF9ydW5fY2FsbF9vcmRlcl9fZXJyb3JfaW5fc2V0VXAoc2VsZik6CiAgICAgICAgZXZlbnRzID0gW10KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykKCiAgICAgICAgZGVmIHNldFVwKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykKICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKCdyYWlzZWQgYnkgc2V0VXAnKQoKICAgICAgICBkZWYgdGVzdCgpOgogICAgICAgICAgICBldmVudHMuYXBwZW5kKCd0ZXN0JykKCiAgICAgICAgZGVmIHRlYXJEb3duKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3RlYXJEb3duJykKCiAgICAgICAgZXhwZWN0ZWQgPSBbJ3N0YXJ0VGVzdCcsICdzZXRVcCcsICdhZGRFcnJvcicsICdzdG9wVGVzdCddCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQoKICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QKICAgICMgcHJpb3IgdG8gZWFjaCB0ZXN0LiBMaWtld2lzZSwgaWYgYSB0ZWFyRG93bigpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUKICAgICMgdGVzdCBydW5uZXIgd2lsbCBpbnZva2UgdGhhdCBtZXRob2QgYWZ0ZXIgZWFjaCB0ZXN0LiBJbiB0aGUgZXhhbXBsZSwKICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiIKICAgICMKICAgICMgTWFrZSBzdXJlIHRoZSBwcm9wZXIgY2FsbCBvcmRlciBpcyBtYWludGFpbmVkLCBldmVuIGlmIHRoZSB0ZXN0IHJhaXNlcwogICAgIyBhbiBlcnJvciAoYXMgb3Bwb3NlZCB0byBhIGZhaWx1cmUpLgogICAgZGVmIHRlc3RfcnVuX2NhbGxfb3JkZXJfX2Vycm9yX2luX3Rlc3Qoc2VsZik6CiAgICAgICAgZXZlbnRzID0gW10KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykKCiAgICAgICAgZGVmIHNldFVwKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykKCiAgICAgICAgZGVmIHRlc3QoKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVzdCcpCiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigncmFpc2VkIGJ5IHRlc3QnKQoKICAgICAgICBkZWYgdGVhckRvd24oKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQoKICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLAogICAgICAgICAgICAgICAgICAgICdhZGRFcnJvcicsICdzdG9wVGVzdCddCiAgICAgICAgdW5pdHRlc3QuRnVuY3Rpb25UZXN0Q2FzZSh0ZXN0LCBzZXRVcCwgdGVhckRvd24pLnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQoKICAgICMgIldoZW4gYSBzZXRVcCgpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUgdGVzdCBydW5uZXIgd2lsbCBydW4gdGhhdCBtZXRob2QKICAgICMgcHJpb3IgdG8gZWFjaCB0ZXN0LiBMaWtld2lzZSwgaWYgYSB0ZWFyRG93bigpIG1ldGhvZCBpcyBkZWZpbmVkLCB0aGUKICAgICMgdGVzdCBydW5uZXIgd2lsbCBpbnZva2UgdGhhdCBtZXRob2QgYWZ0ZXIgZWFjaCB0ZXN0LiBJbiB0aGUgZXhhbXBsZSwKICAgICMgc2V0VXAoKSB3YXMgdXNlZCB0byBjcmVhdGUgYSBmcmVzaCBzZXF1ZW5jZSBmb3IgZWFjaCB0ZXN0LiIKICAgICMKICAgICMgTWFrZSBzdXJlIHRoZSBwcm9wZXIgY2FsbCBvcmRlciBpcyBtYWludGFpbmVkLCBldmVuIGlmIHRoZSB0ZXN0IHNpZ25hbHMKICAgICMgYSBmYWlsdXJlIChhcyBvcHBvc2VkIHRvIGFuIGVycm9yKS4KICAgIGRlZiB0ZXN0X3J1bl9jYWxsX29yZGVyX19mYWlsdXJlX2luX3Rlc3Qoc2VsZik6CiAgICAgICAgZXZlbnRzID0gW10KICAgICAgICByZXN1bHQgPSBMb2dnaW5nUmVzdWx0KGV2ZW50cykKCiAgICAgICAgZGVmIHNldFVwKCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3NldFVwJykKCiAgICAgICAgZGVmIHRlc3QoKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVzdCcpCiAgICAgICAgICAgIHNlbGYuZmFpbCgncmFpc2VkIGJ5IHRlc3QnKQoKICAgICAgICBkZWYgdGVhckRvd24oKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQoKICAgICAgICBleHBlY3RlZCA9IFsnc3RhcnRUZXN0JywgJ3NldFVwJywgJ3Rlc3QnLCAndGVhckRvd24nLAogICAgICAgICAgICAgICAgICAgICdhZGRGYWlsdXJlJywgJ3N0b3BUZXN0J10KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgZXhwZWN0ZWQpCgogICAgIyAiV2hlbiBhIHNldFVwKCkgbWV0aG9kIGlzIGRlZmluZWQsIHRoZSB0ZXN0IHJ1bm5lciB3aWxsIHJ1biB0aGF0IG1ldGhvZAogICAgIyBwcmlvciB0byBlYWNoIHRlc3QuIExpa2V3aXNlLCBpZiBhIHRlYXJEb3duKCkgbWV0aG9kIGlzIGRlZmluZWQsIHRoZQogICAgIyB0ZXN0IHJ1bm5lciB3aWxsIGludm9rZSB0aGF0IG1ldGhvZCBhZnRlciBlYWNoIHRlc3QuIEluIHRoZSBleGFtcGxlLAogICAgIyBzZXRVcCgpIHdhcyB1c2VkIHRvIGNyZWF0ZSBhIGZyZXNoIHNlcXVlbmNlIGZvciBlYWNoIHRlc3QuIgogICAgIwogICAgIyBNYWtlIHN1cmUgdGhlIHByb3BlciBjYWxsIG9yZGVyIGlzIG1haW50YWluZWQsIGV2ZW4gaWYgdGVhckRvd24oKSByYWlzZXMKICAgICMgYW4gZXhjZXB0aW9uLgogICAgZGVmIHRlc3RfcnVuX2NhbGxfb3JkZXJfX2Vycm9yX2luX3RlYXJEb3duKHNlbGYpOgogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCgogICAgICAgIGRlZiBzZXRVcCgpOgogICAgICAgICAgICBldmVudHMuYXBwZW5kKCdzZXRVcCcpCgogICAgICAgIGRlZiB0ZXN0KCk6CiAgICAgICAgICAgIGV2ZW50cy5hcHBlbmQoJ3Rlc3QnKQoKICAgICAgICBkZWYgdGVhckRvd24oKToKICAgICAgICAgICAgZXZlbnRzLmFwcGVuZCgndGVhckRvd24nKQogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoJ3JhaXNlZCBieSB0ZWFyRG93bicpCgogICAgICAgIGV4cGVjdGVkID0gWydzdGFydFRlc3QnLCAnc2V0VXAnLCAndGVzdCcsICd0ZWFyRG93bicsICdhZGRFcnJvcicsCiAgICAgICAgICAgICAgICAgICAgJ3N0b3BUZXN0J10KICAgICAgICB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKHRlc3QsIHNldFVwLCB0ZWFyRG93bikucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywgZXhwZWN0ZWQpCgogICAgIyAiUmV0dXJuIGEgc3RyaW5nIGlkZW50aWZ5aW5nIHRoZSBzcGVjaWZpYyB0ZXN0IGNhc2UuIgogICAgIwogICAgIyBCZWNhdXNlIG9mIHRoZSB2YWd1ZSBuYXR1cmUgb2YgdGhlIGRvY3MsIEknbSBub3QgZ29pbmcgdG8gbG9jayB0aGlzCiAgICAjIHRlc3QgZG93biB0b28gbXVjaC4gUmVhbGx5IGFsbCB0aGF0IGNhbiBiZSBhc3NlcnRlZCBpcyB0aGF0IHRoZSBpZCgpCiAgICAjIHdpbGwgYmUgYSBzdHJpbmcgKGVpdGhlciA4LWJ5dGUgb3IgdW5pY29kZSAtLSBhZ2FpbiwgYmVjYXVzZSB0aGUgZG9jcwogICAgIyBqdXN0IHNheSAic3RyaW5nIikKICAgIGRlZiB0ZXN0X2lkKHNlbGYpOgogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSkKCiAgICAgICAgc2VsZi5hc3NlcnRJc0luc3RhbmNlKHRlc3QuaWQoKSwgc3RyKQoKICAgICMgIlJldHVybnMgYSBvbmUtbGluZSBkZXNjcmlwdGlvbiBvZiB0aGUgdGVzdCwgb3IgTm9uZSBpZiBubyBkZXNjcmlwdGlvbgogICAgIyBoYXMgYmVlbiBwcm92aWRlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucwogICAgIyB0aGUgZmlyc3QgbGluZSBvZiB0aGUgdGVzdCBtZXRob2QncyBkb2NzdHJpbmcsIGlmIGF2YWlsYWJsZSwgb3IgTm9uZS4iCiAgICBkZWYgdGVzdF9zaG9ydERlc2NyaXB0aW9uX19ub19kb2NzdHJpbmcoc2VsZik6CiAgICAgICAgdGVzdCA9IHVuaXR0ZXN0LkZ1bmN0aW9uVGVzdENhc2UobGFtYmRhOiBOb25lKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHRlc3Quc2hvcnREZXNjcmlwdGlvbigpLCBOb25lKQoKICAgICMgIlJldHVybnMgYSBvbmUtbGluZSBkZXNjcmlwdGlvbiBvZiB0aGUgdGVzdCwgb3IgTm9uZSBpZiBubyBkZXNjcmlwdGlvbgogICAgIyBoYXMgYmVlbiBwcm92aWRlZC4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucwogICAgIyB0aGUgZmlyc3QgbGluZSBvZiB0aGUgdGVzdCBtZXRob2QncyBkb2NzdHJpbmcsIGlmIGF2YWlsYWJsZSwgb3IgTm9uZS4iCiAgICBkZWYgdGVzdF9zaG9ydERlc2NyaXB0aW9uX19zaW5nbGVsaW5lX2RvY3N0cmluZyhzZWxmKToKICAgICAgICBkZXNjID0gInRoaXMgdGVzdHMgZm9vIgogICAgICAgIHRlc3QgPSB1bml0dGVzdC5GdW5jdGlvblRlc3RDYXNlKGxhbWJkYTogTm9uZSwgZGVzY3JpcHRpb249ZGVzYykKCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCh0ZXN0LnNob3J0RGVzY3JpcHRpb24oKSwgInRoaXMgdGVzdHMgZm9vIikK',
'/Lib/unittest/test/test_loader.py':'',
'/Lib/unittest/test/test_program.py':'',
'/Lib/unittest/test/test_result.py':'',
'/Lib/unittest/test/test_runner.py':'',
'/Lib/unittest/test/test_setups.py':'',
'/Lib/unittest/test/test_skipping.py':'aW1wb3J0IHVuaXR0ZXN0Cgpmcm9tIC5zdXBwb3J0IGltcG9ydCBMb2dnaW5nUmVzdWx0CgoKY2xhc3MgVGVzdF9UZXN0U2tpcHBpbmcodW5pdHRlc3QuVGVzdENhc2UpOgoKICAgIGRlZiB0ZXN0X3NraXBwaW5nKHNlbGYpOgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIGRlZiB0ZXN0X3NraXBfbWUoc2VsZik6CiAgICAgICAgICAgICAgICBzZWxmLnNraXBUZXN0KCJza2lwIikKICAgICAgICBldmVudHMgPSBbXQogICAgICAgIHJlc3VsdCA9IExvZ2dpbmdSZXN1bHQoZXZlbnRzKQogICAgICAgIHRlc3QgPSBGb28oInRlc3Rfc2tpcF9tZSIpCiAgICAgICAgdGVzdC5ydW4ocmVzdWx0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZXZlbnRzLCBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0J10pCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0LCAic2tpcCIpXSkKCiAgICAgICAgIyBUcnkgbGV0dGluZyBzZXRVcCBza2lwIHRoZSB0ZXN0IG5vdy4KICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBkZWYgc2V0VXAoc2VsZik6CiAgICAgICAgICAgICAgICBzZWxmLnNraXBUZXN0KCJ0ZXN0aW5nIikKICAgICAgICAgICAgZGVmIHRlc3Rfbm90aGluZyhzZWxmKTogcGFzcwogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9ub3RoaW5nIikKICAgICAgICB0ZXN0LnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIFsnc3RhcnRUZXN0JywgJ2FkZFNraXAnLCAnc3RvcFRlc3QnXSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnRlc3RzUnVuLCAxKQoKICAgIGRlZiB0ZXN0X3NraXBwaW5nX2RlY29yYXRvcnMoc2VsZik6CiAgICAgICAgb3BfdGFibGUgPSAoKHVuaXR0ZXN0LnNraXBVbmxlc3MsIEZhbHNlLCBUcnVlKSwKICAgICAgICAgICAgICAgICAgICAodW5pdHRlc3Quc2tpcElmLCBUcnVlLCBGYWxzZSkpCiAgICAgICAgZm9yIGRlY28sIGRvX3NraXAsIGRvbnRfc2tpcCBpbiBvcF90YWJsZToKICAgICAgICAgICAgY2xhc3MgRm9vKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICAgICAgICAgICAgIEBkZWNvKGRvX3NraXAsICJ0ZXN0aW5nIikKICAgICAgICAgICAgICAgIGRlZiB0ZXN0X3NraXAoc2VsZik6IHBhc3MKCiAgICAgICAgICAgICAgICBAZGVjbyhkb250X3NraXAsICJ0ZXN0aW5nIikKICAgICAgICAgICAgICAgIGRlZiB0ZXN0X2RvbnRfc2tpcChzZWxmKTogcGFzcwogICAgICAgICAgICB0ZXN0X2RvX3NraXAgPSBGb28oInRlc3Rfc2tpcCIpCiAgICAgICAgICAgIHRlc3RfZG9udF9za2lwID0gRm9vKCJ0ZXN0X2RvbnRfc2tpcCIpCiAgICAgICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKFt0ZXN0X2RvX3NraXAsIHRlc3RfZG9udF9za2lwXSkKICAgICAgICAgICAgZXZlbnRzID0gW10KICAgICAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobGVuKHJlc3VsdC5za2lwcGVkKSwgMSkKICAgICAgICAgICAgZXhwZWN0ZWQgPSBbJ3N0YXJ0VGVzdCcsICdhZGRTa2lwJywgJ3N0b3BUZXN0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0VGVzdCcsICdhZGRTdWNjZXNzJywgJ3N0b3BUZXN0J10KICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChldmVudHMsIGV4cGVjdGVkKQogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC50ZXN0c1J1biwgMikKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0X2RvX3NraXAsICJ0ZXN0aW5nIildKQogICAgICAgICAgICBzZWxmLmFzc2VydFRydWUocmVzdWx0Lndhc1N1Y2Nlc3NmdWwoKSkKCiAgICBkZWYgdGVzdF9za2lwX2NsYXNzKHNlbGYpOgogICAgICAgIEB1bml0dGVzdC5za2lwKCJ0ZXN0aW5nIikKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOgogICAgICAgICAgICAgICAgcmVjb3JkLmFwcGVuZCgxKQogICAgICAgIHJlY29yZCA9IFtdCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikKICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pCiAgICAgICAgc3VpdGUucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVjb3JkLCBbXSkKCiAgICBkZWYgdGVzdF9za2lwX25vbl91bml0dGVzdF9jbGFzcyhzZWxmKToKICAgICAgICBAdW5pdHRlc3Quc2tpcCgidGVzdGluZyIpCiAgICAgICAgY2xhc3MgTWl4aW46CiAgICAgICAgICAgIGRlZiB0ZXN0XzEoc2VsZik6CiAgICAgICAgICAgICAgICByZWNvcmQuYXBwZW5kKDEpCiAgICAgICAgY2xhc3MgRm9vKE1peGluLCB1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIHBhc3MKICAgICAgICByZWNvcmQgPSBbXQogICAgICAgIHJlc3VsdCA9IHVuaXR0ZXN0LlRlc3RSZXN1bHQoKQogICAgICAgIHRlc3QgPSBGb28oInRlc3RfMSIpCiAgICAgICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoW3Rlc3RdKQogICAgICAgIHN1aXRlLnJ1bihyZXN1bHQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQuc2tpcHBlZCwgWyh0ZXN0LCAidGVzdGluZyIpXSkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlY29yZCwgW10pCgogICAgZGVmIHRlc3RfZXhwZWN0ZWRfZmFpbHVyZShzZWxmKToKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICBAdW5pdHRlc3QuZXhwZWN0ZWRGYWlsdXJlCiAgICAgICAgICAgIGRlZiB0ZXN0X2RpZShzZWxmKToKICAgICAgICAgICAgICAgIHNlbGYuZmFpbCgiaGVscCBtZSEiKQogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9kaWUiKQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RhcnRUZXN0JywgJ2FkZEV4cGVjdGVkRmFpbHVyZScsICdzdG9wVGVzdCddKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LmV4cGVjdGVkRmFpbHVyZXNbMF1bMF0sIHRlc3QpCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKHJlc3VsdC53YXNTdWNjZXNzZnVsKCkpCgogICAgZGVmIHRlc3RfdW5leHBlY3RlZF9zdWNjZXNzKHNlbGYpOgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIEB1bml0dGVzdC5leHBlY3RlZEZhaWx1cmUKICAgICAgICAgICAgZGVmIHRlc3RfZGllKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgIGV2ZW50cyA9IFtdCiAgICAgICAgcmVzdWx0ID0gTG9nZ2luZ1Jlc3VsdChldmVudHMpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF9kaWUiKQogICAgICAgIHRlc3QucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGV2ZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgIFsnc3RhcnRUZXN0JywgJ2FkZFVuZXhwZWN0ZWRTdWNjZXNzJywgJ3N0b3BUZXN0J10pCiAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShyZXN1bHQuZmFpbHVyZXMpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChyZXN1bHQudW5leHBlY3RlZFN1Y2Nlc3NlcywgW3Rlc3RdKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShyZXN1bHQud2FzU3VjY2Vzc2Z1bCgpKQoKICAgIGRlZiB0ZXN0X3NraXBfZG9lc250X3J1bl9zZXR1cChzZWxmKToKICAgICAgICBjbGFzcyBGb28odW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgICAgICB3YXNTZXRVcCA9IEZhbHNlCiAgICAgICAgICAgIHdhc1Rvcm5Eb3duID0gRmFsc2UKICAgICAgICAgICAgZGVmIHNldFVwKHNlbGYpOgogICAgICAgICAgICAgICAgRm9vLndhc1NldFVwID0gVHJ1ZQogICAgICAgICAgICBkZWYgdG9ybkRvd24oc2VsZik6CiAgICAgICAgICAgICAgICBGb28ud2FzVG9ybkRvd24gPSBUcnVlCiAgICAgICAgICAgIEB1bml0dGVzdC5za2lwKCd0ZXN0aW5nJykKICAgICAgICAgICAgZGVmIHRlc3RfMShzZWxmKToKICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgcmVzdWx0ID0gdW5pdHRlc3QuVGVzdFJlc3VsdCgpCiAgICAgICAgdGVzdCA9IEZvbygidGVzdF8xIikKICAgICAgICBzdWl0ZSA9IHVuaXR0ZXN0LlRlc3RTdWl0ZShbdGVzdF0pCiAgICAgICAgc3VpdGUucnVuKHJlc3VsdCkKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHJlc3VsdC5za2lwcGVkLCBbKHRlc3QsICJ0ZXN0aW5nIildKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoRm9vLndhc1NldFVwKQogICAgICAgIHNlbGYuYXNzZXJ0RmFsc2UoRm9vLndhc1Rvcm5Eb3duKQoKICAgIGRlZiB0ZXN0X2RlY29yYXRlZF9za2lwKHNlbGYpOgogICAgICAgIGRlZiBkZWNvcmF0b3IoZnVuYyk6CiAgICAgICAgICAgIGRlZiBpbm5lcigqYSk6CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYygqYSkKICAgICAgICAgICAgcmV0dXJuIGlubmVyCgogICAgICAgIGNsYXNzIEZvbyh1bml0dGVzdC5UZXN0Q2FzZSk6CiAgICAgICAgICAgIEBkZWNvcmF0b3IKICAgICAgICAgICAgQHVuaXR0ZXN0LnNraXAoJ3Rlc3RpbmcnKQogICAgICAgICAgICBkZWYgdGVzdF8xKHNlbGYpOgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICByZXN1bHQgPSB1bml0dGVzdC5UZXN0UmVzdWx0KCkKICAgICAgICB0ZXN0ID0gRm9vKCJ0ZXN0XzEiKQogICAgICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKFt0ZXN0XSkKICAgICAgICBzdWl0ZS5ydW4ocmVzdWx0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LnNraXBwZWQsIFsodGVzdCwgInRlc3RpbmciKV0pCg==',
'/Lib/unittest/test/test_suite.py':'',
'/Lib/unittest/test/_test_warnings.py':'IyBoZWxwZXIgbW9kdWxlIGZvciB0ZXN0X3J1bm5lci5UZXN0X1RleHRUZXN0UnVubmVyLnRlc3Rfd2FybmluZ3MKCiIiIgpUaGlzIG1vZHVsZSBoYXMgYSBudW1iZXIgb2YgdGVzdHMgdGhhdCByYWlzZSBkaWZmZXJlbnQga2luZHMgb2Ygd2FybmluZ3MuCldoZW4gdGhlIHRlc3RzIGFyZSBydW4sIHRoZSB3YXJuaW5ncyBhcmUgY2F1Z2h0IGFuZCB0aGVpciBtZXNzYWdlcyBhcmUgcHJpbnRlZAp0byBzdGRvdXQuICBUaGlzIG1vZHVsZSBhbHNvIGFjY2VwdHMgYW4gYXJnIHRoYXQgaXMgdGhlbiBwYXNzZWQgdG8KdW5pdHRlc3QubWFpbiB0byBhZmZlY3QgdGhlIGJlaGF2aW9yIG9mIHdhcm5pbmdzLgpUZXN0X1RleHRUZXN0UnVubmVyLnRlc3Rfd2FybmluZ3MgZXhlY3V0ZXMgdGhpcyBzY3JpcHQgd2l0aCBkaWZmZXJlbnQKY29tYmluYXRpb25zIG9mIHdhcm5pbmdzIGFyZ3MgYW5kIC1XIGZsYWdzIGFuZCBjaGVjayB0aGF0IHRoZSBvdXRwdXQgaXMgY29ycmVjdC4KU2VlICMxMDUzNS4KIiIiCgppbXBvcnQgc3lzCmltcG9ydCB1bml0dGVzdAppbXBvcnQgd2FybmluZ3MKCmRlZiB3YXJuZnVuKCk6CiAgICB3YXJuaW5ncy53YXJuKCdydycsIFJ1bnRpbWVXYXJuaW5nKQoKY2xhc3MgVGVzdFdhcm5pbmdzKHVuaXR0ZXN0LlRlc3RDYXNlKToKICAgICMgdW5pdHRlc3Qgd2FybmluZ3Mgd2lsbCBiZSBwcmludGVkIGF0IG1vc3Qgb25jZSBwZXIgdHlwZSAobWF4IG9uZSBtZXNzYWdlCiAgICAjIGZvciB0aGUgZmFpbCogbWV0aG9kcywgYW5kIG9uZSBmb3IgdGhlIGFzc2VydCogbWV0aG9kcykKICAgIGRlZiB0ZXN0X2Fzc2VydChzZWxmKToKICAgICAgICBzZWxmLmFzc2VydEVxdWFscygyKzIsIDQpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbHMoMioyLCA0KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWxzKDIqKjIsIDQpCgogICAgZGVmIHRlc3RfZmFpbChzZWxmKToKICAgICAgICBzZWxmLmZhaWxVbmxlc3MoMSkKICAgICAgICBzZWxmLmZhaWxVbmxlc3MoVHJ1ZSkKCiAgICBkZWYgdGVzdF9vdGhlcl91bml0dGVzdChzZWxmKToKICAgICAgICBzZWxmLmFzc2VydEFsbW9zdEVxdWFsKDIrMiwgNCkKICAgICAgICBzZWxmLmFzc2VydE5vdEFsbW9zdEVxdWFsKDQrNCwgMikKCiAgICAjIHRoZXNlIHdhcm5pbmdzIGFyZSBub3JtYWxseSBzaWxlbmNlZCwgYnV0IHRoZXkgYXJlIHByaW50ZWQgaW4gdW5pdHRlc3QKICAgIGRlZiB0ZXN0X2RlcHJlY2F0aW9uKHNlbGYpOgogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2R3JywgRGVwcmVjYXRpb25XYXJuaW5nKQoKICAgIGRlZiB0ZXN0X2ltcG9ydChzZWxmKToKICAgICAgICB3YXJuaW5ncy53YXJuKCdpdycsIEltcG9ydFdhcm5pbmcpCiAgICAgICAgd2FybmluZ3Mud2FybignaXcnLCBJbXBvcnRXYXJuaW5nKQogICAgICAgIHdhcm5pbmdzLndhcm4oJ2l3JywgSW1wb3J0V2FybmluZykKCiAgICAjIHVzZXIgd2FybmluZ3Mgc2hvdWxkIGFsd2F5cyBiZSBwcmludGVkCiAgICBkZWYgdGVzdF93YXJuaW5nKHNlbGYpOgogICAgICAgIHdhcm5pbmdzLndhcm4oJ3V3JykKICAgICAgICB3YXJuaW5ncy53YXJuKCd1dycpCiAgICAgICAgd2FybmluZ3Mud2FybigndXcnKQoKICAgICMgdGhlc2Ugd2FybmluZ3MgY29tZSBmcm9tIHRoZSBzYW1lIHBsYWNlOyB0aGV5IHdpbGwgYmUgcHJpbnRlZAogICAgIyBvbmx5IG9uY2UgYnkgZGVmYXVsdCBvciB0aHJlZSB0aW1lcyBpZiB0aGUgJ2Fsd2F5cycgZmlsdGVyIGlzIHVzZWQKICAgIGRlZiB0ZXN0X2Z1bmN0aW9uKHNlbGYpOgoKICAgICAgICB3YXJuZnVuKCkKICAgICAgICB3YXJuZnVuKCkKICAgICAgICB3YXJuZnVuKCkKCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHdpdGggd2FybmluZ3MuY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpIGFzIHdzOgogICAgICAgICMgaWYgYW4gYXJnIGlzIHByb3ZpZGVkIHBhc3MgaXQgdG8gdW5pdHRlc3QubWFpbiBhcyAnd2FybmluZ3MnCiAgICAgICAgaWYgbGVuKHN5cy5hcmd2KSA9PSAyOgogICAgICAgICAgICB1bml0dGVzdC5tYWluKGV4aXQ9RmFsc2UsIHdhcm5pbmdzPXN5cy5hcmd2LnBvcCgpKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHVuaXR0ZXN0Lm1haW4oZXhpdD1GYWxzZSkKCiAgICAjIHByaW50IGFsbCB0aGUgd2FybmluZyBtZXNzYWdlcyBjb2xsZWN0ZWQKICAgIGZvciB3IGluIHdzOgogICAgICAgIHByaW50KHcubWVzc2FnZSkK',
'/Lib/unittest/test/__init__.py':'aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHVuaXR0ZXN0CgoKaGVyZSA9IG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykKbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXIKCmRlZiBzdWl0ZSgpOgogICAgc3VpdGUgPSB1bml0dGVzdC5UZXN0U3VpdGUoKQogICAgZm9yIGZuIGluIG9zLmxpc3RkaXIoaGVyZSk6CiAgICAgICAgaWYgZm4uc3RhcnRzd2l0aCgidGVzdCIpIGFuZCBmbi5lbmRzd2l0aCgiLnB5Iik6CiAgICAgICAgICAgIG1vZG5hbWUgPSAidW5pdHRlc3QudGVzdC4iICsgZm5bOi0zXQogICAgICAgICAgICBfX2ltcG9ydF9fKG1vZG5hbWUpCiAgICAgICAgICAgIG1vZHVsZSA9IHN5cy5tb2R1bGVzW21vZG5hbWVdCiAgICAgICAgICAgIHN1aXRlLmFkZFRlc3QobG9hZGVyLmxvYWRUZXN0c0Zyb21Nb2R1bGUobW9kdWxlKSkKICAgIHN1aXRlLmFkZFRlc3QobG9hZGVyLmxvYWRUZXN0c0Zyb21OYW1lKCd1bml0dGVzdC50ZXN0LnRlc3Rtb2NrJykpCiAgICByZXR1cm4gc3VpdGUKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgdW5pdHRlc3QubWFpbihkZWZhdWx0VGVzdD0ic3VpdGUiKQo=',
'/Lib/unittest/test/testmock/support.py':'aW1wb3J0IHN5cwoKZGVmIGlzX2luc3RhbmNlKG9iaiwga2xhc3MpOgogICAgIiIiVmVyc2lvbiBvZiBpc19pbnN0YW5jZSB0aGF0IGRvZXNuJ3QgYWNjZXNzIF9fY2xhc3NfXyIiIgogICAgcmV0dXJuIGlzc3ViY2xhc3ModHlwZShvYmopLCBrbGFzcykKCgpjbGFzcyBTb21lQ2xhc3Mob2JqZWN0KToKICAgIGNsYXNzX2F0dHJpYnV0ZSA9IE5vbmUKCiAgICBkZWYgd2liYmxlKHNlbGYpOgogICAgICAgIHBhc3MKCgpjbGFzcyBYKG9iamVjdCk6CiAgICBwYXNzCgoKZGVmIGV4YW1pbmVfd2FybmluZ3MoZnVuYyk6CiAgICBkZWYgd3JhcHBlcigpOgogICAgICAgIHdpdGggY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpIGFzIHdzOgogICAgICAgICAgICBmdW5jKHdzKQogICAgcmV0dXJuIHdyYXBwZXIK',
'/Lib/unittest/test/testmock/testcallable.py':'IyBDb3B5cmlnaHQgKEMpIDIwMDctMjAxMiBNaWNoYWVsIEZvb3JkICYgdGhlIG1vY2sgdGVhbQojIEUtbWFpbDogZnV6enltYW4gQVQgdm9pZHNwYWNlIERPVCBvcmcgRE9UIHVrCiMgaHR0cDovL3d3dy52b2lkc3BhY2Uub3JnLnVrL3B5dGhvbi9tb2NrLwoKaW1wb3J0IHVuaXR0ZXN0CmZyb20gdW5pdHRlc3QudGVzdC50ZXN0bW9jay5zdXBwb3J0IGltcG9ydCBpc19pbnN0YW5jZSwgWCwgU29tZUNsYXNzCgpmcm9tIHVuaXR0ZXN0Lm1vY2sgaW1wb3J0ICgKICAgIE1vY2ssIE1hZ2ljTW9jaywgTm9uQ2FsbGFibGVNYWdpY01vY2ssCiAgICBOb25DYWxsYWJsZU1vY2ssIHBhdGNoLCBjcmVhdGVfYXV0b3NwZWMsCiAgICBDYWxsYWJsZU1peGluCikKCgoKY2xhc3MgVGVzdENhbGxhYmxlKHVuaXR0ZXN0LlRlc3RDYXNlKToKCiAgICBkZWYgYXNzZXJ0Tm90Q2FsbGFibGUoc2VsZiwgbW9jayk6CiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2ssIE5vbkNhbGxhYmxlTWFnaWNNb2NrKSkKICAgICAgICBzZWxmLmFzc2VydEZhbHNlKGlzX2luc3RhbmNlKG1vY2ssIENhbGxhYmxlTWl4aW4pKQoKCiAgICBkZWYgdGVzdF9ub25fY2FsbGFibGUoc2VsZik6CiAgICAgICAgZm9yIG1vY2sgaW4gTm9uQ2FsbGFibGVNYWdpY01vY2soKSwgTm9uQ2FsbGFibGVNb2NrKCk6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykKICAgICAgICAgICAgc2VsZi5hc3NlcnRGYWxzZShoYXNhdHRyKG1vY2ssICdfX2NhbGxfXycpKQogICAgICAgICAgICBzZWxmLmFzc2VydEluKG1vY2suX19jbGFzc19fLl9fbmFtZV9fLCByZXByKG1vY2spKQoKCiAgICBkZWYgdGVzdF9oZWlyYXJjaHkoc2VsZik6CiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3MoTWFnaWNNb2NrLCBNb2NrKSkKICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNzdWJjbGFzcyhOb25DYWxsYWJsZU1hZ2ljTW9jaywgTm9uQ2FsbGFibGVNb2NrKSkKCgogICAgZGVmIHRlc3RfYXR0cmlidXRlcyhzZWxmKToKICAgICAgICBvbmUgPSBOb25DYWxsYWJsZU1vY2soKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUob25lLm9uZSksIE1vY2spKQoKICAgICAgICB0d28gPSBOb25DYWxsYWJsZU1hZ2ljTW9jaygpCiAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzc3ViY2xhc3ModHlwZSh0d28udHdvKSwgTWFnaWNNb2NrKSkKCgogICAgZGVmIHRlc3Rfc3ViY2xhc3NlcyhzZWxmKToKICAgICAgICBjbGFzcyBNb2NrU3ViKE1vY2spOgogICAgICAgICAgICBwYXNzCgogICAgICAgIG9uZSA9IE1vY2tTdWIoKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc3N1YmNsYXNzKHR5cGUob25lLm9uZSksIE1vY2tTdWIpKQoKICAgICAgICBjbGFzcyBNYWdpY1N1YihNYWdpY01vY2spOgogICAgICAgICAgICBwYXNzCgogICAgICAgIHR3byA9IE1hZ2ljU3ViKCkKICAgICAgICBzZWxmLmFzc2VydFRydWUoaXNzdWJjbGFzcyh0eXBlKHR3by50d28pLCBNYWdpY1N1YikpCgoKICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWMoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVRydWUpCiAgICAgICAgbW9jayA9IHBhdGNoZXIuc3RhcnQoKQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChwYXRjaGVyLnN0b3ApCgogICAgICAgIGluc3RhbmNlID0gbW9jaygpCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpCgogICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUoaW5zdGFuY2UpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBpbnN0YW5jZSkKCgogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19zZXQoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1UcnVlKQogICAgICAgIG1vY2sgPSBwYXRjaGVyLnN0YXJ0KCkKICAgICAgICBzZWxmLmFkZENsZWFudXAocGF0Y2hlci5zdG9wKQoKICAgICAgICBpbnN0YW5jZSA9IG1vY2soKQogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICBzZWxmLmFzc2VydE5vdENhbGxhYmxlKGluc3RhbmNlKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgaW5zdGFuY2UpCgoKICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWNfaW5zdGFuY2Uoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjPVgoKSkKICAgICAgICBtb2NrID0gcGF0Y2hlci5zdGFydCgpCiAgICAgICAgc2VsZi5hZGRDbGVhbnVwKHBhdGNoZXIuc3RvcCkKCiAgICAgICAgc2VsZi5hc3NlcnROb3RDYWxsYWJsZShtb2NrKQogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykKCgogICAgZGVmIHRlc3RfcGF0Y2hfc3BlY19zZXRfaW5zdGFuY2Uoc2VsZik6CiAgICAgICAgcGF0Y2hlciA9IHBhdGNoKCclcy5YJyAlIF9fbmFtZV9fLCBzcGVjX3NldD1YKCkpCiAgICAgICAgbW9jayA9IHBhdGNoZXIuc3RhcnQoKQogICAgICAgIHNlbGYuYWRkQ2xlYW51cChwYXRjaGVyLnN0b3ApCgogICAgICAgIHNlbGYuYXNzZXJ0Tm90Q2FsbGFibGUobW9jaykKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG1vY2spCgoKICAgIGRlZiB0ZXN0X3BhdGNoX3NwZWNfY2FsbGFibGVfY2xhc3Moc2VsZik6CiAgICAgICAgY2xhc3MgQ2FsbGFibGVYKFgpOgogICAgICAgICAgICBkZWYgX19jYWxsX18oc2VsZik6CiAgICAgICAgICAgICAgICBwYXNzCgogICAgICAgIGNsYXNzIFN1YihDYWxsYWJsZVgpOgogICAgICAgICAgICBwYXNzCgogICAgICAgIGNsYXNzIE11bHRpKFNvbWVDbGFzcywgU3ViKToKICAgICAgICAgICAgcGFzcwoKICAgICAgICBmb3IgYXJnIGluICdzcGVjJywgJ3NwZWNfc2V0JzoKICAgICAgICAgICAgZm9yIEtsYXNzIGluIENhbGxhYmxlWCwgU3ViLCBNdWx0aToKICAgICAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLlgnICUgX19uYW1lX18sICoqe2FyZzogS2xhc3N9KSBhcyBtb2NrOgogICAgICAgICAgICAgICAgICAgIGluc3RhbmNlID0gbW9jaygpCiAgICAgICAgICAgICAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgpCgogICAgICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShpc19pbnN0YW5jZShpbnN0YW5jZSwgTWFnaWNNb2NrKSkKICAgICAgICAgICAgICAgICAgICAjIGluaGVyaXRlZCBzcGVjCiAgICAgICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGdldGF0dHIsIGluc3RhbmNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmb29iYXJiYXonKQoKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpbnN0YW5jZSgpCiAgICAgICAgICAgICAgICAgICAgIyBpbnN0YW5jZSBpcyBjYWxsYWJsZSwgcmVzdWx0IGhhcyBubyBzcGVjCiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICAgICAgICAgICAgICByZXN1bHQoMywgMiwgMSkKICAgICAgICAgICAgICAgICAgICByZXN1bHQuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoMywgMiwgMSkKICAgICAgICAgICAgICAgICAgICByZXN1bHQuZm9vKDMsIDIsIDEpCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmZvby5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgzLCAyLCAxKQoKCiAgICBkZWYgdGVzdF9jcmVhdGVfYXV0b3BzZWMoc2VsZik6CiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhYKQogICAgICAgIGluc3RhbmNlID0gbW9jaygpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBpbnN0YW5jZSkKCiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhYKCkpCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoVHlwZUVycm9yLCBtb2NrKQoKCiAgICBkZWYgdGVzdF9jcmVhdGVfYXV0b3NwZWNfaW5zdGFuY2Uoc2VsZik6CiAgICAgICAgbW9jayA9IGNyZWF0ZV9hdXRvc3BlYyhTb21lQ2xhc3MsIGluc3RhbmNlPVRydWUpCgogICAgICAgIHNlbGYuYXNzZXJ0UmFpc2VzKFR5cGVFcnJvciwgbW9jaykKICAgICAgICBtb2NrLndpYmJsZSgpCiAgICAgICAgbW9jay53aWJibGUuYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoKQoKICAgICAgICBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IsIG1vY2sud2liYmxlLCAnc29tZScsICAnYXJncycpCg==',
'/Lib/unittest/test/testmock/testhelpers.py':'',
'/Lib/unittest/test/testmock/testmagicmethods.py':'',
'/Lib/unittest/test/testmock/testmock.py':'',
'/Lib/unittest/test/testmock/testpatch.py':'',
'/Lib/unittest/test/testmock/testsentinel.py':'aW1wb3J0IHVuaXR0ZXN0CmZyb20gdW5pdHRlc3QubW9jayBpbXBvcnQgc2VudGluZWwsIERFRkFVTFQKCgpjbGFzcyBTZW50aW5lbFRlc3QodW5pdHRlc3QuVGVzdENhc2UpOgoKICAgIGRlZiB0ZXN0U2VudGluZWxzKHNlbGYpOgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc2VudGluZWwud2hhdGV2ZXIsIHNlbnRpbmVsLndoYXRldmVyLAogICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbnRpbmVsIG5vdCBzdG9yZWQnKQogICAgICAgIHNlbGYuYXNzZXJ0Tm90RXF1YWwoc2VudGluZWwud2hhdGV2ZXIsIHNlbnRpbmVsLndoYXRldmVyZWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzZW50aW5lbCBzaG91bGQgYmUgdW5pcXVlJykKCgogICAgZGVmIHRlc3RTZW50aW5lbE5hbWUoc2VsZik6CiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzdHIoc2VudGluZWwud2hhdGV2ZXIpLCAnc2VudGluZWwud2hhdGV2ZXInLAogICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbnRpbmVsIG5hbWUgaW5jb3JyZWN0JykKCgogICAgZGVmIHRlc3RERUZBVUxUKHNlbGYpOgogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShERUZBVUxUIGlzIHNlbnRpbmVsLkRFRkFVTFQpCgogICAgZGVmIHRlc3RCYXNlcyhzZWxmKToKICAgICAgICAjIElmIHRoaXMgZG9lc24ndCByYWlzZSBhbiBBdHRyaWJ1dGVFcnJvciB0aGVuIGhlbHAobW9jaykgaXMgYnJva2VuCiAgICAgICAgc2VsZi5hc3NlcnRSYWlzZXMoQXR0cmlidXRlRXJyb3IsIGxhbWJkYTogc2VudGluZWwuX19iYXNlc19fKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICB1bml0dGVzdC5tYWluKCkK',
'/Lib/unittest/test/testmock/testwith.py':'aW1wb3J0IHVuaXR0ZXN0CmZyb20gd2FybmluZ3MgaW1wb3J0IGNhdGNoX3dhcm5pbmdzCgpmcm9tIHVuaXR0ZXN0LnRlc3QudGVzdG1vY2suc3VwcG9ydCBpbXBvcnQgaXNfaW5zdGFuY2UKZnJvbSB1bml0dGVzdC5tb2NrIGltcG9ydCBNYWdpY01vY2ssIE1vY2ssIHBhdGNoLCBzZW50aW5lbCwgbW9ja19vcGVuLCBjYWxsCgoKCnNvbWV0aGluZyAgPSBzZW50aW5lbC5Tb21ldGhpbmcKc29tZXRoaW5nX2Vsc2UgID0gc2VudGluZWwuU29tZXRoaW5nRWxzZQoKCgpjbGFzcyBXaXRoVGVzdCh1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnQoc2VsZik6CiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5Tb21ldGhpbmcyKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZzIsICJ1bnBhdGNoZWQiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpCgoKICAgIGRlZiB0ZXN0X3dpdGhfc3RhdGVtZW50X2V4Y2VwdGlvbihzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuU29tZXRoaW5nMik6CiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nMiwgInVucGF0Y2hlZCIpCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ3BvdycpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZmFpbCgicGF0Y2ggc3dhbGxvd2VkIGV4Y2VwdGlvbiIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfYXMoc2VsZik6CiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fKSBhcyBtb2NrX3NvbWV0aGluZzoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIG1vY2tfc29tZXRoaW5nLCAidW5wYXRjaGVkIikKICAgICAgICAgICAgc2VsZi5hc3NlcnRUcnVlKGlzX2luc3RhbmNlKG1vY2tfc29tZXRoaW5nLCBNYWdpY01vY2spLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInBhdGNoaW5nIHdyb25nIHR5cGUiKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpCgoKICAgIGRlZiB0ZXN0X3BhdGNoX29iamVjdF93aXRoX3N0YXRlbWVudChzZWxmKToKICAgICAgICBjbGFzcyBGb28ob2JqZWN0KToKICAgICAgICAgICAgc29tZXRoaW5nID0gJ2ZvbycKICAgICAgICBvcmlnaW5hbCA9IEZvby5zb21ldGhpbmcKICAgICAgICB3aXRoIHBhdGNoLm9iamVjdChGb28sICdzb21ldGhpbmcnKToKICAgICAgICAgICAgc2VsZi5hc3NlcnROb3RFcXVhbChGb28uc29tZXRoaW5nLCBvcmlnaW5hbCwgInVucGF0Y2hlZCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChGb28uc29tZXRoaW5nLCBvcmlnaW5hbCkKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfbmVzdGVkKHNlbGYpOgogICAgICAgIHdpdGggY2F0Y2hfd2FybmluZ3MocmVjb3JkPVRydWUpOgogICAgICAgICAgICB3aXRoIHBhdGNoKCclcy5zb21ldGhpbmcnICUgX19uYW1lX18pIGFzIG1vY2tfc29tZXRoaW5nLCBwYXRjaCgnJXMuc29tZXRoaW5nX2Vsc2UnICUgX19uYW1lX18pIGFzIG1vY2tfc29tZXRoaW5nX2Vsc2U6CiAgICAgICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgbW9ja19zb21ldGhpbmcsICJ1bnBhdGNoZWQiKQogICAgICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmdfZWxzZSwgbW9ja19zb21ldGhpbmdfZWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVucGF0Y2hlZCIpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmdfZWxzZSwgc2VudGluZWwuU29tZXRoaW5nRWxzZSkKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfc3BlY2lmaWVkKHNlbGYpOgogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXywgc2VudGluZWwuUGF0Y2hlZCkgYXMgbW9ja19zb21ldGhpbmc6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9ja19zb21ldGhpbmcsIHNlbnRpbmVsLlBhdGNoZWQsICJ3cm9uZyBwYXRjaCIpCiAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIHNlbnRpbmVsLlNvbWV0aGluZykKCgogICAgZGVmIHRlc3RDb250ZXh0TWFuYWdlck1vY2tpbmcoc2VsZik6CiAgICAgICAgbW9jayA9IE1vY2soKQogICAgICAgIG1vY2suX19lbnRlcl9fID0gTW9jaygpCiAgICAgICAgbW9jay5fX2V4aXRfXyA9IE1vY2soKQogICAgICAgIG1vY2suX19leGl0X18ucmV0dXJuX3ZhbHVlID0gRmFsc2UKCiAgICAgICAgd2l0aCBtb2NrIGFzIG06CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobSwgbW9jay5fX2VudGVyX18ucmV0dXJuX3ZhbHVlKQogICAgICAgIG1vY2suX19lbnRlcl9fLmFzc2VydF9jYWxsZWRfd2l0aCgpCiAgICAgICAgbW9jay5fX2V4aXRfXy5hc3NlcnRfY2FsbGVkX3dpdGgoTm9uZSwgTm9uZSwgTm9uZSkKCgogICAgZGVmIHRlc3RfY29udGV4dF9tYW5hZ2VyX3dpdGhfbWFnaWNfbW9jayhzZWxmKToKICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCkKCiAgICAgICAgd2l0aCBzZWxmLmFzc2VydFJhaXNlcyhUeXBlRXJyb3IpOgogICAgICAgICAgICB3aXRoIG1vY2s6CiAgICAgICAgICAgICAgICAnZm9vJyArIDMKICAgICAgICBtb2NrLl9fZW50ZXJfXy5hc3NlcnRfY2FsbGVkX3dpdGgoKQogICAgICAgIHNlbGYuYXNzZXJ0VHJ1ZShtb2NrLl9fZXhpdF9fLmNhbGxlZCkKCgogICAgZGVmIHRlc3Rfd2l0aF9zdGF0ZW1lbnRfc2FtZV9hdHRyaWJ1dGUoc2VsZik6CiAgICAgICAgd2l0aCBwYXRjaCgnJXMuc29tZXRoaW5nJyAlIF9fbmFtZV9fLCBzZW50aW5lbC5QYXRjaGVkKSBhcyBtb2NrX3NvbWV0aGluZzoKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbChzb21ldGhpbmcsIG1vY2tfc29tZXRoaW5nLCAidW5wYXRjaGVkIikKCiAgICAgICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXykgYXMgbW9ja19hZ2FpbjoKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX2FnYWluLCAidW5wYXRjaGVkIikKCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAicmVzdG9yZWQgd2l0aCB3cm9uZyBpbnN0YW5jZSIpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBzZW50aW5lbC5Tb21ldGhpbmcsICJub3QgcmVzdG9yZWQiKQoKCiAgICBkZWYgdGVzdF93aXRoX3N0YXRlbWVudF9pbWJyaWNhdGVkKHNlbGYpOgogICAgICAgIHdpdGggcGF0Y2goJyVzLnNvbWV0aGluZycgJSBfX25hbWVfXykgYXMgbW9ja19zb21ldGhpbmc6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nLCBtb2NrX3NvbWV0aGluZywgInVucGF0Y2hlZCIpCgogICAgICAgICAgICB3aXRoIHBhdGNoKCclcy5zb21ldGhpbmdfZWxzZScgJSBfX25hbWVfXykgYXMgbW9ja19zb21ldGhpbmdfZWxzZToKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIG1vY2tfc29tZXRoaW5nX2Vsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1bnBhdGNoZWQiKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKHNvbWV0aGluZywgc2VudGluZWwuU29tZXRoaW5nKQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoc29tZXRoaW5nX2Vsc2UsIHNlbnRpbmVsLlNvbWV0aGluZ0Vsc2UpCgoKICAgIGRlZiB0ZXN0X2RpY3RfY29udGV4dF9tYW5hZ2VyKHNlbGYpOgogICAgICAgIGZvbyA9IHt9CiAgICAgICAgd2l0aCBwYXRjaC5kaWN0KGZvbywgeydhJzogJ2InfSk6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7J2EnOiAnYid9KQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7fSkKCiAgICAgICAgd2l0aCBzZWxmLmFzc2VydFJhaXNlcyhOYW1lRXJyb3IpOgogICAgICAgICAgICB3aXRoIHBhdGNoLmRpY3QoZm9vLCB7J2EnOiAnYid9KToKICAgICAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoZm9vLCB7J2EnOiAnYid9KQogICAgICAgICAgICAgICAgcmFpc2UgTmFtZUVycm9yKCdLb25yYWQnKQoKICAgICAgICBzZWxmLmFzc2VydEVxdWFsKGZvbywge30pCgoKCmNsYXNzIFRlc3RNb2NrT3Blbih1bml0dGVzdC5UZXN0Q2FzZSk6CgogICAgZGVmIHRlc3RfbW9ja19vcGVuKHNlbGYpOgogICAgICAgIG1vY2sgPSBtb2NrX29wZW4oKQogICAgICAgIHdpdGggcGF0Y2goJyVzLm9wZW4nICUgX19uYW1lX18sIG1vY2ssIGNyZWF0ZT1UcnVlKSBhcyBwYXRjaGVkOgogICAgICAgICAgICBzZWxmLmFzc2VydElzKHBhdGNoZWQsIG1vY2spCiAgICAgICAgICAgIG9wZW4oJ2ZvbycpCgogICAgICAgIG1vY2suYXNzZXJ0X2NhbGxlZF9vbmNlX3dpdGgoJ2ZvbycpCgoKICAgIGRlZiB0ZXN0X21vY2tfb3Blbl9jb250ZXh0X21hbmFnZXIoc2VsZik6CiAgICAgICAgbW9jayA9IG1vY2tfb3BlbigpCiAgICAgICAgaGFuZGxlID0gbW9jay5yZXR1cm5fdmFsdWUKICAgICAgICB3aXRoIHBhdGNoKCclcy5vcGVuJyAlIF9fbmFtZV9fLCBtb2NrLCBjcmVhdGU9VHJ1ZSk6CiAgICAgICAgICAgIHdpdGggb3BlbignZm9vJykgYXMgZjoKICAgICAgICAgICAgICAgIGYucmVhZCgpCgogICAgICAgIGV4cGVjdGVkX2NhbGxzID0gW2NhbGwoJ2ZvbycpLCBjYWxsKCkuX19lbnRlcl9fKCksIGNhbGwoKS5yZWFkKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbCgpLl9fZXhpdF9fKE5vbmUsIE5vbmUsIE5vbmUpXQogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwobW9jay5tb2NrX2NhbGxzLCBleHBlY3RlZF9jYWxscykKICAgICAgICBzZWxmLmFzc2VydElzKGYsIGhhbmRsZSkKCgogICAgZGVmIHRlc3RfZXhwbGljaXRfbW9jayhzZWxmKToKICAgICAgICBtb2NrID0gTWFnaWNNb2NrKCkKICAgICAgICBtb2NrX29wZW4obW9jaykKCiAgICAgICAgd2l0aCBwYXRjaCgnJXMub3BlbicgJSBfX25hbWVfXywgbW9jaywgY3JlYXRlPVRydWUpIGFzIHBhdGNoZWQ6CiAgICAgICAgICAgIHNlbGYuYXNzZXJ0SXMocGF0Y2hlZCwgbW9jaykKICAgICAgICAgICAgb3BlbignZm9vJykKCiAgICAgICAgbW9jay5hc3NlcnRfY2FsbGVkX29uY2Vfd2l0aCgnZm9vJykKCgogICAgZGVmIHRlc3RfcmVhZF9kYXRhKHNlbGYpOgogICAgICAgIG1vY2sgPSBtb2NrX29wZW4ocmVhZF9kYXRhPSdmb28nKQogICAgICAgIHdpdGggcGF0Y2goJyVzLm9wZW4nICUgX19uYW1lX18sIG1vY2ssIGNyZWF0ZT1UcnVlKToKICAgICAgICAgICAgaCA9IG9wZW4oJ2JhcicpCiAgICAgICAgICAgIHJlc3VsdCA9IGgucmVhZCgpCgogICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwocmVzdWx0LCAnZm9vJykKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgdW5pdHRlc3QubWFpbigpCg==',
'/Lib/unittest/test/testmock/__init__.py':'aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IHVuaXR0ZXN0CgoKaGVyZSA9IG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykKbG9hZGVyID0gdW5pdHRlc3QuZGVmYXVsdFRlc3RMb2FkZXIKCmRlZiBsb2FkX3Rlc3RzKCphcmdzKToKICAgIHN1aXRlID0gdW5pdHRlc3QuVGVzdFN1aXRlKCkKICAgIGZvciBmbiBpbiBvcy5saXN0ZGlyKGhlcmUpOgogICAgICAgIGlmIGZuLnN0YXJ0c3dpdGgoInRlc3QiKSBhbmQgZm4uZW5kc3dpdGgoIi5weSIpOgogICAgICAgICAgICBtb2RuYW1lID0gInVuaXR0ZXN0LnRlc3QudGVzdG1vY2suIiArIGZuWzotM10KICAgICAgICAgICAgX19pbXBvcnRfXyhtb2RuYW1lKQogICAgICAgICAgICBtb2R1bGUgPSBzeXMubW9kdWxlc1ttb2RuYW1lXQogICAgICAgICAgICBzdWl0ZS5hZGRUZXN0KGxvYWRlci5sb2FkVGVzdHNGcm9tTW9kdWxlKG1vZHVsZSkpCiAgICByZXR1cm4gc3VpdGUK'
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.$py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.$py_VFS[lib])
}


function $import_pyj_module(module,alias,names,path,module_contents) {
    __BRYTHON__.$py_module_path[module]=path
    __BRYTHON__.$py_module_alias[module]=alias
    __BRYTHON__.scope[module+'.py']={}
    __BRYTHON__.scope[module+'.py'].__dict__={}

   try {
     eval(module_contents);
     // add names defined in the module as attributes of $module
     for(var attr in __BRYTHON__.scope[module].__dict__){
       $module[attr] = __BRYTHON__.scope[module].__dict__[attr]
     }
        
     // add class and __str__
     $module.__class__ = $type
     $module.__repr__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__str__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__file__ = path
     return $module
   } catch(err) {
     eval('throw '+err.name+'(err.message)')
   }
}

//define import procedure to look up module in VFS
$import_via_VFS=function(module,alias,names){
  var ext=['.js', '.pyj', '.py']
  var search_path=__BRYTHON__.path
  var root = __BRYTHON__.brython_path;
  if (root.endswith('/')) {
     root=root.substring(0,root.length-1); 
  }
  if (search_path.indexOf(root+'/libs') == -1) {
     search_path.unshift(root+'/libs')
  }

  if (search_path.indexOf(root+'/Lib') == -1) {
     search_path.unshift(root+'/Lib')
  }

  for(var i=0; i<search_path.length; i++) {
     for (var j=0; j<ext.length; j++) {
         var path=search_path[i].replace(root, '')
         path+='/'+module+ext[j]
         
         //console.log("searching for " + path + " in VFS");
         var module_contents=readFromVFS(path)
         if(module_contents !== undefined) {
           console.log("imported ("+module+") via VFS:" + path)
           if (ext[j] == '.js') {
              return $import_js_module(module,alias,names,path,module_contents)
           }
           if (ext[j] == '.pyj') {
              return $import_pyj_module(module,alias,names,path,module_contents)
           }
           return $import_py_module(module,alias,names,path,module_contents)
         }
     }
  }
  res = Error()
  res.name = 'NotFoundError'
  res.message = "No module named '"+module+"'"
  throw res
}

// since $import_funcs is now a local variable (import_funcs), we have
// to over write the $import_single function to get VFS to work
$import_single=function (module){
    var import_funcs = [$import_via_VFS, $import_js, $import_module_search_path]
    if(module.name.search(/\./)>-1){import_funcs = [$import_module_search_path]}
    for(var j=0;j<import_funcs.length;j++){
        try{
            return import_funcs[j](module)
        } catch(err){
            if(err.name==="NotFoundError"){
                if(j==import_funcs.length-1){
                    throw ImportError("no module named '"+module.name+"'")
                }else{
                    continue
                }
            }else{throw(err)}
        }
    }
}
  