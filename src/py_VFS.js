__BRYTHON__.VFS={"/Lib/stat.py": "\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().\r\nSuggested usage: from stat import *\r\n\"\"\"\r\nST_MODE  = 0\r\nST_INO   = 1\r\nST_DEV   = 2\r\nST_NLINK = 3\r\nST_UID   = 4\r\nST_GID   = 5\r\nST_SIZE  = 6\r\nST_ATIME = 7\r\nST_MTIME = 8\r\nST_CTIME = 9\r\ndef S_IMODE(mode):\r\n    \"\"\"Return the portion of the file's mode that can be set by\r\n    os.chmod().\r\n    \"\"\"\r\n    return mode & 0o7777\r\ndef S_IFMT(mode):\r\n    \"\"\"Return the portion of the file's mode that describes the\r\n    file type.\r\n    \"\"\"\r\n    return mode & 0o170000\r\nS_IFDIR  = 0o040000  # directory\r\nS_IFCHR  = 0o020000  # character device\r\nS_IFBLK  = 0o060000  # block device\r\nS_IFREG  = 0o100000  # regular file\r\nS_IFIFO  = 0o010000  # fifo (named pipe)\r\nS_IFLNK  = 0o120000  # symbolic link\r\nS_IFSOCK = 0o140000  # socket file\r\ndef S_ISDIR(mode):\r\n    \"\"\"Return True if mode is from a directory.\"\"\"\r\n    return S_IFMT(mode) == S_IFDIR\r\ndef S_ISCHR(mode):\r\n    \"\"\"Return True if mode is from a character special device file.\"\"\"\r\n    return S_IFMT(mode) == S_IFCHR\r\ndef S_ISBLK(mode):\r\n    \"\"\"Return True if mode is from a block special device file.\"\"\"\r\n    return S_IFMT(mode) == S_IFBLK\r\ndef S_ISREG(mode):\r\n    \"\"\"Return True if mode is from a regular file.\"\"\"\r\n    return S_IFMT(mode) == S_IFREG\r\ndef S_ISFIFO(mode):\r\n    \"\"\"Return True if mode is from a FIFO (named pipe).\"\"\"\r\n    return S_IFMT(mode) == S_IFIFO\r\ndef S_ISLNK(mode):\r\n    \"\"\"Return True if mode is from a symbolic link.\"\"\"\r\n    return S_IFMT(mode) == S_IFLNK\r\ndef S_ISSOCK(mode):\r\n    \"\"\"Return True if mode is from a socket.\"\"\"\r\n    return S_IFMT(mode) == S_IFSOCK\r\nS_ISUID = 0o4000  # set UID bit\r\nS_ISGID = 0o2000  # set GID bit\r\nS_ENFMT = S_ISGID # file locking enforcement\r\nS_ISVTX = 0o1000  # sticky bit\r\nS_IREAD = 0o0400  # Unix V7 synonym for S_IRUSR\r\nS_IWRITE = 0o0200 # Unix V7 synonym for S_IWUSR\r\nS_IEXEC = 0o0100  # Unix V7 synonym for S_IXUSR\r\nS_IRWXU = 0o0700  # mask for owner permissions\r\nS_IRUSR = 0o0400  # read by owner\r\nS_IWUSR = 0o0200  # write by owner\r\nS_IXUSR = 0o0100  # execute by owner\r\nS_IRWXG = 0o0070  # mask for group permissions\r\nS_IRGRP = 0o0040  # read by group\r\nS_IWGRP = 0o0020  # write by group\r\nS_IXGRP = 0o0010  # execute by group\r\nS_IRWXO = 0o0007  # mask for others (not in group) permissions\r\nS_IROTH = 0o0004  # read by others\r\nS_IWOTH = 0o0002  # write by others\r\nS_IXOTH = 0o0001  # execute by others\r\nUF_NODUMP    = 0x00000001  # do not dump file\r\nUF_IMMUTABLE = 0x00000002  # file may not be changed\r\nUF_APPEND    = 0x00000004  # file may only be appended to\r\nUF_OPAQUE    = 0x00000008  # directory is opaque when viewed through a union stack\r\nUF_NOUNLINK  = 0x00000010  # file may not be renamed or deleted\r\nUF_COMPRESSED = 0x00000020 # OS X: file is hfs-compressed\r\nUF_HIDDEN    = 0x00008000  # OS X: file should not be displayed\r\nSF_ARCHIVED  = 0x00010000  # file may be archived\r\nSF_IMMUTABLE = 0x00020000  # file may not be changed\r\nSF_APPEND    = 0x00040000  # file may only be appended to\r\nSF_NOUNLINK  = 0x00100000  # file may not be renamed or deleted\r\nSF_SNAPSHOT  = 0x00200000  # file is a snapshot file\r\n_filemode_table = (\r\n    ((S_IFLNK,         \"l\"),\r\n     (S_IFREG,         \"-\"),\r\n     (S_IFBLK,         \"b\"),\r\n     (S_IFDIR,         \"d\"),\r\n     (S_IFCHR,         \"c\"),\r\n     (S_IFIFO,         \"p\")),\r\n    ((S_IRUSR,         \"r\"),),\r\n    ((S_IWUSR,         \"w\"),),\r\n    ((S_IXUSR|S_ISUID, \"s\"),\r\n     (S_ISUID,         \"S\"),\r\n     (S_IXUSR,         \"x\")),\r\n    ((S_IRGRP,         \"r\"),),\r\n    ((S_IWGRP,         \"w\"),),\r\n    ((S_IXGRP|S_ISGID, \"s\"),\r\n     (S_ISGID,         \"S\"),\r\n     (S_IXGRP,         \"x\")),\r\n    ((S_IROTH,         \"r\"),),\r\n    ((S_IWOTH,         \"w\"),),\r\n    ((S_IXOTH|S_ISVTX, \"t\"),\r\n     (S_ISVTX,         \"T\"),\r\n     (S_IXOTH,         \"x\"))\r\n)\r\ndef filemode(mode):\r\n    \"\"\"Convert a file's mode to a string of the form '-rwxrwxrwx'.\"\"\"\r\n    perm = []\r\n    for table in _filemode_table:\r\n        for bit, char in table:\r\n            if mode & bit == bit:\r\n                perm.append(char)\r\n                break\r\n        else:\r\n            perm.append(\"-\")\r\n    return \"\".join(perm)\r\n", "/libs/zlib.js": "(function(){'use strict';function l(d){throw d;}var u=void 0,x=!0,aa=this;function z(d,a){var c=d.split(\".\"),f=aa;!(c[0] in f)&&f.execScript&&f.execScript(\"var \"+c[0]);for(var b;c.length&&(b=c.shift());)!c.length&&a!==u?f[b]=a:f=f[b]?f[b]:f[b]={};};var E=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array;function G(d,a){this.index=\"number\"===typeof a?a:0;this.i=0;this.buffer=d instanceof (E?Uint8Array:Array)?d:new (E?Uint8Array:Array)(32768);2*this.buffer.length<=this.index&&l(Error(\"invalid index\"));this.buffer.length<=this.index&&this.f();}G.prototype.f=function(){var d=this.buffer,a,c=d.length,f=new (E?Uint8Array:Array)(c<<1);if(E)f.set(d);else for(a=0;a<c;++a)f[a]=d[a];return this.buffer=f;};G.prototype.d=function(d,a,c){var f=this.buffer,b=this.index,e=this.i,g=f[b],h;c&&1<a&&(d=8<a?(N[d&255]<<24|N[d>>>8&255]<<16|N[d>>>16&255]<<8|N[d>>>24&255])>>32-a:N[d]>>8-a);if(8>a+e)g=g<<a|d,e+=a;else for(h=0;h<a;++h)g=g<<1|d>>a-h-1&1,8===++e&&(e=0,f[b++]=N[g],g=0,b===f.length&&(f=this.f()));f[b]=g;this.buffer=f;this.i=e;this.index=b;};G.prototype.finish=function(){var d=this.buffer,a=this.index,c;0<this.i&&(d[a]<<=8-this.i,d[a]=N[d[a]],a++);E?c=d.subarray(0,a):(d.length=a,c=d);return c;};var fa=new (E?Uint8Array:Array)(256),O;for(O=0;256>O;++O){for(var P=O,Q=P,ga=7,P=P>>>1;P;P>>>=1)Q<<=1,Q|=P&1,--ga;fa[O]=(Q<<ga&255)>>>0;}var N=fa;function ha(d){this.buffer=new (E?Uint16Array:Array)(2*d);this.length=0;}ha.prototype.getParent=function(d){return 2*((d-2)/4|0);};ha.prototype.push=function(d,a){var c,f,b=this.buffer,e;c=this.length;b[this.length++]=a;for(b[this.length++]=d;0<c;)if(f=this.getParent(c),b[c]>b[f])e=b[c],b[c]=b[f],b[f]=e,e=b[c+1],b[c+1]=b[f+1],b[f+1]=e,c=f;else break;return this.length;};ha.prototype.pop=function(){var d,a,c=this.buffer,f,b,e;a=c[0];d=c[1];this.length-=2;c[0]=c[this.length];c[1]=c[this.length+1];for(e=0;;){b=2*e+2;if(b>=this.length)break;b+2<this.length&&c[b+2]>c[b]&&(b+=2);if(c[b]>c[e])f=c[e],c[e]=c[b],c[b]=f,f=c[e+1],c[e+1]=c[b+1],c[b+1]=f;else break;e=b;}return{index:d,value:a,length:this.length};};function R(d){var a=d.length,c=0,f=Number.POSITIVE_INFINITY,b,e,g,h,k,n,q,r,p;for(r=0;r<a;++r)d[r]>c&&(c=d[r]),d[r]<f&&(f=d[r]);b=1<<c;e=new (E?Uint32Array:Array)(b);g=1;h=0;for(k=2;g<=c;){for(r=0;r<a;++r)if(d[r]===g){n=0;q=h;for(p=0;p<g;++p)n=n<<1|q&1,q>>=1;for(p=n;p<b;p+=k)e[p]=g<<16|r;++h;}++g;h<<=1;k<<=1;}return [e,c,f];};function ia(d,a){this.h=ma;this.w=0;this.input=E&&d instanceof Array?new Uint8Array(d):d;this.b=0;a&&(a.lazy&&(this.w=a.lazy),\"number\"===typeof a.compressionType&&(this.h=a.compressionType),a.outputBuffer&&(this.a=E&&a.outputBuffer instanceof Array?new Uint8Array(a.outputBuffer):a.outputBuffer),\"number\"===typeof a.outputIndex&&(this.b=a.outputIndex));this.a||(this.a=new (E?Uint8Array:Array)(32768));}var ma=2,na={NONE:0,r:1,k:ma,N:3},oa=[],S;for(S=0;288>S;S++)switch(x){case 143>=S:oa.push([S+48,8]);break;case 255>=S:oa.push([S-144+400,9]);break;case 279>=S:oa.push([S-256+0,7]);break;case 287>=S:oa.push([S-280+192,8]);break;default:l(\"invalid literal: \"+S);}ia.prototype.j=function(){var d,a,c,f,b=this.input;switch(this.h){case 0:c=0;for(f=b.length;c<f;){a=E?b.subarray(c,c+65535):b.slice(c,c+65535);c+=a.length;var e=a,g=c===f,h=u,k=u,n=u,q=u,r=u,p=this.a,m=this.b;if(E){for(p=new Uint8Array(this.a.buffer);p.length<=m+e.length+5;)p=new Uint8Array(p.length<<1);p.set(this.a);}h=g?1:0;p[m++]=h|0;k=e.length;n=~k+65536&65535;p[m++]=k&255;p[m++]=k>>>8&255;p[m++]=n&255;p[m++]=n>>>8&255;if(E)p.set(e,m),m+=e.length,p=p.subarray(0,m);else{q=0;for(r=e.length;q<r;++q)p[m++]=e[q];p.length=m;}this.b=m;this.a=p;}break;case 1:var s=new G(E?new Uint8Array(this.a.buffer):this.a,this.b);s.d(1,1,x);s.d(1,2,x);var w=pa(this,b),y,ja,B;y=0;for(ja=w.length;y<ja;y++)if(B=w[y],G.prototype.d.apply(s,oa[B]),256<B)s.d(w[++y],w[++y],x),s.d(w[++y],5),s.d(w[++y],w[++y],x);else if(256===B)break;this.a=s.finish();this.b=this.a.length;break;case ma:var D=new G(E?new Uint8Array(this.a.buffer):this.a,this.b),Da,M,U,V,W,gb=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],ba,Ea,ca,Fa,ka,ra=Array(19),Ga,X,la,A,Ha;Da=ma;D.d(1,1,x);D.d(Da,2,x);M=pa(this,b);ba=qa(this.L,15);Ea=sa(ba);ca=qa(this.K,7);Fa=sa(ca);for(U=286;257<U&&0===ba[U-1];U--);for(V=30;1<V&&0===ca[V-1];V--);var Ia=U,Ja=V,I=new (E?Uint32Array:Array)(Ia+Ja),t,J,v,da,H=new (E?Uint32Array:Array)(316),F,C,K=new (E?Uint8Array:Array)(19);for(t=J=0;t<Ia;t++)I[J++]=ba[t];for(t=0;t<Ja;t++)I[J++]=ca[t];if(!E){t=0;for(da=K.length;t<da;++t)K[t]=0;}t=F=0;for(da=I.length;t<da;t+=J){for(J=1;t+J<da&&I[t+J]===I[t];++J);v=J;if(0===I[t])if(3>v)for(;0<v--;)H[F++]=0,K[0]++;else for(;0<v;)C=138>v?v:138,C>v-3&&C<v&&(C=v-3),10>=C?(H[F++]=17,H[F++]=C-3,K[17]++):(H[F++]=18,H[F++]=C-11,K[18]++),v-=C;else if(H[F++]=I[t],K[I[t]]++,v--,3>v)for(;0<v--;)H[F++]=I[t],K[I[t]]++;else for(;0<v;)C=6>v?v:6,C>v-3&&C<v&&(C=v-3),H[F++]=16,H[F++]=C-3,K[16]++,v-=C;}d=E?H.subarray(0,F):H.slice(0,F);ka=qa(K,7);for(A=0;19>A;A++)ra[A]=ka[gb[A]];for(W=19;4<W&&0===ra[W-1];W--);Ga=sa(ka);D.d(U-257,5,x);D.d(V-1,5,x);D.d(W-4,4,x);for(A=0;A<W;A++)D.d(ra[A],3,x);A=0;for(Ha=d.length;A<Ha;A++)if(X=d[A],D.d(Ga[X],ka[X],x),16<=X){A++;switch(X){case 16:la=2;break;case 17:la=3;break;case 18:la=7;break;default:l(\"invalid code: \"+X);}D.d(d[A],la,x);}var Ka=[Ea,ba],La=[Fa,ca],L,Ma,ea,ua,Na,Oa,Pa,Qa;Na=Ka[0];Oa=Ka[1];Pa=La[0];Qa=La[1];L=0;for(Ma=M.length;L<Ma;++L)if(ea=M[L],D.d(Na[ea],Oa[ea],x),256<ea)D.d(M[++L],M[++L],x),ua=M[++L],D.d(Pa[ua],Qa[ua],x),D.d(M[++L],M[++L],x);else if(256===ea)break;this.a=D.finish();this.b=this.a.length;break;default:l(\"invalid compression type\");}return this.a;};function ta(d,a){this.length=d;this.G=a;}var va=function(){function d(b){switch(x){case 3===b:return [257,b-3,0];case 4===b:return [258,b-4,0];case 5===b:return [259,b-5,0];case 6===b:return [260,b-6,0];case 7===b:return [261,b-7,0];case 8===b:return [262,b-8,0];case 9===b:return [263,b-9,0];case 10===b:return [264,b-10,0];case 12>=b:return [265,b-11,1];case 14>=b:return [266,b-13,1];case 16>=b:return [267,b-15,1];case 18>=b:return [268,b-17,1];case 22>=b:return [269,b-19,2];case 26>=b:return [270,b-23,2];case 30>=b:return [271,b-27,2];case 34>=b:return [272,b-31,2];case 42>=b:return [273,b-35,3];case 50>=b:return [274,b-43,3];case 58>=b:return [275,b-51,3];case 66>=b:return [276,b-59,3];case 82>=b:return [277,b-67,4];case 98>=b:return [278,b-83,4];case 114>=b:return [279,b-99,4];case 130>=b:return [280,b-115,4];case 162>=b:return [281,b-131,5];case 194>=b:return [282,b-163,5];case 226>=b:return [283,b-195,5];case 257>=b:return [284,b-227,5];case 258===b:return [285,b-258,0];default:l(\"invalid length: \"+b);}}var a=[],c,f;for(c=3;258>=c;c++)f=d(c),a[c]=f[2]<<24|f[1]<<16|f[0];return a;}(),wa=E?new Uint32Array(va):va;function pa(d,a){function c(b,c){var a=b.G,d=[],e=0,f;f=wa[b.length];d[e++]=f&65535;d[e++]=f>>16&255;d[e++]=f>>24;var g;switch(x){case 1===a:g=[0,a-1,0];break;case 2===a:g=[1,a-2,0];break;case 3===a:g=[2,a-3,0];break;case 4===a:g=[3,a-4,0];break;case 6>=a:g=[4,a-5,1];break;case 8>=a:g=[5,a-7,1];break;case 12>=a:g=[6,a-9,2];break;case 16>=a:g=[7,a-13,2];break;case 24>=a:g=[8,a-17,3];break;case 32>=a:g=[9,a-25,3];break;case 48>=a:g=[10,a-33,4];break;case 64>=a:g=[11,a-49,4];break;case 96>=a:g=[12,a-65,5];break;case 128>=a:g=[13,a-97,5];break;case 192>=a:g=[14,a-129,6];break;case 256>=a:g=[15,a-193,6];break;case 384>=a:g=[16,a-257,7];break;case 512>=a:g=[17,a-385,7];break;case 768>=a:g=[18,a-513,8];break;case 1024>=a:g=[19,a-769,8];break;case 1536>=a:g=[20,a-1025,9];break;case 2048>=a:g=[21,a-1537,9];break;case 3072>=a:g=[22,a-2049,10];break;case 4096>=a:g=[23,a-3073,10];break;case 6144>=a:g=[24,a-4097,11];break;case 8192>=a:g=[25,a-6145,11];break;case 12288>=a:g=[26,a-8193,12];break;case 16384>=a:g=[27,a-12289,12];break;case 24576>=a:g=[28,a-16385,13];break;case 32768>=a:g=[29,a-24577,13];break;default:l(\"invalid distance\");}f=g;d[e++]=f[0];d[e++]=f[1];d[e++]=f[2];var h,k;h=0;for(k=d.length;h<k;++h)p[m++]=d[h];w[d[0]]++;y[d[3]]++;s=b.length+c-1;r=null;}var f,b,e,g,h,k={},n,q,r,p=E?new Uint16Array(2*a.length):[],m=0,s=0,w=new (E?Uint32Array:Array)(286),y=new (E?Uint32Array:Array)(30),ja=d.w,B;if(!E){for(e=0;285>=e;)w[e++]=0;for(e=0;29>=e;)y[e++]=0;}w[256]=1;f=0;for(b=a.length;f<b;++f){e=h=0;for(g=3;e<g&&f+e!==b;++e)h=h<<8|a[f+e];k[h]===u&&(k[h]=[]);n=k[h];if(!(0<s--)){for(;0<n.length&&32768<f-n[0];)n.shift();if(f+3>=b){r&&c(r,-1);e=0;for(g=b-f;e<g;++e)B=a[f+e],p[m++]=B,++w[B];break;}0<n.length?(q=xa(a,f,n),r?r.length<q.length?(B=a[f-1],p[m++]=B,++w[B],c(q,0)):c(r,-1):q.length<ja?r=q:c(q,0)):r?c(r,-1):(B=a[f],p[m++]=B,++w[B]);}n.push(f);}p[m++]=256;w[256]++;d.L=w;d.K=y;return E?p.subarray(0,m):p;}function xa(d,a,c){var f,b,e=0,g,h,k,n,q=d.length;h=0;n=c.length;a:for(;h<n;h++){f=c[n-h-1];g=3;if(3<e){for(k=e;3<k;k--)if(d[f+k-1]!==d[a+k-1])continue a;g=e;}for(;258>g&&a+g<q&&d[f+g]===d[a+g];)++g;g>e&&(b=f,e=g);if(258===g)break;}return new ta(e,a-b);}function qa(d,a){var c=d.length,f=new ha(572),b=new (E?Uint8Array:Array)(c),e,g,h,k,n;if(!E)for(k=0;k<c;k++)b[k]=0;for(k=0;k<c;++k)0<d[k]&&f.push(k,d[k]);e=Array(f.length/2);g=new (E?Uint32Array:Array)(f.length/2);if(1===e.length)return b[f.pop().index]=1,b;k=0;for(n=f.length/2;k<n;++k)e[k]=f.pop(),g[k]=e[k].value;h=ya(g,g.length,a);k=0;for(n=e.length;k<n;++k)b[e[k].index]=h[k];return b;}function ya(d,a,c){function f(b){var c=k[b][n[b]];c===a?(f(b+1),f(b+1)):--g[c];++n[b];}var b=new (E?Uint16Array:Array)(c),e=new (E?Uint8Array:Array)(c),g=new (E?Uint8Array:Array)(a),h=Array(c),k=Array(c),n=Array(c),q=(1<<c)-a,r=1<<c-1,p,m,s,w,y;b[c-1]=a;for(m=0;m<c;++m)q<r?e[m]=0:(e[m]=1,q-=r),q<<=1,b[c-2-m]=(b[c-1-m]/2|0)+a;b[0]=e[0];h[0]=Array(b[0]);k[0]=Array(b[0]);for(m=1;m<c;++m)b[m]>2*b[m-1]+e[m]&&(b[m]=2*b[m-1]+e[m]),h[m]=Array(b[m]),k[m]=Array(b[m]);for(p=0;p<a;++p)g[p]=c;for(s=0;s<b[c-1];++s)h[c-1][s]=d[s],k[c-1][s]=s;for(p=0;p<c;++p)n[p]=0;1===e[c-1]&&(--g[0],++n[c-1]);for(m=c-2;0<=m;--m){w=p=0;y=n[m+1];for(s=0;s<b[m];s++)w=h[m+1][y]+h[m+1][y+1],w>d[p]?(h[m][s]=w,k[m][s]=a,y+=2):(h[m][s]=d[p],k[m][s]=p,++p);n[m]=0;1===e[m]&&f(m);}return g;}function sa(d){var a=new (E?Uint16Array:Array)(d.length),c=[],f=[],b=0,e,g,h,k;e=0;for(g=d.length;e<g;e++)c[d[e]]=(c[d[e]]|0)+1;e=1;for(g=16;e<=g;e++)f[e]=b,b+=c[e]|0,b<<=1;e=0;for(g=d.length;e<g;e++){b=f[d[e]];f[d[e]]+=1;h=a[e]=0;for(k=d[e];h<k;h++)a[e]=a[e]<<1|b&1,b>>>=1;}return a;};function T(d,a){this.l=[];this.m=32768;this.e=this.g=this.c=this.q=0;this.input=E?new Uint8Array(d):d;this.s=!1;this.n=za;this.B=!1;if(a||!(a={}))a.index&&(this.c=a.index),a.bufferSize&&(this.m=a.bufferSize),a.bufferType&&(this.n=a.bufferType),a.resize&&(this.B=a.resize);switch(this.n){case Aa:this.b=32768;this.a=new (E?Uint8Array:Array)(32768+this.m+258);break;case za:this.b=0;this.a=new (E?Uint8Array:Array)(this.m);this.f=this.J;this.t=this.H;this.o=this.I;break;default:l(Error(\"invalid inflate mode\"));}}var Aa=0,za=1,Ba={D:Aa,C:za};T.prototype.p=function(){for(;!this.s;){var d=Y(this,3);d&1&&(this.s=x);d>>>=1;switch(d){case 0:var a=this.input,c=this.c,f=this.a,b=this.b,e=u,g=u,h=u,k=f.length,n=u;this.e=this.g=0;e=a[c++];e===u&&l(Error(\"invalid uncompressed block header: LEN (first byte)\"));g=e;e=a[c++];e===u&&l(Error(\"invalid uncompressed block header: LEN (second byte)\"));g|=e<<8;e=a[c++];e===u&&l(Error(\"invalid uncompressed block header: NLEN (first byte)\"));h=e;e=a[c++];e===u&&l(Error(\"invalid uncompressed block header: NLEN (second byte)\"));h|=e<<8;g===~h&&l(Error(\"invalid uncompressed block header: length verify\"));c+g>a.length&&l(Error(\"input buffer is broken\"));switch(this.n){case Aa:for(;b+g>f.length;){n=k-b;g-=n;if(E)f.set(a.subarray(c,c+n),b),b+=n,c+=n;else for(;n--;)f[b++]=a[c++];this.b=b;f=this.f();b=this.b;}break;case za:for(;b+g>f.length;)f=this.f({v:2});break;default:l(Error(\"invalid inflate mode\"));}if(E)f.set(a.subarray(c,c+g),b),b+=g,c+=g;else for(;g--;)f[b++]=a[c++];this.c=c;this.b=b;this.a=f;break;case 1:this.o(Ca,Ra);break;case 2:Sa(this);break;default:l(Error(\"unknown BTYPE: \"+d));}}return this.t();};var Ta=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Ua=E?new Uint16Array(Ta):Ta,Va=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],Wa=E?new Uint16Array(Va):Va,Xa=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],Ya=E?new Uint8Array(Xa):Xa,Za=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],$a=E?new Uint16Array(Za):Za,ab=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],bb=E?new Uint8Array(ab):ab,cb=new (E?Uint8Array:Array)(288),Z,db;Z=0;for(db=cb.length;Z<db;++Z)cb[Z]=143>=Z?8:255>=Z?9:279>=Z?7:8;var Ca=R(cb),eb=new (E?Uint8Array:Array)(30),fb,hb;fb=0;for(hb=eb.length;fb<hb;++fb)eb[fb]=5;var Ra=R(eb);function Y(d,a){for(var c=d.g,f=d.e,b=d.input,e=d.c,g;f<a;)g=b[e++],g===u&&l(Error(\"input buffer is broken\")),c|=g<<f,f+=8;g=c&(1<<a)-1;d.g=c>>>a;d.e=f-a;d.c=e;return g;}function ib(d,a){for(var c=d.g,f=d.e,b=d.input,e=d.c,g=a[0],h=a[1],k,n,q;f<h;){k=b[e++];if(k===u)break;c|=k<<f;f+=8;}n=g[c&(1<<h)-1];q=n>>>16;d.g=c>>q;d.e=f-q;d.c=e;return n&65535;}function Sa(d){function a(a,b,c){var d,f,e,g;for(g=0;g<a;)switch(d=ib(this,b),d){case 16:for(e=3+Y(this,2);e--;)c[g++]=f;break;case 17:for(e=3+Y(this,3);e--;)c[g++]=0;f=0;break;case 18:for(e=11+Y(this,7);e--;)c[g++]=0;f=0;break;default:f=c[g++]=d;}return c;}var c=Y(d,5)+257,f=Y(d,5)+1,b=Y(d,4)+4,e=new (E?Uint8Array:Array)(Ua.length),g,h,k,n;for(n=0;n<b;++n)e[Ua[n]]=Y(d,3);g=R(e);h=new (E?Uint8Array:Array)(c);k=new (E?Uint8Array:Array)(f);d.o(R(a.call(d,c,g,h)),R(a.call(d,f,g,k)));}T.prototype.o=function(d,a){var c=this.a,f=this.b;this.u=d;for(var b=c.length-258,e,g,h,k;256!==(e=ib(this,d));)if(256>e)f>=b&&(this.b=f,c=this.f(),f=this.b),c[f++]=e;else{g=e-257;k=Wa[g];0<Ya[g]&&(k+=Y(this,Ya[g]));e=ib(this,a);h=$a[e];0<bb[e]&&(h+=Y(this,bb[e]));f>=b&&(this.b=f,c=this.f(),f=this.b);for(;k--;)c[f]=c[f++-h];}for(;8<=this.e;)this.e-=8,this.c--;this.b=f;};T.prototype.I=function(d,a){var c=this.a,f=this.b;this.u=d;for(var b=c.length,e,g,h,k;256!==(e=ib(this,d));)if(256>e)f>=b&&(c=this.f(),b=c.length),c[f++]=e;else{g=e-257;k=Wa[g];0<Ya[g]&&(k+=Y(this,Ya[g]));e=ib(this,a);h=$a[e];0<bb[e]&&(h+=Y(this,bb[e]));f+k>b&&(c=this.f(),b=c.length);for(;k--;)c[f]=c[f++-h];}for(;8<=this.e;)this.e-=8,this.c--;this.b=f;};T.prototype.f=function(){var d=new (E?Uint8Array:Array)(this.b-32768),a=this.b-32768,c,f,b=this.a;if(E)d.set(b.subarray(32768,d.length));else{c=0;for(f=d.length;c<f;++c)d[c]=b[c+32768];}this.l.push(d);this.q+=d.length;if(E)b.set(b.subarray(a,a+32768));else for(c=0;32768>c;++c)b[c]=b[a+c];this.b=32768;return b;};T.prototype.J=function(d){var a,c=this.input.length/this.c+1|0,f,b,e,g=this.input,h=this.a;d&&(\"number\"===typeof d.v&&(c=d.v),\"number\"===typeof d.F&&(c+=d.F));2>c?(f=(g.length-this.c)/this.u[2],e=258*(f/2)|0,b=e<h.length?h.length+e:h.length<<1):b=h.length*c;E?(a=new Uint8Array(b),a.set(h)):a=h;return this.a=a;};T.prototype.t=function(){var d=0,a=this.a,c=this.l,f,b=new (E?Uint8Array:Array)(this.q+(this.b-32768)),e,g,h,k;if(0===c.length)return E?this.a.subarray(32768,this.b):this.a.slice(32768,this.b);e=0;for(g=c.length;e<g;++e){f=c[e];h=0;for(k=f.length;h<k;++h)b[d++]=f[h];}e=32768;for(g=this.b;e<g;++e)b[d++]=a[e];this.l=[];return this.buffer=b;};T.prototype.H=function(){var d,a=this.b;E?this.B?(d=new Uint8Array(a),d.set(this.a.subarray(0,a))):d=this.a.subarray(0,a):(this.a.length>a&&(this.a.length=a),d=this.a);return this.buffer=d;};function jb(d){if(\"string\"===typeof d){var a=d.split(\"\"),c,f;c=0;for(f=a.length;c<f;c++)a[c]=(a[c].charCodeAt(0)&255)>>>0;d=a;}for(var b=1,e=0,g=d.length,h,k=0;0<g;){h=1024<g?1024:g;g-=h;do b+=d[k++],e+=b;while(--h);b%=65521;e%=65521;}return(e<<16|b)>>>0;};function kb(d,a){var c,f;this.input=d;this.c=0;if(a||!(a={}))a.index&&(this.c=a.index),a.verify&&(this.M=a.verify);c=d[this.c++];f=d[this.c++];switch(c&15){case lb:this.method=lb;break;default:l(Error(\"unsupported compression method\"));}0!==((c<<8)+f)%31&&l(Error(\"invalid fcheck flag:\"+((c<<8)+f)%31));f&32&&l(Error(\"fdict flag is not supported\"));this.A=new T(d,{index:this.c,bufferSize:a.bufferSize,bufferType:a.bufferType,resize:a.resize});}kb.prototype.p=function(){var d=this.input,a,c;a=this.A.p();this.c=this.A.c;this.M&&(c=(d[this.c++]<<24|d[this.c++]<<16|d[this.c++]<<8|d[this.c++])>>>0,c!==jb(a)&&l(Error(\"invalid adler-32 checksum\")));return a;};var lb=8;function mb(d,a){this.input=d;this.a=new (E?Uint8Array:Array)(32768);this.h=$.k;var c={},f;if((a||!(a={}))&&\"number\"===typeof a.compressionType)this.h=a.compressionType;for(f in a)c[f]=a[f];c.outputBuffer=this.a;this.z=new ia(this.input,c);}var $=na;mb.prototype.j=function(){var d,a,c,f,b,e,g,h=0;g=this.a;d=lb;switch(d){case lb:a=Math.LOG2E*Math.log(32768)-8;break;default:l(Error(\"invalid compression method\"));}c=a<<4|d;g[h++]=c;switch(d){case lb:switch(this.h){case $.NONE:b=0;break;case $.r:b=1;break;case $.k:b=2;break;default:l(Error(\"unsupported compression type\"));}break;default:l(Error(\"invalid compression method\"));}f=b<<6|0;g[h++]=f|31-(256*c+f)%31;e=jb(this.input);this.z.b=h;g=this.z.j();h=g.length;E&&(g=new Uint8Array(g.buffer),g.length<=h+4&&(this.a=new Uint8Array(g.length+4),this.a.set(g),g=this.a),g=g.subarray(0,h+4));g[h++]=e>>24&255;g[h++]=e>>16&255;g[h++]=e>>8&255;g[h++]=e&255;return g;};function nb(d,a){var c,f,b,e;if(Object.keys)c=Object.keys(a);else for(f in c=[],b=0,a)c[b++]=f;b=0;for(e=c.length;b<e;++b)f=c[b],z(d+\".\"+f,a[f]);};z(\"Zlib.Inflate\",kb);z(\"Zlib.Inflate.prototype.decompress\",kb.prototype.p);nb(\"Zlib.Inflate.BufferType\",{ADAPTIVE:Ba.C,BLOCK:Ba.D});z(\"Zlib.Deflate\",mb);z(\"Zlib.Deflate.compress\",function(d,a){return new mb(d,a).j();});z(\"Zlib.Deflate.prototype.compress\",mb.prototype.j);nb(\"Zlib.Deflate.CompressionType\",{NONE:$.NONE,FIXED:$.r,DYNAMIC:$.k});}).call(this);$module={decompress:function(data){return data;},compress:function(data){return data;},_decompress:function(data){var _inflate=new Zlib.Inflate(data.source);var _d=_inflate.decompress();console.log(_d);return bytes(_d);},_compress:function(data){console.log(data);var _deflate=new Zlib.Deflate(data.source);var _d=_deflate.compress();return bytes(_d);}};$module.__class__=$module;$module.__str__=function(){return \"<module 'zlib'>\";};", "/Lib/site.py": "import sys\nimport external_import\nsys.path_hooks.insert(0,external_import.ModuleFinder)\n", "/Lib/token.py": "\"\"\"Token constants (from \"token.h\").\"\"\"\r\n__all__ = ['tok_name', 'ISTERMINAL', 'ISNONTERMINAL', 'ISEOF']\r\nENDMARKER = 0\r\nNAME = 1\r\nNUMBER = 2\r\nSTRING = 3\r\nNEWLINE = 4\r\nINDENT = 5\r\nDEDENT = 6\r\nLPAR = 7\r\nRPAR = 8\r\nLSQB = 9\r\nRSQB = 10\r\nCOLON = 11\r\nCOMMA = 12\r\nSEMI = 13\r\nPLUS = 14\r\nMINUS = 15\r\nSTAR = 16\r\nSLASH = 17\r\nVBAR = 18\r\nAMPER = 19\r\nLESS = 20\r\nGREATER = 21\r\nEQUAL = 22\r\nDOT = 23\r\nPERCENT = 24\r\nLBRACE = 25\r\nRBRACE = 26\r\nEQEQUAL = 27\r\nNOTEQUAL = 28\r\nLESSEQUAL = 29\r\nGREATEREQUAL = 30\r\nTILDE = 31\r\nCIRCUMFLEX = 32\r\nLEFTSHIFT = 33\r\nRIGHTSHIFT = 34\r\nDOUBLESTAR = 35\r\nPLUSEQUAL = 36\r\nMINEQUAL = 37\r\nSTAREQUAL = 38\r\nSLASHEQUAL = 39\r\nPERCENTEQUAL = 40\r\nAMPEREQUAL = 41\r\nVBAREQUAL = 42\r\nCIRCUMFLEXEQUAL = 43\r\nLEFTSHIFTEQUAL = 44\r\nRIGHTSHIFTEQUAL = 45\r\nDOUBLESTAREQUAL = 46\r\nDOUBLESLASH = 47\r\nDOUBLESLASHEQUAL = 48\r\nAT = 49\r\nRARROW = 50\r\nELLIPSIS = 51\r\nOP = 52\r\nERRORTOKEN = 53\r\nN_TOKENS = 54\r\nNT_OFFSET = 256\r\ntok_name = {value: name\r\n            for name, value in globals().items()\r\n            if isinstance(value, int) and not name.startswith('_')}\r\n__all__.extend(tok_name.values())\r\ndef ISTERMINAL(x):\r\n    return x < NT_OFFSET\r\ndef ISNONTERMINAL(x):\r\n    return x >= NT_OFFSET\r\ndef ISEOF(x):\r\n    return x == ENDMARKER\r\ndef _main():\r\n    import re\r\n    import sys\r\n    args = sys.argv[1:]\r\n    inFileName = args and args[0] or \"Include/token.h\"\r\n    outFileName = \"Lib/token.py\"\r\n    if len(args) > 1:\r\n        outFileName = args[1]\r\n    try:\r\n        fp = open(inFileName)\r\n    except IOError as err:\r\n        sys.stdout.write(\"I/O error: %s\\n\" % str(err))\r\n        sys.exit(1)\r\n    lines = fp.read().split(\"\\n\")\r\n    fp.close()\r\n    prog = re.compile(\r\n        \"#define[ \\t][ \\t]*([A-Z0-9][A-Z0-9_]*)[ \\t][ \\t]*([0-9][0-9]*)\",\r\n        re.IGNORECASE)\r\n    tokens = {}\r\n    for line in lines:\r\n        match = prog.match(line)\r\n        if match:\r\n            name, val = match.group(1, 2)\r\n            val = int(val)\r\n            tokens[val] = name          # reverse so we can sort them...\r\n    keys = sorted(tokens.keys())\r\n    try:\r\n        fp = open(outFileName)\r\n    except IOError as err:\r\n        sys.stderr.write(\"I/O error: %s\\n\" % str(err))\r\n        sys.exit(2)\r\n    format = fp.read().split(\"\\n\")\r\n    fp.close()\r\n    try:\r\n        start = format.index(\"#--start constants--\") + 1\r\n        end = format.index(\"#--end constants--\")\r\n    except ValueError:\r\n        sys.stderr.write(\"target does not contain format markers\")\r\n        sys.exit(3)\r\n    lines = []\r\n    for val in keys:\r\n        lines.append(\"%s = %d\" % (tokens[val], val))\r\n    format[start:end] = lines\r\n    try:\r\n        fp = open(outFileName, 'w')\r\n    except IOError as err:\r\n        sys.stderr.write(\"I/O error: %s\\n\" % str(err))\r\n        sys.exit(4)\r\n    fp.write(\"\\n\".join(format))\r\n    fp.close()\r\nif __name__ == \"__main__\":\r\n    _main()\r\n", "/Lib/fnmatch.py": "\"\"\"Filename matching with shell patterns.\r\nfnmatch(FILENAME, PATTERN) matches according to the local convention.\r\nfnmatchcase(FILENAME, PATTERN) always takes case in account.\r\nThe functions operate by translating the pattern into a regular\r\nexpression.  They cache the compiled regular expressions for speed.\r\nThe function translate(PATTERN) returns a regular expression\r\ncorresponding to PATTERN.  (It does not compile it.)\r\n\"\"\"\r\nimport os\r\nimport posixpath\r\nimport re\r\nimport functools\r\n__all__ = [\"filter\", \"fnmatch\", \"fnmatchcase\", \"translate\"]\r\ndef fnmatch(name, pat):\r\n    \"\"\"Test whether FILENAME matches PATTERN.\r\n    Patterns are Unix shell style:\r\n    *       matches everything\r\n    ?       matches any single character\r\n    [seq]   matches any character in seq\r\n    [!seq]  matches any char not in seq\r\n    An initial period in FILENAME is not special.\r\n    Both FILENAME and PATTERN are first case-normalized\r\n    if the operating system requires it.\r\n    If you don't want this, use fnmatchcase(FILENAME, PATTERN).\r\n    \"\"\"\r\n    name = os.path.normcase(name)\r\n    pat = os.path.normcase(pat)\r\n    return fnmatchcase(name, pat)\r\n@functools.lru_cache(maxsize=250, typed=True)\r\ndef _compile_pattern(pat):\r\n    if isinstance(pat, bytes):\r\n        pat_str = str(pat, 'ISO-8859-1')\r\n        res_str = translate(pat_str)\r\n        res = bytes(res_str, 'ISO-8859-1')\r\n    else:\r\n        res = translate(pat)\r\n    return re.compile(res).match\r\ndef filter(names, pat):\r\n    \"\"\"Return the subset of the list NAMES that match PAT.\"\"\"\r\n    result = []\r\n    pat = os.path.normcase(pat)\r\n    match = _compile_pattern(pat)\r\n    if os.path is posixpath:\r\n        for name in names:\r\n            if match(name):\r\n                result.append(name)\r\n    else:\r\n        for name in names:\r\n            if match(os.path.normcase(name)):\r\n                result.append(name)\r\n    return result\r\ndef fnmatchcase(name, pat):\r\n    \"\"\"Test whether FILENAME matches PATTERN, including case.\r\n    This is a version of fnmatch() which doesn't case-normalize\r\n    its arguments.\r\n    \"\"\"\r\n    match = _compile_pattern(pat)\r\n    return match(name) is not None\r\ndef translate(pat):\r\n    \"\"\"Translate a shell PATTERN to a regular expression.\r\n    There is no way to quote meta-characters.\r\n    \"\"\"\r\n    i, n = 0, len(pat)\r\n    res = ''\r\n    while i < n:\r\n        c = pat[i]\r\n        i = i+1\r\n        if c == '*':\r\n            res = res + '.*'\r\n        elif c == '?':\r\n            res = res + '.'\r\n        elif c == '[':\r\n            j = i\r\n            if j < n and pat[j] == '!':\r\n                j = j+1\r\n            if j < n and pat[j] == ']':\r\n                j = j+1\r\n            while j < n and pat[j] != ']':\r\n                j = j+1\r\n            if j >= n:\r\n                res = res + '\\\\['\r\n            else:\r\n                stuff = pat[i:j].replace('\\\\','\\\\\\\\')\r\n                i = j+1\r\n                if stuff[0] == '!':\r\n                    stuff = '^' + stuff[1:]\r\n                elif stuff[0] == '^':\r\n                    stuff = '\\\\' + stuff\r\n                res = '%s[%s]' % (res, stuff)\r\n        else:\r\n            res = res + re.escape(c)\r\n    return res + '\\Z(?ms)'\r\n", "/Lib/unittest/loader.py": "\"\"\"Loading unittests.\"\"\"\nimport os\nimport re\nimport sys\nimport traceback\nimport types\nimport functools\nfrom fnmatch import fnmatch\nfrom . import case, suite, util\n__unittest = True\nVALID_MODULE_NAME = re.compile(r'[_a-z]\\w*\\.py$', re.IGNORECASE)\ndef _make_failed_import_test(name, suiteClass):\n    message = 'Failed to import test module: %s\\n%s' % (name, traceback.format_exc())\n    return _make_failed_test('ModuleImportFailure', name, ImportError(message),\n                             suiteClass)\ndef _make_failed_load_tests(name, exception, suiteClass):\n    return _make_failed_test('LoadTestsFailure', name, exception, suiteClass)\ndef _make_failed_test(classname, methodname, exception, suiteClass):\n    def testFailure(self):\n        raise exception\n    attrs = {methodname: testFailure}\n    TestClass = type(classname, (case.TestCase,), attrs)\n    return suiteClass((TestClass(methodname),))\ndef _jython_aware_splitext(path):\n    if path.lower().endswith('$py.class'):\n        return path[:-9]\n    return os.path.splitext(path)[0]\nclass TestLoader(object):\n    \"\"\"\n    This class is responsible for loading tests according to various criteria\n    and returning them wrapped in a TestSuite\n    \"\"\"\n    testMethodPrefix = 'test'\n    sortTestMethodsUsing = staticmethod(util.three_way_cmp)\n    suiteClass = suite.TestSuite\n    _top_level_dir = None\n    def loadTestsFromTestCase(self, testCaseClass):\n        \"\"\"Return a suite of all tests cases contained in testCaseClass\"\"\"\n        if issubclass(testCaseClass, suite.TestSuite):\n            raise TypeError(\"Test cases should not be derived from TestSuite.\" \\\n                                \" Maybe you meant to derive from TestCase?\")\n        testCaseNames = self.getTestCaseNames(testCaseClass)\n        if not testCaseNames and hasattr(testCaseClass, 'runTest'):\n            testCaseNames = ['runTest']\n        loaded_suite = self.suiteClass(map(testCaseClass, testCaseNames))\n        return loaded_suite\n    def loadTestsFromModule(self, module, use_load_tests=True):\n        \"\"\"Return a suite of all tests cases contained in the given module\"\"\"\n        tests = []\n        for name in dir(module):\n            obj = getattr(module, name)\n            if isinstance(obj, type) and issubclass(obj, case.TestCase):\n                tests.append(self.loadTestsFromTestCase(obj))\n        load_tests = getattr(module, 'load_tests', None)\n        tests = self.suiteClass(tests)\n        if use_load_tests and load_tests is not None:\n            try:\n                return load_tests(self, tests, None)\n            except Exception as e:\n                return _make_failed_load_tests(module.__name__, e,\n                                               self.suiteClass)\n        return tests\n    def loadTestsFromName(self, name, module=None):\n        \"\"\"Return a suite of all tests cases given a string specifier.\n        The name may resolve either to a module, a test case class, a\n        test method within a test case class, or a callable object which\n        returns a TestCase or TestSuite instance.\n        The method optionally resolves the names relative to a given module.\n        \"\"\"\n        parts = name.split('.')\n        if module is None:\n            parts_copy = parts[:]\n            while parts_copy:\n                try:\n                    module = __import__('.'.join(parts_copy))\n                    break\n                except ImportError:\n                    del parts_copy[-1]\n                    if not parts_copy:\n                        raise\n            parts = parts[1:]\n        obj = module\n        for part in parts:\n            parent, obj = obj, getattr(obj, part)\n        if isinstance(obj, types.ModuleType):\n            return self.loadTestsFromModule(obj)\n        elif isinstance(obj, type) and issubclass(obj, case.TestCase):\n            return self.loadTestsFromTestCase(obj)\n        elif (isinstance(obj, types.FunctionType) and\n              isinstance(parent, type) and\n              issubclass(parent, case.TestCase)):\n            name = obj.__name__\n            inst = parent(name)\n            if not isinstance(getattr(inst, name), types.FunctionType):\n                return self.suiteClass([inst])\n        elif isinstance(obj, suite.TestSuite):\n            return obj\n        if callable(obj):\n            test = obj()\n            if isinstance(test, suite.TestSuite):\n                return test\n            elif isinstance(test, case.TestCase):\n                return self.suiteClass([test])\n            else:\n                raise TypeError(\"calling %s returned %s, not a test\" %\n                                (obj, test))\n        else:\n            raise TypeError(\"don't know how to make test from: %s\" % obj)\n    def loadTestsFromNames(self, names, module=None):\n        \"\"\"Return a suite of all tests cases found using the given sequence\n        of string specifiers. See 'loadTestsFromName()'.\n        \"\"\"\n        suites = [self.loadTestsFromName(name, module) for name in names]\n        return self.suiteClass(suites)\n    def getTestCaseNames(self, testCaseClass):\n        \"\"\"Return a sorted sequence of method names found within testCaseClass\n        \"\"\"\n        def isTestMethod(attrname, testCaseClass=testCaseClass,\n                         prefix=self.testMethodPrefix):\n            return attrname.startswith(prefix) and \\\n                callable(getattr(testCaseClass, attrname))\n        testFnNames = list(filter(isTestMethod, dir(testCaseClass)))\n        if self.sortTestMethodsUsing:\n            testFnNames.sort(key=functools.cmp_to_key(self.sortTestMethodsUsing))\n        return testFnNames\n    def discover(self, start_dir, pattern='test*.py', top_level_dir=None):\n        \"\"\"Find and return all test modules from the specified start\n        directory, recursing into subdirectories to find them and return all\n        tests found within them. Only test files that match the pattern will\n        be loaded. (Using shell style pattern matching.)\n        All test modules must be importable from the top level of the project.\n        If the start directory is not the top level directory then the top\n        level directory must be specified separately.\n        If a test package name (directory with '__init__.py') matches the\n        pattern then the package will be checked for a 'load_tests' function. If\n        this exists then it will be called with loader, tests, pattern.\n        If load_tests exists then discovery does  *not* recurse into the package,\n        load_tests is responsible for loading all tests in the package.\n        The pattern is deliberately not stored as a loader attribute so that\n        packages can continue discovery themselves. top_level_dir is stored so\n        load_tests does not need to pass this argument in to loader.discover().\n        \"\"\"\n        set_implicit_top = False\n        if top_level_dir is None and self._top_level_dir is not None:\n            top_level_dir = self._top_level_dir\n        elif top_level_dir is None:\n            set_implicit_top = True\n            top_level_dir = start_dir\n        top_level_dir = os.path.abspath(top_level_dir)\n        if not top_level_dir in sys.path:\n            sys.path.insert(0, top_level_dir)\n        self._top_level_dir = top_level_dir\n        is_not_importable = False\n        if os.path.isdir(os.path.abspath(start_dir)):\n            start_dir = os.path.abspath(start_dir)\n            if start_dir != top_level_dir:\n                is_not_importable = not os.path.isfile(os.path.join(start_dir, '__init__.py'))\n        else:\n            try:\n                __import__(start_dir)\n            except ImportError:\n                is_not_importable = True\n            else:\n                the_module = sys.modules[start_dir]\n                top_part = start_dir.split('.')[0]\n                start_dir = os.path.abspath(os.path.dirname((the_module.__file__)))\n                if set_implicit_top:\n                    self._top_level_dir = self._get_directory_containing_module(top_part)\n                    sys.path.remove(top_level_dir)\n        if is_not_importable:\n            raise ImportError('Start directory is not importable: %r' % start_dir)\n        tests = list(self._find_tests(start_dir, pattern))\n        return self.suiteClass(tests)\n    def _get_directory_containing_module(self, module_name):\n        module = sys.modules[module_name]\n        full_path = os.path.abspath(module.__file__)\n        if os.path.basename(full_path).lower().startswith('__init__.py'):\n            return os.path.dirname(os.path.dirname(full_path))\n        else:\n            return os.path.dirname(full_path)\n    def _get_name_from_path(self, path):\n        path = _jython_aware_splitext(os.path.normpath(path))\n        _relpath = os.path.relpath(path, self._top_level_dir)\n        assert not os.path.isabs(_relpath), \"Path must be within the project\"\n        assert not _relpath.startswith('..'), \"Path must be within the project\"\n        name = _relpath.replace(os.path.sep, '.')\n        return name\n    def _get_module_from_name(self, name):\n        __import__(name)\n        return sys.modules[name]\n    def _match_path(self, path, full_path, pattern):\n        return fnmatch(path, pattern)\n    def _find_tests(self, start_dir, pattern):\n        \"\"\"Used by discovery. Yields test suites it loads.\"\"\"\n        paths = os.listdir(start_dir)\n        for path in paths:\n            full_path = os.path.join(start_dir, path)\n            if os.path.isfile(full_path):\n                if not VALID_MODULE_NAME.match(path):\n                    continue\n                if not self._match_path(path, full_path, pattern):\n                    continue\n                name = self._get_name_from_path(full_path)\n                try:\n                    module = self._get_module_from_name(name)\n                except:\n                    yield _make_failed_import_test(name, self.suiteClass)\n                else:\n                    mod_file = os.path.abspath(getattr(module, '__file__', full_path))\n                    realpath = _jython_aware_splitext(mod_file)\n                    fullpath_noext = _jython_aware_splitext(full_path)\n                    if realpath.lower() != fullpath_noext.lower():\n                        module_dir = os.path.dirname(realpath)\n                        mod_name = _jython_aware_splitext(os.path.basename(full_path))\n                        expected_dir = os.path.dirname(full_path)\n                        msg = (\"%r module incorrectly imported from %r. Expected %r. \"\n                               \"Is this module globally installed?\")\n                        raise ImportError(msg % (mod_name, module_dir, expected_dir))\n                    yield self.loadTestsFromModule(module)\n            elif os.path.isdir(full_path):\n                if not os.path.isfile(os.path.join(full_path, '__init__.py')):\n                    continue\n                load_tests = None\n                tests = None\n                if fnmatch(path, pattern):\n                    name = self._get_name_from_path(full_path)\n                    package = self._get_module_from_name(name)\n                    load_tests = getattr(package, 'load_tests', None)\n                    tests = self.loadTestsFromModule(package, use_load_tests=False)\n                if load_tests is None:\n                    if tests is not None:\n                        yield tests\n                    for test in self._find_tests(full_path, pattern):\n                        yield test\n                else:\n                    try:\n                        yield load_tests(self, tests, pattern)\n                    except Exception as e:\n                        yield _make_failed_load_tests(package.__name__, e,\n                                                      self.suiteClass)\ndefaultTestLoader = TestLoader()\ndef _makeLoader(prefix, sortUsing, suiteClass=None):\n    loader = TestLoader()\n    loader.sortTestMethodsUsing = sortUsing\n    loader.testMethodPrefix = prefix\n    if suiteClass:\n        loader.suiteClass = suiteClass\n    return loader\ndef getTestCaseNames(testCaseClass, prefix, sortUsing=util.three_way_cmp):\n    return _makeLoader(prefix, sortUsing).getTestCaseNames(testCaseClass)\ndef makeSuite(testCaseClass, prefix='test', sortUsing=util.three_way_cmp,\n              suiteClass=suite.TestSuite):\n    return _makeLoader(prefix, sortUsing, suiteClass).loadTestsFromTestCase(\n        testCaseClass)\ndef findTestCases(module, prefix='test', sortUsing=util.three_way_cmp,\n                  suiteClass=suite.TestSuite):\n    return _makeLoader(prefix, sortUsing, suiteClass).loadTestsFromModule(\\\n        module)\n", "/Lib/tarfile.py": "\"\"\"Read from and write to tar format archives.\n\"\"\"\nversion     = \"0.9.0\"\n__author__  = \"Lars Gust\\u00e4bel (lars@gustaebel.de)\"\n__date__    = \"$Date: 2011-02-25 17:42:01 +0200 (Fri, 25 Feb 2011) $\"\n__cvsid__   = \"$Id: tarfile.py 88586 2011-02-25 15:42:01Z marc-andre.lemburg $\"\n__credits__ = \"Gustavo Niemeyer, Niels Gust\\u00e4bel, Richard Townsend.\"\nimport sys\nimport os\nimport io\nimport shutil\nimport stat\nimport time\nimport struct\nimport copy\nimport re\ntry:\n    import grp, pwd\nexcept ImportError:\n    grp = pwd = None\nsymlink_exception = (AttributeError, NotImplementedError)\ntry:\n    symlink_exception += (WindowsError,)\nexcept NameError:\n    pass\n__all__ = [\"TarFile\", \"TarInfo\", \"is_tarfile\", \"TarError\"]\nfrom builtins import open as _open # Since 'open' is TarFile.open\nNUL = b\"\\0\"                     # the null character\nBLOCKSIZE = 512                 # length of processing blocks\nRECORDSIZE = BLOCKSIZE * 20     # length of records\nGNU_MAGIC = b\"ustar  \\0\"        # magic gnu tar string\nPOSIX_MAGIC = b\"ustar\\x0000\"    # magic posix tar string\nLENGTH_NAME = 100               # maximum length of a filename\nLENGTH_LINK = 100               # maximum length of a linkname\nLENGTH_PREFIX = 155             # maximum length of the prefix field\nREGTYPE = b\"0\"                  # regular file\nAREGTYPE = b\"\\0\"                # regular file\nLNKTYPE = b\"1\"                  # link (inside tarfile)\nSYMTYPE = b\"2\"                  # symbolic link\nCHRTYPE = b\"3\"                  # character special device\nBLKTYPE = b\"4\"                  # block special device\nDIRTYPE = b\"5\"                  # directory\nFIFOTYPE = b\"6\"                 # fifo special device\nCONTTYPE = b\"7\"                 # contiguous file\nGNUTYPE_LONGNAME = b\"L\"         # GNU tar longname\nGNUTYPE_LONGLINK = b\"K\"         # GNU tar longlink\nGNUTYPE_SPARSE = b\"S\"           # GNU tar sparse file\nXHDTYPE = b\"x\"                  # POSIX.1-2001 extended header\nXGLTYPE = b\"g\"                  # POSIX.1-2001 global header\nSOLARIS_XHDTYPE = b\"X\"          # Solaris extended header\nUSTAR_FORMAT = 0                # POSIX.1-1988 (ustar) format\nGNU_FORMAT = 1                  # GNU tar format\nPAX_FORMAT = 2                  # POSIX.1-2001 (pax) format\nDEFAULT_FORMAT = GNU_FORMAT\nSUPPORTED_TYPES = (REGTYPE, AREGTYPE, LNKTYPE,\n                   SYMTYPE, DIRTYPE, FIFOTYPE,\n                   CONTTYPE, CHRTYPE, BLKTYPE,\n                   GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n                   GNUTYPE_SPARSE)\nREGULAR_TYPES = (REGTYPE, AREGTYPE,\n                 CONTTYPE, GNUTYPE_SPARSE)\nGNU_TYPES = (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK,\n             GNUTYPE_SPARSE)\nPAX_FIELDS = (\"path\", \"linkpath\", \"size\", \"mtime\",\n              \"uid\", \"gid\", \"uname\", \"gname\")\nPAX_NAME_FIELDS = {\"path\", \"linkpath\", \"uname\", \"gname\"}\nPAX_NUMBER_FIELDS = {\n    \"atime\": float,\n    \"ctime\": float,\n    \"mtime\": float,\n    \"uid\": int,\n    \"gid\": int,\n    \"size\": int\n}\nS_IFLNK = 0o120000        # symbolic link\nS_IFREG = 0o100000        # regular file\nS_IFBLK = 0o060000        # block device\nS_IFDIR = 0o040000        # directory\nS_IFCHR = 0o020000        # character device\nS_IFIFO = 0o010000        # fifo\nTSUID   = 0o4000          # set UID on execution\nTSGID   = 0o2000          # set GID on execution\nTSVTX   = 0o1000          # reserved\nTUREAD  = 0o400           # read by owner\nTUWRITE = 0o200           # write by owner\nTUEXEC  = 0o100           # execute/search by owner\nTGREAD  = 0o040           # read by group\nTGWRITE = 0o020           # write by group\nTGEXEC  = 0o010           # execute/search by group\nTOREAD  = 0o004           # read by other\nTOWRITE = 0o002           # write by other\nTOEXEC  = 0o001           # execute/search by other\nif os.name in (\"nt\", \"ce\"):\n    ENCODING = \"utf-8\"\nelse:\n    ENCODING = sys.getfilesystemencoding()\ndef stn(s, length, encoding, errors):\n    \"\"\"Convert a string to a null-terminated bytes object.\n    \"\"\"\n    s = s.encode(encoding, errors)\n    return s[:length] + (length - len(s)) * NUL\ndef nts(s, encoding, errors):\n    \"\"\"Convert a null-terminated bytes object to a string.\n    \"\"\"\n    p = s.find(b\"\\0\")\n    if p != -1:\n        s = s[:p]\n    return s.decode(encoding, errors)\ndef nti(s):\n    \"\"\"Convert a number field to a python number.\n    \"\"\"\n    if s[0] in (0o200, 0o377):\n        n = 0\n        for i in range(len(s) - 1):\n            n <<= 8\n            n += s[i + 1]\n        if s[0] == 0o377:\n            n = -(256 ** (len(s) - 1) - n)\n    else:\n        try:\n            n = int(nts(s, \"ascii\", \"strict\") or \"0\", 8)\n        except ValueError:\n            raise InvalidHeaderError(\"invalid header\")\n    return n\ndef itn(n, digits=8, format=DEFAULT_FORMAT):\n    \"\"\"Convert a python number to a number field.\n    \"\"\"\n    if 0 <= n < 8 ** (digits - 1):\n        s = bytes(\"%0*o\" % (digits - 1, n), \"ascii\") + NUL\n    elif format == GNU_FORMAT and -256 ** (digits - 1) <= n < 256 ** (digits - 1):\n        if n >= 0:\n            s = bytearray([0o200])\n        else:\n            s = bytearray([0o377])\n            n = 256 ** digits + n\n        for i in range(digits - 1):\n            s.insert(1, n & 0o377)\n            n >>= 8\n    else:\n        raise ValueError(\"overflow in number field\")\n    return s\ndef calc_chksums(buf):\n    \"\"\"Calculate the checksum for a member's header by summing up all\n       characters except for the chksum field which is treated as if\n       it was filled with spaces. According to the GNU tar sources,\n       some tars (Sun and NeXT) calculate chksum with signed char,\n       which will be different if there are chars in the buffer with\n       the high bit set. So we calculate two checksums, unsigned and\n       signed.\n    \"\"\"\n    unsigned_chksum = 256 + sum(struct.unpack_from(\"148B8x356B\", buf))\n    signed_chksum = 256 + sum(struct.unpack_from(\"148b8x356b\", buf))\n    return unsigned_chksum, signed_chksum\ndef copyfileobj(src, dst, length=None):\n    \"\"\"Copy length bytes from fileobj src to fileobj dst.\n       If length is None, copy the entire content.\n    \"\"\"\n    if length == 0:\n        return\n    if length is None:\n        shutil.copyfileobj(src, dst)\n        return\n    BUFSIZE = 16 * 1024\n    blocks, remainder = divmod(length, BUFSIZE)\n    for b in range(blocks):\n        buf = src.read(BUFSIZE)\n        if len(buf) < BUFSIZE:\n            raise IOError(\"end of file reached\")\n        dst.write(buf)\n    if remainder != 0:\n        buf = src.read(remainder)\n        if len(buf) < remainder:\n            raise IOError(\"end of file reached\")\n        dst.write(buf)\n    return\ndef filemode(mode):\n    \"\"\"Deprecated in this location; use stat.filemode.\"\"\"\n    import warnings\n    warnings.warn(\"deprecated in favor of stat.filemode\",\n                  DeprecationWarning, 2)\n    return stat.filemode(mode)\nclass TarError(Exception):\n    \"\"\"Base exception.\"\"\"\n    pass\nclass ExtractError(TarError):\n    \"\"\"General exception for extract errors.\"\"\"\n    pass\nclass ReadError(TarError):\n    \"\"\"Exception for unreadble tar archives.\"\"\"\n    pass\nclass CompressionError(TarError):\n    \"\"\"Exception for unavailable compression methods.\"\"\"\n    pass\nclass StreamError(TarError):\n    \"\"\"Exception for unsupported operations on stream-like TarFiles.\"\"\"\n    pass\nclass HeaderError(TarError):\n    \"\"\"Base exception for header errors.\"\"\"\n    pass\nclass EmptyHeaderError(HeaderError):\n    \"\"\"Exception for empty headers.\"\"\"\n    pass\nclass TruncatedHeaderError(HeaderError):\n    \"\"\"Exception for truncated headers.\"\"\"\n    pass\nclass EOFHeaderError(HeaderError):\n    \"\"\"Exception for end of file headers.\"\"\"\n    pass\nclass InvalidHeaderError(HeaderError):\n    \"\"\"Exception for invalid headers.\"\"\"\n    pass\nclass SubsequentHeaderError(HeaderError):\n    \"\"\"Exception for missing and invalid extended headers.\"\"\"\n    pass\nclass _LowLevelFile:\n    \"\"\"Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.\n    \"\"\"\n    def __init__(self, name, mode):\n        mode = {\n            \"r\": os.O_RDONLY,\n            \"w\": os.O_WRONLY | os.O_CREAT | os.O_TRUNC,\n        }[mode]\n        if hasattr(os, \"O_BINARY\"):\n            mode |= os.O_BINARY\n        self.fd = os.open(name, mode, 0o666)\n    def close(self):\n        os.close(self.fd)\n    def read(self, size):\n        return os.read(self.fd, size)\n    def write(self, s):\n        os.write(self.fd, s)\nclass _Stream:\n    \"\"\"Class that serves as an adapter between TarFile and\n       a stream-like object.  The stream-like object only\n       needs to have a read() or write() method and is accessed\n       blockwise.  Use of gzip or bzip2 compression is possible.\n       A stream-like object could be for example: sys.stdin,\n       sys.stdout, a socket, a tape device etc.\n       _Stream is intended to be used only internally.\n    \"\"\"\n    def __init__(self, name, mode, comptype, fileobj, bufsize):\n        \"\"\"Construct a _Stream object.\n        \"\"\"\n        self._extfileobj = True\n        if fileobj is None:\n            fileobj = _LowLevelFile(name, mode)\n            self._extfileobj = False\n        if comptype == '*':\n            fileobj = _StreamProxy(fileobj)\n            comptype = fileobj.getcomptype()\n        self.name     = name or \"\"\n        self.mode     = mode\n        self.comptype = comptype\n        self.fileobj  = fileobj\n        self.bufsize  = bufsize\n        self.buf      = b\"\"\n        self.pos      = 0\n        self.closed   = False\n        try:\n            if comptype == \"gz\":\n                try:\n                    import zlib\n                except ImportError:\n                    raise CompressionError(\"zlib module is not available\")\n                self.zlib = zlib\n                self.crc = zlib.crc32(b\"\")\n                if mode == \"r\":\n                    self._init_read_gz()\n                    self.exception = zlib.error\n                else:\n                    self._init_write_gz()\n            elif comptype == \"bz2\":\n                try:\n                    import bz2\n                except ImportError:\n                    raise CompressionError(\"bz2 module is not available\")\n                if mode == \"r\":\n                    self.dbuf = b\"\"\n                    self.cmp = bz2.BZ2Decompressor()\n                    self.exception = IOError\n                else:\n                    self.cmp = bz2.BZ2Compressor()\n            elif comptype == \"xz\":\n                try:\n                    import lzma\n                except ImportError:\n                    raise CompressionError(\"lzma module is not available\")\n                if mode == \"r\":\n                    self.dbuf = b\"\"\n                    self.cmp = lzma.LZMADecompressor()\n                    self.exception = lzma.LZMAError\n                else:\n                    self.cmp = lzma.LZMACompressor()\n            elif comptype != \"tar\":\n                raise CompressionError(\"unknown compression type %r\" % comptype)\n        except:\n            if not self._extfileobj:\n                self.fileobj.close()\n            self.closed = True\n            raise\n    def __del__(self):\n        if hasattr(self, \"closed\") and not self.closed:\n            self.close()\n    def _init_write_gz(self):\n        \"\"\"Initialize for writing with gzip compression.\n        \"\"\"\n        self.cmp = self.zlib.compressobj(9, self.zlib.DEFLATED,\n                                            -self.zlib.MAX_WBITS,\n                                            self.zlib.DEF_MEM_LEVEL,\n                                            0)\n        timestamp = struct.pack(\"<L\", int(time.time()))\n        self.__write(b\"\\037\\213\\010\\010\" + timestamp + b\"\\002\\377\")\n        if self.name.endswith(\".gz\"):\n            self.name = self.name[:-3]\n        self.__write(self.name.encode(\"iso-8859-1\", \"replace\") + NUL)\n    def write(self, s):\n        \"\"\"Write string s to the stream.\n        \"\"\"\n        if self.comptype == \"gz\":\n            self.crc = self.zlib.crc32(s, self.crc)\n        self.pos += len(s)\n        if self.comptype != \"tar\":\n            s = self.cmp.compress(s)\n        self.__write(s)\n    def __write(self, s):\n        \"\"\"Write string s to the stream if a whole new block\n           is ready to be written.\n        \"\"\"\n        self.buf += s\n        while len(self.buf) > self.bufsize:\n            self.fileobj.write(self.buf[:self.bufsize])\n            self.buf = self.buf[self.bufsize:]\n    def close(self):\n        \"\"\"Close the _Stream object. No operation should be\n           done on it afterwards.\n        \"\"\"\n        if self.closed:\n            return\n        if self.mode == \"w\" and self.comptype != \"tar\":\n            self.buf += self.cmp.flush()\n        if self.mode == \"w\" and self.buf:\n            self.fileobj.write(self.buf)\n            self.buf = b\"\"\n            if self.comptype == \"gz\":\n                self.fileobj.write(struct.pack(\"<L\", self.crc & 0xffffffff))\n                self.fileobj.write(struct.pack(\"<L\", self.pos & 0xffffFFFF))\n        if not self._extfileobj:\n            self.fileobj.close()\n        self.closed = True\n    def _init_read_gz(self):\n        \"\"\"Initialize for reading a gzip compressed fileobj.\n        \"\"\"\n        self.cmp = self.zlib.decompressobj(-self.zlib.MAX_WBITS)\n        self.dbuf = b\"\"\n        if self.__read(2) != b\"\\037\\213\":\n            raise ReadError(\"not a gzip file\")\n        if self.__read(1) != b\"\\010\":\n            raise CompressionError(\"unsupported compression method\")\n        flag = ord(self.__read(1))\n        self.__read(6)\n        if flag & 4:\n            xlen = ord(self.__read(1)) + 256 * ord(self.__read(1))\n            self.read(xlen)\n        if flag & 8:\n            while True:\n                s = self.__read(1)\n                if not s or s == NUL:\n                    break\n        if flag & 16:\n            while True:\n                s = self.__read(1)\n                if not s or s == NUL:\n                    break\n        if flag & 2:\n            self.__read(2)\n    def tell(self):\n        \"\"\"Return the stream's file pointer position.\n        \"\"\"\n        return self.pos\n    def seek(self, pos=0):\n        \"\"\"Set the stream's file pointer to pos. Negative seeking\n           is forbidden.\n        \"\"\"\n        if pos - self.pos >= 0:\n            blocks, remainder = divmod(pos - self.pos, self.bufsize)\n            for i in range(blocks):\n                self.read(self.bufsize)\n            self.read(remainder)\n        else:\n            raise StreamError(\"seeking backwards is not allowed\")\n        return self.pos\n    def read(self, size=None):\n        \"\"\"Return the next size number of bytes from the stream.\n           If size is not defined, return all bytes of the stream\n           up to EOF.\n        \"\"\"\n        if size is None:\n            t = []\n            while True:\n                buf = self._read(self.bufsize)\n                if not buf:\n                    break\n                t.append(buf)\n            buf = \"\".join(t)\n        else:\n            buf = self._read(size)\n        self.pos += len(buf)\n        return buf\n    def _read(self, size):\n        \"\"\"Return size bytes from the stream.\n        \"\"\"\n        if self.comptype == \"tar\":\n            return self.__read(size)\n        c = len(self.dbuf)\n        while c < size:\n            buf = self.__read(self.bufsize)\n            if not buf:\n                break\n            try:\n                buf = self.cmp.decompress(buf)\n            except self.exception:\n                raise ReadError(\"invalid compressed data\")\n            self.dbuf += buf\n            c += len(buf)\n        buf = self.dbuf[:size]\n        self.dbuf = self.dbuf[size:]\n        return buf\n    def __read(self, size):\n        \"\"\"Return size bytes from stream. If internal buffer is empty,\n           read another block from the stream.\n        \"\"\"\n        c = len(self.buf)\n        while c < size:\n            buf = self.fileobj.read(self.bufsize)\n            if not buf:\n                break\n            self.buf += buf\n            c += len(buf)\n        buf = self.buf[:size]\n        self.buf = self.buf[size:]\n        return buf\nclass _StreamProxy(object):\n    \"\"\"Small proxy class that enables transparent compression\n       detection for the Stream interface (mode 'r|*').\n    \"\"\"\n    def __init__(self, fileobj):\n        self.fileobj = fileobj\n        self.buf = self.fileobj.read(BLOCKSIZE)\n    def read(self, size):\n        self.read = self.fileobj.read\n        return self.buf\n    def getcomptype(self):\n        if self.buf.startswith(b\"\\x1f\\x8b\\x08\"):\n            return \"gz\"\n        elif self.buf[0:3] == b\"BZh\" and self.buf[4:10] == b\"1AY&SY\":\n            return \"bz2\"\n        elif self.buf.startswith((b\"\\x5d\\x00\\x00\\x80\", b\"\\xfd7zXZ\")):\n            return \"xz\"\n        else:\n            return \"tar\"\n    def close(self):\n        self.fileobj.close()\nclass _FileInFile(object):\n    \"\"\"A thin wrapper around an existing file object that\n       provides a part of its data as an individual file\n       object.\n    \"\"\"\n    def __init__(self, fileobj, offset, size, blockinfo=None):\n        self.fileobj = fileobj\n        self.offset = offset\n        self.size = size\n        self.position = 0\n        self.name = getattr(fileobj, \"name\", None)\n        self.closed = False\n        if blockinfo is None:\n            blockinfo = [(0, size)]\n        self.map_index = 0\n        self.map = []\n        lastpos = 0\n        realpos = self.offset\n        for offset, size in blockinfo:\n            if offset > lastpos:\n                self.map.append((False, lastpos, offset, None))\n            self.map.append((True, offset, offset + size, realpos))\n            realpos += size\n            lastpos = offset + size\n        if lastpos < self.size:\n            self.map.append((False, lastpos, self.size, None))\n    def flush(self):\n        pass\n    def readable(self):\n        return True\n    def writable(self):\n        return False\n    def seekable(self):\n        return self.fileobj.seekable()\n    def tell(self):\n        \"\"\"Return the current file position.\n        \"\"\"\n        return self.position\n    def seek(self, position, whence=io.SEEK_SET):\n        \"\"\"Seek to a position in the file.\n        \"\"\"\n        if whence == io.SEEK_SET:\n            self.position = min(max(position, 0), self.size)\n        elif whence == io.SEEK_CUR:\n            if position < 0:\n                self.position = max(self.position + position, 0)\n            else:\n                self.position = min(self.position + position, self.size)\n        elif whence == io.SEEK_END:\n            self.position = max(min(self.size + position, self.size), 0)\n        else:\n            raise ValueError(\"Invalid argument\")\n        return self.position\n    def read(self, size=None):\n        \"\"\"Read data from the file.\n        \"\"\"\n        if size is None:\n            size = self.size - self.position\n        else:\n            size = min(size, self.size - self.position)\n        buf = b\"\"\n        while size > 0:\n            while True:\n                data, start, stop, offset = self.map[self.map_index]\n                if start <= self.position < stop:\n                    break\n                else:\n                    self.map_index += 1\n                    if self.map_index == len(self.map):\n                        self.map_index = 0\n            length = min(size, stop - self.position)\n            if data:\n                self.fileobj.seek(offset + (self.position - start))\n                buf += self.fileobj.read(length)\n            else:\n                buf += NUL * length\n            size -= length\n            self.position += length\n        return buf\n    def readinto(self, b):\n        buf = self.read(len(b))\n        b[:len(buf)] = buf\n        return len(buf)\n    def close(self):\n        self.closed = True\nclass ExFileObject(io.BufferedReader):\n    def __init__(self, tarfile, tarinfo):\n        fileobj = _FileInFile(tarfile.fileobj, tarinfo.offset_data,\n                tarinfo.size, tarinfo.sparse)\n        super().__init__(fileobj)\nclass TarInfo(object):\n    \"\"\"Informational class which holds the details about an\n       archive member given by a tar header block.\n       TarInfo objects are returned by TarFile.getmember(),\n       TarFile.getmembers() and TarFile.gettarinfo() and are\n       usually created internally.\n    \"\"\"\n    __slots__ = (\"name\", \"mode\", \"uid\", \"gid\", \"size\", \"mtime\",\n                 \"chksum\", \"type\", \"linkname\", \"uname\", \"gname\",\n                 \"devmajor\", \"devminor\",\n                 \"offset\", \"offset_data\", \"pax_headers\", \"sparse\",\n                 \"tarfile\", \"_sparse_structs\", \"_link_target\")\n    def __init__(self, name=\"\"):\n        \"\"\"Construct a TarInfo object. name is the optional name\n           of the member.\n        \"\"\"\n        self.name = name        # member name\n        self.mode = 0o644       # file permissions\n        self.uid = 0            # user id\n        self.gid = 0            # group id\n        self.size = 0           # file size\n        self.mtime = 0          # modification time\n        self.chksum = 0         # header checksum\n        self.type = REGTYPE     # member type\n        self.linkname = \"\"      # link name\n        self.uname = \"\"         # user name\n        self.gname = \"\"         # group name\n        self.devmajor = 0       # device major number\n        self.devminor = 0       # device minor number\n        self.offset = 0         # the tar header starts here\n        self.offset_data = 0    # the file's data starts here\n        self.sparse = None      # sparse member information\n        self.pax_headers = {}   # pax header information\n    def _getpath(self):\n        return self.name\n    def _setpath(self, name):\n        self.name = name\n    path = property(_getpath, _setpath)\n    def _getlinkpath(self):\n        return self.linkname\n    def _setlinkpath(self, linkname):\n        self.linkname = linkname\n    linkpath = property(_getlinkpath, _setlinkpath)\n    def __repr__(self):\n        return \"<%s %r at %#x>\" % (self.__class__.__name__,self.name,id(self))\n    def get_info(self):\n        \"\"\"Return the TarInfo's attributes as a dictionary.\n        \"\"\"\n        info = {\n            \"name\":     self.name,\n            \"mode\":     self.mode & 0o7777,\n            \"uid\":      self.uid,\n            \"gid\":      self.gid,\n            \"size\":     self.size,\n            \"mtime\":    self.mtime,\n            \"chksum\":   self.chksum,\n            \"type\":     self.type,\n            \"linkname\": self.linkname,\n            \"uname\":    self.uname,\n            \"gname\":    self.gname,\n            \"devmajor\": self.devmajor,\n            \"devminor\": self.devminor\n        }\n        if info[\"type\"] == DIRTYPE and not info[\"name\"].endswith(\"/\"):\n            info[\"name\"] += \"/\"\n        return info\n    def tobuf(self, format=DEFAULT_FORMAT, encoding=ENCODING, errors=\"surrogateescape\"):\n        \"\"\"Return a tar header as a string of 512 byte blocks.\n        \"\"\"\n        info = self.get_info()\n        if format == USTAR_FORMAT:\n            return self.create_ustar_header(info, encoding, errors)\n        elif format == GNU_FORMAT:\n            return self.create_gnu_header(info, encoding, errors)\n        elif format == PAX_FORMAT:\n            return self.create_pax_header(info, encoding)\n        else:\n            raise ValueError(\"invalid format\")\n    def create_ustar_header(self, info, encoding, errors):\n        \"\"\"Return the object as a ustar header block.\n        \"\"\"\n        info[\"magic\"] = POSIX_MAGIC\n        if len(info[\"linkname\"]) > LENGTH_LINK:\n            raise ValueError(\"linkname is too long\")\n        if len(info[\"name\"]) > LENGTH_NAME:\n            info[\"prefix\"], info[\"name\"] = self._posix_split_name(info[\"name\"])\n        return self._create_header(info, USTAR_FORMAT, encoding, errors)\n    def create_gnu_header(self, info, encoding, errors):\n        \"\"\"Return the object as a GNU header block sequence.\n        \"\"\"\n        info[\"magic\"] = GNU_MAGIC\n        buf = b\"\"\n        if len(info[\"linkname\"]) > LENGTH_LINK:\n            buf += self._create_gnu_long_header(info[\"linkname\"], GNUTYPE_LONGLINK, encoding, errors)\n        if len(info[\"name\"]) > LENGTH_NAME:\n            buf += self._create_gnu_long_header(info[\"name\"], GNUTYPE_LONGNAME, encoding, errors)\n        return buf + self._create_header(info, GNU_FORMAT, encoding, errors)\n    def create_pax_header(self, info, encoding):\n        \"\"\"Return the object as a ustar header block. If it cannot be\n           represented this way, prepend a pax extended header sequence\n           with supplement information.\n        \"\"\"\n        info[\"magic\"] = POSIX_MAGIC\n        pax_headers = self.pax_headers.copy()\n        for name, hname, length in (\n                (\"name\", \"path\", LENGTH_NAME), (\"linkname\", \"linkpath\", LENGTH_LINK),\n                (\"uname\", \"uname\", 32), (\"gname\", \"gname\", 32)):\n            if hname in pax_headers:\n                continue\n            try:\n                info[name].encode(\"ascii\", \"strict\")\n            except UnicodeEncodeError:\n                pax_headers[hname] = info[name]\n                continue\n            if len(info[name]) > length:\n                pax_headers[hname] = info[name]\n        for name, digits in ((\"uid\", 8), (\"gid\", 8), (\"size\", 12), (\"mtime\", 12)):\n            if name in pax_headers:\n                info[name] = 0\n                continue\n            val = info[name]\n            if not 0 <= val < 8 ** (digits - 1) or isinstance(val, float):\n                pax_headers[name] = str(val)\n                info[name] = 0\n        if pax_headers:\n            buf = self._create_pax_generic_header(pax_headers, XHDTYPE, encoding)\n        else:\n            buf = b\"\"\n        return buf + self._create_header(info, USTAR_FORMAT, \"ascii\", \"replace\")\n    @classmethod\n    def create_pax_global_header(cls, pax_headers):\n        \"\"\"Return the object as a pax global header block sequence.\n        \"\"\"\n        return cls._create_pax_generic_header(pax_headers, XGLTYPE, \"utf-8\")\n    def _posix_split_name(self, name):\n        \"\"\"Split a name longer than 100 chars into a prefix\n           and a name part.\n        \"\"\"\n        prefix = name[:LENGTH_PREFIX + 1]\n        while prefix and prefix[-1] != \"/\":\n            prefix = prefix[:-1]\n        name = name[len(prefix):]\n        prefix = prefix[:-1]\n        if not prefix or len(name) > LENGTH_NAME:\n            raise ValueError(\"name is too long\")\n        return prefix, name\n    @staticmethod\n    def _create_header(info, format, encoding, errors):\n        \"\"\"Return a header block. info is a dictionary with file\n           information, format must be one of the *_FORMAT constants.\n        \"\"\"\n        parts = [\n            stn(info.get(\"name\", \"\"), 100, encoding, errors),\n            itn(info.get(\"mode\", 0) & 0o7777, 8, format),\n            itn(info.get(\"uid\", 0), 8, format),\n            itn(info.get(\"gid\", 0), 8, format),\n            itn(info.get(\"size\", 0), 12, format),\n            itn(info.get(\"mtime\", 0), 12, format),\n            b\"        \", # checksum field\n            info.get(\"type\", REGTYPE),\n            stn(info.get(\"linkname\", \"\"), 100, encoding, errors),\n            info.get(\"magic\", POSIX_MAGIC),\n            stn(info.get(\"uname\", \"\"), 32, encoding, errors),\n            stn(info.get(\"gname\", \"\"), 32, encoding, errors),\n            itn(info.get(\"devmajor\", 0), 8, format),\n            itn(info.get(\"devminor\", 0), 8, format),\n            stn(info.get(\"prefix\", \"\"), 155, encoding, errors)\n        ]\n        buf = struct.pack(\"%ds\" % BLOCKSIZE, b\"\".join(parts))\n        chksum = calc_chksums(buf[-BLOCKSIZE:])[0]\n        buf = buf[:-364] + bytes(\"%06o\\0\" % chksum, \"ascii\") + buf[-357:]\n        return buf\n    @staticmethod\n    def _create_payload(payload):\n        \"\"\"Return the string payload filled with zero bytes\n           up to the next 512 byte border.\n        \"\"\"\n        blocks, remainder = divmod(len(payload), BLOCKSIZE)\n        if remainder > 0:\n            payload += (BLOCKSIZE - remainder) * NUL\n        return payload\n    @classmethod\n    def _create_gnu_long_header(cls, name, type, encoding, errors):\n        \"\"\"Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence\n           for name.\n        \"\"\"\n        name = name.encode(encoding, errors) + NUL\n        info = {}\n        info[\"name\"] = \"././@LongLink\"\n        info[\"type\"] = type\n        info[\"size\"] = len(name)\n        info[\"magic\"] = GNU_MAGIC\n        return cls._create_header(info, USTAR_FORMAT, encoding, errors) + \\\n                cls._create_payload(name)\n    @classmethod\n    def _create_pax_generic_header(cls, pax_headers, type, encoding):\n        \"\"\"Return a POSIX.1-2008 extended or global header sequence\n           that contains a list of keyword, value pairs. The values\n           must be strings.\n        \"\"\"\n        binary = False\n        for keyword, value in pax_headers.items():\n            try:\n                value.encode(\"utf-8\", \"strict\")\n            except UnicodeEncodeError:\n                binary = True\n                break\n        records = b\"\"\n        if binary:\n            records += b\"21 hdrcharset=BINARY\\n\"\n        for keyword, value in pax_headers.items():\n            keyword = keyword.encode(\"utf-8\")\n            if binary:\n                value = value.encode(encoding, \"surrogateescape\")\n            else:\n                value = value.encode(\"utf-8\")\n            l = len(keyword) + len(value) + 3   # ' ' + '=' + '\\n'\n            n = p = 0\n            while True:\n                n = l + len(str(p))\n                if n == p:\n                    break\n                p = n\n            records += bytes(str(p), \"ascii\") + b\" \" + keyword + b\"=\" + value + b\"\\n\"\n        info = {}\n        info[\"name\"] = \"././@PaxHeader\"\n        info[\"type\"] = type\n        info[\"size\"] = len(records)\n        info[\"magic\"] = POSIX_MAGIC\n        return cls._create_header(info, USTAR_FORMAT, \"ascii\", \"replace\") + \\\n                cls._create_payload(records)\n    @classmethod\n    def frombuf(cls, buf, encoding, errors):\n        \"\"\"Construct a TarInfo object from a 512 byte bytes object.\n        \"\"\"\n        if len(buf) == 0:\n            raise EmptyHeaderError(\"empty header\")\n        if len(buf) != BLOCKSIZE:\n            raise TruncatedHeaderError(\"truncated header\")\n        if buf.count(NUL) == BLOCKSIZE:\n            raise EOFHeaderError(\"end of file header\")\n        chksum = nti(buf[148:156])\n        if chksum not in calc_chksums(buf):\n            raise InvalidHeaderError(\"bad checksum\")\n        obj = cls()\n        obj.name = nts(buf[0:100], encoding, errors)\n        obj.mode = nti(buf[100:108])\n        obj.uid = nti(buf[108:116])\n        obj.gid = nti(buf[116:124])\n        obj.size = nti(buf[124:136])\n        obj.mtime = nti(buf[136:148])\n        obj.chksum = chksum\n        obj.type = buf[156:157]\n        obj.linkname = nts(buf[157:257], encoding, errors)\n        obj.uname = nts(buf[265:297], encoding, errors)\n        obj.gname = nts(buf[297:329], encoding, errors)\n        obj.devmajor = nti(buf[329:337])\n        obj.devminor = nti(buf[337:345])\n        prefix = nts(buf[345:500], encoding, errors)\n        if obj.type == AREGTYPE and obj.name.endswith(\"/\"):\n            obj.type = DIRTYPE\n        if obj.type == GNUTYPE_SPARSE:\n            pos = 386\n            structs = []\n            for i in range(4):\n                try:\n                    offset = nti(buf[pos:pos + 12])\n                    numbytes = nti(buf[pos + 12:pos + 24])\n                except ValueError:\n                    break\n                structs.append((offset, numbytes))\n                pos += 24\n            isextended = bool(buf[482])\n            origsize = nti(buf[483:495])\n            obj._sparse_structs = (structs, isextended, origsize)\n        if obj.isdir():\n            obj.name = obj.name.rstrip(\"/\")\n        if prefix and obj.type not in GNU_TYPES:\n            obj.name = prefix + \"/\" + obj.name\n        return obj\n    @classmethod\n    def fromtarfile(cls, tarfile):\n        \"\"\"Return the next TarInfo object from TarFile object\n           tarfile.\n        \"\"\"\n        buf = tarfile.fileobj.read(BLOCKSIZE)\n        obj = cls.frombuf(buf, tarfile.encoding, tarfile.errors)\n        obj.offset = tarfile.fileobj.tell() - BLOCKSIZE\n        return obj._proc_member(tarfile)\n    def _proc_member(self, tarfile):\n        \"\"\"Choose the right processing method depending on\n           the type and call it.\n        \"\"\"\n        if self.type in (GNUTYPE_LONGNAME, GNUTYPE_LONGLINK):\n            return self._proc_gnulong(tarfile)\n        elif self.type == GNUTYPE_SPARSE:\n            return self._proc_sparse(tarfile)\n        elif self.type in (XHDTYPE, XGLTYPE, SOLARIS_XHDTYPE):\n            return self._proc_pax(tarfile)\n        else:\n            return self._proc_builtin(tarfile)\n    def _proc_builtin(self, tarfile):\n        \"\"\"Process a builtin type or an unknown type which\n           will be treated as a regular file.\n        \"\"\"\n        self.offset_data = tarfile.fileobj.tell()\n        offset = self.offset_data\n        if self.isreg() or self.type not in SUPPORTED_TYPES:\n            offset += self._block(self.size)\n        tarfile.offset = offset\n        self._apply_pax_info(tarfile.pax_headers, tarfile.encoding, tarfile.errors)\n        return self\n    def _proc_gnulong(self, tarfile):\n        \"\"\"Process the blocks that hold a GNU longname\n           or longlink member.\n        \"\"\"\n        buf = tarfile.fileobj.read(self._block(self.size))\n        try:\n            next = self.fromtarfile(tarfile)\n        except HeaderError:\n            raise SubsequentHeaderError(\"missing or bad subsequent header\")\n        next.offset = self.offset\n        if self.type == GNUTYPE_LONGNAME:\n            next.name = nts(buf, tarfile.encoding, tarfile.errors)\n        elif self.type == GNUTYPE_LONGLINK:\n            next.linkname = nts(buf, tarfile.encoding, tarfile.errors)\n        return next\n    def _proc_sparse(self, tarfile):\n        \"\"\"Process a GNU sparse header plus extra headers.\n        \"\"\"\n        structs, isextended, origsize = self._sparse_structs\n        del self._sparse_structs\n        while isextended:\n            buf = tarfile.fileobj.read(BLOCKSIZE)\n            pos = 0\n            for i in range(21):\n                try:\n                    offset = nti(buf[pos:pos + 12])\n                    numbytes = nti(buf[pos + 12:pos + 24])\n                except ValueError:\n                    break\n                if offset and numbytes:\n                    structs.append((offset, numbytes))\n                pos += 24\n            isextended = bool(buf[504])\n        self.sparse = structs\n        self.offset_data = tarfile.fileobj.tell()\n        tarfile.offset = self.offset_data + self._block(self.size)\n        self.size = origsize\n        return self\n    def _proc_pax(self, tarfile):\n        \"\"\"Process an extended or global header as described in\n           POSIX.1-2008.\n        \"\"\"\n        buf = tarfile.fileobj.read(self._block(self.size))\n        if self.type == XGLTYPE:\n            pax_headers = tarfile.pax_headers\n        else:\n            pax_headers = tarfile.pax_headers.copy()\n        match = re.search(br\"\\d+ hdrcharset=([^\\n]+)\\n\", buf)\n        if match is not None:\n            pax_headers[\"hdrcharset\"] = match.group(1).decode(\"utf-8\")\n        hdrcharset = pax_headers.get(\"hdrcharset\")\n        if hdrcharset == \"BINARY\":\n            encoding = tarfile.encoding\n        else:\n            encoding = \"utf-8\"\n        regex = re.compile(br\"(\\d+) ([^=]+)=\")\n        pos = 0\n        while True:\n            match = regex.match(buf, pos)\n            if not match:\n                break\n            length, keyword = match.groups()\n            length = int(length)\n            value = buf[match.end(2) + 1:match.start(1) + length - 1]\n            keyword = self._decode_pax_field(keyword, \"utf-8\", \"utf-8\",\n                    tarfile.errors)\n            if keyword in PAX_NAME_FIELDS:\n                value = self._decode_pax_field(value, encoding, tarfile.encoding,\n                        tarfile.errors)\n            else:\n                value = self._decode_pax_field(value, \"utf-8\", \"utf-8\",\n                        tarfile.errors)\n            pax_headers[keyword] = value\n            pos += length\n        try:\n            next = self.fromtarfile(tarfile)\n        except HeaderError:\n            raise SubsequentHeaderError(\"missing or bad subsequent header\")\n        if \"GNU.sparse.map\" in pax_headers:\n            self._proc_gnusparse_01(next, pax_headers)\n        elif \"GNU.sparse.size\" in pax_headers:\n            self._proc_gnusparse_00(next, pax_headers, buf)\n        elif pax_headers.get(\"GNU.sparse.major\") == \"1\" and pax_headers.get(\"GNU.sparse.minor\") == \"0\":\n            self._proc_gnusparse_10(next, pax_headers, tarfile)\n        if self.type in (XHDTYPE, SOLARIS_XHDTYPE):\n            next._apply_pax_info(pax_headers, tarfile.encoding, tarfile.errors)\n            next.offset = self.offset\n            if \"size\" in pax_headers:\n                offset = next.offset_data\n                if next.isreg() or next.type not in SUPPORTED_TYPES:\n                    offset += next._block(next.size)\n                tarfile.offset = offset\n        return next\n    def _proc_gnusparse_00(self, next, pax_headers, buf):\n        \"\"\"Process a GNU tar extended sparse header, version 0.0.\n        \"\"\"\n        offsets = []\n        for match in re.finditer(br\"\\d+ GNU.sparse.offset=(\\d+)\\n\", buf):\n            offsets.append(int(match.group(1)))\n        numbytes = []\n        for match in re.finditer(br\"\\d+ GNU.sparse.numbytes=(\\d+)\\n\", buf):\n            numbytes.append(int(match.group(1)))\n        next.sparse = list(zip(offsets, numbytes))\n    def _proc_gnusparse_01(self, next, pax_headers):\n        \"\"\"Process a GNU tar extended sparse header, version 0.1.\n        \"\"\"\n        sparse = [int(x) for x in pax_headers[\"GNU.sparse.map\"].split(\",\")]\n        next.sparse = list(zip(sparse[::2], sparse[1::2]))\n    def _proc_gnusparse_10(self, next, pax_headers, tarfile):\n        \"\"\"Process a GNU tar extended sparse header, version 1.0.\n        \"\"\"\n        fields = None\n        sparse = []\n        buf = tarfile.fileobj.read(BLOCKSIZE)\n        fields, buf = buf.split(b\"\\n\", 1)\n        fields = int(fields)\n        while len(sparse) < fields * 2:\n            if b\"\\n\" not in buf:\n                buf += tarfile.fileobj.read(BLOCKSIZE)\n            number, buf = buf.split(b\"\\n\", 1)\n            sparse.append(int(number))\n        next.offset_data = tarfile.fileobj.tell()\n        next.sparse = list(zip(sparse[::2], sparse[1::2]))\n    def _apply_pax_info(self, pax_headers, encoding, errors):\n        \"\"\"Replace fields with supplemental information from a previous\n           pax extended or global header.\n        \"\"\"\n        for keyword, value in pax_headers.items():\n            if keyword == \"GNU.sparse.name\":\n                setattr(self, \"path\", value)\n            elif keyword == \"GNU.sparse.size\":\n                setattr(self, \"size\", int(value))\n            elif keyword == \"GNU.sparse.realsize\":\n                setattr(self, \"size\", int(value))\n            elif keyword in PAX_FIELDS:\n                if keyword in PAX_NUMBER_FIELDS:\n                    try:\n                        value = PAX_NUMBER_FIELDS[keyword](value)\n                    except ValueError:\n                        value = 0\n                if keyword == \"path\":\n                    value = value.rstrip(\"/\")\n                setattr(self, keyword, value)\n        self.pax_headers = pax_headers.copy()\n    def _decode_pax_field(self, value, encoding, fallback_encoding, fallback_errors):\n        \"\"\"Decode a single field from a pax record.\n        \"\"\"\n        try:\n            return value.decode(encoding, \"strict\")\n        except UnicodeDecodeError:\n            return value.decode(fallback_encoding, fallback_errors)\n    def _block(self, count):\n        \"\"\"Round up a byte count by BLOCKSIZE and return it,\n           e.g. _block(834) => 1024.\n        \"\"\"\n        blocks, remainder = divmod(count, BLOCKSIZE)\n        if remainder:\n            blocks += 1\n        return blocks * BLOCKSIZE\n    def isreg(self):\n        return self.type in REGULAR_TYPES\n    def isfile(self):\n        return self.isreg()\n    def isdir(self):\n        return self.type == DIRTYPE\n    def issym(self):\n        return self.type == SYMTYPE\n    def islnk(self):\n        return self.type == LNKTYPE\n    def ischr(self):\n        return self.type == CHRTYPE\n    def isblk(self):\n        return self.type == BLKTYPE\n    def isfifo(self):\n        return self.type == FIFOTYPE\n    def issparse(self):\n        return self.sparse is not None\n    def isdev(self):\n        return self.type in (CHRTYPE, BLKTYPE, FIFOTYPE)\nclass TarFile(object):\n    \"\"\"The TarFile Class provides an interface to tar archives.\n    \"\"\"\n    debug = 0                   # May be set from 0 (no msgs) to 3 (all msgs)\n    dereference = False         # If true, add content of linked file to the\n    ignore_zeros = False        # If true, skips empty or invalid blocks and\n    errorlevel = 1              # If 0, fatal errors only appear in debug\n    format = DEFAULT_FORMAT     # The format to use when creating an archive.\n    encoding = ENCODING         # Encoding for 8-bit character strings.\n    errors = None               # Error handler for unicode conversion.\n    tarinfo = TarInfo           # The default TarInfo class to use.\n    fileobject = ExFileObject   # The file-object for extractfile().\n    def __init__(self, name=None, mode=\"r\", fileobj=None, format=None,\n            tarinfo=None, dereference=None, ignore_zeros=None, encoding=None,\n            errors=\"surrogateescape\", pax_headers=None, debug=None, errorlevel=None):\n        \"\"\"Open an (uncompressed) tar archive `name'. `mode' is either 'r' to\n           read from an existing archive, 'a' to append data to an existing\n           file or 'w' to create a new file overwriting an existing one. `mode'\n           defaults to 'r'.\n           If `fileobj' is given, it is used for reading or writing data. If it\n           can be determined, `mode' is overridden by `fileobj's mode.\n           `fileobj' is not closed, when TarFile is closed.\n        \"\"\"\n        if len(mode) > 1 or mode not in \"raw\":\n            raise ValueError(\"mode must be 'r', 'a' or 'w'\")\n        self.mode = mode\n        self._mode = {\"r\": \"rb\", \"a\": \"r+b\", \"w\": \"wb\"}[mode]\n        if not fileobj:\n            if self.mode == \"a\" and not os.path.exists(name):\n                self.mode = \"w\"\n                self._mode = \"wb\"\n            fileobj = bltn_open(name, self._mode)\n            self._extfileobj = False\n        else:\n            if name is None and hasattr(fileobj, \"name\"):\n                name = fileobj.name\n            if hasattr(fileobj, \"mode\"):\n                self._mode = fileobj.mode\n            self._extfileobj = True\n        self.name = os.path.abspath(name) if name else None\n        self.fileobj = fileobj\n        if format is not None:\n            self.format = format\n        if tarinfo is not None:\n            self.tarinfo = tarinfo\n        if dereference is not None:\n            self.dereference = dereference\n        if ignore_zeros is not None:\n            self.ignore_zeros = ignore_zeros\n        if encoding is not None:\n            self.encoding = encoding\n        self.errors = errors\n        if pax_headers is not None and self.format == PAX_FORMAT:\n            self.pax_headers = pax_headers\n        else:\n            self.pax_headers = {}\n        if debug is not None:\n            self.debug = debug\n        if errorlevel is not None:\n            self.errorlevel = errorlevel\n        self.closed = False\n        self.members = []       # list of members as TarInfo objects\n        self._loaded = False    # flag if all members have been read\n        self.offset = self.fileobj.tell()\n        self.inodes = {}        # dictionary caching the inodes of\n        try:\n            if self.mode == \"r\":\n                self.firstmember = None\n                self.firstmember = self.next()\n            if self.mode == \"a\":\n                while True:\n                    self.fileobj.seek(self.offset)\n                    try:\n                        tarinfo = self.tarinfo.fromtarfile(self)\n                        self.members.append(tarinfo)\n                    except EOFHeaderError:\n                        self.fileobj.seek(self.offset)\n                        break\n                    except HeaderError as e:\n                        raise ReadError(str(e))\n            if self.mode in \"aw\":\n                self._loaded = True\n                if self.pax_headers:\n                    buf = self.tarinfo.create_pax_global_header(self.pax_headers.copy())\n                    self.fileobj.write(buf)\n                    self.offset += len(buf)\n        except:\n            if not self._extfileobj:\n                self.fileobj.close()\n            self.closed = True\n            raise\n    @classmethod\n    def open(cls, name=None, mode=\"r\", fileobj=None, bufsize=RECORDSIZE, **kwargs):\n        \"\"\"Open a tar archive for reading, writing or appending. Return\n           an appropriate TarFile class.\n           mode:\n           'r' or 'r:*' open for reading with transparent compression\n           'r:'         open for reading exclusively uncompressed\n           'r:gz'       open for reading with gzip compression\n           'r:bz2'      open for reading with bzip2 compression\n           'r:xz'       open for reading with lzma compression\n           'a' or 'a:'  open for appending, creating the file if necessary\n           'w' or 'w:'  open for writing without compression\n           'w:gz'       open for writing with gzip compression\n           'w:bz2'      open for writing with bzip2 compression\n           'w:xz'       open for writing with lzma compression\n           'r|*'        open a stream of tar blocks with transparent compression\n           'r|'         open an uncompressed stream of tar blocks for reading\n           'r|gz'       open a gzip compressed stream of tar blocks\n           'r|bz2'      open a bzip2 compressed stream of tar blocks\n           'r|xz'       open an lzma compressed stream of tar blocks\n           'w|'         open an uncompressed stream for writing\n           'w|gz'       open a gzip compressed stream for writing\n           'w|bz2'      open a bzip2 compressed stream for writing\n           'w|xz'       open an lzma compressed stream for writing\n        \"\"\"\n        if not name and not fileobj:\n            raise ValueError(\"nothing to open\")\n        if mode in (\"r\", \"r:*\"):\n            for comptype in cls.OPEN_METH:\n                func = getattr(cls, cls.OPEN_METH[comptype])\n                if fileobj is not None:\n                    saved_pos = fileobj.tell()\n                try:\n                    return func(name, \"r\", fileobj, **kwargs)\n                except (ReadError, CompressionError) as e:\n                    if fileobj is not None:\n                        fileobj.seek(saved_pos)\n                    continue\n            raise ReadError(\"file could not be opened successfully\")\n        elif \":\" in mode:\n            filemode, comptype = mode.split(\":\", 1)\n            filemode = filemode or \"r\"\n            comptype = comptype or \"tar\"\n            if comptype in cls.OPEN_METH:\n                func = getattr(cls, cls.OPEN_METH[comptype])\n            else:\n                raise CompressionError(\"unknown compression type %r\" % comptype)\n            return func(name, filemode, fileobj, **kwargs)\n        elif \"|\" in mode:\n            filemode, comptype = mode.split(\"|\", 1)\n            filemode = filemode or \"r\"\n            comptype = comptype or \"tar\"\n            if filemode not in \"rw\":\n                raise ValueError(\"mode must be 'r' or 'w'\")\n            stream = _Stream(name, filemode, comptype, fileobj, bufsize)\n            try:\n                t = cls(name, filemode, stream, **kwargs)\n            except:\n                stream.close()\n                raise\n            t._extfileobj = False\n            return t\n        elif mode in \"aw\":\n            return cls.taropen(name, mode, fileobj, **kwargs)\n        raise ValueError(\"undiscernible mode\")\n    @classmethod\n    def taropen(cls, name, mode=\"r\", fileobj=None, **kwargs):\n        \"\"\"Open uncompressed tar archive name for reading or writing.\n        \"\"\"\n        if len(mode) > 1 or mode not in \"raw\":\n            raise ValueError(\"mode must be 'r', 'a' or 'w'\")\n        return cls(name, mode, fileobj, **kwargs)\n    @classmethod\n    def gzopen(cls, name, mode=\"r\", fileobj=None, compresslevel=9, **kwargs):\n        \"\"\"Open gzip compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        \"\"\"\n        if len(mode) > 1 or mode not in \"rw\":\n            raise ValueError(\"mode must be 'r' or 'w'\")\n        try:\n            import gzip\n            gzip.GzipFile\n        except (ImportError, AttributeError):\n            raise CompressionError(\"gzip module is not available\")\n        extfileobj = fileobj is not None\n        try:\n            fileobj = gzip.GzipFile(name, mode + \"b\", compresslevel, fileobj)\n            t = cls.taropen(name, mode, fileobj, **kwargs)\n        except IOError:\n            if not extfileobj and fileobj is not None:\n                fileobj.close()\n            if fileobj is None:\n                raise\n            raise ReadError(\"not a gzip file\")\n        except:\n            if not extfileobj and fileobj is not None:\n                fileobj.close()\n            raise\n        t._extfileobj = extfileobj\n        return t\n    @classmethod\n    def bz2open(cls, name, mode=\"r\", fileobj=None, compresslevel=9, **kwargs):\n        \"\"\"Open bzip2 compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        \"\"\"\n        if len(mode) > 1 or mode not in \"rw\":\n            raise ValueError(\"mode must be 'r' or 'w'.\")\n        try:\n            import bz2\n        except ImportError:\n            raise CompressionError(\"bz2 module is not available\")\n        fileobj = bz2.BZ2File(fileobj or name, mode,\n                              compresslevel=compresslevel)\n        try:\n            t = cls.taropen(name, mode, fileobj, **kwargs)\n        except (IOError, EOFError):\n            fileobj.close()\n            raise ReadError(\"not a bzip2 file\")\n        t._extfileobj = False\n        return t\n    @classmethod\n    def xzopen(cls, name, mode=\"r\", fileobj=None, preset=None, **kwargs):\n        \"\"\"Open lzma compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        \"\"\"\n        if mode not in (\"r\", \"w\"):\n            raise ValueError(\"mode must be 'r' or 'w'\")\n        try:\n            import lzma\n        except ImportError:\n            raise CompressionError(\"lzma module is not available\")\n        fileobj = lzma.LZMAFile(fileobj or name, mode, preset=preset)\n        try:\n            t = cls.taropen(name, mode, fileobj, **kwargs)\n        except (lzma.LZMAError, EOFError):\n            fileobj.close()\n            raise ReadError(\"not an lzma file\")\n        t._extfileobj = False\n        return t\n    OPEN_METH = {\n        \"tar\": \"taropen\",   # uncompressed tar\n        \"gz\":  \"gzopen\",    # gzip compressed tar\n        \"bz2\": \"bz2open\",   # bzip2 compressed tar\n        \"xz\":  \"xzopen\"     # lzma compressed tar\n    }\n    def close(self):\n        \"\"\"Close the TarFile. In write-mode, two finishing zero blocks are\n           appended to the archive.\n        \"\"\"\n        if self.closed:\n            return\n        if self.mode in \"aw\":\n            self.fileobj.write(NUL * (BLOCKSIZE * 2))\n            self.offset += (BLOCKSIZE * 2)\n            blocks, remainder = divmod(self.offset, RECORDSIZE)\n            if remainder > 0:\n                self.fileobj.write(NUL * (RECORDSIZE - remainder))\n        if not self._extfileobj:\n            self.fileobj.close()\n        self.closed = True\n    def getmember(self, name):\n        \"\"\"Return a TarInfo object for member `name'. If `name' can not be\n           found in the archive, KeyError is raised. If a member occurs more\n           than once in the archive, its last occurrence is assumed to be the\n           most up-to-date version.\n        \"\"\"\n        tarinfo = self._getmember(name)\n        if tarinfo is None:\n            raise KeyError(\"filename %r not found\" % name)\n        return tarinfo\n    def getmembers(self):\n        \"\"\"Return the members of the archive as a list of TarInfo objects. The\n           list has the same order as the members in the archive.\n        \"\"\"\n        self._check()\n        if not self._loaded:    # if we want to obtain a list of\n            self._load()        # all members, we first have to\n        return self.members\n    def getnames(self):\n        \"\"\"Return the members of the archive as a list of their names. It has\n           the same order as the list returned by getmembers().\n        \"\"\"\n        return [tarinfo.name for tarinfo in self.getmembers()]\n    def gettarinfo(self, name=None, arcname=None, fileobj=None):\n        \"\"\"Create a TarInfo object for either the file `name' or the file\n           object `fileobj' (using os.fstat on its file descriptor). You can\n           modify some of the TarInfo's attributes before you add it using\n           addfile(). If given, `arcname' specifies an alternative name for the\n           file in the archive.\n        \"\"\"\n        self._check(\"aw\")\n        if fileobj is not None:\n            name = fileobj.name\n        if arcname is None:\n            arcname = name\n        drv, arcname = os.path.splitdrive(arcname)\n        arcname = arcname.replace(os.sep, \"/\")\n        arcname = arcname.lstrip(\"/\")\n        tarinfo = self.tarinfo()\n        tarinfo.tarfile = self\n        if fileobj is None:\n            if hasattr(os, \"lstat\") and not self.dereference:\n                statres = os.lstat(name)\n            else:\n                statres = os.stat(name)\n        else:\n            statres = os.fstat(fileobj.fileno())\n        linkname = \"\"\n        stmd = statres.st_mode\n        if stat.S_ISREG(stmd):\n            inode = (statres.st_ino, statres.st_dev)\n            if not self.dereference and statres.st_nlink > 1 and \\\n                    inode in self.inodes and arcname != self.inodes[inode]:\n                type = LNKTYPE\n                linkname = self.inodes[inode]\n            else:\n                type = REGTYPE\n                if inode[0]:\n                    self.inodes[inode] = arcname\n        elif stat.S_ISDIR(stmd):\n            type = DIRTYPE\n        elif stat.S_ISFIFO(stmd):\n            type = FIFOTYPE\n        elif stat.S_ISLNK(stmd):\n            type = SYMTYPE\n            linkname = os.readlink(name)\n        elif stat.S_ISCHR(stmd):\n            type = CHRTYPE\n        elif stat.S_ISBLK(stmd):\n            type = BLKTYPE\n        else:\n            return None\n        tarinfo.name = arcname\n        tarinfo.mode = stmd\n        tarinfo.uid = statres.st_uid\n        tarinfo.gid = statres.st_gid\n        if type == REGTYPE:\n            tarinfo.size = statres.st_size\n        else:\n            tarinfo.size = 0\n        tarinfo.mtime = statres.st_mtime\n        tarinfo.type = type\n        tarinfo.linkname = linkname\n        if pwd:\n            try:\n                tarinfo.uname = pwd.getpwuid(tarinfo.uid)[0]\n            except KeyError:\n                pass\n        if grp:\n            try:\n                tarinfo.gname = grp.getgrgid(tarinfo.gid)[0]\n            except KeyError:\n                pass\n        if type in (CHRTYPE, BLKTYPE):\n            if hasattr(os, \"major\") and hasattr(os, \"minor\"):\n                tarinfo.devmajor = os.major(statres.st_rdev)\n                tarinfo.devminor = os.minor(statres.st_rdev)\n        return tarinfo\n    def list(self, verbose=True):\n        \"\"\"Print a table of contents to sys.stdout. If `verbose' is False, only\n           the names of the members are printed. If it is True, an `ls -l'-like\n           output is produced.\n        \"\"\"\n        self._check()\n        for tarinfo in self:\n            if verbose:\n                print(stat.filemode(tarinfo.mode), end=' ')\n                print(\"%s/%s\" % (tarinfo.uname or tarinfo.uid,\n                                 tarinfo.gname or tarinfo.gid), end=' ')\n                if tarinfo.ischr() or tarinfo.isblk():\n                    print(\"%10s\" % (\"%d,%d\" \\\n                                    % (tarinfo.devmajor, tarinfo.devminor)), end=' ')\n                else:\n                    print(\"%10d\" % tarinfo.size, end=' ')\n                print(\"%d-%02d-%02d %02d:%02d:%02d\" \\\n                      % time.localtime(tarinfo.mtime)[:6], end=' ')\n            print(tarinfo.name + (\"/\" if tarinfo.isdir() else \"\"), end=' ')\n            if verbose:\n                if tarinfo.issym():\n                    print(\"->\", tarinfo.linkname, end=' ')\n                if tarinfo.islnk():\n                    print(\"link to\", tarinfo.linkname, end=' ')\n            print()\n    def add(self, name, arcname=None, recursive=True, exclude=None, *, filter=None):\n        \"\"\"Add the file `name' to the archive. `name' may be any type of file\n           (directory, fifo, symbolic link, etc.). If given, `arcname'\n           specifies an alternative name for the file in the archive.\n           Directories are added recursively by default. This can be avoided by\n           setting `recursive' to False. `exclude' is a function that should\n           return True for each filename to be excluded. `filter' is a function\n           that expects a TarInfo object argument and returns the changed\n           TarInfo object, if it returns None the TarInfo object will be\n           excluded from the archive.\n        \"\"\"\n        self._check(\"aw\")\n        if arcname is None:\n            arcname = name\n        if exclude is not None:\n            import warnings\n            warnings.warn(\"use the filter argument instead\",\n                    DeprecationWarning, 2)\n            if exclude(name):\n                self._dbg(2, \"tarfile: Excluded %r\" % name)\n                return\n        if self.name is not None and os.path.abspath(name) == self.name:\n            self._dbg(2, \"tarfile: Skipped %r\" % name)\n            return\n        self._dbg(1, name)\n        tarinfo = self.gettarinfo(name, arcname)\n        if tarinfo is None:\n            self._dbg(1, \"tarfile: Unsupported type %r\" % name)\n            return\n        if filter is not None:\n            tarinfo = filter(tarinfo)\n            if tarinfo is None:\n                self._dbg(2, \"tarfile: Excluded %r\" % name)\n                return\n        if tarinfo.isreg():\n            with bltn_open(name, \"rb\") as f:\n                self.addfile(tarinfo, f)\n        elif tarinfo.isdir():\n            self.addfile(tarinfo)\n            if recursive:\n                for f in os.listdir(name):\n                    self.add(os.path.join(name, f), os.path.join(arcname, f),\n                            recursive, exclude, filter=filter)\n        else:\n            self.addfile(tarinfo)\n    def addfile(self, tarinfo, fileobj=None):\n        \"\"\"Add the TarInfo object `tarinfo' to the archive. If `fileobj' is\n           given, tarinfo.size bytes are read from it and added to the archive.\n           You can create TarInfo objects using gettarinfo().\n           On Windows platforms, `fileobj' should always be opened with mode\n           'rb' to avoid irritation about the file size.\n        \"\"\"\n        self._check(\"aw\")\n        tarinfo = copy.copy(tarinfo)\n        buf = tarinfo.tobuf(self.format, self.encoding, self.errors)\n        self.fileobj.write(buf)\n        self.offset += len(buf)\n        if fileobj is not None:\n            copyfileobj(fileobj, self.fileobj, tarinfo.size)\n            blocks, remainder = divmod(tarinfo.size, BLOCKSIZE)\n            if remainder > 0:\n                self.fileobj.write(NUL * (BLOCKSIZE - remainder))\n                blocks += 1\n            self.offset += blocks * BLOCKSIZE\n        self.members.append(tarinfo)\n    def extractall(self, path=\".\", members=None):\n        \"\"\"Extract all members from the archive to the current working\n           directory and set owner, modification time and permissions on\n           directories afterwards. `path' specifies a different directory\n           to extract to. `members' is optional and must be a subset of the\n           list returned by getmembers().\n        \"\"\"\n        directories = []\n        if members is None:\n            members = self\n        for tarinfo in members:\n            if tarinfo.isdir():\n                directories.append(tarinfo)\n                tarinfo = copy.copy(tarinfo)\n                tarinfo.mode = 0o700\n            self.extract(tarinfo, path, set_attrs=not tarinfo.isdir())\n        directories.sort(key=lambda a: a.name)\n        directories.reverse()\n        for tarinfo in directories:\n            dirpath = os.path.join(path, tarinfo.name)\n            try:\n                self.chown(tarinfo, dirpath)\n                self.utime(tarinfo, dirpath)\n                self.chmod(tarinfo, dirpath)\n            except ExtractError as e:\n                if self.errorlevel > 1:\n                    raise\n                else:\n                    self._dbg(1, \"tarfile: %s\" % e)\n    def extract(self, member, path=\"\", set_attrs=True):\n        \"\"\"Extract a member from the archive to the current working directory,\n           using its full name. Its file information is extracted as accurately\n           as possible. `member' may be a filename or a TarInfo object. You can\n           specify a different directory using `path'. File attributes (owner,\n           mtime, mode) are set unless `set_attrs' is False.\n        \"\"\"\n        self._check(\"r\")\n        if isinstance(member, str):\n            tarinfo = self.getmember(member)\n        else:\n            tarinfo = member\n        if tarinfo.islnk():\n            tarinfo._link_target = os.path.join(path, tarinfo.linkname)\n        try:\n            self._extract_member(tarinfo, os.path.join(path, tarinfo.name),\n                                 set_attrs=set_attrs)\n        except EnvironmentError as e:\n            if self.errorlevel > 0:\n                raise\n            else:\n                if e.filename is None:\n                    self._dbg(1, \"tarfile: %s\" % e.strerror)\n                else:\n                    self._dbg(1, \"tarfile: %s %r\" % (e.strerror, e.filename))\n        except ExtractError as e:\n            if self.errorlevel > 1:\n                raise\n            else:\n                self._dbg(1, \"tarfile: %s\" % e)\n    def extractfile(self, member):\n        \"\"\"Extract a member from the archive as a file object. `member' may be\n           a filename or a TarInfo object. If `member' is a regular file or a\n           link, an io.BufferedReader object is returned. Otherwise, None is\n           returned.\n        \"\"\"\n        self._check(\"r\")\n        if isinstance(member, str):\n            tarinfo = self.getmember(member)\n        else:\n            tarinfo = member\n        if tarinfo.isreg() or tarinfo.type not in SUPPORTED_TYPES:\n            return self.fileobject(self, tarinfo)\n        elif tarinfo.islnk() or tarinfo.issym():\n            if isinstance(self.fileobj, _Stream):\n                raise StreamError(\"cannot extract (sym)link as file object\")\n            else:\n                return self.extractfile(self._find_link_target(tarinfo))\n        else:\n            return None\n    def _extract_member(self, tarinfo, targetpath, set_attrs=True):\n        \"\"\"Extract the TarInfo object tarinfo to a physical\n           file called targetpath.\n        \"\"\"\n        targetpath = targetpath.rstrip(\"/\")\n        targetpath = targetpath.replace(\"/\", os.sep)\n        upperdirs = os.path.dirname(targetpath)\n        if upperdirs and not os.path.exists(upperdirs):\n            os.makedirs(upperdirs)\n        if tarinfo.islnk() or tarinfo.issym():\n            self._dbg(1, \"%s -> %s\" % (tarinfo.name, tarinfo.linkname))\n        else:\n            self._dbg(1, tarinfo.name)\n        if tarinfo.isreg():\n            self.makefile(tarinfo, targetpath)\n        elif tarinfo.isdir():\n            self.makedir(tarinfo, targetpath)\n        elif tarinfo.isfifo():\n            self.makefifo(tarinfo, targetpath)\n        elif tarinfo.ischr() or tarinfo.isblk():\n            self.makedev(tarinfo, targetpath)\n        elif tarinfo.islnk() or tarinfo.issym():\n            self.makelink(tarinfo, targetpath)\n        elif tarinfo.type not in SUPPORTED_TYPES:\n            self.makeunknown(tarinfo, targetpath)\n        else:\n            self.makefile(tarinfo, targetpath)\n        if set_attrs:\n            self.chown(tarinfo, targetpath)\n            if not tarinfo.issym():\n                self.chmod(tarinfo, targetpath)\n                self.utime(tarinfo, targetpath)\n    def makedir(self, tarinfo, targetpath):\n        \"\"\"Make a directory called targetpath.\n        \"\"\"\n        try:\n            os.mkdir(targetpath, 0o700)\n        except FileExistsError:\n            pass\n    def makefile(self, tarinfo, targetpath):\n        \"\"\"Make a file called targetpath.\n        \"\"\"\n        source = self.fileobj\n        source.seek(tarinfo.offset_data)\n        with bltn_open(targetpath, \"wb\") as target:\n            if tarinfo.sparse is not None:\n                for offset, size in tarinfo.sparse:\n                    target.seek(offset)\n                    copyfileobj(source, target, size)\n            else:\n                copyfileobj(source, target, tarinfo.size)\n            target.seek(tarinfo.size)\n            target.truncate()\n    def makeunknown(self, tarinfo, targetpath):\n        \"\"\"Make a file from a TarInfo object with an unknown type\n           at targetpath.\n        \"\"\"\n        self.makefile(tarinfo, targetpath)\n        self._dbg(1, \"tarfile: Unknown file type %r, \" \\\n                     \"extracted as regular file.\" % tarinfo.type)\n    def makefifo(self, tarinfo, targetpath):\n        \"\"\"Make a fifo called targetpath.\n        \"\"\"\n        if hasattr(os, \"mkfifo\"):\n            os.mkfifo(targetpath)\n        else:\n            raise ExtractError(\"fifo not supported by system\")\n    def makedev(self, tarinfo, targetpath):\n        \"\"\"Make a character or block device called targetpath.\n        \"\"\"\n        if not hasattr(os, \"mknod\") or not hasattr(os, \"makedev\"):\n            raise ExtractError(\"special devices not supported by system\")\n        mode = tarinfo.mode\n        if tarinfo.isblk():\n            mode |= stat.S_IFBLK\n        else:\n            mode |= stat.S_IFCHR\n        os.mknod(targetpath, mode,\n                 os.makedev(tarinfo.devmajor, tarinfo.devminor))\n    def makelink(self, tarinfo, targetpath):\n        \"\"\"Make a (symbolic) link called targetpath. If it cannot be created\n          (platform limitation), we try to make a copy of the referenced file\n          instead of a link.\n        \"\"\"\n        try:\n            if tarinfo.issym():\n                os.symlink(tarinfo.linkname, targetpath)\n            else:\n                if os.path.exists(tarinfo._link_target):\n                    os.link(tarinfo._link_target, targetpath)\n                else:\n                    self._extract_member(self._find_link_target(tarinfo),\n                                         targetpath)\n        except symlink_exception:\n            try:\n                self._extract_member(self._find_link_target(tarinfo),\n                                     targetpath)\n            except KeyError:\n                raise ExtractError(\"unable to resolve link inside archive\")\n    def chown(self, tarinfo, targetpath):\n        \"\"\"Set owner of targetpath according to tarinfo.\n        \"\"\"\n        if pwd and hasattr(os, \"geteuid\") and os.geteuid() == 0:\n            try:\n                g = grp.getgrnam(tarinfo.gname)[2]\n            except KeyError:\n                g = tarinfo.gid\n            try:\n                u = pwd.getpwnam(tarinfo.uname)[2]\n            except KeyError:\n                u = tarinfo.uid\n            try:\n                if tarinfo.issym() and hasattr(os, \"lchown\"):\n                    os.lchown(targetpath, u, g)\n                else:\n                    if sys.platform != \"os2emx\":\n                        os.chown(targetpath, u, g)\n            except EnvironmentError as e:\n                raise ExtractError(\"could not change owner\")\n    def chmod(self, tarinfo, targetpath):\n        \"\"\"Set file permissions of targetpath according to tarinfo.\n        \"\"\"\n        if hasattr(os, 'chmod'):\n            try:\n                os.chmod(targetpath, tarinfo.mode)\n            except EnvironmentError as e:\n                raise ExtractError(\"could not change mode\")\n    def utime(self, tarinfo, targetpath):\n        \"\"\"Set modification time of targetpath according to tarinfo.\n        \"\"\"\n        if not hasattr(os, 'utime'):\n            return\n        try:\n            os.utime(targetpath, (tarinfo.mtime, tarinfo.mtime))\n        except EnvironmentError as e:\n            raise ExtractError(\"could not change modification time\")\n    def next(self):\n        \"\"\"Return the next member of the archive as a TarInfo object, when\n           TarFile is opened for reading. Return None if there is no more\n           available.\n        \"\"\"\n        self._check(\"ra\")\n        if self.firstmember is not None:\n            m = self.firstmember\n            self.firstmember = None\n            return m\n        self.fileobj.seek(self.offset)\n        tarinfo = None\n        while True:\n            try:\n                tarinfo = self.tarinfo.fromtarfile(self)\n            except EOFHeaderError as e:\n                if self.ignore_zeros:\n                    self._dbg(2, \"0x%X: %s\" % (self.offset, e))\n                    self.offset += BLOCKSIZE\n                    continue\n            except InvalidHeaderError as e:\n                if self.ignore_zeros:\n                    self._dbg(2, \"0x%X: %s\" % (self.offset, e))\n                    self.offset += BLOCKSIZE\n                    continue\n                elif self.offset == 0:\n                    raise ReadError(str(e))\n            except EmptyHeaderError:\n                if self.offset == 0:\n                    raise ReadError(\"empty file\")\n            except TruncatedHeaderError as e:\n                if self.offset == 0:\n                    raise ReadError(str(e))\n            except SubsequentHeaderError as e:\n                raise ReadError(str(e))\n            break\n        if tarinfo is not None:\n            self.members.append(tarinfo)\n        else:\n            self._loaded = True\n        return tarinfo\n    def _getmember(self, name, tarinfo=None, normalize=False):\n        \"\"\"Find an archive member by name from bottom to top.\n           If tarinfo is given, it is used as the starting point.\n        \"\"\"\n        members = self.getmembers()\n        if tarinfo is not None:\n            members = members[:members.index(tarinfo)]\n        if normalize:\n            name = os.path.normpath(name)\n        for member in reversed(members):\n            if normalize:\n                member_name = os.path.normpath(member.name)\n            else:\n                member_name = member.name\n            if name == member_name:\n                return member\n    def _load(self):\n        \"\"\"Read through the entire archive file and look for readable\n           members.\n        \"\"\"\n        while True:\n            tarinfo = self.next()\n            if tarinfo is None:\n                break\n        self._loaded = True\n    def _check(self, mode=None):\n        \"\"\"Check if TarFile is still open, and if the operation's mode\n           corresponds to TarFile's mode.\n        \"\"\"\n        if self.closed:\n            raise IOError(\"%s is closed\" % self.__class__.__name__)\n        if mode is not None and self.mode not in mode:\n            raise IOError(\"bad operation for mode %r\" % self.mode)\n    def _find_link_target(self, tarinfo):\n        \"\"\"Find the target member of a symlink or hardlink member in the\n           archive.\n        \"\"\"\n        if tarinfo.issym():\n            linkname = \"/\".join(filter(None, (os.path.dirname(tarinfo.name), tarinfo.linkname)))\n            limit = None\n        else:\n            linkname = tarinfo.linkname\n            limit = tarinfo\n        member = self._getmember(linkname, tarinfo=limit, normalize=True)\n        if member is None:\n            raise KeyError(\"linkname %r not found\" % linkname)\n        return member\n    def __iter__(self):\n        \"\"\"Provide an iterator object.\n        \"\"\"\n        if self._loaded:\n            return iter(self.members)\n        else:\n            return TarIter(self)\n    def _dbg(self, level, msg):\n        \"\"\"Write debugging output to sys.stderr.\n        \"\"\"\n        if level <= self.debug:\n            print(msg, file=sys.stderr)\n    def __enter__(self):\n        self._check()\n        return self\n    def __exit__(self, type, value, traceback):\n        if type is None:\n            self.close()\n        else:\n            if not self._extfileobj:\n                self.fileobj.close()\n            self.closed = True\nclass TarIter:\n    \"\"\"Iterator Class.\n       for tarinfo in TarFile(...):\n           suite...\n    \"\"\"\n    def __init__(self, tarfile):\n        \"\"\"Construct a TarIter object.\n        \"\"\"\n        self.tarfile = tarfile\n        self.index = 0\n    def __iter__(self):\n        \"\"\"Return iterator object.\n        \"\"\"\n        return self\n    def __next__(self):\n        \"\"\"Return the next item using TarFile's next() method.\n           When all members have been read, set TarFile as _loaded.\n        \"\"\"\n        if not self.tarfile._loaded:\n            tarinfo = self.tarfile.next()\n            if not tarinfo:\n                self.tarfile._loaded = True\n                raise StopIteration\n        else:\n            try:\n                tarinfo = self.tarfile.members[self.index]\n            except IndexError:\n                raise StopIteration\n        self.index += 1\n        return tarinfo\ndef is_tarfile(name):\n    \"\"\"Return True if name points to a tar archive that we\n       are able to handle, else return False.\n    \"\"\"\n    try:\n        t = open(name)\n        t.close()\n        return True\n    except TarError:\n        return False\nbltn_open = open\nopen = TarFile.open\n", "/libs/crypto_js/rollups/sha384.js": "var CryptoJS=CryptoJS||function(a,c){var d={},j=d.lib={},f=function(){},m=j.Base={extend:function(a){f.prototype=this;var b=new f();a&&b.mixIn(a);b.hasOwnProperty(\"init\")||(b.init=function(){b.$super.init.apply(this,arguments);});b.init.prototype=b;b.$super=this;return b;},create:function(){var a=this.extend();a.init.apply(a,arguments);return a;},init:function(){},mixIn:function(a){for(var b in a)a.hasOwnProperty(b)&&(this[b]=a[b]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString);},clone:function(){return this.init.prototype.extend(this);}},B=j.WordArray=m.extend({init:function(a,b){a=this.words=a||[];this.sigBytes=b!=c?b:4*a.length;},toString:function(a){return(a||y).stringify(this);},concat:function(a){var b=this.words,g=a.words,e=this.sigBytes;a=a.sigBytes;this.clamp();if(e%4)for(var k=0;k<a;k++)b[e+k>>>2]|=(g[k>>>2]>>>24-8*(k%4)&255)<<24-8*((e+k)%4);else if(65535<g.length)for(k=0;k<a;k+=4)b[e+k>>>2]=g[k>>>2];else b.push.apply(b,g);this.sigBytes+=a;return this;},clamp:function(){var n=this.words,b=this.sigBytes;n[b>>>2]&=4294967295<<32-8*(b%4);n.length=a.ceil(b/4);},clone:function(){var a=m.clone.call(this);a.words=this.words.slice(0);return a;},random:function(n){for(var b=[],g=0;g<n;g+=4)b.push(4294967296*a.random()|0);return new B.init(b,n);}}),v=d.enc={},y=v.Hex={stringify:function(a){var b=a.words;a=a.sigBytes;for(var g=[],e=0;e<a;e++){var k=b[e>>>2]>>>24-8*(e%4)&255;g.push((k>>>4).toString(16));g.push((k&15).toString(16));}return g.join(\"\");},parse:function(a){for(var b=a.length,g=[],e=0;e<b;e+=2)g[e>>>3]|=parseInt(a.substr(e,2),16)<<24-4*(e%8);return new B.init(g,b/2);}},F=v.Latin1={stringify:function(a){var b=a.words;a=a.sigBytes;for(var g=[],e=0;e<a;e++)g.push(String.fromCharCode(b[e>>>2]>>>24-8*(e%4)&255));return g.join(\"\");},parse:function(a){for(var b=a.length,g=[],e=0;e<b;e++)g[e>>>2]|=(a.charCodeAt(e)&255)<<24-8*(e%4);return new B.init(g,b);}},ha=v.Utf8={stringify:function(a){try{return decodeURIComponent(escape(F.stringify(a)));}catch(b){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return F.parse(unescape(encodeURIComponent(a)));}},Z=j.BufferedBlockAlgorithm=m.extend({reset:function(){this._data=new B.init();this._nDataBytes=0;},_append:function(a){\"string\"==typeof a&&(a=ha.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes;},_process:function(n){var b=this._data,g=b.words,e=b.sigBytes,k=this.blockSize,m=e/(4*k),m=n?a.ceil(m):a.max((m|0)-this._minBufferSize,0);n=m*k;e=a.min(4*n,e);if(n){for(var c=0;c<n;c+=k)this._doProcessBlock(g,c);c=g.splice(0,n);b.sigBytes-=e;}return new B.init(c,e);},clone:function(){var a=m.clone.call(this);a._data=this._data.clone();return a;},_minBufferSize:0});j.Hasher=Z.extend({cfg:m.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset();},reset:function(){Z.reset.call(this);this._doReset();},update:function(a){this._append(a);this._process();return this;},finalize:function(a){a&&this._append(a);return this._doFinalize();},blockSize:16,_createHelper:function(a){return function(b,g){return new a.init(g).finalize(b);};},_createHmacHelper:function(a){return function(b,g){return new ia.HMAC.init(a,g).finalize(b);};}});var ia=d.algo={};return d;}(Math);(function(a){var c=CryptoJS,d=c.lib,j=d.Base,f=d.WordArray,c=c.x64={};c.Word=j.extend({init:function(a,c){this.high=a;this.low=c;}});c.WordArray=j.extend({init:function(c,d){c=this.words=c||[];this.sigBytes=d!=a?d:8*c.length;},toX32:function(){for(var a=this.words,c=a.length,d=[],j=0;j<c;j++){var F=a[j];d.push(F.high);d.push(F.low);}return f.create(d,this.sigBytes);},clone:function(){for(var a=j.clone.call(this),c=a.words=this.words.slice(0),d=c.length,f=0;f<d;f++)c[f]=c[f].clone();return a;}});})();(function(){function a(){return f.create.apply(f,arguments);}for(var c=CryptoJS,d=c.lib.Hasher,j=c.x64,f=j.Word,m=j.WordArray,j=c.algo,B=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],v=[],y=0;80>y;y++)v[y]=a();j=j.SHA512=d.extend({_doReset:function(){this._hash=new m.init([new f.init(1779033703,4089235720),new f.init(3144134277,2227873595),new f.init(1013904242,4271175723),new f.init(2773480762,1595750129),new f.init(1359893119,2917565137),new f.init(2600822924,725511199),new f.init(528734635,4215389547),new f.init(1541459225,327033209)]);},_doProcessBlock:function(a,c){for(var d=this._hash.words,f=d[0],j=d[1],b=d[2],g=d[3],e=d[4],k=d[5],m=d[6],d=d[7],y=f.high,M=f.low,$=j.high,N=j.low,aa=b.high,O=b.low,ba=g.high,P=g.low,ca=e.high,Q=e.low,da=k.high,R=k.low,ea=m.high,S=m.low,fa=d.high,T=d.low,s=y,p=M,G=$,D=N,H=aa,E=O,W=ba,I=P,t=ca,q=Q,U=da,J=R,V=ea,K=S,X=fa,L=T,u=0;80>u;u++){var z=v[u];if(16>u)var r=z.high=a[c+2*u]|0,h=z.low=a[c+2*u+1]|0;else{var r=v[u-15],h=r.high,w=r.low,r=(h>>>1|w<<31)^(h>>>8|w<<24)^h>>>7,w=(w>>>1|h<<31)^(w>>>8|h<<24)^(w>>>7|h<<25),C=v[u-2],h=C.high,l=C.low,C=(h>>>19|l<<13)^(h<<3|l>>>29)^h>>>6,l=(l>>>19|h<<13)^(l<<3|h>>>29)^(l>>>6|h<<26),h=v[u-7],Y=h.high,A=v[u-16],x=A.high,A=A.low,h=w+h.low,r=r+Y+(h>>>0<w>>>0?1:0),h=h+l,r=r+C+(h>>>0<l>>>0?1:0),h=h+A,r=r+x+(h>>>0<A>>>0?1:0);z.high=r;z.low=h;}var Y=t&U^~t&V,A=q&J^~q&K,z=s&G^s&H^G&H,ja=p&D^p&E^D&E,w=(s>>>28|p<<4)^(s<<30|p>>>2)^(s<<25|p>>>7),C=(p>>>28|s<<4)^(p<<30|s>>>2)^(p<<25|s>>>7),l=B[u],ka=l.high,ga=l.low,l=L+((q>>>14|t<<18)^(q>>>18|t<<14)^(q<<23|t>>>9)),x=X+((t>>>14|q<<18)^(t>>>18|q<<14)^(t<<23|q>>>9))+(l>>>0<L>>>0?1:0),l=l+A,x=x+Y+(l>>>0<A>>>0?1:0),l=l+ga,x=x+ka+(l>>>0<ga>>>0?1:0),l=l+h,x=x+r+(l>>>0<h>>>0?1:0),h=C+ja,z=w+z+(h>>>0<C>>>0?1:0),X=V,L=K,V=U,K=J,U=t,J=q,q=I+l|0,t=W+x+(q>>>0<I>>>0?1:0)|0,W=H,I=E,H=G,E=D,G=s,D=p,p=l+h|0,s=x+z+(p>>>0<l>>>0?1:0)|0;}M=f.low=M+p;f.high=y+s+(M>>>0<p>>>0?1:0);N=j.low=N+D;j.high=$+G+(N>>>0<D>>>0?1:0);O=b.low=O+E;b.high=aa+H+(O>>>0<E>>>0?1:0);P=g.low=P+I;g.high=ba+W+(P>>>0<I>>>0?1:0);Q=e.low=Q+q;e.high=ca+t+(Q>>>0<q>>>0?1:0);R=k.low=R+J;k.high=da+U+(R>>>0<J>>>0?1:0);S=m.low=S+K;m.high=ea+V+(S>>>0<K>>>0?1:0);T=d.low=T+L;d.high=fa+X+(T>>>0<L>>>0?1:0);},_doFinalize:function(){var a=this._data,c=a.words,d=8*this._nDataBytes,f=8*a.sigBytes;c[f>>>5]|=128<<24-f%32;c[(f+128>>>10<<5)+30]=Math.floor(d/4294967296);c[(f+128>>>10<<5)+31]=d;a.sigBytes=4*c.length;this._process();return this._hash.toX32();},clone:function(){var a=d.clone.call(this);a._hash=this._hash.clone();return a;},blockSize:32});c.SHA512=d._createHelper(j);c.HmacSHA512=d._createHmacHelper(j);})();(function(){var a=CryptoJS,c=a.x64,d=c.Word,j=c.WordArray,c=a.algo,f=c.SHA512,c=c.SHA384=f.extend({_doReset:function(){this._hash=new j.init([new d.init(3418070365,3238371032),new d.init(1654270250,914150663),new d.init(2438529370,812702999),new d.init(355462360,4144912697),new d.init(1731405415,4290775857),new d.init(2394180231,1750603025),new d.init(3675008525,1694076839),new d.init(1203062813,3204075428)]);},_doFinalize:function(){var a=f._doFinalize.call(this);a.sigBytes-=16;return a;}});a.SHA384=f._createHelper(c);a.HmacSHA384=f._createHmacHelper(c);})();", "/libs/crypto_js/rollups/sha3.js": "var CryptoJS=CryptoJS||function(v,p){var d={},u=d.lib={},r=function(){},f=u.Base={extend:function(a){r.prototype=this;var b=new r();a&&b.mixIn(a);b.hasOwnProperty(\"init\")||(b.init=function(){b.$super.init.apply(this,arguments);});b.init.prototype=b;b.$super=this;return b;},create:function(){var a=this.extend();a.init.apply(a,arguments);return a;},init:function(){},mixIn:function(a){for(var b in a)a.hasOwnProperty(b)&&(this[b]=a[b]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString);},clone:function(){return this.init.prototype.extend(this);}},s=u.WordArray=f.extend({init:function(a,b){a=this.words=a||[];this.sigBytes=b!=p?b:4*a.length;},toString:function(a){return(a||y).stringify(this);},concat:function(a){var b=this.words,c=a.words,j=this.sigBytes;a=a.sigBytes;this.clamp();if(j%4)for(var n=0;n<a;n++)b[j+n>>>2]|=(c[n>>>2]>>>24-8*(n%4)&255)<<24-8*((j+n)%4);else if(65535<c.length)for(n=0;n<a;n+=4)b[j+n>>>2]=c[n>>>2];else b.push.apply(b,c);this.sigBytes+=a;return this;},clamp:function(){var a=this.words,b=this.sigBytes;a[b>>>2]&=4294967295<<32-8*(b%4);a.length=v.ceil(b/4);},clone:function(){var a=f.clone.call(this);a.words=this.words.slice(0);return a;},random:function(a){for(var b=[],c=0;c<a;c+=4)b.push(4294967296*v.random()|0);return new s.init(b,a);}}),x=d.enc={},y=x.Hex={stringify:function(a){var b=a.words;a=a.sigBytes;for(var c=[],j=0;j<a;j++){var n=b[j>>>2]>>>24-8*(j%4)&255;c.push((n>>>4).toString(16));c.push((n&15).toString(16));}return c.join(\"\");},parse:function(a){for(var b=a.length,c=[],j=0;j<b;j+=2)c[j>>>3]|=parseInt(a.substr(j,2),16)<<24-4*(j%8);return new s.init(c,b/2);}},e=x.Latin1={stringify:function(a){var b=a.words;a=a.sigBytes;for(var c=[],j=0;j<a;j++)c.push(String.fromCharCode(b[j>>>2]>>>24-8*(j%4)&255));return c.join(\"\");},parse:function(a){for(var b=a.length,c=[],j=0;j<b;j++)c[j>>>2]|=(a.charCodeAt(j)&255)<<24-8*(j%4);return new s.init(c,b);}},q=x.Utf8={stringify:function(a){try{return decodeURIComponent(escape(e.stringify(a)));}catch(b){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return e.parse(unescape(encodeURIComponent(a)));}},t=u.BufferedBlockAlgorithm=f.extend({reset:function(){this._data=new s.init();this._nDataBytes=0;},_append:function(a){\"string\"==typeof a&&(a=q.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes;},_process:function(a){var b=this._data,c=b.words,j=b.sigBytes,n=this.blockSize,e=j/(4*n),e=a?v.ceil(e):v.max((e|0)-this._minBufferSize,0);a=e*n;j=v.min(4*a,j);if(a){for(var f=0;f<a;f+=n)this._doProcessBlock(c,f);f=c.splice(0,a);b.sigBytes-=j;}return new s.init(f,j);},clone:function(){var a=f.clone.call(this);a._data=this._data.clone();return a;},_minBufferSize:0});u.Hasher=t.extend({cfg:f.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset();},reset:function(){t.reset.call(this);this._doReset();},update:function(a){this._append(a);this._process();return this;},finalize:function(a){a&&this._append(a);return this._doFinalize();},blockSize:16,_createHelper:function(a){return function(b,c){return new a.init(c).finalize(b);};},_createHmacHelper:function(a){return function(b,c){return new w.HMAC.init(a,c).finalize(b);};}});var w=d.algo={};return d;}(Math);(function(v){var p=CryptoJS,d=p.lib,u=d.Base,r=d.WordArray,p=p.x64={};p.Word=u.extend({init:function(f,s){this.high=f;this.low=s;}});p.WordArray=u.extend({init:function(f,s){f=this.words=f||[];this.sigBytes=s!=v?s:8*f.length;},toX32:function(){for(var f=this.words,s=f.length,d=[],p=0;p<s;p++){var e=f[p];d.push(e.high);d.push(e.low);}return r.create(d,this.sigBytes);},clone:function(){for(var f=u.clone.call(this),d=f.words=this.words.slice(0),p=d.length,r=0;r<p;r++)d[r]=d[r].clone();return f;}});})();(function(v){for(var p=CryptoJS,d=p.lib,u=d.WordArray,r=d.Hasher,f=p.x64.Word,d=p.algo,s=[],x=[],y=[],e=1,q=0,t=0;24>t;t++){s[e+5*q]=(t+1)*(t+2)/2%64;var w=(2*e+3*q)%5,e=q%5,q=w;}for(e=0;5>e;e++)for(q=0;5>q;q++)x[e+5*q]=q+5*((2*e+3*q)%5);e=1;for(q=0;24>q;q++){for(var a=w=t=0;7>a;a++){if(e&1){var b=(1<<a)-1;32>b?w^=1<<b:t^=1<<b-32;}e=e&128?e<<1^113:e<<1;}y[q]=f.create(t,w);}for(var c=[],e=0;25>e;e++)c[e]=f.create();d=d.SHA3=r.extend({cfg:r.cfg.extend({outputLength:512}),_doReset:function(){for(var a=this._state=[],b=0;25>b;b++)a[b]=new f.init();this.blockSize=(1600-2*this.cfg.outputLength)/32;},_doProcessBlock:function(a,b){for(var e=this._state,f=this.blockSize/2,h=0;h<f;h++){var l=a[b+2*h],m=a[b+2*h+1],l=(l<<8|l>>>24)&16711935|(l<<24|l>>>8)&4278255360,m=(m<<8|m>>>24)&16711935|(m<<24|m>>>8)&4278255360,g=e[h];g.high^=m;g.low^=l;}for(f=0;24>f;f++){for(h=0;5>h;h++){for(var d=l=0,k=0;5>k;k++)g=e[h+5*k],l^=g.high,d^=g.low;g=c[h];g.high=l;g.low=d;}for(h=0;5>h;h++){g=c[(h+4)%5];l=c[(h+1)%5];m=l.high;k=l.low;l=g.high^(m<<1|k>>>31);d=g.low^(k<<1|m>>>31);for(k=0;5>k;k++)g=e[h+5*k],g.high^=l,g.low^=d;}for(m=1;25>m;m++)g=e[m],h=g.high,g=g.low,k=s[m],32>k?(l=h<<k|g>>>32-k,d=g<<k|h>>>32-k):(l=g<<k-32|h>>>64-k,d=h<<k-32|g>>>64-k),g=c[x[m]],g.high=l,g.low=d;g=c[0];h=e[0];g.high=h.high;g.low=h.low;for(h=0;5>h;h++)for(k=0;5>k;k++)m=h+5*k,g=e[m],l=c[m],m=c[(h+1)%5+5*k],d=c[(h+2)%5+5*k],g.high=l.high^~m.high&d.high,g.low=l.low^~m.low&d.low;g=e[0];h=y[f];g.high^=h.high;g.low^=h.low;}},_doFinalize:function(){var a=this._data,b=a.words,c=8*a.sigBytes,e=32*this.blockSize;b[c>>>5]|=1<<24-c%32;b[(v.ceil((c+1)/e)*e>>>5)-1]|=128;a.sigBytes=4*b.length;this._process();for(var a=this._state,b=this.cfg.outputLength/8,c=b/8,e=[],h=0;h<c;h++){var d=a[h],f=d.high,d=d.low,f=(f<<8|f>>>24)&16711935|(f<<24|f>>>8)&4278255360,d=(d<<8|d>>>24)&16711935|(d<<24|d>>>8)&4278255360;e.push(d);e.push(f);}return new u.init(e,b);},clone:function(){for(var a=r.clone.call(this),b=a._state=this._state.slice(0),c=0;25>c;c++)b[c]=b[c].clone();return a;}});p.SHA3=r._createHelper(d);p.HmacSHA3=r._createHmacHelper(d);})(Math);", "/Lib/importlib/_bootstrap.py": "\"\"\"Core implementation of import.\nThis module is NOT meant to be directly imported! It has been designed such\nthat it can be bootstrapped into Python as the implementation of import. As\nsuch it requires the injection of specific modules and attributes in order to\nwork. One should use importlib as the public-facing version of this module.\n\"\"\"\n_CASE_INSENSITIVE_PLATFORMS = 'win', 'cygwin', 'darwin'\ndef _make_relax_case():\n    if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n        def _relax_case():\n            \"\"\"True if filenames must be checked case-insensitively.\"\"\"\n            return b'PYTHONCASEOK' in _os.environ\n    else:\n        def _relax_case():\n            \"\"\"True if filenames must be checked case-insensitively.\"\"\"\n            return False\n    return _relax_case\ndef _w_long(x):\n    \"\"\"Convert a 32-bit integer to little-endian.\n    XXX Temporary until marshal's long functions are exposed.\n    \"\"\"\n    x = int(x)\n    int_bytes = []\n    int_bytes.append(x & 0xFF)\n    int_bytes.append((x >> 8) & 0xFF)\n    int_bytes.append((x >> 16) & 0xFF)\n    int_bytes.append((x >> 24) & 0xFF)\n    return bytearray(int_bytes)\ndef _r_long(int_bytes):\n    \"\"\"Convert 4 bytes in little-endian to an integer.\n    XXX Temporary until marshal's long function are exposed.\n    \"\"\"\n    x = int_bytes[0]\n    x |= int_bytes[1] << 8\n    x |= int_bytes[2] << 16\n    x |= int_bytes[3] << 24\n    return x\ndef _path_join(*path_parts):\n    \"\"\"Replacement for os.path.join().\"\"\"\n    new_parts = []\n    for part in path_parts:\n        if not part:\n            continue\n        new_parts.append(part)\n        if part[-1] not in path_separators:\n            new_parts.append(path_sep)\n    return ''.join(new_parts[:-1])  # Drop superfluous path separator.\ndef _path_split(path):\n    \"\"\"Replacement for os.path.split().\"\"\"\n    for x in reversed(path):\n        if x in path_separators:\n            sep = x\n            break\n    else:\n        sep = path_sep\n    front, _, tail = path.rpartition(sep)\n    return front, tail\ndef _path_is_mode_type(path, mode):\n    \"\"\"Test whether the path is the specified mode type.\"\"\"\n    try:\n        stat_info = _os.stat(path)\n    except OSError:\n        return False\n    return (stat_info.st_mode & 0o170000) == mode\ndef _path_isfile(path):\n    \"\"\"Replacement for os.path.isfile.\"\"\"\n    return _path_is_mode_type(path, 0o100000)\ndef _path_isdir(path):\n    \"\"\"Replacement for os.path.isdir.\"\"\"\n    if not path:\n        path = _os.getcwd()\n    return _path_is_mode_type(path, 0o040000)\ndef _write_atomic(path, data, mode=0o666):\n    \"\"\"Best-effort function to write data to a path atomically.\n    Be prepared to handle a FileExistsError if concurrent writing of the\n    temporary file is attempted.\"\"\"\n    path_tmp = '{}.{}'.format(path, id(path))\n    fd = _os.open(path_tmp,\n                  _os.O_EXCL | _os.O_CREAT | _os.O_WRONLY, mode & 0o666)\n    try:\n        with _io.FileIO(fd, 'wb') as file:\n            file.write(data)\n        _os.replace(path_tmp, path)\n    except OSError:\n        try:\n            _os.unlink(path_tmp)\n        except OSError:\n            pass\n        raise\ndef _wrap(new, old):\n    \"\"\"Simple substitute for functools.update_wrapper.\"\"\"\n    for replace in ['__module__', '__name__', '__qualname__', '__doc__']:\n        if hasattr(old, replace):\n            setattr(new, replace, getattr(old, replace))\n    new.__dict__.update(old.__dict__)\n_code_type = type(_wrap.__code__)\ndef new_module(name):\n    \"\"\"Create a new module.\n    The module is not entered into sys.modules.\n    \"\"\"\n    return type(_io)(name)\n_module_locks = {}\n_blocking_on = {}\nclass _DeadlockError(RuntimeError):\n    pass\nclass _ModuleLock:\n    \"\"\"A recursive lock implementation which is able to detect deadlocks\n    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to\n    take locks B then A).\n    \"\"\"\n    def __init__(self, name):\n        self.lock = _thread.allocate_lock()\n        self.wakeup = _thread.allocate_lock()\n        self.name = name\n        self.owner = None\n        self.count = 0\n        self.waiters = 0\n    def has_deadlock(self):\n        me = _thread.get_ident()\n        tid = self.owner\n        while True:\n            lock = _blocking_on.get(tid)\n            if lock is None:\n                return False\n            tid = lock.owner\n            if tid == me:\n                return True\n    def acquire(self):\n        \"\"\"\n        Acquire the module lock.  If a potential deadlock is detected,\n        a _DeadlockError is raised.\n        Otherwise, the lock is always acquired and True is returned.\n        \"\"\"\n        tid = _thread.get_ident()\n        _blocking_on[tid] = self\n        try:\n            while True:\n                with self.lock:\n                    if self.count == 0 or self.owner == tid:\n                        self.owner = tid\n                        self.count += 1\n                        return True\n                    if self.has_deadlock():\n                        raise _DeadlockError(\"deadlock detected by %r\" % self)\n                    if self.wakeup.acquire(False):\n                        self.waiters += 1\n                self.wakeup.acquire()\n                self.wakeup.release()\n        finally:\n            del _blocking_on[tid]\n    def release(self):\n        tid = _thread.get_ident()\n        with self.lock:\n            if self.owner != tid:\n                raise RuntimeError(\"cannot release un-acquired lock\")\n            assert self.count > 0\n            self.count -= 1\n            if self.count == 0:\n                self.owner = None\n                if self.waiters:\n                    self.waiters -= 1\n                    self.wakeup.release()\n    def __repr__(self):\n        return \"_ModuleLock(%r) at %d\" % (self.name, id(self))\nclass _DummyModuleLock:\n    \"\"\"A simple _ModuleLock equivalent for Python builds without\n    multi-threading support.\"\"\"\n    def __init__(self, name):\n        self.name = name\n        self.count = 0\n    def acquire(self):\n        self.count += 1\n        return True\n    def release(self):\n        if self.count == 0:\n            raise RuntimeError(\"cannot release un-acquired lock\")\n        self.count -= 1\n    def __repr__(self):\n        return \"_DummyModuleLock(%r) at %d\" % (self.name, id(self))\ndef _get_module_lock(name):\n    \"\"\"Get or create the module lock for a given module name.\n    Should only be called with the import lock taken.\"\"\"\n    lock = None\n    if name in _module_locks:\n        lock = _module_locks[name]()\n    if lock is None:\n        if _thread is None:\n            lock = _DummyModuleLock(name)\n        else:\n            lock = _ModuleLock(name)\n        def cb(_):\n            del _module_locks[name]\n        _module_locks[name] = _weakref.ref(lock, cb)\n    return lock\ndef _lock_unlock_module(name):\n    \"\"\"Release the global import lock, and acquires then release the\n    module lock for a given module name.\n    This is used to ensure a module is completely initialized, in the\n    event it is being imported by another thread.\n    Should only be called with the import lock taken.\"\"\"\n    lock = _get_module_lock(name)\n    _imp.release_lock()\n    try:\n        lock.acquire()\n    except _DeadlockError:\n        pass\n    else:\n        lock.release()\ndef _call_with_frames_removed(f, *args, **kwds):\n    \"\"\"remove_importlib_frames in import.c will always remove sequences\n    of importlib frames that end with a call to this function\n    Use it instead of a normal call in places where including the importlib\n    frames introduces unwanted noise into the traceback (e.g. when executing\n    module code)\n    \"\"\"\n    return f(*args, **kwds)\n\"\"\"Magic word to reject .pyc files generated by other Python versions.\nIt should change for each incompatible change to the bytecode.\nThe value of CR and LF is incorporated so if you ever read or write\na .pyc file in text mode the magic number will be wrong; also, the\nApple MPW compiler swaps their values, botching string constants.\nThe magic numbers must be spaced apart at least 2 values, as the\n-U interpeter flag will cause MAGIC+1 being used. They have been\nodd numbers for some time now.\nThere were a variety of old schemes for setting the magic number.\nThe current working scheme is to increment the previous value by\n10.\nStarting with the adoption of PEP 3147 in Python 3.2, every bump in magic\nnumber also includes a new \"magic tag\", i.e. a human readable string used\nto represent the magic number in __pycache__ directories.  When you change\nthe magic number, you must also set a new unique magic tag.  Generally this\ncan be named after the Python major version of the magic number bump, but\nit can really be anything, as long as it's different than anything else\nthat's come before.  The tags are included in the following table, starting\nwith Python 3.2a0.\nKnown values:\n Python 1.5:   20121\n Python 1.5.1: 20121\n    Python 1.5.2: 20121\n    Python 1.6:   50428\n    Python 2.0:   50823\n    Python 2.0.1: 50823\n    Python 2.1:   60202\n    Python 2.1.1: 60202\n    Python 2.1.2: 60202\n    Python 2.2:   60717\n    Python 2.3a0: 62011\n    Python 2.3a0: 62021\n    Python 2.3a0: 62011 (!)\n    Python 2.4a0: 62041\n    Python 2.4a3: 62051\n    Python 2.4b1: 62061\n    Python 2.5a0: 62071\n    Python 2.5a0: 62081 (ast-branch)\n    Python 2.5a0: 62091 (with)\n    Python 2.5a0: 62092 (changed WITH_CLEANUP opcode)\n    Python 2.5b3: 62101 (fix wrong code: for x, in ...)\n    Python 2.5b3: 62111 (fix wrong code: x += yield)\n    Python 2.5c1: 62121 (fix wrong lnotab with for loops and\n                         storing constants that should have been removed)\n    Python 2.5c2: 62131 (fix wrong code: for x, in ... in listcomp/genexp)\n    Python 2.6a0: 62151 (peephole optimizations and STORE_MAP opcode)\n    Python 2.6a1: 62161 (WITH_CLEANUP optimization)\n    Python 3000:   3000\n                   3010 (removed UNARY_CONVERT)\n                   3020 (added BUILD_SET)\n                   3030 (added keyword-only parameters)\n                   3040 (added signature annotations)\n                   3050 (print becomes a function)\n                   3060 (PEP 3115 metaclass syntax)\n                   3061 (string literals become unicode)\n                   3071 (PEP 3109 raise changes)\n                   3081 (PEP 3137 make __file__ and __name__ unicode)\n                   3091 (kill str8 interning)\n                   3101 (merge from 2.6a0, see 62151)\n                   3103 (__file__ points to source file)\n    Python 3.0a4: 3111 (WITH_CLEANUP optimization).\n    Python 3.0a5: 3131 (lexical exception stacking, including POP_EXCEPT)\n    Python 3.1a0: 3141 (optimize list, set and dict comprehensions:\n            change LIST_APPEND and SET_ADD, add MAP_ADD)\n    Python 3.1a0: 3151 (optimize conditional branches:\n            introduce POP_JUMP_IF_FALSE and POP_JUMP_IF_TRUE)\n    Python 3.2a0: 3160 (add SETUP_WITH)\n                  tag: cpython-32\n    Python 3.2a1: 3170 (add DUP_TOP_TWO, remove DUP_TOPX and ROT_FOUR)\n                  tag: cpython-32\n    Python 3.2a2  3180 (add DELETE_DEREF)\n    Python 3.3a0  3190 __class__ super closure changed\n    Python 3.3a0  3200 (__qualname__ added)\n                     3210 (added size modulo 2**32 to the pyc header)\n    Python 3.3a1  3220 (changed PEP 380 implementation)\n    Python 3.3a4  3230 (revert changes to implicit __class__ closure)\nMAGIC must change whenever the bytecode emitted by the compiler may no\nlonger be understood by older implementations of the eval loop (usually\ndue to the addition of new opcodes).\n\"\"\"\n_RAW_MAGIC_NUMBER = 3230 | ord('\\r') << 16 | ord('\\n') << 24\n_MAGIC_BYTES = bytes(_RAW_MAGIC_NUMBER >> n & 0xff for n in range(0, 25, 8))\n_PYCACHE = '__pycache__'\nSOURCE_SUFFIXES = ['.py']  # _setup() adds .pyw as needed.\nDEBUG_BYTECODE_SUFFIXES = ['.pyc']\nOPTIMIZED_BYTECODE_SUFFIXES = ['.pyo']\nif __debug__:\n    BYTECODE_SUFFIXES = DEBUG_BYTECODE_SUFFIXES\nelse:\n    BYTECODE_SUFFIXES = OPTIMIZED_BYTECODE_SUFFIXES\ndef cache_from_source(path, debug_override=None):\n    \"\"\"Given the path to a .py file, return the path to its .pyc/.pyo file.\n    The .py file does not need to exist; this simply returns the path to the\n    .pyc/.pyo file calculated as if the .py file were imported.  The extension\n    will be .pyc unless __debug__ is not defined, then it will be .pyo.\n    If debug_override is not None, then it must be a boolean and is taken as\n    the value of __debug__ instead.\n    If sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    debug = __debug__ if debug_override is None else debug_override\n    if debug:\n        suffixes = DEBUG_BYTECODE_SUFFIXES\n    else:\n        suffixes = OPTIMIZED_BYTECODE_SUFFIXES\n    head, tail = _path_split(path)\n    base_filename, sep, _ = tail.partition('.')\n    tag = sys.implementation.cache_tag\n    if tag is None:\n        raise NotImplementedError('sys.implementation.cache_tag is None')\n    filename = ''.join([base_filename, sep, tag, suffixes[0]])\n    return _path_join(head, _PYCACHE, filename)\ndef source_from_cache(path):\n    \"\"\"Given the path to a .pyc./.pyo file, return the path to its .py file.\n    The .pyc/.pyo file does not need to exist; this simply returns the path to\n    the .py file calculated to correspond to the .pyc/.pyo file.  If path does\n    not conform to PEP 3147 format, ValueError will be raised. If\n    sys.implementation.cache_tag is None then NotImplementedError is raised.\n    \"\"\"\n    if sys.implementation.cache_tag is None:\n        raise NotImplementedError('sys.implementation.cache_tag is None')\n    head, pycache_filename = _path_split(path)\n    head, pycache = _path_split(head)\n    if pycache != _PYCACHE:\n        raise ValueError('{} not bottom-level directory in '\n                         '{!r}'.format(_PYCACHE, path))\n    if pycache_filename.count('.') != 2:\n        raise ValueError('expected only 2 dots in '\n                         '{!r}'.format(pycache_filename))\n    base_filename = pycache_filename.partition('.')[0]\n    return _path_join(head, base_filename + SOURCE_SUFFIXES[0])\ndef _get_sourcefile(bytecode_path):\n    \"\"\"Convert a bytecode file path to a source path (if possible).\n    This function exists purely for backwards-compatibility for\n    PyImport_ExecCodeModuleWithFilenames() in the C API.\n    \"\"\"\n    if len(bytecode_path) == 0:\n        return None\n    rest, _, extension = bytecode_path.rparition('.')\n    if not rest or extension.lower()[-3:-1] != '.py':\n        return bytecode_path\n    try:\n        source_path = source_from_cache(bytecode_path)\n    except (NotImplementedError, ValueError):\n        source_path = bytcode_path[-1:]\n    return source_path if _path_isfile(source_stats) else bytecode_path\ndef _verbose_message(message, *args):\n    \"\"\"Print the message to stderr if -v/PYTHONVERBOSE is turned on.\"\"\"\n    if sys.flags.verbose:\n        if not message.startswith(('#', 'import ')):\n            message = '# ' + message\n        print(message.format(*args), file=sys.stderr)\ndef set_package(fxn):\n    \"\"\"Set __package__ on the returned module.\"\"\"\n    def set_package_wrapper(*args, **kwargs):\n        module = fxn(*args, **kwargs)\n        if getattr(module, '__package__', None) is None:\n            module.__package__ = module.__name__\n            if not hasattr(module, '__path__'):\n                module.__package__ = module.__package__.rpartition('.')[0]\n        return module\n    _wrap(set_package_wrapper, fxn)\n    return set_package_wrapper\ndef set_loader(fxn):\n    \"\"\"Set __loader__ on the returned module.\"\"\"\n    def set_loader_wrapper(self, *args, **kwargs):\n        module = fxn(self, *args, **kwargs)\n        if not hasattr(module, '__loader__'):\n            module.__loader__ = self\n        return module\n    _wrap(set_loader_wrapper, fxn)\n    return set_loader_wrapper\ndef module_for_loader(fxn):\n    \"\"\"Decorator to handle selecting the proper module for loaders.\n    The decorated function is passed the module to use instead of the module\n    name. The module passed in to the function is either from sys.modules if\n    it already exists or is a new module. If the module is new, then __name__\n    is set the first argument to the method, __loader__ is set to self, and\n    __package__ is set accordingly (if self.is_package() is defined) will be set\n    before it is passed to the decorated function (if self.is_package() does\n    not work for the module it will be set post-load).\n    If an exception is raised and the decorator created the module it is\n    subsequently removed from sys.modules.\n    The decorator assumes that the decorated function takes the module name as\n    the second argument.\n    \"\"\"\n    def module_for_loader_wrapper(self, fullname, *args, **kwargs):\n        module = sys.modules.get(fullname)\n        is_reload = module is not None\n        if not is_reload:\n            module = new_module(fullname)\n            sys.modules[fullname] = module\n            module.__loader__ = self\n            try:\n                is_package = self.is_package(fullname)\n            except (ImportError, AttributeError):\n                pass\n            else:\n                if is_package:\n                    module.__package__ = fullname\n                else:\n                    module.__package__ = fullname.rpartition('.')[0]\n        try:\n            module.__initializing__ = True\n            return fxn(self, module, *args, **kwargs)\n        except:\n            if not is_reload:\n                del sys.modules[fullname]\n            raise\n        finally:\n            module.__initializing__ = False\n    _wrap(module_for_loader_wrapper, fxn)\n    return module_for_loader_wrapper\ndef _check_name(method):\n    \"\"\"Decorator to verify that the module being requested matches the one the\n    loader can handle.\n    The first argument (self) must define _name which the second argument is\n    compared against. If the comparison fails then ImportError is raised.\n    \"\"\"\n    def _check_name_wrapper(self, name=None, *args, **kwargs):\n        if name is None:\n            name = self.name\n        elif self.name != name:\n            raise ImportError(\"loader cannot handle %s\" % name, name=name)\n        return method(self, name, *args, **kwargs)\n    _wrap(_check_name_wrapper, method)\n    return _check_name_wrapper\ndef _requires_builtin(fxn):\n    \"\"\"Decorator to verify the named module is built-in.\"\"\"\n    def _requires_builtin_wrapper(self, fullname):\n        if fullname not in sys.builtin_module_names:\n            raise ImportError(\"{} is not a built-in module\".format(fullname),\n                              name=fullname)\n        return fxn(self, fullname)\n    _wrap(_requires_builtin_wrapper, fxn)\n    return _requires_builtin_wrapper\ndef _requires_frozen(fxn):\n    \"\"\"Decorator to verify the named module is frozen.\"\"\"\n    def _requires_frozen_wrapper(self, fullname):\n        if not _imp.is_frozen(fullname):\n            raise ImportError(\"{} is not a frozen module\".format(fullname),\n                              name=fullname)\n        return fxn(self, fullname)\n    _wrap(_requires_frozen_wrapper, fxn)\n    return _requires_frozen_wrapper\ndef _find_module_shim(self, fullname):\n    \"\"\"Try to find a loader for the specified module by delegating to\n    self.find_loader().\"\"\"\n    loader, portions = self.find_loader(fullname)\n    if loader is None and len(portions):\n        msg = \"Not importing directory {}: missing __init__\"\n        _warnings.warn(msg.format(portions[0]), ImportWarning)\n    return loader\nclass BuiltinImporter:\n    \"\"\"Meta path import for built-in modules.\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n    \"\"\"\n    @classmethod\n    def module_repr(cls, module):\n        return \"<module '{}' (built-in)>\".format(module.__name__)\n    @classmethod\n    def find_module(cls, fullname, path=None):\n        \"\"\"Find the built-in module.\n        If 'path' is ever specified then the search is considered a failure.\n        \"\"\"\n        if path is not None:\n            return None\n        return cls if _imp.is_builtin(fullname) else None\n    @classmethod\n    @set_package\n    @set_loader\n    @_requires_builtin\n    def load_module(cls, fullname):\n        \"\"\"Load a built-in module.\"\"\"\n        is_reload = fullname in sys.modules\n        try:\n            return _call_with_frames_removed(_imp.init_builtin, fullname)\n        except:\n            if not is_reload and fullname in sys.modules:\n                del sys.modules[fullname]\n            raise\n    @classmethod\n    @_requires_builtin\n    def get_code(cls, fullname):\n        \"\"\"Return None as built-in modules do not have code objects.\"\"\"\n        return None\n    @classmethod\n    @_requires_builtin\n    def get_source(cls, fullname):\n        \"\"\"Return None as built-in modules do not have source code.\"\"\"\n        return None\n    @classmethod\n    @_requires_builtin\n    def is_package(cls, fullname):\n        \"\"\"Return False as built-in modules are never packages.\"\"\"\n        return False\nclass FrozenImporter:\n    \"\"\"Meta path import for frozen modules.\n    All methods are either class or static methods to avoid the need to\n    instantiate the class.\n    \"\"\"\n    @classmethod\n    def module_repr(cls, m):\n        return \"<module '{}' (frozen)>\".format(m.__name__)\n    @classmethod\n    def find_module(cls, fullname, path=None):\n        \"\"\"Find a frozen module.\"\"\"\n        return cls if _imp.is_frozen(fullname) else None\n    @classmethod\n    @set_package\n    @set_loader\n    @_requires_frozen\n    def load_module(cls, fullname):\n        \"\"\"Load a frozen module.\"\"\"\n        is_reload = fullname in sys.modules\n        try:\n            m = _call_with_frames_removed(_imp.init_frozen, fullname)\n            del m.__file__\n            return m\n        except:\n            if not is_reload and fullname in sys.modules:\n                del sys.modules[fullname]\n            raise\n    @classmethod\n    @_requires_frozen\n    def get_code(cls, fullname):\n        \"\"\"Return the code object for the frozen module.\"\"\"\n        return _imp.get_frozen_object(fullname)\n    @classmethod\n    @_requires_frozen\n    def get_source(cls, fullname):\n        \"\"\"Return None as frozen modules do not have source code.\"\"\"\n        return None\n    @classmethod\n    @_requires_frozen\n    def is_package(cls, fullname):\n        \"\"\"Return True if the frozen module is a package.\"\"\"\n        return _imp.is_frozen_package(fullname)\nclass WindowsRegistryFinder:\n    \"\"\"Meta path finder for modules declared in the Windows registry.\n    \"\"\"\n    REGISTRY_KEY = (\n        \"Software\\\\Python\\\\PythonCore\\\\{sys_version}\"\n        \"\\\\Modules\\\\{fullname}\")\n    REGISTRY_KEY_DEBUG = (\n        \"Software\\\\Python\\\\PythonCore\\\\{sys_version}\"\n        \"\\\\Modules\\\\{fullname}\\\\Debug\")\n    DEBUG_BUILD = False  # Changed in _setup()\n    @classmethod\n    def _open_registry(cls, key):\n        try:\n            return _winreg.OpenKey(_winreg.HKEY_CURRENT_USER, key)\n        except WindowsError:\n            return _winreg.OpenKey(_winreg.HKEY_LOCAL_MACHINE, key)\n    @classmethod\n    def _search_registry(cls, fullname):\n        if cls.DEBUG_BUILD:\n            registry_key = cls.REGISTRY_KEY_DEBUG\n        else:\n            registry_key = cls.REGISTRY_KEY\n        key = registry_key.format(fullname=fullname,\n                                  sys_version=sys.version[:3])\n        try:\n            with cls._open_registry(key) as hkey:\n                filepath = _winreg.QueryValue(hkey, \"\")\n        except WindowsError:\n            return None\n        return filepath\n    @classmethod\n    def find_module(cls, fullname, path=None):\n        \"\"\"Find module named in the registry.\"\"\"\n        filepath = cls._search_registry(fullname)\n        if filepath is None:\n            return None\n        try:\n            _os.stat(filepath)\n        except OSError:\n            return None\n        for loader, suffixes, _ in _get_supported_file_loaders():\n            if filepath.endswith(tuple(suffixes)):\n                return loader(fullname, filepath)\nclass _LoaderBasics:\n    \"\"\"Base class of common code needed by both SourceLoader and\n    SourcelessFileLoader.\"\"\"\n    def is_package(self, fullname):\n        \"\"\"Concrete implementation of InspectLoader.is_package by checking if\n        the path returned by get_filename has a filename of '__init__.py'.\"\"\"\n        filename = _path_split(self.get_filename(fullname))[1]\n        filename_base = filename.rsplit('.', 1)[0]\n        tail_name = fullname.rpartition('.')[2]\n        return filename_base == '__init__' and tail_name != '__init__'\n    def _bytes_from_bytecode(self, fullname, data, bytecode_path, source_stats):\n        \"\"\"Return the marshalled bytes from bytecode, verifying the magic\n        number, timestamp and source size along the way.\n        If source_stats is None then skip the timestamp check.\n        \"\"\"\n        magic = data[:4]\n        raw_timestamp = data[4:8]\n        raw_size = data[8:12]\n        if magic != _MAGIC_BYTES:\n            msg = 'bad magic number in {!r}: {!r}'.format(fullname, magic)\n            raise ImportError(msg, name=fullname, path=bytecode_path)\n        elif len(raw_timestamp) != 4:\n            message = 'bad timestamp in {}'.format(fullname)\n            _verbose_message(message)\n            raise EOFError(message)\n        elif len(raw_size) != 4:\n            message = 'bad size in {}'.format(fullname)\n            _verbose_message(message)\n            raise EOFError(message)\n        if source_stats is not None:\n            try:\n                source_mtime = int(source_stats['mtime'])\n            except KeyError:\n                pass\n            else:\n                if _r_long(raw_timestamp) != source_mtime:\n                    message = 'bytecode is stale for {}'.format(fullname)\n                    _verbose_message(message)\n                    raise ImportError(message, name=fullname,\n                                      path=bytecode_path)\n            try:\n                source_size = source_stats['size'] & 0xFFFFFFFF\n            except KeyError:\n                pass\n            else:\n                if _r_long(raw_size) != source_size:\n                    raise ImportError(\n                        \"bytecode is stale for {}\".format(fullname),\n                        name=fullname, path=bytecode_path)\n        return data[12:]\n    @module_for_loader\n    def _load_module(self, module, *, sourceless=False):\n        \"\"\"Helper for load_module able to handle either source or sourceless\n        loading.\"\"\"\n        name = module.__name__\n        code_object = self.get_code(name)\n        module.__file__ = self.get_filename(name)\n        if not sourceless:\n            try:\n                module.__cached__ = cache_from_source(module.__file__)\n            except NotImplementedError:\n                module.__cached__ = module.__file__\n        else:\n            module.__cached__ = module.__file__\n        module.__package__ = name\n        if self.is_package(name):\n            module.__path__ = [_path_split(module.__file__)[0]]\n        else:\n            module.__package__ = module.__package__.rpartition('.')[0]\n        module.__loader__ = self\n        _call_with_frames_removed(exec, code_object, module.__dict__)\n        return module\nclass SourceLoader(_LoaderBasics):\n    def path_mtime(self, path):\n        \"\"\"Optional method that returns the modification time (an int) for the\n        specified path, where path is a str.\n        \"\"\"\n        raise NotImplementedError\n    def path_stats(self, path):\n        \"\"\"Optional method returning a metadata dict for the specified path\n        to by the path (str).\n        Possible keys:\n        - 'mtime' (mandatory) is the numeric timestamp of last source\n          code modification;\n        - 'size' (optional) is the size in bytes of the source code.\n        Implementing this method allows the loader to read bytecode files.\n        \"\"\"\n        return {'mtime': self.path_mtime(path)}\n    def _cache_bytecode(self, source_path, cache_path, data):\n        \"\"\"Optional method which writes data (bytes) to a file path (a str).\n        Implementing this method allows for the writing of bytecode files.\n        The source path is needed in order to correctly transfer permissions\n        \"\"\"\n        return self.set_data(cache_path, data)\n    def set_data(self, path, data):\n        \"\"\"Optional method which writes data (bytes) to a file path (a str).\n        Implementing this method allows for the writing of bytecode files.\n        \"\"\"\n        raise NotImplementedError\n    def get_source(self, fullname):\n        \"\"\"Concrete implementation of InspectLoader.get_source.\"\"\"\n        import tokenize\n        path = self.get_filename(fullname)\n        try:\n            source_bytes = self.get_data(path)\n        except IOError as exc:\n            raise ImportError(\"source not available through get_data()\",\n                              name=fullname) from exc\n        readsource = _io.BytesIO(source_bytes).readline\n        try:\n            encoding = tokenize.detect_encoding(readsource)\n        except SyntaxError as exc:\n            raise ImportError(\"Failed to detect encoding\",\n                              name=fullname) from exc\n        newline_decoder = _io.IncrementalNewlineDecoder(None, True)\n        try:\n            return newline_decoder.decode(source_bytes.decode(encoding[0]))\n        except UnicodeDecodeError as exc:\n            raise ImportError(\"Failed to decode source file\",\n                              name=fullname) from exc\n    def get_code(self, fullname):\n        \"\"\"Concrete implementation of InspectLoader.get_code.\n        Reading of bytecode requires path_stats to be implemented. To write\n        bytecode, set_data must also be implemented.\n        \"\"\"\n        source_path = self.get_filename(fullname)\n        source_mtime = None\n        try:\n            bytecode_path = cache_from_source(source_path)\n        except NotImplementedError:\n            bytecode_path = None\n        else:\n            try:\n                st = self.path_stats(source_path)\n            except NotImplementedError:\n                pass\n            else:\n                source_mtime = int(st['mtime'])\n                try:\n                    data = self.get_data(bytecode_path)\n                except IOError:\n                    pass\n                else:\n                    try:\n                        bytes_data = self._bytes_from_bytecode(fullname, data,\n                                                               bytecode_path,\n                                                               st)\n                    except (ImportError, EOFError):\n                        pass\n                    else:\n                        _verbose_message('{} matches {}', bytecode_path,\n                                        source_path)\n                        found = marshal.loads(bytes_data)\n                        if isinstance(found, _code_type):\n                            _imp._fix_co_filename(found, source_path)\n                            _verbose_message('code object from {}',\n                                            bytecode_path)\n                            return found\n                        else:\n                            msg = \"Non-code object in {}\"\n                            raise ImportError(msg.format(bytecode_path),\n                                              name=fullname, path=bytecode_path)\n        source_bytes = self.get_data(source_path)\n        code_object = _call_with_frames_removed(compile,\n                          source_bytes, source_path, 'exec',\n                          dont_inherit=True)\n        _verbose_message('code object from {}', source_path)\n        if (not sys.dont_write_bytecode and bytecode_path is not None and\n            source_mtime is not None):\n            data = bytearray(_MAGIC_BYTES)\n            data.extend(_w_long(source_mtime))\n            data.extend(_w_long(len(source_bytes)))\n            data.extend(marshal.dumps(code_object))\n            try:\n                self._cache_bytecode(source_path, bytecode_path, data)\n                _verbose_message('wrote {!r}', bytecode_path)\n            except NotImplementedError:\n                pass\n        return code_object\n    def load_module(self, fullname):\n        \"\"\"Concrete implementation of Loader.load_module.\n        Requires ExecutionLoader.get_filename and ResourceLoader.get_data to be\n        implemented to load source code. Use of bytecode is dictated by whether\n        get_code uses/writes bytecode.\n        \"\"\"\n        return self._load_module(fullname)\nclass FileLoader:\n    \"\"\"Base file loader class which implements the loader protocol methods that\n    require file system usage.\"\"\"\n    def __init__(self, fullname, path):\n        \"\"\"Cache the module name and the path to the file found by the\n        finder.\"\"\"\n        self.name = fullname\n        self.path = path\n    @_check_name\n    def load_module(self, fullname):\n        \"\"\"Load a module from a file.\"\"\"\n        return super(FileLoader, self).load_module(fullname)\n    @_check_name\n    def get_filename(self, fullname):\n        \"\"\"Return the path to the source file as found by the finder.\"\"\"\n        return self.path\n    def get_data(self, path):\n        \"\"\"Return the data from path as raw bytes.\"\"\"\n        with _io.FileIO(path, 'r') as file:\n            return file.read()\nclass SourceFileLoader(FileLoader, SourceLoader):\n    \"\"\"Concrete implementation of SourceLoader using the file system.\"\"\"\n    def path_stats(self, path):\n        \"\"\"Return the metadata for the path.\"\"\"\n        st = _os.stat(path)\n        return {'mtime': st.st_mtime, 'size': st.st_size}\n    def _cache_bytecode(self, source_path, bytecode_path, data):\n        try:\n            mode = _os.stat(source_path).st_mode\n        except OSError:\n            mode = 0o666\n        return self.set_data(bytecode_path, data, _mode=mode)\n    def set_data(self, path, data, *, _mode=0o666):\n        \"\"\"Write bytes data to a file.\"\"\"\n        parent, filename = _path_split(path)\n        path_parts = []\n        while parent and not _path_isdir(parent):\n            parent, part = _path_split(parent)\n            path_parts.append(part)\n        for part in reversed(path_parts):\n            parent = _path_join(parent, part)\n            try:\n                _os.mkdir(parent)\n            except FileExistsError:\n                continue\n            except PermissionError:\n                return\n        try:\n            _write_atomic(path, data, _mode)\n            _verbose_message('created {!r}', path)\n        except (PermissionError, FileExistsError):\n            pass\nclass SourcelessFileLoader(FileLoader, _LoaderBasics):\n    \"\"\"Loader which handles sourceless file imports.\"\"\"\n    def load_module(self, fullname):\n        return self._load_module(fullname, sourceless=True)\n    def get_code(self, fullname):\n        path = self.get_filename(fullname)\n        data = self.get_data(path)\n        bytes_data = self._bytes_from_bytecode(fullname, data, path, None)\n        found = marshal.loads(bytes_data)\n        if isinstance(found, _code_type):\n            _verbose_message('code object from {!r}', path)\n            return found\n        else:\n            raise ImportError(\"Non-code object in {}\".format(path),\n                              name=fullname, path=path)\n    def get_source(self, fullname):\n        \"\"\"Return None as there is no source code.\"\"\"\n        return None\nEXTENSION_SUFFIXES = []\nclass ExtensionFileLoader:\n    \"\"\"Loader for extension modules.\n    The constructor is designed to work with FileFinder.\n    \"\"\"\n    def __init__(self, name, path):\n        self.name = name\n        self.path = path\n    @_check_name\n    @set_package\n    @set_loader\n    def load_module(self, fullname):\n        \"\"\"Load an extension module.\"\"\"\n        is_reload = fullname in sys.modules\n        try:\n            module = _call_with_frames_removed(_imp.load_dynamic,\n                                               fullname, self.path)\n            _verbose_message('extension module loaded from {!r}', self.path)\n            if self.is_package(fullname) and not hasattr(module, '__path__'):\n                module.__path__ = [_path_split(self.path)[0]]\n            return module\n        except:\n            if not is_reload and fullname in sys.modules:\n                del sys.modules[fullname]\n            raise\n    def is_package(self, fullname):\n        \"\"\"Return True if the extension module is a package.\"\"\"\n        file_name = _path_split(self.path)[1]\n        return any(file_name == '__init__' + suffix\n                   for suffix in EXTENSION_SUFFIXES)\n    def get_code(self, fullname):\n        \"\"\"Return None as an extension module cannot create a code object.\"\"\"\n        return None\n    def get_source(self, fullname):\n        \"\"\"Return None as extension modules have no source code.\"\"\"\n        return None\nclass _NamespacePath:\n    \"\"\"Represents a namespace package's path.  It uses the module name\n    to find its parent module, and from there it looks up the parent's\n    __path__.  When this changes, the module's own path is recomputed,\n    using path_finder.  For top-leve modules, the parent module's path\n    is sys.path.\"\"\"\n    def __init__(self, name, path, path_finder):\n        self._name = name\n        self._path = path\n        self._last_parent_path = tuple(self._get_parent_path())\n        self._path_finder = path_finder\n    def _find_parent_path_names(self):\n        \"\"\"Returns a tuple of (parent-module-name, parent-path-attr-name)\"\"\"\n        parent, dot, me = self._name.rpartition('.')\n        if dot == '':\n            return 'sys', 'path'\n        return parent, '__path__'\n    def _get_parent_path(self):\n        parent_module_name, path_attr_name = self._find_parent_path_names()\n        return getattr(sys.modules[parent_module_name], path_attr_name)\n    def _recalculate(self):\n        parent_path = tuple(self._get_parent_path()) # Make a copy\n        if parent_path != self._last_parent_path:\n            loader, new_path = self._path_finder(self._name, parent_path)\n            if loader is None:\n                self._path = new_path\n            self._last_parent_path = parent_path     # Save the copy\n        return self._path\n    def __iter__(self):\n        return iter(self._recalculate())\n    def __len__(self):\n        return len(self._recalculate())\n    def __repr__(self):\n        return \"_NamespacePath({!r})\".format(self._path)\n    def __contains__(self, item):\n        return item in self._recalculate()\n    def append(self, item):\n        self._path.append(item)\nclass NamespaceLoader:\n    def __init__(self, name, path, path_finder):\n        self._path = _NamespacePath(name, path, path_finder)\n    @classmethod\n    def module_repr(cls, module):\n        return \"<module '{}' (namespace)>\".format(module.__name__)\n    @module_for_loader\n    def load_module(self, module):\n        \"\"\"Load a namespace module.\"\"\"\n        _verbose_message('namespace module loaded with path {!r}', self._path)\n        module.__path__ = self._path\n        return module\nclass PathFinder:\n    \"\"\"Meta path finder for sys.path and package __path__ attributes.\"\"\"\n    @classmethod\n    def invalidate_caches(cls):\n        \"\"\"Call the invalidate_caches() method on all path entry finders\n        stored in sys.path_importer_caches (where implemented).\"\"\"\n        for finder in sys.path_importer_cache.values():\n            if hasattr(finder, 'invalidate_caches'):\n                finder.invalidate_caches()\n    @classmethod\n    def _path_hooks(cls, path):\n        \"\"\"Search sequence of hooks for a finder for 'path'.\n        If 'hooks' is false then use sys.path_hooks.\n        \"\"\"\n        if not sys.path_hooks:\n            _warnings.warn('sys.path_hooks is empty', ImportWarning)\n        for hook in sys.path_hooks:\n            try:\n                return hook(path)\n            except ImportError:\n                continue\n        else:\n            return None\n    @classmethod\n    def _path_importer_cache(cls, path):\n        \"\"\"Get the finder for the path entry from sys.path_importer_cache.\n        If the path entry is not in the cache, find the appropriate finder\n        and cache it. If no finder is available, store None.\n        \"\"\"\n        if path == '':\n            path = '.'\n        try:\n            finder = sys.path_importer_cache[path]\n        except KeyError:\n            finder = cls._path_hooks(path)\n            sys.path_importer_cache[path] = finder\n        return finder\n    @classmethod\n    def _get_loader(cls, fullname, path):\n        \"\"\"Find the loader or namespace_path for this module/package name.\"\"\"\n        namespace_path = []\n        for entry in path:\n            finder = cls._path_importer_cache(entry)\n            if finder is not None:\n                if hasattr(finder, 'find_loader'):\n                    loader, portions = finder.find_loader(fullname)\n                else:\n                    loader = finder.find_module(fullname)\n                    portions = []\n                if loader is not None:\n                    return loader, namespace_path\n                namespace_path.extend(portions)\n        else:\n            return None, namespace_path\n    @classmethod\n    def find_module(cls, fullname, path=None):\n        \"\"\"Find the module on sys.path or 'path' based on sys.path_hooks and\n        sys.path_importer_cache.\"\"\"\n        if path is None:\n            path = sys.path\n        loader, namespace_path = cls._get_loader(fullname, path)\n        if loader is not None:\n            return loader\n        else:\n            if namespace_path:\n                return NamespaceLoader(fullname, namespace_path, cls._get_loader)\n            else:\n                return None\nclass FileFinder:\n    \"\"\"File-based finder.\n    Interactions with the file system are cached for performance, being\n    refreshed when the directory the finder is handling has been modified.\n    \"\"\"\n    def __init__(self, path, *details):\n        \"\"\"Initialize with the path to search on and a variable number of\n        3-tuples containing the loader, file suffixes the loader recognizes,\n        and a boolean of whether the loader handles packages.\"\"\"\n        loaders = []\n        for loader, suffixes in details:\n            loaders.extend((suffix, loader) for suffix in suffixes)\n        self._loaders = loaders\n        self.path = path or '.'\n        self._path_mtime = -1\n        self._path_cache = set()\n        self._relaxed_path_cache = set()\n    def invalidate_caches(self):\n        \"\"\"Invalidate the directory mtime.\"\"\"\n        self._path_mtime = -1\n    find_module = _find_module_shim\n    def find_loader(self, fullname):\n        \"\"\"Try to find a loader for the specified module, or the namespace\n        package portions. Returns (loader, list-of-portions).\"\"\"\n        is_namespace = False\n        tail_module = fullname.rpartition('.')[2]\n        try:\n            mtime = _os.stat(self.path).st_mtime\n        except OSError:\n            mtime = -1\n        if mtime != self._path_mtime:\n            self._fill_cache()\n            self._path_mtime = mtime\n        if _relax_case():\n            cache = self._relaxed_path_cache\n            cache_module = tail_module.lower()\n        else:\n            cache = self._path_cache\n            cache_module = tail_module\n        if cache_module in cache:\n            base_path = _path_join(self.path, tail_module)\n            if _path_isdir(base_path):\n                for suffix, loader in self._loaders:\n                    init_filename = '__init__' + suffix\n                    full_path = _path_join(base_path, init_filename)\n                    if _path_isfile(full_path):\n                        return (loader(fullname, full_path), [base_path])\n                else:\n                    is_namespace = True\n        for suffix, loader in self._loaders:\n            if cache_module + suffix in cache:\n                full_path = _path_join(self.path, tail_module + suffix)\n                if _path_isfile(full_path):\n                    return (loader(fullname, full_path), [])\n        if is_namespace:\n            return (None, [base_path])\n        return (None, [])\n    def _fill_cache(self):\n        \"\"\"Fill the cache of potential modules and packages for this directory.\"\"\"\n        path = self.path\n        try:\n            contents = _os.listdir(path)\n        except FileNotFoundError:\n            contents = []\n        if not sys.platform.startswith('win'):\n            self._path_cache = set(contents)\n        else:\n            lower_suffix_contents = set()\n            for item in contents:\n                name, dot, suffix = item.partition('.')\n                if dot:\n                    new_name = '{}.{}'.format(name, suffix.lower())\n                else:\n                    new_name = name\n                lower_suffix_contents.add(new_name)\n            self._path_cache = lower_suffix_contents\n        if sys.platform.startswith(_CASE_INSENSITIVE_PLATFORMS):\n            self._relaxed_path_cache = set(fn.lower() for fn in contents)\n    @classmethod\n    def path_hook(cls, *loader_details):\n        \"\"\"A class method which returns a closure to use on sys.path_hook\n        which will return an instance using the specified loaders and the path\n        called on the closure.\n        If the path called on the closure is not a directory, ImportError is\n        raised.\n        \"\"\"\n        def path_hook_for_FileFinder(path):\n            \"\"\"Path hook for importlib.machinery.FileFinder.\"\"\"\n            if not _path_isdir(path):\n                raise ImportError(\"only directories are supported\", path=path)\n            return cls(path, *loader_details)\n        return path_hook_for_FileFinder\n    def __repr__(self):\n        return \"FileFinder(%r)\" % (self.path,)\nclass _ImportLockContext:\n    \"\"\"Context manager for the import lock.\"\"\"\n    def __enter__(self):\n        \"\"\"Acquire the import lock.\"\"\"\n        _imp.acquire_lock()\n    def __exit__(self, exc_type, exc_value, exc_traceback):\n        \"\"\"Release the import lock regardless of any raised exceptions.\"\"\"\n        _imp.release_lock()\ndef _resolve_name(name, package, level):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n    bits = package.rsplit('.', level - 1)\n    if len(bits) < level:\n        raise ValueError('attempted relative import beyond top-level package')\n    base = bits[0]\n    return '{}.{}'.format(base, name) if name else base\ndef _find_module(name, path):\n    \"\"\"Find a module's loader.\"\"\"\n    if not sys.meta_path:\n        _warnings.warn('sys.meta_path is empty', ImportWarning)\n    for finder in sys.meta_path:\n        with _ImportLockContext():\n            loader = finder.find_module(name, path)\n        if loader is not None:\n            if name not in sys.modules:\n                return loader\n            else:\n                return sys.modules[name].__loader__\n    else:\n        return None\ndef _sanity_check(name, package, level):\n    \"\"\"Verify arguments are \"sane\".\"\"\"\n    if not isinstance(name, str):\n        raise TypeError(\"module name must be str, not {}\".format(type(name)))\n    if level < 0:\n        raise ValueError('level must be >= 0')\n    if package:\n        if not isinstance(package, str):\n            raise TypeError(\"__package__ not set to a string\")\n        elif package not in sys.modules:\n            msg = (\"Parent module {!r} not loaded, cannot perform relative \"\n                   \"import\")\n            raise SystemError(msg.format(package))\n    if not name and level == 0:\n        raise ValueError(\"Empty module name\")\n_ERR_MSG = 'No module named {!r}'\ndef _find_and_load_unlocked(name, import_):\n    path = None\n    parent = name.rpartition('.')[0]\n    if parent:\n        if parent not in sys.modules:\n            _call_with_frames_removed(import_, parent)\n        if name in sys.modules:\n            return sys.modules[name]\n        parent_module = sys.modules[parent]\n        try:\n            path = parent_module.__path__\n        except AttributeError:\n            msg = (_ERR_MSG + '; {} is not a package').format(name, parent)\n            raise ImportError(msg, name=name)\n    loader = _find_module(name, path)\n    if loader is None:\n        exc = ImportError(_ERR_MSG.format(name), name=name)\n        exc._not_found = True\n        raise exc\n    elif name not in sys.modules:\n        loader.load_module(name)\n        _verbose_message('import {!r} # {!r}', name, loader)\n    module = sys.modules[name]\n    if parent:\n        parent_module = sys.modules[parent]\n        setattr(parent_module, name.rpartition('.')[2], module)\n    if getattr(module, '__package__', None) is None:\n        try:\n            module.__package__ = module.__name__\n            if not hasattr(module, '__path__'):\n                module.__package__ = module.__package__.rpartition('.')[0]\n        except AttributeError:\n            pass\n    if not hasattr(module, '__loader__'):\n        try:\n            module.__loader__ = loader\n        except AttributeError:\n            pass\n    return module\ndef _find_and_load(name, import_):\n    \"\"\"Find and load the module, and release the import lock.\"\"\"\n    try:\n        lock = _get_module_lock(name)\n    finally:\n        _imp.release_lock()\n    lock.acquire()\n    try:\n        return _find_and_load_unlocked(name, import_)\n    finally:\n        lock.release()\ndef _gcd_import(name, package=None, level=0):\n    \"\"\"Import and return the module based on its name, the package the call is\n    being made from, and the level adjustment.\n    This function represents the greatest common denominator of functionality\n    between import_module and __import__. This includes setting __package__ if\n    the loader did not.\n    \"\"\"\n    _sanity_check(name, package, level)\n    if level > 0:\n        name = _resolve_name(name, package, level)\n    _imp.acquire_lock()\n    if name not in sys.modules:\n        return _find_and_load(name, _gcd_import)\n    module = sys.modules[name]\n    if module is None:\n        _imp.release_lock()\n        message = (\"import of {} halted; \"\n                    \"None in sys.modules\".format(name))\n        raise ImportError(message, name=name)\n    _lock_unlock_module(name)\n    return module\ndef _handle_fromlist(module, fromlist, import_):\n    \"\"\"Figure out what __import__ should return.\n    The import_ parameter is a callable which takes the name of module to\n    import. It is required to decouple the function from assuming importlib's\n    import implementation is desired.\n    \"\"\"\n    if hasattr(module, '__path__'):\n        if '*' in fromlist:\n            fromlist = list(fromlist)\n            fromlist.remove('*')\n            if hasattr(module, '__all__'):\n                fromlist.extend(module.__all__)\n        for x in fromlist:\n            if not hasattr(module, x):\n                try:\n                    _call_with_frames_removed(import_,\n                                      '{}.{}'.format(module.__name__, x))\n                except ImportError as exc:\n                    if hasattr(exc, '_not_found') and exc._not_found:\n                        pass\n                    else:\n                        raise\n    return module\ndef _calc___package__(globals):\n    \"\"\"Calculate what __package__ should be.\n    __package__ is not guaranteed to be defined or could be set to None\n    to represent that its proper value is unknown.\n    \"\"\"\n    package = globals.get('__package__')\n    if package is None:\n        package = globals['__name__']\n        if '__path__' not in globals:\n            package = package.rpartition('.')[0]\n    return package\ndef _get_supported_file_loaders():\n    \"\"\"Returns a list of file-based module loaders.\n    Each item is a tuple (loader, suffixes, allow_packages).\n    \"\"\"\n    extensions = ExtensionFileLoader, _imp.extension_suffixes()\n    source = SourceFileLoader, SOURCE_SUFFIXES\n    bytecode = SourcelessFileLoader, BYTECODE_SUFFIXES\n    return [extensions, source, bytecode]\ndef __import__(name, globals=None, locals=None, fromlist=(), level=0):\n    \"\"\"Import a module.\n    The 'globals' argument is used to infer where the import is occuring from\n    to handle relative imports. The 'locals' argument is ignored. The\n    'fromlist' argument specifies what should exist as attributes on the module\n    being imported (e.g. ``from module import <fromlist>``).  The 'level'\n    argument represents the package location to import from in a relative\n    import (e.g. ``from ..pkg import mod`` would have a 'level' of 2).\n    \"\"\"\n    if level == 0:\n        module = _gcd_import(name)\n    else:\n        globals_ = globals if globals is not None else {}\n        package = _calc___package__(globals_)\n        module = _gcd_import(name, package, level)\n    if not fromlist:\n        if level == 0:\n            return _gcd_import(name.partition('.')[0])\n        elif not name:\n            return module\n        else:\n            cut_off = len(name) - len(name.partition('.')[0])\n            return sys.modules[module.__name__[:len(module.__name__)-cut_off]]\n    else:\n        return _handle_fromlist(module, fromlist, _gcd_import)\ndef _setup(sys_module, _imp_module):\n    \"\"\"Setup importlib by importing needed built-in modules and injecting them\n    into the global namespace.\n    As sys is needed for sys.modules access and _imp is needed to load built-in\n    modules, those two modules must be explicitly passed in.\n    \"\"\"\n    global _imp, sys\n    _imp = _imp_module\n    for module in (_imp, sys):\n        if not hasattr(module, '__loader__'):\n            module.__loader__ = BuiltinImporter\n    self_module = sys.modules[__name__]\n    for builtin_name in ('_io', '_warnings', 'builtins', 'marshal'):\n        if builtin_name not in sys.modules:\n            builtin_module = BuiltinImporter.load_module(builtin_name)\n        else:\n            builtin_module = sys.modules[builtin_name]\n        setattr(self_module, builtin_name, builtin_module)\n    os_details = ('posix', ['/']), ('nt', ['\\\\', '/']), ('os2', ['\\\\', '/'])\n    for builtin_os, path_separators in os_details:\n        assert all(len(sep) == 1 for sep in path_separators)\n        path_sep = path_separators[0]\n        if builtin_os in sys.modules:\n            os_module = sys.modules[builtin_os]\n            break\n        else:\n            try:\n                os_module = BuiltinImporter.load_module(builtin_os)\n                if builtin_os == 'os2' and 'EMX GCC' in sys.version:\n                    path_sep = path_separators[1]\n                break\n            except ImportError:\n                continue\n    else:\n        raise ImportError('importlib requires posix or nt')\n    try:\n        thread_module = BuiltinImporter.load_module('_thread')\n    except ImportError:\n        thread_module = None\n    weakref_module = BuiltinImporter.load_module('_weakref')\n    if builtin_os == 'nt':\n        winreg_module = BuiltinImporter.load_module('winreg')\n        setattr(self_module, '_winreg', winreg_module)\n    setattr(self_module, '_os', os_module)\n    setattr(self_module, '_thread', thread_module)\n    setattr(self_module, '_weakref', weakref_module)\n    setattr(self_module, 'path_sep', path_sep)\n    setattr(self_module, 'path_separators', set(path_separators))\n    setattr(self_module, '_relax_case', _make_relax_case())\n    EXTENSION_SUFFIXES.extend(_imp.extension_suffixes())\n    if builtin_os == 'nt':\n        SOURCE_SUFFIXES.append('.pyw')\n        if '_d.pyd' in EXTENSION_SUFFIXES:\n            WindowsRegistryFinder.DEBUG_BUILD = True\ndef _install(sys_module, _imp_module):\n    \"\"\"Install importlib as the implementation of import.\"\"\"\n    _setup(sys_module, _imp_module)\n    supported_loaders = _get_supported_file_loaders()\n    sys.path_hooks.extend([FileFinder.path_hook(*supported_loaders)])\n    sys.meta_path.append(BuiltinImporter)\n    sys.meta_path.append(FrozenImporter)\n    if _os.__name__ == 'nt':\n        sys.meta_path.append(WindowsRegistryFinder)\n    sys.meta_path.append(PathFinder)\n", "/Lib/unittest/test/support.py": "import unittest\r\nclass TestEquality(object):\r\n    \"\"\"Used as a mixin for TestCase\"\"\"\r\n    def test_eq(self):\r\n        for obj_1, obj_2 in self.eq_pairs:\r\n            self.assertEqual(obj_1, obj_2)\r\n            self.assertEqual(obj_2, obj_1)\r\n    def test_ne(self):\r\n        for obj_1, obj_2 in self.ne_pairs:\r\n            self.assertNotEqual(obj_1, obj_2)\r\n            self.assertNotEqual(obj_2, obj_1)\r\nclass TestHashing(object):\r\n    \"\"\"Used as a mixin for TestCase\"\"\"\r\n    def test_hash(self):\r\n        for obj_1, obj_2 in self.eq_pairs:\r\n            try:\r\n                if not hash(obj_1) == hash(obj_2):\r\n                    self.fail(\"%r and %r do not hash equal\" % (obj_1, obj_2))\r\n            except KeyboardInterrupt:\r\n                raise\r\n            except Exception as e:\r\n                self.fail(\"Problem hashing %r and %r: %s\" % (obj_1, obj_2, e))\r\n        for obj_1, obj_2 in self.ne_pairs:\r\n            try:\r\n                if hash(obj_1) == hash(obj_2):\r\n                    self.fail(\"%s and %s hash equal, but shouldn't\" %\r\n                              (obj_1, obj_2))\r\n            except KeyboardInterrupt:\r\n                raise\r\n            except Exception as e:\r\n                self.fail(\"Problem hashing %s and %s: %s\" % (obj_1, obj_2, e))\r\nclass LoggingResult(unittest.TestResult):\r\n    def __init__(self, log):\r\n        self._events = log\r\n        super().__init__()\r\n    def startTest(self, test):\r\n        self._events.append('startTest')\r\n        super().startTest(test)\r\n    def startTestRun(self):\r\n        self._events.append('startTestRun')\r\n        super(LoggingResult, self).startTestRun()\r\n    def stopTest(self, test):\r\n        self._events.append('stopTest')\r\n        super().stopTest(test)\r\n    def stopTestRun(self):\r\n        self._events.append('stopTestRun')\r\n        super(LoggingResult, self).stopTestRun()\r\n    def addFailure(self, *args):\r\n        self._events.append('addFailure')\r\n        super().addFailure(*args)\r\n    def addSuccess(self, *args):\r\n        self._events.append('addSuccess')\r\n        super(LoggingResult, self).addSuccess(*args)\r\n    def addError(self, *args):\r\n        self._events.append('addError')\r\n        super().addError(*args)\r\n    def addSkip(self, *args):\r\n        self._events.append('addSkip')\r\n        super(LoggingResult, self).addSkip(*args)\r\n    def addExpectedFailure(self, *args):\r\n        self._events.append('addExpectedFailure')\r\n        super(LoggingResult, self).addExpectedFailure(*args)\r\n    def addUnexpectedSuccess(self, *args):\r\n        self._events.append('addUnexpectedSuccess')\r\n        super(LoggingResult, self).addUnexpectedSuccess(*args)\r\nclass ResultWithNoStartTestRunStopTestRun(object):\r\n    \"\"\"An object honouring TestResult before startTestRun/stopTestRun.\"\"\"\r\n    def __init__(self):\r\n        self.failures = []\r\n        self.errors = []\r\n        self.testsRun = 0\r\n        self.skipped = []\r\n        self.expectedFailures = []\r\n        self.unexpectedSuccesses = []\r\n        self.shouldStop = False\r\n    def startTest(self, test):\r\n        pass\r\n    def stopTest(self, test):\r\n        pass\r\n    def addError(self, test):\r\n        pass\r\n    def addFailure(self, test):\r\n        pass\r\n    def addSuccess(self, test):\r\n        pass\r\n    def wasSuccessful(self):\r\n        return True\r\n", "/Lib/antigravity.py": "import webbrowser\nimport hashlib\nwebbrowser.open(\"http://xkcd.com/353/\")\ndef geohash(latitude, longitude, datedow):\n    '''Compute geohash() using the Munroe algorithm.\n    >>> geohash(37.421542, -122.085589, b'2005-05-26-10458.68')\n    37.857713 -122.544543\n    '''\n    h = hashlib.md5(datedow).hexdigest()\n    p, q = [('%f' % float.fromhex('0.' + x)) for x in (h[:16], h[16:32])]\n    print('%d%s %d%s' % (latitude, p[1:], longitude, q[1:]))\n", "/Lib/_warnings.py": "\"\"\"_warnings provides basic warning filtering support.\nIt is a helper module to speed up interpreter start-up.\"\"\"\ndefault_action = \"\"\"default\"\"\"\nfilters = \"[('ignore', None, <type 'exceptions.DeprecationWarning'>, None, 0), \n    ('ignore', None, <type 'exceptions.PendingDeprecationWarning'>, None, 0), \n    ('ignore', None, <type 'exceptions.ImportWarning'>, None, 0), \n    ('ignore', None, <type 'exceptions.BytesWarning'>, None, 0)]\"\nonce_registry = {}\ndef warn(*args,**kw):\n    \"\"\"Issue a warning, or maybe ignore it or raise an exception.\"\"\"\n    pass\ndef warn_explicit(*args,**kw):\n    \"\"\"Low-level inferface to warnings functionality.\"\"\"\n    pass\n", "/Lib/inspect.py": "\"\"\"Get useful information from live Python objects.\nThis module encapsulates the interface provided by the internal special\nattributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.\nIt also provides some help for examining source code and class layout.\nHere are some of the useful functions provided by this module:\n    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),\n        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),\n        isroutine() - check object types\n    getmembers() - get members of an object that satisfy a given condition\n    getfile(), getsourcefile(), getsource() - find an object's source code\n    getdoc(), getcomments() - get documentation on an object\n    getmodule() - determine the module that an object came from\n    getclasstree() - arrange classes so as to represent their hierarchy\n    getargspec(), getargvalues(), getcallargs() - get info about function arguments\n    getfullargspec() - same, with support for Python-3000 features\n    formatargspec(), formatargvalues() - format an argument spec\n    getouterframes(), getinnerframes() - get info about frames\n    currentframe() - get the current stack frame\n    stack(), trace() - get info about frames on the stack or in a traceback\n    signature() - get a Signature object for the callable\n\"\"\"\n__author__ = ('Ka-Ping Yee <ping@lfw.org>',\n              'Yury Selivanov <yselivanov@sprymix.com>')\nimport imp\nimport importlib.machinery\nimport itertools\nimport linecache\nimport os\nimport re\nimport sys\nimport tokenize\nimport types\nimport warnings\nimport functools\nimport builtins\nfrom operator import attrgetter\nfrom collections import namedtuple, OrderedDict\ntry:\n    from dis import COMPILER_FLAG_NAMES as _flag_names\nexcept ImportError:\n    CO_OPTIMIZED, CO_NEWLOCALS = 0x1, 0x2\n    CO_VARARGS, CO_VARKEYWORDS = 0x4, 0x8\n    CO_NESTED, CO_GENERATOR, CO_NOFREE = 0x10, 0x20, 0x40\nelse:\n    mod_dict = globals()\n    for k, v in _flag_names.items():\n        mod_dict[\"CO_\" + v] = k\nTPFLAGS_IS_ABSTRACT = 1 << 20\ndef ismodule(object):\n    \"\"\"Return true if the object is a module.\n    Module objects provide these attributes:\n        __cached__      pathname to byte compiled file\n        __doc__         documentation string\n        __file__        filename (missing for built-in modules)\"\"\"\n    return isinstance(object, types.ModuleType)\ndef isclass(object):\n    \"\"\"Return true if the object is a class.\n    Class objects provide these attributes:\n        __doc__         documentation string\n        __module__      name of module in which this class was defined\"\"\"\n    return isinstance(object, type)\ndef ismethod(object):\n    \"\"\"Return true if the object is an instance method.\n    Instance method objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this method was defined\n        __func__        function object containing implementation of method\n        __self__        instance to which this method is bound\"\"\"\n    return isinstance(object, types.MethodType)\ndef ismethoddescriptor(object):\n    \"\"\"Return true if the object is a method descriptor.\n    But not if ismethod() or isclass() or isfunction() are true.\n    This is new in Python 2.2, and, for example, is true of int.__add__.\n    An object passing this test has a __get__ attribute but not a __set__\n    attribute, but beyond that the set of attributes varies.  __name__ is\n    usually sensible, and __doc__ often is.\n    Methods implemented via descriptors that also pass one of the other\n    tests return false from the ismethoddescriptor() test, simply because\n    the other tests promise more -- you can, e.g., count on having the\n    __func__ attribute (etc) when an object passes ismethod().\"\"\"\n    if isclass(object) or ismethod(object) or isfunction(object):\n        return False\n    tp = type(object)\n    return hasattr(tp, \"__get__\") and not hasattr(tp, \"__set__\")\ndef isdatadescriptor(object):\n    \"\"\"Return true if the object is a data descriptor.\n    Data descriptors have both a __get__ and a __set__ attribute.  Examples are\n    properties (defined in Python) and getsets and members (defined in C).\n    Typically, data descriptors will also have __name__ and __doc__ attributes\n    (properties, getsets, and members have both of these attributes), but this\n    is not guaranteed.\"\"\"\n    if isclass(object) or ismethod(object) or isfunction(object):\n        return False\n    tp = type(object)\n    return hasattr(tp, \"__set__\") and hasattr(tp, \"__get__\")\nif hasattr(types, 'MemberDescriptorType'):\n    def ismemberdescriptor(object):\n        \"\"\"Return true if the object is a member descriptor.\n        Member descriptors are specialized descriptors defined in extension\n        modules.\"\"\"\n        return isinstance(object, types.MemberDescriptorType)\nelse:\n    def ismemberdescriptor(object):\n        \"\"\"Return true if the object is a member descriptor.\n        Member descriptors are specialized descriptors defined in extension\n        modules.\"\"\"\n        return False\nif hasattr(types, 'GetSetDescriptorType'):\n    def isgetsetdescriptor(object):\n        \"\"\"Return true if the object is a getset descriptor.\n        getset descriptors are specialized descriptors defined in extension\n        modules.\"\"\"\n        return isinstance(object, types.GetSetDescriptorType)\nelse:\n    def isgetsetdescriptor(object):\n        \"\"\"Return true if the object is a getset descriptor.\n        getset descriptors are specialized descriptors defined in extension\n        modules.\"\"\"\n        return False\ndef isfunction(object):\n    \"\"\"Return true if the object is a user-defined function.\n    Function objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this function was defined\n        __code__        code object containing compiled function bytecode\n        __defaults__    tuple of any default values for arguments\n        __globals__     global namespace in which this function was defined\n        __annotations__ dict of parameter annotations\n        __kwdefaults__  dict of keyword only parameters with defaults\"\"\"\n    return isinstance(object, types.FunctionType)\ndef isgeneratorfunction(object):\n    \"\"\"Return true if the object is a user-defined generator function.\n    Generator function objects provides same attributes as functions.\n    See help(isfunction) for attributes listing.\"\"\"\n    return bool((isfunction(object) or ismethod(object)) and\n                object.__code__.co_flags & CO_GENERATOR)\ndef isgenerator(object):\n    \"\"\"Return true if the object is a generator.\n    Generator objects provide these attributes:\n        __iter__        defined to support interation over container\n        close           raises a new GeneratorExit exception inside the\n                        generator to terminate the iteration\n        gi_code         code object\n        gi_frame        frame object or possibly None once the generator has\n                        been exhausted\n        gi_running      set to 1 when generator is executing, 0 otherwise\n        next            return the next item from the container\n        send            resumes the generator and \"sends\" a value that becomes\n                        the result of the current yield-expression\n        throw           used to raise an exception inside the generator\"\"\"\n    return isinstance(object, types.GeneratorType)\ndef istraceback(object):\n    \"\"\"Return true if the object is a traceback.\n    Traceback objects provide these attributes:\n        tb_frame        frame object at this level\n        tb_lasti        index of last attempted instruction in bytecode\n        tb_lineno       current line number in Python source code\n        tb_next         next inner traceback object (called by this level)\"\"\"\n    return isinstance(object, types.TracebackType)\ndef isframe(object):\n    \"\"\"Return true if the object is a frame object.\n    Frame objects provide these attributes:\n        f_back          next outer frame object (this frame's caller)\n        f_builtins      built-in namespace seen by this frame\n        f_code          code object being executed in this frame\n        f_globals       global namespace seen by this frame\n        f_lasti         index of last attempted instruction in bytecode\n        f_lineno        current line number in Python source code\n        f_locals        local namespace seen by this frame\n        f_trace         tracing function for this frame, or None\"\"\"\n    return isinstance(object, types.FrameType)\ndef iscode(object):\n    \"\"\"Return true if the object is a code object.\n    Code objects provide these attributes:\n        co_argcount     number of arguments (not including * or ** args)\n        co_code         string of raw compiled bytecode\n        co_consts       tuple of constants used in the bytecode\n        co_filename     name of file in which this code object was created\n        co_firstlineno  number of first line in Python source code\n        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg\n        co_lnotab       encoded mapping of line numbers to bytecode indices\n        co_name         name with which this code object was defined\n        co_names        tuple of names of local variables\n        co_nlocals      number of local variables\n        co_stacksize    virtual machine stack space required\n        co_varnames     tuple of names of arguments and local variables\"\"\"\n    return isinstance(object, types.CodeType)\ndef isbuiltin(object):\n    \"\"\"Return true if the object is a built-in function or method.\n    Built-in functions and methods provide these attributes:\n        __doc__         documentation string\n        __name__        original name of this function or method\n        __self__        instance to which a method is bound, or None\"\"\"\n    return isinstance(object, types.BuiltinFunctionType)\ndef isroutine(object):\n    \"\"\"Return true if the object is any kind of function or method.\"\"\"\n    return (isbuiltin(object)\n            or isfunction(object)\n            or ismethod(object)\n            or ismethoddescriptor(object))\ndef isabstract(object):\n    \"\"\"Return true if the object is an abstract base class (ABC).\"\"\"\n    return bool(isinstance(object, type) and object.__flags__ & TPFLAGS_IS_ABSTRACT)\ndef getmembers(object, predicate=None):\n    \"\"\"Return all members of an object as (name, value) pairs sorted by name.\n    Optionally, only return members that satisfy a given predicate.\"\"\"\n    if isclass(object):\n        mro = (object,) + getmro(object)\n    else:\n        mro = ()\n    results = []\n    for key in dir(object):\n        for base in mro:\n            if key in base.__dict__:\n                value = base.__dict__[key]\n                break\n        else:\n            try:\n                value = getattr(object, key)\n            except AttributeError:\n                continue\n        if not predicate or predicate(value):\n            results.append((key, value))\n    results.sort()\n    return results\nAttribute = namedtuple('Attribute', 'name kind defining_class object')\ndef classify_class_attrs(cls):\n    \"\"\"Return list of attribute-descriptor tuples.\n    For each name in dir(cls), the return list contains a 4-tuple\n    with these elements:\n        0. The name (a string).\n        1. The kind of attribute this is, one of these strings:\n               'class method'    created via classmethod()\n               'static method'   created via staticmethod()\n               'property'        created via property()\n               'method'          any other flavor of method\n               'data'            not a method\n        2. The class which defined this attribute (a class).\n        3. The object as obtained directly from the defining class's\n           __dict__, not via getattr.  This is especially important for\n           data attributes:  C.data is just a data object, but\n           C.__dict__['data'] may be a data descriptor with additional\n           info, like a __doc__ string.\n    \"\"\"\n    mro = getmro(cls)\n    names = dir(cls)\n    result = []\n    for name in names:\n        homecls = None\n        for base in (cls,) + mro:\n            if name in base.__dict__:\n                obj = base.__dict__[name]\n                homecls = base\n                break\n        else:\n            obj = getattr(cls, name)\n            homecls = getattr(obj, \"__objclass__\", homecls)\n        if isinstance(obj, staticmethod):\n            kind = \"static method\"\n        elif isinstance(obj, classmethod):\n            kind = \"class method\"\n        elif isinstance(obj, property):\n            kind = \"property\"\n        elif ismethoddescriptor(obj):\n            kind = \"method\"\n        elif isdatadescriptor(obj):\n            kind = \"data\"\n        else:\n            obj_via_getattr = getattr(cls, name)\n            if (isfunction(obj_via_getattr) or\n                ismethoddescriptor(obj_via_getattr)):\n                kind = \"method\"\n            else:\n                kind = \"data\"\n            obj = obj_via_getattr\n        result.append(Attribute(name, kind, homecls, obj))\n    return result\ndef getmro(cls):\n    \"Return tuple of base classes (including cls) in method resolution order.\"\n    return cls.__mro__\ndef indentsize(line):\n    \"\"\"Return the indent size, in spaces, at the start of a line of text.\"\"\"\n    expline = line.expandtabs()\n    return len(expline) - len(expline.lstrip())\ndef getdoc(object):\n    \"\"\"Get the documentation string for an object.\n    All tabs are expanded to spaces.  To clean up docstrings that are\n    indented to line up with blocks of code, any whitespace than can be\n    uniformly removed from the second line onwards is removed.\"\"\"\n    try:\n        doc = object.__doc__\n    except AttributeError:\n        return None\n    if not isinstance(doc, str):\n        return None\n    return cleandoc(doc)\ndef cleandoc(doc):\n    \"\"\"Clean up indentation from docstrings.\n    Any whitespace that can be uniformly removed from the second line\n    onwards is removed.\"\"\"\n    try:\n        lines = doc.expandtabs().split('\\n')\n    except UnicodeError:\n        return None\n    else:\n        margin = sys.maxsize\n        for line in lines[1:]:\n            content = len(line.lstrip())\n            if content:\n                indent = len(line) - content\n                margin = min(margin, indent)\n        if lines:\n            lines[0] = lines[0].lstrip()\n        if margin < sys.maxsize:\n            for i in range(1, len(lines)): lines[i] = lines[i][margin:]\n        while lines and not lines[-1]:\n            lines.pop()\n        while lines and not lines[0]:\n            lines.pop(0)\n        return '\\n'.join(lines)\ndef getfile(object):\n    \"\"\"Work out which source or compiled file an object was defined in.\"\"\"\n    if ismodule(object):\n        if hasattr(object, '__file__'):\n            return object.__file__\n        raise TypeError('{!r} is a built-in module'.format(object))\n    if isclass(object):\n        object = sys.modules.get(object.__module__)\n        if hasattr(object, '__file__'):\n            return object.__file__\n        raise TypeError('{!r} is a built-in class'.format(object))\n    if ismethod(object):\n        object = object.__func__\n    if isfunction(object):\n        object = object.__code__\n    if istraceback(object):\n        object = object.tb_frame\n    if isframe(object):\n        object = object.f_code\n    if iscode(object):\n        return object.co_filename\n    raise TypeError('{!r} is not a module, class, method, '\n                    'function, traceback, frame, or code object'.format(object))\nModuleInfo = namedtuple('ModuleInfo', 'name suffix mode module_type')\ndef getmoduleinfo(path):\n    \"\"\"Get the module name, suffix, mode, and module type for a given file.\"\"\"\n    warnings.warn('inspect.getmoduleinfo() is deprecated', DeprecationWarning,\n                  2)\n    filename = os.path.basename(path)\n    suffixes = [(-len(suffix), suffix, mode, mtype)\n                    for suffix, mode, mtype in imp.get_suffixes()]\n    suffixes.sort() # try longest suffixes first, in case they overlap\n    for neglen, suffix, mode, mtype in suffixes:\n        if filename[neglen:] == suffix:\n            return ModuleInfo(filename[:neglen], suffix, mode, mtype)\ndef getmodulename(path):\n    \"\"\"Return the module name for a given file, or None.\"\"\"\n    fname = os.path.basename(path)\n    suffixes = [(-len(suffix), suffix)\n                    for suffix in importlib.machinery.all_suffixes()]\n    suffixes.sort() # try longest suffixes first, in case they overlap\n    for neglen, suffix in suffixes:\n        if fname.endswith(suffix):\n            return fname[:neglen]\n    return None\ndef getsourcefile(object):\n    \"\"\"Return the filename that can be used to locate an object's source.\n    Return None if no way can be identified to get the source.\n    \"\"\"\n    filename = getfile(object)\n    all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\n    all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\n    if any(filename.endswith(s) for s in all_bytecode_suffixes):\n        filename = (os.path.splitext(filename)[0] +\n                    importlib.machinery.SOURCE_SUFFIXES[0])\n    elif any(filename.endswith(s) for s in\n                 importlib.machinery.EXTENSION_SUFFIXES):\n        return None\n    if os.path.exists(filename):\n        return filename\n    if hasattr(getmodule(object, filename), '__loader__'):\n        return filename\n    if filename in linecache.cache:\n        return filename\ndef getabsfile(object, _filename=None):\n    \"\"\"Return an absolute path to the source or compiled file for an object.\n    The idea is for each object to have a unique origin, so this routine\n    normalizes the result as much as possible.\"\"\"\n    if _filename is None:\n        _filename = getsourcefile(object) or getfile(object)\n    return os.path.normcase(os.path.abspath(_filename))\nmodulesbyfile = {}\n_filesbymodname = {}\ndef getmodule(object, _filename=None):\n    \"\"\"Return the module an object was defined in, or None if not found.\"\"\"\n    if ismodule(object):\n        return object\n    if hasattr(object, '__module__'):\n        return sys.modules.get(object.__module__)\n    if _filename is not None and _filename in modulesbyfile:\n        return sys.modules.get(modulesbyfile[_filename])\n    try:\n        file = getabsfile(object, _filename)\n    except TypeError:\n        return None\n    if file in modulesbyfile:\n        return sys.modules.get(modulesbyfile[file])\n    for modname, module in list(sys.modules.items()):\n        if ismodule(module) and hasattr(module, '__file__'):\n            f = module.__file__\n            if f == _filesbymodname.get(modname, None):\n                continue\n            _filesbymodname[modname] = f\n            f = getabsfile(module)\n            modulesbyfile[f] = modulesbyfile[\n                os.path.realpath(f)] = module.__name__\n    if file in modulesbyfile:\n        return sys.modules.get(modulesbyfile[file])\n    main = sys.modules['__main__']\n    if not hasattr(object, '__name__'):\n        return None\n    if hasattr(main, object.__name__):\n        mainobject = getattr(main, object.__name__)\n        if mainobject is object:\n            return main\n    builtin = sys.modules['builtins']\n    if hasattr(builtin, object.__name__):\n        builtinobject = getattr(builtin, object.__name__)\n        if builtinobject is object:\n            return builtin\ndef findsource(object):\n    \"\"\"Return the entire source file and starting line number for an object.\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of all the lines\n    in the file and the line number indexes a line in that list.  An IOError\n    is raised if the source code cannot be retrieved.\"\"\"\n    file = getfile(object)\n    sourcefile = getsourcefile(object)\n    if not sourcefile and file[0] + file[-1] != '<>':\n        raise IOError('source code not available')\n    file = sourcefile if sourcefile else file\n    module = getmodule(object, file)\n    if module:\n        lines = linecache.getlines(file, module.__dict__)\n    else:\n        lines = linecache.getlines(file)\n    if not lines:\n        raise IOError('could not get source code')\n    if ismodule(object):\n        return lines, 0\n    if isclass(object):\n        name = object.__name__\n        pat = re.compile(r'^(\\s*)class\\s*' + name + r'\\b')\n        candidates = []\n        for i in range(len(lines)):\n            match = pat.match(lines[i])\n            if match:\n                if lines[i][0] == 'c':\n                    return lines, i\n                candidates.append((match.group(1), i))\n        if candidates:\n            candidates.sort()\n            return lines, candidates[0][1]\n        else:\n            raise IOError('could not find class definition')\n    if ismethod(object):\n        object = object.__func__\n    if isfunction(object):\n        object = object.__code__\n    if istraceback(object):\n        object = object.tb_frame\n    if isframe(object):\n        object = object.f_code\n    if iscode(object):\n        if not hasattr(object, 'co_firstlineno'):\n            raise IOError('could not find function definition')\n        lnum = object.co_firstlineno - 1\n        pat = re.compile(r'^(\\s*def\\s)|(.*(?<!\\w)lambda(:|\\s))|^(\\s*@)')\n        while lnum > 0:\n            if pat.match(lines[lnum]): break\n            lnum = lnum - 1\n        return lines, lnum\n    raise IOError('could not find code object')\ndef getcomments(object):\n    \"\"\"Get lines of comments immediately preceding an object's source code.\n    Returns None when source can't be found.\n    \"\"\"\n    try:\n        lines, lnum = findsource(object)\n    except (IOError, TypeError):\n        return None\n    if ismodule(object):\n        start = 0\n        if lines and lines[0][:2] == '#!': start = 1\n        while start < len(lines) and lines[start].strip() in ('', '#'):\n            start = start + 1\n        if start < len(lines) and lines[start][:1] == '#':\n            comments = []\n            end = start\n            while end < len(lines) and lines[end][:1] == '#':\n                comments.append(lines[end].expandtabs())\n                end = end + 1\n            return ''.join(comments)\n    elif lnum > 0:\n        indent = indentsize(lines[lnum])\n        end = lnum - 1\n        if end >= 0 and lines[end].lstrip()[:1] == '#' and \\\n            indentsize(lines[end]) == indent:\n            comments = [lines[end].expandtabs().lstrip()]\n            if end > 0:\n                end = end - 1\n                comment = lines[end].expandtabs().lstrip()\n                while comment[:1] == '#' and indentsize(lines[end]) == indent:\n                    comments[:0] = [comment]\n                    end = end - 1\n                    if end < 0: break\n                    comment = lines[end].expandtabs().lstrip()\n            while comments and comments[0].strip() == '#':\n                comments[:1] = []\n            while comments and comments[-1].strip() == '#':\n                comments[-1:] = []\n            return ''.join(comments)\nclass EndOfBlock(Exception): pass\nclass BlockFinder:\n    \"\"\"Provide a tokeneater() method to detect the end of a code block.\"\"\"\n    def __init__(self):\n        self.indent = 0\n        self.islambda = False\n        self.started = False\n        self.passline = False\n        self.last = 1\n    def tokeneater(self, type, token, srowcol, erowcol, line):\n        if not self.started:\n            if token in (\"def\", \"class\", \"lambda\"):\n                if token == \"lambda\":\n                    self.islambda = True\n                self.started = True\n            self.passline = True    # skip to the end of the line\n        elif type == tokenize.NEWLINE:\n            self.passline = False   # stop skipping when a NEWLINE is seen\n            self.last = srowcol[0]\n            if self.islambda:       # lambdas always end at the first NEWLINE\n                raise EndOfBlock\n        elif self.passline:\n            pass\n        elif type == tokenize.INDENT:\n            self.indent = self.indent + 1\n            self.passline = True\n        elif type == tokenize.DEDENT:\n            self.indent = self.indent - 1\n            if self.indent <= 0:\n                raise EndOfBlock\n        elif self.indent == 0 and type not in (tokenize.COMMENT, tokenize.NL):\n            raise EndOfBlock\ndef getblock(lines):\n    \"\"\"Extract the block of code at the top of the given list of lines.\"\"\"\n    blockfinder = BlockFinder()\n    try:\n        tokens = tokenize.generate_tokens(iter(lines).__next__)\n        for _token in tokens:\n            blockfinder.tokeneater(*_token)\n    except (EndOfBlock, IndentationError):\n        pass\n    return lines[:blockfinder.last]\ndef getsourcelines(object):\n    \"\"\"Return a list of source lines and starting line number for an object.\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of the lines\n    corresponding to the object and the line number indicates where in the\n    original source file the first line of code was found.  An IOError is\n    raised if the source code cannot be retrieved.\"\"\"\n    lines, lnum = findsource(object)\n    if ismodule(object): return lines, 0\n    else: return getblock(lines[lnum:]), lnum + 1\ndef getsource(object):\n    \"\"\"Return the text of the source code for an object.\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a single string.  An\n    IOError is raised if the source code cannot be retrieved.\"\"\"\n    lines, lnum = getsourcelines(object)\n    return ''.join(lines)\ndef walktree(classes, children, parent):\n    \"\"\"Recursive helper function for getclasstree().\"\"\"\n    results = []\n    classes.sort(key=attrgetter('__module__', '__name__'))\n    for c in classes:\n        results.append((c, c.__bases__))\n        if c in children:\n            results.append(walktree(children[c], children, c))\n    return results\ndef getclasstree(classes, unique=False):\n    \"\"\"Arrange the given list of classes into a hierarchy of nested lists.\n    Where a nested list appears, it contains classes derived from the class\n    whose entry immediately precedes the list.  Each entry is a 2-tuple\n    containing a class and a tuple of its base classes.  If the 'unique'\n    argument is true, exactly one entry appears in the returned structure\n    for each class in the given list.  Otherwise, classes using multiple\n    inheritance and their descendants will appear multiple times.\"\"\"\n    children = {}\n    roots = []\n    for c in classes:\n        if c.__bases__:\n            for parent in c.__bases__:\n                if not parent in children:\n                    children[parent] = []\n                children[parent].append(c)\n                if unique and parent in classes: break\n        elif c not in roots:\n            roots.append(c)\n    for parent in children:\n        if parent not in classes:\n            roots.append(parent)\n    return walktree(roots, children, None)\nArguments = namedtuple('Arguments', 'args, varargs, varkw')\ndef getargs(co):\n    \"\"\"Get information about the arguments accepted by a code object.\n    Three things are returned: (args, varargs, varkw), where\n    'args' is the list of argument names. Keyword-only arguments are\n    appended. 'varargs' and 'varkw' are the names of the * and **\n    arguments or None.\"\"\"\n    args, varargs, kwonlyargs, varkw = _getfullargs(co)\n    return Arguments(args + kwonlyargs, varargs, varkw)\ndef _getfullargs(co):\n    \"\"\"Get information about the arguments accepted by a code object.\n    Four things are returned: (args, varargs, kwonlyargs, varkw), where\n    'args' and 'kwonlyargs' are lists of argument names, and 'varargs'\n    and 'varkw' are the names of the * and ** arguments or None.\"\"\"\n    if not iscode(co):\n        raise TypeError('{!r} is not a code object'.format(co))\n    nargs = co.co_argcount\n    names = co.co_varnames\n    nkwargs = co.co_kwonlyargcount\n    args = list(names[:nargs])\n    kwonlyargs = list(names[nargs:nargs+nkwargs])\n    step = 0\n    nargs += nkwargs\n    varargs = None\n    if co.co_flags & CO_VARARGS:\n        varargs = co.co_varnames[nargs]\n        nargs = nargs + 1\n    varkw = None\n    if co.co_flags & CO_VARKEYWORDS:\n        varkw = co.co_varnames[nargs]\n    return args, varargs, kwonlyargs, varkw\nArgSpec = namedtuple('ArgSpec', 'args varargs keywords defaults')\ndef getargspec(func):\n    \"\"\"Get the names and default values of a function's arguments.\n    A tuple of four things is returned: (args, varargs, varkw, defaults).\n    'args' is a list of the argument names.\n    'args' will include keyword-only argument names.\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'defaults' is an n-tuple of the default values of the last n arguments.\n    Use the getfullargspec() API for Python-3000 code, as annotations\n    and keyword arguments are supported. getargspec() will raise ValueError\n    if the func has either annotations or keyword arguments.\n    \"\"\"\n    args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, ann = \\\n        getfullargspec(func)\n    if kwonlyargs or ann:\n        raise ValueError(\"Function has keyword-only arguments or annotations\"\n                         \", use getfullargspec() API which can support them\")\n    return ArgSpec(args, varargs, varkw, defaults)\nFullArgSpec = namedtuple('FullArgSpec',\n    'args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations')\ndef getfullargspec(func):\n    \"\"\"Get the names and default values of a function's arguments.\n    A tuple of seven things is returned:\n    (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults annotations).\n    'args' is a list of the argument names.\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'defaults' is an n-tuple of the default values of the last n arguments.\n    'kwonlyargs' is a list of keyword-only argument names.\n    'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.\n    'annotations' is a dictionary mapping argument names to annotations.\n    The first four items in the tuple correspond to getargspec().\n    \"\"\"\n    if ismethod(func):\n        func = func.__func__\n    if not isfunction(func):\n        raise TypeError('{!r} is not a Python function'.format(func))\n    args, varargs, kwonlyargs, varkw = _getfullargs(func.__code__)\n    return FullArgSpec(args, varargs, varkw, func.__defaults__,\n            kwonlyargs, func.__kwdefaults__, func.__annotations__)\nArgInfo = namedtuple('ArgInfo', 'args varargs keywords locals')\ndef getargvalues(frame):\n    \"\"\"Get information about arguments passed into a particular frame.\n    A tuple of four things is returned: (args, varargs, varkw, locals).\n    'args' is a list of the argument names.\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'locals' is the locals dictionary of the given frame.\"\"\"\n    args, varargs, varkw = getargs(frame.f_code)\n    return ArgInfo(args, varargs, varkw, frame.f_locals)\ndef formatannotation(annotation, base_module=None):\n    if isinstance(annotation, type):\n        if annotation.__module__ in ('builtins', base_module):\n            return annotation.__name__\n        return annotation.__module__+'.'+annotation.__name__\n    return repr(annotation)\ndef formatannotationrelativeto(object):\n    module = getattr(object, '__module__', None)\n    def _formatannotation(annotation):\n        return formatannotation(annotation, module)\n    return _formatannotation\ndef formatargspec(args, varargs=None, varkw=None, defaults=None,\n                  kwonlyargs=(), kwonlydefaults={}, annotations={},\n                  formatarg=str,\n                  formatvarargs=lambda name: '*' + name,\n                  formatvarkw=lambda name: '**' + name,\n                  formatvalue=lambda value: '=' + repr(value),\n                  formatreturns=lambda text: ' -> ' + text,\n                  formatannotation=formatannotation):\n    \"\"\"Format an argument spec from the values returned by getargspec\n    or getfullargspec.\n    The first seven arguments are (args, varargs, varkw, defaults,\n    kwonlyargs, kwonlydefaults, annotations).  The other five arguments\n    are the corresponding optional formatting functions that are called to\n    turn names and values into strings.  The last argument is an optional\n    function to format the sequence of arguments.\"\"\"\n    def formatargandannotation(arg):\n        result = formatarg(arg)\n        if arg in annotations:\n            result += ': ' + formatannotation(annotations[arg])\n        return result\n    specs = []\n    if defaults:\n        firstdefault = len(args) - len(defaults)\n    for i, arg in enumerate(args):\n        spec = formatargandannotation(arg)\n        if defaults and i >= firstdefault:\n            spec = spec + formatvalue(defaults[i - firstdefault])\n        specs.append(spec)\n    if varargs is not None:\n        specs.append(formatvarargs(formatargandannotation(varargs)))\n    else:\n        if kwonlyargs:\n            specs.append('*')\n    if kwonlyargs:\n        for kwonlyarg in kwonlyargs:\n            spec = formatargandannotation(kwonlyarg)\n            if kwonlydefaults and kwonlyarg in kwonlydefaults:\n                spec += formatvalue(kwonlydefaults[kwonlyarg])\n            specs.append(spec)\n    if varkw is not None:\n        specs.append(formatvarkw(formatargandannotation(varkw)))\n    result = '(' + ', '.join(specs) + ')'\n    if 'return' in annotations:\n        result += formatreturns(formatannotation(annotations['return']))\n    return result\ndef formatargvalues(args, varargs, varkw, locals,\n                    formatarg=str,\n                    formatvarargs=lambda name: '*' + name,\n                    formatvarkw=lambda name: '**' + name,\n                    formatvalue=lambda value: '=' + repr(value)):\n    \"\"\"Format an argument spec from the 4 values returned by getargvalues.\n    The first four arguments are (args, varargs, varkw, locals).  The\n    next four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.\"\"\"\n    def convert(name, locals=locals,\n                formatarg=formatarg, formatvalue=formatvalue):\n        return formatarg(name) + formatvalue(locals[name])\n    specs = []\n    for i in range(len(args)):\n        specs.append(convert(args[i]))\n    if varargs:\n        specs.append(formatvarargs(varargs) + formatvalue(locals[varargs]))\n    if varkw:\n        specs.append(formatvarkw(varkw) + formatvalue(locals[varkw]))\n    return '(' + ', '.join(specs) + ')'\ndef _missing_arguments(f_name, argnames, pos, values):\n    names = [repr(name) for name in argnames if name not in values]\n    missing = len(names)\n    if missing == 1:\n        s = names[0]\n    elif missing == 2:\n        s = \"{} and {}\".format(*names)\n    else:\n        tail = \", {} and {}\".format(names[-2:])\n        del names[-2:]\n        s = \", \".join(names) + tail\n    raise TypeError(\"%s() missing %i required %s argument%s: %s\" %\n                    (f_name, missing,\n                      \"positional\" if pos else \"keyword-only\",\n                      \"\" if missing == 1 else \"s\", s))\ndef _too_many(f_name, args, kwonly, varargs, defcount, given, values):\n    atleast = len(args) - defcount\n    kwonly_given = len([arg for arg in kwonly if arg in values])\n    if varargs:\n        plural = atleast != 1\n        sig = \"at least %d\" % (atleast,)\n    elif defcount:\n        plural = True\n        sig = \"from %d to %d\" % (atleast, len(args))\n    else:\n        plural = len(args) != 1\n        sig = str(len(args))\n    kwonly_sig = \"\"\n    if kwonly_given:\n        msg = \" positional argument%s (and %d keyword-only argument%s)\"\n        kwonly_sig = (msg % (\"s\" if given != 1 else \"\", kwonly_given,\n                             \"s\" if kwonly_given != 1 else \"\"))\n    raise TypeError(\"%s() takes %s positional argument%s but %d%s %s given\" %\n            (f_name, sig, \"s\" if plural else \"\", given, kwonly_sig,\n             \"was\" if given == 1 and not kwonly_given else \"were\"))\ndef getcallargs(func, *positional, **named):\n    \"\"\"Get the mapping of arguments to values.\n    A dict is returned, with keys the function argument names (including the\n    names of the * and ** arguments, if any), and values the respective bound\n    values from 'positional' and 'named'.\"\"\"\n    spec = getfullargspec(func)\n    args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, ann = spec\n    f_name = func.__name__\n    arg2value = {}\n    if ismethod(func) and func.__self__ is not None:\n        positional = (func.__self__,) + positional\n    num_pos = len(positional)\n    num_args = len(args)\n    num_defaults = len(defaults) if defaults else 0\n    n = min(num_pos, num_args)\n    for i in range(n):\n        arg2value[args[i]] = positional[i]\n    if varargs:\n        arg2value[varargs] = tuple(positional[n:])\n    possible_kwargs = set(args + kwonlyargs)\n    if varkw:\n        arg2value[varkw] = {}\n    for kw, value in named.items():\n        if kw not in possible_kwargs:\n            if not varkw:\n                raise TypeError(\"%s() got an unexpected keyword argument %r\" %\n                                (f_name, kw))\n            arg2value[varkw][kw] = value\n            continue\n        if kw in arg2value:\n            raise TypeError(\"%s() got multiple values for argument %r\" %\n                            (f_name, kw))\n        arg2value[kw] = value\n    if num_pos > num_args and not varargs:\n        _too_many(f_name, args, kwonlyargs, varargs, num_defaults,\n                   num_pos, arg2value)\n    if num_pos < num_args:\n        req = args[:num_args - num_defaults]\n        for arg in req:\n            if arg not in arg2value:\n                _missing_arguments(f_name, req, True, arg2value)\n        for i, arg in enumerate(args[num_args - num_defaults:]):\n            if arg not in arg2value:\n                arg2value[arg] = defaults[i]\n    missing = 0\n    for kwarg in kwonlyargs:\n        if kwarg not in arg2value:\n            if kwarg in kwonlydefaults:\n                arg2value[kwarg] = kwonlydefaults[kwarg]\n            else:\n                missing += 1\n    if missing:\n        _missing_arguments(f_name, kwonlyargs, False, arg2value)\n    return arg2value\nClosureVars = namedtuple('ClosureVars', 'nonlocals globals builtins unbound')\ndef getclosurevars(func):\n    \"\"\"\n    Get the mapping of free variables to their current values.\n    Returns a named tuple of dicts mapping the current nonlocal, global\n    and builtin references as seen by the body of the function. A final\n    set of unbound names that could not be resolved is also provided.\n    \"\"\"\n    if ismethod(func):\n        func = func.__func__\n    if not isfunction(func):\n        raise TypeError(\"'{!r}' is not a Python function\".format(func))\n    code = func.__code__\n    if func.__closure__ is None:\n        nonlocal_vars = {}\n    else:\n        nonlocal_vars = {\n            var : cell.cell_contents\n            for var, cell in zip(code.co_freevars, func.__closure__)\n       }\n    global_ns = func.__globals__\n    builtin_ns = global_ns.get(\"__builtins__\", builtins.__dict__)\n    if ismodule(builtin_ns):\n        builtin_ns = builtin_ns.__dict__\n    global_vars = {}\n    builtin_vars = {}\n    unbound_names = set()\n    for name in code.co_names:\n        if name in (\"None\", \"True\", \"False\"):\n            continue\n        try:\n            global_vars[name] = global_ns[name]\n        except KeyError:\n            try:\n                builtin_vars[name] = builtin_ns[name]\n            except KeyError:\n                unbound_names.add(name)\n    return ClosureVars(nonlocal_vars, global_vars,\n                       builtin_vars, unbound_names)\nTraceback = namedtuple('Traceback', 'filename lineno function code_context index')\ndef getframeinfo(frame, context=1):\n    \"\"\"Get information about a frame or traceback object.\n    A tuple of five things is returned: the filename, the line number of\n    the current line, the function name, a list of lines of context from\n    the source code, and the index of the current line within that list.\n    The optional second argument specifies the number of lines of context\n    to return, which are centered around the current line.\"\"\"\n    if istraceback(frame):\n        lineno = frame.tb_lineno\n        frame = frame.tb_frame\n    else:\n        lineno = frame.f_lineno\n    if not isframe(frame):\n        raise TypeError('{!r} is not a frame or traceback object'.format(frame))\n    filename = getsourcefile(frame) or getfile(frame)\n    if context > 0:\n        start = lineno - 1 - context//2\n        try:\n            lines, lnum = findsource(frame)\n        except IOError:\n            lines = index = None\n        else:\n            start = max(start, 1)\n            start = max(0, min(start, len(lines) - context))\n            lines = lines[start:start+context]\n            index = lineno - 1 - start\n    else:\n        lines = index = None\n    return Traceback(filename, lineno, frame.f_code.co_name, lines, index)\ndef getlineno(frame):\n    \"\"\"Get the line number from a frame object, allowing for optimization.\"\"\"\n    return frame.f_lineno\ndef getouterframes(frame, context=1):\n    \"\"\"Get a list of records for a frame and all higher (calling) frames.\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.\"\"\"\n    framelist = []\n    while frame:\n        framelist.append((frame,) + getframeinfo(frame, context))\n        frame = frame.f_back\n    return framelist\ndef getinnerframes(tb, context=1):\n    \"\"\"Get a list of records for a traceback's frame and all lower frames.\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.\"\"\"\n    framelist = []\n    while tb:\n        framelist.append((tb.tb_frame,) + getframeinfo(tb, context))\n        tb = tb.tb_next\n    return framelist\ndef currentframe():\n    \"\"\"Return the frame of the caller or None if this is not possible.\"\"\"\n    return sys._getframe(1) if hasattr(sys, \"_getframe\") else None\ndef stack(context=1):\n    \"\"\"Return a list of records for the stack above the caller's frame.\"\"\"\n    return getouterframes(sys._getframe(1), context)\ndef trace(context=1):\n    \"\"\"Return a list of records for the stack below the current exception.\"\"\"\n    return getinnerframes(sys.exc_info()[2], context)\n_sentinel = object()\ndef _static_getmro(klass):\n    return type.__dict__['__mro__'].__get__(klass)\ndef _check_instance(obj, attr):\n    instance_dict = {}\n    try:\n        instance_dict = object.__getattribute__(obj, \"__dict__\")\n    except AttributeError:\n        pass\n    return dict.get(instance_dict, attr, _sentinel)\ndef _check_class(klass, attr):\n    for entry in _static_getmro(klass):\n        if _shadowed_dict(type(entry)) is _sentinel:\n            try:\n                return entry.__dict__[attr]\n            except KeyError:\n                pass\n    return _sentinel\ndef _is_type(obj):\n    try:\n        _static_getmro(obj)\n    except TypeError:\n        return False\n    return True\ndef _shadowed_dict(klass):\n    dict_attr = type.__dict__[\"__dict__\"]\n    for entry in _static_getmro(klass):\n        try:\n            class_dict = dict_attr.__get__(entry)[\"__dict__\"]\n        except KeyError:\n            pass\n        else:\n            if not (type(class_dict) is types.GetSetDescriptorType and\n                    class_dict.__name__ == \"__dict__\" and\n                    class_dict.__objclass__ is entry):\n                return class_dict\n    return _sentinel\ndef getattr_static(obj, attr, default=_sentinel):\n    \"\"\"Retrieve attributes without triggering dynamic lookup via the\n       descriptor protocol,  __getattr__ or __getattribute__.\n       Note: this function may not be able to retrieve all attributes\n       that getattr can fetch (like dynamically created attributes)\n       and may find attributes that getattr can't (like descriptors\n       that raise AttributeError). It can also return descriptor objects\n       instead of instance members in some cases. See the\n       documentation for details.\n    \"\"\"\n    instance_result = _sentinel\n    if not _is_type(obj):\n        klass = type(obj)\n        dict_attr = _shadowed_dict(klass)\n        if (dict_attr is _sentinel or\n            type(dict_attr) is types.MemberDescriptorType):\n            instance_result = _check_instance(obj, attr)\n    else:\n        klass = obj\n    klass_result = _check_class(klass, attr)\n    if instance_result is not _sentinel and klass_result is not _sentinel:\n        if (_check_class(type(klass_result), '__get__') is not _sentinel and\n            _check_class(type(klass_result), '__set__') is not _sentinel):\n            return klass_result\n    if instance_result is not _sentinel:\n        return instance_result\n    if klass_result is not _sentinel:\n        return klass_result\n    if obj is klass:\n        for entry in _static_getmro(type(klass)):\n            if _shadowed_dict(type(entry)) is _sentinel:\n                try:\n                    return entry.__dict__[attr]\n                except KeyError:\n                    pass\n    if default is not _sentinel:\n        return default\n    raise AttributeError(attr)\nGEN_CREATED = 'GEN_CREATED'\nGEN_RUNNING = 'GEN_RUNNING'\nGEN_SUSPENDED = 'GEN_SUSPENDED'\nGEN_CLOSED = 'GEN_CLOSED'\ndef getgeneratorstate(generator):\n    \"\"\"Get current state of a generator-iterator.\n    Possible states are:\n      GEN_CREATED: Waiting to start execution.\n      GEN_RUNNING: Currently being executed by the interpreter.\n      GEN_SUSPENDED: Currently suspended at a yield expression.\n      GEN_CLOSED: Execution has completed.\n    \"\"\"\n    if generator.gi_running:\n        return GEN_RUNNING\n    if generator.gi_frame is None:\n        return GEN_CLOSED\n    if generator.gi_frame.f_lasti == -1:\n        return GEN_CREATED\n    return GEN_SUSPENDED\ndef getgeneratorlocals(generator):\n    \"\"\"\n    Get the mapping of generator local variables to their current values.\n    A dict is returned, with the keys the local variable names and values the\n    bound values.\"\"\"\n    if not isgenerator(generator):\n        raise TypeError(\"'{!r}' is not a Python generator\".format(generator))\n    frame = getattr(generator, \"gi_frame\", None)\n    if frame is not None:\n        return generator.gi_frame.f_locals\n    else:\n        return {}\n_WrapperDescriptor = type(type.__call__)\n_MethodWrapper = type(all.__call__)\n_NonUserDefinedCallables = (_WrapperDescriptor,\n                            _MethodWrapper,\n                            types.BuiltinFunctionType)\ndef _get_user_defined_method(cls, method_name):\n    try:\n        meth = getattr(cls, method_name)\n    except AttributeError:\n        return\n    else:\n        if not isinstance(meth, _NonUserDefinedCallables):\n            return meth\ndef signature(obj):\n    '''Get a signature object for the passed callable.'''\n    if not callable(obj):\n        raise TypeError('{!r} is not a callable object'.format(obj))\n    if isinstance(obj, types.MethodType):\n        sig = signature(obj.__func__)\n        return sig.replace(parameters=tuple(sig.parameters.values())[1:])\n    try:\n        sig = obj.__signature__\n    except AttributeError:\n        pass\n    else:\n        if sig is not None:\n            return sig\n    try:\n        wrapped = obj.__wrapped__\n    except AttributeError:\n        pass\n    else:\n        return signature(wrapped)\n    if isinstance(obj, types.FunctionType):\n        return Signature.from_function(obj)\n    if isinstance(obj, functools.partial):\n        sig = signature(obj.func)\n        new_params = OrderedDict(sig.parameters.items())\n        partial_args = obj.args or ()\n        partial_keywords = obj.keywords or {}\n        try:\n            ba = sig.bind_partial(*partial_args, **partial_keywords)\n        except TypeError as ex:\n            msg = 'partial object {!r} has incorrect arguments'.format(obj)\n            raise ValueError(msg) from ex\n        for arg_name, arg_value in ba.arguments.items():\n            param = new_params[arg_name]\n            if arg_name in partial_keywords:\n                new_params[arg_name] = param.replace(default=arg_value,\n                                                     _partial_kwarg=True)\n            elif (param.kind not in (_VAR_KEYWORD, _VAR_POSITIONAL) and\n                            not param._partial_kwarg):\n                new_params.pop(arg_name)\n        return sig.replace(parameters=new_params.values())\n    sig = None\n    if isinstance(obj, type):\n        call = _get_user_defined_method(type(obj), '__call__')\n        if call is not None:\n            sig = signature(call)\n        else:\n            new = _get_user_defined_method(obj, '__new__')\n            if new is not None:\n                sig = signature(new)\n            else:\n                init = _get_user_defined_method(obj, '__init__')\n                if init is not None:\n                    sig = signature(init)\n    elif not isinstance(obj, _NonUserDefinedCallables):\n        call = _get_user_defined_method(type(obj), '__call__')\n        if call is not None:\n            sig = signature(call)\n    if sig is not None:\n        return sig.replace(parameters=tuple(sig.parameters.values())[1:])\n    if isinstance(obj, types.BuiltinFunctionType):\n        msg = 'no signature found for builtin function {!r}'.format(obj)\n        raise ValueError(msg)\n    raise ValueError('callable {!r} is not supported by signature'.format(obj))\nclass _void:\n    '''A private marker - used in Parameter & Signature'''\nclass _empty:\n    pass\nclass _ParameterKind(int):\n    def __new__(self, *args, name=None):\n        obj = int.__new__(self, *args)\n        obj._name = name\n        return obj\n    def __str__(self):\n        return self._name\n    def __repr__(self):\n        return '<_ParameterKind: {!r}>'.format(self._name)\n_POSITIONAL_ONLY        = _ParameterKind(0, name='POSITIONAL_ONLY')\n_POSITIONAL_OR_KEYWORD  = _ParameterKind(1, name='POSITIONAL_OR_KEYWORD')\n_VAR_POSITIONAL         = _ParameterKind(2, name='VAR_POSITIONAL')\n_KEYWORD_ONLY           = _ParameterKind(3, name='KEYWORD_ONLY')\n_VAR_KEYWORD            = _ParameterKind(4, name='VAR_KEYWORD')\nclass Parameter:\n    '''Represents a parameter in a function signature.\n    Has the following public attributes:\n    * name : str\n        The name of the parameter as a string.\n    * default : object\n        The default value for the parameter if specified.  If the\n        parameter has no default value, this attribute is not set.\n    * annotation\n        The annotation for the parameter if specified.  If the\n        parameter has no annotation, this attribute is not set.\n    * kind : str\n        Describes how argument values are bound to the parameter.\n        Possible values: `Parameter.POSITIONAL_ONLY`,\n        `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,\n        `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.\n    '''\n    __slots__ = ('_name', '_kind', '_default', '_annotation', '_partial_kwarg')\n    POSITIONAL_ONLY         = _POSITIONAL_ONLY\n    POSITIONAL_OR_KEYWORD   = _POSITIONAL_OR_KEYWORD\n    VAR_POSITIONAL          = _VAR_POSITIONAL\n    KEYWORD_ONLY            = _KEYWORD_ONLY\n    VAR_KEYWORD             = _VAR_KEYWORD\n    empty = _empty\n    def __init__(self, name, kind, *, default=_empty, annotation=_empty,\n                 _partial_kwarg=False):\n        if kind not in (_POSITIONAL_ONLY, _POSITIONAL_OR_KEYWORD,\n                        _VAR_POSITIONAL, _KEYWORD_ONLY, _VAR_KEYWORD):\n            raise ValueError(\"invalid value for 'Parameter.kind' attribute\")\n        self._kind = kind\n        if default is not _empty:\n            if kind in (_VAR_POSITIONAL, _VAR_KEYWORD):\n                msg = '{} parameters cannot have default values'.format(kind)\n                raise ValueError(msg)\n        self._default = default\n        self._annotation = annotation\n        if name is None:\n            if kind != _POSITIONAL_ONLY:\n                raise ValueError(\"None is not a valid name for a \"\n                                 \"non-positional-only parameter\")\n            self._name = name\n        else:\n            name = str(name)\n            if kind != _POSITIONAL_ONLY and not name.isidentifier():\n                msg = '{!r} is not a valid parameter name'.format(name)\n                raise ValueError(msg)\n            self._name = name\n        self._partial_kwarg = _partial_kwarg\n    @property\n    def name(self):\n        return self._name\n    @property\n    def default(self):\n        return self._default\n    @property\n    def annotation(self):\n        return self._annotation\n    @property\n    def kind(self):\n        return self._kind\n    def replace(self, *, name=_void, kind=_void, annotation=_void,\n                default=_void, _partial_kwarg=_void):\n        '''Creates a customized copy of the Parameter.'''\n        if name is _void:\n            name = self._name\n        if kind is _void:\n            kind = self._kind\n        if annotation is _void:\n            annotation = self._annotation\n        if default is _void:\n            default = self._default\n        if _partial_kwarg is _void:\n            _partial_kwarg = self._partial_kwarg\n        return type(self)(name, kind, default=default, annotation=annotation,\n                          _partial_kwarg=_partial_kwarg)\n    def __str__(self):\n        kind = self.kind\n        formatted = self._name\n        if kind == _POSITIONAL_ONLY:\n            if formatted is None:\n                formatted = ''\n            formatted = '<{}>'.format(formatted)\n        if self._annotation is not _empty:\n            formatted = '{}:{}'.format(formatted,\n                                       formatannotation(self._annotation))\n        if self._default is not _empty:\n            formatted = '{}={}'.format(formatted, repr(self._default))\n        if kind == _VAR_POSITIONAL:\n            formatted = '*' + formatted\n        elif kind == _VAR_KEYWORD:\n            formatted = '**' + formatted\n        return formatted\n    def __repr__(self):\n        return '<{} at {:#x} {!r}>'.format(self.__class__.__name__,\n                                           id(self), self.name)\n    def __eq__(self, other):\n        return (issubclass(other.__class__, Parameter) and\n                self._name == other._name and\n                self._kind == other._kind and\n                self._default == other._default and\n                self._annotation == other._annotation)\n    def __ne__(self, other):\n        return not self.__eq__(other)\nclass BoundArguments:\n    '''Result of `Signature.bind` call.  Holds the mapping of arguments\n    to the function's parameters.\n    Has the following public attributes:\n    * arguments : OrderedDict\n        An ordered mutable mapping of parameters' names to arguments' values.\n        Does not contain arguments' default values.\n    * signature : Signature\n        The Signature object that created this instance.\n    * args : tuple\n        Tuple of positional arguments values.\n    * kwargs : dict\n        Dict of keyword arguments values.\n    '''\n    def __init__(self, signature, arguments):\n        self.arguments = arguments\n        self._signature = signature\n    @property\n    def signature(self):\n        return self._signature\n    @property\n    def args(self):\n        args = []\n        for param_name, param in self._signature.parameters.items():\n            if (param.kind in (_VAR_KEYWORD, _KEYWORD_ONLY) or\n                                                    param._partial_kwarg):\n                break\n            try:\n                arg = self.arguments[param_name]\n            except KeyError:\n                break\n            else:\n                if param.kind == _VAR_POSITIONAL:\n                    args.extend(arg)\n                else:\n                    args.append(arg)\n        return tuple(args)\n    @property\n    def kwargs(self):\n        kwargs = {}\n        kwargs_started = False\n        for param_name, param in self._signature.parameters.items():\n            if not kwargs_started:\n                if (param.kind in (_VAR_KEYWORD, _KEYWORD_ONLY) or\n                                                param._partial_kwarg):\n                    kwargs_started = True\n                else:\n                    if param_name not in self.arguments:\n                        kwargs_started = True\n                        continue\n            if not kwargs_started:\n                continue\n            try:\n                arg = self.arguments[param_name]\n            except KeyError:\n                pass\n            else:\n                if param.kind == _VAR_KEYWORD:\n                    kwargs.update(arg)\n                else:\n                    kwargs[param_name] = arg\n        return kwargs\n    def __eq__(self, other):\n        return (issubclass(other.__class__, BoundArguments) and\n                self.signature == other.signature and\n                self.arguments == other.arguments)\n    def __ne__(self, other):\n        return not self.__eq__(other)\nclass Signature:\n    '''A Signature object represents the overall signature of a function.\n    It stores a Parameter object for each parameter accepted by the\n    function, as well as information specific to the function itself.\n    A Signature object has the following public attributes and methods:\n    * parameters : OrderedDict\n        An ordered mapping of parameters' names to the corresponding\n        Parameter objects (keyword-only arguments are in the same order\n        as listed in `code.co_varnames`).\n    * return_annotation : object\n        The annotation for the return type of the function if specified.\n        If the function has no annotation for its return type, this\n        attribute is not set.\n    * bind(*args, **kwargs) -> BoundArguments\n        Creates a mapping from positional and keyword arguments to\n        parameters.\n    * bind_partial(*args, **kwargs) -> BoundArguments\n        Creates a partial mapping from positional and keyword arguments\n        to parameters (simulating 'functools.partial' behavior.)\n    '''\n    __slots__ = ('_return_annotation', '_parameters')\n    _parameter_cls = Parameter\n    _bound_arguments_cls = BoundArguments\n    empty = _empty\n    def __init__(self, parameters=None, *, return_annotation=_empty,\n                 __validate_parameters__=True):\n        '''Constructs Signature from the given list of Parameter\n        objects and 'return_annotation'.  All arguments are optional.\n        '''\n        if parameters is None:\n            params = OrderedDict()\n        else:\n            if __validate_parameters__:\n                params = OrderedDict()\n                top_kind = _POSITIONAL_ONLY\n                for idx, param in enumerate(parameters):\n                    kind = param.kind\n                    if kind < top_kind:\n                        msg = 'wrong parameter order: {} before {}'\n                        msg = msg.format(top_kind, param.kind)\n                        raise ValueError(msg)\n                    else:\n                        top_kind = kind\n                    name = param.name\n                    if name is None:\n                        name = str(idx)\n                        param = param.replace(name=name)\n                    if name in params:\n                        msg = 'duplicate parameter name: {!r}'.format(name)\n                        raise ValueError(msg)\n                    params[name] = param\n            else:\n                params = OrderedDict(((param.name, param)\n                                                for param in parameters))\n        self._parameters = types.MappingProxyType(params)\n        self._return_annotation = return_annotation\n    @classmethod\n    def from_function(cls, func):\n        '''Constructs Signature for the given python function'''\n        if not isinstance(func, types.FunctionType):\n            raise TypeError('{!r} is not a Python function'.format(func))\n        Parameter = cls._parameter_cls\n        func_code = func.__code__\n        pos_count = func_code.co_argcount\n        arg_names = func_code.co_varnames\n        positional = tuple(arg_names[:pos_count])\n        keyword_only_count = func_code.co_kwonlyargcount\n        keyword_only = arg_names[pos_count:(pos_count + keyword_only_count)]\n        annotations = func.__annotations__\n        defaults = func.__defaults__\n        kwdefaults = func.__kwdefaults__\n        if defaults:\n            pos_default_count = len(defaults)\n        else:\n            pos_default_count = 0\n        parameters = []\n        non_default_count = pos_count - pos_default_count\n        for name in positional[:non_default_count]:\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_POSITIONAL_OR_KEYWORD))\n        for offset, name in enumerate(positional[non_default_count:]):\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_POSITIONAL_OR_KEYWORD,\n                                        default=defaults[offset]))\n        if func_code.co_flags & 0x04:\n            name = arg_names[pos_count + keyword_only_count]\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_VAR_POSITIONAL))\n        for name in keyword_only:\n            default = _empty\n            if kwdefaults is not None:\n                default = kwdefaults.get(name, _empty)\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_KEYWORD_ONLY,\n                                        default=default))\n        if func_code.co_flags & 0x08:\n            index = pos_count + keyword_only_count\n            if func_code.co_flags & 0x04:\n                index += 1\n            name = arg_names[index]\n            annotation = annotations.get(name, _empty)\n            parameters.append(Parameter(name, annotation=annotation,\n                                        kind=_VAR_KEYWORD))\n        return cls(parameters,\n                   return_annotation=annotations.get('return', _empty),\n                   __validate_parameters__=False)\n    @property\n    def parameters(self):\n        return self._parameters\n    @property\n    def return_annotation(self):\n        return self._return_annotation\n    def replace(self, *, parameters=_void, return_annotation=_void):\n        '''Creates a customized copy of the Signature.\n        Pass 'parameters' and/or 'return_annotation' arguments\n        to override them in the new copy.\n        '''\n        if parameters is _void:\n            parameters = self.parameters.values()\n        if return_annotation is _void:\n            return_annotation = self._return_annotation\n        return type(self)(parameters,\n                          return_annotation=return_annotation)\n    def __eq__(self, other):\n        if (not issubclass(type(other), Signature) or\n                    self.return_annotation != other.return_annotation or\n                    len(self.parameters) != len(other.parameters)):\n            return False\n        other_positions = {param: idx\n                           for idx, param in enumerate(other.parameters.keys())}\n        for idx, (param_name, param) in enumerate(self.parameters.items()):\n            if param.kind == _KEYWORD_ONLY:\n                try:\n                    other_param = other.parameters[param_name]\n                except KeyError:\n                    return False\n                else:\n                    if param != other_param:\n                        return False\n            else:\n                try:\n                    other_idx = other_positions[param_name]\n                except KeyError:\n                    return False\n                else:\n                    if (idx != other_idx or\n                                    param != other.parameters[param_name]):\n                        return False\n        return True\n    def __ne__(self, other):\n        return not self.__eq__(other)\n    def _bind(self, args, kwargs, *, partial=False):\n        '''Private method.  Don't use directly.'''\n        arguments = OrderedDict()\n        parameters = iter(self.parameters.values())\n        parameters_ex = ()\n        arg_vals = iter(args)\n        if partial:\n            for param_name, param in self.parameters.items():\n                if (param._partial_kwarg and param_name not in kwargs):\n                    kwargs[param_name] = param.default\n        while True:\n            try:\n                arg_val = next(arg_vals)\n            except StopIteration:\n                try:\n                    param = next(parameters)\n                except StopIteration:\n                    break\n                else:\n                    if param.kind == _VAR_POSITIONAL:\n                        break\n                    elif param.name in kwargs:\n                        if param.kind == _POSITIONAL_ONLY:\n                            msg = '{arg!r} parameter is positional only, ' \\\n                                  'but was passed as a keyword'\n                            msg = msg.format(arg=param.name)\n                            raise TypeError(msg) from None\n                        parameters_ex = (param,)\n                        break\n                    elif (param.kind == _VAR_KEYWORD or\n                                                param.default is not _empty):\n                        parameters_ex = (param,)\n                        break\n                    else:\n                        if partial:\n                            parameters_ex = (param,)\n                            break\n                        else:\n                            msg = '{arg!r} parameter lacking default value'\n                            msg = msg.format(arg=param.name)\n                            raise TypeError(msg) from None\n            else:\n                try:\n                    param = next(parameters)\n                except StopIteration:\n                    raise TypeError('too many positional arguments') from None\n                else:\n                    if param.kind in (_VAR_KEYWORD, _KEYWORD_ONLY):\n                        raise TypeError('too many positional arguments')\n                    if param.kind == _VAR_POSITIONAL:\n                        values = [arg_val]\n                        values.extend(arg_vals)\n                        arguments[param.name] = tuple(values)\n                        break\n                    if param.name in kwargs:\n                        raise TypeError('multiple values for argument '\n                                        '{arg!r}'.format(arg=param.name))\n                    arguments[param.name] = arg_val\n        kwargs_param = None\n        for param in itertools.chain(parameters_ex, parameters):\n            if param.kind == _POSITIONAL_ONLY:\n                raise TypeError('{arg!r} parameter is positional only, '\n                                'but was passed as a keyword'. \\\n                                format(arg=param.name))\n            if param.kind == _VAR_KEYWORD:\n                kwargs_param = param\n                continue\n            param_name = param.name\n            try:\n                arg_val = kwargs.pop(param_name)\n            except KeyError:\n                if (not partial and param.kind != _VAR_POSITIONAL and\n                                                    param.default is _empty):\n                    raise TypeError('{arg!r} parameter lacking default value'. \\\n                                    format(arg=param_name)) from None\n            else:\n                arguments[param_name] = arg_val\n        if kwargs:\n            if kwargs_param is not None:\n                arguments[kwargs_param.name] = kwargs\n            else:\n                raise TypeError('too many keyword arguments')\n        return self._bound_arguments_cls(self, arguments)\n    def bind(__bind_self, *args, **kwargs):\n        '''Get a BoundArguments object, that maps the passed `args`\n        and `kwargs` to the function's signature.  Raises `TypeError`\n        if the passed arguments can not be bound.\n        '''\n        return __bind_self._bind(args, kwargs)\n    def bind_partial(__bind_self, *args, **kwargs):\n        '''Get a BoundArguments object, that partially maps the\n        passed `args` and `kwargs` to the function's signature.\n        Raises `TypeError` if the passed arguments can not be bound.\n        '''\n        return __bind_self._bind(args, kwargs, partial=True)\n    def __str__(self):\n        result = []\n        render_kw_only_separator = True\n        for idx, param in enumerate(self.parameters.values()):\n            formatted = str(param)\n            kind = param.kind\n            if kind == _VAR_POSITIONAL:\n                render_kw_only_separator = False\n            elif kind == _KEYWORD_ONLY and render_kw_only_separator:\n                result.append('*')\n                render_kw_only_separator = False\n            result.append(formatted)\n        rendered = '({})'.format(', '.join(result))\n        if self.return_annotation is not _empty:\n            anno = formatannotation(self.return_annotation)\n            rendered += ' -> {}'.format(anno)\n        return rendered\n", "/libs/crypto_js/rollups/md5.js": "var CryptoJS=CryptoJS||function(s,p){var m={},l=m.lib={},n=function(){},r=l.Base={extend:function(b){n.prototype=this;var h=new n();b&&h.mixIn(b);h.hasOwnProperty(\"init\")||(h.init=function(){h.$super.init.apply(this,arguments);});h.init.prototype=h;h.$super=this;return h;},create:function(){var b=this.extend();b.init.apply(b,arguments);return b;},init:function(){},mixIn:function(b){for(var h in b)b.hasOwnProperty(h)&&(this[h]=b[h]);b.hasOwnProperty(\"toString\")&&(this.toString=b.toString);},clone:function(){return this.init.prototype.extend(this);}},q=l.WordArray=r.extend({init:function(b,h){b=this.words=b||[];this.sigBytes=h!=p?h:4*b.length;},toString:function(b){return(b||t).stringify(this);},concat:function(b){var h=this.words,a=b.words,j=this.sigBytes;b=b.sigBytes;this.clamp();if(j%4)for(var g=0;g<b;g++)h[j+g>>>2]|=(a[g>>>2]>>>24-8*(g%4)&255)<<24-8*((j+g)%4);else if(65535<a.length)for(g=0;g<b;g+=4)h[j+g>>>2]=a[g>>>2];else h.push.apply(h,a);this.sigBytes+=b;return this;},clamp:function(){var b=this.words,h=this.sigBytes;b[h>>>2]&=4294967295<<32-8*(h%4);b.length=s.ceil(h/4);},clone:function(){var b=r.clone.call(this);b.words=this.words.slice(0);return b;},random:function(b){for(var h=[],a=0;a<b;a+=4)h.push(4294967296*s.random()|0);return new q.init(h,b);}}),v=m.enc={},t=v.Hex={stringify:function(b){var a=b.words;b=b.sigBytes;for(var g=[],j=0;j<b;j++){var k=a[j>>>2]>>>24-8*(j%4)&255;g.push((k>>>4).toString(16));g.push((k&15).toString(16));}return g.join(\"\");},parse:function(b){for(var a=b.length,g=[],j=0;j<a;j+=2)g[j>>>3]|=parseInt(b.substr(j,2),16)<<24-4*(j%8);return new q.init(g,a/2);}},a=v.Latin1={stringify:function(b){var a=b.words;b=b.sigBytes;for(var g=[],j=0;j<b;j++)g.push(String.fromCharCode(a[j>>>2]>>>24-8*(j%4)&255));return g.join(\"\");},parse:function(b){for(var a=b.length,g=[],j=0;j<a;j++)g[j>>>2]|=(b.charCodeAt(j)&255)<<24-8*(j%4);return new q.init(g,a);}},u=v.Utf8={stringify:function(b){try{return decodeURIComponent(escape(a.stringify(b)));}catch(g){throw Error(\"Malformed UTF-8 data\");}},parse:function(b){return a.parse(unescape(encodeURIComponent(b)));}},g=l.BufferedBlockAlgorithm=r.extend({reset:function(){this._data=new q.init();this._nDataBytes=0;},_append:function(b){\"string\"==typeof b&&(b=u.parse(b));this._data.concat(b);this._nDataBytes+=b.sigBytes;},_process:function(b){var a=this._data,g=a.words,j=a.sigBytes,k=this.blockSize,m=j/(4*k),m=b?s.ceil(m):s.max((m|0)-this._minBufferSize,0);b=m*k;j=s.min(4*b,j);if(b){for(var l=0;l<b;l+=k)this._doProcessBlock(g,l);l=g.splice(0,b);a.sigBytes-=j;}return new q.init(l,j);},clone:function(){var b=r.clone.call(this);b._data=this._data.clone();return b;},_minBufferSize:0});l.Hasher=g.extend({cfg:r.extend(),init:function(b){this.cfg=this.cfg.extend(b);this.reset();},reset:function(){g.reset.call(this);this._doReset();},update:function(b){this._append(b);this._process();return this;},finalize:function(b){b&&this._append(b);return this._doFinalize();},blockSize:16,_createHelper:function(b){return function(a,g){return new b.init(g).finalize(a);};},_createHmacHelper:function(b){return function(a,g){return new k.HMAC.init(b,g).finalize(a);};}});var k=m.algo={};return m;}(Math);(function(s){function p(a,k,b,h,l,j,m){a=a+(k&b|~k&h)+l+m;return(a<<j|a>>>32-j)+k;}function m(a,k,b,h,l,j,m){a=a+(k&h|b&~h)+l+m;return(a<<j|a>>>32-j)+k;}function l(a,k,b,h,l,j,m){a=a+(k^b^h)+l+m;return(a<<j|a>>>32-j)+k;}function n(a,k,b,h,l,j,m){a=a+(b^(k|~h))+l+m;return(a<<j|a>>>32-j)+k;}for(var r=CryptoJS,q=r.lib,v=q.WordArray,t=q.Hasher,q=r.algo,a=[],u=0;64>u;u++)a[u]=4294967296*s.abs(s.sin(u+1))|0;q=q.MD5=t.extend({_doReset:function(){this._hash=new v.init([1732584193,4023233417,2562383102,271733878]);},_doProcessBlock:function(g,k){for(var b=0;16>b;b++){var h=k+b,w=g[h];g[h]=(w<<8|w>>>24)&16711935|(w<<24|w>>>8)&4278255360;}var b=this._hash.words,h=g[k+0],w=g[k+1],j=g[k+2],q=g[k+3],r=g[k+4],s=g[k+5],t=g[k+6],u=g[k+7],v=g[k+8],x=g[k+9],y=g[k+10],z=g[k+11],A=g[k+12],B=g[k+13],C=g[k+14],D=g[k+15],c=b[0],d=b[1],e=b[2],f=b[3],c=p(c,d,e,f,h,7,a[0]),f=p(f,c,d,e,w,12,a[1]),e=p(e,f,c,d,j,17,a[2]),d=p(d,e,f,c,q,22,a[3]),c=p(c,d,e,f,r,7,a[4]),f=p(f,c,d,e,s,12,a[5]),e=p(e,f,c,d,t,17,a[6]),d=p(d,e,f,c,u,22,a[7]),c=p(c,d,e,f,v,7,a[8]),f=p(f,c,d,e,x,12,a[9]),e=p(e,f,c,d,y,17,a[10]),d=p(d,e,f,c,z,22,a[11]),c=p(c,d,e,f,A,7,a[12]),f=p(f,c,d,e,B,12,a[13]),e=p(e,f,c,d,C,17,a[14]),d=p(d,e,f,c,D,22,a[15]),c=m(c,d,e,f,w,5,a[16]),f=m(f,c,d,e,t,9,a[17]),e=m(e,f,c,d,z,14,a[18]),d=m(d,e,f,c,h,20,a[19]),c=m(c,d,e,f,s,5,a[20]),f=m(f,c,d,e,y,9,a[21]),e=m(e,f,c,d,D,14,a[22]),d=m(d,e,f,c,r,20,a[23]),c=m(c,d,e,f,x,5,a[24]),f=m(f,c,d,e,C,9,a[25]),e=m(e,f,c,d,q,14,a[26]),d=m(d,e,f,c,v,20,a[27]),c=m(c,d,e,f,B,5,a[28]),f=m(f,c,d,e,j,9,a[29]),e=m(e,f,c,d,u,14,a[30]),d=m(d,e,f,c,A,20,a[31]),c=l(c,d,e,f,s,4,a[32]),f=l(f,c,d,e,v,11,a[33]),e=l(e,f,c,d,z,16,a[34]),d=l(d,e,f,c,C,23,a[35]),c=l(c,d,e,f,w,4,a[36]),f=l(f,c,d,e,r,11,a[37]),e=l(e,f,c,d,u,16,a[38]),d=l(d,e,f,c,y,23,a[39]),c=l(c,d,e,f,B,4,a[40]),f=l(f,c,d,e,h,11,a[41]),e=l(e,f,c,d,q,16,a[42]),d=l(d,e,f,c,t,23,a[43]),c=l(c,d,e,f,x,4,a[44]),f=l(f,c,d,e,A,11,a[45]),e=l(e,f,c,d,D,16,a[46]),d=l(d,e,f,c,j,23,a[47]),c=n(c,d,e,f,h,6,a[48]),f=n(f,c,d,e,u,10,a[49]),e=n(e,f,c,d,C,15,a[50]),d=n(d,e,f,c,s,21,a[51]),c=n(c,d,e,f,A,6,a[52]),f=n(f,c,d,e,q,10,a[53]),e=n(e,f,c,d,y,15,a[54]),d=n(d,e,f,c,w,21,a[55]),c=n(c,d,e,f,v,6,a[56]),f=n(f,c,d,e,D,10,a[57]),e=n(e,f,c,d,t,15,a[58]),d=n(d,e,f,c,B,21,a[59]),c=n(c,d,e,f,r,6,a[60]),f=n(f,c,d,e,z,10,a[61]),e=n(e,f,c,d,j,15,a[62]),d=n(d,e,f,c,x,21,a[63]);b[0]=b[0]+c|0;b[1]=b[1]+d|0;b[2]=b[2]+e|0;b[3]=b[3]+f|0;},_doFinalize:function(){var a=this._data,k=a.words,b=8*this._nDataBytes,h=8*a.sigBytes;k[h>>>5]|=128<<24-h%32;var l=s.floor(b/4294967296);k[(h+64>>>9<<4)+15]=(l<<8|l>>>24)&16711935|(l<<24|l>>>8)&4278255360;k[(h+64>>>9<<4)+14]=(b<<8|b>>>24)&16711935|(b<<24|b>>>8)&4278255360;a.sigBytes=4*(k.length+1);this._process();a=this._hash;k=a.words;for(b=0;4>b;b++)h=k[b],k[b]=(h<<8|h>>>24)&16711935|(h<<24|h>>>8)&4278255360;return a;},clone:function(){var a=t.clone.call(this);a._hash=this._hash.clone();return a;}});r.MD5=t._createHelper(q);r.HmacMD5=t._createHmacHelper(q);})(Math);", "/Lib/dis.py": "def dis(src):\n    return __BRYTHON__.JSObject(__BRYTHON__.py2js(src)).to_js()\n", "/libs/builtins.js": "$module=(function(){var obj={__class__:__BRYTHON__.$ModuleDict,__name__:'builtins'};var builtin_names=['ArithmeticError','AssertionError','AttributeError','BaseException','BlockingIOError','BrokenPipeError','BufferError','BytesWarning','ChildProcessError','ConnectionAbortedError','ConnectionError','ConnectionRefusedError','ConnectionResetError','DeprecationWarning','EOFError','Ellipsis','EnvironmentError','Exception','False','FileExistsError','FileNotFoundError','FloatingPointError','FutureWarning','GeneratorExit','IOError','ImportError','ImportWarning','IndentationError','IndexError','InterruptedError','IsADirectoryError','KeyError','KeyboardInterrupt','LookupError','MemoryError','NameError','None','NotADirectoryError','NotImplemented','NotImplementedError','OSError','OverflowError','PendingDeprecationWarning','PermissionError','ProcessLookupError','ReferenceError','ResourceWarning','RuntimeError','RuntimeWarning','StopIteration','SyntaxError','SyntaxWarning','SystemError','SystemExit','TabError','TimeoutError','True','TypeError','UnboundLocalError','UnicodeDecodeError','UnicodeEncodeError','UnicodeError','UnicodeTranslateError','UnicodeWarning','UserWarning','ValueError','Warning','WindowsError','ZeroDivisionError','_','__build_class__','__debug__','__doc__','__import__','__name__','__package__','abs','all','any','ascii','bin','bool','bytearray','bytes','callable','chr','classmethod','compile','complex','copyright','credits','delattr','dict','dir','divmod','enumerate','eval','exec','exit','filter','float','format','frozenset','getattr','globals','hasattr','hash','help','hex','id','input','int','isinstance','issubclass','iter','len','license','list','locals','map','max','memoryview','min','next','object','oct','open','ord','pow','print','property','quit','range','repr','reversed','round','set','setattr','slice','sorted','staticmethod','str','sum','super','tuple','type','vars','zip'];for(var i=0;i<builtin_names.length;i++)try{obj[builtin_names[i]]=eval(builtin_names[i]);}catch(err){}return obj;})();", "/libs/_websocket.js": "$module=(function($B){var __builtins__=$B.builtins;$WebSocketDict={__class__:$B.$type,__name__:'WebSocket'};$WebSocketDict.bind=function(self,event,callback){self.$ws['on'+event]=callback;};$WebSocketDict.send=function(self,data){self.$ws.send(data);};$WebSocketDict.close=function(self){self.$ws.close();};$WebSocketDict.__mro__=[$WebSocketDict,__builtins__.object.$dict];function websocket(host){var $socket=new WebSocket(host);var res={__class__:$WebSocketDict,$ws:$socket};res.$websocket=$socket;return res;}websocket.__class__=$B.$factory;websocket.$dict=$WebSocketDict;return{websocket:websocket};})(__BRYTHON__);", "/Lib/unittest/case.py": "\"\"\"Test case implementation\"\"\"\nimport sys\nimport functools\nimport difflib\nimport pprint\nimport re\nimport warnings\nimport collections\nfrom . import result\nfrom .util import (strclass, safe_repr, _count_diff_all_purpose,\n                   _count_diff_hashable)\n__unittest = True\nDIFF_OMITTED = ('\\nDiff is %s characters long. '\n                 'Set self.maxDiff to None to see it.')\nclass SkipTest(Exception):\n    \"\"\"\n    Raise this exception in a test to skip it.\n    Usually you can use TestResult.skip() or one of the skipping decorators\n    instead of raising this directly.\n    \"\"\"\nclass _ExpectedFailure(Exception):\n    \"\"\"\n    Raise this when a test is expected to fail.\n    This is an implementation detail.\n    \"\"\"\n    def __init__(self, exc_info):\n        super(_ExpectedFailure, self).__init__()\n        self.exc_info = exc_info\nclass _UnexpectedSuccess(Exception):\n    \"\"\"\n    The test was supposed to fail, but it didn't!\n    \"\"\"\nclass _Outcome(object):\n    def __init__(self):\n        self.success = True\n        self.skipped = None\n        self.unexpectedSuccess = None\n        self.expectedFailure = None\n        self.errors = []\n        self.failures = []\ndef _id(obj):\n    return obj\ndef skip(reason):\n    \"\"\"\n    Unconditionally skip a test.\n    \"\"\"\n    def decorator(test_item):\n        if not isinstance(test_item, type):\n            @functools.wraps(test_item)\n            def skip_wrapper(*args, **kwargs):\n                raise SkipTest(reason)\n            test_item = skip_wrapper\n        test_item.__unittest_skip__ = True\n        test_item.__unittest_skip_why__ = reason\n        return test_item\n    return decorator\ndef skipIf(condition, reason):\n    \"\"\"\n    Skip a test if the condition is true.\n    \"\"\"\n    if condition:\n        return skip(reason)\n    return _id\ndef skipUnless(condition, reason):\n    \"\"\"\n    Skip a test unless the condition is true.\n    \"\"\"\n    if not condition:\n        return skip(reason)\n    return _id\ndef expectedFailure(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        try:\n            func(*args, **kwargs)\n        except Exception:\n            raise _ExpectedFailure(sys.exc_info())\n        raise _UnexpectedSuccess\n    return wrapper\nclass _AssertRaisesBaseContext(object):\n    def __init__(self, expected, test_case, callable_obj=None,\n                 expected_regex=None):\n        self.expected = expected\n        self.test_case = test_case\n        if callable_obj is not None:\n            try:\n                self.obj_name = callable_obj.__name__\n            except AttributeError:\n                self.obj_name = str(callable_obj)\n        else:\n            self.obj_name = None\n        if isinstance(expected_regex, (bytes, str)):\n            expected_regex = re.compile(expected_regex)\n        self.expected_regex = expected_regex\n        self.msg = None\n    def _raiseFailure(self, standardMsg):\n        msg = self.test_case._formatMessage(self.msg, standardMsg)\n        raise self.test_case.failureException(msg)\n    def handle(self, name, callable_obj, args, kwargs):\n        \"\"\"\n        If callable_obj is None, assertRaises/Warns is being used as a\n        context manager, so check for a 'msg' kwarg and return self.\n        If callable_obj is not None, call it passing args and kwargs.\n        \"\"\"\n        if callable_obj is None:\n            self.msg = kwargs.pop('msg', None)\n            return self\n        with self:\n            callable_obj(*args, **kwargs)\nclass _AssertRaisesContext(_AssertRaisesBaseContext):\n    \"\"\"A context manager used to implement TestCase.assertRaises* methods.\"\"\"\n    def __enter__(self):\n        return self\n    def __exit__(self, exc_type, exc_value, tb):\n        if exc_type is None:\n            try:\n                exc_name = self.expected.__name__\n            except AttributeError:\n                exc_name = str(self.expected)\n            if self.obj_name:\n                self._raiseFailure(\"{} not raised by {}\".format(exc_name,\n                                                                self.obj_name))\n            else:\n                self._raiseFailure(\"{} not raised\".format(exc_name))\n        if not issubclass(exc_type, self.expected):\n            return False\n        self.exception = exc_value.with_traceback(None)\n        if self.expected_regex is None:\n            return True\n        expected_regex = self.expected_regex\n        if not expected_regex.search(str(exc_value)):\n            self._raiseFailure('\"{}\" does not match \"{}\"'.format(\n                     expected_regex.pattern, str(exc_value)))\n        return True\nclass _AssertWarnsContext(_AssertRaisesBaseContext):\n    \"\"\"A context manager used to implement TestCase.assertWarns* methods.\"\"\"\n    def __enter__(self):\n        for v in sys.modules.values():\n            if getattr(v, '__warningregistry__', None):\n                v.__warningregistry__ = {}\n        self.warnings_manager = warnings.catch_warnings(record=True)\n        self.warnings = self.warnings_manager.__enter__()\n        warnings.simplefilter(\"always\", self.expected)\n        return self\n    def __exit__(self, exc_type, exc_value, tb):\n        self.warnings_manager.__exit__(exc_type, exc_value, tb)\n        if exc_type is not None:\n            return\n        try:\n            exc_name = self.expected.__name__\n        except AttributeError:\n            exc_name = str(self.expected)\n        first_matching = None\n        for m in self.warnings:\n            w = m.message\n            if not isinstance(w, self.expected):\n                continue\n            if first_matching is None:\n                first_matching = w\n            if (self.expected_regex is not None and\n                not self.expected_regex.search(str(w))):\n                continue\n            self.warning = w\n            self.filename = m.filename\n            self.lineno = m.lineno\n            return\n        if first_matching is not None:\n            self._raiseFailure('\"{}\" does not match \"{}\"'.format(\n                     self.expected_regex.pattern, str(first_matching)))\n        if self.obj_name:\n            self._raiseFailure(\"{} not triggered by {}\".format(exc_name,\n                                                               self.obj_name))\n        else:\n            self._raiseFailure(\"{} not triggered\".format(exc_name))\nclass TestCase(object):\n    \"\"\"A class whose instances are single test cases.\n    By default, the test code itself should be placed in a method named\n    'runTest'.\n    If the fixture may be used for many test cases, create as\n    many test methods as are needed. When instantiating such a TestCase\n    subclass, specify in the constructor arguments the name of the test method\n    that the instance is to execute.\n    Test authors should subclass TestCase for their own tests. Construction\n    and deconstruction of the test's environment ('fixture') can be\n    implemented by overriding the 'setUp' and 'tearDown' methods respectively.\n    If it is necessary to override the __init__ method, the base class\n    __init__ method must always be called. It is important that subclasses\n    should not change the signature of their __init__ method, since instances\n    of the classes are instantiated automatically by parts of the framework\n    in order to be run.\n    \"\"\"\n    failureException = AssertionError\n    longMessage = True\n    maxDiff = 80*8\n    _diffThreshold = 2**16\n    _classSetupFailed = False\n    def __init__(self, methodName='runTest'):\n        \"\"\"Create an instance of the class that will use the named test\n           method when executed. Raises a ValueError if the instance does\n           not have a method with the specified name.\n        \"\"\"\n        self._testMethodName = methodName\n        self._outcomeForDoCleanups = None\n        self._testMethodDoc = 'No test'\n        try:\n            testMethod = getattr(self, methodName)\n        except AttributeError:\n            if methodName != 'runTest':\n                raise ValueError(\"no such test method in %s: %s\" %\n                      (self.__class__, methodName))\n        else:\n            self._testMethodDoc = testMethod.__doc__\n        self._cleanups = []\n        self._type_equality_funcs = {}\n        self.addTypeEqualityFunc(dict, 'assertDictEqual')\n        self.addTypeEqualityFunc(list, 'assertListEqual')\n        self.addTypeEqualityFunc(tuple, 'assertTupleEqual')\n        self.addTypeEqualityFunc(set, 'assertSetEqual')\n        self.addTypeEqualityFunc(frozenset, 'assertSetEqual')\n        self.addTypeEqualityFunc(str, 'assertMultiLineEqual')\n    def addTypeEqualityFunc(self, typeobj, function):\n        \"\"\"Add a type specific assertEqual style function to compare a type.\n        This method is for use by TestCase subclasses that need to register\n        their own type equality functions to provide nicer error messages.\n        Args:\n            typeobj: The data type to call this function on when both values\n                    are of the same type in assertEqual().\n            function: The callable taking two arguments and an optional\n                    msg= argument that raises self.failureException with a\n                    useful error message when the two arguments are not equal.\n        \"\"\"\n        self._type_equality_funcs[typeobj] = function\n    def addCleanup(self, function, *args, **kwargs):\n        \"\"\"Add a function, with arguments, to be called when the test is\n        completed. Functions added are called on a LIFO basis and are\n        called after tearDown on test failure or success.\n        Cleanup items are called even if setUp fails (unlike tearDown).\"\"\"\n        self._cleanups.append((function, args, kwargs))\n    def setUp(self):\n        \"Hook method for setting up the test fixture before exercising it.\"\n        pass\n    def tearDown(self):\n        \"Hook method for deconstructing the test fixture after testing it.\"\n        pass\n    @classmethod\n    def setUpClass(cls):\n        \"Hook method for setting up class fixture before running tests in the class.\"\n    @classmethod\n    def tearDownClass(cls):\n        \"Hook method for deconstructing the class fixture after running all tests in the class.\"\n    def countTestCases(self):\n        return 1\n    def defaultTestResult(self):\n        return result.TestResult()\n    def shortDescription(self):\n        \"\"\"Returns a one-line description of the test, or None if no\n        description has been provided.\n        The default implementation of this method returns the first line of\n        the specified test method's docstring.\n        \"\"\"\n        doc = self._testMethodDoc\n        return doc and doc.split(\"\\n\")[0].strip() or None\n    def id(self):\n        return \"%s.%s\" % (strclass(self.__class__), self._testMethodName)\n    def __eq__(self, other):\n        if type(self) is not type(other):\n            return NotImplemented\n        return self._testMethodName == other._testMethodName\n    def __hash__(self):\n        return hash((type(self), self._testMethodName))\n    def __str__(self):\n        return \"%s (%s)\" % (self._testMethodName, strclass(self.__class__))\n    def __repr__(self):\n        return \"<%s testMethod=%s>\" % \\\n               (strclass(self.__class__), self._testMethodName)\n    def _addSkip(self, result, reason):\n        addSkip = getattr(result, 'addSkip', None)\n        if addSkip is not None:\n            addSkip(self, reason)\n        else:\n            warnings.warn(\"TestResult has no addSkip method, skips not reported\",\n                          RuntimeWarning, 2)\n            result.addSuccess(self)\n    def _executeTestPart(self, function, outcome, isTest=False):\n        try:\n            function()\n        except KeyboardInterrupt:\n            raise\n        except SkipTest as e:\n            outcome.success = False\n            outcome.skipped = str(e)\n        except _UnexpectedSuccess:\n            exc_info = sys.exc_info()\n            outcome.success = False\n            if isTest:\n                outcome.unexpectedSuccess = exc_info\n            else:\n                outcome.errors.append(exc_info)\n        except _ExpectedFailure:\n            outcome.success = False\n            exc_info = sys.exc_info()\n            if isTest:\n                outcome.expectedFailure = exc_info\n            else:\n                outcome.errors.append(exc_info)\n        except self.failureException:\n            outcome.success = False\n            outcome.failures.append(sys.exc_info())\n            exc_info = sys.exc_info()\n        except:\n            outcome.success = False\n            outcome.errors.append(sys.exc_info())\n    def run(self, result=None):\n        orig_result = result\n        if result is None:\n            result = self.defaultTestResult()\n            startTestRun = getattr(result, 'startTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n        result.startTest(self)\n        testMethod = getattr(self, self._testMethodName)\n        if (getattr(self.__class__, \"__unittest_skip__\", False) or\n            getattr(testMethod, \"__unittest_skip__\", False)):\n            try:\n                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')\n                            or getattr(testMethod, '__unittest_skip_why__', ''))\n                self._addSkip(result, skip_why)\n            finally:\n                result.stopTest(self)\n            return\n        try:\n            outcome = _Outcome()\n            self._outcomeForDoCleanups = outcome\n            self._executeTestPart(self.setUp, outcome)\n            if outcome.success:\n                self._executeTestPart(testMethod, outcome, isTest=True)\n                self._executeTestPart(self.tearDown, outcome)\n            self.doCleanups()\n            if outcome.success:\n                result.addSuccess(self)\n            else:\n                if outcome.skipped is not None:\n                    self._addSkip(result, outcome.skipped)\n                for exc_info in outcome.errors:\n                    result.addError(self, exc_info)\n                for exc_info in outcome.failures:\n                    result.addFailure(self, exc_info)\n                if outcome.unexpectedSuccess is not None:\n                    addUnexpectedSuccess = getattr(result, 'addUnexpectedSuccess', None)\n                    if addUnexpectedSuccess is not None:\n                        addUnexpectedSuccess(self)\n                    else:\n                        warnings.warn(\"TestResult has no addUnexpectedSuccess method, reporting as failures\",\n                                      RuntimeWarning)\n                        result.addFailure(self, outcome.unexpectedSuccess)\n                if outcome.expectedFailure is not None:\n                    addExpectedFailure = getattr(result, 'addExpectedFailure', None)\n                    if addExpectedFailure is not None:\n                        addExpectedFailure(self, outcome.expectedFailure)\n                    else:\n                        warnings.warn(\"TestResult has no addExpectedFailure method, reporting as passes\",\n                                      RuntimeWarning)\n                        result.addSuccess(self)\n            return result\n        finally:\n            result.stopTest(self)\n            if orig_result is None:\n                stopTestRun = getattr(result, 'stopTestRun', None)\n                if stopTestRun is not None:\n                    stopTestRun()\n    def doCleanups(self):\n        \"\"\"Execute all cleanup functions. Normally called for you after\n        tearDown.\"\"\"\n        outcome = self._outcomeForDoCleanups or _Outcome()\n        while self._cleanups:\n            function, args, kwargs = self._cleanups.pop()\n            part = lambda: function(*args, **kwargs)\n            self._executeTestPart(part, outcome)\n        return outcome.success\n    def __call__(self, *args, **kwds):\n        return self.run(*args, **kwds)\n    def debug(self):\n        \"\"\"Run the test without collecting errors in a TestResult\"\"\"\n        self.setUp()\n        getattr(self, self._testMethodName)()\n        self.tearDown()\n        while self._cleanups:\n            function, args, kwargs = self._cleanups.pop(-1)\n            function(*args, **kwargs)\n    def skipTest(self, reason):\n        \"\"\"Skip this test.\"\"\"\n        raise SkipTest(reason)\n    def fail(self, msg=None):\n        \"\"\"Fail immediately, with the given message.\"\"\"\n        raise self.failureException(msg)\n    def assertFalse(self, expr, msg=None):\n        \"\"\"Check that the expression is false.\"\"\"\n        if expr:\n            msg = self._formatMessage(msg, \"%s is not false\" % safe_repr(expr))\n            raise self.failureException(msg)\n    def assertTrue(self, expr, msg=None):\n        \"\"\"Check that the expression is true.\"\"\"\n        if not expr:\n            msg = self._formatMessage(msg, \"%s is not true\" % safe_repr(expr))\n            raise self.failureException(msg)\n    def _formatMessage(self, msg, standardMsg):\n        \"\"\"Honour the longMessage attribute when generating failure messages.\n        If longMessage is False this means:\n        * Use only an explicit message if it is provided\n        * Otherwise use the standard message for the assert\n        If longMessage is True:\n        * Use the standard message\n        * If an explicit message is provided, plus ' : ' and the explicit message\n        \"\"\"\n        if not self.longMessage:\n            return msg or standardMsg\n        if msg is None:\n            return standardMsg\n        try:\n            return '%s : %s' % (standardMsg, msg)\n        except UnicodeDecodeError:\n            return  '%s : %s' % (safe_repr(standardMsg), safe_repr(msg))\n    def assertRaises(self, excClass, callableObj=None, *args, **kwargs):\n        \"\"\"Fail unless an exception of class excClass is thrown\n           by callableObj when invoked with arguments args and keyword\n           arguments kwargs. If a different type of exception is\n           thrown, it will not be caught, and the test case will be\n           deemed to have suffered an error, exactly as for an\n           unexpected exception.\n           If called with callableObj omitted or None, will return a\n           context object used like this::\n                with self.assertRaises(SomeException):\n                    do_something()\n           An optional keyword argument 'msg' can be provided when assertRaises\n           is used as a context object.\n           The context manager keeps a reference to the exception as\n           the 'exception' attribute. This allows you to inspect the\n           exception after the assertion::\n               with self.assertRaises(SomeException) as cm:\n                   do_something()\n               the_exception = cm.exception\n               self.assertEqual(the_exception.error_code, 3)\n        \"\"\"\n        context = _AssertRaisesContext(excClass, self, callableObj)\n        return context.handle('assertRaises', callableObj, args, kwargs)\n    def assertWarns(self, expected_warning, callable_obj=None, *args, **kwargs):\n        \"\"\"Fail unless a warning of class warnClass is triggered\n           by callable_obj when invoked with arguments args and keyword\n           arguments kwargs.  If a different type of warning is\n           triggered, it will not be handled: depending on the other\n           warning filtering rules in effect, it might be silenced, printed\n           out, or raised as an exception.\n           If called with callable_obj omitted or None, will return a\n           context object used like this::\n                with self.assertWarns(SomeWarning):\n                    do_something()\n           An optional keyword argument 'msg' can be provided when assertWarns\n           is used as a context object.\n           The context manager keeps a reference to the first matching\n           warning as the 'warning' attribute; similarly, the 'filename'\n           and 'lineno' attributes give you information about the line\n           of Python code from which the warning was triggered.\n           This allows you to inspect the warning after the assertion::\n               with self.assertWarns(SomeWarning) as cm:\n                   do_something()\n               the_warning = cm.warning\n               self.assertEqual(the_warning.some_attribute, 147)\n        \"\"\"\n        context = _AssertWarnsContext(expected_warning, self, callable_obj)\n        return context.handle('assertWarns', callable_obj, args, kwargs)\n    def _getAssertEqualityFunc(self, first, second):\n        \"\"\"Get a detailed comparison function for the types of the two args.\n        Returns: A callable accepting (first, second, msg=None) that will\n        raise a failure exception if first != second with a useful human\n        readable error message for those types.\n        \"\"\"\n        if type(first) is type(second):\n            asserter = self._type_equality_funcs.get(type(first))\n            if asserter is not None:\n                if isinstance(asserter, str):\n                    asserter = getattr(self, asserter)\n                return asserter\n        return self._baseAssertEqual\n    def _baseAssertEqual(self, first, second, msg=None):\n        \"\"\"The default assertEqual implementation, not type specific.\"\"\"\n        if not first == second:\n            standardMsg = '%s != %s' % (safe_repr(first), safe_repr(second))\n            msg = self._formatMessage(msg, standardMsg)\n            raise self.failureException(msg)\n    def assertEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are unequal as determined by the '=='\n           operator.\n        \"\"\"\n        assertion_func = self._getAssertEqualityFunc(first, second)\n        assertion_func(first, second, msg=msg)\n    def assertNotEqual(self, first, second, msg=None):\n        \"\"\"Fail if the two objects are equal as determined by the '=='\n           operator.\n        \"\"\"\n        if not first != second:\n            msg = self._formatMessage(msg, '%s == %s' % (safe_repr(first),\n                                                          safe_repr(second)))\n            raise self.failureException(msg)\n    def assertAlmostEqual(self, first, second, places=None, msg=None,\n                          delta=None):\n        \"\"\"Fail if the two objects are unequal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero, or by comparing that the\n           between the two objects is more than the given delta.\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n           If the two objects compare equal then they will automatically\n           compare almost equal.\n        \"\"\"\n        if first == second:\n            return\n        if delta is not None and places is not None:\n            raise TypeError(\"specify delta or places not both\")\n        if delta is not None:\n            if abs(first - second) <= delta:\n                return\n            standardMsg = '%s != %s within %s delta' % (safe_repr(first),\n                                                        safe_repr(second),\n                                                        safe_repr(delta))\n        else:\n            if places is None:\n                places = 7\n            if round(abs(second-first), places) == 0:\n                return\n            standardMsg = '%s != %s within %r places' % (safe_repr(first),\n                                                          safe_repr(second),\n                                                          places)\n        msg = self._formatMessage(msg, standardMsg)\n        raise self.failureException(msg)\n    def assertNotAlmostEqual(self, first, second, places=None, msg=None,\n                             delta=None):\n        \"\"\"Fail if the two objects are equal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero, or by comparing that the\n           between the two objects is less than the given delta.\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n           Objects that are equal automatically fail.\n        \"\"\"\n        if delta is not None and places is not None:\n            raise TypeError(\"specify delta or places not both\")\n        if delta is not None:\n            if not (first == second) and abs(first - second) > delta:\n                return\n            standardMsg = '%s == %s within %s delta' % (safe_repr(first),\n                                                        safe_repr(second),\n                                                        safe_repr(delta))\n        else:\n            if places is None:\n                places = 7\n            if not (first == second) and round(abs(second-first), places) != 0:\n                return\n            standardMsg = '%s == %s within %r places' % (safe_repr(first),\n                                                         safe_repr(second),\n                                                         places)\n        msg = self._formatMessage(msg, standardMsg)\n        raise self.failureException(msg)\n    def assertSequenceEqual(self, seq1, seq2, msg=None, seq_type=None):\n        \"\"\"An equality assertion for ordered sequences (like lists and tuples).\n        For the purposes of this function, a valid ordered sequence type is one\n        which can be indexed, has a length, and has an equality operator.\n        Args:\n            seq1: The first sequence to compare.\n            seq2: The second sequence to compare.\n            seq_type: The expected datatype of the sequences, or None if no\n                    datatype should be enforced.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n        \"\"\"\n        if seq_type != None:\n            seq_type_name = seq_type.__name__\n            if not isinstance(seq1, seq_type):\n                raise self.failureException('First sequence is not a %s: %s'\n                                        % (seq_type_name, safe_repr(seq1)))\n            if not isinstance(seq2, seq_type):\n                raise self.failureException('Second sequence is not a %s: %s'\n                                        % (seq_type_name, safe_repr(seq2)))\n        else:\n            seq_type_name = \"sequence\"\n        differing = None\n        try:\n            len1 = len(seq1)\n        except (TypeError, NotImplementedError):\n            differing = 'First %s has no length.    Non-sequence?' % (\n                    seq_type_name)\n        if differing is None:\n            try:\n                len2 = len(seq2)\n            except (TypeError, NotImplementedError):\n                differing = 'Second %s has no length.    Non-sequence?' % (\n                        seq_type_name)\n        if differing is None:\n            if seq1 == seq2:\n                return\n            seq1_repr = safe_repr(seq1)\n            seq2_repr = safe_repr(seq2)\n            if len(seq1_repr) > 30:\n                seq1_repr = seq1_repr[:30] + '...'\n            if len(seq2_repr) > 30:\n                seq2_repr = seq2_repr[:30] + '...'\n            elements = (seq_type_name.capitalize(), seq1_repr, seq2_repr)\n            differing = '%ss differ: %s != %s\\n' % elements\n            for i in range(min(len1, len2)):\n                try:\n                    item1 = seq1[i]\n                except (TypeError, IndexError, NotImplementedError):\n                    differing += ('\\nUnable to index element %d of first %s\\n' %\n                                 (i, seq_type_name))\n                    break\n                try:\n                    item2 = seq2[i]\n                except (TypeError, IndexError, NotImplementedError):\n                    differing += ('\\nUnable to index element %d of second %s\\n' %\n                                 (i, seq_type_name))\n                    break\n                if item1 != item2:\n                    differing += ('\\nFirst differing element %d:\\n%s\\n%s\\n' %\n                                 (i, item1, item2))\n                    break\n            else:\n                if (len1 == len2 and seq_type is None and\n                    type(seq1) != type(seq2)):\n                    return\n            if len1 > len2:\n                differing += ('\\nFirst %s contains %d additional '\n                             'elements.\\n' % (seq_type_name, len1 - len2))\n                try:\n                    differing += ('First extra element %d:\\n%s\\n' %\n                                  (len2, seq1[len2]))\n                except (TypeError, IndexError, NotImplementedError):\n                    differing += ('Unable to index element %d '\n                                  'of first %s\\n' % (len2, seq_type_name))\n            elif len1 < len2:\n                differing += ('\\nSecond %s contains %d additional '\n                             'elements.\\n' % (seq_type_name, len2 - len1))\n                try:\n                    differing += ('First extra element %d:\\n%s\\n' %\n                                  (len1, seq2[len1]))\n                except (TypeError, IndexError, NotImplementedError):\n                    differing += ('Unable to index element %d '\n                                  'of second %s\\n' % (len1, seq_type_name))\n        standardMsg = differing\n        diffMsg = '\\n' + '\\n'.join(\n            difflib.ndiff(pprint.pformat(seq1).splitlines(),\n                          pprint.pformat(seq2).splitlines()))\n        standardMsg = self._truncateMessage(standardMsg, diffMsg)\n        msg = self._formatMessage(msg, standardMsg)\n        self.fail(msg)\n    def _truncateMessage(self, message, diff):\n        max_diff = self.maxDiff\n        if max_diff is None or len(diff) <= max_diff:\n            return message + diff\n        return message + (DIFF_OMITTED % len(diff))\n    def assertListEqual(self, list1, list2, msg=None):\n        \"\"\"A list-specific equality assertion.\n        Args:\n            list1: The first list to compare.\n            list2: The second list to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n        \"\"\"\n        self.assertSequenceEqual(list1, list2, msg, seq_type=list)\n    def assertTupleEqual(self, tuple1, tuple2, msg=None):\n        \"\"\"A tuple-specific equality assertion.\n        Args:\n            tuple1: The first tuple to compare.\n            tuple2: The second tuple to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n        \"\"\"\n        self.assertSequenceEqual(tuple1, tuple2, msg, seq_type=tuple)\n    def assertSetEqual(self, set1, set2, msg=None):\n        \"\"\"A set-specific equality assertion.\n        Args:\n            set1: The first set to compare.\n            set2: The second set to compare.\n            msg: Optional message to use on failure instead of a list of\n                    differences.\n        assertSetEqual uses ducktyping to support different types of sets, and\n        is optimized for sets specifically (parameters must support a\n        difference method).\n        \"\"\"\n        try:\n            difference1 = set1.difference(set2)\n        except TypeError as e:\n            self.fail('invalid type when attempting set difference: %s' % e)\n        except AttributeError as e:\n            self.fail('first argument does not support set difference: %s' % e)\n        try:\n            difference2 = set2.difference(set1)\n        except TypeError as e:\n            self.fail('invalid type when attempting set difference: %s' % e)\n        except AttributeError as e:\n            self.fail('second argument does not support set difference: %s' % e)\n        if not (difference1 or difference2):\n            return\n        lines = []\n        if difference1:\n            lines.append('Items in the first set but not the second:')\n            for item in difference1:\n                lines.append(repr(item))\n        if difference2:\n            lines.append('Items in the second set but not the first:')\n            for item in difference2:\n                lines.append(repr(item))\n        standardMsg = '\\n'.join(lines)\n        self.fail(self._formatMessage(msg, standardMsg))\n    def assertIn(self, member, container, msg=None):\n        \"\"\"Just like self.assertTrue(a in b), but with a nicer default message.\"\"\"\n        if member not in container:\n            standardMsg = '%s not found in %s' % (safe_repr(member),\n                                                  safe_repr(container))\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertNotIn(self, member, container, msg=None):\n        \"\"\"Just like self.assertTrue(a not in b), but with a nicer default message.\"\"\"\n        if member in container:\n            standardMsg = '%s unexpectedly found in %s' % (safe_repr(member),\n                                                        safe_repr(container))\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertIs(self, expr1, expr2, msg=None):\n        \"\"\"Just like self.assertTrue(a is b), but with a nicer default message.\"\"\"\n        if expr1 is not expr2:\n            standardMsg = '%s is not %s' % (safe_repr(expr1),\n                                             safe_repr(expr2))\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertIsNot(self, expr1, expr2, msg=None):\n        \"\"\"Just like self.assertTrue(a is not b), but with a nicer default message.\"\"\"\n        if expr1 is expr2:\n            standardMsg = 'unexpectedly identical: %s' % (safe_repr(expr1),)\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertDictEqual(self, d1, d2, msg=None):\n        self.assertIsInstance(d1, dict, 'First argument is not a dictionary')\n        self.assertIsInstance(d2, dict, 'Second argument is not a dictionary')\n        if d1 != d2:\n            standardMsg = '%s != %s' % (safe_repr(d1, True), safe_repr(d2, True))\n            diff = ('\\n' + '\\n'.join(difflib.ndiff(\n                           pprint.pformat(d1).splitlines(),\n                           pprint.pformat(d2).splitlines())))\n            standardMsg = self._truncateMessage(standardMsg, diff)\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertDictContainsSubset(self, subset, dictionary, msg=None):\n        \"\"\"Checks whether dictionary is a superset of subset.\"\"\"\n        warnings.warn('assertDictContainsSubset is deprecated',\n                      DeprecationWarning)\n        missing = []\n        mismatched = []\n        for key, value in subset.items():\n            if key not in dictionary:\n                missing.append(key)\n            elif value != dictionary[key]:\n                mismatched.append('%s, expected: %s, actual: %s' %\n                                  (safe_repr(key), safe_repr(value),\n                                   safe_repr(dictionary[key])))\n        if not (missing or mismatched):\n            return\n        standardMsg = ''\n        if missing:\n            standardMsg = 'Missing: %s' % ','.join(safe_repr(m) for m in\n                                                    missing)\n        if mismatched:\n            if standardMsg:\n                standardMsg += '; '\n            standardMsg += 'Mismatched values: %s' % ','.join(mismatched)\n        self.fail(self._formatMessage(msg, standardMsg))\n    def assertCountEqual(self, first, second, msg=None):\n        \"\"\"An unordered sequence comparison asserting that the same elements,\n        regardless of order.  If the same element occurs more than once,\n        it verifies that the elements occur the same number of times.\n            self.assertEqual(Counter(list(first)),\n                             Counter(list(second)))\n         Example:\n            - [0, 1, 1] and [1, 0, 1] compare equal.\n            - [0, 0, 1] and [0, 1] compare unequal.\n        \"\"\"\n        first_seq, second_seq = list(first), list(second)\n        try:\n            first = collections.Counter(first_seq)\n            second = collections.Counter(second_seq)\n        except TypeError:\n            differences = _count_diff_all_purpose(first_seq, second_seq)\n        else:\n            if first == second:\n                return\n            differences = _count_diff_hashable(first_seq, second_seq)\n        if differences:\n            standardMsg = 'Element counts were not equal:\\n'\n            lines = ['First has %d, Second has %d:  %r' % diff for diff in differences]\n            diffMsg = '\\n'.join(lines)\n            standardMsg = self._truncateMessage(standardMsg, diffMsg)\n            msg = self._formatMessage(msg, standardMsg)\n            self.fail(msg)\n    def assertMultiLineEqual(self, first, second, msg=None):\n        \"\"\"Assert that two multi-line strings are equal.\"\"\"\n        self.assertIsInstance(first, str, 'First argument is not a string')\n        self.assertIsInstance(second, str, 'Second argument is not a string')\n        if first != second:\n            if (len(first) > self._diffThreshold or\n                len(second) > self._diffThreshold):\n                self._baseAssertEqual(first, second, msg)\n            firstlines = first.splitlines(keepends=True)\n            secondlines = second.splitlines(keepends=True)\n            if len(firstlines) == 1 and first.strip('\\r\\n') == first:\n                firstlines = [first + '\\n']\n                secondlines = [second + '\\n']\n            standardMsg = '%s != %s' % (safe_repr(first, True),\n                                        safe_repr(second, True))\n            diff = '\\n' + ''.join(difflib.ndiff(firstlines, secondlines))\n            standardMsg = self._truncateMessage(standardMsg, diff)\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertLess(self, a, b, msg=None):\n        \"\"\"Just like self.assertTrue(a < b), but with a nicer default message.\"\"\"\n        if not a < b:\n            standardMsg = '%s not less than %s' % (safe_repr(a), safe_repr(b))\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertLessEqual(self, a, b, msg=None):\n        \"\"\"Just like self.assertTrue(a <= b), but with a nicer default message.\"\"\"\n        if not a <= b:\n            standardMsg = '%s not less than or equal to %s' % (safe_repr(a), safe_repr(b))\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertGreater(self, a, b, msg=None):\n        \"\"\"Just like self.assertTrue(a > b), but with a nicer default message.\"\"\"\n        if not a > b:\n            standardMsg = '%s not greater than %s' % (safe_repr(a), safe_repr(b))\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertGreaterEqual(self, a, b, msg=None):\n        \"\"\"Just like self.assertTrue(a >= b), but with a nicer default message.\"\"\"\n        if not a >= b:\n            standardMsg = '%s not greater than or equal to %s' % (safe_repr(a), safe_repr(b))\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertIsNone(self, obj, msg=None):\n        \"\"\"Same as self.assertTrue(obj is None), with a nicer default message.\"\"\"\n        if obj is not None:\n            standardMsg = '%s is not None' % (safe_repr(obj),)\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertIsNotNone(self, obj, msg=None):\n        \"\"\"Included for symmetry with assertIsNone.\"\"\"\n        if obj is None:\n            standardMsg = 'unexpectedly None'\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertIsInstance(self, obj, cls, msg=None):\n        \"\"\"Same as self.assertTrue(isinstance(obj, cls)), with a nicer\n        default message.\"\"\"\n        if not isinstance(obj, cls):\n            standardMsg = '%s is not an instance of %r' % (safe_repr(obj), cls)\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertNotIsInstance(self, obj, cls, msg=None):\n        \"\"\"Included for symmetry with assertIsInstance.\"\"\"\n        if isinstance(obj, cls):\n            standardMsg = '%s is an instance of %r' % (safe_repr(obj), cls)\n            self.fail(self._formatMessage(msg, standardMsg))\n    def assertRaisesRegex(self, expected_exception, expected_regex,\n                          callable_obj=None, *args, **kwargs):\n        \"\"\"Asserts that the message in a raised exception matches a regex.\n        Args:\n            expected_exception: Exception class expected to be raised.\n            expected_regex: Regex (re pattern object or string) expected\n                    to be found in error message.\n            callable_obj: Function to be called.\n            msg: Optional message used in case of failure. Can only be used\n                    when assertRaisesRegex is used as a context manager.\n            args: Extra args.\n            kwargs: Extra kwargs.\n        \"\"\"\n        context = _AssertRaisesContext(expected_exception, self, callable_obj,\n                                       expected_regex)\n        return context.handle('assertRaisesRegex', callable_obj, args, kwargs)\n    def assertWarnsRegex(self, expected_warning, expected_regex,\n                         callable_obj=None, *args, **kwargs):\n        \"\"\"Asserts that the message in a triggered warning matches a regexp.\n        Basic functioning is similar to assertWarns() with the addition\n        that only warnings whose messages also match the regular expression\n        are considered successful matches.\n        Args:\n            expected_warning: Warning class expected to be triggered.\n            expected_regex: Regex (re pattern object or string) expected\n                    to be found in error message.\n            callable_obj: Function to be called.\n            msg: Optional message used in case of failure. Can only be used\n                    when assertWarnsRegex is used as a context manager.\n            args: Extra args.\n            kwargs: Extra kwargs.\n        \"\"\"\n        context = _AssertWarnsContext(expected_warning, self, callable_obj,\n                                      expected_regex)\n        return context.handle('assertWarnsRegex', callable_obj, args, kwargs)\n    def assertRegex(self, text, expected_regex, msg=None):\n        \"\"\"Fail the test unless the text matches the regular expression.\"\"\"\n        if isinstance(expected_regex, (str, bytes)):\n            assert expected_regex, \"expected_regex must not be empty.\"\n            expected_regex = re.compile(expected_regex)\n        if not expected_regex.search(text):\n            msg = msg or \"Regex didn't match\"\n            msg = '%s: %r not found in %r' % (msg, expected_regex.pattern, text)\n            raise self.failureException(msg)\n    def assertNotRegex(self, text, unexpected_regex, msg=None):\n        \"\"\"Fail the test if the text matches the regular expression.\"\"\"\n        if isinstance(unexpected_regex, (str, bytes)):\n            unexpected_regex = re.compile(unexpected_regex)\n        match = unexpected_regex.search(text)\n        if match:\n            msg = msg or \"Regex matched\"\n            msg = '%s: %r matches %r in %r' % (msg,\n                                               text[match.start():match.end()],\n                                               unexpected_regex.pattern,\n                                               text)\n            raise self.failureException(msg)\n    def _deprecate(original_func):\n        def deprecated_func(*args, **kwargs):\n            warnings.warn(\n                'Please use {0} instead.'.format(original_func.__name__),\n                DeprecationWarning, 2)\n            return original_func(*args, **kwargs)\n        return deprecated_func\n    failUnlessEqual = assertEquals = _deprecate(assertEqual)\n    failIfEqual = assertNotEquals = _deprecate(assertNotEqual)\n    failUnlessAlmostEqual = assertAlmostEquals = _deprecate(assertAlmostEqual)\n    failIfAlmostEqual = assertNotAlmostEquals = _deprecate(assertNotAlmostEqual)\n    failUnless = assert_ = _deprecate(assertTrue)\n    failUnlessRaises = _deprecate(assertRaises)\n    failIf = _deprecate(assertFalse)\n    assertRaisesRegexp = _deprecate(assertRaisesRegex)\n    assertRegexpMatches = _deprecate(assertRegex)\nclass FunctionTestCase(TestCase):\n    \"\"\"A test case that wraps a test function.\n    This is useful for slipping pre-existing test functions into the\n    unittest framework. Optionally, set-up and tidy-up functions can be\n    supplied. As with TestCase, the tidy-up ('tearDown') function will\n    always be called if the set-up ('setUp') function ran successfully.\n    \"\"\"\n    def __init__(self, testFunc, setUp=None, tearDown=None, description=None):\n        super(FunctionTestCase, self).__init__()\n        self._setUpFunc = setUp\n        self._tearDownFunc = tearDown\n        self._testFunc = testFunc\n        self._description = description\n    def setUp(self):\n        if self._setUpFunc is not None:\n            self._setUpFunc()\n    def tearDown(self):\n        if self._tearDownFunc is not None:\n            self._tearDownFunc()\n    def runTest(self):\n        self._testFunc()\n    def id(self):\n        return self._testFunc.__name__\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self._setUpFunc == other._setUpFunc and \\\n               self._tearDownFunc == other._tearDownFunc and \\\n               self._testFunc == other._testFunc and \\\n               self._description == other._description\n    def __ne__(self, other):\n        return not self == other\n    def __hash__(self):\n        return hash((type(self), self._setUpFunc, self._tearDownFunc,\n                     self._testFunc, self._description))\n    def __str__(self):\n        return \"%s (%s)\" % (strclass(self.__class__),\n                            self._testFunc.__name__)\n    def __repr__(self):\n        return \"<%s tec=%s>\" % (strclass(self.__class__),\n                                     self._testFunc)\n    def shortDescription(self):\n        if self._description is not None:\n            return self._description\n        doc = self._testFunc.__doc__\n        return doc and doc.split(\"\\n\")[0].strip() or None\n", "/Lib/unittest/test/test_loader.py": "import sys\r\nimport types\r\nimport unittest\r\nclass Test_TestLoader(unittest.TestCase):\r\n    def test_loadTestsFromTestCase(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foo_bar(self): pass\r\n        tests = unittest.TestSuite([Foo('test_1'), Foo('test_2')])\r\n        loader = unittest.TestLoader()\r\n        self.assertEqual(loader.loadTestsFromTestCase(Foo), tests)\r\n    def test_loadTestsFromTestCase__no_matches(self):\r\n        class Foo(unittest.TestCase):\r\n            def foo_bar(self): pass\r\n        empty_suite = unittest.TestSuite()\r\n        loader = unittest.TestLoader()\r\n        self.assertEqual(loader.loadTestsFromTestCase(Foo), empty_suite)\r\n    def test_loadTestsFromTestCase__TestSuite_subclass(self):\r\n        class NotATestCase(unittest.TestSuite):\r\n            pass\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromTestCase(NotATestCase)\r\n        except TypeError:\r\n            pass\r\n        else:\r\n            self.fail('Should raise TypeError')\r\n    def test_loadTestsFromTestCase__default_method_name(self):\r\n        class Foo(unittest.TestCase):\r\n            def runTest(self):\r\n                pass\r\n        loader = unittest.TestLoader()\r\n        self.assertFalse('runTest'.startswith(loader.testMethodPrefix))\r\n        suite = loader.loadTestsFromTestCase(Foo)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [Foo('runTest')])\r\n    def test_loadTestsFromModule__TestCase_subclass(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testcase_1 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromModule(m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        expected = [loader.suiteClass([MyTestCase('test')])]\r\n        self.assertEqual(list(suite), expected)\r\n    def test_loadTestsFromModule__no_TestCase_instances(self):\r\n        m = types.ModuleType('m')\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromModule(m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [])\r\n    def test_loadTestsFromModule__no_TestCase_tests(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            pass\r\n        m.testcase_1 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromModule(m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [loader.suiteClass()])\r\n    def test_loadTestsFromModule__not_a_module(self):\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        class NotAModule(object):\r\n            test_2 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromModule(NotAModule)\r\n        reference = [unittest.TestSuite([MyTestCase('test')])]\r\n        self.assertEqual(list(suite), reference)\r\n    def test_loadTestsFromModule__load_tests(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testcase_1 = MyTestCase\r\n        load_tests_args = []\r\n        def load_tests(loader, tests, pattern):\r\n            self.assertIsInstance(tests, unittest.TestSuite)\r\n            load_tests_args.extend((loader, tests, pattern))\r\n            return tests\r\n        m.load_tests = load_tests\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromModule(m)\r\n        self.assertIsInstance(suite, unittest.TestSuite)\r\n        self.assertEqual(load_tests_args, [loader, suite, None])\r\n        load_tests_args = []\r\n        suite = loader.loadTestsFromModule(m, use_load_tests=False)\r\n        self.assertEqual(load_tests_args, [])\r\n    def test_loadTestsFromModule__faulty_load_tests(self):\r\n        m = types.ModuleType('m')\r\n        def load_tests(loader, tests, pattern):\r\n            raise TypeError('some failure')\r\n        m.load_tests = load_tests\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromModule(m)\r\n        self.assertIsInstance(suite, unittest.TestSuite)\r\n        self.assertEqual(suite.countTestCases(), 1)\r\n        test = list(suite)[0]\r\n        self.assertRaisesRegex(TypeError, \"some failure\", test.m)\r\n    def test_loadTestsFromName__empty_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromName('')\r\n        except ValueError as e:\r\n            self.assertEqual(str(e), \"Empty module name\")\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromName failed to raise ValueError\")\r\n    def test_loadTestsFromName__malformed_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromName('abc () //')\r\n        except ValueError:\r\n            pass\r\n        except ImportError:\r\n            pass\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromName failed to raise ValueError\")\r\n    def test_loadTestsFromName__unknown_module_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromName('sdasfasfasdf')\r\n        except ImportError as e:\r\n            self.assertEqual(str(e), \"No module named 'sdasfasfasdf'\")\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromName failed to raise ImportError\")\r\n    def test_loadTestsFromName__unknown_attr_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromName('unittest.sdasfasfasdf')\r\n        except AttributeError as e:\r\n            self.assertEqual(str(e), \"'module' object has no attribute 'sdasfasfasdf'\")\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromName failed to raise AttributeError\")\r\n    def test_loadTestsFromName__relative_unknown_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromName('sdasfasfasdf', unittest)\r\n        except AttributeError as e:\r\n            self.assertEqual(str(e), \"'module' object has no attribute 'sdasfasfasdf'\")\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromName failed to raise AttributeError\")\r\n    def test_loadTestsFromName__relative_empty_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromName('', unittest)\r\n        except AttributeError as e:\r\n            pass\r\n        else:\r\n            self.fail(\"Failed to raise AttributeError\")\r\n    def test_loadTestsFromName__relative_malformed_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromName('abc () //', unittest)\r\n        except ValueError:\r\n            pass\r\n        except AttributeError:\r\n            pass\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromName failed to raise ValueError\")\r\n    def test_loadTestsFromName__relative_not_a_module(self):\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        class NotAModule(object):\r\n            test_2 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromName('test_2', NotAModule)\r\n        reference = [MyTestCase('test')]\r\n        self.assertEqual(list(suite), reference)\r\n    def test_loadTestsFromName__relative_bad_object(self):\r\n        m = types.ModuleType('m')\r\n        m.testcase_1 = object()\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromName('testcase_1', m)\r\n        except TypeError:\r\n            pass\r\n        else:\r\n            self.fail(\"Should have raised TypeError\")\r\n    def test_loadTestsFromName__relative_TestCase_subclass(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testcase_1 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromName('testcase_1', m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [MyTestCase('test')])\r\n    def test_loadTestsFromName__relative_TestSuite(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testsuite = unittest.TestSuite([MyTestCase('test')])\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromName('testsuite', m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [MyTestCase('test')])\r\n    def test_loadTestsFromName__relative_testmethod(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testcase_1 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromName('testcase_1.test', m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [MyTestCase('test')])\r\n    def test_loadTestsFromName__relative_invalid_testmethod(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testcase_1 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromName('testcase_1.testfoo', m)\r\n        except AttributeError as e:\r\n            self.assertEqual(str(e), \"type object 'MyTestCase' has no attribute 'testfoo'\")\r\n        else:\r\n            self.fail(\"Failed to raise AttributeError\")\r\n    def test_loadTestsFromName__callable__TestSuite(self):\r\n        m = types.ModuleType('m')\r\n        testcase_1 = unittest.FunctionTestCase(lambda: None)\r\n        testcase_2 = unittest.FunctionTestCase(lambda: None)\r\n        def return_TestSuite():\r\n            return unittest.TestSuite([testcase_1, testcase_2])\r\n        m.return_TestSuite = return_TestSuite\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromName('return_TestSuite', m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [testcase_1, testcase_2])\r\n    def test_loadTestsFromName__callable__TestCase_instance(self):\r\n        m = types.ModuleType('m')\r\n        testcase_1 = unittest.FunctionTestCase(lambda: None)\r\n        def return_TestCase():\r\n            return testcase_1\r\n        m.return_TestCase = return_TestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromName('return_TestCase', m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [testcase_1])\r\n    def test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass(self):\r\n        class SubTestSuite(unittest.TestSuite):\r\n            pass\r\n        m = types.ModuleType('m')\r\n        testcase_1 = unittest.FunctionTestCase(lambda: None)\r\n        def return_TestCase():\r\n            return testcase_1\r\n        m.return_TestCase = return_TestCase\r\n        loader = unittest.TestLoader()\r\n        loader.suiteClass = SubTestSuite\r\n        suite = loader.loadTestsFromName('return_TestCase', m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [testcase_1])\r\n    def test_loadTestsFromName__relative_testmethod_ProperSuiteClass(self):\r\n        class SubTestSuite(unittest.TestSuite):\r\n            pass\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testcase_1 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        loader.suiteClass=SubTestSuite\r\n        suite = loader.loadTestsFromName('testcase_1.test', m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [MyTestCase('test')])\r\n    def test_loadTestsFromName__callable__wrong_type(self):\r\n        m = types.ModuleType('m')\r\n        def return_wrong():\r\n            return 6\r\n        m.return_wrong = return_wrong\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            suite = loader.loadTestsFromName('return_wrong', m)\r\n        except TypeError:\r\n            pass\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromName failed to raise TypeError\")\r\n    def test_loadTestsFromName__module_not_loaded(self):\r\n        module_name = 'unittest.test.dummy'\r\n        sys.modules.pop(module_name, None)\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            suite = loader.loadTestsFromName(module_name)\r\n            self.assertIsInstance(suite, loader.suiteClass)\r\n            self.assertEqual(list(suite), [])\r\n            self.assertIn(module_name, sys.modules)\r\n        finally:\r\n            if module_name in sys.modules:\r\n                del sys.modules[module_name]\r\n    def test_loadTestsFromNames__empty_name_list(self):\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromNames([])\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [])\r\n    def test_loadTestsFromNames__relative_empty_name_list(self):\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromNames([], unittest)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [])\r\n    def test_loadTestsFromNames__empty_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames([''])\r\n        except ValueError as e:\r\n            self.assertEqual(str(e), \"Empty module name\")\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromNames failed to raise ValueError\")\r\n    def test_loadTestsFromNames__malformed_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames(['abc () //'])\r\n        except ValueError:\r\n            pass\r\n        except ImportError:\r\n            pass\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromNames failed to raise ValueError\")\r\n    def test_loadTestsFromNames__unknown_module_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames(['sdasfasfasdf'])\r\n        except ImportError as e:\r\n            self.assertEqual(str(e), \"No module named 'sdasfasfasdf'\")\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromNames failed to raise ImportError\")\r\n    def test_loadTestsFromNames__unknown_attr_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames(['unittest.sdasfasfasdf', 'unittest'])\r\n        except AttributeError as e:\r\n            self.assertEqual(str(e), \"'module' object has no attribute 'sdasfasfasdf'\")\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromNames failed to raise AttributeError\")\r\n    def test_loadTestsFromNames__unknown_name_relative_1(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames(['sdasfasfasdf'], unittest)\r\n        except AttributeError as e:\r\n            self.assertEqual(str(e), \"'module' object has no attribute 'sdasfasfasdf'\")\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromName failed to raise AttributeError\")\r\n    def test_loadTestsFromNames__unknown_name_relative_2(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames(['TestCase', 'sdasfasfasdf'], unittest)\r\n        except AttributeError as e:\r\n            self.assertEqual(str(e), \"'module' object has no attribute 'sdasfasfasdf'\")\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromName failed to raise AttributeError\")\r\n    def test_loadTestsFromNames__relative_empty_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames([''], unittest)\r\n        except AttributeError:\r\n            pass\r\n        else:\r\n            self.fail(\"Failed to raise ValueError\")\r\n    def test_loadTestsFromNames__relative_malformed_name(self):\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames(['abc () //'], unittest)\r\n        except AttributeError:\r\n            pass\r\n        except ValueError:\r\n            pass\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromNames failed to raise ValueError\")\r\n    def test_loadTestsFromNames__relative_not_a_module(self):\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        class NotAModule(object):\r\n            test_2 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromNames(['test_2'], NotAModule)\r\n        reference = [unittest.TestSuite([MyTestCase('test')])]\r\n        self.assertEqual(list(suite), reference)\r\n    def test_loadTestsFromNames__relative_bad_object(self):\r\n        m = types.ModuleType('m')\r\n        m.testcase_1 = object()\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames(['testcase_1'], m)\r\n        except TypeError:\r\n            pass\r\n        else:\r\n            self.fail(\"Should have raised TypeError\")\r\n    def test_loadTestsFromNames__relative_TestCase_subclass(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testcase_1 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromNames(['testcase_1'], m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        expected = loader.suiteClass([MyTestCase('test')])\r\n        self.assertEqual(list(suite), [expected])\r\n    def test_loadTestsFromNames__relative_TestSuite(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testsuite = unittest.TestSuite([MyTestCase('test')])\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromNames(['testsuite'], m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        self.assertEqual(list(suite), [m.testsuite])\r\n    def test_loadTestsFromNames__relative_testmethod(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testcase_1 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromNames(['testcase_1.test'], m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        ref_suite = unittest.TestSuite([MyTestCase('test')])\r\n        self.assertEqual(list(suite), [ref_suite])\r\n    def test_loadTestsFromNames__relative_invalid_testmethod(self):\r\n        m = types.ModuleType('m')\r\n        class MyTestCase(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        m.testcase_1 = MyTestCase\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            loader.loadTestsFromNames(['testcase_1.testfoo'], m)\r\n        except AttributeError as e:\r\n            self.assertEqual(str(e), \"type object 'MyTestCase' has no attribute 'testfoo'\")\r\n        else:\r\n            self.fail(\"Failed to raise AttributeError\")\r\n    def test_loadTestsFromNames__callable__TestSuite(self):\r\n        m = types.ModuleType('m')\r\n        testcase_1 = unittest.FunctionTestCase(lambda: None)\r\n        testcase_2 = unittest.FunctionTestCase(lambda: None)\r\n        def return_TestSuite():\r\n            return unittest.TestSuite([testcase_1, testcase_2])\r\n        m.return_TestSuite = return_TestSuite\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromNames(['return_TestSuite'], m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        expected = unittest.TestSuite([testcase_1, testcase_2])\r\n        self.assertEqual(list(suite), [expected])\r\n    def test_loadTestsFromNames__callable__TestCase_instance(self):\r\n        m = types.ModuleType('m')\r\n        testcase_1 = unittest.FunctionTestCase(lambda: None)\r\n        def return_TestCase():\r\n            return testcase_1\r\n        m.return_TestCase = return_TestCase\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromNames(['return_TestCase'], m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        ref_suite = unittest.TestSuite([testcase_1])\r\n        self.assertEqual(list(suite), [ref_suite])\r\n    def test_loadTestsFromNames__callable__call_staticmethod(self):\r\n        m = types.ModuleType('m')\r\n        class Test1(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        testcase_1 = Test1('test')\r\n        class Foo(unittest.TestCase):\r\n            @staticmethod\r\n            def foo():\r\n                return testcase_1\r\n        m.Foo = Foo\r\n        loader = unittest.TestLoader()\r\n        suite = loader.loadTestsFromNames(['Foo.foo'], m)\r\n        self.assertIsInstance(suite, loader.suiteClass)\r\n        ref_suite = unittest.TestSuite([testcase_1])\r\n        self.assertEqual(list(suite), [ref_suite])\r\n    def test_loadTestsFromNames__callable__wrong_type(self):\r\n        m = types.ModuleType('m')\r\n        def return_wrong():\r\n            return 6\r\n        m.return_wrong = return_wrong\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            suite = loader.loadTestsFromNames(['return_wrong'], m)\r\n        except TypeError:\r\n            pass\r\n        else:\r\n            self.fail(\"TestLoader.loadTestsFromNames failed to raise TypeError\")\r\n    def test_loadTestsFromNames__module_not_loaded(self):\r\n        module_name = 'unittest.test.dummy'\r\n        sys.modules.pop(module_name, None)\r\n        loader = unittest.TestLoader()\r\n        try:\r\n            suite = loader.loadTestsFromNames([module_name])\r\n            self.assertIsInstance(suite, loader.suiteClass)\r\n            self.assertEqual(list(suite), [unittest.TestSuite()])\r\n            self.assertIn(module_name, sys.modules)\r\n        finally:\r\n            if module_name in sys.modules:\r\n                del sys.modules[module_name]\r\n    def test_getTestCaseNames(self):\r\n        class Test(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foobar(self): pass\r\n        loader = unittest.TestLoader()\r\n        self.assertEqual(loader.getTestCaseNames(Test), ['test_1', 'test_2'])\r\n    def test_getTestCaseNames__no_tests(self):\r\n        class Test(unittest.TestCase):\r\n            def foobar(self): pass\r\n        loader = unittest.TestLoader()\r\n        self.assertEqual(loader.getTestCaseNames(Test), [])\r\n    def test_getTestCaseNames__not_a_TestCase(self):\r\n        class BadCase(int):\r\n            def test_foo(self):\r\n                pass\r\n        loader = unittest.TestLoader()\r\n        names = loader.getTestCaseNames(BadCase)\r\n        self.assertEqual(names, ['test_foo'])\r\n    def test_getTestCaseNames__inheritance(self):\r\n        class TestP(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foobar(self): pass\r\n        class TestC(TestP):\r\n            def test_1(self): pass\r\n            def test_3(self): pass\r\n        loader = unittest.TestLoader()\r\n        names = ['test_1', 'test_2', 'test_3']\r\n        self.assertEqual(loader.getTestCaseNames(TestC), names)\r\n    def test_testMethodPrefix__loadTestsFromTestCase(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foo_bar(self): pass\r\n        tests_1 = unittest.TestSuite([Foo('foo_bar')])\r\n        tests_2 = unittest.TestSuite([Foo('test_1'), Foo('test_2')])\r\n        loader = unittest.TestLoader()\r\n        loader.testMethodPrefix = 'foo'\r\n        self.assertEqual(loader.loadTestsFromTestCase(Foo), tests_1)\r\n        loader.testMethodPrefix = 'test'\r\n        self.assertEqual(loader.loadTestsFromTestCase(Foo), tests_2)\r\n    def test_testMethodPrefix__loadTestsFromModule(self):\r\n        m = types.ModuleType('m')\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foo_bar(self): pass\r\n        m.Foo = Foo\r\n        tests_1 = [unittest.TestSuite([Foo('foo_bar')])]\r\n        tests_2 = [unittest.TestSuite([Foo('test_1'), Foo('test_2')])]\r\n        loader = unittest.TestLoader()\r\n        loader.testMethodPrefix = 'foo'\r\n        self.assertEqual(list(loader.loadTestsFromModule(m)), tests_1)\r\n        loader.testMethodPrefix = 'test'\r\n        self.assertEqual(list(loader.loadTestsFromModule(m)), tests_2)\r\n    def test_testMethodPrefix__loadTestsFromName(self):\r\n        m = types.ModuleType('m')\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foo_bar(self): pass\r\n        m.Foo = Foo\r\n        tests_1 = unittest.TestSuite([Foo('foo_bar')])\r\n        tests_2 = unittest.TestSuite([Foo('test_1'), Foo('test_2')])\r\n        loader = unittest.TestLoader()\r\n        loader.testMethodPrefix = 'foo'\r\n        self.assertEqual(loader.loadTestsFromName('Foo', m), tests_1)\r\n        loader.testMethodPrefix = 'test'\r\n        self.assertEqual(loader.loadTestsFromName('Foo', m), tests_2)\r\n    def test_testMethodPrefix__loadTestsFromNames(self):\r\n        m = types.ModuleType('m')\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foo_bar(self): pass\r\n        m.Foo = Foo\r\n        tests_1 = unittest.TestSuite([unittest.TestSuite([Foo('foo_bar')])])\r\n        tests_2 = unittest.TestSuite([Foo('test_1'), Foo('test_2')])\r\n        tests_2 = unittest.TestSuite([tests_2])\r\n        loader = unittest.TestLoader()\r\n        loader.testMethodPrefix = 'foo'\r\n        self.assertEqual(loader.loadTestsFromNames(['Foo'], m), tests_1)\r\n        loader.testMethodPrefix = 'test'\r\n        self.assertEqual(loader.loadTestsFromNames(['Foo'], m), tests_2)\r\n    def test_testMethodPrefix__default_value(self):\r\n        loader = unittest.TestLoader()\r\n        self.assertEqual(loader.testMethodPrefix, 'test')\r\n    def test_sortTestMethodsUsing__loadTestsFromTestCase(self):\r\n        def reversed_cmp(x, y):\r\n            return -((x > y) - (x < y))\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n        loader = unittest.TestLoader()\r\n        loader.sortTestMethodsUsing = reversed_cmp\r\n        tests = loader.suiteClass([Foo('test_2'), Foo('test_1')])\r\n        self.assertEqual(loader.loadTestsFromTestCase(Foo), tests)\r\n    def test_sortTestMethodsUsing__loadTestsFromModule(self):\r\n        def reversed_cmp(x, y):\r\n            return -((x > y) - (x < y))\r\n        m = types.ModuleType('m')\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n        m.Foo = Foo\r\n        loader = unittest.TestLoader()\r\n        loader.sortTestMethodsUsing = reversed_cmp\r\n        tests = [loader.suiteClass([Foo('test_2'), Foo('test_1')])]\r\n        self.assertEqual(list(loader.loadTestsFromModule(m)), tests)\r\n    def test_sortTestMethodsUsing__loadTestsFromName(self):\r\n        def reversed_cmp(x, y):\r\n            return -((x > y) - (x < y))\r\n        m = types.ModuleType('m')\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n        m.Foo = Foo\r\n        loader = unittest.TestLoader()\r\n        loader.sortTestMethodsUsing = reversed_cmp\r\n        tests = loader.suiteClass([Foo('test_2'), Foo('test_1')])\r\n        self.assertEqual(loader.loadTestsFromName('Foo', m), tests)\r\n    def test_sortTestMethodsUsing__loadTestsFromNames(self):\r\n        def reversed_cmp(x, y):\r\n            return -((x > y) - (x < y))\r\n        m = types.ModuleType('m')\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n        m.Foo = Foo\r\n        loader = unittest.TestLoader()\r\n        loader.sortTestMethodsUsing = reversed_cmp\r\n        tests = [loader.suiteClass([Foo('test_2'), Foo('test_1')])]\r\n        self.assertEqual(list(loader.loadTestsFromNames(['Foo'], m)), tests)\r\n    def test_sortTestMethodsUsing__getTestCaseNames(self):\r\n        def reversed_cmp(x, y):\r\n            return -((x > y) - (x < y))\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n        loader = unittest.TestLoader()\r\n        loader.sortTestMethodsUsing = reversed_cmp\r\n        test_names = ['test_2', 'test_1']\r\n        self.assertEqual(loader.getTestCaseNames(Foo), test_names)\r\n    def test_sortTestMethodsUsing__default_value(self):\r\n        loader = unittest.TestLoader()\r\n        class Foo(unittest.TestCase):\r\n            def test_2(self): pass\r\n            def test_3(self): pass\r\n            def test_1(self): pass\r\n        test_names = ['test_2', 'test_3', 'test_1']\r\n        self.assertEqual(loader.getTestCaseNames(Foo), sorted(test_names))\r\n    def test_sortTestMethodsUsing__None(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n        loader = unittest.TestLoader()\r\n        loader.sortTestMethodsUsing = None\r\n        test_names = ['test_2', 'test_1']\r\n        self.assertEqual(set(loader.getTestCaseNames(Foo)), set(test_names))\r\n    def test_suiteClass__loadTestsFromTestCase(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foo_bar(self): pass\r\n        tests = [Foo('test_1'), Foo('test_2')]\r\n        loader = unittest.TestLoader()\r\n        loader.suiteClass = list\r\n        self.assertEqual(loader.loadTestsFromTestCase(Foo), tests)\r\n    def test_suiteClass__loadTestsFromModule(self):\r\n        m = types.ModuleType('m')\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foo_bar(self): pass\r\n        m.Foo = Foo\r\n        tests = [[Foo('test_1'), Foo('test_2')]]\r\n        loader = unittest.TestLoader()\r\n        loader.suiteClass = list\r\n        self.assertEqual(loader.loadTestsFromModule(m), tests)\r\n    def test_suiteClass__loadTestsFromName(self):\r\n        m = types.ModuleType('m')\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foo_bar(self): pass\r\n        m.Foo = Foo\r\n        tests = [Foo('test_1'), Foo('test_2')]\r\n        loader = unittest.TestLoader()\r\n        loader.suiteClass = list\r\n        self.assertEqual(loader.loadTestsFromName('Foo', m), tests)\r\n    def test_suiteClass__loadTestsFromNames(self):\r\n        m = types.ModuleType('m')\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n            def foo_bar(self): pass\r\n        m.Foo = Foo\r\n        tests = [[Foo('test_1'), Foo('test_2')]]\r\n        loader = unittest.TestLoader()\r\n        loader.suiteClass = list\r\n        self.assertEqual(loader.loadTestsFromNames(['Foo'], m), tests)\r\n    def test_suiteClass__default_value(self):\r\n        loader = unittest.TestLoader()\r\n        self.assertTrue(loader.suiteClass is unittest.TestSuite)\r\n", "/Lib/re_python.py": "r\"\"\"Support for regular expressions (RE).\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\nThis module exports the following functions:\n    match    Match a regular expression pattern to the beginning of a string.\n    search   Search a string for the presence of a pattern.\n    sub      Substitute occurrences of a pattern found in a string.\n    subn     Same as sub, but also return the number of substitutions made.\n    split    Split a string by the occurrences of a pattern.\n    findall  Find all occurrences of a pattern in a string.\n    finditer Return an iterator yielding a match object for each match.\n    compile  Compile a pattern into a RegexObject.\n    purge    Clear the regular expression cache.\n    escape   Backslash all non-alphanumerics in a string.\nSome of the functions in this module takes flags as optional parameters:\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\nThis module also defines an exception 'error'.\n\"\"\"\nimport sys\nimport sre_compile\nimport sre_parse\nimport functools\n__all__ = [ \"match\", \"search\", \"sub\", \"subn\", \"split\", \"findall\",\n    \"compile\", \"purge\", \"template\", \"escape\", \"A\", \"I\", \"L\", \"M\", \"S\", \"X\",\n    \"U\", \"ASCII\", \"IGNORECASE\", \"LOCALE\", \"MULTILINE\", \"DOTALL\", \"VERBOSE\",\n    \"UNICODE\", \"error\" ]\n__version__ = \"2.2.1\"\nA = ASCII = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\nI = IGNORECASE = sre_compile.SRE_FLAG_IGNORECASE # ignore case\nL = LOCALE = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\nU = UNICODE = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\nM = MULTILINE = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\nS = DOTALL = sre_compile.SRE_FLAG_DOTALL # make dot match newline\nX = VERBOSE = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\nT = TEMPLATE = sre_compile.SRE_FLAG_TEMPLATE # disable backtracking\nDEBUG = sre_compile.SRE_FLAG_DEBUG # dump pattern after compilation\nerror = sre_compile.error\ndef match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the match object and must return\n    a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).sub(repl, string, count)\ndef subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the match object and must\n    return a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).subn(repl, string, count)\ndef split(pattern, string, maxsplit=0, flags=0):\n    \"\"\"Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.\"\"\"\n    return _compile(pattern, flags).split(string, maxsplit)\ndef findall(pattern, string, flags=0):\n    \"\"\"Return a list of all non-overlapping matches in the string.\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).findall(string)\nif sys.hexversion >= 0x02020000:\n    __all__.append(\"finditer\")\n    def finditer(pattern, string, flags=0):\n        \"\"\"Return an iterator over all non-overlapping matches in the\n        string.  For each match, the iterator returns a match object.\n        Empty matches are included in the result.\"\"\"\n        return _compile(pattern, flags).finditer(string)\ndef compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a pattern object.\"\n    return _compile(pattern, flags)\ndef purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _cache_repl.clear()\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a pattern object\"\n    return _compile(pattern, flags|T)\n_alphanum_str = frozenset(\n    \"_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890\")\n_alphanum_bytes = frozenset(\n    \"_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890\")\ndef escape(pattern):\n    \"\"\"\n    Escape all the characters in pattern except ASCII letters, numbers and '_'.\n    \"\"\"\n    if isinstance(pattern, str):\n        alphanum = _alphanum_str\n        s = list(pattern)\n        for i, c in enumerate(pattern):\n            if c not in alphanum:\n                if c == \"\\000\":\n                    s[i] = \"\\\\000\"\n                else:\n                    s[i] = \"\\\\\" + c\n        return \"\".join(s)\n    else:\n        alphanum = _alphanum_bytes\n        s = []\n        esc = ord(b\"\\\\\")\n        for c in pattern:\n            if c in alphanum:\n                s.append(c)\n            else:\n                if c == 0:\n                    s.extend(b\"\\\\000\")\n                else:\n                    s.append(esc)\n                    s.append(c)\n        return bytes(s)\n_cache = {}\n_cache_repl = {}\n_pattern_type = type(sre_compile.compile(\"\", 0))\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    if isinstance(pattern, _pattern_type):\n        if flags:\n            raise ValueError(\n                \"Cannot process flags argument with a compiled pattern\")\n        return pattern\n    if not sre_compile.isstring(pattern):\n        raise TypeError(\"first argument must be string or compiled pattern\")\n    p = sre_compile.compile(pattern, flags)\n    if len(_cache) >= _MAXCACHE:\n        _cache.clear()\n    return p\ndef _compile_repl(repl, pattern):\n    p = sre_parse.parse_template(repl, pattern)\n    if len(_cache_repl) >= _MAXCACHE:\n        _cache_repl.clear()\n    return p\ndef _expand(pattern, match, template):\n    template = sre_parse.parse_template(template, pattern)\n    return sre_parse.expand_template(template, match)\ndef _subx(pattern, template):\n    template = _compile_repl(template, pattern)\n    if not template[0] and len(template[1]) == 1:\n        return template[1][0]\n    def filter(match, template=template):\n        return sre_parse.expand_template(template, match)\n    return filter\nimport copyreg\ndef _pickle(p):\n    return _compile, (p.pattern, p.flags)\ncopyreg.pickle(_pattern_type, _pickle, _compile)\nclass Scanner:\n    def __init__(self, lexicon, flags=0):\n        from sre_constants import BRANCH, SUBPATTERN\n        self.lexicon = lexicon\n        p = []\n        s = sre_parse.Pattern()\n        s.flags = flags\n        for phrase, action in lexicon:\n            p.append(sre_parse.SubPattern(s, [\n                (SUBPATTERN, (len(p)+1, sre_parse.parse(phrase, flags))),\n                ]))\n        s.groups = len(p)+1\n        p = sre_parse.SubPattern(s, [(BRANCH, (None, p))])\n        self.scanner = sre_compile.compile(p)\n    def scan(self, string):\n        result = []\n        append = result.append\n        match = self.scanner.scanner(string).match\n        i = 0\n        while 1:\n            m = match()\n            if not m:\n                break\n            j = m.end()\n            if i == j:\n                break\n            action = self.lexicon[m.lastindex-1][1]\n            if callable(action):\n                self.match = m\n                action = action(self, m.group())\n            if action is not None:\n                append(action)\n            i = j\n        return result, string[i:]\n", "/Lib/gc.py": "\"\"\"This module provides access to the garbage collector for reference cycles.\nenable() -- Enable automatic garbage collection.\ndisable() -- Disable automatic garbage collection.\nisenabled() -- Returns true if automatic collection is enabled.\ncollect() -- Do a full collection right now.\nget_count() -- Return the current collection counts.\nset_debug() -- Set debugging flags.\nget_debug() -- Get debugging flags.\nset_threshold() -- Set the collection thresholds.\nget_threshold() -- Return the current the collection thresholds.\nget_objects() -- Return a list of all objects tracked by the collector.\nis_tracked() -- Returns true if a given object is tracked.\nget_referrers() -- Return the list of objects that refer to an object.\nget_referents() -- Return the list of objects that an object refers to.\n\"\"\"\nDEBUG_COLLECTABLE = 2\nDEBUG_LEAK = 38\nDEBUG_SAVEALL = 32\nDEBUG_STATS = 1\nDEBUG_UNCOLLECTABLE = 4\nclass __loader__:\n    pass\ncallbacks = []\ndef collect(*args,**kw):\n    \"\"\"collect([generation]) -> n    \n    With no arguments, run a full collection.  The optional argument\n    may be an integer specifying which generation to collect.  A ValueError\n    is raised if the generation number is invalid.\n    The number of unreachable objects is returned.\n    \"\"\"\n    pass\ndef disable(*args,**kw):\n    \"\"\"disable() -> None    \n    Disable automatic garbage collection.\n    \"\"\"\n    pass\ndef enable(*args,**kw):\n    \"\"\"enable() -> None    \n    Enable automatic garbage collection.\n    \"\"\"\n    pass\ngarbage = []\ndef get_count(*args,**kw):\n    \"\"\"get_count() -> (count0, count1, count2)    \n    Return the current collection counts\n    \"\"\"\n    pass\ndef get_debug(*args,**kw):\n    \"\"\"get_debug() -> flags    \n    Get the garbage collection debugging flags.\n    \"\"\"\n    pass\ndef get_objects(*args,**kw):\n    \"\"\"get_objects() -> [...]    \n    Return a list of objects tracked by the collector (excluding the list\n    returned).\n    \"\"\"\n    pass\ndef get_referents(*args,**kw):\n    \"\"\"get_referents(*objs) -> list    Return the list of objects that are directly referred to by objs.\"\"\"\n    pass\ndef get_referrers(*args,**kw):\n    \"\"\"get_referrers(*objs) -> list    Return the list of objects that directly refer to any of objs.\"\"\"\n    pass\ndef get_threshold(*args,**kw):\n    \"\"\"get_threshold() -> (threshold0, threshold1, threshold2)    \n    Return the current collection thresholds\n    \"\"\"\n    pass\ndef is_tracked(*args,**kw):\n    \"\"\"is_tracked(obj) -> bool    \n    Returns true if the object is tracked by the garbage collector.\n    Simple atomic objects will return false.\n    \"\"\"\n    pass\ndef isenabled(*args,**kw):\n    \"\"\"isenabled() -> status    \n    Returns true if automatic garbage collection is enabled.\n    \"\"\"\n    pass\ndef set_debug(*args,**kw):\n    \"\"\"set_debug(flags) -> None    \n    Set the garbage collection debugging flags. Debugging information is\n    written to sys.stderr.\n    flags is an integer and can have the following bits turned on:\n      DEBUG_STATS - Print statistics during collection.\n      DEBUG_COLLECTABLE - Print collectable objects found.\n      DEBUG_UNCOLLECTABLE - Print unreachable but uncollectable objects found.\n      DEBUG_SAVEALL - Save objects to gc.garbage rather than freeing them.\n      DEBUG_LEAK - Debug leaking programs (everything but STATS).\n    \"\"\"\n    pass\ndef set_threshold(*args,**kw):\n    \"\"\"set_threshold(threshold0, [threshold1, threshold2]) -> None    \n    Sets the collection thresholds.  Setting threshold0 to zero disables\n    collection.\n    \"\"\"\n    pass\n", "/Lib/logging/handlers.py": "\"\"\"\r\nAdditional handlers for the logging package for Python. The core package is\r\nbased on PEP 282 and comments thereto in comp.lang.python.\r\nCopyright (C) 2001-2012 Vinay Sajip. All Rights Reserved.\r\nTo use, simply 'import logging.handlers' and log away!\r\n\"\"\"\r\nimport errno, logging, socket, os, pickle, struct, time, re\r\nfrom codecs import BOM_UTF8\r\nfrom stat import ST_DEV, ST_INO, ST_MTIME\r\nimport queue\r\ntry:\r\n    import threading\r\nexcept ImportError: #pragma: no cover\r\n    threading = None\r\nDEFAULT_TCP_LOGGING_PORT    = 9020\r\nDEFAULT_UDP_LOGGING_PORT    = 9021\r\nDEFAULT_HTTP_LOGGING_PORT   = 9022\r\nDEFAULT_SOAP_LOGGING_PORT   = 9023\r\nSYSLOG_UDP_PORT             = 514\r\nSYSLOG_TCP_PORT             = 514\r\n_MIDNIGHT = 24 * 60 * 60  # number of seconds in a day\r\nclass BaseRotatingHandler(logging.FileHandler):\r\n    \"\"\"\r\n    Base class for handlers that rotate log files at a certain point.\r\n    Not meant to be instantiated directly.  Instead, use RotatingFileHandler\r\n    or TimedRotatingFileHandler.\r\n    \"\"\"\r\n    def __init__(self, filename, mode, encoding=None, delay=False):\r\n        \"\"\"\r\n        Use the specified filename for streamed logging\r\n        \"\"\"\r\n        logging.FileHandler.__init__(self, filename, mode, encoding, delay)\r\n        self.mode = mode\r\n        self.encoding = encoding\r\n        self.namer = None\r\n        self.rotator = None\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        Output the record to the file, catering for rollover as described\r\n        in doRollover().\r\n        \"\"\"\r\n        try:\r\n            if self.shouldRollover(record):\r\n                self.doRollover()\r\n            logging.FileHandler.emit(self, record)\r\n        except (KeyboardInterrupt, SystemExit): #pragma: no cover\r\n            raise\r\n        except:\r\n            self.handleError(record)\r\n    def rotation_filename(self, default_name):\r\n        \"\"\"\r\n        Modify the filename of a log file when rotating.\r\n        This is provided so that a custom filename can be provided.\r\n        The default implementation calls the 'namer' attribute of the\r\n        handler, if it's callable, passing the default name to\r\n        it. If the attribute isn't callable (the default is None), the name\r\n        is returned unchanged.\r\n        :param default_name: The default name for the log file.\r\n        \"\"\"\r\n        if not callable(self.namer):\r\n            result = default_name\r\n        else:\r\n            result = self.namer(default_name)\r\n        return result\r\n    def rotate(self, source, dest):\r\n        \"\"\"\r\n        When rotating, rotate the current log.\r\n        The default implementation calls the 'rotator' attribute of the\r\n        handler, if it's callable, passing the source and dest arguments to\r\n        it. If the attribute isn't callable (the default is None), the source\r\n        is simply renamed to the destination.\r\n        :param source: The source filename. This is normally the base\r\n                       filename, e.g. 'test.log'\r\n        :param dest:   The destination filename. This is normally\r\n                       what the source is rotated to, e.g. 'test.log.1'.\r\n        \"\"\"\r\n        if not callable(self.rotator):\r\n            os.rename(source, dest)\r\n        else:\r\n            self.rotator(source, dest)\r\nclass RotatingFileHandler(BaseRotatingHandler):\r\n    \"\"\"\r\n    Handler for logging to a set of files, which switches from one file\r\n    to the next when the current file reaches a certain size.\r\n    \"\"\"\r\n    def __init__(self, filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False):\r\n        \"\"\"\r\n        Open the specified file and use it as the stream for logging.\r\n        By default, the file grows indefinitely. You can specify particular\r\n        values of maxBytes and backupCount to allow the file to rollover at\r\n        a predetermined size.\r\n        Rollover occurs whenever the current log file is nearly maxBytes in\r\n        length. If backupCount is >= 1, the system will successively create\r\n        new files with the same pathname as the base file, but with extensions\r\n        \".1\", \".2\" etc. appended to it. For example, with a backupCount of 5\r\n        and a base file name of \"app.log\", you would get \"app.log\",\r\n        \"app.log.1\", \"app.log.2\", ... through to \"app.log.5\". The file being\r\n        written to is always \"app.log\" - when it gets filled up, it is closed\r\n        and renamed to \"app.log.1\", and if files \"app.log.1\", \"app.log.2\" etc.\r\n        exist, then they are renamed to \"app.log.2\", \"app.log.3\" etc.\r\n        respectively.\r\n        If maxBytes is zero, rollover never occurs.\r\n        \"\"\"\r\n        if maxBytes > 0:\r\n            mode = 'a'\r\n        BaseRotatingHandler.__init__(self, filename, mode, encoding, delay)\r\n        self.maxBytes = maxBytes\r\n        self.backupCount = backupCount\r\n    def doRollover(self):\r\n        \"\"\"\r\n        Do a rollover, as described in __init__().\r\n        \"\"\"\r\n        if self.stream:\r\n            self.stream.close()\r\n            self.stream = None\r\n        if self.backupCount > 0:\r\n            for i in range(self.backupCount - 1, 0, -1):\r\n                sfn = self.rotation_filename(\"%s.%d\" % (self.baseFilename, i))\r\n                dfn = self.rotation_filename(\"%s.%d\" % (self.baseFilename,\r\n                                                        i + 1))\r\n                if os.path.exists(sfn):\r\n                    if os.path.exists(dfn):\r\n                        os.remove(dfn)\r\n                    os.rename(sfn, dfn)\r\n            dfn = self.rotation_filename(self.baseFilename + \".1\")\r\n            if os.path.exists(dfn):\r\n                os.remove(dfn)\r\n            self.rotate(self.baseFilename, dfn)\r\n        self.mode = 'w'\r\n        self.stream = self._open()\r\n    def shouldRollover(self, record):\r\n        \"\"\"\r\n        Determine if rollover should occur.\r\n        Basically, see if the supplied record would cause the file to exceed\r\n        the size limit we have.\r\n        \"\"\"\r\n        if self.stream is None:                 # delay was set...\r\n            self.stream = self._open()\r\n        if self.maxBytes > 0:                   # are we rolling over?\r\n            msg = \"%s\\n\" % self.format(record)\r\n            self.stream.seek(0, 2)  #due to non-posix-compliant Windows feature\r\n            if self.stream.tell() + len(msg) >= self.maxBytes:\r\n                return 1\r\n        return 0\r\nclass TimedRotatingFileHandler(BaseRotatingHandler):\r\n    \"\"\"\r\n    Handler for logging to a file, rotating the log file at certain timed\r\n    intervals.\r\n    If backupCount is > 0, when rollover is done, no more than backupCount\r\n    files are kept - the oldest ones are deleted.\r\n    \"\"\"\r\n    def __init__(self, filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False):\r\n        BaseRotatingHandler.__init__(self, filename, 'a', encoding, delay)\r\n        self.when = when.upper()\r\n        self.backupCount = backupCount\r\n        self.utc = utc\r\n        if self.when == 'S':\r\n            self.interval = 1 # one second\r\n            self.suffix = \"%Y-%m-%d_%H-%M-%S\"\r\n            self.extMatch = r\"^\\d{4}-\\d{2}-\\d{2}_\\d{2}-\\d{2}-\\d{2}(\\.\\w+)?$\"\r\n        elif self.when == 'M':\r\n            self.interval = 60 # one minute\r\n            self.suffix = \"%Y-%m-%d_%H-%M\"\r\n            self.extMatch = r\"^\\d{4}-\\d{2}-\\d{2}_\\d{2}-\\d{2}(\\.\\w+)?$\"\r\n        elif self.when == 'H':\r\n            self.interval = 60 * 60 # one hour\r\n            self.suffix = \"%Y-%m-%d_%H\"\r\n            self.extMatch = r\"^\\d{4}-\\d{2}-\\d{2}_\\d{2}(\\.\\w+)?$\"\r\n        elif self.when == 'D' or self.when == 'MIDNIGHT':\r\n            self.interval = 60 * 60 * 24 # one day\r\n            self.suffix = \"%Y-%m-%d\"\r\n            self.extMatch = r\"^\\d{4}-\\d{2}-\\d{2}(\\.\\w+)?$\"\r\n        elif self.when.startswith('W'):\r\n            self.interval = 60 * 60 * 24 * 7 # one week\r\n            if len(self.when) != 2:\r\n                raise ValueError(\"You must specify a day for weekly rollover from 0 to 6 (0 is Monday): %s\" % self.when)\r\n            if self.when[1] < '0' or self.when[1] > '6':\r\n                raise ValueError(\"Invalid day specified for weekly rollover: %s\" % self.when)\r\n            self.dayOfWeek = int(self.when[1])\r\n            self.suffix = \"%Y-%m-%d\"\r\n            self.extMatch = r\"^\\d{4}-\\d{2}-\\d{2}(\\.\\w+)?$\"\r\n        else:\r\n            raise ValueError(\"Invalid rollover interval specified: %s\" % self.when)\r\n        self.extMatch = re.compile(self.extMatch, re.ASCII)\r\n        self.interval = self.interval * interval # multiply by units requested\r\n        if os.path.exists(filename):\r\n            t = os.stat(filename)[ST_MTIME]\r\n        else:\r\n            t = int(time.time())\r\n        self.rolloverAt = self.computeRollover(t)\r\n    def computeRollover(self, currentTime):\r\n        \"\"\"\r\n        Work out the rollover time based on the specified time.\r\n        \"\"\"\r\n        result = currentTime + self.interval\r\n        if self.when == 'MIDNIGHT' or self.when.startswith('W'):\r\n            if self.utc:\r\n                t = time.gmtime(currentTime)\r\n            else:\r\n                t = time.localtime(currentTime)\r\n            currentHour = t[3]\r\n            currentMinute = t[4]\r\n            currentSecond = t[5]\r\n            r = _MIDNIGHT - ((currentHour * 60 + currentMinute) * 60 +\r\n                    currentSecond)\r\n            result = currentTime + r\r\n            if self.when.startswith('W'):\r\n                day = t[6] # 0 is Monday\r\n                if day != self.dayOfWeek:\r\n                    if day < self.dayOfWeek:\r\n                        daysToWait = self.dayOfWeek - day\r\n                    else:\r\n                        daysToWait = 6 - day + self.dayOfWeek + 1\r\n                    newRolloverAt = result + (daysToWait * (60 * 60 * 24))\r\n                    if not self.utc:\r\n                        dstNow = t[-1]\r\n                        dstAtRollover = time.localtime(newRolloverAt)[-1]\r\n                        if dstNow != dstAtRollover:\r\n                            if not dstNow:  # DST kicks in before next rollover, so we need to deduct an hour\r\n                                addend = -3600\r\n                            else:           # DST bows out before next rollover, so we need to add an hour\r\n                                addend = 3600\r\n                            newRolloverAt += addend\r\n                    result = newRolloverAt\r\n        return result\r\n    def shouldRollover(self, record):\r\n        \"\"\"\r\n        Determine if rollover should occur.\r\n        record is not used, as we are just comparing times, but it is needed so\r\n        the method signatures are the same\r\n        \"\"\"\r\n        t = int(time.time())\r\n        if t >= self.rolloverAt:\r\n            return 1\r\n        return 0\r\n    def getFilesToDelete(self):\r\n        \"\"\"\r\n        Determine the files to delete when rolling over.\r\n        More specific than the earlier method, which just used glob.glob().\r\n        \"\"\"\r\n        dirName, baseName = os.path.split(self.baseFilename)\r\n        fileNames = os.listdir(dirName)\r\n        result = []\r\n        prefix = baseName + \".\"\r\n        plen = len(prefix)\r\n        for fileName in fileNames:\r\n            if fileName[:plen] == prefix:\r\n                suffix = fileName[plen:]\r\n                if self.extMatch.match(suffix):\r\n                    result.append(os.path.join(dirName, fileName))\r\n        result.sort()\r\n        if len(result) < self.backupCount:\r\n            result = []\r\n        else:\r\n            result = result[:len(result) - self.backupCount]\r\n        return result\r\n    def doRollover(self):\r\n        \"\"\"\r\n        do a rollover; in this case, a date/time stamp is appended to the filename\r\n        when the rollover happens.  However, you want the file to be named for the\r\n        start of the interval, not the current time.  If there is a backup count,\r\n        then we have to get a list of matching filenames, sort them and remove\r\n        the one with the oldest suffix.\r\n        \"\"\"\r\n        if self.stream:\r\n            self.stream.close()\r\n            self.stream = None\r\n        currentTime = int(time.time())\r\n        dstNow = time.localtime(currentTime)[-1]\r\n        t = self.rolloverAt - self.interval\r\n        if self.utc:\r\n            timeTuple = time.gmtime(t)\r\n        else:\r\n            timeTuple = time.localtime(t)\r\n            dstThen = timeTuple[-1]\r\n            if dstNow != dstThen:\r\n                if dstNow:\r\n                    addend = 3600\r\n                else:\r\n                    addend = -3600\r\n                timeTuple = time.localtime(t + addend)\r\n        dfn = self.rotation_filename(self.baseFilename + \".\" +\r\n                                     time.strftime(self.suffix, timeTuple))\r\n        if os.path.exists(dfn):\r\n            os.remove(dfn)\r\n        self.rotate(self.baseFilename, dfn)\r\n        if self.backupCount > 0:\r\n            for s in self.getFilesToDelete():\r\n                os.remove(s)\r\n        self.mode = 'w'\r\n        self.stream = self._open()\r\n        newRolloverAt = self.computeRollover(currentTime)\r\n        while newRolloverAt <= currentTime:\r\n            newRolloverAt = newRolloverAt + self.interval\r\n        if (self.when == 'MIDNIGHT' or self.when.startswith('W')) and not self.utc:\r\n            dstAtRollover = time.localtime(newRolloverAt)[-1]\r\n            if dstNow != dstAtRollover:\r\n                if not dstNow:  # DST kicks in before next rollover, so we need to deduct an hour\r\n                    addend = -3600\r\n                else:           # DST bows out before next rollover, so we need to add an hour\r\n                    addend = 3600\r\n                newRolloverAt += addend\r\n        self.rolloverAt = newRolloverAt\r\nclass WatchedFileHandler(logging.FileHandler):\r\n    \"\"\"\r\n    A handler for logging to a file, which watches the file\r\n    to see if it has changed while in use. This can happen because of\r\n    usage of programs such as newsyslog and logrotate which perform\r\n    log file rotation. This handler, intended for use under Unix,\r\n    watches the file to see if it has changed since the last emit.\r\n    (A file has changed if its device or inode have changed.)\r\n    If it has changed, the old file stream is closed, and the file\r\n    opened to get a new stream.\r\n    This handler is not appropriate for use under Windows, because\r\n    under Windows open files cannot be moved or renamed - logging\r\n    opens the files with exclusive locks - and so there is no need\r\n    for such a handler. Furthermore, ST_INO is not supported under\r\n    Windows; stat always returns zero for this value.\r\n    This handler is based on a suggestion and patch by Chad J.\r\n    Schroeder.\r\n    \"\"\"\r\n    def __init__(self, filename, mode='a', encoding=None, delay=False):\r\n        logging.FileHandler.__init__(self, filename, mode, encoding, delay)\r\n        self.dev, self.ino = -1, -1\r\n        self._statstream()\r\n    def _statstream(self):\r\n        if self.stream:\r\n            sres = os.fstat(self.stream.fileno())\r\n            self.dev, self.ino = sres[ST_DEV], sres[ST_INO]\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        First check if the underlying file has changed, and if it\r\n        has, close the old stream and reopen the file to get the\r\n        current stream.\r\n        \"\"\"\r\n        try:\r\n            sres = os.stat(self.baseFilename)\r\n        except OSError as err:\r\n            if err.errno == errno.ENOENT:\r\n                sres = None\r\n            else:\r\n                raise\r\n        if not sres or sres[ST_DEV] != self.dev or sres[ST_INO] != self.ino:\r\n            if self.stream is not None:\r\n                self.stream.flush()\r\n                self.stream.close()\r\n                self.stream = self._open()\r\n                self._statstream()\r\n        logging.FileHandler.emit(self, record)\r\nclass SocketHandler(logging.Handler):\r\n    \"\"\"\r\n    A handler class which writes logging records, in pickle format, to\r\n    a streaming socket. The socket is kept open across logging calls.\r\n    If the peer resets it, an attempt is made to reconnect on the next call.\r\n    The pickle which is sent is that of the LogRecord's attribute dictionary\r\n    (__dict__), so that the receiver does not need to have the logging module\r\n    installed in order to process the logging event.\r\n    To unpickle the record at the receiving end into a LogRecord, use the\r\n    makeLogRecord function.\r\n    \"\"\"\r\n    def __init__(self, host, port):\r\n        \"\"\"\r\n        Initializes the handler with a specific host address and port.\r\n        When the attribute *closeOnError* is set to True - if a socket error\r\n        occurs, the socket is silently closed and then reopened on the next\r\n        logging call.\r\n        \"\"\"\r\n        logging.Handler.__init__(self)\r\n        self.host = host\r\n        self.port = port\r\n        self.sock = None\r\n        self.closeOnError = False\r\n        self.retryTime = None\r\n        self.retryStart = 1.0\r\n        self.retryMax = 30.0\r\n        self.retryFactor = 2.0\r\n    def makeSocket(self, timeout=1):\r\n        \"\"\"\r\n        A factory method which allows subclasses to define the precise\r\n        type of socket they want.\r\n        \"\"\"\r\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        if hasattr(s, 'settimeout'):\r\n            s.settimeout(timeout)\r\n        try:\r\n            s.connect((self.host, self.port))\r\n            return s\r\n        except socket.error:\r\n            s.close()\r\n            raise\r\n    def createSocket(self):\r\n        \"\"\"\r\n        Try to create a socket, using an exponential backoff with\r\n        a max retry time. Thanks to Robert Olson for the original patch\r\n        (SF #815911) which has been slightly refactored.\r\n        \"\"\"\r\n        now = time.time()\r\n        if self.retryTime is None:\r\n            attempt = True\r\n        else:\r\n            attempt = (now >= self.retryTime)\r\n        if attempt:\r\n            try:\r\n                self.sock = self.makeSocket()\r\n                self.retryTime = None # next time, no delay before trying\r\n            except socket.error:\r\n                if self.retryTime is None:\r\n                    self.retryPeriod = self.retryStart\r\n                else:\r\n                    self.retryPeriod = self.retryPeriod * self.retryFactor\r\n                    if self.retryPeriod > self.retryMax:\r\n                        self.retryPeriod = self.retryMax\r\n                self.retryTime = now + self.retryPeriod\r\n    def send(self, s):\r\n        \"\"\"\r\n        Send a pickled string to the socket.\r\n        This function allows for partial sends which can happen when the\r\n        network is busy.\r\n        \"\"\"\r\n        if self.sock is None:\r\n            self.createSocket()\r\n        if self.sock:\r\n            try:\r\n                if hasattr(self.sock, \"sendall\"):\r\n                    self.sock.sendall(s)\r\n                else: #pragma: no cover\r\n                    sentsofar = 0\r\n                    left = len(s)\r\n                    while left > 0:\r\n                        sent = self.sock.send(s[sentsofar:])\r\n                        sentsofar = sentsofar + sent\r\n                        left = left - sent\r\n            except socket.error: #pragma: no cover\r\n                self.sock.close()\r\n                self.sock = None  # so we can call createSocket next time\r\n    def makePickle(self, record):\r\n        \"\"\"\r\n        Pickles the record in binary format with a length prefix, and\r\n        returns it ready for transmission across the socket.\r\n        \"\"\"\r\n        ei = record.exc_info\r\n        if ei:\r\n            dummy = self.format(record)\r\n        d = dict(record.__dict__)\r\n        d['msg'] = record.getMessage()\r\n        d['args'] = None\r\n        d['exc_info'] = None\r\n        s = pickle.dumps(d, 1)\r\n        slen = struct.pack(\">L\", len(s))\r\n        return slen + s\r\n    def handleError(self, record):\r\n        \"\"\"\r\n        Handle an error during logging.\r\n        An error has occurred during logging. Most likely cause -\r\n        connection lost. Close the socket so that we can retry on the\r\n        next event.\r\n        \"\"\"\r\n        if self.closeOnError and self.sock:\r\n            self.sock.close()\r\n            self.sock = None        #try to reconnect next time\r\n        else:\r\n            logging.Handler.handleError(self, record)\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        Pickles the record and writes it to the socket in binary format.\r\n        If there is an error with the socket, silently drop the packet.\r\n        If there was a problem with the socket, re-establishes the\r\n        socket.\r\n        \"\"\"\r\n        try:\r\n            s = self.makePickle(record)\r\n            self.send(s)\r\n        except (KeyboardInterrupt, SystemExit): #pragma: no cover\r\n            raise\r\n        except:\r\n            self.handleError(record)\r\n    def close(self):\r\n        \"\"\"\r\n        Closes the socket.\r\n        \"\"\"\r\n        self.acquire()\r\n        try:\r\n            if self.sock:\r\n                self.sock.close()\r\n                self.sock = None\r\n            logging.Handler.close(self)\r\n        finally:\r\n            self.release()\r\nclass DatagramHandler(SocketHandler):\r\n    \"\"\"\r\n    A handler class which writes logging records, in pickle format, to\r\n    a datagram socket.  The pickle which is sent is that of the LogRecord's\r\n    attribute dictionary (__dict__), so that the receiver does not need to\r\n    have the logging module installed in order to process the logging event.\r\n    To unpickle the record at the receiving end into a LogRecord, use the\r\n    makeLogRecord function.\r\n    \"\"\"\r\n    def __init__(self, host, port):\r\n        \"\"\"\r\n        Initializes the handler with a specific host address and port.\r\n        \"\"\"\r\n        SocketHandler.__init__(self, host, port)\r\n        self.closeOnError = False\r\n    def makeSocket(self):\r\n        \"\"\"\r\n        The factory method of SocketHandler is here overridden to create\r\n        a UDP socket (SOCK_DGRAM).\r\n        \"\"\"\r\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n        return s\r\n    def send(self, s):\r\n        \"\"\"\r\n        Send a pickled string to a socket.\r\n        This function no longer allows for partial sends which can happen\r\n        when the network is busy - UDP does not guarantee delivery and\r\n        can deliver packets out of sequence.\r\n        \"\"\"\r\n        if self.sock is None:\r\n            self.createSocket()\r\n        self.sock.sendto(s, (self.host, self.port))\r\nclass SysLogHandler(logging.Handler):\r\n    \"\"\"\r\n    A handler class which sends formatted logging records to a syslog\r\n    server. Based on Sam Rushing's syslog module:\r\n    http://www.nightmare.com/squirl/python-ext/misc/syslog.py\r\n    Contributed by Nicolas Untz (after which minor refactoring changes\r\n    have been made).\r\n    \"\"\"\r\n    LOG_EMERG     = 0       #  system is unusable\r\n    LOG_ALERT     = 1       #  action must be taken immediately\r\n    LOG_CRIT      = 2       #  critical conditions\r\n    LOG_ERR       = 3       #  error conditions\r\n    LOG_WARNING   = 4       #  warning conditions\r\n    LOG_NOTICE    = 5       #  normal but significant condition\r\n    LOG_INFO      = 6       #  informational\r\n    LOG_DEBUG     = 7       #  debug-level messages\r\n    LOG_KERN      = 0       #  kernel messages\r\n    LOG_USER      = 1       #  random user-level messages\r\n    LOG_MAIL      = 2       #  mail system\r\n    LOG_DAEMON    = 3       #  system daemons\r\n    LOG_AUTH      = 4       #  security/authorization messages\r\n    LOG_SYSLOG    = 5       #  messages generated internally by syslogd\r\n    LOG_LPR       = 6       #  line printer subsystem\r\n    LOG_NEWS      = 7       #  network news subsystem\r\n    LOG_UUCP      = 8       #  UUCP subsystem\r\n    LOG_CRON      = 9       #  clock daemon\r\n    LOG_AUTHPRIV  = 10      #  security/authorization messages (private)\r\n    LOG_FTP       = 11      #  FTP daemon\r\n    LOG_LOCAL0    = 16      #  reserved for local use\r\n    LOG_LOCAL1    = 17      #  reserved for local use\r\n    LOG_LOCAL2    = 18      #  reserved for local use\r\n    LOG_LOCAL3    = 19      #  reserved for local use\r\n    LOG_LOCAL4    = 20      #  reserved for local use\r\n    LOG_LOCAL5    = 21      #  reserved for local use\r\n    LOG_LOCAL6    = 22      #  reserved for local use\r\n    LOG_LOCAL7    = 23      #  reserved for local use\r\n    priority_names = {\r\n        \"alert\":    LOG_ALERT,\r\n        \"crit\":     LOG_CRIT,\r\n        \"critical\": LOG_CRIT,\r\n        \"debug\":    LOG_DEBUG,\r\n        \"emerg\":    LOG_EMERG,\r\n        \"err\":      LOG_ERR,\r\n        \"error\":    LOG_ERR,        #  DEPRECATED\r\n        \"info\":     LOG_INFO,\r\n        \"notice\":   LOG_NOTICE,\r\n        \"panic\":    LOG_EMERG,      #  DEPRECATED\r\n        \"warn\":     LOG_WARNING,    #  DEPRECATED\r\n        \"warning\":  LOG_WARNING,\r\n        }\r\n    facility_names = {\r\n        \"auth\":     LOG_AUTH,\r\n        \"authpriv\": LOG_AUTHPRIV,\r\n        \"cron\":     LOG_CRON,\r\n        \"daemon\":   LOG_DAEMON,\r\n        \"ftp\":      LOG_FTP,\r\n        \"kern\":     LOG_KERN,\r\n        \"lpr\":      LOG_LPR,\r\n        \"mail\":     LOG_MAIL,\r\n        \"news\":     LOG_NEWS,\r\n        \"security\": LOG_AUTH,       #  DEPRECATED\r\n        \"syslog\":   LOG_SYSLOG,\r\n        \"user\":     LOG_USER,\r\n        \"uucp\":     LOG_UUCP,\r\n        \"local0\":   LOG_LOCAL0,\r\n        \"local1\":   LOG_LOCAL1,\r\n        \"local2\":   LOG_LOCAL2,\r\n        \"local3\":   LOG_LOCAL3,\r\n        \"local4\":   LOG_LOCAL4,\r\n        \"local5\":   LOG_LOCAL5,\r\n        \"local6\":   LOG_LOCAL6,\r\n        \"local7\":   LOG_LOCAL7,\r\n        }\r\n    priority_map = {\r\n        \"DEBUG\" : \"debug\",\r\n        \"INFO\" : \"info\",\r\n        \"WARNING\" : \"warning\",\r\n        \"ERROR\" : \"error\",\r\n        \"CRITICAL\" : \"critical\"\r\n    }\r\n    def __init__(self, address=('localhost', SYSLOG_UDP_PORT),\r\n                 facility=LOG_USER, socktype=socket.SOCK_DGRAM):\r\n        \"\"\"\r\n        Initialize a handler.\r\n        If address is specified as a string, a UNIX socket is used. To log to a\r\n        local syslogd, \"SysLogHandler(address=\"/dev/log\")\" can be used.\r\n        If facility is not specified, LOG_USER is used.\r\n        \"\"\"\r\n        logging.Handler.__init__(self)\r\n        self.address = address\r\n        self.facility = facility\r\n        self.socktype = socktype\r\n        if isinstance(address, str):\r\n            self.unixsocket = True\r\n            self._connect_unixsocket(address)\r\n        else:\r\n            self.unixsocket = False\r\n            self.socket = socket.socket(socket.AF_INET, socktype)\r\n            if socktype == socket.SOCK_STREAM:\r\n                self.socket.connect(address)\r\n        self.formatter = None\r\n    def _connect_unixsocket(self, address):\r\n        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)\r\n        try:\r\n            self.socket.connect(address)\r\n        except socket.error:\r\n            self.socket.close()\r\n            self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\r\n            try:\r\n                self.socket.connect(address)\r\n            except socket.error:\r\n                self.socket.close()\r\n                raise\r\n    def encodePriority(self, facility, priority):\r\n        \"\"\"\r\n        Encode the facility and priority. You can pass in strings or\r\n        integers - if strings are passed, the facility_names and\r\n        priority_names mapping dictionaries are used to convert them to\r\n        integers.\r\n        \"\"\"\r\n        if isinstance(facility, str):\r\n            facility = self.facility_names[facility]\r\n        if isinstance(priority, str):\r\n            priority = self.priority_names[priority]\r\n        return (facility << 3) | priority\r\n    def close (self):\r\n        \"\"\"\r\n        Closes the socket.\r\n        \"\"\"\r\n        self.acquire()\r\n        try:\r\n            self.socket.close()\r\n            logging.Handler.close(self)\r\n        finally:\r\n            self.release()\r\n    def mapPriority(self, levelName):\r\n        \"\"\"\r\n        Map a logging level name to a key in the priority_names map.\r\n        This is useful in two scenarios: when custom levels are being\r\n        used, and in the case where you can't do a straightforward\r\n        mapping by lowercasing the logging level name because of locale-\r\n        specific issues (see SF #1524081).\r\n        \"\"\"\r\n        return self.priority_map.get(levelName, \"warning\")\r\n    ident = ''          # prepended to all messages\r\n    append_nul = True   # some old syslog daemons expect a NUL terminator\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        The record is formatted, and then sent to the syslog server. If\r\n        exception information is present, it is NOT sent to the server.\r\n        \"\"\"\r\n        msg = self.format(record)\r\n        if self.ident:\r\n            msg = self.ident + msg\r\n        if self.append_nul:\r\n            msg += '\\000'\r\n        \"\"\"\r\n        We need to convert record level to lowercase, maybe this will\r\n        change in the future.\r\n        \"\"\"\r\n        prio = '<%d>' % self.encodePriority(self.facility,\r\n                                            self.mapPriority(record.levelname))\r\n        prio = prio.encode('utf-8')\r\n        msg = msg.encode('utf-8')\r\n        msg = prio + msg\r\n        try:\r\n            if self.unixsocket:\r\n                try:\r\n                    self.socket.send(msg)\r\n                except socket.error:\r\n                    self._connect_unixsocket(self.address)\r\n                    self.socket.send(msg)\r\n            elif self.socktype == socket.SOCK_DGRAM:\r\n                self.socket.sendto(msg, self.address)\r\n            else:\r\n                self.socket.sendall(msg)\r\n        except (KeyboardInterrupt, SystemExit): #pragma: no cover\r\n            raise\r\n        except:\r\n            self.handleError(record)\r\nclass SMTPHandler(logging.Handler):\r\n    \"\"\"\r\n    A handler class which sends an SMTP email for each logging event.\r\n    \"\"\"\r\n    def __init__(self, mailhost, fromaddr, toaddrs, subject,\r\n                 credentials=None, secure=None, timeout=5.0):\r\n        \"\"\"\r\n        Initialize the handler.\r\n        Initialize the instance with the from and to addresses and subject\r\n        line of the email. To specify a non-standard SMTP port, use the\r\n        (host, port) tuple format for the mailhost argument. To specify\r\n        authentication credentials, supply a (username, password) tuple\r\n        for the credentials argument. To specify the use of a secure\r\n        protocol (TLS), pass in a tuple for the secure argument. This will\r\n        only be used when authentication credentials are supplied. The tuple\r\n        will be either an empty tuple, or a single-value tuple with the name\r\n        of a keyfile, or a 2-value tuple with the names of the keyfile and\r\n        certificate file. (This tuple is passed to the `starttls` method).\r\n        A timeout in seconds can be specified for the SMTP connection (the\r\n        default is one second).\r\n        \"\"\"\r\n        logging.Handler.__init__(self)\r\n        if isinstance(mailhost, tuple):\r\n            self.mailhost, self.mailport = mailhost\r\n        else:\r\n            self.mailhost, self.mailport = mailhost, None\r\n        if isinstance(credentials, tuple):\r\n            self.username, self.password = credentials\r\n        else:\r\n            self.username = None\r\n        self.fromaddr = fromaddr\r\n        if isinstance(toaddrs, str):\r\n            toaddrs = [toaddrs]\r\n        self.toaddrs = toaddrs\r\n        self.subject = subject\r\n        self.secure = secure\r\n        self.timeout = timeout\r\n    def getSubject(self, record):\r\n        \"\"\"\r\n        Determine the subject for the email.\r\n        If you want to specify a subject line which is record-dependent,\r\n        override this method.\r\n        \"\"\"\r\n        return self.subject\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        Format the record and send it to the specified addressees.\r\n        \"\"\"\r\n        try:\r\n            import smtplib\r\n            from email.utils import formatdate\r\n            port = self.mailport\r\n            if not port:\r\n                port = smtplib.SMTP_PORT\r\n            smtp = smtplib.SMTP(self.mailhost, port, timeout=self.timeout)\r\n            msg = self.format(record)\r\n            msg = \"From: %s\\r\\nTo: %s\\r\\nSubject: %s\\r\\nDate: %s\\r\\n\\r\\n%s\" % (\r\n                            self.fromaddr,\r\n                            \",\".join(self.toaddrs),\r\n                            self.getSubject(record),\r\n                            formatdate(), msg)\r\n            if self.username:\r\n                if self.secure is not None:\r\n                    smtp.ehlo()\r\n                    smtp.starttls(*self.secure)\r\n                    smtp.ehlo()\r\n                smtp.login(self.username, self.password)\r\n            smtp.sendmail(self.fromaddr, self.toaddrs, msg)\r\n            smtp.quit()\r\n        except (KeyboardInterrupt, SystemExit): #pragma: no cover\r\n            raise\r\n        except:\r\n            self.handleError(record)\r\nclass NTEventLogHandler(logging.Handler):\r\n    \"\"\"\r\n    A handler class which sends events to the NT Event Log. Adds a\r\n    registry entry for the specified application name. If no dllname is\r\n    provided, win32service.pyd (which contains some basic message\r\n    placeholders) is used. Note that use of these placeholders will make\r\n    your event logs big, as the entire message source is held in the log.\r\n    If you want slimmer logs, you have to pass in the name of your own DLL\r\n    which contains the message definitions you want to use in the event log.\r\n    \"\"\"\r\n    def __init__(self, appname, dllname=None, logtype=\"Application\"):\r\n        logging.Handler.__init__(self)\r\n        try:\r\n            import win32evtlogutil, win32evtlog\r\n            self.appname = appname\r\n            self._welu = win32evtlogutil\r\n            if not dllname:\r\n                dllname = os.path.split(self._welu.__file__)\r\n                dllname = os.path.split(dllname[0])\r\n                dllname = os.path.join(dllname[0], r'win32service.pyd')\r\n            self.dllname = dllname\r\n            self.logtype = logtype\r\n            self._welu.AddSourceToRegistry(appname, dllname, logtype)\r\n            self.deftype = win32evtlog.EVENTLOG_ERROR_TYPE\r\n            self.typemap = {\r\n                logging.DEBUG   : win32evtlog.EVENTLOG_INFORMATION_TYPE,\r\n                logging.INFO    : win32evtlog.EVENTLOG_INFORMATION_TYPE,\r\n                logging.WARNING : win32evtlog.EVENTLOG_WARNING_TYPE,\r\n                logging.ERROR   : win32evtlog.EVENTLOG_ERROR_TYPE,\r\n                logging.CRITICAL: win32evtlog.EVENTLOG_ERROR_TYPE,\r\n         }\r\n        except ImportError:\r\n            print(\"The Python Win32 extensions for NT (service, event \"\\\r\n                        \"logging) appear not to be available.\")\r\n            self._welu = None\r\n    def getMessageID(self, record):\r\n        \"\"\"\r\n        Return the message ID for the event record. If you are using your\r\n        own messages, you could do this by having the msg passed to the\r\n        logger being an ID rather than a formatting string. Then, in here,\r\n        you could use a dictionary lookup to get the message ID. This\r\n        version returns 1, which is the base message ID in win32service.pyd.\r\n        \"\"\"\r\n        return 1\r\n    def getEventCategory(self, record):\r\n        \"\"\"\r\n        Return the event category for the record.\r\n        Override this if you want to specify your own categories. This version\r\n        returns 0.\r\n        \"\"\"\r\n        return 0\r\n    def getEventType(self, record):\r\n        \"\"\"\r\n        Return the event type for the record.\r\n        Override this if you want to specify your own types. This version does\r\n        a mapping using the handler's typemap attribute, which is set up in\r\n        __init__() to a dictionary which contains mappings for DEBUG, INFO,\r\n        WARNING, ERROR and CRITICAL. If you are using your own levels you will\r\n        either need to override this method or place a suitable dictionary in\r\n        the handler's typemap attribute.\r\n        \"\"\"\r\n        return self.typemap.get(record.levelno, self.deftype)\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        Determine the message ID, event category and event type. Then\r\n        log the message in the NT event log.\r\n        \"\"\"\r\n        if self._welu:\r\n            try:\r\n                id = self.getMessageID(record)\r\n                cat = self.getEventCategory(record)\r\n                type = self.getEventType(record)\r\n                msg = self.format(record)\r\n                self._welu.ReportEvent(self.appname, id, cat, type, [msg])\r\n            except (KeyboardInterrupt, SystemExit): #pragma: no cover\r\n                raise\r\n            except:\r\n                self.handleError(record)\r\n    def close(self):\r\n        \"\"\"\r\n        Clean up this handler.\r\n        You can remove the application name from the registry as a\r\n        source of event log entries. However, if you do this, you will\r\n        not be able to see the events as you intended in the Event Log\r\n        Viewer - it needs to be able to access the registry to get the\r\n        DLL name.\r\n        \"\"\"\r\n        logging.Handler.close(self)\r\nclass HTTPHandler(logging.Handler):\r\n    \"\"\"\r\n    A class which sends records to a Web server, using either GET or\r\n    POST semantics.\r\n    \"\"\"\r\n    def __init__(self, host, url, method=\"GET\", secure=False, credentials=None):\r\n        \"\"\"\r\n        Initialize the instance with the host, the request URL, and the method\r\n        (\"GET\" or \"POST\")\r\n        \"\"\"\r\n        logging.Handler.__init__(self)\r\n        method = method.upper()\r\n        if method not in [\"GET\", \"POST\"]:\r\n            raise ValueError(\"method must be GET or POST\")\r\n        self.host = host\r\n        self.url = url\r\n        self.method = method\r\n        self.secure = secure\r\n        self.credentials = credentials\r\n    def mapLogRecord(self, record):\r\n        \"\"\"\r\n        Default implementation of mapping the log record into a dict\r\n        that is sent as the CGI data. Overwrite in your class.\r\n        Contributed by Franz Glasner.\r\n        \"\"\"\r\n        return record.__dict__\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        Send the record to the Web server as a percent-encoded dictionary\r\n        \"\"\"\r\n        try:\r\n            import http.client, urllib.parse\r\n            host = self.host\r\n            if self.secure:\r\n                h = http.client.HTTPSConnection(host)\r\n            else:\r\n                h = http.client.HTTPConnection(host)\r\n            url = self.url\r\n            data = urllib.parse.urlencode(self.mapLogRecord(record))\r\n            if self.method == \"GET\":\r\n                if (url.find('?') >= 0):\r\n                    sep = '&'\r\n                else:\r\n                    sep = '?'\r\n                url = url + \"%c%s\" % (sep, data)\r\n            h.putrequest(self.method, url)\r\n            i = host.find(\":\")\r\n            if i >= 0:\r\n                host = host[:i]\r\n            h.putheader(\"Host\", host)\r\n            if self.method == \"POST\":\r\n                h.putheader(\"Content-type\",\r\n                            \"application/x-www-form-urlencoded\")\r\n                h.putheader(\"Content-length\", str(len(data)))\r\n            if self.credentials:\r\n                import base64\r\n                s = ('u%s:%s' % self.credentials).encode('utf-8')\r\n                s = 'Basic ' + base64.b64encode(s).strip()\r\n                h.putheader('Authorization', s)\r\n            h.endheaders()\r\n            if self.method == \"POST\":\r\n                h.send(data.encode('utf-8'))\r\n            h.getresponse()    #can't do anything with the result\r\n        except (KeyboardInterrupt, SystemExit): #pragma: no cover\r\n            raise\r\n        except:\r\n            self.handleError(record)\r\nclass BufferingHandler(logging.Handler):\r\n    \"\"\"\r\n  A handler class which buffers logging records in memory. Whenever each\r\n  record is added to the buffer, a check is made to see if the buffer should\r\n  be flushed. If it should, then flush() is expected to do what's needed.\r\n    \"\"\"\r\n    def __init__(self, capacity):\r\n        \"\"\"\r\n        Initialize the handler with the buffer size.\r\n        \"\"\"\r\n        logging.Handler.__init__(self)\r\n        self.capacity = capacity\r\n        self.buffer = []\r\n    def shouldFlush(self, record):\r\n        \"\"\"\r\n        Should the handler flush its buffer?\r\n        Returns true if the buffer is up to capacity. This method can be\r\n        overridden to implement custom flushing strategies.\r\n        \"\"\"\r\n        return (len(self.buffer) >= self.capacity)\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        Append the record. If shouldFlush() tells us to, call flush() to process\r\n        the buffer.\r\n        \"\"\"\r\n        self.buffer.append(record)\r\n        if self.shouldFlush(record):\r\n            self.flush()\r\n    def flush(self):\r\n        \"\"\"\r\n        Override to implement custom flushing behaviour.\r\n        This version just zaps the buffer to empty.\r\n        \"\"\"\r\n        self.acquire()\r\n        try:\r\n            self.buffer = []\r\n        finally:\r\n            self.release()\r\n    def close(self):\r\n        \"\"\"\r\n        Close the handler.\r\n        This version just flushes and chains to the parent class' close().\r\n        \"\"\"\r\n        self.flush()\r\n        logging.Handler.close(self)\r\nclass MemoryHandler(BufferingHandler):\r\n    \"\"\"\r\n    A handler class which buffers logging records in memory, periodically\r\n    flushing them to a target handler. Flushing occurs whenever the buffer\r\n    is full, or when an event of a certain severity or greater is seen.\r\n    \"\"\"\r\n    def __init__(self, capacity, flushLevel=logging.ERROR, target=None):\r\n        \"\"\"\r\n        Initialize the handler with the buffer size, the level at which\r\n        flushing should occur and an optional target.\r\n        Note that without a target being set either here or via setTarget(),\r\n        a MemoryHandler is no use to anyone!\r\n        \"\"\"\r\n        BufferingHandler.__init__(self, capacity)\r\n        self.flushLevel = flushLevel\r\n        self.target = target\r\n    def shouldFlush(self, record):\r\n        \"\"\"\r\n        Check for buffer full or a record at the flushLevel or higher.\r\n        \"\"\"\r\n        return (len(self.buffer) >= self.capacity) or \\\r\n                (record.levelno >= self.flushLevel)\r\n    def setTarget(self, target):\r\n        \"\"\"\r\n        Set the target handler for this handler.\r\n        \"\"\"\r\n        self.target = target\r\n    def flush(self):\r\n        \"\"\"\r\n        For a MemoryHandler, flushing means just sending the buffered\r\n        records to the target, if there is one. Override if you want\r\n        different behaviour.\r\n        The record buffer is also cleared by this operation.\r\n        \"\"\"\r\n        self.acquire()\r\n        try:\r\n            if self.target:\r\n                for record in self.buffer:\r\n                    self.target.handle(record)\r\n                self.buffer = []\r\n        finally:\r\n            self.release()\r\n    def close(self):\r\n        \"\"\"\r\n        Flush, set the target to None and lose the buffer.\r\n        \"\"\"\r\n        self.flush()\r\n        self.acquire()\r\n        try:\r\n            self.target = None\r\n            BufferingHandler.close(self)\r\n        finally:\r\n            self.release()\r\nclass QueueHandler(logging.Handler):\r\n    \"\"\"\r\n    This handler sends events to a queue. Typically, it would be used together\r\n    with a multiprocessing Queue to centralise logging to file in one process\r\n    (in a multi-process application), so as to avoid file write contention\r\n    between processes.\r\n    This code is new in Python 3.2, but this class can be copy pasted into\r\n    user code for use with earlier Python versions.\r\n    \"\"\"\r\n    def __init__(self, queue):\r\n        \"\"\"\r\n        Initialise an instance, using the passed queue.\r\n        \"\"\"\r\n        logging.Handler.__init__(self)\r\n        self.queue = queue\r\n    def enqueue(self, record):\r\n        \"\"\"\r\n        Enqueue a record.\r\n        The base implementation uses put_nowait. You may want to override\r\n        this method if you want to use blocking, timeouts or custom queue\r\n        implementations.\r\n        \"\"\"\r\n        self.queue.put_nowait(record)\r\n    def prepare(self, record):\r\n        \"\"\"\r\n        Prepares a record for queuing. The object returned by this method is\r\n        enqueued.\r\n        The base implementation formats the record to merge the message\r\n        and arguments, and removes unpickleable items from the record\r\n        in-place.\r\n        You might want to override this method if you want to convert\r\n        the record to a dict or JSON string, or send a modified copy\r\n        of the record while leaving the original intact.\r\n        \"\"\"\r\n        self.format(record)\r\n        record.msg = record.message\r\n        record.args = None\r\n        record.exc_info = None\r\n        return record\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        Writes the LogRecord to the queue, preparing it for pickling first.\r\n        \"\"\"\r\n        try:\r\n            self.enqueue(self.prepare(record))\r\n        except (KeyboardInterrupt, SystemExit): #pragma: no cover\r\n            raise\r\n        except:\r\n            self.handleError(record)\r\nif threading:\r\n    class QueueListener(object):\r\n        \"\"\"\r\n        This class implements an internal threaded listener which watches for\r\n        LogRecords being added to a queue, removes them and passes them to a\r\n        list of handlers for processing.\r\n        \"\"\"\r\n        _sentinel = None\r\n        def __init__(self, queue, *handlers):\r\n            \"\"\"\r\n            Initialise an instance with the specified queue and\r\n            handlers.\r\n            \"\"\"\r\n            self.queue = queue\r\n            self.handlers = handlers\r\n            self._stop = threading.Event()\r\n            self._thread = None\r\n        def dequeue(self, block):\r\n            \"\"\"\r\n            Dequeue a record and return it, optionally blocking.\r\n            The base implementation uses get. You may want to override this method\r\n            if you want to use timeouts or work with custom queue implementations.\r\n            \"\"\"\r\n            return self.queue.get(block)\r\n        def start(self):\r\n            \"\"\"\r\n            Start the listener.\r\n            This starts up a background thread to monitor the queue for\r\n            LogRecords to process.\r\n            \"\"\"\r\n            self._thread = t = threading.Thread(target=self._monitor)\r\n            t.setDaemon(True)\r\n            t.start()\r\n        def prepare(self , record):\r\n            \"\"\"\r\n            Prepare a record for handling.\r\n            This method just returns the passed-in record. You may want to\r\n            override this method if you need to do any custom marshalling or\r\n            manipulation of the record before passing it to the handlers.\r\n            \"\"\"\r\n            return record\r\n        def handle(self, record):\r\n            \"\"\"\r\n            Handle a record.\r\n            This just loops through the handlers offering them the record\r\n            to handle.\r\n            \"\"\"\r\n            record = self.prepare(record)\r\n            for handler in self.handlers:\r\n                handler.handle(record)\r\n        def _monitor(self):\r\n            \"\"\"\r\n            Monitor the queue for records, and ask the handler\r\n            to deal with them.\r\n            This method runs on a separate, internal thread.\r\n            The thread will terminate if it sees a sentinel object in the queue.\r\n            \"\"\"\r\n            q = self.queue\r\n            has_task_done = hasattr(q, 'task_done')\r\n            while not self._stop.isSet():\r\n                try:\r\n                    record = self.dequeue(True)\r\n                    if record is self._sentinel:\r\n                        break\r\n                    self.handle(record)\r\n                    if has_task_done:\r\n                        q.task_done()\r\n                except queue.Empty:\r\n                    pass\r\n            while True:\r\n                try:\r\n                    record = self.dequeue(False)\r\n                    if record is self._sentinel:\r\n                        break\r\n                    self.handle(record)\r\n                    if has_task_done:\r\n                        q.task_done()\r\n                except queue.Empty:\r\n                    break\r\n        def enqueue_sentinel(self):\r\n            \"\"\"\r\n            This is used to enqueue the sentinel record.\r\n            The base implementation uses put_nowait. You may want to override this\r\n            method if you want to use timeouts or work with custom queue\r\n            implementations.\r\n            \"\"\"\r\n            self.queue.put_nowait(self._sentinel)\r\n        def stop(self):\r\n            \"\"\"\r\n            Stop the listener.\r\n            This asks the thread to terminate, and then waits for it to do so.\r\n            Note that if you don't call this before your application exits, there\r\n            may be some records still left on the queue, which won't be processed.\r\n            \"\"\"\r\n            self._stop.set()\r\n            self.enqueue_sentinel()\r\n            self._thread.join()\r\n            self._thread = None\r\n", "/Lib/platform.py": "\"\"\" This module tries to retrieve as much platform-identifying data as\n    possible. It makes this information available via function APIs.\n    If called from the command line, it prints the platform\n    information concatenated as single string to stdout. The output\n    format is useable as part of a filename.\n\"\"\"\n__copyright__ = \"\"\"\n    Copyright (c) 1999-2000, Marc-Andre Lemburg; mailto:mal@lemburg.com\n    Copyright (c) 2000-2010, eGenix.com Software GmbH; mailto:info@egenix.com\n    Permission to use, copy, modify, and distribute this software and its\n    documentation for any purpose and without fee or royalty is hereby granted,\n    provided that the above copyright notice appear in all copies and that\n    both that copyright notice and this permission notice appear in\n    supporting documentation or portions thereof, including modifications,\n    that you make.\n    EGENIX.COM SOFTWARE GMBH DISCLAIMS ALL WARRANTIES WITH REGARD TO\n    THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\n    FITNESS, IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,\n    INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING\n    FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\n    NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\n    WITH THE USE OR PERFORMANCE OF THIS SOFTWARE !\n\"\"\"\n__version__ = '1.0.7'\nimport collections\nimport sys, os, re, subprocess\ntry:\n    DEV_NULL = os.devnull\nexcept AttributeError:\n    if sys.platform in ('dos','win32','win16','os2'):\n        DEV_NULL = 'NUL'\n    else:\n        DEV_NULL = '/dev/null'\n_libc_search = re.compile(b'(__libc_init)'\n                          b'|'\n                          b'(GLIBC_([0-9.]+))'\n                          b'|'\n                          br'(libc(_\\w+)?\\.so(?:\\.(\\d[0-9.]*))?)', re.ASCII)\ndef libc_ver(executable=sys.executable,lib='',version='',\n             chunksize=16384):\n    \"\"\" Tries to determine the libc version that the file executable\n        (which defaults to the Python interpreter) is linked against.\n        Returns a tuple of strings (lib,version) which default to the\n        given parameters in case the lookup fails.\n        Note that the function has intimate knowledge of how different\n        libc versions add symbols to the executable and thus is probably\n        only useable for executables compiled using gcc.\n        The file is read and scanned in chunks of chunksize bytes.\n    \"\"\"\n    if hasattr(os.path, 'realpath'):\n        executable = os.path.realpath(executable)\n    f = open(executable,'rb')\n    binary = f.read(chunksize)\n    pos = 0\n    while 1:\n        if b'libc' in binary or b'GLIBC' in binary:\n            m = _libc_search.search(binary,pos)\n        else:\n            m = None\n        if not m:\n            binary = f.read(chunksize)\n            if not binary:\n                break\n            pos = 0\n            continue\n        libcinit,glibc,glibcversion,so,threads,soversion = [\n            s.decode('latin1') if s is not None else s\n            for s in m.groups()]\n        if libcinit and not lib:\n            lib = 'libc'\n        elif glibc:\n            if lib != 'glibc':\n                lib = 'glibc'\n                version = glibcversion\n            elif glibcversion > version:\n                version = glibcversion\n        elif so:\n            if lib != 'glibc':\n                lib = 'libc'\n                if soversion and soversion > version:\n                    version = soversion\n                if threads and version[-len(threads):] != threads:\n                    version = version + threads\n        pos = m.end()\n    f.close()\n    return lib,version\ndef _dist_try_harder(distname,version,id):\n    \"\"\" Tries some special tricks to get the distribution\n        information in case the default method fails.\n        Currently supports older SuSE Linux, Caldera OpenLinux and\n        Slackware Linux distributions.\n    \"\"\"\n    if os.path.exists('/var/adm/inst-log/info'):\n        distname = 'SuSE'\n        for line in open('/var/adm/inst-log/info'):\n            tv = line.split()\n            if len(tv) == 2:\n                tag,value = tv\n            else:\n                continue\n            if tag == 'MIN_DIST_VERSION':\n                version = value.strip()\n            elif tag == 'DIST_IDENT':\n                values = value.split('-')\n                id = values[2]\n        return distname,version,id\n    if os.path.exists('/etc/.installed'):\n        for line in open('/etc/.installed'):\n            pkg = line.split('-')\n            if len(pkg) >= 2 and pkg[0] == 'OpenLinux':\n                return 'OpenLinux',pkg[1],id\n    if os.path.isdir('/usr/lib/setup'):\n        verfiles = os.listdir('/usr/lib/setup')\n        for n in range(len(verfiles)-1, -1, -1):\n            if verfiles[n][:14] != 'slack-version-':\n                del verfiles[n]\n        if verfiles:\n            verfiles.sort()\n            distname = 'slackware'\n            version = verfiles[-1][14:]\n            return distname,version,id\n    return distname,version,id\n_release_filename = re.compile(r'(\\w+)[-_](release|version)', re.ASCII)\n_lsb_release_version = re.compile(r'(.+)'\n                                   ' release '\n                                   '([\\d.]+)'\n                                   '[^(]*(?:\\((.+)\\))?', re.ASCII)\n_release_version = re.compile(r'([^0-9]+)'\n                               '(?: release )?'\n                               '([\\d.]+)'\n                               '[^(]*(?:\\((.+)\\))?', re.ASCII)\n_supported_dists = (\n    'SuSE', 'debian', 'fedora', 'redhat', 'centos',\n    'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo',\n    'UnitedLinux', 'turbolinux', 'arch', 'mageia', 'Ubuntu')\ndef _parse_release_file(firstline):\n    return '', '', ''\n_distributor_id_file_re = re.compile(\"(?:DISTRIB_ID\\s*=)\\s*(.*)\", re.I)\n_release_file_re = re.compile(\"(?:DISTRIB_RELEASE\\s*=)\\s*(.*)\", re.I)\n_codename_file_re = re.compile(\"(?:DISTRIB_CODENAME\\s*=)\\s*(.*)\", re.I)\ndef linux_distribution(distname='', version='', id='',\n                       supported_dists=_supported_dists,\n                       full_distribution_name=1):\n    \"\"\" Tries to determine the name of the Linux OS distribution name.\n        The function first looks for a distribution release file in\n        /etc and then reverts to _dist_try_harder() in case no\n        suitable files are found.\n        supported_dists may be given to define the set of Linux\n        distributions to look for. It defaults to a list of currently\n        supported Linux distributions identified by their release file\n        name.\n        If full_distribution_name is true (default), the full\n        distribution read from the OS is returned. Otherwise the short\n        name taken from supported_dists is used.\n        Returns a tuple (distname,version,id) which default to the\n        args given as parameters.\n    \"\"\"\n    return distname, version, id\ndef dist(distname='',version='',id='',\n         supported_dists=_supported_dists):\n    \"\"\" Tries to determine the name of the Linux OS distribution name.\n        The function first looks for a distribution release file in\n        /etc and then reverts to _dist_try_harder() in case no\n        suitable files are found.\n        Returns a tuple (distname,version,id) which default to the\n        args given as parameters.\n    \"\"\"\n    return linux_distribution(distname, version, id,\n                              supported_dists=supported_dists,\n                              full_distribution_name=0)\ndef popen(cmd, mode='r', bufsize=-1):\n    \"\"\" Portable popen() interface.\n    \"\"\"\n    import warnings\n    warnings.warn('use os.popen instead', DeprecationWarning, stacklevel=2)\n    return os.popen(cmd, mode, bufsize)\ndef _norm_version(version, build=''):\n    \"\"\" Normalize the version and build strings and return a single\n        version string using the format major.minor.build (or patchlevel).\n    \"\"\"\n    return '%s.%s.0' % (sys.version[0], sys.version[1])\n_ver_output = re.compile(r'(?:([\\w ]+) ([\\w.]+) '\n                         '.*'\n                         '\\[.* ([\\d.]+)\\])')\ndef _syscmd_ver(system='', release='', version='',\n               supported_platforms=('win32','win16','dos','os2')):\n    \"\"\" Tries to figure out the OS version used and returns\n        a tuple (system,release,version).\n        It uses the \"ver\" shell command for this which is known\n        to exists on Windows, DOS and OS/2. XXX Others too ?\n        In case this fails, the given parameters are used as\n        defaults.\n    \"\"\"\n    if sys.platform not in supported_platforms:\n        return system,release,version\n    for cmd in ('ver','command /c ver','cmd /c ver'):\n        try:\n            pipe = popen(cmd)\n            info = pipe.read()\n            if pipe.close():\n                raise os.error('command failed')\n        except os.error as why:\n            continue\n        except IOError as why:\n            continue\n        else:\n            break\n    else:\n        return system,release,version\n    info = info.strip()\n    m = _ver_output.match(info)\n    if m is not None:\n        system,release,version = m.groups()\n        if release[-1] == '.':\n            release = release[:-1]\n        if version[-1] == '.':\n            version = version[:-1]\n        version = _norm_version(version)\n    return system,release,version\ndef _win32_getvalue(key,name,default=''):\n    \"\"\" Read a value for name from the registry key.\n        In case this fails, default is returned.\n    \"\"\"\n    try:\n        from win32api import RegQueryValueEx\n    except ImportError:\n        import winreg\n        RegQueryValueEx = winreg.QueryValueEx\n    try:\n        return RegQueryValueEx(key,name)\n    except:\n        return default\ndef win32_ver(release='',version='',csd='',ptype=''):\n    \"\"\" Get additional version information from the Windows Registry\n        and return a tuple (version,csd,ptype) referring to version\n        number, CSD level (service pack), and OS type (multi/single\n        processor).\n        As a hint: ptype returns 'Uniprocessor Free' on single\n        processor NT machines and 'Multiprocessor Free' on multi\n        processor machines. The 'Free' refers to the OS version being\n        free of debugging code. It could also state 'Checked' which\n        means the OS version uses debugging code, i.e. code that\n        checks arguments, ranges, etc. (Thomas Heller).\n        Note: this function works best with Mark Hammond's win32\n        package installed, but also on Python 2.3 and later. It\n        obviously only runs on Win32 compatible platforms.\n    \"\"\"\n    try:\n        import win32api\n        from win32api import RegQueryValueEx, RegOpenKeyEx, \\\n             RegCloseKey, GetVersionEx\n        from win32con import HKEY_LOCAL_MACHINE, VER_PLATFORM_WIN32_NT, \\\n             VER_PLATFORM_WIN32_WINDOWS, VER_NT_WORKSTATION\n    except ImportError:\n        try:\n            sys.getwindowsversion\n        except AttributeError:\n            return release,version,csd,ptype\n        else:\n            import winreg\n            GetVersionEx = sys.getwindowsversion\n            RegQueryValueEx = winreg.QueryValueEx\n            RegOpenKeyEx = winreg.OpenKeyEx\n            RegCloseKey = winreg.CloseKey\n            HKEY_LOCAL_MACHINE = winreg.HKEY_LOCAL_MACHINE\n            VER_PLATFORM_WIN32_WINDOWS = 1\n            VER_PLATFORM_WIN32_NT = 2\n            VER_NT_WORKSTATION = 1\n            VER_NT_SERVER = 3\n            REG_SZ = 1\n    winver = GetVersionEx()\n    maj,min,buildno,plat,csd = winver\n    version = '%i.%i.%i' % (maj,min,buildno & 0xFFFF)\n    if hasattr(winver, \"service_pack\"):\n        if winver.service_pack != \"\":\n            csd = 'SP%s' % winver.service_pack_major\n    else:\n        if csd[:13] == 'Service Pack ':\n            csd = 'SP' + csd[13:]\n    if plat == VER_PLATFORM_WIN32_WINDOWS:\n        regkey = 'SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion'\n        if maj == 4:\n            if min == 0:\n                release = '95'\n            elif min == 10:\n                release = '98'\n            elif min == 90:\n                release = 'Me'\n            else:\n                release = 'postMe'\n        elif maj == 5:\n            release = '2000'\n    elif plat == VER_PLATFORM_WIN32_NT:\n        regkey = 'SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion'\n        if maj <= 4:\n            release = 'NT'\n        elif maj == 5:\n            if min == 0:\n                release = '2000'\n            elif min == 1:\n                release = 'XP'\n            elif min == 2:\n                release = '2003Server'\n            else:\n                release = 'post2003'\n        elif maj == 6:\n            if hasattr(winver, \"product_type\"):\n                product_type = winver.product_type\n            else:\n                product_type = VER_NT_WORKSTATION\n                try:\n                    key = RegOpenKeyEx(HKEY_LOCAL_MACHINE, regkey)\n                    name, type = RegQueryValueEx(key, \"ProductName\")\n                    if type == REG_SZ and name.find(\"Server\") != -1:\n                        product_type = VER_NT_SERVER\n                except WindowsError:\n                    pass\n            if min == 0:\n                if product_type == VER_NT_WORKSTATION:\n                    release = 'Vista'\n                else:\n                    release = '2008Server'\n            elif min == 1:\n                if product_type == VER_NT_WORKSTATION:\n                    release = '7'\n                else:\n                    release = '2008ServerR2'\n            elif min == 2:\n                if product_type == VER_NT_WORKSTATION:\n                    release = '8'\n                else:\n                    release = '2012Server'\n            else:\n                release = 'post2012Server'\n    else:\n        if not release:\n            release = '%i.%i' % (maj,min)\n        return release,version,csd,ptype\n    try:\n        keyCurVer = RegOpenKeyEx(HKEY_LOCAL_MACHINE, regkey)\n        RegQueryValueEx(keyCurVer, 'SystemRoot')\n    except:\n        return release,version,csd,ptype\n    build = _win32_getvalue(keyCurVer,\n                            'CurrentBuildNumber',\n                            ('',1))[0]\n    ptype = _win32_getvalue(keyCurVer,\n                           'CurrentType',\n                           (ptype,1))[0]\n    version = _norm_version(version,build)\n    RegCloseKey(keyCurVer)\n    return release,version,csd,ptype\ndef _mac_ver_lookup(selectors,default=None):\n    from _gestalt import gestalt\n    l = []\n    append = l.append\n    for selector in selectors:\n        try:\n            append(gestalt(selector))\n        except (RuntimeError, OSError):\n            append(default)\n    return l\ndef _bcd2str(bcd):\n    return hex(bcd)[2:]\ndef _mac_ver_gestalt():\n    \"\"\"\n        Thanks to Mark R. Levinson for mailing documentation links and\n        code examples for this function. Documentation for the\n        gestalt() API is available online at:\n           http://www.rgaros.nl/gestalt/\n    \"\"\"\n    try:\n        import _gestalt\n    except ImportError:\n        return None\n    sysv, sysa = _mac_ver_lookup(('sysv','sysa'))\n    if sysv:\n        major = (sysv & 0xFF00) >> 8\n        minor = (sysv & 0x00F0) >> 4\n        patch = (sysv & 0x000F)\n        if (major, minor) >= (10, 4):\n            major,minor,patch = _mac_ver_lookup(('sys1','sys2','sys3'))\n            release = '%i.%i.%i' %(major, minor, patch)\n        else:\n            release = '%s.%i.%i' % (_bcd2str(major),minor,patch)\n    if sysa:\n        machine = {0x1: '68k',\n                   0x2: 'PowerPC',\n                   0xa: 'i386'}.get(sysa,'')\n    versioninfo=('', '', '')\n    return release,versioninfo,machine\ndef _mac_ver_xml():\n    fn = '/System/Library/CoreServices/SystemVersion.plist'\n    if not os.path.exists(fn):\n        return None\n    try:\n        import plistlib\n    except ImportError:\n        return None\n    pl = plistlib.readPlist(fn)\n    release = pl['ProductVersion']\n    versioninfo=('', '', '')\n    machine = os.uname().machine\n    if machine in ('ppc', 'Power Macintosh'):\n        machine = 'PowerPC'\n    return release,versioninfo,machine\ndef mac_ver(release='',versioninfo=('','',''),machine=''):\n    \"\"\" Get MacOS version information and return it as tuple (release,\n        versioninfo, machine) with versioninfo being a tuple (version,\n        dev_stage, non_release_version).\n        Entries which cannot be determined are set to the paramter values\n        which default to ''. All tuple entries are strings.\n    \"\"\"\n    info = _mac_ver_xml()\n    if info is not None:\n        return info\n    info = _mac_ver_gestalt()\n    if info is not None:\n        return info\n    return release,versioninfo,machine\ndef _java_getprop(name,default):\n    from java.lang import System\n    try:\n        value = System.getProperty(name)\n        if value is None:\n            return default\n        return value\n    except AttributeError:\n        return default\ndef java_ver(release='',vendor='',vminfo=('','',''),osinfo=('','','')):\n    \"\"\" Version interface for Jython.\n        Returns a tuple (release,vendor,vminfo,osinfo) with vminfo being\n        a tuple (vm_name,vm_release,vm_vendor) and osinfo being a\n        tuple (os_name,os_version,os_arch).\n        Values which cannot be determined are set to the defaults\n        given as parameters (which all default to '').\n    \"\"\"\n    try:\n        import java.lang\n    except ImportError:\n        return release,vendor,vminfo,osinfo\n    vendor = _java_getprop('java.vendor', vendor)\n    release = _java_getprop('java.version', release)\n    vm_name, vm_release, vm_vendor = vminfo\n    vm_name = _java_getprop('java.vm.name', vm_name)\n    vm_vendor = _java_getprop('java.vm.vendor', vm_vendor)\n    vm_release = _java_getprop('java.vm.version', vm_release)\n    vminfo = vm_name, vm_release, vm_vendor\n    os_name, os_version, os_arch = osinfo\n    os_arch = _java_getprop('java.os.arch', os_arch)\n    os_name = _java_getprop('java.os.name', os_name)\n    os_version = _java_getprop('java.os.version', os_version)\n    osinfo = os_name, os_version, os_arch\n    return release, vendor, vminfo, osinfo\ndef system_alias(system,release,version):\n    \"\"\" Returns (system,release,version) aliased to common\n        marketing names used for some systems.\n        It also does some reordering of the information in some cases\n        where it would otherwise cause confusion.\n    \"\"\"\n    if system == 'Rhapsody':\n        return 'MacOS X Server',system+release,version\n    elif system == 'SunOS':\n        if release < '5':\n            return system,release,version\n        l = release.split('.')\n        if l:\n            try:\n                major = int(l[0])\n            except ValueError:\n                pass\n            else:\n                major = major - 3\n                l[0] = str(major)\n                release = '.'.join(l)\n        if release < '6':\n            system = 'Solaris'\n        else:\n            system = 'Solaris'\n    elif system == 'IRIX64':\n        system = 'IRIX'\n        if version:\n            version = version + ' (64bit)'\n        else:\n            version = '64bit'\n    elif system in ('win32','win16'):\n        system = 'Windows'\n    return system,release,version\ndef _platform(*args):\n    \"\"\" Helper to format the platform string in a filename\n        compatible format e.g. \"system-version-machine\".\n    \"\"\"\n    platform = '-'.join(x.strip() for x in filter(len, args))\n    platform = platform.replace(' ','_')\n    platform = platform.replace('/','-')\n    platform = platform.replace('\\\\','-')\n    platform = platform.replace(':','-')\n    platform = platform.replace(';','-')\n    platform = platform.replace('\"','-')\n    platform = platform.replace('(','-')\n    platform = platform.replace(')','-')\n    platform = platform.replace('unknown','')\n    while 1:\n        cleaned = platform.replace('--','-')\n        if cleaned == platform:\n            break\n        platform = cleaned\n    while platform[-1] == '-':\n        platform = platform[:-1]\n    return platform\ndef _node(default=''):\n    \"\"\" Helper to determine the node name of this machine.\n    \"\"\"\n    try:\n        import socket\n    except ImportError:\n        return default\n    try:\n        return socket.gethostname()\n    except socket.error:\n        return default\ndef _follow_symlinks(filepath):\n    \"\"\" In case filepath is a symlink, follow it until a\n        real file is reached.\n    \"\"\"\n    filepath = os.path.abspath(filepath)\n    while os.path.islink(filepath):\n        filepath = os.path.normpath(\n            os.path.join(os.path.dirname(filepath),os.readlink(filepath)))\n    return filepath\ndef _syscmd_uname(option,default=''):\n    \"\"\" Interface to the system's uname command.\n    \"\"\"\n    if sys.platform in ('dos','win32','win16','os2'):\n        return default\n    try:\n        f = os.popen('uname %s 2> %s' % (option, DEV_NULL))\n    except (AttributeError,os.error):\n        return default\n    output = f.read().strip()\n    rc = f.close()\n    if not output or rc:\n        return default\n    else:\n        return output\ndef _syscmd_file(target,default=''):\n    \"\"\" Interface to the system's file command.\n        The function uses the -b option of the file command to have it\n        omit the filename in its output. Follow the symlinks. It returns\n        default in case the command should fail.\n    \"\"\"\n    if sys.platform in ('dos','win32','win16','os2'):\n        return default\n    target = _follow_symlinks(target)\n    try:\n        proc = subprocess.Popen(['file', target],\n                stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    except (AttributeError,os.error):\n        return default\n    output = proc.communicate()[0].decode('latin-1')\n    rc = proc.wait()\n    if not output or rc:\n        return default\n    else:\n        return output\n_default_architecture = {\n    'win32': ('','WindowsPE'),\n    'win16': ('','Windows'),\n    'dos': ('','MSDOS'),\n}\ndef architecture(executable=sys.executable,bits='',linkage=''):\n    \"\"\" Queries the given executable (defaults to the Python interpreter\n        binary) for various architecture information.\n        Returns a tuple (bits,linkage) which contains information about\n        the bit architecture and the linkage format used for the\n        executable. Both values are returned as strings.\n        Values that cannot be determined are returned as given by the\n        parameter presets. If bits is given as '', the sizeof(pointer)\n        (or sizeof(long) on Python version < 1.5.2) is used as\n        indicator for the supported pointer size.\n        The function relies on the system's \"file\" command to do the\n        actual work. This is available on most if not all Unix\n        platforms. On some non-Unix platforms where the \"file\" command\n        does not exist and the executable is set to the Python interpreter\n        binary defaults from _default_architecture are used.\n    \"\"\"\n    if not bits:\n        import struct\n        try:\n            size = struct.calcsize('P')\n        except struct.error:\n            size = struct.calcsize('l')\n        bits = str(size*8) + 'bit'\n    if executable:\n        fileout = _syscmd_file(executable, '')\n    else:\n        fileout = ''\n    if not fileout and \\\n       executable == sys.executable:\n        if sys.platform in _default_architecture:\n            b,l = _default_architecture[sys.platform]\n            if b:\n                bits = b\n            if l:\n                linkage = l\n        return bits,linkage\n    if 'executable' not in fileout:\n        return bits,linkage\n    if '32-bit' in fileout:\n        bits = '32bit'\n    elif 'N32' in fileout:\n        bits = 'n32bit'\n    elif '64-bit' in fileout:\n        bits = '64bit'\n    if 'ELF' in fileout:\n        linkage = 'ELF'\n    elif 'PE' in fileout:\n        if 'Windows' in fileout:\n            linkage = 'WindowsPE'\n        else:\n            linkage = 'PE'\n    elif 'COFF' in fileout:\n        linkage = 'COFF'\n    elif 'MS-DOS' in fileout:\n        linkage = 'MSDOS'\n    else:\n        pass\n    return bits,linkage\nuname_result = collections.namedtuple(\"uname_result\",\n                    \"system node release version machine processor\")\n_uname_cache = None\ndef uname():\n    \"\"\" Fairly portable uname interface. Returns a tuple\n        of strings (system,node,release,version,machine,processor)\n        identifying the underlying platform.\n        Note that unlike the os.uname function this also returns\n        possible processor information as an additional tuple entry.\n        Entries which cannot be determined are set to ''.\n    \"\"\"\n    global _uname_cache\n    no_os_uname = 0\n    if _uname_cache is not None:\n        return _uname_cache\n    processor = ''\n    try:\n        system,node,release,version,machine = os.uname()\n    except AttributeError:\n        no_os_uname = 1\n    if no_os_uname or not list(filter(None, (system, node, release, version, machine))):\n        if no_os_uname:\n            system = sys.platform\n            release = ''\n            version = ''\n            node = _node()\n            machine = ''\n        use_syscmd_ver = 1\n        if system == 'win32':\n            release,version,csd,ptype = win32_ver()\n            if release and version:\n                use_syscmd_ver = 0\n            if not machine:\n                if \"PROCESSOR_ARCHITEW6432\" in os.environ:\n                    machine = os.environ.get(\"PROCESSOR_ARCHITEW6432\", '')\n                else:\n                    machine = os.environ.get('PROCESSOR_ARCHITECTURE', '')\n            if not processor:\n                processor = os.environ.get('PROCESSOR_IDENTIFIER', machine)\n        if use_syscmd_ver:\n            system,release,version = _syscmd_ver(system)\n            if system == 'Microsoft Windows':\n                system = 'Windows'\n            elif system == 'Microsoft' and release == 'Windows':\n                system = 'Windows'\n                if '6.0' == version[:3]:\n                    release = 'Vista'\n                else:\n                    release = ''\n        if system in ('win32','win16'):\n            if not version:\n                if system == 'win32':\n                    version = '32bit'\n                else:\n                    version = '16bit'\n            system = 'Windows'\n        elif system[:4] == 'java':\n            release,vendor,vminfo,osinfo = java_ver()\n            system = 'Java'\n            version = ', '.join(vminfo)\n            if not version:\n                version = vendor\n    if system == 'OpenVMS':\n        if not release or release == '0':\n            release = version\n            version = ''\n        try:\n            import vms_lib\n        except ImportError:\n            pass\n        else:\n            csid, cpu_number = vms_lib.getsyi('SYI$_CPU',0)\n            if (cpu_number >= 128):\n                processor = 'Alpha'\n            else:\n                processor = 'VAX'\n    if not processor:\n        processor = _syscmd_uname('-p','')\n    if system == 'unknown':\n        system = ''\n    if node == 'unknown':\n        node = ''\n    if release == 'unknown':\n        release = ''\n    if version == 'unknown':\n        version = ''\n    if machine == 'unknown':\n        machine = ''\n    if processor == 'unknown':\n        processor = ''\n    if system == 'Microsoft' and release == 'Windows':\n        system = 'Windows'\n        release = 'Vista'\n    _uname_cache = uname_result(system,node,release,version,machine,processor)\n    return _uname_cache\ndef system():\n    \"\"\" Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.\n        An empty string is returned if the value cannot be determined.\n    \"\"\"\n    return uname().system\ndef node():\n    \"\"\" Returns the computer's network name (which may not be fully\n        qualified)\n        An empty string is returned if the value cannot be determined.\n    \"\"\"\n    return uname().node\ndef release():\n    \"\"\" Returns the system's release, e.g. '2.2.0' or 'NT'\n        An empty string is returned if the value cannot be determined.\n    \"\"\"\n    return uname().release\ndef version():\n    \"\"\" Returns the system's release version, e.g. '#3 on degas'\n        An empty string is returned if the value cannot be determined.\n    \"\"\"\n    return uname().version\ndef machine():\n    \"\"\" Returns the machine type, e.g. 'i386'\n        An empty string is returned if the value cannot be determined.\n    \"\"\"\n    return uname().machine\ndef processor():\n    \"\"\" Returns the (true) processor name, e.g. 'amdk6'\n        An empty string is returned if the value cannot be\n        determined. Note that many platforms do not provide this\n        information or simply return the same value as for machine(),\n        e.g.  NetBSD does this.\n    \"\"\"\n    return uname().processor\n_sys_version_parser = re.compile(\n    r'([\\w.+]+)\\s*'\n    '\\(#?([^,]+),\\s*([\\w ]+),\\s*([\\w :]+)\\)\\s*'\n    '\\[([^\\]]+)\\]?', re.ASCII)\n_ironpython_sys_version_parser = re.compile(\n    r'IronPython\\s*'\n    '([\\d\\.]+)'\n    '(?: \\(([\\d\\.]+)\\))?'\n    ' on (.NET [\\d\\.]+)', re.ASCII)\n_pypy_sys_version_parser = re.compile(\n    r'([\\w.+]+)\\s*'\n    '\\(#?([^,]+),\\s*([\\w ]+),\\s*([\\w :]+)\\)\\s*'\n    '\\[PyPy [^\\]]+\\]?')\n_sys_version_cache = {}\ndef _sys_version(sys_version=None):\n    \"\"\" Returns a parsed version of Python's sys.version as tuple\n        (name, version, branch, revision, buildno, builddate, compiler)\n        referring to the Python implementation name, version, branch,\n        revision, build number, build date/time as string and the compiler\n        identification string.\n        Note that unlike the Python sys.version, the returned value\n        for the Python version will always include the patchlevel (it\n        defaults to '.0').\n        The function returns empty strings for tuple entries that\n        cannot be determined.\n        sys_version may be given to parse an alternative version\n        string, e.g. if the version was read from a different Python\n        interpreter.\n    \"\"\"\n    if sys_version is None:\n        sys_version = sys.version\n    _builddate=sys_version[2][:8]\n    _version='%s.%s' % (sys_version[0], sys_version[1])\n    return (\"Brython\", _version, '', '', 'default', _builddate, '')\ndef python_implementation():\n    \"\"\" Returns a string identifying the Python implementation.\n        Currently, the following implementations are identified:\n          'CPython' (C implementation of Python),\n          'IronPython' (.NET implementation of Python),\n          'Jython' (Java implementation of Python),\n          'PyPy' (Python implementation of Python).\n    \"\"\"\n    return \"Brython\"  #_sys_version()[0]\ndef python_version():\n    \"\"\" Returns the Python version as string 'major.minor.patchlevel'\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n    \"\"\"\n    return '%s.%s' % (sys.version[0], sys.version[1])\ndef python_version_tuple():\n    \"\"\" Returns the Python version as tuple (major, minor, patchlevel)\n        of strings.\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n    \"\"\"\n    return tuple(sys.version[0], sys.version[1], 0)\ndef python_branch():\n    \"\"\" Returns a string identifying the Python implementation\n        branch.\n        For CPython this is the Subversion branch from which the\n        Python binary was built.\n        If not available, an empty string is returned.\n    \"\"\"\n    return ''\ndef python_revision():\n    \"\"\" Returns a string identifying the Python implementation\n        revision.\n        For CPython this is the Subversion revision from which the\n        Python binary was built.\n        If not available, an empty string is returned.\n    \"\"\"\n    return ''\ndef python_build():\n    \"\"\" Returns a tuple (buildno, builddate) stating the Python\n        build number and date as strings.\n    \"\"\"\n    return tuple('', '')\ndef python_compiler():\n    \"\"\" Returns a string identifying the compiler used for compiling\n        Python.\n    \"\"\"\n    return ''\n_platform_cache = {}\ndef platform(aliased=0, terse=0):\n    \"\"\" Returns a single string identifying the underlying platform\n        with as much useful information as possible (but no more :).\n        The output is intended to be human readable rather than\n        machine parseable. It may look different on different\n        platforms and this is intended.\n        If \"aliased\" is true, the function will use aliases for\n        various platforms that report system names which differ from\n        their common names, e.g. SunOS will be reported as\n        Solaris. The system_alias() function is used to implement\n        this.\n        Setting terse to true causes the function to return only the\n        absolute minimum information needed to identify the platform.\n    \"\"\"\n    return \"Browser\"\nif __name__ == '__main__':\n    terse = ('terse' in sys.argv or '--terse' in sys.argv)\n    aliased = (not 'nonaliased' in sys.argv and not '--nonaliased' in sys.argv)\n    print(platform(aliased,terse))\n    sys.exit(0)\n", "/Lib/unittest/test/test_result.py": "import io\r\nimport sys\r\nimport textwrap\r\nfrom test import support\r\nimport traceback\r\nimport unittest\r\nclass Test_TestResult(unittest.TestCase):\r\n    def test_init(self):\r\n        result = unittest.TestResult()\r\n        self.assertTrue(result.wasSuccessful())\r\n        self.assertEqual(len(result.errors), 0)\r\n        self.assertEqual(len(result.failures), 0)\r\n        self.assertEqual(result.testsRun, 0)\r\n        self.assertEqual(result.shouldStop, False)\r\n        self.assertIsNone(result._stdout_buffer)\r\n        self.assertIsNone(result._stderr_buffer)\r\n    def test_stop(self):\r\n        result = unittest.TestResult()\r\n        result.stop()\r\n        self.assertEqual(result.shouldStop, True)\r\n    def test_startTest(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self):\r\n                pass\r\n        test = Foo('test_1')\r\n        result = unittest.TestResult()\r\n        result.startTest(test)\r\n        self.assertTrue(result.wasSuccessful())\r\n        self.assertEqual(len(result.errors), 0)\r\n        self.assertEqual(len(result.failures), 0)\r\n        self.assertEqual(result.testsRun, 1)\r\n        self.assertEqual(result.shouldStop, False)\r\n        result.stopTest(test)\r\n    def test_stopTest(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self):\r\n                pass\r\n        test = Foo('test_1')\r\n        result = unittest.TestResult()\r\n        result.startTest(test)\r\n        self.assertTrue(result.wasSuccessful())\r\n        self.assertEqual(len(result.errors), 0)\r\n        self.assertEqual(len(result.failures), 0)\r\n        self.assertEqual(result.testsRun, 1)\r\n        self.assertEqual(result.shouldStop, False)\r\n        result.stopTest(test)\r\n        self.assertTrue(result.wasSuccessful())\r\n        self.assertEqual(len(result.errors), 0)\r\n        self.assertEqual(len(result.failures), 0)\r\n        self.assertEqual(result.testsRun, 1)\r\n        self.assertEqual(result.shouldStop, False)\r\n    def test_startTestRun_stopTestRun(self):\r\n        result = unittest.TestResult()\r\n        result.startTestRun()\r\n        result.stopTestRun()\r\n    def test_addSuccess(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self):\r\n                pass\r\n        test = Foo('test_1')\r\n        result = unittest.TestResult()\r\n        result.startTest(test)\r\n        result.addSuccess(test)\r\n        result.stopTest(test)\r\n        self.assertTrue(result.wasSuccessful())\r\n        self.assertEqual(len(result.errors), 0)\r\n        self.assertEqual(len(result.failures), 0)\r\n        self.assertEqual(result.testsRun, 1)\r\n        self.assertEqual(result.shouldStop, False)\r\n    def test_addFailure(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self):\r\n                pass\r\n        test = Foo('test_1')\r\n        try:\r\n            test.fail(\"foo\")\r\n        except:\r\n            exc_info_tuple = sys.exc_info()\r\n        result = unittest.TestResult()\r\n        result.startTest(test)\r\n        result.addFailure(test, exc_info_tuple)\r\n        result.stopTest(test)\r\n        self.assertFalse(result.wasSuccessful())\r\n        self.assertEqual(len(result.errors), 0)\r\n        self.assertEqual(len(result.failures), 1)\r\n        self.assertEqual(result.testsRun, 1)\r\n        self.assertEqual(result.shouldStop, False)\r\n        test_case, formatted_exc = result.failures[0]\r\n        self.assertTrue(test_case is test)\r\n        self.assertIsInstance(formatted_exc, str)\r\n    def test_addError(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self):\r\n                pass\r\n        test = Foo('test_1')\r\n        try:\r\n            raise TypeError()\r\n        except:\r\n            exc_info_tuple = sys.exc_info()\r\n        result = unittest.TestResult()\r\n        result.startTest(test)\r\n        result.addError(test, exc_info_tuple)\r\n        result.stopTest(test)\r\n        self.assertFalse(result.wasSuccessful())\r\n        self.assertEqual(len(result.errors), 1)\r\n        self.assertEqual(len(result.failures), 0)\r\n        self.assertEqual(result.testsRun, 1)\r\n        self.assertEqual(result.shouldStop, False)\r\n        test_case, formatted_exc = result.errors[0]\r\n        self.assertTrue(test_case is test)\r\n        self.assertIsInstance(formatted_exc, str)\r\n    def testGetDescriptionWithoutDocstring(self):\r\n        result = unittest.TextTestResult(None, True, 1)\r\n        self.assertEqual(\r\n                result.getDescription(self),\r\n                'testGetDescriptionWithoutDocstring (' + __name__ +\r\n                '.Test_TestResult)')\r\n    @unittest.skipIf(sys.flags.optimize >= 2,\r\n                     \"Docstrings are omitted with -O2 and above\")\r\n    def testGetDescriptionWithOneLineDocstring(self):\r\n        \"\"\"Tests getDescription() for a method with a docstring.\"\"\"\r\n        result = unittest.TextTestResult(None, True, 1)\r\n        self.assertEqual(\r\n                result.getDescription(self),\r\n               ('testGetDescriptionWithOneLineDocstring '\r\n                '(' + __name__ + '.Test_TestResult)\\n'\r\n                'Tests getDescription() for a method with a docstring.'))\r\n    @unittest.skipIf(sys.flags.optimize >= 2,\r\n                     \"Docstrings are omitted with -O2 and above\")\r\n    def testGetDescriptionWithMultiLineDocstring(self):\r\n        \"\"\"Tests getDescription() for a method with a longer docstring.\r\n        The second line of the docstring.\r\n        \"\"\"\r\n        result = unittest.TextTestResult(None, True, 1)\r\n        self.assertEqual(\r\n                result.getDescription(self),\r\n               ('testGetDescriptionWithMultiLineDocstring '\r\n                '(' + __name__ + '.Test_TestResult)\\n'\r\n                'Tests getDescription() for a method with a longer '\r\n                'docstring.'))\r\n    def testStackFrameTrimming(self):\r\n        class Frame(object):\r\n            class tb_frame(object):\r\n                f_globals = {}\r\n        result = unittest.TestResult()\r\n        self.assertFalse(result._is_relevant_tb_level(Frame))\r\n        Frame.tb_frame.f_globals['__unittest'] = True\r\n        self.assertTrue(result._is_relevant_tb_level(Frame))\r\n    def testFailFast(self):\r\n        result = unittest.TestResult()\r\n        result._exc_info_to_string = lambda *_: ''\r\n        result.failfast = True\r\n        result.addError(None, None)\r\n        self.assertTrue(result.shouldStop)\r\n        result = unittest.TestResult()\r\n        result._exc_info_to_string = lambda *_: ''\r\n        result.failfast = True\r\n        result.addFailure(None, None)\r\n        self.assertTrue(result.shouldStop)\r\n        result = unittest.TestResult()\r\n        result._exc_info_to_string = lambda *_: ''\r\n        result.failfast = True\r\n        result.addUnexpectedSuccess(None)\r\n        self.assertTrue(result.shouldStop)\r\n    def testFailFastSetByRunner(self):\r\n        runner = unittest.TextTestRunner(stream=io.StringIO(), failfast=True)\r\n        def test(result):\r\n            self.assertTrue(result.failfast)\r\n        result = runner.run(test)\r\nclassDict = dict(unittest.TestResult.__dict__)\r\nfor m in ('addSkip', 'addExpectedFailure', 'addUnexpectedSuccess',\r\n           '__init__'):\r\n    del classDict[m]\r\ndef __init__(self, stream=None, descriptions=None, verbosity=None):\r\n    self.failures = []\r\n    self.errors = []\r\n    self.testsRun = 0\r\n    self.shouldStop = False\r\n    self.buffer = False\r\nclassDict['__init__'] = __init__\r\nOldResult = type('OldResult', (object,), classDict)\r\nclass Test_OldTestResult(unittest.TestCase):\r\n    def assertOldResultWarning(self, test, failures):\r\n        with support.check_warnings((\"TestResult has no add.+ method,\",\r\n                                     RuntimeWarning)):\r\n            result = OldResult()\r\n            test.run(result)\r\n            self.assertEqual(len(result.failures), failures)\r\n    def testOldTestResult(self):\r\n        class Test(unittest.TestCase):\r\n            def testSkip(self):\r\n                self.skipTest('foobar')\r\n            @unittest.expectedFailure\r\n            def testExpectedFail(self):\r\n                raise TypeError\r\n            @unittest.expectedFailure\r\n            def testUnexpectedSuccess(self):\r\n                pass\r\n        for test_name, should_pass in (('testSkip', True),\r\n                                       ('testExpectedFail', True),\r\n                                       ('testUnexpectedSuccess', False)):\r\n            test = Test(test_name)\r\n            self.assertOldResultWarning(test, int(not should_pass))\r\n    def testOldTestTesultSetup(self):\r\n        class Test(unittest.TestCase):\r\n            def setUp(self):\r\n                self.skipTest('no reason')\r\n            def testFoo(self):\r\n                pass\r\n        self.assertOldResultWarning(Test('testFoo'), 0)\r\n    def testOldTestResultClass(self):\r\n        @unittest.skip('no reason')\r\n        class Test(unittest.TestCase):\r\n            def testFoo(self):\r\n                pass\r\n        self.assertOldResultWarning(Test('testFoo'), 0)\r\n    def testOldResultWithRunner(self):\r\n        class Test(unittest.TestCase):\r\n            def testFoo(self):\r\n                pass\r\n        runner = unittest.TextTestRunner(resultclass=OldResult,\r\n                                          stream=io.StringIO())\r\n        runner.run(Test('testFoo'))\r\nclass MockTraceback(object):\r\n    @staticmethod\r\n    def format_exception(*_):\r\n        return ['A traceback']\r\ndef restore_traceback():\r\n    unittest.result.traceback = traceback\r\nclass TestOutputBuffering(unittest.TestCase):\r\n    def setUp(self):\r\n        self._real_out = sys.stdout\r\n        self._real_err = sys.stderr\r\n    def tearDown(self):\r\n        sys.stdout = self._real_out\r\n        sys.stderr = self._real_err\r\n    def testBufferOutputOff(self):\r\n        real_out = self._real_out\r\n        real_err = self._real_err\r\n        result = unittest.TestResult()\r\n        self.assertFalse(result.buffer)\r\n        self.assertIs(real_out, sys.stdout)\r\n        self.assertIs(real_err, sys.stderr)\r\n        result.startTest(self)\r\n        self.assertIs(real_out, sys.stdout)\r\n        self.assertIs(real_err, sys.stderr)\r\n    def testBufferOutputStartTestAddSuccess(self):\r\n        real_out = self._real_out\r\n        real_err = self._real_err\r\n        result = unittest.TestResult()\r\n        self.assertFalse(result.buffer)\r\n        result.buffer = True\r\n        self.assertIs(real_out, sys.stdout)\r\n        self.assertIs(real_err, sys.stderr)\r\n        result.startTest(self)\r\n        self.assertIsNot(real_out, sys.stdout)\r\n        self.assertIsNot(real_err, sys.stderr)\r\n        self.assertIsInstance(sys.stdout, io.StringIO)\r\n        self.assertIsInstance(sys.stderr, io.StringIO)\r\n        self.assertIsNot(sys.stdout, sys.stderr)\r\n        out_stream = sys.stdout\r\n        err_stream = sys.stderr\r\n        result._original_stdout = io.StringIO()\r\n        result._original_stderr = io.StringIO()\r\n        print('foo')\r\n        print('bar', file=sys.stderr)\r\n        self.assertEqual(out_stream.getvalue(), 'foo\\n')\r\n        self.assertEqual(err_stream.getvalue(), 'bar\\n')\r\n        self.assertEqual(result._original_stdout.getvalue(), '')\r\n        self.assertEqual(result._original_stderr.getvalue(), '')\r\n        result.addSuccess(self)\r\n        result.stopTest(self)\r\n        self.assertIs(sys.stdout, result._original_stdout)\r\n        self.assertIs(sys.stderr, result._original_stderr)\r\n        self.assertEqual(result._original_stdout.getvalue(), '')\r\n        self.assertEqual(result._original_stderr.getvalue(), '')\r\n        self.assertEqual(out_stream.getvalue(), '')\r\n        self.assertEqual(err_stream.getvalue(), '')\r\n    def getStartedResult(self):\r\n        result = unittest.TestResult()\r\n        result.buffer = True\r\n        result.startTest(self)\r\n        return result\r\n    def testBufferOutputAddErrorOrFailure(self):\r\n        unittest.result.traceback = MockTraceback\r\n        self.addCleanup(restore_traceback)\r\n        for message_attr, add_attr, include_error in [\r\n            ('errors', 'addError', True),\r\n            ('failures', 'addFailure', False),\r\n            ('errors', 'addError', True),\r\n            ('failures', 'addFailure', False)\r\n        ]:\r\n            result = self.getStartedResult()\r\n            buffered_out = sys.stdout\r\n            buffered_err = sys.stderr\r\n            result._original_stdout = io.StringIO()\r\n            result._original_stderr = io.StringIO()\r\n            print('foo', file=sys.stdout)\r\n            if include_error:\r\n                print('bar', file=sys.stderr)\r\n            addFunction = getattr(result, add_attr)\r\n            addFunction(self, (None, None, None))\r\n            result.stopTest(self)\r\n            result_list = getattr(result, message_attr)\r\n            self.assertEqual(len(result_list), 1)\r\n            test, message = result_list[0]\r\n            expectedOutMessage = textwrap.dedent(\"\"\"\r\n                Stdout:\r\n                foo\r\n            \"\"\")\r\n            expectedErrMessage = ''\r\n            if include_error:\r\n                expectedErrMessage = textwrap.dedent(\"\"\"\r\n                Stderr:\r\n                bar\r\n            \"\"\")\r\n            expectedFullMessage = 'A traceback%s%s' % (expectedOutMessage, expectedErrMessage)\r\n            self.assertIs(test, self)\r\n            self.assertEqual(result._original_stdout.getvalue(), expectedOutMessage)\r\n            self.assertEqual(result._original_stderr.getvalue(), expectedErrMessage)\r\n            self.assertMultiLineEqual(message, expectedFullMessage)\r\n    def testBufferSetupClass(self):\r\n        result = unittest.TestResult()\r\n        result.buffer = True\r\n        class Foo(unittest.TestCase):\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                1/0\r\n            def test_foo(self):\r\n                pass\r\n        suite = unittest.TestSuite([Foo('test_foo')])\r\n        suite(result)\r\n        self.assertEqual(len(result.errors), 1)\r\n    def testBufferTearDownClass(self):\r\n        result = unittest.TestResult()\r\n        result.buffer = True\r\n        class Foo(unittest.TestCase):\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                1/0\r\n            def test_foo(self):\r\n                pass\r\n        suite = unittest.TestSuite([Foo('test_foo')])\r\n        suite(result)\r\n        self.assertEqual(len(result.errors), 1)\r\n    def testBufferSetUpModule(self):\r\n        result = unittest.TestResult()\r\n        result.buffer = True\r\n        class Foo(unittest.TestCase):\r\n            def test_foo(self):\r\n                pass\r\n        class Module(object):\r\n            @staticmethod\r\n            def setUpModule():\r\n                1/0\r\n        Foo.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        self.addCleanup(sys.modules.pop, 'Module')\r\n        suite = unittest.TestSuite([Foo('test_foo')])\r\n        suite(result)\r\n        self.assertEqual(len(result.errors), 1)\r\n    def testBufferTearDownModule(self):\r\n        result = unittest.TestResult()\r\n        result.buffer = True\r\n        class Foo(unittest.TestCase):\r\n            def test_foo(self):\r\n                pass\r\n        class Module(object):\r\n            @staticmethod\r\n            def tearDownModule():\r\n                1/0\r\n        Foo.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        self.addCleanup(sys.modules.pop, 'Module')\r\n        suite = unittest.TestSuite([Foo('test_foo')])\r\n        suite(result)\r\n        self.assertEqual(len(result.errors), 1)\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/signal.py": "\"\"\"This module provides mechanisms to use signal handlers in Python.\nFunctions:\nalarm() -- cause SIGALRM after a specified time [Unix only]\nsetitimer() -- cause a signal (described below) after a specified\n               float time and the timer may restart then [Unix only]\ngetitimer() -- get current value of timer [Unix only]\nsignal() -- set the action for a given signal\ngetsignal() -- get the signal action for a given signal\npause() -- wait until a signal arrives [Unix only]\ndefault_int_handler() -- default SIGINT handler\nsignal constants:\nSIG_DFL -- used to refer to the system default handler\nSIG_IGN -- used to ignore the signal\nNSIG -- number of defined signals\nSIGINT, SIGTERM, etc. -- signal numbers\nitimer constants:\nITIMER_REAL -- decrements in real time, and delivers SIGALRM upon\n               expiration\nITIMER_VIRTUAL -- decrements only when the process is executing,\n               and delivers SIGVTALRM upon expiration\nITIMER_PROF -- decrements both when the process is executing and\n               when the system is executing on behalf of the process.\n               Coupled with ITIMER_VIRTUAL, this timer is usually\n               used to profile the time spent by the application\n               in user and kernel space. SIGPROF is delivered upon\n               expiration.\n*** IMPORTANT NOTICE ***\nA signal handler function is called with two arguments:\nthe first is the signal number, the second is the interrupted stack frame.\"\"\"\nCTRL_BREAK_EVENT=1\nCTRL_C_EVENT=0\nNSIG=23\nSIGABRT=22\nSIGBREAK=21\nSIGFPE=8\nSIGILL=4\nSIGINT=2\nSIGSEGV=11\nSIGTERM=15\nSIG_DFL=0\nSIG_IGN=1\ndef signal(signalnum, handler) :\n    pass\n", "/Lib/http/cookies.py": "r\"\"\"\nHere's a sample session to show how to use this module.\nAt the moment, this is the only documentation.\nThe Basics\n----------\nImporting is easy...\n   >>> from http import cookies\nMost of the time you start by creating a cookie.\n   >>> C = cookies.SimpleCookie()\nOnce you've created your Cookie, you can add values just as if it were\na dictionary.\n   >>> C = cookies.SimpleCookie()\n   >>> C[\"fig\"] = \"newton\"\n   >>> C[\"sugar\"] = \"wafer\"\n   >>> C.output()\n   'Set-Cookie: fig=newton\\r\\nSet-Cookie: sugar=wafer'\nNotice that the printable representation of a Cookie is the\nappropriate format for a Set-Cookie: header.  This is the\ndefault behavior.  You can change the header and printed\nattributes by using the .output() function\n   >>> C = cookies.SimpleCookie()\n   >>> C[\"rocky\"] = \"road\"\n   >>> C[\"rocky\"][\"path\"] = \"/cookie\"\n   >>> print(C.output(header=\"Cookie:\"))\n   Cookie: rocky=road; Path=/cookie\n   >>> print(C.output(attrs=[], header=\"Cookie:\"))\n   Cookie: rocky=road\nThe load() method of a Cookie extracts cookies from a string.  In a\nCGI script, you would use this method to extract the cookies from the\nHTTP_COOKIE environment variable.\n   >>> C = cookies.SimpleCookie()\n   >>> C.load(\"chips=ahoy; vienna=finger\")\n   >>> C.output()\n   'Set-Cookie: chips=ahoy\\r\\nSet-Cookie: vienna=finger'\nThe load() method is darn-tootin smart about identifying cookies\nwithin a string.  Escaped quotation marks, nested semicolons, and other\nsuch trickeries do not confuse it.\n   >>> C = cookies.SimpleCookie()\n   >>> C.load('keebler=\"E=everybody; L=\\\\\"Loves\\\\\"; fudge=\\\\012;\";')\n   >>> print(C)\n   Set-Cookie: keebler=\"E=everybody; L=\\\"Loves\\\"; fudge=\\012;\"\nEach element of the Cookie also supports all of the RFC 2109\nCookie attributes.  Here's an example which sets the Path\nattribute.\n   >>> C = cookies.SimpleCookie()\n   >>> C[\"oreo\"] = \"doublestuff\"\n   >>> C[\"oreo\"][\"path\"] = \"/\"\n   >>> print(C)\n   Set-Cookie: oreo=doublestuff; Path=/\nEach dictionary element has a 'value' attribute, which gives you\nback the value associated with the key.\n   >>> C = cookies.SimpleCookie()\n   >>> C[\"twix\"] = \"none for you\"\n   >>> C[\"twix\"].value\n   'none for you'\nThe SimpleCookie expects that all values should be standard strings.\nJust to be sure, SimpleCookie invokes the str() builtin to convert\nthe value to a string, when the values are set dictionary-style.\n   >>> C = cookies.SimpleCookie()\n   >>> C[\"number\"] = 7\n   >>> C[\"string\"] = \"seven\"\n   >>> C[\"number\"].value\n   '7'\n   >>> C[\"string\"].value\n   'seven'\n   >>> C.output()\n   'Set-Cookie: number=7\\r\\nSet-Cookie: string=seven'\nFinis.\n\"\"\"\nimport re\nimport string\n__all__ = [\"CookieError\", \"BaseCookie\", \"SimpleCookie\"]\n_nulljoin = ''.join\n_semispacejoin = '; '.join\n_spacejoin = ' '.join\nclass CookieError(Exception):\n    pass\n_LegalChars       = string.ascii_letters + string.digits + \"!#$%&'*+-.^_`|~:\"\n_Translator       = {\n    '\\000' : '\\\\000',  '\\001' : '\\\\001',  '\\002' : '\\\\002',\n    '\\003' : '\\\\003',  '\\004' : '\\\\004',  '\\005' : '\\\\005',\n    '\\006' : '\\\\006',  '\\007' : '\\\\007',  '\\010' : '\\\\010',\n    '\\011' : '\\\\011',  '\\012' : '\\\\012',  '\\013' : '\\\\013',\n    '\\014' : '\\\\014',  '\\015' : '\\\\015',  '\\016' : '\\\\016',\n    '\\017' : '\\\\017',  '\\020' : '\\\\020',  '\\021' : '\\\\021',\n    '\\022' : '\\\\022',  '\\023' : '\\\\023',  '\\024' : '\\\\024',\n    '\\025' : '\\\\025',  '\\026' : '\\\\026',  '\\027' : '\\\\027',\n    '\\030' : '\\\\030',  '\\031' : '\\\\031',  '\\032' : '\\\\032',\n    '\\033' : '\\\\033',  '\\034' : '\\\\034',  '\\035' : '\\\\035',\n    '\\036' : '\\\\036',  '\\037' : '\\\\037',\n    ',' : '\\\\054', ';' : '\\\\073',\n    '\"' : '\\\\\"',       '\\\\' : '\\\\\\\\',\n    '\\177' : '\\\\177',  '\\200' : '\\\\200',  '\\201' : '\\\\201',\n    '\\202' : '\\\\202',  '\\203' : '\\\\203',  '\\204' : '\\\\204',\n    '\\205' : '\\\\205',  '\\206' : '\\\\206',  '\\207' : '\\\\207',\n    '\\210' : '\\\\210',  '\\211' : '\\\\211',  '\\212' : '\\\\212',\n    '\\213' : '\\\\213',  '\\214' : '\\\\214',  '\\215' : '\\\\215',\n    '\\216' : '\\\\216',  '\\217' : '\\\\217',  '\\220' : '\\\\220',\n    '\\221' : '\\\\221',  '\\222' : '\\\\222',  '\\223' : '\\\\223',\n    '\\224' : '\\\\224',  '\\225' : '\\\\225',  '\\226' : '\\\\226',\n    '\\227' : '\\\\227',  '\\230' : '\\\\230',  '\\231' : '\\\\231',\n    '\\232' : '\\\\232',  '\\233' : '\\\\233',  '\\234' : '\\\\234',\n    '\\235' : '\\\\235',  '\\236' : '\\\\236',  '\\237' : '\\\\237',\n    '\\240' : '\\\\240',  '\\241' : '\\\\241',  '\\242' : '\\\\242',\n    '\\243' : '\\\\243',  '\\244' : '\\\\244',  '\\245' : '\\\\245',\n    '\\246' : '\\\\246',  '\\247' : '\\\\247',  '\\250' : '\\\\250',\n    '\\251' : '\\\\251',  '\\252' : '\\\\252',  '\\253' : '\\\\253',\n    '\\254' : '\\\\254',  '\\255' : '\\\\255',  '\\256' : '\\\\256',\n    '\\257' : '\\\\257',  '\\260' : '\\\\260',  '\\261' : '\\\\261',\n    '\\262' : '\\\\262',  '\\263' : '\\\\263',  '\\264' : '\\\\264',\n    '\\265' : '\\\\265',  '\\266' : '\\\\266',  '\\267' : '\\\\267',\n    '\\270' : '\\\\270',  '\\271' : '\\\\271',  '\\272' : '\\\\272',\n    '\\273' : '\\\\273',  '\\274' : '\\\\274',  '\\275' : '\\\\275',\n    '\\276' : '\\\\276',  '\\277' : '\\\\277',  '\\300' : '\\\\300',\n    '\\301' : '\\\\301',  '\\302' : '\\\\302',  '\\303' : '\\\\303',\n    '\\304' : '\\\\304',  '\\305' : '\\\\305',  '\\306' : '\\\\306',\n    '\\307' : '\\\\307',  '\\310' : '\\\\310',  '\\311' : '\\\\311',\n    '\\312' : '\\\\312',  '\\313' : '\\\\313',  '\\314' : '\\\\314',\n    '\\315' : '\\\\315',  '\\316' : '\\\\316',  '\\317' : '\\\\317',\n    '\\320' : '\\\\320',  '\\321' : '\\\\321',  '\\322' : '\\\\322',\n    '\\323' : '\\\\323',  '\\324' : '\\\\324',  '\\325' : '\\\\325',\n    '\\326' : '\\\\326',  '\\327' : '\\\\327',  '\\330' : '\\\\330',\n    '\\331' : '\\\\331',  '\\332' : '\\\\332',  '\\333' : '\\\\333',\n    '\\334' : '\\\\334',  '\\335' : '\\\\335',  '\\336' : '\\\\336',\n    '\\337' : '\\\\337',  '\\340' : '\\\\340',  '\\341' : '\\\\341',\n    '\\342' : '\\\\342',  '\\343' : '\\\\343',  '\\344' : '\\\\344',\n    '\\345' : '\\\\345',  '\\346' : '\\\\346',  '\\347' : '\\\\347',\n    '\\350' : '\\\\350',  '\\351' : '\\\\351',  '\\352' : '\\\\352',\n    '\\353' : '\\\\353',  '\\354' : '\\\\354',  '\\355' : '\\\\355',\n    '\\356' : '\\\\356',  '\\357' : '\\\\357',  '\\360' : '\\\\360',\n    '\\361' : '\\\\361',  '\\362' : '\\\\362',  '\\363' : '\\\\363',\n    '\\364' : '\\\\364',  '\\365' : '\\\\365',  '\\366' : '\\\\366',\n    '\\367' : '\\\\367',  '\\370' : '\\\\370',  '\\371' : '\\\\371',\n    '\\372' : '\\\\372',  '\\373' : '\\\\373',  '\\374' : '\\\\374',\n    '\\375' : '\\\\375',  '\\376' : '\\\\376',  '\\377' : '\\\\377'\n    }\ndef _quote(str, LegalChars=_LegalChars):\n    r\"\"\"Quote a string for use in a cookie header.\n    If the string does not need to be double-quoted, then just return the\n    string.  Otherwise, surround the string in doublequotes and quote\n    (with a \\) special characters.\n    \"\"\"\n    if all(c in LegalChars for c in str):\n        return str\n    else:\n        return '\"' + _nulljoin(_Translator.get(s, s) for s in str) + '\"'\n_OctalPatt = re.compile(r\"\\\\[0-3][0-7][0-7]\")\n_QuotePatt = re.compile(r\"[\\\\].\")\ndef _unquote(str):\n    if len(str) < 2:\n        return str\n    if str[0] != '\"' or str[-1] != '\"':\n        return str\n    str = str[1:-1]\n    i = 0\n    n = len(str)\n    res = []\n    while 0 <= i < n:\n        o_match = _OctalPatt.search(str, i)\n        q_match = _QuotePatt.search(str, i)\n        if not o_match and not q_match:              # Neither matched\n            res.append(str[i:])\n            break\n        j = k = -1\n        if o_match:\n            j = o_match.start(0)\n        if q_match:\n            k = q_match.start(0)\n        if q_match and (not o_match or k < j):     # QuotePatt matched\n            res.append(str[i:k])\n            res.append(str[k+1])\n            i = k + 2\n        else:                                      # OctalPatt matched\n            res.append(str[i:j])\n            res.append(chr(int(str[j+1:j+4], 8)))\n            i = j + 4\n    return _nulljoin(res)\n_weekdayname = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n_monthname = [None,\n              'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n              'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\ndef _getdate(future=0, weekdayname=_weekdayname, monthname=_monthname):\n    from time import gmtime, time\n    now = time()\n    year, month, day, hh, mm, ss, wd, y, z = gmtime(now + future)\n    return \"%s, %02d %3s %4d %02d:%02d:%02d GMT\" % \\\n           (weekdayname[wd], day, monthname[month], year, hh, mm, ss)\nclass Morsel(dict):\n    \"\"\"A class to hold ONE (key, value) pair.\n    In a cookie, each such pair may have several attributes, so this class is\n    used to keep the attributes associated with the appropriate key,value pair.\n    This class also includes a coded_value attribute, which is used to hold\n    the network representation of the value.  This is most useful when Python\n    objects are pickled for network transit.\n    \"\"\"\n    _reserved = {\n        \"expires\"  : \"expires\",\n        \"path\"     : \"Path\",\n        \"comment\"  : \"Comment\",\n        \"domain\"   : \"Domain\",\n        \"max-age\"  : \"Max-Age\",\n        \"secure\"   : \"secure\",\n        \"httponly\" : \"httponly\",\n        \"version\"  : \"Version\",\n    }\n    def __init__(self):\n        self.key = self.value = self.coded_value = None\n        for key in self._reserved:\n            dict.__setitem__(self, key, \"\")\n    def __setitem__(self, K, V):\n        K = K.lower()\n        if not K in self._reserved:\n            raise CookieError(\"Invalid Attribute %s\" % K)\n        dict.__setitem__(self, K, V)\n    def isReservedKey(self, K):\n        return K.lower() in self._reserved\n    def set(self, key, val, coded_val, LegalChars=_LegalChars):\n        if key.lower() in self._reserved:\n            raise CookieError(\"Attempt to set a reserved key: %s\" % key)\n        if any(c not in LegalChars for c in key):\n            raise CookieError(\"Illegal key value: %s\" % key)\n        self.key = key\n        self.value = val\n        self.coded_value = coded_val\n    def output(self, attrs=None, header=\"Set-Cookie:\"):\n        return \"%s %s\" % (header, self.OutputString(attrs))\n    __str__ = output\n    def __repr__(self):\n        return '<%s: %s=%s>' % (self.__class__.__name__,\n                                self.key, repr(self.value))\n    def js_output(self, attrs=None):\n        return \"\"\"\n        <script type=\"text/javascript\">\n        <!-- begin hiding\n        document.cookie = \\\"%s\\\";\n        // end hiding -->\n        </script>\n        \"\"\" % (self.OutputString(attrs).replace('\"', r'\\\"'))\n    def OutputString(self, attrs=None):\n        result = []\n        append = result.append\n        append(\"%s=%s\" % (self.key, self.coded_value))\n        if attrs is None:\n            attrs = self._reserved\n        items = sorted(self.items())\n        for key, value in items:\n            if value == \"\":\n                continue\n            if key not in attrs:\n                continue\n            if key == \"expires\" and isinstance(value, int):\n                append(\"%s=%s\" % (self._reserved[key], _getdate(value)))\n            elif key == \"max-age\" and isinstance(value, int):\n                append(\"%s=%d\" % (self._reserved[key], value))\n            elif key == \"secure\":\n                append(str(self._reserved[key]))\n            elif key == \"httponly\":\n                append(str(self._reserved[key]))\n            else:\n                append(\"%s=%s\" % (self._reserved[key], value))\n        return _semispacejoin(result)\n_LegalCharsPatt  = r\"[\\w\\d!#%&'~_`><@,:/\\$\\*\\+\\-\\.\\^\\|\\)\\(\\?\\}\\{\\=]\"\n_CookiePattern = re.compile(r\"\"\"\n    (?x)                           # This is a verbose pattern\n    (?P<key>                       # Start of group 'key'\n    \"\"\" + _LegalCharsPatt + r\"\"\"+?   # Any word of at least one letter\n    )                              # End of group 'key'\n    \\s*=\\s*                        # Equal Sign\n    (?P<val>                       # Start of group 'val'\n    \"(?:[^\\\\\"]|\\\\.)*\"                # Any doublequoted string\n    |                                # or\n    \\w{3},\\s[\\w\\d\\s-]{9,11}\\s[\\d:]{8}\\sGMT  # Special case for \"expires\" attr\n    |                                # or\n    \"\"\" + _LegalCharsPatt + r\"\"\"*    # Any word or empty string\n    )                              # End of group 'val'\n    \\s*;?                          # Probably ending in a semi-colon\n    \"\"\", re.ASCII)                 # May be removed if safe.\nclass BaseCookie(dict):\n    \"\"\"A container class for a set of Morsels.\"\"\"\n    def value_decode(self, val):\n        \"\"\"real_value, coded_value = value_decode(STRING)\n        Called prior to setting a cookie's value from the network\n        representation.  The VALUE is the value read from HTTP\n        header.\n        Override this function to modify the behavior of cookies.\n        \"\"\"\n        return val, val\n    def value_encode(self, val):\n        \"\"\"real_value, coded_value = value_encode(VALUE)\n        Called prior to setting a cookie's value from the dictionary\n        representation.  The VALUE is the value being assigned.\n        Override this function to modify the behavior of cookies.\n        \"\"\"\n        strval = str(val)\n        return strval, strval\n    def __init__(self, input=None):\n        if input:\n            self.load(input)\n    def __set(self, key, real_value, coded_value):\n        \"\"\"Private method for setting a cookie's value\"\"\"\n        M = self.get(key, Morsel())\n        M.set(key, real_value, coded_value)\n        dict.__setitem__(self, key, M)\n    def __setitem__(self, key, value):\n        \"\"\"Dictionary style assignment.\"\"\"\n        rval, cval = self.value_encode(value)\n        self.__set(key, rval, cval)\n    def output(self, attrs=None, header=\"Set-Cookie:\", sep=\"\\015\\012\"):\n        \"\"\"Return a string suitable for HTTP.\"\"\"\n        result = []\n        items = sorted(self.items())\n        for key, value in items:\n            result.append(value.output(attrs, header))\n        return sep.join(result)\n    __str__ = output\n    def __repr__(self):\n        l = []\n        items = sorted(self.items())\n        for key, value in items:\n            l.append('%s=%s' % (key, repr(value.value)))\n        return '<%s: %s>' % (self.__class__.__name__, _spacejoin(l))\n    def js_output(self, attrs=None):\n        \"\"\"Return a string suitable for JavaScript.\"\"\"\n        result = []\n        items = sorted(self.items())\n        for key, value in items:\n            result.append(value.js_output(attrs))\n        return _nulljoin(result)\n    def load(self, rawdata):\n        \"\"\"Load cookies from a string (presumably HTTP_COOKIE) or\n        from a dictionary.  Loading cookies from a dictionary 'd'\n        is equivalent to calling:\n            map(Cookie.__setitem__, d.keys(), d.values())\n        \"\"\"\n        if isinstance(rawdata, str):\n            self.__parse_string(rawdata)\n        else:\n            for key, value in rawdata.items():\n                self[key] = value\n        return\n    def __parse_string(self, str, patt=_CookiePattern):\n        i = 0            # Our starting point\n        n = len(str)     # Length of string\n        M = None         # current morsel\n        while 0 <= i < n:\n            match = patt.search(str, i)\n            if not match:\n                break\n            key, value = match.group(\"key\"), match.group(\"val\")\n            i = match.end(0)\n            if key[0] == \"$\":\n                if M:\n                    M[key[1:]] = value\n            elif key.lower() in Morsel._reserved:\n                if M:\n                    M[key] = _unquote(value)\n            else:\n                rval, cval = self.value_decode(value)\n                self.__set(key, rval, cval)\n                M = self[key]\nclass SimpleCookie(BaseCookie):\n    \"\"\"\n    SimpleCookie supports strings as cookie values.  When setting\n    the value using the dictionary assignment notation, SimpleCookie\n    calls the builtin str() to convert the value to a string.  Values\n    received from HTTP are kept as strings.\n    \"\"\"\n    def value_decode(self, val):\n        return _unquote(val), val\n    def value_encode(self, val):\n        strval = str(val)\n        return strval, _quote(strval)\n", "/Lib/unittest/test/_test_warnings.py": "\"\"\"\r\nThis module has a number of tests that raise different kinds of warnings.\r\nWhen the tests are run, the warnings are caught and their messages are printed\r\nto stdout.  This module also accepts an arg that is then passed to\r\nunittest.main to affect the behavior of warnings.\r\nTest_TextTestRunner.test_warnings executes this script with different\r\ncombinations of warnings args and -W flags and check that the output is correct.\r\nSee #10535.\r\n\"\"\"\r\nimport sys\r\nimport unittest\r\nimport warnings\r\ndef warnfun():\r\n    warnings.warn('rw', RuntimeWarning)\r\nclass TestWarnings(unittest.TestCase):\r\n    def test_assert(self):\r\n        self.assertEquals(2+2, 4)\r\n        self.assertEquals(2*2, 4)\r\n        self.assertEquals(2**2, 4)\r\n    def test_fail(self):\r\n        self.failUnless(1)\r\n        self.failUnless(True)\r\n    def test_other_unittest(self):\r\n        self.assertAlmostEqual(2+2, 4)\r\n        self.assertNotAlmostEqual(4+4, 2)\r\n    def test_deprecation(self):\r\n        warnings.warn('dw', DeprecationWarning)\r\n        warnings.warn('dw', DeprecationWarning)\r\n        warnings.warn('dw', DeprecationWarning)\r\n    def test_import(self):\r\n        warnings.warn('iw', ImportWarning)\r\n        warnings.warn('iw', ImportWarning)\r\n        warnings.warn('iw', ImportWarning)\r\n    def test_warning(self):\r\n        warnings.warn('uw')\r\n        warnings.warn('uw')\r\n        warnings.warn('uw')\r\n    def test_function(self):\r\n        warnfun()\r\n        warnfun()\r\n        warnfun()\r\nif __name__ == '__main__':\r\n    with warnings.catch_warnings(record=True) as ws:\r\n        if len(sys.argv) == 2:\r\n            unittest.main(exit=False, warnings=sys.argv.pop())\r\n        else:\r\n            unittest.main(exit=False)\r\n    for w in ws:\r\n        print(w.message)\r\n", "/Lib/optparse.py": "\"\"\"A powerful, extensible, and easy-to-use option parser.\nBy Greg Ward <gward@python.net>\nOriginally distributed as Optik.\nFor support, use the optik-users@lists.sourceforge.net mailing list\n(http://lists.sourceforge.net/lists/listinfo/optik-users).\nSimple usage example:\n   from optparse import OptionParser\n   parser = OptionParser()\n   parser.add_option(\"-f\", \"--file\", dest=\"filename\",\n                     help=\"write report to FILE\", metavar=\"FILE\")\n   parser.add_option(\"-q\", \"--quiet\",\n                     action=\"store_false\", dest=\"verbose\", default=True,\n                     help=\"don't print status messages to stdout\")\n   (options, args) = parser.parse_args()\n\"\"\"\n__version__ = \"1.5.3\"\n__all__ = ['Option',\n           'make_option',\n           'SUPPRESS_HELP',\n           'SUPPRESS_USAGE',\n           'Values',\n           'OptionContainer',\n           'OptionGroup',\n           'OptionParser',\n           'HelpFormatter',\n           'IndentedHelpFormatter',\n           'TitledHelpFormatter',\n           'OptParseError',\n           'OptionError',\n           'OptionConflictError',\n           'OptionValueError',\n           'BadOptionError']\n__copyright__ = \"\"\"\nCopyright (c) 2001-2006 Gregory P. Ward.  All rights reserved.\nCopyright (c) 2002-2006 Python Software Foundation.  All rights reserved.\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n  * Neither the name of the author nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"\"\"\nimport sys, os\nimport textwrap\ndef _repr(self):\n    return \"<%s at 0x%x: %s>\" % (self.__class__.__name__, id(self), self)\ntry:\n    from gettext import gettext, ngettext\nexcept ImportError:\n    def gettext(message):\n        return message\n    def ngettext(singular, plural, n):\n        if n == 1:\n            return singular\n        return plural\n_ = gettext\nclass OptParseError (Exception):\n    def __init__(self, msg):\n        self.msg = msg\n    def __str__(self):\n        return self.msg\nclass OptionError (OptParseError):\n    \"\"\"\n    Raised if an Option instance is created with invalid or\n    inconsistent arguments.\n    \"\"\"\n    def __init__(self, msg, option):\n        self.msg = msg\n        self.option_id = str(option)\n    def __str__(self):\n        if self.option_id:\n            return \"option %s: %s\" % (self.option_id, self.msg)\n        else:\n            return self.msg\nclass OptionConflictError (OptionError):\n    \"\"\"\n    Raised if conflicting options are added to an OptionParser.\n    \"\"\"\nclass OptionValueError (OptParseError):\n    \"\"\"\n    Raised if an invalid option value is encountered on the command\n    line.\n    \"\"\"\nclass BadOptionError (OptParseError):\n    \"\"\"\n    Raised if an invalid option is seen on the command line.\n    \"\"\"\n    def __init__(self, opt_str):\n        self.opt_str = opt_str\n    def __str__(self):\n        return _(\"no such option: %s\") % self.opt_str\nclass AmbiguousOptionError (BadOptionError):\n    \"\"\"\n    Raised if an ambiguous option is seen on the command line.\n    \"\"\"\n    def __init__(self, opt_str, possibilities):\n        BadOptionError.__init__(self, opt_str)\n        self.possibilities = possibilities\n    def __str__(self):\n        return (_(\"ambiguous option: %s (%s?)\")\n                % (self.opt_str, \", \".join(self.possibilities)))\nclass HelpFormatter:\n    \"\"\"\n    Abstract base class for formatting option help.  OptionParser\n    instances should use one of the HelpFormatter subclasses for\n    formatting help; by default IndentedHelpFormatter is used.\n    Instance attributes:\n      parser : OptionParser\n        the controlling OptionParser instance\n      indent_increment : int\n        the number of columns to indent per nesting level\n      max_help_position : int\n        the maximum starting column for option help text\n      help_position : int\n        the calculated starting column for option help text;\n        initially the same as the maximum\n      width : int\n        total number of columns for output (pass None to constructor for\n        this value to be taken from the $COLUMNS environment variable)\n      level : int\n        current indentation level\n      current_indent : int\n        current indentation level (in columns)\n      help_width : int\n        number of columns available for option help text (calculated)\n      default_tag : str\n        text to replace with each option's default value, \"%default\"\n        by default.  Set to false value to disable default value expansion.\n      option_strings : { Option : str }\n        maps Option instances to the snippet of help text explaining\n        the syntax of that option, e.g. \"-h, --help\" or\n        \"-fFILE, --file=FILE\"\n      _short_opt_fmt : str\n        format string controlling how short options with values are\n        printed in help text.  Must be either \"%s%s\" (\"-fFILE\") or\n        \"%s %s\" (\"-f FILE\"), because those are the two syntaxes that\n        Optik supports.\n      _long_opt_fmt : str\n        similar but for long options; must be either \"%s %s\" (\"--file FILE\")\n        or \"%s=%s\" (\"--file=FILE\").\n    \"\"\"\n    NO_DEFAULT_VALUE = \"none\"\n    def __init__(self,\n                 indent_increment,\n                 max_help_position,\n                 width,\n                 short_first):\n        self.parser = None\n        self.indent_increment = indent_increment\n        self.help_position = self.max_help_position = max_help_position\n        if width is None:\n            try:\n                width = int(os.environ['COLUMNS'])\n            except (KeyError, ValueError):\n                width = 80\n            width -= 2\n        self.width = width\n        self.current_indent = 0\n        self.level = 0\n        self.help_width = None          # computed later\n        self.short_first = short_first\n        self.default_tag = \"%default\"\n        self.option_strings = {}\n        self._short_opt_fmt = \"%s %s\"\n        self._long_opt_fmt = \"%s=%s\"\n    def set_parser(self, parser):\n        self.parser = parser\n    def set_short_opt_delimiter(self, delim):\n        if delim not in (\"\", \" \"):\n            raise ValueError(\n                \"invalid metavar delimiter for short options: %r\" % delim)\n        self._short_opt_fmt = \"%s\" + delim + \"%s\"\n    def set_long_opt_delimiter(self, delim):\n        if delim not in (\"=\", \" \"):\n            raise ValueError(\n                \"invalid metavar delimiter for long options: %r\" % delim)\n        self._long_opt_fmt = \"%s\" + delim + \"%s\"\n    def indent(self):\n        self.current_indent += self.indent_increment\n        self.level += 1\n    def dedent(self):\n        self.current_indent -= self.indent_increment\n        assert self.current_indent >= 0, \"Indent decreased below 0.\"\n        self.level -= 1\n    def format_usage(self, usage):\n        raise NotImplementedError(\"subclasses must implement\")\n    def format_heading(self, heading):\n        raise NotImplementedError(\"subclasses must implement\")\n    def _format_text(self, text):\n        \"\"\"\n        Format a paragraph of free-form text for inclusion in the\n        help output at the current indentation level.\n        \"\"\"\n        text_width = self.width - self.current_indent\n        indent = \" \"*self.current_indent\n        return textwrap.fill(text,\n                             text_width,\n                             initial_indent=indent,\n                             subsequent_indent=indent)\n    def format_description(self, description):\n        if description:\n            return self._format_text(description) + \"\\n\"\n        else:\n            return \"\"\n    def format_epilog(self, epilog):\n        if epilog:\n            return \"\\n\" + self._format_text(epilog) + \"\\n\"\n        else:\n            return \"\"\n    def expand_default(self, option):\n        if self.parser is None or not self.default_tag:\n            return option.help\n        default_value = self.parser.defaults.get(option.dest)\n        if default_value is NO_DEFAULT or default_value is None:\n            default_value = self.NO_DEFAULT_VALUE\n        return option.help.replace(self.default_tag, str(default_value))\n    def format_option(self, option):\n        result = []\n        opts = self.option_strings[option]\n        opt_width = self.help_position - self.current_indent - 2\n        if len(opts) > opt_width:\n            opts = \"%*s%s\\n\" % (self.current_indent, \"\", opts)\n            indent_first = self.help_position\n        else:                       # start help on same line as opts\n            opts = \"%*s%-*s  \" % (self.current_indent, \"\", opt_width, opts)\n            indent_first = 0\n        result.append(opts)\n        if option.help:\n            help_text = self.expand_default(option)\n            help_lines = textwrap.wrap(help_text, self.help_width)\n            result.append(\"%*s%s\\n\" % (indent_first, \"\", help_lines[0]))\n            result.extend([\"%*s%s\\n\" % (self.help_position, \"\", line)\n                           for line in help_lines[1:]])\n        elif opts[-1] != \"\\n\":\n            result.append(\"\\n\")\n        return \"\".join(result)\n    def store_option_strings(self, parser):\n        self.indent()\n        max_len = 0\n        for opt in parser.option_list:\n            strings = self.format_option_strings(opt)\n            self.option_strings[opt] = strings\n            max_len = max(max_len, len(strings) + self.current_indent)\n        self.indent()\n        for group in parser.option_groups:\n            for opt in group.option_list:\n                strings = self.format_option_strings(opt)\n                self.option_strings[opt] = strings\n                max_len = max(max_len, len(strings) + self.current_indent)\n        self.dedent()\n        self.dedent()\n        self.help_position = min(max_len + 2, self.max_help_position)\n        self.help_width = self.width - self.help_position\n    def format_option_strings(self, option):\n        \"\"\"Return a comma-separated list of option strings & metavariables.\"\"\"\n        if option.takes_value():\n            metavar = option.metavar or option.dest.upper()\n            short_opts = [self._short_opt_fmt % (sopt, metavar)\n                          for sopt in option._short_opts]\n            long_opts = [self._long_opt_fmt % (lopt, metavar)\n                         for lopt in option._long_opts]\n        else:\n            short_opts = option._short_opts\n            long_opts = option._long_opts\n        if self.short_first:\n            opts = short_opts + long_opts\n        else:\n            opts = long_opts + short_opts\n        return \", \".join(opts)\nclass IndentedHelpFormatter (HelpFormatter):\n    \"\"\"Format help with indented section bodies.\n    \"\"\"\n    def __init__(self,\n                 indent_increment=2,\n                 max_help_position=24,\n                 width=None,\n                 short_first=1):\n        HelpFormatter.__init__(\n            self, indent_increment, max_help_position, width, short_first)\n    def format_usage(self, usage):\n        return _(\"Usage: %s\\n\") % usage\n    def format_heading(self, heading):\n        return \"%*s%s:\\n\" % (self.current_indent, \"\", heading)\nclass TitledHelpFormatter (HelpFormatter):\n    \"\"\"Format help with underlined section headers.\n    \"\"\"\n    def __init__(self,\n                 indent_increment=0,\n                 max_help_position=24,\n                 width=None,\n                 short_first=0):\n        HelpFormatter.__init__ (\n            self, indent_increment, max_help_position, width, short_first)\n    def format_usage(self, usage):\n        return \"%s  %s\\n\" % (self.format_heading(_(\"Usage\")), usage)\n    def format_heading(self, heading):\n        return \"%s\\n%s\\n\" % (heading, \"=-\"[self.level] * len(heading))\ndef _parse_num(val, type):\n    if val[:2].lower() == \"0x\":         # hexadecimal\n        radix = 16\n    elif val[:2].lower() == \"0b\":       # binary\n        radix = 2\n        val = val[2:] or \"0\"            # have to remove \"0b\" prefix\n    elif val[:1] == \"0\":                # octal\n        radix = 8\n    else:                               # decimal\n        radix = 10\n    return type(val, radix)\ndef _parse_int(val):\n    return _parse_num(val, int)\n_builtin_cvt = { \"int\" : (_parse_int, _(\"integer\")),\n                 \"long\" : (_parse_int, _(\"integer\")),\n                 \"float\" : (float, _(\"floating-point\")),\n                 \"complex\" : (complex, _(\"complex\")) }\ndef check_builtin(option, opt, value):\n    (cvt, what) = _builtin_cvt[option.type]\n    try:\n        return cvt(value)\n    except ValueError:\n        raise OptionValueError(\n            _(\"option %s: invalid %s value: %r\") % (opt, what, value))\ndef check_choice(option, opt, value):\n    if value in option.choices:\n        return value\n    else:\n        choices = \", \".join(map(repr, option.choices))\n        raise OptionValueError(\n            _(\"option %s: invalid choice: %r (choose from %s)\")\n            % (opt, value, choices))\nNO_DEFAULT = (\"NO\", \"DEFAULT\")\nclass Option:\n    \"\"\"\n    Instance attributes:\n      _short_opts : [string]\n      _long_opts : [string]\n      action : string\n      type : string\n      dest : string\n      default : any\n      nargs : int\n      const : any\n      choices : [string]\n      callback : function\n      callback_args : (any*)\n      callback_kwargs : { string : any }\n      help : string\n      metavar : string\n    \"\"\"\n    ATTRS = ['action',\n             'type',\n             'dest',\n             'default',\n             'nargs',\n             'const',\n             'choices',\n             'callback',\n             'callback_args',\n             'callback_kwargs',\n             'help',\n             'metavar']\n    ACTIONS = (\"store\",\n               \"store_const\",\n               \"store_true\",\n               \"store_false\",\n               \"append\",\n               \"append_const\",\n               \"count\",\n               \"callback\",\n               \"help\",\n               \"version\")\n    STORE_ACTIONS = (\"store\",\n                     \"store_const\",\n                     \"store_true\",\n                     \"store_false\",\n                     \"append\",\n                     \"append_const\",\n                     \"count\")\n    TYPED_ACTIONS = (\"store\",\n                     \"append\",\n                     \"callback\")\n    ALWAYS_TYPED_ACTIONS = (\"store\",\n                            \"append\")\n    CONST_ACTIONS = (\"store_const\",\n                     \"append_const\")\n    TYPES = (\"string\", \"int\", \"long\", \"float\", \"complex\", \"choice\")\n    TYPE_CHECKER = { \"int\"    : check_builtin,\n                     \"long\"   : check_builtin,\n                     \"float\"  : check_builtin,\n                     \"complex\": check_builtin,\n                     \"choice\" : check_choice,\n                   }\n    CHECK_METHODS = None\n    def __init__(self, *opts, **attrs):\n        self._short_opts = []\n        self._long_opts = []\n        opts = self._check_opt_strings(opts)\n        self._set_opt_strings(opts)\n        self._set_attrs(attrs)\n        for checker in self.CHECK_METHODS:\n            checker(self)\n    def _check_opt_strings(self, opts):\n        opts = [opt for opt in opts if opt]\n        if not opts:\n            raise TypeError(\"at least one option string must be supplied\")\n        return opts\n    def _set_opt_strings(self, opts):\n        for opt in opts:\n            if len(opt) < 2:\n                raise OptionError(\n                    \"invalid option string %r: \"\n                    \"must be at least two characters long\" % opt, self)\n            elif len(opt) == 2:\n                if not (opt[0] == \"-\" and opt[1] != \"-\"):\n                    raise OptionError(\n                        \"invalid short option string %r: \"\n                        \"must be of the form -x, (x any non-dash char)\" % opt,\n                        self)\n                self._short_opts.append(opt)\n            else:\n                if not (opt[0:2] == \"--\" and opt[2] != \"-\"):\n                    raise OptionError(\n                        \"invalid long option string %r: \"\n                        \"must start with --, followed by non-dash\" % opt,\n                        self)\n                self._long_opts.append(opt)\n    def _set_attrs(self, attrs):\n        for attr in self.ATTRS:\n            if attr in attrs:\n                setattr(self, attr, attrs[attr])\n                del attrs[attr]\n            else:\n                if attr == 'default':\n                    setattr(self, attr, NO_DEFAULT)\n                else:\n                    setattr(self, attr, None)\n        if attrs:\n            attrs = sorted(attrs.keys())\n            raise OptionError(\n                \"invalid keyword arguments: %s\" % \", \".join(attrs),\n                self)\n    def _check_action(self):\n        if self.action is None:\n            self.action = \"store\"\n        elif self.action not in self.ACTIONS:\n            raise OptionError(\"invalid action: %r\" % self.action, self)\n    def _check_type(self):\n        if self.type is None:\n            if self.action in self.ALWAYS_TYPED_ACTIONS:\n                if self.choices is not None:\n                    self.type = \"choice\"\n                else:\n                    self.type = \"string\"\n        else:\n            import builtins\n            if ( isinstance(self.type, type) or\n                 (hasattr(self.type, \"__name__\") and\n                  getattr(builtins, self.type.__name__, None) is self.type) ):\n                self.type = self.type.__name__\n            if self.type == \"str\":\n                self.type = \"string\"\n            if self.type not in self.TYPES:\n                raise OptionError(\"invalid option type: %r\" % self.type, self)\n            if self.action not in self.TYPED_ACTIONS:\n                raise OptionError(\n                    \"must not supply a type for action %r\" % self.action, self)\n    def _check_choice(self):\n        if self.type == \"choice\":\n            if self.choices is None:\n                raise OptionError(\n                    \"must supply a list of choices for type 'choice'\", self)\n            elif not isinstance(self.choices, (tuple, list)):\n                raise OptionError(\n                    \"choices must be a list of strings ('%s' supplied)\"\n                    % str(type(self.choices)).split(\"'\")[1], self)\n        elif self.choices is not None:\n            raise OptionError(\n                \"must not supply choices for type %r\" % self.type, self)\n    def _check_dest(self):\n        takes_value = (self.action in self.STORE_ACTIONS or\n                       self.type is not None)\n        if self.dest is None and takes_value:\n            if self._long_opts:\n                self.dest = self._long_opts[0][2:].replace('-', '_')\n            else:\n                self.dest = self._short_opts[0][1]\n    def _check_const(self):\n        if self.action not in self.CONST_ACTIONS and self.const is not None:\n            raise OptionError(\n                \"'const' must not be supplied for action %r\" % self.action,\n                self)\n    def _check_nargs(self):\n        if self.action in self.TYPED_ACTIONS:\n            if self.nargs is None:\n                self.nargs = 1\n        elif self.nargs is not None:\n            raise OptionError(\n                \"'nargs' must not be supplied for action %r\" % self.action,\n                self)\n    def _check_callback(self):\n        if self.action == \"callback\":\n            if not callable(self.callback):\n                raise OptionError(\n                    \"callback not callable: %r\" % self.callback, self)\n            if (self.callback_args is not None and\n                not isinstance(self.callback_args, tuple)):\n                raise OptionError(\n                    \"callback_args, if supplied, must be a tuple: not %r\"\n                    % self.callback_args, self)\n            if (self.callback_kwargs is not None and\n                not isinstance(self.callback_kwargs, dict)):\n                raise OptionError(\n                    \"callback_kwargs, if supplied, must be a dict: not %r\"\n                    % self.callback_kwargs, self)\n        else:\n            if self.callback is not None:\n                raise OptionError(\n                    \"callback supplied (%r) for non-callback option\"\n                    % self.callback, self)\n            if self.callback_args is not None:\n                raise OptionError(\n                    \"callback_args supplied for non-callback option\", self)\n            if self.callback_kwargs is not None:\n                raise OptionError(\n                    \"callback_kwargs supplied for non-callback option\", self)\n    CHECK_METHODS = [_check_action,\n                     _check_type,\n                     _check_choice,\n                     _check_dest,\n                     _check_const,\n                     _check_nargs,\n                     _check_callback]\n    def __str__(self):\n        return \"/\".join(self._short_opts + self._long_opts)\n    __repr__ = _repr\n    def takes_value(self):\n        return self.type is not None\n    def get_opt_string(self):\n        if self._long_opts:\n            return self._long_opts[0]\n        else:\n            return self._short_opts[0]\n    def check_value(self, opt, value):\n        checker = self.TYPE_CHECKER.get(self.type)\n        if checker is None:\n            return value\n        else:\n            return checker(self, opt, value)\n    def convert_value(self, opt, value):\n        if value is not None:\n            if self.nargs == 1:\n                return self.check_value(opt, value)\n            else:\n                return tuple([self.check_value(opt, v) for v in value])\n    def process(self, opt, value, values, parser):\n        value = self.convert_value(opt, value)\n        return self.take_action(\n            self.action, self.dest, opt, value, values, parser)\n    def take_action(self, action, dest, opt, value, values, parser):\n        if action == \"store\":\n            setattr(values, dest, value)\n        elif action == \"store_const\":\n            setattr(values, dest, self.const)\n        elif action == \"store_true\":\n            setattr(values, dest, True)\n        elif action == \"store_false\":\n            setattr(values, dest, False)\n        elif action == \"append\":\n            values.ensure_value(dest, []).append(value)\n        elif action == \"append_const\":\n            values.ensure_value(dest, []).append(self.const)\n        elif action == \"count\":\n            setattr(values, dest, values.ensure_value(dest, 0) + 1)\n        elif action == \"callback\":\n            args = self.callback_args or ()\n            kwargs = self.callback_kwargs or {}\n            self.callback(self, opt, value, parser, *args, **kwargs)\n        elif action == \"help\":\n            parser.print_help()\n            parser.exit()\n        elif action == \"version\":\n            parser.print_version()\n            parser.exit()\n        else:\n            raise ValueError(\"unknown action %r\" % self.action)\n        return 1\nSUPPRESS_HELP = \"SUPPRESS\"+\"HELP\"\nSUPPRESS_USAGE = \"SUPPRESS\"+\"USAGE\"\nclass Values:\n    def __init__(self, defaults=None):\n        if defaults:\n            for (attr, val) in defaults.items():\n                setattr(self, attr, val)\n    def __str__(self):\n        return str(self.__dict__)\n    __repr__ = _repr\n    def __eq__(self, other):\n        if isinstance(other, Values):\n            return self.__dict__ == other.__dict__\n        elif isinstance(other, dict):\n            return self.__dict__ == other\n        else:\n            return NotImplemented\n    def _update_careful(self, dict):\n        \"\"\"\n        Update the option values from an arbitrary dictionary, but only\n        use keys from dict that already have a corresponding attribute\n        in self.  Any keys in dict without a corresponding attribute\n        are silently ignored.\n        \"\"\"\n        for attr in dir(self):\n            if attr in dict:\n                dval = dict[attr]\n                if dval is not None:\n                    setattr(self, attr, dval)\n    def _update_loose(self, dict):\n        \"\"\"\n        Update the option values from an arbitrary dictionary,\n        using all keys from the dictionary regardless of whether\n        they have a corresponding attribute in self or not.\n        \"\"\"\n        self.__dict__.update(dict)\n    def _update(self, dict, mode):\n        if mode == \"careful\":\n            self._update_careful(dict)\n        elif mode == \"loose\":\n            self._update_loose(dict)\n        else:\n            raise ValueError(\"invalid update mode: %r\" % mode)\n    def read_module(self, modname, mode=\"careful\"):\n        __import__(modname)\n        mod = sys.modules[modname]\n        self._update(vars(mod), mode)\n    def read_file(self, filename, mode=\"careful\"):\n        vars = {}\n        exec(open(filename).read(), vars)\n        self._update(vars, mode)\n    def ensure_value(self, attr, value):\n        if not hasattr(self, attr) or getattr(self, attr) is None:\n            setattr(self, attr, value)\n        return getattr(self, attr)\nclass OptionContainer:\n    \"\"\"\n    Abstract base class.\n    Class attributes:\n      standard_option_list : [Option]\n        list of standard options that will be accepted by all instances\n        of this parser class (intended to be overridden by subclasses).\n    Instance attributes:\n      option_list : [Option]\n        the list of Option objects contained by this OptionContainer\n      _short_opt : { string : Option }\n        dictionary mapping short option strings, eg. \"-f\" or \"-X\",\n        to the Option instances that implement them.  If an Option\n        has multiple short option strings, it will appears in this\n        dictionary multiple times. [1]\n      _long_opt : { string : Option }\n        dictionary mapping long option strings, eg. \"--file\" or\n        \"--exclude\", to the Option instances that implement them.\n        Again, a given Option can occur multiple times in this\n        dictionary. [1]\n      defaults : { string : any }\n        dictionary mapping option destination names to default\n        values for each destination [1]\n    [1] These mappings are common to (shared by) all components of the\n        controlling OptionParser, where they are initially created.\n    \"\"\"\n    def __init__(self, option_class, conflict_handler, description):\n        self._create_option_list()\n        self.option_class = option_class\n        self.set_conflict_handler(conflict_handler)\n        self.set_description(description)\n    def _create_option_mappings(self):\n        self._short_opt = {}            # single letter -> Option instance\n        self._long_opt = {}             # long option -> Option instance\n        self.defaults = {}              # maps option dest -> default value\n    def _share_option_mappings(self, parser):\n        self._short_opt = parser._short_opt\n        self._long_opt = parser._long_opt\n        self.defaults = parser.defaults\n    def set_conflict_handler(self, handler):\n        if handler not in (\"error\", \"resolve\"):\n            raise ValueError(\"invalid conflict_resolution value %r\" % handler)\n        self.conflict_handler = handler\n    def set_description(self, description):\n        self.description = description\n    def get_description(self):\n        return self.description\n    def destroy(self):\n        \"\"\"see OptionParser.destroy().\"\"\"\n        del self._short_opt\n        del self._long_opt\n        del self.defaults\n    def _check_conflict(self, option):\n        conflict_opts = []\n        for opt in option._short_opts:\n            if opt in self._short_opt:\n                conflict_opts.append((opt, self._short_opt[opt]))\n        for opt in option._long_opts:\n            if opt in self._long_opt:\n                conflict_opts.append((opt, self._long_opt[opt]))\n        if conflict_opts:\n            handler = self.conflict_handler\n            if handler == \"error\":\n                raise OptionConflictError(\n                    \"conflicting option string(s): %s\"\n                    % \", \".join([co[0] for co in conflict_opts]),\n                    option)\n            elif handler == \"resolve\":\n                for (opt, c_option) in conflict_opts:\n                    if opt.startswith(\"--\"):\n                        c_option._long_opts.remove(opt)\n                        del self._long_opt[opt]\n                    else:\n                        c_option._short_opts.remove(opt)\n                        del self._short_opt[opt]\n                    if not (c_option._short_opts or c_option._long_opts):\n                        c_option.container.option_list.remove(c_option)\n    def add_option(self, *args, **kwargs):\n        \"\"\"add_option(Option)\n           add_option(opt_str, ..., kwarg=val, ...)\n        \"\"\"\n        if isinstance(args[0], str):\n            option = self.option_class(*args, **kwargs)\n        elif len(args) == 1 and not kwargs:\n            option = args[0]\n            if not isinstance(option, Option):\n                raise TypeError(\"not an Option instance: %r\" % option)\n        else:\n            raise TypeError(\"invalid arguments\")\n        self._check_conflict(option)\n        self.option_list.append(option)\n        option.container = self\n        for opt in option._short_opts:\n            self._short_opt[opt] = option\n        for opt in option._long_opts:\n            self._long_opt[opt] = option\n        if option.dest is not None:     # option has a dest, we need a default\n            if option.default is not NO_DEFAULT:\n                self.defaults[option.dest] = option.default\n            elif option.dest not in self.defaults:\n                self.defaults[option.dest] = None\n        return option\n    def add_options(self, option_list):\n        for option in option_list:\n            self.add_option(option)\n    def get_option(self, opt_str):\n        return (self._short_opt.get(opt_str) or\n                self._long_opt.get(opt_str))\n    def has_option(self, opt_str):\n        return (opt_str in self._short_opt or\n                opt_str in self._long_opt)\n    def remove_option(self, opt_str):\n        option = self._short_opt.get(opt_str)\n        if option is None:\n            option = self._long_opt.get(opt_str)\n        if option is None:\n            raise ValueError(\"no such option %r\" % opt_str)\n        for opt in option._short_opts:\n            del self._short_opt[opt]\n        for opt in option._long_opts:\n            del self._long_opt[opt]\n        option.container.option_list.remove(option)\n    def format_option_help(self, formatter):\n        if not self.option_list:\n            return \"\"\n        result = []\n        for option in self.option_list:\n            if not option.help is SUPPRESS_HELP:\n                result.append(formatter.format_option(option))\n        return \"\".join(result)\n    def format_description(self, formatter):\n        return formatter.format_description(self.get_description())\n    def format_help(self, formatter):\n        result = []\n        if self.description:\n            result.append(self.format_description(formatter))\n        if self.option_list:\n            result.append(self.format_option_help(formatter))\n        return \"\\n\".join(result)\nclass OptionGroup (OptionContainer):\n    def __init__(self, parser, title, description=None):\n        self.parser = parser\n        OptionContainer.__init__(\n            self, parser.option_class, parser.conflict_handler, description)\n        self.title = title\n    def _create_option_list(self):\n        self.option_list = []\n        self._share_option_mappings(self.parser)\n    def set_title(self, title):\n        self.title = title\n    def destroy(self):\n        \"\"\"see OptionParser.destroy().\"\"\"\n        OptionContainer.destroy(self)\n        del self.option_list\n    def format_help(self, formatter):\n        result = formatter.format_heading(self.title)\n        formatter.indent()\n        result += OptionContainer.format_help(self, formatter)\n        formatter.dedent()\n        return result\nclass OptionParser (OptionContainer):\n    \"\"\"\n    Class attributes:\n      standard_option_list : [Option]\n        list of standard options that will be accepted by all instances\n        of this parser class (intended to be overridden by subclasses).\n    Instance attributes:\n      usage : string\n        a usage string for your program.  Before it is displayed\n        to the user, \"%prog\" will be expanded to the name of\n        your program (self.prog or os.path.basename(sys.argv[0])).\n      prog : string\n        the name of the current program (to override\n        os.path.basename(sys.argv[0])).\n      description : string\n        A paragraph of text giving a brief overview of your program.\n        optparse reformats this paragraph to fit the current terminal\n        width and prints it when the user requests help (after usage,\n        but before the list of options).\n      epilog : string\n        paragraph of help text to print after option help\n      option_groups : [OptionGroup]\n        list of option groups in this parser (option groups are\n        irrelevant for parsing the command-line, but very useful\n        for generating help)\n      allow_interspersed_args : bool = true\n        if true, positional arguments may be interspersed with options.\n        Assuming -a and -b each take a single argument, the command-line\n          -ablah foo bar -bboo baz\n        will be interpreted the same as\n          -ablah -bboo -- foo bar baz\n        If this flag were false, that command line would be interpreted as\n          -ablah -- foo bar -bboo baz\n        -- ie. we stop processing options as soon as we see the first\n        non-option argument.  (This is the tradition followed by\n        Python's getopt module, Perl's Getopt::Std, and other argument-\n        parsing libraries, but it is generally annoying to users.)\n      process_default_values : bool = true\n        if true, option default values are processed similarly to option\n        values from the command line: that is, they are passed to the\n        type-checking function for the option's type (as long as the\n        default value is a string).  (This really only matters if you\n        have defined custom types; see SF bug #955889.)  Set it to false\n        to restore the behaviour of Optik 1.4.1 and earlier.\n      rargs : [string]\n        the argument list currently being parsed.  Only set when\n        parse_args() is active, and continually trimmed down as\n        we consume arguments.  Mainly there for the benefit of\n        callback options.\n      largs : [string]\n        the list of leftover arguments that we have skipped while\n        parsing options.  If allow_interspersed_args is false, this\n        list is always empty.\n      values : Values\n        the set of option values currently being accumulated.  Only\n        set when parse_args() is active.  Also mainly for callbacks.\n    Because of the 'rargs', 'largs', and 'values' attributes,\n    OptionParser is not thread-safe.  If, for some perverse reason, you\n    need to parse command-line arguments simultaneously in different\n    threads, use different OptionParser instances.\n    \"\"\"\n    standard_option_list = []\n    def __init__(self,\n                 usage=None,\n                 option_list=None,\n                 option_class=Option,\n                 version=None,\n                 conflict_handler=\"error\",\n                 description=None,\n                 formatter=None,\n                 add_help_option=True,\n                 prog=None,\n                 epilog=None):\n        OptionContainer.__init__(\n            self, option_class, conflict_handler, description)\n        self.set_usage(usage)\n        self.prog = prog\n        self.version = version\n        self.allow_interspersed_args = True\n        self.process_default_values = True\n        if formatter is None:\n            formatter = IndentedHelpFormatter()\n        self.formatter = formatter\n        self.formatter.set_parser(self)\n        self.epilog = epilog\n        self._populate_option_list(option_list,\n                                   add_help=add_help_option)\n        self._init_parsing_state()\n    def destroy(self):\n        \"\"\"\n        Declare that you are done with this OptionParser.  This cleans up\n        reference cycles so the OptionParser (and all objects referenced by\n        it) can be garbage-collected promptly.  After calling destroy(), the\n        OptionParser is unusable.\n        \"\"\"\n        OptionContainer.destroy(self)\n        for group in self.option_groups:\n            group.destroy()\n        del self.option_list\n        del self.option_groups\n        del self.formatter\n    def _create_option_list(self):\n        self.option_list = []\n        self.option_groups = []\n        self._create_option_mappings()\n    def _add_help_option(self):\n        self.add_option(\"-h\", \"--help\",\n                        action=\"help\",\n                        help=_(\"show this help message and exit\"))\n    def _add_version_option(self):\n        self.add_option(\"--version\",\n                        action=\"version\",\n                        help=_(\"show program's version number and exit\"))\n    def _populate_option_list(self, option_list, add_help=True):\n        if self.standard_option_list:\n            self.add_options(self.standard_option_list)\n        if option_list:\n            self.add_options(option_list)\n        if self.version:\n            self._add_version_option()\n        if add_help:\n            self._add_help_option()\n    def _init_parsing_state(self):\n        self.rargs = None\n        self.largs = None\n        self.values = None\n    def set_usage(self, usage):\n        if usage is None:\n            self.usage = _(\"%prog [options]\")\n        elif usage is SUPPRESS_USAGE:\n            self.usage = None\n        elif usage.lower().startswith(\"usage: \"):\n            self.usage = usage[7:]\n        else:\n            self.usage = usage\n    def enable_interspersed_args(self):\n        \"\"\"Set parsing to not stop on the first non-option, allowing\n        interspersing switches with command arguments. This is the\n        default behavior. See also disable_interspersed_args() and the\n        class documentation description of the attribute\n        allow_interspersed_args.\"\"\"\n        self.allow_interspersed_args = True\n    def disable_interspersed_args(self):\n        \"\"\"Set parsing to stop on the first non-option. Use this if\n        you have a command processor which runs another command that\n        has options of its own and you want to make sure these options\n        don't get confused.\n        \"\"\"\n        self.allow_interspersed_args = False\n    def set_process_default_values(self, process):\n        self.process_default_values = process\n    def set_default(self, dest, value):\n        self.defaults[dest] = value\n    def set_defaults(self, **kwargs):\n        self.defaults.update(kwargs)\n    def _get_all_options(self):\n        options = self.option_list[:]\n        for group in self.option_groups:\n            options.extend(group.option_list)\n        return options\n    def get_default_values(self):\n        if not self.process_default_values:\n            return Values(self.defaults)\n        defaults = self.defaults.copy()\n        for option in self._get_all_options():\n            default = defaults.get(option.dest)\n            if isinstance(default, str):\n                opt_str = option.get_opt_string()\n                defaults[option.dest] = option.check_value(opt_str, default)\n        return Values(defaults)\n    def add_option_group(self, *args, **kwargs):\n        if isinstance(args[0], str):\n            group = OptionGroup(self, *args, **kwargs)\n        elif len(args) == 1 and not kwargs:\n            group = args[0]\n            if not isinstance(group, OptionGroup):\n                raise TypeError(\"not an OptionGroup instance: %r\" % group)\n            if group.parser is not self:\n                raise ValueError(\"invalid OptionGroup (wrong parser)\")\n        else:\n            raise TypeError(\"invalid arguments\")\n        self.option_groups.append(group)\n        return group\n    def get_option_group(self, opt_str):\n        option = (self._short_opt.get(opt_str) or\n                  self._long_opt.get(opt_str))\n        if option and option.container is not self:\n            return option.container\n        return None\n    def _get_args(self, args):\n        if args is None:\n            return sys.argv[1:]\n        else:\n            return args[:]              # don't modify caller's list\n    def parse_args(self, args=None, values=None):\n        \"\"\"\n        parse_args(args : [string] = sys.argv[1:],\n                   values : Values = None)\n        -> (values : Values, args : [string])\n        Parse the command-line options found in 'args' (default:\n        sys.argv[1:]).  Any errors result in a call to 'error()', which\n        by default prints the usage message to stderr and calls\n        sys.exit() with an error message.  On success returns a pair\n        (values, args) where 'values' is an Values instance (with all\n        your option values) and 'args' is the list of arguments left\n        over after parsing options.\n        \"\"\"\n        rargs = self._get_args(args)\n        if values is None:\n            values = self.get_default_values()\n        self.rargs = rargs\n        self.largs = largs = []\n        self.values = values\n        try:\n            stop = self._process_args(largs, rargs, values)\n        except (BadOptionError, OptionValueError) as err:\n            self.error(str(err))\n        args = largs + rargs\n        return self.check_values(values, args)\n    def check_values(self, values, args):\n        \"\"\"\n        check_values(values : Values, args : [string])\n        -> (values : Values, args : [string])\n        Check that the supplied option values and leftover arguments are\n        valid.  Returns the option values and leftover arguments\n        (possibly adjusted, possibly completely new -- whatever you\n        like).  Default implementation just returns the passed-in\n        values; subclasses may override as desired.\n        \"\"\"\n        return (values, args)\n    def _process_args(self, largs, rargs, values):\n        \"\"\"_process_args(largs : [string],\n                         rargs : [string],\n                         values : Values)\n        Process command-line arguments and populate 'values', consuming\n        options and arguments from 'rargs'.  If 'allow_interspersed_args' is\n        false, stop at the first non-option argument.  If true, accumulate any\n        interspersed non-option arguments in 'largs'.\n        \"\"\"\n        while rargs:\n            arg = rargs[0]\n            if arg == \"--\":\n                del rargs[0]\n                return\n            elif arg[0:2] == \"--\":\n                self._process_long_opt(rargs, values)\n            elif arg[:1] == \"-\" and len(arg) > 1:\n                self._process_short_opts(rargs, values)\n            elif self.allow_interspersed_args:\n                largs.append(arg)\n                del rargs[0]\n            else:\n                return                  # stop now, leave this arg in rargs\n    def _match_long_opt(self, opt):\n        \"\"\"_match_long_opt(opt : string) -> string\n        Determine which long option string 'opt' matches, ie. which one\n        it is an unambiguous abbrevation for.  Raises BadOptionError if\n        'opt' doesn't unambiguously match any long option string.\n        \"\"\"\n        return _match_abbrev(opt, self._long_opt)\n    def _process_long_opt(self, rargs, values):\n        arg = rargs.pop(0)\n        if \"=\" in arg:\n            (opt, next_arg) = arg.split(\"=\", 1)\n            rargs.insert(0, next_arg)\n            had_explicit_value = True\n        else:\n            opt = arg\n            had_explicit_value = False\n        opt = self._match_long_opt(opt)\n        option = self._long_opt[opt]\n        if option.takes_value():\n            nargs = option.nargs\n            if len(rargs) < nargs:\n                self.error(ngettext(\n                    \"%(option)s option requires %(number)d argument\",\n                    \"%(option)s option requires %(number)d arguments\",\n                    nargs) % {\"option\": opt, \"number\": nargs})\n            elif nargs == 1:\n                value = rargs.pop(0)\n            else:\n                value = tuple(rargs[0:nargs])\n                del rargs[0:nargs]\n        elif had_explicit_value:\n            self.error(_(\"%s option does not take a value\") % opt)\n        else:\n            value = None\n        option.process(opt, value, values, self)\n    def _process_short_opts(self, rargs, values):\n        arg = rargs.pop(0)\n        stop = False\n        i = 1\n        for ch in arg[1:]:\n            opt = \"-\" + ch\n            option = self._short_opt.get(opt)\n            i += 1                      # we have consumed a character\n            if not option:\n                raise BadOptionError(opt)\n            if option.takes_value():\n                if i < len(arg):\n                    rargs.insert(0, arg[i:])\n                    stop = True\n                nargs = option.nargs\n                if len(rargs) < nargs:\n                    self.error(ngettext(\n                        \"%(option)s option requires %(number)d argument\",\n                        \"%(option)s option requires %(number)d arguments\",\n                        nargs) % {\"option\": opt, \"number\": nargs})\n                elif nargs == 1:\n                    value = rargs.pop(0)\n                else:\n                    value = tuple(rargs[0:nargs])\n                    del rargs[0:nargs]\n            else:                       # option doesn't take a value\n                value = None\n            option.process(opt, value, values, self)\n            if stop:\n                break\n    def get_prog_name(self):\n        if self.prog is None:\n            return os.path.basename(sys.argv[0])\n        else:\n            return self.prog\n    def expand_prog_name(self, s):\n        return s.replace(\"%prog\", self.get_prog_name())\n    def get_description(self):\n        return self.expand_prog_name(self.description)\n    def exit(self, status=0, msg=None):\n        if msg:\n            sys.stderr.write(msg)\n        sys.exit(status)\n    def error(self, msg):\n        \"\"\"error(msg : string)\n        Print a usage message incorporating 'msg' to stderr and exit.\n        If you override this in a subclass, it should not return -- it\n        should either exit or raise an exception.\n        \"\"\"\n        self.print_usage(sys.stderr)\n        self.exit(2, \"%s: error: %s\\n\" % (self.get_prog_name(), msg))\n    def get_usage(self):\n        if self.usage:\n            return self.formatter.format_usage(\n                self.expand_prog_name(self.usage))\n        else:\n            return \"\"\n    def print_usage(self, file=None):\n        \"\"\"print_usage(file : file = stdout)\n        Print the usage message for the current program (self.usage) to\n        'file' (default stdout).  Any occurrence of the string \"%prog\" in\n        self.usage is replaced with the name of the current program\n        (basename of sys.argv[0]).  Does nothing if self.usage is empty\n        or not defined.\n        \"\"\"\n        if self.usage:\n            print(self.get_usage(), file=file)\n    def get_version(self):\n        if self.version:\n            return self.expand_prog_name(self.version)\n        else:\n            return \"\"\n    def print_version(self, file=None):\n        \"\"\"print_version(file : file = stdout)\n        Print the version message for this program (self.version) to\n        'file' (default stdout).  As with print_usage(), any occurrence\n        of \"%prog\" in self.version is replaced by the current program's\n        name.  Does nothing if self.version is empty or undefined.\n        \"\"\"\n        if self.version:\n            print(self.get_version(), file=file)\n    def format_option_help(self, formatter=None):\n        if formatter is None:\n            formatter = self.formatter\n        formatter.store_option_strings(self)\n        result = []\n        result.append(formatter.format_heading(_(\"Options\")))\n        formatter.indent()\n        if self.option_list:\n            result.append(OptionContainer.format_option_help(self, formatter))\n            result.append(\"\\n\")\n        for group in self.option_groups:\n            result.append(group.format_help(formatter))\n            result.append(\"\\n\")\n        formatter.dedent()\n        return \"\".join(result[:-1])\n    def format_epilog(self, formatter):\n        return formatter.format_epilog(self.epilog)\n    def format_help(self, formatter=None):\n        if formatter is None:\n            formatter = self.formatter\n        result = []\n        if self.usage:\n            result.append(self.get_usage() + \"\\n\")\n        if self.description:\n            result.append(self.format_description(formatter) + \"\\n\")\n        result.append(self.format_option_help(formatter))\n        result.append(self.format_epilog(formatter))\n        return \"\".join(result)\n    def print_help(self, file=None):\n        \"\"\"print_help(file : file = stdout)\n        Print an extended help message, listing all options and any\n        help text provided with them, to 'file' (default stdout).\n        \"\"\"\n        if file is None:\n            file = sys.stdout\n        file.write(self.format_help())\ndef _match_abbrev(s, wordmap):\n    \"\"\"_match_abbrev(s : string, wordmap : {string : Option}) -> string\n    Return the string key in 'wordmap' for which 's' is an unambiguous\n    abbreviation.  If 's' is found to be ambiguous or doesn't match any of\n    'words', raise BadOptionError.\n    \"\"\"\n    if s in wordmap:\n        return s\n    else:\n        possibilities = [word for word in wordmap.keys()\n                         if word.startswith(s)]\n        if len(possibilities) == 1:\n            return possibilities[0]\n        elif not possibilities:\n            raise BadOptionError(s)\n        else:\n            possibilities.sort()\n            raise AmbiguousOptionError(s, possibilities)\nmake_option = Option\n", "/Lib/browser/html.py": "from _html import *", "/Lib/unittest/test/testmock/testhelpers.py": "import unittest\r\nfrom unittest.mock import (\r\n    call, _Call, create_autospec, MagicMock,\r\n    Mock, ANY, _CallList, patch, PropertyMock\r\n)\r\nfrom datetime import datetime\r\nclass SomeClass(object):\r\n    def one(self, a, b):\r\n        pass\r\n    def two(self):\r\n        pass\r\n    def three(self, a=None):\r\n        pass\r\nclass AnyTest(unittest.TestCase):\r\n    def test_any(self):\r\n        self.assertEqual(ANY, object())\r\n        mock = Mock()\r\n        mock(ANY)\r\n        mock.assert_called_with(ANY)\r\n        mock = Mock()\r\n        mock(foo=ANY)\r\n        mock.assert_called_with(foo=ANY)\r\n    def test_repr(self):\r\n        self.assertEqual(repr(ANY), '<ANY>')\r\n        self.assertEqual(str(ANY), '<ANY>')\r\n    def test_any_and_datetime(self):\r\n        mock = Mock()\r\n        mock(datetime.now(), foo=datetime.now())\r\n        mock.assert_called_with(ANY, foo=ANY)\r\n    def test_any_mock_calls_comparison_order(self):\r\n        mock = Mock()\r\n        d = datetime.now()\r\n        class Foo(object):\r\n            def __eq__(self, other):\r\n                return False\r\n            def __ne__(self, other):\r\n                return True\r\n        for d in datetime.now(), Foo():\r\n            mock.reset_mock()\r\n            mock(d, foo=d, bar=d)\r\n            mock.method(d, zinga=d, alpha=d)\r\n            mock().method(a1=d, z99=d)\r\n            expected = [\r\n                call(ANY, foo=ANY, bar=ANY),\r\n                call.method(ANY, zinga=ANY, alpha=ANY),\r\n                call(), call().method(a1=ANY, z99=ANY)\r\n            ]\r\n            self.assertEqual(expected, mock.mock_calls)\r\n            self.assertEqual(mock.mock_calls, expected)\r\nclass CallTest(unittest.TestCase):\r\n    def test_call_with_call(self):\r\n        kall = _Call()\r\n        self.assertEqual(kall, _Call())\r\n        self.assertEqual(kall, _Call(('',)))\r\n        self.assertEqual(kall, _Call(((),)))\r\n        self.assertEqual(kall, _Call(({},)))\r\n        self.assertEqual(kall, _Call(('', ())))\r\n        self.assertEqual(kall, _Call(('', {})))\r\n        self.assertEqual(kall, _Call(('', (), {})))\r\n        self.assertEqual(kall, _Call(('foo',)))\r\n        self.assertEqual(kall, _Call(('bar', ())))\r\n        self.assertEqual(kall, _Call(('baz', {})))\r\n        self.assertEqual(kall, _Call(('spam', (), {})))\r\n        kall = _Call(((1, 2, 3),))\r\n        self.assertEqual(kall, _Call(((1, 2, 3),)))\r\n        self.assertEqual(kall, _Call(('', (1, 2, 3))))\r\n        self.assertEqual(kall, _Call(((1, 2, 3), {})))\r\n        self.assertEqual(kall, _Call(('', (1, 2, 3), {})))\r\n        kall = _Call(((1, 2, 4),))\r\n        self.assertNotEqual(kall, _Call(('', (1, 2, 3))))\r\n        self.assertNotEqual(kall, _Call(('', (1, 2, 3), {})))\r\n        kall = _Call(('foo', (1, 2, 4),))\r\n        self.assertNotEqual(kall, _Call(('', (1, 2, 4))))\r\n        self.assertNotEqual(kall, _Call(('', (1, 2, 4), {})))\r\n        self.assertNotEqual(kall, _Call(('bar', (1, 2, 4))))\r\n        self.assertNotEqual(kall, _Call(('bar', (1, 2, 4), {})))\r\n        kall = _Call(({'a': 3},))\r\n        self.assertEqual(kall, _Call(('', (), {'a': 3})))\r\n        self.assertEqual(kall, _Call(('', {'a': 3})))\r\n        self.assertEqual(kall, _Call(((), {'a': 3})))\r\n        self.assertEqual(kall, _Call(({'a': 3},)))\r\n    def test_empty__Call(self):\r\n        args = _Call()\r\n        self.assertEqual(args, ())\r\n        self.assertEqual(args, ('foo',))\r\n        self.assertEqual(args, ((),))\r\n        self.assertEqual(args, ('foo', ()))\r\n        self.assertEqual(args, ('foo',(), {}))\r\n        self.assertEqual(args, ('foo', {}))\r\n        self.assertEqual(args, ({},))\r\n    def test_named_empty_call(self):\r\n        args = _Call(('foo', (), {}))\r\n        self.assertEqual(args, ('foo',))\r\n        self.assertEqual(args, ('foo', ()))\r\n        self.assertEqual(args, ('foo',(), {}))\r\n        self.assertEqual(args, ('foo', {}))\r\n        self.assertNotEqual(args, ((),))\r\n        self.assertNotEqual(args, ())\r\n        self.assertNotEqual(args, ({},))\r\n        self.assertNotEqual(args, ('bar',))\r\n        self.assertNotEqual(args, ('bar', ()))\r\n        self.assertNotEqual(args, ('bar', {}))\r\n    def test_call_with_args(self):\r\n        args = _Call(((1, 2, 3), {}))\r\n        self.assertEqual(args, ((1, 2, 3),))\r\n        self.assertEqual(args, ('foo', (1, 2, 3)))\r\n        self.assertEqual(args, ('foo', (1, 2, 3), {}))\r\n        self.assertEqual(args, ((1, 2, 3), {}))\r\n    def test_named_call_with_args(self):\r\n        args = _Call(('foo', (1, 2, 3), {}))\r\n        self.assertEqual(args, ('foo', (1, 2, 3)))\r\n        self.assertEqual(args, ('foo', (1, 2, 3), {}))\r\n        self.assertNotEqual(args, ((1, 2, 3),))\r\n        self.assertNotEqual(args, ((1, 2, 3), {}))\r\n    def test_call_with_kwargs(self):\r\n        args = _Call(((), dict(a=3, b=4)))\r\n        self.assertEqual(args, (dict(a=3, b=4),))\r\n        self.assertEqual(args, ('foo', dict(a=3, b=4)))\r\n        self.assertEqual(args, ('foo', (), dict(a=3, b=4)))\r\n        self.assertEqual(args, ((), dict(a=3, b=4)))\r\n    def test_named_call_with_kwargs(self):\r\n        args = _Call(('foo', (), dict(a=3, b=4)))\r\n        self.assertEqual(args, ('foo', dict(a=3, b=4)))\r\n        self.assertEqual(args, ('foo', (), dict(a=3, b=4)))\r\n        self.assertNotEqual(args, (dict(a=3, b=4),))\r\n        self.assertNotEqual(args, ((), dict(a=3, b=4)))\r\n    def test_call_with_args_call_empty_name(self):\r\n        args = _Call(((1, 2, 3), {}))\r\n        self.assertEqual(args, call(1, 2, 3))\r\n        self.assertEqual(call(1, 2, 3), args)\r\n        self.assertTrue(call(1, 2, 3) in [args])\r\n    def test_call_ne(self):\r\n        self.assertNotEqual(_Call(((1, 2, 3),)), call(1, 2))\r\n        self.assertFalse(_Call(((1, 2, 3),)) != call(1, 2, 3))\r\n        self.assertTrue(_Call(((1, 2), {})) != call(1, 2, 3))\r\n    def test_call_non_tuples(self):\r\n        kall = _Call(((1, 2, 3),))\r\n        for value in 1, None, self, int:\r\n            self.assertNotEqual(kall, value)\r\n            self.assertFalse(kall == value)\r\n    def test_repr(self):\r\n        self.assertEqual(repr(_Call()), 'call()')\r\n        self.assertEqual(repr(_Call(('foo',))), 'call.foo()')\r\n        self.assertEqual(repr(_Call(((1, 2, 3), {'a': 'b'}))),\r\n                         \"call(1, 2, 3, a='b')\")\r\n        self.assertEqual(repr(_Call(('bar', (1, 2, 3), {'a': 'b'}))),\r\n                         \"call.bar(1, 2, 3, a='b')\")\r\n        self.assertEqual(repr(call), 'call')\r\n        self.assertEqual(str(call), 'call')\r\n        self.assertEqual(repr(call()), 'call()')\r\n        self.assertEqual(repr(call(1)), 'call(1)')\r\n        self.assertEqual(repr(call(zz='thing')), \"call(zz='thing')\")\r\n        self.assertEqual(repr(call().foo), 'call().foo')\r\n        self.assertEqual(repr(call(1).foo.bar(a=3).bing),\r\n                         'call().foo.bar().bing')\r\n        self.assertEqual(\r\n            repr(call().foo(1, 2, a=3)),\r\n            \"call().foo(1, 2, a=3)\"\r\n        )\r\n        self.assertEqual(repr(call()()), \"call()()\")\r\n        self.assertEqual(repr(call(1)(2)), \"call()(2)\")\r\n        self.assertEqual(\r\n            repr(call()().bar().baz.beep(1)),\r\n            \"call()().bar().baz.beep(1)\"\r\n        )\r\n    def test_call(self):\r\n        self.assertEqual(call(), ('', (), {}))\r\n        self.assertEqual(call('foo', 'bar', one=3, two=4),\r\n                         ('', ('foo', 'bar'), {'one': 3, 'two': 4}))\r\n        mock = Mock()\r\n        mock(1, 2, 3)\r\n        mock(a=3, b=6)\r\n        self.assertEqual(mock.call_args_list,\r\n                         [call(1, 2, 3), call(a=3, b=6)])\r\n    def test_attribute_call(self):\r\n        self.assertEqual(call.foo(1), ('foo', (1,), {}))\r\n        self.assertEqual(call.bar.baz(fish='eggs'),\r\n                         ('bar.baz', (), {'fish': 'eggs'}))\r\n        mock = Mock()\r\n        mock.foo(1, 2 ,3)\r\n        mock.bar.baz(a=3, b=6)\r\n        self.assertEqual(mock.method_calls,\r\n                         [call.foo(1, 2, 3), call.bar.baz(a=3, b=6)])\r\n    def test_extended_call(self):\r\n        result = call(1).foo(2).bar(3, a=4)\r\n        self.assertEqual(result, ('().foo().bar', (3,), dict(a=4)))\r\n        mock = MagicMock()\r\n        mock(1, 2, a=3, b=4)\r\n        self.assertEqual(mock.call_args, call(1, 2, a=3, b=4))\r\n        self.assertNotEqual(mock.call_args, call(1, 2, 3))\r\n        self.assertEqual(mock.call_args_list, [call(1, 2, a=3, b=4)])\r\n        self.assertEqual(mock.mock_calls, [call(1, 2, a=3, b=4)])\r\n        mock = MagicMock()\r\n        mock.foo(1).bar()().baz.beep(a=6)\r\n        last_call = call.foo(1).bar()().baz.beep(a=6)\r\n        self.assertEqual(mock.mock_calls[-1], last_call)\r\n        self.assertEqual(mock.mock_calls, last_call.call_list())\r\n    def test_call_list(self):\r\n        mock = MagicMock()\r\n        mock(1)\r\n        self.assertEqual(call(1).call_list(), mock.mock_calls)\r\n        mock = MagicMock()\r\n        mock(1).method(2)\r\n        self.assertEqual(call(1).method(2).call_list(),\r\n                         mock.mock_calls)\r\n        mock = MagicMock()\r\n        mock(1).method(2)(3)\r\n        self.assertEqual(call(1).method(2)(3).call_list(),\r\n                         mock.mock_calls)\r\n        mock = MagicMock()\r\n        int(mock(1).method(2)(3).foo.bar.baz(4)(5))\r\n        kall = call(1).method(2)(3).foo.bar.baz(4)(5).__int__()\r\n        self.assertEqual(kall.call_list(), mock.mock_calls)\r\n    def test_call_any(self):\r\n        self.assertEqual(call, ANY)\r\n        m = MagicMock()\r\n        int(m)\r\n        self.assertEqual(m.mock_calls, [ANY])\r\n        self.assertEqual([ANY], m.mock_calls)\r\n    def test_two_args_call(self):\r\n        args = _Call(((1, 2), {'a': 3}), two=True)\r\n        self.assertEqual(len(args), 2)\r\n        self.assertEqual(args[0], (1, 2))\r\n        self.assertEqual(args[1], {'a': 3})\r\n        other_args = _Call(((1, 2), {'a': 3}))\r\n        self.assertEqual(args, other_args)\r\nclass SpecSignatureTest(unittest.TestCase):\r\n    def _check_someclass_mock(self, mock):\r\n        self.assertRaises(AttributeError, getattr, mock, 'foo')\r\n        mock.one(1, 2)\r\n        mock.one.assert_called_with(1, 2)\r\n        self.assertRaises(AssertionError,\r\n                          mock.one.assert_called_with, 3, 4)\r\n        self.assertRaises(TypeError, mock.one, 1)\r\n        mock.two()\r\n        mock.two.assert_called_with()\r\n        self.assertRaises(AssertionError,\r\n                          mock.two.assert_called_with, 3)\r\n        self.assertRaises(TypeError, mock.two, 1)\r\n        mock.three()\r\n        mock.three.assert_called_with()\r\n        self.assertRaises(AssertionError,\r\n                          mock.three.assert_called_with, 3)\r\n        self.assertRaises(TypeError, mock.three, 3, 2)\r\n        mock.three(1)\r\n        mock.three.assert_called_with(1)\r\n        mock.three(a=1)\r\n        mock.three.assert_called_with(a=1)\r\n    def test_basic(self):\r\n        for spec in (SomeClass, SomeClass()):\r\n            mock = create_autospec(spec)\r\n            self._check_someclass_mock(mock)\r\n    def test_create_autospec_return_value(self):\r\n        def f():\r\n            pass\r\n        mock = create_autospec(f, return_value='foo')\r\n        self.assertEqual(mock(), 'foo')\r\n        class Foo(object):\r\n            pass\r\n        mock = create_autospec(Foo, return_value='foo')\r\n        self.assertEqual(mock(), 'foo')\r\n    def test_autospec_reset_mock(self):\r\n        m = create_autospec(int)\r\n        int(m)\r\n        m.reset_mock()\r\n        self.assertEqual(m.__int__.call_count, 0)\r\n    def test_mocking_unbound_methods(self):\r\n        class Foo(object):\r\n            def foo(self, foo):\r\n                pass\r\n        p = patch.object(Foo, 'foo')\r\n        mock_foo = p.start()\r\n        Foo().foo(1)\r\n        mock_foo.assert_called_with(1)\r\n    def test_create_autospec_unbound_methods(self):\r\n        return\r\n        class Foo(object):\r\n            def foo(self):\r\n                pass\r\n        klass = create_autospec(Foo)\r\n        instance = klass()\r\n        self.assertRaises(TypeError, instance.foo, 1)\r\n        klass.foo(1)\r\n        klass.foo.assert_called_with(1)\r\n        self.assertRaises(TypeError, klass.foo)\r\n    def test_create_autospec_keyword_arguments(self):\r\n        class Foo(object):\r\n            a = 3\r\n        m = create_autospec(Foo, a='3')\r\n        self.assertEqual(m.a, '3')\r\n    def test_create_autospec_keyword_only_arguments(self):\r\n        def foo(a, *, b=None):\r\n            pass\r\n        m = create_autospec(foo)\r\n        m(1)\r\n        m.assert_called_with(1)\r\n        self.assertRaises(TypeError, m, 1, 2)\r\n        m(2, b=3)\r\n        m.assert_called_with(2, b=3)\r\n    def test_function_as_instance_attribute(self):\r\n        obj = SomeClass()\r\n        def f(a):\r\n            pass\r\n        obj.f = f\r\n        mock = create_autospec(obj)\r\n        mock.f('bing')\r\n        mock.f.assert_called_with('bing')\r\n    def test_spec_as_list(self):\r\n        mock = create_autospec([])\r\n        mock.append('foo')\r\n        mock.append.assert_called_with('foo')\r\n        self.assertRaises(AttributeError, getattr, mock, 'foo')\r\n        class Foo(object):\r\n            foo = []\r\n        mock = create_autospec(Foo)\r\n        mock.foo.append(3)\r\n        mock.foo.append.assert_called_with(3)\r\n        self.assertRaises(AttributeError, getattr, mock.foo, 'foo')\r\n    def test_attributes(self):\r\n        class Sub(SomeClass):\r\n            attr = SomeClass()\r\n        sub_mock = create_autospec(Sub)\r\n        for mock in (sub_mock, sub_mock.attr):\r\n            self._check_someclass_mock(mock)\r\n    def test_builtin_functions_types(self):\r\n        class BuiltinSubclass(list):\r\n            def bar(self, arg):\r\n                pass\r\n            sorted = sorted\r\n            attr = {}\r\n        mock = create_autospec(BuiltinSubclass)\r\n        mock.append(3)\r\n        mock.append.assert_called_with(3)\r\n        self.assertRaises(AttributeError, getattr, mock.append, 'foo')\r\n        mock.bar('foo')\r\n        mock.bar.assert_called_with('foo')\r\n        self.assertRaises(TypeError, mock.bar, 'foo', 'bar')\r\n        self.assertRaises(AttributeError, getattr, mock.bar, 'foo')\r\n        mock.sorted([1, 2])\r\n        mock.sorted.assert_called_with([1, 2])\r\n        self.assertRaises(AttributeError, getattr, mock.sorted, 'foo')\r\n        mock.attr.pop(3)\r\n        mock.attr.pop.assert_called_with(3)\r\n        self.assertRaises(AttributeError, getattr, mock.attr, 'foo')\r\n    def test_method_calls(self):\r\n        class Sub(SomeClass):\r\n            attr = SomeClass()\r\n        mock = create_autospec(Sub)\r\n        mock.one(1, 2)\r\n        mock.two()\r\n        mock.three(3)\r\n        expected = [call.one(1, 2), call.two(), call.three(3)]\r\n        self.assertEqual(mock.method_calls, expected)\r\n        mock.attr.one(1, 2)\r\n        mock.attr.two()\r\n        mock.attr.three(3)\r\n        expected.extend(\r\n            [call.attr.one(1, 2), call.attr.two(), call.attr.three(3)]\r\n        )\r\n        self.assertEqual(mock.method_calls, expected)\r\n    def test_magic_methods(self):\r\n        class BuiltinSubclass(list):\r\n            attr = {}\r\n        mock = create_autospec(BuiltinSubclass)\r\n        self.assertEqual(list(mock), [])\r\n        self.assertRaises(TypeError, int, mock)\r\n        self.assertRaises(TypeError, int, mock.attr)\r\n        self.assertEqual(list(mock), [])\r\n        self.assertIsInstance(mock['foo'], MagicMock)\r\n        self.assertIsInstance(mock.attr['foo'], MagicMock)\r\n    def test_spec_set(self):\r\n        class Sub(SomeClass):\r\n            attr = SomeClass()\r\n        for spec in (Sub, Sub()):\r\n            mock = create_autospec(spec, spec_set=True)\r\n            self._check_someclass_mock(mock)\r\n            self.assertRaises(AttributeError, setattr, mock, 'foo', 'bar')\r\n            self.assertRaises(AttributeError, setattr, mock.attr, 'foo', 'bar')\r\n    def test_descriptors(self):\r\n        class Foo(object):\r\n            @classmethod\r\n            def f(cls, a, b):\r\n                pass\r\n            @staticmethod\r\n            def g(a, b):\r\n                pass\r\n        class Bar(Foo):\r\n            pass\r\n        class Baz(SomeClass, Bar):\r\n            pass\r\n        for spec in (Foo, Foo(), Bar, Bar(), Baz, Baz()):\r\n            mock = create_autospec(spec)\r\n            mock.f(1, 2)\r\n            mock.f.assert_called_once_with(1, 2)\r\n            mock.g(3, 4)\r\n            mock.g.assert_called_once_with(3, 4)\r\n    def test_recursive(self):\r\n        class A(object):\r\n            def a(self):\r\n                pass\r\n            foo = 'foo bar baz'\r\n            bar = foo\r\n        A.B = A\r\n        mock = create_autospec(A)\r\n        mock()\r\n        self.assertFalse(mock.B.called)\r\n        mock.a()\r\n        mock.B.a()\r\n        self.assertEqual(mock.method_calls, [call.a(), call.B.a()])\r\n        self.assertIs(A.foo, A.bar)\r\n        self.assertIsNot(mock.foo, mock.bar)\r\n        mock.foo.lower()\r\n        self.assertRaises(AssertionError, mock.bar.lower.assert_called_with)\r\n    def test_spec_inheritance_for_classes(self):\r\n        class Foo(object):\r\n            def a(self):\r\n                pass\r\n            class Bar(object):\r\n                def f(self):\r\n                    pass\r\n        class_mock = create_autospec(Foo)\r\n        self.assertIsNot(class_mock, class_mock())\r\n        for this_mock in class_mock, class_mock():\r\n            this_mock.a()\r\n            this_mock.a.assert_called_with()\r\n            self.assertRaises(TypeError, this_mock.a, 'foo')\r\n            self.assertRaises(AttributeError, getattr, this_mock, 'b')\r\n        instance_mock = create_autospec(Foo())\r\n        instance_mock.a()\r\n        instance_mock.a.assert_called_with()\r\n        self.assertRaises(TypeError, instance_mock.a, 'foo')\r\n        self.assertRaises(AttributeError, getattr, instance_mock, 'b')\r\n        self.assertRaises(TypeError, instance_mock)\r\n        instance_mock.Bar.f()\r\n        instance_mock.Bar.f.assert_called_with()\r\n        self.assertRaises(AttributeError, getattr, instance_mock.Bar, 'g')\r\n        instance_mock.Bar().f()\r\n        instance_mock.Bar().f.assert_called_with()\r\n        self.assertRaises(AttributeError, getattr, instance_mock.Bar(), 'g')\r\n    def test_inherit(self):\r\n        class Foo(object):\r\n            a = 3\r\n        Foo.Foo = Foo\r\n        mock = create_autospec(Foo)\r\n        instance = mock()\r\n        self.assertRaises(AttributeError, getattr, instance, 'b')\r\n        attr_instance = mock.Foo()\r\n        self.assertRaises(AttributeError, getattr, attr_instance, 'b')\r\n        mock = create_autospec(Foo())\r\n        self.assertRaises(AttributeError, getattr, mock, 'b')\r\n        self.assertRaises(TypeError, mock)\r\n        call_result = mock.Foo()\r\n        self.assertRaises(AttributeError, getattr, call_result, 'b')\r\n    def test_builtins(self):\r\n        create_autospec(1)\r\n        create_autospec(int)\r\n        create_autospec('foo')\r\n        create_autospec(str)\r\n        create_autospec({})\r\n        create_autospec(dict)\r\n        create_autospec([])\r\n        create_autospec(list)\r\n        create_autospec(set())\r\n        create_autospec(set)\r\n        create_autospec(1.0)\r\n        create_autospec(float)\r\n        create_autospec(1j)\r\n        create_autospec(complex)\r\n        create_autospec(False)\r\n        create_autospec(True)\r\n    def test_function(self):\r\n        def f(a, b):\r\n            pass\r\n        mock = create_autospec(f)\r\n        self.assertRaises(TypeError, mock)\r\n        mock(1, 2)\r\n        mock.assert_called_with(1, 2)\r\n        f.f = f\r\n        mock = create_autospec(f)\r\n        self.assertRaises(TypeError, mock.f)\r\n        mock.f(3, 4)\r\n        mock.f.assert_called_with(3, 4)\r\n    def test_skip_attributeerrors(self):\r\n        class Raiser(object):\r\n            def __get__(self, obj, type=None):\r\n                if obj is None:\r\n                    raise AttributeError('Can only be accessed via an instance')\r\n        class RaiserClass(object):\r\n            raiser = Raiser()\r\n            @staticmethod\r\n            def existing(a, b):\r\n                return a + b\r\n        s = create_autospec(RaiserClass)\r\n        self.assertRaises(TypeError, lambda x: s.existing(1, 2, 3))\r\n        s.existing(1, 2)\r\n        self.assertRaises(AttributeError, lambda: s.nonexisting)\r\n        obj = s.raiser\r\n        obj.foo, obj.bar\r\n    def test_signature_class(self):\r\n        class Foo(object):\r\n            def __init__(self, a, b=3):\r\n                pass\r\n        mock = create_autospec(Foo)\r\n        self.assertRaises(TypeError, mock)\r\n        mock(1)\r\n        mock.assert_called_once_with(1)\r\n        mock(4, 5)\r\n        mock.assert_called_with(4, 5)\r\n    def test_class_with_no_init(self):\r\n        class Foo(object):\r\n            pass\r\n        create_autospec(Foo)\r\n    def test_signature_callable(self):\r\n        class Callable(object):\r\n            def __init__(self):\r\n                pass\r\n            def __call__(self, a):\r\n                pass\r\n        mock = create_autospec(Callable)\r\n        mock()\r\n        mock.assert_called_once_with()\r\n        self.assertRaises(TypeError, mock, 'a')\r\n        instance = mock()\r\n        self.assertRaises(TypeError, instance)\r\n        instance(a='a')\r\n        instance.assert_called_once_with(a='a')\r\n        instance('a')\r\n        instance.assert_called_with('a')\r\n        mock = create_autospec(Callable())\r\n        mock(a='a')\r\n        mock.assert_called_once_with(a='a')\r\n        self.assertRaises(TypeError, mock)\r\n        mock('a')\r\n        mock.assert_called_with('a')\r\n    def test_signature_noncallable(self):\r\n        class NonCallable(object):\r\n            def __init__(self):\r\n                pass\r\n        mock = create_autospec(NonCallable)\r\n        instance = mock()\r\n        mock.assert_called_once_with()\r\n        self.assertRaises(TypeError, mock, 'a')\r\n        self.assertRaises(TypeError, instance)\r\n        self.assertRaises(TypeError, instance, 'a')\r\n        mock = create_autospec(NonCallable())\r\n        self.assertRaises(TypeError, mock)\r\n        self.assertRaises(TypeError, mock, 'a')\r\n    def test_create_autospec_none(self):\r\n        class Foo(object):\r\n            bar = None\r\n        mock = create_autospec(Foo)\r\n        none = mock.bar\r\n        self.assertNotIsInstance(none, type(None))\r\n        none.foo()\r\n        none.foo.assert_called_once_with()\r\n    def test_autospec_functions_with_self_in_odd_place(self):\r\n        class Foo(object):\r\n            def f(a, self):\r\n                pass\r\n        a = create_autospec(Foo)\r\n        a.f(self=10)\r\n        a.f.assert_called_with(self=10)\r\n    def test_autospec_property(self):\r\n        class Foo(object):\r\n            @property\r\n            def foo(self):\r\n                return 3\r\n        foo = create_autospec(Foo)\r\n        mock_property = foo.foo\r\n        self.assertTrue(isinstance(mock_property, MagicMock))\r\n        mock_property(1, 2, 3)\r\n        mock_property.abc(4, 5, 6)\r\n        mock_property.assert_called_once_with(1, 2, 3)\r\n        mock_property.abc.assert_called_once_with(4, 5, 6)\r\n    def test_autospec_slots(self):\r\n        class Foo(object):\r\n            __slots__ = ['a']\r\n        foo = create_autospec(Foo)\r\n        mock_slot = foo.a\r\n        mock_slot(1, 2, 3)\r\n        mock_slot.abc(4, 5, 6)\r\n        mock_slot.assert_called_once_with(1, 2, 3)\r\n        mock_slot.abc.assert_called_once_with(4, 5, 6)\r\nclass TestCallList(unittest.TestCase):\r\n    def test_args_list_contains_call_list(self):\r\n        mock = Mock()\r\n        self.assertIsInstance(mock.call_args_list, _CallList)\r\n        mock(1, 2)\r\n        mock(a=3)\r\n        mock(3, 4)\r\n        mock(b=6)\r\n        for kall in call(1, 2), call(a=3), call(3, 4), call(b=6):\r\n            self.assertTrue(kall in mock.call_args_list)\r\n        calls = [call(a=3), call(3, 4)]\r\n        self.assertTrue(calls in mock.call_args_list)\r\n        calls = [call(1, 2), call(a=3)]\r\n        self.assertTrue(calls in mock.call_args_list)\r\n        calls = [call(3, 4), call(b=6)]\r\n        self.assertTrue(calls in mock.call_args_list)\r\n        calls = [call(3, 4)]\r\n        self.assertTrue(calls in mock.call_args_list)\r\n        self.assertFalse(call('fish') in mock.call_args_list)\r\n        self.assertFalse([call('fish')] in mock.call_args_list)\r\n    def test_call_list_str(self):\r\n        mock = Mock()\r\n        mock(1, 2)\r\n        mock.foo(a=3)\r\n        mock.foo.bar().baz('fish', cat='dog')\r\n        expected = (\r\n            \"[call(1, 2),\\n\"\r\n            \" call.foo(a=3),\\n\"\r\n            \" call.foo.bar(),\\n\"\r\n            \" call.foo.bar().baz('fish', cat='dog')]\"\r\n        )\r\n        self.assertEqual(str(mock.mock_calls), expected)\r\n    def test_propertymock(self):\r\n        p = patch('%s.SomeClass.one' % __name__, new_callable=PropertyMock)\r\n        mock = p.start()\r\n        try:\r\n            SomeClass.one\r\n            mock.assert_called_once_with()\r\n            s = SomeClass()\r\n            s.one\r\n            mock.assert_called_with()\r\n            self.assertEqual(mock.mock_calls, [call(), call()])\r\n            s.one = 3\r\n            self.assertEqual(mock.mock_calls, [call(), call(), call(3)])\r\n        finally:\r\n            p.stop()\r\n    def test_propertymock_returnvalue(self):\r\n        m = MagicMock()\r\n        p = PropertyMock()\r\n        type(m).foo = p\r\n        returned = m.foo\r\n        p.assert_called_once_with()\r\n        self.assertIsInstance(returned, MagicMock)\r\n        self.assertNotIsInstance(returned, PropertyMock)\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/itertools.py": "import operator\nclass accumulate:\n    def __init__(self, iterable, func = operator.add):\n        self.it = iter(iterable)\n        self._total = None\n        self.func = func\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if not self._total:\n            self._total = next(self.it)\n            return self._total\n        else:\n            element = next(self.it)\n            try:\n                self._total = self.func(self._total, element)\n            except:\n                raise TypeError(\"unsupported operand type\")\n            return self._total\nclass chain:\n    def __init__(self, *iterables):\n        self._iterables_iter = iter(map(iter, iterables))\n        self._cur_iterable_iter = iter([])\n    def __iter__(self):\n        return self\n    def __next__(self):\n        while True:\n            try:\n                return next(self._cur_iterable_iter)\n            except StopIteration:\n                self._cur_iterable_iter = next(self._iterables_iter)\n    @classmethod\n    def from_iterable(cls, iterable):\n        for it in iterable:\n            for element in it:\n                yield element\nclass combinations:\n    def __init__(self, iterable, r):\n        self.pool = tuple(iterable)\n        self.n = len(self.pool)\n        self.r = r\n        self.indices = list(range(self.r))\n        self.zero = False\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.r > self.n:\n            raise StopIteration\n        if not self.zero:\n            self.zero = True\n            return tuple(self.pool[i] for i in self.indices)\n        else:\n            try:\n                for i in reversed(range(self.r)):\n                    if self.indices[i] != i + self.n - self.r:\n                        break\n                self.indices[i] += 1\n                for j in range(i+1, self.r):\n                    self.indices[j] = self.indices[j-1] + 1\n                return tuple(self.pool[i] for i in self.indices)\n            except:\n                raise StopIteration\nclass combinations_with_replacement:\n    def __init__(self, iterable, r):\n        self.pool = tuple(iterable)\n        self.n = len(self.pool)\n        self.r = r\n        self.indices = [0] * self.r\n        self.zero = False\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if not self.n and self.r:\n            raise StopIteration\n        if not self.zero:\n            self.zero = True\n            return tuple(self.pool[i] for i in self.indices)\n        else:\n            try:\n                for i in reversed(range(self.r)):\n                    if self.indices[i] != self.n - 1:\n                        break\n                self.indices[i:] = [self.indices[i] + 1] * (self.r - i)\n                return tuple(self.pool[i] for i in self.indices)\n            except:\n                raise StopIteration\nclass compress:\n    def __init__(self, data, selectors):\n        self.data = iter(data)\n        self.selectors = iter(selectors)\n    def __iter__(self):\n        return self\n    def __next__(self):\n        while True:\n            next_item = next(self.data)\n            next_selector = next(self.selectors)\n            if bool(next_selector):\n                return next_item\nclass count:\n    \"\"\"\n    Input is an int or a float. The original Python 3 implementation\n    includes also complex numbers... but it still is not implemented \n    in Brython as complex type is NotImplemented\n    \"\"\"\n    def __init__(self, start = 0, step = 1):\n        if not isinstance(start, (int, float)):\n            raise TypeError('a number is required')\n        self.times = start - step\n        self.step = step\n    def __iter__(self):\n        return self\n    def __next__(self):\n        self.times += self.step\n        return self.times\n    def __repr__(self):\n        return 'count(%d)' % (self.times + self.step)\nclass cycle:\n    def __init__(self, iterable):\n        self._cur_iter = iter(iterable)\n        self._saved = []\n        self._must_save = True\n    def __iter__(self):\n        return self\n    def __next__(self):\n        try:\n            next_elt = next(self._cur_iter)\n            if self._must_save:\n                self._saved.append(next_elt)\n        except StopIteration:\n            self._cur_iter = iter(self._saved)\n            next_elt = next(self._cur_iter)\n            self._must_save = False\n        return next_elt\nclass dropwhile:\n    def __init__(self, predicate, iterable):\n        self._predicate = predicate\n        self._iter = iter(iterable)\n        self._dropped = False\n    def __iter__(self):\n        return self\n    def __next__(self):\n        value = next(self._iter)\n        if self._dropped:\n            return value\n        while self._predicate(value):\n            value = next(self._iter)\n        self._dropped = True\n        return value\nclass filterfalse:\n    def __init__(self, predicate, iterable):\n        self._iter = iter(iterable)\n        if predicate is None:\n            self._predicate = bool\n        else:\n            self._predicate = predicate\n    def __iter__(self):\n        return self\n    def __next__(self):\n        next_elt = next(self._iter)\n        while True:\n            if not self._predicate(next_elt):\n                return next_elt\n            next_elt = next(self._iter)\nclass groupby:\n    pass\nclass islice:\n    def __init__(self, iterable, *args):\n        s = slice(*args)\n        self.start, self.stop, self.step = s.start or 0, s.stop, s.step\n        if not isinstance(self.start, int):\n           raise ValueError(\"Start argument must be an integer\")\n        if self.stop != None and not isinstance(self.stop, int):\n            raise ValueError(\"Stop argument must be an integer or None\")\n        if self.step is None:\n            self.step = 1\n        if self.start<0 or (self.stop != None and self.stop<0\n           ) or self.step<=0:\n            raise ValueError(\"indices for islice() must be positive\")\n        self.it = iter(iterable)\n        self.donext = None\n        self.cnt = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        nextindex = self.start\n        if self.stop != None and nextindex >= self.stop:\n            raise StopIteration\n        while self.cnt <= nextindex:\n            nextitem = next(self.it)\n            self.cnt += 1\n        self.start += self.step \n        return nextitem\nclass permutations:\n    def __init__(self, iterable, r = None):\n        self.pool = tuple(iterable)\n        self.n = len(self.pool)\n        self.r = self.n if r is None else r\n        self.indices = list(range(self.n))\n        self.cycles = list(range(self.n, self.n - r, -1))\n        self.zero = False\n        self.stop = False\n    def __iter__(self):\n        return self\n    def __next__(self):\n        indices = self.indices\n        if self.r > self.n:\n            raise StopIteration\n        if not self.zero:\n            self.zero = True\n            return tuple(self.pool[i] for i in indices[:self.r])\n        i = self.r - 1\n        while i >= 0:\n            j = self.cycles[i] - 1\n            if j > 0:\n                self.cycles[i] = j\n                indices[i], indices[-j] = indices[-j], indices[i]\n                return tuple(self.pool[i] for i in indices[:self.r])\n            self.cycles[i] = len(indices) - i\n            n1 = len(indices) - 1\n            assert n1 >= 0\n            num = indices[i]\n            for k in range(i, n1):\n                indices[k] = indices[k+1]\n            indices[n1] = num\n            i -= 1\n        raise StopIteration\nclass product:\n    def __init__(self, *args, **kw):\n        if len(kw) > 1:\n            raise TypeError(\"product() takes at most 1 argument (%d given)\" %\n                             len(kw))\n        self.repeat = kw.get('repeat', 1)\n        if not isinstance(self.repeat, int):\n            raise TypeError(\"integer argument expected, got %s\" %\n                             type(self.repeat))\n        self.gears = [x for x in args] * self.repeat\n        self.num_gears = len(self.gears)\n        self.indicies = [(0, len(self.gears[x]))\n                         for x in range(0, self.num_gears)]\n        self.cont = True\n        self.zero = False\n    def roll_gears(self):\n        should_carry = True\n        for n in range(0, self.num_gears):\n            nth_gear = self.num_gears - n - 1\n            if should_carry:\n                count, lim = self.indicies[nth_gear]\n                count += 1\n                if count == lim and nth_gear == 0:\n                    self.cont = False\n                if count == lim:\n                    should_carry = True\n                    count = 0\n                else:\n                    should_carry = False\n                self.indicies[nth_gear] = (count, lim)  \n            else:\n                break\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.zero:\n            raise StopIteration\n        if self.repeat > 0:\n            if not self.cont:\n                raise StopIteration\n            l = []\n            for x in range(0, self.num_gears):\n                index, limit = self.indicies[x]\n                l.append(self.gears[x][index])\n            self.roll_gears()\n            return tuple(l)\n        elif self.repeat == 0:\n            self.zero = True\n            return ()\n        else:\n            raise ValueError(\"repeat argument cannot be negative\")\nclass repeat:\n    def __init__(self, obj, times=None):\n        self._obj = obj\n        if times is not None:\n            range(times) # Raise a TypeError\n            if times < 0:\n                times = 0\n        self._times = times\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self._times is not None:\n            if self._times <= 0: \n                raise StopIteration()\n            self._times -= 1\n        return self._obj\n    def __repr__(self):\n        if self._times is not None:\n            return 'repeat(%r, %r)' % (self._obj, self._times)\n        else:\n            return 'repeat(%r)' % (self._obj,)\n    def __len__(self):\n        if self._times == -1 or self._times is None:\n            raise TypeError(\"len() of uniszed object\")\n        return self._times\nclass starmap(object):\n    def __init__(self, function, iterable):\n        self._func = function\n        self._iter = iter(iterable)\n    def __iter__(self):\n        return self\n    def __next__(self):\n        t = next(self._iter)\n        return self._func(*t)\nclass takewhile(object):\n    def __init__(self, predicate, iterable):\n        self._predicate = predicate\n        self._iter = iter(iterable)\n    def __iter__(self):\n        return self\n    def __next__(self):\n        value = next(self._iter)\n        if not self._predicate(value):\n            raise StopIteration()\n        return value\nclass TeeData(object):\n    def __init__(self, iterator):\n        self.data = []\n        self._iter = iterator\n    def __getitem__(self, i):\n        while i>= len(self.data):\n            self.data.append(next(self._iter))\n        return self.data[i]\nclass TeeObject(object):\n    def __init__(self, iterable=None, tee_data=None):\n        if tee_data:\n            self.tee_data = tee_data\n            self.pos = 0\n        elif isinstance(iterable, TeeObject):\n            self.tee_data = iterable.tee_data\n            self.pos = iterable.pos\n        else:\n            self.tee_data = TeeData(iter(iterable))\n            self.pos = 0\n    def __next__(self):\n        data = self.tee_data[self.pos]\n        self.pos += 1\n        return data\n    def __iter__(self):\n        return self\ndef tee(iterable, n=2):\n    if isinstance(iterable, TeeObject):\n        return tuple([iterable] +\n        [TeeObject(tee_data=iterable.tee_data) for i in range(n - 1)])\n    tee_data = TeeData(iter(iterable))\n    return tuple([TeeObject(tee_data=tee_data) for i in range(n)])\nclass zip_longest:\n    def __init__(self, *args, fillvalue = None):\n        self.args = args\n        self.fillvalue = fillvalue\n        self.max_length = max([len(arg) for arg in self.args])\n        self.units = len(args)\n        self.counter = 0\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.counter == self.max_length:\n            raise StopIteration\n        else:\n            temp = []\n            for i in range(self.units):\n                try:\n                    temp.append(self.args[i][self.counter])\n                except:\n                    temp.append(self.fillvalue)\n            self.counter = self.counter + 1\n            return tuple(temp)", "/Lib/os.py": "r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.\nThis exports:\n  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix', 'nt', 'os2' or 'ce'.\n  - os.curdir is a string representing the current directory ('.' or ':')\n  - os.pardir is a string representing the parent directory ('..' or '::')\n  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n\"\"\"\nimport sys, errno\nimport stat as st\n_names = sys.builtin_module_names\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\ndef _exists(name):\n    return name in globals()\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']\nif 'posix' in _names:\n    name = 'posix'\n    linesep = '\\n'\n    from posix import *\n    try:\n        from posix import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    import posixpath as path\n    try:\n        from posix import _have_functions\n    except ImportError:\n        pass\nelif 'nt' in _names:\n    name = 'nt'\n    linesep = '\\r\\n'\n    from nt import *\n    try:\n        from nt import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    import ntpath as path\n    import nt\n    __all__.extend(_get_exports_list(nt))\n    del nt\n    try:\n        from nt import _have_functions\n    except ImportError:\n        pass\nelif 'os2' in _names:\n    name = 'os2'\n    linesep = '\\r\\n'\n    from os2 import *\n    try:\n        from os2 import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    if sys.version.find('EMX GCC') == -1:\n        import ntpath as path\n    else:\n        import os2emxpath as path\n        from _emx_link import link\n    import os2\n    __all__.extend(_get_exports_list(os2))\n    del os2\n    try:\n        from os2 import _have_functions\n    except ImportError:\n        pass\nelif 'ce' in _names:\n    name = 'ce'\n    linesep = '\\r\\n'\n    from ce import *\n    try:\n        from ce import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    import ntpath as path\n    import ce\n    __all__.extend(_get_exports_list(ce))\n    del ce\n    try:\n        from ce import _have_functions\n    except ImportError:\n        pass\nelse:\n    raise ImportError('no os specific module found')\nsys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\ndel _names\nif _exists(\"_have_functions\"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    _add(\"HAVE_FCHMODAT\",   \"chmod\")\n    _add(\"HAVE_FCHOWNAT\",   \"chown\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_FUTIMESAT\",  \"utime\")\n    _add(\"HAVE_LINKAT\",     \"link\")\n    _add(\"HAVE_MKDIRAT\",    \"mkdir\")\n    _add(\"HAVE_MKFIFOAT\",   \"mkfifo\")\n    _add(\"HAVE_MKNODAT\",    \"mknod\")\n    _add(\"HAVE_OPENAT\",     \"open\")\n    _add(\"HAVE_READLINKAT\", \"readlink\")\n    _add(\"HAVE_RENAMEAT\",   \"rename\")\n    _add(\"HAVE_SYMLINKAT\",  \"symlink\")\n    _add(\"HAVE_UNLINKAT\",   \"unlink\")\n    _add(\"HAVE_UNLINKAT\",   \"rmdir\")\n    _add(\"HAVE_UTIMENSAT\",  \"utime\")\n    supports_dir_fd = _set\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    supports_effective_ids = _set\n    _set = set()\n    _add(\"HAVE_FCHDIR\",     \"chdir\")\n    _add(\"HAVE_FCHMOD\",     \"chmod\")\n    _add(\"HAVE_FCHOWN\",     \"chown\")\n    _add(\"HAVE_FDOPENDIR\",  \"listdir\")\n    _add(\"HAVE_FEXECVE\",    \"execve\")\n    _set.add(stat) # fstat always works\n    _add(\"HAVE_FTRUNCATE\",  \"truncate\")\n    _add(\"HAVE_FUTIMENS\",   \"utime\")\n    _add(\"HAVE_FUTIMES\",    \"utime\")\n    _add(\"HAVE_FPATHCONF\",  \"pathconf\")\n    if _exists(\"statvfs\") and _exists(\"fstatvfs\"): # mac os x10.3\n        _add(\"HAVE_FSTATVFS\", \"statvfs\")\n    supports_fd = _set\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    _add(\"HAVE_FCHOWNAT\",   \"chown\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_LCHFLAGS\",   \"chflags\")\n    _add(\"HAVE_LCHMOD\",     \"chmod\")\n    if _exists(\"lchown\"): # mac os x10.3\n        _add(\"HAVE_LCHOWN\", \"chown\")\n    _add(\"HAVE_LINKAT\",     \"link\")\n    _add(\"HAVE_LUTIMES\",    \"utime\")\n    _add(\"HAVE_LSTAT\",      \"stat\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_UTIMENSAT\",  \"utime\")\n    _add(\"MS_WINDOWS\",      \"stat\")\n    supports_follow_symlinks = _set\n    del _set\n    del _have_functions\n    del _globals\n    del _add\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\ndef _get_masked_mode(mode):\n    mask = umask(0)\n    umask(mask)\n    return mode & ~mask\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(path [, mode=0o777][, exist_ok=False])\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist. If the\n    target directory with the same mode as we specified already exists,\n    raises an OSError if exist_ok is False, otherwise no exception is\n    raised.  This is recursive.\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    if head and tail and not path.exists(head):\n        try:\n            makedirs(head, mode, exist_ok)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise\n        if tail == curdir:           # xxx/newdir/. exists if xxx/newdir exists\n            return\n    try:\n        mkdir(name, mode)\n    except OSError as e:\n        dir_exists = path.isdir(name)\n        expected_mode = _get_masked_mode(mode)\n        if dir_exists:\n            actual_mode = st.S_IMODE(lstat(name).st_mode) & ~st.S_ISGID\n        else:\n            actual_mode = -1\n        if not (e.errno == errno.EEXIST and exist_ok and dir_exists and\n                actual_mode == expected_mode):\n            if dir_exists and actual_mode != expected_mode:\n                e.strerror += ' (mode %o != expected mode %o)' % (\n                        actual_mode, expected_mode)\n            raise\ndef removedirs(name):\n    \"\"\"removedirs(path)\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n    \"\"\"\n    rmdir(name)\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    while head and tail:\n        try:\n            rmdir(head)\n        except error:\n            break\n        head, tail = path.split(head)\ndef renames(old, new):\n    \"\"\"renames(old, new)\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned way until either the\n    whole path is consumed or a nonempty directory is found.\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n    \"\"\"\n    head, tail = path.split(new)\n    if head and tail and not path.exists(head):\n        makedirs(head)\n    rename(old, new)\n    head, tail = path.split(old)\n    if head and tail:\n        try:\n            removedirs(head)\n        except error:\n            pass\n__all__.extend([\"makedirs\", \"removedirs\", \"renames\"])\ndef walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n        dirpath, dirnames, filenames\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n    If optional arg 'topdown' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune\n    the search, or to impose a specific order of visiting.  Modifying\n    dirnames when topdown is false is ineffective, since the directories in\n    dirnames have already been generated by the time dirnames itself is\n    generated.\n    By default errors from the os.listdir() call are ignored.  If\n    optional arg 'onerror' is specified, it should be a function; it\n    will be called with one argument, an os.error instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n    By default, os.walk does not follow symbolic links to subdirectories on\n    systems that support them.  In order to get this functionality, set the\n    optional argument 'followlinks' to true.\n    Caution:  if you pass a relative pathname for top, don't change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn't\n    either.\n    Example:\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk('python/Lib/email'):\n        print(root, \"consumes\", end=\"\")\n        print(sum([getsize(join(root, name)) for name in files]), end=\"\")\n        print(\"bytes in\", len(files), \"non-directory files\")\n        if 'CVS' in dirs:\n            dirs.remove('CVS')  # don't visit CVS directories\n    \"\"\"\n    islink, join, isdir = path.islink, path.join, path.isdir\n    try:\n        names = listdir(top)\n    except error as err:\n        if onerror is not None:\n            onerror(err)\n        return\n    dirs, nondirs = [], []\n    for name in names:\n        if isdir(join(top, name)):\n            dirs.append(name)\n        else:\n            nondirs.append(name)\n    if topdown:\n        yield top, dirs, nondirs\n    for name in dirs:\n        new_path = join(top, name)\n        if followlinks or not islink(new_path):\n            yield from walk(new_path, topdown, onerror, followlinks)\n    if not topdown:\n        yield top, dirs, nondirs\n__all__.append(\"walk\")\nif {open, stat} <= supports_dir_fd and {listdir, stat} <= supports_fd:\n    def fwalk(top=\".\", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):\n        \"\"\"Directory tree generator.\n        This behaves exactly like walk(), except that it yields a 4-tuple\n            dirpath, dirnames, filenames, dirfd\n        `dirpath`, `dirnames` and `filenames` are identical to walk() output,\n        and `dirfd` is a file descriptor referring to the directory `dirpath`.\n        The advantage of fwalk() over walk() is that it's safe against symlink\n        races (when follow_symlinks is False).\n        If dir_fd is not None, it should be a file descriptor open to a directory,\n          and top should be relative; top will then be relative to that directory.\n          (dir_fd is always supported for fwalk.)\n        Caution:\n        Since fwalk() yields file descriptors, those are only valid until the\n        next iteration step, so you should dup() them if you want to keep them\n        for a longer period.\n        Example:\n        import os\n        for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n            print(root, \"consumes\", end=\"\")\n            print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),\n                  end=\"\")\n            print(\"bytes in\", len(files), \"non-directory files\")\n            if 'CVS' in dirs:\n                dirs.remove('CVS')  # don't visit CVS directories\n        \"\"\"\n        orig_st = stat(top, follow_symlinks=False, dir_fd=dir_fd)\n        topfd = open(top, O_RDONLY, dir_fd=dir_fd)\n        try:\n            if (follow_symlinks or (st.S_ISDIR(orig_st.st_mode) and\n                                    path.samestat(orig_st, stat(topfd)))):\n                yield from _fwalk(topfd, top, topdown, onerror, follow_symlinks)\n        finally:\n            close(topfd)\n    def _fwalk(topfd, toppath, topdown, onerror, follow_symlinks):\n        names = listdir(topfd)\n        dirs, nondirs = [], []\n        for name in names:\n            try:\n                if st.S_ISDIR(stat(name, dir_fd=topfd).st_mode):\n                    dirs.append(name)\n                else:\n                    nondirs.append(name)\n            except FileNotFoundError:\n                try:\n                    if st.S_ISLNK(stat(name, dir_fd=topfd, follow_symlinks=False)\n                                .st_mode):\n                        nondirs.append(name)\n                except FileNotFoundError:\n                    continue\n        if topdown:\n            yield toppath, dirs, nondirs, topfd\n        for name in dirs:\n            try:\n                orig_st = stat(name, dir_fd=topfd, follow_symlinks=follow_symlinks)\n                dirfd = open(name, O_RDONLY, dir_fd=topfd)\n            except error as err:\n                if onerror is not None:\n                    onerror(err)\n                return\n            try:\n                if follow_symlinks or path.samestat(orig_st, stat(dirfd)):\n                    dirpath = path.join(toppath, name)\n                    yield from _fwalk(dirfd, dirpath, topdown, onerror, follow_symlinks)\n            finally:\n                close(dirfd)\n        if not topdown:\n            yield toppath, dirs, nondirs, topfd\n    __all__.append(\"fwalk\")\ntry:\n    environ\nexcept NameError:\n    environ = {}\ndef execl(file, *args):\n    \"\"\"execl(file, *args)\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\ndef _execvpe(file, args, env=None):\n    if env is not None:\n        exec_func = execve\n        argrest = (args, env)\n    else:\n        exec_func = execv\n        argrest = (args,)\n        env = environ\n    head, tail = path.split(file)\n    if head:\n        exec_func(file, *argrest)\n        return\n    last_exc = saved_exc = None\n    saved_tb = None\n    path_list = get_exec_path(env)\n    if name != 'nt':\n        file = fsencode(file)\n        path_list = map(fsencode, path_list)\n    for dir in path_list:\n        fullname = path.join(dir, file)\n        try:\n            exec_func(fullname, *argrest)\n        except error as e:\n            last_exc = e\n            tb = sys.exc_info()[2]\n            if (e.errno != errno.ENOENT and e.errno != errno.ENOTDIR\n                and saved_exc is None):\n                saved_exc = e\n                saved_tb = tb\n    if saved_exc:\n        raise saved_exc.with_traceback(saved_tb)\n    raise last_exc.with_traceback(tb)\ndef get_exec_path(env=None):\n    \"\"\"Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    \"\"\"\n    import warnings\n    if env is None:\n        env = environ\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\", BytesWarning)\n        try:\n            path_list = env.get('PATH')\n        except TypeError:\n            path_list = None\n        if supports_bytes_environ:\n            try:\n                path_listb = env[b'PATH']\n            except (KeyError, TypeError):\n                pass\n            else:\n                if path_list is not None:\n                    raise ValueError(\n                        \"env cannot contain 'PATH' and b'PATH' keys\")\n                path_list = path_listb\n            if path_list is not None and isinstance(path_list, bytes):\n                path_list = fsdecode(path_list)\n    if path_list is None:\n        path_list = defpath\n    return path_list.split(pathsep)\nfrom collections.abc import MutableMapping\nclass _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self.putenv = putenv\n        self.unsetenv = unsetenv\n        self._data = data\n    def __getitem__(self, key):\n        value = self._data[self.encodekey(key)]\n        return self.decodevalue(value)\n    def __setitem__(self, key, value):\n        key = self.encodekey(key)\n        value = self.encodevalue(value)\n        self.putenv(key, value)\n        self._data[key] = value\n    def __delitem__(self, key):\n        key = self.encodekey(key)\n        self.unsetenv(key)\n        del self._data[key]\n    def __iter__(self):\n        for key in self._data:\n            yield self.decodekey(key)\n    def __len__(self):\n        return len(self._data)\n    def __repr__(self):\n        return 'environ({{{}}})'.format(', '.join(\n            ('{!r}: {!r}'.format(self.decodekey(key), self.decodevalue(value))\n            for key, value in self._data.items())))\n    def copy(self):\n        return dict(self)\n    def setdefault(self, key, value):\n        if key not in self:\n            self[key] = value\n        return self[key]\ntry:\n    _putenv = putenv\nexcept NameError:\n    _putenv = lambda key, value: None\nelse:\n    __all__.append(\"putenv\")\ntry:\n    _unsetenv = unsetenv\nexcept NameError:\n    _unsetenv = lambda key: _putenv(key, \"\")\nelse:\n    __all__.append(\"unsetenv\")\ndef _createenviron():\n    if name in ('os2', 'nt'):\n        def check_str(value):\n            if not isinstance(value, str):\n                raise TypeError(\"str expected, not %s\" % type(value).__name__)\n            return value\n        encode = check_str\n        decode = str\n        def encodekey(key):\n            return encode(key).upper()\n        data = {}\n        for key, value in environ.items():\n            data[encodekey(key)] = value\n    else:\n        encoding = sys.getfilesystemencoding()\n        def encode(value):\n            if not isinstance(value, str):\n                raise TypeError(\"str expected, not %s\" % type(value).__name__)\n            return value.encode(encoding, 'surrogateescape')\n        def decode(value):\n            return value.decode(encoding, 'surrogateescape')\n        encodekey = encode\n        data = environ\n    return _Environ(data,\n        encodekey, decode,\n        encode, decode,\n        _putenv, _unsetenv)\nenviron = _createenviron()\ndel _createenviron\ndef getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\nsupports_bytes_environ = name not in ('os2', 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError(\"bytes expected, not %s\" % type(value).__name__)\n        return value\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,\n        _check_bytes, bytes,\n        _putenv, _unsetenv)\n    del _check_bytes\n    def getenvb(key, default=None):\n        \"\"\"Get an environment variable, return None if it doesn't exist.\n        The optional second argument can specify an alternate default.\n        key, default and the result are bytes.\"\"\"\n        return environb.get(key, default)\n    __all__.extend((\"environb\", \"getenvb\"))\ndef _fscodec():\n    encoding = sys.getfilesystemencoding()\n    if encoding == 'mbcs':\n        errors = 'strict'\n    else:\n        errors = 'surrogateescape'\n    def fsencode(filename):\n        \"\"\"\n        Encode filename to the filesystem encoding with 'surrogateescape' error\n        handler, return bytes unchanged. On Windows, use 'strict' error handler if\n        the file system encoding is 'mbcs' (which is the default encoding).\n        \"\"\"\n        if isinstance(filename, bytes):\n            return filename\n        elif isinstance(filename, str):\n            return filename.encode(encoding, errors)\n        else:\n            raise TypeError(\"expect bytes or str, not %s\" % type(filename).__name__)\n    def fsdecode(filename):\n        \"\"\"\n        Decode filename from the filesystem encoding with 'surrogateescape' error\n        handler, return str unchanged. On Windows, use 'strict' error handler if\n        the file system encoding is 'mbcs' (which is the default encoding).\n        \"\"\"\n        if isinstance(filename, str):\n            return filename\n        elif isinstance(filename, bytes):\n            return filename.decode(encoding, errors)\n        else:\n            raise TypeError(\"expect bytes or str, not %s\" % type(filename).__name__)\n    return fsencode, fsdecode\nfsencode, fsdecode = _fscodec()\ndel _fscodec\nif _exists(\"fork\") and not _exists(\"spawnv\") and _exists(\"execv\"):\n    P_WAIT = 0\n    P_NOWAIT = P_NOWAITO = 1\n    __all__.extend([\"P_WAIT\", \"P_NOWAIT\", \"P_NOWAITO\"])\n    def _spawnvef(mode, file, args, env, func):\n        pid = fork()\n        if not pid:\n            try:\n                if env is None:\n                    func(file, args)\n                else:\n                    func(file, args, env)\n            except:\n                _exit(127)\n        else:\n            if mode == P_NOWAIT:\n                return pid # Caller is responsible for waiting!\n            while 1:\n                wpid, sts = waitpid(pid, 0)\n                if WIFSTOPPED(sts):\n                    continue\n                elif WIFSIGNALED(sts):\n                    return -WTERMSIG(sts)\n                elif WIFEXITED(sts):\n                    return WEXITSTATUS(sts)\n                else:\n                    raise error(\"Not stopped, signaled or exited???\")\n    def spawnv(mode, file, args):\n        \"\"\"spawnv(mode, file, args) -> integer\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, None, execv)\n    def spawnve(mode, file, args, env):\n        \"\"\"spawnve(mode, file, args, env) -> integer\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, env, execve)\n    def spawnvp(mode, file, args):\n        \"\"\"spawnvp(mode, file, args) -> integer\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, None, execvp)\n    def spawnvpe(mode, file, args, env):\n        \"\"\"spawnvpe(mode, file, args, env) -> integer\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, env, execvpe)\nif _exists(\"spawnv\"):\n    def spawnl(mode, file, *args):\n        \"\"\"spawnl(mode, file, *args) -> integer\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return spawnv(mode, file, args)\n    def spawnle(mode, file, *args):\n        \"\"\"spawnle(mode, file, *args, env) -> integer\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        env = args[-1]\n        return spawnve(mode, file, args[:-1], env)\n    __all__.extend([\"spawnv\", \"spawnve\", \"spawnl\", \"spawnle\",])\nif _exists(\"spawnvp\"):\n    def spawnlp(mode, file, *args):\n        \"\"\"spawnlp(mode, file, *args) -> integer\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return spawnvp(mode, file, args)\n    def spawnlpe(mode, file, *args):\n        \"\"\"spawnlpe(mode, file, *args, env) -> integer\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        env = args[-1]\n        return spawnvpe(mode, file, args[:-1], env)\n    __all__.extend([\"spawnvp\", \"spawnvpe\", \"spawnlp\", \"spawnlpe\",])\nimport copyreg as _copyreg\ndef _make_stat_result(tup, dict):\n    return stat_result(tup, dict)\ndef _pickle_stat_result(sr):\n    (type, args) = sr.__reduce__()\n    return (_make_stat_result, args)\ntry:\n    _copyreg.pickle(stat_result, _pickle_stat_result, _make_stat_result)\nexcept NameError: # stat_result may not exist\n    pass\ndef _make_statvfs_result(tup, dict):\n    return statvfs_result(tup, dict)\ndef _pickle_statvfs_result(sr):\n    (type, args) = sr.__reduce__()\n    return (_make_statvfs_result, args)\ntry:\n    _copyreg.pickle(statvfs_result, _pickle_statvfs_result,\n                     _make_statvfs_result)\nexcept NameError: # statvfs_result may not exist\n    pass\ndef popen(cmd, mode=\"r\", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError(\"invalid cmd type (%s, expected string)\" % type(cmd))\n    if mode not in (\"r\", \"w\"):\n        raise ValueError(\"invalid mode %r\" % mode)\n    if buffering == 0 or buffering == None:\n        raise ValueError(\"popen() does not support unbuffered streams\")\n    import subprocess, io\n    if mode == \"r\":\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdout=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdout), proc)\n    else:\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdin=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdin), proc)\nclass _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == 'nt':\n            return returncode\n        else:\n            return returncode << 8  # Shift left to match old behavior\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        self.close()\n    def __getattr__(self, name):\n        return getattr(self._stream, name)\n    def __iter__(self):\n        return iter(self._stream)\ndef fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError(\"invalid fd type (%s, expected integer)\" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n", "/Lib/unittest/test/dummy.py": "", "/Lib/tokenize.py": "\"\"\"Tokenization help for Python programs.\ntokenize(readline) is a generator that breaks a stream of bytes into\nPython tokens.  It decodes the bytes according to PEP-0263 for\ndetermining source file encoding.\nIt accepts a readline-like method which is called repeatedly to get the\nnext line of input (or b\"\" for EOF).  It generates 5-tuples with these\nmembers:\n    the token type (see token.py)\n    the token (a string)\n    the starting (row, column) indices of the token (a 2-tuple of ints)\n    the ending (row, column) indices of the token (a 2-tuple of ints)\n    the original line (string)\nIt is designed to match the working of the Python tokenizer exactly, except\nthat it produces COMMENT tokens for comments and gives type OP for all\noperators.  Additionally, all token lists start with an ENCODING token\nwhich tells you which encoding was used to decode the bytes stream.\n\"\"\"\n__author__ = 'Ka-Ping Yee <ping@lfw.org>'\n__credits__ = ('GvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, '\n               'Skip Montanaro, Raymond Hettinger, Trent Nelson, '\n               'Michael Foord')\nimport builtins\nimport re\nimport sys\nfrom token import *\nfrom codecs import lookup, BOM_UTF8\nimport collections\nfrom io import TextIOWrapper\ncookie_re = re.compile(\"coding[:=]\\s*([-\\w.]+)\")\nimport token\n__all__ = token.__all__ + [\"COMMENT\", \"tokenize\", \"detect_encoding\",\n                           \"NL\", \"untokenize\", \"ENCODING\", \"TokenInfo\"]\ndel token\nCOMMENT = N_TOKENS\ntok_name[COMMENT] = 'COMMENT'\nNL = N_TOKENS + 1\ntok_name[NL] = 'NL'\nENCODING = N_TOKENS + 2\ntok_name[ENCODING] = 'ENCODING'\nN_TOKENS += 3\nEXACT_TOKEN_TYPES = {\n    '(':   LPAR,\n    ')':   RPAR,\n    '[':   LSQB,\n    ']':   RSQB,\n    ':':   COLON,\n    ',':   COMMA,\n    ';':   SEMI,\n    '+':   PLUS,\n    '-':   MINUS,\n    '*':   STAR,\n    '/':   SLASH,\n    '|':   VBAR,\n    '&':   AMPER,\n    '<':   LESS,\n    '>':   GREATER,\n    '=':   EQUAL,\n    '.':   DOT,\n    '%':   PERCENT,\n    '{':   LBRACE,\n    '}':   RBRACE,\n    '==':  EQEQUAL,\n    '!=':  NOTEQUAL,\n    '<=':  LESSEQUAL,\n    '>=':  GREATEREQUAL,\n    '~':   TILDE,\n    '^':   CIRCUMFLEX,\n    '<<':  LEFTSHIFT,\n    '>>':  RIGHTSHIFT,\n    '**':  DOUBLESTAR,\n    '+=':  PLUSEQUAL,\n    '-=':  MINEQUAL,\n    '*=':  STAREQUAL,\n    '/=':  SLASHEQUAL,\n    '%=':  PERCENTEQUAL,\n    '&=':  AMPEREQUAL,\n    '|=':  VBAREQUAL,\n    '^=': CIRCUMFLEXEQUAL,\n    '<<=': LEFTSHIFTEQUAL,\n    '>>=': RIGHTSHIFTEQUAL,\n    '**=': DOUBLESTAREQUAL,\n    '//':  DOUBLESLASH,\n    '//=': DOUBLESLASHEQUAL,\n    '@':   AT\n}\nclass TokenInfo(collections.namedtuple('TokenInfo', 'type string start end line')):\n    def __repr__(self):\n        annotated_type = '%d (%s)' % (self.type, tok_name[self.type])\n        return ('TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r)' %\n                self._replace(type=annotated_type))\n    @property\n    def exact_type(self):\n        if self.type == OP and self.string in EXACT_TOKEN_TYPES:\n            return EXACT_TOKEN_TYPES[self.string]\n        else:\n            return self.type\ndef group(*choices): return '(' + '|'.join(choices) + ')'\ndef any(*choices): return group(*choices) + '*'\ndef maybe(*choices): return group(*choices) + '?'\nWhitespace = r'[ \\f\\t]*'\nComment = r'#[^\\r\\n]*'\nIgnore = Whitespace + any(r'\\\\\\r?\\n' + Whitespace) + maybe(Comment)\nName = r'\\w+'\nHexnumber = r'0[xX][0-9a-fA-F]+'\nBinnumber = r'0[bB][01]+'\nOctnumber = r'0[oO][0-7]+'\nDecnumber = r'(?:0+|[1-9][0-9]*)'\nIntnumber = group(Hexnumber, Binnumber, Octnumber, Decnumber)\nExponent = r'[eE][-+]?[0-9]+'\nPointfloat = group(r'[0-9]+\\.[0-9]*', r'\\.[0-9]+') + maybe(Exponent)\nExpfloat = r'[0-9]+' + Exponent\nFloatnumber = group(Pointfloat, Expfloat)\nImagnumber = group(r'[0-9]+[jJ]', Floatnumber + r'[jJ]')\nNumber = group(Imagnumber, Floatnumber, Intnumber)\nStringPrefix = r'(?:[bB][rR]?|[rR][bB]?|[uU])?'\nSingle = r\"[^'\\\\]*(?:\\\\.[^'\\\\]*)*'\"\nDouble = r'[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"'\nSingle3 = r\"[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''\"\nDouble3 = r'[^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*\"\"\"'\nTriple = group(StringPrefix + \"'''\", StringPrefix + '\"\"\"')\nString = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'\",\n               StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*\"')\nOperator = group(r\"\\*\\*=?\", r\">>=?\", r\"<<=?\", r\"!=\",\n                 r\"//=?\", r\"->\",\n                 r\"[+\\-*/%&|^=<>]=?\",\n                 r\"~\")\nBracket = '[][(){}]'\nSpecial = group(r'\\r?\\n', r'\\.\\.\\.', r'[:;.,@]')\nFunny = group(Operator, Bracket, Special)\nPlainToken = group(Number, Funny, String, Name)\nToken = Ignore + PlainToken\nContStr = group(StringPrefix + r\"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*\" +\n                group(\"'\", r'\\\\\\r?\\n'),\n                StringPrefix + r'\"[^\\n\"\\\\]*(?:\\\\.[^\\n\"\\\\]*)*' +\n                group('\"', r'\\\\\\r?\\n'))\nPseudoExtras = group(r'\\\\\\r?\\n', Comment, Triple)\nPseudoToken = Whitespace + group(PseudoExtras, Number, Funny, ContStr, Name)\ndef _compile(expr):\n    return re.compile(expr, re.UNICODE)\nendpats = {\"'\": Single, '\"': Double,\n           \"'''\": Single3, '\"\"\"': Double3,\n           \"r'''\": Single3, 'r\"\"\"': Double3,\n           \"b'''\": Single3, 'b\"\"\"': Double3,\n           \"R'''\": Single3, 'R\"\"\"': Double3,\n           \"B'''\": Single3, 'B\"\"\"': Double3,\n           \"br'''\": Single3, 'br\"\"\"': Double3,\n           \"bR'''\": Single3, 'bR\"\"\"': Double3,\n           \"Br'''\": Single3, 'Br\"\"\"': Double3,\n           \"BR'''\": Single3, 'BR\"\"\"': Double3,\n           \"rb'''\": Single3, 'rb\"\"\"': Double3,\n           \"Rb'''\": Single3, 'Rb\"\"\"': Double3,\n           \"rB'''\": Single3, 'rB\"\"\"': Double3,\n           \"RB'''\": Single3, 'RB\"\"\"': Double3,\n           \"u'''\": Single3, 'u\"\"\"': Double3,\n           \"R'''\": Single3, 'R\"\"\"': Double3,\n           \"U'''\": Single3, 'U\"\"\"': Double3,\n           'r': None, 'R': None, 'b': None, 'B': None,\n           'u': None, 'U': None}\ntriple_quoted = {}\nfor t in (\"'''\", '\"\"\"',\n          \"r'''\", 'r\"\"\"', \"R'''\", 'R\"\"\"',\n          \"b'''\", 'b\"\"\"', \"B'''\", 'B\"\"\"',\n          \"br'''\", 'br\"\"\"', \"Br'''\", 'Br\"\"\"',\n          \"bR'''\", 'bR\"\"\"', \"BR'''\", 'BR\"\"\"',\n          \"rb'''\", 'rb\"\"\"', \"rB'''\", 'rB\"\"\"',\n          \"Rb'''\", 'Rb\"\"\"', \"RB'''\", 'RB\"\"\"',\n          \"u'''\", 'u\"\"\"', \"U'''\", 'U\"\"\"',\n          ):\n    triple_quoted[t] = t\nsingle_quoted = {}\nfor t in (\"'\", '\"',\n          \"r'\", 'r\"', \"R'\", 'R\"',\n          \"b'\", 'b\"', \"B'\", 'B\"',\n          \"br'\", 'br\"', \"Br'\", 'Br\"',\n          \"bR'\", 'bR\"', \"BR'\", 'BR\"' ,\n          \"rb'\", 'rb\"', \"rB'\", 'rB\"',\n          \"Rb'\", 'Rb\"', \"RB'\", 'RB\"' ,\n          \"u'\", 'u\"', \"U'\", 'U\"',\n          ):\n    single_quoted[t] = t\ntabsize = 8\nclass TokenError(Exception): pass\nclass StopTokenizing(Exception): pass\nclass Untokenizer:\n    def __init__(self):\n        self.tokens = []\n        self.prev_row = 1\n        self.prev_col = 0\n        self.encoding = None\n    def add_whitespace(self, start):\n        row, col = start\n        assert row <= self.prev_row\n        col_offset = col - self.prev_col\n        if col_offset:\n            self.tokens.append(\" \" * col_offset)\n    def untokenize(self, iterable):\n        for t in iterable:\n            if len(t) == 2:\n                self.compat(t, iterable)\n                break\n            tok_type, token, start, end, line = t\n            if tok_type == ENCODING:\n                self.encoding = token\n                continue\n            self.add_whitespace(start)\n            self.tokens.append(token)\n            self.prev_row, self.prev_col = end\n            if tok_type in (NEWLINE, NL):\n                self.prev_row += 1\n                self.prev_col = 0\n        return \"\".join(self.tokens)\n    def compat(self, token, iterable):\n        startline = False\n        indents = []\n        toks_append = self.tokens.append\n        toknum, tokval = token\n        if toknum in (NAME, NUMBER):\n            tokval += ' '\n        if toknum in (NEWLINE, NL):\n            startline = True\n        prevstring = False\n        for tok in iterable:\n            toknum, tokval = tok[:2]\n            if toknum == ENCODING:\n                self.encoding = tokval\n                continue\n            if toknum in (NAME, NUMBER):\n                tokval += ' '\n            if toknum == STRING:\n                if prevstring:\n                    tokval = ' ' + tokval\n                prevstring = True\n            else:\n                prevstring = False\n            if toknum == INDENT:\n                indents.append(tokval)\n                continue\n            elif toknum == DEDENT:\n                indents.pop()\n                continue\n            elif toknum in (NEWLINE, NL):\n                startline = True\n            elif startline and indents:\n                toks_append(indents[-1])\n                startline = False\n            toks_append(tokval)\ndef untokenize(iterable):\n    \"\"\"Transform tokens back into Python source code.\n    It returns a bytes object, encoded using the ENCODING\n    token, which is the first token sequence output by tokenize.\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n    Round-trip invariant for limited intput:\n        t1 = [tok[:2] for tok in tokenize(f.readline)]\n        newcode = untokenize(t1)\n        readline = BytesIO(newcode).readline\n        t2 = [tok[:2] for tok in tokenize(readline)]\n        assert t1 == t2\n    \"\"\"\n    ut = Untokenizer()\n    out = ut.untokenize(iterable)\n    if ut.encoding is not None:\n        out = out.encode(ut.encoding)\n    return out\ndef _get_normal_name(orig_enc):\n    \"\"\"Imitates get_normal_name in tokenizer.c.\"\"\"\n    enc = orig_enc[:12].lower().replace(\"_\", \"-\")\n    if enc == \"utf-8\" or enc.startswith(\"utf-8-\"):\n        return \"utf-8\"\n    if enc in (\"latin-1\", \"iso-8859-1\", \"iso-latin-1\") or \\\n       enc.startswith((\"latin-1-\", \"iso-8859-1-\", \"iso-latin-1-\")):\n        return \"iso-8859-1\"\n    return orig_enc\ndef detect_encoding(readline):\n    \"\"\"\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file.  It requires one argment, readline,\n    in the same way as the tokenize() generator.\n    It will call readline a maximum of twice, and return the encoding used\n    (as a string) and a list of any lines (left as bytes) it has read in.\n    It detects the encoding from the presence of a utf-8 bom or an encoding\n    cookie as specified in pep-0263.  If both a bom and a cookie are present,\n    but disagree, a SyntaxError will be raised.  If the encoding cookie is an\n    invalid charset, raise a SyntaxError.  Note that if a utf-8 bom is found,\n    'utf-8-sig' is returned.\n    If no encoding is specified, then the default of 'utf-8' will be returned.\n    \"\"\"\n    try:\n        filename = readline.__self__.name\n    except AttributeError:\n        filename = None\n    bom_found = False\n    encoding = None\n    default = 'utf-8'\n    def read_or_stop():\n        try:\n            return readline()\n        except StopIteration:\n            return b''\n    def find_cookie(line):\n        try:\n            line_string = line.decode('utf-8')\n        except UnicodeDecodeError:\n            msg = \"invalid or missing encoding declaration\"\n            if filename is not None:\n                msg = '{} for {!r}'.format(msg, filename)\n            raise SyntaxError(msg)\n        matches = cookie_re.findall(line_string)\n        if not matches:\n            return None\n        encoding = _get_normal_name(matches[0])\n        try:\n            codec = lookup(encoding)\n        except LookupError:\n            if filename is None:\n                msg = \"unknown encoding: \" + encoding\n            else:\n                msg = \"unknown encoding for {!r}: {}\".format(filename,\n                        encoding)\n            raise SyntaxError(msg)\n        if bom_found:\n            if encoding != 'utf-8':\n                if filename is None:\n                    msg = 'encoding problem: utf-8'\n                else:\n                    msg = 'encoding problem for {!r}: utf-8'.format(filename)\n                raise SyntaxError(msg)\n            encoding += '-sig'\n        return encoding\n    first = read_or_stop()\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]\n        default = 'utf-8-sig'\n    if not first:\n        return default, []\n    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]\n    second = read_or_stop()\n    if not second:\n        return default, [first]\n    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]\n    return default, [first, second]\ndef open(filename):\n    \"\"\"Open a file in read only mode using the encoding detected by\n    detect_encoding().\n    \"\"\"\n    buffer = builtins.open(filename, 'rb')\n    encoding, lines = detect_encoding(buffer.readline)\n    buffer.seek(0)\n    text = TextIOWrapper(buffer, encoding, line_buffering=True)\n    text.mode = 'r'\n    return text\ndef tokenize(readline):\n    \"\"\"\n    The tokenize() generator requires one argment, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects.  Each call to the function\n    should return one line of input as bytes.  Alternately, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile, 'rb').__next__  # Example of alternate readline\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found.  The line passed is the\n    logical line; continuation lines are included.\n    The first token sequence will always be an ENCODING token\n    which tells you which encoding was used to decode the bytes stream.\n    \"\"\"\n    from itertools import chain, repeat\n    encoding, consumed = detect_encoding(readline)\n    rl_gen = iter(readline, b\"\")\n    empty = repeat(b\"\")\n    return _tokenize(chain(consumed, rl_gen, empty).__next__, encoding)\ndef _tokenize(readline, encoding):\n    lnum = parenlev = continued = 0\n    numchars = '0123456789'\n    contstr, needcont = '', 0\n    contline = None\n    indents = [0]\n    if encoding is not None:\n        if encoding == \"utf-8-sig\":\n            encoding = \"utf-8\"\n        yield TokenInfo(ENCODING, encoding, (0, 0), (0, 0), '')\n    while True:             # loop over lines in stream\n        try:\n            line = readline()\n        except StopIteration:\n            line = b''\n        if encoding is not None:\n            line = line.decode(encoding)\n        lnum += 1\n        pos, max = 0, len(line)\n        if contstr:                            # continued string\n            if not line:\n                raise TokenError(\"EOF in multi-line string\", strstart)\n            endmatch = endprog.match(line)\n            if endmatch:\n                pos = end = endmatch.end(0)\n                yield TokenInfo(STRING, contstr + line[:end],\n                       strstart, (lnum, end), contline + line)\n                contstr, needcont = '', 0\n                contline = None\n            elif needcont and line[-2:] != '\\\\\\n' and line[-3:] != '\\\\\\r\\n':\n                yield TokenInfo(ERRORTOKEN, contstr + line,\n                           strstart, (lnum, len(line)), contline)\n                contstr = ''\n                contline = None\n                continue\n            else:\n                contstr = contstr + line\n                contline = contline + line\n                continue\n        elif parenlev == 0 and not continued:  # new statement\n            if not line: break\n            column = 0\n            while pos < max:                   # measure leading whitespace\n                if line[pos] == ' ':\n                    column += 1\n                elif line[pos] == '\\t':\n                    column = (column//tabsize + 1)*tabsize\n                elif line[pos] == '\\f':\n                    column = 0\n                else:\n                    break\n                pos += 1\n            if pos == max:\n                break\n            if line[pos] in '#\\r\\n':           # skip comments or blank lines\n                if line[pos] == '#':\n                    comment_token = line[pos:].rstrip('\\r\\n')\n                    nl_pos = pos + len(comment_token)\n                    yield TokenInfo(COMMENT, comment_token,\n                           (lnum, pos), (lnum, pos + len(comment_token)), line)\n                    yield TokenInfo(NL, line[nl_pos:],\n                           (lnum, nl_pos), (lnum, len(line)), line)\n                else:\n                    yield TokenInfo((NL, COMMENT)[line[pos] == '#'], line[pos:],\n                           (lnum, pos), (lnum, len(line)), line)\n                continue\n            if column > indents[-1]:           # count indents or dedents\n                indents.append(column)\n                yield TokenInfo(INDENT, line[:pos], (lnum, 0), (lnum, pos), line)\n            while column < indents[-1]:\n                if column not in indents:\n                    raise IndentationError(\n                        \"unindent does not match any outer indentation level\",\n                        (\"<tokenize>\", lnum, pos, line))\n                indents = indents[:-1]\n                yield TokenInfo(DEDENT, '', (lnum, pos), (lnum, pos), line)\n        else:                                  # continued statement\n            if not line:\n                raise TokenError(\"EOF in multi-line statement\", (lnum, 0))\n            continued = 0\n        while pos < max:\n            pseudomatch = _compile(PseudoToken).match(line, pos)\n            if pseudomatch:                                # scan for tokens\n                start, end = pseudomatch.span(1)\n                spos, epos, pos = (lnum, start), (lnum, end), end\n                token, initial = line[start:end], line[start]\n                if (initial in numchars or                  # ordinary number\n                    (initial == '.' and token != '.' and token != '...')):\n                    yield TokenInfo(NUMBER, token, spos, epos, line)\n                elif initial in '\\r\\n':\n                    yield TokenInfo(NL if parenlev > 0 else NEWLINE,\n                           token, spos, epos, line)\n                elif initial == '#':\n                    assert not token.endswith(\"\\n\")\n                    yield TokenInfo(COMMENT, token, spos, epos, line)\n                elif token in triple_quoted:\n                    endprog = _compile(endpats[token])\n                    endmatch = endprog.match(line, pos)\n                    if endmatch:                           # all on one line\n                        pos = endmatch.end(0)\n                        token = line[start:pos]\n                        yield TokenInfo(STRING, token, spos, (lnum, pos), line)\n                    else:\n                        strstart = (lnum, start)           # multiple lines\n                        contstr = line[start:]\n                        contline = line\n                        break\n                elif initial in single_quoted or \\\n                    token[:2] in single_quoted or \\\n                    token[:3] in single_quoted:\n                    if token[-1] == '\\n':                  # continued string\n                        strstart = (lnum, start)\n                        endprog = _compile(endpats[initial] or\n                                           endpats[token[1]] or\n                                           endpats[token[2]])\n                        contstr, needcont = line[start:], 1\n                        contline = line\n                        break\n                    else:                                  # ordinary string\n                        yield TokenInfo(STRING, token, spos, epos, line)\n                elif initial.isidentifier():               # ordinary name\n                    yield TokenInfo(NAME, token, spos, epos, line)\n                elif initial == '\\\\':                      # continued stmt\n                    continued = 1\n                else:\n                    if initial in '([{':\n                        parenlev += 1\n                    elif initial in ')]}':\n                        parenlev -= 1\n                    yield TokenInfo(OP, token, spos, epos, line)\n            else:\n                yield TokenInfo(ERRORTOKEN, line[pos],\n                           (lnum, pos), (lnum, pos+1), line)\n                pos += 1\n    for indent in indents[1:]:                 # pop remaining indent levels\n        yield TokenInfo(DEDENT, '', (lnum, 0), (lnum, 0), '')\n    yield TokenInfo(ENDMARKER, '', (lnum, 0), (lnum, 0), '')\ndef generate_tokens(readline):\n    return _tokenize(readline, None)\ndef main():\n    import argparse\n    def perror(message):\n        print(message, file=sys.stderr)\n    def error(message, filename=None, location=None):\n        if location:\n            args = (filename,) + location + (message,)\n            perror(\"%s:%d:%d: error: %s\" % args)\n        elif filename:\n            perror(\"%s: error: %s\" % (filename, message))\n        else:\n            perror(\"error: %s\" % message)\n        sys.exit(1)\n    parser = argparse.ArgumentParser(prog='python -m tokenize')\n    parser.add_argument(dest='filename', nargs='?',\n                        metavar='filename.py',\n                        help='the file to tokenize; defaults to stdin')\n    parser.add_argument('-e', '--exact', dest='exact', action='store_true',\n                        help='display token names using the exact type')\n    args = parser.parse_args()\n    try:\n        if args.filename:\n            filename = args.filename\n            with builtins.open(filename, 'rb') as f:\n                tokens = list(tokenize(f.readline))\n        else:\n            filename = \"<stdin>\"\n            tokens = _tokenize(sys.stdin.readline, None)\n        for token in tokens:\n            token_type = token.type\n            if args.exact:\n                token_type = token.exact_type\n            token_range = \"%d,%d-%d,%d:\" % (token.start + token.end)\n            print(\"%-20s%-15s%-15r\" %\n                  (token_range, tok_name[token_type], token.string))\n    except IndentationError as err:\n        line, column = err.args[1][1:3]\n        error(err.args[0], filename, (line, column))\n    except TokenError as err:\n        line, column = err.args[1]\n        error(err.args[0], filename, (line, column))\n    except SyntaxError as err:\n        error(err, filename)\n    except IOError as err:\n        error(err)\n    except KeyboardInterrupt:\n        print(\"interrupted\\n\")\n    except Exception as err:\n        perror(\"unexpected error: %s\" % err)\n        raise\nif __name__ == \"__main__\":\n    main()\n", "/Lib/tempfile.py": "\"\"\"Temporary files.\r\nThis module provides generic, low- and high-level interfaces for\r\ncreating temporary files and directories.  The interfaces listed\r\nas \"safe\" just below can be used without fear of race conditions.\r\nThose listed as \"unsafe\" cannot, and are provided for backward\r\ncompatibility only.\r\nThis module also provides some data items to the user:\r\n  TMP_MAX  - maximum number of names that will be tried before\r\n             giving up.\r\n  tempdir  - If this is set to a string before the first use of\r\n             any routine from this module, it will be considered as\r\n             another candidate location to store temporary files.\r\n\"\"\"\r\n__all__ = [\r\n    \"NamedTemporaryFile\", \"TemporaryFile\", # high level safe interfaces\r\n    \"SpooledTemporaryFile\", \"TemporaryDirectory\",\r\n    \"mkstemp\", \"mkdtemp\",                  # low level safe interfaces\r\n    \"mktemp\",                              # deprecated unsafe interface\r\n    \"TMP_MAX\", \"gettempprefix\",            # constants\r\n    \"tempdir\", \"gettempdir\"\r\n   ]\r\nimport warnings as _warnings\r\nimport sys as _sys\r\nimport io as _io\r\nimport os as _os\r\nfrom random import Random as _Random\r\ntry:\r\n    import fcntl as _fcntl\r\nexcept ImportError:\r\n    def _set_cloexec(fd):\r\n        pass\r\nelse:\r\n    def _set_cloexec(fd):\r\n        try:\r\n            flags = _fcntl.fcntl(fd, _fcntl.F_GETFD, 0)\r\n        except OSError:\r\n            pass\r\n        else:\r\n            flags |= _fcntl.FD_CLOEXEC\r\n            _fcntl.fcntl(fd, _fcntl.F_SETFD, flags)\r\ntry:\r\n    import _thread\r\nexcept ImportError:\r\n    import _dummy_thread as _thread\r\n_allocate_lock = _thread.allocate_lock\r\n_text_openflags = _os.O_RDWR | _os.O_CREAT | _os.O_EXCL\r\nif hasattr(_os, 'O_NOINHERIT'):\r\n    _text_openflags |= _os.O_NOINHERIT\r\nif hasattr(_os, 'O_NOFOLLOW'):\r\n    _text_openflags |= _os.O_NOFOLLOW\r\n_bin_openflags = _text_openflags\r\nif hasattr(_os, 'O_BINARY'):\r\n    _bin_openflags |= _os.O_BINARY\r\nif hasattr(_os, 'TMP_MAX'):\r\n    TMP_MAX = _os.TMP_MAX\r\nelse:\r\n    TMP_MAX = 10000\r\ntemplate = \"tmp\"\r\n_once_lock = _allocate_lock()\r\nif hasattr(_os, \"lstat\"):\r\n    _stat = _os.lstat\r\nelif hasattr(_os, \"stat\"):\r\n    _stat = _os.stat\r\nelse:\r\n    def _stat(fn):\r\n        f = open(fn)\r\n        f.close()\r\ndef _exists(fn):\r\n    try:\r\n        _stat(fn)\r\n    except OSError:\r\n        return False\r\n    else:\r\n        return True\r\nclass _RandomNameSequence:\r\n    \"\"\"An instance of _RandomNameSequence generates an endless\r\n    sequence of unpredictable strings which can safely be incorporated\r\n    into file names.  Each string is six characters long.  Multiple\r\n    threads can safely use the same instance at the same time.\r\n    _RandomNameSequence is an iterator.\"\"\"\r\n    characters = \"abcdefghijklmnopqrstuvwxyz0123456789_\"\r\n    @property\r\n    def rng(self):\r\n        cur_pid = _os.getpid()\r\n        if cur_pid != getattr(self, '_rng_pid', None):\r\n            self._rng = _Random()\r\n            self._rng_pid = cur_pid\r\n        return self._rng\r\n    def __iter__(self):\r\n        return self\r\n    def __next__(self):\r\n        c = self.characters\r\n        choose = self.rng.choice\r\n        letters = [choose(c) for dummy in \"123456\"]\r\n        return ''.join(letters)\r\ndef _candidate_tempdir_list():\r\n    \"\"\"Generate a list of candidate temporary directories which\r\n    _get_default_tempdir will try.\"\"\"\r\n    dirlist = []\r\n    for envname in 'TMPDIR', 'TEMP', 'TMP':\r\n        dirname = _os.getenv(envname)\r\n        if dirname: dirlist.append(dirname)\r\n    if _os.name == 'nt':\r\n        dirlist.extend([ r'c:\\temp', r'c:\\tmp', r'\\temp', r'\\tmp' ])\r\n    else:\r\n        dirlist.extend([ '/tmp', '/var/tmp', '/usr/tmp' ])\r\n    try:\r\n        dirlist.append(_os.getcwd())\r\n    except (AttributeError, OSError):\r\n        dirlist.append(_os.curdir)\r\n    return dirlist\r\ndef _get_default_tempdir():\r\n    \"\"\"Calculate the default directory to use for temporary files.\r\n    This routine should be called exactly once.\r\n    We determine whether or not a candidate temp dir is usable by\r\n    trying to create and write to a file in that directory.  If this\r\n    is successful, the test file is deleted.  To prevent denial of\r\n    service, the name of the test file must be randomized.\"\"\"\r\n    namer = _RandomNameSequence()\r\n    dirlist = _candidate_tempdir_list()\r\n    for dir in dirlist:\r\n        if dir != _os.curdir:\r\n            dir = _os.path.normcase(_os.path.abspath(dir))\r\n        for seq in range(100):\r\n            name = next(namer)\r\n            filename = _os.path.join(dir, name)\r\n            try:\r\n                fd = _os.open(filename, _bin_openflags, 0o600)\r\n                fp = _io.open(fd, 'wb')\r\n                fp.write(b'blat')\r\n                fp.close()\r\n                _os.unlink(filename)\r\n                del fp, fd\r\n                return dir\r\n            except FileExistsError:\r\n                pass\r\n            except OSError:\r\n                break   # no point trying more names in this directory\r\n    raise FileNotFoundError(\"No usable temporary directory found in %s\" % dirlist)\r\n_name_sequence = None\r\ndef _get_candidate_names():\r\n    \"\"\"Common setup sequence for all user-callable interfaces.\"\"\"\r\n    global _name_sequence\r\n    if _name_sequence is None:\r\n        _once_lock.acquire()\r\n        try:\r\n            if _name_sequence is None:\r\n                _name_sequence = _RandomNameSequence()\r\n        finally:\r\n            _once_lock.release()\r\n    return _name_sequence\r\ndef _mkstemp_inner(dir, pre, suf, flags):\r\n    \"\"\"Code common to mkstemp, TemporaryFile, and NamedTemporaryFile.\"\"\"\r\n    names = _get_candidate_names()\r\n    for seq in range(TMP_MAX):\r\n        name = next(names)\r\n        file = _os.path.join(dir, pre + name + suf)\r\n        try:\r\n            fd = _os.open(file, flags, 0o600)\r\n            _set_cloexec(fd)\r\n            return (fd, _os.path.abspath(file))\r\n        except FileExistsError:\r\n            continue    # try again\r\n    raise FileExistsError(\"No usable temporary file name found\")\r\ndef gettempprefix():\r\n    \"\"\"Accessor for tempdir.template.\"\"\"\r\n    return template\r\ntempdir = None\r\ndef gettempdir():\r\n    \"\"\"Accessor for tempfile.tempdir.\"\"\"\r\n    global tempdir\r\n    if tempdir is None:\r\n        _once_lock.acquire()\r\n        try:\r\n            if tempdir is None:\r\n                tempdir = _get_default_tempdir()\r\n        finally:\r\n            _once_lock.release()\r\n    return tempdir\r\ndef mkstemp(suffix=\"\", prefix=template, dir=None, text=False):\r\n    \"\"\"User-callable function to create and return a unique temporary\r\n    file.  The return value is a pair (fd, name) where fd is the\r\n    file descriptor returned by os.open, and name is the filename.\r\n    If 'suffix' is specified, the file name will end with that suffix,\r\n    otherwise there will be no suffix.\r\n    If 'prefix' is specified, the file name will begin with that prefix,\r\n    otherwise a default prefix is used.\r\n    If 'dir' is specified, the file will be created in that directory,\r\n    otherwise a default directory is used.\r\n    If 'text' is specified and true, the file is opened in text\r\n    mode.  Else (the default) the file is opened in binary mode.  On\r\n    some operating systems, this makes no difference.\r\n    The file is readable and writable only by the creating user ID.\r\n    If the operating system uses permission bits to indicate whether a\r\n    file is executable, the file is executable by no one. The file\r\n    descriptor is not inherited by children of this process.\r\n    Caller is responsible for deleting the file when done with it.\r\n    \"\"\"\r\n    if dir is None:\r\n        dir = gettempdir()\r\n    if text:\r\n        flags = _text_openflags\r\n    else:\r\n        flags = _bin_openflags\r\n    return _mkstemp_inner(dir, prefix, suffix, flags)\r\ndef mkdtemp(suffix=\"\", prefix=template, dir=None):\r\n    \"\"\"User-callable function to create and return a unique temporary\r\n    directory.  The return value is the pathname of the directory.\r\n    Arguments are as for mkstemp, except that the 'text' argument is\r\n    not accepted.\r\n    The directory is readable, writable, and searchable only by the\r\n    creating user.\r\n    Caller is responsible for deleting the directory when done with it.\r\n    \"\"\"\r\n    if dir is None:\r\n        dir = gettempdir()\r\n    names = _get_candidate_names()\r\n    for seq in range(TMP_MAX):\r\n        name = next(names)\r\n        file = _os.path.join(dir, prefix + name + suffix)\r\n        try:\r\n            _os.mkdir(file, 0o700)\r\n            return file\r\n        except FileExistsError:\r\n            continue    # try again\r\n    raise FileExistsError(\"No usable temporary directory name found\")\r\ndef mktemp(suffix=\"\", prefix=template, dir=None):\r\n    \"\"\"User-callable function to return a unique temporary file name.  The\r\n    file is not created.\r\n    Arguments are as for mkstemp, except that the 'text' argument is\r\n    not accepted.\r\n    This function is unsafe and should not be used.  The file name\r\n    refers to a file that did not exist at some point, but by the time\r\n    you get around to creating it, someone else may have beaten you to\r\n    the punch.\r\n    \"\"\"\r\n    if dir is None:\r\n        dir = gettempdir()\r\n    names = _get_candidate_names()\r\n    for seq in range(TMP_MAX):\r\n        name = next(names)\r\n        file = _os.path.join(dir, prefix + name + suffix)\r\n        if not _exists(file):\r\n            return file\r\n    raise FileExistsError(\"No usable temporary filename found\")\r\nclass _TemporaryFileWrapper:\r\n    \"\"\"Temporary file wrapper\r\n    This class provides a wrapper around files opened for\r\n    temporary use.  In particular, it seeks to automatically\r\n    remove the file when it is no longer needed.\r\n    \"\"\"\r\n    def __init__(self, file, name, delete=True):\r\n        self.file = file\r\n        self.name = name\r\n        self.close_called = False\r\n        self.delete = delete\r\n    def __getattr__(self, name):\r\n        file = self.__dict__['file']\r\n        a = getattr(file, name)\r\n        if not isinstance(a, int):\r\n            setattr(self, name, a)\r\n        return a\r\n    def __enter__(self):\r\n        self.file.__enter__()\r\n        return self\r\n    def __iter__(self):\r\n        return iter(self.file)\r\n    if _os.name != 'nt':\r\n        unlink = _os.unlink\r\n        def close(self):\r\n            if not self.close_called:\r\n                self.close_called = True\r\n                self.file.close()\r\n                if self.delete:\r\n                    self.unlink(self.name)\r\n        def __del__(self):\r\n            self.close()\r\n        def __exit__(self, exc, value, tb):\r\n            result = self.file.__exit__(exc, value, tb)\r\n            self.close()\r\n            return result\r\n    else:\r\n        def __exit__(self, exc, value, tb):\r\n            self.file.__exit__(exc, value, tb)\r\ndef NamedTemporaryFile(mode='w+b', buffering=-1, encoding=None,\r\n                       newline=None, suffix=\"\", prefix=template,\r\n                       dir=None, delete=True):\r\n    \"\"\"Create and return a temporary file.\r\n    Arguments:\r\n    'prefix', 'suffix', 'dir' -- as for mkstemp.\r\n    'mode' -- the mode argument to io.open (default \"w+b\").\r\n    'buffering' -- the buffer size argument to io.open (default -1).\r\n    'encoding' -- the encoding argument to io.open (default None)\r\n    'newline' -- the newline argument to io.open (default None)\r\n    'delete' -- whether the file is deleted on close (default True).\r\n    The file is created as mkstemp() would do it.\r\n    Returns an object with a file-like interface; the name of the file\r\n    is accessible as file.name.  The file will be automatically deleted\r\n    when it is closed unless the 'delete' argument is set to False.\r\n    \"\"\"\r\n    if dir is None:\r\n        dir = gettempdir()\r\n    flags = _bin_openflags\r\n    if _os.name == 'nt' and delete:\r\n        flags |= _os.O_TEMPORARY\r\n    (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags)\r\n    file = _io.open(fd, mode, buffering=buffering,\r\n                    newline=newline, encoding=encoding)\r\n    return _TemporaryFileWrapper(file, name, delete)\r\nif _os.name != 'posix' or _os.sys.platform == 'cygwin':\r\n    TemporaryFile = NamedTemporaryFile\r\nelse:\r\n    def TemporaryFile(mode='w+b', buffering=-1, encoding=None,\r\n                      newline=None, suffix=\"\", prefix=template,\r\n                      dir=None):\r\n        \"\"\"Create and return a temporary file.\r\n        Arguments:\r\n        'prefix', 'suffix', 'dir' -- as for mkstemp.\r\n        'mode' -- the mode argument to io.open (default \"w+b\").\r\n        'buffering' -- the buffer size argument to io.open (default -1).\r\n        'encoding' -- the encoding argument to io.open (default None)\r\n        'newline' -- the newline argument to io.open (default None)\r\n        The file is created as mkstemp() would do it.\r\n        Returns an object with a file-like interface.  The file has no\r\n        name, and will cease to exist when it is closed.\r\n        \"\"\"\r\n        if dir is None:\r\n            dir = gettempdir()\r\n        flags = _bin_openflags\r\n        (fd, name) = _mkstemp_inner(dir, prefix, suffix, flags)\r\n        try:\r\n            _os.unlink(name)\r\n            return _io.open(fd, mode, buffering=buffering,\r\n                            newline=newline, encoding=encoding)\r\n        except:\r\n            _os.close(fd)\r\n            raise\r\nclass SpooledTemporaryFile:\r\n    \"\"\"Temporary file wrapper, specialized to switch from\r\n    StringIO to a real file when it exceeds a certain size or\r\n    when a fileno is needed.\r\n    \"\"\"\r\n    _rolled = False\r\n    def __init__(self, max_size=0, mode='w+b', buffering=-1,\r\n                 encoding=None, newline=None,\r\n                 suffix=\"\", prefix=template, dir=None):\r\n        if 'b' in mode:\r\n            self._file = _io.BytesIO()\r\n        else:\r\n            self._file = _io.StringIO(newline=\"\\n\")\r\n        self._max_size = max_size\r\n        self._rolled = False\r\n        self._TemporaryFileArgs = {'mode': mode, 'buffering': buffering,\r\n                                   'suffix': suffix, 'prefix': prefix,\r\n                                   'encoding': encoding, 'newline': newline,\r\n                                   'dir': dir}\r\n    def _check(self, file):\r\n        if self._rolled: return\r\n        max_size = self._max_size\r\n        if max_size and file.tell() > max_size:\r\n            self.rollover()\r\n    def rollover(self):\r\n        if self._rolled: return\r\n        file = self._file\r\n        newfile = self._file = TemporaryFile(**self._TemporaryFileArgs)\r\n        del self._TemporaryFileArgs\r\n        newfile.write(file.getvalue())\r\n        newfile.seek(file.tell(), 0)\r\n        self._rolled = True\r\n    def __enter__(self):\r\n        if self._file.closed:\r\n            raise ValueError(\"Cannot enter context with closed file\")\r\n        return self\r\n    def __exit__(self, exc, value, tb):\r\n        self._file.close()\r\n    def __iter__(self):\r\n        return self._file.__iter__()\r\n    def close(self):\r\n        self._file.close()\r\n    @property\r\n    def closed(self):\r\n        return self._file.closed\r\n    @property\r\n    def encoding(self):\r\n        return self._file.encoding\r\n    def fileno(self):\r\n        self.rollover()\r\n        return self._file.fileno()\r\n    def flush(self):\r\n        self._file.flush()\r\n    def isatty(self):\r\n        return self._file.isatty()\r\n    @property\r\n    def mode(self):\r\n        return self._file.mode\r\n    @property\r\n    def name(self):\r\n        return self._file.name\r\n    @property\r\n    def newlines(self):\r\n        return self._file.newlines\r\n    def next(self):\r\n        return self._file.next\r\n    def read(self, *args):\r\n        return self._file.read(*args)\r\n    def readline(self, *args):\r\n        return self._file.readline(*args)\r\n    def readlines(self, *args):\r\n        return self._file.readlines(*args)\r\n    def seek(self, *args):\r\n        self._file.seek(*args)\r\n    @property\r\n    def softspace(self):\r\n        return self._file.softspace\r\n    def tell(self):\r\n        return self._file.tell()\r\n    def truncate(self, size=None):\r\n        if size is None:\r\n            self._file.truncate()\r\n        else:\r\n            if size > self._max_size:\r\n                self.rollover()\r\n            self._file.truncate(size)\r\n    def write(self, s):\r\n        file = self._file\r\n        rv = file.write(s)\r\n        self._check(file)\r\n        return rv\r\n    def writelines(self, iterable):\r\n        file = self._file\r\n        rv = file.writelines(iterable)\r\n        self._check(file)\r\n        return rv\r\n    def xreadlines(self, *args):\r\n        return self._file.xreadlines(*args)\r\nclass TemporaryDirectory(object):\r\n    \"\"\"Create and return a temporary directory.  This has the same\r\n    behavior as mkdtemp but can be used as a context manager.  For\r\n    example:\r\n        with TemporaryDirectory() as tmpdir:\r\n            ...\r\n    Upon exiting the context, the directory and everthing contained\r\n    in it are removed.\r\n    \"\"\"\r\n    def __init__(self, suffix=\"\", prefix=template, dir=None):\r\n        self._closed = False\r\n        self.name = None # Handle mkdtemp throwing an exception\r\n        self.name = mkdtemp(suffix, prefix, dir)\r\n    def __repr__(self):\r\n        return \"<{} {!r}>\".format(self.__class__.__name__, self.name)\r\n    def __enter__(self):\r\n        return self.name\r\n    def cleanup(self, _warn=False):\r\n        if self.name and not self._closed:\r\n            try:\r\n                self._rmtree(self.name)\r\n            except (TypeError, AttributeError) as ex:\r\n                if \"None\" not in str(ex):\r\n                    raise\r\n                print(\"ERROR: {!r} while cleaning up {!r}\".format(ex, self,),\r\n                      file=_sys.stderr)\r\n                return\r\n            self._closed = True\r\n            if _warn:\r\n                self._warn(\"Implicitly cleaning up {!r}\".format(self),\r\n                           ResourceWarning)\r\n    def __exit__(self, exc, value, tb):\r\n        self.cleanup()\r\n    def __del__(self):\r\n        self.cleanup(_warn=True)\r\n    _listdir = staticmethod(_os.listdir)\r\n    _path_join = staticmethod(_os.path.join)\r\n    _isdir = staticmethod(_os.path.isdir)\r\n    _islink = staticmethod(_os.path.islink)\r\n    _remove = staticmethod(_os.remove)\r\n    _rmdir = staticmethod(_os.rmdir)\r\n    _os_error = OSError\r\n    _warn = _warnings.warn\r\n    def _rmtree(self, path):\r\n        for name in self._listdir(path):\r\n            fullname = self._path_join(path, name)\r\n            try:\r\n                isdir = self._isdir(fullname) and not self._islink(fullname)\r\n            except self._os_error:\r\n                isdir = False\r\n            if isdir:\r\n                self._rmtree(fullname)\r\n            else:\r\n                try:\r\n                    self._remove(fullname)\r\n                except self._os_error:\r\n                    pass\r\n        try:\r\n            self._rmdir(path)\r\n        except self._os_error:\r\n            pass\r\n", "/libs/_ajax.js": "$module=(function($B){var __builtins__=$B.builtins;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");$XMLHttpDict={__class__:$B.$type,__name__:'XMLHttp'};$XMLHttpDict.__mro__=[$XMLHttpDict,__builtins__.object.$dict];$XMLHttpDict.__repr__=function(self){return '<object XMLHttp>';};$XMLHttpDict.__str__=$XMLHttpDict.toString=$XMLHttpDict.__repr__;$XMLHttpDict.text=function(self){return self.responseText;};$XMLHttpDict.xml=function(self){return $DomObject(self.responseXML);};$XMLHttpDict.headers=function(self){return list(self.getAllResponseHeaders().split('\\n'));};$XMLHttpDict.get_header=function(){var reqobj=self;return function(header){return reqobj.getResponseHeader(header);};};$AjaxDict={__class__:$B.$type,__name__:'ajax'};$AjaxDict.__mro__=[$AjaxDict,__builtins__.object.$dict];$AjaxDict.__repr__=function(self){return '<object Ajax>';};$AjaxDict.__str__=$AjaxDict.toString=$AjaxDict.__repr__;$AjaxDict.bind=function(self,evt,func){self['on_'+evt]=func;};$AjaxDict.open=function(self,method,url,async){self.$xmlhttp.open(method,url,async);};$AjaxDict.send=function(self,params){var res='';if(!params||params.$keys.length==0){self.$xmlhttp.send();return;}else if(isinstance(params,str))res=params;else if(isinstance(params,dict)){for(i=0;i<params.$keys.length;i++)res+=encodeURIComponent(str(params.$keys[i]))+'='+encodeURIComponent(str(params.$values[i]))+'&';res=res.substr(0,res.length-1);}else throw TypeError(\"send() argument must be string or dictonary, not '\"+str(params.__class__)+\"'\");self.$xmlhttp.send(res);};$AjaxDict.set_header=function(self,key,value){self.$xmlhttp.setRequestHeader(key,value);};$AjaxDict.set_timeout=function(self,seconds,func){self.$xmlhttp.$requestTimer=setTimeout(function(){self.$xmlhttp.abort();func();},seconds*1000);};function ajax(){var res={__class__:$AjaxDict};if(window.XMLHttpRequest)var $xmlhttp=new XMLHttpRequest();else var $xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");$xmlhttp.$requestTimer=null;$xmlhttp.__class__=$XMLHttpDict;$xmlhttp.onreadystatechange=function(){var state=this.readyState;var req=this.$ajax;var timer=this.$requestTimer;var obj=this;if(state===0&&'on_uninitialized' in req)req.on_uninitialized(obj);else if(state===1&&'on_loading' in req)req.on_loading(obj);else if(state===2&&'on_loaded' in req)req.on_loaded(obj);else if(state===3&&'on_interactive' in req)req.on_interactive(obj);else if(state===4&&'on_complete' in req){if(timer!==null)window.clearTimeout(timer);req.on_complete(obj);}};$xmlhttp.$ajax=res;res.$xmlhttp=$xmlhttp;return res;}ajax.__class__=$B.$factory;ajax.$dict=$AjaxDict;return{ajax:ajax};})(__BRYTHON__);", "/Lib/binascii.py": "\"\"\"A pure Python implementation of binascii.\nRather slow and buggy in corner cases.\nPyPy provides an RPython version too.\n\"\"\"\nclass Error(Exception):\n    pass\nclass Done(Exception):\n    pass\nclass Incomplete(Exception):\n    pass\ndef a2b_uu(s):\n    if not s:\n        return ''\n    length = (ord(s[0]) - 0x20) % 64\n    def quadruplets_gen(s):\n        while s:\n            try:\n                yield ord(s[0]), ord(s[1]), ord(s[2]), ord(s[3])\n            except IndexError:\n                s += '   '\n                yield ord(s[0]), ord(s[1]), ord(s[2]), ord(s[3])\n                return\n            s = s[4:]\n    try:\n        result = [''.join(\n            [chr((A - 0x20) << 2 | (((B - 0x20) >> 4) & 0x3)),\n            chr(((B - 0x20) & 0xf) << 4 | (((C - 0x20) >> 2) & 0xf)),\n            chr(((C - 0x20) & 0x3) << 6 | ((D - 0x20) & 0x3f))\n            ]) for A, B, C, D in quadruplets_gen(s[1:].rstrip())]\n    except ValueError:\n        raise Error('Illegal char')\n    result = ''.join(result)\n    trailingdata = result[length:]\n    if trailingdata.strip('\\x00'):\n        raise Error('Trailing garbage')\n    result = result[:length]\n    if len(result) < length:\n        result += ((length - len(result)) * '\\x00')\n    return result\ndef b2a_uu(s):\n    length = len(s)\n    if length > 45:\n        raise Error('At most 45 bytes at once')\n    def triples_gen(s):\n        while s:\n            try:\n                yield ord(s[0]), ord(s[1]), ord(s[2])\n            except IndexError:\n                s += '\\0\\0'\n                yield ord(s[0]), ord(s[1]), ord(s[2])\n                return\n            s = s[3:]\n    result = [''.join(\n        [chr(0x20 + (( A >> 2                    ) & 0x3F)),\n         chr(0x20 + (((A << 4) | ((B >> 4) & 0xF)) & 0x3F)),\n         chr(0x20 + (((B << 2) | ((C >> 6) & 0x3)) & 0x3F)),\n         chr(0x20 + (( C                         ) & 0x3F))])\n              for A, B, C in triples_gen(s)]\n    return chr(ord(' ') + (length & 077)) + ''.join(result) + '\\n'\ntable_a2b_base64 = {\n    'A': 0,\n    'B': 1,\n    'C': 2,\n    'D': 3,\n    'E': 4,\n    'F': 5,\n    'G': 6,\n    'H': 7,\n    'I': 8,\n    'J': 9,\n    'K': 10,\n    'L': 11,\n    'M': 12,\n    'N': 13,\n    'O': 14,\n    'P': 15,\n    'Q': 16,\n    'R': 17,\n    'S': 18,\n    'T': 19,\n    'U': 20,\n    'V': 21,\n    'W': 22,\n    'X': 23,\n    'Y': 24,\n    'Z': 25,\n    'a': 26,\n    'b': 27,\n    'c': 28,\n    'd': 29,\n    'e': 30,\n    'f': 31,\n    'g': 32,\n    'h': 33,\n    'i': 34,\n    'j': 35,\n    'k': 36,\n    'l': 37,\n    'm': 38,\n    'n': 39,\n    'o': 40,\n    'p': 41,\n    'q': 42,\n    'r': 43,\n    's': 44,\n    't': 45,\n    'u': 46,\n    'v': 47,\n    'w': 48,\n    'x': 49,\n    'y': 50,\n    'z': 51,\n    '0': 52,\n    '1': 53,\n    '2': 54,\n    '3': 55,\n    '4': 56,\n    '5': 57,\n    '6': 58,\n    '7': 59,\n    '8': 60,\n    '9': 61,\n    '+': 62,\n    '/': 63,\n    '=': 0,\n}\ndef a2b_base64(s):\n    if not isinstance(s, (str, unicode)):\n        raise TypeError(\"expected string or unicode, got %r\" % (s,))\n    s = s.rstrip()\n    def next_valid_char(s, pos):\n        for i in range(pos + 1, len(s)):\n            c = s[i]\n            if c < '\\x7f':\n                try:\n                    table_a2b_base64[c]\n                    return c\n                except KeyError:\n                    pass\n        return None\n    quad_pos = 0\n    leftbits = 0\n    leftchar = 0\n    res = []\n    for i, c in enumerate(s):\n        if c > '\\x7f' or c == '\\n' or c == '\\r' or c == ' ':\n            continue\n        if c == '=':\n            if quad_pos < 2 or (quad_pos == 2 and next_valid_char(s, i) != '='):\n                continue\n            else:\n                leftbits = 0\n                break\n        try:\n            next_c = table_a2b_base64[c]\n        except KeyError:\n            continue\n        quad_pos = (quad_pos + 1) & 0x03\n        leftchar = (leftchar << 6) | next_c\n        leftbits += 6\n        if leftbits >= 8:\n            leftbits -= 8\n            res.append((leftchar >> leftbits & 0xff))\n            leftchar &= ((1 << leftbits) - 1)\n    if leftbits != 0:\n        raise Error('Incorrect padding')\n    return ''.join([chr(i) for i in res])\ntable_b2a_base64 = \\\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\ndef b2a_base64(s):\n    length = len(s)\n    final_length = length % 3\n    def triples_gen(s):\n        while s:\n            try:\n                yield ord(s[0]), ord(s[1]), ord(s[2])\n            except IndexError:\n                s += '\\0\\0'\n                yield ord(s[0]), ord(s[1]), ord(s[2])\n                return\n            s = s[3:]\n    a = triples_gen(s[ :length - final_length])\n    result = [''.join(\n        [table_b2a_base64[( A >> 2                    ) & 0x3F],\n         table_b2a_base64[((A << 4) | ((B >> 4) & 0xF)) & 0x3F],\n         table_b2a_base64[((B << 2) | ((C >> 6) & 0x3)) & 0x3F],\n         table_b2a_base64[( C                         ) & 0x3F]])\n              for A, B, C in a]\n    final = s[length - final_length:]\n    if final_length == 0:\n        snippet = ''\n    elif final_length == 1:\n        a = ord(final[0])\n        snippet = table_b2a_base64[(a >> 2 ) & 0x3F] + \\\n                  table_b2a_base64[(a << 4 ) & 0x3F] + '=='\n    else:\n        a = ord(final[0])\n        b = ord(final[1])\n        snippet = table_b2a_base64[(a >> 2) & 0x3F] + \\\n                  table_b2a_base64[((a << 4) | (b >> 4) & 0xF) & 0x3F] + \\\n                  table_b2a_base64[(b << 2) & 0x3F] + '='\n    return ''.join(result) + snippet + '\\n'\ndef a2b_qp(s, header=False):\n    inp = 0\n    odata = []\n    while inp < len(s):\n        if s[inp] == '=':\n            inp += 1\n            if inp >= len(s):\n                break\n            if (s[inp] == '\\n') or (s[inp] == '\\r'):\n                if s[inp] != '\\n':\n                    while inp < len(s) and s[inp] != '\\n':\n                        inp += 1\n                if inp < len(s):\n                    inp += 1\n            elif s[inp] == '=':\n                odata.append('=')\n                inp += 1\n            elif s[inp] in hex_numbers and s[inp + 1] in hex_numbers:\n                ch = chr(int(s[inp:inp+2], 16))\n                inp += 2\n                odata.append(ch)\n            else:\n                odata.append('=')\n        elif header and s[inp] == '_':\n            odata.append(' ')\n            inp += 1\n        else:\n            odata.append(s[inp])\n            inp += 1\n    return ''.join(odata)\ndef b2a_qp(data, quotetabs=False, istext=True, header=False):\n    \"\"\"quotetabs=True means that tab and space characters are always\n       quoted.\n       istext=False means that \\r and \\n are treated as regular characters\n       header=True encodes space characters with '_' and requires\n       real '_' characters to be quoted.\n    \"\"\"\n    MAXLINESIZE = 76\n    lf = data.find('\\n')\n    crlf = lf > 0 and data[lf-1] == '\\r'\n    inp = 0\n    linelen = 0\n    odata = []\n    while inp < len(data):\n        c = data[inp]\n        if (c > '~' or\n            c == '=' or\n            (header and c == '_') or\n            (c == '.' and linelen == 0 and (inp+1 == len(data) or\n                                            data[inp+1] == '\\n' or\n                                            data[inp+1] == '\\r')) or\n            (not istext and (c == '\\r' or c == '\\n')) or\n            ((c == '\\t' or c == ' ') and (inp + 1 == len(data))) or\n            (c <= ' ' and c != '\\r' and c != '\\n' and\n             (quotetabs or (not quotetabs and (c != '\\t' and c != ' '))))):\n            linelen += 3\n            if linelen >= MAXLINESIZE:\n                odata.append('=')\n                if crlf: odata.append('\\r')\n                odata.append('\\n')\n                linelen = 3\n            odata.append('=' + two_hex_digits(ord(c)))\n            inp += 1\n        else:\n            if (istext and\n                (c == '\\n' or (inp+1 < len(data) and c == '\\r' and\n                               data[inp+1] == '\\n'))):\n                linelen = 0\n                if (len(odata) > 0 and\n                    (odata[-1] == ' ' or odata[-1] == '\\t')):\n                    ch = ord(odata[-1])\n                    odata[-1] = '='\n                    odata.append(two_hex_digits(ch))\n                if crlf: odata.append('\\r')\n                odata.append('\\n')\n                if c == '\\r':\n                    inp += 2\n                else:\n                    inp += 1\n            else:\n                if (inp + 1 < len(data) and\n                    data[inp+1] != '\\n' and\n                    (linelen + 1) >= MAXLINESIZE):\n                    odata.append('=')\n                    if crlf: odata.append('\\r')\n                    odata.append('\\n')\n                    linelen = 0\n                linelen += 1\n                if header and c == ' ':\n                    c = '_'\n                odata.append(c)\n                inp += 1\n    return ''.join(odata)\nhex_numbers = '0123456789ABCDEF'\ndef hex(n):\n    if n == 0:\n        return '0'\n    if n < 0:\n        n = -n\n        sign = '-'\n    else:\n        sign = ''\n    arr = []\n    def hex_gen(n):\n        \"\"\" Yield a nibble at a time. \"\"\"\n        while n:\n            yield n % 0x10\n            n = n / 0x10\n    for nibble in hex_gen(n):\n        arr = [hex_numbers[nibble]] + arr\n    return sign + ''.join(arr)\ndef two_hex_digits(n):\n    return hex_numbers[n / 0x10] + hex_numbers[n % 0x10]\ndef strhex_to_int(s):\n    i = 0\n    for c in s:\n        i = i * 0x10 + hex_numbers.index(c)\n    return i\nhqx_encoding = '!\"#$%&\\'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr'\nDONE = 0x7f\nSKIP = 0x7e\nFAIL = 0x7d\ntable_a2b_hqx = [\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, SKIP, FAIL, FAIL, SKIP, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,\n    0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, FAIL, FAIL,\n    0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, FAIL,\n    0x14, 0x15, DONE, FAIL, FAIL, FAIL, FAIL, FAIL,\n    0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D,\n    0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, FAIL,\n    0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, FAIL,\n    0x2C, 0x2D, 0x2E, 0x2F, FAIL, FAIL, FAIL, FAIL,\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, FAIL,\n    0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, FAIL, FAIL,\n    0x3D, 0x3E, 0x3F, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n    FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL, FAIL,\n]\ndef a2b_hqx(s):\n    result = []\n    def quadruples_gen(s):\n        t = []\n        for c in s:\n            res = table_a2b_hqx[ord(c)]\n            if res == SKIP:\n                continue\n            elif res == FAIL:\n                raise Error('Illegal character')\n            elif res == DONE:\n                yield t\n                raise Done\n            else:\n                t.append(res)\n            if len(t) == 4:\n                yield t\n                t = []\n        yield t\n    done = 0\n    try:\n        for snippet in quadruples_gen(s):\n            length = len(snippet)\n            if length == 4:\n                result.append(chr(((snippet[0] & 0x3f) << 2) | (snippet[1] >> 4))) \n                result.append(chr(((snippet[1] & 0x0f) << 4) | (snippet[2] >> 2))) \n                result.append(chr(((snippet[2] & 0x03) << 6) | (snippet[3]))) \n            elif length == 3:\n                result.append(chr(((snippet[0] & 0x3f) << 2) | (snippet[1] >> 4))) \n                result.append(chr(((snippet[1] & 0x0f) << 4) | (snippet[2] >> 2))) \n            elif length == 2:\n                result.append(chr(((snippet[0] & 0x3f) << 2) | (snippet[1] >> 4))) \n    except Done:\n        done = 1\n    except Error:\n        raise\n    return (''.join(result), done)\ndef b2a_hqx(s):\n    result =[]\n    def triples_gen(s):\n        while s:\n            try:\n                yield ord(s[0]), ord(s[1]), ord(s[2])\n            except IndexError:\n                yield tuple([ord(c) for c in s])\n            s = s[3:]\n    for snippet in triples_gen(s):\n        length = len(snippet)\n        if length == 3:\n            result.append(\n                hqx_encoding[(snippet[0] & 0xfc) >> 2])\n            result.append(hqx_encoding[\n                ((snippet[0] & 0x03) << 4) | ((snippet[1] & 0xf0) >> 4)])\n            result.append(hqx_encoding[\n                (snippet[1] & 0x0f) << 2 | ((snippet[2] & 0xc0) >> 6)])\n            result.append(hqx_encoding[snippet[2] & 0x3f])\n        elif length == 2:\n            result.append(\n                hqx_encoding[(snippet[0] & 0xfc) >> 2])\n            result.append(hqx_encoding[\n                ((snippet[0] & 0x03) << 4) | ((snippet[1] & 0xf0) >> 4)])\n            result.append(hqx_encoding[\n                (snippet[1] & 0x0f) << 2])\n        elif length == 1:\n            result.append(\n                hqx_encoding[(snippet[0] & 0xfc) >> 2])\n            result.append(hqx_encoding[\n                ((snippet[0] & 0x03) << 4)])\n    return ''.join(result)\ncrctab_hqx = [\n        0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,\n        0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,\n        0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,\n        0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,\n        0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,\n        0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,\n        0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,\n        0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,\n        0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,\n        0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,\n        0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,\n        0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,\n        0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,\n        0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,\n        0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,\n        0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,\n        0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,\n        0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,\n        0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,\n        0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,\n        0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,\n        0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,\n        0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,\n        0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,\n        0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,\n        0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,\n        0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,\n        0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,\n        0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,\n        0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,\n        0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,\n        0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,\n]\ndef crc_hqx(s, crc):\n    for c in s:\n        crc = ((crc << 8) & 0xff00) ^ crctab_hqx[((crc >> 8) & 0xff) ^ ord(c)]\n    return crc\ndef rlecode_hqx(s):\n    \"\"\"\n    Run length encoding for binhex4.\n    The CPython implementation does not do run length encoding\n    of \\x90 characters. This implementation does.\n    \"\"\"\n    if not s:\n        return ''\n    result = []\n    prev = s[0]\n    count = 1\n    if s[-1] == '!':\n        s = s[1:] + '?'\n    else:\n        s = s[1:] + '!'\n    for c in s:\n        if c == prev and count < 255:\n            count += 1\n        else:\n            if count == 1:\n                if prev != '\\x90':\n                    result.append(prev)\n                else:\n                    result.extend(['\\x90', '\\x00'])\n            elif count < 4:\n                if prev != '\\x90':\n                    result.extend([prev] * count)\n                else:\n                    result.extend(['\\x90', '\\x00'] * count)\n            else:\n                if prev != '\\x90':\n                    result.extend([prev, '\\x90', chr(count)])\n                else:\n                    result.extend(['\\x90', '\\x00', '\\x90', chr(count)]) \n            count = 1\n            prev = c\n    return ''.join(result)\ndef rledecode_hqx(s):\n    s = s.split('\\x90')\n    result = [s[0]]\n    prev = s[0]\n    for snippet in s[1:]:\n        count = ord(snippet[0])\n        if count > 0:\n            result.append(prev[-1] * (count-1))\n            prev = snippet\n        else:\n            result.append('\\x90')\n            prev = '\\x90'\n        result.append(snippet[1:])\n    return ''.join(result)\ncrc_32_tab = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,\n    0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,\n    0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,\n    0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\n    0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,\n    0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\n    0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\n    0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,\n    0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,\n    0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,\n    0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,\n    0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\n    0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\n    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\n    0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,\n    0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,\n    0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\n    0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\n    0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,\n    0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,\n    0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,\n    0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\n    0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,\n    0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\n    0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\n    0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,\n    0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,\n    0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\n    0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,\n    0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,\n    0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\n    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\n    0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,\n    0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\n    0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\n    0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\n    0x2d02ef8d\n]\ndef crc32(s, crc=0):\n    result = 0\n    crc = ~int(crc) & 0xffffffff\n    for c in s:\n        crc = crc_32_tab[(crc ^ int(ord(c))) & 0xff] ^ (crc >> 8)\n    result = crc ^ 0xffffffff\n    if result > 2**31:\n        result = ((result + 2**31) % 2**32) - 2**31\n    return result\ndef b2a_hex(s):\n    result = []\n    for char in s:\n        c = (ord(char) >> 4) & 0xf\n        if c > 9:\n            c = c + ord('a') - 10\n        else:\n            c = c + ord('0')\n        result.append(chr(c))\n        c = ord(char) & 0xf\n        if c > 9:\n            c = c + ord('a') - 10\n        else:\n            c = c + ord('0')\n        result.append(chr(c))\n    return ''.join(result)\nhexlify = b2a_hex\ntable_hex = [\n    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,\n    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,\n    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,\n    0, 1, 2, 3,  4, 5, 6, 7,  8, 9,-1,-1, -1,-1,-1,-1,\n    -1,10,11,12, 13,14,15,-1, -1,-1,-1,-1, -1,-1,-1,-1,\n    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1,\n    -1,10,11,12, 13,14,15,-1, -1,-1,-1,-1, -1,-1,-1,-1,\n    -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1, -1,-1,-1,-1\n]\ndef a2b_hex(t):\n    result = []\n    def pairs_gen(s):\n        while s:\n            try:\n                yield table_hex[ord(s[0])], table_hex[ord(s[1])]\n            except IndexError:\n                if len(s):\n                    raise TypeError('Odd-length string')\n                return\n            s = s[2:]\n    for a, b in pairs_gen(t):\n        if a < 0 or b < 0:\n            raise TypeError('Non-hexadecimal digit found')\n        result.append(chr((a << 4) + b))\n    return ''.join(result)\nunhexlify = a2b_hex\n", "/Lib/unittest/signals.py": "import signal\r\nimport weakref\r\nfrom functools import wraps\r\n__unittest = True\r\nclass _InterruptHandler(object):\r\n    def __init__(self, default_handler):\r\n        self.called = False\r\n        self.default_handler = default_handler\r\n    def __call__(self, signum, frame):\r\n        installed_handler = signal.getsignal(signal.SIGINT)\r\n        if installed_handler is not self:\r\n            self.default_handler(signum, frame)\r\n        if self.called:\r\n            self.default_handler(signum, frame)\r\n        self.called = True\r\n        for result in _results.keys():\r\n            result.stop()\r\n_results = weakref.WeakKeyDictionary()\r\ndef registerResult(result):\r\n    _results[result] = 1\r\ndef removeResult(result):\r\n    return bool(_results.pop(result, None))\r\n_interrupt_handler = None\r\ndef installHandler():\r\n    global _interrupt_handler\r\n    if _interrupt_handler is None:\r\n        default_handler = signal.getsignal(signal.SIGINT)\r\n        _interrupt_handler = _InterruptHandler(default_handler)\r\n        signal.signal(signal.SIGINT, _interrupt_handler)\r\ndef removeHandler(method=None):\r\n    if method is not None:\r\n        @wraps(method)\r\n        def inner(*args, **kwargs):\r\n            initial = signal.getsignal(signal.SIGINT)\r\n            removeHandler()\r\n            try:\r\n                return method(*args, **kwargs)\r\n            finally:\r\n                signal.signal(signal.SIGINT, initial)\r\n        return inner\r\n    global _interrupt_handler\r\n    if _interrupt_handler is not None:\r\n        signal.signal(signal.SIGINT, _interrupt_handler.default_handler)\r\n", "/Lib/browser/websocket.py": "from _websocket import *", "/Lib/_thread.py": "\"\"\"Drop-in replacement for the thread module.\nMeant to be used as a brain-dead substitute so that threaded code does\nnot need to be rewritten for when the thread module is not present.\nSuggested usage is::\n    try:\n        import _thread\n    except ImportError:\n        import _dummy_thread as _thread\n\"\"\"\n__all__ = ['error', 'start_new_thread', 'exit', 'get_ident', 'allocate_lock',\n           'interrupt_main', 'LockType']\nTIMEOUT_MAX = 2**31\nerror = RuntimeError\ndef start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by _thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.\n    \"\"\"\n    if type(args) != type(tuple()):\n        raise TypeError(\"2nd arg must be a tuple\")\n    if type(kwargs) != type(dict()):\n        raise TypeError(\"3rd arg must be a dict\")\n    global _main\n    _main = False\n    try:\n        function(*args, **kwargs)\n    except SystemExit:\n        pass\n    except:\n        import traceback\n        traceback.print_exc()\n    _main = True\n    global _interrupt\n    if _interrupt:\n        _interrupt = False\n        raise KeyboardInterrupt\ndef exit():\n    \"\"\"Dummy implementation of _thread.exit().\"\"\"\n    raise SystemExit\ndef get_ident():\n    \"\"\"Dummy implementation of _thread.get_ident().\n    Since this module should only be used when _threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    \"\"\"\n    return -1\ndef allocate_lock():\n    \"\"\"Dummy implementation of _thread.allocate_lock().\"\"\"\n    return LockType()\ndef stack_size(size=None):\n    \"\"\"Dummy implementation of _thread.stack_size().\"\"\"\n    if size is not None:\n        raise error(\"setting thread stack size not supported\")\n    return 0\nclass LockType(object):\n    \"\"\"Class implementing dummy implementation of _thread.LockType.\n    Compatibility is maintained by maintaining self.locked_status\n    which is a boolean that stores the state of the lock.  Pickling of\n    the lock, though, should not be done since if the _thread module is\n    then used with an unpickled ``lock()`` from here problems could\n    occur from this class not having atomic methods.\n    \"\"\"\n    def __init__(self):\n        self.locked_status = False\n    def acquire(self, waitflag=None, timeout=-1):\n        \"\"\"Dummy implementation of acquire().\n        For blocking calls, self.locked_status is automatically set to\n        True and returned appropriately based on value of\n        ``waitflag``.  If it is non-blocking, then the value is\n        actually checked and not set if it is already acquired.  This\n        is all done so that threading.Condition's assert statements\n        aren't triggered and throw a little fit.\n        \"\"\"\n        if waitflag is None or waitflag:\n            self.locked_status = True\n            return True\n        else:\n            if not self.locked_status:\n                self.locked_status = True\n                return True\n            else:\n                if timeout > 0:\n                    import time\n                    time.sleep(timeout)\n                return False\n    __enter__ = acquire\n    def __exit__(self, typ, val, tb):\n        self.release()\n    def release(self):\n        \"\"\"Release the dummy lock.\"\"\"\n        if not self.locked_status:\n            raise error\n        self.locked_status = False\n        return True\n    def locked(self):\n        return self.locked_status\n_interrupt = False\n_main = True\ndef interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt\n        _interrupt = True\nclass _local:\n    pass", "/libs/_io.js": "$module={};", "/Lib/unittest/test/testmock/testmock.py": "import copy\r\nimport sys\r\nimport unittest\r\nfrom unittest.test.testmock.support import is_instance\r\nfrom unittest import mock\r\nfrom unittest.mock import (\r\n    call, DEFAULT, patch, sentinel,\r\n    MagicMock, Mock, NonCallableMock,\r\n    NonCallableMagicMock, _CallList,\r\n    create_autospec\r\n)\r\nclass Iter(object):\r\n    def __init__(self):\r\n        self.thing = iter(['this', 'is', 'an', 'iter'])\r\n    def __iter__(self):\r\n        return self\r\n    def next(self):\r\n        return next(self.thing)\r\n    __next__ = next\r\nclass MockTest(unittest.TestCase):\r\n    def test_all(self):\r\n        exec(\"from unittest.mock import *\")\r\n    def test_constructor(self):\r\n        mock = Mock()\r\n        self.assertFalse(mock.called, \"called not initialised correctly\")\r\n        self.assertEqual(mock.call_count, 0,\r\n                         \"call_count not initialised correctly\")\r\n        self.assertTrue(is_instance(mock.return_value, Mock),\r\n                        \"return_value not initialised correctly\")\r\n        self.assertEqual(mock.call_args, None,\r\n                         \"call_args not initialised correctly\")\r\n        self.assertEqual(mock.call_args_list, [],\r\n                         \"call_args_list not initialised correctly\")\r\n        self.assertEqual(mock.method_calls, [],\r\n                          \"method_calls not initialised correctly\")\r\n        self.assertFalse('_items' in mock.__dict__,\r\n                         \"default mock should not have '_items' attribute\")\r\n        self.assertIsNone(mock._mock_parent,\r\n                          \"parent not initialised correctly\")\r\n        self.assertIsNone(mock._mock_methods,\r\n                          \"methods not initialised correctly\")\r\n        self.assertEqual(mock._mock_children, {},\r\n                         \"children not initialised incorrectly\")\r\n    def test_return_value_in_constructor(self):\r\n        mock = Mock(return_value=None)\r\n        self.assertIsNone(mock.return_value,\r\n                          \"return value in constructor not honoured\")\r\n    def test_repr(self):\r\n        mock = Mock(name='foo')\r\n        self.assertIn('foo', repr(mock))\r\n        self.assertIn(\"'%s'\" % id(mock), repr(mock))\r\n        mocks = [(Mock(), 'mock'), (Mock(name='bar'), 'bar')]\r\n        for mock, name in mocks:\r\n            self.assertIn('%s.bar' % name, repr(mock.bar))\r\n            self.assertIn('%s.foo()' % name, repr(mock.foo()))\r\n            self.assertIn('%s.foo().bing' % name, repr(mock.foo().bing))\r\n            self.assertIn('%s()' % name, repr(mock()))\r\n            self.assertIn('%s()()' % name, repr(mock()()))\r\n            self.assertIn('%s()().foo.bar.baz().bing' % name,\r\n                          repr(mock()().foo.bar.baz().bing))\r\n    def test_repr_with_spec(self):\r\n        class X(object):\r\n            pass\r\n        mock = Mock(spec=X)\r\n        self.assertIn(\" spec='X' \", repr(mock))\r\n        mock = Mock(spec=X())\r\n        self.assertIn(\" spec='X' \", repr(mock))\r\n        mock = Mock(spec_set=X)\r\n        self.assertIn(\" spec_set='X' \", repr(mock))\r\n        mock = Mock(spec_set=X())\r\n        self.assertIn(\" spec_set='X' \", repr(mock))\r\n        mock = Mock(spec=X, name='foo')\r\n        self.assertIn(\" spec='X' \", repr(mock))\r\n        self.assertIn(\" name='foo' \", repr(mock))\r\n        mock = Mock(name='foo')\r\n        self.assertNotIn(\"spec\", repr(mock))\r\n        mock = Mock()\r\n        self.assertNotIn(\"spec\", repr(mock))\r\n        mock = Mock(spec=['foo'])\r\n        self.assertNotIn(\"spec\", repr(mock))\r\n    def test_side_effect(self):\r\n        mock = Mock()\r\n        def effect(*args, **kwargs):\r\n            raise SystemError('kablooie')\r\n        mock.side_effect = effect\r\n        self.assertRaises(SystemError, mock, 1, 2, fish=3)\r\n        mock.assert_called_with(1, 2, fish=3)\r\n        results = [1, 2, 3]\r\n        def effect():\r\n            return results.pop()\r\n        mock.side_effect = effect\r\n        self.assertEqual([mock(), mock(), mock()], [3, 2, 1],\r\n                          \"side effect not used correctly\")\r\n        mock = Mock(side_effect=sentinel.SideEffect)\r\n        self.assertEqual(mock.side_effect, sentinel.SideEffect,\r\n                          \"side effect in constructor not used\")\r\n        def side_effect():\r\n            return DEFAULT\r\n        mock = Mock(side_effect=side_effect, return_value=sentinel.RETURN)\r\n        self.assertEqual(mock(), sentinel.RETURN)\r\n    @unittest.skipUnless('java' in sys.platform,\r\n                          'This test only applies to Jython')\r\n    def test_java_exception_side_effect(self):\r\n        import java\r\n        mock = Mock(side_effect=java.lang.RuntimeException(\"Boom!\"))\r\n        try:\r\n            mock(1, 2, fish=3)\r\n        except java.lang.RuntimeException:\r\n            pass\r\n        else:\r\n            self.fail('java exception not raised')\r\n        mock.assert_called_with(1,2, fish=3)\r\n    def test_reset_mock(self):\r\n        parent = Mock()\r\n        spec = [\"something\"]\r\n        mock = Mock(name=\"child\", parent=parent, spec=spec)\r\n        mock(sentinel.Something, something=sentinel.SomethingElse)\r\n        something = mock.something\r\n        mock.something()\r\n        mock.side_effect = sentinel.SideEffect\r\n        return_value = mock.return_value\r\n        return_value()\r\n        mock.reset_mock()\r\n        self.assertEqual(mock._mock_name, \"child\",\r\n                         \"name incorrectly reset\")\r\n        self.assertEqual(mock._mock_parent, parent,\r\n                         \"parent incorrectly reset\")\r\n        self.assertEqual(mock._mock_methods, spec,\r\n                         \"methods incorrectly reset\")\r\n        self.assertFalse(mock.called, \"called not reset\")\r\n        self.assertEqual(mock.call_count, 0, \"call_count not reset\")\r\n        self.assertEqual(mock.call_args, None, \"call_args not reset\")\r\n        self.assertEqual(mock.call_args_list, [], \"call_args_list not reset\")\r\n        self.assertEqual(mock.method_calls, [],\r\n                        \"method_calls not initialised correctly: %r != %r\" %\r\n                        (mock.method_calls, []))\r\n        self.assertEqual(mock.mock_calls, [])\r\n        self.assertEqual(mock.side_effect, sentinel.SideEffect,\r\n                          \"side_effect incorrectly reset\")\r\n        self.assertEqual(mock.return_value, return_value,\r\n                          \"return_value incorrectly reset\")\r\n        self.assertFalse(return_value.called, \"return value mock not reset\")\r\n        self.assertEqual(mock._mock_children, {'something': something},\r\n                          \"children reset incorrectly\")\r\n        self.assertEqual(mock.something, something,\r\n                          \"children incorrectly cleared\")\r\n        self.assertFalse(mock.something.called, \"child not reset\")\r\n    def test_reset_mock_recursion(self):\r\n        mock = Mock()\r\n        mock.return_value = mock\r\n        mock.reset_mock()\r\n    def test_call(self):\r\n        mock = Mock()\r\n        self.assertTrue(is_instance(mock.return_value, Mock),\r\n                        \"Default return_value should be a Mock\")\r\n        result = mock()\r\n        self.assertEqual(mock(), result,\r\n                         \"different result from consecutive calls\")\r\n        mock.reset_mock()\r\n        ret_val = mock(sentinel.Arg)\r\n        self.assertTrue(mock.called, \"called not set\")\r\n        self.assertEqual(mock.call_count, 1, \"call_count incoreect\")\r\n        self.assertEqual(mock.call_args, ((sentinel.Arg,), {}),\r\n                         \"call_args not set\")\r\n        self.assertEqual(mock.call_args_list, [((sentinel.Arg,), {})],\r\n                         \"call_args_list not initialised correctly\")\r\n        mock.return_value = sentinel.ReturnValue\r\n        ret_val = mock(sentinel.Arg, key=sentinel.KeyArg)\r\n        self.assertEqual(ret_val, sentinel.ReturnValue,\r\n                         \"incorrect return value\")\r\n        self.assertEqual(mock.call_count, 2, \"call_count incorrect\")\r\n        self.assertEqual(mock.call_args,\r\n                         ((sentinel.Arg,), {'key': sentinel.KeyArg}),\r\n                         \"call_args not set\")\r\n        self.assertEqual(mock.call_args_list, [\r\n            ((sentinel.Arg,), {}),\r\n            ((sentinel.Arg,), {'key': sentinel.KeyArg})\r\n        ],\r\n            \"call_args_list not set\")\r\n    def test_call_args_comparison(self):\r\n        mock = Mock()\r\n        mock()\r\n        mock(sentinel.Arg)\r\n        mock(kw=sentinel.Kwarg)\r\n        mock(sentinel.Arg, kw=sentinel.Kwarg)\r\n        self.assertEqual(mock.call_args_list, [\r\n            (),\r\n            ((sentinel.Arg,),),\r\n            ({\"kw\": sentinel.Kwarg},),\r\n            ((sentinel.Arg,), {\"kw\": sentinel.Kwarg})\r\n        ])\r\n        self.assertEqual(mock.call_args,\r\n                         ((sentinel.Arg,), {\"kw\": sentinel.Kwarg}))\r\n    def test_assert_called_with(self):\r\n        mock = Mock()\r\n        mock()\r\n        mock.assert_called_with()\r\n        self.assertRaises(AssertionError, mock.assert_called_with, 1)\r\n        mock.reset_mock()\r\n        self.assertRaises(AssertionError, mock.assert_called_with)\r\n        mock(1, 2, 3, a='fish', b='nothing')\r\n        mock.assert_called_with(1, 2, 3, a='fish', b='nothing')\r\n    def test_assert_called_once_with(self):\r\n        mock = Mock()\r\n        mock()\r\n        mock.assert_called_once_with()\r\n        mock()\r\n        self.assertRaises(AssertionError, mock.assert_called_once_with)\r\n        mock.reset_mock()\r\n        self.assertRaises(AssertionError, mock.assert_called_once_with)\r\n        mock('foo', 'bar', baz=2)\r\n        mock.assert_called_once_with('foo', 'bar', baz=2)\r\n        mock.reset_mock()\r\n        mock('foo', 'bar', baz=2)\r\n        self.assertRaises(\r\n            AssertionError,\r\n            lambda: mock.assert_called_once_with('bob', 'bar', baz=2)\r\n        )\r\n    def test_attribute_access_returns_mocks(self):\r\n        mock = Mock()\r\n        something = mock.something\r\n        self.assertTrue(is_instance(something, Mock), \"attribute isn't a mock\")\r\n        self.assertEqual(mock.something, something,\r\n                         \"different attributes returned for same name\")\r\n        mock = Mock()\r\n        mock.something.return_value = 3\r\n        self.assertEqual(mock.something(), 3, \"method returned wrong value\")\r\n        self.assertTrue(mock.something.called,\r\n                        \"method didn't record being called\")\r\n    def test_attributes_have_name_and_parent_set(self):\r\n        mock = Mock()\r\n        something = mock.something\r\n        self.assertEqual(something._mock_name, \"something\",\r\n                         \"attribute name not set correctly\")\r\n        self.assertEqual(something._mock_parent, mock,\r\n                         \"attribute parent not set correctly\")\r\n    def test_method_calls_recorded(self):\r\n        mock = Mock()\r\n        mock.something(3, fish=None)\r\n        mock.something_else.something(6, cake=sentinel.Cake)\r\n        self.assertEqual(mock.something_else.method_calls,\r\n                          [(\"something\", (6,), {'cake': sentinel.Cake})],\r\n                          \"method calls not recorded correctly\")\r\n        self.assertEqual(mock.method_calls, [\r\n            (\"something\", (3,), {'fish': None}),\r\n            (\"something_else.something\", (6,), {'cake': sentinel.Cake})\r\n        ],\r\n            \"method calls not recorded correctly\")\r\n    def test_method_calls_compare_easily(self):\r\n        mock = Mock()\r\n        mock.something()\r\n        self.assertEqual(mock.method_calls, [('something',)])\r\n        self.assertEqual(mock.method_calls, [('something', (), {})])\r\n        mock = Mock()\r\n        mock.something('different')\r\n        self.assertEqual(mock.method_calls, [('something', ('different',))])\r\n        self.assertEqual(mock.method_calls,\r\n                         [('something', ('different',), {})])\r\n        mock = Mock()\r\n        mock.something(x=1)\r\n        self.assertEqual(mock.method_calls, [('something', {'x': 1})])\r\n        self.assertEqual(mock.method_calls, [('something', (), {'x': 1})])\r\n        mock = Mock()\r\n        mock.something('different', some='more')\r\n        self.assertEqual(mock.method_calls, [\r\n            ('something', ('different',), {'some': 'more'})\r\n        ])\r\n    def test_only_allowed_methods_exist(self):\r\n        for spec in ['something'], ('something',):\r\n            for arg in 'spec', 'spec_set':\r\n                mock = Mock(**{arg: spec})\r\n                mock.something\r\n                self.assertRaisesRegex(\r\n                    AttributeError,\r\n                    \"Mock object has no attribute 'something_else'\",\r\n                    getattr, mock, 'something_else'\r\n                )\r\n    def test_from_spec(self):\r\n        class Something(object):\r\n            x = 3\r\n            __something__ = None\r\n            def y(self):\r\n                pass\r\n        def test_attributes(mock):\r\n            mock.x\r\n            mock.y\r\n            mock.__something__\r\n            self.assertRaisesRegex(\r\n                AttributeError,\r\n                \"Mock object has no attribute 'z'\",\r\n                getattr, mock, 'z'\r\n            )\r\n            self.assertRaisesRegex(\r\n                AttributeError,\r\n                \"Mock object has no attribute '__foobar__'\",\r\n                getattr, mock, '__foobar__'\r\n            )\r\n        test_attributes(Mock(spec=Something))\r\n        test_attributes(Mock(spec=Something()))\r\n    def test_wraps_calls(self):\r\n        real = Mock()\r\n        mock = Mock(wraps=real)\r\n        self.assertEqual(mock(), real())\r\n        real.reset_mock()\r\n        mock(1, 2, fish=3)\r\n        real.assert_called_with(1, 2, fish=3)\r\n    def test_wraps_call_with_nondefault_return_value(self):\r\n        real = Mock()\r\n        mock = Mock(wraps=real)\r\n        mock.return_value = 3\r\n        self.assertEqual(mock(), 3)\r\n        self.assertFalse(real.called)\r\n    def test_wraps_attributes(self):\r\n        class Real(object):\r\n            attribute = Mock()\r\n        real = Real()\r\n        mock = Mock(wraps=real)\r\n        self.assertEqual(mock.attribute(), real.attribute())\r\n        self.assertRaises(AttributeError, lambda: mock.fish)\r\n        self.assertNotEqual(mock.attribute, real.attribute)\r\n        result = mock.attribute.frog(1, 2, fish=3)\r\n        Real.attribute.frog.assert_called_with(1, 2, fish=3)\r\n        self.assertEqual(result, Real.attribute.frog())\r\n    def test_exceptional_side_effect(self):\r\n        mock = Mock(side_effect=AttributeError)\r\n        self.assertRaises(AttributeError, mock)\r\n        mock = Mock(side_effect=AttributeError('foo'))\r\n        self.assertRaises(AttributeError, mock)\r\n    def test_baseexceptional_side_effect(self):\r\n        mock = Mock(side_effect=KeyboardInterrupt)\r\n        self.assertRaises(KeyboardInterrupt, mock)\r\n        mock = Mock(side_effect=KeyboardInterrupt('foo'))\r\n        self.assertRaises(KeyboardInterrupt, mock)\r\n    def test_assert_called_with_message(self):\r\n        mock = Mock()\r\n        self.assertRaisesRegex(AssertionError, 'Not called',\r\n                                mock.assert_called_with)\r\n    def test__name__(self):\r\n        mock = Mock()\r\n        self.assertRaises(AttributeError, lambda: mock.__name__)\r\n        mock.__name__ = 'foo'\r\n        self.assertEqual(mock.__name__, 'foo')\r\n    def test_spec_list_subclass(self):\r\n        class Sub(list):\r\n            pass\r\n        mock = Mock(spec=Sub(['foo']))\r\n        mock.append(3)\r\n        mock.append.assert_called_with(3)\r\n        self.assertRaises(AttributeError, getattr, mock, 'foo')\r\n    def test_spec_class(self):\r\n        class X(object):\r\n            pass\r\n        mock = Mock(spec=X)\r\n        self.assertTrue(isinstance(mock, X))\r\n        mock = Mock(spec=X())\r\n        self.assertTrue(isinstance(mock, X))\r\n        self.assertIs(mock.__class__, X)\r\n        self.assertEqual(Mock().__class__.__name__, 'Mock')\r\n        mock = Mock(spec_set=X)\r\n        self.assertTrue(isinstance(mock, X))\r\n        mock = Mock(spec_set=X())\r\n        self.assertTrue(isinstance(mock, X))\r\n    def test_setting_attribute_with_spec_set(self):\r\n        class X(object):\r\n            y = 3\r\n        mock = Mock(spec=X)\r\n        mock.x = 'foo'\r\n        mock = Mock(spec_set=X)\r\n        def set_attr():\r\n            mock.x = 'foo'\r\n        mock.y = 'foo'\r\n        self.assertRaises(AttributeError, set_attr)\r\n    def test_copy(self):\r\n        current = sys.getrecursionlimit()\r\n        self.addCleanup(sys.setrecursionlimit, current)\r\n        sys.setrecursionlimit(int(10e8))\r\n        copy.copy(Mock())\r\n    def test_subclass_with_properties(self):\r\n        class SubClass(Mock):\r\n            def _get(self):\r\n                return 3\r\n            def _set(self, value):\r\n                raise NameError('strange error')\r\n            some_attribute = property(_get, _set)\r\n        s = SubClass(spec_set=SubClass)\r\n        self.assertEqual(s.some_attribute, 3)\r\n        def test():\r\n            s.some_attribute = 3\r\n        self.assertRaises(NameError, test)\r\n        def test():\r\n            s.foo = 'bar'\r\n        self.assertRaises(AttributeError, test)\r\n    def test_setting_call(self):\r\n        mock = Mock()\r\n        def __call__(self, a):\r\n            return self._mock_call(a)\r\n        type(mock).__call__ = __call__\r\n        mock('one')\r\n        mock.assert_called_with('one')\r\n        self.assertRaises(TypeError, mock, 'one', 'two')\r\n    def test_dir(self):\r\n        mock = Mock()\r\n        attrs = set(dir(mock))\r\n        type_attrs = set([m for m in dir(Mock) if not m.startswith('_')])\r\n        self.assertEqual(set(), type_attrs - attrs)\r\n        mock.a, mock.b\r\n        self.assertIn('a', dir(mock))\r\n        self.assertIn('b', dir(mock))\r\n        mock.c = mock.d = None\r\n        self.assertIn('c', dir(mock))\r\n        self.assertIn('d', dir(mock))\r\n        mock.__iter__ = lambda s: iter([])\r\n        self.assertIn('__iter__', dir(mock))\r\n    def test_dir_from_spec(self):\r\n        mock = Mock(spec=unittest.TestCase)\r\n        testcase_attrs = set(dir(unittest.TestCase))\r\n        attrs = set(dir(mock))\r\n        self.assertEqual(set(), testcase_attrs - attrs)\r\n        mock.version = 3\r\n        self.assertEqual(dir(mock).count('version'), 1)\r\n    def test_filter_dir(self):\r\n        patcher = patch.object(mock, 'FILTER_DIR', False)\r\n        patcher.start()\r\n        try:\r\n            attrs = set(dir(Mock()))\r\n            type_attrs = set(dir(Mock))\r\n            self.assertEqual(set(), type_attrs - attrs)\r\n        finally:\r\n            patcher.stop()\r\n    def test_configure_mock(self):\r\n        mock = Mock(foo='bar')\r\n        self.assertEqual(mock.foo, 'bar')\r\n        mock = MagicMock(foo='bar')\r\n        self.assertEqual(mock.foo, 'bar')\r\n        kwargs = {'side_effect': KeyError, 'foo.bar.return_value': 33,\r\n                  'foo': MagicMock()}\r\n        mock = Mock(**kwargs)\r\n        self.assertRaises(KeyError, mock)\r\n        self.assertEqual(mock.foo.bar(), 33)\r\n        self.assertIsInstance(mock.foo, MagicMock)\r\n        mock = Mock()\r\n        mock.configure_mock(**kwargs)\r\n        self.assertRaises(KeyError, mock)\r\n        self.assertEqual(mock.foo.bar(), 33)\r\n        self.assertIsInstance(mock.foo, MagicMock)\r\n    def assertRaisesWithMsg(self, exception, message, func, *args, **kwargs):\r\n        try:\r\n            func(*args, **kwargs)\r\n        except:\r\n            instance = sys.exc_info()[1]\r\n            self.assertIsInstance(instance, exception)\r\n        else:\r\n            self.fail('Exception %r not raised' % (exception,))\r\n        msg = str(instance)\r\n        self.assertEqual(msg, message)\r\n    def test_assert_called_with_failure_message(self):\r\n        mock = NonCallableMock()\r\n        expected = \"mock(1, '2', 3, bar='foo')\"\r\n        message = 'Expected call: %s\\nNot called'\r\n        self.assertRaisesWithMsg(\r\n            AssertionError, message % (expected,),\r\n            mock.assert_called_with, 1, '2', 3, bar='foo'\r\n        )\r\n        mock.foo(1, '2', 3, foo='foo')\r\n        asserters = [\r\n            mock.foo.assert_called_with, mock.foo.assert_called_once_with\r\n        ]\r\n        for meth in asserters:\r\n            actual = \"foo(1, '2', 3, foo='foo')\"\r\n            expected = \"foo(1, '2', 3, bar='foo')\"\r\n            message = 'Expected call: %s\\nActual call: %s'\r\n            self.assertRaisesWithMsg(\r\n                AssertionError, message % (expected, actual),\r\n                meth, 1, '2', 3, bar='foo'\r\n            )\r\n        for meth in asserters:\r\n            actual = \"foo(1, '2', 3, foo='foo')\"\r\n            expected = \"foo(bar='foo')\"\r\n            message = 'Expected call: %s\\nActual call: %s'\r\n            self.assertRaisesWithMsg(\r\n                AssertionError, message % (expected, actual),\r\n                meth, bar='foo'\r\n            )\r\n        for meth in asserters:\r\n            actual = \"foo(1, '2', 3, foo='foo')\"\r\n            expected = \"foo(1, 2, 3)\"\r\n            message = 'Expected call: %s\\nActual call: %s'\r\n            self.assertRaisesWithMsg(\r\n                AssertionError, message % (expected, actual),\r\n                meth, 1, 2, 3\r\n            )\r\n        for meth in asserters:\r\n            actual = \"foo(1, '2', 3, foo='foo')\"\r\n            expected = \"foo()\"\r\n            message = 'Expected call: %s\\nActual call: %s'\r\n            self.assertRaisesWithMsg(\r\n                AssertionError, message % (expected, actual), meth\r\n            )\r\n    def test_mock_calls(self):\r\n        mock = MagicMock()\r\n        self.assertIs(mock.mock_calls == [], True)\r\n        mock = MagicMock()\r\n        mock()\r\n        expected = [('', (), {})]\r\n        self.assertEqual(mock.mock_calls, expected)\r\n        mock.foo()\r\n        expected.append(call.foo())\r\n        self.assertEqual(mock.mock_calls, expected)\r\n        self.assertEqual(mock.foo.mock_calls, [('', (), {})])\r\n        mock = MagicMock()\r\n        mock().foo(1, 2, 3, a=4, b=5)\r\n        expected = [\r\n            ('', (), {}), ('().foo', (1, 2, 3), dict(a=4, b=5))\r\n        ]\r\n        self.assertEqual(mock.mock_calls, expected)\r\n        self.assertEqual(mock.return_value.foo.mock_calls,\r\n                         [('', (1, 2, 3), dict(a=4, b=5))])\r\n        self.assertEqual(mock.return_value.mock_calls,\r\n                         [('foo', (1, 2, 3), dict(a=4, b=5))])\r\n        mock = MagicMock()\r\n        mock().foo.bar().baz()\r\n        expected = [\r\n            ('', (), {}), ('().foo.bar', (), {}),\r\n            ('().foo.bar().baz', (), {})\r\n        ]\r\n        self.assertEqual(mock.mock_calls, expected)\r\n        self.assertEqual(mock().mock_calls,\r\n                         call.foo.bar().baz().call_list())\r\n        for kwargs in dict(), dict(name='bar'):\r\n            mock = MagicMock(**kwargs)\r\n            int(mock.foo)\r\n            expected = [('foo.__int__', (), {})]\r\n            self.assertEqual(mock.mock_calls, expected)\r\n            mock = MagicMock(**kwargs)\r\n            mock.a()()\r\n            expected = [('a', (), {}), ('a()', (), {})]\r\n            self.assertEqual(mock.mock_calls, expected)\r\n            self.assertEqual(mock.a().mock_calls, [call()])\r\n            mock = MagicMock(**kwargs)\r\n            mock(1)(2)(3)\r\n            self.assertEqual(mock.mock_calls, call(1)(2)(3).call_list())\r\n            self.assertEqual(mock().mock_calls, call(2)(3).call_list())\r\n            self.assertEqual(mock()().mock_calls, call(3).call_list())\r\n            mock = MagicMock(**kwargs)\r\n            mock(1)(2)(3).a.b.c(4)\r\n            self.assertEqual(mock.mock_calls,\r\n                             call(1)(2)(3).a.b.c(4).call_list())\r\n            self.assertEqual(mock().mock_calls,\r\n                             call(2)(3).a.b.c(4).call_list())\r\n            self.assertEqual(mock()().mock_calls,\r\n                             call(3).a.b.c(4).call_list())\r\n            mock = MagicMock(**kwargs)\r\n            int(mock().foo.bar().baz())\r\n            last_call = ('().foo.bar().baz().__int__', (), {})\r\n            self.assertEqual(mock.mock_calls[-1], last_call)\r\n            self.assertEqual(mock().mock_calls,\r\n                             call.foo.bar().baz().__int__().call_list())\r\n            self.assertEqual(mock().foo.bar().mock_calls,\r\n                             call.baz().__int__().call_list())\r\n            self.assertEqual(mock().foo.bar().baz.mock_calls,\r\n                             call().__int__().call_list())\r\n    def test_subclassing(self):\r\n        class Subclass(Mock):\r\n            pass\r\n        mock = Subclass()\r\n        self.assertIsInstance(mock.foo, Subclass)\r\n        self.assertIsInstance(mock(), Subclass)\r\n        class Subclass(Mock):\r\n            def _get_child_mock(self, **kwargs):\r\n                return Mock(**kwargs)\r\n        mock = Subclass()\r\n        self.assertNotIsInstance(mock.foo, Subclass)\r\n        self.assertNotIsInstance(mock(), Subclass)\r\n    def test_arg_lists(self):\r\n        mocks = [\r\n            Mock(),\r\n            MagicMock(),\r\n            NonCallableMock(),\r\n            NonCallableMagicMock()\r\n        ]\r\n        def assert_attrs(mock):\r\n            names = 'call_args_list', 'method_calls', 'mock_calls'\r\n            for name in names:\r\n                attr = getattr(mock, name)\r\n                self.assertIsInstance(attr, _CallList)\r\n                self.assertIsInstance(attr, list)\r\n                self.assertEqual(attr, [])\r\n        for mock in mocks:\r\n            assert_attrs(mock)\r\n            if callable(mock):\r\n                mock()\r\n                mock(1, 2)\r\n                mock(a=3)\r\n                mock.reset_mock()\r\n                assert_attrs(mock)\r\n            mock.foo()\r\n            mock.foo.bar(1, a=3)\r\n            mock.foo(1).bar().baz(3)\r\n            mock.reset_mock()\r\n            assert_attrs(mock)\r\n    def test_call_args_two_tuple(self):\r\n        mock = Mock()\r\n        mock(1, a=3)\r\n        mock(2, b=4)\r\n        self.assertEqual(len(mock.call_args), 2)\r\n        args, kwargs = mock.call_args\r\n        self.assertEqual(args, (2,))\r\n        self.assertEqual(kwargs, dict(b=4))\r\n        expected_list = [((1,), dict(a=3)), ((2,), dict(b=4))]\r\n        for expected, call_args in zip(expected_list, mock.call_args_list):\r\n            self.assertEqual(len(call_args), 2)\r\n            self.assertEqual(expected[0], call_args[0])\r\n            self.assertEqual(expected[1], call_args[1])\r\n    def test_side_effect_iterator(self):\r\n        mock = Mock(side_effect=iter([1, 2, 3]))\r\n        self.assertEqual([mock(), mock(), mock()], [1, 2, 3])\r\n        self.assertRaises(StopIteration, mock)\r\n        mock = MagicMock(side_effect=['a', 'b', 'c'])\r\n        self.assertEqual([mock(), mock(), mock()], ['a', 'b', 'c'])\r\n        self.assertRaises(StopIteration, mock)\r\n        mock = Mock(side_effect='ghi')\r\n        self.assertEqual([mock(), mock(), mock()], ['g', 'h', 'i'])\r\n        self.assertRaises(StopIteration, mock)\r\n        class Foo(object):\r\n            pass\r\n        mock = MagicMock(side_effect=Foo)\r\n        self.assertIsInstance(mock(), Foo)\r\n        mock = Mock(side_effect=Iter())\r\n        self.assertEqual([mock(), mock(), mock(), mock()],\r\n                         ['this', 'is', 'an', 'iter'])\r\n        self.assertRaises(StopIteration, mock)\r\n    def test_side_effect_iterator_exceptions(self):\r\n        for Klass in Mock, MagicMock:\r\n            iterable = (ValueError, 3, KeyError, 6)\r\n            m = Klass(side_effect=iterable)\r\n            self.assertRaises(ValueError, m)\r\n            self.assertEqual(m(), 3)\r\n            self.assertRaises(KeyError, m)\r\n            self.assertEqual(m(), 6)\r\n    def test_side_effect_setting_iterator(self):\r\n        mock = Mock()\r\n        mock.side_effect = iter([1, 2, 3])\r\n        self.assertEqual([mock(), mock(), mock()], [1, 2, 3])\r\n        self.assertRaises(StopIteration, mock)\r\n        side_effect = mock.side_effect\r\n        self.assertIsInstance(side_effect, type(iter([])))\r\n        mock.side_effect = ['a', 'b', 'c']\r\n        self.assertEqual([mock(), mock(), mock()], ['a', 'b', 'c'])\r\n        self.assertRaises(StopIteration, mock)\r\n        side_effect = mock.side_effect\r\n        self.assertIsInstance(side_effect, type(iter([])))\r\n        this_iter = Iter()\r\n        mock.side_effect = this_iter\r\n        self.assertEqual([mock(), mock(), mock(), mock()],\r\n                         ['this', 'is', 'an', 'iter'])\r\n        self.assertRaises(StopIteration, mock)\r\n        self.assertIs(mock.side_effect, this_iter)\r\n    def test_assert_has_calls_any_order(self):\r\n        mock = Mock()\r\n        mock(1, 2)\r\n        mock(a=3)\r\n        mock(3, 4)\r\n        mock(b=6)\r\n        mock(b=6)\r\n        kalls = [\r\n            call(1, 2), ({'a': 3},),\r\n            ((3, 4),), ((), {'a': 3}),\r\n            ('', (1, 2)), ('', {'a': 3}),\r\n            ('', (1, 2), {}), ('', (), {'a': 3})\r\n        ]\r\n        for kall in kalls:\r\n            mock.assert_has_calls([kall], any_order=True)\r\n        for kall in call(1, '2'), call(b=3), call(), 3, None, 'foo':\r\n            self.assertRaises(\r\n                AssertionError, mock.assert_has_calls,\r\n                [kall], any_order=True\r\n            )\r\n        kall_lists = [\r\n            [call(1, 2), call(b=6)],\r\n            [call(3, 4), call(1, 2)],\r\n            [call(b=6), call(b=6)],\r\n        ]\r\n        for kall_list in kall_lists:\r\n            mock.assert_has_calls(kall_list, any_order=True)\r\n        kall_lists = [\r\n            [call(b=6), call(b=6), call(b=6)],\r\n            [call(1, 2), call(1, 2)],\r\n            [call(3, 4), call(1, 2), call(5, 7)],\r\n            [call(b=6), call(3, 4), call(b=6), call(1, 2), call(b=6)],\r\n        ]\r\n        for kall_list in kall_lists:\r\n            self.assertRaises(\r\n                AssertionError, mock.assert_has_calls,\r\n                kall_list, any_order=True\r\n            )\r\n    def test_assert_has_calls(self):\r\n        kalls1 = [\r\n                call(1, 2), ({'a': 3},),\r\n                ((3, 4),), call(b=6),\r\n                ('', (1,), {'b': 6}),\r\n        ]\r\n        kalls2 = [call.foo(), call.bar(1)]\r\n        kalls2.extend(call.spam().baz(a=3).call_list())\r\n        kalls2.extend(call.bam(set(), foo={}).fish([1]).call_list())\r\n        mocks = []\r\n        for mock in Mock(), MagicMock():\r\n            mock(1, 2)\r\n            mock(a=3)\r\n            mock(3, 4)\r\n            mock(b=6)\r\n            mock(1, b=6)\r\n            mocks.append((mock, kalls1))\r\n        mock = Mock()\r\n        mock.foo()\r\n        mock.bar(1)\r\n        mock.spam().baz(a=3)\r\n        mock.bam(set(), foo={}).fish([1])\r\n        mocks.append((mock, kalls2))\r\n        for mock, kalls in mocks:\r\n            for i in range(len(kalls)):\r\n                for step in 1, 2, 3:\r\n                    these = kalls[i:i+step]\r\n                    mock.assert_has_calls(these)\r\n                    if len(these) > 1:\r\n                        self.assertRaises(\r\n                            AssertionError,\r\n                            mock.assert_has_calls,\r\n                            list(reversed(these))\r\n                        )\r\n    def test_assert_any_call(self):\r\n        mock = Mock()\r\n        mock(1, 2)\r\n        mock(a=3)\r\n        mock(1, b=6)\r\n        mock.assert_any_call(1, 2)\r\n        mock.assert_any_call(a=3)\r\n        mock.assert_any_call(1, b=6)\r\n        self.assertRaises(\r\n            AssertionError,\r\n            mock.assert_any_call\r\n        )\r\n        self.assertRaises(\r\n            AssertionError,\r\n            mock.assert_any_call,\r\n            1, 3\r\n        )\r\n        self.assertRaises(\r\n            AssertionError,\r\n            mock.assert_any_call,\r\n            a=4\r\n        )\r\n    def test_mock_calls_create_autospec(self):\r\n        def f(a, b):\r\n            pass\r\n        obj = Iter()\r\n        obj.f = f\r\n        funcs = [\r\n            create_autospec(f),\r\n            create_autospec(obj).f\r\n        ]\r\n        for func in funcs:\r\n            func(1, 2)\r\n            func(3, 4)\r\n            self.assertEqual(\r\n                func.mock_calls, [call(1, 2), call(3, 4)]\r\n            )\r\n    def test_mock_add_spec(self):\r\n        class _One(object):\r\n            one = 1\r\n        class _Two(object):\r\n            two = 2\r\n        class Anything(object):\r\n            one = two = three = 'four'\r\n        klasses = [\r\n            Mock, MagicMock, NonCallableMock, NonCallableMagicMock\r\n        ]\r\n        for Klass in list(klasses):\r\n            klasses.append(lambda K=Klass: K(spec=Anything))\r\n            klasses.append(lambda K=Klass: K(spec_set=Anything))\r\n        for Klass in klasses:\r\n            for kwargs in dict(), dict(spec_set=True):\r\n                mock = Klass()\r\n                mock.one, mock.two, mock.three\r\n                for One, Two in [(_One, _Two), (['one'], ['two'])]:\r\n                    for kwargs in dict(), dict(spec_set=True):\r\n                        mock.mock_add_spec(One, **kwargs)\r\n                        mock.one\r\n                        self.assertRaises(\r\n                            AttributeError, getattr, mock, 'two'\r\n                        )\r\n                        self.assertRaises(\r\n                            AttributeError, getattr, mock, 'three'\r\n                        )\r\n                        if 'spec_set' in kwargs:\r\n                            self.assertRaises(\r\n                                AttributeError, setattr, mock, 'three', None\r\n                            )\r\n                        mock.mock_add_spec(Two, **kwargs)\r\n                        self.assertRaises(\r\n                            AttributeError, getattr, mock, 'one'\r\n                        )\r\n                        mock.two\r\n                        self.assertRaises(\r\n                            AttributeError, getattr, mock, 'three'\r\n                        )\r\n                        if 'spec_set' in kwargs:\r\n                            self.assertRaises(\r\n                                AttributeError, setattr, mock, 'three', None\r\n                            )\r\n    def test_mock_add_spec_magic_methods(self):\r\n        for Klass in MagicMock, NonCallableMagicMock:\r\n            mock = Klass()\r\n            int(mock)\r\n            mock.mock_add_spec(object)\r\n            self.assertRaises(TypeError, int, mock)\r\n            mock = Klass()\r\n            mock['foo']\r\n            mock.__int__.return_value =4\r\n            mock.mock_add_spec(int)\r\n            self.assertEqual(int(mock), 4)\r\n            self.assertRaises(TypeError, lambda: mock['foo'])\r\n    def test_adding_child_mock(self):\r\n        for Klass in NonCallableMock, Mock, MagicMock, NonCallableMagicMock:\r\n            mock = Klass()\r\n            mock.foo = Mock()\r\n            mock.foo()\r\n            self.assertEqual(mock.method_calls, [call.foo()])\r\n            self.assertEqual(mock.mock_calls, [call.foo()])\r\n            mock = Klass()\r\n            mock.bar = Mock(name='name')\r\n            mock.bar()\r\n            self.assertEqual(mock.method_calls, [])\r\n            self.assertEqual(mock.mock_calls, [])\r\n            mock = Klass()\r\n            mock.baz = MagicMock()()\r\n            mock.baz()\r\n            self.assertEqual(mock.method_calls, [])\r\n            self.assertEqual(mock.mock_calls, [])\r\n    def test_adding_return_value_mock(self):\r\n        for Klass in Mock, MagicMock:\r\n            mock = Klass()\r\n            mock.return_value = MagicMock()\r\n            mock()()\r\n            self.assertEqual(mock.mock_calls, [call(), call()()])\r\n    def test_manager_mock(self):\r\n        class Foo(object):\r\n            one = 'one'\r\n            two = 'two'\r\n        manager = Mock()\r\n        p1 = patch.object(Foo, 'one')\r\n        p2 = patch.object(Foo, 'two')\r\n        mock_one = p1.start()\r\n        self.addCleanup(p1.stop)\r\n        mock_two = p2.start()\r\n        self.addCleanup(p2.stop)\r\n        manager.attach_mock(mock_one, 'one')\r\n        manager.attach_mock(mock_two, 'two')\r\n        Foo.two()\r\n        Foo.one()\r\n        self.assertEqual(manager.mock_calls, [call.two(), call.one()])\r\n    def test_magic_methods_mock_calls(self):\r\n        for Klass in Mock, MagicMock:\r\n            m = Klass()\r\n            m.__int__ = Mock(return_value=3)\r\n            m.__float__ = MagicMock(return_value=3.0)\r\n            int(m)\r\n            float(m)\r\n            self.assertEqual(m.mock_calls, [call.__int__(), call.__float__()])\r\n            self.assertEqual(m.method_calls, [])\r\n    def test_attribute_deletion(self):\r\n        for Klass in Mock, MagicMock, NonCallableMagicMock, NonCallableMock:\r\n            m = Klass()\r\n            original = m.foo\r\n            m.foo = 3\r\n            del m.foo\r\n            self.assertEqual(m.foo, original)\r\n            new = m.foo = Mock()\r\n            del m.foo\r\n            self.assertEqual(m.foo, new)\r\n    def test_mock_parents(self):\r\n        for Klass in Mock, MagicMock:\r\n            m = Klass()\r\n            original_repr = repr(m)\r\n            m.return_value = m\r\n            self.assertIs(m(), m)\r\n            self.assertEqual(repr(m), original_repr)\r\n            m.reset_mock()\r\n            self.assertIs(m(), m)\r\n            self.assertEqual(repr(m), original_repr)\r\n            m = Klass()\r\n            m.b = m.a\r\n            self.assertIn(\"name='mock.a'\", repr(m.b))\r\n            self.assertIn(\"name='mock.a'\", repr(m.a))\r\n            m.reset_mock()\r\n            self.assertIn(\"name='mock.a'\", repr(m.b))\r\n            self.assertIn(\"name='mock.a'\", repr(m.a))\r\n            m = Klass()\r\n            original_repr = repr(m)\r\n            m.a = m()\r\n            m.a.return_value = m\r\n            self.assertEqual(repr(m), original_repr)\r\n            self.assertEqual(repr(m.a()), original_repr)\r\n    def test_attach_mock(self):\r\n        classes = Mock, MagicMock, NonCallableMagicMock, NonCallableMock\r\n        for Klass in classes:\r\n            for Klass2 in classes:\r\n                m = Klass()\r\n                m2 = Klass2(name='foo')\r\n                m.attach_mock(m2, 'bar')\r\n                self.assertIs(m.bar, m2)\r\n                self.assertIn(\"name='mock.bar'\", repr(m2))\r\n                m.bar.baz(1)\r\n                self.assertEqual(m.mock_calls, [call.bar.baz(1)])\r\n                self.assertEqual(m.method_calls, [call.bar.baz(1)])\r\n    def test_attach_mock_return_value(self):\r\n        classes = Mock, MagicMock, NonCallableMagicMock, NonCallableMock\r\n        for Klass in Mock, MagicMock:\r\n            for Klass2 in classes:\r\n                m = Klass()\r\n                m2 = Klass2(name='foo')\r\n                m.attach_mock(m2, 'return_value')\r\n                self.assertIs(m(), m2)\r\n                self.assertIn(\"name='mock()'\", repr(m2))\r\n                m2.foo()\r\n                self.assertEqual(m.mock_calls, call().foo().call_list())\r\n    def test_attribute_deletion(self):\r\n        for mock in Mock(), MagicMock():\r\n            self.assertTrue(hasattr(mock, 'm'))\r\n            del mock.m\r\n            self.assertFalse(hasattr(mock, 'm'))\r\n            del mock.f\r\n            self.assertFalse(hasattr(mock, 'f'))\r\n            self.assertRaises(AttributeError, getattr, mock, 'f')\r\n    def test_class_assignable(self):\r\n        for mock in Mock(), MagicMock():\r\n            self.assertNotIsInstance(mock, int)\r\n            mock.__class__ = int\r\n            self.assertIsInstance(mock, int)\r\n            mock.foo\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/external_import.py": "import os\nfrom browser import doc\nimport urllib.request\nclass ModuleFinder:\n    def __init__(self, path_entry):\n        print(\"external_import here..\")\n        self._module=None\n        if path_entry.startswith('http://'):\n           self.path_entry=path_entry\n        else:\n            raise ImportError()\n    def __str__(self):\n        return '<%s for \"%s\">' % (self.__class__.__name__, self.path_entry)\n    def find_module(self, fullname, path=None):\n        path = path or self.path_entry\n        for _ext in ['js', 'pyj', 'py']:\n            _fp,_url,_headers=urllib.request.urlopen(path + '/' + '%s.%s' % (fullname, _ext))\n            self._module=_fp.read()\n            _fp.close()\n            if self._module is not None:\n               print(\"module found at %s:%s\" % (path, fullname))\n               return ModuleLoader(path, fullname, self._module)\n        print('module %s not found' % fullname)\n        raise ImportError()\n        return None\nclass ModuleLoader:\n    \"\"\"Load source for modules\"\"\"\n    def __init__(self, filepath, name, module_source):\n        self._filepath=filepath\n        self._name=name\n        self._module_source=module_source\n    def get_source(self):\n        return self._module_source\n    def is_package(self):\n        return '.' in self._name\n    def load_module(self):\n        if self._name in sys.modules:\n           mod = sys.modules[self._name]\n           return mod\n        _src=self.get_source()\n        if self._filepath.endswith('.js'):\n           mod=JSObject(import_js_module(_src, self._filepath, self._name))\n        elif self._filepath.endswith('.py'):\n           mod=JSObject(import_py_module(_src, self._filepath, self._name))\n        elif self._filepath.endswith('.pyj'):\n           mod=JSObject(import_pyj_module(_src, self._filepath, self._name))\n        else:\n           raise ImportError('Invalid Module: %s' % self._filepath)\n        mod.__file__ = self._filepath\n        mod.__name__ = self._name\n        mod.__path__ = os.path.abspath(self._filepath)\n        mod.__loader__ = self\n        mod.__package__ = '.'.join(self._name.split('.')[:-1])\n        if self.is_package():\n           print('adding path for package')\n           mod.__path__ = [ self._filepath ]\n        else:\n            print('imported as regular module')\n        print('creating a new module object for \"%s\"' % self._name)\n        sys.modules.setdefault(self._name, mod)\n        JSObject(__BRYTHON__.imported)[self._name]=mod\n        return mod\n", "/Lib/browser/ajax.py": "from _ajax import *", "/Lib/_struct.py": "\"\"\"Functions to convert between Python values and C structs.\nPython strings are used to hold the data representing the C struct\nand also as format strings to describe the layout of data in the C struct.\nThe optional first format char indicates byte order, size and alignment:\n @: native order, size & alignment (default)\n =: native order, std. size & alignment\n <: little-endian, std. size & alignment\n >: big-endian, std. size & alignment\n !: same as >\nThe remaining chars indicate types of args and must match exactly;\nthese can be preceded by a decimal repeat count:\n   x: pad byte (no data);\n   c:char;\n   b:signed byte;\n   B:unsigned byte;\n   h:short;\n   H:unsigned short;\n   i:int;\n   I:unsigned int;\n   l:long;\n   L:unsigned long;\n   f:float;\n   d:double.\nSpecial cases (preceding decimal count indicates length):\n   s:string (array of char); p: pascal string (with count byte).\nSpecial case (only available in native format):\n   P:an integer type that is wide enough to hold a pointer.\nSpecial case (not in native mode unless 'long long' in platform C):\n   q:long long;\n   Q:unsigned long long\nWhitespace between formats is ignored.\nThe variable struct.error is an exception raised on errors.\"\"\"\nimport math, sys\nclass StructError(Exception):\n    pass\nerror = StructError\ndef unpack_int(data,index,size,le):\n    bytes = [b for b in data[index:index+size]]\n    if le == 'little':\n        bytes.reverse()\n    number = 0\n    for b in bytes:\n        number = number << 8 | b\n    return int(number)\ndef unpack_signed_int(data,index,size,le):\n    number = unpack_int(data,index,size,le)\n    max = 2**(size*8)\n    if number > 2**(size*8 - 1) - 1:\n        number = int(-1*(max - number))\n    return number\nINFINITY = 1e200 * 1e200\nNAN = INFINITY / INFINITY\ndef unpack_char(data,index,size,le):\n    return data[index:index+size]\ndef pack_int(number,size,le):\n    x=number\n    res=[]\n    for i in range(size):\n        res.append(x&0xff)\n        x >>= 8\n    if le == 'big':\n        res.reverse()\n    return bytes(res)\ndef pack_signed_int(number,size,le):\n    if not isinstance(number, int):\n        raise StructError(\"argument for i,I,l,L,q,Q,h,H must be integer\")\n    if  number > 2**(8*size-1)-1 or number < -1*2**(8*size-1):\n        raise OverflowError(\"Number:%i too large to convert\" % number)\n    return pack_int(number,size,le)\ndef pack_unsigned_int(number,size,le):\n    if not isinstance(number, int):\n        raise StructError(\"argument for i,I,l,L,q,Q,h,H must be integer\")\n    if number < 0:\n        raise TypeError(\"can't convert negative long to unsigned\")\n    if number > 2**(8*size)-1:\n        raise OverflowError(\"Number:%i too large to convert\" % number)\n    return pack_int(number,size,le)\ndef pack_char(char,size,le):\n    return bytes(char)\ndef isinf(x):\n    return x != 0.0 and x / 2 == x\ndef isnan(v):\n    return v != v*1.0 or (v == 1.0 and v == 2.0)\ndef pack_float(x, size, le):\n    unsigned = float_pack(x, size)\n    result = []\n    for i in range(8):\n        result.append((unsigned >> (i * 8)) & 0xFF)\n    if le == \"big\":\n        result.reverse()\n    return bytes(result)\ndef unpack_float(data, index, size, le):\n    binary = [data[i] for i in range(index, index + 8)]\n    if le == \"big\":\n        binary.reverse()\n    unsigned = 0\n    for i in range(8):\n        unsigned |= binary[i] << (i * 8)\n    return float_unpack(unsigned, size, le)\ndef round_to_nearest(x):\n    \"\"\"Python 3 style round:  round a float x to the nearest int, but\n    unlike the builtin Python 2.x round function:\n      - return an int, not a float\n      - do round-half-to-even, not round-half-away-from-zero.\n    We assume that x is finite and nonnegative; except wrong results\n    if you use this for negative x.\n    \"\"\"\n    int_part = int(x)\n    frac_part = x - int_part\n    if frac_part > 0.5 or frac_part == 0.5 and int_part & 1 == 1:\n        int_part += 1\n    return int_part\ndef float_unpack(Q, size, le):\n    \"\"\"Convert a 32-bit or 64-bit integer created\n    by float_pack into a Python float.\"\"\"\n    if size == 8:\n        MIN_EXP = -1021  # = sys.float_info.min_exp\n        MAX_EXP = 1024   # = sys.float_info.max_exp\n        MANT_DIG = 53    # = sys.float_info.mant_dig\n        BITS = 64\n    elif size == 4:\n        MIN_EXP = -125   # C's FLT_MIN_EXP\n        MAX_EXP = 128    # FLT_MAX_EXP\n        MANT_DIG = 24    # FLT_MANT_DIG\n        BITS = 32\n    else:\n        raise ValueError(\"invalid size value\")\n    if Q >> BITS:\n         raise ValueError(\"input out of range\")\n    sign = Q >> BITS - 1\n    exp = (Q & ((1 << BITS - 1) - (1 << MANT_DIG - 1))) >> MANT_DIG - 1\n    mant = Q & ((1 << MANT_DIG - 1) - 1)\n    if exp == MAX_EXP - MIN_EXP + 2:\n        result = float('nan') if mant else float('inf')\n    elif exp == 0:\n        result = math.ldexp(float(mant), MIN_EXP - MANT_DIG)\n    else:\n        mant += 1 << MANT_DIG - 1\n        result = math.ldexp(float(mant), exp + MIN_EXP - MANT_DIG - 1)\n    return -result if sign else result\ndef float_pack(x, size):\n    \"\"\"Convert a Python float x into a 64-bit unsigned integer\n    with the same byte representation.\"\"\"\n    if size == 8:\n        MIN_EXP = -1021  # = sys.float_info.min_exp\n        MAX_EXP = 1024   # = sys.float_info.max_exp\n        MANT_DIG = 53    # = sys.float_info.mant_dig\n        BITS = 64\n    elif size == 4:\n        MIN_EXP = -125   # C's FLT_MIN_EXP\n        MAX_EXP = 128    # FLT_MAX_EXP\n        MANT_DIG = 24    # FLT_MANT_DIG\n        BITS = 32\n    else:\n        raise ValueError(\"invalid size value\")\n    sign = math.copysign(1.0, x) < 0.0\n    if math.isinf(x):\n        mant = 0\n        exp = MAX_EXP - MIN_EXP + 2\n    elif math.isnan(x):\n        mant = 1 << (MANT_DIG-2) # other values possible\n        exp = MAX_EXP - MIN_EXP + 2\n    elif x == 0.0:\n        mant = 0\n        exp = 0\n    else:\n        m, e = math.frexp(abs(x))  # abs(x) == m * 2**e\n        exp = e - (MIN_EXP - 1)\n        if exp > 0:\n            mant = round_to_nearest(m * (1 << MANT_DIG))\n            mant -= 1 << MANT_DIG - 1\n        else:\n            if exp + MANT_DIG - 1 >= 0:\n                mant = round_to_nearest(m * (1 << exp + MANT_DIG - 1))\n            else:\n                mant = 0\n            exp = 0\n        assert 0 <= mant <= 1 << MANT_DIG - 1\n        if mant == 1 << MANT_DIG - 1:\n            mant = 0\n            exp += 1\n        if exp >= MAX_EXP - MIN_EXP + 2:\n             raise OverflowError(\"float too large to pack in this format\")\n    assert 0 <= mant < 1 << MANT_DIG - 1\n    assert 0 <= exp <= MAX_EXP - MIN_EXP + 2\n    assert 0 <= sign <= 1\n    return ((sign << BITS - 1) | (exp << MANT_DIG - 1)) | mant\nbig_endian_format = {\n    'x':{ 'size' : 1, 'alignment' : 0, 'pack' : None, 'unpack' : None},\n    'b':{ 'size' : 1, 'alignment' : 0, 'pack' : pack_signed_int, 'unpack' : unpack_signed_int},\n    'B':{ 'size' : 1, 'alignment' : 0, 'pack' : pack_unsigned_int, 'unpack' : unpack_int},\n    'c':{ 'size' : 1, 'alignment' : 0, 'pack' : pack_char, 'unpack' : unpack_char},\n    's':{ 'size' : 1, 'alignment' : 0, 'pack' : None, 'unpack' : None},\n    'p':{ 'size' : 1, 'alignment' : 0, 'pack' : None, 'unpack' : None},\n    'h':{ 'size' : 2, 'alignment' : 0, 'pack' : pack_signed_int, 'unpack' : unpack_signed_int},\n    'H':{ 'size' : 2, 'alignment' : 0, 'pack' : pack_unsigned_int, 'unpack' : unpack_int},\n    'i':{ 'size' : 4, 'alignment' : 0, 'pack' : pack_signed_int, 'unpack' : unpack_signed_int},\n    'I':{ 'size' : 4, 'alignment' : 0, 'pack' : pack_unsigned_int, 'unpack' : unpack_int},\n    'l':{ 'size' : 4, 'alignment' : 0, 'pack' : pack_signed_int, 'unpack' : unpack_signed_int},\n    'L':{ 'size' : 4, 'alignment' : 0, 'pack' : pack_unsigned_int, 'unpack' : unpack_int},\n    'q':{ 'size' : 8, 'alignment' : 0, 'pack' : pack_signed_int, 'unpack' : unpack_signed_int},\n    'Q':{ 'size' : 8, 'alignment' : 0, 'pack' : pack_unsigned_int, 'unpack' : unpack_int},\n    'f':{ 'size' : 4, 'alignment' : 0, 'pack' : pack_float, 'unpack' : unpack_float},\n    'd':{ 'size' : 8, 'alignment' : 0, 'pack' : pack_float, 'unpack' : unpack_float},\n    }\ndefault = big_endian_format\nformatmode={ '<' : (default, 'little'),\n             '>' : (default, 'big'),\n             '!' : (default, 'big'),\n             '=' : (default, sys.byteorder),\n             '@' : (default, sys.byteorder)\n            }\ndef getmode(fmt):\n    try:\n        formatdef,endianness = formatmode[fmt[0]]\n        index = 1\n    except (IndexError, KeyError):\n        formatdef,endianness = formatmode['@']\n        index = 0\n    return formatdef,endianness,index\ndef getNum(fmt,i):\n    num=None\n    cur = fmt[i]\n    while ('0'<= cur ) and ( cur <= '9'):\n        if num == None:\n            num = int(cur)\n        else:\n            num = 10*num + int(cur)\n        i += 1\n        cur = fmt[i]\n    return num,i\ndef calcsize(fmt):\n    \"\"\"calcsize(fmt) -> int\n    Return size of C struct described by format string fmt.\n    See struct.__doc__ for more on format strings.\"\"\"\n    formatdef,endianness,i = getmode(fmt)\n    num = 0\n    result = 0\n    while i<len(fmt):\n        num,i = getNum(fmt,i)\n        cur = fmt[i]\n        try:\n            format = formatdef[cur]\n        except KeyError:\n            raise StructError(\"%s is not a valid format\" % cur)\n        if num != None :\n            result += num*format['size']\n        else:\n            result += format['size']\n        num = 0\n        i += 1\n    return result\ndef pack(fmt,*args):\n    \"\"\"pack(fmt, v1, v2, ...) -> string\n       Return string containing values v1, v2, ... packed according to fmt.\n       See struct.__doc__ for more on format strings.\"\"\"\n    formatdef,endianness,i = getmode(fmt)\n    args = list(args)\n    n_args = len(args)\n    result = []\n    while i<len(fmt):\n        num,i = getNum(fmt,i)\n        cur = fmt[i]\n        try:\n            format = formatdef[cur]\n        except KeyError:\n            raise StructError(\"%s is not a valid format\" % cur)\n        if num == None :\n            num_s = 0\n            num = 1\n        else:\n            num_s = num\n        if cur == 'x':\n            result += [b'\\0'*num]\n        elif cur == 's':\n            if isinstance(args[0], bytes):\n                padding = num - len(args[0])\n                result += [args[0][:num] + b'\\0'*padding]\n                args.pop(0)\n            else:\n                raise StructError(\"arg for string format not a string\")\n        elif cur == 'p':\n            if isinstance(args[0], bytes):\n                padding = num - len(args[0]) - 1\n                if padding > 0:\n                    result += [bytes([len(args[0])]) + args[0][:num-1] + b'\\0'*padding]\n                else:\n                    if num<255:\n                        result += [bytes([num-1]) + args[0][:num-1]]\n                    else:\n                        result += [bytes([255]) + args[0][:num-1]]\n                args.pop(0)\n            else:\n                raise StructError(\"arg for string format not a string\")\n        else:\n            if len(args) < num:\n                raise StructError(\"insufficient arguments to pack\")\n            for var in args[:num]:\n                result += [format['pack'](var,format['size'],endianness)]\n            args=args[num:]\n        num = None\n        i += 1\n    if len(args) != 0:\n        raise StructError(\"too many arguments for pack format\")\n    return b''.join(result)\ndef unpack(fmt,data):\n    \"\"\"unpack(fmt, string) -> (v1, v2, ...)\n       Unpack the string, containing packed C structure data, according\n       to fmt.  Requires len(string)==calcsize(fmt).\n       See struct.__doc__ for more on format strings.\"\"\"\n    formatdef,endianness,i = getmode(fmt)\n    j = 0\n    num = 0\n    result = []\n    length= calcsize(fmt)\n    if length != len (data):\n        raise StructError(\"unpack str size does not match format\")\n    while i<len(fmt):\n        num,i=getNum(fmt,i)\n        cur = fmt[i]\n        i += 1\n        try:\n            format = formatdef[cur]\n        except KeyError:\n            raise StructError(\"%s is not a valid format\" % cur)\n        if not num :\n            num = 1\n        if cur == 'x':\n            j += num\n        elif cur == 's':\n            result.append(data[j:j+num])\n            j += num\n        elif cur == 'p':\n            n=data[j]\n            if n >= num:\n                n = num-1\n            result.append(data[j+1:j+n+1])\n            j += num\n        else:\n            for n in range(num):\n                result += [format['unpack'](data,j,format['size'],endianness)]\n                j += format['size']\n    return tuple(result)\ndef pack_into(fmt, buf, offset, *args):\n    data = pack(fmt, *args)\n    buffer(buf)[offset:offset+len(data)] = data\ndef unpack_from(fmt, buf, offset=0):\n    size = calcsize(fmt)\n    data = buffer(buf)[offset:offset+size]\n    if len(data) != size:\n        raise error(\"unpack_from requires a buffer of at least %d bytes\"\n                    % (size,))\n    return unpack(fmt, data)\ndef _clearcache():\n    \"Clear the internal cache.\"\n", "/Lib/unittest/test/testmock/__init__.py": "import os\r\nimport sys\r\nimport unittest\r\nhere = os.path.dirname(__file__)\r\nloader = unittest.defaultTestLoader\r\ndef load_tests(*args):\r\n    suite = unittest.TestSuite()\r\n    for fn in os.listdir(here):\r\n        if fn.startswith(\"test\") and fn.endswith(\".py\"):\r\n            modname = \"unittest.test.testmock.\" + fn[:-3]\r\n            __import__(modname)\r\n            module = sys.modules[modname]\r\n            suite.addTest(loader.loadTestsFromModule(module))\r\n    return suite\r\n", "/Lib/browser/slideshow.py": "from browser import doc,markdown,html\ndef keydown(ev,path,zone,page):\n    if ev.keyCode in [39,40]: # key right or down : next page\n        show(path,zone,page+1)\n        ev.preventDefault()    \n    elif ev.keyCode in [37,38]: #key left or up: previous page\n        show(path,zone,page-1)\n        ev.preventDefault()\ndef move_to(ev,path,zone,nb_pages):\n    pc = (ev.x-ev.target.left)/ev.target.width\n    page = round(nb_pages*pc)\n    new_pos = '%spx' %(ev.x-ev.target.left-(doc['tl_pos'].width/2))\n    show(path,zone,page)\n    doc['tl_pos'].style.left = new_pos\ndef click_on_tl_pos(ev):\n    ev.stopPropagation()\ndef show(path,zone,page=0):\n    src = open(path).read()\n    title = ''\n    page_num = False\n    while src.startswith('@'):\n        line_end = src.find('\\n')\n        key,value = src[:line_end].split(' ',1)\n        if key=='@title':\n            title = value\n        elif key=='@pagenum':\n            page_num = True\n        src = src[line_end+1:]\n    zone.html = ''\n    pages = src.split('../..\\n')\n    if page<0:\n        page = 0\n    elif page >= len(pages):\n        page = len(pages)-1\n    doc.unbind('keydown')\n    doc.bind('keydown',lambda ev:keydown(ev,path,zone,page))\n    body = html.DIV()\n    body.html = markdown.mark(pages[page])[0]\n    footer = html.DIV(Id=\"footer\")\n    if title:\n        footer <= html.DIV(title,style=dict(display='inline'))\n    if page_num:\n        footer <= html.SPAN(' (%s/%s)' %(page+1,len(pages)),\n            style=dict(display='inline'))\n    timeline = html.DIV(Id='timeline')\n    tl_pos = html.DIV(Id='tl_pos')\n    timeline <= tl_pos\n    timeline.bind('click',lambda ev:move_to(ev,path,zone,len(pages)))\n    tl_pos.bind('click',click_on_tl_pos)\n    zone <= body+footer+timeline\n    tl_pos.style.left = '%spx' %(timeline.width*page/len(pages))\n", "/Lib/sys.py": "from _sys import *\nfrom javascript import JSObject\nhas_local_storage=__BRYTHON__.has_local_storage\nhas_json=__BRYTHON__.has_json\nargv = ['__main__']\nbase_exec_prefix = __BRYTHON__.brython_path\nbase_prefix = __BRYTHON__.brython_path\nbuiltin_module_names=__BRYTHON__.builtin_module_names\nbyteorder='little'\ndef exc_info():\n    exc = __BRYTHON__.exception_stack[-1]\n    return (exc.__class__,exc,None)\nexec_prefix = __BRYTHON__.brython_path\nexecutable = __BRYTHON__.brython_path+'/brython.js'\ndef exit(i=None):\n    raise SystemExit('')\nclass flag_class:\n  def __init__(self):\n      self.debug=0\n      self.inspect=0\n      self.interactive=0\n      self.optimize=0\n      self.dont_write_bytecode=0\n      self.no_user_site=0\n      self.no_site=0\n      self.ignore_environment=0\n      self.verbose=0\n      self.bytes_warning=0\n      self.quiet=0\n      self.hash_randomization=1\nflags=flag_class()\ndef getfilesystemencoding(*args,**kw):\n    \"\"\"getfilesystemencoding() -> string    \n    Return the encoding used to convert Unicode filenames in\n    operating system filenames.\"\"\"\n    return 'utf-8'\nmaxsize=9007199254740992   #largest integer..\nmaxint=9007199254740992   #largest integer..\nmaxunicode=1114111\npath = __BRYTHON__.path\npath_hooks = list(JSObject(__BRYTHON__.path_hooks))\nplatform=\"brython\"\nprefix = __BRYTHON__.brython_path\nversion = '3.0.0'\nhexversion = 0x03000000   # python 3.0\nclass __version_info(object):\n    def __init__(self, version_info):\n        self.version_info = version_info\n        self.major = version_info[0]\n        self.minor = version_info[1]\n        self.micro = 0\n        self.releaselevel = version_info[3]\n        self.serial = version_info[4]\n    def __getitem__(self, index):\n        return self.version_info[index]\n    def hexversion(self):\n        try:\n          return '0%d0%d0%d' % (self.major, self.minor, self.micro)\n        finally:  #probably some invalid char in minor (rc, etc)\n          return '0%d0000' % (self.major)\n    def __str__(self):\n        _s=\"sys.version(major=%d, minor=%d, micro=%d, releaselevel='%s', serial=%d)\"\n        return _s % (self.major, self.minor, self.micro, \n                     self.releaselevel, self.serial)\nversion_info=__version_info(__BRYTHON__.version_info)\nclass _implementation:\n  def __init__(self):\n      self.name='brython'\n      self.version = __version_info(__BRYTHON__.implementation)\n      self.hexversion = self.version.hexversion()\n  def __repr__(self):\n      return \"namespace(name='%s' version=%s hexversion='%s')\" % (self.name, self.version, self.hexversion)\n  def __str__(self):\n      return \"namespace(name='%s' version=%s hexversion='%s')\" % (self.name, self.version, self.hexversion)\nimplementation=_implementation()\nwarnoptions=[]\n", "/Lib/browser/pydom.py": "from browser import doc\nclass Selector:\n  tags=['A','ABBR','ACRONYM','ADDRESS','APPLET','B','BDO','BIG','BLOCKQUOTE',\n        'BUTTON','CAPTION','CENTER','CITE','CODE','DEL','DFN','DIR','DIV','DL',\n        'EM','FIELDSET','FONT','FORM','FRAMESET','H1','H2','H3','H4','H5','H6',\n        'I','IFRAME','INS','KBD','LABEL','LEGEND','MAP','MENU','NOFRAMES', \n        'NOSCRIPT','OBJECT','OL','OPTGROUP','PRE','Q','S','SAMP','SCRIPT', \n        'SELECT','SMALL','SPAN','STRIKE','STRONG','STYLE','SUB','SUP','TABLE',\n        'TEXTAREA','TITLE','TT','U','UL','VAR','BODY','COLGROUP','DD','DT',\n        'HEAD','HTML','LI','P','TBODY','OPTION','TD','TFOOT','TH','THEAD','TR',\n        'AREA','BASE','BASEFONT','BR','COL','FRAME','HR','IMG','INPUT',\n        'ISINDEX','LINK','META','PARAM',  #HTML 5 elements...\n        'ARTICLE','ASIDE','AUDIO','BDI','CANVAS','COMMAND','DATALIST',\n        'DETAILS','DIALOG','EMBED','FIGCAPTION','FIGURE','FOOTER','HEADER',\n        'KEYGEN','MARK','METER','NAV','OUTPUT','PROGRESS','RP','RT',\n        'RUBY','SECTION','SOURCE','SUMMARY','TIME','TRACK','VIDEO','WBR']\n  def __init__(self, selector, start_node=doc):\n      self._doc=start_node\n      if (isinstance(selector, str)):\n         if selector.startswith(\".\"):   #class selector\n            self._selector=selector[1:]\n            self._selector_type=\"classname\"\n         elif selector.startswith(\"#\"):  #id selector\n            self._selector=selector[1:]\n            self._selector_type=\"id\"\n         elif selector.upper() in tags:\n            self._selector=selector.upper()\n            self._selector_type=\"tag\"\n         else:  \n            self._selector=selector\n            self._selector_type=\"selector\"\n      else:  #this is a function\n         self._selector_type=\"selector\"\n         self._function=selector\n         self.get=self._function_get\n  def _function_get(self):\n      def recurse(node):\n          _list=[]\n          if self._function(node):\n             _list.append(node)\n          for _node in node.childNodes:\n              _list+=recurse(_node)\n          return _list\n      _matched_nodes=recurse(self._doc)\n      return NodeCollection(_matched_nodes)\n  def get(self):\n      if self._selector_type==\"id\":\n         _matched_nodes=self._doc.get(id=self._selector)\n      elif self._selector_type==\"classname\":\n         _matched_nodes=self._doc.get(classname=self._selector)\n      elif self._selector_type == \"tag\":\n         _matched_nodes=self._doc.get(tag=self._selector)\n      elif self._selector_type==\"selector\":\n         _matched_nodes=self._doc.get(selector=self._selector)\n      else:\n         _matched_nodes=[]\n      return NodeCollection(_matched_nodes)\nclass NodeCollectionSelector(Selector):\n  def __init__(self, selector, collection):\n      Selector.__init__(self, selector)\n      self._collection=collection\n      if self._selector_type == 'id':\n         self._match=self._match_id\n      elif self._selector_type =='tag':\n         self._match=self._match_tag\n      elif self._selector_type == 'classname':\n         self._match=self._match_classname\n  def _match_id(self, node):\n      if node.id is None: return False\n      return node.id == self._selector\n  def _match_tag(self, node):\n      return node.tagName == self._selector\n  def _match_classname(self, node):\n      return self._selector in node.classname\n  def get(self):\n      _c1=NodeCollection()\n      for _node in self._collection:\n          if self._match(_node):\n             _c1.append(_node)\n      return _c1\nclass NodeCollection:\n  def __init__(self, nodes=[]):\n      self._nodes=nodes\n  def __len__(self):\n      return len(self._nodes)\n  def __item__(self, i):\n      return self._nodes[i]\n  def __getitem__(self, i):\n      return self._nodes[i]\n  def __add__(self, nodes):\n      self._nodes+=nodes\n  def __str__(self):\n      _str=[]\n      for _node in self._nodes:\n          _str.append(_node.__str__())\n      return '<br>'.join(_str)\n  def append(self, node):        \n      self._nodes.append(node)\n  def next(self):\n      for _node in self._nodes:\n          yield _node\n  def add(self, selector, context):\n      _ns=NodeCollectionSelector(selector, self)\n      self._nodes+=_ns.get()\n  def addBack(self):\n      pass\n  def addClass(self, classname):\n      for _node in self._nodes:\n          _node.addClass(classname)\n  def after(self, content):\n      for _node in self._nodes:\n          _node.after(content)\n  def append_content(self, content):\n      for _node in self._nodes:\n          _node.append(content)\n  def appendTo(self, selector):\n      _s=Selector(selector)\n      for _node in _s.get():\n          _node.append(self._node[0].clone())\n  def attr(self, property, value=None):\n      if value is None:\n         return self._nodes[0][property]\n      for _node in self._nodes:\n          _node[property]=value\n  def before(self, content):\n      for _node in self._nodes:\n          _node.before(content)\n  def bind(self, event, handler):\n      if ' ' in event:\n         _events=' '.split(event)\n         for _event in _events:\n             for _node in self._nodes:\n                 _node['on%s' % event]=handler\n         return\n      for _node in self._nodes:\n          _node['on%s' % event]=handler\n  def blur(self, handler=None):\n      pass\n  def change(self, handler=None):\n      pass\n  def children(self, selector=None):\n      _c=NodeCollection()\n      for _node in self._nodes:\n          for _child in _node.get_children():\n              _c.append(_child)\n      if selector is None:\n         return _c\n      _ns=NodeCollectionSelector(selector, _c)\n      return _ns.get()\n  def click(self, handler=None):\n      pass\n  def clone(self):\n      return NodeCollection([_node.clone() for _node in self._nodes])\n  def closest(self, selector):\n      if isinstance(selector, str):\n         _ns=Selector(selector)\n         selector=_ns.get()\n      _c=NodeCollection()\n      for _node in self._nodes:\n          _c.append(_node.closest(selector))\n      return _c\n  def contains(self, text):\n      pass\n  def contents(self):\n      pass\n  def css(self, property, value=None):\n      if value is None and not isinstance(property, dict):\n         return self._nodes[0].css(property)\n      if isinstance(property, dict):\n         for _node in self._nodes:\n             _node.css(property)\n      else:\n         for _node in self._nodes:\n             _node.css(property, value)\n  def data(self):\n      pass\n  def dblclick(self, handler=None):\n      pass\n  def detach(self):\n      pass\n  def each(self, func):\n      for _node in self._nodes:\n          func(_node)\n  def empty(self):\n      for _node in self._nodes:\n          _node.empty()\n  def eq(self, index):\n      if index < len(self._nodes):\n         return NodeCollections(self._nodes[index])\n      return NodeCollections()\n  def error(self, handler=None):\n      pass\n  def fadeIn(self):\n      pass\n  def fadeOut(self):\n      pass\n  def fadeTo(self):\n      pass\n  def fadeToggle(self):\n      pass\n  def filter(self, selector):\n      _ns=NodeCollectionSelector(selector, self)\n      return _ns.get()\n  def find(self):\n      pass\n  def first(self):\n      if len(self._nodes) == 0:\n         return NodeCollection()\n      return NodeCollection([self._nodes[0]])\n  def focus(self, handler=None):\n      pass\n  def focusin(self, handler=None):\n      pass\n  def focusout(self, handler=None):\n      pass\n  def get(self, index=None):\n      if index is None:\n         return [_node for _node in self._nodes]\n      return self._nodes[index]\n  def gt(self, index):\n      return NodeCollection([self._nodes[index:]])\n  def has(self, selector):\n      pass\n  def hasClass(self, name):\n      for _node in self._nodes:\n          if _node.hasClass(name):\n             return True\n      return False\n  def height(self, value=None):\n      if value is None:\n         return self._nodes[0].css('height')\n      for _node in self._nodes:\n          _node.set_style({'height': value})\n  def hide(self):\n      for _node in self._nodes:\n          _node.set_style({'display': 'none'})\n  def hover(self, handler=None):\n      pass\n  def html(self, content=None):\n      if content is None:\n         return self._nodes[0].get_html()\n      for _node in self._nodes:\n          _node.set_html(content)\n  def innerHeight(self):\n      pass\n  def innerWidth(self):\n      pass\n  def insertAfter(self, target):\n      pass\n  def insertBefore(self, target):\n      pass\n  def keydown(self, handler=None):\n      pass\n  def keypress(self, handler=None):\n      pass\n  def keyup(self, handler=None):\n      pass\n  def last(self):\n      return self._nodes[-1]\n  @property\n  def length(self):\n      return len(self._nodes)\n  def mousedown(self, handler=None):\n      pass\n  def mouseenter(self, handler=None):\n      pass\n  def mouseleave(self, handler=None):\n      pass\n  def mousemove(self, handler=None):\n      pass\n  def mouseout(self, handler=None):\n      pass\n  def mouseover(self, handler=None):\n      pass\n  def mouseup(self, handler=None):\n      pass\n  def next(self):\n      pass\n  def nextAll(self):\n      pass\n  def nextUtil(self):\n      pass\n  def off(self, handler):\n      pass\n  def offset(self):\n      pass\n  def offsetParent(self):\n      pass\n  def on(self, handler):\n      pass\n  def outerHeight(self):\n      pass\n  def outerWidth(self):\n      pass\n  def parent(self):\n      _p=NodeCollection()\n      for _node in self._nodes:\n          _p.append(_node.get_parent())\n  def parents(self, selector=None):\n      pass\n  def parentsUntil(self, selector=None):\n      pass\n  def position(self):\n      pass\n  def prepend(self, content):\n      for _node in self._nodes:\n          _node.prepend(content)\n  def prependTo(self, target):\n      pass\n  def prev(self):\n      _p1=NodeCollection()\n      for _node in self._nodes:\n          _parent=_node.get_parent()\n          for _i in range(len(_parent.childNodes)):\n              if _parent.childNodes[_i] == _node:\n                 if _i > 0:\n                    _p1.append(_parent.childNodes[_i-1])\n                 break\n      return _p1\n  def prevAll(self, selector=None):\n      pass\n  def prevUntil(self, selector=None):\n      pass\n  def prop(self, property, value=None):\n      pass\n  def ready(self, func):\n      pass\n  def remove(self):\n      for _node in self._nodes:\n          _node.get_parent().removeChild(_node) \n  def removeAttr(self, attr):\n      pass\n  def removeClass(self, name):\n      for _node in self._nodes:\n          _node.removeClass(name)\n  def removeProp(self, property):\n      pass\n  def replaceAll(self):\n      pass\n  def replaceWith(self, content):\n      for _node in self._nodes:\n          _node.get_parent().replaceWith(content, _node)\n  def resize(self, handler=None):\n      pass\n  def scroll(self, handler=None):\n      pass\n  def scrollLeft(self, value=None):\n      pass\n  def scrollTop(self, value=None):\n      pass\n  def select(self, handler=None):\n      pass\n  def show(self):\n      for _node in self._nodes:\n          _node.set_style({'display': 'block'})\n  def siblings(self, selector=None):\n      pass\n  def size(self):\n      pass\n  def slice(self, index1=None, index2=None):\n      if index1 is None and index2 is None:\n         return NodeCollection()\n      return NodeCollection(self._nodes[index1:index2])\n  def slideDown(self):\n      pass\n  def slideToggle(self):\n      pass\n  def slideUp(self):\n      pass\n  def submit(self, handler=None):\n      pass\n  def text(self, content=None):\n      if content is None:\n         return self._nodes[0].get_text()\n      for _node in self._nodes:\n          _node.set_text(content) \n  def toggle(self, Function=None):\n      if Function is None:\n         _show=True\n         if self._nodes[0].css('display') != 'none':\n            _show=False\n         for _node in self._nodes:\n             if _show:\n                _node.set_style({'display': 'block'})\n             else:\n                _node.set_style({'display': 'none'})\n             _show=not _show\n         return\n      for _node in self._nodes:\n          if Function(_node):\n             _node.set_style({'display': 'block'})\n          else:\n             _node.set_style({'display': 'none'})\n  def toggleClass(self):\n      pass\n  def toList(self):\n      return self._nodes\n  toArray=toList   #for jQuery compatibility\n  def touchend(self, handler=None):\n      pass\n  def touchmove(self, handler=None):\n      pass\n  def touchstart(self, handler=None):\n      pass\n  def trigger(self, event_type):\n      pass\n  def triggerHandler(self, event_type):\n      pass\n  def unbind(self, event, handler):\n      if ' ' in event:\n         _events=' '.split(event)\n         for _event in _events:\n             for _node in self._nodes:\n                 print(\"fix me!\")\n         return\n      for _node in self._nodes:\n          print(\"fix me\")\n  def unload(self, handler):\n      pass\n  def unwrap(self):\n      for _node in self._nodes:\n          _parent=_node.get_parent()\n          _grandparent=_parent.get_parent()\n          _grandparent.replaceChild(_node, _parent)\n          _parent.remove()\n  def val(self, value=None):\n      if value is None:\n         return self._nodes[0]['text']   #is text the best here?\n      for _node in self._nodes:\n          _node['text']=value\n  def width(self, width=None):\n      if width is None:\n         return self._nodes[0].css('width')\n      for _node in self._nodes:\n          _node.set_style({'width': width})\n  def wrap(self):\n      pass\n  def wrapAll(self):\n      pass\n  def wrapInner(self):\n      pass\ndef byId(id):\n    _result=doc.get(id=id)\n    return _result[0]\ndef createCSSClass(csstext):\n    _style=doc.createElement('style')\n    _style.type='text/css'\n    _style.innerHTML = csstext\n    doc.get(tag='head')[0].appendChild(_style)\n", "/Lib/copy.py": "\"\"\"Generic (shallow and deep) copying operations.\nInterface summary:\n        import copy\n        x = copy.copy(y)        # make a shallow copy of y\n        x = copy.deepcopy(y)    # make a deep copy of y\nFor module specific errors, copy.Error is raised.\nThe difference between shallow and deep copying is only relevant for\ncompound objects (objects that contain other objects, like lists or\nclass instances).\n- A shallow copy constructs a new compound object and then (to the\n  extent possible) inserts *the same objects* into it that the\n  original contains.\n- A deep copy constructs a new compound object and then, recursively,\n  inserts *copies* into it of the objects found in the original.\nTwo problems often exist with deep copy operations that don't exist\nwith shallow copy operations:\n a) recursive objects (compound objects that, directly or indirectly,\n    contain a reference to themselves) may cause a recursive loop\n b) because deep copy copies *everything* it may copy too much, e.g.\n    administrative data structures that should be shared even between\n    copies\nPython's deep copy operation avoids these problems by:\n a) keeping a table of objects already copied during the current\n    copying pass\n b) letting user-defined classes override the copying operation or the\n    set of components copied\nThis version does not copy types like module, class, function, method,\nnor stack trace, stack frame, nor file, socket, window, nor array, nor\nany similar types.\nClasses can use the same interfaces to control copying that they use\nto control pickling: they can define methods called __getinitargs__(),\n__getstate__() and __setstate__().  See the documentation for module\n\"pickle\" for information on these methods.\n\"\"\"\nimport types\nimport weakref\ndispatch_table={}\nimport builtins\nclass Error(Exception):\n    pass\nerror = Error   # backward compatibility\nPyStringMap = None\n__all__ = [\"Error\", \"copy\", \"deepcopy\"]\ndef copy(x):\n    \"\"\"Shallow copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    cls = type(x)\n    copier = _copy_dispatch.get(cls)\n    if copier:\n        return copier(x)\n    copier = getattr(cls, \"__copy__\", None)\n    if copier:\n        return copier(x)\n    reductor = dispatch_table.get(cls)\n    if reductor:\n        rv = reductor(x)\n    else:\n        reductor = getattr(x, \"__reduce_ex__\", None)\n        if reductor:\n            rv = reductor(2)\n        else:\n            reductor = getattr(x, \"__reduce__\", None)\n            if reductor:\n                rv = reductor()\n            else:\n                raise Error(\"un(shallow)copyable object of type %s\" % cls)\n    return _reconstruct(x, rv, 0)\n_copy_dispatch = d = {}\ndef _copy_immutable(x):\n    return x\nfor t in (type(None), int, float, bool, str, tuple,\n          frozenset, type, range,\n          types.BuiltinFunctionType, type(Ellipsis),\n          types.FunctionType, weakref.ref):\n    d[t] = _copy_immutable\nt = getattr(types, \"CodeType\", None)\nif t is not None:\n    d[t] = _copy_immutable\nfor name in (\"complex\", \"unicode\"):\n    t = getattr(builtins, name, None)\n    if t is not None:\n        d[t] = _copy_immutable\ndef _copy_with_constructor(x):\n    return type(x)(x)\nfor t in (list, dict, set):\n    d[t] = _copy_with_constructor\ndef _copy_with_copy_method(x):\n    return x.copy()\nif PyStringMap is not None:\n    d[PyStringMap] = _copy_with_copy_method\ndel d\ndef deepcopy(x, memo=None, _nil=[]):\n    \"\"\"Deep copy operation on arbitrary Python objects.\n    See the module's __doc__ string for more info.\n    \"\"\"\n    if memo is None:\n        memo = {}\n    d = id(x)\n    y = memo.get(d, _nil)\n    if y is not _nil:\n        return y\n    cls = type(x)\n    copier = _deepcopy_dispatch.get(cls)\n    if copier:\n        y = copier(x, memo)\n    else:\n        try:\n            issc = issubclass(cls, type)\n        except TypeError: # cls is not a class (old Boost; see SF #502085)\n            issc = 0\n        if issc:\n            y = _deepcopy_atomic(x, memo)\n        else:\n            copier = getattr(x, \"__deepcopy__\", None)\n            if copier:\n                y = copier(memo)\n            else:\n                reductor = dispatch_table.get(cls)\n                if reductor:\n                    rv = reductor(x)\n                else:\n                    reductor = getattr(x, \"__reduce_ex__\", None)\n                    if reductor:\n                        rv = reductor(2)\n                    else:\n                        reductor = getattr(x, \"__reduce__\", None)\n                        if reductor:\n                            rv = reductor()\n                        else:\n                            raise Error(\n                                \"un(deep)copyable object of type %s\" % cls)\n                y = _reconstruct(x, rv, 1, memo)\n    if y is not x:\n        memo[d] = y\n        _keep_alive(x, memo) # Make sure x lives at least as long as d\n    return y\n_deepcopy_dispatch = d = {}\ndef _deepcopy_atomic(x, memo):\n    return x\nd[type(None)] = _deepcopy_atomic\nd[type(Ellipsis)] = _deepcopy_atomic\nd[int] = _deepcopy_atomic\nd[float] = _deepcopy_atomic\nd[bool] = _deepcopy_atomic\ntry:\n    d[complex] = _deepcopy_atomic\nexcept NameError:\n    pass\nd[bytes] = _deepcopy_atomic\nd[str] = _deepcopy_atomic\ntry:\n    d[types.CodeType] = _deepcopy_atomic\nexcept AttributeError:\n    pass\nd[type] = _deepcopy_atomic\nd[range] = _deepcopy_atomic\nd[types.BuiltinFunctionType] = _deepcopy_atomic\nd[types.FunctionType] = _deepcopy_atomic\nd[weakref.ref] = _deepcopy_atomic\ndef _deepcopy_list(x, memo):\n    y = []\n    memo[id(x)] = y\n    for a in x:\n        y.append(deepcopy(a, memo))\n    return y\nd[list] = _deepcopy_list\ndef _deepcopy_tuple(x, memo):\n    y = []\n    for a in x:\n        y.append(deepcopy(a, memo))\n    try:\n        return memo[id(x)]\n    except KeyError:\n        pass\n    for i in range(len(x)):\n        if x[i] is not y[i]:\n            y = tuple(y)\n            break\n    else:\n        y = x\n    return y\nd[tuple] = _deepcopy_tuple\ndef _deepcopy_dict(x, memo):\n    y = {}\n    memo[id(x)] = y\n    for key, value in x.items():\n        y[deepcopy(key, memo)] = deepcopy(value, memo)\n    return y\nd[dict] = _deepcopy_dict\nif PyStringMap is not None:\n    d[PyStringMap] = _deepcopy_dict\ndef _deepcopy_method(x, memo): # Copy instance methods\n    return type(x)(x.__func__, deepcopy(x.__self__, memo))\n_deepcopy_dispatch[types.MethodType] = _deepcopy_method\ndef _keep_alive(x, memo):\n    \"\"\"Keeps a reference to the object x in the memo.\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...\n    \"\"\"\n    try:\n        memo[id(memo)].append(x)\n    except KeyError:\n        memo[id(memo)]=[x]\ndef _reconstruct(x, info, deep, memo=None):\n    if isinstance(info, str):\n        return x\n    assert isinstance(info, tuple)\n    if memo is None:\n        memo = {}\n    n = len(info)\n    assert n in (2, 3, 4, 5)\n    callable, args = info[:2]\n    if n > 2:\n        state = info[2]\n    else:\n        state = {}\n    if n > 3:\n        listiter = info[3]\n    else:\n        listiter = None\n    if n > 4:\n        dictiter = info[4]\n    else:\n        dictiter = None\n    if deep:\n        args = deepcopy(args, memo)\n    y = callable(*args)\n    memo[id(x)] = y\n    if state:\n        if deep:\n            state = deepcopy(state, memo)\n        if hasattr(y, '__setstate__'):\n            y.__setstate__(state)\n        else:\n            if isinstance(state, tuple) and len(state) == 2:\n                state, slotstate = state\n            else:\n                slotstate = None\n            if state is not None:\n                y.__dict__.update(state)\n            if slotstate is not None:\n                for key, value in slotstate.items():\n                    setattr(y, key, value)\n    if listiter is not None:\n        for item in listiter:\n            if deep:\n                item = deepcopy(item, memo)\n            y.append(item)\n    if dictiter is not None:\n        for key, value in dictiter:\n            if deep:\n                key = deepcopy(key, memo)\n                value = deepcopy(value, memo)\n            y[key] = value\n    return y\ndel d\ndel types\nclass _EmptyClass:\n    pass\n", "/Lib/unittest/test/test_program.py": "import io\r\nimport os\r\nimport sys\r\nimport unittest\r\nclass Test_TestProgram(unittest.TestCase):\r\n    def test_discovery_from_dotted_path(self):\r\n        loader = unittest.TestLoader()\r\n        tests = [self]\r\n        expectedPath = os.path.abspath(os.path.dirname(unittest.test.__file__))\r\n        self.wasRun = False\r\n        def _find_tests(start_dir, pattern):\r\n            self.wasRun = True\r\n            self.assertEqual(start_dir, expectedPath)\r\n            return tests\r\n        loader._find_tests = _find_tests\r\n        suite = loader.discover('unittest.test')\r\n        self.assertTrue(self.wasRun)\r\n        self.assertEqual(suite._tests, tests)\r\n    def testNoExit(self):\r\n        result = object()\r\n        test = object()\r\n        class FakeRunner(object):\r\n            def run(self, test):\r\n                self.test = test\r\n                return result\r\n        runner = FakeRunner()\r\n        oldParseArgs = unittest.TestProgram.parseArgs\r\n        def restoreParseArgs():\r\n            unittest.TestProgram.parseArgs = oldParseArgs\r\n        unittest.TestProgram.parseArgs = lambda *args: None\r\n        self.addCleanup(restoreParseArgs)\r\n        def removeTest():\r\n            del unittest.TestProgram.test\r\n        unittest.TestProgram.test = test\r\n        self.addCleanup(removeTest)\r\n        program = unittest.TestProgram(testRunner=runner, exit=False, verbosity=2)\r\n        self.assertEqual(program.result, result)\r\n        self.assertEqual(runner.test, test)\r\n        self.assertEqual(program.verbosity, 2)\r\n    class FooBar(unittest.TestCase):\r\n        def testPass(self):\r\n            assert True\r\n        def testFail(self):\r\n            assert False\r\n    class FooBarLoader(unittest.TestLoader):\r\n        \"\"\"Test loader that returns a suite containing FooBar.\"\"\"\r\n        def loadTestsFromModule(self, module):\r\n            return self.suiteClass(\r\n                [self.loadTestsFromTestCase(Test_TestProgram.FooBar)])\r\n    def test_NonExit(self):\r\n        program = unittest.main(exit=False,\r\n                                argv=[\"foobar\"],\r\n                                testRunner=unittest.TextTestRunner(stream=io.StringIO()),\r\n                                testLoader=self.FooBarLoader())\r\n        self.assertTrue(hasattr(program, 'result'))\r\n    def test_Exit(self):\r\n        self.assertRaises(\r\n            SystemExit,\r\n            unittest.main,\r\n            argv=[\"foobar\"],\r\n            testRunner=unittest.TextTestRunner(stream=io.StringIO()),\r\n            exit=True,\r\n            testLoader=self.FooBarLoader())\r\n    def test_ExitAsDefault(self):\r\n        self.assertRaises(\r\n            SystemExit,\r\n            unittest.main,\r\n            argv=[\"foobar\"],\r\n            testRunner=unittest.TextTestRunner(stream=io.StringIO()),\r\n            testLoader=self.FooBarLoader())\r\nclass InitialisableProgram(unittest.TestProgram):\r\n    exit = False\r\n    result = None\r\n    verbosity = 1\r\n    defaultTest = None\r\n    testRunner = None\r\n    testLoader = unittest.defaultTestLoader\r\n    module = '__main__'\r\n    progName = 'test'\r\n    test = 'test'\r\n    def __init__(self, *args):\r\n        pass\r\nRESULT = object()\r\nclass FakeRunner(object):\r\n    initArgs = None\r\n    test = None\r\n    raiseError = False\r\n    def __init__(self, **kwargs):\r\n        FakeRunner.initArgs = kwargs\r\n        if FakeRunner.raiseError:\r\n            FakeRunner.raiseError = False\r\n            raise TypeError\r\n    def run(self, test):\r\n        FakeRunner.test = test\r\n        return RESULT\r\nclass TestCommandLineArgs(unittest.TestCase):\r\n    def setUp(self):\r\n        self.program = InitialisableProgram()\r\n        self.program.createTests = lambda: None\r\n        FakeRunner.initArgs = None\r\n        FakeRunner.test = None\r\n        FakeRunner.raiseError = False\r\n    def testVerbosity(self):\r\n        program = self.program\r\n        for opt in '-q', '--quiet':\r\n            program.verbosity = 1\r\n            program.parseArgs([None, opt])\r\n            self.assertEqual(program.verbosity, 0)\r\n        for opt in '-v', '--verbose':\r\n            program.verbosity = 1\r\n            program.parseArgs([None, opt])\r\n            self.assertEqual(program.verbosity, 2)\r\n    def testBufferCatchFailfast(self):\r\n        program = self.program\r\n        for arg, attr in (('buffer', 'buffer'), ('failfast', 'failfast'),\r\n                      ('catch', 'catchbreak')):\r\n            if attr == 'catch' and not hasInstallHandler:\r\n                continue\r\n            short_opt = '-%s' % arg[0]\r\n            long_opt = '--%s' % arg\r\n            for opt in short_opt, long_opt:\r\n                setattr(program, attr, None)\r\n                program.parseArgs([None, opt])\r\n                self.assertTrue(getattr(program, attr))\r\n            for opt in short_opt, long_opt:\r\n                not_none = object()\r\n                setattr(program, attr, not_none)\r\n                program.parseArgs([None, opt])\r\n                self.assertEqual(getattr(program, attr), not_none)\r\n    def testWarning(self):\r\n        \"\"\"Test the warnings argument\"\"\"\r\n        class FakeTP(unittest.TestProgram):\r\n            def parseArgs(self, *args, **kw): pass\r\n            def runTests(self, *args, **kw): pass\r\n        warnoptions = sys.warnoptions[:]\r\n        try:\r\n            sys.warnoptions[:] = []\r\n            self.assertEqual(FakeTP().warnings, 'default')\r\n            self.assertEqual(FakeTP(warnings='ignore').warnings, 'ignore')\r\n            sys.warnoptions[:] = ['somevalue']\r\n            self.assertEqual(FakeTP().warnings, None)\r\n            self.assertEqual(FakeTP(warnings='ignore').warnings, 'ignore')\r\n        finally:\r\n            sys.warnoptions[:] = warnoptions\r\n    def testRunTestsRunnerClass(self):\r\n        program = self.program\r\n        program.testRunner = FakeRunner\r\n        program.verbosity = 'verbosity'\r\n        program.failfast = 'failfast'\r\n        program.buffer = 'buffer'\r\n        program.warnings = 'warnings'\r\n        program.runTests()\r\n        self.assertEqual(FakeRunner.initArgs, {'verbosity': 'verbosity',\r\n                                                'failfast': 'failfast',\r\n                                                'buffer': 'buffer',\r\n                                                'warnings': 'warnings'})\r\n        self.assertEqual(FakeRunner.test, 'test')\r\n        self.assertIs(program.result, RESULT)\r\n    def testRunTestsRunnerInstance(self):\r\n        program = self.program\r\n        program.testRunner = FakeRunner()\r\n        FakeRunner.initArgs = None\r\n        program.runTests()\r\n        self.assertIsNone(FakeRunner.initArgs)\r\n        self.assertEqual(FakeRunner.test, 'test')\r\n        self.assertIs(program.result, RESULT)\r\n    def testRunTestsOldRunnerClass(self):\r\n        program = self.program\r\n        FakeRunner.raiseError = True\r\n        program.testRunner = FakeRunner\r\n        program.verbosity = 'verbosity'\r\n        program.failfast = 'failfast'\r\n        program.buffer = 'buffer'\r\n        program.test = 'test'\r\n        program.runTests()\r\n        self.assertEqual(FakeRunner.initArgs, {})\r\n        self.assertEqual(FakeRunner.test, 'test')\r\n        self.assertIs(program.result, RESULT)\r\n    def testCatchBreakInstallsHandler(self):\r\n        module = sys.modules['unittest.main']\r\n        original = module.installHandler\r\n        def restore():\r\n            module.installHandler = original\r\n        self.addCleanup(restore)\r\n        self.installed = False\r\n        def fakeInstallHandler():\r\n            self.installed = True\r\n        module.installHandler = fakeInstallHandler\r\n        program = self.program\r\n        program.catchbreak = True\r\n        program.testRunner = FakeRunner\r\n        program.runTests()\r\n        self.assertTrue(self.installed)\r\n    def _patch_isfile(self, names, exists=True):\r\n        def isfile(path):\r\n            return path in names\r\n        original = os.path.isfile\r\n        os.path.isfile = isfile\r\n        def restore():\r\n            os.path.isfile = original\r\n        self.addCleanup(restore)\r\n    def testParseArgsFileNames(self):\r\n        program = self.program\r\n        argv = ['progname', 'foo.py', 'bar.Py', 'baz.PY', 'wing.txt']\r\n        self._patch_isfile(argv)\r\n        program.createTests = lambda: None\r\n        program.parseArgs(argv)\r\n        expected = ['foo', 'bar', 'baz', 'wing.txt']\r\n        self.assertEqual(program.testNames, expected)\r\n    def testParseArgsFilePaths(self):\r\n        program = self.program\r\n        argv = ['progname', 'foo/bar/baz.py', 'green\\\\red.py']\r\n        self._patch_isfile(argv)\r\n        program.createTests = lambda: None\r\n        program.parseArgs(argv)\r\n        expected = ['foo.bar.baz', 'green.red']\r\n        self.assertEqual(program.testNames, expected)\r\n    def testParseArgsNonExistentFiles(self):\r\n        program = self.program\r\n        argv = ['progname', 'foo/bar/baz.py', 'green\\\\red.py']\r\n        self._patch_isfile([])\r\n        program.createTests = lambda: None\r\n        program.parseArgs(argv)\r\n        self.assertEqual(program.testNames, argv[1:])\r\n    def testParseArgsAbsolutePathsThatCanBeConverted(self):\r\n        cur_dir = os.getcwd()\r\n        program = self.program\r\n        def _join(name):\r\n            return os.path.join(cur_dir, name)\r\n        argv = ['progname', _join('foo/bar/baz.py'), _join('green\\\\red.py')]\r\n        self._patch_isfile(argv)\r\n        program.createTests = lambda: None\r\n        program.parseArgs(argv)\r\n        expected = ['foo.bar.baz', 'green.red']\r\n        self.assertEqual(program.testNames, expected)\r\n    def testParseArgsAbsolutePathsThatCannotBeConverted(self):\r\n        program = self.program\r\n        argv = ['progname', '/foo/bar/baz.py', '/green/red.py']\r\n        self._patch_isfile(argv)\r\n        program.createTests = lambda: None\r\n        program.parseArgs(argv)\r\n        self.assertEqual(program.testNames, argv[1:])\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/ui/progressbar.py": "import widget\nfrom browser import html\nclass ProgressBar(widget.Widget):\n  def __init__(self, id=None, label=False):\n      self._div_shell=html.DIV(Class=\"ui-progressbar ui-widget ui-widget-content ui-corner-all\")\n      widget.Widget.__init__(self, self._div_shell, 'progressbar', id)\n      self._show_label=label\n      if label:\n         self._label=html.DIV(Class='progress-label')\n         self._div_shell <= self._label\n      self._bar=html.DIV(Class=\"ui-progressbar-value ui-widget-header ui-corner-left\",\n                         style={'width': '0px'})\n      self._div_shell <= self._bar\n  def set_progress(self, percent):\n      self._bar.style.width='%s%%' % percent\n      if self._show_label:\n         self._label.text='%s%%' % percent\n", "/Lib/unittest/test/testmock/testcallable.py": "import unittest\r\nfrom unittest.test.testmock.support import is_instance, X, SomeClass\r\nfrom unittest.mock import (\r\n    Mock, MagicMock, NonCallableMagicMock,\r\n    NonCallableMock, patch, create_autospec,\r\n    CallableMixin\r\n)\r\nclass TestCallable(unittest.TestCase):\r\n    def assertNotCallable(self, mock):\r\n        self.assertTrue(is_instance(mock, NonCallableMagicMock))\r\n        self.assertFalse(is_instance(mock, CallableMixin))\r\n    def test_non_callable(self):\r\n        for mock in NonCallableMagicMock(), NonCallableMock():\r\n            self.assertRaises(TypeError, mock)\r\n            self.assertFalse(hasattr(mock, '__call__'))\r\n            self.assertIn(mock.__class__.__name__, repr(mock))\r\n    def test_heirarchy(self):\r\n        self.assertTrue(issubclass(MagicMock, Mock))\r\n        self.assertTrue(issubclass(NonCallableMagicMock, NonCallableMock))\r\n    def test_attributes(self):\r\n        one = NonCallableMock()\r\n        self.assertTrue(issubclass(type(one.one), Mock))\r\n        two = NonCallableMagicMock()\r\n        self.assertTrue(issubclass(type(two.two), MagicMock))\r\n    def test_subclasses(self):\r\n        class MockSub(Mock):\r\n            pass\r\n        one = MockSub()\r\n        self.assertTrue(issubclass(type(one.one), MockSub))\r\n        class MagicSub(MagicMock):\r\n            pass\r\n        two = MagicSub()\r\n        self.assertTrue(issubclass(type(two.two), MagicSub))\r\n    def test_patch_spec(self):\r\n        patcher = patch('%s.X' % __name__, spec=True)\r\n        mock = patcher.start()\r\n        self.addCleanup(patcher.stop)\r\n        instance = mock()\r\n        mock.assert_called_once_with()\r\n        self.assertNotCallable(instance)\r\n        self.assertRaises(TypeError, instance)\r\n    def test_patch_spec_set(self):\r\n        patcher = patch('%s.X' % __name__, spec_set=True)\r\n        mock = patcher.start()\r\n        self.addCleanup(patcher.stop)\r\n        instance = mock()\r\n        mock.assert_called_once_with()\r\n        self.assertNotCallable(instance)\r\n        self.assertRaises(TypeError, instance)\r\n    def test_patch_spec_instance(self):\r\n        patcher = patch('%s.X' % __name__, spec=X())\r\n        mock = patcher.start()\r\n        self.addCleanup(patcher.stop)\r\n        self.assertNotCallable(mock)\r\n        self.assertRaises(TypeError, mock)\r\n    def test_patch_spec_set_instance(self):\r\n        patcher = patch('%s.X' % __name__, spec_set=X())\r\n        mock = patcher.start()\r\n        self.addCleanup(patcher.stop)\r\n        self.assertNotCallable(mock)\r\n        self.assertRaises(TypeError, mock)\r\n    def test_patch_spec_callable_class(self):\r\n        class CallableX(X):\r\n            def __call__(self):\r\n                pass\r\n        class Sub(CallableX):\r\n            pass\r\n        class Multi(SomeClass, Sub):\r\n            pass\r\n        for arg in 'spec', 'spec_set':\r\n            for Klass in CallableX, Sub, Multi:\r\n                with patch('%s.X' % __name__, **{arg: Klass}) as mock:\r\n                    instance = mock()\r\n                    mock.assert_called_once_with()\r\n                    self.assertTrue(is_instance(instance, MagicMock))\r\n                    self.assertRaises(AttributeError, getattr, instance,\r\n                                      'foobarbaz')\r\n                    result = instance()\r\n                    instance.assert_called_once_with()\r\n                    result(3, 2, 1)\r\n                    result.assert_called_once_with(3, 2, 1)\r\n                    result.foo(3, 2, 1)\r\n                    result.foo.assert_called_once_with(3, 2, 1)\r\n    def test_create_autopsec(self):\r\n        mock = create_autospec(X)\r\n        instance = mock()\r\n        self.assertRaises(TypeError, instance)\r\n        mock = create_autospec(X())\r\n        self.assertRaises(TypeError, mock)\r\n    def test_create_autospec_instance(self):\r\n        mock = create_autospec(SomeClass, instance=True)\r\n        self.assertRaises(TypeError, mock)\r\n        mock.wibble()\r\n        mock.wibble.assert_called_once_with()\r\n        self.assertRaises(TypeError, mock.wibble, 'some',  'args')\r\n", "/libs/_sys.js": "$module=(function($B){var __builtins__=$B.builtins;return{modules:{'__get__':function(){return __builtins__.dict($B.JSObject($B.imported));},'__set__':0},stderr:$B.stderr,stdout:$B.stdout};})(__BRYTHON__);", "/Lib/warnings.py": "\"\"\"Python part of the warnings subsystem.\"\"\"\nimport linecache\nimport sys\n__all__ = [\"warn\", \"showwarning\", \"formatwarning\", \"filterwarnings\",\n           \"resetwarnings\", \"catch_warnings\"]\ndef showwarning(message, category, filename, lineno, file=None, line=None):\n    \"\"\"Hook to write a warning to a file; replace if you like.\"\"\"\n    if file is None:\n        file = sys.stderr\n    try:\n        file.write(formatwarning(message, category, filename, lineno, line))\n    except IOError:\n        pass # the file (probably stderr) is invalid - this warning gets lost.\ndef formatwarning(message, category, filename, lineno, line=None):\n    \"\"\"Function to format a warning the standard way.\"\"\"\n    s =  \"%s:%s: %s: %s\\n\" % (filename, lineno, category.__name__, message)\n    line = linecache.getline(filename, lineno) if line is None else line\n    if line:\n        line = line.strip()\n        s += \"  %s\\n\" % line\n    return s\ndef filterwarnings(action, message=\"\", category=Warning, module=\"\", lineno=0,\n                   append=False):\n    \"\"\"Insert an entry into the list of warnings filters (at the front).\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'message' -- a regex that the warning message must match\n    'category' -- a class that the warning must be a subclass of\n    'module' -- a regex that the module name must match\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters\n    \"\"\"\n    import re\n    assert action in (\"error\", \"ignore\", \"always\", \"default\", \"module\",\n                      \"once\"), \"invalid action: %r\" % (action,)\n    assert isinstance(message, str), \"message must be a string\"\n    assert isinstance(category, type), \"category must be a class\"\n    assert issubclass(category, Warning), \"category must be a Warning subclass\"\n    assert isinstance(module, str), \"module must be a string\"\n    assert isinstance(lineno, int) and lineno >= 0, \\\n           \"lineno must be an int >= 0\"\n    item = (action, re.compile(message, re.I), category,\n            re.compile(module), lineno)\n    if append:\n        filters.append(item)\n    else:\n        filters.insert(0, item)\ndef simplefilter(action, category=Warning, lineno=0, append=False):\n    \"\"\"Insert a simple entry into the list of warnings filters (at the front).\n    A simple filter matches all modules and messages.\n    'action' -- one of \"error\", \"ignore\", \"always\", \"default\", \"module\",\n                or \"once\"\n    'category' -- a class that the warning must be a subclass of\n    'lineno' -- an integer line number, 0 matches all warnings\n    'append' -- if true, append to the list of filters\n    \"\"\"\n    assert action in (\"error\", \"ignore\", \"always\", \"default\", \"module\",\n                      \"once\"), \"invalid action: %r\" % (action,)\n    assert isinstance(lineno, int) and lineno >= 0, \\\n           \"lineno must be an int >= 0\"\n    item = (action, None, category, None, lineno)\n    if append:\n        filters.append(item)\n    else:\n        filters.insert(0, item)\ndef resetwarnings():\n    \"\"\"Clear the list of warning filters, so that no filters are active.\"\"\"\n    filters[:] = []\nclass _OptionError(Exception):\n    \"\"\"Exception used by option processing helpers.\"\"\"\n    pass\ndef _processoptions(args):\n    for arg in args:\n        try:\n            _setoption(arg)\n        except _OptionError as msg:\n            print(\"Invalid -W option ignored:\", msg, file=sys.stderr)\ndef _setoption(arg):\n    import re\n    parts = arg.split(':')\n    if len(parts) > 5:\n        raise _OptionError(\"too many fields (max 5): %r\" % (arg,))\n    while len(parts) < 5:\n        parts.append('')\n    action, message, category, module, lineno = [s.strip()\n                                                 for s in parts]\n    action = _getaction(action)\n    message = re.escape(message)\n    category = _getcategory(category)\n    module = re.escape(module)\n    if module:\n        module = module + '$'\n    if lineno:\n        try:\n            lineno = int(lineno)\n            if lineno < 0:\n                raise ValueError\n        except (ValueError, OverflowError):\n            raise _OptionError(\"invalid lineno %r\" % (lineno,))\n    else:\n        lineno = 0\n    filterwarnings(action, message, category, module, lineno)\ndef _getaction(action):\n    if not action:\n        return \"default\"\n    if action == \"all\": return \"always\" # Alias\n    for a in ('default', 'always', 'ignore', 'module', 'once', 'error'):\n        if a.startswith(action):\n            return a\n    raise _OptionError(\"invalid action: %r\" % (action,))\ndef _getcategory(category):\n    import re\n    if not category:\n        return Warning\n    if re.match(\"^[a-zA-Z0-9_]+$\", category):\n        try:\n            cat = eval(category)\n        except NameError:\n            raise _OptionError(\"unknown warning category: %r\" % (category,))\n    else:\n        i = category.rfind(\".\")\n        module = category[:i]\n        klass = category[i+1:]\n        try:\n            m = __import__(module, None, None, [klass])\n        except ImportError:\n            raise _OptionError(\"invalid module name: %r\" % (module,))\n        try:\n            cat = getattr(m, klass)\n        except AttributeError:\n            raise _OptionError(\"unknown warning category: %r\" % (category,))\n    if not issubclass(cat, Warning):\n        raise _OptionError(\"invalid warning category: %r\" % (category,))\n    return cat\ndef warn(message, category=None, stacklevel=1):\n    \"\"\"Issue a warning, or maybe ignore it or raise an exception.\"\"\"\n    if isinstance(message, Warning):\n        category = message.__class__\n    if category is None:\n        category = UserWarning\n    assert issubclass(category, Warning)\n    try:\n        caller = sys._getframe(stacklevel)\n    except ValueError:\n        globals = sys.__dict__\n        lineno = 1\n    else:\n        globals = caller.f_globals\n        lineno = caller.f_lineno\n    if '__name__' in globals:\n        module = globals['__name__']\n    else:\n        module = \"<string>\"\n    filename = globals.get('__file__')\n    if filename:\n        fnl = filename.lower()\n        if fnl.endswith((\".pyc\", \".pyo\")):\n            filename = filename[:-1]\n    else:\n        if module == \"__main__\":\n            try:\n                filename = sys.argv[0]\n            except AttributeError:\n                filename = '__main__'\n        if not filename:\n            filename = module\n    registry = globals.setdefault(\"__warningregistry__\", {})\n    warn_explicit(message, category, filename, lineno, module, registry,\n                  globals)\ndef warn_explicit(message, category, filename, lineno,\n                  module=None, registry=None, module_globals=None):\n    lineno = int(lineno)\n    if module is None:\n        module = filename or \"<unknown>\"\n        if module[-3:].lower() == \".py\":\n            module = module[:-3] # XXX What about leading pathname?\n    if registry is None:\n        registry = {}\n    if isinstance(message, Warning):\n        text = str(message)\n        category = message.__class__\n    else:\n        text = message\n        message = category(message)\n    key = (text, category, lineno)\n    if registry.get(key):\n        return\n    for item in filters:\n        action, msg, cat, mod, ln = item\n        if ((msg is None or msg.match(text)) and\n            issubclass(category, cat) and\n            (mod is None or mod.match(module)) and\n            (ln == 0 or lineno == ln)):\n            break\n    else:\n        action = defaultaction\n    if action == \"ignore\":\n        registry[key] = 1\n        return\n    linecache.getlines(filename, module_globals)\n    if action == \"error\":\n        raise message\n    if action == \"once\":\n        registry[key] = 1\n        oncekey = (text, category)\n        if onceregistry.get(oncekey):\n            return\n        onceregistry[oncekey] = 1\n    elif action == \"always\":\n        pass\n    elif action == \"module\":\n        registry[key] = 1\n        altkey = (text, category, 0)\n        if registry.get(altkey):\n            return\n        registry[altkey] = 1\n    elif action == \"default\":\n        registry[key] = 1\n    else:\n        raise RuntimeError(\n              \"Unrecognized action (%r) in warnings.filters:\\n %s\" %\n              (action, item))\n    if not callable(showwarning):\n        raise TypeError(\"warnings.showwarning() must be set to a \"\n                        \"function or method\")\n    showwarning(message, category, filename, lineno)\nclass WarningMessage(object):\n    \"\"\"Holds the result of a single showwarning() call.\"\"\"\n    _WARNING_DETAILS = (\"message\", \"category\", \"filename\", \"lineno\", \"file\",\n                        \"line\")\n    def __init__(self, message, category, filename, lineno, file=None,\n                    line=None):\n        local_values = locals()\n        for attr in self._WARNING_DETAILS:\n            setattr(self, attr, local_values[attr])\n        self._category_name = category.__name__ if category else None\n    def __str__(self):\n        return (\"{message : %r, category : %r, filename : %r, lineno : %s, \"\n                    \"line : %r}\" % (self.message, self._category_name,\n                                    self.filename, self.lineno, self.line))\nclass catch_warnings(object):\n    \"\"\"A context manager that copies and restores the warnings filter upon\n    exiting the context.\n    The 'record' argument specifies whether warnings should be captured by a\n    custom implementation of warnings.showwarning() and be appended to a list\n    returned by the context manager. Otherwise None is returned by the context\n    manager. The objects appended to the list are arguments whose attributes\n    mirror the arguments to showwarning().\n    The 'module' argument is to specify an alternative module to the module\n    named 'warnings' and imported under that name. This argument is only useful\n    when testing the warnings module itself.\n    \"\"\"\n    def __init__(self, *, record=False, module=None):\n        \"\"\"Specify whether to record warnings and if an alternative module\n        should be used other than sys.modules['warnings'].\n        For compatibility with Python 3.0, please consider all arguments to be\n        keyword-only.\n        \"\"\"\n        self._record = record\n        self._module = sys.modules['warnings'] if module is None else module\n        self._entered = False\n    def __repr__(self):\n        args = []\n        if self._record:\n            args.append(\"record=True\")\n        if self._module is not sys.modules['warnings']:\n            args.append(\"module=%r\" % self._module)\n        name = type(self).__name__\n        return \"%s(%s)\" % (name, \", \".join(args))\n    def __enter__(self):\n        if self._entered:\n            raise RuntimeError(\"Cannot enter %r twice\" % self)\n        self._entered = True\n        self._filters = self._module.filters\n        self._module.filters = self._filters[:]\n        self._showwarning = self._module.showwarning\n        if self._record:\n            log = []\n            def showwarning(*args, **kwargs):\n                log.append(WarningMessage(*args, **kwargs))\n            self._module.showwarning = showwarning\n            return log\n        else:\n            return None\n    def __exit__(self, *exc_info):\n        if not self._entered:\n            raise RuntimeError(\"Cannot exit %r without entering first\" % self)\n        self._module.filters = self._filters\n        self._module.showwarning = self._showwarning\n_warnings_defaults = False\ntry:\n    from _warnings import (filters, _defaultaction, _onceregistry,\n                            warn, warn_explicit)\n    defaultaction = _defaultaction\n    onceregistry = _onceregistry\n    _warnings_defaults = True\nexcept ImportError:\n    filters = []\n    defaultaction = \"default\"\n    onceregistry = {}\n_processoptions(sys.warnoptions)\nif not _warnings_defaults:\n    silence = [ImportWarning, PendingDeprecationWarning]\n    silence.append(DeprecationWarning)\n    for cls in silence:\n        simplefilter(\"ignore\", category=cls)\n    bytes_warning = sys.flags.bytes_warning\n    if bytes_warning > 1:\n        bytes_action = \"error\"\n    elif bytes_warning:\n        bytes_action = \"default\"\n    else:\n        bytes_action = \"ignore\"\n    simplefilter(bytes_action, category=BytesWarning, append=1)\n    if hasattr(sys, 'gettotalrefcount'):\n        resource_action = \"always\"\n    else:\n        resource_action = \"ignore\"\n    simplefilter(resource_action, category=ResourceWarning, append=1)\ndel _warnings_defaults\n", "/Lib/unittest/test/test_runner.py": "import io\r\nimport os\r\nimport sys\r\nimport pickle\r\nimport subprocess\r\nimport unittest\r\nfrom .support import LoggingResult, ResultWithNoStartTestRunStopTestRun\r\nclass TestCleanUp(unittest.TestCase):\r\n    def testCleanUp(self):\r\n        class TestableTest(unittest.TestCase):\r\n            def testNothing(self):\r\n                pass\r\n        test = TestableTest('testNothing')\r\n        self.assertEqual(test._cleanups, [])\r\n        cleanups = []\r\n        def cleanup1(*args, **kwargs):\r\n            cleanups.append((1, args, kwargs))\r\n        def cleanup2(*args, **kwargs):\r\n            cleanups.append((2, args, kwargs))\r\n        test.addCleanup(cleanup1, 1, 2, 3, four='hello', five='goodbye')\r\n        test.addCleanup(cleanup2)\r\n        self.assertEqual(test._cleanups,\r\n                         [(cleanup1, (1, 2, 3), dict(four='hello', five='goodbye')),\r\n                          (cleanup2, (), {})])\r\n        self.assertTrue(test.doCleanups())\r\n        self.assertEqual(cleanups, [(2, (), {}), (1, (1, 2, 3), dict(four='hello', five='goodbye'))])\r\n    def testCleanUpWithErrors(self):\r\n        class TestableTest(unittest.TestCase):\r\n            def testNothing(self):\r\n                pass\r\n        class MockOutcome(object):\r\n            success = True\r\n            errors = []\r\n        test = TestableTest('testNothing')\r\n        test._outcomeForDoCleanups = MockOutcome\r\n        exc1 = Exception('foo')\r\n        exc2 = Exception('bar')\r\n        def cleanup1():\r\n            raise exc1\r\n        def cleanup2():\r\n            raise exc2\r\n        test.addCleanup(cleanup1)\r\n        test.addCleanup(cleanup2)\r\n        self.assertFalse(test.doCleanups())\r\n        self.assertFalse(MockOutcome.success)\r\n        (Type1, instance1, _), (Type2, instance2, _) = reversed(MockOutcome.errors)\r\n        self.assertEqual((Type1, instance1), (Exception, exc1))\r\n        self.assertEqual((Type2, instance2), (Exception, exc2))\r\n    def testCleanupInRun(self):\r\n        blowUp = False\r\n        ordering = []\r\n        class TestableTest(unittest.TestCase):\r\n            def setUp(self):\r\n                ordering.append('setUp')\r\n                if blowUp:\r\n                    raise Exception('foo')\r\n            def testNothing(self):\r\n                ordering.append('test')\r\n            def tearDown(self):\r\n                ordering.append('tearDown')\r\n        test = TestableTest('testNothing')\r\n        def cleanup1():\r\n            ordering.append('cleanup1')\r\n        def cleanup2():\r\n            ordering.append('cleanup2')\r\n        test.addCleanup(cleanup1)\r\n        test.addCleanup(cleanup2)\r\n        def success(some_test):\r\n            self.assertEqual(some_test, test)\r\n            ordering.append('success')\r\n        result = unittest.TestResult()\r\n        result.addSuccess = success\r\n        test.run(result)\r\n        self.assertEqual(ordering, ['setUp', 'test', 'tearDown',\r\n                                    'cleanup2', 'cleanup1', 'success'])\r\n        blowUp = True\r\n        ordering = []\r\n        test = TestableTest('testNothing')\r\n        test.addCleanup(cleanup1)\r\n        test.run(result)\r\n        self.assertEqual(ordering, ['setUp', 'cleanup1'])\r\n    def testTestCaseDebugExecutesCleanups(self):\r\n        ordering = []\r\n        class TestableTest(unittest.TestCase):\r\n            def setUp(self):\r\n                ordering.append('setUp')\r\n                self.addCleanup(cleanup1)\r\n            def testNothing(self):\r\n                ordering.append('test')\r\n            def tearDown(self):\r\n                ordering.append('tearDown')\r\n        test = TestableTest('testNothing')\r\n        def cleanup1():\r\n            ordering.append('cleanup1')\r\n            test.addCleanup(cleanup2)\r\n        def cleanup2():\r\n            ordering.append('cleanup2')\r\n        test.debug()\r\n        self.assertEqual(ordering, ['setUp', 'test', 'tearDown', 'cleanup1', 'cleanup2'])\r\nclass Test_TextTestRunner(unittest.TestCase):\r\n    \"\"\"Tests for TextTestRunner.\"\"\"\r\n    def test_init(self):\r\n        runner = unittest.TextTestRunner()\r\n        self.assertFalse(runner.failfast)\r\n        self.assertFalse(runner.buffer)\r\n        self.assertEqual(runner.verbosity, 1)\r\n        self.assertEqual(runner.warnings, None)\r\n        self.assertTrue(runner.descriptions)\r\n        self.assertEqual(runner.resultclass, unittest.TextTestResult)\r\n    def testBufferAndFailfast(self):\r\n        class Test(unittest.TestCase):\r\n            def testFoo(self):\r\n                pass\r\n        result = unittest.TestResult()\r\n        runner = unittest.TextTestRunner(stream=io.StringIO(), failfast=True,\r\n                                           buffer=True)\r\n        runner._makeResult = lambda: result\r\n        runner.run(Test('testFoo'))\r\n        self.assertTrue(result.failfast)\r\n        self.assertTrue(result.buffer)\r\n    def testRunnerRegistersResult(self):\r\n        class Test(unittest.TestCase):\r\n            def testFoo(self):\r\n                pass\r\n        originalRegisterResult = unittest.runner.registerResult\r\n        def cleanup():\r\n            unittest.runner.registerResult = originalRegisterResult\r\n        self.addCleanup(cleanup)\r\n        result = unittest.TestResult()\r\n        runner = unittest.TextTestRunner(stream=io.StringIO())\r\n        runner._makeResult = lambda: result\r\n        self.wasRegistered = 0\r\n        def fakeRegisterResult(thisResult):\r\n            self.wasRegistered += 1\r\n            self.assertEqual(thisResult, result)\r\n        unittest.runner.registerResult = fakeRegisterResult\r\n        runner.run(unittest.TestSuite())\r\n        self.assertEqual(self.wasRegistered, 1)\r\n    def test_works_with_result_without_startTestRun_stopTestRun(self):\r\n        class OldTextResult(ResultWithNoStartTestRunStopTestRun):\r\n            separator2 = ''\r\n            def printErrors(self):\r\n                pass\r\n        class Runner(unittest.TextTestRunner):\r\n            def __init__(self):\r\n                super(Runner, self).__init__(io.StringIO())\r\n            def _makeResult(self):\r\n                return OldTextResult()\r\n        runner = Runner()\r\n        runner.run(unittest.TestSuite())\r\n    def test_startTestRun_stopTestRun_called(self):\r\n        class LoggingTextResult(LoggingResult):\r\n            separator2 = ''\r\n            def printErrors(self):\r\n                pass\r\n        class LoggingRunner(unittest.TextTestRunner):\r\n            def __init__(self, events):\r\n                super(LoggingRunner, self).__init__(io.StringIO())\r\n                self._events = events\r\n            def _makeResult(self):\r\n                return LoggingTextResult(self._events)\r\n        events = []\r\n        runner = LoggingRunner(events)\r\n        runner.run(unittest.TestSuite())\r\n        expected = ['startTestRun', 'stopTestRun']\r\n        self.assertEqual(events, expected)\r\n    def test_pickle_unpickle(self):\r\n        stream = io.StringIO(\"foo\")\r\n        runner = unittest.TextTestRunner(stream)\r\n        for protocol in range(2, pickle.HIGHEST_PROTOCOL + 1):\r\n            s = pickle.dumps(runner, protocol)\r\n            obj = pickle.loads(s)\r\n            self.assertEqual(obj.stream.getvalue(), stream.getvalue())\r\n    def test_resultclass(self):\r\n        def MockResultClass(*args):\r\n            return args\r\n        STREAM = object()\r\n        DESCRIPTIONS = object()\r\n        VERBOSITY = object()\r\n        runner = unittest.TextTestRunner(STREAM, DESCRIPTIONS, VERBOSITY,\r\n                                         resultclass=MockResultClass)\r\n        self.assertEqual(runner.resultclass, MockResultClass)\r\n        expectedresult = (runner.stream, DESCRIPTIONS, VERBOSITY)\r\n        self.assertEqual(runner._makeResult(), expectedresult)\r\n    def test_warnings(self):\r\n        \"\"\"\r\n        Check that warnings argument of TextTestRunner correctly affects the\r\n        behavior of the warnings.\r\n        \"\"\"\r\n        def get_parse_out_err(p):\r\n            return [b.splitlines() for b in p.communicate()]\r\n        opts = dict(stdout=subprocess.PIPE, stderr=subprocess.PIPE,\r\n                    cwd=os.path.dirname(__file__))\r\n        ae_msg = b'Please use assertEqual instead.'\r\n        at_msg = b'Please use assertTrue instead.'\r\n        p = subprocess.Popen([sys.executable, '_test_warnings.py'], **opts)\r\n        out, err = get_parse_out_err(p)\r\n        self.assertIn(b'OK', err)\r\n        self.assertEqual(len(out), 12)\r\n        for msg in [b'dw', b'iw', b'uw']:\r\n            self.assertEqual(out.count(msg), 3)\r\n        for msg in [ae_msg, at_msg, b'rw']:\r\n            self.assertEqual(out.count(msg), 1)\r\n        args_list = (\r\n            [sys.executable, '_test_warnings.py', 'ignore'],\r\n            [sys.executable, '-Wa', '_test_warnings.py', 'ignore'],\r\n            [sys.executable, '-Wi', '_test_warnings.py']\r\n        )\r\n        for args in args_list:\r\n            p = subprocess.Popen(args, **opts)\r\n            out, err = get_parse_out_err(p)\r\n            self.assertIn(b'OK', err)\r\n            self.assertEqual(len(out), 0)\r\n        p = subprocess.Popen([sys.executable, '_test_warnings.py', 'always'],\r\n                             **opts)\r\n        out, err = get_parse_out_err(p)\r\n        self.assertIn(b'OK', err)\r\n        self.assertEqual(len(out), 14)\r\n        for msg in [b'dw', b'iw', b'uw', b'rw']:\r\n            self.assertEqual(out.count(msg), 3)\r\n        for msg in [ae_msg, at_msg]:\r\n            self.assertEqual(out.count(msg), 1)\r\n    def testStdErrLookedUpAtInstantiationTime(self):\r\n        old_stderr = sys.stderr\r\n        f = io.StringIO()\r\n        sys.stderr = f\r\n        try:\r\n            runner = unittest.TextTestRunner()\r\n            self.assertTrue(runner.stream.stream is f)\r\n        finally:\r\n            sys.stderr = old_stderr\r\n    def testSpecifiedStreamUsed(self):\r\n        f = io.StringIO()\r\n        runner = unittest.TextTestRunner(f)\r\n        self.assertTrue(runner.stream.stream is f)\r\n", "/Lib/unittest/__init__.py": "\"\"\"\r\nPython unit testing framework, based on Erich Gamma's JUnit and Kent Beck's\r\nSmalltalk testing framework.\r\nThis module contains the core framework classes that form the basis of\r\nspecific test cases and suites (TestCase, TestSuite etc.), and also a\r\ntext-based utility class for running the tests and reporting the results\r\n (TextTestRunner).\r\nSimple usage:\r\n    import unittest\r\n    class IntegerArithmenticTestCase(unittest.TestCase):\r\n        def testAdd(self):  ## test method names begin 'test*'\r\n            self.assertEqual((1 + 2), 3)\r\n            self.assertEqual(0 + 1, 1)\r\n        def testMultiply(self):\r\n            self.assertEqual((0 * 10), 0)\r\n            self.assertEqual((5 * 8), 40)\r\n    if __name__ == '__main__':\r\n        unittest.main()\r\nFurther information is available in the bundled documentation, and from\r\n  http://docs.python.org/library/unittest.html\r\nCopyright (c) 1999-2003 Steve Purcell\r\nCopyright (c) 2003-2010 Python Software Foundation\r\nThis module is free software, and you may redistribute it and/or modify\r\nit under the same terms as Python itself, so long as this copyright message\r\nand disclaimer are retained in their original form.\r\nIN NO EVENT SHALL THE AUTHOR BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,\r\nSPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF\r\nTHIS CODE, EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\r\nDAMAGE.\r\nTHE AUTHOR SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT\r\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\r\nPARTICULAR PURPOSE.  THE CODE PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS,\r\nAND THERE IS NO OBLIGATION WHATSOEVER TO PROVIDE MAINTENANCE,\r\nSUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\r\n\"\"\"\r\n__all__ = ['TestResult', 'TestCase', 'TestSuite',\r\n           'TextTestRunner', 'TestLoader', 'FunctionTestCase', 'main',\r\n           'defaultTestLoader', 'SkipTest', 'skip', 'skipIf', 'skipUnless',\r\n           'expectedFailure', 'TextTestResult', 'installHandler',\r\n           'registerResult', 'removeResult', 'removeHandler']\r\n__all__.extend(['getTestCaseNames', 'makeSuite', 'findTestCases'])\r\n__unittest = True\r\nfrom .result import TestResult\r\nfrom .case import (TestCase, FunctionTestCase, SkipTest, skip, skipIf,\r\n                   skipUnless, expectedFailure)\r\nfrom .suite import BaseTestSuite, TestSuite\r\nfrom .loader import (TestLoader, defaultTestLoader, makeSuite, getTestCaseNames,\r\n                     findTestCases)\r\nfrom .main import TestProgram, main\r\nfrom .runner import TextTestRunner, TextTestResult\r\nfrom .signals import installHandler, registerResult, removeResult, removeHandler\r\n_TextTestResult = TextTestResult\r\n", "/Lib/unittest/util.py": "\"\"\"Various utility functions.\"\"\"\r\nfrom collections import namedtuple, OrderedDict\r\n__unittest = True\r\n_MAX_LENGTH = 80\r\ndef safe_repr(obj, short=False):\r\n    try:\r\n        result = repr(obj)\r\n    except Exception:\r\n        result = object.__repr__(obj)\r\n    if not short or len(result) < _MAX_LENGTH:\r\n        return result\r\n    return result[:_MAX_LENGTH] + ' [truncated]...'\r\ndef strclass(cls):\r\n    return \"%s.%s\" % (cls.__module__, cls.__name__)\r\ndef sorted_list_difference(expected, actual):\r\n    \"\"\"Finds elements in only one or the other of two, sorted input lists.\r\n    Returns a two-element tuple of lists.    The first list contains those\r\n    elements in the \"expected\" list but not in the \"actual\" list, and the\r\n    second contains those elements in the \"actual\" list but not in the\r\n    \"expected\" list.    Duplicate elements in either input list are ignored.\r\n    \"\"\"\r\n    i = j = 0\r\n    missing = []\r\n    unexpected = []\r\n    while True:\r\n        try:\r\n            e = expected[i]\r\n            a = actual[j]\r\n            if e < a:\r\n                missing.append(e)\r\n                i += 1\r\n                while expected[i] == e:\r\n                    i += 1\r\n            elif e > a:\r\n                unexpected.append(a)\r\n                j += 1\r\n                while actual[j] == a:\r\n                    j += 1\r\n            else:\r\n                i += 1\r\n                try:\r\n                    while expected[i] == e:\r\n                        i += 1\r\n                finally:\r\n                    j += 1\r\n                    while actual[j] == a:\r\n                        j += 1\r\n        except IndexError:\r\n            missing.extend(expected[i:])\r\n            unexpected.extend(actual[j:])\r\n            break\r\n    return missing, unexpected\r\ndef unorderable_list_difference(expected, actual):\r\n    \"\"\"Same behavior as sorted_list_difference but\r\n    for lists of unorderable items (like dicts).\r\n    As it does a linear search per item (remove) it\r\n    has O(n*n) performance.\"\"\"\r\n    missing = []\r\n    while expected:\r\n        item = expected.pop()\r\n        try:\r\n            actual.remove(item)\r\n        except ValueError:\r\n            missing.append(item)\r\n    return missing, actual\r\ndef three_way_cmp(x, y):\r\n    \"\"\"Return -1 if x < y, 0 if x == y and 1 if x > y\"\"\"\r\n    return (x > y) - (x < y)\r\n_Mismatch = namedtuple('Mismatch', 'actual expected value')\r\ndef _count_diff_all_purpose(actual, expected):\r\n    'Returns list of (cnt_act, cnt_exp, elem) triples where the counts differ'\r\n    s, t = list(actual), list(expected)\r\n    m, n = len(s), len(t)\r\n    NULL = object()\r\n    result = []\r\n    for i, elem in enumerate(s):\r\n        if elem is NULL:\r\n            continue\r\n        cnt_s = cnt_t = 0\r\n        for j in range(i, m):\r\n            if s[j] == elem:\r\n                cnt_s += 1\r\n                s[j] = NULL\r\n        for j, other_elem in enumerate(t):\r\n            if other_elem == elem:\r\n                cnt_t += 1\r\n                t[j] = NULL\r\n        if cnt_s != cnt_t:\r\n            diff = _Mismatch(cnt_s, cnt_t, elem)\r\n            result.append(diff)\r\n    for i, elem in enumerate(t):\r\n        if elem is NULL:\r\n            continue\r\n        cnt_t = 0\r\n        for j in range(i, n):\r\n            if t[j] == elem:\r\n                cnt_t += 1\r\n                t[j] = NULL\r\n        diff = _Mismatch(0, cnt_t, elem)\r\n        result.append(diff)\r\n    return result\r\ndef _ordered_count(iterable):\r\n    'Return dict of element counts, in the order they were first seen'\r\n    c = OrderedDict()\r\n    for elem in iterable:\r\n        c[elem] = c.get(elem, 0) + 1\r\n    return c\r\ndef _count_diff_hashable(actual, expected):\r\n    'Returns list of (cnt_act, cnt_exp, elem) triples where the counts differ'\r\n    s, t = _ordered_count(actual), _ordered_count(expected)\r\n    result = []\r\n    for elem, cnt_s in s.items():\r\n        cnt_t = t.get(elem, 0)\r\n        if cnt_s != cnt_t:\r\n            diff = _Mismatch(cnt_s, cnt_t, elem)\r\n            result.append(diff)\r\n    for elem, cnt_t in t.items():\r\n        if elem not in s:\r\n            diff = _Mismatch(0, cnt_t, elem)\r\n            result.append(diff)\r\n    return result\r\n", "/libs/crypto_js/rollups/sha1.js": "var CryptoJS=CryptoJS||function(e,m){var p={},j=p.lib={},l=function(){},f=j.Base={extend:function(a){l.prototype=this;var c=new l();a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments);});c.init.prototype=c;c.$super=this;return c;},create:function(){var a=this.extend();a.init.apply(a,arguments);return a;},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString);},clone:function(){return this.init.prototype.extend(this);}},n=j.WordArray=f.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=m?c:4*a.length;},toString:function(a){return(a||h).stringify(this);},concat:function(a){var c=this.words,q=a.words,d=this.sigBytes;a=a.sigBytes;this.clamp();if(d%4)for(var b=0;b<a;b++)c[d+b>>>2]|=(q[b>>>2]>>>24-8*(b%4)&255)<<24-8*((d+b)%4);else if(65535<q.length)for(b=0;b<a;b+=4)c[d+b>>>2]=q[b>>>2];else c.push.apply(c,q);this.sigBytes+=a;return this;},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<32-8*(c%4);a.length=e.ceil(c/4);},clone:function(){var a=f.clone.call(this);a.words=this.words.slice(0);return a;},random:function(a){for(var c=[],b=0;b<a;b+=4)c.push(4294967296*e.random()|0);return new n.init(c,a);}}),b=p.enc={},h=b.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],d=0;d<a;d++){var f=c[d>>>2]>>>24-8*(d%4)&255;b.push((f>>>4).toString(16));b.push((f&15).toString(16));}return b.join(\"\");},parse:function(a){for(var c=a.length,b=[],d=0;d<c;d+=2)b[d>>>3]|=parseInt(a.substr(d,2),16)<<24-4*(d%8);return new n.init(b,c/2);}},g=b.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var b=[],d=0;d<a;d++)b.push(String.fromCharCode(c[d>>>2]>>>24-8*(d%4)&255));return b.join(\"\");},parse:function(a){for(var c=a.length,b=[],d=0;d<c;d++)b[d>>>2]|=(a.charCodeAt(d)&255)<<24-8*(d%4);return new n.init(b,c);}},r=b.Utf8={stringify:function(a){try{return decodeURIComponent(escape(g.stringify(a)));}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return g.parse(unescape(encodeURIComponent(a)));}},k=j.BufferedBlockAlgorithm=f.extend({reset:function(){this._data=new n.init();this._nDataBytes=0;},_append:function(a){\"string\"==typeof a&&(a=r.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes;},_process:function(a){var c=this._data,b=c.words,d=c.sigBytes,f=this.blockSize,h=d/(4*f),h=a?e.ceil(h):e.max((h|0)-this._minBufferSize,0);a=h*f;d=e.min(4*a,d);if(a){for(var g=0;g<a;g+=f)this._doProcessBlock(b,g);g=b.splice(0,a);c.sigBytes-=d;}return new n.init(g,d);},clone:function(){var a=f.clone.call(this);a._data=this._data.clone();return a;},_minBufferSize:0});j.Hasher=k.extend({cfg:f.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset();},reset:function(){k.reset.call(this);this._doReset();},update:function(a){this._append(a);this._process();return this;},finalize:function(a){a&&this._append(a);return this._doFinalize();},blockSize:16,_createHelper:function(a){return function(c,b){return new a.init(b).finalize(c);};},_createHmacHelper:function(a){return function(b,f){return new s.HMAC.init(a,f).finalize(b);};}});var s=p.algo={};return p;}(Math);(function(){var e=CryptoJS,m=e.lib,p=m.WordArray,j=m.Hasher,l=[],m=e.algo.SHA1=j.extend({_doReset:function(){this._hash=new p.init([1732584193,4023233417,2562383102,271733878,3285377520]);},_doProcessBlock:function(f,n){for(var b=this._hash.words,h=b[0],g=b[1],e=b[2],k=b[3],j=b[4],a=0;80>a;a++){if(16>a)l[a]=f[n+a]|0;else{var c=l[a-3]^l[a-8]^l[a-14]^l[a-16];l[a]=c<<1|c>>>31;}c=(h<<5|h>>>27)+j+l[a];c=20>a?c+((g&e|~g&k)+1518500249):40>a?c+((g^e^k)+1859775393):60>a?c+((g&e|g&k|e&k)-1894007588):c+((g^e^k)-899497514);j=k;k=e;e=g<<30|g>>>2;g=h;h=c;}b[0]=b[0]+h|0;b[1]=b[1]+g|0;b[2]=b[2]+e|0;b[3]=b[3]+k|0;b[4]=b[4]+j|0;},_doFinalize:function(){var f=this._data,e=f.words,b=8*this._nDataBytes,h=8*f.sigBytes;e[h>>>5]|=128<<24-h%32;e[(h+64>>>9<<4)+14]=Math.floor(b/4294967296);e[(h+64>>>9<<4)+15]=b;f.sigBytes=4*e.length;this._process();return this._hash;},clone:function(){var e=j.clone.call(this);e._hash=this._hash.clone();return e;}});e.SHA1=j._createHelper(m);e.HmacSHA1=j._createHmacHelper(m);})();", "/libs/math.js": "$module=(function($B){var __builtins__=$B.builtins;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");var float_check=function(x){if(isinstance(x,float))return x.value;return x;};var isinf=function(x){var x1=float_check(x);return x1==-Infinity||x1==Infinity||x1==Number.POSITIVE_INFINITY||x1==Number.NEGATIVE_INFINITY;};var _mod={__getattr__:function(attr){var res=this[attr];if(res===undefined)$raise('AttributeError','module math has no attribute '+attr);return res;},acos:function(x){return float(Math.acos(float_check(x)));},acosh:function(x){if(isinf(x))return float('inf');var y=float_check(x);return float(Math.log(y+Math.sqrt(y*y-1)));},asin:function(x){return float(Math.asin(float_check(x)));},asinh:function(x){if(isinf(x))return float('inf');var y=float_check(x);return float(Math.log(y+Math.sqrt(y*y+1)));},atan:function(x){if(isinf(x))return float(Math.PI/2);return float(Math.atan(float_check(x)));},atan2:function(y,x){return float(Math.atan2(y,x));},atanh:function(x){var y=float_check(x);if(y==0)return 0;return float(0.5*Math.log((1/y+1)/(1/y-1)));},ceil:function(x){var y=float_check(x);if(!isNaN(parseFloat(y))&&isFinite(y))return int(Math.ceil(y));try{return getattr(y,'__ceil__')();}catch(err){$B.$pop_exc();}$raise('ValueError','object is not a number and does not contain __ceil__');},copysign:function(x,y){var x1=Math.abs(float_check(x));var y1=float_check(y);var sign=y1?y1<0?-1:1:1;if(isinstance(x,int))return x1*sign;else return float(x1*sign);},cos:function(x){return float(Math.cos(float_check(x)));},degrees:function(x){return float(float_check(x)*180/Math.PI);},e:float(Math.E),erf:function(x){var y=float_check(x);var t=1.0/(1.0+0.5*Math.abs(y));var ans=1-t*Math.exp(-y*y-1.26551223+t*(1.00002368+t*(0.37409196+t*(0.09678418+t*(-0.18628806+t*(0.27886807+t*(-1.13520398+t*(1.48851587+t*(-0.82215223+t*0.17087277)))))))));if(y>=0.0)return ans;return -ans;},erfc:function(x){var y=float_check(x);var t=1.0/(1.0+0.5*Math.abs(y));var ans=1-t*Math.exp(-y*y-1.26551223+t*(1.00002368+t*(0.37409196+t*(0.09678418+t*(-0.18628806+t*(0.27886807+t*(-1.13520398+t*(1.48851587+t*(-0.82215223+t*0.17087277)))))))));if(y>=0.0)return 1-ans;return 1+ans;},exp:function(x){return float(Math.exp(float_check(x)));},expm1:function(x){return float(Math.exp(float_check(x))-1);},fabs:function(x){return x>0?float(x):float(-x);},factorial:function(x){var y=float_check(x);var r=1;for(var i=2;i<=y;i++)r*=i;return r;},floor:function(x){return Math.floor(float_check(x));},fmod:function(x,y){return float(float_check(x)%float_check(y));},frexp:function(x){var x1=float_check(x);var ex=Math.floor(Math.log(x1)/Math.log(2))+1;frac=x1/Math.pow(2,ex);return [frac,ex];},gamma:function(x){var y=float_check(x);var z=y+1;var d1=Math.sqrt(2*Math.PI)/z;var d2=1.000000000190015;d2+=76.18009172947146/(z+1);d2+=-86.50532032941677/(z+2);d2+=24.01409824083091/(z+3);d2+=-1.231739572450155/(z+4);d2+=1.208650973866179E-3/(z+5);d2+=-5.395239384953E-6/(z+6);return d1*d2*Math.pow(z+5.5,z+0.5)*Math.exp(-(z+5.5));},hypot:function(x,y){var x1=float_check(x);var y1=float_check(y);return float(Math.sqrt(x1*x1+y1*y1));},isfinite:function(x){return isFinite(float_check(x));},isinf:function(x){return isinf(x);},isnan:function(x){return isNaN(float_check(x));},ldexp:function(x,i){var mul=Math.pow(2,float_check(i));if(isinstance(x,int))return x*mul;else return float(x.value*mul);},lgamma:function(x){var y=float_check(x);var z=y+1;var d1=Math.sqrt(2*Math.PI)/z;var d2=1.000000000190015;d2+=76.18009172947146/(z+1);d2+=-86.50532032941677/(z+2);d2+=24.01409824083091/(z+3);d2+=-1.231739572450155/(z+4);d2+=1.208650973866179E-3/(z+5);d2+=-5.395239384953E-6/(z+6);return float(Math.log(Math.abs(d1*d2*Math.pow(z+5.5,z+0.5)*Math.exp(-(z+5.5)))));},log:function(x,base){var x1=float_check(x);if(base===undefined)return float(Math.log(x1));return float(Math.log(x1)/Math.log(float_check(base)));},log1p:function(x){return float(Math.log(1.0+float_check(x)));},log2:function(x){return float(Math.log(float_check(x))/Math.LN2);},log10:function(x){return float(Math.log(float_check(x))/Math.LN10);},modf:function(x){var x1=float_check(x);if(x1>0){var i=float(x1-Math.floor(x1));return [i,float(x1-i)];}var i=float(x1-Math.ceil(x1));return [i,float(Math.ceil(x1))];},pi:float(Math.PI),pow:function(x,y){if(isinstance(x,int))return Math.pow(x,float_check(y));else return float(Math.pow(x.value,float_check(y)));},radians:function(x){return float(float_check(x)*Math.PI/180);},sin:function(x){return float(Math.sin(float_check(x)));},sqrt:function(x){return float(Math.sqrt(float_check(x)));},trunc:function(x){try{return getattr(x,'__trunc__')();}catch(err){$B.$pop_exc();}var x1=float_check(x);if(!isNaN(parseFloat(x1))&&isFinite(x1))return int(Math.floor(x1));$raise('ValueError','object is not a number and does not contain __trunc__');}};for(var $attr in _mod)if(typeof _mod[$attr]==='function'){_mod[$attr].__repr__=(function(func){return function(){return '<built-in function '+func+'>';};})($attr);_mod[$attr].__str__=(function(func){return function(){return '<built-in function '+func+'>';};})($attr);}return _mod;})(__BRYTHON__);", "/libs/marshal.js": "$module=(function($B){var __builtins__=$B.builtins;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");function _py(obj){if(obj===null)return None;if(isinstance(obj,list)){var res=[];for(var i=0;i<obj.length;i++)res.push(_py(obj[i]));return res;}if(obj.__class__!==undefined){if(obj.__class__===list)for(var i=0;i<obj.length;i++)obj[i]=_py(obj[i]);return obj;}if(typeof obj==='object'&&obj.__class__===undefined){var res=dict();for(var attr in obj)getattr(res,'__setitem__')(attr,_py(obj[attr]));return res;}return $B.JSObject(obj);}function _js(obj){if(isinstance(obj,[int,str]))return obj;else if(obj===None)return null;else if(obj===True)return true;else if(obj===False)return false;else if(isinstance(obj,float))return obj.value;else if(isinstance(obj,[list,tuple])){var res=[];for(var i=0;i<obj.length;i++)res.push(_js(obj[i]));return res;}else if(isinstance(obj,dict)){var res=new Object();for(var i=0;i<obj.$keys.length;i++)res[_js(obj.$keys[i])]=_js(obj.$values[i]);return res;}else throw TypeError(str(obj)+' is not JSON serializable');}return{loads:function(json_obj){return _py(JSON.parse(json_obj));},dumps:function(obj){return JSON.stringify(_js(obj));}};})(__BRYTHON__);", "/Lib/functools.py": "\"\"\"functools.py - Tools for working with functions and callable objects\n\"\"\"\n__all__ = ['update_wrapper', 'wraps', 'WRAPPER_ASSIGNMENTS', 'WRAPPER_UPDATES',\n           'total_ordering', 'cmp_to_key', 'lru_cache', 'reduce', 'partial']\nfrom _functools import partial, reduce\nfrom collections import namedtuple\ntry:\n    from _thread import allocate_lock as Lock\nexcept:\n    from _dummy_thread import allocate_lock as Lock\nWRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__qualname__', '__doc__',\n                       '__annotations__')\nWRAPPER_UPDATES = ('__dict__',)\ndef update_wrapper(wrapper,\n                   wrapped,\n                   assigned = WRAPPER_ASSIGNMENTS,\n                   updated = WRAPPER_UPDATES):\n    \"\"\"Update a wrapper function to look like the wrapped function\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n       functools.WRAPPER_ASSIGNMENTS)\n       updated is a tuple naming the attributes of the wrapper that\n       are updated with the corresponding attribute from the wrapped\n       function (defaults to functools.WRAPPER_UPDATES)\n    \"\"\"\n    wrapper.__wrapped__ = wrapped\n    for attr in assigned:\n        try:\n            value = getattr(wrapped, attr)\n        except AttributeError:\n            pass\n        else:\n            setattr(wrapper, attr, value)\n    for attr in updated:\n        getattr(wrapper, attr).update(getattr(wrapped, attr, {}))\n    return wrapper\ndef wraps(wrapped,\n          assigned = WRAPPER_ASSIGNMENTS,\n          updated = WRAPPER_UPDATES):\n    \"\"\"Decorator factory to apply update_wrapper() to a wrapper function\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    \"\"\"\n    return partial(update_wrapper, wrapped=wrapped,\n                   assigned=assigned, updated=updated)\ndef total_ordering(cls):\n    \"\"\"Class decorator that fills in missing ordering methods\"\"\"\n    convert = {\n        '__lt__': [('__gt__', lambda self, other: not (self < other or self == other)),\n                   ('__le__', lambda self, other: self < other or self == other),\n                   ('__ge__', lambda self, other: not self < other)],\n        '__le__': [('__ge__', lambda self, other: not self <= other or self == other),\n                   ('__lt__', lambda self, other: self <= other and not self == other),\n                   ('__gt__', lambda self, other: not self <= other)],\n        '__gt__': [('__lt__', lambda self, other: not (self > other or self == other)),\n                   ('__ge__', lambda self, other: self > other or self == other),\n                   ('__le__', lambda self, other: not self > other)],\n        '__ge__': [('__le__', lambda self, other: (not self >= other) or self == other),\n                   ('__gt__', lambda self, other: self >= other and not self == other),\n                   ('__lt__', lambda self, other: not self >= other)]\n    }\n    roots = [op for op in convert if getattr(cls, op, None) is not getattr(object, op, None)]\n    if not roots:\n        raise ValueError('must define at least one ordering operation: < > <= >=')\n    root = max(roots)       # prefer __lt__ to __le__ to __gt__ to __ge__\n    for opname, opfunc in convert[root]:\n        if opname not in roots:\n            opfunc.__name__ = opname\n            opfunc.__doc__ = getattr(int, opname).__doc__\n            setattr(cls, opname, opfunc)\n    return cls\ndef cmp_to_key(mycmp):\n    \"\"\"Convert a cmp= function into a key= function\"\"\"\n    class K(object):\n        __slots__ = ['obj']\n        def __init__(self, obj):\n            self.obj = obj\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj) < 0\n        def __gt__(self, other):\n            return mycmp(self.obj, other.obj) > 0\n        def __eq__(self, other):\n            return mycmp(self.obj, other.obj) == 0\n        def __le__(self, other):\n            return mycmp(self.obj, other.obj) <= 0\n        def __ge__(self, other):\n            return mycmp(self.obj, other.obj) >= 0\n        def __ne__(self, other):\n            return mycmp(self.obj, other.obj) != 0\n        __hash__ = None\n    return K\ntry:\n    from _functools import cmp_to_key\nexcept ImportError:\n    pass\n_CacheInfo = namedtuple(\"CacheInfo\", [\"hits\", \"misses\", \"maxsize\", \"currsize\"])\nclass _HashedSeq(list):\n    __slots__ = 'hashvalue'\n    def __init__(self, tup, hash=hash):\n        self[:] = tup\n        self.hashvalue = hash(tup)\n    def __hash__(self):\n        return self.hashvalue\ndef _make_key(args, kwds, typed,\n             kwd_mark = (object(),),\n             fasttypes = {int, str, frozenset, type(None)},\n             sorted=sorted, tuple=tuple, type=type, len=len):\n    'Make a cache key from optionally typed positional and keyword arguments'\n    key = args\n    if kwds:\n        sorted_items = sorted(kwds.items())\n        key += kwd_mark\n        for item in sorted_items:\n            key += item\n    if typed:\n        key += tuple(type(v) for v in args)\n        if kwds:\n            key += tuple(type(v) for k, v in sorted_items)\n    elif len(key) == 1 and type(key[0]) in fasttypes:\n        return key[0]\n    return _HashedSeq(key)\ndef lru_cache(maxsize=128, typed=False):\n    \"\"\"Least-recently-used cache decorator.\n    If *maxsize* is set to None, the LRU features are disabled and the cache\n    can grow without bound.\n    If *typed* is True, arguments of different types will be cached separately.\n    For example, f(3.0) and f(3) will be treated as distinct calls with\n    distinct results.\n    Arguments to the cached function must be hashable.\n    View the cache statistics named tuple (hits, misses, maxsize, currsize)\n    with f.cache_info().  Clear the cache and statistics with f.cache_clear().\n    Access the underlying function with f.__wrapped__.\n    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used\n    \"\"\"\n    sentinel = object()          # unique object used to signal cache misses\n    make_key = _make_key         # build a key from the function arguments\n    PREV, NEXT, KEY, RESULT = 0, 1, 2, 3   # names for the link fields\n    def decorating_function(user_function):\n        cache = {}\n        hits = misses = currsize = 0\n        full = False\n        cache_get = cache.get    # bound method to lookup a key or return None\n        lock = Lock()            # because linkedlist updates aren't threadsafe\n        root = []                # root of the circular doubly linked list\n        root[:] = [root, root, None, None]     # initialize by pointing to self\n        if maxsize == 0:\n            def wrapper(*args, **kwds):\n                nonlocal misses\n                result = user_function(*args, **kwds)\n                misses += 1\n                return result\n        elif maxsize is None:\n            def wrapper(*args, **kwds):\n                nonlocal hits, misses, currsize\n                key = make_key(args, kwds, typed)\n                result = cache_get(key, sentinel)\n                if result is not sentinel:\n                    hits += 1\n                    return result\n                result = user_function(*args, **kwds)\n                cache[key] = result\n                misses += 1\n                currsize += 1\n                return result\n        else:\n            def wrapper(*args, **kwds):\n                nonlocal root, hits, misses, currsize, full\n                key = make_key(args, kwds, typed)\n                with lock:\n                    link = cache_get(key)\n                    if link is not None:\n                        link_prev, link_next, key, result = link\n                        link_prev[NEXT] = link_next\n                        link_next[PREV] = link_prev\n                        last = root[PREV]\n                        last[NEXT] = root[PREV] = link\n                        link[PREV] = last\n                        link[NEXT] = root\n                        hits += 1\n                        return result\n                result = user_function(*args, **kwds)\n                with lock:\n                    if key in cache:\n                        pass\n                    elif full:\n                        root[KEY] = key\n                        root[RESULT] = result\n                        cache[key] = root\n                        root = root[NEXT]\n                        del cache[root[KEY]]\n                        root[KEY] = root[RESULT] = None\n                    else:\n                        last = root[PREV]\n                        link = [last, root, key, result]\n                        cache[key] = last[NEXT] = root[PREV] = link\n                        currsize += 1\n                        full = (currsize == maxsize)\n                    misses += 1\n                return result\n        def cache_info():\n            \"\"\"Report cache statistics\"\"\"\n            with lock:\n                return _CacheInfo(hits, misses, maxsize, currsize)\n        def cache_clear():\n            \"\"\"Clear the cache and cache statistics\"\"\"\n            nonlocal hits, misses, currsize, full\n            with lock:\n                cache.clear()\n                root[:] = [root, root, None, None]\n                hits = misses = currsize = 0\n                full = False\n        wrapper.cache_info = cache_info\n        wrapper.cache_clear = cache_clear\n        return update_wrapper(wrapper, user_function)\n    return decorating_function\n", "/Lib/sre_parse.py": "\"\"\"Internal support module for sre\"\"\"\nimport sys\nfrom sre_constants import *\nfrom _sre import MAXREPEAT\nSPECIAL_CHARS = \".\\\\[{()*+?^$|\"\nREPEAT_CHARS = \"*+?{\"\nDIGITS = set(\"0123456789\")\nOCTDIGITS = set(\"01234567\")\nHEXDIGITS = set(\"0123456789abcdefABCDEF\")\nWHITESPACE = set(\" \\t\\n\\r\\v\\f\")\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))\n}\nCATEGORIES = {\n    r\"\\A\": (AT, AT_BEGINNING_STRING), # start of string\n    r\"\\b\": (AT, AT_BOUNDARY),\n    r\"\\B\": (AT, AT_NON_BOUNDARY),\n    r\"\\d\": (IN, [(CATEGORY, CATEGORY_DIGIT)]),\n    r\"\\D\": (IN, [(CATEGORY, CATEGORY_NOT_DIGIT)]),\n    r\"\\s\": (IN, [(CATEGORY, CATEGORY_SPACE)]),\n    r\"\\S\": (IN, [(CATEGORY, CATEGORY_NOT_SPACE)]),\n    r\"\\w\": (IN, [(CATEGORY, CATEGORY_WORD)]),\n    r\"\\W\": (IN, [(CATEGORY, CATEGORY_NOT_WORD)]),\n    r\"\\Z\": (AT, AT_END_STRING), # end of string\n}\nFLAGS = {\n    \"i\": SRE_FLAG_IGNORECASE,\n    \"L\": SRE_FLAG_LOCALE,\n    \"m\": SRE_FLAG_MULTILINE,\n    \"s\": SRE_FLAG_DOTALL,\n    \"x\": SRE_FLAG_VERBOSE,\n    \"a\": SRE_FLAG_ASCII,\n    \"t\": SRE_FLAG_TEMPLATE,\n    \"u\": SRE_FLAG_UNICODE,\n}\nclass Pattern:\n    def __init__(self):\n        self.flags = 0\n        self.open = []\n        self.groups = 1\n        self.groupdict = {}\n    def opengroup(self, name=None):\n        gid = self.groups\n        self.groups = gid + 1\n        if name is not None:\n            ogid = self.groupdict.get(name, None)\n            if ogid is not None:\n                raise error(\"redefinition of group name %s as group %d; \"\n                            \"was group %d\" % (repr(name), gid,  ogid))\n            self.groupdict[name] = gid\n        self.open.append(gid)\n        return gid\n    def closegroup(self, gid):\n        self.open.remove(gid)\n    def checkgroup(self, gid):\n        return gid < self.groups and gid not in self.open\nclass SubPattern:\n    def __init__(self, pattern, data=None):\n        self.pattern = pattern\n        if data is None:\n            data = []\n        self.data = data\n        self.width = None\n    def __iter__(self):\n        return iter(self.data)\n    def dump(self, level=0):\n        nl = 1\n        seqtypes = (tuple, list)\n        for op, av in self.data:\n            print(level*\"  \" + op, end=' '); nl = 0\n            if op == \"in\":\n                print(); nl = 1\n                for op, a in av:\n                    print((level+1)*\"  \" + op, a)\n            elif op == \"branch\":\n                print(); nl = 1\n                i = 0\n                for a in av[1]:\n                    if i > 0:\n                        print(level*\"  \" + \"or\")\n                    a.dump(level+1); nl = 1\n                    i = i + 1\n            elif isinstance(av, seqtypes):\n                for a in av:\n                    if isinstance(a, SubPattern):\n                        if not nl: print()\n                        a.dump(level+1); nl = 1\n                    else:\n                        print(a, end=' ') ; nl = 0\n            else:\n                print(av, end=' ') ; nl = 0\n            if not nl: print()\n    def __repr__(self):\n        return repr(self.data)\n    def __len__(self):\n        return len(self.data)\n    def __delitem__(self, index):\n        del self.data[index]\n    def __getitem__(self, index):\n        if isinstance(index, slice):\n            return SubPattern(self.pattern, self.data[index])\n        return self.data[index]\n    def __setitem__(self, index, code):\n        self.data[index] = code\n    def insert(self, index, code):\n        self.data.insert(index, code)\n    def append(self, code):\n        self.data.append(code)\n    def getwidth(self):\n        if self.width:\n            return self.width\n        lo = hi = 0\n        UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)\n        REPEATCODES = (MIN_REPEAT, MAX_REPEAT)\n        for op, av in self.data:\n            if op is BRANCH:\n                i = sys.maxsize\n                j = 0\n                for av in av[1]:\n                    l, h = av.getwidth()\n                    i = min(i, l)\n                    j = max(j, h)\n                lo = lo + i\n                hi = hi + j\n            elif op is CALL:\n                i, j = av.getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op is SUBPATTERN:\n                i, j = av[1].getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op in REPEATCODES:\n                i, j = av[2].getwidth()\n                lo = lo + int(i) * av[0]\n                hi = hi + int(j) * av[1]\n            elif op in UNITCODES:\n                lo = lo + 1\n                hi = hi + 1\n            elif op == SUCCESS:\n                break\n        self.width = int(min(lo, sys.maxsize)), int(min(hi, sys.maxsize))\n        return self.width\nclass Tokenizer:\n    def __init__(self, string):\n        self.istext = isinstance(string, str)\n        self.string = string\n        self.index = 0\n        self.__next()\n    def __next(self):\n        if self.index >= len(self.string):\n            self.next = None\n            return\n        char = self.string[self.index:self.index+1]\n        if char and not self.istext:\n            char = chr(char[0])\n        if char == \"\\\\\":\n            try:\n                c = self.string[self.index + 1]\n            except IndexError:\n                raise error(\"bogus escape (end of line)\")\n            if not self.istext:\n                c = chr(c)\n            char = char + c\n        self.index = self.index + len(char)\n        self.next = char\n    def match(self, char, skip=1):\n        if char == self.next:\n            if skip:\n                self.__next()\n            return 1\n        return 0\n    def get(self):\n        this = self.next\n        self.__next()\n        return this\n    def getwhile(self, n, charset):\n        result = ''\n        for _ in range(n):\n            c = self.next\n            if c not in charset:\n                break\n            result += c\n            self.__next()\n        return result\n    def tell(self):\n        return self.index, self.next\n    def seek(self, index):\n        self.index, self.next = index\ndef isident(char):\n    return \"a\" <= char <= \"z\" or \"A\" <= char <= \"Z\" or char == \"_\"\ndef isdigit(char):\n    return \"0\" <= char <= \"9\"\ndef isname(name):\n    if not isident(name[0]):\n        return False\n    for char in name[1:]:\n        if not isident(char) and not isdigit(char):\n            return False\n    return True\ndef _class_escape(source, escape):\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    code = CATEGORIES.get(escape)\n    if code and code[0] == IN:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise ValueError\n            return LITERAL, int(escape[2:], 16) & 0xff\n        elif c == \"u\" and source.istext:\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise ValueError\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise ValueError\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c in OCTDIGITS:\n            escape += source.getwhile(2, OCTDIGITS)\n            return LITERAL, int(escape[1:], 8) & 0xff\n        elif c in DIGITS:\n            raise ValueError\n        if len(escape) == 2:\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise error(\"bogus escape: %s\" % repr(escape))\ndef _escape(source, escape, state):\n    code = CATEGORIES.get(escape)\n    if code:\n        return code\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise ValueError\n            return LITERAL, int(escape[2:], 16) & 0xff\n        elif c == \"u\" and source.istext:\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise ValueError\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise ValueError\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c == \"0\":\n            escape += source.getwhile(2, OCTDIGITS)\n            return LITERAL, int(escape[1:], 8) & 0xff\n        elif c in DIGITS:\n            if source.next in DIGITS:\n                escape = escape + source.get()\n                if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and\n                    source.next in OCTDIGITS):\n                    escape = escape + source.get()\n                    return LITERAL, int(escape[1:], 8) & 0xff\n            group = int(escape[1:])\n            if group < state.groups:\n                if not state.checkgroup(group):\n                    raise error(\"cannot refer to open group\")\n                return GROUPREF, group\n            raise ValueError\n        if len(escape) == 2:\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise error(\"bogus escape: %s\" % repr(escape))\ndef _parse_sub(source, state, nested=1):\n    items = []\n    itemsappend = items.append\n    sourcematch = source.match\n    while 1:\n        itemsappend(_parse(source, state))\n        if sourcematch(\"|\"):\n            continue\n        if not nested:\n            break\n        if not source.next or sourcematch(\")\", 0):\n            break\n        else:\n            raise error(\"pattern not properly closed\")\n    if len(items) == 1:\n        return items[0]\n    subpattern = SubPattern(state)\n    subpatternappend = subpattern.append\n    while 1:\n        prefix = None\n        for item in items:\n            if not item:\n                break\n            if prefix is None:\n                prefix = item[0]\n            elif item[0] != prefix:\n                break\n        else:\n            for item in items:\n                del item[0]\n            subpatternappend(prefix)\n            continue # check next one\n        break\n    for item in items:\n        if len(item) != 1 or item[0][0] != LITERAL:\n            break\n    else:\n        set = []\n        setappend = set.append\n        for item in items:\n            setappend(item[0])\n        subpatternappend((IN, set))\n        return subpattern\n    subpattern.append((BRANCH, (None, items)))\n    return subpattern\ndef _parse_sub_cond(source, state, condgroup):\n    item_yes = _parse(source, state)\n    if source.match(\"|\"):\n        item_no = _parse(source, state)\n        if source.match(\"|\"):\n            raise error(\"conditional backref with more than two branches\")\n    else:\n        item_no = None\n    if source.next and not source.match(\")\", 0):\n        raise error(\"pattern not properly closed\")\n    subpattern = SubPattern(state)\n    subpattern.append((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))\n    return subpattern\n_PATTERNENDERS = set(\"|)\")\n_ASSERTCHARS = set(\"=!<\")\n_LOOKBEHINDASSERTCHARS = set(\"=!\")\n_REPEATCODES = set([MIN_REPEAT, MAX_REPEAT])\ndef _parse(source, state):\n    subpattern = SubPattern(state)\n    subpatternappend = subpattern.append\n    sourceget = source.get\n    sourcematch = source.match\n    _len = len\n    PATTERNENDERS = _PATTERNENDERS\n    ASSERTCHARS = _ASSERTCHARS\n    LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS\n    REPEATCODES = _REPEATCODES\n    while 1:\n        if source.next in PATTERNENDERS:\n            break # end of subpattern\n        this = sourceget()\n        if this is None:\n            break # end of pattern\n        if state.flags & SRE_FLAG_VERBOSE:\n            if this in WHITESPACE:\n                continue\n            if this == \"#\":\n                while 1:\n                    this = sourceget()\n                    if this in (None, \"\\n\"):\n                        break\n                continue\n        if this and this[0] not in SPECIAL_CHARS:\n            subpatternappend((LITERAL, ord(this)))\n        elif this == \"[\":\n            set = []\n            setappend = set.append\n            if sourcematch(\"^\"):\n                setappend((NEGATE, None))\n            start = set[:]\n            while 1:\n                this = sourceget()\n                if this == \"]\" and set != start:\n                    break\n                elif this and this[0] == \"\\\\\":\n                    code1 = _class_escape(source, this)\n                elif this:\n                    code1 = LITERAL, ord(this)\n                else:\n                    raise error(\"unexpected end of regular expression\")\n                if sourcematch(\"-\"):\n                    this = sourceget()\n                    if this == \"]\":\n                        if code1[0] is IN:\n                            code1 = code1[1][0]\n                        setappend(code1)\n                        setappend((LITERAL, ord(\"-\")))\n                        break\n                    elif this:\n                        if this[0] == \"\\\\\":\n                            code2 = _class_escape(source, this)\n                        else:\n                            code2 = LITERAL, ord(this)\n                        if code1[0] != LITERAL or code2[0] != LITERAL:\n                            raise error(\"bad character range\")\n                        lo = code1[1]\n                        hi = code2[1]\n                        if hi < lo:\n                            raise error(\"bad character range\")\n                        setappend((RANGE, (lo, hi)))\n                    else:\n                        raise error(\"unexpected end of regular expression\")\n                else:\n                    if code1[0] is IN:\n                        code1 = code1[1][0]\n                    setappend(code1)\n            if _len(set)==1 and set[0][0] is LITERAL:\n                subpatternappend(set[0]) # optimization\n            elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:\n                subpatternappend((NOT_LITERAL, set[1][1])) # optimization\n            else:\n                subpatternappend((IN, set))\n        elif this and this[0] in REPEAT_CHARS:\n            if this == \"?\":\n                min, max = 0, 1\n            elif this == \"*\":\n                min, max = 0, MAXREPEAT\n            elif this == \"+\":\n                min, max = 1, MAXREPEAT\n            elif this == \"{\":\n                if source.next == \"}\":\n                    subpatternappend((LITERAL, ord(this)))\n                    continue\n                here = source.tell()\n                min, max = 0, MAXREPEAT\n                lo = hi = \"\"\n                while source.next in DIGITS:\n                    lo = lo + source.get()\n                if sourcematch(\",\"):\n                    while source.next in DIGITS:\n                        hi = hi + sourceget()\n                else:\n                    hi = lo\n                if not sourcematch(\"}\"):\n                    subpatternappend((LITERAL, ord(this)))\n                    source.seek(here)\n                    continue\n                if lo:\n                    min = int(lo)\n                    if min >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                if hi:\n                    max = int(hi)\n                    if max >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                    if max < min:\n                        raise error(\"bad repeat interval\")\n            else:\n                raise error(\"not supported\")\n            if subpattern:\n                item = subpattern[-1:]\n            else:\n                item = None\n            if not item or (_len(item) == 1 and item[0][0] == AT):\n                raise error(\"nothing to repeat\")\n            if item[0][0] in REPEATCODES:\n                raise error(\"multiple repeat\")\n            if sourcematch(\"?\"):\n                subpattern[-1] = (MIN_REPEAT, (min, max, item))\n            else:\n                subpattern[-1] = (MAX_REPEAT, (min, max, item))\n        elif this == \".\":\n            subpatternappend((ANY, None))\n        elif this == \"(\":\n            group = 1\n            name = None\n            condgroup = None\n            if sourcematch(\"?\"):\n                group = 0\n                if sourcematch(\"P\"):\n                    if sourcematch(\"<\"):\n                        name = \"\"\n                        while 1:\n                            char = sourceget()\n                            if char is None:\n                                raise error(\"unterminated name\")\n                            if char == \">\":\n                                break\n                            name = name + char\n                        group = 1\n                        if not name:\n                            raise error(\"missing group name\")\n                        if not isname(name):\n                            raise error(\"bad character in group name\")\n                    elif sourcematch(\"=\"):\n                        name = \"\"\n                        while 1:\n                            char = sourceget()\n                            if char is None:\n                                raise error(\"unterminated name\")\n                            if char == \")\":\n                                break\n                            name = name + char\n                        if not name:\n                            raise error(\"missing group name\")\n                        if not isname(name):\n                            raise error(\"bad character in group name\")\n                        gid = state.groupdict.get(name)\n                        if gid is None:\n                            raise error(\"unknown group name\")\n                        subpatternappend((GROUPREF, gid))\n                        continue\n                    else:\n                        char = sourceget()\n                        if char is None:\n                            raise error(\"unexpected end of pattern\")\n                        raise error(\"unknown specifier: ?P%s\" % char)\n                elif sourcematch(\":\"):\n                    group = 2\n                elif sourcematch(\"#\"):\n                    while 1:\n                        if source.next is None or source.next == \")\":\n                            break\n                        sourceget()\n                    if not sourcematch(\")\"):\n                        raise error(\"unbalanced parenthesis\")\n                    continue\n                elif source.next in ASSERTCHARS:\n                    char = sourceget()\n                    dir = 1\n                    if char == \"<\":\n                        if source.next not in LOOKBEHINDASSERTCHARS:\n                            raise error(\"syntax error\")\n                        dir = -1 # lookbehind\n                        char = sourceget()\n                    p = _parse_sub(source, state)\n                    if not sourcematch(\")\"):\n                        raise error(\"unbalanced parenthesis\")\n                    if char == \"=\":\n                        subpatternappend((ASSERT, (dir, p)))\n                    else:\n                        subpatternappend((ASSERT_NOT, (dir, p)))\n                    continue\n                elif sourcematch(\"(\"):\n                    condname = \"\"\n                    while 1:\n                        char = sourceget()\n                        if char is None:\n                            raise error(\"unterminated name\")\n                        if char == \")\":\n                            break\n                        condname = condname + char\n                    group = 2\n                    if not condname:\n                        raise error(\"missing group name\")\n                    if isname(condname):\n                        condgroup = state.groupdict.get(condname)\n                        if condgroup is None:\n                            raise error(\"unknown group name\")\n                    else:\n                        try:\n                            condgroup = int(condname)\n                        except ValueError:\n                            raise error(\"bad character in group name\")\n                else:\n                    if not source.next in FLAGS:\n                        raise error(\"unexpected end of pattern\")\n                    while source.next in FLAGS:\n                        state.flags = state.flags | FLAGS[sourceget()]\n            if group:\n                if group == 2:\n                    group = None\n                else:\n                    group = state.opengroup(name)\n                if condgroup:\n                    p = _parse_sub_cond(source, state, condgroup)\n                else:\n                    p = _parse_sub(source, state)\n                if not sourcematch(\")\"):\n                    raise error(\"unbalanced parenthesis\")\n                if group is not None:\n                    state.closegroup(group)\n                subpatternappend((SUBPATTERN, (group, p)))\n            else:\n                while 1:\n                    char = sourceget()\n                    if char is None:\n                        raise error(\"unexpected end of pattern\")\n                    if char == \")\":\n                        break\n                    raise error(\"unknown extension\")\n        elif this == \"^\":\n            subpatternappend((AT, AT_BEGINNING))\n        elif this == \"$\":\n            subpattern.append((AT, AT_END))\n        elif this and this[0] == \"\\\\\":\n            code = _escape(source, this, state)\n            subpatternappend(code)\n        else:\n            raise error(\"parser error\")\n    return subpattern\ndef fix_flags(src, flags):\n    if isinstance(src, str):\n        if not flags & SRE_FLAG_ASCII:\n            flags |= SRE_FLAG_UNICODE\n        elif flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"ASCII and UNICODE flags are incompatible\")\n    else:\n        if flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"can't use UNICODE flag with a bytes pattern\")\n    return flags\ndef parse(str, flags=0, pattern=None):\n    source = Tokenizer(str)\n    if pattern is None:\n        pattern = Pattern()\n    pattern.flags = flags\n    pattern.str = str\n    p = _parse_sub(source, pattern, 0)\n    p.pattern.flags = fix_flags(str, p.pattern.flags)\n    tail = source.get()\n    if tail == \")\":\n        raise error(\"unbalanced parenthesis\")\n    elif tail:\n        raise error(\"bogus characters at end of regular expression\")\n    if flags & SRE_FLAG_DEBUG:\n        p.dump()\n    if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:\n        return parse(str, p.pattern.flags)\n    return p\ndef parse_template(source, pattern):\n    s = Tokenizer(source)\n    sget = s.get\n    p = []\n    a = p.append\n    def literal(literal, p=p, pappend=a):\n        if p and p[-1][0] is LITERAL:\n            p[-1] = LITERAL, p[-1][1] + literal\n        else:\n            pappend((LITERAL, literal))\n    sep = source[:0]\n    if isinstance(sep, str):\n        makechar = chr\n    else:\n        makechar = chr\n    while 1:\n        this = sget()\n        if this is None:\n            break # end of replacement string\n        if this and this[0] == \"\\\\\":\n            c = this[1:2]\n            if c == \"g\":\n                name = \"\"\n                if s.match(\"<\"):\n                    while 1:\n                        char = sget()\n                        if char is None:\n                            raise error(\"unterminated group name\")\n                        if char == \">\":\n                            break\n                        name = name + char\n                if not name:\n                    raise error(\"missing group name\")\n                try:\n                    index = int(name)\n                    if index < 0:\n                        raise error(\"negative group number\")\n                except ValueError:\n                    if not isname(name):\n                        raise error(\"bad character in group name\")\n                    try:\n                        index = pattern.groupindex[name]\n                    except KeyError:\n                        raise IndexError(\"unknown group name\")\n                a((MARK, index))\n            elif c == \"0\":\n                if s.next in OCTDIGITS:\n                    this = this + sget()\n                    if s.next in OCTDIGITS:\n                        this = this + sget()\n                literal(makechar(int(this[1:], 8) & 0xff))\n            elif c in DIGITS:\n                isoctal = False\n                if s.next in DIGITS:\n                    this = this + sget()\n                    if (c in OCTDIGITS and this[2] in OCTDIGITS and\n                        s.next in OCTDIGITS):\n                        this = this + sget()\n                        isoctal = True\n                        literal(makechar(int(this[1:], 8) & 0xff))\n                if not isoctal:\n                    a((MARK, int(this[1:])))\n            else:\n                try:\n                    this = makechar(ESCAPES[this][1])\n                except KeyError:\n                    pass\n                literal(this)\n        else:\n            literal(this)\n    i = 0\n    groups = []\n    groupsappend = groups.append\n    literals = [None] * len(p)\n    if isinstance(source, str):\n        encode = lambda x: x\n    else:\n        encode = lambda x: x.encode('latin-1')\n    for c, s in p:\n        if c is MARK:\n            groupsappend((i, s))\n        else:\n            literals[i] = encode(s)\n        i = i + 1\n    return groups, literals\ndef expand_template(template, match):\n    g = match.group\n    sep = match.string[:0]\n    groups, literals = template\n    literals = literals[:]\n    try:\n        for index, group in groups:\n            literals[index] = s = g(group)\n            if s is None:\n                raise error(\"unmatched group\")\n    except IndexError:\n        raise error(\"invalid group reference\")\n    return sep.join(literals)\n", "/Lib/unittest/test/test_case.py": "import difflib\r\nimport pprint\r\nimport pickle\r\nimport re\r\nimport sys\r\nimport warnings\r\nimport weakref\r\nimport inspect\r\nfrom copy import deepcopy\r\nfrom test import support\r\nimport unittest\r\nfrom .support import (\r\n    TestEquality, TestHashing, LoggingResult,\r\n    ResultWithNoStartTestRunStopTestRun\r\n)\r\nclass Test(object):\r\n    \"Keep these TestCase classes out of the main namespace\"\r\n    class Foo(unittest.TestCase):\r\n        def runTest(self): pass\r\n        def test1(self): pass\r\n    class Bar(Foo):\r\n        def test2(self): pass\r\n    class LoggingTestCase(unittest.TestCase):\r\n        \"\"\"A test case which logs its calls.\"\"\"\r\n        def __init__(self, events):\r\n            super(Test.LoggingTestCase, self).__init__('test')\r\n            self.events = events\r\n        def setUp(self):\r\n            self.events.append('setUp')\r\n        def test(self):\r\n            self.events.append('test')\r\n        def tearDown(self):\r\n            self.events.append('tearDown')\r\nclass Test_TestCase(unittest.TestCase, TestEquality, TestHashing):\r\n    eq_pairs = [(Test.Foo('test1'), Test.Foo('test1'))]\r\n    ne_pairs = [(Test.Foo('test1'), Test.Foo('runTest')),\r\n                (Test.Foo('test1'), Test.Bar('test1')),\r\n                (Test.Foo('test1'), Test.Bar('test2'))]\r\n    def test_init__no_test_name(self):\r\n        class Test(unittest.TestCase):\r\n            def runTest(self): raise MyException()\r\n            def test(self): pass\r\n        self.assertEqual(Test().id()[-13:], '.Test.runTest')\r\n        test = unittest.TestCase()\r\n        test.assertEqual(3, 3)\r\n        with test.assertRaises(test.failureException):\r\n            test.assertEqual(3, 2)\r\n        with self.assertRaises(AttributeError):\r\n            test.run()\r\n    def test_init__test_name__valid(self):\r\n        class Test(unittest.TestCase):\r\n            def runTest(self): raise MyException()\r\n            def test(self): pass\r\n        self.assertEqual(Test('test').id()[-10:], '.Test.test')\r\n    def test_init__test_name__invalid(self):\r\n        class Test(unittest.TestCase):\r\n            def runTest(self): raise MyException()\r\n            def test(self): pass\r\n        try:\r\n            Test('testfoo')\r\n        except ValueError:\r\n            pass\r\n        else:\r\n            self.fail(\"Failed to raise ValueError\")\r\n    def test_countTestCases(self):\r\n        class Foo(unittest.TestCase):\r\n            def test(self): pass\r\n        self.assertEqual(Foo('test').countTestCases(), 1)\r\n    def test_defaultTestResult(self):\r\n        class Foo(unittest.TestCase):\r\n            def runTest(self):\r\n                pass\r\n        result = Foo().defaultTestResult()\r\n        self.assertEqual(type(result), unittest.TestResult)\r\n    def test_run_call_order__error_in_setUp(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        class Foo(Test.LoggingTestCase):\r\n            def setUp(self):\r\n                super(Foo, self).setUp()\r\n                raise RuntimeError('raised by Foo.setUp')\r\n        Foo(events).run(result)\r\n        expected = ['startTest', 'setUp', 'addError', 'stopTest']\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__error_in_setUp_default_result(self):\r\n        events = []\r\n        class Foo(Test.LoggingTestCase):\r\n            def defaultTestResult(self):\r\n                return LoggingResult(self.events)\r\n            def setUp(self):\r\n                super(Foo, self).setUp()\r\n                raise RuntimeError('raised by Foo.setUp')\r\n        Foo(events).run()\r\n        expected = ['startTestRun', 'startTest', 'setUp', 'addError',\r\n                    'stopTest', 'stopTestRun']\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__error_in_test(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        class Foo(Test.LoggingTestCase):\r\n            def test(self):\r\n                super(Foo, self).test()\r\n                raise RuntimeError('raised by Foo.test')\r\n        expected = ['startTest', 'setUp', 'test', 'tearDown',\r\n                    'addError', 'stopTest']\r\n        Foo(events).run(result)\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__error_in_test_default_result(self):\r\n        events = []\r\n        class Foo(Test.LoggingTestCase):\r\n            def defaultTestResult(self):\r\n                return LoggingResult(self.events)\r\n            def test(self):\r\n                super(Foo, self).test()\r\n                raise RuntimeError('raised by Foo.test')\r\n        expected = ['startTestRun', 'startTest', 'setUp', 'test',\r\n                    'tearDown', 'addError', 'stopTest', 'stopTestRun']\r\n        Foo(events).run()\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__failure_in_test(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        class Foo(Test.LoggingTestCase):\r\n            def test(self):\r\n                super(Foo, self).test()\r\n                self.fail('raised by Foo.test')\r\n        expected = ['startTest', 'setUp', 'test', 'tearDown',\r\n                    'addFailure', 'stopTest']\r\n        Foo(events).run(result)\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__failure_in_test_default_result(self):\r\n        class Foo(Test.LoggingTestCase):\r\n            def defaultTestResult(self):\r\n                return LoggingResult(self.events)\r\n            def test(self):\r\n                super(Foo, self).test()\r\n                self.fail('raised by Foo.test')\r\n        expected = ['startTestRun', 'startTest', 'setUp', 'test',\r\n                    'tearDown', 'addFailure', 'stopTest', 'stopTestRun']\r\n        events = []\r\n        Foo(events).run()\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__error_in_tearDown(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        class Foo(Test.LoggingTestCase):\r\n            def tearDown(self):\r\n                super(Foo, self).tearDown()\r\n                raise RuntimeError('raised by Foo.tearDown')\r\n        Foo(events).run(result)\r\n        expected = ['startTest', 'setUp', 'test', 'tearDown', 'addError',\r\n                    'stopTest']\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__error_in_tearDown_default_result(self):\r\n        class Foo(Test.LoggingTestCase):\r\n            def defaultTestResult(self):\r\n                return LoggingResult(self.events)\r\n            def tearDown(self):\r\n                super(Foo, self).tearDown()\r\n                raise RuntimeError('raised by Foo.tearDown')\r\n        events = []\r\n        Foo(events).run()\r\n        expected = ['startTestRun', 'startTest', 'setUp', 'test', 'tearDown',\r\n                    'addError', 'stopTest', 'stopTestRun']\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order_default_result(self):\r\n        class Foo(unittest.TestCase):\r\n            def defaultTestResult(self):\r\n                return ResultWithNoStartTestRunStopTestRun()\r\n            def test(self):\r\n                pass\r\n        Foo('test').run()\r\n    def test_failureException__default(self):\r\n        class Foo(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        self.assertTrue(Foo('test').failureException is AssertionError)\r\n    def test_failureException__subclassing__explicit_raise(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        class Foo(unittest.TestCase):\r\n            def test(self):\r\n                raise RuntimeError()\r\n            failureException = RuntimeError\r\n        self.assertTrue(Foo('test').failureException is RuntimeError)\r\n        Foo('test').run(result)\r\n        expected = ['startTest', 'addFailure', 'stopTest']\r\n        self.assertEqual(events, expected)\r\n    def test_failureException__subclassing__implicit_raise(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        class Foo(unittest.TestCase):\r\n            def test(self):\r\n                self.fail(\"foo\")\r\n            failureException = RuntimeError\r\n        self.assertTrue(Foo('test').failureException is RuntimeError)\r\n        Foo('test').run(result)\r\n        expected = ['startTest', 'addFailure', 'stopTest']\r\n        self.assertEqual(events, expected)\r\n    def test_setUp(self):\r\n        class Foo(unittest.TestCase):\r\n            def runTest(self):\r\n                pass\r\n        Foo().setUp()\r\n    def test_tearDown(self):\r\n        class Foo(unittest.TestCase):\r\n            def runTest(self):\r\n                pass\r\n        Foo().tearDown()\r\n    def test_id(self):\r\n        class Foo(unittest.TestCase):\r\n            def runTest(self):\r\n                pass\r\n        self.assertIsInstance(Foo().id(), str)\r\n    def test_run__uses_defaultTestResult(self):\r\n        events = []\r\n        defaultResult = LoggingResult(events)\r\n        class Foo(unittest.TestCase):\r\n            def test(self):\r\n                events.append('test')\r\n            def defaultTestResult(self):\r\n                return defaultResult\r\n        result = Foo('test').run()\r\n        self.assertIs(result, defaultResult)\r\n        expected = ['startTestRun', 'startTest', 'test', 'addSuccess',\r\n            'stopTest', 'stopTestRun']\r\n        self.assertEqual(events, expected)\r\n    def test_run__returns_given_result(self):\r\n        class Foo(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        result = unittest.TestResult()\r\n        retval = Foo('test').run(result)\r\n        self.assertIs(retval, result)\r\n    def test_call__invoking_an_instance_delegates_to_run(self):\r\n        resultIn = unittest.TestResult()\r\n        resultOut = unittest.TestResult()\r\n        class Foo(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n            def run(self, result):\r\n                self.assertIs(result, resultIn)\r\n                return resultOut\r\n        retval = Foo('test')(resultIn)\r\n        self.assertIs(retval, resultOut)\r\n    def testShortDescriptionWithoutDocstring(self):\r\n        self.assertIsNone(self.shortDescription())\r\n    @unittest.skipIf(sys.flags.optimize >= 2,\r\n                     \"Docstrings are omitted with -O2 and above\")\r\n    def testShortDescriptionWithOneLineDocstring(self):\r\n        \"\"\"Tests shortDescription() for a method with a docstring.\"\"\"\r\n        self.assertEqual(\r\n                self.shortDescription(),\r\n                'Tests shortDescription() for a method with a docstring.')\r\n    @unittest.skipIf(sys.flags.optimize >= 2,\r\n                     \"Docstrings are omitted with -O2 and above\")\r\n    def testShortDescriptionWithMultiLineDocstring(self):\r\n        \"\"\"Tests shortDescription() for a method with a longer docstring.\r\n        This method ensures that only the first line of a docstring is\r\n        returned used in the short description, no matter how long the\r\n        whole thing is.\r\n        \"\"\"\r\n        self.assertEqual(\r\n                self.shortDescription(),\r\n                 'Tests shortDescription() for a method with a longer '\r\n                 'docstring.')\r\n    def testAddTypeEqualityFunc(self):\r\n        class SadSnake(object):\r\n            \"\"\"Dummy class for test_addTypeEqualityFunc.\"\"\"\r\n        s1, s2 = SadSnake(), SadSnake()\r\n        self.assertFalse(s1 == s2)\r\n        def AllSnakesCreatedEqual(a, b, msg=None):\r\n            return type(a) == type(b) == SadSnake\r\n        self.addTypeEqualityFunc(SadSnake, AllSnakesCreatedEqual)\r\n        self.assertEqual(s1, s2)\r\n    def testAssertIs(self):\r\n        thing = object()\r\n        self.assertIs(thing, thing)\r\n        self.assertRaises(self.failureException, self.assertIs, thing, object())\r\n    def testAssertIsNot(self):\r\n        thing = object()\r\n        self.assertIsNot(thing, object())\r\n        self.assertRaises(self.failureException, self.assertIsNot, thing, thing)\r\n    def testAssertIsInstance(self):\r\n        thing = []\r\n        self.assertIsInstance(thing, list)\r\n        self.assertRaises(self.failureException, self.assertIsInstance,\r\n                          thing, dict)\r\n    def testAssertNotIsInstance(self):\r\n        thing = []\r\n        self.assertNotIsInstance(thing, dict)\r\n        self.assertRaises(self.failureException, self.assertNotIsInstance,\r\n                          thing, list)\r\n    def testAssertIn(self):\r\n        animals = {'monkey': 'banana', 'cow': 'grass', 'seal': 'fish'}\r\n        self.assertIn('a', 'abc')\r\n        self.assertIn(2, [1, 2, 3])\r\n        self.assertIn('monkey', animals)\r\n        self.assertNotIn('d', 'abc')\r\n        self.assertNotIn(0, [1, 2, 3])\r\n        self.assertNotIn('otter', animals)\r\n        self.assertRaises(self.failureException, self.assertIn, 'x', 'abc')\r\n        self.assertRaises(self.failureException, self.assertIn, 4, [1, 2, 3])\r\n        self.assertRaises(self.failureException, self.assertIn, 'elephant',\r\n                          animals)\r\n        self.assertRaises(self.failureException, self.assertNotIn, 'c', 'abc')\r\n        self.assertRaises(self.failureException, self.assertNotIn, 1, [1, 2, 3])\r\n        self.assertRaises(self.failureException, self.assertNotIn, 'cow',\r\n                          animals)\r\n    def testAssertDictContainsSubset(self):\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"ignore\", DeprecationWarning)\r\n            self.assertDictContainsSubset({}, {})\r\n            self.assertDictContainsSubset({}, {'a': 1})\r\n            self.assertDictContainsSubset({'a': 1}, {'a': 1})\r\n            self.assertDictContainsSubset({'a': 1}, {'a': 1, 'b': 2})\r\n            self.assertDictContainsSubset({'a': 1, 'b': 2}, {'a': 1, 'b': 2})\r\n            with self.assertRaises(self.failureException):\r\n                self.assertDictContainsSubset({1: \"one\"}, {})\r\n            with self.assertRaises(self.failureException):\r\n                self.assertDictContainsSubset({'a': 2}, {'a': 1})\r\n            with self.assertRaises(self.failureException):\r\n                self.assertDictContainsSubset({'c': 1}, {'a': 1})\r\n            with self.assertRaises(self.failureException):\r\n                self.assertDictContainsSubset({'a': 1, 'c': 1}, {'a': 1})\r\n            with self.assertRaises(self.failureException):\r\n                self.assertDictContainsSubset({'a': 1, 'c': 1}, {'a': 1})\r\n            one = ''.join(chr(i) for i in range(255))\r\n            with self.assertRaises(self.failureException):\r\n                self.assertDictContainsSubset({'foo': one}, {'foo': '\\uFFFD'})\r\n    def testAssertEqual(self):\r\n        equal_pairs = [\r\n                ((), ()),\r\n                ({}, {}),\r\n                ([], []),\r\n                (set(), set()),\r\n                (frozenset(), frozenset())]\r\n        for a, b in equal_pairs:\r\n            try:\r\n                self.assertEqual(a, b)\r\n            except self.failureException:\r\n                self.fail('assertEqual(%r, %r) failed' % (a, b))\r\n            try:\r\n                self.assertEqual(a, b, msg='foo')\r\n            except self.failureException:\r\n                self.fail('assertEqual(%r, %r) with msg= failed' % (a, b))\r\n            try:\r\n                self.assertEqual(a, b, 'foo')\r\n            except self.failureException:\r\n                self.fail('assertEqual(%r, %r) with third parameter failed' %\r\n                          (a, b))\r\n        unequal_pairs = [\r\n               ((), []),\r\n               ({}, set()),\r\n               (set([4,1]), frozenset([4,2])),\r\n               (frozenset([4,5]), set([2,3])),\r\n               (set([3,4]), set([5,4]))]\r\n        for a, b in unequal_pairs:\r\n            self.assertRaises(self.failureException, self.assertEqual, a, b)\r\n            self.assertRaises(self.failureException, self.assertEqual, a, b,\r\n                              'foo')\r\n            self.assertRaises(self.failureException, self.assertEqual, a, b,\r\n                              msg='foo')\r\n    def testEquality(self):\r\n        self.assertListEqual([], [])\r\n        self.assertTupleEqual((), ())\r\n        self.assertSequenceEqual([], ())\r\n        a = [0, 'a', []]\r\n        b = []\r\n        self.assertRaises(unittest.TestCase.failureException,\r\n                          self.assertListEqual, a, b)\r\n        self.assertRaises(unittest.TestCase.failureException,\r\n                          self.assertListEqual, tuple(a), tuple(b))\r\n        self.assertRaises(unittest.TestCase.failureException,\r\n                          self.assertSequenceEqual, a, tuple(b))\r\n        b.extend(a)\r\n        self.assertListEqual(a, b)\r\n        self.assertTupleEqual(tuple(a), tuple(b))\r\n        self.assertSequenceEqual(a, tuple(b))\r\n        self.assertSequenceEqual(tuple(a), b)\r\n        self.assertRaises(self.failureException, self.assertListEqual,\r\n                          a, tuple(b))\r\n        self.assertRaises(self.failureException, self.assertTupleEqual,\r\n                          tuple(a), b)\r\n        self.assertRaises(self.failureException, self.assertListEqual, None, b)\r\n        self.assertRaises(self.failureException, self.assertTupleEqual, None,\r\n                          tuple(b))\r\n        self.assertRaises(self.failureException, self.assertSequenceEqual,\r\n                          None, tuple(b))\r\n        self.assertRaises(self.failureException, self.assertListEqual, 1, 1)\r\n        self.assertRaises(self.failureException, self.assertTupleEqual, 1, 1)\r\n        self.assertRaises(self.failureException, self.assertSequenceEqual,\r\n                          1, 1)\r\n        self.assertDictEqual({}, {})\r\n        c = { 'x': 1 }\r\n        d = {}\r\n        self.assertRaises(unittest.TestCase.failureException,\r\n                          self.assertDictEqual, c, d)\r\n        d.update(c)\r\n        self.assertDictEqual(c, d)\r\n        d['x'] = 0\r\n        self.assertRaises(unittest.TestCase.failureException,\r\n                          self.assertDictEqual, c, d, 'These are unequal')\r\n        self.assertRaises(self.failureException, self.assertDictEqual, None, d)\r\n        self.assertRaises(self.failureException, self.assertDictEqual, [], d)\r\n        self.assertRaises(self.failureException, self.assertDictEqual, 1, 1)\r\n    def testAssertSequenceEqualMaxDiff(self):\r\n        self.assertEqual(self.maxDiff, 80*8)\r\n        seq1 = 'a' + 'x' * 80**2\r\n        seq2 = 'b' + 'x' * 80**2\r\n        diff = '\\n'.join(difflib.ndiff(pprint.pformat(seq1).splitlines(),\r\n                                       pprint.pformat(seq2).splitlines()))\r\n        omitted = unittest.case.DIFF_OMITTED % (len(diff) + 1,)\r\n        self.maxDiff = len(diff)//2\r\n        try:\r\n            self.assertSequenceEqual(seq1, seq2)\r\n        except self.failureException as e:\r\n            msg = e.args[0]\r\n        else:\r\n            self.fail('assertSequenceEqual did not fail.')\r\n        self.assertTrue(len(msg) < len(diff))\r\n        self.assertIn(omitted, msg)\r\n        self.maxDiff = len(diff) * 2\r\n        try:\r\n            self.assertSequenceEqual(seq1, seq2)\r\n        except self.failureException as e:\r\n            msg = e.args[0]\r\n        else:\r\n            self.fail('assertSequenceEqual did not fail.')\r\n        self.assertTrue(len(msg) > len(diff))\r\n        self.assertNotIn(omitted, msg)\r\n        self.maxDiff = None\r\n        try:\r\n            self.assertSequenceEqual(seq1, seq2)\r\n        except self.failureException as e:\r\n            msg = e.args[0]\r\n        else:\r\n            self.fail('assertSequenceEqual did not fail.')\r\n        self.assertTrue(len(msg) > len(diff))\r\n        self.assertNotIn(omitted, msg)\r\n    def testTruncateMessage(self):\r\n        self.maxDiff = 1\r\n        message = self._truncateMessage('foo', 'bar')\r\n        omitted = unittest.case.DIFF_OMITTED % len('bar')\r\n        self.assertEqual(message, 'foo' + omitted)\r\n        self.maxDiff = None\r\n        message = self._truncateMessage('foo', 'bar')\r\n        self.assertEqual(message, 'foobar')\r\n        self.maxDiff = 4\r\n        message = self._truncateMessage('foo', 'bar')\r\n        self.assertEqual(message, 'foobar')\r\n    def testAssertDictEqualTruncates(self):\r\n        test = unittest.TestCase('assertEqual')\r\n        def truncate(msg, diff):\r\n            return 'foo'\r\n        test._truncateMessage = truncate\r\n        try:\r\n            test.assertDictEqual({}, {1: 0})\r\n        except self.failureException as e:\r\n            self.assertEqual(str(e), 'foo')\r\n        else:\r\n            self.fail('assertDictEqual did not fail')\r\n    def testAssertMultiLineEqualTruncates(self):\r\n        test = unittest.TestCase('assertEqual')\r\n        def truncate(msg, diff):\r\n            return 'foo'\r\n        test._truncateMessage = truncate\r\n        try:\r\n            test.assertMultiLineEqual('foo', 'bar')\r\n        except self.failureException as e:\r\n            self.assertEqual(str(e), 'foo')\r\n        else:\r\n            self.fail('assertMultiLineEqual did not fail')\r\n    def testAssertEqual_diffThreshold(self):\r\n        self.assertEqual(self._diffThreshold, 2**16)\r\n        self.maxDiff = None\r\n        old_threshold = self._diffThreshold\r\n        self._diffThreshold = 2**8\r\n        self.addCleanup(lambda: setattr(self, '_diffThreshold', old_threshold))\r\n        s = 'x' * (2**7)\r\n        with self.assertRaises(self.failureException) as cm:\r\n            self.assertEqual(s + 'a', s + 'b')\r\n        self.assertIn('^', str(cm.exception))\r\n        self.assertEqual(s + 'a', s + 'a')\r\n        s = 'x' * (2**9)\r\n        def explodingTruncation(message, diff):\r\n            raise SystemError('this should not be raised')\r\n        old_truncate = self._truncateMessage\r\n        self._truncateMessage = explodingTruncation\r\n        self.addCleanup(lambda: setattr(self, '_truncateMessage', old_truncate))\r\n        s1, s2 = s + 'a', s + 'b'\r\n        with self.assertRaises(self.failureException) as cm:\r\n            self.assertEqual(s1, s2)\r\n        self.assertNotIn('^', str(cm.exception))\r\n        self.assertEqual(str(cm.exception), '%r != %r' % (s1, s2))\r\n        self.assertEqual(s + 'a', s + 'a')\r\n    def testAssertCountEqual(self):\r\n        a = object()\r\n        self.assertCountEqual([1, 2, 3], [3, 2, 1])\r\n        self.assertCountEqual(['foo', 'bar', 'baz'], ['bar', 'baz', 'foo'])\r\n        self.assertCountEqual([a, a, 2, 2, 3], (a, 2, 3, a, 2))\r\n        self.assertCountEqual([1, \"2\", \"a\", \"a\"], [\"a\", \"2\", True, \"a\"])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [1, 2] + [3] * 100, [1] * 100 + [2, 3])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [1, \"2\", \"a\", \"a\"], [\"a\", \"2\", True, 1])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [10], [10, 11])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [10, 11], [10])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [10, 11, 10], [10, 11])\r\n        self.assertCountEqual([[1, 2], [3, 4], 0], [False, [3, 4], [1, 2]])\r\n        self.assertCountEqual(iter([1, 2, [], 3, 4]),\r\n                              iter([1, 2, [], 3, 4]))\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [], [divmod, 'x', 1, 5j, 2j, frozenset()])\r\n        self.assertCountEqual([{'a': 1}, {'b': 2}], [{'b': 2}, {'a': 1}])\r\n        self.assertCountEqual([1, 'x', divmod, []], [divmod, [], 'x', 1])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [], [divmod, [], 'x', 1, 5j, 2j, set()])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [[1]], [[2]])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [1, 1, 2], [2, 1])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [1, 1, \"2\", \"a\", \"a\"], [\"2\", \"2\", True, \"a\"])\r\n        self.assertRaises(self.failureException, self.assertCountEqual,\r\n                          [1, {'b': 2}, None, True], [{'b': 2}, True, None])\r\n        a = [{2,4}, {1,2}]\r\n        b = a[::-1]\r\n        self.assertCountEqual(a, b)\r\n        diffs = set(unittest.util._count_diff_all_purpose('aaabccd', 'abbbcce'))\r\n        expected = {(3,1,'a'), (1,3,'b'), (1,0,'d'), (0,1,'e')}\r\n        self.assertEqual(diffs, expected)\r\n        diffs = unittest.util._count_diff_all_purpose([[]], [])\r\n        self.assertEqual(diffs, [(1, 0, [])])\r\n        diffs = set(unittest.util._count_diff_hashable('aaabccd', 'abbbcce'))\r\n        expected = {(3,1,'a'), (1,3,'b'), (1,0,'d'), (0,1,'e')}\r\n        self.assertEqual(diffs, expected)\r\n    def testAssertSetEqual(self):\r\n        set1 = set()\r\n        set2 = set()\r\n        self.assertSetEqual(set1, set2)\r\n        self.assertRaises(self.failureException, self.assertSetEqual, None, set2)\r\n        self.assertRaises(self.failureException, self.assertSetEqual, [], set2)\r\n        self.assertRaises(self.failureException, self.assertSetEqual, set1, None)\r\n        self.assertRaises(self.failureException, self.assertSetEqual, set1, [])\r\n        set1 = set(['a'])\r\n        set2 = set()\r\n        self.assertRaises(self.failureException, self.assertSetEqual, set1, set2)\r\n        set1 = set(['a'])\r\n        set2 = set(['a'])\r\n        self.assertSetEqual(set1, set2)\r\n        set1 = set(['a'])\r\n        set2 = set(['a', 'b'])\r\n        self.assertRaises(self.failureException, self.assertSetEqual, set1, set2)\r\n        set1 = set(['a'])\r\n        set2 = frozenset(['a', 'b'])\r\n        self.assertRaises(self.failureException, self.assertSetEqual, set1, set2)\r\n        set1 = set(['a', 'b'])\r\n        set2 = frozenset(['a', 'b'])\r\n        self.assertSetEqual(set1, set2)\r\n        set1 = set()\r\n        set2 = \"foo\"\r\n        self.assertRaises(self.failureException, self.assertSetEqual, set1, set2)\r\n        self.assertRaises(self.failureException, self.assertSetEqual, set2, set1)\r\n        set1 = set([(0, 1), (2, 3)])\r\n        set2 = set([(4, 5)])\r\n        self.assertRaises(self.failureException, self.assertSetEqual, set1, set2)\r\n    def testInequality(self):\r\n        self.assertGreater(2, 1)\r\n        self.assertGreaterEqual(2, 1)\r\n        self.assertGreaterEqual(1, 1)\r\n        self.assertLess(1, 2)\r\n        self.assertLessEqual(1, 2)\r\n        self.assertLessEqual(1, 1)\r\n        self.assertRaises(self.failureException, self.assertGreater, 1, 2)\r\n        self.assertRaises(self.failureException, self.assertGreater, 1, 1)\r\n        self.assertRaises(self.failureException, self.assertGreaterEqual, 1, 2)\r\n        self.assertRaises(self.failureException, self.assertLess, 2, 1)\r\n        self.assertRaises(self.failureException, self.assertLess, 1, 1)\r\n        self.assertRaises(self.failureException, self.assertLessEqual, 2, 1)\r\n        self.assertGreater(1.1, 1.0)\r\n        self.assertGreaterEqual(1.1, 1.0)\r\n        self.assertGreaterEqual(1.0, 1.0)\r\n        self.assertLess(1.0, 1.1)\r\n        self.assertLessEqual(1.0, 1.1)\r\n        self.assertLessEqual(1.0, 1.0)\r\n        self.assertRaises(self.failureException, self.assertGreater, 1.0, 1.1)\r\n        self.assertRaises(self.failureException, self.assertGreater, 1.0, 1.0)\r\n        self.assertRaises(self.failureException, self.assertGreaterEqual, 1.0, 1.1)\r\n        self.assertRaises(self.failureException, self.assertLess, 1.1, 1.0)\r\n        self.assertRaises(self.failureException, self.assertLess, 1.0, 1.0)\r\n        self.assertRaises(self.failureException, self.assertLessEqual, 1.1, 1.0)\r\n        self.assertGreater('bug', 'ant')\r\n        self.assertGreaterEqual('bug', 'ant')\r\n        self.assertGreaterEqual('ant', 'ant')\r\n        self.assertLess('ant', 'bug')\r\n        self.assertLessEqual('ant', 'bug')\r\n        self.assertLessEqual('ant', 'ant')\r\n        self.assertRaises(self.failureException, self.assertGreater, 'ant', 'bug')\r\n        self.assertRaises(self.failureException, self.assertGreater, 'ant', 'ant')\r\n        self.assertRaises(self.failureException, self.assertGreaterEqual, 'ant', 'bug')\r\n        self.assertRaises(self.failureException, self.assertLess, 'bug', 'ant')\r\n        self.assertRaises(self.failureException, self.assertLess, 'ant', 'ant')\r\n        self.assertRaises(self.failureException, self.assertLessEqual, 'bug', 'ant')\r\n        self.assertGreater(b'bug', b'ant')\r\n        self.assertGreaterEqual(b'bug', b'ant')\r\n        self.assertGreaterEqual(b'ant', b'ant')\r\n        self.assertLess(b'ant', b'bug')\r\n        self.assertLessEqual(b'ant', b'bug')\r\n        self.assertLessEqual(b'ant', b'ant')\r\n        self.assertRaises(self.failureException, self.assertGreater, b'ant', b'bug')\r\n        self.assertRaises(self.failureException, self.assertGreater, b'ant', b'ant')\r\n        self.assertRaises(self.failureException, self.assertGreaterEqual, b'ant',\r\n                          b'bug')\r\n        self.assertRaises(self.failureException, self.assertLess, b'bug', b'ant')\r\n        self.assertRaises(self.failureException, self.assertLess, b'ant', b'ant')\r\n        self.assertRaises(self.failureException, self.assertLessEqual, b'bug', b'ant')\r\n    def testAssertMultiLineEqual(self):\r\n        sample_text = \"\"\"\\\r\nhttp://www.python.org/doc/2.3/lib/module-unittest.html\r\ntest case\r\n    A test case is the smallest unit of testing. [...]\r\n\"\"\"\r\n        revised_sample_text = \"\"\"\\\r\nhttp://www.python.org/doc/2.4.1/lib/module-unittest.html\r\ntest case\r\n    A test case is the smallest unit of testing. [...] You may provide your\r\n    own implementation that does not subclass from TestCase, of course.\r\n\"\"\"\r\n        sample_text_error = \"\"\"\\\r\n- http://www.python.org/doc/2.3/lib/module-unittest.html\r\n?                             ^\r\n+ http://www.python.org/doc/2.4.1/lib/module-unittest.html\r\n?                             ^^^\r\n  test case\r\n-     A test case is the smallest unit of testing. [...]\r\n+     A test case is the smallest unit of testing. [...] You may provide your\r\n?                                                       +++++++++++++++++++++\r\n+     own implementation that does not subclass from TestCase, of course.\r\n\"\"\"\r\n        self.maxDiff = None\r\n        try:\r\n            self.assertMultiLineEqual(sample_text, revised_sample_text)\r\n        except self.failureException as e:\r\n            error = str(e).split('\\n', 1)[1]\r\n            self.assertTrue(sample_text_error == error)\r\n    def testAsertEqualSingleLine(self):\r\n        sample_text = \"laden swallows fly slowly\"\r\n        revised_sample_text = \"unladen swallows fly quickly\"\r\n        sample_text_error = \"\"\"\\\r\n- laden swallows fly slowly\r\n?                    ^^^^\r\n+ unladen swallows fly quickly\r\n? ++                   ^^^^^\r\n\"\"\"\r\n        try:\r\n            self.assertEqual(sample_text, revised_sample_text)\r\n        except self.failureException as e:\r\n            error = str(e).split('\\n', 1)[1]\r\n            self.assertTrue(sample_text_error == error)\r\n    def testAssertIsNone(self):\r\n        self.assertIsNone(None)\r\n        self.assertRaises(self.failureException, self.assertIsNone, False)\r\n        self.assertIsNotNone('DjZoPloGears on Rails')\r\n        self.assertRaises(self.failureException, self.assertIsNotNone, None)\r\n    def testAssertRegex(self):\r\n        self.assertRegex('asdfabasdf', r'ab+')\r\n        self.assertRaises(self.failureException, self.assertRegex,\r\n                          'saaas', r'aaaa')\r\n    def testAssertRaisesRegex(self):\r\n        class ExceptionMock(Exception):\r\n            pass\r\n        def Stub():\r\n            raise ExceptionMock('We expect')\r\n        self.assertRaisesRegex(ExceptionMock, re.compile('expect$'), Stub)\r\n        self.assertRaisesRegex(ExceptionMock, 'expect$', Stub)\r\n    def testAssertNotRaisesRegex(self):\r\n        self.assertRaisesRegex(\r\n                self.failureException, '^Exception not raised by <lambda>$',\r\n                self.assertRaisesRegex, Exception, re.compile('x'),\r\n                lambda: None)\r\n        self.assertRaisesRegex(\r\n                self.failureException, '^Exception not raised by <lambda>$',\r\n                self.assertRaisesRegex, Exception, 'x',\r\n                lambda: None)\r\n    def testAssertRaisesRegexMismatch(self):\r\n        def Stub():\r\n            raise Exception('Unexpected')\r\n        self.assertRaisesRegex(\r\n                self.failureException,\r\n                r'\"\\^Expected\\$\" does not match \"Unexpected\"',\r\n                self.assertRaisesRegex, Exception, '^Expected$',\r\n                Stub)\r\n        self.assertRaisesRegex(\r\n                self.failureException,\r\n                r'\"\\^Expected\\$\" does not match \"Unexpected\"',\r\n                self.assertRaisesRegex, Exception,\r\n                re.compile('^Expected$'), Stub)\r\n    def testAssertRaisesExcValue(self):\r\n        class ExceptionMock(Exception):\r\n            pass\r\n        def Stub(foo):\r\n            raise ExceptionMock(foo)\r\n        v = \"particular value\"\r\n        ctx = self.assertRaises(ExceptionMock)\r\n        with ctx:\r\n            Stub(v)\r\n        e = ctx.exception\r\n        self.assertIsInstance(e, ExceptionMock)\r\n        self.assertEqual(e.args[0], v)\r\n    def testAssertWarnsCallable(self):\r\n        def _runtime_warn():\r\n            warnings.warn(\"foo\", RuntimeWarning)\r\n        self.assertWarns(RuntimeWarning, _runtime_warn)\r\n        self.assertWarns(RuntimeWarning, _runtime_warn)\r\n        self.assertWarns((DeprecationWarning, RuntimeWarning), _runtime_warn)\r\n        self.assertWarns(RuntimeWarning,\r\n                         warnings.warn, \"foo\", category=RuntimeWarning)\r\n        with self.assertRaises(self.failureException):\r\n            self.assertWarns(RuntimeWarning, lambda: 0)\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"default\", RuntimeWarning)\r\n            with self.assertRaises(self.failureException):\r\n                self.assertWarns(DeprecationWarning, _runtime_warn)\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"error\", RuntimeWarning)\r\n            with self.assertRaises(RuntimeWarning):\r\n                self.assertWarns(DeprecationWarning, _runtime_warn)\r\n    def testAssertWarnsContext(self):\r\n        def _runtime_warn():\r\n            warnings.warn(\"foo\", RuntimeWarning)\r\n        _runtime_warn_lineno = inspect.getsourcelines(_runtime_warn)[1]\r\n        with self.assertWarns(RuntimeWarning) as cm:\r\n            _runtime_warn()\r\n        with self.assertWarns((DeprecationWarning, RuntimeWarning)) as cm:\r\n            _runtime_warn()\r\n        self.assertIsInstance(cm.warning, RuntimeWarning)\r\n        self.assertEqual(cm.warning.args[0], \"foo\")\r\n        self.assertIn(\"test_case.py\", cm.filename)\r\n        self.assertEqual(cm.lineno, _runtime_warn_lineno + 1)\r\n        with self.assertWarns(RuntimeWarning):\r\n            _runtime_warn()\r\n            _runtime_warn()\r\n        with self.assertWarns(RuntimeWarning):\r\n            warnings.warn(\"foo\", category=RuntimeWarning)\r\n        with self.assertRaises(self.failureException):\r\n            with self.assertWarns(RuntimeWarning):\r\n                pass\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"default\", RuntimeWarning)\r\n            with self.assertRaises(self.failureException):\r\n                with self.assertWarns(DeprecationWarning):\r\n                    _runtime_warn()\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"error\", RuntimeWarning)\r\n            with self.assertRaises(RuntimeWarning):\r\n                with self.assertWarns(DeprecationWarning):\r\n                    _runtime_warn()\r\n    def testAssertWarnsRegexCallable(self):\r\n        def _runtime_warn(msg):\r\n            warnings.warn(msg, RuntimeWarning)\r\n        self.assertWarnsRegex(RuntimeWarning, \"o+\",\r\n                              _runtime_warn, \"foox\")\r\n        with self.assertRaises(self.failureException):\r\n            self.assertWarnsRegex(RuntimeWarning, \"o+\",\r\n                                  lambda: 0)\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"default\", RuntimeWarning)\r\n            with self.assertRaises(self.failureException):\r\n                self.assertWarnsRegex(DeprecationWarning, \"o+\",\r\n                                      _runtime_warn, \"foox\")\r\n        with self.assertRaises(self.failureException):\r\n            self.assertWarnsRegex(RuntimeWarning, \"o+\",\r\n                                  _runtime_warn, \"barz\")\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"error\", RuntimeWarning)\r\n            with self.assertRaises((RuntimeWarning, self.failureException)):\r\n                self.assertWarnsRegex(RuntimeWarning, \"o+\",\r\n                                      _runtime_warn, \"barz\")\r\n    def testAssertWarnsRegexContext(self):\r\n        def _runtime_warn(msg):\r\n            warnings.warn(msg, RuntimeWarning)\r\n        _runtime_warn_lineno = inspect.getsourcelines(_runtime_warn)[1]\r\n        with self.assertWarnsRegex(RuntimeWarning, \"o+\") as cm:\r\n            _runtime_warn(\"foox\")\r\n        self.assertIsInstance(cm.warning, RuntimeWarning)\r\n        self.assertEqual(cm.warning.args[0], \"foox\")\r\n        self.assertIn(\"test_case.py\", cm.filename)\r\n        self.assertEqual(cm.lineno, _runtime_warn_lineno + 1)\r\n        with self.assertRaises(self.failureException):\r\n            with self.assertWarnsRegex(RuntimeWarning, \"o+\"):\r\n                pass\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"default\", RuntimeWarning)\r\n            with self.assertRaises(self.failureException):\r\n                with self.assertWarnsRegex(DeprecationWarning, \"o+\"):\r\n                    _runtime_warn(\"foox\")\r\n        with self.assertRaises(self.failureException):\r\n            with self.assertWarnsRegex(RuntimeWarning, \"o+\"):\r\n                _runtime_warn(\"barz\")\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"error\", RuntimeWarning)\r\n            with self.assertRaises((RuntimeWarning, self.failureException)):\r\n                with self.assertWarnsRegex(RuntimeWarning, \"o+\"):\r\n                    _runtime_warn(\"barz\")\r\n    def testDeprecatedMethodNames(self):\r\n        \"\"\"\r\n        Test that the deprecated methods raise a DeprecationWarning. See #9424.\r\n        \"\"\"\r\n        old = (\r\n            (self.failIfEqual, (3, 5)),\r\n            (self.assertNotEquals, (3, 5)),\r\n            (self.failUnlessEqual, (3, 3)),\r\n            (self.assertEquals, (3, 3)),\r\n            (self.failUnlessAlmostEqual, (2.0, 2.0)),\r\n            (self.assertAlmostEquals, (2.0, 2.0)),\r\n            (self.failIfAlmostEqual, (3.0, 5.0)),\r\n            (self.assertNotAlmostEquals, (3.0, 5.0)),\r\n            (self.failUnless, (True,)),\r\n            (self.assert_, (True,)),\r\n            (self.failUnlessRaises, (TypeError, lambda _: 3.14 + 'spam')),\r\n            (self.failIf, (False,)),\r\n            (self.assertDictContainsSubset, (dict(a=1, b=2), dict(a=1, b=2, c=3))),\r\n            (self.assertRaisesRegexp, (KeyError, 'foo', lambda: {}['foo'])),\r\n            (self.assertRegexpMatches, ('bar', 'bar')),\r\n        )\r\n        for meth, args in old:\r\n            with self.assertWarns(DeprecationWarning):\r\n                meth(*args)\r\n    def _testDeprecatedFailMethods(self):\r\n        \"\"\"Test that the deprecated fail* methods get removed in 3.x\"\"\"\r\n        if sys.version_info[:2] < (3, 3):\r\n            return\r\n        deprecated_names = [\r\n            'failIfEqual', 'failUnlessEqual', 'failUnlessAlmostEqual',\r\n            'failIfAlmostEqual', 'failUnless', 'failUnlessRaises', 'failIf',\r\n            'assertDictContainsSubset',\r\n        ]\r\n        for deprecated_name in deprecated_names:\r\n            with self.assertRaises(AttributeError):\r\n                getattr(self, deprecated_name)  # remove these in 3.x\r\n    def testDeepcopy(self):\r\n        class TestableTest(unittest.TestCase):\r\n            def testNothing(self):\r\n                pass\r\n        test = TestableTest('testNothing')\r\n        deepcopy(test)\r\n    def testPickle(self):\r\n        test = unittest.TestCase('run')\r\n        for protocol in range(pickle.HIGHEST_PROTOCOL + 1):\r\n            pickled_test = pickle.dumps(test, protocol=protocol)\r\n            unpickled_test = pickle.loads(pickled_test)\r\n            self.assertEqual(test, unpickled_test)\r\n            unpickled_test.assertEqual(set(), set())\r\n    def testKeyboardInterrupt(self):\r\n        def _raise(self=None):\r\n            raise KeyboardInterrupt\r\n        def nothing(self):\r\n            pass\r\n        class Test1(unittest.TestCase):\r\n            test_something = _raise\r\n        class Test2(unittest.TestCase):\r\n            setUp = _raise\r\n            test_something = nothing\r\n        class Test3(unittest.TestCase):\r\n            test_something = nothing\r\n            tearDown = _raise\r\n        class Test4(unittest.TestCase):\r\n            def test_something(self):\r\n                self.addCleanup(_raise)\r\n        for klass in (Test1, Test2, Test3, Test4):\r\n            with self.assertRaises(KeyboardInterrupt):\r\n                klass('test_something').run()\r\n    def testSkippingEverywhere(self):\r\n        def _skip(self=None):\r\n            raise unittest.SkipTest('some reason')\r\n        def nothing(self):\r\n            pass\r\n        class Test1(unittest.TestCase):\r\n            test_something = _skip\r\n        class Test2(unittest.TestCase):\r\n            setUp = _skip\r\n            test_something = nothing\r\n        class Test3(unittest.TestCase):\r\n            test_something = nothing\r\n            tearDown = _skip\r\n        class Test4(unittest.TestCase):\r\n            def test_something(self):\r\n                self.addCleanup(_skip)\r\n        for klass in (Test1, Test2, Test3, Test4):\r\n            result = unittest.TestResult()\r\n            klass('test_something').run(result)\r\n            self.assertEqual(len(result.skipped), 1)\r\n            self.assertEqual(result.testsRun, 1)\r\n    def testSystemExit(self):\r\n        def _raise(self=None):\r\n            raise SystemExit\r\n        def nothing(self):\r\n            pass\r\n        class Test1(unittest.TestCase):\r\n            test_something = _raise\r\n        class Test2(unittest.TestCase):\r\n            setUp = _raise\r\n            test_something = nothing\r\n        class Test3(unittest.TestCase):\r\n            test_something = nothing\r\n            tearDown = _raise\r\n        class Test4(unittest.TestCase):\r\n            def test_something(self):\r\n                self.addCleanup(_raise)\r\n        for klass in (Test1, Test2, Test3, Test4):\r\n            result = unittest.TestResult()\r\n            klass('test_something').run(result)\r\n            self.assertEqual(len(result.errors), 1)\r\n            self.assertEqual(result.testsRun, 1)\r\n    @support.cpython_only\r\n    def testNoCycles(self):\r\n        case = unittest.TestCase()\r\n        wr = weakref.ref(case)\r\n        with support.disable_gc():\r\n            del case\r\n            self.assertFalse(wr())\r\n", "/Lib/shutil.py": "\"\"\"Utility functions for copying and archiving files and directory trees.\nXXX The functions here don't copy the resource fork or other metadata on Mac.\n\"\"\"\nimport os\nimport sys\nimport stat\nfrom os.path import abspath\nimport fnmatch\nimport collections\nimport errno\nimport tarfile\ntry:\n    import bz2\n    del bz2\n    _BZ2_SUPPORTED = True\nexcept ImportError:\n    _BZ2_SUPPORTED = False\ntry:\n    from pwd import getpwnam\nexcept ImportError:\n    getpwnam = None\ntry:\n    from grp import getgrnam\nexcept ImportError:\n    getgrnam = None\n__all__ = [\"copyfileobj\", \"copyfile\", \"copymode\", \"copystat\", \"copy\", \"copy2\",\n           \"copytree\", \"move\", \"rmtree\", \"Error\", \"SpecialFileError\",\n           \"ExecError\", \"make_archive\", \"get_archive_formats\",\n           \"register_archive_format\", \"unregister_archive_format\",\n           \"get_unpack_formats\", \"register_unpack_format\",\n           \"unregister_unpack_format\", \"unpack_archive\",\n           \"ignore_patterns\", \"chown\", \"which\"]\nclass Error(EnvironmentError):\n    pass\nclass SpecialFileError(EnvironmentError):\n    \"\"\"Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)\"\"\"\nclass ExecError(EnvironmentError):\n    \"\"\"Raised when a command could not be executed\"\"\"\nclass ReadError(EnvironmentError):\n    \"\"\"Raised when an archive cannot be read\"\"\"\nclass RegistryError(Exception):\n    \"\"\"Raised when a registery operation with the archiving\n    and unpacking registeries fails\"\"\"\ntry:\n    WindowsError\nexcept NameError:\n    WindowsError = None\ndef copyfileobj(fsrc, fdst, length=16*1024):\n    \"\"\"copy data from file-like object fsrc to file-like object fdst\"\"\"\n    while 1:\n        buf = fsrc.read(length)\n        if not buf:\n            break\n        fdst.write(buf)\ndef _samefile(src, dst):\n    if hasattr(os.path, 'samefile'):\n        try:\n            return os.path.samefile(src, dst)\n        except OSError:\n            return False\n    return (os.path.normcase(os.path.abspath(src)) ==\n            os.path.normcase(os.path.abspath(dst)))\ndef copyfile(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data from src to dst.\n    If follow_symlinks is not set and src is a symbolic link, a new\n    symlink will be created instead of copying the file it points to.\n    \"\"\"\n    if _samefile(src, dst):\n        raise Error(\"`%s` and `%s` are the same file\" % (src, dst))\n    for fn in [src, dst]:\n        try:\n            st = os.stat(fn)\n        except OSError:\n            pass\n        else:\n            if stat.S_ISFIFO(st.st_mode):\n                raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n    if not follow_symlinks and os.path.islink(src):\n        os.symlink(os.readlink(src), dst)\n    else:\n        with open(src, 'rb') as fsrc:\n            with open(dst, 'wb') as fdst:\n                copyfileobj(fsrc, fdst)\n    return dst\ndef copymode(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy mode bits from src to dst.\n    If follow_symlinks is not set, symlinks aren't followed if and only\n    if both `src` and `dst` are symlinks.  If `lchmod` isn't available\n    (e.g. Linux) this method does nothing.\n    \"\"\"\n    if not follow_symlinks and os.path.islink(src) and os.path.islink(dst):\n        if hasattr(os, 'lchmod'):\n            stat_func, chmod_func = os.lstat, os.lchmod\n        else:\n            return\n    elif hasattr(os, 'chmod'):\n        stat_func, chmod_func = os.stat, os.chmod\n    else:\n        return\n    st = stat_func(src)\n    chmod_func(dst, stat.S_IMODE(st.st_mode))\nif hasattr(os, 'listxattr'):\n    def _copyxattr(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy extended filesystem attributes from `src` to `dst`.\n        Overwrite existing attributes.\n        If `follow_symlinks` is false, symlinks won't be followed.\n        \"\"\"\n        try:\n            names = os.listxattr(src, follow_symlinks=follow_symlinks)\n        except OSError as e:\n            if e.errno not in (errno.ENOTSUP, errno.ENODATA):\n                raise\n            return\n        for name in names:\n            try:\n                value = os.getxattr(src, name, follow_symlinks=follow_symlinks)\n                os.setxattr(dst, name, value, follow_symlinks=follow_symlinks)\n            except OSError as e:\n                if e.errno not in (errno.EPERM, errno.ENOTSUP, errno.ENODATA):\n                    raise\nelse:\n    def _copyxattr(*args, **kwargs):\n        pass\ndef copystat(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy all stat info (mode bits, atime, mtime, flags) from src to dst.\n    If the optional flag `follow_symlinks` is not set, symlinks aren't followed if and\n    only if both `src` and `dst` are symlinks.\n    \"\"\"\n    def _nop(*args, ns=None, follow_symlinks=None):\n        pass\n    follow = follow_symlinks or not (os.path.islink(src) and os.path.islink(dst))\n    if follow:\n        def lookup(name):\n            return getattr(os, name, _nop)\n    else:\n        def lookup(name):\n            fn = getattr(os, name, _nop)\n            if fn in os.supports_follow_symlinks:\n                return fn\n            return _nop\n    st = lookup(\"stat\")(src, follow_symlinks=follow)\n    mode = stat.S_IMODE(st.st_mode)\n    lookup(\"utime\")(dst, ns=(st.st_atime_ns, st.st_mtime_ns),\n        follow_symlinks=follow)\n    try:\n        lookup(\"chmod\")(dst, mode, follow_symlinks=follow)\n    except NotImplementedError:\n        pass\n    if hasattr(st, 'st_flags'):\n        try:\n            lookup(\"chflags\")(dst, st.st_flags, follow_symlinks=follow)\n        except OSError as why:\n            for err in 'EOPNOTSUPP', 'ENOTSUP':\n                if hasattr(errno, err) and why.errno == getattr(errno, err):\n                    break\n            else:\n                raise\n    _copyxattr(src, dst, follow_symlinks=follow)\ndef copy(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and mode bits (\"cp src dst\"). Return the file's destination.\n    The destination may be a directory.\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n    copymode(src, dst, follow_symlinks=follow_symlinks)\n    return dst\ndef copy2(src, dst, *, follow_symlinks=True):\n    \"\"\"Copy data and all stat info (\"cp -p src dst\"). Return the file's\n    destination.\"\n    The destination may be a directory.\n    If follow_symlinks is false, symlinks won't be followed. This\n    resembles GNU's \"cp -P src dst\".\n    \"\"\"\n    if os.path.isdir(dst):\n        dst = os.path.join(dst, os.path.basename(src))\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n    copystat(src, dst, follow_symlinks=follow_symlinks)\n    return dst\ndef ignore_patterns(*patterns):\n    \"\"\"Function that can be used as copytree() ignore parameter.\n    Patterns is a sequence of glob-style patterns\n    that are used to exclude files\"\"\"\n    def _ignore_patterns(path, names):\n        ignored_names = []\n        for pattern in patterns:\n            ignored_names.extend(fnmatch.filter(names, pattern))\n        return set(ignored_names)\n    return _ignore_patterns\ndef copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,\n             ignore_dangling_symlinks=False):\n    \"\"\"Recursively copy a directory tree.\n    The destination directory must not already exist.\n    If exception(s) occur, an Error is raised with a list of reasons.\n    If the optional symlinks flag is true, symbolic links in the\n    source tree result in symbolic links in the destination tree; if\n    it is false, the contents of the files pointed to by symbolic\n    links are copied. If the file pointed by the symlink doesn't\n    exist, an exception will be added in the list of errors raised in\n    an Error exception at the end of the copy process.\n    You can set the optional ignore_dangling_symlinks flag to true if you\n    want to silence this exception. Notice that this has no effect on\n    platforms that don't support os.symlink.\n    The optional ignore argument is a callable. If given, it\n    is called with the `src` parameter, which is the directory\n    being visited by copytree(), and `names` which is the list of\n    `src` contents, as returned by os.listdir():\n        callable(src, names) -> ignored_names\n    Since copytree() is called recursively, the callable will be\n    called once for each directory that is copied. It returns a\n    list of names relative to the `src` directory that should\n    not be copied.\n    The optional copy_function argument is a callable that will be used\n    to copy each file. It will be called with the source path and the\n    destination path as arguments. By default, copy2() is used, but any\n    function that supports the same signature (like copy()) can be used.\n    \"\"\"\n    names = os.listdir(src)\n    if ignore is not None:\n        ignored_names = ignore(src, names)\n    else:\n        ignored_names = set()\n    os.makedirs(dst)\n    errors = []\n    for name in names:\n        if name in ignored_names:\n            continue\n        srcname = os.path.join(src, name)\n        dstname = os.path.join(dst, name)\n        try:\n            if os.path.islink(srcname):\n                linkto = os.readlink(srcname)\n                if symlinks:\n                    os.symlink(linkto, dstname)\n                    copystat(srcname, dstname, follow_symlinks=not symlinks)\n                else:\n                    if not os.path.exists(linkto) and ignore_dangling_symlinks:\n                        continue\n                    copy_function(srcname, dstname)\n            elif os.path.isdir(srcname):\n                copytree(srcname, dstname, symlinks, ignore, copy_function)\n            else:\n                copy_function(srcname, dstname)\n        except Error as err:\n            errors.extend(err.args[0])\n        except EnvironmentError as why:\n            errors.append((srcname, dstname, str(why)))\n    try:\n        copystat(src, dst)\n    except OSError as why:\n        if WindowsError is not None and isinstance(why, WindowsError):\n            pass\n        else:\n            errors.append((src, dst, str(why)))\n    if errors:\n        raise Error(errors)\n    return dst\ndef _rmtree_unsafe(path, onerror):\n    try:\n        if os.path.islink(path):\n            raise OSError(\"Cannot call rmtree on a symbolic link\")\n    except OSError:\n        onerror(os.path.islink, path, sys.exc_info())\n        return\n    names = []\n    try:\n        names = os.listdir(path)\n    except os.error:\n        onerror(os.listdir, path, sys.exc_info())\n    for name in names:\n        fullname = os.path.join(path, name)\n        try:\n            mode = os.lstat(fullname).st_mode\n        except os.error:\n            mode = 0\n        if stat.S_ISDIR(mode):\n            _rmtree_unsafe(fullname, onerror)\n        else:\n            try:\n                os.unlink(fullname)\n            except os.error:\n                onerror(os.unlink, fullname, sys.exc_info())\n    try:\n        os.rmdir(path)\n    except os.error:\n        onerror(os.rmdir, path, sys.exc_info())\ndef _rmtree_safe_fd(topfd, path, onerror):\n    names = []\n    try:\n        names = os.listdir(topfd)\n    except OSError as err:\n        err.filename = path\n        onerror(os.listdir, path, sys.exc_info())\n    for name in names:\n        fullname = os.path.join(path, name)\n        try:\n            orig_st = os.stat(name, dir_fd=topfd, follow_symlinks=False)\n            mode = orig_st.st_mode\n        except OSError:\n            mode = 0\n        if stat.S_ISDIR(mode):\n            try:\n                dirfd = os.open(name, os.O_RDONLY, dir_fd=topfd)\n            except OSError:\n                onerror(os.open, fullname, sys.exc_info())\n            else:\n                try:\n                    if os.path.samestat(orig_st, os.fstat(dirfd)):\n                        _rmtree_safe_fd(dirfd, fullname, onerror)\n                        try:\n                            os.rmdir(name, dir_fd=topfd)\n                        except OSError:\n                            onerror(os.rmdir, fullname, sys.exc_info())\n                    else:\n                        try:\n                            raise OSError(\"Cannot call rmtree on a symbolic \"\n                                          \"link\")\n                        except OSError:\n                            onerror(os.path.islink, fullname, sys.exc_info())\n                finally:\n                    os.close(dirfd)\n        else:\n            try:\n                os.unlink(name, dir_fd=topfd)\n            except OSError:\n                onerror(os.unlink, fullname, sys.exc_info())\n_use_fd_functions = ({os.open, os.stat, os.unlink, os.rmdir} <=\n                     os.supports_dir_fd and\n                     os.listdir in os.supports_fd and\n                     os.stat in os.supports_follow_symlinks)\ndef rmtree(path, ignore_errors=False, onerror=None):\n    \"\"\"Recursively delete a directory tree.\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is platform and implementation dependent;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n    \"\"\"\n    if ignore_errors:\n        def onerror(*args):\n            pass\n    elif onerror is None:\n        def onerror(*args):\n            raise\n    if _use_fd_functions:\n        if isinstance(path, bytes):\n            path = os.fsdecode(path)\n        try:\n            orig_st = os.lstat(path)\n        except Exception:\n            onerror(os.lstat, path, sys.exc_info())\n            return\n        try:\n            fd = os.open(path, os.O_RDONLY)\n        except Exception:\n            onerror(os.lstat, path, sys.exc_info())\n            return\n        try:\n            if os.path.samestat(orig_st, os.fstat(fd)):\n                _rmtree_safe_fd(fd, path, onerror)\n                try:\n                    os.rmdir(path)\n                except os.error:\n                    onerror(os.rmdir, path, sys.exc_info())\n            else:\n                try:\n                    raise OSError(\"Cannot call rmtree on a symbolic link\")\n                except OSError:\n                    onerror(os.path.islink, path, sys.exc_info())\n        finally:\n            os.close(fd)\n    else:\n        return _rmtree_unsafe(path, onerror)\nrmtree.avoids_symlink_attacks = _use_fd_functions\ndef _basename(path):\n    return os.path.basename(path.rstrip(os.path.sep))\ndef move(src, dst):\n    \"\"\"Recursively move a file or directory to another location. This is\n    similar to the Unix \"mv\" command. Return the file or directory's\n    destination.\n    If the destination is a directory or a symlink to a directory, the source\n    is moved inside the directory. The destination path must not already\n    exist.\n    If the destination already exists but is not a directory, it may be\n    overwritten depending on os.rename() semantics.\n    If the destination is on our current filesystem, then rename() is used.\n    Otherwise, src is copied to the destination and then removed. Symlinks are\n    recreated under the new name if os.rename() fails because of cross\n    filesystem renames.\n    A lot more could be done here...  A look at a mv.c shows a lot of\n    the issues this implementation glosses over.\n    \"\"\"\n    real_dst = dst\n    if os.path.isdir(dst):\n        if _samefile(src, dst):\n            os.rename(src, dst)\n            return\n        real_dst = os.path.join(dst, _basename(src))\n        if os.path.exists(real_dst):\n            raise Error(\"Destination path '%s' already exists\" % real_dst)\n    try:\n        os.rename(src, real_dst)\n    except OSError:\n        if os.path.islink(src):\n            linkto = os.readlink(src)\n            os.symlink(linkto, real_dst)\n            os.unlink(src)\n        elif os.path.isdir(src):\n            if _destinsrc(src, dst):\n                raise Error(\"Cannot move a directory '%s' into itself '%s'.\" % (src, dst))\n            copytree(src, real_dst, symlinks=True)\n            rmtree(src)\n        else:\n            copy2(src, real_dst)\n            os.unlink(src)\n    return real_dst\ndef _destinsrc(src, dst):\n    src = abspath(src)\n    dst = abspath(dst)\n    if not src.endswith(os.path.sep):\n        src += os.path.sep\n    if not dst.endswith(os.path.sep):\n        dst += os.path.sep\n    return dst.startswith(src)\ndef _get_gid(name):\n    \"\"\"Returns a gid, given a group name.\"\"\"\n    if getgrnam is None or name is None:\n        return None\n    try:\n        result = getgrnam(name)\n    except KeyError:\n        result = None\n    if result is not None:\n        return result[2]\n    return None\ndef _get_uid(name):\n    \"\"\"Returns an uid, given a user name.\"\"\"\n    if getpwnam is None or name is None:\n        return None\n    try:\n        result = getpwnam(name)\n    except KeyError:\n        result = None\n    if result is not None:\n        return result[2]\n    return None\ndef _make_tarball(base_name, base_dir, compress=\"gzip\", verbose=0, dry_run=0,\n                  owner=None, group=None, logger=None):\n    \"\"\"Create a (possibly compressed) tar file from all the files under\n    'base_dir'.\n    'compress' must be \"gzip\" (the default), \"bzip2\", or None.\n    'owner' and 'group' can be used to define an owner and a group for the\n    archive that is being built. If not provided, the current owner and group\n    will be used.\n    The output tar file will be named 'base_name' +  \".tar\", possibly plus\n    the appropriate compression extension (\".gz\", or \".bz2\").\n    Returns the output filename.\n    \"\"\"\n    tar_compression = {'gzip': 'gz', None: ''}\n    compress_ext = {'gzip': '.gz'}\n    if _BZ2_SUPPORTED:\n        tar_compression['bzip2'] = 'bz2'\n        compress_ext['bzip2'] = '.bz2'\n    if compress is not None and compress not in compress_ext:\n        raise ValueError(\"bad value for 'compress', or compression format not \"\n                         \"supported : {0}\".format(compress))\n    archive_name = base_name + '.tar' + compress_ext.get(compress, '')\n    archive_dir = os.path.dirname(archive_name)\n    if not os.path.exists(archive_dir):\n        if logger is not None:\n            logger.info(\"creating %s\", archive_dir)\n        if not dry_run:\n            os.makedirs(archive_dir)\n    if logger is not None:\n        logger.info('Creating tar archive')\n    uid = _get_uid(owner)\n    gid = _get_gid(group)\n    def _set_uid_gid(tarinfo):\n        if gid is not None:\n            tarinfo.gid = gid\n            tarinfo.gname = group\n        if uid is not None:\n            tarinfo.uid = uid\n            tarinfo.uname = owner\n        return tarinfo\n    if not dry_run:\n        tar = tarfile.open(archive_name, 'w|%s' % tar_compression[compress])\n        try:\n            tar.add(base_dir, filter=_set_uid_gid)\n        finally:\n            tar.close()\n    return archive_name\ndef _call_external_zip(base_dir, zip_filename, verbose=False, dry_run=False):\n    if verbose:\n        zipoptions = \"-r\"\n    else:\n        zipoptions = \"-rq\"\n    from distutils.errors import DistutilsExecError\n    from distutils.spawn import spawn\n    try:\n        spawn([\"zip\", zipoptions, zip_filename, base_dir], dry_run=dry_run)\n    except DistutilsExecError:\n        raise ExecError(\"unable to create zip file '%s': \"\n            \"could neither import the 'zipfile' module nor \"\n            \"find a standalone zip utility\") % zip_filename\ndef _make_zipfile(base_name, base_dir, verbose=0, dry_run=0, logger=None):\n    \"\"\"Create a zip file from all the files under 'base_dir'.\n    The output zip file will be named 'base_name' + \".zip\".  Uses either the\n    \"zipfile\" Python module (if available) or the InfoZIP \"zip\" utility\n    (if installed and found on the default search path).  If neither tool is\n    available, raises ExecError.  Returns the name of the output zip\n    file.\n    \"\"\"\n    zip_filename = base_name + \".zip\"\n    archive_dir = os.path.dirname(base_name)\n    if not os.path.exists(archive_dir):\n        if logger is not None:\n            logger.info(\"creating %s\", archive_dir)\n        if not dry_run:\n            os.makedirs(archive_dir)\n    try:\n        import zipfile\n    except ImportError:\n        zipfile = None\n    if zipfile is None:\n        _call_external_zip(base_dir, zip_filename, verbose, dry_run)\n    else:\n        if logger is not None:\n            logger.info(\"creating '%s' and adding '%s' to it\",\n                        zip_filename, base_dir)\n        if not dry_run:\n            zip = zipfile.ZipFile(zip_filename, \"w\",\n                                  compression=zipfile.ZIP_DEFLATED)\n            for dirpath, dirnames, filenames in os.walk(base_dir):\n                for name in filenames:\n                    path = os.path.normpath(os.path.join(dirpath, name))\n                    if os.path.isfile(path):\n                        zip.write(path, path)\n                        if logger is not None:\n                            logger.info(\"adding '%s'\", path)\n            zip.close()\n    return zip_filename\n_ARCHIVE_FORMATS = {\n    'gztar': (_make_tarball, [('compress', 'gzip')], \"gzip'ed tar-file\"),\n    'tar':   (_make_tarball, [('compress', None)], \"uncompressed tar file\"),\n    'zip':   (_make_zipfile, [], \"ZIP file\")\n    }\nif _BZ2_SUPPORTED:\n    _ARCHIVE_FORMATS['bztar'] = (_make_tarball, [('compress', 'bzip2')],\n                                \"bzip2'ed tar-file\")\ndef get_archive_formats():\n    \"\"\"Returns a list of supported formats for archiving and unarchiving.\n    Each element of the returned sequence is a tuple (name, description)\n    \"\"\"\n    formats = [(name, registry[2]) for name, registry in\n               _ARCHIVE_FORMATS.items()]\n    formats.sort()\n    return formats\ndef register_archive_format(name, function, extra_args=None, description=''):\n    \"\"\"Registers an archive format.\n    name is the name of the format. function is the callable that will be\n    used to create archives. If provided, extra_args is a sequence of\n    (name, value) tuples that will be passed as arguments to the callable.\n    description can be provided to describe the format, and will be returned\n    by the get_archive_formats() function.\n    \"\"\"\n    if extra_args is None:\n        extra_args = []\n    if not callable(function):\n        raise TypeError('The %s object is not callable' % function)\n    if not isinstance(extra_args, (tuple, list)):\n        raise TypeError('extra_args needs to be a sequence')\n    for element in extra_args:\n        if not isinstance(element, (tuple, list)) or len(element) !=2:\n            raise TypeError('extra_args elements are : (arg_name, value)')\n    _ARCHIVE_FORMATS[name] = (function, extra_args, description)\ndef unregister_archive_format(name):\n    del _ARCHIVE_FORMATS[name]\ndef make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0,\n                 dry_run=0, owner=None, group=None, logger=None):\n    \"\"\"Create an archive file (eg. zip or tar).\n    'base_name' is the name of the file to create, minus any format-specific\n    extension; 'format' is the archive format: one of \"zip\", \"tar\", \"bztar\"\n    or \"gztar\".\n    'root_dir' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into 'root_dir' before creating the\n    archive.  'base_dir' is the directory where we start archiving from;\n    ie. 'base_dir' will be the common prefix of all files and\n    directories in the archive.  'root_dir' and 'base_dir' both default\n    to the current directory.  Returns the name of the archive file.\n    'owner' and 'group' are used when creating a tar archive. By default,\n    uses the current owner and group.\n    \"\"\"\n    save_cwd = os.getcwd()\n    if root_dir is not None:\n        if logger is not None:\n            logger.debug(\"changing into '%s'\", root_dir)\n        base_name = os.path.abspath(base_name)\n        if not dry_run:\n            os.chdir(root_dir)\n    if base_dir is None:\n        base_dir = os.curdir\n    kwargs = {'dry_run': dry_run, 'logger': logger}\n    try:\n        format_info = _ARCHIVE_FORMATS[format]\n    except KeyError:\n        raise ValueError(\"unknown archive format '%s'\" % format)\n    func = format_info[0]\n    for arg, val in format_info[1]:\n        kwargs[arg] = val\n    if format != 'zip':\n        kwargs['owner'] = owner\n        kwargs['group'] = group\n    try:\n        filename = func(base_name, base_dir, **kwargs)\n    finally:\n        if root_dir is not None:\n            if logger is not None:\n                logger.debug(\"changing back to '%s'\", save_cwd)\n            os.chdir(save_cwd)\n    return filename\ndef get_unpack_formats():\n    \"\"\"Returns a list of supported formats for unpacking.\n    Each element of the returned sequence is a tuple\n    (name, extensions, description)\n    \"\"\"\n    formats = [(name, info[0], info[3]) for name, info in\n               _UNPACK_FORMATS.items()]\n    formats.sort()\n    return formats\ndef _check_unpack_options(extensions, function, extra_args):\n    \"\"\"Checks what gets registered as an unpacker.\"\"\"\n    existing_extensions = {}\n    for name, info in _UNPACK_FORMATS.items():\n        for ext in info[0]:\n            existing_extensions[ext] = name\n    for extension in extensions:\n        if extension in existing_extensions:\n            msg = '%s is already registered for \"%s\"'\n            raise RegistryError(msg % (extension,\n                                       existing_extensions[extension]))\n    if not callable(function):\n        raise TypeError('The registered function must be a callable')\ndef register_unpack_format(name, extensions, function, extra_args=None,\n                           description=''):\n    \"\"\"Registers an unpack format.\n    `name` is the name of the format. `extensions` is a list of extensions\n    corresponding to the format.\n    `function` is the callable that will be\n    used to unpack archives. The callable will receive archives to unpack.\n    If it's unable to handle an archive, it needs to raise a ReadError\n    exception.\n    If provided, `extra_args` is a sequence of\n    (name, value) tuples that will be passed as arguments to the callable.\n    description can be provided to describe the format, and will be returned\n    by the get_unpack_formats() function.\n    \"\"\"\n    if extra_args is None:\n        extra_args = []\n    _check_unpack_options(extensions, function, extra_args)\n    _UNPACK_FORMATS[name] = extensions, function, extra_args, description\ndef unregister_unpack_format(name):\n    \"\"\"Removes the pack format from the registery.\"\"\"\n    del _UNPACK_FORMATS[name]\ndef _ensure_directory(path):\n    \"\"\"Ensure that the parent directory of `path` exists\"\"\"\n    dirname = os.path.dirname(path)\n    if not os.path.isdir(dirname):\n        os.makedirs(dirname)\ndef _unpack_zipfile(filename, extract_dir):\n    \"\"\"Unpack zip `filename` to `extract_dir`\n    \"\"\"\n    try:\n        import zipfile\n    except ImportError:\n        raise ReadError('zlib not supported, cannot unpack this archive.')\n    if not zipfile.is_zipfile(filename):\n        raise ReadError(\"%s is not a zip file\" % filename)\n    zip = zipfile.ZipFile(filename)\n    try:\n        for info in zip.infolist():\n            name = info.filename\n            if name.startswith('/') or '..' in name:\n                continue\n            target = os.path.join(extract_dir, *name.split('/'))\n            if not target:\n                continue\n            _ensure_directory(target)\n            if not name.endswith('/'):\n                data = zip.read(info.filename)\n                f = open(target, 'wb')\n                try:\n                    f.write(data)\n                finally:\n                    f.close()\n                    del data\n    finally:\n        zip.close()\ndef _unpack_tarfile(filename, extract_dir):\n    \"\"\"Unpack tar/tar.gz/tar.bz2 `filename` to `extract_dir`\n    \"\"\"\n    try:\n        tarobj = tarfile.open(filename)\n    except tarfile.TarError:\n        raise ReadError(\n            \"%s is not a compressed or uncompressed tar file\" % filename)\n    try:\n        tarobj.extractall(extract_dir)\n    finally:\n        tarobj.close()\n_UNPACK_FORMATS = {\n    'gztar': (['.tar.gz', '.tgz'], _unpack_tarfile, [], \"gzip'ed tar-file\"),\n    'tar':   (['.tar'], _unpack_tarfile, [], \"uncompressed tar file\"),\n    'zip':   (['.zip'], _unpack_zipfile, [], \"ZIP file\")\n    }\nif _BZ2_SUPPORTED:\n    _UNPACK_FORMATS['bztar'] = (['.bz2'], _unpack_tarfile, [],\n                                \"bzip2'ed tar-file\")\ndef _find_unpack_format(filename):\n    for name, info in _UNPACK_FORMATS.items():\n        for extension in info[0]:\n            if filename.endswith(extension):\n                return name\n    return None\ndef unpack_archive(filename, extract_dir=None, format=None):\n    \"\"\"Unpack an archive.\n    `filename` is the name of the archive.\n    `extract_dir` is the name of the target directory, where the archive\n    is unpacked. If not provided, the current working directory is used.\n    `format` is the archive format: one of \"zip\", \"tar\", or \"gztar\". Or any\n    other registered format. If not provided, unpack_archive will use the\n    filename extension and see if an unpacker was registered for that\n    extension.\n    In case none is found, a ValueError is raised.\n    \"\"\"\n    if extract_dir is None:\n        extract_dir = os.getcwd()\n    if format is not None:\n        try:\n            format_info = _UNPACK_FORMATS[format]\n        except KeyError:\n            raise ValueError(\"Unknown unpack format '{0}'\".format(format))\n        func = format_info[1]\n        func(filename, extract_dir, **dict(format_info[2]))\n    else:\n        format = _find_unpack_format(filename)\n        if format is None:\n            raise ReadError(\"Unknown archive format '{0}'\".format(filename))\n        func = _UNPACK_FORMATS[format][1]\n        kwargs = dict(_UNPACK_FORMATS[format][2])\n        func(filename, extract_dir, **kwargs)\nif hasattr(os, 'statvfs'):\n    __all__.append('disk_usage')\n    _ntuple_diskusage = collections.namedtuple('usage', 'total used free')\n    def disk_usage(path):\n        \"\"\"Return disk usage statistics about the given path.\n        Returned value is a named tuple with attributes 'total', 'used' and\n        'free', which are the amount of total, used and free space, in bytes.\n        \"\"\"\n        st = os.statvfs(path)\n        free = st.f_bavail * st.f_frsize\n        total = st.f_blocks * st.f_frsize\n        used = (st.f_blocks - st.f_bfree) * st.f_frsize\n        return _ntuple_diskusage(total, used, free)\nelif os.name == 'nt':\n    import nt\n    __all__.append('disk_usage')\n    _ntuple_diskusage = collections.namedtuple('usage', 'total used free')\n    def disk_usage(path):\n        \"\"\"Return disk usage statistics about the given path.\n        Returned valus is a named tuple with attributes 'total', 'used' and\n        'free', which are the amount of total, used and free space, in bytes.\n        \"\"\"\n        total, free = nt._getdiskusage(path)\n        used = total - free\n        return _ntuple_diskusage(total, used, free)\ndef chown(path, user=None, group=None):\n    \"\"\"Change owner user and group of the given path.\n    user and group can be the uid/gid or the user/group names, and in that case,\n    they are converted to their respective uid/gid.\n    \"\"\"\n    if user is None and group is None:\n        raise ValueError(\"user and/or group must be set\")\n    _user = user\n    _group = group\n    if user is None:\n        _user = -1\n    elif isinstance(user, str):\n        _user = _get_uid(user)\n        if _user is None:\n            raise LookupError(\"no such user: {!r}\".format(user))\n    if group is None:\n        _group = -1\n    elif not isinstance(group, int):\n        _group = _get_gid(group)\n        if _group is None:\n            raise LookupError(\"no such group: {!r}\".format(group))\n    os.chown(path, _user, _group)\ndef get_terminal_size(fallback=(80, 24)):\n    \"\"\"Get the size of the terminal window.\n    For each of the two dimensions, the environment variable, COLUMNS\n    and LINES respectively, is checked. If the variable is defined and\n    the value is a positive integer, it is used.\n    When COLUMNS or LINES is not defined, which is the common case,\n    the terminal connected to sys.__stdout__ is queried\n    by invoking os.get_terminal_size.\n    If the terminal size cannot be successfully queried, either because\n    the system doesn't support querying, or because we are not\n    connected to a terminal, the value given in fallback parameter\n    is used. Fallback defaults to (80, 24) which is the default\n    size used by many terminal emulators.\n    The value returned is a named tuple of type os.terminal_size.\n    \"\"\"\n    try:\n        columns = int(os.environ['COLUMNS'])\n    except (KeyError, ValueError):\n        columns = 0\n    try:\n        lines = int(os.environ['LINES'])\n    except (KeyError, ValueError):\n        lines = 0\n    if columns <= 0 or lines <= 0:\n        try:\n            size = os.get_terminal_size(sys.__stdout__.fileno())\n        except (NameError, OSError):\n            size = os.terminal_size(fallback)\n        if columns <= 0:\n            columns = size.columns\n        if lines <= 0:\n            lines = size.lines\n    return os.terminal_size((columns, lines))\ndef which(cmd, mode=os.F_OK | os.X_OK, path=None):\n    \"\"\"Given a command, mode, and a PATH string, return the path which\n    conforms to the given mode on the PATH, or None if there is no such\n    file.\n    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result\n    of os.environ.get(\"PATH\"), or can be overridden with a custom search\n    path.\n    \"\"\"\n    def _access_check(fn, mode):\n        return (os.path.exists(fn) and os.access(fn, mode)\n                and not os.path.isdir(fn))\n    if os.path.dirname(cmd):\n        if _access_check(cmd, mode):\n            return cmd\n        return None\n    if path is None:\n        path = os.environ.get(\"PATH\", os.defpath)\n    if not path:\n        return None\n    path = path.split(os.pathsep)\n    if sys.platform == \"win32\":\n        if not os.curdir in path:\n            path.insert(0, os.curdir)\n        pathext = os.environ.get(\"PATHEXT\", \"\").split(os.pathsep)\n        if any(cmd.lower().endswith(ext.lower()) for ext in pathext):\n            files = [cmd]\n        else:\n            files = [cmd + ext for ext in pathext]\n    else:\n        files = [cmd]\n    seen = set()\n    for dir in path:\n        normdir = os.path.normcase(dir)\n        if not normdir in seen:\n            seen.add(normdir)\n            for thefile in files:\n                name = os.path.join(dir, thefile)\n                if _access_check(name, mode):\n                    return name\n    return None\n", "/Lib/browser/timer.py": "from _timer import *", "/libs/_os.js": "$module=(function($B){var __builtins__=$B.builtins;return{random:function(){return __builtins__.float(Math.random());},randint:function(a,b){return __builtins__.int(Math.floor(Math.random()*(b-a)+a));}};})(__BRYTHON__);", "/Lib/browser/__init__.py": "from _browser import *\n", "/Lib/locale.py": "def getdefaultlocale():\n    return __BRYTHON__.language,None", "/libs/_timer.js": "$module=(function($B){var __builtins__=$B.builtins;return{__name__:'timer',clear_interval:function(int_id){window.clearInterval(int_id);},clear_timeout:function(timeout_id){window.clearTimeout(timeout_id);},set_interval:function(func,interval){return __builtins__.int(window.setInterval(func,interval));},set_timeout:function(func,interval){window.setTimeout(func,interval);},request_animation_frame:function(func){return __builtins__.int(window.requestAnimationFrame(func));},cancel_animation_frame:function(int_id){window.cancelAnimationFrame(int_id);}};})(__BRYTHON__);", "/Lib/imp.py": "\"\"\"This module provides the components needed to build your own __import__\nfunction.  Undocumented functions are obsolete.\nIn most cases it is preferred you consider using the importlib module's\nfunctionality over this module.\n\"\"\"\nfrom _imp import (lock_held, acquire_lock, release_lock,\n                  load_dynamic, get_frozen_object, is_frozen_package,\n                  init_builtin, init_frozen, is_builtin, is_frozen,\n                  _fix_co_filename)\nfrom importlib._bootstrap import new_module\nfrom importlib._bootstrap import cache_from_source, source_from_cache\nfrom importlib import _bootstrap\nfrom importlib import machinery\nimport os\nimport sys\nimport tokenize\nimport warnings\nSEARCH_ERROR = 0\nPY_SOURCE = 1\nPY_COMPILED = 2\nC_EXTENSION = 3\nPY_RESOURCE = 4\nPKG_DIRECTORY = 5\nC_BUILTIN = 6\nPY_FROZEN = 7\nPY_CODERESOURCE = 8\nIMP_HOOK = 9\ndef get_magic():\n    \"\"\"Return the magic number for .pyc or .pyo files.\"\"\"\n    return _bootstrap._MAGIC_BYTES\ndef get_tag():\n    \"\"\"Return the magic tag for .pyc or .pyo files.\"\"\"\n    return sys.implementation.cache_tag\ndef get_suffixes():\n    warnings.warn('imp.get_suffixes() is deprecated; use the constants '\n                  'defined on importlib.machinery instead',\n                  DeprecationWarning, 2)\n    extensions = [(s, 'rb', C_EXTENSION) for s in machinery.EXTENSION_SUFFIXES]\n    source = [(s, 'U', PY_SOURCE) for s in machinery.SOURCE_SUFFIXES]\n    bytecode = [(s, 'rb', PY_COMPILED) for s in machinery.BYTECODE_SUFFIXES]\n    return extensions + source + bytecode\nclass NullImporter:\n    \"\"\"Null import object.\"\"\"\n    def __init__(self, path):\n        if path == '':\n            raise ImportError('empty pathname', path='')\n        elif os.path.isdir(path):\n            raise ImportError('existing directory', path=path)\n    def find_module(self, fullname):\n        \"\"\"Always returns None.\"\"\"\n        return None\nclass _HackedGetData:\n    \"\"\"Compatibiilty support for 'file' arguments of various load_*()\n    functions.\"\"\"\n    def __init__(self, fullname, path, file=None):\n        super().__init__(fullname, path)\n        self.file = file\n    def get_data(self, path):\n        \"\"\"Gross hack to contort loader to deal w/ load_*()'s bad API.\"\"\"\n        if self.file and path == self.path:\n            with self.file:\n                return self.file.read()\n        else:\n            return super().get_data(path)\nclass _LoadSourceCompatibility(_HackedGetData, _bootstrap.SourceFileLoader):\n    \"\"\"Compatibility support for implementing load_source().\"\"\"\ndef load_source(name, pathname, file=None):\n    msg = ('imp.load_source() is deprecated; use '\n           'importlib.machinery.SourceFileLoader(name, pathname).load_module()'\n           ' instead')\n    warnings.warn(msg, DeprecationWarning, 2)\n    return _LoadSourceCompatibility(name, pathname, file).load_module(name)\nclass _LoadCompiledCompatibility(_HackedGetData,\n        _bootstrap.SourcelessFileLoader):\n    \"\"\"Compatibility support for implementing load_compiled().\"\"\"\ndef load_compiled(name, pathname, file=None):\n    msg = ('imp.load_compiled() is deprecated; use '\n           'importlib.machinery.SourcelessFileLoader(name, pathname).'\n           'load_module() instead ')\n    warnings.warn(msg, DeprecationWarning, 2)\n    return _LoadCompiledCompatibility(name, pathname, file).load_module(name)\ndef load_package(name, path):\n    msg = ('imp.load_package() is deprecated; use either '\n           'importlib.machinery.SourceFileLoader() or '\n           'importlib.machinery.SourcelessFileLoader() instead')\n    warnings.warn(msg, DeprecationWarning, 2)\n    if os.path.isdir(path):\n        extensions = (machinery.SOURCE_SUFFIXES[:] +\n                      machinery.BYTECODE_SUFFIXES[:])\n        for extension in extensions:\n            path = os.path.join(path, '__init__'+extension)\n            if os.path.exists(path):\n                break\n        else:\n            raise ValueError('{!r} is not a package'.format(path))\n    return _bootstrap.SourceFileLoader(name, path).load_module(name)\ndef load_module(name, file, filename, details):\n    \"\"\"**DEPRECATED**\n    Load a module, given information returned by find_module().\n    The module name must include the full package name, if any.\n    \"\"\"\n    suffix, mode, type_ = details\n    with warnings.catch_warnings():\n        warnings.simplefilter('ignore')\n        if mode and (not mode.startswith(('r', 'U')) or '+' in mode):\n            raise ValueError('invalid file open mode {!r}'.format(mode))\n        elif file is None and type_ in {PY_SOURCE, PY_COMPILED}:\n            msg = 'file object required for import (type code {})'.format(type_)\n            raise ValueError(msg)\n        elif type_ == PY_SOURCE:\n            return load_source(name, filename, file)\n        elif type_ == PY_COMPILED:\n            return load_compiled(name, filename, file)\n        elif type_ == PKG_DIRECTORY:\n            return load_package(name, filename)\n        elif type_ == C_BUILTIN:\n            return init_builtin(name)\n        elif type_ == PY_FROZEN:\n            return init_frozen(name)\n        else:\n            msg =  \"Don't know how to import {} (type code {}\".format(name, type_)\n            raise ImportError(msg, name=name)\ndef find_module(name, path=None):\n    \"\"\"**DEPRECATED**\n    Search for a module.\n    If path is omitted or None, search for a built-in, frozen or special\n    module and continue search in sys.path. The module name cannot\n    contain '.'; to search for a submodule of a package, pass the\n    submodule name and the package's __path__.\n    \"\"\"\n    if not isinstance(name, str):\n        raise TypeError(\"'name' must be a str, not {}\".format(type(name)))\n    elif not isinstance(path, (type(None), list)):\n        raise RuntimeError(\"'list' must be None or a list, \"\n                           \"not {}\".format(type(name)))\n    if path is None:\n        if is_builtin(name):\n            return None, None, ('', '', C_BUILTIN)\n        elif is_frozen(name):\n            return None, None, ('', '', PY_FROZEN)\n        else:\n            path = sys.path\n    for entry in path:\n        package_directory = os.path.join(entry, name)\n        for suffix in ['.py', machinery.BYTECODE_SUFFIXES[0]]:\n            package_file_name = '__init__' + suffix\n            file_path = os.path.join(package_directory, package_file_name)\n            if os.path.isfile(file_path):\n                return None, package_directory, ('', '', PKG_DIRECTORY)\n        with warnings.catch_warnings():\n            warnings.simplefilter('ignore')\n            for suffix, mode, type_ in get_suffixes():\n                file_name = name + suffix\n                file_path = os.path.join(entry, file_name)\n                if os.path.isfile(file_path):\n                    break\n            else:\n                continue\n            break  # Break out of outer loop when breaking out of inner loop.\n    else:\n        raise ImportError(_bootstrap._ERR_MSG.format(name), name=name)\n    encoding = None\n    if mode == 'U':\n        with open(file_path, 'rb') as file:\n            encoding = tokenize.detect_encoding(file.readline)[0]\n    file = open(file_path, mode, encoding=encoding)\n    return file, file_path, (suffix, mode, type_)\n_RELOADING = {}\ndef reload(module):\n    \"\"\"Reload the module and return it.\n    The module must have been successfully imported before.\n    \"\"\"\n    if not module or type(module) != type(sys):\n        raise TypeError(\"reload() argument must be module\")\n    name = module.__name__\n    if name not in sys.modules:\n        msg = \"module {} not in sys.modules\"\n        raise ImportError(msg.format(name), name=name)\n    if name in _RELOADING:\n        return _RELOADING[name]\n    _RELOADING[name] = module\n    try:\n        parent_name = name.rpartition('.')[0]\n        if parent_name and parent_name not in sys.modules:\n            msg = \"parent {!r} not in sys.modules\"\n            raise ImportError(msg.format(parentname), name=parent_name)\n        return module.__loader__.load_module(name)\n    finally:\n        try:\n            del _RELOADING[name]\n        except KeyError:\n            pass\n", "/Lib/urllib/__init__.py": "", "/Lib/unittest/runner.py": "\"\"\"Running tests\"\"\"\nimport sys\nimport time\nimport warnings\nfrom . import result\nfrom .signals import registerResult\n__unittest = True\nclass _WritelnDecorator(object):\n    \"\"\"Used to decorate file-like objects with a handy 'writeln' method\"\"\"\n    def __init__(self,stream):\n        self.stream = stream\n    def __getattr__(self, attr):\n        if attr in ('stream', '__getstate__'):\n            raise AttributeError(attr)\n        return getattr(self.stream,attr)\n    def writeln(self, arg=None):\n        if arg:\n            self.write(arg)\n        self.write('\\n') # text-mode streams translate to \\r\\n if needed\nclass TextTestResult(result.TestResult):\n    \"\"\"A test result class that can print formatted text results to a stream.\n    Used by TextTestRunner.\n    \"\"\"\n    separator1 = '=' * 70\n    separator2 = '-' * 70\n    def __init__(self, stream, descriptions, verbosity):\n        super(TextTestResult, self).__init__()\n        self.stream = stream\n        self.showAll = verbosity > 1\n        self.dots = verbosity == 1\n        self.descriptions = descriptions\n    def getDescription(self, test):\n        doc_first_line = test.shortDescription()\n        if self.descriptions and doc_first_line:\n            return '\\n'.join((str(test), doc_first_line))\n        else:\n            return str(test)\n    def startTest(self, test):\n        super(TextTestResult, self).startTest(test)\n        if self.showAll:\n            self.stream.write(self.getDescription(test))\n            self.stream.write(\" ... \")\n            self.stream.flush()\n    def addSuccess(self, test):\n        super(TextTestResult, self).addSuccess(test)\n        if self.showAll:\n            self.stream.writeln(\"ok\")\n        elif self.dots:\n            self.stream.write('.')\n            self.stream.flush()\n    def addError(self, test, err):\n        super(TextTestResult, self).addError(test, err)\n        if self.showAll:\n            self.stream.writeln(\"ERROR\")\n        elif self.dots:\n            self.stream.write('E')\n            self.stream.flush()\n    def addFailure(self, test, err):\n        super(TextTestResult, self).addFailure(test, err)\n        if self.showAll:\n            self.stream.writeln(\"FAIL\")\n        elif self.dots:\n            self.stream.write('F')\n            self.stream.flush()\n    def addSkip(self, test, reason):\n        super(TextTestResult, self).addSkip(test, reason)\n        if self.showAll:\n            self.stream.writeln(\"skipped {0!r}\".format(reason))\n        elif self.dots:\n            self.stream.write(\"s\")\n            self.stream.flush()\n    def addExpectedFailure(self, test, err):\n        super(TextTestResult, self).addExpectedFailure(test, err)\n        if self.showAll:\n            self.stream.writeln(\"expected failure\")\n        elif self.dots:\n            self.stream.write(\"x\")\n            self.stream.flush()\n    def addUnexpectedSuccess(self, test):\n        super(TextTestResult, self).addUnexpectedSuccess(test)\n        if self.showAll:\n            self.stream.writeln(\"unexpected success\")\n        elif self.dots:\n            self.stream.write(\"u\")\n            self.stream.flush()\n    def printErrors(self):\n        if self.dots or self.showAll:\n            self.stream.writeln()\n        self.printErrorList('ERROR', self.errors)\n        self.printErrorList('FAIL', self.failures)\n    def printErrorList(self, flavour, errors):\n        for test, err in errors:\n            self.stream.writeln(self.separator1)\n            self.stream.writeln(\"%s: %s\" % (flavour,self.getDescription(test)))\n            self.stream.writeln(self.separator2)\n            self.stream.writeln(\"%s\" % err)\nclass TextTestRunner(object):\n    \"\"\"A test runner class that displays results in textual form.\n    It prints out the names of tests as they are run, errors as they\n    occur, and a summary of the results at the end of the test run.\n    \"\"\"\n    resultclass = TextTestResult\n    def __init__(self, stream=None, descriptions=True, verbosity=1,\n                 failfast=False, buffer=False, resultclass=None, warnings=None):\n        if stream is None:\n            stream = sys.stderr\n        self.stream = _WritelnDecorator(stream)\n        self.descriptions = descriptions\n        self.verbosity = verbosity\n        self.failfast = failfast\n        self.buffer = buffer\n        self.warnings = warnings\n        if resultclass is not None:\n            self.resultclass = resultclass\n    def _makeResult(self):\n        return self.resultclass(self.stream, self.descriptions, self.verbosity)\n    def run(self, test):\n        \"Run the given test case or test suite.\"\n        result = self._makeResult()\n        registerResult(result)\n        result.failfast = self.failfast\n        result.buffer = self.buffer\n        with warnings.catch_warnings():\n            if self.warnings:\n                warnings.simplefilter(self.warnings)\n                if self.warnings in ['default', 'always']:\n                    warnings.filterwarnings('module',\n                            category=DeprecationWarning,\n                            message='Please use assert\\w+ instead.')\n            startTime = time.time()\n            startTestRun = getattr(result, 'startTestRun', None)\n            if startTestRun is not None:\n                startTestRun()\n            try:\n                test(result)\n            finally:\n                stopTestRun = getattr(result, 'stopTestRun', None)\n                if stopTestRun is not None:\n                    stopTestRun()\n            stopTime = time.time()\n        timeTaken = stopTime - startTime\n        result.printErrors()\n        if hasattr(result, 'separator2'):\n            self.stream.writeln(result.separator2)\n        run = result.testsRun\n        self.stream.writeln(\"Ran %d test%s in %.3fs\" %\n                            (run, run != 1 and \"s\" or \"\", timeTaken))\n        self.stream.writeln()\n        expectedFails = unexpectedSuccesses = skipped = 0\n        try:\n            results = map(len, (result.expectedFailures,\n                                result.unexpectedSuccesses,\n                                result.skipped))\n        except AttributeError:\n            pass\n        else:\n            expectedFails, unexpectedSuccesses, skipped = results\n        infos = []\n        if not result.wasSuccessful():\n            self.stream.write(\"FAILED\")\n            failed, errored = len(result.failures), len(result.errors)\n            if failed:\n                infos.append(\"failures=%d\" % failed)\n            if errored:\n                infos.append(\"errors=%d\" % errored)\n        else:\n            self.stream.write(\"OK\")\n        if skipped:\n            infos.append(\"skipped=%d\" % skipped)\n        if expectedFails:\n            infos.append(\"expected failures=%d\" % expectedFails)\n        if unexpectedSuccesses:\n            infos.append(\"unexpected successes=%d\" % unexpectedSuccesses)\n        if infos:\n            self.stream.writeln(\" (%s)\" % (\", \".join(infos),))\n        else:\n            self.stream.write(\"\\n\")\n        return result\n", "/Lib/browser/local_storage.py": "class LocalStorage:\n    def __init__(self):\n        if not __BRYTHON__.has_local_storage:\n            raise NameError('local storage is not supported by the browser')\n        self.store = __BRYTHON__.local_storage()\n    def __delitem__(self,key):\n        self.store.removeItem(key)\n    def __getitem__(self,key):\n        res=self.store.getItem(key)\n        if res:\n           return res\n        raise KeyError(key)\n    def __setitem__(self,key,value):\n        self.store.setItem(key,value)\n    def __contains__(self, key):\n        res=self.store.getItem(key)\n        if res:\n           return True\n        return False\n    def keys(self):\n        return list(self.store)\n    def values(self):\n        return [self.__getitem__(k) for k in self.keys()]\n    def items(self):\n        return zip(self.keys(),self.values())\nstorage = LocalStorage()\n", "/Lib/weakref.py": "\"\"\"Weak reference support for Python.\r\nThis module is an implementation of PEP 205:\r\nhttp://www.python.org/dev/peps/pep-0205/\r\n\"\"\"\r\nfrom _weakref import (\r\n     getweakrefcount,\r\n     getweakrefs,\r\n     ref,\r\n     proxy,\r\n     CallableProxyType,\r\n     ProxyType,\r\n     ReferenceType)\r\nfrom _weakrefset import WeakSet, _IterationGuard\r\nimport collections  # Import after _weakref to avoid circular import.\r\nProxyTypes = (ProxyType, CallableProxyType)\r\n__all__ = [\"ref\", \"proxy\", \"getweakrefcount\", \"getweakrefs\",\r\n           \"WeakKeyDictionary\", \"ReferenceType\", \"ProxyType\",\r\n           \"CallableProxyType\", \"ProxyTypes\", \"WeakValueDictionary\",\r\n           \"WeakSet\"]\r\nclass WeakValueDictionary(collections.MutableMapping):\r\n    \"\"\"Mapping class that references values weakly.\r\n    Entries in the dictionary will be discarded when no strong\r\n    reference to the value exists anymore\r\n    \"\"\"\r\n    def __init__(self, *args, **kw):\r\n        def remove(wr, selfref=ref(self)):\r\n            self = selfref()\r\n            if self is not None:\r\n                if self._iterating:\r\n                    self._pending_removals.append(wr.key)\r\n                else:\r\n                    del self.data[wr.key]\r\n        self._remove = remove\r\n        self._pending_removals = []\r\n        self._iterating = set()\r\n        self.data = d = {}\r\n        self.update(*args, **kw)\r\n    def _commit_removals(self):\r\n        l = self._pending_removals\r\n        d = self.data\r\n        while l:\r\n            del d[l.pop()]\r\n    def __getitem__(self, key):\r\n        o = self.data[key]()\r\n        if o is None:\r\n            raise KeyError(key)\r\n        else:\r\n            return o\r\n    def __delitem__(self, key):\r\n        if self._pending_removals:\r\n            self._commit_removals()\r\n        del self.data[key]\r\n    def __len__(self):\r\n        return len(self.data) - len(self._pending_removals)\r\n    def __contains__(self, key):\r\n        try:\r\n            o = self.data[key]()\r\n        except KeyError:\r\n            return False\r\n        return o is not None\r\n    def __repr__(self):\r\n        return \"<WeakValueDictionary at %s>\" % id(self)\r\n    def __setitem__(self, key, value):\r\n        if self._pending_removals:\r\n            self._commit_removals()\r\n        self.data[key] = KeyedRef(value, self._remove, key)\r\n    def copy(self):\r\n        new = WeakValueDictionary()\r\n        for key, wr in self.data.items():\r\n            o = wr()\r\n            if o is not None:\r\n                new[key] = o\r\n        return new\r\n    __copy__ = copy\r\n    def __deepcopy__(self, memo):\r\n        from copy import deepcopy\r\n        new = self.__class__()\r\n        for key, wr in self.data.items():\r\n            o = wr()\r\n            if o is not None:\r\n                new[deepcopy(key, memo)] = o\r\n        return new\r\n    def get(self, key, default=None):\r\n        try:\r\n            wr = self.data[key]\r\n        except KeyError:\r\n            return default\r\n        else:\r\n            o = wr()\r\n            if o is None:\r\n                return default\r\n            else:\r\n                return o\r\n    def items(self):\r\n        with _IterationGuard(self):\r\n            for k, wr in self.data.items():\r\n                v = wr()\r\n                if v is not None:\r\n                    yield k, v\r\n    def keys(self):\r\n        with _IterationGuard(self):\r\n            for k, wr in self.data.items():\r\n                if wr() is not None:\r\n                    yield k\r\n    __iter__ = keys\r\n    def itervaluerefs(self):\r\n        \"\"\"Return an iterator that yields the weak references to the values.\r\n        The references are not guaranteed to be 'live' at the time\r\n        they are used, so the result of calling the references needs\r\n        to be checked before being used.  This can be used to avoid\r\n        creating references that will cause the garbage collector to\r\n        keep the values around longer than needed.\r\n        \"\"\"\r\n        with _IterationGuard(self):\r\n            for wr in self.data.values():\r\n                yield wr\r\n    def values(self):\r\n        with _IterationGuard(self):\r\n            for wr in self.data.values():\r\n                obj = wr()\r\n                if obj is not None:\r\n                    yield obj\r\n    def popitem(self):\r\n        if self._pending_removals:\r\n            self._commit_removals()\r\n        while True:\r\n            key, wr = self.data.popitem()\r\n            o = wr()\r\n            if o is not None:\r\n                return key, o\r\n    def pop(self, key, *args):\r\n        if self._pending_removals:\r\n            self._commit_removals()\r\n        try:\r\n            o = self.data.pop(key)()\r\n        except KeyError:\r\n            if args:\r\n                return args[0]\r\n            raise\r\n        if o is None:\r\n            raise KeyError(key)\r\n        else:\r\n            return o\r\n    def setdefault(self, key, default=None):\r\n        try:\r\n            wr = self.data[key]\r\n        except KeyError:\r\n            if self._pending_removals:\r\n                self._commit_removals()\r\n            self.data[key] = KeyedRef(default, self._remove, key)\r\n            return default\r\n        else:\r\n            return wr()\r\n    def update(self, dict=None, **kwargs):\r\n        if self._pending_removals:\r\n            self._commit_removals()\r\n        d = self.data\r\n        if dict is not None:\r\n            if not hasattr(dict, \"items\"):\r\n                dict = type({})(dict)\r\n            for key, o in dict.items():\r\n                d[key] = KeyedRef(o, self._remove, key)\r\n        if len(kwargs):\r\n            self.update(kwargs)\r\n    def valuerefs(self):\r\n        \"\"\"Return a list of weak references to the values.\r\n        The references are not guaranteed to be 'live' at the time\r\n        they are used, so the result of calling the references needs\r\n        to be checked before being used.  This can be used to avoid\r\n        creating references that will cause the garbage collector to\r\n        keep the values around longer than needed.\r\n        \"\"\"\r\n        return list(self.data.values())\r\nclass KeyedRef(ref):\r\n    \"\"\"Specialized reference that includes a key corresponding to the value.\r\n    This is used in the WeakValueDictionary to avoid having to create\r\n    a function object for each key stored in the mapping.  A shared\r\n    callback object can use the 'key' attribute of a KeyedRef instead\r\n    of getting a reference to the key from an enclosing scope.\r\n    \"\"\"\r\n    __slots__ = \"key\",\r\n    def __new__(type, ob, callback, key):\r\n        self = ref.__new__(type, ob, callback)\r\n        self.key = key\r\n        return self\r\n    def __init__(self, ob, callback, key):\r\n        super().__init__(ob, callback)\r\nclass WeakKeyDictionary(collections.MutableMapping):\r\n    \"\"\" Mapping class that references keys weakly.\r\n    Entries in the dictionary will be discarded when there is no\r\n    longer a strong reference to the key. This can be used to\r\n    associate additional data with an object owned by other parts of\r\n    an application without adding attributes to those objects. This\r\n    can be especially useful with objects that override attribute\r\n    accesses.\r\n    \"\"\"\r\n    def __init__(self, dict=None):\r\n        self.data = {}\r\n        def remove(k, selfref=ref(self)):\r\n            self = selfref()\r\n            if self is not None:\r\n                if self._iterating:\r\n                    self._pending_removals.append(k)\r\n                else:\r\n                    del self.data[k]\r\n        self._remove = remove\r\n        self._pending_removals = []\r\n        self._iterating = set()\r\n        if dict is not None:\r\n            self.update(dict)\r\n    def _commit_removals(self):\r\n        l = self._pending_removals\r\n        d = self.data\r\n        while l:\r\n            try:\r\n                del d[l.pop()]\r\n            except KeyError:\r\n                pass\r\n    def __delitem__(self, key):\r\n        del self.data[ref(key)]\r\n    def __getitem__(self, key):\r\n        return self.data[ref(key)]\r\n    def __len__(self):\r\n        return len(self.data) - len(self._pending_removals)\r\n    def __repr__(self):\r\n        return \"<WeakKeyDictionary at %s>\" % id(self)\r\n    def __setitem__(self, key, value):\r\n        self.data[ref(key, self._remove)] = value\r\n    def copy(self):\r\n        new = WeakKeyDictionary()\r\n        for key, value in self.data.items():\r\n            o = key()\r\n            if o is not None:\r\n                new[o] = value\r\n        return new\r\n    __copy__ = copy\r\n    def __deepcopy__(self, memo):\r\n        from copy import deepcopy\r\n        new = self.__class__()\r\n        for key, value in self.data.items():\r\n            o = key()\r\n            if o is not None:\r\n                new[o] = deepcopy(value, memo)\r\n        return new\r\n    def get(self, key, default=None):\r\n        return self.data.get(ref(key),default)\r\n    def __contains__(self, key):\r\n        try:\r\n            wr = ref(key)\r\n        except TypeError:\r\n            return False\r\n        return wr in self.data\r\n    def items(self):\r\n        with _IterationGuard(self):\r\n            for wr, value in self.data.items():\r\n                key = wr()\r\n                if key is not None:\r\n                    yield key, value\r\n    def keys(self):\r\n        with _IterationGuard(self):\r\n            for wr in self.data:\r\n                obj = wr()\r\n                if obj is not None:\r\n                    yield obj\r\n    __iter__ = keys\r\n    def values(self):\r\n        with _IterationGuard(self):\r\n            for wr, value in self.data.items():\r\n                if wr() is not None:\r\n                    yield value\r\n    def keyrefs(self):\r\n        \"\"\"Return a list of weak references to the keys.\r\n        The references are not guaranteed to be 'live' at the time\r\n        they are used, so the result of calling the references needs\r\n        to be checked before being used.  This can be used to avoid\r\n        creating references that will cause the garbage collector to\r\n        keep the keys around longer than needed.\r\n        \"\"\"\r\n        return list(self.data)\r\n    def popitem(self):\r\n        while True:\r\n            key, value = self.data.popitem()\r\n            o = key()\r\n            if o is not None:\r\n                return o, value\r\n    def pop(self, key, *args):\r\n        return self.data.pop(ref(key), *args)\r\n    def setdefault(self, key, default=None):\r\n        return self.data.setdefault(ref(key, self._remove),default)\r\n    def update(self, dict=None, **kwargs):\r\n        d = self.data\r\n        if dict is not None:\r\n            if not hasattr(dict, \"items\"):\r\n                dict = type({})(dict)\r\n            for key, value in dict.items():\r\n                d[ref(key, self._remove)] = value\r\n        if len(kwargs):\r\n            self.update(kwargs)\r\n", "/Lib/ui/__init__.py": "from browser import html, doc as document\nfrom dialog import *\nfrom progressbar import *\nfrom slider import *\ndef add_stylesheet():\n    _link=html.LINK(Href='/src/Lib/ui/css/smoothness/jquery-ui-1.10.3.custom.min.css')\n    _link.rel='stylesheet'\n    doc <= _link     # document doesn't work here.. :( must use doc \n", "/Lib/queue.py": "'''A multi-producer, multi-consumer queue.'''\r\ntry:\r\n    import threading\r\nexcept ImportError:\r\n    import dummy_threading as threading\r\nfrom collections import deque\r\nfrom heapq import heappush, heappop\r\ntry:\r\n    from time import monotonic as time\r\nexcept ImportError:\r\n    from time import time\r\n__all__ = ['Empty', 'Full', 'Queue', 'PriorityQueue', 'LifoQueue']\r\nclass Empty(Exception):\r\n    'Exception raised by Queue.get(block=0)/get_nowait().'\r\n    pass\r\nclass Full(Exception):\r\n    'Exception raised by Queue.put(block=0)/put_nowait().'\r\n    pass\r\nclass Queue:\r\n    '''Create a queue object with a given maximum size.\r\n    If maxsize is <= 0, the queue size is infinite.\r\n    '''\r\n    def __init__(self, maxsize=0):\r\n        self.maxsize = maxsize\r\n        self._init(maxsize)\r\n        self.mutex = threading.Lock()\r\n        self.not_empty = threading.Condition(self.mutex)\r\n        self.not_full = threading.Condition(self.mutex)\r\n        self.all_tasks_done = threading.Condition(self.mutex)\r\n        self.unfinished_tasks = 0\r\n    def task_done(self):\r\n        '''Indicate that a formerly enqueued task is complete.\r\n        Used by Queue consumer threads.  For each get() used to fetch a task,\r\n        a subsequent call to task_done() tells the queue that the processing\r\n        on the task is complete.\r\n        If a join() is currently blocking, it will resume when all items\r\n        have been processed (meaning that a task_done() call was received\r\n        for every item that had been put() into the queue).\r\n        Raises a ValueError if called more times than there were items\r\n        placed in the queue.\r\n        '''\r\n        with self.all_tasks_done:\r\n            unfinished = self.unfinished_tasks - 1\r\n            if unfinished <= 0:\r\n                if unfinished < 0:\r\n                    raise ValueError('task_done() called too many times')\r\n                self.all_tasks_done.notify_all()\r\n            self.unfinished_tasks = unfinished\r\n    def join(self):\r\n        '''Blocks until all items in the Queue have been gotten and processed.\r\n        The count of unfinished tasks goes up whenever an item is added to the\r\n        queue. The count goes down whenever a consumer thread calls task_done()\r\n        to indicate the item was retrieved and all work on it is complete.\r\n        When the count of unfinished tasks drops to zero, join() unblocks.\r\n        '''\r\n        with self.all_tasks_done:\r\n            while self.unfinished_tasks:\r\n                self.all_tasks_done.wait()\r\n    def qsize(self):\r\n        '''Return the approximate size of the queue (not reliable!).'''\r\n        with self.mutex:\r\n            return self._qsize()\r\n    def empty(self):\r\n        '''Return True if the queue is empty, False otherwise (not reliable!).\r\n        This method is likely to be removed at some point.  Use qsize() == 0\r\n        as a direct substitute, but be aware that either approach risks a race\r\n        condition where a queue can grow before the result of empty() or\r\n        qsize() can be used.\r\n        To create code that needs to wait for all queued tasks to be\r\n        completed, the preferred technique is to use the join() method.\r\n        '''\r\n        with self.mutex:\r\n            return not self._qsize()\r\n    def full(self):\r\n        '''Return True if the queue is full, False otherwise (not reliable!).\r\n        This method is likely to be removed at some point.  Use qsize() >= n\r\n        as a direct substitute, but be aware that either approach risks a race\r\n        condition where a queue can shrink before the result of full() or\r\n        qsize() can be used.\r\n        '''\r\n        with self.mutex:\r\n            return 0 < self.maxsize <= self._qsize()\r\n    def put(self, item, block=True, timeout=None):\r\n        '''Put an item into the queue.\r\n        If optional args 'block' is true and 'timeout' is None (the default),\r\n        block if necessary until a free slot is available. If 'timeout' is\r\n        a positive number, it blocks at most 'timeout' seconds and raises\r\n        the Full exception if no free slot was available within that time.\r\n        Otherwise ('block' is false), put an item on the queue if a free slot\r\n        is immediately available, else raise the Full exception ('timeout'\r\n        is ignored in that case).\r\n        '''\r\n        with self.not_full:\r\n            if self.maxsize > 0:\r\n                if not block:\r\n                    if self._qsize() >= self.maxsize:\r\n                        raise Full\r\n                elif timeout is None:\r\n                    while self._qsize() >= self.maxsize:\r\n                        self.not_full.wait()\r\n                elif timeout < 0:\r\n                    raise ValueError(\"'timeout' must be a positive number\")\r\n                else:\r\n                    endtime = time() + timeout\r\n                    while self._qsize() >= self.maxsize:\r\n                        remaining = endtime - time()\r\n                        if remaining <= 0.0:\r\n                            raise Full\r\n                        self.not_full.wait(remaining)\r\n            self._put(item)\r\n            self.unfinished_tasks += 1\r\n            self.not_empty.notify()\r\n    def get(self, block=True, timeout=None):\r\n        '''Remove and return an item from the queue.\r\n        If optional args 'block' is true and 'timeout' is None (the default),\r\n        block if necessary until an item is available. If 'timeout' is\r\n        a positive number, it blocks at most 'timeout' seconds and raises\r\n        the Empty exception if no item was available within that time.\r\n        Otherwise ('block' is false), return an item if one is immediately\r\n        available, else raise the Empty exception ('timeout' is ignored\r\n        in that case).\r\n        '''\r\n        with self.not_empty:\r\n            if not block:\r\n                if not self._qsize():\r\n                    raise Empty\r\n            elif timeout is None:\r\n                while not self._qsize():\r\n                    self.not_empty.wait()\r\n            elif timeout < 0:\r\n                raise ValueError(\"'timeout' must be a positive number\")\r\n            else:\r\n                endtime = time() + timeout\r\n                while not self._qsize():\r\n                    remaining = endtime - time()\r\n                    if remaining <= 0.0:\r\n                        raise Empty\r\n                    self.not_empty.wait(remaining)\r\n            item = self._get()\r\n            self.not_full.notify()\r\n            return item\r\n    def put_nowait(self, item):\r\n        '''Put an item into the queue without blocking.\r\n        Only enqueue the item if a free slot is immediately available.\r\n        Otherwise raise the Full exception.\r\n        '''\r\n        return self.put(item, block=False)\r\n    def get_nowait(self):\r\n        '''Remove and return an item from the queue without blocking.\r\n        Only get an item if one is immediately available. Otherwise\r\n        raise the Empty exception.\r\n        '''\r\n        return self.get(block=False)\r\n    def _init(self, maxsize):\r\n        self.queue = deque()\r\n    def _qsize(self):\r\n        return len(self.queue)\r\n    def _put(self, item):\r\n        self.queue.append(item)\r\n    def _get(self):\r\n        return self.queue.popleft()\r\nclass PriorityQueue(Queue):\r\n    '''Variant of Queue that retrieves open entries in priority order (lowest first).\r\n    Entries are typically tuples of the form:  (priority number, data).\r\n    '''\r\n    def _init(self, maxsize):\r\n        self.queue = []\r\n    def _qsize(self):\r\n        return len(self.queue)\r\n    def _put(self, item):\r\n        heappush(self.queue, item)\r\n    def _get(self):\r\n        return heappop(self.queue)\r\nclass LifoQueue(Queue):\r\n    '''Variant of Queue that retrieves most recently added entries first.'''\r\n    def _init(self, maxsize):\r\n        self.queue = []\r\n    def _qsize(self):\r\n        return len(self.queue)\r\n    def _put(self, item):\r\n        self.queue.append(item)\r\n    def _get(self):\r\n        return self.queue.pop()\r\n", "/Lib/test/pystone.py": "\"\"\"\n\"PYSTONE\" Benchmark Program\nVersion:        Python/1.1 (corresponds to C/1.1 plus 2 Pystone fixes)\nAuthor:         Reinhold P. Weicker,  CACM Vol 27, No 10, 10/84 pg. 1013.\n                Translated from ADA to C by Rick Richardson.\n                Every method to preserve ADA-likeness has been used,\n                at the expense of C-ness.\n                Translated from C to Python by Guido van Rossum.\nVersion History:\n                Version 1.1 corrects two bugs in version 1.0:\n                First, it leaked memory: in Proc1(), NextRecord ends\n                up having a pointer to itself.  I have corrected this\n                by zapping NextRecord.PtrComp at the end of Proc1().\n                Second, Proc3() used the operator != to compare a\n                record to None.  This is rather inefficient and not\n                true to the intention of the original benchmark (where\n                a pointer comparison to None is intended; the !=\n                operator attempts to find a method __cmp__ to do value\n                comparison of the record).  Version 1.1 runs 5-10\n                percent faster than version 1.0, so benchmark figures\n                of different versions can't be compared directly.\n\"\"\"\nLOOPS = 50000\nfrom time import clock\n__version__ = \"1.1\"\n[Ident1, Ident2, Ident3, Ident4, Ident5] = range(1, 6)\nclass Record:\n    def __init__(self, PtrComp = None, Discr = 0, EnumComp = 0,\n                       IntComp = 0, StringComp = 0):\n        self.PtrComp = PtrComp\n        self.Discr = Discr\n        self.EnumComp = EnumComp\n        self.IntComp = IntComp\n        self.StringComp = StringComp\n    def copy(self):\n        return Record(self.PtrComp, self.Discr, self.EnumComp,\n                      self.IntComp, self.StringComp)\nTRUE = 1\nFALSE = 0\ndef main(loops=LOOPS):\n    benchtime, stones = pystones(loops)\n    print(\"Pystone(%s) time for %d passes = %g\" % \\\n          (__version__, loops, benchtime))\n    print(\"This machine benchmarks at %g pystones/second\" % stones)\ndef pystones(loops=LOOPS):\n    return Proc0(loops)\nIntGlob = 0\nBoolGlob = FALSE\nChar1Glob = '\\0'\nChar2Glob = '\\0'\nArray1Glob = [0]*51\nArray2Glob = [x[:] for x in [Array1Glob]*51]\nPtrGlb = None\nPtrGlbNext = None\ndef Proc0(loops=LOOPS):\n    global IntGlob\n    global BoolGlob\n    global Char1Glob\n    global Char2Glob\n    global Array1Glob\n    global Array2Glob\n    global PtrGlb\n    global PtrGlbNext\n    starttime = clock()\n    for i in range(loops):\n        pass\n    nulltime = clock() - starttime\n    PtrGlbNext = Record()\n    PtrGlb = Record()\n    PtrGlb.PtrComp = PtrGlbNext\n    PtrGlb.Discr = Ident1\n    PtrGlb.EnumComp = Ident3\n    PtrGlb.IntComp = 40\n    PtrGlb.StringComp = \"DHRYSTONE PROGRAM, SOME STRING\"\n    String1Loc = \"DHRYSTONE PROGRAM, 1'ST STRING\"\n    Array2Glob[8][7] = 10\n    starttime = clock()\n    for i in range(loops):\n        Proc5()\n        Proc4()\n        IntLoc1 = 2\n        IntLoc2 = 3\n        String2Loc = \"DHRYSTONE PROGRAM, 2'ND STRING\"\n        EnumLoc = Ident2\n        BoolGlob = not Func2(String1Loc, String2Loc)\n        while IntLoc1 < IntLoc2:\n            IntLoc3 = 5 * IntLoc1 - IntLoc2\n            IntLoc3 = Proc7(IntLoc1, IntLoc2)\n            IntLoc1 = IntLoc1 + 1\n        Proc8(Array1Glob, Array2Glob, IntLoc1, IntLoc3)\n        PtrGlb = Proc1(PtrGlb)\n        CharIndex = 'A'\n        while CharIndex <= Char2Glob:\n            if EnumLoc == Func1(CharIndex, 'C'):\n                EnumLoc = Proc6(Ident1)\n            CharIndex = chr(ord(CharIndex)+1)\n        IntLoc3 = IntLoc2 * IntLoc1\n        IntLoc2 = IntLoc3 / IntLoc1\n        IntLoc2 = 7 * (IntLoc3 - IntLoc2) - IntLoc1\n        IntLoc1 = Proc2(IntLoc1)\n    benchtime = clock() - starttime - nulltime\n    if benchtime == 0.0:\n        loopsPerBenchtime = 0.0\n    else:\n        loopsPerBenchtime = (loops / benchtime)\n    return benchtime, loopsPerBenchtime\ndef Proc1(PtrParIn):\n    PtrParIn.PtrComp = NextRecord = PtrGlb.copy()\n    PtrParIn.IntComp = 5\n    NextRecord.IntComp = PtrParIn.IntComp\n    NextRecord.PtrComp = PtrParIn.PtrComp\n    NextRecord.PtrComp = Proc3(NextRecord.PtrComp)\n    if NextRecord.Discr == Ident1:\n        NextRecord.IntComp = 6\n        NextRecord.EnumComp = Proc6(PtrParIn.EnumComp)\n        NextRecord.PtrComp = PtrGlb.PtrComp\n        NextRecord.IntComp = Proc7(NextRecord.IntComp, 10)\n    else:\n        PtrParIn = NextRecord.copy()\n    NextRecord.PtrComp = None\n    return PtrParIn\ndef Proc2(IntParIO):\n    IntLoc = IntParIO + 10\n    while 1:\n        if Char1Glob == 'A':\n            IntLoc = IntLoc - 1\n            IntParIO = IntLoc - IntGlob\n            EnumLoc = Ident1\n        if EnumLoc == Ident1:\n            break\n    return IntParIO\ndef Proc3(PtrParOut):\n    global IntGlob\n    if PtrGlb is not None:\n        PtrParOut = PtrGlb.PtrComp\n    else:\n        IntGlob = 100\n    PtrGlb.IntComp = Proc7(10, IntGlob)\n    return PtrParOut\ndef Proc4():\n    global Char2Glob\n    BoolLoc = Char1Glob == 'A'\n    BoolLoc = BoolLoc or BoolGlob\n    Char2Glob = 'B'\ndef Proc5():\n    global Char1Glob\n    global BoolGlob\n    Char1Glob = 'A'\n    BoolGlob = FALSE\ndef Proc6(EnumParIn):\n    EnumParOut = EnumParIn\n    if not Func3(EnumParIn):\n        EnumParOut = Ident4\n    if EnumParIn == Ident1:\n        EnumParOut = Ident1\n    elif EnumParIn == Ident2:\n        if IntGlob > 100:\n            EnumParOut = Ident1\n        else:\n            EnumParOut = Ident4\n    elif EnumParIn == Ident3:\n        EnumParOut = Ident2\n    elif EnumParIn == Ident4:\n        pass\n    elif EnumParIn == Ident5:\n        EnumParOut = Ident3\n    return EnumParOut\ndef Proc7(IntParI1, IntParI2):\n    IntLoc = IntParI1 + 2\n    IntParOut = IntParI2 + IntLoc\n    return IntParOut\ndef Proc8(Array1Par, Array2Par, IntParI1, IntParI2):\n    global IntGlob\n    IntLoc = IntParI1 + 5\n    Array1Par[IntLoc] = IntParI2\n    Array1Par[IntLoc+1] = Array1Par[IntLoc]\n    Array1Par[IntLoc+30] = IntLoc\n    for IntIndex in range(IntLoc, IntLoc+2):\n        Array2Par[IntLoc][IntIndex] = IntLoc\n    Array2Par[IntLoc][IntLoc-1] = Array2Par[IntLoc][IntLoc-1] + 1\n    Array2Par[IntLoc+20][IntLoc] = Array1Par[IntLoc]\n    IntGlob = 5\ndef Func1(CharPar1, CharPar2):\n    CharLoc1 = CharPar1\n    CharLoc2 = CharLoc1\n    if CharLoc2 != CharPar2:\n        return Ident1\n    else:\n        return Ident2\ndef Func2(StrParI1, StrParI2):\n    IntLoc = 1\n    while IntLoc <= 1:\n        if Func1(StrParI1[IntLoc], StrParI2[IntLoc+1]) == Ident1:\n            CharLoc = 'A'\n            IntLoc = IntLoc + 1\n    if CharLoc >= 'W' and CharLoc <= 'Z':\n        IntLoc = 7\n    if CharLoc == 'X':\n        return TRUE\n    else:\n        if StrParI1 > StrParI2:\n            IntLoc = IntLoc + 7\n            return TRUE\n        else:\n            return FALSE\ndef Func3(EnumParIn):\n    EnumLoc = EnumParIn\n    if EnumLoc == Ident3: return TRUE\n    return FALSE\nif __name__ == '__main__':\n    import sys\n    def error(msg):\n        print(msg, end=' ', file=sys.stderr)\n        print(\"usage: %s [number_of_loops]\" % sys.argv[0], file=sys.stderr)\n        sys.exit(100)\n    nargs = len(sys.argv) - 1\n    if nargs > 1:\n        error(\"%d arguments are too many;\" % nargs)\n    elif nargs == 1:\n        try: loops = int(sys.argv[1])\n        except ValueError:\n            error(\"Invalid argument %r;\" % sys.argv[1])\n    else:\n        loops = LOOPS\n    main(loops)\n", "/Lib/copyreg.py": "\"\"\"Helper to provide extensibility for pickle.\r\nThis is only useful to add pickle support for extension types defined in\r\nC, not for instances of user-defined classes.\r\n\"\"\"\r\n__all__ = [\"pickle\", \"constructor\",\r\n           \"add_extension\", \"remove_extension\", \"clear_extension_cache\"]\r\ndispatch_table = {}\r\ndef pickle(ob_type, pickle_function, constructor_ob=None):\r\n    if not callable(pickle_function):\r\n        raise TypeError(\"reduction functions must be callable\")\r\n    dispatch_table[ob_type] = pickle_function\r\n    if constructor_ob is not None:\r\n        constructor(constructor_ob)\r\ndef constructor(object):\r\n    if not callable(object):\r\n        raise TypeError(\"constructors must be callable\")\r\ntry:\r\n    complex\r\nexcept NameError:\r\n    pass\r\nelse:\r\n    def pickle_complex(c):\r\n        return complex, (c.real, c.imag)\r\n    pickle(complex, pickle_complex, complex)\r\ndef _reconstructor(cls, base, state):\r\n    if base is object:\r\n        obj = object.__new__(cls)\r\n    else:\r\n        obj = base.__new__(cls, state)\r\n        if base.__init__ != object.__init__:\r\n            base.__init__(obj, state)\r\n    return obj\r\n_HEAPTYPE = 1<<9\r\ndef _reduce_ex(self, proto):\r\n    assert proto < 2\r\n    for base in self.__class__.__mro__:\r\n        if hasattr(base, '__flags__') and not base.__flags__ & _HEAPTYPE:\r\n            break\r\n    else:\r\n        base = object # not really reachable\r\n    if base is object:\r\n        state = None\r\n    else:\r\n        if base is self.__class__:\r\n            raise TypeError(\"can't pickle %s objects\" % base.__name__)\r\n        state = base(self)\r\n    args = (self.__class__, base, state)\r\n    try:\r\n        getstate = self.__getstate__\r\n    except AttributeError:\r\n        if getattr(self, \"__slots__\", None):\r\n            raise TypeError(\"a class that defines __slots__ without \"\r\n                            \"defining __getstate__ cannot be pickled\")\r\n        try:\r\n            dict = self.__dict__\r\n        except AttributeError:\r\n            dict = None\r\n    else:\r\n        dict = getstate()\r\n    if dict:\r\n        return _reconstructor, args, dict\r\n    else:\r\n        return _reconstructor, args\r\ndef __newobj__(cls, *args):\r\n    return cls.__new__(cls, *args)\r\ndef _slotnames(cls):\r\n    \"\"\"Return a list of slot names for a given class.\r\n    This needs to find slots defined by the class and its bases, so we\r\n    can't simply return the __slots__ attribute.  We must walk down\r\n    the Method Resolution Order and concatenate the __slots__ of each\r\n    class found there.  (This assumes classes don't modify their\r\n    __slots__ attribute to misrepresent their slots after the class is\r\n    defined.)\r\n    \"\"\"\r\n    names = cls.__dict__.get(\"__slotnames__\")\r\n    if names is not None:\r\n        return names\r\n    names = []\r\n    if not hasattr(cls, \"__slots__\"):\r\n        pass\r\n    else:\r\n        for c in cls.__mro__:\r\n            if \"__slots__\" in c.__dict__:\r\n                slots = c.__dict__['__slots__']\r\n                if isinstance(slots, str):\r\n                    slots = (slots,)\r\n                for name in slots:\r\n                    if name in (\"__dict__\", \"__weakref__\"):\r\n                        continue\r\n                    elif name.startswith('__') and not name.endswith('__'):\r\n                        names.append('_%s%s' % (c.__name__, name))\r\n                    else:\r\n                        names.append(name)\r\n    try:\r\n        cls.__slotnames__ = names\r\n    except:\r\n        pass # But don't die if we can't\r\n    return names\r\n_extension_registry = {}                # key -> code\r\n_inverted_registry = {}                 # code -> key\r\n_extension_cache = {}                   # code -> object\r\ndef add_extension(module, name, code):\r\n    \"\"\"Register an extension code.\"\"\"\r\n    code = int(code)\r\n    if not 1 <= code <= 0x7fffffff:\r\n        raise ValueError(\"code out of range\")\r\n    key = (module, name)\r\n    if (_extension_registry.get(key) == code and\r\n        _inverted_registry.get(code) == key):\r\n        return # Redundant registrations are benign\r\n    if key in _extension_registry:\r\n        raise ValueError(\"key %s is already registered with code %s\" %\r\n                         (key, _extension_registry[key]))\r\n    if code in _inverted_registry:\r\n        raise ValueError(\"code %s is already in use for key %s\" %\r\n                         (code, _inverted_registry[code]))\r\n    _extension_registry[key] = code\r\n    _inverted_registry[code] = key\r\ndef remove_extension(module, name, code):\r\n    \"\"\"Unregister an extension code.  For testing only.\"\"\"\r\n    key = (module, name)\r\n    if (_extension_registry.get(key) != code or\r\n        _inverted_registry.get(code) != key):\r\n        raise ValueError(\"key %s is not registered with code %s\" %\r\n                         (key, code))\r\n    del _extension_registry[key]\r\n    del _inverted_registry[code]\r\n    if code in _extension_cache:\r\n        del _extension_cache[code]\r\ndef clear_extension_cache():\r\n    _extension_cache.clear()\r\n", "/Lib/pprint.py": "\"\"\"Support to pretty-print lists, tuples, & dictionaries recursively.\r\nVery simple, but useful, especially in debugging data structures.\r\nClasses\r\n-------\r\nPrettyPrinter()\r\n    Handle pretty-printing operations onto a stream using a configured\r\n    set of formatting parameters.\r\nFunctions\r\n---------\r\npformat()\r\n    Format a Python object into a pretty-printed representation.\r\npprint()\r\n    Pretty-print a Python object to a stream [default is sys.stdout].\r\nsaferepr()\r\n    Generate a 'standard' repr()-like value, but protect against recursive\r\n    data structures.\r\n\"\"\"\r\nimport sys as _sys\r\nfrom collections import OrderedDict as _OrderedDict\r\nfrom io import StringIO as _StringIO\r\n__all__ = [\"pprint\",\"pformat\",\"isreadable\",\"isrecursive\",\"saferepr\",\r\n           \"PrettyPrinter\"]\r\n_commajoin = \", \".join\r\n_id = id\r\n_len = len\r\n_type = type\r\ndef pprint(object, stream=None, indent=1, width=80, depth=None):\r\n    \"\"\"Pretty-print a Python object to a stream [default is sys.stdout].\"\"\"\r\n    printer = PrettyPrinter(\r\n        stream=stream, indent=indent, width=width, depth=depth)\r\n    printer.pprint(object)\r\ndef pformat(object, indent=1, width=80, depth=None):\r\n    \"\"\"Format a Python object into a pretty-printed representation.\"\"\"\r\n    return PrettyPrinter(indent=indent, width=width, depth=depth).pformat(object)\r\ndef saferepr(object):\r\n    \"\"\"Version of repr() which can handle recursive data structures.\"\"\"\r\n    return _safe_repr(object, {}, None, 0)[0]\r\ndef isreadable(object):\r\n    \"\"\"Determine if saferepr(object) is readable by eval().\"\"\"\r\n    return _safe_repr(object, {}, None, 0)[1]\r\ndef isrecursive(object):\r\n    \"\"\"Determine if object requires a recursive representation.\"\"\"\r\n    return _safe_repr(object, {}, None, 0)[2]\r\nclass _safe_key:\r\n    \"\"\"Helper function for key functions when sorting unorderable objects.\r\n    The wrapped-object will fallback to an Py2.x style comparison for\r\n    unorderable types (sorting first comparing the type name and then by\r\n    the obj ids).  Does not work recursively, so dict.items() must have\r\n    _safe_key applied to both the key and the value.\r\n    \"\"\"\r\n    __slots__ = ['obj']\r\n    def __init__(self, obj):\r\n        self.obj = obj\r\n    def __lt__(self, other):\r\n        try:\r\n            rv = self.obj.__lt__(other.obj)\r\n        except TypeError:\r\n            rv = NotImplemented\r\n        if rv is NotImplemented:\r\n            rv = (str(type(self.obj)), id(self.obj)) < \\\r\n                 (str(type(other.obj)), id(other.obj))\r\n        return rv\r\ndef _safe_tuple(t):\r\n    \"Helper function for comparing 2-tuples\"\r\n    return _safe_key(t[0]), _safe_key(t[1])\r\nclass PrettyPrinter:\r\n    def __init__(self, indent=1, width=80, depth=None, stream=None):\r\n        \"\"\"Handle pretty printing operations onto a stream using a set of\r\n        configured parameters.\r\n        indent\r\n            Number of spaces to indent for each level of nesting.\r\n        width\r\n            Attempted maximum number of columns in the output.\r\n        depth\r\n            The maximum depth to print out nested structures.\r\n        stream\r\n            The desired output stream.  If omitted (or false), the standard\r\n            output stream available at construction will be used.\r\n        \"\"\"\r\n        indent = int(indent)\r\n        width = int(width)\r\n        assert indent >= 0, \"indent must be >= 0\"\r\n        assert depth is None or depth > 0, \"depth must be > 0\"\r\n        assert width, \"width must be != 0\"\r\n        self._depth = depth\r\n        self._indent_per_level = indent\r\n        self._width = width\r\n        if stream is not None:\r\n            self._stream = stream\r\n        else:\r\n            self._stream = _sys.stdout\r\n    def pprint(self, object):\r\n        self._format(object, self._stream, 0, 0, {}, 0)\r\n        self._stream.write(\"\\n\")\r\n    def pformat(self, object):\r\n        sio = _StringIO()\r\n        self._format(object, sio, 0, 0, {}, 0)\r\n        return sio.getvalue()\r\n    def isrecursive(self, object):\r\n        return self.format(object, {}, 0, 0)[2]\r\n    def isreadable(self, object):\r\n        s, readable, recursive = self.format(object, {}, 0, 0)\r\n        return readable and not recursive\r\n    def _format(self, object, stream, indent, allowance, context, level):\r\n        level = level + 1\r\n        objid = _id(object)\r\n        if objid in context:\r\n            stream.write(_recursion(object))\r\n            self._recursive = True\r\n            self._readable = False\r\n            return\r\n        rep = self._repr(object, context, level - 1)\r\n        typ = _type(object)\r\n        sepLines = _len(rep) > (self._width - 1 - indent - allowance)\r\n        write = stream.write\r\n        if self._depth and level > self._depth:\r\n            write(rep)\r\n            return\r\n        if sepLines:\r\n            r = getattr(typ, \"__repr__\", None)\r\n            if issubclass(typ, dict):\r\n                write('{')\r\n                if self._indent_per_level > 1:\r\n                    write((self._indent_per_level - 1) * ' ')\r\n                length = _len(object)\r\n                if length:\r\n                    context[objid] = 1\r\n                    indent = indent + self._indent_per_level\r\n                    if issubclass(typ, _OrderedDict):\r\n                        items = list(object.items())\r\n                    else:\r\n                        items = sorted(object.items(), key=_safe_tuple)\r\n                    key, ent = items[0]\r\n                    rep = self._repr(key, context, level)\r\n                    write(rep)\r\n                    write(': ')\r\n                    self._format(ent, stream, indent + _len(rep) + 2,\r\n                                  allowance + 1, context, level)\r\n                    if length > 1:\r\n                        for key, ent in items[1:]:\r\n                            rep = self._repr(key, context, level)\r\n                            write(',\\n%s%s: ' % (' '*indent, rep))\r\n                            self._format(ent, stream, indent + _len(rep) + 2,\r\n                                          allowance + 1, context, level)\r\n                    indent = indent - self._indent_per_level\r\n                    del context[objid]\r\n                write('}')\r\n                return\r\n            if ((issubclass(typ, list) and r is list.__repr__) or\r\n                (issubclass(typ, tuple) and r is tuple.__repr__) or\r\n                (issubclass(typ, set) and r is set.__repr__) or\r\n                (issubclass(typ, frozenset) and r is frozenset.__repr__)\r\n               ):\r\n                length = _len(object)\r\n                if issubclass(typ, list):\r\n                    write('[')\r\n                    endchar = ']'\r\n                elif issubclass(typ, set):\r\n                    if not length:\r\n                        write('set()')\r\n                        return\r\n                    write('{')\r\n                    endchar = '}'\r\n                    object = sorted(object, key=_safe_key)\r\n                elif issubclass(typ, frozenset):\r\n                    if not length:\r\n                        write('frozenset()')\r\n                        return\r\n                    write('frozenset({')\r\n                    endchar = '})'\r\n                    object = sorted(object, key=_safe_key)\r\n                    indent += 10\r\n                else:\r\n                    write('(')\r\n                    endchar = ')'\r\n                if self._indent_per_level > 1:\r\n                    write((self._indent_per_level - 1) * ' ')\r\n                if length:\r\n                    context[objid] = 1\r\n                    indent = indent + self._indent_per_level\r\n                    self._format(object[0], stream, indent, allowance + 1,\r\n                                 context, level)\r\n                    if length > 1:\r\n                        for ent in object[1:]:\r\n                            write(',\\n' + ' '*indent)\r\n                            self._format(ent, stream, indent,\r\n                                          allowance + 1, context, level)\r\n                    indent = indent - self._indent_per_level\r\n                    del context[objid]\r\n                if issubclass(typ, tuple) and length == 1:\r\n                    write(',')\r\n                write(endchar)\r\n                return\r\n        write(rep)\r\n    def _repr(self, object, context, level):\r\n        repr, readable, recursive = self.format(object, context.copy(),\r\n                                                self._depth, level)\r\n        if not readable:\r\n            self._readable = False\r\n        if recursive:\r\n            self._recursive = True\r\n        return repr\r\n    def format(self, object, context, maxlevels, level):\r\n        \"\"\"Format object for a specific context, returning a string\r\n        and flags indicating whether the representation is 'readable'\r\n        and whether the object represents a recursive construct.\r\n        \"\"\"\r\n        return _safe_repr(object, context, maxlevels, level)\r\ndef _safe_repr(object, context, maxlevels, level):\r\n    typ = _type(object)\r\n    if typ is str:\r\n        if 'locale' not in _sys.modules:\r\n            return repr(object), True, False\r\n        if \"'\" in object and '\"' not in object:\r\n            closure = '\"'\r\n            quotes = {'\"': '\\\\\"'}\r\n        else:\r\n            closure = \"'\"\r\n            quotes = {\"'\": \"\\\\'\"}\r\n        qget = quotes.get\r\n        sio = _StringIO()\r\n        write = sio.write\r\n        for char in object:\r\n            if char.isalpha():\r\n                write(char)\r\n            else:\r\n                write(qget(char, repr(char)[1:-1]))\r\n        return (\"%s%s%s\" % (closure, sio.getvalue(), closure)), True, False\r\n    r = getattr(typ, \"__repr__\", None)\r\n    if issubclass(typ, dict) and r is dict.__repr__:\r\n        if not object:\r\n            return \"{}\", True, False\r\n        objid = _id(object)\r\n        if maxlevels and level >= maxlevels:\r\n            return \"{...}\", False, objid in context\r\n        if objid in context:\r\n            return _recursion(object), False, True\r\n        context[objid] = 1\r\n        readable = True\r\n        recursive = False\r\n        components = []\r\n        append = components.append\r\n        level += 1\r\n        saferepr = _safe_repr\r\n        items = sorted(object.items(), key=_safe_tuple)\r\n        for k, v in items:\r\n            krepr, kreadable, krecur = saferepr(k, context, maxlevels, level)\r\n            vrepr, vreadable, vrecur = saferepr(v, context, maxlevels, level)\r\n            append(\"%s: %s\" % (krepr, vrepr))\r\n            readable = readable and kreadable and vreadable\r\n            if krecur or vrecur:\r\n                recursive = True\r\n        del context[objid]\r\n        return \"{%s}\" % _commajoin(components), readable, recursive\r\n    if (issubclass(typ, list) and r is list.__repr__) or \\\r\n       (issubclass(typ, tuple) and r is tuple.__repr__):\r\n        if issubclass(typ, list):\r\n            if not object:\r\n                return \"[]\", True, False\r\n            format = \"[%s]\"\r\n        elif _len(object) == 1:\r\n            format = \"(%s,)\"\r\n        else:\r\n            if not object:\r\n                return \"()\", True, False\r\n            format = \"(%s)\"\r\n        objid = _id(object)\r\n        if maxlevels and level >= maxlevels:\r\n            return format % \"...\", False, objid in context\r\n        if objid in context:\r\n            return _recursion(object), False, True\r\n        context[objid] = 1\r\n        readable = True\r\n        recursive = False\r\n        components = []\r\n        append = components.append\r\n        level += 1\r\n        for o in object:\r\n            orepr, oreadable, orecur = _safe_repr(o, context, maxlevels, level)\r\n            append(orepr)\r\n            if not oreadable:\r\n                readable = False\r\n            if orecur:\r\n                recursive = True\r\n        del context[objid]\r\n        return format % _commajoin(components), readable, recursive\r\n    rep = repr(object)\r\n    return rep, (rep and not rep.startswith('<')), False\r\ndef _recursion(object):\r\n    return (\"<Recursion on %s with id=%s>\"\r\n            % (_type(object).__name__, _id(object)))\r\ndef _perfcheck(object=None):\r\n    import time\r\n    if object is None:\r\n        object = [(\"string\", (1, 2), [3, 4], {5: 6, 7: 8})] * 100000\r\n    p = PrettyPrinter()\r\n    t1 = time.time()\r\n    _safe_repr(object, {}, None, 0)\r\n    t2 = time.time()\r\n    p.pformat(object)\r\n    t3 = time.time()\r\n    print(\"_safe_repr:\", t2 - t1)\r\n    print(\"pformat:\", t3 - t2)\r\nif __name__ == \"__main__\":\r\n    _perfcheck()\r\n", "/Lib/_weakref.py": "class ProxyType:\n    def __init__(self,obj):\n        self.obj = obj\nCallableProxyType = ProxyType\nProxyTypes = [ProxyType,CallableProxyType]\nclass ReferenceType:\n    def __init__(self,obj,callback):\n        self.obj = obj\n        self.callback = callback\nclass ref:\n    def __init__(self,obj,callback=None):\n        self.obj = ReferenceType(obj,callback)\n        self.callback=callback\ndef getweakrefcount(obj):\n    return 1\ndef getweakrefs(obj):\n    return obj\ndef proxy(obj,callback):\n    return ProxyType(obj)\n", "/Lib/_codecs.py": "def ascii_decode(*args,**kw):\n    pass\ndef ascii_encode(*args,**kw):\n    pass\ndef charbuffer_encode(*args,**kw):\n    pass\ndef charmap_build(*args,**kw):\n    pass\ndef charmap_decode(*args,**kw):\n    pass\ndef charmap_encode(*args,**kw):\n    pass\ndef decode(*args,**kw):\n    \"\"\"decode(obj, [encoding[,errors]]) -> object    \n    Decodes obj using the codec registered for encoding. encoding defaults\n    to the default encoding. errors may be given to set a different error\n    handling scheme. Default is 'strict' meaning that encoding errors raise\n    a ValueError. Other possible values are 'ignore' and 'replace'\n    as well as any other name registered with codecs.register_error that is\n    able to handle ValueErrors.\"\"\"\n    pass\ndef encode(*args,**kw):\n    \"\"\"encode(obj, [encoding[,errors]]) -> object    \n    Encodes obj using the codec registered for encoding. encoding defaults\n    to the default encoding. errors may be given to set a different error\n    handling scheme. Default is 'strict' meaning that encoding errors raise\n    a ValueError. Other possible values are 'ignore', 'replace' and\n    'xmlcharrefreplace' as well as any other name registered with\n    codecs.register_error that can handle ValueErrors.\"\"\"\n    pass\ndef escape_decode(*args,**kw):\n    pass\ndef escape_encode(*args,**kw):\n    pass\ndef latin_1_decode(*args,**kw):\n    pass\ndef latin_1_encode(*args,**kw):\n    pass\ndef lookup(encoding):\n    \"\"\"lookup(encoding) -> CodecInfo    \n    Looks up a codec tuple in the Python codec registry and returns\n    a CodecInfo object.\"\"\"\n    print('_codecs lookup',encoding)\n    return encoding\ndef lookup_error(*args,**kw):\n    \"\"\"lookup_error(errors) -> handler    \n    Return the error handler for the specified error handling name\n    or raise a LookupError, if no handler exists under this name.\"\"\"\n    pass\ndef mbcs_decode(*args,**kw):\n    pass\ndef mbcs_encode(*args,**kw):\n    pass\ndef raw_unicode_escape_decode(*args,**kw):\n    pass\ndef raw_unicode_escape_encode(*args,**kw):\n    pass\ndef readbuffer_encode(*args,**kw):\n    pass\ndef register(*args,**kw):\n    \"\"\"register(search_function)    \n    Register a codec search function. Search functions are expected to take\n    one argument, the encoding name in all lower case letters, and return\n    a tuple of functions (encoder, decoder, stream_reader, stream_writer)\n    (or a CodecInfo object).\"\"\"\n    pass\ndef register_error(*args,**kw):\n    \"\"\"register_error(errors, handler)    \n    Register the specified error handler under the name\n    errors. handler must be a callable object, that\n    will be called with an exception instance containing\n    information about the location of the encoding/decoding\n    error and must return a (replacement, new position) tuple.\"\"\"\n    pass\ndef unicode_escape_decode(*args,**kw):\n    pass\ndef unicode_escape_encode(*args,**kw):\n    pass\ndef unicode_internal_decode(*args,**kw):\n    pass\ndef unicode_internal_encode(*args,**kw):\n    pass\ndef utf_16_be_decode(*args,**kw):\n    pass\ndef utf_16_be_encode(*args,**kw):\n    pass\ndef utf_16_decode(*args,**kw):\n    pass\ndef utf_16_encode(*args,**kw):\n    pass\ndef utf_16_ex_decode(*args,**kw):\n    pass\ndef utf_16_le_decode(*args,**kw):\n    pass\ndef utf_16_le_encode(*args,**kw):\n    pass\ndef utf_32_be_decode(*args,**kw):\n    pass\ndef utf_32_be_encode(*args,**kw):\n    pass\ndef utf_32_decode(*args,**kw):\n    pass\ndef utf_32_encode(*args,**kw):\n    pass\ndef utf_32_ex_decode(*args,**kw):\n    pass\ndef utf_32_le_decode(*args,**kw):\n    pass\ndef utf_32_le_encode(*args,**kw):\n    pass\ndef utf_7_decode(*args,**kw):\n    pass\ndef utf_7_encode(*args,**kw):\n    pass\ndef utf_8_decode(*args,**kw):\n    pass\ndef utf_8_encode(*args,**kw):\n    pass\n", "/Lib/unittest/result.py": "\"\"\"Test result object\"\"\"\nimport io\nimport sys\nimport traceback\nfrom . import util\nfrom functools import wraps\n__unittest = True\ndef failfast(method):\n    @wraps(method)\n    def inner(self, *args, **kw):\n        if getattr(self, 'failfast', False):\n            self.stop()\n        return method(self, *args, **kw)\n    return inner\nSTDOUT_LINE = '\\nStdout:\\n%s'\nSTDERR_LINE = '\\nStderr:\\n%s'\nclass TestResult(object):\n    \"\"\"Holder for test result information.\n    Test results are automatically managed by the TestCase and TestSuite\n    classes, and do not need to be explicitly manipulated by writers of tests.\n    Each instance holds the total number of tests run, and collections of\n    failures and errors that occurred among those test runs. The collections\n    contain tuples of (testcase, exceptioninfo), where exceptioninfo is the\n    formatted traceback of the error that occurred.\n    \"\"\"\n    _previousTestClass = None\n    _testRunEntered = False\n    _moduleSetUpFailed = False\n    def __init__(self, stream=None, descriptions=None, verbosity=None):\n        self.failfast = False\n        self.failures = []\n        self.errors = []\n        self.testsRun = 0\n        self.skipped = []\n        self.expectedFailures = []\n        self.unexpectedSuccesses = []\n        self.shouldStop = False\n        self.buffer = False\n        self._stdout_buffer = None\n        self._stderr_buffer = None\n        self._original_stdout = sys.stdout\n        self._original_stderr = sys.stderr\n        self._mirrorOutput = False\n    def printErrors(self):\n        \"Called by TestRunner after test run\"\n    def startTest(self, test):\n        \"Called when the given test is about to be run\"\n        self.testsRun += 1\n        self._mirrorOutput = False\n        self._setupStdout()\n    def _setupStdout(self):\n        if self.buffer:\n            if self._stderr_buffer is None:\n                self._stderr_buffer = io.StringIO()\n                self._stdout_buffer = io.StringIO()\n            sys.stdout = self._stdout_buffer\n            sys.stderr = self._stderr_buffer\n    def startTestRun(self):\n        \"\"\"Called once before any tests are executed.\n        See startTest for a method called before each test.\n        \"\"\"\n    def stopTest(self, test):\n        \"\"\"Called when the given test has been run\"\"\"\n        self._restoreStdout()\n        self._mirrorOutput = False\n    def _restoreStdout(self):\n        if self.buffer:\n            if self._mirrorOutput:\n                output = sys.stdout.getvalue()\n                error = sys.stderr.getvalue()\n                if output:\n                    if not output.endswith('\\n'):\n                        output += '\\n'\n                    self._original_stdout.write(STDOUT_LINE % output)\n                if error:\n                    if not error.endswith('\\n'):\n                        error += '\\n'\n                    self._original_stderr.write(STDERR_LINE % error)\n            sys.stdout = self._original_stdout\n            sys.stderr = self._original_stderr\n            self._stdout_buffer.seek(0)\n            self._stdout_buffer.truncate()\n            self._stderr_buffer.seek(0)\n            self._stderr_buffer.truncate()\n    def stopTestRun(self):\n        \"\"\"Called once after all tests are executed.\n        See stopTest for a method called after each test.\n        \"\"\"\n    @failfast\n    def addError(self, test, err):\n        \"\"\"Called when an error has occurred. 'err' is a tuple of values as\n        returned by sys.exc_info().\n        \"\"\"\n        self.errors.append((test, self._exc_info_to_string(err, test)))\n        self._mirrorOutput = True\n    @failfast\n    def addFailure(self, test, err):\n        \"\"\"Called when an error has occurred. 'err' is a tuple of values as\n        returned by sys.exc_info().\"\"\"\n        self.failures.append((test, self._exc_info_to_string(err, test)))\n        self._mirrorOutput = True\n    def addSuccess(self, test):\n        \"Called when a test has completed successfully\"\n        pass\n    def addSkip(self, test, reason):\n        \"\"\"Called when a test is skipped.\"\"\"\n        self.skipped.append((test, reason))\n    def addExpectedFailure(self, test, err):\n        \"\"\"Called when an expected failure/error occured.\"\"\"\n        self.expectedFailures.append(\n            (test, self._exc_info_to_string(err, test)))\n    @failfast\n    def addUnexpectedSuccess(self, test):\n        \"\"\"Called when a test was expected to fail, but succeed.\"\"\"\n        self.unexpectedSuccesses.append(test)\n    def wasSuccessful(self):\n        \"Tells whether or not this result was a success\"\n        return len(self.failures) == len(self.errors) == 0\n    def stop(self):\n        \"Indicates that the tests should be aborted\"\n        self.shouldStop = True\n    def _exc_info_to_string(self, err, test):\n        \"\"\"Converts a sys.exc_info()-style tuple of values into a string.\"\"\"\n        exctype, value, tb = err\n        while tb and self._is_relevant_tb_level(tb):\n            tb = tb.tb_next\n        if exctype is test.failureException:\n            length = self._count_relevant_tb_levels(tb)\n            msgLines = traceback.format_exception(exctype, value, tb, length)\n        else:\n            msgLines = traceback.format_exception(exctype, value, tb)\n        if self.buffer:\n            output = sys.stdout.getvalue()\n            error = sys.stderr.getvalue()\n            if output:\n                if not output.endswith('\\n'):\n                    output += '\\n'\n                msgLines.append(STDOUT_LINE % output)\n            if error:\n                if not error.endswith('\\n'):\n                    error += '\\n'\n                msgLines.append(STDERR_LINE % error)\n        return ''.join(msgLines)\n    def _is_relevant_tb_level(self, tb):\n        return '__unittest' in tb.tb_frame.f_globals\n    def _count_relevant_tb_levels(self, tb):\n        length = 0\n        while tb and not self._is_relevant_tb_level(tb):\n            length += 1\n            tb = tb.tb_next\n        return length\n    def __repr__(self):\n        return (\"<%s run=%i errors=%i failures=%i>\" %\n               (util.strclass(self.__class__), self.testsRun, len(self.errors),\n                len(self.failures)))\n", "/Lib/browser/svg.py": "from _svg import *", "/Lib/_threading_local.py": "\"\"\"Thread-local objects.\r\n(Note that this module provides a Python version of the threading.local\r\n class.  Depending on the version of Python you're using, there may be a\r\n faster one available.  You should always import the `local` class from\r\n `threading`.)\r\nThread-local objects support the management of thread-local data.\r\nIf you have data that you want to be local to a thread, simply create\r\na thread-local object and use its attributes:\r\n  >>> mydata = local()\r\n  >>> mydata.number = 42\r\n  >>> mydata.number\r\n  42\r\nYou can also access the local-object's dictionary:\r\n  >>> mydata.__dict__\r\n  {'number': 42}\r\n  >>> mydata.__dict__.setdefault('widgets', [])\r\n  []\r\n  >>> mydata.widgets\r\n  []\r\nWhat's important about thread-local objects is that their data are\r\nlocal to a thread. If we access the data in a different thread:\r\n  >>> log = []\r\n  >>> def f():\r\n  ...     items = sorted(mydata.__dict__.items())\r\n  ...     log.append(items)\r\n  ...     mydata.number = 11\r\n  ...     log.append(mydata.number)\r\n  >>> import threading\r\n  >>> thread = threading.Thread(target=f)\r\n  >>> thread.start()\r\n  >>> thread.join()\r\n  >>> log\r\n  [[], 11]\r\nwe get different data.  Furthermore, changes made in the other thread\r\ndon't affect data seen in this thread:\r\n  >>> mydata.number\r\n  42\r\nOf course, values you get from a local object, including a __dict__\r\nattribute, are for whatever thread was current at the time the\r\nattribute was read.  For that reason, you generally don't want to save\r\nthese values across threads, as they apply only to the thread they\r\ncame from.\r\nYou can create custom local objects by subclassing the local class:\r\n  >>> class MyLocal(local):\r\n  ...     number = 2\r\n  ...     initialized = False\r\n  ...     def __init__(self, **kw):\r\n  ...         if self.initialized:\r\n  ...             raise SystemError('__init__ called too many times')\r\n  ...         self.initialized = True\r\n  ...         self.__dict__.update(kw)\r\n  ...     def squared(self):\r\n  ...         return self.number ** 2\r\nThis can be useful to support default values, methods and\r\ninitialization.  Note that if you define an __init__ method, it will be\r\ncalled each time the local object is used in a separate thread.  This\r\nis necessary to initialize each thread's dictionary.\r\nNow if we create a local object:\r\n  >>> mydata = MyLocal(color='red')\r\nNow we have a default number:\r\n  >>> mydata.number\r\n  2\r\nan initial color:\r\n  >>> mydata.color\r\n  'red'\r\n  >>> del mydata.color\r\nAnd a method that operates on the data:\r\n  >>> mydata.squared()\r\n  4\r\nAs before, we can access the data in a separate thread:\r\n  >>> log = []\r\n  >>> thread = threading.Thread(target=f)\r\n  >>> thread.start()\r\n  >>> thread.join()\r\n  >>> log\r\n  [[('color', 'red'), ('initialized', True)], 11]\r\nwithout affecting this thread's data:\r\n  >>> mydata.number\r\n  2\r\n  >>> mydata.color\r\n  Traceback (most recent call last):\r\n  ...\r\n  AttributeError: 'MyLocal' object has no attribute 'color'\r\nNote that subclasses can define slots, but they are not thread\r\nlocal. They are shared across threads:\r\n  >>> class MyLocal(local):\r\n  ...     __slots__ = 'number'\r\n  >>> mydata = MyLocal()\r\n  >>> mydata.number = 42\r\n  >>> mydata.color = 'red'\r\nSo, the separate thread:\r\n  >>> thread = threading.Thread(target=f)\r\n  >>> thread.start()\r\n  >>> thread.join()\r\naffects what we see:\r\n  >>> mydata.number\r\n  11\r\n>>> del mydata\r\n\"\"\"\r\nfrom weakref import ref\r\nfrom contextlib import contextmanager\r\n__all__ = [\"local\"]\r\nclass _localimpl:\r\n    \"\"\"A class managing thread-local dicts\"\"\"\r\n    __slots__ = 'key', 'dicts', 'localargs', 'locallock', '__weakref__'\r\n    def __init__(self):\r\n        self.key = '_threading_local._localimpl.' + str(id(self))\r\n        self.dicts = {}\r\n    def get_dict(self):\r\n        \"\"\"Return the dict for the current thread. Raises KeyError if none\r\n        defined.\"\"\"\r\n        thread = current_thread()\r\n        return self.dicts[id(thread)][1]\r\n    def create_dict(self):\r\n        \"\"\"Create a new dict for the current thread, and return it.\"\"\"\r\n        localdict = {}\r\n        key = self.key\r\n        thread = current_thread()\r\n        idt = id(thread)\r\n        def local_deleted(_, key=key):\r\n            thread = wrthread()\r\n            if thread is not None:\r\n                del thread.__dict__[key]\r\n        def thread_deleted(_, idt=idt):\r\n            local = wrlocal()\r\n            if local is not None:\r\n                dct = local.dicts.pop(idt)\r\n        wrlocal = ref(self, local_deleted)\r\n        wrthread = ref(thread, thread_deleted)\r\n        thread.__dict__[key] = wrlocal\r\n        self.dicts[idt] = wrthread, localdict\r\n        return localdict\r\n@contextmanager\r\ndef _patch(self):\r\n    impl = object.__getattribute__(self, '_local__impl')\r\n    try:\r\n        dct = impl.get_dict()\r\n    except KeyError:\r\n        dct = impl.create_dict()\r\n        args, kw = impl.localargs\r\n        self.__init__(*args, **kw)\r\n    with impl.locallock:\r\n        object.__setattr__(self, '__dict__', dct)\r\n        yield\r\nclass local:\r\n    __slots__ = '_local__impl', '__dict__'\r\n    def __new__(cls, *args, **kw):\r\n        if (args or kw) and (cls.__init__ is object.__init__):\r\n            raise TypeError(\"Initialization arguments are not supported\")\r\n        self = object.__new__(cls)\r\n        impl = _localimpl()\r\n        impl.localargs = (args, kw)\r\n        impl.locallock = RLock()\r\n        object.__setattr__(self, '_local__impl', impl)\r\n        impl.create_dict()\r\n        return self\r\n    def __getattribute__(self, name):\r\n        with _patch(self):\r\n            return object.__getattribute__(self, name)\r\n    def __setattr__(self, name, value):\r\n        if name == '__dict__':\r\n            raise AttributeError(\r\n                \"%r object attribute '__dict__' is read-only\"\r\n                % self.__class__.__name__)\r\n        with _patch(self):\r\n            return object.__setattr__(self, name, value)\r\n    def __delattr__(self, name):\r\n        if name == '__dict__':\r\n            raise AttributeError(\r\n                \"%r object attribute '__dict__' is read-only\"\r\n                % self.__class__.__name__)\r\n        with _patch(self):\r\n            return object.__delattr__(self, name)\r\nfrom threading import current_thread, RLock\r\n", "/Lib/unittest/test/test_functiontestcase.py": "import unittest\r\nfrom .support import LoggingResult\r\nclass Test_FunctionTestCase(unittest.TestCase):\r\n    def test_countTestCases(self):\r\n        test = unittest.FunctionTestCase(lambda: None)\r\n        self.assertEqual(test.countTestCases(), 1)\r\n    def test_run_call_order__error_in_setUp(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        def setUp():\r\n            events.append('setUp')\r\n            raise RuntimeError('raised by setUp')\r\n        def test():\r\n            events.append('test')\r\n        def tearDown():\r\n            events.append('tearDown')\r\n        expected = ['startTest', 'setUp', 'addError', 'stopTest']\r\n        unittest.FunctionTestCase(test, setUp, tearDown).run(result)\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__error_in_test(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        def setUp():\r\n            events.append('setUp')\r\n        def test():\r\n            events.append('test')\r\n            raise RuntimeError('raised by test')\r\n        def tearDown():\r\n            events.append('tearDown')\r\n        expected = ['startTest', 'setUp', 'test', 'tearDown',\r\n                    'addError', 'stopTest']\r\n        unittest.FunctionTestCase(test, setUp, tearDown).run(result)\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__failure_in_test(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        def setUp():\r\n            events.append('setUp')\r\n        def test():\r\n            events.append('test')\r\n            self.fail('raised by test')\r\n        def tearDown():\r\n            events.append('tearDown')\r\n        expected = ['startTest', 'setUp', 'test', 'tearDown',\r\n                    'addFailure', 'stopTest']\r\n        unittest.FunctionTestCase(test, setUp, tearDown).run(result)\r\n        self.assertEqual(events, expected)\r\n    def test_run_call_order__error_in_tearDown(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        def setUp():\r\n            events.append('setUp')\r\n        def test():\r\n            events.append('test')\r\n        def tearDown():\r\n            events.append('tearDown')\r\n            raise RuntimeError('raised by tearDown')\r\n        expected = ['startTest', 'setUp', 'test', 'tearDown', 'addError',\r\n                    'stopTest']\r\n        unittest.FunctionTestCase(test, setUp, tearDown).run(result)\r\n        self.assertEqual(events, expected)\r\n    def test_id(self):\r\n        test = unittest.FunctionTestCase(lambda: None)\r\n        self.assertIsInstance(test.id(), str)\r\n    def test_shortDescription__no_docstring(self):\r\n        test = unittest.FunctionTestCase(lambda: None)\r\n        self.assertEqual(test.shortDescription(), None)\r\n    def test_shortDescription__singleline_docstring(self):\r\n        desc = \"this tests foo\"\r\n        test = unittest.FunctionTestCase(lambda: None, description=desc)\r\n        self.assertEqual(test.shortDescription(), \"this tests foo\")\r\n", "/Lib/_dummy_thread.py": "\"\"\"Drop-in replacement for the thread module.\nMeant to be used as a brain-dead substitute so that threaded code does\nnot need to be rewritten for when the thread module is not present.\nSuggested usage is::\n    try:\n        import _thread\n    except ImportError:\n        import _dummy_thread as _thread\n\"\"\"\n__all__ = ['error', 'start_new_thread', 'exit', 'get_ident', 'allocate_lock',\n           'interrupt_main', 'LockType']\nTIMEOUT_MAX = 2**31\nerror = RuntimeError\ndef start_new_thread(function, args, kwargs={}):\n    \"\"\"Dummy implementation of _thread.start_new_thread().\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by _thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.\n    \"\"\"\n    if type(args) != type(tuple()):\n        raise TypeError(\"2nd arg must be a tuple\")\n    if type(kwargs) != type(dict()):\n        raise TypeError(\"3rd arg must be a dict\")\n    global _main\n    _main = False\n    try:\n        function(*args, **kwargs)\n    except SystemExit:\n        pass\n    except:\n        import traceback\n        traceback.print_exc()\n    _main = True\n    global _interrupt\n    if _interrupt:\n        _interrupt = False\n        raise KeyboardInterrupt\ndef exit():\n    \"\"\"Dummy implementation of _thread.exit().\"\"\"\n    raise SystemExit\ndef get_ident():\n    \"\"\"Dummy implementation of _thread.get_ident().\n    Since this module should only be used when _threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    \"\"\"\n    return -1\ndef allocate_lock():\n    \"\"\"Dummy implementation of _thread.allocate_lock().\"\"\"\n    return LockType()\ndef stack_size(size=None):\n    \"\"\"Dummy implementation of _thread.stack_size().\"\"\"\n    if size is not None:\n        raise error(\"setting thread stack size not supported\")\n    return 0\nclass LockType(object):\n    \"\"\"Class implementing dummy implementation of _thread.LockType.\n    Compatibility is maintained by maintaining self.locked_status\n    which is a boolean that stores the state of the lock.  Pickling of\n    the lock, though, should not be done since if the _thread module is\n    then used with an unpickled ``lock()`` from here problems could\n    occur from this class not having atomic methods.\n    \"\"\"\n    def __init__(self):\n        self.locked_status = False\n    def acquire(self, waitflag=None, timeout=-1):\n        \"\"\"Dummy implementation of acquire().\n        For blocking calls, self.locked_status is automatically set to\n        True and returned appropriately based on value of\n        ``waitflag``.  If it is non-blocking, then the value is\n        actually checked and not set if it is already acquired.  This\n        is all done so that threading.Condition's assert statements\n        aren't triggered and throw a little fit.\n        \"\"\"\n        if waitflag is None or waitflag:\n            self.locked_status = True\n            return True\n        else:\n            if not self.locked_status:\n                self.locked_status = True\n                return True\n            else:\n                if timeout > 0:\n                    import time\n                    time.sleep(timeout)\n                return False\n    __enter__ = acquire\n    def __exit__(self, typ, val, tb):\n        self.release()\n    def release(self):\n        \"\"\"Release the dummy lock.\"\"\"\n        if not self.locked_status:\n            raise error\n        self.locked_status = False\n        return True\n    def locked(self):\n        return self.locked_status\n_interrupt = False\n_main = True\ndef interrupt_main():\n    \"\"\"Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.\"\"\"\n    if _main:\n        raise KeyboardInterrupt\n    else:\n        global _interrupt\n        _interrupt = True\n", "/Lib/textwrap.py": "\"\"\"Text wrapping and filling.\n\"\"\"\nimport re\n__all__ = ['TextWrapper', 'wrap', 'fill', 'dedent', 'indent']\n_whitespace = '\\t\\n\\x0b\\x0c\\r '\nclass TextWrapper:\n    \"\"\"\n    Object for wrapping/filling text.  The public interface consists of\n    the wrap() and fill() methods; the other methods are just there for\n    subclasses to override in order to tweak the default behaviour.\n    If you want to completely replace the main wrapping algorithm,\n    you'll probably have to override _wrap_chunks().\n    Several instance attributes control various aspects of wrapping:\n      width (default: 70)\n        the maximum width of wrapped lines (unless break_long_words\n        is false)\n      initial_indent (default: \"\")\n        string that will be prepended to the first line of wrapped\n        output.  Counts towards the line's width.\n      subsequent_indent (default: \"\")\n        string that will be prepended to all lines save the first\n        of wrapped output; also counts towards each line's width.\n      expand_tabs (default: true)\n        Expand tabs in input text to spaces before further processing.\n        Each tab will become 0 .. 'tabsize' spaces, depending on its position\n        in its line.  If false, each tab is treated as a single character.\n      tabsize (default: 8)\n        Expand tabs in input text to 0 .. 'tabsize' spaces, unless\n        'expand_tabs' is false.\n      replace_whitespace (default: true)\n        Replace all whitespace characters in the input text by spaces\n        after tab expansion.  Note that if expand_tabs is false and\n        replace_whitespace is true, every tab will be converted to a\n        single space!\n      fix_sentence_endings (default: false)\n        Ensure that sentence-ending punctuation is always followed\n        by two spaces.  Off by default because the algorithm is\n        (unavoidably) imperfect.\n      break_long_words (default: true)\n        Break words longer than 'width'.  If false, those words will not\n        be broken, and some lines might be longer than 'width'.\n      break_on_hyphens (default: true)\n        Allow breaking hyphenated words. If true, wrapping will occur\n        preferably on whitespaces and right after hyphens part of\n        compound words.\n      drop_whitespace (default: true)\n        Drop leading and trailing whitespace from lines.\n    \"\"\"\n    unicode_whitespace_trans = {}\n    uspace = ord(' ')\n    for x in _whitespace:\n        unicode_whitespace_trans[ord(x)] = uspace\n    wordsep_re = re.compile(\n        r'(\\s+|'                                  # any whitespace\n        r'[^\\s\\w]*\\w+[^0-9\\W]-(?=\\w+[^0-9\\W])|'   # hyphenated words\n        r'(?<=[\\w\\!\\\"\\'\\&\\.\\,\\?])-{2,}(?=\\w))')   # em-dash\n    wordsep_simple_re = re.compile(r'(\\s+)')\n    sentence_end_re = re.compile(r'[a-z]'             # lowercase letter\n                                 r'[\\.\\!\\?]'          # sentence-ending punct.\n                                 r'[\\\"\\']?'           # optional end-of-quote\n                                 r'\\Z')               # end of chunk\n    def __init__(self,\n                 width=70,\n                 initial_indent=\"\",\n                 subsequent_indent=\"\",\n                 expand_tabs=True,\n                 replace_whitespace=True,\n                 fix_sentence_endings=False,\n                 break_long_words=True,\n                 drop_whitespace=True,\n                 break_on_hyphens=True,\n                 tabsize=8):\n        self.width = width\n        self.initial_indent = initial_indent\n        self.subsequent_indent = subsequent_indent\n        self.expand_tabs = expand_tabs\n        self.replace_whitespace = replace_whitespace\n        self.fix_sentence_endings = fix_sentence_endings\n        self.break_long_words = break_long_words\n        self.drop_whitespace = drop_whitespace\n        self.break_on_hyphens = break_on_hyphens\n        self.tabsize = tabsize\n    def _munge_whitespace(self, text):\n        \"\"\"_munge_whitespace(text : string) -> string\n        Munge whitespace in text: expand tabs and convert all other\n        whitespace characters to spaces.  Eg. \" foo\\tbar\\n\\nbaz\"\n        becomes \" foo    bar  baz\".\n        \"\"\"\n        if self.expand_tabs:\n            text = text.expandtabs(self.tabsize)\n        if self.replace_whitespace:\n            text = text.translate(self.unicode_whitespace_trans)\n        return text\n    def _split(self, text):\n        \"\"\"_split(text : string) -> [string]\n        Split the text to wrap into indivisible chunks.  Chunks are\n        not quite the same as words; see _wrap_chunks() for full\n        details.  As an example, the text\n          Look, goof-ball -- use the -b option!\n        breaks into the following chunks:\n          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',\n          'use', ' ', 'the', ' ', '-b', ' ', 'option!'\n        if break_on_hyphens is True, or in:\n          'Look,', ' ', 'goof-ball', ' ', '--', ' ',\n          'use', ' ', 'the', ' ', '-b', ' ', option!'\n        otherwise.\n        \"\"\"\n        if self.break_on_hyphens is True:\n            chunks = self.wordsep_re.split(text)\n        else:\n            chunks = self.wordsep_simple_re.split(text)\n        chunks = [c for c in chunks if c]\n        return chunks\n    def _fix_sentence_endings(self, chunks):\n        \"\"\"_fix_sentence_endings(chunks : [string])\n        Correct for sentence endings buried in 'chunks'.  Eg. when the\n        original text contains \"... foo.\\nBar ...\", munge_whitespace()\n        and split() will convert that to [..., \"foo.\", \" \", \"Bar\", ...]\n        which has one too few spaces; this method simply changes the one\n        space to two.\n        \"\"\"\n        i = 0\n        patsearch = self.sentence_end_re.search\n        while i < len(chunks)-1:\n            if chunks[i+1] == \" \" and patsearch(chunks[i]):\n                chunks[i+1] = \"  \"\n                i += 2\n            else:\n                i += 1\n    def _handle_long_word(self, reversed_chunks, cur_line, cur_len, width):\n        \"\"\"_handle_long_word(chunks : [string],\n                             cur_line : [string],\n                             cur_len : int, width : int)\n        Handle a chunk of text (most likely a word, not whitespace) that\n        is too long to fit in any line.\n        \"\"\"\n        if width < 1:\n            space_left = 1\n        else:\n            space_left = width - cur_len\n        if self.break_long_words:\n            cur_line.append(reversed_chunks[-1][:space_left])\n            reversed_chunks[-1] = reversed_chunks[-1][space_left:]\n        elif not cur_line:\n            cur_line.append(reversed_chunks.pop())\n    def _wrap_chunks(self, chunks):\n        \"\"\"_wrap_chunks(chunks : [string]) -> [string]\n        Wrap a sequence of text chunks and return a list of lines of\n        length 'self.width' or less.  (If 'break_long_words' is false,\n        some lines may be longer than this.)  Chunks correspond roughly\n        to words and the whitespace between them: each chunk is\n        indivisible (modulo 'break_long_words'), but a line break can\n        come between any two chunks.  Chunks should not have internal\n        whitespace; ie. a chunk is either all whitespace or a \"word\".\n        Whitespace chunks will be removed from the beginning and end of\n        lines, but apart from that whitespace is preserved.\n        \"\"\"\n        lines = []\n        if self.width <= 0:\n            raise ValueError(\"invalid width %r (must be > 0)\" % self.width)\n        chunks.reverse()\n        while chunks:\n            cur_line = []\n            cur_len = 0\n            if lines:\n                indent = self.subsequent_indent\n            else:\n                indent = self.initial_indent\n            width = self.width - len(indent)\n            if self.drop_whitespace and chunks[-1].strip() == '' and lines:\n                del chunks[-1]\n            while chunks:\n                l = len(chunks[-1])\n                if cur_len + l <= width:\n                    cur_line.append(chunks.pop())\n                    cur_len += l\n                else:\n                    break\n            if chunks and len(chunks[-1]) > width:\n                self._handle_long_word(chunks, cur_line, cur_len, width)\n            if self.drop_whitespace and cur_line and cur_line[-1].strip() == '':\n                del cur_line[-1]\n            if cur_line:\n                lines.append(indent + ''.join(cur_line))\n        return lines\n    def wrap(self, text):\n        \"\"\"wrap(text : string) -> [string]\n        Reformat the single paragraph in 'text' so it fits in lines of\n        no more than 'self.width' columns, and return a list of wrapped\n        lines.  Tabs in 'text' are expanded with string.expandtabs(),\n        and all other whitespace characters (including newline) are\n        converted to space.\n        \"\"\"\n        text = self._munge_whitespace(text)\n        chunks = self._split(text)\n        if self.fix_sentence_endings:\n            self._fix_sentence_endings(chunks)\n        return self._wrap_chunks(chunks)\n    def fill(self, text):\n        \"\"\"fill(text : string) -> string\n        Reformat the single paragraph in 'text' to fit in lines of no\n        more than 'self.width' columns, and return a new string\n        containing the entire wrapped paragraph.\n        \"\"\"\n        return \"\\n\".join(self.wrap(text))\ndef wrap(text, width=70, **kwargs):\n    \"\"\"Wrap a single paragraph of text, returning a list of wrapped lines.\n    Reformat the single paragraph in 'text' so it fits in lines of no\n    more than 'width' columns, and return a list of wrapped lines.  By\n    default, tabs in 'text' are expanded with string.expandtabs(), and\n    all other whitespace characters (including newline) are converted to\n    space.  See TextWrapper class for available keyword args to customize\n    wrapping behaviour.\n    \"\"\"\n    w = TextWrapper(width=width, **kwargs)\n    return w.wrap(text)\ndef fill(text, width=70, **kwargs):\n    \"\"\"Fill a single paragraph of text, returning a new string.\n    Reformat the single paragraph in 'text' to fit in lines of no more\n    than 'width' columns, and return a new string containing the entire\n    wrapped paragraph.  As with wrap(), tabs are expanded and other\n    whitespace characters converted to space.  See TextWrapper class for\n    available keyword args to customize wrapping behaviour.\n    \"\"\"\n    w = TextWrapper(width=width, **kwargs)\n    return w.fill(text)\n_whitespace_only_re = re.compile('^[ \\t]+$', re.MULTILINE)\n_leading_whitespace_re = re.compile('(^[ \\t]*)(?:[^ \\t\\n])', re.MULTILINE)\ndef dedent(text):\n    \"\"\"Remove any common leading whitespace from every line in `text`.\n    This can be used to make triple-quoted strings line up with the left\n    edge of the display, while still presenting them in the source code\n    in indented form.\n    Note that tabs and spaces are both treated as whitespace, but they\n    are not equal: the lines \"  hello\" and \"\\thello\" are\n    considered to have no common leading whitespace.  (This behaviour is\n    new in Python 2.5; older versions of this module incorrectly\n    expanded tabs before searching for common leading whitespace.)\n    \"\"\"\n    margin = None\n    text = _whitespace_only_re.sub('', text)\n    indents = _leading_whitespace_re.findall(text)\n    for indent in indents:\n        if margin is None:\n            margin = indent\n        elif indent.startswith(margin):\n            pass\n        elif margin.startswith(indent):\n            margin = indent\n        else:\n            margin = \"\"\n            break\n    if 0 and margin:\n        for line in text.split(\"\\n\"):\n            assert not line or line.startswith(margin), \\\n                   \"line = %r, margin = %r\" % (line, margin)\n    if margin:\n        text = re.sub(r'(?m)^' + margin, '', text)\n    return text\ndef indent(text, prefix, predicate=None):\n    \"\"\"Adds 'prefix' to the beginning of selected lines in 'text'.\n    If 'predicate' is provided, 'prefix' will only be added to the lines\n    where 'predicate(line)' is True. If 'predicate' is not provided,\n    it will default to adding 'prefix' to all non-empty lines that do not\n    consist solely of whitespace characters.\n    \"\"\"\n    if predicate is None:\n        def predicate(line):\n            return line.strip()\n    def prefixed_lines():\n        for line in text.splitlines(True):\n            yield (prefix + line if predicate(line) else line)\n    return ''.join(prefixed_lines())\nif __name__ == \"__main__\":\n    print(dedent(\"Hello there.\\n  This is indented.\"))\n", "/Lib/unittest/test/test_setups.py": "import io\r\nimport sys\r\nimport unittest\r\ndef resultFactory(*_):\r\n    return unittest.TestResult()\r\nclass TestSetups(unittest.TestCase):\r\n    def getRunner(self):\r\n        return unittest.TextTestRunner(resultclass=resultFactory,\r\n                                          stream=io.StringIO())\r\n    def runTests(self, *cases):\r\n        suite = unittest.TestSuite()\r\n        for case in cases:\r\n            tests = unittest.defaultTestLoader.loadTestsFromTestCase(case)\r\n            suite.addTests(tests)\r\n        runner = self.getRunner()\r\n        realSuite = unittest.TestSuite()\r\n        realSuite.addTest(suite)\r\n        suite.addTest(unittest.TestSuite())\r\n        realSuite.addTest(unittest.TestSuite())\r\n        return runner.run(realSuite)\r\n    def test_setup_class(self):\r\n        class Test(unittest.TestCase):\r\n            setUpCalled = 0\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                Test.setUpCalled += 1\r\n                unittest.TestCase.setUpClass()\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        result = self.runTests(Test)\r\n        self.assertEqual(Test.setUpCalled, 1)\r\n        self.assertEqual(result.testsRun, 2)\r\n        self.assertEqual(len(result.errors), 0)\r\n    def test_teardown_class(self):\r\n        class Test(unittest.TestCase):\r\n            tearDownCalled = 0\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                Test.tearDownCalled += 1\r\n                unittest.TestCase.tearDownClass()\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        result = self.runTests(Test)\r\n        self.assertEqual(Test.tearDownCalled, 1)\r\n        self.assertEqual(result.testsRun, 2)\r\n        self.assertEqual(len(result.errors), 0)\r\n    def test_teardown_class_two_classes(self):\r\n        class Test(unittest.TestCase):\r\n            tearDownCalled = 0\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                Test.tearDownCalled += 1\r\n                unittest.TestCase.tearDownClass()\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        class Test2(unittest.TestCase):\r\n            tearDownCalled = 0\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                Test2.tearDownCalled += 1\r\n                unittest.TestCase.tearDownClass()\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        result = self.runTests(Test, Test2)\r\n        self.assertEqual(Test.tearDownCalled, 1)\r\n        self.assertEqual(Test2.tearDownCalled, 1)\r\n        self.assertEqual(result.testsRun, 4)\r\n        self.assertEqual(len(result.errors), 0)\r\n    def test_error_in_setupclass(self):\r\n        class BrokenTest(unittest.TestCase):\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                raise TypeError('foo')\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        result = self.runTests(BrokenTest)\r\n        self.assertEqual(result.testsRun, 0)\r\n        self.assertEqual(len(result.errors), 1)\r\n        error, _ = result.errors[0]\r\n        self.assertEqual(str(error),\r\n                    'setUpClass (%s.BrokenTest)' % __name__)\r\n    def test_error_in_teardown_class(self):\r\n        class Test(unittest.TestCase):\r\n            tornDown = 0\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                Test.tornDown += 1\r\n                raise TypeError('foo')\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        class Test2(unittest.TestCase):\r\n            tornDown = 0\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                Test2.tornDown += 1\r\n                raise TypeError('foo')\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        result = self.runTests(Test, Test2)\r\n        self.assertEqual(result.testsRun, 4)\r\n        self.assertEqual(len(result.errors), 2)\r\n        self.assertEqual(Test.tornDown, 1)\r\n        self.assertEqual(Test2.tornDown, 1)\r\n        error, _ = result.errors[0]\r\n        self.assertEqual(str(error),\r\n                    'tearDownClass (%s.Test)' % __name__)\r\n    def test_class_not_torndown_when_setup_fails(self):\r\n        class Test(unittest.TestCase):\r\n            tornDown = False\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                raise TypeError\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                Test.tornDown = True\r\n                raise TypeError('foo')\r\n            def test_one(self):\r\n                pass\r\n        self.runTests(Test)\r\n        self.assertFalse(Test.tornDown)\r\n    def test_class_not_setup_or_torndown_when_skipped(self):\r\n        class Test(unittest.TestCase):\r\n            classSetUp = False\r\n            tornDown = False\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                Test.classSetUp = True\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                Test.tornDown = True\r\n            def test_one(self):\r\n                pass\r\n        Test = unittest.skip(\"hop\")(Test)\r\n        self.runTests(Test)\r\n        self.assertFalse(Test.classSetUp)\r\n        self.assertFalse(Test.tornDown)\r\n    def test_setup_teardown_order_with_pathological_suite(self):\r\n        results = []\r\n        class Module1(object):\r\n            @staticmethod\r\n            def setUpModule():\r\n                results.append('Module1.setUpModule')\r\n            @staticmethod\r\n            def tearDownModule():\r\n                results.append('Module1.tearDownModule')\r\n        class Module2(object):\r\n            @staticmethod\r\n            def setUpModule():\r\n                results.append('Module2.setUpModule')\r\n            @staticmethod\r\n            def tearDownModule():\r\n                results.append('Module2.tearDownModule')\r\n        class Test1(unittest.TestCase):\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                results.append('setup 1')\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                results.append('teardown 1')\r\n            def testOne(self):\r\n                results.append('Test1.testOne')\r\n            def testTwo(self):\r\n                results.append('Test1.testTwo')\r\n        class Test2(unittest.TestCase):\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                results.append('setup 2')\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                results.append('teardown 2')\r\n            def testOne(self):\r\n                results.append('Test2.testOne')\r\n            def testTwo(self):\r\n                results.append('Test2.testTwo')\r\n        class Test3(unittest.TestCase):\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                results.append('setup 3')\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                results.append('teardown 3')\r\n            def testOne(self):\r\n                results.append('Test3.testOne')\r\n            def testTwo(self):\r\n                results.append('Test3.testTwo')\r\n        Test1.__module__ = Test2.__module__ = 'Module'\r\n        Test3.__module__ = 'Module2'\r\n        sys.modules['Module'] = Module1\r\n        sys.modules['Module2'] = Module2\r\n        first = unittest.TestSuite((Test1('testOne'),))\r\n        second = unittest.TestSuite((Test1('testTwo'),))\r\n        third = unittest.TestSuite((Test2('testOne'),))\r\n        fourth = unittest.TestSuite((Test2('testTwo'),))\r\n        fifth = unittest.TestSuite((Test3('testOne'),))\r\n        sixth = unittest.TestSuite((Test3('testTwo'),))\r\n        suite = unittest.TestSuite((first, second, third, fourth, fifth, sixth))\r\n        runner = self.getRunner()\r\n        result = runner.run(suite)\r\n        self.assertEqual(result.testsRun, 6)\r\n        self.assertEqual(len(result.errors), 0)\r\n        self.assertEqual(results,\r\n                         ['Module1.setUpModule', 'setup 1',\r\n                          'Test1.testOne', 'Test1.testTwo', 'teardown 1',\r\n                          'setup 2', 'Test2.testOne', 'Test2.testTwo',\r\n                          'teardown 2', 'Module1.tearDownModule',\r\n                          'Module2.setUpModule', 'setup 3',\r\n                          'Test3.testOne', 'Test3.testTwo',\r\n                          'teardown 3', 'Module2.tearDownModule'])\r\n    def test_setup_module(self):\r\n        class Module(object):\r\n            moduleSetup = 0\r\n            @staticmethod\r\n            def setUpModule():\r\n                Module.moduleSetup += 1\r\n        class Test(unittest.TestCase):\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        Test.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        result = self.runTests(Test)\r\n        self.assertEqual(Module.moduleSetup, 1)\r\n        self.assertEqual(result.testsRun, 2)\r\n        self.assertEqual(len(result.errors), 0)\r\n    def test_error_in_setup_module(self):\r\n        class Module(object):\r\n            moduleSetup = 0\r\n            moduleTornDown = 0\r\n            @staticmethod\r\n            def setUpModule():\r\n                Module.moduleSetup += 1\r\n                raise TypeError('foo')\r\n            @staticmethod\r\n            def tearDownModule():\r\n                Module.moduleTornDown += 1\r\n        class Test(unittest.TestCase):\r\n            classSetUp = False\r\n            classTornDown = False\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                Test.classSetUp = True\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                Test.classTornDown = True\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        class Test2(unittest.TestCase):\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        Test.__module__ = 'Module'\r\n        Test2.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        result = self.runTests(Test, Test2)\r\n        self.assertEqual(Module.moduleSetup, 1)\r\n        self.assertEqual(Module.moduleTornDown, 0)\r\n        self.assertEqual(result.testsRun, 0)\r\n        self.assertFalse(Test.classSetUp)\r\n        self.assertFalse(Test.classTornDown)\r\n        self.assertEqual(len(result.errors), 1)\r\n        error, _ = result.errors[0]\r\n        self.assertEqual(str(error), 'setUpModule (Module)')\r\n    def test_testcase_with_missing_module(self):\r\n        class Test(unittest.TestCase):\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        Test.__module__ = 'Module'\r\n        sys.modules.pop('Module', None)\r\n        result = self.runTests(Test)\r\n        self.assertEqual(result.testsRun, 2)\r\n    def test_teardown_module(self):\r\n        class Module(object):\r\n            moduleTornDown = 0\r\n            @staticmethod\r\n            def tearDownModule():\r\n                Module.moduleTornDown += 1\r\n        class Test(unittest.TestCase):\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        Test.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        result = self.runTests(Test)\r\n        self.assertEqual(Module.moduleTornDown, 1)\r\n        self.assertEqual(result.testsRun, 2)\r\n        self.assertEqual(len(result.errors), 0)\r\n    def test_error_in_teardown_module(self):\r\n        class Module(object):\r\n            moduleTornDown = 0\r\n            @staticmethod\r\n            def tearDownModule():\r\n                Module.moduleTornDown += 1\r\n                raise TypeError('foo')\r\n        class Test(unittest.TestCase):\r\n            classSetUp = False\r\n            classTornDown = False\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                Test.classSetUp = True\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                Test.classTornDown = True\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        class Test2(unittest.TestCase):\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        Test.__module__ = 'Module'\r\n        Test2.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        result = self.runTests(Test, Test2)\r\n        self.assertEqual(Module.moduleTornDown, 1)\r\n        self.assertEqual(result.testsRun, 4)\r\n        self.assertTrue(Test.classSetUp)\r\n        self.assertTrue(Test.classTornDown)\r\n        self.assertEqual(len(result.errors), 1)\r\n        error, _ = result.errors[0]\r\n        self.assertEqual(str(error), 'tearDownModule (Module)')\r\n    def test_skiptest_in_setupclass(self):\r\n        class Test(unittest.TestCase):\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                raise unittest.SkipTest('foo')\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        result = self.runTests(Test)\r\n        self.assertEqual(result.testsRun, 0)\r\n        self.assertEqual(len(result.errors), 0)\r\n        self.assertEqual(len(result.skipped), 1)\r\n        skipped = result.skipped[0][0]\r\n        self.assertEqual(str(skipped), 'setUpClass (%s.Test)' % __name__)\r\n    def test_skiptest_in_setupmodule(self):\r\n        class Test(unittest.TestCase):\r\n            def test_one(self):\r\n                pass\r\n            def test_two(self):\r\n                pass\r\n        class Module(object):\r\n            @staticmethod\r\n            def setUpModule():\r\n                raise unittest.SkipTest('foo')\r\n        Test.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        result = self.runTests(Test)\r\n        self.assertEqual(result.testsRun, 0)\r\n        self.assertEqual(len(result.errors), 0)\r\n        self.assertEqual(len(result.skipped), 1)\r\n        skipped = result.skipped[0][0]\r\n        self.assertEqual(str(skipped), 'setUpModule (Module)')\r\n    def test_suite_debug_executes_setups_and_teardowns(self):\r\n        ordering = []\r\n        class Module(object):\r\n            @staticmethod\r\n            def setUpModule():\r\n                ordering.append('setUpModule')\r\n            @staticmethod\r\n            def tearDownModule():\r\n                ordering.append('tearDownModule')\r\n        class Test(unittest.TestCase):\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                ordering.append('setUpClass')\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                ordering.append('tearDownClass')\r\n            def test_something(self):\r\n                ordering.append('test_something')\r\n        Test.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        suite = unittest.defaultTestLoader.loadTestsFromTestCase(Test)\r\n        suite.debug()\r\n        expectedOrder = ['setUpModule', 'setUpClass', 'test_something', 'tearDownClass', 'tearDownModule']\r\n        self.assertEqual(ordering, expectedOrder)\r\n    def test_suite_debug_propagates_exceptions(self):\r\n        class Module(object):\r\n            @staticmethod\r\n            def setUpModule():\r\n                if phase == 0:\r\n                    raise Exception('setUpModule')\r\n            @staticmethod\r\n            def tearDownModule():\r\n                if phase == 1:\r\n                    raise Exception('tearDownModule')\r\n        class Test(unittest.TestCase):\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                if phase == 2:\r\n                    raise Exception('setUpClass')\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                if phase == 3:\r\n                    raise Exception('tearDownClass')\r\n            def test_something(self):\r\n                if phase == 4:\r\n                    raise Exception('test_something')\r\n        Test.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        _suite = unittest.defaultTestLoader.loadTestsFromTestCase(Test)\r\n        suite = unittest.TestSuite()\r\n        suite.addTest(_suite)\r\n        messages = ('setUpModule', 'tearDownModule', 'setUpClass', 'tearDownClass', 'test_something')\r\n        for phase, msg in enumerate(messages):\r\n            with self.assertRaisesRegex(Exception, msg):\r\n                suite.debug()\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/ui/widget.py": "import random\nfrom browser import doc\ndef getMousePosition(e):\n    if e is None:\n       e=win.event\n    if e.pageX or e.pageY:\n       return {'x': e.pageX, 'y': e.pageY}\n    if e.clientX or e.clientY:\n       _posx=e.clientX + doc.body.scrollLeft + doc.documentElement.scrollLeft;\n       _posy=e.clientY + doc.body.scrollTop + doc.documentElement.scrollTop;\n       return {'x': _posx, 'y': _posy}\n    return {'x': 0, 'y': 0}\nclass Widget:\n  def __init__(self, element, type, id=None):\n      self._element=element\n      if id is None:\n         self._element.id='%s_%s' % (type, int(100000*random.random()))\n      else:\n         self._element.id=id\n  def get_id(self):\n      return self._element.id\n  def attach(self, element_id):\n      \"\"\" append this DOM component to DOM element element_id\"\"\"\n      doc[element_id] <= self._element\n  def show(self):\n      self._element.display='block'\n  def hide(self):\n      self._element.display='none'\nclass DraggableWidget(Widget):\n  def __init__(self, element, type, id=None):\n      Widget.__init__(self, element, type, id)\n      def drag(e):\n          self._element.style.top='%spx' % (e.clientY - self._deltaY)\n          self._element.style.left='%spx' % (e.clientX - self._deltaX)\n      def mouseDown(e):\n          self._element.style.position='absolute'\n          self._deltaX=e.clientX - self._element.offsetLeft\n          self._deltaY=e.clientY - self._element.offsetTop\n          doc.bind('mousemove', drag)\n      def mouseUp(e):\n          doc.unbind('mousemove')\n      self._element.bind('mousedown', mouseDown)\n      self._element.bind('mouseup', mouseUp)\n", "/Lib/_markupbase.py": "\"\"\"Shared support for scanning document type declarations in HTML and XHTML.\nThis module is used as a foundation for the html.parser module.  It has no\ndocumented public API and should not be used directly.\n\"\"\"\nimport re\n_declname_match = re.compile(r'[a-zA-Z][-_.a-zA-Z0-9]*\\s*').match\n_declstringlit_match = re.compile(r'(\\'[^\\']*\\'|\"[^\"]*\")\\s*').match\n_commentclose = re.compile(r'--\\s*>')\n_markedsectionclose = re.compile(r']\\s*]\\s*>')\n_msmarkedsectionclose = re.compile(r']\\s*>')\ndel re\nclass ParserBase:\n    \"\"\"Parser base class which provides some common support methods used\n    by the SGML/HTML and XHTML parsers.\"\"\"\n    def __init__(self):\n        if self.__class__ is ParserBase:\n            raise RuntimeError(\n                \"_markupbase.ParserBase must be subclassed\")\n    def error(self, message):\n        raise NotImplementedError(\n            \"subclasses of ParserBase must override error()\")\n    def reset(self):\n        self.lineno = 1\n        self.offset = 0\n    def getpos(self):\n        \"\"\"Return current line number and offset.\"\"\"\n        return self.lineno, self.offset\n    def updatepos(self, i, j):\n        if i >= j:\n            return j\n        rawdata = self.rawdata\n        nlines = rawdata.count(\"\\n\", i, j)\n        if nlines:\n            self.lineno = self.lineno + nlines\n            pos = rawdata.rindex(\"\\n\", i, j) # Should not fail\n            self.offset = j-(pos+1)\n        else:\n            self.offset = self.offset + j-i\n        return j\n    _decl_otherchars = ''\n    def parse_declaration(self, i):\n        rawdata = self.rawdata\n        j = i + 2\n        assert rawdata[i:j] == \"<!\", \"unexpected call to parse_declaration\"\n        if rawdata[j:j+1] == \">\":\n            return j + 1\n        if rawdata[j:j+1] in (\"-\", \"\"):\n            return -1\n        n = len(rawdata)\n        if rawdata[j:j+2] == '--': #comment\n            return self.parse_comment(i)\n        elif rawdata[j] == '[': #marked section\n            return self.parse_marked_section(i)\n        else: #all other declaration elements\n            decltype, j = self._scan_name(j, i)\n        if j < 0:\n            return j\n        if decltype == \"doctype\":\n            self._decl_otherchars = ''\n        while j < n:\n            c = rawdata[j]\n            if c == \">\":\n                data = rawdata[i+2:j]\n                if decltype == \"doctype\":\n                    self.handle_decl(data)\n                else:\n                    self.unknown_decl(data)\n                return j + 1\n            if c in \"\\\"'\":\n                m = _declstringlit_match(rawdata, j)\n                if not m:\n                    return -1 # incomplete\n                j = m.end()\n            elif c in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                name, j = self._scan_name(j, i)\n            elif c in self._decl_otherchars:\n                j = j + 1\n            elif c == \"[\":\n                if decltype == \"doctype\":\n                    j = self._parse_doctype_subset(j + 1, i)\n                elif decltype in {\"attlist\", \"linktype\", \"link\", \"element\"}:\n                    self.error(\"unsupported '[' char in %s declaration\" % decltype)\n                else:\n                    self.error(\"unexpected '[' char in declaration\")\n            else:\n                self.error(\n                    \"unexpected %r char in declaration\" % rawdata[j])\n            if j < 0:\n                return j\n        return -1 # incomplete\n    def parse_marked_section(self, i, report=1):\n        rawdata= self.rawdata\n        assert rawdata[i:i+3] == '<![', \"unexpected call to parse_marked_section()\"\n        sectName, j = self._scan_name( i+3, i )\n        if j < 0:\n            return j\n        if sectName in {\"temp\", \"cdata\", \"ignore\", \"include\", \"rcdata\"}:\n            match= _markedsectionclose.search(rawdata, i+3)\n        elif sectName in {\"if\", \"else\", \"endif\"}:\n            match= _msmarkedsectionclose.search(rawdata, i+3)\n        else:\n            self.error('unknown status keyword %r in marked section' % rawdata[i+3:j])\n        if not match:\n            return -1\n        if report:\n            j = match.start(0)\n            self.unknown_decl(rawdata[i+3: j])\n        return match.end(0)\n    def parse_comment(self, i, report=1):\n        rawdata = self.rawdata\n        if rawdata[i:i+4] != '<!--':\n            self.error('unexpected call to parse_comment()')\n        match = _commentclose.search(rawdata, i+4)\n        if not match:\n            return -1\n        if report:\n            j = match.start(0)\n            self.handle_comment(rawdata[i+4: j])\n        return match.end(0)\n    def _parse_doctype_subset(self, i, declstartpos):\n        rawdata = self.rawdata\n        n = len(rawdata)\n        j = i\n        while j < n:\n            c = rawdata[j]\n            if c == \"<\":\n                s = rawdata[j:j+2]\n                if s == \"<\":\n                    return -1\n                if s != \"<!\":\n                    self.updatepos(declstartpos, j + 1)\n                    self.error(\"unexpected char in internal subset (in %r)\" % s)\n                if (j + 2) == n:\n                    return -1\n                if (j + 4) > n:\n                    return -1\n                if rawdata[j:j+4] == \"<!--\":\n                    j = self.parse_comment(j, report=0)\n                    if j < 0:\n                        return j\n                    continue\n                name, j = self._scan_name(j + 2, declstartpos)\n                if j == -1:\n                    return -1\n                if name not in {\"attlist\", \"element\", \"entity\", \"notation\"}:\n                    self.updatepos(declstartpos, j + 2)\n                    self.error(\n                        \"unknown declaration %r in internal subset\" % name)\n                meth = getattr(self, \"_parse_doctype_\" + name)\n                j = meth(j, declstartpos)\n                if j < 0:\n                    return j\n            elif c == \"%\":\n                if (j + 1) == n:\n                    return -1\n                s, j = self._scan_name(j + 1, declstartpos)\n                if j < 0:\n                    return j\n                if rawdata[j] == \";\":\n                    j = j + 1\n            elif c == \"]\":\n                j = j + 1\n                while j < n and rawdata[j].isspace():\n                    j = j + 1\n                if j < n:\n                    if rawdata[j] == \">\":\n                        return j\n                    self.updatepos(declstartpos, j)\n                    self.error(\"unexpected char after internal subset\")\n                else:\n                    return -1\n            elif c.isspace():\n                j = j + 1\n            else:\n                self.updatepos(declstartpos, j)\n                self.error(\"unexpected char %r in internal subset\" % c)\n        return -1\n    def _parse_doctype_element(self, i, declstartpos):\n        name, j = self._scan_name(i, declstartpos)\n        if j == -1:\n            return -1\n        rawdata = self.rawdata\n        if '>' in rawdata[j:]:\n            return rawdata.find(\">\", j) + 1\n        return -1\n    def _parse_doctype_attlist(self, i, declstartpos):\n        rawdata = self.rawdata\n        name, j = self._scan_name(i, declstartpos)\n        c = rawdata[j:j+1]\n        if c == \"\":\n            return -1\n        if c == \">\":\n            return j + 1\n        while 1:\n            name, j = self._scan_name(j, declstartpos)\n            if j < 0:\n                return j\n            c = rawdata[j:j+1]\n            if c == \"\":\n                return -1\n            if c == \"(\":\n                if \")\" in rawdata[j:]:\n                    j = rawdata.find(\")\", j) + 1\n                else:\n                    return -1\n                while rawdata[j:j+1].isspace():\n                    j = j + 1\n                if not rawdata[j:]:\n                    return -1\n            else:\n                name, j = self._scan_name(j, declstartpos)\n            c = rawdata[j:j+1]\n            if not c:\n                return -1\n            if c in \"'\\\"\":\n                m = _declstringlit_match(rawdata, j)\n                if m:\n                    j = m.end()\n                else:\n                    return -1\n                c = rawdata[j:j+1]\n                if not c:\n                    return -1\n            if c == \"#\":\n                if rawdata[j:] == \"#\":\n                    return -1\n                name, j = self._scan_name(j + 1, declstartpos)\n                if j < 0:\n                    return j\n                c = rawdata[j:j+1]\n                if not c:\n                    return -1\n            if c == '>':\n                return j + 1\n    def _parse_doctype_notation(self, i, declstartpos):\n        name, j = self._scan_name(i, declstartpos)\n        if j < 0:\n            return j\n        rawdata = self.rawdata\n        while 1:\n            c = rawdata[j:j+1]\n            if not c:\n                return -1\n            if c == '>':\n                return j + 1\n            if c in \"'\\\"\":\n                m = _declstringlit_match(rawdata, j)\n                if not m:\n                    return -1\n                j = m.end()\n            else:\n                name, j = self._scan_name(j, declstartpos)\n                if j < 0:\n                    return j\n    def _parse_doctype_entity(self, i, declstartpos):\n        rawdata = self.rawdata\n        if rawdata[i:i+1] == \"%\":\n            j = i + 1\n            while 1:\n                c = rawdata[j:j+1]\n                if not c:\n                    return -1\n                if c.isspace():\n                    j = j + 1\n                else:\n                    break\n        else:\n            j = i\n        name, j = self._scan_name(j, declstartpos)\n        if j < 0:\n            return j\n        while 1:\n            c = self.rawdata[j:j+1]\n            if not c:\n                return -1\n            if c in \"'\\\"\":\n                m = _declstringlit_match(rawdata, j)\n                if m:\n                    j = m.end()\n                else:\n                    return -1    # incomplete\n            elif c == \">\":\n                return j + 1\n            else:\n                name, j = self._scan_name(j, declstartpos)\n                if j < 0:\n                    return j\n    def _scan_name(self, i, declstartpos):\n        rawdata = self.rawdata\n        n = len(rawdata)\n        if i == n:\n            return None, -1\n        m = _declname_match(rawdata, i)\n        if m:\n            s = m.group()\n            name = s.strip()\n            if (i + len(s)) == n:\n                return None, -1  # end of buffer\n            return name.lower(), m.end()\n        else:\n            self.updatepos(declstartpos, i)\n            self.error(\"expected name token at %r\"\n                       % rawdata[declstartpos:declstartpos+20])\n    def unknown_decl(self, data):\n        pass\n", "/Lib/posix.py": "\"\"\"This module provides access to operating system functionality that is\nstandardized by the C Standard and the POSIX standard (a thinly\ndisguised Unix interface).  Refer to the library manual and\ncorresponding Unix manual entries for more information on calls.\"\"\"\nimport datetime\nF_OK = 0\nO_APPEND = 8\nO_BINARY = 32768\nO_CREAT = 256\nO_EXCL = 1024\nO_NOINHERIT = 128\nO_RANDOM = 16\nO_RDONLY = 0\nO_RDWR = 2\nO_SEQUENTIAL = 32\nO_SHORT_LIVED = 4096\nO_TEMPORARY = 64\nO_TEXT = 16384\nO_TRUNC = 512\nO_WRONLY = 1\nP_DETACH = 4\nP_NOWAIT = 1\nP_NOWAITO = 3\nP_OVERLAY = 2\nP_WAIT = 0\nR_OK = 4\nTMP_MAX = 32767\nW_OK = 2\nX_OK = 1\nclass __loader__:\n    pass\ndef _exit(*args,**kw):\n    \"\"\"_exit(status)    \n    Exit to the system with specified status, without normal exit processing.\"\"\"\n    pass\ndef _getdiskusage(*args,**kw):\n    \"\"\"_getdiskusage(path) -> (total, free)    \n    Return disk usage statistics about the given path as (total, free) tuple.\"\"\"\n    pass\ndef _getfileinformation(*args,**kw):\n    pass\ndef _getfinalpathname(*args,**kw):\n    pass\ndef _getfullpathname(*args,**kw):\n    pass\n_have_functions = ['MS_WINDOWS']\ndef _isdir(*args,**kw):\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\n    pass\ndef abort(*args,**kw):\n    \"\"\"abort() -> does not return!    \n    Abort the interpreter immediately.  This 'dumps core' or otherwise fails\n    in the hardest way possible on the hosting operating system.\"\"\"\n    pass\ndef access(*args,**kw):\n    \"\"\"access(path, mode, *, dir_fd=None, effective_ids=False, follow_symlinks=True)    \n    Use the real uid/gid to test for access to a path.  Returns True if granted,\n    False otherwise.\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    If effective_ids is True, access will use the effective uid/gid instead of\n      the real uid/gid.\n    If follow_symlinks is False, and the last element of the path is a symbolic\n      link, access will examine the symbolic link itself instead of the file the\n      link points to.\n    dir_fd, effective_ids, and follow_symlinks may not be implemented\n      on your platform.  If they are unavailable, using them will raise a\n      NotImplementedError.\n    Note that most operations will use the effective uid/gid, therefore this\n      routine can be used in a suid/sgid environment to test if the invoking user\n      has the specified access to the path.\n    The mode argument can be F_OK to test existence, or the inclusive-OR\n      of R_OK, W_OK, and X_OK.\"\"\"\n    pass\ndef chdir(*args,**kw):\n    \"\"\"chdir(path)    \n    Change the current working directory to the specified path.\n    path may always be specified as a string.\n    On some platforms, path may also be specified as an open file descriptor.\n      If this functionality is unavailable, using it raises an exception.\"\"\"\n    pass\ndef chmod(*args,**kw):\n    \"\"\"chmod(path, mode, *, dir_fd=None, follow_symlinks=True)    \n    Change the access permissions of a file.\n    path may always be specified as a string.\n    On some platforms, path may also be specified as an open file descriptor.\n      If this functionality is unavailable, using it raises an exception.\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    If follow_symlinks is False, and the last element of the path is a symbolic\n      link, chmod will modify the symbolic link itself instead of the file the\n      link points to.\n    It is an error to use dir_fd or follow_symlinks when specifying path as\n      an open file descriptor.\n    dir_fd and follow_symlinks may not be implemented on your platform.\n      If they are unavailable, using them will raise a NotImplementedError.\"\"\"\n    pass\ndef close(*args,**kw):\n    \"\"\"close(fd)    \n    Close a file descriptor (for low level IO).\"\"\"\n    pass\ndef closerange(*args,**kw):\n    \"\"\"closerange(fd_low, fd_high)    \n    Closes all file descriptors in [fd_low, fd_high), ignoring errors.\"\"\"\n    pass\ndef device_encoding(*args,**kw):\n    \"\"\"device_encoding(fd) -> str    \n    Return a string describing the encoding of the device\n    if the output is a terminal; else return None.\"\"\"\n    pass\ndef dup(*args,**kw):\n    \"\"\"dup(fd) -> fd2    \n    Return a duplicate of a file descriptor.\"\"\"\n    pass\ndef dup2(*args,**kw):\n    \"\"\"dup2(old_fd, new_fd)    \n    Duplicate file descriptor.\"\"\"\n    pass\nenviron = {}\nerror = OSError\ndef execv(*args,**kw):\n    \"\"\"execv(path, args)    \n    Execute an executable path with arguments, replacing current process.\n        path: path of executable file\n        args: tuple or list of strings\"\"\"\n    pass\ndef execve(*args,**kw):\n    \"\"\"execve(path, args, env)    \n    Execute a path with arguments and environment, replacing current process.\n        path: path of executable file\n        args: tuple or list of arguments\n        env: dictionary of strings mapping to strings\n    On some platforms, you may specify an open file descriptor for path;\n      execve will execute the program the file descriptor is open to.\n      If this functionality is unavailable, using it raises NotImplementedError.\"\"\"\n    pass\ndef fstat(*args,**kw):\n    \"\"\"fstat(fd) -> stat result    \n    Like stat(), but for an open file descriptor.\n    Equivalent to stat(fd=fd).\"\"\"\n    pass\ndef fsync(*args,**kw):\n    \"\"\"fsync(fildes)    \n    force write of file with filedescriptor to disk.\"\"\"\n    pass\ndef get_terminal_size(*args,**kw):\n    \"\"\"Return the size of the terminal window as (columns, lines).    \n    The optional argument fd (default standard output) specifies\n    which file descriptor should be queried.\n    If the file descriptor is not connected to a terminal, an OSError\n    is thrown.\n    This function will only be defined if an implementation is\n    available for this system.\n    shutil.get_terminal_size is the high-level function which should \n    normally be used, os.get_terminal_size is the low-level implementation.\"\"\"\n    pass\ndef getcwd(*args,**kw):\n    \"\"\"getcwd() -> path    \n    Return a unicode string representing the current working directory.\"\"\"\n    return __BRYTHON__.brython_path # XXX fix me\ndef getcwdb(*args,**kw):\n    \"\"\"getcwdb() -> path    \n    Return a bytes string representing the current working directory.\"\"\"\n    pass\ndef getlogin(*args,**kw):\n    \"\"\"getlogin() -> string    \n    Return the actual login name.\"\"\"\n    pass\ndef getpid(*args,**kw):\n    \"\"\"getpid() -> pid    \n    Return the current process id\"\"\"\n    return 0\ndef getppid(*args,**kw):\n    \"\"\"getppid() -> ppid    \n    Return the parent's process id.  If the parent process has already exited,\n    Windows machines will still return its id; others systems will return the id\n    of the 'init' process (1).\"\"\"\n    pass\ndef isatty(*args,**kw):\n    \"\"\"isatty(fd) -> bool    \n    Return True if the file descriptor 'fd' is an open file descriptor\n    connected to the slave end of a terminal.\"\"\"\n    pass\ndef kill(*args,**kw):\n    \"\"\"kill(pid, sig)    \n    Kill a process with a signal.\"\"\"\n    pass\ndef link(*args,**kw):\n    \"\"\"link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)    \n    Create a hard link to a file.\n    If either src_dir_fd or dst_dir_fd is not None, it should be a file\n      descriptor open to a directory, and the respective path string (src or dst)\n      should be relative; the path will then be relative to that directory.\n    If follow_symlinks is False, and the last element of src is a symbolic\n      link, link will create a link to the symbolic link itself instead of the\n      file the link points to.\n    src_dir_fd, dst_dir_fd, and follow_symlinks may not be implemented on your\n      platform.  If they are unavailable, using them will raise a\n      NotImplementedError.\"\"\"\n    pass\ndef listdir(*args,**kw):\n    \"\"\"listdir(path='.') -> list_of_filenames    \n    Return a list containing the names of the files in the directory.\n    The list is in arbitrary order.  It does not include the special\n    entries '.' and '..' even if they are present in the directory.\n    path can be specified as either str or bytes.  If path is bytes,\n      the filenames returned will also be bytes; in all other circumstances\n      the filenames returned will be str.\n    On some platforms, path may also be specified as an open file descriptor;\n      the file descriptor must refer to a directory.\n      If this functionality is unavailable, using it raises NotImplementedError.\"\"\"\n    pass\ndef lseek(*args,**kw):\n    \"\"\"lseek(fd, pos, how) -> newpos    \n    Set the current position of a file descriptor.\n    Return the new cursor position in bytes, starting from the beginning.\"\"\"\n    pass\ndef lstat(*args,**kw):\n    \"\"\"lstat(path, *, dir_fd=None) -> stat result    \n    Like stat(), but do not follow symbolic links.\n    Equivalent to stat(path, follow_symlinks=False).\"\"\"\n    return stat_result()\ndef mkdir(*args,**kw):\n    \"\"\"mkdir(path, mode=0o777, *, dir_fd=None)    \n    Create a directory.\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    dir_fd may not be implemented on your platform.\n      If it is unavailable, using it will raise a NotImplementedError.\n    The mode argument is ignored on Windows.\"\"\"\n    pass\ndef open(*args,**kw):\n    \"\"\"open(path, flags, mode=0o777, *, dir_fd=None)    \n    Open a file for low level IO.  Returns a file handle (integer).\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    dir_fd may not be implemented on your platform.\n      If it is unavailable, using it will raise a NotImplementedError.\"\"\"\n    pass\ndef pipe(*args,**kw):\n    \"\"\"pipe() -> (read_end, write_end)    \n    Create a pipe.\"\"\"\n    pass\ndef putenv(*args,**kw):\n    \"\"\"putenv(key, value)    \n    Change or add an environment variable.\"\"\"\n    pass\ndef read(*args,**kw):\n    \"\"\"read(fd, buffersize) -> string    \n    Read a file descriptor.\"\"\"\n    pass\ndef readlink(*args,**kw):\n    \"\"\"readlink(path, *, dir_fd=None) -> path    \n    Return a string representing the path to which the symbolic link points.\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    dir_fd may not be implemented on your platform.\n      If it is unavailable, using it will raise a NotImplementedError.\"\"\"\n    pass\ndef remove(*args,**kw):\n    \"\"\"remove(path, *, dir_fd=None)    \n    Remove a file (same as unlink()).\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    dir_fd may not be implemented on your platform.\n      If it is unavailable, using it will raise a NotImplementedError.\"\"\"\n    pass\ndef rename(*args,**kw):\n    \"\"\"rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)    \n    Rename a file or directory.\n    If either src_dir_fd or dst_dir_fd is not None, it should be a file\n      descriptor open to a directory, and the respective path string (src or dst)\n      should be relative; the path will then be relative to that directory.\n    src_dir_fd and dst_dir_fd, may not be implemented on your platform.\n      If they are unavailable, using them will raise a NotImplementedError.\"\"\"\n    pass\ndef replace(*args,**kw):\n    \"\"\"replace(src, dst, *, src_dir_fd=None, dst_dir_fd=None)    \n    Rename a file or directory, overwriting the destination.\n    If either src_dir_fd or dst_dir_fd is not None, it should be a file\n      descriptor open to a directory, and the respective path string (src or dst)\n      should be relative; the path will then be relative to that directory.\n    src_dir_fd and dst_dir_fd, may not be implemented on your platform.\n      If they are unavailable, using them will raise a NotImplementedError.\"\"\"\n    pass\ndef rmdir(*args,**kw):\n    \"\"\"rmdir(path, *, dir_fd=None)    \n    Remove a directory.\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    dir_fd may not be implemented on your platform.\n      If it is unavailable, using it will raise a NotImplementedError.\"\"\"\n    pass\ndef spawnv(*args,**kw):\n    \"\"\"spawnv(mode, path, args)    \n    Execute the program 'path' in a new process.\n        mode: mode of process creation\n        path: path of executable file\n        args: tuple or list of strings\"\"\"\n    pass\ndef spawnve(*args,**kw):\n    \"\"\"spawnve(mode, path, args, env)    \n    Execute the program 'path' in a new process.\n        mode: mode of process creation\n        path: path of executable file\n        args: tuple or list of arguments\n        env: dictionary of strings mapping to strings\"\"\"\n    pass\ndef startfile(*args,**kw):\n    \"\"\"startfile(filepath [, operation]) - Start a file with its associated    application.\n    When \"operation\" is not specified or \"open\", this acts like\n    double-clicking the file in Explorer, or giving the file name as an\n    argument to the DOS \"start\" command: the file is opened with whatever\n    application (if any) its extension is associated.\n    When another \"operation\" is given, it specifies what should be done with\n    the file.  A typical operation is \"print\".\n    startfile returns as soon as the associated application is launched.\n    There is no option to wait for the application to close, and no way\n    to retrieve the application's exit status.\n    The filepath is relative to the current directory.  If you want to use\n    an absolute path, make sure the first character is not a slash (\"/\");\n    the underlying Win32 ShellExecute function doesn't work if it is.\"\"\"\n    pass\ndef stat(*args,**kw):\n    \"\"\"stat(path, *, dir_fd=None, follow_symlinks=True) -> stat result    \n    Perform a stat system call on the given path.\n    path may be specified as either a string or as an open file descriptor.\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n      dir_fd may not be supported on your platform; if it is unavailable, using\n      it will raise a NotImplementedError.\n    If follow_symlinks is False, and the last element of the path is a symbolic\n      link, stat will examine the symbolic link itself instead of the file the\n      link points to.\n    It is an error to use dir_fd or follow_symlinks when specifying path as\n      an open file descriptor.\"\"\"\n    return stat_result()\ndef stat_float_times(*args,**kw):\n    \"\"\"stat_float_times([newval]) -> oldval    \n    Determine whether os.[lf]stat represents time stamps as float objects.\n    If newval is True, future calls to stat() return floats, if it is False,\n    future calls return ints. \n    If newval is omitted, return the current setting.\n    \"\"\"\n    pass\nclass stat_result:\n    def __init__(self):\n        \"\"\"st_mode - protection bits, \n        st_ino - inode number, \n        st_dev - device, \n        st_nlink - number of hard links, \n        st_uid - user id of owner, \n        st_gid - group id of owner, \n        st_size - size of file, in bytes, \n        st_atime - time of most recent access expressed in seconds, \n        st_mtime - time of most recent content modification expressed in \n            seconds, \n        st_ctime - platform dependent; time of most recent metadata change on \n            Unix, or the time of creation on Windows, expressed in seconds \n        st_atime_ns - time of most recent access expressed in nanoseconds as an\n             integer, \n        st_mtime_ns - time of most recent content modification expressed in \n            nanoseconds as an integer, \n        st_ctime_ns - platform dependent; time of most recent metadata change \n            on Unix, or the time of creation on Windows, expressed in \n            nanoseconds as an integer \"\"\"\n        self.st_atime = datetime.datetime.now()\n        self.st_mtime = self.st_ctime = self.st_atime_ns = \\\n            self.st_mtime_ns = self.st_ctime_ns = self.st_atime\n        self.st_uid = self.st_gid = self.st_ino = -1\n        self.st_mode = 0\n        self.st_size = 1\nclass statvfs_result:\n    pass\ndef strerror(*args,**kw):\n    \"\"\"strerror(code) -> string    \n    Translate an error code to a message string.\"\"\"\n    pass\ndef symlink(*args,**kw):\n    \"\"\"symlink(src, dst, target_is_directory=False, *, dir_fd=None)    \n    Create a symbolic link pointing to src named dst.\n    target_is_directory is required on Windows if the target is to be\n      interpreted as a directory.  (On Windows, symlink requires\n      Windows 6.0 or greater, and raises a NotImplementedError otherwise.)\n      target_is_directory is ignored on non-Windows platforms.\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    dir_fd may not be implemented on your platform.\n      If it is unavailable, using it will raise a NotImplementedError.\"\"\"\n    pass\ndef system(*args,**kw):\n    \"\"\"system(command) -> exit_status    \n    Execute the command (a string) in a subshell.\"\"\"\n    pass\nclass terminal_size:\n    pass\ndef times(*args,**kw):\n    \"\"\"times() -> times_result    \n    Return an object containing floating point numbers indicating process\n    times.  The object behaves like a named tuple with these fields:\n      (utime, stime, cutime, cstime, elapsed_time)\"\"\"\n    pass\nclass times_result:\n    pass\ndef umask(*args,**kw):\n    \"\"\"umask(new_mask) -> old_mask    \n    Set the current numeric umask and return the previous umask.\"\"\"\n    pass\nclass uname_result:\n    pass\ndef unlink(*args,**kw):\n    \"\"\"unlink(path, *, dir_fd=None)    \n    Remove a file (same as remove()).\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    dir_fd may not be implemented on your platform.\n      If it is unavailable, using it will raise a NotImplementedError.\"\"\"\n    pass\ndef urandom(n):\n    \"\"\"urandom(n) -> str    \n    Return n random bytes suitable for cryptographic use.\"\"\"\n    import __random\n    randbytes= [chr(__random.randint(0,256)) for i in range(n)]\n    return ''.join(randbytes)\ndef utime(*args,**kw):\n    \"\"\"utime(path, times=None, *, ns=None, dir_fd=None, follow_symlinks=True)    Set the access and modified time of path.\n    path may always be specified as a string.\n    On some platforms, path may also be specified as an open file descriptor.\n      If this functionality is unavailable, using it raises an exception.\n    If times is not None, it must be a tuple (atime, mtime);\n        atime and mtime should be expressed as float seconds since the epoch.\n    If ns is not None, it must be a tuple (atime_ns, mtime_ns);\n        atime_ns and mtime_ns should be expressed as integer nanoseconds\n        since the epoch.\n    If both times and ns are None, utime uses the current time.\n    Specifying tuples for both times and ns is an error.\n    If dir_fd is not None, it should be a file descriptor open to a directory,\n      and path should be relative; path will then be relative to that directory.\n    If follow_symlinks is False, and the last element of the path is a symbolic\n      link, utime will modify the symbolic link itself instead of the file the\n      link points to.\n    It is an error to use dir_fd or follow_symlinks when specifying path\n      as an open file descriptor.\n    dir_fd and follow_symlinks may not be available on your platform.\n      If they are unavailable, using them will raise a NotImplementedError.\"\"\"\n    pass\ndef waitpid(*args,**kw):\n    \"\"\"waitpid(pid, options) -> (pid, status << 8)    \n    Wait for completion of a given process.  options is ignored on Windows.\"\"\"\n    pass\ndef write(*args,**kw):\n    \"\"\"write(fd, string) -> byteswritten    \n    Write a string to a file descriptor.\"\"\"\n    pass\n", "/Lib/_string.py": "\"\"\"string helper module\"\"\"\nclass __loader__(object):\n    pass\ndef formatter_field_name_split(*args,**kw):\n    \"\"\"split the argument as a field name\"\"\"\n    pass\ndef formatter_parser(*args,**kw):\n    \"\"\"parse the argument as a format string\"\"\"\n    pass\n", "/Lib/unittest/suite.py": "\"\"\"TestSuite\"\"\"\nimport sys\nfrom . import case\nfrom . import util\n__unittest = True\ndef _call_if_exists(parent, attr):\n    func = getattr(parent, attr, lambda: None)\n    func()\nclass BaseTestSuite(object):\n    \"\"\"A simple test suite that doesn't provide class or module shared fixtures.\n    \"\"\"\n    def __init__(self, tests=()):\n        self._tests = []\n        self.addTests(tests)\n    def __repr__(self):\n        return \"<%s tests=%s>\" % (util.strclass(self.__class__), list(self))\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return list(self) == list(other)\n    def __ne__(self, other):\n        return not self == other\n    def __iter__(self):\n        return iter(self._tests)\n    def countTestCases(self):\n        cases = 0\n        for test in self:\n            cases += test.countTestCases()\n        return cases\n    def addTest(self, test):\n        if not callable(test):\n            raise TypeError(\"{} is not callable\".format(repr(test)))\n        if isinstance(test, type) and issubclass(test,\n                                                 (case.TestCase, TestSuite)):\n            raise TypeError(\"TestCases and TestSuites must be instantiated \"\n                            \"before passing them to addTest()\")\n        self._tests.append(test)\n    def addTests(self, tests):\n        if isinstance(tests, str):\n            raise TypeError(\"tests must be an iterable of tests, not a string\")\n        for test in tests:\n            self.addTest(test)\n    def run(self, result):\n        for test in self:\n            if result.shouldStop:\n                break\n            test(result)\n        return result\n    def __call__(self, *args, **kwds):\n        return self.run(*args, **kwds)\n    def debug(self):\n        \"\"\"Run the tests without collecting errors in a TestResult\"\"\"\n        for test in self:\n            test.debug()\nclass TestSuite(BaseTestSuite):\n    \"\"\"A test suite is a composite test consisting of a number of TestCases.\n    For use, create an instance of TestSuite, then add test case instances.\n    When all tests have been added, the suite can be passed to a test\n    runner, such as TextTestRunner. It will run the individual test cases\n    in the order in which they were added, aggregating the results. When\n    subclassing, do not forget to call the base class constructor.\n    \"\"\"\n    def run(self, result, debug=False):\n        topLevel = False\n        if getattr(result, '_testRunEntered', False) is False:\n            result._testRunEntered = topLevel = True\n        for test in self:\n            if result.shouldStop:\n                break\n            if _isnotsuite(test):\n                self._tearDownPreviousClass(test, result)\n                self._handleModuleFixture(test, result)\n                self._handleClassSetUp(test, result)\n                result._previousTestClass = test.__class__\n                if (getattr(test.__class__, '_classSetupFailed', False) or\n                    getattr(result, '_moduleSetUpFailed', False)):\n                    continue\n            if not debug:\n                test(result)\n            else:\n                test.debug()\n        if topLevel:\n            self._tearDownPreviousClass(None, result)\n            self._handleModuleTearDown(result)\n            result._testRunEntered = False\n        return result\n    def debug(self):\n        \"\"\"Run the tests without collecting errors in a TestResult\"\"\"\n        debug = _DebugResult()\n        self.run(debug, True)\n    def _handleClassSetUp(self, test, result):\n        previousClass = getattr(result, '_previousTestClass', None)\n        currentClass = test.__class__\n        if currentClass == previousClass:\n            return\n        if result._moduleSetUpFailed:\n            return\n        if getattr(currentClass, \"__unittest_skip__\", False):\n            return\n        try:\n            currentClass._classSetupFailed = False\n        except TypeError:\n            pass\n        setUpClass = getattr(currentClass, 'setUpClass', None)\n        if setUpClass is not None:\n            _call_if_exists(result, '_setupStdout')\n            try:\n                setUpClass()\n            except Exception as e:\n                if isinstance(result, _DebugResult):\n                    raise\n                currentClass._classSetupFailed = True\n                className = util.strclass(currentClass)\n                errorName = 'setUpClass (%s)' % className\n                self._addClassOrModuleLevelException(result, e, errorName)\n            finally:\n                _call_if_exists(result, '_restoreStdout')\n    def _get_previous_module(self, result):\n        previousModule = None\n        previousClass = getattr(result, '_previousTestClass', None)\n        if previousClass is not None:\n            previousModule = previousClass.__module__\n        return previousModule\n    def _handleModuleFixture(self, test, result):\n        previousModule = self._get_previous_module(result)\n        currentModule = test.__class__.__module__\n        if currentModule == previousModule:\n            return\n        self._handleModuleTearDown(result)\n        result._moduleSetUpFailed = False\n        try:\n            module = sys.modules[currentModule]\n        except KeyError:\n            return\n        setUpModule = getattr(module, 'setUpModule', None)\n        if setUpModule is not None:\n            _call_if_exists(result, '_setupStdout')\n            try:\n                setUpModule()\n            except Exception as e:\n                if isinstance(result, _DebugResult):\n                    raise\n                result._moduleSetUpFailed = True\n                errorName = 'setUpModule (%s)' % currentModule\n                self._addClassOrModuleLevelException(result, e, errorName)\n            finally:\n                _call_if_exists(result, '_restoreStdout')\n    def _addClassOrModuleLevelException(self, result, exception, errorName):\n        error = _ErrorHolder(errorName)\n        addSkip = getattr(result, 'addSkip', None)\n        if addSkip is not None and isinstance(exception, case.SkipTest):\n            addSkip(error, str(exception))\n        else:\n            result.addError(error, sys.exc_info())\n    def _handleModuleTearDown(self, result):\n        previousModule = self._get_previous_module(result)\n        if previousModule is None:\n            return\n        if result._moduleSetUpFailed:\n            return\n        try:\n            module = sys.modules[previousModule]\n        except KeyError:\n            return\n        tearDownModule = getattr(module, 'tearDownModule', None)\n        if tearDownModule is not None:\n            _call_if_exists(result, '_setupStdout')\n            try:\n                tearDownModule()\n            except Exception as e:\n                if isinstance(result, _DebugResult):\n                    raise\n                errorName = 'tearDownModule (%s)' % previousModule\n                self._addClassOrModuleLevelException(result, e, errorName)\n            finally:\n                _call_if_exists(result, '_restoreStdout')\n    def _tearDownPreviousClass(self, test, result):\n        previousClass = getattr(result, '_previousTestClass', None)\n        currentClass = test.__class__\n        if currentClass == previousClass:\n            return\n        if getattr(previousClass, '_classSetupFailed', False):\n            return\n        if getattr(result, '_moduleSetUpFailed', False):\n            return\n        if getattr(previousClass, \"__unittest_skip__\", False):\n            return\n        tearDownClass = getattr(previousClass, 'tearDownClass', None)\n        if tearDownClass is not None:\n            _call_if_exists(result, '_setupStdout')\n            try:\n                tearDownClass()\n            except Exception as e:\n                if isinstance(result, _DebugResult):\n                    raise\n                className = util.strclass(previousClass)\n                errorName = 'tearDownClass (%s)' % className\n                self._addClassOrModuleLevelException(result, e, errorName)\n            finally:\n                _call_if_exists(result, '_restoreStdout')\nclass _ErrorHolder(object):\n    \"\"\"\n    Placeholder for a TestCase inside a result. As far as a TestResult\n    is concerned, this looks exactly like a unit test. Used to insert\n    arbitrary errors into a test suite run.\n    \"\"\"\n    failureException = None\n    def __init__(self, description):\n        self.description = description\n    def id(self):\n        return self.description\n    def shortDescription(self):\n        return None\n    def __repr__(self):\n        return \"<ErrorHolder description=%r>\" % (self.description,)\n    def __str__(self):\n        return self.id()\n    def run(self, result):\n        pass\n    def __call__(self, result):\n        return self.run(result)\n    def countTestCases(self):\n        return 0\ndef _isnotsuite(test):\n    \"A crude way to tell apart testcases and suites with duck-typing\"\n    try:\n        iter(test)\n    except TypeError:\n        return True\n    return False\nclass _DebugResult(object):\n    \"Used by the TestSuite to hold previous class when running in debug.\"\n    _previousTestClass = None\n    _moduleSetUpFailed = False\n    shouldStop = False\n", "/Lib/unittest/__main__.py": "\"\"\"Main entry point\"\"\"\r\nimport sys\r\nif sys.argv[0].endswith(\"__main__.py\"):\r\n    sys.argv[0] = \"python -m unittest\"\r\n__unittest = True\r\nfrom .main import main, TestProgram, USAGE_AS_MAIN\r\nTestProgram.USAGE = USAGE_AS_MAIN\r\nmain(module=None)\r\n", "/Lib/importlib/util.py": "\"\"\"Utility code for constructing importers, etc.\"\"\"\r\nfrom ._bootstrap import module_for_loader\r\nfrom ._bootstrap import set_loader\r\nfrom ._bootstrap import set_package\r\nfrom ._bootstrap import _resolve_name\r\ndef resolve_name(name, package):\r\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\r\n    if not name.startswith('.'):\r\n        return name\r\n    elif not package:\r\n        raise ValueError('{!r} is not a relative name '\r\n                         '(no leading dot)'.format(name))\r\n    level = 0\r\n    for character in name:\r\n        if character != '.':\r\n            break\r\n        level += 1\r\n    return _resolve_name(name[level:], package, level)\r\n", "/libs/_browser.js": "$module={$$alert:__BRYTHON__._alert,confirm:function(message){return __BRYTHON__.JSObject(window.confirm(message));},$$document:__BRYTHON__.$DOMNode(document),doc:__BRYTHON__.$DOMNode(document),mouseCoords:function(ev){return __BRYTHON__.JSObject($mouseCoords(ev));},prompt:function(message,default_value){return __BRYTHON__.JSObject(window.prompt(message,default_value||''));},win:__BRYTHON__.win,$$window:__BRYTHON__.win};$module.__class__=$module;$module.__str__=function(){return \"<module 'browser'>\";};", "/Lib/keyword.py": "kwlist = [\n        'False',\n        'None',\n        'True',\n        'and',\n        'as',\n        'assert',\n        'break',\n        'class',\n        'continue',\n        'def',\n        'del',\n        'elif',\n        'else',\n        'except',\n        'finally',\n        'for',\n        'from',\n        'global',\n        'if',\n        'import',\n        'in',\n        'is',\n        'lambda',\n        'nonlocal',\n        'not',\n        'or',\n        'pass',\n        'raise',\n        'return',\n        'try',\n        'while',\n        'with',\n        'yield',\n        ]\ndef iskeyword(word):\n    return word in kwlist\n", "/Lib/_pyio.py": "import os\nimport codecs\nimport warnings\nimport errno\nfrom _dummy_thread import allocate_lock as Lock\nfrom errno import EINTR\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\nDEFAULT_BUFFER_SIZE = 8 * 1024  # bytes\nclass BlockingIOError(IOError):\n    \"Exception raised when I/O would block on a non-blocking I/O stream.\"\n    def __init__(self, errno, strerror, characters_written=0):\n        IOError.__init__(self, errno, strerror)\n        if not isinstance(characters_written, int):\n            raise TypeError(\"characters_written must be a integer\")\n        self.characters_written = characters_written\ndef open(file, mode=\"r\", buffering=-1, encoding=None, errors=None,\\\n         newline=None, closefd=True):\n    if not isinstance(file, (str, bytes, int)):\n        raise TypeError(\"invalid file: %r\" % file)\n    if not isinstance(mode, str):\n        raise TypeError(\"invalid mode: %r\" % mode)\n    if not isinstance(buffering, int):\n        raise TypeError(\"invalid buffering: %r\" % buffering)\n    if encoding is not None and not isinstance(encoding, str):\n        raise TypeError(\"invalid encoding: %r\" % encoding)\n    if errors is not None and not isinstance(errors, str):\n        raise TypeError(\"invalid errors: %r\" % errors)\n    modes = set(mode)\n    if modes - set(\"arwb+tU\") or len(mode) > len(modes):\n        raise ValueError(\"invalid mode: %r\" % mode)\n    reading = \"r\" in modes\n    writing = \"w\" in modes\n    appending = \"a\" in modes\n    updating = \"+\" in modes\n    text = \"t\" in modes\n    binary = \"b\" in modes\n    if \"U\" in modes:\n        if writing or appending:\n            raise ValueError(\"can't use U and writing mode at once\")\n        reading = True\n    if text and binary:\n        raise ValueError(\"can't have text and binary mode at once\")\n    if reading + writing + appending > 1:\n        raise ValueError(\"can't have read/write/append mode at once\")\n    if not (reading or writing or appending):\n        raise ValueError(\"must have exactly one of read/write/append mode\")\n    if binary and encoding is not None:\n        raise ValueError(\"binary mode doesn't take an encoding argument\")\n    if binary and errors is not None:\n        raise ValueError(\"binary mode doesn't take an errors argument\")\n    if binary and newline is not None:\n        raise ValueError(\"binary mode doesn't take a newline argument\")\n    raw = FileIO(file,\n                 (reading and \"r\" or \"\") +\n                 (writing and \"w\" or \"\") +\n                 (appending and \"a\" or \"\") +\n                 (updating and \"+\" or \"\"),\n                 closefd)\n    line_buffering = False\n    if buffering == 1 or buffering < 0 and raw.isatty():\n        buffering = -1\n        line_buffering = True\n    if buffering < 0:\n        buffering = DEFAULT_BUFFER_SIZE\n        try:\n            bs = os.fstat(raw.fileno()).st_blksize\n        except:\n            pass\n        else:\n            if bs > 1:\n                buffering = bs\n    if buffering < 0:\n        raise ValueError(\"invalid buffering size\")\n    if buffering == 0:\n        if binary:\n            return raw\n        raise ValueError(\"can't have unbuffered text I/O\")\n    if updating:\n        buffer = BufferedRandom(raw, buffering)\n    elif writing or appending:\n        buffer = BufferedWriter(raw, buffering)\n    elif reading:\n        buffer = BufferedReader(raw, buffering)\n    else:\n        raise ValueError(\"unknown mode: %r\" % mode)\n    if binary:\n        return buffer\n    text = TextIOWrapper(buffer, encoding, errors, newline, line_buffering)\n    text.mode = mode\n    return text\nclass DocDescriptor:\n    \"Helper for builtins.open.__doc__\"\n    def __get__(self, obj, typ):\n        return (\n            \"open(file, mode='r', buffering=-1, encoding=None, \"\n                 \"errors=None, newline=None, closefd=True)\\n\\n\" +\n            open.__doc__)\nclass OpenWrapper:\n    __doc__ = DocDescriptor()\n    def __new__(cls, *args, **kwargs):\n        return open(*args, **kwargs)\n    pass\nclass UnsupportedOperation(ValueError, IOError):\n   pass\nclass IOBase:\n    def _unsupported(self, name):\n        \"Internal: raise an IOError exception for unsupported operations.\"\n        raise UnsupportedOperation(\"%s.%s() not supported\" %\n                                   (self.__class__.__name__, name))\n    def seek(self, pos, whence=0):\n        self._unsupported(\"seek\")\n    def tell(self):\n        \"Return an int indicating the current stream position.\"\n        return self.seek(0, 1)\n    def truncate(self, pos=None):\n        self._unsupported(\"truncate\")\n    def flush(self):\n        self._checkClosed()\n    __closed = False\n    def close(self):\n        if not self.__closed:\n            self.flush()\n            self.__closed = True\n    def __del__(self):\n        try:\n            self.close()\n        except:\n            pass\n    def seekable(self):\n        return False\n    def _checkSeekable(self, msg=None):\n        if not self.seekable():\n            raise UnsupportedOperation(\"File or stream is not seekable.\"\n                                       if msg is None else msg)\n    def readable(self):\n        return False\n    def _checkReadable(self, msg=None):\n        if not self.readable():\n            raise UnsupportedOperation(\"File or stream is not readable.\"\n                                       if msg is None else msg)\n    def writable(self):\n        return False\n    def _checkWritable(self, msg=None):\n        if not self.writable():\n            raise UnsupportedOperation(\"File or stream is not writable.\"\n                                       if msg is None else msg)\n    def closed(self):\n        return self.__closed\n    def _checkClosed(self, msg=None):\n        if self.closed:\n            raise ValueError(\"I/O operation on closed file.\"\n                             if msg is None else msg)\n    def __enter__(self):  # That's a forward reference\n        self._checkClosed()\n        return self\n    def __exit__(self, *args):\n        self.close()\n    def fileno(self):\n        self._unsupported(\"fileno\")\n    def isatty(self):\n        self._checkClosed()\n        return False\n    def readline(self, limit=-1):\n        if hasattr(self, \"peek\"):\n            def nreadahead():\n                readahead = self.peek(1)\n                if not readahead:\n                    return 1\n                n = (readahead.find(\"\\n\") + 1) or len(readahead)\n                if limit >= 0:\n                    n = min(n, limit)\n                return n\n        else:\n            def nreadahead():\n                return 1\n        if limit is None:\n            limit = -1\n        elif not isinstance(limit, int):\n            raise TypeError(\"limit must be an integer\")\n        res = bytearray()\n        while limit < 0 or len(res) < limit:\n            b = self.read(nreadahead())\n            if not b:\n                break\n            res += b\n            if res.endswith(\"\\n\"):\n                break\n        return bytes(res)\n    def __iter__(self):\n        self._checkClosed()\n        return self\n    def __next__(self):\n        line = self.readline()\n        if not line:\n            raise StopIteration\n        return line\n    def readlines(self, hint=None):\n        if hint is None or hint <= 0:\n            return list(self)\n        n = 0\n        lines = []\n        for line in self:\n            lines.append(line)\n            n += len(line)\n            if n >= hint:\n                break\n        return lines\n    def writelines(self, lines):\n        self._checkClosed()\n        for line in lines:\n            self.write(line)\nclass RawIOBase(IOBase):\n    def read(self, n=-1):\n        if n is None:\n            n = -1\n        if n < 0:\n            return self.readall()\n        b = bytearray(n.__index__())\n        n = self.readinto(b)\n        if n is None:\n            return None\n        del b[n:]\n        return bytes(b)\n    def readall(self):\n        res = bytearray()\n        while True:\n            data = self.read(DEFAULT_BUFFER_SIZE)\n            if not data:\n                break\n            res += data\n        if res:\n            return bytes(res)\n        else:\n            return data\n    def readinto(self, b):\n        self._unsupported(\"readinto\")\n    def write(self, b):\n        self._unsupported(\"write\")\nclass FileIO(RawIOBase):\n  pass\nclass BufferedIOBase(IOBase):\n    def read(self, n=None):\n        self._unsupported(\"read\")\n    def read1(self, n=None):\n        self._unsupported(\"read1\")\n    def readinto(self, b):\n        data = self.read(len(b))\n        n = len(data)\n        try:\n            b[:n] = data\n        except TypeError as err:\n            import array\n            if not isinstance(b, array.array):\n                raise err\n            b[:n] = array.array('b', data)\n        return n\n    def write(self, b):\n        self._unsupported(\"write\")\n    def detach(self):\n        self._unsupported(\"detach\")\nclass _BufferedIOMixin(BufferedIOBase):\n    def __init__(self, raw):\n        self._raw = raw\n    def seek(self, pos, whence=0):\n        new_position = self.raw.seek(pos, whence)\n        if new_position < 0:\n            raise IOError(\"seek() returned an invalid position\")\n        return new_position\n    def tell(self):\n        pos = self.raw.tell()\n        if pos < 0:\n            raise IOError(\"tell() returned an invalid position\")\n        return pos\n    def truncate(self, pos=None):\n        self.flush()\n        if pos is None:\n            pos = self.tell()\n        return self.raw.truncate(pos)\n    def flush(self):\n        if self.closed:\n            raise ValueError(\"flush of closed file\")\n        self.raw.flush()\n    def close(self):\n        if self.raw is not None and not self.closed:\n            try:\n                self.flush()   #fix me\n            finally:\n                self.raw.close()\n    def detach(self):\n        if self.raw is None:\n            raise ValueError(\"raw stream already detached\")\n        self.flush()\n        raw = self._raw\n        self._raw = None\n        return raw\n    def seekable(self):\n        return self.raw.seekable()\n    def readable(self):\n        return self.raw.readable()\n    def writable(self):\n        return self.raw.writable()\n    def raw(self):\n        return self._raw\n    def closed(self):\n        return self.raw.closed\n    def name(self):\n        return self.raw.name\n    def mode(self):\n        return self.raw.mode\n    def __getstate__(self):\n        raise TypeError(\"can not serialize a '{0}' object\"\n                        .format(self.__class__.__name__))\n    def __repr__(self):\n        clsname = self.__class__.__name__\n        try:\n            name = self.name\n        except AttributeError:\n            return \"<_pyio.{0}>\".format(clsname)\n        else:\n            return \"<_pyio.{0} name={1!r}>\".format(clsname, name)\n    def fileno(self):\n        return self.raw.fileno()\n    def isatty(self):\n        return self.raw.isatty()\nclass BytesIO(BufferedIOBase):\n    def __init__(self, initial_bytes=None):\n        buf = bytearray()\n        if initial_bytes is not None:\n            buf += initial_bytes\n        self._buffer = buf\n        self._pos = 0\n    def __getstate__(self):\n        if self.closed:\n            raise ValueError(\"__getstate__ on closed file\")\n        return self.__dict__.copy()\n    def getvalue(self):\n        if self.closed:\n            raise ValueError(\"getvalue on closed file\")\n        return bytes(self._buffer)\n    def getbuffer(self):\n        return memoryview(self._buffer)\n    def read(self, n=None):\n        if self.closed:\n            raise ValueError(\"read from closed file\")\n        if n is None:\n            n = -1\n        if n < 0:\n            n = len(self._buffer)\n        if len(self._buffer) <= self._pos:\n            return \"\"\n        newpos = min(len(self._buffer), self._pos + n)\n        b = self._buffer[self._pos : newpos]\n        self._pos = newpos\n        return bytes(b)\n    def read1(self, n):\n        return self.read(n)\n    def write(self, b):\n        if self.closed:\n            raise ValueError(\"write to closed file\")\n        if isinstance(b, str):\n            raise TypeError(\"can't write str to binary stream\")\n        n = len(b)\n        if n == 0:\n            return 0\n        pos = self._pos\n        if pos > len(self._buffer):\n            padding = '\\x00' * (pos - len(self._buffer))\n            self._buffer += padding\n        self._buffer[pos:pos + n] = b\n        self._pos += n\n        return n\n    def seek(self, pos, whence=0):\n        if self.closed:\n            raise ValueError(\"seek on closed file\")\n        try:\n            pos.__index__\n        except AttributeError as err:\n            raise TypeError(\"an integer is required\") #from err fixme\n        if whence == 0:\n            if pos < 0:\n                raise ValueError(\"negative seek position %r\" % (pos,))\n            self._pos = pos\n        elif whence == 1:\n            self._pos = max(0, self._pos + pos)\n        elif whence == 2:\n            self._pos = max(0, len(self._buffer) + pos)\n        else:\n            raise ValueError(\"invalid whence value\")\n        return self._pos\n    def tell(self):\n        if self.closed:\n            raise ValueError(\"tell on closed file\")\n        return self._pos\n    def truncate(self, pos=None):\n        if self.closed:\n            raise ValueError(\"truncate on closed file\")\n        if pos is None:\n            pos = self._pos\n        else:\n            try:\n                pos.__index__\n            except AttributeError as err:\n                raise TypeError(\"an integer is required\") #from err #fixme\n            if pos < 0:\n                raise ValueError(\"negative truncate position %r\" % (pos,))\n        del self._buffer[pos:]\n        return pos\n    def readable(self):\n        if self.closed:\n            raise ValueError(\"I/O operation on closed file.\")\n        return True\n    def writable(self):\n        if self.closed:\n            raise ValueError(\"I/O operation on closed file.\")\n        return True\n    def seekable(self):\n        if self.closed:\n            raise ValueError(\"I/O operation on closed file.\")\n        return True\nclass BufferedReader(_BufferedIOMixin):\n    def __init__(self, raw, buffer_size=DEFAULT_BUFFER_SIZE):\n        if not raw.readable():\n            raise IOError('\"raw\" argument must be readable.')\n        _BufferedIOMixin.__init__(self, raw)\n        if buffer_size <= 0:\n            raise ValueError(\"invalid buffer size\")\n        self.buffer_size = buffer_size\n        self._reset_read_buf()\n        self._read_lock = Lock()\n    def _reset_read_buf(self):\n        self._read_buf = \"\"\n        self._read_pos = 0\n    def read(self, n=None):\n        if n is not None and n < -1:\n            raise ValueError(\"invalid number of bytes to read\")\n        return self._read_unlocked(n)\n    def _read_unlocked(self, n=None):\n        nodata_val = \"\"\n        empty_values = (\"\", None)\n        buf = self._read_buf\n        pos = self._read_pos\n        if n is None or n == -1:\n            self._reset_read_buf()\n            chunks = [buf[pos:]]  # Strip the consumed bytes.\n            current_size = 0\n            while True:\n                try:\n                    chunk = self.raw.read()\n                except IOError as e:\n                    if e.errno != EINTR:\n                        raise\n                    continue\n                if chunk in empty_values:\n                    nodata_val = chunk\n                    break\n                current_size += len(chunk)\n                chunks.append(chunk)\n            return \"\".join(chunks) or nodata_val\n        avail = len(buf) - pos  # Length of the available buffered data.\n        if n <= avail:\n            self._read_pos += n\n            return buf[pos:pos+n]\n        chunks = [buf[pos:]]\n        wanted = max(self.buffer_size, n)\n        while avail < n:\n            try:\n                chunk = self.raw.read(wanted)\n            except IOError as e:\n                if e.errno != EINTR:\n                    raise\n                continue\n            if chunk in empty_values:\n                nodata_val = chunk\n                break\n            avail += len(chunk)\n            chunks.append(chunk)\n        n = min(n, avail)\n        out = \"\".join(chunks)\n        self._read_buf = out[n:]  # Save the extra data in the buffer.\n        self._read_pos = 0\n        return out[:n] if out else nodata_val\n    def peek(self, n=0):\n        return self._peek_unlocked(n)\n    def _peek_unlocked(self, n=0):\n        want = min(n, self.buffer_size)\n        have = len(self._read_buf) - self._read_pos\n        if have < want or have <= 0:\n            to_read = self.buffer_size - have\n            while True:\n                try:\n                    current = self.raw.read(to_read)\n                except IOError as e:\n                    if e.errno != EINTR:\n                        raise\n                    continue\n                break\n            if current:\n                self._read_buf = self._read_buf[self._read_pos:] + current\n                self._read_pos = 0\n        return self._read_buf[self._read_pos:]\n    def read1(self, n):\n        if n < 0:\n            raise ValueError(\"number of bytes to read must be positive\")\n        if n == 0:\n            return \"\"\n        self._peek_unlocked(1)\n        return self._read_unlocked(\n                min(n, len(self._read_buf) - self._read_pos))\n    def tell(self):\n        return _BufferedIOMixin.tell(self) - len(self._read_buf) + self._read_pos\n    def seek(self, pos, whence=0):\n        if not (0 <= whence <= 2):\n            raise ValueError(\"invalid whence value\")\n        if 1:\n            if whence == 1:\n                pos -= len(self._read_buf) - self._read_pos\n            pos = _BufferedIOMixin.seek(self, pos, whence)\n            self._reset_read_buf()\n            return pos\nclass BufferedWriter(_BufferedIOMixin):\n    _warning_stack_offset = 2\n    def __init__(self, raw,\n                 buffer_size=DEFAULT_BUFFER_SIZE, max_buffer_size=None):\n        if not raw.writable():\n            raise IOError('\"raw\" argument must be writable.')\n        _BufferedIOMixin.__init__(self, raw)\n        if buffer_size <= 0:\n            raise ValueError(\"invalid buffer size\")\n        if max_buffer_size is not None:\n            warnings.warn(\"max_buffer_size is deprecated\", DeprecationWarning,\n                          self._warning_stack_offset)\n        self.buffer_size = buffer_size\n        self._write_buf = bytearray()\n        self._write_lock = Lock()\n    def write(self, b):\n        if self.closed:\n            raise ValueError(\"write to closed file\")\n        if isinstance(b, str):\n            raise TypeError(\"can't write str to binary stream\")\n        if 1:\n            if len(self._write_buf) > self.buffer_size:\n                self._flush_unlocked()\n            before = len(self._write_buf)\n            self._write_buf.extend(b)\n            written = len(self._write_buf) - before\n            if len(self._write_buf) > self.buffer_size:\n                try:\n                    self._flush_unlocked()\n                except BlockingIOError as e:\n                    if len(self._write_buf) > self.buffer_size:\n                        overage = len(self._write_buf) - self.buffer_size\n                        written -= overage\n                        self._write_buf = self._write_buf[:self.buffer_size]\n                        raise BlockingIOError(e.errno, e.strerror, written)\n            return written\n    def truncate(self, pos=None):\n        if 1:\n            self._flush_unlocked()\n            if pos is None:\n                pos = self.raw.tell()\n            return self.raw.truncate(pos)\n    def flush(self):\n        self._flush_unlocked()\n    def _flush_unlocked(self):\n        if self.closed:\n            raise ValueError(\"flush of closed file\")\n        while self._write_buf:\n            try:\n                n = self.raw.write(self._write_buf)\n            except BlockingIOError:\n                raise RuntimeError(\"self.raw should implement RawIOBase: it \"\n                                   \"should not raise BlockingIOError\")\n            except IOError as e:\n                if e.errno != EINTR:\n                    raise\n                continue\n            if n is None:\n                raise BlockingIOError(\n                    errno.EAGAIN,\n                    \"write could not complete without blocking\", 0)\n            if n > len(self._write_buf) or n < 0:\n                raise IOError(\"write() returned incorrect number of bytes\")\n            del self._write_buf[:n]\n    def tell(self):\n        return _BufferedIOMixin.tell(self) + len(self._write_buf)\n    def seek(self, pos, whence=0):\n        if not (0 <= whence <= 2):\n            raise ValueError(\"invalid whence\")\n        if 1:\n            self._flush_unlocked()\n            return _BufferedIOMixin.seek(self, pos, whence)\nclass BufferedRWPair(BufferedIOBase):\n    def __init__(self, reader, writer,\n                 buffer_size=DEFAULT_BUFFER_SIZE, max_buffer_size=None):\n        if max_buffer_size is not None:\n            warnings.warn(\"max_buffer_size is deprecated\", DeprecationWarning, 2)\n        if not reader.readable():\n            raise IOError('\"reader\" argument must be readable.')\n        if not writer.writable():\n            raise IOError('\"writer\" argument must be writable.')\n        self.reader = BufferedReader(reader, buffer_size)\n        self.writer = BufferedWriter(writer, buffer_size)\n    def read(self, n=None):\n        if n is None:\n            n = -1\n        return self.reader.read(n)\n    def readinto(self, b):\n        return self.reader.readinto(b)\n    def write(self, b):\n        return self.writer.write(b)\n    def peek(self, n=0):\n        return self.reader.peek(n)\n    def read1(self, n):\n        return self.reader.read1(n)\n    def readable(self):\n        return self.reader.readable()\n    def writable(self):\n        return self.writer.writable()\n    def flush(self):\n        return self.writer.flush()\n    def close(self):\n        self.writer.close()\n        self.reader.close()\n    def isatty(self):\n        return self.reader.isatty() or self.writer.isatty()\n    def closed(self):\n        return self.writer.closed\nclass BufferedRandom(BufferedWriter, BufferedReader):\n    _warning_stack_offset = 3\n    def __init__(self, raw,\n                 buffer_size=DEFAULT_BUFFER_SIZE, max_buffer_size=None):\n        raw._checkSeekable()\n        BufferedReader.__init__(self, raw, buffer_size)\n        BufferedWriter.__init__(self, raw, buffer_size, max_buffer_size)\n    def seek(self, pos, whence=0):\n        if not (0 <= whence <= 2):\n            raise ValueError(\"invalid whence\")\n        self.flush()\n        if self._read_buf:\n            self.raw.seek(self._read_pos - len(self._read_buf), 1)\n        pos = self.raw.seek(pos, whence)\n        self._reset_read_buf()\n        if pos < 0:\n            raise IOError(\"seek() returned invalid position\")\n        return pos\n    def tell(self):\n        if self._write_buf:\n            return BufferedWriter.tell(self)\n        else:\n            return BufferedReader.tell(self)\n    def truncate(self, pos=None):\n        if pos is None:\n            pos = self.tell()\n        return BufferedWriter.truncate(self, pos)\n    def read(self, n=None):\n        if n is None:\n            n = -1\n        self.flush()\n        return BufferedReader.read(self, n)\n    def readinto(self, b):\n        self.flush()\n        return BufferedReader.readinto(self, b)\n    def peek(self, n=0):\n        self.flush()\n        return BufferedReader.peek(self, n)\n    def read1(self, n):\n        self.flush()\n        return BufferedReader.read1(self, n)\n    def write(self, b):\n        if self._read_buf:\n            self.raw.seek(self._read_pos - len(self._read_buf), 1)\n            self._reset_read_buf()\n        return BufferedWriter.write(self, b)\nclass TextIOBase(IOBase):\n    def read(self, n=-1):\n        self._unsupported(\"read\")\n    def write(self, s):\n        self._unsupported(\"write\")\n    def truncate(self, pos=None):\n        self._unsupported(\"truncate\")\n    def readline(self):\n        self._unsupported(\"readline\")\n    def detach(self):\n        self._unsupported(\"detach\")\n    def encoding(self):\n        return None\n    def newlines(self):\n        return None\n    def errors(self):\n        return None\nclass IncrementalNewlineDecoder(codecs.IncrementalDecoder):\n    def __init__(self, decoder, translate, errors='strict'):\n        codecs.IncrementalDecoder.__init__(self, errors=errors)\n        self.translate = translate\n        self.decoder = decoder\n        self.seennl = 0\n        self.pendingcr = False\n    def decode(self, input, final=False):\n        if self.decoder is None:\n            output = input\n        else:\n            output = self.decoder.decode(input, final=final)\n        if self.pendingcr and (output or final):\n            output = \"\\r\" + output\n            self.pendingcr = False\n        if output.endswith(\"\\r\") and not final:\n            output = output[:-1]\n            self.pendingcr = True\n        crlf = output.count('\\r\\n')\n        cr = output.count('\\r') - crlf\n        lf = output.count('\\n') - crlf\n        self.seennl |= (lf and self._LF) | (cr and self._CR) \\\n                    | (crlf and self._CRLF)\n        if self.translate:\n            if crlf:\n                output = output.replace(\"\\r\\n\", \"\\n\")\n            if cr:\n                output = output.replace(\"\\r\", \"\\n\")\n        return output\n    def getstate(self):\n        if self.decoder is None:\n            buf = \"\"\n            flag = 0\n        else:\n            buf, flag = self.decoder.getstate()\n        flag <<= 1\n        if self.pendingcr:\n            flag |= 1\n        return buf, flag\n    def setstate(self, state):\n        buf, flag = state\n        self.pendingcr = bool(flag & 1)\n        if self.decoder is not None:\n            self.decoder.setstate((buf, flag >> 1))\n    def reset(self):\n        self.seennl = 0\n        self.pendingcr = False\n        if self.decoder is not None:\n            self.decoder.reset()\n    _LF = 1\n    _CR = 2\n    _CRLF = 4\n    def newlines(self):\n        return (None,\n                \"\\n\",\n                \"\\r\",\n                (\"\\r\", \"\\n\"),\n                \"\\r\\n\",\n                (\"\\n\", \"\\r\\n\"),\n                (\"\\r\", \"\\r\\n\"),\n                (\"\\r\", \"\\n\", \"\\r\\n\")\n               )[self.seennl]\nclass TextIOWrapper(TextIOBase):\n    _CHUNK_SIZE = 2048\n    def __init__(self, buffer, encoding=None, errors=None, newline=None,\n                 line_buffering=False, write_through=False):\n        if newline is not None and not isinstance(newline, str):\n            raise TypeError(\"illegal newline type: %r\" % (type(newline),))\n        if newline not in (None, \"\", \"\\n\", \"\\r\", \"\\r\\n\"):\n            raise ValueError(\"illegal newline value: %r\" % (newline,))\n        if encoding is None:\n            try:\n                encoding = os.device_encoding(buffer.fileno())\n            except (AttributeError, UnsupportedOperation):\n                pass\n            if encoding is None:\n                try:\n                    import locale\n                except ImportError:\n                    encoding = \"ascii\"\n                else:\n                    encoding = locale.getpreferredencoding()\n        if not isinstance(encoding, str):\n            raise ValueError(\"invalid encoding: %r\" % encoding)\n        if errors is None:\n            errors = \"strict\"\n        else:\n            if not isinstance(errors, str):\n                raise ValueError(\"invalid errors: %r\" % errors)\n        self._buffer = buffer\n        self._line_buffering = line_buffering\n        self._encoding = encoding\n        self._errors = errors\n        self._readuniversal = not newline\n        self._readtranslate = newline is None\n        self._readnl = newline\n        self._writetranslate = newline != ''\n        self._writenl = newline or os.linesep\n        self._encoder = None\n        self._decoder = None\n        self._decoded_chars = ''  # buffer for text returned from decoder\n        self._decoded_chars_used = 0  # offset into _decoded_chars for read()\n        self._snapshot = None  # info for reconstructing decoder state\n        self._seekable = self._telling = self.buffer.seekable()\n        self._has_read1 = hasattr(self.buffer, 'read1')\n        if self._seekable and self.writable():\n            position = self.buffer.tell()\n            if position != 0:\n                try:\n                    self._get_encoder().setstate(0)\n                except LookupError:\n                    pass\n    def __repr__(self):\n        result = \"<_pyio.TextIOWrapper\"\n        try:\n            name = self.name\n        except AttributeError:\n            pass\n        else:\n            result += \" name={0!r}\".format(name)\n        try:\n            mode = self.mode\n        except AttributeError:\n            pass\n        else:\n            result += \" mode={0!r}\".format(mode)\n        return result + \" encoding={0!r}>\".format(self.encoding)\n    def encoding(self):\n        return self._encoding\n    def errors(self):\n        return self._errors\n    def line_buffering(self):\n        return self._line_buffering\n    def buffer(self):\n        return self._buffer\n    def seekable(self):\n        if self.closed:\n            raise ValueError(\"I/O operation on closed file.\")\n        return self._seekable\n    def readable(self):\n        return self.buffer.readable()\n    def writable(self):\n        return self.buffer.writable()\n    def flush(self):\n        self.buffer.flush()\n        self._telling = self._seekable\n    def close(self):\n        if self.buffer is not None and not self.closed:\n            self.flush()\n            self.buffer.close()\n    def closed(self):\n        return self.buffer.closed\n    def name(self):\n        return self.buffer.name\n    def fileno(self):\n        return self.buffer.fileno()\n    def isatty(self):\n        return self.buffer.isatty()\n    def write(self, s):\n        'Write data, where s is a str'\n        if self.closed:\n            raise ValueError(\"write to closed file\")\n        if not isinstance(s, str):\n            raise TypeError(\"can't write %s to text stream\" %\n                            s.__class__.__name__)\n        length = len(s)\n        haslf = (self._writetranslate or self._line_buffering) and \"\\n\" in s\n        if haslf and self._writetranslate and self._writenl != \"\\n\":\n            s = s.replace(\"\\n\", self._writenl)\n        encoder = self._encoder or self._get_encoder()\n        b = encoder.encode(s)\n        self.buffer.write(b)\n        if self._line_buffering and (haslf or \"\\r\" in s):\n            self.flush()\n        self._snapshot = None\n        if self._decoder:\n            self._decoder.reset()\n        return length\n    def _get_encoder(self):\n        make_encoder = codecs.getincrementalencoder(self._encoding)\n        self._encoder = make_encoder(self._errors)\n        return self._encoder\n    def _get_decoder(self):\n        make_decoder = codecs.getincrementaldecoder(self._encoding)\n        decoder = make_decoder(self._errors)\n        if self._readuniversal:\n            decoder = IncrementalNewlineDecoder(decoder, self._readtranslate)\n        self._decoder = decoder\n        return decoder\n    def _set_decoded_chars(self, chars):\n        \"Set the _decoded_chars buffer.\"\n        self._decoded_chars = chars\n        self._decoded_chars_used = 0\n    def _get_decoded_chars(self, n=None):\n        \"Advance into the _decoded_chars buffer.\"\n        offset = self._decoded_chars_used\n        if n is None:\n            chars = self._decoded_chars[offset:]\n        else:\n            chars = self._decoded_chars[offset:offset + n]\n        self._decoded_chars_used += len(chars)\n        return chars\n    def _rewind_decoded_chars(self, n):\n        \"Rewind the _decoded_chars buffer.\"\n        if self._decoded_chars_used < n:\n            raise AssertionError(\"rewind decoded_chars out of bounds\")\n        self._decoded_chars_used -= n\n    def _read_chunk(self):\n        \"Read and decode the next chunk of data from the BufferedReader.\"\n        if self._decoder is None:\n            raise ValueError(\"no decoder\")\n        if self._telling:\n            dec_buffer, dec_flags = self._decoder.getstate()\n        if self._has_read1:\n            input_chunk = self.buffer.read1(self._CHUNK_SIZE)\n        else:\n            input_chunk = self.buffer.read(self._CHUNK_SIZE)\n        eof = not input_chunk\n        self._set_decoded_chars(self._decoder.decode(input_chunk, eof))\n        if self._telling:\n            self._snapshot = (dec_flags, dec_buffer + input_chunk)\n        return not eof\n    def _pack_cookie(self, position, dec_flags=0,\n                           bytes_to_feed=0, need_eof=0, chars_to_skip=0):\n        return (position | (dec_flags<<64) | (bytes_to_feed<<128) |\n               (chars_to_skip<<192) | bool(need_eof)<<256)\n    def _unpack_cookie(self, bigint):\n        rest, position = divmod(bigint, 1<<64)\n        rest, dec_flags = divmod(rest, 1<<64)\n        rest, bytes_to_feed = divmod(rest, 1<<64)\n        need_eof, chars_to_skip = divmod(rest, 1<<64)\n        return position, dec_flags, bytes_to_feed, need_eof, chars_to_skip\n    \"\"\"\n    def tell(self):\n        if not self._seekable:\n            raise UnsupportedOperation(\"underlying stream is not seekable\")\n        if not self._telling:\n            raise IOError(\"telling position disabled by next() call\")\n        self.flush()\n        position = self.buffer.tell()\n        decoder = self._decoder\n        if decoder is None or self._snapshot is None:\n            if self._decoded_chars:\n                raise AssertionError(\"pending decoded text\")\n            return position\n        dec_flags, next_input = self._snapshot\n        position -= len(next_input)\n        chars_to_skip = self._decoded_chars_used\n        if chars_to_skip == 0:\n            return self._pack_cookie(position, dec_flags)\n        saved_state = decoder.getstate()\n        try:\n            decoder.setstate(('', dec_flags))\n            start_pos = position\n            start_flags, bytes_fed, chars_decoded = dec_flags, 0, 0\n            need_eof = 0\n            next_byte = bytearray(1)\n            for _i in next_input:\n                next_byte[0]=_i\n                bytes_fed += 1\n                chars_decoded += len(decoder.decode(next_byte))\n                dec_buffer, dec_flags = decoder.getstate()\n                if not dec_buffer and chars_decoded <= chars_to_skip:\n                    start_pos += bytes_fed\n                    chars_to_skip -= chars_decoded\n                    start_flags, bytes_fed, chars_decoded = dec_flags, 0, 0\n                if chars_decoded >= chars_to_skip:\n                    break\n            else:\n                chars_decoded += len(decoder.decode('', final=True))  #fixme\n                need_eof = 1\n                if chars_decoded < chars_to_skip:\n                    raise IOError(\"can't reconstruct logical file position\")\n            return self._pack_cookie(\n                start_pos, start_flags, bytes_fed, need_eof, chars_to_skip)\n        finally:\n            decoder.setstate(saved_state)\n    \"\"\"\n    def truncate(self, pos=None):\n        self.flush()\n        if pos is None:\n            pos = self.tell()\n        return self.buffer.truncate(pos)\n    def detach(self):\n        if self.buffer is None:\n            raise ValueError(\"buffer is already detached\")\n        self.flush()\n        buffer = self._buffer\n        self._buffer = None\n        return buffer\n    def seek(self, cookie, whence=0):\n        if self.closed:\n            raise ValueError(\"tell on closed file\")\n        if not self._seekable:\n            raise UnsupportedOperation(\"underlying stream is not seekable\")\n        if whence == 1: # seek relative to current position\n            if cookie != 0:\n                raise UnsupportedOperation(\"can't do nonzero cur-relative seeks\")\n            whence = 0\n            cookie = self.tell()\n        if whence == 2: # seek relative to end of file\n            if cookie != 0:\n                raise UnsupportedOperation(\"can't do nonzero end-relative seeks\")\n            self.flush()\n            position = self.buffer.seek(0, 2)\n            self._set_decoded_chars('')\n            self._snapshot = None\n            if self._decoder:\n                self._decoder.reset()\n            return position\n        if whence != 0:\n            raise ValueError(\"invalid whence (%r, should be 0, 1 or 2)\" %\n                             (whence,))\n        if cookie < 0:\n            raise ValueError(\"negative seek position %r\" % (cookie,))\n        self.flush()\n        start_pos, dec_flags, bytes_to_feed, need_eof, chars_to_skip = \\\n            self._unpack_cookie(cookie)\n        self.buffer.seek(start_pos)\n        self._set_decoded_chars('')\n        self._snapshot = None\n        if cookie == 0 and self._decoder:\n            self._decoder.reset()\n        elif self._decoder or dec_flags or chars_to_skip:\n            self._decoder = self._decoder or self._get_decoder()\n            self._decoder.setstate(('', dec_flags))\n            self._snapshot = (dec_flags, '')   \n        if chars_to_skip:\n            input_chunk = self.buffer.read(bytes_to_feed)\n            self._set_decoded_chars(\n                self._decoder.decode(input_chunk, need_eof))\n            self._snapshot = (dec_flags, input_chunk)\n            if len(self._decoded_chars) < chars_to_skip:\n                raise IOError(\"can't restore logical file position\")\n            self._decoded_chars_used = chars_to_skip\n        try:\n            encoder = self._encoder or self._get_encoder()\n        except LookupError:\n            a=1   #fixme\n        else:\n            if cookie != 0:\n                encoder.setstate(0)\n            else:\n                encoder.reset()\n        return cookie\n    def read(self, n=None):\n        self._checkReadable()\n        if n is None:\n            n = -1\n        decoder = self._decoder or self._get_decoder()\n        try:\n            n.__index__\n        except AttributeError as err:\n            raise TypeError(\"an integer is required\") #from err  #fixme\n        if n < 0:\n            result = (self._get_decoded_chars() +\n                      decoder.decode(self.buffer.read(), final=True))\n            self._set_decoded_chars('')\n            self._snapshot = None\n            return result\n        else:\n            eof = False\n            result = self._get_decoded_chars(n)\n            while len(result) < n and not eof:\n                eof = not self._read_chunk()\n                result += self._get_decoded_chars(n - len(result))\n            return result\n    def __next__(self):\n        self._telling = False\n        line = self.readline()\n        if not line:\n            self._snapshot = None\n            self._telling = self._seekable\n            raise StopIteration\n        return line\n    def readline(self, limit=None):\n        if self.closed:\n            raise ValueError(\"read from closed file\")\n        if limit is None:\n            limit = -1\n        elif not isinstance(limit, int):\n            raise TypeError(\"limit must be an integer\")\n        line = self._get_decoded_chars()\n        start = 0\n        if not self._decoder:\n            self._get_decoder()\n        pos = endpos = None\n        while True:\n            if self._readtranslate:\n                pos = line.find('\\n', start)\n                if pos >= 0:\n                    endpos = pos + 1\n                    break\n                else:\n                    start = len(line)\n            elif self._readuniversal:\n                nlpos = line.find(\"\\n\", start)\n                crpos = line.find(\"\\r\", start)\n                if crpos == -1:\n                    if nlpos == -1:\n                        start = len(line)\n                    else:\n                        endpos = nlpos + 1\n                        break\n                elif nlpos == -1:\n                    endpos = crpos + 1\n                    break\n                elif nlpos < crpos:\n                    endpos = nlpos + 1\n                    break\n                elif nlpos == crpos + 1:\n                    endpos = crpos + 2\n                    break\n                else:\n                    endpos = crpos + 1\n                    break\n            else:\n                pos = line.find(self._readnl)\n                if pos >= 0:\n                    endpos = pos + len(self._readnl)\n                    break\n            if limit >= 0 and len(line) >= limit:\n                endpos = limit  # reached length limit\n                break\n            while self._read_chunk():\n                if self._decoded_chars:\n                    break\n            if self._decoded_chars:\n                line += self._get_decoded_chars()\n            else:\n                self._set_decoded_chars('')\n                self._snapshot = None\n                return line\n        if limit >= 0 and endpos > limit:\n            endpos = limit  # don't exceed limit\n        self._rewind_decoded_chars(len(line) - endpos)\n        return line[:endpos]\n    def newlines(self):\n        return self._decoder.newlines if self._decoder else None\nclass StringIO(TextIOWrapper):\n    def __init__(self, initial_value=\"\", newline=\"\\n\"):\n        TextIOWrapper.__init__(self, BytesIO(),\n                                       encoding=\"utf-8\",\n                                       errors=\"strict\",\n                                       newline=newline)\n        if newline is None:\n            self._writetranslate = False\n        if initial_value is not None:\n            if not isinstance(initial_value, str):\n                raise TypeError(\"initial_value must be str or None, not {0}\"\n                                .format(type(initial_value).__name__))\n                initial_value = str(initial_value)\n            self.write(initial_value)\n            self.seek(0)\n    def getvalue(self):\n        self.flush()\n        return self.buffer.getvalue().decode(self._encoding, self._errors)\n    def __repr__(self):\n        return object.__repr__(self)\n    def errors(self):\n        return None\n    def encoding(self):\n        return None\n    def detach(self):\n        self._unsupported(\"detach\")\n", "/Lib/calendar.py": "\"\"\"Calendar printing functions\nNote when comparing these calendars to the ones printed by cal(1): By\ndefault, these calendars have Monday as the first day of the week, and\nSunday as the last (the European convention). Use setfirstweekday() to\nset the first day of the week (0=Monday, 6=Sunday).\"\"\"\nimport sys\nimport datetime\nimport locale as _locale\n__all__ = [\"IllegalMonthError\", \"IllegalWeekdayError\", \"setfirstweekday\",\n           \"firstweekday\", \"isleap\", \"leapdays\", \"weekday\", \"monthrange\",\n           \"monthcalendar\", \"prmonth\", \"month\", \"prcal\", \"calendar\",\n           \"timegm\", \"month_name\", \"month_abbr\", \"day_name\", \"day_abbr\"]\nerror = ValueError\nclass IllegalMonthError(ValueError):\n    def __init__(self, month):\n        self.month = month\n    def __str__(self):\n        return \"bad month number %r; must be 1-12\" % self.month\nclass IllegalWeekdayError(ValueError):\n    def __init__(self, weekday):\n        self.weekday = weekday\n    def __str__(self):\n        return \"bad weekday number %r; must be 0 (Monday) to 6 (Sunday)\" % self.weekday\nJanuary = 1\nFebruary = 2\nmdays = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nclass _localized_month:\n    _months = [datetime.date(2001, i+1, 1).strftime for i in range(12)]\n    _months.insert(0, lambda x: \"\")\n    def __init__(self, format):\n        self.format = format\n    def __getitem__(self, i):\n        funcs = self._months[i]\n        if isinstance(i, slice):\n            return [f(self.format) for f in funcs]\n        else:\n            return funcs(self.format)\n    def __len__(self):\n        return 13\nclass _localized_day:\n    _days = [datetime.date(2001, 1, i+1).strftime for i in range(7)]\n    def __init__(self, format):\n        self.format = format\n    def __getitem__(self, i):\n        funcs = self._days[i]\n        if isinstance(i, slice):\n            return [f(self.format) for f in funcs]\n        else:\n            return funcs(self.format)\n    def __len__(self):\n        return 7\nday_name = _localized_day('%A')\nday_abbr = _localized_day('%a')\nmonth_name = _localized_month('%B')\nmonth_abbr = _localized_month('%b')\n(MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY) = range(7)\ndef isleap(year):\n    \"\"\"Return True for leap years, False for non-leap years.\"\"\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\ndef leapdays(y1, y2):\n    \"\"\"Return number of leap years in range [y1, y2).\n       Assume y1 <= y2.\"\"\"\n    y1 -= 1\n    y2 -= 1\n    return (y2//4 - y1//4) - (y2//100 - y1//100) + (y2//400 - y1//400)\ndef weekday(year, month, day):\n    \"\"\"Return weekday (0-6 ~ Mon-Sun) for year (1970-...), month (1-12),\n       day (1-31).\"\"\"\n    return datetime.date(year, month, day).weekday()\ndef monthrange(year, month):\n    \"\"\"Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for\n       year, month.\"\"\"\n    if not 1 <= month <= 12:\n        raise IllegalMonthError(month)\n    day1 = weekday(year, month, 1)\n    ndays = mdays[month] + (month == February and isleap(year))\n    return day1, ndays\nclass Calendar(object):\n    \"\"\"\n    Base calendar class. This class doesn't do any formatting. It simply\n    provides data to subclasses.\n    \"\"\"\n    def __init__(self, firstweekday=0):\n        self.firstweekday = firstweekday # 0 = Monday, 6 = Sunday\n    def getfirstweekday(self):\n        return self._firstweekday % 7\n    def setfirstweekday(self, firstweekday):\n        self._firstweekday = firstweekday\n    firstweekday = property(getfirstweekday, setfirstweekday)\n    def iterweekdays(self):\n        \"\"\"\n        Return a iterator for one week of weekday numbers starting with the\n        configured first one.\n        \"\"\"\n        for i in range(self.firstweekday, self.firstweekday + 7):\n            yield i%7\n    def itermonthdates(self, year, month):\n        \"\"\"\n        Return an iterator for one month. The iterator will yield datetime.date\n        values and will always iterate through complete weeks, so it will yield\n        dates outside the specified month.\n        \"\"\"\n        date = datetime.date(year, month, 1)\n        days = (date.weekday() - self.firstweekday) % 7\n        date -= datetime.timedelta(days=days)\n        oneday = datetime.timedelta(days=1)\n        while True:\n            yield date\n            date += oneday\n            if date.month != month and date.weekday() == self.firstweekday:\n                break\n    def itermonthdays2(self, year, month):\n        \"\"\"\n        Like itermonthdates(), but will yield (day number, weekday number)\n        tuples. For days outside the specified month the day number is 0.\n        \"\"\"\n        for date in self.itermonthdates(year, month):\n            if date.month != month:\n                yield (0, date.weekday())\n            else:\n                yield (date.day, date.weekday())\n    def itermonthdays(self, year, month):\n        \"\"\"\n        Like itermonthdates(), but will yield day numbers. For days outside\n        the specified month the day number is 0.\n        \"\"\"\n        for date in self.itermonthdates(year, month):\n            if date.month != month:\n                yield 0\n            else:\n                yield date.day\n    def monthdatescalendar(self, year, month):\n        \"\"\"\n        Return a matrix (list of lists) representing a month's calendar.\n        Each row represents a week; week entries are datetime.date values.\n        \"\"\"\n        dates = list(self.itermonthdates(year, month))\n        return [ dates[i:i+7] for i in range(0, len(dates), 7) ]\n    def monthdays2calendar(self, year, month):\n        \"\"\"\n        Return a matrix representing a month's calendar.\n        Each row represents a week; week entries are\n        (day number, weekday number) tuples. Day numbers outside this month\n        are zero.\n        \"\"\"\n        days = list(self.itermonthdays2(year, month))\n        return [ days[i:i+7] for i in range(0, len(days), 7) ]\n    def monthdayscalendar(self, year, month):\n        \"\"\"\n        Return a matrix representing a month's calendar.\n        Each row represents a week; days outside this month are zero.\n        \"\"\"\n        days = list(self.itermonthdays(year, month))\n        return [ days[i:i+7] for i in range(0, len(days), 7) ]\n    def yeardatescalendar(self, year, width=3):\n        \"\"\"\n        Return the data for the specified year ready for formatting. The return\n        value is a list of month rows. Each month row contains upto width months.\n        Each month contains between 4 and 6 weeks and each week contains 1-7\n        days. Days are datetime.date objects.\n        \"\"\"\n        months = [\n            self.monthdatescalendar(year, i)\n            for i in range(January, January+12)\n        ]\n        return [months[i:i+width] for i in range(0, len(months), width) ]\n    def yeardays2calendar(self, year, width=3):\n        \"\"\"\n        Return the data for the specified year ready for formatting (similar to\n        yeardatescalendar()). Entries in the week lists are\n        (day number, weekday number) tuples. Day numbers outside this month are\n        zero.\n        \"\"\"\n        months = [\n            self.monthdays2calendar(year, i)\n            for i in range(January, January+12)\n        ]\n        return [months[i:i+width] for i in range(0, len(months), width) ]\n    def yeardayscalendar(self, year, width=3):\n        \"\"\"\n        Return the data for the specified year ready for formatting (similar to\n        yeardatescalendar()). Entries in the week lists are day numbers.\n        Day numbers outside this month are zero.\n        \"\"\"\n        months = [\n            self.monthdayscalendar(year, i)\n            for i in range(January, January+12)\n        ]\n        return [months[i:i+width] for i in range(0, len(months), width) ]\nclass TextCalendar(Calendar):\n    \"\"\"\n    Subclass of Calendar that outputs a calendar as a simple plain text\n    similar to the UNIX program cal.\n    \"\"\"\n    def prweek(self, theweek, width):\n        \"\"\"\n        Print a single week (no newline).\n        \"\"\"\n        print(self.formatweek(theweek, width), end=' ')\n    def formatday(self, day, weekday, width):\n        \"\"\"\n        Returns a formatted day.\n        \"\"\"\n        if day == 0:\n            s = ''\n        else:\n            s = '%2i' % day             # right-align single-digit days\n        return s.center(width)\n    def formatweek(self, theweek, width):\n        \"\"\"\n        Returns a single week in a string (no newline).\n        \"\"\"\n        return ' '.join(self.formatday(d, wd, width) for (d, wd) in theweek)\n    def formatweekday(self, day, width):\n        \"\"\"\n        Returns a formatted week day name.\n        \"\"\"\n        if width >= 9:\n            names = day_name\n        else:\n            names = day_abbr\n        return names[day][:width].center(width)\n    def formatweekheader(self, width):\n        \"\"\"\n        Return a header for a week.\n        \"\"\"\n        return ' '.join(self.formatweekday(i, width) for i in self.iterweekdays())\n    def formatmonthname(self, theyear, themonth, width, withyear=True):\n        \"\"\"\n        Return a formatted month name.\n        \"\"\"\n        s = month_name[themonth]\n        if withyear:\n            s = \"%s %r\" % (s, theyear)\n        return s.center(width)\n    def prmonth(self, theyear, themonth, w=0, l=0):\n        \"\"\"\n        Print a month's calendar.\n        \"\"\"\n        print(self.formatmonth(theyear, themonth, w, l), end=' ')\n    def formatmonth(self, theyear, themonth, w=0, l=0):\n        \"\"\"\n        Return a month's calendar string (multi-line).\n        \"\"\"\n        w = max(2, w)\n        l = max(1, l)\n        s = self.formatmonthname(theyear, themonth, 7 * (w + 1) - 1)\n        s = s.rstrip()\n        s += '\\n' * l\n        s += self.formatweekheader(w).rstrip()\n        s += '\\n' * l\n        for week in self.monthdays2calendar(theyear, themonth):\n            s += self.formatweek(week, w).rstrip()\n            s += '\\n' * l\n        return s\n    def formatyear(self, theyear, w=2, l=1, c=6, m=3):\n        \"\"\"\n        Returns a year's calendar as a multi-line string.\n        \"\"\"\n        w = max(2, w)\n        l = max(1, l)\n        c = max(2, c)\n        colwidth = (w + 1) * 7 - 1\n        v = []\n        a = v.append\n        a(repr(theyear).center(colwidth*m+c*(m-1)).rstrip())\n        a('\\n'*l)\n        header = self.formatweekheader(w)\n        for (i, row) in enumerate(self.yeardays2calendar(theyear, m)):\n            months = range(m*i+1, min(m*(i+1)+1, 13))\n            a('\\n'*l)\n            names = (self.formatmonthname(theyear, k, colwidth, False)\n                     for k in months)\n            a(formatstring(names, colwidth, c).rstrip())\n            a('\\n'*l)\n            headers = (header for k in months)\n            a(formatstring(headers, colwidth, c).rstrip())\n            a('\\n'*l)\n            height = max(len(cal) for cal in row)\n            for j in range(height):\n                weeks = []\n                for cal in row:\n                    if j >= len(cal):\n                        weeks.append('')\n                    else:\n                        weeks.append(self.formatweek(cal[j], w))\n                a(formatstring(weeks, colwidth, c).rstrip())\n                a('\\n' * l)\n        return ''.join(v)\n    def pryear(self, theyear, w=0, l=0, c=6, m=3):\n        \"\"\"Print a year's calendar.\"\"\"\n        print(self.formatyear(theyear, w, l, c, m))\nclass HTMLCalendar(Calendar):\n    \"\"\"\n    This calendar returns complete HTML pages.\n    \"\"\"\n    cssclasses = [\"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\", \"sun\"]\n    def formatday(self, day, weekday):\n        \"\"\"\n        Return a day as a table cell.\n        \"\"\"\n        if day == 0:\n            return '<td class=\"noday\">&nbsp;</td>' # day outside month\n        else:\n            return '<td class=\"%s\">%d</td>' % (self.cssclasses[weekday], day)\n    def formatweek(self, theweek):\n        \"\"\"\n        Return a complete week as a table row.\n        \"\"\"\n        s = ''.join(self.formatday(d, wd) for (d, wd) in theweek)\n        return '<tr>%s</tr>' % s\n    def formatweekday(self, day):\n        \"\"\"\n        Return a weekday name as a table header.\n        \"\"\"\n        return '<th class=\"%s\">%s</th>' % (self.cssclasses[day], day_abbr[day])\n    def formatweekheader(self):\n        \"\"\"\n        Return a header for a week as a table row.\n        \"\"\"\n        s = ''.join(self.formatweekday(i) for i in self.iterweekdays())\n        return '<tr>%s</tr>' % s\n    def formatmonthname(self, theyear, themonth, withyear=True):\n        \"\"\"\n        Return a month name as a table row.\n        \"\"\"\n        if withyear:\n            s = '%s %s' % (month_name[themonth], theyear)\n        else:\n            s = '%s' % month_name[themonth]\n        return '<tr><th colspan=\"7\" class=\"month\">%s</th></tr>' % s\n    def formatmonth(self, theyear, themonth, withyear=True):\n        \"\"\"\n        Return a formatted month as a table.\n        \"\"\"\n        v = []\n        a = v.append\n        a('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"month\">')\n        a('\\n')\n        a(self.formatmonthname(theyear, themonth, withyear=withyear))\n        a('\\n')\n        a(self.formatweekheader())\n        a('\\n')\n        for week in self.monthdays2calendar(theyear, themonth):\n            a(self.formatweek(week))\n            a('\\n')\n        a('</table>')\n        a('\\n')\n        return ''.join(v)\n    def formatyear(self, theyear, width=3):\n        \"\"\"\n        Return a formatted year as a table of tables.\n        \"\"\"\n        v = []\n        a = v.append\n        width = max(width, 1)\n        a('<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"year\">')\n        a('\\n')\n        a('<tr><th colspan=\"%d\" class=\"year\">%s</th></tr>' % (width, theyear))\n        for i in range(January, January+12, width):\n            months = range(i, min(i+width, 13))\n            a('<tr>')\n            for m in months:\n                a('<td>')\n                a(self.formatmonth(theyear, m, withyear=False))\n                a('</td>')\n            a('</tr>')\n        a('</table>')\n        return ''.join(v)\n    def formatyearpage(self, theyear, width=3, css='calendar.css', encoding=None):\n        \"\"\"\n        Return a formatted year as a complete HTML page.\n        \"\"\"\n        if encoding is None:\n            encoding = sys.getdefaultencoding()\n        v = []\n        a = v.append\n        a('<?xml version=\"1.0\" encoding=\"%s\"?>\\n' % encoding)\n        a('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\\n')\n        a('<html>\\n')\n        a('<head>\\n')\n        a('<meta http-equiv=\"Content-Type\" content=\"text/html; charset=%s\" />\\n' % encoding)\n        if css is not None:\n            a('<link rel=\"stylesheet\" type=\"text/css\" href=\"%s\" />\\n' % css)\n        a('<title>Calendar for %d</title>\\n' % theyear)\n        a('</head>\\n')\n        a('<body>\\n')\n        a(self.formatyear(theyear, width))\n        a('</body>\\n')\n        a('</html>\\n')\n        return ''.join(v).encode(encoding, \"xmlcharrefreplace\")\nclass different_locale:\n    def __init__(self, locale):\n        self.locale = locale\n    def __enter__(self):\n        self.oldlocale = _locale.getlocale(_locale.LC_TIME)\n        _locale.setlocale(_locale.LC_TIME, self.locale)\n    def __exit__(self, *args):\n        _locale.setlocale(_locale.LC_TIME, self.oldlocale)\nclass LocaleTextCalendar(TextCalendar):\n    \"\"\"\n    This class can be passed a locale name in the constructor and will return\n    month and weekday names in the specified locale. If this locale includes\n    an encoding all strings containing month and weekday names will be returned\n    as unicode.\n    \"\"\"\n    def __init__(self, firstweekday=0, locale=None):\n        TextCalendar.__init__(self, firstweekday)\n        if locale is None:\n            locale = _locale.getdefaultlocale()\n        self.locale = locale\n    def formatweekday(self, day, width):\n        with different_locale(self.locale):\n            if width >= 9:\n                names = day_name\n            else:\n                names = day_abbr\n            name = names[day]\n            return name[:width].center(width)\n    def formatmonthname(self, theyear, themonth, width, withyear=True):\n        with different_locale(self.locale):\n            s = month_name[themonth]\n            if withyear:\n                s = \"%s %r\" % (s, theyear)\n            return s.center(width)\nclass LocaleHTMLCalendar(HTMLCalendar):\n    \"\"\"\n    This class can be passed a locale name in the constructor and will return\n    month and weekday names in the specified locale. If this locale includes\n    an encoding all strings containing month and weekday names will be returned\n    as unicode.\n    \"\"\"\n    def __init__(self, firstweekday=0, locale=None):\n        HTMLCalendar.__init__(self, firstweekday)\n        if locale is None:\n            locale = _locale.getdefaultlocale()\n        self.locale = locale\n    def formatweekday(self, day):\n        with different_locale(self.locale):\n            s = day_abbr[day]\n            return '<th class=\"%s\">%s</th>' % (self.cssclasses[day], s)\n    def formatmonthname(self, theyear, themonth, withyear=True):\n        with different_locale(self.locale):\n            s = month_name[themonth]\n            if withyear:\n                s = '%s %s' % (s, theyear)\n            return '<tr><th colspan=\"7\" class=\"month\">%s</th></tr>' % s\nc = TextCalendar()\nfirstweekday = c.getfirstweekday\ndef setfirstweekday(firstweekday):\n    if not MONDAY <= firstweekday <= SUNDAY:\n        raise IllegalWeekdayError(firstweekday)\n    c.firstweekday = firstweekday\nmonthcalendar = c.monthdayscalendar\nprweek = c.prweek\nweek = c.formatweek\nweekheader = c.formatweekheader\nprmonth = c.prmonth\nmonth = c.formatmonth\ncalendar = c.formatyear\nprcal = c.pryear\n_colwidth = 7*3 - 1         # Amount printed by prweek()\n_spacing = 6                # Number of spaces between columns\ndef format(cols, colwidth=_colwidth, spacing=_spacing):\n    \"\"\"Prints multi-column formatting for year calendars\"\"\"\n    print(formatstring(cols, colwidth, spacing))\ndef formatstring(cols, colwidth=_colwidth, spacing=_spacing):\n    \"\"\"Returns a string formatted from n strings, centered within n columns.\"\"\"\n    spacing *= ' '\n    return spacing.join(c.center(colwidth) for c in cols)\nEPOCH = 1970\n_EPOCH_ORD = datetime.date(EPOCH, 1, 1).toordinal()\ndef timegm(tuple):\n    \"\"\"Unrelated but handy function to calculate Unix timestamp from GMT.\"\"\"\n    year, month, day, hour, minute, second = tuple[:6]\n    days = datetime.date(year, month, 1).toordinal() - _EPOCH_ORD + day - 1\n    hours = days*24 + hour\n    minutes = hours*60 + minute\n    seconds = minutes*60 + second\n    return seconds\ndef main(args):\n    import optparse\n    parser = optparse.OptionParser(usage=\"usage: %prog [options] [year [month]]\")\n    parser.add_option(\n        \"-w\", \"--width\",\n        dest=\"width\", type=\"int\", default=2,\n        help=\"width of date column (default 2, text only)\"\n    )\n    parser.add_option(\n        \"-l\", \"--lines\",\n        dest=\"lines\", type=\"int\", default=1,\n        help=\"number of lines for each week (default 1, text only)\"\n    )\n    parser.add_option(\n        \"-s\", \"--spacing\",\n        dest=\"spacing\", type=\"int\", default=6,\n        help=\"spacing between months (default 6, text only)\"\n    )\n    parser.add_option(\n        \"-m\", \"--months\",\n        dest=\"months\", type=\"int\", default=3,\n        help=\"months per row (default 3, text only)\"\n    )\n    parser.add_option(\n        \"-c\", \"--css\",\n        dest=\"css\", default=\"calendar.css\",\n        help=\"CSS to use for page (html only)\"\n    )\n    parser.add_option(\n        \"-L\", \"--locale\",\n        dest=\"locale\", default=None,\n        help=\"locale to be used from month and weekday names\"\n    )\n    parser.add_option(\n        \"-e\", \"--encoding\",\n        dest=\"encoding\", default=None,\n        help=\"Encoding to use for output.\"\n    )\n    parser.add_option(\n        \"-t\", \"--type\",\n        dest=\"type\", default=\"text\",\n        choices=(\"text\", \"html\"),\n        help=\"output type (text or html)\"\n    )\n    (options, args) = parser.parse_args(args)\n    if options.locale and not options.encoding:\n        parser.error(\"if --locale is specified --encoding is required\")\n        sys.exit(1)\n    locale = options.locale, options.encoding\n    if options.type == \"html\":\n        if options.locale:\n            cal = LocaleHTMLCalendar(locale=locale)\n        else:\n            cal = HTMLCalendar()\n        encoding = options.encoding\n        if encoding is None:\n            encoding = sys.getdefaultencoding()\n        optdict = dict(encoding=encoding, css=options.css)\n        write = sys.stdout.buffer.write\n        if len(args) == 1:\n            write(cal.formatyearpage(datetime.date.today().year, **optdict))\n        elif len(args) == 2:\n            write(cal.formatyearpage(int(args[1]), **optdict))\n        else:\n            parser.error(\"incorrect number of arguments\")\n            sys.exit(1)\n    else:\n        if options.locale:\n            cal = LocaleTextCalendar(locale=locale)\n        else:\n            cal = TextCalendar()\n        optdict = dict(w=options.width, l=options.lines)\n        if len(args) != 3:\n            optdict[\"c\"] = options.spacing\n            optdict[\"m\"] = options.months\n        if len(args) == 1:\n            result = cal.formatyear(datetime.date.today().year, **optdict)\n        elif len(args) == 2:\n            result = cal.formatyear(int(args[1]), **optdict)\n        elif len(args) == 3:\n            result = cal.formatmonth(int(args[1]), int(args[2]), **optdict)\n        else:\n            parser.error(\"incorrect number of arguments\")\n            sys.exit(1)\n        write = sys.stdout.write\n        if options.encoding:\n            result = result.encode(options.encoding)\n            write = sys.stdout.buffer.write\n        write(result)\nif __name__ == \"__main__\":\n    main(sys.argv)\n", "/libs/_svg.js": "$module=(function($B){var __builtins__=$B.builtins;var $TagSumDict=$B.$TagSum.$dict;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");$svgNS=\"http://www.w3.org/2000/svg\";$xlinkNS=\"http://www.w3.org/1999/xlink\";function $SVGTag(tag_name,args){var $i=null;var $obj=this;var obj=$B.$DOMNode(document.createElementNS($svgNS,tag_name));if(args!=undefined&&args.length>0){$start=0;$first=args[0];if($first.__class__!==$B.$KwDict){$start=1;if(isinstance($first,[str,int,float])){txt=document.createTextNode(str($first));obj.elt.appendChild(txt);}else if($first.__class__===$TagSumDict)for($i=0;$i<$first.children.length;$i++)obj.elt.appendChild($first.children[$i]);else try{obj.elt.appendChild($first.elt);}catch(err){$raise('ValueError','wrong element '+$first);}}for($i=$start;$i<args.length;$i++){$arg=args[$i];if($arg&&$arg.__class__===$B.$KwDict)if($arg.name.toLowerCase().substr(0,2)==\"on\")eval('$B.DOMNode.bind(obj,\"'+$arg.name.toLowerCase().substr(2)+'\",function(){'+$arg.value+'})');else if($arg.name.toLowerCase()==\"style\")$B.DOMNode.set_style(obj,$arg.value);else if($arg.name.toLowerCase().indexOf(\"href\")!==-1)obj.elt.setAttributeNS(\"http://www.w3.org/1999/xlink\",\"href\",$arg.value);else if($arg.value!==false)obj.elt.setAttributeNS(null,$arg.name.replace('_','-'),$arg.value);}}return obj;}var $svg_tags=['a','altGlyph','altGlyphDef','altGlyphItem','animate','animateColor','animateMotion','animateTransform','circle','clipPath','color_profile','cursor','defs','desc','ellipse','feBlend','g','image','line','linearGradient','marker','mask','path','pattern','polygon','polyline','radialGradient','rect','stop','svg','text','tref','tspan','use'];$svg=function(){return $SVGTag('X',arguments);};$svg+='';var obj=new Object();for(var i=0;i<$svg_tags.length;i++){var tag=$svg_tags[i];eval('obj.'+tag+'='+$svg.replace('X',tag));}obj.__getattr__=function(attr){return this[attr];};return obj;})(__BRYTHON__);", "/Lib/decimal.py": "\"\"\"\nThis is an implementation of decimal floating point arithmetic based on\nthe General Decimal Arithmetic Specification:\n    http://speleotrove.com/decimal/decarith.html\nand IEEE standard 854-1987:\n    www.cs.berkeley.edu/~ejr/projects/754/private/drafts/854-1987/dir.html\nDecimal floating point has finite precision with arbitrarily large bounds.\nThe purpose of this module is to support arithmetic using familiar\n\"schoolhouse\" rules and to avoid some of the tricky representation\nissues associated with binary floating point.  The package is especially\nuseful for financial applications or for contexts where users have\nexpectations that are at odds with binary floating point (for instance,\nin binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead\nof 0.0; Decimal('1.00') % Decimal('0.1') returns the expected\nDecimal('0.00')).\nHere are some examples of using the decimal module:\n>>> from decimal import *\n>>> setcontext(ExtendedContext)\n>>> Decimal(0)\nDecimal('0')\n>>> Decimal('1')\nDecimal('1')\n>>> Decimal('-.0123')\nDecimal('-0.0123')\n>>> Decimal(123456)\nDecimal('123456')\n>>> Decimal('123.45e12345678')\nDecimal('1.2345E+12345680')\n>>> Decimal('1.33') + Decimal('1.27')\nDecimal('2.60')\n>>> Decimal('12.34') + Decimal('3.87') - Decimal('18.41')\nDecimal('-2.20')\n>>> dig = Decimal(1)\n>>> print(dig / Decimal(3))\n0.333333333\n>>> getcontext().prec = 18\n>>> print(dig / Decimal(3))\n0.333333333333333333\n>>> print(dig.sqrt())\n1\n>>> print(Decimal(3).sqrt())\n1.73205080756887729\n>>> print(Decimal(3) ** 123)\n4.85192780976896427E+58\n>>> inf = Decimal(1) / Decimal(0)\n>>> print(inf)\nInfinity\n>>> neginf = Decimal(-1) / Decimal(0)\n>>> print(neginf)\n-Infinity\n>>> print(neginf + inf)\nNaN\n>>> print(neginf * inf)\n-Infinity\n>>> print(dig / 0)\nInfinity\n>>> getcontext().traps[DivisionByZero] = 1\n>>> print(dig / 0)\nTraceback (most recent call last):\n  ...\n  ...\n  ...\ndecimal.DivisionByZero: x / 0\n>>> c = Context()\n>>> c.traps[InvalidOperation] = 0\n>>> print(c.flags[InvalidOperation])\n0\n>>> c.divide(Decimal(0), Decimal(0))\nDecimal('NaN')\n>>> c.traps[InvalidOperation] = 1\n>>> print(c.flags[InvalidOperation])\n1\n>>> c.flags[InvalidOperation] = 0\n>>> print(c.flags[InvalidOperation])\n0\n>>> print(c.divide(Decimal(0), Decimal(0)))\nTraceback (most recent call last):\n  ...\n  ...\n  ...\ndecimal.InvalidOperation: 0 / 0\n>>> print(c.flags[InvalidOperation])\n1\n>>> c.flags[InvalidOperation] = 0\n>>> c.traps[InvalidOperation] = 0\n>>> print(c.divide(Decimal(0), Decimal(0)))\nNaN\n>>> print(c.flags[InvalidOperation])\n1\n>>>\n\"\"\"\n__all__ = [\n    'Decimal', 'Context',\n    'DefaultContext', 'BasicContext', 'ExtendedContext',\n    'DecimalException', 'Clamped', 'InvalidOperation', 'DivisionByZero',\n    'Inexact', 'Rounded', 'Subnormal', 'Overflow', 'Underflow',\n    'FloatOperation',\n    'ROUND_DOWN', 'ROUND_HALF_UP', 'ROUND_HALF_EVEN', 'ROUND_CEILING',\n    'ROUND_FLOOR', 'ROUND_UP', 'ROUND_HALF_DOWN', 'ROUND_05UP',\n    'setcontext', 'getcontext', 'localcontext',\n    'MAX_PREC',  'MAX_EMAX', 'MIN_EMIN', 'MIN_ETINY',\n    'HAVE_THREADS'\n]\n__version__ = '1.70'    # Highest version of the spec this complies with\nimport copy as _copy\nimport math as _math\nimport numbers as _numbers\nimport sys\ntry:\n    from collections import namedtuple as _namedtuple\n    DecimalTuple = _namedtuple('DecimalTuple', 'sign digits exponent')\nexcept ImportError:\n    DecimalTuple = lambda *args: args\nROUND_DOWN = 'ROUND_DOWN'\nROUND_HALF_UP = 'ROUND_HALF_UP'\nROUND_HALF_EVEN = 'ROUND_HALF_EVEN'\nROUND_CEILING = 'ROUND_CEILING'\nROUND_FLOOR = 'ROUND_FLOOR'\nROUND_UP = 'ROUND_UP'\nROUND_HALF_DOWN = 'ROUND_HALF_DOWN'\nROUND_05UP = 'ROUND_05UP'\nHAVE_THREADS = True\nif sys.maxsize == 2**63-1:\n    MAX_PREC = 999999999999999999\n    MAX_EMAX = 999999999999999999\n    MIN_EMIN = -999999999999999999\nelse:\n    MAX_PREC = 425000000\n    MAX_EMAX = 425000000\n    MIN_EMIN = -425000000\nMIN_ETINY = MIN_EMIN - (MAX_PREC-1)\nclass DecimalException(ArithmeticError):\n    \"\"\"Base exception class.\n    Used exceptions derive from this.\n    If an exception derives from another exception besides this (such as\n    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only\n    called if the others are present.  This isn't actually used for\n    anything, though.\n    handle  -- Called when context._raise_error is called and the\n               trap_enabler is not set.  First argument is self, second is the\n               context.  More arguments can be given, those being after\n               the explanation in _raise_error (For example,\n               context._raise_error(NewError, '(-x)!', self._sign) would\n               call NewError().handle(context, self._sign).)\n    To define a new exception, it should be sufficient to have it derive\n    from DecimalException.\n    \"\"\"\n    def handle(self, context, *args):\n        pass\nclass Clamped(DecimalException):\n    \"\"\"Exponent of a 0 changed to fit bounds.\n    This occurs and signals clamped if the exponent of a result has been\n    altered in order to fit the constraints of a specific concrete\n    representation.  This may occur when the exponent of a zero result would\n    be outside the bounds of a representation, or when a large normal\n    number would have an encoded exponent that cannot be represented.  In\n    this latter case, the exponent is reduced to fit and the corresponding\n    number of zero digits are appended to the coefficient (\"fold-down\").\n    \"\"\"\nclass InvalidOperation(DecimalException):\n    \"\"\"An invalid operation was performed.\n    Various bad things cause this:\n    Something creates a signaling NaN\n    -INF + INF\n    0 * (+-)INF\n    (+-)INF / (+-)INF\n    x % 0\n    (+-)INF % x\n    x._rescale( non-integer )\n    sqrt(-x) , x > 0\n    0 ** 0\n    x ** (non-integer)\n    x ** (+-)INF\n    An operand is invalid\n    The result of the operation after these is a quiet positive NaN,\n    except when the cause is a signaling NaN, in which case the result is\n    also a quiet NaN, but with the original sign, and an optional\n    diagnostic information.\n    \"\"\"\n    def handle(self, context, *args):\n        if args:\n            ans = _dec_from_triple(args[0]._sign, args[0]._int, 'n', True)\n            return ans._fix_nan(context)\n        return _NaN\nclass ConversionSyntax(InvalidOperation):\n    \"\"\"Trying to convert badly formed string.\n    This occurs and signals invalid-operation if an string is being\n    converted to a number and it does not conform to the numeric string\n    syntax.  The result is [0,qNaN].\n    \"\"\"\n    def handle(self, context, *args):\n        return _NaN\nclass DivisionByZero(DecimalException, ZeroDivisionError):\n    \"\"\"Division by 0.\n    This occurs and signals division-by-zero if division of a finite number\n    by zero was attempted (during a divide-integer or divide operation, or a\n    power operation with negative right-hand operand), and the dividend was\n    not zero.\n    The result of the operation is [sign,inf], where sign is the exclusive\n    or of the signs of the operands for divide, or is 1 for an odd power of\n    -0, for power.\n    \"\"\"\n    def handle(self, context, sign, *args):\n        return _SignedInfinity[sign]\nclass DivisionImpossible(InvalidOperation):\n    \"\"\"Cannot perform the division adequately.\n    This occurs and signals invalid-operation if the integer result of a\n    divide-integer or remainder operation had too many digits (would be\n    longer than precision).  The result is [0,qNaN].\n    \"\"\"\n    def handle(self, context, *args):\n        return _NaN\nclass DivisionUndefined(InvalidOperation, ZeroDivisionError):\n    \"\"\"Undefined result of division.\n    This occurs and signals invalid-operation if division by zero was\n    attempted (during a divide-integer, divide, or remainder operation), and\n    the dividend is also zero.  The result is [0,qNaN].\n    \"\"\"\n    def handle(self, context, *args):\n        return _NaN\nclass Inexact(DecimalException):\n    \"\"\"Had to round, losing information.\n    This occurs and signals inexact whenever the result of an operation is\n    not exact (that is, it needed to be rounded and any discarded digits\n    were non-zero), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n    The inexact signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) was inexact.\n    \"\"\"\nclass InvalidContext(InvalidOperation):\n    \"\"\"Invalid context.  Unknown rounding, for example.\n    This occurs and signals invalid-operation if an invalid context was\n    detected during an operation.  This can occur if contexts are not checked\n    on creation and either the precision exceeds the capability of the\n    underlying concrete representation or an unknown or unsupported rounding\n    was specified.  These aspects of the context need only be checked when\n    the values are required to be used.  The result is [0,qNaN].\n    \"\"\"\n    def handle(self, context, *args):\n        return _NaN\nclass Rounded(DecimalException):\n    \"\"\"Number got rounded (not  necessarily changed during rounding).\n    This occurs and signals rounded whenever the result of an operation is\n    rounded (that is, some zero or non-zero digits were discarded from the\n    coefficient), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n    The rounded signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) caused a loss of precision.\n    \"\"\"\nclass Subnormal(DecimalException):\n    \"\"\"Exponent < Emin before rounding.\n    This occurs and signals subnormal whenever the result of a conversion or\n    operation is subnormal (that is, its adjusted exponent is less than\n    Emin, before any rounding).  The result in all cases is unchanged.\n    The subnormal signal may be tested (or trapped) to determine if a given\n    or operation (or sequence of operations) yielded a subnormal result.\n    \"\"\"\nclass Overflow(Inexact, Rounded):\n    \"\"\"Numerical overflow.\n    This occurs and signals overflow if the adjusted exponent of a result\n    (from a conversion or from an operation that is not an attempt to divide\n    by zero), after rounding, would be greater than the largest value that\n    can be handled by the implementation (the value Emax).\n    The result depends on the rounding mode:\n    For round-half-up and round-half-even (and for round-half-down and\n    round-up, if implemented), the result of the operation is [sign,inf],\n    where sign is the sign of the intermediate result.  For round-down, the\n    result is the largest finite number that can be represented in the\n    current precision, with the sign of the intermediate result.  For\n    round-ceiling, the result is the same as for round-down if the sign of\n    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,\n    the result is the same as for round-down if the sign of the intermediate\n    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded\n    will also be raised.\n    \"\"\"\n    def handle(self, context, sign, *args):\n        if context.rounding in (ROUND_HALF_UP, ROUND_HALF_EVEN,\n                                ROUND_HALF_DOWN, ROUND_UP):\n            return _SignedInfinity[sign]\n        if sign == 0:\n            if context.rounding == ROUND_CEILING:\n                return _SignedInfinity[sign]\n            return _dec_from_triple(sign, '9'*context.prec,\n                            context.Emax-context.prec+1)\n        if sign == 1:\n            if context.rounding == ROUND_FLOOR:\n                return _SignedInfinity[sign]\n            return _dec_from_triple(sign, '9'*context.prec,\n                             context.Emax-context.prec+1)\nclass Underflow(Inexact, Rounded, Subnormal):\n    \"\"\"Numerical underflow with result rounded to 0.\n    This occurs and signals underflow if a result is inexact and the\n    adjusted exponent of the result would be smaller (more negative) than\n    the smallest value that can be handled by the implementation (the value\n    Emin).  That is, the result is both inexact and subnormal.\n    The result after an underflow will be a subnormal number rounded, if\n    necessary, so that its exponent is not less than Etiny.  This may result\n    in 0 with the sign of the intermediate result and an exponent of Etiny.\n    In all cases, Inexact, Rounded, and Subnormal will also be raised.\n    \"\"\"\nclass FloatOperation(DecimalException, TypeError):\n    \"\"\"Enable stricter semantics for mixing floats and Decimals.\n    If the signal is not trapped (default), mixing floats and Decimals is\n    permitted in the Decimal() constructor, context.create_decimal() and\n    all comparison operators. Both conversion and comparisons are exact.\n    Any occurrence of a mixed operation is silently recorded by setting\n    FloatOperation in the context flags.  Explicit conversions with\n    Decimal.from_float() or context.create_decimal_from_float() do not\n    set the flag.\n    Otherwise (the signal is trapped), only equality comparisons and explicit\n    conversions are silent. All other mixed operations raise FloatOperation.\n    \"\"\"\n_signals = [Clamped, DivisionByZero, Inexact, Overflow, Rounded,\n            Underflow, InvalidOperation, Subnormal, FloatOperation]\n_condition_map = {ConversionSyntax:InvalidOperation,\n                  DivisionImpossible:InvalidOperation,\n                  DivisionUndefined:InvalidOperation,\n                  InvalidContext:InvalidOperation}\n_rounding_modes = (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_CEILING,\n                   ROUND_FLOOR, ROUND_UP, ROUND_HALF_DOWN, ROUND_05UP)\ntry:\n    import threading\nexcept ImportError:\n    class MockThreading(object):\n        def local(self, sys=sys):\n            return sys.modules[__name__]\n    threading = MockThreading()\n    del MockThreading\ntry:\n    threading.local\nexcept AttributeError:\n    if hasattr(threading.current_thread(), '__decimal_context__'):\n        del threading.current_thread().__decimal_context__\n    def setcontext(context):\n        \"\"\"Set this thread's context to context.\"\"\"\n        if context in (DefaultContext, BasicContext, ExtendedContext):\n            context = context.copy()\n            context.clear_flags()\n        threading.current_thread().__decimal_context__ = context\n    def getcontext():\n        \"\"\"Returns this thread's context.\n        If this thread does not yet have a context, returns\n        a new context and sets this thread's context.\n        New contexts are copies of DefaultContext.\n        \"\"\"\n        try:\n            return threading.current_thread().__decimal_context__\n        except AttributeError:\n            context = Context()\n            threading.current_thread().__decimal_context__ = context\n            return context\nelse:\n    local = threading.local()\n    if hasattr(local, '__decimal_context__'):\n        del local.__decimal_context__\n    def getcontext(_local=local):\n        \"\"\"Returns this thread's context.\n        If this thread does not yet have a context, returns\n        a new context and sets this thread's context.\n        New contexts are copies of DefaultContext.\n        \"\"\"\n        try:\n            return _local.__decimal_context__\n        except AttributeError:\n            context = Context()\n            _local.__decimal_context__ = context\n            return context\n    def setcontext(context, _local=local):\n        \"\"\"Set this thread's context to context.\"\"\"\n        if context in (DefaultContext, BasicContext, ExtendedContext):\n            context = context.copy()\n            context.clear_flags()\n        _local.__decimal_context__ = context\n    del threading, local        # Don't contaminate the namespace\ndef localcontext(ctx=None):\n    \"\"\"Return a context manager for a copy of the supplied context\n    Uses a copy of the current context if no context is specified\n    The returned context manager creates a local decimal context\n    in a with statement:\n        def sin(x):\n             with localcontext() as ctx:\n                 ctx.prec += 2\n             return +s  # Convert result to normal precision\n         def sin(x):\n             with localcontext(ExtendedContext):\n             return +s  # Convert result to normal context\n    >>> setcontext(DefaultContext)\n    >>> print(getcontext().prec)\n    28\n    >>> with localcontext():\n    ...     ctx = getcontext()\n    ...     ctx.prec += 2\n    ...     print(ctx.prec)\n    ...\n    30\n    >>> with localcontext(ExtendedContext):\n    ...     print(getcontext().prec)\n    ...\n    9\n    >>> print(getcontext().prec)\n    28\n    \"\"\"\n    if ctx is None: ctx = getcontext()\n    return _ContextManager(ctx)\nclass Decimal(object):\n    \"\"\"Floating point class for decimal arithmetic.\"\"\"\n    __slots__ = ('_exp','_int','_sign', '_is_special')\n    def __new__(cls, value=\"0\", context=None):\n        \"\"\"Create a decimal point instance.\n        >>> Decimal('3.14')              # string input\n        Decimal('3.14')\n        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)\n        Decimal('3.14')\n        >>> Decimal(314)                 # int\n        Decimal('314')\n        >>> Decimal(Decimal(314))        # another decimal instance\n        Decimal('314')\n        >>> Decimal('  3.14  \\\\n')        # leading and trailing whitespace okay\n        Decimal('3.14')\n        \"\"\"\n        self = object.__new__(cls)\n        if isinstance(value, str):\n            m = _parser(value.strip())\n            if m is None:\n                if context is None:\n                    context = getcontext()\n                return context._raise_error(ConversionSyntax,\n                                \"Invalid literal for Decimal: %r\" % value)\n            if m.group('sign') == \"-\":\n                self._sign = 1\n            else:\n                self._sign = 0\n            intpart = m.group('int')\n            if intpart is not None:\n                fracpart = m.group('frac') or ''\n                exp = int(m.group('exp') or '0')\n                self._int = str(int(intpart+fracpart))\n                self._exp = exp - len(fracpart)\n                self._is_special = False\n            else:\n                diag = m.group('diag')\n                if diag is not None:\n                    self._int = str(int(diag or '0')).lstrip('0')\n                    if m.group('signal'):\n                        self._exp = 'N'\n                    else:\n                        self._exp = 'n'\n                else:\n                    self._int = '0'\n                    self._exp = 'F'\n                self._is_special = True\n            return self\n        if isinstance(value, int):\n            if value >= 0:\n                self._sign = 0\n            else:\n                self._sign = 1\n            self._exp = 0\n            self._int = str(abs(value))\n            self._is_special = False\n            return self\n        if isinstance(value, Decimal):\n            self._exp  = value._exp\n            self._sign = value._sign\n            self._int  = value._int\n            self._is_special  = value._is_special\n            return self\n        if isinstance(value, _WorkRep):\n            self._sign = value.sign\n            self._int = str(value.int)\n            self._exp = int(value.exp)\n            self._is_special = False\n            return self\n        if isinstance(value, (list,tuple)):\n            if len(value) != 3:\n                raise ValueError('Invalid tuple size in creation of Decimal '\n                                 'from list or tuple.  The list or tuple '\n                                 'should have exactly three elements.')\n            if not (isinstance(value[0], int) and value[0] in (0,1)):\n                raise ValueError(\"Invalid sign.  The first value in the tuple \"\n                                 \"should be an integer; either 0 for a \"\n                                 \"positive number or 1 for a negative number.\")\n            self._sign = value[0]\n            if value[2] == 'F':\n                self._int = '0'\n                self._exp = value[2]\n                self._is_special = True\n            else:\n                digits = []\n                for digit in value[1]:\n                    if isinstance(digit, int) and 0 <= digit <= 9:\n                        if digits or digit != 0:\n                            digits.append(digit)\n                    else:\n                        raise ValueError(\"The second value in the tuple must \"\n                                         \"be composed of integers in the range \"\n                                         \"0 through 9.\")\n                if value[2] in ('n', 'N'):\n                    self._int = ''.join(map(str, digits))\n                    self._exp = value[2]\n                    self._is_special = True\n                elif isinstance(value[2], int):\n                    self._int = ''.join(map(str, digits or [0]))\n                    self._exp = value[2]\n                    self._is_special = False\n                else:\n                    raise ValueError(\"The third value in the tuple must \"\n                                     \"be an integer, or one of the \"\n                                     \"strings 'F', 'n', 'N'.\")\n            return self\n        if isinstance(value, float):\n            if context is None:\n                context = getcontext()\n            context._raise_error(FloatOperation,\n                \"strict semantics for mixing floats and Decimals are \"\n                \"enabled\")\n            value = Decimal.from_float(value)\n            self._exp  = value._exp\n            self._sign = value._sign\n            self._int  = value._int\n            self._is_special  = value._is_special\n            return self\n        raise TypeError(\"Cannot convert %r to Decimal\" % value)\n    def from_float(cls, f):\n        \"\"\"Converts a float to a decimal number, exactly.\n        Note that Decimal.from_float(0.1) is not the same as Decimal('0.1').\n        Since 0.1 is not exactly representable in binary floating point, the\n        value is stored as the nearest representable value which is\n        0x1.999999999999ap-4.  The exact equivalent of the value in decimal\n        is 0.1000000000000000055511151231257827021181583404541015625.\n        >>> Decimal.from_float(0.1)\n        Decimal('0.1000000000000000055511151231257827021181583404541015625')\n        >>> Decimal.from_float(float('nan'))\n        Decimal('NaN')\n        >>> Decimal.from_float(float('inf'))\n        Decimal('Infinity')\n        >>> Decimal.from_float(-float('inf'))\n        Decimal('-Infinity')\n        >>> Decimal.from_float(-0.0)\n        Decimal('-0')\n        \"\"\"\n        if isinstance(f, int):                # handle integer inputs\n            return cls(f)\n        if not isinstance(f, float):\n            raise TypeError(\"argument must be int or float.\")\n        if _math.isinf(f) or _math.isnan(f):\n            return cls(repr(f))\n        if _math.copysign(1.0, f) == 1.0:\n            sign = 0\n        else:\n            sign = 1\n        n, d = abs(f).as_integer_ratio()\n        k = d.bit_length() - 1\n        result = _dec_from_triple(sign, str(n*5**k), -k)\n        if cls is Decimal:\n            return result\n        else:\n            return cls(result)\n    from_float = classmethod(from_float)\n    def _isnan(self):\n        \"\"\"Returns whether the number is not actually one.\n        0 if a number\n        1 if NaN\n        2 if sNaN\n        \"\"\"\n        if self._is_special:\n            exp = self._exp\n            if exp == 'n':\n                return 1\n            elif exp == 'N':\n                return 2\n        return 0\n    def _isinfinity(self):\n        \"\"\"Returns whether the number is infinite\n        0 if finite or not a number\n        1 if +INF\n        -1 if -INF\n        \"\"\"\n        if self._exp == 'F':\n            if self._sign:\n                return -1\n            return 1\n        return 0\n    def _check_nans(self, other=None, context=None):\n        \"\"\"Returns whether the number is not actually one.\n        if self, other are sNaN, signal\n        if self, other are NaN return nan\n        return 0\n        Done before operations.\n        \"\"\"\n        self_is_nan = self._isnan()\n        if other is None:\n            other_is_nan = False\n        else:\n            other_is_nan = other._isnan()\n        if self_is_nan or other_is_nan:\n            if context is None:\n                context = getcontext()\n            if self_is_nan == 2:\n                return context._raise_error(InvalidOperation, 'sNaN',\n                                        self)\n            if other_is_nan == 2:\n                return context._raise_error(InvalidOperation, 'sNaN',\n                                        other)\n            if self_is_nan:\n                return self._fix_nan(context)\n            return other._fix_nan(context)\n        return 0\n    def _compare_check_nans(self, other, context):\n        \"\"\"Version of _check_nans used for the signaling comparisons\n        compare_signal, __le__, __lt__, __ge__, __gt__.\n        Signal InvalidOperation if either self or other is a (quiet\n        or signaling) NaN.  Signaling NaNs take precedence over quiet\n        NaNs.\n        Return 0 if neither operand is a NaN.\n        \"\"\"\n        if context is None:\n            context = getcontext()\n        if self._is_special or other._is_special:\n            if self.is_snan():\n                return context._raise_error(InvalidOperation,\n                                            'comparison involving sNaN',\n                                            self)\n            elif other.is_snan():\n                return context._raise_error(InvalidOperation,\n                                            'comparison involving sNaN',\n                                            other)\n            elif self.is_qnan():\n                return context._raise_error(InvalidOperation,\n                                            'comparison involving NaN',\n                                            self)\n            elif other.is_qnan():\n                return context._raise_error(InvalidOperation,\n                                            'comparison involving NaN',\n                                            other)\n        return 0\n    def __bool__(self):\n        \"\"\"Return True if self is nonzero; otherwise return False.\n        NaNs and infinities are considered nonzero.\n        \"\"\"\n        return self._is_special or self._int != '0'\n    def _cmp(self, other):\n        \"\"\"Compare the two non-NaN decimal instances self and other.\n        Returns -1 if self < other, 0 if self == other and 1\n        if self > other.  This routine is for internal use only.\"\"\"\n        if self._is_special or other._is_special:\n            self_inf = self._isinfinity()\n            other_inf = other._isinfinity()\n            if self_inf == other_inf:\n                return 0\n            elif self_inf < other_inf:\n                return -1\n            else:\n                return 1\n        if not self:\n            if not other:\n                return 0\n            else:\n                return -((-1)**other._sign)\n        if not other:\n            return (-1)**self._sign\n        if other._sign < self._sign:\n            return -1\n        if self._sign < other._sign:\n            return 1\n        self_adjusted = self.adjusted()\n        other_adjusted = other.adjusted()\n        if self_adjusted == other_adjusted:\n            self_padded = self._int + '0'*(self._exp - other._exp)\n            other_padded = other._int + '0'*(other._exp - self._exp)\n            if self_padded == other_padded:\n                return 0\n            elif self_padded < other_padded:\n                return -(-1)**self._sign\n            else:\n                return (-1)**self._sign\n        elif self_adjusted > other_adjusted:\n            return (-1)**self._sign\n        else: # self_adjusted < other_adjusted\n            return -((-1)**self._sign)\n    def __eq__(self, other, context=None):\n        self, other = _convert_for_comparison(self, other, equality_op=True)\n        if other is NotImplemented:\n            return other\n        if self._check_nans(other, context):\n            return False\n        return self._cmp(other) == 0\n    def __ne__(self, other, context=None):\n        self, other = _convert_for_comparison(self, other, equality_op=True)\n        if other is NotImplemented:\n            return other\n        if self._check_nans(other, context):\n            return True\n        return self._cmp(other) != 0\n    def __lt__(self, other, context=None):\n        self, other = _convert_for_comparison(self, other)\n        if other is NotImplemented:\n            return other\n        ans = self._compare_check_nans(other, context)\n        if ans:\n            return False\n        return self._cmp(other) < 0\n    def __le__(self, other, context=None):\n        self, other = _convert_for_comparison(self, other)\n        if other is NotImplemented:\n            return other\n        ans = self._compare_check_nans(other, context)\n        if ans:\n            return False\n        return self._cmp(other) <= 0\n    def __gt__(self, other, context=None):\n        self, other = _convert_for_comparison(self, other)\n        if other is NotImplemented:\n            return other\n        ans = self._compare_check_nans(other, context)\n        if ans:\n            return False\n        return self._cmp(other) > 0\n    def __ge__(self, other, context=None):\n        self, other = _convert_for_comparison(self, other)\n        if other is NotImplemented:\n            return other\n        ans = self._compare_check_nans(other, context)\n        if ans:\n            return False\n        return self._cmp(other) >= 0\n    def compare(self, other, context=None):\n        \"\"\"Compares one to another.\n        -1 => a < b\n        0  => a = b\n        1  => a > b\n        NaN => one is NaN\n        Like __cmp__, but returns Decimal instances.\n        \"\"\"\n        other = _convert_other(other, raiseit=True)\n        if (self._is_special or other and other._is_special):\n            ans = self._check_nans(other, context)\n            if ans:\n                return ans\n        return Decimal(self._cmp(other))\n    def __hash__(self):\n        \"\"\"x.__hash__() <==> hash(x)\"\"\"\n        if self._is_special:\n            if self.is_snan():\n                raise TypeError('Cannot hash a signaling NaN value.')\n            elif self.is_nan():\n                return _PyHASH_NAN\n            else:\n                if self._sign:\n                    return -_PyHASH_INF\n                else:\n                    return _PyHASH_INF\n        if self._exp >= 0:\n            exp_hash = pow(10, self._exp, _PyHASH_MODULUS)\n        else:\n            exp_hash = pow(_PyHASH_10INV, -self._exp, _PyHASH_MODULUS)\n        hash_ = int(self._int) * exp_hash % _PyHASH_MODULUS\n        ans = hash_ if self >= 0 else -hash_\n        return -2 if ans == -1 else ans\n    def as_tuple(self):\n        \"\"\"Represents the number as a triple tuple.\n        To show the internals exactly as they are.\n        \"\"\"\n        return DecimalTuple(self._sign, tuple(map(int, self._int)), self._exp)\n    def __repr__(self):\n        \"\"\"Represents the number as an instance of Decimal.\"\"\"\n        return \"Decimal('%s')\" % str(self)\n    def __str__(self, eng=False, context=None):\n        \"\"\"Return string representation of the number in scientific notation.\n        Captures all of the information in the underlying representation.\n        \"\"\"\n        sign = ['', '-'][self._sign]\n        if self._is_special:\n            if self._exp == 'F':\n                return sign + 'Infinity'\n            elif self._exp == 'n':\n                return sign + 'NaN' + self._int\n            else: # self._exp == 'N'\n                return sign + 'sNaN' + self._int\n        leftdigits = self._exp + len(self._int)\n        if self._exp <= 0 and leftdigits > -6:\n            dotplace = leftdigits\n        elif not eng:\n            dotplace = 1\n        elif self._int == '0':\n            dotplace = (leftdigits + 1) % 3 - 1\n        else:\n            dotplace = (leftdigits - 1) % 3 + 1\n        if dotplace <= 0:\n            intpart = '0'\n            fracpart = '.' + '0'*(-dotplace) + self._int\n        elif dotplace >= len(self._int):\n            intpart = self._int+'0'*(dotplace-len(self._int))\n            fracpart = ''\n        else:\n            intpart = self._int[:dotplace]\n            fracpart = '.' + self._int[dotplace:]\n        if leftdigits == dotplace:\n            exp = ''\n        else:\n            if context is None:\n                context = getcontext()\n            exp = ['e', 'E'][context.capitals] + \"%+d\" % (leftdigits-dotplace)\n        return sign + intpart + fracpart + exp\n    def to_eng_string(self, context=None):\n        \"\"\"Convert to engineering-type string.\n        Engineering notation has an exponent which is a multiple of 3, so there\n        are up to 3 digits left of the decimal place.\n        Same rules for when in exponential and when as a value as in __str__.\n        \"\"\"\n        return self.__str__(eng=True, context=context)\n    def __neg__(self, context=None):\n        \"\"\"Returns a copy with the sign switched.\n        Rounds, if it has reason.\n        \"\"\"\n        if self._is_special:\n            ans = self._check_nans(context=context)\n            if ans:\n                return ans\n        if context is None:\n            context = getcontext()\n        if not self and context.rounding != ROUND_FLOOR:\n            ans = self.copy_abs()\n        else:\n            ans = self.copy_negate()\n        return ans._fix(context)\n    def __pos__(self, context=None):\n        \"\"\"Returns a copy, unless it is a sNaN.\n        Rounds the number (if more then precision digits)\n        \"\"\"\n        if self._is_special:\n            ans = self._check_nans(context=context)\n            if ans:\n                return ans\n        if context is None:\n            context = getcontext()\n        if not self and context.rounding != ROUND_FLOOR:\n            ans = self.copy_abs()\n        else:\n            ans = Decimal(self)\n        return ans._fix(context)\n    def __abs__(self, round=True, context=None):\n        \"\"\"Returns the absolute value of self.\n        If the keyword argument 'round' is false, do not round.  The\n        expression self.__abs__(round=False) is equivalent to\n        self.copy_abs().\n        \"\"\"\n        if not round:\n            return self.copy_abs()\n        if self._is_special:\n            ans = self._check_nans(context=context)\n            if ans:\n                return ans\n        if self._sign:\n            ans = self.__neg__(context=context)\n        else:\n            ans = self.__pos__(context=context)\n        return ans\n    def __add__(self, other, context=None):\n        \"\"\"Returns self + other.\n        -INF + INF (or the reverse) cause InvalidOperation errors.\n        \"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        if context is None:\n            context = getcontext()\n        if self._is_special or other._is_special:\n            ans = self._check_nans(other, context)\n            if ans:\n                return ans\n            if self._isinfinity():\n                if self._sign != other._sign and other._isinfinity():\n                    return context._raise_error(InvalidOperation, '-INF + INF')\n                return Decimal(self)\n            if other._isinfinity():\n                return Decimal(other)  # Can't both be infinity here\n        exp = min(self._exp, other._exp)\n        negativezero = 0\n        if context.rounding == ROUND_FLOOR and self._sign != other._sign:\n            negativezero = 1\n        if not self and not other:\n            sign = min(self._sign, other._sign)\n            if negativezero:\n                sign = 1\n            ans = _dec_from_triple(sign, '0', exp)\n            ans = ans._fix(context)\n            return ans\n        if not self:\n            exp = max(exp, other._exp - context.prec-1)\n            ans = other._rescale(exp, context.rounding)\n            ans = ans._fix(context)\n            return ans\n        if not other:\n            exp = max(exp, self._exp - context.prec-1)\n            ans = self._rescale(exp, context.rounding)\n            ans = ans._fix(context)\n            return ans\n        op1 = _WorkRep(self)\n        op2 = _WorkRep(other)\n        op1, op2 = _normalize(op1, op2, context.prec)\n        result = _WorkRep()\n        if op1.sign != op2.sign:\n            if op1.int == op2.int:\n                ans = _dec_from_triple(negativezero, '0', exp)\n                ans = ans._fix(context)\n                return ans\n            if op1.int < op2.int:\n                op1, op2 = op2, op1\n            if op1.sign == 1:\n                result.sign = 1\n                op1.sign, op2.sign = op2.sign, op1.sign\n            else:\n                result.sign = 0\n        elif op1.sign == 1:\n            result.sign = 1\n            op1.sign, op2.sign = (0, 0)\n        else:\n            result.sign = 0\n        if op2.sign == 0:\n            result.int = op1.int + op2.int\n        else:\n            result.int = op1.int - op2.int\n        result.exp = op1.exp\n        ans = Decimal(result)\n        ans = ans._fix(context)\n        return ans\n    __radd__ = __add__\n    def __sub__(self, other, context=None):\n        \"\"\"Return self - other\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        if self._is_special or other._is_special:\n            ans = self._check_nans(other, context=context)\n            if ans:\n                return ans\n        return self.__add__(other.copy_negate(), context=context)\n    def __rsub__(self, other, context=None):\n        \"\"\"Return other - self\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        return other.__sub__(self, context=context)\n    def __mul__(self, other, context=None):\n        \"\"\"Return self * other.\n        (+-) INF * 0 (or its reverse) raise InvalidOperation.\n        \"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        if context is None:\n            context = getcontext()\n        resultsign = self._sign ^ other._sign\n        if self._is_special or other._is_special:\n            ans = self._check_nans(other, context)\n            if ans:\n                return ans\n            if self._isinfinity():\n                if not other:\n                    return context._raise_error(InvalidOperation, '(+-)INF * 0')\n                return _SignedInfinity[resultsign]\n            if other._isinfinity():\n                if not self:\n                    return context._raise_error(InvalidOperation, '0 * (+-)INF')\n                return _SignedInfinity[resultsign]\n        resultexp = self._exp + other._exp\n        if not self or not other:\n            ans = _dec_from_triple(resultsign, '0', resultexp)\n            ans = ans._fix(context)\n            return ans\n        if self._int == '1':\n            ans = _dec_from_triple(resultsign, other._int, resultexp)\n            ans = ans._fix(context)\n            return ans\n        if other._int == '1':\n            ans = _dec_from_triple(resultsign, self._int, resultexp)\n            ans = ans._fix(context)\n            return ans\n        op1 = _WorkRep(self)\n        op2 = _WorkRep(other)\n        ans = _dec_from_triple(resultsign, str(op1.int * op2.int), resultexp)\n        ans = ans._fix(context)\n        return ans\n    __rmul__ = __mul__\n    def __truediv__(self, other, context=None):\n        \"\"\"Return self / other.\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return NotImplemented\n        if context is None:\n            context = getcontext()\n        sign = self._sign ^ other._sign\n        if self._is_special or other._is_special:\n            ans = self._check_nans(other, context)\n            if ans:\n                return ans\n            if self._isinfinity() and other._isinfinity():\n                return context._raise_error(InvalidOperation, '(+-)INF/(+-)INF')\n            if self._isinfinity():\n                return _SignedInfinity[sign]\n            if other._isinfinity():\n                context._raise_error(Clamped, 'Division by infinity')\n                return _dec_from_triple(sign, '0', context.Etiny())\n        if not other:\n            if not self:\n                return context._raise_error(DivisionUndefined, '0 / 0')\n            return context._raise_error(DivisionByZero, 'x / 0', sign)\n        if not self:\n            exp = self._exp - other._exp\n            coeff = 0\n        else:\n            shift = len(other._int) - len(self._int) + context.prec + 1\n            exp = self._exp - other._exp - shift\n            op1 = _WorkRep(self)\n            op2 = _WorkRep(other)\n            if shift >= 0:\n                coeff, remainder = divmod(op1.int * 10**shift, op2.int)\n            else:\n                coeff, remainder = divmod(op1.int, op2.int * 10**-shift)\n            if remainder:\n                if coeff % 5 == 0:\n                    coeff += 1\n            else:\n                ideal_exp = self._exp - other._exp\n                while exp < ideal_exp and coeff % 10 == 0:\n                    coeff //= 10\n                    exp += 1\n        ans = _dec_from_triple(sign, str(coeff), exp)\n        return ans._fix(context)\n    def _divide(self, other, context):\n        \"\"\"Return (self // other, self % other), to context.prec precision.\n        Assumes that neither self nor other is a NaN, that self is not\n        infinite and that other is nonzero.\n        \"\"\"\n        sign = self._sign ^ other._sign\n        if other._isinfinity():\n            ideal_exp = self._exp\n        else:\n            ideal_exp = min(self._exp, other._exp)\n        expdiff = self.adjusted() - other.adjusted()\n        if not self or other._isinfinity() or expdiff <= -2:\n            return (_dec_from_triple(sign, '0', 0),\n                    self._rescale(ideal_exp, context.rounding))\n        if expdiff <= context.prec:\n            op1 = _WorkRep(self)\n            op2 = _WorkRep(other)\n            if op1.exp >= op2.exp:\n                op1.int *= 10**(op1.exp - op2.exp)\n            else:\n                op2.int *= 10**(op2.exp - op1.exp)\n            q, r = divmod(op1.int, op2.int)\n            if q < 10**context.prec:\n                return (_dec_from_triple(sign, str(q), 0),\n                        _dec_from_triple(self._sign, str(r), ideal_exp))\n        ans = context._raise_error(DivisionImpossible,\n                                   'quotient too large in //, % or divmod')\n        return ans, ans\n    def __rtruediv__(self, other, context=None):\n        \"\"\"Swaps self/other and returns __truediv__.\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        return other.__truediv__(self, context=context)\n    def __divmod__(self, other, context=None):\n        \"\"\"\n        Return (self // other, self % other)\n        \"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(other, context)\n        if ans:\n            return (ans, ans)\n        sign = self._sign ^ other._sign\n        if self._isinfinity():\n            if other._isinfinity():\n                ans = context._raise_error(InvalidOperation, 'divmod(INF, INF)')\n                return ans, ans\n            else:\n                return (_SignedInfinity[sign],\n                        context._raise_error(InvalidOperation, 'INF % x'))\n        if not other:\n            if not self:\n                ans = context._raise_error(DivisionUndefined, 'divmod(0, 0)')\n                return ans, ans\n            else:\n                return (context._raise_error(DivisionByZero, 'x // 0', sign),\n                        context._raise_error(InvalidOperation, 'x % 0'))\n        quotient, remainder = self._divide(other, context)\n        remainder = remainder._fix(context)\n        return quotient, remainder\n    def __rdivmod__(self, other, context=None):\n        \"\"\"Swaps self/other and returns __divmod__.\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        return other.__divmod__(self, context=context)\n    def __mod__(self, other, context=None):\n        \"\"\"\n        self % other\n        \"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(other, context)\n        if ans:\n            return ans\n        if self._isinfinity():\n            return context._raise_error(InvalidOperation, 'INF % x')\n        elif not other:\n            if self:\n                return context._raise_error(InvalidOperation, 'x % 0')\n            else:\n                return context._raise_error(DivisionUndefined, '0 % 0')\n        remainder = self._divide(other, context)[1]\n        remainder = remainder._fix(context)\n        return remainder\n    def __rmod__(self, other, context=None):\n        \"\"\"Swaps self/other and returns __mod__.\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        return other.__mod__(self, context=context)\n    def remainder_near(self, other, context=None):\n        \"\"\"\n        Remainder nearest to 0-  abs(remainder-near) <= other/2\n        \"\"\"\n        if context is None:\n            context = getcontext()\n        other = _convert_other(other, raiseit=True)\n        ans = self._check_nans(other, context)\n        if ans:\n            return ans\n        if self._isinfinity():\n            return context._raise_error(InvalidOperation,\n                                        'remainder_near(infinity, x)')\n        if not other:\n            if self:\n                return context._raise_error(InvalidOperation,\n                                            'remainder_near(x, 0)')\n            else:\n                return context._raise_error(DivisionUndefined,\n                                            'remainder_near(0, 0)')\n        if other._isinfinity():\n            ans = Decimal(self)\n            return ans._fix(context)\n        ideal_exponent = min(self._exp, other._exp)\n        if not self:\n            ans = _dec_from_triple(self._sign, '0', ideal_exponent)\n            return ans._fix(context)\n        expdiff = self.adjusted() - other.adjusted()\n        if expdiff >= context.prec + 1:\n            return context._raise_error(DivisionImpossible)\n        if expdiff <= -2:\n            ans = self._rescale(ideal_exponent, context.rounding)\n            return ans._fix(context)\n        op1 = _WorkRep(self)\n        op2 = _WorkRep(other)\n        if op1.exp >= op2.exp:\n            op1.int *= 10**(op1.exp - op2.exp)\n        else:\n            op2.int *= 10**(op2.exp - op1.exp)\n        q, r = divmod(op1.int, op2.int)\n        if 2*r + (q&1) > op2.int:\n            r -= op2.int\n            q += 1\n        if q >= 10**context.prec:\n            return context._raise_error(DivisionImpossible)\n        sign = self._sign\n        if r < 0:\n            sign = 1-sign\n            r = -r\n        ans = _dec_from_triple(sign, str(r), ideal_exponent)\n        return ans._fix(context)\n    def __floordiv__(self, other, context=None):\n        \"\"\"self // other\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(other, context)\n        if ans:\n            return ans\n        if self._isinfinity():\n            if other._isinfinity():\n                return context._raise_error(InvalidOperation, 'INF // INF')\n            else:\n                return _SignedInfinity[self._sign ^ other._sign]\n        if not other:\n            if self:\n                return context._raise_error(DivisionByZero, 'x // 0',\n                                            self._sign ^ other._sign)\n            else:\n                return context._raise_error(DivisionUndefined, '0 // 0')\n        return self._divide(other, context)[0]\n    def __rfloordiv__(self, other, context=None):\n        \"\"\"Swaps self/other and returns __floordiv__.\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        return other.__floordiv__(self, context=context)\n    def __float__(self):\n        \"\"\"Float representation.\"\"\"\n        if self._isnan():\n            if self.is_snan():\n                raise ValueError(\"Cannot convert signaling NaN to float\")\n            s = \"-nan\" if self._sign else \"nan\"\n        else:\n            s = str(self)\n        return float(s)\n    def __int__(self):\n        \"\"\"Converts self to an int, truncating if necessary.\"\"\"\n        if self._is_special:\n            if self._isnan():\n                raise ValueError(\"Cannot convert NaN to integer\")\n            elif self._isinfinity():\n                raise OverflowError(\"Cannot convert infinity to integer\")\n        s = (-1)**self._sign\n        if self._exp >= 0:\n            return s*int(self._int)*10**self._exp\n        else:\n            return s*int(self._int[:self._exp] or '0')\n    __trunc__ = __int__\n    def real(self):\n        return self\n    real = property(real)\n    def imag(self):\n        return Decimal(0)\n    imag = property(imag)\n    def conjugate(self):\n        return self\n    def __complex__(self):\n        return complex(float(self))\n    def _fix_nan(self, context):\n        \"\"\"Decapitate the payload of a NaN to fit the context\"\"\"\n        payload = self._int\n        max_payload_len = context.prec - context.clamp\n        if len(payload) > max_payload_len:\n            payload = payload[len(payload)-max_payload_len:].lstrip('0')\n            return _dec_from_triple(self._sign, payload, self._exp, True)\n        return Decimal(self)\n    def _fix(self, context):\n        \"\"\"Round if it is necessary to keep self within prec precision.\n        Rounds and fixes the exponent.  Does not raise on a sNaN.\n        Arguments:\n        self - Decimal instance\n        context - context used.\n        \"\"\"\n        if self._is_special:\n            if self._isnan():\n                return self._fix_nan(context)\n            else:\n                return Decimal(self)\n        Etiny = context.Etiny()\n        Etop = context.Etop()\n        if not self:\n            exp_max = [context.Emax, Etop][context.clamp]\n            new_exp = min(max(self._exp, Etiny), exp_max)\n            if new_exp != self._exp:\n                context._raise_error(Clamped)\n                return _dec_from_triple(self._sign, '0', new_exp)\n            else:\n                return Decimal(self)\n        exp_min = len(self._int) + self._exp - context.prec\n        if exp_min > Etop:\n            ans = context._raise_error(Overflow, 'above Emax', self._sign)\n            context._raise_error(Inexact)\n            context._raise_error(Rounded)\n            return ans\n        self_is_subnormal = exp_min < Etiny\n        if self_is_subnormal:\n            exp_min = Etiny\n        if self._exp < exp_min:\n            digits = len(self._int) + self._exp - exp_min\n            if digits < 0:\n                self = _dec_from_triple(self._sign, '1', exp_min-1)\n                digits = 0\n            rounding_method = self._pick_rounding_function[context.rounding]\n            changed = rounding_method(self, digits)\n            coeff = self._int[:digits] or '0'\n            if changed > 0:\n                coeff = str(int(coeff)+1)\n                if len(coeff) > context.prec:\n                    coeff = coeff[:-1]\n                    exp_min += 1\n            if exp_min > Etop:\n                ans = context._raise_error(Overflow, 'above Emax', self._sign)\n            else:\n                ans = _dec_from_triple(self._sign, coeff, exp_min)\n            if changed and self_is_subnormal:\n                context._raise_error(Underflow)\n            if self_is_subnormal:\n                context._raise_error(Subnormal)\n            if changed:\n                context._raise_error(Inexact)\n            context._raise_error(Rounded)\n            if not ans:\n                context._raise_error(Clamped)\n            return ans\n        if self_is_subnormal:\n            context._raise_error(Subnormal)\n        if context.clamp == 1 and self._exp > Etop:\n            context._raise_error(Clamped)\n            self_padded = self._int + '0'*(self._exp - Etop)\n            return _dec_from_triple(self._sign, self_padded, Etop)\n        return Decimal(self)\n    def _round_down(self, prec):\n        \"\"\"Also known as round-towards-0, truncate.\"\"\"\n        if _all_zeros(self._int, prec):\n            return 0\n        else:\n            return -1\n    def _round_up(self, prec):\n        \"\"\"Rounds away from 0.\"\"\"\n        return -self._round_down(prec)\n    def _round_half_up(self, prec):\n        \"\"\"Rounds 5 up (away from 0)\"\"\"\n        if self._int[prec] in '56789':\n            return 1\n        elif _all_zeros(self._int, prec):\n            return 0\n        else:\n            return -1\n    def _round_half_down(self, prec):\n        \"\"\"Round 5 down\"\"\"\n        if _exact_half(self._int, prec):\n            return -1\n        else:\n            return self._round_half_up(prec)\n    def _round_half_even(self, prec):\n        \"\"\"Round 5 to even, rest to nearest.\"\"\"\n        if _exact_half(self._int, prec) and \\\n                (prec == 0 or self._int[prec-1] in '02468'):\n            return -1\n        else:\n            return self._round_half_up(prec)\n    def _round_ceiling(self, prec):\n        \"\"\"Rounds up (not away from 0 if negative.)\"\"\"\n        if self._sign:\n            return self._round_down(prec)\n        else:\n            return -self._round_down(prec)\n    def _round_floor(self, prec):\n        \"\"\"Rounds down (not towards 0 if negative)\"\"\"\n        if not self._sign:\n            return self._round_down(prec)\n        else:\n            return -self._round_down(prec)\n    def _round_05up(self, prec):\n        \"\"\"Round down unless digit prec-1 is 0 or 5.\"\"\"\n        if prec and self._int[prec-1] not in '05':\n            return self._round_down(prec)\n        else:\n            return -self._round_down(prec)\n    _pick_rounding_function = dict(\n        ROUND_DOWN = _round_down,\n        ROUND_UP = _round_up,\n        ROUND_HALF_UP = _round_half_up,\n        ROUND_HALF_DOWN = _round_half_down,\n        ROUND_HALF_EVEN = _round_half_even,\n        ROUND_CEILING = _round_ceiling,\n        ROUND_FLOOR = _round_floor,\n        ROUND_05UP = _round_05up,\n    )\n    def __round__(self, n=None):\n        \"\"\"Round self to the nearest integer, or to a given precision.\n        If only one argument is supplied, round a finite Decimal\n        instance self to the nearest integer.  If self is infinite or\n        a NaN then a Python exception is raised.  If self is finite\n        and lies exactly halfway between two integers then it is\n        rounded to the integer with even last digit.\n        >>> round(Decimal('123.456'))\n        123\n        >>> round(Decimal('-456.789'))\n        -457\n        >>> round(Decimal('-3.0'))\n        -3\n        >>> round(Decimal('2.5'))\n        2\n        >>> round(Decimal('3.5'))\n        4\n        >>> round(Decimal('Inf'))\n        Traceback (most recent call last):\n          ...\n        OverflowError: cannot round an infinity\n        >>> round(Decimal('NaN'))\n        Traceback (most recent call last):\n          ...\n        ValueError: cannot round a NaN\n        If a second argument n is supplied, self is rounded to n\n        decimal places using the rounding mode for the current\n        context.\n        For an integer n, round(self, -n) is exactly equivalent to\n        self.quantize(Decimal('1En')).\n        >>> round(Decimal('123.456'), 0)\n        Decimal('123')\n        >>> round(Decimal('123.456'), 2)\n        Decimal('123.46')\n        >>> round(Decimal('123.456'), -2)\n        Decimal('1E+2')\n        >>> round(Decimal('-Infinity'), 37)\n        Decimal('NaN')\n        >>> round(Decimal('sNaN123'), 0)\n        Decimal('NaN123')\n        \"\"\"\n        if n is not None:\n            if not isinstance(n, int):\n                raise TypeError('Second argument to round should be integral')\n            exp = _dec_from_triple(0, '1', -n)\n            return self.quantize(exp)\n        if self._is_special:\n            if self.is_nan():\n                raise ValueError(\"cannot round a NaN\")\n            else:\n                raise OverflowError(\"cannot round an infinity\")\n        return int(self._rescale(0, ROUND_HALF_EVEN))\n    def __floor__(self):\n        \"\"\"Return the floor of self, as an integer.\n        For a finite Decimal instance self, return the greatest\n        integer n such that n <= self.  If self is infinite or a NaN\n        then a Python exception is raised.\n        \"\"\"\n        if self._is_special:\n            if self.is_nan():\n                raise ValueError(\"cannot round a NaN\")\n            else:\n                raise OverflowError(\"cannot round an infinity\")\n        return int(self._rescale(0, ROUND_FLOOR))\n    def __ceil__(self):\n        \"\"\"Return the ceiling of self, as an integer.\n        For a finite Decimal instance self, return the least integer n\n        such that n >= self.  If self is infinite or a NaN then a\n        Python exception is raised.\n        \"\"\"\n        if self._is_special:\n            if self.is_nan():\n                raise ValueError(\"cannot round a NaN\")\n            else:\n                raise OverflowError(\"cannot round an infinity\")\n        return int(self._rescale(0, ROUND_CEILING))\n    def fma(self, other, third, context=None):\n        \"\"\"Fused multiply-add.\n        Returns self*other+third with no rounding of the intermediate\n        product self*other.\n        self and other are multiplied together, with no rounding of\n        the result.  The third operand is then added to the result,\n        and a single final rounding is performed.\n        \"\"\"\n        other = _convert_other(other, raiseit=True)\n        third = _convert_other(third, raiseit=True)\n        if self._is_special or other._is_special:\n            if context is None:\n                context = getcontext()\n            if self._exp == 'N':\n                return context._raise_error(InvalidOperation, 'sNaN', self)\n            if other._exp == 'N':\n                return context._raise_error(InvalidOperation, 'sNaN', other)\n            if self._exp == 'n':\n                product = self\n            elif other._exp == 'n':\n                product = other\n            elif self._exp == 'F':\n                if not other:\n                    return context._raise_error(InvalidOperation,\n                                                'INF * 0 in fma')\n                product = _SignedInfinity[self._sign ^ other._sign]\n            elif other._exp == 'F':\n                if not self:\n                    return context._raise_error(InvalidOperation,\n                                                '0 * INF in fma')\n                product = _SignedInfinity[self._sign ^ other._sign]\n        else:\n            product = _dec_from_triple(self._sign ^ other._sign,\n                                       str(int(self._int) * int(other._int)),\n                                       self._exp + other._exp)\n        return product.__add__(third, context)\n    def _power_modulo(self, other, modulo, context=None):\n        \"\"\"Three argument version of __pow__\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        modulo = _convert_other(modulo)\n        if modulo is NotImplemented:\n            return modulo\n        if context is None:\n            context = getcontext()\n        self_is_nan = self._isnan()\n        other_is_nan = other._isnan()\n        modulo_is_nan = modulo._isnan()\n        if self_is_nan or other_is_nan or modulo_is_nan:\n            if self_is_nan == 2:\n                return context._raise_error(InvalidOperation, 'sNaN',\n                                        self)\n            if other_is_nan == 2:\n                return context._raise_error(InvalidOperation, 'sNaN',\n                                        other)\n            if modulo_is_nan == 2:\n                return context._raise_error(InvalidOperation, 'sNaN',\n                                        modulo)\n            if self_is_nan:\n                return self._fix_nan(context)\n            if other_is_nan:\n                return other._fix_nan(context)\n            return modulo._fix_nan(context)\n        if not (self._isinteger() and\n                other._isinteger() and\n                modulo._isinteger()):\n            return context._raise_error(InvalidOperation,\n                                        'pow() 3rd argument not allowed '\n                                        'unless all arguments are integers')\n        if other < 0:\n            return context._raise_error(InvalidOperation,\n                                        'pow() 2nd argument cannot be '\n                                        'negative when 3rd argument specified')\n        if not modulo:\n            return context._raise_error(InvalidOperation,\n                                        'pow() 3rd argument cannot be 0')\n        if modulo.adjusted() >= context.prec:\n            return context._raise_error(InvalidOperation,\n                                        'insufficient precision: pow() 3rd '\n                                        'argument must not have more than '\n                                        'precision digits')\n        if not other and not self:\n            return context._raise_error(InvalidOperation,\n                                        'at least one of pow() 1st argument '\n                                        'and 2nd argument must be nonzero ;'\n                                        '0**0 is not defined')\n        if other._iseven():\n            sign = 0\n        else:\n            sign = self._sign\n        modulo = abs(int(modulo))\n        base = _WorkRep(self.to_integral_value())\n        exponent = _WorkRep(other.to_integral_value())\n        base = (base.int % modulo * pow(10, base.exp, modulo)) % modulo\n        for i in range(exponent.exp):\n            base = pow(base, 10, modulo)\n        base = pow(base, exponent.int, modulo)\n        return _dec_from_triple(sign, str(base), 0)\n    def _power_exact(self, other, p):\n        \"\"\"Attempt to compute self**other exactly.\n        Given Decimals self and other and an integer p, attempt to\n        compute an exact result for the power self**other, with p\n        digits of precision.  Return None if self**other is not\n        exactly representable in p digits.\n        Assumes that elimination of special cases has already been\n        performed: self and other must both be nonspecial; self must\n        be positive and not numerically equal to 1; other must be\n        nonzero.  For efficiency, other._exp should not be too large,\n        so that 10**abs(other._exp) is a feasible calculation.\"\"\"\n        x = _WorkRep(self)\n        xc, xe = x.int, x.exp\n        while xc % 10 == 0:\n            xc //= 10\n            xe += 1\n        y = _WorkRep(other)\n        yc, ye = y.int, y.exp\n        while yc % 10 == 0:\n            yc //= 10\n            ye += 1\n        if xc == 1:\n            xe *= yc\n            while xe % 10 == 0:\n                xe //= 10\n                ye += 1\n            if ye < 0:\n                return None\n            exponent = xe * 10**ye\n            if y.sign == 1:\n                exponent = -exponent\n            if other._isinteger() and other._sign == 0:\n                ideal_exponent = self._exp*int(other)\n                zeros = min(exponent-ideal_exponent, p-1)\n            else:\n                zeros = 0\n            return _dec_from_triple(0, '1' + '0'*zeros, exponent-zeros)\n        if y.sign == 1:\n            last_digit = xc % 10\n            if last_digit in (2,4,6,8):\n                if xc & -xc != xc:\n                    return None\n                e = _nbits(xc)-1\n                emax = p*93//65\n                if ye >= len(str(emax)):\n                    return None\n                e = _decimal_lshift_exact(e * yc, ye)\n                xe = _decimal_lshift_exact(xe * yc, ye)\n                if e is None or xe is None:\n                    return None\n                if e > emax:\n                    return None\n                xc = 5**e\n            elif last_digit == 5:\n                e = _nbits(xc)*28//65\n                xc, remainder = divmod(5**e, xc)\n                if remainder:\n                    return None\n                while xc % 5 == 0:\n                    xc //= 5\n                    e -= 1\n                emax = p*10//3\n                if ye >= len(str(emax)):\n                    return None\n                e = _decimal_lshift_exact(e * yc, ye)\n                xe = _decimal_lshift_exact(xe * yc, ye)\n                if e is None or xe is None:\n                    return None\n                if e > emax:\n                    return None\n                xc = 2**e\n            else:\n                return None\n            if xc >= 10**p:\n                return None\n            xe = -e-xe\n            return _dec_from_triple(0, str(xc), xe)\n        if ye >= 0:\n            m, n = yc*10**ye, 1\n        else:\n            if xe != 0 and len(str(abs(yc*xe))) <= -ye:\n                return None\n            xc_bits = _nbits(xc)\n            if xc != 1 and len(str(abs(yc)*xc_bits)) <= -ye:\n                return None\n            m, n = yc, 10**(-ye)\n            while m % 2 == n % 2 == 0:\n                m //= 2\n                n //= 2\n            while m % 5 == n % 5 == 0:\n                m //= 5\n                n //= 5\n        if n > 1:\n            if xc != 1 and xc_bits <= n:\n                return None\n            xe, rem = divmod(xe, n)\n            if rem != 0:\n                return None\n            a = 1 << -(-_nbits(xc)//n) # initial estimate\n            while True:\n                q, r = divmod(xc, a**(n-1))\n                if a <= q:\n                    break\n                else:\n                    a = (a*(n-1) + q)//n\n            if not (a == q and r == 0):\n                return None\n            xc = a\n        if xc > 1 and m > p*100//_log10_lb(xc):\n            return None\n        xc = xc**m\n        xe *= m\n        if xc > 10**p:\n            return None\n        str_xc = str(xc)\n        if other._isinteger() and other._sign == 0:\n            ideal_exponent = self._exp*int(other)\n            zeros = min(xe-ideal_exponent, p-len(str_xc))\n        else:\n            zeros = 0\n        return _dec_from_triple(0, str_xc+'0'*zeros, xe-zeros)\n    def __pow__(self, other, modulo=None, context=None):\n        \"\"\"Return self ** other [ % modulo].\n        With two arguments, compute self**other.\n        With three arguments, compute (self**other) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n         - all three arguments must be integral\n         - other must be nonnegative\n         - either self or other (or both) must be nonzero\n         - modulo must be nonzero and must have at most p digits,\n           where p is the context precision.\n        If any of these restrictions is violated the InvalidOperation\n        flag is raised.\n        The result of pow(self, other, modulo) is identical to the\n        result that would be obtained by computing (self**other) %\n        modulo with unbounded precision, but is computed more\n        efficiently.  It is always exact.\n        \"\"\"\n        if modulo is not None:\n            return self._power_modulo(other, modulo, context)\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(other, context)\n        if ans:\n            return ans\n        if not other:\n            if not self:\n                return context._raise_error(InvalidOperation, '0 ** 0')\n            else:\n                return _One\n        result_sign = 0\n        if self._sign == 1:\n            if other._isinteger():\n                if not other._iseven():\n                    result_sign = 1\n            else:\n                if self:\n                    return context._raise_error(InvalidOperation,\n                        'x ** y with x negative and y not an integer')\n            self = self.copy_negate()\n        if not self:\n            if other._sign == 0:\n                return _dec_from_triple(result_sign, '0', 0)\n            else:\n                return _SignedInfinity[result_sign]\n        if self._isinfinity():\n            if other._sign == 0:\n                return _SignedInfinity[result_sign]\n            else:\n                return _dec_from_triple(result_sign, '0', 0)\n        if self == _One:\n            if other._isinteger():\n                if other._sign == 1:\n                    multiplier = 0\n                elif other > context.prec:\n                    multiplier = context.prec\n                else:\n                    multiplier = int(other)\n                exp = self._exp * multiplier\n                if exp < 1-context.prec:\n                    exp = 1-context.prec\n                    context._raise_error(Rounded)\n            else:\n                context._raise_error(Inexact)\n                context._raise_error(Rounded)\n                exp = 1-context.prec\n            return _dec_from_triple(result_sign, '1'+'0'*-exp, exp)\n        self_adj = self.adjusted()\n        if other._isinfinity():\n            if (other._sign == 0) == (self_adj < 0):\n                return _dec_from_triple(result_sign, '0', 0)\n            else:\n                return _SignedInfinity[result_sign]\n        ans = None\n        exact = False\n        bound = self._log10_exp_bound() + other.adjusted()\n        if (self_adj >= 0) == (other._sign == 0):\n            if bound >= len(str(context.Emax)):\n                ans = _dec_from_triple(result_sign, '1', context.Emax+1)\n        else:\n            Etiny = context.Etiny()\n            if bound >= len(str(-Etiny)):\n                ans = _dec_from_triple(result_sign, '1', Etiny-1)\n        if ans is None:\n            ans = self._power_exact(other, context.prec + 1)\n            if ans is not None:\n                if result_sign == 1:\n                    ans = _dec_from_triple(1, ans._int, ans._exp)\n                exact = True\n        if ans is None:\n            p = context.prec\n            x = _WorkRep(self)\n            xc, xe = x.int, x.exp\n            y = _WorkRep(other)\n            yc, ye = y.int, y.exp\n            if y.sign == 1:\n                yc = -yc\n            extra = 3\n            while True:\n                coeff, exp = _dpower(xc, xe, yc, ye, p+extra)\n                if coeff % (5*10**(len(str(coeff))-p-1)):\n                    break\n                extra += 3\n            ans = _dec_from_triple(result_sign, str(coeff), exp)\n        if exact and not other._isinteger():\n            if len(ans._int) <= context.prec:\n                expdiff = context.prec + 1 - len(ans._int)\n                ans = _dec_from_triple(ans._sign, ans._int+'0'*expdiff,\n                                       ans._exp-expdiff)\n            newcontext = context.copy()\n            newcontext.clear_flags()\n            for exception in _signals:\n                newcontext.traps[exception] = 0\n            ans = ans._fix(newcontext)\n            newcontext._raise_error(Inexact)\n            if newcontext.flags[Subnormal]:\n                newcontext._raise_error(Underflow)\n            if newcontext.flags[Overflow]:\n                context._raise_error(Overflow, 'above Emax', ans._sign)\n            for exception in Underflow, Subnormal, Inexact, Rounded, Clamped:\n                if newcontext.flags[exception]:\n                    context._raise_error(exception)\n        else:\n            ans = ans._fix(context)\n        return ans\n    def __rpow__(self, other, context=None):\n        \"\"\"Swaps self/other and returns __pow__.\"\"\"\n        other = _convert_other(other)\n        if other is NotImplemented:\n            return other\n        return other.__pow__(self, context=context)\n    def normalize(self, context=None):\n        \"\"\"Normalize- strip trailing 0s, change anything equal to 0 to 0e0\"\"\"\n        if context is None:\n            context = getcontext()\n        if self._is_special:\n            ans = self._check_nans(context=context)\n            if ans:\n                return ans\n        dup = self._fix(context)\n        if dup._isinfinity():\n            return dup\n        if not dup:\n            return _dec_from_triple(dup._sign, '0', 0)\n        exp_max = [context.Emax, context.Etop()][context.clamp]\n        end = len(dup._int)\n        exp = dup._exp\n        while dup._int[end-1] == '0' and exp < exp_max:\n            exp += 1\n            end -= 1\n        return _dec_from_triple(dup._sign, dup._int[:end], exp)\n    def quantize(self, exp, rounding=None, context=None, watchexp=True):\n        \"\"\"Quantize self so its exponent is the same as that of exp.\n        Similar to self._rescale(exp._exp) but with error checking.\n        \"\"\"\n        exp = _convert_other(exp, raiseit=True)\n        if context is None:\n            context = getcontext()\n        if rounding is None:\n            rounding = context.rounding\n        if self._is_special or exp._is_special:\n            ans = self._check_nans(exp, context)\n            if ans:\n                return ans\n            if exp._isinfinity() or self._isinfinity():\n                if exp._isinfinity() and self._isinfinity():\n                    return Decimal(self)  # if both are inf, it is OK\n                return context._raise_error(InvalidOperation,\n                                        'quantize with one INF')\n        if not watchexp:\n            ans = self._rescale(exp._exp, rounding)\n            if ans._exp > self._exp:\n                context._raise_error(Rounded)\n                if ans != self:\n                    context._raise_error(Inexact)\n            return ans\n        if not (context.Etiny() <= exp._exp <= context.Emax):\n            return context._raise_error(InvalidOperation,\n                   'target exponent out of bounds in quantize')\n        if not self:\n            ans = _dec_from_triple(self._sign, '0', exp._exp)\n            return ans._fix(context)\n        self_adjusted = self.adjusted()\n        if self_adjusted > context.Emax:\n            return context._raise_error(InvalidOperation,\n                                        'exponent of quantize result too large for current context')\n        if self_adjusted - exp._exp + 1 > context.prec:\n            return context._raise_error(InvalidOperation,\n                                        'quantize result has too many digits for current context')\n        ans = self._rescale(exp._exp, rounding)\n        if ans.adjusted() > context.Emax:\n            return context._raise_error(InvalidOperation,\n                                        'exponent of quantize result too large for current context')\n        if len(ans._int) > context.prec:\n            return context._raise_error(InvalidOperation,\n                                        'quantize result has too many digits for current context')\n        if ans and ans.adjusted() < context.Emin:\n            context._raise_error(Subnormal)\n        if ans._exp > self._exp:\n            if ans != self:\n                context._raise_error(Inexact)\n            context._raise_error(Rounded)\n        ans = ans._fix(context)\n        return ans\n    def same_quantum(self, other, context=None):\n        \"\"\"Return True if self and other have the same exponent; otherwise\n        return False.\n        If either operand is a special value, the following rules are used:\n           * return True if both operands are infinities\n           * return True if both operands are NaNs\n           * otherwise, return False.\n        \"\"\"\n        other = _convert_other(other, raiseit=True)\n        if self._is_special or other._is_special:\n            return (self.is_nan() and other.is_nan() or\n                    self.is_infinite() and other.is_infinite())\n        return self._exp == other._exp\n    def _rescale(self, exp, rounding):\n        \"\"\"Rescale self so that the exponent is exp, either by padding with zeros\n        or by truncating digits, using the given rounding mode.\n        Specials are returned without change.  This operation is\n        quiet: it raises no flags, and uses no information from the\n        context.\n        exp = exp to scale to (an integer)\n        rounding = rounding mode\n        \"\"\"\n        if self._is_special:\n            return Decimal(self)\n        if not self:\n            return _dec_from_triple(self._sign, '0', exp)\n        if self._exp >= exp:\n            return _dec_from_triple(self._sign,\n                                        self._int + '0'*(self._exp - exp), exp)\n        digits = len(self._int) + self._exp - exp\n        if digits < 0:\n            self = _dec_from_triple(self._sign, '1', exp-1)\n            digits = 0\n        this_function = self._pick_rounding_function[rounding]\n        changed = this_function(self, digits)\n        coeff = self._int[:digits] or '0'\n        if changed == 1:\n            coeff = str(int(coeff)+1)\n        return _dec_from_triple(self._sign, coeff, exp)\n    def _round(self, places, rounding):\n        \"\"\"Round a nonzero, nonspecial Decimal to a fixed number of\n        significant figures, using the given rounding mode.\n        Infinities, NaNs and zeros are returned unaltered.\n        This operation is quiet: it raises no flags, and uses no\n        information from the context.\n        \"\"\"\n        if places <= 0:\n            raise ValueError(\"argument should be at least 1 in _round\")\n        if self._is_special or not self:\n            return Decimal(self)\n        ans = self._rescale(self.adjusted()+1-places, rounding)\n        if ans.adjusted() != self.adjusted():\n            ans = ans._rescale(ans.adjusted()+1-places, rounding)\n        return ans\n    def to_integral_exact(self, rounding=None, context=None):\n        \"\"\"Rounds to a nearby integer.\n        If no rounding mode is specified, take the rounding mode from\n        the context.  This method raises the Rounded and Inexact flags\n        when appropriate.\n        See also: to_integral_value, which does exactly the same as\n        this method except that it doesn't raise Inexact or Rounded.\n        \"\"\"\n        if self._is_special:\n            ans = self._check_nans(context=context)\n            if ans:\n                return ans\n            return Decimal(self)\n        if self._exp >= 0:\n            return Decimal(self)\n        if not self:\n            return _dec_from_triple(self._sign, '0', 0)\n        if context is None:\n            context = getcontext()\n        if rounding is None:\n            rounding = context.rounding\n        ans = self._rescale(0, rounding)\n        if ans != self:\n            context._raise_error(Inexact)\n        context._raise_error(Rounded)\n        return ans\n    def to_integral_value(self, rounding=None, context=None):\n        \"\"\"Rounds to the nearest integer, without raising inexact, rounded.\"\"\"\n        if context is None:\n            context = getcontext()\n        if rounding is None:\n            rounding = context.rounding\n        if self._is_special:\n            ans = self._check_nans(context=context)\n            if ans:\n                return ans\n            return Decimal(self)\n        if self._exp >= 0:\n            return Decimal(self)\n        else:\n            return self._rescale(0, rounding)\n    to_integral = to_integral_value\n    def sqrt(self, context=None):\n        \"\"\"Return the square root of self.\"\"\"\n        if context is None:\n            context = getcontext()\n        if self._is_special:\n            ans = self._check_nans(context=context)\n            if ans:\n                return ans\n            if self._isinfinity() and self._sign == 0:\n                return Decimal(self)\n        if not self:\n            ans = _dec_from_triple(self._sign, '0', self._exp // 2)\n            return ans._fix(context)\n        if self._sign == 1:\n            return context._raise_error(InvalidOperation, 'sqrt(-x), x > 0')\n        prec = context.prec+1\n        op = _WorkRep(self)\n        e = op.exp >> 1\n        if op.exp & 1:\n            c = op.int * 10\n            l = (len(self._int) >> 1) + 1\n        else:\n            c = op.int\n            l = len(self._int)+1 >> 1\n        shift = prec-l\n        if shift >= 0:\n            c *= 100**shift\n            exact = True\n        else:\n            c, remainder = divmod(c, 100**-shift)\n            exact = not remainder\n        e -= shift\n        n = 10**prec\n        while True:\n            q = c//n\n            if n <= q:\n                break\n            else:\n                n = n + q >> 1\n        exact = exact and n*n == c\n        if exact:\n            if shift >= 0:\n                n //= 10**shift\n            else:\n                n *= 10**-shift\n            e += shift\n        else:\n            if n % 5 == 0:\n                n += 1\n        ans = _dec_from_triple(0, str(n), e)\n        context = context._shallow_copy()\n        rounding = context._set_rounding(ROUND_HALF_EVEN)\n        ans = ans._fix(context)\n        context.rounding = rounding\n        return ans\n    def max(self, other, context=None):\n        \"\"\"Returns the larger value.\n        Like max(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        \"\"\"\n        other = _convert_other(other, raiseit=True)\n        if context is None:\n            context = getcontext()\n        if self._is_special or other._is_special:\n            sn = self._isnan()\n            on = other._isnan()\n            if sn or on:\n                if on == 1 and sn == 0:\n                    return self._fix(context)\n                if sn == 1 and on == 0:\n                    return other._fix(context)\n                return self._check_nans(other, context)\n        c = self._cmp(other)\n        if c == 0:\n            c = self.compare_total(other)\n        if c == -1:\n            ans = other\n        else:\n            ans = self\n        return ans._fix(context)\n    def min(self, other, context=None):\n        \"\"\"Returns the smaller value.\n        Like min(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        \"\"\"\n        other = _convert_other(other, raiseit=True)\n        if context is None:\n            context = getcontext()\n        if self._is_special or other._is_special:\n            sn = self._isnan()\n            on = other._isnan()\n            if sn or on:\n                if on == 1 and sn == 0:\n                    return self._fix(context)\n                if sn == 1 and on == 0:\n                    return other._fix(context)\n                return self._check_nans(other, context)\n        c = self._cmp(other)\n        if c == 0:\n            c = self.compare_total(other)\n        if c == -1:\n            ans = self\n        else:\n            ans = other\n        return ans._fix(context)\n    def _isinteger(self):\n        \"\"\"Returns whether self is an integer\"\"\"\n        if self._is_special:\n            return False\n        if self._exp >= 0:\n            return True\n        rest = self._int[self._exp:]\n        return rest == '0'*len(rest)\n    def _iseven(self):\n        \"\"\"Returns True if self is even.  Assumes self is an integer.\"\"\"\n        if not self or self._exp > 0:\n            return True\n        return self._int[-1+self._exp] in '02468'\n    def adjusted(self):\n        \"\"\"Return the adjusted exponent of self\"\"\"\n        try:\n            return self._exp + len(self._int) - 1\n        except TypeError:\n            return 0\n    def canonical(self):\n        \"\"\"Returns the same Decimal object.\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n        \"\"\"\n        return self\n    def compare_signal(self, other, context=None):\n        \"\"\"Compares self to the other operand numerically.\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n        \"\"\"\n        other = _convert_other(other, raiseit = True)\n        ans = self._compare_check_nans(other, context)\n        if ans:\n            return ans\n        return self.compare(other, context=context)\n    def compare_total(self, other, context=None):\n        \"\"\"Compares self to other using the abstract representations.\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n        \"\"\"\n        other = _convert_other(other, raiseit=True)\n        if self._sign and not other._sign:\n            return _NegativeOne\n        if not self._sign and other._sign:\n            return _One\n        sign = self._sign\n        self_nan = self._isnan()\n        other_nan = other._isnan()\n        if self_nan or other_nan:\n            if self_nan == other_nan:\n                self_key = len(self._int), self._int\n                other_key = len(other._int), other._int\n                if self_key < other_key:\n                    if sign:\n                        return _One\n                    else:\n                        return _NegativeOne\n                if self_key > other_key:\n                    if sign:\n                        return _NegativeOne\n                    else:\n                        return _One\n                return _Zero\n            if sign:\n                if self_nan == 1:\n                    return _NegativeOne\n                if other_nan == 1:\n                    return _One\n                if self_nan == 2:\n                    return _NegativeOne\n                if other_nan == 2:\n                    return _One\n            else:\n                if self_nan == 1:\n                    return _One\n                if other_nan == 1:\n                    return _NegativeOne\n                if self_nan == 2:\n                    return _One\n                if other_nan == 2:\n                    return _NegativeOne\n        if self < other:\n            return _NegativeOne\n        if self > other:\n            return _One\n        if self._exp < other._exp:\n            if sign:\n                return _One\n            else:\n                return _NegativeOne\n        if self._exp > other._exp:\n            if sign:\n                return _NegativeOne\n            else:\n                return _One\n        return _Zero\n    def compare_total_mag(self, other, context=None):\n        \"\"\"Compares self to other using abstract repr., ignoring sign.\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        \"\"\"\n        other = _convert_other(other, raiseit=True)\n        s = self.copy_abs()\n        o = other.copy_abs()\n        return s.compare_total(o)\n    def copy_abs(self):\n        \"\"\"Returns a copy with the sign set to 0. \"\"\"\n        return _dec_from_triple(0, self._int, self._exp, self._is_special)\n    def copy_negate(self):\n        \"\"\"Returns a copy with the sign inverted.\"\"\"\n        if self._sign:\n            return _dec_from_triple(0, self._int, self._exp, self._is_special)\n        else:\n            return _dec_from_triple(1, self._int, self._exp, self._is_special)\n    def copy_sign(self, other, context=None):\n        \"\"\"Returns self with the sign of other.\"\"\"\n        other = _convert_other(other, raiseit=True)\n        return _dec_from_triple(other._sign, self._int,\n                                self._exp, self._is_special)\n    def exp(self, context=None):\n        \"\"\"Returns e ** self.\"\"\"\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(context=context)\n        if ans:\n            return ans\n        if self._isinfinity() == -1:\n            return _Zero\n        if not self:\n            return _One\n        if self._isinfinity() == 1:\n            return Decimal(self)\n        p = context.prec\n        adj = self.adjusted()\n        if self._sign == 0 and adj > len(str((context.Emax+1)*3)):\n            ans = _dec_from_triple(0, '1', context.Emax+1)\n        elif self._sign == 1 and adj > len(str((-context.Etiny()+1)*3)):\n            ans = _dec_from_triple(0, '1', context.Etiny()-1)\n        elif self._sign == 0 and adj < -p:\n            ans = _dec_from_triple(0, '1' + '0'*(p-1) + '1', -p)\n        elif self._sign == 1 and adj < -p-1:\n            ans = _dec_from_triple(0, '9'*(p+1), -p-1)\n        else:\n            op = _WorkRep(self)\n            c, e = op.int, op.exp\n            if op.sign == 1:\n                c = -c\n            extra = 3\n            while True:\n                coeff, exp = _dexp(c, e, p+extra)\n                if coeff % (5*10**(len(str(coeff))-p-1)):\n                    break\n                extra += 3\n            ans = _dec_from_triple(0, str(coeff), exp)\n        context = context._shallow_copy()\n        rounding = context._set_rounding(ROUND_HALF_EVEN)\n        ans = ans._fix(context)\n        context.rounding = rounding\n        return ans\n    def is_canonical(self):\n        \"\"\"Return True if self is canonical; otherwise return False.\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n        \"\"\"\n        return True\n    def is_finite(self):\n        \"\"\"Return True if self is finite; otherwise return False.\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n        \"\"\"\n        return not self._is_special\n    def is_infinite(self):\n        \"\"\"Return True if self is infinite; otherwise return False.\"\"\"\n        return self._exp == 'F'\n    def is_nan(self):\n        \"\"\"Return True if self is a qNaN or sNaN; otherwise return False.\"\"\"\n        return self._exp in ('n', 'N')\n    def is_normal(self, context=None):\n        \"\"\"Return True if self is a normal number; otherwise return False.\"\"\"\n        if self._is_special or not self:\n            return False\n        if context is None:\n            context = getcontext()\n        return context.Emin <= self.adjusted()\n    def is_qnan(self):\n        \"\"\"Return True if self is a quiet NaN; otherwise return False.\"\"\"\n        return self._exp == 'n'\n    def is_signed(self):\n        \"\"\"Return True if self is negative; otherwise return False.\"\"\"\n        return self._sign == 1\n    def is_snan(self):\n        \"\"\"Return True if self is a signaling NaN; otherwise return False.\"\"\"\n        return self._exp == 'N'\n    def is_subnormal(self, context=None):\n        \"\"\"Return True if self is subnormal; otherwise return False.\"\"\"\n        if self._is_special or not self:\n            return False\n        if context is None:\n            context = getcontext()\n        return self.adjusted() < context.Emin\n    def is_zero(self):\n        \"\"\"Return True if self is a zero; otherwise return False.\"\"\"\n        return not self._is_special and self._int == '0'\n    def _ln_exp_bound(self):\n        \"\"\"Compute a lower bound for the adjusted exponent of self.ln().\n        In other words, compute r such that self.ln() >= 10**r.  Assumes\n        that self is finite and positive and that self != 1.\n        \"\"\"\n        adj = self._exp + len(self._int) - 1\n        if adj >= 1:\n            return len(str(adj*23//10)) - 1\n        if adj <= -2:\n            return len(str((-1-adj)*23//10)) - 1\n        op = _WorkRep(self)\n        c, e = op.int, op.exp\n        if adj == 0:\n            num = str(c-10**-e)\n            den = str(c)\n            return len(num) - len(den) - (num < den)\n        return e + len(str(10**-e - c)) - 1\n    def ln(self, context=None):\n        \"\"\"Returns the natural (base e) logarithm of self.\"\"\"\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(context=context)\n        if ans:\n            return ans\n        if not self:\n            return _NegativeInfinity\n        if self._isinfinity() == 1:\n            return _Infinity\n        if self == _One:\n            return _Zero\n        if self._sign == 1:\n            return context._raise_error(InvalidOperation,\n                                        'ln of a negative value')\n        op = _WorkRep(self)\n        c, e = op.int, op.exp\n        p = context.prec\n        places = p - self._ln_exp_bound() + 2 # at least p+3 places\n        while True:\n            coeff = _dlog(c, e, places)\n            if coeff % (5*10**(len(str(abs(coeff)))-p-1)):\n                break\n            places += 3\n        ans = _dec_from_triple(int(coeff<0), str(abs(coeff)), -places)\n        context = context._shallow_copy()\n        rounding = context._set_rounding(ROUND_HALF_EVEN)\n        ans = ans._fix(context)\n        context.rounding = rounding\n        return ans\n    def _log10_exp_bound(self):\n        \"\"\"Compute a lower bound for the adjusted exponent of self.log10().\n        In other words, find r such that self.log10() >= 10**r.\n        Assumes that self is finite and positive and that self != 1.\n        \"\"\"\n        adj = self._exp + len(self._int) - 1\n        if adj >= 1:\n            return len(str(adj))-1\n        if adj <= -2:\n            return len(str(-1-adj))-1\n        op = _WorkRep(self)\n        c, e = op.int, op.exp\n        if adj == 0:\n            num = str(c-10**-e)\n            den = str(231*c)\n            return len(num) - len(den) - (num < den) + 2\n        num = str(10**-e-c)\n        return len(num) + e - (num < \"231\") - 1\n    def log10(self, context=None):\n        \"\"\"Returns the base 10 logarithm of self.\"\"\"\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(context=context)\n        if ans:\n            return ans\n        if not self:\n            return _NegativeInfinity\n        if self._isinfinity() == 1:\n            return _Infinity\n        if self._sign == 1:\n            return context._raise_error(InvalidOperation,\n                                        'log10 of a negative value')\n        if self._int[0] == '1' and self._int[1:] == '0'*(len(self._int) - 1):\n            ans = Decimal(self._exp + len(self._int) - 1)\n        else:\n            op = _WorkRep(self)\n            c, e = op.int, op.exp\n            p = context.prec\n            places = p-self._log10_exp_bound()+2\n            while True:\n                coeff = _dlog10(c, e, places)\n                if coeff % (5*10**(len(str(abs(coeff)))-p-1)):\n                    break\n                places += 3\n            ans = _dec_from_triple(int(coeff<0), str(abs(coeff)), -places)\n        context = context._shallow_copy()\n        rounding = context._set_rounding(ROUND_HALF_EVEN)\n        ans = ans._fix(context)\n        context.rounding = rounding\n        return ans\n    def logb(self, context=None):\n        \"\"\" Returns the exponent of the magnitude of self's MSD.\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of self (as though it were truncated\n        to a single digit while maintaining the value of that digit and\n        without limiting the resulting exponent).\n        \"\"\"\n        ans = self._check_nans(context=context)\n        if ans:\n            return ans\n        if context is None:\n            context = getcontext()\n        if self._isinfinity():\n            return _Infinity\n        if not self:\n            return context._raise_error(DivisionByZero, 'logb(0)', 1)\n        ans = Decimal(self.adjusted())\n        return ans._fix(context)\n    def _islogical(self):\n        \"\"\"Return True if self is a logical operand.\n        For being logical, it must be a finite number with a sign of 0,\n        an exponent of 0, and a coefficient whose digits must all be\n        either 0 or 1.\n        \"\"\"\n        if self._sign != 0 or self._exp != 0:\n            return False\n        for dig in self._int:\n            if dig not in '01':\n                return False\n        return True\n    def _fill_logical(self, context, opa, opb):\n        dif = context.prec - len(opa)\n        if dif > 0:\n            opa = '0'*dif + opa\n        elif dif < 0:\n            opa = opa[-context.prec:]\n        dif = context.prec - len(opb)\n        if dif > 0:\n            opb = '0'*dif + opb\n        elif dif < 0:\n            opb = opb[-context.prec:]\n        return opa, opb\n    def logical_and(self, other, context=None):\n        \"\"\"Applies an 'and' operation between self and other's digits.\"\"\"\n        if context is None:\n            context = getcontext()\n        other = _convert_other(other, raiseit=True)\n        if not self._islogical() or not other._islogical():\n            return context._raise_error(InvalidOperation)\n        (opa, opb) = self._fill_logical(context, self._int, other._int)\n        result = \"\".join([str(int(a)&int(b)) for a,b in zip(opa,opb)])\n        return _dec_from_triple(0, result.lstrip('0') or '0', 0)\n    def logical_invert(self, context=None):\n        \"\"\"Invert all its digits.\"\"\"\n        if context is None:\n            context = getcontext()\n        return self.logical_xor(_dec_from_triple(0,'1'*context.prec,0),\n                                context)\n    def logical_or(self, other, context=None):\n        \"\"\"Applies an 'or' operation between self and other's digits.\"\"\"\n        if context is None:\n            context = getcontext()\n        other = _convert_other(other, raiseit=True)\n        if not self._islogical() or not other._islogical():\n            return context._raise_error(InvalidOperation)\n        (opa, opb) = self._fill_logical(context, self._int, other._int)\n        result = \"\".join([str(int(a)|int(b)) for a,b in zip(opa,opb)])\n        return _dec_from_triple(0, result.lstrip('0') or '0', 0)\n    def logical_xor(self, other, context=None):\n        \"\"\"Applies an 'xor' operation between self and other's digits.\"\"\"\n        if context is None:\n            context = getcontext()\n        other = _convert_other(other, raiseit=True)\n        if not self._islogical() or not other._islogical():\n            return context._raise_error(InvalidOperation)\n        (opa, opb) = self._fill_logical(context, self._int, other._int)\n        result = \"\".join([str(int(a)^int(b)) for a,b in zip(opa,opb)])\n        return _dec_from_triple(0, result.lstrip('0') or '0', 0)\n    def max_mag(self, other, context=None):\n        \"\"\"Compares the values numerically with their sign ignored.\"\"\"\n        other = _convert_other(other, raiseit=True)\n        if context is None:\n            context = getcontext()\n        if self._is_special or other._is_special:\n            sn = self._isnan()\n            on = other._isnan()\n            if sn or on:\n                if on == 1 and sn == 0:\n                    return self._fix(context)\n                if sn == 1 and on == 0:\n                    return other._fix(context)\n                return self._check_nans(other, context)\n        c = self.copy_abs()._cmp(other.copy_abs())\n        if c == 0:\n            c = self.compare_total(other)\n        if c == -1:\n            ans = other\n        else:\n            ans = self\n        return ans._fix(context)\n    def min_mag(self, other, context=None):\n        \"\"\"Compares the values numerically with their sign ignored.\"\"\"\n        other = _convert_other(other, raiseit=True)\n        if context is None:\n            context = getcontext()\n        if self._is_special or other._is_special:\n            sn = self._isnan()\n            on = other._isnan()\n            if sn or on:\n                if on == 1 and sn == 0:\n                    return self._fix(context)\n                if sn == 1 and on == 0:\n                    return other._fix(context)\n                return self._check_nans(other, context)\n        c = self.copy_abs()._cmp(other.copy_abs())\n        if c == 0:\n            c = self.compare_total(other)\n        if c == -1:\n            ans = self\n        else:\n            ans = other\n        return ans._fix(context)\n    def next_minus(self, context=None):\n        \"\"\"Returns the largest representable number smaller than itself.\"\"\"\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(context=context)\n        if ans:\n            return ans\n        if self._isinfinity() == -1:\n            return _NegativeInfinity\n        if self._isinfinity() == 1:\n            return _dec_from_triple(0, '9'*context.prec, context.Etop())\n        context = context.copy()\n        context._set_rounding(ROUND_FLOOR)\n        context._ignore_all_flags()\n        new_self = self._fix(context)\n        if new_self != self:\n            return new_self\n        return self.__sub__(_dec_from_triple(0, '1', context.Etiny()-1),\n                            context)\n    def next_plus(self, context=None):\n        \"\"\"Returns the smallest representable number larger than itself.\"\"\"\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(context=context)\n        if ans:\n            return ans\n        if self._isinfinity() == 1:\n            return _Infinity\n        if self._isinfinity() == -1:\n            return _dec_from_triple(1, '9'*context.prec, context.Etop())\n        context = context.copy()\n        context._set_rounding(ROUND_CEILING)\n        context._ignore_all_flags()\n        new_self = self._fix(context)\n        if new_self != self:\n            return new_self\n        return self.__add__(_dec_from_triple(0, '1', context.Etiny()-1),\n                            context)\n    def next_toward(self, other, context=None):\n        \"\"\"Returns the number closest to self, in the direction towards other.\n        The result is the closest representable number to self\n        (excluding self) that is in the direction towards other,\n        unless both have the same value.  If the two operands are\n        numerically equal, then the result is a copy of self with the\n        sign set to be the same as the sign of other.\n        \"\"\"\n        other = _convert_other(other, raiseit=True)\n        if context is None:\n            context = getcontext()\n        ans = self._check_nans(other, context)\n        if ans:\n            return ans\n        comparison = self._cmp(other)\n        if comparison == 0:\n            return self.copy_sign(other)\n        if comparison == -1:\n            ans = self.next_plus(context)\n        else: # comparison == 1\n            ans = self.next_minus(context)\n        if ans._isinfinity():\n            context._raise_error(Overflow,\n                                 'Infinite result from next_toward',\n                                 ans._sign)\n            context._raise_error(Inexact)\n            context._raise_error(Rounded)\n        elif ans.adjusted() < context.Emin:\n            context._raise_error(Underflow)\n            context._raise_error(Subnormal)\n            context._raise_error(Inexact)\n            context._raise_error(Rounded)\n            if not ans:\n                context._raise_error(Clamped)\n        return ans\n    def number_class(self, context=None):\n        \"\"\"Returns an indication of the class of self.\n        The class is one of the following strings:\n          sNaN\n          NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n        \"\"\"\n        if self.is_snan():\n            return \"sNaN\"\n        if self.is_qnan():\n            return \"NaN\"\n        inf = self._isinfinity()\n        if inf == 1:\n            return \"+Infinity\"\n        if inf == -1:\n            return \"-Infinity\"\n        if self.is_zero():\n            if self._sign:\n                return \"-Zero\"\n            else:\n                return \"+Zero\"\n        if context is None:\n            context = getcontext()\n        if self.is_subnormal(context=context):\n            if self._sign:\n                return \"-Subnormal\"\n            else:\n                return \"+Subnormal\"\n        if self._sign:\n            return \"-Normal\"\n        else:\n            return \"+Normal\"\n    def radix(self):\n        \"\"\"Just returns 10, as this is Decimal, :)\"\"\"\n        return Decimal(10)\n    def rotate(self, other, context=None):\n        \"\"\"Returns a rotated copy of self, value-of-other times.\"\"\"\n        if context is None:\n            context = getcontext()\n        other = _convert_other(other, raiseit=True)\n        ans = self._check_nans(other, context)\n        if ans:\n            return ans\n        if other._exp != 0:\n            return context._raise_error(InvalidOperation)\n        if not (-context.prec <= int(other) <= context.prec):\n            return context._raise_error(InvalidOperation)\n        if self._isinfinity():\n            return Decimal(self)\n        torot = int(other)\n        rotdig = self._int\n        topad = context.prec - len(rotdig)\n        if topad > 0:\n            rotdig = '0'*topad + rotdig\n        elif topad < 0:\n            rotdig = rotdig[-topad:]\n        rotated = rotdig[torot:] + rotdig[:torot]\n        return _dec_from_triple(self._sign,\n                                rotated.lstrip('0') or '0', self._exp)\n    def scaleb(self, other, context=None):\n        \"\"\"Returns self operand after adding the second value to its exp.\"\"\"\n        if context is None:\n            context = getcontext()\n        other = _convert_other(other, raiseit=True)\n        ans = self._check_nans(other, context)\n        if ans:\n            return ans\n        if other._exp != 0:\n            return context._raise_error(InvalidOperation)\n        liminf = -2 * (context.Emax + context.prec)\n        limsup =  2 * (context.Emax + context.prec)\n        if not (liminf <= int(other) <= limsup):\n            return context._raise_error(InvalidOperation)\n        if self._isinfinity():\n            return Decimal(self)\n        d = _dec_from_triple(self._sign, self._int, self._exp + int(other))\n        d = d._fix(context)\n        return d\n    def shift(self, other, context=None):\n        \"\"\"Returns a shifted copy of self, value-of-other times.\"\"\"\n        if context is None:\n            context = getcontext()\n        other = _convert_other(other, raiseit=True)\n        ans = self._check_nans(other, context)\n        if ans:\n            return ans\n        if other._exp != 0:\n            return context._raise_error(InvalidOperation)\n        if not (-context.prec <= int(other) <= context.prec):\n            return context._raise_error(InvalidOperation)\n        if self._isinfinity():\n            return Decimal(self)\n        torot = int(other)\n        rotdig = self._int\n        topad = context.prec - len(rotdig)\n        if topad > 0:\n            rotdig = '0'*topad + rotdig\n        elif topad < 0:\n            rotdig = rotdig[-topad:]\n        if torot < 0:\n            shifted = rotdig[:torot]\n        else:\n            shifted = rotdig + '0'*torot\n            shifted = shifted[-context.prec:]\n        return _dec_from_triple(self._sign,\n                                    shifted.lstrip('0') or '0', self._exp)\n    def __reduce__(self):\n        return (self.__class__, (str(self),))\n    def __copy__(self):\n        if type(self) is Decimal:\n            return self     # I'm immutable; therefore I am my own clone\n        return self.__class__(str(self))\n    def __deepcopy__(self, memo):\n        if type(self) is Decimal:\n            return self     # My components are also immutable\n        return self.__class__(str(self))\n    def __format__(self, specifier, context=None, _localeconv=None):\n        \"\"\"Format a Decimal instance according to the given specifier.\n        The specifier should be a standard format specifier, with the\n        form described in PEP 3101.  Formatting types 'e', 'E', 'f',\n        'F', 'g', 'G', 'n' and '%' are supported.  If the formatting\n        type is omitted it defaults to 'g' or 'G', depending on the\n        value of context.capitals.\n        \"\"\"\n        if context is None:\n            context = getcontext()\n        spec = _parse_format_specifier(specifier, _localeconv=_localeconv)\n        if self._is_special:\n            sign = _format_sign(self._sign, spec)\n            body = str(self.copy_abs())\n            return _format_align(sign, body, spec)\n        if spec['type'] is None:\n            spec['type'] = ['g', 'G'][context.capitals]\n        if spec['type'] == '%':\n            self = _dec_from_triple(self._sign, self._int, self._exp+2)\n        rounding = context.rounding\n        precision = spec['precision']\n        if precision is not None:\n            if spec['type'] in 'eE':\n                self = self._round(precision+1, rounding)\n            elif spec['type'] in 'fF%':\n                self = self._rescale(-precision, rounding)\n            elif spec['type'] in 'gG' and len(self._int) > precision:\n                self = self._round(precision, rounding)\n        if not self and self._exp > 0 and spec['type'] in 'fF%':\n            self = self._rescale(0, rounding)\n        leftdigits = self._exp + len(self._int)\n        if spec['type'] in 'eE':\n            if not self and precision is not None:\n                dotplace = 1 - precision\n            else:\n                dotplace = 1\n        elif spec['type'] in 'fF%':\n            dotplace = leftdigits\n        elif spec['type'] in 'gG':\n            if self._exp <= 0 and leftdigits > -6:\n                dotplace = leftdigits\n            else:\n                dotplace = 1\n        if dotplace < 0:\n            intpart = '0'\n            fracpart = '0'*(-dotplace) + self._int\n        elif dotplace > len(self._int):\n            intpart = self._int + '0'*(dotplace-len(self._int))\n            fracpart = ''\n        else:\n            intpart = self._int[:dotplace] or '0'\n            fracpart = self._int[dotplace:]\n        exp = leftdigits-dotplace\n        return _format_number(self._sign, intpart, fracpart, exp, spec)\ndef _dec_from_triple(sign, coefficient, exponent, special=False):\n    \"\"\"Create a decimal instance directly, without any validation,\n    normalization (e.g. removal of leading zeros) or argument\n    conversion.\n    This function is for *internal use only*.\n    \"\"\"\n    self = object.__new__(Decimal)\n    self._sign = sign\n    self._int = coefficient\n    self._exp = exponent\n    self._is_special = special\n    return self\n_numbers.Number.register(Decimal)\nclass _ContextManager(object):\n    \"\"\"Context manager class to support localcontext().\n      Sets a copy of the supplied context in __enter__() and restores\n      the previous decimal context in __exit__()\n    \"\"\"\n    def __init__(self, new_context):\n        self.new_context = new_context.copy()\n    def __enter__(self):\n        self.saved_context = getcontext()\n        setcontext(self.new_context)\n        return self.new_context\n    def __exit__(self, t, v, tb):\n        setcontext(self.saved_context)\nclass Context(object):\n    \"\"\"Contains the context for a Decimal instance.\n    Contains:\n    prec - precision (for use in rounding, division, square roots..)\n    rounding - rounding type (how you round)\n    traps - If traps[exception] = 1, then the exception is\n                    raised when it is caused.  Otherwise, a value is\n                    substituted in.\n    flags  - When an exception is caused, flags[exception] is set.\n             (Whether or not the trap_enabler is set)\n             Should be reset by user of Decimal instance.\n    Emin -   Minimum exponent\n    Emax -   Maximum exponent\n    capitals -      If 1, 1*10^1 is printed as 1E+1.\n                    If 0, printed as 1e1\n    clamp -  If 1, change exponents if too high (Default 0)\n    \"\"\"\n    def __init__(self, prec=None, rounding=None, Emin=None, Emax=None,\n                       capitals=None, clamp=None, flags=None, traps=None,\n                       _ignored_flags=None):\n        try:\n            dc = DefaultContext\n        except NameError:\n            pass\n        self.prec = prec if prec is not None else dc.prec\n        self.rounding = rounding if rounding is not None else dc.rounding\n        self.Emin = Emin if Emin is not None else dc.Emin\n        self.Emax = Emax if Emax is not None else dc.Emax\n        self.capitals = capitals if capitals is not None else dc.capitals\n        self.clamp = clamp if clamp is not None else dc.clamp\n        if _ignored_flags is None:\n            self._ignored_flags = []\n        else:\n            self._ignored_flags = _ignored_flags\n        if traps is None:\n            self.traps = dc.traps.copy()\n        elif not isinstance(traps, dict):\n            self.traps = dict((s, int(s in traps)) for s in _signals + traps)\n        else:\n            self.traps = traps\n        if flags is None:\n            self.flags = dict.fromkeys(_signals, 0)\n        elif not isinstance(flags, dict):\n            self.flags = dict((s, int(s in flags)) for s in _signals + flags)\n        else:\n            self.flags = flags\n    def _set_integer_check(self, name, value, vmin, vmax):\n        if not isinstance(value, int):\n            raise TypeError(\"%s must be an integer\" % name)\n        if vmin == '-inf':\n            if value > vmax:\n                raise ValueError(\"%s must be in [%s, %d]. got: %s\" % (name, vmin, vmax, value))\n        elif vmax == 'inf':\n            if value < vmin:\n                raise ValueError(\"%s must be in [%d, %s]. got: %s\" % (name, vmin, vmax, value))\n        else:\n            if value < vmin or value > vmax:\n                raise ValueError(\"%s must be in [%d, %d]. got %s\" % (name, vmin, vmax, value))\n        return object.__setattr__(self, name, value)\n    def _set_signal_dict(self, name, d):\n        if not isinstance(d, dict):\n            raise TypeError(\"%s must be a signal dict\" % d)\n        for key in d:\n            if not key in _signals:\n                raise KeyError(\"%s is not a valid signal dict\" % d)\n        for key in _signals:\n            if not key in d:\n                raise KeyError(\"%s is not a valid signal dict\" % d)\n        return object.__setattr__(self, name, d)\n    def __setattr__(self, name, value):\n        if name == 'prec':\n            return self._set_integer_check(name, value, 1, 'inf')\n        elif name == 'Emin':\n            return self._set_integer_check(name, value, '-inf', 0)\n        elif name == 'Emax':\n            return self._set_integer_check(name, value, 0, 'inf')\n        elif name == 'capitals':\n            return self._set_integer_check(name, value, 0, 1)\n        elif name == 'clamp':\n            return self._set_integer_check(name, value, 0, 1)\n        elif name == 'rounding':\n            if not value in _rounding_modes:\n                raise TypeError(\"%s: invalid rounding mode\" % value)\n            return object.__setattr__(self, name, value)\n        elif name == 'flags' or name == 'traps':\n            return self._set_signal_dict(name, value)\n        elif name == '_ignored_flags':\n            return object.__setattr__(self, name, value)\n        else:\n            raise AttributeError(\n                \"'decimal.Context' object has no attribute '%s'\" % name)\n    def __delattr__(self, name):\n        raise AttributeError(\"%s cannot be deleted\" % name)\n    def __reduce__(self):\n        flags = [sig for sig, v in self.flags.items() if v]\n        traps = [sig for sig, v in self.traps.items() if v]\n        return (self.__class__,\n                (self.prec, self.rounding, self.Emin, self.Emax,\n                 self.capitals, self.clamp, flags, traps))\n    def __repr__(self):\n        \"\"\"Show the current context.\"\"\"\n        s = []\n        s.append('Context(prec=%(prec)d, rounding=%(rounding)s, '\n                 'Emin=%(Emin)d, Emax=%(Emax)d, capitals=%(capitals)d, '\n                 'clamp=%(clamp)d'\n                 % vars(self))\n        names = [f.__name__ for f, v in self.flags.items() if v]\n        s.append('flags=[' + ', '.join(names) + ']')\n        names = [t.__name__ for t, v in self.traps.items() if v]\n        s.append('traps=[' + ', '.join(names) + ']')\n        return ', '.join(s) + ')'\n    def clear_flags(self):\n        \"\"\"Reset all flags to zero\"\"\"\n        for flag in self.flags:\n            self.flags[flag] = 0\n    def clear_traps(self):\n        \"\"\"Reset all traps to zero\"\"\"\n        for flag in self.traps:\n            self.traps[flag] = 0\n    def _shallow_copy(self):\n        \"\"\"Returns a shallow copy from self.\"\"\"\n        nc = Context(self.prec, self.rounding, self.Emin, self.Emax,\n                     self.capitals, self.clamp, self.flags, self.traps,\n                     self._ignored_flags)\n        return nc\n    def copy(self):\n        \"\"\"Returns a deep copy from self.\"\"\"\n        nc = Context(self.prec, self.rounding, self.Emin, self.Emax,\n                     self.capitals, self.clamp,\n                     self.flags.copy(), self.traps.copy(),\n                     self._ignored_flags)\n        return nc\n    __copy__ = copy\n    def _raise_error(self, condition, explanation = None, *args):\n        \"\"\"Handles an error\n        If the flag is in _ignored_flags, returns the default response.\n        Otherwise, it sets the flag, then, if the corresponding\n        trap_enabler is set, it reraises the exception.  Otherwise, it returns\n        the default value after setting the flag.\n        \"\"\"\n        error = _condition_map.get(condition, condition)\n        if error in self._ignored_flags:\n            return error().handle(self, *args)\n        self.flags[error] = 1\n        if not self.traps[error]:\n            return condition().handle(self, *args)\n        raise error(explanation)\n    def _ignore_all_flags(self):\n        \"\"\"Ignore all flags, if they are raised\"\"\"\n        return self._ignore_flags(*_signals)\n    def _ignore_flags(self, *flags):\n        \"\"\"Ignore the flags, if they are raised\"\"\"\n        self._ignored_flags = (self._ignored_flags + list(flags))\n        return list(flags)\n    def _regard_flags(self, *flags):\n        \"\"\"Stop ignoring the flags, if they are raised\"\"\"\n        if flags and isinstance(flags[0], (tuple,list)):\n            flags = flags[0]\n        for flag in flags:\n            self._ignored_flags.remove(flag)\n    __hash__ = None\n    def Etiny(self):\n        \"\"\"Returns Etiny (= Emin - prec + 1)\"\"\"\n        return int(self.Emin - self.prec + 1)\n    def Etop(self):\n        \"\"\"Returns maximum exponent (= Emax - prec + 1)\"\"\"\n        return int(self.Emax - self.prec + 1)\n    def _set_rounding(self, type):\n        \"\"\"Sets the rounding type.\n        Sets the rounding type, and returns the current (previous)\n        rounding type.  Often used like:\n        context = context.copy()\n        rounding = context._set_rounding(ROUND_UP)\n        val = self.__sub__(other, context=context)\n        context._set_rounding(rounding)\n        This will make it round up for that operation.\n        \"\"\"\n        rounding = self.rounding\n        self.rounding= type\n        return rounding\n    def create_decimal(self, num='0'):\n        \"\"\"Creates a new Decimal instance but using self as context.\n        This method implements the to-number operation of the\n        IBM Decimal specification.\"\"\"\n        if isinstance(num, str) and num != num.strip():\n            return self._raise_error(ConversionSyntax,\n                                     \"no trailing or leading whitespace is \"\n                                     \"permitted.\")\n        d = Decimal(num, context=self)\n        if d._isnan() and len(d._int) > self.prec - self.clamp:\n            return self._raise_error(ConversionSyntax,\n                                     \"diagnostic info too long in NaN\")\n        return d._fix(self)\n    def create_decimal_from_float(self, f):\n        \"\"\"Creates a new Decimal instance from a float but rounding using self\n        as the context.\n        >>> context = Context(prec=5, rounding=ROUND_DOWN)\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Decimal('3.1415')\n        >>> context = Context(prec=5, traps=[Inexact])\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Traceback (most recent call last):\n            ...\n        decimal.Inexact: None\n        \"\"\"\n        d = Decimal.from_float(f)       # An exact conversion\n        return d._fix(self)             # Apply the context rounding\n    def abs(self, a):\n        \"\"\"Returns the absolute value of the operand.\n        If the operand is negative, the result is the same as using the minus\n        operation on the operand.  Otherwise, the result is the same as using\n        the plus operation on the operand.\n        >>> ExtendedContext.abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.abs(Decimal('101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(-1)\n        Decimal('1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.__abs__(context=self)\n    def add(self, a, b):\n        \"\"\"Return the sum of the two operands.\n        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))\n        Decimal('19.00')\n        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))\n        Decimal('1.02E+4')\n        >>> ExtendedContext.add(1, Decimal(2))\n        Decimal('3')\n        >>> ExtendedContext.add(Decimal(8), 5)\n        Decimal('13')\n        >>> ExtendedContext.add(5, 5)\n        Decimal('10')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        r = a.__add__(b, context=self)\n        if r is NotImplemented:\n            raise TypeError(\"Unable to convert %s to Decimal\" % b)\n        else:\n            return r\n    def _apply(self, a):\n        return str(a._fix(self))\n    def canonical(self, a):\n        \"\"\"Returns the same Decimal object.\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n        >>> ExtendedContext.canonical(Decimal('2.50'))\n        Decimal('2.50')\n        \"\"\"\n        if not isinstance(a, Decimal):\n            raise TypeError(\"canonical requires a Decimal as an argument.\")\n        return a.canonical()\n    def compare(self, a, b):\n        \"\"\"Compares values numerically.\n        If the signs of the operands differ, a value representing each operand\n        ('-1' if the operand is less than zero, '0' if the operand is zero or\n        negative zero, or '1' if the operand is greater than zero) is used in\n        place of that operand for the comparison instead of the actual\n        operand.\n        The comparison is then effected by subtracting the second operand from\n        the first and then returning a value according to the result of the\n        subtraction: '-1' if the result is less than zero, '0' if the result is\n        zero or negative zero, or '1' if the result is greater than zero.\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, Decimal(2))\n        Decimal('-1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.compare(b, context=self)\n    def compare_signal(self, a, b):\n        \"\"\"Compares the values of the two operands numerically.\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n        >>> c = ExtendedContext\n        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> c.flags[InvalidOperation] = 0\n        >>> print(c.flags[InvalidOperation])\n        0\n        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print(c.flags[InvalidOperation])\n        1\n        >>> c.flags[InvalidOperation] = 0\n        >>> print(c.flags[InvalidOperation])\n        0\n        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print(c.flags[InvalidOperation])\n        1\n        >>> c.compare_signal(-1, 2)\n        Decimal('-1')\n        >>> c.compare_signal(Decimal(-1), 2)\n        Decimal('-1')\n        >>> c.compare_signal(-1, Decimal(2))\n        Decimal('-1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.compare_signal(b, context=self)\n    def compare_total(self, a, b):\n        \"\"\"Compares two operands using their abstract representation.\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))\n        Decimal('0')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))\n        Decimal('1')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, Decimal(2))\n        Decimal('-1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.compare_total(b)\n    def compare_total_mag(self, a, b):\n        \"\"\"Compares two operands using their abstract representation ignoring sign.\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.compare_total_mag(b)\n    def copy_abs(self, a):\n        \"\"\"Returns a copy of the operand with the sign set to 0.\n        >>> ExtendedContext.copy_abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.copy_abs(-1)\n        Decimal('1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.copy_abs()\n    def copy_decimal(self, a):\n        \"\"\"Returns a copy of the decimal object.\n        >>> ExtendedContext.copy_decimal(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))\n        Decimal('-1.00')\n        >>> ExtendedContext.copy_decimal(1)\n        Decimal('1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return Decimal(a)\n    def copy_negate(self, a):\n        \"\"\"Returns a copy of the operand with the sign inverted.\n        >>> ExtendedContext.copy_negate(Decimal('101.5'))\n        Decimal('-101.5')\n        >>> ExtendedContext.copy_negate(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.copy_negate(1)\n        Decimal('-1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.copy_negate()\n    def copy_sign(self, a, b):\n        \"\"\"Copies the second operand's sign to the first one.\n        In detail, it returns a copy of the first operand with the sign\n        equal to the sign of the second operand.\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(1, -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(Decimal(1), -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(1, Decimal(-2))\n        Decimal('-1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.copy_sign(b)\n    def divide(self, a, b):\n        \"\"\"Decimal division in a specified context.\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))\n        Decimal('0.333333333')\n        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))\n        Decimal('0.666666667')\n        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))\n        Decimal('2.5')\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))\n        Decimal('0.1')\n        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))\n        Decimal('4.00')\n        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))\n        Decimal('1.20')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))\n        Decimal('1000')\n        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))\n        Decimal('1.20E+6')\n        >>> ExtendedContext.divide(5, 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal(5), 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(5, Decimal(5))\n        Decimal('1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        r = a.__truediv__(b, context=self)\n        if r is NotImplemented:\n            raise TypeError(\"Unable to convert %s to Decimal\" % b)\n        else:\n            return r\n    def divide_int(self, a, b):\n        \"\"\"Divides two numbers and returns the integer part of the result.\n        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))\n        Decimal('0')\n        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal(10), 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, Decimal(3))\n        Decimal('3')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        r = a.__floordiv__(b, context=self)\n        if r is NotImplemented:\n            raise TypeError(\"Unable to convert %s to Decimal\" % b)\n        else:\n            return r\n    def divmod(self, a, b):\n        \"\"\"Return (a // b, a % b).\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))\n        (Decimal('2'), Decimal('2'))\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(Decimal(8), 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        r = a.__divmod__(b, context=self)\n        if r is NotImplemented:\n            raise TypeError(\"Unable to convert %s to Decimal\" % b)\n        else:\n            return r\n    def exp(self, a):\n        \"\"\"Returns e ** a.\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.exp(Decimal('-Infinity'))\n        Decimal('0')\n        >>> c.exp(Decimal('-1'))\n        Decimal('0.367879441')\n        >>> c.exp(Decimal('0'))\n        Decimal('1')\n        >>> c.exp(Decimal('1'))\n        Decimal('2.71828183')\n        >>> c.exp(Decimal('0.693147181'))\n        Decimal('2.00000000')\n        >>> c.exp(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.exp(10)\n        Decimal('22026.4658')\n        \"\"\"\n        a =_convert_other(a, raiseit=True)\n        return a.exp(context=self)\n    def fma(self, a, b, c):\n        \"\"\"Returns a multiplied by b, plus c.\n        The first two operands are multiplied together, using multiply,\n        the third operand is then added to the result of that\n        multiplication, using add, all with only one final rounding.\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))\n        Decimal('22')\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))\n        Decimal('-8')\n        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))\n        Decimal('1.38435736E+12')\n        >>> ExtendedContext.fma(1, 3, 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, Decimal(3), 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, 3, Decimal(4))\n        Decimal('7')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.fma(b, c, context=self)\n    def is_canonical(self, a):\n        \"\"\"Return True if the operand is canonical; otherwise return False.\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n        >>> ExtendedContext.is_canonical(Decimal('2.50'))\n        True\n        \"\"\"\n        if not isinstance(a, Decimal):\n            raise TypeError(\"is_canonical requires a Decimal as an argument.\")\n        return a.is_canonical()\n    def is_finite(self, a):\n        \"\"\"Return True if the operand is finite; otherwise return False.\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n        >>> ExtendedContext.is_finite(Decimal('2.50'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('-0.3'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('0'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('Inf'))\n        False\n        >>> ExtendedContext.is_finite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_finite(1)\n        True\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.is_finite()\n    def is_infinite(self, a):\n        \"\"\"Return True if the operand is infinite; otherwise return False.\n        >>> ExtendedContext.is_infinite(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_infinite(Decimal('-Inf'))\n        True\n        >>> ExtendedContext.is_infinite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_infinite(1)\n        False\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.is_infinite()\n    def is_nan(self, a):\n        \"\"\"Return True if the operand is a qNaN or sNaN;\n        otherwise return False.\n        >>> ExtendedContext.is_nan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_nan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_nan(Decimal('-sNaN'))\n        True\n        >>> ExtendedContext.is_nan(1)\n        False\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.is_nan()\n    def is_normal(self, a):\n        \"\"\"Return True if the operand is a normal number;\n        otherwise return False.\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_normal(Decimal('2.50'))\n        True\n        >>> c.is_normal(Decimal('0.1E-999'))\n        False\n        >>> c.is_normal(Decimal('0.00'))\n        False\n        >>> c.is_normal(Decimal('-Inf'))\n        False\n        >>> c.is_normal(Decimal('NaN'))\n        False\n        >>> c.is_normal(1)\n        True\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.is_normal(context=self)\n    def is_qnan(self, a):\n        \"\"\"Return True if the operand is a quiet NaN; otherwise return False.\n        >>> ExtendedContext.is_qnan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_qnan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_qnan(Decimal('sNaN'))\n        False\n        >>> ExtendedContext.is_qnan(1)\n        False\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.is_qnan()\n    def is_signed(self, a):\n        \"\"\"Return True if the operand is negative; otherwise return False.\n        >>> ExtendedContext.is_signed(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_signed(Decimal('-12'))\n        True\n        >>> ExtendedContext.is_signed(Decimal('-0'))\n        True\n        >>> ExtendedContext.is_signed(8)\n        False\n        >>> ExtendedContext.is_signed(-8)\n        True\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.is_signed()\n    def is_snan(self, a):\n        \"\"\"Return True if the operand is a signaling NaN;\n        otherwise return False.\n        >>> ExtendedContext.is_snan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('sNaN'))\n        True\n        >>> ExtendedContext.is_snan(1)\n        False\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.is_snan()\n    def is_subnormal(self, a):\n        \"\"\"Return True if the operand is subnormal; otherwise return False.\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_subnormal(Decimal('2.50'))\n        False\n        >>> c.is_subnormal(Decimal('0.1E-999'))\n        True\n        >>> c.is_subnormal(Decimal('0.00'))\n        False\n        >>> c.is_subnormal(Decimal('-Inf'))\n        False\n        >>> c.is_subnormal(Decimal('NaN'))\n        False\n        >>> c.is_subnormal(1)\n        False\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.is_subnormal(context=self)\n    def is_zero(self, a):\n        \"\"\"Return True if the operand is a zero; otherwise return False.\n        >>> ExtendedContext.is_zero(Decimal('0'))\n        True\n        >>> ExtendedContext.is_zero(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_zero(Decimal('-0E+2'))\n        True\n        >>> ExtendedContext.is_zero(1)\n        False\n        >>> ExtendedContext.is_zero(0)\n        True\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.is_zero()\n    def ln(self, a):\n        \"\"\"Returns the natural (base e) logarithm of the operand.\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.ln(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.ln(Decimal('1.000'))\n        Decimal('0')\n        >>> c.ln(Decimal('2.71828183'))\n        Decimal('1.00000000')\n        >>> c.ln(Decimal('10'))\n        Decimal('2.30258509')\n        >>> c.ln(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.ln(1)\n        Decimal('0')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.ln(context=self)\n    def log10(self, a):\n        \"\"\"Returns the base 10 logarithm of the operand.\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.log10(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.log10(Decimal('0.001'))\n        Decimal('-3')\n        >>> c.log10(Decimal('1.000'))\n        Decimal('0')\n        >>> c.log10(Decimal('2'))\n        Decimal('0.301029996')\n        >>> c.log10(Decimal('10'))\n        Decimal('1')\n        >>> c.log10(Decimal('70'))\n        Decimal('1.84509804')\n        >>> c.log10(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.log10(0)\n        Decimal('-Infinity')\n        >>> c.log10(1)\n        Decimal('0')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.log10(context=self)\n    def logb(self, a):\n        \"\"\" Returns the exponent of the magnitude of the operand's MSD.\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of the operand (as though the\n        operand were truncated to a single digit while maintaining the\n        value of that digit and without limiting the resulting exponent).\n        >>> ExtendedContext.logb(Decimal('250'))\n        Decimal('2')\n        >>> ExtendedContext.logb(Decimal('2.50'))\n        Decimal('0')\n        >>> ExtendedContext.logb(Decimal('0.03'))\n        Decimal('-2')\n        >>> ExtendedContext.logb(Decimal('0'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.logb(1)\n        Decimal('0')\n        >>> ExtendedContext.logb(10)\n        Decimal('1')\n        >>> ExtendedContext.logb(100)\n        Decimal('2')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.logb(context=self)\n    def logical_and(self, a, b):\n        \"\"\"Applies the logical operation 'and' between each operand's digits.\n        The operands must be both logical numbers.\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))\n        Decimal('1000')\n        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))\n        Decimal('10')\n        >>> ExtendedContext.logical_and(110, 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(Decimal(110), 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(110, Decimal(1101))\n        Decimal('100')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.logical_and(b, context=self)\n    def logical_invert(self, a):\n        \"\"\"Invert all the digits in the operand.\n        The operand must be a logical number.\n        >>> ExtendedContext.logical_invert(Decimal('0'))\n        Decimal('111111111')\n        >>> ExtendedContext.logical_invert(Decimal('1'))\n        Decimal('111111110')\n        >>> ExtendedContext.logical_invert(Decimal('111111111'))\n        Decimal('0')\n        >>> ExtendedContext.logical_invert(Decimal('101010101'))\n        Decimal('10101010')\n        >>> ExtendedContext.logical_invert(1101)\n        Decimal('111110010')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.logical_invert(context=self)\n    def logical_or(self, a, b):\n        \"\"\"Applies the logical operation 'or' between each operand's digits.\n        The operands must be both logical numbers.\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(110, 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(Decimal(110), 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(110, Decimal(1101))\n        Decimal('1111')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.logical_or(b, context=self)\n    def logical_xor(self, a, b):\n        \"\"\"Applies the logical operation 'xor' between each operand's digits.\n        The operands must be both logical numbers.\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))\n        Decimal('110')\n        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))\n        Decimal('1101')\n        >>> ExtendedContext.logical_xor(110, 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(Decimal(110), 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(110, Decimal(1101))\n        Decimal('1011')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.logical_xor(b, context=self)\n    def max(self, a, b):\n        \"\"\"max compares two values numerically and returns the maximum.\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the maximum (closer to positive\n        infinity) of the two operands is chosen as the result.\n        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max(1, 2)\n        Decimal('2')\n        >>> ExtendedContext.max(Decimal(1), 2)\n        Decimal('2')\n        >>> ExtendedContext.max(1, Decimal(2))\n        Decimal('2')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.max(b, context=self)\n    def max_mag(self, a, b):\n        \"\"\"Compares the values numerically with their sign ignored.\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('-10'))\n        Decimal('-10')\n        >>> ExtendedContext.max_mag(1, -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(Decimal(1), -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(1, Decimal(-2))\n        Decimal('-2')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.max_mag(b, context=self)\n    def min(self, a, b):\n        \"\"\"min compares two values numerically and returns the minimum.\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the minimum (closer to negative\n        infinity) of the two operands is chosen as the result.\n        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))\n        Decimal('2')\n        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))\n        Decimal('-10')\n        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))\n        Decimal('1.0')\n        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.min(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.min(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.min(1, Decimal(29))\n        Decimal('1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.min(b, context=self)\n    def min_mag(self, a, b):\n        \"\"\"Compares the values numerically with their sign ignored.\n        >>> ExtendedContext.min_mag(Decimal('3'), Decimal('-2'))\n        Decimal('-2')\n        >>> ExtendedContext.min_mag(Decimal('-3'), Decimal('NaN'))\n        Decimal('-3')\n        >>> ExtendedContext.min_mag(1, -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(Decimal(1), -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(1, Decimal(-2))\n        Decimal('1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.min_mag(b, context=self)\n    def minus(self, a):\n        \"\"\"Minus corresponds to unary prefix minus in Python.\n        The operation is evaluated using the same rules as subtract; the\n        operation minus(a) is calculated as subtract('0', a) where the '0'\n        has the same exponent as the operand.\n        >>> ExtendedContext.minus(Decimal('1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.minus(Decimal('-1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.minus(1)\n        Decimal('-1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.__neg__(context=self)\n    def multiply(self, a, b):\n        \"\"\"multiply multiplies two operands.\n        If either operand is a special value then the general rules apply.\n        Otherwise, the operands are multiplied together\n        ('long multiplication'), resulting in a number which may be as long as\n        the sum of the lengths of the two operands.\n        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))\n        Decimal('3.60')\n        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))\n        Decimal('21')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))\n        Decimal('0.72')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))\n        Decimal('-0.0')\n        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))\n        Decimal('4.28135971E+11')\n        >>> ExtendedContext.multiply(7, 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(Decimal(7), 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(7, Decimal(7))\n        Decimal('49')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        r = a.__mul__(b, context=self)\n        if r is NotImplemented:\n            raise TypeError(\"Unable to convert %s to Decimal\" % b)\n        else:\n            return r\n    def next_minus(self, a):\n        \"\"\"Returns the largest representable number smaller than a.\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_minus(Decimal('1'))\n        Decimal('0.999999999')\n        >>> c.next_minus(Decimal('1E-1007'))\n        Decimal('0E-1007')\n        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))\n        Decimal('-1.00000004')\n        >>> c.next_minus(Decimal('Infinity'))\n        Decimal('9.99999999E+999')\n        >>> c.next_minus(1)\n        Decimal('0.999999999')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.next_minus(context=self)\n    def next_plus(self, a):\n        \"\"\"Returns the smallest representable number larger than a.\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_plus(Decimal('1'))\n        Decimal('1.00000001')\n        >>> c.next_plus(Decimal('-1E-1007'))\n        Decimal('-0E-1007')\n        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))\n        Decimal('-1.00000002')\n        >>> c.next_plus(Decimal('-Infinity'))\n        Decimal('-9.99999999E+999')\n        >>> c.next_plus(1)\n        Decimal('1.00000001')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.next_plus(context=self)\n    def next_toward(self, a, b):\n        \"\"\"Returns the number closest to a, in direction towards b.\n        The result is the closest representable number from the first\n        operand (but not the first operand) that is in the direction\n        towards the second operand, unless the operands have the same\n        value.\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.next_toward(Decimal('1'), Decimal('2'))\n        Decimal('1.00000001')\n        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))\n        Decimal('-0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))\n        Decimal('-1.00000002')\n        >>> c.next_toward(Decimal('1'), Decimal('0'))\n        Decimal('0.999999999')\n        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))\n        Decimal('0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))\n        Decimal('-1.00000004')\n        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))\n        Decimal('-0.00')\n        >>> c.next_toward(0, 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(Decimal(0), 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(0, Decimal(1))\n        Decimal('1E-1007')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.next_toward(b, context=self)\n    def normalize(self, a):\n        \"\"\"normalize reduces an operand to its simplest form.\n        Essentially a plus operation with all trailing zeros removed from the\n        result.\n        >>> ExtendedContext.normalize(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.normalize(Decimal('-2.0'))\n        Decimal('-2')\n        >>> ExtendedContext.normalize(Decimal('1.200'))\n        Decimal('1.2')\n        >>> ExtendedContext.normalize(Decimal('-120'))\n        Decimal('-1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('120.00'))\n        Decimal('1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('0.00'))\n        Decimal('0')\n        >>> ExtendedContext.normalize(6)\n        Decimal('6')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.normalize(context=self)\n    def number_class(self, a):\n        \"\"\"Returns an indication of the class of the operand.\n        The class is one of the following strings:\n          -sNaN\n          -NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.number_class(Decimal('Infinity'))\n        '+Infinity'\n        >>> c.number_class(Decimal('1E-10'))\n        '+Normal'\n        >>> c.number_class(Decimal('2.50'))\n        '+Normal'\n        >>> c.number_class(Decimal('0.1E-999'))\n        '+Subnormal'\n        >>> c.number_class(Decimal('0'))\n        '+Zero'\n        >>> c.number_class(Decimal('-0'))\n        '-Zero'\n        >>> c.number_class(Decimal('-0.1E-999'))\n        '-Subnormal'\n        >>> c.number_class(Decimal('-1E-10'))\n        '-Normal'\n        >>> c.number_class(Decimal('-2.50'))\n        '-Normal'\n        >>> c.number_class(Decimal('-Infinity'))\n        '-Infinity'\n        >>> c.number_class(Decimal('NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('-NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('sNaN'))\n        'sNaN'\n        >>> c.number_class(123)\n        '+Normal'\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.number_class(context=self)\n    def plus(self, a):\n        \"\"\"Plus corresponds to unary prefix plus in Python.\n        The operation is evaluated using the same rules as add; the\n        operation plus(a) is calculated as add('0', a) where the '0'\n        has the same exponent as the operand.\n        >>> ExtendedContext.plus(Decimal('1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.plus(Decimal('-1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.plus(-1)\n        Decimal('-1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.__pos__(context=self)\n    def power(self, a, b, modulo=None):\n        \"\"\"Raises a to the power of b, to modulo if given.\n        With two arguments, compute a**b.  If a is negative then b\n        must be integral.  The result will be inexact unless b is\n        integral and the result is finite and can be expressed exactly\n        in 'precision' digits.\n        With three arguments, compute (a**b) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n         - all three arguments must be integral\n         - b must be nonnegative\n         - at least one of a or b must be nonzero\n         - modulo must be nonzero and have at most 'precision' digits\n        The result of pow(a, b, modulo) is identical to the result\n        that would be obtained by computing (a**b) % modulo with\n        unbounded precision, but is computed more efficiently.  It is\n        always exact.\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.power(Decimal('2'), Decimal('3'))\n        Decimal('8')\n        >>> c.power(Decimal('-2'), Decimal('3'))\n        Decimal('-8')\n        >>> c.power(Decimal('2'), Decimal('-3'))\n        Decimal('0.125')\n        >>> c.power(Decimal('1.7'), Decimal('8'))\n        Decimal('69.7575744')\n        >>> c.power(Decimal('10'), Decimal('0.301029996'))\n        Decimal('2.00000000')\n        >>> c.power(Decimal('Infinity'), Decimal('-1'))\n        Decimal('0')\n        >>> c.power(Decimal('Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('Infinity'), Decimal('1'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('-1'))\n        Decimal('-0')\n        >>> c.power(Decimal('-Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('-Infinity'), Decimal('1'))\n        Decimal('-Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('2'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('0'), Decimal('0'))\n        Decimal('NaN')\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))\n        Decimal('11')\n        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))\n        Decimal('-11')\n        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))\n        Decimal('1')\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))\n        Decimal('11')\n        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))\n        Decimal('11729830')\n        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))\n        Decimal('-0')\n        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))\n        Decimal('1')\n        >>> ExtendedContext.power(7, 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(Decimal(7), 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(7, Decimal(7), 2)\n        Decimal('1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        r = a.__pow__(b, modulo, context=self)\n        if r is NotImplemented:\n            raise TypeError(\"Unable to convert %s to Decimal\" % b)\n        else:\n            return r\n    def quantize(self, a, b):\n        \"\"\"Returns a value equal to 'a' (rounded), having the exponent of 'b'.\n        The coefficient of the result is derived from that of the left-hand\n        operand.  It may be rounded using the current rounding setting (if the\n        exponent is being increased), multiplied by a positive power of ten (if\n        the exponent is being decreased), or is unchanged (if the exponent is\n        already equal to that of the right-hand operand).\n        Unlike other operations, if the length of the coefficient after the\n        quantize operation would be greater than precision then an Invalid\n        operation condition is raised.  This guarantees that, unless there is\n        an error condition, the exponent of the result of a quantize is always\n        equal to that of the right-hand operand.\n        Also unlike other operations, quantize will never raise Underflow, even\n        if the result is subnormal and inexact.\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))\n        Decimal('2.170')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))\n        Decimal('2.17')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))\n        Decimal('2.2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))\n        Decimal('2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))\n        Decimal('0E+1')\n        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))\n        Decimal('-0')\n        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))\n        Decimal('-0E+5')\n        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))\n        Decimal('217.0')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))\n        Decimal('217')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))\n        Decimal('2.2E+2')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))\n        Decimal('2E+2')\n        >>> ExtendedContext.quantize(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(1, Decimal(2))\n        Decimal('1')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.quantize(b, context=self)\n    def radix(self):\n        \"\"\"Just returns 10, as this is Decimal, :)\n        >>> ExtendedContext.radix()\n        Decimal('10')\n        \"\"\"\n        return Decimal(10)\n    def remainder(self, a, b):\n        \"\"\"Returns the remainder from integer division.\n        The result is the residue of the dividend after the operation of\n        calculating integer division as described for divide-integer, rounded\n        to precision digits if necessary.  The sign of the result, if\n        non-zero, is the same as that of the original dividend.\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))\n        Decimal('2.1')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))\n        Decimal('1')\n        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))\n        Decimal('0.2')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))\n        Decimal('0.1')\n        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))\n        Decimal('1.0')\n        >>> ExtendedContext.remainder(22, 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(Decimal(22), 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(22, Decimal(6))\n        Decimal('4')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        r = a.__mod__(b, context=self)\n        if r is NotImplemented:\n            raise TypeError(\"Unable to convert %s to Decimal\" % b)\n        else:\n            return r\n    def remainder_near(self, a, b):\n        \"\"\"Returns to be \"a - b * n\", where n is the integer nearest the exact\n        value of \"x / b\" (if two integers are equally near then the even one\n        is chosen).  If the result is equal to 0 then its sign will be the\n        sign of a.\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n        >>> ExtendedContext.remainder_near(Decimal('2.1'), Decimal('3'))\n        Decimal('-0.9')\n        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('6'))\n        Decimal('-2')\n        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('3'))\n        Decimal('1')\n        >>> ExtendedContext.remainder_near(Decimal('-10'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.remainder_near(Decimal('10.2'), Decimal('1'))\n        Decimal('0.2')\n        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('0.3'))\n        Decimal('0.1')\n        >>> ExtendedContext.remainder_near(Decimal('3.6'), Decimal('1.3'))\n        Decimal('-0.3')\n        >>> ExtendedContext.remainder_near(3, 11)\n        Decimal('3')\n        >>> ExtendedContext.remainder_near(Decimal(3), 11)\n        Decimal('3')\n        >>> ExtendedContext.remainder_near(3, Decimal(11))\n        Decimal('3')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.remainder_near(b, context=self)\n    def rotate(self, a, b):\n        \"\"\"Returns a rotated copy of a, b times.\n        The coefficient of the result is a rotated copy of the digits in\n        the coefficient of the first operand.  The number of places of\n        rotation is taken from the absolute value of the second operand,\n        with the rotation being to the left if the second operand is\n        positive or to the right otherwise.\n        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))\n        Decimal('400000003')\n        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))\n        Decimal('12')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))\n        Decimal('891234567')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678912')\n        >>> ExtendedContext.rotate(1333333, 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(Decimal(1333333), 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(1333333, Decimal(1))\n        Decimal('13333330')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.rotate(b, context=self)\n    def same_quantum(self, a, b):\n        \"\"\"Returns True if the two operands have the same exponent.\n        The result is never affected by either the sign or the coefficient of\n        either operand.\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))\n        True\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))\n        True\n        >>> ExtendedContext.same_quantum(10000, -1)\n        True\n        >>> ExtendedContext.same_quantum(Decimal(10000), -1)\n        True\n        >>> ExtendedContext.same_quantum(10000, Decimal(-1))\n        True\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.same_quantum(b)\n    def scaleb (self, a, b):\n        \"\"\"Returns the first operand after adding the second value its exp.\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))\n        Decimal('0.0750')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))\n        Decimal('7.50')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))\n        Decimal('7.50E+3')\n        >>> ExtendedContext.scaleb(1, 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(Decimal(1), 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(1, Decimal(4))\n        Decimal('1E+4')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.scaleb(b, context=self)\n    def shift(self, a, b):\n        \"\"\"Returns a shifted copy of a, b times.\n        The coefficient of the result is a shifted copy of the digits\n        in the coefficient of the first operand.  The number of places\n        to shift is taken from the absolute value of the second operand,\n        with the shift being to the left if the second operand is\n        positive or to the right otherwise.  Digits shifted into the\n        coefficient are zeros.\n        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))\n        Decimal('400000000')\n        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))\n        Decimal('0')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))\n        Decimal('1234567')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678900')\n        >>> ExtendedContext.shift(88888888, 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(Decimal(88888888), 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(88888888, Decimal(2))\n        Decimal('888888800')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.shift(b, context=self)\n    def sqrt(self, a):\n        \"\"\"Square root of a non-negative number to context precision.\n        If the result must be inexact, it is rounded using the round-half-even\n        algorithm.\n        >>> ExtendedContext.sqrt(Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.sqrt(Decimal('-0'))\n        Decimal('-0')\n        >>> ExtendedContext.sqrt(Decimal('0.39'))\n        Decimal('0.624499800')\n        >>> ExtendedContext.sqrt(Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.sqrt(Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.sqrt(Decimal('1.0'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('1.00'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('7'))\n        Decimal('2.64575131')\n        >>> ExtendedContext.sqrt(Decimal('10'))\n        Decimal('3.16227766')\n        >>> ExtendedContext.sqrt(2)\n        Decimal('1.41421356')\n        >>> ExtendedContext.prec\n        9\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.sqrt(context=self)\n    def subtract(self, a, b):\n        \"\"\"Return the difference between the two operands.\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))\n        Decimal('0.23')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))\n        Decimal('0.00')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))\n        Decimal('-0.77')\n        >>> ExtendedContext.subtract(8, 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(Decimal(8), 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(8, Decimal(5))\n        Decimal('3')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        r = a.__sub__(b, context=self)\n        if r is NotImplemented:\n            raise TypeError(\"Unable to convert %s to Decimal\" % b)\n        else:\n            return r\n    def to_eng_string(self, a):\n        \"\"\"Converts a number to a string, using scientific notation.\n        The operation is not affected by the context.\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.to_eng_string(context=self)\n    def to_sci_string(self, a):\n        \"\"\"Converts a number to a string, using scientific notation.\n        The operation is not affected by the context.\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.__str__(context=self)\n    def to_integral_exact(self, a):\n        \"\"\"Rounds to an integer.\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting; Inexact and Rounded flags\n        are allowed in this operation.  The rounding mode is taken from the\n        context.\n        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_exact(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))\n        Decimal('-Infinity')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.to_integral_exact(context=self)\n    def to_integral_value(self, a):\n        \"\"\"Rounds to an integer.\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting, except that no flags will\n        be set.  The rounding mode is taken from the context.\n        >>> ExtendedContext.to_integral_value(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_value(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))\n        Decimal('-Infinity')\n        \"\"\"\n        a = _convert_other(a, raiseit=True)\n        return a.to_integral_value(context=self)\n    to_integral = to_integral_value\nclass _WorkRep(object):\n    __slots__ = ('sign','int','exp')\n    def __init__(self, value=None):\n        if value is None:\n            self.sign = None\n            self.int = 0\n            self.exp = None\n        elif isinstance(value, Decimal):\n            self.sign = value._sign\n            self.int = int(value._int)\n            self.exp = value._exp\n        else:\n            self.sign = value[0]\n            self.int = value[1]\n            self.exp = value[2]\n    def __repr__(self):\n        return \"(%r, %r, %r)\" % (self.sign, self.int, self.exp)\n    __str__ = __repr__\ndef _normalize(op1, op2, prec = 0):\n    \"\"\"Normalizes op1, op2 to have the same exp and length of coefficient.\n    Done during addition.\n    \"\"\"\n    if op1.exp < op2.exp:\n        tmp = op2\n        other = op1\n    else:\n        tmp = op1\n        other = op2\n    tmp_len = len(str(tmp.int))\n    other_len = len(str(other.int))\n    exp = tmp.exp + min(-1, tmp_len - prec - 2)\n    if other_len + other.exp - 1 < exp:\n        other.int = 1\n        other.exp = exp\n    tmp.int *= 10 ** (tmp.exp - other.exp)\n    tmp.exp = other.exp\n    return op1, op2\n_nbits = int.bit_length\ndef _decimal_lshift_exact(n, e):\n    \"\"\" Given integers n and e, return n * 10**e if it's an integer, else None.\n    The computation is designed to avoid computing large powers of 10\n    unnecessarily.\n    >>> _decimal_lshift_exact(3, 4)\n    30000\n    >>> _decimal_lshift_exact(300, -999999999)  # returns None\n    \"\"\"\n    if n == 0:\n        return 0\n    elif e >= 0:\n        return n * 10**e\n    else:\n        str_n = str(abs(n))\n        val_n = len(str_n) - len(str_n.rstrip('0'))\n        return None if val_n < -e else n // 10**-e\ndef _sqrt_nearest(n, a):\n    \"\"\"Closest integer to the square root of the positive integer n.  a is\n    an initial approximation to the square root.  Any positive integer\n    will do for a, but the closer a is to the square root of n the\n    faster convergence will be.\n    \"\"\"\n    if n <= 0 or a <= 0:\n        raise ValueError(\"Both arguments to _sqrt_nearest should be positive.\")\n    b=0\n    while a != b:\n        b, a = a, a--n//a>>1\n    return a\ndef _rshift_nearest(x, shift):\n    \"\"\"Given an integer x and a nonnegative integer shift, return closest\n    integer to x / 2**shift; use round-to-even in case of a tie.\n    \"\"\"\n    b, q = 1 << shift, x >> shift\n    return q + (2*(x & (b-1)) + (q&1) > b)\ndef _div_nearest(a, b):\n    \"\"\"Closest integer to a/b, a and b positive integers; rounds to even\n    in the case of a tie.\n    \"\"\"\n    q, r = divmod(a, b)\n    return q + (2*r + (q&1) > b)\ndef _ilog(x, M, L = 8):\n    \"\"\"Integer approximation to M*log(x/M), with absolute error boundable\n    in terms only of x/M.\n    Given positive integers x and M, return an integer approximation to\n    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference\n    between the approximation and the exact result is at most 22.  For\n    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In\n    both cases these are upper bounds on the error; it will usually be\n    much smaller.\"\"\"\n    y = x-M\n    R = 0\n    while (R <= L and abs(y) << L-R >= M or\n           R > L and abs(y) >> R-L >= M):\n        y = _div_nearest((M*y) << 1,\n                         M + _sqrt_nearest(M*(M+_rshift_nearest(y, R)), M))\n        R += 1\n    T = -int(-10*len(str(M))//(3*L))\n    yshift = _rshift_nearest(y, R)\n    w = _div_nearest(M, T)\n    for k in range(T-1, 0, -1):\n        w = _div_nearest(M, k) - _div_nearest(yshift*w, M)\n    return _div_nearest(w*y, M)\ndef _dlog10(c, e, p):\n    \"\"\"Given integers c, e and p with c > 0, p >= 0, compute an integer\n    approximation to 10**p * log10(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.\"\"\"\n    p += 2\n    l = len(str(c))\n    f = e+l - (e+l >= 1)\n    if p > 0:\n        M = 10**p\n        k = e+p-f\n        if k >= 0:\n            c *= 10**k\n        else:\n            c = _div_nearest(c, 10**-k)\n        log_d = _ilog(c, M) # error < 5 + 22 = 27\n        log_10 = _log10_digits(p) # error < 1\n        log_d = _div_nearest(log_d*M, log_10)\n        log_tenpower = f*M # exact\n    else:\n        log_d = 0  # error < 2.31\n        log_tenpower = _div_nearest(f, 10**-p) # error < 0.5\n    return _div_nearest(log_tenpower+log_d, 100)\ndef _dlog(c, e, p):\n    \"\"\"Given integers c, e and p with c > 0, compute an integer\n    approximation to 10**p * log(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.\"\"\"\n    p += 2\n    l = len(str(c))\n    f = e+l - (e+l >= 1)\n    if p > 0:\n        k = e+p-f\n        if k >= 0:\n            c *= 10**k\n        else:\n            c = _div_nearest(c, 10**-k)  # error of <= 0.5 in c\n        log_d = _ilog(c, 10**p) # error < 5 + 22 = 27\n    else:\n        log_d = 0\n    if f:\n        extra = len(str(abs(f)))-1\n        if p + extra >= 0:\n            f_log_ten = _div_nearest(f*_log10_digits(p+extra), 10**extra)\n        else:\n            f_log_ten = 0\n    else:\n        f_log_ten = 0\n    return _div_nearest(f_log_ten + log_d, 100)\nclass _Log10Memoize(object):\n    \"\"\"Class to compute, store, and allow retrieval of, digits of the\n    constant log(10) = 2.302585....  This constant is needed by\n    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__.\"\"\"\n    def __init__(self):\n        self.digits = \"23025850929940456840179914546843642076011014886\"\n    def getdigits(self, p):\n        \"\"\"Given an integer p >= 0, return floor(10**p)*log(10).\n        For example, self.getdigits(3) returns 2302.\n        \"\"\"\n        if p < 0:\n            raise ValueError(\"p should be nonnegative\")\n        if p >= len(self.digits):\n            extra = 3\n            while True:\n                M = 10**(p+extra+2)\n                digits = str(_div_nearest(_ilog(10*M, M), 100))\n                if digits[-extra:] != '0'*extra:\n                    break\n                extra += 3\n            self.digits = digits.rstrip('0')[:-1]\n        return int(self.digits[:p+1])\n_log10_digits = _Log10Memoize().getdigits\ndef _iexp(x, M, L=8):\n    \"\"\"Given integers x and M, M > 0, such that x/M is small in absolute\n    value, compute an integer approximation to M*exp(x/M).  For 0 <=\n    x/M <= 2.4, the absolute error in the result is bounded by 60 (and\n    is usually much smaller).\"\"\"\n    R = _nbits((x<<L)//M)\n    T = -int(-10*len(str(M))//(3*L))\n    y = _div_nearest(x, T)\n    Mshift = M<<R\n    for i in range(T-1, 0, -1):\n        y = _div_nearest(x*(Mshift + y), Mshift * i)\n    for k in range(R-1, -1, -1):\n        Mshift = M<<(k+2)\n        y = _div_nearest(y*(y+Mshift), Mshift)\n    return M+y\ndef _dexp(c, e, p):\n    \"\"\"Compute an approximation to exp(c*10**e), with p decimal places of\n    precision.\n    Returns integers d, f such that:\n      10**(p-1) <= d <= 10**p, and\n      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f\n    In other words, d*10**f is an approximation to exp(c*10**e) with p\n    digits of precision, and with an error in d of at most 1.  This is\n    almost, but not quite, the same as the error being < 1ulp: when d\n    = 10**(p-1) the error could be up to 10 ulp.\"\"\"\n    p += 2\n    extra = max(0, e + len(str(c)) - 1)\n    q = p + extra\n    shift = e+q\n    if shift >= 0:\n        cshift = c*10**shift\n    else:\n        cshift = c//10**-shift\n    quot, rem = divmod(cshift, _log10_digits(q))\n    rem = _div_nearest(rem, 10**extra)\n    return _div_nearest(_iexp(rem, 10**p), 1000), quot - p + 3\ndef _dpower(xc, xe, yc, ye, p):\n    \"\"\"Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and\n    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:\n      10**(p-1) <= c <= 10**p, and\n      (c-1)*10**e < x**y < (c+1)*10**e\n    in other words, c*10**e is an approximation to x**y with p digits\n    of precision, and with an error in c of at most 1.  (This is\n    almost, but not quite, the same as the error being < 1ulp: when c\n    == 10**(p-1) we can only guarantee error < 10ulp.)\n    We assume that: x is positive and not equal to 1, and y is nonzero.\n    \"\"\"\n    b = len(str(abs(yc))) + ye\n    lxc = _dlog(xc, xe, p+b+1)\n    shift = ye-b\n    if shift >= 0:\n        pc = lxc*yc*10**shift\n    else:\n        pc = _div_nearest(lxc*yc, 10**-shift)\n    if pc == 0:\n        if ((len(str(xc)) + xe >= 1) == (yc > 0)): # if x**y > 1:\n            coeff, exp = 10**(p-1)+1, 1-p\n        else:\n            coeff, exp = 10**p-1, -p\n    else:\n        coeff, exp = _dexp(pc, -(p+1), p+1)\n        coeff = _div_nearest(coeff, 10)\n        exp += 1\n    return coeff, exp\ndef _log10_lb(c, correction = {\n        '1': 100, '2': 70, '3': 53, '4': 40, '5': 31,\n        '6': 23, '7': 16, '8': 10, '9': 5}):\n    \"\"\"Compute a lower bound for 100*log10(c) for a positive integer c.\"\"\"\n    if c <= 0:\n        raise ValueError(\"The argument to _log10_lb should be nonnegative.\")\n    str_c = str(c)\n    return 100*len(str_c) - correction[str_c[0]]\ndef _convert_other(other, raiseit=False, allow_float=False):\n    \"\"\"Convert other to Decimal.\n    Verifies that it's ok to use in an implicit construction.\n    If allow_float is true, allow conversion from float;  this\n    is used in the comparison methods (__eq__ and friends).\n    \"\"\"\n    if isinstance(other, Decimal):\n        return other\n    if isinstance(other, int):\n        return Decimal(other)\n    if allow_float and isinstance(other, float):\n        return Decimal.from_float(other)\n    if raiseit:\n        raise TypeError(\"Unable to convert %s to Decimal\" % other)\n    return NotImplemented\ndef _convert_for_comparison(self, other, equality_op=False):\n    \"\"\"Given a Decimal instance self and a Python object other, return\n    a pair (s, o) of Decimal instances such that \"s op o\" is\n    equivalent to \"self op other\" for any of the 6 comparison\n    operators \"op\".\n    \"\"\"\n    if isinstance(other, Decimal):\n        return self, other\n    if isinstance(other, _numbers.Rational):\n        if not self._is_special:\n            self = _dec_from_triple(self._sign,\n                                    str(int(self._int) * other.denominator),\n                                    self._exp)\n        return self, Decimal(other.numerator)\n    if equality_op and isinstance(other, _numbers.Complex) and other.imag == 0:\n        other = other.real\n    if isinstance(other, float):\n        context = getcontext()\n        if equality_op:\n            context.flags[FloatOperation] = 1\n        else:\n            context._raise_error(FloatOperation,\n                \"strict semantics for mixing floats and Decimals are enabled\")\n        return self, Decimal.from_float(other)\n    return NotImplemented, NotImplemented\nDefaultContext = Context(\n        prec=28, rounding=ROUND_HALF_EVEN,\n        traps=[DivisionByZero, Overflow, InvalidOperation],\n        flags=[],\n        Emax=999999,\n        Emin=-999999,\n        capitals=1,\n        clamp=0\n)\nBasicContext = Context(\n        prec=9, rounding=ROUND_HALF_UP,\n        traps=[DivisionByZero, Overflow, InvalidOperation, Clamped, Underflow],\n        flags=[],\n)\nExtendedContext = Context(\n        prec=9, rounding=ROUND_HALF_EVEN,\n        traps=[],\n        flags=[],\n)\nimport re\n_parser = re.compile(r\"\"\"        # A numeric string consists of:\n    (?P<sign>[-+])?              # an optional sign, followed by either...\n    (\n        (?=\\d|\\.\\d)              # ...a number (with at least one digit)\n        (?P<int>\\d*)             # having a (possibly empty) integer part\n        (\\.(?P<frac>\\d*))?       # followed by an optional fractional part\n        (E(?P<exp>[-+]?\\d+))?    # followed by an optional exponent, or...\n    |\n        Inf(inity)?              # ...an infinity, or...\n    |\n        (?P<signal>s)?           # ...an (optionally signaling)\n        NaN                      # NaN\n        (?P<diag>\\d*)            # with (possibly empty) diagnostic info.\n    )\n    \\Z\n\"\"\", re.VERBOSE | re.IGNORECASE).match\n_all_zeros = re.compile('0*$').match\n_exact_half = re.compile('50*$').match\n_parse_format_specifier_regex = re.compile(r\"\"\"\\A\n(?:\n   (?P<fill>.)?\n   (?P<align>[<>=^])\n)?\n(?P<sign>[-+ ])?\n(?P<alt>\\#)?\n(?P<zeropad>0)?\n(?P<minimumwidth>(?!0)\\d+)?\n(?P<thousands_sep>,)?\n(?:\\.(?P<precision>0|(?!0)\\d+))?\n(?P<type>[eEfFgGn%])?\n\\Z\n\"\"\", re.VERBOSE)\ndel re\ntry:\n    import locale as _locale\nexcept ImportError:\n    pass\ndef _parse_format_specifier(format_spec, _localeconv=None):\n    \"\"\"Parse and validate a format specifier.\n    Turns a standard numeric format specifier into a dict, with the\n    following entries:\n      fill: fill character to pad field to minimum width\n      align: alignment type, either '<', '>', '=' or '^'\n      sign: either '+', '-' or ' '\n      minimumwidth: nonnegative integer giving minimum width\n      zeropad: boolean, indicating whether to pad with zeros\n      thousands_sep: string to use as thousands separator, or ''\n      grouping: grouping for thousands separators, in format\n        used by localeconv\n      decimal_point: string to use for decimal point\n      precision: nonnegative integer giving precision, or None\n      type: one of the characters 'eEfFgG%', or None\n    \"\"\"\n    m = _parse_format_specifier_regex.match(format_spec)\n    if m is None:\n        raise ValueError(\"Invalid format specifier: \" + format_spec)\n    format_dict = m.groupdict()\n    fill = format_dict['fill']\n    align = format_dict['align']\n    format_dict['zeropad'] = (format_dict['zeropad'] is not None)\n    if format_dict['zeropad']:\n        if fill is not None:\n            raise ValueError(\"Fill character conflicts with '0'\"\n                             \" in format specifier: \" + format_spec)\n        if align is not None:\n            raise ValueError(\"Alignment conflicts with '0' in \"\n                             \"format specifier: \" + format_spec)\n    format_dict['fill'] = fill or ' '\n    format_dict['align'] = align or '>'\n    if format_dict['sign'] is None:\n        format_dict['sign'] = '-'\n    format_dict['minimumwidth'] = int(format_dict['minimumwidth'] or '0')\n    if format_dict['precision'] is not None:\n        format_dict['precision'] = int(format_dict['precision'])\n    if format_dict['precision'] == 0:\n        if format_dict['type'] is None or format_dict['type'] in 'gGn':\n            format_dict['precision'] = 1\n    if format_dict['type'] == 'n':\n        format_dict['type'] = 'g'\n        if _localeconv is None:\n            _localeconv = _locale.localeconv()\n        if format_dict['thousands_sep'] is not None:\n            raise ValueError(\"Explicit thousands separator conflicts with \"\n                             \"'n' type in format specifier: \" + format_spec)\n        format_dict['thousands_sep'] = _localeconv['thousands_sep']\n        format_dict['grouping'] = _localeconv['grouping']\n        format_dict['decimal_point'] = _localeconv['decimal_point']\n    else:\n        if format_dict['thousands_sep'] is None:\n            format_dict['thousands_sep'] = ''\n        format_dict['grouping'] = [3, 0]\n        format_dict['decimal_point'] = '.'\n    return format_dict\ndef _format_align(sign, body, spec):\n    \"\"\"Given an unpadded, non-aligned numeric string 'body' and sign\n    string 'sign', add padding and alignment conforming to the given\n    format specifier dictionary 'spec' (as produced by\n    parse_format_specifier).\n    \"\"\"\n    minimumwidth = spec['minimumwidth']\n    fill = spec['fill']\n    padding = fill*(minimumwidth - len(sign) - len(body))\n    align = spec['align']\n    if align == '<':\n        result = sign + body + padding\n    elif align == '>':\n        result = padding + sign + body\n    elif align == '=':\n        result = sign + padding + body\n    elif align == '^':\n        half = len(padding)//2\n        result = padding[:half] + sign + body + padding[half:]\n    else:\n        raise ValueError('Unrecognised alignment field')\n    return result\ndef _group_lengths(grouping):\n    \"\"\"Convert a localeconv-style grouping into a (possibly infinite)\n    iterable of integers representing group lengths.\n    \"\"\"\n    from itertools import chain, repeat\n    if not grouping:\n        return []\n    elif grouping[-1] == 0 and len(grouping) >= 2:\n        return chain(grouping[:-1], repeat(grouping[-2]))\n    elif grouping[-1] == _locale.CHAR_MAX:\n        return grouping[:-1]\n    else:\n        raise ValueError('unrecognised format for grouping')\ndef _insert_thousands_sep(digits, spec, min_width=1):\n    \"\"\"Insert thousands separators into a digit string.\n    spec is a dictionary whose keys should include 'thousands_sep' and\n    'grouping'; typically it's the result of parsing the format\n    specifier using _parse_format_specifier.\n    The min_width keyword argument gives the minimum length of the\n    result, which will be padded on the left with zeros if necessary.\n    If necessary, the zero padding adds an extra '0' on the left to\n    avoid a leading thousands separator.  For example, inserting\n    commas every three digits in '123456', with min_width=8, gives\n    '0,123,456', even though that has length 9.\n    \"\"\"\n    sep = spec['thousands_sep']\n    grouping = spec['grouping']\n    groups = []\n    for l in _group_lengths(grouping):\n        if l <= 0:\n            raise ValueError(\"group length should be positive\")\n        l = min(max(len(digits), min_width, 1), l)\n        groups.append('0'*(l - len(digits)) + digits[-l:])\n        digits = digits[:-l]\n        min_width -= l\n        if not digits and min_width <= 0:\n            break\n        min_width -= len(sep)\n    else:\n        l = max(len(digits), min_width, 1)\n        groups.append('0'*(l - len(digits)) + digits[-l:])\n    return sep.join(reversed(groups))\ndef _format_sign(is_negative, spec):\n    \"\"\"Determine sign character.\"\"\"\n    if is_negative:\n        return '-'\n    elif spec['sign'] in ' +':\n        return spec['sign']\n    else:\n        return ''\ndef _format_number(is_negative, intpart, fracpart, exp, spec):\n    \"\"\"Format a number, given the following data:\n    is_negative: true if the number is negative, else false\n    intpart: string of digits that must appear before the decimal point\n    fracpart: string of digits that must come after the point\n    exp: exponent, as an integer\n    spec: dictionary resulting from parsing the format specifier\n    This function uses the information in spec to:\n      insert separators (decimal separator and thousands separators)\n      format the sign\n      format the exponent\n      add trailing '%' for the '%' type\n      zero-pad if necessary\n      fill and align if necessary\n    \"\"\"\n    sign = _format_sign(is_negative, spec)\n    if fracpart or spec['alt']:\n        fracpart = spec['decimal_point'] + fracpart\n    if exp != 0 or spec['type'] in 'eE':\n        echar = {'E': 'E', 'e': 'e', 'G': 'E', 'g': 'e'}[spec['type']]\n        fracpart += \"{0}{1:+}\".format(echar, exp)\n    if spec['type'] == '%':\n        fracpart += '%'\n    if spec['zeropad']:\n        min_width = spec['minimumwidth'] - len(fracpart) - len(sign)\n    else:\n        min_width = 0\n    intpart = _insert_thousands_sep(intpart, spec, min_width)\n    return _format_align(sign, intpart+fracpart, spec)\n_Infinity = Decimal('Inf')\n_NegativeInfinity = Decimal('-Inf')\n_NaN = Decimal('NaN')\n_Zero = Decimal(0)\n_One = Decimal(1)\n_NegativeOne = Decimal(-1)\n_SignedInfinity = (_Infinity, _NegativeInfinity)\n_PyHASH_MODULUS = sys.hash_info.modulus\n_PyHASH_INF = sys.hash_info.inf\n_PyHASH_NAN = sys.hash_info.nan\n_PyHASH_10INV = pow(10, _PyHASH_MODULUS - 2, _PyHASH_MODULUS)\ndel sys\ntry:\n    import _decimal\nexcept ImportError:\n    pass\nelse:\n    s1 = set(dir())\n    s2 = set(dir(_decimal))\n    for name in s1 - s2:\n        del globals()[name]\n    del s1, s2, name\n    from _decimal import *\nif __name__ == '__main__':\n    import doctest, decimal\n    doctest.testmod(decimal)\n", "/Lib/reprlib.py": "\"\"\"Redo the builtin repr() (representation) but with limits on most sizes.\"\"\"\r\n__all__ = [\"Repr\", \"repr\", \"recursive_repr\"]\r\nimport builtins\r\nfrom itertools import islice\r\ntry:\r\n    from _thread import get_ident\r\nexcept ImportError:\r\n    from _dummy_thread import get_ident\r\ndef recursive_repr(fillvalue='...'):\r\n    'Decorator to make a repr function return fillvalue for a recursive call'\r\n    def decorating_function(user_function):\r\n        repr_running = set()\r\n        def wrapper(self):\r\n            key = id(self), get_ident()\r\n            if key in repr_running:\r\n                return fillvalue\r\n            repr_running.add(key)\r\n            try:\r\n                result = user_function(self)\r\n            finally:\r\n                repr_running.discard(key)\r\n            return result\r\n        wrapper.__module__ = getattr(user_function, '__module__')\r\n        wrapper.__doc__ = getattr(user_function, '__doc__')\r\n        wrapper.__name__ = getattr(user_function, '__name__')\r\n        wrapper.__annotations__ = getattr(user_function, '__annotations__', {})\r\n        return wrapper\r\n    return decorating_function\r\nclass Repr:\r\n    def __init__(self):\r\n        self.maxlevel = 6\r\n        self.maxtuple = 6\r\n        self.maxlist = 6\r\n        self.maxarray = 5\r\n        self.maxdict = 4\r\n        self.maxset = 6\r\n        self.maxfrozenset = 6\r\n        self.maxdeque = 6\r\n        self.maxstring = 30\r\n        self.maxlong = 40\r\n        self.maxother = 30\r\n    def repr(self, x):\r\n        return self.repr1(x, self.maxlevel)\r\n    def repr1(self, x, level):\r\n        typename = type(x).__name__\r\n        if ' ' in typename:\r\n            parts = typename.split()\r\n            typename = '_'.join(parts)\r\n        if hasattr(self, 'repr_' + typename):\r\n            return getattr(self, 'repr_' + typename)(x, level)\r\n        else:\r\n            return self.repr_instance(x, level)\r\n    def _repr_iterable(self, x, level, left, right, maxiter, trail=''):\r\n        n = len(x)\r\n        if level <= 0 and n:\r\n            s = '...'\r\n        else:\r\n            newlevel = level - 1\r\n            repr1 = self.repr1\r\n            pieces = [repr1(elem, newlevel) for elem in islice(x, maxiter)]\r\n            if n > maxiter:  pieces.append('...')\r\n            s = ', '.join(pieces)\r\n            if n == 1 and trail:  right = trail + right\r\n        return '%s%s%s' % (left, s, right)\r\n    def repr_tuple(self, x, level):\r\n        return self._repr_iterable(x, level, '(', ')', self.maxtuple, ',')\r\n    def repr_list(self, x, level):\r\n        return self._repr_iterable(x, level, '[', ']', self.maxlist)\r\n    def repr_array(self, x, level):\r\n        header = \"array('%s', [\" % x.typecode\r\n        return self._repr_iterable(x, level, header, '])', self.maxarray)\r\n    def repr_set(self, x, level):\r\n        x = _possibly_sorted(x)\r\n        return self._repr_iterable(x, level, 'set([', '])', self.maxset)\r\n    def repr_frozenset(self, x, level):\r\n        x = _possibly_sorted(x)\r\n        return self._repr_iterable(x, level, 'frozenset([', '])',\r\n                                   self.maxfrozenset)\r\n    def repr_deque(self, x, level):\r\n        return self._repr_iterable(x, level, 'deque([', '])', self.maxdeque)\r\n    def repr_dict(self, x, level):\r\n        n = len(x)\r\n        if n == 0: return '{}'\r\n        if level <= 0: return '{...}'\r\n        newlevel = level - 1\r\n        repr1 = self.repr1\r\n        pieces = []\r\n        for key in islice(_possibly_sorted(x), self.maxdict):\r\n            keyrepr = repr1(key, newlevel)\r\n            valrepr = repr1(x[key], newlevel)\r\n            pieces.append('%s: %s' % (keyrepr, valrepr))\r\n        if n > self.maxdict: pieces.append('...')\r\n        s = ', '.join(pieces)\r\n        return '{%s}' % (s,)\r\n    def repr_str(self, x, level):\r\n        s = builtins.repr(x[:self.maxstring])\r\n        if len(s) > self.maxstring:\r\n            i = max(0, (self.maxstring-3)//2)\r\n            j = max(0, self.maxstring-3-i)\r\n            s = builtins.repr(x[:i] + x[len(x)-j:])\r\n            s = s[:i] + '...' + s[len(s)-j:]\r\n        return s\r\n    def repr_int(self, x, level):\r\n        s = builtins.repr(x) # XXX Hope this isn't too slow...\r\n        if len(s) > self.maxlong:\r\n            i = max(0, (self.maxlong-3)//2)\r\n            j = max(0, self.maxlong-3-i)\r\n            s = s[:i] + '...' + s[len(s)-j:]\r\n        return s\r\n    def repr_instance(self, x, level):\r\n        try:\r\n            s = builtins.repr(x)\r\n        except Exception:\r\n            return '<%s instance at %x>' % (x.__class__.__name__, id(x))\r\n        if len(s) > self.maxother:\r\n            i = max(0, (self.maxother-3)//2)\r\n            j = max(0, self.maxother-3-i)\r\n            s = s[:i] + '...' + s[len(s)-j:]\r\n        return s\r\ndef _possibly_sorted(x):\r\n    try:\r\n        return sorted(x)\r\n    except Exception:\r\n        return list(x)\r\naRepr = Repr()\r\nrepr = aRepr.repr\r\n", "/Lib/datetime.py": "\"\"\"Concrete date/time and related types -- prototype implemented in Python.\nSee http://www.zope.org/Members/fdrake/DateTimeWiki/FrontPage\nSee also http://dir.yahoo.com/Reference/calendars/\nFor a primer on DST, including many current DST rules, see\nhttp://webexhibits.org/daylightsaving/\nFor more about DST than you ever wanted to know, see\nftp://elsie.nci.nih.gov/pub/\nSources for time zone and DST data: http://www.twinsun.com/tz/tz-link.htm\nThis was originally copied from the sandbox of the CPython CVS repository.\nThanks to Tim Peters for suggesting using it.\n\"\"\"\nimport time as _time\nimport math as _math\ndef _cmp(x, y):\n    return 0 if x == y else 1 if x > y else -1\nMINYEAR = 1\nMAXYEAR = 9999\n_MAXORDINAL = 3652059 # date.max.toordinal()\n_DAYS_IN_MONTH = [None, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n_DAYS_BEFORE_MONTH = [None]\ndbm = 0\nfor dim in _DAYS_IN_MONTH[1:]:\n    _DAYS_BEFORE_MONTH.append(dbm)\n    dbm += dim\ndel dbm, dim\ndef _is_leap(year):\n    \"year -> 1 if leap year, else 0.\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\ndef _days_before_year(year):\n    \"year -> number of days before January 1st of year.\"\n    y = year - 1\n    return y*365 + y//4 - y//100 + y//400\ndef _days_in_month(year, month):\n    \"year, month -> number of days in that month in that year.\"\n    assert 1 <= month <= 12, month\n    if month == 2 and _is_leap(year):\n        return 29\n    return _DAYS_IN_MONTH[month]\ndef _days_before_month(year, month):\n    \"year, month -> number of days in year preceeding first day of month.\"\n    assert 1 <= month <= 12, 'month must be in 1..12'\n    return _DAYS_BEFORE_MONTH[month] + (month > 2 and _is_leap(year))\ndef _ymd2ord(year, month, day):\n    \"year, month, day -> ordinal, considering 01-Jan-0001 as day 1.\"\n    assert 1 <= month <= 12, 'month must be in 1..12'\n    dim = _days_in_month(year, month)\n    assert 1 <= day <= dim, ('day must be in 1..%d' % dim)\n    return (_days_before_year(year) +\n            _days_before_month(year, month) +\n            day)\n_DI400Y = _days_before_year(401)    # number of days in 400 years\n_DI100Y = _days_before_year(101)    #    \"    \"   \"   \" 100   \"\n_DI4Y   = _days_before_year(5)      #    \"    \"   \"   \"   4   \"\nassert _DI4Y == 4 * 365 + 1\nassert _DI400Y == 4 * _DI100Y + 1\nassert _DI100Y == 25 * _DI4Y - 1\ndef _ord2ymd(n):\n    \"ordinal -> (year, month, day), considering 01-Jan-0001 as day 1.\"\n    n -= 1\n    n400, n = divmod(n, _DI400Y)\n    year = n400 * 400 + 1   # ..., -399, 1, 401, ...\n    n100, n = divmod(n, _DI100Y)\n    n4, n = divmod(n, _DI4Y)\n    n1, n = divmod(n, 365)\n    year += n100 * 100 + n4 * 4 + n1\n    if n1 == 4 or n100 == 4:\n        assert n == 0\n        return year-1, 12, 31\n    leapyear = n1 == 3 and (n4 != 24 or n100 == 3)\n    assert leapyear == _is_leap(year)\n    month = (n + 50) >> 5\n    preceding = _DAYS_BEFORE_MONTH[month] + (month > 2 and leapyear)\n    if preceding > n:  # estimate is too large\n        month -= 1\n        preceding -= _DAYS_IN_MONTH[month] + (month == 2 and leapyear)\n    n -= preceding\n    assert 0 <= n < _days_in_month(year, month)\n    return year, month, n+1\n_MONTHNAMES = [None, \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                     \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n_DAYNAMES = [None, \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\ndef _build_struct_time(y, m, d, hh, mm, ss, dstflag):\n    wday = (_ymd2ord(y, m, d) + 6) % 7\n    dnum = _days_before_month(y, m) + d\n    return _time.struct_time((y, m, d, hh, mm, ss, wday, dnum, dstflag))\ndef _format_time(hh, mm, ss, us):\n    result = \"%02d:%02d:%02d\" % (hh, mm, ss)\n    if us:\n        result += \".%06d\" % us\n    return result\ndef _wrap_strftime(object, format, timetuple):\n    freplace = None # the string to use for %f\n    zreplace = None # the string to use for %z\n    Zreplace = None # the string to use for %Z\n    newformat = []\n    push = newformat.append\n    i, n = 0, len(format)\n    while i < n:\n        ch = format[i]\n        i += 1\n        if ch == '%':\n            if i < n:\n                ch = format[i]\n                i += 1\n                if ch == 'f':\n                    if freplace is None:\n                        freplace = '%06d' % getattr(object,\n                                                    'microsecond', 0)\n                    newformat.append(freplace)\n                elif ch == 'z':\n                    if zreplace is None:\n                        zreplace = \"\"\n                        if hasattr(object, \"utcoffset\"):\n                            offset = object.utcoffset()\n                            if offset is not None:\n                                sign = '+'\n                                if offset.days < 0:\n                                    offset = -offset\n                                    sign = '-'\n                                h, m = divmod(offset, timedelta(hours=1))\n                                assert not m % timedelta(minutes=1), \"whole minute\"\n                                m //= timedelta(minutes=1)\n                                zreplace = '%c%02d%02d' % (sign, h, m)\n                    assert '%' not in zreplace\n                    newformat.append(zreplace)\n                elif ch == 'Z':\n                    if Zreplace is None:\n                        Zreplace = \"\"\n                        if hasattr(object, \"tzname\"):\n                            s = object.tzname()\n                            if s is not None:\n                                Zreplace = s.replace('%', '%%')\n                    newformat.append(Zreplace)\n                else:\n                    push('%')\n                    push(ch)\n            else:\n                push('%')\n        else:\n            push(ch)\n    newformat = \"\".join(newformat)\n    return _time.strftime(newformat, timetuple)\ndef _call_tzinfo_method(tzinfo, methname, tzinfoarg):\n    if tzinfo is None:\n        return None\n    return getattr(tzinfo, methname)(tzinfoarg)\ndef _check_tzname(name):\n    if name is not None and not isinstance(name, str):\n        raise TypeError(\"tzinfo.tzname() must return None or string, \"\n                        \"not '%s'\" % type(name))\ndef _check_utc_offset(name, offset):\n    assert name in (\"utcoffset\", \"dst\")\n    if offset is None:\n        return\n    if not isinstance(offset, timedelta):\n        raise TypeError(\"tzinfo.%s() must return None \"\n                        \"or timedelta, not '%s'\" % (name, type(offset)))\n    if offset % timedelta(minutes=1) or offset.microseconds:\n        raise ValueError(\"tzinfo.%s() must return a whole number \"\n                         \"of minutes, got %s\" % (name, offset))\n    if not -timedelta(1) < offset < timedelta(1):\n        raise ValueError(\"%s()=%s, must be must be strictly between\"\n                         \" -timedelta(hours=24) and timedelta(hours=24)\"\n                         % (name, offset))\ndef _check_date_fields(year, month, day):\n    if not isinstance(year, int):\n        raise TypeError('int expected')\n    if not MINYEAR <= year <= MAXYEAR:\n        raise ValueError('year must be in %d..%d' % (MINYEAR, MAXYEAR), year)\n    if not 1 <= month <= 12:\n        raise ValueError('month must be in 1..12', month)\n    dim = _days_in_month(year, month)\n    if not 1 <= day <= dim:\n        raise ValueError('day must be in 1..%d' % dim, day)\ndef _check_time_fields(hour, minute, second, microsecond):\n    if not isinstance(hour, int):\n        raise TypeError('int expected')\n    if not 0 <= hour <= 23:\n        raise ValueError('hour must be in 0..23', hour)\n    if not 0 <= minute <= 59:\n        raise ValueError('minute must be in 0..59', minute)\n    if not 0 <= second <= 59:\n        raise ValueError('second must be in 0..59', second)\n    if not 0 <= microsecond <= 999999:\n        raise ValueError('microsecond must be in 0..999999', microsecond)\ndef _check_tzinfo_arg(tz):\n    if tz is not None and not isinstance(tz, tzinfo):\n        raise TypeError(\"tzinfo argument must be None or of a tzinfo subclass\")\ndef _cmperror(x, y):\n    raise TypeError(\"can't compare '%s' to '%s'\" % (\n                    type(x).__name__, type(y).__name__))\nclass timedelta:\n    \"\"\"Represent the difference between two datetime objects.\n    Supported operators:\n    - add, subtract timedelta\n    - unary plus, minus, abs\n    - compare to timedelta\n    - multiply, divide by int/long\n    In addition, datetime supports subtraction of two datetime objects\n    returning a timedelta, and addition or subtraction of a datetime\n    and a timedelta giving a datetime.\n    Representation: (days, seconds, microseconds).  Why?  Because I\n    felt like it.\n    \"\"\"\n    __slots__ = '_days', '_seconds', '_microseconds'\n    def __new__(cls, days=0, seconds=0, microseconds=0,\n                milliseconds=0, minutes=0, hours=0, weeks=0):\n        d = s = us = 0\n        days += weeks*7\n        seconds += minutes*60 + hours*3600\n        microseconds += milliseconds*1000\n        if isinstance(days, float):\n            dayfrac, days = _math.modf(days)\n            daysecondsfrac, daysecondswhole = _math.modf(dayfrac * (24.*3600.))\n            assert daysecondswhole == int(daysecondswhole)  # can't overflow\n            s = int(daysecondswhole)\n            assert days == int(days)\n            d = int(days)\n        else:\n            daysecondsfrac = 0.0\n            d = days\n        assert isinstance(daysecondsfrac, float)\n        assert abs(daysecondsfrac) <= 1.0\n        assert isinstance(d, int)\n        assert abs(s) <= 24 * 3600\n        if isinstance(seconds, float):\n            secondsfrac, seconds = _math.modf(seconds)\n            assert seconds == int(seconds)\n            seconds = int(seconds)\n            secondsfrac += daysecondsfrac\n            assert abs(secondsfrac) <= 2.0\n        else:\n            secondsfrac = daysecondsfrac\n        assert isinstance(secondsfrac, float)\n        assert abs(secondsfrac) <= 2.0\n        assert isinstance(seconds, int)\n        days, seconds = divmod(seconds, 24*3600)\n        d += days\n        s += int(seconds)    # can't overflow\n        assert isinstance(s, int)\n        assert abs(s) <= 2 * 24 * 3600\n        usdouble = secondsfrac * 1e6\n        assert abs(usdouble) < 2.1e6    # exact value not critical\n        if isinstance(microseconds, float):\n            microseconds += usdouble\n            microseconds = round(microseconds, 0)\n            seconds, microseconds = divmod(microseconds, 1e6)\n            assert microseconds == int(microseconds)\n            assert seconds == int(seconds)\n            days, seconds = divmod(seconds, 24.*3600.)\n            assert days == int(days)\n            assert seconds == int(seconds)\n            d += int(days)\n            s += int(seconds)   # can't overflow\n            assert isinstance(s, int)\n            assert abs(s) <= 3 * 24 * 3600\n        else:\n            seconds, microseconds = divmod(microseconds, 1000000)\n            days, seconds = divmod(seconds, 24*3600)\n            d += days\n            s += int(seconds)    # can't overflow\n            assert isinstance(s, int)\n            assert abs(s) <= 3 * 24 * 3600\n            microseconds = float(microseconds)\n            microseconds += usdouble\n            microseconds = round(microseconds, 0)\n        assert abs(s) <= 3 * 24 * 3600\n        assert abs(microseconds) < 3.1e6\n        assert int(microseconds) == microseconds\n        us = int(microseconds)\n        seconds, us = divmod(us, 1000000)\n        s += seconds    # cant't overflow\n        assert isinstance(s, int)\n        days, s = divmod(s, 24*3600)\n        d += days\n        assert isinstance(d, int)\n        assert isinstance(s, int) and 0 <= s < 24*3600\n        assert isinstance(us, int) and 0 <= us < 1000000\n        self = object.__new__(cls)\n        self._days = d\n        self._seconds = s\n        self._microseconds = us\n        if abs(d) > 999999999:\n            raise OverflowError(\"timedelta # of days is too large: %d\" % d)\n        return self\n    def __repr__(self):\n        if self._microseconds:\n            return \"%s(%d, %d, %d)\" % ('datetime.' + self.__class__.__name__,\n                                       self._days,\n                                       self._seconds,\n                                       self._microseconds)\n        if self._seconds:\n            return \"%s(%d, %d)\" % ('datetime.' + self.__class__.__name__,\n                                   self._days,\n                                   self._seconds)\n        return \"%s(%d)\" % ('datetime.' + self.__class__.__name__, self._days)\n    def __str__(self):\n        mm, ss = divmod(self._seconds, 60)\n        hh, mm = divmod(mm, 60)\n        s = \"%d:%02d:%02d\" % (hh, mm, ss)\n        if self._days:\n            def plural(n):\n                return n, abs(n) != 1 and \"s\" or \"\"\n            s = (\"%d day%s, \" % plural(self._days)) + s\n        if self._microseconds:\n            s = s + \".%06d\" % self._microseconds\n        return s\n    def total_seconds(self):\n        \"\"\"Total seconds in the duration.\"\"\"\n        return ((self.days * 86400 + self.seconds)*10**6 +\n                self.microseconds) / 10**6\n    @property\n    def days(self):\n        \"\"\"days\"\"\"\n        return self._days\n    @property\n    def seconds(self):\n        \"\"\"seconds\"\"\"\n        return self._seconds\n    @property\n    def microseconds(self):\n        \"\"\"microseconds\"\"\"\n        return self._microseconds\n    def __add__(self, other):\n        if isinstance(other, timedelta):\n            return timedelta(self._days + other._days,\n                             self._seconds + other._seconds,\n                             self._microseconds + other._microseconds)\n        return NotImplemented\n    __radd__ = __add__\n    def __sub__(self, other):\n        if isinstance(other, timedelta):\n            return timedelta(self._days - other._days,\n                             self._seconds - other._seconds,\n                             self._microseconds - other._microseconds)\n        return NotImplemented\n    def __rsub__(self, other):\n        if isinstance(other, timedelta):\n            return -self + other\n        return NotImplemented\n    def __neg__(self):\n        return timedelta(-self._days,\n                         -self._seconds,\n                         -self._microseconds)\n    def __pos__(self):\n        return self\n    def __abs__(self):\n        if self._days < 0:\n            return -self\n        else:\n            return self\n    def __mul__(self, other):\n        if isinstance(other, int):\n            return timedelta(self._days * other,\n                             self._seconds * other,\n                             self._microseconds * other)\n        if isinstance(other, float):\n            a, b = other.as_integer_ratio()\n            return self * a / b\n        return NotImplemented\n    __rmul__ = __mul__\n    def _to_microseconds(self):\n        return ((self._days * (24*3600) + self._seconds) * 1000000 +\n                self._microseconds)\n    def __floordiv__(self, other):\n        if not isinstance(other, (int, timedelta)):\n            return NotImplemented\n        usec = self._to_microseconds()\n        if isinstance(other, timedelta):\n            return usec // other._to_microseconds()\n        if isinstance(other, int):\n            return timedelta(0, 0, usec // other)\n    def __truediv__(self, other):\n        if not isinstance(other, (int, float, timedelta)):\n            return NotImplemented\n        usec = self._to_microseconds()\n        if isinstance(other, timedelta):\n            return usec / other._to_microseconds()\n        if isinstance(other, int):\n            return timedelta(0, 0, usec / other)\n        if isinstance(other, float):\n            a, b = other.as_integer_ratio()\n            return timedelta(0, 0, b * usec / a)\n    def __mod__(self, other):\n        if isinstance(other, timedelta):\n            r = self._to_microseconds() % other._to_microseconds()\n            return timedelta(0, 0, r)\n        return NotImplemented\n    def __divmod__(self, other):\n        if isinstance(other, timedelta):\n            q, r = divmod(self._to_microseconds(),\n                          other._to_microseconds())\n            return q, timedelta(0, 0, r)\n        return NotImplemented\n    def __eq__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) == 0\n        else:\n            return False\n    def __ne__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) != 0\n        else:\n            return True\n    def __le__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) <= 0\n        else:\n            _cmperror(self, other)\n    def __lt__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) < 0\n        else:\n            _cmperror(self, other)\n    def __ge__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) >= 0\n        else:\n            _cmperror(self, other)\n    def __gt__(self, other):\n        if isinstance(other, timedelta):\n            return self._cmp(other) > 0\n        else:\n            _cmperror(self, other)\n    def _cmp(self, other):\n        assert isinstance(other, timedelta)\n        return _cmp(self._getstate(), other._getstate())\n    def __hash__(self):\n        return hash(self._getstate())\n    def __bool__(self):\n        return (self._days != 0 or\n                self._seconds != 0 or\n                self._microseconds != 0)\n    def _getstate(self):\n        return (self._days, self._seconds, self._microseconds)\n    def __reduce__(self):\n        return (self.__class__, self._getstate())\ntimedelta.min = timedelta(-999999999)\ntimedelta.max = timedelta(days=999999999, hours=23, minutes=59, seconds=59,\n                          microseconds=999999)\ntimedelta.resolution = timedelta(microseconds=1)\nclass date:\n    \"\"\"Concrete date type.\n    Constructors:\n    __new__()\n    fromtimestamp()\n    today()\n    fromordinal()\n    Operators:\n    __repr__, __str__\n    __cmp__, __hash__\n    __add__, __radd__, __sub__ (add/radd only with timedelta arg)\n    Methods:\n    timetuple()\n    toordinal()\n    weekday()\n    isoweekday(), isocalendar(), isoformat()\n    ctime()\n    strftime()\n    Properties (readonly):\n    year, month, day\n    \"\"\"\n    __slots__ = '_year', '_month', '_day'\n    def __new__(cls, year, month=None, day=None):\n        \"\"\"Constructor.\n        Arguments:\n        year, month, day (required, base 1)\n        \"\"\"\n        if (isinstance(year, bytes) and len(year) == 4 and\n            1 <= year[2] <= 12 and month is None):  # Month is sane\n            self = object.__new__(cls)\n            self.__setstate(year)\n            return self\n        _check_date_fields(year, month, day)\n        self = object.__new__(cls)\n        self._year = year\n        self._month = month\n        self._day = day\n        return self\n    @classmethod\n    def fromtimestamp(cls, t):\n        \"Construct a date from a POSIX timestamp (like time.time()).\"\n        y, m, d, hh, mm, ss, weekday, jday, dst = _time.localtime(t)\n        return cls(y, m, d)\n    @classmethod\n    def today(cls):\n        \"Construct a date from time.time().\"\n        t = _time.time()\n        return cls.fromtimestamp(t)\n    @classmethod\n    def fromordinal(cls, n):\n        \"\"\"Contruct a date from a proleptic Gregorian ordinal.\n        January 1 of year 1 is day 1.  Only the year, month and day are\n        non-zero in the result.\n        \"\"\"\n        y, m, d = _ord2ymd(n)\n        return cls(y, m, d)\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\n        >>> dt = datetime(2010, 1, 1)\n        >>> repr(dt)\n        'datetime.datetime(2010, 1, 1, 0, 0)'\n        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)\n        >>> repr(dt)\n        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'\n        \"\"\"\n        return \"%s(%d, %d, %d)\" % ('datetime.' + self.__class__.__name__,\n                                   self._year,\n                                   self._month,\n                                   self._day)\n    def ctime(self):\n        \"Return ctime() style string.\"\n        weekday = self.toordinal() % 7 or 7\n        return \"%s %s %2d 00:00:00 %04d\" % (\n            _DAYNAMES[weekday],\n            _MONTHNAMES[self._month],\n            self._day, self._year)\n    def strftime(self, fmt):\n        \"Format using strftime().\"\n        return _wrap_strftime(self, fmt, self.timetuple())\n    def __format__(self, fmt):\n        if len(fmt) != 0:\n            return self.strftime(fmt)\n        return str(self)\n    def isoformat(self):\n        \"\"\"Return the date formatted according to ISO.\n        This is 'YYYY-MM-DD'.\n        References:\n        - http://www.w3.org/TR/NOTE-datetime\n        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html\n        \"\"\"\n        return \"%04d-%02d-%02d\" % (self._year, self._month, self._day)\n    __str__ = isoformat\n    @property\n    def year(self):\n        \"\"\"year (1-9999)\"\"\"\n        return self._year\n    @property\n    def month(self):\n        \"\"\"month (1-12)\"\"\"\n        return self._month\n    @property\n    def day(self):\n        \"\"\"day (1-31)\"\"\"\n        return self._day\n    def timetuple(self):\n        \"Return local time tuple compatible with time.localtime().\"\n        return _build_struct_time(self._year, self._month, self._day,\n                                  0, 0, 0, -1)\n    def toordinal(self):\n        \"\"\"Return proleptic Gregorian ordinal for the year, month and day.\n        January 1 of year 1 is day 1.  Only the year, month and day values\n        contribute to the result.\n        \"\"\"\n        return _ymd2ord(self._year, self._month, self._day)\n    def replace(self, year=None, month=None, day=None):\n        \"\"\"Return a new date with new values for the specified fields.\"\"\"\n        if year is None:\n            year = self._year\n        if month is None:\n            month = self._month\n        if day is None:\n            day = self._day\n        _check_date_fields(year, month, day)\n        return date(year, month, day)\n    def __eq__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) == 0\n        return NotImplemented\n    def __ne__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) != 0\n        return NotImplemented\n    def __le__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) <= 0\n        return NotImplemented\n    def __lt__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) < 0\n        return NotImplemented\n    def __ge__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) >= 0\n        return NotImplemented\n    def __gt__(self, other):\n        if isinstance(other, date):\n            return self._cmp(other) > 0\n        return NotImplemented\n    def _cmp(self, other):\n        assert isinstance(other, date)\n        y, m, d = self._year, self._month, self._day\n        y2, m2, d2 = other._year, other._month, other._day\n        return _cmp((y, m, d), (y2, m2, d2))\n    def __hash__(self):\n        \"Hash.\"\n        return hash(self._getstate())\n    def __add__(self, other):\n        \"Add a date to a timedelta.\"\n        if isinstance(other, timedelta):\n            o = self.toordinal() + other.days\n            if 0 < o <= _MAXORDINAL:\n                return date.fromordinal(o)\n            raise OverflowError(\"result out of range\")\n        return NotImplemented\n    __radd__ = __add__\n    def __sub__(self, other):\n        \"\"\"Subtract two dates, or a date and a timedelta.\"\"\"\n        if isinstance(other, timedelta):\n            return self + timedelta(-other.days)\n        if isinstance(other, date):\n            days1 = self.toordinal()\n            days2 = other.toordinal()\n            return timedelta(days1 - days2)\n        return NotImplemented\n    def weekday(self):\n        \"Return day of the week, where Monday == 0 ... Sunday == 6.\"\n        return (self.toordinal() + 6) % 7\n    def isoweekday(self):\n        \"Return day of the week, where Monday == 1 ... Sunday == 7.\"\n        return self.toordinal() % 7 or 7\n    def isocalendar(self):\n        \"\"\"Return a 3-tuple containing ISO year, week number, and weekday.\n        The first ISO week of the year is the (Mon-Sun) week\n        containing the year's first Thursday; everything else derives\n        from that.\n        The first week is 1; Monday is 1 ... Sunday is 7.\n        ISO calendar algorithm taken from\n        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm\n        \"\"\"\n        year = self._year\n        week1monday = _isoweek1monday(year)\n        today = _ymd2ord(self._year, self._month, self._day)\n        week, day = divmod(today - week1monday, 7)\n        if week < 0:\n            year -= 1\n            week1monday = _isoweek1monday(year)\n            week, day = divmod(today - week1monday, 7)\n        elif week >= 52:\n            if today >= _isoweek1monday(year+1):\n                year += 1\n                week = 0\n        return year, week+1, day+1\n    def _getstate(self):\n        yhi, ylo = divmod(self._year, 256)\n        return bytes([yhi, ylo, self._month, self._day]),\n    def __setstate(self, string):\n        if len(string) != 4 or not (1 <= string[2] <= 12):\n            raise TypeError(\"not enough arguments\")\n        yhi, ylo, self._month, self._day = string\n        self._year = yhi * 256 + ylo\n    def __reduce__(self):\n        return (self.__class__, self._getstate())\n_date_class = date  # so functions w/ args named \"date\" can get at the class\ndate.min = date(1, 1, 1)\ndate.max = date(9999, 12, 31)\ndate.resolution = timedelta(days=1)\nclass tzinfo:\n    \"\"\"Abstract base class for time zone info classes.\n    Subclasses must override the name(), utcoffset() and dst() methods.\n    \"\"\"\n    __slots__ = ()\n    def tzname(self, dt):\n        \"datetime -> string name of time zone.\"\n        raise NotImplementedError(\"tzinfo subclass must override tzname()\")\n    def utcoffset(self, dt):\n        \"datetime -> minutes east of UTC (negative for west of UTC)\"\n        raise NotImplementedError(\"tzinfo subclass must override utcoffset()\")\n    def dst(self, dt):\n        \"\"\"datetime -> DST offset in minutes east of UTC.\n        Return 0 if DST not in effect.  utcoffset() must include the DST\n        offset.\n        \"\"\"\n        raise NotImplementedError(\"tzinfo subclass must override dst()\")\n    def fromutc(self, dt):\n        \"datetime in UTC -> datetime in local time.\"\n        if not isinstance(dt, datetime):\n            raise TypeError(\"fromutc() requires a datetime argument\")\n        if dt.tzinfo is not self:\n            raise ValueError(\"dt.tzinfo is not self\")\n        dtoff = dt.utcoffset()\n        if dtoff is None:\n            raise ValueError(\"fromutc() requires a non-None utcoffset() \"\n                             \"result\")\n        dtdst = dt.dst()\n        if dtdst is None:\n            raise ValueError(\"fromutc() requires a non-None dst() result\")\n        delta = dtoff - dtdst\n        if delta:\n            dt += delta\n            dtdst = dt.dst()\n            if dtdst is None:\n                raise ValueError(\"fromutc(): dt.dst gave inconsistent \"\n                                 \"results; cannot convert\")\n        return dt + dtdst\n    def __reduce__(self):\n        getinitargs = getattr(self, \"__getinitargs__\", None)\n        if getinitargs:\n            args = getinitargs()\n        else:\n            args = ()\n        getstate = getattr(self, \"__getstate__\", None)\n        if getstate:\n            state = getstate()\n        else:\n            state = getattr(self, \"__dict__\", None) or None\n        if state is None:\n            return (self.__class__, args)\n        else:\n            return (self.__class__, args, state)\n_tzinfo_class = tzinfo\nclass time:\n    \"\"\"Time with time zone.\n    Constructors:\n    __new__()\n    Operators:\n    __repr__, __str__\n    __cmp__, __hash__\n    Methods:\n    strftime()\n    isoformat()\n    utcoffset()\n    tzname()\n    dst()\n    Properties (readonly):\n    hour, minute, second, microsecond, tzinfo\n    \"\"\"\n    def __new__(cls, hour=0, minute=0, second=0, microsecond=0, tzinfo=None):\n        \"\"\"Constructor.\n        Arguments:\n        hour, minute (required)\n        second, microsecond (default to zero)\n        tzinfo (default to None)\n        \"\"\"\n        self = object.__new__(cls)\n        if isinstance(hour, bytes) and len(hour) == 6:\n            self.__setstate(hour, minute or None)\n            return self\n        _check_tzinfo_arg(tzinfo)\n        _check_time_fields(hour, minute, second, microsecond)\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n        self._microsecond = microsecond\n        self._tzinfo = tzinfo\n        return self\n    @property\n    def hour(self):\n        \"\"\"hour (0-23)\"\"\"\n        return self._hour\n    @property\n    def minute(self):\n        \"\"\"minute (0-59)\"\"\"\n        return self._minute\n    @property\n    def second(self):\n        \"\"\"second (0-59)\"\"\"\n        return self._second\n    @property\n    def microsecond(self):\n        \"\"\"microsecond (0-999999)\"\"\"\n        return self._microsecond\n    @property\n    def tzinfo(self):\n        \"\"\"timezone info object\"\"\"\n        return self._tzinfo\n    def __eq__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other, allow_mixed=True) == 0\n        else:\n            return False\n    def __ne__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other, allow_mixed=True) != 0\n        else:\n            return True\n    def __le__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) <= 0\n        else:\n            _cmperror(self, other)\n    def __lt__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) < 0\n        else:\n            _cmperror(self, other)\n    def __ge__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) >= 0\n        else:\n            _cmperror(self, other)\n    def __gt__(self, other):\n        if isinstance(other, time):\n            return self._cmp(other) > 0\n        else:\n            _cmperror(self, other)\n    def _cmp(self, other, allow_mixed=False):\n        assert isinstance(other, time)\n        mytz = self._tzinfo\n        ottz = other._tzinfo\n        myoff = otoff = None\n        if mytz is ottz:\n            base_compare = True\n        else:\n            myoff = self.utcoffset()\n            otoff = other.utcoffset()\n            base_compare = myoff == otoff\n        if base_compare:\n            return _cmp((self._hour, self._minute, self._second,\n                         self._microsecond),\n                       (other._hour, other._minute, other._second,\n                        other._microsecond))\n        if myoff is None or otoff is None:\n            if allow_mixed:\n                return 2 # arbitrary non-zero value\n            else:\n                raise TypeError(\"cannot compare naive and aware times\")\n        myhhmm = self._hour * 60 + self._minute - myoff//timedelta(minutes=1)\n        othhmm = other._hour * 60 + other._minute - otoff//timedelta(minutes=1)\n        return _cmp((myhhmm, self._second, self._microsecond),\n                    (othhmm, other._second, other._microsecond))\n    def __hash__(self):\n        \"\"\"Hash.\"\"\"\n        tzoff = self.utcoffset()\n        if not tzoff: # zero or None\n            return hash(self._getstate()[0])\n        h, m = divmod(timedelta(hours=self.hour, minutes=self.minute) - tzoff,\n                      timedelta(hours=1))\n        assert not m % timedelta(minutes=1), \"whole minute\"\n        m //= timedelta(minutes=1)\n        if 0 <= h < 24:\n            return hash(time(h, m, self.second, self.microsecond))\n        return hash((h, m, self.second, self.microsecond))\n    def _tzstr(self, sep=\":\"):\n        \"\"\"Return formatted timezone offset (+xx:xx) or None.\"\"\"\n        off = self.utcoffset()\n        if off is not None:\n            if off.days < 0:\n                sign = \"-\"\n                off = -off\n            else:\n                sign = \"+\"\n            hh, mm = divmod(off, timedelta(hours=1))\n            assert not mm % timedelta(minutes=1), \"whole minute\"\n            mm //= timedelta(minutes=1)\n            assert 0 <= hh < 24\n            off = \"%s%02d%s%02d\" % (sign, hh, sep, mm)\n        return off\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\"\"\"\n        if self._microsecond != 0:\n            s = \", %d, %d\" % (self._second, self._microsecond)\n        elif self._second != 0:\n            s = \", %d\" % self._second\n        else:\n            s = \"\"\n        s= \"%s(%d, %d%s)\" % ('datetime.' + self.__class__.__name__,\n                             self._hour, self._minute, s)\n        if self._tzinfo is not None:\n            assert s[-1:] == \")\"\n            s = s[:-1] + \", tzinfo=%r\" % self._tzinfo + \")\"\n        return s\n    def isoformat(self):\n        \"\"\"Return the time formatted according to ISO.\n        This is 'HH:MM:SS.mmmmmm+zz:zz', or 'HH:MM:SS+zz:zz' if\n        self.microsecond == 0.\n        \"\"\"\n        s = _format_time(self._hour, self._minute, self._second,\n                         self._microsecond)\n        tz = self._tzstr()\n        if tz:\n            s += tz\n        return s\n    __str__ = isoformat\n    def strftime(self, fmt):\n        \"\"\"Format using strftime().  The date part of the timestamp passed\n        to underlying strftime should not be used.\n        \"\"\"\n        timetuple = (1900, 1, 1,\n                     self._hour, self._minute, self._second,\n                     0, 1, -1)\n        return _wrap_strftime(self, fmt, timetuple)\n    def __format__(self, fmt):\n        if len(fmt) != 0:\n            return self.strftime(fmt)\n        return str(self)\n    def utcoffset(self):\n        \"\"\"Return the timezone offset in minutes east of UTC (negative west of\n        UTC).\"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.utcoffset(None)\n        _check_utc_offset(\"utcoffset\", offset)\n        return offset\n    def tzname(self):\n        \"\"\"Return the timezone name.\n        Note that the name is 100% informational -- there's no requirement that\n        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",\n        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        name = self._tzinfo.tzname(None)\n        _check_tzname(name)\n        return name\n    def dst(self):\n        \"\"\"Return 0 if DST is not in effect, or the DST offset (in minutes\n        eastward) if DST is in effect.\n        This is purely informational; the DST offset has already been added to\n        the UTC offset returned by utcoffset() if applicable, so there's no\n        need to consult dst() unless you're interested in displaying the DST\n        info.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.dst(None)\n        _check_utc_offset(\"dst\", offset)\n        return offset\n    def replace(self, hour=None, minute=None, second=None, microsecond=None,\n                tzinfo=True):\n        \"\"\"Return a new time with new values for the specified fields.\"\"\"\n        if hour is None:\n            hour = self.hour\n        if minute is None:\n            minute = self.minute\n        if second is None:\n            second = self.second\n        if microsecond is None:\n            microsecond = self.microsecond\n        if tzinfo is True:\n            tzinfo = self.tzinfo\n        _check_time_fields(hour, minute, second, microsecond)\n        _check_tzinfo_arg(tzinfo)\n        return time(hour, minute, second, microsecond, tzinfo)\n    def __bool__(self):\n        if self.second or self.microsecond:\n            return True\n        offset = self.utcoffset() or timedelta(0)\n        return timedelta(hours=self.hour, minutes=self.minute) != offset\n    def _getstate(self):\n        us2, us3 = divmod(self._microsecond, 256)\n        us1, us2 = divmod(us2, 256)\n        basestate = bytes([self._hour, self._minute, self._second,\n                           us1, us2, us3])\n        if self._tzinfo is None:\n            return (basestate,)\n        else:\n            return (basestate, self._tzinfo)\n    def __setstate(self, string, tzinfo):\n        if len(string) != 6 or string[0] >= 24:\n            raise TypeError(\"an integer is required\")\n        (self._hour, self._minute, self._second,\n         us1, us2, us3) = string\n        self._microsecond = (((us1 << 8) | us2) << 8) | us3\n        if tzinfo is None or isinstance(tzinfo, _tzinfo_class):\n            self._tzinfo = tzinfo\n        else:\n            raise TypeError(\"bad tzinfo state arg %r\" % tzinfo)\n    def __reduce__(self):\n        return (time, self._getstate())\n_time_class = time  # so functions w/ args named \"time\" can get at the class\ntime.min = time(0, 0, 0)\ntime.max = time(23, 59, 59, 999999)\ntime.resolution = timedelta(microseconds=1)\nclass datetime(date):\n    \"\"\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\n    The year, month and day arguments are required. tzinfo may be None, or an\n    instance of a tzinfo subclass. The remaining arguments may be ints or longs.\n    \"\"\"\n    __slots__ = date.__slots__ + (\n        '_hour', '_minute', '_second',\n        '_microsecond', '_tzinfo')\n    def __new__(cls, year, month=None, day=None, hour=0, minute=0, second=0,\n                microsecond=0, tzinfo=None):\n        if isinstance(year, bytes) and len(year) == 10:\n            self = date.__new__(cls, year[:4])\n            self.__setstate(year, month)\n            return self\n        _check_tzinfo_arg(tzinfo)\n        _check_time_fields(hour, minute, second, microsecond)\n        self = date.__new__(cls, year, month, day)\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n        self._microsecond = microsecond\n        self._tzinfo = tzinfo\n        return self\n    @property\n    def hour(self):\n        \"\"\"hour (0-23)\"\"\"\n        return self._hour\n    @property\n    def minute(self):\n        \"\"\"minute (0-59)\"\"\"\n        return self._minute\n    @property\n    def second(self):\n        \"\"\"second (0-59)\"\"\"\n        return self._second\n    @property\n    def microsecond(self):\n        \"\"\"microsecond (0-999999)\"\"\"\n        return self._microsecond\n    @property\n    def tzinfo(self):\n        \"\"\"timezone info object\"\"\"\n        return self._tzinfo\n    @classmethod\n    def fromtimestamp(cls, t, tz=None):\n        \"\"\"Construct a datetime from a POSIX timestamp (like time.time()).\n        A timezone info object may be passed in as well.\n        \"\"\"\n        _check_tzinfo_arg(tz)\n        converter = _time.localtime if tz is None else _time.gmtime\n        t, frac = divmod(t, 1.0)\n        us = int(frac * 1e6)\n        if us == 1000000:\n            t += 1\n            us = 0\n        y, m, d, hh, mm, ss, weekday, jday, dst = converter(t)\n        ss = min(ss, 59)    # clamp out leap seconds if the platform has them\n        result = cls(y, m, d, hh, mm, ss, us, tz)\n        if tz is not None:\n            result = tz.fromutc(result)\n        return result\n    @classmethod\n    def utcfromtimestamp(cls, t):\n        \"Construct a UTC datetime from a POSIX timestamp (like time.time()).\"\n        t, frac = divmod(t, 1.0)\n        us = int(frac * 1e6)\n        if us == 1000000:\n            t += 1\n            us = 0\n        y, m, d, hh, mm, ss, weekday, jday, dst = _time.gmtime(t)\n        ss = min(ss, 59)    # clamp out leap seconds if the platform has them\n        return cls(y, m, d, hh, mm, ss, us)\n    @classmethod\n    def now(cls, tz=None):\n        \"Construct a datetime from time.time() and optional time zone info.\"\n        t = _time.time()\n        return cls.fromtimestamp(t, tz)\n    @classmethod\n    def utcnow(cls):\n        \"Construct a UTC datetime from time.time().\"\n        t = _time.time()\n        return cls.utcfromtimestamp(t)\n    @classmethod\n    def combine(cls, date, time):\n        \"Construct a datetime from a given date and a given time.\"\n        if not isinstance(date, _date_class):\n            raise TypeError(\"date argument must be a date instance\")\n        if not isinstance(time, _time_class):\n            raise TypeError(\"time argument must be a time instance\")\n        return cls(date.year, date.month, date.day,\n                   time.hour, time.minute, time.second, time.microsecond,\n                   time.tzinfo)\n    def timetuple(self):\n        \"Return local time tuple compatible with time.localtime().\"\n        dst = self.dst()\n        if dst is None:\n            dst = -1\n        elif dst:\n            dst = 1\n        else:\n            dst = 0\n        return _build_struct_time(self.year, self.month, self.day,\n                                  self.hour, self.minute, self.second,\n                                  dst)\n    def timestamp(self):\n        \"Return POSIX timestamp as float\"\n        if self._tzinfo is None:\n            return _time.mktime((self.year, self.month, self.day,\n                                 self.hour, self.minute, self.second,\n                                 -1, -1, -1)) + self.microsecond / 1e6\n        else:\n            return (self - _EPOCH).total_seconds()\n    def utctimetuple(self):\n        \"Return UTC time tuple compatible with time.gmtime().\"\n        offset = self.utcoffset()\n        if offset:\n            self -= offset\n        y, m, d = self.year, self.month, self.day\n        hh, mm, ss = self.hour, self.minute, self.second\n        return _build_struct_time(y, m, d, hh, mm, ss, 0)\n    def date(self):\n        \"Return the date part.\"\n        return date(self._year, self._month, self._day)\n    def time(self):\n        \"Return the time part, with tzinfo None.\"\n        return time(self.hour, self.minute, self.second, self.microsecond)\n    def timetz(self):\n        \"Return the time part, with same tzinfo.\"\n        return time(self.hour, self.minute, self.second, self.microsecond,\n                    self._tzinfo)\n    def replace(self, year=None, month=None, day=None, hour=None,\n                minute=None, second=None, microsecond=None, tzinfo=True):\n        \"\"\"Return a new datetime with new values for the specified fields.\"\"\"\n        if year is None:\n            year = self.year\n        if month is None:\n            month = self.month\n        if day is None:\n            day = self.day\n        if hour is None:\n            hour = self.hour\n        if minute is None:\n            minute = self.minute\n        if second is None:\n            second = self.second\n        if microsecond is None:\n            microsecond = self.microsecond\n        if tzinfo is True:\n            tzinfo = self.tzinfo\n        _check_date_fields(year, month, day)\n        _check_time_fields(hour, minute, second, microsecond)\n        _check_tzinfo_arg(tzinfo)\n        return datetime(year, month, day, hour, minute, second,\n                          microsecond, tzinfo)\n    def astimezone(self, tz=None):\n        if tz is None:\n            if self.tzinfo is None:\n                raise ValueError(\"astimezone() requires an aware datetime\")\n            ts = (self - _EPOCH) // timedelta(seconds=1)\n            localtm = _time.localtime(ts)\n            local = datetime(*localtm[:6])\n            try:\n                gmtoff = localtm.tm_gmtoff\n                zone = localtm.tm_zone\n            except AttributeError:\n                delta = local - datetime(*_time.gmtime(ts)[:6])\n                dst = _time.daylight and localtm.tm_isdst > 0\n                gmtoff = -(_time.altzone if dst else _time.timezone)\n                if delta == timedelta(seconds=gmtoff):\n                    tz = timezone(delta, _time.tzname[dst])\n                else:\n                    tz = timezone(delta)\n            else:\n                tz = timezone(timedelta(seconds=gmtoff), zone)\n        elif not isinstance(tz, tzinfo):\n            raise TypeError(\"tz argument must be an instance of tzinfo\")\n        mytz = self.tzinfo\n        if mytz is None:\n            raise ValueError(\"astimezone() requires an aware datetime\")\n        if tz is mytz:\n            return self\n        myoffset = self.utcoffset()\n        if myoffset is None:\n            raise ValueError(\"astimezone() requires an aware datetime\")\n        utc = (self - myoffset).replace(tzinfo=tz)\n        return tz.fromutc(utc)\n    def ctime(self):\n        \"Return ctime() style string.\"\n        weekday = self.toordinal() % 7 or 7\n        return \"%s %s %2d %02d:%02d:%02d %04d\" % (\n            _DAYNAMES[weekday],\n            _MONTHNAMES[self._month],\n            self._day,\n            self._hour, self._minute, self._second,\n            self._year)\n    def isoformat(self, sep='T'):\n        \"\"\"Return the time formatted according to ISO.\n        This is 'YYYY-MM-DD HH:MM:SS.mmmmmm', or 'YYYY-MM-DD HH:MM:SS' if\n        self.microsecond == 0.\n        If self.tzinfo is not None, the UTC offset is also attached, giving\n        'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM' or 'YYYY-MM-DD HH:MM:SS+HH:MM'.\n        Optional argument sep specifies the separator between date and\n        time, default 'T'.\n        \"\"\"\n        s = (\"%04d-%02d-%02d%c\" % (self._year, self._month, self._day,\n                                  sep) +\n                _format_time(self._hour, self._minute, self._second,\n                             self._microsecond))\n        off = self.utcoffset()\n        if off is not None:\n            if off.days < 0:\n                sign = \"-\"\n                off = -off\n            else:\n                sign = \"+\"\n            hh, mm = divmod(off, timedelta(hours=1))\n            assert not mm % timedelta(minutes=1), \"whole minute\"\n            mm //= timedelta(minutes=1)\n            s += \"%s%02d:%02d\" % (sign, hh, mm)\n        return s\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\"\"\"\n        L = [self._year, self._month, self._day, # These are never zero\n             self._hour, self._minute, self._second, self._microsecond]\n        if L[-1] == 0:\n            del L[-1]\n        if L[-1] == 0:\n            del L[-1]\n        s = \", \".join(map(str, L))\n        s = \"%s(%s)\" % ('datetime.' + self.__class__.__name__, s)\n        if self._tzinfo is not None:\n            assert s[-1:] == \")\"\n            s = s[:-1] + \", tzinfo=%r\" % self._tzinfo + \")\"\n        return s\n    def __str__(self):\n        \"Convert to string, for str().\"\n        return self.isoformat(sep=' ')\n    @classmethod\n    def strptime(cls, date_string, format):\n        'string, format -> new datetime parsed from a string (like time.strptime()).'\n        import _strptime\n        return _strptime._strptime_datetime(cls, date_string, format)\n    def utcoffset(self):\n        \"\"\"Return the timezone offset in minutes east of UTC (negative west of\n        UTC).\"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.utcoffset(self)\n        _check_utc_offset(\"utcoffset\", offset)\n        return offset\n    def tzname(self):\n        \"\"\"Return the timezone name.\n        Note that the name is 100% informational -- there's no requirement that\n        it mean anything in particular. For example, \"GMT\", \"UTC\", \"-500\",\n        \"-5:00\", \"EDT\", \"US/Eastern\", \"America/New York\" are all valid replies.\n        \"\"\"\n        name = _call_tzinfo_method(self._tzinfo, \"tzname\", self)\n        _check_tzname(name)\n        return name\n    def dst(self):\n        \"\"\"Return 0 if DST is not in effect, or the DST offset (in minutes\n        eastward) if DST is in effect.\n        This is purely informational; the DST offset has already been added to\n        the UTC offset returned by utcoffset() if applicable, so there's no\n        need to consult dst() unless you're interested in displaying the DST\n        info.\n        \"\"\"\n        if self._tzinfo is None:\n            return None\n        offset = self._tzinfo.dst(self)\n        _check_utc_offset(\"dst\", offset)\n        return offset\n    def __eq__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other, allow_mixed=True) == 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            return False\n    def __ne__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other, allow_mixed=True) != 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            return True\n    def __le__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) <= 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n    def __lt__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) < 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n    def __ge__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) >= 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n    def __gt__(self, other):\n        if isinstance(other, datetime):\n            return self._cmp(other) > 0\n        elif not isinstance(other, date):\n            return NotImplemented\n        else:\n            _cmperror(self, other)\n    def _cmp(self, other, allow_mixed=False):\n        assert isinstance(other, datetime)\n        mytz = self._tzinfo\n        ottz = other._tzinfo\n        myoff = otoff = None\n        if mytz is ottz:\n            base_compare = True\n        else:\n            myoff = self.utcoffset()\n            otoff = other.utcoffset()\n            base_compare = myoff == otoff\n        if base_compare:\n            return _cmp((self._year, self._month, self._day,\n                         self._hour, self._minute, self._second,\n                         self._microsecond),\n                       (other._year, other._month, other._day,\n                        other._hour, other._minute, other._second,\n                        other._microsecond))\n        if myoff is None or otoff is None:\n            if allow_mixed:\n                return 2 # arbitrary non-zero value\n            else:\n                raise TypeError(\"cannot compare naive and aware datetimes\")\n        diff = self - other     # this will take offsets into account\n        if diff.days < 0:\n            return -1\n        return diff and 1 or 0\n    def __add__(self, other):\n        \"Add a datetime and a timedelta.\"\n        if not isinstance(other, timedelta):\n            return NotImplemented\n        delta = timedelta(self.toordinal(),\n                          hours=self._hour,\n                          minutes=self._minute,\n                          seconds=self._second,\n                          microseconds=self._microsecond)\n        delta += other\n        hour, rem = divmod(delta.seconds, 3600)\n        minute, second = divmod(rem, 60)\n        if 0 < delta.days <= _MAXORDINAL:\n            return datetime.combine(date.fromordinal(delta.days),\n                                    time(hour, minute, second,\n                                         delta.microseconds,\n                                         tzinfo=self._tzinfo))\n        raise OverflowError(\"result out of range\")\n    __radd__ = __add__\n    def __sub__(self, other):\n        \"Subtract two datetimes, or a datetime and a timedelta.\"\n        if not isinstance(other, datetime):\n            if isinstance(other, timedelta):\n                return self + -other\n            return NotImplemented\n        days1 = self.toordinal()\n        days2 = other.toordinal()\n        secs1 = self._second + self._minute * 60 + self._hour * 3600\n        secs2 = other._second + other._minute * 60 + other._hour * 3600\n        base = timedelta(days1 - days2,\n                         secs1 - secs2,\n                         self._microsecond - other._microsecond)\n        if self._tzinfo is other._tzinfo:\n            return base\n        myoff = self.utcoffset()\n        otoff = other.utcoffset()\n        if myoff == otoff:\n            return base\n        if myoff is None or otoff is None:\n            raise TypeError(\"cannot mix naive and timezone-aware time\")\n        return base + otoff - myoff\n    def __hash__(self):\n        tzoff = self.utcoffset()\n        if tzoff is None:\n            return hash(self._getstate()[0])\n        days = _ymd2ord(self.year, self.month, self.day)\n        seconds = self.hour * 3600 + self.minute * 60 + self.second\n        return hash(timedelta(days, seconds, self.microsecond) - tzoff)\n    def _getstate(self):\n        yhi, ylo = divmod(self._year, 256)\n        us2, us3 = divmod(self._microsecond, 256)\n        us1, us2 = divmod(us2, 256)\n        basestate = bytes([yhi, ylo, self._month, self._day,\n                           self._hour, self._minute, self._second,\n                           us1, us2, us3])\n        if self._tzinfo is None:\n            return (basestate,)\n        else:\n            return (basestate, self._tzinfo)\n    def __setstate(self, string, tzinfo):\n        (yhi, ylo, self._month, self._day, self._hour,\n         self._minute, self._second, us1, us2, us3) = string\n        self._year = yhi * 256 + ylo\n        self._microsecond = (((us1 << 8) | us2) << 8) | us3\n        if tzinfo is None or isinstance(tzinfo, _tzinfo_class):\n            self._tzinfo = tzinfo\n        else:\n            raise TypeError(\"bad tzinfo state arg %r\" % tzinfo)\n    def __reduce__(self):\n        return (self.__class__, self._getstate())\ndatetime.min = datetime(1, 1, 1)\ndatetime.max = datetime(9999, 12, 31, 23, 59, 59, 999999)\ndatetime.resolution = timedelta(microseconds=1)\ndef _isoweek1monday(year):\n    THURSDAY = 3\n    firstday = _ymd2ord(year, 1, 1)\n    firstweekday = (firstday + 6) % 7 # See weekday() above\n    week1monday = firstday - firstweekday\n    if firstweekday > THURSDAY:\n        week1monday += 7\n    return week1monday\nclass timezone(tzinfo):\n    __slots__ = '_offset', '_name'\n    _Omitted = object()\n    def __new__(cls, offset, name=_Omitted):\n        if not isinstance(offset, timedelta):\n            raise TypeError(\"offset must be a timedelta\")\n        if name is cls._Omitted:\n            if not offset:\n                return cls.utc\n            name = None\n        elif not isinstance(name, str):\n            raise TypeError(\"name must be a string\")\n        if not cls._minoffset <= offset <= cls._maxoffset:\n            raise ValueError(\"offset must be a timedelta\"\n                             \" strictly between -timedelta(hours=24) and\"\n                             \" timedelta(hours=24).\")\n        if (offset.microseconds != 0 or\n            offset.seconds % 60 != 0):\n            raise ValueError(\"offset must be a timedelta\"\n                             \" representing a whole number of minutes\")\n        return cls._create(offset, name)\n    @classmethod\n    def _create(cls, offset, name=None):\n        self = tzinfo.__new__(cls)\n        self._offset = offset\n        self._name = name\n        return self\n    def __getinitargs__(self):\n        \"\"\"pickle support\"\"\"\n        if self._name is None:\n            return (self._offset,)\n        return (self._offset, self._name)\n    def __eq__(self, other):\n        if type(other) != timezone:\n            return False\n        return self._offset == other._offset\n    def __hash__(self):\n        return hash(self._offset)\n    def __repr__(self):\n        \"\"\"Convert to formal string, for repr().\n        >>> tz = timezone.utc\n        >>> repr(tz)\n        'datetime.timezone.utc'\n        >>> tz = timezone(timedelta(hours=-5), 'EST')\n        >>> repr(tz)\n        \"datetime.timezone(datetime.timedelta(-1, 68400), 'EST')\"\n        \"\"\"\n        if self is self.utc:\n            return 'datetime.timezone.utc'\n        if self._name is None:\n            return \"%s(%r)\" % ('datetime.' + self.__class__.__name__,\n                               self._offset)\n        return \"%s(%r, %r)\" % ('datetime.' + self.__class__.__name__,\n                               self._offset, self._name)\n    def __str__(self):\n        return self.tzname(None)\n    def utcoffset(self, dt):\n        if isinstance(dt, datetime) or dt is None:\n            return self._offset\n        raise TypeError(\"utcoffset() argument must be a datetime instance\"\n                        \" or None\")\n    def tzname(self, dt):\n        if isinstance(dt, datetime) or dt is None:\n            if self._name is None:\n                return self._name_from_offset(self._offset)\n            return self._name\n        raise TypeError(\"tzname() argument must be a datetime instance\"\n                        \" or None\")\n    def dst(self, dt):\n        if isinstance(dt, datetime) or dt is None:\n            return None\n        raise TypeError(\"dst() argument must be a datetime instance\"\n                        \" or None\")\n    def fromutc(self, dt):\n        if isinstance(dt, datetime):\n            if dt.tzinfo is not self:\n                raise ValueError(\"fromutc: dt.tzinfo \"\n                                 \"is not self\")\n            return dt + self._offset\n        raise TypeError(\"fromutc() argument must be a datetime instance\"\n                        \" or None\")\n    _maxoffset = timedelta(hours=23, minutes=59)\n    _minoffset = -_maxoffset\n    @staticmethod\n    def _name_from_offset(delta):\n        if delta < timedelta(0):\n            sign = '-'\n            delta = -delta\n        else:\n            sign = '+'\n        hours, rest = divmod(delta, timedelta(hours=1))\n        minutes = rest // timedelta(minutes=1)\n        return 'UTC{}{:02d}:{:02d}'.format(sign, hours, minutes)\ntimezone.utc = timezone._create(timedelta(0))\ntimezone.min = timezone._create(timezone._minoffset)\ntimezone.max = timezone._create(timezone._maxoffset)\n_EPOCH = datetime(1970, 1, 1, tzinfo=timezone.utc)\n\"\"\"\nSome time zone algebra.  For a datetime x, let\n    x.n = x stripped of its timezone -- its naive time.\n    x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n          return None\n    x.d = x.dst(), and assuming that doesn't raise an exception or\n          return None\n    x.s = x's standard offset, x.o - x.d\nNow some derived rules, where k is a duration (timedelta).\n1. x.o = x.s + x.d\n   This follows from the definition of x.s.\n2. If x and y have the same tzinfo member, x.s = y.s.\n   This is actually a requirement, an assumption we need to make about\n   sane tzinfo classes.\n3. The naive UTC time corresponding to x is x.n - x.o.\n   This is again a requirement for a sane tzinfo class.\n4. (x+k).s = x.s\n   This follows from #2, and that datimetimetz+timedelta preserves tzinfo.\n5. (x+k).n = x.n + k\n   Again follows from how arithmetic is defined.\nNow we can explain tz.fromutc(x).  Let's assume it's an interesting case\n(meaning that the various tzinfo methods exist, and don't blow up or return\nNone when called).\nThe function wants to return a datetime y with timezone tz, equivalent to x.\nx is already in UTC.\nBy #3, we want\n    y.n - y.o = x.n                             [1]\nThe algorithm starts by attaching tz to x.n, and calling that y.  So\nx.n = y.n at the start.  Then it wants to add a duration k to y, so that [1]\nbecomes true; in effect, we want to solve [2] for k:\n   (y+k).n - (y+k).o = x.n                      [2]\nBy #1, this is the same as\n   (y+k).n - ((y+k).s + (y+k).d) = x.n          [3]\nBy #5, (y+k).n = y.n + k, which equals x.n + k because x.n=y.n at the start.\nSubstituting that into [3],\n   x.n + k - (y+k).s - (y+k).d = x.n; the x.n terms cancel, leaving\n   k - (y+k).s - (y+k).d = 0; rearranging,\n   k = (y+k).s - (y+k).d; by #4, (y+k).s == y.s, so\n   k = y.s - (y+k).d\nOn the RHS, (y+k).d can't be computed directly, but y.s can be, and we\napproximate k by ignoring the (y+k).d term at first.  Note that k can't be\nvery large, since all offset-returning methods return a duration of magnitude\nless than 24 hours.  For that reason, if y is firmly in std time, (y+k).d must\nbe 0, so ignoring it has no consequence then.\nIn any case, the new value is\n    z = y + y.s                                 [4]\nIt's helpful to step back at look at [4] from a higher level:  it's simply\nmapping from UTC to tz's standard time.\nAt this point, if\n    z.n - z.o = x.n                             [5]\nwe have an equivalent time, and are almost done.  The insecurity here is\nat the start of daylight time.  Picture US Eastern for concreteness.  The wall\ntime jumps from 1:59 to 3:00, and wall hours of the form 2:MM don't make good\nsense then.  The docs ask that an Eastern tzinfo class consider such a time to\nbe EDT (because it's \"after 2\"), which is a redundant spelling of 1:MM EST\non the day DST starts.  We want to return the 1:MM EST spelling because that's\nthe only spelling that makes sense on the local wall clock.\nIn fact, if [5] holds at this point, we do have the standard-time spelling,\nbut that takes a bit of proof.  We first prove a stronger result.  What's the\ndifference between the LHS and RHS of [5]?  Let\n    diff = x.n - (z.n - z.o)                    [6]\nNow\n    z.n =                       by [4]\n    (y + y.s).n =               by #5\n    y.n + y.s =                 since y.n = x.n\n    x.n + y.s =                 since z and y are have the same tzinfo member,\n                                    y.s = z.s by #2\n    x.n + z.s\nPlugging that back into [6] gives\n    diff =\n    x.n - ((x.n + z.s) - z.o) =     expanding\n    x.n - x.n - z.s + z.o =         cancelling\n    - z.s + z.o =                   by #2\n    z.d\nSo diff = z.d.\nIf [5] is true now, diff = 0, so z.d = 0 too, and we have the standard-time\nspelling we wanted in the endcase described above.  We're done.  Contrarily,\nif z.d = 0, then we have a UTC equivalent, and are also done.\nIf [5] is not true now, diff = z.d != 0, and z.d is the offset we need to\nadd to z (in effect, z is in tz's standard time, and we need to shift the\nlocal clock into tz's daylight time).\nLet\n    z' = z + z.d = z + diff                     [7]\nand we can again ask whether\n    z'.n - z'.o = x.n                           [8]\nIf so, we're done.  If not, the tzinfo class is insane, according to the\nassumptions we've made.  This also requires a bit of proof.  As before, let's\ncompute the difference between the LHS and RHS of [8] (and skipping some of\nthe justifications for the kinds of substitutions we've done several times\nalready):\n    diff' = x.n - (z'.n - z'.o) =           replacing z'.n via [7]\n            x.n  - (z.n + diff - z'.o) =    replacing diff via [6]\n            x.n - (z.n + x.n - (z.n - z.o) - z'.o) =\n            x.n - z.n - x.n + z.n - z.o + z'.o =    cancel x.n\n            - z.n + z.n - z.o + z'.o =              cancel z.n\n            - z.o + z'.o =                      #1 twice\n            -z.s - z.d + z'.s + z'.d =          z and z' have same tzinfo\n            z'.d - z.d\nSo z' is UTC-equivalent to x iff z'.d = z.d at this point.  If they are equal,\nwe've found the UTC-equivalent so are done.  In fact, we stop with [7] and\nreturn z', not bothering to compute z'.d.\nHow could z.d and z'd differ?  z' = z + z.d [7], so merely moving z' by\na dst() offset, and starting *from* a time already in DST (we know z.d != 0),\nwould have to change the result dst() returns:  we start in DST, and moving\na little further into it takes us out of DST.\nThere isn't a sane case where this can happen.  The closest it gets is at\nthe end of DST, where there's an hour in UTC with no spelling in a hybrid\ntzinfo class.  In US Eastern, that's 5:MM UTC = 0:MM EST = 1:MM EDT.  During\nthat hour, on an Eastern clock 1:MM is taken as being in standard time (6:MM\nUTC) because the docs insist on that, but 0:MM is taken as being in daylight\ntime (4:MM UTC).  There is no local time mapping to 5:MM UTC.  The local\nclock jumps from 1:59 back to 1:00 again, and repeats the 1:MM hour in\nstandard time.  Since that's what the local clock *does*, we want to map both\nUTC hours 5:MM and 6:MM to 1:MM Eastern.  The result is ambiguous\nin local time, but so it goes -- it's the way the local clock works.\nWhen x = 5:MM UTC is the input to this algorithm, x.o=0, y.o=-5 and y.d=0,\nso z=0:MM.  z.d=60 (minutes) then, so [5] doesn't hold and we keep going.\nz' = z + z.d = 1:MM then, and z'.d=0, and z'.d - z.d = -60 != 0 so [8]\n(correctly) concludes that z' is not UTC-equivalent to x.\nBecause we know z.d said z was in daylight time (else [5] would have held and\nwe would have stopped then), and we know z.d != z'.d (else [8] would have held\nand we have stopped then), and there are only 2 possible values dst() can\nreturn in Eastern, it follows that z'.d must be 0 (which it is in the example,\nbut the reasoning doesn't depend on the example -- it depends on there being\ntwo possible dst() outcomes, one zero and the other non-zero).  Therefore\nz' must be in standard time, and is the spelling we want in this case.\nNote again that z' is not UTC-equivalent as far as the hybrid tzinfo class is\nconcerned (because it takes z' as being in standard time rather than the\ndaylight time we intend here), but returning it gives the real-life \"local\nclock repeats an hour\" behavior when mapping the \"unspellable\" UTC hour into\ntz.\nWhen the input is 6:MM, z=1:MM and z.d=0, and we stop at once, again with\nthe 1:MM standard time spelling we want.\nSo how can this break?  One of the assumptions must be violated.  Two\npossibilities:\n1) [2] effectively says that y.s is invariant across all y belong to a given\n   time zone.  This isn't true if, for political reasons or continental drift,\n   a region decides to change its base offset from UTC.\n2) There may be versions of \"double daylight\" time where the tail end of\n   the analysis gives up a step too early.  I haven't thought about that\n   enough to say.\nIn any case, it's clear that the default fromutc() is strong enough to handle\n\"almost all\" time zones:  so long as the standard offset is invariant, it\ndoesn't matter if daylight time transition points change from year to year, or\nif daylight time is skipped in some years; it doesn't matter how large or\nsmall dst() may get within its bounds; and it doesn't even matter if some\nperverse time zone returns a negative dst()).  So a breaking case must be\npretty bizarre, and a tzinfo subclass can override fromutc() if it is.\n\"\"\"\ntry:\n    from _datetime import *\nexcept ImportError:\n    pass\n", "/Lib/logging/config.py": "\"\"\"\r\nConfiguration functions for the logging package for Python. The core package\r\nis based on PEP 282 and comments thereto in comp.lang.python, and influenced\r\nby Apache's log4j system.\r\nCopyright (C) 2001-2010 Vinay Sajip. All Rights Reserved.\r\nTo use, simply 'import logging' and log away!\r\n\"\"\"\r\nimport sys, logging, logging.handlers, socket, struct, traceback, re\r\nimport io\r\ntry:\r\n    import _thread as thread\r\n    import threading\r\nexcept ImportError: #pragma: no cover\r\n    thread = None\r\nfrom socketserver import ThreadingTCPServer, StreamRequestHandler\r\nDEFAULT_LOGGING_CONFIG_PORT = 9030\r\nif sys.platform == \"win32\":\r\n    RESET_ERROR = 10054   #WSAECONNRESET\r\nelse:\r\n    RESET_ERROR = 104     #ECONNRESET\r\n_listener = None\r\ndef fileConfig(fname, defaults=None, disable_existing_loggers=True):\r\n    \"\"\"\r\n    Read the logging configuration from a ConfigParser-format file.\r\n    This can be called several times from an application, allowing an end user\r\n    the ability to select from various pre-canned configurations (if the\r\n    developer provides a mechanism to present the choices and load the chosen\r\n    configuration).\r\n    \"\"\"\r\n    import configparser\r\n    cp = configparser.ConfigParser(defaults)\r\n    if hasattr(fname, 'readline'):\r\n        cp.read_file(fname)\r\n    else:\r\n        cp.read(fname)\r\n    formatters = _create_formatters(cp)\r\n    logging._acquireLock()\r\n    try:\r\n        logging._handlers.clear()\r\n        del logging._handlerList[:]\r\n        handlers = _install_handlers(cp, formatters)\r\n        _install_loggers(cp, handlers, disable_existing_loggers)\r\n    finally:\r\n        logging._releaseLock()\r\ndef _resolve(name):\r\n    \"\"\"Resolve a dotted name to a global object.\"\"\"\r\n    name = name.split('.')\r\n    used = name.pop(0)\r\n    found = __import__(used)\r\n    for n in name:\r\n        used = used + '.' + n\r\n        try:\r\n            found = getattr(found, n)\r\n        except AttributeError:\r\n            __import__(used)\r\n            found = getattr(found, n)\r\n    return found\r\ndef _strip_spaces(alist):\r\n    return map(lambda x: x.strip(), alist)\r\ndef _create_formatters(cp):\r\n    \"\"\"Create and return formatters\"\"\"\r\n    flist = cp[\"formatters\"][\"keys\"]\r\n    if not len(flist):\r\n        return {}\r\n    flist = flist.split(\",\")\r\n    flist = _strip_spaces(flist)\r\n    formatters = {}\r\n    for form in flist:\r\n        sectname = \"formatter_%s\" % form\r\n        fs = cp.get(sectname, \"format\", raw=True, fallback=None)\r\n        dfs = cp.get(sectname, \"datefmt\", raw=True, fallback=None)\r\n        c = logging.Formatter\r\n        class_name = cp[sectname].get(\"class\")\r\n        if class_name:\r\n            c = _resolve(class_name)\r\n        f = c(fs, dfs)\r\n        formatters[form] = f\r\n    return formatters\r\ndef _install_handlers(cp, formatters):\r\n    \"\"\"Install and return handlers\"\"\"\r\n    hlist = cp[\"handlers\"][\"keys\"]\r\n    if not len(hlist):\r\n        return {}\r\n    hlist = hlist.split(\",\")\r\n    hlist = _strip_spaces(hlist)\r\n    handlers = {}\r\n    fixups = [] #for inter-handler references\r\n    for hand in hlist:\r\n        section = cp[\"handler_%s\" % hand]\r\n        klass = section[\"class\"]\r\n        fmt = section.get(\"formatter\", \"\")\r\n        try:\r\n            klass = eval(klass, vars(logging))\r\n        except (AttributeError, NameError):\r\n            klass = _resolve(klass)\r\n        args = section[\"args\"]\r\n        args = eval(args, vars(logging))\r\n        h = klass(*args)\r\n        if \"level\" in section:\r\n            level = section[\"level\"]\r\n            h.setLevel(logging._levelNames[level])\r\n        if len(fmt):\r\n            h.setFormatter(formatters[fmt])\r\n        if issubclass(klass, logging.handlers.MemoryHandler):\r\n            target = section.get(\"target\", \"\")\r\n            if len(target): #the target handler may not be loaded yet, so keep for later...\r\n                fixups.append((h, target))\r\n        handlers[hand] = h\r\n    for h, t in fixups:\r\n        h.setTarget(handlers[t])\r\n    return handlers\r\ndef _handle_existing_loggers(existing, child_loggers, disable_existing):\r\n    \"\"\"\r\n    When (re)configuring logging, handle loggers which were in the previous\r\n    configuration but are not in the new configuration. There's no point\r\n    deleting them as other threads may continue to hold references to them;\r\n    and by disabling them, you stop them doing any logging.\r\n    However, don't disable children of named loggers, as that's probably not\r\n    what was intended by the user. Also, allow existing loggers to NOT be\r\n    disabled if disable_existing is false.\r\n    \"\"\"\r\n    root = logging.root\r\n    for log in existing:\r\n        logger = root.manager.loggerDict[log]\r\n        if log in child_loggers:\r\n            logger.level = logging.NOTSET\r\n            logger.handlers = []\r\n            logger.propagate = True\r\n        elif disable_existing:\r\n            logger.disabled = True\r\ndef _install_loggers(cp, handlers, disable_existing):\r\n    \"\"\"Create and install loggers\"\"\"\r\n    llist = cp[\"loggers\"][\"keys\"]\r\n    llist = llist.split(\",\")\r\n    llist = list(map(lambda x: x.strip(), llist))\r\n    llist.remove(\"root\")\r\n    section = cp[\"logger_root\"]\r\n    root = logging.root\r\n    log = root\r\n    if \"level\" in section:\r\n        level = section[\"level\"]\r\n        log.setLevel(logging._levelNames[level])\r\n    for h in root.handlers[:]:\r\n        root.removeHandler(h)\r\n    hlist = section[\"handlers\"]\r\n    if len(hlist):\r\n        hlist = hlist.split(\",\")\r\n        hlist = _strip_spaces(hlist)\r\n        for hand in hlist:\r\n            log.addHandler(handlers[hand])\r\n    existing = list(root.manager.loggerDict.keys())\r\n    existing.sort()\r\n    child_loggers = []\r\n    for log in llist:\r\n        section = cp[\"logger_%s\" % log]\r\n        qn = section[\"qualname\"]\r\n        propagate = section.getint(\"propagate\", fallback=1)\r\n        logger = logging.getLogger(qn)\r\n        if qn in existing:\r\n            i = existing.index(qn) + 1 # start with the entry after qn\r\n            prefixed = qn + \".\"\r\n            pflen = len(prefixed)\r\n            num_existing = len(existing)\r\n            while i < num_existing:\r\n                if existing[i][:pflen] == prefixed:\r\n                    child_loggers.append(existing[i])\r\n                i += 1\r\n            existing.remove(qn)\r\n        if \"level\" in section:\r\n            level = section[\"level\"]\r\n            logger.setLevel(logging._levelNames[level])\r\n        for h in logger.handlers[:]:\r\n            logger.removeHandler(h)\r\n        logger.propagate = propagate\r\n        logger.disabled = 0\r\n        hlist = section[\"handlers\"]\r\n        if len(hlist):\r\n            hlist = hlist.split(\",\")\r\n            hlist = _strip_spaces(hlist)\r\n            for hand in hlist:\r\n                logger.addHandler(handlers[hand])\r\n    _handle_existing_loggers(existing, child_loggers, disable_existing)\r\nIDENTIFIER = re.compile('^[a-z_][a-z0-9_]*$', re.I)\r\ndef valid_ident(s):\r\n    m = IDENTIFIER.match(s)\r\n    if not m:\r\n        raise ValueError('Not a valid Python identifier: %r' % s)\r\n    return True\r\nclass ConvertingDict(dict):\r\n    \"\"\"A converting dictionary wrapper.\"\"\"\r\n    def __getitem__(self, key):\r\n        value = dict.__getitem__(self, key)\r\n        result = self.configurator.convert(value)\r\n        if value is not result:\r\n            self[key] = result\r\n            if type(result) in (ConvertingDict, ConvertingList,\r\n                                ConvertingTuple):\r\n                result.parent = self\r\n                result.key = key\r\n        return result\r\n    def get(self, key, default=None):\r\n        value = dict.get(self, key, default)\r\n        result = self.configurator.convert(value)\r\n        if value is not result:\r\n            self[key] = result\r\n            if type(result) in (ConvertingDict, ConvertingList,\r\n                                ConvertingTuple):\r\n                result.parent = self\r\n                result.key = key\r\n        return result\r\n    def pop(self, key, default=None):\r\n        value = dict.pop(self, key, default)\r\n        result = self.configurator.convert(value)\r\n        if value is not result:\r\n            if type(result) in (ConvertingDict, ConvertingList,\r\n                                ConvertingTuple):\r\n                result.parent = self\r\n                result.key = key\r\n        return result\r\nclass ConvertingList(list):\r\n    \"\"\"A converting list wrapper.\"\"\"\r\n    def __getitem__(self, key):\r\n        value = list.__getitem__(self, key)\r\n        result = self.configurator.convert(value)\r\n        if value is not result:\r\n            self[key] = result\r\n            if type(result) in (ConvertingDict, ConvertingList,\r\n                                ConvertingTuple):\r\n                result.parent = self\r\n                result.key = key\r\n        return result\r\n    def pop(self, idx=-1):\r\n        value = list.pop(self, idx)\r\n        result = self.configurator.convert(value)\r\n        if value is not result:\r\n            if type(result) in (ConvertingDict, ConvertingList,\r\n                                ConvertingTuple):\r\n                result.parent = self\r\n        return result\r\nclass ConvertingTuple(tuple):\r\n    \"\"\"A converting tuple wrapper.\"\"\"\r\n    def __getitem__(self, key):\r\n        value = tuple.__getitem__(self, key)\r\n        result = self.configurator.convert(value)\r\n        if value is not result:\r\n            if type(result) in (ConvertingDict, ConvertingList,\r\n                                ConvertingTuple):\r\n                result.parent = self\r\n                result.key = key\r\n        return result\r\nclass BaseConfigurator(object):\r\n    \"\"\"\r\n    The configurator base class which defines some useful defaults.\r\n    \"\"\"\r\n    CONVERT_PATTERN = re.compile(r'^(?P<prefix>[a-z]+)://(?P<suffix>.*)$')\r\n    WORD_PATTERN = re.compile(r'^\\s*(\\w+)\\s*')\r\n    DOT_PATTERN = re.compile(r'^\\.\\s*(\\w+)\\s*')\r\n    INDEX_PATTERN = re.compile(r'^\\[\\s*(\\w+)\\s*\\]\\s*')\r\n    DIGIT_PATTERN = re.compile(r'^\\d+$')\r\n    value_converters = {\r\n        'ext' : 'ext_convert',\r\n        'cfg' : 'cfg_convert',\r\n    }\r\n    importer = staticmethod(__import__)\r\n    def __init__(self, config):\r\n        self.config = ConvertingDict(config)\r\n        self.config.configurator = self\r\n    def resolve(self, s):\r\n        \"\"\"\r\n        Resolve strings to objects using standard import and attribute\r\n        syntax.\r\n        \"\"\"\r\n        name = s.split('.')\r\n        used = name.pop(0)\r\n        try:\r\n            found = self.importer(used)\r\n            for frag in name:\r\n                used += '.' + frag\r\n                try:\r\n                    found = getattr(found, frag)\r\n                except AttributeError:\r\n                    self.importer(used)\r\n                    found = getattr(found, frag)\r\n            return found\r\n        except ImportError:\r\n            e, tb = sys.exc_info()[1:]\r\n            v = ValueError('Cannot resolve %r: %s' % (s, e))\r\n            v.__cause__, v.__traceback__ = e, tb\r\n            raise v\r\n    def ext_convert(self, value):\r\n        \"\"\"Default converter for the ext:// protocol.\"\"\"\r\n        return self.resolve(value)\r\n    def cfg_convert(self, value):\r\n        \"\"\"Default converter for the cfg:// protocol.\"\"\"\r\n        rest = value\r\n        m = self.WORD_PATTERN.match(rest)\r\n        if m is None:\r\n            raise ValueError(\"Unable to convert %r\" % value)\r\n        else:\r\n            rest = rest[m.end():]\r\n            d = self.config[m.groups()[0]]\r\n            while rest:\r\n                m = self.DOT_PATTERN.match(rest)\r\n                if m:\r\n                    d = d[m.groups()[0]]\r\n                else:\r\n                    m = self.INDEX_PATTERN.match(rest)\r\n                    if m:\r\n                        idx = m.groups()[0]\r\n                        if not self.DIGIT_PATTERN.match(idx):\r\n                            d = d[idx]\r\n                        else:\r\n                            try:\r\n                                n = int(idx) # try as number first (most likely)\r\n                                d = d[n]\r\n                            except TypeError:\r\n                                d = d[idx]\r\n                if m:\r\n                    rest = rest[m.end():]\r\n                else:\r\n                    raise ValueError('Unable to convert '\r\n                                     '%r at %r' % (value, rest))\r\n        return d\r\n    def convert(self, value):\r\n        \"\"\"\r\n        Convert values to an appropriate type. dicts, lists and tuples are\r\n        replaced by their converting alternatives. Strings are checked to\r\n        see if they have a conversion format and are converted if they do.\r\n        \"\"\"\r\n        if not isinstance(value, ConvertingDict) and isinstance(value, dict):\r\n            value = ConvertingDict(value)\r\n            value.configurator = self\r\n        elif not isinstance(value, ConvertingList) and isinstance(value, list):\r\n            value = ConvertingList(value)\r\n            value.configurator = self\r\n        elif not isinstance(value, ConvertingTuple) and\\\r\n                 isinstance(value, tuple):\r\n            value = ConvertingTuple(value)\r\n            value.configurator = self\r\n        elif isinstance(value, str): # str for py3k\r\n            m = self.CONVERT_PATTERN.match(value)\r\n            if m:\r\n                d = m.groupdict()\r\n                prefix = d['prefix']\r\n                converter = self.value_converters.get(prefix, None)\r\n                if converter:\r\n                    suffix = d['suffix']\r\n                    converter = getattr(self, converter)\r\n                    value = converter(suffix)\r\n        return value\r\n    def configure_custom(self, config):\r\n        \"\"\"Configure an object with a user-supplied factory.\"\"\"\r\n        c = config.pop('()')\r\n        if not callable(c):\r\n            c = self.resolve(c)\r\n        props = config.pop('.', None)\r\n        kwargs = dict([(k, config[k]) for k in config if valid_ident(k)])\r\n        result = c(**kwargs)\r\n        if props:\r\n            for name, value in props.items():\r\n                setattr(result, name, value)\r\n        return result\r\n    def as_tuple(self, value):\r\n        \"\"\"Utility function which converts lists to tuples.\"\"\"\r\n        if isinstance(value, list):\r\n            value = tuple(value)\r\n        return value\r\nclass DictConfigurator(BaseConfigurator):\r\n    \"\"\"\r\n    Configure logging using a dictionary-like object to describe the\r\n    configuration.\r\n    \"\"\"\r\n    def configure(self):\r\n        \"\"\"Do the configuration.\"\"\"\r\n        config = self.config\r\n        if 'version' not in config:\r\n            raise ValueError(\"dictionary doesn't specify a version\")\r\n        if config['version'] != 1:\r\n            raise ValueError(\"Unsupported version: %s\" % config['version'])\r\n        incremental = config.pop('incremental', False)\r\n        EMPTY_DICT = {}\r\n        logging._acquireLock()\r\n        try:\r\n            if incremental:\r\n                handlers = config.get('handlers', EMPTY_DICT)\r\n                for name in handlers:\r\n                    if name not in logging._handlers:\r\n                        raise ValueError('No handler found with '\r\n                                         'name %r'  % name)\r\n                    else:\r\n                        try:\r\n                            handler = logging._handlers[name]\r\n                            handler_config = handlers[name]\r\n                            level = handler_config.get('level', None)\r\n                            if level:\r\n                                handler.setLevel(logging._checkLevel(level))\r\n                        except Exception as e:\r\n                            raise ValueError('Unable to configure handler '\r\n                                             '%r: %s' % (name, e))\r\n                loggers = config.get('loggers', EMPTY_DICT)\r\n                for name in loggers:\r\n                    try:\r\n                        self.configure_logger(name, loggers[name], True)\r\n                    except Exception as e:\r\n                        raise ValueError('Unable to configure logger '\r\n                                         '%r: %s' % (name, e))\r\n                root = config.get('root', None)\r\n                if root:\r\n                    try:\r\n                        self.configure_root(root, True)\r\n                    except Exception as e:\r\n                        raise ValueError('Unable to configure root '\r\n                                         'logger: %s' % e)\r\n            else:\r\n                disable_existing = config.pop('disable_existing_loggers', True)\r\n                logging._handlers.clear()\r\n                del logging._handlerList[:]\r\n                formatters = config.get('formatters', EMPTY_DICT)\r\n                for name in formatters:\r\n                    try:\r\n                        formatters[name] = self.configure_formatter(\r\n                                                            formatters[name])\r\n                    except Exception as e:\r\n                        raise ValueError('Unable to configure '\r\n                                         'formatter %r: %s' % (name, e))\r\n                filters = config.get('filters', EMPTY_DICT)\r\n                for name in filters:\r\n                    try:\r\n                        filters[name] = self.configure_filter(filters[name])\r\n                    except Exception as e:\r\n                        raise ValueError('Unable to configure '\r\n                                         'filter %r: %s' % (name, e))\r\n                handlers = config.get('handlers', EMPTY_DICT)\r\n                for name in sorted(handlers):\r\n                    try:\r\n                        handler = self.configure_handler(handlers[name])\r\n                        handler.name = name\r\n                        handlers[name] = handler\r\n                    except Exception as e:\r\n                        raise ValueError('Unable to configure handler '\r\n                                         '%r: %s' % (name, e))\r\n                root = logging.root\r\n                existing = list(root.manager.loggerDict.keys())\r\n                existing.sort()\r\n                child_loggers = []\r\n                loggers = config.get('loggers', EMPTY_DICT)\r\n                for name in loggers:\r\n                    if name in existing:\r\n                        i = existing.index(name) + 1 # look after name\r\n                        prefixed = name + \".\"\r\n                        pflen = len(prefixed)\r\n                        num_existing = len(existing)\r\n                        while i < num_existing:\r\n                            if existing[i][:pflen] == prefixed:\r\n                                child_loggers.append(existing[i])\r\n                            i += 1\r\n                        existing.remove(name)\r\n                    try:\r\n                        self.configure_logger(name, loggers[name])\r\n                    except Exception as e:\r\n                        raise ValueError('Unable to configure logger '\r\n                                         '%r: %s' % (name, e))\r\n                _handle_existing_loggers(existing, child_loggers,\r\n                                         disable_existing)\r\n                root = config.get('root', None)\r\n                if root:\r\n                    try:\r\n                        self.configure_root(root)\r\n                    except Exception as e:\r\n                        raise ValueError('Unable to configure root '\r\n                                         'logger: %s' % e)\r\n        finally:\r\n            logging._releaseLock()\r\n    def configure_formatter(self, config):\r\n        \"\"\"Configure a formatter from a dictionary.\"\"\"\r\n        if '()' in config:\r\n            factory = config['()'] # for use in exception handler\r\n            try:\r\n                result = self.configure_custom(config)\r\n            except TypeError as te:\r\n                if \"'format'\" not in str(te):\r\n                    raise\r\n                config['fmt'] = config.pop('format')\r\n                config['()'] = factory\r\n                result = self.configure_custom(config)\r\n        else:\r\n            fmt = config.get('format', None)\r\n            dfmt = config.get('datefmt', None)\r\n            result = logging.Formatter(fmt, dfmt)\r\n        return result\r\n    def configure_filter(self, config):\r\n        \"\"\"Configure a filter from a dictionary.\"\"\"\r\n        if '()' in config:\r\n            result = self.configure_custom(config)\r\n        else:\r\n            name = config.get('name', '')\r\n            result = logging.Filter(name)\r\n        return result\r\n    def add_filters(self, filterer, filters):\r\n        \"\"\"Add filters to a filterer from a list of names.\"\"\"\r\n        for f in filters:\r\n            try:\r\n                filterer.addFilter(self.config['filters'][f])\r\n            except Exception as e:\r\n                raise ValueError('Unable to add filter %r: %s' % (f, e))\r\n    def configure_handler(self, config):\r\n        \"\"\"Configure a handler from a dictionary.\"\"\"\r\n        formatter = config.pop('formatter', None)\r\n        if formatter:\r\n            try:\r\n                formatter = self.config['formatters'][formatter]\r\n            except Exception as e:\r\n                raise ValueError('Unable to set formatter '\r\n                                 '%r: %s' % (formatter, e))\r\n        level = config.pop('level', None)\r\n        filters = config.pop('filters', None)\r\n        if '()' in config:\r\n            c = config.pop('()')\r\n            if not callable(c):\r\n                c = self.resolve(c)\r\n            factory = c\r\n        else:\r\n            klass = self.resolve(config.pop('class'))\r\n            if issubclass(klass, logging.handlers.MemoryHandler) and\\\r\n                'target' in config:\r\n                try:\r\n                    config['target'] = self.config['handlers'][config['target']]\r\n                except Exception as e:\r\n                    raise ValueError('Unable to set target handler '\r\n                                     '%r: %s' % (config['target'], e))\r\n            elif issubclass(klass, logging.handlers.SMTPHandler) and\\\r\n                'mailhost' in config:\r\n                config['mailhost'] = self.as_tuple(config['mailhost'])\r\n            elif issubclass(klass, logging.handlers.SysLogHandler) and\\\r\n                'address' in config:\r\n                config['address'] = self.as_tuple(config['address'])\r\n            factory = klass\r\n        kwargs = dict([(k, config[k]) for k in config if valid_ident(k)])\r\n        try:\r\n            result = factory(**kwargs)\r\n        except TypeError as te:\r\n            if \"'stream'\" not in str(te):\r\n                raise\r\n            kwargs['strm'] = kwargs.pop('stream')\r\n            result = factory(**kwargs)\r\n        if formatter:\r\n            result.setFormatter(formatter)\r\n        if level is not None:\r\n            result.setLevel(logging._checkLevel(level))\r\n        if filters:\r\n            self.add_filters(result, filters)\r\n        return result\r\n    def add_handlers(self, logger, handlers):\r\n        \"\"\"Add handlers to a logger from a list of names.\"\"\"\r\n        for h in handlers:\r\n            try:\r\n                logger.addHandler(self.config['handlers'][h])\r\n            except Exception as e:\r\n                raise ValueError('Unable to add handler %r: %s' % (h, e))\r\n    def common_logger_config(self, logger, config, incremental=False):\r\n        \"\"\"\r\n        Perform configuration which is common to root and non-root loggers.\r\n        \"\"\"\r\n        level = config.get('level', None)\r\n        if level is not None:\r\n            logger.setLevel(logging._checkLevel(level))\r\n        if not incremental:\r\n            for h in logger.handlers[:]:\r\n                logger.removeHandler(h)\r\n            handlers = config.get('handlers', None)\r\n            if handlers:\r\n                self.add_handlers(logger, handlers)\r\n            filters = config.get('filters', None)\r\n            if filters:\r\n                self.add_filters(logger, filters)\r\n    def configure_logger(self, name, config, incremental=False):\r\n        \"\"\"Configure a non-root logger from a dictionary.\"\"\"\r\n        logger = logging.getLogger(name)\r\n        self.common_logger_config(logger, config, incremental)\r\n        propagate = config.get('propagate', None)\r\n        if propagate is not None:\r\n            logger.propagate = propagate\r\n    def configure_root(self, config, incremental=False):\r\n        \"\"\"Configure a root logger from a dictionary.\"\"\"\r\n        root = logging.getLogger()\r\n        self.common_logger_config(root, config, incremental)\r\ndictConfigClass = DictConfigurator\r\ndef dictConfig(config):\r\n    \"\"\"Configure logging using a dictionary.\"\"\"\r\n    dictConfigClass(config).configure()\r\ndef listen(port=DEFAULT_LOGGING_CONFIG_PORT):\r\n    \"\"\"\r\n    Start up a socket server on the specified port, and listen for new\r\n    configurations.\r\n    These will be sent as a file suitable for processing by fileConfig().\r\n    Returns a Thread object on which you can call start() to start the server,\r\n    and which you can join() when appropriate. To stop the server, call\r\n    stopListening().\r\n    \"\"\"\r\n    if not thread: #pragma: no cover\r\n        raise NotImplementedError(\"listen() needs threading to work\")\r\n    class ConfigStreamHandler(StreamRequestHandler):\r\n        \"\"\"\r\n        Handler for a logging configuration request.\r\n        It expects a completely new logging configuration and uses fileConfig\r\n        to install it.\r\n        \"\"\"\r\n        def handle(self):\r\n            \"\"\"\r\n            Handle a request.\r\n            Each request is expected to be a 4-byte length, packed using\r\n            struct.pack(\">L\", n), followed by the config file.\r\n            Uses fileConfig() to do the grunt work.\r\n            \"\"\"\r\n            try:\r\n                conn = self.connection\r\n                chunk = conn.recv(4)\r\n                if len(chunk) == 4:\r\n                    slen = struct.unpack(\">L\", chunk)[0]\r\n                    chunk = self.connection.recv(slen)\r\n                    while len(chunk) < slen:\r\n                        chunk = chunk + conn.recv(slen - len(chunk))\r\n                    chunk = chunk.decode(\"utf-8\")\r\n                    try:\r\n                        import json\r\n                        d =json.loads(chunk)\r\n                        assert isinstance(d, dict)\r\n                        dictConfig(d)\r\n                    except:\r\n                        file = io.StringIO(chunk)\r\n                        try:\r\n                            fileConfig(file)\r\n                        except (KeyboardInterrupt, SystemExit): #pragma: no cover\r\n                            raise\r\n                        except:\r\n                            traceback.print_exc()\r\n                    if self.server.ready:\r\n                        self.server.ready.set()\r\n            except socket.error as e:\r\n                if not isinstance(e.args, tuple):\r\n                    raise\r\n                else:\r\n                    errcode = e.args[0]\r\n                    if errcode != RESET_ERROR:\r\n                        raise\r\n    class ConfigSocketReceiver(ThreadingTCPServer):\r\n        \"\"\"\r\n        A simple TCP socket-based logging config receiver.\r\n        \"\"\"\r\n        allow_reuse_address = 1\r\n        def __init__(self, host='localhost', port=DEFAULT_LOGGING_CONFIG_PORT,\r\n                     handler=None, ready=None):\r\n            ThreadingTCPServer.__init__(self, (host, port), handler)\r\n            logging._acquireLock()\r\n            self.abort = 0\r\n            logging._releaseLock()\r\n            self.timeout = 1\r\n            self.ready = ready\r\n        def serve_until_stopped(self):\r\n            import select\r\n            abort = 0\r\n            while not abort:\r\n                rd, wr, ex = select.select([self.socket.fileno()],\r\n                                           [], [],\r\n                                           self.timeout)\r\n                if rd:\r\n                    self.handle_request()\r\n                logging._acquireLock()\r\n                abort = self.abort\r\n                logging._releaseLock()\r\n            self.socket.close()\r\n    class Server(threading.Thread):\r\n        def __init__(self, rcvr, hdlr, port):\r\n            super(Server, self).__init__()\r\n            self.rcvr = rcvr\r\n            self.hdlr = hdlr\r\n            self.port = port\r\n            self.ready = threading.Event()\r\n        def run(self):\r\n            server = self.rcvr(port=self.port, handler=self.hdlr,\r\n                               ready=self.ready)\r\n            if self.port == 0:\r\n                self.port = server.server_address[1]\r\n            self.ready.set()\r\n            global _listener\r\n            logging._acquireLock()\r\n            _listener = server\r\n            logging._releaseLock()\r\n            server.serve_until_stopped()\r\n    return Server(ConfigSocketReceiver, ConfigStreamHandler, port)\r\ndef stopListening():\r\n    \"\"\"\r\n    Stop the listening server which was created with a call to listen().\r\n    \"\"\"\r\n    global _listener\r\n    logging._acquireLock()\r\n    try:\r\n        if _listener:\r\n            _listener.abort = 1\r\n            _listener = None\r\n    finally:\r\n        logging._releaseLock()\r\n", "/Lib/difflib.py": "\"\"\"\nModule difflib -- helpers for computing deltas between objects.\nFunction get_close_matches(word, possibilities, n=3, cutoff=0.6):\n    Use SequenceMatcher to return list of the best \"good enough\" matches.\nFunction context_diff(a, b):\n    For two lists of strings, return a delta in context diff format.\nFunction ndiff(a, b):\n    Return a delta: the difference between `a` and `b` (lists of strings).\nFunction restore(delta, which):\n    Return one of the two sequences that generated an ndiff delta.\nFunction unified_diff(a, b):\n    For two lists of strings, return a delta in unified diff format.\nClass SequenceMatcher:\n    A flexible class for comparing pairs of sequences of any type.\nClass Differ:\n    For producing human-readable deltas from sequences of lines of text.\nClass HtmlDiff:\n    For producing HTML side by side comparison with change highlights.\n\"\"\"\n__all__ = ['get_close_matches', 'ndiff', 'restore', 'SequenceMatcher',\n           'Differ','IS_CHARACTER_JUNK', 'IS_LINE_JUNK', 'context_diff',\n           'unified_diff', 'HtmlDiff', 'Match']\nimport warnings\nimport heapq\nfrom collections import namedtuple as _namedtuple\nMatch = _namedtuple('Match', 'a b size')\ndef _calculate_ratio(matches, length):\n    if length:\n        return 2.0 * matches / length\n    return 1.0\nclass SequenceMatcher:\n    \"\"\"\n    SequenceMatcher is a flexible class for comparing pairs of sequences of\n    any type, so long as the sequence elements are hashable.  The basic\n    algorithm predates, and is a little fancier than, an algorithm\n    published in the late 1980's by Ratcliff and Obershelp under the\n    hyperbolic name \"gestalt pattern matching\".  The basic idea is to find\n    the longest contiguous matching subsequence that contains no \"junk\"\n    elements (R-O doesn't address junk).  The same idea is then applied\n    recursively to the pieces of the sequences to the left and to the right\n    of the matching subsequence.  This does not yield minimal edit\n    sequences, but does tend to yield matches that \"look right\" to people.\n    SequenceMatcher tries to compute a \"human-friendly diff\" between two\n    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the\n    longest *contiguous* & junk-free matching subsequence.  That's what\n    catches peoples' eyes.  The Windows(tm) windiff has another interesting\n    notion, pairing up elements that appear uniquely in each sequence.\n    That, and the method here, appear to yield more intuitive difference\n    reports than does diff.  This method appears to be the least vulnerable\n    to synching up on blocks of \"junk lines\", though (like blank lines in\n    ordinary text files, or maybe \"<P>\" lines in HTML files).  That may be\n    because this is the only method of the 3 that has a *concept* of\n    \"junk\" <wink>.\n    Example, comparing two strings, and considering blanks to be \"junk\":\n    >>> s = SequenceMatcher(lambda x: x == \" \",\n    ...                     \"private Thread currentThread;\",\n    ...                     \"private volatile Thread currentThread;\")\n    >>>\n    .ratio() returns a float in [0, 1], measuring the \"similarity\" of the\n    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the\n    sequences are close matches:\n    >>> print(round(s.ratio(), 3))\n    0.866\n    >>>\n    If you're only interested in where the sequences match,\n    .get_matching_blocks() is handy:\n    >>> for block in s.get_matching_blocks():\n    ...     print(\"a[%d] and b[%d] match for %d elements\" % block)\n    a[0] and b[0] match for 8 elements\n    a[8] and b[17] match for 21 elements\n    a[29] and b[38] match for 0 elements\n    Note that the last tuple returned by .get_matching_blocks() is always a\n    dummy, (len(a), len(b), 0), and this is the only case in which the last\n    tuple element (number of elements matched) is 0.\n    If you want to know how to change the first sequence into the second,\n    use .get_opcodes():\n    >>> for opcode in s.get_opcodes():\n    ...     print(\"%6s a[%d:%d] b[%d:%d]\" % opcode)\n     equal a[0:8] b[0:8]\n    insert a[8:8] b[8:17]\n     equal a[8:29] b[17:38]\n    See the Differ class for a fancy human-friendly file differencer, which\n    uses SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n    See also function get_close_matches() in this module, which shows how\n    simple code building on SequenceMatcher can be used to do useful work.\n    Timing:  Basic R-O is cubic time worst case and quadratic time expected\n    case.  SequenceMatcher is quadratic time for the worst case and has\n    expected-case behavior dependent in a complicated way on how many\n    elements the sequences have in common; best case time is linear.\n    Methods:\n    __init__(isjunk=None, a='', b='')\n        Construct a SequenceMatcher.\n    set_seqs(a, b)\n        Set the two sequences to be compared.\n    set_seq1(a)\n        Set the first sequence to be compared.\n    set_seq2(b)\n        Set the second sequence to be compared.\n    find_longest_match(alo, ahi, blo, bhi)\n        Find longest matching block in a[alo:ahi] and b[blo:bhi].\n    get_matching_blocks()\n        Return list of triples describing matching subsequences.\n    get_opcodes()\n        Return list of 5-tuples describing how to turn a into b.\n    ratio()\n        Return a measure of the sequences' similarity (float in [0,1]).\n    quick_ratio()\n        Return an upper bound on .ratio() relatively quickly.\n    real_quick_ratio()\n        Return an upper bound on ratio() very quickly.\n    \"\"\"\n    def __init__(self, isjunk=None, a='', b='', autojunk=True):\n        \"\"\"Construct a SequenceMatcher.\n        Optional arg isjunk is None (the default), or a one-argument\n        function that takes a sequence element and returns true iff the\n        element is junk.  None is equivalent to passing \"lambda x: 0\", i.e.\n        no elements are considered to be junk.  For example, pass\n            lambda x: x in \" \\\\t\"\n        if you're comparing lines as sequences of characters, and don't\n        want to synch up on blanks or hard tabs.\n        Optional arg a is the first of two sequences to be compared.  By\n        default, an empty string.  The elements of a must be hashable.  See\n        also .set_seqs() and .set_seq1().\n        Optional arg b is the second of two sequences to be compared.  By\n        default, an empty string.  The elements of b must be hashable. See\n        also .set_seqs() and .set_seq2().\n        Optional arg autojunk should be set to False to disable the\n        \"automatic junk heuristic\" that treats popular elements as junk\n        (see module documentation for more information).\n        \"\"\"\n        self.isjunk = isjunk\n        self.a = self.b = None\n        self.autojunk = autojunk\n        self.set_seqs(a, b)\n    def set_seqs(self, a, b):\n        \"\"\"Set the two sequences to be compared.\n        >>> s = SequenceMatcher()\n        >>> s.set_seqs(\"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        \"\"\"\n        self.set_seq1(a)\n        self.set_seq2(b)\n    def set_seq1(self, a):\n        \"\"\"Set the first sequence to be compared.\n        The second sequence to be compared is not changed.\n        >>> s = SequenceMatcher(None, \"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq1(\"bcde\")\n        >>> s.ratio()\n        1.0\n        >>>\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n        See also set_seqs() and set_seq2().\n        \"\"\"\n        if a is self.a:\n            return\n        self.a = a\n        self.matching_blocks = self.opcodes = None\n    def set_seq2(self, b):\n        \"\"\"Set the second sequence to be compared.\n        The first sequence to be compared is not changed.\n        >>> s = SequenceMatcher(None, \"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq2(\"abcd\")\n        >>> s.ratio()\n        1.0\n        >>>\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n        See also set_seqs() and set_seq1().\n        \"\"\"\n        if b is self.b:\n            return\n        self.b = b\n        self.matching_blocks = self.opcodes = None\n        self.fullbcount = None\n        self.__chain_b()\n    def __chain_b(self):\n        b = self.b\n        self.b2j = b2j = {}\n        for i, elt in enumerate(b):\n            indices = b2j.setdefault(elt, [])\n            indices.append(i)\n        self.bjunk = junk = set()\n        isjunk = self.isjunk\n        if isjunk:\n            for elt in b2j.keys():\n                if isjunk(elt):\n                    junk.add(elt)\n            for elt in junk: # separate loop avoids separate list of keys\n                del b2j[elt]\n        self.bpopular = popular = set()\n        n = len(b)\n        if self.autojunk and n >= 200:\n            ntest = n // 100 + 1\n            for elt, idxs in b2j.items():\n                if len(idxs) > ntest:\n                    popular.add(elt)\n            for elt in popular: # ditto; as fast for 1% deletion\n                del b2j[elt]\n    def isbjunk(self, item):\n        \"Deprecated; use 'item in SequenceMatcher().bjunk'.\"\n        warnings.warn(\"'SequenceMatcher().isbjunk(item)' is deprecated;\\n\"\n                      \"use 'item in SMinstance.bjunk' instead.\",\n                      DeprecationWarning, 2)\n        return item in self.bjunk\n    def isbpopular(self, item):\n        \"Deprecated; use 'item in SequenceMatcher().bpopular'.\"\n        warnings.warn(\"'SequenceMatcher().isbpopular(item)' is deprecated;\\n\"\n                      \"use 'item in SMinstance.bpopular' instead.\",\n                      DeprecationWarning, 2)\n        return item in self.bpopular\n    def find_longest_match(self, alo, ahi, blo, bhi):\n        \"\"\"Find longest matching block in a[alo:ahi] and b[blo:bhi].\n        If isjunk is not defined:\n        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where\n            alo <= i <= i+k <= ahi\n            blo <= j <= j+k <= bhi\n        and for all (i',j',k') meeting those conditions,\n            k >= k'\n            i <= i'\n            and if i == i', j <= j'\n        In other words, of all maximal matching blocks, return one that\n        starts earliest in a, and of all those maximal matching blocks that\n        start earliest in a, return the one that starts earliest in b.\n        >>> s = SequenceMatcher(None, \" abcd\", \"abcd abcd\")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=0, b=4, size=5)\n        If isjunk is defined, first the longest matching block is\n        determined as above, but with the additional restriction that no\n        junk element appears in the block.  Then that block is extended as\n        far as possible by matching (only) junk elements on both sides.  So\n        the resulting block never matches on junk except as identical junk\n        happens to be adjacent to an \"interesting\" match.\n        Here's the same example as before, but considering blanks to be\n        junk.  That prevents \" abcd\" from matching the \" abcd\" at the tail\n        end of the second sequence directly.  Instead only the \"abcd\" can\n        match, and matches the leftmost \"abcd\" in the second sequence:\n        >>> s = SequenceMatcher(lambda x: x==\" \", \" abcd\", \"abcd abcd\")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=1, b=0, size=4)\n        If no blocks match, return (alo, blo, 0).\n        >>> s = SequenceMatcher(None, \"ab\", \"c\")\n        >>> s.find_longest_match(0, 2, 0, 1)\n        Match(a=0, b=0, size=0)\n        \"\"\"\n        a, b, b2j, isbjunk = self.a, self.b, self.b2j, self.bjunk.__contains__\n        besti, bestj, bestsize = alo, blo, 0\n        j2len = {}\n        nothing = []\n        for i in range(alo, ahi):\n            j2lenget = j2len.get\n            newj2len = {}\n            for j in b2j.get(a[i], nothing):\n                if j < blo:\n                    continue\n                if j >= bhi:\n                    break\n                k = newj2len[j] = j2lenget(j-1, 0) + 1\n                if k > bestsize:\n                    besti, bestj, bestsize = i-k+1, j-k+1, k\n            j2len = newj2len\n        while besti > alo and bestj > blo and \\\n              not isbjunk(b[bestj-1]) and \\\n              a[besti-1] == b[bestj-1]:\n            besti, bestj, bestsize = besti-1, bestj-1, bestsize+1\n        while besti+bestsize < ahi and bestj+bestsize < bhi and \\\n              not isbjunk(b[bestj+bestsize]) and \\\n              a[besti+bestsize] == b[bestj+bestsize]:\n            bestsize += 1\n        while besti > alo and bestj > blo and \\\n              isbjunk(b[bestj-1]) and \\\n              a[besti-1] == b[bestj-1]:\n            besti, bestj, bestsize = besti-1, bestj-1, bestsize+1\n        while besti+bestsize < ahi and bestj+bestsize < bhi and \\\n              isbjunk(b[bestj+bestsize]) and \\\n              a[besti+bestsize] == b[bestj+bestsize]:\n            bestsize = bestsize + 1\n        return Match(besti, bestj, bestsize)\n    def get_matching_blocks(self):\n        \"\"\"Return list of triples describing matching subsequences.\n        Each triple is of the form (i, j, n), and means that\n        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in\n        i and in j.  New in Python 2.5, it's also guaranteed that if\n        (i, j, n) and (i', j', n') are adjacent triples in the list, and\n        the second is not the last triple in the list, then i+n != i' or\n        j+n != j'.  IOW, adjacent triples never describe adjacent equal\n        blocks.\n        The last triple is a dummy, (len(a), len(b), 0), and is the only\n        triple with n==0.\n        >>> s = SequenceMatcher(None, \"abxcd\", \"abcd\")\n        >>> list(s.get_matching_blocks())\n        [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]\n        \"\"\"\n        if self.matching_blocks is not None:\n            return self.matching_blocks\n        la, lb = len(self.a), len(self.b)\n        queue = [(0, la, 0, lb)]\n        matching_blocks = []\n        while queue:\n            alo, ahi, blo, bhi = queue.pop()\n            i, j, k = x = self.find_longest_match(alo, ahi, blo, bhi)\n            if k:   # if k is 0, there was no matching block\n                matching_blocks.append(x)\n                if alo < i and blo < j:\n                    queue.append((alo, i, blo, j))\n                if i+k < ahi and j+k < bhi:\n                    queue.append((i+k, ahi, j+k, bhi))\n        matching_blocks.sort()\n        i1 = j1 = k1 = 0\n        non_adjacent = []\n        for i2, j2, k2 in matching_blocks:\n            if i1 + k1 == i2 and j1 + k1 == j2:\n                k1 += k2\n            else:\n                if k1:\n                    non_adjacent.append((i1, j1, k1))\n                i1, j1, k1 = i2, j2, k2\n        if k1:\n            non_adjacent.append((i1, j1, k1))\n        non_adjacent.append( (la, lb, 0) )\n        self.matching_blocks = non_adjacent\n        return map(Match._make, self.matching_blocks)\n    def get_opcodes(self):\n        \"\"\"Return list of 5-tuples describing how to turn a into b.\n        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple\n        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the\n        tuple preceding it, and likewise for j1 == the previous j2.\n        The tags are strings, with these meanings:\n        'replace':  a[i1:i2] should be replaced by b[j1:j2]\n        'delete':   a[i1:i2] should be deleted.\n                    Note that j1==j2 in this case.\n        'insert':   b[j1:j2] should be inserted at a[i1:i1].\n                    Note that i1==i2 in this case.\n        'equal':    a[i1:i2] == b[j1:j2]\n        >>> a = \"qabxcd\"\n        >>> b = \"abycdf\"\n        >>> s = SequenceMatcher(None, a, b)\n        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():\n        ...    print((\"%7s a[%d:%d] (%s) b[%d:%d] (%s)\" %\n        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2])))\n         delete a[0:1] (q) b[0:0] ()\n          equal a[1:3] (ab) b[0:2] (ab)\n        replace a[3:4] (x) b[2:3] (y)\n          equal a[4:6] (cd) b[3:5] (cd)\n         insert a[6:6] () b[5:6] (f)\n        \"\"\"\n        if self.opcodes is not None:\n            return self.opcodes\n        i = j = 0\n        self.opcodes = answer = []\n        for ai, bj, size in self.get_matching_blocks():\n            tag = ''\n            if i < ai and j < bj:\n                tag = 'replace'\n            elif i < ai:\n                tag = 'delete'\n            elif j < bj:\n                tag = 'insert'\n            if tag:\n                answer.append( (tag, i, ai, j, bj) )\n            i, j = ai+size, bj+size\n            if size:\n                answer.append( ('equal', ai, i, bj, j) )\n        return answer\n    def get_grouped_opcodes(self, n=3):\n        \"\"\" Isolate change clusters by eliminating ranges with no changes.\n        Return a generator of groups with upto n lines of context.\n        Each group is in the same format as returned by get_opcodes().\n        >>> from pprint import pprint\n        >>> a = list(map(str, range(1,40)))\n        >>> b = a[:]\n        >>> b[8:8] = ['i']     # Make an insertion\n        >>> b[20] += 'x'       # Make a replacement\n        >>> b[23:28] = []      # Make a deletion\n        >>> b[30] += 'y'       # Make another replacement\n        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))\n        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],\n         [('equal', 16, 19, 17, 20),\n          ('replace', 19, 20, 20, 21),\n          ('equal', 20, 22, 21, 23),\n          ('delete', 22, 27, 23, 23),\n          ('equal', 27, 30, 23, 26)],\n         [('equal', 31, 34, 27, 30),\n          ('replace', 34, 35, 30, 31),\n          ('equal', 35, 38, 31, 34)]]\n        \"\"\"\n        codes = self.get_opcodes()\n        if not codes:\n            codes = [(\"equal\", 0, 1, 0, 1)]\n        if codes[0][0] == 'equal':\n            tag, i1, i2, j1, j2 = codes[0]\n            codes[0] = tag, max(i1, i2-n), i2, max(j1, j2-n), j2\n        if codes[-1][0] == 'equal':\n            tag, i1, i2, j1, j2 = codes[-1]\n            codes[-1] = tag, i1, min(i2, i1+n), j1, min(j2, j1+n)\n        nn = n + n\n        group = []\n        for tag, i1, i2, j1, j2 in codes:\n            if tag == 'equal' and i2-i1 > nn:\n                group.append((tag, i1, min(i2, i1+n), j1, min(j2, j1+n)))\n                yield group\n                group = []\n                i1, j1 = max(i1, i2-n), max(j1, j2-n)\n            group.append((tag, i1, i2, j1 ,j2))\n        if group and not (len(group)==1 and group[0][0] == 'equal'):\n            yield group\n    def ratio(self):\n        \"\"\"Return a measure of the sequences' similarity (float in [0,1]).\n        Where T is the total number of elements in both sequences, and\n        M is the number of matches, this is 2.0*M / T.\n        Note that this is 1 if the sequences are identical, and 0 if\n        they have nothing in common.\n        .ratio() is expensive to compute if you haven't already computed\n        .get_matching_blocks() or .get_opcodes(), in which case you may\n        want to try .quick_ratio() or .real_quick_ratio() first to get an\n        upper bound.\n        >>> s = SequenceMatcher(None, \"abcd\", \"bcde\")\n        >>> s.ratio()\n        0.75\n        >>> s.quick_ratio()\n        0.75\n        >>> s.real_quick_ratio()\n        1.0\n        \"\"\"\n        matches = sum(triple[-1] for triple in self.get_matching_blocks())\n        return _calculate_ratio(matches, len(self.a) + len(self.b))\n    def quick_ratio(self):\n        \"\"\"Return an upper bound on ratio() relatively quickly.\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute.\n        \"\"\"\n        if self.fullbcount is None:\n            self.fullbcount = fullbcount = {}\n            for elt in self.b:\n                fullbcount[elt] = fullbcount.get(elt, 0) + 1\n        fullbcount = self.fullbcount\n        avail = {}\n        availhas, matches = avail.__contains__, 0\n        for elt in self.a:\n            if availhas(elt):\n                numb = avail[elt]\n            else:\n                numb = fullbcount.get(elt, 0)\n            avail[elt] = numb - 1\n            if numb > 0:\n                matches = matches + 1\n        return _calculate_ratio(matches, len(self.a) + len(self.b))\n    def real_quick_ratio(self):\n        \"\"\"Return an upper bound on ratio() very quickly.\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute than either .ratio() or .quick_ratio().\n        \"\"\"\n        la, lb = len(self.a), len(self.b)\n        return _calculate_ratio(min(la, lb), la + lb)\ndef get_close_matches(word, possibilities, n=3, cutoff=0.6):\n    \"\"\"Use SequenceMatcher to return list of the best \"good enough\" matches.\n    word is a sequence for which close matches are desired (typically a\n    string).\n    possibilities is a list of sequences against which to match word\n    (typically a list of strings).\n    Optional arg n (default 3) is the maximum number of close matches to\n    return.  n must be > 0.\n    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities\n    that don't score at least that similar to word are ignored.\n    The best (no more than n) matches among the possibilities are returned\n    in a list, sorted by similarity score, most similar first.\n    >>> get_close_matches(\"appel\", [\"ape\", \"apple\", \"peach\", \"puppy\"])\n    ['apple', 'ape']\n    >>> import keyword as _keyword\n    >>> get_close_matches(\"wheel\", _keyword.kwlist)\n    ['while']\n    >>> get_close_matches(\"Apple\", _keyword.kwlist)\n    []\n    >>> get_close_matches(\"accept\", _keyword.kwlist)\n    ['except']\n    \"\"\"\n    if not n >  0:\n        raise ValueError(\"n must be > 0: %r\" % (n,))\n    if not 0.0 <= cutoff <= 1.0:\n        raise ValueError(\"cutoff must be in [0.0, 1.0]: %r\" % (cutoff,))\n    result = []\n    s = SequenceMatcher()\n    s.set_seq2(word)\n    for x in possibilities:\n        s.set_seq1(x)\n        if s.real_quick_ratio() >= cutoff and \\\n           s.quick_ratio() >= cutoff and \\\n           s.ratio() >= cutoff:\n            result.append((s.ratio(), x))\n    result = heapq.nlargest(n, result)\n    return [x for score, x in result]\ndef _count_leading(line, ch):\n    \"\"\"\n    Return number of `ch` characters at the start of `line`.\n    Example:\n    >>> _count_leading('   abc', ' ')\n    3\n    \"\"\"\n    i, n = 0, len(line)\n    while i < n and line[i] == ch:\n        i += 1\n    return i\nclass Differ:\n    r\"\"\"\n    Differ is a class for comparing sequences of lines of text, and\n    producing human-readable differences or deltas.  Differ uses\n    SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n    Each line of a Differ delta begins with a two-letter code:\n        '- '    line unique to sequence 1\n        '+ '    line unique to sequence 2\n        '  '    line common to both sequences\n        '? '    line not present in either input sequence\n    Lines beginning with '? ' attempt to guide the eye to intraline\n    differences, and were not present in either input sequence.  These lines\n    can be confusing if the sequences contain tab characters.\n    Note that Differ makes no claim to produce a *minimal* diff.  To the\n    contrary, minimal diffs are often counter-intuitive, because they synch\n    up anywhere possible, sometimes accidental matches 100 pages apart.\n    Restricting synch points to contiguous matches preserves some notion of\n    locality, at the occasional cost of producing a longer diff.\n    Example: Comparing two texts.\n    First we set up the texts, sequences of individual single-line strings\n    ending with newlines (such sequences can also be obtained from the\n    `readlines()` method of file-like objects):\n    >>> text1 = '''  1. Beautiful is better than ugly.\n    ...   2. Explicit is better than implicit.\n    ...   3. Simple is better than complex.\n    ...   4. Complex is better than complicated.\n    ... '''.splitlines(keepends=True)\n    >>> len(text1)\n    4\n    >>> text1[0][-1]\n    '\\n'\n    >>> text2 = '''  1. Beautiful is better than ugly.\n    ...   3.   Simple is better than complex.\n    ...   4. Complicated is better than complex.\n    ...   5. Flat is better than nested.\n    ... '''.splitlines(keepends=True)\n    Next we instantiate a Differ object:\n    >>> d = Differ()\n    Note that when instantiating a Differ object we may pass functions to\n    filter out line and character 'junk'.  See Differ.__init__ for details.\n    Finally, we compare the two:\n    >>> result = list(d.compare(text1, text2))\n    'result' is a list of strings, so let's pretty-print it:\n    >>> from pprint import pprint as _pprint\n    >>> _pprint(result)\n    ['    1. Beautiful is better than ugly.\\n',\n     '-   2. Explicit is better than implicit.\\n',\n     '-   3. Simple is better than complex.\\n',\n     '+   3.   Simple is better than complex.\\n',\n     '?     ++\\n',\n     '-   4. Complex is better than complicated.\\n',\n     '?            ^                     ---- ^\\n',\n     '+   4. Complicated is better than complex.\\n',\n     '?           ++++ ^                      ^\\n',\n     '+   5. Flat is better than nested.\\n']\n    As a single multi-line string it looks like this:\n    >>> print(''.join(result), end=\"\")\n        1. Beautiful is better than ugly.\n    -   2. Explicit is better than implicit.\n    -   3. Simple is better than complex.\n    +   3.   Simple is better than complex.\n    ?     ++\n    -   4. Complex is better than complicated.\n    ?            ^                     ---- ^\n    +   4. Complicated is better than complex.\n    ?           ++++ ^                      ^\n    +   5. Flat is better than nested.\n    Methods:\n    __init__(linejunk=None, charjunk=None)\n        Construct a text differencer, with optional filters.\n    compare(a, b)\n        Compare two sequences of lines; generate the resulting delta.\n    \"\"\"\n    def __init__(self, linejunk=None, charjunk=None):\n        \"\"\"\n        Construct a text differencer, with optional filters.\n        The two optional keyword parameters are for filter functions:\n        - `linejunk`: A function that should accept a single string argument,\n          and return true iff the string is junk. The module-level function\n          `IS_LINE_JUNK` may be used to filter out lines without visible\n          characters, except for at most one splat ('#').  It is recommended\n          to leave linejunk None; as of Python 2.3, the underlying\n          SequenceMatcher class has grown an adaptive notion of \"noise\" lines\n          that's better than any static definition the author has ever been\n          able to craft.\n        - `charjunk`: A function that should accept a string of length 1. The\n          module-level function `IS_CHARACTER_JUNK` may be used to filter out\n          whitespace characters (a blank or tab; **note**: bad idea to include\n          newline in this!).  Use of IS_CHARACTER_JUNK is recommended.\n        \"\"\"\n        self.linejunk = linejunk\n        self.charjunk = charjunk\n    def compare(self, a, b):\n        r\"\"\"\n        Compare two sequences of lines; generate the resulting delta.\n        Each sequence must contain individual single-line strings ending with\n        newlines. Such sequences can be obtained from the `readlines()` method\n        of file-like objects.  The delta generated also consists of newline-\n        terminated strings, ready to be printed as-is via the writeline()\n        method of a file-like object.\n        Example:\n        >>> print(''.join(Differ().compare('one\\ntwo\\nthree\\n'.splitlines(True),\n        ...                                'ore\\ntree\\nemu\\n'.splitlines(True))),\n        ...       end=\"\")\n        - one\n        ?  ^\n        + ore\n        ?  ^\n        - two\n        - three\n        ?  -\n        + tree\n        + emu\n        \"\"\"\n        cruncher = SequenceMatcher(self.linejunk, a, b)\n        for tag, alo, ahi, blo, bhi in cruncher.get_opcodes():\n            if tag == 'replace':\n                g = self._fancy_replace(a, alo, ahi, b, blo, bhi)\n            elif tag == 'delete':\n                g = self._dump('-', a, alo, ahi)\n            elif tag == 'insert':\n                g = self._dump('+', b, blo, bhi)\n            elif tag == 'equal':\n                g = self._dump(' ', a, alo, ahi)\n            else:\n                raise ValueError('unknown tag %r' % (tag,))\n            for line in g:\n                yield line\n    def _dump(self, tag, x, lo, hi):\n        \"\"\"Generate comparison results for a same-tagged range.\"\"\"\n        for i in range(lo, hi):\n            yield '%s %s' % (tag, x[i])\n    def _plain_replace(self, a, alo, ahi, b, blo, bhi):\n        assert alo < ahi and blo < bhi\n        if bhi - blo < ahi - alo:\n            first  = self._dump('+', b, blo, bhi)\n            second = self._dump('-', a, alo, ahi)\n        else:\n            first  = self._dump('-', a, alo, ahi)\n            second = self._dump('+', b, blo, bhi)\n        for g in first, second:\n            for line in g:\n                yield line\n    def _fancy_replace(self, a, alo, ahi, b, blo, bhi):\n        r\"\"\"\n        When replacing one block of lines with another, search the blocks\n        for *similar* lines; the best-matching pair (if any) is used as a\n        synch point, and intraline difference marking is done on the\n        similar pair. Lots of work, but often worth it.\n        Example:\n        >>> d = Differ()\n        >>> results = d._fancy_replace(['abcDefghiJkl\\n'], 0, 1,\n        ...                            ['abcdefGhijkl\\n'], 0, 1)\n        >>> print(''.join(results), end=\"\")\n        - abcDefghiJkl\n        ?    ^  ^  ^\n        + abcdefGhijkl\n        ?    ^  ^  ^\n        \"\"\"\n        best_ratio, cutoff = 0.74, 0.75\n        cruncher = SequenceMatcher(self.charjunk)\n        eqi, eqj = None, None   # 1st indices of equal lines (if any)\n        for j in range(blo, bhi):\n            bj = b[j]\n            cruncher.set_seq2(bj)\n            for i in range(alo, ahi):\n                ai = a[i]\n                if ai == bj:\n                    if eqi is None:\n                        eqi, eqj = i, j\n                    continue\n                cruncher.set_seq1(ai)\n                if cruncher.real_quick_ratio() > best_ratio and \\\n                      cruncher.quick_ratio() > best_ratio and \\\n                      cruncher.ratio() > best_ratio:\n                    best_ratio, best_i, best_j = cruncher.ratio(), i, j\n        if best_ratio < cutoff:\n            if eqi is None:\n                for line in self._plain_replace(a, alo, ahi, b, blo, bhi):\n                    yield line\n                return\n            best_i, best_j, best_ratio = eqi, eqj, 1.0\n        else:\n            eqi = None\n        for line in self._fancy_helper(a, alo, best_i, b, blo, best_j):\n            yield line\n        aelt, belt = a[best_i], b[best_j]\n        if eqi is None:\n            atags = btags = \"\"\n            cruncher.set_seqs(aelt, belt)\n            for tag, ai1, ai2, bj1, bj2 in cruncher.get_opcodes():\n                la, lb = ai2 - ai1, bj2 - bj1\n                if tag == 'replace':\n                    atags += '^' * la\n                    btags += '^' * lb\n                elif tag == 'delete':\n                    atags += '-' * la\n                elif tag == 'insert':\n                    btags += '+' * lb\n                elif tag == 'equal':\n                    atags += ' ' * la\n                    btags += ' ' * lb\n                else:\n                    raise ValueError('unknown tag %r' % (tag,))\n            for line in self._qformat(aelt, belt, atags, btags):\n                yield line\n        else:\n            yield '  ' + aelt\n        for line in self._fancy_helper(a, best_i+1, ahi, b, best_j+1, bhi):\n            yield line\n    def _fancy_helper(self, a, alo, ahi, b, blo, bhi):\n        g = []\n        if alo < ahi:\n            if blo < bhi:\n                g = self._fancy_replace(a, alo, ahi, b, blo, bhi)\n            else:\n                g = self._dump('-', a, alo, ahi)\n        elif blo < bhi:\n            g = self._dump('+', b, blo, bhi)\n        for line in g:\n            yield line\n    def _qformat(self, aline, bline, atags, btags):\n        r\"\"\"\n        Format \"?\" output and deal with leading tabs.\n        Example:\n        >>> d = Differ()\n        >>> results = d._qformat('\\tabcDefghiJkl\\n', '\\tabcdefGhijkl\\n',\n        ...                      '  ^ ^  ^      ', '  ^ ^  ^      ')\n        >>> for line in results: print(repr(line))\n        ...\n        '- \\tabcDefghiJkl\\n'\n        '? \\t ^ ^  ^\\n'\n        '+ \\tabcdefGhijkl\\n'\n        '? \\t ^ ^  ^\\n'\n        \"\"\"\n        common = min(_count_leading(aline, \"\\t\"),\n                     _count_leading(bline, \"\\t\"))\n        common = min(common, _count_leading(atags[:common], \" \"))\n        common = min(common, _count_leading(btags[:common], \" \"))\n        atags = atags[common:].rstrip()\n        btags = btags[common:].rstrip()\n        yield \"- \" + aline\n        if atags:\n            yield \"? %s%s\\n\" % (\"\\t\" * common, atags)\n        yield \"+ \" + bline\n        if btags:\n            yield \"? %s%s\\n\" % (\"\\t\" * common, btags)\nimport re\ndef IS_LINE_JUNK(line, pat=re.compile(r\"\\s*#?\\s*$\").match):\n    r\"\"\"\n    Return 1 for ignorable line: iff `line` is blank or contains a single '#'.\n    Examples:\n    >>> IS_LINE_JUNK('\\n')\n    True\n    >>> IS_LINE_JUNK('  #   \\n')\n    True\n    >>> IS_LINE_JUNK('hello\\n')\n    False\n    \"\"\"\n    return pat(line) is not None\ndef IS_CHARACTER_JUNK(ch, ws=\" \\t\"):\n    r\"\"\"\n    Return 1 for ignorable character: iff `ch` is a space or tab.\n    Examples:\n    >>> IS_CHARACTER_JUNK(' ')\n    True\n    >>> IS_CHARACTER_JUNK('\\t')\n    True\n    >>> IS_CHARACTER_JUNK('\\n')\n    False\n    >>> IS_CHARACTER_JUNK('x')\n    False\n    \"\"\"\n    return ch in ws\ndef _format_range_unified(start, stop):\n    'Convert range to the \"ed\" format'\n    beginning = start + 1     # lines start numbering with one\n    length = stop - start\n    if length == 1:\n        return '{}'.format(beginning)\n    if not length:\n        beginning -= 1        # empty ranges begin at line just before the range\n    return '{},{}'.format(beginning, length)\ndef unified_diff(a, b, fromfile='', tofile='', fromfiledate='',\n                 tofiledate='', n=3, lineterm='\\n'):\n    r\"\"\"\n    Compare two sequences of lines; generate the delta as a unified diff.\n    Unified diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by 'n' which\n    defaults to three.\n    By default, the diff control lines (those with ---, +++, or @@) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to \"\" so that the output will be uniformly newline free.\n    The unidiff format normally has a header for filenames and modification\n    times.  Any or all of these may be specified using strings for\n    'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n    The modification times are normally expressed in the ISO 8601 format.\n    Example:\n    >>> for line in unified_diff('one two three four'.split(),\n    ...             'zero one tree four'.split(), 'Original', 'Current',\n    ...             '2005-01-26 23:30:50', '2010-04-02 10:20:52',\n    ...             lineterm=''):\n    ...     print(line)                 # doctest: +NORMALIZE_WHITESPACE\n    --- Original        2005-01-26 23:30:50\n    +++ Current         2010-04-02 10:20:52\n    @@ -1,4 +1,4 @@\n    +zero\n     one\n    -two\n    -three\n    +tree\n     four\n    \"\"\"\n    started = False\n    for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):\n        if not started:\n            started = True\n            fromdate = '\\t{}'.format(fromfiledate) if fromfiledate else ''\n            todate = '\\t{}'.format(tofiledate) if tofiledate else ''\n            yield '--- {}{}{}'.format(fromfile, fromdate, lineterm)\n            yield '+++ {}{}{}'.format(tofile, todate, lineterm)\n        first, last = group[0], group[-1]\n        file1_range = _format_range_unified(first[1], last[2])\n        file2_range = _format_range_unified(first[3], last[4])\n        yield '@@ -{} +{} @@{}'.format(file1_range, file2_range, lineterm)\n        for tag, i1, i2, j1, j2 in group:\n            if tag == 'equal':\n                for line in a[i1:i2]:\n                    yield ' ' + line\n                continue\n            if tag in {'replace', 'delete'}:\n                for line in a[i1:i2]:\n                    yield '-' + line\n            if tag in {'replace', 'insert'}:\n                for line in b[j1:j2]:\n                    yield '+' + line\ndef _format_range_context(start, stop):\n    'Convert range to the \"ed\" format'\n    beginning = start + 1     # lines start numbering with one\n    length = stop - start\n    if not length:\n        beginning -= 1        # empty ranges begin at line just before the range\n    if length <= 1:\n        return '{}'.format(beginning)\n    return '{},{}'.format(beginning, beginning + length - 1)\ndef context_diff(a, b, fromfile='', tofile='',\n                 fromfiledate='', tofiledate='', n=3, lineterm='\\n'):\n    r\"\"\"\n    Compare two sequences of lines; generate the delta as a context diff.\n    Context diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by 'n' which\n    defaults to three.\n    By default, the diff control lines (those with *** or ---) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to \"\" so that the output will be uniformly newline free.\n    The context diff format normally has a header for filenames and\n    modification times.  Any or all of these may be specified using\n    strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.\n    The modification times are normally expressed in the ISO 8601 format.\n    If not specified, the strings default to blanks.\n    Example:\n    >>> print(''.join(context_diff('one\\ntwo\\nthree\\nfour\\n'.splitlines(True),\n    ...       'zero\\none\\ntree\\nfour\\n'.splitlines(True), 'Original', 'Current')),\n    ...       end=\"\")\n    *** Original\n    --- Current\n    ***************\n    *** 1,4 ****\n      one\n    ! two\n    ! three\n      four\n    --- 1,4 ----\n    + zero\n      one\n    ! tree\n      four\n    \"\"\"\n    prefix = dict(insert='+ ', delete='- ', replace='! ', equal='  ')\n    started = False\n    for group in SequenceMatcher(None,a,b).get_grouped_opcodes(n):\n        if not started:\n            started = True\n            fromdate = '\\t{}'.format(fromfiledate) if fromfiledate else ''\n            todate = '\\t{}'.format(tofiledate) if tofiledate else ''\n            yield '*** {}{}{}'.format(fromfile, fromdate, lineterm)\n            yield '--- {}{}{}'.format(tofile, todate, lineterm)\n        first, last = group[0], group[-1]\n        yield '***************' + lineterm\n        file1_range = _format_range_context(first[1], last[2])\n        yield '*** {} ****{}'.format(file1_range, lineterm)\n        if any(tag in {'replace', 'delete'} for tag, _, _, _, _ in group):\n            for tag, i1, i2, _, _ in group:\n                if tag != 'insert':\n                    for line in a[i1:i2]:\n                        yield prefix[tag] + line\n        file2_range = _format_range_context(first[3], last[4])\n        yield '--- {} ----{}'.format(file2_range, lineterm)\n        if any(tag in {'replace', 'insert'} for tag, _, _, _, _ in group):\n            for tag, _, _, j1, j2 in group:\n                if tag != 'delete':\n                    for line in b[j1:j2]:\n                        yield prefix[tag] + line\ndef ndiff(a, b, linejunk=None, charjunk=IS_CHARACTER_JUNK):\n    r\"\"\"\n    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.\n    Optional keyword parameters `linejunk` and `charjunk` are for filter\n    functions (or None):\n    - linejunk: A function that should accept a single string argument, and\n      return true iff the string is junk.  The default is None, and is\n      recommended; as of Python 2.3, an adaptive notion of \"noise\" lines is\n      used that does a good job on its own.\n    - charjunk: A function that should accept a string of length 1. The\n      default is module-level function IS_CHARACTER_JUNK, which filters out\n      whitespace characters (a blank or tab; note: bad idea to include newline\n      in this!).\n    Tools/scripts/ndiff.py is a command-line front-end to this function.\n    Example:\n    >>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n    ...              'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\n    >>> print(''.join(diff), end=\"\")\n    - one\n    ?  ^\n    + ore\n    ?  ^\n    - two\n    - three\n    ?  -\n    + tree\n    + emu\n    \"\"\"\n    return Differ(linejunk, charjunk).compare(a, b)\ndef _mdiff(fromlines, tolines, context=None, linejunk=None,\n           charjunk=IS_CHARACTER_JUNK):\n    r\"\"\"Returns generator yielding marked up from/to side by side differences.\n    Arguments:\n    fromlines -- list of text lines to compared to tolines\n    tolines -- list of text lines to be compared to fromlines\n    context -- number of context lines to display on each side of difference,\n               if None, all from/to text lines will be generated.\n    linejunk -- passed on to ndiff (see ndiff documentation)\n    charjunk -- passed on to ndiff (see ndiff documentation)\n    This function returns an interator which returns a tuple:\n    (from line tuple, to line tuple, boolean flag)\n    from/to line tuple -- (line num, line text)\n        line num -- integer or None (to indicate a context separation)\n        line text -- original line text with following markers inserted:\n            '\\0+' -- marks start of added text\n            '\\0-' -- marks start of deleted text\n            '\\0^' -- marks start of changed text\n            '\\1' -- marks end of added/deleted/changed text\n    boolean flag -- None indicates context separation, True indicates\n        either \"from\" or \"to\" line contains a change, otherwise False.\n    This function/iterator was originally developed to generate side by side\n    file difference for making HTML pages (see HtmlDiff class for example\n    usage).\n    Note, this function utilizes the ndiff function to generate the side by\n    side difference markup.  Optional ndiff arguments may be passed to this\n    function and they in turn will be passed to ndiff.\n    \"\"\"\n    import re\n    change_re = re.compile('(\\++|\\-+|\\^+)')\n    diff_lines_iterator = ndiff(fromlines,tolines,linejunk,charjunk)\n    def _make_line(lines, format_key, side, num_lines=[0,0]):\n        \"\"\"Returns line of text with user's change markup and line formatting.\n        lines -- list of lines from the ndiff generator to produce a line of\n                 text from.  When producing the line of text to return, the\n                 lines used are removed from this list.\n        format_key -- '+' return first line in list with \"add\" markup around\n                          the entire line.\n                      '-' return first line in list with \"delete\" markup around\n                          the entire line.\n                      '?' return first line in list with add/delete/change\n                          intraline markup (indices obtained from second line)\n                      None return first line in list with no markup\n        side -- indice into the num_lines list (0=from,1=to)\n        num_lines -- from/to current line number.  This is NOT intended to be a\n                     passed parameter.  It is present as a keyword argument to\n                     maintain memory of the current line numbers between calls\n                     of this function.\n        Note, this function is purposefully not defined at the module scope so\n        that data it needs from its parent function (within whose context it\n        is defined) does not need to be of module scope.\n        \"\"\"\n        num_lines[side] += 1\n        if format_key is None:\n            return (num_lines[side],lines.pop(0)[2:])\n        if format_key == '?':\n            text, markers = lines.pop(0), lines.pop(0)\n            sub_info = []\n            def record_sub_info(match_object,sub_info=sub_info):\n                sub_info.append([match_object.group(1)[0],match_object.span()])\n                return match_object.group(1)\n            change_re.sub(record_sub_info,markers)\n            for key,(begin,end) in sub_info[::-1]:\n                text = text[0:begin]+'\\0'+key+text[begin:end]+'\\1'+text[end:]\n            text = text[2:]\n        else:\n            text = lines.pop(0)[2:]\n            if not text:\n                text = ' '\n            text = '\\0' + format_key + text + '\\1'\n        return (num_lines[side],text)\n    def _line_iterator():\n        \"\"\"Yields from/to lines of text with a change indication.\n        This function is an iterator.  It itself pulls lines from a\n        differencing iterator, processes them and yields them.  When it can\n        it yields both a \"from\" and a \"to\" line, otherwise it will yield one\n        or the other.  In addition to yielding the lines of from/to text, a\n        boolean flag is yielded to indicate if the text line(s) have\n        differences in them.\n        Note, this function is purposefully not defined at the module scope so\n        that data it needs from its parent function (within whose context it\n        is defined) does not need to be of module scope.\n        \"\"\"\n        lines = []\n        num_blanks_pending, num_blanks_to_yield = 0, 0\n        while True:\n            while len(lines) < 4:\n                try:\n                    lines.append(next(diff_lines_iterator))\n                except StopIteration:\n                    lines.append('X')\n            s = ''.join([line[0] for line in lines])\n            if s.startswith('X'):\n                num_blanks_to_yield = num_blanks_pending\n            elif s.startswith('-?+?'):\n                yield _make_line(lines,'?',0), _make_line(lines,'?',1), True\n                continue\n            elif s.startswith('--++'):\n                num_blanks_pending -= 1\n                yield _make_line(lines,'-',0), None, True\n                continue\n            elif s.startswith(('--?+', '--+', '- ')):\n                from_line,to_line = _make_line(lines,'-',0), None\n                num_blanks_to_yield,num_blanks_pending = num_blanks_pending-1,0\n            elif s.startswith('-+?'):\n                yield _make_line(lines,None,0), _make_line(lines,'?',1), True\n                continue\n            elif s.startswith('-?+'):\n                yield _make_line(lines,'?',0), _make_line(lines,None,1), True\n                continue\n            elif s.startswith('-'):\n                num_blanks_pending -= 1\n                yield _make_line(lines,'-',0), None, True\n                continue\n            elif s.startswith('+--'):\n                num_blanks_pending += 1\n                yield None, _make_line(lines,'+',1), True\n                continue\n            elif s.startswith(('+ ', '+-')):\n                from_line, to_line = None, _make_line(lines,'+',1)\n                num_blanks_to_yield,num_blanks_pending = num_blanks_pending+1,0\n            elif s.startswith('+'):\n                num_blanks_pending += 1\n                yield None, _make_line(lines,'+',1), True\n                continue\n            elif s.startswith(' '):\n                yield _make_line(lines[:],None,0),_make_line(lines,None,1),False\n                continue\n            while(num_blanks_to_yield < 0):\n                num_blanks_to_yield += 1\n                yield None,('','\\n'),True\n            while(num_blanks_to_yield > 0):\n                num_blanks_to_yield -= 1\n                yield ('','\\n'),None,True\n            if s.startswith('X'):\n                raise StopIteration\n            else:\n                yield from_line,to_line,True\n    def _line_pair_iterator():\n        \"\"\"Yields from/to lines of text with a change indication.\n        This function is an iterator.  It itself pulls lines from the line\n        iterator.  Its difference from that iterator is that this function\n        always yields a pair of from/to text lines (with the change\n        indication).  If necessary it will collect single from/to lines\n        until it has a matching pair from/to pair to yield.\n        Note, this function is purposefully not defined at the module scope so\n        that data it needs from its parent function (within whose context it\n        is defined) does not need to be of module scope.\n        \"\"\"\n        line_iterator = _line_iterator()\n        fromlines,tolines=[],[]\n        while True:\n            while (len(fromlines)==0 or len(tolines)==0):\n                from_line, to_line, found_diff = next(line_iterator)\n                if from_line is not None:\n                    fromlines.append((from_line,found_diff))\n                if to_line is not None:\n                    tolines.append((to_line,found_diff))\n            from_line, fromDiff = fromlines.pop(0)\n            to_line, to_diff = tolines.pop(0)\n            yield (from_line,to_line,fromDiff or to_diff)\n    line_pair_iterator = _line_pair_iterator()\n    if context is None:\n        while True:\n            yield next(line_pair_iterator)\n    else:\n        context += 1\n        lines_to_write = 0\n        while True:\n            index, contextLines = 0, [None]*(context)\n            found_diff = False\n            while(found_diff is False):\n                from_line, to_line, found_diff = next(line_pair_iterator)\n                i = index % context\n                contextLines[i] = (from_line, to_line, found_diff)\n                index += 1\n            if index > context:\n                yield None, None, None\n                lines_to_write = context\n            else:\n                lines_to_write = index\n                index = 0\n            while(lines_to_write):\n                i = index % context\n                index += 1\n                yield contextLines[i]\n                lines_to_write -= 1\n            lines_to_write = context-1\n            while(lines_to_write):\n                from_line, to_line, found_diff = next(line_pair_iterator)\n                if found_diff:\n                    lines_to_write = context-1\n                else:\n                    lines_to_write -= 1\n                yield from_line, to_line, found_diff\n_file_template = \"\"\"\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n          \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n<head>\n    <meta http-equiv=\"Content-Type\"\n          content=\"text/html; charset=ISO-8859-1\" />\n    <title></title>\n    <style type=\"text/css\">%(styles)s\n    </style>\n</head>\n<body>\n    %(table)s%(legend)s\n</body>\n</html>\"\"\"\n_styles = \"\"\"\n        table.diff {font-family:Courier; border:medium;}\n        .diff_header {background-color:#e0e0e0}\n        td.diff_header {text-align:right}\n        .diff_next {background-color:#c0c0c0}\n        .diff_add {background-color:#aaffaa}\n        .diff_chg {background-color:#ffff77}\n        .diff_sub {background-color:#ffaaaa}\"\"\"\n_table_template = \"\"\"\n    <table class=\"diff\" id=\"difflib_chg_%(prefix)s_top\"\n           cellspacing=\"0\" cellpadding=\"0\" rules=\"groups\" >\n        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>\n        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>\n        %(header_row)s\n        <tbody>\n%(data_rows)s        </tbody>\n    </table>\"\"\"\n_legend = \"\"\"\n    <table class=\"diff\" summary=\"Legends\">\n        <tr> <th colspan=\"2\"> Legends </th> </tr>\n        <tr> <td> <table border=\"\" summary=\"Colors\">\n                      <tr><th> Colors </th> </tr>\n                      <tr><td class=\"diff_add\">&nbsp;Added&nbsp;</td></tr>\n                      <tr><td class=\"diff_chg\">Changed</td> </tr>\n                      <tr><td class=\"diff_sub\">Deleted</td> </tr>\n                  </table></td>\n             <td> <table border=\"\" summary=\"Links\">\n                      <tr><th colspan=\"2\"> Links </th> </tr>\n                      <tr><td>(f)irst change</td> </tr>\n                      <tr><td>(n)ext change</td> </tr>\n                      <tr><td>(t)op</td> </tr>\n                  </table></td> </tr>\n    </table>\"\"\"\nclass HtmlDiff(object):\n    \"\"\"For producing HTML side by side comparison with change highlights.\n    This class can be used to create an HTML table (or a complete HTML file\n    containing the table) showing a side by side, line by line comparison\n    of text with inter-line and intra-line change highlights.  The table can\n    be generated in either full or contextual difference mode.\n    The following methods are provided for HTML generation:\n    make_table -- generates HTML for a single side by side table\n    make_file -- generates complete HTML file with a single side by side table\n    See tools/scripts/diff.py for an example usage of this class.\n    \"\"\"\n    _file_template = _file_template\n    _styles = _styles\n    _table_template = _table_template\n    _legend = _legend\n    _default_prefix = 0\n    def __init__(self,tabsize=8,wrapcolumn=None,linejunk=None,\n                 charjunk=IS_CHARACTER_JUNK):\n        \"\"\"HtmlDiff instance initializer\n        Arguments:\n        tabsize -- tab stop spacing, defaults to 8.\n        wrapcolumn -- column number where lines are broken and wrapped,\n            defaults to None where lines are not wrapped.\n        linejunk,charjunk -- keyword arguments passed into ndiff() (used to by\n            HtmlDiff() to generate the side by side HTML differences).  See\n            ndiff() documentation for argument default values and descriptions.\n        \"\"\"\n        self._tabsize = tabsize\n        self._wrapcolumn = wrapcolumn\n        self._linejunk = linejunk\n        self._charjunk = charjunk\n    def make_file(self,fromlines,tolines,fromdesc='',todesc='',context=False,\n                  numlines=5):\n        \"\"\"Returns HTML file of side by side comparison with change highlights\n        Arguments:\n        fromlines -- list of \"from\" lines\n        tolines -- list of \"to\" lines\n        fromdesc -- \"from\" file column header string\n        todesc -- \"to\" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the \"next\" link anchors before the next change (so click of\n            \"next\" link jumps to just before the change).\n        \"\"\"\n        return self._file_template % dict(\n            styles = self._styles,\n            legend = self._legend,\n            table = self.make_table(fromlines,tolines,fromdesc,todesc,\n                                    context=context,numlines=numlines))\n    def _tab_newline_replace(self,fromlines,tolines):\n        \"\"\"Returns from/to line lists with tabs expanded and newlines removed.\n        Instead of tab characters being replaced by the number of spaces\n        needed to fill in to the next tab stop, this function will fill\n        the space with tab characters.  This is done so that the difference\n        algorithms can identify changes in a file when tabs are replaced by\n        spaces and vice versa.  At the end of the HTML generation, the tab\n        characters will be replaced with a nonbreakable space.\n        \"\"\"\n        def expand_tabs(line):\n            line = line.replace(' ','\\0')\n            line = line.expandtabs(self._tabsize)\n            line = line.replace(' ','\\t')\n            return line.replace('\\0',' ').rstrip('\\n')\n        fromlines = [expand_tabs(line) for line in fromlines]\n        tolines = [expand_tabs(line) for line in tolines]\n        return fromlines,tolines\n    def _split_line(self,data_list,line_num,text):\n        \"\"\"Builds list of text lines by splitting text lines at wrap point\n        This function will determine if the input text line needs to be\n        wrapped (split) into separate lines.  If so, the first wrap point\n        will be determined and the first line appended to the output\n        text line list.  This function is used recursively to handle\n        the second part of the split line to further split it.\n        \"\"\"\n        if not line_num:\n            data_list.append((line_num,text))\n            return\n        size = len(text)\n        max = self._wrapcolumn\n        if (size <= max) or ((size -(text.count('\\0')*3)) <= max):\n            data_list.append((line_num,text))\n            return\n        i = 0\n        n = 0\n        mark = ''\n        while n < max and i < size:\n            if text[i] == '\\0':\n                i += 1\n                mark = text[i]\n                i += 1\n            elif text[i] == '\\1':\n                i += 1\n                mark = ''\n            else:\n                i += 1\n                n += 1\n        line1 = text[:i]\n        line2 = text[i:]\n        if mark:\n            line1 = line1 + '\\1'\n            line2 = '\\0' + mark + line2\n        data_list.append((line_num,line1))\n        self._split_line(data_list,'>',line2)\n    def _line_wrapper(self,diffs):\n        \"\"\"Returns iterator that splits (wraps) mdiff text lines\"\"\"\n        for fromdata,todata,flag in diffs:\n            if flag is None:\n                yield fromdata,todata,flag\n                continue\n            (fromline,fromtext),(toline,totext) = fromdata,todata\n            fromlist,tolist = [],[]\n            self._split_line(fromlist,fromline,fromtext)\n            self._split_line(tolist,toline,totext)\n            while fromlist or tolist:\n                if fromlist:\n                    fromdata = fromlist.pop(0)\n                else:\n                    fromdata = ('',' ')\n                if tolist:\n                    todata = tolist.pop(0)\n                else:\n                    todata = ('',' ')\n                yield fromdata,todata,flag\n    def _collect_lines(self,diffs):\n        \"\"\"Collects mdiff output into separate lists\n        Before storing the mdiff from/to data into a list, it is converted\n        into a single line of text with HTML markup.\n        \"\"\"\n        fromlist,tolist,flaglist = [],[],[]\n        for fromdata,todata,flag in diffs:\n            try:\n                fromlist.append(self._format_line(0,flag,*fromdata))\n                tolist.append(self._format_line(1,flag,*todata))\n            except TypeError:\n                fromlist.append(None)\n                tolist.append(None)\n            flaglist.append(flag)\n        return fromlist,tolist,flaglist\n    def _format_line(self,side,flag,linenum,text):\n        \"\"\"Returns HTML markup of \"from\" / \"to\" text lines\n        side -- 0 or 1 indicating \"from\" or \"to\" text\n        flag -- indicates if difference on line\n        linenum -- line number (used for line number column)\n        text -- line text to be marked up\n        \"\"\"\n        try:\n            linenum = '%d' % linenum\n            id = ' id=\"%s%s\"' % (self._prefix[side],linenum)\n        except TypeError:\n            id = ''\n        text=text.replace(\"&\",\"&amp;\").replace(\">\",\"&gt;\").replace(\"<\",\"&lt;\")\n        text = text.replace(' ','&nbsp;').rstrip()\n        return '<td class=\"diff_header\"%s>%s</td><td nowrap=\"nowrap\">%s</td>' \\\n               % (id,linenum,text)\n    def _make_prefix(self):\n        \"\"\"Create unique anchor prefixes\"\"\"\n        fromprefix = \"from%d_\" % HtmlDiff._default_prefix\n        toprefix = \"to%d_\" % HtmlDiff._default_prefix\n        HtmlDiff._default_prefix += 1\n        self._prefix = [fromprefix,toprefix]\n    def _convert_flags(self,fromlist,tolist,flaglist,context,numlines):\n        \"\"\"Makes list of \"next\" links\"\"\"\n        toprefix = self._prefix[1]\n        next_id = ['']*len(flaglist)\n        next_href = ['']*len(flaglist)\n        num_chg, in_change = 0, False\n        last = 0\n        for i,flag in enumerate(flaglist):\n            if flag:\n                if not in_change:\n                    in_change = True\n                    last = i\n                    i = max([0,i-numlines])\n                    next_id[i] = ' id=\"difflib_chg_%s_%d\"' % (toprefix,num_chg)\n                    num_chg += 1\n                    next_href[last] = '<a href=\"#difflib_chg_%s_%d\">n</a>' % (\n                         toprefix,num_chg)\n            else:\n                in_change = False\n        if not flaglist:\n            flaglist = [False]\n            next_id = ['']\n            next_href = ['']\n            last = 0\n            if context:\n                fromlist = ['<td></td><td>&nbsp;No Differences Found&nbsp;</td>']\n                tolist = fromlist\n            else:\n                fromlist = tolist = ['<td></td><td>&nbsp;Empty File&nbsp;</td>']\n        if not flaglist[0]:\n            next_href[0] = '<a href=\"#difflib_chg_%s_0\">f</a>' % toprefix\n        next_href[last] = '<a href=\"#difflib_chg_%s_top\">t</a>' % (toprefix)\n        return fromlist,tolist,flaglist,next_href,next_id\n    def make_table(self,fromlines,tolines,fromdesc='',todesc='',context=False,\n                   numlines=5):\n        \"\"\"Returns HTML table of side by side comparison with change highlights\n        Arguments:\n        fromlines -- list of \"from\" lines\n        tolines -- list of \"to\" lines\n        fromdesc -- \"from\" file column header string\n        todesc -- \"to\" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the \"next\" link anchors before the next change (so click of\n            \"next\" link jumps to just before the change).\n        \"\"\"\n        self._make_prefix()\n        fromlines,tolines = self._tab_newline_replace(fromlines,tolines)\n        if context:\n            context_lines = numlines\n        else:\n            context_lines = None\n        diffs = _mdiff(fromlines,tolines,context_lines,linejunk=self._linejunk,\n                      charjunk=self._charjunk)\n        if self._wrapcolumn:\n            diffs = self._line_wrapper(diffs)\n        fromlist,tolist,flaglist = self._collect_lines(diffs)\n        fromlist,tolist,flaglist,next_href,next_id = self._convert_flags(\n            fromlist,tolist,flaglist,context,numlines)\n        s = []\n        fmt = '            <tr><td class=\"diff_next\"%s>%s</td>%s' + \\\n              '<td class=\"diff_next\">%s</td>%s</tr>\\n'\n        for i in range(len(flaglist)):\n            if flaglist[i] is None:\n                if i > 0:\n                    s.append('        </tbody>        \\n        <tbody>\\n')\n            else:\n                s.append( fmt % (next_id[i],next_href[i],fromlist[i],\n                                           next_href[i],tolist[i]))\n        if fromdesc or todesc:\n            header_row = '<thead><tr>%s%s%s%s</tr></thead>' % (\n                '<th class=\"diff_next\"><br /></th>',\n                '<th colspan=\"2\" class=\"diff_header\">%s</th>' % fromdesc,\n                '<th class=\"diff_next\"><br /></th>',\n                '<th colspan=\"2\" class=\"diff_header\">%s</th>' % todesc)\n        else:\n            header_row = ''\n        table = self._table_template % dict(\n            data_rows=''.join(s),\n            header_row=header_row,\n            prefix=self._prefix[1])\n        return table.replace('\\0+','<span class=\"diff_add\">'). \\\n                     replace('\\0-','<span class=\"diff_sub\">'). \\\n                     replace('\\0^','<span class=\"diff_chg\">'). \\\n                     replace('\\1','</span>'). \\\n                     replace('\\t','&nbsp;')\ndel re\ndef restore(delta, which):\n    r\"\"\"\n    Generate one of the two sequences that generated a delta.\n    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract\n    lines originating from file 1 or 2 (parameter `which`), stripping off line\n    prefixes.\n    Examples:\n    >>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(keepends=True),\n    ...              'ore\\ntree\\nemu\\n'.splitlines(keepends=True))\n    >>> diff = list(diff)\n    >>> print(''.join(restore(diff, 1)), end=\"\")\n    one\n    two\n    three\n    >>> print(''.join(restore(diff, 2)), end=\"\")\n    ore\n    tree\n    emu\n    \"\"\"\n    try:\n        tag = {1: \"- \", 2: \"+ \"}[int(which)]\n    except KeyError:\n        raise ValueError('unknown delta choice (must be 1 or 2): %r'\n                           % which)\n    prefixes = (\"  \", tag)\n    for line in delta:\n        if line[:2] in prefixes:\n            yield line[2:]\ndef _test():\n    import doctest, difflib\n    return doctest.testmod(difflib)\nif __name__ == \"__main__\":\n    _test()\n", "/Lib/codecs.py": "\"\"\" codecs -- Python Codec Registry, API and helpers.\nWritten by Marc-Andre Lemburg (mal@lemburg.com).\n(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.\n\"\"\"#\"\nimport builtins, sys\ntry:\n    from _codecs import *\nexcept ImportError as why:\n    raise SystemError('Failed to load the builtin codecs: %s' % why)\n__all__ = [\"register\", \"lookup\", \"open\", \"EncodedFile\", \"BOM\", \"BOM_BE\",\n           \"BOM_LE\", \"BOM32_BE\", \"BOM32_LE\", \"BOM64_BE\", \"BOM64_LE\",\n           \"BOM_UTF8\", \"BOM_UTF16\", \"BOM_UTF16_LE\", \"BOM_UTF16_BE\",\n           \"BOM_UTF32\", \"BOM_UTF32_LE\", \"BOM_UTF32_BE\",\n           \"strict_errors\", \"ignore_errors\", \"replace_errors\",\n           \"xmlcharrefreplace_errors\",\n           \"register_error\", \"lookup_error\"]\nBOM_UTF8 = b'\\xef\\xbb\\xbf'\nBOM_LE = BOM_UTF16_LE = b'\\xff\\xfe'\nBOM_BE = BOM_UTF16_BE = b'\\xfe\\xff'\nBOM_UTF32_LE = b'\\xff\\xfe\\x00\\x00'\nBOM_UTF32_BE = b'\\x00\\x00\\xfe\\xff'\nif sys.byteorder == 'little':\n    BOM = BOM_UTF16 = BOM_UTF16_LE\n    BOM_UTF32 = BOM_UTF32_LE\nelse:\n    BOM = BOM_UTF16 = BOM_UTF16_BE\n    BOM_UTF32 = BOM_UTF32_BE\nBOM32_LE = BOM_UTF16_LE\nBOM32_BE = BOM_UTF16_BE\nBOM64_LE = BOM_UTF32_LE\nBOM64_BE = BOM_UTF32_BE\nclass CodecInfo(tuple):\n    def __new__(cls, encode, decode, streamreader=None, streamwriter=None,\n        incrementalencoder=None, incrementaldecoder=None, name=None):\n        self = tuple.__new__(cls, (encode, decode, streamreader, streamwriter))\n        self.name = name\n        self.encode = encode\n        self.decode = decode\n        self.incrementalencoder = incrementalencoder\n        self.incrementaldecoder = incrementaldecoder\n        self.streamwriter = streamwriter\n        self.streamreader = streamreader\n        return self\n    def __repr__(self):\n        return \"<%s.%s object for encoding %s at 0x%x>\" % \\\n                (self.__class__.__module__, self.__class__.__name__,\n                 self.name, id(self))\nclass Codec:\n    \"\"\" Defines the interface for stateless encoders/decoders.\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and '?' on encoding.\n         'xmlcharrefreplace' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         'backslashreplace'  - Replace with backslashed escape sequences\n                               (only for encoding).\n        The set of allowed values can be extended via register_error.\n    \"\"\"\n    def encode(self, input, errors='strict'):\n        \"\"\" Encodes the object input and returns a tuple (output\n            object, length consumed).\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n        \"\"\"\n        raise NotImplementedError\n    def decode(self, input, errors='strict'):\n        \"\"\" Decodes the object input and returns a tuple (output\n            object, length consumed).\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n        \"\"\"\n        raise NotImplementedError\nclass IncrementalEncoder(object):\n    \"\"\"\n    An IncrementalEncoder encodes an input in multiple steps. The input can\n    be passed piece by piece to the encode() method. The IncrementalEncoder\n    remembers the state of the encoding process between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Creates an IncrementalEncoder instance.\n        The IncrementalEncoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        \"\"\"\n        self.errors = errors\n        self.buffer = \"\"\n    def encode(self, input, final=False):\n        \"\"\"\n        Encodes input and returns the resulting object.\n        \"\"\"\n        raise NotImplementedError\n    def reset(self):\n        \"\"\"\n        Resets the encoder to the initial state.\n        \"\"\"\n    def getstate(self):\n        \"\"\"\n        Return the current state of the encoder.\n        \"\"\"\n        return 0\n    def setstate(self, state):\n        \"\"\"\n        Set the current state of the encoder. state must have been\n        returned by getstate().\n        \"\"\"\nclass BufferedIncrementalEncoder(IncrementalEncoder):\n    \"\"\"\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalEncoder.__init__(self, errors)\n        self.buffer = \"\"\n    def _buffer_encode(self, input, errors, final):\n        raise NotImplementedError\n    def encode(self, input, final=False):\n        data = self.buffer + input\n        (result, consumed) = self._buffer_encode(data, self.errors, final)\n        self.buffer = data[consumed:]\n        return result\n    def reset(self):\n        IncrementalEncoder.reset(self)\n        self.buffer = \"\"\n    def getstate(self):\n        return self.buffer or 0\n    def setstate(self, state):\n        self.buffer = state or \"\"\nclass IncrementalDecoder(object):\n    \"\"\"\n    An IncrementalDecoder decodes an input in multiple steps. The input can\n    be passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    \"\"\"\n    def __init__(self, errors='strict'):\n        \"\"\"\n        Create a IncrementalDecoder instance.\n        The IncrementalDecoder may use different error handling schemes by\n        providing the errors keyword argument. See the module docstring\n        for a list of possible values.\n        \"\"\"\n        self.errors = errors\n    def decode(self, input, final=False):\n        \"\"\"\n        Decode input and returns the resulting object.\n        \"\"\"\n        raise NotImplementedError\n    def reset(self):\n        \"\"\"\n        Reset the decoder to the initial state.\n        \"\"\"\n    def getstate(self):\n        \"\"\"\n        Return the current state of the decoder.\n        This must be a (buffered_input, additional_state_info) tuple.\n        buffered_input must be a bytes object containing bytes that\n        were passed to decode() that have not yet been converted.\n        additional_state_info must be a non-negative integer\n        representing the state of the decoder WITHOUT yet having\n        processed the contents of buffered_input.  In the initial state\n        and after reset(), getstate() must return (b\"\", 0).\n        \"\"\"\n        return (b\"\", 0)\n    def setstate(self, state):\n        \"\"\"\n        Set the current state of the decoder.\n        state must have been returned by getstate().  The effect of\n        setstate((b\"\", 0)) must be equivalent to reset().\n        \"\"\"\nclass BufferedIncrementalDecoder(IncrementalDecoder):\n    \"\"\"\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete\n    byte sequences.\n    \"\"\"\n    def __init__(self, errors='strict'):\n        IncrementalDecoder.__init__(self, errors)\n        self.buffer = b\"\"\n    def _buffer_decode(self, input, errors, final):\n        raise NotImplementedError\n    def decode(self, input, final=False):\n        data = self.buffer + input\n        (result, consumed) = self._buffer_decode(data, self.errors, final)\n        self.buffer = data[consumed:]\n        return result\n    def reset(self):\n        IncrementalDecoder.reset(self)\n        self.buffer = b\"\"\n    def getstate(self):\n        return (self.buffer, 0)\n    def setstate(self, state):\n        self.buffer = state[0]\nclass StreamWriter(Codec):\n    def __init__(self, stream, errors='strict'):\n        \"\"\" Creates a StreamWriter instance.\n            stream must be a file-like object open for writing\n            (binary) data.\n            The StreamWriter may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character\n             'xmlcharrefreplace' - Replace with the appropriate XML\n                                   character reference.\n             'backslashreplace'  - Replace with backslashed escape\n                                   sequences (only for encoding).\n            The set of allowed parameter values can be extended via\n            register_error.\n        \"\"\"\n        self.stream = stream\n        self.errors = errors\n    def write(self, object):\n        \"\"\" Writes the object's contents encoded to self.stream.\n        \"\"\"\n        data, consumed = self.encode(object, self.errors)\n        self.stream.write(data)\n    def writelines(self, list):\n        \"\"\" Writes the concatenated list of strings to the stream\n            using .write().\n        \"\"\"\n        self.write(''.join(list))\n    def reset(self):\n        \"\"\" Flushes and resets the codec buffers used for keeping state.\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n        \"\"\"\n        pass\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        if whence == 0 and offset == 0:\n            self.reset()\n    def __getattr__(self, name,\n                    getattr=getattr):\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n    def __enter__(self):\n        return self\n    def __exit__(self, type, value, tb):\n        self.stream.close()\nclass StreamReader(Codec):\n    charbuffertype = str\n    def __init__(self, stream, errors='strict'):\n        \"\"\" Creates a StreamReader instance.\n            stream must be a file-like object open for reading\n            (binary) data.\n            The StreamReader may use different error handling\n            schemes by providing the errors keyword argument. These\n            parameters are predefined:\n             'strict' - raise a ValueError (or a subclass)\n             'ignore' - ignore the character and continue with the next\n             'replace'- replace with a suitable replacement character;\n            The set of allowed parameter values can be extended via\n            register_error.\n        \"\"\"\n        self.stream = stream\n        self.errors = errors\n        self.bytebuffer = b\"\"\n        self._empty_charbuffer = self.charbuffertype()\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n    def decode(self, input, errors='strict'):\n        raise NotImplementedError\n    def read(self, size=-1, chars=-1, firstline=False):\n        \"\"\" Decodes data from the stream self.stream and returns the\n            resulting object.\n            chars indicates the number of characters to read from the\n            stream. read() will never return more than chars\n            characters, but it might return less, if there are not enough\n            characters available.\n            size indicates the approximate maximum number of bytes to\n            read from the stream for decoding purposes. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n            The method should use a greedy read strategy meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        \"\"\"\n        if self.linebuffer:\n            self.charbuffer = self._empty_charbuffer.join(self.linebuffer)\n            self.linebuffer = None\n        while True:\n            if chars < 0:\n                if size < 0:\n                    if self.charbuffer:\n                        break\n                elif len(self.charbuffer) >= size:\n                    break\n            else:\n                if len(self.charbuffer) >= chars:\n                    break\n            if size < 0:\n                newdata = self.stream.read()\n            else:\n                newdata = self.stream.read(size)\n            data = self.bytebuffer + newdata\n            try:\n                newchars, decodedbytes = self.decode(data, self.errors)\n            except UnicodeDecodeError as exc:\n                if firstline:\n                    newchars, decodedbytes = \\\n                        self.decode(data[:exc.start], self.errors)\n                    lines = newchars.splitlines(keepends=True)\n                    if len(lines)<=1:\n                        raise\n                else:\n                    raise\n            self.bytebuffer = data[decodedbytes:]\n            self.charbuffer += newchars\n            if not newdata:\n                break\n        if chars < 0:\n            result = self.charbuffer\n            self.charbuffer = self._empty_charbuffer\n        else:\n            result = self.charbuffer[:chars]\n            self.charbuffer = self.charbuffer[chars:]\n        return result\n    def readline(self, size=None, keepends=True):\n        \"\"\" Read one line from the input stream and return the\n            decoded data.\n            size, if given, is passed as size argument to the\n            read() method.\n        \"\"\"\n        if self.linebuffer:\n            line = self.linebuffer[0]\n            del self.linebuffer[0]\n            if len(self.linebuffer) == 1:\n                self.charbuffer = self.linebuffer[0]\n                self.linebuffer = None\n            if not keepends:\n                line = line.splitlines(keepends=False)[0]\n            return line\n        readsize = size or 72\n        line = self._empty_charbuffer\n        while True:\n            data = self.read(readsize, firstline=True)\n            if data:\n                if (isinstance(data, str) and data.endswith(\"\\r\")) or \\\n                   (isinstance(data, bytes) and data.endswith(b\"\\r\")):\n                    data += self.read(size=1, chars=1)\n            line += data\n            lines = line.splitlines(keepends=True)\n            if lines:\n                if len(lines) > 1:\n                    line = lines[0]\n                    del lines[0]\n                    if len(lines) > 1:\n                        lines[-1] += self.charbuffer\n                        self.linebuffer = lines\n                        self.charbuffer = None\n                    else:\n                        self.charbuffer = lines[0] + self.charbuffer\n                    if not keepends:\n                        line = line.splitlines(keepends=False)[0]\n                    break\n                line0withend = lines[0]\n                line0withoutend = lines[0].splitlines(keepends=False)[0]\n                if line0withend != line0withoutend: # We really have a line end\n                    self.charbuffer = self._empty_charbuffer.join(lines[1:]) + \\\n                                      self.charbuffer\n                    if keepends:\n                        line = line0withend\n                    else:\n                        line = line0withoutend\n                    break\n            if not data or size is not None:\n                if line and not keepends:\n                    line = line.splitlines(keepends=False)[0]\n                break\n            if readsize < 8000:\n                readsize *= 2\n        return line\n    def readlines(self, sizehint=None, keepends=True):\n        \"\"\" Read all lines available on the input stream\n            and return them as list of lines.\n            Line breaks are implemented using the codec's decoder\n            method and are included in the list entries.\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n        \"\"\"\n        data = self.read()\n        return data.splitlines(keepends)\n    def reset(self):\n        \"\"\" Resets the codec buffers used for keeping state.\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n        \"\"\"\n        self.bytebuffer = b\"\"\n        self.charbuffer = self._empty_charbuffer\n        self.linebuffer = None\n    def seek(self, offset, whence=0):\n        \"\"\" Set the input stream's current position.\n            Resets the codec buffers used for keeping state.\n        \"\"\"\n        self.stream.seek(offset, whence)\n        self.reset()\n    def __next__(self):\n        \"\"\" Return the next decoded line from the input stream.\"\"\"\n        line = self.readline()\n        if line:\n            return line\n        raise StopIteration\n    def __iter__(self):\n        return self\n    def __getattr__(self, name,\n                    getattr=getattr):\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n    def __enter__(self):\n        return self\n    def __exit__(self, type, value, tb):\n        self.stream.close()\nclass StreamReaderWriter:\n    \"\"\" StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n    \"\"\"\n    encoding = 'unknown'\n    def __init__(self, stream, Reader, Writer, errors='strict'):\n        \"\"\" Creates a StreamReaderWriter instance.\n            stream must be a Stream-like object.\n            Reader, Writer must be factory functions or classes\n            providing the StreamReader, StreamWriter interface resp.\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n        \"\"\"\n        self.stream = stream\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n    def read(self, size=-1):\n        return self.reader.read(size)\n    def readline(self, size=None):\n        return self.reader.readline(size)\n    def readlines(self, sizehint=None):\n        return self.reader.readlines(sizehint)\n    def __next__(self):\n        \"\"\" Return the next decoded line from the input stream.\"\"\"\n        return next(self.reader)\n    def __iter__(self):\n        return self\n    def write(self, data):\n        return self.writer.write(data)\n    def writelines(self, list):\n        return self.writer.writelines(list)\n    def reset(self):\n        self.reader.reset()\n        self.writer.reset()\n    def seek(self, offset, whence=0):\n        self.stream.seek(offset, whence)\n        self.reader.reset()\n        if whence == 0 and offset == 0:\n            self.writer.reset()\n    def __getattr__(self, name,\n                    getattr=getattr):\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n    def __enter__(self):\n        return self\n    def __exit__(self, type, value, tb):\n        self.stream.close()\nclass StreamRecoder:\n    \"\"\" StreamRecoder instances provide a frontend - backend\n        view of encoding data.\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n        Data written to the stream is first decoded into an\n        intermediate format (which is dependent on the given codec\n        combination) and then written to the stream using an instance\n        of the provided Writer class.\n        In the other direction, data is read from the stream using a\n        Reader instance and then return encoded data to the caller.\n    \"\"\"\n    data_encoding = 'unknown'\n    file_encoding = 'unknown'\n    def __init__(self, stream, encode, decode, Reader, Writer,\n                 errors='strict'):\n        \"\"\" Creates a StreamRecoder instance which implements a two-way\n            conversion: encode and decode work on the frontend (the\n            input to .read() and output of .write()) while\n            Reader and Writer work on the backend (reading and\n            writing to the stream).\n            You can use these objects to do transparent direct\n            recodings from e.g. latin-1 to utf-8 and back.\n            stream must be a file-like object.\n            encode, decode must adhere to the Codec interface, Reader,\n            Writer must be factory functions or classes providing the\n            StreamReader, StreamWriter interface resp.\n            encode and decode are needed for the frontend translation,\n            Reader and Writer for the backend translation. Unicode is\n            used as intermediate encoding.\n            Error handling is done in the same way as defined for the\n            StreamWriter/Readers.\n        \"\"\"\n        self.stream = stream\n        self.encode = encode\n        self.decode = decode\n        self.reader = Reader(stream, errors)\n        self.writer = Writer(stream, errors)\n        self.errors = errors\n    def read(self, size=-1):\n        data = self.reader.read(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n    def readline(self, size=None):\n        if size is None:\n            data = self.reader.readline()\n        else:\n            data = self.reader.readline(size)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n    def readlines(self, sizehint=None):\n        data = self.reader.read()\n        data, bytesencoded = self.encode(data, self.errors)\n        return data.splitlines(keepends=True)\n    def __next__(self):\n        \"\"\" Return the next decoded line from the input stream.\"\"\"\n        data = next(self.reader)\n        data, bytesencoded = self.encode(data, self.errors)\n        return data\n    def __iter__(self):\n        return self\n    def write(self, data):\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n    def writelines(self, list):\n        data = ''.join(list)\n        data, bytesdecoded = self.decode(data, self.errors)\n        return self.writer.write(data)\n    def reset(self):\n        self.reader.reset()\n        self.writer.reset()\n    def __getattr__(self, name,\n                    getattr=getattr):\n        \"\"\" Inherit all other methods from the underlying stream.\n        \"\"\"\n        return getattr(self.stream, name)\n    def __enter__(self):\n        return self\n    def __exit__(self, type, value, tb):\n        self.stream.close()\ndef open(filename, mode='rb', encoding=None, errors='strict', buffering=1):\n    \"\"\" Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n        Files are always opened in binary mode, even if no binary mode\n        was specified. This is done to avoid data loss due to encodings\n        using 8-bit values. The default file mode is 'rb' meaning to\n        open the file in binary read mode.\n        encoding specifies the encoding which is to be used for the\n        file.\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to line buffered.\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n    \"\"\"\n    if encoding is not None and \\\n       'b' not in mode:\n        mode = mode + 'b'\n    file = builtins.open(filename, mode, buffering)\n    if encoding is None:\n        return file\n    info = lookup(encoding)\n    srw = StreamReaderWriter(file, info.streamreader, info.streamwriter, errors)\n    srw.encoding = encoding\n    return srw\ndef EncodedFile(file, data_encoding, file_encoding=None, errors='strict'):\n    \"\"\" Return a wrapped version of file which provides transparent\n        encoding translation.\n        Strings written to the wrapped file are interpreted according\n        to the given data_encoding and then written to the original\n        file as string using file_encoding. The intermediate encoding\n        will usually be Unicode but depends on the specified codecs.\n        Strings are read from the file using file_encoding and then\n        passed back to the caller as string using data_encoding.\n        If file_encoding is not given, it defaults to data_encoding.\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n    \"\"\"\n    if file_encoding is None:\n        file_encoding = data_encoding\n    data_info = lookup(data_encoding)\n    file_info = lookup(file_encoding)\n    sr = StreamRecoder(file, data_info.encode, data_info.decode,\n                       file_info.streamreader, file_info.streamwriter, errors)\n    sr.data_encoding = data_encoding\n    sr.file_encoding = file_encoding\n    return sr\ndef getencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its encoder function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).encode\ndef getdecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its decoder function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).decode\ndef getincrementalencoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n    \"\"\"\n    encoder = lookup(encoding).incrementalencoder\n    if encoder is None:\n        raise LookupError(encoding)\n    return encoder\ndef getincrementaldecoder(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n    \"\"\"\n    decoder = lookup(encoding).incrementaldecoder\n    if decoder is None:\n        raise LookupError(encoding)\n    return decoder\ndef getreader(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).streamreader\ndef getwriter(encoding):\n    \"\"\" Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n        Raises a LookupError in case the encoding cannot be found.\n    \"\"\"\n    return lookup(encoding).streamwriter\ndef iterencode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Encoding iterator.\n    Encodes the input strings from the iterator using a IncrementalEncoder.\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    \"\"\"\n    encoder = getincrementalencoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = encoder.encode(input)\n        if output:\n            yield output\n    output = encoder.encode(\"\", True)\n    if output:\n        yield output\ndef iterdecode(iterator, encoding, errors='strict', **kwargs):\n    \"\"\"\n    Decoding iterator.\n    Decodes the input strings from the iterator using a IncrementalDecoder.\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    \"\"\"\n    decoder = getincrementaldecoder(encoding)(errors, **kwargs)\n    for input in iterator:\n        output = decoder.decode(input)\n        if output:\n            yield output\n    output = decoder.decode(b\"\", True)\n    if output:\n        yield output\ndef make_identity_dict(rng):\n    \"\"\" make_identity_dict(rng) -> dict\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n    \"\"\"\n    return {i:i for i in rng}\ndef make_encoding_map(decoding_map):\n    \"\"\" Creates an encoding map from a decoding map.\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n        One example where this happens is cp875.py which decodes\n        multiple character to \\u001a.\n    \"\"\"\n    m = {}\n    for k,v in decoding_map.items():\n        if not v in m:\n            m[v] = k\n        else:\n            m[v] = None\n    return m\ntry:\n    strict_errors = lookup_error(\"strict\")\n    ignore_errors = lookup_error(\"ignore\")\n    replace_errors = lookup_error(\"replace\")\n    xmlcharrefreplace_errors = lookup_error(\"xmlcharrefreplace\")\n    backslashreplace_errors = lookup_error(\"backslashreplace\")\nexcept LookupError:\n    strict_errors = None\n    ignore_errors = None\n    replace_errors = None\n    xmlcharrefreplace_errors = None\n    backslashreplace_errors = None\n_false = 0\nif _false:\n    import encodings\nif __name__ == '__main__':\n    sys.stdout = EncodedFile(sys.stdout, 'latin-1', 'utf-8')\n    sys.stdin = EncodedFile(sys.stdin, 'utf-8', 'latin-1')\n", "/Lib/urllib/request.py": "from browser import ajax\nclass FileIO:\n  def __init__(self, data):\n      self._data=data\n  def read(self):\n      return self._data\ndef urlopen(url, data=None, timeout=None):\n    global result\n    result=None\n    def on_complete(req):\n        global result\n        result=req\n    _ajax=ajax.ajax()\n    _ajax.bind('complete', on_complete)\n    if timeout is not None:\n       _ajax.set_timeout(timeout)\n    _ajax.open('GET', url, False)\n    if data is None:\n       _ajax.send()\n    else:\n       _ajax.send(data)\n    return FileIO(result.text()), url, result.headers\n", "/Lib/unittest/main.py": "\"\"\"Unittest main program\"\"\"\nimport sys\nimport optparse\nimport os\nfrom . import loader, runner\nfrom .signals import installHandler\n__unittest = True\nFAILFAST     = \"  -f, --failfast   Stop on first failure\\n\"\nCATCHBREAK   = \"  -c, --catch      Catch control-C and display results\\n\"\nBUFFEROUTPUT = \"  -b, --buffer     Buffer stdout and stderr during test runs\\n\"\nUSAGE_AS_MAIN = \"\"\"\\\nUsage: %(progName)s [options] [tests]\nOptions:\n  -h, --help       Show this message\n  -v, --verbose    Verbose output\n  -q, --quiet      Minimal output\n%(failfast)s%(catchbreak)s%(buffer)s\nExamples:\n  %(progName)s test_module               - run tests from test_module\n  %(progName)s module.TestClass          - run tests from module.TestClass\n  %(progName)s module.Class.test_method  - run specified test method\n[tests] can be a list of any number of test modules, classes and test\nmethods.\nAlternative Usage: %(progName)s discover [options]\nOptions:\n  -v, --verbose    Verbose output\n%(failfast)s%(catchbreak)s%(buffer)s  -s directory     Directory to start discovery ('.' default)\n  -p pattern       Pattern to match test files ('test*.py' default)\n  -t directory     Top level directory of project (default to\n                   start directory)\nFor test discovery all test modules must be importable from the top\nlevel directory of the project.\n\"\"\"\nUSAGE_FROM_MODULE = \"\"\"\\\nUsage: %(progName)s [options] [test] [...]\nOptions:\n  -h, --help       Show this message\n  -v, --verbose    Verbose output\n  -q, --quiet      Minimal output\n%(failfast)s%(catchbreak)s%(buffer)s\nExamples:\n  %(progName)s                               - run default set of tests\n  %(progName)s MyTestSuite                   - run suite 'MyTestSuite'\n  %(progName)s MyTestCase.testSomething      - run MyTestCase.testSomething\n  %(progName)s MyTestCase                    - run all 'test*' test methods\n                                               in MyTestCase\n\"\"\"\ndef _convert_name(name):\n    if os.path.isfile(name) and name.lower().endswith('.py'):\n        if os.path.isabs(name):\n            rel_path = os.path.relpath(name, os.getcwd())\n            if os.path.isabs(rel_path) or rel_path.startswith(os.pardir):\n                return name\n            name = rel_path\n        return name[:-3].replace('\\\\', '.').replace('/', '.')\n    return name\ndef _convert_names(names):\n    return [_convert_name(name) for name in names]\nclass TestProgram(object):\n    \"\"\"A command-line program that runs a set of tests; this is primarily\n       for making test modules conveniently executable.\n    \"\"\"\n    USAGE = USAGE_FROM_MODULE\n    failfast = catchbreak = buffer = progName = warnings = None\n    def __init__(self, module='__main__', defaultTest=None, argv=None,\n                    testRunner=None, testLoader=loader.defaultTestLoader,\n                    exit=True, verbosity=1, failfast=None, catchbreak=None,\n                    buffer=None, warnings=None):\n        if isinstance(module, str):\n            self.module = __import__(module)\n            for part in module.split('.')[1:]:\n                self.module = getattr(self.module, part)\n        else:\n            self.module = module\n        if argv is None:\n            argv = sys.argv\n        self.exit = exit\n        self.failfast = failfast\n        self.catchbreak = catchbreak\n        self.verbosity = verbosity\n        self.buffer = buffer\n        if warnings is None and not sys.warnoptions:\n            self.warnings = 'default'\n        else:\n            self.warnings = warnings\n        self.defaultTest = defaultTest\n        self.testRunner = testRunner\n        self.testLoader = testLoader\n        self.progName = os.path.basename(argv[0])\n        self.parseArgs(argv)\n        self.runTests()\n    def usageExit(self, msg=None):\n        if msg:\n            print(msg)\n        usage = {'progName': self.progName, 'catchbreak': '', 'failfast': '',\n                 'buffer': ''}\n        if self.failfast != False:\n            usage['failfast'] = FAILFAST\n        if self.catchbreak != False:\n            usage['catchbreak'] = CATCHBREAK\n        if self.buffer != False:\n            usage['buffer'] = BUFFEROUTPUT\n        print(self.USAGE % usage)\n        sys.exit(2)\n    def parseArgs(self, argv):\n        if ((len(argv) > 1 and argv[1].lower() == 'discover') or\n            (len(argv) == 1 and self.module is None)):\n            self._do_discovery(argv[2:])\n            return\n        parser = self._getOptParser()\n        options, args = parser.parse_args(argv[1:])\n        self._setAttributesFromOptions(options)\n        if len(args) == 0 and self.module is None:\n            self._do_discovery(argv[1:])\n            return\n        if len(args) == 0 and self.defaultTest is None:\n            self.testNames = None\n        elif len(args) > 0:\n            self.testNames = _convert_names(args)\n            if __name__ == '__main__':\n                self.module = None\n        else:\n            self.testNames = (self.defaultTest,)\n        self.createTests()\n    def createTests(self):\n        if self.testNames is None:\n            self.test = self.testLoader.loadTestsFromModule(self.module)\n        else:\n            self.test = self.testLoader.loadTestsFromNames(self.testNames,\n                                                           self.module)\n    def _getOptParser(self):\n        parser = optparse.OptionParser()\n        parser.prog = self.progName\n        parser.add_option('-v', '--verbose', dest='verbose', default=False,\n                          help='Verbose output', action='store_true')\n        parser.add_option('-q', '--quiet', dest='quiet', default=False,\n                          help='Quiet output', action='store_true')\n        if self.failfast != False:\n            parser.add_option('-f', '--failfast', dest='failfast', default=False,\n                              help='Stop on first fail or error',\n                              action='store_true')\n        if self.catchbreak != False:\n            parser.add_option('-c', '--catch', dest='catchbreak', default=False,\n                              help='Catch ctrl-C and display results so far',\n                              action='store_true')\n        if self.buffer != False:\n            parser.add_option('-b', '--buffer', dest='buffer', default=False,\n                              help='Buffer stdout and stderr during tests',\n                              action='store_true')\n        return parser\n    def _setAttributesFromOptions(self, options):\n        if self.failfast is None:\n            self.failfast = options.failfast\n        if self.catchbreak is None:\n            self.catchbreak = options.catchbreak\n        if self.buffer is None:\n            self.buffer = options.buffer\n        if options.verbose:\n            self.verbosity = 2\n        elif options.quiet:\n            self.verbosity = 0\n    def _addDiscoveryOptions(self, parser):\n        parser.add_option('-s', '--start-directory', dest='start', default='.',\n                          help=\"Directory to start discovery ('.' default)\")\n        parser.add_option('-p', '--pattern', dest='pattern', default='test*.py',\n                          help=\"Pattern to match tests ('test*.py' default)\")\n        parser.add_option('-t', '--top-level-directory', dest='top', default=None,\n                          help='Top level directory of project (defaults to start directory)')\n    def _do_discovery(self, argv, Loader=loader.TestLoader):\n        self.progName = '%s discover' % self.progName\n        parser = self._getOptParser()\n        self._addDiscoveryOptions(parser)\n        options, args = parser.parse_args(argv)\n        if len(args) > 3:\n            self.usageExit()\n        for name, value in zip(('start', 'pattern', 'top'), args):\n            setattr(options, name, value)\n        self._setAttributesFromOptions(options)\n        start_dir = options.start\n        pattern = options.pattern\n        top_level_dir = options.top\n        loader = Loader()\n        self.test = loader.discover(start_dir, pattern, top_level_dir)\n    def runTests(self):\n        if self.catchbreak:\n            installHandler()\n        if self.testRunner is None:\n            self.testRunner = runner.TextTestRunner\n        if isinstance(self.testRunner, type):\n            try:\n                testRunner = self.testRunner(verbosity=self.verbosity,\n                                             failfast=self.failfast,\n                                             buffer=self.buffer,\n                                             warnings=self.warnings)\n            except TypeError:\n                testRunner = self.testRunner()\n        else:\n            testRunner = self.testRunner\n        self.result = testRunner.run(self.test)\n        if self.exit:\n            sys.exit(not self.result.wasSuccessful())\nmain = TestProgram\n", "/Lib/unittest/test/testmock/testpatch.py": "import os\r\nimport sys\r\nimport unittest\r\nfrom unittest.test.testmock import support\r\nfrom unittest.test.testmock.support import SomeClass, is_instance\r\nfrom unittest.mock import (\r\n    NonCallableMock, CallableMixin, patch, sentinel,\r\n    MagicMock, Mock, NonCallableMagicMock, patch, _patch,\r\n    DEFAULT, call, _get_target\r\n)\r\nbuiltin_string = 'builtins'\r\nPTModule = sys.modules[__name__]\r\nMODNAME = '%s.PTModule' % __name__\r\ndef _get_proxy(obj, get_only=True):\r\n    class Proxy(object):\r\n        def __getattr__(self, name):\r\n            return getattr(obj, name)\r\n    if not get_only:\r\n        def __setattr__(self, name, value):\r\n            setattr(obj, name, value)\r\n        def __delattr__(self, name):\r\n            delattr(obj, name)\r\n        Proxy.__setattr__ = __setattr__\r\n        Proxy.__delattr__ = __delattr__\r\n    return Proxy()\r\nsomething  = sentinel.Something\r\nsomething_else  = sentinel.SomethingElse\r\nclass Foo(object):\r\n    def __init__(self, a):\r\n        pass\r\n    def f(self, a):\r\n        pass\r\n    def g(self):\r\n        pass\r\n    foo = 'bar'\r\n    class Bar(object):\r\n        def a(self):\r\n            pass\r\nfoo_name = '%s.Foo' % __name__\r\ndef function(a, b=Foo):\r\n    pass\r\nclass Container(object):\r\n    def __init__(self):\r\n        self.values = {}\r\n    def __getitem__(self, name):\r\n        return self.values[name]\r\n    def __setitem__(self, name, value):\r\n        self.values[name] = value\r\n    def __delitem__(self, name):\r\n        del self.values[name]\r\n    def __iter__(self):\r\n        return iter(self.values)\r\nclass PatchTest(unittest.TestCase):\r\n    def assertNotCallable(self, obj, magic=True):\r\n        MockClass = NonCallableMagicMock\r\n        if not magic:\r\n            MockClass = NonCallableMock\r\n        self.assertRaises(TypeError, obj)\r\n        self.assertTrue(is_instance(obj, MockClass))\r\n        self.assertFalse(is_instance(obj, CallableMixin))\r\n    def test_single_patchobject(self):\r\n        class Something(object):\r\n            attribute = sentinel.Original\r\n        @patch.object(Something, 'attribute', sentinel.Patched)\r\n        def test():\r\n            self.assertEqual(Something.attribute, sentinel.Patched, \"unpatched\")\r\n        test()\r\n        self.assertEqual(Something.attribute, sentinel.Original,\r\n                         \"patch not restored\")\r\n    def test_patchobject_with_none(self):\r\n        class Something(object):\r\n            attribute = sentinel.Original\r\n        @patch.object(Something, 'attribute', None)\r\n        def test():\r\n            self.assertIsNone(Something.attribute, \"unpatched\")\r\n        test()\r\n        self.assertEqual(Something.attribute, sentinel.Original,\r\n                         \"patch not restored\")\r\n    def test_multiple_patchobject(self):\r\n        class Something(object):\r\n            attribute = sentinel.Original\r\n            next_attribute = sentinel.Original2\r\n        @patch.object(Something, 'attribute', sentinel.Patched)\r\n        @patch.object(Something, 'next_attribute', sentinel.Patched2)\r\n        def test():\r\n            self.assertEqual(Something.attribute, sentinel.Patched,\r\n                             \"unpatched\")\r\n            self.assertEqual(Something.next_attribute, sentinel.Patched2,\r\n                             \"unpatched\")\r\n        test()\r\n        self.assertEqual(Something.attribute, sentinel.Original,\r\n                         \"patch not restored\")\r\n        self.assertEqual(Something.next_attribute, sentinel.Original2,\r\n                         \"patch not restored\")\r\n    def test_object_lookup_is_quite_lazy(self):\r\n        global something\r\n        original = something\r\n        @patch('%s.something' % __name__, sentinel.Something2)\r\n        def test():\r\n            pass\r\n        try:\r\n            something = sentinel.replacement_value\r\n            test()\r\n            self.assertEqual(something, sentinel.replacement_value)\r\n        finally:\r\n            something = original\r\n    def test_patch(self):\r\n        @patch('%s.something' % __name__, sentinel.Something2)\r\n        def test():\r\n            self.assertEqual(PTModule.something, sentinel.Something2,\r\n                             \"unpatched\")\r\n        test()\r\n        self.assertEqual(PTModule.something, sentinel.Something,\r\n                         \"patch not restored\")\r\n        @patch('%s.something' % __name__, sentinel.Something2)\r\n        @patch('%s.something_else' % __name__, sentinel.SomethingElse)\r\n        def test():\r\n            self.assertEqual(PTModule.something, sentinel.Something2,\r\n                             \"unpatched\")\r\n            self.assertEqual(PTModule.something_else, sentinel.SomethingElse,\r\n                             \"unpatched\")\r\n        self.assertEqual(PTModule.something, sentinel.Something,\r\n                         \"patch not restored\")\r\n        self.assertEqual(PTModule.something_else, sentinel.SomethingElse,\r\n                         \"patch not restored\")\r\n        test()\r\n        self.assertEqual(PTModule.something, sentinel.Something,\r\n                         \"patch not restored\")\r\n        self.assertEqual(PTModule.something_else, sentinel.SomethingElse,\r\n                         \"patch not restored\")\r\n        mock = Mock()\r\n        mock.return_value = sentinel.Handle\r\n        @patch('%s.open' % builtin_string, mock)\r\n        def test():\r\n            self.assertEqual(open('filename', 'r'), sentinel.Handle,\r\n                             \"open not patched\")\r\n        test()\r\n        test()\r\n        self.assertNotEqual(open, mock, \"patch not restored\")\r\n    def test_patch_class_attribute(self):\r\n        @patch('%s.SomeClass.class_attribute' % __name__,\r\n               sentinel.ClassAttribute)\r\n        def test():\r\n            self.assertEqual(PTModule.SomeClass.class_attribute,\r\n                             sentinel.ClassAttribute, \"unpatched\")\r\n        test()\r\n        self.assertIsNone(PTModule.SomeClass.class_attribute,\r\n                          \"patch not restored\")\r\n    def test_patchobject_with_default_mock(self):\r\n        class Test(object):\r\n            something = sentinel.Original\r\n            something2 = sentinel.Original2\r\n        @patch.object(Test, 'something')\r\n        def test(mock):\r\n            self.assertEqual(mock, Test.something,\r\n                             \"Mock not passed into test function\")\r\n            self.assertIsInstance(mock, MagicMock,\r\n                            \"patch with two arguments did not create a mock\")\r\n        test()\r\n        @patch.object(Test, 'something')\r\n        @patch.object(Test, 'something2')\r\n        def test(this1, this2, mock1, mock2):\r\n            self.assertEqual(this1, sentinel.this1,\r\n                             \"Patched function didn't receive initial argument\")\r\n            self.assertEqual(this2, sentinel.this2,\r\n                             \"Patched function didn't receive second argument\")\r\n            self.assertEqual(mock1, Test.something2,\r\n                             \"Mock not passed into test function\")\r\n            self.assertEqual(mock2, Test.something,\r\n                             \"Second Mock not passed into test function\")\r\n            self.assertIsInstance(mock2, MagicMock,\r\n                            \"patch with two arguments did not create a mock\")\r\n            self.assertIsInstance(mock2, MagicMock,\r\n                            \"patch with two arguments did not create a mock\")\r\n            self.assertNotEqual(outerMock1, mock1, \"unexpected value for mock1\")\r\n            self.assertNotEqual(outerMock2, mock2, \"unexpected value for mock1\")\r\n            return mock1, mock2\r\n        outerMock1 = outerMock2 = None\r\n        outerMock1, outerMock2 = test(sentinel.this1, sentinel.this2)\r\n        test(sentinel.this1, sentinel.this2)\r\n    def test_patch_with_spec(self):\r\n        @patch('%s.SomeClass' % __name__, spec=SomeClass)\r\n        def test(MockSomeClass):\r\n            self.assertEqual(SomeClass, MockSomeClass)\r\n            self.assertTrue(is_instance(SomeClass.wibble, MagicMock))\r\n            self.assertRaises(AttributeError, lambda: SomeClass.not_wibble)\r\n        test()\r\n    def test_patchobject_with_spec(self):\r\n        @patch.object(SomeClass, 'class_attribute', spec=SomeClass)\r\n        def test(MockAttribute):\r\n            self.assertEqual(SomeClass.class_attribute, MockAttribute)\r\n            self.assertTrue(is_instance(SomeClass.class_attribute.wibble,\r\n                                       MagicMock))\r\n            self.assertRaises(AttributeError,\r\n                              lambda: SomeClass.class_attribute.not_wibble)\r\n        test()\r\n    def test_patch_with_spec_as_list(self):\r\n        @patch('%s.SomeClass' % __name__, spec=['wibble'])\r\n        def test(MockSomeClass):\r\n            self.assertEqual(SomeClass, MockSomeClass)\r\n            self.assertTrue(is_instance(SomeClass.wibble, MagicMock))\r\n            self.assertRaises(AttributeError, lambda: SomeClass.not_wibble)\r\n        test()\r\n    def test_patchobject_with_spec_as_list(self):\r\n        @patch.object(SomeClass, 'class_attribute', spec=['wibble'])\r\n        def test(MockAttribute):\r\n            self.assertEqual(SomeClass.class_attribute, MockAttribute)\r\n            self.assertTrue(is_instance(SomeClass.class_attribute.wibble,\r\n                                       MagicMock))\r\n            self.assertRaises(AttributeError,\r\n                              lambda: SomeClass.class_attribute.not_wibble)\r\n        test()\r\n    def test_nested_patch_with_spec_as_list(self):\r\n        @patch('%s.open' % builtin_string)\r\n        @patch('%s.SomeClass' % __name__, spec=['wibble'])\r\n        def test(MockSomeClass, MockOpen):\r\n            self.assertEqual(SomeClass, MockSomeClass)\r\n            self.assertTrue(is_instance(SomeClass.wibble, MagicMock))\r\n            self.assertRaises(AttributeError, lambda: SomeClass.not_wibble)\r\n        test()\r\n    def test_patch_with_spec_as_boolean(self):\r\n        @patch('%s.SomeClass' % __name__, spec=True)\r\n        def test(MockSomeClass):\r\n            self.assertEqual(SomeClass, MockSomeClass)\r\n            MockSomeClass.wibble\r\n            self.assertRaises(AttributeError, lambda: MockSomeClass.not_wibble)\r\n        test()\r\n    def test_patch_object_with_spec_as_boolean(self):\r\n        @patch.object(PTModule, 'SomeClass', spec=True)\r\n        def test(MockSomeClass):\r\n            self.assertEqual(SomeClass, MockSomeClass)\r\n            MockSomeClass.wibble\r\n            self.assertRaises(AttributeError, lambda: MockSomeClass.not_wibble)\r\n        test()\r\n    def test_patch_class_acts_with_spec_is_inherited(self):\r\n        @patch('%s.SomeClass' % __name__, spec=True)\r\n        def test(MockSomeClass):\r\n            self.assertTrue(is_instance(MockSomeClass, MagicMock))\r\n            instance = MockSomeClass()\r\n            self.assertNotCallable(instance)\r\n            instance.wibble\r\n            self.assertRaises(AttributeError, lambda: instance.not_wibble)\r\n        test()\r\n    def test_patch_with_create_mocks_non_existent_attributes(self):\r\n        @patch('%s.frooble' % builtin_string, sentinel.Frooble, create=True)\r\n        def test():\r\n            self.assertEqual(frooble, sentinel.Frooble)\r\n        test()\r\n        self.assertRaises(NameError, lambda: frooble)\r\n    def test_patchobject_with_create_mocks_non_existent_attributes(self):\r\n        @patch.object(SomeClass, 'frooble', sentinel.Frooble, create=True)\r\n        def test():\r\n            self.assertEqual(SomeClass.frooble, sentinel.Frooble)\r\n        test()\r\n        self.assertFalse(hasattr(SomeClass, 'frooble'))\r\n    def test_patch_wont_create_by_default(self):\r\n        try:\r\n            @patch('%s.frooble' % builtin_string, sentinel.Frooble)\r\n            def test():\r\n                self.assertEqual(frooble, sentinel.Frooble)\r\n            test()\r\n        except AttributeError:\r\n            pass\r\n        else:\r\n            self.fail('Patching non existent attributes should fail')\r\n        self.assertRaises(NameError, lambda: frooble)\r\n    def test_patchobject_wont_create_by_default(self):\r\n        try:\r\n            @patch.object(SomeClass, 'frooble', sentinel.Frooble)\r\n            def test():\r\n                self.fail('Patching non existent attributes should fail')\r\n            test()\r\n        except AttributeError:\r\n            pass\r\n        else:\r\n            self.fail('Patching non existent attributes should fail')\r\n        self.assertFalse(hasattr(SomeClass, 'frooble'))\r\n    def test_patch_with_static_methods(self):\r\n        class Foo(object):\r\n            @staticmethod\r\n            def woot():\r\n                return sentinel.Static\r\n        @patch.object(Foo, 'woot', staticmethod(lambda: sentinel.Patched))\r\n        def anonymous():\r\n            self.assertEqual(Foo.woot(), sentinel.Patched)\r\n        anonymous()\r\n        self.assertEqual(Foo.woot(), sentinel.Static)\r\n    def test_patch_local(self):\r\n        foo = sentinel.Foo\r\n        @patch.object(sentinel, 'Foo', 'Foo')\r\n        def anonymous():\r\n            self.assertEqual(sentinel.Foo, 'Foo')\r\n        anonymous()\r\n        self.assertEqual(sentinel.Foo, foo)\r\n    def test_patch_slots(self):\r\n        class Foo(object):\r\n            __slots__ = ('Foo',)\r\n        foo = Foo()\r\n        foo.Foo = sentinel.Foo\r\n        @patch.object(foo, 'Foo', 'Foo')\r\n        def anonymous():\r\n            self.assertEqual(foo.Foo, 'Foo')\r\n        anonymous()\r\n        self.assertEqual(foo.Foo, sentinel.Foo)\r\n    def test_patchobject_class_decorator(self):\r\n        class Something(object):\r\n            attribute = sentinel.Original\r\n        class Foo(object):\r\n            def test_method(other_self):\r\n                self.assertEqual(Something.attribute, sentinel.Patched,\r\n                                 \"unpatched\")\r\n            def not_test_method(other_self):\r\n                self.assertEqual(Something.attribute, sentinel.Original,\r\n                                 \"non-test method patched\")\r\n        Foo = patch.object(Something, 'attribute', sentinel.Patched)(Foo)\r\n        f = Foo()\r\n        f.test_method()\r\n        f.not_test_method()\r\n        self.assertEqual(Something.attribute, sentinel.Original,\r\n                         \"patch not restored\")\r\n    def test_patch_class_decorator(self):\r\n        class Something(object):\r\n            attribute = sentinel.Original\r\n        class Foo(object):\r\n            def test_method(other_self, mock_something):\r\n                self.assertEqual(PTModule.something, mock_something,\r\n                                 \"unpatched\")\r\n            def not_test_method(other_self):\r\n                self.assertEqual(PTModule.something, sentinel.Something,\r\n                                 \"non-test method patched\")\r\n        Foo = patch('%s.something' % __name__)(Foo)\r\n        f = Foo()\r\n        f.test_method()\r\n        f.not_test_method()\r\n        self.assertEqual(Something.attribute, sentinel.Original,\r\n                         \"patch not restored\")\r\n        self.assertEqual(PTModule.something, sentinel.Something,\r\n                         \"patch not restored\")\r\n    def test_patchobject_twice(self):\r\n        class Something(object):\r\n            attribute = sentinel.Original\r\n            next_attribute = sentinel.Original2\r\n        @patch.object(Something, 'attribute', sentinel.Patched)\r\n        @patch.object(Something, 'attribute', sentinel.Patched)\r\n        def test():\r\n            self.assertEqual(Something.attribute, sentinel.Patched, \"unpatched\")\r\n        test()\r\n        self.assertEqual(Something.attribute, sentinel.Original,\r\n                         \"patch not restored\")\r\n    def test_patch_dict(self):\r\n        foo = {'initial': object(), 'other': 'something'}\r\n        original = foo.copy()\r\n        @patch.dict(foo)\r\n        def test():\r\n            foo['a'] = 3\r\n            del foo['initial']\r\n            foo['other'] = 'something else'\r\n        test()\r\n        self.assertEqual(foo, original)\r\n        @patch.dict(foo, {'a': 'b'})\r\n        def test():\r\n            self.assertEqual(len(foo), 3)\r\n            self.assertEqual(foo['a'], 'b')\r\n        test()\r\n        self.assertEqual(foo, original)\r\n        @patch.dict(foo, [('a', 'b')])\r\n        def test():\r\n            self.assertEqual(len(foo), 3)\r\n            self.assertEqual(foo['a'], 'b')\r\n        test()\r\n        self.assertEqual(foo, original)\r\n    def test_patch_dict_with_container_object(self):\r\n        foo = Container()\r\n        foo['initial'] = object()\r\n        foo['other'] =  'something'\r\n        original = foo.values.copy()\r\n        @patch.dict(foo)\r\n        def test():\r\n            foo['a'] = 3\r\n            del foo['initial']\r\n            foo['other'] = 'something else'\r\n        test()\r\n        self.assertEqual(foo.values, original)\r\n        @patch.dict(foo, {'a': 'b'})\r\n        def test():\r\n            self.assertEqual(len(foo.values), 3)\r\n            self.assertEqual(foo['a'], 'b')\r\n        test()\r\n        self.assertEqual(foo.values, original)\r\n    def test_patch_dict_with_clear(self):\r\n        foo = {'initial': object(), 'other': 'something'}\r\n        original = foo.copy()\r\n        @patch.dict(foo, clear=True)\r\n        def test():\r\n            self.assertEqual(foo, {})\r\n            foo['a'] = 3\r\n            foo['other'] = 'something else'\r\n        test()\r\n        self.assertEqual(foo, original)\r\n        @patch.dict(foo, {'a': 'b'}, clear=True)\r\n        def test():\r\n            self.assertEqual(foo, {'a': 'b'})\r\n        test()\r\n        self.assertEqual(foo, original)\r\n        @patch.dict(foo, [('a', 'b')], clear=True)\r\n        def test():\r\n            self.assertEqual(foo, {'a': 'b'})\r\n        test()\r\n        self.assertEqual(foo, original)\r\n    def test_patch_dict_with_container_object_and_clear(self):\r\n        foo = Container()\r\n        foo['initial'] = object()\r\n        foo['other'] =  'something'\r\n        original = foo.values.copy()\r\n        @patch.dict(foo, clear=True)\r\n        def test():\r\n            self.assertEqual(foo.values, {})\r\n            foo['a'] = 3\r\n            foo['other'] = 'something else'\r\n        test()\r\n        self.assertEqual(foo.values, original)\r\n        @patch.dict(foo, {'a': 'b'}, clear=True)\r\n        def test():\r\n            self.assertEqual(foo.values, {'a': 'b'})\r\n        test()\r\n        self.assertEqual(foo.values, original)\r\n    def test_name_preserved(self):\r\n        foo = {}\r\n        @patch('%s.SomeClass' % __name__, object())\r\n        @patch('%s.SomeClass' % __name__, object(), autospec=True)\r\n        @patch.object(SomeClass, object())\r\n        @patch.dict(foo)\r\n        def some_name():\r\n            pass\r\n        self.assertEqual(some_name.__name__, 'some_name')\r\n    def test_patch_with_exception(self):\r\n        foo = {}\r\n        @patch.dict(foo, {'a': 'b'})\r\n        def test():\r\n            raise NameError('Konrad')\r\n        try:\r\n            test()\r\n        except NameError:\r\n            pass\r\n        else:\r\n            self.fail('NameError not raised by test')\r\n        self.assertEqual(foo, {})\r\n    def test_patch_dict_with_string(self):\r\n        @patch.dict('os.environ', {'konrad_delong': 'some value'})\r\n        def test():\r\n            self.assertIn('konrad_delong', os.environ)\r\n        test()\r\n    def test_patch_descriptor(self):\r\n        return\r\n        class Nothing(object):\r\n            foo = None\r\n        class Something(object):\r\n            foo = {}\r\n            @patch.object(Nothing, 'foo', 2)\r\n            @classmethod\r\n            def klass(cls):\r\n                self.assertIs(cls, Something)\r\n            @patch.object(Nothing, 'foo', 2)\r\n            @staticmethod\r\n            def static(arg):\r\n                return arg\r\n            @patch.dict(foo)\r\n            @classmethod\r\n            def klass_dict(cls):\r\n                self.assertIs(cls, Something)\r\n            @patch.dict(foo)\r\n            @staticmethod\r\n            def static_dict(arg):\r\n                return arg\r\n        self.assertEqual(Something.static('f00'), 'f00')\r\n        Something.klass()\r\n        self.assertEqual(Something.static_dict('f00'), 'f00')\r\n        Something.klass_dict()\r\n        something = Something()\r\n        self.assertEqual(something.static('f00'), 'f00')\r\n        something.klass()\r\n        self.assertEqual(something.static_dict('f00'), 'f00')\r\n        something.klass_dict()\r\n    def test_patch_spec_set(self):\r\n        @patch('%s.SomeClass' % __name__, spec=SomeClass, spec_set=True)\r\n        def test(MockClass):\r\n            MockClass.z = 'foo'\r\n        self.assertRaises(AttributeError, test)\r\n        @patch.object(support, 'SomeClass', spec=SomeClass, spec_set=True)\r\n        def test(MockClass):\r\n            MockClass.z = 'foo'\r\n        self.assertRaises(AttributeError, test)\r\n        @patch('%s.SomeClass' % __name__, spec_set=True)\r\n        def test(MockClass):\r\n            MockClass.z = 'foo'\r\n        self.assertRaises(AttributeError, test)\r\n        @patch.object(support, 'SomeClass', spec_set=True)\r\n        def test(MockClass):\r\n            MockClass.z = 'foo'\r\n        self.assertRaises(AttributeError, test)\r\n    def test_spec_set_inherit(self):\r\n        @patch('%s.SomeClass' % __name__, spec_set=True)\r\n        def test(MockClass):\r\n            instance = MockClass()\r\n            instance.z = 'foo'\r\n        self.assertRaises(AttributeError, test)\r\n    def test_patch_start_stop(self):\r\n        original = something\r\n        patcher = patch('%s.something' % __name__)\r\n        self.assertIs(something, original)\r\n        mock = patcher.start()\r\n        try:\r\n            self.assertIsNot(mock, original)\r\n            self.assertIs(something, mock)\r\n        finally:\r\n            patcher.stop()\r\n        self.assertIs(something, original)\r\n    def test_stop_without_start(self):\r\n        patcher = patch(foo_name, 'bar', 3)\r\n        self.assertRaises(RuntimeError, patcher.stop)\r\n    def test_patchobject_start_stop(self):\r\n        original = something\r\n        patcher = patch.object(PTModule, 'something', 'foo')\r\n        self.assertIs(something, original)\r\n        replaced = patcher.start()\r\n        try:\r\n            self.assertEqual(replaced, 'foo')\r\n            self.assertIs(something, replaced)\r\n        finally:\r\n            patcher.stop()\r\n        self.assertIs(something, original)\r\n    def test_patch_dict_start_stop(self):\r\n        d = {'foo': 'bar'}\r\n        original = d.copy()\r\n        patcher = patch.dict(d, [('spam', 'eggs')], clear=True)\r\n        self.assertEqual(d, original)\r\n        patcher.start()\r\n        try:\r\n            self.assertEqual(d, {'spam': 'eggs'})\r\n        finally:\r\n            patcher.stop()\r\n        self.assertEqual(d, original)\r\n    def test_patch_dict_class_decorator(self):\r\n        this = self\r\n        d = {'spam': 'eggs'}\r\n        original = d.copy()\r\n        class Test(object):\r\n            def test_first(self):\r\n                this.assertEqual(d, {'foo': 'bar'})\r\n            def test_second(self):\r\n                this.assertEqual(d, {'foo': 'bar'})\r\n        Test = patch.dict(d, {'foo': 'bar'}, clear=True)(Test)\r\n        self.assertEqual(d, original)\r\n        test = Test()\r\n        test.test_first()\r\n        self.assertEqual(d, original)\r\n        test.test_second()\r\n        self.assertEqual(d, original)\r\n        test = Test()\r\n        test.test_first()\r\n        self.assertEqual(d, original)\r\n        test.test_second()\r\n        self.assertEqual(d, original)\r\n    def test_get_only_proxy(self):\r\n        class Something(object):\r\n            foo = 'foo'\r\n        class SomethingElse:\r\n            foo = 'foo'\r\n        for thing in Something, SomethingElse, Something(), SomethingElse:\r\n            proxy = _get_proxy(thing)\r\n            @patch.object(proxy, 'foo', 'bar')\r\n            def test():\r\n                self.assertEqual(proxy.foo, 'bar')\r\n            test()\r\n            self.assertEqual(proxy.foo, 'foo')\r\n            self.assertEqual(thing.foo, 'foo')\r\n            self.assertNotIn('foo', proxy.__dict__)\r\n    def test_get_set_delete_proxy(self):\r\n        class Something(object):\r\n            foo = 'foo'\r\n        class SomethingElse:\r\n            foo = 'foo'\r\n        for thing in Something, SomethingElse, Something(), SomethingElse:\r\n            proxy = _get_proxy(Something, get_only=False)\r\n            @patch.object(proxy, 'foo', 'bar')\r\n            def test():\r\n                self.assertEqual(proxy.foo, 'bar')\r\n            test()\r\n            self.assertEqual(proxy.foo, 'foo')\r\n            self.assertEqual(thing.foo, 'foo')\r\n            self.assertNotIn('foo', proxy.__dict__)\r\n    def test_patch_keyword_args(self):\r\n        kwargs = {'side_effect': KeyError, 'foo.bar.return_value': 33,\r\n                  'foo': MagicMock()}\r\n        patcher = patch(foo_name, **kwargs)\r\n        mock = patcher.start()\r\n        patcher.stop()\r\n        self.assertRaises(KeyError, mock)\r\n        self.assertEqual(mock.foo.bar(), 33)\r\n        self.assertIsInstance(mock.foo, MagicMock)\r\n    def test_patch_object_keyword_args(self):\r\n        kwargs = {'side_effect': KeyError, 'foo.bar.return_value': 33,\r\n                  'foo': MagicMock()}\r\n        patcher = patch.object(Foo, 'f', **kwargs)\r\n        mock = patcher.start()\r\n        patcher.stop()\r\n        self.assertRaises(KeyError, mock)\r\n        self.assertEqual(mock.foo.bar(), 33)\r\n        self.assertIsInstance(mock.foo, MagicMock)\r\n    def test_patch_dict_keyword_args(self):\r\n        original = {'foo': 'bar'}\r\n        copy = original.copy()\r\n        patcher = patch.dict(original, foo=3, bar=4, baz=5)\r\n        patcher.start()\r\n        try:\r\n            self.assertEqual(original, dict(foo=3, bar=4, baz=5))\r\n        finally:\r\n            patcher.stop()\r\n        self.assertEqual(original, copy)\r\n    def test_autospec(self):\r\n        class Boo(object):\r\n            def __init__(self, a):\r\n                pass\r\n            def f(self, a):\r\n                pass\r\n            def g(self):\r\n                pass\r\n            foo = 'bar'\r\n            class Bar(object):\r\n                def a(self):\r\n                    pass\r\n        def _test(mock):\r\n            mock(1)\r\n            mock.assert_called_with(1)\r\n            self.assertRaises(TypeError, mock)\r\n        def _test2(mock):\r\n            mock.f(1)\r\n            mock.f.assert_called_with(1)\r\n            self.assertRaises(TypeError, mock.f)\r\n            mock.g()\r\n            mock.g.assert_called_with()\r\n            self.assertRaises(TypeError, mock.g, 1)\r\n            self.assertRaises(AttributeError, getattr, mock, 'h')\r\n            mock.foo.lower()\r\n            mock.foo.lower.assert_called_with()\r\n            self.assertRaises(AttributeError, getattr, mock.foo, 'bar')\r\n            mock.Bar()\r\n            mock.Bar.assert_called_with()\r\n            mock.Bar.a()\r\n            mock.Bar.a.assert_called_with()\r\n            self.assertRaises(TypeError, mock.Bar.a, 1)\r\n            mock.Bar().a()\r\n            mock.Bar().a.assert_called_with()\r\n            self.assertRaises(TypeError, mock.Bar().a, 1)\r\n            self.assertRaises(AttributeError, getattr, mock.Bar, 'b')\r\n            self.assertRaises(AttributeError, getattr, mock.Bar(), 'b')\r\n        def function(mock):\r\n            _test(mock)\r\n            _test2(mock)\r\n            _test2(mock(1))\r\n            self.assertIs(mock, Foo)\r\n            return mock\r\n        test = patch(foo_name, autospec=True)(function)\r\n        mock = test()\r\n        self.assertIsNot(Foo, mock)\r\n        test()\r\n        module = sys.modules[__name__]\r\n        test = patch.object(module, 'Foo', autospec=True)(function)\r\n        mock = test()\r\n        self.assertIsNot(Foo, mock)\r\n        test()\r\n    def test_autospec_function(self):\r\n        @patch('%s.function' % __name__, autospec=True)\r\n        def test(mock):\r\n            function(1)\r\n            function.assert_called_with(1)\r\n            function(2, 3)\r\n            function.assert_called_with(2, 3)\r\n            self.assertRaises(TypeError, function)\r\n            self.assertRaises(AttributeError, getattr, function, 'foo')\r\n        test()\r\n    def test_autospec_keywords(self):\r\n        @patch('%s.function' % __name__, autospec=True,\r\n               return_value=3)\r\n        def test(mock_function):\r\n            return function(1, 2)\r\n        result = test()\r\n        self.assertEqual(result, 3)\r\n    def test_autospec_with_new(self):\r\n        patcher = patch('%s.function' % __name__, new=3, autospec=True)\r\n        self.assertRaises(TypeError, patcher.start)\r\n        module = sys.modules[__name__]\r\n        patcher = patch.object(module, 'function', new=3, autospec=True)\r\n        self.assertRaises(TypeError, patcher.start)\r\n    def test_autospec_with_object(self):\r\n        class Bar(Foo):\r\n            extra = []\r\n        patcher = patch(foo_name, autospec=Bar)\r\n        mock = patcher.start()\r\n        try:\r\n            self.assertIsInstance(mock, Bar)\r\n            self.assertIsInstance(mock.extra, list)\r\n        finally:\r\n            patcher.stop()\r\n    def test_autospec_inherits(self):\r\n        FooClass = Foo\r\n        patcher = patch(foo_name, autospec=True)\r\n        mock = patcher.start()\r\n        try:\r\n            self.assertIsInstance(mock, FooClass)\r\n            self.assertIsInstance(mock(3), FooClass)\r\n        finally:\r\n            patcher.stop()\r\n    def test_autospec_name(self):\r\n        patcher = patch(foo_name, autospec=True)\r\n        mock = patcher.start()\r\n        try:\r\n            self.assertIn(\" name='Foo'\", repr(mock))\r\n            self.assertIn(\" name='Foo.f'\", repr(mock.f))\r\n            self.assertIn(\" name='Foo()'\", repr(mock(None)))\r\n            self.assertIn(\" name='Foo().f'\", repr(mock(None).f))\r\n        finally:\r\n            patcher.stop()\r\n    def test_tracebacks(self):\r\n        @patch.object(Foo, 'f', object())\r\n        def test():\r\n            raise AssertionError\r\n        try:\r\n            test()\r\n        except:\r\n            err = sys.exc_info()\r\n        result = unittest.TextTestResult(None, None, 0)\r\n        traceback = result._exc_info_to_string(err, self)\r\n        self.assertIn('raise AssertionError', traceback)\r\n    def test_new_callable_patch(self):\r\n        patcher = patch(foo_name, new_callable=NonCallableMagicMock)\r\n        m1 = patcher.start()\r\n        patcher.stop()\r\n        m2 = patcher.start()\r\n        patcher.stop()\r\n        self.assertIsNot(m1, m2)\r\n        for mock in m1, m2:\r\n            self.assertNotCallable(m1)\r\n    def test_new_callable_patch_object(self):\r\n        patcher = patch.object(Foo, 'f', new_callable=NonCallableMagicMock)\r\n        m1 = patcher.start()\r\n        patcher.stop()\r\n        m2 = patcher.start()\r\n        patcher.stop()\r\n        self.assertIsNot(m1, m2)\r\n        for mock in m1, m2:\r\n            self.assertNotCallable(m1)\r\n    def test_new_callable_keyword_arguments(self):\r\n        class Bar(object):\r\n            kwargs = None\r\n            def __init__(self, **kwargs):\r\n                Bar.kwargs = kwargs\r\n        patcher = patch(foo_name, new_callable=Bar, arg1=1, arg2=2)\r\n        m = patcher.start()\r\n        try:\r\n            self.assertIs(type(m), Bar)\r\n            self.assertEqual(Bar.kwargs, dict(arg1=1, arg2=2))\r\n        finally:\r\n            patcher.stop()\r\n    def test_new_callable_spec(self):\r\n        class Bar(object):\r\n            kwargs = None\r\n            def __init__(self, **kwargs):\r\n                Bar.kwargs = kwargs\r\n        patcher = patch(foo_name, new_callable=Bar, spec=Bar)\r\n        patcher.start()\r\n        try:\r\n            self.assertEqual(Bar.kwargs, dict(spec=Bar))\r\n        finally:\r\n            patcher.stop()\r\n        patcher = patch(foo_name, new_callable=Bar, spec_set=Bar)\r\n        patcher.start()\r\n        try:\r\n            self.assertEqual(Bar.kwargs, dict(spec_set=Bar))\r\n        finally:\r\n            patcher.stop()\r\n    def test_new_callable_create(self):\r\n        non_existent_attr = '%s.weeeee' % foo_name\r\n        p = patch(non_existent_attr, new_callable=NonCallableMock)\r\n        self.assertRaises(AttributeError, p.start)\r\n        p = patch(non_existent_attr, new_callable=NonCallableMock,\r\n                  create=True)\r\n        m = p.start()\r\n        try:\r\n            self.assertNotCallable(m, magic=False)\r\n        finally:\r\n            p.stop()\r\n    def test_new_callable_incompatible_with_new(self):\r\n        self.assertRaises(\r\n            ValueError, patch, foo_name, new=object(), new_callable=MagicMock\r\n        )\r\n        self.assertRaises(\r\n            ValueError, patch.object, Foo, 'f', new=object(),\r\n            new_callable=MagicMock\r\n        )\r\n    def test_new_callable_incompatible_with_autospec(self):\r\n        self.assertRaises(\r\n            ValueError, patch, foo_name, new_callable=MagicMock,\r\n            autospec=True\r\n        )\r\n        self.assertRaises(\r\n            ValueError, patch.object, Foo, 'f', new_callable=MagicMock,\r\n            autospec=True\r\n        )\r\n    def test_new_callable_inherit_for_mocks(self):\r\n        class MockSub(Mock):\r\n            pass\r\n        MockClasses = (\r\n            NonCallableMock, NonCallableMagicMock, MagicMock, Mock, MockSub\r\n        )\r\n        for Klass in MockClasses:\r\n            for arg in 'spec', 'spec_set':\r\n                kwargs = {arg: True}\r\n                p = patch(foo_name, new_callable=Klass, **kwargs)\r\n                m = p.start()\r\n                try:\r\n                    instance = m.return_value\r\n                    self.assertRaises(AttributeError, getattr, instance, 'x')\r\n                finally:\r\n                    p.stop()\r\n    def test_new_callable_inherit_non_mock(self):\r\n        class NotAMock(object):\r\n            def __init__(self, spec):\r\n                self.spec = spec\r\n        p = patch(foo_name, new_callable=NotAMock, spec=True)\r\n        m = p.start()\r\n        try:\r\n            self.assertTrue(is_instance(m, NotAMock))\r\n            self.assertRaises(AttributeError, getattr, m, 'return_value')\r\n        finally:\r\n            p.stop()\r\n        self.assertEqual(m.spec, Foo)\r\n    def test_new_callable_class_decorating(self):\r\n        test = self\r\n        original = Foo\r\n        class SomeTest(object):\r\n            def _test(self, mock_foo):\r\n                test.assertIsNot(Foo, original)\r\n                test.assertIs(Foo, mock_foo)\r\n                test.assertIsInstance(Foo, SomeClass)\r\n            def test_two(self, mock_foo):\r\n                self._test(mock_foo)\r\n            def test_one(self, mock_foo):\r\n                self._test(mock_foo)\r\n        SomeTest = patch(foo_name, new_callable=SomeClass)(SomeTest)\r\n        SomeTest().test_one()\r\n        SomeTest().test_two()\r\n        self.assertIs(Foo, original)\r\n    def test_patch_multiple(self):\r\n        original_foo = Foo\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        patcher1 = patch.multiple(foo_name, f=1, g=2)\r\n        patcher2 = patch.multiple(Foo, f=1, g=2)\r\n        for patcher in patcher1, patcher2:\r\n            patcher.start()\r\n            try:\r\n                self.assertIs(Foo, original_foo)\r\n                self.assertEqual(Foo.f, 1)\r\n                self.assertEqual(Foo.g, 2)\r\n            finally:\r\n                patcher.stop()\r\n            self.assertIs(Foo, original_foo)\r\n            self.assertEqual(Foo.f, original_f)\r\n            self.assertEqual(Foo.g, original_g)\r\n        @patch.multiple(foo_name, f=3, g=4)\r\n        def test():\r\n            self.assertIs(Foo, original_foo)\r\n            self.assertEqual(Foo.f, 3)\r\n            self.assertEqual(Foo.g, 4)\r\n        test()\r\n    def test_patch_multiple_no_kwargs(self):\r\n        self.assertRaises(ValueError, patch.multiple, foo_name)\r\n        self.assertRaises(ValueError, patch.multiple, Foo)\r\n    def test_patch_multiple_create_mocks(self):\r\n        original_foo = Foo\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        @patch.multiple(foo_name, f=DEFAULT, g=3, foo=DEFAULT)\r\n        def test(f, foo):\r\n            self.assertIs(Foo, original_foo)\r\n            self.assertIs(Foo.f, f)\r\n            self.assertEqual(Foo.g, 3)\r\n            self.assertIs(Foo.foo, foo)\r\n            self.assertTrue(is_instance(f, MagicMock))\r\n            self.assertTrue(is_instance(foo, MagicMock))\r\n        test()\r\n        self.assertEqual(Foo.f, original_f)\r\n        self.assertEqual(Foo.g, original_g)\r\n    def test_patch_multiple_create_mocks_different_order(self):\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        patcher = patch.object(Foo, 'f', 3)\r\n        patcher.attribute_name = 'f'\r\n        other = patch.object(Foo, 'g', DEFAULT)\r\n        other.attribute_name = 'g'\r\n        patcher.additional_patchers = [other]\r\n        @patcher\r\n        def test(g):\r\n            self.assertIs(Foo.g, g)\r\n            self.assertEqual(Foo.f, 3)\r\n        test()\r\n        self.assertEqual(Foo.f, original_f)\r\n        self.assertEqual(Foo.g, original_g)\r\n    def test_patch_multiple_stacked_decorators(self):\r\n        original_foo = Foo\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        @patch.multiple(foo_name, f=DEFAULT)\r\n        @patch.multiple(foo_name, foo=DEFAULT)\r\n        @patch(foo_name + '.g')\r\n        def test1(g, **kwargs):\r\n            _test(g, **kwargs)\r\n        @patch.multiple(foo_name, f=DEFAULT)\r\n        @patch(foo_name + '.g')\r\n        @patch.multiple(foo_name, foo=DEFAULT)\r\n        def test2(g, **kwargs):\r\n            _test(g, **kwargs)\r\n        @patch(foo_name + '.g')\r\n        @patch.multiple(foo_name, f=DEFAULT)\r\n        @patch.multiple(foo_name, foo=DEFAULT)\r\n        def test3(g, **kwargs):\r\n            _test(g, **kwargs)\r\n        def _test(g, **kwargs):\r\n            f = kwargs.pop('f')\r\n            foo = kwargs.pop('foo')\r\n            self.assertFalse(kwargs)\r\n            self.assertIs(Foo, original_foo)\r\n            self.assertIs(Foo.f, f)\r\n            self.assertIs(Foo.g, g)\r\n            self.assertIs(Foo.foo, foo)\r\n            self.assertTrue(is_instance(f, MagicMock))\r\n            self.assertTrue(is_instance(g, MagicMock))\r\n            self.assertTrue(is_instance(foo, MagicMock))\r\n        test1()\r\n        test2()\r\n        test3()\r\n        self.assertEqual(Foo.f, original_f)\r\n        self.assertEqual(Foo.g, original_g)\r\n    def test_patch_multiple_create_mocks_patcher(self):\r\n        original_foo = Foo\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        patcher = patch.multiple(foo_name, f=DEFAULT, g=3, foo=DEFAULT)\r\n        result = patcher.start()\r\n        try:\r\n            f = result['f']\r\n            foo = result['foo']\r\n            self.assertEqual(set(result), set(['f', 'foo']))\r\n            self.assertIs(Foo, original_foo)\r\n            self.assertIs(Foo.f, f)\r\n            self.assertIs(Foo.foo, foo)\r\n            self.assertTrue(is_instance(f, MagicMock))\r\n            self.assertTrue(is_instance(foo, MagicMock))\r\n        finally:\r\n            patcher.stop()\r\n        self.assertEqual(Foo.f, original_f)\r\n        self.assertEqual(Foo.g, original_g)\r\n    def test_patch_multiple_decorating_class(self):\r\n        test = self\r\n        original_foo = Foo\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        class SomeTest(object):\r\n            def _test(self, f, foo):\r\n                test.assertIs(Foo, original_foo)\r\n                test.assertIs(Foo.f, f)\r\n                test.assertEqual(Foo.g, 3)\r\n                test.assertIs(Foo.foo, foo)\r\n                test.assertTrue(is_instance(f, MagicMock))\r\n                test.assertTrue(is_instance(foo, MagicMock))\r\n            def test_two(self, f, foo):\r\n                self._test(f, foo)\r\n            def test_one(self, f, foo):\r\n                self._test(f, foo)\r\n        SomeTest = patch.multiple(\r\n            foo_name, f=DEFAULT, g=3, foo=DEFAULT\r\n        )(SomeTest)\r\n        thing = SomeTest()\r\n        thing.test_one()\r\n        thing.test_two()\r\n        self.assertEqual(Foo.f, original_f)\r\n        self.assertEqual(Foo.g, original_g)\r\n    def test_patch_multiple_create(self):\r\n        patcher = patch.multiple(Foo, blam='blam')\r\n        self.assertRaises(AttributeError, patcher.start)\r\n        patcher = patch.multiple(Foo, blam='blam', create=True)\r\n        patcher.start()\r\n        try:\r\n            self.assertEqual(Foo.blam, 'blam')\r\n        finally:\r\n            patcher.stop()\r\n        self.assertFalse(hasattr(Foo, 'blam'))\r\n    def test_patch_multiple_spec_set(self):\r\n        patcher = patch.multiple(Foo, foo=DEFAULT, spec_set=['a', 'b'])\r\n        result = patcher.start()\r\n        try:\r\n            self.assertEqual(Foo.foo, result['foo'])\r\n            Foo.foo.a(1)\r\n            Foo.foo.b(2)\r\n            Foo.foo.a.assert_called_with(1)\r\n            Foo.foo.b.assert_called_with(2)\r\n            self.assertRaises(AttributeError, setattr, Foo.foo, 'c', None)\r\n        finally:\r\n            patcher.stop()\r\n    def test_patch_multiple_new_callable(self):\r\n        class Thing(object):\r\n            pass\r\n        patcher = patch.multiple(\r\n            Foo, f=DEFAULT, g=DEFAULT, new_callable=Thing\r\n        )\r\n        result = patcher.start()\r\n        try:\r\n            self.assertIs(Foo.f, result['f'])\r\n            self.assertIs(Foo.g, result['g'])\r\n            self.assertIsInstance(Foo.f, Thing)\r\n            self.assertIsInstance(Foo.g, Thing)\r\n            self.assertIsNot(Foo.f, Foo.g)\r\n        finally:\r\n            patcher.stop()\r\n    def test_nested_patch_failure(self):\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        @patch.object(Foo, 'g', 1)\r\n        @patch.object(Foo, 'missing', 1)\r\n        @patch.object(Foo, 'f', 1)\r\n        def thing1():\r\n            pass\r\n        @patch.object(Foo, 'missing', 1)\r\n        @patch.object(Foo, 'g', 1)\r\n        @patch.object(Foo, 'f', 1)\r\n        def thing2():\r\n            pass\r\n        @patch.object(Foo, 'g', 1)\r\n        @patch.object(Foo, 'f', 1)\r\n        @patch.object(Foo, 'missing', 1)\r\n        def thing3():\r\n            pass\r\n        for func in thing1, thing2, thing3:\r\n            self.assertRaises(AttributeError, func)\r\n            self.assertEqual(Foo.f, original_f)\r\n            self.assertEqual(Foo.g, original_g)\r\n    def test_new_callable_failure(self):\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        original_foo = Foo.foo\r\n        def crasher():\r\n            raise NameError('crasher')\r\n        @patch.object(Foo, 'g', 1)\r\n        @patch.object(Foo, 'foo', new_callable=crasher)\r\n        @patch.object(Foo, 'f', 1)\r\n        def thing1():\r\n            pass\r\n        @patch.object(Foo, 'foo', new_callable=crasher)\r\n        @patch.object(Foo, 'g', 1)\r\n        @patch.object(Foo, 'f', 1)\r\n        def thing2():\r\n            pass\r\n        @patch.object(Foo, 'g', 1)\r\n        @patch.object(Foo, 'f', 1)\r\n        @patch.object(Foo, 'foo', new_callable=crasher)\r\n        def thing3():\r\n            pass\r\n        for func in thing1, thing2, thing3:\r\n            self.assertRaises(NameError, func)\r\n            self.assertEqual(Foo.f, original_f)\r\n            self.assertEqual(Foo.g, original_g)\r\n            self.assertEqual(Foo.foo, original_foo)\r\n    def test_patch_multiple_failure(self):\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        patcher = patch.object(Foo, 'f', 1)\r\n        patcher.attribute_name = 'f'\r\n        good = patch.object(Foo, 'g', 1)\r\n        good.attribute_name = 'g'\r\n        bad = patch.object(Foo, 'missing', 1)\r\n        bad.attribute_name = 'missing'\r\n        for additionals in [good, bad], [bad, good]:\r\n            patcher.additional_patchers = additionals\r\n            @patcher\r\n            def func():\r\n                pass\r\n            self.assertRaises(AttributeError, func)\r\n            self.assertEqual(Foo.f, original_f)\r\n            self.assertEqual(Foo.g, original_g)\r\n    def test_patch_multiple_new_callable_failure(self):\r\n        original_f = Foo.f\r\n        original_g = Foo.g\r\n        original_foo = Foo.foo\r\n        def crasher():\r\n            raise NameError('crasher')\r\n        patcher = patch.object(Foo, 'f', 1)\r\n        patcher.attribute_name = 'f'\r\n        good = patch.object(Foo, 'g', 1)\r\n        good.attribute_name = 'g'\r\n        bad = patch.object(Foo, 'foo', new_callable=crasher)\r\n        bad.attribute_name = 'foo'\r\n        for additionals in [good, bad], [bad, good]:\r\n            patcher.additional_patchers = additionals\r\n            @patcher\r\n            def func():\r\n                pass\r\n            self.assertRaises(NameError, func)\r\n            self.assertEqual(Foo.f, original_f)\r\n            self.assertEqual(Foo.g, original_g)\r\n            self.assertEqual(Foo.foo, original_foo)\r\n    def test_patch_multiple_string_subclasses(self):\r\n        Foo = type('Foo', (str,), {'fish': 'tasty'})\r\n        foo = Foo()\r\n        @patch.multiple(foo, fish='nearly gone')\r\n        def test():\r\n            self.assertEqual(foo.fish, 'nearly gone')\r\n        test()\r\n        self.assertEqual(foo.fish, 'tasty')\r\n    @patch('unittest.mock.patch.TEST_PREFIX', 'foo')\r\n    def test_patch_test_prefix(self):\r\n        class Foo(object):\r\n            thing = 'original'\r\n            def foo_one(self):\r\n                return self.thing\r\n            def foo_two(self):\r\n                return self.thing\r\n            def test_one(self):\r\n                return self.thing\r\n            def test_two(self):\r\n                return self.thing\r\n        Foo = patch.object(Foo, 'thing', 'changed')(Foo)\r\n        foo = Foo()\r\n        self.assertEqual(foo.foo_one(), 'changed')\r\n        self.assertEqual(foo.foo_two(), 'changed')\r\n        self.assertEqual(foo.test_one(), 'original')\r\n        self.assertEqual(foo.test_two(), 'original')\r\n    @patch('unittest.mock.patch.TEST_PREFIX', 'bar')\r\n    def test_patch_dict_test_prefix(self):\r\n        class Foo(object):\r\n            def bar_one(self):\r\n                return dict(the_dict)\r\n            def bar_two(self):\r\n                return dict(the_dict)\r\n            def test_one(self):\r\n                return dict(the_dict)\r\n            def test_two(self):\r\n                return dict(the_dict)\r\n        the_dict = {'key': 'original'}\r\n        Foo = patch.dict(the_dict, key='changed')(Foo)\r\n        foo =Foo()\r\n        self.assertEqual(foo.bar_one(), {'key': 'changed'})\r\n        self.assertEqual(foo.bar_two(), {'key': 'changed'})\r\n        self.assertEqual(foo.test_one(), {'key': 'original'})\r\n        self.assertEqual(foo.test_two(), {'key': 'original'})\r\n    def test_patch_with_spec_mock_repr(self):\r\n        for arg in ('spec', 'autospec', 'spec_set'):\r\n            p = patch('%s.SomeClass' % __name__, **{arg: True})\r\n            m = p.start()\r\n            try:\r\n                self.assertIn(\" name='SomeClass'\", repr(m))\r\n                self.assertIn(\" name='SomeClass.class_attribute'\",\r\n                              repr(m.class_attribute))\r\n                self.assertIn(\" name='SomeClass()'\", repr(m()))\r\n                self.assertIn(\" name='SomeClass().class_attribute'\",\r\n                              repr(m().class_attribute))\r\n            finally:\r\n                p.stop()\r\n    def test_patch_nested_autospec_repr(self):\r\n        with patch('unittest.test.testmock.support', autospec=True) as m:\r\n            self.assertIn(\" name='support.SomeClass.wibble()'\",\r\n                          repr(m.SomeClass.wibble()))\r\n            self.assertIn(\" name='support.SomeClass().wibble()'\",\r\n                          repr(m.SomeClass().wibble()))\r\n    def test_mock_calls_with_patch(self):\r\n        for arg in ('spec', 'autospec', 'spec_set'):\r\n            p = patch('%s.SomeClass' % __name__, **{arg: True})\r\n            m = p.start()\r\n            try:\r\n                m.wibble()\r\n                kalls = [call.wibble()]\r\n                self.assertEqual(m.mock_calls, kalls)\r\n                self.assertEqual(m.method_calls, kalls)\r\n                self.assertEqual(m.wibble.mock_calls, [call()])\r\n                result = m()\r\n                kalls.append(call())\r\n                self.assertEqual(m.mock_calls, kalls)\r\n                result.wibble()\r\n                kalls.append(call().wibble())\r\n                self.assertEqual(m.mock_calls, kalls)\r\n                self.assertEqual(result.mock_calls, [call.wibble()])\r\n                self.assertEqual(result.wibble.mock_calls, [call()])\r\n                self.assertEqual(result.method_calls, [call.wibble()])\r\n            finally:\r\n                p.stop()\r\n    def test_patch_imports_lazily(self):\r\n        sys.modules.pop('squizz', None)\r\n        p1 = patch('squizz.squozz')\r\n        self.assertRaises(ImportError, p1.start)\r\n        squizz = Mock()\r\n        squizz.squozz = 6\r\n        sys.modules['squizz'] = squizz\r\n        p1 = patch('squizz.squozz')\r\n        squizz.squozz = 3\r\n        p1.start()\r\n        p1.stop()\r\n        self.assertEqual(squizz.squozz, 3)\r\n    def test_patch_propogrates_exc_on_exit(self):\r\n        class holder:\r\n            exc_info = None, None, None\r\n        class custom_patch(_patch):\r\n            def __exit__(self, etype=None, val=None, tb=None):\r\n                _patch.__exit__(self, etype, val, tb)\r\n                holder.exc_info = etype, val, tb\r\n            stop = __exit__\r\n        def with_custom_patch(target):\r\n            getter, attribute = _get_target(target)\r\n            return custom_patch(\r\n                getter, attribute, DEFAULT, None, False, None,\r\n                None, None, {}\r\n            )\r\n        @with_custom_patch('squizz.squozz')\r\n        def test(mock):\r\n            raise RuntimeError\r\n        self.assertRaises(RuntimeError, test)\r\n        self.assertIs(holder.exc_info[0], RuntimeError)\r\n        self.assertIsNotNone(holder.exc_info[1],\r\n                            'exception value not propgated')\r\n        self.assertIsNotNone(holder.exc_info[2],\r\n                            'exception traceback not propgated')\r\n    def test_create_and_specs(self):\r\n        for kwarg in ('spec', 'spec_set', 'autospec'):\r\n            p = patch('%s.doesnotexist' % __name__, create=True,\r\n                      **{kwarg: True})\r\n            self.assertRaises(TypeError, p.start)\r\n            self.assertRaises(NameError, lambda: doesnotexist)\r\n            p = patch(MODNAME, create=True, **{kwarg: True})\r\n            p.start()\r\n            p.stop()\r\n    def test_multiple_specs(self):\r\n        original = PTModule\r\n        for kwarg in ('spec', 'spec_set'):\r\n            p = patch(MODNAME, autospec=0, **{kwarg: 0})\r\n            self.assertRaises(TypeError, p.start)\r\n            self.assertIs(PTModule, original)\r\n        for kwarg in ('spec', 'autospec'):\r\n            p = patch(MODNAME, spec_set=0, **{kwarg: 0})\r\n            self.assertRaises(TypeError, p.start)\r\n            self.assertIs(PTModule, original)\r\n        for kwarg in ('spec_set', 'autospec'):\r\n            p = patch(MODNAME, spec=0, **{kwarg: 0})\r\n            self.assertRaises(TypeError, p.start)\r\n            self.assertIs(PTModule, original)\r\n    def test_specs_false_instead_of_none(self):\r\n        p = patch(MODNAME, spec=False, spec_set=False, autospec=False)\r\n        mock = p.start()\r\n        try:\r\n            mock.does_not_exist\r\n            mock.does_not_exist = 3\r\n        finally:\r\n            p.stop()\r\n    def test_falsey_spec(self):\r\n        for kwarg in ('spec', 'autospec', 'spec_set'):\r\n            p = patch(MODNAME, **{kwarg: 0})\r\n            m = p.start()\r\n            try:\r\n                self.assertRaises(AttributeError, getattr, m, 'doesnotexit')\r\n            finally:\r\n                p.stop()\r\n    def test_spec_set_true(self):\r\n        for kwarg in ('spec', 'autospec'):\r\n            p = patch(MODNAME, spec_set=True, **{kwarg: True})\r\n            m = p.start()\r\n            try:\r\n                self.assertRaises(AttributeError, setattr, m,\r\n                                  'doesnotexist', 'something')\r\n                self.assertRaises(AttributeError, getattr, m, 'doesnotexist')\r\n            finally:\r\n                p.stop()\r\n    def test_callable_spec_as_list(self):\r\n        spec = ('__call__',)\r\n        p = patch(MODNAME, spec=spec)\r\n        m = p.start()\r\n        try:\r\n            self.assertTrue(callable(m))\r\n        finally:\r\n            p.stop()\r\n    def test_not_callable_spec_as_list(self):\r\n        spec = ('foo', 'bar')\r\n        p = patch(MODNAME, spec=spec)\r\n        m = p.start()\r\n        try:\r\n            self.assertFalse(callable(m))\r\n        finally:\r\n            p.stop()\r\n    def test_patch_stopall(self):\r\n        unlink = os.unlink\r\n        chdir = os.chdir\r\n        path = os.path\r\n        patch('os.unlink', something).start()\r\n        patch('os.chdir', something_else).start()\r\n        @patch('os.path')\r\n        def patched(mock_path):\r\n            patch.stopall()\r\n            self.assertIs(os.path, mock_path)\r\n            self.assertIs(os.unlink, unlink)\r\n            self.assertIs(os.chdir, chdir)\r\n        patched()\r\n        self.assertIs(os.path, path)\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/_random.py": "import _os\nfrom os import urandom as _urandom\nclass Random:\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n    \"\"\"\n    VERSION = 3     # used by getstate/setstate\n    def __init__(self, x=None):\n        \"\"\"Initialize an instance.\n        Optional argument x controls seeding, as for Random.seed().\n        \"\"\"\n        self._state=x\n    def seed(self, a=None, version=2):\n        \"\"\"Initialize internal state from hashable object.\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n        For version 2 (the default), all of the bits are used if *a* is a str,\n        bytes, or bytearray.  For version 1, the hash() of *a* is used instead.\n        If *a* is an int, all bits are used.\n        \"\"\"\n        self._state=a\n        self.gauss_next = None\n    def getstate(self):\n        \"\"\"Return internal state; can be passed to setstate() later.\"\"\"\n        return self._state\n    def setstate(self, state):\n        \"\"\"Restore internal state from object returned by getstate().\"\"\"\n        self._state=state\n    def random(self):\n        \"\"\"Get the next random number in the range [0.0, 1.0).\"\"\"\n        return _os.random()\n    def getrandbits(self, k):\n        \"\"\"getrandbits(k) -> x.  Generates a long int with k random bits.\"\"\"\n        if k <= 0:\n            raise ValueError('number of bits must be greater than zero')\n        if k != int(k):\n            raise TypeError('number of bits should be an integer')\n        numbytes = (k + 7) // 8                       # bits / 8 and rounded up\n        x = int.from_bytes(_urandom(numbytes), 'big')\n        return x >> (numbytes * 8 - k)                # trim excess bits\n", "/Lib/unittest/test/test_assertions.py": "import datetime\r\nimport warnings\r\nimport unittest\r\nfrom itertools import product\r\nclass Test_Assertions(unittest.TestCase):\r\n    def test_AlmostEqual(self):\r\n        self.assertAlmostEqual(1.00000001, 1.0)\r\n        self.assertNotAlmostEqual(1.0000001, 1.0)\r\n        self.assertRaises(self.failureException,\r\n                          self.assertAlmostEqual, 1.0000001, 1.0)\r\n        self.assertRaises(self.failureException,\r\n                          self.assertNotAlmostEqual, 1.00000001, 1.0)\r\n        self.assertAlmostEqual(1.1, 1.0, places=0)\r\n        self.assertRaises(self.failureException,\r\n                          self.assertAlmostEqual, 1.1, 1.0, places=1)\r\n        self.assertAlmostEqual(0, .1+.1j, places=0)\r\n        self.assertNotAlmostEqual(0, .1+.1j, places=1)\r\n        self.assertRaises(self.failureException,\r\n                          self.assertAlmostEqual, 0, .1+.1j, places=1)\r\n        self.assertRaises(self.failureException,\r\n                          self.assertNotAlmostEqual, 0, .1+.1j, places=0)\r\n        self.assertAlmostEqual(float('inf'), float('inf'))\r\n        self.assertRaises(self.failureException, self.assertNotAlmostEqual,\r\n                          float('inf'), float('inf'))\r\n    def test_AmostEqualWithDelta(self):\r\n        self.assertAlmostEqual(1.1, 1.0, delta=0.5)\r\n        self.assertAlmostEqual(1.0, 1.1, delta=0.5)\r\n        self.assertNotAlmostEqual(1.1, 1.0, delta=0.05)\r\n        self.assertNotAlmostEqual(1.0, 1.1, delta=0.05)\r\n        self.assertRaises(self.failureException, self.assertAlmostEqual,\r\n                          1.1, 1.0, delta=0.05)\r\n        self.assertRaises(self.failureException, self.assertNotAlmostEqual,\r\n                          1.1, 1.0, delta=0.5)\r\n        self.assertRaises(TypeError, self.assertAlmostEqual,\r\n                          1.1, 1.0, places=2, delta=2)\r\n        self.assertRaises(TypeError, self.assertNotAlmostEqual,\r\n                          1.1, 1.0, places=2, delta=2)\r\n        first = datetime.datetime.now()\r\n        second = first + datetime.timedelta(seconds=10)\r\n        self.assertAlmostEqual(first, second,\r\n                               delta=datetime.timedelta(seconds=20))\r\n        self.assertNotAlmostEqual(first, second,\r\n                                  delta=datetime.timedelta(seconds=5))\r\n    def test_assertRaises(self):\r\n        def _raise(e):\r\n            raise e\r\n        self.assertRaises(KeyError, _raise, KeyError)\r\n        self.assertRaises(KeyError, _raise, KeyError(\"key\"))\r\n        try:\r\n            self.assertRaises(KeyError, lambda: None)\r\n        except self.failureException as e:\r\n            self.assertIn(\"KeyError not raised\", str(e))\r\n        else:\r\n            self.fail(\"assertRaises() didn't fail\")\r\n        try:\r\n            self.assertRaises(KeyError, _raise, ValueError)\r\n        except ValueError:\r\n            pass\r\n        else:\r\n            self.fail(\"assertRaises() didn't let exception pass through\")\r\n        with self.assertRaises(KeyError) as cm:\r\n            try:\r\n                raise KeyError\r\n            except Exception as e:\r\n                exc = e\r\n                raise\r\n        self.assertIs(cm.exception, exc)\r\n        with self.assertRaises(KeyError):\r\n            raise KeyError(\"key\")\r\n        try:\r\n            with self.assertRaises(KeyError):\r\n                pass\r\n        except self.failureException as e:\r\n            self.assertIn(\"KeyError not raised\", str(e))\r\n        else:\r\n            self.fail(\"assertRaises() didn't fail\")\r\n        try:\r\n            with self.assertRaises(KeyError):\r\n                raise ValueError\r\n        except ValueError:\r\n            pass\r\n        else:\r\n            self.fail(\"assertRaises() didn't let exception pass through\")\r\n    def testAssertNotRegex(self):\r\n        self.assertNotRegex('Ala ma kota', r'r+')\r\n        try:\r\n            self.assertNotRegex('Ala ma kota', r'k.t', 'Message')\r\n        except self.failureException as e:\r\n            self.assertIn(\"'kot'\", e.args[0])\r\n            self.assertIn('Message', e.args[0])\r\n        else:\r\n            self.fail('assertNotRegex should have failed.')\r\nclass TestLongMessage(unittest.TestCase):\r\n    \"\"\"Test that the individual asserts honour longMessage.\r\n    This actually tests all the message behaviour for\r\n    asserts that use longMessage.\"\"\"\r\n    def setUp(self):\r\n        class TestableTestFalse(unittest.TestCase):\r\n            longMessage = False\r\n            failureException = self.failureException\r\n            def testTest(self):\r\n                pass\r\n        class TestableTestTrue(unittest.TestCase):\r\n            longMessage = True\r\n            failureException = self.failureException\r\n            def testTest(self):\r\n                pass\r\n        self.testableTrue = TestableTestTrue('testTest')\r\n        self.testableFalse = TestableTestFalse('testTest')\r\n    def testDefault(self):\r\n        self.assertTrue(unittest.TestCase.longMessage)\r\n    def test_formatMsg(self):\r\n        self.assertEqual(self.testableFalse._formatMessage(None, \"foo\"), \"foo\")\r\n        self.assertEqual(self.testableFalse._formatMessage(\"foo\", \"bar\"), \"foo\")\r\n        self.assertEqual(self.testableTrue._formatMessage(None, \"foo\"), \"foo\")\r\n        self.assertEqual(self.testableTrue._formatMessage(\"foo\", \"bar\"), \"bar : foo\")\r\n        self.testableTrue._formatMessage(object(), 'foo')\r\n    def test_formatMessage_unicode_error(self):\r\n        one = ''.join(chr(i) for i in range(255))\r\n        self.testableTrue._formatMessage(one, '\\uFFFD')\r\n    def assertMessages(self, methodName, args, errors):\r\n        \"\"\"\r\n        Check that methodName(*args) raises the correct error messages.\r\n        errors should be a list of 4 regex that match the error when:\r\n          1) longMessage = False and no msg passed;\r\n          2) longMessage = False and msg passed;\r\n          3) longMessage = True and no msg passed;\r\n          4) longMessage = True and msg passed;\r\n        \"\"\"\r\n        def getMethod(i):\r\n            useTestableFalse  = i < 2\r\n            if useTestableFalse:\r\n                test = self.testableFalse\r\n            else:\r\n                test = self.testableTrue\r\n            return getattr(test, methodName)\r\n        for i, expected_regex in enumerate(errors):\r\n            testMethod = getMethod(i)\r\n            kwargs = {}\r\n            withMsg = i % 2\r\n            if withMsg:\r\n                kwargs = {\"msg\": \"oops\"}\r\n            with self.assertRaisesRegex(self.failureException,\r\n                                        expected_regex=expected_regex):\r\n                testMethod(*args, **kwargs)\r\n    def testAssertTrue(self):\r\n        self.assertMessages('assertTrue', (False,),\r\n                            [\"^False is not true$\", \"^oops$\", \"^False is not true$\",\r\n                             \"^False is not true : oops$\"])\r\n    def testAssertFalse(self):\r\n        self.assertMessages('assertFalse', (True,),\r\n                            [\"^True is not false$\", \"^oops$\", \"^True is not false$\",\r\n                             \"^True is not false : oops$\"])\r\n    def testNotEqual(self):\r\n        self.assertMessages('assertNotEqual', (1, 1),\r\n                            [\"^1 == 1$\", \"^oops$\", \"^1 == 1$\",\r\n                             \"^1 == 1 : oops$\"])\r\n    def testAlmostEqual(self):\r\n        self.assertMessages('assertAlmostEqual', (1, 2),\r\n                            [\"^1 != 2 within 7 places$\", \"^oops$\",\r\n                             \"^1 != 2 within 7 places$\", \"^1 != 2 within 7 places : oops$\"])\r\n    def testNotAlmostEqual(self):\r\n        self.assertMessages('assertNotAlmostEqual', (1, 1),\r\n                            [\"^1 == 1 within 7 places$\", \"^oops$\",\r\n                             \"^1 == 1 within 7 places$\", \"^1 == 1 within 7 places : oops$\"])\r\n    def test_baseAssertEqual(self):\r\n        self.assertMessages('_baseAssertEqual', (1, 2),\r\n                            [\"^1 != 2$\", \"^oops$\", \"^1 != 2$\", \"^1 != 2 : oops$\"])\r\n    def testAssertSequenceEqual(self):\r\n        self.assertMessages('assertSequenceEqual', ([], [None]),\r\n                            [\"\\+ \\[None\\]$\", \"^oops$\", r\"\\+ \\[None\\]$\",\r\n                             r\"\\+ \\[None\\] : oops$\"])\r\n    def testAssertSetEqual(self):\r\n        self.assertMessages('assertSetEqual', (set(), set([None])),\r\n                            [\"None$\", \"^oops$\", \"None$\",\r\n                             \"None : oops$\"])\r\n    def testAssertIn(self):\r\n        self.assertMessages('assertIn', (None, []),\r\n                            ['^None not found in \\[\\]$', \"^oops$\",\r\n                             '^None not found in \\[\\]$',\r\n                             '^None not found in \\[\\] : oops$'])\r\n    def testAssertNotIn(self):\r\n        self.assertMessages('assertNotIn', (None, [None]),\r\n                            ['^None unexpectedly found in \\[None\\]$', \"^oops$\",\r\n                             '^None unexpectedly found in \\[None\\]$',\r\n                             '^None unexpectedly found in \\[None\\] : oops$'])\r\n    def testAssertDictEqual(self):\r\n        self.assertMessages('assertDictEqual', ({}, {'key': 'value'}),\r\n                            [r\"\\+ \\{'key': 'value'\\}$\", \"^oops$\",\r\n                             \"\\+ \\{'key': 'value'\\}$\",\r\n                             \"\\+ \\{'key': 'value'\\} : oops$\"])\r\n    def testAssertDictContainsSubset(self):\r\n        with warnings.catch_warnings():\r\n            warnings.simplefilter(\"ignore\", DeprecationWarning)\r\n            self.assertMessages('assertDictContainsSubset', ({'key': 'value'}, {}),\r\n                                [\"^Missing: 'key'$\", \"^oops$\",\r\n                                 \"^Missing: 'key'$\",\r\n                                 \"^Missing: 'key' : oops$\"])\r\n    def testAssertMultiLineEqual(self):\r\n        self.assertMessages('assertMultiLineEqual', (\"\", \"foo\"),\r\n                            [r\"\\+ foo$\", \"^oops$\",\r\n                             r\"\\+ foo$\",\r\n                             r\"\\+ foo : oops$\"])\r\n    def testAssertLess(self):\r\n        self.assertMessages('assertLess', (2, 1),\r\n                            [\"^2 not less than 1$\", \"^oops$\",\r\n                             \"^2 not less than 1$\", \"^2 not less than 1 : oops$\"])\r\n    def testAssertLessEqual(self):\r\n        self.assertMessages('assertLessEqual', (2, 1),\r\n                            [\"^2 not less than or equal to 1$\", \"^oops$\",\r\n                             \"^2 not less than or equal to 1$\",\r\n                             \"^2 not less than or equal to 1 : oops$\"])\r\n    def testAssertGreater(self):\r\n        self.assertMessages('assertGreater', (1, 2),\r\n                            [\"^1 not greater than 2$\", \"^oops$\",\r\n                             \"^1 not greater than 2$\",\r\n                             \"^1 not greater than 2 : oops$\"])\r\n    def testAssertGreaterEqual(self):\r\n        self.assertMessages('assertGreaterEqual', (1, 2),\r\n                            [\"^1 not greater than or equal to 2$\", \"^oops$\",\r\n                             \"^1 not greater than or equal to 2$\",\r\n                             \"^1 not greater than or equal to 2 : oops$\"])\r\n    def testAssertIsNone(self):\r\n        self.assertMessages('assertIsNone', ('not None',),\r\n                            [\"^'not None' is not None$\", \"^oops$\",\r\n                             \"^'not None' is not None$\",\r\n                             \"^'not None' is not None : oops$\"])\r\n    def testAssertIsNotNone(self):\r\n        self.assertMessages('assertIsNotNone', (None,),\r\n                            [\"^unexpectedly None$\", \"^oops$\",\r\n                             \"^unexpectedly None$\",\r\n                             \"^unexpectedly None : oops$\"])\r\n    def testAssertIs(self):\r\n        self.assertMessages('assertIs', (None, 'foo'),\r\n                            [\"^None is not 'foo'$\", \"^oops$\",\r\n                             \"^None is not 'foo'$\",\r\n                             \"^None is not 'foo' : oops$\"])\r\n    def testAssertIsNot(self):\r\n        self.assertMessages('assertIsNot', (None, None),\r\n                            [\"^unexpectedly identical: None$\", \"^oops$\",\r\n                             \"^unexpectedly identical: None$\",\r\n                             \"^unexpectedly identical: None : oops$\"])\r\n    def assertMessagesCM(self, methodName, args, func, errors):\r\n        \"\"\"\r\n        Check that the correct error messages are raised while executing:\r\n          with method(*args):\r\n              func()\r\n        *errors* should be a list of 4 regex that match the error when:\r\n          1) longMessage = False and no msg passed;\r\n          2) longMessage = False and msg passed;\r\n          3) longMessage = True and no msg passed;\r\n          4) longMessage = True and msg passed;\r\n        \"\"\"\r\n        p = product((self.testableFalse, self.testableTrue),\r\n                    ({}, {\"msg\": \"oops\"}))\r\n        for (cls, kwargs), err in zip(p, errors):\r\n            method = getattr(cls, methodName)\r\n            with self.assertRaisesRegex(cls.failureException, err):\r\n                with method(*args, **kwargs) as cm:\r\n                    func()\r\n    def testAssertRaises(self):\r\n        self.assertMessagesCM('assertRaises', (TypeError,), lambda: None,\r\n                              ['^TypeError not raised$', '^oops$',\r\n                               '^TypeError not raised$',\r\n                               '^TypeError not raised : oops$'])\r\n    def testAssertRaisesRegex(self):\r\n        self.assertMessagesCM('assertRaisesRegex', (TypeError, 'unused regex'),\r\n                              lambda: None,\r\n                              ['^TypeError not raised$', '^oops$',\r\n                               '^TypeError not raised$',\r\n                               '^TypeError not raised : oops$'])\r\n        def raise_wrong_message():\r\n            raise TypeError('foo')\r\n        self.assertMessagesCM('assertRaisesRegex', (TypeError, 'regex'),\r\n                              raise_wrong_message,\r\n                              ['^\"regex\" does not match \"foo\"$', '^oops$',\r\n                               '^\"regex\" does not match \"foo\"$',\r\n                               '^\"regex\" does not match \"foo\" : oops$'])\r\n    def testAssertWarns(self):\r\n        self.assertMessagesCM('assertWarns', (UserWarning,), lambda: None,\r\n                              ['^UserWarning not triggered$', '^oops$',\r\n                               '^UserWarning not triggered$',\r\n                               '^UserWarning not triggered : oops$'])\r\n    def testAssertWarnsRegex(self):\r\n        self.assertMessagesCM('assertWarnsRegex', (UserWarning, 'unused regex'),\r\n                              lambda: None,\r\n                              ['^UserWarning not triggered$', '^oops$',\r\n                               '^UserWarning not triggered$',\r\n                               '^UserWarning not triggered : oops$'])\r\n        def raise_wrong_message():\r\n            warnings.warn('foo')\r\n        self.assertMessagesCM('assertWarnsRegex', (UserWarning, 'regex'),\r\n                              raise_wrong_message,\r\n                              ['^\"regex\" does not match \"foo\"$', '^oops$',\r\n                               '^\"regex\" does not match \"foo\"$',\r\n                               '^\"regex\" does not match \"foo\" : oops$'])\r\n", "/Lib/unittest/test/test_skipping.py": "import unittest\r\nfrom .support import LoggingResult\r\nclass Test_TestSkipping(unittest.TestCase):\r\n    def test_skipping(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_skip_me(self):\r\n                self.skipTest(\"skip\")\r\n        events = []\r\n        result = LoggingResult(events)\r\n        test = Foo(\"test_skip_me\")\r\n        test.run(result)\r\n        self.assertEqual(events, ['startTest', 'addSkip', 'stopTest'])\r\n        self.assertEqual(result.skipped, [(test, \"skip\")])\r\n        class Foo(unittest.TestCase):\r\n            def setUp(self):\r\n                self.skipTest(\"testing\")\r\n            def test_nothing(self): pass\r\n        events = []\r\n        result = LoggingResult(events)\r\n        test = Foo(\"test_nothing\")\r\n        test.run(result)\r\n        self.assertEqual(events, ['startTest', 'addSkip', 'stopTest'])\r\n        self.assertEqual(result.skipped, [(test, \"testing\")])\r\n        self.assertEqual(result.testsRun, 1)\r\n    def test_skipping_decorators(self):\r\n        op_table = ((unittest.skipUnless, False, True),\r\n                    (unittest.skipIf, True, False))\r\n        for deco, do_skip, dont_skip in op_table:\r\n            class Foo(unittest.TestCase):\r\n                @deco(do_skip, \"testing\")\r\n                def test_skip(self): pass\r\n                @deco(dont_skip, \"testing\")\r\n                def test_dont_skip(self): pass\r\n            test_do_skip = Foo(\"test_skip\")\r\n            test_dont_skip = Foo(\"test_dont_skip\")\r\n            suite = unittest.TestSuite([test_do_skip, test_dont_skip])\r\n            events = []\r\n            result = LoggingResult(events)\r\n            suite.run(result)\r\n            self.assertEqual(len(result.skipped), 1)\r\n            expected = ['startTest', 'addSkip', 'stopTest',\r\n                        'startTest', 'addSuccess', 'stopTest']\r\n            self.assertEqual(events, expected)\r\n            self.assertEqual(result.testsRun, 2)\r\n            self.assertEqual(result.skipped, [(test_do_skip, \"testing\")])\r\n            self.assertTrue(result.wasSuccessful())\r\n    def test_skip_class(self):\r\n        @unittest.skip(\"testing\")\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self):\r\n                record.append(1)\r\n        record = []\r\n        result = unittest.TestResult()\r\n        test = Foo(\"test_1\")\r\n        suite = unittest.TestSuite([test])\r\n        suite.run(result)\r\n        self.assertEqual(result.skipped, [(test, \"testing\")])\r\n        self.assertEqual(record, [])\r\n    def test_skip_non_unittest_class(self):\r\n        @unittest.skip(\"testing\")\r\n        class Mixin:\r\n            def test_1(self):\r\n                record.append(1)\r\n        class Foo(Mixin, unittest.TestCase):\r\n            pass\r\n        record = []\r\n        result = unittest.TestResult()\r\n        test = Foo(\"test_1\")\r\n        suite = unittest.TestSuite([test])\r\n        suite.run(result)\r\n        self.assertEqual(result.skipped, [(test, \"testing\")])\r\n        self.assertEqual(record, [])\r\n    def test_expected_failure(self):\r\n        class Foo(unittest.TestCase):\r\n            @unittest.expectedFailure\r\n            def test_die(self):\r\n                self.fail(\"help me!\")\r\n        events = []\r\n        result = LoggingResult(events)\r\n        test = Foo(\"test_die\")\r\n        test.run(result)\r\n        self.assertEqual(events,\r\n                         ['startTest', 'addExpectedFailure', 'stopTest'])\r\n        self.assertEqual(result.expectedFailures[0][0], test)\r\n        self.assertTrue(result.wasSuccessful())\r\n    def test_unexpected_success(self):\r\n        class Foo(unittest.TestCase):\r\n            @unittest.expectedFailure\r\n            def test_die(self):\r\n                pass\r\n        events = []\r\n        result = LoggingResult(events)\r\n        test = Foo(\"test_die\")\r\n        test.run(result)\r\n        self.assertEqual(events,\r\n                         ['startTest', 'addUnexpectedSuccess', 'stopTest'])\r\n        self.assertFalse(result.failures)\r\n        self.assertEqual(result.unexpectedSuccesses, [test])\r\n        self.assertTrue(result.wasSuccessful())\r\n    def test_skip_doesnt_run_setup(self):\r\n        class Foo(unittest.TestCase):\r\n            wasSetUp = False\r\n            wasTornDown = False\r\n            def setUp(self):\r\n                Foo.wasSetUp = True\r\n            def tornDown(self):\r\n                Foo.wasTornDown = True\r\n            @unittest.skip('testing')\r\n            def test_1(self):\r\n                pass\r\n        result = unittest.TestResult()\r\n        test = Foo(\"test_1\")\r\n        suite = unittest.TestSuite([test])\r\n        suite.run(result)\r\n        self.assertEqual(result.skipped, [(test, \"testing\")])\r\n        self.assertFalse(Foo.wasSetUp)\r\n        self.assertFalse(Foo.wasTornDown)\r\n    def test_decorated_skip(self):\r\n        def decorator(func):\r\n            def inner(*a):\r\n                return func(*a)\r\n            return inner\r\n        class Foo(unittest.TestCase):\r\n            @decorator\r\n            @unittest.skip('testing')\r\n            def test_1(self):\r\n                pass\r\n        result = unittest.TestResult()\r\n        test = Foo(\"test_1\")\r\n        suite = unittest.TestSuite([test])\r\n        suite.run(result)\r\n        self.assertEqual(result.skipped, [(test, \"testing\")])\r\n", "/Lib/sysconfig.py": "\"\"\"Access to Python's configuration information.\"\"\"\r\nimport os\r\nimport re\r\nimport sys\r\nfrom os.path import pardir, realpath\r\n__all__ = [\r\n    'get_config_h_filename',\r\n    'get_config_var',\r\n    'get_config_vars',\r\n    'get_makefile_filename',\r\n    'get_path',\r\n    'get_path_names',\r\n    'get_paths',\r\n    'get_platform',\r\n    'get_python_version',\r\n    'get_scheme_names',\r\n    'parse_config_h',\r\n]\r\n_INSTALL_SCHEMES = {\r\n    'posix_prefix': {\r\n        'stdlib': '{installed_base}/lib/python{py_version_short}',\r\n        'platstdlib': '{platbase}/lib/python{py_version_short}',\r\n        'purelib': '{base}/lib/python{py_version_short}/site-packages',\r\n        'platlib': '{platbase}/lib/python{py_version_short}/site-packages',\r\n        'include':\r\n            '{installed_base}/include/python{py_version_short}{abiflags}',\r\n        'platinclude':\r\n            '{installed_platbase}/include/python{py_version_short}{abiflags}',\r\n        'scripts': '{base}/bin',\r\n        'data': '{base}',\r\n        },\r\n    'posix_home': {\r\n        'stdlib': '{installed_base}/lib/python',\r\n        'platstdlib': '{base}/lib/python',\r\n        'purelib': '{base}/lib/python',\r\n        'platlib': '{base}/lib/python',\r\n        'include': '{installed_base}/include/python',\r\n        'platinclude': '{installed_base}/include/python',\r\n        'scripts': '{base}/bin',\r\n        'data': '{base}',\r\n        },\r\n    'nt': {\r\n        'stdlib': '{installed_base}/Lib',\r\n        'platstdlib': '{base}/Lib',\r\n        'purelib': '{base}/Lib/site-packages',\r\n        'platlib': '{base}/Lib/site-packages',\r\n        'include': '{installed_base}/Include',\r\n        'platinclude': '{installed_base}/Include',\r\n        'scripts': '{base}/Scripts',\r\n        'data': '{base}',\r\n        },\r\n    'os2': {\r\n        'stdlib': '{installed_base}/Lib',\r\n        'platstdlib': '{base}/Lib',\r\n        'purelib': '{base}/Lib/site-packages',\r\n        'platlib': '{base}/Lib/site-packages',\r\n        'include': '{installed_base}/Include',\r\n        'platinclude': '{installed_base}/Include',\r\n        'scripts': '{base}/Scripts',\r\n        'data': '{base}',\r\n        },\r\n    'os2_home': {\r\n        'stdlib': '{userbase}/lib/python{py_version_short}',\r\n        'platstdlib': '{userbase}/lib/python{py_version_short}',\r\n        'purelib': '{userbase}/lib/python{py_version_short}/site-packages',\r\n        'platlib': '{userbase}/lib/python{py_version_short}/site-packages',\r\n        'include': '{userbase}/include/python{py_version_short}',\r\n        'scripts': '{userbase}/bin',\r\n        'data': '{userbase}',\r\n        },\r\n    'nt_user': {\r\n        'stdlib': '{userbase}/Python{py_version_nodot}',\r\n        'platstdlib': '{userbase}/Python{py_version_nodot}',\r\n        'purelib': '{userbase}/Python{py_version_nodot}/site-packages',\r\n        'platlib': '{userbase}/Python{py_version_nodot}/site-packages',\r\n        'include': '{userbase}/Python{py_version_nodot}/Include',\r\n        'scripts': '{userbase}/Scripts',\r\n        'data': '{userbase}',\r\n        },\r\n    'posix_user': {\r\n        'stdlib': '{userbase}/lib/python{py_version_short}',\r\n        'platstdlib': '{userbase}/lib/python{py_version_short}',\r\n        'purelib': '{userbase}/lib/python{py_version_short}/site-packages',\r\n        'platlib': '{userbase}/lib/python{py_version_short}/site-packages',\r\n        'include': '{userbase}/include/python{py_version_short}',\r\n        'scripts': '{userbase}/bin',\r\n        'data': '{userbase}',\r\n        },\r\n    'osx_framework_user': {\r\n        'stdlib': '{userbase}/lib/python',\r\n        'platstdlib': '{userbase}/lib/python',\r\n        'purelib': '{userbase}/lib/python/site-packages',\r\n        'platlib': '{userbase}/lib/python/site-packages',\r\n        'include': '{userbase}/include',\r\n        'scripts': '{userbase}/bin',\r\n        'data': '{userbase}',\r\n        },\r\n    }\r\n_SCHEME_KEYS = ('stdlib', 'platstdlib', 'purelib', 'platlib', 'include',\r\n                'scripts', 'data')\r\n_PY_VERSION = sys.version.split()[0]\r\n_PY_VERSION_SHORT = sys.version[:3]\r\n_PY_VERSION_SHORT_NO_DOT = _PY_VERSION[0] + _PY_VERSION[2]\r\n_PREFIX = os.path.normpath(sys.prefix)\r\n_BASE_PREFIX = os.path.normpath(sys.base_prefix)\r\n_EXEC_PREFIX = os.path.normpath(sys.exec_prefix)\r\n_BASE_EXEC_PREFIX = os.path.normpath(sys.base_exec_prefix)\r\n_CONFIG_VARS = None\r\n_USER_BASE = None\r\ndef _safe_realpath(path):\r\n    try:\r\n        return realpath(path)\r\n    except OSError:\r\n        return path\r\nif sys.executable:\r\n    _PROJECT_BASE = os.path.dirname(_safe_realpath(sys.executable))\r\nelse:\r\n    _PROJECT_BASE = _safe_realpath(os.getcwd())\r\nif os.name == \"nt\" and \"pcbuild\" in _PROJECT_BASE[-8:].lower():\r\n    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir))\r\nif os.name == \"nt\" and \"\\\\pc\\\\v\" in _PROJECT_BASE[-10:].lower():\r\n    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir, pardir))\r\nif os.name == \"nt\" and \"\\\\pcbuild\\\\amd64\" in _PROJECT_BASE[-14:].lower():\r\n    _PROJECT_BASE = _safe_realpath(os.path.join(_PROJECT_BASE, pardir, pardir))\r\nif \"_PYTHON_PROJECT_BASE\" in os.environ:\r\n    _PROJECT_BASE = _safe_realpath(os.environ[\"_PYTHON_PROJECT_BASE\"])\r\ndef _is_python_source_dir(d):\r\n    for fn in (\"Setup.dist\", \"Setup.local\"):\r\n        if os.path.isfile(os.path.join(d, \"Modules\", fn)):\r\n            return True\r\n    return False\r\n_sys_home = getattr(sys, '_home', None)\r\nif _sys_home and os.name == 'nt' and \\\r\n    _sys_home.lower().endswith(('pcbuild', 'pcbuild\\\\amd64')):\r\n    _sys_home = os.path.dirname(_sys_home)\r\n    if _sys_home.endswith('pcbuild'):   # must be amd64\r\n        _sys_home = os.path.dirname(_sys_home)\r\ndef is_python_build(check_home=False):\r\n    if check_home and _sys_home:\r\n        return _is_python_source_dir(_sys_home)\r\n    return _is_python_source_dir(_PROJECT_BASE)\r\n_PYTHON_BUILD = is_python_build(True)\r\nif _PYTHON_BUILD:\r\n    for scheme in ('posix_prefix', 'posix_home'):\r\n        _INSTALL_SCHEMES[scheme]['include'] = '{srcdir}/Include'\r\n        _INSTALL_SCHEMES[scheme]['platinclude'] = '{projectbase}/.'\r\ndef _subst_vars(s, local_vars):\r\n    try:\r\n        return s.format(**local_vars)\r\n    except KeyError:\r\n        try:\r\n            return s.format(**os.environ)\r\n        except KeyError as var:\r\n            raise AttributeError('{%s}' % var)\r\ndef _extend_dict(target_dict, other_dict):\r\n    target_keys = target_dict.keys()\r\n    for key, value in other_dict.items():\r\n        if key in target_keys:\r\n            continue\r\n        target_dict[key] = value\r\ndef _expand_vars(scheme, vars):\r\n    res = {}\r\n    if vars is None:\r\n        vars = {}\r\n    _extend_dict(vars, get_config_vars())\r\n    for key, value in _INSTALL_SCHEMES[scheme].items():\r\n        if os.name in ('posix', 'nt'):\r\n            value = os.path.expanduser(value)\r\n        res[key] = os.path.normpath(_subst_vars(value, vars))\r\n    return res\r\ndef _get_default_scheme():\r\n    if os.name == 'posix':\r\n        return 'posix_prefix'\r\n    return os.name\r\ndef _getuserbase():\r\n    env_base = os.environ.get(\"PYTHONUSERBASE\", None)\r\n    def joinuser(*args):\r\n        return os.path.expanduser(os.path.join(*args))\r\n    if os.name == \"nt\":\r\n        base = os.environ.get(\"APPDATA\") or \"~\"\r\n        if env_base:\r\n            return env_base\r\n        else:\r\n            return joinuser(base, \"Python\")\r\n    if sys.platform == \"darwin\":\r\n        framework = get_config_var(\"PYTHONFRAMEWORK\")\r\n        if framework:\r\n            if env_base:\r\n                return env_base\r\n            else:\r\n                return joinuser(\"~\", \"Library\", framework, \"%d.%d\" %\r\n                                sys.version_info[:2])\r\n    if env_base:\r\n        return env_base\r\n    else:\r\n        return joinuser(\"~\", \".local\")\r\ndef _parse_makefile(filename, vars=None):\r\n    \"\"\"Parse a Makefile-style file.\r\n    A dictionary containing name/value pairs is returned.  If an\r\n    optional dictionary is passed in as the second argument, it is\r\n    used instead of a new dictionary.\r\n    \"\"\"\r\n    _variable_rx = re.compile(\"([a-zA-Z][a-zA-Z0-9_]+)\\s*=\\s*(.*)\")\r\n    _findvar1_rx = re.compile(r\"\\$\\(([A-Za-z][A-Za-z0-9_]*)\\)\")\r\n    _findvar2_rx = re.compile(r\"\\${([A-Za-z][A-Za-z0-9_]*)}\")\r\n    if vars is None:\r\n        vars = {}\r\n    done = {}\r\n    notdone = {}\r\n    with open(filename, errors=\"surrogateescape\") as f:\r\n        lines = f.readlines()\r\n    for line in lines:\r\n        if line.startswith('#') or line.strip() == '':\r\n            continue\r\n        m = _variable_rx.match(line)\r\n        if m:\r\n            n, v = m.group(1, 2)\r\n            v = v.strip()\r\n            tmpv = v.replace('$$', '')\r\n            if \"$\" in tmpv:\r\n                notdone[n] = v\r\n            else:\r\n                try:\r\n                    v = int(v)\r\n                except ValueError:\r\n                    done[n] = v.replace('$$', '$')\r\n                else:\r\n                    done[n] = v\r\n    variables = list(notdone.keys())\r\n    renamed_variables = ('CFLAGS', 'LDFLAGS', 'CPPFLAGS')\r\n    while len(variables) > 0:\r\n        for name in tuple(variables):\r\n            value = notdone[name]\r\n            m = _findvar1_rx.search(value) or _findvar2_rx.search(value)\r\n            if m is not None:\r\n                n = m.group(1)\r\n                found = True\r\n                if n in done:\r\n                    item = str(done[n])\r\n                elif n in notdone:\r\n                    found = False\r\n                elif n in os.environ:\r\n                    item = os.environ[n]\r\n                elif n in renamed_variables:\r\n                    if (name.startswith('PY_') and\r\n                        name[3:] in renamed_variables):\r\n                        item = \"\"\r\n                    elif 'PY_' + n in notdone:\r\n                        found = False\r\n                    else:\r\n                        item = str(done['PY_' + n])\r\n                else:\r\n                    done[n] = item = \"\"\r\n                if found:\r\n                    after = value[m.end():]\r\n                    value = value[:m.start()] + item + after\r\n                    if \"$\" in after:\r\n                        notdone[name] = value\r\n                    else:\r\n                        try:\r\n                            value = int(value)\r\n                        except ValueError:\r\n                            done[name] = value.strip()\r\n                        else:\r\n                            done[name] = value\r\n                        variables.remove(name)\r\n                        if name.startswith('PY_') \\\r\n                        and name[3:] in renamed_variables:\r\n                            name = name[3:]\r\n                            if name not in done:\r\n                                done[name] = value\r\n            else:\r\n                done[name] = value\r\n                variables.remove(name)\r\n    for k, v in done.items():\r\n        if isinstance(v, str):\r\n            done[k] = v.strip()\r\n    vars.update(done)\r\n    return vars\r\ndef get_makefile_filename():\r\n    \"\"\"Return the path of the Makefile.\"\"\"\r\n    if _PYTHON_BUILD:\r\n        return os.path.join(_sys_home or _PROJECT_BASE, \"Makefile\")\r\n    if hasattr(sys, 'abiflags'):\r\n        config_dir_name = 'config-%s%s' % (_PY_VERSION_SHORT, sys.abiflags)\r\n    else:\r\n        config_dir_name = 'config'\r\n    return os.path.join(get_path('stdlib'), config_dir_name, 'Makefile')\r\ndef _generate_posix_vars():\r\n    \"\"\"Generate the Python module containing build-time variables.\"\"\"\r\n    import pprint\r\n    vars = {}\r\n    makefile = get_makefile_filename()\r\n    try:\r\n        _parse_makefile(makefile, vars)\r\n    except IOError as e:\r\n        msg = \"invalid Python installation: unable to open %s\" % makefile\r\n        if hasattr(e, \"strerror\"):\r\n            msg = msg + \" (%s)\" % e.strerror\r\n        raise IOError(msg)\r\n    config_h = get_config_h_filename()\r\n    try:\r\n        with open(config_h) as f:\r\n            parse_config_h(f, vars)\r\n    except IOError as e:\r\n        msg = \"invalid Python installation: unable to open %s\" % config_h\r\n        if hasattr(e, \"strerror\"):\r\n            msg = msg + \" (%s)\" % e.strerror\r\n        raise IOError(msg)\r\n    if _PYTHON_BUILD:\r\n        vars['LDSHARED'] = vars['BLDSHARED']\r\n    destfile = os.path.join(os.path.dirname(__file__), '_sysconfigdata.py')\r\n    with open(destfile, 'w', encoding='utf8') as f:\r\n        f.write('# system configuration generated and used by'\r\n                ' the sysconfig module\\n')\r\n        f.write('build_time_vars = ')\r\n        pprint.pprint(vars, stream=f)\r\ndef _init_posix(vars):\r\n    \"\"\"Initialize the module as appropriate for POSIX systems.\"\"\"\r\n    from _sysconfigdata import build_time_vars\r\n    vars.update(build_time_vars)\r\ndef _init_non_posix(vars):\r\n    \"\"\"Initialize the module as appropriate for NT\"\"\"\r\n    vars['LIBDEST'] = get_path('stdlib')\r\n    vars['BINLIBDEST'] = get_path('platstdlib')\r\n    vars['INCLUDEPY'] = get_path('include')\r\n    vars['SO'] = '.pyd'\r\n    vars['EXE'] = '.exe'\r\n    vars['VERSION'] = _PY_VERSION_SHORT_NO_DOT\r\n    vars['BINDIR'] = os.path.dirname(_safe_realpath(sys.executable))\r\ndef parse_config_h(fp, vars=None):\r\n    \"\"\"Parse a config.h-style file.\r\n    A dictionary containing name/value pairs is returned.  If an\r\n    optional dictionary is passed in as the second argument, it is\r\n    used instead of a new dictionary.\r\n    \"\"\"\r\n    if vars is None:\r\n        vars = {}\r\n    define_rx = re.compile(\"#define ([A-Z][A-Za-z0-9_]+) (.*)\\n\")\r\n    undef_rx = re.compile(\"/[*] #undef ([A-Z][A-Za-z0-9_]+) [*]/\\n\")\r\n    while True:\r\n        line = fp.readline()\r\n        if not line:\r\n            break\r\n        m = define_rx.match(line)\r\n        if m:\r\n            n, v = m.group(1, 2)\r\n            try:\r\n                v = int(v)\r\n            except ValueError:\r\n                pass\r\n            vars[n] = v\r\n        else:\r\n            m = undef_rx.match(line)\r\n            if m:\r\n                vars[m.group(1)] = 0\r\n    return vars\r\ndef get_config_h_filename():\r\n    \"\"\"Return the path of pyconfig.h.\"\"\"\r\n    if _PYTHON_BUILD:\r\n        if os.name == \"nt\":\r\n            inc_dir = os.path.join(_sys_home or _PROJECT_BASE, \"PC\")\r\n        else:\r\n            inc_dir = _sys_home or _PROJECT_BASE\r\n    else:\r\n        inc_dir = get_path('platinclude')\r\n    return os.path.join(inc_dir, 'pyconfig.h')\r\ndef get_scheme_names():\r\n    \"\"\"Return a tuple containing the schemes names.\"\"\"\r\n    return tuple(sorted(_INSTALL_SCHEMES))\r\ndef get_path_names():\r\n    \"\"\"Return a tuple containing the paths names.\"\"\"\r\n    return _SCHEME_KEYS\r\ndef get_paths(scheme=_get_default_scheme(), vars=None, expand=True):\r\n    \"\"\"Return a mapping containing an install scheme.\r\n    ``scheme`` is the install scheme name. If not provided, it will\r\n    return the default scheme for the current platform.\r\n    \"\"\"\r\n    if expand:\r\n        return _expand_vars(scheme, vars)\r\n    else:\r\n        return _INSTALL_SCHEMES[scheme]\r\ndef get_path(name, scheme=_get_default_scheme(), vars=None, expand=True):\r\n    \"\"\"Return a path corresponding to the scheme.\r\n    ``scheme`` is the install scheme name.\r\n    \"\"\"\r\n    return get_paths(scheme, vars, expand)[name]\r\ndef get_config_vars(*args):\r\n    \"\"\"With no arguments, return a dictionary of all configuration\r\n    variables relevant for the current platform.\r\n    On Unix, this means every variable defined in Python's installed Makefile;\r\n    On Windows it's a much smaller set.\r\n    With arguments, return a list of values that result from looking up\r\n    each argument in the configuration variable dictionary.\r\n    \"\"\"\r\n    global _CONFIG_VARS\r\n    if _CONFIG_VARS is None:\r\n        _CONFIG_VARS = {}\r\n        _CONFIG_VARS['prefix'] = _PREFIX\r\n        _CONFIG_VARS['exec_prefix'] = _EXEC_PREFIX\r\n        _CONFIG_VARS['py_version'] = _PY_VERSION\r\n        _CONFIG_VARS['py_version_short'] = _PY_VERSION_SHORT\r\n        _CONFIG_VARS['py_version_nodot'] = _PY_VERSION[0] + _PY_VERSION[2]\r\n        _CONFIG_VARS['installed_base'] = _BASE_PREFIX\r\n        _CONFIG_VARS['base'] = _PREFIX\r\n        _CONFIG_VARS['installed_platbase'] = _BASE_EXEC_PREFIX\r\n        _CONFIG_VARS['platbase'] = _EXEC_PREFIX\r\n        _CONFIG_VARS['projectbase'] = _PROJECT_BASE\r\n        try:\r\n            _CONFIG_VARS['abiflags'] = sys.abiflags\r\n        except AttributeError:\r\n            _CONFIG_VARS['abiflags'] = ''\r\n        if os.name in ('nt', 'os2'):\r\n            _init_non_posix(_CONFIG_VARS)\r\n        if os.name == 'posix':\r\n            _init_posix(_CONFIG_VARS)\r\n        _CONFIG_VARS['userbase'] = _getuserbase()\r\n        srcdir = _CONFIG_VARS.get('srcdir', _PROJECT_BASE)\r\n        if os.name == 'posix':\r\n            if _PYTHON_BUILD:\r\n                base = os.path.dirname(get_makefile_filename())\r\n                srcdir = os.path.join(base, srcdir)\r\n            else:\r\n                srcdir = os.path.dirname(get_makefile_filename())\r\n        _CONFIG_VARS['srcdir'] = _safe_realpath(srcdir)\r\n        if sys.platform == 'darwin':\r\n            import _osx_support\r\n            _osx_support.customize_config_vars(_CONFIG_VARS)\r\n    if args:\r\n        vals = []\r\n        for name in args:\r\n            vals.append(_CONFIG_VARS.get(name))\r\n        return vals\r\n    else:\r\n        return _CONFIG_VARS\r\ndef get_config_var(name):\r\n    \"\"\"Return the value of a single variable using the dictionary returned by\r\n    'get_config_vars()'.\r\n    Equivalent to get_config_vars().get(name)\r\n    \"\"\"\r\n    return get_config_vars().get(name)\r\ndef get_platform():\r\n    \"\"\"Return a string that identifies the current platform.\r\n    This is used mainly to distinguish platform-specific build directories and\r\n    platform-specific built distributions.  Typically includes the OS name\r\n    and version and the architecture (as supplied by 'os.uname()'),\r\n    although the exact information included depends on the OS; eg. for IRIX\r\n    the architecture isn't particularly important (IRIX only runs on SGI\r\n    hardware), but for Linux the kernel version isn't particularly\r\n    important.\r\n    Examples of returned values:\r\n       linux-i586\r\n       linux-alpha (?)\r\n       solaris-2.6-sun4u\r\n       irix-5.3\r\n       irix64-6.2\r\n    Windows will return one of:\r\n       win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)\r\n       win-ia64 (64bit Windows on Itanium)\r\n       win32 (all others - specifically, sys.platform is returned)\r\n    For other non-POSIX platforms, currently just returns 'sys.platform'.\r\n    \"\"\"\r\n    if os.name == 'nt':\r\n        prefix = \" bit (\"\r\n        i = sys.version.find(prefix)\r\n        if i == -1:\r\n            return sys.platform\r\n        j = sys.version.find(\")\", i)\r\n        look = sys.version[i+len(prefix):j].lower()\r\n        if look == 'amd64':\r\n            return 'win-amd64'\r\n        if look == 'itanium':\r\n            return 'win-ia64'\r\n        return sys.platform\r\n    if os.name != \"posix\" or not hasattr(os, 'uname'):\r\n        return sys.platform\r\n    if \"_PYTHON_HOST_PLATFORM\" in os.environ:\r\n        return os.environ[\"_PYTHON_HOST_PLATFORM\"]\r\n    osname, host, release, version, machine = os.uname()\r\n    osname = osname.lower().replace('/', '')\r\n    machine = machine.replace(' ', '_')\r\n    machine = machine.replace('/', '-')\r\n    if osname[:5] == \"linux\":\r\n        return  \"%s-%s\" % (osname, machine)\r\n    elif osname[:5] == \"sunos\":\r\n        if release[0] >= \"5\":           # SunOS 5 == Solaris 2\r\n            osname = \"solaris\"\r\n            release = \"%d.%s\" % (int(release[0]) - 3, release[2:])\r\n            bitness = {2147483647:\"32bit\", 9223372036854775807:\"64bit\"}\r\n            machine += \".%s\" % bitness[sys.maxsize]\r\n    elif osname[:4] == \"irix\":              # could be \"irix64\"!\r\n        return \"%s-%s\" % (osname, release)\r\n    elif osname[:3] == \"aix\":\r\n        return \"%s-%s.%s\" % (osname, version, release)\r\n    elif osname[:6] == \"cygwin\":\r\n        osname = \"cygwin\"\r\n        rel_re = re.compile(r'[\\d.]+')\r\n        m = rel_re.match(release)\r\n        if m:\r\n            release = m.group()\r\n    elif osname[:6] == \"darwin\":\r\n        import _osx_support\r\n        osname, release, machine = _osx_support.get_platform_osx(\r\n                                            get_config_vars(),\r\n                                            osname, release, machine)\r\n    return \"%s-%s-%s\" % (osname, release, machine)\r\ndef get_python_version():\r\n    return _PY_VERSION_SHORT\r\ndef _print_dict(title, data):\r\n    for index, (key, value) in enumerate(sorted(data.items())):\r\n        if index == 0:\r\n            print('%s: ' % (title))\r\n        print('\\t%s = \"%s\"' % (key, value))\r\ndef _main():\r\n    \"\"\"Display all information sysconfig detains.\"\"\"\r\n    if '--generate-posix-vars' in sys.argv:\r\n        _generate_posix_vars()\r\n        return\r\n    print('Platform: \"%s\"' % get_platform())\r\n    print('Python version: \"%s\"' % get_python_version())\r\n    print('Current installation scheme: \"%s\"' % _get_default_scheme())\r\n    print()\r\n    _print_dict('Paths', get_paths())\r\n    print()\r\n    _print_dict('Variables', get_config_vars())\r\nif __name__ == '__main__':\r\n    _main()\r\n", "/Lib/unittest/test/__init__.py": "import os\r\nimport sys\r\nimport unittest\r\nhere = os.path.dirname(__file__)\r\nloader = unittest.defaultTestLoader\r\ndef suite():\r\n    suite = unittest.TestSuite()\r\n    for fn in os.listdir(here):\r\n        if fn.startswith(\"test\") and fn.endswith(\".py\"):\r\n            modname = \"unittest.test.\" + fn[:-3]\r\n            __import__(modname)\r\n            module = sys.modules[modname]\r\n            suite.addTest(loader.loadTestsFromModule(module))\r\n    suite.addTest(loader.loadTestsFromName('unittest.test.testmock'))\r\n    return suite\r\nif __name__ == \"__main__\":\r\n    unittest.main(defaultTest=\"suite\")\r\n", "/Lib/logging/__init__.py": "\"\"\"\r\nLogging package for Python. Based on PEP 282 and comments thereto in\r\ncomp.lang.python.\r\nCopyright (C) 2001-2012 Vinay Sajip. All Rights Reserved.\r\nTo use, simply 'import logging' and log away!\r\n\"\"\"\r\nimport sys, os, time, io, traceback, warnings, weakref\r\nfrom string import Template\r\n__all__ = ['BASIC_FORMAT', 'BufferingFormatter', 'CRITICAL', 'DEBUG', 'ERROR',\r\n           'FATAL', 'FileHandler', 'Filter', 'Formatter', 'Handler', 'INFO',\r\n           'LogRecord', 'Logger', 'LoggerAdapter', 'NOTSET', 'NullHandler',\r\n           'StreamHandler', 'WARN', 'WARNING', 'addLevelName', 'basicConfig',\r\n           'captureWarnings', 'critical', 'debug', 'disable', 'error',\r\n           'exception', 'fatal', 'getLevelName', 'getLogger', 'getLoggerClass',\r\n           'info', 'log', 'makeLogRecord', 'setLoggerClass', 'warn', 'warning',\r\n           'getLogRecordFactory', 'setLogRecordFactory', 'lastResort']\r\ntry:\r\n    import threading\r\nexcept ImportError: #pragma: no cover\r\n    threading = None\r\n__author__  = \"Vinay Sajip <vinay_sajip@red-dove.com>\"\r\n__status__  = \"production\"\r\n__version__ = \"0.5.1.2\"\r\n__date__    = \"07 February 2010\"\r\nif hasattr(sys, 'frozen'): #support for py2exe\r\n    _srcfile = \"logging%s__init__%s\" % (os.sep, __file__[-4:])\r\nelse:\r\n    _srcfile = __file__\r\n_srcfile = os.path.normcase(_srcfile)\r\nif hasattr(sys, '_getframe'):\r\n    currentframe = lambda: sys._getframe(3)\r\nelse: #pragma: no cover\r\n    def currentframe():\r\n        \"\"\"Return the frame object for the caller's stack frame.\"\"\"\r\n        try:\r\n            raise Exception\r\n        except:\r\n            return sys.exc_info()[2].tb_frame.f_back\r\n_startTime = time.time()\r\nraiseExceptions = True\r\nlogThreads = True\r\nlogMultiprocessing = True\r\nlogProcesses = True\r\nCRITICAL = 50\r\nFATAL = CRITICAL\r\nERROR = 40\r\nWARNING = 30\r\nWARN = WARNING\r\nINFO = 20\r\nDEBUG = 10\r\nNOTSET = 0\r\n_levelNames = {\r\n    CRITICAL : 'CRITICAL',\r\n    ERROR : 'ERROR',\r\n    WARNING : 'WARNING',\r\n    INFO : 'INFO',\r\n    DEBUG : 'DEBUG',\r\n    NOTSET : 'NOTSET',\r\n    'CRITICAL' : CRITICAL,\r\n    'ERROR' : ERROR,\r\n    'WARN' : WARNING,\r\n    'WARNING' : WARNING,\r\n    'INFO' : INFO,\r\n    'DEBUG' : DEBUG,\r\n    'NOTSET' : NOTSET,\r\n}\r\ndef getLevelName(level):\r\n    \"\"\"\r\n    Return the textual representation of logging level 'level'.\r\n    If the level is one of the predefined levels (CRITICAL, ERROR, WARNING,\r\n    INFO, DEBUG) then you get the corresponding string. If you have\r\n    associated levels with names using addLevelName then the name you have\r\n    associated with 'level' is returned.\r\n    If a numeric value corresponding to one of the defined levels is passed\r\n    in, the corresponding string representation is returned.\r\n    Otherwise, the string \"Level %s\" % level is returned.\r\n    \"\"\"\r\n    return _levelNames.get(level, (\"Level %s\" % level))\r\ndef addLevelName(level, levelName):\r\n    \"\"\"\r\n    Associate 'levelName' with 'level'.\r\n    This is used when converting levels to text during message formatting.\r\n    \"\"\"\r\n    _acquireLock()\r\n    try:    #unlikely to cause an exception, but you never know...\r\n        _levelNames[level] = levelName\r\n        _levelNames[levelName] = level\r\n    finally:\r\n        _releaseLock()\r\ndef _checkLevel(level):\r\n    if isinstance(level, int):\r\n        rv = level\r\n    elif str(level) == level:\r\n        if level not in _levelNames:\r\n            raise ValueError(\"Unknown level: %r\" % level)\r\n        rv = _levelNames[level]\r\n    else:\r\n        raise TypeError(\"Level not an integer or a valid string: %r\" % level)\r\n    return rv\r\nif threading:\r\n    _lock = threading.RLock()\r\nelse: #pragma: no cover\r\n    _lock = None\r\ndef _acquireLock():\r\n    \"\"\"\r\n    Acquire the module-level lock for serializing access to shared data.\r\n    This should be released with _releaseLock().\r\n    \"\"\"\r\n    if _lock:\r\n        _lock.acquire()\r\ndef _releaseLock():\r\n    \"\"\"\r\n    Release the module-level lock acquired by calling _acquireLock().\r\n    \"\"\"\r\n    if _lock:\r\n        _lock.release()\r\nclass LogRecord(object):\r\n    \"\"\"\r\n    A LogRecord instance represents an event being logged.\r\n    LogRecord instances are created every time something is logged. They\r\n    contain all the information pertinent to the event being logged. The\r\n    main information passed in is in msg and args, which are combined\r\n    using str(msg) % args to create the message field of the record. The\r\n    record also includes information such as when the record was created,\r\n    the source line where the logging call was made, and any exception\r\n    information to be logged.\r\n    \"\"\"\r\n    def __init__(self, name, level, pathname, lineno,\r\n                 msg, args, exc_info, func=None, sinfo=None, **kwargs):\r\n        \"\"\"\r\n        Initialize a logging record with interesting information.\r\n        \"\"\"\r\n        ct = time.time()\r\n        self.name = name\r\n        self.msg = msg\r\n        if args and len(args) == 1 and isinstance(args[0], dict) and args[0]:\r\n            args = args[0]\r\n        self.args = args\r\n        self.levelname = getLevelName(level)\r\n        self.levelno = level\r\n        self.pathname = pathname\r\n        try:\r\n            self.filename = os.path.basename(pathname)\r\n            self.module = os.path.splitext(self.filename)[0]\r\n        except (TypeError, ValueError, AttributeError):\r\n            self.filename = pathname\r\n            self.module = \"Unknown module\"\r\n        self.exc_info = exc_info\r\n        self.exc_text = None      # used to cache the traceback text\r\n        self.stack_info = sinfo\r\n        self.lineno = lineno\r\n        self.funcName = func\r\n        self.created = ct\r\n        self.msecs = (ct - int(ct)) * 1000\r\n        self.relativeCreated = (self.created - _startTime) * 1000\r\n        if logThreads and threading:\r\n            self.thread = threading.get_ident()\r\n            self.threadName = threading.current_thread().name\r\n        else: # pragma: no cover\r\n            self.thread = None\r\n            self.threadName = None\r\n        if not logMultiprocessing: # pragma: no cover\r\n            self.processName = None\r\n        else:\r\n            self.processName = 'MainProcess'\r\n            mp = sys.modules.get('multiprocessing')\r\n            if mp is not None:\r\n                try:\r\n                    self.processName = mp.current_process().name\r\n                except Exception: #pragma: no cover\r\n                    pass\r\n        if logProcesses and hasattr(os, 'getpid'):\r\n            self.process = os.getpid()\r\n        else:\r\n            self.process = None\r\n    def __str__(self):\r\n        return '<LogRecord: %s, %s, %s, %s, \"%s\">'%(self.name, self.levelno,\r\n            self.pathname, self.lineno, self.msg)\r\n    def getMessage(self):\r\n        \"\"\"\r\n        Return the message for this LogRecord.\r\n        Return the message for this LogRecord after merging any user-supplied\r\n        arguments with the message.\r\n        \"\"\"\r\n        msg = str(self.msg)\r\n        if self.args:\r\n            msg = msg % self.args\r\n        return msg\r\n_logRecordFactory = LogRecord\r\ndef setLogRecordFactory(factory):\r\n    \"\"\"\r\n    Set the factory to be used when instantiating a log record.\r\n    :param factory: A callable which will be called to instantiate\r\n    a log record.\r\n    \"\"\"\r\n    global _logRecordFactory\r\n    _logRecordFactory = factory\r\ndef getLogRecordFactory():\r\n    \"\"\"\r\n    Return the factory to be used when instantiating a log record.\r\n    \"\"\"\r\n    return _logRecordFactory\r\ndef makeLogRecord(dict):\r\n    \"\"\"\r\n    Make a LogRecord whose attributes are defined by the specified dictionary,\r\n    This function is useful for converting a logging event received over\r\n    a socket connection (which is sent as a dictionary) into a LogRecord\r\n    instance.\r\n    \"\"\"\r\n    rv = _logRecordFactory(None, None, \"\", 0, \"\", (), None, None)\r\n    rv.__dict__.update(dict)\r\n    return rv\r\nclass PercentStyle(object):\r\n    default_format = '%(message)s'\r\n    asctime_format = '%(asctime)s'\r\n    asctime_search = '%(asctime)'\r\n    def __init__(self, fmt):\r\n        self._fmt = fmt or self.default_format\r\n    def usesTime(self):\r\n        return self._fmt.find(self.asctime_search) >= 0\r\n    def format(self, record):\r\n        return self._fmt % record.__dict__\r\nclass StrFormatStyle(PercentStyle):\r\n    default_format = '{message}'\r\n    asctime_format = '{asctime}'\r\n    asctime_search = '{asctime'\r\n    def format(self, record):\r\n        return self._fmt.format(**record.__dict__)\r\nclass StringTemplateStyle(PercentStyle):\r\n    default_format = '${message}'\r\n    asctime_format = '${asctime}'\r\n    asctime_search = '${asctime}'\r\n    def __init__(self, fmt):\r\n        self._fmt = fmt or self.default_format\r\n        self._tpl = Template(self._fmt)\r\n    def usesTime(self):\r\n        fmt = self._fmt\r\n        return fmt.find('$asctime') >= 0 or fmt.find(self.asctime_format) >= 0\r\n    def format(self, record):\r\n        return self._tpl.substitute(**record.__dict__)\r\n_STYLES = {\r\n    '%': PercentStyle,\r\n    '{': StrFormatStyle,\r\n    '$': StringTemplateStyle\r\n}\r\nclass Formatter(object):\r\n    \"\"\"\r\n    Formatter instances are used to convert a LogRecord to text.\r\n    Formatters need to know how a LogRecord is constructed. They are\r\n    responsible for converting a LogRecord to (usually) a string which can\r\n    be interpreted by either a human or an external system. The base Formatter\r\n    allows a formatting string to be specified. If none is supplied, the\r\n    default value of \"%s(message)\" is used.\r\n    The Formatter can be initialized with a format string which makes use of\r\n    knowledge of the LogRecord attributes - e.g. the default value mentioned\r\n    above makes use of the fact that the user's message and arguments are pre-\r\n    formatted into a LogRecord's message attribute. Currently, the useful\r\n    attributes in a LogRecord are described by:\r\n    %(name)s            Name of the logger (logging channel)\r\n    %(levelno)s         Numeric logging level for the message (DEBUG, INFO,\r\n                        WARNING, ERROR, CRITICAL)\r\n    %(levelname)s       Text logging level for the message (\"DEBUG\", \"INFO\",\r\n                        \"WARNING\", \"ERROR\", \"CRITICAL\")\r\n    %(pathname)s        Full pathname of the source file where the logging\r\n                        call was issued (if available)\r\n    %(filename)s        Filename portion of pathname\r\n    %(module)s          Module (name portion of filename)\r\n    %(lineno)d          Source line number where the logging call was issued\r\n                        (if available)\r\n    %(funcName)s        Function name\r\n    %(created)f         Time when the LogRecord was created (time.time()\r\n                        return value)\r\n    %(asctime)s         Textual time when the LogRecord was created\r\n    %(msecs)d           Millisecond portion of the creation time\r\n    %(relativeCreated)d Time in milliseconds when the LogRecord was created,\r\n                        relative to the time the logging module was loaded\r\n                        (typically at application startup time)\r\n    %(thread)d          Thread ID (if available)\r\n    %(threadName)s      Thread name (if available)\r\n    %(process)d         Process ID (if available)\r\n    %(message)s         The result of record.getMessage(), computed just as\r\n                        the record is emitted\r\n    \"\"\"\r\n    converter = time.localtime\r\n    def __init__(self, fmt=None, datefmt=None, style='%'):\r\n        \"\"\"\r\n        Initialize the formatter with specified format strings.\r\n        Initialize the formatter either with the specified format string, or a\r\n        default as described above. Allow for specialized date formatting with\r\n        the optional datefmt argument (if omitted, you get the ISO8601 format).\r\n        Use a style parameter of '%', '{' or '$' to specify that you want to\r\n        use one of %-formatting, :meth:`str.format` (``{}``) formatting or\r\n        :class:`string.Template` formatting in your format string.\r\n        .. versionchanged: 3.2\r\n           Added the ``style`` parameter.\r\n        \"\"\"\r\n        if style not in _STYLES:\r\n            raise ValueError('Style must be one of: %s' % ','.join(\r\n                             _STYLES.keys()))\r\n        self._style = _STYLES[style](fmt)\r\n        self._fmt = self._style._fmt\r\n        self.datefmt = datefmt\r\n    default_time_format = '%Y-%m-%d %H:%M:%S'\r\n    default_msec_format = '%s,%03d'\r\n    def formatTime(self, record, datefmt=None):\r\n        \"\"\"\r\n        Return the creation time of the specified LogRecord as formatted text.\r\n        This method should be called from format() by a formatter which\r\n        wants to make use of a formatted time. This method can be overridden\r\n        in formatters to provide for any specific requirement, but the\r\n        basic behaviour is as follows: if datefmt (a string) is specified,\r\n        it is used with time.strftime() to format the creation time of the\r\n        record. Otherwise, the ISO8601 format is used. The resulting\r\n        string is returned. This function uses a user-configurable function\r\n        to convert the creation time to a tuple. By default, time.localtime()\r\n        is used; to change this for a particular formatter instance, set the\r\n        'converter' attribute to a function with the same signature as\r\n        time.localtime() or time.gmtime(). To change it for all formatters,\r\n        for example if you want all logging times to be shown in GMT,\r\n        set the 'converter' attribute in the Formatter class.\r\n        \"\"\"\r\n        ct = self.converter(record.created)\r\n        if datefmt:\r\n            s = time.strftime(datefmt, ct)\r\n        else:\r\n            t = time.strftime(self.default_time_format, ct)\r\n            s = self.default_msec_format % (t, record.msecs)\r\n        return s\r\n    def formatException(self, ei):\r\n        \"\"\"\r\n        Format and return the specified exception information as a string.\r\n        This default implementation just uses\r\n        traceback.print_exception()\r\n        \"\"\"\r\n        sio = io.StringIO()\r\n        tb = ei[2]\r\n        traceback.print_exception(ei[0], ei[1], tb, None, sio)\r\n        s = sio.getvalue()\r\n        sio.close()\r\n        if s[-1:] == \"\\n\":\r\n            s = s[:-1]\r\n        return s\r\n    def usesTime(self):\r\n        \"\"\"\r\n        Check if the format uses the creation time of the record.\r\n        \"\"\"\r\n        return self._style.usesTime()\r\n    def formatMessage(self, record):\r\n        return self._style.format(record)\r\n    def formatStack(self, stack_info):\r\n        \"\"\"\r\n        This method is provided as an extension point for specialized\r\n        formatting of stack information.\r\n        The input data is a string as returned from a call to\r\n        :func:`traceback.print_stack`, but with the last trailing newline\r\n        removed.\r\n        The base implementation just returns the value passed in.\r\n        \"\"\"\r\n        return stack_info\r\n    def format(self, record):\r\n        \"\"\"\r\n        Format the specified record as text.\r\n        The record's attribute dictionary is used as the operand to a\r\n        string formatting operation which yields the returned string.\r\n        Before formatting the dictionary, a couple of preparatory steps\r\n        are carried out. The message attribute of the record is computed\r\n        using LogRecord.getMessage(). If the formatting string uses the\r\n        time (as determined by a call to usesTime(), formatTime() is\r\n        called to format the event time. If there is exception information,\r\n        it is formatted using formatException() and appended to the message.\r\n        \"\"\"\r\n        record.message = record.getMessage()\r\n        if self.usesTime():\r\n            record.asctime = self.formatTime(record, self.datefmt)\r\n        s = self.formatMessage(record)\r\n        if record.exc_info:\r\n            if not record.exc_text:\r\n                record.exc_text = self.formatException(record.exc_info)\r\n        if record.exc_text:\r\n            if s[-1:] != \"\\n\":\r\n                s = s + \"\\n\"\r\n            s = s + record.exc_text\r\n        if record.stack_info:\r\n            if s[-1:] != \"\\n\":\r\n                s = s + \"\\n\"\r\n            s = s + self.formatStack(record.stack_info)\r\n        return s\r\n_defaultFormatter = Formatter()\r\nclass BufferingFormatter(object):\r\n    \"\"\"\r\n    A formatter suitable for formatting a number of records.\r\n    \"\"\"\r\n    def __init__(self, linefmt=None):\r\n        \"\"\"\r\n        Optionally specify a formatter which will be used to format each\r\n        individual record.\r\n        \"\"\"\r\n        if linefmt:\r\n            self.linefmt = linefmt\r\n        else:\r\n            self.linefmt = _defaultFormatter\r\n    def formatHeader(self, records):\r\n        \"\"\"\r\n        Return the header string for the specified records.\r\n        \"\"\"\r\n        return \"\"\r\n    def formatFooter(self, records):\r\n        \"\"\"\r\n        Return the footer string for the specified records.\r\n        \"\"\"\r\n        return \"\"\r\n    def format(self, records):\r\n        \"\"\"\r\n        Format the specified records and return the result as a string.\r\n        \"\"\"\r\n        rv = \"\"\r\n        if len(records) > 0:\r\n            rv = rv + self.formatHeader(records)\r\n            for record in records:\r\n                rv = rv + self.linefmt.format(record)\r\n            rv = rv + self.formatFooter(records)\r\n        return rv\r\nclass Filter(object):\r\n    \"\"\"\r\n    Filter instances are used to perform arbitrary filtering of LogRecords.\r\n    Loggers and Handlers can optionally use Filter instances to filter\r\n    records as desired. The base filter class only allows events which are\r\n    below a certain point in the logger hierarchy. For example, a filter\r\n    initialized with \"A.B\" will allow events logged by loggers \"A.B\",\r\n    \"A.B.C\", \"A.B.C.D\", \"A.B.D\" etc. but not \"A.BB\", \"B.A.B\" etc. If\r\n    initialized with the empty string, all events are passed.\r\n    \"\"\"\r\n    def __init__(self, name=''):\r\n        \"\"\"\r\n        Initialize a filter.\r\n        Initialize with the name of the logger which, together with its\r\n        children, will have its events allowed through the filter. If no\r\n        name is specified, allow every event.\r\n        \"\"\"\r\n        self.name = name\r\n        self.nlen = len(name)\r\n    def filter(self, record):\r\n        \"\"\"\r\n        Determine if the specified record is to be logged.\r\n        Is the specified record to be logged? Returns 0 for no, nonzero for\r\n        yes. If deemed appropriate, the record may be modified in-place.\r\n        \"\"\"\r\n        if self.nlen == 0:\r\n            return True\r\n        elif self.name == record.name:\r\n            return True\r\n        elif record.name.find(self.name, 0, self.nlen) != 0:\r\n            return False\r\n        return (record.name[self.nlen] == \".\")\r\nclass Filterer(object):\r\n    \"\"\"\r\n    A base class for loggers and handlers which allows them to share\r\n    common code.\r\n    \"\"\"\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize the list of filters to be an empty list.\r\n        \"\"\"\r\n        self.filters = []\r\n    def addFilter(self, filter):\r\n        \"\"\"\r\n        Add the specified filter to this handler.\r\n        \"\"\"\r\n        if not (filter in self.filters):\r\n            self.filters.append(filter)\r\n    def removeFilter(self, filter):\r\n        \"\"\"\r\n        Remove the specified filter from this handler.\r\n        \"\"\"\r\n        if filter in self.filters:\r\n            self.filters.remove(filter)\r\n    def filter(self, record):\r\n        \"\"\"\r\n        Determine if a record is loggable by consulting all the filters.\r\n        The default is to allow the record to be logged; any filter can veto\r\n        this and the record is then dropped. Returns a zero value if a record\r\n        is to be dropped, else non-zero.\r\n        .. versionchanged: 3.2\r\n           Allow filters to be just callables.\r\n        \"\"\"\r\n        rv = True\r\n        for f in self.filters:\r\n            if hasattr(f, 'filter'):\r\n                result = f.filter(record)\r\n            else:\r\n                result = f(record) # assume callable - will raise if not\r\n            if not result:\r\n                rv = False\r\n                break\r\n        return rv\r\n_handlers = weakref.WeakValueDictionary()  #map of handler names to handlers\r\n_handlerList = [] # added to allow handlers to be removed in reverse of order initialized\r\ndef _removeHandlerRef(wr):\r\n    \"\"\"\r\n    Remove a handler reference from the internal cleanup list.\r\n    \"\"\"\r\n    if _acquireLock is not None:\r\n        _acquireLock()\r\n        try:\r\n            if wr in _handlerList:\r\n                _handlerList.remove(wr)\r\n        finally:\r\n            _releaseLock()\r\ndef _addHandlerRef(handler):\r\n    \"\"\"\r\n    Add a handler to the internal cleanup list using a weak reference.\r\n    \"\"\"\r\n    _acquireLock()\r\n    try:\r\n        _handlerList.append(weakref.ref(handler, _removeHandlerRef))\r\n    finally:\r\n        _releaseLock()\r\nclass Handler(Filterer):\r\n    \"\"\"\r\n    Handler instances dispatch logging events to specific destinations.\r\n    The base handler class. Acts as a placeholder which defines the Handler\r\n    interface. Handlers can optionally use Formatter instances to format\r\n    records as desired. By default, no formatter is specified; in this case,\r\n    the 'raw' message as determined by record.message is logged.\r\n    \"\"\"\r\n    def __init__(self, level=NOTSET):\r\n        \"\"\"\r\n        Initializes the instance - basically setting the formatter to None\r\n        and the filter list to empty.\r\n        \"\"\"\r\n        Filterer.__init__(self)\r\n        self._name = None\r\n        self.level = _checkLevel(level)\r\n        self.formatter = None\r\n        _addHandlerRef(self)\r\n        self.createLock()\r\n    def get_name(self):\r\n        return self._name\r\n    def set_name(self, name):\r\n        _acquireLock()\r\n        try:\r\n            if self._name in _handlers:\r\n                del _handlers[self._name]\r\n            self._name = name\r\n            if name:\r\n                _handlers[name] = self\r\n        finally:\r\n            _releaseLock()\r\n    name = property(get_name, set_name)\r\n    def createLock(self):\r\n        \"\"\"\r\n        Acquire a thread lock for serializing access to the underlying I/O.\r\n        \"\"\"\r\n        if threading:\r\n            self.lock = threading.RLock()\r\n        else: #pragma: no cover\r\n            self.lock = None\r\n    def acquire(self):\r\n        \"\"\"\r\n        Acquire the I/O thread lock.\r\n        \"\"\"\r\n        if self.lock:\r\n            self.lock.acquire()\r\n    def release(self):\r\n        \"\"\"\r\n        Release the I/O thread lock.\r\n        \"\"\"\r\n        if self.lock:\r\n            self.lock.release()\r\n    def setLevel(self, level):\r\n        \"\"\"\r\n        Set the logging level of this handler.  level must be an int or a str.\r\n        \"\"\"\r\n        self.level = _checkLevel(level)\r\n    def format(self, record):\r\n        \"\"\"\r\n        Format the specified record.\r\n        If a formatter is set, use it. Otherwise, use the default formatter\r\n        for the module.\r\n        \"\"\"\r\n        if self.formatter:\r\n            fmt = self.formatter\r\n        else:\r\n            fmt = _defaultFormatter\r\n        return fmt.format(record)\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Do whatever it takes to actually log the specified logging record.\r\n        This version is intended to be implemented by subclasses and so\r\n        raises a NotImplementedError.\r\n        \"\"\"\r\n        raise NotImplementedError('emit must be implemented '\r\n                                  'by Handler subclasses')\r\n    def handle(self, record):\r\n        \"\"\"\r\n        Conditionally emit the specified logging record.\r\n        Emission depends on filters which may have been added to the handler.\r\n        Wrap the actual emission of the record with acquisition/release of\r\n        the I/O thread lock. Returns whether the filter passed the record for\r\n        emission.\r\n        \"\"\"\r\n        rv = self.filter(record)\r\n        if rv:\r\n            self.acquire()\r\n            try:\r\n                self.emit(record)\r\n            finally:\r\n                self.release()\r\n        return rv\r\n    def setFormatter(self, fmt):\r\n        \"\"\"\r\n        Set the formatter for this handler.\r\n        \"\"\"\r\n        self.formatter = fmt\r\n    def flush(self):\r\n        \"\"\"\r\n        Ensure all logging output has been flushed.\r\n        This version does nothing and is intended to be implemented by\r\n        subclasses.\r\n        \"\"\"\r\n        pass\r\n    def close(self):\r\n        \"\"\"\r\n        Tidy up any resources used by the handler.\r\n        This version removes the handler from an internal map of handlers,\r\n        _handlers, which is used for handler lookup by name. Subclasses\r\n        should ensure that this gets called from overridden close()\r\n        methods.\r\n        \"\"\"\r\n        _acquireLock()\r\n        try:    #unlikely to raise an exception, but you never know...\r\n            if self._name and self._name in _handlers:\r\n                del _handlers[self._name]\r\n        finally:\r\n            _releaseLock()\r\n    def handleError(self, record):\r\n        \"\"\"\r\n        Handle errors which occur during an emit() call.\r\n        This method should be called from handlers when an exception is\r\n        encountered during an emit() call. If raiseExceptions is false,\r\n        exceptions get silently ignored. This is what is mostly wanted\r\n        for a logging system - most users will not care about errors in\r\n        the logging system, they are more interested in application errors.\r\n        You could, however, replace this with a custom handler if you wish.\r\n        The record which was being processed is passed in to this method.\r\n        \"\"\"\r\n        if raiseExceptions and sys.stderr:  # see issue 13807\r\n            ei = sys.exc_info()\r\n            try:\r\n                traceback.print_exception(ei[0], ei[1], ei[2],\r\n                                          None, sys.stderr)\r\n                sys.stderr.write('Logged from file %s, line %s\\n' % (\r\n                                 record.filename, record.lineno))\r\n            except IOError: #pragma: no cover\r\n                pass    # see issue 5971\r\n            finally:\r\n                del ei\r\nclass StreamHandler(Handler):\r\n    \"\"\"\r\n    A handler class which writes logging records, appropriately formatted,\r\n    to a stream. Note that this class does not close the stream, as\r\n    sys.stdout or sys.stderr may be used.\r\n    \"\"\"\r\n    terminator = '\\n'\r\n    def __init__(self, stream=None):\r\n        \"\"\"\r\n        Initialize the handler.\r\n        If stream is not specified, sys.stderr is used.\r\n        \"\"\"\r\n        Handler.__init__(self)\r\n        if stream is None:\r\n            stream = sys.stderr\r\n        self.stream = stream\r\n    def flush(self):\r\n        \"\"\"\r\n        Flushes the stream.\r\n        \"\"\"\r\n        self.acquire()\r\n        try:\r\n            if self.stream and hasattr(self.stream, \"flush\"):\r\n                self.stream.flush()\r\n        finally:\r\n            self.release()\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        If a formatter is specified, it is used to format the record.\r\n        The record is then written to the stream with a trailing newline.  If\r\n        exception information is present, it is formatted using\r\n        traceback.print_exception and appended to the stream.  If the stream\r\n        has an 'encoding' attribute, it is used to determine how to do the\r\n        output to the stream.\r\n        \"\"\"\r\n        try:\r\n            msg = self.format(record)\r\n            stream = self.stream\r\n            stream.write(msg)\r\n            stream.write(self.terminator)\r\n            self.flush()\r\n        except (KeyboardInterrupt, SystemExit): #pragma: no cover\r\n            raise\r\n        except:\r\n            self.handleError(record)\r\nclass FileHandler(StreamHandler):\r\n    \"\"\"\r\n    A handler class which writes formatted logging records to disk files.\r\n    \"\"\"\r\n    def __init__(self, filename, mode='a', encoding=None, delay=False):\r\n        \"\"\"\r\n        Open the specified file and use it as the stream for logging.\r\n        \"\"\"\r\n        self.baseFilename = os.path.abspath(filename)\r\n        self.mode = mode\r\n        self.encoding = encoding\r\n        if delay:\r\n            Handler.__init__(self)\r\n            self.stream = None\r\n        else:\r\n            StreamHandler.__init__(self, self._open())\r\n    def close(self):\r\n        \"\"\"\r\n        Closes the stream.\r\n        \"\"\"\r\n        self.acquire()\r\n        try:\r\n            if self.stream:\r\n                self.flush()\r\n                if hasattr(self.stream, \"close\"):\r\n                    self.stream.close()\r\n                StreamHandler.close(self)\r\n                self.stream = None\r\n        finally:\r\n            self.release()\r\n    def _open(self):\r\n        \"\"\"\r\n        Open the current base file with the (original) mode and encoding.\r\n        Return the resulting stream.\r\n        \"\"\"\r\n        return open(self.baseFilename, self.mode, encoding=self.encoding)\r\n    def emit(self, record):\r\n        \"\"\"\r\n        Emit a record.\r\n        If the stream was not opened because 'delay' was specified in the\r\n        constructor, open it before calling the superclass's emit.\r\n        \"\"\"\r\n        if self.stream is None:\r\n            self.stream = self._open()\r\n        StreamHandler.emit(self, record)\r\nclass _StderrHandler(StreamHandler):\r\n    \"\"\"\r\n    This class is like a StreamHandler using sys.stderr, but always uses\r\n    whatever sys.stderr is currently set to rather than the value of\r\n    sys.stderr at handler construction time.\r\n    \"\"\"\r\n    def __init__(self, level=NOTSET):\r\n        \"\"\"\r\n        Initialize the handler.\r\n        \"\"\"\r\n        Handler.__init__(self, level)\r\n    @property\r\n    def stream(self):\r\n        return sys.stderr\r\n_defaultLastResort = _StderrHandler(WARNING)\r\nlastResort = _defaultLastResort\r\nclass PlaceHolder(object):\r\n    \"\"\"\r\n    PlaceHolder instances are used in the Manager logger hierarchy to take\r\n    the place of nodes for which no loggers have been defined. This class is\r\n    intended for internal use only and not as part of the public API.\r\n    \"\"\"\r\n    def __init__(self, alogger):\r\n        \"\"\"\r\n        Initialize with the specified logger being a child of this placeholder.\r\n        \"\"\"\r\n        self.loggerMap = { alogger : None }\r\n    def append(self, alogger):\r\n        \"\"\"\r\n        Add the specified logger as a child of this placeholder.\r\n        \"\"\"\r\n        if alogger not in self.loggerMap:\r\n            self.loggerMap[alogger] = None\r\n_loggerClass = None\r\ndef setLoggerClass(klass):\r\n    \"\"\"\r\n    Set the class to be used when instantiating a logger. The class should\r\n    define __init__() such that only a name argument is required, and the\r\n    __init__() should call Logger.__init__()\r\n    \"\"\"\r\n    if klass != Logger:\r\n        if not issubclass(klass, Logger):\r\n            raise TypeError(\"logger not derived from logging.Logger: \"\r\n                            + klass.__name__)\r\n    global _loggerClass\r\n    _loggerClass = klass\r\ndef getLoggerClass():\r\n    \"\"\"\r\n    Return the class to be used when instantiating a logger.\r\n    \"\"\"\r\n    return _loggerClass\r\nclass Manager(object):\r\n    \"\"\"\r\n    There is [under normal circumstances] just one Manager instance, which\r\n    holds the hierarchy of loggers.\r\n    \"\"\"\r\n    def __init__(self, rootnode):\r\n        \"\"\"\r\n        Initialize the manager with the root node of the logger hierarchy.\r\n        \"\"\"\r\n        self.root = rootnode\r\n        self.disable = 0\r\n        self.emittedNoHandlerWarning = False\r\n        self.loggerDict = {}\r\n        self.loggerClass = None\r\n        self.logRecordFactory = None\r\n    def getLogger(self, name):\r\n        \"\"\"\r\n        Get a logger with the specified name (channel name), creating it\r\n        if it doesn't yet exist. This name is a dot-separated hierarchical\r\n        name, such as \"a\", \"a.b\", \"a.b.c\" or similar.\r\n        If a PlaceHolder existed for the specified name [i.e. the logger\r\n        didn't exist but a child of it did], replace it with the created\r\n        logger and fix up the parent/child references which pointed to the\r\n        placeholder to now point to the logger.\r\n        \"\"\"\r\n        rv = None\r\n        if not isinstance(name, str):\r\n            raise TypeError('A logger name must be a string')\r\n        _acquireLock()\r\n        try:\r\n            if name in self.loggerDict:\r\n                rv = self.loggerDict[name]\r\n                if isinstance(rv, PlaceHolder):\r\n                    ph = rv\r\n                    rv = (self.loggerClass or _loggerClass)(name)\r\n                    rv.manager = self\r\n                    self.loggerDict[name] = rv\r\n                    self._fixupChildren(ph, rv)\r\n                    self._fixupParents(rv)\r\n            else:\r\n                rv = (self.loggerClass or _loggerClass)(name)\r\n                rv.manager = self\r\n                self.loggerDict[name] = rv\r\n                self._fixupParents(rv)\r\n        finally:\r\n            _releaseLock()\r\n        return rv\r\n    def setLoggerClass(self, klass):\r\n        \"\"\"\r\n        Set the class to be used when instantiating a logger with this Manager.\r\n        \"\"\"\r\n        if klass != Logger:\r\n            if not issubclass(klass, Logger):\r\n                raise TypeError(\"logger not derived from logging.Logger: \"\r\n                                + klass.__name__)\r\n        self.loggerClass = klass\r\n    def setLogRecordFactory(self, factory):\r\n        \"\"\"\r\n        Set the factory to be used when instantiating a log record with this\r\n        Manager.\r\n        \"\"\"\r\n        self.logRecordFactory = factory\r\n    def _fixupParents(self, alogger):\r\n        \"\"\"\r\n        Ensure that there are either loggers or placeholders all the way\r\n        from the specified logger to the root of the logger hierarchy.\r\n        \"\"\"\r\n        name = alogger.name\r\n        i = name.rfind(\".\")\r\n        rv = None\r\n        while (i > 0) and not rv:\r\n            substr = name[:i]\r\n            if substr not in self.loggerDict:\r\n                self.loggerDict[substr] = PlaceHolder(alogger)\r\n            else:\r\n                obj = self.loggerDict[substr]\r\n                if isinstance(obj, Logger):\r\n                    rv = obj\r\n                else:\r\n                    assert isinstance(obj, PlaceHolder)\r\n                    obj.append(alogger)\r\n            i = name.rfind(\".\", 0, i - 1)\r\n        if not rv:\r\n            rv = self.root\r\n        alogger.parent = rv\r\n    def _fixupChildren(self, ph, alogger):\r\n        \"\"\"\r\n        Ensure that children of the placeholder ph are connected to the\r\n        specified logger.\r\n        \"\"\"\r\n        name = alogger.name\r\n        namelen = len(name)\r\n        for c in ph.loggerMap.keys():\r\n            if c.parent.name[:namelen] != name:\r\n                alogger.parent = c.parent\r\n                c.parent = alogger\r\nclass Logger(Filterer):\r\n    \"\"\"\r\n    Instances of the Logger class represent a single logging channel. A\r\n    \"logging channel\" indicates an area of an application. Exactly how an\r\n    \"area\" is defined is up to the application developer. Since an\r\n    application can have any number of areas, logging channels are identified\r\n    by a unique string. Application areas can be nested (e.g. an area\r\n    of \"input processing\" might include sub-areas \"read CSV files\", \"read\r\n    XLS files\" and \"read Gnumeric files\"). To cater for this natural nesting,\r\n    channel names are organized into a namespace hierarchy where levels are\r\n    separated by periods, much like the Java or Python package namespace. So\r\n    in the instance given above, channel names might be \"input\" for the upper\r\n    level, and \"input.csv\", \"input.xls\" and \"input.gnu\" for the sub-levels.\r\n    There is no arbitrary limit to the depth of nesting.\r\n    \"\"\"\r\n    def __init__(self, name, level=NOTSET):\r\n        \"\"\"\r\n        Initialize the logger with a name and an optional level.\r\n        \"\"\"\r\n        Filterer.__init__(self)\r\n        self.name = name\r\n        self.level = _checkLevel(level)\r\n        self.parent = None\r\n        self.propagate = True\r\n        self.handlers = []\r\n        self.disabled = False\r\n    def setLevel(self, level):\r\n        \"\"\"\r\n        Set the logging level of this logger.  level must be an int or a str.\r\n        \"\"\"\r\n        self.level = _checkLevel(level)\r\n    def debug(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Log 'msg % args' with severity 'DEBUG'.\r\n        To pass exception information, use the keyword argument exc_info with\r\n        a true value, e.g.\r\n        logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=1)\r\n        \"\"\"\r\n        if self.isEnabledFor(DEBUG):\r\n            self._log(DEBUG, msg, args, **kwargs)\r\n    def info(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Log 'msg % args' with severity 'INFO'.\r\n        To pass exception information, use the keyword argument exc_info with\r\n        a true value, e.g.\r\n        logger.info(\"Houston, we have a %s\", \"interesting problem\", exc_info=1)\r\n        \"\"\"\r\n        if self.isEnabledFor(INFO):\r\n            self._log(INFO, msg, args, **kwargs)\r\n    def warning(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Log 'msg % args' with severity 'WARNING'.\r\n        To pass exception information, use the keyword argument exc_info with\r\n        a true value, e.g.\r\n        logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=1)\r\n        \"\"\"\r\n        if self.isEnabledFor(WARNING):\r\n            self._log(WARNING, msg, args, **kwargs)\r\n    def warn(self, msg, *args, **kwargs):\r\n        warnings.warn(\"The 'warn' method is deprecated, \"\r\n            \"use 'warning' instead\", DeprecationWarning, 2)\r\n        self.warning(msg, *args, **kwargs)\r\n    def error(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Log 'msg % args' with severity 'ERROR'.\r\n        To pass exception information, use the keyword argument exc_info with\r\n        a true value, e.g.\r\n        logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=1)\r\n        \"\"\"\r\n        if self.isEnabledFor(ERROR):\r\n            self._log(ERROR, msg, args, **kwargs)\r\n    def exception(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Convenience method for logging an ERROR with exception information.\r\n        \"\"\"\r\n        kwargs['exc_info'] = True\r\n        self.error(msg, *args, **kwargs)\r\n    def critical(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Log 'msg % args' with severity 'CRITICAL'.\r\n        To pass exception information, use the keyword argument exc_info with\r\n        a true value, e.g.\r\n        logger.critical(\"Houston, we have a %s\", \"major disaster\", exc_info=1)\r\n        \"\"\"\r\n        if self.isEnabledFor(CRITICAL):\r\n            self._log(CRITICAL, msg, args, **kwargs)\r\n    fatal = critical\r\n    def log(self, level, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Log 'msg % args' with the integer severity 'level'.\r\n        To pass exception information, use the keyword argument exc_info with\r\n        a true value, e.g.\r\n        logger.log(level, \"We have a %s\", \"mysterious problem\", exc_info=1)\r\n        \"\"\"\r\n        if not isinstance(level, int):\r\n            if raiseExceptions:\r\n                raise TypeError(\"level must be an integer\")\r\n            else:\r\n                return\r\n        if self.isEnabledFor(level):\r\n            self._log(level, msg, args, **kwargs)\r\n    def findCaller(self, stack_info=False):\r\n        \"\"\"\r\n        Find the stack frame of the caller so that we can note the source\r\n        file name, line number and function name.\r\n        \"\"\"\r\n        f = currentframe()\r\n        if f is not None:\r\n            f = f.f_back\r\n        rv = \"(unknown file)\", 0, \"(unknown function)\", None\r\n        while hasattr(f, \"f_code\"):\r\n            co = f.f_code\r\n            filename = os.path.normcase(co.co_filename)\r\n            if filename == _srcfile:\r\n                f = f.f_back\r\n                continue\r\n            sinfo = None\r\n            if stack_info:\r\n                sio = io.StringIO()\r\n                sio.write('Stack (most recent call last):\\n')\r\n                traceback.print_stack(f, file=sio)\r\n                sinfo = sio.getvalue()\r\n                if sinfo[-1] == '\\n':\r\n                    sinfo = sinfo[:-1]\r\n                sio.close()\r\n            rv = (co.co_filename, f.f_lineno, co.co_name, sinfo)\r\n            break\r\n        return rv\r\n    def makeRecord(self, name, level, fn, lno, msg, args, exc_info,\r\n                   func=None, extra=None, sinfo=None):\r\n        \"\"\"\r\n        A factory method which can be overridden in subclasses to create\r\n        specialized LogRecords.\r\n        \"\"\"\r\n        rv = _logRecordFactory(name, level, fn, lno, msg, args, exc_info, func,\r\n                             sinfo)\r\n        if extra is not None:\r\n            for key in extra:\r\n                if (key in [\"message\", \"asctime\"]) or (key in rv.__dict__):\r\n                    raise KeyError(\"Attempt to overwrite %r in LogRecord\" % key)\r\n                rv.__dict__[key] = extra[key]\r\n        return rv\r\n    def _log(self, level, msg, args, exc_info=None, extra=None, stack_info=False):\r\n        \"\"\"\r\n        Low-level logging routine which creates a LogRecord and then calls\r\n        all the handlers of this logger to handle the record.\r\n        \"\"\"\r\n        sinfo = None\r\n        if _srcfile:\r\n            try:\r\n                fn, lno, func, sinfo = self.findCaller(stack_info)\r\n            except ValueError: # pragma: no cover\r\n                fn, lno, func = \"(unknown file)\", 0, \"(unknown function)\"\r\n        else: # pragma: no cover\r\n            fn, lno, func = \"(unknown file)\", 0, \"(unknown function)\"\r\n        if exc_info:\r\n            if not isinstance(exc_info, tuple):\r\n                exc_info = sys.exc_info()\r\n        record = self.makeRecord(self.name, level, fn, lno, msg, args,\r\n                                 exc_info, func, extra, sinfo)\r\n        self.handle(record)\r\n    def handle(self, record):\r\n        \"\"\"\r\n        Call the handlers for the specified record.\r\n        This method is used for unpickled records received from a socket, as\r\n        well as those created locally. Logger-level filtering is applied.\r\n        \"\"\"\r\n        if (not self.disabled) and self.filter(record):\r\n            self.callHandlers(record)\r\n    def addHandler(self, hdlr):\r\n        \"\"\"\r\n        Add the specified handler to this logger.\r\n        \"\"\"\r\n        _acquireLock()\r\n        try:\r\n            if not (hdlr in self.handlers):\r\n                self.handlers.append(hdlr)\r\n        finally:\r\n            _releaseLock()\r\n    def removeHandler(self, hdlr):\r\n        \"\"\"\r\n        Remove the specified handler from this logger.\r\n        \"\"\"\r\n        _acquireLock()\r\n        try:\r\n            if hdlr in self.handlers:\r\n                self.handlers.remove(hdlr)\r\n        finally:\r\n            _releaseLock()\r\n    def hasHandlers(self):\r\n        \"\"\"\r\n        See if this logger has any handlers configured.\r\n        Loop through all handlers for this logger and its parents in the\r\n        logger hierarchy. Return True if a handler was found, else False.\r\n        Stop searching up the hierarchy whenever a logger with the \"propagate\"\r\n        attribute set to zero is found - that will be the last logger which\r\n        is checked for the existence of handlers.\r\n        \"\"\"\r\n        c = self\r\n        rv = False\r\n        while c:\r\n            if c.handlers:\r\n                rv = True\r\n                break\r\n            if not c.propagate:\r\n                break\r\n            else:\r\n                c = c.parent\r\n        return rv\r\n    def callHandlers(self, record):\r\n        \"\"\"\r\n        Pass a record to all relevant handlers.\r\n        Loop through all handlers for this logger and its parents in the\r\n        logger hierarchy. If no handler was found, output a one-off error\r\n        message to sys.stderr. Stop searching up the hierarchy whenever a\r\n        logger with the \"propagate\" attribute set to zero is found - that\r\n        will be the last logger whose handlers are called.\r\n        \"\"\"\r\n        c = self\r\n        found = 0\r\n        while c:\r\n            for hdlr in c.handlers:\r\n                found = found + 1\r\n                if record.levelno >= hdlr.level:\r\n                    hdlr.handle(record)\r\n            if not c.propagate:\r\n                c = None    #break out\r\n            else:\r\n                c = c.parent\r\n        if (found == 0):\r\n            if lastResort:\r\n                if record.levelno >= lastResort.level:\r\n                    lastResort.handle(record)\r\n            elif raiseExceptions and not self.manager.emittedNoHandlerWarning:\r\n                sys.stderr.write(\"No handlers could be found for logger\"\r\n                                 \" \\\"%s\\\"\\n\" % self.name)\r\n                self.manager.emittedNoHandlerWarning = True\r\n    def getEffectiveLevel(self):\r\n        \"\"\"\r\n        Get the effective level for this logger.\r\n        Loop through this logger and its parents in the logger hierarchy,\r\n        looking for a non-zero logging level. Return the first one found.\r\n        \"\"\"\r\n        logger = self\r\n        while logger:\r\n            if logger.level:\r\n                return logger.level\r\n            logger = logger.parent\r\n        return NOTSET\r\n    def isEnabledFor(self, level):\r\n        \"\"\"\r\n        Is this logger enabled for level 'level'?\r\n        \"\"\"\r\n        if self.manager.disable >= level:\r\n            return False\r\n        return level >= self.getEffectiveLevel()\r\n    def getChild(self, suffix):\r\n        \"\"\"\r\n        Get a logger which is a descendant to this one.\r\n        This is a convenience method, such that\r\n        logging.getLogger('abc').getChild('def.ghi')\r\n        is the same as\r\n        logging.getLogger('abc.def.ghi')\r\n        It's useful, for example, when the parent logger is named using\r\n        __name__ rather than a literal string.\r\n        \"\"\"\r\n        if self.root is not self:\r\n            suffix = '.'.join((self.name, suffix))\r\n        return self.manager.getLogger(suffix)\r\nclass RootLogger(Logger):\r\n    \"\"\"\r\n    A root logger is not that different to any other logger, except that\r\n    it must have a logging level and there is only one instance of it in\r\n    the hierarchy.\r\n    \"\"\"\r\n    def __init__(self, level):\r\n        \"\"\"\r\n        Initialize the logger with the name \"root\".\r\n        \"\"\"\r\n        Logger.__init__(self, \"root\", level)\r\n_loggerClass = Logger\r\nclass LoggerAdapter(object):\r\n    \"\"\"\r\n    An adapter for loggers which makes it easier to specify contextual\r\n    information in logging output.\r\n    \"\"\"\r\n    def __init__(self, logger, extra):\r\n        \"\"\"\r\n        Initialize the adapter with a logger and a dict-like object which\r\n        provides contextual information. This constructor signature allows\r\n        easy stacking of LoggerAdapters, if so desired.\r\n        You can effectively pass keyword arguments as shown in the\r\n        following example:\r\n        adapter = LoggerAdapter(someLogger, dict(p1=v1, p2=\"v2\"))\r\n        \"\"\"\r\n        self.logger = logger\r\n        self.extra = extra\r\n    def process(self, msg, kwargs):\r\n        \"\"\"\r\n        Process the logging message and keyword arguments passed in to\r\n        a logging call to insert contextual information. You can either\r\n        manipulate the message itself, the keyword args or both. Return\r\n        the message and kwargs modified (or not) to suit your needs.\r\n        Normally, you'll only need to override this one method in a\r\n        LoggerAdapter subclass for your specific needs.\r\n        \"\"\"\r\n        kwargs[\"extra\"] = self.extra\r\n        return msg, kwargs\r\n    def debug(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Delegate a debug call to the underlying logger.\r\n        \"\"\"\r\n        self.log(DEBUG, msg, *args, **kwargs)\r\n    def info(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Delegate an info call to the underlying logger.\r\n        \"\"\"\r\n        self.log(INFO, msg, *args, **kwargs)\r\n    def warning(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Delegate a warning call to the underlying logger.\r\n        \"\"\"\r\n        self.log(WARNING, msg, *args, **kwargs)\r\n    def warn(self, msg, *args, **kwargs):\r\n        warnings.warn(\"The 'warn' method is deprecated, \"\r\n            \"use 'warning' instead\", DeprecationWarning, 2)\r\n        self.warning(msg, *args, **kwargs)\r\n    def error(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Delegate an error call to the underlying logger.\r\n        \"\"\"\r\n        self.log(ERROR, msg, *args, **kwargs)\r\n    def exception(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Delegate an exception call to the underlying logger.\r\n        \"\"\"\r\n        kwargs[\"exc_info\"] = True\r\n        self.log(ERROR, msg, *args, **kwargs)\r\n    def critical(self, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Delegate a critical call to the underlying logger.\r\n        \"\"\"\r\n        self.log(CRITICAL, msg, *args, **kwargs)\r\n    def log(self, level, msg, *args, **kwargs):\r\n        \"\"\"\r\n        Delegate a log call to the underlying logger, after adding\r\n        contextual information from this adapter instance.\r\n        \"\"\"\r\n        if self.isEnabledFor(level):\r\n            msg, kwargs = self.process(msg, kwargs)\r\n            self.logger._log(level, msg, args, **kwargs)\r\n    def isEnabledFor(self, level):\r\n        \"\"\"\r\n        Is this logger enabled for level 'level'?\r\n        \"\"\"\r\n        if self.logger.manager.disable >= level:\r\n            return False\r\n        return level >= self.getEffectiveLevel()\r\n    def setLevel(self, level):\r\n        \"\"\"\r\n        Set the specified level on the underlying logger.\r\n        \"\"\"\r\n        self.logger.setLevel(level)\r\n    def getEffectiveLevel(self):\r\n        \"\"\"\r\n        Get the effective level for the underlying logger.\r\n        \"\"\"\r\n        return self.logger.getEffectiveLevel()\r\n    def hasHandlers(self):\r\n        \"\"\"\r\n        See if the underlying logger has any handlers.\r\n        \"\"\"\r\n        return self.logger.hasHandlers()\r\nroot = RootLogger(WARNING)\r\nLogger.root = root\r\nLogger.manager = Manager(Logger.root)\r\nBASIC_FORMAT = \"%(levelname)s:%(name)s:%(message)s\"\r\ndef basicConfig(**kwargs):\r\n    \"\"\"\r\n    Do basic configuration for the logging system.\r\n    This function does nothing if the root logger already has handlers\r\n    configured. It is a convenience method intended for use by simple scripts\r\n    to do one-shot configuration of the logging package.\r\n    The default behaviour is to create a StreamHandler which writes to\r\n    sys.stderr, set a formatter using the BASIC_FORMAT format string, and\r\n    add the handler to the root logger.\r\n    A number of optional keyword arguments may be specified, which can alter\r\n    the default behaviour.\r\n    filename  Specifies that a FileHandler be created, using the specified\r\n              filename, rather than a StreamHandler.\r\n    filemode  Specifies the mode to open the file, if filename is specified\r\n              (if filemode is unspecified, it defaults to 'a').\r\n    format    Use the specified format string for the handler.\r\n    datefmt   Use the specified date/time format.\r\n    style     If a format string is specified, use this to specify the\r\n              type of format string (possible values '%', '{', '$', for\r\n              %-formatting, :meth:`str.format` and :class:`string.Template`\r\n              - defaults to '%').\r\n    level     Set the root logger level to the specified level.\r\n    stream    Use the specified stream to initialize the StreamHandler. Note\r\n              that this argument is incompatible with 'filename' - if both\r\n              are present, 'stream' is ignored.\r\n    handlers  If specified, this should be an iterable of already created\r\n              handlers, which will be added to the root handler. Any handler\r\n              in the list which does not have a formatter assigned will be\r\n              assigned the formatter created in this function.\r\n    Note that you could specify a stream created using open(filename, mode)\r\n    rather than passing the filename and mode in. However, it should be\r\n    remembered that StreamHandler does not close its stream (since it may be\r\n    using sys.stdout or sys.stderr), whereas FileHandler closes its stream\r\n    when the handler is closed.\r\n    .. versionchanged:: 3.2\r\n       Added the ``style`` parameter.\r\n    .. versionchanged:: 3.3\r\n       Added the ``handlers`` parameter. A ``ValueError`` is now thrown for\r\n       incompatible arguments (e.g. ``handlers`` specified together with\r\n       ``filename``/``filemode``, or ``filename``/``filemode`` specified\r\n       together with ``stream``, or ``handlers`` specified together with\r\n       ``stream``.\r\n    \"\"\"\r\n    _acquireLock()\r\n    try:\r\n        if len(root.handlers) == 0:\r\n            handlers = kwargs.get(\"handlers\")\r\n            if handlers is None:\r\n                if \"stream\" in kwargs and \"filename\" in kwargs:\r\n                    raise ValueError(\"'stream' and 'filename' should not be \"\r\n                                     \"specified together\")\r\n            else:\r\n                if \"stream\" in kwargs or \"filename\" in kwargs:\r\n                    raise ValueError(\"'stream' or 'filename' should not be \"\r\n                                     \"specified together with 'handlers'\")\r\n            if handlers is None:\r\n                filename = kwargs.get(\"filename\")\r\n                if filename:\r\n                    mode = kwargs.get(\"filemode\", 'a')\r\n                    h = FileHandler(filename, mode)\r\n                else:\r\n                    stream = kwargs.get(\"stream\")\r\n                    h = StreamHandler(stream)\r\n                handlers = [h]\r\n            fs = kwargs.get(\"format\", BASIC_FORMAT)\r\n            dfs = kwargs.get(\"datefmt\", None)\r\n            style = kwargs.get(\"style\", '%')\r\n            fmt = Formatter(fs, dfs, style)\r\n            for h in handlers:\r\n                if h.formatter is None:\r\n                    h.setFormatter(fmt)\r\n                root.addHandler(h)\r\n            level = kwargs.get(\"level\")\r\n            if level is not None:\r\n                root.setLevel(level)\r\n    finally:\r\n        _releaseLock()\r\ndef getLogger(name=None):\r\n    \"\"\"\r\n    Return a logger with the specified name, creating it if necessary.\r\n    If no name is specified, return the root logger.\r\n    \"\"\"\r\n    if name:\r\n        return Logger.manager.getLogger(name)\r\n    else:\r\n        return root\r\ndef critical(msg, *args, **kwargs):\r\n    \"\"\"\r\n    Log a message with severity 'CRITICAL' on the root logger. If the logger\r\n    has no handlers, call basicConfig() to add a console handler with a\r\n    pre-defined format.\r\n    \"\"\"\r\n    if len(root.handlers) == 0:\r\n        basicConfig()\r\n    root.critical(msg, *args, **kwargs)\r\nfatal = critical\r\ndef error(msg, *args, **kwargs):\r\n    \"\"\"\r\n    Log a message with severity 'ERROR' on the root logger. If the logger has\r\n    no handlers, call basicConfig() to add a console handler with a pre-defined\r\n    format.\r\n    \"\"\"\r\n    if len(root.handlers) == 0:\r\n        basicConfig()\r\n    root.error(msg, *args, **kwargs)\r\ndef exception(msg, *args, **kwargs):\r\n    \"\"\"\r\n    Log a message with severity 'ERROR' on the root logger, with exception\r\n    information. If the logger has no handlers, basicConfig() is called to add\r\n    a console handler with a pre-defined format.\r\n    \"\"\"\r\n    kwargs['exc_info'] = True\r\n    error(msg, *args, **kwargs)\r\ndef warning(msg, *args, **kwargs):\r\n    \"\"\"\r\n    Log a message with severity 'WARNING' on the root logger. If the logger has\r\n    no handlers, call basicConfig() to add a console handler with a pre-defined\r\n    format.\r\n    \"\"\"\r\n    if len(root.handlers) == 0:\r\n        basicConfig()\r\n    root.warning(msg, *args, **kwargs)\r\ndef warn(msg, *args, **kwargs):\r\n    warnings.warn(\"The 'warn' function is deprecated, \"\r\n        \"use 'warning' instead\", DeprecationWarning, 2)\r\n    warning(msg, *args, **kwargs)\r\ndef info(msg, *args, **kwargs):\r\n    \"\"\"\r\n    Log a message with severity 'INFO' on the root logger. If the logger has\r\n    no handlers, call basicConfig() to add a console handler with a pre-defined\r\n    format.\r\n    \"\"\"\r\n    if len(root.handlers) == 0:\r\n        basicConfig()\r\n    root.info(msg, *args, **kwargs)\r\ndef debug(msg, *args, **kwargs):\r\n    \"\"\"\r\n    Log a message with severity 'DEBUG' on the root logger. If the logger has\r\n    no handlers, call basicConfig() to add a console handler with a pre-defined\r\n    format.\r\n    \"\"\"\r\n    if len(root.handlers) == 0:\r\n        basicConfig()\r\n    root.debug(msg, *args, **kwargs)\r\ndef log(level, msg, *args, **kwargs):\r\n    \"\"\"\r\n    Log 'msg % args' with the integer severity 'level' on the root logger. If\r\n    the logger has no handlers, call basicConfig() to add a console handler\r\n    with a pre-defined format.\r\n    \"\"\"\r\n    if len(root.handlers) == 0:\r\n        basicConfig()\r\n    root.log(level, msg, *args, **kwargs)\r\ndef disable(level):\r\n    \"\"\"\r\n    Disable all logging calls of severity 'level' and below.\r\n    \"\"\"\r\n    root.manager.disable = level\r\ndef shutdown(handlerList=_handlerList):\r\n    \"\"\"\r\n    Perform any cleanup actions in the logging system (e.g. flushing\r\n    buffers).\r\n    Should be called at application exit.\r\n    \"\"\"\r\n    for wr in reversed(handlerList[:]):\r\n        try:\r\n            h = wr()\r\n            if h:\r\n                try:\r\n                    h.acquire()\r\n                    h.flush()\r\n                    h.close()\r\n                except (IOError, ValueError):\r\n                    pass\r\n                finally:\r\n                    h.release()\r\n        except:\r\n            if raiseExceptions:\r\n                raise\r\nimport atexit\r\natexit.register(shutdown)\r\nclass NullHandler(Handler):\r\n    \"\"\"\r\n    This handler does nothing. It's intended to be used to avoid the\r\n    \"No handlers could be found for logger XXX\" one-off warning. This is\r\n    important for library code, which may contain code to log events. If a user\r\n    of the library does not configure logging, the one-off warning might be\r\n    produced; to avoid this, the library developer simply needs to instantiate\r\n    a NullHandler and add it to the top-level logger of the library module or\r\n    package.\r\n    \"\"\"\r\n    def handle(self, record):\r\n        \"\"\"Stub.\"\"\"\r\n    def emit(self, record):\r\n        \"\"\"Stub.\"\"\"\r\n    def createLock(self):\r\n        self.lock = None\r\n_warnings_showwarning = None\r\ndef _showwarning(message, category, filename, lineno, file=None, line=None):\r\n    \"\"\"\r\n    Implementation of showwarnings which redirects to logging, which will first\r\n    check to see if the file parameter is None. If a file is specified, it will\r\n    delegate to the original warnings implementation of showwarning. Otherwise,\r\n    it will call warnings.formatwarning and will log the resulting string to a\r\n    warnings logger named \"py.warnings\" with level logging.WARNING.\r\n    \"\"\"\r\n    if file is not None:\r\n        if _warnings_showwarning is not None:\r\n            _warnings_showwarning(message, category, filename, lineno, file, line)\r\n    else:\r\n        s = warnings.formatwarning(message, category, filename, lineno, line)\r\n        logger = getLogger(\"py.warnings\")\r\n        if not logger.handlers:\r\n            logger.addHandler(NullHandler())\r\n        logger.warning(\"%s\", s)\r\ndef captureWarnings(capture):\r\n    \"\"\"\r\n    If capture is true, redirect all warnings to the logging package.\r\n    If capture is False, ensure that warnings are not redirected to logging\r\n    but to their original destinations.\r\n    \"\"\"\r\n    global _warnings_showwarning\r\n    if capture:\r\n        if _warnings_showwarning is None:\r\n            _warnings_showwarning = warnings.showwarning\r\n            warnings.showwarning = _showwarning\r\n    else:\r\n        if _warnings_showwarning is not None:\r\n            warnings.showwarning = _warnings_showwarning\r\n            _warnings_showwarning = None\r\n", "/Lib/html/entities.py": "\"\"\"HTML character entity references.\"\"\"\nname2codepoint = {\n    'AElig':    0x00c6, # latin capital letter AE = latin capital ligature AE, U+00C6 ISOlat1\n    'Aacute':   0x00c1, # latin capital letter A with acute, U+00C1 ISOlat1\n    'Acirc':    0x00c2, # latin capital letter A with circumflex, U+00C2 ISOlat1\n    'Agrave':   0x00c0, # latin capital letter A with grave = latin capital letter A grave, U+00C0 ISOlat1\n    'Alpha':    0x0391, # greek capital letter alpha, U+0391\n    'Aring':    0x00c5, # latin capital letter A with ring above = latin capital letter A ring, U+00C5 ISOlat1\n    'Atilde':   0x00c3, # latin capital letter A with tilde, U+00C3 ISOlat1\n    'Auml':     0x00c4, # latin capital letter A with diaeresis, U+00C4 ISOlat1\n    'Beta':     0x0392, # greek capital letter beta, U+0392\n    'Ccedil':   0x00c7, # latin capital letter C with cedilla, U+00C7 ISOlat1\n    'Chi':      0x03a7, # greek capital letter chi, U+03A7\n    'Dagger':   0x2021, # double dagger, U+2021 ISOpub\n    'Delta':    0x0394, # greek capital letter delta, U+0394 ISOgrk3\n    'ETH':      0x00d0, # latin capital letter ETH, U+00D0 ISOlat1\n    'Eacute':   0x00c9, # latin capital letter E with acute, U+00C9 ISOlat1\n    'Ecirc':    0x00ca, # latin capital letter E with circumflex, U+00CA ISOlat1\n    'Egrave':   0x00c8, # latin capital letter E with grave, U+00C8 ISOlat1\n    'Epsilon':  0x0395, # greek capital letter epsilon, U+0395\n    'Eta':      0x0397, # greek capital letter eta, U+0397\n    'Euml':     0x00cb, # latin capital letter E with diaeresis, U+00CB ISOlat1\n    'Gamma':    0x0393, # greek capital letter gamma, U+0393 ISOgrk3\n    'Iacute':   0x00cd, # latin capital letter I with acute, U+00CD ISOlat1\n    'Icirc':    0x00ce, # latin capital letter I with circumflex, U+00CE ISOlat1\n    'Igrave':   0x00cc, # latin capital letter I with grave, U+00CC ISOlat1\n    'Iota':     0x0399, # greek capital letter iota, U+0399\n    'Iuml':     0x00cf, # latin capital letter I with diaeresis, U+00CF ISOlat1\n    'Kappa':    0x039a, # greek capital letter kappa, U+039A\n    'Lambda':   0x039b, # greek capital letter lambda, U+039B ISOgrk3\n    'Mu':       0x039c, # greek capital letter mu, U+039C\n    'Ntilde':   0x00d1, # latin capital letter N with tilde, U+00D1 ISOlat1\n    'Nu':       0x039d, # greek capital letter nu, U+039D\n    'OElig':    0x0152, # latin capital ligature OE, U+0152 ISOlat2\n    'Oacute':   0x00d3, # latin capital letter O with acute, U+00D3 ISOlat1\n    'Ocirc':    0x00d4, # latin capital letter O with circumflex, U+00D4 ISOlat1\n    'Ograve':   0x00d2, # latin capital letter O with grave, U+00D2 ISOlat1\n    'Omega':    0x03a9, # greek capital letter omega, U+03A9 ISOgrk3\n    'Omicron':  0x039f, # greek capital letter omicron, U+039F\n    'Oslash':   0x00d8, # latin capital letter O with stroke = latin capital letter O slash, U+00D8 ISOlat1\n    'Otilde':   0x00d5, # latin capital letter O with tilde, U+00D5 ISOlat1\n    'Ouml':     0x00d6, # latin capital letter O with diaeresis, U+00D6 ISOlat1\n    'Phi':      0x03a6, # greek capital letter phi, U+03A6 ISOgrk3\n    'Pi':       0x03a0, # greek capital letter pi, U+03A0 ISOgrk3\n    'Prime':    0x2033, # double prime = seconds = inches, U+2033 ISOtech\n    'Psi':      0x03a8, # greek capital letter psi, U+03A8 ISOgrk3\n    'Rho':      0x03a1, # greek capital letter rho, U+03A1\n    'Scaron':   0x0160, # latin capital letter S with caron, U+0160 ISOlat2\n    'Sigma':    0x03a3, # greek capital letter sigma, U+03A3 ISOgrk3\n    'THORN':    0x00de, # latin capital letter THORN, U+00DE ISOlat1\n    'Tau':      0x03a4, # greek capital letter tau, U+03A4\n    'Theta':    0x0398, # greek capital letter theta, U+0398 ISOgrk3\n    'Uacute':   0x00da, # latin capital letter U with acute, U+00DA ISOlat1\n    'Ucirc':    0x00db, # latin capital letter U with circumflex, U+00DB ISOlat1\n    'Ugrave':   0x00d9, # latin capital letter U with grave, U+00D9 ISOlat1\n    'Upsilon':  0x03a5, # greek capital letter upsilon, U+03A5 ISOgrk3\n    'Uuml':     0x00dc, # latin capital letter U with diaeresis, U+00DC ISOlat1\n    'Xi':       0x039e, # greek capital letter xi, U+039E ISOgrk3\n    'Yacute':   0x00dd, # latin capital letter Y with acute, U+00DD ISOlat1\n    'Yuml':     0x0178, # latin capital letter Y with diaeresis, U+0178 ISOlat2\n    'Zeta':     0x0396, # greek capital letter zeta, U+0396\n    'aacute':   0x00e1, # latin small letter a with acute, U+00E1 ISOlat1\n    'acirc':    0x00e2, # latin small letter a with circumflex, U+00E2 ISOlat1\n    'acute':    0x00b4, # acute accent = spacing acute, U+00B4 ISOdia\n    'aelig':    0x00e6, # latin small letter ae = latin small ligature ae, U+00E6 ISOlat1\n    'agrave':   0x00e0, # latin small letter a with grave = latin small letter a grave, U+00E0 ISOlat1\n    'alefsym':  0x2135, # alef symbol = first transfinite cardinal, U+2135 NEW\n    'alpha':    0x03b1, # greek small letter alpha, U+03B1 ISOgrk3\n    'amp':      0x0026, # ampersand, U+0026 ISOnum\n    'and':      0x2227, # logical and = wedge, U+2227 ISOtech\n    'ang':      0x2220, # angle, U+2220 ISOamso\n    'aring':    0x00e5, # latin small letter a with ring above = latin small letter a ring, U+00E5 ISOlat1\n    'asymp':    0x2248, # almost equal to = asymptotic to, U+2248 ISOamsr\n    'atilde':   0x00e3, # latin small letter a with tilde, U+00E3 ISOlat1\n    'auml':     0x00e4, # latin small letter a with diaeresis, U+00E4 ISOlat1\n    'bdquo':    0x201e, # double low-9 quotation mark, U+201E NEW\n    'beta':     0x03b2, # greek small letter beta, U+03B2 ISOgrk3\n    'brvbar':   0x00a6, # broken bar = broken vertical bar, U+00A6 ISOnum\n    'bull':     0x2022, # bullet = black small circle, U+2022 ISOpub\n    'cap':      0x2229, # intersection = cap, U+2229 ISOtech\n    'ccedil':   0x00e7, # latin small letter c with cedilla, U+00E7 ISOlat1\n    'cedil':    0x00b8, # cedilla = spacing cedilla, U+00B8 ISOdia\n    'cent':     0x00a2, # cent sign, U+00A2 ISOnum\n    'chi':      0x03c7, # greek small letter chi, U+03C7 ISOgrk3\n    'circ':     0x02c6, # modifier letter circumflex accent, U+02C6 ISOpub\n    'clubs':    0x2663, # black club suit = shamrock, U+2663 ISOpub\n    'cong':     0x2245, # approximately equal to, U+2245 ISOtech\n    'copy':     0x00a9, # copyright sign, U+00A9 ISOnum\n    'crarr':    0x21b5, # downwards arrow with corner leftwards = carriage return, U+21B5 NEW\n    'cup':      0x222a, # union = cup, U+222A ISOtech\n    'curren':   0x00a4, # currency sign, U+00A4 ISOnum\n    'dArr':     0x21d3, # downwards double arrow, U+21D3 ISOamsa\n    'dagger':   0x2020, # dagger, U+2020 ISOpub\n    'darr':     0x2193, # downwards arrow, U+2193 ISOnum\n    'deg':      0x00b0, # degree sign, U+00B0 ISOnum\n    'delta':    0x03b4, # greek small letter delta, U+03B4 ISOgrk3\n    'diams':    0x2666, # black diamond suit, U+2666 ISOpub\n    'divide':   0x00f7, # division sign, U+00F7 ISOnum\n    'eacute':   0x00e9, # latin small letter e with acute, U+00E9 ISOlat1\n    'ecirc':    0x00ea, # latin small letter e with circumflex, U+00EA ISOlat1\n    'egrave':   0x00e8, # latin small letter e with grave, U+00E8 ISOlat1\n    'empty':    0x2205, # empty set = null set = diameter, U+2205 ISOamso\n    'emsp':     0x2003, # em space, U+2003 ISOpub\n    'ensp':     0x2002, # en space, U+2002 ISOpub\n    'epsilon':  0x03b5, # greek small letter epsilon, U+03B5 ISOgrk3\n    'equiv':    0x2261, # identical to, U+2261 ISOtech\n    'eta':      0x03b7, # greek small letter eta, U+03B7 ISOgrk3\n    'eth':      0x00f0, # latin small letter eth, U+00F0 ISOlat1\n    'euml':     0x00eb, # latin small letter e with diaeresis, U+00EB ISOlat1\n    'euro':     0x20ac, # euro sign, U+20AC NEW\n    'exist':    0x2203, # there exists, U+2203 ISOtech\n    'fnof':     0x0192, # latin small f with hook = function = florin, U+0192 ISOtech\n    'forall':   0x2200, # for all, U+2200 ISOtech\n    'frac12':   0x00bd, # vulgar fraction one half = fraction one half, U+00BD ISOnum\n    'frac14':   0x00bc, # vulgar fraction one quarter = fraction one quarter, U+00BC ISOnum\n    'frac34':   0x00be, # vulgar fraction three quarters = fraction three quarters, U+00BE ISOnum\n    'frasl':    0x2044, # fraction slash, U+2044 NEW\n    'gamma':    0x03b3, # greek small letter gamma, U+03B3 ISOgrk3\n    'ge':       0x2265, # greater-than or equal to, U+2265 ISOtech\n    'gt':       0x003e, # greater-than sign, U+003E ISOnum\n    'hArr':     0x21d4, # left right double arrow, U+21D4 ISOamsa\n    'harr':     0x2194, # left right arrow, U+2194 ISOamsa\n    'hearts':   0x2665, # black heart suit = valentine, U+2665 ISOpub\n    'hellip':   0x2026, # horizontal ellipsis = three dot leader, U+2026 ISOpub\n    'iacute':   0x00ed, # latin small letter i with acute, U+00ED ISOlat1\n    'icirc':    0x00ee, # latin small letter i with circumflex, U+00EE ISOlat1\n    'iexcl':    0x00a1, # inverted exclamation mark, U+00A1 ISOnum\n    'igrave':   0x00ec, # latin small letter i with grave, U+00EC ISOlat1\n    'image':    0x2111, # blackletter capital I = imaginary part, U+2111 ISOamso\n    'infin':    0x221e, # infinity, U+221E ISOtech\n    'int':      0x222b, # integral, U+222B ISOtech\n    'iota':     0x03b9, # greek small letter iota, U+03B9 ISOgrk3\n    'iquest':   0x00bf, # inverted question mark = turned question mark, U+00BF ISOnum\n    'isin':     0x2208, # element of, U+2208 ISOtech\n    'iuml':     0x00ef, # latin small letter i with diaeresis, U+00EF ISOlat1\n    'kappa':    0x03ba, # greek small letter kappa, U+03BA ISOgrk3\n    'lArr':     0x21d0, # leftwards double arrow, U+21D0 ISOtech\n    'lambda':   0x03bb, # greek small letter lambda, U+03BB ISOgrk3\n    'lang':     0x2329, # left-pointing angle bracket = bra, U+2329 ISOtech\n    'laquo':    0x00ab, # left-pointing double angle quotation mark = left pointing guillemet, U+00AB ISOnum\n    'larr':     0x2190, # leftwards arrow, U+2190 ISOnum\n    'lceil':    0x2308, # left ceiling = apl upstile, U+2308 ISOamsc\n    'ldquo':    0x201c, # left double quotation mark, U+201C ISOnum\n    'le':       0x2264, # less-than or equal to, U+2264 ISOtech\n    'lfloor':   0x230a, # left floor = apl downstile, U+230A ISOamsc\n    'lowast':   0x2217, # asterisk operator, U+2217 ISOtech\n    'loz':      0x25ca, # lozenge, U+25CA ISOpub\n    'lrm':      0x200e, # left-to-right mark, U+200E NEW RFC 2070\n    'lsaquo':   0x2039, # single left-pointing angle quotation mark, U+2039 ISO proposed\n    'lsquo':    0x2018, # left single quotation mark, U+2018 ISOnum\n    'lt':       0x003c, # less-than sign, U+003C ISOnum\n    'macr':     0x00af, # macron = spacing macron = overline = APL overbar, U+00AF ISOdia\n    'mdash':    0x2014, # em dash, U+2014 ISOpub\n    'micro':    0x00b5, # micro sign, U+00B5 ISOnum\n    'middot':   0x00b7, # middle dot = Georgian comma = Greek middle dot, U+00B7 ISOnum\n    'minus':    0x2212, # minus sign, U+2212 ISOtech\n    'mu':       0x03bc, # greek small letter mu, U+03BC ISOgrk3\n    'nabla':    0x2207, # nabla = backward difference, U+2207 ISOtech\n    'nbsp':     0x00a0, # no-break space = non-breaking space, U+00A0 ISOnum\n    'ndash':    0x2013, # en dash, U+2013 ISOpub\n    'ne':       0x2260, # not equal to, U+2260 ISOtech\n    'ni':       0x220b, # contains as member, U+220B ISOtech\n    'not':      0x00ac, # not sign, U+00AC ISOnum\n    'notin':    0x2209, # not an element of, U+2209 ISOtech\n    'nsub':     0x2284, # not a subset of, U+2284 ISOamsn\n    'ntilde':   0x00f1, # latin small letter n with tilde, U+00F1 ISOlat1\n    'nu':       0x03bd, # greek small letter nu, U+03BD ISOgrk3\n    'oacute':   0x00f3, # latin small letter o with acute, U+00F3 ISOlat1\n    'ocirc':    0x00f4, # latin small letter o with circumflex, U+00F4 ISOlat1\n    'oelig':    0x0153, # latin small ligature oe, U+0153 ISOlat2\n    'ograve':   0x00f2, # latin small letter o with grave, U+00F2 ISOlat1\n    'oline':    0x203e, # overline = spacing overscore, U+203E NEW\n    'omega':    0x03c9, # greek small letter omega, U+03C9 ISOgrk3\n    'omicron':  0x03bf, # greek small letter omicron, U+03BF NEW\n    'oplus':    0x2295, # circled plus = direct sum, U+2295 ISOamsb\n    'or':       0x2228, # logical or = vee, U+2228 ISOtech\n    'ordf':     0x00aa, # feminine ordinal indicator, U+00AA ISOnum\n    'ordm':     0x00ba, # masculine ordinal indicator, U+00BA ISOnum\n    'oslash':   0x00f8, # latin small letter o with stroke, = latin small letter o slash, U+00F8 ISOlat1\n    'otilde':   0x00f5, # latin small letter o with tilde, U+00F5 ISOlat1\n    'otimes':   0x2297, # circled times = vector product, U+2297 ISOamsb\n    'ouml':     0x00f6, # latin small letter o with diaeresis, U+00F6 ISOlat1\n    'para':     0x00b6, # pilcrow sign = paragraph sign, U+00B6 ISOnum\n    'part':     0x2202, # partial differential, U+2202 ISOtech\n    'permil':   0x2030, # per mille sign, U+2030 ISOtech\n    'perp':     0x22a5, # up tack = orthogonal to = perpendicular, U+22A5 ISOtech\n    'phi':      0x03c6, # greek small letter phi, U+03C6 ISOgrk3\n    'pi':       0x03c0, # greek small letter pi, U+03C0 ISOgrk3\n    'piv':      0x03d6, # greek pi symbol, U+03D6 ISOgrk3\n    'plusmn':   0x00b1, # plus-minus sign = plus-or-minus sign, U+00B1 ISOnum\n    'pound':    0x00a3, # pound sign, U+00A3 ISOnum\n    'prime':    0x2032, # prime = minutes = feet, U+2032 ISOtech\n    'prod':     0x220f, # n-ary product = product sign, U+220F ISOamsb\n    'prop':     0x221d, # proportional to, U+221D ISOtech\n    'psi':      0x03c8, # greek small letter psi, U+03C8 ISOgrk3\n    'quot':     0x0022, # quotation mark = APL quote, U+0022 ISOnum\n    'rArr':     0x21d2, # rightwards double arrow, U+21D2 ISOtech\n    'radic':    0x221a, # square root = radical sign, U+221A ISOtech\n    'rang':     0x232a, # right-pointing angle bracket = ket, U+232A ISOtech\n    'raquo':    0x00bb, # right-pointing double angle quotation mark = right pointing guillemet, U+00BB ISOnum\n    'rarr':     0x2192, # rightwards arrow, U+2192 ISOnum\n    'rceil':    0x2309, # right ceiling, U+2309 ISOamsc\n    'rdquo':    0x201d, # right double quotation mark, U+201D ISOnum\n    'real':     0x211c, # blackletter capital R = real part symbol, U+211C ISOamso\n    'reg':      0x00ae, # registered sign = registered trade mark sign, U+00AE ISOnum\n    'rfloor':   0x230b, # right floor, U+230B ISOamsc\n    'rho':      0x03c1, # greek small letter rho, U+03C1 ISOgrk3\n    'rlm':      0x200f, # right-to-left mark, U+200F NEW RFC 2070\n    'rsaquo':   0x203a, # single right-pointing angle quotation mark, U+203A ISO proposed\n    'rsquo':    0x2019, # right single quotation mark, U+2019 ISOnum\n    'sbquo':    0x201a, # single low-9 quotation mark, U+201A NEW\n    'scaron':   0x0161, # latin small letter s with caron, U+0161 ISOlat2\n    'sdot':     0x22c5, # dot operator, U+22C5 ISOamsb\n    'sect':     0x00a7, # section sign, U+00A7 ISOnum\n    'shy':      0x00ad, # soft hyphen = discretionary hyphen, U+00AD ISOnum\n    'sigma':    0x03c3, # greek small letter sigma, U+03C3 ISOgrk3\n    'sigmaf':   0x03c2, # greek small letter final sigma, U+03C2 ISOgrk3\n    'sim':      0x223c, # tilde operator = varies with = similar to, U+223C ISOtech\n    'spades':   0x2660, # black spade suit, U+2660 ISOpub\n    'sub':      0x2282, # subset of, U+2282 ISOtech\n    'sube':     0x2286, # subset of or equal to, U+2286 ISOtech\n    'sum':      0x2211, # n-ary sumation, U+2211 ISOamsb\n    'sup':      0x2283, # superset of, U+2283 ISOtech\n    'sup1':     0x00b9, # superscript one = superscript digit one, U+00B9 ISOnum\n    'sup2':     0x00b2, # superscript two = superscript digit two = squared, U+00B2 ISOnum\n    'sup3':     0x00b3, # superscript three = superscript digit three = cubed, U+00B3 ISOnum\n    'supe':     0x2287, # superset of or equal to, U+2287 ISOtech\n    'szlig':    0x00df, # latin small letter sharp s = ess-zed, U+00DF ISOlat1\n    'tau':      0x03c4, # greek small letter tau, U+03C4 ISOgrk3\n    'there4':   0x2234, # therefore, U+2234 ISOtech\n    'theta':    0x03b8, # greek small letter theta, U+03B8 ISOgrk3\n    'thetasym': 0x03d1, # greek small letter theta symbol, U+03D1 NEW\n    'thinsp':   0x2009, # thin space, U+2009 ISOpub\n    'thorn':    0x00fe, # latin small letter thorn with, U+00FE ISOlat1\n    'tilde':    0x02dc, # small tilde, U+02DC ISOdia\n    'times':    0x00d7, # multiplication sign, U+00D7 ISOnum\n    'trade':    0x2122, # trade mark sign, U+2122 ISOnum\n    'uArr':     0x21d1, # upwards double arrow, U+21D1 ISOamsa\n    'uacute':   0x00fa, # latin small letter u with acute, U+00FA ISOlat1\n    'uarr':     0x2191, # upwards arrow, U+2191 ISOnum\n    'ucirc':    0x00fb, # latin small letter u with circumflex, U+00FB ISOlat1\n    'ugrave':   0x00f9, # latin small letter u with grave, U+00F9 ISOlat1\n    'uml':      0x00a8, # diaeresis = spacing diaeresis, U+00A8 ISOdia\n    'upsih':    0x03d2, # greek upsilon with hook symbol, U+03D2 NEW\n    'upsilon':  0x03c5, # greek small letter upsilon, U+03C5 ISOgrk3\n    'uuml':     0x00fc, # latin small letter u with diaeresis, U+00FC ISOlat1\n    'weierp':   0x2118, # script capital P = power set = Weierstrass p, U+2118 ISOamso\n    'xi':       0x03be, # greek small letter xi, U+03BE ISOgrk3\n    'yacute':   0x00fd, # latin small letter y with acute, U+00FD ISOlat1\n    'yen':      0x00a5, # yen sign = yuan sign, U+00A5 ISOnum\n    'yuml':     0x00ff, # latin small letter y with diaeresis, U+00FF ISOlat1\n    'zeta':     0x03b6, # greek small letter zeta, U+03B6 ISOgrk3\n    'zwj':      0x200d, # zero width joiner, U+200D NEW RFC 2070\n    'zwnj':     0x200c, # zero width non-joiner, U+200C NEW RFC 2070\n}\nhtml5 = {\n    'Aacute': '\\xc1',\n    'aacute': '\\xe1',\n    'Aacute;': '\\xc1',\n    'aacute;': '\\xe1',\n    'Abreve;': '\\u0102',\n    'abreve;': '\\u0103',\n    'ac;': '\\u223e',\n    'acd;': '\\u223f',\n    'acE;': '\\u223e\\u0333',\n    'Acirc': '\\xc2',\n    'acirc': '\\xe2',\n    'Acirc;': '\\xc2',\n    'acirc;': '\\xe2',\n    'acute': '\\xb4',\n    'acute;': '\\xb4',\n    'Acy;': '\\u0410',\n    'acy;': '\\u0430',\n    'AElig': '\\xc6',\n    'aelig': '\\xe6',\n    'AElig;': '\\xc6',\n    'aelig;': '\\xe6',\n    'af;': '\\u2061',\n    'Afr;': '\\U0001d504',\n    'afr;': '\\U0001d51e',\n    'Agrave': '\\xc0',\n    'agrave': '\\xe0',\n    'Agrave;': '\\xc0',\n    'agrave;': '\\xe0',\n    'alefsym;': '\\u2135',\n    'aleph;': '\\u2135',\n    'Alpha;': '\\u0391',\n    'alpha;': '\\u03b1',\n    'Amacr;': '\\u0100',\n    'amacr;': '\\u0101',\n    'amalg;': '\\u2a3f',\n    'AMP': '&',\n    'amp': '&',\n    'AMP;': '&',\n    'amp;': '&',\n    'And;': '\\u2a53',\n    'and;': '\\u2227',\n    'andand;': '\\u2a55',\n    'andd;': '\\u2a5c',\n    'andslope;': '\\u2a58',\n    'andv;': '\\u2a5a',\n    'ang;': '\\u2220',\n    'ange;': '\\u29a4',\n    'angle;': '\\u2220',\n    'angmsd;': '\\u2221',\n    'angmsdaa;': '\\u29a8',\n    'angmsdab;': '\\u29a9',\n    'angmsdac;': '\\u29aa',\n    'angmsdad;': '\\u29ab',\n    'angmsdae;': '\\u29ac',\n    'angmsdaf;': '\\u29ad',\n    'angmsdag;': '\\u29ae',\n    'angmsdah;': '\\u29af',\n    'angrt;': '\\u221f',\n    'angrtvb;': '\\u22be',\n    'angrtvbd;': '\\u299d',\n    'angsph;': '\\u2222',\n    'angst;': '\\xc5',\n    'angzarr;': '\\u237c',\n    'Aogon;': '\\u0104',\n    'aogon;': '\\u0105',\n    'Aopf;': '\\U0001d538',\n    'aopf;': '\\U0001d552',\n    'ap;': '\\u2248',\n    'apacir;': '\\u2a6f',\n    'apE;': '\\u2a70',\n    'ape;': '\\u224a',\n    'apid;': '\\u224b',\n    'apos;': \"'\",\n    'ApplyFunction;': '\\u2061',\n    'approx;': '\\u2248',\n    'approxeq;': '\\u224a',\n    'Aring': '\\xc5',\n    'aring': '\\xe5',\n    'Aring;': '\\xc5',\n    'aring;': '\\xe5',\n    'Ascr;': '\\U0001d49c',\n    'ascr;': '\\U0001d4b6',\n    'Assign;': '\\u2254',\n    'ast;': '*',\n    'asymp;': '\\u2248',\n    'asympeq;': '\\u224d',\n    'Atilde': '\\xc3',\n    'atilde': '\\xe3',\n    'Atilde;': '\\xc3',\n    'atilde;': '\\xe3',\n    'Auml': '\\xc4',\n    'auml': '\\xe4',\n    'Auml;': '\\xc4',\n    'auml;': '\\xe4',\n    'awconint;': '\\u2233',\n    'awint;': '\\u2a11',\n    'backcong;': '\\u224c',\n    'backepsilon;': '\\u03f6',\n    'backprime;': '\\u2035',\n    'backsim;': '\\u223d',\n    'backsimeq;': '\\u22cd',\n    'Backslash;': '\\u2216',\n    'Barv;': '\\u2ae7',\n    'barvee;': '\\u22bd',\n    'Barwed;': '\\u2306',\n    'barwed;': '\\u2305',\n    'barwedge;': '\\u2305',\n    'bbrk;': '\\u23b5',\n    'bbrktbrk;': '\\u23b6',\n    'bcong;': '\\u224c',\n    'Bcy;': '\\u0411',\n    'bcy;': '\\u0431',\n    'bdquo;': '\\u201e',\n    'becaus;': '\\u2235',\n    'Because;': '\\u2235',\n    'because;': '\\u2235',\n    'bemptyv;': '\\u29b0',\n    'bepsi;': '\\u03f6',\n    'bernou;': '\\u212c',\n    'Bernoullis;': '\\u212c',\n    'Beta;': '\\u0392',\n    'beta;': '\\u03b2',\n    'beth;': '\\u2136',\n    'between;': '\\u226c',\n    'Bfr;': '\\U0001d505',\n    'bfr;': '\\U0001d51f',\n    'bigcap;': '\\u22c2',\n    'bigcirc;': '\\u25ef',\n    'bigcup;': '\\u22c3',\n    'bigodot;': '\\u2a00',\n    'bigoplus;': '\\u2a01',\n    'bigotimes;': '\\u2a02',\n    'bigsqcup;': '\\u2a06',\n    'bigstar;': '\\u2605',\n    'bigtriangledown;': '\\u25bd',\n    'bigtriangleup;': '\\u25b3',\n    'biguplus;': '\\u2a04',\n    'bigvee;': '\\u22c1',\n    'bigwedge;': '\\u22c0',\n    'bkarow;': '\\u290d',\n    'blacklozenge;': '\\u29eb',\n    'blacksquare;': '\\u25aa',\n    'blacktriangle;': '\\u25b4',\n    'blacktriangledown;': '\\u25be',\n    'blacktriangleleft;': '\\u25c2',\n    'blacktriangleright;': '\\u25b8',\n    'blank;': '\\u2423',\n    'blk12;': '\\u2592',\n    'blk14;': '\\u2591',\n    'blk34;': '\\u2593',\n    'block;': '\\u2588',\n    'bne;': '=\\u20e5',\n    'bnequiv;': '\\u2261\\u20e5',\n    'bNot;': '\\u2aed',\n    'bnot;': '\\u2310',\n    'Bopf;': '\\U0001d539',\n    'bopf;': '\\U0001d553',\n    'bot;': '\\u22a5',\n    'bottom;': '\\u22a5',\n    'bowtie;': '\\u22c8',\n    'boxbox;': '\\u29c9',\n    'boxDL;': '\\u2557',\n    'boxDl;': '\\u2556',\n    'boxdL;': '\\u2555',\n    'boxdl;': '\\u2510',\n    'boxDR;': '\\u2554',\n    'boxDr;': '\\u2553',\n    'boxdR;': '\\u2552',\n    'boxdr;': '\\u250c',\n    'boxH;': '\\u2550',\n    'boxh;': '\\u2500',\n    'boxHD;': '\\u2566',\n    'boxHd;': '\\u2564',\n    'boxhD;': '\\u2565',\n    'boxhd;': '\\u252c',\n    'boxHU;': '\\u2569',\n    'boxHu;': '\\u2567',\n    'boxhU;': '\\u2568',\n    'boxhu;': '\\u2534',\n    'boxminus;': '\\u229f',\n    'boxplus;': '\\u229e',\n    'boxtimes;': '\\u22a0',\n    'boxUL;': '\\u255d',\n    'boxUl;': '\\u255c',\n    'boxuL;': '\\u255b',\n    'boxul;': '\\u2518',\n    'boxUR;': '\\u255a',\n    'boxUr;': '\\u2559',\n    'boxuR;': '\\u2558',\n    'boxur;': '\\u2514',\n    'boxV;': '\\u2551',\n    'boxv;': '\\u2502',\n    'boxVH;': '\\u256c',\n    'boxVh;': '\\u256b',\n    'boxvH;': '\\u256a',\n    'boxvh;': '\\u253c',\n    'boxVL;': '\\u2563',\n    'boxVl;': '\\u2562',\n    'boxvL;': '\\u2561',\n    'boxvl;': '\\u2524',\n    'boxVR;': '\\u2560',\n    'boxVr;': '\\u255f',\n    'boxvR;': '\\u255e',\n    'boxvr;': '\\u251c',\n    'bprime;': '\\u2035',\n    'Breve;': '\\u02d8',\n    'breve;': '\\u02d8',\n    'brvbar': '\\xa6',\n    'brvbar;': '\\xa6',\n    'Bscr;': '\\u212c',\n    'bscr;': '\\U0001d4b7',\n    'bsemi;': '\\u204f',\n    'bsim;': '\\u223d',\n    'bsime;': '\\u22cd',\n    'bsol;': '\\\\',\n    'bsolb;': '\\u29c5',\n    'bsolhsub;': '\\u27c8',\n    'bull;': '\\u2022',\n    'bullet;': '\\u2022',\n    'bump;': '\\u224e',\n    'bumpE;': '\\u2aae',\n    'bumpe;': '\\u224f',\n    'Bumpeq;': '\\u224e',\n    'bumpeq;': '\\u224f',\n    'Cacute;': '\\u0106',\n    'cacute;': '\\u0107',\n    'Cap;': '\\u22d2',\n    'cap;': '\\u2229',\n    'capand;': '\\u2a44',\n    'capbrcup;': '\\u2a49',\n    'capcap;': '\\u2a4b',\n    'capcup;': '\\u2a47',\n    'capdot;': '\\u2a40',\n    'CapitalDifferentialD;': '\\u2145',\n    'caps;': '\\u2229\\ufe00',\n    'caret;': '\\u2041',\n    'caron;': '\\u02c7',\n    'Cayleys;': '\\u212d',\n    'ccaps;': '\\u2a4d',\n    'Ccaron;': '\\u010c',\n    'ccaron;': '\\u010d',\n    'Ccedil': '\\xc7',\n    'ccedil': '\\xe7',\n    'Ccedil;': '\\xc7',\n    'ccedil;': '\\xe7',\n    'Ccirc;': '\\u0108',\n    'ccirc;': '\\u0109',\n    'Cconint;': '\\u2230',\n    'ccups;': '\\u2a4c',\n    'ccupssm;': '\\u2a50',\n    'Cdot;': '\\u010a',\n    'cdot;': '\\u010b',\n    'cedil': '\\xb8',\n    'cedil;': '\\xb8',\n    'Cedilla;': '\\xb8',\n    'cemptyv;': '\\u29b2',\n    'cent': '\\xa2',\n    'cent;': '\\xa2',\n    'CenterDot;': '\\xb7',\n    'centerdot;': '\\xb7',\n    'Cfr;': '\\u212d',\n    'cfr;': '\\U0001d520',\n    'CHcy;': '\\u0427',\n    'chcy;': '\\u0447',\n    'check;': '\\u2713',\n    'checkmark;': '\\u2713',\n    'Chi;': '\\u03a7',\n    'chi;': '\\u03c7',\n    'cir;': '\\u25cb',\n    'circ;': '\\u02c6',\n    'circeq;': '\\u2257',\n    'circlearrowleft;': '\\u21ba',\n    'circlearrowright;': '\\u21bb',\n    'circledast;': '\\u229b',\n    'circledcirc;': '\\u229a',\n    'circleddash;': '\\u229d',\n    'CircleDot;': '\\u2299',\n    'circledR;': '\\xae',\n    'circledS;': '\\u24c8',\n    'CircleMinus;': '\\u2296',\n    'CirclePlus;': '\\u2295',\n    'CircleTimes;': '\\u2297',\n    'cirE;': '\\u29c3',\n    'cire;': '\\u2257',\n    'cirfnint;': '\\u2a10',\n    'cirmid;': '\\u2aef',\n    'cirscir;': '\\u29c2',\n    'ClockwiseContourIntegral;': '\\u2232',\n    'CloseCurlyDoubleQuote;': '\\u201d',\n    'CloseCurlyQuote;': '\\u2019',\n    'clubs;': '\\u2663',\n    'clubsuit;': '\\u2663',\n    'Colon;': '\\u2237',\n    'colon;': ':',\n    'Colone;': '\\u2a74',\n    'colone;': '\\u2254',\n    'coloneq;': '\\u2254',\n    'comma;': ',',\n    'commat;': '@',\n    'comp;': '\\u2201',\n    'compfn;': '\\u2218',\n    'complement;': '\\u2201',\n    'complexes;': '\\u2102',\n    'cong;': '\\u2245',\n    'congdot;': '\\u2a6d',\n    'Congruent;': '\\u2261',\n    'Conint;': '\\u222f',\n    'conint;': '\\u222e',\n    'ContourIntegral;': '\\u222e',\n    'Copf;': '\\u2102',\n    'copf;': '\\U0001d554',\n    'coprod;': '\\u2210',\n    'Coproduct;': '\\u2210',\n    'COPY': '\\xa9',\n    'copy': '\\xa9',\n    'COPY;': '\\xa9',\n    'copy;': '\\xa9',\n    'copysr;': '\\u2117',\n    'CounterClockwiseContourIntegral;': '\\u2233',\n    'crarr;': '\\u21b5',\n    'Cross;': '\\u2a2f',\n    'cross;': '\\u2717',\n    'Cscr;': '\\U0001d49e',\n    'cscr;': '\\U0001d4b8',\n    'csub;': '\\u2acf',\n    'csube;': '\\u2ad1',\n    'csup;': '\\u2ad0',\n    'csupe;': '\\u2ad2',\n    'ctdot;': '\\u22ef',\n    'cudarrl;': '\\u2938',\n    'cudarrr;': '\\u2935',\n    'cuepr;': '\\u22de',\n    'cuesc;': '\\u22df',\n    'cularr;': '\\u21b6',\n    'cularrp;': '\\u293d',\n    'Cup;': '\\u22d3',\n    'cup;': '\\u222a',\n    'cupbrcap;': '\\u2a48',\n    'CupCap;': '\\u224d',\n    'cupcap;': '\\u2a46',\n    'cupcup;': '\\u2a4a',\n    'cupdot;': '\\u228d',\n    'cupor;': '\\u2a45',\n    'cups;': '\\u222a\\ufe00',\n    'curarr;': '\\u21b7',\n    'curarrm;': '\\u293c',\n    'curlyeqprec;': '\\u22de',\n    'curlyeqsucc;': '\\u22df',\n    'curlyvee;': '\\u22ce',\n    'curlywedge;': '\\u22cf',\n    'curren': '\\xa4',\n    'curren;': '\\xa4',\n    'curvearrowleft;': '\\u21b6',\n    'curvearrowright;': '\\u21b7',\n    'cuvee;': '\\u22ce',\n    'cuwed;': '\\u22cf',\n    'cwconint;': '\\u2232',\n    'cwint;': '\\u2231',\n    'cylcty;': '\\u232d',\n    'Dagger;': '\\u2021',\n    'dagger;': '\\u2020',\n    'daleth;': '\\u2138',\n    'Darr;': '\\u21a1',\n    'dArr;': '\\u21d3',\n    'darr;': '\\u2193',\n    'dash;': '\\u2010',\n    'Dashv;': '\\u2ae4',\n    'dashv;': '\\u22a3',\n    'dbkarow;': '\\u290f',\n    'dblac;': '\\u02dd',\n    'Dcaron;': '\\u010e',\n    'dcaron;': '\\u010f',\n    'Dcy;': '\\u0414',\n    'dcy;': '\\u0434',\n    'DD;': '\\u2145',\n    'dd;': '\\u2146',\n    'ddagger;': '\\u2021',\n    'ddarr;': '\\u21ca',\n    'DDotrahd;': '\\u2911',\n    'ddotseq;': '\\u2a77',\n    'deg': '\\xb0',\n    'deg;': '\\xb0',\n    'Del;': '\\u2207',\n    'Delta;': '\\u0394',\n    'delta;': '\\u03b4',\n    'demptyv;': '\\u29b1',\n    'dfisht;': '\\u297f',\n    'Dfr;': '\\U0001d507',\n    'dfr;': '\\U0001d521',\n    'dHar;': '\\u2965',\n    'dharl;': '\\u21c3',\n    'dharr;': '\\u21c2',\n    'DiacriticalAcute;': '\\xb4',\n    'DiacriticalDot;': '\\u02d9',\n    'DiacriticalDoubleAcute;': '\\u02dd',\n    'DiacriticalGrave;': '`',\n    'DiacriticalTilde;': '\\u02dc',\n    'diam;': '\\u22c4',\n    'Diamond;': '\\u22c4',\n    'diamond;': '\\u22c4',\n    'diamondsuit;': '\\u2666',\n    'diams;': '\\u2666',\n    'die;': '\\xa8',\n    'DifferentialD;': '\\u2146',\n    'digamma;': '\\u03dd',\n    'disin;': '\\u22f2',\n    'div;': '\\xf7',\n    'divide': '\\xf7',\n    'divide;': '\\xf7',\n    'divideontimes;': '\\u22c7',\n    'divonx;': '\\u22c7',\n    'DJcy;': '\\u0402',\n    'djcy;': '\\u0452',\n    'dlcorn;': '\\u231e',\n    'dlcrop;': '\\u230d',\n    'dollar;': '$',\n    'Dopf;': '\\U0001d53b',\n    'dopf;': '\\U0001d555',\n    'Dot;': '\\xa8',\n    'dot;': '\\u02d9',\n    'DotDot;': '\\u20dc',\n    'doteq;': '\\u2250',\n    'doteqdot;': '\\u2251',\n    'DotEqual;': '\\u2250',\n    'dotminus;': '\\u2238',\n    'dotplus;': '\\u2214',\n    'dotsquare;': '\\u22a1',\n    'doublebarwedge;': '\\u2306',\n    'DoubleContourIntegral;': '\\u222f',\n    'DoubleDot;': '\\xa8',\n    'DoubleDownArrow;': '\\u21d3',\n    'DoubleLeftArrow;': '\\u21d0',\n    'DoubleLeftRightArrow;': '\\u21d4',\n    'DoubleLeftTee;': '\\u2ae4',\n    'DoubleLongLeftArrow;': '\\u27f8',\n    'DoubleLongLeftRightArrow;': '\\u27fa',\n    'DoubleLongRightArrow;': '\\u27f9',\n    'DoubleRightArrow;': '\\u21d2',\n    'DoubleRightTee;': '\\u22a8',\n    'DoubleUpArrow;': '\\u21d1',\n    'DoubleUpDownArrow;': '\\u21d5',\n    'DoubleVerticalBar;': '\\u2225',\n    'DownArrow;': '\\u2193',\n    'Downarrow;': '\\u21d3',\n    'downarrow;': '\\u2193',\n    'DownArrowBar;': '\\u2913',\n    'DownArrowUpArrow;': '\\u21f5',\n    'DownBreve;': '\\u0311',\n    'downdownarrows;': '\\u21ca',\n    'downharpoonleft;': '\\u21c3',\n    'downharpoonright;': '\\u21c2',\n    'DownLeftRightVector;': '\\u2950',\n    'DownLeftTeeVector;': '\\u295e',\n    'DownLeftVector;': '\\u21bd',\n    'DownLeftVectorBar;': '\\u2956',\n    'DownRightTeeVector;': '\\u295f',\n    'DownRightVector;': '\\u21c1',\n    'DownRightVectorBar;': '\\u2957',\n    'DownTee;': '\\u22a4',\n    'DownTeeArrow;': '\\u21a7',\n    'drbkarow;': '\\u2910',\n    'drcorn;': '\\u231f',\n    'drcrop;': '\\u230c',\n    'Dscr;': '\\U0001d49f',\n    'dscr;': '\\U0001d4b9',\n    'DScy;': '\\u0405',\n    'dscy;': '\\u0455',\n    'dsol;': '\\u29f6',\n    'Dstrok;': '\\u0110',\n    'dstrok;': '\\u0111',\n    'dtdot;': '\\u22f1',\n    'dtri;': '\\u25bf',\n    'dtrif;': '\\u25be',\n    'duarr;': '\\u21f5',\n    'duhar;': '\\u296f',\n    'dwangle;': '\\u29a6',\n    'DZcy;': '\\u040f',\n    'dzcy;': '\\u045f',\n    'dzigrarr;': '\\u27ff',\n    'Eacute': '\\xc9',\n    'eacute': '\\xe9',\n    'Eacute;': '\\xc9',\n    'eacute;': '\\xe9',\n    'easter;': '\\u2a6e',\n    'Ecaron;': '\\u011a',\n    'ecaron;': '\\u011b',\n    'ecir;': '\\u2256',\n    'Ecirc': '\\xca',\n    'ecirc': '\\xea',\n    'Ecirc;': '\\xca',\n    'ecirc;': '\\xea',\n    'ecolon;': '\\u2255',\n    'Ecy;': '\\u042d',\n    'ecy;': '\\u044d',\n    'eDDot;': '\\u2a77',\n    'Edot;': '\\u0116',\n    'eDot;': '\\u2251',\n    'edot;': '\\u0117',\n    'ee;': '\\u2147',\n    'efDot;': '\\u2252',\n    'Efr;': '\\U0001d508',\n    'efr;': '\\U0001d522',\n    'eg;': '\\u2a9a',\n    'Egrave': '\\xc8',\n    'egrave': '\\xe8',\n    'Egrave;': '\\xc8',\n    'egrave;': '\\xe8',\n    'egs;': '\\u2a96',\n    'egsdot;': '\\u2a98',\n    'el;': '\\u2a99',\n    'Element;': '\\u2208',\n    'elinters;': '\\u23e7',\n    'ell;': '\\u2113',\n    'els;': '\\u2a95',\n    'elsdot;': '\\u2a97',\n    'Emacr;': '\\u0112',\n    'emacr;': '\\u0113',\n    'empty;': '\\u2205',\n    'emptyset;': '\\u2205',\n    'EmptySmallSquare;': '\\u25fb',\n    'emptyv;': '\\u2205',\n    'EmptyVerySmallSquare;': '\\u25ab',\n    'emsp13;': '\\u2004',\n    'emsp14;': '\\u2005',\n    'emsp;': '\\u2003',\n    'ENG;': '\\u014a',\n    'eng;': '\\u014b',\n    'ensp;': '\\u2002',\n    'Eogon;': '\\u0118',\n    'eogon;': '\\u0119',\n    'Eopf;': '\\U0001d53c',\n    'eopf;': '\\U0001d556',\n    'epar;': '\\u22d5',\n    'eparsl;': '\\u29e3',\n    'eplus;': '\\u2a71',\n    'epsi;': '\\u03b5',\n    'Epsilon;': '\\u0395',\n    'epsilon;': '\\u03b5',\n    'epsiv;': '\\u03f5',\n    'eqcirc;': '\\u2256',\n    'eqcolon;': '\\u2255',\n    'eqsim;': '\\u2242',\n    'eqslantgtr;': '\\u2a96',\n    'eqslantless;': '\\u2a95',\n    'Equal;': '\\u2a75',\n    'equals;': '=',\n    'EqualTilde;': '\\u2242',\n    'equest;': '\\u225f',\n    'Equilibrium;': '\\u21cc',\n    'equiv;': '\\u2261',\n    'equivDD;': '\\u2a78',\n    'eqvparsl;': '\\u29e5',\n    'erarr;': '\\u2971',\n    'erDot;': '\\u2253',\n    'Escr;': '\\u2130',\n    'escr;': '\\u212f',\n    'esdot;': '\\u2250',\n    'Esim;': '\\u2a73',\n    'esim;': '\\u2242',\n    'Eta;': '\\u0397',\n    'eta;': '\\u03b7',\n    'ETH': '\\xd0',\n    'eth': '\\xf0',\n    'ETH;': '\\xd0',\n    'eth;': '\\xf0',\n    'Euml': '\\xcb',\n    'euml': '\\xeb',\n    'Euml;': '\\xcb',\n    'euml;': '\\xeb',\n    'euro;': '\\u20ac',\n    'excl;': '!',\n    'exist;': '\\u2203',\n    'Exists;': '\\u2203',\n    'expectation;': '\\u2130',\n    'ExponentialE;': '\\u2147',\n    'exponentiale;': '\\u2147',\n    'fallingdotseq;': '\\u2252',\n    'Fcy;': '\\u0424',\n    'fcy;': '\\u0444',\n    'female;': '\\u2640',\n    'ffilig;': '\\ufb03',\n    'fflig;': '\\ufb00',\n    'ffllig;': '\\ufb04',\n    'Ffr;': '\\U0001d509',\n    'ffr;': '\\U0001d523',\n    'filig;': '\\ufb01',\n    'FilledSmallSquare;': '\\u25fc',\n    'FilledVerySmallSquare;': '\\u25aa',\n    'fjlig;': 'fj',\n    'flat;': '\\u266d',\n    'fllig;': '\\ufb02',\n    'fltns;': '\\u25b1',\n    'fnof;': '\\u0192',\n    'Fopf;': '\\U0001d53d',\n    'fopf;': '\\U0001d557',\n    'ForAll;': '\\u2200',\n    'forall;': '\\u2200',\n    'fork;': '\\u22d4',\n    'forkv;': '\\u2ad9',\n    'Fouriertrf;': '\\u2131',\n    'fpartint;': '\\u2a0d',\n    'frac12': '\\xbd',\n    'frac12;': '\\xbd',\n    'frac13;': '\\u2153',\n    'frac14': '\\xbc',\n    'frac14;': '\\xbc',\n    'frac15;': '\\u2155',\n    'frac16;': '\\u2159',\n    'frac18;': '\\u215b',\n    'frac23;': '\\u2154',\n    'frac25;': '\\u2156',\n    'frac34': '\\xbe',\n    'frac34;': '\\xbe',\n    'frac35;': '\\u2157',\n    'frac38;': '\\u215c',\n    'frac45;': '\\u2158',\n    'frac56;': '\\u215a',\n    'frac58;': '\\u215d',\n    'frac78;': '\\u215e',\n    'frasl;': '\\u2044',\n    'frown;': '\\u2322',\n    'Fscr;': '\\u2131',\n    'fscr;': '\\U0001d4bb',\n    'gacute;': '\\u01f5',\n    'Gamma;': '\\u0393',\n    'gamma;': '\\u03b3',\n    'Gammad;': '\\u03dc',\n    'gammad;': '\\u03dd',\n    'gap;': '\\u2a86',\n    'Gbreve;': '\\u011e',\n    'gbreve;': '\\u011f',\n    'Gcedil;': '\\u0122',\n    'Gcirc;': '\\u011c',\n    'gcirc;': '\\u011d',\n    'Gcy;': '\\u0413',\n    'gcy;': '\\u0433',\n    'Gdot;': '\\u0120',\n    'gdot;': '\\u0121',\n    'gE;': '\\u2267',\n    'ge;': '\\u2265',\n    'gEl;': '\\u2a8c',\n    'gel;': '\\u22db',\n    'geq;': '\\u2265',\n    'geqq;': '\\u2267',\n    'geqslant;': '\\u2a7e',\n    'ges;': '\\u2a7e',\n    'gescc;': '\\u2aa9',\n    'gesdot;': '\\u2a80',\n    'gesdoto;': '\\u2a82',\n    'gesdotol;': '\\u2a84',\n    'gesl;': '\\u22db\\ufe00',\n    'gesles;': '\\u2a94',\n    'Gfr;': '\\U0001d50a',\n    'gfr;': '\\U0001d524',\n    'Gg;': '\\u22d9',\n    'gg;': '\\u226b',\n    'ggg;': '\\u22d9',\n    'gimel;': '\\u2137',\n    'GJcy;': '\\u0403',\n    'gjcy;': '\\u0453',\n    'gl;': '\\u2277',\n    'gla;': '\\u2aa5',\n    'glE;': '\\u2a92',\n    'glj;': '\\u2aa4',\n    'gnap;': '\\u2a8a',\n    'gnapprox;': '\\u2a8a',\n    'gnE;': '\\u2269',\n    'gne;': '\\u2a88',\n    'gneq;': '\\u2a88',\n    'gneqq;': '\\u2269',\n    'gnsim;': '\\u22e7',\n    'Gopf;': '\\U0001d53e',\n    'gopf;': '\\U0001d558',\n    'grave;': '`',\n    'GreaterEqual;': '\\u2265',\n    'GreaterEqualLess;': '\\u22db',\n    'GreaterFullEqual;': '\\u2267',\n    'GreaterGreater;': '\\u2aa2',\n    'GreaterLess;': '\\u2277',\n    'GreaterSlantEqual;': '\\u2a7e',\n    'GreaterTilde;': '\\u2273',\n    'Gscr;': '\\U0001d4a2',\n    'gscr;': '\\u210a',\n    'gsim;': '\\u2273',\n    'gsime;': '\\u2a8e',\n    'gsiml;': '\\u2a90',\n    'GT': '>',\n    'gt': '>',\n    'GT;': '>',\n    'Gt;': '\\u226b',\n    'gt;': '>',\n    'gtcc;': '\\u2aa7',\n    'gtcir;': '\\u2a7a',\n    'gtdot;': '\\u22d7',\n    'gtlPar;': '\\u2995',\n    'gtquest;': '\\u2a7c',\n    'gtrapprox;': '\\u2a86',\n    'gtrarr;': '\\u2978',\n    'gtrdot;': '\\u22d7',\n    'gtreqless;': '\\u22db',\n    'gtreqqless;': '\\u2a8c',\n    'gtrless;': '\\u2277',\n    'gtrsim;': '\\u2273',\n    'gvertneqq;': '\\u2269\\ufe00',\n    'gvnE;': '\\u2269\\ufe00',\n    'Hacek;': '\\u02c7',\n    'hairsp;': '\\u200a',\n    'half;': '\\xbd',\n    'hamilt;': '\\u210b',\n    'HARDcy;': '\\u042a',\n    'hardcy;': '\\u044a',\n    'hArr;': '\\u21d4',\n    'harr;': '\\u2194',\n    'harrcir;': '\\u2948',\n    'harrw;': '\\u21ad',\n    'Hat;': '^',\n    'hbar;': '\\u210f',\n    'Hcirc;': '\\u0124',\n    'hcirc;': '\\u0125',\n    'hearts;': '\\u2665',\n    'heartsuit;': '\\u2665',\n    'hellip;': '\\u2026',\n    'hercon;': '\\u22b9',\n    'Hfr;': '\\u210c',\n    'hfr;': '\\U0001d525',\n    'HilbertSpace;': '\\u210b',\n    'hksearow;': '\\u2925',\n    'hkswarow;': '\\u2926',\n    'hoarr;': '\\u21ff',\n    'homtht;': '\\u223b',\n    'hookleftarrow;': '\\u21a9',\n    'hookrightarrow;': '\\u21aa',\n    'Hopf;': '\\u210d',\n    'hopf;': '\\U0001d559',\n    'horbar;': '\\u2015',\n    'HorizontalLine;': '\\u2500',\n    'Hscr;': '\\u210b',\n    'hscr;': '\\U0001d4bd',\n    'hslash;': '\\u210f',\n    'Hstrok;': '\\u0126',\n    'hstrok;': '\\u0127',\n    'HumpDownHump;': '\\u224e',\n    'HumpEqual;': '\\u224f',\n    'hybull;': '\\u2043',\n    'hyphen;': '\\u2010',\n    'Iacute': '\\xcd',\n    'iacute': '\\xed',\n    'Iacute;': '\\xcd',\n    'iacute;': '\\xed',\n    'ic;': '\\u2063',\n    'Icirc': '\\xce',\n    'icirc': '\\xee',\n    'Icirc;': '\\xce',\n    'icirc;': '\\xee',\n    'Icy;': '\\u0418',\n    'icy;': '\\u0438',\n    'Idot;': '\\u0130',\n    'IEcy;': '\\u0415',\n    'iecy;': '\\u0435',\n    'iexcl': '\\xa1',\n    'iexcl;': '\\xa1',\n    'iff;': '\\u21d4',\n    'Ifr;': '\\u2111',\n    'ifr;': '\\U0001d526',\n    'Igrave': '\\xcc',\n    'igrave': '\\xec',\n    'Igrave;': '\\xcc',\n    'igrave;': '\\xec',\n    'ii;': '\\u2148',\n    'iiiint;': '\\u2a0c',\n    'iiint;': '\\u222d',\n    'iinfin;': '\\u29dc',\n    'iiota;': '\\u2129',\n    'IJlig;': '\\u0132',\n    'ijlig;': '\\u0133',\n    'Im;': '\\u2111',\n    'Imacr;': '\\u012a',\n    'imacr;': '\\u012b',\n    'image;': '\\u2111',\n    'ImaginaryI;': '\\u2148',\n    'imagline;': '\\u2110',\n    'imagpart;': '\\u2111',\n    'imath;': '\\u0131',\n    'imof;': '\\u22b7',\n    'imped;': '\\u01b5',\n    'Implies;': '\\u21d2',\n    'in;': '\\u2208',\n    'incare;': '\\u2105',\n    'infin;': '\\u221e',\n    'infintie;': '\\u29dd',\n    'inodot;': '\\u0131',\n    'Int;': '\\u222c',\n    'int;': '\\u222b',\n    'intcal;': '\\u22ba',\n    'integers;': '\\u2124',\n    'Integral;': '\\u222b',\n    'intercal;': '\\u22ba',\n    'Intersection;': '\\u22c2',\n    'intlarhk;': '\\u2a17',\n    'intprod;': '\\u2a3c',\n    'InvisibleComma;': '\\u2063',\n    'InvisibleTimes;': '\\u2062',\n    'IOcy;': '\\u0401',\n    'iocy;': '\\u0451',\n    'Iogon;': '\\u012e',\n    'iogon;': '\\u012f',\n    'Iopf;': '\\U0001d540',\n    'iopf;': '\\U0001d55a',\n    'Iota;': '\\u0399',\n    'iota;': '\\u03b9',\n    'iprod;': '\\u2a3c',\n    'iquest': '\\xbf',\n    'iquest;': '\\xbf',\n    'Iscr;': '\\u2110',\n    'iscr;': '\\U0001d4be',\n    'isin;': '\\u2208',\n    'isindot;': '\\u22f5',\n    'isinE;': '\\u22f9',\n    'isins;': '\\u22f4',\n    'isinsv;': '\\u22f3',\n    'isinv;': '\\u2208',\n    'it;': '\\u2062',\n    'Itilde;': '\\u0128',\n    'itilde;': '\\u0129',\n    'Iukcy;': '\\u0406',\n    'iukcy;': '\\u0456',\n    'Iuml': '\\xcf',\n    'iuml': '\\xef',\n    'Iuml;': '\\xcf',\n    'iuml;': '\\xef',\n    'Jcirc;': '\\u0134',\n    'jcirc;': '\\u0135',\n    'Jcy;': '\\u0419',\n    'jcy;': '\\u0439',\n    'Jfr;': '\\U0001d50d',\n    'jfr;': '\\U0001d527',\n    'jmath;': '\\u0237',\n    'Jopf;': '\\U0001d541',\n    'jopf;': '\\U0001d55b',\n    'Jscr;': '\\U0001d4a5',\n    'jscr;': '\\U0001d4bf',\n    'Jsercy;': '\\u0408',\n    'jsercy;': '\\u0458',\n    'Jukcy;': '\\u0404',\n    'jukcy;': '\\u0454',\n    'Kappa;': '\\u039a',\n    'kappa;': '\\u03ba',\n    'kappav;': '\\u03f0',\n    'Kcedil;': '\\u0136',\n    'kcedil;': '\\u0137',\n    'Kcy;': '\\u041a',\n    'kcy;': '\\u043a',\n    'Kfr;': '\\U0001d50e',\n    'kfr;': '\\U0001d528',\n    'kgreen;': '\\u0138',\n    'KHcy;': '\\u0425',\n    'khcy;': '\\u0445',\n    'KJcy;': '\\u040c',\n    'kjcy;': '\\u045c',\n    'Kopf;': '\\U0001d542',\n    'kopf;': '\\U0001d55c',\n    'Kscr;': '\\U0001d4a6',\n    'kscr;': '\\U0001d4c0',\n    'lAarr;': '\\u21da',\n    'Lacute;': '\\u0139',\n    'lacute;': '\\u013a',\n    'laemptyv;': '\\u29b4',\n    'lagran;': '\\u2112',\n    'Lambda;': '\\u039b',\n    'lambda;': '\\u03bb',\n    'Lang;': '\\u27ea',\n    'lang;': '\\u27e8',\n    'langd;': '\\u2991',\n    'langle;': '\\u27e8',\n    'lap;': '\\u2a85',\n    'Laplacetrf;': '\\u2112',\n    'laquo': '\\xab',\n    'laquo;': '\\xab',\n    'Larr;': '\\u219e',\n    'lArr;': '\\u21d0',\n    'larr;': '\\u2190',\n    'larrb;': '\\u21e4',\n    'larrbfs;': '\\u291f',\n    'larrfs;': '\\u291d',\n    'larrhk;': '\\u21a9',\n    'larrlp;': '\\u21ab',\n    'larrpl;': '\\u2939',\n    'larrsim;': '\\u2973',\n    'larrtl;': '\\u21a2',\n    'lat;': '\\u2aab',\n    'lAtail;': '\\u291b',\n    'latail;': '\\u2919',\n    'late;': '\\u2aad',\n    'lates;': '\\u2aad\\ufe00',\n    'lBarr;': '\\u290e',\n    'lbarr;': '\\u290c',\n    'lbbrk;': '\\u2772',\n    'lbrace;': '{',\n    'lbrack;': '[',\n    'lbrke;': '\\u298b',\n    'lbrksld;': '\\u298f',\n    'lbrkslu;': '\\u298d',\n    'Lcaron;': '\\u013d',\n    'lcaron;': '\\u013e',\n    'Lcedil;': '\\u013b',\n    'lcedil;': '\\u013c',\n    'lceil;': '\\u2308',\n    'lcub;': '{',\n    'Lcy;': '\\u041b',\n    'lcy;': '\\u043b',\n    'ldca;': '\\u2936',\n    'ldquo;': '\\u201c',\n    'ldquor;': '\\u201e',\n    'ldrdhar;': '\\u2967',\n    'ldrushar;': '\\u294b',\n    'ldsh;': '\\u21b2',\n    'lE;': '\\u2266',\n    'le;': '\\u2264',\n    'LeftAngleBracket;': '\\u27e8',\n    'LeftArrow;': '\\u2190',\n    'Leftarrow;': '\\u21d0',\n    'leftarrow;': '\\u2190',\n    'LeftArrowBar;': '\\u21e4',\n    'LeftArrowRightArrow;': '\\u21c6',\n    'leftarrowtail;': '\\u21a2',\n    'LeftCeiling;': '\\u2308',\n    'LeftDoubleBracket;': '\\u27e6',\n    'LeftDownTeeVector;': '\\u2961',\n    'LeftDownVector;': '\\u21c3',\n    'LeftDownVectorBar;': '\\u2959',\n    'LeftFloor;': '\\u230a',\n    'leftharpoondown;': '\\u21bd',\n    'leftharpoonup;': '\\u21bc',\n    'leftleftarrows;': '\\u21c7',\n    'LeftRightArrow;': '\\u2194',\n    'Leftrightarrow;': '\\u21d4',\n    'leftrightarrow;': '\\u2194',\n    'leftrightarrows;': '\\u21c6',\n    'leftrightharpoons;': '\\u21cb',\n    'leftrightsquigarrow;': '\\u21ad',\n    'LeftRightVector;': '\\u294e',\n    'LeftTee;': '\\u22a3',\n    'LeftTeeArrow;': '\\u21a4',\n    'LeftTeeVector;': '\\u295a',\n    'leftthreetimes;': '\\u22cb',\n    'LeftTriangle;': '\\u22b2',\n    'LeftTriangleBar;': '\\u29cf',\n    'LeftTriangleEqual;': '\\u22b4',\n    'LeftUpDownVector;': '\\u2951',\n    'LeftUpTeeVector;': '\\u2960',\n    'LeftUpVector;': '\\u21bf',\n    'LeftUpVectorBar;': '\\u2958',\n    'LeftVector;': '\\u21bc',\n    'LeftVectorBar;': '\\u2952',\n    'lEg;': '\\u2a8b',\n    'leg;': '\\u22da',\n    'leq;': '\\u2264',\n    'leqq;': '\\u2266',\n    'leqslant;': '\\u2a7d',\n    'les;': '\\u2a7d',\n    'lescc;': '\\u2aa8',\n    'lesdot;': '\\u2a7f',\n    'lesdoto;': '\\u2a81',\n    'lesdotor;': '\\u2a83',\n    'lesg;': '\\u22da\\ufe00',\n    'lesges;': '\\u2a93',\n    'lessapprox;': '\\u2a85',\n    'lessdot;': '\\u22d6',\n    'lesseqgtr;': '\\u22da',\n    'lesseqqgtr;': '\\u2a8b',\n    'LessEqualGreater;': '\\u22da',\n    'LessFullEqual;': '\\u2266',\n    'LessGreater;': '\\u2276',\n    'lessgtr;': '\\u2276',\n    'LessLess;': '\\u2aa1',\n    'lesssim;': '\\u2272',\n    'LessSlantEqual;': '\\u2a7d',\n    'LessTilde;': '\\u2272',\n    'lfisht;': '\\u297c',\n    'lfloor;': '\\u230a',\n    'Lfr;': '\\U0001d50f',\n    'lfr;': '\\U0001d529',\n    'lg;': '\\u2276',\n    'lgE;': '\\u2a91',\n    'lHar;': '\\u2962',\n    'lhard;': '\\u21bd',\n    'lharu;': '\\u21bc',\n    'lharul;': '\\u296a',\n    'lhblk;': '\\u2584',\n    'LJcy;': '\\u0409',\n    'ljcy;': '\\u0459',\n    'Ll;': '\\u22d8',\n    'll;': '\\u226a',\n    'llarr;': '\\u21c7',\n    'llcorner;': '\\u231e',\n    'Lleftarrow;': '\\u21da',\n    'llhard;': '\\u296b',\n    'lltri;': '\\u25fa',\n    'Lmidot;': '\\u013f',\n    'lmidot;': '\\u0140',\n    'lmoust;': '\\u23b0',\n    'lmoustache;': '\\u23b0',\n    'lnap;': '\\u2a89',\n    'lnapprox;': '\\u2a89',\n    'lnE;': '\\u2268',\n    'lne;': '\\u2a87',\n    'lneq;': '\\u2a87',\n    'lneqq;': '\\u2268',\n    'lnsim;': '\\u22e6',\n    'loang;': '\\u27ec',\n    'loarr;': '\\u21fd',\n    'lobrk;': '\\u27e6',\n    'LongLeftArrow;': '\\u27f5',\n    'Longleftarrow;': '\\u27f8',\n    'longleftarrow;': '\\u27f5',\n    'LongLeftRightArrow;': '\\u27f7',\n    'Longleftrightarrow;': '\\u27fa',\n    'longleftrightarrow;': '\\u27f7',\n    'longmapsto;': '\\u27fc',\n    'LongRightArrow;': '\\u27f6',\n    'Longrightarrow;': '\\u27f9',\n    'longrightarrow;': '\\u27f6',\n    'looparrowleft;': '\\u21ab',\n    'looparrowright;': '\\u21ac',\n    'lopar;': '\\u2985',\n    'Lopf;': '\\U0001d543',\n    'lopf;': '\\U0001d55d',\n    'loplus;': '\\u2a2d',\n    'lotimes;': '\\u2a34',\n    'lowast;': '\\u2217',\n    'lowbar;': '_',\n    'LowerLeftArrow;': '\\u2199',\n    'LowerRightArrow;': '\\u2198',\n    'loz;': '\\u25ca',\n    'lozenge;': '\\u25ca',\n    'lozf;': '\\u29eb',\n    'lpar;': '(',\n    'lparlt;': '\\u2993',\n    'lrarr;': '\\u21c6',\n    'lrcorner;': '\\u231f',\n    'lrhar;': '\\u21cb',\n    'lrhard;': '\\u296d',\n    'lrm;': '\\u200e',\n    'lrtri;': '\\u22bf',\n    'lsaquo;': '\\u2039',\n    'Lscr;': '\\u2112',\n    'lscr;': '\\U0001d4c1',\n    'Lsh;': '\\u21b0',\n    'lsh;': '\\u21b0',\n    'lsim;': '\\u2272',\n    'lsime;': '\\u2a8d',\n    'lsimg;': '\\u2a8f',\n    'lsqb;': '[',\n    'lsquo;': '\\u2018',\n    'lsquor;': '\\u201a',\n    'Lstrok;': '\\u0141',\n    'lstrok;': '\\u0142',\n    'LT': '<',\n    'lt': '<',\n    'LT;': '<',\n    'Lt;': '\\u226a',\n    'lt;': '<',\n    'ltcc;': '\\u2aa6',\n    'ltcir;': '\\u2a79',\n    'ltdot;': '\\u22d6',\n    'lthree;': '\\u22cb',\n    'ltimes;': '\\u22c9',\n    'ltlarr;': '\\u2976',\n    'ltquest;': '\\u2a7b',\n    'ltri;': '\\u25c3',\n    'ltrie;': '\\u22b4',\n    'ltrif;': '\\u25c2',\n    'ltrPar;': '\\u2996',\n    'lurdshar;': '\\u294a',\n    'luruhar;': '\\u2966',\n    'lvertneqq;': '\\u2268\\ufe00',\n    'lvnE;': '\\u2268\\ufe00',\n    'macr': '\\xaf',\n    'macr;': '\\xaf',\n    'male;': '\\u2642',\n    'malt;': '\\u2720',\n    'maltese;': '\\u2720',\n    'Map;': '\\u2905',\n    'map;': '\\u21a6',\n    'mapsto;': '\\u21a6',\n    'mapstodown;': '\\u21a7',\n    'mapstoleft;': '\\u21a4',\n    'mapstoup;': '\\u21a5',\n    'marker;': '\\u25ae',\n    'mcomma;': '\\u2a29',\n    'Mcy;': '\\u041c',\n    'mcy;': '\\u043c',\n    'mdash;': '\\u2014',\n    'mDDot;': '\\u223a',\n    'measuredangle;': '\\u2221',\n    'MediumSpace;': '\\u205f',\n    'Mellintrf;': '\\u2133',\n    'Mfr;': '\\U0001d510',\n    'mfr;': '\\U0001d52a',\n    'mho;': '\\u2127',\n    'micro': '\\xb5',\n    'micro;': '\\xb5',\n    'mid;': '\\u2223',\n    'midast;': '*',\n    'midcir;': '\\u2af0',\n    'middot': '\\xb7',\n    'middot;': '\\xb7',\n    'minus;': '\\u2212',\n    'minusb;': '\\u229f',\n    'minusd;': '\\u2238',\n    'minusdu;': '\\u2a2a',\n    'MinusPlus;': '\\u2213',\n    'mlcp;': '\\u2adb',\n    'mldr;': '\\u2026',\n    'mnplus;': '\\u2213',\n    'models;': '\\u22a7',\n    'Mopf;': '\\U0001d544',\n    'mopf;': '\\U0001d55e',\n    'mp;': '\\u2213',\n    'Mscr;': '\\u2133',\n    'mscr;': '\\U0001d4c2',\n    'mstpos;': '\\u223e',\n    'Mu;': '\\u039c',\n    'mu;': '\\u03bc',\n    'multimap;': '\\u22b8',\n    'mumap;': '\\u22b8',\n    'nabla;': '\\u2207',\n    'Nacute;': '\\u0143',\n    'nacute;': '\\u0144',\n    'nang;': '\\u2220\\u20d2',\n    'nap;': '\\u2249',\n    'napE;': '\\u2a70\\u0338',\n    'napid;': '\\u224b\\u0338',\n    'napos;': '\\u0149',\n    'napprox;': '\\u2249',\n    'natur;': '\\u266e',\n    'natural;': '\\u266e',\n    'naturals;': '\\u2115',\n    'nbsp': '\\xa0',\n    'nbsp;': '\\xa0',\n    'nbump;': '\\u224e\\u0338',\n    'nbumpe;': '\\u224f\\u0338',\n    'ncap;': '\\u2a43',\n    'Ncaron;': '\\u0147',\n    'ncaron;': '\\u0148',\n    'Ncedil;': '\\u0145',\n    'ncedil;': '\\u0146',\n    'ncong;': '\\u2247',\n    'ncongdot;': '\\u2a6d\\u0338',\n    'ncup;': '\\u2a42',\n    'Ncy;': '\\u041d',\n    'ncy;': '\\u043d',\n    'ndash;': '\\u2013',\n    'ne;': '\\u2260',\n    'nearhk;': '\\u2924',\n    'neArr;': '\\u21d7',\n    'nearr;': '\\u2197',\n    'nearrow;': '\\u2197',\n    'nedot;': '\\u2250\\u0338',\n    'NegativeMediumSpace;': '\\u200b',\n    'NegativeThickSpace;': '\\u200b',\n    'NegativeThinSpace;': '\\u200b',\n    'NegativeVeryThinSpace;': '\\u200b',\n    'nequiv;': '\\u2262',\n    'nesear;': '\\u2928',\n    'nesim;': '\\u2242\\u0338',\n    'NestedGreaterGreater;': '\\u226b',\n    'NestedLessLess;': '\\u226a',\n    'NewLine;': '\\n',\n    'nexist;': '\\u2204',\n    'nexists;': '\\u2204',\n    'Nfr;': '\\U0001d511',\n    'nfr;': '\\U0001d52b',\n    'ngE;': '\\u2267\\u0338',\n    'nge;': '\\u2271',\n    'ngeq;': '\\u2271',\n    'ngeqq;': '\\u2267\\u0338',\n    'ngeqslant;': '\\u2a7e\\u0338',\n    'nges;': '\\u2a7e\\u0338',\n    'nGg;': '\\u22d9\\u0338',\n    'ngsim;': '\\u2275',\n    'nGt;': '\\u226b\\u20d2',\n    'ngt;': '\\u226f',\n    'ngtr;': '\\u226f',\n    'nGtv;': '\\u226b\\u0338',\n    'nhArr;': '\\u21ce',\n    'nharr;': '\\u21ae',\n    'nhpar;': '\\u2af2',\n    'ni;': '\\u220b',\n    'nis;': '\\u22fc',\n    'nisd;': '\\u22fa',\n    'niv;': '\\u220b',\n    'NJcy;': '\\u040a',\n    'njcy;': '\\u045a',\n    'nlArr;': '\\u21cd',\n    'nlarr;': '\\u219a',\n    'nldr;': '\\u2025',\n    'nlE;': '\\u2266\\u0338',\n    'nle;': '\\u2270',\n    'nLeftarrow;': '\\u21cd',\n    'nleftarrow;': '\\u219a',\n    'nLeftrightarrow;': '\\u21ce',\n    'nleftrightarrow;': '\\u21ae',\n    'nleq;': '\\u2270',\n    'nleqq;': '\\u2266\\u0338',\n    'nleqslant;': '\\u2a7d\\u0338',\n    'nles;': '\\u2a7d\\u0338',\n    'nless;': '\\u226e',\n    'nLl;': '\\u22d8\\u0338',\n    'nlsim;': '\\u2274',\n    'nLt;': '\\u226a\\u20d2',\n    'nlt;': '\\u226e',\n    'nltri;': '\\u22ea',\n    'nltrie;': '\\u22ec',\n    'nLtv;': '\\u226a\\u0338',\n    'nmid;': '\\u2224',\n    'NoBreak;': '\\u2060',\n    'NonBreakingSpace;': '\\xa0',\n    'Nopf;': '\\u2115',\n    'nopf;': '\\U0001d55f',\n    'not': '\\xac',\n    'Not;': '\\u2aec',\n    'not;': '\\xac',\n    'NotCongruent;': '\\u2262',\n    'NotCupCap;': '\\u226d',\n    'NotDoubleVerticalBar;': '\\u2226',\n    'NotElement;': '\\u2209',\n    'NotEqual;': '\\u2260',\n    'NotEqualTilde;': '\\u2242\\u0338',\n    'NotExists;': '\\u2204',\n    'NotGreater;': '\\u226f',\n    'NotGreaterEqual;': '\\u2271',\n    'NotGreaterFullEqual;': '\\u2267\\u0338',\n    'NotGreaterGreater;': '\\u226b\\u0338',\n    'NotGreaterLess;': '\\u2279',\n    'NotGreaterSlantEqual;': '\\u2a7e\\u0338',\n    'NotGreaterTilde;': '\\u2275',\n    'NotHumpDownHump;': '\\u224e\\u0338',\n    'NotHumpEqual;': '\\u224f\\u0338',\n    'notin;': '\\u2209',\n    'notindot;': '\\u22f5\\u0338',\n    'notinE;': '\\u22f9\\u0338',\n    'notinva;': '\\u2209',\n    'notinvb;': '\\u22f7',\n    'notinvc;': '\\u22f6',\n    'NotLeftTriangle;': '\\u22ea',\n    'NotLeftTriangleBar;': '\\u29cf\\u0338',\n    'NotLeftTriangleEqual;': '\\u22ec',\n    'NotLess;': '\\u226e',\n    'NotLessEqual;': '\\u2270',\n    'NotLessGreater;': '\\u2278',\n    'NotLessLess;': '\\u226a\\u0338',\n    'NotLessSlantEqual;': '\\u2a7d\\u0338',\n    'NotLessTilde;': '\\u2274',\n    'NotNestedGreaterGreater;': '\\u2aa2\\u0338',\n    'NotNestedLessLess;': '\\u2aa1\\u0338',\n    'notni;': '\\u220c',\n    'notniva;': '\\u220c',\n    'notnivb;': '\\u22fe',\n    'notnivc;': '\\u22fd',\n    'NotPrecedes;': '\\u2280',\n    'NotPrecedesEqual;': '\\u2aaf\\u0338',\n    'NotPrecedesSlantEqual;': '\\u22e0',\n    'NotReverseElement;': '\\u220c',\n    'NotRightTriangle;': '\\u22eb',\n    'NotRightTriangleBar;': '\\u29d0\\u0338',\n    'NotRightTriangleEqual;': '\\u22ed',\n    'NotSquareSubset;': '\\u228f\\u0338',\n    'NotSquareSubsetEqual;': '\\u22e2',\n    'NotSquareSuperset;': '\\u2290\\u0338',\n    'NotSquareSupersetEqual;': '\\u22e3',\n    'NotSubset;': '\\u2282\\u20d2',\n    'NotSubsetEqual;': '\\u2288',\n    'NotSucceeds;': '\\u2281',\n    'NotSucceedsEqual;': '\\u2ab0\\u0338',\n    'NotSucceedsSlantEqual;': '\\u22e1',\n    'NotSucceedsTilde;': '\\u227f\\u0338',\n    'NotSuperset;': '\\u2283\\u20d2',\n    'NotSupersetEqual;': '\\u2289',\n    'NotTilde;': '\\u2241',\n    'NotTildeEqual;': '\\u2244',\n    'NotTildeFullEqual;': '\\u2247',\n    'NotTildeTilde;': '\\u2249',\n    'NotVerticalBar;': '\\u2224',\n    'npar;': '\\u2226',\n    'nparallel;': '\\u2226',\n    'nparsl;': '\\u2afd\\u20e5',\n    'npart;': '\\u2202\\u0338',\n    'npolint;': '\\u2a14',\n    'npr;': '\\u2280',\n    'nprcue;': '\\u22e0',\n    'npre;': '\\u2aaf\\u0338',\n    'nprec;': '\\u2280',\n    'npreceq;': '\\u2aaf\\u0338',\n    'nrArr;': '\\u21cf',\n    'nrarr;': '\\u219b',\n    'nrarrc;': '\\u2933\\u0338',\n    'nrarrw;': '\\u219d\\u0338',\n    'nRightarrow;': '\\u21cf',\n    'nrightarrow;': '\\u219b',\n    'nrtri;': '\\u22eb',\n    'nrtrie;': '\\u22ed',\n    'nsc;': '\\u2281',\n    'nsccue;': '\\u22e1',\n    'nsce;': '\\u2ab0\\u0338',\n    'Nscr;': '\\U0001d4a9',\n    'nscr;': '\\U0001d4c3',\n    'nshortmid;': '\\u2224',\n    'nshortparallel;': '\\u2226',\n    'nsim;': '\\u2241',\n    'nsime;': '\\u2244',\n    'nsimeq;': '\\u2244',\n    'nsmid;': '\\u2224',\n    'nspar;': '\\u2226',\n    'nsqsube;': '\\u22e2',\n    'nsqsupe;': '\\u22e3',\n    'nsub;': '\\u2284',\n    'nsubE;': '\\u2ac5\\u0338',\n    'nsube;': '\\u2288',\n    'nsubset;': '\\u2282\\u20d2',\n    'nsubseteq;': '\\u2288',\n    'nsubseteqq;': '\\u2ac5\\u0338',\n    'nsucc;': '\\u2281',\n    'nsucceq;': '\\u2ab0\\u0338',\n    'nsup;': '\\u2285',\n    'nsupE;': '\\u2ac6\\u0338',\n    'nsupe;': '\\u2289',\n    'nsupset;': '\\u2283\\u20d2',\n    'nsupseteq;': '\\u2289',\n    'nsupseteqq;': '\\u2ac6\\u0338',\n    'ntgl;': '\\u2279',\n    'Ntilde': '\\xd1',\n    'ntilde': '\\xf1',\n    'Ntilde;': '\\xd1',\n    'ntilde;': '\\xf1',\n    'ntlg;': '\\u2278',\n    'ntriangleleft;': '\\u22ea',\n    'ntrianglelefteq;': '\\u22ec',\n    'ntriangleright;': '\\u22eb',\n    'ntrianglerighteq;': '\\u22ed',\n    'Nu;': '\\u039d',\n    'nu;': '\\u03bd',\n    'num;': '#',\n    'numero;': '\\u2116',\n    'numsp;': '\\u2007',\n    'nvap;': '\\u224d\\u20d2',\n    'nVDash;': '\\u22af',\n    'nVdash;': '\\u22ae',\n    'nvDash;': '\\u22ad',\n    'nvdash;': '\\u22ac',\n    'nvge;': '\\u2265\\u20d2',\n    'nvgt;': '>\\u20d2',\n    'nvHarr;': '\\u2904',\n    'nvinfin;': '\\u29de',\n    'nvlArr;': '\\u2902',\n    'nvle;': '\\u2264\\u20d2',\n    'nvlt;': '<\\u20d2',\n    'nvltrie;': '\\u22b4\\u20d2',\n    'nvrArr;': '\\u2903',\n    'nvrtrie;': '\\u22b5\\u20d2',\n    'nvsim;': '\\u223c\\u20d2',\n    'nwarhk;': '\\u2923',\n    'nwArr;': '\\u21d6',\n    'nwarr;': '\\u2196',\n    'nwarrow;': '\\u2196',\n    'nwnear;': '\\u2927',\n    'Oacute': '\\xd3',\n    'oacute': '\\xf3',\n    'Oacute;': '\\xd3',\n    'oacute;': '\\xf3',\n    'oast;': '\\u229b',\n    'ocir;': '\\u229a',\n    'Ocirc': '\\xd4',\n    'ocirc': '\\xf4',\n    'Ocirc;': '\\xd4',\n    'ocirc;': '\\xf4',\n    'Ocy;': '\\u041e',\n    'ocy;': '\\u043e',\n    'odash;': '\\u229d',\n    'Odblac;': '\\u0150',\n    'odblac;': '\\u0151',\n    'odiv;': '\\u2a38',\n    'odot;': '\\u2299',\n    'odsold;': '\\u29bc',\n    'OElig;': '\\u0152',\n    'oelig;': '\\u0153',\n    'ofcir;': '\\u29bf',\n    'Ofr;': '\\U0001d512',\n    'ofr;': '\\U0001d52c',\n    'ogon;': '\\u02db',\n    'Ograve': '\\xd2',\n    'ograve': '\\xf2',\n    'Ograve;': '\\xd2',\n    'ograve;': '\\xf2',\n    'ogt;': '\\u29c1',\n    'ohbar;': '\\u29b5',\n    'ohm;': '\\u03a9',\n    'oint;': '\\u222e',\n    'olarr;': '\\u21ba',\n    'olcir;': '\\u29be',\n    'olcross;': '\\u29bb',\n    'oline;': '\\u203e',\n    'olt;': '\\u29c0',\n    'Omacr;': '\\u014c',\n    'omacr;': '\\u014d',\n    'Omega;': '\\u03a9',\n    'omega;': '\\u03c9',\n    'Omicron;': '\\u039f',\n    'omicron;': '\\u03bf',\n    'omid;': '\\u29b6',\n    'ominus;': '\\u2296',\n    'Oopf;': '\\U0001d546',\n    'oopf;': '\\U0001d560',\n    'opar;': '\\u29b7',\n    'OpenCurlyDoubleQuote;': '\\u201c',\n    'OpenCurlyQuote;': '\\u2018',\n    'operp;': '\\u29b9',\n    'oplus;': '\\u2295',\n    'Or;': '\\u2a54',\n    'or;': '\\u2228',\n    'orarr;': '\\u21bb',\n    'ord;': '\\u2a5d',\n    'order;': '\\u2134',\n    'orderof;': '\\u2134',\n    'ordf': '\\xaa',\n    'ordf;': '\\xaa',\n    'ordm': '\\xba',\n    'ordm;': '\\xba',\n    'origof;': '\\u22b6',\n    'oror;': '\\u2a56',\n    'orslope;': '\\u2a57',\n    'orv;': '\\u2a5b',\n    'oS;': '\\u24c8',\n    'Oscr;': '\\U0001d4aa',\n    'oscr;': '\\u2134',\n    'Oslash': '\\xd8',\n    'oslash': '\\xf8',\n    'Oslash;': '\\xd8',\n    'oslash;': '\\xf8',\n    'osol;': '\\u2298',\n    'Otilde': '\\xd5',\n    'otilde': '\\xf5',\n    'Otilde;': '\\xd5',\n    'otilde;': '\\xf5',\n    'Otimes;': '\\u2a37',\n    'otimes;': '\\u2297',\n    'otimesas;': '\\u2a36',\n    'Ouml': '\\xd6',\n    'ouml': '\\xf6',\n    'Ouml;': '\\xd6',\n    'ouml;': '\\xf6',\n    'ovbar;': '\\u233d',\n    'OverBar;': '\\u203e',\n    'OverBrace;': '\\u23de',\n    'OverBracket;': '\\u23b4',\n    'OverParenthesis;': '\\u23dc',\n    'par;': '\\u2225',\n    'para': '\\xb6',\n    'para;': '\\xb6',\n    'parallel;': '\\u2225',\n    'parsim;': '\\u2af3',\n    'parsl;': '\\u2afd',\n    'part;': '\\u2202',\n    'PartialD;': '\\u2202',\n    'Pcy;': '\\u041f',\n    'pcy;': '\\u043f',\n    'percnt;': '%',\n    'period;': '.',\n    'permil;': '\\u2030',\n    'perp;': '\\u22a5',\n    'pertenk;': '\\u2031',\n    'Pfr;': '\\U0001d513',\n    'pfr;': '\\U0001d52d',\n    'Phi;': '\\u03a6',\n    'phi;': '\\u03c6',\n    'phiv;': '\\u03d5',\n    'phmmat;': '\\u2133',\n    'phone;': '\\u260e',\n    'Pi;': '\\u03a0',\n    'pi;': '\\u03c0',\n    'pitchfork;': '\\u22d4',\n    'piv;': '\\u03d6',\n    'planck;': '\\u210f',\n    'planckh;': '\\u210e',\n    'plankv;': '\\u210f',\n    'plus;': '+',\n    'plusacir;': '\\u2a23',\n    'plusb;': '\\u229e',\n    'pluscir;': '\\u2a22',\n    'plusdo;': '\\u2214',\n    'plusdu;': '\\u2a25',\n    'pluse;': '\\u2a72',\n    'PlusMinus;': '\\xb1',\n    'plusmn': '\\xb1',\n    'plusmn;': '\\xb1',\n    'plussim;': '\\u2a26',\n    'plustwo;': '\\u2a27',\n    'pm;': '\\xb1',\n    'Poincareplane;': '\\u210c',\n    'pointint;': '\\u2a15',\n    'Popf;': '\\u2119',\n    'popf;': '\\U0001d561',\n    'pound': '\\xa3',\n    'pound;': '\\xa3',\n    'Pr;': '\\u2abb',\n    'pr;': '\\u227a',\n    'prap;': '\\u2ab7',\n    'prcue;': '\\u227c',\n    'prE;': '\\u2ab3',\n    'pre;': '\\u2aaf',\n    'prec;': '\\u227a',\n    'precapprox;': '\\u2ab7',\n    'preccurlyeq;': '\\u227c',\n    'Precedes;': '\\u227a',\n    'PrecedesEqual;': '\\u2aaf',\n    'PrecedesSlantEqual;': '\\u227c',\n    'PrecedesTilde;': '\\u227e',\n    'preceq;': '\\u2aaf',\n    'precnapprox;': '\\u2ab9',\n    'precneqq;': '\\u2ab5',\n    'precnsim;': '\\u22e8',\n    'precsim;': '\\u227e',\n    'Prime;': '\\u2033',\n    'prime;': '\\u2032',\n    'primes;': '\\u2119',\n    'prnap;': '\\u2ab9',\n    'prnE;': '\\u2ab5',\n    'prnsim;': '\\u22e8',\n    'prod;': '\\u220f',\n    'Product;': '\\u220f',\n    'profalar;': '\\u232e',\n    'profline;': '\\u2312',\n    'profsurf;': '\\u2313',\n    'prop;': '\\u221d',\n    'Proportion;': '\\u2237',\n    'Proportional;': '\\u221d',\n    'propto;': '\\u221d',\n    'prsim;': '\\u227e',\n    'prurel;': '\\u22b0',\n    'Pscr;': '\\U0001d4ab',\n    'pscr;': '\\U0001d4c5',\n    'Psi;': '\\u03a8',\n    'psi;': '\\u03c8',\n    'puncsp;': '\\u2008',\n    'Qfr;': '\\U0001d514',\n    'qfr;': '\\U0001d52e',\n    'qint;': '\\u2a0c',\n    'Qopf;': '\\u211a',\n    'qopf;': '\\U0001d562',\n    'qprime;': '\\u2057',\n    'Qscr;': '\\U0001d4ac',\n    'qscr;': '\\U0001d4c6',\n    'quaternions;': '\\u210d',\n    'quatint;': '\\u2a16',\n    'quest;': '?',\n    'questeq;': '\\u225f',\n    'QUOT': '\"',\n    'quot': '\"',\n    'QUOT;': '\"',\n    'quot;': '\"',\n    'rAarr;': '\\u21db',\n    'race;': '\\u223d\\u0331',\n    'Racute;': '\\u0154',\n    'racute;': '\\u0155',\n    'radic;': '\\u221a',\n    'raemptyv;': '\\u29b3',\n    'Rang;': '\\u27eb',\n    'rang;': '\\u27e9',\n    'rangd;': '\\u2992',\n    'range;': '\\u29a5',\n    'rangle;': '\\u27e9',\n    'raquo': '\\xbb',\n    'raquo;': '\\xbb',\n    'Rarr;': '\\u21a0',\n    'rArr;': '\\u21d2',\n    'rarr;': '\\u2192',\n    'rarrap;': '\\u2975',\n    'rarrb;': '\\u21e5',\n    'rarrbfs;': '\\u2920',\n    'rarrc;': '\\u2933',\n    'rarrfs;': '\\u291e',\n    'rarrhk;': '\\u21aa',\n    'rarrlp;': '\\u21ac',\n    'rarrpl;': '\\u2945',\n    'rarrsim;': '\\u2974',\n    'Rarrtl;': '\\u2916',\n    'rarrtl;': '\\u21a3',\n    'rarrw;': '\\u219d',\n    'rAtail;': '\\u291c',\n    'ratail;': '\\u291a',\n    'ratio;': '\\u2236',\n    'rationals;': '\\u211a',\n    'RBarr;': '\\u2910',\n    'rBarr;': '\\u290f',\n    'rbarr;': '\\u290d',\n    'rbbrk;': '\\u2773',\n    'rbrace;': '}',\n    'rbrack;': ']',\n    'rbrke;': '\\u298c',\n    'rbrksld;': '\\u298e',\n    'rbrkslu;': '\\u2990',\n    'Rcaron;': '\\u0158',\n    'rcaron;': '\\u0159',\n    'Rcedil;': '\\u0156',\n    'rcedil;': '\\u0157',\n    'rceil;': '\\u2309',\n    'rcub;': '}',\n    'Rcy;': '\\u0420',\n    'rcy;': '\\u0440',\n    'rdca;': '\\u2937',\n    'rdldhar;': '\\u2969',\n    'rdquo;': '\\u201d',\n    'rdquor;': '\\u201d',\n    'rdsh;': '\\u21b3',\n    'Re;': '\\u211c',\n    'real;': '\\u211c',\n    'realine;': '\\u211b',\n    'realpart;': '\\u211c',\n    'reals;': '\\u211d',\n    'rect;': '\\u25ad',\n    'REG': '\\xae',\n    'reg': '\\xae',\n    'REG;': '\\xae',\n    'reg;': '\\xae',\n    'ReverseElement;': '\\u220b',\n    'ReverseEquilibrium;': '\\u21cb',\n    'ReverseUpEquilibrium;': '\\u296f',\n    'rfisht;': '\\u297d',\n    'rfloor;': '\\u230b',\n    'Rfr;': '\\u211c',\n    'rfr;': '\\U0001d52f',\n    'rHar;': '\\u2964',\n    'rhard;': '\\u21c1',\n    'rharu;': '\\u21c0',\n    'rharul;': '\\u296c',\n    'Rho;': '\\u03a1',\n    'rho;': '\\u03c1',\n    'rhov;': '\\u03f1',\n    'RightAngleBracket;': '\\u27e9',\n    'RightArrow;': '\\u2192',\n    'Rightarrow;': '\\u21d2',\n    'rightarrow;': '\\u2192',\n    'RightArrowBar;': '\\u21e5',\n    'RightArrowLeftArrow;': '\\u21c4',\n    'rightarrowtail;': '\\u21a3',\n    'RightCeiling;': '\\u2309',\n    'RightDoubleBracket;': '\\u27e7',\n    'RightDownTeeVector;': '\\u295d',\n    'RightDownVector;': '\\u21c2',\n    'RightDownVectorBar;': '\\u2955',\n    'RightFloor;': '\\u230b',\n    'rightharpoondown;': '\\u21c1',\n    'rightharpoonup;': '\\u21c0',\n    'rightleftarrows;': '\\u21c4',\n    'rightleftharpoons;': '\\u21cc',\n    'rightrightarrows;': '\\u21c9',\n    'rightsquigarrow;': '\\u219d',\n    'RightTee;': '\\u22a2',\n    'RightTeeArrow;': '\\u21a6',\n    'RightTeeVector;': '\\u295b',\n    'rightthreetimes;': '\\u22cc',\n    'RightTriangle;': '\\u22b3',\n    'RightTriangleBar;': '\\u29d0',\n    'RightTriangleEqual;': '\\u22b5',\n    'RightUpDownVector;': '\\u294f',\n    'RightUpTeeVector;': '\\u295c',\n    'RightUpVector;': '\\u21be',\n    'RightUpVectorBar;': '\\u2954',\n    'RightVector;': '\\u21c0',\n    'RightVectorBar;': '\\u2953',\n    'ring;': '\\u02da',\n    'risingdotseq;': '\\u2253',\n    'rlarr;': '\\u21c4',\n    'rlhar;': '\\u21cc',\n    'rlm;': '\\u200f',\n    'rmoust;': '\\u23b1',\n    'rmoustache;': '\\u23b1',\n    'rnmid;': '\\u2aee',\n    'roang;': '\\u27ed',\n    'roarr;': '\\u21fe',\n    'robrk;': '\\u27e7',\n    'ropar;': '\\u2986',\n    'Ropf;': '\\u211d',\n    'ropf;': '\\U0001d563',\n    'roplus;': '\\u2a2e',\n    'rotimes;': '\\u2a35',\n    'RoundImplies;': '\\u2970',\n    'rpar;': ')',\n    'rpargt;': '\\u2994',\n    'rppolint;': '\\u2a12',\n    'rrarr;': '\\u21c9',\n    'Rrightarrow;': '\\u21db',\n    'rsaquo;': '\\u203a',\n    'Rscr;': '\\u211b',\n    'rscr;': '\\U0001d4c7',\n    'Rsh;': '\\u21b1',\n    'rsh;': '\\u21b1',\n    'rsqb;': ']',\n    'rsquo;': '\\u2019',\n    'rsquor;': '\\u2019',\n    'rthree;': '\\u22cc',\n    'rtimes;': '\\u22ca',\n    'rtri;': '\\u25b9',\n    'rtrie;': '\\u22b5',\n    'rtrif;': '\\u25b8',\n    'rtriltri;': '\\u29ce',\n    'RuleDelayed;': '\\u29f4',\n    'ruluhar;': '\\u2968',\n    'rx;': '\\u211e',\n    'Sacute;': '\\u015a',\n    'sacute;': '\\u015b',\n    'sbquo;': '\\u201a',\n    'Sc;': '\\u2abc',\n    'sc;': '\\u227b',\n    'scap;': '\\u2ab8',\n    'Scaron;': '\\u0160',\n    'scaron;': '\\u0161',\n    'sccue;': '\\u227d',\n    'scE;': '\\u2ab4',\n    'sce;': '\\u2ab0',\n    'Scedil;': '\\u015e',\n    'scedil;': '\\u015f',\n    'Scirc;': '\\u015c',\n    'scirc;': '\\u015d',\n    'scnap;': '\\u2aba',\n    'scnE;': '\\u2ab6',\n    'scnsim;': '\\u22e9',\n    'scpolint;': '\\u2a13',\n    'scsim;': '\\u227f',\n    'Scy;': '\\u0421',\n    'scy;': '\\u0441',\n    'sdot;': '\\u22c5',\n    'sdotb;': '\\u22a1',\n    'sdote;': '\\u2a66',\n    'searhk;': '\\u2925',\n    'seArr;': '\\u21d8',\n    'searr;': '\\u2198',\n    'searrow;': '\\u2198',\n    'sect': '\\xa7',\n    'sect;': '\\xa7',\n    'semi;': ';',\n    'seswar;': '\\u2929',\n    'setminus;': '\\u2216',\n    'setmn;': '\\u2216',\n    'sext;': '\\u2736',\n    'Sfr;': '\\U0001d516',\n    'sfr;': '\\U0001d530',\n    'sfrown;': '\\u2322',\n    'sharp;': '\\u266f',\n    'SHCHcy;': '\\u0429',\n    'shchcy;': '\\u0449',\n    'SHcy;': '\\u0428',\n    'shcy;': '\\u0448',\n    'ShortDownArrow;': '\\u2193',\n    'ShortLeftArrow;': '\\u2190',\n    'shortmid;': '\\u2223',\n    'shortparallel;': '\\u2225',\n    'ShortRightArrow;': '\\u2192',\n    'ShortUpArrow;': '\\u2191',\n    'shy': '\\xad',\n    'shy;': '\\xad',\n    'Sigma;': '\\u03a3',\n    'sigma;': '\\u03c3',\n    'sigmaf;': '\\u03c2',\n    'sigmav;': '\\u03c2',\n    'sim;': '\\u223c',\n    'simdot;': '\\u2a6a',\n    'sime;': '\\u2243',\n    'simeq;': '\\u2243',\n    'simg;': '\\u2a9e',\n    'simgE;': '\\u2aa0',\n    'siml;': '\\u2a9d',\n    'simlE;': '\\u2a9f',\n    'simne;': '\\u2246',\n    'simplus;': '\\u2a24',\n    'simrarr;': '\\u2972',\n    'slarr;': '\\u2190',\n    'SmallCircle;': '\\u2218',\n    'smallsetminus;': '\\u2216',\n    'smashp;': '\\u2a33',\n    'smeparsl;': '\\u29e4',\n    'smid;': '\\u2223',\n    'smile;': '\\u2323',\n    'smt;': '\\u2aaa',\n    'smte;': '\\u2aac',\n    'smtes;': '\\u2aac\\ufe00',\n    'SOFTcy;': '\\u042c',\n    'softcy;': '\\u044c',\n    'sol;': '/',\n    'solb;': '\\u29c4',\n    'solbar;': '\\u233f',\n    'Sopf;': '\\U0001d54a',\n    'sopf;': '\\U0001d564',\n    'spades;': '\\u2660',\n    'spadesuit;': '\\u2660',\n    'spar;': '\\u2225',\n    'sqcap;': '\\u2293',\n    'sqcaps;': '\\u2293\\ufe00',\n    'sqcup;': '\\u2294',\n    'sqcups;': '\\u2294\\ufe00',\n    'Sqrt;': '\\u221a',\n    'sqsub;': '\\u228f',\n    'sqsube;': '\\u2291',\n    'sqsubset;': '\\u228f',\n    'sqsubseteq;': '\\u2291',\n    'sqsup;': '\\u2290',\n    'sqsupe;': '\\u2292',\n    'sqsupset;': '\\u2290',\n    'sqsupseteq;': '\\u2292',\n    'squ;': '\\u25a1',\n    'Square;': '\\u25a1',\n    'square;': '\\u25a1',\n    'SquareIntersection;': '\\u2293',\n    'SquareSubset;': '\\u228f',\n    'SquareSubsetEqual;': '\\u2291',\n    'SquareSuperset;': '\\u2290',\n    'SquareSupersetEqual;': '\\u2292',\n    'SquareUnion;': '\\u2294',\n    'squarf;': '\\u25aa',\n    'squf;': '\\u25aa',\n    'srarr;': '\\u2192',\n    'Sscr;': '\\U0001d4ae',\n    'sscr;': '\\U0001d4c8',\n    'ssetmn;': '\\u2216',\n    'ssmile;': '\\u2323',\n    'sstarf;': '\\u22c6',\n    'Star;': '\\u22c6',\n    'star;': '\\u2606',\n    'starf;': '\\u2605',\n    'straightepsilon;': '\\u03f5',\n    'straightphi;': '\\u03d5',\n    'strns;': '\\xaf',\n    'Sub;': '\\u22d0',\n    'sub;': '\\u2282',\n    'subdot;': '\\u2abd',\n    'subE;': '\\u2ac5',\n    'sube;': '\\u2286',\n    'subedot;': '\\u2ac3',\n    'submult;': '\\u2ac1',\n    'subnE;': '\\u2acb',\n    'subne;': '\\u228a',\n    'subplus;': '\\u2abf',\n    'subrarr;': '\\u2979',\n    'Subset;': '\\u22d0',\n    'subset;': '\\u2282',\n    'subseteq;': '\\u2286',\n    'subseteqq;': '\\u2ac5',\n    'SubsetEqual;': '\\u2286',\n    'subsetneq;': '\\u228a',\n    'subsetneqq;': '\\u2acb',\n    'subsim;': '\\u2ac7',\n    'subsub;': '\\u2ad5',\n    'subsup;': '\\u2ad3',\n    'succ;': '\\u227b',\n    'succapprox;': '\\u2ab8',\n    'succcurlyeq;': '\\u227d',\n    'Succeeds;': '\\u227b',\n    'SucceedsEqual;': '\\u2ab0',\n    'SucceedsSlantEqual;': '\\u227d',\n    'SucceedsTilde;': '\\u227f',\n    'succeq;': '\\u2ab0',\n    'succnapprox;': '\\u2aba',\n    'succneqq;': '\\u2ab6',\n    'succnsim;': '\\u22e9',\n    'succsim;': '\\u227f',\n    'SuchThat;': '\\u220b',\n    'Sum;': '\\u2211',\n    'sum;': '\\u2211',\n    'sung;': '\\u266a',\n    'sup1': '\\xb9',\n    'sup1;': '\\xb9',\n    'sup2': '\\xb2',\n    'sup2;': '\\xb2',\n    'sup3': '\\xb3',\n    'sup3;': '\\xb3',\n    'Sup;': '\\u22d1',\n    'sup;': '\\u2283',\n    'supdot;': '\\u2abe',\n    'supdsub;': '\\u2ad8',\n    'supE;': '\\u2ac6',\n    'supe;': '\\u2287',\n    'supedot;': '\\u2ac4',\n    'Superset;': '\\u2283',\n    'SupersetEqual;': '\\u2287',\n    'suphsol;': '\\u27c9',\n    'suphsub;': '\\u2ad7',\n    'suplarr;': '\\u297b',\n    'supmult;': '\\u2ac2',\n    'supnE;': '\\u2acc',\n    'supne;': '\\u228b',\n    'supplus;': '\\u2ac0',\n    'Supset;': '\\u22d1',\n    'supset;': '\\u2283',\n    'supseteq;': '\\u2287',\n    'supseteqq;': '\\u2ac6',\n    'supsetneq;': '\\u228b',\n    'supsetneqq;': '\\u2acc',\n    'supsim;': '\\u2ac8',\n    'supsub;': '\\u2ad4',\n    'supsup;': '\\u2ad6',\n    'swarhk;': '\\u2926',\n    'swArr;': '\\u21d9',\n    'swarr;': '\\u2199',\n    'swarrow;': '\\u2199',\n    'swnwar;': '\\u292a',\n    'szlig': '\\xdf',\n    'szlig;': '\\xdf',\n    'Tab;': '\\t',\n    'target;': '\\u2316',\n    'Tau;': '\\u03a4',\n    'tau;': '\\u03c4',\n    'tbrk;': '\\u23b4',\n    'Tcaron;': '\\u0164',\n    'tcaron;': '\\u0165',\n    'Tcedil;': '\\u0162',\n    'tcedil;': '\\u0163',\n    'Tcy;': '\\u0422',\n    'tcy;': '\\u0442',\n    'tdot;': '\\u20db',\n    'telrec;': '\\u2315',\n    'Tfr;': '\\U0001d517',\n    'tfr;': '\\U0001d531',\n    'there4;': '\\u2234',\n    'Therefore;': '\\u2234',\n    'therefore;': '\\u2234',\n    'Theta;': '\\u0398',\n    'theta;': '\\u03b8',\n    'thetasym;': '\\u03d1',\n    'thetav;': '\\u03d1',\n    'thickapprox;': '\\u2248',\n    'thicksim;': '\\u223c',\n    'ThickSpace;': '\\u205f\\u200a',\n    'thinsp;': '\\u2009',\n    'ThinSpace;': '\\u2009',\n    'thkap;': '\\u2248',\n    'thksim;': '\\u223c',\n    'THORN': '\\xde',\n    'thorn': '\\xfe',\n    'THORN;': '\\xde',\n    'thorn;': '\\xfe',\n    'Tilde;': '\\u223c',\n    'tilde;': '\\u02dc',\n    'TildeEqual;': '\\u2243',\n    'TildeFullEqual;': '\\u2245',\n    'TildeTilde;': '\\u2248',\n    'times': '\\xd7',\n    'times;': '\\xd7',\n    'timesb;': '\\u22a0',\n    'timesbar;': '\\u2a31',\n    'timesd;': '\\u2a30',\n    'tint;': '\\u222d',\n    'toea;': '\\u2928',\n    'top;': '\\u22a4',\n    'topbot;': '\\u2336',\n    'topcir;': '\\u2af1',\n    'Topf;': '\\U0001d54b',\n    'topf;': '\\U0001d565',\n    'topfork;': '\\u2ada',\n    'tosa;': '\\u2929',\n    'tprime;': '\\u2034',\n    'TRADE;': '\\u2122',\n    'trade;': '\\u2122',\n    'triangle;': '\\u25b5',\n    'triangledown;': '\\u25bf',\n    'triangleleft;': '\\u25c3',\n    'trianglelefteq;': '\\u22b4',\n    'triangleq;': '\\u225c',\n    'triangleright;': '\\u25b9',\n    'trianglerighteq;': '\\u22b5',\n    'tridot;': '\\u25ec',\n    'trie;': '\\u225c',\n    'triminus;': '\\u2a3a',\n    'TripleDot;': '\\u20db',\n    'triplus;': '\\u2a39',\n    'trisb;': '\\u29cd',\n    'tritime;': '\\u2a3b',\n    'trpezium;': '\\u23e2',\n    'Tscr;': '\\U0001d4af',\n    'tscr;': '\\U0001d4c9',\n    'TScy;': '\\u0426',\n    'tscy;': '\\u0446',\n    'TSHcy;': '\\u040b',\n    'tshcy;': '\\u045b',\n    'Tstrok;': '\\u0166',\n    'tstrok;': '\\u0167',\n    'twixt;': '\\u226c',\n    'twoheadleftarrow;': '\\u219e',\n    'twoheadrightarrow;': '\\u21a0',\n    'Uacute': '\\xda',\n    'uacute': '\\xfa',\n    'Uacute;': '\\xda',\n    'uacute;': '\\xfa',\n    'Uarr;': '\\u219f',\n    'uArr;': '\\u21d1',\n    'uarr;': '\\u2191',\n    'Uarrocir;': '\\u2949',\n    'Ubrcy;': '\\u040e',\n    'ubrcy;': '\\u045e',\n    'Ubreve;': '\\u016c',\n    'ubreve;': '\\u016d',\n    'Ucirc': '\\xdb',\n    'ucirc': '\\xfb',\n    'Ucirc;': '\\xdb',\n    'ucirc;': '\\xfb',\n    'Ucy;': '\\u0423',\n    'ucy;': '\\u0443',\n    'udarr;': '\\u21c5',\n    'Udblac;': '\\u0170',\n    'udblac;': '\\u0171',\n    'udhar;': '\\u296e',\n    'ufisht;': '\\u297e',\n    'Ufr;': '\\U0001d518',\n    'ufr;': '\\U0001d532',\n    'Ugrave': '\\xd9',\n    'ugrave': '\\xf9',\n    'Ugrave;': '\\xd9',\n    'ugrave;': '\\xf9',\n    'uHar;': '\\u2963',\n    'uharl;': '\\u21bf',\n    'uharr;': '\\u21be',\n    'uhblk;': '\\u2580',\n    'ulcorn;': '\\u231c',\n    'ulcorner;': '\\u231c',\n    'ulcrop;': '\\u230f',\n    'ultri;': '\\u25f8',\n    'Umacr;': '\\u016a',\n    'umacr;': '\\u016b',\n    'uml': '\\xa8',\n    'uml;': '\\xa8',\n    'UnderBar;': '_',\n    'UnderBrace;': '\\u23df',\n    'UnderBracket;': '\\u23b5',\n    'UnderParenthesis;': '\\u23dd',\n    'Union;': '\\u22c3',\n    'UnionPlus;': '\\u228e',\n    'Uogon;': '\\u0172',\n    'uogon;': '\\u0173',\n    'Uopf;': '\\U0001d54c',\n    'uopf;': '\\U0001d566',\n    'UpArrow;': '\\u2191',\n    'Uparrow;': '\\u21d1',\n    'uparrow;': '\\u2191',\n    'UpArrowBar;': '\\u2912',\n    'UpArrowDownArrow;': '\\u21c5',\n    'UpDownArrow;': '\\u2195',\n    'Updownarrow;': '\\u21d5',\n    'updownarrow;': '\\u2195',\n    'UpEquilibrium;': '\\u296e',\n    'upharpoonleft;': '\\u21bf',\n    'upharpoonright;': '\\u21be',\n    'uplus;': '\\u228e',\n    'UpperLeftArrow;': '\\u2196',\n    'UpperRightArrow;': '\\u2197',\n    'Upsi;': '\\u03d2',\n    'upsi;': '\\u03c5',\n    'upsih;': '\\u03d2',\n    'Upsilon;': '\\u03a5',\n    'upsilon;': '\\u03c5',\n    'UpTee;': '\\u22a5',\n    'UpTeeArrow;': '\\u21a5',\n    'upuparrows;': '\\u21c8',\n    'urcorn;': '\\u231d',\n    'urcorner;': '\\u231d',\n    'urcrop;': '\\u230e',\n    'Uring;': '\\u016e',\n    'uring;': '\\u016f',\n    'urtri;': '\\u25f9',\n    'Uscr;': '\\U0001d4b0',\n    'uscr;': '\\U0001d4ca',\n    'utdot;': '\\u22f0',\n    'Utilde;': '\\u0168',\n    'utilde;': '\\u0169',\n    'utri;': '\\u25b5',\n    'utrif;': '\\u25b4',\n    'uuarr;': '\\u21c8',\n    'Uuml': '\\xdc',\n    'uuml': '\\xfc',\n    'Uuml;': '\\xdc',\n    'uuml;': '\\xfc',\n    'uwangle;': '\\u29a7',\n    'vangrt;': '\\u299c',\n    'varepsilon;': '\\u03f5',\n    'varkappa;': '\\u03f0',\n    'varnothing;': '\\u2205',\n    'varphi;': '\\u03d5',\n    'varpi;': '\\u03d6',\n    'varpropto;': '\\u221d',\n    'vArr;': '\\u21d5',\n    'varr;': '\\u2195',\n    'varrho;': '\\u03f1',\n    'varsigma;': '\\u03c2',\n    'varsubsetneq;': '\\u228a\\ufe00',\n    'varsubsetneqq;': '\\u2acb\\ufe00',\n    'varsupsetneq;': '\\u228b\\ufe00',\n    'varsupsetneqq;': '\\u2acc\\ufe00',\n    'vartheta;': '\\u03d1',\n    'vartriangleleft;': '\\u22b2',\n    'vartriangleright;': '\\u22b3',\n    'Vbar;': '\\u2aeb',\n    'vBar;': '\\u2ae8',\n    'vBarv;': '\\u2ae9',\n    'Vcy;': '\\u0412',\n    'vcy;': '\\u0432',\n    'VDash;': '\\u22ab',\n    'Vdash;': '\\u22a9',\n    'vDash;': '\\u22a8',\n    'vdash;': '\\u22a2',\n    'Vdashl;': '\\u2ae6',\n    'Vee;': '\\u22c1',\n    'vee;': '\\u2228',\n    'veebar;': '\\u22bb',\n    'veeeq;': '\\u225a',\n    'vellip;': '\\u22ee',\n    'Verbar;': '\\u2016',\n    'verbar;': '|',\n    'Vert;': '\\u2016',\n    'vert;': '|',\n    'VerticalBar;': '\\u2223',\n    'VerticalLine;': '|',\n    'VerticalSeparator;': '\\u2758',\n    'VerticalTilde;': '\\u2240',\n    'VeryThinSpace;': '\\u200a',\n    'Vfr;': '\\U0001d519',\n    'vfr;': '\\U0001d533',\n    'vltri;': '\\u22b2',\n    'vnsub;': '\\u2282\\u20d2',\n    'vnsup;': '\\u2283\\u20d2',\n    'Vopf;': '\\U0001d54d',\n    'vopf;': '\\U0001d567',\n    'vprop;': '\\u221d',\n    'vrtri;': '\\u22b3',\n    'Vscr;': '\\U0001d4b1',\n    'vscr;': '\\U0001d4cb',\n    'vsubnE;': '\\u2acb\\ufe00',\n    'vsubne;': '\\u228a\\ufe00',\n    'vsupnE;': '\\u2acc\\ufe00',\n    'vsupne;': '\\u228b\\ufe00',\n    'Vvdash;': '\\u22aa',\n    'vzigzag;': '\\u299a',\n    'Wcirc;': '\\u0174',\n    'wcirc;': '\\u0175',\n    'wedbar;': '\\u2a5f',\n    'Wedge;': '\\u22c0',\n    'wedge;': '\\u2227',\n    'wedgeq;': '\\u2259',\n    'weierp;': '\\u2118',\n    'Wfr;': '\\U0001d51a',\n    'wfr;': '\\U0001d534',\n    'Wopf;': '\\U0001d54e',\n    'wopf;': '\\U0001d568',\n    'wp;': '\\u2118',\n    'wr;': '\\u2240',\n    'wreath;': '\\u2240',\n    'Wscr;': '\\U0001d4b2',\n    'wscr;': '\\U0001d4cc',\n    'xcap;': '\\u22c2',\n    'xcirc;': '\\u25ef',\n    'xcup;': '\\u22c3',\n    'xdtri;': '\\u25bd',\n    'Xfr;': '\\U0001d51b',\n    'xfr;': '\\U0001d535',\n    'xhArr;': '\\u27fa',\n    'xharr;': '\\u27f7',\n    'Xi;': '\\u039e',\n    'xi;': '\\u03be',\n    'xlArr;': '\\u27f8',\n    'xlarr;': '\\u27f5',\n    'xmap;': '\\u27fc',\n    'xnis;': '\\u22fb',\n    'xodot;': '\\u2a00',\n    'Xopf;': '\\U0001d54f',\n    'xopf;': '\\U0001d569',\n    'xoplus;': '\\u2a01',\n    'xotime;': '\\u2a02',\n    'xrArr;': '\\u27f9',\n    'xrarr;': '\\u27f6',\n    'Xscr;': '\\U0001d4b3',\n    'xscr;': '\\U0001d4cd',\n    'xsqcup;': '\\u2a06',\n    'xuplus;': '\\u2a04',\n    'xutri;': '\\u25b3',\n    'xvee;': '\\u22c1',\n    'xwedge;': '\\u22c0',\n    'Yacute': '\\xdd',\n    'yacute': '\\xfd',\n    'Yacute;': '\\xdd',\n    'yacute;': '\\xfd',\n    'YAcy;': '\\u042f',\n    'yacy;': '\\u044f',\n    'Ycirc;': '\\u0176',\n    'ycirc;': '\\u0177',\n    'Ycy;': '\\u042b',\n    'ycy;': '\\u044b',\n    'yen': '\\xa5',\n    'yen;': '\\xa5',\n    'Yfr;': '\\U0001d51c',\n    'yfr;': '\\U0001d536',\n    'YIcy;': '\\u0407',\n    'yicy;': '\\u0457',\n    'Yopf;': '\\U0001d550',\n    'yopf;': '\\U0001d56a',\n    'Yscr;': '\\U0001d4b4',\n    'yscr;': '\\U0001d4ce',\n    'YUcy;': '\\u042e',\n    'yucy;': '\\u044e',\n    'yuml': '\\xff',\n    'Yuml;': '\\u0178',\n    'yuml;': '\\xff',\n    'Zacute;': '\\u0179',\n    'zacute;': '\\u017a',\n    'Zcaron;': '\\u017d',\n    'zcaron;': '\\u017e',\n    'Zcy;': '\\u0417',\n    'zcy;': '\\u0437',\n    'Zdot;': '\\u017b',\n    'zdot;': '\\u017c',\n    'zeetrf;': '\\u2128',\n    'ZeroWidthSpace;': '\\u200b',\n    'Zeta;': '\\u0396',\n    'zeta;': '\\u03b6',\n    'Zfr;': '\\u2128',\n    'zfr;': '\\U0001d537',\n    'ZHcy;': '\\u0416',\n    'zhcy;': '\\u0436',\n    'zigrarr;': '\\u21dd',\n    'Zopf;': '\\u2124',\n    'zopf;': '\\U0001d56b',\n    'Zscr;': '\\U0001d4b5',\n    'zscr;': '\\U0001d4cf',\n    'zwj;': '\\u200d',\n    'zwnj;': '\\u200c',\n}\ncodepoint2name = {}\nentitydefs = {}\nfor (name, codepoint) in name2codepoint.items():\n    codepoint2name[codepoint] = name\n    entitydefs[name] = chr(codepoint)\ndel name, codepoint\n", "/Lib/sre_constants.py": "MAXREPEAT = 2147483648\n\"\"\"Internal support module for sre\"\"\"\nMAGIC = 20031017\nclass error(Exception):\n    pass\nFAILURE = \"failure\"\nSUCCESS = \"success\"\nANY = \"any\"\nANY_ALL = \"any_all\"\nASSERT = \"assert\"\nASSERT_NOT = \"assert_not\"\nAT = \"at\"\nBIGCHARSET = \"bigcharset\"\nBRANCH = \"branch\"\nCALL = \"call\"\nCATEGORY = \"category\"\nCHARSET = \"charset\"\nGROUPREF = \"groupref\"\nGROUPREF_IGNORE = \"groupref_ignore\"\nGROUPREF_EXISTS = \"groupref_exists\"\nIN = \"in\"\nIN_IGNORE = \"in_ignore\"\nINFO = \"info\"\nJUMP = \"jump\"\nLITERAL = \"literal\"\nLITERAL_IGNORE = \"literal_ignore\"\nMARK = \"mark\"\nMAX_REPEAT = \"max_repeat\"\nMAX_UNTIL = \"max_until\"\nMIN_REPEAT = \"min_repeat\"\nMIN_UNTIL = \"min_until\"\nNEGATE = \"negate\"\nNOT_LITERAL = \"not_literal\"\nNOT_LITERAL_IGNORE = \"not_literal_ignore\"\nRANGE = \"range\"\nREPEAT = \"repeat\"\nREPEAT_ONE = \"repeat_one\"\nSUBPATTERN = \"subpattern\"\nMIN_REPEAT_ONE = \"min_repeat_one\"\nAT_BEGINNING = \"at_beginning\"\nAT_BEGINNING_LINE = \"at_beginning_line\"\nAT_BEGINNING_STRING = \"at_beginning_string\"\nAT_BOUNDARY = \"at_boundary\"\nAT_NON_BOUNDARY = \"at_non_boundary\"\nAT_END = \"at_end\"\nAT_END_LINE = \"at_end_line\"\nAT_END_STRING = \"at_end_string\"\nAT_LOC_BOUNDARY = \"at_loc_boundary\"\nAT_LOC_NON_BOUNDARY = \"at_loc_non_boundary\"\nAT_UNI_BOUNDARY = \"at_uni_boundary\"\nAT_UNI_NON_BOUNDARY = \"at_uni_non_boundary\"\nCATEGORY_DIGIT = \"category_digit\"\nCATEGORY_NOT_DIGIT = \"category_not_digit\"\nCATEGORY_SPACE = \"category_space\"\nCATEGORY_NOT_SPACE = \"category_not_space\"\nCATEGORY_WORD = \"category_word\"\nCATEGORY_NOT_WORD = \"category_not_word\"\nCATEGORY_LINEBREAK = \"category_linebreak\"\nCATEGORY_NOT_LINEBREAK = \"category_not_linebreak\"\nCATEGORY_LOC_WORD = \"category_loc_word\"\nCATEGORY_LOC_NOT_WORD = \"category_loc_not_word\"\nCATEGORY_UNI_DIGIT = \"category_uni_digit\"\nCATEGORY_UNI_NOT_DIGIT = \"category_uni_not_digit\"\nCATEGORY_UNI_SPACE = \"category_uni_space\"\nCATEGORY_UNI_NOT_SPACE = \"category_uni_not_space\"\nCATEGORY_UNI_WORD = \"category_uni_word\"\nCATEGORY_UNI_NOT_WORD = \"category_uni_not_word\"\nCATEGORY_UNI_LINEBREAK = \"category_uni_linebreak\"\nCATEGORY_UNI_NOT_LINEBREAK = \"category_uni_not_linebreak\"\nOPCODES = [\n    FAILURE, SUCCESS,\n    ANY, ANY_ALL,\n    ASSERT, ASSERT_NOT,\n    AT,\n    BRANCH,\n    CALL,\n    CATEGORY,\n    CHARSET, BIGCHARSET,\n    GROUPREF, GROUPREF_EXISTS, GROUPREF_IGNORE,\n    IN, IN_IGNORE,\n    INFO,\n    JUMP,\n    LITERAL, LITERAL_IGNORE,\n    MARK,\n    MAX_UNTIL,\n    MIN_UNTIL,\n    NOT_LITERAL, NOT_LITERAL_IGNORE,\n    NEGATE,\n    RANGE,\n    REPEAT,\n    REPEAT_ONE,\n    SUBPATTERN,\n    MIN_REPEAT_ONE\n]\nATCODES = [\n    AT_BEGINNING, AT_BEGINNING_LINE, AT_BEGINNING_STRING, AT_BOUNDARY,\n    AT_NON_BOUNDARY, AT_END, AT_END_LINE, AT_END_STRING,\n    AT_LOC_BOUNDARY, AT_LOC_NON_BOUNDARY, AT_UNI_BOUNDARY,\n    AT_UNI_NON_BOUNDARY\n]\nCHCODES = [\n    CATEGORY_DIGIT, CATEGORY_NOT_DIGIT, CATEGORY_SPACE,\n    CATEGORY_NOT_SPACE, CATEGORY_WORD, CATEGORY_NOT_WORD,\n    CATEGORY_LINEBREAK, CATEGORY_NOT_LINEBREAK, CATEGORY_LOC_WORD,\n    CATEGORY_LOC_NOT_WORD, CATEGORY_UNI_DIGIT, CATEGORY_UNI_NOT_DIGIT,\n    CATEGORY_UNI_SPACE, CATEGORY_UNI_NOT_SPACE, CATEGORY_UNI_WORD,\n    CATEGORY_UNI_NOT_WORD, CATEGORY_UNI_LINEBREAK,\n    CATEGORY_UNI_NOT_LINEBREAK\n]\ndef makedict(list):\n    d = {}\n    i = 0\n    for item in list:\n        d[item] = i\n        i = i + 1\n    return d\nOPCODES = makedict(OPCODES)\nATCODES = makedict(ATCODES)\nCHCODES = makedict(CHCODES)\nOP_IGNORE = {\n    GROUPREF: GROUPREF_IGNORE,\n    IN: IN_IGNORE,\n    LITERAL: LITERAL_IGNORE,\n    NOT_LITERAL: NOT_LITERAL_IGNORE\n}\nAT_MULTILINE = {\n    AT_BEGINNING: AT_BEGINNING_LINE,\n    AT_END: AT_END_LINE\n}\nAT_LOCALE = {\n    AT_BOUNDARY: AT_LOC_BOUNDARY,\n    AT_NON_BOUNDARY: AT_LOC_NON_BOUNDARY\n}\nAT_UNICODE = {\n    AT_BOUNDARY: AT_UNI_BOUNDARY,\n    AT_NON_BOUNDARY: AT_UNI_NON_BOUNDARY\n}\nCH_LOCALE = {\n    CATEGORY_DIGIT: CATEGORY_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_LOC_WORD,\n    CATEGORY_NOT_WORD: CATEGORY_LOC_NOT_WORD,\n    CATEGORY_LINEBREAK: CATEGORY_LINEBREAK,\n    CATEGORY_NOT_LINEBREAK: CATEGORY_NOT_LINEBREAK\n}\nCH_UNICODE = {\n    CATEGORY_DIGIT: CATEGORY_UNI_DIGIT,\n    CATEGORY_NOT_DIGIT: CATEGORY_UNI_NOT_DIGIT,\n    CATEGORY_SPACE: CATEGORY_UNI_SPACE,\n    CATEGORY_NOT_SPACE: CATEGORY_UNI_NOT_SPACE,\n    CATEGORY_WORD: CATEGORY_UNI_WORD,\n    CATEGORY_NOT_WORD: CATEGORY_UNI_NOT_WORD,\n    CATEGORY_LINEBREAK: CATEGORY_UNI_LINEBREAK,\n    CATEGORY_NOT_LINEBREAK: CATEGORY_UNI_NOT_LINEBREAK\n}\nSRE_FLAG_TEMPLATE = 1 # template mode (disable backtracking)\nSRE_FLAG_IGNORECASE = 2 # case insensitive\nSRE_FLAG_LOCALE = 4 # honour system locale\nSRE_FLAG_MULTILINE = 8 # treat target as multiline string\nSRE_FLAG_DOTALL = 16 # treat target as a single string\nSRE_FLAG_UNICODE = 32 # use unicode \"locale\"\nSRE_FLAG_VERBOSE = 64 # ignore whitespace and comments\nSRE_FLAG_DEBUG = 128 # debugging\nSRE_FLAG_ASCII = 256 # use ascii \"locale\"\nSRE_INFO_PREFIX = 1 # has prefix\nSRE_INFO_LITERAL = 2 # entire pattern is literal (given by prefix)\nSRE_INFO_CHARSET = 4 # pattern starts with character from given set\nif __name__ == \"__main__\":\n    def dump(f, d, prefix):\n        items = sorted(d.items(), key=lambda a: a[1])\n        for k, v in items:\n            f.write(\"#define %s_%s %s\\n\" % (prefix, k.upper(), v))\n    f = open(\"sre_constants.h\", \"w\")\n    f.write(\"\"\"\\\n/*\n * Secret Labs' Regular Expression Engine\n *\n * regular expression matching engine\n *\n * NOTE: This file is generated by sre_constants.py.  If you need\n * to change anything in here, edit sre_constants.py and run it.\n *\n * Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.\n *\n * See the _sre.c file for information on usage and redistribution.\n */\n\"\"\")\n    f.write(\"#define SRE_MAGIC %d\\n\" % MAGIC)\n    dump(f, OPCODES, \"SRE_OP\")\n    dump(f, ATCODES, \"SRE\")\n    dump(f, CHCODES, \"SRE\")\n    f.write(\"#define SRE_FLAG_TEMPLATE %d\\n\" % SRE_FLAG_TEMPLATE)\n    f.write(\"#define SRE_FLAG_IGNORECASE %d\\n\" % SRE_FLAG_IGNORECASE)\n    f.write(\"#define SRE_FLAG_LOCALE %d\\n\" % SRE_FLAG_LOCALE)\n    f.write(\"#define SRE_FLAG_MULTILINE %d\\n\" % SRE_FLAG_MULTILINE)\n    f.write(\"#define SRE_FLAG_DOTALL %d\\n\" % SRE_FLAG_DOTALL)\n    f.write(\"#define SRE_FLAG_UNICODE %d\\n\" % SRE_FLAG_UNICODE)\n    f.write(\"#define SRE_FLAG_VERBOSE %d\\n\" % SRE_FLAG_VERBOSE)\n    f.write(\"#define SRE_INFO_PREFIX %d\\n\" % SRE_INFO_PREFIX)\n    f.write(\"#define SRE_INFO_LITERAL %d\\n\" % SRE_INFO_LITERAL)\n    f.write(\"#define SRE_INFO_CHARSET %d\\n\" % SRE_INFO_CHARSET)\n    f.close()\n    print(\"done\")\n", "/Lib/random.py": "\"\"\"Random variable generators.\n    integers\n    --------\n           uniform within range\n    sequences\n    ---------\n           pick random element\n           pick random sample\n           generate random permutation\n    distributions on the real line:\n    ------------------------------\n           uniform\n           triangular\n           normal (Gaussian)\n           lognormal\n           negative exponential\n           gamma\n           beta\n           pareto\n           Weibull\n    distributions on the circle (angles 0 to 2pi)\n    ---------------------------------------------\n           circular uniform\n           von Mises\nGeneral notes on the underlying Mersenne Twister core generator:\n* The period is 2**19937-1.\n* It is one of the most extensively tested generators in existence.\n* The random() method is implemented in C, executes in a single Python step,\n  and is, therefore, threadsafe.\n\"\"\"\nfrom warnings import warn as _warn\nfrom types import MethodType as _MethodType, BuiltinMethodType as _BuiltinMethodType\nfrom math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil\nfrom math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin\nfrom os import urandom as _urandom\nfrom collections import Set as _Set, Sequence as _Sequence\nfrom hashlib import sha512 as _sha512\n__all__ = [\"Random\",\"seed\",\"random\",\"uniform\",\"randint\",\"choice\",\"sample\",\n           \"randrange\",\"shuffle\",\"normalvariate\",\"lognormvariate\",\n           \"expovariate\",\"vonmisesvariate\",\"gammavariate\",\"triangular\",\n           \"gauss\",\"betavariate\",\"paretovariate\",\"weibullvariate\",\n           \"getstate\",\"setstate\", \"getrandbits\",\n           \"SystemRandom\"]\nNV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)\nTWOPI = 2.0*_pi\nLOG4 = _log(4.0)\nSG_MAGICCONST = 1.0 + _log(4.5)\nBPF = 53        # Number of bits in a float\nRECIP_BPF = 2**-BPF\nimport _random\nclass Random(_random.Random):\n    \"\"\"Random number generator base class used by bound module functions.\n    Used to instantiate instances of Random to get generators that don't\n    share state.\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), and setstate().\n    Optionally, implement a getrandbits() method so that randrange()\n    can cover arbitrarily large ranges.\n    \"\"\"\n    VERSION = 3     # used by getstate/setstate\n    def __init__(self, x=None):\n        \"\"\"Initialize an instance.\n        Optional argument x controls seeding, as for Random.seed().\n        \"\"\"\n        self.seed(x)\n        self.gauss_next = None\n    def seed(self, a=None, version=2):\n        \"\"\"Initialize internal state from hashable object.\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n        For version 2 (the default), all of the bits are used if *a* is a str,\n        bytes, or bytearray.  For version 1, the hash() of *a* is used instead.\n        If *a* is an int, all bits are used.\n        \"\"\"\n        if a is None:\n            try:\n                a = int.from_bytes(_urandom(32), 'big')\n            except NotImplementedError:\n                import time\n                a = int(time.time() * 256) # use fractional seconds\n        if version == 2:\n            if isinstance(a, (str, bytes, bytearray)):\n                if isinstance(a, str):\n                    a = a.encode()\n                a += _sha512(a).digest()\n                a = int.from_bytes(a, 'big')\n        _random.Random.seed(self, a)\n        self.gauss_next = None\n    def getstate(self):\n        \"\"\"Return internal state; can be passed to setstate() later.\"\"\"\n        return self.VERSION, super().getstate(), self.gauss_next\n    def setstate(self, state):\n        \"\"\"Restore internal state from object returned by getstate().\"\"\"\n        version = state[0]\n        if version == 3:\n            version, internalstate, self.gauss_next = state\n            super().setstate(internalstate)\n        elif version == 2:\n            version, internalstate, self.gauss_next = state\n            try:\n                internalstate = tuple(x % (2**32) for x in internalstate)\n            except ValueError as e:\n                raise TypeError(e)\n            super().setstate(internalstate)\n        else:\n            raise ValueError(\"state with version %s passed to \"\n                             \"Random.setstate() of version %s\" %\n                             (version, self.VERSION))\n    def __getstate__(self): # for pickle\n        return self.getstate()\n    def __setstate__(self, state):  # for pickle\n        self.setstate(state)\n    def __reduce__(self):\n        return self.__class__, (), self.getstate()\n    def randrange(self, start, stop=None, step=1, int=int):\n        \"\"\"Choose a random item from range(start, stop[, step]).\n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n        Do not supply the 'int' argument.\n        \"\"\"\n        istart = int(start)\n        if istart != start:\n            raise ValueError(\"non-integer arg 1 for randrange()\")\n        if stop is None:\n            if istart > 0:\n                return self._randbelow(istart)\n            raise ValueError(\"empty range for randrange()\")\n        istop = int(stop)\n        if istop != stop:\n            raise ValueError(\"non-integer stop for randrange()\")\n        width = istop - istart\n        if step == 1 and width > 0:\n            return istart + self._randbelow(width)\n        if step == 1:\n            raise ValueError(\"empty range for randrange() (%d,%d, %d)\" % (istart, istop, width))\n        istep = int(step)\n        if istep != step:\n            raise ValueError(\"non-integer step for randrange()\")\n        if istep > 0:\n            n = (width + istep - 1) // istep\n        elif istep < 0:\n            n = (width + istep + 1) // istep\n        else:\n            raise ValueError(\"zero step for randrange()\")\n        if n <= 0:\n            raise ValueError(\"empty range for randrange()\")\n        return istart + istep*self._randbelow(n)\n    def randint(self, a, b):\n        \"\"\"Return random integer in range [a, b], including both end points.\n        \"\"\"\n        return self.randrange(a, b+1)\n    def _randbelow(self, n, int=int, maxsize=1<<BPF, type=type,\n                   Method=_MethodType, BuiltinMethod=_BuiltinMethodType):\n        \"Return a random int in the range [0,n).  Raises ValueError if n==0.\"\n        getrandbits = self.getrandbits\n        if type(self.random) is BuiltinMethod or type(getrandbits) is Method:\n            k = n.bit_length()  # don't use (n-1) here because n can be 1\n            r = getrandbits(k)          # 0 <= r < 2**k\n            while r >= n:\n                r = getrandbits(k)\n            return r\n        random = self.random\n        if n >= maxsize:\n            _warn(\"Underlying random() generator does not supply \\n\"\n                \"enough bits to choose from a population range this large.\\n\"\n                \"To remove the range limitation, add a getrandbits() method.\")\n            return int(random() * n)\n        rem = maxsize % n\n        limit = (maxsize - rem) / maxsize   # int(limit * maxsize) % n == 0\n        r = random()\n        while r >= limit:\n            r = random()\n        return int(r*maxsize) % n\n    def choice(self, seq):\n        \"\"\"Choose a random element from a non-empty sequence.\"\"\"\n        try:\n            i = self._randbelow(len(seq))\n        except ValueError:\n            raise IndexError('Cannot choose from an empty sequence')\n        return seq[i]\n    def shuffle(self, x, random=None, int=int):\n        \"\"\"x, random=random.random -> shuffle list x in place; return None.\n        Optional arg random is a 0-argument function returning a random\n        float in [0.0, 1.0); by default, the standard random.random.\n        \"\"\"\n        randbelow = self._randbelow\n        for i in reversed(range(1, len(x))):\n            j = randbelow(i+1) if random is None else int(random() * (i+1))\n            x[i], x[j] = x[j], x[i]\n    def sample(self, population, k):\n        \"\"\"Chooses k unique random elements from a population sequence or set.\n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n        To choose a sample in a range of integers, use range as an argument.\n        This is especially fast and space efficient for sampling from a\n        large population:   sample(range(10000000), 60)\n        \"\"\"\n        if isinstance(population, _Set):\n            population = tuple(population)\n        if not isinstance(population, _Sequence):\n            raise TypeError(\"Population must be a sequence or set.  For dicts, use list(d).\")\n        randbelow = self._randbelow\n        n = len(population)\n        if not 0 <= k <= n:\n            raise ValueError(\"Sample larger than population\")\n        result = [None] * k\n        setsize = 21        # size of a small set minus size of an empty list\n        if k > 5:\n            setsize += 4 ** _ceil(_log(k * 3, 4)) # table size for big sets\n        if n <= setsize:\n            pool = list(population)\n            for i in range(k):         # invariant:  non-selected at [0,n-i)\n                j = randbelow(n-i)\n                result[i] = pool[j]\n                pool[j] = pool[n-i-1]   # move non-selected item into vacancy\n        else:\n            selected = set()\n            selected_add = selected.add\n            for i in range(k):\n                j = randbelow(n)\n                while j in selected:\n                    j = randbelow(n)\n                selected_add(j)\n                result[i] = population[j]\n        return result\n    def uniform(self, a, b):\n        \"Get a random number in the range [a, b) or [a, b] depending on rounding.\"\n        return a + (b-a) * self.random()\n    def triangular(self, low=0.0, high=1.0, mode=None):\n        \"\"\"Triangular distribution.\n        Continuous distribution bounded by given lower and upper limits,\n        and having a given mode value in-between.\n        http://en.wikipedia.org/wiki/Triangular_distribution\n        \"\"\"\n        u = self.random()\n        c = 0.5 if mode is None else (mode - low) / (high - low)\n        if u > c:\n            u = 1.0 - u\n            c = 1.0 - c\n            low, high = high, low\n        return low + (high - low) * (u * c) ** 0.5\n    def normalvariate(self, mu, sigma):\n        \"\"\"Normal distribution.\n        mu is the mean, and sigma is the standard deviation.\n        \"\"\"\n        random = self.random\n        while 1:\n            u1 = random()\n            u2 = 1.0 - random()\n            z = NV_MAGICCONST*(u1-0.5)/u2\n            zz = z*z/4.0\n            if zz <= -_log(u2):\n                break\n        return mu + z*sigma\n    def lognormvariate(self, mu, sigma):\n        \"\"\"Log normal distribution.\n        If you take the natural logarithm of this distribution, you'll get a\n        normal distribution with mean mu and standard deviation sigma.\n        mu can have any value, and sigma must be greater than zero.\n        \"\"\"\n        return _exp(self.normalvariate(mu, sigma))\n    def expovariate(self, lambd):\n        \"\"\"Exponential distribution.\n        lambd is 1.0 divided by the desired mean.  It should be\n        nonzero.  (The parameter would be called \"lambda\", but that is\n        a reserved word in Python.)  Returned values range from 0 to\n        positive infinity if lambd is positive, and from negative\n        infinity to 0 if lambd is negative.\n        \"\"\"\n        return -_log(1.0 - self.random())/lambd\n    def vonmisesvariate(self, mu, kappa):\n        \"\"\"Circular data distribution.\n        mu is the mean angle, expressed in radians between 0 and 2*pi, and\n        kappa is the concentration parameter, which must be greater than or\n        equal to zero.  If kappa is equal to zero, this distribution reduces\n        to a uniform random angle over the range 0 to 2*pi.\n        \"\"\"\n        random = self.random\n        if kappa <= 1e-6:\n            return TWOPI * random()\n        a = 1.0 + _sqrt(1.0 + 4.0 * kappa * kappa)\n        b = (a - _sqrt(2.0 * a))/(2.0 * kappa)\n        r = (1.0 + b * b)/(2.0 * b)\n        while 1:\n            u1 = random()\n            z = _cos(_pi * u1)\n            f = (1.0 + r * z)/(r + z)\n            c = kappa * (r - f)\n            u2 = random()\n            if u2 < c * (2.0 - c) or u2 <= c * _exp(1.0 - c):\n                break\n        u3 = random()\n        if u3 > 0.5:\n            theta = (mu % TWOPI) + _acos(f)\n        else:\n            theta = (mu % TWOPI) - _acos(f)\n        return theta\n    def gammavariate(self, alpha, beta):\n        \"\"\"Gamma distribution.  Not the gamma function!\n        Conditions on the parameters are alpha > 0 and beta > 0.\n        The probability distribution function is:\n                    x ** (alpha - 1) * math.exp(-x / beta)\n          pdf(x) =  --------------------------------------\n                      math.gamma(alpha) * beta ** alpha\n        \"\"\"\n        if alpha <= 0.0 or beta <= 0.0:\n            raise ValueError('gammavariate: alpha and beta must be > 0.0')\n        random = self.random\n        if alpha > 1.0:\n            ainv = _sqrt(2.0 * alpha - 1.0)\n            bbb = alpha - LOG4\n            ccc = alpha + ainv\n            while 1:\n                u1 = random()\n                if not 1e-7 < u1 < 0.9999999:\n                    continue\n                u2 = 1.0 - random()\n                v = _log(u1/(1.0-u1))/ainv\n                x = alpha*_exp(v)\n                z = u1*u1*u2\n                r = bbb+ccc*v-x\n                if r + SG_MAGICCONST - 4.5*z >= 0.0 or r >= _log(z):\n                    return x * beta\n        elif alpha == 1.0:\n            u = random()\n            while u <= 1e-7:\n                u = random()\n            return -_log(u) * beta\n        else:   # alpha is between 0 and 1 (exclusive)\n            while 1:\n                u = random()\n                b = (_e + alpha)/_e\n                p = b*u\n                if p <= 1.0:\n                    x = p ** (1.0/alpha)\n                else:\n                    x = -_log((b-p)/alpha)\n                u1 = random()\n                if p > 1.0:\n                    if u1 <= x ** (alpha - 1.0):\n                        break\n                elif u1 <= _exp(-x):\n                    break\n            return x * beta\n    def gauss(self, mu, sigma):\n        \"\"\"Gaussian distribution.\n        mu is the mean, and sigma is the standard deviation.  This is\n        slightly faster than the normalvariate() function.\n        Not thread-safe without a lock around calls.\n        \"\"\"\n        random = self.random\n        z = self.gauss_next\n        self.gauss_next = None\n        if z is None:\n            x2pi = random() * TWOPI\n            g2rad = _sqrt(-2.0 * _log(1.0 - random()))\n            z = _cos(x2pi) * g2rad\n            self.gauss_next = _sin(x2pi) * g2rad\n        return mu + z*sigma\n    def betavariate(self, alpha, beta):\n        \"\"\"Beta distribution.\n        Conditions on the parameters are alpha > 0 and beta > 0.\n        Returned values range between 0 and 1.\n        \"\"\"\n        y = self.gammavariate(alpha, 1.)\n        if y == 0:\n            return 0.0\n        else:\n            return y / (y + self.gammavariate(beta, 1.))\n    def paretovariate(self, alpha):\n        \"\"\"Pareto distribution.  alpha is the shape parameter.\"\"\"\n        u = 1.0 - self.random()\n        return 1.0 / u ** (1.0/alpha)\n    def weibullvariate(self, alpha, beta):\n        \"\"\"Weibull distribution.\n        alpha is the scale parameter and beta is the shape parameter.\n        \"\"\"\n        u = 1.0 - self.random()\n        return alpha * (-_log(u)) ** (1.0/beta)\nclass SystemRandom(Random):\n    \"\"\"Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n     Not available on all systems (see os.urandom() for details).\n    \"\"\"\n    def random(self):\n        \"\"\"Get the next random number in the range [0.0, 1.0).\"\"\"\n        return (int.from_bytes(_urandom(7), 'big') >> 3) * RECIP_BPF\n    def getrandbits(self, k):\n        \"\"\"getrandbits(k) -> x.  Generates a long int with k random bits.\"\"\"\n        if k <= 0:\n            raise ValueError('number of bits must be greater than zero')\n        if k != int(k):\n            raise TypeError('number of bits should be an integer')\n        numbytes = (k + 7) // 8                       # bits / 8 and rounded up\n        x = int.from_bytes(_urandom(numbytes), 'big')\n        return x >> (numbytes * 8 - k)                # trim excess bits\n    def seed(self, *args, **kwds):\n        \"Stub method.  Not used for a system random number generator.\"\n        return None\n    def _notimplemented(self, *args, **kwds):\n        \"Method should not be called for a system random number generator.\"\n        raise NotImplementedError('System entropy source does not have state.')\n    getstate = setstate = _notimplemented\ndef _test_generator(n, func, args):\n    import time\n    print(n, 'times', func.__name__)\n    total = 0.0\n    sqsum = 0.0\n    smallest = 1e10\n    largest = -1e10\n    t0 = time.time()\n    for i in range(n):\n        x = func(*args)\n        total += x\n        sqsum = sqsum + x*x\n        smallest = min(x, smallest)\n        largest = max(x, largest)\n    t1 = time.time()\n    print(round(t1-t0, 3), 'sec,', end=' ')\n    avg = total/n\n    stddev = _sqrt(sqsum/n - avg*avg)\n    print('avg %g, stddev %g, min %g, max %g' % \\\n              (avg, stddev, smallest, largest))\ndef _test(N=2000):\n    _test_generator(N, random, ())\n    _test_generator(N, normalvariate, (0.0, 1.0))\n    _test_generator(N, lognormvariate, (0.0, 1.0))\n    _test_generator(N, vonmisesvariate, (0.0, 1.0))\n    _test_generator(N, gammavariate, (0.01, 1.0))\n    _test_generator(N, gammavariate, (0.1, 1.0))\n    _test_generator(N, gammavariate, (0.1, 2.0))\n    _test_generator(N, gammavariate, (0.5, 1.0))\n    _test_generator(N, gammavariate, (0.9, 1.0))\n    _test_generator(N, gammavariate, (1.0, 1.0))\n    _test_generator(N, gammavariate, (2.0, 1.0))\n    _test_generator(N, gammavariate, (20.0, 1.0))\n    _test_generator(N, gammavariate, (200.0, 1.0))\n    _test_generator(N, gauss, (0.0, 1.0))\n    _test_generator(N, betavariate, (3.0, 3.0))\n    _test_generator(N, triangular, (0.0, 1.0, 1.0/3.0))\n_inst = Random()\nseed = _inst.seed\nrandom = _inst.random\nuniform = _inst.uniform\ntriangular = _inst.triangular\nrandint = _inst.randint\nchoice = _inst.choice\nrandrange = _inst.randrange\nsample = _inst.sample\nshuffle = _inst.shuffle\nnormalvariate = _inst.normalvariate\nlognormvariate = _inst.lognormvariate\nexpovariate = _inst.expovariate\nvonmisesvariate = _inst.vonmisesvariate\ngammavariate = _inst.gammavariate\ngauss = _inst.gauss\nbetavariate = _inst.betavariate\nparetovariate = _inst.paretovariate\nweibullvariate = _inst.weibullvariate\ngetstate = _inst.getstate\nsetstate = _inst.setstate\ngetrandbits = _inst.getrandbits\n", "/Lib/base64.py": "\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"\nimport re\nimport struct\nimport binascii\n__all__ = [\n    'encode', 'decode', 'encodebytes', 'decodebytes',\n    'b64encode', 'b64decode', 'b32encode', 'b32decode',\n    'b16encode', 'b16decode',\n    'standard_b64encode', 'standard_b64decode',\n    'urlsafe_b64encode', 'urlsafe_b64decode',\n    ]\nbytes_types = (bytes, bytearray)  # Types acceptable as binary data\ndef _bytes_from_decode_data(s):\n    if isinstance(s, str):\n        try:\n            return s.encode('ascii')\n        except UnicodeEncodeError:\n            raise ValueError('string argument should contain only ASCII characters')\n    elif isinstance(s, bytes_types):\n        return s\n    else:\n        raise TypeError(\"argument should be bytes or ASCII string, not %s\" % s.__class__.__name__)\ndef b64encode(s, altchars=None):\n    \"\"\"Encode a byte string using Base64.\n    s is the byte string to encode.  Optional altchars must be a byte\n    string of length 2 which specifies an alternative alphabet for the\n    '+' and '/' characters.  This allows an application to\n    e.g. generate url or filesystem safe Base64 strings.\n    The encoded byte string is returned.\n    \"\"\"\n    if not isinstance(s, bytes_types):\n        raise TypeError(\"expected bytes, not %s\" % s.__class__.__name__)\n    encoded = binascii.b2a_base64(s)[:-1]\n    if altchars is not None:\n        if not isinstance(altchars, bytes_types):\n            raise TypeError(\"expected bytes, not %s\"\n                            % altchars.__class__.__name__)\n        assert len(altchars) == 2, repr(altchars)\n        return encoded.translate(bytes.maketrans(b'+/', altchars))\n    return encoded\ndef b64decode(s, altchars=None, validate=False):\n    \"\"\"Decode a Base64 encoded byte string.\n    s is the byte string to decode.  Optional altchars must be a\n    string of length 2 which specifies the alternative alphabet used\n    instead of the '+' and '/' characters.\n    The decoded string is returned.  A binascii.Error is raised if s is\n    incorrectly padded.\n    If validate is False (the default), non-base64-alphabet characters are\n    discarded prior to the padding check.  If validate is True,\n    non-base64-alphabet characters in the input result in a binascii.Error.\n    \"\"\"\n    s = _bytes_from_decode_data(s)\n    if altchars is not None:\n        altchars = _bytes_from_decode_data(altchars)\n        assert len(altchars) == 2, repr(altchars)\n        s = s.translate(bytes.maketrans(altchars, b'+/'))\n    if validate and not re.match(b'^[A-Za-z0-9+/]*={0,2}$', s):\n        raise binascii.Error('Non-base64 digit found')\n    return binascii.a2b_base64(s)\ndef standard_b64encode(s):\n    \"\"\"Encode a byte string using the standard Base64 alphabet.\n    s is the byte string to encode.  The encoded byte string is returned.\n    \"\"\"\n    return b64encode(s)\ndef standard_b64decode(s):\n    \"\"\"Decode a byte string encoded with the standard Base64 alphabet.\n    s is the byte string to decode.  The decoded byte string is\n    returned.  binascii.Error is raised if the input is incorrectly\n    padded or if there are non-alphabet characters present in the\n    input.\n    \"\"\"\n    return b64decode(s)\ndef urlsafe_b64encode(s):\n    \"\"\"Encode a byte string using a url-safe Base64 alphabet.\n    s is the byte string to encode.  The encoded byte string is\n    returned.  The alphabet uses '-' instead of '+' and '_' instead of\n    '/'.\n    \"\"\"\n    return b64encode(s).translate(_urlsafe_encode_translation)\ndef urlsafe_b64decode(s):\n    \"\"\"Decode a byte string encoded with the standard Base64 alphabet.\n    s is the byte string to decode.  The decoded byte string is\n    returned.  binascii.Error is raised if the input is incorrectly\n    padded or if there are non-alphabet characters present in the\n    input.\n    The alphabet uses '-' instead of '+' and '_' instead of '/'.\n    \"\"\"\n    s = _bytes_from_decode_data(s)\n    s = s.translate(_urlsafe_decode_translation)\n    return b64decode(s)\n_b32alphabet = {\n    0: b'A',  9: b'J', 18: b'S', 27: b'3',\n    1: b'B', 10: b'K', 19: b'T', 28: b'4',\n    2: b'C', 11: b'L', 20: b'U', 29: b'5',\n    3: b'D', 12: b'M', 21: b'V', 30: b'6',\n    4: b'E', 13: b'N', 22: b'W', 31: b'7',\n    5: b'F', 14: b'O', 23: b'X',\n    6: b'G', 15: b'P', 24: b'Y',\n    7: b'H', 16: b'Q', 25: b'Z',\n    8: b'I', 17: b'R', 26: b'2',\n    }\ndef b32encode(s):\n    \"\"\"Encode a byte string using Base32.\n    s is the byte string to encode.  The encoded byte string is returned.\n    \"\"\"\n    if not isinstance(s, bytes_types):\n        raise TypeError(\"expected bytes, not %s\" % s.__class__.__name__)\n    quanta, leftover = divmod(len(s), 5)\n    if leftover:\n        s = s + bytes(5 - leftover)  # Don't use += !\n        quanta += 1\n    encoded = bytes()\n    for i in range(quanta):\n        c1, c2, c3 = struct.unpack('!HHB', s[i*5:(i+1)*5])\n        c2 += (c1 & 1) << 16 # 17 bits wide\n        c3 += (c2 & 3) << 8  # 10 bits wide\n        encoded += bytes([_b32tab[c1 >> 11],         # bits 1 - 5\n                          _b32tab[(c1 >> 6) & 0x1f], # bits 6 - 10\n                          _b32tab[(c1 >> 1) & 0x1f], # bits 11 - 15\n                          _b32tab[c2 >> 12],         # bits 16 - 20 (1 - 5)\n                          _b32tab[(c2 >> 7) & 0x1f], # bits 21 - 25 (6 - 10)\n                          _b32tab[(c2 >> 2) & 0x1f], # bits 26 - 30 (11 - 15)\n                          _b32tab[c3 >> 5],          # bits 31 - 35 (1 - 5)\n                          _b32tab[c3 & 0x1f],        # bits 36 - 40 (1 - 5)\n                          ])\n    if leftover == 1:\n        return encoded[:-6] + b'======'\n    elif leftover == 2:\n        return encoded[:-4] + b'===='\n    elif leftover == 3:\n        return encoded[:-3] + b'==='\n    elif leftover == 4:\n        return encoded[:-1] + b'='\n    return encoded\ndef b32decode(s, casefold=False, map01=None):\n    \"\"\"Decode a Base32 encoded byte string.\n    s is the byte string to decode.  Optional casefold is a flag\n    specifying whether a lowercase alphabet is acceptable as input.\n    For security purposes, the default is False.\n    RFC 3548 allows for optional mapping of the digit 0 (zero) to the\n    letter O (oh), and for optional mapping of the digit 1 (one) to\n    either the letter I (eye) or letter L (el).  The optional argument\n    map01 when not None, specifies which letter the digit 1 should be\n    mapped to (when map01 is not None, the digit 0 is always mapped to\n    the letter O).  For security purposes the default is None, so that\n    0 and 1 are not allowed in the input.\n    The decoded byte string is returned.  binascii.Error is raised if\n    the input is incorrectly padded or if there are non-alphabet\n    characters present in the input.\n    \"\"\"\n    s = _bytes_from_decode_data(s)\n    quanta, leftover = divmod(len(s), 8)\n    if leftover:\n        raise binascii.Error('Incorrect padding')\n    if map01 is not None:\n        map01 = _bytes_from_decode_data(map01)\n        assert len(map01) == 1, repr(map01)\n        s = s.translate(bytes.maketrans(b'01', b'O' + map01))\n    if casefold:\n        s = s.upper()\n    padchars = 0\n    mo = re.search(b'(?P<pad>[=]*)$', s)\n    if mo:\n        padchars = len(mo.group('pad'))\n        if padchars > 0:\n            s = s[:-padchars]\n    parts = []\n    acc = 0\n    shift = 35\n    for c in s:\n        val = _b32rev.get(c)\n        if val is None:\n            raise TypeError('Non-base32 digit found')\n        acc += _b32rev[c] << shift\n        shift -= 5\n        if shift < 0:\n            parts.append(binascii.unhexlify(bytes('%010x' % acc, \"ascii\")))\n            acc = 0\n            shift = 35\n    last = binascii.unhexlify(bytes('%010x' % acc, \"ascii\"))\n    if padchars == 0:\n        last = b''                      # No characters\n    elif padchars == 1:\n        last = last[:-1]\n    elif padchars == 3:\n        last = last[:-2]\n    elif padchars == 4:\n        last = last[:-3]\n    elif padchars == 6:\n        last = last[:-4]\n    else:\n        raise binascii.Error('Incorrect padding')\n    parts.append(last)\n    return b''.join(parts)\ndef b16encode(s):\n    \"\"\"Encode a byte string using Base16.\n    s is the byte string to encode.  The encoded byte string is returned.\n    \"\"\"\n    if not isinstance(s, bytes_types):\n        raise TypeError(\"expected bytes, not %s\" % s.__class__.__name__)\n    return binascii.hexlify(s).upper()\ndef b16decode(s, casefold=False):\n    \"\"\"Decode a Base16 encoded byte string.\n    s is the byte string to decode.  Optional casefold is a flag\n    specifying whether a lowercase alphabet is acceptable as input.\n    For security purposes, the default is False.\n    The decoded byte string is returned.  binascii.Error is raised if\n    s were incorrectly padded or if there are non-alphabet characters\n    present in the string.\n    \"\"\"\n    s = _bytes_from_decode_data(s)\n    if casefold:\n        s = s.upper()\n    if re.search(b'[^0-9A-F]', s):\n        raise binascii.Error('Non-base16 digit found')\n    return binascii.unhexlify(s)\nMAXLINESIZE = 76 # Excluding the CRLF\nMAXBINSIZE = (MAXLINESIZE//4)*3\ndef encode(input, output):\n    \"\"\"Encode a file; input and output are binary files.\"\"\"\n    while True:\n        s = input.read(MAXBINSIZE)\n        if not s:\n            break\n        while len(s) < MAXBINSIZE:\n            ns = input.read(MAXBINSIZE-len(s))\n            if not ns:\n                break\n            s += ns\n        line = binascii.b2a_base64(s)\n        output.write(line)\ndef decode(input, output):\n    \"\"\"Decode a file; input and output are binary files.\"\"\"\n    while True:\n        line = input.readline()\n        if not line:\n            break\n        s = binascii.a2b_base64(line)\n        output.write(s)\ndef encodebytes(s):\n    \"\"\"Encode a bytestring into a bytestring containing multiple lines\n    of base-64 data.\"\"\"\n    if not isinstance(s, bytes_types):\n        raise TypeError(\"expected bytes, not %s\" % s.__class__.__name__)\n    pieces = []\n    for i in range(0, len(s), MAXBINSIZE):\n        chunk = s[i : i + MAXBINSIZE]\n        pieces.append(binascii.b2a_base64(chunk))\n    return b\"\".join(pieces)\ndef encodestring(s):\n    \"\"\"Legacy alias of encodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"encodestring() is a deprecated alias, use encodebytes()\",\n                  DeprecationWarning, 2)\n    return encodebytes(s)\ndef decodebytes(s):\n    \"\"\"Decode a bytestring of base-64 data into a bytestring.\"\"\"\n    if not isinstance(s, bytes_types):\n        raise TypeError(\"expected bytes, not %s\" % s.__class__.__name__)\n    return binascii.a2b_base64(s)\ndef decodestring(s):\n    \"\"\"Legacy alias of decodebytes().\"\"\"\n    import warnings\n    warnings.warn(\"decodestring() is a deprecated alias, use decodebytes()\",\n                  DeprecationWarning, 2)\n    return decodebytes(s)\ndef main():\n    \"\"\"Small main program\"\"\"\n    import sys, getopt\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], 'deut')\n    except getopt.error as msg:\n        sys.stdout = sys.stderr\n        print(msg)\n        print(\"\"\"usage: %s [-d|-e|-u|-t] [file|-]\n        -d, -u: decode\n        -e: encode (default)\n        -t: encode and decode string 'Aladdin:open sesame'\"\"\"%sys.argv[0])\n        sys.exit(2)\n    func = encode\n    for o, a in opts:\n        if o == '-e': func = encode\n        if o == '-d': func = decode\n        if o == '-u': func = decode\n        if o == '-t': test(); return\n    if args and args[0] != '-':\n        with open(args[0], 'rb') as f:\n            func(f, sys.stdout.buffer)\n    else:\n        func(sys.stdin.buffer, sys.stdout.buffer)\ndef test():\n    s0 = b\"Aladdin:open sesame\"\n    print(repr(s0))\n    s1 = encodebytes(s0)\n    print(repr(s1))\n    s2 = decodebytes(s1)\n    print(repr(s2))\n    assert s0 == s2\nif __name__ == '__main__':\n    main()\n", "/Lib/struct.py": "__all__ = [\n    'calcsize', 'pack', 'pack_into', 'unpack', 'unpack_from',\n    'Struct',\n    'error'\n    ]\nfrom _struct import *\nfrom _struct import _clearcache\nfrom _struct import __doc__\n", "/Lib/string.py": "\"\"\"A collection of string constants.\nPublic module variables:\nwhitespace -- a string containing all ASCII whitespace\nascii_lowercase -- a string containing all ASCII lowercase letters\nascii_uppercase -- a string containing all ASCII uppercase letters\nascii_letters -- a string containing all ASCII letters\ndigits -- a string containing all ASCII decimal digits\nhexdigits -- a string containing all ASCII hexadecimal digits\noctdigits -- a string containing all ASCII octal digits\npunctuation -- a string containing all ASCII punctuation characters\nprintable -- a string containing all ASCII characters considered printable\n\"\"\"\nimport _string\nwhitespace = ' \\t\\n\\r\\v\\f'\nascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'\nascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nascii_letters = ascii_lowercase + ascii_uppercase\ndigits = '0123456789'\nhexdigits = digits + 'abcdef' + 'ABCDEF'\noctdigits = '01234567'\npunctuation = \"\"\"!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\"\"\nprintable = digits + ascii_letters + punctuation + whitespace\ndef capwords(s, sep=None):\n    \"\"\"capwords(s [,sep]) -> string\n    Split the argument into words using split, capitalize each\n    word using capitalize, and join the capitalized words using\n    join.  If the optional second argument sep is absent or None,\n    runs of whitespace characters are replaced by a single space\n    and leading and trailing whitespace are removed, otherwise\n    sep is used to split and join the words.\n    \"\"\"\n    return (sep or ' ').join(x.capitalize() for x in s.split(sep))\nimport re as _re\nfrom collections import ChainMap\nclass _TemplateMetaclass(type):\n    pattern = r\"\"\"\n    %(delim)s(?:\n      (?P<escaped>%(delim)s) |   # Escape sequence of two delimiters\n      (?P<named>%(id)s)      |   # delimiter and a Python identifier\n      {(?P<braced>%(id)s)}   |   # delimiter and a braced identifier\n      (?P<invalid>)              # Other ill-formed delimiter exprs\n    )\n    \"\"\"\n    def __init__(cls, name, bases, dct):\n        super(_TemplateMetaclass, cls).__init__(name, bases, dct)\n        if 'pattern' in dct:\n            pattern = cls.pattern\n        else:\n            pattern = _TemplateMetaclass.pattern % {\n                'delim' : _re.escape(cls.delimiter),\n                'id'    : cls.idpattern,\n                }\n        cls.pattern = _re.compile(pattern, cls.flags | _re.VERBOSE)\nclass Template(metaclass=_TemplateMetaclass):\n    \"\"\"A string class for supporting $-substitutions.\"\"\"\n    delimiter = '$'\n    idpattern = r'[_a-z][_a-z0-9]*'\n    flags = _re.IGNORECASE\n    def __init__(self, template):\n        self.template = template\n    def _invalid(self, mo):\n        i = mo.start('invalid')\n        lines = self.template[:i].splitlines(keepends=True)\n        if not lines:\n            colno = 1\n            lineno = 1\n        else:\n            colno = i - len(''.join(lines[:-1]))\n            lineno = len(lines)\n        raise ValueError('Invalid placeholder in string: line %d, col %d' %\n                         (lineno, colno))\n    def substitute(self, *args, **kws):\n        if len(args) > 1:\n            raise TypeError('Too many positional arguments')\n        if not args:\n            mapping = kws\n        elif kws:\n            mapping = ChainMap(kws, args[0])\n        else:\n            mapping = args[0]\n        def convert(mo):\n            named = mo.group('named') or mo.group('braced')\n            if named is not None:\n                val = mapping[named]\n                return '%s' % (val,)\n            if mo.group('escaped') is not None:\n                return self.delimiter\n            if mo.group('invalid') is not None:\n                self._invalid(mo)\n            raise ValueError('Unrecognized named group in pattern',\n                             self.pattern)\n        return self.pattern.sub(convert, self.template)\n    def safe_substitute(self, *args, **kws):\n        if len(args) > 1:\n            raise TypeError('Too many positional arguments')\n        if not args:\n            mapping = kws\n        elif kws:\n            mapping = ChainMap(kws, args[0])\n        else:\n            mapping = args[0]\n        def convert(mo):\n            named = mo.group('named') or mo.group('braced')\n            if named is not None:\n                try:\n                    return '%s' % (mapping[named],)\n                except KeyError:\n                    return mo.group()\n            if mo.group('escaped') is not None:\n                return self.delimiter\n            if mo.group('invalid') is not None:\n                return mo.group()\n            raise ValueError('Unrecognized named group in pattern',\n                             self.pattern)\n        return self.pattern.sub(convert, self.template)\nclass Formatter:\n    def format(self, format_string, *args, **kwargs):\n        return self.vformat(format_string, args, kwargs)\n    def vformat(self, format_string, args, kwargs):\n        used_args = set()\n        result = self._vformat(format_string, args, kwargs, used_args, 2)\n        self.check_unused_args(used_args, args, kwargs)\n        return result\n    def _vformat(self, format_string, args, kwargs, used_args, recursion_depth):\n        if recursion_depth < 0:\n            raise ValueError('Max string recursion exceeded')\n        result = []\n        for literal_text, field_name, format_spec, conversion in \\\n                self.parse(format_string):\n            if literal_text:\n                result.append(literal_text)\n            if field_name is not None:\n                obj, arg_used = self.get_field(field_name, args, kwargs)\n                used_args.add(arg_used)\n                obj = self.convert_field(obj, conversion)\n                format_spec = self._vformat(format_spec, args, kwargs,\n                                            used_args, recursion_depth-1)\n                result.append(self.format_field(obj, format_spec))\n        return ''.join(result)\n    def get_value(self, key, args, kwargs):\n        if isinstance(key, int):\n            return args[key]\n        else:\n            return kwargs[key]\n    def check_unused_args(self, used_args, args, kwargs):\n        pass\n    def format_field(self, value, format_spec):\n        return format(value, format_spec)\n    def convert_field(self, value, conversion):\n        if conversion is None:\n            return value\n        elif conversion == 's':\n            return str(value)\n        elif conversion == 'r':\n            return repr(value)\n        elif conversion == 'a':\n            return ascii(value)\n        raise ValueError(\"Unknown conversion specifier {0!s}\".format(conversion))\n    def parse(self, format_string):\n        return _string.formatter_parser(format_string)\n    def get_field(self, field_name, args, kwargs):\n        first, rest = _string.formatter_field_name_split(field_name)\n        obj = self.get_value(first, args, kwargs)\n        for is_attr, i in rest:\n            if is_attr:\n                obj = getattr(obj, i)\n            else:\n                obj = obj[i]\n        return obj, first\n", "/Lib/_abcoll.py": "\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.\nDON'T USE THIS MODULE DIRECTLY!  The classes here should be imported\nvia collections; they are defined here only to alleviate certain\nbootstrapping issues.  Unit tests are in test_collections.\n\"\"\"\nimport sys\n__all__ = [\"Hashable\", \"Iterable\", \"Iterator\",\n           \"Sized\", \"Container\", \"Callable\",\n           \"Set\", \"MutableSet\",\n           \"Mapping\", \"MutableMapping\",\n           \"MappingView\", \"KeysView\", \"ItemsView\", \"ValuesView\",\n           \"Sequence\", \"MutableSequence\",\n           \"ByteString\",\n           ]\n\"\"\"\nbytes_iterator = type(iter(''))\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\ndict_proxy = type(type.__dict__)\n\"\"\"\ndef abstractmethod(self):\n    return self\nclass Iterable:\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            if any(\"__iter__\" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\nclass Sized:\n    @abstractmethod\n    def __len__(self):\n        return 0\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            if any(\"__len__\" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\nclass Container:\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            if any(\"__contains__\" in B.__dict__ for B in C.__mro__):\n                return True\n        return NotImplemented\nclass Mapping(Sized, Iterable, Container):\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError\n    def get(self, key, default=None):\n        try:\n            return self[key]\n        except KeyError:\n            return default\n    def __contains__(self, key):\n        try:\n            self[key]\n        except KeyError:\n            return False\n        else:\n            return True\n    def keys(self):\n        return KeysView(self)\n    def items(self):\n        return ItemsView(self)\n    def values(self):\n        return ValuesView(self)\n    def __eq__(self, other):\n        if not isinstance(other, Mapping):\n            return NotImplemented\n        return dict(self.items()) == dict(other.items())\n    def __ne__(self, other):\n        return not (self == other)\nclass MutableMapping(Mapping):\n    @abstractmethod\n    def __setitem__(self, key, value):\n        raise KeyError\n    @abstractmethod\n    def __delitem__(self, key):\n        raise KeyError\n    __marker = object()\n    def pop(self, key, default=__marker):\n        try:\n            value = self[key]\n        except KeyError:\n            if default is self.__marker:\n                raise\n            return default\n        else:\n            del self[key]\n            return value\n    def popitem(self):\n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError\n        value = self[key]\n        del self[key]\n        return key, value\n    def clear(self):\n        try:\n            while True:\n                self.popitem()\n        except KeyError:\n            pass\n    def update(*args, **kwds):\n        if len(args) > 2:\n            raise TypeError(\"update() takes at most 2 positional \"\n                            \"arguments ({} given)\".format(len(args)))\n        elif not args:\n            raise TypeError(\"update() takes at least 1 argument (0 given)\")\n        self = args[0]\n        other = args[1] if len(args) >= 2 else ()\n        if isinstance(other, Mapping):\n            for key in other:\n                self[key] = other[key]\n        elif hasattr(other, \"keys\"):\n            for key in other.keys():\n                self[key] = other[key]\n        else:\n            for key, value in other:\n                self[key] = value\n        for key, value in kwds.items():\n            self[key] = value\n    def setdefault(self, key, default=None):\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n        return default\n", "/Lib/unittest/test/test_discovery.py": "import os\r\nimport re\r\nimport sys\r\nimport unittest\r\nclass TestableTestProgram(unittest.TestProgram):\r\n    module = '__main__'\r\n    exit = True\r\n    defaultTest = failfast = catchbreak = buffer = None\r\n    verbosity = 1\r\n    progName = ''\r\n    testRunner = testLoader = None\r\n    def __init__(self):\r\n        pass\r\nclass TestDiscovery(unittest.TestCase):\r\n    def test_get_name_from_path(self):\r\n        loader = unittest.TestLoader()\r\n        loader._top_level_dir = '/foo'\r\n        name = loader._get_name_from_path('/foo/bar/baz.py')\r\n        self.assertEqual(name, 'bar.baz')\r\n        if not __debug__:\r\n            return\r\n        with self.assertRaises(AssertionError):\r\n            loader._get_name_from_path('/bar/baz.py')\r\n    def test_find_tests(self):\r\n        loader = unittest.TestLoader()\r\n        original_listdir = os.listdir\r\n        def restore_listdir():\r\n            os.listdir = original_listdir\r\n        original_isfile = os.path.isfile\r\n        def restore_isfile():\r\n            os.path.isfile = original_isfile\r\n        original_isdir = os.path.isdir\r\n        def restore_isdir():\r\n            os.path.isdir = original_isdir\r\n        path_lists = [['test1.py', 'test2.py', 'not_a_test.py', 'test_dir',\r\n                       'test.foo', 'test-not-a-module.py', 'another_dir'],\r\n                      ['test3.py', 'test4.py', ]]\r\n        os.listdir = lambda path: path_lists.pop(0)\r\n        self.addCleanup(restore_listdir)\r\n        def isdir(path):\r\n            return path.endswith('dir')\r\n        os.path.isdir = isdir\r\n        self.addCleanup(restore_isdir)\r\n        def isfile(path):\r\n            return not path.endswith('dir') and not 'another_dir' in path\r\n        os.path.isfile = isfile\r\n        self.addCleanup(restore_isfile)\r\n        loader._get_module_from_name = lambda path: path + ' module'\r\n        loader.loadTestsFromModule = lambda module: module + ' tests'\r\n        top_level = os.path.abspath('/foo')\r\n        loader._top_level_dir = top_level\r\n        suite = list(loader._find_tests(top_level, 'test*.py'))\r\n        expected = [name + ' module tests' for name in\r\n                    ('test1', 'test2')]\r\n        expected.extend([('test_dir.%s' % name) + ' module tests' for name in\r\n                    ('test3', 'test4')])\r\n        self.assertEqual(suite, expected)\r\n    def test_find_tests_with_package(self):\r\n        loader = unittest.TestLoader()\r\n        original_listdir = os.listdir\r\n        def restore_listdir():\r\n            os.listdir = original_listdir\r\n        original_isfile = os.path.isfile\r\n        def restore_isfile():\r\n            os.path.isfile = original_isfile\r\n        original_isdir = os.path.isdir\r\n        def restore_isdir():\r\n            os.path.isdir = original_isdir\r\n        directories = ['a_directory', 'test_directory', 'test_directory2']\r\n        path_lists = [directories, [], [], []]\r\n        os.listdir = lambda path: path_lists.pop(0)\r\n        self.addCleanup(restore_listdir)\r\n        os.path.isdir = lambda path: True\r\n        self.addCleanup(restore_isdir)\r\n        os.path.isfile = lambda path: os.path.basename(path) not in directories\r\n        self.addCleanup(restore_isfile)\r\n        class Module(object):\r\n            paths = []\r\n            load_tests_args = []\r\n            def __init__(self, path):\r\n                self.path = path\r\n                self.paths.append(path)\r\n                if os.path.basename(path) == 'test_directory':\r\n                    def load_tests(loader, tests, pattern):\r\n                        self.load_tests_args.append((loader, tests, pattern))\r\n                        return 'load_tests'\r\n                    self.load_tests = load_tests\r\n            def __eq__(self, other):\r\n                return self.path == other.path\r\n        loader._get_module_from_name = lambda name: Module(name)\r\n        def loadTestsFromModule(module, use_load_tests):\r\n            if use_load_tests:\r\n                raise self.failureException('use_load_tests should be False for packages')\r\n            return module.path + ' module tests'\r\n        loader.loadTestsFromModule = loadTestsFromModule\r\n        loader._top_level_dir = '/foo'\r\n        suite = list(loader._find_tests('/foo', 'test*'))\r\n        self.assertEqual(suite,\r\n                         ['load_tests', 'test_directory2' + ' module tests'])\r\n        self.assertEqual(Module.paths, ['test_directory', 'test_directory2'])\r\n        self.assertEqual(Module.load_tests_args,\r\n                         [(loader, 'test_directory' + ' module tests', 'test*')])\r\n    def test_discover(self):\r\n        loader = unittest.TestLoader()\r\n        original_isfile = os.path.isfile\r\n        original_isdir = os.path.isdir\r\n        def restore_isfile():\r\n            os.path.isfile = original_isfile\r\n        os.path.isfile = lambda path: False\r\n        self.addCleanup(restore_isfile)\r\n        orig_sys_path = sys.path[:]\r\n        def restore_path():\r\n            sys.path[:] = orig_sys_path\r\n        self.addCleanup(restore_path)\r\n        full_path = os.path.abspath(os.path.normpath('/foo'))\r\n        with self.assertRaises(ImportError):\r\n            loader.discover('/foo/bar', top_level_dir='/foo')\r\n        self.assertEqual(loader._top_level_dir, full_path)\r\n        self.assertIn(full_path, sys.path)\r\n        os.path.isfile = lambda path: True\r\n        os.path.isdir = lambda path: True\r\n        def restore_isdir():\r\n            os.path.isdir = original_isdir\r\n        self.addCleanup(restore_isdir)\r\n        _find_tests_args = []\r\n        def _find_tests(start_dir, pattern):\r\n            _find_tests_args.append((start_dir, pattern))\r\n            return ['tests']\r\n        loader._find_tests = _find_tests\r\n        loader.suiteClass = str\r\n        suite = loader.discover('/foo/bar/baz', 'pattern', '/foo/bar')\r\n        top_level_dir = os.path.abspath('/foo/bar')\r\n        start_dir = os.path.abspath('/foo/bar/baz')\r\n        self.assertEqual(suite, \"['tests']\")\r\n        self.assertEqual(loader._top_level_dir, top_level_dir)\r\n        self.assertEqual(_find_tests_args, [(start_dir, 'pattern')])\r\n        self.assertIn(top_level_dir, sys.path)\r\n    def test_discover_with_modules_that_fail_to_import(self):\r\n        loader = unittest.TestLoader()\r\n        listdir = os.listdir\r\n        os.listdir = lambda _: ['test_this_does_not_exist.py']\r\n        isfile = os.path.isfile\r\n        os.path.isfile = lambda _: True\r\n        orig_sys_path = sys.path[:]\r\n        def restore():\r\n            os.path.isfile = isfile\r\n            os.listdir = listdir\r\n            sys.path[:] = orig_sys_path\r\n        self.addCleanup(restore)\r\n        suite = loader.discover('.')\r\n        self.assertIn(os.getcwd(), sys.path)\r\n        self.assertEqual(suite.countTestCases(), 1)\r\n        test = list(list(suite)[0])[0] # extract test from suite\r\n        with self.assertRaises(ImportError):\r\n            test.test_this_does_not_exist()\r\n    def test_command_line_handling_parseArgs(self):\r\n        program = TestableTestProgram()\r\n        args = []\r\n        def do_discovery(argv):\r\n            args.extend(argv)\r\n        program._do_discovery = do_discovery\r\n        program.parseArgs(['something', 'discover'])\r\n        self.assertEqual(args, [])\r\n        program.parseArgs(['something', 'discover', 'foo', 'bar'])\r\n        self.assertEqual(args, ['foo', 'bar'])\r\n    def test_command_line_handling_discover_by_default(self):\r\n        program = TestableTestProgram()\r\n        program.module = None\r\n        self.called = False\r\n        def do_discovery(argv):\r\n            self.called = True\r\n            self.assertEqual(argv, [])\r\n        program._do_discovery = do_discovery\r\n        program.parseArgs(['something'])\r\n        self.assertTrue(self.called)\r\n    def test_command_line_handling_discover_by_default_with_options(self):\r\n        program = TestableTestProgram()\r\n        program.module = None\r\n        args = ['something', '-v', '-b', '-v', '-c', '-f']\r\n        self.called = False\r\n        def do_discovery(argv):\r\n            self.called = True\r\n            self.assertEqual(argv, args[1:])\r\n        program._do_discovery = do_discovery\r\n        program.parseArgs(args)\r\n        self.assertTrue(self.called)\r\n    def test_command_line_handling_do_discovery_too_many_arguments(self):\r\n        class Stop(Exception):\r\n            pass\r\n        def usageExit():\r\n            raise Stop\r\n        program = TestableTestProgram()\r\n        program.usageExit = usageExit\r\n        with self.assertRaises(Stop):\r\n            program._do_discovery(['one', 'two', 'three', 'four'])\r\n    def test_command_line_handling_do_discovery_calls_loader(self):\r\n        program = TestableTestProgram()\r\n        class Loader(object):\r\n            args = []\r\n            def discover(self, start_dir, pattern, top_level_dir):\r\n                self.args.append((start_dir, pattern, top_level_dir))\r\n                return 'tests'\r\n        program._do_discovery(['-v'], Loader=Loader)\r\n        self.assertEqual(program.verbosity, 2)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('.', 'test*.py', None)])\r\n        Loader.args = []\r\n        program = TestableTestProgram()\r\n        program._do_discovery(['--verbose'], Loader=Loader)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('.', 'test*.py', None)])\r\n        Loader.args = []\r\n        program = TestableTestProgram()\r\n        program._do_discovery([], Loader=Loader)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('.', 'test*.py', None)])\r\n        Loader.args = []\r\n        program = TestableTestProgram()\r\n        program._do_discovery(['fish'], Loader=Loader)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('fish', 'test*.py', None)])\r\n        Loader.args = []\r\n        program = TestableTestProgram()\r\n        program._do_discovery(['fish', 'eggs'], Loader=Loader)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('fish', 'eggs', None)])\r\n        Loader.args = []\r\n        program = TestableTestProgram()\r\n        program._do_discovery(['fish', 'eggs', 'ham'], Loader=Loader)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('fish', 'eggs', 'ham')])\r\n        Loader.args = []\r\n        program = TestableTestProgram()\r\n        program._do_discovery(['-s', 'fish'], Loader=Loader)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('fish', 'test*.py', None)])\r\n        Loader.args = []\r\n        program = TestableTestProgram()\r\n        program._do_discovery(['-t', 'fish'], Loader=Loader)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('.', 'test*.py', 'fish')])\r\n        Loader.args = []\r\n        program = TestableTestProgram()\r\n        program._do_discovery(['-p', 'fish'], Loader=Loader)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('.', 'fish', None)])\r\n        self.assertFalse(program.failfast)\r\n        self.assertFalse(program.catchbreak)\r\n        Loader.args = []\r\n        program = TestableTestProgram()\r\n        program._do_discovery(['-p', 'eggs', '-s', 'fish', '-v', '-f', '-c'],\r\n                              Loader=Loader)\r\n        self.assertEqual(program.test, 'tests')\r\n        self.assertEqual(Loader.args, [('fish', 'eggs', None)])\r\n        self.assertEqual(program.verbosity, 2)\r\n        self.assertTrue(program.failfast)\r\n        self.assertTrue(program.catchbreak)\r\n    def test_detect_module_clash(self):\r\n        class Module(object):\r\n            __file__ = 'bar/foo.py'\r\n        sys.modules['foo'] = Module\r\n        full_path = os.path.abspath('foo')\r\n        original_listdir = os.listdir\r\n        original_isfile = os.path.isfile\r\n        original_isdir = os.path.isdir\r\n        def cleanup():\r\n            os.listdir = original_listdir\r\n            os.path.isfile = original_isfile\r\n            os.path.isdir = original_isdir\r\n            del sys.modules['foo']\r\n            if full_path in sys.path:\r\n                sys.path.remove(full_path)\r\n        self.addCleanup(cleanup)\r\n        def listdir(_):\r\n            return ['foo.py']\r\n        def isfile(_):\r\n            return True\r\n        def isdir(_):\r\n            return True\r\n        os.listdir = listdir\r\n        os.path.isfile = isfile\r\n        os.path.isdir = isdir\r\n        loader = unittest.TestLoader()\r\n        mod_dir = os.path.abspath('bar')\r\n        expected_dir = os.path.abspath('foo')\r\n        msg = re.escape(r\"'foo' module incorrectly imported from %r. Expected %r. \"\r\n                \"Is this module globally installed?\" % (mod_dir, expected_dir))\r\n        self.assertRaisesRegex(\r\n            ImportError, '^%s$' % msg, loader.discover,\r\n            start_dir='foo', pattern='foo.py'\r\n        )\r\n        self.assertEqual(sys.path[0], full_path)\r\n    def test_discovery_from_dotted_path(self):\r\n        loader = unittest.TestLoader()\r\n        tests = [self]\r\n        expectedPath = os.path.abspath(os.path.dirname(unittest.test.__file__))\r\n        self.wasRun = False\r\n        def _find_tests(start_dir, pattern):\r\n            self.wasRun = True\r\n            self.assertEqual(start_dir, expectedPath)\r\n            return tests\r\n        loader._find_tests = _find_tests\r\n        suite = loader.discover('unittest.test')\r\n        self.assertTrue(self.wasRun)\r\n        self.assertEqual(suite._tests, tests)\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/test/test_int.py": "import sys\nimport unittest\nfrom test.support import run_unittest\nL = [\n        ('0', 0),\n        ('1', 1),\n        ('9', 9),\n        ('10', 10),\n        ('99', 99),\n        ('100', 100),\n        ('314', 314),\n        (' 314', 314),\n        ('314 ', 314),\n        ('  \\t\\t  314  \\t\\t  ', 314),\n        (repr(sys.maxsize), sys.maxsize),\n        ('  1x', ValueError),\n        ('  1  ', 1),\n        ('  1\\02  ', ValueError),\n        ('', ValueError),\n        (' ', ValueError),\n        ('  \\t\\t  ', ValueError),\n        (\"\\u0200\", ValueError)\n]\nclass IntTestCases(unittest.TestCase):\n    def test_basic(self):\n        self.assertEqual(int(314), 314)\n        self.assertEqual(int(3.14), 3)\n        self.assertEqual(int(-3.14), -3)\n        self.assertEqual(int(3.9), 3)\n        self.assertEqual(int(-3.9), -3)\n        self.assertEqual(int(3.5), 3)\n        self.assertEqual(int(-3.5), -3)\n        self.assertEqual(int(\"-3\"), -3)\n        self.assertEqual(int(\" -3 \"), -3)\n        self.assertEqual(int(\"\\N{EM SPACE}-3\\N{EN SPACE}\"), -3)\n        self.assertEqual(int(\"10\",16), 16)\n        for s, v in L:\n            for sign in \"\", \"+\", \"-\":\n                for prefix in \"\", \" \", \"\\t\", \"  \\t\\t  \":\n                    ss = prefix + sign + s\n                    vv = v\n                    if sign == \"-\" and v is not ValueError:\n                        vv = -v\n                    try:\n                        self.assertEqual(int(ss), vv)\n                    except ValueError:\n                        pass\n        s = repr(-1-sys.maxsize)\n        x = int(s)\n        self.assertEqual(x+1, -sys.maxsize)\n        self.assertIsInstance(x, int)\n        self.assertEqual(int(s[1:]), sys.maxsize+1)\n        x = int(1e100)\n        self.assertIsInstance(x, int)\n        x = int(-1e100)\n        self.assertIsInstance(x, int)\n        x = -1-sys.maxsize\n        self.assertEqual(x >> 1, x//2)\n        self.assertRaises(ValueError, int, '123\\0')\n        self.assertRaises(ValueError, int, '53', 40)\n        self.assertRaises(ValueError, int, '123\\0', 10)\n        self.assertRaises(ValueError, int, '123\\x00 245', 20)\n        x = int('1' * 600)\n        self.assertIsInstance(x, int)\n        self.assertRaises(TypeError, int, 1, 12)\n        self.assertEqual(int('0o123', 0), 83)\n        self.assertEqual(int('0x123', 16), 291)\n        self.assertRaises(ValueError, int, \"0x\", 16)\n        self.assertRaises(ValueError, int, \"0x\", 0)\n        self.assertRaises(ValueError, int, \"0o\", 8)\n        self.assertRaises(ValueError, int, \"0o\", 0)\n        self.assertRaises(ValueError, int, \"0b\", 2)\n        self.assertRaises(ValueError, int, \"0b\", 0)\n        self.assertTrue(int(\"10\") is 10)\n        self.assertTrue(int(\"-1\") is -1)\n        self.assertEqual(int('100000000000000000000000000000000', 2), 4294967296)\n        self.assertEqual(int('102002022201221111211', 3), 4294967296)\n        self.assertEqual(int('10000000000000000', 4), 4294967296)\n        self.assertEqual(int('32244002423141', 5), 4294967296)\n        self.assertEqual(int('1550104015504', 6), 4294967296)\n        self.assertEqual(int('211301422354', 7), 4294967296)\n        self.assertEqual(int('40000000000', 8), 4294967296)\n        self.assertEqual(int('12068657454', 9), 4294967296)\n        self.assertEqual(int('4294967296', 10), 4294967296)\n        self.assertEqual(int('1904440554', 11), 4294967296)\n        self.assertEqual(int('9ba461594', 12), 4294967296)\n        self.assertEqual(int('535a79889', 13), 4294967296)\n        self.assertEqual(int('2ca5b7464', 14), 4294967296)\n        self.assertEqual(int('1a20dcd81', 15), 4294967296)\n        self.assertEqual(int('100000000', 16), 4294967296)\n        self.assertEqual(int('a7ffda91', 17), 4294967296)\n        self.assertEqual(int('704he7g4', 18), 4294967296)\n        self.assertEqual(int('4f5aff66', 19), 4294967296)\n        self.assertEqual(int('3723ai4g', 20), 4294967296)\n        self.assertEqual(int('281d55i4', 21), 4294967296)\n        self.assertEqual(int('1fj8b184', 22), 4294967296)\n        self.assertEqual(int('1606k7ic', 23), 4294967296)\n        self.assertEqual(int('mb994ag', 24), 4294967296)\n        self.assertEqual(int('hek2mgl', 25), 4294967296)\n        self.assertEqual(int('dnchbnm', 26), 4294967296)\n        self.assertEqual(int('b28jpdm', 27), 4294967296)\n        self.assertEqual(int('8pfgih4', 28), 4294967296)\n        self.assertEqual(int('76beigg', 29), 4294967296)\n        self.assertEqual(int('5qmcpqg', 30), 4294967296)\n        self.assertEqual(int('4q0jto4', 31), 4294967296)\n        self.assertEqual(int('4000000', 32), 4294967296)\n        self.assertEqual(int('3aokq94', 33), 4294967296)\n        self.assertEqual(int('2qhxjli', 34), 4294967296)\n        self.assertEqual(int('2br45qb', 35), 4294967296)\n        self.assertEqual(int('1z141z4', 36), 4294967296)\n        self.assertEqual(int(' 0o123  ', 0), 83)\n        self.assertEqual(int(' 0o123  ', 0), 83)\n        self.assertEqual(int('000', 0), 0)\n        self.assertEqual(int('0o123', 0), 83)\n        self.assertEqual(int('0x123', 0), 291)\n        self.assertEqual(int('0b100', 0), 4)\n        self.assertEqual(int(' 0O123   ', 0), 83)\n        self.assertEqual(int(' 0X123  ', 0), 291)\n        self.assertEqual(int(' 0B100 ', 0), 4)\n        self.assertEqual(int('0123'), 123)\n        self.assertEqual(int('0123', 10), 123)\n        self.assertEqual(int('0x123', 16), 291)\n        self.assertEqual(int('0o123', 8), 83)\n        self.assertEqual(int('0b100', 2), 4)\n        self.assertEqual(int('0X123', 16), 291)\n        self.assertEqual(int('0O123', 8), 83)\n        self.assertEqual(int('0B100', 2), 4)\n        self.assertRaises(ValueError, int, '0b2', 2)\n        self.assertRaises(ValueError, int, '0b02', 2)\n        self.assertRaises(ValueError, int, '0B2', 2)\n        self.assertRaises(ValueError, int, '0B02', 2)\n        self.assertRaises(ValueError, int, '0o8', 8)\n        self.assertRaises(ValueError, int, '0o08', 8)\n        self.assertRaises(ValueError, int, '0O8', 8)\n        self.assertRaises(ValueError, int, '0O08', 8)\n        self.assertRaises(ValueError, int, '0xg', 16)\n        self.assertRaises(ValueError, int, '0x0g', 16)\n        self.assertRaises(ValueError, int, '0Xg', 16)\n        self.assertRaises(ValueError, int, '0X0g', 16)\n        self.assertEqual(int('100000000000000000000000000000001', 2), 4294967297)\n        self.assertEqual(int('102002022201221111212', 3), 4294967297)\n        self.assertEqual(int('10000000000000001', 4), 4294967297)\n        self.assertEqual(int('32244002423142', 5), 4294967297)\n        self.assertEqual(int('1550104015505', 6), 4294967297)\n        self.assertEqual(int('211301422355', 7), 4294967297)\n        self.assertEqual(int('40000000001', 8), 4294967297)\n        self.assertEqual(int('12068657455', 9), 4294967297)\n        self.assertEqual(int('4294967297', 10), 4294967297)\n        self.assertEqual(int('1904440555', 11), 4294967297)\n        self.assertEqual(int('9ba461595', 12), 4294967297)\n        self.assertEqual(int('535a7988a', 13), 4294967297)\n        self.assertEqual(int('2ca5b7465', 14), 4294967297)\n        self.assertEqual(int('1a20dcd82', 15), 4294967297)\n        self.assertEqual(int('100000001', 16), 4294967297)\n        self.assertEqual(int('a7ffda92', 17), 4294967297)\n        self.assertEqual(int('704he7g5', 18), 4294967297)\n        self.assertEqual(int('4f5aff67', 19), 4294967297)\n        self.assertEqual(int('3723ai4h', 20), 4294967297)\n        self.assertEqual(int('281d55i5', 21), 4294967297)\n        self.assertEqual(int('1fj8b185', 22), 4294967297)\n        self.assertEqual(int('1606k7id', 23), 4294967297)\n        self.assertEqual(int('mb994ah', 24), 4294967297)\n        self.assertEqual(int('hek2mgm', 25), 4294967297)\n        self.assertEqual(int('dnchbnn', 26), 4294967297)\n        self.assertEqual(int('b28jpdn', 27), 4294967297)\n        self.assertEqual(int('8pfgih5', 28), 4294967297)\n        self.assertEqual(int('76beigh', 29), 4294967297)\n        self.assertEqual(int('5qmcpqh', 30), 4294967297)\n        self.assertEqual(int('4q0jto5', 31), 4294967297)\n        self.assertEqual(int('4000001', 32), 4294967297)\n        self.assertEqual(int('3aokq95', 33), 4294967297)\n        self.assertEqual(int('2qhxjlj', 34), 4294967297)\n        self.assertEqual(int('2br45qc', 35), 4294967297)\n        self.assertEqual(int('1z141z5', 36), 4294967297)\n    def test_intconversion(self):\n        class ClassicMissingMethods:\n            pass\n        self.assertRaises(TypeError, int, ClassicMissingMethods())\n        class MissingMethods(object):\n            pass\n        self.assertRaises(TypeError, int, MissingMethods())\n        class Foo0:\n            def __int__(self):\n                return 42\n        class Foo1(object):\n            def __int__(self):\n                return 42\n        class Foo2(int):\n            def __int__(self):\n                return 42\n        class Foo3(int):\n            def __int__(self):\n                return self\n        class Foo4(int):\n            def __int__(self):\n                return 42\n        class Foo5(int):\n            def __int__(self):\n                return 42.\n        self.assertEqual(int(Foo0()), 42)\n        self.assertEqual(int(Foo1()), 42)\n        self.assertEqual(int(Foo2()), 42)\n        self.assertEqual(int(Foo3()), 0)\n        self.assertEqual(int(Foo4()), 42)\n        self.assertRaises(TypeError, int, Foo5())\n        class Classic:\n            pass\n        for base in (object, Classic):\n            class IntOverridesTrunc(base):\n                def __int__(self):\n                    return 42\n                def __trunc__(self):\n                    return -12\n            self.assertEqual(int(IntOverridesTrunc()), 42)\n            class JustTrunc(base):\n                def __trunc__(self):\n                    return 42\n            self.assertEqual(int(JustTrunc()), 42)\n            for trunc_result_base in (object, Classic):\n                class Integral(trunc_result_base):\n                    def __int__(self):\n                        return 42\n                class TruncReturnsNonInt(base):\n                    def __trunc__(self):\n                        return Integral()\n                self.assertEqual(int(TruncReturnsNonInt()), 42)\n                class NonIntegral(trunc_result_base):\n                    def __trunc__(self):\n                        return NonIntegral()\n                class TruncReturnsNonIntegral(base):\n                    def __trunc__(self):\n                        return NonIntegral()\n                try:\n                    int(TruncReturnsNonIntegral())\n                except TypeError as e:\n                    self.assertEqual(str(e),\n                                      \"__trunc__ returned non-Integral\"\n                                      \" (type NonIntegral)\")\n                else:\n                    self.fail(\"Failed to raise TypeError with %s\" %\n                              ((base, trunc_result_base),))\n    def test_error_message(self):\n        testlist = ('\\xbd', '123\\xbd', '  123 456  ')\n        for s in testlist:\n            try:\n                int(s)\n            except ValueError as e:\n                self.assertIn(s.strip(), e.args[0])\n            else:\n                self.fail(\"Expected int(%r) to raise a ValueError\", s)\ndef test_main():\n    run_unittest(IntTestCases)\nif __name__ == \"__main__\":\n    test_main()\n", "/Lib/subprocess.py": "\"\"\"subprocess - Subprocesses with accessible I/O streams\nThis module allows you to spawn processes, connect to their\ninput/output/error pipes, and obtain their return codes.  This module\nintends to replace several other, older modules and functions, like:\nos.system\nos.spawn*\nos.popen*\npopen2.*\ncommands.*\nInformation about how the subprocess module can be used to replace these\nmodules and functions can be found below.\nUsing the subprocess module\n===========================\nThis module defines one class called Popen:\nclass Popen(args, bufsize=0, executable=None,\n            stdin=None, stdout=None, stderr=None,\n            preexec_fn=None, close_fds=False, shell=False,\n            cwd=None, env=None, universal_newlines=False,\n            startupinfo=None, creationflags=0):\nArguments are:\nargs should be a string, or a sequence of program arguments.  The\nprogram to execute is normally the first item in the args sequence or\nstring, but can be explicitly set by using the executable argument.\nOn UNIX, with shell=False (default): In this case, the Popen class\nuses os.execvp() to execute the child program.  args should normally\nbe a sequence.  A string will be treated as a sequence with the string\nas the only item (the program to execute).\nOn UNIX, with shell=True: If args is a string, it specifies the\ncommand string to execute through the shell.  If args is a sequence,\nthe first item specifies the command string, and any additional items\nwill be treated as additional shell arguments.\nOn Windows: the Popen class uses CreateProcess() to execute the child\nprogram, which operates on strings.  If args is a sequence, it will be\nconverted to a string using the list2cmdline method.  Please note that\nnot all MS Windows applications interpret the command line the same\nway: The list2cmdline is designed for applications using the same\nrules as the MS C runtime.\nbufsize, if given, has the same meaning as the corresponding argument\nto the built-in open() function: 0 means unbuffered, 1 means line\nbuffered, any other positive value means use a buffer of\n(approximately) that size.  A negative bufsize means to use the system\ndefault, which usually means fully buffered.  The default value for\nbufsize is 0 (unbuffered).\nstdin, stdout and stderr specify the executed programs' standard\ninput, standard output and standard error file handles, respectively.\nValid values are PIPE, an existing file descriptor (a positive\ninteger), an existing file object, and None.  PIPE indicates that a\nnew pipe to the child should be created.  With None, no redirection\nwill occur; the child's file handles will be inherited from the\nparent.  Additionally, stderr can be STDOUT, which indicates that the\nstderr data from the applications should be captured into the same\nfile handle as for stdout.\nIf preexec_fn is set to a callable object, this object will be called\nin the child process just before the child is executed.\nIf close_fds is true, all file descriptors except 0, 1 and 2 will be\nclosed before the child process is executed.\nif shell is true, the specified command will be executed through the\nshell.\nIf cwd is not None, the current directory will be changed to cwd\nbefore the child is executed.\nIf env is not None, it defines the environment variables for the new\nprocess.\nIf universal_newlines is true, the file objects stdout and stderr are\nopened as a text files, but lines may be terminated by any of '\\n',\nthe Unix end-of-line convention, '\\r', the Macintosh convention or\n'\\r\\n', the Windows convention.  All of these external representations\nare seen as '\\n' by the Python program.  Note: This feature is only\navailable if Python is built with universal newline support (the\ndefault).  Also, the newlines attribute of the file objects stdout,\nstdin and stderr are not updated by the communicate() method.\nThe startupinfo and creationflags, if given, will be passed to the\nunderlying CreateProcess() function.  They can specify things such as\nappearance of the main window and priority for the new process.\n(Windows only)\nThis module also defines some shortcut functions:\ncall(*popenargs, **kwargs):\n    Run command with arguments.  Wait for command to complete, then\n    return the returncode attribute.\n    The arguments are the same as for the Popen constructor.  Example:\n    retcode = call([\"ls\", \"-l\"])\ncheck_call(*popenargs, **kwargs):\n    Run command with arguments.  Wait for command to complete.  If the\n    exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n    The arguments are the same as for the Popen constructor.  Example:\n    check_call([\"ls\", \"-l\"])\ncheck_output(*popenargs, **kwargs):\n    Run command with arguments and return its output as a byte string.\n    If the exit code was non-zero it raises a CalledProcessError.  The\n    CalledProcessError object will have the return code in the returncode\n    attribute and output in the output attribute.\n    The arguments are the same as for the Popen constructor.  Example:\n    output = check_output([\"ls\", \"-l\", \"/dev/null\"])\nExceptions\n----------\nExceptions raised in the child process, before the new program has\nstarted to execute, will be re-raised in the parent.  Additionally,\nthe exception object will have one extra attribute called\n'child_traceback', which is a string containing traceback information\nfrom the childs point of view.\nThe most common exception raised is OSError.  This occurs, for\nexample, when trying to execute a non-existent file.  Applications\nshould prepare for OSErrors.\nA ValueError will be raised if Popen is called with invalid arguments.\ncheck_call() and check_output() will raise CalledProcessError, if the\ncalled process returns a non-zero return code.\nSecurity\n--------\nUnlike some other popen functions, this implementation will never call\n/bin/sh implicitly.  This means that all characters, including shell\nmetacharacters, can safely be passed to child processes.\nPopen objects\n=============\nInstances of the Popen class have the following methods:\npoll()\n    Check if child process has terminated.  Returns returncode\n    attribute.\nwait()\n    Wait for child process to terminate.  Returns returncode attribute.\ncommunicate(input=None)\n    Interact with process: Send data to stdin.  Read data from stdout\n    and stderr, until end-of-file is reached.  Wait for process to\n    terminate.  The optional input argument should be a string to be\n    sent to the child process, or None, if no data should be sent to\n    the child.\n    communicate() returns a tuple (stdout, stderr).\n    Note: The data read is buffered in memory, so do not use this\n    method if the data size is large or unlimited.\nThe following attributes are also available:\nstdin\n    If the stdin argument is PIPE, this attribute is a file object\n    that provides input to the child process.  Otherwise, it is None.\nstdout\n    If the stdout argument is PIPE, this attribute is a file object\n    that provides output from the child process.  Otherwise, it is\n    None.\nstderr\n    If the stderr argument is PIPE, this attribute is file object that\n    provides error output from the child process.  Otherwise, it is\n    None.\npid\n    The process ID of the child process.\nreturncode\n    The child return code.  A None value indicates that the process\n    hasn't terminated yet.  A negative value -N indicates that the\n    child was terminated by signal N (UNIX only).\nReplacing older functions with the subprocess module\n====================================================\nIn this section, \"a ==> b\" means that b can be used as a replacement\nfor a.\nNote: All functions in this section fail (more or less) silently if\nthe executed program cannot be found; this module raises an OSError\nexception.\nIn the following examples, we assume that the subprocess module is\nimported with \"from subprocess import *\".\nReplacing /bin/sh shell backquote\n---------------------------------\noutput=`mycmd myarg`\n==>\noutput = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]\nReplacing shell pipe line\n-------------------------\noutput=`dmesg | grep hda`\n==>\np1 = Popen([\"dmesg\"], stdout=PIPE)\np2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)\noutput = p2.communicate()[0]\nReplacing os.system()\n---------------------\nsts = os.system(\"mycmd\" + \" myarg\")\n==>\np = Popen(\"mycmd\" + \" myarg\", shell=True)\npid, sts = os.waitpid(p.pid, 0)\nNote:\n* Calling the program through the shell is usually not required.\n* It's easier to look at the returncode attribute than the\n  exitstatus.\nA more real-world example would look like this:\ntry:\n    retcode = call(\"mycmd\" + \" myarg\", shell=True)\n    if retcode < 0:\n        print >>sys.stderr, \"Child was terminated by signal\", -retcode\n    else:\n        print >>sys.stderr, \"Child returned\", retcode\nexcept OSError, e:\n    print >>sys.stderr, \"Execution failed:\", e\nReplacing os.spawn*\n-------------------\nP_NOWAIT example:\npid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n==>\npid = Popen([\"/bin/mycmd\", \"myarg\"]).pid\nP_WAIT example:\nretcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")\n==>\nretcode = call([\"/bin/mycmd\", \"myarg\"])\nVector example:\nos.spawnvp(os.P_NOWAIT, path, args)\n==>\nPopen([path] + args[1:])\nEnvironment example:\nos.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)\n==>\nPopen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})\nReplacing os.popen*\n-------------------\npipe = os.popen(\"cmd\", mode='r', bufsize)\n==>\npipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdout=PIPE).stdout\npipe = os.popen(\"cmd\", mode='w', bufsize)\n==>\npipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdin=PIPE).stdin\n(child_stdin, child_stdout) = os.popen2(\"cmd\", mode, bufsize)\n==>\np = Popen(\"cmd\", shell=True, bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, close_fds=True)\n(child_stdin, child_stdout) = (p.stdin, p.stdout)\n(child_stdin,\n child_stdout,\n child_stderr) = os.popen3(\"cmd\", mode, bufsize)\n==>\np = Popen(\"cmd\", shell=True, bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n(child_stdin,\n child_stdout,\n child_stderr) = (p.stdin, p.stdout, p.stderr)\n(child_stdin, child_stdout_and_stderr) = os.popen4(\"cmd\", mode,\n                                                   bufsize)\n==>\np = Popen(\"cmd\", shell=True, bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)\n(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)\nOn Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as\nthe command to execute, in which case arguments will be passed\ndirectly to the program without shell intervention.  This usage can be\nreplaced as follows:\n(child_stdin, child_stdout) = os.popen2([\"/bin/ls\", \"-l\"], mode,\n                                        bufsize)\n==>\np = Popen([\"/bin/ls\", \"-l\"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)\n(child_stdin, child_stdout) = (p.stdin, p.stdout)\nReturn code handling translates as follows:\npipe = os.popen(\"cmd\", 'w')\n...\nrc = pipe.close()\nif rc is not None and rc % 256:\n    print \"There were some errors\"\n==>\nprocess = Popen(\"cmd\", 'w', shell=True, stdin=PIPE)\n...\nprocess.stdin.close()\nif process.wait() != 0:\n    print \"There were some errors\"\nReplacing popen2.*\n------------------\n(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode)\n==>\np = Popen([\"somestring\"], shell=True, bufsize=bufsize\n          stdin=PIPE, stdout=PIPE, close_fds=True)\n(child_stdout, child_stdin) = (p.stdout, p.stdin)\nOn Unix, popen2 also accepts a sequence as the command to execute, in\nwhich case arguments will be passed directly to the program without\nshell intervention.  This usage can be replaced as follows:\n(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize,\n                                            mode)\n==>\np = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,\n          stdin=PIPE, stdout=PIPE, close_fds=True)\n(child_stdout, child_stdin) = (p.stdout, p.stdin)\nThe popen2.Popen3 and popen2.Popen4 basically works as subprocess.Popen,\nexcept that:\n* subprocess.Popen raises an exception if the execution fails\n* the capturestderr argument is replaced with the stderr argument.\n* stdin=PIPE and stdout=PIPE must be specified.\n* popen2 closes all filedescriptors by default, but you have to specify\n  close_fds=True with subprocess.Popen.\n\"\"\"\nCREATE_NEW_CONSOLE = 16\nCREATE_NEW_PROCESS_GROUP = 512\nclass CalledProcessError(Exception):\n    pass\nMAXFD = 256\nPIPE = -1\nclass Popen(object):\n    pass\nSTARTF_USESHOWWINDOW = 1\nSTARTF_USESTDHANDLES = 256\nclass STARTUPINFO:\n    pass\nSTDOUT = -2\nSTD_ERROR_HANDLE = -12\nSTD_INPUT_HANDLE = -10\nSTD_OUTPUT_HANDLE = -11\nSW_HIDE = 0\n__all__ = \"['Popen', 'PIPE', 'STDOUT', 'call', 'check_call', 'check_output', 'CalledProcessError', \n    'CREATE_NEW_CONSOLE', 'CREATE_NEW_PROCESS_GROUP', 'STD_INPUT_HANDLE', 'STD_OUTPUT_HANDLE', \n    'STD_ERROR_HANDLE', 'SW_HIDE', 'STARTF_USESTDHANDLES', 'STARTF_USESHOWWINDOW']\"\n_active = \"[]\"\ndef _cleanup(*args,**kw):\n    pass\ndef _demo_posix(*args,**kw):\n    pass\ndef _demo_windows(*args,**kw):\n    pass\ndef _eintr_retry_call(*args,**kw):\n    pass\n_subprocess = \"<module '_subprocess' (built-in)>\"\ndef call(*args,**kw):\n    \"\"\"Run command with arguments.  Wait for command to complete, then        return the returncode attribute.\n        The arguments are the same as for the Popen constructor.  Example:\n        retcode = call([\"ls\", \"-l\"])\n        \"\"\"\n    pass\ndef check_call(*args,**kw):\n    \"\"\"Run command with arguments.  Wait for command to complete.  If        the exit code was zero then return, otherwise raise\n        CalledProcessError.  The CalledProcessError object will have the\n        return code in the returncode attribute.\n        The arguments are the same as for the Popen constructor.  Example:\n        check_call([\"ls\", \"-l\"])\n        \"\"\"\n    pass\ndef check_output(*args,**kw):\n    \"\"\"Run command with arguments and return its output as a byte string.    \n        If the exit code was non-zero it raises a CalledProcessError.  The\n        CalledProcessError object will have the return code in the returncode\n        attribute and output in the output attribute.\n        The arguments are the same as for the Popen constructor.  Example:\n        >>> check_output([\"ls\", \"-l\", \"/dev/null\"])\n        'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n'\n        The stdout argument is not allowed as it is used internally.\n        To capture standard error in the result, use stderr=STDOUT.\n        >>> check_output([\"/bin/sh\", \"-c\",\n        ...               \"ls -l non_existent_file ; exit 0\"],\n        ...              stderr=STDOUT)\n        'ls: non_existent_file: No such file or directory\\n'\n        \"\"\"\n    pass\nerrno = \"<module 'errno' (built-in)>\"\ngc = \"<module 'gc' (built-in)>\"\ndef list2cmdline(*args,**kw):\n    \"\"\"        Translate a sequence of arguments into a command line\n        string, using the same rules as the MS C runtime:\n        1) Arguments are delimited by white space, which is either a\n           space or a tab.\n        2) A string surrounded by double quotation marks is\n           interpreted as a single argument, regardless of white space\n           contained within.  A quoted string can be embedded in an\n           argument.\n        3) A double quotation mark preceded by a backslash is\n           interpreted as a literal double quotation mark.\n        4) Backslashes are interpreted literally, unless they\n           immediately precede a double quotation mark.\n        5) If backslashes immediately precede a double quotation mark,\n           every pair of backslashes is interpreted as a literal\n           backslash.  If the number of backslashes is odd, the last\n           backslash escapes the next double quotation mark as\n           described in rule 3.\n        \"\"\"\n    pass\nmsvcrt = \"<module 'msvcrt' (built-in)>\"\nmswindows = True\nos = \"<module 'os' from 'c:\\python27\\lib\\os.pyc'>\"\nclass pywintypes:\n    pass\nsignal = \"<module 'signal' (built-in)>\"\nsys = \"<module 'sys' (built-in)>\"\nthreading = \"<module 'threading' from 'c:\\python27\\lib\\threading.pyc'>\"\ntraceback = \"<module 'traceback' from 'c:\\python27\\lib\\traceback.pyc'>\"\ntypes = \"<module 'types' from 'c:\\python27\\lib\\types.pyc'>\"\n", "/Lib/heapq.py": "\"\"\"Heap queue algorithm (a.k.a. priority queue).\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\nall k, counting elements from 0.  For the sake of comparison,\nnon-existing elements are considered to be infinite.  The interesting\nproperty of a heap is that a[0] is always its smallest element.\nUsage:\nheap = []            # creates an empty heap\nheappush(heap, item) # pushes a new item on the heap\nitem = heappop(heap) # pops the smallest item from the heap\nitem = heap[0]       # smallest item on the heap without popping it\nheapify(x)           # transforms list into a heap, in-place, in linear time\nitem = heapreplace(heap, item) # pops and returns smallest item, and adds\nOur API differs from textbook heap algorithms as follows:\n- We use 0-based indexing.  This makes the relationship between the\n  index for a node and the indexes for its children slightly less\n  obvious, but is more suitable since Python uses 0-based indexing.\n- Our heappop() method returns the smallest item, not the largest.\nThese two make it possible to view the heap as a regular Python list\nwithout surprises: heap[0] is the smallest item, and heap.sort()\nmaintains the heap invariant!\n\"\"\"\n__about__ = \"\"\"Heap queues\n[explanation by Fran\u00e7ois Pinard]\nHeaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for\nall k, counting elements from 0.  For the sake of comparison,\nnon-existing elements are considered to be infinite.  The interesting\nproperty of a heap is that a[0] is always its smallest element.\nThe strange invariant above is meant to be an efficient memory\nrepresentation for a tournament.  The numbers below are `k', not a[k]:\n                                   0\n                  1                                 2\n          3               4                5               6\n      7       8       9       10      11      12      13      14\n    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30\nIn the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In\nan usual binary tournament we see in sports, each cell is the winner\nover the two cells it tops, and we can trace the winner down the tree\nto see all opponents s/he had.  However, in many computer applications\nof such tournaments, we do not need to trace the history of a winner.\nTo be more memory efficient, when a winner is promoted, we try to\nreplace it by something else at a lower level, and the rule becomes\nthat a cell and the two cells it tops contain three different items,\nbut the top cell \"wins\" over the two topped cells.\nIf this heap invariant is protected at all time, index 0 is clearly\nthe overall winner.  The simplest algorithmic way to remove it and\nfind the \"next\" winner is to move some loser (let's say cell 30 in the\ndiagram above) into the 0 position, and then percolate this new 0 down\nthe tree, exchanging values, until the invariant is re-established.\nThis is clearly logarithmic on the total number of items in the tree.\nBy iterating over all items, you get an O(n ln n) sort.\nA nice feature of this sort is that you can efficiently insert new\nitems while the sort is going on, provided that the inserted items are\nnot \"better\" than the last 0'th element you extracted.  This is\nespecially useful in simulation contexts, where the tree holds all\nincoming events, and the \"win\" condition means the smallest scheduled\ntime.  When an event schedule other events for execution, they are\nscheduled into the future, so they can easily go into the heap.  So, a\nheap is a good structure for implementing schedulers (this is what I\nused for my MIDI sequencer :-).\nVarious structures for implementing schedulers have been extensively\nstudied, and heaps are good for this, as they are reasonably speedy,\nthe speed is almost constant, and the worst case is not much different\nthan the average case.  However, there are other representations which\nare more efficient overall, yet the worst cases might be terrible.\nHeaps are also very useful in big disk sorts.  You most probably all\nknow that a big sort implies producing \"runs\" (which are pre-sorted\nsequences, which size is usually related to the amount of CPU memory),\nfollowed by a merging passes for these runs, which merging is often\nvery cleverly organised[1].  It is very important that the initial\nsort produces the longest runs possible.  Tournaments are a good way\nto that.  If, using all the memory available to hold a tournament, you\nreplace and percolate items that happen to fit the current run, you'll\nproduce runs which are twice the size of the memory for random input,\nand much better for input fuzzily ordered.\nMoreover, if you output the 0'th item on disk and get an input which\nmay not fit in the current tournament (because the value \"wins\" over\nthe last output value), it cannot fit in the heap, so the size of the\nheap decreases.  The freed memory could be cleverly reused immediately\nfor progressively building a second heap, which grows at exactly the\nsame rate the first heap is melting.  When the first heap completely\nvanishes, you switch heaps and start a new run.  Clever and quite\neffective!\nIn a word, heaps are useful memory structures to know.  I use them in\na few applications, and I think it is good to keep a `heap' module\naround. :-)\n--------------------\n[1] The disk balancing algorithms which are current, nowadays, are\nmore annoying than clever, and this is a consequence of the seeking\ncapabilities of the disks.  On devices which cannot seek, like big\ntape drives, the story was quite different, and one had to be very\nclever to ensure (far in advance) that each tape movement will be the\nmost effective possible (that is, will best participate at\n\"progressing\" the merge).  Some tapes were even able to read\nbackwards, and this was also used to avoid the rewinding time.\nBelieve me, real good tape sorts were quite spectacular to watch!\nFrom all times, sorting has always been a Great Art! :-)\n\"\"\"\n__all__ = ['heappush', 'heappop', 'heapify', 'heapreplace', 'merge',\n           'nlargest', 'nsmallest', 'heappushpop']\nfrom itertools import islice, count, tee, chain\ndef heappush(heap, item):\n    \"\"\"Push item onto heap, maintaining the heap invariant.\"\"\"\n    heap.append(item)\n    _siftdown(heap, 0, len(heap)-1)\ndef heappop(heap):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant.\"\"\"\n    lastelt = heap.pop()    # raises appropriate IndexError if heap is empty\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt\n        _siftup(heap, 0)\n    else:\n        returnitem = lastelt\n    return returnitem\ndef heapreplace(heap, item):\n    \"\"\"Pop and return the current smallest value, and add the new item.\n    This is more efficient than heappop() followed by heappush(), and can be\n    more appropriate when using a fixed-size heap.  Note that the value\n    returned may be larger than item!  That constrains reasonable uses of\n    this routine unless written as part of a conditional replacement:\n        if item > heap[0]:\n            item = heapreplace(heap, item)\n    \"\"\"\n    returnitem = heap[0]    # raises appropriate IndexError if heap is empty\n    heap[0] = item\n    _siftup(heap, 0)\n    return returnitem\ndef heappushpop(heap, item):\n    \"\"\"Fast version of a heappush followed by a heappop.\"\"\"\n    if heap and heap[0] < item:\n        item, heap[0] = heap[0], item\n        _siftup(heap, 0)\n    return item\ndef heapify(x):\n    \"\"\"Transform list into a heap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    for i in reversed(range(n//2)):\n        _siftup(x, i)\ndef _heappushpop_max(heap, item):\n    \"\"\"Maxheap version of a heappush followed by a heappop.\"\"\"\n    if heap and item < heap[0]:\n        item, heap[0] = heap[0], item\n        _siftup_max(heap, 0)\n    return item\ndef _heapify_max(x):\n    \"\"\"Transform list into a maxheap, in-place, in O(len(x)) time.\"\"\"\n    n = len(x)\n    for i in reversed(range(n//2)):\n        _siftup_max(x, i)\ndef nlargest(n, iterable):\n    \"\"\"Find the n largest elements in a dataset.\n    Equivalent to:  sorted(iterable, reverse=True)[:n]\n    \"\"\"\n    if n < 0:\n        return []\n    it = iter(iterable)\n    result = list(islice(it, n))\n    if not result:\n        return result\n    heapify(result)\n    _heappushpop = heappushpop\n    for elem in it:\n        _heappushpop(result, elem)\n    result.sort(reverse=True)\n    return result\ndef nsmallest(n, iterable):\n    \"\"\"Find the n smallest elements in a dataset.\n    Equivalent to:  sorted(iterable)[:n]\n    \"\"\"\n    if n < 0:\n        return []\n    it = iter(iterable)\n    result = list(islice(it, n))\n    if not result:\n        return result\n    _heapify_max(result)\n    _heappushpop = _heappushpop_max\n    for elem in it:\n        _heappushpop(result, elem)\n    result.sort()\n    return result\ndef _siftdown(heap, startpos, pos):\n    newitem = heap[pos]\n    while pos > startpos:\n        parentpos = (pos - 1) >> 1\n        parent = heap[parentpos]\n        if newitem < parent:\n            heap[pos] = parent\n            pos = parentpos\n            continue\n        break\n    heap[pos] = newitem\ndef _siftup(heap, pos):\n    endpos = len(heap)\n    startpos = pos\n    newitem = heap[pos]\n    childpos = 2*pos + 1    # leftmost child position\n    while childpos < endpos:\n        rightpos = childpos + 1\n        if rightpos < endpos and not heap[childpos] < heap[rightpos]:\n            childpos = rightpos\n        heap[pos] = heap[childpos]\n        pos = childpos\n        childpos = 2*pos + 1\n    heap[pos] = newitem\n    _siftdown(heap, startpos, pos)\ndef _siftdown_max(heap, startpos, pos):\n    'Maxheap variant of _siftdown'\n    newitem = heap[pos]\n    while pos > startpos:\n        parentpos = (pos - 1) >> 1\n        parent = heap[parentpos]\n        if parent < newitem:\n            heap[pos] = parent\n            pos = parentpos\n            continue\n        break\n    heap[pos] = newitem\ndef _siftup_max(heap, pos):\n    'Maxheap variant of _siftup'\n    endpos = len(heap)\n    startpos = pos\n    newitem = heap[pos]\n    childpos = 2*pos + 1    # leftmost child position\n    while childpos < endpos:\n        rightpos = childpos + 1\n        if rightpos < endpos and not heap[rightpos] < heap[childpos]:\n            childpos = rightpos\n        heap[pos] = heap[childpos]\n        pos = childpos\n        childpos = 2*pos + 1\n    heap[pos] = newitem\n    _siftdown_max(heap, startpos, pos)\ntry:\n    from _heapq import *\nexcept ImportError:\n    pass\ndef merge(*iterables):\n    '''Merge multiple sorted inputs into a single sorted output.\n    Similar to sorted(itertools.chain(*iterables)) but returns a generator,\n    does not pull the data into memory all at once, and assumes that each of\n    the input streams is already sorted (smallest to largest).\n    >>> list(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))\n    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]\n    '''\n    _heappop, _heapreplace, _StopIteration = heappop, heapreplace, StopIteration\n    h = []\n    h_append = h.append\n    for itnum, it in enumerate(map(iter, iterables)):\n        try:\n            next = it.__next__\n            h_append([next(), itnum, next])\n        except _StopIteration:\n            pass\n    heapify(h)\n    while 1:\n        try:\n            while 1:\n                v, itnum, next = s = h[0]   # raises IndexError when h is empty\n                yield v\n                s[0] = next()               # raises StopIteration when exhausted\n                _heapreplace(h, s)          # restore heap condition\n        except _StopIteration:\n            _heappop(h)                     # remove empty iterator\n        except IndexError:\n            return\n_nsmallest = nsmallest\ndef nsmallest(n, iterable, key=None):\n    \"\"\"Find the n smallest elements in a dataset.\n    Equivalent to:  sorted(iterable, key=key)[:n]\n    \"\"\"\n    if n == 1:\n        it = iter(iterable)\n        head = list(islice(it, 1))\n        if not head:\n            return []\n        if key is None:\n            return [min(chain(head, it))]\n        return [min(chain(head, it), key=key)]\n    try:\n        size = len(iterable)\n    except (TypeError, AttributeError):\n        pass\n    else:\n        if n >= size:\n            return sorted(iterable, key=key)[:n]\n    if key is None:\n        it = zip(iterable, count())                         # decorate\n        result = _nsmallest(n, it)\n        return [r[0] for r in result]                       # undecorate\n    in1, in2 = tee(iterable)\n    it = zip(map(key, in1), count(), in2)                   # decorate\n    result = _nsmallest(n, it)\n    return [r[2] for r in result]                           # undecorate\n_nlargest = nlargest\ndef nlargest(n, iterable, key=None):\n    \"\"\"Find the n largest elements in a dataset.\n    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]\n    \"\"\"\n    if n == 1:\n        it = iter(iterable)\n        head = list(islice(it, 1))\n        if not head:\n            return []\n        if key is None:\n            return [max(chain(head, it))]\n        return [max(chain(head, it), key=key)]\n    try:\n        size = len(iterable)\n    except (TypeError, AttributeError):\n        pass\n    else:\n        if n >= size:\n            return sorted(iterable, key=key, reverse=True)[:n]\n    if key is None:\n        it = zip(iterable, count(0,-1))                     # decorate\n        result = _nlargest(n, it)\n        return [r[0] for r in result]                       # undecorate\n    in1, in2 = tee(iterable)\n    it = zip(map(key, in1), count(0,-1), in2)               # decorate\n    result = _nlargest(n, it)\n    return [r[2] for r in result]                           # undecorate\nif __name__ == \"__main__\":\n    heap = []\n    data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n    for item in data:\n        heappush(heap, item)\n    sort = []\n    while heap:\n        sort.append(heappop(heap))\n    print(sort)\n    import doctest\n    doctest.testmod()\n", "/Lib/numbers.py": "\"\"\"Abstract Base Classes (ABCs) for numbers, according to PEP 3141.\nTODO: Fill out more detailed documentation on the operators.\"\"\"\nfrom abc import ABCMeta, abstractmethod\n__all__ = [\"Number\", \"Complex\", \"Real\", \"Rational\", \"Integral\"]\nclass Number(metaclass=ABCMeta):\n    \"\"\"All numbers inherit from this class.\n    If you just want to check if an argument x is a number, without\n    caring what kind, use isinstance(x, Number).\n    \"\"\"\n    __slots__ = ()\n    __hash__ = None\nclass Complex(Number):\n    \"\"\"Complex defines the operations that work on the builtin complex type.\n    In short, those are: a conversion to complex, .real, .imag, +, -,\n    *, /, abs(), .conjugate, ==, and !=.\n    If it is given heterogenous arguments, and doesn't have special\n    knowledge about them, it should fall back to the builtin complex\n    type as described below.\n    \"\"\"\n    __slots__ = ()\n    @abstractmethod\n    def __complex__(self):\n        \"\"\"Return a builtin complex instance. Called for complex(self).\"\"\"\n    def __bool__(self):\n        \"\"\"True if self != 0. Called for bool(self).\"\"\"\n        return self != 0\n    @property\n    @abstractmethod\n    def real(self):\n        \"\"\"Retrieve the real component of this number.\n        This should subclass Real.\n        \"\"\"\n        raise NotImplementedError\n    @property\n    @abstractmethod\n    def imag(self):\n        \"\"\"Retrieve the imaginary component of this number.\n        This should subclass Real.\n        \"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __add__(self, other):\n        \"\"\"self + other\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __radd__(self, other):\n        \"\"\"other + self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __neg__(self):\n        \"\"\"-self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __pos__(self):\n        \"\"\"+self\"\"\"\n        raise NotImplementedError\n    def __sub__(self, other):\n        \"\"\"self - other\"\"\"\n        return self + -other\n    def __rsub__(self, other):\n        \"\"\"other - self\"\"\"\n        return -self + other\n    @abstractmethod\n    def __mul__(self, other):\n        \"\"\"self * other\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rmul__(self, other):\n        \"\"\"other * self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __truediv__(self, other):\n        \"\"\"self / other: Should promote to float when necessary.\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rtruediv__(self, other):\n        \"\"\"other / self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __pow__(self, exponent):\n        \"\"\"self**exponent; should promote to float or complex when necessary.\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rpow__(self, base):\n        \"\"\"base ** self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __abs__(self):\n        \"\"\"Returns the Real distance from 0. Called for abs(self).\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def conjugate(self):\n        \"\"\"(x+y*i).conjugate() returns (x-y*i).\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __eq__(self, other):\n        \"\"\"self == other\"\"\"\n        raise NotImplementedError\n    def __ne__(self, other):\n        \"\"\"self != other\"\"\"\n        return not (self == other)\nComplex.register(complex)\nclass Real(Complex):\n    \"\"\"To Complex, Real adds the operations that work on real numbers.\n    In short, those are: a conversion to float, trunc(), divmod,\n    %, <, <=, >, and >=.\n    Real also provides defaults for the derived operations.\n    \"\"\"\n    __slots__ = ()\n    @abstractmethod\n    def __float__(self):\n        \"\"\"Any Real can be converted to a native float object.\n        Called for float(self).\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __trunc__(self):\n        \"\"\"trunc(self): Truncates self to an Integral.\n        Returns an Integral i such that:\n          * i>0 iff self>0;\n          * abs(i) <= abs(self);\n          * for any Integral j satisfying the first two conditions,\n            abs(i) >= abs(j) [i.e. i has \"maximal\" abs among those].\n        i.e. \"truncate towards 0\".\n        \"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __floor__(self):\n        \"\"\"Finds the greatest Integral <= self.\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __ceil__(self):\n        \"\"\"Finds the least Integral >= self.\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __round__(self, ndigits=None):\n        \"\"\"Rounds self to ndigits decimal places, defaulting to 0.\n        If ndigits is omitted or None, returns an Integral, otherwise\n        returns a Real. Rounds half toward even.\n        \"\"\"\n        raise NotImplementedError\n    def __divmod__(self, other):\n        \"\"\"divmod(self, other): The pair (self // other, self % other).\n        Sometimes this can be computed faster than the pair of\n        operations.\n        \"\"\"\n        return (self // other, self % other)\n    def __rdivmod__(self, other):\n        \"\"\"divmod(other, self): The pair (self // other, self % other).\n        Sometimes this can be computed faster than the pair of\n        operations.\n        \"\"\"\n        return (other // self, other % self)\n    @abstractmethod\n    def __floordiv__(self, other):\n        \"\"\"self // other: The floor() of self/other.\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rfloordiv__(self, other):\n        \"\"\"other // self: The floor() of other/self.\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __mod__(self, other):\n        \"\"\"self % other\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rmod__(self, other):\n        \"\"\"other % self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __lt__(self, other):\n        \"\"\"self < other\n        < on Reals defines a total ordering, except perhaps for NaN.\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __le__(self, other):\n        \"\"\"self <= other\"\"\"\n        raise NotImplementedError\n    def __complex__(self):\n        \"\"\"complex(self) == complex(float(self), 0)\"\"\"\n        return complex(float(self))\n    @property\n    def real(self):\n        \"\"\"Real numbers are their real component.\"\"\"\n        return +self\n    @property\n    def imag(self):\n        \"\"\"Real numbers have no imaginary component.\"\"\"\n        return 0\n    def conjugate(self):\n        \"\"\"Conjugate is a no-op for Reals.\"\"\"\n        return +self\nReal.register(float)\nclass Rational(Real):\n    \"\"\".numerator and .denominator should be in lowest terms.\"\"\"\n    __slots__ = ()\n    @property\n    @abstractmethod\n    def numerator(self):\n        raise NotImplementedError\n    @property\n    @abstractmethod\n    def denominator(self):\n        raise NotImplementedError\n    def __float__(self):\n        \"\"\"float(self) = self.numerator / self.denominator\n        It's important that this conversion use the integer's \"true\"\n        division rather than casting one side to float before dividing\n        so that ratios of huge integers convert without overflowing.\n        \"\"\"\n        return self.numerator / self.denominator\nclass Integral(Rational):\n    \"\"\"Integral adds a conversion to int and the bit-string operations.\"\"\"\n    __slots__ = ()\n    @abstractmethod\n    def __int__(self):\n        \"\"\"int(self)\"\"\"\n        raise NotImplementedError\n    def __index__(self):\n        \"\"\"Called whenever an index is needed, such as in slicing\"\"\"\n        return int(self)\n    @abstractmethod\n    def __pow__(self, exponent, modulus=None):\n        \"\"\"self ** exponent % modulus, but maybe faster.\n        Accept the modulus argument if you want to support the\n        3-argument version of pow(). Raise a TypeError if exponent < 0\n        or any argument isn't Integral. Otherwise, just implement the\n        2-argument version described in Complex.\n        \"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __lshift__(self, other):\n        \"\"\"self << other\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rlshift__(self, other):\n        \"\"\"other << self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rshift__(self, other):\n        \"\"\"self >> other\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rrshift__(self, other):\n        \"\"\"other >> self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __and__(self, other):\n        \"\"\"self & other\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rand__(self, other):\n        \"\"\"other & self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __xor__(self, other):\n        \"\"\"self ^ other\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __rxor__(self, other):\n        \"\"\"other ^ self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __or__(self, other):\n        \"\"\"self | other\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __ror__(self, other):\n        \"\"\"other | self\"\"\"\n        raise NotImplementedError\n    @abstractmethod\n    def __invert__(self):\n        \"\"\"~self\"\"\"\n        raise NotImplementedError\n    def __float__(self):\n        \"\"\"float(self) == float(int(self))\"\"\"\n        return float(int(self))\n    @property\n    def numerator(self):\n        \"\"\"Integers are their own numerators.\"\"\"\n        return +self\n    @property\n    def denominator(self):\n        \"\"\"Integers have a denominator of 1.\"\"\"\n        return 1\nIntegral.register(int)\n", "/Lib/_imp.py": "\"\"\"(Extremely) low-level import machinery bits as used by importlib and imp.\"\"\"\nclass __loader__(object):pass\ndef _fix_co_filename(*args,**kw):\n    pass\ndef acquire_lock(*args,**kw):\n    \"\"\"acquire_lock() -> None    Acquires the interpreter's import lock for the current thread.\n    This lock should be used by import hooks to ensure thread-safety\n    when importing modules.\n    On platforms without threads, this function does nothing.\"\"\"\n    pass\ndef extension_suffixes(*args,**kw):\n    \"\"\"extension_suffixes() -> list of strings    Returns the list of file suffixes used to identify extension modules.\"\"\"\n    return ['.pyd']\ndef get_frozen_object(*args,**kw):\n    pass\ndef init_builtin(module,*args,**kw):\n    return __import__(module)\ndef init_frozen(*args,**kw):\n    pass\ndef is_builtin(*args,**kw):\n    pass\ndef is_frozen(*args,**kw):\n    pass\ndef is_frozen_package(*args,**kw):\n    pass\ndef load_dynamic(*args,**kw):\n    pass\ndef lock_held(*args,**kw):\n    \"\"\"lock_held() -> boolean    Return True if the import lock is currently held, else False.\n    On platforms without threads, return False.\"\"\"\n    pass\ndef release_lock(*args,**kw):\n    \"\"\"release_lock() -> None    Release the interpreter's import lock.\n    On platforms without threads, this function does nothing.\"\"\"\n    pass\n", "/Lib/bisect.py": "\"\"\"Bisection algorithms.\"\"\"\ndef insort_right(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n    If x is already in a, insert it to the right of the rightmost x.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if x < a[mid]: hi = mid\n        else: lo = mid+1\n    a.insert(lo, x)\ninsort = insort_right   # backward compatibility\ndef bisect_right(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if x < a[mid]: hi = mid\n        else: lo = mid+1\n    return lo\nbisect = bisect_right   # backward compatibility\ndef insort_left(a, x, lo=0, hi=None):\n    \"\"\"Insert item x in list a, and keep it sorted assuming a is sorted.\n    If x is already in a, insert it to the left of the leftmost x.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if a[mid] < x: lo = mid+1\n        else: hi = mid\n    a.insert(lo, x)\ndef bisect_left(a, x, lo=0, hi=None):\n    \"\"\"Return the index where to insert item x in list a, assuming a is sorted.\n    The return value i is such that all e in a[:i] have e < x, and all e in\n    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    \"\"\"\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo+hi)//2\n        if a[mid] < x: lo = mid+1\n        else: hi = mid\n    return lo\n", "/libs/_html.js": "$module=(function($B){var __builtins__=$B.builtins;var $TagSumDict=$B.$TagSum.$dict;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");function $Tag(tagName,args){var obj=$B.$DOMNode(document.createElement(tagName));obj.parent=this;if(args!=undefined&&args.length>0){$start=0;$first=args[0];if($first.__class__!==$B.$KwDict){$start=1;if(isinstance($first,[str,int,float])){txt=document.createTextNode(str($first));obj.elt.appendChild(txt);}else if($first.__class__===$TagSumDict)for($i=0;$i<$first.children.length;$i++)obj.elt.appendChild($first.children[$i].elt);else try{obj.elt.appendChild($first.elt);}catch(err){console.log('erreur '+err);throw ValueError('wrong element '+$first);}}for(var $i=$start;$i<args.length;$i++){$arg=args[$i];if($arg&&$arg.__class__===$B.$KwDict)if($arg.name.toLowerCase().substr(0,2)===\"on\")eval('$B.DOMNode.bind(obj,\"'+$arg.name.toLowerCase().substr(2)+'\",function(){'+$arg.value+'})');else if($arg.name.toLowerCase()==\"style\")$B.DOMNode.set_style(obj,$arg.value);else if($arg.value!==false)try{var arg=$arg.name.toLowerCase();obj.elt.setAttribute(arg,$arg.value);if(arg==\"class\")obj.elt.setAttribute(\"className\",$arg.value);}catch(err){console.log('erreur '+err);throw ValueError(\"can't set attribute \"+$arg.name);}}}return obj;}function A(){var obj=$Tag('A',arguments);return obj;}A.__name__='html.A';var $src=A+'';$tags=['A','ABBR','ACRONYM','ADDRESS','APPLET','B','BDO','BIG','BLOCKQUOTE','BUTTON','CAPTION','CENTER','CITE','CODE','DEL','DFN','DIR','DIV','DL','EM','FIELDSET','FONT','FORM','FRAMESET','H1','H2','H3','H4','H5','H6','I','IFRAME','INS','KBD','LABEL','LEGEND','MAP','MENU','NOFRAMES','NOSCRIPT','OBJECT','OL','OPTGROUP','PRE','Q','S','SAMP','SCRIPT','SELECT','SMALL','SPAN','STRIKE','STRONG','STYLE','SUB','SUP','TABLE','TEXTAREA','TITLE','TT','U','UL','VAR','BODY','COLGROUP','DD','DT','HEAD','HTML','LI','P','TBODY','OPTION','TD','TFOOT','TH','THEAD','TR','AREA','BASE','BASEFONT','BR','COL','FRAME','HR','IMG','INPUT','ISINDEX','LINK','META','PARAM'];$tags=$tags.concat(['ARTICLE','ASIDE','AUDIO','BDI','CANVAS','COMMAND','DATALIST','DETAILS','DIALOG','EMBED','FIGCAPTION','FIGURE','FOOTER','HEADER','KEYGEN','MARK','METER','NAV','OUTPUT','PROGRESS','RP','RT','RUBY','SECTION','SOURCE','SUMMARY','TIME','TRACK','VIDEO','WBR']);var obj=new Object();for($i=0;$i<$tags.length;$i++){$code=$src.replace(/A/gm,$tags[$i]);eval(\"obj.\"+$tags[$i]+\"=\"+$code);eval(\"obj.\"+$tags[$i]+'.__name__=\"html.'+$tags[$i]+'\"');}obj.__getattr__=function(attr){return this[attr];};return obj;})(__BRYTHON__);", "/Lib/colorsys.py": "\"\"\"Conversion functions between RGB and other color systems.\nThis modules provides two functions for each color system ABC:\n  rgb_to_abc(r, g, b) --> a, b, c\n  abc_to_rgb(a, b, c) --> r, g, b\nAll inputs and outputs are triples of floats in the range [0.0...1.0]\n(with the exception of I and Q, which covers a slightly larger range).\nInputs outside the valid range may cause exceptions or invalid outputs.\nSupported color systems:\nRGB: Red, Green, Blue components\nYIQ: Luminance, Chrominance (used by composite video signals)\nHLS: Hue, Luminance, Saturation\nHSV: Hue, Saturation, Value\n\"\"\"\n__all__ = [\"rgb_to_yiq\",\"yiq_to_rgb\",\"rgb_to_hls\",\"hls_to_rgb\",\n           \"rgb_to_hsv\",\"hsv_to_rgb\"]\nONE_THIRD = 1.0/3.0\nONE_SIXTH = 1.0/6.0\nTWO_THIRD = 2.0/3.0\ndef rgb_to_yiq(r, g, b):\n    y = 0.30*r + 0.59*g + 0.11*b\n    i = 0.60*r - 0.28*g - 0.32*b\n    q = 0.21*r - 0.52*g + 0.31*b\n    return (y, i, q)\ndef yiq_to_rgb(y, i, q):\n    r = y + 0.948262*i + 0.624013*q\n    g = y - 0.276066*i - 0.639810*q\n    b = y - 1.105450*i + 1.729860*q\n    if r < 0.0:\n        r = 0.0\n    if g < 0.0:\n        g = 0.0\n    if b < 0.0:\n        b = 0.0\n    if r > 1.0:\n        r = 1.0\n    if g > 1.0:\n        g = 1.0\n    if b > 1.0:\n        b = 1.0\n    return (r, g, b)\ndef rgb_to_hls(r, g, b):\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    l = (minc+maxc)/2.0\n    if minc == maxc:\n        return 0.0, l, 0.0\n    if l <= 0.5:\n        s = (maxc-minc) / (maxc+minc)\n    else:\n        s = (maxc-minc) / (2.0-maxc-minc)\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, l, s\ndef hls_to_rgb(h, l, s):\n    if s == 0.0:\n        return l, l, l\n    if l <= 0.5:\n        m2 = l * (1.0+s)\n    else:\n        m2 = l+s-(l*s)\n    m1 = 2.0*l - m2\n    return (_v(m1, m2, h+ONE_THIRD), _v(m1, m2, h), _v(m1, m2, h-ONE_THIRD))\ndef _v(m1, m2, hue):\n    hue = hue % 1.0\n    if hue < ONE_SIXTH:\n        return m1 + (m2-m1)*hue*6.0\n    if hue < 0.5:\n        return m2\n    if hue < TWO_THIRD:\n        return m1 + (m2-m1)*(TWO_THIRD-hue)*6.0\n    return m1\ndef rgb_to_hsv(r, g, b):\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\ndef hsv_to_rgb(h, s, v):\n    if s == 0.0:\n        return v, v, v\n    i = int(h*6.0) # XXX assume int() truncates!\n    f = (h*6.0) - i\n    p = v*(1.0 - s)\n    q = v*(1.0 - s*f)\n    t = v*(1.0 - s*(1.0-f))\n    i = i%6\n    if i == 0:\n        return v, t, p\n    if i == 1:\n        return q, v, p\n    if i == 2:\n        return p, v, t\n    if i == 3:\n        return p, q, v\n    if i == 4:\n        return t, p, v\n    if i == 5:\n        return v, p, q\n", "/Lib/collections/__init__.py": "from _collections import deque, defaultdict\n__all__ = ['deque', 'defaultdict', 'namedtuple', 'UserDict', 'UserList',\n            'UserString', 'Counter', 'OrderedDict']\nfrom _abcoll import MutableMapping\nfrom _collections import deque, defaultdict, namedtuple\nfrom operator import itemgetter as _itemgetter\nfrom keyword import iskeyword as _iskeyword\nimport sys as _sys\nimport heapq as _heapq\nfrom itertools import repeat as _repeat, chain as _chain, starmap as _starmap\nfrom reprlib import recursive_repr as _recursive_repr\nclass Set(set):\n    pass\nclass Sequence(list):\n    pass\ndef _proxy(obj):\n    return obj\nclass _Link(object):\n    __slots__ = 'prev', 'next', 'key', '__weakref__'\nclass OrderedDict(dict):\n    'Dictionary that remembers insertion order'\n    def __init__(self, *args, **kwds):\n        '''Initialize an ordered dictionary.  The signature is the same as\n        regular dictionaries, but keyword arguments are not recommended because\n        their insertion order is arbitrary.\n        '''\n        if len(args) > 1:\n            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n        try:\n            self.__root\n        except AttributeError:\n            self.__hardroot = _Link()\n            self.__root = root = _proxy(self.__hardroot)\n            root.prev = root.next = root\n            self.__map = {}\n        self.__update(*args, **kwds)\n    def __setitem__(self, key, value,\n                    dict_setitem=dict.__setitem__, proxy=_proxy, Link=_Link):\n        'od.__setitem__(i, y) <==> od[i]=y'\n        if key not in self:\n            self.__map[key] = link = Link()\n            root = self.__root\n            last = root.prev\n            link.prev, link.next, link.key = last, root, key\n            last.next = link\n            root.prev = proxy(link)\n        dict_setitem(self, key, value)\n    def __delitem__(self, key, dict_delitem=dict.__delitem__):\n        'od.__delitem__(y) <==> del od[y]'\n        dict_delitem(self, key)\n        link = self.__map.pop(key)\n        link_prev = link.prev\n        link_next = link.next\n        link_prev.next = link_next\n        link_next.prev = link_prev\n    def __iter__(self):\n        'od.__iter__() <==> iter(od)'\n        root = self.__root\n        curr = root.next\n        while curr is not root:\n            yield curr.key\n            curr = curr.next\n    def __reversed__(self):\n        'od.__reversed__() <==> reversed(od)'\n        root = self.__root\n        curr = root.prev\n        while curr is not root:\n            yield curr.key\n            curr = curr.prev\n    def clear(self):\n        'od.clear() -> None.  Remove all items from od.'\n        root = self.__root\n        root.prev = root.next = root\n        self.__map.clear()\n        dict.clear(self)\n    def popitem(self, last=True):\n        '''od.popitem() -> (k, v), return and remove a (key, value) pair.\n        Pairs are returned in LIFO order if last is true or FIFO order if false.\n        '''\n        if not self:\n            raise KeyError('dictionary is empty')\n        root = self.__root\n        if last:\n            link = root.prev\n            link_prev = link.prev\n            link_prev.next = root\n            root.prev = link_prev\n        else:\n            link = root.next\n            link_next = link.next\n            root.next = link_next\n            link_next.prev = root\n        key = link.key\n        del self.__map[key]\n        value = dict.pop(self, key)\n        return key, value\n    def move_to_end(self, key, last=True):\n        '''Move an existing element to the end (or beginning if last==False).\n        Raises KeyError if the element does not exist.\n        When last=True, acts like a fast version of self[key]=self.pop(key).\n        '''\n        link = self.__map[key]\n        link_prev = link.prev\n        link_next = link.next\n        link_prev.next = link_next\n        link_next.prev = link_prev\n        root = self.__root\n        if last:\n            last = root.prev\n            link.prev = last\n            link.next = root\n            last.next = root.prev = link\n        else:\n            first = root.next\n            link.prev = root\n            link.next = first\n            root.next = first.prev = link\n    def __sizeof__(self):\n        sizeof = _sys.getsizeof\n        n = len(self) + 1                       # number of links including root\n        size = sizeof(self.__dict__)            # instance dictionary\n        size += sizeof(self.__map) * 2          # internal dict and inherited dict\n        size += sizeof(self.__hardroot) * n     # link objects\n        size += sizeof(self.__root) * n         # proxy objects\n        return size\n    update = __update = MutableMapping.update\n    keys = MutableMapping.keys\n    values = MutableMapping.values\n    items = MutableMapping.items\n    __ne__ = MutableMapping.__ne__\n    __marker = object()\n    def pop(self, key, default=__marker):\n        '''od.pop(k[,d]) -> v, remove specified key and return the corresponding\n        value.  If key is not found, d is returned if given, otherwise KeyError\n        is raised.\n        '''\n        if key in self:\n            result = self[key]\n            del self[key]\n            return result\n        if default is self.__marker:\n            raise KeyError(key)\n        return default\n    def setdefault(self, key, default=None):\n        'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od'\n        if key in self:\n            return self[key]\n        self[key] = default\n        return default\n    def __repr__(self):\n        'od.__repr__() <==> repr(od)'\n        if not self:\n            return '%s()' % (self.__class__.__name__,)\n        return '%s(%r)' % (self.__class__.__name__, list(self.items()))\n    def __reduce__(self):\n        'Return state information for pickling'\n        items = [[k, self[k]] for k in self]\n        inst_dict = vars(self).copy()\n        for k in vars(OrderedDict()):\n            inst_dict.pop(k, None)\n        if inst_dict:\n            return (self.__class__, (items,), inst_dict)\n        return self.__class__, (items,)\n    def copy(self):\n        'od.copy() -> a shallow copy of od'\n        return self.__class__(self)\n    @classmethod\n    def fromkeys(cls, iterable, value=None):\n        '''OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S.\n        If not specified, the value defaults to None.\n        '''\n        self = cls()\n        for key in iterable:\n            self[key] = value\n        return self\n    def __eq__(self, other):\n        '''od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive\n        while comparison to a regular mapping is order-insensitive.\n        '''\n        if isinstance(other, OrderedDict):\n            return len(self)==len(other) and \\\n                   all(p==q for p, q in zip(self.items(), other.items()))\n        return dict.__eq__(self, other)\ndef _count_elements(mapping, iterable):\n    'Tally elements from the iterable.'\n    mapping_get = mapping.get\n    for elem in iterable:\n        mapping[elem] = mapping_get(elem, 0) + 1\nclass Counter(dict):\n    '''Dict subclass for counting hashable items.  Sometimes called a bag\n    or multiset.  Elements are stored as dictionary keys and their counts\n    are stored as dictionary values.\n    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n    >>> c.most_common(3)                # three most common elements\n    [('a', 5), ('b', 4), ('c', 3)]\n    >>> sorted(c)                       # list all unique elements\n    ['a', 'b', 'c', 'd', 'e']\n    >>> ''.join(sorted(c.elements()))   # list elements with repetitions\n    'aaaaabbbbcccdde'\n    >>> sum(c.values())                 # total of all counts\n    15\n    >>> c['a']                          # count of letter 'a'\n    5\n    >>> for elem in 'shazam':           # update counts from an iterable\n    ...     c[elem] += 1                # by adding 1 to each element's count\n    >>> c['a']                          # now there are seven 'a'\n    7\n    >>> del c['b']                      # remove all 'b'\n    >>> c['b']                          # now there are zero 'b'\n    0\n    >>> d = Counter('simsalabim')       # make another counter\n    >>> c.update(d)                     # add in the second counter\n    >>> c['a']                          # now there are nine 'a'\n    9\n    >>> c.clear()                       # empty the counter\n    >>> c\n    Counter()\n    Note:  If a count is set to zero or reduced to zero, it will remain\n    in the counter until the entry is deleted or the counter is cleared:\n    >>> c = Counter('aaabbc')\n    >>> c['b'] -= 2                     # reduce the count of 'b' by two\n    >>> c.most_common()                 # 'b' is still in, but its count is zero\n    [('a', 3), ('c', 1), ('b', 0)]\n    '''\n    def __init__(self, iterable=None, **kwds):\n        '''Create a new, empty Counter object.  And if given, count elements\n        from an input iterable.  Or, initialize the count from another mapping\n        of elements to their counts.\n        >>> c = Counter()                           # a new, empty counter\n        >>> c = Counter('gallahad')                 # a new counter from an iterable\n        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping\n        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args\n        '''\n        dict.__init__(self)\n        self.update(iterable, **kwds)\n    def __missing__(self, key):\n        'The count of elements not in the Counter is zero.'\n        return 0\n    def most_common(self, n=None):\n        '''List the n most common elements and their counts from the most\n        common to the least.  If n is None, then list all element counts.\n        >>> Counter('abcdeabcdabcaba').most_common(3)\n        [('a', 5), ('b', 4), ('c', 3)]\n        '''\n        if n is None:\n            return sorted(self.items(), key=_itemgetter(1), reverse=True)\n        return _heapq.nlargest(n, self.items(), key=_itemgetter(1))\n    def elements(self):\n        '''Iterator over elements repeating each as many times as its count.\n        >>> c = Counter('ABCABC')\n        >>> sorted(c.elements())\n        ['A', 'A', 'B', 'B', 'C', 'C']\n        >>> prime_factors = Counter({2: 2, 3: 3, 17: 1})\n        >>> product = 1\n        >>> for factor in prime_factors.elements():     # loop over factors\n        ...     product *= factor                       # and multiply them\n        >>> product\n        1836\n        Note, if an element's count has been set to zero or is a negative\n        number, elements() will ignore it.\n        '''\n        return _chain.from_iterable(_starmap(_repeat, self.items()))\n    @classmethod\n    def fromkeys(cls, iterable, v=None):\n        raise NotImplementedError(\n            'Counter.fromkeys() is undefined.  Use Counter(iterable) instead.')\n    def update(self, iterable=None, **kwds):\n        '''Like dict.update() but add counts instead of replacing them.\n        Source can be an iterable, a dictionary, or another Counter instance.\n        >>> c = Counter('which')\n        >>> c.update('witch')           # add elements from another iterable\n        >>> d = Counter('watch')\n        >>> c.update(d)                 # add elements from another counter\n        >>> c['h']                      # four 'h' in which, witch, and watch\n        4\n        '''\n        if iterable is not None:\n            if isinstance(iterable, Mapping):\n                if self:\n                    self_get = self.get\n                    for elem, count in iterable.items():\n                        self[elem] = count + self_get(elem, 0)\n                else:\n                    super().update(iterable) # fast path when counter is empty\n            else:\n                _count_elements(self, iterable)\n        if kwds:\n            self.update(kwds)\n    def subtract(self, iterable=None, **kwds):\n        '''Like dict.update() but subtracts counts instead of replacing them.\n        Counts can be reduced below zero.  Both the inputs and outputs are\n        allowed to contain zero and negative counts.\n        Source can be an iterable, a dictionary, or another Counter instance.\n        >>> c = Counter('which')\n        >>> c.subtract('witch')             # subtract elements from another iterable\n        >>> c.subtract(Counter('watch'))    # subtract elements from another counter\n        >>> c['h']                          # 2 in which, minus 1 in witch, minus 1 in watch\n        0\n        >>> c['w']                          # 1 in which, minus 1 in witch, minus 1 in watch\n        -1\n        '''\n        if iterable is not None:\n            self_get = self.get\n            if isinstance(iterable, Mapping):\n                for elem, count in iterable.items():\n                    self[elem] = self_get(elem, 0) - count\n            else:\n                for elem in iterable:\n                    self[elem] = self_get(elem, 0) - 1\n        if kwds:\n            self.subtract(kwds)\n    def copy(self):\n        'Return a shallow copy.'\n        return self.__class__(self)\n    def __reduce__(self):\n        return self.__class__, (dict(self),)\n    def __delitem__(self, elem):\n        'Like dict.__delitem__() but does not raise KeyError for missing values.'\n        if elem in self:\n            super().__delitem__(elem)\n    def __repr__(self):\n        if not self:\n            return '%s()' % self.__class__.__name__\n        try:\n            items = ', '.join(map('%r: %r'.__mod__, self.most_common()))\n            return '%s({%s})' % (self.__class__.__name__, items)\n        except TypeError:\n            return '{0}({1!r})'.format(self.__class__.__name__, dict(self))\n    def __add__(self, other):\n        '''Add counts from two counters.\n        >>> Counter('abbb') + Counter('bcc')\n        Counter({'b': 4, 'c': 2, 'a': 1})\n        '''\n        if not isinstance(other, Counter):\n            return NotImplemented\n        result = Counter()\n        for elem, count in self.items():\n            newcount = count + other[elem]\n            if newcount > 0:\n                result[elem] = newcount\n        for elem, count in other.items():\n            if elem not in self and count > 0:\n                result[elem] = count\n        return result\n    def __sub__(self, other):\n        ''' Subtract count, but keep only results with positive counts.\n        >>> Counter('abbbc') - Counter('bccd')\n        Counter({'b': 2, 'a': 1})\n        '''\n        if not isinstance(other, Counter):\n            return NotImplemented\n        result = Counter()\n        for elem, count in self.items():\n            newcount = count - other[elem]\n            if newcount > 0:\n                result[elem] = newcount\n        for elem, count in other.items():\n            if elem not in self and count < 0:\n                result[elem] = 0 - count\n        return result\n    def __or__(self, other):\n        '''Union is the maximum of value in either of the input counters.\n        >>> Counter('abbb') | Counter('bcc')\n        Counter({'b': 3, 'c': 2, 'a': 1})\n        '''\n        if not isinstance(other, Counter):\n            return NotImplemented\n        result = Counter()\n        for elem, count in self.items():\n            other_count = other[elem]\n            newcount = other_count if count < other_count else count\n            if newcount > 0:\n                result[elem] = newcount\n        for elem, count in other.items():\n            if elem not in self and count > 0:\n                result[elem] = count\n        return result\n    def __and__(self, other):\n        ''' Intersection is the minimum of corresponding counts.\n        >>> Counter('abbb') & Counter('bcc')\n        Counter({'b': 1})\n        '''\n        if not isinstance(other, Counter):\n            return NotImplemented\n        result = Counter()\n        for elem, count in self.items():\n            other_count = other[elem]\n            newcount = count if count < other_count else other_count\n            if newcount > 0:\n                result[elem] = newcount\n        return result\nclass ChainMap(MutableMapping):\n    ''' A ChainMap groups multiple dicts (or other mappings) together\n    to create a single, updateable view.\n    The underlying mappings are stored in a list.  That list is public and can\n    accessed or updated using the *maps* attribute.  There is no other state.\n    Lookups search the underlying mappings successively until a key is found.\n    In contrast, writes, updates, and deletions only operate on the first\n    mapping.\n    '''\n    def __init__(self, *maps):\n        '''Initialize a ChainMap by setting *maps* to the given mappings.\n        If no mappings are provided, a single empty dictionary is used.\n        '''\n        self.maps = list(maps) or [{}]          # always at least one map\n    def __missing__(self, key):\n        raise KeyError(key)\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n        return self.__missing__(key)            # support subclasses that define __missing__\n    def get(self, key, default=None):\n        return self[key] if key in self else default\n    def __len__(self):\n        return len(set().union(*self.maps))     # reuses stored hash values if possible\n    def __iter__(self):\n        return iter(set().union(*self.maps))\n    def __contains__(self, key):\n        return any(key in m for m in self.maps)\n    def __bool__(self):\n        return any(self.maps)\n    def __repr__(self):\n        return '{0.__class__.__name__}({1})'.format(\n            self, ', '.join(map(repr, self.maps)))\n    def __repr__(self):\n        return ','.join(str(_map) for _map in self.maps)\n    @classmethod\n    def fromkeys(cls, iterable, *args):\n        'Create a ChainMap with a single dict created from the iterable.'\n        return cls(dict.fromkeys(iterable, *args))\n    def copy(self):\n        'New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]'\n        return self.__class__(self.maps[0].copy(), *self.maps[1:])\n    __copy__ = copy\n    def new_child(self):                        # like Django's Context.push()\n        'New ChainMap with a new dict followed by all previous maps.'\n        return self.__class__({}, *self.maps)\n    @property\n    def parents(self):                          # like Django's Context.pop()\n        'New ChainMap from maps[1:].'\n        return self.__class__(*self.maps[1:])\n    def __setitem__(self, key, value):\n        self.maps[0][key] = value\n    def __delitem__(self, key):\n        try:\n            del self.maps[0][key]\n        except KeyError:\n            raise KeyError('Key not found in the first mapping: {!r}'.format(key))\n    def popitem(self):\n        'Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.'\n        try:\n            return self.maps[0].popitem()\n        except KeyError:\n            raise KeyError('No keys found in the first mapping.')\n    def pop(self, key, *args):\n        'Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0].'\n        try:\n            return self.maps[0].pop(key, *args)\n        except KeyError:\n            raise KeyError('Key not found in the first mapping: %s' % key)\n    def clear(self):\n        'Clear maps[0], leaving maps[1:] intact.'\n        self.maps[0].clear()\nclass UserDict(MutableMapping):\n    def __init__(self, dict=None, **kwargs):\n        self.data = {}\n        if dict is not None:\n            self.update(dict)\n        if len(kwargs):\n            self.update(kwargs)\n    def __len__(self): return len(self.data)\n    def __getitem__(self, key):\n        if key in self.data:\n            return self.data[key]\n        if hasattr(self.__class__, \"__missing__\"):\n            return self.__class__.__missing__(self, key)\n        raise KeyError(key)\n    def __setitem__(self, key, item): self.data[key] = item\n    def __delitem__(self, key): del self.data[key]\n    def __iter__(self):\n        return iter(self.data)\n    def __contains__(self, key):\n        return key in self.data\n    def __repr__(self): return repr(self.data)\n    def copy(self):\n        if self.__class__ is UserDict:\n            return UserDict(self.data.copy())\n        import copy\n        data = self.data\n        try:\n            self.data = {}\n            c = copy.copy(self)\n        finally:\n            self.data = data\n        c.update(self)\n        return c\n    @classmethod\n    def fromkeys(cls, iterable, value=None):\n        d = cls()\n        for key in iterable:\n            d[key] = value\n        return d\n", "/Lib/_sre.py": "\"\"\"\nA pure Python reimplementation of the _sre module from CPython 2.4\nCopyright 2005 Nik Haldimann, licensed under the MIT license\nThis code is based on material licensed under CNRI's Python 1.6 license and\ncopyrighted by: Copyright (c) 1997-2001 by Secret Labs AB\n\"\"\"\nimport operator, sys\nfrom sre_constants import ATCODES, OPCODES, CHCODES, MAXREPEAT\nfrom sre_constants import SRE_INFO_PREFIX, SRE_INFO_LITERAL\nfrom sre_constants import SRE_FLAG_UNICODE, SRE_FLAG_LOCALE\nimport sys\nMAGIC = 20031017\nCODESIZE = 4\ncopyright = \"_sre.py 2.4c Copyright 2005 by Nik Haldimann\"\ndef getcodesize():\n    return CODESIZE\ndef compile(pattern, flags, code, groups=0, groupindex={}, indexgroup=[None]):\n    \"\"\"Compiles (or rather just converts) a pattern descriptor to a SRE_Pattern\n    object. Actual compilation to opcodes happens in sre_compile.\"\"\"\n    return SRE_Pattern(pattern, flags, code, groups, groupindex, indexgroup)\ndef getlower(char_ord, flags):\n    if (char_ord < 128) or (flags & SRE_FLAG_UNICODE) \\\n                              or (flags & SRE_FLAG_LOCALE and char_ord < 256):\n        return ord(unichr(char_ord).lower())\n    else:\n        return char_ord\nclass SRE_Pattern:\n    def __init__(self, pattern, flags, code, groups=0, groupindex={}, indexgroup=[None]):\n        self.pattern = pattern\n        self.flags = flags\n        self.groups = groups\n        self.groupindex = groupindex # Maps group names to group indices\n        self._indexgroup = indexgroup # Maps indices to group names\n        self._code = code\n    def match(self, string, pos=0, endpos=sys.maxint):\n        \"\"\"If zero or more characters at the beginning of string match this\n        regular expression, return a corresponding MatchObject instance. Return\n        None if the string does not match the pattern.\"\"\"\n        state = _State(string, pos, endpos, self.flags)\n        if state.match(self._code):\n            return SRE_Match(self, state)\n        else:\n            return None\n    def search(self, string, pos=0, endpos=sys.maxint):\n        \"\"\"Scan through string looking for a location where this regular\n        expression produces a match, and return a corresponding MatchObject\n        instance. Return None if no position in the string matches the\n        pattern.\"\"\"\n        state = _State(string, pos, endpos, self.flags)\n        if state.search(self._code):\n            return SRE_Match(self, state)\n        else:\n            return None\n    def findall(self, string, pos=0, endpos=sys.maxint):\n        \"\"\"Return a list of all non-overlapping matches of pattern in string.\"\"\"\n        matchlist = []\n        state = _State(string, pos, endpos, self.flags)\n        while state.start <= state.end:\n            state.reset()\n            state.string_position = state.start\n            if not state.search(self._code):\n                break\n            match = SRE_Match(self, state)\n            if self.groups == 0 or self.groups == 1:\n                item = match.group(self.groups)\n            else:\n                item = match.groups(\"\")\n            matchlist.append(item)\n            if state.string_position == state.start:\n                state.start += 1\n            else:\n                state.start = state.string_position\n        return matchlist        \n    def _subx(self, template, string, count=0, subn=False):\n        filter = template\n        if not callable(template) and \"\\\\\" in template:\n            import sre\n            filter = sre._subx(self, template)\n        state = _State(string, 0, sys.maxint, self.flags)\n        sublist = []\n        n = last_pos = 0\n        while not count or n < count:\n            state.reset()\n            state.string_position = state.start\n            if not state.search(self._code):\n                break\n            if last_pos < state.start:\n                sublist.append(string[last_pos:state.start])\n            if not (last_pos == state.start and\n                                last_pos == state.string_position and n > 0):\n                if callable(filter):\n                    sublist.append(filter(SRE_Match(self, state)))\n                else:\n                    sublist.append(filter)\n                last_pos = state.string_position\n                n += 1\n            if state.string_position == state.start:\n                state.start += 1\n            else:\n                state.start = state.string_position\n        if last_pos < state.end:\n            sublist.append(string[last_pos:state.end])\n        item = \"\".join(sublist)\n        if subn:\n            return item, n\n        else:\n            return item\n    def sub(self, repl, string, count=0):\n        \"\"\"Return the string obtained by replacing the leftmost non-overlapping\n        occurrences of pattern in string by the replacement repl.\"\"\"\n        return self._subx(repl, string, count, False)\n    def subn(self, repl, string, count=0):\n        \"\"\"Return the tuple (new_string, number_of_subs_made) found by replacing\n        the leftmost non-overlapping occurrences of pattern with the replacement\n        repl.\"\"\"\n        return self._subx(repl, string, count, True)\n    def split(self, string, maxsplit=0):\n        \"\"\"Split string by the occurrences of pattern.\"\"\"\n        splitlist = []\n        state = _State(string, 0, sys.maxint, self.flags)\n        n = 0\n        last = state.start\n        while not maxsplit or n < maxsplit:\n            state.reset()\n            state.string_position = state.start\n            if not state.search(self._code):\n                break\n            if state.start == state.string_position: # zero-width match\n                if last == state.end:                # or end of string\n                    break\n                state.start += 1\n                continue\n            splitlist.append(string[last:state.start])\n            if self.groups:\n                match = SRE_Match(self, state)\n                splitlist.extend(list(match.groups(None)))\n            n += 1\n            last = state.start = state.string_position\n        splitlist.append(string[last:state.end])\n        return splitlist\n    def finditer(self, string, pos=0, endpos=sys.maxint):\n        \"\"\"Return a list of all non-overlapping matches of pattern in string.\"\"\"\n        scanner = self.scanner(string, pos, endpos)\n        return iter(scanner.search, None)\n    def scanner(self, string, start=0, end=sys.maxint):\n        return SRE_Scanner(self, string, start, end)\n    def __copy__(self):\n        raise TypeError(\"cannot copy this pattern object\")\n    def __deepcopy__(self):\n        raise TypeError(\"cannot copy this pattern object\")\nclass SRE_Scanner:\n    \"\"\"Undocumented scanner interface of sre.\"\"\"\n    def __init__(self, pattern, string, start, end):\n        self.pattern = pattern\n        self._state = _State(string, start, end, self.pattern.flags)\n    def _match_search(self, matcher):\n        state = self._state\n        state.reset()\n        state.string_position = state.start\n        match = None\n        if matcher(self.pattern._code):\n            match = SRE_Match(self.pattern, state)\n        if match is None or state.string_position == state.start:\n            state.start += 1\n        else:\n            state.start = state.string_position\n        return match\n    def match(self):\n        return self._match_search(self._state.match)\n    def search(self):\n        return self._match_search(self._state.search)\nclass SRE_Match:\n    def __init__(self, pattern, state):\n        self.re = pattern\n        self.string = state.string\n        self.pos = state.pos\n        self.endpos = state.end\n        self.lastindex = state.lastindex\n        if self.lastindex < 0:\n            self.lastindex = None\n        self.regs = self._create_regs(state)\n        if self.lastindex is not None and pattern._indexgroup and 0 <= self.lastindex < len(pattern._indexgroup):\n            self.lastgroup = pattern._indexgroup[self.lastindex]\n        else:\n            self.lastgroup = None\n    def _create_regs(self, state):\n        \"\"\"Creates a tuple of index pairs representing matched groups.\"\"\"\n        regs = [(state.start, state.string_position)]\n        for group in range(self.re.groups):\n            mark_index = 2 * group\n            if mark_index + 1 < len(state.marks) \\\n                                    and state.marks[mark_index] is not None \\\n                                    and state.marks[mark_index + 1] is not None:\n                regs.append((state.marks[mark_index], state.marks[mark_index + 1]))\n            else:\n                regs.append((-1, -1))\n        return tuple(regs)\n    def _get_index(self, group):\n        if isinstance(group, int):\n            if group >= 0 and group <= self.re.groups:\n                return group\n        else:\n            if self.re.groupindex.has_key(group):\n                return self.re.groupindex[group]\n        raise IndexError(\"no such group\")\n    def _get_slice(self, group, default):\n        group_indices = self.regs[group]\n        if group_indices[0] >= 0:\n            return self.string[group_indices[0]:group_indices[1]]\n        else:\n            return default\n    def start(self, group=0):\n        \"\"\"Returns the indices of the start of the substring matched by group;\n        group defaults to zero (meaning the whole matched substring). Returns -1\n        if group exists but did not contribute to the match.\"\"\"\n        return self.regs[self._get_index(group)][0]\n    def end(self, group=0):\n        \"\"\"Returns the indices of the end of the substring matched by group;\n        group defaults to zero (meaning the whole matched substring). Returns -1\n        if group exists but did not contribute to the match.\"\"\"\n        return self.regs[self._get_index(group)][1]\n    def span(self, group=0):\n        \"\"\"Returns the 2-tuple (m.start(group), m.end(group)).\"\"\"\n        return self.start(group), self.end(group)\n    def expand(self, template):\n        \"\"\"Return the string obtained by doing backslash substitution and\n        resolving group references on template.\"\"\"\n        import sre\n        return sre._expand(self.re, self, template)\n    def groups(self, default=None):\n        \"\"\"Returns a tuple containing all the subgroups of the match. The\n        default argument is used for groups that did not participate in the\n        match (defaults to None).\"\"\"\n        groups = []\n        for indices in self.regs[1:]:\n            if indices[0] >= 0:\n                groups.append(self.string[indices[0]:indices[1]])\n            else:\n                groups.append(default)\n        return tuple(groups)\n    def groupdict(self, default=None):\n        \"\"\"Return a dictionary containing all the named subgroups of the match.\n        The default argument is used for groups that did not participate in the\n        match (defaults to None).\"\"\"\n        groupdict = {}\n        for key, value in self.re.groupindex.items():\n            groupdict[key] = self._get_slice(value, default)\n        return groupdict\n    def group(self, *args):\n        \"\"\"Returns one or more subgroups of the match. Each argument is either a\n        group index or a group name.\"\"\"\n        if len(args) == 0:\n            args = (0,)\n        grouplist = []\n        for group in args:\n            grouplist.append(self._get_slice(self._get_index(group), None))\n        if len(grouplist) == 1:\n            return grouplist[0]\n        else:\n            return tuple(grouplist)\n    def __copy__():\n        raise TypeError(\"cannot copy this pattern object\")\n    def __deepcopy__():\n        raise TypeError(\"cannot copy this pattern object\")\nclass _State:\n    def __init__(self, string, start, end, flags):\n        self.string = string\n        if start < 0:\n            start = 0\n        if end > len(string):\n            end = len(string)\n        self.start = start\n        self.string_position = self.start\n        self.end = end\n        self.pos = start\n        self.flags = flags\n        self.reset()\n    def reset(self):\n        self.marks = []\n        self.lastindex = -1\n        self.marks_stack = []\n        self.context_stack = []\n        self.repeat = None\n    def match(self, pattern_codes):\n        dispatcher = _OpcodeDispatcher()\n        self.context_stack.append(_MatchContext(self, pattern_codes))\n        has_matched = None\n        while len(self.context_stack) > 0:\n            context = self.context_stack[-1]\n            has_matched = dispatcher.match(context)\n            if has_matched is not None: # don't pop if context isn't done\n                self.context_stack.pop()\n        return has_matched\n    def search(self, pattern_codes):\n        flags = 0\n        if pattern_codes[0] == OPCODES[\"info\"]:\n            if pattern_codes[2] & SRE_INFO_PREFIX and pattern_codes[5] > 1:\n                return self.fast_search(pattern_codes)\n            flags = pattern_codes[2]\n            pattern_codes = pattern_codes[pattern_codes[1] + 1:]\n        string_position = self.start\n        if pattern_codes[0] == OPCODES[\"literal\"]:\n            character = pattern_codes[1]\n            while True:\n                while string_position < self.end \\\n                        and ord(self.string[string_position]) != character:\n                    string_position += 1\n                if string_position >= self.end:\n                    return False\n                self.start = string_position\n                string_position += 1\n                self.string_position = string_position\n                if flags & SRE_INFO_LITERAL:\n                    return True\n                if self.match(pattern_codes[2:]):\n                    return True\n            return False\n        while string_position <= self.end:\n            self.reset()\n            self.start = self.string_position = string_position\n            if self.match(pattern_codes):\n                return True\n            string_position += 1\n        return False\n    def fast_search(self, pattern_codes):\n        \"\"\"Skips forward in a string as fast as possible using information from\n        an optimization info block.\"\"\"\n        flags = pattern_codes[2]\n        prefix_len = pattern_codes[5]\n        prefix_skip = pattern_codes[6] # don't really know what this is good for\n        prefix = pattern_codes[7:7 + prefix_len]\n        overlap = pattern_codes[7 + prefix_len - 1:pattern_codes[1] + 1]\n        pattern_codes = pattern_codes[pattern_codes[1] + 1:]\n        i = 0\n        string_position = self.string_position\n        while string_position < self.end:\n            while True:\n                if ord(self.string[string_position]) != prefix[i]:\n                    if i == 0:\n                        break\n                    else:\n                        i = overlap[i]\n                else:\n                    i += 1\n                    if i == prefix_len:\n                        self.start = string_position + 1 - prefix_len\n                        self.string_position = string_position + 1 \\\n                                                     - prefix_len + prefix_skip\n                        if flags & SRE_INFO_LITERAL:\n                            return True # matched all of pure literal pattern\n                        if self.match(pattern_codes[2 * prefix_skip:]):\n                            return True\n                        i = overlap[i]\n                    break\n            string_position += 1\n        return False\n    def set_mark(self, mark_nr, position):\n        if mark_nr & 1:\n            self.lastindex = mark_nr // 2 + 1\n        if mark_nr >= len(self.marks):\n            self.marks.extend([None] * (mark_nr - len(self.marks) + 1))\n        self.marks[mark_nr] = position\n    def get_marks(self, group_index):\n        marks_index = 2 * group_index\n        if len(self.marks) > marks_index + 1:\n            return self.marks[marks_index], self.marks[marks_index + 1]\n        else:\n            return None, None\n    def marks_push(self):\n        self.marks_stack.append((self.marks[:], self.lastindex))\n    def marks_pop(self):\n        self.marks, self.lastindex = self.marks_stack.pop()\n    def marks_pop_keep(self):\n        self.marks, self.lastindex = self.marks_stack[-1]\n    def marks_pop_discard(self):\n        self.marks_stack.pop()\n    def lower(self, char_ord):\n        return getlower(char_ord, self.flags)\nclass _MatchContext:\n    def __init__(self, state, pattern_codes):\n        self.state = state\n        self.pattern_codes = pattern_codes\n        self.string_position = state.string_position\n        self.code_position = 0\n        self.has_matched = None\n    def push_new_context(self, pattern_offset):\n        \"\"\"Creates a new child context of this context and pushes it on the\n        stack. pattern_offset is the offset off the current code position to\n        start interpreting from.\"\"\"\n        child_context = _MatchContext(self.state,\n            self.pattern_codes[self.code_position + pattern_offset:])\n        self.state.context_stack.append(child_context)\n        return child_context\n    def peek_char(self, peek=0):\n        return self.state.string[self.string_position + peek]\n    def skip_char(self, skip_count):\n        self.string_position += skip_count\n    def remaining_chars(self):\n        return self.state.end - self.string_position\n    def peek_code(self, peek=0):\n        return self.pattern_codes[self.code_position + peek]\n    def skip_code(self, skip_count):\n        self.code_position += skip_count\n    def remaining_codes(self):\n        return len(self.pattern_codes) - self.code_position\n    def at_beginning(self):\n        return self.string_position == 0\n    def at_end(self):\n        return self.string_position == self.state.end\n    def at_linebreak(self):\n        return not self.at_end() and _is_linebreak(self.peek_char())\n    def at_boundary(self, word_checker):\n        if self.at_beginning() and self.at_end():\n            return False\n        that = not self.at_beginning() and word_checker(self.peek_char(-1))\n        this = not self.at_end() and word_checker(self.peek_char())\n        return this != that\nclass _RepeatContext(_MatchContext):\n    def __init__(self, context):\n        _MatchContext.__init__(self, context.state,\n                            context.pattern_codes[context.code_position:])\n        self.count = -1\n        self.previous = context.state.repeat\n        self.last_position = None\nclass _Dispatcher:\n    DISPATCH_TABLE = None\n    def dispatch(self, code, context):\n        method = self.DISPATCH_TABLE.get(code, self.__class__.unknown)\n        return method(self, context)\n    def unknown(self, code, ctx):\n        raise NotImplementedError()\n    def build_dispatch_table(cls, code_dict, method_prefix):\n        if cls.DISPATCH_TABLE is not None:\n            return\n        table = {}\n        for key, value in code_dict.items():\n            if hasattr(cls, \"%s%s\" % (method_prefix, key)):\n                table[value] = getattr(cls, \"%s%s\" % (method_prefix, key))\n        cls.DISPATCH_TABLE = table\n    build_dispatch_table = classmethod(build_dispatch_table)\nclass _OpcodeDispatcher(_Dispatcher):\n    def __init__(self):\n        self.executing_contexts = {}\n        self.at_dispatcher = _AtcodeDispatcher()\n        self.ch_dispatcher = _ChcodeDispatcher()\n        self.set_dispatcher = _CharsetDispatcher()\n    def match(self, context):\n        \"\"\"Returns True if the current context matches, False if it doesn't and\n        None if matching is not finished, ie must be resumed after child\n        contexts have been matched.\"\"\"\n        while context.remaining_codes() > 0 and context.has_matched is None:\n            opcode = context.peek_code()\n            if not self.dispatch(opcode, context):\n                return None\n        if context.has_matched is None:\n            context.has_matched = False\n        return context.has_matched\n    def dispatch(self, opcode, context):\n        \"\"\"Dispatches a context on a given opcode. Returns True if the context\n        is done matching, False if it must be resumed when next encountered.\"\"\"\n        if id(context) in self.executing_contexts:\n            generator = self.executing_contexts[id(context)]\n            del self.executing_contexts[id(context)]\n            has_finished = generator.next()\n        else:\n            method = self.DISPATCH_TABLE.get(opcode, _OpcodeDispatcher.unknown)\n            has_finished = method(self, context)\n            if hasattr(has_finished, \"next\"): # avoid using the types module\n                generator = has_finished\n                has_finished = generator.next()\n        if not has_finished:\n            self.executing_contexts[id(context)] = generator\n        return has_finished\n    def op_success(self, ctx):\n        ctx.state.string_position = ctx.string_position\n        ctx.has_matched = True\n        return True\n    def op_failure(self, ctx):\n        ctx.has_matched = False\n        return True\n    def general_op_literal(self, ctx, compare, decorate=lambda x: x):\n        if ctx.at_end() or not compare(decorate(ord(ctx.peek_char())),\n                                            decorate(ctx.peek_code(1))):\n            ctx.has_matched = False\n        ctx.skip_code(2)\n        ctx.skip_char(1)\n    def op_literal(self, ctx):\n        self.general_op_literal(ctx, operator.eq)\n        return True\n    def op_not_literal(self, ctx):\n        self.general_op_literal(ctx, operator.ne)\n        return True\n    def op_literal_ignore(self, ctx):\n        self.general_op_literal(ctx, operator.eq, ctx.state.lower)\n        return True\n    def op_not_literal_ignore(self, ctx):\n        self.general_op_literal(ctx, operator.ne, ctx.state.lower)\n        return True\n    def op_at(self, ctx):\n        if not self.at_dispatcher.dispatch(ctx.peek_code(1), ctx):\n            ctx.has_matched = False\n            return True\n        ctx.skip_code(2)\n        return True\n    def op_category(self, ctx):\n        if ctx.at_end() or not self.ch_dispatcher.dispatch(ctx.peek_code(1), ctx):\n            ctx.has_matched = False\n            return True\n        ctx.skip_code(2)\n        ctx.skip_char(1)\n        return True\n    def op_any(self, ctx):\n        if ctx.at_end() or ctx.at_linebreak():\n            ctx.has_matched = False\n            return True\n        ctx.skip_code(1)\n        ctx.skip_char(1)\n        return True\n    def op_any_all(self, ctx):\n        if ctx.at_end():\n            ctx.has_matched = False\n            return True\n        ctx.skip_code(1)\n        ctx.skip_char(1)\n        return True\n    def general_op_in(self, ctx, decorate=lambda x: x):\n        if ctx.at_end():\n            ctx.has_matched = False\n            return\n        skip = ctx.peek_code(1)\n        ctx.skip_code(2) # set op pointer to the set code\n        if not self.check_charset(ctx, decorate(ord(ctx.peek_char()))):\n            ctx.has_matched = False\n            return\n        ctx.skip_code(skip - 1)\n        ctx.skip_char(1)\n    def op_in(self, ctx):\n        self.general_op_in(ctx)\n        return True\n    def op_in_ignore(self, ctx):\n        self.general_op_in(ctx, ctx.state.lower)\n        return True\n    def op_jump(self, ctx):\n        ctx.skip_code(ctx.peek_code(1) + 1)\n        return True\n    op_info = op_jump\n    def op_mark(self, ctx):\n        ctx.state.set_mark(ctx.peek_code(1), ctx.string_position)\n        ctx.skip_code(2)\n        return True\n    def op_branch(self, ctx):\n        ctx.state.marks_push()\n        ctx.skip_code(1)\n        current_branch_length = ctx.peek_code(0)\n        while current_branch_length:\n            if not (ctx.peek_code(1) == OPCODES[\"literal\"] and \\\n                    (ctx.at_end() or ctx.peek_code(2) != ord(ctx.peek_char()))):\n                ctx.state.string_position = ctx.string_position\n                child_context = ctx.push_new_context(1)\n                yield False\n                if child_context.has_matched:\n                    ctx.has_matched = True\n                    yield True\n                ctx.state.marks_pop_keep()\n            ctx.skip_code(current_branch_length)\n            current_branch_length = ctx.peek_code(0)\n        ctx.state.marks_pop_discard()\n        ctx.has_matched = False\n        yield True\n    def op_repeat_one(self, ctx):\n        mincount = ctx.peek_code(2)\n        maxcount = ctx.peek_code(3)\n        if ctx.remaining_chars() < mincount:\n            ctx.has_matched = False\n            yield True\n        ctx.state.string_position = ctx.string_position\n        count = self.count_repetitions(ctx, maxcount)\n        ctx.skip_char(count)\n        if count < mincount:\n            ctx.has_matched = False\n            yield True\n        if ctx.peek_code(ctx.peek_code(1) + 1) == OPCODES[\"success\"]:\n            ctx.state.string_position = ctx.string_position\n            ctx.has_matched = True\n            yield True\n        ctx.state.marks_push()\n        if ctx.peek_code(ctx.peek_code(1) + 1) == OPCODES[\"literal\"]:\n            char = ctx.peek_code(ctx.peek_code(1) + 2)\n            while True:\n                while count >= mincount and \\\n                                (ctx.at_end() or ord(ctx.peek_char()) != char):\n                    ctx.skip_char(-1)\n                    count -= 1\n                if count < mincount:\n                    break\n                ctx.state.string_position = ctx.string_position\n                child_context = ctx.push_new_context(ctx.peek_code(1) + 1)\n                yield False\n                if child_context.has_matched:\n                    ctx.has_matched = True\n                    yield True\n                ctx.skip_char(-1)\n                count -= 1\n                ctx.state.marks_pop_keep()\n        else:\n            while count >= mincount:\n                ctx.state.string_position = ctx.string_position\n                child_context = ctx.push_new_context(ctx.peek_code(1) + 1)\n                yield False\n                if child_context.has_matched:\n                    ctx.has_matched = True\n                    yield True\n                ctx.skip_char(-1)\n                count -= 1\n                ctx.state.marks_pop_keep()\n        ctx.state.marks_pop_discard()\n        ctx.has_matched = False\n        yield True\n    def op_min_repeat_one(self, ctx):\n        mincount = ctx.peek_code(2)\n        maxcount = ctx.peek_code(3)\n        if ctx.remaining_chars() < mincount:\n            ctx.has_matched = False\n            yield True\n        ctx.state.string_position = ctx.string_position\n        if mincount == 0:\n            count = 0\n        else:\n            count = self.count_repetitions(ctx, mincount)\n            if count < mincount:\n                ctx.has_matched = False\n                yield True\n            ctx.skip_char(count)\n        if ctx.peek_code(ctx.peek_code(1) + 1) == OPCODES[\"success\"]:\n            ctx.state.string_position = ctx.string_position\n            ctx.has_matched = True\n            yield True\n        ctx.state.marks_push()\n        while maxcount == MAXREPEAT or count <= maxcount:\n            ctx.state.string_position = ctx.string_position\n            child_context = ctx.push_new_context(ctx.peek_code(1) + 1)\n            yield False\n            if child_context.has_matched:\n                ctx.has_matched = True\n                yield True\n            ctx.state.string_position = ctx.string_position\n            if self.count_repetitions(ctx, 1) == 0:\n                break\n            ctx.skip_char(1)\n            count += 1\n            ctx.state.marks_pop_keep()\n        ctx.state.marks_pop_discard()\n        ctx.has_matched = False\n        yield True\n    def op_repeat(self, ctx):\n        repeat = _RepeatContext(ctx)\n        ctx.state.repeat = repeat\n        ctx.state.string_position = ctx.string_position\n        child_context = ctx.push_new_context(ctx.peek_code(1) + 1)\n        yield False\n        ctx.state.repeat = repeat.previous\n        ctx.has_matched = child_context.has_matched\n        yield True\n    def op_max_until(self, ctx):\n        repeat = ctx.state.repeat\n        if repeat is None:\n            raise RuntimeError(\"Internal re error: MAX_UNTIL without REPEAT.\")\n        mincount = repeat.peek_code(2)\n        maxcount = repeat.peek_code(3)\n        ctx.state.string_position = ctx.string_position\n        count = repeat.count + 1\n        if count < mincount:\n            repeat.count = count\n            child_context = repeat.push_new_context(4)\n            yield False\n            ctx.has_matched = child_context.has_matched\n            if not ctx.has_matched:\n                repeat.count = count - 1\n                ctx.state.string_position = ctx.string_position\n            yield True\n        if (count < maxcount or maxcount == MAXREPEAT) \\\n                      and ctx.state.string_position != repeat.last_position:\n            repeat.count = count\n            ctx.state.marks_push()\n            save_last_position = repeat.last_position # zero-width match protection\n            repeat.last_position = ctx.state.string_position\n            child_context = repeat.push_new_context(4)\n            yield False\n            repeat.last_position = save_last_position\n            if child_context.has_matched:\n                ctx.state.marks_pop_discard()\n                ctx.has_matched = True\n                yield True\n            ctx.state.marks_pop()\n            repeat.count = count - 1\n            ctx.state.string_position = ctx.string_position\n        ctx.state.repeat = repeat.previous\n        child_context = ctx.push_new_context(1)\n        yield False\n        ctx.has_matched = child_context.has_matched\n        if not ctx.has_matched:\n            ctx.state.repeat = repeat\n            ctx.state.string_position = ctx.string_position\n        yield True\n    def op_min_until(self, ctx):\n        repeat = ctx.state.repeat\n        if repeat is None:\n            raise RuntimeError(\"Internal re error: MIN_UNTIL without REPEAT.\")\n        mincount = repeat.peek_code(2)\n        maxcount = repeat.peek_code(3)\n        ctx.state.string_position = ctx.string_position\n        count = repeat.count + 1\n        if count < mincount:\n            repeat.count = count\n            child_context = repeat.push_new_context(4)\n            yield False\n            ctx.has_matched = child_context.has_matched\n            if not ctx.has_matched:\n                repeat.count = count - 1\n                ctx.state.string_position = ctx.string_position\n            yield True\n        ctx.state.marks_push()\n        ctx.state.repeat = repeat.previous\n        child_context = ctx.push_new_context(1)\n        yield False\n        if child_context.has_matched:\n            ctx.has_matched = True\n            yield True\n        ctx.state.repeat = repeat\n        ctx.state.string_position = ctx.string_position\n        ctx.state.marks_pop()\n        if count >= maxcount and maxcount != MAXREPEAT:\n            ctx.has_matched = False\n            yield True\n        repeat.count = count\n        child_context = repeat.push_new_context(4)\n        yield False\n        ctx.has_matched = child_context.has_matched\n        if not ctx.has_matched:\n            repeat.count = count - 1\n            ctx.state.string_position = ctx.string_position\n        yield True\n    def general_op_groupref(self, ctx, decorate=lambda x: x):\n        group_start, group_end = ctx.state.get_marks(ctx.peek_code(1))\n        if group_start is None or group_end is None or group_end < group_start:\n            ctx.has_matched = False\n            return True\n        while group_start < group_end:\n            if ctx.at_end() or decorate(ord(ctx.peek_char())) \\\n                                != decorate(ord(ctx.state.string[group_start])):\n                ctx.has_matched = False\n                return True\n            group_start += 1\n            ctx.skip_char(1)\n        ctx.skip_code(2)\n        return True\n    def op_groupref(self, ctx):\n        return self.general_op_groupref(ctx)\n    def op_groupref_ignore(self, ctx):\n        return self.general_op_groupref(ctx, ctx.state.lower)\n    def op_groupref_exists(self, ctx):\n        group_start, group_end = ctx.state.get_marks(ctx.peek_code(1))\n        if group_start is None or group_end is None or group_end < group_start:\n            ctx.skip_code(ctx.peek_code(2) + 1)\n        else:\n            ctx.skip_code(3)\n        return True\n    def op_assert(self, ctx):\n        ctx.state.string_position = ctx.string_position - ctx.peek_code(2)\n        if ctx.state.string_position < 0:\n            ctx.has_matched = False\n            yield True\n        child_context = ctx.push_new_context(3)\n        yield False\n        if child_context.has_matched:\n            ctx.skip_code(ctx.peek_code(1) + 1)\n        else:\n            ctx.has_matched = False\n        yield True\n    def op_assert_not(self, ctx):\n        ctx.state.string_position = ctx.string_position - ctx.peek_code(2)\n        if ctx.state.string_position >= 0:\n            child_context = ctx.push_new_context(3)\n            yield False\n            if child_context.has_matched:\n                ctx.has_matched = False\n                yield True\n        ctx.skip_code(ctx.peek_code(1) + 1)\n        yield True\n    def unknown(self, ctx):\n        raise RuntimeError(\"Internal re error. Unknown opcode: %s\" % ctx.peek_code())\n    def check_charset(self, ctx, char):\n        \"\"\"Checks whether a character matches set of arbitrary length. Assumes\n        the code pointer is at the first member of the set.\"\"\"\n        self.set_dispatcher.reset(char)\n        save_position = ctx.code_position\n        result = None\n        while result is None:\n            result = self.set_dispatcher.dispatch(ctx.peek_code(), ctx)\n        ctx.code_position = save_position\n        return result\n    def count_repetitions(self, ctx, maxcount):\n        \"\"\"Returns the number of repetitions of a single item, starting from the\n        current string position. The code pointer is expected to point to a\n        REPEAT_ONE operation (with the repeated 4 ahead).\"\"\"\n        count = 0\n        real_maxcount = ctx.state.end - ctx.string_position\n        if maxcount < real_maxcount and maxcount != MAXREPEAT:\n            real_maxcount = maxcount\n        code_position = ctx.code_position\n        string_position = ctx.string_position\n        ctx.skip_code(4)\n        reset_position = ctx.code_position\n        while count < real_maxcount:\n            ctx.code_position = reset_position\n            self.dispatch(ctx.peek_code(), ctx)\n            if ctx.has_matched is False: # could be None as well\n                break\n            count += 1\n        ctx.has_matched = None\n        ctx.code_position = code_position\n        ctx.string_position = string_position\n        return count\n    def _log(self, context, opname, *args):\n        arg_string = (\"%s \" * len(args)) % args\n        _log(\"|%s|%s|%s %s\" % (context.pattern_codes,\n            context.string_position, opname, arg_string))\n_OpcodeDispatcher.build_dispatch_table(OPCODES, \"op_\")\nclass _CharsetDispatcher(_Dispatcher):\n    def __init__(self):\n        self.ch_dispatcher = _ChcodeDispatcher()\n    def reset(self, char):\n        self.char = char\n        self.ok = True\n    def set_failure(self, ctx):\n        return not self.ok\n    def set_literal(self, ctx):\n        if ctx.peek_code(1) == self.char:\n            return self.ok\n        else:\n            ctx.skip_code(2)\n    def set_category(self, ctx):\n        if self.ch_dispatcher.dispatch(ctx.peek_code(1), ctx):\n            return self.ok\n        else:\n            ctx.skip_code(2)\n    def set_charset(self, ctx):\n        char_code = self.char\n        ctx.skip_code(1) # point to beginning of bitmap\n        if CODESIZE == 2:\n            if char_code < 256 and ctx.peek_code(char_code >> 4) \\\n                                            & (1 << (char_code & 15)):\n                return self.ok\n            ctx.skip_code(16) # skip bitmap\n        else:\n            if char_code < 256 and ctx.peek_code(char_code >> 5) \\\n                                            & (1 << (char_code & 31)):\n                return self.ok\n            ctx.skip_code(8) # skip bitmap\n    def set_range(self, ctx):\n        if ctx.peek_code(1) <= self.char <= ctx.peek_code(2):\n            return self.ok\n        ctx.skip_code(3)\n    def set_negate(self, ctx):\n        self.ok = not self.ok\n        ctx.skip_code(1)\n    \"\"\"\n    def set_bigcharset(self, ctx):\n        char_code = self.char\n        count = ctx.peek_code(1)\n        ctx.skip_code(2)\n        if char_code < 65536:\n            block_index = char_code >> 8\n            a = array.array(\"B\")\n            a.fromstring(array.array(CODESIZE == 2 and \"H\" or \"I\",\n                    [ctx.peek_code(block_index / CODESIZE)]).tostring())\n            block = a[block_index % CODESIZE]\n            ctx.skip_code(256 / CODESIZE) # skip block indices\n            block_value = ctx.peek_code(block * (32 / CODESIZE)\n                    + ((char_code & 255) >> (CODESIZE == 2 and 4 or 5)))\n            if block_value & (1 << (char_code & ((8 * CODESIZE) - 1))):\n                return self.ok\n        else:\n            ctx.skip_code(256 / CODESIZE) # skip block indices\n        ctx.skip_code(count * (32 / CODESIZE)) # skip blocks\n    \"\"\"\n    def unknown(self, ctx):\n        return False\n_CharsetDispatcher.build_dispatch_table(OPCODES, \"set_\")\nclass _AtcodeDispatcher(_Dispatcher):\n    def at_beginning(self, ctx):\n        return ctx.at_beginning()\n    at_beginning_string = at_beginning\n    def at_beginning_line(self, ctx):\n        return ctx.at_beginning() or _is_linebreak(ctx.peek_char(-1))\n    def at_end(self, ctx):\n        return (ctx.remaining_chars() == 1 and ctx.at_linebreak()) or ctx.at_end()\n    def at_end_line(self, ctx):\n        return ctx.at_linebreak() or ctx.at_end()\n    def at_end_string(self, ctx):\n        return ctx.at_end()\n    def at_boundary(self, ctx):\n        return ctx.at_boundary(_is_word)\n    def at_non_boundary(self, ctx):\n        return not ctx.at_boundary(_is_word)\n    def at_loc_boundary(self, ctx):\n        return ctx.at_boundary(_is_loc_word)\n    def at_loc_non_boundary(self, ctx):\n        return not ctx.at_boundary(_is_loc_word)\n    def at_uni_boundary(self, ctx):\n        return ctx.at_boundary(_is_uni_word)\n    def at_uni_non_boundary(self, ctx):\n        return not ctx.at_boundary(_is_uni_word)\n    def unknown(self, ctx):\n        return False\n_AtcodeDispatcher.build_dispatch_table(ATCODES, \"\")\nclass _ChcodeDispatcher(_Dispatcher):\n    def category_digit(self, ctx):\n        return _is_digit(ctx.peek_char())\n    def category_not_digit(self, ctx):\n        return not _is_digit(ctx.peek_char())\n    def category_space(self, ctx):\n        return _is_space(ctx.peek_char())\n    def category_not_space(self, ctx):\n        return not _is_space(ctx.peek_char())\n    def category_word(self, ctx):\n        return _is_word(ctx.peek_char())\n    def category_not_word(self, ctx):\n        return not _is_word(ctx.peek_char())\n    def category_linebreak(self, ctx):\n        return _is_linebreak(ctx.peek_char())\n    def category_not_linebreak(self, ctx):\n        return not _is_linebreak(ctx.peek_char())\n    def category_loc_word(self, ctx):\n        return _is_loc_word(ctx.peek_char())\n    def category_loc_not_word(self, ctx):\n        return not _is_loc_word(ctx.peek_char())\n    def category_uni_digit(self, ctx):\n        return ctx.peek_char().isdigit()\n    def category_uni_not_digit(self, ctx):\n        return not ctx.peek_char().isdigit()\n    def category_uni_space(self, ctx):\n        return ctx.peek_char().isspace()\n    def category_uni_not_space(self, ctx):\n        return not ctx.peek_char().isspace()\n    def category_uni_word(self, ctx):\n        return _is_uni_word(ctx.peek_char())\n    def category_uni_not_word(self, ctx):\n        return not _is_uni_word(ctx.peek_char())\n    def category_uni_linebreak(self, ctx):\n        return ord(ctx.peek_char()) in _uni_linebreaks\n    def category_uni_not_linebreak(self, ctx):\n        return ord(ctx.peek_char()) not in _uni_linebreaks\n    def unknown(self, ctx):\n        return False\n_ChcodeDispatcher.build_dispatch_table(CHCODES, \"\")\n_ascii_char_info = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 2,\n2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,\n0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 25, 25, 25,\n25, 25, 0, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0,\n0, 0, 16, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0 ]\ndef _is_digit(char):\n    code = ord(char)\n    return code < 128 and _ascii_char_info[code] & 1\ndef _is_space(char):\n    code = ord(char)\n    return code < 128 and _ascii_char_info[code] & 2\ndef _is_word(char):\n    code = ord(char)\n    return code < 128 and _ascii_char_info[code] & 16\ndef _is_loc_word(char):\n    return (not (ord(char) & ~255) and char.isalnum()) or char == '_'\ndef _is_uni_word(char):\n    return chr(ord(char)).isalnum() or char == '_'\ndef _is_linebreak(char):\n    return char == \"\\n\"\n_uni_linebreaks = [10, 13, 28, 29, 30, 133, 8232, 8233]\ndef _log(message):\n    if 0:\n        print(message)\n", "/Lib/browser/markdown.py": "import browser.html\nimport re\nclass URL:\n    def __init__(self,src):\n        elts = src.split(maxsplit=1)\n        self.href = elts[0]\n        self.alt = ''\n        if len(elts)==2:\n            alt = elts[1]\n            if alt[0]=='\"' and alt[-1]=='\"':self.alt=alt[1:-1]\n            elif alt[0]==\"'\" and alt[-1]==\"'\":self.alt=alt[1:-1]\n            elif alt[0]==\"(\" and alt[-1]==\")\":self.alt=alt[1:-1]\nclass CodeBlock:\n    def __init__(self,line):\n        self.lines = [line]\n    def to_html(self):\n        res = escape('\\n'.join(self.lines))\n        res = unmark(res)\n        res = '<pre class=\"marked\">%s</pre>\\n' %res\n        return res,[]\nclass Marked:\n    def __init__(self):\n        self.lines = []\n        self.children = []\n    def to_html(self):\n        return apply_markdown('\\n'.join(self.lines))\nrefs = {}\nref_pattern = r\"^\\[(.*)\\]:\\s+(.*)\"\ndef mark(src):\n    global refs\n    refs = {}\n    lines = src.split('\\n')\n    sections = []\n    scripts = []\n    section = Marked()\n    i = 0\n    while i<len(lines):\n        line = lines[i]\n        if isinstance(section,Marked):\n            if line.lower().startswith('<script'):\n                j = i+1\n                while j<len(lines):\n                    if lines[j].lower().startswith('</script>'):\n                        scripts.append('\\n'.join(lines[i+1:j]))\n                        for k in range(i,j+1):\n                            lines[k] = ''\n                        break\n                    j += 1\n                i = j+1\n                continue\n            if line.strip() and line.startswith('    '):\n                if section.lines:\n                    sections.append(section)\n                section = CodeBlock(line[4:])\n            else:\n                mo = re.search(ref_pattern,line)\n                if mo is not None:\n                    key = mo.groups()[0]\n                    value = URL(mo.groups()[1])\n                    refs[key.lower()] = value\n                else:\n                    section.lines.append(line)\n        elif isinstance(section,CodeBlock):\n            if line.startswith('    ') or not line.strip():\n                section.lines.append(line[4:])\n            else:\n                sections.append(section)\n                section = Marked()                \n                section.lines.append(line)\n        i += 1\n    if section.lines:\n        sections.append(section)\n    res = ''\n    for section in sections:\n        mk,_scripts = section.to_html()\n        res += mk\n        scripts += _scripts\n    return res,scripts\ndef escape(czone):\n    czone = czone.replace('&','&amp;')\n    czone = czone.replace('<','&lt;')\n    czone = czone.replace('>','&gt;')\n    return czone\ndef s_escape(mo):\n    czone = mo.string[mo.start():mo.end()]\n    return escape(czone)\ndef unmark(code_zone):\n    code_zone = code_zone.replace('_','&#95;')\n    return code_zone\ndef s_unmark(mo):\n    code_zone = mo.string[mo.start():mo.end()]\n    code_zone = code_zone.replace('_','&#95;')\n    return code_zone\ndef apply_markdown(src):\n    scripts = []\n    lines = src.split('\\n')\n    while True:\n        nb = 0\n        i = 0\n        while i<len(lines):\n            if lines[i].startswith('>'):\n                head = '\\n'.join(lines[:i])\n                bqlines = []\n                nb += 1\n                rest = lines[i][1:]\n                if rest.lstrip().startswith('>'):\n                    rest = rest.lstrip()\n                bqlines.append(rest)\n                j = i+1\n                while j<len(lines):\n                    if lines[j].startswith('>'):\n                        rest = lines[j][1:]\n                        if rest.lstrip().startswith('>'):\n                            rest = rest.lstrip()\n                        bqlines.append(rest)\n                        j += 1\n                    elif lines[j].strip() and lines[j][0]!=' ':\n                        bqlines.append(lines[j])\n                        j += 1\n                    else:\n                        break\n                mk,_scripts = mark('\\n'.join(bqlines))\n                scripts += _scripts\n                src = head\n                src += '\\n<blockquote>' + mk + '</blockquote>'\n                src += '\\n'.join(lines[j:])\n                break\n            i += 1\n        if nb==0:break\n        lines = src.splitlines()\n    src = re.sub(r'\\\\\\`','&#96;',src)\n    code_pattern = r'\\`(\\S.*?\\S)\\`'\n    src = re.sub(code_pattern,s_escape,src)\n    src = re.sub(code_pattern,s_unmark,src)\n    link_pattern1 = r'\\[(.+?)\\]\\s?\\((.+?)\\)'\n    def repl(mo):\n        g1,g2 = mo.groups()\n        g2 = re.sub('_','&#95;',g2)\n        return '<a href=\"%s\">%s</a>' %(g2,g1)\n    src = re.sub(link_pattern1,repl,src)\n    link_pattern2 = r'\\[(.+?)\\]\\s?\\[(.*?)\\]'\n    while True:\n        mo = re.search(link_pattern2,src)\n        if mo is None:break\n        text,key = mo.groups()\n        print(text,key)\n        if not key:key=text # implicit link name\n        if key.lower() not in refs:\n            raise KeyError('unknow reference %s' %key)\n        url = refs[key.lower()]\n        repl = '<a href=\"'+url.href+'\"'\n        if url.alt:\n            repl += ' title=\"'+url.alt+'\"'\n        repl += '>%s</a>' %text\n        src = re.sub(link_pattern2,repl,src,count=1)\n    src = re.sub(r'\\\\\\*','&#42;',src)\n    src = re.sub(r'\\\\\\_','&#95;',src)\n    src = re.sub(r' _ ',' &#95; ',src)\n    src = re.sub(r' \\* ',' &#42; ',src)\n    strong_patterns = [('STRONG',r'\\*\\*(.*?)\\*\\*'),('B',r'__(.*?)__')]\n    for tag,strong_pattern in strong_patterns:\n        src = re.sub(strong_pattern,r'<%s>\\1</%s>' %(tag,tag),src)\n    em_patterns = [('EM',r'\\*(.*?)\\*'),('I',r'\\_(.*?)\\_')]\n    for tag,em_pattern in em_patterns:\n        src = re.sub(em_pattern,r'<%s>\\1</%s>' %(tag,tag),src)\n    src = re.sub(r'\\\\\\`','&#96;',src)\n    code_pattern = r'\\`(.*?)\\`'\n    src = re.sub(code_pattern,r'<code>\\1</code>',src)\n    lines = src.split('\\n')\n    while True:\n        nb = 0\n        i = 0\n        while i<len(lines):\n            mo = re.search(r'^( *[+*-])',lines[i])\n            if mo:\n                starter = mo.groups()[0]\n                if not lines[i].strip(starter):\n                    i += 1\n                    continue\n                nb += 1\n                lines[i] = '<ul>\\n<li>'+lines[i][len(starter):]\n                j = i+1\n                while j<len(lines):\n                    if lines[j].startswith(starter):\n                        lines[j] = '<li>'+lines[j][len(starter):]\n                        j += 1\n                    elif lines[j].startswith(' ') and lines[j].lstrip().startswith(starter):\n                        j += 1\n                    elif not lines[j].strip():\n                        j+=1\n                    elif lines[j].startswith(' '*len(starter)):\n                        j+=1\n                    else:\n                        break\n                lines[j-1] += '\\n</ul>'\n            i += 1\n        src = '\\n'.join(lines)\n        if nb==0:break\n        lines = src.splitlines()\n    lines = src.split('\\n')\n    while True:\n        nb = 0\n        i = 0\n        while i<len(lines):\n            if re.search(r'^\\d+\\.',lines[i]):\n                nb += 1\n                lines[i] = '<ol>\\n<li>'+lines[i][lines[i].find('.')+1:]\n                j = i+1\n                while j<len(lines):\n                    if re.search(r'^\\d+\\.',lines[j]):\n                        lines[j] = '<li>'+lines[j][lines[j].find('.')+1:]\n                        j += 1\n                    else:\n                        break\n                lines[j-1] += '\\n</ol>'\n            i += 1\n        src = '\\n'.join(lines)\n        if nb==0:break\n        lines = src.splitlines()\n    i = 1\n    while i<len(lines):\n        line = lines[i]\n        if line.startswith('=') and not line.strip('=').strip():\n            lines[i-1] = '<H1>%s</H1>' %lines[i-1]\n            del lines[i]\n        elif line.startswith('-') and not line.strip('-').strip():\n            lines[i-1] = '<H2>%s</H2>' %lines[i-1]\n            del lines[i]\n        else:\n            i += 1\n    atx_header_pattern = '^(#+)(.*)(#*)'\n    for i,line in enumerate(lines):\n        mo = re.search(atx_header_pattern,line)\n        if not mo:continue\n        level = len(mo.groups()[0])\n        lines[i] = re.sub(atx_header_pattern,\n            '<H%s>%s</H%s>\\n' %(level,mo.groups()[1],level),\n            line,count=1)\n    src = '\\n'.join(lines)      \n    src = re.sub('\\n\\n+','\\n<p>',src)+'\\n'\n    return src,scripts\n", "/Lib/importlib/machinery.py": "\"\"\"The machinery of importlib: finders, loaders, hooks, etc.\"\"\"\r\nimport _imp\r\nfrom ._bootstrap import (SOURCE_SUFFIXES, DEBUG_BYTECODE_SUFFIXES,\r\n                         OPTIMIZED_BYTECODE_SUFFIXES, BYTECODE_SUFFIXES,\r\n                         EXTENSION_SUFFIXES)\r\nfrom ._bootstrap import BuiltinImporter\r\nfrom ._bootstrap import FrozenImporter\r\nfrom ._bootstrap import WindowsRegistryFinder\r\nfrom ._bootstrap import PathFinder\r\nfrom ._bootstrap import FileFinder\r\nfrom ._bootstrap import SourceFileLoader\r\nfrom ._bootstrap import SourcelessFileLoader\r\nfrom ._bootstrap import ExtensionFileLoader\r\ndef all_suffixes():\r\n    \"\"\"Returns a list of all recognized module suffixes for this process\"\"\"\r\n    return SOURCE_SUFFIXES + BYTECODE_SUFFIXES + EXTENSION_SUFFIXES\r\n", "/Lib/unittest/test/test_suite.py": "import unittest\r\nimport sys\r\nfrom .support import LoggingResult, TestEquality\r\nclass Test(object):\r\n    class Foo(unittest.TestCase):\r\n        def test_1(self): pass\r\n        def test_2(self): pass\r\n        def test_3(self): pass\r\n        def runTest(self): pass\r\ndef _mk_TestSuite(*names):\r\n    return unittest.TestSuite(Test.Foo(n) for n in names)\r\nclass Test_TestSuite(unittest.TestCase, TestEquality):\r\n    eq_pairs = [(unittest.TestSuite(), unittest.TestSuite())\r\n               ,(unittest.TestSuite(), unittest.TestSuite([]))\r\n               ,(_mk_TestSuite('test_1'), _mk_TestSuite('test_1'))]\r\n    ne_pairs = [(unittest.TestSuite(), _mk_TestSuite('test_1'))\r\n               ,(unittest.TestSuite([]), _mk_TestSuite('test_1'))\r\n               ,(_mk_TestSuite('test_1', 'test_2'), _mk_TestSuite('test_1', 'test_3'))\r\n               ,(_mk_TestSuite('test_1'), _mk_TestSuite('test_2'))]\r\n    def test_init__tests_optional(self):\r\n        suite = unittest.TestSuite()\r\n        self.assertEqual(suite.countTestCases(), 0)\r\n    def test_init__empty_tests(self):\r\n        suite = unittest.TestSuite([])\r\n        self.assertEqual(suite.countTestCases(), 0)\r\n    def test_init__tests_from_any_iterable(self):\r\n        def tests():\r\n            yield unittest.FunctionTestCase(lambda: None)\r\n            yield unittest.FunctionTestCase(lambda: None)\r\n        suite_1 = unittest.TestSuite(tests())\r\n        self.assertEqual(suite_1.countTestCases(), 2)\r\n        suite_2 = unittest.TestSuite(suite_1)\r\n        self.assertEqual(suite_2.countTestCases(), 2)\r\n        suite_3 = unittest.TestSuite(set(suite_1))\r\n        self.assertEqual(suite_3.countTestCases(), 2)\r\n    def test_init__TestSuite_instances_in_tests(self):\r\n        def tests():\r\n            ftc = unittest.FunctionTestCase(lambda: None)\r\n            yield unittest.TestSuite([ftc])\r\n            yield unittest.FunctionTestCase(lambda: None)\r\n        suite = unittest.TestSuite(tests())\r\n        self.assertEqual(suite.countTestCases(), 2)\r\n    def test_iter(self):\r\n        test1 = unittest.FunctionTestCase(lambda: None)\r\n        test2 = unittest.FunctionTestCase(lambda: None)\r\n        suite = unittest.TestSuite((test1, test2))\r\n        self.assertEqual(list(suite), [test1, test2])\r\n    def test_countTestCases_zero_simple(self):\r\n        suite = unittest.TestSuite()\r\n        self.assertEqual(suite.countTestCases(), 0)\r\n    def test_countTestCases_zero_nested(self):\r\n        class Test1(unittest.TestCase):\r\n            def test(self):\r\n                pass\r\n        suite = unittest.TestSuite([unittest.TestSuite()])\r\n        self.assertEqual(suite.countTestCases(), 0)\r\n    def test_countTestCases_simple(self):\r\n        test1 = unittest.FunctionTestCase(lambda: None)\r\n        test2 = unittest.FunctionTestCase(lambda: None)\r\n        suite = unittest.TestSuite((test1, test2))\r\n        self.assertEqual(suite.countTestCases(), 2)\r\n    def test_countTestCases_nested(self):\r\n        class Test1(unittest.TestCase):\r\n            def test1(self): pass\r\n            def test2(self): pass\r\n        test2 = unittest.FunctionTestCase(lambda: None)\r\n        test3 = unittest.FunctionTestCase(lambda: None)\r\n        child = unittest.TestSuite((Test1('test2'), test2))\r\n        parent = unittest.TestSuite((test3, child, Test1('test1')))\r\n        self.assertEqual(parent.countTestCases(), 4)\r\n    def test_run__empty_suite(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        suite = unittest.TestSuite()\r\n        suite.run(result)\r\n        self.assertEqual(events, [])\r\n    def test_run__requires_result(self):\r\n        suite = unittest.TestSuite()\r\n        try:\r\n            suite.run()\r\n        except TypeError:\r\n            pass\r\n        else:\r\n            self.fail(\"Failed to raise TypeError\")\r\n    def test_run(self):\r\n        events = []\r\n        result = LoggingResult(events)\r\n        class LoggingCase(unittest.TestCase):\r\n            def run(self, result):\r\n                events.append('run %s' % self._testMethodName)\r\n            def test1(self): pass\r\n            def test2(self): pass\r\n        tests = [LoggingCase('test1'), LoggingCase('test2')]\r\n        unittest.TestSuite(tests).run(result)\r\n        self.assertEqual(events, ['run test1', 'run test2'])\r\n    def test_addTest__TestCase(self):\r\n        class Foo(unittest.TestCase):\r\n            def test(self): pass\r\n        test = Foo('test')\r\n        suite = unittest.TestSuite()\r\n        suite.addTest(test)\r\n        self.assertEqual(suite.countTestCases(), 1)\r\n        self.assertEqual(list(suite), [test])\r\n    def test_addTest__TestSuite(self):\r\n        class Foo(unittest.TestCase):\r\n            def test(self): pass\r\n        suite_2 = unittest.TestSuite([Foo('test')])\r\n        suite = unittest.TestSuite()\r\n        suite.addTest(suite_2)\r\n        self.assertEqual(suite.countTestCases(), 1)\r\n        self.assertEqual(list(suite), [suite_2])\r\n    def test_addTests(self):\r\n        class Foo(unittest.TestCase):\r\n            def test_1(self): pass\r\n            def test_2(self): pass\r\n        test_1 = Foo('test_1')\r\n        test_2 = Foo('test_2')\r\n        inner_suite = unittest.TestSuite([test_2])\r\n        def gen():\r\n            yield test_1\r\n            yield test_2\r\n            yield inner_suite\r\n        suite_1 = unittest.TestSuite()\r\n        suite_1.addTests(gen())\r\n        self.assertEqual(list(suite_1), list(gen()))\r\n        suite_2 = unittest.TestSuite()\r\n        for t in gen():\r\n            suite_2.addTest(t)\r\n        self.assertEqual(suite_1, suite_2)\r\n    def test_addTest__noniterable(self):\r\n        suite = unittest.TestSuite()\r\n        try:\r\n            suite.addTests(5)\r\n        except TypeError:\r\n            pass\r\n        else:\r\n            self.fail(\"Failed to raise TypeError\")\r\n    def test_addTest__noncallable(self):\r\n        suite = unittest.TestSuite()\r\n        self.assertRaises(TypeError, suite.addTest, 5)\r\n    def test_addTest__casesuiteclass(self):\r\n        suite = unittest.TestSuite()\r\n        self.assertRaises(TypeError, suite.addTest, Test_TestSuite)\r\n        self.assertRaises(TypeError, suite.addTest, unittest.TestSuite)\r\n    def test_addTests__string(self):\r\n        suite = unittest.TestSuite()\r\n        self.assertRaises(TypeError, suite.addTests, \"foo\")\r\n    def test_function_in_suite(self):\r\n        def f(_):\r\n            pass\r\n        suite = unittest.TestSuite()\r\n        suite.addTest(f)\r\n        suite.run(unittest.TestResult())\r\n    def test_basetestsuite(self):\r\n        class Test(unittest.TestCase):\r\n            wasSetUp = False\r\n            wasTornDown = False\r\n            @classmethod\r\n            def setUpClass(cls):\r\n                cls.wasSetUp = True\r\n            @classmethod\r\n            def tearDownClass(cls):\r\n                cls.wasTornDown = True\r\n            def testPass(self):\r\n                pass\r\n            def testFail(self):\r\n                fail\r\n        class Module(object):\r\n            wasSetUp = False\r\n            wasTornDown = False\r\n            @staticmethod\r\n            def setUpModule():\r\n                Module.wasSetUp = True\r\n            @staticmethod\r\n            def tearDownModule():\r\n                Module.wasTornDown = True\r\n        Test.__module__ = 'Module'\r\n        sys.modules['Module'] = Module\r\n        self.addCleanup(sys.modules.pop, 'Module')\r\n        suite = unittest.BaseTestSuite()\r\n        suite.addTests([Test('testPass'), Test('testFail')])\r\n        self.assertEqual(suite.countTestCases(), 2)\r\n        result = unittest.TestResult()\r\n        suite.run(result)\r\n        self.assertFalse(Module.wasSetUp)\r\n        self.assertFalse(Module.wasTornDown)\r\n        self.assertFalse(Test.wasSetUp)\r\n        self.assertFalse(Test.wasTornDown)\r\n        self.assertEqual(len(result.errors), 1)\r\n        self.assertEqual(len(result.failures), 0)\r\n        self.assertEqual(result.testsRun, 2)\r\n    def test_overriding_call(self):\r\n        class MySuite(unittest.TestSuite):\r\n            called = False\r\n            def __call__(self, *args, **kw):\r\n                self.called = True\r\n                unittest.TestSuite.__call__(self, *args, **kw)\r\n        suite = MySuite()\r\n        result = unittest.TestResult()\r\n        wrapper = unittest.TestSuite()\r\n        wrapper.addTest(suite)\r\n        wrapper(result)\r\n        self.assertTrue(suite.called)\r\n        self.assertFalse(result._testRunEntered)\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/test/__init__.py": "", "/Lib/traceback.py": "import sys\ndef print_exc(file=sys.stderr):\n    exc = __BRYTHON__.exception_stack[-1]\n    file.write(exc.info)\n    file.write('\\n'+exc.__name__)\n    if exc.message:\n        file.write(': '+exc.message)\n    file.write('\\n')\ndef format_exc(limit=None,chain=True):\n    exc = __BRYTHON__.exception_stack[-1]\n    res = exc.info+'\\n'+exc.__name__\n    if exc.message:\n        res += ': '+exc.message\n    return res+'\\n'\ndef format_exception(_type, value, tb, limit=None, chain=True):\n    return ['%s\\n' %_type,'%s\\n' %value]    \n", "/Lib/test/regrtest.py": "\"\"\"\nUsage:\npython -m test [options] [test_name1 [test_name2 ...]]\npython path/to/Lib/test/regrtest.py [options] [test_name1 [test_name2 ...]]\nIf no arguments or options are provided, finds all files matching\nthe pattern \"test_*\" in the Lib/test subdirectory and runs\nthem in alphabetical order (but see -M and -u, below, for exceptions).\nFor more rigorous testing, it is useful to use the following\ncommand line:\npython -E -Wd -m test [options] [test_name1 ...]\nOptions:\n-h/--help       -- print this text and exit\n--timeout TIMEOUT\n                -- dump the traceback and exit if a test takes more\n                   than TIMEOUT seconds; disabled if TIMEOUT is negative\n                   or equals to zero\n--wait          -- wait for user input, e.g., allow a debugger to be attached\nVerbosity\n-v/--verbose    -- run tests in verbose mode with output to stdout\n-w/--verbose2   -- re-run failed tests in verbose mode\n-W/--verbose3   -- display test output on failure\n-d/--debug      -- print traceback for failed tests\n-q/--quiet      -- no output unless one or more tests fail\n-o/--slow       -- print the slowest 10 tests\n   --header     -- print header with interpreter info\nSelecting tests\n-r/--randomize  -- randomize test execution order (see below)\n   --randseed   -- pass a random seed to reproduce a previous random run\n-f/--fromfile   -- read names of tests to run from a file (see below)\n-x/--exclude    -- arguments are tests to *exclude*\n-s/--single     -- single step through a set of tests (see below)\n-m/--match PAT  -- match test cases and methods with glob pattern PAT\n-G/--failfast   -- fail as soon as a test fails (only with -v or -W)\n-u/--use RES1,RES2,...\n                -- specify which special resource intensive tests to run\n-M/--memlimit LIMIT\n                -- run very large memory-consuming tests\n   --testdir DIR\n                -- execute test files in the specified directory (instead\n                   of the Python stdlib test suite)\nSpecial runs\n-l/--findleaks  -- if GC is available detect tests that leak memory\n-L/--runleaks   -- run the leaks(1) command just before exit\n-R/--huntrleaks RUNCOUNTS\n                -- search for reference leaks (needs debug build, v. slow)\n-j/--multiprocess PROCESSES\n                -- run PROCESSES processes at once\n-T/--coverage   -- turn on code coverage tracing using the trace module\n-D/--coverdir DIRECTORY\n                -- Directory where coverage files are put\n-N/--nocoverdir -- Put coverage files alongside modules\n-t/--threshold THRESHOLD\n                -- call gc.set_threshold(THRESHOLD)\n-n/--nowindows  -- suppress error message boxes on Windows\n-F/--forever    -- run the specified tests in a loop, until an error happens\nAdditional Option Details:\n-r randomizes test execution order. You can use --randseed=int to provide a\nint seed value for the randomizer; this is useful for reproducing troublesome\ntest orders.\n-s On the first invocation of regrtest using -s, the first test file found\nor the first test file given on the command line is run, and the name of\nthe next test is recorded in a file named pynexttest.  If run from the\nPython build directory, pynexttest is located in the 'build' subdirectory,\notherwise it is located in tempfile.gettempdir().  On subsequent runs,\nthe test in pynexttest is run, and the next test is written to pynexttest.\nWhen the last test has been run, pynexttest is deleted.  In this way it\nis possible to single step through the test files.  This is useful when\ndoing memory analysis on the Python interpreter, which process tends to\nconsume too many resources to run the full regression test non-stop.\n-S is used to continue running tests after an aborted run.  It will\nmaintain the order a standard run (ie, this assumes -r is not used).\nThis is useful after the tests have prematurely stopped for some external\nreason and you want to start running from where you left off rather\nthan starting from the beginning.\n-f reads the names of tests from the file given as f's argument, one\nor more test names per line.  Whitespace is ignored.  Blank lines and\nlines beginning with '#' are ignored.  This is especially useful for\nwhittling down failures involving interactions among tests.\n-L causes the leaks(1) command to be run just before exit if it exists.\nleaks(1) is available on Mac OS X and presumably on some other\nFreeBSD-derived systems.\n-R runs each test several times and examines sys.gettotalrefcount() to\nsee if the test appears to be leaking references.  The argument should\nbe of the form stab:run:fname where 'stab' is the number of times the\ntest is run to let gettotalrefcount settle down, 'run' is the number\nof times further it is run and 'fname' is the name of the file the\nreports are written to.  These parameters all have defaults (5, 4 and\n\"reflog.txt\" respectively), and the minimal invocation is '-R :'.\n-M runs tests that require an exorbitant amount of memory. These tests\ntypically try to ascertain containers keep working when containing more than\n2 billion objects, which only works on 64-bit systems. There are also some\ntests that try to exhaust the address space of the process, which only makes\nsense on 32-bit systems with at least 2Gb of memory. The passed-in memlimit,\nwhich is a string in the form of '2.5Gb', determines howmuch memory the\ntests will limit themselves to (but they may go slightly over.) The number\nshouldn't be more memory than the machine has (including swap memory). You\nshould also keep in mind that swap memory is generally much, much slower\nthan RAM, and setting memlimit to all available RAM or higher will heavily\ntax the machine. On the other hand, it is no use running these tests with a\nlimit of less than 2.5Gb, and many require more than 20Gb. Tests that expect\nto use more than memlimit memory will be skipped. The big-memory tests\ngenerally run very, very long.\n-u is used to specify which special resource intensive tests to run,\nsuch as those requiring large file support or network connectivity.\nThe argument is a comma-separated list of words indicating the\nresources to test.  Currently only the following are defined:\n    all -       Enable all special resources.\n    none -      Disable all special resources (this is the default).\n    audio -     Tests that use the audio device.  (There are known\n                cases of broken audio drivers that can crash Python or\n                even the Linux kernel.)\n    curses -    Tests that use curses and will modify the terminal's\n                state and output modes.\n    largefile - It is okay to run some test that may create huge\n                files.  These tests can take a long time and may\n                consume >2GB of disk space temporarily.\n    network -   It is okay to run tests that use external network\n                resource, e.g. testing SSL support for sockets.\n    decimal -   Test the decimal module against a large suite that\n                verifies compliance with standards.\n    cpu -       Used for certain CPU-heavy tests.\n    subprocess  Run all tests for the subprocess module.\n    urlfetch -  It is okay to download files required on testing.\n    gui -       Run tests that require a running GUI.\nTo enable all resources except one, use '-uall,-<resource>'.  For\nexample, to run all the tests except for the gui tests, give the\noption '-uall,-gui'.\n\"\"\"\nimport importlib\nimport builtins\nimport faulthandler\nimport getopt\nimport io\nimport json\nimport logging\nimport os\nimport platform\nimport random\nimport re\nimport shutil\nimport signal\nimport sys\nimport sysconfig\nimport tempfile\nimport time\nimport traceback\nimport unittest\nimport warnings\nfrom inspect import isabstract\ntry:\n    import threading\nexcept ImportError:\n    threading = None\ntry:\n    import multiprocessing.process\nexcept ImportError:\n    multiprocessing = None\nfor module in sys.modules.values():\n    if hasattr(module, '__path__'):\n        module.__path__ = [os.path.abspath(path) for path in module.__path__]\n    if hasattr(module, '__file__'):\n        module.__file__ = os.path.abspath(module.__file__)\nif sys.platform == 'darwin':\n    try:\n        import resource\n    except ImportError:\n        pass\n    else:\n        soft, hard = resource.getrlimit(resource.RLIMIT_STACK)\n        newsoft = min(hard, max(soft, 1024*2048))\n        resource.setrlimit(resource.RLIMIT_STACK, (newsoft, hard))\nPASSED = 1\nFAILED = 0\nENV_CHANGED = -1\nSKIPPED = -2\nRESOURCE_DENIED = -3\nINTERRUPTED = -4\nCHILD_ERROR = -5   # error in a child process\nfrom test import support\nRESOURCE_NAMES = ('audio', 'curses', 'largefile', 'network',\n                  'decimal', 'cpu', 'subprocess', 'urlfetch', 'gui')\nTEMPDIR = os.path.abspath(tempfile.gettempdir())\ndef usage(msg):\n    print(msg, file=sys.stderr)\n    print(\"Use --help for usage\", file=sys.stderr)\n    sys.exit(2)\ndef main(tests=None, testdir=None, verbose=0, quiet=False,\n         exclude=False, single=0, randomize=False, fromfile=None,\n         findleaks=False, use_resources=None, trace=False, coverdir='coverage',\n         runleaks=False, huntrleaks=False, verbose2=False, print_slow=False,\n         random_seed=None, use_mp=None, verbose3=False, forever=False,\n         header=False, failfast=False, match_tests=None):\n    \"\"\"Execute a test suite.\n    This also parses command-line options and modifies its behavior\n    accordingly.\n    tests -- a list of strings containing test names (optional)\n    testdir -- the directory in which to look for tests (optional)\n    Users other than the Python test suite will certainly want to\n    specify testdir; if it's omitted, the directory containing the\n    Python test suite is searched for.\n    If the tests argument is omitted, the tests listed on the\n    command-line will be used.  If that's empty, too, then all *.py\n    files beginning with test_ will be used.\n    The other default arguments (verbose, quiet, exclude,\n    single, randomize, findleaks, use_resources, trace, coverdir,\n    print_slow, and random_seed) allow programmers calling main()\n    directly to set the values that would normally be set by flags\n    on the command line.\n    \"\"\"\n    faulthandler.enable(all_threads=True)\n    signals = []\n    if hasattr(signal, 'SIGALRM'):\n        signals.append(signal.SIGALRM)\n    if hasattr(signal, 'SIGUSR1'):\n        signals.append(signal.SIGUSR1)\n    for signum in signals:\n        faulthandler.register(signum, chain=True)\n    replace_stdout()\n    support.record_original_stdout(sys.stdout)\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], 'hvqxsoS:rf:lu:t:TD:NLR:FdwWM:nj:Gm:',\n            ['help', 'verbose', 'verbose2', 'verbose3', 'quiet',\n             'exclude', 'single', 'slow', 'randomize', 'fromfile=', 'findleaks',\n             'use=', 'threshold=', 'coverdir=', 'nocoverdir',\n             'runleaks', 'huntrleaks=', 'memlimit=', 'randseed=',\n             'multiprocess=', 'coverage', 'slaveargs=', 'forever', 'debug',\n             'start=', 'nowindows', 'header', 'testdir=', 'timeout=', 'wait',\n             'failfast', 'match=', 'next='])\n    except getopt.error as msg:\n        usage(msg)\n    if random_seed is None:\n        random_seed = random.randrange(10000000)\n    if use_resources is None:\n        use_resources = []\n    debug = False\n    start = None\n    timeout = None\n    for o, a in opts:\n        if o in ('-h', '--help'):\n            print(__doc__)\n            return\n        elif o in ('-v', '--verbose'):\n            verbose += 1\n        elif o in ('-w', '--verbose2'):\n            verbose2 = True\n        elif o in ('-d', '--debug'):\n            debug = True\n        elif o in ('-W', '--verbose3'):\n            verbose3 = True\n        elif o in ('-G', '--failfast'):\n            failfast = True\n        elif o in ('-q', '--quiet'):\n            quiet = True;\n            verbose = 0\n        elif o in ('-x', '--exclude'):\n            exclude = True\n        elif o in ('-S', '--start'):\n            start = a\n        elif o in ('-s', '--single'):\n            single = 1\n        elif o == '--next':\n            single = int(a)\n        elif o in ('-o', '--slow'):\n            print_slow = True\n        elif o in ('-r', '--randomize'):\n            randomize = True\n        elif o == '--randseed':\n            random_seed = int(a)\n        elif o in ('-f', '--fromfile'):\n            fromfile = a\n        elif o in ('-m', '--match'):\n            match_tests = a\n        elif o in ('-l', '--findleaks'):\n            findleaks = True\n        elif o in ('-L', '--runleaks'):\n            runleaks = True\n        elif o in ('-t', '--threshold'):\n            import gc\n            gc.set_threshold(int(a))\n        elif o in ('-T', '--coverage'):\n            trace = True\n        elif o in ('-D', '--coverdir'):\n            coverdir = os.path.join(support.SAVEDCWD, a)\n        elif o in ('-N', '--nocoverdir'):\n            coverdir = None\n        elif o in ('-R', '--huntrleaks'):\n            huntrleaks = a.split(':')\n            if len(huntrleaks) not in (2, 3):\n                print(a, huntrleaks)\n                usage('-R takes 2 or 3 colon-separated arguments')\n            if not huntrleaks[0]:\n                huntrleaks[0] = 5\n            else:\n                huntrleaks[0] = int(huntrleaks[0])\n            if not huntrleaks[1]:\n                huntrleaks[1] = 4\n            else:\n                huntrleaks[1] = int(huntrleaks[1])\n            if len(huntrleaks) == 2 or not huntrleaks[2]:\n                huntrleaks[2:] = [\"reflog.txt\"]\n            warm_caches()\n        elif o in ('-M', '--memlimit'):\n            support.set_memlimit(a)\n        elif o in ('-u', '--use'):\n            u = [x.lower() for x in a.split(',')]\n            for r in u:\n                if r == 'all':\n                    use_resources[:] = RESOURCE_NAMES\n                    continue\n                if r == 'none':\n                    del use_resources[:]\n                    continue\n                remove = False\n                if r[0] == '-':\n                    remove = True\n                    r = r[1:]\n                if r not in RESOURCE_NAMES:\n                    usage('Invalid -u/--use option: ' + a)\n                if remove:\n                    if r in use_resources:\n                        use_resources.remove(r)\n                elif r not in use_resources:\n                    use_resources.append(r)\n        elif o in ('-n', '--nowindows'):\n            import msvcrt\n            msvcrt.SetErrorMode(msvcrt.SEM_FAILCRITICALERRORS|\n                    msvcrt.SEM_NOALIGNMENTFAULTEXCEPT|\n                    msvcrt.SEM_NOGPFAULTERRORBOX|\n                    msvcrt.SEM_NOOPENFILEERRORBOX)\n            try:\n                msvcrt.CrtSetReportMode\n            except AttributeError:\n                pass\n            else:\n                for m in [msvcrt.CRT_WARN, msvcrt.CRT_ERROR, msvcrt.CRT_ASSERT]:\n                    msvcrt.CrtSetReportMode(m, msvcrt.CRTDBG_MODE_FILE)\n                    msvcrt.CrtSetReportFile(m, msvcrt.CRTDBG_FILE_STDERR)\n        elif o in ('-F', '--forever'):\n            forever = True\n        elif o in ('-j', '--multiprocess'):\n            use_mp = int(a)\n            if use_mp <= 0:\n                try:\n                    import multiprocessing\n                    use_mp = 2 + multiprocessing.cpu_count()\n                except (ImportError, NotImplementedError):\n                    use_mp = 3\n            if use_mp == 1:\n                use_mp = None\n        elif o == '--header':\n            header = True\n        elif o == '--slaveargs':\n            args, kwargs = json.loads(a)\n            try:\n                result = runtest(*args, **kwargs)\n            except KeyboardInterrupt:\n                result = INTERRUPTED, ''\n            except BaseException as e:\n                traceback.print_exc()\n                result = CHILD_ERROR, str(e)\n            sys.stdout.flush()\n            print()   # Force a newline (just in case)\n            print(json.dumps(result))\n            sys.exit(0)\n        elif o == '--testdir':\n            testdir = os.path.join(support.SAVEDCWD, a)\n        elif o == '--timeout':\n            if hasattr(faulthandler, 'dump_tracebacks_later'):\n                timeout = float(a)\n                if timeout <= 0:\n                    timeout = None\n            else:\n                print(\"Warning: The timeout option requires \"\n                      \"faulthandler.dump_tracebacks_later\")\n                timeout = None\n        elif o == '--wait':\n            input(\"Press any key to continue...\")\n        else:\n            print((\"No handler for option {}.  Please report this as a bug \"\n                   \"at http://bugs.python.org.\").format(o), file=sys.stderr)\n            sys.exit(1)\n    if single and fromfile:\n        usage(\"-s and -f don't go together!\")\n    if use_mp and trace:\n        usage(\"-T and -j don't go together!\")\n    if use_mp and findleaks:\n        usage(\"-l and -j don't go together!\")\n    if use_mp and support.max_memuse:\n        usage(\"-M and -j don't go together!\")\n    if failfast and not (verbose or verbose3):\n        usage(\"-G/--failfast needs either -v or -W\")\n    good = []\n    bad = []\n    skipped = []\n    resource_denieds = []\n    environment_changed = []\n    interrupted = False\n    if findleaks:\n        try:\n            import gc\n        except ImportError:\n            print('No GC available, disabling findleaks.')\n            findleaks = False\n        else:\n            found_garbage = []\n    if single:\n        filename = os.path.join(TEMPDIR, 'pynexttest')\n        try:\n            fp = open(filename, 'r')\n            next_test = fp.read().strip()\n            tests = [next_test]\n            fp.close()\n        except IOError:\n            pass\n    if fromfile:\n        tests = []\n        fp = open(os.path.join(support.SAVEDCWD, fromfile))\n        count_pat = re.compile(r'\\[\\s*\\d+/\\s*\\d+\\]')\n        for line in fp:\n            line = count_pat.sub('', line)\n            guts = line.split() # assuming no test has whitespace in its name\n            if guts and not guts[0].startswith('#'):\n                tests.extend(guts)\n        fp.close()\n    removepy(args)\n    removepy(tests)\n    stdtests = STDTESTS[:]\n    nottests = NOTTESTS.copy()\n    if exclude:\n        for arg in args:\n            if arg in stdtests:\n                stdtests.remove(arg)\n            nottests.add(arg)\n        args = []\n    if verbose or header or not (quiet or single != 1 or tests or args):\n        print(\"==\", platform.python_implementation(), *sys.version.split())\n        print(\"==  \", platform.platform(aliased=True),\n                      \"%s-endian\" % sys.byteorder)\n        print(\"==  \", os.getcwd())\n        print(\"Testing with flags:\", sys.flags)\n    if testdir:\n        alltests = findtests(testdir, list(), set())\n    else:\n        alltests = findtests(testdir, stdtests, nottests)\n    selected = tests or args or alltests\n    if single:\n        first_selected = selected[0]\n        index_selected = alltests.index(first_selected)\n        if index_selected + single > len(alltests):\n            single = len(alltests) - index_selected\n        selected = alltests[index_selected:index_selected+single]\n        try:\n            next_single_test = alltests[index_selected+single]\n        except IndexError:\n            next_single_test = None\n    if start:\n        try:\n            del selected[:selected.index(start)]\n        except ValueError:\n            print(\"Couldn't find starting test (%s), using all tests\" % start)\n    if randomize:\n        random.seed(random_seed)\n        print(\"Using random seed\", random_seed)\n        random.shuffle(selected)\n    if trace:\n        import trace, tempfile\n        tracer = trace.Trace(ignoredirs=[sys.base_prefix, sys.base_exec_prefix,\n                                         tempfile.gettempdir()],\n                             trace=False, count=True)\n    test_times = []\n    support.verbose = verbose      # Tell tests to be moderately quiet\n    support.use_resources = use_resources\n    save_modules = sys.modules.keys()\n    def accumulate_result(test, result):\n        ok, test_time = result\n        test_times.append((test_time, test))\n        if ok == PASSED:\n            good.append(test)\n        elif ok == FAILED:\n            bad.append(test)\n        elif ok == ENV_CHANGED:\n            environment_changed.append(test)\n        elif ok == SKIPPED:\n            skipped.append(test)\n        elif ok == RESOURCE_DENIED:\n            skipped.append(test)\n            resource_denieds.append(test)\n    if forever:\n        def test_forever(tests=list(selected)):\n            while True:\n                for test in tests:\n                    yield test\n                    if bad:\n                        return\n        tests = test_forever()\n        test_count = ''\n        test_count_width = 3\n    else:\n        tests = iter(selected)\n        test_count = '/{}'.format(len(selected))\n        test_count_width = len(test_count) - 1\n    if use_mp:\n        try:\n            from threading import Thread\n        except ImportError:\n            print(\"Multiprocess option requires thread support\")\n            sys.exit(2)\n        from queue import Queue\n        from subprocess import Popen, PIPE\n        debug_output_pat = re.compile(r\"\\[\\d+ refs\\]$\")\n        output = Queue()\n        pending = MultiprocessTests(tests)\n        opt_args = support.args_from_interpreter_flags()\n        base_cmd = [sys.executable] + opt_args + ['-m', 'test.regrtest']\n        def work():\n            try:\n                while True:\n                    try:\n                        test = next(pending)\n                    except StopIteration:\n                        output.put((None, None, None, None))\n                        return\n                    args_tuple = (\n                        (test, verbose, quiet),\n                        dict(huntrleaks=huntrleaks, use_resources=use_resources,\n                             debug=debug, output_on_failure=verbose3,\n                             timeout=timeout, failfast=failfast,\n                             match_tests=match_tests)\n                    )\n                    popen = Popen(base_cmd + ['--slaveargs', json.dumps(args_tuple)],\n                                   stdout=PIPE, stderr=PIPE,\n                                   universal_newlines=True,\n                                   close_fds=(os.name != 'nt'),\n                                   cwd=support.SAVEDCWD)\n                    stdout, stderr = popen.communicate()\n                    retcode = popen.wait()\n                    stderr = debug_output_pat.sub(\"\", stderr)\n                    stdout, _, result = stdout.strip().rpartition(\"\\n\")\n                    if retcode != 0:\n                        result = (CHILD_ERROR, \"Exit code %s\" % retcode)\n                        output.put((test, stdout.rstrip(), stderr.rstrip(), result))\n                        return\n                    if not result:\n                        output.put((None, None, None, None))\n                        return\n                    result = json.loads(result)\n                    output.put((test, stdout.rstrip(), stderr.rstrip(), result))\n            except BaseException:\n                output.put((None, None, None, None))\n                raise\n        workers = [Thread(target=work) for i in range(use_mp)]\n        for worker in workers:\n            worker.start()\n        finished = 0\n        test_index = 1\n        try:\n            while finished < use_mp:\n                test, stdout, stderr, result = output.get()\n                if test is None:\n                    finished += 1\n                    continue\n                accumulate_result(test, result)\n                if not quiet:\n                    fmt = \"[{1:{0}}{2}/{3}] {4}\" if bad else \"[{1:{0}}{2}] {4}\"\n                    print(fmt.format(\n                        test_count_width, test_index, test_count,\n                        len(bad), test))\n                if stdout:\n                    print(stdout)\n                if stderr:\n                    print(stderr, file=sys.stderr)\n                sys.stdout.flush()\n                sys.stderr.flush()\n                if result[0] == INTERRUPTED:\n                    raise KeyboardInterrupt\n                if result[0] == CHILD_ERROR:\n                    raise Exception(\"Child error on {}: {}\".format(test, result[1]))\n                test_index += 1\n        except KeyboardInterrupt:\n            interrupted = True\n            pending.interrupted = True\n        for worker in workers:\n            worker.join()\n    else:\n        for test_index, test in enumerate(tests, 1):\n            if not quiet:\n                fmt = \"[{1:{0}}{2}/{3}] {4}\" if bad else \"[{1:{0}}{2}] {4}\"\n                print(fmt.format(\n                    test_count_width, test_index, test_count, len(bad), test))\n                sys.stdout.flush()\n            if trace:\n                tracer.runctx('runtest(test, verbose, quiet, timeout=timeout)',\n                              globals=globals(), locals=vars())\n            else:\n                try:\n                    result = runtest(test, verbose, quiet, huntrleaks, debug,\n                                     output_on_failure=verbose3,\n                                     timeout=timeout, failfast=failfast,\n                                     match_tests=match_tests)\n                    accumulate_result(test, result)\n                except KeyboardInterrupt:\n                    interrupted = True\n                    break\n                except:\n                    raise\n            if findleaks:\n                gc.collect()\n                if gc.garbage:\n                    print(\"Warning: test created\", len(gc.garbage), end=' ')\n                    print(\"uncollectable object(s).\")\n                    found_garbage.extend(gc.garbage)\n                    del gc.garbage[:]\n            for module in sys.modules.keys():\n                if module not in save_modules and module.startswith(\"test.\"):\n                    support.unload(module)\n    if interrupted:\n        print()\n        print(\"Test suite interrupted by signal SIGINT.\")\n        omitted = set(selected) - set(good) - set(bad) - set(skipped)\n        print(count(len(omitted), \"test\"), \"omitted:\")\n        printlist(omitted)\n    if good and not quiet:\n        if not bad and not skipped and not interrupted and len(good) > 1:\n            print(\"All\", end=' ')\n        print(count(len(good), \"test\"), \"OK.\")\n    if print_slow:\n        test_times.sort(reverse=True)\n        print(\"10 slowest tests:\")\n        for time, test in test_times[:10]:\n            print(\"%s: %.1fs\" % (test, time))\n    if bad:\n        bad = sorted(set(bad) - set(environment_changed))\n        if bad:\n            print(count(len(bad), \"test\"), \"failed:\")\n            printlist(bad)\n    if environment_changed:\n        print(\"{} altered the execution environment:\".format(\n                 count(len(environment_changed), \"test\")))\n        printlist(environment_changed)\n    if skipped and not quiet:\n        print(count(len(skipped), \"test\"), \"skipped:\")\n        printlist(skipped)\n        e = _ExpectedSkips()\n        plat = sys.platform\n        if e.isvalid():\n            surprise = set(skipped) - e.getexpected() - set(resource_denieds)\n            if surprise:\n                print(count(len(surprise), \"skip\"), \\\n                      \"unexpected on\", plat + \":\")\n                printlist(surprise)\n            else:\n                print(\"Those skips are all expected on\", plat + \".\")\n        else:\n            print(\"Ask someone to teach regrtest.py about which tests are\")\n            print(\"expected to get skipped on\", plat + \".\")\n    if verbose2 and bad:\n        print(\"Re-running failed tests in verbose mode\")\n        for test in bad:\n            print(\"Re-running test %r in verbose mode\" % test)\n            sys.stdout.flush()\n            try:\n                verbose = True\n                ok = runtest(test, True, quiet, huntrleaks, debug, timeout=timeout)\n            except KeyboardInterrupt:\n                print()\n                break\n            except:\n                raise\n    if single:\n        if next_single_test:\n            with open(filename, 'w') as fp:\n                fp.write(next_single_test + '\\n')\n        else:\n            os.unlink(filename)\n    if trace:\n        r = tracer.results()\n        r.write_results(show_missing=True, summary=True, coverdir=coverdir)\n    if runleaks:\n        os.system(\"leaks %d\" % os.getpid())\n    sys.exit(len(bad) > 0 or interrupted)\nSTDTESTS = [\n    'test_grammar',\n    'test_opcodes',\n    'test_dict',\n    'test_builtin',\n    'test_exceptions',\n    'test_types',\n    'test_unittest',\n    'test_doctest',\n    'test_doctest2',\n    'test_support'\n]\nNOTTESTS = set()\ndef findtests(testdir=None, stdtests=STDTESTS, nottests=NOTTESTS):\n    \"\"\"Return a list of all applicable test modules.\"\"\"\n    testdir = findtestdir(testdir)\n    names = os.listdir(testdir)\n    tests = []\n    others = set(stdtests) | nottests\n    for name in names:\n        mod, ext = os.path.splitext(name)\n        if mod[:5] == \"test_\" and ext in (\".py\", \"\") and mod not in others:\n            tests.append(mod)\n    return stdtests + sorted(tests)\nclass MultiprocessTests(object):\n    \"\"\"A thread-safe iterator over tests for multiprocess mode.\"\"\"\n    def __init__(self, tests):\n        self.interrupted = False\n        self.lock = threading.Lock()\n        self.tests = tests\n    def __iter__(self):\n        return self\n    def __next__(self):\n        with self.lock:\n            if self.interrupted:\n                raise StopIteration('tests interrupted')\n            return next(self.tests)\ndef replace_stdout():\n    \"\"\"Set stdout encoder error handler to backslashreplace (as stderr error\n    handler) to avoid UnicodeEncodeError when printing a traceback\"\"\"\n    import atexit\n    stdout = sys.stdout\n    sys.stdout = open(stdout.fileno(), 'w',\n        encoding=stdout.encoding,\n        errors=\"backslashreplace\",\n        closefd=False,\n        newline='\\n')\n    def restore_stdout():\n        sys.stdout.close()\n        sys.stdout = stdout\n    atexit.register(restore_stdout)\ndef runtest(test, verbose, quiet,\n            huntrleaks=False, debug=False, use_resources=None,\n            output_on_failure=False, failfast=False, match_tests=None,\n            timeout=None):\n    \"\"\"Run a single test.\n    test -- the name of the test\n    verbose -- if true, print more messages\n    quiet -- if true, don't print 'skipped' messages (probably redundant)\n    test_times -- a list of (time, test_name) pairs\n    huntrleaks -- run multiple times to test for leaks; requires a debug\n                  build; a triple corresponding to -R's three arguments\n    output_on_failure -- if true, display test output on failure\n    timeout -- dump the traceback and exit if a test takes more than\n               timeout seconds\n    Returns one of the test result constants:\n        INTERRUPTED      KeyboardInterrupt when run under -j\n        RESOURCE_DENIED  test skipped because resource denied\n        SKIPPED          test skipped for some other reason\n        ENV_CHANGED      test failed because it changed the execution environment\n        FAILED           test failed\n        PASSED           test passed\n    \"\"\"\n    if use_resources is not None:\n        support.use_resources = use_resources\n    use_timeout = (timeout is not None)\n    if use_timeout:\n        faulthandler.dump_tracebacks_later(timeout, exit=True)\n    try:\n        support.match_tests = match_tests\n        if failfast:\n            support.failfast = True\n        if output_on_failure:\n            support.verbose = True\n            if runtest.stringio is None:\n                stream = io.StringIO()\n                runtest.stringio = stream\n            else:\n                stream = runtest.stringio\n                stream.seek(0)\n                stream.truncate()\n            orig_stdout = sys.stdout\n            orig_stderr = sys.stderr\n            try:\n                sys.stdout = stream\n                sys.stderr = stream\n                result = runtest_inner(test, verbose, quiet, huntrleaks,\n                                       debug, display_failure=False)\n                if result[0] == FAILED:\n                    output = stream.getvalue()\n                    orig_stderr.write(output)\n                    orig_stderr.flush()\n            finally:\n                sys.stdout = orig_stdout\n                sys.stderr = orig_stderr\n        else:\n            support.verbose = verbose  # Tell tests to be moderately quiet\n            result = runtest_inner(test, verbose, quiet, huntrleaks, debug,\n                                   display_failure=not verbose)\n        return result\n    finally:\n        if use_timeout:\n            faulthandler.cancel_dump_tracebacks_later()\n        cleanup_test_droppings(test, verbose)\nruntest.stringio = None\nclass saved_test_environment:\n    \"\"\"Save bits of the test environment and restore them at block exit.\n        with saved_test_environment(testname, verbose, quiet):\n    Unless quiet is True, a warning is printed to stderr if any of\n    the saved items was changed by the test.  The attribute 'changed'\n    is initially False, but is set to True if a change is detected.\n    If verbose is more than 1, the before and after state of changed\n    items is also printed.\n    \"\"\"\n    changed = False\n    def __init__(self, testname, verbose=0, quiet=False):\n        self.testname = testname\n        self.verbose = verbose\n        self.quiet = quiet\n    resources = ('sys.argv', 'cwd', 'sys.stdin', 'sys.stdout', 'sys.stderr',\n                 'os.environ', 'sys.path', 'sys.path_hooks', '__import__',\n                 'warnings.filters', 'asyncore.socket_map',\n                 'logging._handlers', 'logging._handlerList', 'sys.gettrace',\n                 'sys.warnoptions', 'threading._dangling',\n                 'multiprocessing.process._dangling',\n                 'sysconfig._CONFIG_VARS', 'sysconfig._INSTALL_SCHEMES',\n                 'support.TESTFN',\n                )\n    def get_sys_argv(self):\n        return id(sys.argv), sys.argv, sys.argv[:]\n    def restore_sys_argv(self, saved_argv):\n        sys.argv = saved_argv[1]\n        sys.argv[:] = saved_argv[2]\n    def get_cwd(self):\n        return os.getcwd()\n    def restore_cwd(self, saved_cwd):\n        os.chdir(saved_cwd)\n    def get_sys_stdout(self):\n        return sys.stdout\n    def restore_sys_stdout(self, saved_stdout):\n        sys.stdout = saved_stdout\n    def get_sys_stderr(self):\n        return sys.stderr\n    def restore_sys_stderr(self, saved_stderr):\n        sys.stderr = saved_stderr\n    def get_sys_stdin(self):\n        return sys.stdin\n    def restore_sys_stdin(self, saved_stdin):\n        sys.stdin = saved_stdin\n    def get_os_environ(self):\n        return id(os.environ), os.environ, dict(os.environ)\n    def restore_os_environ(self, saved_environ):\n        os.environ = saved_environ[1]\n        os.environ.clear()\n        os.environ.update(saved_environ[2])\n    def get_sys_path(self):\n        return id(sys.path), sys.path, sys.path[:]\n    def restore_sys_path(self, saved_path):\n        sys.path = saved_path[1]\n        sys.path[:] = saved_path[2]\n    def get_sys_path_hooks(self):\n        return id(sys.path_hooks), sys.path_hooks, sys.path_hooks[:]\n    def restore_sys_path_hooks(self, saved_hooks):\n        sys.path_hooks = saved_hooks[1]\n        sys.path_hooks[:] = saved_hooks[2]\n    def get_sys_gettrace(self):\n        return sys.gettrace()\n    def restore_sys_gettrace(self, trace_fxn):\n        sys.settrace(trace_fxn)\n    def get___import__(self):\n        return builtins.__import__\n    def restore___import__(self, import_):\n        builtins.__import__ = import_\n    def get_warnings_filters(self):\n        return id(warnings.filters), warnings.filters, warnings.filters[:]\n    def restore_warnings_filters(self, saved_filters):\n        warnings.filters = saved_filters[1]\n        warnings.filters[:] = saved_filters[2]\n    def get_asyncore_socket_map(self):\n        asyncore = sys.modules.get('asyncore')\n        return asyncore and asyncore.socket_map.copy() or {}\n    def restore_asyncore_socket_map(self, saved_map):\n        asyncore = sys.modules.get('asyncore')\n        if asyncore is not None:\n            asyncore.close_all(ignore_all=True)\n            asyncore.socket_map.update(saved_map)\n    def get_shutil_archive_formats(self):\n        return shutil._ARCHIVE_FORMATS, shutil._ARCHIVE_FORMATS.copy()\n    def restore_shutil_archive_formats(self, saved):\n        shutil._ARCHIVE_FORMATS = saved[0]\n        shutil._ARCHIVE_FORMATS.clear()\n        shutil._ARCHIVE_FORMATS.update(saved[1])\n    def get_shutil_unpack_formats(self):\n        return shutil._UNPACK_FORMATS, shutil._UNPACK_FORMATS.copy()\n    def restore_shutil_unpack_formats(self, saved):\n        shutil._UNPACK_FORMATS = saved[0]\n        shutil._UNPACK_FORMATS.clear()\n        shutil._UNPACK_FORMATS.update(saved[1])\n    def get_logging__handlers(self):\n        return id(logging._handlers), logging._handlers, logging._handlers.copy()\n    def restore_logging__handlers(self, saved_handlers):\n        pass\n    def get_logging__handlerList(self):\n        return id(logging._handlerList), logging._handlerList, logging._handlerList[:]\n    def restore_logging__handlerList(self, saved_handlerList):\n        pass\n    def get_sys_warnoptions(self):\n        return id(sys.warnoptions), sys.warnoptions, sys.warnoptions[:]\n    def restore_sys_warnoptions(self, saved_options):\n        sys.warnoptions = saved_options[1]\n        sys.warnoptions[:] = saved_options[2]\n    def get_threading__dangling(self):\n        if not threading:\n            return None\n        return threading._dangling.copy()\n    def restore_threading__dangling(self, saved):\n        if not threading:\n            return\n        threading._dangling.clear()\n        threading._dangling.update(saved)\n    def get_multiprocessing_process__dangling(self):\n        if not multiprocessing:\n            return None\n        return multiprocessing.process._dangling.copy()\n    def restore_multiprocessing_process__dangling(self, saved):\n        if not multiprocessing:\n            return\n        multiprocessing.process._dangling.clear()\n        multiprocessing.process._dangling.update(saved)\n    def get_sysconfig__CONFIG_VARS(self):\n        sysconfig.get_config_var('prefix')\n        return (id(sysconfig._CONFIG_VARS), sysconfig._CONFIG_VARS,\n                dict(sysconfig._CONFIG_VARS))\n    def restore_sysconfig__CONFIG_VARS(self, saved):\n        sysconfig._CONFIG_VARS = saved[1]\n        sysconfig._CONFIG_VARS.clear()\n        sysconfig._CONFIG_VARS.update(saved[2])\n    def get_sysconfig__INSTALL_SCHEMES(self):\n        return (id(sysconfig._INSTALL_SCHEMES), sysconfig._INSTALL_SCHEMES,\n                sysconfig._INSTALL_SCHEMES.copy())\n    def restore_sysconfig__INSTALL_SCHEMES(self, saved):\n        sysconfig._INSTALL_SCHEMES = saved[1]\n        sysconfig._INSTALL_SCHEMES.clear()\n        sysconfig._INSTALL_SCHEMES.update(saved[2])\n    def get_support_TESTFN(self):\n        if os.path.isfile(support.TESTFN):\n            result = 'f'\n        elif os.path.isdir(support.TESTFN):\n            result = 'd'\n        else:\n            result = None\n        return result\n    def restore_support_TESTFN(self, saved_value):\n        if saved_value is None:\n            if os.path.isfile(support.TESTFN):\n                os.unlink(support.TESTFN)\n            elif os.path.isdir(support.TESTFN):\n                shutil.rmtree(support.TESTFN)\n    def resource_info(self):\n        for name in self.resources:\n            method_suffix = name.replace('.', '_')\n            get_name = 'get_' + method_suffix\n            restore_name = 'restore_' + method_suffix\n            yield name, getattr(self, get_name), getattr(self, restore_name)\n    def __enter__(self):\n        self.saved_values = dict((name, get()) for name, get, restore\n                                                   in self.resource_info())\n        return self\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        saved_values = self.saved_values\n        del self.saved_values\n        for name, get, restore in self.resource_info():\n            current = get()\n            original = saved_values.pop(name)\n            if current != original:\n                self.changed = True\n                restore(original)\n                if not self.quiet:\n                    print(\"Warning -- {} was modified by {}\".format(\n                                                 name, self.testname),\n                                                 file=sys.stderr)\n                    if self.verbose > 1:\n                        print(\"  Before: {}\\n  After:  {} \".format(\n                                                  original, current),\n                                                  file=sys.stderr)\n        return False\ndef runtest_inner(test, verbose, quiet,\n                  huntrleaks=False, debug=False, display_failure=True):\n    support.unload(test)\n    test_time = 0.0\n    refleak = False  # True if the test leaked references.\n    try:\n        if test.startswith('test.'):\n            abstest = test\n        else:\n            abstest = 'test.' + test\n        with saved_test_environment(test, verbose, quiet) as environment:\n            start_time = time.time()\n            the_package = __import__(abstest, globals(), locals(), [])\n            the_module = getattr(the_package, test)\n            test_runner = getattr(the_module, \"test_main\", None)\n            if test_runner is None:\n                tests = unittest.TestLoader().loadTestsFromModule(the_module)\n                test_runner = lambda: support.run_unittest(tests)\n            test_runner()\n            if huntrleaks:\n                refleak = dash_R(the_module, test, test_runner,\n                    huntrleaks)\n            test_time = time.time() - start_time\n    except support.ResourceDenied as msg:\n        if not quiet:\n            print(test, \"skipped --\", msg)\n            sys.stdout.flush()\n        return RESOURCE_DENIED, test_time\n    except unittest.SkipTest as msg:\n        if not quiet:\n            print(test, \"skipped --\", msg)\n            sys.stdout.flush()\n        return SKIPPED, test_time\n    except KeyboardInterrupt:\n        raise\n    except support.TestFailed as msg:\n        if display_failure:\n            print(\"test\", test, \"failed --\", msg, file=sys.stderr)\n        else:\n            print(\"test\", test, \"failed\", file=sys.stderr)\n        sys.stderr.flush()\n        return FAILED, test_time\n    except:\n        msg = traceback.format_exc()\n        print(\"test\", test, \"crashed --\", msg, file=sys.stderr)\n        sys.stderr.flush()\n        return FAILED, test_time\n    else:\n        if refleak:\n            return FAILED, test_time\n        if environment.changed:\n            return ENV_CHANGED, test_time\n        return PASSED, test_time\ndef cleanup_test_droppings(testname, verbose):\n    import shutil\n    import stat\n    import gc\n    gc.collect()\n    for name in (support.TESTFN,\n                 \"db_home\",\n                ):\n        if not os.path.exists(name):\n            continue\n        if os.path.isdir(name):\n            kind, nuker = \"directory\", shutil.rmtree\n        elif os.path.isfile(name):\n            kind, nuker = \"file\", os.unlink\n        else:\n            raise SystemError(\"os.path says %r exists but is neither \"\n                              \"directory nor file\" % name)\n        if verbose:\n            print(\"%r left behind %s %r\" % (testname, kind, name))\n        try:\n            if (hasattr(os, 'chmod')):\n                os.chmod(name, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)\n            nuker(name)\n        except Exception as msg:\n            print((\"%r left behind %s %r and it couldn't be \"\n                \"removed: %s\" % (testname, kind, name, msg)), file=sys.stderr)\ndef dash_R(the_module, test, indirect_test, huntrleaks):\n    \"\"\"Run a test multiple times, looking for reference leaks.\n    Returns:\n        False if the test didn't leak references; True if we detected refleaks.\n    \"\"\"\n    import copyreg\n    import collections.abc\n    if not hasattr(sys, 'gettotalrefcount'):\n        raise Exception(\"Tracking reference leaks requires a debug build \"\n                        \"of Python\")\n    fs = warnings.filters[:]\n    ps = copyreg.dispatch_table.copy()\n    pic = sys.path_importer_cache.copy()\n    try:\n        import zipimport\n    except ImportError:\n        zdc = None # Run unmodified on platforms without zipimport support\n    else:\n        zdc = zipimport._zip_directory_cache.copy()\n    abcs = {}\n    for abc in [getattr(collections.abc, a) for a in collections.abc.__all__]:\n        if not isabstract(abc):\n            continue\n        for obj in abc.__subclasses__() + [abc]:\n            abcs[obj] = obj._abc_registry.copy()\n    if indirect_test:\n        def run_the_test():\n            indirect_test()\n    else:\n        def run_the_test():\n            del sys.modules[the_module.__name__]\n            exec('import ' + the_module.__name__)\n    deltas = []\n    nwarmup, ntracked, fname = huntrleaks\n    fname = os.path.join(support.SAVEDCWD, fname)\n    repcount = nwarmup + ntracked\n    print(\"beginning\", repcount, \"repetitions\", file=sys.stderr)\n    print((\"1234567890\"*(repcount//10 + 1))[:repcount], file=sys.stderr)\n    sys.stderr.flush()\n    dash_R_cleanup(fs, ps, pic, zdc, abcs)\n    for i in range(repcount):\n        rc_before = sys.gettotalrefcount()\n        run_the_test()\n        sys.stderr.write('.')\n        sys.stderr.flush()\n        dash_R_cleanup(fs, ps, pic, zdc, abcs)\n        rc_after = sys.gettotalrefcount()\n        if i >= nwarmup:\n            deltas.append(rc_after - rc_before)\n    print(file=sys.stderr)\n    if any(deltas):\n        msg = '%s leaked %s references, sum=%s' % (test, deltas, sum(deltas))\n        print(msg, file=sys.stderr)\n        sys.stderr.flush()\n        with open(fname, \"a\") as refrep:\n            print(msg, file=refrep)\n            refrep.flush()\n        return True\n    return False\ndef dash_R_cleanup(fs, ps, pic, zdc, abcs):\n    import gc, copyreg\n    import _strptime, linecache\n    import urllib.parse, urllib.request, mimetypes, doctest\n    import struct, filecmp, collections.abc\n    from distutils.dir_util import _path_created\n    from weakref import WeakSet\n    for mod in sys.modules.values():\n        if hasattr(mod, '__warningregistry__'):\n            del mod.__warningregistry__\n    warnings.filters[:] = fs\n    copyreg.dispatch_table.clear()\n    copyreg.dispatch_table.update(ps)\n    sys.path_importer_cache.clear()\n    sys.path_importer_cache.update(pic)\n    try:\n        import zipimport\n    except ImportError:\n        pass # Run unmodified on platforms without zipimport support\n    else:\n        zipimport._zip_directory_cache.clear()\n        zipimport._zip_directory_cache.update(zdc)\n    sys._clear_type_cache()\n    for abc in [getattr(collections.abc, a) for a in collections.abc.__all__]:\n        if not isabstract(abc):\n            continue\n        for obj in abc.__subclasses__() + [abc]:\n            obj._abc_registry = abcs.get(obj, WeakSet()).copy()\n            obj._abc_cache.clear()\n            obj._abc_negative_cache.clear()\n    for stream in (sys.stdout, sys.stderr, sys.__stdout__, sys.__stderr__):\n        if stream is not None:\n            stream.flush()\n    _path_created.clear()\n    re.purge()\n    _strptime._regex_cache.clear()\n    urllib.parse.clear_cache()\n    urllib.request.urlcleanup()\n    linecache.clearcache()\n    mimetypes._default_mime_types()\n    filecmp._cache.clear()\n    struct._clearcache()\n    doctest.master = None\n    try:\n        import ctypes\n    except ImportError:\n        pass\n    else:\n        ctypes._reset_cache()\n    gc.collect()\ndef warm_caches():\n    s = bytes(range(256))\n    for i in range(256):\n        s[i:i+1]\n    x = [chr(i) for i in range(256)]\n    x = list(range(-5, 257))\ndef findtestdir(path=None):\n    return path or os.path.dirname(__file__) or os.curdir\ndef removepy(names):\n    if not names:\n        return\n    for idx, name in enumerate(names):\n        basename, ext = os.path.splitext(name)\n        if ext == '.py':\n            names[idx] = basename\ndef count(n, word):\n    if n == 1:\n        return \"%d %s\" % (n, word)\n    else:\n        return \"%d %ss\" % (n, word)\ndef printlist(x, width=70, indent=4):\n    \"\"\"Print the elements of iterable x to stdout.\n    Optional arg width (default 70) is the maximum line length.\n    Optional arg indent (default 4) is the number of blanks with which to\n    begin each line.\n    \"\"\"\n    from textwrap import fill\n    blanks = ' ' * indent\n    print(fill(' '.join(str(elt) for elt in sorted(x)), width,\n               initial_indent=blanks, subsequent_indent=blanks))\n_expectations = (\n    ('win32',\n        \"\"\"\n        test__locale\n        test_crypt\n        test_curses\n        test_dbm\n        test_devpoll\n        test_fcntl\n        test_fork1\n        test_epoll\n        test_dbm_gnu\n        test_dbm_ndbm\n        test_grp\n        test_ioctl\n        test_largefile\n        test_kqueue\n        test_openpty\n        test_ossaudiodev\n        test_pipes\n        test_poll\n        test_posix\n        test_pty\n        test_pwd\n        test_resource\n        test_signal\n        test_syslog\n        test_threadsignals\n        test_wait3\n        test_wait4\n        \"\"\"),\n    ('linux',\n        \"\"\"\n        test_curses\n        test_devpoll\n        test_largefile\n        test_kqueue\n        test_ossaudiodev\n        \"\"\"),\n    ('unixware',\n        \"\"\"\n        test_epoll\n        test_largefile\n        test_kqueue\n        test_minidom\n        test_openpty\n        test_pyexpat\n        test_sax\n        test_sundry\n        \"\"\"),\n    ('openunix',\n        \"\"\"\n        test_epoll\n        test_largefile\n        test_kqueue\n        test_minidom\n        test_openpty\n        test_pyexpat\n        test_sax\n        test_sundry\n        \"\"\"),\n    ('sco_sv',\n        \"\"\"\n        test_asynchat\n        test_fork1\n        test_epoll\n        test_gettext\n        test_largefile\n        test_locale\n        test_kqueue\n        test_minidom\n        test_openpty\n        test_pyexpat\n        test_queue\n        test_sax\n        test_sundry\n        test_thread\n        test_threaded_import\n        test_threadedtempfile\n        test_threading\n        \"\"\"),\n    ('darwin',\n        \"\"\"\n        test__locale\n        test_curses\n        test_devpoll\n        test_epoll\n        test_dbm_gnu\n        test_gdb\n        test_largefile\n        test_locale\n        test_minidom\n        test_ossaudiodev\n        test_poll\n        \"\"\"),\n    ('sunos',\n        \"\"\"\n        test_curses\n        test_dbm\n        test_epoll\n        test_kqueue\n        test_dbm_gnu\n        test_gzip\n        test_openpty\n        test_zipfile\n        test_zlib\n        \"\"\"),\n    ('hp-ux',\n        \"\"\"\n        test_curses\n        test_epoll\n        test_dbm_gnu\n        test_gzip\n        test_largefile\n        test_locale\n        test_kqueue\n        test_minidom\n        test_openpty\n        test_pyexpat\n        test_sax\n        test_zipfile\n        test_zlib\n        \"\"\"),\n    ('cygwin',\n        \"\"\"\n        test_curses\n        test_dbm\n        test_devpoll\n        test_epoll\n        test_ioctl\n        test_kqueue\n        test_largefile\n        test_locale\n        test_ossaudiodev\n        test_socketserver\n        \"\"\"),\n    ('os2emx',\n        \"\"\"\n        test_audioop\n        test_curses\n        test_epoll\n        test_kqueue\n        test_largefile\n        test_mmap\n        test_openpty\n        test_ossaudiodev\n        test_pty\n        test_resource\n        test_signal\n        \"\"\"),\n    ('freebsd',\n        \"\"\"\n        test_devpoll\n        test_epoll\n        test_dbm_gnu\n        test_locale\n        test_ossaudiodev\n        test_pep277\n        test_pty\n        test_socketserver\n        test_tcl\n        test_tk\n        test_ttk_guionly\n        test_ttk_textonly\n        test_timeout\n        test_urllibnet\n        test_multiprocessing\n        \"\"\"),\n    ('aix',\n        \"\"\"\n        test_bz2\n        test_epoll\n        test_dbm_gnu\n        test_gzip\n        test_kqueue\n        test_ossaudiodev\n        test_tcl\n        test_tk\n        test_ttk_guionly\n        test_ttk_textonly\n        test_zipimport\n        test_zlib\n        \"\"\"),\n    ('openbsd',\n        \"\"\"\n        test_ctypes\n        test_devpoll\n        test_epoll\n        test_dbm_gnu\n        test_locale\n        test_normalization\n        test_ossaudiodev\n        test_pep277\n        test_tcl\n        test_tk\n        test_ttk_guionly\n        test_ttk_textonly\n        test_multiprocessing\n        \"\"\"),\n    ('netbsd',\n        \"\"\"\n        test_ctypes\n        test_curses\n        test_devpoll\n        test_epoll\n        test_dbm_gnu\n        test_locale\n        test_ossaudiodev\n        test_pep277\n        test_tcl\n        test_tk\n        test_ttk_guionly\n        test_ttk_textonly\n        test_multiprocessing\n        \"\"\"),\n)\nclass _ExpectedSkips:\n    def __init__(self):\n        import os.path\n        from test import test_timeout\n        self.valid = False\n        expected = None\n        for item in _expectations:\n            if sys.platform.startswith(item[0]):\n                expected = item[1]\n                break\n        if expected is not None:\n            self.expected = set(expected.split())\n            self.expected.add('test_nis')\n            if not os.path.supports_unicode_filenames:\n                self.expected.add('test_pep277')\n            encs = (\"utf-8\", \"latin-1\", \"ascii\", \"mbcs\", \"utf-16\", \"utf-32\")\n            if sys.getfilesystemencoding().lower() not in encs:\n                self.expected.add('test_profile')\n                self.expected.add('test_cProfile')\n                self.expected.add('test_doctest')\n            if test_timeout.skip_expected:\n                self.expected.add('test_timeout')\n            if sys.platform != \"win32\":\n                WIN_ONLY = {\"test_unicode_file\", \"test_winreg\",\n                            \"test_winsound\", \"test_startfile\",\n                            \"test_sqlite\", \"test_msilib\"}\n                self.expected |= WIN_ONLY\n            if sys.platform != 'sunos5':\n                self.expected.add('test_nis')\n            if support.python_is_optimized():\n                self.expected.add(\"test_gdb\")\n            self.valid = True\n    def isvalid(self):\n        \"Return true iff _ExpectedSkips knows about the current platform.\"\n        return self.valid\n    def getexpected(self):\n        \"\"\"Return set of test names we expect to skip on current platform.\n        self.isvalid() must be true.\n        \"\"\"\n        assert self.isvalid()\n        return self.expected\ndef _make_temp_dir_for_build(TEMPDIR):\n    if sysconfig.is_python_build():\n        TEMPDIR = os.path.join(sysconfig.get_config_var('srcdir'), 'build')\n        TEMPDIR = os.path.abspath(TEMPDIR)\n        try:\n            os.mkdir(TEMPDIR)\n        except FileExistsError:\n            pass\n    TESTCWD = 'test_python_{}'.format(os.getpid())\n    TESTCWD = os.path.join(TEMPDIR, TESTCWD)\n    return TEMPDIR, TESTCWD\nif __name__ == '__main__':\n    mydir = os.path.abspath(os.path.normpath(os.path.dirname(sys.argv[0])))\n    i = len(sys.path)\n    while i >= 0:\n        i -= 1\n        if os.path.abspath(os.path.normpath(sys.path[i])) == mydir:\n            del sys.path[i]\n    __file__ = os.path.abspath(__file__)\n    assert __file__ == os.path.abspath(sys.argv[0])\n    TEMPDIR, TESTCWD = _make_temp_dir_for_build(TEMPDIR)\n    with support.temp_cwd(TESTCWD, quiet=True):\n        main()\n", "/libs/hashlib.js": "$module=(function($B){var __builtins__=$B.builtins;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");$mod={__getattr__:function(attr){if(attr=='new')return $hashlib_new;return this[attr];},md5:function(){return $hashlib_new('md5');},sha1:function(){return $hashlib_new('sha1');},sha224:function(){return $hashlib_new('sha224');},sha256:function(){return $hashlib_new('sha256');},sha384:function(){return $hashlib_new('sha384');},sha512:function(){return $hashlib_new('sha512');},algorithms_guaranteed:['md5','sha1','sha224','sha256','sha384','sha512'],algorithms_available:['md5','sha1','sha224','sha256','sha384','sha512']};function $get_CryptoJS_lib(alg){var imp=$importer();var $xmlhttp=imp[0],fake_qs=imp[1],timer=imp[2],res=null;$xmlhttp.onreadystatechange=function(){if($xmlhttp.readyState==4){window.clearTimeout(timer);if($xmlhttp.status==200||$xmlhttp.status==0)res=$xmlhttp.responseText;else{res=Error();res.name='NotFoundError';res.message=\"No CryptoJS lib named '\"+alg+\"'\";}}};$xmlhttp.open('GET',$B.brython_path+'libs/crypto_js/rollups/'+alg+'.js'+fake_qs,false);if('overrideMimeType' in $xmlhttp)$xmlhttp.overrideMimeType(\"text/plain\");$xmlhttp.send();if(res.constructor===Error)throw res;try{eval(res+\"; $B.CryptoJS=CryptoJS;\");}catch(err){throw Error(\"JS Eval Error\",\"Cannot eval CryptoJS algorithm '\"+alg+\"' : error:\"+err);}}function $hashlib_new(alg){if(alg=='md5'){if($B.Crypto===undefined||$B.CryptoJS.algo.MD5===undefined)$get_CryptoJS_lib('md5');this.hash=$B.CryptoJS.algo.MD5.create();}else if(alg=='sha1'){if($B.Crypto===undefined||$B.CryptoJS.algo.SHA1===undefined)$get_CryptoJS_lib('sha1');this.hash=$B.CryptoJS.algo.SHA1.create();}else if(alg=='sha224'){if($B.Crypto===undefined||$B.CryptoJS.algo.SHA224===undefined)$get_CryptoJS_lib('sha224');this.hash=$B.CryptoJS.algo.SHA224.create();}else if(alg=='sha256'){if($B.Crypto===undefined||$B.CryptoJS.algo.SHA256===undefined)$get_CryptoJS_lib('sha256');this.hash=$B.CryptoJS.algo.SHA256.create();}else if(alg=='sha384'){if($B.Crypto===undefined||$B.CryptoJS.algo.SHA384===undefined)$get_CryptoJS_lib('sha384');this.hash=$B.CryptoJS.algo.SHA384.create();}else if(alg=='sha512'){if($B.Crypto===undefined||$B.CryptoJS.algo.SHA512===undefined)$get_CryptoJS_lib('sha512');this.hash=$B.CryptoJS.algo.SHA512.create();}else $raise('AttributeError','Invalid hash algorithm:'+alg);this.__class__=__BRYTHON__.$type;this.__getattr__=function(attr){return $getattr(this,attr);};this.__str__=function(){return this.hexdigest();};this.update=function(msg){this.hash.update(msg);};this.copy=function(){return this.hash.clone();};this.hexdigest=function(){var temp=this.hash.clone();temp=temp.finalize();return temp.toString();};return this;}return $mod;})(__BRYTHON__);", "/Lib/types.py": "\"\"\"\nDefine names for built-in types that aren't directly accessible as a builtin.\n\"\"\"\nimport sys\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\nModuleType = type(sys)\ndef foo():pass\nFunctionType = type(foo)\n", "/Lib/importlib/abc.py": "\"\"\"Abstract base classes related to import.\"\"\"\r\nfrom . import _bootstrap\r\nfrom . import machinery\r\ntry:\r\n    import _frozen_importlib\r\nexcept ImportError as exc:\r\n    if exc.name != '_frozen_importlib':\r\n        raise\r\n    _frozen_importlib = None\r\nimport abc\r\nimport imp\r\nimport marshal\r\nimport sys\r\nimport tokenize\r\nimport warnings\r\ndef _register(abstract_cls, *classes):\r\n    for cls in classes:\r\n        abstract_cls.register(cls)\r\n        if _frozen_importlib is not None:\r\n            frozen_cls = getattr(_frozen_importlib, cls.__name__)\r\n            abstract_cls.register(frozen_cls)\r\nclass Finder(metaclass=abc.ABCMeta):\r\n    \"\"\"Legacy abstract base class for import finders.\r\n    It may be subclassed for compatibility with legacy third party\r\n    reimplementations of the import system.  Otherwise, finder\r\n    implementations should derive from the more specific MetaPathFinder\r\n    or PathEntryFinder ABCs.\r\n    \"\"\"\r\n    @abc.abstractmethod\r\n    def find_module(self, fullname, path=None):\r\n        \"\"\"An abstract method that should find a module.\r\n        The fullname is a str and the optional path is a str or None.\r\n        Returns a Loader object.\r\n        \"\"\"\r\n        raise NotImplementedError\r\nclass MetaPathFinder(Finder):\r\n    \"\"\"Abstract base class for import finders on sys.meta_path.\"\"\"\r\n    @abc.abstractmethod\r\n    def find_module(self, fullname, path):\r\n        \"\"\"Abstract method which, when implemented, should find a module.\r\n        The fullname is a str and the path is a str or None.\r\n        Returns a Loader object.\r\n        \"\"\"\r\n        raise NotImplementedError\r\n    def invalidate_caches(self):\r\n        \"\"\"An optional method for clearing the finder's cache, if any.\r\n        This method is used by importlib.invalidate_caches().\r\n        \"\"\"\r\n        return NotImplemented\r\n_register(MetaPathFinder, machinery.BuiltinImporter, machinery.FrozenImporter,\r\n          machinery.PathFinder, machinery.WindowsRegistryFinder)\r\nclass PathEntryFinder(Finder):\r\n    \"\"\"Abstract base class for path entry finders used by PathFinder.\"\"\"\r\n    @abc.abstractmethod\r\n    def find_loader(self, fullname):\r\n        \"\"\"Abstract method which, when implemented, returns a module loader.\r\n        The fullname is a str.  Returns a 2-tuple of (Loader, portion) where\r\n        portion is a sequence of file system locations contributing to part of\r\n        a namespace package.  The sequence may be empty and the loader may be\r\n        None.\r\n        \"\"\"\r\n        raise NotImplementedError\r\n    find_module = _bootstrap._find_module_shim\r\n    def invalidate_caches(self):\r\n        \"\"\"An optional method for clearing the finder's cache, if any.\r\n        This method is used by PathFinder.invalidate_caches().\r\n        \"\"\"\r\n        return NotImplemented\r\n_register(PathEntryFinder, machinery.FileFinder)\r\nclass Loader(metaclass=abc.ABCMeta):\r\n    \"\"\"Abstract base class for import loaders.\"\"\"\r\n    @abc.abstractmethod\r\n    def load_module(self, fullname):\r\n        \"\"\"Abstract method which when implemented should load a module.\r\n        The fullname is a str.\"\"\"\r\n        raise NotImplementedError\r\n    @abc.abstractmethod\r\n    def module_repr(self, module):\r\n        \"\"\"Abstract method which when implemented calculates and returns the\r\n        given module's repr.\"\"\"\r\n        raise NotImplementedError\r\nclass ResourceLoader(Loader):\r\n    \"\"\"Abstract base class for loaders which can return data from their\r\n    back-end storage.\r\n    This ABC represents one of the optional protocols specified by PEP 302.\r\n    \"\"\"\r\n    @abc.abstractmethod\r\n    def get_data(self, path):\r\n        \"\"\"Abstract method which when implemented should return the bytes for\r\n        the specified path.  The path must be a str.\"\"\"\r\n        raise NotImplementedError\r\nclass InspectLoader(Loader):\r\n    \"\"\"Abstract base class for loaders which support inspection about the\r\n    modules they can load.\r\n    This ABC represents one of the optional protocols specified by PEP 302.\r\n    \"\"\"\r\n    @abc.abstractmethod\r\n    def is_package(self, fullname):\r\n        \"\"\"Abstract method which when implemented should return whether the\r\n        module is a package.  The fullname is a str.  Returns a bool.\"\"\"\r\n        raise NotImplementedError\r\n    @abc.abstractmethod\r\n    def get_code(self, fullname):\r\n        \"\"\"Abstract method which when implemented should return the code object\r\n        for the module.  The fullname is a str.  Returns a types.CodeType.\"\"\"\r\n        raise NotImplementedError\r\n    @abc.abstractmethod\r\n    def get_source(self, fullname):\r\n        \"\"\"Abstract method which should return the source code for the\r\n        module.  The fullname is a str.  Returns a str.\"\"\"\r\n        raise NotImplementedError\r\n_register(InspectLoader, machinery.BuiltinImporter, machinery.FrozenImporter,\r\n            machinery.ExtensionFileLoader)\r\nclass ExecutionLoader(InspectLoader):\r\n    \"\"\"Abstract base class for loaders that wish to support the execution of\r\n    modules as scripts.\r\n    This ABC represents one of the optional protocols specified in PEP 302.\r\n    \"\"\"\r\n    @abc.abstractmethod\r\n    def get_filename(self, fullname):\r\n        \"\"\"Abstract method which should return the value that __file__ is to be\r\n        set to.\"\"\"\r\n        raise NotImplementedError\r\nclass FileLoader(_bootstrap.FileLoader, ResourceLoader, ExecutionLoader):\r\n    \"\"\"Abstract base class partially implementing the ResourceLoader and\r\n    ExecutionLoader ABCs.\"\"\"\r\n_register(FileLoader, machinery.SourceFileLoader,\r\n            machinery.SourcelessFileLoader)\r\nclass SourceLoader(_bootstrap.SourceLoader, ResourceLoader, ExecutionLoader):\r\n    \"\"\"Abstract base class for loading source code (and optionally any\r\n    corresponding bytecode).\r\n    To support loading from source code, the abstractmethods inherited from\r\n    ResourceLoader and ExecutionLoader need to be implemented. To also support\r\n    loading from bytecode, the optional methods specified directly by this ABC\r\n    is required.\r\n    Inherited abstractmethods not implemented in this ABC:\r\n        * ResourceLoader.get_data\r\n        * ExecutionLoader.get_filename\r\n    \"\"\"\r\n    def path_mtime(self, path):\r\n        \"\"\"Return the (int) modification time for the path (str).\"\"\"\r\n        if self.path_stats.__func__ is SourceLoader.path_stats:\r\n            raise NotImplementedError\r\n        return int(self.path_stats(path)['mtime'])\r\n    def path_stats(self, path):\r\n        \"\"\"Return a metadata dict for the source pointed to by the path (str).\r\n        Possible keys:\r\n        - 'mtime' (mandatory) is the numeric timestamp of last source\r\n          code modification;\r\n        - 'size' (optional) is the size in bytes of the source code.\r\n        \"\"\"\r\n        if self.path_mtime.__func__ is SourceLoader.path_mtime:\r\n            raise NotImplementedError\r\n        return {'mtime': self.path_mtime(path)}\r\n    def set_data(self, path, data):\r\n        \"\"\"Write the bytes to the path (if possible).\r\n        Accepts a str path and data as bytes.\r\n        Any needed intermediary directories are to be created. If for some\r\n        reason the file cannot be written because of permissions, fail\r\n        silently.\r\n        \"\"\"\r\n        raise NotImplementedError\r\n_register(SourceLoader, machinery.SourceFileLoader)\r\nclass PyLoader(SourceLoader):\r\n    \"\"\"Implement the deprecated PyLoader ABC in terms of SourceLoader.\r\n    This class has been deprecated! It is slated for removal in Python 3.4.\r\n    If compatibility with Python 3.1 is not needed then implement the\r\n    SourceLoader ABC instead of this class. If Python 3.1 compatibility is\r\n    needed, then use the following idiom to have a single class that is\r\n    compatible with Python 3.1 onwards::\r\n        try:\r\n            from importlib.abc import SourceLoader\r\n        except ImportError:\r\n            from importlib.abc import PyLoader as SourceLoader\r\n        class CustomLoader(SourceLoader):\r\n            def get_filename(self, fullname):\r\n            def source_path(self, fullname):\r\n                '''Implement source_path in terms of get_filename.'''\r\n                try:\r\n                    return self.get_filename(fullname)\r\n                except ImportError:\r\n                    return None\r\n            def is_package(self, fullname):\r\n                filename = os.path.basename(self.get_filename(fullname))\r\n                return os.path.splitext(filename)[0] == '__init__'\r\n    \"\"\"\r\n    @abc.abstractmethod\r\n    def is_package(self, fullname):\r\n        raise NotImplementedError\r\n    @abc.abstractmethod\r\n    def source_path(self, fullname):\r\n        \"\"\"Abstract method.  Accepts a str module name and returns the path to\r\n        the source code for the module.\"\"\"\r\n        raise NotImplementedError\r\n    def get_filename(self, fullname):\r\n        \"\"\"Implement get_filename in terms of source_path.\r\n        As get_filename should only return a source file path there is no\r\n        chance of the path not existing but loading still being possible, so\r\n        ImportError should propagate instead of being turned into returning\r\n        None.\r\n        \"\"\"\r\n        warnings.warn(\"importlib.abc.PyLoader is deprecated and is \"\r\n                            \"slated for removal in Python 3.4; \"\r\n                            \"use SourceLoader instead. \"\r\n                            \"See the importlib documentation on how to be \"\r\n                            \"compatible with Python 3.1 onwards.\",\r\n                        DeprecationWarning)\r\n        path = self.source_path(fullname)\r\n        if path is None:\r\n            raise ImportError(name=fullname)\r\n        else:\r\n            return path\r\nclass PyPycLoader(PyLoader):\r\n    \"\"\"Abstract base class to assist in loading source and bytecode by\r\n    requiring only back-end storage methods to be implemented.\r\n    This class has been deprecated! Removal is slated for Python 3.4. Implement\r\n    the SourceLoader ABC instead. If Python 3.1 compatibility is needed, see\r\n    PyLoader.\r\n    The methods get_code, get_source, and load_module are implemented for the\r\n    user.\r\n    \"\"\"\r\n    def get_filename(self, fullname):\r\n        \"\"\"Return the source or bytecode file path.\"\"\"\r\n        path = self.source_path(fullname)\r\n        if path is not None:\r\n            return path\r\n        path = self.bytecode_path(fullname)\r\n        if path is not None:\r\n            return path\r\n        raise ImportError(\"no source or bytecode path available for \"\r\n                            \"{0!r}\".format(fullname), name=fullname)\r\n    def get_code(self, fullname):\r\n        \"\"\"Get a code object from source or bytecode.\"\"\"\r\n        warnings.warn(\"importlib.abc.PyPycLoader is deprecated and slated for \"\r\n                            \"removal in Python 3.4; use SourceLoader instead. \"\r\n                            \"If Python 3.1 compatibility is required, see the \"\r\n                            \"latest documentation for PyLoader.\",\r\n                        DeprecationWarning)\r\n        source_timestamp = self.source_mtime(fullname)\r\n        bytecode_path = self.bytecode_path(fullname)\r\n        if bytecode_path:\r\n            data = self.get_data(bytecode_path)\r\n            try:\r\n                magic = data[:4]\r\n                if len(magic) < 4:\r\n                    raise ImportError(\r\n                        \"bad magic number in {}\".format(fullname),\r\n                        name=fullname, path=bytecode_path)\r\n                raw_timestamp = data[4:8]\r\n                if len(raw_timestamp) < 4:\r\n                    raise EOFError(\"bad timestamp in {}\".format(fullname))\r\n                pyc_timestamp = _bootstrap._r_long(raw_timestamp)\r\n                raw_source_size = data[8:12]\r\n                if len(raw_source_size) != 4:\r\n                    raise EOFError(\"bad file size in {}\".format(fullname))\r\n                bytecode = data[12:]\r\n                if imp.get_magic() != magic:\r\n                    raise ImportError(\r\n                        \"bad magic number in {}\".format(fullname),\r\n                        name=fullname, path=bytecode_path)\r\n                if source_timestamp:\r\n                    if pyc_timestamp < source_timestamp:\r\n                        raise ImportError(\"bytecode is stale\", name=fullname,\r\n                                          path=bytecode_path)\r\n            except (ImportError, EOFError):\r\n                if source_timestamp is not None:\r\n                    pass\r\n                else:\r\n                    raise\r\n            else:\r\n                return marshal.loads(bytecode)\r\n        elif source_timestamp is None:\r\n            raise ImportError(\"no source or bytecode available to create code \"\r\n                              \"object for {0!r}\".format(fullname),\r\n                              name=fullname)\r\n        source_path = self.source_path(fullname)\r\n        if source_path is None:\r\n            message = \"a source path must exist to load {0}\".format(fullname)\r\n            raise ImportError(message, name=fullname)\r\n        source = self.get_data(source_path)\r\n        code_object = compile(source, source_path, 'exec', dont_inherit=True)\r\n        if not sys.dont_write_bytecode:\r\n            data = bytearray(imp.get_magic())\r\n            data.extend(_bootstrap._w_long(source_timestamp))\r\n            data.extend(_bootstrap._w_long(len(source) & 0xFFFFFFFF))\r\n            data.extend(marshal.dumps(code_object))\r\n            self.write_bytecode(fullname, data)\r\n        return code_object\r\n    @abc.abstractmethod\r\n    def source_mtime(self, fullname):\r\n        \"\"\"Abstract method. Accepts a str filename and returns an int\r\n        modification time for the source of the module.\"\"\"\r\n        raise NotImplementedError\r\n    @abc.abstractmethod\r\n    def bytecode_path(self, fullname):\r\n        \"\"\"Abstract method. Accepts a str filename and returns the str pathname\r\n        to the bytecode for the module.\"\"\"\r\n        raise NotImplementedError\r\n    @abc.abstractmethod\r\n    def write_bytecode(self, fullname, bytecode):\r\n        \"\"\"Abstract method.  Accepts a str filename and bytes object\r\n        representing the bytecode for the module.  Returns a boolean\r\n        representing whether the bytecode was written or not.\"\"\"\r\n        raise NotImplementedError\r\n", "/Lib/sre_compile.py": "\"\"\"Internal support module for sre\"\"\"\nimport _sre, sys\nimport sre_parse\nfrom sre_constants import *\nfrom _sre import MAXREPEAT\nassert _sre.MAGIC == MAGIC, \"SRE module mismatch\"\nif _sre.CODESIZE == 2:\n    MAXCODE = 65535\nelse:\n    MAXCODE = 0xFFFFFFFF\ndef _identityfunction(x):\n    return x\n_LITERAL_CODES = set([LITERAL, NOT_LITERAL])\n_REPEATING_CODES = set([REPEAT, MIN_REPEAT, MAX_REPEAT])\n_SUCCESS_CODES = set([SUCCESS, FAILURE])\n_ASSERT_CODES = set([ASSERT, ASSERT_NOT])\ndef _compile(code, pattern, flags):\n    emit = code.append\n    _len = len\n    LITERAL_CODES = _LITERAL_CODES\n    REPEATING_CODES = _REPEATING_CODES\n    SUCCESS_CODES = _SUCCESS_CODES\n    ASSERT_CODES = _ASSERT_CODES\n    for op, av in pattern:\n        if op in LITERAL_CODES:\n            if flags & SRE_FLAG_IGNORECASE:\n                emit(OPCODES[OP_IGNORE[op]])\n                emit(_sre.getlower(av, flags))\n            else:\n                emit(OPCODES[op])\n                emit(av)\n        elif op is IN:\n            if flags & SRE_FLAG_IGNORECASE:\n                emit(OPCODES[OP_IGNORE[op]])\n                def fixup(literal, flags=flags):\n                    return _sre.getlower(literal, flags)\n            else:\n                emit(OPCODES[op])\n                fixup = _identityfunction\n            skip = _len(code); emit(0)\n            _compile_charset(av, flags, code, fixup)\n            code[skip] = _len(code) - skip\n        elif op is ANY:\n            if flags & SRE_FLAG_DOTALL:\n                emit(OPCODES[ANY_ALL])\n            else:\n                emit(OPCODES[ANY])\n        elif op in REPEATING_CODES:\n            if flags & SRE_FLAG_TEMPLATE:\n                raise error(\"internal: unsupported template operator\")\n                emit(OPCODES[REPEAT])\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                emit(OPCODES[SUCCESS])\n                code[skip] = _len(code) - skip\n            elif _simple(av) and op is not REPEAT:\n                if op is MAX_REPEAT:\n                    emit(OPCODES[REPEAT_ONE])\n                else:\n                    emit(OPCODES[MIN_REPEAT_ONE])\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                emit(OPCODES[SUCCESS])\n                code[skip] = _len(code) - skip\n            else:\n                emit(OPCODES[REPEAT])\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                code[skip] = _len(code) - skip\n                if op is MAX_REPEAT:\n                    emit(OPCODES[MAX_UNTIL])\n                else:\n                    emit(OPCODES[MIN_UNTIL])\n        elif op is SUBPATTERN:\n            if av[0]:\n                emit(OPCODES[MARK])\n                emit((av[0]-1)*2)\n            _compile(code, av[1], flags)\n            if av[0]:\n                emit(OPCODES[MARK])\n                emit((av[0]-1)*2+1)\n        elif op in SUCCESS_CODES:\n            emit(OPCODES[op])\n        elif op in ASSERT_CODES:\n            emit(OPCODES[op])\n            skip = _len(code); emit(0)\n            if av[0] >= 0:\n                emit(0) # look ahead\n            else:\n                lo, hi = av[1].getwidth()\n                if lo != hi:\n                    raise error(\"look-behind requires fixed-width pattern\")\n                emit(lo) # look behind\n            _compile(code, av[1], flags)\n            emit(OPCODES[SUCCESS])\n            code[skip] = _len(code) - skip\n        elif op is CALL:\n            emit(OPCODES[op])\n            skip = _len(code); emit(0)\n            _compile(code, av, flags)\n            emit(OPCODES[SUCCESS])\n            code[skip] = _len(code) - skip\n        elif op is AT:\n            emit(OPCODES[op])\n            if flags & SRE_FLAG_MULTILINE:\n                av = AT_MULTILINE.get(av, av)\n            if flags & SRE_FLAG_LOCALE:\n                av = AT_LOCALE.get(av, av)\n            elif flags & SRE_FLAG_UNICODE:\n                av = AT_UNICODE.get(av, av)\n            emit(ATCODES[av])\n        elif op is BRANCH:\n            emit(OPCODES[op])\n            tail = []\n            tailappend = tail.append\n            for av in av[1]:\n                skip = _len(code); emit(0)\n                _compile(code, av, flags)\n                emit(OPCODES[JUMP])\n                tailappend(_len(code)); emit(0)\n                code[skip] = _len(code) - skip\n            emit(0) # end of branch\n            for tail in tail:\n                code[tail] = _len(code) - tail\n        elif op is CATEGORY:\n            emit(OPCODES[op])\n            if flags & SRE_FLAG_LOCALE:\n                av = CH_LOCALE[av]\n            elif flags & SRE_FLAG_UNICODE:\n                av = CH_UNICODE[av]\n            emit(CHCODES[av])\n        elif op is GROUPREF:\n            if flags & SRE_FLAG_IGNORECASE:\n                emit(OPCODES[OP_IGNORE[op]])\n            else:\n                emit(OPCODES[op])\n            emit(av-1)\n        elif op is GROUPREF_EXISTS:\n            emit(OPCODES[op])\n            emit(av[0]-1)\n            skipyes = _len(code); emit(0)\n            _compile(code, av[1], flags)\n            if av[2]:\n                emit(OPCODES[JUMP])\n                skipno = _len(code); emit(0)\n                code[skipyes] = _len(code) - skipyes + 1\n                _compile(code, av[2], flags)\n                code[skipno] = _len(code) - skipno\n            else:\n                code[skipyes] = _len(code) - skipyes + 1\n        else:\n            raise ValueError(\"unsupported operand type\", op)\ndef _compile_charset(charset, flags, code, fixup=None):\n    emit = code.append\n    if fixup is None:\n        fixup = _identityfunction\n    for op, av in _optimize_charset(charset, fixup):\n        emit(OPCODES[op])\n        if op is NEGATE:\n            pass\n        elif op is LITERAL:\n            emit(fixup(av))\n        elif op is RANGE:\n            emit(fixup(av[0]))\n            emit(fixup(av[1]))\n        elif op is CHARSET:\n            code.extend(av)\n        elif op is BIGCHARSET:\n            code.extend(av)\n        elif op is CATEGORY:\n            if flags & SRE_FLAG_LOCALE:\n                emit(CHCODES[CH_LOCALE[av]])\n            elif flags & SRE_FLAG_UNICODE:\n                emit(CHCODES[CH_UNICODE[av]])\n            else:\n                emit(CHCODES[av])\n        else:\n            raise error(\"internal: unsupported set operator\")\n    emit(OPCODES[FAILURE])\ndef _optimize_charset(charset, fixup):\n    out = []\n    outappend = out.append\n    charmap = [0]*256\n    try:\n        for op, av in charset:\n            if op is NEGATE:\n                outappend((op, av))\n            elif op is LITERAL:\n                charmap[fixup(av)] = 1\n            elif op is RANGE:\n                for i in range(fixup(av[0]), fixup(av[1])+1):\n                    charmap[i] = 1\n            elif op is CATEGORY:\n                return charset # cannot compress\n    except IndexError:\n        return _optimize_unicode(charset, fixup)\n    i = p = n = 0\n    runs = []\n    runsappend = runs.append\n    for c in charmap:\n        if c:\n            if n == 0:\n                p = i\n            n = n + 1\n        elif n:\n            runsappend((p, n))\n            n = 0\n        i = i + 1\n    if n:\n        runsappend((p, n))\n    if len(runs) <= 2:\n        for p, n in runs:\n            if n == 1:\n                outappend((LITERAL, p))\n            else:\n                outappend((RANGE, (p, p+n-1)))\n        if len(out) < len(charset):\n            return out\n    else:\n        data = _mk_bitmap(charmap)\n        outappend((CHARSET, data))\n        return out\n    return charset\ndef _mk_bitmap(bits):\n    data = []\n    dataappend = data.append\n    if _sre.CODESIZE == 2:\n        start = (1, 0)\n    else:\n        start = (1, 0)\n    m, v = start\n    for c in bits:\n        if c:\n            v = v + m\n        m = m + m\n        if m > MAXCODE:\n            dataappend(v)\n            m, v = start\n    return data\ndef _optimize_unicode(charset, fixup):\n    try:\n        import array\n    except ImportError:\n        return charset\n    charmap = [0]*65536\n    negate = 0\n    try:\n        for op, av in charset:\n            if op is NEGATE:\n                negate = 1\n            elif op is LITERAL:\n                charmap[fixup(av)] = 1\n            elif op is RANGE:\n                for i in range(fixup(av[0]), fixup(av[1])+1):\n                    charmap[i] = 1\n            elif op is CATEGORY:\n                return charset # cannot compress\n    except IndexError:\n        return charset\n    if negate:\n        if sys.maxunicode != 65535:\n            return charset\n        for i in range(65536):\n            charmap[i] = not charmap[i]\n    comps = {}\n    mapping = [0]*256\n    block = 0\n    data = []\n    for i in range(256):\n        chunk = tuple(charmap[i*256:(i+1)*256])\n        new = comps.setdefault(chunk, block)\n        mapping[i] = new\n        if new == block:\n            block = block + 1\n            data = data + _mk_bitmap(chunk)\n    header = [block]\n    if _sre.CODESIZE == 2:\n        code = 'H'\n    else:\n        code = 'I'\n    mapping = array.array('b', mapping).tobytes()\n    mapping = array.array(code, mapping)\n    assert mapping.itemsize == _sre.CODESIZE\n    assert len(mapping) * mapping.itemsize == 256\n    header = header + mapping.tolist()\n    data[0:0] = header\n    return [(BIGCHARSET, data)]\ndef _simple(av):\n    lo, hi = av[2].getwidth()\n    if lo == 0 and hi == MAXREPEAT:\n        raise error(\"nothing to repeat\")\n    return lo == hi == 1 and av[2][0][0] != SUBPATTERN\ndef _compile_info(code, pattern, flags):\n    lo, hi = pattern.getwidth()\n    if lo == 0:\n        return # not worth it\n    prefix = []\n    prefixappend = prefix.append\n    prefix_skip = 0\n    charset = [] # not used\n    charsetappend = charset.append\n    if not (flags & SRE_FLAG_IGNORECASE):\n        for op, av in pattern.data:\n            if op is LITERAL:\n                if len(prefix) == prefix_skip:\n                    prefix_skip = prefix_skip + 1\n                prefixappend(av)\n            elif op is SUBPATTERN and len(av[1]) == 1:\n                op, av = av[1][0]\n                if op is LITERAL:\n                    prefixappend(av)\n                else:\n                    break\n            else:\n                break\n        if not prefix and pattern.data:\n            op, av = pattern.data[0]\n            if op is SUBPATTERN and av[1]:\n                op, av = av[1][0]\n                if op is LITERAL:\n                    charsetappend((op, av))\n                elif op is BRANCH:\n                    c = []\n                    cappend = c.append\n                    for p in av[1]:\n                        if not p:\n                            break\n                        op, av = p[0]\n                        if op is LITERAL:\n                            cappend((op, av))\n                        else:\n                            break\n                    else:\n                        charset = c\n            elif op is BRANCH:\n                c = []\n                cappend = c.append\n                for p in av[1]:\n                    if not p:\n                        break\n                    op, av = p[0]\n                    if op is LITERAL:\n                        cappend((op, av))\n                    else:\n                        break\n                else:\n                    charset = c\n            elif op is IN:\n                charset = av\n    emit = code.append\n    emit(OPCODES[INFO])\n    skip = len(code); emit(0)\n    mask = 0\n    if prefix:\n        mask = SRE_INFO_PREFIX\n        if len(prefix) == prefix_skip == len(pattern.data):\n            mask = mask + SRE_INFO_LITERAL\n    elif charset:\n        mask = mask + SRE_INFO_CHARSET\n    emit(mask)\n    if lo < MAXCODE:\n        emit(lo)\n    else:\n        emit(MAXCODE)\n        prefix = prefix[:MAXCODE]\n    if hi < MAXCODE:\n        emit(hi)\n    else:\n        emit(0)\n    if prefix:\n        emit(len(prefix)) # length\n        emit(prefix_skip) # skip\n        code.extend(prefix)\n        table = [-1] + ([0]*len(prefix))\n        for i in range(len(prefix)):\n            table[i+1] = table[i]+1\n            while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:\n                table[i+1] = table[table[i+1]-1]+1\n        code.extend(table[1:]) # don't store first entry\n    elif charset:\n        _compile_charset(charset, flags, code)\n    code[skip] = len(code) - skip\ndef isstring(obj):\n    return isinstance(obj, (str, bytes))\ndef _code(p, flags):\n    flags = p.pattern.flags | flags\n    code = []\n    _compile_info(code, p, flags)\n    _compile(code, p.data, flags)\n    code.append(OPCODES[SUCCESS])\n    return code\ndef compile(p, flags=0):\n    if isstring(p):\n        pattern = p\n        p = sre_parse.parse(p, flags)\n    else:\n        pattern = None\n    code = _code(p, flags)\n    if p.pattern.groups > 100:\n        raise AssertionError(\n            \"sorry, but this version only supports 100 named groups\"\n            )\n    groupindex = p.pattern.groupdict\n    indexgroup = [None] * p.pattern.groups\n    for k, i in groupindex.items():\n        indexgroup[i] = k\n    return _sre.compile(\n        pattern, flags | p.pattern.flags, code,\n        p.pattern.groups-1,\n        groupindex, indexgroup\n        )\n", "/Lib/collections/abc.py": "\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.\r\nUnit tests are in test_collections.\r\n\"\"\"\r\nfrom abc import ABCMeta, abstractmethod\r\nimport sys\r\n__all__ = [\"Hashable\", \"Iterable\", \"Iterator\",\r\n           \"Sized\", \"Container\", \"Callable\",\r\n           \"Set\", \"MutableSet\",\r\n           \"Mapping\", \"MutableMapping\",\r\n           \"MappingView\", \"KeysView\", \"ItemsView\", \"ValuesView\",\r\n           \"Sequence\", \"MutableSequence\",\r\n           \"ByteString\",\r\n           ]\r\nbytes_iterator = type(iter(b''))\r\nbytearray_iterator = type(iter(bytearray()))\r\ndict_keyiterator = type(iter({}.keys()))\r\ndict_valueiterator = type(iter({}.values()))\r\ndict_itemiterator = type(iter({}.items()))\r\nlist_iterator = type(iter([]))\r\nlist_reverseiterator = type(iter(reversed([])))\r\nrange_iterator = type(iter(range(0)))\r\nset_iterator = type(iter(set()))\r\nstr_iterator = type(iter(\"\"))\r\ntuple_iterator = type(iter(()))\r\nzip_iterator = type(iter(zip()))\r\ndict_keys = type({}.keys())\r\ndict_values = type({}.values())\r\ndict_items = type({}.items())\r\nmappingproxy = type(type.__dict__)\r\nclass Hashable(metaclass=ABCMeta):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __hash__(self):\r\n        return 0\r\n    @classmethod\r\n    def __subclasshook__(cls, C):\r\n        if cls is Hashable:\r\n            for B in C.__mro__:\r\n                if \"__hash__\" in B.__dict__:\r\n                    if B.__dict__[\"__hash__\"]:\r\n                        return True\r\n                    break\r\n        return NotImplemented\r\nclass Iterable(metaclass=ABCMeta):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __iter__(self):\r\n        while False:\r\n            yield None\r\n    @classmethod\r\n    def __subclasshook__(cls, C):\r\n        if cls is Iterable:\r\n            if any(\"__iter__\" in B.__dict__ for B in C.__mro__):\r\n                return True\r\n        return NotImplemented\r\nclass Iterator(Iterable):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __next__(self):\r\n        raise StopIteration\r\n    def __iter__(self):\r\n        return self\r\n    @classmethod\r\n    def __subclasshook__(cls, C):\r\n        if cls is Iterator:\r\n            if (any(\"__next__\" in B.__dict__ for B in C.__mro__) and\r\n                any(\"__iter__\" in B.__dict__ for B in C.__mro__)):\r\n                return True\r\n        return NotImplemented\r\nIterator.register(bytes_iterator)\r\nIterator.register(bytearray_iterator)\r\nIterator.register(dict_keyiterator)\r\nIterator.register(dict_valueiterator)\r\nIterator.register(dict_itemiterator)\r\nIterator.register(list_iterator)\r\nIterator.register(list_reverseiterator)\r\nIterator.register(range_iterator)\r\nIterator.register(set_iterator)\r\nIterator.register(str_iterator)\r\nIterator.register(tuple_iterator)\r\nIterator.register(zip_iterator)\r\nclass Sized(metaclass=ABCMeta):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __len__(self):\r\n        return 0\r\n    @classmethod\r\n    def __subclasshook__(cls, C):\r\n        if cls is Sized:\r\n            if any(\"__len__\" in B.__dict__ for B in C.__mro__):\r\n                return True\r\n        return NotImplemented\r\nclass Container(metaclass=ABCMeta):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __contains__(self, x):\r\n        return False\r\n    @classmethod\r\n    def __subclasshook__(cls, C):\r\n        if cls is Container:\r\n            if any(\"__contains__\" in B.__dict__ for B in C.__mro__):\r\n                return True\r\n        return NotImplemented\r\nclass Callable(metaclass=ABCMeta):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __call__(self, *args, **kwds):\r\n        return False\r\n    @classmethod\r\n    def __subclasshook__(cls, C):\r\n        if cls is Callable:\r\n            if any(\"__call__\" in B.__dict__ for B in C.__mro__):\r\n                return True\r\n        return NotImplemented\r\nclass Set(Sized, Iterable, Container):\r\n    \"\"\"A set is a finite, iterable container.\r\n    This class provides concrete generic implementations of all\r\n    methods except for __contains__, __iter__ and __len__.\r\n    To override the comparisons (presumably for speed, as the\r\n    semantics are fixed), all you have to do is redefine __le__ and\r\n    then the other operations will automatically follow suit.\r\n    \"\"\"\r\n    __slots__ = ()\r\n    def __le__(self, other):\r\n        if not isinstance(other, Set):\r\n            return NotImplemented\r\n        if len(self) > len(other):\r\n            return False\r\n        for elem in self:\r\n            if elem not in other:\r\n                return False\r\n        return True\r\n    def __lt__(self, other):\r\n        if not isinstance(other, Set):\r\n            return NotImplemented\r\n        return len(self) < len(other) and self.__le__(other)\r\n    def __gt__(self, other):\r\n        if not isinstance(other, Set):\r\n            return NotImplemented\r\n        return other < self\r\n    def __ge__(self, other):\r\n        if not isinstance(other, Set):\r\n            return NotImplemented\r\n        return other <= self\r\n    def __eq__(self, other):\r\n        if not isinstance(other, Set):\r\n            return NotImplemented\r\n        return len(self) == len(other) and self.__le__(other)\r\n    def __ne__(self, other):\r\n        return not (self == other)\r\n    @classmethod\r\n    def _from_iterable(cls, it):\r\n        '''Construct an instance of the class from any iterable input.\r\n        Must override this method if the class constructor signature\r\n        does not accept an iterable for an input.\r\n        '''\r\n        return cls(it)\r\n    def __and__(self, other):\r\n        if not isinstance(other, Iterable):\r\n            return NotImplemented\r\n        return self._from_iterable(value for value in other if value in self)\r\n    def isdisjoint(self, other):\r\n        for value in other:\r\n            if value in self:\r\n                return False\r\n        return True\r\n    def __or__(self, other):\r\n        if not isinstance(other, Iterable):\r\n            return NotImplemented\r\n        chain = (e for s in (self, other) for e in s)\r\n        return self._from_iterable(chain)\r\n    def __sub__(self, other):\r\n        if not isinstance(other, Set):\r\n            if not isinstance(other, Iterable):\r\n                return NotImplemented\r\n            other = self._from_iterable(other)\r\n        return self._from_iterable(value for value in self\r\n                                   if value not in other)\r\n    def __xor__(self, other):\r\n        if not isinstance(other, Set):\r\n            if not isinstance(other, Iterable):\r\n                return NotImplemented\r\n            other = self._from_iterable(other)\r\n        return (self - other) | (other - self)\r\n    def _hash(self):\r\n        \"\"\"Compute the hash value of a set.\r\n        Note that we don't define __hash__: not all sets are hashable.\r\n        But if you define a hashable set type, its __hash__ should\r\n        call this function.\r\n        This must be compatible __eq__.\r\n        All sets ought to compare equal if they contain the same\r\n        elements, regardless of how they are implemented, and\r\n        regardless of the order of the elements; so there's not much\r\n        freedom for __eq__ or __hash__.  We match the algorithm used\r\n        by the built-in frozenset type.\r\n        \"\"\"\r\n        MAX = sys.maxsize\r\n        MASK = 2 * MAX + 1\r\n        n = len(self)\r\n        h = 1927868237 * (n + 1)\r\n        h &= MASK\r\n        for x in self:\r\n            hx = hash(x)\r\n            h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167\r\n            h &= MASK\r\n        h = h * 69069 + 907133923\r\n        h &= MASK\r\n        if h > MAX:\r\n            h -= MASK + 1\r\n        if h == -1:\r\n            h = 590923713\r\n        return h\r\nSet.register(frozenset)\r\nclass MutableSet(Set):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def add(self, value):\r\n        \"\"\"Add an element.\"\"\"\r\n        raise NotImplementedError\r\n    @abstractmethod\r\n    def discard(self, value):\r\n        \"\"\"Remove an element.  Do not raise an exception if absent.\"\"\"\r\n        raise NotImplementedError\r\n    def remove(self, value):\r\n        \"\"\"Remove an element. If not a member, raise a KeyError.\"\"\"\r\n        if value not in self:\r\n            raise KeyError(value)\r\n        self.discard(value)\r\n    def pop(self):\r\n        \"\"\"Return the popped value.  Raise KeyError if empty.\"\"\"\r\n        it = iter(self)\r\n        try:\r\n            value = next(it)\r\n        except StopIteration:\r\n            raise KeyError\r\n        self.discard(value)\r\n        return value\r\n    def clear(self):\r\n        \"\"\"This is slow (creates N new iterators!) but effective.\"\"\"\r\n        try:\r\n            while True:\r\n                self.pop()\r\n        except KeyError:\r\n            pass\r\n    def __ior__(self, it):\r\n        for value in it:\r\n            self.add(value)\r\n        return self\r\n    def __iand__(self, it):\r\n        for value in (self - it):\r\n            self.discard(value)\r\n        return self\r\n    def __ixor__(self, it):\r\n        if it is self:\r\n            self.clear()\r\n        else:\r\n            if not isinstance(it, Set):\r\n                it = self._from_iterable(it)\r\n            for value in it:\r\n                if value in self:\r\n                    self.discard(value)\r\n                else:\r\n                    self.add(value)\r\n        return self\r\n    def __isub__(self, it):\r\n        if it is self:\r\n            self.clear()\r\n        else:\r\n            for value in it:\r\n                self.discard(value)\r\n        return self\r\nMutableSet.register(set)\r\nclass Mapping(Sized, Iterable, Container):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __getitem__(self, key):\r\n        raise KeyError\r\n    def get(self, key, default=None):\r\n        try:\r\n            return self[key]\r\n        except KeyError:\r\n            return default\r\n    def __contains__(self, key):\r\n        try:\r\n            self[key]\r\n        except KeyError:\r\n            return False\r\n        else:\r\n            return True\r\n    def keys(self):\r\n        return KeysView(self)\r\n    def items(self):\r\n        return ItemsView(self)\r\n    def values(self):\r\n        return ValuesView(self)\r\n    def __eq__(self, other):\r\n        if not isinstance(other, Mapping):\r\n            return NotImplemented\r\n        return dict(self.items()) == dict(other.items())\r\n    def __ne__(self, other):\r\n        return not (self == other)\r\nMapping.register(mappingproxy)\r\nclass MappingView(Sized):\r\n    def __init__(self, mapping):\r\n        self._mapping = mapping\r\n    def __len__(self):\r\n        return len(self._mapping)\r\n    def __repr__(self):\r\n        return '{0.__class__.__name__}({0._mapping!r})'.format(self)\r\nclass KeysView(MappingView, Set):\r\n    @classmethod\r\n    def _from_iterable(self, it):\r\n        return set(it)\r\n    def __contains__(self, key):\r\n        return key in self._mapping\r\n    def __iter__(self):\r\n        for key in self._mapping:\r\n            yield key\r\nKeysView.register(dict_keys)\r\nclass ItemsView(MappingView, Set):\r\n    @classmethod\r\n    def _from_iterable(self, it):\r\n        return set(it)\r\n    def __contains__(self, item):\r\n        key, value = item\r\n        try:\r\n            v = self._mapping[key]\r\n        except KeyError:\r\n            return False\r\n        else:\r\n            return v == value\r\n    def __iter__(self):\r\n        for key in self._mapping:\r\n            yield (key, self._mapping[key])\r\nItemsView.register(dict_items)\r\nclass ValuesView(MappingView):\r\n    def __contains__(self, value):\r\n        for key in self._mapping:\r\n            if value == self._mapping[key]:\r\n                return True\r\n        return False\r\n    def __iter__(self):\r\n        for key in self._mapping:\r\n            yield self._mapping[key]\r\nValuesView.register(dict_values)\r\nclass MutableMapping(Mapping):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __setitem__(self, key, value):\r\n        raise KeyError\r\n    @abstractmethod\r\n    def __delitem__(self, key):\r\n        raise KeyError\r\n    __marker = object()\r\n    def pop(self, key, default=__marker):\r\n        try:\r\n            value = self[key]\r\n        except KeyError:\r\n            if default is self.__marker:\r\n                raise\r\n            return default\r\n        else:\r\n            del self[key]\r\n            return value\r\n    def popitem(self):\r\n        try:\r\n            key = next(iter(self))\r\n        except StopIteration:\r\n            raise KeyError\r\n        value = self[key]\r\n        del self[key]\r\n        return key, value\r\n    def clear(self):\r\n        try:\r\n            while True:\r\n                self.popitem()\r\n        except KeyError:\r\n            pass\r\n    def update(*args, **kwds):\r\n        if len(args) > 2:\r\n            raise TypeError(\"update() takes at most 2 positional \"\r\n                            \"arguments ({} given)\".format(len(args)))\r\n        elif not args:\r\n            raise TypeError(\"update() takes at least 1 argument (0 given)\")\r\n        self = args[0]\r\n        other = args[1] if len(args) >= 2 else ()\r\n        if isinstance(other, Mapping):\r\n            for key in other:\r\n                self[key] = other[key]\r\n        elif hasattr(other, \"keys\"):\r\n            for key in other.keys():\r\n                self[key] = other[key]\r\n        else:\r\n            for key, value in other:\r\n                self[key] = value\r\n        for key, value in kwds.items():\r\n            self[key] = value\r\n    def setdefault(self, key, default=None):\r\n        try:\r\n            return self[key]\r\n        except KeyError:\r\n            self[key] = default\r\n        return default\r\nMutableMapping.register(dict)\r\nclass Sequence(Sized, Iterable, Container):\r\n    \"\"\"All the operations on a read-only sequence.\r\n    Concrete subclasses must override __new__ or __init__,\r\n    __getitem__, and __len__.\r\n    \"\"\"\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __getitem__(self, index):\r\n        raise IndexError\r\n    def __iter__(self):\r\n        i = 0\r\n        try:\r\n            while True:\r\n                v = self[i]\r\n                yield v\r\n                i += 1\r\n        except IndexError:\r\n            return\r\n    def __contains__(self, value):\r\n        for v in self:\r\n            if v == value:\r\n                return True\r\n        return False\r\n    def __reversed__(self):\r\n        for i in reversed(range(len(self))):\r\n            yield self[i]\r\n    def index(self, value):\r\n        for i, v in enumerate(self):\r\n            if v == value:\r\n                return i\r\n        raise ValueError\r\n    def count(self, value):\r\n        return sum(1 for v in self if v == value)\r\nSequence.register(tuple)\r\nSequence.register(str)\r\nSequence.register(range)\r\nclass ByteString(Sequence):\r\n    \"\"\"This unifies bytes and bytearray.\r\n    XXX Should add all their methods.\r\n    \"\"\"\r\n    __slots__ = ()\r\nByteString.register(bytes)\r\nByteString.register(bytearray)\r\nclass MutableSequence(Sequence):\r\n    __slots__ = ()\r\n    @abstractmethod\r\n    def __setitem__(self, index, value):\r\n        raise IndexError\r\n    @abstractmethod\r\n    def __delitem__(self, index):\r\n        raise IndexError\r\n    @abstractmethod\r\n    def insert(self, index, value):\r\n        raise IndexError\r\n    def append(self, value):\r\n        self.insert(len(self), value)\r\n    def clear(self):\r\n        try:\r\n            while True:\r\n                self.pop()\r\n        except IndexError:\r\n            pass\r\n    def reverse(self):\r\n        n = len(self)\r\n        for i in range(n//2):\r\n            self[i], self[n-i-1] = self[n-i-1], self[i]\r\n    def extend(self, values):\r\n        for v in values:\r\n            self.append(v)\r\n    def pop(self, index=-1):\r\n        v = self[index]\r\n        del self[index]\r\n        return v\r\n    def remove(self, value):\r\n        del self[self.index(value)]\r\n    def __iadd__(self, values):\r\n        self.extend(values)\r\n        return self\r\nMutableSequence.register(list)\r\nMutableSequence.register(bytearray)  # Multiply inheriting, see ByteString\r\n", "/Lib/this.py": "s = \"\"\"Gur Mra bs Clguba, ol Gvz Crgref\nOrnhgvshy vf orggre guna htyl.\nRkcyvpvg vf orggre guna vzcyvpvg.\nFvzcyr vf orggre guna pbzcyrk.\nPbzcyrk vf orggre guna pbzcyvpngrq.\nSyng vf orggre guna arfgrq.\nFcnefr vf orggre guna qrafr.\nErnqnovyvgl pbhagf.\nFcrpvny pnfrf nera'g fcrpvny rabhtu gb oernx gur ehyrf.\nNygubhtu cenpgvpnyvgl orngf chevgl.\nReebef fubhyq arire cnff fvyragyl.\nHayrff rkcyvpvgyl fvyraprq.\nVa gur snpr bs nzovthvgl, ershfr gur grzcgngvba gb thrff.\nGurer fubhyq or bar-- naq cersrenoyl bayl bar --boivbhf jnl gb qb vg.\nNygubhtu gung jnl znl abg or boivbhf ng svefg hayrff lbh'er Qhgpu.\nAbj vf orggre guna arire.\nNygubhtu arire vf bsgra orggre guna *evtug* abj.\nVs gur vzcyrzragngvba vf uneq gb rkcynva, vg'f n onq vqrn.\nVs gur vzcyrzragngvba vf rnfl gb rkcynva, vg znl or n tbbq vqrn.\nAnzrfcnprf ner bar ubaxvat terng vqrn -- yrg'f qb zber bs gubfr!\"\"\"\nd = {}\nfor c in (65, 97):\n    for i in range(26):\n        d[chr(i+c)] = chr((i+13) % 26 + c)\nprint(\"\".join([d.get(c, c) for c in s]))\n", "/Lib/html/parser.py": "\"\"\"A parser for HTML and XHTML.\"\"\"\nimport _markupbase\nimport re\nimport warnings\ninteresting_normal = re.compile('[&<]')\nincomplete = re.compile('&[a-zA-Z#]')\nentityref = re.compile('&([a-zA-Z][-.a-zA-Z0-9]*)[^a-zA-Z0-9]')\ncharref = re.compile('&#(?:[0-9]+|[xX][0-9a-fA-F]+)[^0-9a-fA-F]')\nstarttagopen = re.compile('<[a-zA-Z]')\npiclose = re.compile('>')\ncommentclose = re.compile(r'--\\s*>')\ntagfind = re.compile('([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\\s|/(?!>))*')\ntagfind_tolerant = re.compile('[a-zA-Z][^\\t\\n\\r\\f />\\x00]*')\nattrfind = re.compile(\n    r'\\s*([a-zA-Z_][-.:a-zA-Z_0-9]*)(\\s*=\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|[^\\s\"\\'=<>`]*))?')\nattrfind_tolerant = re.compile(\n    r'((?<=[\\'\"\\s/])[^\\s/>][^\\s/=>]*)(\\s*=+\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|(?![\\'\"])[^>\\s]*))?(?:\\s|/(?!>))*')\nlocatestarttagend = re.compile(r\"\"\"\n  <[a-zA-Z][-.a-zA-Z0-9:_]*          # tag name\n  (?:\\s+                             # whitespace before attribute name\n    (?:[a-zA-Z_][-.:a-zA-Z0-9_]*     # attribute name\n      (?:\\s*=\\s*                     # value indicator\n        (?:'[^']*'                   # LITA-enclosed value\n          |\\\"[^\\\"]*\\\"                # LIT-enclosed value\n          |[^'\\\">\\s]+                # bare value\n         )\n       )?\n     )\n   )*\n  \\s*                                # trailing whitespace\n\"\"\", re.VERBOSE)\nlocatestarttagend_tolerant = re.compile(r\"\"\"\n  <[a-zA-Z][-.a-zA-Z0-9:_]*          # tag name\n  (?:[\\s/]*                          # optional whitespace before attribute name\n    (?:(?<=['\"\\s/])[^\\s/>][^\\s/=>]*  # attribute name\n      (?:\\s*=+\\s*                    # value indicator\n        (?:'[^']*'                   # LITA-enclosed value\n          |\"[^\"]*\"                   # LIT-enclosed value\n          |(?!['\"])[^>\\s]*           # bare value\n         )\n         (?:\\s*,)*                   # possibly followed by a comma\n       )?(?:\\s|/(?!>))*\n     )*\n   )?\n  \\s*                                # trailing whitespace\n\"\"\", re.VERBOSE)\nendendtag = re.compile('>')\nendtagfind = re.compile('</\\s*([a-zA-Z][-.a-zA-Z0-9:_]*)\\s*>')\nclass HTMLParseError(Exception):\n    \"\"\"Exception raised for all parse errors.\"\"\"\n    def __init__(self, msg, position=(None, None)):\n        assert msg\n        self.msg = msg\n        self.lineno = position[0]\n        self.offset = position[1]\n    def __str__(self):\n        result = self.msg\n        if self.lineno is not None:\n            result = result + \", at line %d\" % self.lineno\n        if self.offset is not None:\n            result = result + \", column %d\" % (self.offset + 1)\n        return result\nclass HTMLParser(_markupbase.ParserBase):\n    \"\"\"Find tags and other markup and call handler functions.\n    Usage:\n        p = HTMLParser()\n        p.feed(data)\n        ...\n        p.close()\n    Start tags are handled by calling self.handle_starttag() or\n    self.handle_startendtag(); end tags by self.handle_endtag().  The\n    data between tags is passed from the parser to the derived class\n    by calling self.handle_data() with the data as argument (the data\n    may be split up in arbitrary chunks).  Entity references are\n    passed by calling self.handle_entityref() with the entity\n    reference as the argument.  Numeric character references are\n    passed to self.handle_charref() with the string containing the\n    reference as the argument.\n    \"\"\"\n    CDATA_CONTENT_ELEMENTS = (\"script\", \"style\")\n    def __init__(self, strict=False):\n        \"\"\"Initialize and reset this instance.\n        If strict is set to False (the default) the parser will parse invalid\n        markup, otherwise it will raise an error.  Note that the strict mode\n        is deprecated.\n        \"\"\"\n        if strict:\n            warnings.warn(\"The strict mode is deprecated.\",\n                          DeprecationWarning, stacklevel=2)\n        self.strict = strict\n        self.reset()\n    def reset(self):\n        \"\"\"Reset this instance.  Loses all unprocessed data.\"\"\"\n        self.rawdata = ''\n        self.lasttag = '???'\n        self.interesting = interesting_normal\n        self.cdata_elem = None\n        _markupbase.ParserBase.reset(self)\n    def feed(self, data):\n        r\"\"\"Feed data to the parser.\n        Call this as often as you want, with as little or as much text\n        as you want (may include '\\n').\n        \"\"\"\n        self.rawdata = self.rawdata + data\n        self.goahead(0)\n    def close(self):\n        \"\"\"Handle any buffered data.\"\"\"\n        self.goahead(1)\n    def error(self, message):\n        raise HTMLParseError(message, self.getpos())\n    __starttag_text = None\n    def get_starttag_text(self):\n        \"\"\"Return full source of start tag: '<...>'.\"\"\"\n        return self.__starttag_text\n    def set_cdata_mode(self, elem):\n        self.cdata_elem = elem.lower()\n        self.interesting = re.compile(r'</\\s*%s\\s*>' % self.cdata_elem, re.I)\n    def clear_cdata_mode(self):\n        self.interesting = interesting_normal\n        self.cdata_elem = None\n    def goahead(self, end):\n        rawdata = self.rawdata\n        i = 0\n        n = len(rawdata)\n        while i < n:\n            match = self.interesting.search(rawdata, i) # < or &\n            if match:\n                j = match.start()\n            else:\n                if self.cdata_elem:\n                    break\n                j = n\n            if i < j: self.handle_data(rawdata[i:j])\n            i = self.updatepos(i, j)\n            if i == n: break\n            startswith = rawdata.startswith\n            if startswith('<', i):\n                if starttagopen.match(rawdata, i): # < + letter\n                    k = self.parse_starttag(i)\n                elif startswith(\"</\", i):\n                    k = self.parse_endtag(i)\n                elif startswith(\"<!--\", i):\n                    k = self.parse_comment(i)\n                elif startswith(\"<?\", i):\n                    k = self.parse_pi(i)\n                elif startswith(\"<!\", i):\n                    if self.strict:\n                        k = self.parse_declaration(i)\n                    else:\n                        k = self.parse_html_declaration(i)\n                elif (i + 1) < n:\n                    self.handle_data(\"<\")\n                    k = i + 1\n                else:\n                    break\n                if k < 0:\n                    if not end:\n                        break\n                    if self.strict:\n                        self.error(\"EOF in middle of construct\")\n                    k = rawdata.find('>', i + 1)\n                    if k < 0:\n                        k = rawdata.find('<', i + 1)\n                        if k < 0:\n                            k = i + 1\n                    else:\n                        k += 1\n                    self.handle_data(rawdata[i:k])\n                i = self.updatepos(i, k)\n            elif startswith(\"&#\", i):\n                match = charref.match(rawdata, i)\n                if match:\n                    name = match.group()[2:-1]\n                    self.handle_charref(name)\n                    k = match.end()\n                    if not startswith(';', k-1):\n                        k = k - 1\n                    i = self.updatepos(i, k)\n                    continue\n                else:\n                    if \";\" in rawdata[i:]: #bail by consuming &#\n                        self.handle_data(rawdata[0:2])\n                        i = self.updatepos(i, 2)\n                    break\n            elif startswith('&', i):\n                match = entityref.match(rawdata, i)\n                if match:\n                    name = match.group(1)\n                    self.handle_entityref(name)\n                    k = match.end()\n                    if not startswith(';', k-1):\n                        k = k - 1\n                    i = self.updatepos(i, k)\n                    continue\n                match = incomplete.match(rawdata, i)\n                if match:\n                    if end and match.group() == rawdata[i:]:\n                        if self.strict:\n                            self.error(\"EOF in middle of entity or char ref\")\n                        else:\n                            if k <= i:\n                                k = n\n                            i = self.updatepos(i, i + 1)\n                    break\n                elif (i + 1) < n:\n                    self.handle_data(\"&\")\n                    i = self.updatepos(i, i + 1)\n                else:\n                    break\n            else:\n                assert 0, \"interesting.search() lied\"\n        if end and i < n and not self.cdata_elem:\n            self.handle_data(rawdata[i:n])\n            i = self.updatepos(i, n)\n        self.rawdata = rawdata[i:]\n    def parse_html_declaration(self, i):\n        rawdata = self.rawdata\n        assert rawdata[i:i+2] == '<!', ('unexpected call to '\n                                        'parse_html_declaration()')\n        if rawdata[i:i+4] == '<!--':\n            return self.parse_comment(i)\n        elif rawdata[i:i+3] == '<![':\n            return self.parse_marked_section(i)\n        elif rawdata[i:i+9].lower() == '<!doctype':\n            gtpos = rawdata.find('>', i+9)\n            if gtpos == -1:\n                return -1\n            self.handle_decl(rawdata[i+2:gtpos])\n            return gtpos+1\n        else:\n            return self.parse_bogus_comment(i)\n    def parse_bogus_comment(self, i, report=1):\n        rawdata = self.rawdata\n        assert rawdata[i:i+2] in ('<!', '</'), ('unexpected call to '\n                                                'parse_comment()')\n        pos = rawdata.find('>', i+2)\n        if pos == -1:\n            return -1\n        if report:\n            self.handle_comment(rawdata[i+2:pos])\n        return pos + 1\n    def parse_pi(self, i):\n        rawdata = self.rawdata\n        assert rawdata[i:i+2] == '<?', 'unexpected call to parse_pi()'\n        match = piclose.search(rawdata, i+2) # >\n        if not match:\n            return -1\n        j = match.start()\n        self.handle_pi(rawdata[i+2: j])\n        j = match.end()\n        return j\n    def parse_starttag(self, i):\n        self.__starttag_text = None\n        endpos = self.check_for_whole_start_tag(i)\n        if endpos < 0:\n            return endpos\n        rawdata = self.rawdata\n        self.__starttag_text = rawdata[i:endpos]\n        attrs = []\n        match = tagfind.match(rawdata, i+1)\n        assert match, 'unexpected call to parse_starttag()'\n        k = match.end()\n        self.lasttag = tag = match.group(1).lower()\n        while k < endpos:\n            if self.strict:\n                m = attrfind.match(rawdata, k)\n            else:\n                m = attrfind_tolerant.match(rawdata, k)\n            if not m:\n                break\n            attrname, rest, attrvalue = m.group(1, 2, 3)\n            if not rest:\n                attrvalue = None\n            elif attrvalue[:1] == '\\'' == attrvalue[-1:] or \\\n                 attrvalue[:1] == '\"' == attrvalue[-1:]:\n                attrvalue = attrvalue[1:-1]\n            if attrvalue:\n                attrvalue = self.unescape(attrvalue)\n            attrs.append((attrname.lower(), attrvalue))\n            k = m.end()\n        end = rawdata[k:endpos].strip()\n        if end not in (\">\", \"/>\"):\n            lineno, offset = self.getpos()\n            if \"\\n\" in self.__starttag_text:\n                lineno = lineno + self.__starttag_text.count(\"\\n\")\n                offset = len(self.__starttag_text) \\\n                         - self.__starttag_text.rfind(\"\\n\")\n            else:\n                offset = offset + len(self.__starttag_text)\n            if self.strict:\n                self.error(\"junk characters in start tag: %r\"\n                           % (rawdata[k:endpos][:20],))\n            self.handle_data(rawdata[i:endpos])\n            return endpos\n        if end.endswith('/>'):\n            self.handle_startendtag(tag, attrs)\n        else:\n            self.handle_starttag(tag, attrs)\n            if tag in self.CDATA_CONTENT_ELEMENTS:\n                self.set_cdata_mode(tag)\n        return endpos\n    def check_for_whole_start_tag(self, i):\n        rawdata = self.rawdata\n        if self.strict:\n            m = locatestarttagend.match(rawdata, i)\n        else:\n            m = locatestarttagend_tolerant.match(rawdata, i)\n        if m:\n            j = m.end()\n            next = rawdata[j:j+1]\n            if next == \">\":\n                return j + 1\n            if next == \"/\":\n                if rawdata.startswith(\"/>\", j):\n                    return j + 2\n                if rawdata.startswith(\"/\", j):\n                    return -1\n                if self.strict:\n                    self.updatepos(i, j + 1)\n                    self.error(\"malformed empty start tag\")\n                if j > i:\n                    return j\n                else:\n                    return i + 1\n            if next == \"\":\n                return -1\n            if next in (\"abcdefghijklmnopqrstuvwxyz=/\"\n                        \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n                return -1\n            if self.strict:\n                self.updatepos(i, j)\n                self.error(\"malformed start tag\")\n            if j > i:\n                return j\n            else:\n                return i + 1\n        raise AssertionError(\"we should not get here!\")\n    def parse_endtag(self, i):\n        rawdata = self.rawdata\n        assert rawdata[i:i+2] == \"</\", \"unexpected call to parse_endtag\"\n        match = endendtag.search(rawdata, i+1) # >\n        if not match:\n            return -1\n        gtpos = match.end()\n        match = endtagfind.match(rawdata, i) # </ + tag + >\n        if not match:\n            if self.cdata_elem is not None:\n                self.handle_data(rawdata[i:gtpos])\n                return gtpos\n            if self.strict:\n                self.error(\"bad end tag: %r\" % (rawdata[i:gtpos],))\n            namematch = tagfind_tolerant.match(rawdata, i+2)\n            if not namematch:\n                if rawdata[i:i+3] == '</>':\n                    return i+3\n                else:\n                    return self.parse_bogus_comment(i)\n            tagname = namematch.group().lower()\n            gtpos = rawdata.find('>', namematch.end())\n            self.handle_endtag(tagname)\n            return gtpos+1\n        elem = match.group(1).lower() # script or style\n        if self.cdata_elem is not None:\n            if elem != self.cdata_elem:\n                self.handle_data(rawdata[i:gtpos])\n                return gtpos\n        self.handle_endtag(elem.lower())\n        self.clear_cdata_mode()\n        return gtpos\n    def handle_startendtag(self, tag, attrs):\n        self.handle_starttag(tag, attrs)\n        self.handle_endtag(tag)\n    def handle_starttag(self, tag, attrs):\n        pass\n    def handle_endtag(self, tag):\n        pass\n    def handle_charref(self, name):\n        pass\n    def handle_entityref(self, name):\n        pass\n    def handle_data(self, data):\n        pass\n    def handle_comment(self, data):\n        pass\n    def handle_decl(self, decl):\n        pass\n    def handle_pi(self, data):\n        pass\n    def unknown_decl(self, data):\n        if self.strict:\n            self.error(\"unknown declaration: %r\" % (data,))\n    def unescape(self, s):\n        if '&' not in s:\n            return s\n        def replaceEntities(s):\n            s = s.groups()[0]\n            try:\n                if s[0] == \"#\":\n                    s = s[1:]\n                    if s[0] in ['x','X']:\n                        c = int(s[1:].rstrip(';'), 16)\n                    else:\n                        c = int(s.rstrip(';'))\n                    return chr(c)\n            except ValueError:\n                return '&#' + s\n            else:\n                from html.entities import html5\n                if s in html5:\n                    return html5[s]\n                elif s.endswith(';'):\n                    return '&' + s\n                for x in range(2, len(s)):\n                    if s[:x] in html5:\n                        return html5[s[:x]] + s[x:]\n                else:\n                    return '&' + s\n        return re.sub(r\"&(#?[xX]?(?:[0-9a-fA-F]+;|\\w{1,32};?))\",\n                      replaceEntities, s, flags=re.ASCII)\n", "/Lib/contextlib.py": "\"\"\"Utilities for with-statement contexts.  See PEP 343.\"\"\"\r\nimport sys\r\nfrom collections import deque\r\nfrom functools import wraps\r\n__all__ = [\"contextmanager\", \"closing\", \"ContextDecorator\", \"ExitStack\"]\r\nclass ContextDecorator(object):\r\n    \"A base class or mixin that enables context managers to work as decorators.\"\r\n    def _recreate_cm(self):\r\n        \"\"\"Return a recreated instance of self.\r\n        Allows an otherwise one-shot context manager like\r\n        _GeneratorContextManager to support use as\r\n        a decorator via implicit recreation.\r\n        This is a private interface just for _GeneratorContextManager.\r\n        See issue #11647 for details.\r\n        \"\"\"\r\n        return self\r\n    def __call__(self, func):\r\n        @wraps(func)\r\n        def inner(*args, **kwds):\r\n            with self._recreate_cm():\r\n                return func(*args, **kwds)\r\n        return inner\r\nclass _GeneratorContextManager(ContextDecorator):\r\n    \"\"\"Helper for @contextmanager decorator.\"\"\"\r\n    def __init__(self, func, *args, **kwds):\r\n        self.gen = func(*args, **kwds)\r\n        self.func, self.args, self.kwds = func, args, kwds\r\n    def _recreate_cm(self):\r\n        return self.__class__(self.func, *self.args, **self.kwds)\r\n    def __enter__(self):\r\n        try:\r\n            return next(self.gen)\r\n        except StopIteration:\r\n            raise RuntimeError(\"generator didn't yield\")\r\n    def __exit__(self, type, value, traceback):\r\n        if type is None:\r\n            try:\r\n                next(self.gen)\r\n            except StopIteration:\r\n                return\r\n            else:\r\n                raise RuntimeError(\"generator didn't stop\")\r\n        else:\r\n            if value is None:\r\n                value = type()\r\n            try:\r\n                self.gen.throw(type, value, traceback)\r\n                raise RuntimeError(\"generator didn't stop after throw()\")\r\n            except StopIteration as exc:\r\n                return exc is not value\r\n            except:\r\n                if sys.exc_info()[1] is not value:\r\n                    raise\r\ndef contextmanager(func):\r\n    \"\"\"@contextmanager decorator.\r\n    Typical usage:\r\n        @contextmanager\r\n        def some_generator(<arguments>):\r\n            <setup>\r\n            try:\r\n                yield <value>\r\n            finally:\r\n                <cleanup>\r\n    This makes this:\r\n        with some_generator(<arguments>) as <variable>:\r\n            <body>\r\n    equivalent to this:\r\n        <setup>\r\n        try:\r\n            <variable> = <value>\r\n            <body>\r\n        finally:\r\n            <cleanup>\r\n    \"\"\"\r\n    @wraps(func)\r\n    def helper(*args, **kwds):\r\n        return _GeneratorContextManager(func, *args, **kwds)\r\n    return helper\r\nclass closing(object):\r\n    \"\"\"Context to automatically close something at the end of a block.\r\n    Code like this:\r\n        with closing(<module>.open(<arguments>)) as f:\r\n            <block>\r\n    is equivalent to this:\r\n        f = <module>.open(<arguments>)\r\n        try:\r\n            <block>\r\n        finally:\r\n            f.close()\r\n    \"\"\"\r\n    def __init__(self, thing):\r\n        self.thing = thing\r\n    def __enter__(self):\r\n        return self.thing\r\n    def __exit__(self, *exc_info):\r\n        self.thing.close()\r\nclass ExitStack(object):\r\n    \"\"\"Context manager for dynamic management of a stack of exit callbacks\r\n    For example:\r\n        with ExitStack() as stack:\r\n            files = [stack.enter_context(open(fname)) for fname in filenames]\r\n    \"\"\"\r\n    def __init__(self):\r\n        self._exit_callbacks = deque()\r\n    def pop_all(self):\r\n        \"\"\"Preserve the context stack by transferring it to a new instance\"\"\"\r\n        new_stack = type(self)()\r\n        new_stack._exit_callbacks = self._exit_callbacks\r\n        self._exit_callbacks = deque()\r\n        return new_stack\r\n    def _push_cm_exit(self, cm, cm_exit):\r\n        \"\"\"Helper to correctly register callbacks to __exit__ methods\"\"\"\r\n        def _exit_wrapper(*exc_details):\r\n            return cm_exit(cm, *exc_details)\r\n        _exit_wrapper.__self__ = cm\r\n        self.push(_exit_wrapper)\r\n    def push(self, exit):\r\n        \"\"\"Registers a callback with the standard __exit__ method signature\r\n        Can suppress exceptions the same way __exit__ methods can.\r\n        Also accepts any object with an __exit__ method (registering a call\r\n        to the method instead of the object itself)\r\n        \"\"\"\r\n        _cb_type = type(exit)\r\n        try:\r\n            exit_method = _cb_type.__exit__\r\n        except AttributeError:\r\n            self._exit_callbacks.append(exit)\r\n        else:\r\n            self._push_cm_exit(exit, exit_method)\r\n        return exit # Allow use as a decorator\r\n    def callback(self, callback, *args, **kwds):\r\n        \"\"\"Registers an arbitrary callback and arguments.\r\n        Cannot suppress exceptions.\r\n        \"\"\"\r\n        def _exit_wrapper(exc_type, exc, tb):\r\n            callback(*args, **kwds)\r\n        _exit_wrapper.__wrapped__ = callback\r\n        self.push(_exit_wrapper)\r\n        return callback # Allow use as a decorator\r\n    def enter_context(self, cm):\r\n        \"\"\"Enters the supplied context manager\r\n        If successful, also pushes its __exit__ method as a callback and\r\n        returns the result of the __enter__ method.\r\n        \"\"\"\r\n        _cm_type = type(cm)\r\n        _exit = _cm_type.__exit__\r\n        result = _cm_type.__enter__(cm)\r\n        self._push_cm_exit(cm, _exit)\r\n        return result\r\n    def close(self):\r\n        \"\"\"Immediately unwind the context stack\"\"\"\r\n        self.__exit__(None, None, None)\r\n    def __enter__(self):\r\n        return self\r\n    def __exit__(self, *exc_details):\r\n        frame_exc = sys.exc_info()[1]\r\n        def _fix_exception_context(new_exc, old_exc):\r\n            while 1:\r\n                exc_context = new_exc.__context__\r\n                if exc_context in (None, frame_exc):\r\n                    break\r\n                new_exc = exc_context\r\n            new_exc.__context__ = old_exc\r\n        suppressed_exc = False\r\n        while self._exit_callbacks:\r\n            cb = self._exit_callbacks.pop()\r\n            try:\r\n                if cb(*exc_details):\r\n                    suppressed_exc = True\r\n                    exc_details = (None, None, None)\r\n            except:\r\n                new_exc_details = sys.exc_info()\r\n                _fix_exception_context(new_exc_details[1], exc_details[1])\r\n                if not self._exit_callbacks:\r\n                    raise\r\n                exc_details = new_exc_details\r\n        return suppressed_exc\r\n", "/libs/time.js": "$module=(function($B){var __builtins__=$B.builtins;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");var $JSObject=$B.$JSObject;var JSObject=$B.JSObject;return{__name__:'time',ctime:function(timestamp){if(timestamp===undefined)timestamp=int(new Date().getTime()/1000);var d=new Date(0);d.setUTCSeconds(timestamp);return d.toUTCString();},gmtime:function(){var d=new Date();return [d.getUTCFullYear(),d.getUTCMonth()+1,d.getUTCDate(),d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCDay(),0,0];},perf_counter:function(){return float(new Date().getTime()/1000.0);},localtime:function(secs){var d=new Date();if(secs===undefined||secs===None)return d.getTime();var jan=new Date(d.getFullYear(),0,1);var jul=new Date(d.getFullYear(),6,1);var dst=int(d.getTimezoneOffset()<Math.max(jan.getTimezoneOffset(),jul.getTimezoneOffset()));return [d.getFullYear(),d.getMonth()+1,d.getDate(),d.getHours(),d.getMinutes(),d.getSeconds(),d.getDay(),0,dst];},time:function(){return float((new Date().getTime())/1000);},sleep:function(secs){},strftime:function(format,arg){function ns(arg,nb){var res=arg.toString();while(res.length<nb)res='0'+res;return res;}if(arg)var obj=new Date(arg[0],arg[1]-1,arg[2],arg[3],arg[4],arg[5],arg[6]);else var obj=new Date();var abb_weekdays=['Su','Mo','Tu','We','Th','Fr','Sa'];var full_weekdays=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];var abb_months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];var full_months=['January','February','March','April','May','June','July','August','September','October','November','December'];var res=format;res=res.replace(/%H/,ns(obj.getHours(),2));res=res.replace(/%M/,ns(obj.getMinutes(),2));res=res.replace(/%S/,ns(obj.getSeconds(),2));res=res.replace(/%Y/,ns(obj.getFullYear(),4));res=res.replace(/%y/,ns(obj.getFullYear(),4).substr(2));res=res.replace(/%m/,ns(obj.getMonth()+1,2));res=res.replace(/%d/,ns(obj.getDate(),2));res=res.replace(/%a/,abb_weekdays[obj.getDay()]);res=res.replace(/%A/,full_weekdays[obj.getDay()]);res=res.replace(/%b/,abb_months[obj.getMonth()]);res=res.replace(/%B/,full_months[obj.getMonth()]);return res;},struct_time:function(arg){console.log('struct time');console.log('list '+list);if(!isinstance(arg,[tuple,list]))throw TypeError('constructor requires a sequence');if(len(arg)!=9)throw TypeError(\"time.struct_time() takes a 9-sequence (\"+len(arg)+\"-sequence given\");var res=arg;var names=['tm_year','tm_mon','tm_mday','tm_hour','tm_min','tm_sec','tm_wday','tm_yday','tm_isdst','tm_zone','tm_gmtoff'];res.__getattr__=function(attr){var ix=names.indexOf(attr);if(ix>-1)return arg.__getitem__(ix);if(typeof res[attr]==='function')return(function(obj){return function(){return obj[attr].apply(obj,arguments);};})(res);else if(res[attr]!==undefined)return res[attr];else throw AttributeError(\"object has no attribute '\"+attr+\"'\");};return res;}};})(__BRYTHON__);", "/libs/javascript.js": "$module={JSObject:__BRYTHON__.JSObject,JSConstructor:__BRYTHON__.JSConstructor,console:__BRYTHON__.JSObject(window.console)};", "/libs/zlib1.js": "/*\nvar _zlib=(function() {'use strict';function l(d){throw d;}var u=void 0,x=!0,aa=this;function z(d,a){var c=d.split(\".\"),f=aa;!(c[0]in f)&&f.execScript&&f.execScript(\"var \"+c[0]);for(var b;c.length&&(b=c.shift());)!c.length&&a!==u?f[b]=a:f=f[b]?f[b]:f[b]={}};var E=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array;function G(d,a){this.index=\"number\"===typeof a?a:0;this.i=0;this.buffer=d instanceof(E?Uint8Array:Array)?d:new (E?Uint8Array:Array)(32768);2*this.buffer.length<=this.index&&l(Error(\"invalid index\"));this.buffer.length<=this.index&&this.f()}G.prototype.f=function(){var d=this.buffer,a,c=d.length,f=new (E?Uint8Array:Array)(c<<1);if(E)f.set(d);else for(a=0;a<c;++a)f[a]=d[a];return this.buffer=f};\nG.prototype.d=function(d,a,c){var f=this.buffer,b=this.index,e=this.i,g=f[b],h;c&&1<a&&(d=8<a?(N[d&255]<<24|N[d>>>8&255]<<16|N[d>>>16&255]<<8|N[d>>>24&255])>>32-a:N[d]>>8-a);if(8>a+e)g=g<<a|d,e+=a;else for(h=0;h<a;++h)g=g<<1|d>>a-h-1&1,8===++e&&(e=0,f[b++]=N[g],g=0,b===f.length&&(f=this.f()));f[b]=g;this.buffer=f;this.i=e;this.index=b};G.prototype.finish=function(){var d=this.buffer,a=this.index,c;0<this.i&&(d[a]<<=8-this.i,d[a]=N[d[a]],a++);E?c=d.subarray(0,a):(d.length=a,c=d);return c};\nvar fa=new (E?Uint8Array:Array)(256),O;for(O=0;256>O;++O){for(var P=O,Q=P,ga=7,P=P>>>1;P;P>>>=1)Q<<=1,Q|=P&1,--ga;fa[O]=(Q<<ga&255)>>>0}var N=fa;function ha(d){this.buffer=new (E?Uint16Array:Array)(2*d);this.length=0}ha.prototype.getParent=function(d){return 2*((d-2)/4|0)};ha.prototype.push=function(d,a){var c,f,b=this.buffer,e;c=this.length;b[this.length++]=a;for(b[this.length++]=d;0<c;)if(f=this.getParent(c),b[c]>b[f])e=b[c],b[c]=b[f],b[f]=e,e=b[c+1],b[c+1]=b[f+1],b[f+1]=e,c=f;else break;return this.length};\nha.prototype.pop=function(){var d,a,c=this.buffer,f,b,e;a=c[0];d=c[1];this.length-=2;c[0]=c[this.length];c[1]=c[this.length+1];for(e=0;;){b=2*e+2;if(b>=this.length)break;b+2<this.length&&c[b+2]>c[b]&&(b+=2);if(c[b]>c[e])f=c[e],c[e]=c[b],c[b]=f,f=c[e+1],c[e+1]=c[b+1],c[b+1]=f;else break;e=b}return{index:d,value:a,length:this.length}};function R(d){var a=d.length,c=0,f=Number.POSITIVE_INFINITY,b,e,g,h,k,n,q,r,p;for(r=0;r<a;++r)d[r]>c&&(c=d[r]),d[r]<f&&(f=d[r]);b=1<<c;e=new (E?Uint32Array:Array)(b);g=1;h=0;for(k=2;g<=c;){for(r=0;r<a;++r)if(d[r]===g){n=0;q=h;for(p=0;p<g;++p)n=n<<1|q&1,q>>=1;for(p=n;p<b;p+=k)e[p]=g<<16|r;++h}++g;h<<=1;k<<=1}return[e,c,f]};function ia(d,a){this.h=ma;this.w=0;this.input=E&&d instanceof Array?new Uint8Array(d):d;this.b=0;a&&(a.lazy&&(this.w=a.lazy),\"number\"===typeof a.compressionType&&(this.h=a.compressionType),a.outputBuffer&&(this.a=E&&a.outputBuffer instanceof Array?new Uint8Array(a.outputBuffer):a.outputBuffer),\"number\"===typeof a.outputIndex&&(this.b=a.outputIndex));this.a||(this.a=new (E?Uint8Array:Array)(32768))}var ma=2,na={NONE:0,r:1,k:ma,N:3},oa=[],S;\nfor(S=0;288>S;S++)switch(x){case 143>=S:oa.push([S+48,8]);break;case 255>=S:oa.push([S-144+400,9]);break;case 279>=S:oa.push([S-256+0,7]);break;case 287>=S:oa.push([S-280+192,8]);break;default:l(\"invalid literal: \"+S)}\nia.prototype.j=function(){var d,a,c,f,b=this.input;switch(this.h){case 0:c=0;for(f=b.length;c<f;){a=E?b.subarray(c,c+65535):b.slice(c,c+65535);c+=a.length;var e=a,g=c===f,h=u,k=u,n=u,q=u,r=u,p=this.a,m=this.b;if(E){for(p=new Uint8Array(this.a.buffer);p.length<=m+e.length+5;)p=new Uint8Array(p.length<<1);p.set(this.a)}h=g?1:0;p[m++]=h|0;k=e.length;n=~k+65536&65535;p[m++]=k&255;p[m++]=k>>>8&255;p[m++]=n&255;p[m++]=n>>>8&255;if(E)p.set(e,m),m+=e.length,p=p.subarray(0,m);else{q=0;for(r=e.length;q<r;++q)p[m++]=\ne[q];p.length=m}this.b=m;this.a=p}break;case 1:var s=new G(E?new Uint8Array(this.a.buffer):this.a,this.b);s.d(1,1,x);s.d(1,2,x);var w=pa(this,b),y,ja,B;y=0;for(ja=w.length;y<ja;y++)if(B=w[y],G.prototype.d.apply(s,oa[B]),256<B)s.d(w[++y],w[++y],x),s.d(w[++y],5),s.d(w[++y],w[++y],x);else if(256===B)break;this.a=s.finish();this.b=this.a.length;break;case ma:var D=new G(E?new Uint8Array(this.a.buffer):this.a,this.b),Da,M,U,V,W,gb=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],ba,Ea,ca,Fa,ka,ra=Array(19),\nGa,X,la,A,Ha;Da=ma;D.d(1,1,x);D.d(Da,2,x);M=pa(this,b);ba=qa(this.L,15);Ea=sa(ba);ca=qa(this.K,7);Fa=sa(ca);for(U=286;257<U&&0===ba[U-1];U--);for(V=30;1<V&&0===ca[V-1];V--);var Ia=U,Ja=V,I=new (E?Uint32Array:Array)(Ia+Ja),t,J,v,da,H=new (E?Uint32Array:Array)(316),F,C,K=new (E?Uint8Array:Array)(19);for(t=J=0;t<Ia;t++)I[J++]=ba[t];for(t=0;t<Ja;t++)I[J++]=ca[t];if(!E){t=0;for(da=K.length;t<da;++t)K[t]=0}t=F=0;for(da=I.length;t<da;t+=J){for(J=1;t+J<da&&I[t+J]===I[t];++J);v=J;if(0===I[t])if(3>v)for(;0<\nv--;)H[F++]=0,K[0]++;else for(;0<v;)C=138>v?v:138,C>v-3&&C<v&&(C=v-3),10>=C?(H[F++]=17,H[F++]=C-3,K[17]++):(H[F++]=18,H[F++]=C-11,K[18]++),v-=C;else if(H[F++]=I[t],K[I[t]]++,v--,3>v)for(;0<v--;)H[F++]=I[t],K[I[t]]++;else for(;0<v;)C=6>v?v:6,C>v-3&&C<v&&(C=v-3),H[F++]=16,H[F++]=C-3,K[16]++,v-=C}d=E?H.subarray(0,F):H.slice(0,F);ka=qa(K,7);for(A=0;19>A;A++)ra[A]=ka[gb[A]];for(W=19;4<W&&0===ra[W-1];W--);Ga=sa(ka);D.d(U-257,5,x);D.d(V-1,5,x);D.d(W-4,4,x);for(A=0;A<W;A++)D.d(ra[A],3,x);A=0;for(Ha=d.length;A<\nHa;A++)if(X=d[A],D.d(Ga[X],ka[X],x),16<=X){A++;switch(X){case 16:la=2;break;case 17:la=3;break;case 18:la=7;break;default:l(\"invalid code: \"+X)}D.d(d[A],la,x)}var Ka=[Ea,ba],La=[Fa,ca],L,Ma,ea,ua,Na,Oa,Pa,Qa;Na=Ka[0];Oa=Ka[1];Pa=La[0];Qa=La[1];L=0;for(Ma=M.length;L<Ma;++L)if(ea=M[L],D.d(Na[ea],Oa[ea],x),256<ea)D.d(M[++L],M[++L],x),ua=M[++L],D.d(Pa[ua],Qa[ua],x),D.d(M[++L],M[++L],x);else if(256===ea)break;this.a=D.finish();this.b=this.a.length;break;default:l(\"invalid compression type\")}return this.a};\nfunction ta(d,a){this.length=d;this.G=a}\nvar va=function(){function d(b){switch(x){case 3===b:return[257,b-3,0];case 4===b:return[258,b-4,0];case 5===b:return[259,b-5,0];case 6===b:return[260,b-6,0];case 7===b:return[261,b-7,0];case 8===b:return[262,b-8,0];case 9===b:return[263,b-9,0];case 10===b:return[264,b-10,0];case 12>=b:return[265,b-11,1];case 14>=b:return[266,b-13,1];case 16>=b:return[267,b-15,1];case 18>=b:return[268,b-17,1];case 22>=b:return[269,b-19,2];case 26>=b:return[270,b-23,2];case 30>=b:return[271,b-27,2];case 34>=b:return[272,\nb-31,2];case 42>=b:return[273,b-35,3];case 50>=b:return[274,b-43,3];case 58>=b:return[275,b-51,3];case 66>=b:return[276,b-59,3];case 82>=b:return[277,b-67,4];case 98>=b:return[278,b-83,4];case 114>=b:return[279,b-99,4];case 130>=b:return[280,b-115,4];case 162>=b:return[281,b-131,5];case 194>=b:return[282,b-163,5];case 226>=b:return[283,b-195,5];case 257>=b:return[284,b-227,5];case 258===b:return[285,b-258,0];default:l(\"invalid length: \"+b)}}var a=[],c,f;for(c=3;258>=c;c++)f=d(c),a[c]=f[2]<<24|f[1]<<\n16|f[0];return a}(),wa=E?new Uint32Array(va):va;\nfunction pa(d,a){function c(b,c){var a=b.G,d=[],e=0,f;f=wa[b.length];d[e++]=f&65535;d[e++]=f>>16&255;d[e++]=f>>24;var g;switch(x){case 1===a:g=[0,a-1,0];break;case 2===a:g=[1,a-2,0];break;case 3===a:g=[2,a-3,0];break;case 4===a:g=[3,a-4,0];break;case 6>=a:g=[4,a-5,1];break;case 8>=a:g=[5,a-7,1];break;case 12>=a:g=[6,a-9,2];break;case 16>=a:g=[7,a-13,2];break;case 24>=a:g=[8,a-17,3];break;case 32>=a:g=[9,a-25,3];break;case 48>=a:g=[10,a-33,4];break;case 64>=a:g=[11,a-49,4];break;case 96>=a:g=[12,a-\n65,5];break;case 128>=a:g=[13,a-97,5];break;case 192>=a:g=[14,a-129,6];break;case 256>=a:g=[15,a-193,6];break;case 384>=a:g=[16,a-257,7];break;case 512>=a:g=[17,a-385,7];break;case 768>=a:g=[18,a-513,8];break;case 1024>=a:g=[19,a-769,8];break;case 1536>=a:g=[20,a-1025,9];break;case 2048>=a:g=[21,a-1537,9];break;case 3072>=a:g=[22,a-2049,10];break;case 4096>=a:g=[23,a-3073,10];break;case 6144>=a:g=[24,a-4097,11];break;case 8192>=a:g=[25,a-6145,11];break;case 12288>=a:g=[26,a-8193,12];break;case 16384>=\na:g=[27,a-12289,12];break;case 24576>=a:g=[28,a-16385,13];break;case 32768>=a:g=[29,a-24577,13];break;default:l(\"invalid distance\")}f=g;d[e++]=f[0];d[e++]=f[1];d[e++]=f[2];var h,k;h=0;for(k=d.length;h<k;++h)p[m++]=d[h];w[d[0]]++;y[d[3]]++;s=b.length+c-1;r=null}var f,b,e,g,h,k={},n,q,r,p=E?new Uint16Array(2*a.length):[],m=0,s=0,w=new (E?Uint32Array:Array)(286),y=new (E?Uint32Array:Array)(30),ja=d.w,B;if(!E){for(e=0;285>=e;)w[e++]=0;for(e=0;29>=e;)y[e++]=0}w[256]=1;f=0;for(b=a.length;f<b;++f){e=h=0;\nfor(g=3;e<g&&f+e!==b;++e)h=h<<8|a[f+e];k[h]===u&&(k[h]=[]);n=k[h];if(!(0<s--)){for(;0<n.length&&32768<f-n[0];)n.shift();if(f+3>=b){r&&c(r,-1);e=0;for(g=b-f;e<g;++e)B=a[f+e],p[m++]=B,++w[B];break}0<n.length?(q=xa(a,f,n),r?r.length<q.length?(B=a[f-1],p[m++]=B,++w[B],c(q,0)):c(r,-1):q.length<ja?r=q:c(q,0)):r?c(r,-1):(B=a[f],p[m++]=B,++w[B])}n.push(f)}p[m++]=256;w[256]++;d.L=w;d.K=y;return E?p.subarray(0,m):p}\nfunction xa(d,a,c){var f,b,e=0,g,h,k,n,q=d.length;h=0;n=c.length;a:for(;h<n;h++){f=c[n-h-1];g=3;if(3<e){for(k=e;3<k;k--)if(d[f+k-1]!==d[a+k-1])continue a;g=e}for(;258>g&&a+g<q&&d[f+g]===d[a+g];)++g;g>e&&(b=f,e=g);if(258===g)break}return new ta(e,a-b)}\nfunction qa(d,a){var c=d.length,f=new ha(572),b=new (E?Uint8Array:Array)(c),e,g,h,k,n;if(!E)for(k=0;k<c;k++)b[k]=0;for(k=0;k<c;++k)0<d[k]&&f.push(k,d[k]);e=Array(f.length/2);g=new (E?Uint32Array:Array)(f.length/2);if(1===e.length)return b[f.pop().index]=1,b;k=0;for(n=f.length/2;k<n;++k)e[k]=f.pop(),g[k]=e[k].value;h=ya(g,g.length,a);k=0;for(n=e.length;k<n;++k)b[e[k].index]=h[k];return b}\nfunction ya(d,a,c){function f(b){var c=k[b][n[b]];c===a?(f(b+1),f(b+1)):--g[c];++n[b]}var b=new (E?Uint16Array:Array)(c),e=new (E?Uint8Array:Array)(c),g=new (E?Uint8Array:Array)(a),h=Array(c),k=Array(c),n=Array(c),q=(1<<c)-a,r=1<<c-1,p,m,s,w,y;b[c-1]=a;for(m=0;m<c;++m)q<r?e[m]=0:(e[m]=1,q-=r),q<<=1,b[c-2-m]=(b[c-1-m]/2|0)+a;b[0]=e[0];h[0]=Array(b[0]);k[0]=Array(b[0]);for(m=1;m<c;++m)b[m]>2*b[m-1]+e[m]&&(b[m]=2*b[m-1]+e[m]),h[m]=Array(b[m]),k[m]=Array(b[m]);for(p=0;p<a;++p)g[p]=c;for(s=0;s<b[c-1];++s)h[c-\n1][s]=d[s],k[c-1][s]=s;for(p=0;p<c;++p)n[p]=0;1===e[c-1]&&(--g[0],++n[c-1]);for(m=c-2;0<=m;--m){w=p=0;y=n[m+1];for(s=0;s<b[m];s++)w=h[m+1][y]+h[m+1][y+1],w>d[p]?(h[m][s]=w,k[m][s]=a,y+=2):(h[m][s]=d[p],k[m][s]=p,++p);n[m]=0;1===e[m]&&f(m)}return g}\nfunction sa(d){var a=new (E?Uint16Array:Array)(d.length),c=[],f=[],b=0,e,g,h,k;e=0;for(g=d.length;e<g;e++)c[d[e]]=(c[d[e]]|0)+1;e=1;for(g=16;e<=g;e++)f[e]=b,b+=c[e]|0,b<<=1;e=0;for(g=d.length;e<g;e++){b=f[d[e]];f[d[e]]+=1;h=a[e]=0;for(k=d[e];h<k;h++)a[e]=a[e]<<1|b&1,b>>>=1}return a};function T(d,a){this.l=[];this.m=32768;this.e=this.g=this.c=this.q=0;this.input=E?new Uint8Array(d):d;this.s=!1;this.n=za;this.B=!1;if(a||!(a={}))a.index&&(this.c=a.index),a.bufferSize&&(this.m=a.bufferSize),a.bufferType&&(this.n=a.bufferType),a.resize&&(this.B=a.resize);switch(this.n){case Aa:this.b=32768;this.a=new (E?Uint8Array:Array)(32768+this.m+258);break;case za:this.b=0;this.a=new (E?Uint8Array:Array)(this.m);this.f=this.J;this.t=this.H;this.o=this.I;break;default:l(Error(\"invalid inflate mode\"))}}\nvar Aa=0,za=1,Ba={D:Aa,C:za};\nT.prototype.p=function(){for(;!this.s;){var d=Y(this,3);d&1&&(this.s=x);d>>>=1;switch(d){case 0:var a=this.input,c=this.c,f=this.a,b=this.b,e=u,g=u,h=u,k=f.length,n=u;this.e=this.g=0;e=a[c++];e===u&&l(Error(\"invalid uncompressed block header: LEN (first byte)\"));g=e;e=a[c++];e===u&&l(Error(\"invalid uncompressed block header: LEN (second byte)\"));g|=e<<8;e=a[c++];e===u&&l(Error(\"invalid uncompressed block header: NLEN (first byte)\"));h=e;e=a[c++];e===u&&l(Error(\"invalid uncompressed block header: NLEN (second byte)\"));h|=\ne<<8;g===~h&&l(Error(\"invalid uncompressed block header: length verify\"));c+g>a.length&&l(Error(\"input buffer is broken\"));switch(this.n){case Aa:for(;b+g>f.length;){n=k-b;g-=n;if(E)f.set(a.subarray(c,c+n),b),b+=n,c+=n;else for(;n--;)f[b++]=a[c++];this.b=b;f=this.f();b=this.b}break;case za:for(;b+g>f.length;)f=this.f({v:2});break;default:l(Error(\"invalid inflate mode\"))}if(E)f.set(a.subarray(c,c+g),b),b+=g,c+=g;else for(;g--;)f[b++]=a[c++];this.c=c;this.b=b;this.a=f;break;case 1:this.o(Ca,Ra);break;\ncase 2:Sa(this);break;default:l(Error(\"unknown BTYPE: \"+d))}}return this.t()};\nvar Ta=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],Ua=E?new Uint16Array(Ta):Ta,Va=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],Wa=E?new Uint16Array(Va):Va,Xa=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],Ya=E?new Uint8Array(Xa):Xa,Za=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],$a=E?new Uint16Array(Za):Za,ab=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,\n10,11,11,12,12,13,13],bb=E?new Uint8Array(ab):ab,cb=new (E?Uint8Array:Array)(288),Z,db;Z=0;for(db=cb.length;Z<db;++Z)cb[Z]=143>=Z?8:255>=Z?9:279>=Z?7:8;var Ca=R(cb),eb=new (E?Uint8Array:Array)(30),fb,hb;fb=0;for(hb=eb.length;fb<hb;++fb)eb[fb]=5;var Ra=R(eb);function Y(d,a){for(var c=d.g,f=d.e,b=d.input,e=d.c,g;f<a;)g=b[e++],g===u&&l(Error(\"input buffer is broken\")),c|=g<<f,f+=8;g=c&(1<<a)-1;d.g=c>>>a;d.e=f-a;d.c=e;return g}\nfunction ib(d,a){for(var c=d.g,f=d.e,b=d.input,e=d.c,g=a[0],h=a[1],k,n,q;f<h;){k=b[e++];if(k===u)break;c|=k<<f;f+=8}n=g[c&(1<<h)-1];q=n>>>16;d.g=c>>q;d.e=f-q;d.c=e;return n&65535}\nfunction Sa(d){function a(a,b,c){var d,f,e,g;for(g=0;g<a;)switch(d=ib(this,b),d){case 16:for(e=3+Y(this,2);e--;)c[g++]=f;break;case 17:for(e=3+Y(this,3);e--;)c[g++]=0;f=0;break;case 18:for(e=11+Y(this,7);e--;)c[g++]=0;f=0;break;default:f=c[g++]=d}return c}var c=Y(d,5)+257,f=Y(d,5)+1,b=Y(d,4)+4,e=new (E?Uint8Array:Array)(Ua.length),g,h,k,n;for(n=0;n<b;++n)e[Ua[n]]=Y(d,3);g=R(e);h=new (E?Uint8Array:Array)(c);k=new (E?Uint8Array:Array)(f);d.o(R(a.call(d,c,g,h)),R(a.call(d,f,g,k)))}\nT.prototype.o=function(d,a){var c=this.a,f=this.b;this.u=d;for(var b=c.length-258,e,g,h,k;256!==(e=ib(this,d));)if(256>e)f>=b&&(this.b=f,c=this.f(),f=this.b),c[f++]=e;else{g=e-257;k=Wa[g];0<Ya[g]&&(k+=Y(this,Ya[g]));e=ib(this,a);h=$a[e];0<bb[e]&&(h+=Y(this,bb[e]));f>=b&&(this.b=f,c=this.f(),f=this.b);for(;k--;)c[f]=c[f++-h]}for(;8<=this.e;)this.e-=8,this.c--;this.b=f};\nT.prototype.I=function(d,a){var c=this.a,f=this.b;this.u=d;for(var b=c.length,e,g,h,k;256!==(e=ib(this,d));)if(256>e)f>=b&&(c=this.f(),b=c.length),c[f++]=e;else{g=e-257;k=Wa[g];0<Ya[g]&&(k+=Y(this,Ya[g]));e=ib(this,a);h=$a[e];0<bb[e]&&(h+=Y(this,bb[e]));f+k>b&&(c=this.f(),b=c.length);for(;k--;)c[f]=c[f++-h]}for(;8<=this.e;)this.e-=8,this.c--;this.b=f};\nT.prototype.f=function(){var d=new (E?Uint8Array:Array)(this.b-32768),a=this.b-32768,c,f,b=this.a;if(E)d.set(b.subarray(32768,d.length));else{c=0;for(f=d.length;c<f;++c)d[c]=b[c+32768]}this.l.push(d);this.q+=d.length;if(E)b.set(b.subarray(a,a+32768));else for(c=0;32768>c;++c)b[c]=b[a+c];this.b=32768;return b};\nT.prototype.J=function(d){var a,c=this.input.length/this.c+1|0,f,b,e,g=this.input,h=this.a;d&&(\"number\"===typeof d.v&&(c=d.v),\"number\"===typeof d.F&&(c+=d.F));2>c?(f=(g.length-this.c)/this.u[2],e=258*(f/2)|0,b=e<h.length?h.length+e:h.length<<1):b=h.length*c;E?(a=new Uint8Array(b),a.set(h)):a=h;return this.a=a};\nT.prototype.t=function(){var d=0,a=this.a,c=this.l,f,b=new (E?Uint8Array:Array)(this.q+(this.b-32768)),e,g,h,k;if(0===c.length)return E?this.a.subarray(32768,this.b):this.a.slice(32768,this.b);e=0;for(g=c.length;e<g;++e){f=c[e];h=0;for(k=f.length;h<k;++h)b[d++]=f[h]}e=32768;for(g=this.b;e<g;++e)b[d++]=a[e];this.l=[];return this.buffer=b};\nT.prototype.H=function(){var d,a=this.b;E?this.B?(d=new Uint8Array(a),d.set(this.a.subarray(0,a))):d=this.a.subarray(0,a):(this.a.length>a&&(this.a.length=a),d=this.a);return this.buffer=d};function jb(d){if(\"string\"===typeof d){var a=d.split(\"\"),c,f;c=0;for(f=a.length;c<f;c++)a[c]=(a[c].charCodeAt(0)&255)>>>0;d=a}for(var b=1,e=0,g=d.length,h,k=0;0<g;){h=1024<g?1024:g;g-=h;do b+=d[k++],e+=b;while(--h);b%=65521;e%=65521}return(e<<16|b)>>>0};function kb(d,a){var c,f;this.input=d;this.c=0;if(a||!(a={}))a.index&&(this.c=a.index),a.verify&&(this.M=a.verify);c=d[this.c++];f=d[this.c++];switch(c&15){case lb:this.method=lb;break;default:l(Error(\"unsupported compression method\"))}0!==((c<<8)+f)%31&&l(Error(\"invalid fcheck flag:\"+((c<<8)+f)%31));f&32&&l(Error(\"fdict flag is not supported\"));this.A=new T(d,{index:this.c,bufferSize:a.bufferSize,bufferType:a.bufferType,resize:a.resize})}\nkb.prototype.p=function(){var d=this.input,a,c;a=this.A.p();this.c=this.A.c;this.M&&(c=(d[this.c++]<<24|d[this.c++]<<16|d[this.c++]<<8|d[this.c++])>>>0,c!==jb(a)&&l(Error(\"invalid adler-32 checksum\")));return a};var lb=8;function mb(d,a){this.input=d;this.a=new (E?Uint8Array:Array)(32768);this.h=$.k;var c={},f;if((a||!(a={}))&&\"number\"===typeof a.compressionType)this.h=a.compressionType;for(f in a)c[f]=a[f];c.outputBuffer=this.a;this.z=new ia(this.input,c)}var $=na;\nmb.prototype.j=function(){var d,a,c,f,b,e,g,h=0;g=this.a;d=lb;switch(d){case lb:a=Math.LOG2E*Math.log(32768)-8;break;default:l(Error(\"invalid compression method\"))}c=a<<4|d;g[h++]=c;switch(d){case lb:switch(this.h){case $.NONE:b=0;break;case $.r:b=1;break;case $.k:b=2;break;default:l(Error(\"unsupported compression type\"))}break;default:l(Error(\"invalid compression method\"))}f=b<<6|0;g[h++]=f|31-(256*c+f)%31;e=jb(this.input);this.z.b=h;g=this.z.j();h=g.length;E&&(g=new Uint8Array(g.buffer),g.length<=\nh+4&&(this.a=new Uint8Array(g.length+4),this.a.set(g),g=this.a),g=g.subarray(0,h+4));g[h++]=e>>24&255;g[h++]=e>>16&255;g[h++]=e>>8&255;g[h++]=e&255;return g};function nb(d,a){var c,f,b,e;if(Object.keys)c=Object.keys(a);else for(f in c=[],b=0,a)c[b++]=f;b=0;for(e=c.length;b<e;++b)f=c[b],z(d+\".\"+f,a[f])};z(\"Zlib.Inflate\",kb);z(\"Zlib.Inflate.prototype.decompress\",kb.prototype.p);nb(\"Zlib.Inflate.BufferType\",{ADAPTIVE:Ba.C,BLOCK:Ba.D});z(\"Zlib.Deflate\",mb);z(\"Zlib.Deflate.compress\",function(d,a){return(new mb(d,a)).j()});z(\"Zlib.Deflate.prototype.compress\",mb.prototype.j);nb(\"Zlib.Deflate.CompressionType\",{NONE:$.NONE,FIXED:$.r,DYNAMIC:$.k});}).call(this);\n*/\n\n$module = {\n\n/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */\n\n\ndecompress= function (data) {\n   var _inflate = new _zlib.Inflate(data)\n   return _inflate.decompress()\n}\n\ncompress= function (data) {\n   var _deflate = new _zlib.Deflate(data)\n   return _deflate.compress()\n}\n\n\n} // end $module\n", "/libs/crypto_js/rollups/sha224.js": "var CryptoJS=CryptoJS||function(g,l){var f={},k=f.lib={},h=function(){},m=k.Base={extend:function(a){h.prototype=this;var c=new h();a&&c.mixIn(a);c.hasOwnProperty(\"init\")||(c.init=function(){c.$super.init.apply(this,arguments);});c.init.prototype=c;c.$super=this;return c;},create:function(){var a=this.extend();a.init.apply(a,arguments);return a;},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString);},clone:function(){return this.init.prototype.extend(this);}},q=k.WordArray=m.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=l?c:4*a.length;},toString:function(a){return(a||s).stringify(this);},concat:function(a){var c=this.words,d=a.words,b=this.sigBytes;a=a.sigBytes;this.clamp();if(b%4)for(var e=0;e<a;e++)c[b+e>>>2]|=(d[e>>>2]>>>24-8*(e%4)&255)<<24-8*((b+e)%4);else if(65535<d.length)for(e=0;e<a;e+=4)c[b+e>>>2]=d[e>>>2];else c.push.apply(c,d);this.sigBytes+=a;return this;},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<32-8*(c%4);a.length=g.ceil(c/4);},clone:function(){var a=m.clone.call(this);a.words=this.words.slice(0);return a;},random:function(a){for(var c=[],d=0;d<a;d+=4)c.push(4294967296*g.random()|0);return new q.init(c,a);}}),t=f.enc={},s=t.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++){var e=c[b>>>2]>>>24-8*(b%4)&255;d.push((e>>>4).toString(16));d.push((e&15).toString(16));}return d.join(\"\");},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b+=2)d[b>>>3]|=parseInt(a.substr(b,2),16)<<24-4*(b%8);return new q.init(d,c/2);}},n=t.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var d=[],b=0;b<a;b++)d.push(String.fromCharCode(c[b>>>2]>>>24-8*(b%4)&255));return d.join(\"\");},parse:function(a){for(var c=a.length,d=[],b=0;b<c;b++)d[b>>>2]|=(a.charCodeAt(b)&255)<<24-8*(b%4);return new q.init(d,c);}},j=t.Utf8={stringify:function(a){try{return decodeURIComponent(escape(n.stringify(a)));}catch(c){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return n.parse(unescape(encodeURIComponent(a)));}},w=k.BufferedBlockAlgorithm=m.extend({reset:function(){this._data=new q.init();this._nDataBytes=0;},_append:function(a){\"string\"==typeof a&&(a=j.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes;},_process:function(a){var c=this._data,d=c.words,b=c.sigBytes,e=this.blockSize,f=b/(4*e),f=a?g.ceil(f):g.max((f|0)-this._minBufferSize,0);a=f*e;b=g.min(4*a,b);if(a){for(var u=0;u<a;u+=e)this._doProcessBlock(d,u);u=d.splice(0,a);c.sigBytes-=b;}return new q.init(u,b);},clone:function(){var a=m.clone.call(this);a._data=this._data.clone();return a;},_minBufferSize:0});k.Hasher=w.extend({cfg:m.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset();},reset:function(){w.reset.call(this);this._doReset();},update:function(a){this._append(a);this._process();return this;},finalize:function(a){a&&this._append(a);return this._doFinalize();},blockSize:16,_createHelper:function(a){return function(c,d){return new a.init(d).finalize(c);};},_createHmacHelper:function(a){return function(c,d){return new v.HMAC.init(a,d).finalize(c);};}});var v=f.algo={};return f;}(Math);(function(g){for(var l=CryptoJS,f=l.lib,k=f.WordArray,h=f.Hasher,f=l.algo,m=[],q=[],t=function(a){return 4294967296*(a-(a|0))|0;},s=2,n=0;64>n;){var j;a:{j=s;for(var w=g.sqrt(j),v=2;v<=w;v++)if(!(j%v)){j=!1;break a;}j=!0;}j&&(8>n&&(m[n]=t(g.pow(s,0.5))),q[n]=t(g.pow(s,1/3)),n++);s++;}var a=[],f=f.SHA256=h.extend({_doReset:function(){this._hash=new k.init(m.slice(0));},_doProcessBlock:function(c,d){for(var b=this._hash.words,e=b[0],f=b[1],g=b[2],k=b[3],h=b[4],l=b[5],m=b[6],n=b[7],p=0;64>p;p++){if(16>p)a[p]=c[d+p]|0;else{var j=a[p-15],r=a[p-2];a[p]=((j<<25|j>>>7)^(j<<14|j>>>18)^j>>>3)+a[p-7]+((r<<15|r>>>17)^(r<<13|r>>>19)^r>>>10)+a[p-16];}j=n+((h<<26|h>>>6)^(h<<21|h>>>11)^(h<<7|h>>>25))+(h&l^~h&m)+q[p]+a[p];r=((e<<30|e>>>2)^(e<<19|e>>>13)^(e<<10|e>>>22))+(e&f^e&g^f&g);n=m;m=l;l=h;h=k+j|0;k=g;g=f;f=e;e=j+r|0;}b[0]=b[0]+e|0;b[1]=b[1]+f|0;b[2]=b[2]+g|0;b[3]=b[3]+k|0;b[4]=b[4]+h|0;b[5]=b[5]+l|0;b[6]=b[6]+m|0;b[7]=b[7]+n|0;},_doFinalize:function(){var a=this._data,d=a.words,b=8*this._nDataBytes,e=8*a.sigBytes;d[e>>>5]|=128<<24-e%32;d[(e+64>>>9<<4)+14]=g.floor(b/4294967296);d[(e+64>>>9<<4)+15]=b;a.sigBytes=4*d.length;this._process();return this._hash;},clone:function(){var a=h.clone.call(this);a._hash=this._hash.clone();return a;}});l.SHA256=h._createHelper(f);l.HmacSHA256=h._createHmacHelper(f);})(Math);(function(){var g=CryptoJS,l=g.lib.WordArray,f=g.algo,k=f.SHA256,f=f.SHA224=k.extend({_doReset:function(){this._hash=new l.init([3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]);},_doFinalize:function(){var f=k._doFinalize.call(this);f.sigBytes-=4;return f;}});g.SHA224=k._createHelper(f);g.HmacSHA224=k._createHmacHelper(f);})();", "/Lib/threading.py": "\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"\r\nimport sys as _sys\r\nimport _thread\r\nfrom time import sleep as _sleep\r\ntry:\r\n    from time import monotonic as _time\r\nexcept ImportError:\r\n    from time import time as _time\r\nfrom traceback import format_exc as _format_exc\r\nfrom _weakrefset import WeakSet\r\n__all__ = ['active_count', 'Condition', 'current_thread', 'enumerate', 'Event',\r\n           'Lock', 'RLock', 'Semaphore', 'BoundedSemaphore', 'Thread', 'Barrier',\r\n           'Timer', 'ThreadError', 'setprofile', 'settrace', 'local', 'stack_size']\r\n_start_new_thread = _thread.start_new_thread\r\n_allocate_lock = _thread.allocate_lock\r\nget_ident = _thread.get_ident\r\nThreadError = _thread.error\r\ntry:\r\n    _CRLock = _thread.RLock\r\nexcept AttributeError:\r\n    _CRLock = None\r\nTIMEOUT_MAX = _thread.TIMEOUT_MAX\r\ndel _thread\r\n_profile_hook = None\r\n_trace_hook = None\r\ndef setprofile(func):\r\n    global _profile_hook\r\n    _profile_hook = func\r\ndef settrace(func):\r\n    global _trace_hook\r\n    _trace_hook = func\r\nLock = _allocate_lock\r\ndef RLock(*args, **kwargs):\r\n    if _CRLock is None:\r\n        return _PyRLock(*args, **kwargs)\r\n    return _CRLock(*args, **kwargs)\r\nclass _RLock:\r\n    def __init__(self):\r\n        self._block = _allocate_lock()\r\n        self._owner = None\r\n        self._count = 0\r\n    def __repr__(self):\r\n        owner = self._owner\r\n        try:\r\n            owner = _active[owner].name\r\n        except KeyError:\r\n            pass\r\n        return \"<%s owner=%r count=%d>\" % (\r\n                self.__class__.__name__, owner, self._count)\r\n    def acquire(self, blocking=True, timeout=-1):\r\n        me = get_ident()\r\n        if self._owner == me:\r\n            self._count = self._count + 1\r\n            return 1\r\n        rc = self._block.acquire(blocking, timeout)\r\n        if rc:\r\n            self._owner = me\r\n            self._count = 1\r\n        return rc\r\n    __enter__ = acquire\r\n    def release(self):\r\n        if self._owner != get_ident():\r\n            raise RuntimeError(\"cannot release un-acquired lock\")\r\n        self._count = count = self._count - 1\r\n        if not count:\r\n            self._owner = None\r\n            self._block.release()\r\n    def __exit__(self, t, v, tb):\r\n        self.release()\r\n    def _acquire_restore(self, state):\r\n        self._block.acquire()\r\n        self._count, self._owner = state\r\n    def _release_save(self):\r\n        if self._count == 0:\r\n            raise RuntimeError(\"cannot release un-acquired lock\")\r\n        count = self._count\r\n        self._count = 0\r\n        owner = self._owner\r\n        self._owner = None\r\n        self._block.release()\r\n        return (count, owner)\r\n    def _is_owned(self):\r\n        return self._owner == get_ident()\r\n_PyRLock = _RLock\r\nclass Condition:\r\n    def __init__(self, lock=None):\r\n        if lock is None:\r\n            lock = RLock()\r\n        self._lock = lock\r\n        self.acquire = lock.acquire\r\n        self.release = lock.release\r\n        try:\r\n            self._release_save = lock._release_save\r\n        except AttributeError:\r\n            pass\r\n        try:\r\n            self._acquire_restore = lock._acquire_restore\r\n        except AttributeError:\r\n            pass\r\n        try:\r\n            self._is_owned = lock._is_owned\r\n        except AttributeError:\r\n            pass\r\n        self._waiters = []\r\n    def __enter__(self):\r\n        return self._lock.__enter__()\r\n    def __exit__(self, *args):\r\n        return self._lock.__exit__(*args)\r\n    def __repr__(self):\r\n        return \"<Condition(%s, %d)>\" % (self._lock, len(self._waiters))\r\n    def _release_save(self):\r\n        self._lock.release()           # No state to save\r\n    def _acquire_restore(self, x):\r\n        self._lock.acquire()           # Ignore saved state\r\n    def _is_owned(self):\r\n        if self._lock.acquire(0):\r\n            self._lock.release()\r\n            return False\r\n        else:\r\n            return True\r\n    def wait(self, timeout=None):\r\n        if not self._is_owned():\r\n            raise RuntimeError(\"cannot wait on un-acquired lock\")\r\n        waiter = _allocate_lock()\r\n        waiter.acquire()\r\n        self._waiters.append(waiter)\r\n        saved_state = self._release_save()\r\n        try:    # restore state no matter what (e.g., KeyboardInterrupt)\r\n            if timeout is None:\r\n                waiter.acquire()\r\n                gotit = True\r\n            else:\r\n                if timeout > 0:\r\n                    gotit = waiter.acquire(True, timeout)\r\n                else:\r\n                    gotit = waiter.acquire(False)\r\n                if not gotit:\r\n                    try:\r\n                        self._waiters.remove(waiter)\r\n                    except ValueError:\r\n                        pass\r\n            return gotit\r\n        finally:\r\n            self._acquire_restore(saved_state)\r\n    def wait_for(self, predicate, timeout=None):\r\n        endtime = None\r\n        waittime = timeout\r\n        result = predicate()\r\n        while not result:\r\n            if waittime is not None:\r\n                if endtime is None:\r\n                    endtime = _time() + waittime\r\n                else:\r\n                    waittime = endtime - _time()\r\n                    if waittime <= 0:\r\n                        break\r\n            self.wait(waittime)\r\n            result = predicate()\r\n        return result\r\n    def notify(self, n=1):\r\n        if not self._is_owned():\r\n            raise RuntimeError(\"cannot notify on un-acquired lock\")\r\n        __waiters = self._waiters\r\n        waiters = __waiters[:n]\r\n        if not waiters:\r\n            return\r\n        for waiter in waiters:\r\n            waiter.release()\r\n            try:\r\n                __waiters.remove(waiter)\r\n            except ValueError:\r\n                pass\r\n    def notify_all(self):\r\n        self.notify(len(self._waiters))\r\n    notifyAll = notify_all\r\nclass Semaphore:\r\n    def __init__(self, value=1):\r\n        if value < 0:\r\n            raise ValueError(\"semaphore initial value must be >= 0\")\r\n        self._cond = Condition(Lock())\r\n        self._value = value\r\n    def acquire(self, blocking=True, timeout=None):\r\n        if not blocking and timeout is not None:\r\n            raise ValueError(\"can't specify timeout for non-blocking acquire\")\r\n        rc = False\r\n        endtime = None\r\n        self._cond.acquire()\r\n        while self._value == 0:\r\n            if not blocking:\r\n                break\r\n            if timeout is not None:\r\n                if endtime is None:\r\n                    endtime = _time() + timeout\r\n                else:\r\n                    timeout = endtime - _time()\r\n                    if timeout <= 0:\r\n                        break\r\n            self._cond.wait(timeout)\r\n        else:\r\n            self._value = self._value - 1\r\n            rc = True\r\n        self._cond.release()\r\n        return rc\r\n    __enter__ = acquire\r\n    def release(self):\r\n        self._cond.acquire()\r\n        self._value = self._value + 1\r\n        self._cond.notify()\r\n        self._cond.release()\r\n    def __exit__(self, t, v, tb):\r\n        self.release()\r\nclass BoundedSemaphore(Semaphore):\r\n    \"\"\"Semaphore that checks that # releases is <= # acquires\"\"\"\r\n    def __init__(self, value=1):\r\n        Semaphore.__init__(self, value)\r\n        self._initial_value = value\r\n    def release(self):\r\n        if self._value >= self._initial_value:\r\n            raise ValueError(\"Semaphore released too many times\")\r\n        return Semaphore.release(self)\r\nclass Event:\r\n    def __init__(self):\r\n        self._cond = Condition(Lock())\r\n        self._flag = False\r\n    def _reset_internal_locks(self):\r\n        self._cond.__init__()\r\n    def is_set(self):\r\n        return self._flag\r\n    isSet = is_set\r\n    def set(self):\r\n        self._cond.acquire()\r\n        try:\r\n            self._flag = True\r\n            self._cond.notify_all()\r\n        finally:\r\n            self._cond.release()\r\n    def clear(self):\r\n        self._cond.acquire()\r\n        try:\r\n            self._flag = False\r\n        finally:\r\n            self._cond.release()\r\n    def wait(self, timeout=None):\r\n        self._cond.acquire()\r\n        try:\r\n            signaled = self._flag\r\n            if not signaled:\r\n                signaled = self._cond.wait(timeout)\r\n            return signaled\r\n        finally:\r\n            self._cond.release()\r\nclass Barrier:\r\n    \"\"\"\r\n    Barrier.  Useful for synchronizing a fixed number of threads\r\n    at known synchronization points.  Threads block on 'wait()' and are\r\n    simultaneously once they have all made that call.\r\n    \"\"\"\r\n    def __init__(self, parties, action=None, timeout=None):\r\n        \"\"\"\r\n        Create a barrier, initialised to 'parties' threads.\r\n        'action' is a callable which, when supplied, will be called\r\n        by one of the threads after they have all entered the\r\n        barrier and just prior to releasing them all.\r\n        If a 'timeout' is provided, it is uses as the default for\r\n        all subsequent 'wait()' calls.\r\n        \"\"\"\r\n        self._cond = Condition(Lock())\r\n        self._action = action\r\n        self._timeout = timeout\r\n        self._parties = parties\r\n        self._state = 0 #0 filling, 1, draining, -1 resetting, -2 broken\r\n        self._count = 0\r\n    def wait(self, timeout=None):\r\n        \"\"\"\r\n        Wait for the barrier.  When the specified number of threads have\r\n        started waiting, they are all simultaneously awoken. If an 'action'\r\n        was provided for the barrier, one of the threads will have executed\r\n        that callback prior to returning.\r\n        Returns an individual index number from 0 to 'parties-1'.\r\n        \"\"\"\r\n        if timeout is None:\r\n            timeout = self._timeout\r\n        with self._cond:\r\n            self._enter() # Block while the barrier drains.\r\n            index = self._count\r\n            self._count += 1\r\n            try:\r\n                if index + 1 == self._parties:\r\n                    self._release()\r\n                else:\r\n                    self._wait(timeout)\r\n                return index\r\n            finally:\r\n                self._count -= 1\r\n                self._exit()\r\n    def _enter(self):\r\n        while self._state in (-1, 1):\r\n            self._cond.wait()\r\n        if self._state < 0:\r\n            raise BrokenBarrierError\r\n        assert self._state == 0\r\n    def _release(self):\r\n        try:\r\n            if self._action:\r\n                self._action()\r\n            self._state = 1\r\n            self._cond.notify_all()\r\n        except:\r\n            self._break()\r\n            raise\r\n    def _wait(self, timeout):\r\n        if not self._cond.wait_for(lambda : self._state != 0, timeout):\r\n            self._break()\r\n            raise BrokenBarrierError\r\n        if self._state < 0:\r\n            raise BrokenBarrierError\r\n        assert self._state == 1\r\n    def _exit(self):\r\n        if self._count == 0:\r\n            if self._state in (-1, 1):\r\n                self._state = 0\r\n                self._cond.notify_all()\r\n    def reset(self):\r\n        \"\"\"\r\n        Reset the barrier to the initial state.\r\n        Any threads currently waiting will get the BrokenBarrier exception\r\n        raised.\r\n        \"\"\"\r\n        with self._cond:\r\n            if self._count > 0:\r\n                if self._state == 0:\r\n                    self._state = -1\r\n                elif self._state == -2:\r\n                    self._state = -1\r\n            else:\r\n                self._state = 0\r\n            self._cond.notify_all()\r\n    def abort(self):\r\n        \"\"\"\r\n        Place the barrier into a 'broken' state.\r\n        Useful in case of error.  Any currently waiting threads and\r\n        threads attempting to 'wait()' will have BrokenBarrierError\r\n        raised.\r\n        \"\"\"\r\n        with self._cond:\r\n            self._break()\r\n    def _break(self):\r\n        self._state = -2\r\n        self._cond.notify_all()\r\n    @property\r\n    def parties(self):\r\n        \"\"\"\r\n        Return the number of threads required to trip the barrier.\r\n        \"\"\"\r\n        return self._parties\r\n    @property\r\n    def n_waiting(self):\r\n        \"\"\"\r\n        Return the number of threads that are currently waiting at the barrier.\r\n        \"\"\"\r\n        if self._state == 0:\r\n            return self._count\r\n        return 0\r\n    @property\r\n    def broken(self):\r\n        \"\"\"\r\n        Return True if the barrier is in a broken state\r\n        \"\"\"\r\n        return self._state == -2\r\nclass BrokenBarrierError(RuntimeError): pass\r\n_counter = 0\r\ndef _newname(template=\"Thread-%d\"):\r\n    global _counter\r\n    _counter = _counter + 1\r\n    return template % _counter\r\n_active_limbo_lock = _allocate_lock()\r\n_active = {}    # maps thread id to Thread object\r\n_limbo = {}\r\n_dangling = WeakSet()\r\nclass Thread:\r\n    __initialized = False\r\n    __exc_info = _sys.exc_info\r\n    def __init__(self, group=None, target=None, name=None,\r\n                 args=(), kwargs=None, *, daemon=None):\r\n        assert group is None, \"group argument must be None for now\"\r\n        if kwargs is None:\r\n            kwargs = {}\r\n        self._target = target\r\n        self._name = str(name or _newname())\r\n        self._args = args\r\n        self._kwargs = kwargs\r\n        if daemon is not None:\r\n            self._daemonic = daemon\r\n        else:\r\n            self._daemonic = current_thread().daemon\r\n        self._ident = None\r\n        self._started = Event()\r\n        self._stopped = False\r\n        self._block = Condition(Lock())\r\n        self._initialized = True\r\n        self._stderr = _sys.stderr\r\n        _dangling.add(self)\r\n    def _reset_internal_locks(self):\r\n        if hasattr(self, '_block'):  # DummyThread deletes _block\r\n            self._block.__init__()\r\n        self._started._reset_internal_locks()\r\n    def __repr__(self):\r\n        assert self._initialized, \"Thread.__init__() was not called\"\r\n        status = \"initial\"\r\n        if self._started.is_set():\r\n            status = \"started\"\r\n        if self._stopped:\r\n            status = \"stopped\"\r\n        if self._daemonic:\r\n            status += \" daemon\"\r\n        if self._ident is not None:\r\n            status += \" %s\" % self._ident\r\n        return \"<%s(%s, %s)>\" % (self.__class__.__name__, self._name, status)\r\n    def start(self):\r\n        if not self._initialized:\r\n            raise RuntimeError(\"thread.__init__() not called\")\r\n        if self._started.is_set():\r\n            raise RuntimeError(\"threads can only be started once\")\r\n        with _active_limbo_lock:\r\n            _limbo[self] = self\r\n        try:\r\n            _start_new_thread(self._bootstrap, ())\r\n        except Exception:\r\n            with _active_limbo_lock:\r\n                del _limbo[self]\r\n            raise\r\n        self._started.wait()\r\n    def run(self):\r\n        try:\r\n            if self._target:\r\n                self._target(*self._args, **self._kwargs)\r\n        finally:\r\n            del self._target, self._args, self._kwargs\r\n    def _bootstrap(self):\r\n        try:\r\n            self._bootstrap_inner()\r\n        except:\r\n            if self._daemonic and _sys is None:\r\n                return\r\n            raise\r\n    def _set_ident(self):\r\n        self._ident = get_ident()\r\n    def _bootstrap_inner(self):\r\n        try:\r\n            self._set_ident()\r\n            self._started.set()\r\n            with _active_limbo_lock:\r\n                _active[self._ident] = self\r\n                del _limbo[self]\r\n            if _trace_hook:\r\n                _sys.settrace(_trace_hook)\r\n            if _profile_hook:\r\n                _sys.setprofile(_profile_hook)\r\n            try:\r\n                self.run()\r\n            except SystemExit:\r\n                pass\r\n            except:\r\n                if _sys:\r\n                    _sys.stderr.write(\"Exception in thread %s:\\n%s\\n\" %\r\n                                      (self.name, _format_exc()))\r\n                else:\r\n                    exc_type, exc_value, exc_tb = self._exc_info()\r\n                    try:\r\n                        print((\r\n                            \"Exception in thread \" + self.name +\r\n                            \" (most likely raised during interpreter shutdown):\"), file=self._stderr)\r\n                        print((\r\n                            \"Traceback (most recent call last):\"), file=self._stderr)\r\n                        while exc_tb:\r\n                            print((\r\n                                '  File \"%s\", line %s, in %s' %\r\n                                (exc_tb.tb_frame.f_code.co_filename,\r\n                                    exc_tb.tb_lineno,\r\n                                    exc_tb.tb_frame.f_code.co_name)), file=self._stderr)\r\n                            exc_tb = exc_tb.tb_next\r\n                        print((\"%s: %s\" % (exc_type, exc_value)), file=self._stderr)\r\n                    finally:\r\n                        del exc_type, exc_value, exc_tb\r\n            finally:\r\n                pass\r\n        finally:\r\n            with _active_limbo_lock:\r\n                self._stop()\r\n                try:\r\n                    del _active[get_ident()]\r\n                except:\r\n                    pass\r\n    def _stop(self):\r\n        self._block.acquire()\r\n        self._stopped = True\r\n        self._block.notify_all()\r\n        self._block.release()\r\n    def _delete(self):\r\n        \"Remove current thread from the dict of currently running threads.\"\r\n        try:\r\n            with _active_limbo_lock:\r\n                del _active[get_ident()]\r\n        except KeyError:\r\n            if 'dummy_threading' not in _sys.modules:\r\n                raise\r\n    def join(self, timeout=None):\r\n        if not self._initialized:\r\n            raise RuntimeError(\"Thread.__init__() not called\")\r\n        if not self._started.is_set():\r\n            raise RuntimeError(\"cannot join thread before it is started\")\r\n        if self is current_thread():\r\n            raise RuntimeError(\"cannot join current thread\")\r\n        self._block.acquire()\r\n        try:\r\n            if timeout is None:\r\n                while not self._stopped:\r\n                    self._block.wait()\r\n            else:\r\n                deadline = _time() + timeout\r\n                while not self._stopped:\r\n                    delay = deadline - _time()\r\n                    if delay <= 0:\r\n                        break\r\n                    self._block.wait(delay)\r\n        finally:\r\n            self._block.release()\r\n    @property\r\n    def name(self):\r\n        assert self._initialized, \"Thread.__init__() not called\"\r\n        return self._name\r\n    @name.setter\r\n    def name(self, name):\r\n        assert self._initialized, \"Thread.__init__() not called\"\r\n        self._name = str(name)\r\n    @property\r\n    def ident(self):\r\n        assert self._initialized, \"Thread.__init__() not called\"\r\n        return self._ident\r\n    def is_alive(self):\r\n        assert self._initialized, \"Thread.__init__() not called\"\r\n        return self._started.is_set() and not self._stopped\r\n    isAlive = is_alive\r\n    @property\r\n    def daemon(self):\r\n        assert self._initialized, \"Thread.__init__() not called\"\r\n        return self._daemonic\r\n    @daemon.setter\r\n    def daemon(self, daemonic):\r\n        if not self._initialized:\r\n            raise RuntimeError(\"Thread.__init__() not called\")\r\n        if self._started.is_set():\r\n            raise RuntimeError(\"cannot set daemon status of active thread\");\r\n        self._daemonic = daemonic\r\n    def isDaemon(self):\r\n        return self.daemon\r\n    def setDaemon(self, daemonic):\r\n        self.daemon = daemonic\r\n    def getName(self):\r\n        return self.name\r\n    def setName(self, name):\r\n        self.name = name\r\nclass Timer(Thread):\r\n    \"\"\"Call a function after a specified number of seconds:\r\n    t = Timer(30.0, f, args=[], kwargs={})\r\n    t.start()\r\n    t.cancel() # stop the timer's action if it's still waiting\r\n    \"\"\"\r\n    def __init__(self, interval, function, args=[], kwargs={}):\r\n        Thread.__init__(self)\r\n        self.interval = interval\r\n        self.function = function\r\n        self.args = args\r\n        self.kwargs = kwargs\r\n        self.finished = Event()\r\n    def cancel(self):\r\n        \"\"\"Stop the timer if it hasn't finished yet\"\"\"\r\n        self.finished.set()\r\n    def run(self):\r\n        self.finished.wait(self.interval)\r\n        if not self.finished.is_set():\r\n            self.function(*self.args, **self.kwargs)\r\n        self.finished.set()\r\nclass _MainThread(Thread):\r\n    def __init__(self):\r\n        Thread.__init__(self, name=\"MainThread\", daemon=False)\r\n        self._started.set()\r\n        self._set_ident()\r\n        with _active_limbo_lock:\r\n            _active[self._ident] = self\r\n    def _exitfunc(self):\r\n        self._stop()\r\n        t = _pickSomeNonDaemonThread()\r\n        while t:\r\n            t.join()\r\n            t = _pickSomeNonDaemonThread()\r\n        self._delete()\r\ndef _pickSomeNonDaemonThread():\r\n    for t in enumerate():\r\n        if not t.daemon and t.is_alive():\r\n            return t\r\n    return None\r\nclass _DummyThread(Thread):\r\n    def __init__(self):\r\n        Thread.__init__(self, name=_newname(\"Dummy-%d\"), daemon=True)\r\n        del self._block\r\n        self._started.set()\r\n        self._set_ident()\r\n        with _active_limbo_lock:\r\n            _active[self._ident] = self\r\n    def _stop(self):\r\n        pass\r\n    def join(self, timeout=None):\r\n        assert False, \"cannot join a dummy thread\"\r\ndef current_thread():\r\n    try:\r\n        return _active[get_ident()]\r\n    except KeyError:\r\n        return _DummyThread()\r\ncurrentThread = current_thread\r\ndef active_count():\r\n    with _active_limbo_lock:\r\n        return len(_active) + len(_limbo)\r\nactiveCount = active_count\r\ndef _enumerate():\r\n    return list(_active.values()) + list(_limbo.values())\r\ndef enumerate():\r\n    with _active_limbo_lock:\r\n        return list(_active.values()) + list(_limbo.values())\r\nfrom _thread import stack_size\r\n_shutdown = _MainThread()._exitfunc\r\ntry:\r\n    from _thread import _local as local\r\nexcept ImportError:\r\n    from _threading_local import local\r\ndef _after_fork():\r\n    global _active_limbo_lock\r\n    _active_limbo_lock = _allocate_lock()\r\n    new_active = {}\r\n    current = current_thread()\r\n    with _active_limbo_lock:\r\n        for thread in _active.values():\r\n            thread._reset_internal_locks()\r\n            if thread is current:\r\n                ident = get_ident()\r\n                thread._ident = ident\r\n                new_active[ident] = thread\r\n            else:\r\n                thread._stop()\r\n        _limbo.clear()\r\n        _active.clear()\r\n        _active.update(new_active)\r\n        assert len(_active) == 1\r\n", "/Lib/operator.py": "\"\"\"\r\nOperator Interface\r\nThis module exports a set of functions corresponding to the intrinsic \r\noperators of Python.  For example, operator.add(x, y) is equivalent \r\nto the expression x+y.  The function names are those used for special \r\nmethods; variants without leading and trailing '__' are also provided \r\nfor convenience.\r\nThis is the pure Python implementation of the module.\r\n\"\"\"\r\ndef lt(a, b):\r\n    \"Same as a < b.\"\r\n    return a < b\r\n__lt__ = lt\r\ndef le(a, b):\r\n    \"Same as a <= b.\"\r\n    return a <= b\r\n__le__ = le\r\ndef eq(a, b):\r\n    \"Same as a == b.\"\r\n    return a == b\r\n__eq__ = eq\r\ndef ne(a, b):\r\n    \"Same as a != b.\"\r\n    return a != b\r\n__ne__ = ne\r\ndef ge(a, b):\r\n    \"Same as a >= b.\"\r\n    return a >= b\r\n__ge__ = ge\r\ndef gt(a, b):\r\n    \"Same as a > b.\"\r\n    return a > b\r\n__gt__ = gt\r\ndef not_(a):\r\n    \"Same as not a.\"\r\n    return not a\r\n__not__ = not_\r\ndef truth(a):\r\n    \"Return True if a is true, False otherwise.\"\r\n    return bool(a)\r\ndef is_(a, b):\r\n    \"Same as a is b.\"\r\n    return a is b\r\n__abs__ = abs\r\nabs=abs\r\ndef add(a, b):\r\n    \"Same as a + b.\"\r\n    return a + b\r\n__add__ = add\r\ndef and_(a, b):\r\n    \"Same as a & b.\"\r\n    return a & b\r\n__and__ = and_\r\ndef floordiv(a, b):\r\n    \"Same as a // b.\"\r\n    return a // b\r\n__floordiv__ = floordiv\r\ndef index(a):\r\n    \"Same as a.__index__().\"\r\n    return a.__index__()\r\n__index__ = index\r\ndef inv(a):\r\n    \"Same as ~a.\"\r\n    return a^(2**31)\r\ninvert = __inv__ = __invert__ = inv\r\ndef lshift(a, b):\r\n    \"Same as a << b.\"\r\n    return a << b\r\n__lshift__ = lshift\r\ndef mod(a, b):\r\n    \"Same as a % b.\"\r\n    return a % b\r\n__mod__ = mod\r\ndef mul(a, b):\r\n    \"Same as a * b.\"\r\n    return a * b\r\n__mul__ = mul\r\ndef neg(a):\r\n    \"Same as -a.\"\r\n    return -a\r\n__neg__ = neg\r\ndef or_(a, b):\r\n    \"Same as a | b.\"\r\n    return a | b\r\n__or__ = or_\r\ndef pos(a):\r\n    \"Same as +a.\"\r\n    if a >= 0: return a\r\n    return -a\r\n__pos__ = pos\r\ndef pow(a, b):\r\n    \"Same as a ** b.\"\r\n    return a ** b\r\n__pow__ = pow\r\ndef rshift(a, b):\r\n    \"Same as a >> b.\"\r\n    return a >> b\r\n__rshift__ = rshift\r\ndef sub(a, b):\r\n    \"Same as a - b.\"\r\n    return a - b\r\n__sub__ = sub\r\ndef truediv(a, b):\r\n    \"Same as a / b.\"\r\n    return a / b\r\n__truediv__ = truediv\r\ndef xor(a, b):\r\n    \"Same as a ^ b.\"\r\n    return a ^ b\r\n__xor__ = xor\r\ndef concat(a, b):\r\n    \"Same as a + b, for a and b sequences.\"\r\n    if not (hasattr(a, '__getitem__') and hasattr(b, '__getitem__')):\r\n        raise TypeError('a and b must be sequences')\r\n    return a + b\r\n__concat__ = concat\r\ndef contains(a, b):\r\n    \"Same as b in a (note reversed operands).\"\r\n    return b in a\r\n__contains__ = contains\r\ndef countOf(a, b):\r\n    \"Return the number of times b occurs in a.\"\r\n    count = 0\r\n    for i in a:\r\n        if i == b:\r\n            count += 1\r\n    return count\r\ndef delitem(a, b):\r\n    \"Same as del a[b].\"\r\n    del a[b]\r\n__delitem__ = delitem\r\ndef getitem(a, b):\r\n    \"Same as a[b].\"\r\n    return a[b]\r\n__getitem__ = getitem\r\ndef setitem(a, b, c):\r\n    \"Same as a[b] = c.\"\r\n    a[b] = c\r\n__setitem__ = setitem\r\nclass attrgetter:\r\n    \"\"\"\r\n    Return a callable object that fetches the given attribute(s) from its operand.\r\n    After f=attrgetter('name'), the call f(r) returns r.name.\r\n    After g=attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\r\n    After h=attrgetter('name.first', 'name.last'), the call h(r) returns\r\n    (r.name.first, r.name.last).\r\n    \"\"\"\r\n    def __init__(self, attr, *attrs):\r\n        self._attrs = (attr,)\r\n        self._attrs += attrs\r\n        if any(not isinstance(attr, str) for attr in self._attrs):\r\n            raise TypeError('attribute name must be a string')\r\n    @staticmethod\r\n    def _resolve_attr(obj, attr):\r\n        for name in attr.split('.'):\r\n            obj = getattr(obj, name)\r\n        return obj\r\n    def __call__(self, obj):\r\n        if len(self._attrs) == 1:\r\n            return self._resolve_attr(obj, self._attrs[0])\r\n        return tuple(self._resolve_attr(obj, attr) for attr in self._attrs)\r\nclass itemgetter:\r\n    \"\"\"\r\n    Return a callable object that fetches the given item(s) from its operand.\r\n    After f=itemgetter(2), the call f(r) returns r[2].\r\n    After g=itemgetter(2,5,3), the call g(r) returns (r[2], r[5], r[3])\r\n    \"\"\"\r\n    def __init__(self, item, *items):\r\n        self._items = (item,)\r\n        self._items += items\r\n    def __call__(self, obj):\r\n        if len(self._items) == 1:\r\n            return obj[self._items[0]]\r\n        return tuple(obj[item] for item in self._items)\r\nclass methodcaller:\r\n    \"\"\"\r\n    Return a callable object that calls the given method on its operand.\r\n    After f = methodcaller('name'), the call f(r) returns r.name().\r\n    After g = methodcaller('name', 'date', foo=1), the call g(r) returns\r\n    r.name('date', foo=1).\r\n    \"\"\"\r\n    def __init__(self, name, *args, **kwargs):\r\n        self._name = name\r\n        self._args = args\r\n        self._kwargs = kwargs\r\n    def __call__(self, obj):\r\n        return getattr(obj, self._name)(*self._args, **self._kwargs)\r\ndef iadd(a, b):\r\n    \"Same as a += b.\"\r\n    a += b\r\n    return a\r\n__iadd__ = iadd\r\ndef iand(a, b):\r\n    \"Same as a &= b.\"\r\n    a &= b\r\n    return a\r\n__iand__ = iand\r\ndef iconcat(a, b):\r\n    \"Same as a += b, for a and b sequences.\"\r\n    if not (hasattr(a, '__getitem__') and hasattr(b, '__getitem__')):\r\n        raise TypeError('a and b must be sequences')\r\n    a += b\r\n    return a\r\n__iconcat__ = iconcat\r\ndef ifloordiv(a, b):\r\n    \"Same as a //= b.\"\r\n    a //= b\r\n    return a\r\n__ifloordiv__ = ifloordiv\r\ndef ilshift(a, b):\r\n    \"Same as a <<= b.\"\r\n    a <<= b\r\n    return a\r\n__ilshift__ = ilshift\r\ndef imod(a, b):\r\n    \"Same as a %= b.\"\r\n    a %= b\r\n    return a\r\n__imod__ = imod\r\ndef imul(a, b):\r\n    \"Same as a *= b.\"\r\n    a *= b\r\n    return a\r\n__imul__ = imul\r\ndef ior(a, b):\r\n    \"Same as a |= b.\"\r\n    a |= b\r\n    return a\r\n__ior__ = ior\r\ndef ipow(a, b):\r\n    \"Same as a **= b.\"\r\n    a **=b\r\n    return a\r\n__ipow__ = ipow\r\ndef irshift(a, b):\r\n    \"Same as a >>= b.\"\r\n    a >>= b\r\n    return a\r\n__irshift__ = irshift\r\ndef isub(a, b):\r\n    \"Same as a -= b.\"\r\n    a -= b\r\n    return a\r\n__isub__ = isub\r\ndef itruediv(a, b):\r\n    \"Same as a /= b.\"\r\n    a /= b\r\n    return a\r\n__itruediv__ = itruediv\r\ndef ixor(a, b):\r\n    \"Same as a ^= b.\"\r\n    a ^= b\r\n    return a\r\n__ixor__ = ixor\r\ndef length_hint(obj, default=0):\r\n    \"\"\"\r\n    Return an estimate of the number of items in obj.\r\n    This is useful for presizing containers when building from an iterable.\r\n    If the object supports len(), the result will be exact. Otherwise, it may\r\n    over- or under-estimate by an arbitrary amount. The result will be an\r\n    integer >= 0.\r\n    \"\"\"\r\n    try:\r\n        return len(obj)\r\n    except TypeError:\r\n        try:\r\n            val = obj.__length_hint__()\r\n            if val is NotImplemented:\r\n                raise TypeError\r\n        except (AttributeError, TypeError):\r\n            return default\r\n        else:\r\n            if not val > 0:\r\n                raise ValueError('default must be > 0')\r\n            return val\r\n", "/Lib/http/__init__.py": "", "/Lib/posixpath.py": "\"\"\"Common operations on Posix pathnames.\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The \"os.path\" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Mac, Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. macpath, ntpath).\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n\"\"\"\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\",\"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"samefile\",\"sameopenfile\",\"samestat\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\"extsep\",\n           \"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\"]\ncurdir = '.'\npardir = '..'\nextsep = '.'\nsep = '/'\npathsep = ':'\ndefpath = ':/bin:/usr/bin'\naltsep = None\ndevnull = '/dev/null'\ndef _get_sep(path):\n    if isinstance(path, bytes):\n        return b'/'\n    else:\n        return '/'\ndef normcase(s):\n    \"\"\"Normalize case of pathname.  Has no effect under Posix\"\"\"\n    if not isinstance(s, (bytes, str)):\n        raise TypeError(\"normcase() argument must be str or bytes, \"\n                        \"not '{}'\".format(s.__class__.__name__))\n    return s\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    sep = _get_sep(s)\n    return s.startswith(sep)\ndef join(a, *p):\n    \"\"\"Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator.\"\"\"\n    sep = _get_sep(a)\n    path = a\n    try:\n        for b in p:\n            if b.startswith(sep):\n                path = b\n            elif not path or path.endswith(sep):\n                path += b\n            else:\n                path += sep + b\n    except TypeError:\n        valid_types = all(isinstance(s, (str, bytes, bytearray))\n                          for s in (a, ) + p)\n        if valid_types:\n            raise TypeError(\"Can't mix strings and bytes in path components.\")\n        raise\n    return path\ndef split(p):\n    \"\"\"Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n    everything after the final slash.  Either part may be empty.\"\"\"\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head, tail = p[:i], p[i:]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head, tail\ndef splitext(p):\n    if isinstance(p, bytes):\n        sep = b'/'\n        extsep = b'.'\n    else:\n        sep = '/'\n        extsep = '.'\n    return genericpath._splitext(p, sep, None, extsep)\nsplitext.__doc__ = genericpath._splitext.__doc__\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive and path. On Posix, drive is always\n    empty.\"\"\"\n    return p[:0], p\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    return p[i:]\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    sep = _get_sep(p)\n    i = p.rfind(sep) + 1\n    head = p[:i]\n    if head and head != sep*len(head):\n        head = head.rstrip(sep)\n    return head\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link\"\"\"\n    try:\n        st = os.lstat(path)\n    except (os.error, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        os.lstat(path)\n    except os.error:\n        return False\n    return True\ndef samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file\"\"\"\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\ndef sameopenfile(fp1, fp2):\n    \"\"\"Test whether two open file objects reference the same file\"\"\"\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\ndef samestat(s1, s2):\n    \"\"\"Test whether two stat buffers reference the same file\"\"\"\n    return s1.st_ino == s2.st_ino and \\\n           s1.st_dev == s2.st_dev\ndef ismount(path):\n    \"\"\"Test whether a path is a mount point\"\"\"\n    if islink(path):\n        return False\n    try:\n        s1 = os.lstat(path)\n        if isinstance(path, bytes):\n            parent = join(path, b'..')\n        else:\n            parent = join(path, '..')\n        s2 = os.lstat(parent)\n    except os.error:\n        return False # It doesn't exist -- so not a mount point :-)\n    dev1 = s1.st_dev\n    dev2 = s2.st_dev\n    if dev1 != dev2:\n        return True     # path/.. on a different device as path\n    ino1 = s1.st_ino\n    ino2 = s2.st_ino\n    if ino1 == ino2:\n        return True     # path/.. is the same i-node as path\n    return False\ndef expanduser(path):\n    \"\"\"Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.\"\"\"\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path\n    sep = _get_sep(path)\n    i = path.find(sep, 1)\n    if i < 0:\n        i = len(path)\n    if i == 1:\n        if 'HOME' not in os.environ:\n            import pwd\n            userhome = pwd.getpwuid(os.getuid()).pw_dir\n        else:\n            userhome = os.environ['HOME']\n    else:\n        import pwd\n        name = path[1:i]\n        if isinstance(name, bytes):\n            name = str(name, 'ASCII')\n        try:\n            pwent = pwd.getpwnam(name)\n        except KeyError:\n            return path\n        userhome = pwent.pw_dir\n    if isinstance(path, bytes):\n        userhome = os.fsencode(userhome)\n        root = b'/'\n    else:\n        root = '/'\n    userhome = userhome.rstrip(root)\n    return (userhome + path[i:]) or root\n_varprog = None\n_varprogb = None\ndef expandvars(path):\n    \"\"\"Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.\"\"\"\n    global _varprog, _varprogb\n    if isinstance(path, bytes):\n        if b'$' not in path:\n            return path\n        if not _varprogb:\n            import re\n            _varprogb = re.compile(br'\\$(\\w+|\\{[^}]*\\})', re.ASCII)\n        search = _varprogb.search\n        start = b'{'\n        end = b'}'\n    else:\n        if '$' not in path:\n            return path\n        if not _varprog:\n            import re\n            _varprog = re.compile(r'\\$(\\w+|\\{[^}]*\\})', re.ASCII)\n        search = _varprog.search\n        start = '{'\n        end = '}'\n    i = 0\n    while True:\n        m = search(path, i)\n        if not m:\n            break\n        i, j = m.span(0)\n        name = m.group(1)\n        if name.startswith(start) and name.endswith(end):\n            name = name[1:-1]\n        if isinstance(name, bytes):\n            name = str(name, 'ASCII')\n        if name in os.environ:\n            tail = path[j:]\n            value = os.environ[name]\n            if isinstance(path, bytes):\n                value = value.encode('ASCII')\n            path = path[:i] + value\n            i = len(path)\n            path += tail\n        else:\n            i = j\n    return path\ndef normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    if isinstance(path, bytes):\n        sep = b'/'\n        empty = b''\n        dot = b'.'\n        dotdot = b'..'\n    else:\n        sep = '/'\n        empty = ''\n        dot = '.'\n        dotdot = '..'\n    if path == empty:\n        return dot\n    initial_slashes = path.startswith(sep)\n    if (initial_slashes and\n        path.startswith(sep*2) and not path.startswith(sep*3)):\n        initial_slashes = 2\n    comps = path.split(sep)\n    new_comps = []\n    for comp in comps:\n        if comp in (empty, dot):\n            continue\n        if (comp != dotdot or (not initial_slashes and not new_comps) or\n             (new_comps and new_comps[-1] == dotdot)):\n            new_comps.append(comp)\n        elif new_comps:\n            new_comps.pop()\n    comps = new_comps\n    path = sep.join(comps)\n    if initial_slashes:\n        path = sep*int(initial_slashes) + path\n    return path or dot\ndef abspath(path):\n    \"\"\"Return an absolute path.\"\"\"\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\ndef realpath(filename):\n    \"\"\"Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.\"\"\"\n    if isinstance(filename, bytes):\n        sep = b'/'\n        empty = b''\n    else:\n        sep = '/'\n        empty = ''\n    if isabs(filename):\n        bits = [sep] + filename.split(sep)[1:]\n    else:\n        bits = [empty] + filename.split(sep)\n    for i in range(2, len(bits)+1):\n        component = join(*bits[0:i])\n        if islink(component):\n            resolved = _resolve_link(component)\n            if resolved is None:\n                return abspath(join(*([component] + bits[i:])))\n            else:\n                newpath = join(*([resolved] + bits[i:]))\n                return realpath(newpath)\n    return abspath(filename)\ndef _resolve_link(path):\n    \"\"\"Internal helper function.  Takes a path and follows symlinks\n    until we either arrive at something that isn't a symlink, or\n    encounter a path we've seen before (meaning that there's a loop).\n    \"\"\"\n    paths_seen = set()\n    while islink(path):\n        if path in paths_seen:\n            return None\n        paths_seen.add(path)\n        resolved = os.readlink(path)\n        if not isabs(resolved):\n            dir = dirname(path)\n            path = normpath(join(dir, resolved))\n        else:\n            path = normpath(resolved)\n    return path\nsupports_unicode_filenames = (sys.platform == 'darwin')\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    if not path:\n        raise ValueError(\"no path specified\")\n    if isinstance(path, bytes):\n        curdir = b'.'\n        sep = b'/'\n        pardir = b'..'\n    else:\n        curdir = '.'\n        sep = '/'\n        pardir = '..'\n    if start is None:\n        start = curdir\n    start_list = [x for x in abspath(start).split(sep) if x]\n    path_list = [x for x in abspath(path).split(sep) if x]\n    i = len(commonprefix([start_list, path_list]))\n    rel_list = [pardir] * (len(start_list)-i) + path_list[i:]\n    if not rel_list:\n        return curdir\n    return join(*rel_list)\n", "/Lib/getopt.py": "\"\"\"Parser for command line options.\nThis module helps scripts to parse the command line arguments in\nsys.argv.  It supports the same conventions as the Unix getopt()\nfunction (including the special meanings of arguments of the form `-'\nand `--').  Long options similar to those supported by GNU software\nmay be used as well via an optional third argument.  This module\nprovides two functions and an exception:\ngetopt() -- Parse command line options\ngnu_getopt() -- Like getopt(), but allow option and non-option arguments\nto be intermixed.\nGetoptError -- exception (class) raised with 'opt' attribute, which is the\noption involved with the exception.\n\"\"\"\n__all__ = [\"GetoptError\",\"error\",\"getopt\",\"gnu_getopt\"]\nimport os\nclass GetoptError(Exception):\n    opt = ''\n    msg = ''\n    def __init__(self, msg, opt=''):\n        self.msg = msg\n        self.opt = opt\n        Exception.__init__(self, msg, opt)\n    def __str__(self):\n        return self.msg\nerror = GetoptError # backward compatibility\ndef getopt(args, shortopts, longopts = []):\n    \"\"\"getopt(args, options[, long_options]) -> opts, args\n    Parses command line options and parameter list.  args is the\n    argument list to be parsed, without the leading reference to the\n    running program.  Typically, this means \"sys.argv[1:]\".  shortopts\n    is the string of option letters that the script wants to\n    recognize, with options that require an argument followed by a\n    colon (i.e., the same format that Unix getopt() uses).  If\n    specified, longopts is a list of strings with the names of the\n    long options which should be supported.  The leading '--'\n    characters should not be included in the option name.  Options\n    which require an argument should be followed by an equal sign\n    ('=').\n    The return value consists of two elements: the first is a list of\n    (option, value) pairs; the second is the list of program arguments\n    left after the option list was stripped (this is a trailing slice\n    of the first argument).  Each option-and-value pair returned has\n    the option as its first element, prefixed with a hyphen (e.g.,\n    '-x'), and the option argument as its second element, or an empty\n    string if the option has no argument.  The options occur in the\n    list in the same order in which they were found, thus allowing\n    multiple occurrences.  Long and short options may be mixed.\n    \"\"\"\n    opts = []\n    if type(longopts) == type(\"\"):\n        longopts = [longopts]\n    else:\n        longopts = list(longopts)\n    while args and args[0].startswith('-') and args[0] != '-':\n        if args[0] == '--':\n            args = args[1:]\n            break\n        if args[0].startswith('--'):\n            opts, args = do_longs(opts, args[0][2:], longopts, args[1:])\n        else:\n            opts, args = do_shorts(opts, args[0][1:], shortopts, args[1:])\n    return opts, args\ndef gnu_getopt(args, shortopts, longopts = []):\n    \"\"\"getopt(args, options[, long_options]) -> opts, args\n    This function works like getopt(), except that GNU style scanning\n    mode is used by default. This means that option and non-option\n    arguments may be intermixed. The getopt() function stops\n    processing options as soon as a non-option argument is\n    encountered.\n    If the first character of the option string is `+', or if the\n    environment variable POSIXLY_CORRECT is set, then option\n    processing stops as soon as a non-option argument is encountered.\n    \"\"\"\n    opts = []\n    prog_args = []\n    if isinstance(longopts, str):\n        longopts = [longopts]\n    else:\n        longopts = list(longopts)\n    if shortopts.startswith('+'):\n        shortopts = shortopts[1:]\n        all_options_first = True\n    elif os.environ.get(\"POSIXLY_CORRECT\"):\n        all_options_first = True\n    else:\n        all_options_first = False\n    while args:\n        if args[0] == '--':\n            prog_args += args[1:]\n            break\n        if args[0][:2] == '--':\n            opts, args = do_longs(opts, args[0][2:], longopts, args[1:])\n        elif args[0][:1] == '-' and args[0] != '-':\n            opts, args = do_shorts(opts, args[0][1:], shortopts, args[1:])\n        else:\n            if all_options_first:\n                prog_args += args\n                break\n            else:\n                prog_args.append(args[0])\n                args = args[1:]\n    return opts, prog_args\ndef do_longs(opts, opt, longopts, args):\n    try:\n        i = opt.index('=')\n    except ValueError:\n        optarg = None\n    else:\n        opt, optarg = opt[:i], opt[i+1:]\n    has_arg, opt = long_has_args(opt, longopts)\n    if has_arg:\n        if optarg is None:\n            if not args:\n                raise GetoptError('option --%s requires argument' % opt, opt)\n            optarg, args = args[0], args[1:]\n    elif optarg is not None:\n        raise GetoptError('option --%s must not have an argument' % opt, opt)\n    opts.append(('--' + opt, optarg or ''))\n    return opts, args\ndef long_has_args(opt, longopts):\n    possibilities = [o for o in longopts if o.startswith(opt)]\n    if not possibilities:\n        raise GetoptError('option --%s not recognized' % opt, opt)\n    if opt in possibilities:\n        return False, opt\n    elif opt + '=' in possibilities:\n        return True, opt\n    if len(possibilities) > 1:\n        raise GetoptError('option --%s not a unique prefix' % opt, opt)\n    assert len(possibilities) == 1\n    unique_match = possibilities[0]\n    has_arg = unique_match.endswith('=')\n    if has_arg:\n        unique_match = unique_match[:-1]\n    return has_arg, unique_match\ndef do_shorts(opts, optstring, shortopts, args):\n    while optstring != '':\n        opt, optstring = optstring[0], optstring[1:]\n        if short_has_arg(opt, shortopts):\n            if optstring == '':\n                if not args:\n                    raise GetoptError('option -%s requires argument' % opt,\n                                      opt)\n                optstring, args = args[0], args[1:]\n            optarg, optstring = optstring, ''\n        else:\n            optarg = ''\n        opts.append(('-' + opt, optarg))\n    return opts, args\ndef short_has_arg(opt, shortopts):\n    for i in range(len(shortopts)):\n        if opt == shortopts[i] != ':':\n            return shortopts.startswith(':', i+1)\n    raise GetoptError('option -%s not recognized' % opt, opt)\nif __name__ == '__main__':\n    import sys\n    print(getopt(sys.argv[1:], \"a:b\", [\"alpha=\", \"beta\"]))\n", "/Lib/errno.py": "\"This module makes available standard errno system symbols.\\n\\nThe value of each symbol is the corresponding integer value,\\ne.g., on most systems, errno.ENOENT equals the integer 2.\\n\\nThe dictionary errno.errorcode maps numeric codes to symbol names,\\ne.g., errno.errorcode[2] could be the string 'ENOENT'.\\n\\nSymbols that are not relevant to the underlying system are not defined.\\n\\nTo map error codes to error messages, use the function os.strerror(),\\ne.g. os.strerror(2) could return 'No such file or directory'.\"\nE2BIG = 7\nEACCES = 13\nEADDRINUSE = 98\nEADDRNOTAVAIL = 99\nEADV = 68\nEAFNOSUPPORT = 97\nEAGAIN = 11\nEALREADY = 114\nEBADE = 52\nEBADF = 9\nEBADFD = 77\nEBADMSG = 74\nEBADR = 53\nEBADRQC = 56\nEBADSLT = 57\nEBFONT = 59\nEBUSY = 16\nECHILD = 10\nECHRNG = 44\nECOMM = 70\nECONNABORTED = 103\nECONNREFUSED = 111\nECONNRESET = 104\nEDEADLK = 35\nEDEADLOCK = 35\nEDESTADDRREQ = 89\nEDOM = 33\nEDOTDOT = 73\nEDQUOT = 122\nEEXIST = 17\nEFAULT = 14\nEFBIG = 27\nEHOSTDOWN = 112\nEHOSTUNREACH = 113\nEIDRM = 43\nEILSEQ = 84\nEINPROGRESS = 115\nEINTR = 4\nEINVAL = 22\nEIO = 5\nEISCONN = 106\nEISDIR = 21\nEISNAM = 120\nEL2HLT = 51\nEL2NSYNC = 45\nEL3HLT = 46\nEL3RST = 47\nELIBACC = 79\nELIBBAD = 80\nELIBEXEC = 83\nELIBMAX = 82\nELIBSCN = 81\nELNRNG = 48\nELOOP = 40\nEMFILE = 24\nEMLINK = 31\nEMSGSIZE = 90\nEMULTIHOP = 72\nENAMETOOLONG = 36\nENAVAIL = 119\nENETDOWN = 100\nENETRESET = 102\nENETUNREACH = 101\nENFILE = 23\nENOANO = 55\nENOBUFS = 105\nENOCSI = 50\nENODATA = 61\nENODEV = 19\nENOENT = 2\nENOEXEC = 8\nENOLCK = 37\nENOLINK = 67\nENOMEM = 12\nENOMSG = 42\nENONET = 64\nENOPKG = 65\nENOPROTOOPT = 92\nENOSPC = 28\nENOSR = 63\nENOSTR = 60\nENOSYS = 38\nENOTBLK = 15\nENOTCONN = 107\nENOTDIR = 20\nENOTEMPTY = 39\nENOTNAM = 118\nENOTSOCK = 88\nENOTTY = 25\nENOTUNIQ = 76\nENXIO = 6\nEOPNOTSUPP = 95\nEOVERFLOW = 75\nEPERM = 1\nEPFNOSUPPORT = 96\nEPIPE = 32\nEPROTO = 71\nEPROTONOSUPPORT = 93\nEPROTOTYPE = 91\nERANGE = 34\nEREMCHG = 78\nEREMOTE = 66\nEREMOTEIO = 121\nERESTART = 85\nEROFS = 30\nESHUTDOWN = 108\nESOCKTNOSUPPORT = 94\nESPIPE = 29\nESRCH = 3\nESRMNT = 69\nESTALE = 116\nESTRPIPE = 86\nETIME = 62\nETIMEDOUT = 110\nETOOMANYREFS = 109\nETXTBSY = 26\nEUCLEAN = 117\nEUNATCH = 49\nEUSERS = 87\nEWOULDBLOCK = 11\nEXDEV = 18\nEXFULL = 54\n", "/Lib/html/__init__.py": "\"\"\"\nGeneral functions for HTML manipulation.\n\"\"\"\n_escape_map = {ord('&'): '&amp;', ord('<'): '&lt;', ord('>'): '&gt;'}\n_escape_map_full = {ord('&'): '&amp;', ord('<'): '&lt;', ord('>'): '&gt;',\n                    ord('\"'): '&quot;', ord('\\''): '&#x27;'}\ndef escape(s, quote=True):\n    \"\"\"\n    Replace special characters \"&\", \"<\" and \">\" to HTML-safe sequences.\n    If the optional flag quote is true (the default), the quotation mark\n    characters, both double quote (\") and single quote (') characters are also\n    translated.\n    \"\"\"\n    if quote:\n        return s.translate(_escape_map_full)\n    return s.translate(_escape_map)\n", "/Lib/_weakrefset.py": "from _weakref import ref\n__all__ = ['WeakSet']\nclass _IterationGuard:\n    def __init__(self, weakcontainer):\n        print('create iteration guard', weakcontainer)\n        self.weakcontainer = ref(weakcontainer)\n    def __enter__(self):\n        print('enter iteration guard')\n        w = self.weakcontainer()\n        if w is not None:\n            w._iterating.add(self)\n        return self\n    def __exit__(self, e, t, b):\n        w = self.weakcontainer()\n        if w is not None:\n            s = w._iterating\n            s.remove(self)\n            if not s:\n                w._commit_removals()\nclass WeakSet:\n    def __init__(self, data=None):\n        self.data = set()\n        def _remove(item, selfref=ref(self)):\n            self = selfref()\n            if self is not None:\n                if self._iterating:\n                    self._pending_removals.append(item)\n                else:\n                    self.data.discard(item)\n        self._remove = _remove\n        self._pending_removals = []\n        self._iterating = set()\n        if data is not None:\n            self.update(data)\n    def _commit_removals(self):\n        l = self._pending_removals\n        discard = self.data.discard\n        while l:\n            discard(l.pop())\n    def __iter__(self):\n        with _IterationGuard(self):\n            for itemref in self.data:\n                item = itemref()\n                if item is not None:\n                    yield item\n    def __len__(self):\n        return len(self.data) - len(self._pending_removals)\n    def __contains__(self, item):\n        try:\n            wr = ref(item)\n        except TypeError:\n            return False\n        return wr in self.data\n    def __reduce__(self):\n        return (self.__class__, (list(self),),\n                getattr(self, '__dict__', None))\n    def add(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.add(ref(item, self._remove))\n    def clear(self):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.clear()\n    def copy(self):\n        return self.__class__(self)\n    def pop(self):\n        if self._pending_removals:\n            self._commit_removals()\n        while True:\n            try:\n                itemref = self.data.pop()\n            except KeyError:\n                raise KeyError('pop from empty WeakSet')\n            item = itemref()\n            if item is not None:\n                return item\n    def remove(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.remove(ref(item))\n    def discard(self, item):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.discard(ref(item))\n    def update(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        for element in other:\n            self.add(element)\n    def __ior__(self, other):\n        self.update(other)\n        return self\n    def difference(self, other):\n        newset = self.copy()\n        newset.difference_update(other)\n        return newset\n    __sub__ = difference\n    def difference_update(self, other):\n        self.__isub__(other)\n    def __isub__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.difference_update(ref(item) for item in other)\n        return self\n    def intersection(self, other):\n        return self.__class__(item for item in other if item in self)\n    __and__ = intersection\n    def intersection_update(self, other):\n        self.__iand__(other)\n    def __iand__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        self.data.intersection_update(ref(item) for item in other)\n        return self\n    def issubset(self, other):\n        return self.data.issubset(ref(item) for item in other)\n    __le__ = issubset\n    def __lt__(self, other):\n        return self.data < set(ref(item) for item in other)\n    def issuperset(self, other):\n        return self.data.issuperset(ref(item) for item in other)\n    __ge__ = issuperset\n    def __gt__(self, other):\n        return self.data > set(ref(item) for item in other)\n    def __eq__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.data == set(ref(item) for item in other)\n    def symmetric_difference(self, other):\n        newset = self.copy()\n        newset.symmetric_difference_update(other)\n        return newset\n    __xor__ = symmetric_difference\n    def symmetric_difference_update(self, other):\n        self.__ixor__(other)\n    def __ixor__(self, other):\n        if self._pending_removals:\n            self._commit_removals()\n        if self is other:\n            self.data.clear()\n        else:\n            self.data.symmetric_difference_update(ref(item, self._remove) for item in other)\n        return self\n    def union(self, other):\n        return self.__class__(e for s in (self, other) for e in s)\n    __or__ = union\n    def isdisjoint(self, other):\n        return len(self.intersection(other)) == 0\n", "/Lib/webbrowser.py": "from browser import window\n__all__ = [\"Error\", \"open\", \"open_new\", \"open_new_tab\"]\nclass Error(Exception):\n    pass\n_target = { 0: '', 1: '_blank', 2: '_new' }  # hack...\ndef open(url, new=0, autoraise=True):\n    \"\"\" \n    new window or tab is not controllable\n    on the client side. autoraise not available.\n    \"\"\"\n    if window.open(url, _target[new]):\n\t\treturn True\n    return False\ndef open_new(url):\n    return open(url, 1)\ndef open_new_tab(url):\n    return open(url, 2)\n", "/libs/json.js": "$module=(function($B){var __builtins__=$B.builtins;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");function _py(obj){if(obj===null)return None;if(isinstance(obj,list)){var res=[];for(var i=0;i<obj.length;i++)res.push(_py(obj[i]));return res;}if(obj.__class__!==undefined){if(obj.__class__===list)for(var i=0;i<obj.length;i++)obj[i]=_py(obj[i]);return obj;}if(typeof obj==='object'&&obj.__class__===undefined){var res=dict();for(var attr in obj)getattr(res,'__setitem__')(attr,_py(obj[attr]));return res;}return $B.JSObject(obj);}function _js(obj){if(isinstance(obj,[int,str]))return obj;else if(obj===None)return null;else if(obj===True)return true;else if(obj===False)return false;else if(isinstance(obj,float))return obj.value;else if(isinstance(obj,[list,tuple])){var res=[];for(var i=0;i<obj.length;i++)res.push(_js(obj[i]));return res;}else if(isinstance(obj,dict)){var res=new Object();for(var i=0;i<obj.$keys.length;i++)res[_js(obj.$keys[i])]=_js(obj.$values[i]);return res;}else throw TypeError(str(obj)+' is not JSON serializable');}return{loads:function(json_obj){return _py(JSON.parse(json_obj));},dumps:function(obj){return JSON.stringify(_js(obj));}};})(__BRYTHON__);", "/Lib/importlib/__init__.py": "\"\"\"A pure Python implementation of import.\"\"\"\r\n__all__ = ['__import__', 'import_module', 'invalidate_caches']\r\nimport _imp  # Just the builtin component, NOT the full Python module\r\nimport sys\r\ntry:\r\n    import _frozen_importlib as _bootstrap\r\nexcept ImportError:\r\n    from . import _bootstrap\r\n    _bootstrap._setup(sys, _imp)\r\nelse:\r\n    _bootstrap.__name__ = 'importlib._bootstrap'\r\n    _bootstrap.__package__ = 'importlib'\r\n    _bootstrap.__file__ = __file__.replace('__init__.py', '_bootstrap.py')\r\n    sys.modules['importlib._bootstrap'] = _bootstrap\r\n_w_long = _bootstrap._w_long\r\n_r_long = _bootstrap._r_long\r\nfrom ._bootstrap import __import__\r\ndef invalidate_caches():\r\n    \"\"\"Call the invalidate_caches() method on all meta path finders stored in\r\n    sys.meta_path (where implemented).\"\"\"\r\n    for finder in sys.meta_path:\r\n        if hasattr(finder, 'invalidate_caches'):\r\n            finder.invalidate_caches()\r\ndef find_loader(name, path=None):\r\n    \"\"\"Find the loader for the specified module.\r\n    First, sys.modules is checked to see if the module was already imported. If\r\n    so, then sys.modules[name].__loader__ is returned. If that happens to be\r\n    set to None, then ValueError is raised. If the module is not in\r\n    sys.modules, then sys.meta_path is searched for a suitable loader with the\r\n    value of 'path' given to the finders. None is returned if no loader could\r\n    be found.\r\n    Dotted names do not have their parent packages implicitly imported.\r\n    \"\"\"\r\n    try:\r\n        loader = sys.modules[name].__loader__\r\n        if loader is None:\r\n            raise ValueError('{}.__loader__ is None'.format(name))\r\n        else:\r\n            return loader\r\n    except KeyError:\r\n        pass\r\n    return _bootstrap._find_module(name, path)\r\ndef import_module(name, package=None):\r\n    \"\"\"Import a module.\r\n    The 'package' argument is required when performing a relative import. It\r\n    specifies the package to use as the anchor point from which to resolve the\r\n    relative import to an absolute import.\r\n    \"\"\"\r\n    level = 0\r\n    if name.startswith('.'):\r\n        if not package:\r\n            raise TypeError(\"relative imports require the 'package' argument\")\r\n        for character in name:\r\n            if character != '.':\r\n                break\r\n            level += 1\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n", "/Lib/test/support.py": "\"\"\"Supporting definitions for the Python regression tests.\"\"\"\nif __name__ != 'test.support':\n    raise ImportError('support must be imported from the test package')\nimport contextlib\nimport errno\nimport functools\nimport gc\nimport socket\nimport sys\nimport os\nimport platform\nimport shutil\nimport warnings\nimport unittest\nimport importlib\nimport collections.abc\nimport re\nimport subprocess\nimport imp\nimport time\nimport sysconfig\nimport fnmatch\nimport logging.handlers\nimport struct\nimport tempfile\nimport _testcapi\ntry:\n    import _thread, threading\nexcept ImportError:\n    _thread = None\n    threading = None\ntry:\n    import multiprocessing.process\nexcept ImportError:\n    multiprocessing = None\ntry:\n    import zlib\nexcept ImportError:\n    zlib = None\ntry:\n    import bz2\nexcept ImportError:\n    bz2 = None\ntry:\n    import lzma\nexcept ImportError:\n    lzma = None\n__all__ = [\n    \"Error\", \"TestFailed\", \"ResourceDenied\", \"import_module\", \"verbose\",\n    \"use_resources\", \"max_memuse\", \"record_original_stdout\",\n    \"get_original_stdout\", \"unload\", \"unlink\", \"rmtree\", \"forget\",\n    \"is_resource_enabled\", \"requires\", \"requires_freebsd_version\",\n    \"requires_linux_version\", \"requires_mac_ver\", \"find_unused_port\",\n    \"bind_port\", \"IPV6_ENABLED\", \"is_jython\", \"TESTFN\", \"HOST\", \"SAVEDCWD\",\n    \"temp_cwd\", \"findfile\", \"create_empty_file\", \"sortdict\",\n    \"check_syntax_error\", \"open_urlresource\", \"check_warnings\", \"CleanImport\",\n    \"EnvironmentVarGuard\", \"TransientResource\", \"captured_stdout\",\n    \"captured_stdin\", \"captured_stderr\", \"time_out\", \"socket_peer_reset\",\n    \"ioerror_peer_reset\", \"run_with_locale\", 'temp_umask',\n    \"transient_internet\", \"set_memlimit\", \"bigmemtest\", \"bigaddrspacetest\",\n    \"BasicTestRunner\", \"run_unittest\", \"run_doctest\", \"threading_setup\",\n    \"threading_cleanup\", \"reap_children\", \"cpython_only\", \"check_impl_detail\",\n    \"get_attribute\", \"swap_item\", \"swap_attr\", \"requires_IEEE_754\",\n    \"TestHandler\", \"Matcher\", \"can_symlink\", \"skip_unless_symlink\",\n    \"skip_unless_xattr\", \"import_fresh_module\", \"requires_zlib\",\n    \"PIPE_MAX_SIZE\", \"failfast\", \"anticipate_failure\", \"run_with_tz\",\n    \"requires_bz2\", \"requires_lzma\", \"suppress_crash_popup\",\n    ]\nclass Error(Exception):\n    \"\"\"Base class for regression test exceptions.\"\"\"\nclass TestFailed(Error):\n    \"\"\"Test failed.\"\"\"\nclass ResourceDenied(unittest.SkipTest):\n    \"\"\"Test skipped because it requested a disallowed resource.\n    This is raised when a test calls requires() for a resource that\n    has not be enabled.  It is used to distinguish between expected\n    and unexpected skips.\n    \"\"\"\n@contextlib.contextmanager\ndef _ignore_deprecated_imports(ignore=True):\n    \"\"\"Context manager to suppress package and module deprecation\n    warnings when importing them.\n    If ignore is False, this context manager has no effect.\"\"\"\n    if ignore:\n        with warnings.catch_warnings():\n            warnings.filterwarnings(\"ignore\", \".+ (module|package)\",\n                                    DeprecationWarning)\n            yield\n    else:\n        yield\ndef import_module(name, deprecated=False):\n    \"\"\"Import and return the module to be tested, raising SkipTest if\n    it is not available.\n    If deprecated is True, any module or package deprecation messages\n    will be suppressed.\"\"\"\n    with _ignore_deprecated_imports(deprecated):\n        try:\n            return importlib.import_module(name)\n        except ImportError as msg:\n            raise unittest.SkipTest(str(msg))\ndef _save_and_remove_module(name, orig_modules):\n    \"\"\"Helper function to save and remove a module from sys.modules\n       Raise ImportError if the module can't be imported.\"\"\"\n    if name not in sys.modules:\n        __import__(name)\n        del sys.modules[name]\n    for modname in list(sys.modules):\n        if modname == name or modname.startswith(name + '.'):\n            orig_modules[modname] = sys.modules[modname]\n            del sys.modules[modname]\ndef _save_and_block_module(name, orig_modules):\n    \"\"\"Helper function to save and block a module in sys.modules\n       Return True if the module was in sys.modules, False otherwise.\"\"\"\n    saved = True\n    try:\n        orig_modules[name] = sys.modules[name]\n    except KeyError:\n        saved = False\n    sys.modules[name] = None\n    return saved\ndef anticipate_failure(condition):\n    \"\"\"Decorator to mark a test that is known to be broken in some cases\n       Any use of this decorator should have a comment identifying the\n       associated tracker issue.\n    \"\"\"\n    if condition:\n        return unittest.expectedFailure\n    return lambda f: f\ndef import_fresh_module(name, fresh=(), blocked=(), deprecated=False):\n    \"\"\"Imports and returns a module, deliberately bypassing the sys.modules cache\n    and importing a fresh copy of the module. Once the import is complete,\n    the sys.modules cache is restored to its original state.\n    Modules named in fresh are also imported anew if needed by the import.\n    If one of these modules can't be imported, None is returned.\n    Importing of modules named in blocked is prevented while the fresh import\n    takes place.\n    If deprecated is True, any module or package deprecation messages\n    will be suppressed.\"\"\"\n    with _ignore_deprecated_imports(deprecated):\n        orig_modules = {}\n        names_to_remove = []\n        _save_and_remove_module(name, orig_modules)\n        try:\n            for fresh_name in fresh:\n                _save_and_remove_module(fresh_name, orig_modules)\n            for blocked_name in blocked:\n                if not _save_and_block_module(blocked_name, orig_modules):\n                    names_to_remove.append(blocked_name)\n            fresh_module = importlib.import_module(name)\n        except ImportError:\n            fresh_module = None\n        finally:\n            for orig_name, module in orig_modules.items():\n                sys.modules[orig_name] = module\n            for name_to_remove in names_to_remove:\n                del sys.modules[name_to_remove]\n        return fresh_module\ndef get_attribute(obj, name):\n    \"\"\"Get an attribute, raising SkipTest if AttributeError is raised.\"\"\"\n    try:\n        attribute = getattr(obj, name)\n    except AttributeError:\n        raise unittest.SkipTest(\"object %r has no attribute %r\" % (obj, name))\n    else:\n        return attribute\nverbose = 1              # Flag set to 0 by regrtest.py\nuse_resources = None     # Flag set to [] by regrtest.py\nmax_memuse = 0           # Disable bigmem tests (they will still be run with\nreal_max_memuse = 0\nfailfast = False\nmatch_tests = None\n_original_stdout = None\ndef record_original_stdout(stdout):\n    global _original_stdout\n    _original_stdout = stdout\ndef get_original_stdout():\n    return _original_stdout or sys.stdout\ndef unload(name):\n    try:\n        del sys.modules[name]\n    except KeyError:\n        pass\nif sys.platform.startswith(\"win\"):\n    def _waitfor(func, pathname, waitall=False):\n        func(pathname)\n        if waitall:\n            dirname = pathname\n        else:\n            dirname, name = os.path.split(pathname)\n            dirname = dirname or '.'\n        timeout = 0.001\n        while timeout < 1.0:\n            L = os.listdir(dirname)\n            if not (L if waitall else name in L):\n                return\n            time.sleep(timeout)\n            timeout *= 2\n        warnings.warn('tests may fail, delete still pending for ' + pathname,\n                      RuntimeWarning, stacklevel=4)\n    def _unlink(filename):\n        _waitfor(os.unlink, filename)\n    def _rmdir(dirname):\n        _waitfor(os.rmdir, dirname)\n    def _rmtree(path):\n        def _rmtree_inner(path):\n            for name in os.listdir(path):\n                fullname = os.path.join(path, name)\n                if os.path.isdir(fullname):\n                    _waitfor(_rmtree_inner, fullname, waitall=True)\n                    os.rmdir(fullname)\n                else:\n                    os.unlink(fullname)\n        _waitfor(_rmtree_inner, path, waitall=True)\n        _waitfor(os.rmdir, path)\nelse:\n    _unlink = os.unlink\n    _rmdir = os.rmdir\n    _rmtree = shutil.rmtree\ndef unlink(filename):\n    try:\n        _unlink(filename)\n    except OSError as error:\n        if error.errno not in (errno.ENOENT, errno.ENOTDIR):\n            raise\ndef rmdir(dirname):\n    try:\n        _rmdir(dirname)\n    except OSError as error:\n        if error.errno != errno.ENOENT:\n            raise\ndef rmtree(path):\n    try:\n        _rmtree(path)\n    except OSError as error:\n        if error.errno != errno.ENOENT:\n            raise\ndef make_legacy_pyc(source):\n    \"\"\"Move a PEP 3147 pyc/pyo file to its legacy pyc/pyo location.\n    The choice of .pyc or .pyo extension is done based on the __debug__ flag\n    value.\n    :param source: The file system path to the source file.  The source file\n        does not need to exist, however the PEP 3147 pyc file must exist.\n    :return: The file system path to the legacy pyc file.\n    \"\"\"\n    pyc_file = imp.cache_from_source(source)\n    up_one = os.path.dirname(os.path.abspath(source))\n    legacy_pyc = os.path.join(up_one, source + ('c' if __debug__ else 'o'))\n    os.rename(pyc_file, legacy_pyc)\n    return legacy_pyc\ndef forget(modname):\n    \"\"\"'Forget' a module was ever imported.\n    This removes the module from sys.modules and deletes any PEP 3147 or\n    legacy .pyc and .pyo files.\n    \"\"\"\n    unload(modname)\n    for dirname in sys.path:\n        source = os.path.join(dirname, modname + '.py')\n        unlink(source + 'c')\n        unlink(source + 'o')\n        unlink(imp.cache_from_source(source, debug_override=True))\n        unlink(imp.cache_from_source(source, debug_override=False))\nif sys.platform.startswith('win'):\n    import ctypes\n    import ctypes.wintypes\n    def _is_gui_available():\n        UOI_FLAGS = 1\n        WSF_VISIBLE = 0x0001\n        class USEROBJECTFLAGS(ctypes.Structure):\n            _fields_ = [(\"fInherit\", ctypes.wintypes.BOOL),\n                        (\"fReserved\", ctypes.wintypes.BOOL),\n                        (\"dwFlags\", ctypes.wintypes.DWORD)]\n        dll = ctypes.windll.user32\n        h = dll.GetProcessWindowStation()\n        if not h:\n            raise ctypes.WinError()\n        uof = USEROBJECTFLAGS()\n        needed = ctypes.wintypes.DWORD()\n        res = dll.GetUserObjectInformationW(h,\n            UOI_FLAGS,\n            ctypes.byref(uof),\n            ctypes.sizeof(uof),\n            ctypes.byref(needed))\n        if not res:\n            raise ctypes.WinError()\n        return bool(uof.dwFlags & WSF_VISIBLE)\nelse:\n    def _is_gui_available():\n        return True\ndef is_resource_enabled(resource):\n    \"\"\"Test whether a resource is enabled.  Known resources are set by\n    regrtest.py.\"\"\"\n    return use_resources is not None and resource in use_resources\ndef requires(resource, msg=None):\n    \"\"\"Raise ResourceDenied if the specified resource is not available.\n    If the caller's module is __main__ then automatically return True.  The\n    possibility of False being returned occurs when regrtest.py is\n    executing.\n    \"\"\"\n    if resource == 'gui' and not _is_gui_available():\n        raise unittest.SkipTest(\"Cannot use the 'gui' resource\")\n    if sys._getframe(1).f_globals.get(\"__name__\") == \"__main__\":\n        return\n    if not is_resource_enabled(resource):\n        if msg is None:\n            msg = \"Use of the %r resource not enabled\" % resource\n        raise ResourceDenied(msg)\ndef _requires_unix_version(sysname, min_version):\n    \"\"\"Decorator raising SkipTest if the OS is `sysname` and the version is less\n    than `min_version`.\n    For example, @_requires_unix_version('FreeBSD', (7, 2)) raises SkipTest if\n    the FreeBSD version is less than 7.2.\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            if platform.system() == sysname:\n                version_txt = platform.release().split('-', 1)[0]\n                try:\n                    version = tuple(map(int, version_txt.split('.')))\n                except ValueError:\n                    pass\n                else:\n                    if version < min_version:\n                        min_version_txt = '.'.join(map(str, min_version))\n                        raise unittest.SkipTest(\n                            \"%s version %s or higher required, not %s\"\n                            % (sysname, min_version_txt, version_txt))\n        return wrapper\n    return decorator\ndef requires_freebsd_version(*min_version):\n    \"\"\"Decorator raising SkipTest if the OS is FreeBSD and the FreeBSD version is\n    less than `min_version`.\n    For example, @requires_freebsd_version(7, 2) raises SkipTest if the FreeBSD\n    version is less than 7.2.\n    \"\"\"\n    return _requires_unix_version('FreeBSD', min_version)\ndef requires_linux_version(*min_version):\n    \"\"\"Decorator raising SkipTest if the OS is Linux and the Linux version is\n    less than `min_version`.\n    For example, @requires_linux_version(2, 6, 32) raises SkipTest if the Linux\n    version is less than 2.6.32.\n    \"\"\"\n    return _requires_unix_version('Linux', min_version)\ndef requires_mac_ver(*min_version):\n    \"\"\"Decorator raising SkipTest if the OS is Mac OS X and the OS X\n    version if less than min_version.\n    For example, @requires_mac_ver(10, 5) raises SkipTest if the OS X version\n    is lesser than 10.5.\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            if sys.platform == 'darwin':\n                version_txt = platform.mac_ver()[0]\n                try:\n                    version = tuple(map(int, version_txt.split('.')))\n                except ValueError:\n                    pass\n                else:\n                    if version < min_version:\n                        min_version_txt = '.'.join(map(str, min_version))\n                        raise unittest.SkipTest(\n                            \"Mac OS X %s or higher required, not %s\"\n                            % (min_version_txt, version_txt))\n            return func(*args, **kw)\n        wrapper.min_version = min_version\n        return wrapper\n    return decorator\nHOST = 'localhost'\ndef find_unused_port(family=socket.AF_INET, socktype=socket.SOCK_STREAM):\n    \"\"\"Returns an unused port that should be suitable for binding.  This is\n    achieved by creating a temporary socket with the same family and type as\n    the 'sock' parameter (default is AF_INET, SOCK_STREAM), and binding it to\n    the specified host address (defaults to 0.0.0.0) with the port set to 0,\n    eliciting an unused ephemeral port from the OS.  The temporary socket is\n    then closed and deleted, and the ephemeral port is returned.\n    Either this method or bind_port() should be used for any tests where a\n    server socket needs to be bound to a particular port for the duration of\n    the test.  Which one to use depends on whether the calling code is creating\n    a python socket, or if an unused port needs to be provided in a constructor\n    or passed to an external program (i.e. the -accept argument to openssl's\n    s_server mode).  Always prefer bind_port() over find_unused_port() where\n    possible.  Hard coded ports should *NEVER* be used.  As soon as a server\n    socket is bound to a hard coded port, the ability to run multiple instances\n    of the test simultaneously on the same host is compromised, which makes the\n    test a ticking time bomb in a buildbot environment. On Unix buildbots, this\n    may simply manifest as a failed test, which can be recovered from without\n    intervention in most cases, but on Windows, the entire python process can\n    completely and utterly wedge, requiring someone to log in to the buildbot\n    and manually kill the affected process.\n    (This is easy to reproduce on Windows, unfortunately, and can be traced to\n    the SO_REUSEADDR socket option having different semantics on Windows versus\n    Unix/Linux.  On Unix, you can't have two AF_INET SOCK_STREAM sockets bind,\n    listen and then accept connections on identical host/ports.  An EADDRINUSE\n    socket.error will be raised at some point (depending on the platform and\n    the order bind and listen were called on each socket).\n    However, on Windows, if SO_REUSEADDR is set on the sockets, no EADDRINUSE\n    will ever be raised when attempting to bind two identical host/ports. When\n    accept() is called on each socket, the second caller's process will steal\n    the port from the first caller, leaving them both in an awkwardly wedged\n    state where they'll no longer respond to any signals or graceful kills, and\n    must be forcibly killed via OpenProcess()/TerminateProcess().\n    The solution on Windows is to use the SO_EXCLUSIVEADDRUSE socket option\n    instead of SO_REUSEADDR, which effectively affords the same semantics as\n    SO_REUSEADDR on Unix.  Given the propensity of Unix developers in the Open\n    Source world compared to Windows ones, this is a common mistake.  A quick\n    look over OpenSSL's 0.9.8g source shows that they use SO_REUSEADDR when\n    openssl.exe is called with the 's_server' option, for example. See\n    http://bugs.python.org/issue2550 for more info.  The following site also\n    has a very thorough description about the implications of both REUSEADDR\n    and EXCLUSIVEADDRUSE on Windows:\n    http://msdn2.microsoft.com/en-us/library/ms740621(VS.85).aspx)\n    XXX: although this approach is a vast improvement on previous attempts to\n    elicit unused ports, it rests heavily on the assumption that the ephemeral\n    port returned to us by the OS won't immediately be dished back out to some\n    other process when we close and delete our temporary socket but before our\n    calling code has a chance to bind the returned port.  We can deal with this\n    issue if/when we come across it.\n    \"\"\"\n    tempsock = socket.socket(family, socktype)\n    port = bind_port(tempsock)\n    tempsock.close()\n    del tempsock\n    return port\ndef bind_port(sock, host=HOST):\n    \"\"\"Bind the socket to a free port and return the port number.  Relies on\n    ephemeral ports in order to ensure we are using an unbound port.  This is\n    important as many tests may be running simultaneously, especially in a\n    buildbot environment.  This method raises an exception if the sock.family\n    is AF_INET and sock.type is SOCK_STREAM, *and* the socket has SO_REUSEADDR\n    or SO_REUSEPORT set on it.  Tests should *never* set these socket options\n    for TCP/IP sockets.  The only case for setting these options is testing\n    multicasting via multiple UDP sockets.\n    Additionally, if the SO_EXCLUSIVEADDRUSE socket option is available (i.e.\n    on Windows), it will be set on the socket.  This will prevent anyone else\n    from bind()'ing to our host/port for the duration of the test.\n    \"\"\"\n    if sock.family == socket.AF_INET and sock.type == socket.SOCK_STREAM:\n        if hasattr(socket, 'SO_REUSEADDR'):\n            if sock.getsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR) == 1:\n                raise TestFailed(\"tests should never set the SO_REUSEADDR \"   \\\n                                 \"socket option on TCP/IP sockets!\")\n        if hasattr(socket, 'SO_REUSEPORT'):\n            if sock.getsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT) == 1:\n                raise TestFailed(\"tests should never set the SO_REUSEPORT \"   \\\n                                 \"socket option on TCP/IP sockets!\")\n        if hasattr(socket, 'SO_EXCLUSIVEADDRUSE'):\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_EXCLUSIVEADDRUSE, 1)\n    sock.bind((host, 0))\n    port = sock.getsockname()[1]\n    return port\ndef _is_ipv6_enabled():\n    \"\"\"Check whether IPv6 is enabled on this host.\"\"\"\n    if socket.has_ipv6:\n        sock = None\n        try:\n            sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n            sock.bind(('::1', 0))\n            return True\n        except (socket.error, socket.gaierror):\n            pass\n        finally:\n            if sock:\n                sock.close()\n    return False\nIPV6_ENABLED = _is_ipv6_enabled()\nPIPE_MAX_SIZE = 3 * 1000 * 1000\nrequires_IEEE_754 = unittest.skipUnless(\n    float.__getformat__(\"double\").startswith(\"IEEE\"),\n    \"test requires IEEE 754 doubles\")\nrequires_zlib = unittest.skipUnless(zlib, 'requires zlib')\nrequires_bz2 = unittest.skipUnless(bz2, 'requires bz2')\nrequires_lzma = unittest.skipUnless(lzma, 'requires lzma')\nis_jython = sys.platform.startswith('java')\nif os.name == 'java':\n    TESTFN = '$test'\nelse:\n    TESTFN = '@test'\nTESTFN = \"{}_{}_tmp\".format(TESTFN, os.getpid())\nFS_NONASCII = None\nfor character in (\n    '\\u00E6',\n    '\\u0130',\n    '\\u0141',\n    '\\u03C6',\n    '\\u041A',\n    '\\u05D0',\n    '\\u060C',\n    '\\u062A',\n    '\\u0E01',\n    '\\u00A0',\n    '\\u20AC',\n):\n    try:\n        os.fsdecode(os.fsencode(character))\n    except UnicodeError:\n        pass\n    else:\n        FS_NONASCII = character\n        break\nTESTFN_UNICODE = TESTFN + \"-\\xe0\\xf2\\u0258\\u0141\\u011f\"\nif sys.platform == 'darwin':\n    import unicodedata\n    TESTFN_UNICODE = unicodedata.normalize('NFD', TESTFN_UNICODE)\nTESTFN_ENCODING = sys.getfilesystemencoding()\nTESTFN_UNENCODABLE = None\nif os.name in ('nt', 'ce'):\n    if sys.getwindowsversion().platform >= 2:\n        TESTFN_UNENCODABLE = TESTFN + \"-\\u5171\\u0141\\u2661\\u0363\\uDC80\"\n        try:\n            TESTFN_UNENCODABLE.encode(TESTFN_ENCODING)\n        except UnicodeEncodeError:\n            pass\n        else:\n            print('WARNING: The filename %r CAN be encoded by the filesystem encoding (%s). '\n                  'Unicode filename tests may not be effective'\n                  % (TESTFN_UNENCODABLE, TESTFN_ENCODING))\n            TESTFN_UNENCODABLE = None\nelif sys.platform != 'darwin':\n    try:\n        b'\\xff'.decode(TESTFN_ENCODING)\n    except UnicodeDecodeError:\n        TESTFN_UNENCODABLE = TESTFN \\\n            + b'-\\xff'.decode(TESTFN_ENCODING, 'surrogateescape')\n    else:\n        pass\nTESTFN_UNDECODABLE = None\n'''  #fixme brython\nfor name in (\n    b'\\xe7w\\xf0',\n    b'\\xff',\n    b'\\xae\\xd5'\n    b'\\xed\\xb2\\x80', b'\\xed\\xb4\\x80',\n    b'\\x81\\x98',\n):\n    try:\n        name.decode(TESTFN_ENCODING)\n    except UnicodeDecodeError:\n        TESTFN_UNDECODABLE = os.fsencode(TESTFN) + name\n        break\n'''\nif FS_NONASCII:\n    TESTFN_NONASCII = TESTFN + '-' + FS_NONASCII\nelse:\n    TESTFN_NONASCII = None\nSAVEDCWD = os.getcwd()\n@contextlib.contextmanager\ndef temp_cwd(name='tempcwd', quiet=False, path=None):\n    \"\"\"\n    Context manager that temporarily changes the CWD.\n    An existing path may be provided as *path*, in which case this\n    function makes no changes to the file system.\n    Otherwise, the new CWD is created in the current directory and it's\n    named *name*. If *quiet* is False (default) and it's not possible to\n    create or change the CWD, an error is raised.  If it's True, only a\n    warning is raised and the original CWD is used.\n    \"\"\"\n    saved_dir = os.getcwd()\n    is_temporary = False\n    if path is None:\n        path = name\n        try:\n            os.mkdir(name)\n            is_temporary = True\n        except OSError:\n            if not quiet:\n                raise\n            warnings.warn('tests may fail, unable to create temp CWD ' + name,\n                          RuntimeWarning, stacklevel=3)\n    try:\n        os.chdir(path)\n    except OSError:\n        if not quiet:\n            raise\n        warnings.warn('tests may fail, unable to change the CWD to ' + path,\n                      RuntimeWarning, stacklevel=3)\n    try:\n        yield os.getcwd()\n    finally:\n        os.chdir(saved_dir)\n        if is_temporary:\n            rmtree(name)\nif hasattr(os, \"umask\"):\n    @contextlib.contextmanager\n    def temp_umask(umask):\n        \"\"\"Context manager that temporarily sets the process umask.\"\"\"\n        oldmask = os.umask(umask)\n        try:\n            yield\n        finally:\n            os.umask(oldmask)\ndef findfile(file, here=__file__, subdir=None):\n    \"\"\"Try to find a file on sys.path and the working directory.  If it is not\n    found the argument passed to the function is returned (this does not\n    necessarily signal failure; could still be the legitimate path).\"\"\"\n    if os.path.isabs(file):\n        return file\n    if subdir is not None:\n        file = os.path.join(subdir, file)\n    path = sys.path\n    path = [os.path.dirname(here)] + path\n    for dn in path:\n        fn = os.path.join(dn, file)\n        if os.path.exists(fn): return fn\n    return file\ndef create_empty_file(filename):\n    \"\"\"Create an empty file. If the file already exists, truncate it.\"\"\"\n    fd = os.open(filename, os.O_WRONLY | os.O_CREAT | os.O_TRUNC)\n    os.close(fd)\ndef sortdict(dict):\n    \"Like repr(dict), but in sorted order.\"\n    items = sorted(dict.items())\n    reprpairs = [\"%r: %r\" % pair for pair in items]\n    withcommas = \", \".join(reprpairs)\n    return \"{%s}\" % withcommas\ndef make_bad_fd():\n    \"\"\"\n    Create an invalid file descriptor by opening and closing a file and return\n    its fd.\n    \"\"\"\n    file = open(TESTFN, \"wb\")\n    try:\n        return file.fileno()\n    finally:\n        file.close()\n        unlink(TESTFN)\ndef check_syntax_error(testcase, statement):\n    testcase.assertRaises(SyntaxError, compile, statement,\n                          '<test string>', 'exec')\ndef open_urlresource(url, *args, **kw):\n    import urllib.request, urllib.parse\n    check = kw.pop('check', None)\n    filename = urllib.parse.urlparse(url)[2].split('/')[-1] # '/': it's URL!\n    fn = os.path.join(os.path.dirname(__file__), \"data\", filename)\n    def check_valid_file(fn):\n        f = open(fn, *args, **kw)\n        if check is None:\n            return f\n        elif check(f):\n            f.seek(0)\n            return f\n        f.close()\n    if os.path.exists(fn):\n        f = check_valid_file(fn)\n        if f is not None:\n            return f\n        unlink(fn)\n    requires('urlfetch')\n    print('\\tfetching %s ...' % url, file=get_original_stdout())\n    f = urllib.request.urlopen(url, timeout=15)\n    try:\n        with open(fn, \"wb\") as out:\n            s = f.read()\n            while s:\n                out.write(s)\n                s = f.read()\n    finally:\n        f.close()\n    f = check_valid_file(fn)\n    if f is not None:\n        return f\n    raise TestFailed('invalid resource %r' % fn)\nclass WarningsRecorder(object):\n    \"\"\"Convenience wrapper for the warnings list returned on\n       entry to the warnings.catch_warnings() context manager.\n    \"\"\"\n    def __init__(self, warnings_list):\n        self._warnings = warnings_list\n        self._last = 0\n    def __getattr__(self, attr):\n        if len(self._warnings) > self._last:\n            return getattr(self._warnings[-1], attr)\n        elif attr in warnings.WarningMessage._WARNING_DETAILS:\n            return None\n        raise AttributeError(\"%r has no attribute %r\" % (self, attr))\n    @property\n    def warnings(self):\n        return self._warnings[self._last:]\n    def reset(self):\n        self._last = len(self._warnings)\ndef _filterwarnings(filters, quiet=False):\n    \"\"\"Catch the warnings, then check if all the expected\n    warnings have been raised and re-raise unexpected warnings.\n    If 'quiet' is True, only re-raise the unexpected warnings.\n    \"\"\"\n    frame = sys._getframe(2)\n    registry = frame.f_globals.get('__warningregistry__')\n    if registry:\n        registry.clear()\n    with warnings.catch_warnings(record=True) as w:\n        sys.modules['warnings'].simplefilter(\"always\")\n        yield WarningsRecorder(w)\n    reraise = list(w)\n    missing = []\n    for msg, cat in filters:\n        seen = False\n        for w in reraise[:]:\n            warning = w.message\n            if (re.match(msg, str(warning), re.I) and\n                issubclass(warning.__class__, cat)):\n                seen = True\n                reraise.remove(w)\n        if not seen and not quiet:\n            missing.append((msg, cat.__name__))\n    if reraise:\n        raise AssertionError(\"unhandled warning %s\" % reraise[0])\n    if missing:\n        raise AssertionError(\"filter (%r, %s) did not catch any warning\" %\n                             missing[0])\n@contextlib.contextmanager\ndef check_warnings(*filters, **kwargs):\n    \"\"\"Context manager to silence warnings.\n    Accept 2-tuples as positional arguments:\n        (\"message regexp\", WarningCategory)\n    Optional argument:\n     - if 'quiet' is True, it does not fail if a filter catches nothing\n        (default True without argument,\n         default False if some filters are defined)\n    Without argument, it defaults to:\n        check_warnings((\"\", Warning), quiet=True)\n    \"\"\"\n    quiet = kwargs.get('quiet')\n    if not filters:\n        filters = ((\"\", Warning),)\n        if quiet is None:\n            quiet = True\n    return _filterwarnings(filters, quiet)\nclass CleanImport(object):\n    \"\"\"Context manager to force import to return a new module reference.\n    This is useful for testing module-level behaviours, such as\n    the emission of a DeprecationWarning on import.\n    Use like this:\n        with CleanImport(\"foo\"):\n            importlib.import_module(\"foo\") # new reference\n    \"\"\"\n    def __init__(self, *module_names):\n        self.original_modules = sys.modules.copy()\n        for module_name in module_names:\n            if module_name in sys.modules:\n                module = sys.modules[module_name]\n                if module.__name__ != module_name:\n                    del sys.modules[module.__name__]\n                del sys.modules[module_name]\n    def __enter__(self):\n        return self\n    def __exit__(self, *ignore_exc):\n        sys.modules.update(self.original_modules)\nclass EnvironmentVarGuard(collections.abc.MutableMapping):\n    \"\"\"Class to help protect the environment variable properly.  Can be used as\n    a context manager.\"\"\"\n    def __init__(self):\n        self._environ = os.environ\n        self._changed = {}\n    def __getitem__(self, envvar):\n        return self._environ[envvar]\n    def __setitem__(self, envvar, value):\n        if envvar not in self._changed:\n            self._changed[envvar] = self._environ.get(envvar)\n        self._environ[envvar] = value\n    def __delitem__(self, envvar):\n        if envvar not in self._changed:\n            self._changed[envvar] = self._environ.get(envvar)\n        if envvar in self._environ:\n            del self._environ[envvar]\n    def keys(self):\n        return self._environ.keys()\n    def __iter__(self):\n        return iter(self._environ)\n    def __len__(self):\n        return len(self._environ)\n    def set(self, envvar, value):\n        self[envvar] = value\n    def unset(self, envvar):\n        del self[envvar]\n    def __enter__(self):\n        return self\n    def __exit__(self, *ignore_exc):\n        for (k, v) in self._changed.items():\n            if v is None:\n                if k in self._environ:\n                    del self._environ[k]\n            else:\n                self._environ[k] = v\n        os.environ = self._environ\nclass DirsOnSysPath(object):\n    \"\"\"Context manager to temporarily add directories to sys.path.\n    This makes a copy of sys.path, appends any directories given\n    as positional arguments, then reverts sys.path to the copied\n    settings when the context ends.\n    Note that *all* sys.path modifications in the body of the\n    context manager, including replacement of the object,\n    will be reverted at the end of the block.\n    \"\"\"\n    def __init__(self, *paths):\n        self.original_value = sys.path[:]\n        self.original_object = sys.path\n        sys.path.extend(paths)\n    def __enter__(self):\n        return self\n    def __exit__(self, *ignore_exc):\n        sys.path = self.original_object\n        sys.path[:] = self.original_value\nclass TransientResource(object):\n    \"\"\"Raise ResourceDenied if an exception is raised while the context manager\n    is in effect that matches the specified exception and attributes.\"\"\"\n    def __init__(self, exc, **kwargs):\n        self.exc = exc\n        self.attrs = kwargs\n    def __enter__(self):\n        return self\n    def __exit__(self, type_=None, value=None, traceback=None):\n        \"\"\"If type_ is a subclass of self.exc and value has attributes matching\n        self.attrs, raise ResourceDenied.  Otherwise let the exception\n        propagate (if any).\"\"\"\n        if type_ is not None and issubclass(self.exc, type_):\n            for attr, attr_value in self.attrs.items():\n                if not hasattr(value, attr):\n                    break\n                if getattr(value, attr) != attr_value:\n                    break\n            else:\n                raise ResourceDenied(\"an optional resource is not available\")\ntime_out = TransientResource(IOError, errno=errno.ETIMEDOUT)\nsocket_peer_reset = TransientResource(socket.error, errno=errno.ECONNRESET)\nioerror_peer_reset = TransientResource(IOError, errno=errno.ECONNRESET)\n@contextlib.contextmanager\ndef transient_internet(resource_name, *, timeout=30.0, errnos=()):\n    \"\"\"Return a context manager that raises ResourceDenied when various issues\n    with the Internet connection manifest themselves as exceptions.\"\"\"\n    default_errnos = [\n        ('ECONNREFUSED', 111),\n        ('ECONNRESET', 104),\n        ('EHOSTUNREACH', 113),\n        ('ENETUNREACH', 101),\n        ('ETIMEDOUT', 110),\n    ]\n    default_gai_errnos = [\n        ('EAI_AGAIN', -3),\n        ('EAI_FAIL', -4),\n        ('EAI_NONAME', -2),\n        ('EAI_NODATA', -5),\n        ('WSANO_DATA', 11004),\n    ]\n    denied = ResourceDenied(\"Resource %r is not available\" % resource_name)\n    captured_errnos = errnos\n    gai_errnos = []\n    if not captured_errnos:\n        captured_errnos = [getattr(errno, name, num)\n                           for (name, num) in default_errnos]\n        gai_errnos = [getattr(socket, name, num)\n                      for (name, num) in default_gai_errnos]\n    def filter_error(err):\n        n = getattr(err, 'errno', None)\n        if (isinstance(err, socket.timeout) or\n            (isinstance(err, socket.gaierror) and n in gai_errnos) or\n            n in captured_errnos):\n            if not verbose:\n                sys.stderr.write(denied.args[0] + \"\\n\")\n            raise denied from err\n    old_timeout = socket.getdefaulttimeout()\n    try:\n        if timeout is not None:\n            socket.setdefaulttimeout(timeout)\n        yield\n    except IOError as err:\n        while True:\n            a = err.args\n            if len(a) >= 1 and isinstance(a[0], IOError):\n                err = a[0]\n            elif len(a) >= 2 and isinstance(a[1], IOError):\n                err = a[1]\n            else:\n                break\n        filter_error(err)\n        raise\n    finally:\n        socket.setdefaulttimeout(old_timeout)\n@contextlib.contextmanager\ndef captured_output(stream_name):\n    \"\"\"Return a context manager used by captured_stdout/stdin/stderr\n    that temporarily replaces the sys stream *stream_name* with a StringIO.\"\"\"\n    import io\n    orig_stdout = getattr(sys, stream_name)\n    setattr(sys, stream_name, io.StringIO())\n    try:\n        yield getattr(sys, stream_name)\n    finally:\n        setattr(sys, stream_name, orig_stdout)\ndef captured_stdout():\n    \"\"\"Capture the output of sys.stdout:\n       with captured_stdout() as s:\n           print(\"hello\")\n       self.assertEqual(s.getvalue(), \"hello\")\n    \"\"\"\n    return captured_output(\"stdout\")\ndef captured_stderr():\n    return captured_output(\"stderr\")\ndef captured_stdin():\n    return captured_output(\"stdin\")\ndef gc_collect():\n    \"\"\"Force as many objects as possible to be collected.\n    In non-CPython implementations of Python, this is needed because timely\n    deallocation is not guaranteed by the garbage collector.  (Even in CPython\n    this can be the case in case of reference cycles.)  This means that __del__\n    methods may be called later than expected and weakrefs may remain alive for\n    longer than expected.  This function tries its best to force all garbage\n    objects to disappear.\n    \"\"\"\n    gc.collect()\n    if is_jython:\n        time.sleep(0.1)\n    gc.collect()\n    gc.collect()\n@contextlib.contextmanager\ndef disable_gc():\n    have_gc = gc.isenabled()\n    gc.disable()\n    try:\n        yield\n    finally:\n        if have_gc:\n            gc.enable()\ndef python_is_optimized():\n    \"\"\"Find if Python was built with optimizations.\"\"\"\n    cflags = sysconfig.get_config_var('PY_CFLAGS') or ''\n    final_opt = \"\"\n    for opt in cflags.split():\n        if opt.startswith('-O'):\n            final_opt = opt\n    return final_opt != '' and final_opt != '-O0'\n_header = 'nP'\n_align = '0n'\nif hasattr(sys, \"gettotalrefcount\"):\n    _header = '2P' + _header\n    _align = '0P'\n_vheader = _header + 'n'\ndef calcobjsize(fmt):\n    return struct.calcsize(_header + fmt + _align)\ndef calcvobjsize(fmt):\n    return struct.calcsize(_vheader + fmt + _align)\n_TPFLAGS_HAVE_GC = 1<<14\n_TPFLAGS_HEAPTYPE = 1<<9\ndef check_sizeof(test, o, size):\n    result = sys.getsizeof(o)\n    if ((type(o) == type) and (o.__flags__ & _TPFLAGS_HEAPTYPE) or\\\n        ((type(o) != type) and (type(o).__flags__ & _TPFLAGS_HAVE_GC))):\n        size += _testcapi.SIZEOF_PYGC_HEAD\n    msg = 'wrong size for %s: got %d, expected %d' \\\n            % (type(o), result, size)\n    test.assertEqual(result, size, msg)\ndef run_with_locale(catstr, *locales):\n    def decorator(func):\n        def inner(*args, **kwds):\n            try:\n                import locale\n                category = getattr(locale, catstr)\n                orig_locale = locale.setlocale(category)\n            except AttributeError:\n                raise\n            except:\n                locale = orig_locale = None\n            else:\n                for loc in locales:\n                    try:\n                        locale.setlocale(category, loc)\n                        break\n                    except:\n                        pass\n            try:\n                return func(*args, **kwds)\n            finally:\n                if locale and orig_locale:\n                    locale.setlocale(category, orig_locale)\n        inner.__name__ = func.__name__\n        inner.__doc__ = func.__doc__\n        return inner\n    return decorator\ndef run_with_tz(tz):\n    def decorator(func):\n        def inner(*args, **kwds):\n            try:\n                tzset = time.tzset\n            except AttributeError:\n                raise unittest.SkipTest(\"tzset required\")\n            if 'TZ' in os.environ:\n                orig_tz = os.environ['TZ']\n            else:\n                orig_tz = None\n            os.environ['TZ'] = tz\n            tzset()\n            try:\n                return func(*args, **kwds)\n            finally:\n                if orig_tz is None:\n                    del os.environ['TZ']\n                else:\n                    os.environ['TZ'] = orig_tz\n                time.tzset()\n        inner.__name__ = func.__name__\n        inner.__doc__ = func.__doc__\n        return inner\n    return decorator\n_1M = 1024*1024\n_1G = 1024 * _1M\n_2G = 2 * _1G\n_4G = 4 * _1G\nMAX_Py_ssize_t = sys.maxsize\ndef set_memlimit(limit):\n    global max_memuse\n    global real_max_memuse\n    sizes = {\n        'k': 1024,\n        'm': _1M,\n        'g': _1G,\n        't': 1024*_1G,\n    }\n    m = re.match(r'(\\d+(\\.\\d+)?) (K|M|G|T)b?$', limit,\n                 re.IGNORECASE | re.VERBOSE)\n    if m is None:\n        raise ValueError('Invalid memory limit %r' % (limit,))\n    memlimit = int(float(m.group(1)) * sizes[m.group(3).lower()])\n    real_max_memuse = memlimit\n    if memlimit > MAX_Py_ssize_t:\n        memlimit = MAX_Py_ssize_t\n    if memlimit < _2G - 1:\n        raise ValueError('Memory limit %r too low to be useful' % (limit,))\n    max_memuse = memlimit\nclass _MemoryWatchdog:\n    \"\"\"An object which periodically watches the process' memory consumption\n    and prints it out.\n    \"\"\"\n    def __init__(self):\n        self.procfile = '/proc/{pid}/statm'.format(pid=os.getpid())\n        self.started = False\n    def start(self):\n        try:\n            f = open(self.procfile, 'r')\n        except OSError as e:\n            warnings.warn('/proc not available for stats: {}'.format(e),\n                          RuntimeWarning)\n            sys.stderr.flush()\n            return\n        watchdog_script = findfile(\"memory_watchdog.py\")\n        self.mem_watchdog = subprocess.Popen([sys.executable, watchdog_script],\n                                             stdin=f, stderr=subprocess.DEVNULL)\n        f.close()\n        self.started = True\n    def stop(self):\n        if self.started:\n            self.mem_watchdog.terminate()\n            self.mem_watchdog.wait()\ndef bigmemtest(size, memuse, dry_run=True):\n    \"\"\"Decorator for bigmem tests.\n    'minsize' is the minimum useful size for the test (in arbitrary,\n    test-interpreted units.) 'memuse' is the number of 'bytes per size' for\n    the test, or a good estimate of it.\n    if 'dry_run' is False, it means the test doesn't support dummy runs\n    when -M is not specified.\n    \"\"\"\n    def decorator(f):\n        def wrapper(self):\n            size = wrapper.size\n            memuse = wrapper.memuse\n            if not real_max_memuse:\n                maxsize = 5147\n            else:\n                maxsize = size\n            if ((real_max_memuse or not dry_run)\n                and real_max_memuse < maxsize * memuse):\n                raise unittest.SkipTest(\n                    \"not enough memory: %.1fG minimum needed\"\n                    % (size * memuse / (1024 ** 3)))\n            if real_max_memuse and verbose:\n                print()\n                print(\" ... expected peak memory use: {peak:.1f}G\"\n                      .format(peak=size * memuse / (1024 ** 3)))\n                watchdog = _MemoryWatchdog()\n                watchdog.start()\n            else:\n                watchdog = None\n            try:\n                return f(self, maxsize)\n            finally:\n                if watchdog:\n                    watchdog.stop()\n        wrapper.size = size\n        wrapper.memuse = memuse\n        return wrapper\n    return decorator\ndef bigaddrspacetest(f):\n    \"\"\"Decorator for tests that fill the address space.\"\"\"\n    def wrapper(self):\n        if max_memuse < MAX_Py_ssize_t:\n            if MAX_Py_ssize_t >= 2**63 - 1 and max_memuse >= 2**31:\n                raise unittest.SkipTest(\n                    \"not enough memory: try a 32-bit build instead\")\n            else:\n                raise unittest.SkipTest(\n                    \"not enough memory: %.1fG minimum needed\"\n                    % (MAX_Py_ssize_t / (1024 ** 3)))\n        else:\n            return f(self)\n    return wrapper\nclass BasicTestRunner:\n    def run(self, test):\n        result = unittest.TestResult()\n        test(result)\n        return result\ndef _id(obj):\n    return obj\ndef requires_resource(resource):\n    if resource == 'gui' and not _is_gui_available():\n        return unittest.skip(\"resource 'gui' is not available\")\n    if is_resource_enabled(resource):\n        return _id\n    else:\n        return unittest.skip(\"resource {0!r} is not enabled\".format(resource))\ndef cpython_only(test):\n    \"\"\"\n    Decorator for tests only applicable on CPython.\n    \"\"\"\n    return impl_detail(cpython=True)(test)\ndef impl_detail(msg=None, **guards):\n    if check_impl_detail(**guards):\n        return _id\n    if msg is None:\n        guardnames, default = _parse_guards(guards)\n        if default:\n            msg = \"implementation detail not available on {0}\"\n        else:\n            msg = \"implementation detail specific to {0}\"\n        guardnames = sorted(guardnames.keys())\n        msg = msg.format(' or '.join(guardnames))\n    return unittest.skip(msg)\ndef _parse_guards(guards):\n    if not guards:\n        return ({'cpython': True}, False)\n    is_true = list(guards.values())[0]\n    assert list(guards.values()) == [is_true] * len(guards)   # all True or all False\n    return (guards, not is_true)\ndef check_impl_detail(**guards):\n    \"\"\"This function returns True or False depending on the host platform.\n       Examples:\n          if check_impl_detail():               # only on CPython (default)\n          if check_impl_detail(jython=True):    # only on Jython\n          if check_impl_detail(cpython=False):  # everywhere except on CPython\n    \"\"\"\n    guards, default = _parse_guards(guards)\n    return guards.get(platform.python_implementation().lower(), default)\ndef no_tracing(func):\n    \"\"\"Decorator to temporarily turn off tracing for the duration of a test.\"\"\"\n    if not hasattr(sys, 'gettrace'):\n        return func\n    else:\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            original_trace = sys.gettrace()\n            try:\n                sys.settrace(None)\n                return func(*args, **kwargs)\n            finally:\n                sys.settrace(original_trace)\n        return wrapper\ndef refcount_test(test):\n    \"\"\"Decorator for tests which involve reference counting.\n    To start, the decorator does not run the test if is not run by CPython.\n    After that, any trace function is unset during the test to prevent\n    unexpected refcounts caused by the trace function.\n    \"\"\"\n    return no_tracing(cpython_only(test))\ndef _filter_suite(suite, pred):\n    \"\"\"Recursively filter test cases in a suite based on a predicate.\"\"\"\n    newtests = []\n    for test in suite._tests:\n        if isinstance(test, unittest.TestSuite):\n            _filter_suite(test, pred)\n            newtests.append(test)\n        else:\n            if pred(test):\n                newtests.append(test)\n    suite._tests = newtests\ndef _run_suite(suite):\n    \"\"\"Run tests from a unittest.TestSuite-derived class.\"\"\"\n    if verbose:\n        runner = unittest.TextTestRunner(sys.stdout, verbosity=2,\n                                         failfast=failfast)\n    else:\n        runner = BasicTestRunner()\n    result = runner.run(suite)\n    if not result.wasSuccessful():\n        if len(result.errors) == 1 and not result.failures:\n            err = result.errors[0][1]\n        elif len(result.failures) == 1 and not result.errors:\n            err = result.failures[0][1]\n        else:\n            err = \"multiple errors occurred\"\n            if not verbose: err += \"; run in verbose mode for details\"\n        raise TestFailed(err)\ndef run_unittest(*classes):\n    \"\"\"Run tests from unittest.TestCase-derived classes.\"\"\"\n    valid_types = (unittest.TestSuite, unittest.TestCase)\n    suite = unittest.TestSuite()\n    for cls in classes:\n        if isinstance(cls, str):\n            if cls in sys.modules:\n                suite.addTest(unittest.findTestCases(sys.modules[cls]))\n            else:\n                raise ValueError(\"str arguments must be keys in sys.modules\")\n        elif isinstance(cls, valid_types):\n            suite.addTest(cls)\n        else:\n            suite.addTest(unittest.makeSuite(cls))\n    def case_pred(test):\n        if match_tests is None:\n            return True\n        for name in test.id().split(\".\"):\n            if fnmatch.fnmatchcase(name, match_tests):\n                return True\n        return False\n    _filter_suite(suite, case_pred)\n    _run_suite(suite)\nHAVE_DOCSTRINGS = (check_impl_detail(cpython=False) or\n                   sys.platform == 'win32' or\n                   sysconfig.get_config_var('WITH_DOC_STRINGS'))\nrequires_docstrings = unittest.skipUnless(HAVE_DOCSTRINGS,\n                                          \"test requires docstrings\")\ndef run_doctest(module, verbosity=None, optionflags=0):\n    \"\"\"Run doctest on the given module.  Return (#failures, #tests).\n    If optional argument verbosity is not specified (or is None), pass\n    support's belief about verbosity on to doctest.  Else doctest's\n    usual behavior is used (it searches sys.argv for -v).\n    \"\"\"\n    import doctest\n    if verbosity is None:\n        verbosity = verbose\n    else:\n        verbosity = None\n    f, t = doctest.testmod(module, verbose=verbosity, optionflags=optionflags)\n    if f:\n        raise TestFailed(\"%d of %d doctests failed\" % (f, t))\n    if verbose:\n        print('doctest (%s) ... %d tests with zero failures' %\n              (module.__name__, t))\n    return f, t\ndef modules_setup():\n    return sys.modules.copy(),\ndef modules_cleanup(oldmodules):\n    encodings = [(k, v) for k, v in sys.modules.items()\n                 if k.startswith('encodings.')]\n    sys.modules.clear()\n    sys.modules.update(encodings)\n    sys.modules.update(oldmodules)\ndef threading_setup():\n    if _thread:\n        return _thread._count(), threading._dangling.copy()\n    else:\n        return 1, ()\ndef threading_cleanup(*original_values):\n    if not _thread:\n        return\n    _MAX_COUNT = 10\n    for count in range(_MAX_COUNT):\n        values = _thread._count(), threading._dangling\n        if values == original_values:\n            break\n        time.sleep(0.1)\n        gc_collect()\ndef reap_threads(func):\n    \"\"\"Use this function when threads are being used.  This will\n    ensure that the threads are cleaned up even when the test fails.\n    If threading is unavailable this function does nothing.\n    \"\"\"\n    if not _thread:\n        return func\n    @functools.wraps(func)\n    def decorator(*args):\n        key = threading_setup()\n        try:\n            return func(*args)\n        finally:\n            threading_cleanup(*key)\n    return decorator\ndef reap_children():\n    \"\"\"Use this function at the end of test_main() whenever sub-processes\n    are started.  This will help ensure that no extra children (zombies)\n    stick around to hog resources and create problems when looking\n    for refleaks.\n    \"\"\"\n    if hasattr(os, 'waitpid'):\n        any_process = -1\n        while True:\n            try:\n                pid, status = os.waitpid(any_process, os.WNOHANG)\n                if pid == 0:\n                    break\n            except:\n                break\n@contextlib.contextmanager\ndef swap_attr(obj, attr, new_val):\n    \"\"\"Temporary swap out an attribute with a new object.\n    Usage:\n        with swap_attr(obj, \"attr\", 5):\n            ...\n        This will set obj.attr to 5 for the duration of the with: block,\n        restoring the old value at the end of the block. If `attr` doesn't\n        exist on `obj`, it will be created and then deleted at the end of the\n        block.\n    \"\"\"\n    if hasattr(obj, attr):\n        real_val = getattr(obj, attr)\n        setattr(obj, attr, new_val)\n        try:\n            yield\n        finally:\n            setattr(obj, attr, real_val)\n    else:\n        setattr(obj, attr, new_val)\n        try:\n            yield\n        finally:\n            delattr(obj, attr)\n@contextlib.contextmanager\ndef swap_item(obj, item, new_val):\n    \"\"\"Temporary swap out an item with a new object.\n    Usage:\n        with swap_item(obj, \"item\", 5):\n            ...\n        This will set obj[\"item\"] to 5 for the duration of the with: block,\n        restoring the old value at the end of the block. If `item` doesn't\n        exist on `obj`, it will be created and then deleted at the end of the\n        block.\n    \"\"\"\n    if item in obj:\n        real_val = obj[item]\n        obj[item] = new_val\n        try:\n            yield\n        finally:\n            obj[item] = real_val\n    else:\n        obj[item] = new_val\n        try:\n            yield\n        finally:\n            del obj[item]\ndef strip_python_stderr(stderr):\n    \"\"\"Strip the stderr of a Python process from potential debug output\n    emitted by the interpreter.\n    This will typically be run on the result of the communicate() method\n    of a subprocess.Popen object.\n    \"\"\"\n    stderr = re.sub(br\"\\[\\d+ refs\\]\\r?\\n?\", b\"\", stderr).strip()\n    return stderr\ndef args_from_interpreter_flags():\n    \"\"\"Return a list of command-line arguments reproducing the current\n    settings in sys.flags and sys.warnoptions.\"\"\"\n    return subprocess._args_from_interpreter_flags()\nclass TestHandler(logging.handlers.BufferingHandler):\n    def __init__(self, matcher):\n        logging.handlers.BufferingHandler.__init__(self, 0)\n        self.matcher = matcher\n    def shouldFlush(self):\n        return False\n    def emit(self, record):\n        self.format(record)\n        self.buffer.append(record.__dict__)\n    def matches(self, **kwargs):\n        \"\"\"\n        Look for a saved dict whose keys/values match the supplied arguments.\n        \"\"\"\n        result = False\n        for d in self.buffer:\n            if self.matcher.matches(d, **kwargs):\n                result = True\n                break\n        return result\nclass Matcher(object):\n    _partial_matches = ('msg', 'message')\n    def matches(self, d, **kwargs):\n        \"\"\"\n        Try to match a single dict with the supplied arguments.\n        Keys whose values are strings and which are in self._partial_matches\n        will be checked for partial (i.e. substring) matches. You can extend\n        this scheme to (for example) do regular expression matching, etc.\n        \"\"\"\n        result = True\n        for k in kwargs:\n            v = kwargs[k]\n            dv = d.get(k)\n            if not self.match_value(k, dv, v):\n                result = False\n                break\n        return result\n    def match_value(self, k, dv, v):\n        \"\"\"\n        Try to match a single stored value (dv) with a supplied value (v).\n        \"\"\"\n        if type(v) != type(dv):\n            result = False\n        elif type(dv) is not str or k not in self._partial_matches:\n            result = (v == dv)\n        else:\n            result = dv.find(v) >= 0\n        return result\n_can_symlink = None\ndef can_symlink():\n    global _can_symlink\n    if _can_symlink is not None:\n        return _can_symlink\n    symlink_path = TESTFN + \"can_symlink\"\n    try:\n        os.symlink(TESTFN, symlink_path)\n        can = True\n    except (OSError, NotImplementedError, AttributeError):\n        can = False\n    else:\n        os.remove(symlink_path)\n    _can_symlink = can\n    return can\ndef skip_unless_symlink(test):\n    \"\"\"Skip decorator for tests that require functional symlink\"\"\"\n    ok = can_symlink()\n    msg = \"Requires functional symlink implementation\"\n    return test if ok else unittest.skip(msg)(test)\n_can_xattr = None\ndef can_xattr():\n    global _can_xattr\n    if _can_xattr is not None:\n        return _can_xattr\n    if not hasattr(os, \"setxattr\"):\n        can = False\n    else:\n        tmp_fp, tmp_name = tempfile.mkstemp()\n        try:\n            with open(TESTFN, \"wb\") as fp:\n                try:\n                    os.setxattr(tmp_fp, b\"user.test\", b\"\")\n                    os.setxattr(fp.fileno(), b\"user.test\", b\"\")\n                    kernel_version = platform.release()\n                    m = re.match(\"2.6.(\\d{1,2})\", kernel_version)\n                    can = m is None or int(m.group(1)) >= 39\n                except OSError:\n                    can = False\n        finally:\n            unlink(TESTFN)\n            unlink(tmp_name)\n    _can_xattr = can\n    return can\ndef skip_unless_xattr(test):\n    \"\"\"Skip decorator for tests that require functional extended attributes\"\"\"\n    ok = can_xattr()\n    msg = \"no non-broken extended attribute support\"\n    return test if ok else unittest.skip(msg)(test)\nif sys.platform.startswith('win'):\n    @contextlib.contextmanager\n    def suppress_crash_popup():\n        \"\"\"Disable Windows Error Reporting dialogs using SetErrorMode.\"\"\"\n        import ctypes\n        k32 = ctypes.windll.kernel32\n        SEM_NOGPFAULTERRORBOX = 0x02\n        old_error_mode = k32.SetErrorMode(SEM_NOGPFAULTERRORBOX)\n        k32.SetErrorMode(old_error_mode | SEM_NOGPFAULTERRORBOX)\n        try:\n            yield\n        finally:\n            k32.SetErrorMode(old_error_mode)\nelse:\n    @contextlib.contextmanager\n    def suppress_crash_popup():\n        yield\ndef patch(test_instance, object_to_patch, attr_name, new_value):\n    \"\"\"Override 'object_to_patch'.'attr_name' with 'new_value'.\n    Also, add a cleanup procedure to 'test_instance' to restore\n    'object_to_patch' value for 'attr_name'.\n    The 'attr_name' should be a valid attribute for 'object_to_patch'.\n    \"\"\"\n    getattr(object_to_patch, attr_name)\n    attr_is_local = False\n    try:\n        old_value = object_to_patch.__dict__[attr_name]\n    except (AttributeError, KeyError):\n        old_value = getattr(object_to_patch, attr_name, None)\n    else:\n        attr_is_local = True\n    def cleanup():\n        if attr_is_local:\n            setattr(object_to_patch, attr_name, old_value)\n        else:\n            delattr(object_to_patch, attr_name)\n    test_instance.addCleanup(cleanup)\n    setattr(object_to_patch, attr_name, new_value)\n", "/Lib/abc.py": "\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"\nfrom _weakrefset import WeakSet\ndef abstractmethod(funcobj):\n    \"\"\"A decorator indicating abstract methods.\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract methods are overridden.\n    The abstract methods can be called using any of the normal\n    'super' call mechanisms.\n    Usage:\n        class C(metaclass=ABCMeta):\n            @abstractmethod\n            def my_abstract_method(self, ...):\n                ...\n    \"\"\"\n    funcobj.__isabstractmethod__ = True\n    return funcobj\nclass abstractclassmethod(classmethod):\n    \"\"\"\n    A decorator indicating abstract classmethods.\n    Similar to abstractmethod.\n    Usage:\n        class C(metaclass=ABCMeta):\n            @abstractclassmethod\n            def my_abstract_classmethod(cls, ...):\n                ...\n    'abstractclassmethod' is deprecated. Use 'classmethod' with\n    'abstractmethod' instead.\n    \"\"\"\n    __isabstractmethod__ = True\n    def __init__(self, callable):\n        callable.__isabstractmethod__ = True\n        super().__init__(callable)\nclass abstractstaticmethod(staticmethod):\n    \"\"\"\n    A decorator indicating abstract staticmethods.\n    Similar to abstractmethod.\n    Usage:\n        class C(metaclass=ABCMeta):\n            @abstractstaticmethod\n            def my_abstract_staticmethod(...):\n                ...\n    'abstractstaticmethod' is deprecated. Use 'staticmethod' with\n    'abstractmethod' instead.\n    \"\"\"\n    __isabstractmethod__ = True\n    def __init__(self, callable):\n        callable.__isabstractmethod__ = True\n        super().__init__(callable)\nclass abstractproperty(property):\n    \"\"\"\n    A decorator indicating abstract properties.\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract properties are overridden.\n    The abstract properties can be called using any of the normal\n    'super' call mechanisms.\n    Usage:\n        class C(metaclass=ABCMeta):\n            @abstractproperty\n            def my_abstract_property(self):\n                ...\n    This defines a read-only property; you can also define a read-write\n    abstract property using the 'long' form of property declaration:\n        class C(metaclass=ABCMeta):\n            def getx(self): ...\n            def setx(self, value): ...\n            x = abstractproperty(getx, setx)\n    'abstractproperty' is deprecated. Use 'property' with 'abstractmethod'\n    instead.\n    \"\"\"\n    __isabstractmethod__ = True\nclass ABCMeta(type):\n    \"\"\"Metaclass for defining Abstract Base Classes (ABCs).\n    Use this metaclass to create an ABC.  An ABC can be subclassed\n    directly, and then acts as a mix-in class.  You can also register\n    unrelated concrete classes (even built-in classes) and unrelated\n    ABCs as 'virtual subclasses' -- these and their descendants will\n    be considered subclasses of the registering ABC by the built-in\n    issubclass() function, but the registering ABC won't show up in\n    their MRO (Method Resolution Order) nor will method\n    implementations defined by the registering ABC be callable (not\n    even via super()).\n    \"\"\"\n    _abc_invalidation_counter = 0\n    def __new__(mcls, name, bases, namespace):\n        cls = super().__new__(mcls, name, bases, namespace)\n        abstracts = {name\n                     for name, value in namespace.items()\n                     if getattr(value, \"__isabstractmethod__\", False)}\n        for base in bases:\n            _names = getattr(base,\"__abstractmethods__\",set())\n            for name in getattr(base, \"__abstractmethods__\", set()):\n                value = getattr(cls, name, None)\n                if getattr(value, \"__isabstractmethod__\", False):\n                    abstracts.add(name)\n        cls.__abstractmethods__ = frozenset(abstracts)\n        cls._abc_registry = WeakSet()\n        cls._abc_cache = WeakSet()\n        cls._abc_negative_cache = WeakSet()\n        cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter\n        return cls\n    def register(cls, subclass):\n        \"\"\"Register a virtual subclass of an ABC.\n        Returns the subclass, to allow usage as a class decorator.\n        \"\"\"\n        if not isinstance(subclass, type):\n            raise TypeError(\"Can only register classes\")\n        if issubclass(subclass, cls):\n            return subclass  # Already a subclass\n        if issubclass(cls, subclass):\n            raise RuntimeError(\"Refusing to create an inheritance cycle\")\n        cls._abc_registry.add(subclass)\n        ABCMeta._abc_invalidation_counter += 1  # Invalidate negative cache\n        return subclass\n    def _dump_registry(cls, file=None):\n        \"\"\"Debug helper to print the ABC registry.\"\"\"\n        print(\"Class: %s.%s\" % (cls.__module__, cls.__name__), file=file)\n        print(\"Inv.counter: %s\" % ABCMeta._abc_invalidation_counter, file=file)\n        for name in sorted(cls.__dict__.keys()):\n            if name.startswith(\"_abc_\"):\n                value = getattr(cls, name)\n                print(\"%s: %r\" % (name, value), file=file)\n    def __instancecheck__(cls, instance):\n        \"\"\"Override for isinstance(instance, cls).\"\"\"\n        subclass = instance.__class__\n        if subclass in cls._abc_cache:\n            return True\n        subtype = type(instance)\n        if subtype is subclass:\n            if (cls._abc_negative_cache_version ==\n                ABCMeta._abc_invalidation_counter and\n                subclass in cls._abc_negative_cache):\n                return False\n            return cls.__subclasscheck__(subclass)\n        return any(cls.__subclasscheck__(c) for c in {subclass, subtype})\n    def __subclasscheck__(cls, subclass):\n        \"\"\"Override for issubclass(subclass, cls).\"\"\"\n        if subclass in cls._abc_cache:\n            return True\n        if cls._abc_negative_cache_version < ABCMeta._abc_invalidation_counter:\n            cls._abc_negative_cache = WeakSet()\n            cls._abc_negative_cache_version = ABCMeta._abc_invalidation_counter\n        elif subclass in cls._abc_negative_cache:\n            return False\n        ok = cls.__subclasshook__(subclass)\n        if ok is not NotImplemented:\n            assert isinstance(ok, bool)\n            if ok:\n                cls._abc_cache.add(subclass)\n            else:\n                cls._abc_negative_cache.add(subclass)\n            return ok\n        if cls in getattr(subclass, '__mro__', ()):\n            cls._abc_cache.add(subclass)\n            return True\n        for rcls in cls._abc_registry:\n            if issubclass(subclass, rcls):\n                cls._abc_cache.add(subclass)\n                return True\n        for scls in cls.__subclasses__():\n            if issubclass(subclass, scls):\n                cls._abc_cache.add(subclass)\n                return True\n        cls._abc_negative_cache.add(subclass)\n        return False\n", "/Lib/browser/indexed_db.py": "class EventListener:\n  def __init__(self, events=[]):\n      self._events=events\n  def append(self, event):\n      self._events.append(event)\n  def fire(self, e):\n      for _event in self._events:\n          _event(e)\nclass IndexedDB:\n  def __init__(self):\n      if not __BRYTHON__.has_indexedDB:\n         raise Exception(\"NotImplementedError\", \"Your browser doesn't support indexedDB\")\n         return\n      self._indexedDB=__BRYTHON__.indexedDB()\n      self._db=None\n      self._version=None\n  def _onsuccess(self, event):\n      self._db=event.target.result\n  def open(self, name, onsuccess, version=1.0, onerror=None, \n           onupgradeneeded=None):\n      self._version=version\n      _result=self._indexedDB.open(name, version)\n      _success=EventListener([self._onsuccess, onsuccess])\n      _result.onsuccess=_success.fire\n      _result.onupgradeneeded=onupgradeneeded\n      def onerror(e):\n          print(\"onerror: %s:%s\" %  (e.type, e.target.result))\n      def onblocked(e):\n          print(\"blocked: %s:%s\" %  (e.type, e.result))\n      _result.onerror=onerror\n      _result.onblocked=onblocked\n  def transaction(self, entities, mode='read'):\n      return Transaction(self._db.transaction(entities, mode))\nclass Transaction:\n  def __init__(self, transaction):\n      self._transaction=transaction\n  def objectStore(self, name):\n      return ObjectStore(self._transaction.objectStore(name))\nclass ObjectStore:\n  def __init__(self, objectStore):\n      self._objectStore=objectStore\n      self._data=[]\n  def clear(self, onsuccess=None, onerror=None):\n      _result=self._objectStore.clear()\n      if onsuccess is not None:\n         _result.onsuccess=onsuccess\n      if onerror is not None:\n         _result.onerror=onerror\n  def _helper(self, func, object, onsuccess=None, onerror=None):\n      _result=func(object)\n      if onsuccess is not None:\n         _result.onsuccess=onsuccess\n      if onerror is not None:\n         _result.onerror=onerror\n  def put(self, object, key=None, onsuccess=None, onerror=None):\n      _r=self._objectStore.put(object, key)\n      _r.onsuccess=onsuccess\n      _r.onerror=onerror\n  def add(self, object, onsuccess=None, onerror=None):\n      self._helper(self._objectStore.add, object, onsuccess, onerror)\n  def delete(self, index, onsuccess=None, onerror=None): \n      self._helper(self._objectStore.delete, index, onsuccess, onerror)\n  def query(self, *args):\n      self._data=[]\n      def onsuccess(event):\n          cursor=event.target.result\n          if cursor is not None:\n             self._data.append(cursor.value)\n             cursor.continue()\n      self._objectStore.openCursor(args).onsuccess=onsuccess\n  def fetchall(self):\n      yield self._data\n  def get(self, key, onsuccess=None, onerror=None):\n      self._helper(self._objectStore.get, key, onsuccess, onerror)\n", "/libs/crypto_js/rollups/sha512.js": "var CryptoJS=CryptoJS||function(a,m){var r={},f=r.lib={},g=function(){},l=f.Base={extend:function(a){g.prototype=this;var b=new g();a&&b.mixIn(a);b.hasOwnProperty(\"init\")||(b.init=function(){b.$super.init.apply(this,arguments);});b.init.prototype=b;b.$super=this;return b;},create:function(){var a=this.extend();a.init.apply(a,arguments);return a;},init:function(){},mixIn:function(a){for(var b in a)a.hasOwnProperty(b)&&(this[b]=a[b]);a.hasOwnProperty(\"toString\")&&(this.toString=a.toString);},clone:function(){return this.init.prototype.extend(this);}},p=f.WordArray=l.extend({init:function(a,b){a=this.words=a||[];this.sigBytes=b!=m?b:4*a.length;},toString:function(a){return(a||q).stringify(this);},concat:function(a){var b=this.words,d=a.words,c=this.sigBytes;a=a.sigBytes;this.clamp();if(c%4)for(var j=0;j<a;j++)b[c+j>>>2]|=(d[j>>>2]>>>24-8*(j%4)&255)<<24-8*((c+j)%4);else if(65535<d.length)for(j=0;j<a;j+=4)b[c+j>>>2]=d[j>>>2];else b.push.apply(b,d);this.sigBytes+=a;return this;},clamp:function(){var n=this.words,b=this.sigBytes;n[b>>>2]&=4294967295<<32-8*(b%4);n.length=a.ceil(b/4);},clone:function(){var a=l.clone.call(this);a.words=this.words.slice(0);return a;},random:function(n){for(var b=[],d=0;d<n;d+=4)b.push(4294967296*a.random()|0);return new p.init(b,n);}}),y=r.enc={},q=y.Hex={stringify:function(a){var b=a.words;a=a.sigBytes;for(var d=[],c=0;c<a;c++){var j=b[c>>>2]>>>24-8*(c%4)&255;d.push((j>>>4).toString(16));d.push((j&15).toString(16));}return d.join(\"\");},parse:function(a){for(var b=a.length,d=[],c=0;c<b;c+=2)d[c>>>3]|=parseInt(a.substr(c,2),16)<<24-4*(c%8);return new p.init(d,b/2);}},G=y.Latin1={stringify:function(a){var b=a.words;a=a.sigBytes;for(var d=[],c=0;c<a;c++)d.push(String.fromCharCode(b[c>>>2]>>>24-8*(c%4)&255));return d.join(\"\");},parse:function(a){for(var b=a.length,d=[],c=0;c<b;c++)d[c>>>2]|=(a.charCodeAt(c)&255)<<24-8*(c%4);return new p.init(d,b);}},fa=y.Utf8={stringify:function(a){try{return decodeURIComponent(escape(G.stringify(a)));}catch(b){throw Error(\"Malformed UTF-8 data\");}},parse:function(a){return G.parse(unescape(encodeURIComponent(a)));}},h=f.BufferedBlockAlgorithm=l.extend({reset:function(){this._data=new p.init();this._nDataBytes=0;},_append:function(a){\"string\"==typeof a&&(a=fa.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes;},_process:function(n){var b=this._data,d=b.words,c=b.sigBytes,j=this.blockSize,l=c/(4*j),l=n?a.ceil(l):a.max((l|0)-this._minBufferSize,0);n=l*j;c=a.min(4*n,c);if(n){for(var h=0;h<n;h+=j)this._doProcessBlock(d,h);h=d.splice(0,n);b.sigBytes-=c;}return new p.init(h,c);},clone:function(){var a=l.clone.call(this);a._data=this._data.clone();return a;},_minBufferSize:0});f.Hasher=h.extend({cfg:l.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset();},reset:function(){h.reset.call(this);this._doReset();},update:function(a){this._append(a);this._process();return this;},finalize:function(a){a&&this._append(a);return this._doFinalize();},blockSize:16,_createHelper:function(a){return function(b,d){return new a.init(d).finalize(b);};},_createHmacHelper:function(a){return function(b,d){return new ga.HMAC.init(a,d).finalize(b);};}});var ga=r.algo={};return r;}(Math);(function(a){var m=CryptoJS,r=m.lib,f=r.Base,g=r.WordArray,m=m.x64={};m.Word=f.extend({init:function(a,p){this.high=a;this.low=p;}});m.WordArray=f.extend({init:function(l,p){l=this.words=l||[];this.sigBytes=p!=a?p:8*l.length;},toX32:function(){for(var a=this.words,p=a.length,f=[],q=0;q<p;q++){var G=a[q];f.push(G.high);f.push(G.low);}return g.create(f,this.sigBytes);},clone:function(){for(var a=f.clone.call(this),p=a.words=this.words.slice(0),g=p.length,q=0;q<g;q++)p[q]=p[q].clone();return a;}});})();(function(){function a(){return g.create.apply(g,arguments);}for(var m=CryptoJS,r=m.lib.Hasher,f=m.x64,g=f.Word,l=f.WordArray,f=m.algo,p=[a(1116352408,3609767458),a(1899447441,602891725),a(3049323471,3964484399),a(3921009573,2173295548),a(961987163,4081628472),a(1508970993,3053834265),a(2453635748,2937671579),a(2870763221,3664609560),a(3624381080,2734883394),a(310598401,1164996542),a(607225278,1323610764),a(1426881987,3590304994),a(1925078388,4068182383),a(2162078206,991336113),a(2614888103,633803317),a(3248222580,3479774868),a(3835390401,2666613458),a(4022224774,944711139),a(264347078,2341262773),a(604807628,2007800933),a(770255983,1495990901),a(1249150122,1856431235),a(1555081692,3175218132),a(1996064986,2198950837),a(2554220882,3999719339),a(2821834349,766784016),a(2952996808,2566594879),a(3210313671,3203337956),a(3336571891,1034457026),a(3584528711,2466948901),a(113926993,3758326383),a(338241895,168717936),a(666307205,1188179964),a(773529912,1546045734),a(1294757372,1522805485),a(1396182291,2643833823),a(1695183700,2343527390),a(1986661051,1014477480),a(2177026350,1206759142),a(2456956037,344077627),a(2730485921,1290863460),a(2820302411,3158454273),a(3259730800,3505952657),a(3345764771,106217008),a(3516065817,3606008344),a(3600352804,1432725776),a(4094571909,1467031594),a(275423344,851169720),a(430227734,3100823752),a(506948616,1363258195),a(659060556,3750685593),a(883997877,3785050280),a(958139571,3318307427),a(1322822218,3812723403),a(1537002063,2003034995),a(1747873779,3602036899),a(1955562222,1575990012),a(2024104815,1125592928),a(2227730452,2716904306),a(2361852424,442776044),a(2428436474,593698344),a(2756734187,3733110249),a(3204031479,2999351573),a(3329325298,3815920427),a(3391569614,3928383900),a(3515267271,566280711),a(3940187606,3454069534),a(4118630271,4000239992),a(116418474,1914138554),a(174292421,2731055270),a(289380356,3203993006),a(460393269,320620315),a(685471733,587496836),a(852142971,1086792851),a(1017036298,365543100),a(1126000580,2618297676),a(1288033470,3409855158),a(1501505948,4234509866),a(1607167915,987167468),a(1816402316,1246189591)],y=[],q=0;80>q;q++)y[q]=a();f=f.SHA512=r.extend({_doReset:function(){this._hash=new l.init([new g.init(1779033703,4089235720),new g.init(3144134277,2227873595),new g.init(1013904242,4271175723),new g.init(2773480762,1595750129),new g.init(1359893119,2917565137),new g.init(2600822924,725511199),new g.init(528734635,4215389547),new g.init(1541459225,327033209)]);},_doProcessBlock:function(a,f){for(var h=this._hash.words,g=h[0],n=h[1],b=h[2],d=h[3],c=h[4],j=h[5],l=h[6],h=h[7],q=g.high,m=g.low,r=n.high,N=n.low,Z=b.high,O=b.low,$=d.high,P=d.low,aa=c.high,Q=c.low,ba=j.high,R=j.low,ca=l.high,S=l.low,da=h.high,T=h.low,v=q,s=m,H=r,E=N,I=Z,F=O,W=$,J=P,w=aa,t=Q,U=ba,K=R,V=ca,L=S,X=da,M=T,x=0;80>x;x++){var B=y[x];if(16>x)var u=B.high=a[f+2*x]|0,e=B.low=a[f+2*x+1]|0;else{var u=y[x-15],e=u.high,z=u.low,u=(e>>>1|z<<31)^(e>>>8|z<<24)^e>>>7,z=(z>>>1|e<<31)^(z>>>8|e<<24)^(z>>>7|e<<25),D=y[x-2],e=D.high,k=D.low,D=(e>>>19|k<<13)^(e<<3|k>>>29)^e>>>6,k=(k>>>19|e<<13)^(k<<3|e>>>29)^(k>>>6|e<<26),e=y[x-7],Y=e.high,C=y[x-16],A=C.high,C=C.low,e=z+e.low,u=u+Y+(e>>>0<z>>>0?1:0),e=e+k,u=u+D+(e>>>0<k>>>0?1:0),e=e+C,u=u+A+(e>>>0<C>>>0?1:0);B.high=u;B.low=e;}var Y=w&U^~w&V,C=t&K^~t&L,B=v&H^v&I^H&I,ha=s&E^s&F^E&F,z=(v>>>28|s<<4)^(v<<30|s>>>2)^(v<<25|s>>>7),D=(s>>>28|v<<4)^(s<<30|v>>>2)^(s<<25|v>>>7),k=p[x],ia=k.high,ea=k.low,k=M+((t>>>14|w<<18)^(t>>>18|w<<14)^(t<<23|w>>>9)),A=X+((w>>>14|t<<18)^(w>>>18|t<<14)^(w<<23|t>>>9))+(k>>>0<M>>>0?1:0),k=k+C,A=A+Y+(k>>>0<C>>>0?1:0),k=k+ea,A=A+ia+(k>>>0<ea>>>0?1:0),k=k+e,A=A+u+(k>>>0<e>>>0?1:0),e=D+ha,B=z+B+(e>>>0<D>>>0?1:0),X=V,M=L,V=U,L=K,U=w,K=t,t=J+k|0,w=W+A+(t>>>0<J>>>0?1:0)|0,W=I,J=F,I=H,F=E,H=v,E=s,s=k+e|0,v=A+B+(s>>>0<k>>>0?1:0)|0;}m=g.low=m+s;g.high=q+v+(m>>>0<s>>>0?1:0);N=n.low=N+E;n.high=r+H+(N>>>0<E>>>0?1:0);O=b.low=O+F;b.high=Z+I+(O>>>0<F>>>0?1:0);P=d.low=P+J;d.high=$+W+(P>>>0<J>>>0?1:0);Q=c.low=Q+t;c.high=aa+w+(Q>>>0<t>>>0?1:0);R=j.low=R+K;j.high=ba+U+(R>>>0<K>>>0?1:0);S=l.low=S+L;l.high=ca+V+(S>>>0<L>>>0?1:0);T=h.low=T+M;h.high=da+X+(T>>>0<M>>>0?1:0);},_doFinalize:function(){var a=this._data,f=a.words,h=8*this._nDataBytes,g=8*a.sigBytes;f[g>>>5]|=128<<24-g%32;f[(g+128>>>10<<5)+30]=Math.floor(h/4294967296);f[(g+128>>>10<<5)+31]=h;a.sigBytes=4*f.length;this._process();return this._hash.toX32();},clone:function(){var a=r.clone.call(this);a._hash=this._hash.clone();return a;},blockSize:32});m.SHA512=r._createHelper(f);m.HmacSHA512=r._createHmacHelper(f);})();", "/Lib/linecache.py": "\"\"\"Cache lines from files.\nThis is intended to read lines from modules imported -- hence if a filename\nis not found, it will look down the module search path for a file by\nthat name.\n\"\"\"\nimport sys\nimport os\n__all__ = [\"getline\", \"clearcache\", \"checkcache\"]\ndef getline(filename, lineno, module_globals=None):\n    lines = getlines(filename, module_globals)\n    if 1 <= lineno <= len(lines):\n        return lines[lineno-1]\n    else:\n        return ''\ncache = {} # The cache\ndef clearcache():\n    \"\"\"Clear the cache entirely.\"\"\"\n    global cache\n    cache = {}\ndef getlines(filename, module_globals=None):\n    \"\"\"Get the lines for a file from the cache.\n    Update the cache if it doesn't contain an entry for this file already.\"\"\"\n    if filename in cache:\n        return cache[filename][2]\n    else:\n        return updatecache(filename, module_globals)\ndef checkcache(filename=None):\n    \"\"\"Discard cache entries that are out of date.\n    (This is not checked upon each call!)\"\"\"\n    if filename is None:\n        filenames = list(cache.keys())\n    else:\n        if filename in cache:\n            filenames = [filename]\n        else:\n            return\n    for filename in filenames:\n        size, mtime, lines, fullname = cache[filename]\n        if mtime is None:\n            continue   # no-op for files loaded via a __loader__\n        try:\n            stat = os.stat(fullname)\n        except:\n            del cache[filename]\n            continue\n        if size != stat.st_size or mtime != stat.st_mtime:\n            del cache[filename]\ndef updatecache(filename, module_globals=None):\n    \"\"\"Update a cache entry and return its list of lines.\n    If something's wrong, print a message, discard the cache entry,\n    and return an empty list.\"\"\"\n    if filename in cache:\n        del cache[filename]\n    if not filename or (filename.startswith('<') and filename.endswith('>')):\n        return []\n    fullname = filename\n    try:\n        stat = os.stat(fullname)\n    except OSError:\n        basename = filename\n        if module_globals and '__loader__' in module_globals:\n            name = module_globals.get('__name__')\n            loader = module_globals['__loader__']\n            get_source = getattr(loader, 'get_source', None)\n            if name and get_source:\n                try:\n                    data = get_source(name)\n                except (ImportError, IOError):\n                    pass\n                else:\n                    if data is None:\n                        return []\n                    cache[filename] = (\n                        len(data), None,\n                        [line+'\\n' for line in data.splitlines()], fullname\n                    )\n                    return cache[filename][2]\n        if os.path.isabs(filename):\n            return []\n        if basename == '__init__.py':\n            basename = filename\n        for dirname in sys.path:\n            try:\n                fullname = os.path.join(dirname, basename)\n            except (TypeError, AttributeError):\n                continue\n            try:\n                stat = os.stat(fullname)\n                break\n            except:\n                pass\n    try:\n        fp=open(fullname)\n        lines = fp.readlines()\n        fp.close()\n    except IOError:\n        return []\n    if lines and not lines[-1].endswith('\\n'):\n        lines[-1] += '\\n'\n    size, mtime = stat.st_size, stat.st_mtime\n    cache[filename] = size, mtime, lines, fullname\n    return lines\n", "/Lib/unittest/test/testmock/testsentinel.py": "import unittest\r\nfrom unittest.mock import sentinel, DEFAULT\r\nclass SentinelTest(unittest.TestCase):\r\n    def testSentinels(self):\r\n        self.assertEqual(sentinel.whatever, sentinel.whatever,\r\n                         'sentinel not stored')\r\n        self.assertNotEqual(sentinel.whatever, sentinel.whateverelse,\r\n                            'sentinel should be unique')\r\n    def testSentinelName(self):\r\n        self.assertEqual(str(sentinel.whatever), 'sentinel.whatever',\r\n                         'sentinel name incorrect')\r\n    def testDEFAULT(self):\r\n        self.assertTrue(DEFAULT is sentinel.DEFAULT)\r\n    def testBases(self):\r\n        self.assertRaises(AttributeError, lambda: sentinel.__bases__)\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/socket.py": "\"\"\"\\\r\nThis module provides socket operations and some related functions.\r\nOn Unix, it supports IP (Internet Protocol) and Unix domain sockets.\r\nOn other systems, it only supports IP. Functions specific for a\r\nsocket are available as methods of the socket object.\r\nFunctions:\r\nsocket() -- create a new socket object\r\nsocketpair() -- create a pair of new socket objects [*]\r\nfromfd() -- create a socket object from an open file descriptor [*]\r\nfromshare() -- create a socket object from data received from socket.share() [*]\r\ngethostname() -- return the current hostname\r\ngethostbyname() -- map a hostname to its IP number\r\ngethostbyaddr() -- map an IP number or hostname to DNS info\r\ngetservbyname() -- map a service name and a protocol name to a port number\r\ngetprotobyname() -- map a protocol name (e.g. 'tcp') to a number\r\nntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order\r\nhtons(), htonl() -- convert 16, 32 bit int from host to network byte order\r\ninet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format\r\ninet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)\r\nsocket.getdefaulttimeout() -- get the default timeout value\r\nsocket.setdefaulttimeout() -- set the default timeout value\r\ncreate_connection() -- connects to an address, with an optional timeout and\r\n                       optional source address.\r\n [*] not available on all platforms!\r\nSpecial objects:\r\nSocketType -- type object for socket objects\r\nerror -- exception raised for I/O errors\r\nhas_ipv6 -- boolean value indicating if IPv6 is supported\r\nInteger constants:\r\nAF_INET, AF_UNIX -- socket domains (first argument to socket() call)\r\nSOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)\r\nMany other constants may be defined; these may be used in calls to\r\nthe setsockopt() and getsockopt() methods.\r\n\"\"\"\r\nimport _socket\r\nfrom _socket import *\r\nimport os, sys, io\r\ntry:\r\n    import errno\r\nexcept ImportError:\r\n    errno = None\r\nEBADF = getattr(errno, 'EBADF', 9)\r\nEAGAIN = getattr(errno, 'EAGAIN', 11)\r\nEWOULDBLOCK = getattr(errno, 'EWOULDBLOCK', 11)\r\n__all__ = [\"getfqdn\", \"create_connection\"]\r\n__all__.extend(os._get_exports_list(_socket))\r\n_realsocket = socket\r\nif sys.platform.lower().startswith(\"win\"):\r\n    errorTab = {}\r\n    errorTab[10004] = \"The operation was interrupted.\"\r\n    errorTab[10009] = \"A bad file handle was passed.\"\r\n    errorTab[10013] = \"Permission denied.\"\r\n    errorTab[10014] = \"A fault occurred on the network??\" # WSAEFAULT\r\n    errorTab[10022] = \"An invalid operation was attempted.\"\r\n    errorTab[10035] = \"The socket operation would block\"\r\n    errorTab[10036] = \"A blocking operation is already in progress.\"\r\n    errorTab[10048] = \"The network address is in use.\"\r\n    errorTab[10054] = \"The connection has been reset.\"\r\n    errorTab[10058] = \"The network has been shut down.\"\r\n    errorTab[10060] = \"The operation timed out.\"\r\n    errorTab[10061] = \"Connection refused.\"\r\n    errorTab[10063] = \"The name is too long.\"\r\n    errorTab[10064] = \"The host is down.\"\r\n    errorTab[10065] = \"The host is unreachable.\"\r\n    __all__.append(\"errorTab\")\r\nclass socket(_socket.socket):\r\n    \"\"\"A subclass of _socket.socket adding the makefile() method.\"\"\"\r\n    __slots__ = [\"__weakref__\", \"_io_refs\", \"_closed\"]\r\n    def __init__(self, family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None):\r\n        _socket.socket.__init__(self, family, type, proto, fileno)\r\n        self._io_refs = 0\r\n        self._closed = False\r\n    def __enter__(self):\r\n        return self\r\n    def __exit__(self, *args):\r\n        if not self._closed:\r\n            self.close()\r\n    def __repr__(self):\r\n        \"\"\"Wrap __repr__() to reveal the real class name.\"\"\"\r\n        s = _socket.socket.__repr__(self)\r\n        if s.startswith(\"<socket object\"):\r\n            s = \"<%s.%s%s%s\" % (self.__class__.__module__,\r\n                                self.__class__.__name__,\r\n                                getattr(self, '_closed', False) and \" [closed] \" or \"\",\r\n                                s[7:])\r\n        return s\r\n    def __getstate__(self):\r\n        raise TypeError(\"Cannot serialize socket object\")\r\n    def dup(self):\r\n        \"\"\"dup() -> socket object\r\n        Return a new socket object connected to the same system resource.\r\n        \"\"\"\r\n        fd = dup(self.fileno())\r\n        sock = self.__class__(self.family, self.type, self.proto, fileno=fd)\r\n        sock.settimeout(self.gettimeout())\r\n        return sock\r\n    def accept(self):\r\n        \"\"\"accept() -> (socket object, address info)\r\n        Wait for an incoming connection.  Return a new socket\r\n        representing the connection, and the address of the client.\r\n        For IP sockets, the address info is a pair (hostaddr, port).\r\n        \"\"\"\r\n        fd, addr = self._accept()\r\n        sock = socket(self.family, self.type, self.proto, fileno=fd)\r\n        if getdefaulttimeout() is None and self.gettimeout():\r\n            sock.setblocking(True)\r\n        return sock, addr\r\n    def makefile(self, mode=\"r\", buffering=None, *,\r\n                 encoding=None, errors=None, newline=None):\r\n        \"\"\"makefile(...) -> an I/O stream connected to the socket\r\n        The arguments are as for io.open() after the filename,\r\n        except the only mode characters supported are 'r', 'w' and 'b'.\r\n        The semantics are similar too.  (XXX refactor to share code?)\r\n        \"\"\"\r\n        for c in mode:\r\n            if c not in {\"r\", \"w\", \"b\"}:\r\n                raise ValueError(\"invalid mode %r (only r, w, b allowed)\")\r\n        writing = \"w\" in mode\r\n        reading = \"r\" in mode or not writing\r\n        assert reading or writing\r\n        binary = \"b\" in mode\r\n        rawmode = \"\"\r\n        if reading:\r\n            rawmode += \"r\"\r\n        if writing:\r\n            rawmode += \"w\"\r\n        raw = SocketIO(self, rawmode)\r\n        self._io_refs += 1\r\n        if buffering is None:\r\n            buffering = -1\r\n        if buffering < 0:\r\n            buffering = io.DEFAULT_BUFFER_SIZE\r\n        if buffering == 0:\r\n            if not binary:\r\n                raise ValueError(\"unbuffered streams must be binary\")\r\n            return raw\r\n        if reading and writing:\r\n            buffer = io.BufferedRWPair(raw, raw, buffering)\r\n        elif reading:\r\n            buffer = io.BufferedReader(raw, buffering)\r\n        else:\r\n            assert writing\r\n            buffer = io.BufferedWriter(raw, buffering)\r\n        if binary:\r\n            return buffer\r\n        text = io.TextIOWrapper(buffer, encoding, errors, newline)\r\n        text.mode = mode\r\n        return text\r\n    def _decref_socketios(self):\r\n        if self._io_refs > 0:\r\n            self._io_refs -= 1\r\n        if self._closed:\r\n            self.close()\r\n    def _real_close(self, _ss=_socket.socket):\r\n        _ss.close(self)\r\n    def close(self):\r\n        self._closed = True\r\n        if self._io_refs <= 0:\r\n            self._real_close()\r\n    def detach(self):\r\n        \"\"\"detach() -> file descriptor\r\n        Close the socket object without closing the underlying file descriptor.\r\n        The object cannot be used after this call, but the file descriptor\r\n        can be reused for other purposes.  The file descriptor is returned.\r\n        \"\"\"\r\n        self._closed = True\r\n        return super().detach()\r\ndef fromfd(fd, family, type, proto=0):\r\n    \"\"\" fromfd(fd, family, type[, proto]) -> socket object\r\n    Create a socket object from a duplicate of the given file\r\n    descriptor.  The remaining arguments are the same as for socket().\r\n    \"\"\"\r\n    nfd = dup(fd)\r\n    return socket(family, type, proto, nfd)\r\nif hasattr(_socket.socket, \"share\"):\r\n    def fromshare(info):\r\n        \"\"\" fromshare(info) -> socket object\r\n        Create a socket object from a the bytes object returned by\r\n        socket.share(pid).\r\n        \"\"\"\r\n        return socket(0, 0, 0, info)\r\nif hasattr(_socket, \"socketpair\"):\r\n    def socketpair(family=None, type=SOCK_STREAM, proto=0):\r\n        \"\"\"socketpair([family[, type[, proto]]]) -> (socket object, socket object)\r\n        Create a pair of socket objects from the sockets returned by the platform\r\n        socketpair() function.\r\n        The arguments are the same as for socket() except the default family is\r\n        AF_UNIX if defined on the platform; otherwise, the default is AF_INET.\r\n        \"\"\"\r\n        if family is None:\r\n            try:\r\n                family = AF_UNIX\r\n            except NameError:\r\n                family = AF_INET\r\n        a, b = _socket.socketpair(family, type, proto)\r\n        a = socket(family, type, proto, a.detach())\r\n        b = socket(family, type, proto, b.detach())\r\n        return a, b\r\n_blocking_errnos = { EAGAIN, EWOULDBLOCK }\r\nclass SocketIO(io.RawIOBase):\r\n    \"\"\"Raw I/O implementation for stream sockets.\r\n    This class supports the makefile() method on sockets.  It provides\r\n    the raw I/O interface on top of a socket object.\r\n    \"\"\"\r\n    def __init__(self, sock, mode):\r\n        if mode not in (\"r\", \"w\", \"rw\", \"rb\", \"wb\", \"rwb\"):\r\n            raise ValueError(\"invalid mode: %r\" % mode)\r\n        io.RawIOBase.__init__(self)\r\n        self._sock = sock\r\n        if \"b\" not in mode:\r\n            mode += \"b\"\r\n        self._mode = mode\r\n        self._reading = \"r\" in mode\r\n        self._writing = \"w\" in mode\r\n        self._timeout_occurred = False\r\n    def readinto(self, b):\r\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\r\n        the number of bytes read.  If the socket is non-blocking and no bytes\r\n        are available, None is returned.\r\n        If *b* is non-empty, a 0 return value indicates that the connection\r\n        was shutdown at the other end.\r\n        \"\"\"\r\n        self._checkClosed()\r\n        self._checkReadable()\r\n        if self._timeout_occurred:\r\n            raise IOError(\"cannot read from timed out object\")\r\n        while True:\r\n            try:\r\n                return self._sock.recv_into(b)\r\n            except timeout:\r\n                self._timeout_occurred = True\r\n                raise\r\n            except InterruptedError:\r\n                continue\r\n            except error as e:\r\n                if e.args[0] in _blocking_errnos:\r\n                    return None\r\n                raise\r\n    def write(self, b):\r\n        \"\"\"Write the given bytes or bytearray object *b* to the socket\r\n        and return the number of bytes written.  This can be less than\r\n        len(b) if not all data could be written.  If the socket is\r\n        non-blocking and no bytes could be written None is returned.\r\n        \"\"\"\r\n        self._checkClosed()\r\n        self._checkWritable()\r\n        try:\r\n            return self._sock.send(b)\r\n        except error as e:\r\n            if e.args[0] in _blocking_errnos:\r\n                return None\r\n            raise\r\n    def readable(self):\r\n        \"\"\"True if the SocketIO is open for reading.\r\n        \"\"\"\r\n        return self._reading and not self.closed\r\n    def writable(self):\r\n        \"\"\"True if the SocketIO is open for writing.\r\n        \"\"\"\r\n        return self._writing and not self.closed\r\n    def fileno(self):\r\n        \"\"\"Return the file descriptor of the underlying socket.\r\n        \"\"\"\r\n        self._checkClosed()\r\n        return self._sock.fileno()\r\n    @property\r\n    def name(self):\r\n        if not self.closed:\r\n            return self.fileno()\r\n        else:\r\n            return -1\r\n    @property\r\n    def mode(self):\r\n        return self._mode\r\n    def close(self):\r\n        \"\"\"Close the SocketIO object.  This doesn't close the underlying\r\n        socket, except if all references to it have disappeared.\r\n        \"\"\"\r\n        if self.closed:\r\n            return\r\n        io.RawIOBase.close(self)\r\n        self._sock._decref_socketios()\r\n        self._sock = None\r\ndef getfqdn(name=''):\r\n    \"\"\"Get fully qualified domain name from name.\r\n    An empty argument is interpreted as meaning the local host.\r\n    First the hostname returned by gethostbyaddr() is checked, then\r\n    possibly existing aliases. In case no FQDN is available, hostname\r\n    from gethostname() is returned.\r\n    \"\"\"\r\n    name = name.strip()\r\n    if not name or name == '0.0.0.0':\r\n        name = gethostname()\r\n    try:\r\n        hostname, aliases, ipaddrs = gethostbyaddr(name)\r\n    except error:\r\n        pass\r\n    else:\r\n        aliases.insert(0, hostname)\r\n        for name in aliases:\r\n            if '.' in name:\r\n                break\r\n        else:\r\n            name = hostname\r\n    return name\r\n_GLOBAL_DEFAULT_TIMEOUT = object()\r\ndef create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\r\n                      source_address=None):\r\n    \"\"\"Connect to *address* and return the socket object.\r\n    Convenience function.  Connect to *address* (a 2-tuple ``(host,\r\n    port)``) and return the socket object.  Passing the optional\r\n    *timeout* parameter will set the timeout on the socket instance\r\n    before attempting to connect.  If no *timeout* is supplied, the\r\n    global default timeout setting returned by :func:`getdefaulttimeout`\r\n    is used.  If *source_address* is set it must be a tuple of (host, port)\r\n    for the socket to bind as a source address before making the connection.\r\n    An host of '' or port 0 tells the OS to use the default.\r\n    \"\"\"\r\n    host, port = address\r\n    err = None\r\n    for res in getaddrinfo(host, port, 0, SOCK_STREAM):\r\n        af, socktype, proto, canonname, sa = res\r\n        sock = None\r\n        try:\r\n            sock = socket(af, socktype, proto)\r\n            if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\r\n                sock.settimeout(timeout)\r\n            if source_address:\r\n                sock.bind(source_address)\r\n            sock.connect(sa)\r\n            return sock\r\n        except error as _:\r\n            err = _\r\n            if sock is not None:\r\n                sock.close()\r\n    if err is not None:\r\n        raise err\r\n    else:\r\n        raise error(\"getaddrinfo returns an empty list\")\r\n", "/Lib/unittest/test/testmock/testwith.py": "import unittest\r\nfrom warnings import catch_warnings\r\nfrom unittest.test.testmock.support import is_instance\r\nfrom unittest.mock import MagicMock, Mock, patch, sentinel, mock_open, call\r\nsomething  = sentinel.Something\r\nsomething_else  = sentinel.SomethingElse\r\nclass WithTest(unittest.TestCase):\r\n    def test_with_statement(self):\r\n        with patch('%s.something' % __name__, sentinel.Something2):\r\n            self.assertEqual(something, sentinel.Something2, \"unpatched\")\r\n        self.assertEqual(something, sentinel.Something)\r\n    def test_with_statement_exception(self):\r\n        try:\r\n            with patch('%s.something' % __name__, sentinel.Something2):\r\n                self.assertEqual(something, sentinel.Something2, \"unpatched\")\r\n                raise Exception('pow')\r\n        except Exception:\r\n            pass\r\n        else:\r\n            self.fail(\"patch swallowed exception\")\r\n        self.assertEqual(something, sentinel.Something)\r\n    def test_with_statement_as(self):\r\n        with patch('%s.something' % __name__) as mock_something:\r\n            self.assertEqual(something, mock_something, \"unpatched\")\r\n            self.assertTrue(is_instance(mock_something, MagicMock),\r\n                            \"patching wrong type\")\r\n        self.assertEqual(something, sentinel.Something)\r\n    def test_patch_object_with_statement(self):\r\n        class Foo(object):\r\n            something = 'foo'\r\n        original = Foo.something\r\n        with patch.object(Foo, 'something'):\r\n            self.assertNotEqual(Foo.something, original, \"unpatched\")\r\n        self.assertEqual(Foo.something, original)\r\n    def test_with_statement_nested(self):\r\n        with catch_warnings(record=True):\r\n            with patch('%s.something' % __name__) as mock_something, patch('%s.something_else' % __name__) as mock_something_else:\r\n                self.assertEqual(something, mock_something, \"unpatched\")\r\n                self.assertEqual(something_else, mock_something_else,\r\n                                 \"unpatched\")\r\n        self.assertEqual(something, sentinel.Something)\r\n        self.assertEqual(something_else, sentinel.SomethingElse)\r\n    def test_with_statement_specified(self):\r\n        with patch('%s.something' % __name__, sentinel.Patched) as mock_something:\r\n            self.assertEqual(something, mock_something, \"unpatched\")\r\n            self.assertEqual(mock_something, sentinel.Patched, \"wrong patch\")\r\n        self.assertEqual(something, sentinel.Something)\r\n    def testContextManagerMocking(self):\r\n        mock = Mock()\r\n        mock.__enter__ = Mock()\r\n        mock.__exit__ = Mock()\r\n        mock.__exit__.return_value = False\r\n        with mock as m:\r\n            self.assertEqual(m, mock.__enter__.return_value)\r\n        mock.__enter__.assert_called_with()\r\n        mock.__exit__.assert_called_with(None, None, None)\r\n    def test_context_manager_with_magic_mock(self):\r\n        mock = MagicMock()\r\n        with self.assertRaises(TypeError):\r\n            with mock:\r\n                'foo' + 3\r\n        mock.__enter__.assert_called_with()\r\n        self.assertTrue(mock.__exit__.called)\r\n    def test_with_statement_same_attribute(self):\r\n        with patch('%s.something' % __name__, sentinel.Patched) as mock_something:\r\n            self.assertEqual(something, mock_something, \"unpatched\")\r\n            with patch('%s.something' % __name__) as mock_again:\r\n                self.assertEqual(something, mock_again, \"unpatched\")\r\n            self.assertEqual(something, mock_something,\r\n                             \"restored with wrong instance\")\r\n        self.assertEqual(something, sentinel.Something, \"not restored\")\r\n    def test_with_statement_imbricated(self):\r\n        with patch('%s.something' % __name__) as mock_something:\r\n            self.assertEqual(something, mock_something, \"unpatched\")\r\n            with patch('%s.something_else' % __name__) as mock_something_else:\r\n                self.assertEqual(something_else, mock_something_else,\r\n                                 \"unpatched\")\r\n        self.assertEqual(something, sentinel.Something)\r\n        self.assertEqual(something_else, sentinel.SomethingElse)\r\n    def test_dict_context_manager(self):\r\n        foo = {}\r\n        with patch.dict(foo, {'a': 'b'}):\r\n            self.assertEqual(foo, {'a': 'b'})\r\n        self.assertEqual(foo, {})\r\n        with self.assertRaises(NameError):\r\n            with patch.dict(foo, {'a': 'b'}):\r\n                self.assertEqual(foo, {'a': 'b'})\r\n                raise NameError('Konrad')\r\n        self.assertEqual(foo, {})\r\nclass TestMockOpen(unittest.TestCase):\r\n    def test_mock_open(self):\r\n        mock = mock_open()\r\n        with patch('%s.open' % __name__, mock, create=True) as patched:\r\n            self.assertIs(patched, mock)\r\n            open('foo')\r\n        mock.assert_called_once_with('foo')\r\n    def test_mock_open_context_manager(self):\r\n        mock = mock_open()\r\n        handle = mock.return_value\r\n        with patch('%s.open' % __name__, mock, create=True):\r\n            with open('foo') as f:\r\n                f.read()\r\n        expected_calls = [call('foo'), call().__enter__(), call().read(),\r\n                          call().__exit__(None, None, None)]\r\n        self.assertEqual(mock.mock_calls, expected_calls)\r\n        self.assertIs(f, handle)\r\n    def test_explicit_mock(self):\r\n        mock = MagicMock()\r\n        mock_open(mock)\r\n        with patch('%s.open' % __name__, mock, create=True) as patched:\r\n            self.assertIs(patched, mock)\r\n            open('foo')\r\n        mock.assert_called_once_with('foo')\r\n    def test_read_data(self):\r\n        mock = mock_open(read_data='foo')\r\n        with patch('%s.open' % __name__, mock, create=True):\r\n            h = open('bar')\r\n            result = h.read()\r\n        self.assertEqual(result, 'foo')\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/unittest/test/testmock/testmagicmethods.py": "import unittest\r\nimport inspect\r\nimport sys\r\nfrom unittest.mock import Mock, MagicMock, _magics\r\nclass TestMockingMagicMethods(unittest.TestCase):\r\n    def test_deleting_magic_methods(self):\r\n        mock = Mock()\r\n        self.assertFalse(hasattr(mock, '__getitem__'))\r\n        mock.__getitem__ = Mock()\r\n        self.assertTrue(hasattr(mock, '__getitem__'))\r\n        del mock.__getitem__\r\n        self.assertFalse(hasattr(mock, '__getitem__'))\r\n    def test_magicmock_del(self):\r\n        mock = MagicMock()\r\n        del mock.__getitem__\r\n        self.assertRaises(TypeError, lambda: mock['foo'])\r\n        mock = MagicMock()\r\n        mock['foo']\r\n        del mock.__getitem__\r\n        self.assertRaises(TypeError, lambda: mock['foo'])\r\n    def test_magic_method_wrapping(self):\r\n        mock = Mock()\r\n        def f(self, name):\r\n            return self, 'fish'\r\n        mock.__getitem__ = f\r\n        self.assertFalse(mock.__getitem__ is f)\r\n        self.assertEqual(mock['foo'], (mock, 'fish'))\r\n        self.assertEqual(mock.__getitem__('foo'), (mock, 'fish'))\r\n        mock.__getitem__ = mock\r\n        self.assertTrue(mock.__getitem__ is mock)\r\n    def test_magic_methods_isolated_between_mocks(self):\r\n        mock1 = Mock()\r\n        mock2 = Mock()\r\n        mock1.__iter__ = Mock(return_value=iter([]))\r\n        self.assertEqual(list(mock1), [])\r\n        self.assertRaises(TypeError, lambda: list(mock2))\r\n    def test_repr(self):\r\n        mock = Mock()\r\n        self.assertEqual(repr(mock), \"<Mock id='%s'>\" % id(mock))\r\n        mock.__repr__ = lambda s: 'foo'\r\n        self.assertEqual(repr(mock), 'foo')\r\n    def test_str(self):\r\n        mock = Mock()\r\n        self.assertEqual(str(mock), object.__str__(mock))\r\n        mock.__str__ = lambda s: 'foo'\r\n        self.assertEqual(str(mock), 'foo')\r\n    def test_dict_methods(self):\r\n        mock = Mock()\r\n        self.assertRaises(TypeError, lambda: mock['foo'])\r\n        def _del():\r\n            del mock['foo']\r\n        def _set():\r\n            mock['foo'] = 3\r\n        self.assertRaises(TypeError, _del)\r\n        self.assertRaises(TypeError, _set)\r\n        _dict = {}\r\n        def getitem(s, name):\r\n            return _dict[name]\r\n        def setitem(s, name, value):\r\n            _dict[name] = value\r\n        def delitem(s, name):\r\n            del _dict[name]\r\n        mock.__setitem__ = setitem\r\n        mock.__getitem__ = getitem\r\n        mock.__delitem__ = delitem\r\n        self.assertRaises(KeyError, lambda: mock['foo'])\r\n        mock['foo'] = 'bar'\r\n        self.assertEqual(_dict, {'foo': 'bar'})\r\n        self.assertEqual(mock['foo'], 'bar')\r\n        del mock['foo']\r\n        self.assertEqual(_dict, {})\r\n    def test_numeric(self):\r\n        original = mock = Mock()\r\n        mock.value = 0\r\n        self.assertRaises(TypeError, lambda: mock + 3)\r\n        def add(self, other):\r\n            mock.value += other\r\n            return self\r\n        mock.__add__ = add\r\n        self.assertEqual(mock + 3, mock)\r\n        self.assertEqual(mock.value, 3)\r\n        del mock.__add__\r\n        def iadd(mock):\r\n            mock += 3\r\n        self.assertRaises(TypeError, iadd, mock)\r\n        mock.__iadd__ = add\r\n        mock += 6\r\n        self.assertEqual(mock, original)\r\n        self.assertEqual(mock.value, 9)\r\n        self.assertRaises(TypeError, lambda: 3 + mock)\r\n        mock.__radd__ = add\r\n        self.assertEqual(7 + mock, mock)\r\n        self.assertEqual(mock.value, 16)\r\n    def test_hash(self):\r\n        mock = Mock()\r\n        self.assertEqual(hash(mock), Mock.__hash__(mock))\r\n        def _hash(s):\r\n            return 3\r\n        mock.__hash__ = _hash\r\n        self.assertEqual(hash(mock), 3)\r\n    def test_nonzero(self):\r\n        m = Mock()\r\n        self.assertTrue(bool(m))\r\n        m.__bool__ = lambda s: False\r\n        self.assertFalse(bool(m))\r\n    def test_comparison(self):\r\n        mock = Mock()\r\n        def comp(s, o):\r\n            return True\r\n        mock.__lt__ = mock.__gt__ = mock.__le__ = mock.__ge__ = comp\r\n        self. assertTrue(mock < 3)\r\n        self. assertTrue(mock > 3)\r\n        self. assertTrue(mock <= 3)\r\n        self. assertTrue(mock >= 3)\r\n        self.assertRaises(TypeError, lambda: MagicMock() < object())\r\n        self.assertRaises(TypeError, lambda: object() < MagicMock())\r\n        self.assertRaises(TypeError, lambda: MagicMock() < MagicMock())\r\n        self.assertRaises(TypeError, lambda: MagicMock() > object())\r\n        self.assertRaises(TypeError, lambda: object() > MagicMock())\r\n        self.assertRaises(TypeError, lambda: MagicMock() > MagicMock())\r\n        self.assertRaises(TypeError, lambda: MagicMock() <= object())\r\n        self.assertRaises(TypeError, lambda: object() <= MagicMock())\r\n        self.assertRaises(TypeError, lambda: MagicMock() <= MagicMock())\r\n        self.assertRaises(TypeError, lambda: MagicMock() >= object())\r\n        self.assertRaises(TypeError, lambda: object() >= MagicMock())\r\n        self.assertRaises(TypeError, lambda: MagicMock() >= MagicMock())\r\n    def test_equality(self):\r\n        for mock in Mock(), MagicMock():\r\n            self.assertEqual(mock == mock, True)\r\n            self.assertIsInstance(mock == mock, bool)\r\n            self.assertEqual(mock != mock, False)\r\n            self.assertIsInstance(mock != mock, bool)\r\n            self.assertEqual(mock == object(), False)\r\n            self.assertEqual(mock != object(), True)\r\n            def eq(self, other):\r\n                return other == 3\r\n            mock.__eq__ = eq\r\n            self.assertTrue(mock == 3)\r\n            self.assertFalse(mock == 4)\r\n            def ne(self, other):\r\n                return other == 3\r\n            mock.__ne__ = ne\r\n            self.assertTrue(mock != 3)\r\n            self.assertFalse(mock != 4)\r\n        mock = MagicMock()\r\n        mock.__eq__.return_value = True\r\n        self.assertIsInstance(mock == 3, bool)\r\n        self.assertEqual(mock == 3, True)\r\n        mock.__ne__.return_value = False\r\n        self.assertIsInstance(mock != 3, bool)\r\n        self.assertEqual(mock != 3, False)\r\n    def test_len_contains_iter(self):\r\n        mock = Mock()\r\n        self.assertRaises(TypeError, len, mock)\r\n        self.assertRaises(TypeError, iter, mock)\r\n        self.assertRaises(TypeError, lambda: 'foo' in mock)\r\n        mock.__len__ = lambda s: 6\r\n        self.assertEqual(len(mock), 6)\r\n        mock.__contains__ = lambda s, o: o == 3\r\n        self.assertTrue(3 in mock)\r\n        self.assertFalse(6 in mock)\r\n        mock.__iter__ = lambda s: iter('foobarbaz')\r\n        self.assertEqual(list(mock), list('foobarbaz'))\r\n    def test_magicmock(self):\r\n        mock = MagicMock()\r\n        mock.__iter__.return_value = iter([1, 2, 3])\r\n        self.assertEqual(list(mock), [1, 2, 3])\r\n        getattr(mock, '__bool__').return_value = False\r\n        self.assertFalse(hasattr(mock, '__nonzero__'))\r\n        self.assertFalse(bool(mock))\r\n        for entry in _magics:\r\n            self.assertTrue(hasattr(mock, entry))\r\n        self.assertFalse(hasattr(mock, '__imaginery__'))\r\n    def test_magic_mock_equality(self):\r\n        mock = MagicMock()\r\n        self.assertIsInstance(mock == object(), bool)\r\n        self.assertIsInstance(mock != object(), bool)\r\n        self.assertEqual(mock == object(), False)\r\n        self.assertEqual(mock != object(), True)\r\n        self.assertEqual(mock == mock, True)\r\n        self.assertEqual(mock != mock, False)\r\n    def test_magicmock_defaults(self):\r\n        mock = MagicMock()\r\n        self.assertEqual(int(mock), 1)\r\n        self.assertEqual(complex(mock), 1j)\r\n        self.assertEqual(float(mock), 1.0)\r\n        self.assertNotIn(object(), mock)\r\n        self.assertEqual(len(mock), 0)\r\n        self.assertEqual(list(mock), [])\r\n        self.assertEqual(hash(mock), object.__hash__(mock))\r\n        self.assertEqual(str(mock), object.__str__(mock))\r\n        self.assertTrue(bool(mock))\r\n        self.assertEqual(oct(mock), '0o1')\r\n        self.assertEqual(hex(mock), '0x1')\r\n    def test_magic_methods_and_spec(self):\r\n        class Iterable(object):\r\n            def __iter__(self):\r\n                pass\r\n        mock = Mock(spec=Iterable)\r\n        self.assertRaises(AttributeError, lambda: mock.__iter__)\r\n        mock.__iter__ = Mock(return_value=iter([]))\r\n        self.assertEqual(list(mock), [])\r\n        class NonIterable(object):\r\n            pass\r\n        mock = Mock(spec=NonIterable)\r\n        self.assertRaises(AttributeError, lambda: mock.__iter__)\r\n        def set_int():\r\n            mock.__int__ = Mock(return_value=iter([]))\r\n        self.assertRaises(AttributeError, set_int)\r\n        mock = MagicMock(spec=Iterable)\r\n        self.assertEqual(list(mock), [])\r\n        self.assertRaises(AttributeError, set_int)\r\n    def test_magic_methods_and_spec_set(self):\r\n        class Iterable(object):\r\n            def __iter__(self):\r\n                pass\r\n        mock = Mock(spec_set=Iterable)\r\n        self.assertRaises(AttributeError, lambda: mock.__iter__)\r\n        mock.__iter__ = Mock(return_value=iter([]))\r\n        self.assertEqual(list(mock), [])\r\n        class NonIterable(object):\r\n            pass\r\n        mock = Mock(spec_set=NonIterable)\r\n        self.assertRaises(AttributeError, lambda: mock.__iter__)\r\n        def set_int():\r\n            mock.__int__ = Mock(return_value=iter([]))\r\n        self.assertRaises(AttributeError, set_int)\r\n        mock = MagicMock(spec_set=Iterable)\r\n        self.assertEqual(list(mock), [])\r\n        self.assertRaises(AttributeError, set_int)\r\n    def test_setting_unsupported_magic_method(self):\r\n        mock = MagicMock()\r\n        def set_setattr():\r\n            mock.__setattr__ = lambda self, name: None\r\n        self.assertRaisesRegex(AttributeError,\r\n            \"Attempting to set unsupported magic method '__setattr__'.\",\r\n            set_setattr\r\n        )\r\n    def test_attributes_and_return_value(self):\r\n        mock = MagicMock()\r\n        attr = mock.foo\r\n        def _get_type(obj):\r\n            return type(obj).__mro__[1]\r\n        self.assertEqual(_get_type(attr), MagicMock)\r\n        returned = mock()\r\n        self.assertEqual(_get_type(returned), MagicMock)\r\n    def test_magic_methods_are_magic_mocks(self):\r\n        mock = MagicMock()\r\n        self.assertIsInstance(mock.__getitem__, MagicMock)\r\n        mock[1][2].__getitem__.return_value = 3\r\n        self.assertEqual(mock[1][2][3], 3)\r\n    def test_magic_method_reset_mock(self):\r\n        mock = MagicMock()\r\n        str(mock)\r\n        self.assertTrue(mock.__str__.called)\r\n        mock.reset_mock()\r\n        self.assertFalse(mock.__str__.called)\r\n    def test_dir(self):\r\n        for mock in Mock(), MagicMock():\r\n            def _dir(self):\r\n                return ['foo']\r\n            mock.__dir__ = _dir\r\n            self.assertEqual(dir(mock), ['foo'])\r\n    @unittest.skipIf('PyPy' in sys.version, \"This fails differently on pypy\")\r\n    def test_bound_methods(self):\r\n        m = Mock()\r\n        m.__iter__ = [3].__iter__\r\n        self.assertRaises(TypeError, iter, m)\r\n    def test_magic_method_type(self):\r\n        class Foo(MagicMock):\r\n            pass\r\n        foo = Foo()\r\n        self.assertIsInstance(foo.__int__, Foo)\r\n    def test_descriptor_from_class(self):\r\n        m = MagicMock()\r\n        type(m).__str__.return_value = 'foo'\r\n        self.assertEqual(str(m), 'foo')\r\n    def test_iterable_as_iter_return_value(self):\r\n        m = MagicMock()\r\n        m.__iter__.return_value = [1, 2, 3]\r\n        self.assertEqual(list(m), [1, 2, 3])\r\n        self.assertEqual(list(m), [1, 2, 3])\r\n        m.__iter__.return_value = iter([4, 5, 6])\r\n        self.assertEqual(list(m), [4, 5, 6])\r\n        self.assertEqual(list(m), [])\r\nif __name__ == '__main__':\r\n    unittest.main()\r\n", "/Lib/io.py": "import builtins\nopen = builtins.open\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\nclass StringIO:\n    def __init__(self,initial_value='',newline=None):\n        self.value = initial_value\n        self.newline = newline\n        self._pos = len(initial_value)\n    def write(self,data):\n        self.value += data\n    def read(self,nb=-1):\n        if nb!=-1:\n            res = self.value[self._pos:self._pos+nb]\n            self._pos = min(self._pos+nb,len(self.value)-1)\n        else:\n            res = self.value[self._pos:]\n            self._pos = len(self.value)-1\n        return res\nTextIOWrapper = StringIO\nclass RawIOBase:\n    def read(self,n=-1):\n        pass\n    def readall(self):\n        pass\n    def readinto(self,b):\n        pass\n    def write(self,b):\n        pass\nBufferedReader = RawIOBase\n", "/Lib/pickle.py": "from json import *", "/Lib/genericpath.py": "\"\"\"\r\nPath operations common to more than one OS\r\nDo not use directly.  The OS specific modules import the appropriate\r\nfunctions from this module themselves.\r\n\"\"\"\r\nimport os\r\nimport stat\r\n__all__ = ['commonprefix', 'exists', 'getatime', 'getctime', 'getmtime',\r\n           'getsize', 'isdir', 'isfile']\r\ndef exists(path):\r\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\r\n    try:\r\n        os.stat(path)\r\n    except os.error:\r\n        return False\r\n    return True\r\ndef isfile(path):\r\n    \"\"\"Test whether a path is a regular file\"\"\"\r\n    try:\r\n        st = os.stat(path)\r\n    except os.error:\r\n        return False\r\n    return stat.S_ISREG(st.st_mode)\r\ndef isdir(s):\r\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\r\n    try:\r\n        st = os.stat(s)\r\n    except os.error:\r\n        return False\r\n    return stat.S_ISDIR(st.st_mode)\r\ndef getsize(filename):\r\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\r\n    return os.stat(filename).st_size\r\ndef getmtime(filename):\r\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\r\n    return os.stat(filename).st_mtime\r\ndef getatime(filename):\r\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\r\n    return os.stat(filename).st_atime\r\ndef getctime(filename):\r\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\r\n    return os.stat(filename).st_ctime\r\ndef commonprefix(m):\r\n    \"Given a list of pathnames, returns the longest common leading component\"\r\n    if not m: return ''\r\n    s1 = min(m)\r\n    s2 = max(m)\r\n    for i, c in enumerate(s1):\r\n        if c != s2[i]:\r\n            return s1[:i]\r\n    return s1\r\ndef _splitext(p, sep, altsep, extsep):\r\n    \"\"\"Split the extension from a pathname.\r\n    Extension is everything from the last dot to the end, ignoring\r\n    leading dots.  Returns \"(root, ext)\"; ext may be empty.\"\"\"\r\n    sepIndex = p.rfind(sep)\r\n    if altsep:\r\n        altsepIndex = p.rfind(altsep)\r\n        sepIndex = max(sepIndex, altsepIndex)\r\n    dotIndex = p.rfind(extsep)\r\n    if dotIndex > sepIndex:\r\n        filenameIndex = sepIndex + 1\r\n        while filenameIndex < dotIndex:\r\n            if p[filenameIndex:filenameIndex+1] != extsep:\r\n                return p[:dotIndex], p[dotIndex:]\r\n            filenameIndex += 1\r\n    return p, p[:0]\r\n", "/Lib/VFS_import.py": "import os\nfrom browser import doc\nVFS=dict(JSObject(__BRYTHON__.py_VFS))\nclass VFSModuleFinder:\n    def __init__(self, path_entry):\n        print(\"in VFSModuleFinder\")\n        if path_entry.startswith('/libs') or path_entry.startswith('/Lib'):\n           self.path_entry=path_entry\n        else:\n            raise ImportError()\n    def __str__(self):\n        return '<%s for \"%s\">' % (self.__class__.__name__, self.path_entry)\n    def find_module(self, fullname, path=None):\n        path = path or self.path_entry\n        for _ext in ['js', 'pyj', 'py']:\n            _filepath=os.path.join(self.path_entry, '%s.%s' % (fullname, _ext))\n            if _filepath in VFS:\n               print(\"module found at %s:%s\" % (_filepath, fullname))\n               return VFSModuleLoader(_filepath, fullname)\n        print('module %s not found' % fullname)\n        raise ImportError()\n        return None\nclass VFSModuleLoader:\n    \"\"\"Load source for modules\"\"\"\n    def __init__(self, filepath, name):\n        self._filepath=filepath\n        self._name=name\n    def get_source(self):\n        if self._filepath in VFS:\n           return JSObject(readFromVFS(self._filepath))\n        raise ImportError('could not find source for %s' % fullname)\n    def is_package(self):\n        return '.' in self._name\n    def load_module(self):\n        if self._name in sys.modules:\n           mod = sys.modules[self._name]\n           return mod\n        _src=self.get_source()\n        if self._filepath.endswith('.js'):\n           mod=JSObject(import_js_module(_src, self._filepath, self._name))\n        elif self._filepath.endswith('.py'):\n           mod=JSObject(import_py_module(_src, self._filepath, self._name))\n        elif self._filepath.endswith('.pyj'):\n           mod=JSObject(import_pyj_module(_src, self._filepath, self._name))\n        else:\n           raise ImportError('Invalid Module: %s' % self._filepath)\n        mod.__file__ = self._filepath\n        mod.__name__ = self._name\n        mod.__path__ = os.path.abspath(self._filepath)\n        mod.__loader__ = self\n        mod.__package__ = '.'.join(self._name.split('.')[:-1])\n        if self.is_package():\n           print('adding path for package')\n           mod.__path__ = [ self.path_entry ]\n        else:\n            print('imported as regular module')\n        print('creating a new module object for \"%s\"' % self._name)\n        sys.modules.setdefault(self._name, mod)\n        JSObject(__BRYTHON__.imported)[self._name]=mod\n        return mod\nJSObject(__BRYTHON__.path_hooks.insert(0, VFSModuleFinder))\n", "/Lib/unittest/mock.py": "__all__ = (\r\n    'Mock',\r\n    'MagicMock',\r\n    'patch',\r\n    'sentinel',\r\n    'DEFAULT',\r\n    'ANY',\r\n    'call',\r\n    'create_autospec',\r\n    'FILTER_DIR',\r\n    'NonCallableMock',\r\n    'NonCallableMagicMock',\r\n    'mock_open',\r\n    'PropertyMock',\r\n)\r\n__version__ = '1.0'\r\nimport inspect\r\nimport pprint\r\nimport sys\r\nfrom functools import wraps\r\nBaseExceptions = (BaseException,)\r\nif 'java' in sys.platform:\r\n    import java\r\n    BaseExceptions = (BaseException, java.lang.Throwable)\r\nFILTER_DIR = True\r\n_safe_super = super\r\ndef _is_instance_mock(obj):\r\n    return issubclass(type(obj), NonCallableMock)\r\ndef _is_exception(obj):\r\n    return (\r\n        isinstance(obj, BaseExceptions) or\r\n        isinstance(obj, type) and issubclass(obj, BaseExceptions)\r\n    )\r\nclass _slotted(object):\r\n    __slots__ = ['a']\r\nDescriptorTypes = (\r\n    type(_slotted.a),\r\n    property,\r\n)\r\ndef _getsignature(func, skipfirst, instance=False):\r\n    if isinstance(func, type) and not instance:\r\n        try:\r\n            func = func.__init__\r\n        except AttributeError:\r\n            return\r\n        skipfirst = True\r\n    elif not isinstance(func, FunctionTypes):\r\n        try:\r\n            func = func.__call__\r\n        except AttributeError:\r\n            return\r\n    try:\r\n        argspec = inspect.getfullargspec(func)\r\n    except TypeError:\r\n        return\r\n    regargs, varargs, varkw, defaults, kwonly, kwonlydef, ann = argspec\r\n    if getattr(func, '__self__', None) is not None:\r\n        regargs = regargs[1:]\r\n    if skipfirst:\r\n        regargs = regargs[1:]\r\n    signature = inspect.formatargspec(\r\n        regargs, varargs, varkw, defaults,\r\n        kwonly, kwonlydef, ann, formatvalue=lambda value: \"\")\r\n    return signature[1:-1], func\r\ndef _check_signature(func, mock, skipfirst, instance=False):\r\n    if not _callable(func):\r\n        return\r\n    result = _getsignature(func, skipfirst, instance)\r\n    if result is None:\r\n        return\r\n    signature, func = result\r\n    src = \"lambda _mock_self, %s: None\" % signature\r\n    checksig = eval(src, {})\r\n    _copy_func_details(func, checksig)\r\n    type(mock)._mock_check_sig = checksig\r\ndef _copy_func_details(func, funcopy):\r\n    funcopy.__name__ = func.__name__\r\n    funcopy.__doc__ = func.__doc__\r\n    funcopy.__module__ = func.__module__\r\n    funcopy.__defaults__ = func.__defaults__\r\n    funcopy.__kwdefaults__ = func.__kwdefaults__\r\ndef _callable(obj):\r\n    if isinstance(obj, type):\r\n        return True\r\n    if getattr(obj, '__call__', None) is not None:\r\n        return True\r\n    return False\r\ndef _is_list(obj):\r\n    return type(obj) in (list, tuple)\r\ndef _instance_callable(obj):\r\n    \"\"\"Given an object, return True if the object is callable.\r\n    For classes, return True if instances would be callable.\"\"\"\r\n    if not isinstance(obj, type):\r\n        return getattr(obj, '__call__', None) is not None\r\n    for base in (obj,) + obj.__mro__:\r\n        if base.__dict__.get('__call__') is not None:\r\n            return True\r\n    return False\r\ndef _set_signature(mock, original, instance=False):\r\n    if not _callable(original):\r\n        return\r\n    skipfirst = isinstance(original, type)\r\n    result = _getsignature(original, skipfirst, instance)\r\n    if result is None:\r\n        return\r\n    signature, func = result\r\n    src = \"lambda %s: None\" % signature\r\n    checksig = eval(src, {})\r\n    _copy_func_details(func, checksig)\r\n    name = original.__name__\r\n    if not name.isidentifier():\r\n        name = 'funcopy'\r\n    context = {'_checksig_': checksig, 'mock': mock}\r\n    src = \"\"\"def %s(*args, **kwargs):\r\n    _checksig_(*args, **kwargs)\r\n    return mock(*args, **kwargs)\"\"\" % name\r\n    exec (src, context)\r\n    funcopy = context[name]\r\n    _setup_func(funcopy, mock)\r\n    return funcopy\r\ndef _setup_func(funcopy, mock):\r\n    funcopy.mock = mock\r\n    if not _is_instance_mock(mock):\r\n        return\r\n    def assert_called_with(*args, **kwargs):\r\n        return mock.assert_called_with(*args, **kwargs)\r\n    def assert_called_once_with(*args, **kwargs):\r\n        return mock.assert_called_once_with(*args, **kwargs)\r\n    def assert_has_calls(*args, **kwargs):\r\n        return mock.assert_has_calls(*args, **kwargs)\r\n    def assert_any_call(*args, **kwargs):\r\n        return mock.assert_any_call(*args, **kwargs)\r\n    def reset_mock():\r\n        funcopy.method_calls = _CallList()\r\n        funcopy.mock_calls = _CallList()\r\n        mock.reset_mock()\r\n        ret = funcopy.return_value\r\n        if _is_instance_mock(ret) and not ret is mock:\r\n            ret.reset_mock()\r\n    funcopy.called = False\r\n    funcopy.call_count = 0\r\n    funcopy.call_args = None\r\n    funcopy.call_args_list = _CallList()\r\n    funcopy.method_calls = _CallList()\r\n    funcopy.mock_calls = _CallList()\r\n    funcopy.return_value = mock.return_value\r\n    funcopy.side_effect = mock.side_effect\r\n    funcopy._mock_children = mock._mock_children\r\n    funcopy.assert_called_with = assert_called_with\r\n    funcopy.assert_called_once_with = assert_called_once_with\r\n    funcopy.assert_has_calls = assert_has_calls\r\n    funcopy.assert_any_call = assert_any_call\r\n    funcopy.reset_mock = reset_mock\r\n    mock._mock_delegate = funcopy\r\ndef _is_magic(name):\r\n    return '__%s__' % name[2:-2] == name\r\nclass _SentinelObject(object):\r\n    \"A unique, named, sentinel object.\"\r\n    def __init__(self, name):\r\n        self.name = name\r\n    def __repr__(self):\r\n        return 'sentinel.%s' % self.name\r\nclass _Sentinel(object):\r\n    \"\"\"Access attributes to return a named object, usable as a sentinel.\"\"\"\r\n    def __init__(self):\r\n        self._sentinels = {}\r\n    def __getattr__(self, name):\r\n        if name == '__bases__':\r\n            raise AttributeError\r\n        return self._sentinels.setdefault(name, _SentinelObject(name))\r\nsentinel = _Sentinel()\r\nDEFAULT = sentinel.DEFAULT\r\n_missing = sentinel.MISSING\r\n_deleted = sentinel.DELETED\r\ndef _copy(value):\r\n    if type(value) in (dict, list, tuple, set):\r\n        return type(value)(value)\r\n    return value\r\n_allowed_names = set(\r\n    [\r\n        'return_value', '_mock_return_value', 'side_effect',\r\n        '_mock_side_effect', '_mock_parent', '_mock_new_parent',\r\n        '_mock_name', '_mock_new_name'\r\n    ]\r\n)\r\ndef _delegating_property(name):\r\n    _allowed_names.add(name)\r\n    _the_name = '_mock_' + name\r\n    def _get(self, name=name, _the_name=_the_name):\r\n        sig = self._mock_delegate\r\n        if sig is None:\r\n            return getattr(self, _the_name)\r\n        return getattr(sig, name)\r\n    def _set(self, value, name=name, _the_name=_the_name):\r\n        sig = self._mock_delegate\r\n        if sig is None:\r\n            self.__dict__[_the_name] = value\r\n        else:\r\n            setattr(sig, name, value)\r\n    return property(_get, _set)\r\nclass _CallList(list):\r\n    def __contains__(self, value):\r\n        if not isinstance(value, list):\r\n            return list.__contains__(self, value)\r\n        len_value = len(value)\r\n        len_self = len(self)\r\n        if len_value > len_self:\r\n            return False\r\n        for i in range(0, len_self - len_value + 1):\r\n            sub_list = self[i:i+len_value]\r\n            if sub_list == value:\r\n                return True\r\n        return False\r\n    def __repr__(self):\r\n        return pprint.pformat(list(self))\r\ndef _check_and_set_parent(parent, value, name, new_name):\r\n    if not _is_instance_mock(value):\r\n        return False\r\n    if ((value._mock_name or value._mock_new_name) or\r\n        (value._mock_parent is not None) or\r\n        (value._mock_new_parent is not None)):\r\n        return False\r\n    _parent = parent\r\n    while _parent is not None:\r\n        if _parent is value:\r\n            return False\r\n        _parent = _parent._mock_new_parent\r\n    if new_name:\r\n        value._mock_new_parent = parent\r\n        value._mock_new_name = new_name\r\n    if name:\r\n        value._mock_parent = parent\r\n        value._mock_name = name\r\n    return True\r\nclass Base(object):\r\n    _mock_return_value = DEFAULT\r\n    _mock_side_effect = None\r\n    def __init__(self, *args, **kwargs):\r\n        pass\r\nclass NonCallableMock(Base):\r\n    \"\"\"A non-callable version of `Mock`\"\"\"\r\n    def __new__(cls, *args, **kw):\r\n        new = type(cls.__name__, (cls,), {'__doc__': cls.__doc__})\r\n        instance = object.__new__(new)\r\n        return instance\r\n    def __init__(\r\n            self, spec=None, wraps=None, name=None, spec_set=None,\r\n            parent=None, _spec_state=None, _new_name='', _new_parent=None,\r\n            **kwargs\r\n        ):\r\n        if _new_parent is None:\r\n            _new_parent = parent\r\n        __dict__ = self.__dict__\r\n        __dict__['_mock_parent'] = parent\r\n        __dict__['_mock_name'] = name\r\n        __dict__['_mock_new_name'] = _new_name\r\n        __dict__['_mock_new_parent'] = _new_parent\r\n        if spec_set is not None:\r\n            spec = spec_set\r\n            spec_set = True\r\n        self._mock_add_spec(spec, spec_set)\r\n        __dict__['_mock_children'] = {}\r\n        __dict__['_mock_wraps'] = wraps\r\n        __dict__['_mock_delegate'] = None\r\n        __dict__['_mock_called'] = False\r\n        __dict__['_mock_call_args'] = None\r\n        __dict__['_mock_call_count'] = 0\r\n        __dict__['_mock_call_args_list'] = _CallList()\r\n        __dict__['_mock_mock_calls'] = _CallList()\r\n        __dict__['method_calls'] = _CallList()\r\n        if kwargs:\r\n            self.configure_mock(**kwargs)\r\n        _safe_super(NonCallableMock, self).__init__(\r\n            spec, wraps, name, spec_set, parent,\r\n            _spec_state\r\n        )\r\n    def attach_mock(self, mock, attribute):\r\n        \"\"\"\r\n        Attach a mock as an attribute of this one, replacing its name and\r\n        parent. Calls to the attached mock will be recorded in the\r\n        `method_calls` and `mock_calls` attributes of this one.\"\"\"\r\n        mock._mock_parent = None\r\n        mock._mock_new_parent = None\r\n        mock._mock_name = ''\r\n        mock._mock_new_name = None\r\n        setattr(self, attribute, mock)\r\n    def mock_add_spec(self, spec, spec_set=False):\r\n        \"\"\"Add a spec to a mock. `spec` can either be an object or a\r\n        list of strings. Only attributes on the `spec` can be fetched as\r\n        attributes from the mock.\r\n        If `spec_set` is True then only attributes on the spec can be set.\"\"\"\r\n        self._mock_add_spec(spec, spec_set)\r\n    def _mock_add_spec(self, spec, spec_set):\r\n        _spec_class = None\r\n        if spec is not None and not _is_list(spec):\r\n            if isinstance(spec, type):\r\n                _spec_class = spec\r\n            else:\r\n                _spec_class = _get_class(spec)\r\n            spec = dir(spec)\r\n        __dict__ = self.__dict__\r\n        __dict__['_spec_class'] = _spec_class\r\n        __dict__['_spec_set'] = spec_set\r\n        __dict__['_mock_methods'] = spec\r\n    def __get_return_value(self):\r\n        ret = self._mock_return_value\r\n        if self._mock_delegate is not None:\r\n            ret = self._mock_delegate.return_value\r\n        if ret is DEFAULT:\r\n            ret = self._get_child_mock(\r\n                _new_parent=self, _new_name='()'\r\n            )\r\n            self.return_value = ret\r\n        return ret\r\n    def __set_return_value(self, value):\r\n        if self._mock_delegate is not None:\r\n            self._mock_delegate.return_value = value\r\n        else:\r\n            self._mock_return_value = value\r\n            _check_and_set_parent(self, value, None, '()')\r\n    __return_value_doc = \"The value to be returned when the mock is called.\"\r\n    return_value = property(__get_return_value, __set_return_value,\r\n                            __return_value_doc)\r\n    @property\r\n    def __class__(self):\r\n        if self._spec_class is None:\r\n            return type(self)\r\n        return self._spec_class\r\n    called = _delegating_property('called')\r\n    call_count = _delegating_property('call_count')\r\n    call_args = _delegating_property('call_args')\r\n    call_args_list = _delegating_property('call_args_list')\r\n    mock_calls = _delegating_property('mock_calls')\r\n    def __get_side_effect(self):\r\n        delegated = self._mock_delegate\r\n        if delegated is None:\r\n            return self._mock_side_effect\r\n        return delegated.side_effect\r\n    def __set_side_effect(self, value):\r\n        value = _try_iter(value)\r\n        delegated = self._mock_delegate\r\n        if delegated is None:\r\n            self._mock_side_effect = value\r\n        else:\r\n            delegated.side_effect = value\r\n    side_effect = property(__get_side_effect, __set_side_effect)\r\n    def reset_mock(self):\r\n        \"Restore the mock object to its initial state.\"\r\n        self.called = False\r\n        self.call_args = None\r\n        self.call_count = 0\r\n        self.mock_calls = _CallList()\r\n        self.call_args_list = _CallList()\r\n        self.method_calls = _CallList()\r\n        for child in self._mock_children.values():\r\n            if isinstance(child, _SpecState):\r\n                continue\r\n            child.reset_mock()\r\n        ret = self._mock_return_value\r\n        if _is_instance_mock(ret) and ret is not self:\r\n            ret.reset_mock()\r\n    def configure_mock(self, **kwargs):\r\n        \"\"\"Set attributes on the mock through keyword arguments.\r\n        Attributes plus return values and side effects can be set on child\r\n        mocks using standard dot notation and unpacking a dictionary in the\r\n        method call:\r\n        >>> attrs = {'method.return_value': 3, 'other.side_effect': KeyError}\r\n        >>> mock.configure_mock(**attrs)\"\"\"\r\n        for arg, val in sorted(kwargs.items(),\r\n                               key=lambda entry: entry[0].count('.')):\r\n            args = arg.split('.')\r\n            final = args.pop()\r\n            obj = self\r\n            for entry in args:\r\n                obj = getattr(obj, entry)\r\n            setattr(obj, final, val)\r\n    def __getattr__(self, name):\r\n        if name == '_mock_methods':\r\n            raise AttributeError(name)\r\n        elif self._mock_methods is not None:\r\n            if name not in self._mock_methods or name in _all_magics:\r\n                raise AttributeError(\"Mock object has no attribute %r\" % name)\r\n        elif _is_magic(name):\r\n            raise AttributeError(name)\r\n        result = self._mock_children.get(name)\r\n        if result is _deleted:\r\n            raise AttributeError(name)\r\n        elif result is None:\r\n            wraps = None\r\n            if self._mock_wraps is not None:\r\n                wraps = getattr(self._mock_wraps, name)\r\n            result = self._get_child_mock(\r\n                parent=self, name=name, wraps=wraps, _new_name=name,\r\n                _new_parent=self\r\n            )\r\n            self._mock_children[name]  = result\r\n        elif isinstance(result, _SpecState):\r\n            result = create_autospec(\r\n                result.spec, result.spec_set, result.instance,\r\n                result.parent, result.name\r\n            )\r\n            self._mock_children[name]  = result\r\n        return result\r\n    def __repr__(self):\r\n        _name_list = [self._mock_new_name]\r\n        _parent = self._mock_new_parent\r\n        last = self\r\n        dot = '.'\r\n        if _name_list == ['()']:\r\n            dot = ''\r\n        seen = set()\r\n        while _parent is not None:\r\n            last = _parent\r\n            _name_list.append(_parent._mock_new_name + dot)\r\n            dot = '.'\r\n            if _parent._mock_new_name == '()':\r\n                dot = ''\r\n            _parent = _parent._mock_new_parent\r\n            if id(_parent) in seen:\r\n                break\r\n            seen.add(id(_parent))\r\n        _name_list = list(reversed(_name_list))\r\n        _first = last._mock_name or 'mock'\r\n        if len(_name_list) > 1:\r\n            if _name_list[1] not in ('()', '().'):\r\n                _first += '.'\r\n        _name_list[0] = _first\r\n        name = ''.join(_name_list)\r\n        name_string = ''\r\n        if name not in ('mock', 'mock.'):\r\n            name_string = ' name=%r' % name\r\n        spec_string = ''\r\n        if self._spec_class is not None:\r\n            spec_string = ' spec=%r'\r\n            if self._spec_set:\r\n                spec_string = ' spec_set=%r'\r\n            spec_string = spec_string % self._spec_class.__name__\r\n        return \"<%s%s%s id='%s'>\" % (\r\n            type(self).__name__,\r\n            name_string,\r\n            spec_string,\r\n            id(self)\r\n        )\r\n    def __dir__(self):\r\n        \"\"\"Filter the output of `dir(mock)` to only useful members.\"\"\"\r\n        if not FILTER_DIR:\r\n            return object.__dir__(self)\r\n        extras = self._mock_methods or []\r\n        from_type = dir(type(self))\r\n        from_dict = list(self.__dict__)\r\n        from_type = [e for e in from_type if not e.startswith('_')]\r\n        from_dict = [e for e in from_dict if not e.startswith('_') or\r\n                     _is_magic(e)]\r\n        return sorted(set(extras + from_type + from_dict +\r\n                          list(self._mock_children)))\r\n    def __setattr__(self, name, value):\r\n        if name in _allowed_names:\r\n            return object.__setattr__(self, name, value)\r\n        elif (self._spec_set and self._mock_methods is not None and\r\n            name not in self._mock_methods and\r\n            name not in self.__dict__):\r\n            raise AttributeError(\"Mock object has no attribute '%s'\" % name)\r\n        elif name in _unsupported_magics:\r\n            msg = 'Attempting to set unsupported magic method %r.' % name\r\n            raise AttributeError(msg)\r\n        elif name in _all_magics:\r\n            if self._mock_methods is not None and name not in self._mock_methods:\r\n                raise AttributeError(\"Mock object has no attribute '%s'\" % name)\r\n            if not _is_instance_mock(value):\r\n                setattr(type(self), name, _get_method(name, value))\r\n                original = value\r\n                value = lambda *args, **kw: original(self, *args, **kw)\r\n            else:\r\n                _check_and_set_parent(self, value, None, name)\r\n                setattr(type(self), name, value)\r\n                self._mock_children[name] = value\r\n        elif name == '__class__':\r\n            self._spec_class = value\r\n            return\r\n        else:\r\n            if _check_and_set_parent(self, value, name, name):\r\n                self._mock_children[name] = value\r\n        return object.__setattr__(self, name, value)\r\n    def __delattr__(self, name):\r\n        if name in _all_magics and name in type(self).__dict__:\r\n            delattr(type(self), name)\r\n            if name not in self.__dict__:\r\n                return\r\n        if name in self.__dict__:\r\n            object.__delattr__(self, name)\r\n        obj = self._mock_children.get(name, _missing)\r\n        if obj is _deleted:\r\n            raise AttributeError(name)\r\n        if obj is not _missing:\r\n            del self._mock_children[name]\r\n        self._mock_children[name] = _deleted\r\n    def _format_mock_call_signature(self, args, kwargs):\r\n        name = self._mock_name or 'mock'\r\n        return _format_call_signature(name, args, kwargs)\r\n    def _format_mock_failure_message(self, args, kwargs):\r\n        message = 'Expected call: %s\\nActual call: %s'\r\n        expected_string = self._format_mock_call_signature(args, kwargs)\r\n        call_args = self.call_args\r\n        if len(call_args) == 3:\r\n            call_args = call_args[1:]\r\n        actual_string = self._format_mock_call_signature(*call_args)\r\n        return message % (expected_string, actual_string)\r\n    def assert_called_with(_mock_self, *args, **kwargs):\r\n        \"\"\"assert that the mock was called with the specified arguments.\r\n        Raises an AssertionError if the args and keyword args passed in are\r\n        different to the last call to the mock.\"\"\"\r\n        self = _mock_self\r\n        if self.call_args is None:\r\n            expected = self._format_mock_call_signature(args, kwargs)\r\n            raise AssertionError('Expected call: %s\\nNot called' % (expected,))\r\n        if self.call_args != (args, kwargs):\r\n            msg = self._format_mock_failure_message(args, kwargs)\r\n            raise AssertionError(msg)\r\n    def assert_called_once_with(_mock_self, *args, **kwargs):\r\n        \"\"\"assert that the mock was called exactly once and with the specified\r\n        arguments.\"\"\"\r\n        self = _mock_self\r\n        if not self.call_count == 1:\r\n            msg = (\"Expected to be called once. Called %s times.\" %\r\n                   self.call_count)\r\n            raise AssertionError(msg)\r\n        return self.assert_called_with(*args, **kwargs)\r\n    def assert_has_calls(self, calls, any_order=False):\r\n        \"\"\"assert the mock has been called with the specified calls.\r\n        The `mock_calls` list is checked for the calls.\r\n        If `any_order` is False (the default) then the calls must be\r\n        sequential. There can be extra calls before or after the\r\n        specified calls.\r\n        If `any_order` is True then the calls can be in any order, but\r\n        they must all appear in `mock_calls`.\"\"\"\r\n        if not any_order:\r\n            if calls not in self.mock_calls:\r\n                raise AssertionError(\r\n                    'Calls not found.\\nExpected: %r\\n'\r\n                    'Actual: %r' % (calls, self.mock_calls)\r\n                )\r\n            return\r\n        all_calls = list(self.mock_calls)\r\n        not_found = []\r\n        for kall in calls:\r\n            try:\r\n                all_calls.remove(kall)\r\n            except ValueError:\r\n                not_found.append(kall)\r\n        if not_found:\r\n            raise AssertionError(\r\n                '%r not all found in call list' % (tuple(not_found),)\r\n            )\r\n    def assert_any_call(self, *args, **kwargs):\r\n        \"\"\"assert the mock has been called with the specified arguments.\r\n        The assert passes if the mock has *ever* been called, unlike\r\n        `assert_called_with` and `assert_called_once_with` that only pass if\r\n        the call is the most recent one.\"\"\"\r\n        kall = call(*args, **kwargs)\r\n        if kall not in self.call_args_list:\r\n            expected_string = self._format_mock_call_signature(args, kwargs)\r\n            raise AssertionError(\r\n                '%s call not found' % expected_string\r\n            )\r\n    def _get_child_mock(self, **kw):\r\n        \"\"\"Create the child mocks for attributes and return value.\r\n        By default child mocks will be the same type as the parent.\r\n        Subclasses of Mock may want to override this to customize the way\r\n        child mocks are made.\r\n        For non-callable mocks the callable variant will be used (rather than\r\n        any custom subclass).\"\"\"\r\n        _type = type(self)\r\n        if not issubclass(_type, CallableMixin):\r\n            if issubclass(_type, NonCallableMagicMock):\r\n                klass = MagicMock\r\n            elif issubclass(_type, NonCallableMock) :\r\n                klass = Mock\r\n        else:\r\n            klass = _type.__mro__[1]\r\n        return klass(**kw)\r\ndef _try_iter(obj):\r\n    if obj is None:\r\n        return obj\r\n    if _is_exception(obj):\r\n        return obj\r\n    if _callable(obj):\r\n        return obj\r\n    try:\r\n        return iter(obj)\r\n    except TypeError:\r\n        return obj\r\nclass CallableMixin(Base):\r\n    def __init__(self, spec=None, side_effect=None, return_value=DEFAULT,\r\n                 wraps=None, name=None, spec_set=None, parent=None,\r\n                 _spec_state=None, _new_name='', _new_parent=None, **kwargs):\r\n        self.__dict__['_mock_return_value'] = return_value\r\n        _safe_super(CallableMixin, self).__init__(\r\n            spec, wraps, name, spec_set, parent,\r\n            _spec_state, _new_name, _new_parent, **kwargs\r\n        )\r\n        self.side_effect = side_effect\r\n    def _mock_check_sig(self, *args, **kwargs):\r\n        pass\r\n    def __call__(_mock_self, *args, **kwargs):\r\n        _mock_self._mock_check_sig(*args, **kwargs)\r\n        return _mock_self._mock_call(*args, **kwargs)\r\n    def _mock_call(_mock_self, *args, **kwargs):\r\n        self = _mock_self\r\n        self.called = True\r\n        self.call_count += 1\r\n        self.call_args = _Call((args, kwargs), two=True)\r\n        self.call_args_list.append(_Call((args, kwargs), two=True))\r\n        _new_name = self._mock_new_name\r\n        _new_parent = self._mock_new_parent\r\n        self.mock_calls.append(_Call(('', args, kwargs)))\r\n        seen = set()\r\n        skip_next_dot = _new_name == '()'\r\n        do_method_calls = self._mock_parent is not None\r\n        name = self._mock_name\r\n        while _new_parent is not None:\r\n            this_mock_call = _Call((_new_name, args, kwargs))\r\n            if _new_parent._mock_new_name:\r\n                dot = '.'\r\n                if skip_next_dot:\r\n                    dot = ''\r\n                skip_next_dot = False\r\n                if _new_parent._mock_new_name == '()':\r\n                    skip_next_dot = True\r\n                _new_name = _new_parent._mock_new_name + dot + _new_name\r\n            if do_method_calls:\r\n                if _new_name == name:\r\n                    this_method_call = this_mock_call\r\n                else:\r\n                    this_method_call = _Call((name, args, kwargs))\r\n                _new_parent.method_calls.append(this_method_call)\r\n                do_method_calls = _new_parent._mock_parent is not None\r\n                if do_method_calls:\r\n                    name = _new_parent._mock_name + '.' + name\r\n            _new_parent.mock_calls.append(this_mock_call)\r\n            _new_parent = _new_parent._mock_new_parent\r\n            _new_parent_id = id(_new_parent)\r\n            if _new_parent_id in seen:\r\n                break\r\n            seen.add(_new_parent_id)\r\n        ret_val = DEFAULT\r\n        effect = self.side_effect\r\n        if effect is not None:\r\n            if _is_exception(effect):\r\n                raise effect\r\n            if not _callable(effect):\r\n                result = next(effect)\r\n                if _is_exception(result):\r\n                    raise result\r\n                return result\r\n            ret_val = effect(*args, **kwargs)\r\n            if ret_val is DEFAULT:\r\n                ret_val = self.return_value\r\n        if (self._mock_wraps is not None and\r\n             self._mock_return_value is DEFAULT):\r\n            return self._mock_wraps(*args, **kwargs)\r\n        if ret_val is DEFAULT:\r\n            ret_val = self.return_value\r\n        return ret_val\r\nclass Mock(CallableMixin, NonCallableMock):\r\n    \"\"\"\r\n    Create a new `Mock` object. `Mock` takes several optional arguments\r\n    that specify the behaviour of the Mock object:\r\n    * `spec`: This can be either a list of strings or an existing object (a\r\n      class or instance) that acts as the specification for the mock object. If\r\n      you pass in an object then a list of strings is formed by calling dir on\r\n      the object (excluding unsupported magic attributes and methods). Accessing\r\n      any attribute not in this list will raise an `AttributeError`.\r\n      If `spec` is an object (rather than a list of strings) then\r\n      `mock.__class__` returns the class of the spec object. This allows mocks\r\n      to pass `isinstance` tests.\r\n    * `spec_set`: A stricter variant of `spec`. If used, attempting to *set*\r\n      or get an attribute on the mock that isn't on the object passed as\r\n      `spec_set` will raise an `AttributeError`.\r\n    * `side_effect`: A function to be called whenever the Mock is called. See\r\n      the `side_effect` attribute. Useful for raising exceptions or\r\n      dynamically changing return values. The function is called with the same\r\n      arguments as the mock, and unless it returns `DEFAULT`, the return\r\n      value of this function is used as the return value.\r\n      If `side_effect` is an iterable then each call to the mock will return\r\n      the next value from the iterable. If any of the members of the iterable\r\n      are exceptions they will be raised instead of returned.\r\n      If `side_effect` is an iterable then each call to the mock will return\r\n      the next value from the iterable.\r\n    * `return_value`: The value returned when the mock is called. By default\r\n      this is a new Mock (created on first access). See the\r\n      `return_value` attribute.\r\n    * `wraps`: Item for the mock object to wrap. If `wraps` is not None then\r\n      calling the Mock will pass the call through to the wrapped object\r\n      (returning the real result). Attribute access on the mock will return a\r\n      Mock object that wraps the corresponding attribute of the wrapped object\r\n      (so attempting to access an attribute that doesn't exist will raise an\r\n      `AttributeError`).\r\n      If the mock has an explicit `return_value` set then calls are not passed\r\n      to the wrapped object and the `return_value` is returned instead.\r\n    * `name`: If the mock has a name then it will be used in the repr of the\r\n      mock. This can be useful for debugging. The name is propagated to child\r\n      mocks.\r\n    Mocks can also be called with arbitrary keyword arguments. These will be\r\n    used to set attributes on the mock after it is created.\r\n    \"\"\"\r\ndef _dot_lookup(thing, comp, import_path):\r\n    try:\r\n        return getattr(thing, comp)\r\n    except AttributeError:\r\n        __import__(import_path)\r\n        return getattr(thing, comp)\r\ndef _importer(target):\r\n    components = target.split('.')\r\n    import_path = components.pop(0)\r\n    thing = __import__(import_path)\r\n    for comp in components:\r\n        import_path += \".%s\" % comp\r\n        thing = _dot_lookup(thing, comp, import_path)\r\n    return thing\r\ndef _is_started(patcher):\r\n    return hasattr(patcher, 'is_local')\r\nclass _patch(object):\r\n    attribute_name = None\r\n    _active_patches = set()\r\n    def __init__(\r\n            self, getter, attribute, new, spec, create,\r\n            spec_set, autospec, new_callable, kwargs\r\n        ):\r\n        if new_callable is not None:\r\n            if new is not DEFAULT:\r\n                raise ValueError(\r\n                    \"Cannot use 'new' and 'new_callable' together\"\r\n                )\r\n            if autospec is not None:\r\n                raise ValueError(\r\n                    \"Cannot use 'autospec' and 'new_callable' together\"\r\n                )\r\n        self.getter = getter\r\n        self.attribute = attribute\r\n        self.new = new\r\n        self.new_callable = new_callable\r\n        self.spec = spec\r\n        self.create = create\r\n        self.has_local = False\r\n        self.spec_set = spec_set\r\n        self.autospec = autospec\r\n        self.kwargs = kwargs\r\n        self.additional_patchers = []\r\n    def copy(self):\r\n        patcher = _patch(\r\n            self.getter, self.attribute, self.new, self.spec,\r\n            self.create, self.spec_set,\r\n            self.autospec, self.new_callable, self.kwargs\r\n        )\r\n        patcher.attribute_name = self.attribute_name\r\n        patcher.additional_patchers = [\r\n            p.copy() for p in self.additional_patchers\r\n        ]\r\n        return patcher\r\n    def __call__(self, func):\r\n        if isinstance(func, type):\r\n            return self.decorate_class(func)\r\n        return self.decorate_callable(func)\r\n    def decorate_class(self, klass):\r\n        for attr in dir(klass):\r\n            if not attr.startswith(patch.TEST_PREFIX):\r\n                continue\r\n            attr_value = getattr(klass, attr)\r\n            if not hasattr(attr_value, \"__call__\"):\r\n                continue\r\n            patcher = self.copy()\r\n            setattr(klass, attr, patcher(attr_value))\r\n        return klass\r\n    def decorate_callable(self, func):\r\n        if hasattr(func, 'patchings'):\r\n            func.patchings.append(self)\r\n            return func\r\n        @wraps(func)\r\n        def patched(*args, **keywargs):\r\n            extra_args = []\r\n            entered_patchers = []\r\n            exc_info = tuple()\r\n            try:\r\n                for patching in patched.patchings:\r\n                    arg = patching.__enter__()\r\n                    entered_patchers.append(patching)\r\n                    if patching.attribute_name is not None:\r\n                        keywargs.update(arg)\r\n                    elif patching.new is DEFAULT:\r\n                        extra_args.append(arg)\r\n                args += tuple(extra_args)\r\n                return func(*args, **keywargs)\r\n            except:\r\n                if (patching not in entered_patchers and\r\n                    _is_started(patching)):\r\n                    entered_patchers.append(patching)\r\n                exc_info = sys.exc_info()\r\n                raise\r\n            finally:\r\n                for patching in reversed(entered_patchers):\r\n                    patching.__exit__(*exc_info)\r\n        patched.patchings = [self]\r\n        return patched\r\n    def get_original(self):\r\n        target = self.getter()\r\n        name = self.attribute\r\n        original = DEFAULT\r\n        local = False\r\n        try:\r\n            original = target.__dict__[name]\r\n        except (AttributeError, KeyError):\r\n            original = getattr(target, name, DEFAULT)\r\n        else:\r\n            local = True\r\n        if not self.create and original is DEFAULT:\r\n            raise AttributeError(\r\n                \"%s does not have the attribute %r\" % (target, name)\r\n            )\r\n        return original, local\r\n    def __enter__(self):\r\n        \"\"\"Perform the patch.\"\"\"\r\n        new, spec, spec_set = self.new, self.spec, self.spec_set\r\n        autospec, kwargs = self.autospec, self.kwargs\r\n        new_callable = self.new_callable\r\n        self.target = self.getter()\r\n        if spec is False:\r\n            spec = None\r\n        if spec_set is False:\r\n            spec_set = None\r\n        if autospec is False:\r\n            autospec = None\r\n        if spec is not None and autospec is not None:\r\n            raise TypeError(\"Can't specify spec and autospec\")\r\n        if ((spec is not None or autospec is not None) and\r\n            spec_set not in (True, None)):\r\n            raise TypeError(\"Can't provide explicit spec_set *and* spec or autospec\")\r\n        original, local = self.get_original()\r\n        if new is DEFAULT and autospec is None:\r\n            inherit = False\r\n            if spec is True:\r\n                spec = original\r\n                if spec_set is True:\r\n                    spec_set = original\r\n                    spec = None\r\n            elif spec is not None:\r\n                if spec_set is True:\r\n                    spec_set = spec\r\n                    spec = None\r\n            elif spec_set is True:\r\n                spec_set = original\r\n            if spec is not None or spec_set is not None:\r\n                if original is DEFAULT:\r\n                    raise TypeError(\"Can't use 'spec' with create=True\")\r\n                if isinstance(original, type):\r\n                    inherit = True\r\n            Klass = MagicMock\r\n            _kwargs = {}\r\n            if new_callable is not None:\r\n                Klass = new_callable\r\n            elif spec is not None or spec_set is not None:\r\n                this_spec = spec\r\n                if spec_set is not None:\r\n                    this_spec = spec_set\r\n                if _is_list(this_spec):\r\n                    not_callable = '__call__' not in this_spec\r\n                else:\r\n                    not_callable = not callable(this_spec)\r\n                if not_callable:\r\n                    Klass = NonCallableMagicMock\r\n            if spec is not None:\r\n                _kwargs['spec'] = spec\r\n            if spec_set is not None:\r\n                _kwargs['spec_set'] = spec_set\r\n            if (isinstance(Klass, type) and\r\n                issubclass(Klass, NonCallableMock) and self.attribute):\r\n                _kwargs['name'] = self.attribute\r\n            _kwargs.update(kwargs)\r\n            new = Klass(**_kwargs)\r\n            if inherit and _is_instance_mock(new):\r\n                this_spec = spec\r\n                if spec_set is not None:\r\n                    this_spec = spec_set\r\n                if (not _is_list(this_spec) and not\r\n                    _instance_callable(this_spec)):\r\n                    Klass = NonCallableMagicMock\r\n                _kwargs.pop('name')\r\n                new.return_value = Klass(_new_parent=new, _new_name='()',\r\n                                         **_kwargs)\r\n        elif autospec is not None:\r\n            if new is not DEFAULT:\r\n                raise TypeError(\r\n                    \"autospec creates the mock for you. Can't specify \"\r\n                    \"autospec and new.\"\r\n                )\r\n            if original is DEFAULT:\r\n                raise TypeError(\"Can't use 'autospec' with create=True\")\r\n            spec_set = bool(spec_set)\r\n            if autospec is True:\r\n                autospec = original\r\n            new = create_autospec(autospec, spec_set=spec_set,\r\n                                  _name=self.attribute, **kwargs)\r\n        elif kwargs:\r\n            raise TypeError(\"Can't pass kwargs to a mock we aren't creating\")\r\n        new_attr = new\r\n        self.temp_original = original\r\n        self.is_local = local\r\n        setattr(self.target, self.attribute, new_attr)\r\n        if self.attribute_name is not None:\r\n            extra_args = {}\r\n            if self.new is DEFAULT:\r\n                extra_args[self.attribute_name] =  new\r\n            for patching in self.additional_patchers:\r\n                arg = patching.__enter__()\r\n                if patching.new is DEFAULT:\r\n                    extra_args.update(arg)\r\n            return extra_args\r\n        return new\r\n    def __exit__(self, *exc_info):\r\n        \"\"\"Undo the patch.\"\"\"\r\n        if not _is_started(self):\r\n            raise RuntimeError('stop called on unstarted patcher')\r\n        if self.is_local and self.temp_original is not DEFAULT:\r\n            setattr(self.target, self.attribute, self.temp_original)\r\n        else:\r\n            delattr(self.target, self.attribute)\r\n            if not self.create and not hasattr(self.target, self.attribute):\r\n                setattr(self.target, self.attribute, self.temp_original)\r\n        del self.temp_original\r\n        del self.is_local\r\n        del self.target\r\n        for patcher in reversed(self.additional_patchers):\r\n            if _is_started(patcher):\r\n                patcher.__exit__(*exc_info)\r\n    def start(self):\r\n        \"\"\"Activate a patch, returning any created mock.\"\"\"\r\n        result = self.__enter__()\r\n        self._active_patches.add(self)\r\n        return result\r\n    def stop(self):\r\n        \"\"\"Stop an active patch.\"\"\"\r\n        self._active_patches.discard(self)\r\n        return self.__exit__()\r\ndef _get_target(target):\r\n    try:\r\n        target, attribute = target.rsplit('.', 1)\r\n    except (TypeError, ValueError):\r\n        raise TypeError(\"Need a valid target to patch. You supplied: %r\" %\r\n                        (target,))\r\n    getter = lambda: _importer(target)\r\n    return getter, attribute\r\ndef _patch_object(\r\n        target, attribute, new=DEFAULT, spec=None,\r\n        create=False, spec_set=None, autospec=None,\r\n        new_callable=None, **kwargs\r\n    ):\r\n    \"\"\"\r\n    patch the named member (`attribute`) on an object (`target`) with a mock\r\n    object.\r\n    `patch.object` can be used as a decorator, class decorator or a context\r\n    manager. Arguments `new`, `spec`, `create`, `spec_set`,\r\n    `autospec` and `new_callable` have the same meaning as for `patch`. Like\r\n    `patch`, `patch.object` takes arbitrary keyword arguments for configuring\r\n    the mock object it creates.\r\n    When used as a class decorator `patch.object` honours `patch.TEST_PREFIX`\r\n    for choosing which methods to wrap.\r\n    \"\"\"\r\n    getter = lambda: target\r\n    return _patch(\r\n        getter, attribute, new, spec, create,\r\n        spec_set, autospec, new_callable, kwargs\r\n    )\r\ndef _patch_multiple(target, spec=None, create=False, spec_set=None,\r\n                    autospec=None, new_callable=None, **kwargs):\r\n    \"\"\"Perform multiple patches in a single call. It takes the object to be\r\n    patched (either as an object or a string to fetch the object by importing)\r\n    and keyword arguments for the patches::\r\n        with patch.multiple(settings, FIRST_PATCH='one', SECOND_PATCH='two'):\r\n            ...\r\n    Use `DEFAULT` as the value if you want `patch.multiple` to create\r\n    mocks for you. In this case the created mocks are passed into a decorated\r\n    function by keyword, and a dictionary is returned when `patch.multiple` is\r\n    used as a context manager.\r\n    `patch.multiple` can be used as a decorator, class decorator or a context\r\n    manager. The arguments `spec`, `spec_set`, `create`,\r\n    `autospec` and `new_callable` have the same meaning as for `patch`. These\r\n    arguments will be applied to *all* patches done by `patch.multiple`.\r\n    When used as a class decorator `patch.multiple` honours `patch.TEST_PREFIX`\r\n    for choosing which methods to wrap.\r\n    \"\"\"\r\n    if type(target) is str:\r\n        getter = lambda: _importer(target)\r\n    else:\r\n        getter = lambda: target\r\n    if not kwargs:\r\n        raise ValueError(\r\n            'Must supply at least one keyword argument with patch.multiple'\r\n        )\r\n    items = list(kwargs.items())\r\n    attribute, new = items[0]\r\n    patcher = _patch(\r\n        getter, attribute, new, spec, create, spec_set,\r\n        autospec, new_callable, {}\r\n    )\r\n    patcher.attribute_name = attribute\r\n    for attribute, new in items[1:]:\r\n        this_patcher = _patch(\r\n            getter, attribute, new, spec, create, spec_set,\r\n            autospec, new_callable, {}\r\n        )\r\n        this_patcher.attribute_name = attribute\r\n        patcher.additional_patchers.append(this_patcher)\r\n    return patcher\r\ndef patch(\r\n        target, new=DEFAULT, spec=None, create=False,\r\n        spec_set=None, autospec=None, new_callable=None, **kwargs\r\n    ):\r\n    \"\"\"\r\n    `patch` acts as a function decorator, class decorator or a context\r\n    manager. Inside the body of the function or with statement, the `target`\r\n    is patched with a `new` object. When the function/with statement exits\r\n    the patch is undone.\r\n    If `new` is omitted, then the target is replaced with a\r\n    `MagicMock`. If `patch` is used as a decorator and `new` is\r\n    omitted, the created mock is passed in as an extra argument to the\r\n    decorated function. If `patch` is used as a context manager the created\r\n    mock is returned by the context manager.\r\n    `target` should be a string in the form `'package.module.ClassName'`. The\r\n    `target` is imported and the specified object replaced with the `new`\r\n    object, so the `target` must be importable from the environment you are\r\n    calling `patch` from. The target is imported when the decorated function\r\n    is executed, not at decoration time.\r\n    The `spec` and `spec_set` keyword arguments are passed to the `MagicMock`\r\n    if patch is creating one for you.\r\n    In addition you can pass `spec=True` or `spec_set=True`, which causes\r\n    patch to pass in the object being mocked as the spec/spec_set object.\r\n    `new_callable` allows you to specify a different class, or callable object,\r\n    that will be called to create the `new` object. By default `MagicMock` is\r\n    used.\r\n    A more powerful form of `spec` is `autospec`. If you set `autospec=True`\r\n    then the mock with be created with a spec from the object being replaced.\r\n    All attributes of the mock will also have the spec of the corresponding\r\n    attribute of the object being replaced. Methods and functions being\r\n    mocked will have their arguments checked and will raise a `TypeError` if\r\n    they are called with the wrong signature. For mocks replacing a class,\r\n    their return value (the 'instance') will have the same spec as the class.\r\n    Instead of `autospec=True` you can pass `autospec=some_object` to use an\r\n    arbitrary object as the spec instead of the one being replaced.\r\n    By default `patch` will fail to replace attributes that don't exist. If\r\n    you pass in `create=True`, and the attribute doesn't exist, patch will\r\n    create the attribute for you when the patched function is called, and\r\n    delete it again afterwards. This is useful for writing tests against\r\n    attributes that your production code creates at runtime. It is off by by\r\n    default because it can be dangerous. With it switched on you can write\r\n    passing tests against APIs that don't actually exist!\r\n    Patch can be used as a `TestCase` class decorator. It works by\r\n    decorating each test method in the class. This reduces the boilerplate\r\n    code when your test methods share a common patchings set. `patch` finds\r\n    tests by looking for method names that start with `patch.TEST_PREFIX`.\r\n    By default this is `test`, which matches the way `unittest` finds tests.\r\n    You can specify an alternative prefix by setting `patch.TEST_PREFIX`.\r\n    Patch can be used as a context manager, with the with statement. Here the\r\n    patching applies to the indented block after the with statement. If you\r\n    use \"as\" then the patched object will be bound to the name after the\r\n    \"as\"; very useful if `patch` is creating a mock object for you.\r\n    `patch` takes arbitrary keyword arguments. These will be passed to\r\n    the `Mock` (or `new_callable`) on construction.\r\n    `patch.dict(...)`, `patch.multiple(...)` and `patch.object(...)` are\r\n    available for alternate use-cases.\r\n    \"\"\"\r\n    getter, attribute = _get_target(target)\r\n    return _patch(\r\n        getter, attribute, new, spec, create,\r\n        spec_set, autospec, new_callable, kwargs\r\n    )\r\nclass _patch_dict(object):\r\n    \"\"\"\r\n    Patch a dictionary, or dictionary like object, and restore the dictionary\r\n    to its original state after the test.\r\n    `in_dict` can be a dictionary or a mapping like container. If it is a\r\n    mapping then it must at least support getting, setting and deleting items\r\n    plus iterating over keys.\r\n    `in_dict` can also be a string specifying the name of the dictionary, which\r\n    will then be fetched by importing it.\r\n    `values` can be a dictionary of values to set in the dictionary. `values`\r\n    can also be an iterable of `(key, value)` pairs.\r\n    If `clear` is True then the dictionary will be cleared before the new\r\n    values are set.\r\n    `patch.dict` can also be called with arbitrary keyword arguments to set\r\n    values in the dictionary::\r\n        with patch.dict('sys.modules', mymodule=Mock(), other_module=Mock()):\r\n            ...\r\n    `patch.dict` can be used as a context manager, decorator or class\r\n    decorator. When used as a class decorator `patch.dict` honours\r\n    `patch.TEST_PREFIX` for choosing which methods to wrap.\r\n    \"\"\"\r\n    def __init__(self, in_dict, values=(), clear=False, **kwargs):\r\n        if isinstance(in_dict, str):\r\n            in_dict = _importer(in_dict)\r\n        self.in_dict = in_dict\r\n        self.values = dict(values)\r\n        self.values.update(kwargs)\r\n        self.clear = clear\r\n        self._original = None\r\n    def __call__(self, f):\r\n        if isinstance(f, type):\r\n            return self.decorate_class(f)\r\n        @wraps(f)\r\n        def _inner(*args, **kw):\r\n            self._patch_dict()\r\n            try:\r\n                return f(*args, **kw)\r\n            finally:\r\n                self._unpatch_dict()\r\n        return _inner\r\n    def decorate_class(self, klass):\r\n        for attr in dir(klass):\r\n            attr_value = getattr(klass, attr)\r\n            if (attr.startswith(patch.TEST_PREFIX) and\r\n                 hasattr(attr_value, \"__call__\")):\r\n                decorator = _patch_dict(self.in_dict, self.values, self.clear)\r\n                decorated = decorator(attr_value)\r\n                setattr(klass, attr, decorated)\r\n        return klass\r\n    def __enter__(self):\r\n        \"\"\"Patch the dict.\"\"\"\r\n        self._patch_dict()\r\n    def _patch_dict(self):\r\n        values = self.values\r\n        in_dict = self.in_dict\r\n        clear = self.clear\r\n        try:\r\n            original = in_dict.copy()\r\n        except AttributeError:\r\n            original = {}\r\n            for key in in_dict:\r\n                original[key] = in_dict[key]\r\n        self._original = original\r\n        if clear:\r\n            _clear_dict(in_dict)\r\n        try:\r\n            in_dict.update(values)\r\n        except AttributeError:\r\n            for key in values:\r\n                in_dict[key] = values[key]\r\n    def _unpatch_dict(self):\r\n        in_dict = self.in_dict\r\n        original = self._original\r\n        _clear_dict(in_dict)\r\n        try:\r\n            in_dict.update(original)\r\n        except AttributeError:\r\n            for key in original:\r\n                in_dict[key] = original[key]\r\n    def __exit__(self, *args):\r\n        \"\"\"Unpatch the dict.\"\"\"\r\n        self._unpatch_dict()\r\n        return False\r\n    start = __enter__\r\n    stop = __exit__\r\ndef _clear_dict(in_dict):\r\n    try:\r\n        in_dict.clear()\r\n    except AttributeError:\r\n        keys = list(in_dict)\r\n        for key in keys:\r\n            del in_dict[key]\r\ndef _patch_stopall():\r\n    \"\"\"Stop all active patches.\"\"\"\r\n    for patch in list(_patch._active_patches):\r\n        patch.stop()\r\npatch.object = _patch_object\r\npatch.dict = _patch_dict\r\npatch.multiple = _patch_multiple\r\npatch.stopall = _patch_stopall\r\npatch.TEST_PREFIX = 'test'\r\nmagic_methods = (\r\n    \"lt le gt ge eq ne \"\r\n    \"getitem setitem delitem \"\r\n    \"len contains iter \"\r\n    \"hash str sizeof \"\r\n    \"enter exit \"\r\n    \"divmod neg pos abs invert \"\r\n    \"complex int float index \"\r\n    \"trunc floor ceil \"\r\n    \"bool next \"\r\n)\r\nnumerics = \"add sub mul div floordiv mod lshift rshift and xor or pow \"\r\ninplace = ' '.join('i%s' % n for n in numerics.split())\r\nright = ' '.join('r%s' % n for n in numerics.split())\r\n_non_defaults = set('__%s__' % method for method in [\r\n    'get', 'set', 'delete', 'reversed', 'missing', 'reduce', 'reduce_ex',\r\n    'getinitargs', 'getnewargs', 'getstate', 'setstate', 'getformat',\r\n    'setformat', 'repr', 'dir', 'subclasses', 'format',\r\n])\r\ndef _get_method(name, func):\r\n    \"Turns a callable object (like a mock) into a real function\"\r\n    def method(self, *args, **kw):\r\n        return func(self, *args, **kw)\r\n    method.__name__ = name\r\n    return method\r\n_magics = set(\r\n    '__%s__' % method for method in\r\n    ' '.join([magic_methods, numerics, inplace, right]).split()\r\n)\r\n_all_magics = _magics | _non_defaults\r\n_unsupported_magics = set([\r\n    '__getattr__', '__setattr__',\r\n    '__init__', '__new__', '__prepare__'\r\n    '__instancecheck__', '__subclasscheck__',\r\n    '__del__'\r\n])\r\n_calculate_return_value = {\r\n    '__hash__': lambda self: object.__hash__(self),\r\n    '__str__': lambda self: object.__str__(self),\r\n    '__sizeof__': lambda self: object.__sizeof__(self),\r\n}\r\n_return_values = {\r\n    '__lt__': NotImplemented,\r\n    '__gt__': NotImplemented,\r\n    '__le__': NotImplemented,\r\n    '__ge__': NotImplemented,\r\n    '__int__': 1,\r\n    '__contains__': False,\r\n    '__len__': 0,\r\n    '__exit__': False,\r\n    '__complex__': 1j,\r\n    '__float__': 1.0,\r\n    '__bool__': True,\r\n    '__index__': 1,\r\n}\r\ndef _get_eq(self):\r\n    def __eq__(other):\r\n        ret_val = self.__eq__._mock_return_value\r\n        if ret_val is not DEFAULT:\r\n            return ret_val\r\n        return self is other\r\n    return __eq__\r\ndef _get_ne(self):\r\n    def __ne__(other):\r\n        if self.__ne__._mock_return_value is not DEFAULT:\r\n            return DEFAULT\r\n        return self is not other\r\n    return __ne__\r\ndef _get_iter(self):\r\n    def __iter__():\r\n        ret_val = self.__iter__._mock_return_value\r\n        if ret_val is DEFAULT:\r\n            return iter([])\r\n        return iter(ret_val)\r\n    return __iter__\r\n_side_effect_methods = {\r\n    '__eq__': _get_eq,\r\n    '__ne__': _get_ne,\r\n    '__iter__': _get_iter,\r\n}\r\ndef _set_return_value(mock, method, name):\r\n    fixed = _return_values.get(name, DEFAULT)\r\n    if fixed is not DEFAULT:\r\n        method.return_value = fixed\r\n        return\r\n    return_calulator = _calculate_return_value.get(name)\r\n    if return_calulator is not None:\r\n        try:\r\n            return_value = return_calulator(mock)\r\n        except AttributeError:\r\n            return_value = AttributeError(name)\r\n        method.return_value = return_value\r\n        return\r\n    side_effector = _side_effect_methods.get(name)\r\n    if side_effector is not None:\r\n        method.side_effect = side_effector(mock)\r\nclass MagicMixin(object):\r\n    def __init__(self, *args, **kw):\r\n        _safe_super(MagicMixin, self).__init__(*args, **kw)\r\n        self._mock_set_magics()\r\n    def _mock_set_magics(self):\r\n        these_magics = _magics\r\n        if self._mock_methods is not None:\r\n            these_magics = _magics.intersection(self._mock_methods)\r\n            remove_magics = set()\r\n            remove_magics = _magics - these_magics\r\n            for entry in remove_magics:\r\n                if entry in type(self).__dict__:\r\n                    delattr(self, entry)\r\n        these_magics = these_magics - set(type(self).__dict__)\r\n        _type = type(self)\r\n        for entry in these_magics:\r\n            setattr(_type, entry, MagicProxy(entry, self))\r\nclass NonCallableMagicMock(MagicMixin, NonCallableMock):\r\n    \"\"\"A version of `MagicMock` that isn't callable.\"\"\"\r\n    def mock_add_spec(self, spec, spec_set=False):\r\n        \"\"\"Add a spec to a mock. `spec` can either be an object or a\r\n        list of strings. Only attributes on the `spec` can be fetched as\r\n        attributes from the mock.\r\n        If `spec_set` is True then only attributes on the spec can be set.\"\"\"\r\n        self._mock_add_spec(spec, spec_set)\r\n        self._mock_set_magics()\r\nclass MagicMock(MagicMixin, Mock):\r\n    \"\"\"\r\n    MagicMock is a subclass of Mock with default implementations\r\n    of most of the magic methods. You can use MagicMock without having to\r\n    configure the magic methods yourself.\r\n    If you use the `spec` or `spec_set` arguments then *only* magic\r\n    methods that exist in the spec will be created.\r\n    Attributes and the return value of a `MagicMock` will also be `MagicMocks`.\r\n    \"\"\"\r\n    def mock_add_spec(self, spec, spec_set=False):\r\n        \"\"\"Add a spec to a mock. `spec` can either be an object or a\r\n        list of strings. Only attributes on the `spec` can be fetched as\r\n        attributes from the mock.\r\n        If `spec_set` is True then only attributes on the spec can be set.\"\"\"\r\n        self._mock_add_spec(spec, spec_set)\r\n        self._mock_set_magics()\r\nclass MagicProxy(object):\r\n    def __init__(self, name, parent):\r\n        self.name = name\r\n        self.parent = parent\r\n    def __call__(self, *args, **kwargs):\r\n        m = self.create_mock()\r\n        return m(*args, **kwargs)\r\n    def create_mock(self):\r\n        entry = self.name\r\n        parent = self.parent\r\n        m = parent._get_child_mock(name=entry, _new_name=entry,\r\n                                   _new_parent=parent)\r\n        setattr(parent, entry, m)\r\n        _set_return_value(parent, m, entry)\r\n        return m\r\n    def __get__(self, obj, _type=None):\r\n        return self.create_mock()\r\nclass _ANY(object):\r\n    \"A helper object that compares equal to everything.\"\r\n    def __eq__(self, other):\r\n        return True\r\n    def __ne__(self, other):\r\n        return False\r\n    def __repr__(self):\r\n        return '<ANY>'\r\nANY = _ANY()\r\ndef _format_call_signature(name, args, kwargs):\r\n    message = '%s(%%s)' % name\r\n    formatted_args = ''\r\n    args_string = ', '.join([repr(arg) for arg in args])\r\n    kwargs_string = ', '.join([\r\n        '%s=%r' % (key, value) for key, value in kwargs.items()\r\n    ])\r\n    if args_string:\r\n        formatted_args = args_string\r\n    if kwargs_string:\r\n        if formatted_args:\r\n            formatted_args += ', '\r\n        formatted_args += kwargs_string\r\n    return message % formatted_args\r\nclass _Call(tuple):\r\n    \"\"\"\r\n    A tuple for holding the results of a call to a mock, either in the form\r\n    `(args, kwargs)` or `(name, args, kwargs)`.\r\n    If args or kwargs are empty then a call tuple will compare equal to\r\n    a tuple without those values. This makes comparisons less verbose::\r\n        _Call(('name', (), {})) == ('name',)\r\n        _Call(('name', (1,), {})) == ('name', (1,))\r\n        _Call(((), {'a': 'b'})) == ({'a': 'b'},)\r\n    The `_Call` object provides a useful shortcut for comparing with call::\r\n        _Call(((1, 2), {'a': 3})) == call(1, 2, a=3)\r\n        _Call(('foo', (1, 2), {'a': 3})) == call.foo(1, 2, a=3)\r\n    If the _Call has no name then it will match any name.\r\n    \"\"\"\r\n    def __new__(cls, value=(), name=None, parent=None, two=False,\r\n                from_kall=True):\r\n        name = ''\r\n        args = ()\r\n        kwargs = {}\r\n        _len = len(value)\r\n        if _len == 3:\r\n            name, args, kwargs = value\r\n        elif _len == 2:\r\n            first, second = value\r\n            if isinstance(first, str):\r\n                name = first\r\n                if isinstance(second, tuple):\r\n                    args = second\r\n                else:\r\n                    kwargs = second\r\n            else:\r\n                args, kwargs = first, second\r\n        elif _len == 1:\r\n            value, = value\r\n            if isinstance(value, str):\r\n                name = value\r\n            elif isinstance(value, tuple):\r\n                args = value\r\n            else:\r\n                kwargs = value\r\n        if two:\r\n            return tuple.__new__(cls, (args, kwargs))\r\n        return tuple.__new__(cls, (name, args, kwargs))\r\n    def __init__(self, value=(), name=None, parent=None, two=False,\r\n                 from_kall=True):\r\n        self.name = name\r\n        self.parent = parent\r\n        self.from_kall = from_kall\r\n    def __eq__(self, other):\r\n        if other is ANY:\r\n            return True\r\n        try:\r\n            len_other = len(other)\r\n        except TypeError:\r\n            return False\r\n        self_name = ''\r\n        if len(self) == 2:\r\n            self_args, self_kwargs = self\r\n        else:\r\n            self_name, self_args, self_kwargs = self\r\n        other_name = ''\r\n        if len_other == 0:\r\n            other_args, other_kwargs = (), {}\r\n        elif len_other == 3:\r\n            other_name, other_args, other_kwargs = other\r\n        elif len_other == 1:\r\n            value, = other\r\n            if isinstance(value, tuple):\r\n                other_args = value\r\n                other_kwargs = {}\r\n            elif isinstance(value, str):\r\n                other_name = value\r\n                other_args, other_kwargs = (), {}\r\n            else:\r\n                other_args = ()\r\n                other_kwargs = value\r\n        else:\r\n            first, second = other\r\n            if isinstance(first, str):\r\n                other_name = first\r\n                if isinstance(second, tuple):\r\n                    other_args, other_kwargs = second, {}\r\n                else:\r\n                    other_args, other_kwargs = (), second\r\n            else:\r\n                other_args, other_kwargs = first, second\r\n        if self_name and other_name != self_name:\r\n            return False\r\n        return (other_args, other_kwargs) == (self_args, self_kwargs)\r\n    def __ne__(self, other):\r\n        return not self.__eq__(other)\r\n    def __call__(self, *args, **kwargs):\r\n        if self.name is None:\r\n            return _Call(('', args, kwargs), name='()')\r\n        name = self.name + '()'\r\n        return _Call((self.name, args, kwargs), name=name, parent=self)\r\n    def __getattr__(self, attr):\r\n        if self.name is None:\r\n            return _Call(name=attr, from_kall=False)\r\n        name = '%s.%s' % (self.name, attr)\r\n        return _Call(name=name, parent=self, from_kall=False)\r\n    def __repr__(self):\r\n        if not self.from_kall:\r\n            name = self.name or 'call'\r\n            if name.startswith('()'):\r\n                name = 'call%s' % name\r\n            return name\r\n        if len(self) == 2:\r\n            name = 'call'\r\n            args, kwargs = self\r\n        else:\r\n            name, args, kwargs = self\r\n            if not name:\r\n                name = 'call'\r\n            elif not name.startswith('()'):\r\n                name = 'call.%s' % name\r\n            else:\r\n                name = 'call%s' % name\r\n        return _format_call_signature(name, args, kwargs)\r\n    def call_list(self):\r\n        \"\"\"For a call object that represents multiple calls, `call_list`\r\n        returns a list of all the intermediate calls as well as the\r\n        final call.\"\"\"\r\n        vals = []\r\n        thing = self\r\n        while thing is not None:\r\n            if thing.from_kall:\r\n                vals.append(thing)\r\n            thing = thing.parent\r\n        return _CallList(reversed(vals))\r\ncall = _Call(from_kall=False)\r\ndef create_autospec(spec, spec_set=False, instance=False, _parent=None,\r\n                    _name=None, **kwargs):\r\n    \"\"\"Create a mock object using another object as a spec. Attributes on the\r\n    mock will use the corresponding attribute on the `spec` object as their\r\n    spec.\r\n    Functions or methods being mocked will have their arguments checked\r\n    to check that they are called with the correct signature.\r\n    If `spec_set` is True then attempting to set attributes that don't exist\r\n    on the spec object will raise an `AttributeError`.\r\n    If a class is used as a spec then the return value of the mock (the\r\n    instance of the class) will have the same spec. You can use a class as the\r\n    spec for an instance object by passing `instance=True`. The returned mock\r\n    will only be callable if instances of the mock are callable.\r\n    `create_autospec` also takes arbitrary keyword arguments that are passed to\r\n    the constructor of the created mock.\"\"\"\r\n    if _is_list(spec):\r\n        spec = type(spec)\r\n    is_type = isinstance(spec, type)\r\n    _kwargs = {'spec': spec}\r\n    if spec_set:\r\n        _kwargs = {'spec_set': spec}\r\n    elif spec is None:\r\n        _kwargs = {}\r\n    _kwargs.update(kwargs)\r\n    Klass = MagicMock\r\n    if type(spec) in DescriptorTypes:\r\n        _kwargs = {}\r\n    elif not _callable(spec):\r\n        Klass = NonCallableMagicMock\r\n    elif is_type and instance and not _instance_callable(spec):\r\n        Klass = NonCallableMagicMock\r\n    _new_name = _name\r\n    if _parent is None:\r\n        _new_name = ''\r\n    mock = Klass(parent=_parent, _new_parent=_parent, _new_name=_new_name,\r\n                 name=_name, **_kwargs)\r\n    if isinstance(spec, FunctionTypes):\r\n        mock = _set_signature(mock, spec)\r\n    else:\r\n        _check_signature(spec, mock, is_type, instance)\r\n    if _parent is not None and not instance:\r\n        _parent._mock_children[_name] = mock\r\n    if is_type and not instance and 'return_value' not in kwargs:\r\n        mock.return_value = create_autospec(spec, spec_set, instance=True,\r\n                                            _name='()', _parent=mock)\r\n    for entry in dir(spec):\r\n        if _is_magic(entry):\r\n            continue\r\n        try:\r\n            original = getattr(spec, entry)\r\n        except AttributeError:\r\n            continue\r\n        kwargs = {'spec': original}\r\n        if spec_set:\r\n            kwargs = {'spec_set': original}\r\n        if not isinstance(original, FunctionTypes):\r\n            new = _SpecState(original, spec_set, mock, entry, instance)\r\n            mock._mock_children[entry] = new\r\n        else:\r\n            parent = mock\r\n            if isinstance(spec, FunctionTypes):\r\n                parent = mock.mock\r\n            new = MagicMock(parent=parent, name=entry, _new_name=entry,\r\n                            _new_parent=parent, **kwargs)\r\n            mock._mock_children[entry] = new\r\n            skipfirst = _must_skip(spec, entry, is_type)\r\n            _check_signature(original, new, skipfirst=skipfirst)\r\n        if isinstance(new, FunctionTypes):\r\n            setattr(mock, entry, new)\r\n    return mock\r\ndef _must_skip(spec, entry, is_type):\r\n    if not isinstance(spec, type):\r\n        if entry in getattr(spec, '__dict__', {}):\r\n            return False\r\n        spec = spec.__class__\r\n    for klass in spec.__mro__:\r\n        result = klass.__dict__.get(entry, DEFAULT)\r\n        if result is DEFAULT:\r\n            continue\r\n        if isinstance(result, (staticmethod, classmethod)):\r\n            return False\r\n        return is_type\r\n    return is_type\r\ndef _get_class(obj):\r\n    try:\r\n        return obj.__class__\r\n    except AttributeError:\r\n        return type(obj)\r\nclass _SpecState(object):\r\n    def __init__(self, spec, spec_set=False, parent=None,\r\n                 name=None, ids=None, instance=False):\r\n        self.spec = spec\r\n        self.ids = ids\r\n        self.spec_set = spec_set\r\n        self.parent = parent\r\n        self.instance = instance\r\n        self.name = name\r\nFunctionTypes = (\r\n    type(create_autospec),\r\n    type(ANY.__eq__),\r\n)\r\nfile_spec = None\r\ndef mock_open(mock=None, read_data=''):\r\n    \"\"\"\r\n    A helper function to create a mock to replace the use of `open`. It works\r\n    for `open` called directly or used as a context manager.\r\n    The `mock` argument is the mock object to configure. If `None` (the\r\n    default) then a `MagicMock` will be created for you, with the API limited\r\n    to methods or attributes available on standard file handles.\r\n    `read_data` is a string for the `read` method of the file handle to return.\r\n    This is an empty string by default.\r\n    \"\"\"\r\n    global file_spec\r\n    if file_spec is None:\r\n        import _io\r\n        file_spec = list(set(dir(_io.TextIOWrapper)).union(set(dir(_io.BytesIO))))\r\n    if mock is None:\r\n        mock = MagicMock(name='open', spec=open)\r\n    handle = MagicMock(spec=file_spec)\r\n    handle.write.return_value = None\r\n    handle.__enter__.return_value = handle\r\n    handle.read.return_value = read_data\r\n    mock.return_value = handle\r\n    return mock\r\nclass PropertyMock(Mock):\r\n    \"\"\"\r\n    A mock intended to be used as a property, or other descriptor, on a class.\r\n    `PropertyMock` provides `__get__` and `__set__` methods so you can specify\r\n    a return value when it is fetched.\r\n    Fetching a `PropertyMock` instance from an object calls the mock, with\r\n    no args. Setting it calls the mock with the value being set.\r\n    \"\"\"\r\n    def _get_child_mock(self, **kwargs):\r\n        return MagicMock(**kwargs)\r\n    def __get__(self, obj, obj_type):\r\n        return self()\r\n    def __set__(self, obj, val):\r\n        self(val)\r\n", "/Lib/atexit.py": "\"\"\"allow programmer to define multiple exit functions to be executedupon normal program termination.\nTwo public functions, register and unregister, are defined.\n\"\"\"\nclass __loader__(object):\n    pass\ndef _clear(*args,**kw):\n    \"\"\"_clear() -> None    \n    Clear the list of previously registered exit functions.\"\"\"\n    pass\ndef _run_exitfuncs(*args,**kw):\n    \"\"\"_run_exitfuncs() -> None    \n    Run all registered exit functions.\"\"\"\n    pass\ndef register(*args,**kw):\n    \"\"\"register(func, *args, **kwargs) -> func    \n    Register a function to be executed upon normal program termination\n        func - function to be called at exit\n        args - optional arguments to pass to func\n        kwargs - optional keyword arguments to pass to func\n        func is returned to facilitate usage as a decorator.\"\"\"\n    pass\ndef unregister(*args,**kw):\n    \"\"\"unregister(func) -> None    \n    Unregister a exit function which was previously registered using\n    atexit.register\n        func - function to be unregistered\"\"\"\n    pass\n", "/Lib/_socket.py": "\"\"\"Implementation module for socket operations.\nSee the socket module for documentation.\"\"\"\nAF_APPLETALK = 16\nAF_DECnet = 12\nAF_INET = 2\nAF_INET6 = 23\nAF_IPX = 6\nAF_IRDA = 26\nAF_SNA = 11\nAF_UNSPEC = 0\nAI_ADDRCONFIG = 1024\nAI_ALL = 256\nAI_CANONNAME = 2\nAI_NUMERICHOST = 4\nAI_NUMERICSERV = 8\nAI_PASSIVE = 1\nAI_V4MAPPED = 2048\nCAPI = '<capsule object \"_socket.CAPI\" at 0x00BC4F38>'\nEAI_AGAIN = 11002\nEAI_BADFLAGS = 10022\nEAI_FAIL = 11003\nEAI_FAMILY = 10047\nEAI_MEMORY = 8\nEAI_NODATA = 11001\nEAI_NONAME = 11001\nEAI_SERVICE = 10109\nEAI_SOCKTYPE = 10044\nINADDR_ALLHOSTS_GROUP = -536870911\nINADDR_ANY = 0\nINADDR_BROADCAST = -1\nINADDR_LOOPBACK = 2130706433\nINADDR_MAX_LOCAL_GROUP = -536870657\nINADDR_NONE = -1\nINADDR_UNSPEC_GROUP = -536870912\nIPPORT_RESERVED = 1024\nIPPORT_USERRESERVED = 5000\nIPPROTO_ICMP = 1\nIPPROTO_IP = 0\nIPPROTO_RAW = 255\nIPPROTO_TCP = 6\nIPPROTO_UDP = 17\nIPV6_CHECKSUM = 26\nIPV6_DONTFRAG = 14\nIPV6_HOPLIMIT = 21\nIPV6_HOPOPTS = 1\nIPV6_JOIN_GROUP = 12\nIPV6_LEAVE_GROUP = 13\nIPV6_MULTICAST_HOPS = 10\nIPV6_MULTICAST_IF = 9\nIPV6_MULTICAST_LOOP = 11\nIPV6_PKTINFO = 19\nIPV6_RECVRTHDR = 38\nIPV6_RECVTCLASS = 40\nIPV6_RTHDR = 32\nIPV6_TCLASS = 39\nIPV6_UNICAST_HOPS = 4\nIPV6_V6ONLY = 27\nIP_ADD_MEMBERSHIP = 12\nIP_DROP_MEMBERSHIP = 13\nIP_HDRINCL = 2\nIP_MULTICAST_IF = 9\nIP_MULTICAST_LOOP = 11\nIP_MULTICAST_TTL = 10\nIP_OPTIONS = 1\nIP_RECVDSTADDR = 25\nIP_TOS = 3\nIP_TTL = 4\nMSG_BCAST = 1024\nMSG_CTRUNC = 512\nMSG_DONTROUTE = 4\nMSG_MCAST = 2048\nMSG_OOB = 1\nMSG_PEEK = 2\nMSG_TRUNC = 256\nNI_DGRAM = 16\nNI_MAXHOST = 1025\nNI_MAXSERV = 32\nNI_NAMEREQD = 4\nNI_NOFQDN = 1\nNI_NUMERICHOST = 2\nNI_NUMERICSERV = 8\nRCVALL_MAX = 3\nRCVALL_OFF = 0\nRCVALL_ON = 1\nRCVALL_SOCKETLEVELONLY = 2\nSHUT_RD = 0\nSHUT_RDWR = 2\nSHUT_WR = 1\nSIO_KEEPALIVE_VALS = 2550136836\nSIO_RCVALL = 2550136833\nSOCK_DGRAM = 2\nSOCK_RAW = 3\nSOCK_RDM = 4\nSOCK_SEQPACKET = 5\nSOCK_STREAM = 1\nSOL_IP = 0\nSOL_SOCKET = 65535\nSOL_TCP = 6\nSOL_UDP = 17\nSOMAXCONN = 2147483647\nSO_ACCEPTCONN = 2\nSO_BROADCAST = 32\nSO_DEBUG = 1\nSO_DONTROUTE = 16\nSO_ERROR = 4103\nSO_EXCLUSIVEADDRUSE = -5\nSO_KEEPALIVE = 8\nSO_LINGER = 128\nSO_OOBINLINE = 256\nSO_RCVBUF = 4098\nSO_RCVLOWAT = 4100\nSO_RCVTIMEO = 4102\nSO_REUSEADDR = 4\nSO_SNDBUF = 4097\nSO_SNDLOWAT = 4099\nSO_SNDTIMEO = 4101\nSO_TYPE = 4104\nSO_USELOOPBACK = 64\nclass SocketType:\n    pass\nTCP_MAXSEG = 4\nTCP_NODELAY = 1\n__loader__ = '<_frozen_importlib.ExtensionFileLoader object at 0x00CA2D90>'\ndef dup(*args,**kw):\n    \"\"\"dup(integer) -> integer    \n    Duplicate an integer socket file descriptor.  This is like os.dup(), but for\n    sockets; on some platforms os.dup() won't work for socket file descriptors.\"\"\"\n    pass\nclass error:\n    pass\nclass gaierror:\n    pass\ndef getaddrinfo(*args,**kw):\n    \"\"\"getaddrinfo(host, port [, family, socktype, proto, flags])        -> list of (family, socktype, proto, canonname, sockaddr)\n    Resolve host and port into addrinfo struct.\"\"\"\n    pass\ndef getdefaulttimeout(*args,**kw):\n    \"\"\"getdefaulttimeout() -> timeout    \n    Returns the default timeout in seconds (float) for new socket objects.\n    A value of None indicates that new socket objects have no timeout.\n    When the socket module is first imported, the default is None.\"\"\"\n    pass\ndef gethostbyaddr(*args,**kw):\n    \"\"\"gethostbyaddr(host) -> (name, aliaslist, addresslist)    \n    Return the true host name, a list of aliases, and a list of IP addresses,\n    for a host.  The host argument is a string giving a host name or IP number.\"\"\"\n    pass\ndef gethostbyname(*args,**kw):\n    \"\"\"gethostbyname(host) -> address    \n    Return the IP address (a string of the form '255.255.255.255') for a host.\"\"\"\n    pass\ndef gethostbyname_ex(*args,**kw):\n    \"\"\"gethostbyname_ex(host) -> (name, aliaslist, addresslist)    \n    Return the true host name, a list of aliases, and a list of IP addresses,\n    for a host.  The host argument is a string giving a host name or IP number.\"\"\"\n    pass\ndef gethostname(*args,**kw):\n    \"\"\"gethostname() -> string    \n    Return the current host name.\"\"\"\n    pass\ndef getnameinfo(*args,**kw):\n    \"\"\"getnameinfo(sockaddr, flags) --> (host, port)    \n    Get host and port for a sockaddr.\"\"\"\n    pass\ndef getprotobyname(*args,**kw):\n    \"\"\"getprotobyname(name) -> integer    \n    Return the protocol number for the named protocol.  (Rarely used.)\"\"\"\n    pass\ndef getservbyname(*args,**kw):\n    \"\"\"getservbyname(servicename[, protocolname]) -> integer    \n    Return a port number from a service name and protocol name.\n    The optional protocol name, if given, should be 'tcp' or 'udp',\n    otherwise any protocol will match.\"\"\"\n    pass\ndef getservbyport(*args,**kw):\n    \"\"\"getservbyport(port[, protocolname]) -> string    \n    Return the service name from a port number and protocol name.\n    The optional protocol name, if given, should be 'tcp' or 'udp',\n    otherwise any protocol will match.\"\"\"\n    pass\nhas_ipv6 = True\nclass herror:\n    pass\ndef htonl(*args,**kw):\n    \"\"\"htonl(integer) -> integer    \n    Convert a 32-bit integer from host to network byte order.\"\"\"\n    pass\ndef htons(*args,**kw):\n    \"\"\"htons(integer) -> integer    \n    Convert a 16-bit integer from host to network byte order.\"\"\"\n    pass\ndef inet_aton(*args,**kw):\n    \"\"\"inet_aton(string) -> bytes giving packed 32-bit IP representation    \n    Convert an IP address in string format (123.45.67.89) to the 32-bit packed\n    binary format used in low-level network functions.\"\"\"\n    pass\ndef inet_ntoa(*args,**kw):\n    \"\"\"inet_ntoa(packed_ip) -> ip_address_string    \n    Convert an IP address from 32-bit packed binary format to string format\"\"\"\n    pass\ndef ntohl(*args,**kw):\n    \"\"\"ntohl(integer) -> integer    \n    Convert a 32-bit integer from network to host byte order.\"\"\"\n    pass\ndef ntohs(*args,**kw):\n    \"\"\"ntohs(integer) -> integer    \n    Convert a 16-bit integer from network to host byte order.\"\"\"\n    pass\ndef setdefaulttimeout(*args,**kw):\n    \"\"\"setdefaulttimeout(timeout)    \n    Set the default timeout in seconds (float) for new socket objects.\n    A value of None indicates that new socket objects have no timeout.\n    When the socket module is first imported, the default is None.\"\"\"\n    pass\nclass socket:\n    def __init__(self,*args,**kw):\n        pass\n    def bind(self,*args,**kw):\n        pass\n    def close(self):\n        pass\nclass timeout:\n    pass\n", "/Lib/unittest/test/test_break.py": "import gc\r\nimport io\r\nimport os\r\nimport sys\r\nimport signal\r\nimport weakref\r\nimport unittest\r\n@unittest.skipUnless(hasattr(os, 'kill'), \"Test requires os.kill\")\r\n@unittest.skipIf(sys.platform ==\"win32\", \"Test cannot run on Windows\")\r\n@unittest.skipIf(sys.platform == 'freebsd6', \"Test kills regrtest on freebsd6 \"\r\n    \"if threads have been used\")\r\nclass TestBreak(unittest.TestCase):\r\n    def setUp(self):\r\n        self._default_handler = signal.getsignal(signal.SIGINT)\r\n    def tearDown(self):\r\n        signal.signal(signal.SIGINT, self._default_handler)\r\n        unittest.signals._results = weakref.WeakKeyDictionary()\r\n        unittest.signals._interrupt_handler = None\r\n    def testInstallHandler(self):\r\n        default_handler = signal.getsignal(signal.SIGINT)\r\n        unittest.installHandler()\r\n        self.assertNotEqual(signal.getsignal(signal.SIGINT), default_handler)\r\n        try:\r\n            pid = os.getpid()\r\n            os.kill(pid, signal.SIGINT)\r\n        except KeyboardInterrupt:\r\n            self.fail(\"KeyboardInterrupt not handled\")\r\n        self.assertTrue(unittest.signals._interrupt_handler.called)\r\n    def testRegisterResult(self):\r\n        result = unittest.TestResult()\r\n        unittest.registerResult(result)\r\n        for ref in unittest.signals._results:\r\n            if ref is result:\r\n                break\r\n            elif ref is not result:\r\n                self.fail(\"odd object in result set\")\r\n        else:\r\n            self.fail(\"result not found\")\r\n    def testInterruptCaught(self):\r\n        default_handler = signal.getsignal(signal.SIGINT)\r\n        result = unittest.TestResult()\r\n        unittest.installHandler()\r\n        unittest.registerResult(result)\r\n        self.assertNotEqual(signal.getsignal(signal.SIGINT), default_handler)\r\n        def test(result):\r\n            pid = os.getpid()\r\n            os.kill(pid, signal.SIGINT)\r\n            result.breakCaught = True\r\n            self.assertTrue(result.shouldStop)\r\n        try:\r\n            test(result)\r\n        except KeyboardInterrupt:\r\n            self.fail(\"KeyboardInterrupt not handled\")\r\n        self.assertTrue(result.breakCaught)\r\n    def testSecondInterrupt(self):\r\n        result = unittest.TestResult()\r\n        unittest.installHandler()\r\n        unittest.registerResult(result)\r\n        def test(result):\r\n            pid = os.getpid()\r\n            os.kill(pid, signal.SIGINT)\r\n            result.breakCaught = True\r\n            self.assertTrue(result.shouldStop)\r\n            os.kill(pid, signal.SIGINT)\r\n            self.fail(\"Second KeyboardInterrupt not raised\")\r\n        try:\r\n            test(result)\r\n        except KeyboardInterrupt:\r\n            pass\r\n        else:\r\n            self.fail(\"Second KeyboardInterrupt not raised\")\r\n        self.assertTrue(result.breakCaught)\r\n    def testTwoResults(self):\r\n        unittest.installHandler()\r\n        result = unittest.TestResult()\r\n        unittest.registerResult(result)\r\n        new_handler = signal.getsignal(signal.SIGINT)\r\n        result2 = unittest.TestResult()\r\n        unittest.registerResult(result2)\r\n        self.assertEqual(signal.getsignal(signal.SIGINT), new_handler)\r\n        result3 = unittest.TestResult()\r\n        def test(result):\r\n            pid = os.getpid()\r\n            os.kill(pid, signal.SIGINT)\r\n        try:\r\n            test(result)\r\n        except KeyboardInterrupt:\r\n            self.fail(\"KeyboardInterrupt not handled\")\r\n        self.assertTrue(result.shouldStop)\r\n        self.assertTrue(result2.shouldStop)\r\n        self.assertFalse(result3.shouldStop)\r\n    def testHandlerReplacedButCalled(self):\r\n        unittest.installHandler()\r\n        handler = signal.getsignal(signal.SIGINT)\r\n        def new_handler(frame, signum):\r\n            handler(frame, signum)\r\n        signal.signal(signal.SIGINT, new_handler)\r\n        try:\r\n            pid = os.getpid()\r\n            os.kill(pid, signal.SIGINT)\r\n        except KeyboardInterrupt:\r\n            pass\r\n        else:\r\n            self.fail(\"replaced but delegated handler doesn't raise interrupt\")\r\n    def testRunner(self):\r\n        runner = unittest.TextTestRunner(stream=io.StringIO())\r\n        result = runner.run(unittest.TestSuite())\r\n        self.assertIn(result, unittest.signals._results)\r\n    def testWeakReferences(self):\r\n        result = unittest.TestResult()\r\n        unittest.registerResult(result)\r\n        ref = weakref.ref(result)\r\n        del result\r\n        gc.collect();gc.collect()\r\n        self.assertIsNone(ref())\r\n    def testRemoveResult(self):\r\n        result = unittest.TestResult()\r\n        unittest.registerResult(result)\r\n        unittest.installHandler()\r\n        self.assertTrue(unittest.removeResult(result))\r\n        self.assertFalse(unittest.removeResult(unittest.TestResult()))\r\n        try:\r\n            pid = os.getpid()\r\n            os.kill(pid, signal.SIGINT)\r\n        except KeyboardInterrupt:\r\n            pass\r\n        self.assertFalse(result.shouldStop)\r\n    def testMainInstallsHandler(self):\r\n        failfast = object()\r\n        test = object()\r\n        verbosity = object()\r\n        result = object()\r\n        default_handler = signal.getsignal(signal.SIGINT)\r\n        class FakeRunner(object):\r\n            initArgs = []\r\n            runArgs = []\r\n            def __init__(self, *args, **kwargs):\r\n                self.initArgs.append((args, kwargs))\r\n            def run(self, test):\r\n                self.runArgs.append(test)\r\n                return result\r\n        class Program(unittest.TestProgram):\r\n            def __init__(self, catchbreak):\r\n                self.exit = False\r\n                self.verbosity = verbosity\r\n                self.failfast = failfast\r\n                self.catchbreak = catchbreak\r\n                self.testRunner = FakeRunner\r\n                self.test = test\r\n                self.result = None\r\n        p = Program(False)\r\n        p.runTests()\r\n        self.assertEqual(FakeRunner.initArgs, [((), {'buffer': None,\r\n                                                     'verbosity': verbosity,\r\n                                                     'failfast': failfast,\r\n                                                     'warnings': None})])\r\n        self.assertEqual(FakeRunner.runArgs, [test])\r\n        self.assertEqual(p.result, result)\r\n        self.assertEqual(signal.getsignal(signal.SIGINT), default_handler)\r\n        FakeRunner.initArgs = []\r\n        FakeRunner.runArgs = []\r\n        p = Program(True)\r\n        p.runTests()\r\n        self.assertEqual(FakeRunner.initArgs, [((), {'buffer': None,\r\n                                                     'verbosity': verbosity,\r\n                                                     'failfast': failfast,\r\n                                                     'warnings': None})])\r\n        self.assertEqual(FakeRunner.runArgs, [test])\r\n        self.assertEqual(p.result, result)\r\n        self.assertNotEqual(signal.getsignal(signal.SIGINT), default_handler)\r\n    def testRemoveHandler(self):\r\n        default_handler = signal.getsignal(signal.SIGINT)\r\n        unittest.installHandler()\r\n        unittest.removeHandler()\r\n        self.assertEqual(signal.getsignal(signal.SIGINT), default_handler)\r\n        unittest.removeHandler()\r\n        self.assertEqual(signal.getsignal(signal.SIGINT), default_handler)\r\n    def testRemoveHandlerAsDecorator(self):\r\n        default_handler = signal.getsignal(signal.SIGINT)\r\n        unittest.installHandler()\r\n        @unittest.removeHandler\r\n        def test():\r\n            self.assertEqual(signal.getsignal(signal.SIGINT), default_handler)\r\n        test()\r\n        self.assertNotEqual(signal.getsignal(signal.SIGINT), default_handler)\r\n", "/Lib/_testcapi.py": "CHAR_MAX = 127\nCHAR_MIN = -128\nDBL_MAX = 1.7976931348623157e+308\nDBL_MIN = 2.2250738585072014e-308\nFLT_MAX = 3.4028234663852886e+38\nFLT_MIN = 1.1754943508222875e-38\nINT_MAX = 2147483647\nINT_MIN = -2147483648\nLLONG_MAX = 9223372036854775807\nLLONG_MIN = -9223372036854775808\nLONG_MAX = 2147483647\nLONG_MIN = -2147483648\nPY_SSIZE_T_MAX = 2147483647\nPY_SSIZE_T_MIN = -2147483648\nSHRT_MAX = 32767\nSHRT_MIN = -32768\nSIZEOF_PYGC_HEAD = 16\nUCHAR_MAX = 255\nUINT_MAX = 4294967295\nULLONG_MAX = 18446744073709551615\nULONG_MAX = 4294967295\nUSHRT_MAX = 65535\n__loader__ = \"<_frozen_importlib.ExtensionFileLoader object at 0x00C98DD0>\"\ndef _pending_threadfunc(*args,**kw):\n    pass\nclass _test_structmembersType(object):\n    pass\ndef _test_thread_state(*args,**kw):\n    pass\ndef argparsing(*args,**kw):\n    pass\ndef code_newempty(*args,**kw):\n    pass\ndef codec_incrementaldecoder(*args,**kw):\n    pass\ndef codec_incrementalencoder(*args,**kw):\n    pass\ndef crash_no_current_thread(*args,**kw):\n    pass\nclass error(Exception):\n    pass\ndef exception_print(*args,**kw):\n    pass\ndef getargs_B(*args,**kw):\n    pass\ndef getargs_H(*args,**kw):\n    pass\ndef getargs_I(*args,**kw):\n    pass\ndef getargs_K(*args,**kw):\n    pass\ndef getargs_L(*args,**kw):\n    pass\ndef getargs_Z(*args,**kw):\n    pass\ndef getargs_Z_hash(*args,**kw):\n    pass\ndef getargs_b(*args,**kw):\n    pass\ndef getargs_c(*args,**kw):\n    pass\ndef getargs_h(*args,**kw):\n    pass\ndef getargs_i(*args,**kw):\n    pass\ndef getargs_k(*args,**kw):\n    pass\ndef getargs_keyword_only(*args,**kw):\n    pass\ndef getargs_keywords(*args,**kw):\n    pass\ndef getargs_l(*args,**kw):\n    pass\ndef getargs_n(*args,**kw):\n    pass\ndef getargs_p(*args,**kw):\n    pass\ndef getargs_s(*args,**kw):\n    pass\ndef getargs_s_hash(*args,**kw):\n    pass\ndef getargs_s_star(*args,**kw):\n    pass\ndef getargs_tuple(*args,**kw):\n    pass\ndef getargs_u(*args,**kw):\n    pass\ndef getargs_u_hash(*args,**kw):\n    pass\ndef getargs_w_star(*args,**kw):\n    pass\ndef getargs_y(*args,**kw):\n    pass\ndef getargs_y_hash(*args,**kw):\n    pass\ndef getargs_y_star(*args,**kw):\n    pass\ndef getargs_z(*args,**kw):\n    pass\ndef getargs_z_hash(*args,**kw):\n    pass\ndef getargs_z_star(*args,**kw):\n    pass\nclass instancemethod(object):\n    pass\ndef make_exception_with_doc(*args,**kw):\n    pass\ndef make_memoryview_from_NULL_pointer(*args,**kw):\n    pass\ndef parse_tuple_and_keywords(*args,**kw):\n    pass\ndef pytime_object_to_time_t(*args,**kw):\n    pass\ndef pytime_object_to_timespec(*args,**kw):\n    pass\ndef pytime_object_to_timeval(*args,**kw):\n    pass\ndef raise_exception(*args,**kw):\n    pass\ndef raise_memoryerror(*args,**kw):\n    pass\ndef run_in_subinterp(*args,**kw):\n    pass\ndef set_exc_info(*args,**kw):\n    pass\ndef test_L_code(*args,**kw):\n    pass\ndef test_Z_code(*args,**kw):\n    pass\ndef test_capsule(*args,**kw):\n    pass\ndef test_config(*args,**kw):\n    pass\ndef test_datetime_capi(*args,**kw):\n    pass\ndef test_dict_iteration(*args,**kw):\n    pass\ndef test_empty_argparse(*args,**kw):\n    pass\ndef test_k_code(*args,**kw):\n    pass\ndef test_lazy_hash_inheritance(*args,**kw):\n    pass\ndef test_list_api(*args,**kw):\n    pass\ndef test_long_and_overflow(*args,**kw):\n    pass\ndef test_long_api(*args,**kw):\n    pass\ndef test_long_as_double(*args,**kw):\n    pass\ndef test_long_as_size_t(*args,**kw):\n    pass\ndef test_long_long_and_overflow(*args,**kw):\n    pass\ndef test_long_numbits(*args,**kw):\n    pass\ndef test_longlong_api(*args,**kw):\n    pass\ndef test_null_strings(*args,**kw):\n    pass\ndef test_s_code(*args,**kw):\n    pass\ndef test_string_from_format(*args,**kw):\n    pass\ndef test_string_to_double(*args,**kw):\n    pass\ndef test_u_code(*args,**kw):\n    pass\ndef test_unicode_compare_with_ascii(*args,**kw):\n    pass\ndef test_widechar(*args,**kw):\n    pass\ndef test_with_docstring(*args,**kw):\n    \"\"\"This is a pretty normal docstring.\"\"\"\n    pass\ndef traceback_print(*args,**kw):\n    pass\ndef unicode_aswidechar(*args,**kw):\n    pass\ndef unicode_aswidecharstring(*args,**kw):\n    pass\ndef unicode_encodedecimal(*args,**kw):\n    pass\ndef unicode_transformdecimaltoascii(*args,**kw):\n    pass\n", "/libs/__random.js": "$module=(function($B){var __builtins__=$B.builtins;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");var $JSObject=$B.$JSObject;var JSObject=$B.JSObject;return{choice:function(seq){return getattr(seq,'__getitem__')(getattr(seq,'__len__')()*Math.random());},random:function(){if(arguments.length>0)throw TypeError(\"random() takes no arguments (\"+arguments.length+\" given)\");else return float(Math.random());},randint:function(a,b){return int(Math.floor(Math.random()*(b-a+1)+a));},randrange:function(start,stop,step){if(step===undefined)step=1;else if(step==0){}if(stop===undefined){stop=start;start=0;}var width=stop-start;if(step==1&&width>0)return start+int(Math.floor(Math.random()*width));else{}var n;if(step>0)n=Math.floor((width+step-1)/step);else n=Math.floor((width+step+1)/step);return start+step*int(Math.floor(Math.random()*n));},shuffle:function(x,rnd){if(x.length<=1)return x;if(rnd===undefined)rnd=Math.random;for(var j,o,i=x.length;i;j=parseInt(rnd()*i),o=x[--i],x[i]=x[j],x[j]=o);}};})(__BRYTHON__);", "/libs/re.js": "$module=(function($B){var __builtins__=$B.builtins;for(var $py_builtin in __builtins__)eval(\"var \"+$py_builtin+\"=__builtins__[$py_builtin]\");var $JSObject=$B.$JSObject;var JSObject=$B.JSObject;obj={__class__:$module,__str__:function(){return \"<module 're'>\";}};obj.A=obj.ASCII=256;obj.I=obj.IGNORECASE='i';obj.M=obj.MULTILINE='m';obj.VERBOSE=64;$SRE_PatternDict={__class__:$B.$type,__name__:'SRE_Pattern'};$SRE_PatternDict.__mro__=[$SRE_PatternDict,object.$dict];$SRE_PatternDict.match=function(self,string){return obj.match(self.pattern,string,self.flags);};$SRE_PatternDict.search=function(self,string){return obj.obj(self.pattern,string,self.flags);};obj.compile=function(pattern,flags){return{__class__:$SRE_PatternDict,pattern:pattern,flags:flags};};obj.escape=function(string){var res='';var ok='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_';for(var i=0;i<string.length;i++)if(ok.search(string.charAt(i))>-1)res+=string.charAt(i);return res;};obj.findall=function(pattern,string,flags){var $ns=$B.$MakeArgs('re.search',arguments,['pattern','string'],[],'args','kw');var args=$ns.args;if(args.length>0)var flags=args[0];else var flags=getattr($ns.kw,'get')('flags','');flags+='gm';var jsp=new RegExp(pattern,flags);var jsmatch=string.match(jsp);if(jsmatch===null)return [];return jsmatch;};obj.search=function(pattern,string){var $ns=$B.$MakeArgs('re.search',arguments,['pattern','string'],[],'args','kw');var args=$ns.args;if(args.length>0)var flags=args[0];else var flags=getattr($ns.kw,'get')('flags','');var jsp=new RegExp(pattern,flags);var jsmatch=string.match(jsp);if(jsmatch===null)return None;var mo=new Object();mo.group=function(){var res=[];for(var i=0;i<arguments.length;i++)if(jsmatch[arguments[i]]===undefined)res.push(None);else res.push(jsmatch[arguments[i]]);if(arguments.length===1)return res[0];return tuple(res);};mo.groups=function(_default){if(_default===undefined)_default=None;var res=[];for(var i=1;i<jsmatch.length;i++)if(jsmatch[i]===undefined)res.push(_default);else res.push(jsmatch[i]);return tuple(res);};mo.start=function(){return jsmatch.index;};mo.string=string;return JSObject(mo);};obj.sub=function(pattern,repl,string){var $ns=$B.$MakeArgs('re.search',arguments,['pattern','repl','string'],[],'args','kw');for($var in $ns)eval(\"var \"+$var+\"=$ns[$var]\");var args=$ns.args;var count=__builtins__.dict.$dict.get($ns.kw,'count',0);var flags=__builtins__.dict.$dict.get($ns.kw,'flags','');if(args.length>0)var count=args[0];if(args.length>1)var flags=args[1];if(typeof repl===\"string\")repl=repl.replace(/\\\\(\\d+)/g,'$$$1');else if(typeof repl===\"function\")var $repl1=function(){var mo=Object();mo.string=arguments[arguments.length-1];var start=arguments[arguments.length-2];var end=start+arguments[0].length;mo.start=function(){return start;};mo.end=function(){return end;};groups=[];for(var i=1;i<arguments.length-2;i++)groups.push(arguments[i]);mo.groups=function(_default){if(_default===undefined)_default=None;var res=[];for(var i=0;i<groups.length;i++)if(groups[i]===undefined)res.push(_default);else res.push(groups[i]);return res;};return repl(JSObject(mo));};if(count==0)flags+='g';var jsp=new RegExp(pattern,flags);if(typeof repl==='function')return string.replace(jsp,$repl1);else return string.replace(jsp,repl);};obj.match=(function(search_func){return function(){pattern=arguments[0];if(pattern.charAt(0)!=='^')pattern='^'+pattern;var args=[pattern];for(var i=1;i<arguments.length;i++)args.push(arguments[i]);return search_func.apply(null,args);};})(obj.search);return obj;})(__BRYTHON__);", "/Lib/_collections.py": "import operator\ndef _thread_ident():\n    return -1\nn = 30\nLFTLNK = n\nRGTLNK = n+1\nBLOCKSIZ = n+2\nclass deque:\n    def __new__(cls, iterable=(), *args, **kw):\n        self=object.__new__(cls, *args, **kw)\n        self.clear()\n        return self\n    def __init__(self, iterable=(), maxlen=None):\n        object.__init__(self)\n        self.clear()\n        if maxlen is not None:\n            if maxlen < 0:\n                raise ValueError(\"maxlen must be non-negative\")\n        self._maxlen = maxlen\n        add = self.append\n        for elem in iterable:\n            add(elem)\n    @property\n    def maxlen(self):\n        return self._maxlen\n    def clear(self):\n        self.right = self.left = [None] * BLOCKSIZ\n        self.rightndx = n//2   # points to last written element\n        self.leftndx = n//2+1\n        self.length = 0\n        self.state = 0\n    def append(self, x):\n        self.state += 1\n        self.rightndx += 1\n        if self.rightndx == n:\n            newblock = [None] * BLOCKSIZ\n            self.right[RGTLNK] = newblock\n            newblock[LFTLNK] = self.right\n            self.right = newblock\n            self.rightndx = 0\n        self.length += 1\n        self.right[self.rightndx] = x\n        if self.maxlen is not None and self.length > self.maxlen:\n            self.popleft()\n    def appendleft(self, x):\n        self.state += 1\n        self.leftndx -= 1\n        if self.leftndx == -1:\n            newblock = [None] * BLOCKSIZ\n            self.left[LFTLNK] = newblock\n            newblock[RGTLNK] = self.left\n            self.left = newblock\n            self.leftndx = n-1\n        self.length += 1\n        self.left[self.leftndx] = x\n        if self.maxlen is not None and self.length > self.maxlen:\n            self.pop()\n    def extend(self, iterable):\n        if iterable is self:\n            iterable = list(iterable)\n        for elem in iterable:\n            self.append(elem)\n    def extendleft(self, iterable):\n        if iterable is self:\n            iterable = list(iterable)\n        for elem in iterable:\n            self.appendleft(elem)\n    def pop(self):\n        if self.left is self.right and self.leftndx > self.rightndx:\n            raise IndexError(\"pop from an empty deque\")\n        x = self.right[self.rightndx]\n        self.right[self.rightndx] = None\n        self.length -= 1\n        self.rightndx -= 1\n        self.state += 1\n        if self.rightndx == -1:\n            prevblock = self.right[LFTLNK]\n            if prevblock is None:\n                self.rightndx = n//2\n                self.leftndx = n//2+1\n            else:\n                prevblock[RGTLNK] = None\n                self.right[LFTLNK] = None\n                self.right = prevblock\n                self.rightndx = n-1\n        return x\n    def popleft(self):\n        if self.left is self.right and self.leftndx > self.rightndx:\n            raise IndexError(\"pop from an empty deque\")\n        x = self.left[self.leftndx]\n        self.left[self.leftndx] = None\n        self.length -= 1\n        self.leftndx += 1\n        self.state += 1\n        if self.leftndx == n:\n            prevblock = self.left[RGTLNK]\n            if prevblock is None:\n                self.rightndx = n//2\n                self.leftndx = n//2+1\n            else:\n                prevblock[LFTLNK] = None\n                self.left[RGTLNK] = None\n                self.left = prevblock\n                self.leftndx = 0\n        return x\n    def count(self, value):\n        c = 0\n        for item in self:\n            if item == value:\n                c += 1\n        return c\n    def remove(self, value):\n        for i in range(len(self)):\n            if self[i] == value:\n                del self[i]\n                return\n        raise ValueError(\"deque.remove(x): x not in deque\")\n    def rotate(self, n=1):\n        length = len(self)\n        if length == 0:\n            return\n        halflen = (length+1) >> 1\n        if n > halflen or n < -halflen:\n            n %= length\n            if n > halflen:\n                n -= length\n            elif n < -halflen:\n                n += length\n        while n > 0:\n            self.appendleft(self.pop())\n            n -= 1\n        while n < 0:\n            self.append(self.popleft())\n            n += 1\n    def reverse(self):\n        \"reverse *IN PLACE*\"\n        leftblock = self.left\n        rightblock = self.right\n        leftindex = self.leftndx\n        rightindex = self.rightndx\n        for i in range(self.length // 2):\n            assert leftblock != rightblock or leftindex < rightindex\n            (rightblock[rightindex], leftblock[leftindex]) = (\n                leftblock[leftindex], rightblock[rightindex])\n            leftindex += 1\n            if leftindex == n:\n                leftblock = leftblock[RGTLNK]\n                assert leftblock is not None\n                leftindex = 0\n            rightindex -= 1\n            if rightindex == -1:\n                rightblock = rightblock[LFTLNK]\n                assert rightblock is not None\n                rightindex = n - 1\n    def __repr__(self):\n        threadlocalattr = '__repr' + str(_thread_ident())\n        if threadlocalattr in self.__dict__:\n            return 'deque([...])'\n        else:\n            self.__dict__[threadlocalattr] = True\n            try:\n                if self.maxlen is not None:\n                    return 'deque(%r, maxlen=%s)' % (list(self), self.maxlen)\n                else:\n                    return 'deque(%r)' % (list(self),)\n            finally:\n                del self.__dict__[threadlocalattr]\n    def __iter__(self):\n        return deque_iterator(self, self._iter_impl)\n    def _iter_impl(self, original_state, giveup):\n        if self.state != original_state:\n            giveup()\n        block = self.left\n        while block:\n            l, r = 0, n\n            if block is self.left:\n                l = self.leftndx\n            if block is self.right:\n                r = self.rightndx + 1\n            for elem in block[l:r]:\n                yield elem\n                if self.state != original_state:\n                    giveup()\n            block = block[RGTLNK]\n    def __reversed__(self):\n        return deque_iterator(self, self._reversed_impl)\n    def _reversed_impl(self, original_state, giveup):\n        if self.state != original_state:\n            giveup()\n        block = self.right\n        while block:\n            l, r = 0, n\n            if block is self.left:\n                l = self.leftndx\n            if block is self.right:\n                r = self.rightndx + 1\n            for elem in reversed(block[l:r]):\n                yield elem\n                if self.state != original_state:\n                    giveup()\n            block = block[LFTLNK]\n    def __len__(self):\n        return self.length\n    def __getref(self, index):\n        if index >= 0:\n            block = self.left\n            while block:\n                l, r = 0, n\n                if block is self.left:\n                    l = self.leftndx\n                if block is self.right:\n                    r = self.rightndx + 1\n                span = r-l\n                if index < span:\n                    return block, l+index\n                index -= span\n                block = block[RGTLNK]\n        else:\n            block = self.right\n            while block:\n                l, r = 0, n\n                if block is self.left:\n                    l = self.leftndx\n                if block is self.right:\n                    r = self.rightndx + 1\n                negative_span = l-r\n                if index >= negative_span:\n                    return block, r+index\n                index -= negative_span\n                block = block[LFTLNK]\n        raise IndexError(\"deque index out of range\")\n    def __getitem__(self, index):\n        block, index = self.__getref(index)\n        return block[index]\n    def __setitem__(self, index, value):\n        block, index = self.__getref(index)\n        block[index] = value\n    def __delitem__(self, index):\n        length = len(self)\n        if index >= 0:\n            if index >= length:\n                raise IndexError(\"deque index out of range\")\n            self.rotate(-index)\n            self.popleft()\n            self.rotate(index)\n        else:\n            index= index^(2**31)\n            if index >= length:\n                raise IndexError(\"deque index out of range\")\n            self.rotate(index)\n            self.pop()\n            self.rotate(-index)\n    def __reduce_ex__(self, proto):\n        return type(self), (list(self), self.maxlen)\n    def __hash__(self):\n        raise TypeError(\"deque objects are unhashable\")\n    def __copy__(self):\n        return self.__class__(self, self.maxlen)\n    def __eq__(self, other):\n        if isinstance(other, deque):\n            return list(self) == list(other)\n        else:\n            return NotImplemented\n    def __ne__(self, other):\n        if isinstance(other, deque):\n            return list(self) != list(other)\n        else:\n            return NotImplemented\n    def __lt__(self, other):\n        if isinstance(other, deque):\n            return list(self) < list(other)\n        else:\n            return NotImplemented\n    def __le__(self, other):\n        if isinstance(other, deque):\n            return list(self) <= list(other)\n        else:\n            return NotImplemented\n    def __gt__(self, other):\n        if isinstance(other, deque):\n            return list(self) > list(other)\n        else:\n            return NotImplemented\n    def __ge__(self, other):\n        if isinstance(other, deque):\n            return list(self) >= list(other)\n        else:\n            return NotImplemented\n    def __iadd__(self, other):\n        self.extend(other)\n        return self\nclass deque_iterator(object):\n    def __init__(self, deq, itergen):\n        self.counter = len(deq)\n        def giveup():\n            self.counter = 0\n            raise RuntimeError(\"deque mutated during iteration\")\n        self._gen = itergen(deq.state, giveup)\n    def next(self):\n        res =  self._gen.next()\n        self.counter -= 1\n        return res\n    def __iter__(self):\n        return self\nclass defaultdict(dict):\n    def __init__(self, *args, **kwds):\n        if len(args) > 0:\n            default_factory = args[0]\n            args = args[1:]\n            if not callable(default_factory) and default_factory is not None:\n                raise TypeError(\"first argument must be callable\")\n        else:\n            default_factory = None\n        dict.__init__(self, args, kwds)\n        self.default_factory = default_factory\n        self.update(args, kwds)\n    def __getitem__(self, key):\n        if self.__contains__(key):  \n           return dict.__getitem__(self,key)\n        return self.__missing__(key)\n    def __missing__(self, key):\n        if self.default_factory is None: \n            raise KeyError(key)\n        self[key] = value = self.default_factory()\n        return value\n    def __repr__(self, recurse=set()):\n        if id(self) in recurse:\n            return \"defaultdict(...)\"\n        try:\n            recurse.add(id(self))\n            return \"defaultdict(%s, %s)\" % (repr(self.default_factory), super(defaultdict, self).__repr__())\n        finally:\n            recurse.remove(id(self))\n    def copy(self):\n        return type(self)(self.default_factory, self)\n    def __copy__(self):\n        return self.copy()\n    def __reduce__(self):\n        return (type(self), (self.default_factory,), None, None, self.iteritems())\nfrom operator import itemgetter as _itemgetter\nfrom keyword import iskeyword as _iskeyword\nimport sys as _sys\ndef namedtuple(typename, field_names, verbose=False, rename=False):\n    \"\"\"Returns a new subclass of tuple with named fields.\n    >>> Point = namedtuple('Point', 'x y')\n    >>> Point.__doc__                   # docstring for the new class\n    'Point(x, y)'\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\n    >>> p[0] + p[1]                     # indexable like a plain tuple\n    33\n    >>> x, y = p                        # unpack like a regular tuple\n    >>> x, y\n    (11, 22)\n    >>> p.x + p.y                       # fields also accessable by name\n    33\n    >>> d = p._asdict()                 # convert to a dictionary\n    >>> d['x']\n    11\n    >>> Point(**d)                      # convert from a dictionary\n    Point(x=11, y=22)\n    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\n    Point(x=100, y=22)\n    \"\"\"\n    if isinstance(field_names, str):\n        field_names = field_names.replace(',', ' ').split() # names separated by whitespace and/or commas\n    field_names = tuple(map(str, field_names))\n    if rename:\n        names = list(field_names)\n        seen = set()\n        for i, name in enumerate(names):\n            if (not min(c.isalnum() or c=='_' for c in name) or _iskeyword(name)\n                or not name or name[0].isdigit() or name.startswith('_')\n                or name in seen):\n                    names[i] = '_%d' % i\n            seen.add(name)\n        field_names = tuple(names)\n    for name in (typename,) + field_names:\n        if not min(c.isalnum() or c=='_' for c in name):\n            raise ValueError('Type names and field names can only contain alphanumeric characters and underscores: %r' % name)\n        if _iskeyword(name):\n            raise ValueError('Type names and field names cannot be a keyword: %r' % name)\n        if name[0].isdigit():\n            raise ValueError('Type names and field names cannot start with a number: %r' % name)\n    seen_names = set()\n    for name in field_names:\n        if name.startswith('_') and not rename:\n            raise ValueError('Field names cannot start with an underscore: %r' % name)\n        if name in seen_names:\n            raise ValueError('Encountered duplicate field name: %r' % name)\n        seen_names.add(name)\n    numfields = len(field_names)\n    argtxt = repr(field_names).replace(\"'\", \"\")[1:-1]   # tuple repr without parens or quotes\n    reprtxt = ', '.join('%s=%%r' % name for name in field_names)\n    template = '''class %(typename)s(tuple):\n        '%(typename)s(%(argtxt)s)' \\n\n        __slots__ = () \\n\n        _fields = %(field_names)r \\n\n        def __new__(_cls, %(argtxt)s):\n            return _tuple.__new__(_cls, (%(argtxt)s)) \\n\n        @classmethod\n        def _make(cls, iterable, new=tuple.__new__, len=len):\n            'Make a new %(typename)s object from a sequence or iterable'\n            result = new(cls, iterable)\n            if len(result) != %(numfields)d:\n                raise TypeError('Expected %(numfields)d arguments, got %%d' %% len(result))\n            return result \\n\n        def __repr__(self):\n            return '%(typename)s(%(reprtxt)s)' %% self \\n\n        def _asdict(self):\n            'Return a new dict which maps field names to their values'\n            return dict(zip(self._fields, self)) \\n\n        def _replace(_self, **kwds):\n            'Return a new %(typename)s object replacing specified fields with new values'\n            result = _self._make(map(kwds.pop, %(field_names)r, _self))\n            if kwds:\n                raise ValueError('Got unexpected field names: %%r' %% kwds.keys())\n            return result \\n\n        def __getnewargs__(self):\n            return tuple(self) \\n\\n''' % locals()\n    for i, name in enumerate(field_names):\n        template += '        %s = _property(_itemgetter(%d))\\n' % (name, i)\n    if verbose:\n        print(template)\n    namespace = dict(_itemgetter=_itemgetter, __name__='namedtuple_%s' % typename,\n                     _property=property, _tuple=tuple)\n    try:\n        exec(template,namespace)\n    except SyntaxError as e:\n        raise SyntaxError(e.message + ':\\n' + template)\n    result = namespace[typename]\n    try:\n        result.__module__ = _sys._getframe(1).f_globals.get('__name__', '__main__')\n    except (AttributeError, ValueError):\n        pass\n    return result\nif __name__ == '__main__':\n    Point = namedtuple('Point', ['x', 'y'])\n    p = Point(11, y=22)\n    print(p[0]+p[1])\n    x,y=p\n    print(x,y)\n    print(p.x+p.y)\n    print(p)\n", "/Lib/_functools.py": "def partial(func, *args, **keywords):\n    def newfunc(*fargs, **fkeywords):\n        newkeywords = keywords.copy()\n        newkeywords.update(fkeywords)\n        return func(*(args + fargs), **newkeywords)\n    newfunc.func = func\n    newfunc.args = args\n    newfunc.keywords = keywords\n    return newfunc\ndef reduce(func,iterable,initializer=None):\n    args = iter(iterable)\n    if initializer is not None:\n        res = initializer\n    else:\n        res = next(arg)\n    while True:\n        try:\n            res = func(res,next(args))\n        except StopIteration:\n            return res\n", "/Lib/ui/dialog.py": "import widget\nfrom browser import html, doc\nclass Dialog(widget.DraggableWidget):\n  def __init__(self, id=None):\n      self._div_shell=html.DIV(\n         Class=\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front ui-draggable ui-resizable\",\n         style={'position': 'absolute', 'height': 'auto', 'width': '300px',\n                'top': '98px', 'left': '140px', 'display': 'block'})\n      widget.DraggableWidget.__init__(self, self._div_shell, 'dialog', id)\n      _div_titlebar=html.DIV(Id=\"titlebar\",\n           Class=\"ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix\")\n      self._div_shell <= _div_titlebar\n      self._div_title=html.SPAN(Id=\"title\", Class=\"ui-dialog-title\")\n      _div_titlebar <= self._div_title\n      self._title_button=html.BUTTON(Title=\"close\",\n            Class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only ui-dialog-titlebar-close\")\n      def dialog_close(e):\n          del doc[self._div_shell.id]\n      self._title_button.bind('click', dialog_close)\n      _span=html.SPAN(Class=\"ui-button-icon-primary ui-icon ui-icon-closethick\")\n      self._title_button <= _span\n      _span=html.SPAN('close', Class=\"ui-button-text\")\n      self._title_button <= _span\n      _div_titlebar <= self._title_button\n      self._div_dialog=html.DIV(Class=\"ui-dialog-content ui-widget-content\",\n           style={'width': 'auto', 'min-height': '105px', \n                  'max-height': 'none', 'height': 'auto'})\n      self._div_shell <= self._div_dialog\n      for _i in ['n', 'e', 's', 'w', 'se', 'sw', 'ne', 'nw']:\n          if _i == 'se':\n             _class=\"ui-resizable-handle ui-resizable-%s ui-icon ui-icon-gripsmall-diagonal-%s\" % (_i, _i)\n          else:\n             _class=\"ui-resizable-handle ui-resizable-%s\" % _i\n          self._div_shell <= html.DIV(Class=_class, style={'z-index': '90'})\n      doc <= self._div_shell\n  def set_title(self, title):\n      self._div_title.set_text(title)\n  def set_body(self, body):\n      self._div_dialog.set_html(body)\n", "/Lib/ui/slider.py": "import widget\nfrom browser import doc,html\nclass Slider(widget.Widget):\n  def __init__(self, id=None, label=False):\n      self._div_shell=html.DIV(Class=\"ui-slider ui-slider-horizontal ui-widget ui-widget-content ui-corner-all\")\n      widget.Widget.__init__(self, self._div_shell, 'slider', id)\n      self._handle=html.A(Class=\"ui-slider-handle ui-state-default ui-corner-all\",\n                          Href='#', style={'left': '0px'})\n      self._value=0\n      self._isMouseDown=False\n      def startSlide(e):\n          self._isMouseDown=True\n          self._upperBound = self._div_shell.offsetWidth - self._handle.offsetWidth\n          pos = widget.getMousePosition(e)\n          self._startMouseX=pos['x']\n          self._lastElementLeft = parseInt(self._handle.style.left)\n          updatePosition(e)\n      def updatePosition(e):\n          pos = widget.getMousePosition(e)\n          _newPos = self._lastElementLeft + pos['x'] - self._startMouseX\n          _newPos = max(0, _newPos)\n          _newPos = min(_newPos, self._upperBound)\n          self._handle.style.left = '%spx' % _newPos\n          self._lastElementLeft = _newPos\n      def moving(e):\n          if self._isMouseDown:\n             updatePosition(e)\n      def dropCallback(e):\n          self._isMouseDown=False\n          self._handle.unbind('mousemove', moving)\n      self._handle.bind('mousemove', moving)\n      self._handle.bind('mouseup', dropCallback)\n      self._handle.bind('mousedown', startSlide)\n      def mouseover(e):\n          _class=self._handle.getAttribute('class')\n          self._handle.setAttribute('class', '%s %s' % (_class, 'ui-state-hover'))\n      def mouseout(e):\n          self._isMouseDown=False\n          _class=self._handle.getAttribute('class')\n          self._handle.setAttribute('class', _class.replace('ui-state-hover', ''))\n      self._handle.bind('mouseover', mouseover)\n      self._handle.bind('mouseout', mouseout)\n      self._div_shell <= self._handle\n  def get_value(self):\n      return self._value\n", "/Lib/unittest/test/testmock/support.py": "import sys\r\ndef is_instance(obj, klass):\r\n    \"\"\"Version of is_instance that doesn't access __class__\"\"\"\r\n    return issubclass(type(obj), klass)\r\nclass SomeClass(object):\r\n    class_attribute = None\r\n    def wibble(self):\r\n        pass\r\nclass X(object):\r\n    pass\r\ndef examine_warnings(func):\r\n    def wrapper():\r\n        with catch_warnings(record=True) as ws:\r\n            func(ws)\r\n    return wrapper\r\n"};

//define import procedure to look up module in VFS
;(function($B){

$B.$import_via_VFS=function(module,origin){
  //console.log("import_via_VFS: " + module.name)
  var search_path=__BRYTHON__.path
  var root = __BRYTHON__.brython_path;
  if (root.substring(root.length) == '/') {
     root=root.substring(0,root.length-1); 
  }
  if (search_path.indexOf(root+'/libs') == -1) {
     search_path.unshift(root+'/libs')
  }

  if (search_path.indexOf(root+'/Lib') == -1) {
     search_path.unshift(root+'/Lib')
  }

  var _name=module.name
  _name=_name.replace('.', '/')
  var search=[_name, _name+'/__init__'];
  var exts=['.js', '.py']
  for(var i=0; i < search_path.length; i++) {
     for(var j=0; j < exts.length; j++) {
        for(var k=0; k < search.length; k++) {
         
           var path=search_path[i].replace(root, '')
           var _ext=exts[j]
           path+='/'+search[k]+_ext
         
           //console.log("searching for " + path + " in VFS:96");
           var module_contents=__BRYTHON__.VFS[path]
           if(module_contents !== undefined) {
             console.log("imported ("+module.name+") via VFS:" + path)
             if (_ext == '.js') {
                var mod=$B.$import_js_module(module,path,module_contents)
                if(k==search.length-1){mod.$package=true}
                return mod
             }
             var mod=$B.$import_py_module(module,path,module_contents)
             if(k==search.length-1){mod.$package=true}
             return mod
           }
        }
     }
  }

  __BRYTHON__.imported[module.name] = undefined
  __BRYTHON__.modules[module.name] = undefined

  throw ImportError("module " + module.name + " not found")
}

// since $import_funcs is now a local variable (import_funcs), we have
// to over write the $import_single function to get VFS to work
$B.$import_single=function (module,origin){
    var import_funcs = [$B.$import_via_VFS, 
        $B.$import_js, 
        $B.$import_module_search_path]

    if (module.name.indexOf('.') > -1) {
       import_funcs = [$B.$import_via_VFS, $B.$import_module_search_path]
    }

    for(var j=0;j<import_funcs.length;j++){
        try{
            //console.log(j)
            //console.log(import_funcs[j])
            var mod=import_funcs[j](module,origin)
            //console.log(mod)
            return mod
        } catch(err){
            //console.log(err)
            //console.log(err.name)
            if(err.name==="FileNotFoundError" || err.name==='ImportError'){
                if(j==import_funcs.length-1){
                    // all possible locations failed : throw error
                    // remove module name from __BRYTHON__.imported and .modules
                    //__BRYTHON__.imported[module.name] = undefined
                    //__BRYTHON__.modules[module.name] = undefined
                    //throw err
                }
            }else{
              //  __BRYTHON__.imported[module.name] = undefined
              //  __BRYTHON__.modules[module.name] = undefined
              //  throw err
            }
        }
    }
    
    //__BRYTHON__.imported[module.name] = undefined
    //__BRYTHON__.modules[module.name] = undefined

    throw $B.builtins.ImportError("module " + module.name + " not found")

    return undefined
}


$B.$import_module_search_path_list = function(module,path_list,origin){
    //console.log('$import_module_search_path_list ' + module.name + ' in VFS:143');

    var search = []

    if(origin!==undefined){
        // add path of origin script to list of paths to search
        var origin_path = __BRYTHON__.$py_module_path[origin]
        var elts = origin_path.split('/')
        elts.pop()
        origin_path = elts.join('/')
        if(path_list.indexOf(origin_path)==-1){
            path_list.splice(0,0,origin_path)
        }
    }

    if(module.name.substr(0,2)=='$$'){module.name=module.name.substr(2)}
    mod_path = module.name.replace(/\./g,'/')
    if(!module.package_only){
        search.push(mod_path)
    }
    search.push(mod_path+'/__init__')

    //var exts=['.js', '.py']
    var _ext='.py'
    var flag = false
    var mod
    for(var j=0; j < search.length; j++) {
      // for(var k=0; k < exts.length; k++) {
          var modpath = search[j]
          //console.log(flag)
          for(var i=0;i<path_list.length;i++){
             //console.log(path_list[i])
             var path
             if (path_list[i].substring(path_list[i].length) == '/') {
                path = path_list[i] + modpath
             } else {
                path = path_list[i] + "/" + modpath
             }

             var module_contents=__BRYTHON__.VFS[path + '.py'];
             //console.log('searching for ' + path + '.py'  + ' in VFS:166');
             //console.log(module_contents)
             if (module_contents !== undefined) {
               try {
                 mod=$B.$import_py_module(module,path,module_contents)
                 flag=true
                 if(j==search.length-1){mod.$package=true}
                 console.log("imported " + module.name + " via VFS:208")
                 return mod
               }catch(err){
                  if(err.name==="FileNotFoundError" || err.name==='ImportError'){
                    if(j==search.length-1){
                      // all possible locations failed : throw error
                      // remove module name from __BRYTHON__.imported and .modules
                     // __BRYTHON__.imported[module.name] = undefined
                     // __BRYTHON__.modules[module.name] = undefined
                      throw err
                    }else{
                      continue
                    }
                  }else{
                  //  __BRYTHON__.imported[module.name] = undefined
                  //  __BRYTHON__.modules[module.name] = undefined
                    //throw err
                  }
               }
              // if(flag){break}
             }
             //if(flag){break}

             try {
                 //console.log('searching for ' + path + _ext + ' :213');
                 mod = $B.$import_py(module,path)
                 flag = true
                 if(j==search.length-1){mod.$package=true}
                 console.log("imported " + module.name + " via VFS:236")
                 return mod
             }catch(err){
                 if(err.name==="FileNotFoundError" || err.name==='ImportError'){
                    if(j==search.length-1){
                      // all possible locations failed : throw error
                      // remove module name from __BRYTHON__.imported and .modules
                     // __BRYTHON__.imported[module.name] = undefined
                     // __BRYTHON__.modules[module.name] = undefined
                      throw err
                    }else{
                      continue
                    }
                 }else{
                   // __BRYTHON__.imported[module.name] = undefined
                   // __BRYTHON__.modules[module.name] = undefined
                   // throw err
                 }
             }
             if(flag){break}
          }
          if(flag){break}
       //}
       //if(flag){break}
    }
    //if(!flag){
    throw $B.builtins.ImportError("module "+module.name+" not found")
    //}
    return undefined
}

})(__BRYTHON__)
