__BRYTHON__.$py_VFS={
'/libs/re.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtvYmo9e19fY2xhc3NfXzokbW9kdWxlLF9fc3RyX186ZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ3JlJz4iO319O29iai5BPW9iai5BU0NJST0yNTY7b2JqLkk9b2JqLklHTk9SRUNBU0U9J2knO29iai5NPW9iai5NVUxUSUxJTkU9J20nOyRTUkVfUGF0dGVybkRpY3Q9e19fY2xhc3NfXzokdHlwZSxfX25hbWVfXzonU1JFX1BhdHRlcm4nfTskU1JFX1BhdHRlcm5EaWN0Lm1hdGNoPWZ1bmN0aW9uKHNlbGYsc3RyaW5nKXtyZXR1cm4gb2JqLm1hdGNoKHNlbGYucGF0dGVybixzdHJpbmcsc2VsZi5mbGFncyk7fTskU1JFX1BhdHRlcm5EaWN0LnNlYXJjaD1mdW5jdGlvbihzZWxmLHN0cmluZyl7cmV0dXJuIG9iai5vYmooc2VsZi5wYXR0ZXJuLHN0cmluZyxzZWxmLmZsYWdzKTt9O29iai5jb21waWxlPWZ1bmN0aW9uKHBhdHRlcm4sZmxhZ3Mpe3JldHVybntfX2NsYXNzX186JFNSRV9QYXR0ZXJuRGljdCxwYXR0ZXJuOnBhdHRlcm4sZmxhZ3M6ZmxhZ3N9O307b2JqLmZpbmRhbGw9ZnVuY3Rpb24ocGF0dGVybixzdHJpbmcsZmxhZ3Mpe3ZhciAkbnM9JE1ha2VBcmdzKCdyZS5zZWFyY2gnLGFyZ3VtZW50cyxbJ3BhdHRlcm4nLCdzdHJpbmcnXSx7fSwnYXJncycsJ2t3Jyk7dmFyIGFyZ3M9JG5zLmFyZ3M7aWYoYXJncy5sZW5ndGg+MCl2YXIgZmxhZ3M9YXJnc1swXTtlbHNlIHZhciBmbGFncz0kbnMua3cuZ2V0KCdmbGFncycsJycpO2ZsYWdzKz0nZ20nO3ZhciBqc3A9bmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKTt2YXIganNtYXRjaD1zdHJpbmcubWF0Y2goanNwKTtpZihqc21hdGNoPT09bnVsbClyZXR1cm4gW107cmV0dXJuIGpzbWF0Y2g7fTtvYmouc2VhcmNoPWZ1bmN0aW9uKHBhdHRlcm4sc3RyaW5nKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywnc3RyaW5nJ10se30sJ2FyZ3MnLCdrdycpO3ZhciBhcmdzPSRucy5hcmdzO2lmKGFyZ3MubGVuZ3RoPjApdmFyIGZsYWdzPWFyZ3NbMF07ZWxzZSB2YXIgZmxhZ3M9Z2V0YXR0cigkbnMua3csJ2dldCcpKCdmbGFncycsJycpO3ZhciBqc3A9bmV3IFJlZ0V4cChwYXR0ZXJuLGZsYWdzKTt2YXIganNtYXRjaD1zdHJpbmcubWF0Y2goanNwKTtpZihqc21hdGNoPT09bnVsbClyZXR1cm4gTm9uZTt2YXIgbW89bmV3IE9iamVjdCgpO21vLmdyb3VwPWZ1bmN0aW9uKCl7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKWlmKGpzbWF0Y2hbYXJndW1lbnRzW2ldXT09PXVuZGVmaW5lZClyZXMucHVzaChOb25lKTtlbHNlIHJlcy5wdXNoKGpzbWF0Y2hbYXJndW1lbnRzW2ldXSk7aWYoYXJndW1lbnRzLmxlbmd0aD09PTEpcmV0dXJuIHJlc1swXTtyZXR1cm4gdHVwbGUocmVzKTt9O21vLmdyb3Vwcz1mdW5jdGlvbihfZGVmYXVsdCl7aWYoX2RlZmF1bHQ9PT11bmRlZmluZWQpX2RlZmF1bHQ9Tm9uZTt2YXIgcmVzPVtdO2Zvcih2YXIgaT0xO2k8anNtYXRjaC5sZW5ndGg7aSsrKWlmKGpzbWF0Y2hbaV09PT11bmRlZmluZWQpcmVzLnB1c2goX2RlZmF1bHQpO2Vsc2UgcmVzLnB1c2goanNtYXRjaFtpXSk7cmV0dXJuIHR1cGxlKHJlcyk7fTttby5zdGFydD1mdW5jdGlvbigpe3JldHVybiBqc21hdGNoLmluZGV4O307bW8uc3RyaW5nPXN0cmluZztyZXR1cm4gSlNPYmplY3QobW8pO307b2JqLnN1Yj1mdW5jdGlvbihwYXR0ZXJuLHJlcGwsc3RyaW5nKXt2YXIgJG5zPSRNYWtlQXJncygncmUuc2VhcmNoJyxhcmd1bWVudHMsWydwYXR0ZXJuJywncmVwbCcsJ3N0cmluZyddLHt9LCdhcmdzJywna3cnKTtmb3IoJHZhciBpbiAkbnMpZXZhbCgidmFyICIrJHZhcisiPSRuc1skdmFyXSIpO3ZhciBhcmdzPSRucy5hcmdzO3ZhciBjb3VudD0kRGljdERpY3QuZ2V0KCRucy5rdywnY291bnQnLDApO3ZhciBmbGFncz0kRGljdERpY3QuZ2V0KCRucy5rdywnZmxhZ3MnLCcnKTtpZihhcmdzLmxlbmd0aD4wKXZhciBjb3VudD1hcmdzWzBdO2lmKGFyZ3MubGVuZ3RoPjEpdmFyIGZsYWdzPWFyZ3NbMV07aWYodHlwZW9mIHJlcGw9PT0ic3RyaW5nIilyZXBsPXJlcGwucmVwbGFjZSgvXFwoXGQrKS9nLCckJCQxJyk7ZWxzZSBpZih0eXBlb2YgcmVwbD09PSJmdW5jdGlvbiIpdmFyICRyZXBsMT1mdW5jdGlvbigpe3ZhciBtbz1PYmplY3QoKTttby5zdHJpbmc9YXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV07dmFyIHN0YXJ0PWFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTJdO3ZhciBlbmQ9c3RhcnQrYXJndW1lbnRzWzBdLmxlbmd0aDttby5zdGFydD1mdW5jdGlvbigpe3JldHVybiBzdGFydDt9O21vLmVuZD1mdW5jdGlvbigpe3JldHVybiBlbmQ7fTtncm91cHM9W107Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoLTI7aSsrKWdyb3Vwcy5wdXNoKGFyZ3VtZW50c1tpXSk7bW8uZ3JvdXBzPWZ1bmN0aW9uKF9kZWZhdWx0KXtpZihfZGVmYXVsdD09PXVuZGVmaW5lZClfZGVmYXVsdD1Ob25lO3ZhciByZXM9W107Zm9yKHZhciBpPTA7aTxncm91cHMubGVuZ3RoO2krKylpZihncm91cHNbaV09PT11bmRlZmluZWQpcmVzLnB1c2goX2RlZmF1bHQpO2Vsc2UgcmVzLnB1c2goZ3JvdXBzW2ldKTtyZXR1cm4gcmVzO307cmV0dXJuIHJlcGwoSlNPYmplY3QobW8pKTt9O2lmKGNvdW50PT0wKWZsYWdzKz0nZyc7dmFyIGpzcD1uZXcgUmVnRXhwKHBhdHRlcm4sZmxhZ3MpO2lmKHR5cGVvZiByZXBsPT09J2Z1bmN0aW9uJylyZXR1cm4gc3RyaW5nLnJlcGxhY2UoanNwLCRyZXBsMSk7ZWxzZSByZXR1cm4gc3RyaW5nLnJlcGxhY2UoanNwLHJlcGwpO307b2JqLm1hdGNoPShmdW5jdGlvbihzZWFyY2hfZnVuYyl7cmV0dXJuIGZ1bmN0aW9uKCl7cGF0dGVybj1hcmd1bWVudHNbMF07aWYocGF0dGVybi5jaGFyQXQoMCkhPT0nXicpcGF0dGVybj0nXicrcGF0dGVybjt2YXIgYXJncz1bcGF0dGVybl07Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKylhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtyZXR1cm4gc2VhcmNoX2Z1bmMuYXBwbHkobnVsbCxhcmdzKTt9O30pKG9iai5zZWFyY2gpO3JldHVybiBvYmo7fSkoKTs=',
'/libs/websocket.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXskV2ViU29ja2V0RGljdD17X19jbGFzc19fOiR0eXBlLF9fbmFtZV9fOidXZWJTb2NrZXQnfTskV2ViU29ja2V0RGljdC5iaW5kPWZ1bmN0aW9uKHNlbGYsZXZlbnQsY2FsbGJhY2spe3NlbGYuJHdzWydvbicrZXZlbnRdPWNhbGxiYWNrO307JFdlYlNvY2tldERpY3Quc2VuZD1mdW5jdGlvbihzZWxmLGRhdGEpe3NlbGYuJHdzLnNlbmQoZGF0YSk7fTskV2ViU29ja2V0RGljdC5jbG9zZT1mdW5jdGlvbihzZWxmKXtzZWxmLiR3cy5jbG9zZSgpO307JFdlYlNvY2tldERpY3QuX19tcm9fXz1bJFdlYlNvY2tldERpY3QsJE9iamVjdERpY3RdO2Z1bmN0aW9uIHdlYnNvY2tldChob3N0KXt2YXIgJHNvY2tldD1uZXcgV2ViU29ja2V0KGhvc3QpO3ZhciByZXM9e19fY2xhc3NfXzokV2ViU29ja2V0RGljdCwkd3M6JHNvY2tldH07cmVzLiR3ZWJzb2NrZXQ9JHNvY2tldDtyZXR1cm4gcmVzO313ZWJzb2NrZXQuX19jbGFzc19fPSRmYWN0b3J5O3dlYnNvY2tldC4kZGljdD0kV2ViU29ja2V0RGljdDtyZXR1cm57d2Vic29ja2V0OndlYnNvY2tldH07fSkoKTs=',
'/libs/svg.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXskc3ZnTlM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIjskeGxpbmtOUz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI7ZnVuY3Rpb24gJFNWR1RhZyh0YWdfbmFtZSxhcmdzKXt2YXIgJGk9bnVsbDt2YXIgJG9iaj10aGlzO3ZhciBvYmo9JERPTU5vZGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCRzdmdOUyx0YWdfbmFtZSkpO2lmKGFyZ3MhPXVuZGVmaW5lZCYmYXJncy5sZW5ndGg+MCl7JHN0YXJ0PTA7JGZpcnN0PWFyZ3NbMF07aWYoJGZpcnN0Ll9fY2xhc3NfXyE9PSRLdyl7JHN0YXJ0PTE7aWYoaXNpbnN0YW5jZSgkZmlyc3QsW3N0cixpbnQsZmxvYXRdKSl7dHh0PWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cigkZmlyc3QpKTtvYmouZWx0LmFwcGVuZENoaWxkKHR4dCk7fWVsc2UgaWYoJGZpcnN0Ll9fY2xhc3NfXz09PSRUYWdTdW1EaWN0KWZvcigkaT0wOyRpPCRmaXJzdC5jaGlsZHJlbi5sZW5ndGg7JGkrKylvYmouZWx0LmFwcGVuZENoaWxkKCRmaXJzdC5jaGlsZHJlblskaV0pO2Vsc2UgdHJ5e29iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmVsdCk7fWNhdGNoKGVycil7JHJhaXNlKCdWYWx1ZUVycm9yJywnd3JvbmcgZWxlbWVudCAnKyRmaXJzdCk7fX1mb3IoJGk9JHN0YXJ0OyRpPGFyZ3MubGVuZ3RoOyRpKyspeyRhcmc9YXJnc1skaV07aWYoJGFyZyYmJGFyZy5fX2NsYXNzX189PT0kS3cpaWYoJGFyZy5uYW1lLnRvTG93ZXJDYXNlKCkuc3Vic3RyKDAsMik9PSJvbiIpZXZhbCgnRE9NTm9kZS5iaW5kKG9iaiwiJyskYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHIoMikrJyIsZnVuY3Rpb24oKXsnKyRhcmcudmFsdWUrJ30pJyk7ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKT09InN0eWxlIilET01Ob2RlLnNldF9zdHlsZShvYmosJGFyZy52YWx1ZSk7ZWxzZSBpZigkYXJnLm5hbWUudG9Mb3dlckNhc2UoKS5pbmRleE9mKCJocmVmIikhPT0tMSlvYmouZWx0LnNldEF0dHJpYnV0ZU5TKCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiwiaHJlZiIsJGFyZy52YWx1ZSk7ZWxzZSBpZigkYXJnLnZhbHVlIT09ZmFsc2Upb2JqLmVsdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCRhcmcubmFtZS5yZXBsYWNlKCdfJywnLScpLCRhcmcudmFsdWUpO319cmV0dXJuIG9iajt9dmFyICRzdmdfdGFncz1bJ2EnLCdhbHRHbHlwaCcsJ2FsdEdseXBoRGVmJywnYWx0R2x5cGhJdGVtJywnYW5pbWF0ZScsJ2FuaW1hdGVDb2xvcicsJ2FuaW1hdGVNb3Rpb24nLCdhbmltYXRlVHJhbnNmb3JtJywnY2lyY2xlJywnY2xpcFBhdGgnLCdjb2xvcl9wcm9maWxlJywnY3Vyc29yJywnZGVmcycsJ2Rlc2MnLCdlbGxpcHNlJywnZmVCbGVuZCcsJ2cnLCdpbWFnZScsJ2xpbmUnLCdsaW5lYXJHcmFkaWVudCcsJ21hcmtlcicsJ21hc2snLCdwYXRoJywncGF0dGVybicsJ3BvbHlnb24nLCdwb2x5bGluZScsJ3JhZGlhbEdyYWRpZW50JywncmVjdCcsJ3N0b3AnLCdzdmcnLCd0ZXh0JywndHJlZicsJ3RzcGFuJywndXNlJ107JHN2Zz1mdW5jdGlvbigpe3JldHVybiAkU1ZHVGFnKCdYJyxhcmd1bWVudHMpO307JHN2Zys9Jyc7dmFyIG9iaj1uZXcgT2JqZWN0KCk7Zm9yKHZhciBpPTA7aTwkc3ZnX3RhZ3MubGVuZ3RoO2krKyl7dmFyIHRhZz0kc3ZnX3RhZ3NbaV07ZXZhbCgnb2JqLicrdGFnKyc9Jyskc3ZnLnJlcGxhY2UoJ1gnLHRhZykpO31vYmouX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fTtyZXR1cm4gb2JqO30pKCk7',
'/libs/builtins.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXt2YXIgb2JqPXtfX2NsYXNzX186JE1vZHVsZURpY3QsX19uYW1lX186J2J1aWx0aW5zJ307dmFyIGJ1aWx0aW5fbmFtZXM9WydBcml0aG1ldGljRXJyb3InLCdBc3NlcnRpb25FcnJvcicsJ0F0dHJpYnV0ZUVycm9yJywnQmFzZUV4Y2VwdGlvbicsJ0Jsb2NraW5nSU9FcnJvcicsJ0Jyb2tlblBpcGVFcnJvcicsJ0J1ZmZlckVycm9yJywnQnl0ZXNXYXJuaW5nJywnQ2hpbGRQcm9jZXNzRXJyb3InLCdDb25uZWN0aW9uQWJvcnRlZEVycm9yJywnQ29ubmVjdGlvbkVycm9yJywnQ29ubmVjdGlvblJlZnVzZWRFcnJvcicsJ0Nvbm5lY3Rpb25SZXNldEVycm9yJywnRGVwcmVjYXRpb25XYXJuaW5nJywnRU9GRXJyb3InLCdFbGxpcHNpcycsJ0Vudmlyb25tZW50RXJyb3InLCdFeGNlcHRpb24nLCdGYWxzZScsJ0ZpbGVFeGlzdHNFcnJvcicsJ0ZpbGVOb3RGb3VuZEVycm9yJywnRmxvYXRpbmdQb2ludEVycm9yJywnRnV0dXJlV2FybmluZycsJ0dlbmVyYXRvckV4aXQnLCdJT0Vycm9yJywnSW1wb3J0RXJyb3InLCdJbXBvcnRXYXJuaW5nJywnSW5kZW50YXRpb25FcnJvcicsJ0luZGV4RXJyb3InLCdJbnRlcnJ1cHRlZEVycm9yJywnSXNBRGlyZWN0b3J5RXJyb3InLCdLZXlFcnJvcicsJ0tleWJvYXJkSW50ZXJydXB0JywnTG9va3VwRXJyb3InLCdNZW1vcnlFcnJvcicsJ05hbWVFcnJvcicsJ05vbmUnLCdOb3RBRGlyZWN0b3J5RXJyb3InLCdOb3RJbXBsZW1lbnRlZCcsJ05vdEltcGxlbWVudGVkRXJyb3InLCdPU0Vycm9yJywnT3ZlcmZsb3dFcnJvcicsJ1BlbmRpbmdEZXByZWNhdGlvbldhcm5pbmcnLCdQZXJtaXNzaW9uRXJyb3InLCdQcm9jZXNzTG9va3VwRXJyb3InLCdSZWZlcmVuY2VFcnJvcicsJ1Jlc291cmNlV2FybmluZycsJ1J1bnRpbWVFcnJvcicsJ1J1bnRpbWVXYXJuaW5nJywnU3RvcEl0ZXJhdGlvbicsJ1N5bnRheEVycm9yJywnU3ludGF4V2FybmluZycsJ1N5c3RlbUVycm9yJywnU3lzdGVtRXhpdCcsJ1RhYkVycm9yJywnVGltZW91dEVycm9yJywnVHJ1ZScsJ1R5cGVFcnJvcicsJ1VuYm91bmRMb2NhbEVycm9yJywnVW5pY29kZURlY29kZUVycm9yJywnVW5pY29kZUVuY29kZUVycm9yJywnVW5pY29kZUVycm9yJywnVW5pY29kZVRyYW5zbGF0ZUVycm9yJywnVW5pY29kZVdhcm5pbmcnLCdVc2VyV2FybmluZycsJ1ZhbHVlRXJyb3InLCdXYXJuaW5nJywnV2luZG93c0Vycm9yJywnWmVyb0RpdmlzaW9uRXJyb3InLCdfJywnX19idWlsZF9jbGFzc19fJywnX19kZWJ1Z19fJywnX19kb2NfXycsJ19faW1wb3J0X18nLCdfX25hbWVfXycsJ19fcGFja2FnZV9fJywnYWJzJywnYWxsJywnYW55JywnYXNjaWknLCdiaW4nLCdib29sJywnYnl0ZWFycmF5JywnYnl0ZXMnLCdjYWxsYWJsZScsJ2NocicsJ2NsYXNzbWV0aG9kJywnY29tcGlsZScsJ2NvbXBsZXgnLCdjb3B5cmlnaHQnLCdjcmVkaXRzJywnZGVsYXR0cicsJ2RpY3QnLCdkaXInLCdkaXZtb2QnLCdlbnVtZXJhdGUnLCdldmFsJywnZXhlYycsJ2V4aXQnLCdmaWx0ZXInLCdmbG9hdCcsJ2Zvcm1hdCcsJ2Zyb3plbnNldCcsJ2dldGF0dHInLCdnbG9iYWxzJywnaGFzYXR0cicsJ2hhc2gnLCdoZWxwJywnaGV4JywnaWQnLCdpbnB1dCcsJ2ludCcsJ2lzaW5zdGFuY2UnLCdpc3N1YmNsYXNzJywnaXRlcicsJ2xlbicsJ2xpY2Vuc2UnLCdsaXN0JywnbG9jYWxzJywnbWFwJywnbWF4JywnbWVtb3J5dmlldycsJ21pbicsJ25leHQnLCdvYmplY3QnLCdvY3QnLCdvcGVuJywnb3JkJywncG93JywncHJpbnQnLCdwcm9wZXJ0eScsJ3F1aXQnLCdyYW5nZScsJ3JlcHInLCdyZXZlcnNlZCcsJ3JvdW5kJywnc2V0Jywnc2V0YXR0cicsJ3NsaWNlJywnc29ydGVkJywnc3RhdGljbWV0aG9kJywnc3RyJywnc3VtJywnc3VwZXInLCd0dXBsZScsJ3R5cGUnLCd2YXJzJywnemlwJ107Zm9yKHZhciBpPTA7aTxidWlsdGluX25hbWVzLmxlbmd0aDtpKyspdHJ5e29ialtidWlsdGluX25hbWVzW2ldXT1ldmFsKGJ1aWx0aW5fbmFtZXNbaV0pO31jYXRjaChlcnIpe31yZXR1cm4gb2JqO30pKCk7',
'/libs/json.js':'ZnVuY3Rpb24gX3B5KG9iail7aWYob2JqPT09bnVsbClyZXR1cm4gTm9uZTtpZihpc2luc3RhbmNlKG9iaixsaXN0KSl7dmFyIHJlcz1bXTtmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKXJlcy5wdXNoKF9weShvYmpbaV0pKTtyZXR1cm4gcmVzO31pZihvYmouX19jbGFzc19fIT09dW5kZWZpbmVkKXtpZihvYmouX19jbGFzc19fPT09bGlzdClmb3IodmFyIGk9MDtpPG9iai5sZW5ndGg7aSsrKW9ialtpXT1fcHkob2JqW2ldKTtyZXR1cm4gb2JqO31pZih0eXBlb2Ygb2JqPT09J29iamVjdCcmJm9iai5fX2NsYXNzX189PT11bmRlZmluZWQpe3ZhciByZXM9ZGljdCgpO2Zvcih2YXIgYXR0ciBpbiBvYmopZ2V0YXR0cihyZXMsJ19fc2V0aXRlbV9fJykoYXR0cixfcHkob2JqW2F0dHJdKSk7cmV0dXJuIHJlczt9cmV0dXJuIEpTT2JqZWN0KG9iaik7fWZ1bmN0aW9uIF9qcyhvYmope2lmKGlzaW5zdGFuY2Uob2JqLFtpbnQsc3RyXSkpcmV0dXJuIG9iajtlbHNlIGlmKG9iaj09PU5vbmUpcmV0dXJuIG51bGw7ZWxzZSBpZihvYmo9PT1UcnVlKXJldHVybiB0cnVlO2Vsc2UgaWYob2JqPT09RmFsc2UpcmV0dXJuIGZhbHNlO2Vsc2UgaWYoaXNpbnN0YW5jZShvYmosZmxvYXQpKXJldHVybiBvYmoudmFsdWU7ZWxzZSBpZihpc2luc3RhbmNlKG9iaixbbGlzdCx0dXBsZV0pKXt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8b2JqLmxlbmd0aDtpKyspcmVzLnB1c2goX2pzKG9ialtpXSkpO3JldHVybiByZXM7fWVsc2UgaWYoaXNpbnN0YW5jZShvYmosZGljdCkpe3ZhciByZXM9bmV3IE9iamVjdCgpO2Zvcih2YXIgaT0wO2k8b2JqLiRrZXlzLmxlbmd0aDtpKyspcmVzW19qcyhvYmouJGtleXNbaV0pXT1fanMob2JqLiR2YWx1ZXNbaV0pO3JldHVybiByZXM7fWVsc2UgdGhyb3cgVHlwZUVycm9yKHN0cihvYmopKycgaXMgbm90IEpTT04gc2VyaWFsaXphYmxlJyk7fSRtb2R1bGU9e2xvYWRzOmZ1bmN0aW9uKGpzb25fb2JqKXtyZXR1cm4gX3B5KEpTT04ucGFyc2UoanNvbl9vYmopKTt9LGR1bXBzOmZ1bmN0aW9uKG9iail7cmV0dXJuIEpTT04uc3RyaW5naWZ5KF9qcyhvYmopKTt9fTs=',
'/libs/ajax.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXskWE1MSHR0cERpY3Q9e19fY2xhc3NfXzokdHlwZSxfX25hbWVfXzonWE1MSHR0cCd9OyRYTUxIdHRwRGljdC5fX2dldGF0dHJpYnV0ZV9fPWZ1bmN0aW9uKHNlbGYsYXR0cil7aWYoWydoZWFkZXJzJywndGV4dCcsJ3htbCddLmluZGV4T2YoYXR0cik+LTEpcmV0dXJuICRYTUxIdHRwRGljdFthdHRyXShzZWxmKTtyZXR1cm4gJE9iamVjdERpY3QuX19nZXRhdHRyaWJ1dGVfXyhzZWxmLGF0dHIpO307JFhNTEh0dHBEaWN0Ll9fbXJvX189WyRYTUxIdHRwRGljdCwkT2JqZWN0RGljdF07JFhNTEh0dHBEaWN0Ll9fcmVwcl9fPWZ1bmN0aW9uKHNlbGYpe3JldHVybiAnPG9iamVjdCBYTUxIdHRwPic7fTskWE1MSHR0cERpY3QuX19zdHJfXz0kWE1MSHR0cERpY3QudG9TdHJpbmc9JFhNTEh0dHBEaWN0Ll9fcmVwcl9fOyRYTUxIdHRwRGljdC50ZXh0PWZ1bmN0aW9uKHNlbGYpe3JldHVybiBzZWxmLnJlc3BvbnNlVGV4dDt9OyRYTUxIdHRwRGljdC54bWw9ZnVuY3Rpb24oc2VsZil7cmV0dXJuICREb21PYmplY3Qoc2VsZi5yZXNwb25zZVhNTCk7fTskWE1MSHR0cERpY3QuaGVhZGVycz1mdW5jdGlvbihzZWxmKXtyZXR1cm4gbGlzdChzZWxmLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnNwbGl0KCdcbicpKTt9OyRYTUxIdHRwRGljdC5nZXRfaGVhZGVyPWZ1bmN0aW9uKCl7dmFyIHJlcW9iaj1zZWxmO3JldHVybiBmdW5jdGlvbihoZWFkZXIpe3JldHVybiByZXFvYmouZ2V0UmVzcG9uc2VIZWFkZXIoaGVhZGVyKTt9O307JEFqYXhEaWN0PXtfX2NsYXNzX186JHR5cGUsX19uYW1lX186J2FqYXgnfTskQWpheERpY3QuX19tcm9fXz1bJEFqYXhEaWN0LCRPYmplY3REaWN0XTskQWpheERpY3QuX19yZXByX189ZnVuY3Rpb24oc2VsZil7cmV0dXJuICc8b2JqZWN0IEFqYXg+Jzt9OyRBamF4RGljdC5fX3N0cl9fPSRBamF4RGljdC50b1N0cmluZz0kQWpheERpY3QuX19yZXByX187JEFqYXhEaWN0LmJpbmQ9ZnVuY3Rpb24oc2VsZixldnQsZnVuYyl7c2VsZlsnb25fJytldnRdPWZ1bmM7fTskQWpheERpY3Qub3Blbj1mdW5jdGlvbihzZWxmLG1ldGhvZCx1cmwsYXN5bmMpe3NlbGYuJHhtbGh0dHAub3BlbihtZXRob2QsdXJsLGFzeW5jKTt9OyRBamF4RGljdC5zZW5kPWZ1bmN0aW9uKHNlbGYscGFyYW1zKXt2YXIgcmVzPScnO2lmKCFwYXJhbXN8fHBhcmFtcy4ka2V5cy5sZW5ndGg9PTApe3NlbGYuJHhtbGh0dHAuc2VuZCgpO3JldHVybjt9ZWxzZSBpZihpc2luc3RhbmNlKHBhcmFtcyxzdHIpKXJlcz1wYXJhbXM7ZWxzZSBpZihpc2luc3RhbmNlKHBhcmFtcyxkaWN0KSl7Zm9yKGk9MDtpPHBhcmFtcy4ka2V5cy5sZW5ndGg7aSsrKXJlcys9ZW5jb2RlVVJJQ29tcG9uZW50KHN0cihwYXJhbXMuJGtleXNbaV0pKSsnPScrZW5jb2RlVVJJQ29tcG9uZW50KHN0cihwYXJhbXMuJHZhbHVlc1tpXSkpKycmJztyZXM9cmVzLnN1YnN0cigwLHJlcy5sZW5ndGgtMSk7fWVsc2UgdGhyb3cgVHlwZUVycm9yKCJzZW5kKCkgYXJndW1lbnQgbXVzdCBiZSBzdHJpbmcgb3IgZGljdG9uYXJ5LCBub3QgJyIrc3RyKHBhcmFtcy5fX2NsYXNzX18pKyInIik7c2VsZi4keG1saHR0cC5zZW5kKHJlcyk7fTskQWpheERpY3Quc2V0X2hlYWRlcj1mdW5jdGlvbihzZWxmLGtleSx2YWx1ZSl7c2VsZi4keG1saHR0cC5zZXRSZXF1ZXN0SGVhZGVyKGtleSx2YWx1ZSk7fTskQWpheERpY3Quc2V0X3RpbWVvdXQ9ZnVuY3Rpb24oc2VsZixzZWNvbmRzLGZ1bmMpe3NlbGYuJHhtbGh0dHAuJHJlcXVlc3RUaW1lcj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7c2VsZi4keG1saHR0cC5hYm9ydCgpO2Z1bmMoKTt9LHNlY29uZHMqMTAwMCk7fTtmdW5jdGlvbiBhamF4KCl7dmFyIHJlcz17X19jbGFzc19fOiRBamF4RGljdH07aWYod2luZG93LlhNTEh0dHBSZXF1ZXN0KXZhciAkeG1saHR0cD1uZXcgWE1MSHR0cFJlcXVlc3QoKTtlbHNlIHZhciAkeG1saHR0cD1uZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTskeG1saHR0cC4kcmVxdWVzdFRpbWVyPW51bGw7JHhtbGh0dHAuX19jbGFzc19fPSRYTUxIdHRwRGljdDskeG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXt2YXIgc3RhdGU9dGhpcy5yZWFkeVN0YXRlO3ZhciByZXE9dGhpcy4kYWpheDt2YXIgdGltZXI9dGhpcy4kcmVxdWVzdFRpbWVyO3ZhciBvYmo9dGhpcztpZihzdGF0ZT09PTAmJidvbl91bmluaXRpYWxpemVkJyBpbiByZXEpcmVxLm9uX3VuaW5pdGlhbGl6ZWQob2JqKTtlbHNlIGlmKHN0YXRlPT09MSYmJ29uX2xvYWRpbmcnIGluIHJlcSlyZXEub25fbG9hZGluZyhvYmopO2Vsc2UgaWYoc3RhdGU9PT0yJiYnb25fbG9hZGVkJyBpbiByZXEpcmVxLm9uX2xvYWRlZChvYmopO2Vsc2UgaWYoc3RhdGU9PT0zJiYnb25faW50ZXJhY3RpdmUnIGluIHJlcSlyZXEub25faW50ZXJhY3RpdmUob2JqKTtlbHNlIGlmKHN0YXRlPT09NCYmJ29uX2NvbXBsZXRlJyBpbiByZXEpe2lmKHRpbWVyIT09bnVsbCl3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVyKTtyZXEub25fY29tcGxldGUob2JqKTt9fTskeG1saHR0cC4kYWpheD1yZXM7cmVzLiR4bWxodHRwPSR4bWxodHRwO3JldHVybiByZXM7fWFqYXguX19jbGFzc19fPSRmYWN0b3J5O2FqYXguJGRpY3Q9JEFqYXhEaWN0O3JldHVybnthamF4OmFqYXh9O30pKCk7',
'/libs/time.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxfX25hbWVfXzondGltZScsY2xlYXJfaW50ZXJ2YWw6ZnVuY3Rpb24oaW50X2lkKXt3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRfaWQpO30sY2xlYXJfdGltZW91dDpmdW5jdGlvbih0aW1lb3V0X2lkKXt3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRfaWQpO30sY3RpbWU6ZnVuY3Rpb24odGltZXN0YW1wKXtpZih0aW1lc3RhbXA9PT11bmRlZmluZWQpdGltZXN0YW1wPWludChuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKTt2YXIgZD1uZXcgRGF0ZSgwKTtkLnNldFVUQ1NlY29uZHModGltZXN0YW1wKTtyZXR1cm4gZC50b1VUQ1N0cmluZygpO30sZ210aW1lOmZ1bmN0aW9uKCl7dmFyIGQ9bmV3IERhdGUoKTtyZXR1cm4gbGlzdChbZC5nZXRGdWxsWWVhcigpLGQuZ2V0TW9udGgoKSsxLGQuZ2V0RGF0ZSgpLGQuZ2V0SG91cnMoKSxkLmdldE1pbnV0ZXMoKSxkLmdldFNlY29uZHMoKSxkLmdldERheSgpLDAsMF0pO30scGVyZl9jb3VudGVyOmZ1bmN0aW9uKCl7cmV0dXJuIGZsb2F0KG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDAuMCk7fSxzZXRfaW50ZXJ2YWw6ZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7cmV0dXJuIGludCh3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuYyxpbnRlcnZhbCkpO30sc2V0X3RpbWVvdXQ6ZnVuY3Rpb24oZnVuYyxpbnRlcnZhbCl7d2luZG93LnNldFRpbWVvdXQoZnVuYyxpbnRlcnZhbCk7fSxsb2NhbHRpbWU6ZnVuY3Rpb24oc2Vjcyl7dmFyIGQ9bmV3IERhdGUoKTtpZihzZWNzPT09dW5kZWZpbmVkfHxzZWNzPT09Tm9uZSlyZXR1cm4gZC5nZXRUaW1lKCk7dmFyIGphbj1uZXcgRGF0ZShkLmdldEZ1bGxZZWFyKCksMCwxKTt2YXIganVsPW5ldyBEYXRlKGQuZ2V0RnVsbFllYXIoKSw2LDEpO3ZhciBkc3Q9aW50KGQuZ2V0VGltZXpvbmVPZmZzZXQoKTxNYXRoLm1heChqYW4uZ2V0VGltZXpvbmVPZmZzZXQoKSxqdWwuZ2V0VGltZXpvbmVPZmZzZXQoKSkpO3JldHVybiBsaXN0KFtkLmdldEZ1bGxZZWFyKCksZC5nZXRNb250aCgpKzEsZC5nZXREYXRlKCksZC5nZXRIb3VycygpLGQuZ2V0TWludXRlcygpLGQuZ2V0U2Vjb25kcygpLGQuZ2V0RGF5KCksMCxkc3RdKTt9LHRpbWU6ZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQoKG5ldyBEYXRlKCkuZ2V0VGltZSgpKS8xMDAwKTt9LHN0cmZ0aW1lOmZ1bmN0aW9uKGZvcm1hdCxhcmcpe2Z1bmN0aW9uIG5zKGFyZyxuYil7dmFyIHJlcz1hcmcudG9TdHJpbmcoKTt3aGlsZShyZXMubGVuZ3RoPG5iKXJlcz0nMCcrcmVzO3JldHVybiByZXM7fWlmKGFyZyl2YXIgb2JqPW5ldyBEYXRlKGFyZ1swXSxhcmdbMV0tMSxhcmdbMl0sYXJnWzNdLGFyZ1s0XSxhcmdbNV0sYXJnWzZdKTtlbHNlIHZhciBvYmo9bmV3IERhdGUoKTt2YXIgYWJiX3dlZWtkYXlzPVsnU3UnLCdNbycsJ1R1JywnV2UnLCdUaCcsJ0ZyJywnU2EnXTt2YXIgZnVsbF93ZWVrZGF5cz1bJ1N1bmRheScsJ01vbmRheScsJ1R1ZXNkYXknLCdXZWRuZXNkYXknLCdUaHVyc2RheScsJ0ZyaWRheScsJ1NhdHVyZGF5J107dmFyIGFiYl9tb250aHM9WydKYW4nLCdGZWInLCdNYXInLCdBcHInLCdNYXknLCdKdW4nLCdKdWwnLCdBdWcnLCdTZXAnLCdPY3QnLCdOb3YnLCdEZWMnXTt2YXIgZnVsbF9tb250aHM9WydKYW51YXJ5JywnRmVicnVhcnknLCdNYXJjaCcsJ0FwcmlsJywnTWF5JywnSnVuZScsJ0p1bHknLCdBdWd1c3QnLCdTZXB0ZW1iZXInLCdPY3RvYmVyJywnTm92ZW1iZXInLCdEZWNlbWJlciddO3ZhciByZXM9Zm9ybWF0O3Jlcz1yZXMucmVwbGFjZSgvJUgvLG5zKG9iai5nZXRIb3VycygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVNLyxucyhvYmouZ2V0TWludXRlcygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVTLyxucyhvYmouZ2V0U2Vjb25kcygpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVZLyxucyhvYmouZ2V0RnVsbFllYXIoKSw0KSk7cmVzPXJlcy5yZXBsYWNlKC8leS8sbnMob2JqLmdldEZ1bGxZZWFyKCksNCkuc3Vic3RyKDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVtLyxucyhvYmouZ2V0TW9udGgoKSsxLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVkLyxucyhvYmouZ2V0RGF0ZSgpLDIpKTtyZXM9cmVzLnJlcGxhY2UoLyVhLyxhYmJfd2Vla2RheXNbb2JqLmdldERheSgpXSk7cmVzPXJlcy5yZXBsYWNlKC8lQS8sZnVsbF93ZWVrZGF5c1tvYmouZ2V0RGF5KCldKTtyZXM9cmVzLnJlcGxhY2UoLyViLyxhYmJfbW9udGhzW29iai5nZXRNb250aCgpXSk7cmVzPXJlcy5yZXBsYWNlKC8lQi8sZnVsbF9tb250aHNbb2JqLmdldE1vbnRoKCldKTtyZXR1cm4gcmVzO30sc3RydWN0X3RpbWU6ZnVuY3Rpb24oYXJnKXtpZighaXNpbnN0YW5jZShhcmcsW3R1cGxlLGxpc3RdKSl0aHJvdyBUeXBlRXJyb3IoJ2NvbnN0cnVjdG9yIHJlcXVpcmVzIGEgc2VxdWVuY2UnKTtpZihsZW4oYXJnKSE9OSl0aHJvdyBUeXBlRXJyb3IoInRpbWUuc3RydWN0X3RpbWUoKSB0YWtlcyBhIDktc2VxdWVuY2UgKCIrbGVuKGFyZykrIi1zZXF1ZW5jZSBnaXZlbiIpO3ZhciByZXM9YXJnO3ZhciBuYW1lcz1bJ3RtX3llYXInLCd0bV9tb24nLCd0bV9tZGF5JywndG1faG91cicsJ3RtX21pbicsJ3RtX3NlYycsJ3RtX3dkYXknLCd0bV95ZGF5JywndG1faXNkc3QnLCd0bV96b25lJywndG1fZ210b2ZmJ107cmVzLl9fZ2V0YXR0cl9fPWZ1bmN0aW9uKGF0dHIpe3ZhciBpeD1uYW1lcy5pbmRleE9mKGF0dHIpO2lmKGl4Pi0xKXJldHVybiBhcmcuX19nZXRpdGVtX18oaXgpO2lmKHR5cGVvZiByZXNbYXR0cl09PT0nZnVuY3Rpb24nKXJldHVybihmdW5jdGlvbihvYmope3JldHVybiBmdW5jdGlvbigpe3JldHVybiBvYmpbYXR0cl0uYXBwbHkob2JqLGFyZ3VtZW50cyk7fTt9KShyZXMpO2Vsc2UgaWYocmVzW2F0dHJdIT09dW5kZWZpbmVkKXJldHVybiByZXNbYXR0cl07ZWxzZSB0aHJvdyBBdHRyaWJ1dGVFcnJvcigib2JqZWN0IGhhcyBubyBhdHRyaWJ1dGUgJyIrYXR0cisiJyIpO307cmV0dXJuIHJlczt9fTs=',
'/libs/_browser.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxhbGVydDpmdW5jdGlvbihtZXNzYWdlKXt3aW5kb3cuYWxlcnQobWVzc2FnZSk7fSxjb25maXJtOmZ1bmN0aW9uKG1lc3NhZ2Upe3JldHVybiBKU09iamVjdCh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7fSxkb2M6JERPTU5vZGUoZG9jdW1lbnQpLG1vdXNlQ29vcmRzOmZ1bmN0aW9uKGV2KXtyZXR1cm4gSlNPYmplY3QoJG1vdXNlQ29vcmRzKGV2KSk7fSxwcm9tcHQ6ZnVuY3Rpb24obWVzc2FnZSxkZWZhdWx0X3ZhbHVlKXtyZXR1cm4gSlNPYmplY3Qod2luZG93LnByb21wdChtZXNzYWdlLGRlZmF1bHRfdmFsdWUpKTt9LHdpbjpKU09iamVjdCh3aW5kb3cpfTskbW9kdWxlLl9fY2xhc3NfXz0kbW9kdWxlOyRtb2R1bGUuX19zdHJfXz1mdW5jdGlvbigpe3JldHVybiAiPG1vZHVsZSAnYnJvd3Nlcic+Ijt9Ow==',
'/libs/random.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxyYW5kb206ZnVuY3Rpb24oKXtpZihhcmd1bWVudHMubGVuZ3RoPjApdGhyb3cgVHlwZUVycm9yKCJyYW5kb20oKSB0YWtlcyBubyBhcmd1bWVudHMgKCIrYXJndW1lbnRzLmxlbmd0aCsiIGdpdmVuKSIpO2Vsc2UgcmV0dXJuIGZsb2F0KE1hdGgucmFuZG9tKCkpO30scmFuZGludDpmdW5jdGlvbihhLGIpe3JldHVybiBpbnQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihiLWErMSkrYSkpO30scmFuZHJhbmdlOmZ1bmN0aW9uKHN0YXJ0LHN0b3Asc3RlcCl7aWYoc3RlcD09PXVuZGVmaW5lZClzdGVwPTE7ZWxzZSBpZihzdGVwPT0wKXt9aWYoc3RvcD09PXVuZGVmaW5lZCl7c3RvcD1zdGFydDtzdGFydD0wO312YXIgd2lkdGg9c3RvcC1zdGFydDtpZihzdGVwPT0xJiZ3aWR0aD4wKXJldHVybiBzdGFydCtpbnQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKndpZHRoKSk7ZWxzZXt9dmFyIG47aWYoc3RlcD4wKW49TWF0aC5mbG9vcigod2lkdGgrc3RlcC0xKS9zdGVwKTtlbHNlIG49TWF0aC5mbG9vcigod2lkdGgrc3RlcCsxKS9zdGVwKTtyZXR1cm4gc3RhcnQrc3RlcCppbnQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKm4pKTt9LHNodWZmbGU6ZnVuY3Rpb24oeCxybmQpe2lmKHgubGVuZ3RoPD0xKXJldHVybiB4O2lmKHJuZD09PXVuZGVmaW5lZClybmQ9TWF0aC5yYW5kb207Zm9yKHZhciBqLG8saT14Lmxlbmd0aDtpO2o9cGFyc2VJbnQocm5kKCkqaSksbz14Wy0taV0seFtpXT14W2pdLHhbal09byk7fX07JG1vZHVsZS5fX2NsYXNzX189JG1vZHVsZTskbW9kdWxlLl9fc3RyX189ZnVuY3Rpb24oKXtyZXR1cm4gIjxtb2R1bGUgJ3JhbmRvbSc+Ijt9Ow==',
'/libs/math.js':'dmFyIGZsb2F0X2NoZWNrPWZ1bmN0aW9uKHgpe2lmKGlzaW5zdGFuY2UoeCxmbG9hdCkpcmV0dXJuIHgudmFsdWU7cmV0dXJuIHg7fTt2YXIgaXNpbmY9ZnVuY3Rpb24oeCl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO3JldHVybiB4MT09LUluZmluaXR5fHx4MT09SW5maW5pdHl8fHgxPT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFl8fHgxPT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7fTskbW9kdWxlPXtfX2dldGF0dHJfXzpmdW5jdGlvbihhdHRyKXt2YXIgcmVzPXRoaXNbYXR0cl07aWYocmVzPT09dW5kZWZpbmVkKSRyYWlzZSgnQXR0cmlidXRlRXJyb3InLCdtb2R1bGUgbWF0aCBoYXMgbm8gYXR0cmlidXRlICcrYXR0cik7cmV0dXJuIHJlczt9LGFjb3M6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguYWNvcyhmbG9hdF9jaGVjayh4KSkpO30sYWNvc2g6ZnVuY3Rpb24oeCl7aWYoaXNpbmYoeCkpcmV0dXJuIGZsb2F0KCdpbmYnKTt2YXIgeT1mbG9hdF9jaGVjayh4KTtyZXR1cm4gZmxvYXQoTWF0aC5sb2coeStNYXRoLnNxcnQoeSp5LTEpKSk7fSxhc2luOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmFzaW4oZmxvYXRfY2hlY2soeCkpKTt9LGFzaW5oOmZ1bmN0aW9uKHgpe2lmKGlzaW5mKHgpKXJldHVybiBmbG9hdCgnaW5mJyk7dmFyIHk9ZmxvYXRfY2hlY2soeCk7cmV0dXJuIGZsb2F0KE1hdGgubG9nKHkrTWF0aC5zcXJ0KHkqeSsxKSkpO30sYXRhbjpmdW5jdGlvbih4KXtpZihpc2luZih4KSlyZXR1cm4gZmxvYXQoTWF0aC5QSS8yKTtyZXR1cm4gZmxvYXQoTWF0aC5hdGFuKGZsb2F0X2NoZWNrKHgpKSk7fSxhdGFuMjpmdW5jdGlvbih5LHgpe3JldHVybiBmbG9hdChNYXRoLmF0YW4yKHkseCkpO30sYXRhbmg6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7aWYoeT09MClyZXR1cm4gMDtyZXR1cm4gZmxvYXQoMC41Kk1hdGgubG9nKCgxL3krMSkvKDEveS0xKSkpO30sY2VpbDpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTtpZighaXNOYU4ocGFyc2VGbG9hdCh5KSkmJmlzRmluaXRlKHkpKXJldHVybiBpbnQoTWF0aC5jZWlsKHkpKTt0cnl7cmV0dXJuIGdldGF0dHIoeSwnX19jZWlsX18nKSgpO31jYXRjaChlcnIpeyRwb3BfZXhjKCk7fSRyYWlzZSgnVmFsdWVFcnJvcicsJ29iamVjdCBpcyBub3QgYSBudW1iZXIgYW5kIGRvZXMgbm90IGNvbnRhaW4gX19jZWlsX18nKTt9LGNvcHlzaWduOmZ1bmN0aW9uKHgseSl7dmFyIHgxPU1hdGguYWJzKGZsb2F0X2NoZWNrKHgpKTt2YXIgeTE9ZmxvYXRfY2hlY2soeSk7dmFyIHNpZ249eTE/eTE8MD8tMToxOjE7aWYoaXNpbnN0YW5jZSh4LGludCkpcmV0dXJuIHgxKnNpZ247ZWxzZSByZXR1cm4gZmxvYXQoeDEqc2lnbik7fSxjb3M6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguY29zKGZsb2F0X2NoZWNrKHgpKSk7fSxkZWdyZWVzOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChmbG9hdF9jaGVjayh4KSoxODAvTWF0aC5QSSk7fSxlOmZsb2F0KE1hdGguRSksZXJmOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB0PTEuMC8oMS4wKzAuNSpNYXRoLmFicyh5KSk7dmFyIGFucz0xLXQqTWF0aC5leHAoLXkqeS0xLjI2NTUxMjIzK3QqKDEuMDAwMDIzNjgrdCooMC4zNzQwOTE5Nit0KigwLjA5Njc4NDE4K3QqKC0wLjE4NjI4ODA2K3QqKDAuMjc4ODY4MDcrdCooLTEuMTM1MjAzOTgrdCooMS40ODg1MTU4Nyt0KigtMC44MjIxNTIyMyt0KjAuMTcwODcyNzcpKSkpKSkpKSk7aWYoeT49MC4wKXJldHVybiBhbnM7cmV0dXJuIC1hbnM7fSxlcmZjOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB0PTEuMC8oMS4wKzAuNSpNYXRoLmFicyh5KSk7dmFyIGFucz0xLXQqTWF0aC5leHAoLXkqeS0xLjI2NTUxMjIzK3QqKDEuMDAwMDIzNjgrdCooMC4zNzQwOTE5Nit0KigwLjA5Njc4NDE4K3QqKC0wLjE4NjI4ODA2K3QqKDAuMjc4ODY4MDcrdCooLTEuMTM1MjAzOTgrdCooMS40ODg1MTU4Nyt0KigtMC44MjIxNTIyMyt0KjAuMTcwODcyNzcpKSkpKSkpKSk7aWYoeT49MC4wKXJldHVybiAxLWFucztyZXR1cm4gMSthbnM7fSxleHA6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGguZXhwKGZsb2F0X2NoZWNrKHgpKSk7fSxleHBtMTpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5leHAoZmxvYXRfY2hlY2soeCkpLTEpO30sZmFiczpmdW5jdGlvbih4KXtyZXR1cm4geD4wP2Zsb2F0KHgpOmZsb2F0KC14KTt9LGZhY3RvcmlhbDpmdW5jdGlvbih4KXt2YXIgeT1mbG9hdF9jaGVjayh4KTt2YXIgcj0xO2Zvcih2YXIgaT0yO2k8PXk7aSsrKXIqPWk7cmV0dXJuIHI7fSxmbG9vcjpmdW5jdGlvbih4KXtyZXR1cm4gTWF0aC5mbG9vcihmbG9hdF9jaGVjayh4KSk7fSxmbW9kOmZ1bmN0aW9uKHgseSl7cmV0dXJuIGZsb2F0KGZsb2F0X2NoZWNrKHgpJWZsb2F0X2NoZWNrKHkpKTt9LGZyZXhwOmZ1bmN0aW9uKHgpe3ZhciB4MT1mbG9hdF9jaGVjayh4KTt2YXIgZXg9TWF0aC5mbG9vcihNYXRoLmxvZyh4MSkvTWF0aC5sb2coMikpKzE7ZnJhYz14MS9NYXRoLnBvdygyLGV4KTtyZXR1cm4gW2ZyYWMsZXhdO30sZ2FtbWE6ZnVuY3Rpb24oeCl7dmFyIHk9ZmxvYXRfY2hlY2soeCk7dmFyIHo9eSsxO3ZhciBkMT1NYXRoLnNxcnQoMipNYXRoLlBJKS96O3ZhciBkMj0xLjAwMDAwMDAwMDE5MDAxNTtkMis9NzYuMTgwMDkxNzI5NDcxNDYvKHorMSk7ZDIrPS04Ni41MDUzMjAzMjk0MTY3Ny8oeisyKTtkMis9MjQuMDE0MDk4MjQwODMwOTEvKHorMyk7ZDIrPS0xLjIzMTczOTU3MjQ1MDE1NS8oeis0KTtkMis9MS4yMDg2NTA5NzM4NjYxNzlFLTMvKHorNSk7ZDIrPS01LjM5NTIzOTM4NDk1M0UtNi8oeis2KTtyZXR1cm4gZDEqZDIqTWF0aC5wb3coeis1LjUseiswLjUpKk1hdGguZXhwKC0oeis1LjUpKTt9LGh5cG90OmZ1bmN0aW9uKHgseSl7dmFyIHgxPWZsb2F0X2NoZWNrKHgpO3ZhciB5MT1mbG9hdF9jaGVjayh5KTtyZXR1cm4gZmxvYXQoTWF0aC5zcXJ0KHgxKngxK3kxKnkxKSk7fSxpc2Zpbml0ZTpmdW5jdGlvbih4KXtyZXR1cm4gaXNGaW5pdGUoZmxvYXRfY2hlY2soeCkpO30saXNpbmY6ZnVuY3Rpb24oeCl7cmV0dXJuIGlzaW5mKHgpO30saXNuYW46ZnVuY3Rpb24oeCl7cmV0dXJuIGlzTmFOKGZsb2F0X2NoZWNrKHgpKTt9LGxkZXhwOmZ1bmN0aW9uKHgsaSl7dmFyIG11bD1NYXRoLnBvdygyLGZsb2F0X2NoZWNrKGkpKTtpZihpc2luc3RhbmNlKHgsaW50KSlyZXR1cm4geCptdWw7ZWxzZSByZXR1cm4gZmxvYXQoeC52YWx1ZSptdWwpO30sbGdhbW1hOmZ1bmN0aW9uKHgpe3ZhciB5PWZsb2F0X2NoZWNrKHgpO3ZhciB6PXkrMTt2YXIgZDE9TWF0aC5zcXJ0KDIqTWF0aC5QSSkvejt2YXIgZDI9MS4wMDAwMDAwMDAxOTAwMTU7ZDIrPTc2LjE4MDA5MTcyOTQ3MTQ2Lyh6KzEpO2QyKz0tODYuNTA1MzIwMzI5NDE2NzcvKHorMik7ZDIrPTI0LjAxNDA5ODI0MDgzMDkxLyh6KzMpO2QyKz0tMS4yMzE3Mzk1NzI0NTAxNTUvKHorNCk7ZDIrPTEuMjA4NjUwOTczODY2MTc5RS0zLyh6KzUpO2QyKz0tNS4zOTUyMzkzODQ5NTNFLTYvKHorNik7cmV0dXJuIGZsb2F0KE1hdGgubG9nKE1hdGguYWJzKGQxKmQyKk1hdGgucG93KHorNS41LHorMC41KSpNYXRoLmV4cCgtKHorNS41KSkpKSk7fSxsb2c6ZnVuY3Rpb24oeCxiYXNlKXt2YXIgeDE9ZmxvYXRfY2hlY2soeCk7aWYoYmFzZT09PXVuZGVmaW5lZClyZXR1cm4gZmxvYXQoTWF0aC5sb2coeDEpKTtyZXR1cm4gZmxvYXQoTWF0aC5sb2coeDEpL01hdGgubG9nKGZsb2F0X2NoZWNrKGJhc2UpKSk7fSxsb2cxcDpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5sb2coMS4wK2Zsb2F0X2NoZWNrKHgpKSk7fSxsb2cyOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLmxvZyhmbG9hdF9jaGVjayh4KSkvTWF0aC5MTjIpO30sbG9nMTA6ZnVuY3Rpb24oeCl7cmV0dXJuIGZsb2F0KE1hdGgubG9nKGZsb2F0X2NoZWNrKHgpKS9NYXRoLkxOMTApO30sbW9kZjpmdW5jdGlvbih4KXt2YXIgeDE9ZmxvYXRfY2hlY2soeCk7aWYoeDE+MCl7dmFyIGk9ZmxvYXQoeDEtTWF0aC5mbG9vcih4MSkpO3JldHVybiBbaSxmbG9hdCh4MS1pKV07fXZhciBpPWZsb2F0KHgxLU1hdGguY2VpbCh4MSkpO3JldHVybiBbaSxmbG9hdChNYXRoLmNlaWwoeDEpKV07fSxwaTpmbG9hdChNYXRoLlBJKSxwb3c6ZnVuY3Rpb24oeCx5KXtpZihpc2luc3RhbmNlKHgsaW50KSlyZXR1cm4gTWF0aC5wb3coeCxmbG9hdF9jaGVjayh5KSk7ZWxzZSByZXR1cm4gZmxvYXQoTWF0aC5wb3coeC52YWx1ZSxmbG9hdF9jaGVjayh5KSkpO30scmFkaWFuczpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoZmxvYXRfY2hlY2soeCkqTWF0aC5QSS8xODApO30sc2luOmZ1bmN0aW9uKHgpe3JldHVybiBmbG9hdChNYXRoLnNpbihmbG9hdF9jaGVjayh4KSkpO30sc3FydDpmdW5jdGlvbih4KXtyZXR1cm4gZmxvYXQoTWF0aC5zcXJ0KGZsb2F0X2NoZWNrKHgpKSk7fSx0cnVuYzpmdW5jdGlvbih4KXt0cnl7cmV0dXJuIGdldGF0dHIoeCwnX190cnVuY19fJykoKTt9Y2F0Y2goZXJyKXskcG9wX2V4YygpO312YXIgeDE9ZmxvYXRfY2hlY2soeCk7aWYoIWlzTmFOKHBhcnNlRmxvYXQoeDEpKSYmaXNGaW5pdGUoeDEpKXJldHVybiBpbnQoTWF0aC5mbG9vcih4MSkpOyRyYWlzZSgnVmFsdWVFcnJvcicsJ29iamVjdCBpcyBub3QgYSBudW1iZXIgYW5kIGRvZXMgbm90IGNvbnRhaW4gX190cnVuY19fJyk7fX07Zm9yKHZhciAkYXR0ciBpbiAkbW9kdWxlKWlmKHR5cGVvZiAkbW9kdWxlWyRhdHRyXT09PSdmdW5jdGlvbicpeyRtb2R1bGVbJGF0dHJdLl9fcmVwcl9fPShmdW5jdGlvbihmdW5jKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gJzxidWlsdC1pbiBmdW5jdGlvbiAnK2Z1bmMrJz4nO307fSkoJGF0dHIpOyRtb2R1bGVbJGF0dHJdLl9fc3RyX189KGZ1bmN0aW9uKGZ1bmMpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiAnPGJ1aWx0LWluIGZ1bmN0aW9uICcrZnVuYysnPic7fTt9KSgkYXR0cik7fQ==',
'/libs/html.js':'JG1vZHVsZT0oZnVuY3Rpb24oKXtmdW5jdGlvbiAkVGFnKHRhZ05hbWUsYXJncyl7dmFyIG9iaj0kRE9NTm9kZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpKTtvYmoucGFyZW50PXRoaXM7aWYoYXJncyE9dW5kZWZpbmVkJiZhcmdzLmxlbmd0aD4wKXskc3RhcnQ9MDskZmlyc3Q9YXJnc1swXTtpZigkZmlyc3QuX19jbGFzc19fIT09JEt3KXskc3RhcnQ9MTtpZihpc2luc3RhbmNlKCRmaXJzdCxbc3RyLGludCxmbG9hdF0pKXt0eHQ9ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKCRmaXJzdCkpO29iai5lbHQuYXBwZW5kQ2hpbGQodHh0KTt9ZWxzZSBpZigkZmlyc3QuX19jbGFzc19fPT09JFRhZ1N1bURpY3QpZm9yKCRpPTA7JGk8JGZpcnN0LmNoaWxkcmVuLmxlbmd0aDskaSsrKW9iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmNoaWxkcmVuWyRpXS5lbHQpO2Vsc2UgdHJ5e29iai5lbHQuYXBwZW5kQ2hpbGQoJGZpcnN0LmVsdCk7fWNhdGNoKGVycil7Y29uc29sZS5sb2coJ2VycmV1ciAnK2Vycik7dGhyb3cgVmFsdWVFcnJvcignd3JvbmcgZWxlbWVudCAnKyRmaXJzdCk7fX1mb3IodmFyICRpPSRzdGFydDskaTxhcmdzLmxlbmd0aDskaSsrKXskYXJnPWFyZ3NbJGldO2lmKCRhcmcmJiRhcmcuX19jbGFzc19fPT09JEt3KWlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigwLDIpPT09Im9uIilldmFsKCdET01Ob2RlLmJpbmQob2JqLCInKyRhcmcubmFtZS50b0xvd2VyQ2FzZSgpLnN1YnN0cigyKSsnIixmdW5jdGlvbigpeycrJGFyZy52YWx1ZSsnfSknKTtlbHNlIGlmKCRhcmcubmFtZS50b0xvd2VyQ2FzZSgpPT0ic3R5bGUiKURPTU5vZGUuc2V0X3N0eWxlKG9iaiwkYXJnLnZhbHVlKTtlbHNlIGlmKCRhcmcudmFsdWUhPT1mYWxzZSl0cnl7dmFyIGFyZz0kYXJnLm5hbWUudG9Mb3dlckNhc2UoKTtvYmouZWx0LnNldEF0dHJpYnV0ZShhcmcsJGFyZy52YWx1ZSk7aWYoYXJnPT0iY2xhc3MiKW9iai5lbHQuc2V0QXR0cmlidXRlKCJjbGFzc05hbWUiLCRhcmcudmFsdWUpO31jYXRjaChlcnIpe2NvbnNvbGUubG9nKCdlcnJldXIgJytlcnIpO3Rocm93IFZhbHVlRXJyb3IoImNhbid0IHNldCBhdHRyaWJ1dGUgIiskYXJnLm5hbWUpO319fXJldHVybiBvYmo7fWZ1bmN0aW9uIEEoKXt2YXIgb2JqPSRUYWcoJ0EnLGFyZ3VtZW50cyk7cmV0dXJuIG9iajt9QS5fX25hbWVfXz0naHRtbC5BJzt2YXIgJHNyYz1BKycnOyR0YWdzPVsnQScsJ0FCQlInLCdBQ1JPTllNJywnQUREUkVTUycsJ0FQUExFVCcsJ0InLCdCRE8nLCdCSUcnLCdCTE9DS1FVT1RFJywnQlVUVE9OJywnQ0FQVElPTicsJ0NFTlRFUicsJ0NJVEUnLCdDT0RFJywnREVMJywnREZOJywnRElSJywnRElWJywnREwnLCdFTScsJ0ZJRUxEU0VUJywnRk9OVCcsJ0ZPUk0nLCdGUkFNRVNFVCcsJ0gxJywnSDInLCdIMycsJ0g0JywnSDUnLCdINicsJ0knLCdJRlJBTUUnLCdJTlMnLCdLQkQnLCdMQUJFTCcsJ0xFR0VORCcsJ01BUCcsJ01FTlUnLCdOT0ZSQU1FUycsJ05PU0NSSVBUJywnT0JKRUNUJywnT0wnLCdPUFRHUk9VUCcsJ1BSRScsJ1EnLCdTJywnU0FNUCcsJ1NDUklQVCcsJ1NFTEVDVCcsJ1NNQUxMJywnU1BBTicsJ1NUUklLRScsJ1NUUk9ORycsJ1NUWUxFJywnU1VCJywnU1VQJywnVEFCTEUnLCdURVhUQVJFQScsJ1RJVExFJywnVFQnLCdVJywnVUwnLCdWQVInLCdCT0RZJywnQ09MR1JPVVAnLCdERCcsJ0RUJywnSEVBRCcsJ0hUTUwnLCdMSScsJ1AnLCdUQk9EWScsJ09QVElPTicsJ1REJywnVEZPT1QnLCdUSCcsJ1RIRUFEJywnVFInLCdBUkVBJywnQkFTRScsJ0JBU0VGT05UJywnQlInLCdDT0wnLCdGUkFNRScsJ0hSJywnSU1HJywnSU5QVVQnLCdJU0lOREVYJywnTElOSycsJ01FVEEnLCdQQVJBTSddOyR0YWdzPSR0YWdzLmNvbmNhdChbJ0FSVElDTEUnLCdBU0lERScsJ0FVRElPJywnQkRJJywnQ0FOVkFTJywnQ09NTUFORCcsJ0RBVEFMSVNUJywnREVUQUlMUycsJ0RJQUxPRycsJ0VNQkVEJywnRklHQ0FQVElPTicsJ0ZJR1VSRScsJ0ZPT1RFUicsJ0hFQURFUicsJ0tFWUdFTicsJ01BUksnLCdNRVRFUicsJ05BVicsJ09VVFBVVCcsJ1BST0dSRVNTJywnUlAnLCdSVCcsJ1JVQlknLCdTRUNUSU9OJywnU09VUkNFJywnU1VNTUFSWScsJ1RJTUUnLCdUUkFDSycsJ1ZJREVPJywnV0JSJ10pO3ZhciBvYmo9bmV3IE9iamVjdCgpO2ZvcigkaT0wOyRpPCR0YWdzLmxlbmd0aDskaSsrKXskY29kZT0kc3JjLnJlcGxhY2UoL0EvZ20sJHRhZ3NbJGldKTtldmFsKCJvYmouIiskdGFnc1skaV0rIj0iKyRjb2RlKTtldmFsKCJvYmouIiskdGFnc1skaV0rJy5fX25hbWVfXz0iaHRtbC4nKyR0YWdzWyRpXSsnIicpO31vYmouX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fTtyZXR1cm4gb2JqO30pKCk7',
'/libs/hashlib.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7aWYoYXR0cj09J25ldycpcmV0dXJuICRoYXNobGliX25ldztyZXR1cm4gdGhpc1thdHRyXTt9LG1kNTpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ21kNScpO30sc2hhMTpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTEnKTt9LHNoYTIyNDpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTIyNCcpO30sc2hhMjU2OmZ1bmN0aW9uKCl7cmV0dXJuICRoYXNobGliX25ldygnc2hhMjU2Jyk7fSxzaGEzODQ6ZnVuY3Rpb24oKXtyZXR1cm4gJGhhc2hsaWJfbmV3KCdzaGEzODQnKTt9LHNoYTUxMjpmdW5jdGlvbigpe3JldHVybiAkaGFzaGxpYl9uZXcoJ3NoYTUxMicpO30sYWxnb3JpdGhtc19ndWFyYW50ZWVkOlsnbWQ1Jywnc2hhMScsJ3NoYTIyNCcsJ3NoYTI1NicsJ3NoYTM4NCcsJ3NoYTUxMiddLGFsZ29yaXRobXNfYXZhaWxhYmxlOlsnbWQ1Jywnc2hhMScsJ3NoYTIyNCcsJ3NoYTI1NicsJ3NoYTM4NCcsJ3NoYTUxMiddfTtmdW5jdGlvbiAkZ2V0X0NyeXB0b0pTX2xpYihhbGcpe3ZhciBpbXA9JGltcG9ydGVyKCk7dmFyICR4bWxodHRwPWltcFswXSxmYWtlX3FzPWltcFsxXSx0aW1lcj1pbXBbMl0scmVzPW51bGw7JHhtbGh0dHAub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7aWYoJHhtbGh0dHAucmVhZHlTdGF0ZT09NCl7d2luZG93LmNsZWFyVGltZW91dCh0aW1lcik7aWYoJHhtbGh0dHAuc3RhdHVzPT0yMDB8fCR4bWxodHRwLnN0YXR1cz09MClyZXM9JHhtbGh0dHAucmVzcG9uc2VUZXh0O2Vsc2V7cmVzPUVycm9yKCk7cmVzLm5hbWU9J05vdEZvdW5kRXJyb3InO3Jlcy5tZXNzYWdlPSJObyBDcnlwdG9KUyBsaWIgbmFtZWQgJyIrYWxnKyInIjt9fX07JHhtbGh0dHAub3BlbignR0VUJyxfX0JSWVRIT05fXy5icnl0aG9uX3BhdGgrJ2xpYnMvY3J5cHRvX2pzL3JvbGx1cHMvJythbGcrJy5qcycrZmFrZV9xcyxmYWxzZSk7aWYoJ292ZXJyaWRlTWltZVR5cGUnIGluICR4bWxodHRwKSR4bWxodHRwLm92ZXJyaWRlTWltZVR5cGUoInRleHQvcGxhaW4iKTskeG1saHR0cC5zZW5kKCk7aWYocmVzLmNvbnN0cnVjdG9yPT09RXJyb3IpdGhyb3cgcmVzO3RyeXtldmFsKHJlcysiOyBfX0JSWVRIT05fXy5DcnlwdG9KUz1DcnlwdG9KUzsiKTt9Y2F0Y2goZXJyKXt0aHJvdyBFcnJvcigiSlMgRXZhbCBFcnJvciIsIkNhbm5vdCBldmFsIENyeXB0b0pTIGFsZ29yaXRobSAnIithbGcrIicgOiBlcnJvcjoiK2Vycik7fX1mdW5jdGlvbiAkaGFzaGxpYl9uZXcoYWxnKXtpZihhbGc9PSdtZDUnKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uTUQ1PT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdtZDUnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5NRDUuY3JlYXRlKCk7fWVsc2UgaWYoYWxnPT0nc2hhMScpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEExPT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGExJyk7dGhpcy5oYXNoPV9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMS5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGEyMjQnKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjI0PT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGEyMjQnKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEyMjQuY3JlYXRlKCk7fWVsc2UgaWYoYWxnPT0nc2hhMjU2Jyl7aWYoX19CUllUSE9OX18uQ3J5cHRvPT09dW5kZWZpbmVkfHxfX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTI1Nj09PXVuZGVmaW5lZCkkZ2V0X0NyeXB0b0pTX2xpYignc2hhMjU2Jyk7dGhpcy5oYXNoPV9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO31lbHNlIGlmKGFsZz09J3NoYTM4NCcpe2lmKF9fQlJZVEhPTl9fLkNyeXB0bz09PXVuZGVmaW5lZHx8X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEEzODQ9PT11bmRlZmluZWQpJGdldF9DcnlwdG9KU19saWIoJ3NoYTM4NCcpO3RoaXMuaGFzaD1fX0JSWVRIT05fXy5DcnlwdG9KUy5hbGdvLlNIQTM4NC5jcmVhdGUoKTt9ZWxzZSBpZihhbGc9PSdzaGE1MTInKXtpZihfX0JSWVRIT05fXy5DcnlwdG89PT11bmRlZmluZWR8fF9fQlJZVEhPTl9fLkNyeXB0b0pTLmFsZ28uU0hBNTEyPT09dW5kZWZpbmVkKSRnZXRfQ3J5cHRvSlNfbGliKCdzaGE1MTInKTt0aGlzLmhhc2g9X19CUllUSE9OX18uQ3J5cHRvSlMuYWxnby5TSEE1MTIuY3JlYXRlKCk7fWVsc2UgJHJhaXNlKCdBdHRyaWJ1dGVFcnJvcicsJ0ludmFsaWQgaGFzaCBhbGdvcml0aG06JythbGcpO3RoaXMuX19jbGFzc19fPSR0eXBlO3RoaXMuX19nZXRhdHRyX189ZnVuY3Rpb24oYXR0cil7cmV0dXJuICRnZXRhdHRyKHRoaXMsYXR0cik7fTt0aGlzLl9fc3RyX189ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oZXhkaWdlc3QoKTt9O3RoaXMudXBkYXRlPWZ1bmN0aW9uKG1zZyl7dGhpcy5oYXNoLnVwZGF0ZShtc2cpO307dGhpcy5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzaC5jbG9uZSgpO307dGhpcy5oZXhkaWdlc3Q9ZnVuY3Rpb24oKXt2YXIgdGVtcD10aGlzLmhhc2guY2xvbmUoKTt0ZW1wPXRlbXAuZmluYWxpemUoKTtyZXR1cm4gdGVtcC50b1N0cmluZygpO307cmV0dXJuIHRoaXM7fSRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdoYXNobGliJz4iO307',
'/libs/_os.js':'JG1vZHVsZT17X19nZXRhdHRyX186ZnVuY3Rpb24oYXR0cil7cmV0dXJuIHRoaXNbYXR0cl07fSxyYW5kb206ZnVuY3Rpb24oKXtyZXR1cm4gZmxvYXQoTWF0aC5yYW5kb20oKSk7fSxyYW5kaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGludChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqKGItYSkrYSkpO319OyRtb2R1bGUuX19jbGFzc19fPSRtb2R1bGU7JG1vZHVsZS5fX3N0cl9fPWZ1bmN0aW9uKCl7cmV0dXJuICI8bW9kdWxlICdfb3MnPiI7fTs=',
'/libs/crypto_js/rollups/sha1.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihlLG0pe3ZhciBwPXt9LGo9cC5saWI9e30sbD1mdW5jdGlvbigpe30sZj1qLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtsLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBsKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0sbj1qLldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPW0/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fGgpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLHE9YS53b3JkcyxkPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihkJTQpZm9yKHZhciBiPTA7YjxhO2IrKyljW2QrYj4+PjJdfD0ocVtiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NSk8PDI0LTgqKChkK2IpJTQpO2Vsc2UgaWYoNjU1MzU8cS5sZW5ndGgpZm9yKGI9MDtiPGE7Yis9NCljW2QrYj4+PjJdPXFbYj4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMscSk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9ZS5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGI9MDtiPGE7Yis9NCljLnB1c2goNDI5NDk2NzI5NiplLnJhbmRvbSgpfDApO3JldHVybiBuZXcgbi5pbml0KGMsYSk7fX0pLGI9cC5lbmM9e30saD1iLkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYj1bXSxkPTA7ZDxhO2QrKyl7dmFyIGY9Y1tkPj4+Ml0+Pj4yNC04KihkJTQpJjI1NTtiLnB1c2goKGY+Pj40KS50b1N0cmluZygxNikpO2IucHVzaCgoZiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGIuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsYj1bXSxkPTA7ZDxjO2QrPTIpYltkPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGQsMiksMTYpPDwyNC00KihkJTgpO3JldHVybiBuZXcgbi5pbml0KGIsYy8yKTt9fSxnPWIuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBiPVtdLGQ9MDtkPGE7ZCsrKWIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbZD4+PjJdPj4+MjQtOCooZCU0KSYyNTUpKTtyZXR1cm4gYi5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxiPVtdLGQ9MDtkPGM7ZCsrKWJbZD4+PjJdfD0oYS5jaGFyQ29kZUF0KGQpJjI1NSk8PDI0LTgqKGQlNCk7cmV0dXJuIG5ldyBuLmluaXQoYixjKTt9fSxyPWIuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShnLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZy5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSxrPWouQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBuLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ci5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsYj1jLndvcmRzLGQ9Yy5zaWdCeXRlcyxmPXRoaXMuYmxvY2tTaXplLGg9ZC8oNCpmKSxoPWE/ZS5jZWlsKGgpOmUubWF4KChofDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1oKmY7ZD1lLm1pbig0KmEsZCk7aWYoYSl7Zm9yKHZhciBnPTA7ZzxhO2crPWYpdGhpcy5fZG9Qcm9jZXNzQmxvY2soYixnKTtnPWIuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09ZDt9cmV0dXJuIG5ldyBuLmluaXQoZyxkKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2ouSGFzaGVyPWsuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe2sucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsYil7cmV0dXJuIG5ldyBhLmluaXQoYikuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGYpe3JldHVybiBuZXcgcy5ITUFDLmluaXQoYSxmKS5maW5hbGl6ZShiKTt9O319KTt2YXIgcz1wLmFsZ289e307cmV0dXJuIHA7fShNYXRoKTsoZnVuY3Rpb24oKXt2YXIgZT1DcnlwdG9KUyxtPWUubGliLHA9bS5Xb3JkQXJyYXksaj1tLkhhc2hlcixsPVtdLG09ZS5hbGdvLlNIQTE9ai5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgcC5pbml0KFsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF0pO30sX2RvUHJvY2Vzc0Jsb2NrOmZ1bmN0aW9uKGYsbil7Zm9yKHZhciBiPXRoaXMuX2hhc2gud29yZHMsaD1iWzBdLGc9YlsxXSxlPWJbMl0saz1iWzNdLGo9Yls0XSxhPTA7ODA+YTthKyspe2lmKDE2PmEpbFthXT1mW24rYV18MDtlbHNle3ZhciBjPWxbYS0zXV5sW2EtOF1ebFthLTE0XV5sW2EtMTZdO2xbYV09Yzw8MXxjPj4+MzE7fWM9KGg8PDV8aD4+PjI3KStqK2xbYV07Yz0yMD5hP2MrKChnJmV8fmcmaykrMTUxODUwMDI0OSk6NDA+YT9jKygoZ15lXmspKzE4NTk3NzUzOTMpOjYwPmE/YysoKGcmZXxnJmt8ZSZrKS0xODk0MDA3NTg4KTpjKygoZ15lXmspLTg5OTQ5NzUxNCk7aj1rO2s9ZTtlPWc8PDMwfGc+Pj4yO2c9aDtoPWM7fWJbMF09YlswXStofDA7YlsxXT1iWzFdK2d8MDtiWzJdPWJbMl0rZXwwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2p8MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGY9dGhpcy5fZGF0YSxlPWYud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsaD04KmYuc2lnQnl0ZXM7ZVtoPj4+NV18PTEyODw8MjQtaCUzMjtlWyhoKzY0Pj4+OTw8NCkrMTRdPU1hdGguZmxvb3IoYi80Mjk0OTY3Mjk2KTtlWyhoKzY0Pj4+OTw8NCkrMTVdPWI7Zi5zaWdCeXRlcz00KmUubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGU9ai5jbG9uZS5jYWxsKHRoaXMpO2UuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBlO319KTtlLlNIQTE9ai5fY3JlYXRlSGVscGVyKG0pO2UuSG1hY1NIQTE9ai5fY3JlYXRlSG1hY0hlbHBlcihtKTt9KSgpOw==',
'/libs/crypto_js/rollups/sha3.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbih2LHApe3ZhciBkPXt9LHU9ZC5saWI9e30scj1mdW5jdGlvbigpe30sZj11LkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtyLnByb3RvdHlwZT10aGlzO3ZhciBiPW5ldyByKCk7YSYmYi5taXhJbihhKTtiLmhhc093blByb3BlcnR5KCJpbml0Iil8fChiLmluaXQ9ZnVuY3Rpb24oKXtiLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtiLmluaXQucHJvdG90eXBlPWI7Yi4kc3VwZXI9dGhpcztyZXR1cm4gYjt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scz11LldvcmRBcnJheT1mLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGIpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWIhPXA/Yjo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHkpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLndvcmRzLGM9YS53b3JkcyxqPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihqJTQpZm9yKHZhciBuPTA7bjxhO24rKyliW2orbj4+PjJdfD0oY1tuPj4+Ml0+Pj4yNC04KihuJTQpJjI1NSk8PDI0LTgqKChqK24pJTQpO2Vsc2UgaWYoNjU1MzU8Yy5sZW5ndGgpZm9yKG49MDtuPGE7bis9NCliW2orbj4+PjJdPWNbbj4+PjJdO2Vsc2UgYi5wdXNoLmFwcGx5KGIsYyk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YVtiPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGIlNCk7YS5sZW5ndGg9di5jZWlsKGIvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPWYuY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGE7Yys9NCliLnB1c2goNDI5NDk2NzI5Nip2LnJhbmRvbSgpfDApO3JldHVybiBuZXcgcy5pbml0KGIsYSk7fX0pLHg9ZC5lbmM9e30seT14LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgYz1bXSxqPTA7ajxhO2orKyl7dmFyIG49YltqPj4+Ml0+Pj4yNC04KihqJTQpJjI1NTtjLnB1c2goKG4+Pj40KS50b1N0cmluZygxNikpO2MucHVzaCgobiYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGMuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9YS5sZW5ndGgsYz1bXSxqPTA7ajxiO2orPTIpY1tqPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGosMiksMTYpPDwyNC00KihqJTgpO3JldHVybiBuZXcgcy5pbml0KGMsYi8yKTt9fSxlPXguTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGI9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBjPVtdLGo9MDtqPGE7aisrKWMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGJbaj4+PjJdPj4+MjQtOCooaiU0KSYyNTUpKTtyZXR1cm4gYy5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPVtdLGo9MDtqPGI7aisrKWNbaj4+PjJdfD0oYS5jaGFyQ29kZUF0KGopJjI1NSk8PDI0LTgqKGolNCk7cmV0dXJuIG5ldyBzLmluaXQoYyxiKTt9fSxxPXguVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShlLnN0cmluZ2lmeShhKSkpO31jYXRjaChiKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gZS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx0PXUuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1mLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBzLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9cS5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2RhdGEsYz1iLndvcmRzLGo9Yi5zaWdCeXRlcyxuPXRoaXMuYmxvY2tTaXplLGU9ai8oNCpuKSxlPWE/di5jZWlsKGUpOnYubWF4KChlfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1lKm47aj12Lm1pbig0KmEsaik7aWYoYSl7Zm9yKHZhciBmPTA7ZjxhO2YrPW4pdGhpcy5fZG9Qcm9jZXNzQmxvY2soYyxmKTtmPWMuc3BsaWNlKDAsYSk7Yi5zaWdCeXRlcy09ajt9cmV0dXJuIG5ldyBzLmluaXQoZixqKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9Zi5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO3UuSGFzaGVyPXQuZXh0ZW5kKHtjZmc6Zi5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3QucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7cmV0dXJuIG5ldyBhLmluaXQoYykuZmluYWxpemUoYik7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiLGMpe3JldHVybiBuZXcgdy5ITUFDLmluaXQoYSxjKS5maW5hbGl6ZShiKTt9O319KTt2YXIgdz1kLmFsZ289e307cmV0dXJuIGQ7fShNYXRoKTsoZnVuY3Rpb24odil7dmFyIHA9Q3J5cHRvSlMsZD1wLmxpYix1PWQuQmFzZSxyPWQuV29yZEFycmF5LHA9cC54NjQ9e307cC5Xb3JkPXUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGYscyl7dGhpcy5oaWdoPWY7dGhpcy5sb3c9czt9fSk7cC5Xb3JkQXJyYXk9dS5leHRlbmQoe2luaXQ6ZnVuY3Rpb24oZixzKXtmPXRoaXMud29yZHM9Znx8W107dGhpcy5zaWdCeXRlcz1zIT12P3M6OCpmLmxlbmd0aDt9LHRvWDMyOmZ1bmN0aW9uKCl7Zm9yKHZhciBmPXRoaXMud29yZHMscz1mLmxlbmd0aCxkPVtdLHA9MDtwPHM7cCsrKXt2YXIgZT1mW3BdO2QucHVzaChlLmhpZ2gpO2QucHVzaChlLmxvdyk7fXJldHVybiByLmNyZWF0ZShkLHRoaXMuc2lnQnl0ZXMpO30sY2xvbmU6ZnVuY3Rpb24oKXtmb3IodmFyIGY9dS5jbG9uZS5jYWxsKHRoaXMpLGQ9Zi53b3Jkcz10aGlzLndvcmRzLnNsaWNlKDApLHA9ZC5sZW5ndGgscj0wO3I8cDtyKyspZFtyXT1kW3JdLmNsb25lKCk7cmV0dXJuIGY7fX0pO30pKCk7KGZ1bmN0aW9uKHYpe2Zvcih2YXIgcD1DcnlwdG9KUyxkPXAubGliLHU9ZC5Xb3JkQXJyYXkscj1kLkhhc2hlcixmPXAueDY0LldvcmQsZD1wLmFsZ28scz1bXSx4PVtdLHk9W10sZT0xLHE9MCx0PTA7MjQ+dDt0Kyspe3NbZSs1KnFdPSh0KzEpKih0KzIpLzIlNjQ7dmFyIHc9KDIqZSszKnEpJTUsZT1xJTUscT13O31mb3IoZT0wOzU+ZTtlKyspZm9yKHE9MDs1PnE7cSsrKXhbZSs1KnFdPXErNSooKDIqZSszKnEpJTUpO2U9MTtmb3IocT0wOzI0PnE7cSsrKXtmb3IodmFyIGE9dz10PTA7Nz5hO2ErKyl7aWYoZSYxKXt2YXIgYj0oMTw8YSktMTszMj5iP3dePTE8PGI6dF49MTw8Yi0zMjt9ZT1lJjEyOD9lPDwxXjExMzplPDwxO315W3FdPWYuY3JlYXRlKHQsdyk7fWZvcih2YXIgYz1bXSxlPTA7MjU+ZTtlKyspY1tlXT1mLmNyZWF0ZSgpO2Q9ZC5TSEEzPXIuZXh0ZW5kKHtjZmc6ci5jZmcuZXh0ZW5kKHtvdXRwdXRMZW5ndGg6NTEyfSksX2RvUmVzZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5fc3RhdGU9W10sYj0wOzI1PmI7YisrKWFbYl09bmV3IGYuaW5pdCgpO3RoaXMuYmxvY2tTaXplPSgxNjAwLTIqdGhpcy5jZmcub3V0cHV0TGVuZ3RoKS8zMjt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGIpe2Zvcih2YXIgZT10aGlzLl9zdGF0ZSxmPXRoaXMuYmxvY2tTaXplLzIsaD0wO2g8ZjtoKyspe3ZhciBsPWFbYisyKmhdLG09YVtiKzIqaCsxXSxsPShsPDw4fGw+Pj4yNCkmMTY3MTE5MzV8KGw8PDI0fGw+Pj44KSY0Mjc4MjU1MzYwLG09KG08PDh8bT4+PjI0KSYxNjcxMTkzNXwobTw8MjR8bT4+PjgpJjQyNzgyNTUzNjAsZz1lW2hdO2cuaGlnaF49bTtnLmxvd149bDt9Zm9yKGY9MDsyND5mO2YrKyl7Zm9yKGg9MDs1Pmg7aCsrKXtmb3IodmFyIGQ9bD0wLGs9MDs1Pms7aysrKWc9ZVtoKzUqa10sbF49Zy5oaWdoLGRePWcubG93O2c9Y1toXTtnLmhpZ2g9bDtnLmxvdz1kO31mb3IoaD0wOzU+aDtoKyspe2c9Y1soaCs0KSU1XTtsPWNbKGgrMSklNV07bT1sLmhpZ2g7az1sLmxvdztsPWcuaGlnaF4obTw8MXxrPj4+MzEpO2Q9Zy5sb3deKGs8PDF8bT4+PjMxKTtmb3Ioaz0wOzU+aztrKyspZz1lW2grNSprXSxnLmhpZ2hePWwsZy5sb3dePWQ7fWZvcihtPTE7MjU+bTttKyspZz1lW21dLGg9Zy5oaWdoLGc9Zy5sb3csaz1zW21dLDMyPms/KGw9aDw8a3xnPj4+MzItayxkPWc8PGt8aD4+PjMyLWspOihsPWc8PGstMzJ8aD4+PjY0LWssZD1oPDxrLTMyfGc+Pj42NC1rKSxnPWNbeFttXV0sZy5oaWdoPWwsZy5sb3c9ZDtnPWNbMF07aD1lWzBdO2cuaGlnaD1oLmhpZ2g7Zy5sb3c9aC5sb3c7Zm9yKGg9MDs1Pmg7aCsrKWZvcihrPTA7NT5rO2srKyltPWgrNSprLGc9ZVttXSxsPWNbbV0sbT1jWyhoKzEpJTUrNSprXSxkPWNbKGgrMiklNSs1KmtdLGcuaGlnaD1sLmhpZ2hefm0uaGlnaCZkLmhpZ2gsZy5sb3c9bC5sb3defm0ubG93JmQubG93O2c9ZVswXTtoPXlbZl07Zy5oaWdoXj1oLmhpZ2g7Zy5sb3dePWgubG93O319LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxiPWEud29yZHMsYz04KmEuc2lnQnl0ZXMsZT0zMip0aGlzLmJsb2NrU2l6ZTtiW2M+Pj41XXw9MTw8MjQtYyUzMjtiWyh2LmNlaWwoKGMrMSkvZSkqZT4+PjUpLTFdfD0xMjg7YS5zaWdCeXRlcz00KmIubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtmb3IodmFyIGE9dGhpcy5fc3RhdGUsYj10aGlzLmNmZy5vdXRwdXRMZW5ndGgvOCxjPWIvOCxlPVtdLGg9MDtoPGM7aCsrKXt2YXIgZD1hW2hdLGY9ZC5oaWdoLGQ9ZC5sb3csZj0oZjw8OHxmPj4+MjQpJjE2NzExOTM1fChmPDwyNHxmPj4+OCkmNDI3ODI1NTM2MCxkPShkPDw4fGQ+Pj4yNCkmMTY3MTE5MzV8KGQ8PDI0fGQ+Pj44KSY0Mjc4MjU1MzYwO2UucHVzaChkKTtlLnB1c2goZik7fXJldHVybiBuZXcgdS5pbml0KGUsYik7fSxjbG9uZTpmdW5jdGlvbigpe2Zvcih2YXIgYT1yLmNsb25lLmNhbGwodGhpcyksYj1hLl9zdGF0ZT10aGlzLl9zdGF0ZS5zbGljZSgwKSxjPTA7MjU+YztjKyspYltjXT1iW2NdLmNsb25lKCk7cmV0dXJuIGE7fX0pO3AuU0hBMz1yLl9jcmVhdGVIZWxwZXIoZCk7cC5IbWFjU0hBMz1yLl9jcmVhdGVIbWFjSGVscGVyKGQpO30pKE1hdGgpOw==',
'/libs/crypto_js/rollups/sha224.js':'dmFyIENyeXB0b0pTPUNyeXB0b0pTfHxmdW5jdGlvbihnLGwpe3ZhciBmPXt9LGs9Zi5saWI9e30saD1mdW5jdGlvbigpe30sbT1rLkJhc2U9e2V4dGVuZDpmdW5jdGlvbihhKXtoLnByb3RvdHlwZT10aGlzO3ZhciBjPW5ldyBoKCk7YSYmYy5taXhJbihhKTtjLmhhc093blByb3BlcnR5KCJpbml0Iil8fChjLmluaXQ9ZnVuY3Rpb24oKXtjLiRzdXBlci5pbml0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt9KTtjLmluaXQucHJvdG90eXBlPWM7Yy4kc3VwZXI9dGhpcztyZXR1cm4gYzt9LGNyZWF0ZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZXh0ZW5kKCk7YS5pbml0LmFwcGx5KGEsYXJndW1lbnRzKTtyZXR1cm4gYTt9LGluaXQ6ZnVuY3Rpb24oKXt9LG1peEluOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJih0aGlzW2NdPWFbY10pO2EuaGFzT3duUHJvcGVydHkoInRvU3RyaW5nIikmJih0aGlzLnRvU3RyaW5nPWEudG9TdHJpbmcpO30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbml0LnByb3RvdHlwZS5leHRlbmQodGhpcyk7fX0scT1rLldvcmRBcnJheT1tLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihhLGMpe2E9dGhpcy53b3Jkcz1hfHxbXTt0aGlzLnNpZ0J5dGVzPWMhPWw/Yzo0KmEubGVuZ3RoO30sdG9TdHJpbmc6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fHMpLnN0cmluZ2lmeSh0aGlzKTt9LGNvbmNhdDpmdW5jdGlvbihhKXt2YXIgYz10aGlzLndvcmRzLGQ9YS53b3JkcyxiPXRoaXMuc2lnQnl0ZXM7YT1hLnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihiJTQpZm9yKHZhciBlPTA7ZTxhO2UrKyljW2IrZT4+PjJdfD0oZFtlPj4+Ml0+Pj4yNC04KihlJTQpJjI1NSk8PDI0LTgqKChiK2UpJTQpO2Vsc2UgaWYoNjU1MzU8ZC5sZW5ndGgpZm9yKGU9MDtlPGE7ZSs9NCljW2IrZT4+PjJdPWRbZT4+PjJdO2Vsc2UgYy5wdXNoLmFwcGx5KGMsZCk7dGhpcy5zaWdCeXRlcys9YTtyZXR1cm4gdGhpczt9LGNsYW1wOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy53b3JkcyxjPXRoaXMuc2lnQnl0ZXM7YVtjPj4+Ml0mPTQyOTQ5NjcyOTU8PDMyLTgqKGMlNCk7YS5sZW5ndGg9Zy5jZWlsKGMvNCk7fSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPW0uY2xvbmUuY2FsbCh0aGlzKTthLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIGE7fSxyYW5kb206ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPVtdLGQ9MDtkPGE7ZCs9NCljLnB1c2goNDI5NDk2NzI5NipnLnJhbmRvbSgpfDApO3JldHVybiBuZXcgcS5pbml0KGMsYSk7fX0pLHQ9Zi5lbmM9e30scz10LkhleD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3ZhciBjPWEud29yZHM7YT1hLnNpZ0J5dGVzO2Zvcih2YXIgZD1bXSxiPTA7YjxhO2IrKyl7dmFyIGU9Y1tiPj4+Ml0+Pj4yNC04KihiJTQpJjI1NTtkLnB1c2goKGU+Pj40KS50b1N0cmluZygxNikpO2QucHVzaCgoZSYxNSkudG9TdHJpbmcoMTYpKTt9cmV0dXJuIGQuam9pbigiIik7fSxwYXJzZTpmdW5jdGlvbihhKXtmb3IodmFyIGM9YS5sZW5ndGgsZD1bXSxiPTA7YjxjO2IrPTIpZFtiPj4+M118PXBhcnNlSW50KGEuc3Vic3RyKGIsMiksMTYpPDwyNC00KihiJTgpO3JldHVybiBuZXcgcS5pbml0KGQsYy8yKTt9fSxuPXQuTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24oYSl7dmFyIGM9YS53b3JkczthPWEuc2lnQnl0ZXM7Zm9yKHZhciBkPVtdLGI9MDtiPGE7YisrKWQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNbYj4+PjJdPj4+MjQtOCooYiU0KSYyNTUpKTtyZXR1cm4gZC5qb2luKCIiKTt9LHBhcnNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1hLmxlbmd0aCxkPVtdLGI9MDtiPGM7YisrKWRbYj4+PjJdfD0oYS5jaGFyQ29kZUF0KGIpJjI1NSk8PDI0LTgqKGIlNCk7cmV0dXJuIG5ldyBxLmluaXQoZCxjKTt9fSxqPXQuVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKGEpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShuLnN0cmluZ2lmeShhKSkpO31jYXRjaChjKXt0aHJvdyBFcnJvcigiTWFsZm9ybWVkIFVURi04IGRhdGEiKTt9fSxwYXJzZTpmdW5jdGlvbihhKXtyZXR1cm4gbi5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYSkpKTt9fSx3PWsuQnVmZmVyZWRCbG9ja0FsZ29yaXRobT1tLmV4dGVuZCh7cmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLl9kYXRhPW5ldyBxLmluaXQoKTt0aGlzLl9uRGF0YUJ5dGVzPTA7fSxfYXBwZW5kOmZ1bmN0aW9uKGEpeyJzdHJpbmciPT10eXBlb2YgYSYmKGE9ai5wYXJzZShhKSk7dGhpcy5fZGF0YS5jb25jYXQoYSk7dGhpcy5fbkRhdGFCeXRlcys9YS5zaWdCeXRlczt9LF9wcm9jZXNzOmZ1bmN0aW9uKGEpe3ZhciBjPXRoaXMuX2RhdGEsZD1jLndvcmRzLGI9Yy5zaWdCeXRlcyxlPXRoaXMuYmxvY2tTaXplLGY9Yi8oNCplKSxmPWE/Zy5jZWlsKGYpOmcubWF4KChmfDApLXRoaXMuX21pbkJ1ZmZlclNpemUsMCk7YT1mKmU7Yj1nLm1pbig0KmEsYik7aWYoYSl7Zm9yKHZhciB1PTA7dTxhO3UrPWUpdGhpcy5fZG9Qcm9jZXNzQmxvY2soZCx1KTt1PWQuc3BsaWNlKDAsYSk7Yy5zaWdCeXRlcy09Yjt9cmV0dXJuIG5ldyBxLmluaXQodSxiKTt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9bS5jbG9uZS5jYWxsKHRoaXMpO2EuX2RhdGE9dGhpcy5fZGF0YS5jbG9uZSgpO3JldHVybiBhO30sX21pbkJ1ZmZlclNpemU6MH0pO2suSGFzaGVyPXcuZXh0ZW5kKHtjZmc6bS5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKGEpe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChhKTt0aGlzLnJlc2V0KCk7fSxyZXNldDpmdW5jdGlvbigpe3cucmVzZXQuY2FsbCh0aGlzKTt0aGlzLl9kb1Jlc2V0KCk7fSx1cGRhdGU6ZnVuY3Rpb24oYSl7dGhpcy5fYXBwZW5kKGEpO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpczt9LGZpbmFsaXplOmZ1bmN0aW9uKGEpe2EmJnRoaXMuX2FwcGVuZChhKTtyZXR1cm4gdGhpcy5fZG9GaW5hbGl6ZSgpO30sYmxvY2tTaXplOjE2LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMsZCl7cmV0dXJuIG5ldyBhLmluaXQoZCkuZmluYWxpemUoYyk7fTt9LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihjLGQpe3JldHVybiBuZXcgdi5ITUFDLmluaXQoYSxkKS5maW5hbGl6ZShjKTt9O319KTt2YXIgdj1mLmFsZ289e307cmV0dXJuIGY7fShNYXRoKTsoZnVuY3Rpb24oZyl7Zm9yKHZhciBsPUNyeXB0b0pTLGY9bC5saWIsaz1mLldvcmRBcnJheSxoPWYuSGFzaGVyLGY9bC5hbGdvLG09W10scT1bXSx0PWZ1bmN0aW9uKGEpe3JldHVybiA0Mjk0OTY3Mjk2KihhLShhfDApKXwwO30scz0yLG49MDs2ND5uOyl7dmFyIGo7YTp7aj1zO2Zvcih2YXIgdz1nLnNxcnQoaiksdj0yO3Y8PXc7disrKWlmKCEoaiV2KSl7aj0hMTticmVhayBhO31qPSEwO31qJiYoOD5uJiYobVtuXT10KGcucG93KHMsMC41KSkpLHFbbl09dChnLnBvdyhzLDEvMykpLG4rKyk7cysrO312YXIgYT1bXSxmPWYuU0hBMjU2PWguZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGsuaW5pdChtLnNsaWNlKDApKTt9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihjLGQpe2Zvcih2YXIgYj10aGlzLl9oYXNoLndvcmRzLGU9YlswXSxmPWJbMV0sZz1iWzJdLGs9YlszXSxoPWJbNF0sbD1iWzVdLG09Yls2XSxuPWJbN10scD0wOzY0PnA7cCsrKXtpZigxNj5wKWFbcF09Y1tkK3BdfDA7ZWxzZXt2YXIgaj1hW3AtMTVdLHI9YVtwLTJdO2FbcF09KChqPDwyNXxqPj4+NyleKGo8PDE0fGo+Pj4xOCleaj4+PjMpK2FbcC03XSsoKHI8PDE1fHI+Pj4xNyleKHI8PDEzfHI+Pj4xOSlecj4+PjEwKSthW3AtMTZdO31qPW4rKChoPDwyNnxoPj4+NileKGg8PDIxfGg+Pj4xMSleKGg8PDd8aD4+PjI1KSkrKGgmbF5+aCZtKStxW3BdK2FbcF07cj0oKGU8PDMwfGU+Pj4yKV4oZTw8MTl8ZT4+PjEzKV4oZTw8MTB8ZT4+PjIyKSkrKGUmZl5lJmdeZiZnKTtuPW07bT1sO2w9aDtoPWsranwwO2s9ZztnPWY7Zj1lO2U9aityfDA7fWJbMF09YlswXStlfDA7YlsxXT1iWzFdK2Z8MDtiWzJdPWJbMl0rZ3wwO2JbM109YlszXStrfDA7Yls0XT1iWzRdK2h8MDtiWzVdPWJbNV0rbHwwO2JbNl09Yls2XSttfDA7Yls3XT1iWzddK258MDt9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fZGF0YSxkPWEud29yZHMsYj04KnRoaXMuX25EYXRhQnl0ZXMsZT04KmEuc2lnQnl0ZXM7ZFtlPj4+NV18PTEyODw8MjQtZSUzMjtkWyhlKzY0Pj4+OTw8NCkrMTRdPWcuZmxvb3IoYi80Mjk0OTY3Mjk2KTtkWyhlKzY0Pj4+OTw8NCkrMTVdPWI7YS5zaWdCeXRlcz00KmQubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaDt9LGNsb25lOmZ1bmN0aW9uKCl7dmFyIGE9aC5jbG9uZS5jYWxsKHRoaXMpO2EuX2hhc2g9dGhpcy5faGFzaC5jbG9uZSgpO3JldHVybiBhO319KTtsLlNIQTI1Nj1oLl9jcmVhdGVIZWxwZXIoZik7bC5IbWFjU0hBMjU2PWguX2NyZWF0ZUhtYWNIZWxwZXIoZik7fSkoTWF0aCk7KGZ1bmN0aW9uKCl7dmFyIGc9Q3J5cHRvSlMsbD1nLmxpYi5Xb3JkQXJyYXksZj1nLmFsZ28saz1mLlNIQTI1NixmPWYuU0hBMjI0PWsuZXh0ZW5kKHtfZG9SZXNldDpmdW5jdGlvbigpe3RoaXMuX2hhc2g9bmV3IGwuaW5pdChbMzIzODM3MTAzMiw5MTQxNTA2NjMsODEyNzAyOTk5LDQxNDQ5MTI2OTcsNDI5MDc3NTg1NywxNzUwNjAzMDI1LDE2OTQwNzY4MzksMzIwNDA3NTQyOF0pO30sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgZj1rLl9kb0ZpbmFsaXplLmNhbGwodGhpcyk7Zi5zaWdCeXRlcy09NDtyZXR1cm4gZjt9fSk7Zy5TSEEyMjQ9ay5fY3JlYXRlSGVscGVyKGYpO2cuSG1hY1NIQTIyND1rLl9jcmVhdGVIbWFjSGVscGVyKGYpO30pKCk7',
'/libs/crypto_js/rollups/sha512.js':'',
'/libs/crypto_js/rollups/sha384.js':'',
'/libs/crypto_js/rollups/md5.js':'',
'/Lib/heapq.py':'',
'/Lib/calendar.py':'',
'/Lib/markdown.py':'',
'/Lib/_functools.py':'ZGVmIHBhcnRpYWwoZnVuYywgKmFyZ3MsICoqa2V5d29yZHMpOgogICAgZGVmIG5ld2Z1bmMoKmZhcmdzLCAqKmZrZXl3b3Jkcyk6CiAgICAgICAgbmV3a2V5d29yZHMgPSBrZXl3b3Jkcy5jb3B5KCkKICAgICAgICBuZXdrZXl3b3Jkcy51cGRhdGUoZmtleXdvcmRzKQogICAgICAgIHJldHVybiBmdW5jKCooYXJncyArIGZhcmdzKSwgKipuZXdrZXl3b3JkcykKICAgIG5ld2Z1bmMuZnVuYyA9IGZ1bmMKICAgIG5ld2Z1bmMuYXJncyA9IGFyZ3MKICAgIG5ld2Z1bmMua2V5d29yZHMgPSBrZXl3b3JkcwogICAgcmV0dXJuIG5ld2Z1bmMKCmRlZiByZWR1Y2UoZnVuYyxpdGVyYWJsZSxpbml0aWFsaXplcj1Ob25lKToKICAgIGFyZ3MgPSBpdGVyKGl0ZXJhYmxlKQogICAgaWYgaW5pdGlhbGl6ZXIgaXMgbm90IE5vbmU6CiAgICAgICAgcmVzID0gaW5pdGlhbGl6ZXIKICAgIGVsc2U6CiAgICAgICAgcmVzID0gbmV4dChhcmcpCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzID0gZnVuYyhyZXMsbmV4dChhcmdzKSkKICAgICAgICBleGNlcHQgU3RvcEl0ZXJhdGlvbjoKICAgICAgICAgICAgcmV0dXJuIHJlcwoKZGVmIGNtcF90b19rZXkoZnVuYyk6CiAgICAiIiJUcmFuc2Zvcm0gYW4gb2xkLXN0eWxlIGNvbXBhcmlzb24gZnVuY3Rpb24gdG8gYSBrZXkgZnVuY3Rpb24uIAogICAgCiAgICBBIGNvbXBhcmlzb24gZnVuY3Rpb24gaXMgYW55IGNhbGxhYmxlIHRoYXQgYWNjZXB0IHR3byBhcmd1bWVudHMsIAogICAgY29tcGFyZXMgdGhlbSwgYW5kIHJldHVybnMgYSBuZWdhdGl2ZSBudW1iZXIgZm9yIGxlc3MtdGhhbiwgemVybyBmb3IgCiAgICBlcXVhbGl0eSwgb3IgYSBwb3NpdGl2ZSBudW1iZXIgZm9yIGdyZWF0ZXItdGhhbi4gQSBrZXkgZnVuY3Rpb24gaXMgYSAKICAgIGNhbGxhYmxlIHRoYXQgYWNjZXB0cyBvbmUgYXJndW1lbnQgYW5kIHJldHVybnMgYW5vdGhlciB2YWx1ZSBpbmRpY2F0aW5nIAogICAgdGhlIHBvc2l0aW9uIGluIHRoZSBkZXNpcmVkIGNvbGxhdGlvbiBzZXF1ZW5jZS4iIiIKCiAgICAjIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTYzNjI3NDQvaG93LWRvZXMtcHl0aG9ucy1jbXAtdG8ta2V5LWZ1bmN0aW9uLXdvcmsKICAgICMgYnkgTWFydGlqbiBQaWV0ZXJzCiAgICBjbGFzcyBLOgogICAgICAgIF9fc2xvdHNfXyA9IFsnb2JqJ10KICAgICAgICBkZWYgX19pbml0X18oc2VsZiwgb2JqLCAqYXJncyk6CiAgICAgICAgICAgIHNlbGYub2JqID0gb2JqCiAgICAgICAgZGVmIF9fbHRfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgICAgIHJldHVybiBteWNtcChzZWxmLm9iaiwgb3RoZXIub2JqKSA8IDAKICAgICAgICBkZWYgX19ndF9fKHNlbGYsIG90aGVyKToKICAgICAgICAgICAgcmV0dXJuIG15Y21wKHNlbGYub2JqLCBvdGhlci5vYmopID4gMAogICAgICAgIGRlZiBfX2VxX18oc2VsZiwgb3RoZXIpOgogICAgICAgICAgICByZXR1cm4gbXljbXAoc2VsZi5vYmosIG90aGVyLm9iaikgPT0gMAogICAgICAgIGRlZiBfX2xlX18oc2VsZiwgb3RoZXIpOgogICAgICAgICAgICByZXR1cm4gbXljbXAoc2VsZi5vYmosIG90aGVyLm9iaikgPD0gMAogICAgICAgIGRlZiBfX2dlX18oc2VsZiwgb3RoZXIpOgogICAgICAgICAgICByZXR1cm4gbXljbXAoc2VsZi5vYmosIG90aGVyLm9iaikgPj0gMAogICAgICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgICAgICByZXR1cm4gbXljbXAoc2VsZi5vYmosIG90aGVyLm9iaikgIT0gMAogICAgICAgIGRlZiBfX2hhc2hfXyhzZWxmKToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCdoYXNoIG5vdCBpbXBsZW1lbnRlZCcpCiAgICAgICAgCiAgICByZXR1cm4gSyhmdW5jKQ==',
'/Lib/fnmatch.py':'IiIiRmlsZW5hbWUgbWF0Y2hpbmcgd2l0aCBzaGVsbCBwYXR0ZXJucy4NCg0KZm5tYXRjaChGSUxFTkFNRSwgUEFUVEVSTikgbWF0Y2hlcyBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsIGNvbnZlbnRpb24uDQpmbm1hdGNoY2FzZShGSUxFTkFNRSwgUEFUVEVSTikgYWx3YXlzIHRha2VzIGNhc2UgaW4gYWNjb3VudC4NCg0KVGhlIGZ1bmN0aW9ucyBvcGVyYXRlIGJ5IHRyYW5zbGF0aW5nIHRoZSBwYXR0ZXJuIGludG8gYSByZWd1bGFyDQpleHByZXNzaW9uLiAgVGhleSBjYWNoZSB0aGUgY29tcGlsZWQgcmVndWxhciBleHByZXNzaW9ucyBmb3Igc3BlZWQuDQoNClRoZSBmdW5jdGlvbiB0cmFuc2xhdGUoUEFUVEVSTikgcmV0dXJucyBhIHJlZ3VsYXIgZXhwcmVzc2lvbg0KY29ycmVzcG9uZGluZyB0byBQQVRURVJOLiAgKEl0IGRvZXMgbm90IGNvbXBpbGUgaXQuKQ0KIiIiDQppbXBvcnQgb3MNCmltcG9ydCBwb3NpeHBhdGgNCmltcG9ydCByZQ0KaW1wb3J0IGZ1bmN0b29scw0KDQpfX2FsbF9fID0gWyJmaWx0ZXIiLCAiZm5tYXRjaCIsICJmbm1hdGNoY2FzZSIsICJ0cmFuc2xhdGUiXQ0KDQpkZWYgZm5tYXRjaChuYW1lLCBwYXQpOg0KICAgICIiIlRlc3Qgd2hldGhlciBGSUxFTkFNRSBtYXRjaGVzIFBBVFRFUk4uDQoNCiAgICBQYXR0ZXJucyBhcmUgVW5peCBzaGVsbCBzdHlsZToNCg0KICAgICogICAgICAgbWF0Y2hlcyBldmVyeXRoaW5nDQogICAgPyAgICAgICBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyDQogICAgW3NlcV0gICBtYXRjaGVzIGFueSBjaGFyYWN0ZXIgaW4gc2VxDQogICAgWyFzZXFdICBtYXRjaGVzIGFueSBjaGFyIG5vdCBpbiBzZXENCg0KICAgIEFuIGluaXRpYWwgcGVyaW9kIGluIEZJTEVOQU1FIGlzIG5vdCBzcGVjaWFsLg0KICAgIEJvdGggRklMRU5BTUUgYW5kIFBBVFRFUk4gYXJlIGZpcnN0IGNhc2Utbm9ybWFsaXplZA0KICAgIGlmIHRoZSBvcGVyYXRpbmcgc3lzdGVtIHJlcXVpcmVzIGl0Lg0KICAgIElmIHlvdSBkb24ndCB3YW50IHRoaXMsIHVzZSBmbm1hdGNoY2FzZShGSUxFTkFNRSwgUEFUVEVSTikuDQogICAgIiIiDQogICAgbmFtZSA9IG9zLnBhdGgubm9ybWNhc2UobmFtZSkNCiAgICBwYXQgPSBvcy5wYXRoLm5vcm1jYXNlKHBhdCkNCiAgICByZXR1cm4gZm5tYXRjaGNhc2UobmFtZSwgcGF0KQ0KDQpAZnVuY3Rvb2xzLmxydV9jYWNoZShtYXhzaXplPTI1MCwgdHlwZWQ9VHJ1ZSkNCmRlZiBfY29tcGlsZV9wYXR0ZXJuKHBhdCk6DQogICAgaWYgaXNpbnN0YW5jZShwYXQsIGJ5dGVzKToNCiAgICAgICAgcGF0X3N0ciA9IHN0cihwYXQsICdJU08tODg1OS0xJykNCiAgICAgICAgcmVzX3N0ciA9IHRyYW5zbGF0ZShwYXRfc3RyKQ0KICAgICAgICByZXMgPSBieXRlcyhyZXNfc3RyLCAnSVNPLTg4NTktMScpDQogICAgZWxzZToNCiAgICAgICAgcmVzID0gdHJhbnNsYXRlKHBhdCkNCiAgICByZXR1cm4gcmUuY29tcGlsZShyZXMpLm1hdGNoDQoNCmRlZiBmaWx0ZXIobmFtZXMsIHBhdCk6DQogICAgIiIiUmV0dXJuIHRoZSBzdWJzZXQgb2YgdGhlIGxpc3QgTkFNRVMgdGhhdCBtYXRjaCBQQVQuIiIiDQogICAgcmVzdWx0ID0gW10NCiAgICBwYXQgPSBvcy5wYXRoLm5vcm1jYXNlKHBhdCkNCiAgICBtYXRjaCA9IF9jb21waWxlX3BhdHRlcm4ocGF0KQ0KICAgIGlmIG9zLnBhdGggaXMgcG9zaXhwYXRoOg0KICAgICAgICAjIG5vcm1jYXNlIG9uIHBvc2l4IGlzIE5PUC4gT3B0aW1pemUgaXQgYXdheSBmcm9tIHRoZSBsb29wLg0KICAgICAgICBmb3IgbmFtZSBpbiBuYW1lczoNCiAgICAgICAgICAgIGlmIG1hdGNoKG5hbWUpOg0KICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobmFtZSkNCiAgICBlbHNlOg0KICAgICAgICBmb3IgbmFtZSBpbiBuYW1lczoNCiAgICAgICAgICAgIGlmIG1hdGNoKG9zLnBhdGgubm9ybWNhc2UobmFtZSkpOg0KICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobmFtZSkNCiAgICByZXR1cm4gcmVzdWx0DQoNCmRlZiBmbm1hdGNoY2FzZShuYW1lLCBwYXQpOg0KICAgICIiIlRlc3Qgd2hldGhlciBGSUxFTkFNRSBtYXRjaGVzIFBBVFRFUk4sIGluY2x1ZGluZyBjYXNlLg0KDQogICAgVGhpcyBpcyBhIHZlcnNpb24gb2YgZm5tYXRjaCgpIHdoaWNoIGRvZXNuJ3QgY2FzZS1ub3JtYWxpemUNCiAgICBpdHMgYXJndW1lbnRzLg0KICAgICIiIg0KICAgIG1hdGNoID0gX2NvbXBpbGVfcGF0dGVybihwYXQpDQogICAgcmV0dXJuIG1hdGNoKG5hbWUpIGlzIG5vdCBOb25lDQoNCg0KZGVmIHRyYW5zbGF0ZShwYXQpOg0KICAgICIiIlRyYW5zbGF0ZSBhIHNoZWxsIFBBVFRFUk4gdG8gYSByZWd1bGFyIGV4cHJlc3Npb24uDQoNCiAgICBUaGVyZSBpcyBubyB3YXkgdG8gcXVvdGUgbWV0YS1jaGFyYWN0ZXJzLg0KICAgICIiIg0KDQogICAgaSwgbiA9IDAsIGxlbihwYXQpDQogICAgcmVzID0gJycNCiAgICB3aGlsZSBpIDwgbjoNCiAgICAgICAgYyA9IHBhdFtpXQ0KICAgICAgICBpID0gaSsxDQogICAgICAgIGlmIGMgPT0gJyonOg0KICAgICAgICAgICAgcmVzID0gcmVzICsgJy4qJw0KICAgICAgICBlbGlmIGMgPT0gJz8nOg0KICAgICAgICAgICAgcmVzID0gcmVzICsgJy4nDQogICAgICAgIGVsaWYgYyA9PSAnWyc6DQogICAgICAgICAgICBqID0gaQ0KICAgICAgICAgICAgaWYgaiA8IG4gYW5kIHBhdFtqXSA9PSAnISc6DQogICAgICAgICAgICAgICAgaiA9IGorMQ0KICAgICAgICAgICAgaWYgaiA8IG4gYW5kIHBhdFtqXSA9PSAnXSc6DQogICAgICAgICAgICAgICAgaiA9IGorMQ0KICAgICAgICAgICAgd2hpbGUgaiA8IG4gYW5kIHBhdFtqXSAhPSAnXSc6DQogICAgICAgICAgICAgICAgaiA9IGorMQ0KICAgICAgICAgICAgaWYgaiA+PSBuOg0KICAgICAgICAgICAgICAgIHJlcyA9IHJlcyArICdcXFsnDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHN0dWZmID0gcGF0W2k6al0ucmVwbGFjZSgnXFwnLCdcXFxcJykNCiAgICAgICAgICAgICAgICBpID0gaisxDQogICAgICAgICAgICAgICAgaWYgc3R1ZmZbMF0gPT0gJyEnOg0KICAgICAgICAgICAgICAgICAgICBzdHVmZiA9ICdeJyArIHN0dWZmWzE6XQ0KICAgICAgICAgICAgICAgIGVsaWYgc3R1ZmZbMF0gPT0gJ14nOg0KICAgICAgICAgICAgICAgICAgICBzdHVmZiA9ICdcXCcgKyBzdHVmZg0KICAgICAgICAgICAgICAgIHJlcyA9ICclc1slc10nICUgKHJlcywgc3R1ZmYpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXMgPSByZXMgKyByZS5lc2NhcGUoYykNCiAgICByZXR1cm4gcmVzICsgJ1xaKD9tcyknDQo=',
'/Lib/errno.py':'IlRoaXMgbW9kdWxlIG1ha2VzIGF2YWlsYWJsZSBzdGFuZGFyZCBlcnJubyBzeXN0ZW0gc3ltYm9scy5cblxuVGhlIHZhbHVlIG9mIGVhY2ggc3ltYm9sIGlzIHRoZSBjb3JyZXNwb25kaW5nIGludGVnZXIgdmFsdWUsXG5lLmcuLCBvbiBtb3N0IHN5c3RlbXMsIGVycm5vLkVOT0VOVCBlcXVhbHMgdGhlIGludGVnZXIgMi5cblxuVGhlIGRpY3Rpb25hcnkgZXJybm8uZXJyb3Jjb2RlIG1hcHMgbnVtZXJpYyBjb2RlcyB0byBzeW1ib2wgbmFtZXMsXG5lLmcuLCBlcnJuby5lcnJvcmNvZGVbMl0gY291bGQgYmUgdGhlIHN0cmluZyAnRU5PRU5UJy5cblxuU3ltYm9scyB0aGF0IGFyZSBub3QgcmVsZXZhbnQgdG8gdGhlIHVuZGVybHlpbmcgc3lzdGVtIGFyZSBub3QgZGVmaW5lZC5cblxuVG8gbWFwIGVycm9yIGNvZGVzIHRvIGVycm9yIG1lc3NhZ2VzLCB1c2UgdGhlIGZ1bmN0aW9uIG9zLnN0cmVycm9yKCksXG5lLmcuIG9zLnN0cmVycm9yKDIpIGNvdWxkIHJldHVybiAnTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeScuIgoKRTJCSUcgPSA3CkVBQ0NFUyA9IDEzCkVBRERSSU5VU0UgPSA5OApFQUREUk5PVEFWQUlMID0gOTkKRUFEViA9IDY4CkVBRk5PU1VQUE9SVCA9IDk3CkVBR0FJTiA9IDExCkVBTFJFQURZID0gMTE0CkVCQURFID0gNTIKRUJBREYgPSA5CkVCQURGRCA9IDc3CkVCQURNU0cgPSA3NApFQkFEUiA9IDUzCkVCQURSUUMgPSA1NgpFQkFEU0xUID0gNTcKRUJGT05UID0gNTkKRUJVU1kgPSAxNgpFQ0hJTEQgPSAxMApFQ0hSTkcgPSA0NApFQ09NTSA9IDcwCkVDT05OQUJPUlRFRCA9IDEwMwpFQ09OTlJFRlVTRUQgPSAxMTEKRUNPTk5SRVNFVCA9IDEwNApFREVBRExLID0gMzUKRURFQURMT0NLID0gMzUKRURFU1RBRERSUkVRID0gODkKRURPTSA9IDMzCkVET1RET1QgPSA3MwpFRFFVT1QgPSAxMjIKRUVYSVNUID0gMTcKRUZBVUxUID0gMTQKRUZCSUcgPSAyNwpFSE9TVERPV04gPSAxMTIKRUhPU1RVTlJFQUNIID0gMTEzCkVJRFJNID0gNDMKRUlMU0VRID0gODQKRUlOUFJPR1JFU1MgPSAxMTUKRUlOVFIgPSA0CkVJTlZBTCA9IDIyCkVJTyA9IDUKRUlTQ09OTiA9IDEwNgpFSVNESVIgPSAyMQpFSVNOQU0gPSAxMjAKRUwySExUID0gNTEKRUwyTlNZTkMgPSA0NQpFTDNITFQgPSA0NgpFTDNSU1QgPSA0NwpFTElCQUNDID0gNzkKRUxJQkJBRCA9IDgwCkVMSUJFWEVDID0gODMKRUxJQk1BWCA9IDgyCkVMSUJTQ04gPSA4MQpFTE5STkcgPSA0OApFTE9PUCA9IDQwCkVNRklMRSA9IDI0CkVNTElOSyA9IDMxCkVNU0dTSVpFID0gOTAKRU1VTFRJSE9QID0gNzIKRU5BTUVUT09MT05HID0gMzYKRU5BVkFJTCA9IDExOQpFTkVURE9XTiA9IDEwMApFTkVUUkVTRVQgPSAxMDIKRU5FVFVOUkVBQ0ggPSAxMDEKRU5GSUxFID0gMjMKRU5PQU5PID0gNTUKRU5PQlVGUyA9IDEwNQpFTk9DU0kgPSA1MApFTk9EQVRBID0gNjEKRU5PREVWID0gMTkKRU5PRU5UID0gMgpFTk9FWEVDID0gOApFTk9MQ0sgPSAzNwpFTk9MSU5LID0gNjcKRU5PTUVNID0gMTIKRU5PTVNHID0gNDIKRU5PTkVUID0gNjQKRU5PUEtHID0gNjUKRU5PUFJPVE9PUFQgPSA5MgpFTk9TUEMgPSAyOApFTk9TUiA9IDYzCkVOT1NUUiA9IDYwCkVOT1NZUyA9IDM4CkVOT1RCTEsgPSAxNQpFTk9UQ09OTiA9IDEwNwpFTk9URElSID0gMjAKRU5PVEVNUFRZID0gMzkKRU5PVE5BTSA9IDExOApFTk9UU09DSyA9IDg4CkVOT1RUWSA9IDI1CkVOT1RVTklRID0gNzYKRU5YSU8gPSA2CkVPUE5PVFNVUFAgPSA5NQpFT1ZFUkZMT1cgPSA3NQpFUEVSTSA9IDEKRVBGTk9TVVBQT1JUID0gOTYKRVBJUEUgPSAzMgpFUFJPVE8gPSA3MQpFUFJPVE9OT1NVUFBPUlQgPSA5MwpFUFJPVE9UWVBFID0gOTEKRVJBTkdFID0gMzQKRVJFTUNIRyA9IDc4CkVSRU1PVEUgPSA2NgpFUkVNT1RFSU8gPSAxMjEKRVJFU1RBUlQgPSA4NQpFUk9GUyA9IDMwCkVTSFVURE9XTiA9IDEwOApFU09DS1ROT1NVUFBPUlQgPSA5NApFU1BJUEUgPSAyOQpFU1JDSCA9IDMKRVNSTU5UID0gNjkKRVNUQUxFID0gMTE2CkVTVFJQSVBFID0gODYKRVRJTUUgPSA2MgpFVElNRURPVVQgPSAxMTAKRVRPT01BTllSRUZTID0gMTA5CkVUWFRCU1kgPSAyNgpFVUNMRUFOID0gMTE3CkVVTkFUQ0ggPSA0OQpFVVNFUlMgPSA4NwpFV09VTERCTE9DSyA9IDExCkVYREVWID0gMTgKRVhGVUxMID0gNTQKIyBlcnJvcmNvZGUK',
'/Lib/itertools.py':'aW1wb3J0IG9wZXJhdG9yCgpjbGFzcyBhY2N1bXVsYXRlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGl0ZXJhYmxlLCBmdW5jID0gb3BlcmF0b3IuYWRkKToKICAgICAgICBzZWxmLml0ID0gaXRlcihpdGVyYWJsZSkKICAgICAgICBzZWxmLl90b3RhbCA9IE5vbmUKICAgICAgICBzZWxmLmZ1bmMgPSBmdW5jCiAgICAgICAgCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgX19uZXh0X18oc2VsZik6CiAgICAgICAgaWYgbm90IHNlbGYuX3RvdGFsOgogICAgICAgICAgICBzZWxmLl90b3RhbCA9IG5leHQoc2VsZi5pdCkKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3RvdGFsCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZWxlbWVudCA9IG5leHQoc2VsZi5pdCkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5fdG90YWwgPSBzZWxmLmZ1bmMoc2VsZi5fdG90YWwsIGVsZW1lbnQpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidW5zdXBwb3J0ZWQgb3BlcmFuZCB0eXBlIikKICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3RvdGFsCiAgICAgICAgICAgICAgICAKIyMgQWRhcHRlZCBmcm9tOgojIyBodHRwczovL2JpdGJ1Y2tldC5vcmcvcHlweS9weXB5L3NyYy9jMWFhNzRjMDZlODYvbGliX3B5cHkvaXRlcnRvb2xzLnB5I2NsLTM0CmNsYXNzIGNoYWluOgogICAgZGVmIF9faW5pdF9fKHNlbGYsICppdGVyYWJsZXMpOgogICAgICAgIHNlbGYuX2l0ZXJhYmxlc19pdGVyID0gaXRlcihtYXAoaXRlciwgaXRlcmFibGVzKSkKICAgICAgICAjIGxpdHRsZSB0cmljayBmb3IgdGhlIGZpcnN0IGNoYWluLl9fbmV4dF9fKCkgY2FsbAogICAgICAgIHNlbGYuX2N1cl9pdGVyYWJsZV9pdGVyID0gaXRlcihbXSkKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKICAgIAogICAgZGVmIF9fbmV4dF9fKHNlbGYpOgogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KHNlbGYuX2N1cl9pdGVyYWJsZV9pdGVyKQogICAgICAgICAgICBleGNlcHQgU3RvcEl0ZXJhdGlvbjoKICAgICAgICAgICAgICAgIHNlbGYuX2N1cl9pdGVyYWJsZV9pdGVyID0gbmV4dChzZWxmLl9pdGVyYWJsZXNfaXRlcikKICAgIAogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgZnJvbV9pdGVyYWJsZShjbHMsIGl0ZXJhYmxlKToKICAgICAgICBmb3IgaXQgaW4gaXRlcmFibGU6CiAgICAgICAgICAgIGZvciBlbGVtZW50IGluIGl0OgogICAgICAgICAgICAgICAgeWllbGQgZWxlbWVudAogICAgICAgICAgICAgICAgCmNsYXNzIGNvbWJpbmF0aW9uczoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpdGVyYWJsZSwgcik6CiAgICAgICAgc2VsZi5wb29sID0gdHVwbGUoaXRlcmFibGUpCiAgICAgICAgc2VsZi5uID0gbGVuKHNlbGYucG9vbCkKICAgICAgICBzZWxmLnIgPSByCiAgICAgICAgc2VsZi5pbmRpY2VzID0gbGlzdChyYW5nZShzZWxmLnIpKQogICAgICAgIHNlbGYuemVybyA9IEZhbHNlCgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fbmV4dF9fKHNlbGYpOgogICAgICAgIGlmIHNlbGYuciA+IHNlbGYubjoKICAgICAgICAgICAgcmFpc2UgU3RvcEl0ZXJhdGlvbgogICAgICAgIGlmIG5vdCBzZWxmLnplcm86CiAgICAgICAgICAgIHNlbGYuemVybyA9IFRydWUKICAgICAgICAgICAgcmV0dXJuIHR1cGxlKHNlbGYucG9vbFtpXSBmb3IgaSBpbiBzZWxmLmluZGljZXMpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZm9yIGkgaW4gcmV2ZXJzZWQocmFuZ2Uoc2VsZi5yKSk6CiAgICAgICAgICAgICAgICAgICAgaWYgc2VsZi5pbmRpY2VzW2ldICE9IGkgKyBzZWxmLm4gLSBzZWxmLnI6CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBzZWxmLmluZGljZXNbaV0gKz0gMQogICAgICAgICAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxLCBzZWxmLnIpOgogICAgICAgICAgICAgICAgICAgIHNlbGYuaW5kaWNlc1tqXSA9IHNlbGYuaW5kaWNlc1tqLTFdICsgMQogICAgICAgICAgICAgICAgcmV0dXJuIHR1cGxlKHNlbGYucG9vbFtpXSBmb3IgaSBpbiBzZWxmLmluZGljZXMpCiAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHJhaXNlIFN0b3BJdGVyYXRpb24KICAgICAgICAgICAgICAgIApjbGFzcyBjb21iaW5hdGlvbnNfd2l0aF9yZXBsYWNlbWVudDoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpdGVyYWJsZSwgcik6CiAgICAgICAgc2VsZi5wb29sID0gdHVwbGUoaXRlcmFibGUpCiAgICAgICAgc2VsZi5uID0gbGVuKHNlbGYucG9vbCkKICAgICAgICBzZWxmLnIgPSByCiAgICAgICAgc2VsZi5pbmRpY2VzID0gWzBdICogc2VsZi5yCiAgICAgICAgc2VsZi56ZXJvID0gRmFsc2UKICAgICAgICAKICAgIGRlZiBfX2l0ZXJfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZgogICAgCiAgICBkZWYgX19uZXh0X18oc2VsZik6CiAgICAgICAgaWYgbm90IHNlbGYubiBhbmQgc2VsZi5yOgogICAgICAgICAgICByYWlzZSBTdG9wSXRlcmF0aW9uCiAgICAgICAgaWYgbm90IHNlbGYuemVybzoKICAgICAgICAgICAgc2VsZi56ZXJvID0gVHJ1ZQogICAgICAgICAgICByZXR1cm4gdHVwbGUoc2VsZi5wb29sW2ldIGZvciBpIGluIHNlbGYuaW5kaWNlcykKICAgICAgICBlbHNlOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBmb3IgaSBpbiByZXZlcnNlZChyYW5nZShzZWxmLnIpKToKICAgICAgICAgICAgICAgICAgICBpZiBzZWxmLmluZGljZXNbaV0gIT0gc2VsZi5uIC0gMToKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIHNlbGYuaW5kaWNlc1tpOl0gPSBbc2VsZi5pbmRpY2VzW2ldICsgMV0gKiAoc2VsZi5yIC0gaSkKICAgICAgICAgICAgICAgIHJldHVybiB0dXBsZShzZWxmLnBvb2xbaV0gZm9yIGkgaW4gc2VsZi5pbmRpY2VzKQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICByYWlzZSBTdG9wSXRlcmF0aW9uCiAgICAgICAgICAgICAgICAKIyMgTGl0ZXJhbGx5IGNvcGllZCBmcm9tCiMjaHR0cHM6Ly9iaXRidWNrZXQub3JnL3B5cHkvcHlweS9zcmMvYzFhYTc0YzA2ZTg2L2xpYl9weXB5L2l0ZXJ0b29scy5weSNjbC02MyAKY2xhc3MgY29tcHJlc3M6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGF0YSwgc2VsZWN0b3JzKToKICAgICAgICBzZWxmLmRhdGEgPSBpdGVyKGRhdGEpCiAgICAgICAgc2VsZi5zZWxlY3RvcnMgPSBpdGVyKHNlbGVjdG9ycykKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgX19uZXh0X18oc2VsZik6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgbmV4dF9pdGVtID0gbmV4dChzZWxmLmRhdGEpCiAgICAgICAgICAgIG5leHRfc2VsZWN0b3IgPSBuZXh0KHNlbGYuc2VsZWN0b3JzKQogICAgICAgICAgICBpZiBib29sKG5leHRfc2VsZWN0b3IpOgogICAgICAgICAgICAgICAgcmV0dXJuIG5leHRfaXRlbQogICAgICAgICAgICAgICAgCiMjIEFkYXB0ZWQgZnJvbQojI2h0dHBzOi8vYml0YnVja2V0Lm9yZy9weXB5L3B5cHkvc3JjL2MxYWE3NGMwNmU4Ni9saWJfcHlweS9pdGVydG9vbHMucHkjY2wtNzkKIyMgSSBtaW1pY2tlZCB0aGUgPiBweXRob24zLjEgYmVoYXZpb3IKY2xhc3MgY291bnQ6CiAgICAiIiIKICAgIElucHV0IGlzIGFuIGludCBvciBhIGZsb2F0LiBUaGUgb3JpZ2luYWwgUHl0aG9uIDMgaW1wbGVtZW50YXRpb24KICAgIGluY2x1ZGVzIGFsc28gY29tcGxleCBudW1iZXJzLi4uIGJ1dCBpdCBzdGlsbCBpcyBub3QgaW1wbGVtZW50ZWQgCiAgICBpbiBCcnl0aG9uIGFzIGNvbXBsZXggdHlwZSBpcyBOb3RJbXBsZW1lbnRlZAogICAgIiIiCiAgICBkZWYgX19pbml0X18oc2VsZiwgc3RhcnQgPSAwLCBzdGVwID0gMSk6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uoc3RhcnQsIChpbnQsIGZsb2F0KSk6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcignYSBudW1iZXIgaXMgcmVxdWlyZWQnKQogICAgICAgIHNlbGYudGltZXMgPSBzdGFydCAtIHN0ZXAKICAgICAgICBzZWxmLnN0ZXAgPSBzdGVwCgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fbmV4dF9fKHNlbGYpOgogICAgICAgIHNlbGYudGltZXMgKz0gc2VsZi5zdGVwCiAgICAgICAgcmV0dXJuIHNlbGYudGltZXMKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgcmV0dXJuICdjb3VudCglZCknICUgKHNlbGYudGltZXMgKyBzZWxmLnN0ZXApCgojIyBMaXRlcmFsbHkgY29waWVkIGZyb20KIyNodHRwczovL2JpdGJ1Y2tldC5vcmcvcHlweS9weXB5L3NyYy9jMWFhNzRjMDZlODYvbGliX3B5cHkvaXRlcnRvb2xzLnB5I2NsLTExMiAgICAgICAgCmNsYXNzIGN5Y2xlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGl0ZXJhYmxlKToKICAgICAgICBzZWxmLl9jdXJfaXRlciA9IGl0ZXIoaXRlcmFibGUpCiAgICAgICAgc2VsZi5fc2F2ZWQgPSBbXQogICAgICAgIHNlbGYuX211c3Rfc2F2ZSA9IFRydWUKICAgICAgICAKICAgIGRlZiBfX2l0ZXJfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBfX25leHRfXyhzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIG5leHRfZWx0ID0gbmV4dChzZWxmLl9jdXJfaXRlcikKICAgICAgICAgICAgaWYgc2VsZi5fbXVzdF9zYXZlOgogICAgICAgICAgICAgICAgc2VsZi5fc2F2ZWQuYXBwZW5kKG5leHRfZWx0KQogICAgICAgIGV4Y2VwdCBTdG9wSXRlcmF0aW9uOgogICAgICAgICAgICBzZWxmLl9jdXJfaXRlciA9IGl0ZXIoc2VsZi5fc2F2ZWQpCiAgICAgICAgICAgIG5leHRfZWx0ID0gbmV4dChzZWxmLl9jdXJfaXRlcikKICAgICAgICAgICAgc2VsZi5fbXVzdF9zYXZlID0gRmFsc2UKICAgICAgICByZXR1cm4gbmV4dF9lbHQKICAgICAgICAKIyMgTGl0ZXJhbGx5IGNvcGllZCBmcm9tCiMjaHR0cHM6Ly9iaXRidWNrZXQub3JnL3B5cHkvcHlweS9zcmMvYzFhYTc0YzA2ZTg2L2xpYl9weXB5L2l0ZXJ0b29scy5weSNjbC0xNDkKY2xhc3MgZHJvcHdoaWxlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHByZWRpY2F0ZSwgaXRlcmFibGUpOgogICAgICAgIHNlbGYuX3ByZWRpY2F0ZSA9IHByZWRpY2F0ZQogICAgICAgIHNlbGYuX2l0ZXIgPSBpdGVyKGl0ZXJhYmxlKQogICAgICAgIHNlbGYuX2Ryb3BwZWQgPSBGYWxzZQoKICAgIGRlZiBfX2l0ZXJfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBfX25leHRfXyhzZWxmKToKICAgICAgICB2YWx1ZSA9IG5leHQoc2VsZi5faXRlcikKICAgICAgICBpZiBzZWxmLl9kcm9wcGVkOgogICAgICAgICAgICByZXR1cm4gdmFsdWUKICAgICAgICB3aGlsZSBzZWxmLl9wcmVkaWNhdGUodmFsdWUpOgogICAgICAgICAgICB2YWx1ZSA9IG5leHQoc2VsZi5faXRlcikKICAgICAgICBzZWxmLl9kcm9wcGVkID0gVHJ1ZQogICAgICAgIHJldHVybiB2YWx1ZQogICAgICAgIAojIyBBZGFwdGVkIGZyb20KIyNodHRwczovL2JpdGJ1Y2tldC5vcmcvcHlweS9weXB5L3NyYy9jMWFhNzRjMDZlODYvbGliX3B5cHkvaXRlcnRvb2xzLnB5I2NsLTI2MQpjbGFzcyBmaWx0ZXJmYWxzZToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwcmVkaWNhdGUsIGl0ZXJhYmxlKToKICAgICAgICAjIE1ha2Ugc3VyZSBpdGVyYWJsZSAqSVMqIGl0ZXJhYmxlCiAgICAgICAgc2VsZi5faXRlciA9IGl0ZXIoaXRlcmFibGUpCiAgICAgICAgaWYgcHJlZGljYXRlIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuX3ByZWRpY2F0ZSA9IGJvb2wKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLl9wcmVkaWNhdGUgPSBwcmVkaWNhdGUKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKICAgIGRlZiBfX25leHRfXyhzZWxmKToKICAgICAgICBuZXh0X2VsdCA9IG5leHQoc2VsZi5faXRlcikKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5fcHJlZGljYXRlKG5leHRfZWx0KToKICAgICAgICAgICAgICAgIHJldHVybiBuZXh0X2VsdAogICAgICAgICAgICBuZXh0X2VsdCA9IG5leHQoc2VsZi5faXRlcikKCmNsYXNzIGdyb3VwYnk6CiAgICAjIyBUTy1ETwogICAgcGFzcwogICAgICAgICAgCiMjIGFkYXB0ZWQgZnJvbQojI2h0dHBzOi8vYml0YnVja2V0Lm9yZy9weXB5L3B5cHkvc3JjL2MxYWE3NGMwNmU4Ni9saWJfcHlweS9pdGVydG9vbHMucHkjY2wtMzIzCmNsYXNzIGlzbGljZToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpdGVyYWJsZSwgKmFyZ3MpOgogICAgICAgIHMgPSBzbGljZSgqYXJncykKICAgICAgICBzZWxmLnN0YXJ0LCBzZWxmLnN0b3AsIHNlbGYuc3RlcCA9IHMuc3RhcnQgb3IgMCwgcy5zdG9wLCBzLnN0ZXAKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShzZWxmLnN0YXJ0LCBpbnQpOgogICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIlN0YXJ0IGFyZ3VtZW50IG11c3QgYmUgYW4gaW50ZWdlciIpCiAgICAgICAgaWYgc2VsZi5zdG9wICE9IE5vbmUgYW5kIG5vdCBpc2luc3RhbmNlKHNlbGYuc3RvcCwgaW50KToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiU3RvcCBhcmd1bWVudCBtdXN0IGJlIGFuIGludGVnZXIgb3IgTm9uZSIpCiAgICAgICAgaWYgc2VsZi5zdGVwIGlzIE5vbmU6CiAgICAgICAgICAgIHNlbGYuc3RlcCA9IDEKICAgICAgICBpZiBzZWxmLnN0YXJ0PDAgb3IgKHNlbGYuc3RvcCAhPSBOb25lIGFuZCBzZWxmLnN0b3A8MAogICAgICAgICAgICkgb3Igc2VsZi5zdGVwPD0wOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJpbmRpY2VzIGZvciBpc2xpY2UoKSBtdXN0IGJlIHBvc2l0aXZlIikKICAgICAgICBzZWxmLml0ID0gaXRlcihpdGVyYWJsZSkKICAgICAgICBzZWxmLmRvbmV4dCA9IE5vbmUKICAgICAgICBzZWxmLmNudCA9IDAKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgX19uZXh0X18oc2VsZik6CiAgICAgICAgbmV4dGluZGV4ID0gc2VsZi5zdGFydAogICAgICAgIGlmIHNlbGYuc3RvcCAhPSBOb25lIGFuZCBuZXh0aW5kZXggPj0gc2VsZi5zdG9wOgogICAgICAgICAgICByYWlzZSBTdG9wSXRlcmF0aW9uCiAgICAgICAgd2hpbGUgc2VsZi5jbnQgPD0gbmV4dGluZGV4OgogICAgICAgICAgICBuZXh0aXRlbSA9IG5leHQoc2VsZi5pdCkKICAgICAgICAgICAgc2VsZi5jbnQgKz0gMQogICAgICAgIHNlbGYuc3RhcnQgKz0gc2VsZi5zdGVwIAogICAgICAgIHJldHVybiBuZXh0aXRlbQogICAgICAgIApjbGFzcyBwZXJtdXRhdGlvbnM6CiAgICBkZWYgX19pbml0X18oc2VsZiwgaXRlcmFibGUsIHIgPSBOb25lKToKICAgICAgICBzZWxmLnBvb2wgPSB0dXBsZShpdGVyYWJsZSkKICAgICAgICBzZWxmLm4gPSBsZW4oc2VsZi5wb29sKQogICAgICAgIHNlbGYuciA9IHNlbGYubiBpZiByIGlzIE5vbmUgZWxzZSByCiAgICAgICAgc2VsZi5pbmRpY2VzID0gbGlzdChyYW5nZShzZWxmLm4pKQogICAgICAgIHNlbGYuY3ljbGVzID0gbGlzdChyYW5nZShzZWxmLm4sIHNlbGYubiAtIHIsIC0xKSkKICAgICAgICBzZWxmLnplcm8gPSBGYWxzZQogICAgICAgIHNlbGYuc3RvcCA9IEZhbHNlCgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fbmV4dF9fKHNlbGYpOgogICAgICAgIGluZGljZXMgPSBzZWxmLmluZGljZXMKICAgICAgICBpZiBzZWxmLnIgPiBzZWxmLm46CiAgICAgICAgICAgIHJhaXNlIFN0b3BJdGVyYXRpb24KICAgICAgICBpZiBub3Qgc2VsZi56ZXJvOgogICAgICAgICAgICBzZWxmLnplcm8gPSBUcnVlCiAgICAgICAgICAgIHJldHVybiB0dXBsZShzZWxmLnBvb2xbaV0gZm9yIGkgaW4gaW5kaWNlc1s6c2VsZi5yXSkKICAgICAgICAKICAgICAgICBpID0gc2VsZi5yIC0gMQogICAgICAgIHdoaWxlIGkgPj0gMDoKICAgICAgICAgICAgaiA9IHNlbGYuY3ljbGVzW2ldIC0gMQogICAgICAgICAgICBpZiBqID4gMDoKICAgICAgICAgICAgICAgIHNlbGYuY3ljbGVzW2ldID0gagogICAgICAgICAgICAgICAgaW5kaWNlc1tpXSwgaW5kaWNlc1stal0gPSBpbmRpY2VzWy1qXSwgaW5kaWNlc1tpXQogICAgICAgICAgICAgICAgcmV0dXJuIHR1cGxlKHNlbGYucG9vbFtpXSBmb3IgaSBpbiBpbmRpY2VzWzpzZWxmLnJdKQogICAgICAgICAgICBzZWxmLmN5Y2xlc1tpXSA9IGxlbihpbmRpY2VzKSAtIGkKICAgICAgICAgICAgbjEgPSBsZW4oaW5kaWNlcykgLSAxCiAgICAgICAgICAgIGFzc2VydCBuMSA+PSAwCiAgICAgICAgICAgIG51bSA9IGluZGljZXNbaV0KICAgICAgICAgICAgZm9yIGsgaW4gcmFuZ2UoaSwgbjEpOgogICAgICAgICAgICAgICAgaW5kaWNlc1trXSA9IGluZGljZXNbaysxXQogICAgICAgICAgICBpbmRpY2VzW24xXSA9IG51bQogICAgICAgICAgICBpIC09IDEKICAgICAgICByYWlzZSBTdG9wSXRlcmF0aW9uCgojIyBhZGFwdGVkIGZyb20KIyNodHRwczovL2JpdGJ1Y2tldC5vcmcvcHlweS9weXB5L3NyYy9jMWFhNzRjMDZlODYvbGliX3B5cHkvaXRlcnRvb2xzLnB5I2NsLTM5MiAgICAgICAgCmNsYXNzIHByb2R1Y3Q6CiAgICBkZWYgX19pbml0X18oc2VsZiwgKmFyZ3MsICoqa3cpOgogICAgICAgIGlmIGxlbihrdykgPiAxOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInByb2R1Y3QoKSB0YWtlcyBhdCBtb3N0IDEgYXJndW1lbnQgKCVkIGdpdmVuKSIgJQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbihrdykpCiAgICAgICAgc2VsZi5yZXBlYXQgPSBrdy5nZXQoJ3JlcGVhdCcsIDEpCiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uoc2VsZi5yZXBlYXQsIGludCk6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigiaW50ZWdlciBhcmd1bWVudCBleHBlY3RlZCwgZ290ICVzIiAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZShzZWxmLnJlcGVhdCkpCiAgICAgICAgc2VsZi5nZWFycyA9IFt4IGZvciB4IGluIGFyZ3NdICogc2VsZi5yZXBlYXQKICAgICAgICBzZWxmLm51bV9nZWFycyA9IGxlbihzZWxmLmdlYXJzKQogICAgICAgICMgaW5pdGlhbGl6YXRpb24gb2YgaW5kaWNpZXMgdG8gbG9vcCBvdmVyCiAgICAgICAgc2VsZi5pbmRpY2llcyA9IFsoMCwgbGVuKHNlbGYuZ2VhcnNbeF0pKQogICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHggaW4gcmFuZ2UoMCwgc2VsZi5udW1fZ2VhcnMpXQogICAgICAgIHNlbGYuY29udCA9IFRydWUKICAgICAgICBzZWxmLnplcm8gPSBGYWxzZQoKICAgIGRlZiByb2xsX2dlYXJzKHNlbGYpOgogICAgICAgICMgU3RhcnRpbmcgZnJvbSB0aGUgZW5kIG9mIHRoZSBnZWFyIGluZGljaWVzIHdvcmsgdG8gdGhlIGZyb250CiAgICAgICAgIyBpbmNyZW1lbnRpbmcgdGhlIGdlYXIgdW50aWwgdGhlIGxpbWl0IGlzIHJlYWNoZWQuIFdoZW4gdGhlIGxpbWl0CiAgICAgICAgIyBpcyByZWFjaGVkIGNhcnJ5IG9wZXJhdGlvbiB0byB0aGUgbmV4dCBnZWFyCiAgICAgICAgc2hvdWxkX2NhcnJ5ID0gVHJ1ZQogICAgICAgIGZvciBuIGluIHJhbmdlKDAsIHNlbGYubnVtX2dlYXJzKToKICAgICAgICAgICAgbnRoX2dlYXIgPSBzZWxmLm51bV9nZWFycyAtIG4gLSAxCiAgICAgICAgICAgIGlmIHNob3VsZF9jYXJyeToKICAgICAgICAgICAgICAgIGNvdW50LCBsaW0gPSBzZWxmLmluZGljaWVzW250aF9nZWFyXQogICAgICAgICAgICAgICAgY291bnQgKz0gMQogICAgICAgICAgICAgICAgaWYgY291bnQgPT0gbGltIGFuZCBudGhfZ2VhciA9PSAwOgogICAgICAgICAgICAgICAgICAgIHNlbGYuY29udCA9IEZhbHNlCiAgICAgICAgICAgICAgICBpZiBjb3VudCA9PSBsaW06CiAgICAgICAgICAgICAgICAgICAgc2hvdWxkX2NhcnJ5ID0gVHJ1ZQogICAgICAgICAgICAgICAgICAgIGNvdW50ID0gMAogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBzaG91bGRfY2FycnkgPSBGYWxzZQogICAgICAgICAgICAgICAgc2VsZi5pbmRpY2llc1tudGhfZ2Vhcl0gPSAoY291bnQsIGxpbSkgIAogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgYnJlYWsKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgX19uZXh0X18oc2VsZik6CiAgICAgICAgaWYgc2VsZi56ZXJvOgogICAgICAgICAgICByYWlzZSBTdG9wSXRlcmF0aW9uCiAgICAgICAgaWYgc2VsZi5yZXBlYXQgPiAwOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5jb250OgogICAgICAgICAgICAgICAgcmFpc2UgU3RvcEl0ZXJhdGlvbgogICAgICAgICAgICBsID0gW10KICAgICAgICAgICAgZm9yIHggaW4gcmFuZ2UoMCwgc2VsZi5udW1fZ2VhcnMpOgogICAgICAgICAgICAgICAgaW5kZXgsIGxpbWl0ID0gc2VsZi5pbmRpY2llc1t4XQogICAgICAgICAgICAgICAgbC5hcHBlbmQoc2VsZi5nZWFyc1t4XVtpbmRleF0pCiAgICAgICAgICAgIHNlbGYucm9sbF9nZWFycygpCiAgICAgICAgICAgIHJldHVybiB0dXBsZShsKQogICAgICAgIGVsaWYgc2VsZi5yZXBlYXQgPT0gMDoKICAgICAgICAgICAgc2VsZi56ZXJvID0gVHJ1ZQogICAgICAgICAgICByZXR1cm4gKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJyZXBlYXQgYXJndW1lbnQgY2Fubm90IGJlIG5lZ2F0aXZlIikKICAgICAgICAgICAgCiMjIExpdGVyYWxseSBjb3BpZWQgZnJvbQojI2h0dHBzOi8vYml0YnVja2V0Lm9yZy9weXB5L3B5cHkvc3JjL2MxYWE3NGMwNmU4Ni9saWJfcHlweS9pdGVydG9vbHMucHkjY2wtNDQxCmNsYXNzIHJlcGVhdDoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBvYmosIHRpbWVzPU5vbmUpOgogICAgICAgIHNlbGYuX29iaiA9IG9iagogICAgICAgIGlmIHRpbWVzIGlzIG5vdCBOb25lOgogICAgICAgICAgICByYW5nZSh0aW1lcykgIyBSYWlzZSBhIFR5cGVFcnJvcgogICAgICAgICAgICBpZiB0aW1lcyA8IDA6CiAgICAgICAgICAgICAgICB0aW1lcyA9IDAKICAgICAgICBzZWxmLl90aW1lcyA9IHRpbWVzCiAgICAgICAgCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgX19uZXh0X18oc2VsZik6CiAgICAgICAgIyBfX25leHRfXygpICpuZWVkKiB0byBkZWNyZW1lbnQgc2VsZi5fdGltZXMgd2hlbiBjb25zdW1lZAogICAgICAgIGlmIHNlbGYuX3RpbWVzIGlzIG5vdCBOb25lOgogICAgICAgICAgICBpZiBzZWxmLl90aW1lcyA8PSAwOiAKICAgICAgICAgICAgICAgIHJhaXNlIFN0b3BJdGVyYXRpb24oKQogICAgICAgICAgICBzZWxmLl90aW1lcyAtPSAxCiAgICAgICAgcmV0dXJuIHNlbGYuX29iagoKICAgIGRlZiBfX3JlcHJfXyhzZWxmKToKICAgICAgICBpZiBzZWxmLl90aW1lcyBpcyBub3QgTm9uZToKICAgICAgICAgICAgcmV0dXJuICdyZXBlYXQoJXIsICVyKScgJSAoc2VsZi5fb2JqLCBzZWxmLl90aW1lcykKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gJ3JlcGVhdCglciknICUgKHNlbGYuX29iaiwpCgogICAgZGVmIF9fbGVuX18oc2VsZik6CiAgICAgICAgaWYgc2VsZi5fdGltZXMgPT0gLTEgb3Igc2VsZi5fdGltZXMgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgVHlwZUVycm9yKCJsZW4oKSBvZiB1bmlzemVkIG9iamVjdCIpCiAgICAgICAgcmV0dXJuIHNlbGYuX3RpbWVzCgojIyBBZGFwdGVkIGZyb20KIyNodHRwczovL2JpdGJ1Y2tldC5vcmcvcHlweS9weXB5L3NyYy9jMWFhNzRjMDZlODYvbGliX3B5cHkvaXRlcnRvb2xzLnB5I2NsLTQ4OQpjbGFzcyBzdGFybWFwKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZnVuY3Rpb24sIGl0ZXJhYmxlKToKICAgICAgICBzZWxmLl9mdW5jID0gZnVuY3Rpb24KICAgICAgICBzZWxmLl9pdGVyID0gaXRlcihpdGVyYWJsZSkKCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKCiAgICBkZWYgX19uZXh0X18oc2VsZik6CiAgICAgICAgdCA9IG5leHQoc2VsZi5faXRlcikKICAgICAgICByZXR1cm4gc2VsZi5fZnVuYygqdCkKICAgICAgICAKIyMgTGl0ZXJhbGx5IGNvcGllZCBmcm9tCiMjaHR0cHM6Ly9iaXRidWNrZXQub3JnL3B5cHkvcHlweS9zcmMvYzFhYTc0YzA2ZTg2L2xpYl9weXB5L2l0ZXJ0b29scy5weSNjbC01MjAKY2xhc3MgdGFrZXdoaWxlKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgcHJlZGljYXRlLCBpdGVyYWJsZSk6CiAgICAgICAgc2VsZi5fcHJlZGljYXRlID0gcHJlZGljYXRlCiAgICAgICAgc2VsZi5faXRlciA9IGl0ZXIoaXRlcmFibGUpCgogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmCgogICAgZGVmIF9fbmV4dF9fKHNlbGYpOgogICAgICAgIHZhbHVlID0gbmV4dChzZWxmLl9pdGVyKQogICAgICAgIGlmIG5vdCBzZWxmLl9wcmVkaWNhdGUodmFsdWUpOgogICAgICAgICAgICByYWlzZSBTdG9wSXRlcmF0aW9uKCkKICAgICAgICByZXR1cm4gdmFsdWUKCiMjIEFsbW9zdCBsaXRlcmFsIGZyb20KIyNodHRwczovL2JpdGJ1Y2tldC5vcmcvcHlweS9weXB5L3NyYy9jMWFhNzRjMDZlODYvbGliX3B5cHkvaXRlcnRvb2xzLnB5I2NsLTU0NwpjbGFzcyBUZWVEYXRhKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgaXRlcmF0b3IpOgogICAgICAgIHNlbGYuZGF0YSA9IFtdCiAgICAgICAgc2VsZi5faXRlciA9IGl0ZXJhdG9yCgogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGkpOgogICAgICAgICMgaXRlcmF0ZXMgdW50aWwgJ2knIGlmIG5vdCBkb25lIHlldAogICAgICAgIHdoaWxlIGk+PSBsZW4oc2VsZi5kYXRhKToKICAgICAgICAgICAgc2VsZi5kYXRhLmFwcGVuZChuZXh0KHNlbGYuX2l0ZXIpKQogICAgICAgIHJldHVybiBzZWxmLmRhdGFbaV0KCgpjbGFzcyBUZWVPYmplY3Qob2JqZWN0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBpdGVyYWJsZT1Ob25lLCB0ZWVfZGF0YT1Ob25lKToKICAgICAgICBpZiB0ZWVfZGF0YToKICAgICAgICAgICAgc2VsZi50ZWVfZGF0YSA9IHRlZV9kYXRhCiAgICAgICAgICAgIHNlbGYucG9zID0gMAogICAgICAgICMgPD0+IENvcHkgY29uc3RydWN0b3IKICAgICAgICBlbGlmIGlzaW5zdGFuY2UoaXRlcmFibGUsIFRlZU9iamVjdCk6CiAgICAgICAgICAgIHNlbGYudGVlX2RhdGEgPSBpdGVyYWJsZS50ZWVfZGF0YQogICAgICAgICAgICBzZWxmLnBvcyA9IGl0ZXJhYmxlLnBvcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYudGVlX2RhdGEgPSBUZWVEYXRhKGl0ZXIoaXRlcmFibGUpKQogICAgICAgICAgICBzZWxmLnBvcyA9IDAKICAgICAgICAgICAgCiAgICBkZWYgX19uZXh0X18oc2VsZik6CiAgICAgICAgZGF0YSA9IHNlbGYudGVlX2RhdGFbc2VsZi5wb3NdCiAgICAgICAgc2VsZi5wb3MgKz0gMQogICAgICAgIHJldHVybiBkYXRhCiAgICAKICAgIGRlZiBfX2l0ZXJfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZgoKCmRlZiB0ZWUoaXRlcmFibGUsIG49Mik6CiAgICBpZiBpc2luc3RhbmNlKGl0ZXJhYmxlLCBUZWVPYmplY3QpOgogICAgICAgIHJldHVybiB0dXBsZShbaXRlcmFibGVdICsKICAgICAgICBbVGVlT2JqZWN0KHRlZV9kYXRhPWl0ZXJhYmxlLnRlZV9kYXRhKSBmb3IgaSBpbiByYW5nZShuIC0gMSldKQogICAgdGVlX2RhdGEgPSBUZWVEYXRhKGl0ZXIoaXRlcmFibGUpKQogICAgcmV0dXJuIHR1cGxlKFtUZWVPYmplY3QodGVlX2RhdGE9dGVlX2RhdGEpIGZvciBpIGluIHJhbmdlKG4pXSkKCmNsYXNzIHppcF9sb25nZXN0OgogICAgZGVmIF9faW5pdF9fKHNlbGYsICphcmdzLCBmaWxsdmFsdWUgPSBOb25lKToKICAgICAgICBzZWxmLmFyZ3MgPSBhcmdzCiAgICAgICAgc2VsZi5maWxsdmFsdWUgPSBmaWxsdmFsdWUKICAgICAgICBzZWxmLm1heF9sZW5ndGggPSBtYXgoW2xlbihhcmcpIGZvciBhcmcgaW4gc2VsZi5hcmdzXSkKICAgICAgICBzZWxmLnVuaXRzID0gbGVuKGFyZ3MpCiAgICAgICAgc2VsZi5jb3VudGVyID0gMAogICAgCiAgICBkZWYgX19pdGVyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYKICAgIAogICAgZGVmIF9fbmV4dF9fKHNlbGYpOgogICAgICAgIGlmIHNlbGYuY291bnRlciA9PSBzZWxmLm1heF9sZW5ndGg6CiAgICAgICAgICAgIHJhaXNlIFN0b3BJdGVyYXRpb24KICAgICAgICBlbHNlOgogICAgICAgICAgICB0ZW1wID0gW10KICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2Uoc2VsZi51bml0cyk6CiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgdGVtcC5hcHBlbmQoc2VsZi5hcmdzW2ldW3NlbGYuY291bnRlcl0pCiAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgdGVtcC5hcHBlbmQoc2VsZi5maWxsdmFsdWUpCiAgICAgICAgICAgIHNlbGYuY291bnRlciA9IHNlbGYuY291bnRlciArIDEKICAgICAgICAgICAgcmV0dXJuIHR1cGxlKHRlbXAp',
'/Lib/random.py':'',
'/Lib/pprint.py':'',
'/Lib/textwrap.py':'',
'/Lib/posixpath.py':'',
'/Lib/_weakref.py':'Y2xhc3MgUHJveHlUeXBlOgoKICAgIGRlZiBfX2luaXRfXyhzZWxmLG9iaik6CiAgICAgICAgc2VsZi5vYmogPSBvYmoKCkNhbGxhYmxlUHJveHlUeXBlID0gUHJveHlUeXBlClByb3h5VHlwZXMgPSBbUHJveHlUeXBlLENhbGxhYmxlUHJveHlUeXBlXQoKY2xhc3MgUmVmZXJlbmNlVHlwZToKCiAgICBkZWYgX19pbml0X18oc2VsZixvYmopOgogICAgICAgIHNlbGYub2JqID0gb2JqCgpjbGFzcyByZWY6CgogICAgZGVmIF9faW5pdF9fKHNlbGYsb2JqKToKICAgICAgICBzZWxmLm9iaiA9IFJlZmVyZW5jZVR5cGUob2JqKQoKZGVmIGdldHdlYWtyZWZjb3VudChvYmopOgogICAgcmV0dXJuIDEKCmRlZiBnZXR3ZWFrcmVmcyhvYmopOgogICAgcmV0dXJuIG9iagoKCmRlZiBwcm94eShvYmosY2FsbGJhY2spOgogICAgcmV0dXJuIFByb3h5VHlwZShvYmopCgo=',
'/Lib/_collections.py':'',
'/Lib/antigravity.py':'aW1wb3J0IHdlYmJyb3dzZXIKaW1wb3J0IGhhc2hsaWIKCndlYmJyb3dzZXIub3BlbigiaHR0cDovL3hrY2QuY29tLzM1My8iKQoKZGVmIGdlb2hhc2gobGF0aXR1ZGUsIGxvbmdpdHVkZSwgZGF0ZWRvdyk6CiAgICAnJydDb21wdXRlIGdlb2hhc2goKSB1c2luZyB0aGUgTXVucm9lIGFsZ29yaXRobS4KCiAgICA+Pj4gZ2VvaGFzaCgzNy40MjE1NDIsIC0xMjIuMDg1NTg5LCBiJzIwMDUtMDUtMjYtMTA0NTguNjgnKQogICAgMzcuODU3NzEzIC0xMjIuNTQ0NTQzCgogICAgJycnCiAgICAjIGh0dHA6Ly94a2NkLmNvbS80MjYvCiAgICBoID0gaGFzaGxpYi5tZDUoZGF0ZWRvdykuaGV4ZGlnZXN0KCkKICAgIHAsIHEgPSBbKCclZicgJSBmbG9hdC5mcm9taGV4KCcwLicgKyB4KSkgZm9yIHggaW4gKGhbOjE2XSwgaFsxNjozMl0pXQogICAgcHJpbnQoJyVkJXMgJWQlcycgJSAobGF0aXR1ZGUsIHBbMTpdLCBsb25naXR1ZGUsIHFbMTpdKSkK',
'/Lib/optparse.py':'',
'/Lib/local_storage.py':'IyBsb2NhbCBzdG9yYWdlIGluIGJyb3dzZXIKCmNsYXNzIExvY2FsU3RvcmFnZToKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgaWYgbm90IF9fQlJZVEhPTl9fLmhhc19sb2NhbF9zdG9yYWdlOgogICAgICAgICAgICByYWlzZSBOYW1lRXJyb3IoJ2xvY2FsIHN0b3JhZ2UgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3NlcicpCiAgICAgICAgc2VsZi5zdG9yZSA9IF9fQlJZVEhPTl9fLmxvY2FsX3N0b3JhZ2UoKQogICAgICAgIAogICAgZGVmIF9fZGVsaXRlbV9fKHNlbGYsa2V5KToKICAgICAgICBzZWxmLnN0b3JlLnJlbW92ZUl0ZW0oa2V5KQoKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiByZXMKICAgICAgICByYWlzZSBLZXlFcnJvcihrZXkpCgogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsa2V5LHZhbHVlKToKICAgICAgICBzZWxmLnN0b3JlLnNldEl0ZW0oa2V5LHZhbHVlKQoKICAgICNpbXBsZW1lbnQgImluIiBmdW5jdGlvbmFsaXR5CiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIGtleSk6CiAgICAgICAgcmVzPXNlbGYuc3RvcmUuZ2V0SXRlbShrZXkpCiAgICAgICAgaWYgcmVzOgogICAgICAgICAgIHJldHVybiBUcnVlCgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIGRlZiBrZXlzKHNlbGYpOgogICAgICAgIHJldHVybiBsaXN0KHNlbGYuc3RvcmUpCgogICAgZGVmIHZhbHVlcyhzZWxmKToKICAgICAgICByZXR1cm4gW3NlbGYuX19nZXRpdGVtX18oaykgZm9yIGsgaW4gc2VsZi5rZXlzKCldCgogICAgZGVmIGl0ZW1zKHNlbGYpOgogICAgICAgIHJldHVybiB6aXAoc2VsZi5rZXlzKCksc2VsZi52YWx1ZXMoKSkKCnN0b3JhZ2UgPSBMb2NhbFN0b3JhZ2UoKQoK',
'/Lib/locale.py':'ZGVmIGdldGRlZmF1bHRsb2NhbGUoKToKICAgIHJldHVybiBfX0JSWVRIT05fXy5sYW5ndWFnZSxOb25l',
'/Lib/dis.py':'ZGVmIGRpcyhzcmMpOgogICAgcmV0dXJuIEpTT2JqZWN0KF9fQlJZVEhPTl9fLnB5MmpzKHNyYykpLnRvX2pzKCkK',
'/Lib/types.py':'IiIiCkRlZmluZSBuYW1lcyBmb3IgYnVpbHQtaW4gdHlwZXMgdGhhdCBhcmVuJ3QgZGlyZWN0bHkgYWNjZXNzaWJsZSBhcyBhIGJ1aWx0aW4uCiIiIgppbXBvcnQgc3lzCgojIEl0ZXJhdG9ycyBpbiBQeXRob24gYXJlbid0IGEgbWF0dGVyIG9mIHR5cGUgYnV0IG9mIHByb3RvY29sLiAgQSBsYXJnZQojIGFuZCBjaGFuZ2luZyBudW1iZXIgb2YgYnVpbHRpbiB0eXBlcyBpbXBsZW1lbnQgKnNvbWUqIGZsYXZvciBvZgojIGl0ZXJhdG9yLiAgRG9uJ3QgY2hlY2sgdGhlIHR5cGUhICBVc2UgaGFzYXR0ciB0byBjaGVjayBmb3IgYm90aAojICJfX2l0ZXJfXyIgYW5kICJfX25leHRfXyIgYXR0cmlidXRlcyBpbnN0ZWFkLgoKI2RlZiBfZigpOiBwYXNzCiNGdW5jdGlvblR5cGUgPSB0eXBlKF9mKQojTGFtYmRhVHlwZSA9IHR5cGUobGFtYmRhOiBOb25lKSAgICAgICAgICMgU2FtZSBhcyBGdW5jdGlvblR5cGUKI0NvZGVUeXBlID0gdHlwZShfZi5fX2NvZGVfXykKCiNkZWYgX2coKToKIyAgICB5aWVsZCAxCiNHZW5lcmF0b3JUeXBlID0gdHlwZShfZygpKQoKY2xhc3MgX0M6CiAgICBkZWYgX20oc2VsZik6IHBhc3MKTWV0aG9kVHlwZSA9IHR5cGUoX0MoKS5fbSkKCkJ1aWx0aW5GdW5jdGlvblR5cGUgPSB0eXBlKGxlbikKQnVpbHRpbk1ldGhvZFR5cGUgPSB0eXBlKFtdLmFwcGVuZCkgICAgICMgU2FtZSBhcyBCdWlsdGluRnVuY3Rpb25UeXBlCgpNb2R1bGVUeXBlID0gdHlwZShzeXMpCgojdHJ5OgojICAgIHJhaXNlIFR5cGVFcnJvcgojZXhjZXB0IFR5cGVFcnJvcjoKIyAgICB0YiA9IHN5cy5leGNfaW5mbygpWzJdCiMgICAgVHJhY2ViYWNrVHlwZSA9IHR5cGUodGIpCiMgICAgRnJhbWVUeXBlID0gdHlwZSh0Yi50Yl9mcmFtZSkKIyAgICB0YiA9IE5vbmU7IGRlbCB0YgoKIyBGb3IgSnl0aG9uLCB0aGUgZm9sbG93aW5nIHR3byB0eXBlcyBhcmUgaWRlbnRpY2FsCiNHZXRTZXREZXNjcmlwdG9yVHlwZSA9IHR5cGUoRnVuY3Rpb25UeXBlLl9fY29kZV9fKQojTWVtYmVyRGVzY3JpcHRvclR5cGUgPSB0eXBlKEZ1bmN0aW9uVHlwZS5fX2dsb2JhbHNfXykKCiNmaXhtZSBicnl0aG9uCiNkZWwgc3lzLCBfZiwgX2csIF9DLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgTm90IGZvciBleHBvcnQK',
'/Lib/_weakrefset.py':'V2Vha1NldCA9IHNldAoKX0l0ZXJhdGlvbkd1YXJkID0gTm9uZQ==',
'/Lib/warnings.py':'IiIiUHl0aG9uIHBhcnQgb2YgdGhlIHdhcm5pbmdzIHN1YnN5c3RlbS4iIiIKCiMgTm90ZTogZnVuY3Rpb24gbGV2ZWwgaW1wb3J0cyBzaG91bGQgKm5vdCogYmUgdXNlZAojIGluIHRoaXMgbW9kdWxlIGFzIGl0IG1heSBjYXVzZSBpbXBvcnQgbG9jayBkZWFkbG9jay4KIyBTZWUgYnVnIDY4MzY1OC4KaW1wb3J0IGxpbmVjYWNoZQppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJ3YXJuIiwgInNob3d3YXJuaW5nIiwgImZvcm1hdHdhcm5pbmciLCAiZmlsdGVyd2FybmluZ3MiLAogICAgICAgICAgICJyZXNldHdhcm5pbmdzIiwgImNhdGNoX3dhcm5pbmdzIl0KCgpkZWYgc2hvd3dhcm5pbmcobWVzc2FnZSwgY2F0ZWdvcnksIGZpbGVuYW1lLCBsaW5lbm8sIGZpbGU9Tm9uZSwgbGluZT1Ob25lKToKICAgICIiIkhvb2sgdG8gd3JpdGUgYSB3YXJuaW5nIHRvIGEgZmlsZTsgcmVwbGFjZSBpZiB5b3UgbGlrZS4iIiIKICAgIGlmIGZpbGUgaXMgTm9uZToKICAgICAgICBmaWxlID0gc3lzLnN0ZGVycgogICAgdHJ5OgogICAgICAgIGZpbGUud3JpdGUoZm9ybWF0d2FybmluZyhtZXNzYWdlLCBjYXRlZ29yeSwgZmlsZW5hbWUsIGxpbmVubywgbGluZSkpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICBwYXNzICMgdGhlIGZpbGUgKHByb2JhYmx5IHN0ZGVycikgaXMgaW52YWxpZCAtIHRoaXMgd2FybmluZyBnZXRzIGxvc3QuCgpkZWYgZm9ybWF0d2FybmluZyhtZXNzYWdlLCBjYXRlZ29yeSwgZmlsZW5hbWUsIGxpbmVubywgbGluZT1Ob25lKToKICAgICIiIkZ1bmN0aW9uIHRvIGZvcm1hdCBhIHdhcm5pbmcgdGhlIHN0YW5kYXJkIHdheS4iIiIKICAgIHMgPSAgIiVzOiVzOiAlczogJXNcbiIgJSAoZmlsZW5hbWUsIGxpbmVubywgY2F0ZWdvcnkuX19uYW1lX18sIG1lc3NhZ2UpCiAgICBsaW5lID0gbGluZWNhY2hlLmdldGxpbmUoZmlsZW5hbWUsIGxpbmVubykgaWYgbGluZSBpcyBOb25lIGVsc2UgbGluZQogICAgaWYgbGluZToKICAgICAgICBsaW5lID0gbGluZS5zdHJpcCgpCiAgICAgICAgcyArPSAiICAlc1xuIiAlIGxpbmUKICAgIHJldHVybiBzCgojZml4bWUgYnJ5dGhvbiAgYnVpbHRpbiBXYXJuaW5nIGNsYXNzIG5vdCBkZWZpbmVkCmRlZiBmaWx0ZXJ3YXJuaW5ncyhhY3Rpb24sIG1lc3NhZ2U9IiIsIGNhdGVnb3J5PVdhcm5pbmcsIG1vZHVsZT0iIiwgbGluZW5vPTAsCiAgICAgICAgICAgICAgICAgICBhcHBlbmQ9RmFsc2UpOgogICAgIiIiSW5zZXJ0IGFuIGVudHJ5IGludG8gdGhlIGxpc3Qgb2Ygd2FybmluZ3MgZmlsdGVycyAoYXQgdGhlIGZyb250KS4KCiAgICAnYWN0aW9uJyAtLSBvbmUgb2YgImVycm9yIiwgImlnbm9yZSIsICJhbHdheXMiLCAiZGVmYXVsdCIsICJtb2R1bGUiLAogICAgICAgICAgICAgICAgb3IgIm9uY2UiCiAgICAnbWVzc2FnZScgLS0gYSByZWdleCB0aGF0IHRoZSB3YXJuaW5nIG1lc3NhZ2UgbXVzdCBtYXRjaAogICAgJ2NhdGVnb3J5JyAtLSBhIGNsYXNzIHRoYXQgdGhlIHdhcm5pbmcgbXVzdCBiZSBhIHN1YmNsYXNzIG9mCiAgICAnbW9kdWxlJyAtLSBhIHJlZ2V4IHRoYXQgdGhlIG1vZHVsZSBuYW1lIG11c3QgbWF0Y2gKICAgICdsaW5lbm8nIC0tIGFuIGludGVnZXIgbGluZSBudW1iZXIsIDAgbWF0Y2hlcyBhbGwgd2FybmluZ3MKICAgICdhcHBlbmQnIC0tIGlmIHRydWUsIGFwcGVuZCB0byB0aGUgbGlzdCBvZiBmaWx0ZXJzCiAgICAiIiIKICAgIGltcG9ydCByZQogICAgYXNzZXJ0IGFjdGlvbiBpbiAoImVycm9yIiwgImlnbm9yZSIsICJhbHdheXMiLCAiZGVmYXVsdCIsICJtb2R1bGUiLAogICAgICAgICAgICAgICAgICAgICAgIm9uY2UiKSwgImludmFsaWQgYWN0aW9uOiAlciIgJSAoYWN0aW9uLCkKICAgIGFzc2VydCBpc2luc3RhbmNlKG1lc3NhZ2UsIHN0ciksICJtZXNzYWdlIG11c3QgYmUgYSBzdHJpbmciCiAgICBhc3NlcnQgaXNpbnN0YW5jZShjYXRlZ29yeSwgdHlwZSksICJjYXRlZ29yeSBtdXN0IGJlIGEgY2xhc3MiCiAgICBhc3NlcnQgaXNzdWJjbGFzcyhjYXRlZ29yeSwgV2FybmluZyksICJjYXRlZ29yeSBtdXN0IGJlIGEgV2FybmluZyBzdWJjbGFzcyIKICAgIGFzc2VydCBpc2luc3RhbmNlKG1vZHVsZSwgc3RyKSwgIm1vZHVsZSBtdXN0IGJlIGEgc3RyaW5nIgogICAgYXNzZXJ0IGlzaW5zdGFuY2UobGluZW5vLCBpbnQpIGFuZCBsaW5lbm8gPj0gMCwgXAogICAgICAgICAgICJsaW5lbm8gbXVzdCBiZSBhbiBpbnQgPj0gMCIKICAgIGl0ZW0gPSAoYWN0aW9uLCByZS5jb21waWxlKG1lc3NhZ2UsIHJlLkkpLCBjYXRlZ29yeSwKICAgICAgICAgICAgcmUuY29tcGlsZShtb2R1bGUpLCBsaW5lbm8pCiAgICBpZiBhcHBlbmQ6CiAgICAgICAgZmlsdGVycy5hcHBlbmQoaXRlbSkKICAgIGVsc2U6CiAgICAgICAgZmlsdGVycy5pbnNlcnQoMCwgaXRlbSkKCmRlZiBzaW1wbGVmaWx0ZXIoYWN0aW9uLCBjYXRlZ29yeT1XYXJuaW5nLCBsaW5lbm89MCwgYXBwZW5kPUZhbHNlKToKICAgICIiIkluc2VydCBhIHNpbXBsZSBlbnRyeSBpbnRvIHRoZSBsaXN0IG9mIHdhcm5pbmdzIGZpbHRlcnMgKGF0IHRoZSBmcm9udCkuCgogICAgQSBzaW1wbGUgZmlsdGVyIG1hdGNoZXMgYWxsIG1vZHVsZXMgYW5kIG1lc3NhZ2VzLgogICAgJ2FjdGlvbicgLS0gb25lIG9mICJlcnJvciIsICJpZ25vcmUiLCAiYWx3YXlzIiwgImRlZmF1bHQiLCAibW9kdWxlIiwKICAgICAgICAgICAgICAgIG9yICJvbmNlIgogICAgJ2NhdGVnb3J5JyAtLSBhIGNsYXNzIHRoYXQgdGhlIHdhcm5pbmcgbXVzdCBiZSBhIHN1YmNsYXNzIG9mCiAgICAnbGluZW5vJyAtLSBhbiBpbnRlZ2VyIGxpbmUgbnVtYmVyLCAwIG1hdGNoZXMgYWxsIHdhcm5pbmdzCiAgICAnYXBwZW5kJyAtLSBpZiB0cnVlLCBhcHBlbmQgdG8gdGhlIGxpc3Qgb2YgZmlsdGVycwogICAgIiIiCiAgICBhc3NlcnQgYWN0aW9uIGluICgiZXJyb3IiLCAiaWdub3JlIiwgImFsd2F5cyIsICJkZWZhdWx0IiwgIm1vZHVsZSIsCiAgICAgICAgICAgICAgICAgICAgICAib25jZSIpLCAiaW52YWxpZCBhY3Rpb246ICVyIiAlIChhY3Rpb24sKQogICAgYXNzZXJ0IGlzaW5zdGFuY2UobGluZW5vLCBpbnQpIGFuZCBsaW5lbm8gPj0gMCwgXAogICAgICAgICAgICJsaW5lbm8gbXVzdCBiZSBhbiBpbnQgPj0gMCIKICAgIGl0ZW0gPSAoYWN0aW9uLCBOb25lLCBjYXRlZ29yeSwgTm9uZSwgbGluZW5vKQogICAgaWYgYXBwZW5kOgogICAgICAgIGZpbHRlcnMuYXBwZW5kKGl0ZW0pCiAgICBlbHNlOgogICAgICAgIGZpbHRlcnMuaW5zZXJ0KDAsIGl0ZW0pCgpkZWYgcmVzZXR3YXJuaW5ncygpOgogICAgIiIiQ2xlYXIgdGhlIGxpc3Qgb2Ygd2FybmluZyBmaWx0ZXJzLCBzbyB0aGF0IG5vIGZpbHRlcnMgYXJlIGFjdGl2ZS4iIiIKICAgIGZpbHRlcnNbOl0gPSBbXQoKY2xhc3MgX09wdGlvbkVycm9yKEV4Y2VwdGlvbik6CiAgICAiIiJFeGNlcHRpb24gdXNlZCBieSBvcHRpb24gcHJvY2Vzc2luZyBoZWxwZXJzLiIiIgogICAgcGFzcwoKIyBIZWxwZXIgdG8gcHJvY2VzcyAtVyBvcHRpb25zIHBhc3NlZCB2aWEgc3lzLndhcm5vcHRpb25zCmRlZiBfcHJvY2Vzc29wdGlvbnMoYXJncyk6CiAgICBmb3IgYXJnIGluIGFyZ3M6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBfc2V0b3B0aW9uKGFyZykKICAgICAgICBleGNlcHQgX09wdGlvbkVycm9yIGFzIG1zZzoKICAgICAgICAgICAgcHJpbnQoIkludmFsaWQgLVcgb3B0aW9uIGlnbm9yZWQ6IiwgbXNnLCBmaWxlPXN5cy5zdGRlcnIpCgojIEhlbHBlciBmb3IgX3Byb2Nlc3NvcHRpb25zKCkKZGVmIF9zZXRvcHRpb24oYXJnKToKICAgIGltcG9ydCByZQogICAgcGFydHMgPSBhcmcuc3BsaXQoJzonKQogICAgaWYgbGVuKHBhcnRzKSA+IDU6CiAgICAgICAgcmFpc2UgX09wdGlvbkVycm9yKCJ0b28gbWFueSBmaWVsZHMgKG1heCA1KTogJXIiICUgKGFyZywpKQogICAgd2hpbGUgbGVuKHBhcnRzKSA8IDU6CiAgICAgICAgcGFydHMuYXBwZW5kKCcnKQogICAgYWN0aW9uLCBtZXNzYWdlLCBjYXRlZ29yeSwgbW9kdWxlLCBsaW5lbm8gPSBbcy5zdHJpcCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgcyBpbiBwYXJ0c10KICAgIGFjdGlvbiA9IF9nZXRhY3Rpb24oYWN0aW9uKQogICAgbWVzc2FnZSA9IHJlLmVzY2FwZShtZXNzYWdlKQogICAgY2F0ZWdvcnkgPSBfZ2V0Y2F0ZWdvcnkoY2F0ZWdvcnkpCiAgICBtb2R1bGUgPSByZS5lc2NhcGUobW9kdWxlKQogICAgaWYgbW9kdWxlOgogICAgICAgIG1vZHVsZSA9IG1vZHVsZSArICckJwogICAgaWYgbGluZW5vOgogICAgICAgIHRyeToKICAgICAgICAgICAgbGluZW5vID0gaW50KGxpbmVubykKICAgICAgICAgICAgaWYgbGluZW5vIDwgMDoKICAgICAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IKICAgICAgICBleGNlcHQgKFZhbHVlRXJyb3IsIE92ZXJmbG93RXJyb3IpOgogICAgICAgICAgICByYWlzZSBfT3B0aW9uRXJyb3IoImludmFsaWQgbGluZW5vICVyIiAlIChsaW5lbm8sKSkKICAgIGVsc2U6CiAgICAgICAgbGluZW5vID0gMAogICAgZmlsdGVyd2FybmluZ3MoYWN0aW9uLCBtZXNzYWdlLCBjYXRlZ29yeSwgbW9kdWxlLCBsaW5lbm8pCgojIEhlbHBlciBmb3IgX3NldG9wdGlvbigpCmRlZiBfZ2V0YWN0aW9uKGFjdGlvbik6CiAgICBpZiBub3QgYWN0aW9uOgogICAgICAgIHJldHVybiAiZGVmYXVsdCIKICAgIGlmIGFjdGlvbiA9PSAiYWxsIjogcmV0dXJuICJhbHdheXMiICMgQWxpYXMKICAgIGZvciBhIGluICgnZGVmYXVsdCcsICdhbHdheXMnLCAnaWdub3JlJywgJ21vZHVsZScsICdvbmNlJywgJ2Vycm9yJyk6CiAgICAgICAgaWYgYS5zdGFydHN3aXRoKGFjdGlvbik6CiAgICAgICAgICAgIHJldHVybiBhCiAgICByYWlzZSBfT3B0aW9uRXJyb3IoImludmFsaWQgYWN0aW9uOiAlciIgJSAoYWN0aW9uLCkpCgojIEhlbHBlciBmb3IgX3NldG9wdGlvbigpCmRlZiBfZ2V0Y2F0ZWdvcnkoY2F0ZWdvcnkpOgogICAgaW1wb3J0IHJlCiAgICBpZiBub3QgY2F0ZWdvcnk6CiAgICAgICAgcmV0dXJuIFdhcm5pbmcKICAgIGlmIHJlLm1hdGNoKCJeW2EtekEtWjAtOV9dKyQiLCBjYXRlZ29yeSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBjYXQgPSBldmFsKGNhdGVnb3J5KQogICAgICAgIGV4Y2VwdCBOYW1lRXJyb3I6CiAgICAgICAgICAgIHJhaXNlIF9PcHRpb25FcnJvcigidW5rbm93biB3YXJuaW5nIGNhdGVnb3J5OiAlciIgJSAoY2F0ZWdvcnksKSkKICAgIGVsc2U6CiAgICAgICAgaSA9IGNhdGVnb3J5LnJmaW5kKCIuIikKICAgICAgICBtb2R1bGUgPSBjYXRlZ29yeVs6aV0KICAgICAgICBrbGFzcyA9IGNhdGVnb3J5W2krMTpdCiAgICAgICAgdHJ5OgogICAgICAgICAgICBtID0gX19pbXBvcnRfXyhtb2R1bGUsIE5vbmUsIE5vbmUsIFtrbGFzc10pCiAgICAgICAgZXhjZXB0IEltcG9ydEVycm9yOgogICAgICAgICAgICByYWlzZSBfT3B0aW9uRXJyb3IoImludmFsaWQgbW9kdWxlIG5hbWU6ICVyIiAlIChtb2R1bGUsKSkKICAgICAgICB0cnk6CiAgICAgICAgICAgIGNhdCA9IGdldGF0dHIobSwga2xhc3MpCiAgICAgICAgZXhjZXB0IEF0dHJpYnV0ZUVycm9yOgogICAgICAgICAgICByYWlzZSBfT3B0aW9uRXJyb3IoInVua25vd24gd2FybmluZyBjYXRlZ29yeTogJXIiICUgKGNhdGVnb3J5LCkpCiAgICBpZiBub3QgaXNzdWJjbGFzcyhjYXQsIFdhcm5pbmcpOgogICAgICAgIHJhaXNlIF9PcHRpb25FcnJvcigiaW52YWxpZCB3YXJuaW5nIGNhdGVnb3J5OiAlciIgJSAoY2F0ZWdvcnksKSkKICAgIHJldHVybiBjYXQKCgojIENvZGUgdHlwaWNhbGx5IHJlcGxhY2VkIGJ5IF93YXJuaW5ncwpkZWYgd2FybihtZXNzYWdlLCBjYXRlZ29yeT1Ob25lLCBzdGFja2xldmVsPTEpOgogICAgIiIiSXNzdWUgYSB3YXJuaW5nLCBvciBtYXliZSBpZ25vcmUgaXQgb3IgcmFpc2UgYW4gZXhjZXB0aW9uLiIiIgogICAgIyBDaGVjayBpZiBtZXNzYWdlIGlzIGFscmVhZHkgYSBXYXJuaW5nIG9iamVjdAogICAgaWYgaXNpbnN0YW5jZShtZXNzYWdlLCBXYXJuaW5nKToKICAgICAgICBjYXRlZ29yeSA9IG1lc3NhZ2UuX19jbGFzc19fCiAgICAjIENoZWNrIGNhdGVnb3J5IGFyZ3VtZW50CiAgICBpZiBjYXRlZ29yeSBpcyBOb25lOgogICAgICAgIGNhdGVnb3J5ID0gVXNlcldhcm5pbmcKICAgIGFzc2VydCBpc3N1YmNsYXNzKGNhdGVnb3J5LCBXYXJuaW5nKQogICAgIyBHZXQgY29udGV4dCBpbmZvcm1hdGlvbgogICAgdHJ5OgogICAgICAgIGNhbGxlciA9IHN5cy5fZ2V0ZnJhbWUoc3RhY2tsZXZlbCkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIGdsb2JhbHMgPSBzeXMuX19kaWN0X18KICAgICAgICBsaW5lbm8gPSAxCiAgICAgICAgY2FsbGVyPU5vbmUKICAgICNmaXhtZSBicnl0aG9uIGVycm9yCiAgICBlbHNlOgogICAgICAgICNpZiBjYWxsZXIgaXMgbm90IE5vbmU6CiAgICAgICAgZ2xvYmFscyA9IGNhbGxlci5mX2dsb2JhbHMKICAgICAgICBsaW5lbm8gPSBjYWxsZXIuZl9saW5lbm8KICAgIGlmICdfX25hbWVfXycgaW4gZ2xvYmFsczoKICAgICAgICBtb2R1bGUgPSBnbG9iYWxzWydfX25hbWVfXyddCiAgICBlbHNlOgogICAgICAgIG1vZHVsZSA9ICI8c3RyaW5nPiIKICAgIGZpbGVuYW1lID0gZ2xvYmFscy5nZXQoJ19fZmlsZV9fJykKICAgIGlmIGZpbGVuYW1lOgogICAgICAgIGZubCA9IGZpbGVuYW1lLmxvd2VyKCkKICAgICAgICBpZiBmbmwuZW5kc3dpdGgoKCIucHljIiwgIi5weW8iKSk6CiAgICAgICAgICAgIGZpbGVuYW1lID0gZmlsZW5hbWVbOi0xXQogICAgZWxzZToKICAgICAgICBpZiBtb2R1bGUgPT0gIl9fbWFpbl9fIjoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBzeXMuYXJndlswXQogICAgICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6CiAgICAgICAgICAgICAgICAjIGVtYmVkZGVkIGludGVycHJldGVycyBkb24ndCBoYXZlIHN5cy5hcmd2LCBzZWUgYnVnICM4MzkxNTEKICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gJ19fbWFpbl9fJwogICAgICAgIGlmIG5vdCBmaWxlbmFtZToKICAgICAgICAgICAgZmlsZW5hbWUgPSBtb2R1bGUKICAgIHJlZ2lzdHJ5ID0gZ2xvYmFscy5zZXRkZWZhdWx0KCJfX3dhcm5pbmdyZWdpc3RyeV9fIiwge30pCiAgICB3YXJuX2V4cGxpY2l0KG1lc3NhZ2UsIGNhdGVnb3J5LCBmaWxlbmFtZSwgbGluZW5vLCBtb2R1bGUsIHJlZ2lzdHJ5LAogICAgICAgICAgICAgICAgICBnbG9iYWxzKQoKZGVmIHdhcm5fZXhwbGljaXQobWVzc2FnZSwgY2F0ZWdvcnksIGZpbGVuYW1lLCBsaW5lbm8sCiAgICAgICAgICAgICAgICAgIG1vZHVsZT1Ob25lLCByZWdpc3RyeT1Ob25lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgIGxpbmVubyA9IGludChsaW5lbm8pCiAgICBpZiBtb2R1bGUgaXMgTm9uZToKICAgICAgICBtb2R1bGUgPSBmaWxlbmFtZSBvciAiPHVua25vd24+IgogICAgICAgIGlmIG1vZHVsZVstMzpdLmxvd2VyKCkgPT0gIi5weSI6CiAgICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZVs6LTNdICMgWFhYIFdoYXQgYWJvdXQgbGVhZGluZyBwYXRobmFtZT8KICAgIGlmIHJlZ2lzdHJ5IGlzIE5vbmU6CiAgICAgICAgcmVnaXN0cnkgPSB7fQogICAgaWYgaXNpbnN0YW5jZShtZXNzYWdlLCBXYXJuaW5nKToKICAgICAgICB0ZXh0ID0gc3RyKG1lc3NhZ2UpCiAgICAgICAgY2F0ZWdvcnkgPSBtZXNzYWdlLl9fY2xhc3NfXwogICAgZWxzZToKICAgICAgICB0ZXh0ID0gbWVzc2FnZQogICAgICAgIG1lc3NhZ2UgPSBjYXRlZ29yeShtZXNzYWdlKQogICAga2V5ID0gKHRleHQsIGNhdGVnb3J5LCBsaW5lbm8pCiAgICAjIFF1aWNrIHRlc3QgZm9yIGNvbW1vbiBjYXNlCiAgICBpZiByZWdpc3RyeS5nZXQoa2V5KToKICAgICAgICByZXR1cm4KICAgICMgU2VhcmNoIHRoZSBmaWx0ZXJzCiAgICBmb3IgaXRlbSBpbiBmaWx0ZXJzOgogICAgICAgIGFjdGlvbiwgbXNnLCBjYXQsIG1vZCwgbG4gPSBpdGVtCiAgICAgICAgaWYgKChtc2cgaXMgTm9uZSBvciBtc2cubWF0Y2godGV4dCkpIGFuZAogICAgICAgICAgICBpc3N1YmNsYXNzKGNhdGVnb3J5LCBjYXQpIGFuZAogICAgICAgICAgICAobW9kIGlzIE5vbmUgb3IgbW9kLm1hdGNoKG1vZHVsZSkpIGFuZAogICAgICAgICAgICAobG4gPT0gMCBvciBsaW5lbm8gPT0gbG4pKToKICAgICAgICAgICAgYnJlYWsKICAgICNmaXhtZSBicnl0aG9uCiAgICAjZWxzZToKICAgICMgICAgYWN0aW9uID0gZGVmYXVsdGFjdGlvbgogICAgIyBFYXJseSBleGl0IGFjdGlvbnMKICAgIGlmIGFjdGlvbiA9PSAiaWdub3JlIjoKICAgICAgICByZWdpc3RyeVtrZXldID0gMQogICAgICAgIHJldHVybgoKICAgICMgUHJpbWUgdGhlIGxpbmVjYWNoZSBmb3IgZm9ybWF0dGluZywgaW4gY2FzZSB0aGUKICAgICMgImZpbGUiIGlzIGFjdHVhbGx5IGluIGEgemlwZmlsZSBvciBzb21ldGhpbmcuCiAgICBsaW5lY2FjaGUuZ2V0bGluZXMoZmlsZW5hbWUsIG1vZHVsZV9nbG9iYWxzKQoKICAgIGlmIGFjdGlvbiA9PSAiZXJyb3IiOgogICAgICAgIHJhaXNlIG1lc3NhZ2UKICAgICMgT3RoZXIgYWN0aW9ucwogICAgaWYgYWN0aW9uID09ICJvbmNlIjoKICAgICAgICByZWdpc3RyeVtrZXldID0gMQogICAgICAgIG9uY2VrZXkgPSAodGV4dCwgY2F0ZWdvcnkpCiAgICAgICAgaWYgb25jZXJlZ2lzdHJ5LmdldChvbmNla2V5KToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgb25jZXJlZ2lzdHJ5W29uY2VrZXldID0gMQogICAgZWxpZiBhY3Rpb24gPT0gImFsd2F5cyI6CiAgICAgICAgcGFzcwogICAgZWxpZiBhY3Rpb24gPT0gIm1vZHVsZSI6CiAgICAgICAgcmVnaXN0cnlba2V5XSA9IDEKICAgICAgICBhbHRrZXkgPSAodGV4dCwgY2F0ZWdvcnksIDApCiAgICAgICAgaWYgcmVnaXN0cnkuZ2V0KGFsdGtleSk6CiAgICAgICAgICAgIHJldHVybgogICAgICAgIHJlZ2lzdHJ5W2FsdGtleV0gPSAxCiAgICBlbGlmIGFjdGlvbiA9PSAiZGVmYXVsdCI6CiAgICAgICAgcmVnaXN0cnlba2V5XSA9IDEKICAgIGVsc2U6CiAgICAgICAgIyBVbnJlY29nbml6ZWQgYWN0aW9ucyBhcmUgZXJyb3JzCiAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKAogICAgICAgICAgICAgICJVbnJlY29nbml6ZWQgYWN0aW9uICglcikgaW4gd2FybmluZ3MuZmlsdGVyczpcbiAlcyIgJQogICAgICAgICAgICAgIChhY3Rpb24sIGl0ZW0pKQogICAgaWYgbm90IGNhbGxhYmxlKHNob3d3YXJuaW5nKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoIndhcm5pbmdzLnNob3d3YXJuaW5nKCkgbXVzdCBiZSBzZXQgdG8gYSAiCiAgICAgICAgICAgICAgICAgICAgICAgICJmdW5jdGlvbiBvciBtZXRob2QiKQogICAgIyBQcmludCBtZXNzYWdlIGFuZCBjb250ZXh0CiAgICBzaG93d2FybmluZyhtZXNzYWdlLCBjYXRlZ29yeSwgZmlsZW5hbWUsIGxpbmVubykKCgpjbGFzcyBXYXJuaW5nTWVzc2FnZShvYmplY3QpOgoKICAgICIiIkhvbGRzIHRoZSByZXN1bHQgb2YgYSBzaW5nbGUgc2hvd3dhcm5pbmcoKSBjYWxsLiIiIgoKICAgIF9XQVJOSU5HX0RFVEFJTFMgPSAoIm1lc3NhZ2UiLCAiY2F0ZWdvcnkiLCAiZmlsZW5hbWUiLCAibGluZW5vIiwgImZpbGUiLAogICAgICAgICAgICAgICAgICAgICAgICAibGluZSIpCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIG1lc3NhZ2UsIGNhdGVnb3J5LCBmaWxlbmFtZSwgbGluZW5vLCBmaWxlPU5vbmUsCiAgICAgICAgICAgICAgICAgICAgbGluZT1Ob25lKToKICAgICAgICBsb2NhbF92YWx1ZXMgPSBsb2NhbHMoKQogICAgICAgIGZvciBhdHRyIGluIHNlbGYuX1dBUk5JTkdfREVUQUlMUzoKICAgICAgICAgICAgc2V0YXR0cihzZWxmLCBhdHRyLCBsb2NhbF92YWx1ZXNbYXR0cl0pCiAgICAgICAgc2VsZi5fY2F0ZWdvcnlfbmFtZSA9IGNhdGVnb3J5Ll9fbmFtZV9fIGlmIGNhdGVnb3J5IGVsc2UgTm9uZQoKICAgIGRlZiBfX3N0cl9fKHNlbGYpOgogICAgICAgIHJldHVybiAoInttZXNzYWdlIDogJXIsIGNhdGVnb3J5IDogJXIsIGZpbGVuYW1lIDogJXIsIGxpbmVubyA6ICVzLCAiCiAgICAgICAgICAgICAgICAgICAgImxpbmUgOiAlcn0iICUgKHNlbGYubWVzc2FnZSwgc2VsZi5fY2F0ZWdvcnlfbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5maWxlbmFtZSwgc2VsZi5saW5lbm8sIHNlbGYubGluZSkpCgoKY2xhc3MgY2F0Y2hfd2FybmluZ3Mob2JqZWN0KToKCiAgICAiIiJBIGNvbnRleHQgbWFuYWdlciB0aGF0IGNvcGllcyBhbmQgcmVzdG9yZXMgdGhlIHdhcm5pbmdzIGZpbHRlciB1cG9uCiAgICBleGl0aW5nIHRoZSBjb250ZXh0LgoKICAgIFRoZSAncmVjb3JkJyBhcmd1bWVudCBzcGVjaWZpZXMgd2hldGhlciB3YXJuaW5ncyBzaG91bGQgYmUgY2FwdHVyZWQgYnkgYQogICAgY3VzdG9tIGltcGxlbWVudGF0aW9uIG9mIHdhcm5pbmdzLnNob3d3YXJuaW5nKCkgYW5kIGJlIGFwcGVuZGVkIHRvIGEgbGlzdAogICAgcmV0dXJuZWQgYnkgdGhlIGNvbnRleHQgbWFuYWdlci4gT3RoZXJ3aXNlIE5vbmUgaXMgcmV0dXJuZWQgYnkgdGhlIGNvbnRleHQKICAgIG1hbmFnZXIuIFRoZSBvYmplY3RzIGFwcGVuZGVkIHRvIHRoZSBsaXN0IGFyZSBhcmd1bWVudHMgd2hvc2UgYXR0cmlidXRlcwogICAgbWlycm9yIHRoZSBhcmd1bWVudHMgdG8gc2hvd3dhcm5pbmcoKS4KCiAgICBUaGUgJ21vZHVsZScgYXJndW1lbnQgaXMgdG8gc3BlY2lmeSBhbiBhbHRlcm5hdGl2ZSBtb2R1bGUgdG8gdGhlIG1vZHVsZQogICAgbmFtZWQgJ3dhcm5pbmdzJyBhbmQgaW1wb3J0ZWQgdW5kZXIgdGhhdCBuYW1lLiBUaGlzIGFyZ3VtZW50IGlzIG9ubHkgdXNlZnVsCiAgICB3aGVuIHRlc3RpbmcgdGhlIHdhcm5pbmdzIG1vZHVsZSBpdHNlbGYuCgogICAgIiIiCgogICAgI2RlZiBfX2luaXRfXyhzZWxmLCAqLCByZWNvcmQ9RmFsc2UsIG1vZHVsZT1Ob25lKTogIEJFIG1vZGlmaWVkCiAgICBkZWYgX19pbml0X18oc2VsZiwgcmVjb3JkPUZhbHNlLCBtb2R1bGU9Tm9uZSk6CiAgICAgICAgIiIiU3BlY2lmeSB3aGV0aGVyIHRvIHJlY29yZCB3YXJuaW5ncyBhbmQgaWYgYW4gYWx0ZXJuYXRpdmUgbW9kdWxlCiAgICAgICAgc2hvdWxkIGJlIHVzZWQgb3RoZXIgdGhhbiBzeXMubW9kdWxlc1snd2FybmluZ3MnXS4KCiAgICAgICAgRm9yIGNvbXBhdGliaWxpdHkgd2l0aCBQeXRob24gMy4wLCBwbGVhc2UgY29uc2lkZXIgYWxsIGFyZ3VtZW50cyB0byBiZQogICAgICAgIGtleXdvcmQtb25seS4KCiAgICAgICAgIiIiCiAgICAgICAgc2VsZi5fcmVjb3JkID0gcmVjb3JkCiAgICAgICAgc2VsZi5fbW9kdWxlID0gc3lzLm1vZHVsZXNbJ3dhcm5pbmdzJ10gaWYgbW9kdWxlIGlzIE5vbmUgZWxzZSBtb2R1bGUKICAgICAgICBzZWxmLl9lbnRlcmVkID0gRmFsc2UKCiAgICBkZWYgX19yZXByX18oc2VsZik6CiAgICAgICAgYXJncyA9IFtdCiAgICAgICAgaWYgc2VsZi5fcmVjb3JkOgogICAgICAgICAgICBhcmdzLmFwcGVuZCgicmVjb3JkPVRydWUiKQogICAgICAgIGlmIHNlbGYuX21vZHVsZSBpcyBub3Qgc3lzLm1vZHVsZXNbJ3dhcm5pbmdzJ106CiAgICAgICAgICAgIGFyZ3MuYXBwZW5kKCJtb2R1bGU9JXIiICUgc2VsZi5fbW9kdWxlKQogICAgICAgIG5hbWUgPSB0eXBlKHNlbGYpLl9fbmFtZV9fCiAgICAgICAgcmV0dXJuICIlcyglcykiICUgKG5hbWUsICIsICIuam9pbihhcmdzKSkKCiAgICBkZWYgX19lbnRlcl9fKHNlbGYpOgogICAgICAgIGlmIHNlbGYuX2VudGVyZWQ6CiAgICAgICAgICAgIHJhaXNlIFJ1bnRpbWVFcnJvcigiQ2Fubm90IGVudGVyICVyIHR3aWNlIiAlIHNlbGYpCiAgICAgICAgc2VsZi5fZW50ZXJlZCA9IFRydWUKICAgICAgICBzZWxmLl9maWx0ZXJzID0gc2VsZi5fbW9kdWxlLmZpbHRlcnMKICAgICAgICBzZWxmLl9tb2R1bGUuZmlsdGVycyA9IHNlbGYuX2ZpbHRlcnNbOl0KICAgICAgICBzZWxmLl9zaG93d2FybmluZyA9IHNlbGYuX21vZHVsZS5zaG93d2FybmluZwogICAgICAgIGlmIHNlbGYuX3JlY29yZDoKICAgICAgICAgICAgbG9nID0gW10KICAgICAgICAgICAgZGVmIHNob3d3YXJuaW5nKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgICAgICBsb2cuYXBwZW5kKFdhcm5pbmdNZXNzYWdlKCphcmdzLCAqKmt3YXJncykpCiAgICAgICAgICAgIHNlbGYuX21vZHVsZS5zaG93d2FybmluZyA9IHNob3d3YXJuaW5nCiAgICAgICAgICAgIHJldHVybiBsb2cKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCAqZXhjX2luZm8pOgogICAgICAgIGlmIG5vdCBzZWxmLl9lbnRlcmVkOgogICAgICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoIkNhbm5vdCBleGl0ICVyIHdpdGhvdXQgZW50ZXJpbmcgZmlyc3QiICUgc2VsZikKICAgICAgICBzZWxmLl9tb2R1bGUuZmlsdGVycyA9IHNlbGYuX2ZpbHRlcnMKICAgICAgICBzZWxmLl9tb2R1bGUuc2hvd3dhcm5pbmcgPSBzZWxmLl9zaG93d2FybmluZwoKCiMgZmlsdGVycyBjb250YWlucyBhIHNlcXVlbmNlIG9mIGZpbHRlciA1LXR1cGxlcwojIFRoZSBjb21wb25lbnRzIG9mIHRoZSA1LXR1cGxlIGFyZToKIyAtIGFuIGFjdGlvbjogZXJyb3IsIGlnbm9yZSwgYWx3YXlzLCBkZWZhdWx0LCBtb2R1bGUsIG9yIG9uY2UKIyAtIGEgY29tcGlsZWQgcmVnZXggdGhhdCBtdXN0IG1hdGNoIHRoZSB3YXJuaW5nIG1lc3NhZ2UKIyAtIGEgY2xhc3MgcmVwcmVzZW50aW5nIHRoZSB3YXJuaW5nIGNhdGVnb3J5CiMgLSBhIGNvbXBpbGVkIHJlZ2V4IHRoYXQgbXVzdCBtYXRjaCB0aGUgbW9kdWxlIHRoYXQgaXMgYmVpbmcgd2FybmVkCiMgLSBhIGxpbmUgbnVtYmVyIGZvciB0aGUgbGluZSBiZWluZyB3YXJuaW5nLCBvciAwIHRvIG1lYW4gYW55IGxpbmUKIyBJZiBlaXRoZXIgaWYgdGhlIGNvbXBpbGVkIHJlZ2V4cyBhcmUgTm9uZSwgbWF0Y2ggYW55dGhpbmcuCl93YXJuaW5nc19kZWZhdWx0cyA9IEZhbHNlCnRyeToKICAgIGZyb20gX3dhcm5pbmdzIGltcG9ydCAoZmlsdGVycywgX2RlZmF1bHRhY3Rpb24sIF9vbmNlcmVnaXN0cnksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuLCB3YXJuX2V4cGxpY2l0KQogICAgZGVmYXVsdGFjdGlvbiA9IF9kZWZhdWx0YWN0aW9uCiAgICBvbmNlcmVnaXN0cnkgPSBfb25jZXJlZ2lzdHJ5CiAgICBfd2FybmluZ3NfZGVmYXVsdHMgPSBUcnVlCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIGZpbHRlcnMgPSBbXQogICAgZGVmYXVsdGFjdGlvbiA9ICJkZWZhdWx0IgogICAgb25jZXJlZ2lzdHJ5ID0ge30KCgojIE1vZHVsZSBpbml0aWFsaXphdGlvbgpfcHJvY2Vzc29wdGlvbnMoc3lzLndhcm5vcHRpb25zKQppZiBub3QgX3dhcm5pbmdzX2RlZmF1bHRzOgogICAgc2lsZW5jZSA9IFtJbXBvcnRXYXJuaW5nLCBQZW5kaW5nRGVwcmVjYXRpb25XYXJuaW5nXQogICAgc2lsZW5jZS5hcHBlbmQoRGVwcmVjYXRpb25XYXJuaW5nKQogICAgZm9yIGNscyBpbiBzaWxlbmNlOgogICAgICAgIHNpbXBsZWZpbHRlcigiaWdub3JlIiwgY2F0ZWdvcnk9Y2xzKQogICAgYnl0ZXNfd2FybmluZyA9IHN5cy5mbGFncy5ieXRlc193YXJuaW5nCiAgICBpZiBieXRlc193YXJuaW5nID4gMToKICAgICAgICBieXRlc19hY3Rpb24gPSAiZXJyb3IiCiAgICBlbGlmIGJ5dGVzX3dhcm5pbmc6CiAgICAgICAgYnl0ZXNfYWN0aW9uID0gImRlZmF1bHQiCiAgICBlbHNlOgogICAgICAgIGJ5dGVzX2FjdGlvbiA9ICJpZ25vcmUiCiAgICBzaW1wbGVmaWx0ZXIoYnl0ZXNfYWN0aW9uLCBjYXRlZ29yeT1CeXRlc1dhcm5pbmcsIGFwcGVuZD0xKQogICAgIyByZXNvdXJjZSB1c2FnZSB3YXJuaW5ncyBhcmUgZW5hYmxlZCBieSBkZWZhdWx0IGluIHB5ZGVidWcgbW9kZQogICAgaWYgaGFzYXR0cihzeXMsICdnZXR0b3RhbHJlZmNvdW50Jyk6CiAgICAgICAgcmVzb3VyY2VfYWN0aW9uID0gImFsd2F5cyIKICAgIGVsc2U6CiAgICAgICAgcmVzb3VyY2VfYWN0aW9uID0gImlnbm9yZSIKICAgIHNpbXBsZWZpbHRlcihyZXNvdXJjZV9hY3Rpb24sIGNhdGVnb3J5PVJlc291cmNlV2FybmluZywgYXBwZW5kPTEpCgojZml4bWUgYnJ5dGhvbiBFcnJvcjogX3dhcm5pbmdzX2RlZmF1bHRzIGlzIG5vdCBkZWZpbmVkCiNkZWwgX3dhcm5pbmdzX2RlZmF1bHRzCg==',
'/Lib/difflib.py':'',
'/Lib/string.py':'IyBTb21lIHN0cmluZ3MgZm9yIGN0eXBlLXN0eWxlIGNoYXJhY3RlciBjbGFzc2lmaWNhdGlvbgp3aGl0ZXNwYWNlID0gJyBcdFxuXHJcdlxmJwphc2NpaV9sb3dlcmNhc2UgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonCmFzY2lpX3VwcGVyY2FzZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicKYXNjaWlfbGV0dGVycyA9IGFzY2lpX2xvd2VyY2FzZSArIGFzY2lpX3VwcGVyY2FzZQpkaWdpdHMgPSAnMDEyMzQ1Njc4OScKaGV4ZGlnaXRzID0gZGlnaXRzICsgJ2FiY2RlZicgKyAnQUJDREVGJwpvY3RkaWdpdHMgPSAnMDEyMzQ1NjcnCnB1bmN0dWF0aW9uID0gIiIiISIjJCUmJygpKissLS4vOjs8PT4/QFtcXV5fYHt8fX4iIiIKcHJpbnRhYmxlID0gZGlnaXRzICsgYXNjaWlfbGV0dGVycyArIHB1bmN0dWF0aW9uICsgd2hpdGVzcGFjZQoKIyBGdW5jdGlvbnMgd2hpY2ggYXJlbid0IGF2YWlsYWJsZSBhcyBzdHJpbmcgbWV0aG9kcy4KCiMgQ2FwaXRhbGl6ZSB0aGUgd29yZHMgaW4gYSBzdHJpbmcsIGUuZy4gIiBhQmMgIGRFZiAiIC0+ICJBYmMgRGVmIi4KZGVmIGNhcHdvcmRzKHMsIHNlcD1Ob25lKToKICAgICIiImNhcHdvcmRzKHMgWyxzZXBdKSAtPiBzdHJpbmcKCiAgICBTcGxpdCB0aGUgYXJndW1lbnQgaW50byB3b3JkcyB1c2luZyBzcGxpdCwgY2FwaXRhbGl6ZSBlYWNoCiAgICB3b3JkIHVzaW5nIGNhcGl0YWxpemUsIGFuZCBqb2luIHRoZSBjYXBpdGFsaXplZCB3b3JkcyB1c2luZwogICAgam9pbi4gIElmIHRoZSBvcHRpb25hbCBzZWNvbmQgYXJndW1lbnQgc2VwIGlzIGFic2VudCBvciBOb25lLAogICAgcnVucyBvZiB3aGl0ZXNwYWNlIGNoYXJhY3RlcnMgYXJlIHJlcGxhY2VkIGJ5IGEgc2luZ2xlIHNwYWNlCiAgICBhbmQgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcmUgcmVtb3ZlZCwgb3RoZXJ3aXNlCiAgICBzZXAgaXMgdXNlZCB0byBzcGxpdCBhbmQgam9pbiB0aGUgd29yZHMuCgogICAgIiIiCiAgICByZXR1cm4gKHNlcCBvciAnICcpLmpvaW4oeC5jYXBpdGFsaXplKCkgZm9yIHggaW4gcy5zcGxpdChzZXApKQo=',
'/Lib/genericpath.py':'IiIiDQpQYXRoIG9wZXJhdGlvbnMgY29tbW9uIHRvIG1vcmUgdGhhbiBvbmUgT1MNCkRvIG5vdCB1c2UgZGlyZWN0bHkuICBUaGUgT1Mgc3BlY2lmaWMgbW9kdWxlcyBpbXBvcnQgdGhlIGFwcHJvcHJpYXRlDQpmdW5jdGlvbnMgZnJvbSB0aGlzIG1vZHVsZSB0aGVtc2VsdmVzLg0KIiIiDQppbXBvcnQgb3MNCmltcG9ydCBzdGF0DQoNCl9fYWxsX18gPSBbJ2NvbW1vbnByZWZpeCcsICdleGlzdHMnLCAnZ2V0YXRpbWUnLCAnZ2V0Y3RpbWUnLCAnZ2V0bXRpbWUnLA0KICAgICAgICAgICAnZ2V0c2l6ZScsICdpc2RpcicsICdpc2ZpbGUnXQ0KDQoNCiMgRG9lcyBhIHBhdGggZXhpc3Q/DQojIFRoaXMgaXMgZmFsc2UgZm9yIGRhbmdsaW5nIHN5bWJvbGljIGxpbmtzIG9uIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHRoZW0uDQpkZWYgZXhpc3RzKHBhdGgpOg0KICAgICIiIlRlc3Qgd2hldGhlciBhIHBhdGggZXhpc3RzLiAgUmV0dXJucyBGYWxzZSBmb3IgYnJva2VuIHN5bWJvbGljIGxpbmtzIiIiDQogICAgdHJ5Og0KICAgICAgICBvcy5zdGF0KHBhdGgpDQogICAgZXhjZXB0IG9zLmVycm9yOg0KICAgICAgICByZXR1cm4gRmFsc2UNCiAgICByZXR1cm4gVHJ1ZQ0KDQoNCiMgVGhpcyBmb2xsb3dzIHN5bWJvbGljIGxpbmtzLCBzbyBib3RoIGlzbGluaygpIGFuZCBpc2RpcigpIGNhbiBiZSB0cnVlDQojIGZvciB0aGUgc2FtZSBwYXRoIG9ubyBzeXN0ZW1zIHRoYXQgc3VwcG9ydCBzeW1saW5rcw0KZGVmIGlzZmlsZShwYXRoKToNCiAgICAiIiJUZXN0IHdoZXRoZXIgYSBwYXRoIGlzIGEgcmVndWxhciBmaWxlIiIiDQogICAgdHJ5Og0KICAgICAgICBzdCA9IG9zLnN0YXQocGF0aCkNCiAgICBleGNlcHQgb3MuZXJyb3I6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIHJldHVybiBzdGF0LlNfSVNSRUcoc3Quc3RfbW9kZSkNCg0KDQojIElzIGEgcGF0aCBhIGRpcmVjdG9yeT8NCiMgVGhpcyBmb2xsb3dzIHN5bWJvbGljIGxpbmtzLCBzbyBib3RoIGlzbGluaygpIGFuZCBpc2RpcigpDQojIGNhbiBiZSB0cnVlIGZvciB0aGUgc2FtZSBwYXRoIG9uIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHN5bWxpbmtzDQpkZWYgaXNkaXIocyk6DQogICAgIiIiUmV0dXJuIHRydWUgaWYgdGhlIHBhdGhuYW1lIHJlZmVycyB0byBhbiBleGlzdGluZyBkaXJlY3RvcnkuIiIiDQogICAgdHJ5Og0KICAgICAgICBzdCA9IG9zLnN0YXQocykNCiAgICBleGNlcHQgb3MuZXJyb3I6DQogICAgICAgIHJldHVybiBGYWxzZQ0KICAgIHJldHVybiBzdGF0LlNfSVNESVIoc3Quc3RfbW9kZSkNCg0KDQpkZWYgZ2V0c2l6ZShmaWxlbmFtZSk6DQogICAgIiIiUmV0dXJuIHRoZSBzaXplIG9mIGEgZmlsZSwgcmVwb3J0ZWQgYnkgb3Muc3RhdCgpLiIiIg0KICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9zaXplDQoNCg0KZGVmIGdldG10aW1lKGZpbGVuYW1lKToNCiAgICAiIiJSZXR1cm4gdGhlIGxhc3QgbW9kaWZpY2F0aW9uIHRpbWUgb2YgYSBmaWxlLCByZXBvcnRlZCBieSBvcy5zdGF0KCkuIiIiDQogICAgcmV0dXJuIG9zLnN0YXQoZmlsZW5hbWUpLnN0X210aW1lDQoNCg0KZGVmIGdldGF0aW1lKGZpbGVuYW1lKToNCiAgICAiIiJSZXR1cm4gdGhlIGxhc3QgYWNjZXNzIHRpbWUgb2YgYSBmaWxlLCByZXBvcnRlZCBieSBvcy5zdGF0KCkuIiIiDQogICAgcmV0dXJuIG9zLnN0YXQoZmlsZW5hbWUpLnN0X2F0aW1lDQoNCg0KZGVmIGdldGN0aW1lKGZpbGVuYW1lKToNCiAgICAiIiJSZXR1cm4gdGhlIG1ldGFkYXRhIGNoYW5nZSB0aW1lIG9mIGEgZmlsZSwgcmVwb3J0ZWQgYnkgb3Muc3RhdCgpLiIiIg0KICAgIHJldHVybiBvcy5zdGF0KGZpbGVuYW1lKS5zdF9jdGltZQ0KDQoNCiMgUmV0dXJuIHRoZSBsb25nZXN0IHByZWZpeCBvZiBhbGwgbGlzdCBlbGVtZW50cy4NCmRlZiBjb21tb25wcmVmaXgobSk6DQogICAgIkdpdmVuIGEgbGlzdCBvZiBwYXRobmFtZXMsIHJldHVybnMgdGhlIGxvbmdlc3QgY29tbW9uIGxlYWRpbmcgY29tcG9uZW50Ig0KICAgIGlmIG5vdCBtOiByZXR1cm4gJycNCiAgICBzMSA9IG1pbihtKQ0KICAgIHMyID0gbWF4KG0pDQogICAgZm9yIGksIGMgaW4gZW51bWVyYXRlKHMxKToNCiAgICAgICAgaWYgYyAhPSBzMltpXToNCiAgICAgICAgICAgIHJldHVybiBzMVs6aV0NCiAgICByZXR1cm4gczENCg0KIyBTcGxpdCBhIHBhdGggaW4gcm9vdCBhbmQgZXh0ZW5zaW9uLg0KIyBUaGUgZXh0ZW5zaW9uIGlzIGV2ZXJ5dGhpbmcgc3RhcnRpbmcgYXQgdGhlIGxhc3QgZG90IGluIHRoZSBsYXN0DQojIHBhdGhuYW1lIGNvbXBvbmVudDsgdGhlIHJvb3QgaXMgZXZlcnl0aGluZyBiZWZvcmUgdGhhdC4NCiMgSXQgaXMgYWx3YXlzIHRydWUgdGhhdCByb290ICsgZXh0ID09IHAuDQoNCiMgR2VuZXJpYyBpbXBsZW1lbnRhdGlvbiBvZiBzcGxpdGV4dCwgdG8gYmUgcGFyYW1ldHJpemVkIHdpdGgNCiMgdGhlIHNlcGFyYXRvcnMNCmRlZiBfc3BsaXRleHQocCwgc2VwLCBhbHRzZXAsIGV4dHNlcCk6DQogICAgIiIiU3BsaXQgdGhlIGV4dGVuc2lvbiBmcm9tIGEgcGF0aG5hbWUuDQoNCiAgICBFeHRlbnNpb24gaXMgZXZlcnl0aGluZyBmcm9tIHRoZSBsYXN0IGRvdCB0byB0aGUgZW5kLCBpZ25vcmluZw0KICAgIGxlYWRpbmcgZG90cy4gIFJldHVybnMgIihyb290LCBleHQpIjsgZXh0IG1heSBiZSBlbXB0eS4iIiINCiAgICAjIE5PVEU6IFRoaXMgY29kZSBtdXN0IHdvcmsgZm9yIHRleHQgYW5kIGJ5dGVzIHN0cmluZ3MuDQoNCiAgICBzZXBJbmRleCA9IHAucmZpbmQoc2VwKQ0KICAgIGlmIGFsdHNlcDoNCiAgICAgICAgYWx0c2VwSW5kZXggPSBwLnJmaW5kKGFsdHNlcCkNCiAgICAgICAgc2VwSW5kZXggPSBtYXgoc2VwSW5kZXgsIGFsdHNlcEluZGV4KQ0KDQogICAgZG90SW5kZXggPSBwLnJmaW5kKGV4dHNlcCkNCiAgICBpZiBkb3RJbmRleCA+IHNlcEluZGV4Og0KICAgICAgICAjIHNraXAgYWxsIGxlYWRpbmcgZG90cw0KICAgICAgICBmaWxlbmFtZUluZGV4ID0gc2VwSW5kZXggKyAxDQogICAgICAgIHdoaWxlIGZpbGVuYW1lSW5kZXggPCBkb3RJbmRleDoNCiAgICAgICAgICAgIGlmIHBbZmlsZW5hbWVJbmRleDpmaWxlbmFtZUluZGV4KzFdICE9IGV4dHNlcDoNCiAgICAgICAgICAgICAgICByZXR1cm4gcFs6ZG90SW5kZXhdLCBwW2RvdEluZGV4Ol0NCiAgICAgICAgICAgIGZpbGVuYW1lSW5kZXggKz0gMQ0KDQogICAgcmV0dXJuIHAsIHBbOjBdDQo=',
'/Lib/webbrowser.py':'X19hbGxfXyA9IFsiRXJyb3IiLCAib3BlbiIsICJvcGVuX25ldyIsICJvcGVuX25ld190YWIiXQoKY2xhc3MgRXJyb3IoRXhjZXB0aW9uKToKICAgIHBhc3MKCl90YXJnZXQgPSB7IDA6ICcnLCAxOiAnX2JsYW5rJywgMjogJ19uZXcnIH0gICMgaGFjay4uLgoKCmRlZiBvcGVuKHVybCwgbmV3PTAsIGF1dG9yYWlzZT1UcnVlKToKICAgICIiIiAKICAgIG5ldyB3aW5kb3cgb3IgdGFiIGlzIG5vdCBjb250cm9sbGFibGUKICAgIG9uIHRoZSBjbGllbnQgc2lkZS4gYXV0b3JhaXNlIG5vdCBhdmFpbGFibGUuCiAgICAiIiIKICAgIGlmIHdpbi5vcGVuKHVybCwgX3RhcmdldFtuZXddKToKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgIHJldHVybiBGYWxzZQoKZGVmIG9wZW5fbmV3KHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDEpCgpkZWYgb3Blbl9uZXdfdGFiKHVybCk6CiAgICByZXR1cm4gb3Blbih1cmwsIDIpCgoK',
'/Lib/this.py':'cyA9ICIiIkd1ciBNcmEgYnMgQ2xndWJhLCBvbCBHdnogQ3JncmVmCgpPcm5oZ3ZzaHkgdmYgb3JnZ3JlIGd1bmEgaHR5bC4KUmtjeXZwdmcgdmYgb3JnZ3JlIGd1bmEgdnpjeXZwdmcuCkZ2emN5ciB2ZiBvcmdncmUgZ3VuYSBwYnpjeXJrLgpQYnpjeXJrIHZmIG9yZ2dyZSBndW5hIHBiemN5dnBuZ3JxLgpTeW5nIHZmIG9yZ2dyZSBndW5hIGFyZmdycS4KRmNuZWZyIHZmIG9yZ2dyZSBndW5hIHFyYWZyLgpFcm5xbm92eXZnbCBwYmhhZ2YuCkZjcnB2bnkgcG5mcmYgbmVyYSdnIGZjcnB2bnkgcmFiaHR1IGdiIG9lcm54IGd1ciBlaHlyZi4KTnlndWJodHUgY2VucGd2cG55dmdsIG9ybmdmIGNoZXZnbC4KUmVlYmVmIGZ1Ymh5cSBhcmlyZSBjbmZmIGZ2eXJhZ3lsLgpIYXlyZmYgcmtjeXZwdmd5bCBmdnlyYXBycS4KVmEgZ3VyIHNucHIgYnMgbnpvdnRodmdsLCBlcnNoZnIgZ3VyIGdyemNnbmd2YmEgZ2IgdGhyZmYuCkd1cmVyIGZ1Ymh5cSBvciBiYXItLSBuYXEgY2Vyc3Jlbm95bCBiYXlsIGJhciAtLWJvaXZiaGYgam5sIGdiIHFiIHZnLgpOeWd1Ymh0dSBndW5nIGpubCB6bmwgYWJnIG9yIGJvaXZiaGYgbmcgc3ZlZmcgaGF5cmZmIGxiaCdlciBRaGdwdS4KQWJqIHZmIG9yZ2dyZSBndW5hIGFyaXJlLgpOeWd1Ymh0dSBhcmlyZSB2ZiBic2dyYSBvcmdncmUgZ3VuYSAqZXZ0dWcqIGFiai4KVnMgZ3VyIHZ6Y3lyenJhZ25ndmJhIHZmIHVuZXEgZ2IgcmtjeW52YSwgdmcnZiBuIG9ucSB2cXJuLgpWcyBndXIgdnpjeXJ6cmFnbmd2YmEgdmYgcm5mbCBnYiBya2N5bnZhLCB2ZyB6bmwgb3IgbiB0YmJxIHZxcm4uCkFuenJmY25wcmYgbmVyIGJhciB1YmF4dmF0IHRlcm5nIHZxcm4gLS0geXJnJ2YgcWIgemJlciBicyBndWJmciEiIiIKCmQgPSB7fQpmb3IgYyBpbiAoNjUsIDk3KToKICAgIGZvciBpIGluIHJhbmdlKDI2KToKICAgICAgICBkW2NocihpK2MpXSA9IGNocigoaSsxMykgJSAyNiArIGMpCgpwcmludCgiIi5qb2luKFtkLmdldChjLCBjKSBmb3IgYyBpbiBzXSkpCg==',
'/Lib/datetime.py':'',
'/Lib/colorsys.py':'IiIiQ29udmVyc2lvbiBmdW5jdGlvbnMgYmV0d2VlbiBSR0IgYW5kIG90aGVyIGNvbG9yIHN5c3RlbXMuCgpUaGlzIG1vZHVsZXMgcHJvdmlkZXMgdHdvIGZ1bmN0aW9ucyBmb3IgZWFjaCBjb2xvciBzeXN0ZW0gQUJDOgoKICByZ2JfdG9fYWJjKHIsIGcsIGIpIC0tPiBhLCBiLCBjCiAgYWJjX3RvX3JnYihhLCBiLCBjKSAtLT4gciwgZywgYgoKQWxsIGlucHV0cyBhbmQgb3V0cHV0cyBhcmUgdHJpcGxlcyBvZiBmbG9hdHMgaW4gdGhlIHJhbmdlIFswLjAuLi4xLjBdCih3aXRoIHRoZSBleGNlcHRpb24gb2YgSSBhbmQgUSwgd2hpY2ggY292ZXJzIGEgc2xpZ2h0bHkgbGFyZ2VyIHJhbmdlKS4KSW5wdXRzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIG1heSBjYXVzZSBleGNlcHRpb25zIG9yIGludmFsaWQgb3V0cHV0cy4KClN1cHBvcnRlZCBjb2xvciBzeXN0ZW1zOgpSR0I6IFJlZCwgR3JlZW4sIEJsdWUgY29tcG9uZW50cwpZSVE6IEx1bWluYW5jZSwgQ2hyb21pbmFuY2UgKHVzZWQgYnkgY29tcG9zaXRlIHZpZGVvIHNpZ25hbHMpCkhMUzogSHVlLCBMdW1pbmFuY2UsIFNhdHVyYXRpb24KSFNWOiBIdWUsIFNhdHVyYXRpb24sIFZhbHVlCiIiIgoKIyBSZWZlcmVuY2VzOgojIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWUlRCiMgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9ITFNfY29sb3Jfc3BhY2UKIyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTVl9jb2xvcl9zcGFjZQoKX19hbGxfXyA9IFsicmdiX3RvX3lpcSIsInlpcV90b19yZ2IiLCJyZ2JfdG9faGxzIiwiaGxzX3RvX3JnYiIsCiAgICAgICAgICAgInJnYl90b19oc3YiLCJoc3ZfdG9fcmdiIl0KCiMgU29tZSBmbG9hdGluZyBwb2ludCBjb25zdGFudHMKCk9ORV9USElSRCA9IDEuMC8zLjAKT05FX1NJWFRIID0gMS4wLzYuMApUV09fVEhJUkQgPSAyLjAvMy4wCgojIFlJUTogdXNlZCBieSBjb21wb3NpdGUgdmlkZW8gc2lnbmFscyAobGluZWFyIGNvbWJpbmF0aW9ucyBvZiBSR0IpCiMgWTogcGVyY2VpdmVkIGdyZXkgbGV2ZWwgKDAuMCA9PSBibGFjaywgMS4wID09IHdoaXRlKQojIEksIFE6IGNvbG9yIGNvbXBvbmVudHMKCmRlZiByZ2JfdG9feWlxKHIsIGcsIGIpOgogICAgeSA9IDAuMzAqciArIDAuNTkqZyArIDAuMTEqYgogICAgaSA9IDAuNjAqciAtIDAuMjgqZyAtIDAuMzIqYgogICAgcSA9IDAuMjEqciAtIDAuNTIqZyArIDAuMzEqYgogICAgcmV0dXJuICh5LCBpLCBxKQoKZGVmIHlpcV90b19yZ2IoeSwgaSwgcSk6CiAgICByID0geSArIDAuOTQ4MjYyKmkgKyAwLjYyNDAxMypxCiAgICBnID0geSAtIDAuMjc2MDY2KmkgLSAwLjYzOTgxMCpxCiAgICBiID0geSAtIDEuMTA1NDUwKmkgKyAxLjcyOTg2MCpxCiAgICBpZiByIDwgMC4wOgogICAgICAgIHIgPSAwLjAKICAgIGlmIGcgPCAwLjA6CiAgICAgICAgZyA9IDAuMAogICAgaWYgYiA8IDAuMDoKICAgICAgICBiID0gMC4wCiAgICBpZiByID4gMS4wOgogICAgICAgIHIgPSAxLjAKICAgIGlmIGcgPiAxLjA6CiAgICAgICAgZyA9IDEuMAogICAgaWYgYiA+IDEuMDoKICAgICAgICBiID0gMS4wCiAgICByZXR1cm4gKHIsIGcsIGIpCgoKIyBITFM6IEh1ZSwgTHVtaW5hbmNlLCBTYXR1cmF0aW9uCiMgSDogcG9zaXRpb24gaW4gdGhlIHNwZWN0cnVtCiMgTDogY29sb3IgbGlnaHRuZXNzCiMgUzogY29sb3Igc2F0dXJhdGlvbgoKZGVmIHJnYl90b19obHMociwgZywgYik6CiAgICBtYXhjID0gbWF4KHIsIGcsIGIpCiAgICBtaW5jID0gbWluKHIsIGcsIGIpCiAgICAjIFhYWCBDYW4gb3B0aW1pemUgKG1heGMrbWluYykgYW5kIChtYXhjLW1pbmMpCiAgICBsID0gKG1pbmMrbWF4YykvMi4wCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgbCwgMC4wCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAobWF4YyttaW5jKQogICAgZWxzZToKICAgICAgICBzID0gKG1heGMtbWluYykgLyAoMi4wLW1heGMtbWluYykKICAgIHJjID0gKG1heGMtcikgLyAobWF4Yy1taW5jKQogICAgZ2MgPSAobWF4Yy1nKSAvIChtYXhjLW1pbmMpCiAgICBiYyA9IChtYXhjLWIpIC8gKG1heGMtbWluYykKICAgIGlmIHIgPT0gbWF4YzoKICAgICAgICBoID0gYmMtZ2MKICAgIGVsaWYgZyA9PSBtYXhjOgogICAgICAgIGggPSAyLjArcmMtYmMKICAgIGVsc2U6CiAgICAgICAgaCA9IDQuMCtnYy1yYwogICAgaCA9IChoLzYuMCkgJSAxLjAKICAgIHJldHVybiBoLCBsLCBzCgpkZWYgaGxzX3RvX3JnYihoLCBsLCBzKToKICAgIGlmIHMgPT0gMC4wOgogICAgICAgIHJldHVybiBsLCBsLCBsCiAgICBpZiBsIDw9IDAuNToKICAgICAgICBtMiA9IGwgKiAoMS4wK3MpCiAgICBlbHNlOgogICAgICAgIG0yID0gbCtzLShsKnMpCiAgICBtMSA9IDIuMCpsIC0gbTIKICAgIHJldHVybiAoX3YobTEsIG0yLCBoK09ORV9USElSRCksIF92KG0xLCBtMiwgaCksIF92KG0xLCBtMiwgaC1PTkVfVEhJUkQpKQoKZGVmIF92KG0xLCBtMiwgaHVlKToKICAgIGh1ZSA9IGh1ZSAlIDEuMAogICAgaWYgaHVlIDwgT05FX1NJWFRIOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqaHVlKjYuMAogICAgaWYgaHVlIDwgMC41OgogICAgICAgIHJldHVybiBtMgogICAgaWYgaHVlIDwgVFdPX1RISVJEOgogICAgICAgIHJldHVybiBtMSArIChtMi1tMSkqKFRXT19USElSRC1odWUpKjYuMAogICAgcmV0dXJuIG0xCgoKIyBIU1Y6IEh1ZSwgU2F0dXJhdGlvbiwgVmFsdWUKIyBIOiBwb3NpdGlvbiBpbiB0aGUgc3BlY3RydW0KIyBTOiBjb2xvciBzYXR1cmF0aW9uICgicHVyaXR5IikKIyBWOiBjb2xvciBicmlnaHRuZXNzCgpkZWYgcmdiX3RvX2hzdihyLCBnLCBiKToKICAgIG1heGMgPSBtYXgociwgZywgYikKICAgIG1pbmMgPSBtaW4ociwgZywgYikKICAgIHYgPSBtYXhjCiAgICBpZiBtaW5jID09IG1heGM6CiAgICAgICAgcmV0dXJuIDAuMCwgMC4wLCB2CiAgICBzID0gKG1heGMtbWluYykgLyBtYXhjCiAgICByYyA9IChtYXhjLXIpIC8gKG1heGMtbWluYykKICAgIGdjID0gKG1heGMtZykgLyAobWF4Yy1taW5jKQogICAgYmMgPSAobWF4Yy1iKSAvIChtYXhjLW1pbmMpCiAgICBpZiByID09IG1heGM6CiAgICAgICAgaCA9IGJjLWdjCiAgICBlbGlmIGcgPT0gbWF4YzoKICAgICAgICBoID0gMi4wK3JjLWJjCiAgICBlbHNlOgogICAgICAgIGggPSA0LjArZ2MtcmMKICAgIGggPSAoaC82LjApICUgMS4wCiAgICByZXR1cm4gaCwgcywgdgoKZGVmIGhzdl90b19yZ2IoaCwgcywgdik6CiAgICBpZiBzID09IDAuMDoKICAgICAgICByZXR1cm4gdiwgdiwgdgogICAgaSA9IGludChoKjYuMCkgIyBYWFggYXNzdW1lIGludCgpIHRydW5jYXRlcyEKICAgIGYgPSAoaCo2LjApIC0gaQogICAgcCA9IHYqKDEuMCAtIHMpCiAgICBxID0gdiooMS4wIC0gcypmKQogICAgdCA9IHYqKDEuMCAtIHMqKDEuMC1mKSkKICAgIGkgPSBpJTYKICAgIGlmIGkgPT0gMDoKICAgICAgICByZXR1cm4gdiwgdCwgcAogICAgaWYgaSA9PSAxOgogICAgICAgIHJldHVybiBxLCB2LCBwCiAgICBpZiBpID09IDI6CiAgICAgICAgcmV0dXJuIHAsIHYsIHQKICAgIGlmIGkgPT0gMzoKICAgICAgICByZXR1cm4gcCwgcSwgdgogICAgaWYgaSA9PSA0OgogICAgICAgIHJldHVybiB0LCBwLCB2CiAgICBpZiBpID09IDU6CiAgICAgICAgcmV0dXJuIHYsIHAsIHEKICAgICMgQ2Fubm90IGdldCBoZXJlCg==',
'/Lib/traceback.py':'aW1wb3J0IHN5cwpkZWYgcHJpbnRfZXhjKGZpbGU9c3lzLnN0ZGVycik6CiAgICBleGMgPSBfX0JSWVRIT05fXy5leGNlcHRpb25fc3RhY2tbLTFdCiAgICBmaWxlLndyaXRlKGV4Yy5pbmZvKQogICAgZmlsZS53cml0ZSgnXG4nK2V4Yy5fX25hbWVfXykKICAgIGlmIGV4Yy5tZXNzYWdlOgogICAgICAgIGZpbGUud3JpdGUoJzogJytleGMubWVzc2FnZSkKICAgIGZpbGUud3JpdGUoJ1xuJykK',
'/Lib/_random.py':'aW1wb3J0IF9vcwpjbGFzcyBSYW5kb206CiAgICAiIiJSYW5kb20gbnVtYmVyIGdlbmVyYXRvciBiYXNlIGNsYXNzIHVzZWQgYnkgYm91bmQgbW9kdWxlIGZ1bmN0aW9ucy4KCiAgICBVc2VkIHRvIGluc3RhbnRpYXRlIGluc3RhbmNlcyBvZiBSYW5kb20gdG8gZ2V0IGdlbmVyYXRvcnMgdGhhdCBkb24ndAogICAgc2hhcmUgc3RhdGUuCgogICAgQ2xhc3MgUmFuZG9tIGNhbiBhbHNvIGJlIHN1YmNsYXNzZWQgaWYgeW91IHdhbnQgdG8gdXNlIGEgZGlmZmVyZW50IGJhc2ljCiAgICBnZW5lcmF0b3Igb2YgeW91ciBvd24gZGV2aXNpbmc6IGluIHRoYXQgY2FzZSwgb3ZlcnJpZGUgdGhlIGZvbGxvd2luZwogICAgbWV0aG9kczogIHJhbmRvbSgpLCBzZWVkKCksIGdldHN0YXRlKCksIGFuZCBzZXRzdGF0ZSgpLgogICAgT3B0aW9uYWxseSwgaW1wbGVtZW50IGEgZ2V0cmFuZGJpdHMoKSBtZXRob2Qgc28gdGhhdCByYW5kcmFuZ2UoKQogICAgY2FuIGNvdmVyIGFyYml0cmFyaWx5IGxhcmdlIHJhbmdlcy4KCiAgICAiIiIKICAgICNyYW5kb20KICAgICNzZWVkCiAgICAjZ2V0c3RhdGUKICAgICNzZXRzdGF0ZQoKCiAgICBWRVJTSU9OID0gMyAgICAgIyB1c2VkIGJ5IGdldHN0YXRlL3NldHN0YXRlCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHg9Tm9uZSk6CiAgICAgICAgIiIiSW5pdGlhbGl6ZSBhbiBpbnN0YW5jZS4KCiAgICAgICAgT3B0aW9uYWwgYXJndW1lbnQgeCBjb250cm9scyBzZWVkaW5nLCBhcyBmb3IgUmFuZG9tLnNlZWQoKS4KICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9eAoKICAgIGRlZiBzZWVkKHNlbGYsIGE9Tm9uZSwgdmVyc2lvbj0yKToKICAgICAgICAiIiJJbml0aWFsaXplIGludGVybmFsIHN0YXRlIGZyb20gaGFzaGFibGUgb2JqZWN0LgoKICAgICAgICBOb25lIG9yIG5vIGFyZ3VtZW50IHNlZWRzIGZyb20gY3VycmVudCB0aW1lIG9yIGZyb20gYW4gb3BlcmF0aW5nCiAgICAgICAgc3lzdGVtIHNwZWNpZmljIHJhbmRvbW5lc3Mgc291cmNlIGlmIGF2YWlsYWJsZS4KCiAgICAgICAgRm9yIHZlcnNpb24gMiAodGhlIGRlZmF1bHQpLCBhbGwgb2YgdGhlIGJpdHMgYXJlIHVzZWQgaWYgKmEqIGlzIGEgc3RyLAogICAgICAgIGJ5dGVzLCBvciBieXRlYXJyYXkuICBGb3IgdmVyc2lvbiAxLCB0aGUgaGFzaCgpIG9mICphKiBpcyB1c2VkIGluc3RlYWQuCgogICAgICAgIElmICphKiBpcyBhbiBpbnQsIGFsbCBiaXRzIGFyZSB1c2VkLgoKICAgICAgICAiIiIKCiAgICAgICAgc2VsZi5fc3RhdGU9YQogICAgICAgIHNlbGYuZ2F1c3NfbmV4dCA9IE5vbmUKCiAgICBkZWYgZ2V0c3RhdGUoc2VsZik6CiAgICAgICAgIiIiUmV0dXJuIGludGVybmFsIHN0YXRlOyBjYW4gYmUgcGFzc2VkIHRvIHNldHN0YXRlKCkgbGF0ZXIuIiIiCiAgICAgICAgcmV0dXJuIHNlbGYuX3N0YXRlCgogICAgZGVmIHNldHN0YXRlKHNlbGYsIHN0YXRlKToKICAgICAgICAiIiJSZXN0b3JlIGludGVybmFsIHN0YXRlIGZyb20gb2JqZWN0IHJldHVybmVkIGJ5IGdldHN0YXRlKCkuIiIiCiAgICAgICAgc2VsZi5fc3RhdGU9c3RhdGUKCiAgICBkZWYgcmFuZG9tKHNlbGYpOgogICAgICAgICIiIkdldCB0aGUgbmV4dCByYW5kb20gbnVtYmVyIGluIHRoZSByYW5nZSBbMC4wLCAxLjApLiIiIgogICAgICAgIHJldHVybiBfb3MucmFuZG9tKCkKCiAgICBkZWYgZ2V0cmFuZGJpdHMoc2VsZiwgayk6CiAgICAgICAgIiIiZ2V0cmFuZGJpdHMoaykgLT4geC4gIEdlbmVyYXRlcyBhIGxvbmcgaW50IHdpdGggayByYW5kb20gYml0cy4iIiIKICAgICAgICBpZiBrIDw9IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoJ251bWJlciBvZiBiaXRzIG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKQogICAgICAgIGlmIGsgIT0gaW50KGspOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoJ251bWJlciBvZiBiaXRzIHNob3VsZCBiZSBhbiBpbnRlZ2VyJykKICAgICAgICBudW1ieXRlcyA9IChrICsgNykgLy8gOCAgICAgICAgICAgICAgICAgICAgICAgIyBiaXRzIC8gOCBhbmQgcm91bmRlZCB1cAogICAgICAgIHggPSBpbnQuZnJvbV9ieXRlcyhfdXJhbmRvbShudW1ieXRlcyksICdiaWcnKQogICAgICAgIHJldHVybiB4ID4+IChudW1ieXRlcyAqIDggLSBrKSAgICAgICAgICAgICAgICAjIHRyaW0gZXhjZXNzIGJpdHMK',
'/Lib/signal.py':'IiIiVGhpcyBtb2R1bGUgcHJvdmlkZXMgbWVjaGFuaXNtcyB0byB1c2Ugc2lnbmFsIGhhbmRsZXJzIGluIFB5dGhvbi4KCkZ1bmN0aW9uczoKCmFsYXJtKCkgLS0gY2F1c2UgU0lHQUxSTSBhZnRlciBhIHNwZWNpZmllZCB0aW1lIFtVbml4IG9ubHldCnNldGl0aW1lcigpIC0tIGNhdXNlIGEgc2lnbmFsIChkZXNjcmliZWQgYmVsb3cpIGFmdGVyIGEgc3BlY2lmaWVkCiAgICAgICAgICAgICAgIGZsb2F0IHRpbWUgYW5kIHRoZSB0aW1lciBtYXkgcmVzdGFydCB0aGVuIFtVbml4IG9ubHldCmdldGl0aW1lcigpIC0tIGdldCBjdXJyZW50IHZhbHVlIG9mIHRpbWVyIFtVbml4IG9ubHldCnNpZ25hbCgpIC0tIHNldCB0aGUgYWN0aW9uIGZvciBhIGdpdmVuIHNpZ25hbApnZXRzaWduYWwoKSAtLSBnZXQgdGhlIHNpZ25hbCBhY3Rpb24gZm9yIGEgZ2l2ZW4gc2lnbmFsCnBhdXNlKCkgLS0gd2FpdCB1bnRpbCBhIHNpZ25hbCBhcnJpdmVzIFtVbml4IG9ubHldCmRlZmF1bHRfaW50X2hhbmRsZXIoKSAtLSBkZWZhdWx0IFNJR0lOVCBoYW5kbGVyCgpzaWduYWwgY29uc3RhbnRzOgpTSUdfREZMIC0tIHVzZWQgdG8gcmVmZXIgdG8gdGhlIHN5c3RlbSBkZWZhdWx0IGhhbmRsZXIKU0lHX0lHTiAtLSB1c2VkIHRvIGlnbm9yZSB0aGUgc2lnbmFsCk5TSUcgLS0gbnVtYmVyIG9mIGRlZmluZWQgc2lnbmFscwpTSUdJTlQsIFNJR1RFUk0sIGV0Yy4gLS0gc2lnbmFsIG51bWJlcnMKCml0aW1lciBjb25zdGFudHM6CklUSU1FUl9SRUFMIC0tIGRlY3JlbWVudHMgaW4gcmVhbCB0aW1lLCBhbmQgZGVsaXZlcnMgU0lHQUxSTSB1cG9uCiAgICAgICAgICAgICAgIGV4cGlyYXRpb24KSVRJTUVSX1ZJUlRVQUwgLS0gZGVjcmVtZW50cyBvbmx5IHdoZW4gdGhlIHByb2Nlc3MgaXMgZXhlY3V0aW5nLAogICAgICAgICAgICAgICBhbmQgZGVsaXZlcnMgU0lHVlRBTFJNIHVwb24gZXhwaXJhdGlvbgpJVElNRVJfUFJPRiAtLSBkZWNyZW1lbnRzIGJvdGggd2hlbiB0aGUgcHJvY2VzcyBpcyBleGVjdXRpbmcgYW5kCiAgICAgICAgICAgICAgIHdoZW4gdGhlIHN5c3RlbSBpcyBleGVjdXRpbmcgb24gYmVoYWxmIG9mIHRoZSBwcm9jZXNzLgogICAgICAgICAgICAgICBDb3VwbGVkIHdpdGggSVRJTUVSX1ZJUlRVQUwsIHRoaXMgdGltZXIgaXMgdXN1YWxseQogICAgICAgICAgICAgICB1c2VkIHRvIHByb2ZpbGUgdGhlIHRpbWUgc3BlbnQgYnkgdGhlIGFwcGxpY2F0aW9uCiAgICAgICAgICAgICAgIGluIHVzZXIgYW5kIGtlcm5lbCBzcGFjZS4gU0lHUFJPRiBpcyBkZWxpdmVyZWQgdXBvbgogICAgICAgICAgICAgICBleHBpcmF0aW9uLgoKCioqKiBJTVBPUlRBTlQgTk9USUNFICoqKgpBIHNpZ25hbCBoYW5kbGVyIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHR3byBhcmd1bWVudHM6CnRoZSBmaXJzdCBpcyB0aGUgc2lnbmFsIG51bWJlciwgdGhlIHNlY29uZCBpcyB0aGUgaW50ZXJydXB0ZWQgc3RhY2sgZnJhbWUuIiIiCgpDVFJMX0JSRUFLX0VWRU5UPTEKQ1RSTF9DX0VWRU5UPTAKTlNJRz0yMwpTSUdBQlJUPTIyClNJR0JSRUFLPTIxClNJR0ZQRT04ClNJR0lMTD00ClNJR0lOVD0yClNJR1NFR1Y9MTEKU0lHVEVSTT0xNQpTSUdfREZMPTAKU0lHX0lHTj0xCgpkZWYgc2lnbmFsKHNpZ25hbG51bSwgaGFuZGxlcikgOgogICAgcGFzcwo=',
'/Lib/bisect.py':'IiIiQmlzZWN0aW9uIGFsZ29yaXRobXMuIiIiCgpkZWYgaW5zb3J0X3JpZ2h0KGEsIHgsIGxvPTAsIGhpPU5vbmUpOgogICAgIiIiSW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFuZCBrZWVwIGl0IHNvcnRlZCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBJZiB4IGlzIGFscmVhZHkgaW4gYSwgaW5zZXJ0IGl0IHRvIHRoZSByaWdodCBvZiB0aGUgcmlnaHRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgeCA8IGFbbWlkXTogaGkgPSBtaWQKICAgICAgICBlbHNlOiBsbyA9IG1pZCsxCiAgICBhLmluc2VydChsbywgeCkKCmluc29ydCA9IGluc29ydF9yaWdodCAgICMgYmFja3dhcmQgY29tcGF0aWJpbGl0eQoKZGVmIGJpc2VjdF9yaWdodChhLCB4LCBsbz0wLCBoaT1Ob25lKToKICAgICIiIlJldHVybiB0aGUgaW5kZXggd2hlcmUgdG8gaW5zZXJ0IGl0ZW0geCBpbiBsaXN0IGEsIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIFRoZSByZXR1cm4gdmFsdWUgaSBpcyBzdWNoIHRoYXQgYWxsIGUgaW4gYVs6aV0gaGF2ZSBlIDw9IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID4geC4gIFNvIGlmIHggYWxyZWFkeSBhcHBlYXJzIGluIHRoZSBsaXN0LCBhLmluc2VydCh4KSB3aWxsCiAgICBpbnNlcnQganVzdCBhZnRlciB0aGUgcmlnaHRtb3N0IHggYWxyZWFkeSB0aGVyZS4KCiAgICBPcHRpb25hbCBhcmdzIGxvIChkZWZhdWx0IDApIGFuZCBoaSAoZGVmYXVsdCBsZW4oYSkpIGJvdW5kIHRoZQogICAgc2xpY2Ugb2YgYSB0byBiZSBzZWFyY2hlZC4KICAgICIiIgoKICAgIGlmIGxvIDwgMDoKICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCdsbyBtdXN0IGJlIG5vbi1uZWdhdGl2ZScpCiAgICBpZiBoaSBpcyBOb25lOgogICAgICAgIGhpID0gbGVuKGEpCiAgICB3aGlsZSBsbyA8IGhpOgogICAgICAgIG1pZCA9IChsbytoaSkvLzIKICAgICAgICBpZiB4IDwgYVttaWRdOiBoaSA9IG1pZAogICAgICAgIGVsc2U6IGxvID0gbWlkKzEKICAgIHJldHVybiBsbwoKYmlzZWN0ID0gYmlzZWN0X3JpZ2h0ICAgIyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5CgpkZWYgaW5zb3J0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJJbnNlcnQgaXRlbSB4IGluIGxpc3QgYSwgYW5kIGtlZXAgaXQgc29ydGVkIGFzc3VtaW5nIGEgaXMgc29ydGVkLgoKICAgIElmIHggaXMgYWxyZWFkeSBpbiBhLCBpbnNlcnQgaXQgdG8gdGhlIGxlZnQgb2YgdGhlIGxlZnRtb3N0IHguCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICBhLmluc2VydChsbywgeCkKCgpkZWYgYmlzZWN0X2xlZnQoYSwgeCwgbG89MCwgaGk9Tm9uZSk6CiAgICAiIiJSZXR1cm4gdGhlIGluZGV4IHdoZXJlIHRvIGluc2VydCBpdGVtIHggaW4gbGlzdCBhLCBhc3N1bWluZyBhIGlzIHNvcnRlZC4KCiAgICBUaGUgcmV0dXJuIHZhbHVlIGkgaXMgc3VjaCB0aGF0IGFsbCBlIGluIGFbOmldIGhhdmUgZSA8IHgsIGFuZCBhbGwgZSBpbgogICAgYVtpOl0gaGF2ZSBlID49IHguICBTbyBpZiB4IGFscmVhZHkgYXBwZWFycyBpbiB0aGUgbGlzdCwgYS5pbnNlcnQoeCkgd2lsbAogICAgaW5zZXJ0IGp1c3QgYmVmb3JlIHRoZSBsZWZ0bW9zdCB4IGFscmVhZHkgdGhlcmUuCgogICAgT3B0aW9uYWwgYXJncyBsbyAoZGVmYXVsdCAwKSBhbmQgaGkgKGRlZmF1bHQgbGVuKGEpKSBib3VuZCB0aGUKICAgIHNsaWNlIG9mIGEgdG8gYmUgc2VhcmNoZWQuCiAgICAiIiIKCiAgICBpZiBsbyA8IDA6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbG8gbXVzdCBiZSBub24tbmVnYXRpdmUnKQogICAgaWYgaGkgaXMgTm9uZToKICAgICAgICBoaSA9IGxlbihhKQogICAgd2hpbGUgbG8gPCBoaToKICAgICAgICBtaWQgPSAobG8raGkpLy8yCiAgICAgICAgaWYgYVttaWRdIDwgeDogbG8gPSBtaWQrMQogICAgICAgIGVsc2U6IGhpID0gbWlkCiAgICByZXR1cm4gbG8KCiMgZG9udCcgbmVlZCB0aGlzIGZvciBicnl0aG9uCiMgT3ZlcndyaXRlIGFib3ZlIGRlZmluaXRpb25zIHdpdGggYSBmYXN0IEMgaW1wbGVtZW50YXRpb24KI3RyeToKIyAgICBmcm9tIF9iaXNlY3QgaW1wb3J0ICoKI2V4Y2VwdCBJbXBvcnRFcnJvcjoKIyAgICBwYXNzCg==',
'/Lib/collections.py':'',
'/Lib/pyindexedDB.py':'Y2xhc3MgRXZlbnRMaXN0ZW5lcjoKICBkZWYgX19pbml0X18oc2VsZiwgZXZlbnRzPVtdKToKICAgICAgc2VsZi5fZXZlbnRzPWV2ZW50cwoKICBkZWYgYXBwZW5kKHNlbGYsIGV2ZW50KToKICAgICAgc2VsZi5fZXZlbnRzLmFwcGVuZChldmVudCkKCiAgZGVmIGZpcmUoc2VsZiwgZSk6CiAgICAgIGZvciBfZXZlbnQgaW4gc2VsZi5fZXZlbnRzOgogICAgICAgICAgX2V2ZW50KGUpCgpjbGFzcyBweWluZGV4ZWREQjoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIGlmIG5vdCBfX0JSWVRIT05fXy5oYXNfaW5kZXhlZERCOgogICAgICAgICByYWlzZSBFeGNlcHRpb24oIk5vdEltcGxlbWVudGVkRXJyb3IiLCAiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBpbmRleGVkREIiKQogICAgICAgICByZXR1cm4KCiAgICAgIHNlbGYuX2luZGV4ZWREQj1fX0JSWVRIT05fXy5pbmRleGVkREIoKQogICAgICBzZWxmLl9kYj1Ob25lCiAgICAgIHNlbGYuX3ZlcnNpb249Tm9uZQoKICBkZWYgX29uc3VjY2VzcyhzZWxmLCBldmVudCk6CiAgICAgIHNlbGYuX2RiPWV2ZW50LnRhcmdldC5yZXN1bHQKCiAgZGVmIG9wZW4oc2VsZiwgbmFtZSwgb25zdWNjZXNzLCB2ZXJzaW9uPTEuMCwgb25lcnJvcj1Ob25lLCAKICAgICAgICAgICBvbnVwZ3JhZGVuZWVkZWQ9Tm9uZSk6CiAgICAgIHNlbGYuX3ZlcnNpb249dmVyc2lvbgogICAgICBfcmVzdWx0PXNlbGYuX2luZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pCiAgICAgIF9zdWNjZXNzPUV2ZW50TGlzdGVuZXIoW3NlbGYuX29uc3VjY2Vzcywgb25zdWNjZXNzXSkKICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9X3N1Y2Nlc3MuZmlyZQogICAgICBfcmVzdWx0Lm9udXBncmFkZW5lZWRlZD1vbnVwZ3JhZGVuZWVkZWQKCiAgICAgICNpZiBvbmVycm9yIGlzIE5vbmU6CiAgICAgIGRlZiBvbmVycm9yKGUpOgogICAgICAgICAgcHJpbnQoIm9uZXJyb3I6ICVzOiVzIiAlICAoZS50eXBlLCBlLnRhcmdldC5yZXN1bHQpKQoKICAgICAgZGVmIG9uYmxvY2tlZChlKToKICAgICAgICAgIHByaW50KCJibG9ja2VkOiAlczolcyIgJSAgKGUudHlwZSwgZS5yZXN1bHQpKQoKICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKICAgICAgX3Jlc3VsdC5vbmJsb2NrZWQ9b25ibG9ja2VkCgogIGRlZiB0cmFuc2FjdGlvbihzZWxmLCBlbnRpdGllcywgbW9kZT0ncmVhZCcpOgogICAgICByZXR1cm4gVHJhbnNhY3Rpb24oc2VsZi5fZGIudHJhbnNhY3Rpb24oZW50aXRpZXMsIG1vZGUpKQoKY2xhc3MgVHJhbnNhY3Rpb246CiAgZGVmIF9faW5pdF9fKHNlbGYsIHRyYW5zYWN0aW9uKToKICAgICAgc2VsZi5fdHJhbnNhY3Rpb249dHJhbnNhY3Rpb24KCiAgZGVmIG9iamVjdFN0b3JlKHNlbGYsIG5hbWUpOgogICAgICByZXR1cm4gT2JqZWN0U3RvcmUoc2VsZi5fdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUobmFtZSkpCgpjbGFzcyBPYmplY3RTdG9yZToKICBkZWYgX19pbml0X18oc2VsZiwgb2JqZWN0U3RvcmUpOgogICAgICBzZWxmLl9vYmplY3RTdG9yZT1vYmplY3RTdG9yZQogICAgICBzZWxmLl9kYXRhPVtdCgogIGRlZiBjbGVhcihzZWxmLCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1zZWxmLl9vYmplY3RTdG9yZS5jbGVhcigpCgogICAgICBpZiBvbnN1Y2Nlc3MgaXMgbm90IE5vbmU6CiAgICAgICAgIF9yZXN1bHQub25zdWNjZXNzPW9uc3VjY2VzcwoKICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbmVycm9yPW9uZXJyb3IKCiAgZGVmIF9oZWxwZXIoc2VsZiwgZnVuYywgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgX3Jlc3VsdD1mdW5jKG9iamVjdCkKCiAgICAgIGlmIG9uc3VjY2VzcyBpcyBub3QgTm9uZToKICAgICAgICAgX3Jlc3VsdC5vbnN1Y2Nlc3M9b25zdWNjZXNzCgogICAgICBpZiBvbmVycm9yIGlzIG5vdCBOb25lOgogICAgICAgICBfcmVzdWx0Lm9uZXJyb3I9b25lcnJvcgoKICBkZWYgcHV0KHNlbGYsIG9iamVjdCwga2V5PU5vbmUsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOgogICAgICBfcj1zZWxmLl9vYmplY3RTdG9yZS5wdXQob2JqZWN0LCBrZXkpCiAgICAgIF9yLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKICAgICAgX3Iub25lcnJvcj1vbmVycm9yCgogIGRlZiBhZGQoc2VsZiwgb2JqZWN0LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmFkZCwgb2JqZWN0LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCgogIGRlZiBkZWxldGUoc2VsZiwgaW5kZXgsIG9uc3VjY2Vzcz1Ob25lLCBvbmVycm9yPU5vbmUpOiAKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmRlbGV0ZSwgaW5kZXgsIG9uc3VjY2Vzcywgb25lcnJvcikKICAgICAKICBkZWYgcXVlcnkoc2VsZiwgKmFyZ3MpOgogICAgICBzZWxmLl9kYXRhPVtdCiAgICAgIGRlZiBvbnN1Y2Nlc3MoZXZlbnQpOgogICAgICAgICAgY3Vyc29yPWV2ZW50LnRhcmdldC5yZXN1bHQKICAgICAgICAgIGlmIGN1cnNvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgIHNlbGYuX2RhdGEuYXBwZW5kKGN1cnNvci52YWx1ZSkKICAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpCgogICAgICBzZWxmLl9vYmplY3RTdG9yZS5vcGVuQ3Vyc29yKGFyZ3MpLm9uc3VjY2Vzcz1vbnN1Y2Nlc3MKCiAgZGVmIGZldGNoYWxsKHNlbGYpOgogICAgICB5aWVsZCBzZWxmLl9kYXRhCgogIGRlZiBnZXQoc2VsZiwga2V5LCBvbnN1Y2Nlc3M9Tm9uZSwgb25lcnJvcj1Ob25lKToKICAgICAgc2VsZi5faGVscGVyKHNlbGYuX29iamVjdFN0b3JlLmdldCwga2V5LCBvbnN1Y2Nlc3MsIG9uZXJyb3IpCg==',
'/Lib/functools.py':'IiIiZnVuY3Rvb2xzLnB5IC0gVG9vbHMgZm9yIHdvcmtpbmcgd2l0aCBmdW5jdGlvbnMgYW5kIGNhbGxhYmxlIG9iamVjdHMKIiIiCiMgUHl0aG9uIG1vZHVsZSB3cmFwcGVyIGZvciBfZnVuY3Rvb2xzIEMgbW9kdWxlCiMgdG8gYWxsb3cgdXRpbGl0aWVzIHdyaXR0ZW4gaW4gUHl0aG9uIHRvIGJlIGFkZGVkCiMgdG8gdGhlIGZ1bmN0b29scyBtb2R1bGUuCiMgV3JpdHRlbiBieSBOaWNrIENvZ2hsYW4gPG5jb2dobGFuIGF0IGdtYWlsLmNvbT4KIyBhbmQgUmF5bW9uZCBIZXR0aW5nZXIgPHB5dGhvbiBhdCByY24uY29tPgojICAgQ29weXJpZ2h0IChDKSAyMDA2LTIwMTAgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24uCiMgU2VlIEMgc291cmNlIGNvZGUgZm9yIF9mdW5jdG9vbHMgY3JlZGl0cy9jb3B5cmlnaHQKCl9fYWxsX18gPSBbJ3VwZGF0ZV93cmFwcGVyJywgJ3dyYXBzJywgJ1dSQVBQRVJfQVNTSUdOTUVOVFMnLCAnV1JBUFBFUl9VUERBVEVTJywKICAgICAgICAgICAndG90YWxfb3JkZXJpbmcnLCAnY21wX3RvX2tleScsICdscnVfY2FjaGUnLCAncmVkdWNlJywgJ3BhcnRpYWwnXQoKZnJvbSBfZnVuY3Rvb2xzIGltcG9ydCBwYXJ0aWFsLCByZWR1Y2UKZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgbmFtZWR0dXBsZQp0cnk6CiAgICBmcm9tIF90aHJlYWQgaW1wb3J0IGFsbG9jYXRlX2xvY2sgYXMgTG9jawpleGNlcHQ6CiAgICBmcm9tIF9kdW1teV90aHJlYWQgaW1wb3J0IGFsbG9jYXRlX2xvY2sgYXMgTG9jawoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyB1cGRhdGVfd3JhcHBlcigpIGFuZCB3cmFwcygpIGRlY29yYXRvcgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKIyB1cGRhdGVfd3JhcHBlcigpIGFuZCB3cmFwcygpIGFyZSB0b29scyB0byBoZWxwIHdyaXRlCiMgd3JhcHBlciBmdW5jdGlvbnMgdGhhdCBjYW4gaGFuZGxlIG5haXZlIGludHJvc3BlY3Rpb24KCldSQVBQRVJfQVNTSUdOTUVOVFMgPSAoJ19fbW9kdWxlX18nLCAnX19uYW1lX18nLCAnX19xdWFsbmFtZV9fJywgJ19fZG9jX18nLAogICAgICAgICAgICAgICAgICAgICAgICdfX2Fubm90YXRpb25zX18nKQpXUkFQUEVSX1VQREFURVMgPSAoJ19fZGljdF9fJywpCmRlZiB1cGRhdGVfd3JhcHBlcih3cmFwcGVyLAogICAgICAgICAgICAgICAgICAgd3JhcHBlZCwKICAgICAgICAgICAgICAgICAgIGFzc2lnbmVkID0gV1JBUFBFUl9BU1NJR05NRU5UUywKICAgICAgICAgICAgICAgICAgIHVwZGF0ZWQgPSBXUkFQUEVSX1VQREFURVMpOgogICAgIiIiVXBkYXRlIGEgd3JhcHBlciBmdW5jdGlvbiB0byBsb29rIGxpa2UgdGhlIHdyYXBwZWQgZnVuY3Rpb24KCiAgICAgICB3cmFwcGVyIGlzIHRoZSBmdW5jdGlvbiB0byBiZSB1cGRhdGVkCiAgICAgICB3cmFwcGVkIGlzIHRoZSBvcmlnaW5hbCBmdW5jdGlvbgogICAgICAgYXNzaWduZWQgaXMgYSB0dXBsZSBuYW1pbmcgdGhlIGF0dHJpYnV0ZXMgYXNzaWduZWQgZGlyZWN0bHkKICAgICAgIGZyb20gdGhlIHdyYXBwZWQgZnVuY3Rpb24gdG8gdGhlIHdyYXBwZXIgZnVuY3Rpb24gKGRlZmF1bHRzIHRvCiAgICAgICBmdW5jdG9vbHMuV1JBUFBFUl9BU1NJR05NRU5UUykKICAgICAgIHVwZGF0ZWQgaXMgYSB0dXBsZSBuYW1pbmcgdGhlIGF0dHJpYnV0ZXMgb2YgdGhlIHdyYXBwZXIgdGhhdAogICAgICAgYXJlIHVwZGF0ZWQgd2l0aCB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGUgZnJvbSB0aGUgd3JhcHBlZAogICAgICAgZnVuY3Rpb24gKGRlZmF1bHRzIHRvIGZ1bmN0b29scy5XUkFQUEVSX1VQREFURVMpCiAgICAiIiIKICAgIHdyYXBwZXIuX193cmFwcGVkX18gPSB3cmFwcGVkCiAgICBmb3IgYXR0ciBpbiBhc3NpZ25lZDoKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gZ2V0YXR0cih3cmFwcGVkLCBhdHRyKQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoKICAgICAgICAgICAgcGFzcwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNldGF0dHIod3JhcHBlciwgYXR0ciwgdmFsdWUpCiAgICBmb3IgYXR0ciBpbiB1cGRhdGVkOgogICAgICAgIGdldGF0dHIod3JhcHBlciwgYXR0cikudXBkYXRlKGdldGF0dHIod3JhcHBlZCwgYXR0ciwge30pKQogICAgIyBSZXR1cm4gdGhlIHdyYXBwZXIgc28gdGhpcyBjYW4gYmUgdXNlZCBhcyBhIGRlY29yYXRvciB2aWEgcGFydGlhbCgpCiAgICByZXR1cm4gd3JhcHBlcgoKZGVmIHdyYXBzKHdyYXBwZWQsCiAgICAgICAgICBhc3NpZ25lZCA9IFdSQVBQRVJfQVNTSUdOTUVOVFMsCiAgICAgICAgICB1cGRhdGVkID0gV1JBUFBFUl9VUERBVEVTKToKICAgICIiIkRlY29yYXRvciBmYWN0b3J5IHRvIGFwcGx5IHVwZGF0ZV93cmFwcGVyKCkgdG8gYSB3cmFwcGVyIGZ1bmN0aW9uCgogICAgICAgUmV0dXJucyBhIGRlY29yYXRvciB0aGF0IGludm9rZXMgdXBkYXRlX3dyYXBwZXIoKSB3aXRoIHRoZSBkZWNvcmF0ZWQKICAgICAgIGZ1bmN0aW9uIGFzIHRoZSB3cmFwcGVyIGFyZ3VtZW50IGFuZCB0aGUgYXJndW1lbnRzIHRvIHdyYXBzKCkgYXMgdGhlCiAgICAgICByZW1haW5pbmcgYXJndW1lbnRzLiBEZWZhdWx0IGFyZ3VtZW50cyBhcmUgYXMgZm9yIHVwZGF0ZV93cmFwcGVyKCkuCiAgICAgICBUaGlzIGlzIGEgY29udmVuaWVuY2UgZnVuY3Rpb24gdG8gc2ltcGxpZnkgYXBwbHlpbmcgcGFydGlhbCgpIHRvCiAgICAgICB1cGRhdGVfd3JhcHBlcigpLgogICAgIiIiCiAgICByZXR1cm4gcGFydGlhbCh1cGRhdGVfd3JhcHBlciwgd3JhcHBlZD13cmFwcGVkLAogICAgICAgICAgICAgICAgICAgYXNzaWduZWQ9YXNzaWduZWQsIHVwZGF0ZWQ9dXBkYXRlZCkKCgojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIyMgdG90YWxfb3JkZXJpbmcgY2xhc3MgZGVjb3JhdG9yCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpkZWYgdG90YWxfb3JkZXJpbmcoY2xzKToKICAgICIiIkNsYXNzIGRlY29yYXRvciB0aGF0IGZpbGxzIGluIG1pc3Npbmcgb3JkZXJpbmcgbWV0aG9kcyIiIgogICAgY29udmVydCA9IHsKICAgICAgICAnX19sdF9fJzogWygnX19ndF9fJywgbGFtYmRhIHNlbGYsIG90aGVyOiBub3QgKHNlbGYgPCBvdGhlciBvciBzZWxmID09IG90aGVyKSksCiAgICAgICAgICAgICAgICAgICAoJ19fbGVfXycsIGxhbWJkYSBzZWxmLCBvdGhlcjogc2VsZiA8IG90aGVyIG9yIHNlbGYgPT0gb3RoZXIpLAogICAgICAgICAgICAgICAgICAgKCdfX2dlX18nLCBsYW1iZGEgc2VsZiwgb3RoZXI6IG5vdCBzZWxmIDwgb3RoZXIpXSwKICAgICAgICAnX19sZV9fJzogWygnX19nZV9fJywgbGFtYmRhIHNlbGYsIG90aGVyOiBub3Qgc2VsZiA8PSBvdGhlciBvciBzZWxmID09IG90aGVyKSwKICAgICAgICAgICAgICAgICAgICgnX19sdF9fJywgbGFtYmRhIHNlbGYsIG90aGVyOiBzZWxmIDw9IG90aGVyIGFuZCBub3Qgc2VsZiA9PSBvdGhlciksCiAgICAgICAgICAgICAgICAgICAoJ19fZ3RfXycsIGxhbWJkYSBzZWxmLCBvdGhlcjogbm90IHNlbGYgPD0gb3RoZXIpXSwKICAgICAgICAnX19ndF9fJzogWygnX19sdF9fJywgbGFtYmRhIHNlbGYsIG90aGVyOiBub3QgKHNlbGYgPiBvdGhlciBvciBzZWxmID09IG90aGVyKSksCiAgICAgICAgICAgICAgICAgICAoJ19fZ2VfXycsIGxhbWJkYSBzZWxmLCBvdGhlcjogc2VsZiA+IG90aGVyIG9yIHNlbGYgPT0gb3RoZXIpLAogICAgICAgICAgICAgICAgICAgKCdfX2xlX18nLCBsYW1iZGEgc2VsZiwgb3RoZXI6IG5vdCBzZWxmID4gb3RoZXIpXSwKICAgICAgICAnX19nZV9fJzogWygnX19sZV9fJywgbGFtYmRhIHNlbGYsIG90aGVyOiAobm90IHNlbGYgPj0gb3RoZXIpIG9yIHNlbGYgPT0gb3RoZXIpLAogICAgICAgICAgICAgICAgICAgKCdfX2d0X18nLCBsYW1iZGEgc2VsZiwgb3RoZXI6IHNlbGYgPj0gb3RoZXIgYW5kIG5vdCBzZWxmID09IG90aGVyKSwKICAgICAgICAgICAgICAgICAgICgnX19sdF9fJywgbGFtYmRhIHNlbGYsIG90aGVyOiBub3Qgc2VsZiA+PSBvdGhlcildCiAgICB9CiAgICAjIEZpbmQgdXNlci1kZWZpbmVkIGNvbXBhcmlzb25zIChub3QgdGhvc2UgaW5oZXJpdGVkIGZyb20gb2JqZWN0KS4KICAgIHJvb3RzID0gW29wIGZvciBvcCBpbiBjb252ZXJ0IGlmIGdldGF0dHIoY2xzLCBvcCwgTm9uZSkgaXMgbm90IGdldGF0dHIob2JqZWN0LCBvcCwgTm9uZSldCiAgICBpZiBub3Qgcm9vdHM6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcignbXVzdCBkZWZpbmUgYXQgbGVhc3Qgb25lIG9yZGVyaW5nIG9wZXJhdGlvbjogPCA+IDw9ID49JykKICAgIHJvb3QgPSBtYXgocm9vdHMpICAgICAgICMgcHJlZmVyIF9fbHRfXyB0byBfX2xlX18gdG8gX19ndF9fIHRvIF9fZ2VfXwogICAgZm9yIG9wbmFtZSwgb3BmdW5jIGluIGNvbnZlcnRbcm9vdF06CiAgICAgICAgaWYgb3BuYW1lIG5vdCBpbiByb290czoKICAgICAgICAgICAgb3BmdW5jLl9fbmFtZV9fID0gb3BuYW1lCiAgICAgICAgICAgIG9wZnVuYy5fX2RvY19fID0gZ2V0YXR0cihpbnQsIG9wbmFtZSkuX19kb2NfXwogICAgICAgICAgICBzZXRhdHRyKGNscywgb3BuYW1lLCBvcGZ1bmMpCiAgICByZXR1cm4gY2xzCgoKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMjIGNtcF90b19rZXkoKSBmdW5jdGlvbiBjb252ZXJ0ZXIKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmRlZiBjbXBfdG9fa2V5KG15Y21wKToKICAgICIiIkNvbnZlcnQgYSBjbXA9IGZ1bmN0aW9uIGludG8gYSBrZXk9IGZ1bmN0aW9uIiIiCiAgICBjbGFzcyBLKG9iamVjdCk6CiAgICAgICAgX19zbG90c19fID0gWydvYmonXQogICAgICAgIGRlZiBfX2luaXRfXyhzZWxmLCBvYmopOgogICAgICAgICAgICBzZWxmLm9iaiA9IG9iagogICAgICAgIGRlZiBfX2x0X18oc2VsZiwgb3RoZXIpOgogICAgICAgICAgICByZXR1cm4gbXljbXAoc2VsZi5vYmosIG90aGVyLm9iaikgPCAwCiAgICAgICAgZGVmIF9fZ3RfXyhzZWxmLCBvdGhlcik6CiAgICAgICAgICAgIHJldHVybiBteWNtcChzZWxmLm9iaiwgb3RoZXIub2JqKSA+IDAKICAgICAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICAgICAgcmV0dXJuIG15Y21wKHNlbGYub2JqLCBvdGhlci5vYmopID09IDAKICAgICAgICBkZWYgX19sZV9fKHNlbGYsIG90aGVyKToKICAgICAgICAgICAgcmV0dXJuIG15Y21wKHNlbGYub2JqLCBvdGhlci5vYmopIDw9IDAKICAgICAgICBkZWYgX19nZV9fKHNlbGYsIG90aGVyKToKICAgICAgICAgICAgcmV0dXJuIG15Y21wKHNlbGYub2JqLCBvdGhlci5vYmopID49IDAKICAgICAgICBkZWYgX19uZV9fKHNlbGYsIG90aGVyKToKICAgICAgICAgICAgcmV0dXJuIG15Y21wKHNlbGYub2JqLCBvdGhlci5vYmopICE9IDAKICAgICAgICBfX2hhc2hfXyA9IE5vbmUKICAgIHJldHVybiBLCgp0cnk6CiAgICBmcm9tIF9mdW5jdG9vbHMgaW1wb3J0IGNtcF90b19rZXkKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcGFzcwoKCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiMjIyBMUlUgQ2FjaGUgZnVuY3Rpb24gZGVjb3JhdG9yCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpfQ2FjaGVJbmZvID0gbmFtZWR0dXBsZSgiQ2FjaGVJbmZvIiwgWyJoaXRzIiwgIm1pc3NlcyIsICJtYXhzaXplIiwgImN1cnJzaXplIl0pCgpjbGFzcyBfSGFzaGVkU2VxKGxpc3QpOgogICAgX19zbG90c19fID0gJ2hhc2h2YWx1ZScKCiAgICBkZWYgX19pbml0X18oc2VsZiwgdHVwLCBoYXNoPWhhc2gpOgogICAgICAgIHNlbGZbOl0gPSB0dXAKICAgICAgICBzZWxmLmhhc2h2YWx1ZSA9IGhhc2godHVwKQoKICAgIGRlZiBfX2hhc2hfXyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5oYXNodmFsdWUKCmRlZiBfbWFrZV9rZXkoYXJncywga3dkcywgdHlwZWQsCiAgICAgICAgICAgICBrd2RfbWFyayA9IChvYmplY3QoKSwpLAogICAgICAgICAgICAgZmFzdHR5cGVzID0ge2ludCwgc3RyLCBmcm96ZW5zZXQsIHR5cGUoTm9uZSl9LAogICAgICAgICAgICAgc29ydGVkPXNvcnRlZCwgdHVwbGU9dHVwbGUsIHR5cGU9dHlwZSwgbGVuPWxlbik6CiAgICAnTWFrZSBhIGNhY2hlIGtleSBmcm9tIG9wdGlvbmFsbHkgdHlwZWQgcG9zaXRpb25hbCBhbmQga2V5d29yZCBhcmd1bWVudHMnCiAgICBrZXkgPSBhcmdzCiAgICBpZiBrd2RzOgogICAgICAgIHNvcnRlZF9pdGVtcyA9IHNvcnRlZChrd2RzLml0ZW1zKCkpCiAgICAgICAga2V5ICs9IGt3ZF9tYXJrCiAgICAgICAgZm9yIGl0ZW0gaW4gc29ydGVkX2l0ZW1zOgogICAgICAgICAgICBrZXkgKz0gaXRlbQogICAgaWYgdHlwZWQ6CiAgICAgICAga2V5ICs9IHR1cGxlKHR5cGUodikgZm9yIHYgaW4gYXJncykKICAgICAgICBpZiBrd2RzOgogICAgICAgICAgICBrZXkgKz0gdHVwbGUodHlwZSh2KSBmb3IgaywgdiBpbiBzb3J0ZWRfaXRlbXMpCiAgICBlbGlmIGxlbihrZXkpID09IDEgYW5kIHR5cGUoa2V5WzBdKSBpbiBmYXN0dHlwZXM6CiAgICAgICAgcmV0dXJuIGtleVswXQogICAgcmV0dXJuIF9IYXNoZWRTZXEoa2V5KQoKZGVmIGxydV9jYWNoZShtYXhzaXplPTEyOCwgdHlwZWQ9RmFsc2UpOgogICAgIiIiTGVhc3QtcmVjZW50bHktdXNlZCBjYWNoZSBkZWNvcmF0b3IuCgogICAgSWYgKm1heHNpemUqIGlzIHNldCB0byBOb25lLCB0aGUgTFJVIGZlYXR1cmVzIGFyZSBkaXNhYmxlZCBhbmQgdGhlIGNhY2hlCiAgICBjYW4gZ3JvdyB3aXRob3V0IGJvdW5kLgoKICAgIElmICp0eXBlZCogaXMgVHJ1ZSwgYXJndW1lbnRzIG9mIGRpZmZlcmVudCB0eXBlcyB3aWxsIGJlIGNhY2hlZCBzZXBhcmF0ZWx5LgogICAgRm9yIGV4YW1wbGUsIGYoMy4wKSBhbmQgZigzKSB3aWxsIGJlIHRyZWF0ZWQgYXMgZGlzdGluY3QgY2FsbHMgd2l0aAogICAgZGlzdGluY3QgcmVzdWx0cy4KCiAgICBBcmd1bWVudHMgdG8gdGhlIGNhY2hlZCBmdW5jdGlvbiBtdXN0IGJlIGhhc2hhYmxlLgoKICAgIFZpZXcgdGhlIGNhY2hlIHN0YXRpc3RpY3MgbmFtZWQgdHVwbGUgKGhpdHMsIG1pc3NlcywgbWF4c2l6ZSwgY3VycnNpemUpCiAgICB3aXRoIGYuY2FjaGVfaW5mbygpLiAgQ2xlYXIgdGhlIGNhY2hlIGFuZCBzdGF0aXN0aWNzIHdpdGggZi5jYWNoZV9jbGVhcigpLgogICAgQWNjZXNzIHRoZSB1bmRlcmx5aW5nIGZ1bmN0aW9uIHdpdGggZi5fX3dyYXBwZWRfXy4KCiAgICBTZWU6ICBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhY2hlX2FsZ29yaXRobXMjTGVhc3RfUmVjZW50bHlfVXNlZAoKICAgICIiIgoKICAgICMgVXNlcnMgc2hvdWxkIG9ubHkgYWNjZXNzIHRoZSBscnVfY2FjaGUgdGhyb3VnaCBpdHMgcHVibGljIEFQSToKICAgICMgICAgICAgY2FjaGVfaW5mbywgY2FjaGVfY2xlYXIsIGFuZCBmLl9fd3JhcHBlZF9fCiAgICAjIFRoZSBpbnRlcm5hbHMgb2YgdGhlIGxydV9jYWNoZSBhcmUgZW5jYXBzdWxhdGVkIGZvciB0aHJlYWQgc2FmZXR5IGFuZAogICAgIyB0byBhbGxvdyB0aGUgaW1wbGVtZW50YXRpb24gdG8gY2hhbmdlIChpbmNsdWRpbmcgYSBwb3NzaWJsZSBDIHZlcnNpb24pLgoKICAgICMgQ29uc3RhbnRzIHNoYXJlZCBieSBhbGwgbHJ1IGNhY2hlIGluc3RhbmNlczoKICAgIHNlbnRpbmVsID0gb2JqZWN0KCkgICAgICAgICAgIyB1bmlxdWUgb2JqZWN0IHVzZWQgdG8gc2lnbmFsIGNhY2hlIG1pc3NlcwogICAgbWFrZV9rZXkgPSBfbWFrZV9rZXkgICAgICAgICAjIGJ1aWxkIGEga2V5IGZyb20gdGhlIGZ1bmN0aW9uIGFyZ3VtZW50cwogICAgUFJFViwgTkVYVCwgS0VZLCBSRVNVTFQgPSAwLCAxLCAyLCAzICAgIyBuYW1lcyBmb3IgdGhlIGxpbmsgZmllbGRzCgogICAgZGVmIGRlY29yYXRpbmdfZnVuY3Rpb24odXNlcl9mdW5jdGlvbik6CgogICAgICAgIGNhY2hlID0ge30KICAgICAgICBoaXRzID0gbWlzc2VzID0gY3VycnNpemUgPSAwCiAgICAgICAgZnVsbCA9IEZhbHNlCiAgICAgICAgY2FjaGVfZ2V0ID0gY2FjaGUuZ2V0ICAgICMgYm91bmQgbWV0aG9kIHRvIGxvb2t1cCBhIGtleSBvciByZXR1cm4gTm9uZQogICAgICAgIGxvY2sgPSBMb2NrKCkgICAgICAgICAgICAjIGJlY2F1c2UgbGlua2VkbGlzdCB1cGRhdGVzIGFyZW4ndCB0aHJlYWRzYWZlCiAgICAgICAgcm9vdCA9IFtdICAgICAgICAgICAgICAgICMgcm9vdCBvZiB0aGUgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0CiAgICAgICAgcm9vdFs6XSA9IFtyb290LCByb290LCBOb25lLCBOb25lXSAgICAgIyBpbml0aWFsaXplIGJ5IHBvaW50aW5nIHRvIHNlbGYKCiAgICAgICAgaWYgbWF4c2l6ZSA9PSAwOgoKICAgICAgICAgICAgZGVmIHdyYXBwZXIoKmFyZ3MsICoqa3dkcyk6CiAgICAgICAgICAgICAgICAjIG5vIGNhY2hpbmcsIGp1c3QgYSBzdGF0aXN0aWNzIHVwZGF0ZSBhZnRlciBhIHN1Y2Nlc3NmdWwgY2FsbAogICAgICAgICAgICAgICAgbm9ubG9jYWwgbWlzc2VzCiAgICAgICAgICAgICAgICByZXN1bHQgPSB1c2VyX2Z1bmN0aW9uKCphcmdzLCAqKmt3ZHMpCiAgICAgICAgICAgICAgICBtaXNzZXMgKz0gMQogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAoKICAgICAgICBlbGlmIG1heHNpemUgaXMgTm9uZToKCiAgICAgICAgICAgIGRlZiB3cmFwcGVyKCphcmdzLCAqKmt3ZHMpOgogICAgICAgICAgICAgICAgIyBzaW1wbGUgY2FjaGluZyB3aXRob3V0IG9yZGVyaW5nIG9yIHNpemUgbGltaXQKICAgICAgICAgICAgICAgIG5vbmxvY2FsIGhpdHMsIG1pc3NlcywgY3VycnNpemUKICAgICAgICAgICAgICAgIGtleSA9IG1ha2Vfa2V5KGFyZ3MsIGt3ZHMsIHR5cGVkKQogICAgICAgICAgICAgICAgcmVzdWx0ID0gY2FjaGVfZ2V0KGtleSwgc2VudGluZWwpCiAgICAgICAgICAgICAgICBpZiByZXN1bHQgaXMgbm90IHNlbnRpbmVsOgogICAgICAgICAgICAgICAgICAgIGhpdHMgKz0gMQogICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHVzZXJfZnVuY3Rpb24oKmFyZ3MsICoqa3dkcykKICAgICAgICAgICAgICAgIGNhY2hlW2tleV0gPSByZXN1bHQKICAgICAgICAgICAgICAgIG1pc3NlcyArPSAxCiAgICAgICAgICAgICAgICBjdXJyc2l6ZSArPSAxCiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0CgogICAgICAgIGVsc2U6CgogICAgICAgICAgICBkZWYgd3JhcHBlcigqYXJncywgKiprd2RzKToKICAgICAgICAgICAgICAgICMgc2l6ZSBsaW1pdGVkIGNhY2hpbmcgdGhhdCB0cmFja3MgYWNjZXNzZXMgYnkgcmVjZW5jeQogICAgICAgICAgICAgICAgbm9ubG9jYWwgcm9vdCwgaGl0cywgbWlzc2VzLCBjdXJyc2l6ZSwgZnVsbAogICAgICAgICAgICAgICAga2V5ID0gbWFrZV9rZXkoYXJncywga3dkcywgdHlwZWQpCiAgICAgICAgICAgICAgICB3aXRoIGxvY2s6CiAgICAgICAgICAgICAgICAgICAgbGluayA9IGNhY2hlX2dldChrZXkpCiAgICAgICAgICAgICAgICAgICAgaWYgbGluayBpcyBub3QgTm9uZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBtb3ZlIHRoZSBsaW5rIHRvIHRoZSBmcm9udCBvZiB0aGUgY2lyY3VsYXIgcXVldWUKICAgICAgICAgICAgICAgICAgICAgICAgbGlua19wcmV2LCBsaW5rX25leHQsIGtleSwgcmVzdWx0ID0gbGluawogICAgICAgICAgICAgICAgICAgICAgICBsaW5rX3ByZXZbTkVYVF0gPSBsaW5rX25leHQKICAgICAgICAgICAgICAgICAgICAgICAgbGlua19uZXh0W1BSRVZdID0gbGlua19wcmV2CiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSByb290W1BSRVZdCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RbTkVYVF0gPSByb290W1BSRVZdID0gbGluawogICAgICAgICAgICAgICAgICAgICAgICBsaW5rW1BSRVZdID0gbGFzdAogICAgICAgICAgICAgICAgICAgICAgICBsaW5rW05FWFRdID0gcm9vdAogICAgICAgICAgICAgICAgICAgICAgICBoaXRzICs9IDEKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgICAgICAgICAgcmVzdWx0ID0gdXNlcl9mdW5jdGlvbigqYXJncywgKiprd2RzKQogICAgICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgICAgIGlmIGtleSBpbiBjYWNoZToKICAgICAgICAgICAgICAgICAgICAgICAgIyBnZXR0aW5nIGhlcmUgbWVhbnMgdGhhdCB0aGlzIHNhbWUga2V5IHdhcyBhZGRlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgIyBjYWNoZSB3aGlsZSB0aGUgbG9jayB3YXMgcmVsZWFzZWQuICBzaW5jZSB0aGUgbGluawogICAgICAgICAgICAgICAgICAgICAgICAjIHVwZGF0ZSBpcyBhbHJlYWR5IGRvbmUsIHdlIG5lZWQgb25seSByZXR1cm4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICMgY29tcHV0ZWQgcmVzdWx0IGFuZCB1cGRhdGUgdGhlIGNvdW50IG9mIG1pc3Nlcy4KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgICAgIGVsaWYgZnVsbDoKICAgICAgICAgICAgICAgICAgICAgICAgIyB1c2Ugcm9vdCB0byBzdG9yZSB0aGUgbmV3IGtleSBhbmQgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RbS0VZXSA9IGtleQogICAgICAgICAgICAgICAgICAgICAgICByb290W1JFU1VMVF0gPSByZXN1bHQKICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVba2V5XSA9IHJvb3QKICAgICAgICAgICAgICAgICAgICAgICAgIyBlbXB0eSB0aGUgb2xkZXN0IGxpbmsgYW5kIG1ha2UgaXQgdGhlIG5ldyByb290CiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3QgPSByb290W05FWFRdCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbCBjYWNoZVtyb290W0tFWV1dCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RbS0VZXSA9IHJvb3RbUkVTVUxUXSA9IE5vbmUKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAjIHB1dCByZXN1bHQgaW4gYSBuZXcgbGluayBhdCB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSByb290W1BSRVZdCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsgPSBbbGFzdCwgcm9vdCwga2V5LCByZXN1bHRdCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlW2tleV0gPSBsYXN0W05FWFRdID0gcm9vdFtQUkVWXSA9IGxpbmsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycnNpemUgKz0gMQogICAgICAgICAgICAgICAgICAgICAgICBmdWxsID0gKGN1cnJzaXplID09IG1heHNpemUpCiAgICAgICAgICAgICAgICAgICAgbWlzc2VzICs9IDEKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQKCiAgICAgICAgZGVmIGNhY2hlX2luZm8oKToKICAgICAgICAgICAgIiIiUmVwb3J0IGNhY2hlIHN0YXRpc3RpY3MiIiIKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgcmV0dXJuIF9DYWNoZUluZm8oaGl0cywgbWlzc2VzLCBtYXhzaXplLCBjdXJyc2l6ZSkKCiAgICAgICAgZGVmIGNhY2hlX2NsZWFyKCk6CiAgICAgICAgICAgICIiIkNsZWFyIHRoZSBjYWNoZSBhbmQgY2FjaGUgc3RhdGlzdGljcyIiIgogICAgICAgICAgICBub25sb2NhbCBoaXRzLCBtaXNzZXMsIGN1cnJzaXplLCBmdWxsCiAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgIGNhY2hlLmNsZWFyKCkKICAgICAgICAgICAgICAgIHJvb3RbOl0gPSBbcm9vdCwgcm9vdCwgTm9uZSwgTm9uZV0KICAgICAgICAgICAgICAgIGhpdHMgPSBtaXNzZXMgPSBjdXJyc2l6ZSA9IDAKICAgICAgICAgICAgICAgIGZ1bGwgPSBGYWxzZQoKICAgICAgICB3cmFwcGVyLmNhY2hlX2luZm8gPSBjYWNoZV9pbmZvCiAgICAgICAgd3JhcHBlci5jYWNoZV9jbGVhciA9IGNhY2hlX2NsZWFyCiAgICAgICAgcmV0dXJuIHVwZGF0ZV93cmFwcGVyKHdyYXBwZXIsIHVzZXJfZnVuY3Rpb24pCgogICAgcmV0dXJuIGRlY29yYXRpbmdfZnVuY3Rpb24K',
'/Lib/weakref.py':'IiIiV2VhayByZWZlcmVuY2Ugc3VwcG9ydCBmb3IgUHl0aG9uLg0KDQpUaGlzIG1vZHVsZSBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBQRVAgMjA1Og0KDQpodHRwOi8vd3d3LnB5dGhvbi5vcmcvZGV2L3BlcHMvcGVwLTAyMDUvDQoiIiINCg0KIyBOYW1pbmcgY29udmVudGlvbjogVmFyaWFibGVzIG5hbWVkICJ3ciIgYXJlIHdlYWsgcmVmZXJlbmNlIG9iamVjdHM7DQojIHRoZXkgYXJlIGNhbGxlZCB0aGlzIGluc3RlYWQgb2YgInJlZiIgdG8gYXZvaWQgbmFtZSBjb2xsaXNpb25zIHdpdGgNCiMgdGhlIG1vZHVsZS1nbG9iYWwgcmVmKCkgZnVuY3Rpb24gaW1wb3J0ZWQgZnJvbSBfd2Vha3JlZi4NCg0KZnJvbSBfd2Vha3JlZiBpbXBvcnQgKA0KICAgICBnZXR3ZWFrcmVmY291bnQsDQogICAgIGdldHdlYWtyZWZzLA0KICAgICByZWYsDQogICAgIHByb3h5LA0KICAgICBDYWxsYWJsZVByb3h5VHlwZSwNCiAgICAgUHJveHlUeXBlLA0KICAgICBSZWZlcmVuY2VUeXBlKQ0KDQpmcm9tIF93ZWFrcmVmc2V0IGltcG9ydCBXZWFrU2V0LCBfSXRlcmF0aW9uR3VhcmQNCg0KaW1wb3J0IGNvbGxlY3Rpb25zICAjIEltcG9ydCBhZnRlciBfd2Vha3JlZiB0byBhdm9pZCBjaXJjdWxhciBpbXBvcnQuDQoNClByb3h5VHlwZXMgPSAoUHJveHlUeXBlLCBDYWxsYWJsZVByb3h5VHlwZSkNCg0KX19hbGxfXyA9IFsicmVmIiwgInByb3h5IiwgImdldHdlYWtyZWZjb3VudCIsICJnZXR3ZWFrcmVmcyIsDQogICAgICAgICAgICJXZWFrS2V5RGljdGlvbmFyeSIsICJSZWZlcmVuY2VUeXBlIiwgIlByb3h5VHlwZSIsDQogICAgICAgICAgICJDYWxsYWJsZVByb3h5VHlwZSIsICJQcm94eVR5cGVzIiwgIldlYWtWYWx1ZURpY3Rpb25hcnkiLA0KICAgICAgICAgICAiV2Vha1NldCJdDQoNCg0KY2xhc3MgV2Vha1ZhbHVlRGljdGlvbmFyeShjb2xsZWN0aW9ucy5NdXRhYmxlTWFwcGluZyk6DQogICAgIiIiTWFwcGluZyBjbGFzcyB0aGF0IHJlZmVyZW5jZXMgdmFsdWVzIHdlYWtseS4NCg0KICAgIEVudHJpZXMgaW4gdGhlIGRpY3Rpb25hcnkgd2lsbCBiZSBkaXNjYXJkZWQgd2hlbiBubyBzdHJvbmcNCiAgICByZWZlcmVuY2UgdG8gdGhlIHZhbHVlIGV4aXN0cyBhbnltb3JlDQogICAgIiIiDQogICAgIyBXZSBpbmhlcml0IHRoZSBjb25zdHJ1Y3RvciB3aXRob3V0IHdvcnJ5aW5nIGFib3V0IHRoZSBpbnB1dA0KICAgICMgZGljdGlvbmFyeTsgc2luY2UgaXQgdXNlcyBvdXIgLnVwZGF0ZSgpIG1ldGhvZCwgd2UgZ2V0IHRoZSByaWdodA0KICAgICMgY2hlY2tzIChpZiB0aGUgb3RoZXIgZGljdGlvbmFyeSBpcyBhIFdlYWtWYWx1ZURpY3Rpb25hcnksDQogICAgIyBvYmplY3RzIGFyZSB1bndyYXBwZWQgb24gdGhlIHdheSBvdXQsIGFuZCB3ZSBhbHdheXMgd3JhcCBvbiB0aGUNCiAgICAjIHdheSBpbikuDQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgKmFyZ3MsICoqa3cpOg0KICAgICAgICBkZWYgcmVtb3ZlKHdyLCBzZWxmcmVmPXJlZihzZWxmKSk6DQogICAgICAgICAgICBzZWxmID0gc2VsZnJlZigpDQogICAgICAgICAgICBpZiBzZWxmIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgIGlmIHNlbGYuX2l0ZXJhdGluZzoNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5fcGVuZGluZ19yZW1vdmFscy5hcHBlbmQod3Iua2V5KQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGRlbCBzZWxmLmRhdGFbd3Iua2V5XQ0KICAgICAgICBzZWxmLl9yZW1vdmUgPSByZW1vdmUNCiAgICAgICAgIyBBIGxpc3Qgb2Yga2V5cyB0byBiZSByZW1vdmVkDQogICAgICAgIHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMgPSBbXQ0KICAgICAgICBzZWxmLl9pdGVyYXRpbmcgPSBzZXQoKQ0KICAgICAgICBzZWxmLmRhdGEgPSBkID0ge30NCiAgICAgICAgc2VsZi51cGRhdGUoKmFyZ3MsICoqa3cpDQoNCiAgICBkZWYgX2NvbW1pdF9yZW1vdmFscyhzZWxmKToNCiAgICAgICAgbCA9IHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMNCiAgICAgICAgZCA9IHNlbGYuZGF0YQ0KICAgICAgICAjIFdlIHNob3VsZG4ndCBlbmNvdW50ZXIgYW55IEtleUVycm9yLCBiZWNhdXNlIHRoaXMgbWV0aG9kIHNob3VsZA0KICAgICAgICAjIGFsd2F5cyBiZSBjYWxsZWQgKmJlZm9yZSogbXV0YXRpbmcgdGhlIGRpY3QuDQogICAgICAgIHdoaWxlIGw6DQogICAgICAgICAgICBkZWwgZFtsLnBvcCgpXQ0KDQogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGtleSk6DQogICAgICAgIG8gPSBzZWxmLmRhdGFba2V5XSgpDQogICAgICAgIGlmIG8gaXMgTm9uZToNCiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yKGtleSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBvDQoNCiAgICBkZWYgX19kZWxpdGVtX18oc2VsZiwga2V5KToNCiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoNCiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpDQogICAgICAgIGRlbCBzZWxmLmRhdGFba2V5XQ0KDQogICAgZGVmIF9fbGVuX18oc2VsZik6DQogICAgICAgIHJldHVybiBsZW4oc2VsZi5kYXRhKSAtIGxlbihzZWxmLl9wZW5kaW5nX3JlbW92YWxzKQ0KDQogICAgZGVmIF9fY29udGFpbnNfXyhzZWxmLCBrZXkpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICBvID0gc2VsZi5kYXRhW2tleV0oKQ0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgcmV0dXJuIG8gaXMgbm90IE5vbmUNCg0KICAgIGRlZiBfX3JlcHJfXyhzZWxmKToNCiAgICAgICAgcmV0dXJuICI8V2Vha1ZhbHVlRGljdGlvbmFyeSBhdCAlcz4iICUgaWQoc2VsZikNCg0KICAgIGRlZiBfX3NldGl0ZW1fXyhzZWxmLCBrZXksIHZhbHVlKToNCiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoNCiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpDQogICAgICAgIHNlbGYuZGF0YVtrZXldID0gS2V5ZWRSZWYodmFsdWUsIHNlbGYuX3JlbW92ZSwga2V5KQ0KDQogICAgZGVmIGNvcHkoc2VsZik6DQogICAgICAgIG5ldyA9IFdlYWtWYWx1ZURpY3Rpb25hcnkoKQ0KICAgICAgICBmb3Iga2V5LCB3ciBpbiBzZWxmLmRhdGEuaXRlbXMoKToNCiAgICAgICAgICAgIG8gPSB3cigpDQogICAgICAgICAgICBpZiBvIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgIG5ld1trZXldID0gbw0KICAgICAgICByZXR1cm4gbmV3DQoNCiAgICBfX2NvcHlfXyA9IGNvcHkNCg0KICAgIGRlZiBfX2RlZXBjb3B5X18oc2VsZiwgbWVtbyk6DQogICAgICAgIGZyb20gY29weSBpbXBvcnQgZGVlcGNvcHkNCiAgICAgICAgbmV3ID0gc2VsZi5fX2NsYXNzX18oKQ0KICAgICAgICBmb3Iga2V5LCB3ciBpbiBzZWxmLmRhdGEuaXRlbXMoKToNCiAgICAgICAgICAgIG8gPSB3cigpDQogICAgICAgICAgICBpZiBvIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgIG5ld1tkZWVwY29weShrZXksIG1lbW8pXSA9IG8NCiAgICAgICAgcmV0dXJuIG5ldw0KDQogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHdyID0gc2VsZi5kYXRhW2tleV0NCiAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHQNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIG8gPSB3cigpDQogICAgICAgICAgICBpZiBvIGlzIE5vbmU6DQogICAgICAgICAgICAgICAgIyBUaGlzIHNob3VsZCBvbmx5IGhhcHBlbg0KICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0DQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHJldHVybiBvDQoNCiAgICBkZWYgaXRlbXMoc2VsZik6DQogICAgICAgIHdpdGggX0l0ZXJhdGlvbkd1YXJkKHNlbGYpOg0KICAgICAgICAgICAgZm9yIGssIHdyIGluIHNlbGYuZGF0YS5pdGVtcygpOg0KICAgICAgICAgICAgICAgIHYgPSB3cigpDQogICAgICAgICAgICAgICAgaWYgdiBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgeWllbGQgaywgdg0KDQogICAgZGVmIGtleXMoc2VsZik6DQogICAgICAgIHdpdGggX0l0ZXJhdGlvbkd1YXJkKHNlbGYpOg0KICAgICAgICAgICAgZm9yIGssIHdyIGluIHNlbGYuZGF0YS5pdGVtcygpOg0KICAgICAgICAgICAgICAgIGlmIHdyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHlpZWxkIGsNCg0KICAgIF9faXRlcl9fID0ga2V5cw0KDQogICAgZGVmIGl0ZXJ2YWx1ZXJlZnMoc2VsZik6DQogICAgICAgICIiIlJldHVybiBhbiBpdGVyYXRvciB0aGF0IHlpZWxkcyB0aGUgd2VhayByZWZlcmVuY2VzIHRvIHRoZSB2YWx1ZXMuDQoNCiAgICAgICAgVGhlIHJlZmVyZW5jZXMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlICdsaXZlJyBhdCB0aGUgdGltZQ0KICAgICAgICB0aGV5IGFyZSB1c2VkLCBzbyB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIHJlZmVyZW5jZXMgbmVlZHMNCiAgICAgICAgdG8gYmUgY2hlY2tlZCBiZWZvcmUgYmVpbmcgdXNlZC4gIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXZvaWQNCiAgICAgICAgY3JlYXRpbmcgcmVmZXJlbmNlcyB0aGF0IHdpbGwgY2F1c2UgdGhlIGdhcmJhZ2UgY29sbGVjdG9yIHRvDQogICAgICAgIGtlZXAgdGhlIHZhbHVlcyBhcm91bmQgbG9uZ2VyIHRoYW4gbmVlZGVkLg0KDQogICAgICAgICIiIg0KICAgICAgICB3aXRoIF9JdGVyYXRpb25HdWFyZChzZWxmKToNCiAgICAgICAgICAgIGZvciB3ciBpbiBzZWxmLmRhdGEudmFsdWVzKCk6DQogICAgICAgICAgICAgICAgeWllbGQgd3INCg0KICAgIGRlZiB2YWx1ZXMoc2VsZik6DQogICAgICAgIHdpdGggX0l0ZXJhdGlvbkd1YXJkKHNlbGYpOg0KICAgICAgICAgICAgZm9yIHdyIGluIHNlbGYuZGF0YS52YWx1ZXMoKToNCiAgICAgICAgICAgICAgICBvYmogPSB3cigpDQogICAgICAgICAgICAgICAgaWYgb2JqIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgICAgICB5aWVsZCBvYmoNCg0KICAgIGRlZiBwb3BpdGVtKHNlbGYpOg0KICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOg0KICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkNCiAgICAgICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgICAgIGtleSwgd3IgPSBzZWxmLmRhdGEucG9waXRlbSgpDQogICAgICAgICAgICBvID0gd3IoKQ0KICAgICAgICAgICAgaWYgbyBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICByZXR1cm4ga2V5LCBvDQoNCiAgICBkZWYgcG9wKHNlbGYsIGtleSwgKmFyZ3MpOg0KICAgICAgICBpZiBzZWxmLl9wZW5kaW5nX3JlbW92YWxzOg0KICAgICAgICAgICAgc2VsZi5fY29tbWl0X3JlbW92YWxzKCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgbyA9IHNlbGYuZGF0YS5wb3Aoa2V5KSgpDQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgIGlmIGFyZ3M6DQogICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3NbMF0NCiAgICAgICAgICAgIHJhaXNlDQogICAgICAgIGlmIG8gaXMgTm9uZToNCiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yKGtleSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHJldHVybiBvDQoNCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHdyID0gc2VsZi5kYXRhW2tleV0NCiAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoNCiAgICAgICAgICAgICAgICBzZWxmLl9jb21taXRfcmVtb3ZhbHMoKQ0KICAgICAgICAgICAgc2VsZi5kYXRhW2tleV0gPSBLZXllZFJlZihkZWZhdWx0LCBzZWxmLl9yZW1vdmUsIGtleSkNCiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0DQogICAgICAgIGVsc2U6DQogICAgICAgICAgICByZXR1cm4gd3IoKQ0KDQogICAgZGVmIHVwZGF0ZShzZWxmLCBkaWN0PU5vbmUsICoqa3dhcmdzKToNCiAgICAgICAgaWYgc2VsZi5fcGVuZGluZ19yZW1vdmFsczoNCiAgICAgICAgICAgIHNlbGYuX2NvbW1pdF9yZW1vdmFscygpDQogICAgICAgIGQgPSBzZWxmLmRhdGENCiAgICAgICAgaWYgZGljdCBpcyBub3QgTm9uZToNCiAgICAgICAgICAgIGlmIG5vdCBoYXNhdHRyKGRpY3QsICJpdGVtcyIpOg0KICAgICAgICAgICAgICAgIGRpY3QgPSB0eXBlKHt9KShkaWN0KQ0KICAgICAgICAgICAgZm9yIGtleSwgbyBpbiBkaWN0Lml0ZW1zKCk6DQogICAgICAgICAgICAgICAgZFtrZXldID0gS2V5ZWRSZWYobywgc2VsZi5fcmVtb3ZlLCBrZXkpDQogICAgICAgIGlmIGxlbihrd2FyZ3MpOg0KICAgICAgICAgICAgc2VsZi51cGRhdGUoa3dhcmdzKQ0KDQogICAgZGVmIHZhbHVlcmVmcyhzZWxmKToNCiAgICAgICAgIiIiUmV0dXJuIGEgbGlzdCBvZiB3ZWFrIHJlZmVyZW5jZXMgdG8gdGhlIHZhbHVlcy4NCg0KICAgICAgICBUaGUgcmVmZXJlbmNlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgJ2xpdmUnIGF0IHRoZSB0aW1lDQogICAgICAgIHRoZXkgYXJlIHVzZWQsIHNvIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgcmVmZXJlbmNlcyBuZWVkcw0KICAgICAgICB0byBiZSBjaGVja2VkIGJlZm9yZSBiZWluZyB1c2VkLiAgVGhpcyBjYW4gYmUgdXNlZCB0byBhdm9pZA0KICAgICAgICBjcmVhdGluZyByZWZlcmVuY2VzIHRoYXQgd2lsbCBjYXVzZSB0aGUgZ2FyYmFnZSBjb2xsZWN0b3IgdG8NCiAgICAgICAga2VlcCB0aGUgdmFsdWVzIGFyb3VuZCBsb25nZXIgdGhhbiBuZWVkZWQuDQoNCiAgICAgICAgIiIiDQogICAgICAgIHJldHVybiBsaXN0KHNlbGYuZGF0YS52YWx1ZXMoKSkNCg0KDQpjbGFzcyBLZXllZFJlZihyZWYpOg0KICAgICIiIlNwZWNpYWxpemVkIHJlZmVyZW5jZSB0aGF0IGluY2x1ZGVzIGEga2V5IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHZhbHVlLg0KDQogICAgVGhpcyBpcyB1c2VkIGluIHRoZSBXZWFrVmFsdWVEaWN0aW9uYXJ5IHRvIGF2b2lkIGhhdmluZyB0byBjcmVhdGUNCiAgICBhIGZ1bmN0aW9uIG9iamVjdCBmb3IgZWFjaCBrZXkgc3RvcmVkIGluIHRoZSBtYXBwaW5nLiAgQSBzaGFyZWQNCiAgICBjYWxsYmFjayBvYmplY3QgY2FuIHVzZSB0aGUgJ2tleScgYXR0cmlidXRlIG9mIGEgS2V5ZWRSZWYgaW5zdGVhZA0KICAgIG9mIGdldHRpbmcgYSByZWZlcmVuY2UgdG8gdGhlIGtleSBmcm9tIGFuIGVuY2xvc2luZyBzY29wZS4NCg0KICAgICIiIg0KDQogICAgX19zbG90c19fID0gImtleSIsDQoNCiAgICBkZWYgX19uZXdfXyh0eXBlLCBvYiwgY2FsbGJhY2ssIGtleSk6DQogICAgICAgIHNlbGYgPSByZWYuX19uZXdfXyh0eXBlLCBvYiwgY2FsbGJhY2spDQogICAgICAgIHNlbGYua2V5ID0ga2V5DQogICAgICAgIHJldHVybiBzZWxmDQoNCiAgICBkZWYgX19pbml0X18oc2VsZiwgb2IsIGNhbGxiYWNrLCBrZXkpOg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKG9iLCBjYWxsYmFjaykNCg0KDQpjbGFzcyBXZWFrS2V5RGljdGlvbmFyeShjb2xsZWN0aW9ucy5NdXRhYmxlTWFwcGluZyk6DQogICAgIiIiIE1hcHBpbmcgY2xhc3MgdGhhdCByZWZlcmVuY2VzIGtleXMgd2Vha2x5Lg0KDQogICAgRW50cmllcyBpbiB0aGUgZGljdGlvbmFyeSB3aWxsIGJlIGRpc2NhcmRlZCB3aGVuIHRoZXJlIGlzIG5vDQogICAgbG9uZ2VyIGEgc3Ryb25nIHJlZmVyZW5jZSB0byB0aGUga2V5LiBUaGlzIGNhbiBiZSB1c2VkIHRvDQogICAgYXNzb2NpYXRlIGFkZGl0aW9uYWwgZGF0YSB3aXRoIGFuIG9iamVjdCBvd25lZCBieSBvdGhlciBwYXJ0cyBvZg0KICAgIGFuIGFwcGxpY2F0aW9uIHdpdGhvdXQgYWRkaW5nIGF0dHJpYnV0ZXMgdG8gdGhvc2Ugb2JqZWN0cy4gVGhpcw0KICAgIGNhbiBiZSBlc3BlY2lhbGx5IHVzZWZ1bCB3aXRoIG9iamVjdHMgdGhhdCBvdmVycmlkZSBhdHRyaWJ1dGUNCiAgICBhY2Nlc3Nlcy4NCiAgICAiIiINCg0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBkaWN0PU5vbmUpOg0KICAgICAgICBzZWxmLmRhdGEgPSB7fQ0KICAgICAgICBkZWYgcmVtb3ZlKGssIHNlbGZyZWY9cmVmKHNlbGYpKToNCiAgICAgICAgICAgIHNlbGYgPSBzZWxmcmVmKCkNCiAgICAgICAgICAgIGlmIHNlbGYgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgaWYgc2VsZi5faXRlcmF0aW5nOg0KICAgICAgICAgICAgICAgICAgICBzZWxmLl9wZW5kaW5nX3JlbW92YWxzLmFwcGVuZChrKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGRlbCBzZWxmLmRhdGFba10NCiAgICAgICAgc2VsZi5fcmVtb3ZlID0gcmVtb3ZlDQogICAgICAgICMgQSBsaXN0IG9mIGRlYWQgd2Vha3JlZnMgKGtleXMgdG8gYmUgcmVtb3ZlZCkNCiAgICAgICAgc2VsZi5fcGVuZGluZ19yZW1vdmFscyA9IFtdDQogICAgICAgIHNlbGYuX2l0ZXJhdGluZyA9IHNldCgpDQogICAgICAgIGlmIGRpY3QgaXMgbm90IE5vbmU6DQogICAgICAgICAgICBzZWxmLnVwZGF0ZShkaWN0KQ0KDQogICAgZGVmIF9jb21taXRfcmVtb3ZhbHMoc2VsZik6DQogICAgICAgICMgTk9URTogV2UgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgbWV0aG9kIGJlZm9yZSBtdXRhdGluZyB0aGUgZGljdCwNCiAgICAgICAgIyBiZWNhdXNlIGEgZGVhZCB3ZWFrcmVmIG5ldmVyIGNvbXBhcmVzIGVxdWFsIHRvIGEgbGl2ZSB3ZWFrcmVmLA0KICAgICAgICAjIGV2ZW4gaWYgdGhleSBoYXBwZW5lZCB0byByZWZlciB0byBlcXVhbCBvYmplY3RzLg0KICAgICAgICAjIEhvd2V2ZXIsIGl0IG1lYW5zIGtleXMgbWF5IGFscmVhZHkgaGF2ZSBiZWVuIHJlbW92ZWQuDQogICAgICAgIGwgPSBzZWxmLl9wZW5kaW5nX3JlbW92YWxzDQogICAgICAgIGQgPSBzZWxmLmRhdGENCiAgICAgICAgd2hpbGUgbDoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBkZWwgZFtsLnBvcCgpXQ0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgICAgIHBhc3MNCg0KICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOg0KICAgICAgICBkZWwgc2VsZi5kYXRhW3JlZihrZXkpXQ0KDQogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGtleSk6DQogICAgICAgIHJldHVybiBzZWxmLmRhdGFbcmVmKGtleSldDQoNCiAgICBkZWYgX19sZW5fXyhzZWxmKToNCiAgICAgICAgcmV0dXJuIGxlbihzZWxmLmRhdGEpIC0gbGVuKHNlbGYuX3BlbmRpbmdfcmVtb3ZhbHMpDQoNCiAgICBkZWYgX19yZXByX18oc2VsZik6DQogICAgICAgIHJldHVybiAiPFdlYWtLZXlEaWN0aW9uYXJ5IGF0ICVzPiIgJSBpZChzZWxmKQ0KDQogICAgZGVmIF9fc2V0aXRlbV9fKHNlbGYsIGtleSwgdmFsdWUpOg0KICAgICAgICBzZWxmLmRhdGFbcmVmKGtleSwgc2VsZi5fcmVtb3ZlKV0gPSB2YWx1ZQ0KDQogICAgZGVmIGNvcHkoc2VsZik6DQogICAgICAgIG5ldyA9IFdlYWtLZXlEaWN0aW9uYXJ5KCkNCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gc2VsZi5kYXRhLml0ZW1zKCk6DQogICAgICAgICAgICBvID0ga2V5KCkNCiAgICAgICAgICAgIGlmIG8gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgbmV3W29dID0gdmFsdWUNCiAgICAgICAgcmV0dXJuIG5ldw0KDQogICAgX19jb3B5X18gPSBjb3B5DQoNCiAgICBkZWYgX19kZWVwY29weV9fKHNlbGYsIG1lbW8pOg0KICAgICAgICBmcm9tIGNvcHkgaW1wb3J0IGRlZXBjb3B5DQogICAgICAgIG5ldyA9IHNlbGYuX19jbGFzc19fKCkNCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gc2VsZi5kYXRhLml0ZW1zKCk6DQogICAgICAgICAgICBvID0ga2V5KCkNCiAgICAgICAgICAgIGlmIG8gaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgbmV3W29dID0gZGVlcGNvcHkodmFsdWUsIG1lbW8pDQogICAgICAgIHJldHVybiBuZXcNCg0KICAgIGRlZiBnZXQoc2VsZiwga2V5LCBkZWZhdWx0PU5vbmUpOg0KICAgICAgICByZXR1cm4gc2VsZi5kYXRhLmdldChyZWYoa2V5KSxkZWZhdWx0KQ0KDQogICAgZGVmIF9fY29udGFpbnNfXyhzZWxmLCBrZXkpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICB3ciA9IHJlZihrZXkpDQogICAgICAgIGV4Y2VwdCBUeXBlRXJyb3I6DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgcmV0dXJuIHdyIGluIHNlbGYuZGF0YQ0KDQogICAgZGVmIGl0ZW1zKHNlbGYpOg0KICAgICAgICB3aXRoIF9JdGVyYXRpb25HdWFyZChzZWxmKToNCiAgICAgICAgICAgIGZvciB3ciwgdmFsdWUgaW4gc2VsZi5kYXRhLml0ZW1zKCk6DQogICAgICAgICAgICAgICAga2V5ID0gd3IoKQ0KICAgICAgICAgICAgICAgIGlmIGtleSBpcyBub3QgTm9uZToNCiAgICAgICAgICAgICAgICAgICAgeWllbGQga2V5LCB2YWx1ZQ0KDQogICAgZGVmIGtleXMoc2VsZik6DQogICAgICAgIHdpdGggX0l0ZXJhdGlvbkd1YXJkKHNlbGYpOg0KICAgICAgICAgICAgZm9yIHdyIGluIHNlbGYuZGF0YToNCiAgICAgICAgICAgICAgICBvYmogPSB3cigpDQogICAgICAgICAgICAgICAgaWYgb2JqIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgICAgICB5aWVsZCBvYmoNCg0KICAgIF9faXRlcl9fID0ga2V5cw0KDQogICAgZGVmIHZhbHVlcyhzZWxmKToNCiAgICAgICAgd2l0aCBfSXRlcmF0aW9uR3VhcmQoc2VsZik6DQogICAgICAgICAgICBmb3Igd3IsIHZhbHVlIGluIHNlbGYuZGF0YS5pdGVtcygpOg0KICAgICAgICAgICAgICAgIGlmIHdyKCkgaXMgbm90IE5vbmU6DQogICAgICAgICAgICAgICAgICAgIHlpZWxkIHZhbHVlDQoNCiAgICBkZWYga2V5cmVmcyhzZWxmKToNCiAgICAgICAgIiIiUmV0dXJuIGEgbGlzdCBvZiB3ZWFrIHJlZmVyZW5jZXMgdG8gdGhlIGtleXMuDQoNCiAgICAgICAgVGhlIHJlZmVyZW5jZXMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlICdsaXZlJyBhdCB0aGUgdGltZQ0KICAgICAgICB0aGV5IGFyZSB1c2VkLCBzbyB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIHJlZmVyZW5jZXMgbmVlZHMNCiAgICAgICAgdG8gYmUgY2hlY2tlZCBiZWZvcmUgYmVpbmcgdXNlZC4gIFRoaXMgY2FuIGJlIHVzZWQgdG8gYXZvaWQNCiAgICAgICAgY3JlYXRpbmcgcmVmZXJlbmNlcyB0aGF0IHdpbGwgY2F1c2UgdGhlIGdhcmJhZ2UgY29sbGVjdG9yIHRvDQogICAgICAgIGtlZXAgdGhlIGtleXMgYXJvdW5kIGxvbmdlciB0aGFuIG5lZWRlZC4NCg0KICAgICAgICAiIiINCiAgICAgICAgcmV0dXJuIGxpc3Qoc2VsZi5kYXRhKQ0KDQogICAgZGVmIHBvcGl0ZW0oc2VsZik6DQogICAgICAgIHdoaWxlIFRydWU6DQogICAgICAgICAgICBrZXksIHZhbHVlID0gc2VsZi5kYXRhLnBvcGl0ZW0oKQ0KICAgICAgICAgICAgbyA9IGtleSgpDQogICAgICAgICAgICBpZiBvIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgIHJldHVybiBvLCB2YWx1ZQ0KDQogICAgZGVmIHBvcChzZWxmLCBrZXksICphcmdzKToNCiAgICAgICAgcmV0dXJuIHNlbGYuZGF0YS5wb3AocmVmKGtleSksICphcmdzKQ0KDQogICAgZGVmIHNldGRlZmF1bHQoc2VsZiwga2V5LCBkZWZhdWx0PU5vbmUpOg0KICAgICAgICByZXR1cm4gc2VsZi5kYXRhLnNldGRlZmF1bHQocmVmKGtleSwgc2VsZi5fcmVtb3ZlKSxkZWZhdWx0KQ0KDQogICAgZGVmIHVwZGF0ZShzZWxmLCBkaWN0PU5vbmUsICoqa3dhcmdzKToNCiAgICAgICAgZCA9IHNlbGYuZGF0YQ0KICAgICAgICBpZiBkaWN0IGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgaWYgbm90IGhhc2F0dHIoZGljdCwgIml0ZW1zIik6DQogICAgICAgICAgICAgICAgZGljdCA9IHR5cGUoe30pKGRpY3QpDQogICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBkaWN0Lml0ZW1zKCk6DQogICAgICAgICAgICAgICAgZFtyZWYoa2V5LCBzZWxmLl9yZW1vdmUpXSA9IHZhbHVlDQogICAgICAgIGlmIGxlbihrd2FyZ3MpOg0KICAgICAgICAgICAgc2VsZi51cGRhdGUoa3dhcmdzKQ0K',
'/Lib/linecache.py':'IiIiQ2FjaGUgbGluZXMgZnJvbSBmaWxlcy4KClRoaXMgaXMgaW50ZW5kZWQgdG8gcmVhZCBsaW5lcyBmcm9tIG1vZHVsZXMgaW1wb3J0ZWQgLS0gaGVuY2UgaWYgYSBmaWxlbmFtZQppcyBub3QgZm91bmQsIGl0IHdpbGwgbG9vayBkb3duIHRoZSBtb2R1bGUgc2VhcmNoIHBhdGggZm9yIGEgZmlsZSBieQp0aGF0IG5hbWUuCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKI2ZpeG1lIGJyeXRob24KI2ltcG9ydCB0b2tlbml6ZQoKX19hbGxfXyA9IFsiZ2V0bGluZSIsICJjbGVhcmNhY2hlIiwgImNoZWNrY2FjaGUiXQoKZGVmIGdldGxpbmUoZmlsZW5hbWUsIGxpbmVubywgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICBsaW5lcyA9IGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscykKICAgIGlmIDEgPD0gbGluZW5vIDw9IGxlbihsaW5lcyk6CiAgICAgICAgcmV0dXJuIGxpbmVzW2xpbmVuby0xXQogICAgZWxzZToKICAgICAgICByZXR1cm4gJycKCgojIFRoZSBjYWNoZQoKY2FjaGUgPSB7fSAjIFRoZSBjYWNoZQoKCmRlZiBjbGVhcmNhY2hlKCk6CiAgICAiIiJDbGVhciB0aGUgY2FjaGUgZW50aXJlbHkuIiIiCgogICAgZ2xvYmFsIGNhY2hlCiAgICBjYWNoZSA9IHt9CgoKZGVmIGdldGxpbmVzKGZpbGVuYW1lLCBtb2R1bGVfZ2xvYmFscz1Ob25lKToKICAgICIiIkdldCB0aGUgbGluZXMgZm9yIGEgZmlsZSBmcm9tIHRoZSBjYWNoZS4KICAgIFVwZGF0ZSB0aGUgY2FjaGUgaWYgaXQgZG9lc24ndCBjb250YWluIGFuIGVudHJ5IGZvciB0aGlzIGZpbGUgYWxyZWFkeS4iIiIKCiAgICBpZiBmaWxlbmFtZSBpbiBjYWNoZToKICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCiAgICBlbHNlOgogICAgICAgIHJldHVybiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHMpCgoKZGVmIGNoZWNrY2FjaGUoZmlsZW5hbWU9Tm9uZSk6CiAgICAiIiJEaXNjYXJkIGNhY2hlIGVudHJpZXMgdGhhdCBhcmUgb3V0IG9mIGRhdGUuCiAgICAoVGhpcyBpcyBub3QgY2hlY2tlZCB1cG9uIGVhY2ggY2FsbCEpIiIiCgogICAgaWYgZmlsZW5hbWUgaXMgTm9uZToKICAgICAgICBmaWxlbmFtZXMgPSBsaXN0KGNhY2hlLmtleXMoKSkKICAgIGVsc2U6CiAgICAgICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgICAgIGZpbGVuYW1lcyA9IFtmaWxlbmFtZV0KICAgICAgICBlbHNlOgogICAgICAgICAgICByZXR1cm4KCiAgICBmb3IgZmlsZW5hbWUgaW4gZmlsZW5hbWVzOgogICAgICAgIHNpemUsIG10aW1lLCBsaW5lcywgZnVsbG5hbWUgPSBjYWNoZVtmaWxlbmFtZV0KICAgICAgICBpZiBtdGltZSBpcyBOb25lOgogICAgICAgICAgICBjb250aW51ZSAgICMgbm8tb3AgZm9yIGZpbGVzIGxvYWRlZCB2aWEgYSBfX2xvYWRlcl9fCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICNleGNlcHQgb3MuZXJyb3I6CiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBkZWwgY2FjaGVbZmlsZW5hbWVdCiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgaWYgc2l6ZSAhPSBzdGF0LnN0X3NpemUgb3IgbXRpbWUgIT0gc3RhdC5zdF9tdGltZToKICAgICAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQoKCmRlZiB1cGRhdGVjYWNoZShmaWxlbmFtZSwgbW9kdWxlX2dsb2JhbHM9Tm9uZSk6CiAgICAiIiJVcGRhdGUgYSBjYWNoZSBlbnRyeSBhbmQgcmV0dXJuIGl0cyBsaXN0IG9mIGxpbmVzLgogICAgSWYgc29tZXRoaW5nJ3Mgd3JvbmcsIHByaW50IGEgbWVzc2FnZSwgZGlzY2FyZCB0aGUgY2FjaGUgZW50cnksCiAgICBhbmQgcmV0dXJuIGFuIGVtcHR5IGxpc3QuIiIiCgogICAgaWYgZmlsZW5hbWUgaW4gY2FjaGU6CiAgICAgICAgZGVsIGNhY2hlW2ZpbGVuYW1lXQogICAgaWYgbm90IGZpbGVuYW1lIG9yIChmaWxlbmFtZS5zdGFydHN3aXRoKCc8JykgYW5kIGZpbGVuYW1lLmVuZHN3aXRoKCc+JykpOgogICAgICAgIHJldHVybiBbXQoKICAgIGZ1bGxuYW1lID0gZmlsZW5hbWUKICAgIHRyeToKICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgIGJhc2VuYW1lID0gZmlsZW5hbWUKCiAgICAgICAgIyBUcnkgZm9yIGEgX19sb2FkZXJfXywgaWYgYXZhaWxhYmxlCiAgICAgICAgaWYgbW9kdWxlX2dsb2JhbHMgYW5kICdfX2xvYWRlcl9fJyBpbiBtb2R1bGVfZ2xvYmFsczoKICAgICAgICAgICAgbmFtZSA9IG1vZHVsZV9nbG9iYWxzLmdldCgnX19uYW1lX18nKQogICAgICAgICAgICBsb2FkZXIgPSBtb2R1bGVfZ2xvYmFsc1snX19sb2FkZXJfXyddCiAgICAgICAgICAgIGdldF9zb3VyY2UgPSBnZXRhdHRyKGxvYWRlciwgJ2dldF9zb3VyY2UnLCBOb25lKQoKICAgICAgICAgICAgaWYgbmFtZSBhbmQgZ2V0X3NvdXJjZToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBkYXRhID0gZ2V0X3NvdXJjZShuYW1lKQogICAgICAgICAgICAgICAgZXhjZXB0IChJbXBvcnRFcnJvciwgSU9FcnJvcik6CiAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIE5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgICMgTm8gbHVjaywgdGhlIFBFUDMwMiBsb2FkZXIgY2Fubm90IGZpbmQgdGhlIHNvdXJjZQogICAgICAgICAgICAgICAgICAgICAgICAjIGZvciB0aGlzIG1vZHVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdCiAgICAgICAgICAgICAgICAgICAgY2FjaGVbZmlsZW5hbWVdID0gKAogICAgICAgICAgICAgICAgICAgICAgICBsZW4oZGF0YSksIE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIFtsaW5lKydcbicgZm9yIGxpbmUgaW4gZGF0YS5zcGxpdGxpbmVzKCldLCBmdWxsbmFtZQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVbZmlsZW5hbWVdWzJdCgogICAgICAgICMgVHJ5IGxvb2tpbmcgdGhyb3VnaCB0aGUgbW9kdWxlIHNlYXJjaCBwYXRoLCB3aGljaCBpcyBvbmx5IHVzZWZ1bAogICAgICAgICMgd2hlbiBoYW5kbGluZyBhIHJlbGF0aXZlIGZpbGVuYW1lLgogICAgICAgIGlmIG9zLnBhdGguaXNhYnMoZmlsZW5hbWUpOgogICAgICAgICAgICByZXR1cm4gW10KCiAgICAgICAgIyBUYWtlIGNhcmUgdG8gaGFuZGxlIHBhY2thZ2VzLgogICAgICAgIGlmIGJhc2VuYW1lID09ICdfX2luaXRfXy5weSc6CiAgICAgICAgICAgICMgZmlsZW5hbWUgcmVmZXJlcyB0byBhIHBhY2thZ2UKICAgICAgICAgICAgYmFzZW5hbWUgPSBmaWxlbmFtZQoKICAgICAgICBmb3IgZGlybmFtZSBpbiBzeXMucGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZnVsbG5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgYmFzZW5hbWUpCiAgICAgICAgICAgIGV4Y2VwdCAoVHlwZUVycm9yLCBBdHRyaWJ1dGVFcnJvcik6CiAgICAgICAgICAgICAgICAjIE5vdCBzdWZmaWNpZW50bHkgc3RyaW5nLWxpa2UgdG8gZG8gYW55dGhpbmcgdXNlZnVsIHdpdGguCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBzdGF0ID0gb3Muc3RhdChmdWxsbmFtZSkKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICNmaXhtZSBicnl0aG9uLCBpbnZhbGlkIHN5bnRheCAKICAgICAgICAgICAgI2V4Y2VwdCBvcy5lcnJvcjoKICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICNmaXhtZSBicnl0aG9uIHVuZXhwZWN0ZWQgdG9rZW4gZWxzZQogICAgICAgICNlbHNlOgogICAgICAgICMgICAgcmV0dXJuIFtdCiAgICB0cnk6CiAgICAgICAgZnA9b3BlbihmdWxsbmFtZSkKICAgICAgICAjZml4bWUgYnJ5dGhvbgogICAgICAgICN3aXRoIHRva2VuaXplLm9wZW4oZnVsbG5hbWUpIGFzIGZwOgogICAgICAgIGxpbmVzID0gZnAucmVhZGxpbmVzKCkKICAgICAgICBmcC5jbG9zZSgpCiAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICByZXR1cm4gW10KICAgIGlmIGxpbmVzIGFuZCBub3QgbGluZXNbLTFdLmVuZHN3aXRoKCdcbicpOgogICAgICAgIGxpbmVzWy0xXSArPSAnXG4nCiAgICBzaXplLCBtdGltZSA9IHN0YXQuc3Rfc2l6ZSwgc3RhdC5zdF9tdGltZQogICAgY2FjaGVbZmlsZW5hbWVdID0gc2l6ZSwgbXRpbWUsIGxpbmVzLCBmdWxsbmFtZQogICAgcmV0dXJuIGxpbmVzCg==',
'/Lib/_abcoll.py':'IyBDb3B5cmlnaHQgMjAwNyBHb29nbGUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KIyBMaWNlbnNlZCB0byBQU0YgdW5kZXIgYSBDb250cmlidXRvciBBZ3JlZW1lbnQuCgoiIiJBYnN0cmFjdCBCYXNlIENsYXNzZXMgKEFCQ3MpIGZvciBjb2xsZWN0aW9ucywgYWNjb3JkaW5nIHRvIFBFUCAzMTE5LgoKRE9OJ1QgVVNFIFRISVMgTU9EVUxFIERJUkVDVExZISAgVGhlIGNsYXNzZXMgaGVyZSBzaG91bGQgYmUgaW1wb3J0ZWQKdmlhIGNvbGxlY3Rpb25zOyB0aGV5IGFyZSBkZWZpbmVkIGhlcmUgb25seSB0byBhbGxldmlhdGUgY2VydGFpbgpib290c3RyYXBwaW5nIGlzc3Vlcy4gIFVuaXQgdGVzdHMgYXJlIGluIHRlc3RfY29sbGVjdGlvbnMuCiIiIgoKI2Zyb20gYWJjIGltcG9ydCBBQkNNZXRhLCBhYnN0cmFjdG1ldGhvZAppbXBvcnQgc3lzCgpfX2FsbF9fID0gWyJIYXNoYWJsZSIsICJJdGVyYWJsZSIsICJJdGVyYXRvciIsCiAgICAgICAgICAgIlNpemVkIiwgIkNvbnRhaW5lciIsICJDYWxsYWJsZSIsCiAgICAgICAgICAgIlNldCIsICJNdXRhYmxlU2V0IiwKICAgICAgICAgICAiTWFwcGluZyIsICJNdXRhYmxlTWFwcGluZyIsCiAgICAgICAgICAgIk1hcHBpbmdWaWV3IiwgIktleXNWaWV3IiwgIkl0ZW1zVmlldyIsICJWYWx1ZXNWaWV3IiwKICAgICAgICAgICAiU2VxdWVuY2UiLCAiTXV0YWJsZVNlcXVlbmNlIiwKICAgICAgICAgICAiQnl0ZVN0cmluZyIsCiAgICAgICAgICAgXQoKIiIiCiMjIyBjb2xsZWN0aW9uIHJlbGF0ZWQgdHlwZXMgd2hpY2ggYXJlIG5vdCBleHBvc2VkIHRocm91Z2ggYnVpbHRpbiAjIyMKIyMgaXRlcmF0b3JzICMjCiNmaXhtZSBicnl0aG9uCiNieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcihiJycpKQpieXRlc19pdGVyYXRvciA9IHR5cGUoaXRlcignJykpCiNmaXhtZSBicnl0aG9uCiNieXRlYXJyYXlfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoYnl0ZWFycmF5KCkpKQojY2FsbGFibGVfaXRlcmF0b3IgPSA/Pz8KZGljdF9rZXlpdGVyYXRvciA9IHR5cGUoaXRlcih7fS5rZXlzKCkpKQpkaWN0X3ZhbHVlaXRlcmF0b3IgPSB0eXBlKGl0ZXIoe30udmFsdWVzKCkpKQpkaWN0X2l0ZW1pdGVyYXRvciA9IHR5cGUoaXRlcih7fS5pdGVtcygpKSkKbGlzdF9pdGVyYXRvciA9IHR5cGUoaXRlcihbXSkpCmxpc3RfcmV2ZXJzZWl0ZXJhdG9yID0gdHlwZShpdGVyKHJldmVyc2VkKFtdKSkpCnJhbmdlX2l0ZXJhdG9yID0gdHlwZShpdGVyKHJhbmdlKDApKSkKc2V0X2l0ZXJhdG9yID0gdHlwZShpdGVyKHNldCgpKSkKc3RyX2l0ZXJhdG9yID0gdHlwZShpdGVyKCIiKSkKdHVwbGVfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoKCkpKQp6aXBfaXRlcmF0b3IgPSB0eXBlKGl0ZXIoemlwKCkpKQojIyB2aWV3cyAjIwpkaWN0X2tleXMgPSB0eXBlKHt9LmtleXMoKSkKZGljdF92YWx1ZXMgPSB0eXBlKHt9LnZhbHVlcygpKQpkaWN0X2l0ZW1zID0gdHlwZSh7fS5pdGVtcygpKQojIyBtaXNjICMjCmRpY3RfcHJveHkgPSB0eXBlKHR5cGUuX19kaWN0X18pCiIiIgoKZGVmIGFic3RyYWN0bWV0aG9kKHNlbGYpOgogICAgcmV0dXJuIHNlbGYKCiMjIyBPTkUtVFJJQ0sgUE9OSUVTICMjIwoKCiNjbGFzcyBJdGVyYWJsZShtZXRhY2xhc3M9QUJDTWV0YSk6CmNsYXNzIEl0ZXJhYmxlOgoKICAgIEBhYnN0cmFjdG1ldGhvZAogICAgZGVmIF9faXRlcl9fKHNlbGYpOgogICAgICAgIHdoaWxlIEZhbHNlOgogICAgICAgICAgICB5aWVsZCBOb25lCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBJdGVyYWJsZToKICAgICAgICAgICAgaWYgYW55KCJfX2l0ZXJfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCgojY2xhc3MgU2l6ZWQobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBTaXplZDoKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2xlbl9fKHNlbGYpOgogICAgICAgIHJldHVybiAwCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgX19zdWJjbGFzc2hvb2tfXyhjbHMsIEMpOgogICAgICAgIGlmIGNscyBpcyBTaXplZDoKICAgICAgICAgICAgaWYgYW55KCJfX2xlbl9fIiBpbiBCLl9fZGljdF9fIGZvciBCIGluIEMuX19tcm9fXyk6CiAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZQogICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAoKCiNjbGFzcyBDb250YWluZXIobWV0YWNsYXNzPUFCQ01ldGEpOgpjbGFzcyBDb250YWluZXI6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19jb250YWluc19fKHNlbGYsIHgpOgogICAgICAgIHJldHVybiBGYWxzZQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIF9fc3ViY2xhc3Nob29rX18oY2xzLCBDKToKICAgICAgICBpZiBjbHMgaXMgQ29udGFpbmVyOgogICAgICAgICAgICBpZiBhbnkoIl9fY29udGFpbnNfXyIgaW4gQi5fX2RpY3RfXyBmb3IgQiBpbiBDLl9fbXJvX18pOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICByZXR1cm4gTm90SW1wbGVtZW50ZWQKCiMjIyBNQVBQSU5HUyAjIyMKCgpjbGFzcyBNYXBwaW5nKFNpemVkLCBJdGVyYWJsZSwgQ29udGFpbmVyKToKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgZGVmIGdldChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAoKICAgIGRlZiBfX2NvbnRhaW5zX18oc2VsZiwga2V5KToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHNlbGZba2V5XQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYga2V5cyhzZWxmKToKICAgICAgICByZXR1cm4gS2V5c1ZpZXcoc2VsZikKCiAgICBkZWYgaXRlbXMoc2VsZik6CiAgICAgICAgcmV0dXJuIEl0ZW1zVmlldyhzZWxmKQoKICAgIGRlZiB2YWx1ZXMoc2VsZik6CiAgICAgICAgcmV0dXJuIFZhbHVlc1ZpZXcoc2VsZikKCiAgICBkZWYgX19lcV9fKHNlbGYsIG90aGVyKToKICAgICAgICBpZiBub3QgaXNpbnN0YW5jZShvdGhlciwgTWFwcGluZyk6CiAgICAgICAgICAgIHJldHVybiBOb3RJbXBsZW1lbnRlZAogICAgICAgIHJldHVybiBkaWN0KHNlbGYuaXRlbXMoKSkgPT0gZGljdChvdGhlci5pdGVtcygpKQoKICAgIGRlZiBfX25lX18oc2VsZiwgb3RoZXIpOgogICAgICAgIHJldHVybiBub3QgKHNlbGYgPT0gb3RoZXIpCgoKY2xhc3MgTXV0YWJsZU1hcHBpbmcoTWFwcGluZyk6CgogICAgQGFic3RyYWN0bWV0aG9kCiAgICBkZWYgX19zZXRpdGVtX18oc2VsZiwga2V5LCB2YWx1ZSk6CiAgICAgICAgcmFpc2UgS2V5RXJyb3IKCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBfX2RlbGl0ZW1fXyhzZWxmLCBrZXkpOgogICAgICAgIHJhaXNlIEtleUVycm9yCgogICAgX19tYXJrZXIgPSBvYmplY3QoKQoKICAgIGRlZiBwb3Aoc2VsZiwga2V5LCBkZWZhdWx0PV9fbWFya2VyKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHZhbHVlID0gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBpZiBkZWZhdWx0IGlzIHNlbGYuX19tYXJrZXI6CiAgICAgICAgICAgICAgICByYWlzZQogICAgICAgICAgICByZXR1cm4gZGVmYXVsdAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRlbCBzZWxmW2tleV0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlCgogICAgZGVmIHBvcGl0ZW0oc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBrZXkgPSBuZXh0KGl0ZXIoc2VsZikpCiAgICAgICAgZXhjZXB0IFN0b3BJdGVyYXRpb246CiAgICAgICAgICAgIHJhaXNlIEtleUVycm9yCiAgICAgICAgdmFsdWUgPSBzZWxmW2tleV0KICAgICAgICBkZWwgc2VsZltrZXldCiAgICAgICAgcmV0dXJuIGtleSwgdmFsdWUKCiAgICBkZWYgY2xlYXIoc2VsZik6CiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICAgICAgc2VsZi5wb3BpdGVtKCkKICAgICAgICBleGNlcHQgS2V5RXJyb3I6CiAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgdXBkYXRlKCphcmdzLCAqKmt3ZHMpOgogICAgICAgIGlmIGxlbihhcmdzKSA+IDI6CiAgICAgICAgICAgIHJhaXNlIFR5cGVFcnJvcigidXBkYXRlKCkgdGFrZXMgYXQgbW9zdCAyIHBvc2l0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyZ3VtZW50cyAoe30gZ2l2ZW4pIi5mb3JtYXQobGVuKGFyZ3MpKSkKICAgICAgICBlbGlmIG5vdCBhcmdzOgogICAgICAgICAgICByYWlzZSBUeXBlRXJyb3IoInVwZGF0ZSgpIHRha2VzIGF0IGxlYXN0IDEgYXJndW1lbnQgKDAgZ2l2ZW4pIikKICAgICAgICBzZWxmID0gYXJnc1swXQogICAgICAgIG90aGVyID0gYXJnc1sxXSBpZiBsZW4oYXJncykgPj0gMiBlbHNlICgpCgogICAgICAgIGlmIGlzaW5zdGFuY2Uob3RoZXIsIE1hcHBpbmcpOgogICAgICAgICAgICBmb3Iga2V5IGluIG90aGVyOgogICAgICAgICAgICAgICAgc2VsZltrZXldID0gb3RoZXJba2V5XQogICAgICAgIGVsaWYgaGFzYXR0cihvdGhlciwgImtleXMiKToKICAgICAgICAgICAgZm9yIGtleSBpbiBvdGhlci5rZXlzKCk6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSBvdGhlcltrZXldCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gb3RoZXI6CiAgICAgICAgICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3ZHMuaXRlbXMoKToKICAgICAgICAgICAgc2VsZltrZXldID0gdmFsdWUKCiAgICBkZWYgc2V0ZGVmYXVsdChzZWxmLCBrZXksIGRlZmF1bHQ9Tm9uZSk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gc2VsZltrZXldCiAgICAgICAgZXhjZXB0IEtleUVycm9yOgogICAgICAgICAgICBzZWxmW2tleV0gPSBkZWZhdWx0CiAgICAgICAgcmV0dXJuIGRlZmF1bHQKCiNNdXRhYmxlTWFwcGluZy5yZWdpc3RlcihkaWN0KQo=',
'/Lib/pydom.py':'',
'/Lib/keyword.py':'a3dsaXN0ID0gWwojLS1zdGFydCBrZXl3b3Jkcy0tCiAgICAgICAgJ0ZhbHNlJywKICAgICAgICAnTm9uZScsCiAgICAgICAgJ1RydWUnLAogICAgICAgICdhbmQnLAogICAgICAgICdhcycsCiAgICAgICAgJ2Fzc2VydCcsCiAgICAgICAgJ2JyZWFrJywKICAgICAgICAnY2xhc3MnLAogICAgICAgICdjb250aW51ZScsCiAgICAgICAgJ2RlZicsCiAgICAgICAgJ2RlbCcsCiAgICAgICAgJ2VsaWYnLAogICAgICAgICdlbHNlJywKICAgICAgICAnZXhjZXB0JywKICAgICAgICAnZmluYWxseScsCiAgICAgICAgJ2ZvcicsCiAgICAgICAgJ2Zyb20nLAogICAgICAgICdnbG9iYWwnLAogICAgICAgICdpZicsCiAgICAgICAgJ2ltcG9ydCcsCiAgICAgICAgJ2luJywKICAgICAgICAnaXMnLAogICAgICAgICdsYW1iZGEnLAogICAgICAgICdub25sb2NhbCcsCiAgICAgICAgJ25vdCcsCiAgICAgICAgJ29yJywKICAgICAgICAncGFzcycsCiAgICAgICAgJ3JhaXNlJywKICAgICAgICAncmV0dXJuJywKICAgICAgICAndHJ5JywKICAgICAgICAnd2hpbGUnLAogICAgICAgICd3aXRoJywKICAgICAgICAneWllbGQnLAojLS1lbmQga2V5d29yZHMtLQogICAgICAgIF0KCmRlZiBpc2tleXdvcmQod29yZCk6CiAgICByZXR1cm4gd29yZCBpbiBrd2xpc3QK',
'/Lib/stat.py':'IiIiQ29uc3RhbnRzL2Z1bmN0aW9ucyBmb3IgaW50ZXJwcmV0aW5nIHJlc3VsdHMgb2Ygb3Muc3RhdCgpIGFuZCBvcy5sc3RhdCgpLg0KDQpTdWdnZXN0ZWQgdXNhZ2U6IGZyb20gc3RhdCBpbXBvcnQgKg0KIiIiDQoNCiMgSW5kaWNlcyBmb3Igc3RhdCBzdHJ1Y3QgbWVtYmVycyBpbiB0aGUgdHVwbGUgcmV0dXJuZWQgYnkgb3Muc3RhdCgpDQoNClNUX01PREUgID0gMA0KU1RfSU5PICAgPSAxDQpTVF9ERVYgICA9IDINClNUX05MSU5LID0gMw0KU1RfVUlEICAgPSA0DQpTVF9HSUQgICA9IDUNClNUX1NJWkUgID0gNg0KU1RfQVRJTUUgPSA3DQpTVF9NVElNRSA9IDgNClNUX0NUSU1FID0gOQ0KDQojIEV4dHJhY3QgYml0cyBmcm9tIHRoZSBtb2RlDQoNCmRlZiBTX0lNT0RFKG1vZGUpOg0KICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBjYW4gYmUgc2V0IGJ5DQogICAgb3MuY2htb2QoKS4NCiAgICAiIiINCiAgICByZXR1cm4gbW9kZSAmIDBvNzc3Nw0KDQpkZWYgU19JRk1UKG1vZGUpOg0KICAgICIiIlJldHVybiB0aGUgcG9ydGlvbiBvZiB0aGUgZmlsZSdzIG1vZGUgdGhhdCBkZXNjcmliZXMgdGhlDQogICAgZmlsZSB0eXBlLg0KICAgICIiIg0KICAgIHJldHVybiBtb2RlICYgMG8xNzAwMDANCg0KIyBDb25zdGFudHMgdXNlZCBhcyBTX0lGTVQoKSBmb3IgdmFyaW91cyBmaWxlIHR5cGVzDQojIChub3QgYWxsIGFyZSBpbXBsZW1lbnRlZCBvbiBhbGwgc3lzdGVtcykNCg0KU19JRkRJUiAgPSAwbzA0MDAwMCAgIyBkaXJlY3RvcnkNClNfSUZDSFIgID0gMG8wMjAwMDAgICMgY2hhcmFjdGVyIGRldmljZQ0KU19JRkJMSyAgPSAwbzA2MDAwMCAgIyBibG9jayBkZXZpY2UNClNfSUZSRUcgID0gMG8xMDAwMDAgICMgcmVndWxhciBmaWxlDQpTX0lGSUZPICA9IDBvMDEwMDAwICAjIGZpZm8gKG5hbWVkIHBpcGUpDQpTX0lGTE5LICA9IDBvMTIwMDAwICAjIHN5bWJvbGljIGxpbmsNClNfSUZTT0NLID0gMG8xNDAwMDAgICMgc29ja2V0IGZpbGUNCg0KIyBGdW5jdGlvbnMgdG8gdGVzdCBmb3IgZWFjaCBmaWxlIHR5cGUNCg0KZGVmIFNfSVNESVIobW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgZGlyZWN0b3J5LiIiIg0KICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRkRJUg0KDQpkZWYgU19JU0NIUihtb2RlKToNCiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSBjaGFyYWN0ZXIgc3BlY2lhbCBkZXZpY2UgZmlsZS4iIiINCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZDSFINCg0KZGVmIFNfSVNCTEsobW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgYmxvY2sgc3BlY2lhbCBkZXZpY2UgZmlsZS4iIiINCiAgICByZXR1cm4gU19JRk1UKG1vZGUpID09IFNfSUZCTEsNCg0KZGVmIFNfSVNSRUcobW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgcmVndWxhciBmaWxlLiIiIg0KICAgIHJldHVybiBTX0lGTVQobW9kZSkgPT0gU19JRlJFRw0KDQpkZWYgU19JU0ZJRk8obW9kZSk6DQogICAgIiIiUmV0dXJuIFRydWUgaWYgbW9kZSBpcyBmcm9tIGEgRklGTyAobmFtZWQgcGlwZSkuIiIiDQogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGSUZPDQoNCmRlZiBTX0lTTE5LKG1vZGUpOg0KICAgICIiIlJldHVybiBUcnVlIGlmIG1vZGUgaXMgZnJvbSBhIHN5bWJvbGljIGxpbmsuIiIiDQogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGTE5LDQoNCmRlZiBTX0lTU09DSyhtb2RlKToNCiAgICAiIiJSZXR1cm4gVHJ1ZSBpZiBtb2RlIGlzIGZyb20gYSBzb2NrZXQuIiIiDQogICAgcmV0dXJuIFNfSUZNVChtb2RlKSA9PSBTX0lGU09DSw0KDQojIE5hbWVzIGZvciBwZXJtaXNzaW9uIGJpdHMNCg0KU19JU1VJRCA9IDBvNDAwMCAgIyBzZXQgVUlEIGJpdA0KU19JU0dJRCA9IDBvMjAwMCAgIyBzZXQgR0lEIGJpdA0KU19FTkZNVCA9IFNfSVNHSUQgIyBmaWxlIGxvY2tpbmcgZW5mb3JjZW1lbnQNClNfSVNWVFggPSAwbzEwMDAgICMgc3RpY2t5IGJpdA0KU19JUkVBRCA9IDBvMDQwMCAgIyBVbml4IFY3IHN5bm9ueW0gZm9yIFNfSVJVU1INClNfSVdSSVRFID0gMG8wMjAwICMgVW5peCBWNyBzeW5vbnltIGZvciBTX0lXVVNSDQpTX0lFWEVDID0gMG8wMTAwICAjIFVuaXggVjcgc3lub255bSBmb3IgU19JWFVTUg0KU19JUldYVSA9IDBvMDcwMCAgIyBtYXNrIGZvciBvd25lciBwZXJtaXNzaW9ucw0KU19JUlVTUiA9IDBvMDQwMCAgIyByZWFkIGJ5IG93bmVyDQpTX0lXVVNSID0gMG8wMjAwICAjIHdyaXRlIGJ5IG93bmVyDQpTX0lYVVNSID0gMG8wMTAwICAjIGV4ZWN1dGUgYnkgb3duZXINClNfSVJXWEcgPSAwbzAwNzAgICMgbWFzayBmb3IgZ3JvdXAgcGVybWlzc2lvbnMNClNfSVJHUlAgPSAwbzAwNDAgICMgcmVhZCBieSBncm91cA0KU19JV0dSUCA9IDBvMDAyMCAgIyB3cml0ZSBieSBncm91cA0KU19JWEdSUCA9IDBvMDAxMCAgIyBleGVjdXRlIGJ5IGdyb3VwDQpTX0lSV1hPID0gMG8wMDA3ICAjIG1hc2sgZm9yIG90aGVycyAobm90IGluIGdyb3VwKSBwZXJtaXNzaW9ucw0KU19JUk9USCA9IDBvMDAwNCAgIyByZWFkIGJ5IG90aGVycw0KU19JV09USCA9IDBvMDAwMiAgIyB3cml0ZSBieSBvdGhlcnMNClNfSVhPVEggPSAwbzAwMDEgICMgZXhlY3V0ZSBieSBvdGhlcnMNCg0KIyBOYW1lcyBmb3IgZmlsZSBmbGFncw0KDQpVRl9OT0RVTVAgICAgPSAweDAwMDAwMDAxICAjIGRvIG5vdCBkdW1wIGZpbGUNClVGX0lNTVVUQUJMRSA9IDB4MDAwMDAwMDIgICMgZmlsZSBtYXkgbm90IGJlIGNoYW5nZWQNClVGX0FQUEVORCAgICA9IDB4MDAwMDAwMDQgICMgZmlsZSBtYXkgb25seSBiZSBhcHBlbmRlZCB0bw0KVUZfT1BBUVVFICAgID0gMHgwMDAwMDAwOCAgIyBkaXJlY3RvcnkgaXMgb3BhcXVlIHdoZW4gdmlld2VkIHRocm91Z2ggYSB1bmlvbiBzdGFjaw0KVUZfTk9VTkxJTksgID0gMHgwMDAwMDAxMCAgIyBmaWxlIG1heSBub3QgYmUgcmVuYW1lZCBvciBkZWxldGVkDQpVRl9DT01QUkVTU0VEID0gMHgwMDAwMDAyMCAjIE9TIFg6IGZpbGUgaXMgaGZzLWNvbXByZXNzZWQNClVGX0hJRERFTiAgICA9IDB4MDAwMDgwMDAgICMgT1MgWDogZmlsZSBzaG91bGQgbm90IGJlIGRpc3BsYXllZA0KU0ZfQVJDSElWRUQgID0gMHgwMDAxMDAwMCAgIyBmaWxlIG1heSBiZSBhcmNoaXZlZA0KU0ZfSU1NVVRBQkxFID0gMHgwMDAyMDAwMCAgIyBmaWxlIG1heSBub3QgYmUgY2hhbmdlZA0KU0ZfQVBQRU5EICAgID0gMHgwMDA0MDAwMCAgIyBmaWxlIG1heSBvbmx5IGJlIGFwcGVuZGVkIHRvDQpTRl9OT1VOTElOSyAgPSAweDAwMTAwMDAwICAjIGZpbGUgbWF5IG5vdCBiZSByZW5hbWVkIG9yIGRlbGV0ZWQNClNGX1NOQVBTSE9UICA9IDB4MDAyMDAwMDAgICMgZmlsZSBpcyBhIHNuYXBzaG90IGZpbGUNCg0KDQpfZmlsZW1vZGVfdGFibGUgPSAoDQogICAgKChTX0lGTE5LLCAgICAgICAgICJsIiksDQogICAgIChTX0lGUkVHLCAgICAgICAgICItIiksDQogICAgIChTX0lGQkxLLCAgICAgICAgICJiIiksDQogICAgIChTX0lGRElSLCAgICAgICAgICJkIiksDQogICAgIChTX0lGQ0hSLCAgICAgICAgICJjIiksDQogICAgIChTX0lGSUZPLCAgICAgICAgICJwIikpLA0KDQogICAgKChTX0lSVVNSLCAgICAgICAgICJyIiksKSwNCiAgICAoKFNfSVdVU1IsICAgICAgICAgInciKSwpLA0KICAgICgoU19JWFVTUnxTX0lTVUlELCAicyIpLA0KICAgICAoU19JU1VJRCwgICAgICAgICAiUyIpLA0KICAgICAoU19JWFVTUiwgICAgICAgICAieCIpKSwNCg0KICAgICgoU19JUkdSUCwgICAgICAgICAiciIpLCksDQogICAgKChTX0lXR1JQLCAgICAgICAgICJ3IiksKSwNCiAgICAoKFNfSVhHUlB8U19JU0dJRCwgInMiKSwNCiAgICAgKFNfSVNHSUQsICAgICAgICAgIlMiKSwNCiAgICAgKFNfSVhHUlAsICAgICAgICAgIngiKSksDQoNCiAgICAoKFNfSVJPVEgsICAgICAgICAgInIiKSwpLA0KICAgICgoU19JV09USCwgICAgICAgICAidyIpLCksDQogICAgKChTX0lYT1RIfFNfSVNWVFgsICJ0IiksDQogICAgIChTX0lTVlRYLCAgICAgICAgICJUIiksDQogICAgIChTX0lYT1RILCAgICAgICAgICJ4IikpDQopDQoNCmRlZiBmaWxlbW9kZShtb2RlKToNCiAgICAiIiJDb252ZXJ0IGEgZmlsZSdzIG1vZGUgdG8gYSBzdHJpbmcgb2YgdGhlIGZvcm0gJy1yd3hyd3hyd3gnLiIiIg0KICAgIHBlcm0gPSBbXQ0KICAgIGZvciB0YWJsZSBpbiBfZmlsZW1vZGVfdGFibGU6DQogICAgICAgIGZvciBiaXQsIGNoYXIgaW4gdGFibGU6DQogICAgICAgICAgICBpZiBtb2RlICYgYml0ID09IGJpdDoNCiAgICAgICAgICAgICAgICBwZXJtLmFwcGVuZChjaGFyKQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwZXJtLmFwcGVuZCgiLSIpDQogICAgcmV0dXJuICIiLmpvaW4ocGVybSkNCg==',
'/Lib/_dummy_thread.py':'IiIiRHJvcC1pbiByZXBsYWNlbWVudCBmb3IgdGhlIHRocmVhZCBtb2R1bGUuCgpNZWFudCB0byBiZSB1c2VkIGFzIGEgYnJhaW4tZGVhZCBzdWJzdGl0dXRlIHNvIHRoYXQgdGhyZWFkZWQgY29kZSBkb2VzCm5vdCBuZWVkIHRvIGJlIHJld3JpdHRlbiBmb3Igd2hlbiB0aGUgdGhyZWFkIG1vZHVsZSBpcyBub3QgcHJlc2VudC4KClN1Z2dlc3RlZCB1c2FnZSBpczo6CgogICAgdHJ5OgogICAgICAgIGltcG9ydCBfdGhyZWFkCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IF9kdW1teV90aHJlYWQgYXMgX3RocmVhZAoKIiIiCiMgRXhwb3J0cyBvbmx5IHRoaW5ncyBzcGVjaWZpZWQgYnkgdGhyZWFkIGRvY3VtZW50YXRpb247CiMgc2tpcHBpbmcgb2Jzb2xldGUgc3lub255bXMgYWxsb2NhdGUoKSwgc3RhcnRfbmV3KCksIGV4aXRfdGhyZWFkKCkuCl9fYWxsX18gPSBbJ2Vycm9yJywgJ3N0YXJ0X25ld190aHJlYWQnLCAnZXhpdCcsICdnZXRfaWRlbnQnLCAnYWxsb2NhdGVfbG9jaycsCiAgICAgICAgICAgJ2ludGVycnVwdF9tYWluJywgJ0xvY2tUeXBlJ10KCiMgQSBkdW1teSB2YWx1ZQpUSU1FT1VUX01BWCA9IDIqKjMxCgojIE5PVEU6IHRoaXMgbW9kdWxlIGNhbiBiZSBpbXBvcnRlZCBlYXJseSBpbiB0aGUgZXh0ZW5zaW9uIGJ1aWxkaW5nIHByb2Nlc3MsCiMgYW5kIHNvIHRvcCBsZXZlbCBpbXBvcnRzIG9mIG90aGVyIG1vZHVsZXMgc2hvdWxkIGJlIGF2b2lkZWQuICBJbnN0ZWFkLCBhbGwKIyBpbXBvcnRzIGFyZSBkb25lIHdoZW4gbmVlZGVkIG9uIGEgZnVuY3Rpb24tYnktZnVuY3Rpb24gYmFzaXMuICBTaW5jZSB0aHJlYWRzCiMgYXJlIGRpc2FibGVkLCB0aGUgaW1wb3J0IGxvY2sgc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZSBhbnl3YXkgKD8/KS4KCmVycm9yID0gUnVudGltZUVycm9yCgpkZWYgc3RhcnRfbmV3X3RocmVhZChmdW5jdGlvbiwgYXJncywga3dhcmdzPXt9KToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuc3RhcnRfbmV3X3RocmVhZCgpLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWtpbmcgc3VyZSB0aGF0IGBgYXJnc2BgIGlzIGEKICAgIHR1cGxlIGFuZCBgYGt3YXJnc2BgIGlzIGEgZGljdGlvbmFyeS4gIElmIGFuIGV4Y2VwdGlvbiBpcyByYWlzZWQKICAgIGFuZCBpdCBpcyBTeXN0ZW1FeGl0ICh3aGljaCBjYW4gYmUgZG9uZSBieSBfdGhyZWFkLmV4aXQoKSkgaXQgaXMKICAgIGNhdWdodCBhbmQgbm90aGluZyBpcyBkb25lOyBhbGwgb3RoZXIgZXhjZXB0aW9ucyBhcmUgcHJpbnRlZCBvdXQKICAgIGJ5IHVzaW5nIHRyYWNlYmFjay5wcmludF9leGMoKS4KCiAgICBJZiB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24gY2FsbHMgaW50ZXJydXB0X21haW4gdGhlIEtleWJvYXJkSW50ZXJydXB0IHdpbGwgYmUKICAgIHJhaXNlZCB3aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zLgoKICAgICIiIgogICAgaWYgdHlwZShhcmdzKSAhPSB0eXBlKHR1cGxlKCkpOgogICAgICAgIHJhaXNlIFR5cGVFcnJvcigiMm5kIGFyZyBtdXN0IGJlIGEgdHVwbGUiKQogICAgaWYgdHlwZShrd2FyZ3MpICE9IHR5cGUoZGljdCgpKToKICAgICAgICByYWlzZSBUeXBlRXJyb3IoIjNyZCBhcmcgbXVzdCBiZSBhIGRpY3QiKQogICAgZ2xvYmFsIF9tYWluCiAgICBfbWFpbiA9IEZhbHNlCiAgICB0cnk6CiAgICAgICAgZnVuY3Rpb24oKmFyZ3MsICoqa3dhcmdzKQogICAgZXhjZXB0IFN5c3RlbUV4aXQ6CiAgICAgICAgcGFzcwogICAgZXhjZXB0OgogICAgICAgIGltcG9ydCB0cmFjZWJhY2sKICAgICAgICB0cmFjZWJhY2sucHJpbnRfZXhjKCkKICAgIF9tYWluID0gVHJ1ZQogICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgIGlmIF9pbnRlcnJ1cHQ6CiAgICAgICAgX2ludGVycnVwdCA9IEZhbHNlCiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKCmRlZiBleGl0KCk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLmV4aXQoKS4iIiIKICAgIHJhaXNlIFN5c3RlbUV4aXQKCmRlZiBnZXRfaWRlbnQoKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuZ2V0X2lkZW50KCkuCgogICAgU2luY2UgdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIF90aHJlYWRtb2R1bGUgaXMgbm90CiAgICBhdmFpbGFibGUsIGl0IGlzIHNhZmUgdG8gYXNzdW1lIHRoYXQgdGhlIGN1cnJlbnQgcHJvY2VzcyBpcyB0aGUKICAgIG9ubHkgdGhyZWFkLiAgVGh1cyBhIGNvbnN0YW50IGNhbiBiZSBzYWZlbHkgcmV0dXJuZWQuCiAgICAiIiIKICAgIHJldHVybiAtMQoKZGVmIGFsbG9jYXRlX2xvY2soKToKICAgICIiIkR1bW15IGltcGxlbWVudGF0aW9uIG9mIF90aHJlYWQuYWxsb2NhdGVfbG9jaygpLiIiIgogICAgcmV0dXJuIExvY2tUeXBlKCkKCmRlZiBzdGFja19zaXplKHNpemU9Tm9uZSk6CiAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLnN0YWNrX3NpemUoKS4iIiIKICAgIGlmIHNpemUgaXMgbm90IE5vbmU6CiAgICAgICAgcmFpc2UgZXJyb3IoInNldHRpbmcgdGhyZWFkIHN0YWNrIHNpemUgbm90IHN1cHBvcnRlZCIpCiAgICByZXR1cm4gMAoKY2xhc3MgTG9ja1R5cGUob2JqZWN0KToKICAgICIiIkNsYXNzIGltcGxlbWVudGluZyBkdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBfdGhyZWFkLkxvY2tUeXBlLgoKICAgIENvbXBhdGliaWxpdHkgaXMgbWFpbnRhaW5lZCBieSBtYWludGFpbmluZyBzZWxmLmxvY2tlZF9zdGF0dXMKICAgIHdoaWNoIGlzIGEgYm9vbGVhbiB0aGF0IHN0b3JlcyB0aGUgc3RhdGUgb2YgdGhlIGxvY2suICBQaWNrbGluZyBvZgogICAgdGhlIGxvY2ssIHRob3VnaCwgc2hvdWxkIG5vdCBiZSBkb25lIHNpbmNlIGlmIHRoZSBfdGhyZWFkIG1vZHVsZSBpcwogICAgdGhlbiB1c2VkIHdpdGggYW4gdW5waWNrbGVkIGBgbG9jaygpYGAgZnJvbSBoZXJlIHByb2JsZW1zIGNvdWxkCiAgICBvY2N1ciBmcm9tIHRoaXMgY2xhc3Mgbm90IGhhdmluZyBhdG9taWMgbWV0aG9kcy4KCiAgICAiIiIKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gRmFsc2UKCiAgICBkZWYgYWNxdWlyZShzZWxmLCB3YWl0ZmxhZz1Ob25lLCB0aW1lb3V0PS0xKToKICAgICAgICAiIiJEdW1teSBpbXBsZW1lbnRhdGlvbiBvZiBhY3F1aXJlKCkuCgogICAgICAgIEZvciBibG9ja2luZyBjYWxscywgc2VsZi5sb2NrZWRfc3RhdHVzIGlzIGF1dG9tYXRpY2FsbHkgc2V0IHRvCiAgICAgICAgVHJ1ZSBhbmQgcmV0dXJuZWQgYXBwcm9wcmlhdGVseSBiYXNlZCBvbiB2YWx1ZSBvZgogICAgICAgIGBgd2FpdGZsYWdgYC4gIElmIGl0IGlzIG5vbi1ibG9ja2luZywgdGhlbiB0aGUgdmFsdWUgaXMKICAgICAgICBhY3R1YWxseSBjaGVja2VkIGFuZCBub3Qgc2V0IGlmIGl0IGlzIGFscmVhZHkgYWNxdWlyZWQuICBUaGlzCiAgICAgICAgaXMgYWxsIGRvbmUgc28gdGhhdCB0aHJlYWRpbmcuQ29uZGl0aW9uJ3MgYXNzZXJ0IHN0YXRlbWVudHMKICAgICAgICBhcmVuJ3QgdHJpZ2dlcmVkIGFuZCB0aHJvdyBhIGxpdHRsZSBmaXQuCgogICAgICAgICIiIgogICAgICAgIGlmIHdhaXRmbGFnIGlzIE5vbmUgb3Igd2FpdGZsYWc6CiAgICAgICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IFRydWUKICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICAgICAgc2VsZi5sb2NrZWRfc3RhdHVzID0gVHJ1ZQogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIHRpbWVvdXQgPiAwOgogICAgICAgICAgICAgICAgICAgIGltcG9ydCB0aW1lCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCh0aW1lb3V0KQogICAgICAgICAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgX19lbnRlcl9fID0gYWNxdWlyZQoKICAgIGRlZiBfX2V4aXRfXyhzZWxmLCB0eXAsIHZhbCwgdGIpOgogICAgICAgIHNlbGYucmVsZWFzZSgpCgogICAgZGVmIHJlbGVhc2Uoc2VsZik6CiAgICAgICAgIiIiUmVsZWFzZSB0aGUgZHVtbXkgbG9jay4iIiIKICAgICAgICAjIFhYWCBQZXJoYXBzIHNob3VsZG4ndCBhY3R1YWxseSBib3RoZXIgdG8gdGVzdD8gIENvdWxkIGxlYWQKICAgICAgICAjICAgICB0byBwcm9ibGVtcyBmb3IgY29tcGxleCwgdGhyZWFkZWQgY29kZS4KICAgICAgICBpZiBub3Qgc2VsZi5sb2NrZWRfc3RhdHVzOgogICAgICAgICAgICByYWlzZSBlcnJvcgogICAgICAgIHNlbGYubG9ja2VkX3N0YXR1cyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgbG9ja2VkKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLmxvY2tlZF9zdGF0dXMKCiMgVXNlZCB0byBzaWduYWwgdGhhdCBpbnRlcnJ1cHRfbWFpbiB3YXMgY2FsbGVkIGluIGEgInRocmVhZCIKX2ludGVycnVwdCA9IEZhbHNlCiMgVHJ1ZSB3aGVuIG5vdCBleGVjdXRpbmcgaW4gYSAidGhyZWFkIgpfbWFpbiA9IFRydWUKCmRlZiBpbnRlcnJ1cHRfbWFpbigpOgogICAgIiIiU2V0IF9pbnRlcnJ1cHQgZmxhZyB0byBUcnVlIHRvIGhhdmUgc3RhcnRfbmV3X3RocmVhZCByYWlzZQogICAgS2V5Ym9hcmRJbnRlcnJ1cHQgdXBvbiBleGl0aW5nLiIiIgogICAgaWYgX21haW46CiAgICAgICAgcmFpc2UgS2V5Ym9hcmRJbnRlcnJ1cHQKICAgIGVsc2U6CiAgICAgICAgZ2xvYmFsIF9pbnRlcnJ1cHQKICAgICAgICBfaW50ZXJydXB0ID0gVHJ1ZQo=',
'/Lib/operator.py':'',
'/Lib/sys.py':'X19zdGRvdXRfXz1nZXRhdHRyKGRvYywiJHN0ZG91dCIpCl9fc3RkZXJyX189Z2V0YXR0cihkb2MsIiRzdGRlcnIiKQoKc3Rkb3V0ID0gZ2V0YXR0cihkb2MsIiRzdGRvdXQiKQpzdGRlcnIgPSBnZXRhdHRyKGRvYywiJHN0ZGVyciIpCgpoYXNfbG9jYWxfc3RvcmFnZT1fX0JSWVRIT05fXy5oYXNfbG9jYWxfc3RvcmFnZQpoYXNfanNvbj1fX0JSWVRIT05fXy5oYXNfanNvbgoKbW9kdWxlcyA9IF9fQlJZVEhPTl9fLmltcG9ydGVkCgphcmd2ID0gWydfX21haW5fXyddCgpjbGFzcyBfX3ZlcnNpb25faW5mbyhvYmplY3QpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHZlcnNpb25faW5mbyk6CiAgICAgICAgc2VsZi52ZXJzaW9uX2luZm8gPSB2ZXJzaW9uX2luZm8KICAgICAgICBzZWxmLm1ham9yID0gdmVyc2lvbl9pbmZvWzBdCiAgICAgICAgc2VsZi5taW5vciA9IHZlcnNpb25faW5mb1sxXQogICAgICAgIHNlbGYubWljcm8gPSB2ZXJzaW9uX2luZm9bMl0KICAgICAgICBzZWxmLnJlbGVhc2VsZXZlbCA9IHZlcnNpb25faW5mb1szXQogICAgICAgIHNlbGYuc2VyaWFsID0gdmVyc2lvbl9pbmZvWzRdCgogICAgZGVmIF9fZ2V0aXRlbV9fKHNlbGYsIGluZGV4KToKICAgICAgICByZXR1cm4gc2VsZi52ZXJzaW9uX2luZm9baW5kZXhdCgogICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgcmV0dXJuIHN0cihzZWxmLnZlcnNpb25faW5mbykKICAgICAKdmVyc2lvbl9pbmZvPV9fdmVyc2lvbl9pbmZvKF9fQlJZVEhPTl9fLnZlcnNpb25faW5mbykKcGF0aD1fX0JSWVRIT05fXy5wYXRoCmJ1aWx0aW5fbW9kdWxlX25hbWVzPVsncG9zaXgnXQoKYnl0ZW9yZGVyPSdsaXR0bGUnCm1heHNpemU9OTAwNzE5OTI1NDc0MDk5MiAgICNsYXJnZXN0IGludGVnZXIuLgptYXhpbnQ9OTAwNzE5OTI1NDc0MDk5MiAgICNsYXJnZXN0IGludGVnZXIuLgptYXh1bmljb2RlPTExMTQxMTEKCnBsYXRmb3JtPSJicnl0aG9uIgp3YXJub3B0aW9ucz1bXQoKY2xhc3MgZmxhZ19jbGFzczoKICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgIHNlbGYuZGVidWc9MAogICAgICBzZWxmLmluc3BlY3Q9MAogICAgICBzZWxmLmludGVyYWN0aXZlPTAKICAgICAgc2VsZi5vcHRpbWl6ZT0wCiAgICAgIHNlbGYuZG9udF93cml0ZV9ieXRlY29kZT0wCiAgICAgIHNlbGYubm9fdXNlcl9zaXRlPTAKICAgICAgc2VsZi5ub19zaXRlPTAKICAgICAgc2VsZi5pZ25vcmVfZW52aXJvbm1lbnQ9MAogICAgICBzZWxmLnZlcmJvc2U9MAogICAgICBzZWxmLmJ5dGVzX3dhcm5pbmc9MAogICAgICBzZWxmLnF1aWV0PTAKICAgICAgc2VsZi5oYXNoX3JhbmRvbWl6YXRpb249MQoKZmxhZ3M9ZmxhZ19jbGFzcygpCgo=',
'/Lib/io.py':'aW1wb3J0IGJ1aWx0aW5zCgpvcGVuID0gYnVpbHRpbnMub3BlbgoKY2xhc3MgU3RyaW5nSU86CgogICAgZGVmIF9faW5pdF9fKHNlbGYsaW5pdGlhbF92YWx1ZT0nJyxuZXdsaW5lPU5vbmUpOgogICAgICAgIHNlbGYudmFsdWUgPSBpbml0aWFsX3ZhbHVlCiAgICAgICAgc2VsZi5uZXdsaW5lID0gbmV3bGluZQogICAgICAgIHNlbGYuX3BvcyA9IGxlbihpbml0aWFsX3ZhbHVlKQogICAgCiAgICBkZWYgd3JpdGUoc2VsZixkYXRhKToKICAgICAgICBzZWxmLnZhbHVlICs9IGRhdGEKICAgIAogICAgZGVmIHJlYWQoc2VsZixuYj0tMSk6CiAgICAgICAgaWYgbmIhPS0xOgogICAgICAgICAgICByZXMgPSBzZWxmLnZhbHVlW3NlbGYuX3BvczpzZWxmLl9wb3MrbmJdCiAgICAgICAgICAgIHNlbGYuX3BvcyA9IG1pbihzZWxmLl9wb3MrbmIsbGVuKHNlbGYudmFsdWUpLTEpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmVzID0gc2VsZi52YWx1ZVtzZWxmLl9wb3M6XQogICAgICAgICAgICBzZWxmLl9wb3MgPSBsZW4oc2VsZi52YWx1ZSktMQogICAgICAgIHJldHVybiByZXMK',
'/Lib/os.py':'aW1wb3J0IF9vcwoKbmFtZT0iYnJ5dGhvbiIKCiNhbHRzZXA9Tm9uZQojY3VyZGlyPSIuIgoKZGVmIGRldm51bGwoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGRldm51bGwgbm90IHN1cHBvcnRlZCcpCgojZXh0c2VwPScuJwoKZGVmIGdldGxvYWRhdmcoKToKICAgIE9TRXJyb3IoJ0Z1bmN0aW9uIGdldGxvYWRhdmcgbm90IHN1cHBvcnRlZCcpCgojbGluZXNlcD0iXG4iCiNwYXRoc2VwPSI7IgojcGFyZGlyPSIuLiIKI3NlcD0nLycKCmRlZiB1cmFuZG9tKGxlbmd0aCk6CiAgICBfYz1bXQogICAgZm9yIF9pIGluIHJhbmdlKGxlbmd0aCk6CiAgICAgICAgX2MuYXBwZW5kKGNocihfb3MucmFuZGludCgwLDI1NSkpKQogICAgICAgIAogICAgcmV0dXJuICcnLmpvaW4oX2MpCgojaW1wb3J0IHBvc2l4cGF0aCBhcyBwYXRoCiNzeXMubW9kdWxlc1snb3MucGF0aCddID0gcGF0aAoKI2Zyb20gb3MucGF0aCBpbXBvcnQgKGN1cmRpciwgcGFyZGlyLCBzZXAsIHBhdGhzZXAsIGRlZnBhdGgsIGV4dHNlcCwgYWx0c2VwKQoKIyBQeXRob24gdXNlcyBmaXhlZCB2YWx1ZXMgZm9yIHRoZSBTRUVLXyBjb25zdGFudHM7IHRoZXkgYXJlIG1hcHBlZAojIHRvIG5hdGl2ZSBjb25zdGFudHMgaWYgbmVjZXNzYXJ5IGluIHBvc2l4bW9kdWxlLmMKU0VFS19TRVQgPSAwClNFRUtfQ1VSID0gMQpTRUVLX0VORCA9IDIKCmRlZiB3YWxrKHRvcCwgdG9wZG93bj1UcnVlLCBvbmVycm9yPU5vbmUsIGZvbGxvd2xpbmtzPUZhbHNlKToKICAgICNyZWNlaXZlIHNjb3BlIGVycm9yIGluIGJyeXRob24KICAgICMgd2h5IGhhdmUgb3Mud2FsayBpbiBicnl0aG9uPyAgc2VydmVyIHNpZGUgamF2YXNjcmlwdCAobm9kZWpzKQogICAgIyBpbW1lZGlhdGVseSBjYW4gdXNlIG9zLndhbGsgdG8gY29tcGlsZSBsaWJzIGFuZCBMaWIgbW9kdWxlcwogICAgIyB0byBqYXZhc2NyaXB0IGVxdWl2YWxlbnQuLgogICAgT1NFcnJvcignRnVuY3Rpb24gb3Mud2FsayBub3Qgc3VwcG9ydGVkIHlldCcpCiAgICByZXR1cm4KCiAgICAiIiJEaXJlY3RvcnkgdHJlZSBnZW5lcmF0b3IuCgogICAgRm9yIGVhY2ggZGlyZWN0b3J5IGluIHRoZSBkaXJlY3RvcnkgdHJlZSByb290ZWQgYXQgdG9wIChpbmNsdWRpbmcgdG9wCiAgICBpdHNlbGYsIGJ1dCBleGNsdWRpbmcgJy4nIGFuZCAnLi4nKSwgeWllbGRzIGEgMy10dXBsZQoKICAgICAgICBkaXJwYXRoLCBkaXJuYW1lcywgZmlsZW5hbWVzCgogICAgZGlycGF0aCBpcyBhIHN0cmluZywgdGhlIHBhdGggdG8gdGhlIGRpcmVjdG9yeS4gIGRpcm5hbWVzIGlzIGEgbGlzdCBvZgogICAgdGhlIG5hbWVzIG9mIHRoZSBzdWJkaXJlY3RvcmllcyBpbiBkaXJwYXRoIChleGNsdWRpbmcgJy4nIGFuZCAnLi4nKS4KICAgIGZpbGVuYW1lcyBpcyBhIGxpc3Qgb2YgdGhlIG5hbWVzIG9mIHRoZSBub24tZGlyZWN0b3J5IGZpbGVzIGluIGRpcnBhdGguCiAgICBOb3RlIHRoYXQgdGhlIG5hbWVzIGluIHRoZSBsaXN0cyBhcmUganVzdCBuYW1lcywgd2l0aCBubyBwYXRoIGNvbXBvbmVudHMuCiAgICBUbyBnZXQgYSBmdWxsIHBhdGggKHdoaWNoIGJlZ2lucyB3aXRoIHRvcCkgdG8gYSBmaWxlIG9yIGRpcmVjdG9yeSBpbgogICAgZGlycGF0aCwgZG8gb3MucGF0aC5qb2luKGRpcnBhdGgsIG5hbWUpLgoKICAgIElmIG9wdGlvbmFsIGFyZyAndG9wZG93bicgaXMgdHJ1ZSBvciBub3Qgc3BlY2lmaWVkLCB0aGUgdHJpcGxlIGZvciBhCiAgICBkaXJlY3RvcnkgaXMgZ2VuZXJhdGVkIGJlZm9yZSB0aGUgdHJpcGxlcyBmb3IgYW55IG9mIGl0cyBzdWJkaXJlY3RvcmllcwogICAgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgdG9wIGRvd24pLiAgSWYgdG9wZG93biBpcyBmYWxzZSwgdGhlIHRyaXBsZQogICAgZm9yIGEgZGlyZWN0b3J5IGlzIGdlbmVyYXRlZCBhZnRlciB0aGUgdHJpcGxlcyBmb3IgYWxsIG9mIGl0cwogICAgc3ViZGlyZWN0b3JpZXMgKGRpcmVjdG9yaWVzIGFyZSBnZW5lcmF0ZWQgYm90dG9tIHVwKS4KCiAgICBXaGVuIHRvcGRvd24gaXMgdHJ1ZSwgdGhlIGNhbGxlciBjYW4gbW9kaWZ5IHRoZSBkaXJuYW1lcyBsaXN0IGluLXBsYWNlCiAgICAoZS5nLiwgdmlhIGRlbCBvciBzbGljZSBhc3NpZ25tZW50KSwgYW5kIHdhbGsgd2lsbCBvbmx5IHJlY3Vyc2UgaW50byB0aGUKICAgIHN1YmRpcmVjdG9yaWVzIHdob3NlIG5hbWVzIHJlbWFpbiBpbiBkaXJuYW1lczsgdGhpcyBjYW4gYmUgdXNlZCB0byBwcnVuZQogICAgdGhlIHNlYXJjaCwgb3IgdG8gaW1wb3NlIGEgc3BlY2lmaWMgb3JkZXIgb2YgdmlzaXRpbmcuICBNb2RpZnlpbmcKICAgIGRpcm5hbWVzIHdoZW4gdG9wZG93biBpcyBmYWxzZSBpcyBpbmVmZmVjdGl2ZSwgc2luY2UgdGhlIGRpcmVjdG9yaWVzIGluCiAgICBkaXJuYW1lcyBoYXZlIGFscmVhZHkgYmVlbiBnZW5lcmF0ZWQgYnkgdGhlIHRpbWUgZGlybmFtZXMgaXRzZWxmIGlzCiAgICBnZW5lcmF0ZWQuCgogICAgQnkgZGVmYXVsdCBlcnJvcnMgZnJvbSB0aGUgb3MubGlzdGRpcigpIGNhbGwgYXJlIGlnbm9yZWQuICBJZgogICAgb3B0aW9uYWwgYXJnICdvbmVycm9yJyBpcyBzcGVjaWZpZWQsIGl0IHNob3VsZCBiZSBhIGZ1bmN0aW9uOyBpdAogICAgd2lsbCBiZSBjYWxsZWQgd2l0aCBvbmUgYXJndW1lbnQsIGFuIG9zLmVycm9yIGluc3RhbmNlLiAgSXQgY2FuCiAgICByZXBvcnQgdGhlIGVycm9yIHRvIGNvbnRpbnVlIHdpdGggdGhlIHdhbGssIG9yIHJhaXNlIHRoZSBleGNlcHRpb24KICAgIHRvIGFib3J0IHRoZSB3YWxrLiAgTm90ZSB0aGF0IHRoZSBmaWxlbmFtZSBpcyBhdmFpbGFibGUgYXMgdGhlCiAgICBmaWxlbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGV4Y2VwdGlvbiBvYmplY3QuCgogICAgQnkgZGVmYXVsdCwgb3Mud2FsayBkb2VzIG5vdCBmb2xsb3cgc3ltYm9saWMgbGlua3MgdG8gc3ViZGlyZWN0b3JpZXMgb24KICAgIHN5c3RlbXMgdGhhdCBzdXBwb3J0IHRoZW0uICBJbiBvcmRlciB0byBnZXQgdGhpcyBmdW5jdGlvbmFsaXR5LCBzZXQgdGhlCiAgICBvcHRpb25hbCBhcmd1bWVudCAnZm9sbG93bGlua3MnIHRvIHRydWUuCgogICAgQ2F1dGlvbjogIGlmIHlvdSBwYXNzIGEgcmVsYXRpdmUgcGF0aG5hbWUgZm9yIHRvcCwgZG9uJ3QgY2hhbmdlIHRoZQogICAgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSBiZXR3ZWVuIHJlc3VtcHRpb25zIG9mIHdhbGsuICB3YWxrIG5ldmVyCiAgICBjaGFuZ2VzIHRoZSBjdXJyZW50IGRpcmVjdG9yeSwgYW5kIGFzc3VtZXMgdGhhdCB0aGUgY2xpZW50IGRvZXNuJ3QKICAgIGVpdGhlci4KCiAgICBFeGFtcGxlOgoKICAgIGltcG9ydCBvcwogICAgZnJvbSBvcy5wYXRoIGltcG9ydCBqb2luLCBnZXRzaXplCiAgICBmb3Igcm9vdCwgZGlycywgZmlsZXMgaW4gb3Mud2FsaygncHl0aG9uL0xpYi9lbWFpbCcpOgogICAgICAgIHByaW50KHJvb3QsICJjb25zdW1lcyIsIGVuZD0iIikKICAgICAgICBwcmludChzdW0oW2dldHNpemUoam9pbihyb290LCBuYW1lKSkgZm9yIG5hbWUgaW4gZmlsZXNdKSwgZW5kPSIiKQogICAgICAgIHByaW50KCJieXRlcyBpbiIsIGxlbihmaWxlcyksICJub24tZGlyZWN0b3J5IGZpbGVzIikKICAgICAgICBpZiAnQ1ZTJyBpbiBkaXJzOgogICAgICAgICAgICBkaXJzLnJlbW92ZSgnQ1ZTJykgICMgZG9uJ3QgdmlzaXQgQ1ZTIGRpcmVjdG9yaWVzCiAgICAiIiIKICAgICIiIgogICAgCiAgICBpc2xpbmssIGpvaW4sIGlzZGlyID0gcGF0aC5pc2xpbmssIHBhdGguam9pbiwgcGF0aC5pc2RpcgoKICAgICMgV2UgbWF5IG5vdCBoYXZlIHJlYWQgcGVybWlzc2lvbiBmb3IgdG9wLCBpbiB3aGljaCBjYXNlIHdlIGNhbid0CiAgICAjIGdldCBhIGxpc3Qgb2YgdGhlIGZpbGVzIHRoZSBkaXJlY3RvcnkgY29udGFpbnMuICBvcy53YWxrCiAgICAjIGFsd2F5cyBzdXBwcmVzc2VkIHRoZSBleGNlcHRpb24gdGhlbiwgcmF0aGVyIHRoYW4gYmxvdyB1cCBmb3IgYQogICAgIyBtaW5vciByZWFzb24gd2hlbiAoc2F5KSBhIHRob3VzYW5kIHJlYWRhYmxlIGRpcmVjdG9yaWVzIGFyZSBzdGlsbAogICAgIyBsZWZ0IHRvIHZpc2l0LiAgVGhhdCBsb2dpYyBpcyBjb3BpZWQgaGVyZS4KICAgIHRyeToKICAgICAgICAjIE5vdGUgdGhhdCBsaXN0ZGlyIGFuZCBlcnJvciBhcmUgZ2xvYmFscyBpbiB0aGlzIG1vZHVsZSBkdWUKICAgICAgICAjIHRvIGVhcmxpZXIgaW1wb3J0LSouCiAgICAgICAgbmFtZXMgPSBsaXN0ZGlyKHRvcCkKICAgIGV4Y2VwdCBlcnJvciBhcyBlcnI6CiAgICAgICAgaWYgb25lcnJvciBpcyBub3QgTm9uZToKICAgICAgICAgICAgb25lcnJvcihlcnIpCiAgICAgICAgcmV0dXJuCiAgICAKICAgIGRpcnMsIG5vbmRpcnMgPSBbXSwgW10KICAgIGZvciBuYW1lIGluIG5hbWVzOgogICAgICAgIGlmIGlzZGlyKGpvaW4odG9wLCBuYW1lKSk6CiAgICAgICAgICAgIGRpcnMuYXBwZW5kKG5hbWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbm9uZGlycy5hcHBlbmQobmFtZSkKICAgIAogICAgaWYgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgIAogICAgZm9yIG5hbWUgaW4gZGlyczoKICAgICAgICBuZXdfcGF0aCA9IGpvaW4odG9wLCBuYW1lKQogICAgICAgIGlmIGZvbGxvd2xpbmtzIG9yIG5vdCBpc2xpbmsobmV3X3BhdGgpOgogICAgICAgICAgICBmb3IgeCBpbiB3YWxrKG5ld19wYXRoLCB0b3Bkb3duLCBvbmVycm9yLCBmb2xsb3dsaW5rcyk6CiAgICAgICAgICAgICAgICB5aWVsZCB4CiAgICBpZiBub3QgdG9wZG93bjoKICAgICAgICB5aWVsZCB0b3AsIGRpcnMsIG5vbmRpcnMKICAgICIiIgoKY2xhc3MgX3BhdGg6CgogICAgZGVmIGJhc2VuYW1lKHNlbGYsYXJnKToKICAgICAgICByZXR1cm4gYXJnCgpwYXRoID0gX3BhdGgoKQplbnZpcm9uID0ge30=',
'/Lib/browser/__init__.py':'ZnJvbSBfYnJvd3NlciBpbXBvcnQgKgppbXBvcnQgaHRtbAppbXBvcnQgYWpheAppbXBvcnQgd2Vic29ja2V0Cg==',
'/Lib/lib_migration/unittest/suite.py':'',
'/Lib/lib_migration/unittest/runner.py':'',
'/Lib/lib_migration/unittest/result.py':'',
'/Lib/lib_migration/unittest/__init__.py':'IiIiClB5dGhvbiB1bml0IHRlc3RpbmcgZnJhbWV3b3JrLCBiYXNlZCBvbiBFcmljaCBHYW1tYSdzIEpVbml0IGFuZCBLZW50IEJlY2sncwpTbWFsbHRhbGsgdGVzdGluZyBmcmFtZXdvcmsuCgpUaGlzIG1vZHVsZSBjb250YWlucyB0aGUgY29yZSBmcmFtZXdvcmsgY2xhc3NlcyB0aGF0IGZvcm0gdGhlIGJhc2lzIG9mCnNwZWNpZmljIHRlc3QgY2FzZXMgYW5kIHN1aXRlcyAoVGVzdENhc2UsIFRlc3RTdWl0ZSBldGMuKSwgYW5kIGFsc28gYQp0ZXh0LWJhc2VkIHV0aWxpdHkgY2xhc3MgZm9yIHJ1bm5pbmcgdGhlIHRlc3RzIGFuZCByZXBvcnRpbmcgdGhlIHJlc3VsdHMKIChUZXh0VGVzdFJ1bm5lcikuCgpTaW1wbGUgdXNhZ2U6CgogICAgaW1wb3J0IHVuaXR0ZXN0CgogICAgY2xhc3MgSW50ZWdlckFyaXRobWVudGljVGVzdENhc2UodW5pdHRlc3QuVGVzdENhc2UpOgogICAgICAgIGRlZiB0ZXN0QWRkKHNlbGYpOiAgIyMgdGVzdCBtZXRob2QgbmFtZXMgYmVnaW4gJ3Rlc3QqJwogICAgICAgICAgICBzZWxmLmFzc2VydEVxdWFsKCgxICsgMiksIDMpCiAgICAgICAgICAgIHNlbGYuYXNzZXJ0RXF1YWwoMCArIDEsIDEpCiAgICAgICAgZGVmIHRlc3RNdWx0aXBseShzZWxmKToKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoMCAqIDEwKSwgMCkKICAgICAgICAgICAgc2VsZi5hc3NlcnRFcXVhbCgoNSAqIDgpLCA0MCkKCiAgICBpZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgICAgIHVuaXR0ZXN0Lm1haW4oKQoKRnVydGhlciBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGJ1bmRsZWQgZG9jdW1lbnRhdGlvbiwgYW5kIGZyb20KCiAgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3VuaXR0ZXN0Lmh0bWwKCkNvcHlyaWdodCAoYykgMTk5OS0yMDAzIFN0ZXZlIFB1cmNlbGwKQ29weXJpZ2h0IChjKSAyMDAzLTIwMTAgUHl0aG9uIFNvZnR3YXJlIEZvdW5kYXRpb24KVGhpcyBtb2R1bGUgaXMgZnJlZSBzb2Z0d2FyZSwgYW5kIHlvdSBtYXkgcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUHl0aG9uIGl0c2VsZiwgc28gbG9uZyBhcyB0aGlzIGNvcHlyaWdodCBtZXNzYWdlCmFuZCBkaXNjbGFpbWVyIGFyZSByZXRhaW5lZCBpbiB0aGVpciBvcmlnaW5hbCBmb3JtLgoKSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgVE8gQU5ZIFBBUlRZIEZPUiBESVJFQ1QsIElORElSRUNULApTUEVDSUFMLCBJTkNJREVOVEFMLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgQVJJU0lORyBPVVQgT0YgVEhFIFVTRSBPRgpUSElTIENPREUsIEVWRU4gSUYgVEhFIEFVVEhPUiBIQVMgQkVFTiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNICkRBTUFHRS4KClRIRSBBVVRIT1IgU1BFQ0lGSUNBTExZIERJU0NMQUlNUyBBTlkgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UCkxJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBClBBUlRJQ1VMQVIgUFVSUE9TRS4gIFRIRSBDT0RFIFBST1ZJREVEIEhFUkVVTkRFUiBJUyBPTiBBTiAiQVMgSVMiIEJBU0lTLApBTkQgVEhFUkUgSVMgTk8gT0JMSUdBVElPTiBXSEFUU09FVkVSIFRPIFBST1ZJREUgTUFJTlRFTkFOQ0UsClNVUFBPUlQsIFVQREFURVMsIEVOSEFOQ0VNRU5UUywgT1IgTU9ESUZJQ0FUSU9OUy4KIiIiCgojX19hbGxfXyA9IFsnVGVzdFJlc3VsdCcsICdUZXN0Q2FzZScsICdUZXN0U3VpdGUnLAojICAgICAgICAgICAnVGV4dFRlc3RSdW5uZXInLCAnVGVzdExvYWRlcicsICdGdW5jdGlvblRlc3RDYXNlJywgJ21haW4nLAojICAgICAgICAgICAnZGVmYXVsdFRlc3RMb2FkZXInLCAnU2tpcFRlc3QnLCAnc2tpcCcsICdza2lwSWYnLCAnc2tpcFVubGVzcycsCiMgICAgICAgICAgICdleHBlY3RlZEZhaWx1cmUnLCAnVGV4dFRlc3RSZXN1bHQnLCAnaW5zdGFsbEhhbmRsZXInLAojICAgICAgICAgICAncmVnaXN0ZXJSZXN1bHQnLCAncmVtb3ZlUmVzdWx0JywgJ3JlbW92ZUhhbmRsZXInXQoKIyBFeHBvc2Ugb2Jzb2xldGUgZnVuY3Rpb25zIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eQojX19hbGxfXy5leHRlbmQoWydnZXRUZXN0Q2FzZU5hbWVzJywgJ21ha2VTdWl0ZScsICdmaW5kVGVzdENhc2VzJ10pCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKI2Zyb20gLnJlc3VsdCBpbXBvcnQgVGVzdFJlc3VsdAojZml4bWUgYnJ5dGhvbiBzeW50YXggZXJyb3IKZnJvbSAuY2FzZSBpbXBvcnQgVGVzdENhc2UKZnJvbSAubWFpbiBpbXBvcnQgVGVzdFByb2dyYW0sIG1haW4KI2Zyb20gLmNhc2UgaW1wb3J0IChUZXN0Q2FzZSwgRnVuY3Rpb25UZXN0Q2FzZSwgU2tpcFRlc3QsIHNraXAsIHNraXBJZiwKIyAgICAgICAgICAgICAgICAgICBza2lwVW5sZXNzLCBleHBlY3RlZEZhaWx1cmUpCiNmcm9tIC5zdWl0ZSBpbXBvcnQgQmFzZVRlc3RTdWl0ZSwgVGVzdFN1aXRlCmZyb20gLmxvYWRlciBpbXBvcnQgKFRlc3RMb2FkZXIsIGRlZmF1bHRUZXN0TG9hZGVyLCBtYWtlU3VpdGUsIGdldFRlc3RDYXNlTmFtZXMsCiAgICAgICAgICAgICAgICAgICAgIGZpbmRUZXN0Q2FzZXMpCiNmcm9tIC5tYWluIGltcG9ydCBUZXN0UHJvZ3JhbSwgbWFpbgojZnJvbSAucnVubmVyIGltcG9ydCBUZXh0VGVzdFJ1bm5lciwgVGV4dFRlc3RSZXN1bHQKI2Zyb20gLnNpZ25hbHMgaW1wb3J0IGluc3RhbGxIYW5kbGVyLCByZWdpc3RlclJlc3VsdCwgcmVtb3ZlUmVzdWx0LCByZW1vdmVIYW5kbGVyCgojIGRlcHJlY2F0ZWQKI19UZXh0VGVzdFJlc3VsdCA9IFRleHRUZXN0UmVzdWx0Cg==',
'/Lib/lib_migration/unittest/__main__.py':'IiIiTWFpbiBlbnRyeSBwb2ludCIiIgoKaW1wb3J0IHN5cwppZiBzeXMuYXJndlswXS5lbmRzd2l0aCgiX19tYWluX18ucHkiKToKICAgIHN5cy5hcmd2WzBdID0gInB5dGhvbiAtbSB1bml0dGVzdCIKCl9fdW5pdHRlc3QgPSBUcnVlCgpmcm9tIC5tYWluIGltcG9ydCBtYWluLCBUZXN0UHJvZ3JhbSwgVVNBR0VfQVNfTUFJTgpUZXN0UHJvZ3JhbS5VU0FHRSA9IFVTQUdFX0FTX01BSU4KCm1haW4obW9kdWxlPU5vbmUpCg==',
'/Lib/lib_migration/unittest/util.py':'IyAiVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9ucy4iCgojZml4bWUsIGJyeXRob24sIG5lZWQgdG8gZml4IG5hbWVkdHVwbGUKI2Zyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUsIE9yZGVyZWREaWN0CmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IE9yZGVyZWREaWN0CgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKX01BWF9MRU5HVEggPSA4MApkZWYgc2FmZV9yZXByKG9iaiwgc2hvcnQ9RmFsc2UpOgogICAgdHJ5OgogICAgICAgIHJlc3VsdCA9IHJlcHIob2JqKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICByZXN1bHQgPSBvYmplY3QuX19yZXByX18ob2JqKQogICAgaWYgbm90IHNob3J0IG9yIGxlbihyZXN1bHQpIDwgX01BWF9MRU5HVEg6CiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgcmV0dXJuIHJlc3VsdFs6X01BWF9MRU5HVEhdICsgJyBbdHJ1bmNhdGVkXS4uLicKCmRlZiBzdHJjbGFzcyhjbHMpOgogICAgcmV0dXJuICIlcy4lcyIgJSAoY2xzLl9fbW9kdWxlX18sIGNscy5fX25hbWVfXykKCmRlZiBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiRmluZHMgZWxlbWVudHMgaW4gb25seSBvbmUgb3IgdGhlIG90aGVyIG9mIHR3bywgc29ydGVkIGlucHV0IGxpc3RzLgoKICAgIFJldHVybnMgYSB0d28tZWxlbWVudCB0dXBsZSBvZiBsaXN0cy4gICAgVGhlIGZpcnN0IGxpc3QgY29udGFpbnMgdGhvc2UKICAgIGVsZW1lbnRzIGluIHRoZSAiZXhwZWN0ZWQiIGxpc3QgYnV0IG5vdCBpbiB0aGUgImFjdHVhbCIgbGlzdCwgYW5kIHRoZQogICAgc2Vjb25kIGNvbnRhaW5zIHRob3NlIGVsZW1lbnRzIGluIHRoZSAiYWN0dWFsIiBsaXN0IGJ1dCBub3QgaW4gdGhlCiAgICAiZXhwZWN0ZWQiIGxpc3QuICAgIER1cGxpY2F0ZSBlbGVtZW50cyBpbiBlaXRoZXIgaW5wdXQgbGlzdCBhcmUgaWdub3JlZC4KICAgICIiIgogICAgaSA9IGogPSAwCiAgICBtaXNzaW5nID0gW10KICAgIHVuZXhwZWN0ZWQgPSBbXQogICAgd2hpbGUgVHJ1ZToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGUgPSBleHBlY3RlZFtpXQogICAgICAgICAgICBhID0gYWN0dWFsW2pdCiAgICAgICAgICAgIGlmIGUgPCBhOgogICAgICAgICAgICAgICAgbWlzc2luZy5hcHBlbmQoZSkKICAgICAgICAgICAgICAgIGkgKz0gMQogICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICBpICs9IDEKICAgICAgICAgICAgZWxpZiBlID4gYToKICAgICAgICAgICAgICAgIHVuZXhwZWN0ZWQuYXBwZW5kKGEpCiAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgZXhwZWN0ZWRbaV0gPT0gZToKICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxCiAgICAgICAgICAgICAgICBmaW5hbGx5OgogICAgICAgICAgICAgICAgICAgIGogKz0gMQogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFjdHVhbFtqXSA9PSBhOgogICAgICAgICAgICAgICAgICAgICAgICBqICs9IDEKICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICAgICAgbWlzc2luZy5leHRlbmQoZXhwZWN0ZWRbaTpdKQogICAgICAgICAgICB1bmV4cGVjdGVkLmV4dGVuZChhY3R1YWxbajpdKQogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIG1pc3NpbmcsIHVuZXhwZWN0ZWQKCgpkZWYgdW5vcmRlcmFibGVfbGlzdF9kaWZmZXJlbmNlKGV4cGVjdGVkLCBhY3R1YWwpOgogICAgIiIiU2FtZSBiZWhhdmlvciBhcyBzb3J0ZWRfbGlzdF9kaWZmZXJlbmNlIGJ1dAogICAgZm9yIGxpc3RzIG9mIHVub3JkZXJhYmxlIGl0ZW1zIChsaWtlIGRpY3RzKS4KCiAgICBBcyBpdCBkb2VzIGEgbGluZWFyIHNlYXJjaCBwZXIgaXRlbSAocmVtb3ZlKSBpdAogICAgaGFzIE8obipuKSBwZXJmb3JtYW5jZS4iIiIKICAgIG1pc3NpbmcgPSBbXQogICAgd2hpbGUgZXhwZWN0ZWQ6CiAgICAgICAgaXRlbSA9IGV4cGVjdGVkLnBvcCgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhY3R1YWwucmVtb3ZlKGl0ZW0pCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIG1pc3NpbmcuYXBwZW5kKGl0ZW0pCgogICAgIyBhbnl0aGluZyBsZWZ0IGluIGFjdHVhbCBpcyB1bmV4cGVjdGVkCiAgICByZXR1cm4gbWlzc2luZywgYWN0dWFsCgojZGVmIHRocmVlX3dheV9jbXAoeCwgeSk6CiMgICAgIiIiUmV0dXJuIC0xIGlmIHggPCB5LCAwIGlmIHggPT0geSBhbmQgMSBpZiB4ID4geSIiIgojICAgIHJldHVybiAoeCA+IHkpIC0gKHggPCB5KQoKIyBmaXhtZSwgYnJ5dGhvbgojbmFtZWR0dXBsZSBpc3N1ZXMgaW4gY29sbGVjdGlvbnMucHkKI19NaXNtYXRjaCA9IG5hbWVkdHVwbGUoJ01pc21hdGNoJywgJ2FjdHVhbCBleHBlY3RlZCB2YWx1ZScpCgpkZWYgX2NvdW50X2RpZmZfYWxsX3B1cnBvc2UoYWN0dWFsLCBleHBlY3RlZCk6CiAgICAnUmV0dXJucyBsaXN0IG9mIChjbnRfYWN0LCBjbnRfZXhwLCBlbGVtKSB0cmlwbGVzIHdoZXJlIHRoZSBjb3VudHMgZGlmZmVyJwogICAgIyBlbGVtZW50cyBuZWVkIG5vdCBiZSBoYXNoYWJsZQogICAgcywgdCA9IGxpc3QoYWN0dWFsKSwgbGlzdChleHBlY3RlZCkKICAgIG0sIG4gPSBsZW4ocyksIGxlbih0KQogICAgTlVMTCA9IG9iamVjdCgpCiAgICByZXN1bHQgPSBbXQogICAgZm9yIGksIGVsZW0gaW4gZW51bWVyYXRlKHMpOgogICAgICAgIGlmIGVsZW0gaXMgTlVMTDoKICAgICAgICAgICAgY29udGludWUKICAgICAgICBjbnRfcyA9IGNudF90ID0gMAogICAgICAgIGZvciBqIGluIHJhbmdlKGksIG0pOgogICAgICAgICAgICBpZiBzW2pdID09IGVsZW06CiAgICAgICAgICAgICAgICBjbnRfcyArPSAxCiAgICAgICAgICAgICAgICBzW2pdID0gTlVMTAogICAgICAgIGZvciBqLCBvdGhlcl9lbGVtIGluIGVudW1lcmF0ZSh0KToKICAgICAgICAgICAgaWYgb3RoZXJfZWxlbSA9PSBlbGVtOgogICAgICAgICAgICAgICAgY250X3QgKz0gMQogICAgICAgICAgICAgICAgdFtqXSA9IE5VTEwKICAgICAgICBpZiBjbnRfcyAhPSBjbnRfdDoKICAgICAgICAgICAgZGlmZiA9IF9NaXNtYXRjaChjbnRfcywgY250X3QsIGVsZW0pCiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZGlmZikKCiAgICBmb3IgaSwgZWxlbSBpbiBlbnVtZXJhdGUodCk6CiAgICAgICAgaWYgZWxlbSBpcyBOVUxMOgogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGNudF90ID0gMAogICAgICAgIGZvciBqIGluIHJhbmdlKGksIG4pOgogICAgICAgICAgICBpZiB0W2pdID09IGVsZW06CiAgICAgICAgICAgICAgICBjbnRfdCArPSAxCiAgICAgICAgICAgICAgICB0W2pdID0gTlVMTAogICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goMCwgY250X3QsIGVsZW0pCiAgICAgICAgcmVzdWx0LmFwcGVuZChkaWZmKQogICAgcmV0dXJuIHJlc3VsdAoKZGVmIF9vcmRlcmVkX2NvdW50KGl0ZXJhYmxlKToKICAgICdSZXR1cm4gZGljdCBvZiBlbGVtZW50IGNvdW50cywgaW4gdGhlIG9yZGVyIHRoZXkgd2VyZSBmaXJzdCBzZWVuJwogICAgYyA9IE9yZGVyZWREaWN0KCkKICAgIGZvciBlbGVtIGluIGl0ZXJhYmxlOgogICAgICAgIGNbZWxlbV0gPSBjLmdldChlbGVtLCAwKSArIDEKICAgIHJldHVybiBjCgpkZWYgX2NvdW50X2RpZmZfaGFzaGFibGUoYWN0dWFsLCBleHBlY3RlZCk6CiAgICAnUmV0dXJucyBsaXN0IG9mIChjbnRfYWN0LCBjbnRfZXhwLCBlbGVtKSB0cmlwbGVzIHdoZXJlIHRoZSBjb3VudHMgZGlmZmVyJwogICAgIyBlbGVtZW50cyBtdXN0IGJlIGhhc2hhYmxlCiAgICBzLCB0ID0gX29yZGVyZWRfY291bnQoYWN0dWFsKSwgX29yZGVyZWRfY291bnQoZXhwZWN0ZWQpCiAgICByZXN1bHQgPSBbXQogICAgZm9yIGVsZW0sIGNudF9zIGluIHMuaXRlbXMoKToKICAgICAgICBjbnRfdCA9IHQuZ2V0KGVsZW0sIDApCiAgICAgICAgaWYgY250X3MgIT0gY250X3Q6CiAgICAgICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goY250X3MsIGNudF90LCBlbGVtKQogICAgICAgICAgICByZXN1bHQuYXBwZW5kKGRpZmYpCiAgICBmb3IgZWxlbSwgY250X3QgaW4gdC5pdGVtcygpOgogICAgICAgIGlmIGVsZW0gbm90IGluIHM6CiAgICAgICAgICAgIGRpZmYgPSBfTWlzbWF0Y2goMCwgY250X3QsIGVsZW0pCiAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQoZGlmZikKICAgIHJldHVybiByZXN1bHQK',
'/Lib/lib_migration/unittest/loader.py':'',
'/Lib/lib_migration/unittest/signals.py':'aW1wb3J0IHNpZ25hbAppbXBvcnQgd2Vha3JlZgoKZnJvbSBmdW5jdG9vbHMgaW1wb3J0IHdyYXBzCgpfX3VuaXR0ZXN0ID0gVHJ1ZQoKCmNsYXNzIF9JbnRlcnJ1cHRIYW5kbGVyKG9iamVjdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGVmYXVsdF9oYW5kbGVyKToKICAgICAgICBzZWxmLmNhbGxlZCA9IEZhbHNlCiAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIgPSBkZWZhdWx0X2hhbmRsZXIKCiAgICBkZWYgX19jYWxsX18oc2VsZiwgc2lnbnVtLCBmcmFtZSk6CiAgICAgICAgaW5zdGFsbGVkX2hhbmRsZXIgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgaWYgaW5zdGFsbGVkX2hhbmRsZXIgaXMgbm90IHNlbGY6CiAgICAgICAgICAgICMgaWYgd2UgYXJlbid0IHRoZSBpbnN0YWxsZWQgaGFuZGxlciwgdGhlbiBkZWxlZ2F0ZSBpbW1lZGlhdGVseQogICAgICAgICAgICAjIHRvIHRoZSBkZWZhdWx0IGhhbmRsZXIKICAgICAgICAgICAgc2VsZi5kZWZhdWx0X2hhbmRsZXIoc2lnbnVtLCBmcmFtZSkKCiAgICAgICAgaWYgc2VsZi5jYWxsZWQ6CiAgICAgICAgICAgIHNlbGYuZGVmYXVsdF9oYW5kbGVyKHNpZ251bSwgZnJhbWUpCiAgICAgICAgc2VsZi5jYWxsZWQgPSBUcnVlCiAgICAgICAgZm9yIHJlc3VsdCBpbiBfcmVzdWx0cy5rZXlzKCk6CiAgICAgICAgICAgIHJlc3VsdC5zdG9wKCkKCl9yZXN1bHRzID0gd2Vha3JlZi5XZWFrS2V5RGljdGlvbmFyeSgpCmRlZiByZWdpc3RlclJlc3VsdChyZXN1bHQpOgogICAgX3Jlc3VsdHNbcmVzdWx0XSA9IDEKCmRlZiByZW1vdmVSZXN1bHQocmVzdWx0KToKICAgIHJldHVybiBib29sKF9yZXN1bHRzLnBvcChyZXN1bHQsIE5vbmUpKQoKX2ludGVycnVwdF9oYW5kbGVyID0gTm9uZQpkZWYgaW5zdGFsbEhhbmRsZXIoKToKICAgIGdsb2JhbCBfaW50ZXJydXB0X2hhbmRsZXIKICAgIGlmIF9pbnRlcnJ1cHRfaGFuZGxlciBpcyBOb25lOgogICAgICAgIGRlZmF1bHRfaGFuZGxlciA9IHNpZ25hbC5nZXRzaWduYWwoc2lnbmFsLlNJR0lOVCkKICAgICAgICBfaW50ZXJydXB0X2hhbmRsZXIgPSBfSW50ZXJydXB0SGFuZGxlcihkZWZhdWx0X2hhbmRsZXIpCiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIpCgoKZGVmIHJlbW92ZUhhbmRsZXIobWV0aG9kPU5vbmUpOgogICAgaWYgbWV0aG9kIGlzIG5vdCBOb25lOgogICAgICAgIEB3cmFwcyhtZXRob2QpCiAgICAgICAgZGVmIGlubmVyKCphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIGluaXRpYWwgPSBzaWduYWwuZ2V0c2lnbmFsKHNpZ25hbC5TSUdJTlQpCiAgICAgICAgICAgIHJlbW92ZUhhbmRsZXIoKQogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICByZXR1cm4gbWV0aG9kKCphcmdzLCAqKmt3YXJncykKICAgICAgICAgICAgZmluYWxseToKICAgICAgICAgICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW5pdGlhbCkKICAgICAgICByZXR1cm4gaW5uZXIKCiAgICBnbG9iYWwgX2ludGVycnVwdF9oYW5kbGVyCiAgICBpZiBfaW50ZXJydXB0X2hhbmRsZXIgaXMgbm90IE5vbmU6CiAgICAgICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBfaW50ZXJydXB0X2hhbmRsZXIuZGVmYXVsdF9oYW5kbGVyKQo=',
'/Lib/lib_migration/unittest/case.py':'',
'/Lib/lib_migration/unittest/main.py':'',
'/Lib/ui/progressbar.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFByb2dyZXNzQmFyKFdpZGdldC5XaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWNvcm5lci1hbGwiKQogICAgICBXaWRnZXQuV2lkZ2V0Ll9faW5pdF9fKHNlbGYsIHNlbGYuX2Rpdl9zaGVsbCwgJ3Byb2dyZXNzYmFyJywgaWQpCgogICAgICBzZWxmLl9zaG93X2xhYmVsPWxhYmVsCiAgICAgIGlmIGxhYmVsOgogICAgICAgICBzZWxmLl9sYWJlbD1odG1sLkRJVihDbGFzcz0ncHJvZ3Jlc3MtbGFiZWwnKQogICAgICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fbGFiZWwKCiAgICAgIHNlbGYuX2Jhcj1odG1sLkRJVihDbGFzcz0idWktcHJvZ3Jlc3NiYXItdmFsdWUgdWktd2lkZ2V0LWhlYWRlciB1aS1jb3JuZXItbGVmdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17J3dpZHRoJzogJzBweCd9KQogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5fYmFyCgogIGRlZiBzZXRfcHJvZ3Jlc3Moc2VsZiwgcGVyY2VudCk6CiAgICAgIHNlbGYuX2Jhci5zdHlsZS53aWR0aD0nJXMlJScgJSBwZXJjZW50CiAgICAgIGlmIHNlbGYuX3Nob3dfbGFiZWw6CiAgICAgICAgIHNlbGYuX2xhYmVsLnRleHQ9JyVzJSUnICUgcGVyY2VudAo=',
'/Lib/ui/Widget.py':'aW1wb3J0IHJhbmRvbQpmcm9tIGJyb3dzZXIgaW1wb3J0IGRvYyBhcyBkb2N1bWVudCAgIyA6KCBkb2N1bWVudCBkb2Vzbid0IHdvcmsKCmRlZiBnZXRNb3VzZVBvc2l0aW9uKGUpOgogICAgaWYgZSBpcyBOb25lOgogICAgICAgZT13aW4uZXZlbnQKCiAgICBpZiBlLnBhZ2VYIG9yIGUucGFnZVk6CiAgICAgICByZXR1cm4geyd4JzogZS5wYWdlWCwgJ3knOiBlLnBhZ2VZfQoKICAgIGlmIGUuY2xpZW50WCBvciBlLmNsaWVudFk6CiAgICAgICBfcG9zeD1lLmNsaWVudFggKyBkb2MuYm9keS5zY3JvbGxMZWZ0ICsgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0OwogICAgICAgX3Bvc3k9ZS5jbGllbnRZICsgZG9jLmJvZHkuc2Nyb2xsVG9wICsgZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7CiAgICAgICByZXR1cm4geyd4JzogX3Bvc3gsICd5JzogX3Bvc3l9CiAgICAgIAogICAgcmV0dXJuIHsneCc6IDAsICd5JzogMH0KCmNsYXNzIFdpZGdldDoKICBkZWYgX19pbml0X18oc2VsZiwgZWxlbWVudCwgdHlwZSwgaWQ9Tm9uZSk6CiAgICAgIHNlbGYuX2VsZW1lbnQ9ZWxlbWVudAoKICAgICAgaWYgaWQgaXMgTm9uZToKICAgICAgICAgc2VsZi5fZWxlbWVudC5pZD0nJXNfJXMnICUgKHR5cGUsIGludCgxMDAwMDAqcmFuZG9tLnJhbmRvbSgpKSkKICAgICAgZWxzZToKICAgICAgICAgc2VsZi5fZWxlbWVudC5pZD1pZAoKICBkZWYgZ2V0X2lkKHNlbGYpOgogICAgICByZXR1cm4gc2VsZi5fZWxlbWVudC5pZAoKICBkZWYgYXR0YWNoKHNlbGYsIGVsZW1lbnRfaWQpOgogICAgICAiIiIgYXBwZW5kIHRoaXMgRE9NIGNvbXBvbmVudCB0byBET00gZWxlbWVudCBlbGVtZW50X2lkIiIiCiAgICAgICNkb2N1bWVudFtlbGVtZW50X2lkXSA8PSBzZWxmLl9lbGVtZW50ICAgI3RoaXMgZG9lc24ndCB3b3JrIDooCiAgICAgICNkb2MgaXMgYWN0dWFsbHkgdGhlIGdsb2JhbCAnZG9jJyBub3QgdGhlIG9uZSB3ZSBpbXBvcnRlZCBmcm9tIGJyb3dzZXIgOigKICAgICAgZG9jW2VsZW1lbnRfaWRdIDw9IHNlbGYuX2VsZW1lbnQKCiAgZGVmIHNob3coc2VsZik6CiAgICAgIHNlbGYuX2VsZW1lbnQuZGlzcGxheT0nYmxvY2snCgogIGRlZiBoaWRlKHNlbGYpOgogICAgICBzZWxmLl9lbGVtZW50LmRpc3BsYXk9J25vbmUnCgpjbGFzcyBEcmFnZ2FibGVXaWRnZXQoV2lkZ2V0KToKICBkZWYgX19pbml0X18oc2VsZiwgZWxlbWVudCwgdHlwZSwgaWQ9Tm9uZSk6CiAgICAgIFdpZGdldC5fX2luaXRfXyhzZWxmLCBlbGVtZW50LCB0eXBlLCBpZCkKCiAgICAgIGRlZiBkcmFnKGUpOgogICAgICAgICAgc2VsZi5fZWxlbWVudC5zdHlsZS50b3A9JyVzcHgnICUgKGUuY2xpZW50WSAtIHNlbGYuX2RlbHRhWSkKICAgICAgICAgIHNlbGYuX2VsZW1lbnQuc3R5bGUubGVmdD0nJXNweCcgJSAoZS5jbGllbnRYIC0gc2VsZi5fZGVsdGFYKQoKICAgICAgZGVmIG1vdXNlRG93bihlKToKICAgICAgICAgIHNlbGYuX2VsZW1lbnQuc3R5bGUucG9zaXRpb249J2Fic29sdXRlJwogICAgICAgICAgc2VsZi5fZGVsdGFYPWUuY2xpZW50WCAtIHNlbGYuX2VsZW1lbnQub2Zmc2V0TGVmdAogICAgICAgICAgc2VsZi5fZGVsdGFZPWUuY2xpZW50WSAtIHNlbGYuX2VsZW1lbnQub2Zmc2V0VG9wCiAgICAgICAgICBkb2MuYmluZCgnbW91c2Vtb3ZlJywgZHJhZykKCiAgICAgIGRlZiBtb3VzZVVwKGUpOgogICAgICAgICAgZG9jLnVuYmluZCgnbW91c2Vtb3ZlJykKCiAgICAgIHNlbGYuX2VsZW1lbnQuYmluZCgnbW91c2Vkb3duJywgbW91c2VEb3duKQogICAgICBzZWxmLl9lbGVtZW50LmJpbmQoJ21vdXNldXAnLCBtb3VzZVVwKQo=',
'/Lib/ui/slider.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwKCmNsYXNzIFNsaWRlcihXaWRnZXQuV2lkZ2V0KToKICBkZWYgX19pbml0X18oc2VsZiwgaWQ9Tm9uZSwgZG9jdW1lbnQ9ZG9jLCBsYWJlbD1GYWxzZSk6CiAgICAgIHNlbGYuX2Rpdl9zaGVsbD1odG1sLkRJVihDbGFzcz0idWktc2xpZGVyIHVpLXNsaWRlci1ob3Jpem9udGFsIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIikKCiAgICAgIFdpZGdldC5XaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnc2xpZGVyJywgaWQpCgogICAgICBzZWxmLl9oYW5kbGU9aHRtbC5BKENsYXNzPSJ1aS1zbGlkZXItaGFuZGxlIHVpLXN0YXRlLWRlZmF1bHQgdWktY29ybmVyLWFsbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgSHJlZj0nIycsIHN0eWxlPXsnbGVmdCc6ICcwcHgnfSkKICAgICAgc2VsZi5fdmFsdWU9MAogICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQoKICAgICAgZGVmIHN0YXJ0U2xpZGUoZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1UcnVlCiAgICAgICAgICBzZWxmLl91cHBlckJvdW5kID0gc2VsZi5fZGl2X3NoZWxsLm9mZnNldFdpZHRoIC0gc2VsZi5faGFuZGxlLm9mZnNldFdpZHRoCgogICAgICAgICAgcG9zID0gV2lkZ2V0LmdldE1vdXNlUG9zaXRpb24oZSkKICAgICAgICAgIHNlbGYuX3N0YXJ0TW91c2VYPXBvc1sneCddCgogICAgICAgICAgc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ID0gcGFyc2VJbnQoc2VsZi5faGFuZGxlLmVsdC5zdHlsZS5sZWZ0KSAjLSBwYXJzZUludChzZWxmLl9kaXZfc2hlbGwuZWx0LnN0eWxlLmxlZnQpCiAgICAgICAgICAjcHJpbnQoc2VsZi5fdXBwZXJCb3VuZCkKICAgICAgICAgIHVwZGF0ZVBvc2l0aW9uKGUpCgogICAgICBkZWYgdXBkYXRlUG9zaXRpb24oZSk6CiAgICAgICAgICBwb3MgPSBXaWRnZXQuZ2V0TW91c2VQb3NpdGlvbihlKQogICAgICAgICAgX25ld1BvcyA9IHNlbGYuX2xhc3RFbGVtZW50TGVmdCArIHBvc1sneCddIC0gc2VsZi5fc3RhcnRNb3VzZVgKICAgICAgICAgIAogICAgICAgICAgX25ld1BvcyA9IG1heCgwLCBfbmV3UG9zKQogICAgICAgICAgX25ld1BvcyA9IG1pbihfbmV3UG9zLCBzZWxmLl91cHBlckJvdW5kKQoKICAgICAgICAgICNwcmludChfbmV3UG9zKQogICAgICAgICAgc2VsZi5faGFuZGxlLmVsdC5zdHlsZS5sZWZ0ID0gJyVzcHgnICUgX25ld1BvcwogICAgICAgICAgc2VsZi5fbGFzdEVsZW1lbnRMZWZ0ID0gX25ld1BvcwoKICAgICAgZGVmIG1vdmluZyhlKToKICAgICAgICAgIGlmIHNlbGYuX2lzTW91c2VEb3duOgogICAgICAgICAgICAgdXBkYXRlUG9zaXRpb24oZSkKCiAgICAgIGRlZiBkcm9wQ2FsbGJhY2soZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQogICAgICAgICAgc2VsZi5faGFuZGxlLnVuYmluZCgnbW91c2Vtb3ZlJywgbW92aW5nKQoKCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZW1vdmUnLCBtb3ZpbmcpCiAgICAgIHNlbGYuX2hhbmRsZS5iaW5kKCdtb3VzZXVwJywgZHJvcENhbGxiYWNrKQogICAgICAjc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3V0JywgZHJvcENhbGxiYWNrKQogICAgICBzZWxmLl9oYW5kbGUuYmluZCgnbW91c2Vkb3duJywgc3RhcnRTbGlkZSkKCiAgICAgIGRlZiBtb3VzZW92ZXIoZSk6CiAgICAgICAgICBfY2xhc3M9c2VsZi5faGFuZGxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKQogICAgICAgICAgc2VsZi5faGFuZGxlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnJXMgJXMnICUgKF9jbGFzcywgJ3VpLXN0YXRlLWhvdmVyJykpCgogICAgICBkZWYgbW91c2VvdXQoZSk6CiAgICAgICAgICBzZWxmLl9pc01vdXNlRG93bj1GYWxzZQogICAgICAgICAgX2NsYXNzPXNlbGYuX2hhbmRsZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykKICAgICAgICAgIHNlbGYuX2hhbmRsZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgX2NsYXNzLnJlcGxhY2UoJ3VpLXN0YXRlLWhvdmVyJywgJycpKQoKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3ZlcicsIG1vdXNlb3ZlcikKICAgICAgc2VsZi5faGFuZGxlLmJpbmQoJ21vdXNlb3V0JywgbW91c2VvdXQpCgogICAgICBzZWxmLl9kaXZfc2hlbGwgPD0gc2VsZi5faGFuZGxlCgogIGRlZiBnZXRfdmFsdWUoc2VsZik6CiAgICAgIHJldHVybiBzZWxmLl92YWx1ZQoKICAjZGVmIHNldF92YWx1ZShzZWxmLCB2YWx1ZSk6CiAgIyAgICBzZWxmLl92YWx1ZT12YWx1ZQogICMgICBzZWxmLl9oYW5kbGUuc3R5bGUubGVmdD0nJXNweCcgJSB2YWx1ZQo=',
'/Lib/ui/__init__.py':'ZnJvbSBicm93c2VyIGltcG9ydCBodG1sLCBkb2MgYXMgZG9jdW1lbnQKZnJvbSBEaWFsb2cgaW1wb3J0ICoKZnJvbSBQcm9ncmVzc0JhciBpbXBvcnQgKgpmcm9tIFNsaWRlciBpbXBvcnQgKgoKZGVmIGFkZF9zdHlsZXNoZWV0KCk6CiAgICBfbGluaz1odG1sLkxJTksoSHJlZj0nL3NyYy9MaWIvdWkvY3NzL3Ntb290aG5lc3MvanF1ZXJ5LXVpLTEuMTAuMy5jdXN0b20ubWluLmNzcycpCiAgICBfbGluay5yZWw9J3N0eWxlc2hlZXQnCgogICAgZG9jIDw9IF9saW5rICAgICAjIGRvY3VtZW50IGRvZXNuJ3Qgd29yayBoZXJlLi4gOiggbXVzdCB1c2UgZG9jIAo=',
'/Lib/ui/dialog.py':'aW1wb3J0IFdpZGdldApmcm9tIGJyb3dzZXIgaW1wb3J0IGh0bWwsIGRvYyBhcyBkb2N1bWVudAoKY2xhc3MgRGlhbG9nKFdpZGdldC5EcmFnZ2FibGVXaWRnZXQpOgogIGRlZiBfX2luaXRfXyhzZWxmLCBpZD1Ob25lKToKICAgICAgc2VsZi5fZGl2X3NoZWxsPWh0bWwuRElWKAogICAgICAgICBDbGFzcz0idWktZGlhbG9nIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1jb3JuZXItYWxsIHVpLWZyb250IHVpLWRyYWdnYWJsZSB1aS1yZXNpemFibGUiLAogICAgICAgICBzdHlsZT17J3Bvc2l0aW9uJzogJ2Fic29sdXRlJywgJ2hlaWdodCc6ICdhdXRvJywgJ3dpZHRoJzogJzMwMHB4JywKICAgICAgICAgICAgICAgICd0b3AnOiAnOThweCcsICdsZWZ0JzogJzE0MHB4JywgJ2Rpc3BsYXknOiAnYmxvY2snfSkKCiAgICAgIFdpZGdldC5EcmFnZ2FibGVXaWRnZXQuX19pbml0X18oc2VsZiwgc2VsZi5fZGl2X3NoZWxsLCAnZGlhbG9nJywgaWQpCgogICAgICBfZGl2X3RpdGxlYmFyPWh0bWwuRElWKElkPSJ0aXRsZWJhciIsCiAgICAgICAgICAgQ2xhc3M9InVpLWRpYWxvZy10aXRsZWJhciB1aS13aWRnZXQtaGVhZGVyIHVpLWNvcm5lci1hbGwgdWktaGVscGVyLWNsZWFyZml4IikKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IF9kaXZfdGl0bGViYXIKCiAgICAgIHNlbGYuX2Rpdl90aXRsZT1odG1sLlNQQU4oSWQ9InRpdGxlIiwgQ2xhc3M9InVpLWRpYWxvZy10aXRsZSIpCiAgICAgICAgCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fZGl2X3RpdGxlCgogICAgICBzZWxmLl90aXRsZV9idXR0b249aHRtbC5CVVRUT04oVGl0bGU9ImNsb3NlIiwKICAgICAgICAgICAgQ2xhc3M9InVpLWJ1dHRvbiB1aS13aWRnZXQgdWktc3RhdGUtZGVmYXVsdCB1aS1jb3JuZXItYWxsIHVpLWJ1dHRvbi1pY29uLW9ubHkgdWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlIikKCiAgICAgIGRlZiBkaWFsb2dfY2xvc2UoZSk6CiAgICAgICAgICAjZGVsIGRvY3VtZW50W3NlbGYuX2Rpdl9zaGVsbC5pZF0KICAgICAgICAgIGRlbCBkb2Nbc2VsZi5fZGl2X3NoZWxsLmlkXQoKICAgICAgc2VsZi5fdGl0bGVfYnV0dG9uLmJpbmQoJ2NsaWNrJywgZGlhbG9nX2Nsb3NlKQogICAgICBfc3Bhbj1odG1sLlNQQU4oQ2xhc3M9InVpLWJ1dHRvbi1pY29uLXByaW1hcnkgdWktaWNvbiB1aS1pY29uLWNsb3NldGhpY2siKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9zcGFuPWh0bWwuU1BBTignY2xvc2UnLCBDbGFzcz0idWktYnV0dG9uLXRleHQiKQogICAgICBzZWxmLl90aXRsZV9idXR0b24gPD0gX3NwYW4KCiAgICAgIF9kaXZfdGl0bGViYXIgPD0gc2VsZi5fdGl0bGVfYnV0dG9uCgogICAgICBzZWxmLl9kaXZfZGlhbG9nPWh0bWwuRElWKENsYXNzPSJ1aS1kaWFsb2ctY29udGVudCB1aS13aWRnZXQtY29udGVudCIsCiAgICAgICAgICAgc3R5bGU9eyd3aWR0aCc6ICdhdXRvJywgJ21pbi1oZWlnaHQnOiAnMTA1cHgnLCAKICAgICAgICAgICAgICAgICAgJ21heC1oZWlnaHQnOiAnbm9uZScsICdoZWlnaHQnOiAnYXV0byd9KQoKICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IHNlbGYuX2Rpdl9kaWFsb2cKCiAgICAgIGZvciBfaSBpbiBbJ24nLCAnZScsICdzJywgJ3cnLCAnc2UnLCAnc3cnLCAnbmUnLCAnbncnXToKICAgICAgICAgIGlmIF9pID09ICdzZSc6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIHVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtJXMiICUgKF9pLCBfaSkKICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICBfY2xhc3M9InVpLXJlc2l6YWJsZS1oYW5kbGUgdWktcmVzaXphYmxlLSVzIiAlIF9pCgogICAgICAgICAgc2VsZi5fZGl2X3NoZWxsIDw9IGh0bWwuRElWKENsYXNzPV9jbGFzcywgc3R5bGU9eyd6LWluZGV4JzogJzkwJ30pCgogICAgICBkb2MgPD0gc2VsZi5fZGl2X3NoZWxsCgogIGRlZiBzZXRfdGl0bGUoc2VsZiwgdGl0bGUpOgogICAgICBzZWxmLl9kaXZfdGl0bGUuc2V0X3RleHQodGl0bGUpCgogIGRlZiBzZXRfYm9keShzZWxmLCBib2R5KToKICAgICAgc2VsZi5fZGl2X2RpYWxvZy5zZXRfaHRtbChib2R5KQo=',
'/Lib/http/cookies.py':'',
'/Lib/http/__init__.py':''
}


function readFromVFS(lib){
   //borrowed code from http://stackoverflow.com/questions/1119722/base-62-conversion-in-python
   if (window.atob === undefined) {
      // browser is not chrome, firefox or safari :(
      window.atob=function(s) {
        var e={},i,k,v=[],r='',w=String.fromCharCode;
        var n=[[65,91],[97,123],[48,58],[43,44],[47,48]];

        for(z in n){for(i=n[z][0];i<n[z][1];i++){v.push(w(i));}}
        for(i=0;i<64;i++){e[v[i]]=i;}

        for(i=0;i<s.length;i+=72){
           var b=0,c,x,l=0,o=s.substring(i,i+72);
           for(x=0;x<o.length;x++){
              c=e[o.charAt(x)];b=(b<<6)+c;l+=6;
              while(l>=8){r+=w((b>>>(l-=8))%256);}
           }
        }
        return r;
      }
   }

   if (__BRYTHON__.$py_VFS[lib] === undefined) return undefined
   //retrieve module from virutal file system and return contents
   return window.atob(__BRYTHON__.$py_VFS[lib])
}


function $import_pyj_module(module,alias,names,path,module_contents) {
    __BRYTHON__.$py_module_path[module]=path
    __BRYTHON__.$py_module_alias[module]=alias
    __BRYTHON__.scope[module+'.py']={}
    __BRYTHON__.scope[module+'.py'].__dict__={}

   try {
     eval(module_contents);
     // add names defined in the module as attributes of $module
     for(var attr in __BRYTHON__.scope[module].__dict__){
       $module[attr] = __BRYTHON__.scope[module].__dict__[attr]
     }
        
     // add class and __str__
     $module.__class__ = $type
     $module.__repr__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__str__ = function(){return "<module '"+module+"' from "+path+" >"}
     $module.__file__ = path
     return $module
   } catch(err) {
     eval('throw '+err.name+'(err.message)')
   }
}

//define import procedure to look up module in VFS
$import_via_VFS=function(module,alias,names){
  var ext=['.js', '.pyj', '.py']
  var search_path=__BRYTHON__.path
  var root = __BRYTHON__.brython_path;
  if (root.endswith('/')) {
     root=root.substring(0,root.length-1); 
  }
  if (search_path.indexOf(root+'/libs') == -1) {
     search_path.unshift(root+'/libs')
  }

  if (search_path.indexOf(root+'/Lib') == -1) {
     search_path.unshift(root+'/Lib')
  }

  for(var i=0; i<search_path.length; i++) {
     for (var j=0; j<ext.length; j++) {
         var path=search_path[i].replace(root, '')
         path+='/'+module+ext[j]
         
         //console.log("searching for " + path + " in VFS");
         var module_contents=readFromVFS(path)
         if(module_contents !== undefined) {
           console.log("imported ("+module+") via VFS:" + path)
           if (ext[j] == '.js') {
              return $import_js_module(module,alias,names,path,module_contents)
           }
           if (ext[j] == '.pyj') {
              return $import_pyj_module(module,alias,names,path,module_contents)
           }
           return $import_py_module(module,alias,names,path,module_contents)
         }
     }
  }
  res = Error()
  res.name = 'NotFoundError'
  res.message = "No module named '"+module+"'"
  throw res
}

// since $import_funcs is now a local variable (import_funcs), we have
// to over write the $import_single function to get VFS to work
$import_single=function (module){
    var import_funcs = [$import_via_VFS, $import_js, $import_module_search_path]
    if(module.name.search(/\./)>-1){import_funcs = [$import_module_search_path]}
    for(var j=0;j<import_funcs.length;j++){
        try{
            return import_funcs[j](module)
        } catch(err){
            if(err.name==="NotFoundError"){
                if(j==import_funcs.length-1){
                    throw ImportError("no module named '"+module.name+"'")
                }else{
                    continue
                }
            }else{throw(err)}
        }
    }
}
  