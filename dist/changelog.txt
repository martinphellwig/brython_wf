This version brings a major change in class implementations in Brython

In the previous version, when a class instance was created, the Javascript object for this instance had attributes made from the class attributes : if the class defined a method foo, the instance has an attribute 'foo'

It made basic attribute lookup fast : instance.foo was found as the attribute 'foo' of the Javascript object. It was more difficult for attributes defined in subclasses of the class. But it made it impossible to reflect any change in the class in already created instances

For instance, a bug that was never reported :

def foo:
    A = 0
x = foo()
foo.A = 1
print(x.A)

The new version applies the same attribute resolution algorithm as Python : search in the instance dictionary first, then in the class attributes, then in the parent classes, using the Method Resolution Order built from the parent classes using the C3 algorithm

A Python class is represented by 2 Javascript objects :
- a 'factory' function, used to create instances of the class : it is defined using the class methods __new__ and __init__
- a class 'dictionary' : a Javascript object whose attributes are the class attributes and methods

The Python code 'obj.x' is translated into 'getattr(obj,'x')'. getattr() resolves attributes using the object's method __getattribute__ first, else __getattr__

- change implementation of query string : attribute doc.query instead of function doc.query()

- ajax and websockets are now in modules, not built-in :

import ajax
req = ajax.ajax()

import websocket
ws = websocket.websocket()

- issue 142 : isinstance(obj,klass) checks parent classes of obj

- issue 154 : ajax.send() accepts string arguments (supposed to be JSON data)

- issue 155 : JSObject accepts arguments that are themselves instances of JSObject or JSContructor

- split py_classes into files for classes (py_int, py_float, py_dict, py_set) and py_builtin_functions

- use the same base functions $iterator and $iterator_class for iterators on lists, tuples, dicts, sets, dict keys, values and items, etc

