<html>
<head>
<title>Brython</title>
<meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
<link rel="stylesheet" href="../doc_brython.css">
<script src="/src/brython.js"></script>
</head>
<body onload="brython()">

<a name="syntaxe"><h3>Sintaxis</h3>
Brython usa la misma sintaxis que Python:
<ul>
<li>Los espacios en blanco son significativos e importantes y definen bloques
<li>Las listas se crean con <code>[]</code> o <code>list()</code>, Las tuplas se crean con <code>()</code> o <code>tuple()</code>, los diccionarios se crean con <code>{}</code> o <code>dict()</code> y los conjuntos (sets) se crean con  <code>set()</code>
<li>listas, diccionarios y conjuntos por comprensi&oacute;n (comprehension): <ul>
<li><code>[ expr for item in iterable if condition ]</code>
<li><code> dict((i,2*i) for i in range(5))</code>
<li><code>set(x for x in 'abcdcga')</code>
</ul>
<li>generadores (keyword <code>yield</code>), expresiones generadoras : <code>foo(x for x in bar if x>5)</code>
<li>operador ternario: <code>x = r1 if condition else r2</code>
<li>Las funciones pueden ser definidas con cualquier combinaci&oacute;n de argumentos fijos, argumentos por defecto, argumentos posicionales variables y argumentos de palabras clave variables : <br><code>def foo(x, y=0, *args, **kw):</code>
<li>Desempaquetado de argumentos en listas o diccionarios en llamadas a funciones : <code>x = foor(*args, **kw)</code>
<li>clases con herencia m&uacute;ltiple
<li>decoradores
<li>imports : <code>import foo, from foo import X, import foo as bar, from foo import X as Y, from foo import *</code>
</ul>

</ul>

<a name="integr"><h3>Keywords y funciones integradas (built-in functions)</h3>

Brython soporta la mayor parte de keywords y funciones de Python 3 :
<ul><li>keywords : <code>as assert break class continue def del elif else except False finally for from global if import is lambda None pass return True try while yield</code>
<li>built-in functions : <code>abs(), all(), any(), ascii(), bin(), bool(), chr(), dict(), dir(), divmod(), enumerate(), eval(), exec(), filter(), float(), frozenset(), getattr(), hasattr(), hash(), hex(), id(), input(), int(), isinstance(), iter(), len(), list(), map(), max(), min(), next(), object(), open(), ord(), pow(), print(), property(), range(), repr(), reversed(), round(), set(), setattr(), slice(), sorted(), str(), sum(), tuple(), zip()</code>
</ul>

Por defecto, <code>print()</code> mostrar&aacute; la salida en la consola del navegador de la misma forma que sucede con los errores. <code>sys.stderr</code> y <code>sys.stdout</code> se pueden asignar a un objeto usando el m&eacute;todo <code>write()</code> permitiendo la redirecci&oacute;n del 'output' a una ventana o &aacute;rea texto. <p><code>sys.stdin</code>, de momento, no ha sido implementado, sin embargo, existe la funci&oacute;n integrada (built-in function) <code>input()</code> que abre un di&aacute;logo bloqueante de entrada (un 'prompt').
<p>Para abrir un di&aacute;logo de impresi&oacute;n (a una impresora), llama a <code>win.print</code>


<p>Lo siguiente no ha sido implementado en la versi&oacute;n actual : 
<ul>
<li>keywords <code>nonlocal with</code>
<li>built-in functions <code>bytearray(), bytes(), callable(), classmethod(), compile(), complex(), delattr(), format(), globals(), help(), locals(), memoryview(), staticmethod(), super(), type(), vars(), __import__</code>
<li>El tipo de n&uacute;meros complejos (<code>j</code>) no est&aacute; soportado</li>
</ul>
</ul>
A diferencia de Python, puedes a&ntilde;adir atributos a objetos creados mediante <code>object()</code>:
<p><pre>x = object()
x.foo = 44
del x.foo
</pre>
<p>
Por &uacute;ltimo, se han incluido algunas keywords y funciones integradas (built-in functions) dise&ntilde;adas para realizar operaciones en el navegador :
<ul>
<li>Los 'built-ins' <code>alert(), confirm(), prompt()</code> corresponden a sus equivalentes en Javascript.
<li>La funci&oacute;n integrada <code>ajax()</code> permite la ejecuci&oacute;n de peticiones HTTP requests en modo Ajax.
<li>La 'keyword' <code>win</code> es la ventana (objeto window en Javascripts) y <code>doc</code> representa el documento HTML (document en Javascript).
</ul>
<hr>
<a name="htmldocs"><h3>Manejo de documentos HTML</h3>

Una p&aacute;gina HTML se puede ver como un &aacute;rbol cuyo nodo ra&iacute;z se representa por la etiqueta <code>doc</code>. Los subsecuentes nodos tambi&eacute;n son objetos Python integrados (strings, integers ...) u objetos creados por las funciones correspondientes a sus etiquetas HTML.
<p>Estas funciones se encuentran en el m&oacute;dulo integrado <code>html</code> que debe ser importado. El nombre de la etiqueta se escribe en letras may&uacute;sculas. De la misma forma que para cualquier m&oacute;dulo Python, puedes  
<ul>
<li>importar solo el nombre del m&oacute;dulo : <code>import html</code>, y despu&eacute;s referenciar las etiquetas mediante <code>html.DIV</code>
<li>o importar los nombres requeridos por el programa : <code>from html import A,B,DIV</code>, o, solo en caso de que no haya conflictos de nombres : <code>from html import *</code>
</ul><p>La sintaxis para crear un objeto (eg un hiperenlace) es :
<dl><dt><code>A(<i>[content,[attributes]]</i>)</code>
<dd><em>content</em> es el nodo hijo del objeto ; <em>attributes</em> es una secuencia de palabras clave (keywords) correspondientes a los atributos de la etiqueta HTML. Estos atributos deben ser introducidos con sintaxis Javascript, no CSS: <em>backgroundColor</em> en lugar de <em>background-color</em>
</dl>
Ejemplo :
<p><pre>import html
link1 = html.A('Brython', href='http://www.brython.info')
link2 = html.A(html.B('Python'), href='http://www.python.org')
</pre>
<p>Para el atributo <em>style</em>, el valor debe ser un diccionario :
<p><pre>d = html.DIV('Brython', style={'height':100, 'width':200})
</pre>
<p>Para evitar conflictos con las palabras clave de Python, atributos como <em>class</em> o <em>id</em> deben ser escritos con la primera letra en may&uacute;scula :
<blockquote><pre>d = html.DIV('Brython',Id="zone", Class="container")</pre></blockquote>

<p>Tambi&eacute;n se puede crear un objeto sin argumentos y a&ntilde;adirlos a posteriori:
<ul>
<li>Para a&ntilde;adir un nodo hijo hay que usar el operador <b><=</b>
<li>Para a&ntilde;adir atributos se usa la sintaxis cl&aacute;sica de Python : <pre style="display:inline">object.attribute = value</pre>
</ul>
<p>Ejemplo :
<p><pre>link = A()
link <= B('connexion')
link.href = 'http://example.com'
</pre>
<p>Tambi&eacute;n se pueden crear m&uacute;ltiples elementos al mismo nivel usando el signo m&aacute;s (+) :
<p><pre>row = TR(TH('LastName') + TH('FirstName'))</pre>
<p>Aqu&iacute; se puede ver como crear caja de selecci&oacute;n a partir de una lista (mediante la combinaci&oacute;n de los operadores descritos y sintaxis Python) :
<p><pre>items = ['one', 'two', 'three']
sel = SELECT()
for i, elt in enumerate(items):
    sel <= OPTION(elt, value = i)
doc <= sel
</pre>
<p>Es importante resaltar que la creaci&oacute;n de una instancia de una clase conlleva la creaci&oacute;n HTML a partir de un &uacute;nico objeto DOM. Si asignamos la instancia a una variable, no podr&aacute; ser usada en varios sitios. Por ejemplo, con este c&oacute;digo :
<p><pre>link = A('Python', href='http://www.python.org')
doc <= 'Official Python Website: ' + link
doc <= P() + 'I repeat: the site is ' + link
</pre>
El link solo se mostrar&aacute; en la segunda l&iacute;nea. Una soluci&oacute;n ser&iacute;a clonar el objeto original :
<p><pre>link = A('Python', href='http://www.python.org')
doc <= 'Official Python Website: ' + link
doc <= P() + 'I repeat: the site is ' + link.clone()
</pre>


<p>Como regla general, los atributos de las instancias de clases HTML tienen el mismo nombre que los objetos DOM correspondientes. Por ejemplo, podemos obtener la opci&oacute;n seleccionada por el atributo <tt>selectedIndex</tt> del objeto SELECT. Brython a&ntilde;ade algunas cosas que permiten que la manipulaci&oacute;n sea un poco m&aacute;s Pyth&oacute;nica

<p>
<ul>
<li>Para buscar objetos por su identificador o su nombre de etiqueta puedes usar la siguiente sintaxis :
<ul>
<li><pre style="display:inline">doc[obj_id]</pre>  devuelve el objeto a partir de su identificador o lanza una <code>KeyError</code>.
<li><pre style="display:inline">doc[A]</pre>  devuelve la lista de todos los objetos de tipo A (hiperenlace) presentes en el documento.
</ul>

<li>El m&eacute;todo <code>get()</code> se puede usar para buscar elementos :
<ul>
<li><code>elt.get(name=N)</code> devuelve una lista con todos los elementos dentro de <em>elt</em> cuyo atributo <code>name</code> es igual a <code>N</code>
<li><code>elt.get(selector=S)</code> devuelve una lista con todos los elementos dentro de <em>elt</em> que coinciden con el selector especificado
</ul>

<li>El contenido de un nodo DOM puede ser le&iacute;do o modificado por los atributos <tt>text</tt> o <tt>html</tt>, que corresponden a los objetos DOM <i>innerText</i> (o <i>textContent</i>) y <i>innerHTML</i>, respectivamente.
<li>La colecci&oacute;n <code>options</code> asociada con el objeto SELECT tiene una interfaz de lista Python :
<ul>
<li>acceso a una opci&oacute;n por su &iacute;ndice : <pre style="display:inline">option = elt.options[index]</pre>
<li>inserci&oacute;n de una opci&oacute;n en la posici&oacute;n del <em>index</em> : <pre style="display:inline">elt.options.insert(index,option)</pre>
<li>inserci&oacute;n de una opci&oacute;n al final de la lista : <pre style="display:inline">elt.options.append(option)</pre>
<li>borrado de una opci&oacute;n : <pre style="display:inline">del elt.options[index]</pre>
</ul>
<li>Es posible iterar sobre los hijos del objeto usando la sintaxis Python habitual : <pre style="display:inline">for child in dom_object:</pre>
</ul>
<h3>Eventos</h3>
Para asociar una funci&oacute;n a un evento usamos la sintaxis 
<blockquote><pre>element.onclick = callback</pre></blockquote>
La funci&oacute;n <tt>callback</tt> toma un solo argumento, una instancia de la clase <tt>DOMEvent</tt>. M&aacute;s all&aacute; de los atributos DOM (los nombres pueden variar en funci&oacute;n del navegador), este objeto posee, en particular, los siguientes atributos :
<p><table border=1>
<tr><th>Tipo de evento</th><th>Atributos</th></tr>
<tr><td>click o movimiento del rat&oacute;n</td><td><tt>x, y</tt> : posici&oacute;n del rat&oacute;n en relaci&oacute;n a la esquina superior izquierda de la ventana</td></tr>
<tr><td>drag and drop (HTML5)</td><td><tt>datos</tt> : datos asociados con el movimiento</td></tr>
</table>
<p>Ejemplo :
<table>
<tr>
<td>
<pre>&lt;script type='text/python'&gt;
def mouse_move(ev):
    doc["trace"].value = '%s %s' %(ev.x,ev.y)

doc["zone"].onmousemove = mouse_move
&lt;/script&gt;

&lt;input id="trace" value=""&gt;
&lt;br&gt;&lt;textarea id="zone" rows=20 columns=30 style="background-color:gray"&gt;
mueve el rat&oacute;n por encima de esta &aacute;rea&lt;/textarea&gt;
</pre>
</td>
<td>
<pre><script type='text/python'>
def mouse_move(ev):
    doc["trace"].value = '%s %s' %(ev.x,ev.y)

doc["zone"].onmousemove = mouse_move
</script>

<input id="trace" value="">
<br><textarea id="zone" rows=7 columns=30 style="background-color:gray">
mueve el rat&oacute;n por encima de esta &aacute;rea</textarea>
</pre>
</td>
</tr>
</table>

<p><hr>
<a name="svg"><h3>Gr&aacute;ficos SVG</h3>

Para crear gr&aacute;ficos vectoriales (formato SVG), soportado por la mayor&iacute;a de navegadores, puedes usar el m&oacute;dulo integrado <code>svg</code>. El nombre proviene de los componentes disponibles para dibujar formas y escribir texto

<p>Por ejemplo, si el documento HTML posee una zona de gr&aacute;ficos SVG definida por

<pre>
&lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
    width="140" height="200" style="border-style:solid;border-width:1;border-color:#000;"&gt;
  &lt;g id="panel"&gt;
  &lt;/g&gt;
&lt;/svg&gt;
</pre>

puedes insertar formas y texto :
<table>
<tr>
<td>
<pre>import svg
title = svg.text('Title',x=70,y=25,font_size=22,text_anchor="middle")
circle = svg.circle(cx="70",cy="120",r="40",stroke="black",stroke_width="2",fill="red")

panel = doc['panel']
panel <= title
panel <= circle
</pre>
<button onclick="run_svg()">click !</button>
</td>

<td>
<script type="text/python">
def run_svg():
    import svg
    title = svg.text('Title',x=70,y=25,font_size=22,text_anchor="middle")
    circle = svg.circle(cx=70,cy=120,r=40,stroke="black",stroke_width=2,fill="red")
    
    panel = doc['panel']
    panel <= title
    panel <= circle

</script>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
    width="140" height="200" style="border-style:solid;border-width:1;border-color:#000;">
  <g id="panel">
  </g>
</svg>
</td>

</tr>

</table>

<p><hr>
<a name="jsobjects"><h3>Usando objetos Javascript</h3>

Tenemos que manejar el periodo de transici&oacute;n en el que Brython va a coexistir con Javascript ;-)

<p>Un documento HTML puede usar librer&iacute;as o scripts Javascript, adem&aacute;s de librer&iacute;as y scripts Python. Brython no puede hacer uso de forma directa de los objetos Javascript : por ejemplo, la b&uacute;squeda de atributos se hace mediante el m&eacute;todo <tt>__getattr__</tt>, que no existe para objetos Javascript
<p>Para poder ser usados en un script Python, deben ser transformados expl&iacute;citamente por la funci&oacute;n integrada <tt>JSObject</tt>
<p>Por ejemplo :

<blockquote>
<pre>
&lt;script type="text/javascript"&gt;
circle = {surface:function(r){return 3.14*r*r}}
&lt;/script&gt;
&lt;script type="text/python"&gt;
doc['result'].value = JSObject(circle).surface(10)
&lt;/script&gt;
</pre>
</blockquote>
<p><hr>
<a name="ajax"><h3>Ajax</h3>
La funci&oacute;n integrada <code>ajax()</code> devuelve un objeto similar a XMLHttpRequest en Javascript, pero su interfaz es ligeramente diferente. Posee los siguientes m&eacute;todos

<ul><li><code>open(<em>method, url, async</em>)</code> : <em>method</em> es el m&eacute;todo HTTP usado para la petici&oacute;n (normalmente GET o POST), <em>url</em> es la url a llamar, <em>async</em> es el booleano que indica si la llamada es as&iacute;ncrona o no
<li><code>set_header(<em>name, value</em>)</code> : establece el <em>valor</em> del <em>nombre</em> del cabecero
<li><code>set_timeout(<em>duration, function</em>)</code> : si la petici&oacute;n no devuelve una respuesta durante la <em>duraci&oacute;n</em> en segundos, cancelar&aacute; la petici&oacute;n y ejecutar&aacute; la <em>funci&oacute;n</em>. Esta funci&oacute;n no puede tener argumentos
<li><code>send()</code> : env&iacute;a (inicia) la petici&oacute;n
</ul>
Para interactuar con el servidor debes poner los siguientes atributos, correspondientes a cada estado del atributo <tt>readyState</tt> del objeto Ajax :
<p><table><tr><th>readyState</th><th>atributo</th></tr>
<tr><td>0</td><td><code>on_uninitialized</code></td></tr>
<tr><td>1</td><td><code>on_loading</code></td></tr>
<tr><td>2</td><td><code>on_loaded</code></td></tr>
<tr><td>3</td><td><code>on_interactive</code></td></tr>
<tr><td>4</td><td><code>on_complete</code></td></tr>
</table>
<p>El atributo debe ser una funci&oacute;n que tomar&aacute; un &uacute;nico argumento: el objeto <code>ajax</code>. Este objeto posee los siguientes atributos :
<ul>
<li><code>status</code> : un entero que representa el estado HTTP de la petici&oacute;n
<li><code>text</code> : la respuesta del servido como una cadena de caracteres (corresponder&iacute;a a <tt>responseText</tt> en Javascript)
<li><code>xml</code> : la respuesta del servido como un objeto DOM (corresponder&iacute;a a <tt>responseXML</tt> en Javascript)
</ul>

<h4>Ejemplo</h4>
Supondremos que existe un DIV con id <em>result</em> en la p&aacute;gina HTML
<p>
<pre>
def on_complete(req):
    if req.status==200 or req.status==0:
        doc["result"].html = req.text
    else:
        doc["result"].html = "error "+req.text

req = ajax()
req.on_complete = on_complete
req.set_timeout(timeout,err_msg)
req.open('POST',url,True)
req.set_header('content-type','application/x-www-form-urlencoded')
req.send(data)
</pre>
<hr>
<a name="locstor"><h3>Almacenamiento local (Local storage)</h3>

El almacenamiento local definido por HTML5 puede ser usado con el m&oacute;dulo <code>local_storage</code>. El objeto <code>storage</code> definido en este m&oacute;dulo se usa como un diccionario Python
<h4>Ejemplo</h4>
<pre>from local_storage import storage
storage['foo']='bar'
log(storage['foo'])
del storage['foo']
log(storage['foo']) # raises KeyError
</pre>

</body>
</html>
